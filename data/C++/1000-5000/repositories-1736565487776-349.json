{
  "metadata": {
    "timestamp": 1736565487776,
    "page": 349,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RainerKuemmerle/g2o",
      "stars": 3130,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.4912109375,
          "content": "BasedOnStyle: Google\nDerivePointerAlignment: false\n\n# Starting from clang-format v19 we need to specify those\nAttributeMacros: [\n  G2O_CSPARSE_EXTENSION_API, G2O_SOLVER_CSPARSE_API,\n  G2O_STUFF_API, G2O_CORE_API,\n  G2O_TYPES_DATA_API,\n  G2O_TYPES_SLAM2D_API, G2O_TYPES_SLAM2D_ADDONS_API,\n  G2O_TYPES_SLAM3D_API, G2O_TYPES_SLAM3D_ADDONS_API,\n  G2O_TYPES_ICP_API, G2O_TYPES_SBA_API,\n  G2O_TYPES_SIM3_API, G2O_TYPES_SCLAM2D_API,\n  G2O_SLAM2D_LINEAR_API,\n  G2O_SIMULATOR_API\n  G2O_CLI_API, G2O_VIEWER_API\n]\n"
        },
        {
          "name": ".codacy.yaml",
          "type": "blob",
          "size": 0.251953125,
          "content": "exclude_paths:\n  - 'script/**'\n  - 'g2o/EXTERNAL/**'\n  - g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp\n  - g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp\n  - g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "\\build*\n\\.vs\n\\.vscode\n\\.cache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.6044921875,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n\n# C++\n-   repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v19.1.5\n    hooks:\n    -   id: clang-format\n\n# python\n-   repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n-   repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n    -   id: black\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.28515625,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nset(CMAKE_LEGACY_CYGWIN_WIN32 0)\nset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.15\" CACHE STRING \"Minimum OS X deployment target\")\n\nproject(g2o)\n\ninclude(CPack)\ninclude(GNUInstallDirs)\n\n# The library prefix\nset(LIB_PREFIX g2o_)\n\nset(g2o_C_FLAGS)\nset(g2o_CXX_FLAGS)\n\nset(G2O_LIB_VERSION   \"0.1.0\" CACHE STRING \"g2o library version\")\nset(G2O_LIB_SOVERSION \"0.1\"   CACHE STRING \"g2o library soversion\")\nset(G2O_VERSION 1.0.0)\n\n# manually check for top-level project if CMake is older than 3.21\nif(CMAKE_VERSION VERSION_LESS 3.21)\n  string(COMPARE EQUAL \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}\" PROJECT_IS_TOP_LEVEL)\nendif()\n\nif(PROJECT_IS_TOP_LEVEL)\n  # default built type\n  if(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release CACHE STRING\n            \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"\n            FORCE)\n  endif()\nendif()\n\n# Allow the developer to select if Dynamic or Static libraries are built\noption (BUILD_SHARED_LIBS \"Build Shared Libraries (preferred and required for the g2o plugin system)\" ON)\nset (G2O_LIB_TYPE STATIC)\nif (BUILD_SHARED_LIBS)\n  set (G2O_LIB_TYPE SHARED)\nendif()\n\n# On the Mac platform, configure the RPATH as per the INSTALL, to\n# avoid the problem of loading both the built and INSTALLed versions\n# of the shared targets\nif(APPLE)\n  set(CMAKE_INSTALL_RPATH \"\")\n  set(CMAKE_MACOSX_RPATH TRUE)\n  # ignore deprecated GL\n  add_definitions(-DGL_SILENCE_DEPRECATION)\nendif(APPLE)\n\n# Set the output directory for the build executables and libraries\nset(g2o_RUNTIME_OUTPUT_DIRECTORY ${g2o_BINARY_DIR}/bin CACHE PATH \"Target for the binaries\")\nif(WIN32)\n  set(g2o_LIBRARY_OUTPUT_DIRECTORY ${g2o_BINARY_DIR}/bin CACHE PATH \"Target for the libraries\")\nelse(WIN32)\n  set(g2o_LIBRARY_OUTPUT_DIRECTORY ${g2o_BINARY_DIR}/lib CACHE PATH \"Target for the libraries\")\nendif(WIN32)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${g2o_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${g2o_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${g2o_RUNTIME_OUTPUT_DIRECTORY})\n\n# Set standard installation directories\nset(RUNTIME_DESTINATION ${CMAKE_INSTALL_BINDIR})\nset(LIBRARY_DESTINATION ${CMAKE_INSTALL_LIBDIR})\nset(ARCHIVE_DESTINATION ${CMAKE_INSTALL_LIBDIR})\nset(INCLUDES_DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\nset(INCLUDES_INSTALL_DIR ${INCLUDES_DESTINATION}/g2o)\n\n# Set search directory for looking for our custom CMake scripts to\n# look for SuiteSparse, QGLViewer, and Eigen3.\nlist(APPEND CMAKE_MODULE_PATH ${g2o_SOURCE_DIR}/cmake_modules)\n\n# Detect OS and define macros appropriately\nif(WIN32)\n  add_definitions(-DWINDOWS)\n  message(STATUS \"Compiling on Windows\")\nelseif(CYGWIN)\n  message(STATUS \"Compiling on Cygwin\")\n  add_definitions(-DCYGWIN)\nelseif(APPLE)\n  add_definitions(-DUNIX)\n  message(STATUS \"Compiling on OSX\")\nelseif(UNIX)\n  add_definitions(-DUNIX)\n  message(STATUS \"Compiling on Unix\")\nendif(WIN32)\n\n# detect Android Cross Compiler\n# based on android-cmake which sets the variable ANDROID for us\nif(ANDROID)\n  add_definitions(-DANDROID)\n  message(STATUS \"Cross compiling for Android\")\nendif()\n\n# For building the CHOLMOD based solvers\noption(G2O_USE_CHOLMOD \"Build g2o with CHOLMOD support\" ON)\nfind_package(SuiteSparse)\nif (G2O_USE_CHOLMOD AND SuiteSparse_CHOLMOD_FOUND)\n  message(STATUS \"Enable support for Cholmod\")\n  set(CHOLMOD_FOUND TRUE)\nelse()\n  message(STATUS \"Disable support for Cholmod\")\n  set(CHOLMOD_FOUND FALSE)\nendif()\n\n# Options to control the LGPL libraries\noption(G2O_USE_LGPL_LIBS \"Build libraries which use LGPL code\" TRUE)\n\n# If the LGPL libraries are used, check if static or shared libraries are used and\n# show a suitable message\nif (G2O_USE_LGPL_LIBS)\n  if (G2O_LIB_TYPE STREQUAL \"STATIC\")\n    message(STATUS \"Building LGPL code as a static library (affects license of the binary)\")\n  else()\n    message(STATUS \"Building LGPL code as a shared library\")\n  endif()\nendif()\n\n# Adapter for the legacy LGPL flags. Note there is an inconsistency with the old implementation.\nif (BUILD_LGPL_SHARED_LIBS)\n  if (G2O_LIB_TYPE STREQUAL \"SHARED\")\n    set(G2O_USE_LGPL_LIBS TRUE)\n  else()\n    message(FATAL_ERROR \"BUILD_LGPL_SHARED_LIBS is set to true but G2O_LIB_TYPE is set to STATIC\")\n  endif()\nendif()\n\n# For building the CSparse based solvers. Note this depends on an LGPL library.\noption(G2O_USE_CSPARSE \"Build g2o with CSParse support\" ON)\nfind_package(CSparse)\nif (${G2O_USE_CSPARSE} AND ${CSPARSE_FOUND} AND ${G2O_USE_LGPL_LIBS})\n  message(STATUS \"Enable support for CSparse\")\nelse()\n  message(STATUS \"Disable support for CSparse\")\n  set(G2O_USE_CSPARSE FALSE)\nendif()\n\n\n# Eigen library parallelise itself, though, presumably due to performance issues\n# OPENMP is experimental. We experienced some slowdown with it\noption(G2O_USE_OPENMP \"Build g2o with OpenMP support (EXPERIMENTAL)\" OFF)\nif(G2O_USE_OPENMP)\n  find_package(OpenMP)\n  if(OPENMP_FOUND)\n    set (G2O_OPENMP 1)\n    set(g2o_C_FLAGS \"${g2o_C_FLAGS} ${OpenMP_C_FLAGS}\")\n    set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} -DEIGEN_DONT_PARALLELIZE ${OpenMP_CXX_FLAGS}\")\n    message(STATUS \"Compiling with OpenMP support\")\n  endif(OPENMP_FOUND)\nendif(G2O_USE_OPENMP)\n\n# OpenGL is used in the draw actions for the different types, as well\n# as for creating the GUI itself\nset(OpenGL_GL_PREFERENCE \"GLVND\")\nfind_package(OpenGL)\n\n# If OpenGL was found, use the import target if available. If not, use old-style includes\noption(G2O_USE_OPENGL \"Build g2o with OpenGL support for visualization\" ON)\nset(G2O_HAVE_OPENGL 0)\nif (OPENGL_FOUND AND G2O_USE_OPENGL)\n  if (TARGET OpenGL::GL)\n    set(G2O_OPENGL_TARGET \"OpenGL::GL;OpenGL::GLU\")\n  else()\n    set(G2O_OPENGL_TARGET \"${OPENGL_LIBRARIES}\")\n    include_directories(${OPENGL_INCLUDE_DIR})\n  endif()\n  set(G2O_HAVE_OPENGL 1)\n  message(STATUS \"Compiling with OpenGL support\")\n  #message(WARNING G2O_OPENGL_TARGET=${G2O_OPENGL_TARGET})\nendif()\n\n# For building the GUI\nfind_package(QGLViewer)\n\n# Logging library\noption(G2O_USE_LOGGING \"Try to use spdlog for logging\" ON)\nset(G2O_HAVE_LOGGING 0)\nif (G2O_USE_LOGGING)\n  find_package(spdlog 1.6 QUIET)\n  if (TARGET spdlog::spdlog OR TARGET spdlog::spdlog_header_only)\n    set(G2O_HAVE_LOGGING 1)\n    message(STATUS \"Compiling with logging support\")\n  endif()\nendif()\n\n# Handle building the built in types. There is a fair degree of\n# granularity and dependency in the types supported.\n\n# 2D types\noption(G2O_BUILD_SLAM2D_TYPES \"Build SLAM2D types\" ON)\noption(G2O_BUILD_SLAM2D_ADDON_TYPES \"Build SLAM2D addon types\" ON)\noption(G2O_BUILD_DATA_TYPES \"Build SLAM2D data types\" ON)\noption(G2O_BUILD_SCLAM2D_TYPES \"Build SCLAM2D types\" ON)\n\n# Process the arguments. If G2O_BUILD_SLAM2D_TYPES is disabled, forceably\n# disable all types. Otherwise, update messages on the types enabled.\nif(G2O_BUILD_SLAM2D_TYPES)\n  string(APPEND supported_types_message \" slam2d\")\n  # Make sure that we can't activate both types\n  if(G2O_BUILD_SLAM2D_ADDON_TYPES)\n    string(APPEND supported_types_message \" slam2d (addons)\")\n  endif()\n  if(G2O_BUILD_DATA_TYPES)\n    string(APPEND supported_types_message \" data\")\n  endif()\n  if(G2O_BUILD_SCLAM2D_TYPES)\n    string(APPEND supported_types_message \" sclam2d\")\n  endif()\nelse()\n  set(G2O_BUILD_SLAM2D_ADDON_TYPES OFF)\n  set(G2O_BUILD_DATA_TYPES OFF)\n  set(G2O_BUILD_SCLAM2D_TYPES OFF)\nendif()\n\n# 3D types\noption(G2O_BUILD_SLAM3D_TYPES \"Build SLAM 3D types\" ON)\noption(G2O_BUILD_SLAM3D_ADDON_TYPES \"Build SLAM 3D addon types\" ON)\noption(G2O_BUILD_SBA_TYPES \"Build SLAM3D SBA types\" ON)\noption(G2O_BUILD_ICP_TYPES \"Build SLAM3D ICP types\" ON)\noption(G2O_BUILD_SIM3_TYPES \"Build SLAM3D sim3 types\" ON)\n\n# Process the arguments. If G2O_BUILD_SLAM3D_TYPES is disabled, forceably\n# disable all the types. Enable SBA if it's not enabled but one of it's\n# dependents is enabled.\nif(G2O_BUILD_SLAM3D_TYPES)\n  string(APPEND supported_types_message \" slam3d\")\n  message(STATUS \"Compiling SLAM 3D types\")\n  if (G2O_BUILD_SLAM3D_ADDON_TYPES)\n    string(APPEND supported_types_message \" slam3d (addons)\")\n  endif()\n  if (G2O_BUILD_SBA_TYPES)\n    string(APPEND supported_types_message \" sba\")\n  endif()\n  if (G2O_BUILD_ICP_TYPES)\n    if(NOT G2O_BUILD_SBA_TYPES)\n      message(WARNING \"ICP types requested but SBA types not enabled; enabling SBA\")\n      set(G2O_BUILD_SBA_TYPES ON)\n      string(APPEND supported_types_message \" sba\")\n    endif()\n    string(APPEND supported_types_message \" icp\")\n  endif()\n  if (G2O_BUILD_SIM3_TYPES)\n    if(NOT G2O_BUILD_SBA_TYPES)\n      message(WARNING \"SIM3 types requested but SBA types not enabled; enabling SBA\")\n      set(G2O_BUILD_SBA_TYPES ON)\n      string(APPEND supported_types_message \" sba\")\n    endif()\n    string(APPEND supported_types_message \" sim3\")\n  endif()\nelse()\n  set(G2O_BUILD_SLAM3D_ADDON_TYPES OFF)\n  set(G2O_BUILD_SBA_TYPES OFF)\n  set(G2O_BUILD_ICP_TYPES OFF)\n  set(G2O_BUILD_SIM3_TYPES OFF)\nendif()\n\nif(DEFINED supported_types_message)\n  message(STATUS \"Compiling built in types\" ${supported_types_message})\nelse()\n  message(STATUS \"Compiling with no built in types enabled\")\nendif()\n\n# shall we build the core apps using the library\noption(G2O_BUILD_APPS \"Build g2o apps\" ON)\nif(G2O_BUILD_APPS)\n  message(STATUS \"Compiling g2o apps\")\nendif(G2O_BUILD_APPS)\n\ninclude(CMakeDependentOption)\nCMAKE_DEPENDENT_OPTION(G2O_BUILD_LINKED_APPS \"Build apps linked with the libraries (no plugin system)\" OFF\n  \"G2O_BUILD_APPS\" OFF)\n\n# shall we build the examples\noption(G2O_BUILD_EXAMPLES \"Build g2o examples\" ON)\nif(G2O_BUILD_EXAMPLES)\n  message(STATUS \"Compiling g2o examples\")\nendif(G2O_BUILD_EXAMPLES)\n\noption(G2O_FAST_MATH \"Enable fast math operations\" OFF)\noption(G2O_NO_IMPLICIT_OWNERSHIP_OF_OBJECTS \"Disables memory management in the graph types, this requires the callers to manager the memory of edges and nodes\" OFF)\n\n# Start of SSE* autodetect code\n# (borrowed from MRPT CMake scripts, BSD)\noption(DO_SSE_AUTODETECT \"Enable autodetection of SSE* CPU sets and enable their use in optimized code\" ON)\nif(NOT EXISTS \"/proc/cpuinfo\")\n\tset(DO_SSE_AUTODETECT OFF)\nendif()\nif (DO_SSE_AUTODETECT)\n  file(READ \"/proc/cpuinfo\" G2O_CPU_INFO)\nendif()\n\n# Macro for each SSE* var: Invoke with name in uppercase:\nmacro(DEFINE_SSE_VAR  _setname)\n\tstring(TOLOWER ${_setname} _set)\n\tif (DO_SSE_AUTODETECT)\n\t\t# Automatic detection:\n\t\tset(CMAKE_G2O_HAS_${_setname} 0)\n\t\tif (${G2O_CPU_INFO} MATCHES \".*${_set}.*\")\n\t\t\tset(CMAKE_G2O_HAS_${_setname} 1)\n\t\tendif()\n\telse (DO_SSE_AUTODETECT)\n\t\t# Manual:\n\t\toption(\"DISABLE_${_setname}\" \"Forces compilation WITHOUT ${_setname} extensions\" OFF)\n\t\tmark_as_advanced(\"DISABLE_${_setname}\")\n\t\tset(CMAKE_G2O_HAS_${_setname} 0)\n\t\tif (NOT DISABLE_${_setname})\n\t\t\tset(CMAKE_G2O_HAS_${_setname} 1)\n\t\tendif (NOT DISABLE_${_setname})\n\tendif (DO_SSE_AUTODETECT)\nendmacro(DEFINE_SSE_VAR)\n\n# SSE optimizations:\nDEFINE_SSE_VAR(SSE2)\nDEFINE_SSE_VAR(SSE3)\nDEFINE_SSE_VAR(SSE4_1)\nDEFINE_SSE_VAR(SSE4_2)\nDEFINE_SSE_VAR(SSE4_A)\n\ninclude(CheckCXXCompilerFlag)\n\nmacro(CHECK_AND_ADD_COMPILE_OPTION _option _option_name)\n  if (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    check_cxx_compiler_flag(\"-Werror=unused-command-line-argument ${_option}\" ${_option_name}_AVAILABLE)\n  else()\n    check_cxx_compiler_flag(${_option} ${_option_name}_AVAILABLE)\n  endif()\n  if(${_option_name}_AVAILABLE)\n    add_compile_options(${_option})\n  endif()\nendmacro()\n\n# Add build flags for clang AND GCC\nif (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\" OR CMAKE_COMPILER_IS_GNUCXX)\n  # SSE2?\n  if (CMAKE_G2O_HAS_SSE2)\n    CHECK_AND_ADD_COMPILE_OPTION(-msse2 SSE2)\n  endif()\n  # SSE3?\n  if (CMAKE_G2O_HAS_SSE3)\n    CHECK_AND_ADD_COMPILE_OPTION(-msse3 SSE3)\n    CHECK_AND_ADD_COMPILE_OPTION(-mssse3 SSSE3)\n  endif()\n  # SSE4*?\n  if (CMAKE_G2O_HAS_SSE4_1)\n    CHECK_AND_ADD_COMPILE_OPTION(-msse4.1 SSE41)\n  endif()\n  if (CMAKE_G2O_HAS_SSE4_2)\n    CHECK_AND_ADD_COMPILE_OPTION(-msse4.2 SSE42)\n  endif()\n  if (CMAKE_G2O_HAS_SSE4_A)\n    CHECK_AND_ADD_COMPILE_OPTION(-msse4a SSE4a)\n  endif()\nendif()\n# End of of SSE* autodetect code -------\n\n# code coverage\noption(BUILD_CODE_COVERAGE \"Enable coverage reporting\" OFF)\nif(BUILD_CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\n  message(STATUS \"Enabling coverage compiler flags\")\n  set(g2o_C_FLAGS \"${g2o_C_FLAGS} --coverage\")\n  set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} --coverage\")\nendif()\n\n# Compiler specific options for gcc\noption (BUILD_WITH_MARCH_NATIVE \"Build with \\\"-march native\\\"\" OFF)\nif(CMAKE_COMPILER_IS_GNUCXX)\n  message(STATUS \"Compiling with GCC\")\n\n  # Generic settings for optimisation\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -O3\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -O3\")\n\n  if(G2O_FAST_MATH)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -ffast-math\")\n  endif()\n\n  # switch off optimization for debug builds\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0\")\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -O0\")\n\n  # OS X\n  #if(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    #set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    #set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n  #endif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  # Linux\n  if(BUILD_WITH_MARCH_NATIVE AND NOT \"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"arm\" AND \"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -march=native\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -march=native\")\n  endif()\n  # activate warnings !!!\n  set(g2o_C_FLAGS \"${g2o_C_FLAGS} -Wall -W\")\n  set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} -Wall -W\")\nendif(CMAKE_COMPILER_IS_GNUCXX)\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  message(STATUS \"Compiling with Clang\")\n\n  # Linux\n  if(BUILD_WITH_MARCH_NATIVE AND NOT \"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"arm\" AND \"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -march=native\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -march=native\")\n  endif()\n  # OS X\n  if(BUILD_WITH_MARCH_NATIVE AND \"${CMAKE_SYSTEM_NAME}\" MATCHES \"Darwin\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -march=native\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -march=native\")\n  endif()\n\n  # activate all warnings\n  #set(g2o_C_FLAGS \"${g2o_C_FLAGS} -Weverything\")\n  #set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} -Weverything\")\n  set(g2o_C_FLAGS \"${g2o_C_FLAGS} -Wall\")\n  set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} -Wall\")\n  #set(g2o_CXX_FLAGS \"${g2o_CXX_FLAGS} -Wall -stdlib=libc++\")\nendif()\n\nif(MSVC)\n  message(STATUS \"Compiling with MSVC\")\n\n  if (CMAKE_GENERATOR MATCHES \"ARM(64)?$\")\n    set(MSVC_ARM ON)\n  endif()\n\n  add_definitions(-DNOMINMAX)\n  add_definitions(-D_USE_MATH_DEFINES)\n\n  # exception handling\n  add_definitions(\"/EHsc\")\n\n  if (G2O_FAST_MATH)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /fp:fast\")\n  endif()\n\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Ox /Oi\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Ox /Oi\")\n\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Od\")\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Od\")\n\n  # SSE2 optimizations\n  # No need to specify if building for x64 (actually, it generates an annoying warning)\n  if (NOT MSVC_ARM)\n    if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n        add_definitions(\"/arch:SSE2\")\n    endif()\n  endif()\n\n  if (BUILD_SHARED_LIBS)\n    # disable warning on missing DLL interfaces\n    add_definitions(\"/wd4251\")\n  endif()\n\n  # Fix issue: https://github.com/RainerKuemmerle/g2o/issues/66\n  #            Link error LNK2005 due to duplicated symbols\n  add_definitions(\"/Ob2\")\n  # Fix other stupid warnings:\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)  # Avoid deprecated fprintf(), etc.\n  add_definitions(\"/nologo\")\n  # TODO not sure this should be a thing\n  add_definitions(\"/wd4244\") # Conversion from double -> int\n  add_definitions(\"/wd4267\") # Conversion during return\n  add_definitions(\"/wd4522\") # Duplicated operator=() in Eigen headers\n\n  # Bessel  include(CheckIfUnderscorePrefixedBesselFunctionsExist)\n  include(CheckIfUnderscorePrefixedBesselFunctionsExist)\n  check_if_underscore_prefixed_bessel_functions_exist(HAVE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS)\n  if (HAVE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS)\n    add_definitions(-DCERES_MSVC_USE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS)\n  endif()\n\nendif(MSVC)\n\n# specifying compiler flags\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${g2o_CXX_FLAGS}\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${g2o_C_FLAGS}\")\n\n# Find Eigen3. If it defines the target, this is used. If not,\n# fall back to the using the module form.\n# See https://eigen.tuxfamily.org/dox/TopicCMakeGuide.html for details\nfind_package(Eigen3 3.3 REQUIRED)\nif (TARGET Eigen3::Eigen)\n  set(G2O_EIGEN3_EIGEN_TARGET Eigen3::Eigen)\nelse()\n  include_directories(${EIGEN3_INCLUDE_DIR})\nendif ()\n\n# Generate config.h\nset(G2O_OPENGL_FOUND ${OPENGL_FOUND})\nset(G2O_HAVE_CHOLMOD ${CHOLMOD_FOUND})\nset(G2O_HAVE_CSPARSE ${G2O_USE_CSPARSE})\nset(G2O_SHARED_LIBS ${BUILD_SHARED_LIBS})\nset(G2O_LGPL_SHARED_LIBS ${BUILD_LGPL_SHARED_LIBS})\nset(G2O_CXX_COMPILER \"${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER}\")\n\n# Generate cmake configuration scripts\nset(G2O_GENERATED_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\nset(G2O_VERSION_CONFIG \"${G2O_GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake\")\nset(G2O_PROJECT_CONFIG \"${G2O_GENERATED_DIR}/${PROJECT_NAME}Config.cmake\")\nset(G2O_TARGETS_EXPORT_NAME \"${PROJECT_NAME}Targets\")\nset(G2O_CONFIG_INSTALL_DIR \"lib/cmake/${PROJECT_NAME}\")\nset(G2O_NAMESPACE \"${PROJECT_NAME}::\")\nset(G2O_SRC_DIR \"${PROJECT_SOURCE_DIR}\")\n\ninclude(CMakePackageConfigHelpers)\nWRITE_BASIC_PACKAGE_VERSION_FILE(\n    \"${G2O_VERSION_CONFIG}\" VERSION ${G2O_VERSION} COMPATIBILITY SameMajorVersion\n)\n\nconfigure_file(config.h.in \"${PROJECT_BINARY_DIR}/g2o/config.h\")\ninstall(FILES ${PROJECT_BINARY_DIR}/g2o/config.h DESTINATION ${INCLUDES_DESTINATION}/g2o)\n\nconfigure_file(\"${g2o_SOURCE_DIR}/cmake_modules/Config.cmake.in\" \"${G2O_PROJECT_CONFIG}\" @ONLY)\n\ninstall(\n    FILES \"${G2O_PROJECT_CONFIG}\" \"${G2O_VERSION_CONFIG}\"\n    DESTINATION \"${G2O_CONFIG_INSTALL_DIR}\")\n\ninstall(\n    EXPORT \"${G2O_TARGETS_EXPORT_NAME}\"\n    NAMESPACE \"${G2O_NAMESPACE}\"\n    DESTINATION \"${G2O_CONFIG_INSTALL_DIR}\")\n\n# building unit test framework and our tests\noption(BUILD_UNITTESTS \"build unit test framework and the tests\" OFF)\nif(BUILD_UNITTESTS)\n  enable_testing()\n  add_subdirectory(unit_test)\nendif()\n\n# Include the subdirectories\nadd_subdirectory(g2o)\n\n# Benchmarks\noption(G2O_BUILD_BENCHMARKS \"build benchmarks\" OFF)\nif(G2O_BUILD_BENCHMARKS)\n  find_package(benchmark)\n  if(${benchmark_FOUND})\n    add_subdirectory(benchmarks)\n  else()\n    message(WARNING \"G2O_BUILD_BENCHMARKS was set to true, but the benchmark library cannot be found\")\n  endif()\nendif()\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.337890625,
          "content": "SHELL = /bin/bash\n\nifeq ($(VERBOSE), 1)\nQUIET=\nelse\nQUIET=-s --no-print-directory\nendif\n\nall: build/Makefile\n\t@ $(MAKE) $(QUIET) -C build\n\ndebug: build/Makefile\n\t@ $(MAKE) $(QUIET) -C build\n\nclean: build/Makefile\n\t@ $(MAKE) $(QUIET) -C build clean\n\nbuild/Makefile:\n\t@ echo \"Running cmake to generate Makefile\"; \\\n\tcd build; \\\n\tcmake ../; \\\n\tcd -\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.625,
          "content": "# g2o - General Graph Optimization\n\nLinux/Mac: [![CI](https://github.com/RainerKuemmerle/g2o/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/RainerKuemmerle/g2o/actions/workflows/ci.yml)\nWindows: [![win64](https://github.com/RainerKuemmerle/g2o/actions/workflows/windows.yml/badge.svg?branch=master)](https://github.com/RainerKuemmerle/g2o/actions/workflows/windows.yml)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/280c5eed95ed4059ad5d003d59e72704)](https://app.codacy.com/gh/RainerKuemmerle/g2o/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade) [![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n\n<p align=\"center\">\n    <img alt=\"g2o logo\" width=\"250\" src=\"doc/pics/g2o-logo.svg\">\n</p>\n\ng2o is an open-source C++ framework for optimizing graph-based nonlinear error\nfunctions. g2o has been designed to be easily extensible to a wide range of\nproblems and a new problem typically can be specified in a few lines of code.\nThe current implementation provides solutions to several variants of SLAM and\nBA.\n\nA wide range of problems in robotics as well as in computer-vision involve the\nminimization of a non-linear error function that can be represented as a graph.\nTypical instances are simultaneous localization and mapping (SLAM) or bundle\nadjustment (BA). The overall goal in these problems is to find the\nconfiguration of parameters or state variables that maximally explain a set of\nmeasurements affected by Gaussian noise. g2o is an open-source C++ framework\nfor such nonlinear least squares problems. g2o has been designed to be easily\nextensible to a wide range of problems and a new problem typically can be\nspecified in a few lines of code. The current implementation provides solutions\nto several variants of SLAM and BA. g2o offers a performance comparable to\nimplementations of state-of-the-art approaches for the specific problems\n(02/2011).\n\n## Python and updated memory management\n\nThe branch [pymem](https://github.com/RainerKuemmerle/g2o/tree/pymem) contains a python wrapper and switches to smart pointer instead of RAW pointers.\nIt is currently experimental but PRs and improvements are welcome - as always.\n\nSee [g2o-python](https://github.com/miquelmassot/g2o-python) for the pypi release of g2o's python bindings.\n\n## Papers Describing the Approach\n\nRainer Kuemmerle, Giorgio Grisetti, Hauke Strasdat,\nKurt Konolige, and Wolfram Burgard\n[g2o: A General Framework for Graph Optimization](http://ais.informatik.uni-freiburg.de/publications/papers/kuemmerle11icra.pdf)\nIEEE International Conference on Robotics and Automation (ICRA), 2011\n\n## Documentation\n\nA detailed description of how the library is structured and how to use and extend it can be found in /doc/g2o.pdf\nThe API documentation can be generated as described in doc/doxygen/readme.txt\n\n## License\n\ng2o is licensed under the BSD License. However, some libraries are available\nunder different license terms. See below.\n\nThe following parts are licensed under LGPL v2.1+:\n\n-   csparse_extension\n\nThe following parts are licensed under GPL3+:\n\n-   g2o_viewer\n-   g2o_incremental\n-   slam2d_g2o (example for 2D SLAM with a QGLviewer GUI)\n\nPlease note that some features of CHOLMOD (which may be used by g2o, see\nlibsuitesparse below) are licensed under the GPL. To avoid the GPL, you may\nhave to re-compile CHOLMOD without including its GPL features. The CHOLMOD\nlibrary distributed with, for example, Ubuntu or Debian includes the GPL\nfeatures. For example, the supernodal factorization that is licensed under GPL\nis considered by g2o if it is available.\n\nWithin sub-folders we include software not written by us to guarantee easy compilation and integration into g2o itself.\n\n-   ceres: BSD (see g2o/autodiff/LICENSE)\n    Extracted headers to perform Automatic Differentiation.\n\n-   freeglut: X-Consortium (see g2o/EXTERNAL/freeglut/COPYING)\n    Copyright (c) 1999-2000 Pawel W. Olszta\n    We use a stripped down version for drawing text in OpenGL.\n\nSee the doc folder for the full text of the licenses.\n\ng2o is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nlicenses for more details.\n\n## Requirements\n\n-   C++17 compiler (CI pipeline runs with gcc, clang and MSVC)\n-   cmake <http://www.cmake.org>\n-   Eigen3 <http://eigen.tuxfamily.org>\n\nOn Ubuntu / Debian these dependencies are resolved by installing the\nfollowing packages.\n\n-   cmake\n-   libeigen3-dev\n\n### Optional requirements\n\n-   spdlog <https://github.com/gabime/spdlog>\n-   suitesparse <http://faculty.cse.tamu.edu/davis/suitesparse.html>\n-   Qt5 <http://qt-project.org>\n-   libQGLViewer <http://www.libqglviewer.com>\n\nOn Ubuntu / Debian these dependencies are resolved by installing the\nfollowing packages.\n\n-   libspdlog-dev\n-   libsuitesparse-dev\n-   qtdeclarative5-dev\n-   qt5-qmake\n-   libqglviewer-dev-qt5\n\nYou can install those packages with the following command\n```\nsudo apt install libeigen3-dev libspdlog-dev libsuitesparse-dev qtdeclarative5-dev qt5-qmake libqglviewer-dev-qt5\n```\n\n## Mac OS X\n\nIf using [Homebrew](http://brew.sh/), then\n\n`brew install g2o`\n\nwill install g2o together with its required dependencies. In this case no manual compilation is necessary.\n\n## Windows\n\nIf using [vcpkg](https://github.com/Microsoft/vcpkg), then\n\n`script\\install-deps-windows.bat`\n\nor for full dependencies installation\n\n`script\\install-additional-deps-windows.bat`\n\nwill build and install the dependencies. The location of `vcpkg` and required\ntriplet can be passed as cli arguments respectively. Note that usually vcpkg\nwill auto detect the triplet. Set it only if your are not using the default\nbuild for your OS.\n\n## Compilation\n\nOur primary development platform is Linux. Experimental support for\nMac OS X, Android and Windows (MinGW or MSVC).\nWe recommend a so-called out of source build which can be achieved\nby the following command sequence.\n\n```\nmkdir build\ncd build\ncmake ../\nmake\n```\n\nThe binaries will be placed in bin and the libraries in lib which\nare both located underneath cmake's build folder.\n\nOn Windows with `vcpkg` the following commands will generate build scripts (please change the Visual Studio version number in accordance with your system):\n\n```\nmkdir build\ncd build\ncmake -DG2O_BUILD_APPS=ON -DG2O_BUILD_EXAMPLES=ON-DVCPKG_TARGET_TRIPLET=\"%VCPKG_DEFAULT_TRIPLET%\" -DCMAKE_TOOLCHAIN_FILE=\"%VCPKG_ROOT_DIR%\\scripts\\buildsystems\\vcpkg.cmake\" ..`\ncmake --build . --target ALL_BUILD\n```\n\nIf you are compiling on Windows and you are for some reasons **not** using `vcpkg` please download Eigen3 and extract it.\nWithin cmake-gui set the variable EIGEN3_INCLUDE_DIR to that directory.\n\n```\nmkdir build\ncd build\ncmake .. -DG2O_BUILD_APPS=ON -DG2O_BUILD_EXAMPLES=ON -DEIGEN3_INCLUDE_DIR=\"<THE_PATH_WHERE_YOU_PLACED_EIGEN3_AND_THE_EIGEN3_CMakeLists.txt>\"\n```\n\n## Cross-Compiling for Android\n\n```\nmkdir build`\ncd build`\ncmake -DCMAKE_TOOLCHAIN_FILE=../script/android.toolchain.cmake -DANDROID_NDK=<YOUR_PATH_TO_ANDROID_NDK_r10d+> -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=\"armeabi-v7a with NEON\" -DEIGEN3_INCLUDE_DIR=\"<YOUR_PATH_TO_EIGEN>\" -DEIGEN3_VERSION_OK=ON ..\ncmake --build .\n```\n\n## Acknowledgments\n\nWe thank the following contributors for providing patches:\n\n-   Simon J. Julier: patches to achieve compatibility with Mac OS X and others.\n-   Michael A. Eriksen for submitting patches to compile with MSVC.\n-   Mark Pupilli for submitting patches to compile with MSVC.\n\n## Projects using g2o\n\n-   [g2o-python](https://github.com/miquelmassot/g2o-python): Python binding which is also installable via `pip`\n-   [.Net wrapper](https://github.com/fugro/g2o)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.169921875,
          "content": "coverage:\n  range: 70..100\n  round: down\n  precision: 2\n  status:\n    project:\n      default:\n        threshold: 5%\nignore:\n- \"g2o/apps/\"\n- \"g2o/examples/\"\n- \"g2o/EXTERNAL/\"\n"
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 0.6494140625,
          "content": "#ifndef G2O_CONFIG_H\n#define G2O_CONFIG_H\n\n#cmakedefine G2O_HAVE_OPENGL 1\n#cmakedefine G2O_OPENGL_FOUND 1\n#cmakedefine G2O_OPENMP 1\n#cmakedefine G2O_SHARED_LIBS 1\n#cmakedefine G2O_LGPL_SHARED_LIBS 1\n\n// available sparse matrix libraries\n#cmakedefine G2O_HAVE_CHOLMOD 1\n#cmakedefine G2O_HAVE_CSPARSE 1\n\n// logging framework available\n#cmakedefine G2O_HAVE_LOGGING\n\n#cmakedefine G2O_NO_IMPLICIT_OWNERSHIP_OF_OBJECTS\n\n#ifdef G2O_NO_IMPLICIT_OWNERSHIP_OF_OBJECTS\n#define G2O_DELETE_IMPLICITLY_OWNED_OBJECTS 0\n#else\n#define G2O_DELETE_IMPLICITLY_OWNED_OBJECTS 1\n#endif\n\n#cmakedefine G2O_CXX_COMPILER \"@G2O_CXX_COMPILER@\"\n#cmakedefine G2O_SRC_DIR \"@G2O_SRC_DIR@\"\n\n#endif\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "g2o",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "unit_test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}