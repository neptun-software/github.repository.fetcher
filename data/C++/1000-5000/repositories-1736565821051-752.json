{
  "metadata": {
    "timestamp": 1736565821051,
    "page": 752,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andrewssobral/bgslibrary",
      "stars": 2211,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0615234375,
          "content": "*.vcproj    eol=crlf\n*.bat       eol=crlf\n*.sln       eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3447265625,
          "content": "etc/\ntmp/\nbkp/\nbuild-*/\nbuild_*/\ndist/\ndataset_*/\nbinaries*/\nexamples/build-*/\nexamples/build_*/\ngui/java/dist/\ngui/java/build/\ngui/java/bgslibrary.exe\n_*\n*.exe\n*.pdb\n*.suo\n*.dll\n*.pyd\n*.so\n*.config\n*.creator\n*.creator.user\n*.files\n*.includes\n*.egg-info/\n.vscode/\nbgslibrary_gui\n.pypirc\nupload.sh\n*.code-workspace\nenv\nbgslibrary_env\nbgslibrary_test_env\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.091796875,
          "content": "[submodule \"pybind11\"]\n\tpath = modules/pybind11\n\turl = https://github.com/pybind/pybind11.git\n"
        },
        {
          "name": ".properties",
          "type": "blob",
          "size": 0.0224609375,
          "content": "version=3.3.0-SNAPSHOT\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.7158203125,
          "content": "cmake_minimum_required(VERSION 3.1)\n\nproject(bgslibrary VERSION 3.3.0)\n\ninclude(CheckCXXCompilerFlag)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nfunction(append_if condition value)\n  if (${condition})\n    foreach(variable ${ARGN})\n      set(${variable} \"${${variable}} ${value}\" PARENT_SCOPE)\n    endforeach(variable)\n  endif()\nendfunction()\n\n#if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR\n#    CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR\n#    CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n#  check_cxx_compiler_flag(\"-fvisibility-inlines-hidden\" SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG)\n#  append_if(SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG \"-fvisibility=hidden -fvisibility-inlines-hidden\" CMAKE_CXX_FLAGS)\n#endif()\n\nif(UNIX)\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++0x\")\n  set(CMAKE_MACOSX_RPATH 1)\nendif(UNIX)\n\n# Avoid cmake warnings about changes in behavior of some Mac OS X path\n# variable we don't care about.\nif (POLICY CMP0042)\n  cmake_policy(SET CMP0042 NEW)\nendif()\n\n#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c99\")\n#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules)\n\n# compilation mode setup\nset(CMAKE_BUILD_TYPE Release)\n#set(CMAKE_BUILD_TYPE Debug)\n\nif(WIN32)\n  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)\n  set(BUILD_SHARED_LIBS TRUE)\n  #if(BGS_PYTHON_SUPPORT)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MD\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MDd\")\n  #else()\n  #  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT\")\n  #  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n  #endif()\nendif(WIN32)\n\nset(bgs_out_dir \".\")\n# First for the generic no-config case (e.g. with mingw)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${bgs_out_dir})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${bgs_out_dir})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${bgs_out_dir})\n# Second, for multi-config builds (e.g. msvc)\nforeach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})\n  string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${bgs_out_dir})\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${bgs_out_dir})\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${bgs_out_dir})\nendforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)\n\nif(UNIX)\n  # add some standard warnings\n  ADD_DEFINITIONS(-Wno-variadic-macros -Wno-long-long -Wall -Wextra -Winit-self -Woverloaded-virtual -Wsign-promo -Wno-unused-parameter -pedantic -Woverloaded-virtual -Wno-unknown-pragmas)\n\n  # -ansi does not compile with sjn module\n  #ADD_DEFINITIONS(-ansi)\n\n  # if you like to have warinings about conversions, e.g. double->int or double->float etc., or float compare\n  #ADD_DEFINITIONS(-Wconversion -Wfloat-equal)\nendif(UNIX)\n\n# cmake -D BGS_PYTHON_SUPPORT=ON ..\nif(NOT DEFINED BGS_PYTHON_SUPPORT)\n  set(BGS_PYTHON_SUPPORT OFF)\nelse()\n  # add_definitions(-DBGS_PYTHON_SUPPORT)\nendif()\n# cmake -D BGS_PYTHON_ONLY=ON ..\nif(NOT DEFINED BGS_PYTHON_ONLY)\n  set(BGS_PYTHON_ONLY OFF)\nelse()\n  # add_definitions(-DBGS_PYTHON_ONLY)\nendif()\n# cmake -D BGS_CORE_STATIC=ON ..\nif(NOT DEFINED BGS_CORE_STATIC)\n  set(BGS_CORE_STATIC OFF)\nelse()\n  # add_definitions(-DBGS_CORE_STATIC)\nendif()\nmessage(STATUS \"\")\nmessage(STATUS \"BGS_PYTHON_SUPPORT: ${BGS_PYTHON_SUPPORT}\")\nmessage(STATUS \"BGS_PYTHON_ONLY:    ${BGS_PYTHON_ONLY}\")\nmessage(STATUS \"BGS_CORE_STATIC:    ${BGS_CORE_STATIC}\")\n\n# cmake -D BGS_PYTHON_SUPPORT=ON -D BGS_PYTHON_VERSION=3 ..\nif(NOT DEFINED BGS_PYTHON_VERSION)\n  set(BGS_PYTHON_VERSION 3)\nendif()\nif(BGS_PYTHON_SUPPORT)\n  message(STATUS \"PYTHON VERSION: ${BGS_PYTHON_VERSION}\")\nendif()\n\nif(BGS_CORE_STATIC)\n  set(OpenCV_STATIC ON)\nelse()\n  set(OpenCV_STATIC OFF)\nendif()\n\nfind_package(OpenCV REQUIRED)\nif(OpenCV_FOUND)\n  message(STATUS \"\")\n  message(STATUS \"OpenCV library status:\")\n  message(STATUS \"    version: ${OpenCV_VERSION}\")\n  message(STATUS \"    libraries: ${OpenCV_LIBS}\")\n  message(STATUS \"    include path: ${OpenCV_INCLUDE_DIRS}\\n\")\nendif()\n\n# if(${OpenCV_VERSION} VERSION_EQUAL 3 OR ${OpenCV_VERSION} VERSION_GREATER 3)\n#   message(FATAL_ERROR \"OpenCV version is not compatible: ${OpenCV_VERSION}\")\n# endif()\n\nif(${OpenCV_VERSION} VERSION_LESS 2.3.1)\n  message(FATAL_ERROR \"OpenCV version is not compatible: ${OpenCV_VERSION}\")\nendif()\n\nif(BGS_PYTHON_SUPPORT)\n  #if(WIN32)\n  #  set(Boost_USE_STATIC_LIBS ON)\n  #else()\n  #  set(Boost_USE_STATIC_LIBS OFF)\n  #endif()\n\n  #set(Boost_USE_MULTITHREADED ON)\n  #set(Boost_USE_STATIC_RUNTIME OFF)\n\n  #message(STATUS \"SEARCHING FOR BOOST COMPONENT FOR PYTHON ${BGS_PYTHON_VERSION}\")\n  #if(BGS_PYTHON_VERSION EQUAL 2)\n  #  find_package(Boost REQUIRED COMPONENTS python)\n  #else()\n  #  find_package(Boost REQUIRED COMPONENTS python3)\n  #endif()\n\n  # Pybind11's cmake scripts enable link time optimization by default.  However,\n  # it makes linking take a really long time and doesn't seem to substantively\n  # improve runtime performance.  So we disable LTO here to make building bgslibrary\n  # faster.\n  set(PYBIND11_LTO_CXX_FLAGS \"\")\n\n  #set(PYBIND11_PYTHON_VERSION 2.7 3.5 3.6)\n  set(PYBIND11_PYTHON_VERSION ${BGS_PYTHON_VERSION})\n  #find_package(pybind11 REQUIRED)\n  add_subdirectory(modules/pybind11)\n\n  #find_package(PythonInterp ${BGS_PYTHON_VERSION} REQUIRED)\n  #find_package(PythonLibs ${BGS_PYTHON_VERSION} REQUIRED)\n\n  #message(STATUS \"Boost library status:\")\n  #message(STATUS \"    version: ${Boost_VERSION}\")\n  #message(STATUS \"    libraries: ${Boost_LIBRARIES}\")\n  #message(STATUS \"    include path: ${Boost_INCLUDE_DIRS}\")\n\n  message(STATUS \"\")\n  message(STATUS \"Python library status:\")\n  message(STATUS \"    executable: ${PYTHON_EXECUTABLE}\")\n  #message(STATUS \"    version: ${PYTHON_VERSION_STRING}\")\n  #message(STATUS \"    libraries: ${PYTHON_LIBRARIES}\")\n  message(STATUS \"    library: ${PYTHON_LIBRARY}\")\n  message(STATUS \"    include path: ${PYTHON_INCLUDE_DIRS}\")\n  if(NOT NUMPY_INCLUDE_DIR)\n    # message(FATAL_ERROR \"You must define NUMPY_INCLUDE_DIR by 'cmake -D NUMPY_INCLUDE_DIR=/python/lib/site-packages/numpy/core/include ..'\")\n    exec_program (\"${PYTHON_EXECUTABLE}\"\n      ARGS \"-c \\\"import numpy; print(numpy.get_include())\\\"\"\n      OUTPUT_VARIABLE NUMPY_INCLUDE_DIR\n      RETURN_VALUE NUMPY_NOT_FOUND)\n  endif()\n  message(STATUS \"NUMPY_INCLUDE_DIR: ${NUMPY_INCLUDE_DIR}\\n\")\nendif()\n\nif(NOT BGS_PYTHON_ONLY)\n  file(GLOB main_src bgslibrary/*.cpp bgslibrary/*.c)\n  file(GLOB main_inc bgslibrary/*.h bgslibrary/*.hpp)\nendif()\n\nfile(GLOB_RECURSE utils_src bgslibrary/utils/*.cpp bgslibrary/utils/*.c)\nfile(GLOB_RECURSE utils_inc bgslibrary/utils/*.h bgslibrary/utils/*.hpp)\n\nfile(GLOB_RECURSE tools_src bgslibrary/tools/*.cpp bgslibrary/tools/*.c)\nfile(GLOB_RECURSE tools_inc bgslibrary/tools/*.h bgslibrary/tools/*.hpp)\n\nfile(GLOB_RECURSE bgs_src bgslibrary/algorithms/*.cpp bgslibrary/algorithms/*.c)\nfile(GLOB_RECURSE bgs_inc bgslibrary/algorithms/*.h bgslibrary/algorithms/*.hpp)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nif(BGS_PYTHON_SUPPORT)\n  file(GLOB_RECURSE bgs_python_src wrapper/python/*.cpp)\n  file(GLOB_RECURSE bgs_python_inc wrapper/python/*.h)\n\n  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/modules/pybind11/include)\n  #include_directories(${Boost_INCLUDE_DIRS})\n  include_directories(${PYTHON_INCLUDE_DIRS})\n  include_directories(${NUMPY_INCLUDE_DIR})\nendif()\n\n# GMG is not available in older OpenCV versions\nif(${OpenCV_VERSION} VERSION_LESS 2.4.3)\n  file(GLOB gmg bgslibrary/algorithms/GMG.cpp)\n  list(REMOVE_ITEM bgs_src ${gmg})\nendif()\n\nif(BGS_CORE_STATIC)\n  message(STATUS \"Bulding bgslibrary_core STATIC\")\n  add_library(bgslibrary_core STATIC ${bgs_src} ${tools_src} ${utils_src} ${bgs_inc} ${tools_inc} ${utils_inc})\n  #set_property(TARGET bgslibrary_core PROPERTY POSITION_INDEPENDENT_CODE ON)\nelse()\n  message(STATUS \"Bulding bgslibrary_core SHARED\")\n  add_library(bgslibrary_core SHARED ${bgs_src} ${tools_src} ${utils_src} ${bgs_inc} ${tools_inc} ${utils_inc})\n  target_link_libraries(bgslibrary_core ${OpenCV_LIBS})\n  # generates the export header bgslibrary_core_EXPORTS.h automatically\n  include(GenerateExportHeader)\n  GENERATE_EXPORT_HEADER(bgslibrary_core\n      BASE_NAME bgslibrary_core\n      EXPORT_MACRO_NAME bgslibrary_core_EXPORTS\n      EXPORT_FILE_NAME bgslibrary_core_EXPORTS.h\n      STATIC_DEFINE BGSLIBRARY_CORE_EXPORTS_BUILT_AS_STATIC)\n  #set_property(TARGET bgslibrary_core PROPERTY PUBLIC_HEADER ${bgs_inc} ${tools_inc} ${utils_inc})\nendif()\n\nif(BGS_PYTHON_SUPPORT)\n  #add_library(bgs_python SHARED ${bgs_src} ${tools_src})\n  #pybind11_add_module(bgs_python ${bgs_src} ${tools_src})\n  pybind11_add_module(bgs_python ${bgs_python_src} ${bgs_python_inc})\n\n  target_link_libraries(bgs_python PRIVATE bgslibrary_core ${OpenCV_LIBS} ${PYTHON_LIBRARY} pybind11::module)\n  #target_link_libraries(bgs_python ${OpenCV_LIBS} ${Boost_LIBRARIES} ${PYTHON_LIBRARY})\n  #target_link_libraries(bgs_python ${OpenCV_LIBS} ${PYTHON_LIBRARY} pybind11::module)\n  #target_link_libraries(bgs_python PRIVATE ${OpenCV_LIBS} ${PYTHON_LIBRARY} pybind11::embed)\n\n  #set_target_properties(bgs_python PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\" SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n  set_target_properties(bgs_python PROPERTIES SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n\n  target_compile_definitions(bgs_python PRIVATE BGS_PYTHON_SUPPORT=1)\n\n  # Set the output library name to bgslibrary because that's what setup.py and distutils expects.\n  set_property(TARGET bgs_python PROPERTY OUTPUT_NAME \"pybgs\")\n  #set_property(TARGET bgs_python PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\n\n#if(WIN32)\n#  # set_property(TARGET bgslibrary_core PROPERTY SUFFIX \".lib\")\n#  #if(BGS_PYTHON_SUPPORT)\n#  #  set_property(TARGET bgslibrary_core PROPERTY SUFFIX \".pyd\")\n#  #endif()\n#else()\n#  set_property(TARGET bgslibrary_core PROPERTY OUTPUT_NAME \"bgs\")\n#endif()\n\n#if(APPLE)\n#  if(BGS_PYTHON_SUPPORT)\n#    set_property(TARGET bgslibrary_core PROPERTY SUFFIX \".so\")\n#    set_target_properties(bgslibrary_core PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\n#  endif()\n#endif()\n\nif(NOT BGS_PYTHON_ONLY)\n  add_executable(bgslibrary ${main_src} ${main_inc})\n  target_link_libraries(bgslibrary ${OpenCV_LIBS} bgslibrary_core)\n  # set_target_properties(bgslibrary PROPERTIES OUTPUT_NAME bgs)\nendif()\n\nif(UNIX AND BGS_PYTHON_SUPPORT)\n  execute_process(\n    COMMAND \"${PYTHON_EXECUTABLE}\" -c \"if True:\n      from distutils import sysconfig as sc\n      print(sc.get_python_lib(prefix='', plat_specific=True))\"\n    OUTPUT_VARIABLE PYTHON_SITE\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n\n  message(STATUS \"\")\n  message(STATUS \"The bgslibrary python package will be installed at: ${PYTHON_SITE}\\n\")\n\n  install(TARGETS bgs_python DESTINATION ${PYTHON_SITE})\n  #install(FILES ${mypackage_python_files} DESTINATION ${PYTHON_SITE}/mypackage)\n  #install(TARGETS bgs_python DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n\nif(NOT BGS_PYTHON_ONLY)\n  include(GNUInstallDirs)\n  set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/BGSLibrary)\n  target_include_directories(bgslibrary_core\n    PUBLIC\n        $<INSTALL_INTERFACE:include>)\n\n\n  install(TARGETS bgslibrary_core\n    bgslibrary\n    EXPORT bgslibrary_core-targets\n    RUNTIME DESTINATION bin COMPONENT app\n    LIBRARY DESTINATION lib COMPONENT runtime\n    ARCHIVE DESTINATION lib COMPONENT runtime\n    #PUBLIC_HEADER DESTINATION include/bgslibrary COMPONENT dev\n    FRAMEWORK DESTINATION \"/Library/Frameworks\"\n  )\n  set_target_properties(bgslibrary_core PROPERTIES EXPORT_NAME BGSLibrary)\n\n  install(DIRECTORY bgslibrary/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/bgslibrary)\n  install(EXPORT bgslibrary_core-targets\n    FILE\n      BGSLibraryTargets.cmake\n    NAMESPACE\n      BGSLibrary::\n    DESTINATION\n      ${INSTALL_CONFIGDIR}\n  )\n\n  include(CMakePackageConfigHelpers)\n  write_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/BGSLibraryConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion\n  )\n\n  configure_package_config_file(${CMAKE_CURRENT_LIST_DIR}/cmake-modules/BGSLibraryConfig.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/BGSLibraryConfig.cmake\n    INSTALL_DESTINATION ${INSTALL_CONFIGDIR}\n  )\n\n  install(FILES\n    ${CMAKE_CURRENT_LIST_DIR}/cmake-modules/FindOpenCV.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/BGSLibraryConfig.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/BGSLibraryConfigVersion.cmake\n    DESTINATION ${INSTALL_CONFIGDIR}\n  )\n\n  if(UNIX)\n    # to avoid: error while loading shared libraries: libbgslibrary_core.so\n    message(STATUS \"You might need to run:\")\n    message(STATUS \"$ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib\")\n    message(STATUS \"$ export LD_LIBRARY_PATH\")\n    message(STATUS \"after 'make install' to avoid error while loading libbgslibrary_core\\n\")\n  endif()\n\n  if(WIN32)\n    message(STATUS \"You might need to add ${CMAKE_CURRENT_BINARY_DIR} to your PATH to be able to run your applications.\")\n    message(STATUS \"> set PATH=%PATH%;${CMAKE_CURRENT_BINARY_DIR}\\n\")\n  endif()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "MIT License\n\nCopyright (c) 2012-2024 Andrews Cordolino Sobral\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4248046875,
          "content": "include *.txt\nprune bgslibrary\nrecursive-include bgslibrary/algorithms *.*\nrecursive-include bgslibrary/tools *.*\nrecursive-include bgslibrary/utils *.*\nprune wrapper\nrecursive-include wrapper/python *.*\nrecursive-include modules *.*\nrecursive-include pybgs *.*\nprune build\nprune dist\nprune tools\nprune test\nprune gui\nprune examples\nprune docs\nprune dataset\nprune config\nprune cmake-modules\nprune _dist\nprune _wiki\nprune _opencv_cmake\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9384765625,
          "content": "<p align=\"center\">\n<img src=\"https://github.com/andrewssobral/bgslibrary/blob/master/docs/images/bgslibrary-logo.jpg?raw=true\" alt=\"BGSLibrary\" width=\"200\">\n</p>\n\n# BGSLibrary: A Background Subtraction Library\n\n[![Release](https://img.shields.io/badge/Release-3.3.0-blue.svg)](https://github.com/andrewssobral/bgslibrary/wiki/Build-status) [![License: GPL v3](https://img.shields.io/badge/License-MIT-blue.svg)](http://www.gnu.org/licenses/gpl-3.0) [![Platform: Windows, Linux, OS X](https://img.shields.io/badge/Platform-Windows%2C%20Linux%2C%20OS%20X-blue.svg)](https://github.com/andrewssobral/bgslibrary/wiki/Build-status) [![OpenCV](https://img.shields.io/badge/OpenCV-2.4.x%2C%203.x%2C%204.x-blue.svg)](https://github.com/andrewssobral/bgslibrary/wiki/Build-status) [![Wrapper: Python, MATLAB](https://img.shields.io/badge/Wrapper-Java%2C%20Python%2C%20MATLAB-orange.svg)](https://github.com/andrewssobral/bgslibrary/wiki/Build-status) [![Algorithms](https://img.shields.io/badge/Algorithms-43-red.svg)](https://github.com/andrewssobral/bgslibrary/wiki/List-of-available-algorithms) <a href=\"https://app.commanddash.io/agent?github=https://github.com/andrewssobral/bgslibrary\"><img src=\"https://img.shields.io/badge/AI-Code%20Gen-EB9FDA\"></a>\n\n<p align=\"center\">\n<a href=\"https://youtu.be/_UbERwuQ0OU\" target=\"_blank\">\n<img src=\"https://raw.githubusercontent.com/andrewssobral/bgslibrary/master/docs/images/bgs_giphy2.gif\" border=\"0\" />\n</a>\n</p>\n\n## Introduction\n\nThe **BGSLibrary** (Background Subtraction Library) is a comprehensive C++ framework designed for background subtraction in computer vision applications, particularly for detecting moving objects in video streams. It provides an easy-to-use and extensible platform for researchers and developers to experiment with and implement various background subtraction techniques.\n\n## Library Version\n\n**3.3.0** (see **[Build Status](https://github.com/andrewssobral/bgslibrary/wiki/Build-status)** and **[Release Notes](https://github.com/andrewssobral/bgslibrary/wiki/Release-notes)** for more info)\n\n## Background and Development\n\nThe BGSLibrary was developed in early 2012 by [Andrews Cordolino Sobral](http://andrewssobral.wixsite.com/home) as a C++ framework with wrappers available for Python, Java, and MATLAB. It aims to facilitate foreground-background separation in videos using the OpenCV library.\n\n## Compatibility\n\nThe library is compatible with OpenCV versions 2.4.x, 3.x, and 4.x. It can be compiled and used on Windows, Linux, and Mac OS X systems.\n\n## Licensing\n\nThe library's source code is available under the [MIT license](https://opensource.org/licenses/MIT), making it free for both academic and commercial use.\n\n## Getting started\n\n* [List of available algorithms](https://github.com/andrewssobral/bgslibrary/wiki/List-of-available-algorithms)\n* [Algorithms benchmark](https://github.com/andrewssobral/bgslibrary/wiki/Algorithms-benchmark)\n* [Which algorithms really matter?](https://github.com/andrewssobral/bgslibrary/wiki/Which-algorithms-really-matter%3F)\n* [Library architecture](https://github.com/andrewssobral/bgslibrary/wiki/Library-architecture)\n\n<a href=\"https://app.commanddash.io/agent?github=https://github.com/andrewssobral/bgslibrary\"><img src=\"https://img.shields.io/badge/AI-Code%20Gen-EB9FDA\"></a>\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <vector>\n\n// Include the OpenCV and BGSLibrary libraries\n#include <opencv2/opencv.hpp>\n#include <bgslibrary/algorithms/algorithms.h>\n\nint main( int argc, char** argv )\n{\n    // Gets the names of the background subtraction algorithms registered in the BGSLibrary factory\n    auto algorithmsName = BGS_Factory::Instance()->GetRegisteredAlgorithmsName();\n\n    // Displays the number of available background subtraction algorithms in the BGSLibrary\n    std::cout << \"Number of available algorithms: \" << algorithmsName.size() << std::endl;\n\n    // Displays the list of available background subtraction algorithms in the BGSLibrary\n    std::cout << \"List of available algorithms:\" << std::endl;\n    std::copy(algorithmsName.begin(), algorithmsName.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\"));\n\n    // Returns 0 to indicate that the execution was successful\n    return 0;\n}\n```\n\n### Installation instructions\n\nYou can either install BGSLibrary via [pre-built binary package](https://github.com/andrewssobral/bgslibrary/releases) or build it from source\n\n* [Windows installation](https://github.com/andrewssobral/bgslibrary/wiki/Installation-instructions---Windows)\n* [Ubuntu / OS X installation](https://github.com/andrewssobral/bgslibrary/wiki/Installation-instructions-Ubuntu-or-OSX)\n\nSupported Compilers:\n\n* GCC 4.8 and above\n* Clang 3.4 and above\n* MSVC 2015, 2017, 2019 or newer\n\nOther compilers might work, but are not officially supported.\nThe bgslibrary requires some features from the ISO C++ 2014 standard.\n\n### Graphical User Interface\n\n* [C++ QT](https://github.com/andrewssobral/bgslibrary/wiki/Graphical-User-Interface:-QT) ***(Official)***\n* [C++ MFC](https://github.com/andrewssobral/bgslibrary/wiki/Graphical-User-Interface:-MFC) ***(Deprecated)***\n* [Java](https://github.com/andrewssobral/bgslibrary/wiki/Graphical-User-Interface:-Java) ***(Obsolete)***\n\n### Wrappers\n\n* [Python](https://github.com/andrewssobral/bgslibrary/wiki/Wrapper:-Python) [![Downloads](https://static.pepy.tech/badge/pybgs)](https://pepy.tech/project/pybgs) [![Downloads](https://static.pepy.tech/badge/pybgs/month)](https://pepy.tech/project/pybgs) [![Downloads](https://static.pepy.tech/badge/pybgs/week)](https://pepy.tech/project/pybgs)\n* [MATLAB](https://github.com/andrewssobral/bgslibrary/wiki/Wrapper:-MATLAB)\n* [Java](https://github.com/andrewssobral/bgslibrary/wiki/Wrapper:-Java)\n\n### Usage examples\n\n* BGSlibrary examples folder\n* * <https://github.com/andrewssobral/bgslibrary/tree/master/examples>\n* BGSlibrary examples in C++\n* * <https://github.com/andrewssobral/bgslibrary-examples-cpp>\n* BGSlibrary examples in Python\n* * <https://github.com/andrewssobral/bgslibrary-examples-python>\n\n### More\n\n* [Docker images](https://github.com/andrewssobral/bgslibrary/wiki/Docker-images)\n* [How to integrate BGSLibrary in your own CPP code](https://github.com/andrewssobral/bgslibrary/wiki/How-to-integrate-BGSLibrary-in-your-own-CPP-code)\n* [How to contribute](https://github.com/andrewssobral/bgslibrary/wiki/How-to-contribute)\n* [List of collaborators](https://github.com/andrewssobral/bgslibrary/wiki/List-of-collaborators)\n* [Release notes](https://github.com/andrewssobral/bgslibrary/wiki/Release-notes)\n\n## Algorithm compatibility across OpenCV versions\n\n| Algorithm | OpenCV < 3.0 (42) | 3.0 <= OpenCV <= 3.4.7 (41) | 3.4.7 < OpenCV < 4.0 (39) | OpenCV >= 4.0 (26) |\n|--------------------------------|:-----------:|:----------------------:|:---------------------:|:------------:|\n| AdaptiveBackgroundLearning | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| AdaptiveSelectiveBackgroundLearning | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| CodeBook | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DPAdaptiveMedian | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPEigenbackground | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPGrimsonGMM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPMean | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPPratiMediod | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPTexture | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPWrenGA | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| DPZivkovicAGMM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| FrameDifference | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| FuzzyChoquetIntegral | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| FuzzySugenoIntegral | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| GMG | :heavy_check_mark: | :x: | :x: | :x: |\n| IndependentMultimodal | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| KDE | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| KNN | :x: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LBAdaptiveSOM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LBFuzzyAdaptiveSOM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LBFuzzyGaussian | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LBMixtureOfGaussians | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LBP_MRF | :heavy_check_mark: | :heavy_check_mark: | :x: | :x: |\n| LBSimpleGaussian | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| LOBSTER | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| MixtureOfGaussianV1 | :heavy_check_mark: | :x: | :x: | :x: |\n| MixtureOfGaussianV2 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| MultiCue | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| MultiLayer | :heavy_check_mark: | :heavy_check_mark: | :x: | :x: |\n| PAWCS | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| PixelBasedAdaptiveSegmenter | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| SigmaDelta | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| StaticFrameDifference | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| SuBSENSE | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| T2FGMM_UM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| T2FGMM_UV | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| T2FMRF_UM | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| T2FMRF_UV | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :x: |\n| TwoPoints | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| ViBe | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| VuMeter | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| WeightedMovingMean | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| WeightedMovingVariance | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/andrewssobral/bgslibrary.svg)](https://starchart.cc/andrewssobral/bgslibrary)\n\n## Citation\n\nIf you use this library for your publications, please cite it as:\n\n```\n@inproceedings{bgslibrary,\nauthor    = {Sobral, Andrews},\ntitle     = {{BGSLibrary}: An OpenCV C++ Background Subtraction Library},\nbooktitle = {IX Workshop de Visão Computacional (WVC'2013)},\naddress   = {Rio de Janeiro, Brazil},\nyear      = {2013},\nmonth     = {Jun},\nurl       = {https://github.com/andrewssobral/bgslibrary}\n}\n```\n\nA chapter about the BGSLibrary has been published in the handbook on [Background Modeling and Foreground Detection for Video Surveillance](https://sites.google.com/site/backgroundsubtraction/).\n\n```\n@incollection{bgslibrarychapter,\nauthor    = {Sobral, Andrews and Bouwmans, Thierry},\ntitle     = {BGS Library: A Library Framework for Algorithm’s Evaluation in Foreground/Background Segmentation},\nbooktitle = {Background Modeling and Foreground Detection for Video Surveillance},\npublisher = {CRC Press, Taylor and Francis Group.}\nyear      = {2014},\n}\n```\n\n## References\n\n* Sobral, Andrews. BGSLibrary: An OpenCV C++ Background Subtraction Library. IX Workshop de Visão Computacional (WVC'2013), Rio de Janeiro, Brazil, Jun. 2013. ([PDF](http://www.researchgate.net/publication/257424214_BGSLibrary_An_OpenCV_C_Background_Subtraction_Library) in brazilian-portuguese containing an english abstract).\n\n* Sobral, Andrews; Bouwmans, Thierry. \"BGS Library: A Library Framework for Algorithm’s Evaluation in Foreground/Background Segmentation\". Chapter on the handbook \"Background Modeling and Foreground Detection for Video Surveillance\", CRC Press, Taylor and Francis Group, 2014. ([PDF](http://www.researchgate.net/publication/257424214_BGSLibrary_An_OpenCV_C_Background_Subtraction_Library) in english).\n\nSome algorithms of the BGSLibrary were used successfully in the following papers:\n\n* (2014) Sobral, Andrews; Vacavant, Antoine. A comprehensive review of background subtraction algorithms evaluated with synthetic and real videos. Computer Vision and Image Understanding (CVIU), 2014. ([Online](http://dx.doi.org/10.1016/j.cviu.2013.12.005)) ([PDF](http://www.researchgate.net/publication/259340906_A_comprehensive_review_of_background_subtraction_algorithms_evaluated_with_synthetic_and_real_videos))\n\n* (2013) Sobral, Andrews; Oliveira, Luciano; Schnitman, Leizer; Souza, Felippe. (**Best Paper Award**) Highway Traffic Congestion Classification Using Holistic Properties. In International Conference on Signal Processing, Pattern Recognition and Applications (SPPRA'2013), Innsbruck, Austria, Feb 2013. ([Online](http://dx.doi.org/10.2316/P.2013.798-105)) ([PDF](http://www.researchgate.net/publication/233427564_HIGHWAY_TRAFFIC_CONGESTION_CLASSIFICATION_USING_HOLISTIC_PROPERTIES))\n\n## Videos\n\n<p align=\"center\">\n<a href=\"https://www.youtube.com/watch?v=_UbERwuQ0OU\" target=\"_blank\">\n<img src=\"https://raw.githubusercontent.com/andrewssobral/bgslibrary/master/docs/images/bgslibrary_qt_gui_video.png\" width=\"600\" border=\"0\" />\n</a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.youtube.com/watch?v=Ccqa9KBO9_U\" target=\"_blank\">\n<img src=\"https://raw.githubusercontent.com/andrewssobral/bgslibrary/master/docs/images/bgslibrary_youtube.png\" width=\"600\" border=\"0\" />\n</a>\n</p>\n"
        },
        {
          "name": "bgslibrary",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake-modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.py",
          "type": "blob",
          "size": 1.404296875,
          "content": "import numpy as np\nimport cv2\nimport pybgs as bgs\n\nalgorithm = bgs.FrameDifference()\nvideo_file = \"dataset/video.avi\"\n\ncapture = cv2.VideoCapture(video_file)\nwhile not capture.isOpened():\n  capture = cv2.VideoCapture(video_file)\n  cv2.waitKey(1000)\n  print(\"Wait for the header\")\n\n#pos_frame = capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES)\n#pos_frame = capture.get(cv2.CV_CAP_PROP_POS_FRAMES)\npos_frame = capture.get(1)\nwhile True:\n  flag, frame = capture.read()\n  \n  if flag:\n    cv2.imshow('video', frame)\n    #pos_frame = capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES)\n    #pos_frame = capture.get(cv2.CV_CAP_PROP_POS_FRAMES)\n    pos_frame = capture.get(1)\n    #print str(pos_frame)+\" frames\"\n    \n    img_output = algorithm.apply(frame)\n    img_bgmodel = algorithm.getBackgroundModel()\n    \n    cv2.imshow('img_output', img_output)\n    cv2.imshow('img_bgmodel', img_bgmodel)\n\n  else:\n    #capture.set(cv2.cv.CV_CAP_PROP_POS_FRAMES, pos_frame-1)\n    #capture.set(cv2.CV_CAP_PROP_POS_FRAMES, pos_frame-1)\n    #capture.set(1, pos_frame-1)\n    #print \"Frame is not ready\"\n    cv2.waitKey(1000)\n    break\n  \n  if 0xFF & cv2.waitKey(10) == 27:\n    break\n  \n  #if capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES) == capture.get(cv2.cv.CV_CAP_PROP_FRAME_COUNT):\n  #if capture.get(cv2.CV_CAP_PROP_POS_FRAMES) == capture.get(cv2.CV_CAP_PROP_FRAME_COUNT):\n  #if capture.get(1) == capture.get(cv2.CV_CAP_PROP_FRAME_COUNT):\n    #break\n\ncv2.destroyAllWindows()\n"
        },
        {
          "name": "demo2.py",
          "type": "blob",
          "size": 5.4189453125,
          "content": "##############################################\n# Demo file\n# python demo2.py --- will use video\n# python demo2.py image --- will use images\n#############################################\n\nimport numpy as np\nimport cv2\nimport pybgs as bgs\nimport sys\nimport glob\n\nprint(\"OpenCV Version: {}\".format(cv2.__version__))\n\ndef is_cv2():\n  return check_opencv_version(\"2.\")\n\ndef is_cv3():\n  return check_opencv_version(\"3.\")\n\ndef is_lower_or_equals_cv347():\n  [major, minor, revision] = str(cv2.__version__).split('.')\n  return int(major) == 3 and int(minor) <= 4 and int(revision) <= 7\n\ndef is_cv4():\n  return check_opencv_version(\"4.\")\n\ndef check_opencv_version(major):\n  return cv2.__version__.startswith(major)\n\n## bgslibrary algorithms\nalgorithms=[]\nalgorithms.append(bgs.FrameDifference())\nalgorithms.append(bgs.StaticFrameDifference())\nalgorithms.append(bgs.WeightedMovingMean())\nalgorithms.append(bgs.WeightedMovingVariance())\nalgorithms.append(bgs.AdaptiveBackgroundLearning())\nalgorithms.append(bgs.AdaptiveSelectiveBackgroundLearning())\nalgorithms.append(bgs.MixtureOfGaussianV2())\nalgorithms.append(bgs.PixelBasedAdaptiveSegmenter())\nalgorithms.append(bgs.SigmaDelta())\nalgorithms.append(bgs.SuBSENSE())\nalgorithms.append(bgs.LOBSTER())\nalgorithms.append(bgs.PAWCS())\nalgorithms.append(bgs.TwoPoints())\nalgorithms.append(bgs.ViBe())\nalgorithms.append(bgs.CodeBook())\nalgorithms.append(bgs.FuzzySugenoIntegral())\nalgorithms.append(bgs.FuzzyChoquetIntegral())\nalgorithms.append(bgs.LBSimpleGaussian())\nalgorithms.append(bgs.LBFuzzyGaussian())\nalgorithms.append(bgs.LBMixtureOfGaussians())\nalgorithms.append(bgs.LBAdaptiveSOM())\nalgorithms.append(bgs.LBFuzzyAdaptiveSOM())\nalgorithms.append(bgs.VuMeter())\nalgorithms.append(bgs.KDE())\nalgorithms.append(bgs.IndependentMultimodal())\n\nif is_cv2():\n  algorithms.append(bgs.MixtureOfGaussianV1()) # if opencv 2.x\n  algorithms.append(bgs.GMG()) # if opencv 2.x\n\nif not is_cv2():\n  algorithms.append(bgs.KNN()) # if opencv > 2\n\nif is_cv2() or is_cv3():\n  algorithms.append(bgs.DPAdaptiveMedian())\n  algorithms.append(bgs.DPGrimsonGMM())\n  algorithms.append(bgs.DPZivkovicAGMM())\n  algorithms.append(bgs.DPMean())\n  algorithms.append(bgs.DPWrenGA())\n  algorithms.append(bgs.DPPratiMediod())\n  algorithms.append(bgs.DPEigenbackground())\n  algorithms.append(bgs.DPTexture())\n  algorithms.append(bgs.T2FGMM_UM())\n  algorithms.append(bgs.T2FGMM_UV())\n  algorithms.append(bgs.T2FMRF_UM())\n  algorithms.append(bgs.T2FMRF_UV())\n  algorithms.append(bgs.MultiCue())\n\nif is_cv2() or is_lower_or_equals_cv347():\n  algorithms.append(bgs.LBP_MRF())\n  algorithms.append(bgs.MultiLayer())\n\n\n# check if we want to use the images\nimage = False\nif (len(sys.argv) == 2):\n    if(sys.argv[1] == \"image\"):\n        image = True\n        img_folder = \"dataset/frames\"\n        img_array = sorted(glob.iglob(img_folder + '/*.png'))\n\nvideo_file = \"dataset/video.avi\"\n\nprint(\"Number of available algorithms: \", len(algorithms))\nfor algorithm in algorithms:\n  print(\"Running \", algorithm.__class__)\n\n  if(image):\n    # loop x times as files in our folder\n    for x in range(0, len(img_array)):\n\n        # we can loop now through our array of images\n        img_path = img_array[x]\n\n        # read file into open cv and apply to algorithm to generate background model\n        img = cv2.imread(img_path)\n        img_output = algorithm.apply(img)\n        img_bgmodel = algorithm.getBackgroundModel()\n\n        # show images in python imshow window\n        cv2.imshow('image', img)\n        cv2.imshow('img_output', img_output)\n        cv2.imshow('img_bgmodel', img_bgmodel)\n\n        # we need waitKey otherwise it wont display the image\n        if 0xFF & cv2.waitKey(10) == 27:\n          break\n\n        # Comment out to save images to bg and fg folder\n        #img_bg = img_path.replace(img_folder, \"output/bg\")\n        #img_fg = img_path.replace(img_folder, \"output/fg\")\n        #cv2.imwrite(img_bg, img_bgmodel)\n        #cv2.imwrite(img_fg, img_output)\n\n        print(\"Frames left: \" + str(len(img_array)-x))\n\n  else:\n\n      capture = cv2.VideoCapture(video_file)\n      while not capture.isOpened():\n        capture = cv2.VideoCapture(video_file)\n        cv2.waitKey(1000)\n        print(\"Wait for the header\")\n\n      #pos_frame = capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES)\n      #pos_frame = capture.get(cv2.CV_CAP_PROP_POS_FRAMES)\n      pos_frame = capture.get(1)\n      while True:\n        flag, frame = capture.read()\n\n        if flag:\n          cv2.imshow('video', frame)\n          #pos_frame = capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES)\n          #pos_frame = capture.get(cv2.CV_CAP_PROP_POS_FRAMES)\n          pos_frame = capture.get(1)\n          #print str(pos_frame)+\" frames\"\n\n          img_output = algorithm.apply(frame)\n          img_bgmodel = algorithm.getBackgroundModel()\n\n          cv2.imshow('img_output', img_output)\n          cv2.imshow('img_bgmodel', img_bgmodel)\n\n        else:\n          #capture.set(cv2.cv.CV_CAP_PROP_POS_FRAMES, pos_frame-1)\n          #capture.set(cv2.CV_CAP_PROP_POS_FRAMES, pos_frame-1)\n          #capture.set(1, pos_frame-1)\n          #print \"Frame is not ready\"\n          cv2.waitKey(1000)\n          break\n\n        if 0xFF & cv2.waitKey(10) == 27:\n          break\n\n        #if capture.get(cv2.cv.CV_CAP_PROP_POS_FRAMES) == capture.get(cv2.cv.CV_CAP_PROP_FRAME_COUNT):\n        #if capture.get(cv2.CV_CAP_PROP_POS_FRAMES) == capture.get(cv2.CV_CAP_PROP_FRAME_COUNT):\n        #if capture.get(1) == capture.get(cv2.CV_CAP_PROP_FRAME_COUNT):\n          #break\n\nprint(\"Finished\")\ncv2.destroyAllWindows()\n"
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "output",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_camera.bat",
          "type": "blob",
          "size": 0.0537109375,
          "content": "@echo off\ncls\nbuild\\bgslibrary.exe --use_cam --camera=0"
        },
        {
          "name": "run_camera.sh",
          "type": "blob",
          "size": 0.05078125,
          "content": "#!/bin/bash\n./build/bgslibrary --use_cam --camera=0\n"
        },
        {
          "name": "run_video.bat",
          "type": "blob",
          "size": 0.05859375,
          "content": "@echo off\ncls\nbuild\\bgslibrary.exe -uf -fn=dataset/video.avi"
        },
        {
          "name": "run_video.sh",
          "type": "blob",
          "size": 0.0556640625,
          "content": "#!/bin/bash\n./build/bgslibrary -uf -fn=dataset/video.avi\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 9.29296875,
          "content": "\"\"\"\nTo build the bgslibrary:\n    python setup.py build\nTo build and install:\n    python setup.py install\nTo install using pip:\n    pip install .\nTo install using PyPI:\n    pip install pybgs\nTo package the wheel (after pip installing twine and wheel):\n    python setup.py bdist_wheel\nTo upload the binary wheel to PyPi\n    twine upload dist/*.whl\nTo upload the source distribution to PyPi\n    python setup.py sdist\n    twine upload dist/pybgs-*.tar.gz\n\"\"\"\nimport os, re, sys, shutil, platform, subprocess\n\nfrom setuptools import setup, find_packages, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools.command.install_lib import install_lib\nfrom setuptools.command.install_scripts import install_scripts\nfrom distutils.command.install_data import install_data\nfrom distutils.version import LooseVersion\n\nPACKAGE_NAME = \"pybgs\"\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\nclass InstallCMakeLibsData(install_data):\n    \"\"\"\n    Just a wrapper to get the install data into the egg-info\n\n    Listing the installed files in the egg-info guarantees that\n    all of the package files will be uninstalled when the user\n    uninstalls your package through pip\n    \"\"\"\n    def run(self):\n        \"\"\"\n        Outfiles are the libraries that were built using cmake\n        \"\"\"\n        # There seems to be no other way to do this; I tried listing the\n        # libraries during the execution of the InstallCMakeLibs.run() but\n        # setuptools never tracked them, seems like setuptools wants to\n        # track the libraries through package data more than anything...\n        # help would be appriciated\n        self.outfiles = self.distribution.data_files\n\n__metaclass__ = type\nclass InstallCMakeLibs(install_lib, object):\n    \"\"\"\n    Get the libraries from the parent distribution, use those as the outfiles\n\n    Skip building anything; everything is already built, forward libraries to\n    the installation step\n    \"\"\"\n    def run(self):\n        \"\"\"\n        Copy libraries from the bin directory and place them as appropriate\n        \"\"\"\n        self.announce(\"Moving library files\", level=3)\n        # We have already built the libraries in the previous build_ext step\n        self.skip_build = True\n        if hasattr(self.distribution, 'bin_dir'):\n            bin_dir = self.distribution.bin_dir\n        else:\n            bin_dir = os.path.join(self.build_dir)\n        # Depending on the files that are generated from your cmake\n        # build chain, you may need to change the below code, such that\n        # your files are moved to the appropriate location when the installation\n        # is run\n        libs = [os.path.join(bin_dir, _lib) for _lib in \n                os.listdir(bin_dir) if \n                os.path.isfile(os.path.join(bin_dir, _lib)) and \n                os.path.splitext(_lib)[1] in [\".dll\", \".so\"]\n                and not (_lib.startswith(\"python\") or _lib.startswith(PACKAGE_NAME))]\n        for lib in libs:\n            shutil.move(lib, os.path.join(self.build_dir, os.path.basename(lib)))\n        # Mark the libs for installation, adding them to \n        # distribution.data_files seems to ensure that setuptools' record \n        # writer appends them to installed-files.txt in the package's egg-info\n        #\n        # Also tried adding the libraries to the distribution.libraries list, \n        # but that never seemed to add them to the installed-files.txt in the \n        # egg-info, and the online recommendation seems to be adding libraries \n        # into eager_resources in the call to setup(), which I think puts them \n        # in data_files anyways. \n        # \n        # What is the best way?\n        # These are the additional installation files that should be\n        # included in the package, but are resultant of the cmake build\n        # step; depending on the files that are generated from your cmake\n        # build chain, you may need to modify the below code\n        self.distribution.data_files = [os.path.join(self.install_dir, os.path.basename(lib)) for lib in libs]\n        # Must be forced to run after adding the libs to data_files\n        self.distribution.run_command(\"install_data\")\n        super(InstallCMakeLibs, self).run()\n\n__metaclass__ = type\nclass InstallCMakeScripts(install_scripts, object):\n    \"\"\"\n    Install the scripts in the build dir\n    \"\"\"\n    def run(self):\n        \"\"\"\n        Copy the required directory to the build directory and super().run()\n        \"\"\"\n        self.announce(\"Moving scripts files\", level=3)\n        # Scripts were already built in a previous step\n        self.skip_build = True\n        bin_dir = self.distribution.bin_dir\n        scripts_dirs = [os.path.join(bin_dir, _dir) for _dir in\n                        os.listdir(bin_dir) if\n                        os.path.isdir(os.path.join(bin_dir, _dir))]\n        for scripts_dir in scripts_dirs:\n            shutil.move(scripts_dir, os.path.join(self.build_dir, os.path.basename(scripts_dir)))\n        # Mark the scripts for installation, adding them to \n        # distribution.scripts seems to ensure that the setuptools' record \n        # writer appends them to installed-files.txt in the package's egg-info\n        self.distribution.scripts = scripts_dirs\n        super(InstallCMakeScripts, self).run()\n\n__metaclass__ = type\nclass BuildCMakeExt(build_ext, object):\n    \"\"\"\n    Builds using cmake instead of the python setuptools implicit build\n    \"\"\"\n    def run(self):\n        \"\"\"\n        Perform build_cmake before doing the 'normal' stuff\n        \"\"\"\n        for extension in self.extensions:\n            self.build_cmake(extension)\n        super(BuildCMakeExt, self).run()\n\n    def build_cmake(self, extension):\n        \"\"\"\n        The steps required to build the extension\n        \"\"\"\n        self.announce(\"Preparing the build environment\", level=3)\n        build_dir = os.path.join(self.build_temp)\n        extension_path = os.path.abspath(os.path.dirname(self.get_ext_fullpath(extension.name)))\n        os.makedirs(build_dir)\n        os.makedirs(extension_path)\n        python_version = str(sys.version_info[0]) + \".\" + str(sys.version_info[1])\n\n        # Now that the necessary directories are created, build\n        self.announce(\"Configuring cmake project\", level=3)\n        cmake_args = ['-DPYTHON_EXECUTABLE=' + sys.executable,\n                      '-DBGS_CORE_STATIC=ON',\n                      '-DBGS_PYTHON_SUPPORT=ON',\n                      '-DBGS_PYTHON_ONLY=ON',\n                      '-DBGS_PYTHON_VERSION=' + python_version]\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        self.spawn(['cmake', '-H'+extension.sourcedir, '-B'+self.build_temp]+ cmake_args)\n\n        # Check which generator was used and use the correct command line switches.\n        generator = ''\n        cmake_cache_file = os.path.join(self.build_temp, 'CMakeCache.txt')\n        with open(cmake_cache_file, 'r') as cmake_cache:\n            for line in cmake_cache.readlines():\n                if line.find('CMAKE_GENERATOR:') != -1:\n                    generator = line[line.find('=') + 1:].strip()\n        \n        self.announce(\"Building binaries\", level=3)\n        \n        if generator.find('Visual Studio') != -1:\n            self.spawn([\"cmake\", \"--build\", self.build_temp, \n                        \"--config\", \"Release\", \"--\", \"-m\"])\n        else:\n            self.spawn([\"cmake\", \"--build\", self.build_temp, \n                        \"--config\", \"Release\", \"--\", \"-j8\"])\n\n        # Build finished, now copy the files into the copy directory\n        # The copy directory is the parent directory of the extension (.pyd)\n        self.announce(\"Moving built python module\", level=3)\n        bin_dir = build_dir\n        self.distribution.bin_dir = bin_dir\n        pyd_path = [os.path.join(bin_dir, _pyd) for _pyd in\n                    os.listdir(bin_dir) if\n                    os.path.isfile(os.path.join(bin_dir, _pyd)) and\n                    os.path.splitext(_pyd)[0].startswith(PACKAGE_NAME) and\n                    os.path.splitext(_pyd)[1] in [\".pyd\", \".so\"]][0]\n        shutil.move(pyd_path, extension_path)\n\n        # After build_ext is run, the following commands will run:\n        # \n        # install_lib\n        # install_scripts\n        # \n        # These commands are subclassed above to avoid pitfalls that\n        # setuptools tries to impose when installing these, as it usually\n        # wants to build those libs and scripts as well or move them to a\n        # different place. See comments above for additional information\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='pybgs',\n    version='3.3.0.post2',\n    author='Andrews Sobral',\n    author_email='andrewssobral@gmail.com',\n    url='https://github.com/andrewssobral/bgslibrary',\n    license='MIT',\n    description='Official Python wrapper for BGSLibrary',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    ext_modules=[CMakeExtension(name='pybgs', sourcedir='.')],\n    cmdclass={\n        'build_ext': BuildCMakeExt,\n        'install_data': InstallCMakeLibsData,\n        'install_lib': InstallCMakeLibs,\n        #'install_scripts': InstallCMakeScripts\n        },\n    zip_safe=False,\n    packages=find_packages(),\n    keywords=['BGSLibrary', 'Background Subtraction', 'Computer Vision', 'Machine Learning'],\n)\n"
        },
        {
          "name": "test.png",
          "type": "blob",
          "size": 86.1669921875,
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "virtualenv-build-test-publish.sh",
          "type": "blob",
          "size": 1.87890625,
          "content": "# Remove the existing virtual environment if it exists\nrm -rf bgslibrary_env\n\n# Create a new virtual environment called bgslibrary_env using Python3\npython3 -m venv bgslibrary_env\n\n# Activate the newly created virtual environment\nsource bgslibrary_env/bin/activate\n\n# Upgrade pip and install required packages numpy and OpenCV\npython -m pip install --upgrade pip\npython -m pip install wheel setuptools\npython -m pip install numpy\npython -m pip install opencv-python\n\n# Remove any existing build directory\nrm -rf build/*\n\n# Build and install the package using the setup.py script\npython setup.py build\npython setup.py install\n\n# Set the PYTHONPATH environment variable to the build directory to access the installed library\n# The following line is for Linux\n# ubuntu 20\nexport PYTHONPATH=$PYTHONPATH:$PWD/build/lib.linux-x86_64-cpython-38\n# ubuntu 22\nexport PYTHONPATH=$PYTHONPATH:$PWD/build/lib.linux-x86_64-cpython-310\n# ubuntu 24\nexport PYTHONPATH=$PYTHONPATH:$PWD/build/lib.linux-x86_64-cpython-312\n# The following line is for Mac (intel)\nexport PYTHONPATH=$PYTHONPATH:$PWD/build/lib.macosx-11-x86_64-cpython-39\n# The following line is for Mac (arm64)\nexport PYTHONPATH=$PYTHONPATH:$PWD/build/lib.macosx-13-arm64-cpython-39\n\n# Run demo.py and demo2.py to verify the package installation\npython demo.py\npython demo2.py\n\n# Install the Twine package for uploading the distribution packages\npython -m pip install twine\n\n# Remove any existing build directory\nrm -rf build/*\n\n# Build a Wheel distribution package for the project\npython setup.py bdist_wheel\n\n# Upload any generated Wheel distribution packages using Twine\ntwine upload dist/*.whl\n\n# Remove any existing dist directory\nrm -rf dist/*\n\n# Create a source distribution package for the project\npython setup.py sdist\n\n# Upload the generated source distribution package using Twine\ntwine upload --repository testpypi dist/pybgs-*.tar.gz\ntwine upload dist/pybgs-*.tar.gz\n"
        },
        {
          "name": "virtualenv-install-test.sh",
          "type": "blob",
          "size": 1.00390625,
          "content": "# Remove the existing virtual environment if it exists\nrm -rf bgslibrary_test_env\n\n# Create a new virtual environment called bgslibrary_test_env using Python3\npython3 -m venv bgslibrary_test_env\n\n# Activate the newly created virtual environment\nsource bgslibrary_test_env/bin/activate\n\n# Upgrade pip and install required packages numpy and OpenCV\npython -m pip install --upgrade pip\npython -m pip install numpy\npython -m pip install opencv-python\n\n# Build and install the package using the setup.py script\n# python setup.py build\n# python setup.py install\n\n# Set the PYTHONPATH environment variable to the build directory to access the installed library\n# The following line is for Linux\n# export PYTHONPATH=$PYTHONPATH:$PWD/build/lib.linux-x86_64-cpython-38\n# The following line is for Mac\n# export PYTHONPATH=$PYTHONPATH:$PWD/build/lib.macosx-11-x86_64-cpython-39\n\n# Install the pybgs directly from PyPI\npython -m pip install pybgs\n\n# Run demo.py and demo2.py to verify the package installation\npython demo.py\npython demo2.py\n"
        },
        {
          "name": "virtualenv-on-docker.sh",
          "type": "blob",
          "size": 2.08984375,
          "content": "# For Linux users\n#\n# OpenCV 4.6.0\n# https://github.com/andrewssobral/docker/blob/master/bgslibrary/opencv_4.6.0py38/Dockerfile\nDOCKER_IMAGE=andrewssobral/bgslibrary:opencv_4.6.0py38\n#\n# OpenCV 3.4.16\n# https://github.com/andrewssobral/docker/blob/master/bgslibrary/opencv_3.4.16py38/Dockerfile\nDOCKER_IMAGE=andrewssobral/bgslibrary:opencv_3.4.16py38\n#\n# OpenCV 3.4.7\n# https://github.com/andrewssobral/docker/blob/master/bgslibrary/opencv_3.4.7py38/Dockerfile\nDOCKER_IMAGE=andrewssobral/bgslibrary:opencv_3.4.7py38\n\ndocker run -it --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY $DOCKER_IMAGE bash\n\n# For Mac users\n# \n# X11 forwarding on macOS and docker\n# https://gist.github.com/andrewssobral/7a5924c475ff936247f237f35d2e3cd7\n#\n# Or\n#\n# To run a Docker container on Mac with display support, you need to use XQuartz, a free and open-source software that provides an X11 window system for macOS.\n# Here are the steps you need to follow:\n# Install XQuartz: Download and install XQuartz from the official website (https://www.xquartz.org/).\n# Enable XQuartz: Open XQuartz and go to XQuartz > Preferences > Security. Make sure that the “Allow connections from network clients” option is checked.\n# Install socat: Install socat using Homebrew. Run the following command in the Terminal:\nbrew install socat\n# Run socat: Run socat in the Terminal to forward X11 connections from the Docker container to XQuartz. Run the following command:\nsocat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\\\"$DISPLAY\\\"\n# To check the tcp ports that are listenning\nsudo lsof -i -P | grep LISTEN | grep :$PORT\n# Start the Docker container: Start the Docker container with the following command:\ndocker run -e DISPLAY=host.docker.internal:0 <image-name>\n# Replace <image-name> with the name of the Docker image you want to run.\n# Test the display support: Test the display support by running a graphical application inside the Docker container. For example, you can run xclock or xeyes.\n# e.g:\ndocker run -it --rm -e DISPLAY=host.docker.internal:0 $DOCKER_IMAGE bash\npython -m pip install --upgrade pip\napt update && apt install x11-apps\nxclock\nxeyes\n"
        },
        {
          "name": "wrapper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}