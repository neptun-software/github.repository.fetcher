{
  "metadata": {
    "timestamp": 1736565911336,
    "page": 878,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pit-ray/win-vind",
      "stars": 2002,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3046875,
          "content": "*.7z\n*.exe\n*.zip\n.VSCodeCounter\n.a\n.clangd\n.vimspector.json\n.vs\n.vscode\n:*\nTesting\nbin\nbin_32\nbin_64\nbuild\nbuild_cov\nchoco\ncmake_modules\ncompile_flags.txt\nconfig\ncov-analysis*\ncov_tools\ndebug\ndebug_cov\ndebugvs\ndebugvs32\nlog\nmanifests\nmingw64\nrelease\nrelease_32\nrelease_64\nreplace.vim\nrepo\ntemp\ntmp\nvenv\nw\nwinget\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.4140625,
          "content": "cmake_minimum_required(VERSION 3.6.0)\nproject(win-vind VERSION 5.13.2)\nset(INTERNAL_VERSION ${PROJECT_VERSION}.0)\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Debug)\nendif()\n\noption(CCACHE_ENABLE ON)\n\nenable_language(CXX)\n\ninclude(tools/util.cmake)\n\nget_gen_arch(GEN_ARCH)\n\nif(${MSVC})\n    add_compile_options(/W4 /std:c++17 /MT /D_UNICODE /DUNICODE /utf-8)\n\n    if(${CMAKE_BUILD_TYPE} STREQUAL \"Debug\")\n        add_compile_options(/DEBUG)\n        add_compile_options(/DDEBUG)\n    elseif(${CMAKE_BUILD_TYPE} STREQUAL \"Release\")\n        add_compile_options(/O2)\n    endif()\n\nelse()\n    set(CMAKE_CXX_STANDARD 17)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_CXX_EXTENSIONS OFF)\n    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n    set(CMAKE_CXX_FLAGS \n        -static\n        -std=c++17\n        -lstdc++\n        -lstdc++fs\n        -lgcc\n        -Wall\n        -Wextra\n        -Wcast-align\n        -Wno-unknown-pragmas\n        -Wcast-qual\n        -Wctor-dtor-privacy\n        -Wdelete-non-virtual-dtor\n        -Wdouble-promotion\n        -Weffc++\n        -Wold-style-cast\n        -Woverloaded-virtual\n        -Wreorder\n        -Wshadow\n        -Wsuggest-override\n        -Wuseless-cast\n        -fdiagnostics-color\n        -DUNICODE\n        -D_UNICODE\n        -Wl,--allow-multiple-definition #UUID of wxWidgets and one of MinGW\n        -DWINVER=0x0A00\n        -D_WIN32_WINNT=0x0A00\n        -Wa,-mbig-obj\n        --coverage\n    )\n    list(REMOVE_DUPLICATES CMAKE_CXX_FLAGS)\n    string(REPLACE \";\" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\n    #if(${CMAKE_GENERATOR_PLATFORM} STREQUAL x64)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m64\")\n    #else()\n        #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n    #endif()\n\n    if(${CMAKE_BUILD_TYPE} STREQUAL \"Debug\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -g3 -DDEBUG\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2\")\n    endif()\n\n    message(STATUS \"g++ flags: ${CMAKE_CXX_FLAGS}\")\n\n    set(CMAKE_SH \"CMAKE_SH-NOTFOUND\")\nendif()\n\ninclude(ProcessorCount)\nProcessorCount(PROC_N)\nmessage(STATUS \"The number of processors: \" ${PROC_N})\nset(CMAKE_MAKE_PROGRAM \"${CMAKE_MAKE_PROGRAM} -j ${PROC_N}\")\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n\nif(NOT WINDOWS_SDK_INCLUDE_DIR)\n    get_winsdk_include(WINDOWS_SDK_INCLUDE_DIR)\nendif()\ninclude_directories(${WINDOWS_SDK_INCLUDE_DIR})\n\nif(NOT WINDOWS_SDK_LIB_DIR)\n    get_winsdk_lib(WINDOWS_SDK_LIB_DIR)\nendif()\nlink_directories(${WINDOWS_SDK_LIB_DIR})\n\n# set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake_modules)\n\n# enable_ccache()\n\nadd_subdirectory(src)\n\n#CPack-----------------------------------------------------------------------------\ninstall(TARGETS win-vind RUNTIME DESTINATION .)\ninstall(DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/res/resources\n    DESTINATION .\n)\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\n\nset(CPACK_GENERATOR NSIS)\n\nset(CPACK_PACKAGE_NAME ${CPACK_PROJECT_NAME})\nset(CPACK_PACKAGE_VERSION ${CPACK_PROJECT_VERSION})\nset(CPACK_PACKAGE_VENDOR \"pit-ray\")\nset(CPACK_PACKAGE_COPYRIGHT \"Copyright (c) 2020-2024 pit-ray\")\nset(CPACK_PACKAGE_DESCRIPTION \"win-vind - Simple Vim Key Binder for Windows (${GEN_ARCH})\")\nset(CPACK_PACKAGE_HOMEPAGE_URL \"https://pit-ray.github.io/win-vind/\")\nset(CPACK_PACKAGE_FILE_NAME \"setup_${CPACK_PROJECT_NAME}_${CPACK_PROJECT_VERSION}\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"win-vind\")\nset(CPACK_NSIS_MUI_ICON \"${CMAKE_CURRENT_SOURCE_DIR}/res/installer/installer512.ico\")\nset(CPACK_NSIS_MUI_UNIICON \"${CMAKE_CURRENT_SOURCE_DIR}/res/installer/uninstaller512.ico\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PROJECT_NAME})\nset(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME \"applications (${CPACK_PROJECT_NAME})\")\nset(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL TRUE)\nset(CPACK_NSIS_PACKAGE_NAME ${PRODUCT_NAME})\nset(CPACK_NSIS_PACKAGE_VERSION ${CPACK_PROJECT_VERSION}.0)\n\n\n# Register to startmenu\nlist(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"CreateShortCut '$SMPROGRAMS\\\\\\\\${CPACK_PACKAGE_NAME}\\\\\\\\${CPACK_PACKAGE_NAME}.lnk' '$INSTDIR\\\\\\\\${CPACK_PACKAGE_NAME}.exe'\")\nstring(REPLACE \";\" \"\\n\" CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\")\nlist(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"Delete '$SMPROGRAMS\\\\\\\\${CPACK_PACKAGE_NAME}\\\\\\\\${CPACK_PACKAGE_NAME}.lnk'\")\nstring(REPLACE \";\" \"\\n\" CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\")\n\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6416015625,
          "content": "# Contributing\n\nPatches are welcome in whatever form. However, you must agree that your code will be provided by MIT License.\n\n### To Documentation\nYou can contribute to the [homepage](https://pit-ray.github.io/win-vind/) by sending pull-request to the `docs` directory if there is an error, a better way to describe the content, or writing a translation. [Jekyll](https://jekyllrb.com/) is used as the framework, and can be written in markdown format. We also use [jekyll-docs-theme](https://github.com/allejo/jekyll-docs-theme) as a theme, which allows extended expressions.  \n\n#### Setup local test environment\nTo test a GitHub Pages site locally, refers [this documents](https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll).\n\nThe following is a brief description using chocolatey.\n\n1.  Install Ruby using chocolatey.\n    ```sh\n    $ choco install ruby\n    ```\n\n2.  Install Jekyll and Bundler.\n    ```sh\n    $ ridk install\n    $ gem install jekyll bundler\n    ```\n    See [Jekyll documentation](https://jekyllrb.com/docs/installation/windows/) for details.\n\n3.  Build site locally in [docs directory](https://github.com/pit-ray/win-vind/tree/master/docs).\n    ```sh\n    $ bundle install\n    $ bundle exec jekyll serve\n    ```\n\n4.  Access to http://localhost:4000.\n\n#### Add translation of document.\nThe win-vind documentation has the potential to easily add manual translation and manage continuously. A Japanese translation is available as a sample in [here](docs/ja). Please use it as a reference when translating. The following are the steps for translation.  \n\n1. Create a translation directory (e.g. `fr`). \n   ```sh\n   $ ./tools/create_trans.bat fr\n   ```\n\n1. Add the following to the headers for each file.\n   |key|Notes|\n   |:---:|:---|\n   |translation|Specify the name of the directory you just created. This will be used for language selection.|\n   |translators|Write your GitHub id. It will appear at the bottom of the page. If more than one person translates the document due to revisions, give them in list form.|\n   |version|Write the version that corresponds to the document. If a newer version than this is released, it will indicate that the content may not be up to date.|\n\n   Like this.\n\n   ```md\n   ---\n   translation: fr\n   translators:\n     - foo\n     - bar\n   version: 4.2.1\n   ---\n\n   ```\n\n1. Add a label to [_config.yml](docs/_config.yml) to be displayed in the language selection.\n   ```yml\n   - translations:\n     - id: fr\n       label: FranÃ§ais\n   ```\n\n1. All that is left to do is to translate it, and use DeepL to check the content during the pull-request.  \n\n\n### To Development\nYou can contribute to development by sending pull requests to the `master` branch to fix or add features, add test cases, modify typos and expressions, improve [security](https://github.com/pit-ray/win-vind/security/code-scanning). When adding new code, please consider adding test cases in the test directory to satisfy branch coverage. [Codacy](https://www.codacy.com/gh/pit-ray/win-vind/dashboard?utm_source=github.com&utm_medium=referral&utm_content=pit-ray/win-vind&utm_campaign=Badge_Grade) and [Travis](https://travis-ci.com/pit-ray/win-vind) and [Actions](https://github.com/pit-ray/win-vind/actions) run by pushing, and [Coverity](https://scan.coverity.com/projects/pit-ray-win-vind) checks programmatic resources at releasing as Continuous Integration. If you want to discuss development, please create a thread in [Discussion](https://github.com/pit-ray/win-vind/discussions) with **#Development** category.\n\n\n#### Quick Start for Build  \nIf you have already installed **MinGW-w64** or **Visual Studio**, all you need is the next steps.  \n\n##### Visual Studio\n  ```bash\n  $ cmake -B build -DCMAKE_BUILD_TYPE=Debug -G \"Visual Studio 17 2022\" -A x64 .\n  $ cmake --build build --config Debug\n  $ ./build/Debug/win-vind.exe\n  ```\n\n##### MinGW-w64 >= 8.2.0\n  ```bash\n  $ cmake -B build -DCMAKE_BUILD_TYPE=Debug -G \"MinGW Makefiles\" .\n  $ cmake --build build --config Debug\n  $ ./build/win-vind.exe\n  ```\n\n#### Run Test \nSee [here](tests/README.md) for unit tests and runtime test.\n\n\n#### Make Installer\n```bash\n$ ./tools/create_assets.bat 1.0.0 -msvc 64\n```\n\n\n## Dependencies\n\n### Softwares\nI recommend to install follow softwares.\n\n|Name|Recommended Version|Download Link|\n|:---:|:---:|:---:|\n|CMake|3.14.4|<a href=\"https://cmake.org/download/\">Download - CMake</a>|\n|NSIS|3.06.1|<a href=\"https://nsis.sourceforge.io/Download\">Download - NSIS</a>|\n|Windows10 SDK|10.0.19041.0|<a href=\"https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/\">Microsoft Windows10 SDK - Windows app development</a>|\n\n### Libraries\nThese libraries are bundled in the libs directory.\n\n|**Name**|**What is**|**Purpose**|**License**|\n|:---:|:---:|:---:|:---:|\n|[fluent-tray](https://github.com/pit-ray/fluent-tray)|GUI framework|Create GUI for the system tray or popups.|[MIT License](https://github.com/pit-ray/fluent-tray/blob/main/LICENSE.txt)|\n|[argparse](https://github.com/p-ranav/argparse)|Argument Parser|Parse arguments in the command line.|[MIT License](https://github.com/p-ranav/argparse/blob/master/LICENSE)|\n|[doctest](https://github.com/onqtam/doctest)|Unit test framework|For basic unit test|[MIT License](https://github.com/onqtam/doctest/blob/master/LICENSE.txt)|\n|[fff](https://github.com/meekrosoft/fff)|Macro-based fake function framework|To mock Windows API|[MIT License](https://github.com/meekrosoft/fff/blob/master/LICENSE)|\n|[pydirectinput](https://github.com/learncodebygaming/pydirectinput)|Mouse and keyboard automation for Windows|To emulate inputs for runtime tests|[MIT License](https://github.com/learncodebygaming/pydirectinput/blob/master/LICENSE.txt)|\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020-2024 pit-ray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5458984375,
          "content": "<h1></h1>\r\n<p align=\"center\">\r\n  <img src=\"docs/imgs/banner.gif?raw=true\" />\r\n  <p align=\"center\">\r\n    <a href=\"https://scan.coverity.com/projects/pit-ray-win-vind\"><img alt=\"Coverity Scan Build Status\" src=\"https://img.shields.io/coverity/scan/pit-ray-win-vind?style=flat-square\" /></a>\r\n    <a href=\"https://www.codacy.com/gh/pit-ray/win-vind/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=pit-ray/win-vind&amp;utm_campaign=Badge_Grade\"><img src=\"https://img.shields.io/codacy/grade/8f2e6f2826904efd82019f5888574327?style=flat-square\" /></a>\r\n    <a href=\"https://github.com/pit-ray/win-vind/actions/workflows/codeql-analysis.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/pit-ray/win-vind/codeql-analysis.yml?branch=master&label=CodeQL&logo=github&style=flat-square\" /></a>\r\n    <a href=\"https://github.com/pit-ray/win-vind/actions/workflows/test.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/pit-ray/win-vind/test.yml?branch=master&label=test&logo=github&style=flat-square\" /></a>\r\n    <br>  \r\n    <a href=\"https://github.com/pit-ray/win-vind/actions/workflows/coverity.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/pit-ray/win-vind/coverity.yml?branch=master&label=cov-build&logo=github&style=flat-square\" /></a>\r\n    <a href=\"https://github.com/pit-ray/win-vind/actions/workflows/mingw.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/pit-ray/win-vind/mingw.yml?branch=master&label=MinGW%20build&logo=github&style=flat-square\" /></a>\r\n    <a href=\"https://github.com/pit-ray/win-vind/actions/workflows/msvc.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/pit-ray/win-vind/msvc.yml?branch=master&label=MSVC%20build&logo=github&style=flat-square\" /></a>\r\n    <br>\r\n    <a href=\"https://community.chocolatey.org/packages/win-vind\"><img src=\"https://img.shields.io/badge/chocolatey-supported-blue?style=flat-square&color=607D8B\" /></a>\r\n    <a href=\"https://github.com/microsoft/winget-pkgs/tree/master/manifests/p/pit-ray/win-vind\"><img src=\"https://img.shields.io/badge/winget-supported-blue?style=flat-square&color=607D8B\" /></a>\r\n    <a href=\"https://github.com/ScoopInstaller/Extras/commits/master/bucket/win-vind.json\"><img src=\"https://img.shields.io/badge/scoop-supported-blue?style=flat-square&color=607D8B\" /></a>\r\n  </p>\r\n</p>  \r\n\r\n## What is this?\r\n**win-vind** provides a lightweight hybrid UI system of CUI and GUI for Windows.  \r\nBy installing this tool, you will be able to control the Windows GUI in the same way as Vim.\r\n\r\n### 1. Vim-user friendly.\r\nAll configuration methods and mode concepts are derived from Vim, allowing for Vim-like UI operation.  \r\nVim users only need to understand win-vind's macro features and additional mode concepts with little learning cost.  \r\n\r\n### 2. There are many useful built-in commands.\r\nYou don't have to worry about complicated scripts and dependencies like with traditional key binding tools.  \r\nYou can freely create user-defined commands by combining low-level optimized built-in commands.\r\n\r\n### 3. Very portable and fully open source.\r\nwin-vind is a small single binary with no dependencies that runs with user permissions.   \r\nIt is also available from the command line as a command for UI operations like `$ win-vind -c \"ggyyGp\"`.\r\n\r\n\r\n### Top Feature Demo\r\n\r\n<div><video controls src=\"https://user-images.githubusercontent.com/42631247/215270933-3365065b-53db-4eca-9fc6-cd03d13e5ab0.mp4\" muted=\"false\"></video></div>\r\n\r\n<br>  \r\n\r\n## Installation\r\nwin-vind supports a variety of installation methods.\r\n\r\n### [Chocolatey](https://chocolatey.org/)\r\n\r\n```sh\r\n$ choco install win-vind\r\n```\r\n\r\n### [winget](https://github.com/microsoft/winget-cli)\r\n\r\n```sh\r\n$ winget install win-vind\r\n```\r\n\r\n### [Scoop](https://scoop.sh/)\r\nThis has been added to Scoop Extras thanks to contributors and is automatically updated by the autoupdate feature of scoop.\r\n\r\n```\r\n$ scoop bucket add extras\r\n$ scoop install win-vind\r\n```\r\n\r\n### Executable Installer\r\n- [win-vind_5.13.2_32bit_installer.zip](https://github.com/pit-ray/win-vind/releases/download/v5.13.2/win-vind_5.13.2_32bit_installer.zip)\r\n- [win-vind_5.13.2_64bit_installer.zip](https://github.com/pit-ray/win-vind/releases/download/v5.13.2/win-vind_5.13.2_64bit_installer.zip)\r\n\r\n### Portable Zip\r\n- [win-vind_5.13.2_32bit_portable.zip](https://github.com/pit-ray/win-vind/releases/download/v5.13.2/win-vind_5.13.2_32bit_portable.zip)\r\n- [win-vind_5.13.2_64bit_portable.zip](https://github.com/pit-ray/win-vind/releases/download/v5.13.2/win-vind_5.13.2_64bit_portable.zip)\r\n\r\n\r\n## Usage\r\n\r\nUsage is mainly described in easy-to-read [documentation pages](https://pit-ray.github.io/win-vind/usage/) with plenty of diagrams. Here, only a sample .vindrc is shown below. As you can see, it is Vim user-friendly.  \r\n\r\nThe file is located at `C:\\Users\\[USERNAME]\\.win-vind\\.vindrc`\r\n\r\n\r\n### .vindrc sample  \r\n\r\n```vim\r\n\" Choose the version of {tiny, small, normal, big, huge}.\r\nversion normal\r\n\r\n\" Change parameters\r\nset shell = cmd\r\nset cmd_fontsize = 14\r\nset cmd_fontname = Consolas\r\nset easyclick_bgcolor=E67E22\r\nset easyclick_fontcolor=34495E\r\n\r\n\" Map capslock to ctrl.\r\nimap <capslock> {<ctrl>}\r\n\r\n\" Define useful shortcuts\r\ninoremap <ctrl-shift-f> <easyclick><click_left>\r\ninoremap <ctrl-shift-m> <gridmove><click_left>\r\ninoremap <ctrl-shift-s> <switch_window><easyclick><click_left>\r\n\r\n\" Register application launchers\r\nnoremap <ctrl-1> :! gvim<cr>\r\nnoremap <ctrl-2> :e http://example.com<cr>\r\n\r\n\" Define macros like Vim\r\nenoremap t ggyyGp\r\n\r\n\" Apply auto-commands\r\nautocmd AppLeave * <to_insert>\r\nautocmd AppEnter,EdiNormalEnter vim.exe <to_resident>\r\n```\r\n\r\n### Default Mappings\r\nwin-vind has many features, but you can use a simpler one for your purposes by putting the `version` command at the beginning of your .vindrc.\r\nIf you want to use `tiny` version, write the following. It is important to note that **nothing but comments can be written before the `version` command**.\r\nIf you do not write the `version` command, `huge` will be loaded.\r\n\r\n```vim\r\n\" Only comments can be written in here.\r\nversion tiny\r\n\" Any command can be written from.\r\n\" For example\r\nset shell = cmd\r\n```\r\n\r\n|**Tier**|**Supported Features**|\r\n|:---|:---|\r\n|[tiny](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/tiny)|+mouse +syscmd|\r\n|[small](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/small)|+mouse +syscmd +window +process|\r\n|[normal](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/normal)|+mouse +syscmd +window +process +vimemu|\r\n|[big](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/big)|+mouse +syscmd +window +process +vimemu +hotkey +gvmode|\r\n|[huge](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/huge)|+mouse +syscmd +window +process +vimemu +hotkey +gvmode +experimental|\r\n\r\nFollowing Vim, there are five tiers. \r\n* `tiny` has minimal commands for mouse moving and clicking from the keyboard (e.g., GridMove and EasyClick). \r\n* `small` allows more flexible handling of window controls and process launches, etc.\r\n* `normal` has Vim emulation mappings and allows text editing in text areas, etc.\r\n* `big` adds several hotkeys that redefine some of the shortcut keys in Windows to operate Windows with more Vim-like ways. It also provides GUI Visual Mode (+gvmode), which allows for holding down the mouse.\r\n* `huge` allows win-vind to have experimental features for more complex operations.\r\n\r\nFor more information on default mappings, please visit our [website](https://pit-ray.github.io/win-vind/cheat_sheet/defaults/).\r\n\r\n\r\n## Known Issues\r\n- EasyClick does not seem to work properly for some applications on older Windows 10 before 1803. The cause is not known, but we have confirmed that it works after 1909. ([#11](https://github.com/pit-ray/win-vind/issues/11))\r\n- Windows 10/11 Single Language does not seem to be able to map toggle keys such as `<Capslock>`. ([#40](https://github.com/pit-ray/win-vind/issues/40))\r\n\r\n- If you want to use word motion (e.g. `w`, `B`, `e`) in MS Office Word, it is recommended to disable `Use smart paragraph selection`.  \r\n\r\n  <img src=\"docs/imgs/opt_in_ms_word.png\" title=\"Option in MS Word\" width=600>\r\n\r\n## Build\r\nAll you have to do is install [cmake](https://cmake.org/download/), [Visual Sudio](https://visualstudio.microsoft.com/ja/downloads/) and [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/), then do the following.\r\n\r\n```bash\r\n$ cmake -B build\r\n$ cmake --build build\r\n$ ./build/Debug/win-vind.exe\r\n```\r\n\r\nIf you want to build with MinGW or create an installer, see [here](https://github.com/pit-ray/win-vind/blob/master/CONTRIBUTING.md#to-development).\r\n\r\n## Test\r\nTests can be run using ctest and python.\r\n\r\n### Unit Test\r\nRun source code level tests.\r\n\r\n```bash\r\n$ cd tests\r\n$ cmake -B build unit\r\n$ cmake --build build\r\n$ ctest -C Debug --test-dir build --output-on-failure\r\n$ cd ..\r\n```\r\n\r\n### Runtime Test\r\nRuntime tests check the behavior of the built binaries.\r\n\r\n```bash\r\n$ cd tests\r\n$ python runtime/test.py \"../bin_64/win-vind/win-vind.exe\"  # Specifies the binary for release.\r\n$ cd ..\r\n```\r\n\r\nSee [this document](tests/README.md) for details.\r\n\r\n## Contribute\r\nIf you would like to contribute to win-vind, see [CONTRIBUTING.md](https://github.com/pit-ray/win-vind/blob/master/CONTRIBUTING.md).\r\n\r\nThe project is managed with <a href=\"https://github.com/users/pit-ray/projects/2\">GitHub Projects</a>. \r\n\r\n## Similar Projects\r\n- [rcmdnk/vim_ahk](https://github.com/rcmdnk/vim_ahk)\r\n- [microsoft/PowerToys](https://github.com/microsoft/PowerToys)\r\n- [zsims/hunt-and-peck](https://github.com/zsims/hunt-and-peck)\r\n\r\n## License  \r\n\r\nThis software is provided by pit-ray under the **MIT License**.  \r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}