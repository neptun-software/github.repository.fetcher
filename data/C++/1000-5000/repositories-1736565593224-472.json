{
  "metadata": {
    "timestamp": 1736565593224,
    "page": 472,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "terralang/terra",
      "stars": 2762,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.61328125,
          "content": "freebsd_task:\n  name: FreeBSD\n  freebsd_instance:\n    matrix:\n      image_family: freebsd-14-0\n  env:\n    matrix:\n      LLVM_VERSION: 11\n      LLVM_VERSION: 12\n      LLVM_VERSION: 13\n      # LLVM_VERSION: 14\n      LLVM_VERSION: 15\n      LLVM_VERSION: 16\n      LLVM_VERSION: 17\n      LLVM_VERSION: 18\n  install_script: pkg install -y bash coreutils cmake gmake llvm$LLVM_VERSION\n  script: |\n    export CC=cc\n    bash travis.sh\n\narm_task:\n  name: Linux AArch64\n  arm_container:\n    image: ubuntu:18.04\n  env:\n    llvm: 11.1.0\n    cuda: 0\n    variant: prebuilt\n    test: 1\n    threads: 2\n  script: |\n    ./docker/install_script.sh\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2236328125,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:    Google\nIndentWidth:     4\nColumnLimit:     90\nAccessModifierOffset: -4\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nSortIncludes: false # breaks the build when enabled\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.44140625,
          "content": "/.idea\n/cmake-build-debug\n/build\n/docs/_site\n/docs/_vendor\n/install\n/release/bin\n/release/lib\n/release/include/terra/lauxlib.h\n/release/include/terra/lua*.h\n/terra\n/tests/afile.txt\n/tests/benchmark_fannkuchredux\n/tests/benchmark_nbody\n/tests/hello\n/tests/output\n/tests/output2\n/tests/renamed\n/tests/speed\n/tests/dynlib\n/tests/dynlib.exe\n/tests/not_bc\n/tests/class2\n/tests/inline_c.exe\n/tests/objc\n/tests/objc2\n/tests/stdio.exe\n\n\n*.bc\n*.ll\n*.o\n*.so\n\n*~\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.6689453125,
          "content": "# This CI configuration is intended to be run on Ascent. See:\n# https://code.ornl.gov/ecpcitest/csc335/terra/-/pipelines\n\nvariables:\n  # workaround for filesystem issues\n  CUSTOM_CI_BUILDS_DIR: \"/gpfs/wolf/proj-shared/csc335/ci/${CI_JOB_ID}\"\n\nbuild:\n  tags:\n    - nobatch\n  script:\n    - module load gcc cuda cmake\n    - wget -nv https://github.com/terralang/llvm-build/releases/download/llvm-14.0.0/clang+llvm-14.0.0-powerpc64le-linux-gnu.tar.xz\n    - tar xf clang+llvm-14.0.0-powerpc64le-linux-gnu.tar.xz\n    - export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$PWD/clang+llvm-14.0.0-powerpc64le-linux-gnu\n    - cd build\n    - cmake .. -DTERRA_ENABLE_CUDA=1\n    - make -j8\n    - ctest -j8\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 20.8134765625,
          "content": "# Release 1.2.0 (2024-06-25)\n\nThis release adds new LLVM versions and introduces experimental support for SPIR-V code generation. Note that as of the tested LLVM versions, LLVM's native SPIR-V backend is unable to generate correct SPIR-V code in all cases; but the LLVM SPIR-V target can still be used in combination with the [LLVM/SPIR-V Translator](https://github.com/KhronosGroup/SPIRV-LLVM-Translator) to generate valid code.\n\nUsers who generate code for AMD GPUs are strongly encouraged to upgrade to LLVM 18 and ROCm 6.0.0, as previous version combinations generate bad code to varying degrees.\n\n## Added features\n\n  * Support for LLVM 17 and 18\n  * Experimental support for SPIR-V code generation (e.g., for Intel GPUs)\n\n## Fixed Bugs\n\n  * Updated LuaJIT to obtain fix for passing large arrays on macOS M1\n\n## Removed features\n\n  * Removed support for LLVM <= 10\n  * Removed the long-deprecated Makefile build\n\n# Release 1.1.1 (2023-08-22)\n\nThis is a bug fix release that addresses a miscompilation related to\nglobals imported from C.\n\n## Fixed Bugs\n\n  * Fixed miscompilation of nested arrays included via C headers.\n\n# Release 1.1.0 (2023-05-05)\n\nThis release brings Terra up to date with LLVM releases and deprecates/removes\nsome older LLVM versions. No breaking changes are expected.\n\n## Added features\n\n  * Support for LLVM 15 and 16\n\n## Improvements\n\n  * Fixes for WASM calling convention\n  * Fixes for tests on macOS 13\n  * Fixes for 32-bit ARM on Linux (note this configuration is still experimental)\n  * Verify SHA-256 hashsums of all downloads in CMake build\n\n## Deprecated features\n\n  * Deprecated support for LLVM <= 10\n\n## Removed features\n\n  * Removed support for LLVM <= 5\n\n# Release 1.0.6 (2022-09-06)\n\nThis release stabilizes support for macOS M1 (AArch64). Terra now\npasses 100% of the test suite on this hardware.\n\n## Changed behaviors\n\n  * Terra previously allowed `terralib.atomicrmw(\"xchg\", ...)` to be\n    used with pointers. This was a mistake; LLVM does not allow this\n    and LLVM IR with this instruction is invalid. Terra now correctly\n    issues a type error in this situation.\n\n## Improvements\n\n  * Fixes for macOS on M1 hardware, allowing Terra to pass 100% of the\n    test suite.\n  * Automated testing is now performed regularly on PPC64le hardware.\n\n# Release 1.0.5 (2022-08-16)\n\nThis release stabilizes support for ARM (AArch64). On a variety of\nhardware (Graviton, NVIDIA Jetson), Terra now passes 100% of the test\nsuite.\n\n## Improvements\n\n  * Fixes for multiple issues on AArch64, allowing Terra to pass 100%\n    of the test suite.\n  * Updated LuaJIT to obtain fixes for AArch64.\n\n## Known Issues\n\n  * On AArch64, Terra requires LLVM 11 or older. Newer LLVM versions\n    result in segfaults on some tests.\n\n# Release 1.0.4 (2022-07-08)\n\nThis release stabilizes support for PPC64le. On POWER9 hardware, Terra\nnow passes 100% of the test suite. This comes with one large caveat:\nTerra relies on Moonjit, a fork of LuaJIT, for support for PPC64le. At\nthe time of this release, Moonjit is currently unsupported. Therefore,\nwhile Terra provides comprehensive support for PPC64le, we are not in\na position to fix issues in the Moonjit implementation.\n\n## Improvements\n\n  * Fixes for multiple issues on PPC64le, allowing Terra to pass 100%\n    of the test suite.\n\n# Release 1.0.3 (2022-07-01)\n\nThis release contains no feature changes, but includes bug fixes for\nthe Terra calling convention on PPC64le for passing arrays by value.\n\n## Improvements\n\n  * Fixes for the Terra calling convention on PPC64le for passing\n    arrays by value.\n\n# Release 1.0.2 (2022-06-25)\n\nThis release includes improvements to make Terra better match Unix-like system\nconventions, as well as substantial improvements to C calling convention\nconformance on PPC64le.\n\n## Changed behaviors\n\n  * Terra historically installed its shared library as `terra.so` or\n    `terra.dylib` on Unix-like systems. This is for compatibility with Lua,\n    which allows a module be loaded as `require(\"terra\")` if `terra.so` (or\n    `terra.dylib`, depending on the system) is present. However, this\n    conflicts with the Unix standard of having libraries prefixed with\n    `lib`. In this release, Terra installs its shared library as `libterra.so`\n    or `libterra.dylib`, and installs a symlink for `terra.so` or\n    `terra.dylib` for backwards compatibility. (Behavior on Windows and with\n    static libraries is unchanged.)\n\n## Improvements\n\n  * Substantially improved C calling convention conformance on PPC64le, along\n    with a new conformance test that matches behavior against C for all\n    primitive types (`uint8`, `int16`, `int32`, ...) and structs/arrays of\n    those types, up to a bound. Successfully tested on POWER9 hardware up to\n    `N` = 23. Current test suite pass rate on this hardware is 98.5%.\n\n# Release 1.0.1 (2022-06-13)\n\nThis release includes no major Terra changes, but upgrades the LuaJIT\ndependency and makes available (experimental) binaries for ARM64 and\nPPC64le.\n\n## Changed behaviors\n\n  * The default Lua has been set back to LuaJIT for all platforms other than\n    PPC64le (where it is still set to Moonjit). As before, this can be\n    configured explicitly with the CMake flag `-DTERRA_LUA` with either\n    `luajit` or `moonjit`\n\n## Experimental features added\n\n  * Binary builds for ARM64 and PPC64le. These platforms were already possible\n    to build from source, but this makes them easier to try out. Note the test\n    suite pass rate is about 96% for ARM64 and 98% for PPC64le. You mileage\n    may vary depending on what features of Terra you use\n\n# Release 1.0.0 (2022-06-08)\n\nThis release recognizes what has already been true for quite some\ntime: Terra is mature and has been tested in a variety of production\nenvironments. As a result, the version numbers are changing with this\nrelease to follow our [stability policy](STABILITY.md), starting with\nversion number 1.0.0. Terra is expected to remain at 1.x for the\nforseeable future.\n\nThe following changes are included in this release:\n\n## Added features\n\n  * Support for LLVM 3.8, 3.9, 5, 6, 7, 8, 9, 10, 11, 12, 13 and 14\n  * Support for CUDA 9, 10 and 11\n  * Support for Visual Studio 2015, 2017, 2019 and 2022 on Windows\n  * Support for FreeBSD\n  * New CMake-based build system replaces Make/NMake on all platforms\n  * Upgrade to LuaJIT 2.1 (from Git) by default\n  * Added optional support for Moonjit, a LuaJIT fork that works on PPC64le\n  * Added `terralib.linkllvmstring` to link bitcode modules directly from memory\n  * Allow types defined via `ffi.cdef` to be used as Terra types as well\n  * Support for \"module\" definitions in ASDL, which allow ASTs to be namespaced\n  * Added command line flag `-e` to evaluate a Terra expression\n  * Added `terralib.version` which contains the version string, or `unknown` if this can't be detected\n  * Added `optimize` flag to `terralib.saveobj` to specify an optimization profile. Currently optimization profiles can be used to disable optimizations, or to enable fast-math flags\n  * Added support for all fast-math optimizations supported by LLVM\n  * Added support for `:setcallingconv()` on Terra functions to set the calling convention (with any supported LLVM calling convention)\n\n## Experimental features added\n\n  * Added `terralib.atomicrmw` to support atomic read-modify-write operations\n  * Added `terralib.fence` to support fence operations\n  * Added `switch` statement\n  * Added support for AMD GPU code generation (with LLVM 13 and up)\n  * Added support for Nix derivation, and merged upstream into NixOS\n\n## Deprecated features\n\n  * Deprecated support for Make (Linux, macOS, FreeBSD) build system\n  * Deprecated support for LLVM 3.8, 3.9 and 5\n\n## Removed features\n\n  * Removed support for all LLVM versions 3.7 and prior\n  * Removed support for NMake (Windows) build system\n\n## Changed behaviors\n\n  * Errors are printed to stderr instead of stdout\n\n## Infrastructure improvements\n\n  * Automated tests with GitHub Actions (Linux, macOS, Windows), Cirrus (FreeBSD) and AppVeyor (Windows)\n  * Automated tests for various Linux distros (currently Ubuntu 18.04, 20.04, 22.04) via Docker\n  * Automated Linux \"compability\" tests (cross-distro-version tests for binary compatibility)\n  * Automated release build infrastructure\n\n## Bug fixes\n\n  * Fixes for nontemporal loads and stores\n  * Fixes for link errors due to multiple definitions of internal functions in different modules\n  * Fixes for Windows default include path handling\n  * Fix errors in parsing constants from macros\n  * Fix bugs in constant checking\n  * Fix auto-detection of AVX support\n  * Fixes for building on FreeBSD\n  * Fix auto-detection of library type when file name ends in `[^.]bc`\n  * Fixes for PPC64le\n  * Fixes for AMD GPU\n  * Fixes for performance regressions in NVIDIA CUDA code generation in LLVM 13 (as compared to LLVM 3.8, the last release that supported NVVM)\n\n# Release 2016-03-25\n\nThis new release of Terra brings some changes to the language and APIs\ndesigned to simplify the language and improve error reporting. These changes\nwere based on the experiences of developing DSLs with Terra such as\n[Darkroom](http://darkroom-lang.org), [Ebb](http://ebblang.org), and\n[Regent](http://regent-lang.org), which gave us a better idea of how the\nlanguage will be used and what problems crop up in larger systems.\n\nIn our experience, Terra code only requires minor changes to make it work with\nthis new release, but feel free to email this list if you run into a situation\nwhere an update would not be trivial. Looking at the difference in the [unit\ntests](https://github.com/terralang/terra/tree/release-2016-03-25/tests) is useful to see\nwhere APIs and syntax have changed for particular features.\n\nMore detailed notes about the changes are below.\n\n## 'Eager' Typechecking\n\n### Change\n\nThis release changes when typechecking of Terra functions and quotations\noccurs. Previously, typechecking was done 'lazily', that is, it ran right\nbefore a Terra function was actually used. Instead, the current version\ntypechecks eagerly --- immediately when a function or quotation is\ndefined. This includes all meta-programming such as evaluating escapes and\nrunning macros.\n\n### Rationale\n\nThe original 'lazy' design had some advantages. For instance, it allowed for a\nflexible order to when things were defined. A function could call a Terra\nmethod before that method was declared by the struct being used. However, we\nhave found those advantages are outweighted by disadvantages. In lazy\ntypechecking, errors tended to get reported very far from the creation of the\nstatement that caused them, slowing debugging. It also complicated\nmeta-programming, a core aspect of Terra. When constructing Terra expressions\nlike the quotation `a + b, it could be useful to know what the type of the\nresulting expression would be. With lazy typechecking, they type is not known\nwhen the quote is constructed. It can be difficult to figure out the type of`a\n+ b`from the types of`a`and`b` without duplicating much of Terra's\ntypechecking rules. While, we allowed a work-around that deferred\nmeta-programming to typechecking time by using a macro, it only complicated\nthe process.\n\nThese problems are resolved in the current release with eager\ntypechecking. Type errors are immediately reported when a function definition\nor quotation is created, making it easier to debug. The type of a quotation is\nalso always availiable of use during metaprogramming:\n\n```\nlocal function genadd(a,b)\n    local sum = `a + b\n    print(\"the type of sum is\",sum:gettype())\n    -- use the type to do whatever you want\n    return sum\nend\nterra foo()\n    var d = 1.5\n    var i = 1\n    var d = [sum(d,i)] -- the type of sum is double\n    var i = [sum(i,i)] -- the type of sum is int\nend\n```\n\n### Ramifications to existing code\n\n#### Function Declaration/Definition\n\nThe major ramification of this change is that functions must be declared with\na type before they are used in code, and that structs must be defined before\nbeing used in code. This is similar to the behavior of C/C++. To prevent\neverything from needing to be defined in a strict order, we allow continuous\ndeclarations/definitions to be processed simultaneously. Any sequence of\ndeclarations or definitions of terra structs and functions are now processed\nsimultaneously:\n\n```\nterra PrintReal(a : double)\n    C.printf(\"%d \",a)\nend\nterra PrintComplex(c : Complex)\n    C.printf(\"Complex \")\n    PrintReal(c.real)\n    PrintReal(c.imag)\nend\nstruct Complex { real : double, imag : double }\nprint(\"lua code\")\nterra secondunit()\n```\n\nIn this case the declarations of Complex, PrintComplex, and PrintReal are\nprocessed first, followed by the definitions. Any interleaving Lua code, like\nthe 'print' statement breaks up a declaration block. Previously this behavior\nwas only possible using the 'and' keyword. Now this behavior is the default\nand the 'and' syntax has been removed.\n\nSince typechecking is eager, function _declarations_ now require types:\n\n```\nlocal terra PrintReal :: double -> {}\nterra Complex:add :: {Complex,Complex} -> Complex\n```\n\n(The double colon, ::, is necessary to avoid a parser ambiguity with method definitions)\n\n#### Symbols\n\nSince typechecking is eager, Symbols must always be constructed with types so\ntheir types are known when used in quotations. The `type` argument to the\n`symbol(type,[name])` function is no longer optional and will report an error\nif omitted. To get a unique label for struct members, method name, or goto\nlabels, the `label([name])` function has been added. Symbols and Labels are\nnow distinct concepts. Symbols always have types and represent a unique name\nfor a Terra expression, while Labels never have a type and represent a unique\nname for a labels.\n\nFurthermore, since Symbols always have types, the optional type annotations\nfor escaped variable declarations have been removed:\n\n```\nlocal a = symbol(int,\"a\")\nterra foo([a]) --ok\nend\nterra foo([a]:int) -- syntax error, symbol 'a' always has a type making the annotation redundant\nend\n```\n\n#### APIs\n\nCertain APIs for handling the consequences of lazy typechecking such as\n`:peektype` have been removed. `:printpretty` only takes a single argument\nsince expressions are always type.\n\n## Improved Error Reporting\n\nIn addition to having type errors occur earlier, the quality of error\nreporting has improved. Previously, if used-defined code such as an escape,\nmacro, or type annotation resulted in an error, the typechecker would try to\nrecover and continue generating type errors for the rest of a function. This\nresulted in long inscrutable error messages.\n\nThe new error reporting system does not attempt to recover in these cases and\ninstead reports a more meaningful error message with a full stack trace that\nincludes what the typechecker was checking when the error occurred.\n\nerror.t:\n\n```\nlocal function dosomething(a)\n    error(\"NYI - dosomething\")\nend\nlocal function dosomethingmore(a)\n    local b = dosomething(a)\n    return `a + b\nend\n\nterra foo(d : int)\n    var c = [dosomethingmore(d)]\n    return c\nend\n```\n\nmessage:\n\n```\nerror.t:2: NYI - dosomething\nstack traceback:\n    [C]: in function 'error'\n    error.t:2: in function 'dosomething'\n    error.t:5: in function 'userfn'\n    error.t:10: Errors reported during evaluating Lua code from Terra\n        var c = [dosomethingmore(d)]\n                               ^\n    .../terra/src/terralib.lua:1748: in function 'evalluaexpression'\n    .../terra/src/terralib.lua:2772: in function 'docheck'\n    .../terra/src/terralib.lua:2983: in function 'checkexp'\n    .../terra/src/terralib.lua:2510: in function 'checkexpressions'\n    .../terra/src/terralib.lua:3150: in function 'checksingle'\n    .../terra/src/terralib.lua:3184: in function 'checkstmts'\n    .../terra/src/terralib.lua:3079: in function 'checkblock'\n    .../terra/src/terralib.lua:3268: in function 'typecheck'\n    .../terra/src/terralib.lua:1096: in function 'defineobjects'\n    error.t:9: in main chunk\n```\n\nThe error reporting system also does a better job at accurately reporting line\nnumbers for code that exists in escapes.\n\n## Constant Expressions and Initializers\n\nTerra Constants generated with `constant([type],[value])` can now be defined\nusing Terra quotations of _constant expressions_:\n\n```\nlocal complexobject = constant(`Complex { 3, 4 })\n```\n\nConstant expressions are a subset of Terra expressions whose values are\nguaranteed to be constant and correspond roughly to LLVM's concept of a\nconstant expression. They can include things whose values will be constant\nafter compilation but whose value is not known beforehand such as the value of\na function pointer:\n\n```\nterra a() end\nterra b() end\nterra c() end\n-- array of function pointers to a,b, and c.\nlocal functionarray = const(`array(a,b,c))\n```\n\nThe global initializer to a `global()` variable can also be a constant\nexpression now and can be reassigned until the global is actually compiled\nusing `:setinitializer`.\n\n## Separate Overloaded and non-Overloaded Functions\n\nPreviously, it was possible for any Terra function to have multiple\ndefinitions, which would cause it to become an overloaded function. However,\nthere are many cases where a function with a single definition is needed such\nas saving an object (.o) file, generating a function pointer, and\nunambiguously calling a Terra function from Lua.\n\nIn this release, terra functions are single-defintion by default. Another\ndefinition overrides the previous one.\n\nOverloaded functions are still possible using a separate object:\n\n```\nlocal addone = terralib.overloadedfunction(\"addone\",\n               { terra(a : int) return a + 1 end,\n                 terra(a : double) return a + 1 end })\n-- you can also add methods later\naddone:adddefinition(terra(a : float) return a + 1 end)\n```\n\nThis fixes the worst problem caused by overloaded functions.  On the REPL,\ndefining a new version of a function simply added another definition to the\nprevious function rather than overwriting it:\n\n```\n> terra foo() return 1 end\n> terra foo() return 2 end\n> terra useit() foo() end --old behavior: function is ambiguously defined\n                          --new behavior: returns 2\n```\n\nAPI changes reflect the fact that functions only have a single definition. For\nflexibility, we allow the definition of an already defined function to be\nchanged using `:resetdefinition` as long as it has not already been output by\nthe compiler.\n\n## Calling Lua Functions from Terra\n\nA common inscrutable error was accidentally calling a a Lua function from\nTerra when that function was meant to be escaped, or was intended to be a\nmacro. To avoid this situation, we reject attempts to call Lua functions\ndirectly. Instead, they must now be cast to a terra function first with\n`terralib.cast`:\n\n```\nlocal tprint = terralib.cast({int}->{},print)\nterra foo()\n    tprint(4)\nend\n```\n\nIf you want the old behavior, you can recreate it using macros:\n\n```\nlocal function createluawrapper(luafn)\n    local typecache = {}\n    return macro(function(...)\n        local args = terralib.newlist {...}\n        local argtypes = args:map(\"gettype\")\n        local fntype = argtypes -> {}\n        if not typecache[fntype] then\n            typecache[fntype] = terralib.cast(fntype,luafn)\n        end\n        local fn = typecache[fntype]\n        return `fn([args])\n    end)\nend\n\nlocal tprint = createluawrapper(print)\nterra test()\n    tprint(1,2,3.5)\n    tprint(1)\n    tprint(2)\nend\n\ntest()\n```\n\n## Abstract Syntax Description Language (ASDL)\n\nCompiler internals in Terra have been changed to use the Zephyr [Abstract\nSyntax Description Language\n(ASDL)](http://www.cs.princeton.edu/research/techreps/TR-554-97), which is\nalso used internally in the CPython implementation.\n\nA require-able Lua package \"asdl\" provides this library to users so that they\ncan also use ASDL to create data-types to represent abstract-syntax trees and\nintermediate representations in their own DSLs.\n\nUsing ASDL to represent Terra's internal ASTs will make it easier to write\nbackends in addition to LLVM that consume the AST.\n\n## Other API Changes\n\n`__for` meta-method behavior has been changed to be simpler.\n\n# Release 2016-02-26\n\nBug fixes that resolve an issue with including C header files on some Linux\ndistributions\n\nSupport testing for NaN's with `a ~= a`\n\nAdditional tests for performance regression.\n\nImplementation of `lexer:luastats()`, `lexer:terraexp()` and\n`lexer:terrastats()` in parser extension interface.\n\n# Release 2015-08-03\n\nBug fixes for including C header files and their interaction with cross\ncompilation.\n\nBug fix to avoid adding Clang resource directory on Windows builds.\n\n# Release 2015-07-21\n\nThis release has two major changes.\n\n  * Support for cross-compilation. Functions like `terralib.saveobj` can now\n    emit code for non-native architectures see the documentation at\n    http://terralang.org/api.html for more information.\n\n  * Support for stand-alone static linking. It is now possible to link against\n    a static `libterra.a` that includes everything you need to run Terra\n    include the right LuaJIT and LLVM code. The library itself has no external\n    dependencies on the filesystem.\n\n# Release 2015-03-12\n\nAdded ability to compile CUDA code for offline use.\n\n# Release 2015-03-03\n\nReleases for OSX 10.10, Ubuntu 14.04, and Windows 8\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.142578125,
          "content": "cmake_minimum_required(VERSION 3.5)\nproject(Terra)\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${Terra_SOURCE_DIR}/cmake/Modules\")\n\nfind_package(LLVM HINTS ${LLVM_HINTS} REQUIRED)\nfind_package(Clang REQUIRED)\nfind_package(Git) # for version number\n\nif(TERRA_ENABLE_CUDA)\n  find_package(CUDA REQUIRED)\nelseif(NOT DEFINED TERRA_ENABLE_CUDA)\n  find_package(CUDA)\nendif()\nset(TERRA_ENABLE_CUDA ${CUDA_FOUND} CACHE BOOL \"Build Terra with support for CUDA\")\n\nif(DEFINED TERRA_STATIC_LINK_LLVM)\n  set(DEFAULT_TERRA_SLIB_INCLUDE_LLVM ${TERRA_STATIC_LINK_LLVM})\nelse()\n  if(WIN32)\n    set(DEFAULT_TERRA_SLIB_INCLUDE_LLVM OFF)\n  else()\n    set(DEFAULT_TERRA_SLIB_INCLUDE_LLVM ON)\n  endif()\nendif()\nset(TERRA_SLIB_INCLUDE_LLVM ${DEFAULT_TERRA_SLIB_INCLUDE_LLVM} CACHE BOOL \"Include LLVM in Terra static libraries\")\nset(TERRA_STATIC_LINK_LLVM ON CACHE BOOL \"Statically link Terra against LLVM\")\n\nif(TERRA_SLIB_INCLUDE_LLVM AND NOT TERRA_STATIC_LINK_LLVM)\n  message(FATAL_ERROR \"TERRA_SLIB_INCLUDE_LLVM requires TERRA_STATIC_LINK_LLVM to be set\")\nendif()\n\nif(WIN32 AND TERRA_SLIB_INCLUDE_LLVM)\n  message(FATAL_ERROR \"TERRA_SLIB_INCLUDE_LLVM is not supported on Windows\")\nendif()\n\nif(DEFINED TERRA_STATIC_LINK_LUAJIT)\n  set(DEFAULT_TERRA_SLIB_INCLUDE_LUAJIT ${TERRA_STATIC_LINK_LUAJIT})\nelse()\n  if(WIN32)\n    set(DEFAULT_TERRA_SLIB_INCLUDE_LUAJIT OFF)\n  else()\n    set(DEFAULT_TERRA_SLIB_INCLUDE_LUAJIT ON)\n  endif()\nendif()\nset(TERRA_SLIB_INCLUDE_LUAJIT ${DEFAULT_TERRA_SLIB_INCLUDE_LUAJIT} CACHE BOOL \"Include LuaJIT in Terra static libraries\")\nset(TERRA_STATIC_LINK_LUAJIT ON CACHE BOOL \"Statically link Terra against LuaJIT\")\n\nif(TERRA_SLIB_INCLUDE_LUAJIT AND NOT TERRA_STATIC_LINK_LUAJIT)\n  message(FATAL_ERROR \"TERRA_SLIB_INCLUDE_LUAJIT requires TERRA_STATIC_LINK_LUAJIT to be set\")\nendif()\n\nif(WIN32 AND TERRA_SLIB_INCLUDE_LUAJIT)\n  message(FATAL_ERROR \"TERRA_SLIB_INCLUDE_LUAJIT is not supported on Windows\")\nendif()\n\ninclude(GNUInstallDirs)\ninclude(VersionNumber)\ninclude(BuildDirs)\ninclude(GetLuaJIT)\ninclude(ExtractLLVM)\n\nif(LLVM_VERSION_MAJOR GREATER 15)\n  set(CMAKE_CXX_STANDARD 17)\nelse()\n  set(CMAKE_CXX_STANDARD 14)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nenable_testing()\n\nadd_subdirectory(src)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.6982421875,
          "content": "# Terra Code of Conduct\n\nLike the technical community as a whole, the Terra community is made up of a\nmixture of professionals and volunteers from all over the world, working on\nevery aspect of the mission---including mentorship, teaching, and connecting\npeople.\n\nDiversity is one of our huge strengths, but it can also lead to\ncommunication issues and unhappiness. To that end, we have a few ground\nrules that we ask people to adhere to. This code applies equally to\nfounders, mentors and those seeking help and guidance.\n\nThis isn't an exhaustive list of things that you can't do. Rather, take it\nin the spirit in which it's intended---a guide to make it easier to enrich\nall of us and the technical communities in which we participate.\n\nThis code of conduct applies to all spaces managed by the Terra\nproject. This includes Zulip, the mailing lists, the issue tracker, and any\nother forums created by the project team which the community uses for\ncommunication. In addition, violations of this code outside these spaces may\naffect a person's ability to participate within them.\n\nIf you believe someone is violating the code of conduct, we ask that you\nreport it by emailing\n[terra-mods@googlegroups.com](mailto:terra-mods@googlegroups.com). For more\ndetails please see our [Reporting Guidelines](#reporting-guidelines).\n\n  * **Be friendly and patient.**\n\n  * **Be welcoming.** We strive to be a community that welcomes and supports\n    people of all backgrounds and identities. This includes, but is not\n    limited to members of any race, ethnicity, culture, national origin,\n    colour, immigration status, social and economic class, educational\n    level, sex, sexual orientation, gender identity and expression, age,\n    size, family status, political belief, religion, and mental and physical\n    ability.\n\n  * **Be considerate.** Your work will be used by other people, and you in\n    turn will depend on the work of others. Any decision you take will\n    affect users and colleagues, and you should take those consequences into\n    account when making decisions. Remember that we're a world-wide\n    community, so you might not be communicating in someone else's primary\n    language.\n\n  * **Be respectful.** Not all of us will agree all the time, but\n    disagreement is no excuse for poor behavior and poor manners. We might\n    all experience some frustration now and then, but we cannot allow that\n    frustration to turn into a personal attack. It's important to remember\n    that a community where people feel uncomfortable or threatened is not a\n    productive one. Members of the Terra community should be respectful\n    when dealing with other members as well as with people outside the\n    Terra community.\n\n  * **Be careful in the words that you choose.** We are a community of\n    professionals, and we conduct ourselves professionally. Be kind to\n    others. Do not insult or put down other participants. Harassment and\n    other exclusionary behavior aren't acceptable. This includes, but is not\n    limited to:\n\n      * Violent threats or language directed against another person.\n      * Discriminatory jokes and language.\n      * Posting sexually explicit or violent material.\n      * Posting (or threatening to post) other people's personally\n        identifying information (\"doxing\").\n      * Personal insults, especially those using racist or sexist terms.\n      * Unwelcome sexual attention.\n      * Advocating for, or encouraging, any of the above behavior.\n      * Repeated harassment of others. In general, if someone asks you to\n        stop, then stop.\n\n   * When we disagree, try to understand why. Disagreements, both social and\n     technical, happen all the time and Terra is no exception. It is\n     important that we resolve disagreements and differing views\n     constructively. Remember that we're different. The strength of Terra\n     comes from its varied community, people from a wide range of\n     backgrounds. Different people have different perspectives on\n     issues. Being unable to understand why someone holds a viewpoint\n     doesn't mean that they're wrong. Don't forget that it is human to err\n     and blaming each other doesn't get us anywhere. Instead, focus on\n     helping to resolve issues and learning from mistakes.\n\nOriginal text courtesy of the\n[Django](https://www.djangoproject.com/conduct/) project.\n\n## Reporting Guidelines\n\nIf you believe someone is violating the code of conduct we ask that you\nreport it by emailing\n[terra-mods@googlegroups.com](mailto:terra-mods@googlegroups.com) (monitored\nby Elliott Slaughter). All reports will be kept confidential. In some cases\nwe may determine that a public statement will need to be made. If that's the\ncase, the identities of all victims and reporters will remain confidential\nunless those individuals instruct us otherwise.\n\nIf you believe anyone is in physical danger, please notify appropriate law\nenforcement first. If you are unsure what law enforcement agency is\nappropriate, please include this in your report and we will attempt to\nnotify them.\n\nIf you are unsure whether the incident is a violation, or whether the space\nwhere it happened is covered by this Code of Conduct, we encourage you to\nstill report it. We would much rather have a few extra reports where we\ndecide to take no action, rather than miss a report of an actual\nviolation. We do not look negatively on you if we find the incident is not a\nviolation. And knowing about incidents that are not violations, or happen\noutside our spaces, can also help us to improve the Code of Conduct or the\nprocesses surrounding it.\n\nIn your report please include:\n\n  * Your contact info (so we can get in touch with you if we need to follow\n    up).\n  * Names (real, nicknames, or pseudonyms) of any individuals involved. If\n    there were other witnesses besides you, please try to include them as\n    well.\n  * When and where the incident occurred. Please be as specific as possible.\n  * Your account of what occurred. If there is a publicly available record\n    (e.g. a mailing list archive or a public IRC logger) please include a\n    link.\n  * Any extra context you believe existed for the incident.\n  * If you believe this incident is ongoing.\n  * Any other information you believe we should have.\n\nWhat happens after you file a report?\n\nYou will receive an email from us acknowledging receipt, usually within 24\nhours (though we aim for much quicker than that).\n\nWe will review the incident and determine:\n\n  * What happened.\n  * Whether this event constitutes a code of conduct violation.\n  * Who the bad actor was.\n  * Whether this is an ongoing situation, or if there is a threat to\n    anyone's physical safety.\n\nIf this is determined to be an ongoing incident or a threat to physical\nsafety, our immediate priority will be to protect everyone involved. This\nmeans we may delay an \"official\" response until we believe that the\nsituation has ended and that everyone is physically safe.\n\nOnce we have a complete account of the events we will make a decision as to\nhow to response. Responses may include:\n\n  * Nothing (if we determine no violation occurred).\n  * A private reprimand to the individual(s) involved.\n  * A public reprimand.\n  * An imposed vacation (i.e. asking someone to \"take a week off\" from a\n    mailing list or Zulip).\n  * A permanent or temporary ban from some or all Terra spaces (mailing\n    lists, IRC, etc.)\n  * A request for a public or private apology.\n\nWe'll respond within one week to the person who filed the report with either\na resolution or an explanation of why the situation is not yet resolved.\n\nOnce we've determined our final action, we'll contact the original reporter\nto let them know what action (if any) we'll be taking. We'll take into\naccount feedback from the reporter on the appropriateness of our response,\nbut we don't guarantee we'll act on it.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.0302734375,
          "content": "release/share/terra/LICENSE.txt"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.0283203125,
          "content": "release/share/terra/README.md"
        },
        {
          "name": "STABILITY.md",
          "type": "blob",
          "size": 7.0869140625,
          "content": "This document describes Terra's stability policy.\n\n# Motivation\n\nStability allows users to upgrade without fear that their code will\nbreak. There is no such thing as perfectly stable software. But a\nwell-defined stability policy establishes the risks associated with\nuse of the software, and the ways such risks are communicated (e.g.,\nversion numbers).\n\nStability comes at a cost. This can include the possibility of\nlimiting future expansions of the software, as well as locking in poor\ndesign decisions. There is also a human cost: for example, stress\ncreated for the maintainers in assessing the impact of every\nchange. These costs are important, especially for a relatively small\ncommunity such as Terra.\n\nTherefore this document proposes a *low stress* stability policy for\nTerra. The goal is not to ensure that nothing ever breaks, but to\nestablish clear expectations for what changes are possible and how\nthey will be communicated.\n\nUltimately, we're learning as we go along. If something doesn't work,\nwe may need to update the policy. Thanks for working with us in this\nprocess, and as usual, the best way to help is to get involved.\n\n# Versioning\n\nVersion numbers, along with release notes, are a primary mechanism for\ncommunicating potentially breaking changes. As of Terra version 1.0.0,\na version number MAJOR.MINOR.PATCH communicates the risk level\nassociated with upgrading from a given increment to the next one:\n\n  * An increment in the MAJOR position indicates a substantial risk of\n    software breaking. Users should carefully consult the release\n    notes to learn what changes may be required. Maintainers should\n    document any potentially breaking changes to ensure that users\n    have adequate knowledge to upgrade.\n\n    There are no current plans to ever release a version 2.0.0 of\n    Terra.\n\n    While no such changes are planned, in theory, a MAJOR increment\n    could be accompanied by *silent* breaking changes. That is, the\n    changes might potentially alter the behavior of user programs\n    without any clear error message or warning to the user. This is\n    obviously a Big Deal&trade; and is a key reason why we do not ever\n    intend to release a 2.0.0 version of Terra.\n\n  * An increment in the MINOR position indicates a small, but\n    non-zero, risk of breakage. Specific anticipated scenarios are\n    discussed below. Users should certainly test their software to\n    ensure conformance, but can (hopefully) expect a mostly painless\n    upgrade process. Maintainers should document any potentially\n    breaking changes to ensure that users have adequate knowledge to\n    upgrade.\n\n    While the goal at this level is still to avoid breaking changes,\n    to the extent that there are any, they should be *loud*. That is,\n    any potential change of behavior should be accompanied by a\n    compile error or similar, fatal diagnostic. Issuing a hard error\n    ensures users cannot miss the change. As a result, users can\n    upgrade without fear that their programs will change behavior\n    unexpectedly. If the code compiles and runs, it should be\n    compatible. Of course, even here, there is always a possibility of\n    unintentional silent changes. But these would be considered bugs\n    and would be reverted to maintain compatibility.\n\n  * An increment in the PATCH position should never break user\n    software. If it does, this is a bug, and should be rolled back in\n    a subsequent PATCH release (and included instead in the next MINOR\n    release, if any). Backwards-compatible features may still be\n    included in PATCH releases as long as the maintainers reasonably\n    believe such changes are low risk.\n\nNote this is less formal than [Semantic\nVersioning](https://semver.org/). The goal is to follow the spirit of\nSemVer without imposing unreasonable cost on the Terra community.\n\n# Potential Minor Breaking Changes\n\nThe following specific examples of potential breaking changes are\nanticipated in MINOR releases.\n\n  * **LLVM version support.** Terra exposes various LLVM features to\n    the user. The LLVM project does not offer backwards compatibility\n    between releases. Therefore, Terra's approach to stability is to\n    support a range of LLVM versions, and allow the user to\n    choose. However, this has a cost that grows with the number of\n    versions Terra supports. To reduce this cost we periodically\n    deprecate and remove support for older LLVM versions. All\n    deprecations are posted publicly in our issue tracker in advance\n    (usually for several months), and public input is solicited prior\n    to proceeding with deprecation. Removal of any LLVM version\n    requires an increment in the MINOR version of Terra.\n\n  * **OS support.** OS changes sometimes break Terra, requiring\n    periodic fixes. (macOS is a particularly bad offender here.) To\n    the extent these changes are backwards compatible, we will offer\n    them as PATCH releases. However, in some cases such changes may be\n    backwards incompatible. In such cases, we will increment the MINOR\n    version.\n\n  * **Experimental features.** Experimental features are marked as\n    such to signal to the user that they may change. Backwards\n    incompatible changes to such features require a MINOR version\n    increment.\n\n  * **Keyword additions.** Keywords may be added to the language with\n    a MINOR increment. This is not something we take lightly, as it\n    has the risk to break existing code. However, in our experience\n    with languages with stricter stability policies (that completely\n    disallow keyword additions), such policies can result in a\n    \"keyword land rush\" that may ultimately be detrimental to the\n    language. On the scale of potentially breaking changes, keyword\n    additions are considered less harmful because they may break code\n    (by causing it to fail to compile), but never to silently change\n    behavior. (Any change that had the potential to silently change\n    behavior would be considered a MAJOR change, and would be\n    avoided.) This is not a capability we plan to use, but one we\n    outline here to set expectations.\n\n  * **Changes to the stability policy.** Backwards incompatible\n    changes to the stability policy (i.e., ones that may allow more\n    breaking changes at lower version numbers) also require a MINOR\n    version increment.\n\n# Not Covered by This Policy\n\nSome features are not covered by this stability policy, and therefore\nmay change even in PATCH releases.\n\n  * **Human readable diagnostic output.** For example, the output of\n    `:printpretty()`, `:disas()`, etc. The output of these functions\n    are generally not intended to be parsed, and may change between\n    versions. If you find a need to do so, please file an issue so\n    that we can explore better ways of supporting your use case.\n\n  * **Symbols assigned to anonymous functions, variables, etc.** (that\n    do not otherwise have names set by the user). The mechanism by\n    which Terra chooses these names may change between releases.\n\n  * **Symbols assigned to functions, variables, etc. with duplicate\n    names** (that is, the user set identical names for two or more\n    functions/variables). The mechanism by which Terra chooses these\n    names may change between releases.\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 11.0986328125,
          "content": "Upgrade to LLVM 3.6:\n    remove dependencies on JITMemoryManager\n    resolve changes to NotifyObjectEmitted\n    resolve changes to LinkModule (need to copy the src module, fix error handling)\n    resolve changes to Metadata types all over the code\n\nDebugging:\n  terralib.traceback() -- make a version of debug.traceback() that is aware of Terra compilation state. Rather than printing the raw stack frames for specialization/compilation, it should report the line\n  of Terra code that it is doing the operation:\n  \n    foo.t:42: assertion failed!\n    foo.t:39 specializing\n            var a = [b + c]\n                    ^\n    ...\nterralib.totype() -- rather than use istype, have a totype that returns nil on failure. Replace istype checks with totype. Allow {int,int} convert, and we can consider a toterratype check in an objects meta table as well.\n\nremove initialization of cuda runtime. Add cudalib.linkcuda() to load the cuda runtime (this will speed startup time for things that do not use cuda).\n\nShould exotypes be objects rather than modifying a table? Or should we have toterratype? Both (seems like a bad idea to have both). If exotypes are objects, they should be able\nto do almost everything except the things that the original type has to do.\n  \n\nCross-compilation:\n\n\n-- store target, method to allocate a target machine (used for our own target machine and for EngineBuilder::create)\n-- use target machine to make JIT rather than separate config path\n-- allow createcompilationunit to take arguments: triple, cpu, arch, featurestr specified optionally, \"native\" will mean to use LLVM to discover the native values\n-- each function that uses createccompilationunit will take the arch optionally\n-- make sure X86_64 assumptions are not in other places\n-- stringify and pass correct arguments to clang for cross compilation as well\n\n\nGoal: Make it really easy to emit C header files for Terra functions\n\n-- API to get list of parameter names of a function, rather than just the type\n-- edit the implementation of cstring so that it can be used externally as well as internally\n\n\nLanguage Implementation:\n\n-- Represent aggregate constants as aggregates rather than current method of casting\n-- switch construct, computed goto\n-- vector shuffle?\n-- cmpxchg, atomicrmw, fence (all but fence can be part of attrstore)\n\nDesign Problems:\n-- how to save results for later (both Lua state and Terra JIT state)\n\nLow-priority Implementation:\n-- generate TBAA metadata like C will so that we can match perf (do we need?)\n-- gather and scatter for vectors (allow vec(int*) and its loads)\n-- pointer arithmetic on niltype?\n-- better handling of options to try for overloaded operators\n\n\nDONE:\n\n--function pointers\n--anonymous structural type cast to other structural types\n--methods on types (declaration syntax )\n--methods on types (call syntax/resolution) \n-- -> and & syntax need to work in normal lua code (not just type resolution)\n-- types should be presented in the AST as the string of lua code to run to get the type rather than an AST needed to be interpreted--eval types:\n   change types to have either canonical versions or exist as proxy objects\n   type constructors (e.g. pointer to) should ask if a type is canonical and create a proxy if not)\n--pointer arithmetic\n--array types\n--resolvetype needs to allow the declaration of anonymous structural types\n--macros in terra\n-- explicit casts (pointer to pointer, requires macros to somewhat work)\n-- constructor syntax with a function in last position should create 1 anonymous entry per return value of the function\n-- string literals translated to int8* types\n-- how to use clang to read C header files\n-- an opaque type (equivalent to void* in C) (? another alternative is to just use int8* for  now) (went with: no unsized opaque types, but some imported c types do now expose internals)\n-- support typedefs and record types in C header files\n-- automatic conversion from any pointer to &uint8\n-- nil should translate to any pointer type's NULL value, this will require adding an implicit conversion for <nulltype> to any pointer type,\n   and allowing nulltype to exist\n-- union annontations in struct types\n-- support for aggregate types in Lua-terra interface\n   extend cstring to work for arrays and structs (+unions) being careful to work for recursive types\n   to work around c's weird syntax, each non-primitive will need to generate a typedef for its type\n   fold the typedef for functions into cstring and simplify makewrapper to use its type instead\n   pointers to functions will need to be handled as a special case\n--calling lua functions from terra\n-- turn debug on/off debug printing\n-- introduce LL, ULL, and f to make constants have the expected types\n-- simple save of functions (give a key-value pair and export the symbols with those names to a .o file, see if you can use aliases to export these functions)\n-- code quotations of statements and expressions\n-- getting started guide\n-- revise how quoted code is injected into AST. In particular, macros should not drop Quote objects into the AST (it should instead resolve the quotes in place)\n   also consider the way that checkexp allows quote objects to propogate: consider a different design where untyped code is first resolved:\n      vars are check if they are Quotes and inserted as Quote nodes\n      same goes for global variables\n      partial eval of select is handeld\n      macro nodes are expanded (recursively) until there are no non-tree literals left\n-- good error message for when there is a circular dependency on global variable initializationlocation like old C for now)\n-- getting the right -O3 passes (llvm-as < /dev/null | opt -O3 -disable-output -debug-pass=Arguments)\n   handle as much as possible in the JIT, and make sure the offline compiler does everything\n   make configurable (perhaps a general config mechanism) (look a preconfigured stuff)\n-- write 1 or two language benchmarks in terra to get baseline perf (do this after figuring out -O3)\n-- creating references to variables found in another quote object despite hygiene\n-- vector types\n-- overloaded functions\n-- overloaded operator behavior\n-- fix gc issues cleaning up functions: 1. either resolve symbols for quotes and functions once and throw away the env, or 2. trace references to local variables in the parser and construct the environment so that it only captures the referenced variables (this is probably the better solution, but changing the parser to do it may be tricky).\n-- returning values from lua functions (via terralib.cast)\n-- better interaction for low-level values allocated from Lua and used in Terra. (terralib.constant behavior implemented for ctypes)\n--&&type should convert to &&uint8 (check number of addresses is the same, currently only allows &foo to convert to &uint8) (did not fix, this isn't how C behaves either)\n--look into bug: if you cast an lvalue pointer to another pointer, it becomes an rvalue, this is not right... (did not fix, that is the right behavior)\n-- change parser rule to allow let rec form that can include  local/global structs/terra declarations/definitions together. modify terralib to accept this form and remove constructors for other forms.\n-- tag _all_ tree nodes with the filename and remove the complicated stack of files for error reporting (we can compress tree node size later)\n-- remove var syntax from lua. Instead use terralib.global to create global variables.\n\nImplementation:\n-- better handling of lua layout of structs with recursion (can we seperate the creation of structs for their layout to simplify the problem) -- test the compiler fo handling jitting of functions previously optimized with nojit = true\n   (look into the way LLVM handles pointers to opaque structs, can we delay layout of a struct until we need to access it similar to the way C allows opaque struct pointers).\n\n-- tests for garbage collection of objects that mix LLVM state with Lua state to check for memory leaks from dangling references\n\n--track down why some types RecordType structs do not have names, and fix the bugs that are caused by this. \n\n--refactor ctx object and terra.resolvetype it should be possible to canonicalize and resolve types without a ctx object\n  instead there should be a seperate diagnostic object for reporting errors, and resolvetype should be given an environment in which to run\n  getcanonical() should then take an _optional_ diagnostic object\n\n-- casting lua functions to Terra functions when they return multiple arguments, and supporting calling Lua functions with structs values/expecting struct returns\n\nMaking specialization eager and simplifying the compiler.\n\n-- seperate specialization phase (e.g. variable resolution, select resolution, escape evaluation) from typechecking, specialization will be run eagerly\n\n-- make the compilation graph a singleton, environments should be handled by function compilation individually. If something is re-entrant into compilation from lua code and there are compile errors stop compilation. Double-check that re-entrant compiler code can compile as long as it is in a different SCC from its compile-time caller. Remove ctx objects as arguments. fnvariant:gettype() and fnvariant:compile() should be seperate from the internal interfaces.\n\n-- add asynchronous versions of :compile and :gettype that can be called when the compiler is running\n-- support LLVM constant expressions: terralib.constant(`exp) (this will allow vtables etc. to be constructed)\n\n-- (lower priority) allow codegeneration for opaque struct types when they are only used as pointers. this will require cooperation from the compiler to keep the struct opaque unless it is marked complete. compiler will need to be annotated to force completion of struct types when they are used as values (either directly or in an aggregate).\n\nMinitasks that came up during eager transform:\n\n--luafunction is gone\n--write the \"documentor\"\n--the attribute macro is broken\n-- getcanonical should cache whether it has been done on aggregates so it doesn't traverse types a bunch of times\n\nThings to write tests/audit for:\n\n-- literals are only generated by the parser, constants handles all stuff from lua (including strings), add correct support for strings\n-- select and var handling have moved\n-- truncation behavior (since it was changed from a field to a node)\n\n-- pretty print is being weird on dgemmpaper.t, add support for typedexpressionlist\nGoal: switch from one emission of llvm to architecture-specific version of llvm.\n\n-- Add a compiler intermediate compilationunit, which maps function definition, global, constant, and everything that has a llvm_value field right now to the llvm value. \n\n-- Remove emitllvm, typechecking now only handles generating types and invoking user callbacks, never emitting/optimizing llvm\n\n-- consider refactoring the SCC detection into it own object, or labelling each function with an identifier for the SCC it is in\n\n-- switch back to SCC-first order optimization for MCJIT\n\n--  simplify the state for functions: untyped, in progress, typed, re-examine peektype, etc.\n--  see if extern functions do not need \"initialization\" anymore\n\n-- emitting llvm is now given a compilationunit, a root function to add to it, and archiecture\n-- include C creates a separate compilationunit, examine linking rules for including it.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.7021484375,
          "content": "environment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n      LLVM_VERSION: 11.1.0\n      LLVM_VERSION_SHORT: 110\n      VS_MAJOR_VERSION: 17\n      USE_CUDA: 1\n\ninstall:\n  - set LLVM_BASE_NAME=clang+llvm-%LLVM_VERSION%-x86_64-windows-msvc17\n  - set LLVM_URL=https://github.com/terralang/llvm-build/releases/download/llvm-%LLVM_VERSION%/%LLVM_BASE_NAME%.7z\n\n  - appveyor DownloadFile %LLVM_URL%\n  - 7z x %LLVM_BASE_NAME%.7z\n  - set CMAKE_PREFIX_PATH=%CD%\\%LLVM_BASE_NAME%\n\n  - if /I \"%USE_CUDA%\" EQU \"1\" (appveyor DownloadFile https://developer.download.nvidia.com/compute/cuda/11.6.2/local_installers/cuda_11.6.2_511.65_windows.exe -FileName cuda.exe)\n  - if /I \"%USE_CUDA%\" EQU \"1\" (.\\cuda -s nvcc_11.6 cudart_11.6)\n  - if /I \"%USE_CUDA%\" EQU \"1\" (set \"PATH=%PATH%;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\bin\")\n\nbuild_script:\n  - cd build\n  - cmake .. -DCMAKE_INSTALL_PREFIX=%CD%\\..\\install -DCMAKE_GENERATOR_PLATFORM=x64\n  - cmake --build . --target INSTALL --config Release\n  - cd ..\n\n  # Package for release\n  - ps: |\n        If($Env:LLVM_VERSION_SHORT -eq 110) {\n          $Env:RELEASE_NAME = \"terra-Windows-x86_64-$(git rev-parse --short HEAD)\"\n          Rename-Item install \"$Env:RELEASE_NAME\"\n          7z a \"$Env:RELEASE_NAME.zip\" \"$Env:RELEASE_NAME\"\n          Rename-Item \"$Env:RELEASE_NAME\" install\n        }\n\ntest_script:\n  - cd tests\n  - ..\\install\\bin\\terra run\n  - cd ..\n\nartifacts:\n  - path: 'terra-*.zip'\n    name: terra_release\n\n# deploy:\n#   description: '$(APPVEYOR_REPO_TAG_NAME)'\n#   provider: GitHub\n#   auth_token:\n#     secure: yN5vuhZjUW+MkntZ51StgL0qmgfjXbY8k6QlAyy/rxMV1YcRxmN2fO8KQxOefEhA\n#   artifact: terra_release\n#   force_update: true\n#   on:\n#     appveyor_repo_tag: true\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 2.7861328125,
          "content": "{ pkgs ? import <nixpkgs> { }, lib ? pkgs.lib\n, fetchFromGitHub ? pkgs.fetchFromGitHub, ncurses ? pkgs.ncurses\n, cmake ? pkgs.cmake, libxml2 ? pkgs.libxml2, symlinkJoin ? pkgs.symlinkJoin\n, cudaPackages ? pkgs.cudaPackages, enableCUDA ? false\n, libpfm ? pkgs.libpfm }:\n\nlet\n\n  llvmPackages = pkgs.llvmPackages_13;\n  stdenv = llvmPackages.stdenv;\n  cuda = if cudaPackages ? cudatoolkit_11 then [\n           cudaPackages.cudatoolkit_11\n         ] else [\n           cudaPackages.cuda_nvcc\n           cudaPackages.cuda_cudart\n         ];\n\n  luajitRev = \"04dca7911ea255f37be799c18d74c305b921c1a6\";\n  luajitBase = \"LuaJIT-${luajitRev}\";\n  luajitArchive = \"${luajitBase}.tar.gz\";\n  luajitSrc = fetchFromGitHub {\n    owner = \"LuaJIT\";\n    repo = \"LuaJIT\";\n    rev = luajitRev;\n    sha256 = \"0694z8rmqskx86a375ag7qp2wbdri986l5qdz0zalllp4b1hxy92\";\n  };\n  llvmMerged = symlinkJoin {\n    name = \"llvmClangMerged\";\n    paths = with llvmPackages;\n      if llvm ? dev then [\n        llvm.out\n        llvm.dev\n        llvm.lib\n        clang-unwrapped.out\n        clang-unwrapped.dev\n        clang-unwrapped.lib\n      ] else [\n        llvm\n        clang-unwrapped\n      ];\n  };\n\n  clangVersion = llvmPackages.clang-unwrapped.version;\n\nin stdenv.mkDerivation rec {\n  pname = \"terra\";\n  version = \"1.2.0\";\n\n  src = ./.;\n\n  nativeBuildInputs = [ cmake ];\n  buildInputs = [ llvmMerged ncurses libxml2 ]\n    ++ lib.optionals enableCUDA cuda\n    ++ lib.optional (!stdenv.isDarwin) libpfm;\n\n  cmakeFlags = [\n    \"-DHAS_TERRA_VERSION=0\"\n    \"-DTERRA_VERSION=${version}\"\n    \"-DTERRA_LUA=luajit\"\n    \"-DTERRA_SKIP_LUA_DOWNLOAD=ON\"\n    \"-DCLANG_RESOURCE_DIR=${llvmMerged}/lib/clang/${clangVersion}\"\n  ] ++ lib.optional enableCUDA \"-DTERRA_ENABLE_CUDA=ON\";\n\n  doCheck = true;\n  enableParallelBuilding = true;\n  hardeningDisable = [ \"fortify\" ];\n  outputs = [ \"bin\" \"dev\" \"out\" \"static\" ];\n\n  patches = [ ./nix/cflags.patch ];\n\n  postPatch = ''\n    substituteInPlace src/terralib.lua \\\n      --subst-var-by NIX_LIBC_INCLUDE ${lib.getDev stdenv.cc.libc}/include\n  '';\n\n  preConfigure = ''\n    mkdir -p build\n    ln -s ${luajitSrc} build/${luajitBase}\n    tar --mode=\"a+rwX\" -chzf build/${luajitArchive} -C build ${luajitBase}\n    rm build/${luajitBase}\n  '';\n\n  installPhase = ''\n    install -Dm755 -t $bin/bin bin/terra\n    install -Dm755 -t $out/lib lib/terra${stdenv.hostPlatform.extensions.sharedLibrary}\n    install -Dm644 -t $static/lib lib/libterra_s.a\n\n    mkdir -pv $dev/include\n    cp -rv include/terra $dev/include\n  '';\n\n  meta = with lib; {\n    description = \"A low-level counterpart to Lua\";\n    homepage = \"http://terralang.org/\";\n    # Note: Nix has removed LLVM 11, required for Linux AArch64\n    platforms = platforms.x86_64 ++ platforms.darwin; # ++ platforms.aarch64;\n    maintainers = with maintainers; [ jb55 thoughtpolice ];\n    license = licenses.mit;\n  };\n}\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.sh",
          "type": "blob",
          "size": 0.4111328125,
          "content": "#!/bin/bash\n\nset -e\n\nfor f in src/*.c src/*.cpp src/*.h release/include/*/*.h tests/*.h tests/*/*.h; do\n    # Skip files that are imported from external sources.\n    if [[ ! $f = src/bin2c.* && \\\n\t  ! $f = src/lctype.* && \\\n\t  ! $f = src/linenoise.* && \\\n\t  ! $f = src/lj_strscan.* && \\\n\t  ! $f = src/lstring.* && \\\n\t  ! $f = src/lzio.* && \\\n\t  ! $f = src/MSVCSetupAPI.* ]]; then\n        clang-format -i \"$f\"\n    fi\ndone\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "terra-scm-1.rockspec",
          "type": "blob",
          "size": 0.4912109375,
          "content": "package = \"terra\"\nversion = \"scm-1\"\n\nsource = {\n   url = \"git://github.com/terralang/terra.git\",\n   branch = \"master\",\n}\n\ndescription = {\n   summary = \"A low-level counterpart to Lua.\",\n   homepage = \"\",\n   license = \"MIT\",\n}\n\nbuild = {\n   type = \"command\",\n   build_command = [[\nmake clean\nlibdir=$(LUA_LIBDIR)\nLUAJIT_PREFIX=${libdir%/lib}\nmake LUAJIT_PREFIX=$LUAJIT_PREFIX CXX=clang++ CC=clang LLVM_CONFIG=$(LUA_BINDIR)/llvm-config\n   ]],\n   install_command = [[\nmake PREFIX=$(PREFIX) install\n   ]],\n}"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis.sh",
          "type": "blob",
          "size": 7.576171875,
          "content": "#!/bin/bash\n\nset -e\nset -x\n\nif [[ $CHECK_CLANG_FORMAT -eq 1 ]]; then\n    if [[ $(uname) = Linux ]]; then\n        sudo apt-get install -y clang-format-14\n        export PATH=\"/usr/lib/llvm-14/bin:$PATH\"\n    else\n        exit 1\n    fi\n    which clang-format\n\n    ./format.sh\n    git status\n    git diff\n    git diff-index --quiet HEAD\n    exit 0\nfi\n\nif [[ -n $DOCKER_DISTRO ]]; then\n    if [[ -n $DOCKER_ARCH ]]; then\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    fi\n\n    ./docker/build.sh \"$DOCKER_DISTRO\" \"$DOCKER_ARCH\" \"$DOCKER_LLVM\" \"$DOCKER_LUA\" \"$DOCKER_STATIC\" \"$DOCKER_SLIB\" \"$DOCKER_CUDA\" \"$DOCKER_VARIANT\" \"$DOCKER_TEST\"\n    exit 0\nfi\n\narch=$(uname -m | sed -e s/arm64/aarch64/)\nif [[ $(uname) = Linux ]]; then\n  echo \"Use Docker for testing build on Linux\"\n  exit 1\n\nelif [[ $(uname) = Darwin ]]; then\n  if [[ $LLVM_VERSION = 18 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-18.1.7/clang+llvm-18.1.7-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-18.1.7-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-18.1.7-${arch}-apple-darwin/bin/llvm-config llvm-config-17\n    ln -s clang+llvm-18.1.7-${arch}-apple-darwin/bin/clang clang-17\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-18.1.7-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 17 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-17.0.5/clang+llvm-17.0.5-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-17.0.5-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-17.0.5-${arch}-apple-darwin/bin/llvm-config llvm-config-17\n    ln -s clang+llvm-17.0.5-${arch}-apple-darwin/bin/clang clang-17\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-17.0.5-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 16 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-16.0.3/clang+llvm-16.0.3-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-16.0.3-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-16.0.3-${arch}-apple-darwin/bin/llvm-config llvm-config-16\n    ln -s clang+llvm-16.0.3-${arch}-apple-darwin/bin/clang clang-16\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-16.0.3-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 15 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-15.0.2/clang+llvm-15.0.2-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-15.0.2-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-15.0.2-${arch}-apple-darwin/bin/llvm-config llvm-config-15\n    ln -s clang+llvm-15.0.2-${arch}-apple-darwin/bin/clang clang-15\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-15.0.2-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 14 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-14.0.6/clang+llvm-14.0.6-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-14.0.6-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-14.0.6-${arch}-apple-darwin/bin/llvm-config llvm-config-14\n    ln -s clang+llvm-14.0.6-${arch}-apple-darwin/bin/clang clang-14\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-14.0.6-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 13 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-13.0.1/clang+llvm-13.0.1-${arch}-apple-darwin.tar.xz\n    tar xf clang+llvm-13.0.1-${arch}-apple-darwin.tar.xz\n    ln -s clang+llvm-13.0.1-${arch}-apple-darwin/bin/llvm-config llvm-config-13\n    ln -s clang+llvm-13.0.1-${arch}-apple-darwin/bin/clang clang-13\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-13.0.1-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 12 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-12.0.1/clang+llvm-12.0.1-${arch}-apple-darwin-macos11.tar.xz\n    tar xf clang+llvm-12.0.1-${arch}-apple-darwin-macos11.tar.xz\n    ln -s clang+llvm-12.0.1-${arch}-apple-darwin/bin/llvm-config llvm-config-12\n    ln -s clang+llvm-12.0.1-${arch}-apple-darwin/bin/clang clang-12\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-12.0.1-${arch}-apple-darwin\n  elif [[ $LLVM_VERSION = 11 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-11.1.0/clang+llvm-11.1.0-${arch}-apple-darwin-macos11.tar.xz\n    tar xf clang+llvm-11.1.0-${arch}-apple-darwin-macos11.tar.xz\n    ln -s clang+llvm-11.1.0-${arch}-apple-darwin/bin/llvm-config llvm-config-11\n    ln -s clang+llvm-11.1.0-${arch}-apple-darwin/bin/clang clang-11\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-11.1.0-${arch}-apple-darwin\n  else\n    echo \"Don't know this LLVM version: $LLVM_VERSION\"\n    exit 1\n  fi\n\n  # workaround for https://github.com/terralang/terra/issues/365\n  if [[ ! -e /usr/include ]]; then\n    export SDKROOT=\"$(xcrun --sdk macosx --show-sdk-path)\"\n  fi\n\n  export PATH=$PWD:$PATH\n\nelif [[ $(uname) = MINGW* ]]; then\n  if [[ $LLVM_VERSION = 14 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-14.0.0/clang+llvm-14.0.0-${arch}-windows-msvc17.7z\n    7z x -y clang+llvm-14.0.0-${arch}-windows-msvc17.7z\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-14.0.0-${arch}-windows-msvc17\n  elif [[ $LLVM_VERSION = 11 ]]; then\n    curl -L -O https://github.com/terralang/llvm-build/releases/download/llvm-11.1.0/clang+llvm-11.1.0-${arch}-windows-msvc17.7z\n    7z x -y clang+llvm-11.1.0-${arch}-windows-msvc17.7z\n    export CMAKE_PREFIX_PATH=$PWD/clang+llvm-11.1.0-${arch}-windows-msvc17\n  fi\n\n  if [[ $USE_CUDA -eq 1 ]]; then\n    curl -L -O https://developer.download.nvidia.com/compute/cuda/11.6.2/local_installers/cuda_11.6.2_511.65_windows.exe\n    ./cuda_11.6.2_511.65_windows.exe -s nvcc_11.6 cudart_11.6\n    export PATH=\"$PATH:/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.6/bin\"\n  fi\n\n  export CMAKE_GENERATOR=\"Visual Studio 17 2022\"\n  export CMAKE_GENERATOR_PLATFORM=x64\n  export CMAKE_GENERATOR_TOOLSET=\"host=x64\"\n\nelif [[ $(uname) = FreeBSD ]]; then\n  # Nothing to do, everything has already been installed\n  echo\n\nelse\n  echo \"Don't know how to run tests on this OS: $(uname)\"\n  exit 1\nfi\n\nCMAKE_FLAGS=()\nif [[ -n $STATIC_LLVM && $STATIC_LLVM -eq 0 ]]; then\n  CMAKE_FLAGS+=(\n    -DTERRA_STATIC_LINK_LLVM=OFF\n  )\nfi\nif [[ -n $SLIB_INCLUDE_LLVM && $SLIB_INCLUDE_LLVM -eq 0 ]]; then\n  CMAKE_FLAGS+=(\n    -DTERRA_SLIB_INCLUDE_LLVM=OFF\n  )\nfi\nif [[ -n $STATIC_LUAJIT && $STATIC_LUAJIT -eq 0 ]]; then\n  CMAKE_FLAGS+=(\n    -DTERRA_STATIC_LINK_LUAJIT=OFF\n  )\nfi\nif [[ -n $SLIB_INCLUDE_LUAJIT && $SLIB_INCLUDE_LUAJIT -eq 0 ]]; then\n  CMAKE_FLAGS+=(\n    -DTERRA_SLIB_INCLUDE_LUAJIT=OFF\n  )\nfi\nif [[ -n $TERRA_LUA ]]; then\n  CMAKE_FLAGS+=(\n    -DTERRA_LUA=$TERRA_LUA\n  )\nfi\nif [[ $USE_CUDA -eq 1 ]]; then\n  # Terra should autodetect, but force an error if it doesn't work.\n  CMAKE_FLAGS+=(\n    -DTERRA_ENABLE_CUDA=ON\n  )\nfi\n\npushd build\ncmake .. -DCMAKE_INSTALL_PREFIX=$PWD/../install \"${CMAKE_FLAGS[@]}\"\nif [[ $(uname) = MINGW* ]]; then\n  cmake --build . --target INSTALL --config Release\nelse\n  make install -j${THREADS:-2}\nfi\n\n# Skip ctest on Windows; this is currently broken.\nif [[ $(uname) != MINGW* ]]; then\n  ctest --output-on-failure -j${THREADS:-2}\nfi\npopd\n\n# Skip this on macOS because it spews too much on Mojave and newer.\nif [[ $(uname) != Darwin ]]; then\n    pushd tests\n    ../install/bin/terra ./run\n    popd\nfi\n\n# Only deploy builds with LLVM 13 (macOS) and 11 (Windows).\nif [[ (( $(uname) == Darwin && $LLVM_VERSION = 18 ) || ( $(uname) == MINGW* && $LLVM_VERSION = 11 && $USE_CUDA -eq 1 )) && $SLIB_INCLUDE_LLVM -eq 1 && $TERRA_LUA = luajit ]]; then\n  RELEASE_NAME=terra-`uname | sed -e s/Darwin/OSX/ | sed -e s/MINGW.*/Windows/`-${arch}-`git rev-parse --short HEAD`\n  mv install $RELEASE_NAME\n  if [[ $(uname) = MINGW* ]]; then\n    7z a -t7z $RELEASE_NAME.7z $RELEASE_NAME\n  else\n    tar cfJv $RELEASE_NAME.tar.xz $RELEASE_NAME\n  fi\n  mv $RELEASE_NAME install\nfi\n"
        }
      ]
    }
  ]
}