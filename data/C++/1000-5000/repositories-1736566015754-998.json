{
  "metadata": {
    "timestamp": 1736566015754,
    "page": 998,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nmwsharp/polyscope",
      "stars": 1858,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.525390625,
          "content": "ï»¿---\nAlignAfterOpenBracket: Align\nAlignOperands: 'true'\nAllowShortBlocksOnASingleLine: 'false'\nAllowShortIfStatementsOnASingleLine: 'true'\nAllowShortLoopsOnASingleLine: 'true'\nAlwaysBreakTemplateDeclarations: 'true'\nBinPackParameters: 'true'\nBreakBeforeBraces: Attach\nColumnLimit: '120'\nIndentWidth: '2'\nKeepEmptyLinesAtTheStartOfBlocks: 'true'\nMaxEmptyLinesToKeep: '2'\nPointerAlignment: Left\nReflowComments: 'true'\nSpacesInAngles: 'false'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nStandard: Cpp11\nUseTab: Never\n\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4228515625,
          "content": "# Build directories\nbuild/\nbuild_debug/\nmisc/file2c/file2cpp\n\n# Editor and OS things\nimgui.ini\n.DS_Store\n.vscode\n*.swp\ntags\n*.blend1\n.cache\ncompile_commands.json\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.380859375,
          "content": "[submodule \"deps/glfw\"]\n\tpath = deps/glfw\n  url = https://github.com/glfw/glfw.git\n\tbranch = master\n[submodule \"deps/imgui/imgui\"]\n\tpath = deps/imgui/imgui\n\turl = https://github.com/ocornut/imgui.git\n\tbranch = master\n[submodule \"deps/happly\"]\n\tpath = deps/happly\n\turl = https://github.com/nmwsharp/happly.git\n[submodule \"deps/glm\"]\n\tpath = deps/glm\n\turl = https://github.com/g-truc/glm.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.6318359375,
          "content": "cmake_minimum_required(VERSION 3.5...3.22)\n\nproject(polyscope)\n\n### Policy settings\ncmake_policy(SET CMP0054 NEW)   # don't implicitly dereference inside if()\n\n## Project options\n\n# Backend\nset(POLYSCOPE_BACKEND_OPENGL3_GLFW \"ON\" CACHE BOOL \"Enable openGL3_glfw backend\")\nset(POLYSCOPE_BACKEND_OPENGL_MOCK \"ON\" CACHE BOOL \"Enable openGL_mock backend\")\nset(POLYSCOPE_BACKEND_OPENGL3_EGL \"AUTO\" CACHE STRING \"Enable openGL3_egl backend\") # 'AUTO' means \"if we're on linux and EGL.h is available\"\n\n### Do anything needed for dependencies and bring their stuff in to scope\nadd_subdirectory(deps)\n\n### Add things for this project\nadd_subdirectory(src)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0810546875,
          "content": "MIT License\n\nCopyright (c) 2017-2019 Nicholas Sharp and the Polyscope contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.248046875,
          "content": "# Polyscope's documentation is hosted at [polyscope.run](http://polyscope.run)\n\nTo contribute, check out the [instructions here](https://polyscope.run/about/contributing/).\n\n![Polyscope](http://polyscope.run/media/teaser.svg)\n\n[![actions status linux](https://github.com/nmwsharp/polyscope/workflows/linux/badge.svg)](https://github.com/nmwsharp/polyscope/actions)\n[![actions status macOS](https://github.com/nmwsharp/polyscope/workflows/macOS/badge.svg)](https://github.com/nmwsharp/polyscope/actions)\n[![actions status windows](https://github.com/nmwsharp/polyscope/workflows/windows/badge.svg)](https://github.com/nmwsharp/polyscope/actions)\n![PyPI](https://img.shields.io/pypi/v/polyscope?style=flat-square)\n\nPolyscope is a C++/Python viewer and user interface for 3D data such as meshes and point clouds. It allows you to register your data and quickly generate informative and beautiful visualizations, either programmatically or via a dynamic GUI. Polyscope is designed to be lightweight---it does not \"take ownership\" over your entire program, and it is easy to integrate with existing codebases and popular libraries. The lofty objective of Polyscope is to offer a useful visual interface to your data via a single line of code.\n\nPolyscope uses a paradigm of *structures* and *quantities*. A **structure** is a geometric object in the scene, such as a surface mesh or point cloud. A **quantity** is data associated with a structure, such as a scalar function or a vector field.\n\nWhen any of these structures and quantities are registered, Polyscope displays them in an interactive 3D scene, handling boilerplate concerns such as toggling visibility, color-mapping data and adjusting maps, \"picking\" to click in the scene and query numerical quantities, etc.\n\nC++:\n\n``` C++\n#include \"polyscope/polyscope.h\"\n#include \"polyscope/point_cloud.h\"\n#include \"polyscope/surface_mesh.h\"\n\n// Initialize polyscope\npolyscope::init();\n\n// Register a point cloud\n// `points` is a Nx3 array-like container of points\npolyscope::registerPointCloud(\"my points\", points);\n\n// Register a surface mesh structure\n// `meshVerts` is a Vx3 array-like container of vertex positions\n// `meshFaces` is a Fx3 array-like container of face indices  \npolyscope::registerSurfaceMesh(\"my mesh\", meshVerts, meshFaces);\n\n// Add a scalar and a vector function defined on the mesh\n// `scalarQuantity` is a length V array-like container of values\n// `vectorQuantity` is an Fx3 array-like container of vectors per face\npolyscope::getSurfaceMesh(\"my mesh\")->addVertexScalarQuantity(\"my_scalar\", scalarQuantity);\npolyscope::getSurfaceMesh(\"my mesh\")->addFaceVectorQuantity(\"my_vector\", vectorQuantity);\n\n// View the point cloud and mesh we just registered in the 3D UI\npolyscope::show();\n```\n\nPython:\n``` python\nimport polyscope as ps\n\n# Initialize polyscope\nps.init()\n\n### Register a point cloud\n# `my_points` is a Nx3 numpy array\nps.register_point_cloud(\"my points\", my_points)\n\n### Register a mesh\n# `verts` is a Nx3 numpy array of vertex positions\n# `faces` is a Fx3 array of indices, or a nested list\nps.register_surface_mesh(\"my mesh\", verts, faces, smooth_shade=True)\n\n# Add a scalar function and a vector function defined on the mesh\n# vertex_scalar is a length V numpy array of values\n# face_vectors is an Fx3 array of vectors per face\nps.get_surface_mesh(\"my mesh\").add_scalar_quantity(\"my_scalar\", \n        vertex_scalar, defined_on='vertices', cmap='blues')\nps.get_surface_mesh(\"my mesh\").add_vector_quantity(\"my_vector\", \n        face_vectors, defined_on='faces', color=(0.2, 0.5, 0.5))\n\n# View the point cloud and mesh we just registered in the 3D UI\nps.show()\n```\n\nPolyscope is designed to make your life easier. It is simple to build, and fewer than 10 lines of code should be sufficient to start visualizing. In C++, some [template magic](https://polyscope.run/data_adaptors/) means Polyscope can probably accept the data types you're already using!\n\n---\nAuthor: [Nicholas Sharp](http://www.nmwsharp.com)\n\nIf Polyscope contributes to an academic publication, cite it as:\n```bib\n@misc{polyscope,\n  title = {Polyscope},\n  author = {Nicholas Sharp and others},\n  note = {www.polyscope.run},\n  year = {2019}\n}\n```\n\nDevelopment of this software was funded in part by NSF Award 1717320, an NSF graduate research fellowship, and gifts from Adobe Research and Autodesk, Inc.\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}