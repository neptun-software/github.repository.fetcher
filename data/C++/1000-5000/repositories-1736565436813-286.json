{
  "metadata": {
    "timestamp": 1736565436813,
    "page": 286,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ztxz16/fastllm",
      "stars": 3366,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "./models\n./build/"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.998046875,
          "content": "*.log\n*.pyc\ntoken\n/cmake-build-debug/\n/build*\n/pyfastllm/build/\n/pyfastllm/dist/\n/.idea/\n/.vscode/\n/example/Win32Demo/bin/*.*\n/example/Win32Demo/Win32\n/example/Win32Demo/x64\n/example/Win32Demo/*.filters\n/example/Win32Demo/*.user\n/example/Win32Demo/.vs\n/example/Android/LLMAssistant/*.iml\n/example/Android/LLMAssistant/.gradle\n/example/Android/LLMAssistant/local.properties\n/example/Android/LLMAssistant/.idea/caches\n/example/Android/LLMAssistant/.idea/libraries\n/example/Android/LLMAssistant/.idea/modules.xml\n/example/Android/LLMAssistant/.idea/workspace.xml\n/example/Android/LLMAssistant/.idea/navEditor.xml\n/example/Android/LLMAssistant/.idea/assetWizardSettings.xml\n/example/Android/LLMAssistant/.DS_Store\n/example/Android/LLMAssistant/build\n/example/Android/LLMAssistant/captures\n/example/Android/LLMAssistant/.externalNativeBuild\n/example/Android/LLMAssistant/.cxx\n/example/Android/LLMAssistant/local.properties\n/test/cmmlu/results/\n/models/\n/localtest/\n/third_party/tfacc/driver/tfacc2/result\n/.chainlit\n/.files\n*.o"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.125,
          "content": "[submodule \"third_party/pybind11\"]\n\tpath = third_party/pybind11\n\turl = https://github.com/pybind/pybind11.git\n\tbranch = v2.10.5\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.087890625,
          "content": "cmake_minimum_required(VERSION 3.5)\n\nproject(fastllm LANGUAGES CXX)\n\noption(USE_CUDA \"use CUDA\" OFF)\noption(CUDA_NO_TENSOR_CORE \"Optimize for legacy CUDA GPUs which has Tensor Core.\" OFF)\n\noption(USE_TFACC \"use tfacc\" OFF)\n\noption(PY_API \"python api\" OFF)\n\noption(USE_MMAP \"use mmap\" OFF)\n\noption(USE_SENTENCEPIECE \"use sentencepiece\" OFF)\n\noption(USE_IVCOREX \"use iluvatar corex gpu\" OFF)\n\noption(BUILD_CLI \"build cli\" OFF)\n\nif(NOT DEFINED CUDA_ARCH)\n    set(CUDA_ARCH \"native\")\nendif()\n\nmessage(STATUS \"USE_CUDA: ${USE_CUDA}\")\n\nmessage(STATUS \"CUDA_ARCH: ${CUDA_ARCH}\")\n\nmessage(STATUS \"USE_TFACC: ${USE_TFACC}\")\n\nmessage(STATUS \"For legacy CUDA GPUs: ${CUDA_NO_TENSOR_CORE}\")\n\nmessage(STATUS \"PYTHON_API: ${PY_API}\")\n\nmessage(STATUS \"BUILD_CLI: ${BUILD_CLI}\")\n\nmessage(STATUS \"USE_SENTENCEPIECE: ${USE_SENTENCEPIECE}\")\n\nmessage(STATUS \"USE_IVCOREX: ${USE_IVCOREX}\")\n\nset(CMAKE_BUILD_TYPE \"Release\")\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread --std=c++17 -O2\")\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    string(REPLACE \"/Ob2\" \"/Ob1 /Gy\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNOMINMAX /std:c++17 /arch:AVX2 /source-charset:utf-8\")\nelse()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread --std=c++17 -O2 -march=native\")\nendif()\n\n\nmessage(STATUS \"CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}\")\nfile(GLOB GRAPH_MODEL_FILES \"src/models/graph/*.cpp\")\nfile(GLOB CPU_DEVICE_FILES \"src/devices/cpu/*.cpp\")\nset(FASTLLM_CXX_SOURCES src/fastllm.cpp src/device.cpp src/model.cpp src/executor.cpp src/template.cpp src/graph.cpp\n        src/devices/cpu/cpudevice.cpp src/devices/cpu/cpudevicebatch.cpp\n        src/models/graphllm.cpp src/models/chatglm.cpp src/models/moss.cpp src/models/llama.cpp src/models/qwen.cpp src/models/basellm.cpp\n        src/models/glm.cpp src/models/minicpm.cpp src/models/minicpm3.cpp src/models/internlm2.cpp src/models/bert.cpp src/models/moe.cpp src/models/deepseekv2.cpp\n        src/models/phi3.cpp src/models/xlmroberta.cpp src/models/cogvlm.cpp\n        third_party/json11/json11.cpp\n        ${CPU_DEVICE_FILES}\n        ${GRAPH_MODEL_FILES})\n\ninclude_directories(include)\ninclude_directories(include/utils)\ninclude_directories(include/models)\ninclude_directories(include/devices/cpu)\ninclude_directories(third_party/json11)\n\nif (USE_MMAP)\n    add_compile_definitions(USE_MMAP)\nendif()\n\nif (USE_SENTENCEPIECE)\n    set(CMAKE_CXX_STANDARD 17)\n    add_compile_definitions(USE_SENTENCEPIECE)\n    set(FASTLLM_LINKED_LIBS ${FASTLLM_LINKED_LIBS} sentencepiece)\nendif()\n\nif (USE_CUDA)\n    enable_language(CUDA)\n    add_compile_definitions(USE_CUDA)\n    if (CUDA_NO_TENSOR_CORE)\n        add_compile_definitions(CUDA_NO_TENSOR_CORE)\n    endif()\n    include_directories(include/devices/cuda)\n    #message(${CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES})\n    set(FASTLLM_CUDA_SOURCES src/devices/cuda/cudadevice.cpp src/devices/cuda/cudadevicebatch.cpp src/devices/cuda/fastllm-cuda.cu)\n\n    include_directories(include/devices/multicuda)\n    set(FASTLLM_CUDA_SOURCES ${FASTLLM_CUDA_SOURCES} src/devices/multicuda/multicudadevice.cpp src/devices/multicuda/fastllm-multicuda.cu)\n\n    set(FASTLLM_LINKED_LIBS ${FASTLLM_LINKED_LIBS} cublas)\n    set(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH})\nendif()\n\nif (USE_IVCOREX)\n    set(FASTLLM_LINKED_LIBS ${FASTLLM_LINKED_LIBS} cudart)\n    set(CMAKE_CUDA_ARCHITECTURES ${IVCOREX_ARCH})\nendif()\n\nif (USE_TFACC)\n    #execute_process(\n    #    COMMAND \"./insmodTFDriver.sh\"\n    #    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/thinkforce\"\n    #)\n\n    add_compile_definitions(USE_TFACC)\n    set(FASTLLM_TFACC_SOURCES src/devices/tfacc/tfaccdevice.cpp src/devices/tfacc/fastllm-tfacc.cpp)\n    include_directories(include/devices/tfacc)\nendif()\n\nif (PY_API)\n    if(POLICY CMP0148)\n        cmake_policy(SET CMP0148 NEW)\n    endif()\n    set(PYBIND third_party/pybind11)\n    add_subdirectory(${PYBIND})\n    add_compile_definitions(PY_API)\n    \n    set(Python3_ROOT_DIR \"/usr/local/python3.10.6/bin/\")\n    find_package(Python3 REQUIRED)\n\n    include_directories(third_party/pybind11/include)\n    file(GLOB FASTLLM_CXX_HEADERS include/**/*.h)\n    add_library(pyfastllm MODULE src/pybinding.cpp ${FASTLLM_CXX_SOURCES} ${FASTLLM_CXX_HEADERS} ${FASTLLM_CUDA_SOURCES} ${FASTLLM_TFACC_SOURCES})\n    target_link_libraries(pyfastllm PUBLIC pybind11::module ${FASTLLM_LINKED_LIBS})\n    pybind11_extension(pyfastllm)\nelse()\nadd_library(fastllm OBJECT\n            ${FASTLLM_CXX_SOURCES}\n            ${FASTLLM_CUDA_SOURCES}\n            ${FASTLLM_TFACC_SOURCES}\n            )\ntarget_link_libraries(fastllm PUBLIC ${FASTLLM_LINKED_LIBS})\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main fastllm)\n\nadd_executable(quant tools/src/quant.cpp)\ntarget_link_libraries(quant fastllm)\n\nadd_executable(testOps test/ops/cppOps.cpp)\ntarget_link_libraries(testOps fastllm)\n\nadd_executable(webui example/webui/webui.cpp)\ntarget_link_libraries(webui fastllm)\nadd_custom_command(\n        TARGET webui\n        POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E make_directory web\n        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/example/webui/web ${CMAKE_BINARY_DIR}/web\n)\n\nadd_executable(benchmark example/benchmark/benchmark.cpp)\ntarget_link_libraries(benchmark fastllm)\n\nadd_executable(apiserver example/apiserver/apiserver.cpp)\ntarget_link_libraries(apiserver fastllm)\n\nif (BUILD_CLI)\n    add_executable(FastllmStudio_cli example/FastllmStudio/cli/cli.cpp example/FastllmStudio/cli/ui.cpp)\n    target_link_libraries(FastllmStudio_cli fastllm)\nendif()\n\nadd_library(fastllm_tools SHARED ${FASTLLM_CXX_SOURCES} ${FASTLLM_CUDA_SOURCES} ${FASTLLM_TFACC_SOURCES} tools/src/pytools.cpp)\ntarget_link_libraries(fastllm_tools PUBLIC ${FASTLLM_LINKED_LIBS})\n\nif (${CMAKE_HOST_WIN32})\n    add_custom_command(\n            TARGET fastllm_tools\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory tools\n            COMMAND ${CMAKE_COMMAND} -E make_directory tools/ftllm\n            COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/tools/fastllm_pytools ${CMAKE_BINARY_DIR}/tools/ftllm/.\n            COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/tools/scripts ${CMAKE_BINARY_DIR}/tools/.\n            COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/$(Configuration)/fastllm_tools.dll ${CMAKE_BINARY_DIR}/tools/ftllm/.\n            COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/$(Configuration)/fastllm_tools.dll\n    )\nelse()\n    add_custom_command(\n            TARGET fastllm_tools\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory tools\n            COMMAND ${CMAKE_COMMAND} -E make_directory tools/ftllm\n            COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/tools/fastllm_pytools ${CMAKE_BINARY_DIR}/tools/ftllm/.\n            COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/tools/scripts ${CMAKE_BINARY_DIR}/tools/.\n            COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/libfastllm_tools.* ${CMAKE_BINARY_DIR}/tools/ftllm/.\n            COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/libfastllm_tools.*\n    )\nendif()\n\nendif()\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.77734375,
          "content": "# syntax=docker/dockerfile:1-labs\nFROM nvidia/cuda:12.1.0-devel-ubuntu22.04\n\n# Update Apt repositories\nRUN apt-get update \n\n# Install and configure Python\nRUN apt-get -y --no-install-recommends install wget build-essential python3.10 python3-pip\nRUN update-alternatives --install /usr/bin/python  python /usr/bin/python3.10 1\nRUN pip install setuptools streamlit-chat\n\nENV WORKDIR /fastllm\n\n# Install cmake\nRUN wget -c https://cmake.org/files/LatestRelease/cmake-3.28.3-linux-x86_64.sh && bash ./cmake-3.28.3-linux-x86_64.sh  --skip-license --prefix=/usr/\n\nWORKDIR $WORKDIR\nADD . $WORKDIR/\n\nRUN mkdir $WORKDIR/build && cd build && cmake .. -DUSE_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native && make -j && cd tools && python setup.py install\n\nCMD /fastllm/build/webui -p /models/chatglm2-6b-int8.flm\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.1640625,
          "content": "# fastllm\n\n[English Document](README_EN.md)\n\n## 介绍\n\nfastllm是纯c++实现，无第三方依赖的多平台高性能大模型推理库\n\n部署交流QQ群： 831641348\n\n| [快速开始](#快速开始) | [模型获取](docs/models.md) |\n\n## 功能概述\n\n- 🚀 纯c++实现，便于跨平台移植，可以在安卓上直接编译\n- 🚀 无论ARM平台，X86平台，NVIDIA平台，速度都较快\n- 🚀 支持读取Hugging face原始模型并直接量化\n- 🚀 支持部署Openai api server\n- 🚀 支持多卡部署，支持GPU + CPU混合部署\n- 🚀 支持动态Batch，流式输出\n- 🚀 前后端分离设计，便于支持新的计算设备\n- 🚀 目前支持ChatGLM系列模型，Qwen系列模型，各种LLAMA模型(ALPACA, VICUNA等)，BAICHUAN模型，MOSS模型，MINICPM模型等\n- 🚀 支持Python自定义模型结构\n\n## 快速开始\n\n### 编译\n\n建议使用cmake编译，需要提前安装gcc，g++ (建议9.4以上), make, cmake (建议3.23以上)\n\nGPU编译需要提前安装好CUDA编译环境，建议使用尽可能新的CUDA版本\n\n使用如下命令编译\n\n``` sh\nbash install.sh -DUSE_CUDA=ON -D CMAKE_CUDA_COMPILER=$(which nvcc) # 编译GPU版本\n# bash install.sh -DUSE_CUDA=ON -DCUDA_ARCH=89 -D CMAKE_CUDA_COMPILER=$(which nvcc) # 可以指定CUDA架构，如4090使用89架构\n# bash install.sh # 仅编译CPU版本\n```\n\n其他不同平台的编译可参考文档\n[TFACC平台](docs/tfacc.md)\n\n### 运行demo程序 (python)\n\n假设我们的模型位于\"~/Qwen2-7B-Instruct/\"目录\n\n编译完成后可以使用下列demo:\n\n``` sh\n# openai api server\n# 需要安装依赖: pip install -r requirements-server.txt\n# 这里在8080端口打开了一个模型名为qwen的server\npython3 -m ftllm.server -t 16 -p ~/Qwen2-7B-Instruct/ --port 8080 --model_name qwen\n\n# 使用float16精度的模型对话\npython3 -m ftllm.chat -t 16 -p ~/Qwen2-7B-Instruct/ \n\n# 在线量化为int8模型对话\npython3 -m ftllm.chat -t 16 -p ~/Qwen2-7B-Instruct/ --dtype int8\n\n# webui\n# 需要安装依赖: pip install streamlit-chat\npython3 -m ftllm.webui -t 16 -p ~/Qwen2-7B-Instruct/ --port 8080\n```\n\n以上demo均可使用参数 --help 查看详细参数，详细参数说明可参考 [参数说明](docs/demo_arguments.md)\n\n目前模型的支持情况见: [模型列表](docs/models.md)\n\n一些早期的HuggingFace模型无法直接读取，可以参考 [模型转换](docs/models.md#模型导出convert-offline) 转换fastllm格式的模型\n\n可以自定义模型结构，具体见 [自定义模型](docs/custom.md)\n\n### 运行demo程序 (c++)\n\n```\n# 进入fastllm/build-fastllm目录\n\n# 命令行聊天程序, 支持打字机效果\n./main -p ~/Qwen2-7B-Instruct/ \n\n# 简易webui, 使用流式输出 + 动态batch，可多路并发访问\n./webui -p ~/Qwen2-7B-Instruct/ --port 1234 \n```\n\nWindows下的编译推荐使用Cmake GUI + Visual Studio，在图形化界面中完成。\n\n如编译中存在问题，尤其是Windows下的编译，可参考[FAQ](docs/faq.md)\n\n### python API\n\n``` python\n# 模型创建\nfrom ftllm import llm\nmodel = llm.model(\"~/Qwen2-7B-Instruct/\")\n\n# 生成回复\nprint(model.response(\"你好\"))\n\n# 流式生成回复\nfor response in model.stream_response(\"你好\"):\n    print(response, flush = True, end = \"\")\n```\n\n另外还可以设置cpu线程数等内容，详细API说明见 [ftllm](docs/ftllm.md)\n\n这个包不包含low level api，如果需要使用更深入的功能请参考 [Python绑定API](#Python绑定API)\n\n## 多卡部署\n\n### python命令行调用中使用多卡部署\n\n``` sh\n# 使用参数--device来设置多卡调用\n#--device cuda:1 # 设置单一设备\n#--device \"['cuda:0', 'cuda:1']\" # 将模型平均部署在多个设备上\n#--device \"{'cuda:0': 10, 'cuda:1': 5, 'cpu': 1} # 将模型按不同比例部署在多个设备上\n```\n### ftllm中使用多卡部署\n\n``` python\nfrom ftllm import llm\n# 支持下列三种方式，需要在模型创建之前调用\nllm.set_device_map(\"cuda:0\") # 将模型部署在单一设备上\nllm.set_device_map([\"cuda:0\", \"cuda:1\"]) # 将模型平均部署在多个设备上\nllm.set_device_map({\"cuda:0\" : 10, \"cuda:1\" : 5, \"cpu\": 1}) # 将模型按不同比例部署在多个设备上\n```\n\n### Python绑定API中使用多卡部署\n\n``` python\nimport pyfastllm as llm\n# 支持以下方式，需要在模型创建之前调用\nllm.set_device_map({\"cuda:0\" : 10, \"cuda:1\" : 5, \"cpu\": 1}) # 将模型按不同比例部署在多个设备上\n```\n\n### c++中使用多卡部署\n\n``` cpp\n// 支持以下方式，需要在模型创建之前调用\nfastllm::SetDeviceMap({{\"cuda:0\", 10}, {\"cuda:1\", 5}, {\"cpu\", 1}}); // 将模型按不同比例部署在多个设备上\n```\n\n## Docker 编译运行\ndocker 运行需要本地安装好 NVIDIA Runtime,且修改默认 runtime 为 nvidia\n\n1. 安装 nvidia-container-runtime\n```\nsudo apt-get install nvidia-container-runtime\n```\n\n2. 修改 docker 默认 runtime 为 nvidia\n\n/etc/docker/daemon.json\n```\n{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n  \"runtimes\": {\n      \"nvidia\": {\n          \"path\": \"/usr/bin/nvidia-container-runtime\",\n          \"runtimeArgs\": []\n      }\n   },\n   \"default-runtime\": \"nvidia\" // 有这一行即可\n}\n\n```\n\n3. 下载已经转好的模型到 models 目录下\n```\nmodels\n  chatglm2-6b-fp16.flm\n  chatglm2-6b-int8.flm\n```\n\n4. 编译并启动 webui\n```\nDOCKER_BUILDKIT=0 docker compose up -d --build\n```\n\n## Android上使用\n\n### 编译\n``` sh\n# 在PC上编译需要下载NDK工具\n# 还可以尝试使用手机端编译，在termux中可以使用cmake和gcc（不需要使用NDK）\nmkdir build-android\ncd build-android\nexport NDK=<your_ndk_directory>\n# 如果手机不支持，那么去掉 \"-DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod\" （比较新的手机都是支持的）\ncmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod ..\nmake -j\n```\n\n### 运行\n\n1. 在Android设备上安装termux软件\n2. 在termux中执行termux-setup-storage获得读取手机文件的权限。\n3. 将NDK编译出的main文件，以及模型文件存入手机，并拷贝到termux的根目录\n4. 使用命令```chmod 777 main```赋权\n5. 然后可以运行main文件，参数格式参见```./main --help```\n\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 6.9228515625,
          "content": "# fastllm\n\n## Introduction\n\nfastllm is a high-performance large model inference library implemented purely in C++ with no third-party dependencies, supporting multiple platforms.\n\nDeployment and communication QQ group: 831641348\n\n| [Quick Start](#quick-start) | [Model Acquisition](#model-acquisition) |\n\n## Features Overview\n\n- 🚀 Pure C++ implementation, facilitating cross-platform移植, directly compilable on Android\n- 🚀 Supports reading Hugging Face raw models and direct quantization\n- 🚀 Supports deploying OpenAI API server\n- 🚀 Supports multi-card deployment, supports GPU + CPU hybrid deployment\n- 🚀 Supports dynamic batching, streaming output\n- 🚀 Front-end and back-end separation design, easy to support new computing devices\n- 🚀 Currently supports ChatGLM series models, Qwen2 series models, various LLAMA models (ALPACA, VICUNA, etc.), BAICHUAN models, MOSS models, MINICPM models, etc.\n\n## Quick Start\n\n### Compilation\n\nIt is recommended to use cmake for compilation, requiring pre-installed gcc, g++ (recommended 9.4 or above), make, cmake (recommended 3.23 or above).\n\nGPU compilation requires a pre-installed CUDA compilation environment, using the latest CUDA version is recommended.\n\nCompile using the following commands:\n\n``` sh\nbash install.sh -DUSE_CUDA=ON -D CMAKE_CUDA_COMPILER=$(which nvcc) # Compile GPU version\n# bash install.sh -DUSE_CUDA=ON -DCUDA_ARCH=89 -D CMAKE_CUDA_COMPILER=$(which nvcc) # Specify CUDA architecture, e.g., 4090 uses architecture 89\n# bash install.sh # Compile CPU version only\n```\n\nFor compilation on other platforms, refer to the documentation:\n[TFACC Platform](docs/tfacc.md)\n\n### Running the demo program (python)\n\nAssuming our model is located in the \"~/Qwen2-7B-Instruct/\" directory:\n\nAfter compilation, you can use the following demos:\n\n``` sh\n# OpenAI API server (currently in testing and tuning phase)\n# Requires dependencies: pip install -r requirements-server.txt\n# Opens a server named 'qwen' on port 8080\npython3 -m ftllm.server -t 16 -p ~/Qwen2-7B-Instruct/ --port 8080 --model_name qwen\n\n# Use a model with float16 precision for conversation\npython3 -m ftllm.chat -t 16 -p ~/Qwen2-7B-Instruct/ \n\n# Online quantization to int8 model for conversation\npython3 -m ftllm.chat -t 16 -p ~/Qwen2-7B-Instruct/ --dtype int8\n\n# webui\n# Requires dependencies: pip install streamlit-chat\npython3 -m ftllm.webui -t 16 -p ~/Qwen2-7B-Instruct/ --port 8080\n```\n\nDetailed parameters can be viewed using the --help argument for all demos.\n\nFor detailed parameter explanations, please refer to [Parameter Documentation](docs/english_demo_arguments.md).\n\nCurrent model support can be found at: [Model List](docs/models.md)\n\nFor architectures that cannot directly read Hugging Face models, refer to [Model Conversion Documentation](docs/convert_model.md) to convert models to fastllm format.\n\nIf you need to customize the model structure, you can refer to the detailed instructions [Custom Model](docs/english_custom.md)\n\n### Running the demo program (c++)\n\n```\n# Enter the fastllm/build-fastllm directory\n\n# Command line chat program, supports typewriter effect (Linux only)\n./main -p ~/Qwen2-7B-Instruct/\n\n# Simple webui, uses streaming output + dynamic batch, supports concurrent access\n./webui -p ~/Qwen2-7B-Instruct/ --port 1234 \n```\n\nCompilation on Windows is recommended using Cmake GUI + Visual Studio, completed in the graphical interface.\n\nFor compilation issues, especially on Windows, refer to [FAQ](docs/faq.md).\n\n### Python API\n\n``` python\n# Model creation\nfrom ftllm import llm\nmodel = llm.model(\"~/Qwen2-7B-Instruct/\")\n\n# Generate response\nprint(model.response(\"你好\"))\n\n# Stream generate response\nfor response in model.stream_response(\"你好\"):\n    print(response, flush = True, end = \"\")\n```\n\nAdditional settings such as CPU thread count can be found in the detailed API documentation: [ftllm](docs/ftllm.md)\n\nThis package does not include low-level APIs. For deeper functionalities, refer to [Python Binding API](#Python-binding-API).\n\n## Multi-Card Deployment\n\n### Using Multi-Card Deployment in Python Command Line Calls\n\n``` sh\n# Use the --device parameter to set multi-card calls\n#--device cuda:1 # Set single device\n#--device \"['cuda:0', 'cuda:1']\" # Deploy model evenly across multiple devices\n#--device \"{'cuda:0': 10, 'cuda:1': 5, 'cpu': 1} # Deploy model proportionally across multiple devices\n```\n\n### Using Multi-Card Deployment in ftllm\n\n``` python\nfrom ftllm import llm\n# Supports the following three methods, must be called before model creation\nllm.set_device_map(\"cuda:0\") # Deploy model on a single device\nllm.set_device_map([\"cuda:0\", \"cuda:1\"]) # Deploy model evenly across multiple devices\nllm.set_device_map({\"cuda:0\" : 10, \"cuda:1\" : 5, \"cpu\": 1}) # Deploy model proportionally across multiple devices\n```\n\n### Using Multi-Card Deployment in Python Binding API\n\n``` python\nimport pyfastllm as llm\n# Supports the following method, must be called before model creation\nllm.set_device_map({\"cuda:0\" : 10, \"cuda:1\" : 5, \"cpu\": 1}) # Deploy model proportionally across multiple devices\n```\n\n### Using Multi-Card Deployment in c++\n\n``` cpp\n// Supports the following method, must be called before model creation\nfastllm::SetDeviceMap({{\"cuda:0\", 10}, {\"cuda:1\", 5}, {\"cpu\", 1}}); // Deploy model proportionally across multiple devices\n```\n\n## Docker Compilation and Running\nRunning docker requires the local installation of NVIDIA Runtime and modification of the default runtime to nvidia.\n\n1. Install nvidia-container-runtime\n```\nsudo apt-get install nvidia-container-runtime\n```\n\n2. Modify docker default runtime to nvidia\n\n/etc/docker/daemon.json\n```\n{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n  \"runtimes\": {\n      \"nvidia\": {\n          \"path\": \"/usr/bin/nvidia-container-runtime\",\n          \"runtimeArgs\": []\n      }\n   },\n   \"default-runtime\": \"nvidia\" // This line is required\n}\n\n```\n\n3. Download the converted models to the models directory\n```\nmodels\n  chatglm2-6b-fp16.flm\n  chatglm2-6b-int8.flm\n```\n\n4. Compile and start webui\n```\nDOCKER_BUILDKIT=0 docker compose up -d --build\n```\n\n## Usage on Android\n\n### Compilation\n``` sh\n# Compilation on PC requires downloading NDK tools\n# You can also try compiling on the phone, using cmake and gcc in termux (no need for NDK)\nmkdir build-android\ncd build-android\nexport NDK=<your_ndk_directory>\n# If the phone does not support, remove \"-DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod\" (most new phones support this)\ncmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_CXX_FLAGS=-march=armv8.2a+dotprod ..\nmake -j\n```\n\n### Running\n\n1. Install the termux app on the Android device.\n2. Execute termux-setup-storage in termux to gain permission to read phone files.\n3. Copy the main file and model file compiled with NDK into the phone and into the termux root directory.\n4. Use the command ```chmod 777 main``` to grant permissions.\n5. Run the main file, refer to ```./main --help``` for parameter format."
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.37890625,
          "content": "version: '3.8'\nservices:\n  fastllm:\n    build:\n      context: .\n      args:\n        DOCKER_BUILDKIT: 0\n        # privileged: true\n      platforms:\n        - \"linux/amd64\"\n      tags:\n        - \"fastllm:v0.9\"\n    restart: always\n    ports:\n      - 11234:8081\n    volumes:\n      - ./models/:/models/\n    command: /fastllm/build/webui -p /models/chatglm2-6b-int8.flm -w ./example/webui/web\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.30078125,
          "content": "#!/bin/bash\nfolder=\"build-fastllm\"\n\n# 创建工作文件夹\nif [ ! -d \"$folder\" ]; then\n    mkdir \"$folder\"\nfi\n\ncd $folder\ncmake .. \"$@\"\nmake -j$(nproc)\n\n#编译失败停止执行\nif [ $? != 0 ]; then\n    exit -1\nfi\n\ncd tools\npython3 setup.py sdist build\npython3 setup.py bdist_wheel\npython3 setup.py install"
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 6.37109375,
          "content": "#include \"model.h\"\n#ifdef _WIN32\n#include <stdlib.h>\n#endif\n\nstd::map <std::string, fastllm::DataType> dataTypeDict = {\n    {\"float32\", fastllm::DataType::FLOAT32},\n    {\"half\", fastllm::DataType::FLOAT16},\n    {\"float16\", fastllm::DataType::FLOAT16},\n    {\"int8\", fastllm::DataType::INT8},\n    {\"int4\", fastllm::DataType::INT4_NOZERO},\n    {\"int4z\", fastllm::DataType::INT4},\n    {\"int4g\", fastllm::DataType::INT4_GROUP}\n};\n\nstruct RunConfig {\n    std::string path = \"chatglm-6b-int4.bin\"; // 模型文件路径\n    std::string systemPrompt = \"\";\n    std::set <std::string> eosToken;\n    int threads = 4; // 使用的线程数\n    bool lowMemMode = false; // 是否使用低内存模式\n\n    fastllm::DataType dtype = fastllm::DataType::FLOAT16;\n    fastllm::DataType atype = fastllm::DataType::FLOAT32;\n    int groupCnt = -1;\n};\n\nvoid Usage() {\n    std::cout << \"Usage:\" << std::endl;\n    std::cout << \"[-h|--help]:                  显示帮助\" << std::endl;\n    std::cout << \"<-p|--path> <args>:           模型文件的路径\" << std::endl;\n    std::cout << \"<-t|--threads> <args>:        使用的线程数量\" << std::endl;\n    std::cout << \"<-l|--low>:                   使用低内存模式\" << std::endl;\n    std::cout << \"<--system> <args>:            设置系统提示词(system prompt)\" << std::endl;\n    std::cout << \"<--eos_token> <args>:         设置eos token\" << std::endl;\n    std::cout << \"<--dtype> <args>:             设置权重类型(读取hf文件时生效)\" << std::endl;\n    std::cout << \"<--atype> <args>:             设置推理使用的数据类型(float32/float16)\" << std::endl;\n    std::cout << \"<--top_p> <args>:             采样参数top_p\" << std::endl;\n    std::cout << \"<--top_k> <args>:             采样参数top_k\" << std::endl;\n    std::cout << \"<--temperature> <args>:       采样参数温度，越高结果越不固定\" << std::endl;\n    std::cout << \"<--repeat_penalty> <args>:    采样参数重复惩罚\" << std::endl;\n}\n\nvoid ParseArgs(int argc, char **argv, RunConfig &config, fastllm::GenerationConfig &generationConfig) {\n    std::vector <std::string> sargv;\n    for (int i = 0; i < argc; i++) {\n        sargv.push_back(std::string(argv[i]));\n    }\n    for (int i = 1; i < argc; i++) {\n        if (sargv[i] == \"-h\" || sargv[i] == \"--help\") {\n            Usage();\n            exit(0);\n        } else if (sargv[i] == \"-p\" || sargv[i] == \"--path\") {\n            config.path = sargv[++i];\n        } else if (sargv[i] == \"-t\" || sargv[i] == \"--threads\") {\n            config.threads = atoi(sargv[++i].c_str());\n        } else if (sargv[i] == \"-l\" || sargv[i] == \"--low\") {\n            config.lowMemMode = true;\n        } else if (sargv[i] == \"-m\" || sargv[i] == \"--model\") {\n            i++;\n        } else if (sargv[i] == \"--top_p\") {\n            generationConfig.top_p = atof(sargv[++i].c_str());\n        } else if (sargv[i] == \"--top_k\") {\n            generationConfig.top_k = atof(sargv[++i].c_str());\n        } else if (sargv[i] == \"--temperature\") {\n            generationConfig.temperature = atof(sargv[++i].c_str());\n        } else if (sargv[i] == \"--repeat_penalty\") {\n            generationConfig.repeat_penalty = atof(sargv[++i].c_str());\n        } else if (sargv[i] == \"--system\") {\n            config.systemPrompt = sargv[++i];\n        } else if (sargv[i] == \"--eos_token\") {\n            config.eosToken.insert(sargv[++i]);\n        } else if (sargv[i] == \"--dtype\") {\n            std::string dtypeStr = sargv[++i];\n            if (dtypeStr.size() > 5 && dtypeStr.substr(0, 5) == \"int4g\") {\n                config.groupCnt = atoi(dtypeStr.substr(5).c_str());\n                dtypeStr = dtypeStr.substr(0, 5);\n            }\n            fastllm::AssertInFastLLM(dataTypeDict.find(dtypeStr) != dataTypeDict.end(),\n                                    \"Unsupport data type: \" + dtypeStr);\n            config.dtype = dataTypeDict[dtypeStr];\n        } else if (sargv[i] == \"--atype\") {\n            std::string atypeStr = sargv[++i];\n            fastllm::AssertInFastLLM(dataTypeDict.find(atypeStr) != dataTypeDict.end(),\n                                    \"Unsupport act type: \" + atypeStr);\n            config.atype = dataTypeDict[atypeStr];\n        } else {\n            Usage();\n            exit(-1);\n        }\n    }\n}\n\nint main(int argc, char **argv) {\n#ifdef _WIN32\n    system(\"chcp 65001\");\n#endif\n    RunConfig config;\n    fastllm::GenerationConfig generationConfig;\n    ParseArgs(argc, argv, config, generationConfig);\n\n    fastllm::PrintInstructionInfo();\n    fastllm::SetThreads(config.threads);\n    fastllm::SetLowMemMode(config.lowMemMode);\n    if (!fastllm::FileExists(config.path)) {\n        printf(u8\"模型文件 %s 不存在！\\n\", config.path.c_str());\n        exit(0);\n    }\n    bool isHFDir = fastllm::FileExists(config.path + \"/config.json\") || fastllm::FileExists(config.path + \"config.json\");\n    auto model = !isHFDir ? fastllm::CreateLLMModelFromFile(config.path) : fastllm::CreateLLMModelFromHF(config.path, config.dtype, config.groupCnt);\n    if (config.atype != fastllm::DataType::FLOAT32) {\n        model->SetDataType(config.atype);\n    }\n    model->SetSaveHistoryChat(true);\n    \n    for (auto &it : config.eosToken) {\n        generationConfig.stop_token_ids.insert(model->weight.tokenizer.GetTokenId(it));\n    }\n    std::string systemConfig = config.systemPrompt;\n    fastllm::ChatMessages messages = {{\"system\", systemConfig}};\n\n    static std::string modelType = model->model_type;\n    printf(u8\"欢迎使用 %s 模型. 输入内容对话，reset清空历史记录，stop退出程序.\\n\", model->model_type.c_str());\n\n    while (true) {\n        printf(u8\"用户: \");\n        std::string input;\n        std::getline(std::cin, input);\n        if (input == \"reset\") {\n            messages = {{\"system\", config.systemPrompt}};\n            continue;\n        }\n        if (input == \"stop\") {\n            break;\n        }\n        messages.push_back(std::make_pair(\"user\", input));\n        std::string ret = model->Response(model->ApplyChatTemplate(messages), [](int index, const char* content) {\n            if (index == 0) {\n                printf(\"%s:%s\", modelType.c_str(), content);\n                fflush(stdout);\n            }\n            if (index > 0) {\n                printf(\"%s\", content);\n                fflush(stdout);\n            }\n            if (index == -1) {\n                printf(\"\\n\");\n            }\n        }, generationConfig);\n        messages.push_back(std::make_pair(\"assistant\", ret));\n    }\n\n    return 0;\n}"
        },
        {
          "name": "pyfastllm",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-server.txt",
          "type": "blob",
          "size": 0.0400390625,
          "content": "fastapi\npydantic\nopenai\nshortuuid\nunicorn"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}