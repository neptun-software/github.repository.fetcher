{
  "metadata": {
    "timestamp": 1736565926160,
    "page": 897,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sogou/srpc",
      "stars": 1982,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "./third_party/snappy/third_party/benchmark\n./third_party/snappy/third_party/googletest\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.091796875,
          "content": "# top-most EditorConfig file\nroot = true\n \n# all files\n[*]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3466796875,
          "content": "*.a\n*.bak\n*.gz\n*.zip\n*.tar\n*.la\n*.lo\n*.o\n*.rpm\n*.so\n*.so.*\n*.cmake\n*.vcxproj\n*.filters\n*.sln\n*.pb.h\n*.pb.cc\n*.log\n*.srpc.h\n*.thrift.h\n*.pb_skeleton.h\n*.pb_skeleton.cc\n*.thrift_skeleton.h\n*.thrift_skeleton.cc\n\n_bin/\n_include/\n_lib/\n.deps/\nbuild/\nbuild_pkg/\nCMakeFiles/\nDebug/\nRelease/\n\nmissing\nSRCINFO\nSRCNUMVER\nSRCVERSION\nCMakeCache.txt\nMakefile\n\nbazel-*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.298828125,
          "content": "[submodule \"workflow\"]\n\tpath = workflow\n\turl = https://github.com/sogou/workflow.git\n[submodule \"third_party/snappy\"]\n\tpath = third_party/snappy\n\turl = https://github.com/google/snappy\n\tbranch = 1.1.9\n[submodule \"third_party/lz4\"]\n\tpath = third_party/lz4\n\turl = https://github.com/lz4/lz4\n\tbranch = v1.9.3\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 7.1513671875,
          "content": "load(\"@rules_cc//cc:defs.bzl\", \"cc_proto_library\")\nload(\"@rules_proto//proto:defs.bzl\", \"proto_library\")\nload(\":srpc.bzl\", \"srpc_cc_library\")\n\nproto_library(\n    name = \"message_proto\",\n    srcs = [\n        \"src/message/rpc_meta.proto\",\n        \"src/message/rpc_meta_brpc.proto\",\n        \"src/message/rpc_meta_trpc.proto\",\n    ],\n    strip_import_prefix = \"src/message\",\n)\n\ncc_proto_library(\n    name = \"MessageProto\",\n    deps = [\":message_proto\"],\n)\n\nproto_library(\n    name = \"module_proto\",\n    srcs = [\n        \"src/module/proto/opentelemetry_common.proto\",\n        \"src/module/proto/opentelemetry_resource.proto\",\n        \"src/module/proto/opentelemetry_trace.proto\",\n        \"src/module/proto/opentelemetry_metrics.proto\",\n        \"src/module/proto/opentelemetry_metrics_service.proto\",\n    ],\n    strip_import_prefix = \"src/module/proto\",\n)\n\ncc_proto_library(\n    name = \"ModuleProto\",\n    deps = [\":module_proto\"],\n)\n\ncc_library(\n    name = \"srpc_hdrs\",\n    hdrs = glob([\"src/include/srpc/*\"]),\n    includes = [\"src/include\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"@workflow//:workflow_hdrs\",\n    ],\n)\n\ncc_library(\n    name = \"srpc\",\n    srcs = glob([\"src/**/*.cc\"]),\n    hdrs = glob([\n        \"src/**/*.h\",\n        \"src/**/*.inl\",\n    ]),\n    includes = [\n        \"src\",\n        \"src/compress\",\n        \"src/message\",\n        \"src/module\",\n        \"src/thrift\",\n        \"src/var\",\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":MessageProto\",\n        \":ModuleProto\",\n        \"@lz4\",\n        \"@snappy\",\n        \"@workflow//:http\",\n        \"@workflow//:redis\",\n        \"@workflow//:upstream\",\n    ],\n)\n\ncc_library(\n    name = \"srpc_generator_lib\",\n    srcs = glob(\n        [\n            \"src/generator/*.cc\",\n        ],\n        exclude = [\n            \"src/compiler.cc\",\n        ],\n    ),\n    hdrs = glob([\n        \"src/generator/*.h\",\n    ]),\n    includes = [\"src/generator\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":srpc\",\n    ],\n)\n\ncc_binary(\n    name = \"srpc_generator\",\n    srcs = [\"src/generator/compiler.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":srpc\",\n        \":srpc_generator_lib\",\n    ],\n)\n\nproto_library(\n    name = \"echo_pb_proto\",\n    srcs = [\n        \"tutorial/echo_pb.proto\",\n    ],\n    strip_import_prefix = \"tutorial\",\n)\n\ncc_proto_library(\n    name = \"EchoProto\",\n    deps = [\":echo_pb_proto\"],\n)\n\nsrpc_cc_library(\n    name = \"echo_pb_srpc\",\n    srcs = [\"tutorial/echo_pb.proto\"],\n    deps = [\":EchoProto\"],\n)\n\ncc_binary(\n    name = \"srpc_pb_server\",\n    srcs = [\"tutorial/tutorial-01-srpc_pb_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"srpc_pb_client\",\n    srcs = [\"tutorial/tutorial-02-srpc_pb_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\nsrpc_cc_library(\n    name = \"echo_thrift_srpc\",\n    srcs = [\"tutorial/echo_thrift.thrift\"],\n    type = \"thrift\",\n)\n\ncc_binary(\n    name = \"srpc_thrift_server\",\n    srcs = [\"tutorial/tutorial-03-srpc_thrift_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_thrift_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"srpc_thrift_client\",\n    srcs = [\"tutorial/tutorial-04-srpc_thrift_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_thrift_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"brpc_pb_server\",\n    srcs = [\"tutorial/tutorial-05-brpc_pb_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"brpc_pb_client\",\n    srcs = [\"tutorial/tutorial-06-brpc_pb_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"thrift_thrift_server\",\n    srcs = [\"tutorial/tutorial-07-thrift_thrift_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_thrift_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"thrift_thrift_client\",\n    srcs = [\"tutorial/tutorial-08-thrift_thrift_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_thrift_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"client_task\",\n    srcs = [\"tutorial/tutorial-09-client_task.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"server_async\",\n    srcs = [\"tutorial/tutorial-10-server_async.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\nproto_library(\n    name = \"helloworld_proto\",\n    srcs = [\n        \"tutorial/helloworld.proto\",\n    ],\n    strip_import_prefix = \"tutorial\",\n)\n\ncc_proto_library(\n    name = \"HelloworldProto\",\n    deps = [\":helloworld_proto\"],\n)\n\nsrpc_cc_library(\n    name = \"helloworld_pb_srpc\",\n    srcs = [\"tutorial/helloworld.proto\"],\n    deps = [\":HelloworldProto\"],\n)\n\ncc_binary(\n    name = \"trpc_pb_server\",\n    srcs = [\"tutorial/tutorial-11-trpc_pb_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":helloworld_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"trpc_pb_client\",\n    srcs = [\"tutorial/tutorial-12-trpc_pb_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":helloworld_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"trpc_http_server\",\n    srcs = [\"tutorial/tutorial-13-trpc_http_server.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":helloworld_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"trpc_http_client\",\n    srcs = [\"tutorial/tutorial-14-trpc_http_client.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":helloworld_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"srpc_pb_proxy\",\n    srcs = [\"tutorial/tutorial-15-srpc_pb_proxy.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n\ncc_binary(\n    name = \"server_with_metrics\",\n    srcs = [\"tutorial/tutorial-16-server_with_metrics.cc\"],\n    linkopts = [\n        \"-lpthread\",\n        \"-lssl\",\n        \"-lcrypto\",\n    ],\n    deps = [\n        \":echo_pb_srpc\",\n        \":srpc\",\n        \":srpc_hdrs\",\n    ],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.6318359375,
          "content": "cmake_minimum_required(VERSION 3.6)\nset(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"build type\")\nset(CMAKE_SKIP_RPATH TRUE)\n\nproject(srpc\n\tVERSION 0.10.3\n\tLANGUAGES C CXX)\n\t\n###Options\n\nif (WIN32)\n\toption(SRPC_BUILD_STATIC_RUNTIME \"Use static runtime\" ON)\nendif ()\n\n#### CHECK\n\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\n\nset(THIRD_PARTY_FATAL_MESSAGE\n\" is neither installed nor found in third_party!\nSugguestion to initial third_party:\n\t\\\"git submodule update --init\\\"\"\n)\n\nfind_library(LZ4_LIBRARY NAMES lz4)\ncheck_include_file(\"lz4.h\" LZ4_INSTALLED)\nif (NOT LZ4_INSTALLED AND ${LZ4_LIBRARY} STREQUAL \"LZ4_LIBRARY-NOTFOUND\")\n\tif (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/lz4/lib/lz4.h\")\n\t\tmessage( FATAL_ERROR \"\\nLz4\" ${THIRD_PARTY_FATAL_MESSAGE} )\n\tendif ()\nelse ()\n\tif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/lz4/lib/lz4.h\")\n\t\tmessage(\"Lz4 third_party FOUND. Use for source code dependencies.\")\n\t\tset(LZ4_INSTALLED 0 CACHE INTERNAL \"check_lz4_installed\")\n\telse ()\n\t\tfind_path(LZ4_INCLUDE_DIR NAMES \"lz4.h\")\n\t\tinclude_directories(${LZ4_INCLUDE_DIR})\n\t\tset(LZ4_INSTALLED 1 CACHE INTERNAL \"check_lz4_installed\")\n\tendif ()\nendif ()\n\nfind_package(Snappy)\ncheck_include_file_cxx(\"snappy.h\" SNAPPY_INSTALLED)\nif (NOT SNAPPY_INSTALLED AND NOT ${Snappy_FOUND})\n\tif (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/snappy/cmake\")\n\t\tmessage( FATAL_ERROR \"\\nSnappy\" ${THIRD_PARTY_FATAL_MESSAGE} )\n\tendif ()\nelse ()\n\tif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/snappy/cmake\")\n\t\tmessage(\"Snappy third_party FOUND. Use for source code dependencies.\")\n\t\tset(SNAPPY_INSTALLED 0 CACHE INTERNAL \"check_snappy_installed\")\n\telse ()\n\t\tfind_path(Snappy_INCLUDE_DIR NAMES \"snappy.h\")\n\t\tinclude_directories(${Snappy_INCLUDE_DIR})\n\t\tset(SNAPPY_INSTALLED 1 CACHE INTERNAL \"check_snappy_installed\")\n\tendif ()\nendif ()\n\ncheck_include_file_cxx(\"workflow/Workflow.h\" WORKFLOW_INSTALLED)\nif (NOT WORKFLOW_INSTALLED)\n\tif (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/workflow/workflow-config.cmake.in\")\n\t\tmessage( FATAL_ERROR \"\\nWorkflow\" ${THIRD_PARTY_FATAL_MESSAGE} )\n\tendif ()\nelse ()\n\tif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/workflow/workflow-config.cmake.in\")\n\t\tmessage(\"Workflow third_party FOUND. Use for source code dependencies.\")\n\t\tset(WORKFLOW_INSTALLED 0)\n\tendif ()\nendif ()\n\nfind_program(PROTOC \"protoc\")\nif(${PROTOC} STREQUAL \"PROTOC-NOTFOUND\")\n    message( FATAL_ERROR \"Protobuf compiler is missing!\")\nendif()\n\n#### PREPARE\n\nset(INC_DIR ${PROJECT_SOURCE_DIR}/_include CACHE PATH \"srpc inc\")\nset(LIB_DIR ${PROJECT_SOURCE_DIR}/_lib CACHE PATH \"srpc lib\")\nset(BIN_DIR ${PROJECT_SOURCE_DIR}/_bin CACHE PATH \"srpc bin\")\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_CONFIG_INSTALL_FILE ${PROJECT_BINARY_DIR}/config.toinstall.cmake)\nset(CMAKE_CONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIB_DIR})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LIB_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_DIR})\n\nadd_custom_target(\n\tLINK_HEADERS ALL\n\tCOMMENT \"link headers...\"\n)\n\nINCLUDE(CMakeLists_Headers.txt)\n\nmacro(makeLink src dest target)\n\tadd_custom_command(\n\t\tTARGET ${target} PRE_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different ${src} ${dest}\n\t\tDEPENDS ${dest}\n\t)\nendmacro()\n\nadd_custom_command(\n\tTARGET LINK_HEADERS PRE_BUILD\n\tCOMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DIR}/${PROJECT_NAME}\n)\n\nforeach(header_file ${INCLUDE_HEADERS})\n\tstring(REPLACE \"/\" \";\" arr ${header_file})\n\tlist(GET arr -1 file_name)\n\tmakeLink(${PROJECT_SOURCE_DIR}/${header_file} ${INC_DIR}/${PROJECT_NAME}/${file_name} LINK_HEADERS)\nendforeach()\n\nif (WIN32)\n\tif (SRPC_BUILD_STATIC_RUNTIME)\n\t\tset(CompilerFlags\n\t\t\t\tCMAKE_CXX_FLAGS\n\t\t\t\tCMAKE_CXX_FLAGS_DEBUG\n\t\t\t\tCMAKE_CXX_FLAGS_RELEASE\n\t\t\t\tCMAKE_CXX_FLAGS_MINSIZEREL\n\t\t\t\tCMAKE_C_FLAGS\n\t\t\t\tCMAKE_C_FLAGS_DEBUG\n\t\t\t\tCMAKE_C_FLAGS_RELEASE\n\t\t\t\tCMAKE_C_FLAGS_MINSIZEREL\n\t\t\t\t)\n\t\tforeach(CompilerFlag ${CompilerFlags})\n\t\t\tstring(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n\t\tendforeach ()\n\tendif ()\nendif ()\n\nadd_subdirectory(src)\n\n#### CONFIG\n\ninclude(CMakePackageConfigHelpers)\nset(CONFIG_INC_DIR ${INC_DIR})\nset(CONFIG_LIB_DIR ${LIB_DIR})\n\nif (VCPKG_TOOLCHAIN AND EXISTS \"${CMAKE_INSTALL_PREFIX}/tools/srpc\")\n\tset(CONFIG_BIN_DIR ${CMAKE_INSTALL_PREFIX}/tools/srpc)\n\tset(WITH_VCPKG_TOOLCHAIN 1 CACHE INTERNAL \"build_with_vcpkg_toolchain\")\n\tmessage(\"Install with VCPKG toolchain. Dir ${CMAKE_INSTALL_PREFIX}/tools/srpc.\")\nelse()\n\tset(CONFIG_BIN_DIR ${BIN_DIR})\n\tset(WITH_VCPKG_TOOLCHAIN 0 CACHE INTERNAL \"build_with_vcpkg_toolchain\")\nendif()\n\nconfigure_package_config_file(\n\t${PROJECT_NAME}-config.cmake.in\n\t${PROJECT_SOURCE_DIR}/${PROJECT_NAME}-config.cmake\n\tINSTALL_DESTINATION ${CMAKE_CONFIG_INSTALL_DIR}\n\tPATH_VARS CONFIG_INC_DIR CONFIG_LIB_DIR CONFIG_BIN_DIR\n)\n\nset(CONFIG_INC_DIR ${CMAKE_INSTALL_INCLUDEDIR})\nset(CONFIG_LIB_DIR ${CMAKE_INSTALL_LIBDIR})\nset(CONFIG_BIN_DIR ${CMAKE_INSTALL_BINDIR})\nconfigure_package_config_file(\n\t${PROJECT_NAME}-config.cmake.in\n\t${CMAKE_CONFIG_INSTALL_FILE}\n\tINSTALL_DESTINATION ${CMAKE_CONFIG_INSTALL_DIR}\n\tPATH_VARS CONFIG_INC_DIR CONFIG_LIB_DIR CONFIG_BIN_DIR\n)\n\nwrite_basic_package_version_file(\n\t${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\n\tVERSION ${WORKFLOW_VERSION}\n\tCOMPATIBILITY AnyNewerVersion\n)\n\ninstall(\n\tFILES ${CMAKE_CONFIG_INSTALL_FILE}\n\tDESTINATION ${CMAKE_CONFIG_INSTALL_DIR}\n\tCOMPONENT devel\n\tRENAME ${PROJECT_NAME}-config.cmake\n)\n\ninstall(\n\tFILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\n\tDESTINATION ${CMAKE_CONFIG_INSTALL_DIR}\n\tCOMPONENT devel\n)\n\ninstall(\n\tFILES ${INCLUDE_HEADERS}\n\tDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n\tCOMPONENT devel\n)\n\ninstall(\n\tFILES README.md\n\tDESTINATION \"${CMAKE_INSTALL_DOCDIR}-${PROJECT_VERSION}\"\n\tCOMPONENT devel\n)\n"
        },
        {
          "name": "CMakeLists_Headers.txt",
          "type": "blob",
          "size": 1.494140625,
          "content": "cmake_minimum_required(VERSION 3.6)\n\nset(SRC_HEADERS\n\tsrc/compress/rpc_compress.h\n\tsrc/compress/rpc_compress_gzip.h\n\tsrc/message/rpc_message.h\n\tsrc/message/rpc_message_srpc.h\n\tsrc/message/rpc_message_thrift.h\n\tsrc/message/rpc_message_brpc.h\n\tsrc/message/rpc_message_trpc.h\n\tsrc/thrift/rpc_thrift_buffer.h\n\tsrc/thrift/rpc_thrift_enum.h\n\tsrc/thrift/rpc_thrift_idl.h\n\tsrc/thrift/rpc_thrift_idl.inl\n\tsrc/var/ckms_quantiles.h\n\tsrc/var/time_window_quantiles.h\n\tsrc/var/rpc_var.h\n\tsrc/module/rpc_module.h\n\tsrc/module/rpc_trace_module.h\n\tsrc/module/rpc_metrics_module.h\n\tsrc/module/rpc_filter.h\n\tsrc/module/rpc_trace_filter.h\n\tsrc/module/rpc_metrics_filter.h\n\tsrc/rpc_basic.h\n\tsrc/rpc_buffer.h\n\tsrc/rpc_client.h\n\tsrc/rpc_context.h\n\tsrc/rpc_context.inl\n\tsrc/rpc_global.h\n\tsrc/rpc_options.h\n\tsrc/rpc_server.h\n\tsrc/rpc_service.h\n\tsrc/rpc_task.inl\n\tsrc/rpc_types.h\n\tsrc/rpc_zero_copy_stream.h\n\tsrc/rpc_define.h\n)\n\nif (NOT WIN32)\n\tset(SRC_HEADERS\n\t\t${SRC_HEADERS}\n\t\tsrc/http/http_task.h\n\t\tsrc/http/http_module.h\n\t\tsrc/http/http_client.h\n\t\tsrc/http/http_server.h\n\t)\nendif ()\n\nif (NOT SNAPPY_INSTALLED)\n\tset(SNAPPY_HEADERS\n\t\tthird_party/snappy/snappy.h\n\t\tthird_party/snappy/snappy-c.h\n\t\tthird_party/snappy/snappy-sinksource.h\n\t\tthird_party/snappy/snappy-stubs-public.h\n\t)\nendif ()\n\nif (NOT LZ4_INSTALLED)\n\tset(LZ4_HEADERS\n\t\tthird_party/lz4/lib/lz4.h\n\t\tthird_party/lz4/lib/lz4frame.h\n\t)\nendif ()\n\nif (WITH_VCPKG_TOOLCHAIN)\n\tset(INCLUDE_HEADERS ${SRC_HEADERS})\nelse()\n\tset(INCLUDE_HEADERS ${SRC_HEADERS} ${SNAPPY_HEADERS} ${LZ4_HEADERS})\nendif()\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1708984375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others’ private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at liyingxin@sogou-inc.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 1.6669921875,
          "content": "ROOT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\nALL_TARGETS := all base check install preinstall package rpm clean tutorial example\nMAKE_FILE := Makefile\n\nDEFAULT_BUILD_DIR := build.cmake\nBUILD_DIR := $(shell if [ -f $(MAKE_FILE) ]; then echo \".\"; else echo $(DEFAULT_BUILD_DIR); fi)\nCMAKE3 := $(shell if which cmake3>/dev/null ; then echo cmake3; else echo cmake; fi;)\nWORKFLOW := $(shell if [ -f \"workflow/workflow-config.cmake.in\" ]; then echo \"Found\"; else echo \"NotFound\"; fi)\n\n.PHONY: $(ALL_TARGETS)\n\nall: base\n\tmake -C $(BUILD_DIR) -f Makefile\n\nbase:\n\nifeq (\"$(WORKFLOW)\",\"Found\")\n\tmake -C workflow\nendif\n\n\tmkdir -p $(BUILD_DIR)\n\nifeq ($(DEBUG),y)\n\tcd $(BUILD_DIR) && $(CMAKE3) -D CMAKE_BUILD_TYPE=Debug $(ROOT_DIR)\nelse ifneq (\"${INSTALL_PREFIX}install_prefix\", \"install_prefix\")\n\tcd $(BUILD_DIR) && $(CMAKE3) -DCMAKE_INSTALL_PREFIX:STRING=${INSTALL_PREFIX} $(ROOT_DIR)\nelse\n\tcd $(BUILD_DIR) && $(CMAKE3) $(ROOT_DIR)\nendif\n\ntutorial: all\n\tmake -C tutorial\n\ncheck: all\n\tmake -C test check\n\ninstall preinstall package: base\n\tmkdir -p $(BUILD_DIR)\n\tcd $(BUILD_DIR) && $(CMAKE3) $(ROOT_DIR)\n\tmake -C $(BUILD_DIR) -f Makefile $@\n\nrpm: package\nifneq ($(BUILD_DIR),.)\n\tmv $(BUILD_DIR)/*.rpm ./\nendif\n\nclean:\nifeq (\"$(WORKFLOW)\",\"Found\")\n\t-make -C workflow clean\nendif\n\t-make -C test clean\n\t-make -C tutorial clean\n\t-make -C benchmark clean\n\trm -rf $(DEFAULT_BUILD_DIR)\n\trm -rf _include\n\trm -rf _lib\n\trm -rf _bin\n\trm -f SRCINFO SRCNUMVER SRCVERSION\n\trm -f ./*.rpm\n\trm -f src/message/*.pb.h src/message/*.pb.cc\n\tfind . -name CMakeCache.txt | xargs rm -f\n\tfind . -name Makefile       | xargs rm -f\n\tfind . -name \"*.cmake\"      | xargs rm -f\n\tfind . -name CMakeFiles     | xargs rm -rf\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.2431640625,
          "content": "[中文版入口](README_cn.md)\n\n<br/>\n<img src=\"https://raw.githubusercontent.com/wiki/sogou/srpc/srpc-logo-min.png\" width = \"140\" height = \"40\" alt=\"srpc-logo\"/>\n\n<a href=\"https://github.com/sogou/srpc/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/sogou/srpc?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://en.cppreference.com/\"><img src=\"https://img.shields.io/badge/language-C++-black.svg?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-black.svg?color=379c9c&style=flat-square\"><img src=\"https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-black.svg?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://github.com/sogou/srpc/releases\"><img src=\"https://img.shields.io/github/v/release/sogou/srpc?color=379c9c&logoColor=ffffff&style=flat-square\"/></a>\n<a href=\"https://github.com/sogou/srpc/actions?query=workflow%3A%22ci+build%22++\"><img src=\"https://img.shields.io/github/actions/workflow/status/sogou/srpc/ci.yml?branch=master&color=379c9c&style=flat-square\"/></a>\n\n### NEW !!!  👉 [SRPC tools : build Workflow and SRPC projects easily.](/tools/README.md)\n\n## Introduction\n\n**SRPC is an enterprise-level RPC system used by almost all online services in Sogou. It handles tens of billions of requests every day, covering searches, recommendations, advertising system, and other types of services.**\n\nBases on [Sogou C++ Workflow](https://github.com/sogou/workflow), it is an excellent choice for high-performance, low-latency, lightweight RPC systems. Contains AOP aspect-oriented modules that can report Metrics and Trace to a variety of cloud-native systems, such as OpenTelemetry, etc.\n\nIts main features include:\n\n  * Support multiple RPC protocols: [`SRPC`](/tutorial/tutorial-01-srpc_pb_server.cc), [`bRPC`](/tutorial/tutorial-05-brpc_pb_server.cc), [`Thrift`](/tutorial/tutorial-07-thrift_thrift_server.cc), [`tRPC`](/tutorial/tutorial-11-trpc_pb_server.cc)\n  * Support multiple operating systems: `Linux`, `MacOS`, `Windows`\n  * Support several IDL formats: [`Protobuf`](/tutorial/echo_pb.proto), [`Thrift`](/tutorial/echo_thrift.thrift)\n  * Support several data formats transparently: `Json`, `Protobuf`, `Thrift Binary`\n  * Support several compression formats, the framework automatically decompresses: `gzip`, `zlib`, `snappy`, `lz4`\n  * Support several communication protocols transparently: `tcp`, `udp`, `sctp`, `tcp ssl`\n  * With [HTTP+JSON](/docs/docs-07-srpc-http.md), you can communicate with the client or server in any language\n  * Use it together with [Workflow Series and Parallel](/docs/docs-06-workflow.md) to facilitate the use of calculations and other asynchronous resources\n  * Perfectly compatible with all Workflow functions, such as name service, [upstream](docs/docs-06-workflow.md#3-upstream) and other components\n  * Report [Tracing](/docs/docs-08-tracing.md) to [OpenTelemetry](https://opentelemetry.io)\n  * Report [Metrics](/docs/docs-09-metrics.md) to [OpenTelemetry](https://opentelemetry.io) and [Prometheus](https://prometheus.io)\n  * [More features...](/docs/en/rpc.md)\n\n## Installation\n\nsrpc has been packaged for Debian and Fedora. Therefore, we can install it from source code or from the package in the system.\n\nreference: [Linux, MacOS, Windows Installation and Compilation Guide](docs/en/installation.md)\n\n## Quick Start\n\nLet's quickly learn how to use it in a few steps.\n\nFor more detailed usage, please refer to [Documents](/docs) and [Tutorial](/tutorial).\n\n#### 1\\. example.proto\n\n~~~proto\nsyntax = \"proto3\";// You can use either proto2 or proto3. Both are supported by srpc\n\nmessage EchoRequest {\n    string message = 1;\n    string name = 2;\n};\n\nmessage EchoResponse {\n    string message = 1;\n};\n\nservice Example {\n    rpc Echo(EchoRequest) returns (EchoResponse);\n};\n~~~\n\n#### 2\\. generate code\n\n~~~sh\nprotoc example.proto --cpp_out=./ --proto_path=./\nsrpc_generator protobuf ./example.proto ./\n~~~\n\n#### 3\\. server.cc\n\n~~~cpp\n#include <stdio.h>\n#include <signal.h>\n#include \"example.srpc.h\"\n\nusing namespace srpc;\n\nclass ExampleServiceImpl : public Example::Service\n{\npublic:\n    void Echo(EchoRequest *request, EchoResponse *response, RPCContext *ctx) override\n    {\n        response->set_message(\"Hi, \" + request->name());\n        printf(\"get_req:\\n%s\\nset_resp:\\n%s\\n\",\n                request->DebugString().c_str(), response->DebugString().c_str());\n    }\n};\n\nvoid sig_handler(int signo) { }\n\nint main()\n{\n    signal(SIGINT, sig_handler);\n    signal(SIGTERM, sig_handler);\n\n    SRPCServer server_tcp;\n    SRPCHttpServer server_http;\n\n    ExampleServiceImpl impl;\n    server_tcp.add_service(&impl);\n    server_http.add_service(&impl);\n\n    server_tcp.start(1412);\n    server_http.start(8811);\n    getchar(); // press \"Enter\" to end.\n    server_http.stop();\n    server_tcp.stop();\n\n    return 0;\n}\n~~~\n\n#### 4\\. client.cc\n\n~~~cpp\n#include <stdio.h>\n#include \"example.srpc.h\"\n\nusing namespace srpc;\n\nint main()\n{\n    Example::SRPCClient client(\"127.0.0.1\", 1412);\n    EchoRequest req;\n    req.set_message(\"Hello, srpc!\");\n    req.set_name(\"workflow\");\n\n    client.Echo(&req, [](EchoResponse *response, RPCContext *ctx) {\n        if (ctx->success())\n            printf(\"%s\\n\", response->DebugString().c_str());\n        else\n            printf(\"status[%d] error[%d] errmsg:%s\\n\",\n                    ctx->get_status_code(), ctx->get_error(), ctx->get_errmsg());\n    });\n\n    getchar(); // press \"Enter\" to end.\n    return 0;\n}\n~~~\n\n#### 5\\. make\n\nThese compile commands are only for Linux system. On other system, complete cmake in [tutorial](/tutorial) is recommanded.\n\n~~~sh\ng++ -o server server.cc example.pb.cc -std=c++11 -lsrpc\ng++ -o client client.cc example.pb.cc -std=c++11 -lsrpc\n~~~\n\n#### 6\\. run\n\nTerminal 1:\n\n~~~sh\n./server\n~~~\n\nTerminal 2:\n\n~~~sh\n./client\n~~~\n\nWe can also use CURL to post Http request:\n\n~~~sh\ncurl 127.0.0.1:8811/Example/Echo -H 'Content-Type: application/json' -d '{message:\"from curl\",name:\"CURL\"}'\n~~~\n\nOutput of Terminal 1:\n\n~~~sh\nget_req:\nmessage: \"Hello, srpc!\"\nname: \"workflow\"\n\nset_resp:\nmessage: \"Hi, workflow\"\n\nget_req:\nmessage: \"from curl\"\nname: \"CURL\"\n\nset_resp:\nmessage: \"Hi, CURL\"\n\n~~~\n\nOutput of Terminal 2:\n\n~~~sh\nmessage: \"Hi, workflow\"\n~~~\n\nOutput of CURL:\n\n~~~sh\n{\"message\":\"Hi, CURL\"}\n~~~\n\n## Benchmark\n\n* CPU 2-chip/8-core/32-processor Intel(R) Xeon(R) CPU E5-2630 v3 @2.40GHz\n* Memory all 128G\n* 10 Gigabit Ethernet\n* BAIDU brpc-client in pooled (connection pool) mode\n\n#### QPS at cross-machine single client→ single server under different concurrency\n\n~~~\nClient = 1\nClientThread = 64, 128, 256, 512, 1024\nRequestSize = 32\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark2.png)\n\n#### QPS at cross-machine multi-client→ single server under different client processes\n\n~~~\nClient = 1, 2, 4, 8, 16\nClientThread = 32\nRequestSize = 32\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark4.png)\n\n#### QPS at same-machine single client→ single server under different concurrency\n\n~~~\nClient = 1\nClientThread = 1, 2, 4, 8, 16, 32, 64, 128, 256\nRequestSize = 1024\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark3.png)\n\n#### QPS at same-machine single client→ single server under different request sizes\n\n~~~\nClient = 1\nClientThread = 100\nRequestSize = 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark1.png)\n\n#### Latency CDF for fixed QPS at same-machine single client→ single server \n\n~~~\nClient = 1\nClientThread = 50\nClientQPS = 10000\nRequestSize = 1024\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\nOutiler = 1%\n~~~\n\n![IMG](/docs/images/benchmark5.png)\n\n#### Latency CDF for fixed QPS at cross-machine multi-client→ single server \n\n~~~\nClient = 32\nClientThread = 16\nClientQPS = 2500\nRequestSize = 512\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\nOutiler = 1%\n~~~\n\n![IMG](/docs/images/benchmark6.png)\n\n## Contact\n\n* **Email** - **[liyingxin@sogou-inc.com](mailto:liyingxin@sogou-inc.com)** - main author\n* **Issue** - You are very welcome to post questions to [issues](https://github.com/sogou/srpc/issues) list.\n* **QQ** - Group number: ``618773193``\n"
        },
        {
          "name": "README_cn.md",
          "type": "blob",
          "size": 7.849609375,
          "content": "[English version](README.md) &nbsp;&nbsp;|&nbsp;&nbsp; [Wiki：SRPC架构介绍](/docs/wiki.md)\n\n<img src=\"https://raw.githubusercontent.com/wiki/sogou/srpc/srpc-logo-min.png\" width = \"140\" height = \"40\" alt=\"srpc-logo\"/>\n\n<a href=\"https://github.com/sogou/srpc/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/sogou/srpc?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://en.cppreference.com/\"><img src=\"https://img.shields.io/badge/language-C++-black.svg?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-black.svg?color=379c9c&style=flat-square\"><img src=\"https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-black.svg?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://github.com/sogou/srpc/releases\"><img src=\"https://img.shields.io/github/v/release/sogou/srpc?color=379c9c&logoColor=ffffff&style=flat-square\"/></a>\n<a href=\"https://github.com/sogou/srpc/actions?query=workflow%3A%22ci+build%22++\"><img src=\"https://img.shields.io/github/actions/workflow/status/sogou/srpc/ci.yml?branch=master&color=379c9c&style=flat-square\"/></a>\n\n### NEW !!!  👉 [SRPC tools : 一个帮你快速构建Workflow和SRPC项目的小工具.](/tools/README_cn.md) \n\n## Introduction\n**SRPC是全搜狗业务线上使用的企业级RPC系统，目前每天承载上百亿的请求量，涵盖搜广推及其他类型业务。**\n\n底层基于[Sogou C++ Workflow](https://github.com/sogou/workflow)，是高性能、低延迟、轻量级RPC系统的极佳选择。且加入了AOP面向切面的模块，支持Metrics（监控指标）和Trace（链路追踪）功能，可上报到多种云原生系统，包括OpenTelemetry。\n\n主要功能和示例：\n  * 支持多种RPC协议：[`SRPC`](/tutorial/tutorial-01-srpc_pb_server.cc)、[`bRPC`](/tutorial/tutorial-05-brpc_pb_server.cc)、[`Thrift`](/tutorial/tutorial-07-thrift_thrift_server.cc)、[`tRPC`](/tutorial/tutorial-11-trpc_pb_server.cc)\n  * 支持多种操作系统：`Linux` / `MacOS` / `Windows`\n  * 支持多种IDL格式：[`Protobuf`](/tutorial/echo_pb.proto)、[`Thrift`](/tutorial/echo_thrift.thrift)\n  * 支持多种数据布局，使用上完全透明：`Json`、`Protobuf`、`Thrift Binary`\n  * 支持多种压缩，框架自动解压：`gzip`、`zlib`、`snappy`、`lz4`\n  * 支持多种通信协议：`tcp`, `udp`, `sctp`, `tcp ssl`\n  * 可以通过[http+json实现跨语言](/docs/docs-07-srpc-http.md)\n  * 可以使用[Workflow串并联任务流](/docs/docs-06-workflow.md)，打通计算及其他异步资源\n  * 完美兼容Workflow所有功能：命名服务体系、[upstream](docs/docs-06-workflow.md#3-upstream)、其他组件等\n  * 链路追踪功能：上报[Tracing](/docs/docs-08-tracing.md)到[OpenTelemetry](https://opentelemetry.io)\n  * 监控功能：上报[Metrics](/docs/docs-09-metrics.md)到OpenTelemetry和[Prometheus](https://prometheus.io) \n\n## Installation\n\nSRPC是Debian Linux和Fedora的自带安装包，因此可以通过源码安装，和系统自带安装包安装。\n\n具体参考：[Linux、MacOS、Windows安装和编译指南](docs/installation.md)\n\n## Quick Start\n\n我们通过几个步骤快速了解如何使用。\n\n更详细的用法可以参考[更多文档](/docs)，和[官方教程](/tutorial)。\n\n#### 1. example.proto\n~~~proto\nsyntax = \"proto3\";//这里proto2和proto3都可以，srpc都支持\n\nmessage EchoRequest {\n    string message = 1;\n    string name = 2;\n};\n\nmessage EchoResponse {\n    string message = 1;\n};\n\nservice Example {\n    rpc Echo(EchoRequest) returns (EchoResponse);\n};\n~~~\n\n#### 2. generate code\n~~~sh\nprotoc example.proto --cpp_out=./ --proto_path=./\nsrpc_generator protobuf ./example.proto ./\n~~~\n\n#### 3. server.cc\n~~~cpp\n#include <stdio.h>\n#include <signal.h>\n#include \"example.srpc.h\"\n\nusing namespace srpc;\n\nclass ExampleServiceImpl : public Example::Service\n{\npublic:\n    void Echo(EchoRequest *request, EchoResponse *response, RPCContext *ctx) override\n    {\n        response->set_message(\"Hi, \" + request->name());\n        printf(\"get_req:\\n%s\\nset_resp:\\n%s\\n\",\n                request->DebugString().c_str(), response->DebugString().c_str());\n    }\n};\n\nvoid sig_handler(int signo) { }\n\nint main()\n{\n    signal(SIGINT, sig_handler);\n    signal(SIGTERM, sig_handler);\n\n    SRPCServer server_tcp;\n    SRPCHttpServer server_http;\n\n    ExampleServiceImpl impl;\n    server_tcp.add_service(&impl);\n    server_http.add_service(&impl);\n\n    server_tcp.start(1412);\n    server_http.start(8811);\n    getchar(); // press \"Enter\" to end.\n    server_http.stop();\n    server_tcp.stop();\n\n    return 0;\n}\n~~~\n\n#### 4. client.cc\n~~~cpp\n#include <stdio.h>\n#include \"example.srpc.h\"\n\nusing namespace srpc;\n\nint main()\n{\n    Example::SRPCClient client(\"127.0.0.1\", 1412);\n    EchoRequest req;\n    req.set_message(\"Hello, srpc!\");\n    req.set_name(\"workflow\");\n\n    client.Echo(&req, [](EchoResponse *response, RPCContext *ctx) {\n        if (ctx->success())\n            printf(\"%s\\n\", response->DebugString().c_str());\n        else\n            printf(\"status[%d] error[%d] errmsg:%s\\n\",\n                    ctx->get_status_code(), ctx->get_error(), ctx->get_errmsg());\n    });\n\n    getchar(); // press \"Enter\" to end.\n    return 0;\n}\n~~~\n\n#### 5. make\n在Linux系统下的编译示例如下，其他平台建议到[tutorial](/tutorial)目录下使用完整的cmake文件协助解决编译依赖问题。\n~~~sh\ng++ -o server server.cc example.pb.cc -std=c++11 -lsrpc\ng++ -o client client.cc example.pb.cc -std=c++11 -lsrpc\n~~~\n\n#### 6. run\n终端1：\n~~~sh\n./server\n~~~\n终端2：\n~~~sh\n./client\n~~~\n也可以用CURL发送http请求：\n~~~sh\ncurl 127.0.0.1:8811/Example/Echo -H 'Content-Type: application/json' -d '{message:\"from curl\",name:\"CURL\"}'\n~~~\n\n终端1输出：\n~~~sh\nget_req:\nmessage: \"Hello, srpc!\"\nname: \"workflow\"\n\nset_resp:\nmessage: \"Hi, workflow\"\n\nget_req:\nmessage: \"from curl\"\nname: \"CURL\"\n\nset_resp:\nmessage: \"Hi, CURL\"\n~~~\n终端2输出：\n~~~sh\nmessage: \"Hi, workflow\"\n~~~\nCURL收到的回复：\n~~~sh\n{\"message\":\"Hi, CURL\"}\n~~~\n\n## Benchmark\n\n* CPU 2-chip/8-core/32-processor Intel(R) Xeon(R) CPU E5-2630 v3 @2.40GHz\n* Memory all 128G\n* 10 Gigabit Ethernet\n* BAIDU brpc-client使用连接池pooled模式\n\n#### 跨机单client→单server在不同并发的QPS\n~~~\nClient = 1\nClientThread = 64, 128, 256, 512, 1024\nRequestSize = 32\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark2.png)\n\n#### 跨机多client→单server在不同client进程数的QPS\n~~~\nClient = 1, 2, 4, 8, 16\nClientThread = 32\nRequestSize = 32\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark4.png)\n\n#### 同机单client→单server在不同并发下的QPS\n~~~\nClient = 1\nClientThread = 1, 2, 4, 8, 16, 32, 64, 128, 256\nRequestSize = 1024\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark3.png)\n\n#### 同机单client→单server在不同请求大小下的QPS\n~~~\nClient = 1\nClientThread = 100\nRequestSize = 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\n~~~\n\n![IMG](/docs/images/benchmark1.png)\n\n#### 同机单client→单server在固定QPS下的延时CDF\n~~~\nClient = 1\nClientThread = 50\nClientQPS = 10000\nRequestSize = 1024\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\nOutiler = 1%\n~~~\n\n![IMG](/docs/images/benchmark5.png)\n\n#### 跨机多client→单server在固定QPS下的延时CDF\n~~~\nClient = 32\nClientThread = 16\nClientQPS = 2500\nRequestSize = 512\nDuration = 20s\nServer = 1\nServerIOThread = 16\nServerHandlerThread = 16\nOutiler = 1%\n~~~\n\n![IMG](/docs/images/benchmark6.png)\n\n## 与我们联系\n * **Email** - **[liyingxin@sogou-inc.com](mailto:liyingxin@sogou-inc.com)** - 主要作者\n * **Issue** - 使用中的任何问题都欢迎到[issues](https://github.com/sogou/srpc/issues)进行交流。\n * **QQ** - 群号: ``618773193``\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.1552734375,
          "content": "workspace(name = \"srpc\")\n\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\")\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"new_git_repository\")\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"rules_proto\",\n    sha256 = \"d8992e6eeec276d49f1d4e63cfa05bbed6d4a26cfe6ca63c972827a0d141ea3b\",\n    strip_prefix = \"rules_proto-cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2\",\n    urls = [\n        \"https://github.com/bazelbuild/rules_proto/archive/cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2.tar.gz\",\n    ],\n)\nload(\"@rules_proto//proto:repositories.bzl\", \"rules_proto_dependencies\", \"rules_proto_toolchains\")\nrules_proto_dependencies()\nrules_proto_toolchains()\n\ngit_repository(\n    name = \"workflow\",\n    commit = \"b9062aeeffa38ca7b7b70ea4683f56863cf952e5\",\n    remote = \"https://github.com/sogou/workflow.git\")\n\nnew_git_repository(\n    name = \"lz4\",\n    build_file = \"@//third_party:lz4.BUILD\",\n    tag = \"v1.9.3\",\n    remote = \"https://github.com/lz4/lz4.git\")\n\nnew_git_repository(\n    name = \"snappy\",\n    build_file = \"@//third_party:snappy.BUILD\",\n    tag = \"1.1.9\",\n    remote = \"https://github.com/google/snappy.git\")\n\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "srpc-config.cmake.in",
          "type": "blob",
          "size": 0.375,
          "content": "@PACKAGE_INIT@\n\nset(SRPC_VERSION \"@srpc_VERSION@\")\nset_and_check(SRPC_INCLUDE_DIR \"@PACKAGE_CONFIG_INC_DIR@\")\nset_and_check(SRPC_LIB_DIR \"@PACKAGE_CONFIG_LIB_DIR@\")\nset_and_check(SRPC_BIN_DIR \"@PACKAGE_CONFIG_BIN_DIR@\")\n\nif (EXISTS \"${CMAKE_CURRENT_LIST_DIR}/srpc-targets.cmake\")\n    include (\"${CMAKE_CURRENT_LIST_DIR}/srpc-targets.cmake\")\nendif ()\n\ncheck_required_components(srpc)\n\n"
        },
        {
          "name": "srpc.bzl",
          "type": "blob",
          "size": 1.759765625,
          "content": "\"\"\"\nRules for building C++ srpc with Bazel.\n\"\"\"\n\nload(\"@rules_cc//cc:defs.bzl\", \"cc_library\")\n\ntool_path = \":srpc_generator\"\n\ndef srpc_cc_library(\n        name,\n        srcs,\n        deps = [],\n        type = \"proto\",\n        out_prefix = \"\",\n        visibility = None):\n    output_directory = (\n        (\"$(@D)/%s\" % (out_prefix)) if len(srcs) > 1 else (\"$(@D)\")\n    )\n\n    proto_output_headers = [\n        (out_prefix + \"%s.srpc.h\") % (s.replace(\".%s\" % type, \"\").split(\"/\")[-1])\n        for s in srcs\n    ]\n    thrift_output_headers = [\n        (out_prefix + \"%s.thrift.h\") % (s.replace(\".%s\" % type, \"\").split(\"/\")[-1])\n        for s in srcs\n    ]\n\n    if type == \"thrift\":\n        output_headers = proto_output_headers + thrift_output_headers\n        gen_proto = \"thrift\"\n    if type == \"proto\":\n        output_headers = proto_output_headers\n        gen_proto = \"protobuf\"\n\n    genrule_cmd = \" \".join([\n        \"SRCS=($(SRCS));\",\n        \"for f in $${SRCS[@]:0:%s}; do\" % len(srcs),\n        \"$(location %s)\" % (tool_path),\n        \" %s \" % gen_proto,\n        \"$$f\",\n        output_directory + \";\",\n        \"done\",\n    ])\n\n    srcs_lib = \"%s_srcs\" % (name)\n\n    native.genrule(\n        name = srcs_lib,\n        srcs = srcs,\n        outs = output_headers,\n        tools = [tool_path],\n        cmd = genrule_cmd,\n        output_to_bindir = True,\n        message = \"Generating srpc files for %s:\" % (name),\n    )\n\n    runtime_deps = deps + [\":srpc\"]\n    print(runtime_deps)\n\n    cc_library(\n        name = name,\n        hdrs = [\n            \":\" + srcs_lib,\n        ],\n        srcs = [\n            \":\" + srcs_lib,\n        ],\n        features = [\n            \"-parse_headers\",\n        ],\n        deps = runtime_deps,\n        includes = [],\n        linkstatic = 1,\n        visibility = visibility,\n    )\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "workflow",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}