{
  "metadata": {
    "timestamp": 1736565512123,
    "page": 381,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "odriverobotics/ODrive",
      "stars": 3033,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7646484375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# PyBuilder\ntarget/\n\n#Ipython Notebook\n.ipynb_checkpoints\n\n# Tup\n.tup\ntup.config\n\n# Sphinx documentation\n/docs/_build/\n\n# Autogenerated API reference\n/docs/_api\n/docs/_includes/apiindex.html\n\n# Jekyll HTML documention and artifacts\n/docs/ruby-bundle\n/docs/_site\n/docs/.bundle/config\n/docs/.jekyll-metadata\n\n\n*.exe\n\nODrive\\.config\n\nODrive\\.creator\n\nODrive\\.creator\\.user\n\nODrive\\.files\n\nODrive\\.includes\n\nFirmware/Tests/bin/\n\n# GUI\nGUI/dist_electron\nGUI/node_modules\nGUI/build\n\ndocs/reStructuredText/_build/\ntools/odrive-cansimple.ini\n"
        },
        {
          "name": "Arduino",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 32.796875,
          "content": "\n## [0.5.6] - 2023-04-29\n\n### Fixed\n\n* Fixed race condition in homing sequence that was causing strange behaviour.  Fixes [#634](https://github.com/odriverobotics/ODrive/issues/634)]  \n* When using a load encoder, CAN will report the correct position and velocity.\n* When using a load encoder, homing will reset the correct linear position.  Fixes [#651](https://github.com/odriverobotics/ODrive/issues/651)\n* Implemented CAN controller error message, which was previously defined but not actually implemented.\n* Get Vbus Voltage message updated to match ODrive Pro's CANSimple implementation.\n* `vel_setpoint` and `torque_setpoint` will be clamped to `vel_limit` and the active torque limit.  Fixes [#647](https://github.com/odriverobotics/ODrive/issues/647)\n\n### Added\n\n* Added public `controller.get_anticogging_value(uint32)` fibre function to index into the the cogging map.  Fixes [#690](https://github.com/odriverobotics/ODrive/issues/690)\n* Added Get ADC Voltage message to CAN (0x1C).  Send the desired GPIO number in byte 1, and the ODrive will respond with the ADC voltage from that pin (if previously configured for analog)\n* Added CAN heartbeat message flags for motor, controller, and encoder error.  If flag is true, fetch the corresponding error with the respective message.\n* Added scoped enums, e.g. `CONTROL_MODE_POSITION_CONTROL` can be used as `ControlMode.POSITION_CONTROL`\n* Added more cyclic messages to can.  Use the `rate_ms` values in `<odrv>.<axis>.config.can` to set the cycle rate of the message in milliseconds.  Set a rate to 0 to disable sending.  The following variables are avaialble:\n\nCommand ID | Rate Variable | Message Name\n:-- | :-- | :--\n 0x01 | `heartbeat_rate_ms` | Heartbeat\n 0x09 | `encoder_rate_ms` | Get Encoder Estimates\n 0x03 | `motor_error_rate_ms` | Get Motor Error\n 0x04 | `encoder_error_rate_ms` | Get Encoder Error\n 0x1D | `controller_error_rate_ms` | Get Controller Error\n 0x05 | `sensorless_error_rate_ms` | Get Sensorless Error\n 0x0A | `encoder_count_rate_ms` | Get Encoder Count\n 0x14 | `iq_rate_ms` | Get Iq\n 0x15 | `sensorless_rate_ms` | Get Sensorless Estimates\n 0x17 | `bus_vi_rate_ms` | Get Bus Voltage Current\n\n### Changed\n\n* Improved can_generate_dbc.py file and resultant .dbc.  Now supports 8 ODrive axes (0..7) natively\n* Add units and value tables to every signal in odrive-cansimple.dbc\n* Autogenerate odrive-cansimple.dbc on compile\n\n## [0.5.5] - 2022-08-11\n\n* CANSimple messages which previously required the rtr bit to be set will now also respond if DLC = 0\n* Ensure endstops update before being checked for errors, to prevent [#625](https://github.com/odriverobotics/ODrive/issues/625)\n* Reset trajectory_done_ during homing to ensure a new trajectory is actually computed [#634](https://github.com/odriverobotics/ODrive/issues/634)\n* Use `input_xxx` as a DC offset in tuning mode\n* Sync `steps_` with input pos.\n* Trigger reset of input_pos and pos_setpoint to estimate when changing control mode into position control\n\n## [0.5.4] - 2021-10-12\n\n### Fixed\n* Some ASCII protocol commands (e.g. `w axis0.requested_state 4`) resulted in `not implemented` due to an issue with the CI compiler. A workaround was made to fix this.\n* Fixed bad response of some ASCII procotol commands (e.g. `r axis0.error` returned `0d` instead of `0`).\n\n### Added\n* Added `<axis>.controller.config.vel_integrator_limit`\n* Allow setting controller gains on CAN Simple\n\n## [0.5.3] - 2021-09-03\n\n### Fixed\n* ASCII protocol commands with multiline responses (`i`, `h`) now return the expected response (in v0.5.2 the response was corrupted)\n* odrivetool no longer shows the message `<Task pending coro=... running at ...>` when closing\n* Homing used to erroneously complete with `is_homed == True` even if it failed for some reason\n* When entering closed loop control in trapezoidal trajectory mode the axis no longer snaps to the 0 position\n* Fix python DFU firmware version prerelease status resolution to use correct attribute\n* Fixed firmware compiled-in version number\n\n### Added\n* `brake_resistor_current` added to interface for reading the commanded brake resistor current\n\n### Changed\n* Removed `odrivetool generate-code`. This feature was broken in 0.5.2. Use [`interface_generator.py`](https://github.com/odriverobotics/ODrive/blob/master/tools/fibre-tools/interface_generator.py) instead (see Tupfile.lua for examples).\n* Firmware boots on devices with unset OTP.\n* Changed CAN heartbeat message to include \"trajectory done\" flag\n\n## [0.5.2] - 2021-05-21\n\n### Fixed\n* spinout error is no longer sticky and doesn't trigger on static torque loads due to I^2*R electrical power\n* Step and direction mode resets position when entering closed loop just like `input_pos` does\n* CAN baud rate setting is now correctly handled\n* `odrivetool dfu` works properly when an ODrive is flashed with the `dfu` switch set to \"dfu\".\n* `odrivetool dfu` now erases the entire flash memory before flashing firmware. This ensures that old configuration parameters are erased.\n* ASCII and the Native Protocol do not run at the same time on a UART interface. See `odrv0.config.uart0_protocol` and the `STREAM_PROTOCOL_TYPE` enums for details.\n\n### Added\n* `sc` command to ascii protocol to run `odrv.clear_errors()`\n* Added phase balance check to motor calibration and MOTOR_ERROR_UNBALANCED_PHASES to error enums\n* Added polarity and phase offset calibration for hall effect encoders\n* [Mechanical brake support](docs/mechanical-brakes.md)\n* Added periodic sending of encoder position on CAN\n* Support for UART1 on GPIO3 and GPIO4. UART0 (on GPIO1/2) and UART1 can currently not be enabled at the same time.\n* Thermistors now have a 2nd order lowpass filter applied to reduce noise\n* 2-norm current clamping is used for AC induction motors\n* Added spinout detection to detect incorrect encoder offset and CONTROLLER_ERROR_SPINOUT_DETECTED to error enums.\n* Added AARCH64 support to libfibre\n* Tuning input mode added to provide sinusoidal position, velocity, or torque stimulus. See INPUT_MODE_TUNING and the controller class for details.\n* Added torque mirroring to INPUT_MODE_MIRROR\n* `mechanical_power_bandwidth`, `electrical_power_bandwidth`, `spinout_electrical_power_threshold`, `spinout_mechanical_power_threshold` added to `controller.config` for spinout detection.\n* `mechanical_power` and `electrical_power` added to `controller`.\n* Added autogenerated enums header file [ODriveEnums.h](../Arduino/ODriveArduino/ODriveEnums.h) for Arduino use. Created Jinja template and edited Makefile to autogenerate it. Reflected change in Dockerfile and added note in developer-guide markdown file for updating ODriveEnums.h alongside enums.py.\n* Added GetPosition member function in ODriveArduino class to complement existing GetVelocity, SetVelocity, and SetPosition functions.\n\n### Changed\n* Step/dir performance improved! Dual axis step rates up to 250kHz have been tested\n* Apply_config is called for encoders after a successful direction find\n* Full calibration sequence now includes hall polarity calibration if a hall effect encoder is used\n* Modified encoder offset calibration to work correctly when calib_scan_distance is not a multiple of 4pi\n* Moved thermistors from being a top level object to belonging to Motor objects. Also changed errors: thermistor errors rolled into motor errors\n* Use DMA for DRV8301 setup\n* Make NVM configuration code more dynamic so that the layout doesn't have to be known at compile time.\n* GPIO initialization logic was changed. GPIOs now need to be explicitly set to the mode corresponding to the feature that they are used by. See `<odrv>.config.gpioX_mode`.\n* Previously, if two components used the same interrupt pin (e.g. step input for axis0 and axis1) then the one that was configured later would override the other one. Now this is no longer the case (the old component remains the owner of the pin).\n* New control loop architecture:\n  1. TIM8 update interrupt handler (CNT = 0) runs at a high priority and invokes the system level function `sample_cb()` to sample all timing critical inputs (currently only encoder state).\n  2. TIM8 update interrupt handler (CNT = 0) raises an NVIC flag to kick off a lower priority interrupt.\n  3. The control loop interrupt handler checks if all ADC measurements are ready and informs both motor objects about the current measurements.\n  4. The control loop interrupt handler invokes the system level function `control_loop_cb()` which updates all components (encoders, estimators, torque controllers, etc). The data paths between the components are configured by the Axis threads based on the requested state. This replaces the previous architecture where the components were updated inside the Axis threads in `Axis::run_control_loop()`.\n  5. Meanwhile the TIM1 and TIM8 updates for CNT = 3500 will have fired. The control loop interrupt handler thus reads the new ADC measurements and informs both motor objects that a DC calibration event has happened.\n  6. Finally, the control loop interrupt invokes `pwm_update_cb` on both motors to make them update their PWM timing registers.\n* Components that need low level control over PWM timings are implemented by inheriting from the `PhaseControlLaw` interface. Three components currently inherit this interface: `FieldOrientedController`, `ResistanceMeasurementControlLaw` and `InductanceMeasurementControlLaw`.\n* The FOC algorithm is now found in foc.cpp and and is presumably capable of running at a different frequency than the main control tasks (not relevant for ODrive v3).\n* ACIM estimator was consolidated into a separate component `<odrv>.acim_estimator`.\n* The Automatic Output Enable (AOE) flag of TIM1/TIM8 is used to achieve glitch-free motor arming.\n* Sensorless mode was merged into closed loop control mode. Use `<axis>.enable_sensorless_mode` to disable the use of an encoder.\n* More informative profiling instrumentation was added.\n* A system-level error property was introduced.\n* Added `torque_mirror_ratio` and use it to feed-forward `controller_.torque_output` in `INPUT_MODE_MIRROR`\n* Accumulate integer steps in step/dir to avoid float precision errors\n* Circular setpoint mode must be enabled when the step/dir interface is used.\n* Replaced inline enum in ODriveArduino class by including new autogenerated ODriveEnums.h header file.\n* Changed the example ODriveArduinoTest.ino file to reflect the new GetPosition member function. Also removed the scope resolution operator to access the enums as it can now be accessed from the global namespace.\n* `save_configuration()` reboots the board.\n\n### API Migration Notes\n* `axis.config.turns_per_step` changed to `axis.controller.config.steps_per_circular_range`\n* `odrive.axis.fet_thermistor`, `odrive.axis.motor_thermistor` moved to `odrive.axis.motor` object\n* `enable_uart` and `uart_baudrate` were renamed to `enable_uart0` and `uart0_baudrate`.\n* `enable_i2c_instead_of_can` was replaced by the separate settings `enable_i2c0` and `enable_can0`.\n* `<axis>.motor.gate_driver` was moved to `<axis>.gate_driver`.\n* `<axis>.min_endstop.pullup` and `<axis>.max_endstop.pullup` were removed. Use `<odrv>.config.gpioX_mode = GPIO_MODE_DIGITAL / GPIO_MODE_DIGITAL_PULL_UP / GPIO_MODE_DIGITAL_PULL_DOWN` instead.\n* `<axis>.config.can_node_id` was moved to `<axis>.config.can.node_id`\n* `<axis>.config.can_node_id_extended` was moved to `<axis>.config.can.is_extended`\n* `<axis>.config.can_heartbeat_rate_ms` was moved to `<axis>.config.can.heartbeat_rate_ms`\n* `<odrv>.get_oscilloscope_val()` was moved to `<odrv>.oscilloscope.get_val()`.\n* Several error flags from `<odrv>.<axis>.error` were removed. Some were moved to `<odrv>.error` and some are no longer relevant because implementation details changed.\n* Several error flags from `<odrv>.<axis>.motor.error` were removed. Some were moved to `<odrv>.error` and some are no longer relevant because implementation details changed.\n* `<axis>.lockin_state` was removed as the lockin implementation was replaced by a more general open loop control block (currently not exposed on the API).\n* `AXIS_STATE_SENSORLESS_CONTROL` was removed. Use `AXIS_STATE_CLOSED_LOOP_CONTROL` instead with `<odrv>.enable_sensorless_mode = True`.\n* `<axis>.config.startup_sensorless_control` was removed. Use `<axis>.config.startup_closed_loop_control` instead with `<odrv>.enable_sensorless_mode = True`.\n* `<axis>.clear_errors()` was replaced by the system-wide function `<odrv>.clear_errors()`.\n* `<axis>.armed_state` was replaced by `<axis>.is_armed`.\n* Several properties in `<axis>.motor.current_control` were changed to read-only.\n* `<axis>.motor.current_control.Ibus` was moved to `<axis>.motor.I_bus`.\n* `<axis>.motor.current_control.max_allowed_current` was moved to `<axis>.motor.max_allowed_current`.\n* `<axis>.motor.current_control.overcurrent_trip_level` was removed.\n* `<axis>.motor.current_control.acim_rotor_flux` was moved to `<axis>.acim_estimator.rotor_flux`.\n* `<axis>.motor.current_control.async_phase_vel` was moved to `<axis>.acim_estimator.stator_phase_vel`.\n* `<axis>.motor.current_control.async_phase_offset` was moved to `<axis>.acim_estimator.phase`.\n* `<axis>.motor.timing_log` was removed in favor of `<odrv>.task_times` and `<odrv>.<axis>.task_times`.\n* `<axis>.motor.config.direction` was moved to `<axis>.encoder.config.direction`.\n* `<axis>.motor.config.acim_slip_velocity` was moved to `<axis>.acim_estimator.config.slip_velocity`.\n* Several properties were changed to readonly.\n* `<axis>.encoder.config.offset` was renamed to ``<axis>.encoder.config.phase_offset`\n* `<axis>.encoder.config.offset_float` was renamed to ``<axis>.encoder.config.phase_offset_float`\n* `<odrv>.config.brake_resistance == 0.0` is no longer a valid way to disable the brake resistor. Use `<odrv>.config.enable_brake_resistor` instead. A reboot is necessary for this to take effect.\n* `<odrv>.can.set_baud_rate()` was removed. The baudrate is now automatically updated when writing to `<odrv>.can.config.baud_rate`.\n\n## [0.5.1] - 2020-09-27\n### Added\n* Added motor `torque_constant`: units of torque are now [Nm] instead of just motor current.\n* Added `motor.config.torque_lim`: limit for motor torque in [Nm].\n* [Motor thermistors support](docs/thermistors.md)\n* Enable/disable of thermistor thermal limits according `setting axis.<thermistor>.enabled`.\n* Introduced `odrive-interface.yaml` as a root source for the ODrive's API. `odrivetool` connects much faster as a side effect.\n* Added torque_constant and torque_lim to motor config\n\n### Changed\n* **`input_pos`, `input_vel`, `pos_estimate_linear`, `pos_estimate_circular`, are now in units of [turns] or [turns/s] instead of [counts] or [counts/s]**\n* **`pos_gain`, `vel_gain`, `vel_integrator_gain`, are now in units of [(turns/s) / turns], [Nm/(turns/s)], [Nm/(turns/s * s)] instead of [(counts/s) / counts], [A/(counts/s)], [A/((counts/s) * s)].** `pos_gain` is not affected. Old values of `vel_gain` and `vel_integrator_gain` should be multiplied by `torque_constant * encoder cpr` to convert from the old units to the new units. `torque_constant` is approximately equal to 8.27 / (motor KV).\n* `axis.motor.thermal_current_lim` has been removed. Instead a new property is available `axis.motor.effective_current_lim` which contains the effective current limit including any thermal limits.\n* `axis.motor.get_inverter_temp()`, `axis.motor.inverter_temp_limit_lower` and `axis.motor.inverter_temp_limit_upper` have been moved to seperate fet thermistor object under `axis.fet_thermistor`. `get_inverter_temp()` function has been renamed to `temp` and is now a read-only property.\n* `axis.config.counts_per_step` is now `axis.config.turns_per_step`\n* Outputs of `axis.sensorless_estimator` are now in turns/s instead of electrical rad/s\n* Fixed bug of high current during lockin-ramp caused by `motor::update()` expecting a torque command instead of current\n* Fixed bug where commanded velocity was extremely high just after sensorless ramp when using `input_mode` INPUT_MODE_VEL_RAMP caused by `vel_setpoint` and `axis.config.sensorless_ramp.vel` being in different units\n\n### Fixed\n* Fixed bug of high current during lockin-ramp caused by `motor::update()` expecting a torque command instead of current\n* Fixed bug where commanded velocity was extremely high just after sensorless ramp when using `input_mode` INPUT_MODE_VEL_RAMP caused by `vel_setpoint` and `axis.config.sensorless_ramp.vel` being in different units\n\n## [0.5.0] - 2020-08-03\n### Added\n* AC Induction Motor support.\n  * Tracking of rotor flux through rotor time constant\n  * Automatic d axis current for Maximum Torque Per Amp (MTPA)\n* ASCII \"w\" commands now execute write hooks.\n* Simplified control interface (\"Input Filter\" branch)\n    * New input variables: `input_pos`, `input_vel`, and `input_current`\n    * New setting `input_mode` to switch between different input behaviours\n      * Passthrough\n      * Velocity Ramp\n      * 2nd Order Position Filter\n      * Trapezoidal Trajectory Planner\n    * Removed `set_xxx_setpoint()` functions and made `xxx_setpoint` variables read-only\n* [Preliminary support for Absolute Encoders](docs/encoders.md)\n* [Preliminary support for endstops and homing](docs/endstops.md)\n* [CAN Communication with CANSimple stack](can-protocol.md)\n* Gain scheduling for anti-hunt when close to 0 position error\n* Velocity Limiting in Current Control mode according to `vel_limit` and `vel_gain`\n* Regen current limiting according to `max_regen_current`, in Amps\n* DC Bus hard current limiting according to `dc_max_negative_current` and `dc_max_positive_current`\n* Brake resistor logic now attempts to clamp voltage according to `odrv.config.dc_bus_overvoltage_ramp_start` and `odrv.config.dc_bus_overvoltage_ramp_end`\n* Unit Testing with Doctest has been started for select algorithms, see [Firmware/Tests/test_runner.cpp](Firmware/Tests/test_runner.cpp)\n* Added support for Flylint VSCode Extension for static code analysis\n* Using an STM32F405 .svd file allows CortexDebug to view registers during debugging\n* Added scripts for building via docker.\n* Added ability to change uart baudrate via fibre\n\n### Changed\n* Changed ratiometric `motor.config.current_lim_tolerance` to absolute `motor.config.current_lim_margin`\n* Moved `controller.vel_ramp_enable` to INPUT_MODE_VEL_RAMP.\n* Anticogging map is temporarily forced to 0.1 deg precision, but saves with the config\n* Some Encoder settings have been made read-only\n* Cleaned up VSCode C/C++ Configuration settings on Windows with recursive includePath\n* Now compiling with C++17\n* Fixed a firmware hang that could occur from unlikely but possible user input\n* Added JSON caching to Fibre. This drastically reduces the time odrivetool needs to connect to an ODrive (except for the first time or after firmware updates).\n* Fix IPython `RuntimeWarning` that would occur every time `odrivetool` was started.\n* Reboot on `erase_configuration()`. This avoids unexpected behavior of a subsequent `save_configuration()` call, since the configuration is only erased from NVM, not from RAM.\n* Change `motor.get_inverter_temp()` to use a property which was already being sampled at `motor.inverter_temp`\n* Fixed a numerical issue in the trajectory planner that could cause sudden jumps of the position setpoint\n\n## [0.4.12] - 2020-05-06\n### Fixed\n* Fixed a numerical issue in the trajectory planner that could cause sudden jumps of the position setpoint\n\n## [0.4.11] - 2019-07-25\n### Added\n* Separate lockin configs for sensorless, index search, and general.\n* Check current limit violation: added `ERROR_CURRENT_UNSTABLE`, `motor.config.current_lim_tolerance`.\n\n### Changed\n* Ascii command for reboot changed from `sb` to `sr`.\n\n## [0.4.10] - 2019-04-24\n### Fixed\n* Index search would trigger in the wrong place.\n\n## [0.4.9] - 2019-04-23\n### Added\n* A release target for ODrive v3.6\n* Communication watchdog feature.\n* `encoder.set_linear_count(count)` function.\n* Configurable encoder offset calibration distance and speed:`calib_scan_distance` and `calib_scan_omega`\n* Encoder offset calibration debug variable `calib_scan_response`\n* Lock-in drive feature\n* Script to enable using a hall signal as index edge.\n\n### Changed\n* Moved `traptraj.A_per_css` to `controller.inertia`\n* Refactored velocity ramp mode into the new general input filtering structure\n* Encoder index search now based on the new lock-in drive feature\n\n### Fixed\n* Encoder index interrupts now disabled when not searching\n\n## [0.4.8] - 2019-02-25\n### Added\n* `dump_errors()` utility function in odrivetool to dump, decode and optionally clear errors.\n* `f` command to ascii protocol to get encoder position and velocity feedback.\n* `q` command to ascii protocol. It is like the old `p` command, but velocity and current mean limits, not feed-forward.\n* `ss`, `se`, `sr` commands to ascii protocol, for save config, erase config and reboot.\n* `move_incremental` function for relative trajectory moves.\n* `encoder.config.ignore_illegal_hall_state` option.\n* `encoder.config.enable_phase_interpolation` option. Setting to false may reduce jerky pulsations at low speed when using hall sensor feedback.\n* Analog input. Used the same way as the PWM input mappings.\n* Voltage limit soft clamping instead of ERROR_MODULATION_MAGNITUDE in gimbal motor closed loop.\n* Thermal current limit with linear derating.\n\n### Changed\n* Unified lockin drive modes. Current for index searching and encoder offset calibration now moved to axis.lockin.current.\n\n### Fixed\n* Added required 1.5 cycle phase shift between ADC and PWM, lack thereof caused unstable current controller at high eRPM.\n\n## [0.4.7] - 2018-11-28\n### Added\n* Overspeed fault\n* Current sense saturation fault.\n* Suppress startup transients by sampling encoder estimate into position setpoint when entering closed loop control.\n* Make step dir gpio pins configurable.\n* Configuration variable `encoder.config.zero_count_on_find_idx`, true by default. Set to false to leave the initial encoder count to be where the axis was at boot.\n* Circular position setpoint mode: position setpoints wrapped [0, cpr). Useful for infinite incremental position control.\n* Velocity setpoint ramping. Use velocity control mode, and set `controller.vel_ramp_enable` to true. This will ramp `controller.vel_setpoint` towards `controller.vel_ramp_target` at a ramp rate of `controller.config.vel_ramp_rate`.\n\n### Changed\n* Increased switching frequency from around 8kHz to 24kHz. Control loops still run at 8kHz.\n* Renamed `axis.enable_step_dir` to `axis.step_dir_active`\n* New process for working with STM32CubeMX.\n\n### Fixed\n* Would get ERROR_CONTROL_DEADLINE_MISSED along with every ERROR_PHASE_RESISTANCE_OUT_OF_RANGE.\n* ODrive tool can now run interactive nested scripts with \"%run -i script.py\"\n\n## [0.4.6] - 2018-10-07\n### Fixed\n* Broken printing of floats on ascii protocol\n\n## [0.4.5] - 2018-10-06\n### Added\n* **Trapezoidal Trajectory Planner**\n* Hook to execute protocol property written callback\n* -Wdouble-promotion warning to compilation\n\n### Changed\n* Make python tools compatible with python 2.7 (so it can be used with ROS)\n  * Threading API constructor can't take the daemon parameter, so all thread creation had to be expanded out.\n  * `TimeoutError` isn't defined, but it makes for more readable code, so I defined it as an OSError subclass.\n  * `ModuleNotFoundError` is replaced by the older ImportError.\n  * Print function imported from future\n* Using new hooks to calculate:\n  * `motor.config.current_control_bandwidth`\n    * This deprecates `motor.set_current_control_bandwidth()`\n  * `encoder.config.bandwidth`\n* Default value for `motor.resistance_calib_max_voltage` changed to 2.0\n\n### Fixed\n* An issue where the axis state machine would jump in and out of idle when there is an error\n* There is a [bug](https://github.com/ARM-software/CMSIS_5/issues/267) in the arm fast math library, which gives spikes in the output of arm_cos_f32 for input values close to -pi/2. We fixed the bug locally, and hence are using \"our_arm_cos_f32\".\n\n## [0.4.4] - 2018-09-18\n### Fixed\n* Serious reliability issue with USB communication where packets on Native and the CDC interface would collide with each other.\n\n## [0.4.3] - 2018-08-30\n### Added\n* `min_endstop` and `max_endstop` objects can be configured on GPIO\n* Axes can be homed if `min_endstop` is enabled\n* Encoder position count \"homed\" to zero when index is found.\n\n### Changed\n* We now enforce encoder offset calibration must happen after index is found (if using index)\n* Renaming of the velocity estimate `pll_vel` -> `vel_estimate`.\n* Hardcoded maximum inductance now 2500 uH.\n\n### Fixed\n* Incorrect shifting of offset during index callback\n* Once you got an axis error `ERROR_INVALID_STATE` you could never clear it\n* Char to int conversion to read motornum on arduino example\n* GPIO above #5 would not be used correctly in some cases\n\n## [0.4.2] - 2018-08-04\n### Added\n* Hall sensor feedback\n* Configurable RC PWM input\n* Ability to read axis FET temperature\n* Config settings for:\n  * `motor.config.requested_current_range`\n  * `motor.config.current_control_bandwidth` and `motor.set_current_control_bandwidth`. Latter required to invoke gain recalculation.\n  * `encoder.config.bandwidth`\n  * `sensorless_estimator.config.pm_flux_linkage`\n\n## [0.4.1] - 2018-07-01\n### Fixed\n* Encoder errors would show up as Axis error `ERROR_MOTOR_FAILED` instead of `ERROR_ENCODER_FAILED`.\n* Various pip install dependencies\n* Ability for python tools threads to quit properly\n* dfuse error prints now python3 compatible\n\n## [0.4.0] - 2018-06-10\n### Added\n* Encoder can now go forever in velocity/torque mode due to using circular encoder space.\n* Protocol supports function return values\n* bake Git-derived firmware version into firmware binary. The firmware version is exposed through the `fw_version_[...]` properties.\n* `make write_otp` command to burn the board version onto the ODrive's one-time programmable memory. If you have an ODrive v3.4 or older, you should run this once for a better firmware update user experience in the future. Run the command without any options for more details. Once set, the board version is exposed through the `hw_version_[...]` properties.\n* infrastructure to publish the python tools to PyPi. See `tools/setup.py` for details.\n* Automated test script `run_tests.py`\n* System stats (e.g. stack usage) are exposed under `<odrv>.system_stats`\n\n### Changed\n* DFU script updates\n  * Verify the flash after writing\n  * Automatically download firmware from GitHub releases if no file is provided\n  * Retain configuration during firmware updates\n* Refactor python tools\n  * The scripts `explore_odrive.py`, `liveplotter.py`, `drv_status.py` and `rate_test.py` have been merged into one single `odrivetool` script. Running this script without any arguments provides the shell that `explore_odrive.py` used to provide.\n  * The command line options of `odrivetool` have changed compared to the original `explore_odrive.py`. See `odrivetool --help` for more details.\n  * `odrivetool` (previously `explore_odrive.py`) now supports controlling multiple ODrives concurrently (`odrv0`, `odrv1`, ...)\n  * No need to restart the `odrivetool` shell when devices get disconnected and reconnected\n  * ODrive accesses from within python tools are now thread-safe. That means you can read from the same remote property from multiple threads concurrently.\n  * The liveplotter (`odrivetool liveplotter`, formerly `liveplotter.py`) does no longer steal focus and closes as expected\n  * Add commands `odrivetool backup-config` and `odrivetool restore-config`\n  * (experimental: start liveplotter from `odrivetool` shell by typing `start_liveplotter(lambda: odrv0.motor0.encoder.encoder_state)`)\n* Set thread priority of USB pump thread above protocol thread\n* GPIO3 not sensitive to edges by default\n* The device now appears as a composite device on USB. One subdevice is still a CDC device (virtual COM port), the other subdevice is a vendor specific class. This should resolve several issues that were caused by conflicting kernel drivers or OS services.\n* Add WinUSB descriptors. This will tell Windows >= 8 to automatically load winusb.sys for the ODrive (only for the vendor specific subdevice). This makes it possible to use the ODrive from userspace via WinUSB with zero configuration. The Python tool currently still uses libusb so Zadig is still required.\n* Add a configuration to enable the ASCII protocol on USB at runtime. This will only enable the ASCII protocol on the USB CDC subdevice, not the vendor specific subdevice so the python tools will still be able to talk to the ODrive.\n\n### Fixed\n* Enums now transported with correct underlying type on native protocol\n* USB issue where the device would stop responding when the host script would quit abruptly or reset the device during operation\n\n## [0.3.6] - 2018-03-26\n### Added\n* **Storing of configuration parameters to Non Volatile Memory**\n* **USB Bootloader**\n* `make erase_config` to erase the configuration with an STLink (the configuration can also be erased from within explore_odrive.py, using `odrv0.erase_configuration()`)\n* Travis-CI builds firmware for all board versions and deploys the binaries when a tag is pushed to master\n* General purpose ADC API. See function get_adc_voltage() in low_level.cpp for more detais.\n\n### Changed\n* Most of the code from `lowlevel.c` moved to `axis.cpp`, `encoder.cpp`, `controller.cpp`, `sensorless_estimator.cpp`, `motor.cpp` and the corresponding header files\n* Refactoring of the developer-facing communication protocol interface. See e.g. `axis.hpp` or `controller.hpp` for examples on how to add your own fields and functions\n* Change of the user-facing field paths. E.g. `my_odrive.motor0.pos_setpoint` is now at `my_odrive.axis0.controller.pos_setpoint`. Names are mostly unchanged.\n* Rewrite of the top-level per-axis state-machine\n* The build is now configured using the `tup.config` file instead of editing source files. Make sure you set your board version correctly. See [here](README.md#configuring-the-build) for details.\n* The toplevel directory for tup is now `Firmware`. If you used tup before, go to `Firmware` and run `rm -rd ../.tup; rm -rd build/*; make`.\n* Update CubeMX generated STM platform code to version 1.19.0\n* Remove `UUID_0`, `UUID_1` and `UUID_2` from USB protocol. Use `serial_number` instead.\n* Freertos memory pool (task stacks, etc) now uses Core Coupled Memory.\n\n### Fixed\n* malloc now fails if we run out of memory (before it would always succeed even if we are out of ram...)\n\n## [0.3.5] - 2018-03-04\n### Added\n* Reporting error if your encoder CPR is incorrect\n* Ability to start anticogging calibration over USB protocol\n* Reporting of DRV status/control registers and fault codes\n* DRV status read script\n* Microsecond delay function\n* Travis-CI\n* Firmware update over USB\n\n### Changed\n* Build system is now tup instead of make. Please check the [Readme](README.md#installing-prerequisites) for installation instructions.\n\n## [0.3.4] - 2018-02-13\n### Fixed\n* Broken way to check for python 2. Python 2 not supported yet.\n\n## [0.3.3] - 2018-02-12\n### Added\n* Liveplotter script\n* Automatic recovery of USB halt/stall condition\n\n### Changed\n* Modified python code to be Python 2 compatible\n\n### Fixed\n* USB CSC (USB serial) now reports a sensible baud rate\n\n## [0.3.2] - 2018-02-02\n### Added\n* Gimbal motor mode\n* Encoder index pulse support\n* `resistance_calib_max_voltage` parameter\n\n## [0.3.1] - 2018-01-18\n### Added\n* UUID Endpoint\n* Reporting of correct ODrive version on USB descriptor\n* Getting started instructions for VSCode\n\n### Changed\n* USB Product ID to 0x0D32, as it is the only Pid we were allocated on [pid.codes](http://pid.codes/1209/0D32/)\n* Recommended method to debug firmware from VSCode now uses Cortex-Debug extension instead of native-debug.\n* Refactor IDE instructions into separate files\n\n### Fixed\n* Bug where the remote function calls from Python to the ODrive were not working properly.\n\n## [0.3] - 2017-12-18\n### Added\n* **New binary communication protocol**\n  * This is a much richer and more efficient binary protocol than the old human-readable protocol.\n  * The old protocol is still available (but will be depricated eventually). You must manually chose to fall back on this protocol if you wish to still use it.\n* Support for C++\n* Demo scripts for getting started with commanding ODrive from python\n* Protection from user setting current_lim higher than is measurable\n* Current sense shunt values for HW v3.4\n* Check DRV chip fault line\n\n### Changed\n* Shunt resistance values for v3.3 and earlier to include extra resistance of PCB\n* Default HW revision to v3.4\n* Refactoring of control code:\n  * Lifted top layer of low_level.c into Axis.cpp\n\n## [0.2.2] - 2017-11-17\n### Fixed\n* Incorrect TIM14 interrupt mapping on board v3.2 caused hard-fault\n\n### Changed\n* GPIO communication mode now defaults to NONE\n\n## [0.2.1] - 2017-11-14\n### Fixed\n* USB communication deadlock\n* EXTI handler redefiniton in V3.2\n\n### Changed\n* Resistance/inductance measurement now saved dispite errors, to allow debugging\n\n## [0.2.0] - 2017-11-12\n### Added\n* UART communication\n* Setting to select UART or Step/dir on GIPIO 1,2\n* Basic Anti-cogging\n\n## [0.1.0] - 2017-08-26\n### Added\n* Step/Dir interface\n* this Changelog\n* motor control interrupt timing diagram\n* uint16 exposed variable type\n* null termination to USB string parsing\n\n### Changed\n* Fixed Resistance measurement bug\n* Simplified motor control adc triggers\n* Increased AUX bridge deadtime\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.21875,
          "content": "FROM ubuntu:bionic\n\n# Prepare the build environment and dependencies\nRUN \\\n\tset -x && \\\n\tapt-get update && \\\n\tapt-get -y install software-properties-common && \\\n\tadd-apt-repository ppa:team-gcc-arm-embedded/ppa && \\\n\tadd-apt-repository ppa:jonathonf/tup && \\\n\tapt-get update && \\\n\tapt-get -y upgrade && \\\n\tapt-get -y install gcc-arm-embedded openocd tup python3.7 python3-yaml python3-jinja2 python3-jsonschema build-essential git time && \\\n\t# Build step below does not know about debian's python naming schemme\n\tln -s /usr/bin/python3.7 /usr/bin/python && \\\n\tmkdir -p ODrive\n\nWORKDIR ODrive/Firmware\n\n# Must attach the firmware tree into the container\nCMD \\\n\t# Regenerate autogen/version.c\n\tmkdir -p autogen && \\\n\tpython ../tools/odrive/version.py \\\n\t--output autogen/version.c && \\\n\t# Regenerate python interface\n\tpython interface_generator_stub.py \\\n\t--definitions odrive-interface.yaml \\\n\t--template ../tools/enums_template.j2 \\\n\t--output ../tools/odrive/enums.py && \\\n\tpython interface_generator_stub.py \\\n\t--definitions odrive-interface.yaml \\\n\t--template ../tools/arduino_enums_template.j2 \\\n\t--output ../Arduino/ODriveArduino/ODriveEnums.h && \\\n\t# Hack around Tup's dependency on FUSE\n\ttup init && \\\n\ttup generate build.sh && \\\n\t./build.sh\n"
        },
        {
          "name": "Firmware",
          "type": "tree",
          "content": null
        },
        {
          "name": "GUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2016-2018 ODrive Robotics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "ODrive_Workspace.code-workspace",
          "type": "blob",
          "size": 2.095703125,
          "content": "{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \"Firmware\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"tools\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"docs\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"analysis\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"Arduino\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"GUI\"\n\t\t}\n\t],\n\t\"settings\": {\n\t\t\"c-cpp-flylint.cppcheck.standard\": [\"c99\",\"c++14\"],\n\t\t\"files.associations\": {\n\t\t\t\"*.config\": \"yaml\",\n\t\t\t\"memory\": \"cpp\",\n\t\t\t\"utility\": \"cpp\",\n\t\t\t\"deque\": \"cpp\",\n\t\t\t\"vector\": \"cpp\",\n\t\t\t\"array\": \"cpp\",\n\t\t\t\"*.tcc\": \"cpp\",\n\t\t\t\"cctype\": \"cpp\",\n\t\t\t\"clocale\": \"cpp\",\n\t\t\t\"cstdint\": \"cpp\",\n\t\t\t\"cstdio\": \"cpp\",\n\t\t\t\"cstdlib\": \"cpp\",\n\t\t\t\"cstring\": \"cpp\",\n\t\t\t\"cwchar\": \"cpp\",\n\t\t\t\"cwctype\": \"cpp\",\n\t\t\t\"exception\": \"cpp\",\n\t\t\t\"functional\": \"cpp\",\n\t\t\t\"initializer_list\": \"cpp\",\n\t\t\t\"iosfwd\": \"cpp\",\n\t\t\t\"istream\": \"cpp\",\n\t\t\t\"limits\": \"cpp\",\n\t\t\t\"new\": \"cpp\",\n\t\t\t\"ostream\": \"cpp\",\n\t\t\t\"stdexcept\": \"cpp\",\n\t\t\t\"streambuf\": \"cpp\",\n\t\t\t\"string_view\": \"cpp\",\n\t\t\t\"system_error\": \"cpp\",\n\t\t\t\"tuple\": \"cpp\",\n\t\t\t\"type_traits\": \"cpp\",\n\t\t\t\"typeinfo\": \"cpp\",\n\t\t\t\"algorithm\": \"cpp\",\n\t\t\t\"chrono\": \"cpp\",\n\t\t\t\"condition_variable\": \"cpp\",\n\t\t\t\"future\": \"cpp\",\n\t\t\t\"arm_math.h\": \"c\",\n\t\t\t\"iostream\": \"cpp\",\n\t\t\t\"cmath\": \"cpp\",\n\t\t\t\"csignal\": \"cpp\",\n\t\t\t\"cstdarg\": \"cpp\",\n\t\t\t\"cstddef\": \"cpp\",\n\t\t\t\"ctime\": \"cpp\",\n\t\t\t\"unordered_map\": \"cpp\",\n\t\t\t\"fstream\": \"cpp\",\n\t\t\t\"iomanip\": \"cpp\",\n\t\t\t\"optional\": \"cpp\",\n\t\t\t\"sstream\": \"cpp\",\n\t\t\t\"utils.h\": \"c\",\n\t\t\t\"atomic\": \"cpp\",\n\t\t\t\"hash_map\": \"cpp\",\n\t\t\t\"strstream\": \"cpp\",\n\t\t\t\"bit\": \"cpp\",\n\t\t\t\"bitset\": \"cpp\",\n\t\t\t\"cinttypes\": \"cpp\",\n\t\t\t\"codecvt\": \"cpp\",\n\t\t\t\"compare\": \"cpp\",\n\t\t\t\"complex\": \"cpp\",\n\t\t\t\"concepts\": \"cpp\",\n\t\t\t\"forward_list\": \"cpp\",\n\t\t\t\"list\": \"cpp\",\n\t\t\t\"map\": \"cpp\",\n\t\t\t\"set\": \"cpp\",\n\t\t\t\"unordered_set\": \"cpp\",\n\t\t\t\"iterator\": \"cpp\",\n\t\t\t\"memory_resource\": \"cpp\",\n\t\t\t\"numeric\": \"cpp\",\n\t\t\t\"random\": \"cpp\",\n\t\t\t\"ratio\": \"cpp\",\n\t\t\t\"string\": \"cpp\",\n\t\t\t\"hash_set\": \"cpp\",\n\t\t\t\"slist\": \"cpp\",\n\t\t\t\"mutex\": \"cpp\",\n\t\t\t\"ranges\": \"cpp\",\n\t\t\t\"shared_mutex\": \"cpp\",\n\t\t\t\"stop_token\": \"cpp\",\n\t\t\t\"thread\": \"cpp\",\n\t\t\t\"cfenv\": \"cpp\",\n\t\t\t\"typeindex\": \"cpp\",\n\t\t\t\"valarray\": \"cpp\",\n\t\t\t\"variant\": \"cpp\",\n\t\t\t\"types\": \"cpp\",\n\t\t\t\"config\": \"cpp\",\n\t\t\t\"containers\": \"cpp\",\n\t\t\t\"readerwriter\": \"cpp\",\n\t\t\t\"charconv\": \"cpp\",\n\t\t\t\"image\": \"cpp\",\n\t\t\t\"imageutils\": \"cpp\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0009765625,
          "content": "## Important Note\n\nThe firmware in this repository is compatible with the ODrive v3.x (NRND) and is no longer under active development.\n\nFirmware for the new generation of ODrives ([ODrive Pro](https://odriverobotics.com/shop/odrive-pro), [S1](https://odriverobotics.com/shop/odrive-s1), [Micro](https://odriverobotics.com/shop/odrive-micro), etc.) is currently being actively maintained and developed, however its source code is currently not publicly available. Access may be available under NDA, please [reach out to us](mailto:info@odriverobotics.com) for inquiries.\n\n## Overview\n\n![ODrive Logo](https://static1.squarespace.com/static/58aff26de4fcb53b5efd2f02/t/59bf2a7959cc6872bd68be7e/1505700483663/Odrive+logo+plus+text+black.png?format=1000w)\n\nThis project is all about accurately driving brushless motors, for cheap. The aim is to make it possible to use inexpensive brushless motors in high performance robotics projects, like [this](https://www.youtube.com/watch?v=WT4E5nb3KtY).\n\n| Branch | Build Status |\n|--------|--------------|\n| master | [![Build Status](https://travis-ci.org/madcowswe/ODrive.png?branch=master)](https://travis-ci.org/madcowswe/ODrive) |\n| devel  | [![Build Status](https://travis-ci.org/madcowswe/ODrive.png?branch=devel)](https://travis-ci.org/madcowswe/ODrive) |\n\n[![pip install odrive (nightly)](https://github.com/madcowswe/ODrive/workflows/pip%20install%20odrive%20(nightly)/badge.svg)](https://github.com/madcowswe/ODrive/actions?query=workflow%3A%22pip+install+odrive+%28nightly%29%22)\n\nPlease refer to the [Developer Guide](https://docs.odriverobotics.com/v/latest/developer-guide.html#) to get started with ODrive firmware development.\n\n\n### Repository Structure\n * **Firmware**: ODrive firmware\n * **tools**: Python library & tools\n * **docs**: Documentation\n\n### Other Resources\n\n * [Main Website](https://www.odriverobotics.com/)\n * [User Guide](https://docs.odriverobotics.com/)\n * [Forum](https://discourse.odriverobotics.com/)\n * [Chat](https://discourse.odriverobotics.com/t/come-chat-with-us/281)\n"
        },
        {
          "name": "analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerbuild.sh",
          "type": "blob",
          "size": 0.86328125,
          "content": "#!/usr/bin/env bash\nfunction cleanup {\n    echo \"Removing previous build artifacts\"\n    rm -rf build/ Firmware/autogen Firmware/build Firmware/.tup\n    docker rm odrive-build-cont\n}\n\nfunction gc {\n    cleanup\n    docker rmi odrive-build-img\n    docker image prune\n}\n\nfunction build {\n    cleanup\n\n    echo \"Building the build-environment image\"\n    docker build -t odrive-build-img .\n\n    echo \"Build in container\"\n    docker run -it -v $(pwd):/ODrive --name odrive-build-cont --user $(id -u)  odrive-build-img:latest \n}\n\nfunction usage {\n    echo \"usage: $0 (build | cleanup | gc)\"\n    echo\n    echo \"build   -- build in docker and extract the artifacts.\"\n    echo \"cleanup -- remove build artifacts from previous build\"\n    echo \"gc      -- remove all build images and containers\"\n}\n\ncase $1 in\n    build)\n\tbuild\n\t;;\n    cleanup)\n\tcleanup\n\t;;\n    gc)\n\tgc\n\t;;\n    *)\n\tusage\n\t;;\nesac\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}