{
  "metadata": {
    "timestamp": 1736565663724,
    "page": 560,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "khizmax/libcds",
      "stars": 2580,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3662109375,
          "content": "/doc\n/sandbox\n*.o\n*.d\n/bin\n/obj\n/projects/Win/vc14/cds.sdf\n/projects/Win/vc14/cds.v14.suo\n/projects/Win/vc14/*.user\n/projects/Win/vc14/*.opensdf\n/projects/Win/vc14/.vs/\n/projects/Win/vc141/.vs/\n/projects/Win/vc141/*.user\n*.log\n/.project\n/projects/Win/vc14/*.opendb\n/test/stress/data/dictionary.txt\n/projects/Win/vc14/cds.VC.db\n/.cproject\n/.settings/\n/tools/change_license.pl\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 8.1708984375,
          "content": "language: cpp\n\ninstall: \n  - chmod +x ./build/CI/travis-ci/install.sh\n  - ./build/CI/travis-ci/install.sh\n\nscript:\n  - chmod +x ./build/CI/travis-ci/run.sh\n  - ./build/CI/travis-ci/run.sh\n\nlinux: &linux_gcc\n  os: linux\n  dist: bionic\n  addons:\n    apt:\n      sources:\n        - ubuntu-toolchain-r-test\n      packages:\n        - g++-8\n  compiler:\n    - g++-8\n  before_install:\n    - eval \"CC=gcc-8 && CXX=g++-8\"\n    \n\nlinux: &linux_clang\n  os: linux\n  dist: bionic\n  addons:\n    apt:\n      sources:\n        - ubuntu-toolchain-r-test\n        - llvm-toolchain-bionic-6.0\n      packages:\n        - clang-6.0\n  compiler:\n    - clang-6.0\n  before_install:\n    - eval \"CC=clang-6.0 && CXX=clang++-6.0\"\n  \n      \nosx: &osx\n   os: osx\n   osx_image: xcode9.2\n   compiler:\n    - clang\n   before_install:\n    - eval \"CC=clang && CXX=clang++\"\n    \n\nmatrix:\n  include:\n##   BUILD_TYPE=Release CXX_COMPILER=g++-8\n    - <<: *linux_gcc\n      env: TARGET=unit-deque BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-ilist BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-list BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-map BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-misc BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-pqueue BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-queue BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-feldman BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-michael-michael BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-michael-lazy BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-michael-iterable BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-skip BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-split-michael BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-split-lazy BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-iset-split-iterable BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-set BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-striped-set BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-stack BUILD_TYPE=Release \n    - <<: *linux_gcc\n      env: TARGET=unit-tree BUILD_TYPE=Release \n\n##   BUILD_TYPE=Debug CXX_COMPILER=g++-8\n    - <<: *linux_gcc\n      env: TARGET=unit-deque BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-ilist BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-list BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-map BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-misc BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-pqueue BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-queue BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-iset BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-set BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-striped-set BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-stack BUILD_TYPE=Debug \n    - <<: *linux_gcc\n      env: TARGET=unit-tree BUILD_TYPE=Debug \n\n##   BUILD_TYPE=Release CXX_COMPILER=clang-6.0\n    - <<: *linux_clang\n      env: TARGET=unit-deque BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-ilist BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-list BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-misc BUILD_TYPE=Release  LINKER_FLAGS=-latomic\n    - <<: *linux_clang\n      env: TARGET=unit-pqueue BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-queue BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-feldman BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-michael-michael BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-michael-iterable BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-michael-lazy BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-skip BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-split-iterable BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-split-michael BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-set-split-lazy BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-striped-set BUILD_TYPE=Release \n    - <<: *linux_clang\n      env: TARGET=unit-stack BUILD_TYPE=Release \n# FIXME: building too long. Travis-ci will stop building.\n#  - BUILD_TYPE=Release  TARGET=unit-map\n#  - BUILD_TYPE=Release  TARGET=unit-iset\n#  - BUILD_TYPE=Release  TARGET=unit-tree\n\n##   BUILD_TYPE=Debug CXX_COMPILER=clang-6.0\n    - <<: *linux_clang\n      env: TARGET=unit-deque BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-ilist BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-list BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-map BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-misc BUILD_TYPE=Debug  LINKER_FLAGS=-latomic\n    - <<: *linux_clang\n      env: TARGET=unit-pqueue BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-queue BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-iset BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-set BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-striped-set BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-stack BUILD_TYPE=Debug \n    - <<: *linux_clang\n      env: TARGET=unit-tree BUILD_TYPE=Debug \n\n# RELEASE\n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-deque \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-ilist \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-list \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-misc \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-pqueue \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-queue \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-feldman \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-michael-michael \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-michael-lazy \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-michael-iterable \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-skip \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-split-michael \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-split-lazy \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-iset-split-iterable \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-striped-set \n    - <<: *osx\n      env: BUILD_TYPE=Release TARGET=unit-stack \n# FIXME: building too long. Travis-ci will stop building.\n#    - <<: *osx\n#      env: BUILD_TYPE=Release TARGET=unit-map \n#    - <<: *osx\n#      env: BUILD_TYPE=Release TARGET=unit-set \n#    - <<: *osx\n#      env: BUILD_TYPE=Release TARGET=unit-tree \n\n# DEBUG\n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-deque \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-ilist \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-list \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-map \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-misc \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-pqueue \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-queue \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-feldman \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-michael-michael \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-michael-lazy \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-michael-iterable \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-skip \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-split-michael \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-split-lazy \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-iset-split-iterable \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-set \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-striped-set \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-stack \n    - <<: *osx\n      env: BUILD_TYPE=Debug TARGET=unit-tree \n      \n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.65234375,
          "content": "cmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)\n\ncmake_policy(SET CMP0016 NEW)\nif(POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/build/cmake ${CMAKE_MODULE_PATH})\ninclude(TargetArch)\ninclude(CheckIncludeFileCXX)\n\nproject(cds)\n\nset(PROJECT_VERSION 2.3.3)\n\n# Options\noption(LIBCDS_WITH_TESTS \"Build unit tests\" OFF)\noption(LIBCDS_WITH_TESTS_COVERAGE \"Analyze test coverage using gcov (only for gcc)\" OFF)\noption(LIBCDS_WITH_BOOST_ATOMIC \"Use boost atomics (only for boost >= 1.54)\" OFF)\noption(LIBCDS_WITH_ASAN \"Build ASan+UBSan instrumented code\" OFF)\noption(LIBCDS_WITH_TSAN \"Build TSan instrumented code\" OFF)\noption(LIBCDS_ENABLE_UNIT_TEST \"Enable unit test\" ON)\noption(LIBCDS_ENABLE_STRESS_TEST \"Enable stress test\" ON)\nset(CMAKE_TARGET_ARCHITECTURE \"\" CACHE string \"Target build architecture\")\n\nfind_package(Threads)\n\nif(NOT CMAKE_TARGET_ARCHITECTURE)\n    target_architecture(CMAKE_TARGET_ARCHITECTURE)\nendif()\n\nif(APPLE)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_DARWIN_C_SOURCE\")\nendif()\n\nif(MSVC)\n    add_definitions(-DCDS_BUILD_LIB)\nendif()\n\nif(LIBCDS_WITH_BOOST_ATOMIC)\n    if(TARGET boost::atomic)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DCDS_USE_BOOST_ATOMIC\")\n        link_libraries(boost::atomic)\n    else()\n        find_package(Boost 1.53 COMPONENTS atomic)\n        if(Boost_FOUND)\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DCDS_USE_BOOST_ATOMIC\")\n            message(STATUS \"Boost version allows using of boost.atomic: activated\")\n        endif()\n    endif()\nendif(LIBCDS_WITH_BOOST_ATOMIC)\n\nif(LIBCDS_WITH_ASAN)\n    if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"-D_DEBUG\")\n        set(CMAKE_CXX_FLAGS_RELEASE \"-DNDEBUG\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O1 -fPIC -fsanitize=address,undefined -g -DCDS_ADDRESS_SANITIZER_ENABLED -fno-omit-frame-pointer -fno-optimize-sibling-calls\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O1 -fsanitize=address,undefined -g -DCDS_ASAN_ENABLED -fno-omit-frame-pointer -fno-optimize-sibling-calls\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined -pie\")\n    else()\n        message(WARNING \"Compiler does not support AddressSanitizer\")\n    endif()\nendif(LIBCDS_WITH_ASAN)\n\nif(LIBCDS_WITH_TSAN)\n    if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"-D_DEBUG\")\n        set(CMAKE_CXX_FLAGS_RELEASE \"-DNDEBUG\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O1 -fPIC -fsanitize=thread -g -DCDS_THREAD_SANITIZER_ENABLED -fno-omit-frame-pointer\")\n        set(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} -O1 -fPIC -fsanitize=thread -g -DCDS_THREAD_SANITIZER_ENABLED -fno-omit-frame-pointer\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread -pie\")\n    else()\n        message(WARNING \"Compiler does not support ThreadSanitizer\")\n    endif()\nendif(LIBCDS_WITH_TSAN)\n\nif(LIBCDS_WITH_TESTS_COVERAGE)\n    if(CMAKE_COMPILER_IS_GNUCXX)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -ftest-coverage\")\n        message(STATUS \"Test coverage analysis: activated\")\n    else()\n        message(WARNING \"Compiler is not GNU gcc! Test coverage couldn't be analyzed\")\n    endif()\nendif(LIBCDS_WITH_TESTS_COVERAGE)\n\nset(CDS_SHARED_LIBRARY ${PROJECT_NAME})\nset(CDS_STATIC_LIBRARY ${PROJECT_NAME}-s)\n\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nif(CDS_BIN_DIR)\n    set(EXECUTABLE_OUTPUT_PATH ${CDS_BIN_DIR})\n    set(LIBRARY_OUTPUT_PATH ${CDS_BIN_DIR})\nelse()\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\nendif()\nmessage(STATUS \"Binary output path: ${EXECUTABLE_OUTPUT_PATH}\")\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Debug CACHE STRING \"Default build type to Debug\" FORCE)\nendif()\n\n# if the user passed LIBCDS_CXX_STANDARD on the command line, use it\n# otherwise default to cxx 11\nif (NOT LIBCDS_CXX_STANDARD)\n    set(LIBCDS_CXX_STANDARD 11 CACHE string \"Preferred C++ standard\")\nendif()\nset(CMAKE_CXX_STANDARD ${LIBCDS_CXX_STANDARD})\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n\n    list(APPEND LIBCDS_PRIVATE_CXX_FLAGS \"-Wall\" \"-Wextra\" \"-pedantic\")\n\n    if(CMAKE_TARGET_ARCHITECTURE STREQUAL \"x86_64\")\n        list(APPEND LIBCDS_PUBLIC_CXX_FLAGS \"-mcx16\")\n        set(LIB_SUFFIX \"64\")\n\n        # GCC-7: 128-bit atomics support is implemented via libatomic on amd64\n        #        see https://gcc.gnu.org/ml/gcc/2017-01/msg00167.html\n        # Maybe, it will be changed in future\n        if(CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"7.0.0\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"8.0.0\")\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -latomic\")\n        endif()\n    endif()\nendif()\n\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n    set(CMAKE_CXX_ARCHIVE_CREATE \"<CMAKE_AR> -q -c ${CMAKE_STATIC_LINKER_FLAGS} -o <TARGET> <OBJECTS>\")\n    list(APPEND LIBCDS_PRIVATE_CXX_FLAGS \"-Wl,-G\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-brtl\")\nendif()\n\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG\")\n\nCHECK_INCLUDE_FILE_CXX(linux/membarrier.h CDS_HAVE_LINUX_MEMBARRIER_H CMAKE_CXX_FLAGS)\n\n# To see what compiler flags we use\nset(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n\nmessage(\"Build type -- ${CMAKE_BUILD_TYPE}\")\nmessage(\"Compiler version: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\")\nmessage(\"System: ${CMAKE_SYSTEM_NAME} version: ${CMAKE_SYSTEM_VERSION}\")\nmessage(\"Target architecture: ${CMAKE_TARGET_ARCHITECTURE}\")\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    message(\"Compiler flags: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} ${LIBCDS_PUBLIC_CXX_FLAGS} ${LIBCDS_PRIVATE_CXX_FLAGS}\")\nelse()\n    message(\"Compiler flags: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} ${LIBCDS_PUBLIC_CXX_FLAGS} ${LIBCDS_PRIVATE_CXX_FLAGS}\")\nendif()\nmessage(\"Exe flags: ${CMAKE_EXE_LINKER_FLAGS}\")\n\n# Component names for separate distribution in rpms, debs etc.\nset(LIBRARIES_COMPONENT lib)\nset(HEADERS_COMPONENT devel)\n\nset(SOURCES src/init.cpp\n            src/hp.cpp\n            src/hp_thread_local.cpp\n            src/dhp.cpp\n            src/urcu_gp.cpp\n            src/urcu_sh.cpp\n            src/thread_data.cpp\n            src/topology_hpux.cpp\n            src/topology_linux.cpp\n            src/topology_osx.cpp\n            src/dllmain.cpp)\n\nadd_library(${CDS_SHARED_LIBRARY} SHARED ${SOURCES})\nset_target_properties(${CDS_SHARED_LIBRARY} PROPERTIES VERSION ${PROJECT_VERSION}\n        DEBUG_POSTFIX \"_d\")\nset_property(TARGET ${CDS_SHARED_LIBRARY} PROPERTY CXX_STANDARD ${LIBCDS_CXX_STANDARD})\n\nif(MINGW)\n    set_target_properties(${CDS_SHARED_LIBRARY} PROPERTIES DEFINE_SYMBOL CDS_BUILD_LIB)\nendif()\n\nadd_library(${CDS_STATIC_LIBRARY} STATIC ${SOURCES})\nset_target_properties(${CDS_STATIC_LIBRARY} PROPERTIES DEBUG_POSTFIX \"_d\")\nset_property(TARGET ${CDS_STATIC_LIBRARY} PROPERTY CXX_STANDARD ${LIBCDS_CXX_STANDARD})\nif(MINGW)\n    target_compile_definitions(${CDS_STATIC_LIBRARY} PRIVATE CDS_BUILD_STATIC_LIB)\nendif()\n\ntarget_link_libraries(${CDS_SHARED_LIBRARY} PRIVATE ${CMAKE_THREAD_LIBS_INIT})\ntarget_link_libraries(${CDS_STATIC_LIBRARY} PRIVATE ${CMAKE_THREAD_LIBS_INIT})\ntarget_include_directories(${CDS_SHARED_LIBRARY} INTERFACE \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\"\n                                                            $<INSTALL_INTERFACE:include>)\ntarget_include_directories(${CDS_STATIC_LIBRARY} INTERFACE \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\"\n                                                            $<INSTALL_INTERFACE:include>)\ntarget_compile_options(${CDS_SHARED_LIBRARY} PUBLIC \"${LIBCDS_PUBLIC_CXX_FLAGS}\")\ntarget_compile_options(${CDS_STATIC_LIBRARY} PUBLIC \"${LIBCDS_PUBLIC_CXX_FLAGS}\")\ntarget_compile_options(${CDS_SHARED_LIBRARY} PRIVATE \"${LIBCDS_PRIVATE_CXX_FLAGS}\")\ntarget_compile_options(${CDS_STATIC_LIBRARY} PRIVATE \"${LIBCDS_PRIVATE_CXX_FLAGS}\")\n\nif(NOT DISABLE_INSTALL_SHARED)\n    install(TARGETS ${CDS_SHARED_LIBRARY} EXPORT LibCDSConfig RUNTIME DESTINATION bin ARCHIVE DESTINATION lib LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT ${LIBRARIES_COMPONENT} NAMELINK_SKIP)\n    install(TARGETS ${CDS_SHARED_LIBRARY} EXPORT LibCDSConfig RUNTIME DESTINATION bin ARCHIVE DESTINATION lib LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT ${HEADERS_COMPONENT} NAMELINK_ONLY)\n    install(TARGETS ${CDS_STATIC_LIBRARY} EXPORT LibCDSConfig DESTINATION lib${LIB_SUFFIX} COMPONENT ${LIBRARIES_COMPONENT})\nendif()\ninstall(EXPORT LibCDSConfig FILE LibCDSConfig.cmake NAMESPACE LibCDS:: DESTINATION lib/cmake/LibCDS)\ninstall(DIRECTORY ${PROJECT_SOURCE_DIR}/cds DESTINATION include COMPONENT ${HEADERS_COMPONENT})\n\nif(LIBCDS_WITH_TESTS)\n    enable_testing()\n    add_subdirectory(${PROJECT_SOURCE_DIR}/test)\n    message(STATUS \"Build tests: activated\")\nendif(LIBCDS_WITH_TESTS)\n\n### FOR PACKAGING in RPM, TGZ, DEB, NSYS...###############################################################################\nset(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})\nset(CPACK_PACKAGE_NAME ${PROJECT_NAME})\nset(CPACK_PACKAGE_CONTACT \"Max Khizhinsky <libcds-user@lists.sourceforge.net>\")\nset(CPACK_PACKAGE_RELEASE 1)\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"cds\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/build/cmake/description.txt\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Library of concurrent data structures\")\nset(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}\")\nset(DEPLOY_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_FILE_NAME}\")\n\n# TGZ specific\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\n\n# RPM specific\nset(CPACK_RPM_COMPONENT_INSTALL ON)\nset(CPACK_RPM_PACKAGE_RELEASE ${CPACK_PACKAGE_RELEASE})\nset(CPACK_RPM_POST_INSTALL_SCRIPT_FILE \"${PROJECT_SOURCE_DIR}/build/cmake/post_install_script.sh\")\nset(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE \"${PROJECT_SOURCE_DIR}/build/cmake/post_uninstall_script.sh\")\nset(CPACK_RPM_PACKAGE_URL https://github.com/khizmax/libcds)\nset(CPACK_RPM_PACKAGE_LICENSE GPL)\nset(CPACK_RPM_PACKAGE_GROUP \"System Environment/Base\")\nset(CPACK_RPM_PACKAGE_REQUIRES \"boost >= 1.50\")\nset(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION ${CPACK_PACKAGING_INSTALL_PREFIX})\nset(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION /usr/local)\nset(CPACK_RPM_devel_PACKAGE_REQUIRES \"boost >= 1.50, cds-lib = ${PROJECT_VERSION}\")\n\n# DEB specific\nset(CPACK_DEB_COMPONENT_INSTALL ON)\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"boost (>= 1.50)\")\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE \"https://github.com/khizmax/libcds\")\nset(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${PROJECT_SOURCE_DIR}/build/cmake/post_install_script.sh;;${PROJECT_SOURCE_DIR}/build/cmake/post_uninstall_script.sh;\")\n\n# NSYS specific\nset(CPACK_NSIS_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}\")\nset(CPACK_NSIS_DISPLAY_NAME \"${CPACK_PACKAGE_NAME}\")\nset(CPACK_NSIS_CONTACT ${CPACK_PACKAGE_CONTACT})\nset(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)\nset(CPACK_NSIS_MODIFY_PATH ON)\n\n# Components grouping for Mac OS X and Windows installers\nset(CPACK_COMPONENT_${LIBRARIES_COMPONENT}_GROUP \"Runtime\")\nset(CPACK_COMPONENT_${HEADERS_COMPONENT}_GROUP \"Development\")\nset(CPACK_COMPONENT_${LIBRARIES_COMPONENT}_DISPLAY_NAME \"Libraries\")\nset(CPACK_COMPONENT_${HEADERS_COMPONENT}_DISPLAY_NAME \"C++ Headers\")\nset(CPACK_COMPONENT_${HEADERS_COMPONENT}_DEPENDS ${LIBRARIES_COMPONENT})\nset(CPACK_COMPONENT_GROUP_DEVELOPMENT_DESCRIPTION \"All of the tools you'll ever need to develop lock-free oriented software with libcds\")\nset(CPACK_COMPONENT_GROUP_RUNTIME_DESCRIPTION \"Only libcds library for runtime\")\n\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3056640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 3.2734375,
          "content": "build: false\n\nshallow_clone: true              # (git clone --depth 1)\n\nimage:\n  - Visual Studio 2017\n\ninstall:\n   - sed -i \"/boost/d\" conanfile.txt # delete boost from conanfile. Conan renamed name of boost libs so we'll use appveyour's boost\n   - cmd: echo \"Downloading conan...\"\n   - cmd: set PATH=%PATH%;%PYTHON%/Scripts/\n   - cmd: pip.exe install conan\n   - cmd: conan user # Create the conan data directory\n   - cmd: conan --version\n   - cmd: conan install --build=missing -s arch=x86 -s build_type=%configuration% .\n   #- cmd: conan install --build=missing -s arch=x86_64 -s build_type=%configuration% conanfileWin.txt\n   - cmd: echo =======================\n   - cmd: echo %configuration%\n   - cmd: echo %platform%\n   - cmd: echo =======================\n   - cmd: set GTEST_ROOT=C:/projects/libcds/deps\n   - cmd: set BOOST_PATH=C:\\Libraries\\boost_1_66_0\n   - cmd: set GTEST_LIB32=C:\\projects\\libcds\\deps\\lib;C:\\Libraries\\boost_1_66_0\\lib32-msvc-14.1\n   - cmd: dir %GTEST_LIB32%\n   - cmd: echo =======================\n   # - cmd: set GTEST_LIB64=C:\\projects\\libcds\\deps\\lib\n   \n   \nenvironment:\n    matrix:\n    # require a library with name libboost_thread-vc141-mt-x32-1_66.lib,\n    - TARGET: gtest-stack\n    - TARGET: gtest-deque\n    - TARGET: gtest-pqueue\n    - TARGET: gtest-queue\n    \n    - TARGET: gtest-map-skip\n    - TARGET: gtest-map-split-michael\n    - TARGET: gtest-set-split-michael\n    - TARGET: gtest-misc\n    - TARGET: gtest-ilist-iterable\n    - TARGET: gtest-ilist-lazy\n    - TARGET: gtest-ilist-michael\n    - TARGET: gtest-iset-feldman\n    - TARGET: gtest-iset-michael\n    - TARGET: gtest-iset-michael-iterable\n    - TARGET: gtest-iset-michael-lazy\n    - TARGET: gtest-iset-skip\n    - TARGET: gtest-iset-split-iterable\n    - TARGET: gtest-iset-split-lazy\n    - TARGET: gtest-iset-split-michael\n    - TARGET: gtest-list-iterable\n    - TARGET: gtest-list-lazy\n    - TARGET: gtest-list-michael\n    - TARGET: gtest-map-feldman\n    - TARGET: gtest-map-michael\n    - TARGET: gtest-map-michael-iterable\n    - TARGET: gtest-map-michael-lazy\n    - TARGET: gtest-map-split-iterable\n    - TARGET: gtest-map-split-lazy\n    - TARGET: gtest-set-feldman\n    - TARGET: gtest-set-michael\n    - TARGET: gtest-set-michael-iterable\n    - TARGET: gtest-set-michael-lazy\n    - TARGET: gtest-set-skip\n    - TARGET: gtest-set-split-iterable\n    - TARGET: gtest-set-split-lazy\n    - TARGET: gtest-striped-map-boost\n    - TARGET: gtest-striped-map-cuckoo\n    - TARGET: gtest-striped-map-std\n    - TARGET: gtest-striped-set-boost\n    - TARGET: gtest-striped-set-cuckoo\n    - TARGET: gtest-striped-set-std\n    - TARGET: gtest-tree-bronson\n    - TARGET: gtest-tree-ellen\nconfiguration: \n  - Release\nplatform:\n  - Win32\n  \nbuild_script:\n     - msbuild projects/Win/vc141/cds.vcxproj /p:Configuration=%configuration% /p:PlatformTarget=\"Win32\"\n     - msbuild projects/Win/vc141/%TARGET%.vcxproj /p:Configuration=%configuration% /p:PlatformTarget=\"Win32\"\n     #- msbuild projects/Win/vc141/cds.vcxproj /p:Configuration=%configuration% /p:PlatformTarget=x64 \n     #- msbuild projects/Win/vc141/%TARGET%.vcxproj /p:Configuration=%configuration% /p:PlatformTarget=x64\n     \ntest_script:\n     - cmd: set path=%path%;%GTEST_LIB32%;C:\\projects\\libcds\\bin\\vc.v141\\%platform%-release\\\n     - cmd: C:\\projects\\libcds\\bin\\vc.v141\\%platform%-release\\%TARGET%.exe\n      \n  \n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cds",
          "type": "tree",
          "content": null
        },
        {
          "name": "change.log",
          "type": "blob",
          "size": 22.041015625,
          "content": "3.0.0\n    General release\n    - Adapt libcds for HPX (https://github.com/STEllAR-GROUP/hpx), thanks to Alexander Gaev (https://github.com/Krock21rus) for the adaptation\n    - added support for GCC-10, GCC-9, Clang-8, Clang-9 (fixed warnings)\n\n2.3.3 31.12.2018\n    Maintenance release\n    - Minimum CMake version is 3.0.2\n    - Changed software license from BSD to Boost\n    - Removed '#pragma lib' for Windows build\n    - Bugfix and minor improvements\n\n2.3.2 31.12.2017\n    Maintenance release\n    - Added: apply( Func f ) method to containers based on flat combining.\n      This method allows to execute any function over underlying container\n      in exclusive mode.\n    - Removed: -fno-strict-aliasing requirement\n    - Fixed: a serious bug in WeakRingBuffer::front()\n    - Fixed: memcpy bug in CuckooHash with store_hash feature\n\n2.3.1 01.09.2017\n    Maintenance release\n    - issue #81: bug in gc::DHP when extending thread's retired array,\n      thanks to gtroxler (https://github.com/gtroxler)\n    - Improved CMake scripts for simplifying libcds intergration with\n      other projects:\n        find_package(LibCDS)\n        add_library(mylib INTERFACE)\n        target_link_libraries(mylib INTERFACE LibCDS::cds)\n      Thansk to Louis Dionne (https://github.com/ldionne)\n\n2.3.0 31.07.2017\n    General release\n    - Changed: cds::gc::HP is totally refactored:\n        - simplified internal structures;\n        - added ability to specify an external allocator for internal data;\n        - external API for gc::HP is slightly changed: now scan type\n          cannot be changed on the fly; it can be specified only in\n          construction time.\n    - Changed: cds::gc::DHP is totally refactored to overcome some internal\n      limitations. Now gc::DHP is fully adaptive variant of Hazard Pointer \n      SMR, any dependencies on count of thread are removed, count of retired\n      data and hazard pointers per thread are increased automaticaly by perforce.\n      External API of gc::DHP class is changed: now only initial count \n      of hazard pointers can be specified in the constructor. Like new gc::HP,\n      the new gc::DHP supports an external allocator.\n    - Changed: exception handling. Now, exceptions raise by invoking new \n      cds::throw_exception() function. If you compile your code with exception disabled,\n      the function prints an exception message to stdout and calls abort()\n      instead of throwing.\n    - Flat Combining: fixed memory-order bug that can lead to crash on weak ordered\n      architecture like PowerPC or ARM\n    - Added: erase_at( iterator ) function to MichaelHashSet/Map and SplitListSet/Map\n      based on IterableList\n    - Fixed a bug in BronsonAVLTreeMap::extract_min()/extract_max()/clear().\n    - Removed: signal-handled threaded uRCU (cds::urcu::signal_threaded) due\n      bad performance\n    - Added more flat-combining queue tests, thanks to Marsel Galimullin.\n    - Changed cmake scripts to support MacOS and ARMv7/ARMv8 (64 bit),\n      thanks to Michail Komarov (https://github.com/Nemo1369)\n    - Stress tests: removed command line parameter --detail-level and\n      envvar CDSTEST_DETAIL_LEVEL for reducing compile time and executable size.\n      To make full testset compile libcds with -DCDS_STRESS_TEST_LEVEL=N where\n      N is 1 or 2.\n    - Changed: refactoring cds::backoff::exponential and cds::backoff::delay\n      back-off strategies to avoid static data members in template classes. \n    - The library is extensively tested on x86-64, PowerPC and AArch64,\n      thanks to GCC Compile Farm project\n \n2.2.0 04.01.2017\n    General release\n    - Changed: CMake is used for build libcds. Ancient build.sh has been removed\n    - Changed: unit and stress tests are migrated to googletest framework\n    - Added: IterableList - an implementation of ordered list with \n      thread-safe iterator. MichaelSet/Map and SplitListSet/Map support \n      this type of ordered list and thread-safe iterable too.\n    - Added: wait strategies for flat combining technique. Based on\n      research by Marsel Galimullin and Nikolai Rapotkin.\n    - Fixed: SkipList erase() and find() bugs that cause to infinite loop \n      or to program crash in rare case.\n    - Fixed: serious bug in MichaelSet::emplace() function\n      New node was created twice from the arguments by move semantics. \n      However, move semantics may change internal state of the argument\n      that can lead to an incorrect element and even an incorrect key\n      that breaks the set logic.\n    - Fixed: bug in FeldmanHashSet::erase_at( iterator ): due an error\n      in precondition checking the function may incorrectly return false.\n    - Fixed: possible double-free case in flat combining algorithm. \n      Thanks to Amila Jayasekara who pointed me to this problem\n    - Changed: cds::opt::buffer option is divided to initialized\n      (cds::opt::v::initialized_dynamic_buffer, cds::opt::v::initialized_static_buffer)\n      and uninitialized (cds::opt::v::uninitialized_dynamic_buffer, cds::opt::v::uninitialized_static_buffer)\n      ones. The old cds::opt::v::dynamic_buffer and cds::opt::v::static_buffer classes\n      are removed.\n    - Removed: TsigasCysleQueue (due undecidable ABA-problem)\n    - Removed: Michael's allocator cds/memory/michael/allocator.h\n    - Fixed: use-after-free bug in VyukovMPMCCycleQueue internal buffer.\n      To prevent this bug the queue uses an uninitialized buffer now.\n    - Fixed: rare priority inversion bug in MSPriorityQueue\n    - Added: for minimizing runtime of stress test the detail level for some test is added.\n      Command line argument --detail-level=N specifies what test should be ran: each\n      test with level not greater than N will be ran. Instead of command line arg\n      the enviromnent variable CDSTEST_DETAIL_LEVEL=N may be used.\n      By default, the detail level is 0 that means only limited set of the test will be ran.\n\n2.1.0 06.01.2016\n    General release\n    - Added: FeldmanHashSet/Map - an interesting hash map algorithm\n      based on multi-level array, requires perfect hashing or fixed-sized keys.\n      Supports thread-safe bidirectional iterators.\n    - Added: BronsonAVLTreeMap - Bronson's et al AVL tree implementation\n    - Added: CMake build script, thanks to Eugeny Kalishenko\n    - Changed: SplitList performance improving, thanks to Mike Krinkin\n    - Changed: semantic of member functions extract(), get() and its\n      variants for MichaelList RCU-based specialization: extract() does not\n      require RCU locking, get() now returns special wrapper object of type raw_ptr,\n      see doc.\n      Thus, semantics of extract()/get() of all RCU-based set and maps based on \n      MichaelList (MichaelSet/Map, SplitListSet/Map) has been changed too.\n    - Changed: SplitListSet/Map functions get() and get_with() return special wrapper\n      object of type raw_ptr, see doc.\n    - Removed: SplitListSet/Map force_dispose() function.\n    - cds::lock namespace is renamed to cds::sync. All classes defined in cds::lock namespace \n      are moved to cds::sync with new names (for example, cds::lock::SpinLock is renamed to\n      cds::sync::spin_lock). cds::lock namespace and its contents is deprecated, it is kept \n      for backward compatibility.\n    - The library has been checked by ThreadSanitizer, a lot of bugs has been fixed\n    - Added support for clang 3.7 with libc++\n\n2.0.0 30.12.2014\n    General release\n    - the library has been rewritten to support at least C++11. Compilers: GCC 4.8+, clang 3.3+, \n      MS Visual C++ 12 (2013) Update 4 an above.\n    - Removed: MichaelDeque, reason: the implementation is heavy-weighted, inefficient,\n      and, seems, unstable.\n    - Removed: cds::gc::HRC garbage collector, reason: the implementation is inefficient \n      and unstable.\n    - Changed: all container's declaration except StripedSet has been unified to the\n      following traits-based form: \n           class Container< GC, T, Traits >\n    - Added: new member function pop_with(Func) to cds::container::TreiberStack\n    - Added: new member functions enqueue_with(Func), dequeue_with(Func) to \n             cds::container::MSQueue\n             cds::container::MoirQueue\n             cds::container::BasketQueue\n             cds::container::OptimisticQueue\n             cds::container::RWQueue\n             cds::container::SegmentedQueue\n             cds::container::TsigasCycleQueue\n             cds::container::VyukovMPMCCycleQueue\n    - Added: new member functions push_with(Func) and pop_with(Func) to cds::container::MSPriorityQueue\n    - SegmentedQueue: add padding into segmented_queue::traits to eliminate false sharing.\n    - Changed: guarded_ptr and exempt_ptr have move semantics now. The container's extract() and get()\n      member functions return the objects of that type.\n    - Changed: improved cds::gc::HP and cds::gc::DHP internal implementation\n    - Changed: map member function insert_key() has been renamed to insert_with()\n    - Changed: cds/cxx11_atomic.h has been renamed to cds/algo/atomic.h\n    - Removed: cds/refcounter.h\n\n1.6.0 23.09.2014\n    General release\n    - Add flat combining (FC) technique and FC-based containers: FCStack, FCQueue, \n      FCDeque, FCPriorityQueue\n    - Add elimination back-off feature to TreiberStack class\n    - Add SegmentedQueue - an unfair queue implementation\n    - New member functions for sets and maps:\n      Functions get() and get_with() search a key and return the pointer to item found \n      in safe manner.\n      Function extract() searches a key, unlinks the item found from the container \n      and returns pointer to item in safe manner.\n      The functions get, get_with, extract, extract_with extract_min, extract_max \n      has been added to the following container:\n        SkipListSet, SkipListMap\n        EllenBinTree, EllenBinTreeSet, EllenBinTreeMap\n      The functions get, get_with, extract, extract_with has been added \n      to the following container:\n        MichaelList, LazyList\n        MichaelHashSet, MichaelHashMap\n        SplitListSet, SplitListMap\n    - Fix a serious bug in cds::gc::HRC\n    - Changed MSPriorityQueue to simplify interface and to fix possible pop() deadlock\n    - Fix a bug in BasketQueue\n    - Fix EllenBinTree crash under high contention\n    - Changed: the thread manager detach order to prevent crashing of signal-handled RCU\n      in some case.\n    - Changed: cds::gc::HP calls Scan() when a thread is detached.\n      This prevents accumulating retired data.\n    - Changed: minimal boost version is 1.51\n    - Removed: file cds/lock/rwlock.h\n\n1.5.0 29.12.2013\n    General release\n    1. Added: EllenBinTree - an implementation of unbalanced binary search\n      tree based on paper [2010] F.Ellen, P.Fatourou, E.Ruppert, F.van Breugel \n      \"Non-blocking Binary Search Tree\".\n    2. Added: MSPriorityQueue - an array-based lock-based priority queue heap, \n      see [1996] G.Hunt, M.Michael, S. Parthasarathy, M.Scott \"An efficient \n      algorithm for concurrent priority queue heaps\"\n    3. Added support for boost.atomic for boost 1.54 and above. \n      Now, libcds supports processor architecture like ARM, PowerPC and any other\n      that are supported by boost.atomic or by C++11 compiler. Any feedbacks are appreciated.\n      To use boost.atomic you should specify -DCDS_USE_BOOST_ATOMIC in compiler's command line.\n    4. Added: a new CDS_USE_LIBCDS_ATOMIC preprocessor flag has been added to direct\n      the compiler to use libcds atomic unconditionally.\n    5. build.sh has been modified to relax processor architecture and OS requirements. \n      This allows to use libcds with native compiler atomic support (or boost.atomic) \n      for a processor architecture that has not been tested by libcds's developers.\n    6. Added support for CLang 3.3\n    7. Added support for MS VC++ 2013\n    8. Added support for Mac OS X, see build/sample/build-osx-clang-libc++.sh, \n      build/sample/build-osx-gcc.sh for example.\n    9. Fixed: SkipListSet::erase_with does not take into account \"less\" predicate parameter.\n    10.Fixed: some bugs in SkipListSet leading to deadloop\n    11.Fixed: MichaelMap bug: computing hash value for type Q different from key type.\n\n1.4.0 20.05.2013\n    General release\n    1. Added: user-space RCU garbage collector (5 different implementations), \n       see cds::urcu namespace\n    2. Added: RCU-related set/map container specializations\n    3. Added: Skip-list specialization for cds::gc::nogc (undeletable skip-list)\n    4. For set/map classes: find_with and erase_with member functions have been added.\n       These functions allow to use different predicates for searching.\n    5. Added: threading model based on Ñ++11 thread_local keyword (CDS_THREADING_CXX11).\n       At present, only gcc 4.8 supports such model.\n    6. Fixed: bug #11 \"ABA bug in libcds 1.3.1 cds/intrusive/msqueue.h\"\n       Thanks to Jelle van den Hooff.\n    7. Added support for GCC 4.8\n\n1.3.1 27.01.2013\n    Bugfix release\n    - Bug fixed: building libcds with boost versions before 1.48\n      Thanks Lucas Larsch who points me to this problem.\n  \n1.3.0 29.12.2012\n    General release\n    1. Added: StripedSet, StripedMap - hash set and hash map \n        implementation based on fine-grained lock-striping technique\n    2. Added: CuckooSet, CuckooMap - implementation of cuckoo hashing algorithm\n        based on fine-grained lock-striping technique\n    3. Added: SkipListSet, SkipListMap - implementation of lock-free skip list\n    4. Added: template <typename... Args> emplace(Args&&... args) member function \n        for all containers in cds::container namespace. This function is available \n        only if the compiler supports new C++11 features - variadic\n        templates and move semantics.\n    5. Changed: lambda functions are used internally instead of wrapping functors.\n        If the compiler does not support C++11 lambdas the old-style wrapping functors are used.\n    6. Changed: test projects has been splitted for optimizing compile time.\n    7. Breaking change: class cds::lock::Auto has been renamed to cds::lock::scoped_lock,\n        class cds::lock::AutoUnlock has been removed\n    8. Added: support for MinGW (tested with TDM-GCC 64bit, gcc 4.7)\n    \n1.2.0 20.08.2012 (beta)\n    General release\n    1. Added: MichaelDeque - deque lock-free algo discovered by Maged Michael\n    2. Added: BasketQueue - Michael's queue modification discovered by Nir Shavit et al.\n    3. Added: support of Clang 3.0, 3.1 compiler (tested on Linux with boost 1.49)\n    4. Fixed: solving problem of 8-byte atomic data alignment on 32-bit platforms\n    5. Fixed bug 3536393: OptimisticQueue core dump \n\n1.1.0 17.04.2012 (beta)\n    General release\n    1. Added: C++11 atomic operations support. The library has been rewritten\n        for using std::atomic class and operations proposed in C++11 Standard.\n        If the compiler does not support the standard <atomic> library, \n        own partial implementation declared in cds/cxx11_atomic.h is used. \n        cxx11_atomic.h contains implementation for lock-free part of C++11 \n        <atomic> header needed for libcds.\n    2. Added: support for C++11 feature (if applicable):\n       - inline namespace (for GCC 4.4+)\n       - function =default and =delete specifiers (for GCC 4.4+)\n    3. Changed: the main reclamation cycle (\"liberate\" function) of cds::gc::PTB \n       memory reclamation schema has been optimized. Previous implementation\n       could lead to unbounded memory consumption under high contention.\n    4. Changed: the internal structure of cds::intrusive::OptimisticQueue is greatly simplified. \n       The interface of the class is slightly changed.\n    5. Fixed: some problem with cds::gc::HRC memory reclamation schema that\n       could be the cause of occasional program crash.\n    6. Fixed: an error in node reclamation algo in queue implementation (MSQueue, MoirQueue, \n       OptimisticQueue). As an result of the error, some items could be lost with memory leaks.\n    7. Changed: cds::concept namespace and its content has been removed\n    8. Added support for Microsoft Visual C++ 11 Beta\n    9. Added support for GCC 4.7\n    \n1.0.0  31.12.2011 (beta)\n    This version is completely rewritten to support intrusive version of lock-free containers\n    and more lightweight garbage collectors interface.\n    The class hierarchy and interfaces have been completely reimplemented from scratch.\n\n    1. Added: intrusive containers. Many lock-free containers in libcds have the intrusive\n       counterparts. The library is fully refactored to support intrusive containers.\n       Class hierarchy is changed: almost all non-intrusive container classes are based \n       on their intrusive versions.\n       Two new namespace is added:\n        cds::intrusive - for intrusive containers\n        cds::container - for non-intrusive containers\n       Namespaces by container type (cds::queue, cds::map and so on) have been removed.\n    2. Added: New option-based approach is used for class declaration instead\n       old traits-based one. This approach allows to declare template arguments\n       in position-independent manner that is very useful for complex template declarations.\n       Option-based declarations use C++0x variadic templates if compiler supports it (GCC),\n       otherwise (MS VC) an emulation is used.\n    3. Changed: garbage collectors interface is generalized. cds::gc::GC (where GC is\n       one of HP, HRC, PTB) classes has been added.\n    4. Removed: tagged pointer GC. This GC\n       - unsafe for complex data structure\n       - x86-specific since it requires double-width CAS primitive\n       - memory-consuming since it requires separate free-list for each type stored in the containers\n    5. Default threading model is changed (see doc for cds::threading namespace):\n       - for Windows and MSVC++, CDS_THREADING_WIN_TLS is the default now\n       - for *nix and GCC, CDS_THREADING_PTHREAD is the default now\n    6. Added GCC 4.6 support (constexpr)\n    7. Added Microsoft Visual Studio 2010 (vc10) solution\n\n0.8.0  28.03.2011 (beta)\n    1. Added: cds::Initialize and cds::Terminate functions that initializes and frees library's\n       internal structures.\n    2. Added: cds::memory::michael::Heap - Michael's lock-free allocator\n    3. Added: Exponential back-off strategy for spinning\n    4. Added: cds::queue::vyukov_mpmc_bounded - bounded queue\n       developed by Dmitry Vyukov (http://www.1024cores.net)\n    5. Added: support for FreeBSD amd64, x86\n\n0.7.2  27.02.2011 (beta)\n    1. [Bug 3157201] Added implementation of threading manager based on Windows TLS API, see\n       cds::threading::wintls::Manager. Added CDS_THREADING_WIN_TLS macro. See docs for\n       cds::threading namespace for details.\n    2. Fixed bug in cds::threading::pthread::Manager: ptb_gc has not been initialized properly.\n    3. New function\n            template <typename T, typename FUNC>\n            bool erase( const key_type& key, T& dest, FUNC func ) ;\n       has been added to all map classes.\n    4. New function\n            template <typename T, typename FUNC>\n            bool insert( const key_type& key, T& val, FUNC func ) ;\n       has been added to all map classes.\n    5. Added new argument \"bNew\" to functor \"func\" of map's \"ensure\" member function:\n            void func( VALUE& itemValue, const VALUE& val, bool bNew ) ;\n        bNew = true if new item has been added\n        bNew = false if key is found\n    6. Fixed bug in cds::map::SplitOrderedList: LSB of dummy node's hash should be zero\n    7. Changed: thread liveliness checking on *nix has been changed to pthread_kill(id, 0).\n    8. Fixed: in map template member functions the functor may be passed by value\n       or by reference; use boost::ref( yourFunctor ) to pass your functor by reference\n    9. Fixed: cds::gc::tagged GC and all classes based on this GC has been rewritten\n       to solve stability problems.\n\n0.7.1  30.12.2010 (beta)\n    1. [Bug 3130852] cds::queue::TZCyclicQueue::empty() has been corrected\n    2. [Bug 3128161] It seems, GCC 4.4 has a bug in __thread on x86 and x86_64. New \"threading model\"\n       CDS_THREADING_AUTODETECT has been added. See docs of cds::threading namespace for details\n    3. Fixed errors in the \"Pass-the-Buck\" garbage collector (namespace cds::gc::ptb)\n    4. [Bug 3128148] The code is aligned with the C++ standard (minor violations has been removed)\n    5. [Bug 3141654] missing break statement for atomic store - fixed\n    6. Added in-place scan strategy to cds::gc::hzp::GarbageCollector that does not allocate any memory.\n    7. Fixed bugs in HRC and tagged GC\n\n0.7.0 05.12.2010 (beta)\n    1. Preliminary support for \"Pass The Buck\" memory manager is added. See cds::gc::ptb namespace.\n    2. Many part of library is rewritten to generalize the usage of various GCs\n    3. The new class cds::details::aligned_allocator has been added for allocating aligned memory\n       blocks. It is useful for Tagged Pointer memory reclamation schema (cds::gc::tagged_gc).\n    4. [Break change] New argument has been added to the member functions \"ensure\" and \"find\"\n       for ordered list and map classes\n    5. New member function \"emplace\" has been added to ordered list and map classes. This member function\n       allows change the value (or a part of it) of list/map item.\n    6. The internal structure of class cds::map::MichaelHashMap is completely refactored to support\n       cds::gc::no_gc correctly\n    7. The classes RecursiveSpinT, RecursiveSpin32, RecursiveSpin64, and RecursiveSpin from cds::lock\n       namespace have been renamed to ReentrantSpinT, ReentrantSpin32, ReentrantSpin64, and ReentrantSpin\n       respectively\n    8. Compiler support: GCC version below 4.3.0 is not supported\n    9. Fixed memory leak in cds::map::SplitOrderedList\n   10. Added compiler barrier to spin-lock release primitive for x86 and amd64\n   11. Makefile script is changed to resolve the problem when an user calls 'make clean' directly.\n       Thanks to Tamas Lengyel to point me to this bug.\n   12. The file dictionary.txt is excluded from distributive. This file is used for testing purposes only.\n       You may create dictionary.txt in this way:\n        cd ./tests/data\n        perl -X split.pl\n\n0.6.0 26.03.2010 (beta)\n    1. The library is rewritten using atomic primitives with explicit memory ordering (based on C++\n       memory model proposal). The implementation of atomic primitives for supported architectures\n       is developed from scratch.\n    2. Total refactoring\n\n0.5.0 31.12.2009  (beta)\n    First release"
        },
        {
          "name": "conanfile.txt",
          "type": "blob",
          "size": 1.130859375,
          "content": "[requires]\ngtest/1.8.0@bincrafters/stable\nboost/1.66.0@conan/stable\n\n[options]\ngtest:shared=True\nboost:shared=True\nboost:without_atomic=False\nboost:without_system=False\nboost:without_thread=False\nboost:without_chrono=True\nboost:without_container=True\nboost:without_context=True\nboost:without_coroutine=True\nboost:without_date_time=True\nboost:without_exception=True\nboost:without_fiber=True\nboost:without_filesystem=True\nboost:without_graph=True\nboost:without_graph_parallel=True\nboost:without_iostreams=True\nboost:without_locale=True\nboost:without_log=True\nboost:without_math=True\nboost:without_mpi=True\nboost:without_program_options=True\nboost:without_python=True\nboost:without_random=True\nboost:without_regex=True\nboost:without_serialization=True\nboost:without_signals=True\nboost:without_stacktrace=True\nboost:without_test=True\nboost:without_timer=True\nboost:without_type_erasure=True\nboost:without_wave=True\n\n# We copy the builded files in order to refer to them when calling cmake.\n# cmake -DCMAKE_PREFIX_PATH=\"build_dir/deps\"\n[imports]\ninclude, * -> ./deps/include # Copies files\nlib, * -> ./deps/lib # Copies files\nbin, * -> ./deps/lib # Copies files\n\n"
        },
        {
          "name": "doxygen",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 10.3525390625,
          "content": "!!! STOP WAR !!!\r\n===============\r\n\r\n\r\n\r\nCDS C++ library\r\n===============\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/7391e3f221244134bd343cdde7b7deb6)](https://app.codacy.com/manual/khizmax/libcds?utm_source=github.com&utm_medium=referral&utm_content=khizmax/libcds&utm_campaign=Badge_Grade_Settings)\r\n[![GitHub version](https://badge.fury.io/gh/khizmax%2Flibcds.svg)](http://badge.fury.io/gh/khizmax%2Flibcds)\r\n[![License](https://img.shields.io/:license-boost-blue.svg?style=round-square)](https://github.com/khizmax/libcds/blob/master/LICENSE)\r\n[![Build Status](https://travis-ci.org/khizmax/libcds.svg?branch=dev)](https://travis-ci.org/khizmax/libcds)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/github/khizmax/libcds?branch=dev&svg=true)](https://ci.appveyor.com/project/khizmax/libcds)\r\n\r\n<!---\r\nThe coverity dataset is about 4G of size and about 1G in compressed state so it is a problem to upload it to the coverity server\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/4445/badge.svg)](https://scan.coverity.com/projects/4445)\r\n-->\r\n\r\nThe Concurrent Data Structures (CDS) library is a collection of concurrent containers\r\nthat don't require external (manual) synchronization for shared access, and safe memory reclamation (SMR) \r\nalgorithms like [Hazard Pointer](http://en.wikipedia.org/wiki/Hazard_pointer) \r\nand user-space [RCU](http://en.wikipedia.org/wiki/Read-copy-update) that is used as an epoch-based SMR.\r\n\r\nCDS is mostly header-only template library. Only SMR core implementation is segregated to .so/.dll file.\r\n\r\nThe library contains the implementations of the following containers:\r\n  - [lock-free](http://en.wikipedia.org/wiki/Non-blocking_algorithm) stack with optional elimination support\r\n  - several algo for lock-free queue, including classic Michael & Scott algorithm and its derivatives,\r\n    the flat combining queue, the segmented queue.\r\n  - several implementation of unordered set/map - lock-free and fine-grained lock-based\r\n  - [flat-combining](http://mcg.cs.tau.ac.il/projects/projects/flat-combining) technique\r\n  - lock-free [skip-list](http://en.wikipedia.org/wiki/Skip_list)\r\n  - lock-free FeldmanHashMap/Set [Multi-Level Array Hash](http://samos-conference.com/Resources_Samos_Websites/Proceedings_Repository_SAMOS/2013/Files/2013-IC-20.pdf)\r\n    with thread-safe bidirectional iterator support\r\n  - Bronson's et al algorithm for fine-grained lock-based AVL tree\r\n  \r\nGenerally, each container has an intrusive and non-intrusive (STL-like) version belonging to \r\n*cds::intrusive* and *cds::container* namespace respectively. \r\n\r\nVersion 2.x of the library is written on C++11 and can be compiled by GCC 4.8+, clang 3.6+, Intel C++ 15+, \r\nand MS VC++ 14 (2015) and above\r\n\r\nDownload the latest release from http://sourceforge.net/projects/libcds/files/\r\n\r\nSee online doxygen-generated doc here: http://libcds.sourceforge.net/doc/cds-api/index.html\r\n\r\n**How to build**\r\n   - *nix: [use CMake](build/cmake/readme.md)\r\n   - Windows: use MS Visual C++ 2017 project\r\n\r\nSome parts of libcds may depend on DCAS (double-width compare-and-swap) atomic primitive if\r\nthe target architecture supports it. For x86, cmake build script enables `-mcx16` compiler flag that\r\nswitches DCAS support on. You may manually disable DCAS support with the following command line flags\r\nin GCC/clang (for MS VC++ compiler DCAS is not supported):\r\n  - `-DCDS_DISABLE_128BIT_ATOMIC` - for 64bit build\r\n  - `-DCDS_DISABLE_64BIT_ATOMIC` - for 32bit build\r\n\r\n**All your projects AND libcds MUST be compiled with the same flags - either with DCAS support or without it.**\r\n  \r\n**Building libcds -use vcpkg\r\n\r\nYou can download and install libcds using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\r\n   \r\n    git clone https://github.com/Microsoft/vcpkg.git\r\n    cd vcpkg\r\n    ./bootstrap-vcpkg.sh\r\n    ./vcpkg integrate install\r\n    vcpkg install libcds\r\n    \r\nThe libcds port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\r\n\r\n   \r\n**Pull request requirements**\r\n- Pull-request to *master* branch will be unconditionally rejected\r\n- *integration* branch is intended for pull-request. Usually, *integration* branch is the same as *master*\r\n- *dev* branch is intended for main developing. Usually, it contains unstable code\r\n\r\n[![Project stats](https://www.openhub.net/p/khizmax-libcds/widgets/project_thin_badge.gif)](https://www.openhub.net/p/khizmax-libcds)\r\n\r\nReferences\r\n----------\r\n*Stack*\r\n  - *TreiberStack*: [1986] R. K. Treiber. Systems programming: Coping with parallelism. Technical Report RJ 5118, IBM Almaden Research Center, April 1986.\r\n  - Elimination back-off implementation is based on idea from [2004] Danny Hendler, Nir Shavit, Lena Yerushalmi \"A Scalable Lock-free Stack Algorithm\"\r\n        [pdf](http://people.csail.mit.edu/shanir/publications/Lock_Free.pdf)\r\n  - *FCStack* - flat-combining wrapper for *std::stack*\r\n        \r\n*Queue*\r\n  - *BasketQueue*: [2007] Moshe Hoffman, Ori Shalev, Nir Shavit \"The Baskets Queue\"\r\n        [pdf](http://people.csail.mit.edu/shanir/publications/Baskets%20Queue.pdf)\r\n  - *MSQueue*:\r\n    * [1998] Maged Michael, Michael Scott \"Simple, fast, and practical non-blocking and blocking concurrent queue algorithms\"\r\n        [pdf](http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf)\r\n    * [2002] Maged M.Michael \"Safe memory reclamation for dynamic lock-free objects using atomic reads and writes\"\r\n        [pdf](http://www.research.ibm.com/people/m/michael/podc-2002.pdf)\r\n    * [2003] Maged M.Michael \"Hazard Pointers: Safe memory reclamation for lock-free objects\"\r\n        [pdf](http://www.research.ibm.com/people/m/michael/ieeetpds-2004.pdf)\r\n  - *RWQueue*: [1998] Maged Michael, Michael Scott \"Simple, fast, and practical non-blocking and blocking concurrent queue algorithms\"\r\n        [pdf](http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf)\r\n  - *MoirQueue*: [2000] Simon Doherty, Lindsay Groves, Victor Luchangco, Mark Moir \"Formal Verification of a practical lock-free queue algorithm\"\r\n        [pdf](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.87.9954&rep=rep1&type=pdf)\r\n  - *OptimisticQueue*: [2008] Edya Ladan-Mozes, Nir Shavit \"An Optimistic Approach to Lock-Free FIFO Queues\"\r\n        [pdf](https://people.csail.mit.edu/edya/publications/OptimisticFIFOQueue-journal.pdf)\r\n  - *SegmentedQueue*: [2010] Afek, Korland, Yanovsky \"Quasi-Linearizability: relaxed consistency for improved concurrency\"\r\n        [pdf](http://mcg.cs.tau.ac.il/papers/opodis2010-quasi.pdf)\r\n  - *FCQueue* - flat-combining wrapper for *std::queue*\r\n  - *VyukovMPMCCycleQueue* Dmitry Vyukov (see http://www.1024cores.net)\r\n\r\n*Deque*\r\n  - flat-combining deque based on *stl::deque*\r\n\r\n*Map, set*\r\n  - *MichaelHashMap*: [2002] Maged Michael \"High performance dynamic lock-free hash tables and list-based sets\"\r\n        [pdf](http://www.research.ibm.com/people/m/michael/spaa-2002.pdf)\r\n  - *SplitOrderedList*: [2003] Ori Shalev, Nir Shavit \"Split-Ordered Lists - Lock-free Resizable Hash Tables\"\r\n        [pdf](http://people.csail.mit.edu/shanir/publications/Split-Ordered_Lists.pdf)\r\n  - *StripedMap*, *StripedSet*: [2008] Maurice Herlihy, Nir Shavit \"The Art of Multiprocessor Programming\"\r\n  - *CuckooMap*, *CuckooSet*: [2008] Maurice Herlihy, Nir Shavit \"The Art of Multiprocessor Programming\"\r\n  - *SkipListMap*, *SkipListSet*: [2008] Maurice Herlihy, Nir Shavit \"The Art of Multiprocessor Programming\"\r\n  - *FeldmanHashMap*, *FeldmanHashSet*: [2013] Steven Feldman, Pierre LaBorde, Damian Dechev \"Concurrent Multi-level Arrays:\r\n        Wait-free Extensible Hash Maps\". Supports **thread-safe bidirectional iterators**\r\n        [pdf](http://samos-conference.com/Resources_Samos_Websites/Proceedings_Repository_SAMOS/2013/Files/2013-IC-20.pdf)\r\n        \r\n*Ordered single-linked list*\r\n  - *LazyList*: [2005] Steve Heller, Maurice Herlihy, Victor Luchangco, Mark Moir, William N. Scherer III, and Nir Shavit \"A Lazy Concurrent List-Based Set Algorithm\"\r\n        [pdf](http://people.csail.mit.edu/shanir/publications/Lazy_Concurrent.pdf)\r\n  - *MichaelList*: [2002] Maged Michael \"High performance dynamic lock-free hash tables and list-based sets\"\r\n        [pdf](http://www.research.ibm.com/people/m/michael/spaa-2002.pdf)\r\n\r\n*Priority queue*\r\n  - *MSPriorityQueue*: [1996] G.Hunt, M.Michael, S. Parthasarathy, M.Scott \"An efficient algorithm for concurrent priority queue heaps\"\r\n        [pdf](http://web.cse.ohio-state.edu/dmrl/papers/heap96.pdf)\r\n\r\n*Tree*\r\n  - *EllenBinTree*: [2010] F.Ellen, P.Fatourou, E.Ruppert, F.van Breugel \"Non-blocking Binary Search Tree\"\r\n        [pdf](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.232.7881&rep=rep1&type=pdf)\r\n  - *BronsonAVLTreeMap* - lock-based fine-grained AVL-tree implementation: \r\n        [2010] Nathan Bronson, Jared Casper, Hassan Chafi, Kunle Olukotun \"A Practical Concurrent Binary Search Tree\"\r\n        [pdf](https://ppl.stanford.edu/papers/ppopp207-bronson.pdf)\r\n\r\n*SMR*\r\n  - Hazard Pointers\r\n    * [2002] Maged M.Michael \"Safe memory reclamation for dynamic lock-free objects using atomic reads and writes\" \r\n             [pdf](http://www.research.ibm.com/people/m/michael/podc-2002.pdf)\r\n    * [2003] Maged M.Michael \"Hazard Pointers: Safe memory reclamation for lock-free objects\" \r\n             [pdf](http://www.research.ibm.com/people/m/michael/ieeetpds-2004.pdf)\r\n    * [2004] Andrei Alexandrescu, Maged Michael \"Lock-free Data Structures with Hazard Pointers\" \r\n             [pdf](http://www.researchgate.net/profile/Andrei_Alexandrescu/publication/252573326_Lock-Free_Data_Structures_with_Hazard_Pointers/links/0deec529e7804288fe000000.pdf)\r\n  - User-space RCU\r\n    * [2009] M.Desnoyers \"Low-Impact Operating System Tracing\" PhD Thesis,\r\n             Chapter 6 \"User-Level Implementations of Read-Copy Update\"\r\n             [pdf](http://www.lttng.org/files/thesis/desnoyers-dissertation-2009-12-v27.pdf)\r\n    * [2011] M.Desnoyers, P.McKenney, A.Stern, M.Dagenias, J.Walpole \"User-Level\r\n             Implementations of Read-Copy Update\"\r\n             [pdf](http://www.dorsal.polymtl.ca/sites/www.dorsal.polymtl.ca/files/publications/desnoyers-ieee-urcu-submitted.pdf)\r\n\r\n*Flat Combining* technique\r\n  - [2010] Hendler, Incze, Shavit and Tzafrir \"Flat Combining and the Synchronization-Parallelism Tradeoff\"\r\n            [pdf](http://www.cs.bgu.ac.il/~hendlerd/papers/flat-combining.pdf)\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "thanks",
          "type": "blob",
          "size": 0.849609375,
          "content": "Many thanks to the contributors who feedbacks the errors and propositions for libcds.\r\nIn alphabetical order:\r\n\r\nAlexander Gaev (https://github.com/Krock21rus)\r\nAmila Jayasekara\r\nArvid Gerstmann (https://github.com/Leandros)\r\nblinkenlichten (https://github.com/blinkenlichten)\r\nEugeny Kalishenko (https://github.com/eugenyk)\r\ngtroxler (https://github.com/gtroxler)\r\nIsaac Hier (https://github.com/isaachier)\r\nJelle van den Hooff\r\nKyle Hegeman (https://github.com/khegeman)\r\nLily Tsai (https://github.com/tslilyai)\r\nLouis Dionne (https://github.com/ldionne)\r\nLucas Larsch\r\nLukas W (https://github.com/lukas-w)\r\nMarkus Elfring\r\nMarsel Galimullin\r\nMichail Komarov (https://github.com/nemo1369)\r\nMykola Dimura\r\nMike Krinkin (https://github.com/krinkinmu)\r\nNikolai Rapotkin\r\nPeizhao Ou (https://github.com/peizhaoo)\r\nrfw (https://github.com/rfw)\r\nTamas Lengyel\r\nTodd Lipcon\r\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}