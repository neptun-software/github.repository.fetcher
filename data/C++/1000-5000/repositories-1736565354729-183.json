{
  "metadata": {
    "timestamp": 1736565354729,
    "page": 183,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hzeller/rpi-rgb-led-matrix",
      "stars": 3780,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2353515625,
          "content": "# Editor config file, see http://editorconfig.org/\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{h,cc}]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "*.o\n*.a\n*~\n*.so\n.envrc\n.direnv\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8330078125,
          "content": "# This toplevel Makefile compiles the library in the lib subdirectory.\n# If you want to see how to integrate the library in your own projects, check\n# out the sub-directories examples-api-use/ and utils/\nRGB_LIBDIR=./lib\nRGB_LIBRARY_NAME=rgbmatrix\nRGB_LIBRARY=$(RGB_LIBDIR)/lib$(RGB_LIBRARY_NAME).a\n\n# Some language bindings.\nPYTHON_LIB_DIR=bindings/python\nCSHARP_LIB_DIR=bindings/c\\#\n\nall : $(RGB_LIBRARY)\n\n$(RGB_LIBRARY): FORCE\n\t$(MAKE) -C $(RGB_LIBDIR)\n\t$(MAKE) -C examples-api-use\n\nclean:\n\t$(MAKE) -C lib clean\n\t$(MAKE) -C utils clean\n\t$(MAKE) -C examples-api-use clean\n\t$(MAKE) -C $(PYTHON_LIB_DIR) clean\n\nbuild-csharp:\n\t$(MAKE) -C $(CSHARP_LIB_DIR) nuget\n\t$(MAKE) -C $(CSHARP_LIB_DIR) build\n\nbuild-python: $(RGB_LIBRARY)\n\t$(MAKE) -C $(PYTHON_LIB_DIR) build\n\ninstall-python: build-python\n\t$(MAKE) -C $(PYTHON_LIB_DIR) install\n\nFORCE:\n.PHONY: FORCE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.08984375,
          "content": "Controlling RGB LED display with Raspberry Pi GPIO\n==================================================\n\nA library to control commonly available 64x64, 32x32 or 16x32 RGB LED panels\nwith the Raspberry Pi. Can support PWM up to 11Bit per channel, providing\ntrue 24bpp color with CIE1931 profile.\n\nSupports 3 chains with many panels each on a regular Pi.\nOn a Raspberry Pi 2 or 3, you can easily chain 12 panels in that chain\n(so 36 panels total), but you can theoretically stretch that to up\nto 96-ish panels (32 chain length) and still reach\naround 100Hz refresh rate with full 24Bit color (theoretical - never tested\nthis; there might likely be timing problems with the panels that will creep\nup then).\n\nWith fewer colors or so-called 'outdoor panels' you can control even more,\nfaster.\n\nThe LED-matrix library is (c) Henner Zeller <h.zeller@acm.org>, licensed with\n[GNU General Public License Version 2.0](http://www.gnu.org/licenses/gpl-2.0.txt)\n(which means, if you use it in a product somewhere, you need to make the\nsource and all your modifications available to the receiver of such product so\nthat they have the freedom to adapt and improve).\n\n## Discourse discussion group\n\n**If you'd like help, please do not file a bug, use the discussion board instead:**\nhttps://rpi-rgb-led-matrix.discourse.group/  (obviously please read this whole page first).\nIf you file a bug asking for personal help instead of using the discourse group, please\nstate in your bug that you have read this entire page and that you're indeed filing a bug\nor request for improvement. Otherwise, please use the discourse group.\n\nOverview\n--------\nThe RGB LED matrix panels can be scored at [Sparkfun][sparkfun],\n[AdaFruit][ada] or eBay and Aliexpress. If you are in China, I'd try to get\nthem directly from some manufacturer, Taobao or Alibaba.\n\nThe `RGBMatrix` class provided in `include/led-matrix.h` does what is needed\nto control these. You can use this as a library in your own projects or just\nuse the demo binary provided here which provides some useful examples.\n\nCheck out [utils/ directory for some ready-made tools](./utils) to get started\nusing the library, or the [examples-api-use/](./examples-api-use) directory if\nyou want to get started programming your own utils.\n\nRaspberry Pi up to 4 supported\n------------------------------\n\nThis library supports the old Raspberry Pi's Version 1 with 26 pin header and\nalso the B+ models, the Pi Zero, Raspberry Pi 2 and 3 with 40 pins, as well\nas the Compute Modules which have 44 GPIOs.\n\nThe Raspberry Pi 5 still needs some research into the vastly changed peripherals\nand is not yet supported.\n\nThe 26 pin models can drive one chain of RGB panels, the 40 pin models\n**up to three** chains in parallel (each chain 12 or more panels long).\nThe Compute Module can drive **up to 6 chains in parallel**.\nThe Raspberry Pi 2 and 3 are faster and generally perferred to the older\nmodels (and the Pi Zero). With the faster models, the panels sometimes\ncan't keep up with the speed; check out\nthis [troubleshooting section](#troubleshooting) what to do.\n\nA lightweight, non-GUI, distribution such as [DietPi] is recommended.\n[Raspbian Lite][raspbian-lite] is a bit easier to get started with and\nis a good second choice.\n\nTypes of Displays\n-----------------\nThere are various types of displays that come all with the same Hub75 connector.\nThey vary in the way the multiplexing is happening so this library supports\noptions to choose that.\nAll these are configured by flags (or, programmatically, in an [Options struct](include/led-matrix.h#L57)).\n\nIf you have a 64x32 display, you need to supply the flags\n`--led-cols=64 --led-rows=32` for instance.\n\nDepending on the Matrix, there are various configuration options that\nyou might need to set for it to work. See further below in the README for the\n[detailed description of these](#changing-parameters-via-command-line-flags).\nWhile the `--led-rows` and `--led-cols` can be derived from simply looking\nat the panels, the other options might require some experimenting to find the\nright setting if there is no description provided by the manufacturer of\nthe panel. Going through these options for experiments would typically not do\nharm, so you're free to experiment to find your setting.\n\nFlag                                | Description\n:---------------      | :-----------------\n`--led-cols`          | Columns in the LED matrix, the 'width'.\n`--led-rows`          | Rows in the LED matrix, the 'height'.\n`--led-multiplexing`  | In particular bright outdoor panels with small multiplex ratios require this. Often an indicator: if there are fewer address lines than expected: ABC (instead of ABCD) for 32 high panels and ABCD (instead of ABCDE) for 64 high panels.\n`--led-row-addr-type` | Adressing of rows; in particular panels with only AB address lines might indicate that this is needed.\n`--led-panel-type`    | Chipset of the panel. In particular if it doesn't light up at all, you might need to play with this option because it indicates that the panel requires a particular initialization sequence.\n\nPanels can be chained by connecting the output of one panel to the input of\nthe next panel. You can chain quite a few together, but the refresh rate will\nreduce with longer chains.\n\nThe 64x64 matrixes typically come in two kinds: with 5 address\nlines (A, B, C, D, E), or (A, B); the latter needs a `--led-row-addr-type=1`\nparameter. So-called 'outdoor panels' are typically brighter and allow for\nfaster refresh-rate for the same size, but do some multiplexing internally\nof which there are a few types out there; they can be chosen with\nthe `--led-multiplexing` parameter.\n\nThere are some panels that have a different chip-set than the default HUB75.\nThese require some initialization sequence. The current supported types are\n`--led-panel-type=FM6126A` and `--led-panel-type=FM6127`.\n\nGenerally, the higher scan-rate (e.g. 1:8), a.k.a. outdoor panels generally\nallow faster refresh rate, but you might need to figure out the multiplexing\nmapping if one of the three provided does not work.\n\nSome 32x16 outdoor matrixes with 1:4 scan (e.g. [Qiangli Q10(1/4) or X10(1/4)](http://qiangliled.com/products-63.html))\nhave 4 address line (A, B, C, D). For such matrices is necessary to\nuse `--led-row-addr-type=2` parameter. Also the matrix Qiangli Q10(1/4)\nhave \"Z\"-stripe pixel mapping and in this case, you'd use two parameters\nat the same time `--led-row-addr-type=2 --led-multiplexing=4`.\n\nLet's do it\n------------\nThis documentation is split into parts that help you through the process\n\n  1. <a href=\"wiring.md\"><img src=\"img/wire-up-icon.png\"></a>\n    [**Wire up the matrix to your Pi**](./wiring.md). This document describes\n    what goes where. You might also be interested\n    in [breakout boards](./adapter) for that.\n    If you have an [Adafruit HAT] or [Adafruit Bonnet], you can choose that with\n    a command line option [described below](#if-you-have-an-adafruit-hat-or-bonnet)\n  2. Run a demo. You find that in the\n     [examples-api-use/](./examples-api-use#running-some-demos) directory:\n```\nmake -C examples-api-use\nsudo examples-api-use/demo -D0\n```\n  3. Use the utilities. The [utils](./utils) directory has some ready-made\n    useful utilities to show content. [Go there](./utils) to see how to\n    compile and run these.\n  4. Write your own programs using the Matrix in C++ or one of the\n     bindings such as Python or C#.\n\n### Wiring / Boards\n\nPlease see the [Adadpter Boards or Self Wiring](./adapter). \n\nSummary is:\n- Yes you can self wire without level shifters and it will work most of the time, but if you're not in a hurry get a board\n- https://www.electrodragon.com/product/rgb-matrix-panel-drive-board-for-raspberry-pi-v2/ **is the recommended solution with 3 channels and level shifters**. You can't go wrong there, but expect a bit of shipping time.\n- If shipping time is crucial and you don't want to wire your own, Adafruit sells a single channel board (the electrodragon one is 3 channels), but note that its wiring is non standard and requires a special compile option or command line argument: https://www.adafruit.com/product/3211\n\n### Utilities\n\nThe [utils directory](./utils) is meant for ready utilities to show images or\nanimated gifs or videos. Read the [README](./utils/README.md) there for\ninstructions how to compile.\n\nThere are external projects that use this library and provide higher level\nnetwork protocols, such as the\n * [FlaschenTaschen implementation](https://github.com/hzeller/flaschen-taschen)\n   (VLC can send videos to it natively)\n * [PixelPusher implementation](https://github.com/hzeller/rpi-matrix-pixelpusher) (common in light art installations)\n * [ZeroMQ-server](https://github.com/Knifa/led-matrix-zmq-server) to receive\n   content.\n * Marc's [FastLED_RPIRGBPanel_GFX](http://marc.merlins.org/perso/arduino/post_2020-01-01_Running-FastLED_-Adafruit_GFX_-and-LEDMatrix-code-on-High-Resolution-RGBPanels-with-a-Raspberry-Pi.html) allows running arduino code on linux/rPi and display on bigger RGBPanel matrices than arduino chips, can.\n\n### API\n\nThe library comes as an API that you can use for your own utilities and use-cases.\n\n  * The native library is a C++ library (see [include/](./include)).\n    Example uses you find in the [examples-api-use/](./examples-api-use)\n    directory.\n  * If you prefer to program in C, there is also a\n    [C API](./include/led-matrix-c.h).\n  * In the [python](./bindings/python) subdirectory, you find a Python API including a\n    couple of [examples](./bindings/python/samples) to get started.\n  * There are a couple of external bindings, such as\n      * [Nodejs binding] by Maxime Journaux\n      * [Nodejs/Typescript binding] by Alex Eden\n      * [Go binding] by Máximo Cuadros\n      * [Rust binding] by Vincent Pasquier\n\n### Changing parameters via command-line flags\n\nFor the programs in this distribution and also automatically in your own\nprograms using this library, there are a lot of parameters provided as command\nline flags, so that you don't have to re-compile your programs to tweak them.\nSome might need to be changed for your particular kind of panel.\n\nHere is a little run-down of what these command-line flags do and when you'd\nlike to change them.\n\nFirst things first: if you have a different wiring than described in\n[wiring](./wiring.md), for instance if you have an Adafruit HAT/Bonnet, you can\nchoose these here:\n\n```\n--led-gpio-mapping=<gpio-mapping>: Name of GPIO mapping used. Default \"regular\"\n```\n\nThis can have values such as\n  - `--led-gpio-mapping=regular` The standard mapping of this library, described in the [wiring](./wiring.md) page.\n  - `--led-gpio-mapping=adafruit-hat` The Adafruit HAT/Bonnet, that uses this library or\n  - `--led-gpio-mapping=adafruit-hat-pwm` Adafruit HAT with the anti-flicker hardware mod [described below](#improving-flicker).\n  - `--led-gpio-mapping=compute-module` Additional 3 parallel chains can be used with the Compute Module.\n\nLearn more about the mappings in the [wiring documentation](wiring.md#alternative-hardware-mappings).\n\n#### GPIO speed\n\n```\n--led-slowdown-gpio=<0..4>: Slowdown GPIO. Needed for faster Pis and/or slower panels (Default: 1).\n```\n\nThe Raspberry Pi starting with Pi2 are putting out data too fast for almost\nall LED panels I have seen. In this case, you want to slow down writing to\nGPIO. Zero for this parameter means 'no slowdown'.\n\nThe default 1 (one) typically works fine, but often you have to even go further\nby setting it to 2 (two). If you have a Raspberry Pi with a slower processor\n(Model A, A+, B+, Zero), then a value of 0 (zero) might work and is desirable.\n\nA Raspberry Pi 3 or Pi4 might even need higher values for the panels to be\nhappy.\n\n#### Panel Connection\nThe next most important flags describe the type and number of displays connected\n\n```\n--led-rows=<rows>        : Panel rows. Typically 8, 16, 32 or 64. (Default: 32).\n--led-cols=<cols>        : Panel columns. Typically 32 or 64. (Default: 32).\n--led-chain=<chained>    : Number of daisy-chained panels. (Default: 1).\n--led-parallel=<parallel>: For A/B+ models or RPi2,3b: parallel chains. range=1..3 (Default: 1, 6 for Compute Module).\n```\n\nThese are the most important ones: here you choose how many panels you have\nconnected and how many rows are in each panel. Panels can be chained (each panel\nhas an input and output connector, see the\n[wiring documentation](wiring.md#chains)) -- the `--led-chain` flag tells the\nlibrary how many panels are chained together. The newer Raspberry Pi's allow\nto connect multiple chains in parallel, the `--led-parallel` flag tells it how\nmany there are.\n\nThis illustrates what each of these parameters mean:\n\n<a href=\"wiring.md#chaining-parallel-chains-and-coordinate-system\"><img src=\"img/coordinates.png\"></a>\n\n##### Panel Type\n\nTypically, panels should just work out of the box, but some panels use a\ndifferent chip-set that requires some initialization. If you don't see any\noutput on your panel, try setting:\n\n```\n--led-panel-type=FM6126A\n```\n\nSome panels have the FM6127 chip, which is also an option.\n\n##### Multiplexing\nIf you have some 'outdoor' panels or panels with different multiplexing,\nthe following will be useful:\n\n```\n--led-multiplexing=<0..17> : Mux type: 0=direct; 1=Stripe; 2=Checkered...\n```\n\nThe outdoor panels have different multiplexing which allows them to be faster\nand brighter, but by default their output looks jumbled up.\nThey require some pixel-mapping of which there are a few\ntypes you can try and hopefully one of them works for your panel; The default=0\nis no mapping ('standard' panels), while 1, 2, ... are different mappings\nto try with. If your panel has a different mapping, you find everything you\nneed to implement one in [lib/multiplex-mappers.cc](lib/multiplex-mappers.cc).\nPlease send a pull request if you encounter a panel for which you needed to\nimplement a new mapping.\n\nNote that you have to set the `--led-rows` and `--led-cols` to the rows and\ncolumns that are physically on each chained panel so that the multiplexing\noption can work properly. For instance a `32x16` panel with `1:4` multiplexing\nwould be controlled with `--led-rows=16 --led-cols=32 --led-multiplexing=1` (or\nwhatever multiplexing type your panel is, so it can also be `--led-multiplexing=2` ...).\n\nFor `64x32` panels with `1:8` multiplexing, this would typically be\n`--led-rows=32 --led-cols=64 --led-multiplexing=1`;\nhowever, there are some panels that internally behave like\ntwo chained panels, so then you'd use\n`--led-rows=32 --led-cols=32 --led-chain=2 --led-multiplexing=1`;\n\n```\n--led-row-addr-type=<0..4>: 0 = default; 1 = AB-addressed panels; 2 = direct row select; 3 = ABC-addressed panels; 4 = ABC Shift + DE direct (Default: 0).\n```\n\nThis option is useful for certain 64x64 or 32x16 panels. For 64x64 panels,\nthat only have an `A` and `B` address line, you'd use `--led-row-addr-type=1`.\nThis is only tested with one panel so far, so if it doesn't work for you,\nplease send a pull request.\n\nFor 32x16 outdoor panels, that have have 4 address line (A, B, C, D), it is\nnecessary to use `--led-row-addr-type=2`.\n\n#### Panel Arrangement\n\n```\n--led-pixel-mapper  : Semicolon-separated list of pixel-mappers to arrange pixels.\n```\n\nOptional params after a colon e.g. \"U-mapper;Rotate:90\"\n\nAvailable | Parameter after colon| Example\n----------|----------------------|----------\nMirror    | `H` or `V` for horizontal/vertical mirror. | `Mirror:H`\nRotate    | Degrees.                                   | `Rotate:90`\nU-mapper  | -\n\nMapping the logical layout of your boards to your physical arrangement. See\nmore in [Remapping coordinates](./examples-api-use#remapping-coordinates).\n\n#### Misc Options\n\n```\n--led-brightness=<percent>: Brightness in percent (Default: 100).\n```\n\nSelf explanatory.\n\n\n```\n--led-pwm-bits=<1..11>    : PWM bits (Default: 11).\n```\n\nThe LEDs can only be switched on or off, so the shaded brightness perception\nis achieved via PWM (Pulse Width Modulation). In order to get a good 8 Bit\nper color resolution (24Bit RGB), the 11 bits default per color are good\n(why ? Because our eyes are actually perceiving brightness logarithmically, so\nwe need a lot more physical resolution to get 24Bit sRGB).\n\nWith this flag, you can change how many bits it should use for this; lowering it\nmeans the lower bits (=more subtle color nuances) are omitted.\nTypically you might be mostly interested in the extremes: 1 Bit for situations\nthat only require 8 colors (e.g. for high contrast text displays) or 11 Bit\nfor everything else (e.g. showing images or videos). Why would you bother at all ?\nLower number of bits use slightly less CPU and result in a higher refresh rate.\n\n```\n--led-show-refresh        : Show refresh rate.\n```\n\nThis shows the current refresh rate of the LED panel, the time to refresh\na full picture. Typically, you want this number to be pretty high, because the\nhuman eye is pretty sensitive to flicker. Depending on the settings, the\nrefresh rate with this library are typically in the hundreds of Hertz but\ncan drop low with very long chains. Humans have different levels of perceiving\nflicker - some are fine with 100Hz refresh, others need 250Hz.\nSo if you are curious, this gives you the number (shown on the terminal).\n\nThe refresh rate depends on a lot of factors, from `--led-rows` and `--led-chain`\nto `--led-pwm-bits`, `--led-pwm-lsb-nanoseconds` and `--led-pwm-dither-bits`.\nIf you are tweaking these parameters, showing the refresh rate can be a\nuseful tool.\n\n```\n--led-limit-refresh=<Hz>  : Limit refresh rate to this frequency in Hz. Useful to keep a\n                            constant refresh rate on loaded system. 0=no limit. Default: 0\n```\n\nThis allows to limit the refresh rate to a particular frequency to approach\na fixed refresh rate.\n\nThis can be used to mitigate some situations in which you have a faint flicker,\nwhich can happen due to hardware events (network access)\nor other situations such as other IO or heavy memory access by other\nprocesses. Also when you see wildly changing refresh frequencies with\n`--led-show-refresh`.\n\nYou trade a slightly slower refresh rate and display brightness for less\nvisible flicker situations.\n\nFor this to calibrate, run your program for a while with --led-show-refresh\nand watch the line that shows the current refresh rate and minimum refresh\nrate observed. So wait a while until that value doesn't\nchange anymore (e.g. a minute, so that you catch tasks that happen once\na minute, such as ntp updated).\nUse this as a guidance what value to choose with `--led-limit-refresh`.\n\nThe refresh rate will now be adapted to always reach this value\nbetween frames, so faster refreshes will be slowed down, but the occasional\ndelayed frame will fit into the time-window as well, thus reducing visible\nbrightness fluctuations.\n\nYou can play with value a little and reduce until you find a good balance\nbetween refresh rate and flicker suppression.\n\nUse this also if you want to have a stable baseline refresh rate when using\nthe vsync-multiple flag `-V` in the [led-image-viewer] or\n[video-viewer] utility programs.\n\n```\n--led-no-busy-waiting     : Don't use busy waiting when limiting refresh rate.\n```\n\nThis allows to switch from busy waiting to sleep waiting when limiting the\nrefresh rate (`--led-limit-refresh`).\n\nBy default, refresh rate limiting uses busy waiting, which is CPU intensive but\ngives most accurate timings. This is fine for multi-core boards.\n\nOn single core boards (e.g.: Raspberry Pi Zero) busy waiting makes the system\nunresponsive for other/background tasks. There, sleep waiting improves the\nsystem's responsiveness at the cost of slightly less accurate timings.\n\n```\n--led-scan-mode=<0..1>    : 0 = progressive; 1 = interlaced (Default: 0).\n```\n\nThis switches from progressive scan and interlaced scan. The latter might\nlook be a little nicer when you have a very low refresh rate, but typically\nit is more annoying because of the comb-effect (remember 80ies TV ?).\n\n\n```\n--led-pwm-lsb-nanoseconds : PWM Nanoseconds for LSB (Default: 130)\n```\n\nThis allows to change the base time-unit for the on-time in the lowest\nsignificant bit in nanoseconds.\nLower values will allow higher frame-rate, but will also negatively impact\nqualty in some panels (less accurate color or more ghosting).\n\nGood values for full-color display (PWM=11) are somewhere between 100 and 300.\n\nIf you you use reduced bit color (e.g. PWM=1) and have sharp contrast\napplications, then higher values might be good to minimize ghosting.\n\nHow to decide ? Just leave the default if things are fine. But some panels have\ntrouble with sharp contrasts and short pulses that results\nin ghosting. It is particularly apparent in situations such as bright text\non black background. In these cases increase the value until you don't see\nthis ghosting anymore.\n\nThe following example shows how this might look like:\n\nGhosting with low --led-pwm-lsb-nanoseconds  | No ghosting after tweaking\n---------------------------------------------|------------------------------\n![](img/text-ghosting.jpg)                   |![](img/text-no-ghosting.jpg)\n\nIf you tweak this value, watch the framerate (`--led-show-refresh`) while playing\nwith this number.\n\n```\n--led-pwm-dither-bits   : Time dithering of lower bits (Default: 0)\n```\n\nThe lower bits can be time dithered, i.e. their brightness contribution is\nachieved by only showing them some frames (this is possible,\nbecause the PWM is implemented as binary code modulation).\nThis will allow higher refresh rate (or same refresh rate with increased\n`--led-pwm-lsb-nanoseconds`).\nThe disadvantage could be slightly lower brightness, in particular for longer\nchains, and higher CPU use.\nCPU use is not of concern for Rasbperry Pi 2 or 3 (as we run on a dedicated\ncore anyway) but proably for Raspberry Pi 1 or Pi Zero.\nDefault: no dithering; if you have a Pi 3 and struggle with low frame-rate due\nto high multiplexing panels (1:16 or 1:32) or long chains, it might be\nworthwhile to try.\n\n```\n--led-no-hardware-pulse   : Don't use hardware pin-pulse generation.\n```\n\nThis library uses a hardware subsystem that also is used by the sound. You can't\nuse them together. If your panel does not work, this might be a good start\nto debug if it has something to do with the sound subsystem (see Troubleshooting\nsection). This is really only recommended for debugging; typically you actually\nwant the hardware pulses as it results in a much more stable picture.\n\n<a name=\"no-drop-priv\"></a>\n\n```\n--led-no-drop-privs       : Don't drop privileges from 'root' after initializing the hardware.\n```\n\nYou need to start programs as root as it needs to access some low-level hardware\nat initialization time. After that, it is typically not desirable to stay in this\nrole, so the library then drops the privileges.\n\nThis flag allows to switch off this behavior, so that you stay root.\nNot recommended unless you have a specific reason for it (e.g. you need root\nto access other hardware or you do the privilege dropping yourself).\n\n```\n--led-daemon              : Make the process run in the background as daemon.\n```\n\nIf this is set, the program puts itself into the background (running\nas 'daemon').\nYou might want this if started from an init script at boot-time.\n\n```\n--led-inverse             : Switch if your matrix has inverse colors on.\n--led-rgb-sequence        : Switch if your matrix has led colors swapped (Default: \"RGB\")\n```\n\nThese are if you have a different kind of LED panel in which the logic of the\ncolor bits is reversed (`--led-inverse`) or where the Red, Green and Blue LEDs\nare mixed up (`--led-rgb-sequence`). You know it when you see it.\n\nTroubleshooting\n---------------\nHere are some tips in case things don't work as expected.\n\n### Use minimal Raspbian distribution\nIn general, run a minimal configuration on your Pi.\n\n  * Do not use a graphical user interface (Even though the\n    Raspberry Pi foundation makes you believe that you can do that: don't.\n    Using a Pi with a GUI is a frustratingly slow use of an otherwise\n    perfectly good embedded device.).\n    Always operate your Raspberry Pi [headless].\n\n  * Switch off on-board sound (`dtparam=audio=off` in `/boot/config.txt`).\n    External USB sound adapters work, and are much better quality anyway,\n    so that is recommended if you happen to need sound. The on-board sound\n    uses a timing circuit that the RGB-Matrix needs (it seems in some\n    distributions, such as arch-linux, this is not enough and you need\n    to explicitly blacklist the snd_bcm2835 module).\n\n  * Don't run anything that messes in parallel with the GPIO pins, e.g.\n    PiGPIO library/daemon or devices that use the i2c or 1-wire interface if\n    they are on the same pins you need for the panel.\n\n  * I have also seen reports that on some Pis, the one-wire protocol is\n    enabled (w1-gpio). This will also not work (disable by removing\n    `dtoverlay=w1-gpio` in `/boot/config.txt`; or using `raspi-config`,\n    Interface Options -> 1-Wire)\n\n  * If you see some regular flickering, make sure that there is no other\n    process running on the system that could cause that. For instance, it is\n    known that merely running `top` creates a faint flicker every second it\n    updates. Or a regular ntp run can also cause flicker once a minute\n    (switch off with `sudo timedatectl set-ntp false`). Maybe instead you\n    might want to run ntp at system start-up but then not regularly updating.\n    There might be other things running regularly you don't need;\n    consider a `sudo systemctl stop cron` for instance.\n    To address some irregular flicker, consider the\n    [`--led-limit-refresh`](#misc-options) option.\n\n  * There are probably other processes that are running that you don't need\n    and remove them; I usually remove right away stuff I really don't need e.g.\n    ```\n    sudo apt-get remove bluez bluez-firmware pi-bluetooth triggerhappy pigpio\n    ```\n    Take a close look at your systemd (`systemctl`) and see if there are other\n    things running you don't need. If you have seen packages in standard\n    Raspbians that interfere with the matrix code, let me know to include it\n    here.\n    In general: This is why starting with a minimal installation is a good\n    idea: there is simply less cruft that you have to disable.\n\n  * It seems that more recent version of Raspbian Lite result in some faint\n    brightness fluctuations of the displays and it is not quite clear why (see\n    issue [#483](https://github.com/hzeller/rpi-rgb-led-matrix/issues/483)).\n    If you are a Kernel person and can help figuring out what is\n    happening that would be very appreciated. Also, you might know a minimal\n    Linux distribution that is more suited for near realtime applications ?\n\nThe default install of **[Raspbian Lite][raspbian-lite]** or **[DietPi]**\nseem to be good starting points, as they have a reasonably minimal\nconfiguration to begin with. Raspbian Lite is not as lite anymore\nas it used to be; I prefer DietPi these days.\n\n### Bad interaction with Sound\nIf sound is enabled on your Pi, this will not work together with the LED matrix,\nas both need the same internal hardware sub-system (a first test to see if you\nare affected is to run the progrem with `--led-no-hardware-pulse` and see if\nthings work fine then).\n\nIf you run `lsmod` and see the `snd_bcm2835` module, this could be causing trouble.\n(The library actually exits if it finds this module to be loaded).\n\nIn that case, you should create a kernel module blacklist file like the\nfollowing on your system and update your initramfs:\n\n```\ncat <<EOF | sudo tee /etc/modprobe.d/blacklist-rgb-matrix.conf\nblacklist snd_bcm2835\nEOF\n\nsudo update-initramfs -u\n```\n\nReboot and confirm that the module is not loaded.\n\n### I have followed some tutorial on the Internet and it doesn't work\n\nWell, if you use this library, please read the documentation provided _here_,\nnot on some other website. Most important for you to get started\nis the [wiring guide](./wiring.md). There are some tutorials floating around\nthat refer to a very old version of this library.\n\n### I have a Pi1 Revision1 and top part of Panel doesn't show green\n\nUse `--led-gpio-mapping=regular-pi1`\n\n### Logic level voltage not sufficient\nSome panels don't interpret the 3.3V logic level well, or the RPi output drivers\nhave trouble driving longer cables, in particular with\nfaster Raspberry Pis Version 2. This results in artifacts like randomly\nshowing up pixels, color fringes, or parts of the panel showing 'static'.\n\nIf you encounter this, try these things\n\n   - Make sure to have as short as possible flat-cables connecting your\n     Raspberry Pi with the LED panel.\n\n   - In particular if the chips close to the input of the LED panel\n     read 74HC245 instead of 74HCT245 or 74AHCT245, then this board will not\n     work properly with 3.3V inputs coming from the Pi.\n     Use an [adapter board](./adapter/active-3) with a bus-driver that acts as\n     level shifter between 3.3V and 5V.\n     (In any case, it is always a good idea to use the level shifters).\n\n   - A temporary hack to make HC245 inputs work with the 3.3V levels is to\n     supply only like 4V to the LED panel. But the colors will be off, so not\n     really useable as long-term solution.\n\n   - If you can't implement the above things, or still have problems, you can\n     slow down the GPIO writing a bit. This will of course reduce the\n     frame-rate, so it comes at a cost.\n\nFor GPIO slow-down, add the flag `--led-slowdown-gpio=2` to the invocation of\nthe binary.\n\nIf you have an Adafruit HAT or Bonnet\n---------------------------\n\nGenerally, if you want to connect RGB panels via an adapter instead of\nhand-wiring, I suggest to build one of the adapters whose open-hardware\nfiles you find in the [adapter/](./adapter) subdirectory. It is a fun solder\nexercise with large surface mount components.\n\nHowever, Adafruit [offers an adapter][adafruit-hat] which is already ready-made,\nbut it only allows for a single chain. If the\nready-made vs. single-chain tradeoff is worthwhile, then you might go for that\n(I am not affiliated with Adafruit).\n\n### Switch the Pinout\n\nThe Adafruit HAT/Bonnet uses this library but a modified pinout to support other\nfeatures on the HAT. You can choose the Adafruit pinout with a command line\nflag.\n\nJust pass the option `--led-gpio-mapping=adafruit-hat`. This works on the C++\nand Python examples.\n\n### Improving flicker\n\nTo improve flicker, we need to do a little hardware modification,\nbut it is very simple: solder a wire between GPIO 4 and 18 as shown in the\nfollowing picture (click to enlarge):\n\n<a href=\"img/adafruit-mod.jpg\"><img src=\"img/adafruit-mod.jpg\" height=\"80px\"></a>\n\nThen, start your programs with `--led-gpio-mapping=adafruit-hat-pwm`.\n\nNow you should have less visible flicker. This essentially\nswitches on the hardware pulses feature for the Adafruit HAT/Bonnet.\n\n### 64x64 with E-line on Adafruit HAT/Bonnet\nThere are LED panels that have 64x64 LEDs packed, but they need 5 address lines,\nwhich is 1:32 multiplexing (they have an `E` address-line). The first generation\nof the Adafruit HAT/Bonnet was not prepared for this, but it can be done with another\nhardware mod. Beginning October 2018, Adafruit began selling an updated version of\nthe HAT that supports 64x64 panels simply by bridging two pads on the PCB with solder.\n\nYou can identify which HAT you have by looking for the **Address E** pads, circled here:\n\n<a href=\"https://cdn-learn.adafruit.com/assets/assets/000/063/005/original/led_matrices_addr-e-pad.jpg\" target=\"_blank\"><img src=\"https://cdn-learn.adafruit.com/assets/assets/000/063/005/original/led_matrices_addr-e-pad.jpg\" height=80></a>\n\n### New Adafruit RGB Matrix Hat (with Address E pads)\n\nLook for the Address E pads located between the HUB75 connector and Pi camera cutout.\n\nMelt a blob of solder between the center “E” pad the the “8” pad just above it\n(for 64x64 matrices in the Adafruit shop)…*_or_* the “16” pad below (rare, for some\nthird-party 64x64 matrices…check datasheet).\n\n### Old Adafruit HAT/Bonnet (without)\n\nIt is a little more advanced hack, so it is only really for people who are\ncomfortable with this kind of thing.\nFirst, you have to figure out which is the input of the E-Line on your matrix\n(they seem to be either on Pin 4 or Pin 8 of the IDC connector).\nYou need to disconnect that Pin from the ground plane (e.g. with an Exacto\nknife) and connect GPIO 24 to it. The following images illustrate the case for\nIDC Pin 4.\n\n<a href=\"img/adafruit-64x64-front.jpg\"><img src=\"img/adafruit-64x64-front.jpg\" height=\"80px\"></a>\n<a href=\"img/adafruit-64x64-back.jpg\"><img src=\"img/adafruit-64x64-back.jpg\" height=\"80px\"></a>\n\nIf the direct connection does not work, you need to send it through a free\nlevel converter of the Adafruit HAT/Bonnet. Since all unused inputs are grounded\nwith traces under the chip, this involves lifting a leg from the\nHCT245 (figure out a free bus driver from the schematic). If all of the\nabove makes sense to you, you have the Ninja level to do it!\n\nIt might be more convienent at this point to consider the [Active3 adapter](./adapter/active-3)\nthat has that covered already.\n\nRunning as root\n---------------\nThe library requires to access hardware registers to control the LED matrix,\nand create accurate timings. These hardware accesses require to run as root\nuser.\n\nFor security reasons, it is usually not a good idea to run an application\nas root entirely, so this library makes sure to drop privileges immediately\nafter the hardware is initialized.\n\nYou can switch off the privilege dropping with the\n[`--led-no-drop-privs`](#user-content-no-drop-priv) flag, or, if you do this\nprogrammatically,\nchoose the configuration in the\n[`RuntimeOptions struct`](https://github.com/hzeller/rpi-rgb-led-matrix/blob/master/include/led-matrix.h#L401).\n\nNote, you _could_ run as non-root, which will use `/dev/gpiomem`\nto at least write to GPIO, however the precise timing hardware registers are\nnot accessible. This will result in flicker and color degradation. Starting\nas non-root is not recommended.\n\nCPU use\n-------\n\nThese displays need to be updated constantly to show an image with PWMed\nLEDs. This is dependent on the length of the chain: for each chain element,\nabout 1'000'000 write operations have to happen every second!\n(chain_length * 32 pixel long * 16 rows * 11 bit planes * 180 Hz refresh rate).\n\nWe can't use hardware support for writing these as DMA is too slow,\nthus the constant CPU use on an RPi is roughly 30-40% of one core.\nKeep that in mind if you plan to run other things on this computer (This\nis less noticable on Raspberry Pi, Version 2 or 3 that has more cores).\n\nAlso, the output quality is susceptible to other heavy tasks running on that\ncomputer - there might be changes in the overall brigthness when this affects\nthe referesh rate.\n\nIf you have a loaded system and one of the newer Pis with 4 cores, you can\nreserve one core just for the refresh of the display:\n\n```\nisolcpus=3\n```\n\n.. at the end of the line of `/boot/cmdline.txt` (needs to be in the same as\nthe other arguments, no newline). This will use the last core\nonly to refresh the display then, but it also means, that no other process can\nutilize it then. Still, I'd typically recommend it.\n\nPerformance improvements and limits\n-----------------------------------\nRegardless of which driving hardware you use, ultimately you can only push pixels\nso fast to a string of panels before you get flickering due to too low a refresh\nrate (less than 80-100Hz), or before you refresh the panel lines too fast and they\nappear too dim because each line is not displayed long enough before it is turned off.\n\nBasic performance tips:\n- Use --led-show-refresh to see the refresh rate while you try parameters\n- use an active-3 board with led-parallel=3\n- led-pwm-dither-bits=1 gives you a speed boost but less brightness\n- led-pwm-lsb-nanoseconds=50 also gives you a speed boost but less brightness\n- led-pwm-bits=7 or even lower decrease color depth but increases refresh speed\n- AB panels and other panels with that use values of led-multiplexing bigger than 0,\nwill also go faster, although as you tune more options given above, their advantage will decrease.\n- 32x16 ABC panels are faster than ABCD which are faster than ABCDE, which are faster than 128x64 ABC panels\n(which do use 5 address lines, but over only 3 wires)\n- Use at least an rPi3 (rPi4 is still slightly faster but may need --led-slowdown-gpio=2)\n\nMaximum resolutions reasonably achievable:\nA general rule of thumb is that running 16K pixels (128x128 or otherwise) on a single chain,\nis already pushing limits and you will have to make tradeoffs in visual quality. 32K pixels\n(like 128x256) is definitely pushing things and you'll get 100Hz or less depending on the\nperformance options you choose.\nThis puts the maximum reasonable resolution around 100K pixels (like 384x256) for 3 chains.\nYou can see more examples and video capture of speed on [Marc MERLIN's page 'RGB Panels, from 192x80, to 384x192, to 384x256 and maybe not much beyond'](http://marc.merlins.org/perso/arduino/post_2020-03-13_RGB-Panels_-from-192x80_-to-384x192_-to-384x256-and-maybe-not-much-beyond.html)\nIf your refresh rate is below 300Hz, expect likely black bars when taking cell phone pictures.\nA real camera with shutter speed lowered accordingly, will get around this.\n\nUltimately, you should not expect to go past 64K pixels using 3 chains without significant\nquality tradeoffs. If you need bigger displays, you should use multiple boards and synchronize the\noutput.\n\nLimitations\n-----------\nIf you are using the Adafruit HAT/Bonnet in the default configuration, then we\ncan't make use of the PWM hardware (which only outputs\nto a particular pin), so you'll see random brightness glitches. I strongly\nsuggest to do the aforementioned hardware mod.\n\nThe system needs constant CPU to update the display. Using the DMA controller\nwas considered but after extensive experiments\n( https://github.com/hzeller/rpi-gpio-dma-demo )\ndropped due to its slow speed..\n\nThere is an upper limit in how fast the GPIO pins can be controlled, which\nlimits the frame-rate. Raspberry Pi 2's and newer are generally faster.\n\nEven with everything in place, you might see faint brightness fluctuations\nin particular if there is something going on on the network or in a terminal\non the Pi; this could probably be mitigated with some more real-time\nkernel for the Pi; maybe there are also hardware limitations (memory bus\ncontention?). Anyway, if you have a realtime kernel configuration that you\nhave optimized for this application, let me know.\n\nTo address the brightness fluctuations, you might experiment with the\n`FIXED_FRAME_MICROSECONDS` compile time option in [lib/Makefile](lib/Makefile)\nthat has instructions how to set it up.\n\nFun\n---\nI am always happy to see users successfully using the software for wonderful\nthings, like this installation by Dirk in Scharbeutz, Germany:\n\n![](./img/user-action-shot.jpg)\n\n[led-image-viewer]: ./utils#image-viewer\n[video-viewer]: ./utils#video-viewer\n[matrix64]: ./img/chained-64x64.jpg\n[sparkfun]: https://www.sparkfun.com/products/12584\n[ada]: http://www.adafruit.com/product/1484\n[rt-paper]: https://www.osadl.org/fileadmin/dam/rtlws/12/Brown.pdf\n[adafruit-hat]: https://www.adafruit.com/products/2345\n[raspbian-lite]: https://downloads.raspberrypi.org/raspbian_lite_latest\n[DietPi]: https://dietpi.com/\n[Adafruit HAT]: https://www.adafruit.com/products/2345\n[Adafruit Bonnet]: https://www.adafruit.com/product/3211\n[Nodejs binding]: https://github.com/zeitungen/node-rpi-rgb-led-matrix\n[Go binding]: https://github.com/mcuadros/go-rpi-rgb-led-matrix\n[Rust binding]: https://crates.io/crates/rpi-led-matrix\n[Nodejs/Typescript binding]: https://github.com/alexeden/rpi-led-matrix\n[headless]: https://www.raspberrypi.com/documentation/computers/configuration.html#setting-up-a-headless-raspberry-pi\n"
        },
        {
          "name": "adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples-api-use",
          "type": "tree",
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.470703125,
          "content": "# This is a nix-shell for use with the nix package manager.\n# If you have nix installed, you may simply run `nix-shell`\n# in this repo, and have all dependencies ready in the new shell.\n\n{ pkgs ? import <nixpkgs> {} }:\npkgs.mkShell {\n  buildInputs = with pkgs;\n    [\n      graphicsmagick\n      libwebp\n      ffmpeg\n      pkg-config\n      python311\n      python311Packages.cython\n      python311Packages.distutils-extra\n    ];\n    shellHook = ''\n      export CYTHON=cython\n    '';\n}\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiring.md",
          "type": "blob",
          "size": 15.7578125,
          "content": "Connection\n----------\nYou need a separate power supply for the panel. There is a connector for that\nseparate from the logic connector, typically a big one in the center of the\nboard. The board requires 5V (double check the polarity: what is printed\non the board is correct - I once got boards with supplied cables that had red\n(suggesting `+`) and black (suggesting `GND`) reversed!). This power supply is\nused to light the LEDs; plan for ~3.5 Ampere per 32x32 panel.\n\nThe connector on the RGB panels is called a Hub75 interface. Each panel\ntypically has two ports, one is the input and the other is the output to\nchain additional panels. Usually an arrow shows which of the connectors is\nthe input.\n\nHere you see a Hub75 connector to be seen at the bottom of the RGB panel\nboard including the arrow indicating the input direction:\n![Hub 75 interface][hub75-arrow]\n\nOther boards are very similar, but instead of zero-indexed color bits\n`R0`, `G0`, `B0`, `R1`, `G1`, `B1`, they start the index with one and name these\n`R1`, `G1`, `B1`, `R2`, `G2`, `B2`; the functionality is identical.\n![Hub 75 interface][hub75]\n\nThroughout this document, we will use the one-index base, so we will call these\nsignals `R1`, `G1`, `B1`, `R2`, `G2`, `B2` below.\n\nThe `strobe` signals is sometimes also called `latch` or `lat`. We'll call it\n`strobe` here.\n\nIf you plug an IDC-cable into your RGB panel to the input connector, this is\nhow the signal positions are on the other end of the cable (imagine the LED\npanels somewhere outside the picture on the left); note the notch on the right\nside of the connector:\n![Hub 75 IDC connector][hub75-idc]\n\nThe RPi only has 3.3V logic output level, but many displays operated at 5V\ninterprets these logic levels fine, just make sure to run a short\ncable to the board.\nIf you do run into glitches or erratic pixels, consider some line-buffering,\ne.g. using the [active adapter PCB](./adapter/).\nSince we only need output pins on the RPi, we don't need to worry about level\nconversion back.\n\nFor a single chain of LED-panels, we need 13 IO lines, which fit all in the\nheader of the old Raspberry Pis. Newer Raspberry Pis with 40 pins have more\nGPIO lines which allows us to connect three parallel chains of RGB panels.\n\nFor reference, this is how the numbering on the Raspberry Pi looks like:\n<a href=\"img/raspberry-gpio.jpg\"><img src=\"img/raspberry-gpio.jpg\" width=\"600px\"></a>\n\nThis is the same representation used in the table below, which helps for\nvisual inspection.\n\n### Chains\n\nYou connect the Pi to the input of the first in the chain of panels.\nEach panel has an output connector, that you then can connect to the\nnext panel in that chain.\n\nThe IO and library supports to run up to three chains in parallel.\n\nThus you can create a larger panel. Here a schematic view, below in the\n'Power' section, you can see a real-live panel with three chains of 5 panels each seen from the back.\n\n![Coordinate overview][coordinates]\n\n### Wiring diagram\n\nYou find the positions of the pins on the Raspberry Pi and the corresponding\nlogical connections in the table below (there are more GND pins on the\nRaspberry Pi, but they are left out for simplicity).\n\n#### Shared connections\nFor each of the up to three chains, you have to connect `GND`, `strobe`,\n`clock`, `OE-`, `A`, `B`, `C`, `D` to **all** of these (the `D` line is needed\nfor 32x32 displays; 32x16 displays don't need it).\n\nIf you have a 64x64 display, these have an additional `E` line which is\ntypically on Pin 4 or 8 on the matrix connector.\n\nFor these pins, all chains receive the same data line, e.g. if you have three\nchains, you have to wire the `A` output on the Pi with three wires to the\nthree chain inputs of the `A` input.\n\n#### Connections per chain\nThen for each first panel of a chain there is a set of\n(R1, G1, B1, R2, G2, B2) that you have to connect to the corresponding pins.\nThey are marked `[1]`, `[2]` and `[3]` for chain 1, 2, and 3 below.\n\nIf you only connect one panel or have one chain, connect it to\n`[1]` (:smile:); if you use parallel chains, add the other `[2]` and `[3]`.\n\nTo make things quicker to navigate visually, each chain is marked with a\nseparate icon:\n\n`[1]`=:smile:, `[2]`=:boom: and `[3]`=:droplet: ; signals that go to all\nchains have all icons.\n\n|Connection                        | Pin | Pin |  Connection\n|---------------------------------:|:---:|:---:|:-----------------------------\n|                             -    |   1 |   2 | -\n|             :droplet: **[3] G1** |   3 |   4 | -\n|             :droplet: **[3] B1** |   5 |   6 | **GND** :smile::boom::droplet:\n|:smile::boom::droplet: **strobe** |   7 |   8 | **[3] R1** :droplet:\n|                              -   |   9 |  10 | **E**    :smile::boom::droplet: (for 64 row matrix, 1:32)\n|:smile::boom::droplet: **clock**  |  11 |  12 | **OE-**  :smile::boom::droplet:\n|              :smile:  **[1] G1** |  13 |  14 | -\n|:smile::boom::droplet:      **A** |  15 |  16 | **B**    :smile::boom::droplet:\n|                             -    |  17 |  18 | **C**    :smile::boom::droplet:\n|              :smile:  **[1] B2** |  19 |  20 | -\n|              :smile:  **[1] G2** |  21 |  22 | **D**    :smile::boom::droplet: (for 32 row matrix, 1:16)\n|              :smile:  **[1] R1** |  23 |  24 | **[1] R2** :smile:\n|                             -    |  25 |  26 | **[1] B1** :smile:\n|                             -    |  27 |  28 | -\n|              :boom:   **[2] G1** |  29 |  30 | -\n|              :boom:   **[2] B1** |  31 |  32 | **[2] R1** :boom:\n|              :boom:   **[2] G2** |  33 |  34 | -\n|              :boom:   **[2] R2** |  35 |  36 | **[3] G2** :droplet:\n|              :droplet:**[3] R2** |  37 |  38 | **[2] B2** :boom:\n|                              -   |  39 |  40 | **[3] B2** :droplet:\n\nIn the [adapter/](./adapter) directory, there are some boards that make\nthe wiring task simpler.\n\n<a href=\"adapter/\"><img src=\"img/three-parallel-panels-soic.jpg\" width=\"300px\"></a>\n\n### Alternative Hardware Mappings\n\nThe hardware mapping described above is the 'regular' hardware mapping, which\nis the default for this library. However, there are alternative hardware\nmappings to choose from, e.g. Adafruit sells a board where they choose a\ndifferent mapping.\nYou can choose with the `--led-gpio-mapping` flag.\n\nIf you got an adapter board that is from some unknown source and you don't\nget any output: double check the GPIO mappings they use.\n\nYou have relative freedom to assign any pins to the output of your choosing,\njust add a new mapping in [lib/hardware-mapping.c](lib/hardware-mapping.c),\nrecompile and it will be provided as a new option in `--led-gpio-mapping`.\n\n<details><summary>Table: GPIO-pins for each hardware mapping</summary>\n\n|         | regular | adafruit-hat | adafruit-hat-pwm | regular-pi1 | classic | classic-pi1 | compute-module |\n----------|---------|--------------|------------------|-------------|---------|-------------|----------------|\nParallel chains|        3|             1|                 1|            1|        3|            1|               6|\n~OE       |GPIO 18  |GPIO 4        |GPIO 18           |GPIO 18      |GPIO 27  |GPIO 0       |GPIO 18         |\nClock     |GPIO 17  |GPIO 17       |GPIO 17           |GPIO 17      |GPIO 11  |GPIO 1       |GPIO 16         |\nStrobe    |GPIO 4   |GPIO 21       |GPIO 21           |GPIO 4       |GPIO 4   |GPIO 4       |GPIO 17         |\nA         |GPIO 22  |GPIO 22       |GPIO 22           |GPIO 22      |GPIO 7   |GPIO 7       |GPIO 2          |\nB         |GPIO 23  |GPIO 26       |GPIO 26           |GPIO 23      |GPIO 8   |GPIO 8       |GPIO 3          |\nC         |GPIO 24  |GPIO 27       |GPIO 27           |GPIO 24      |GPIO 9   |GPIO 9       |GPIO 4          |\nD         |GPIO 25  |GPIO 20       |GPIO 20           |GPIO 25      |GPIO 10  |GPIO 10      |GPIO 5          |\nE         |GPIO 15  |GPIO 24       |GPIO 24           |GPIO 15      |        -|            -|GPIO 6          |\nChain 1/R1|GPIO 11  |GPIO 5        |GPIO 5            |GPIO 11      |GPIO 17  |GPIO 17      |GPIO 7          |\nChain 1/G1|GPIO 27  |GPIO 13       |GPIO 13           |GPIO 21      |GPIO 18  |GPIO 18      |GPIO 8          |\nChain 1/B1|GPIO 7   |GPIO 6        |GPIO 6            |GPIO 7       |GPIO 22  |GPIO 22      |GPIO 9          |\nChain 1/R2|GPIO 8   |GPIO 12       |GPIO 12           |GPIO 8       |GPIO 23  |GPIO 23      |GPIO 10         |\nChain 1/G2|GPIO 9   |GPIO 16       |GPIO 16           |GPIO 9       |GPIO 24  |GPIO 24      |GPIO 11         |\nChain 1/B2|GPIO 10  |GPIO 23       |GPIO 23           |GPIO 10      |GPIO 25  |GPIO 25      |GPIO 12         |\nChain 2/R1|GPIO 12  |             -|                 -|            -|GPIO 12  |            -|GPIO 13         |\nChain 2/G1|GPIO 5   |             -|                 -|            -|GPIO 5   |            -|GPIO 14         |\nChain 2/B1|GPIO 6   |             -|                 -|            -|GPIO 6   |            -|GPIO 15         |\nChain 2/R2|GPIO 19  |             -|                 -|            -|GPIO 19  |            -|GPIO 19         |\nChain 2/G2|GPIO 13  |             -|                 -|            -|GPIO 13  |            -|GPIO 20         |\nChain 2/B2|GPIO 20  |             -|                 -|            -|GPIO 20  |            -|GPIO 21         |\nChain 3/R1|GPIO 14  |             -|                 -|            -|GPIO 14  |            -|GPIO 22         |\nChain 3/G1|GPIO 2   |             -|                 -|            -|GPIO 2   |            -|GPIO 23         |\nChain 3/B1|GPIO 3   |             -|                 -|            -|GPIO 3   |            -|GPIO 24         |\nChain 3/R2|GPIO 26  |             -|                 -|            -|GPIO 15  |            -|GPIO 25         |\nChain 3/G2|GPIO 16  |             -|                 -|            -|GPIO 26  |            -|GPIO 26         |\nChain 3/B2|GPIO 21  |             -|                 -|            -|GPIO 21  |            -|GPIO 27         |\nChain 4/R1|        -|             -|                 -|            -|        -|            -|GPIO 28         |\nChain 4/G1|        -|             -|                 -|            -|        -|            -|GPIO 29         |\nChain 4/B1|        -|             -|                 -|            -|        -|            -|GPIO 30         |\nChain 4/R2|        -|             -|                 -|            -|        -|            -|GPIO 31         |\nChain 4/G2|        -|             -|                 -|            -|        -|            -|GPIO 32         |\nChain 4/B2|        -|             -|                 -|            -|        -|            -|GPIO 33         |\nChain 5/R1|        -|             -|                 -|            -|        -|            -|GPIO 34         |\nChain 5/G1|        -|             -|                 -|            -|        -|            -|GPIO 35         |\nChain 5/B1|        -|             -|                 -|            -|        -|            -|GPIO 36         |\nChain 5/R2|        -|             -|                 -|            -|        -|            -|GPIO 37         |\nChain 5/G2|        -|             -|                 -|            -|        -|            -|GPIO 38         |\nChain 5/B2|        -|             -|                 -|            -|        -|            -|GPIO 39         |\nChain 6/R1|        -|             -|                 -|            -|        -|            -|GPIO 40         |\nChain 6/G1|        -|             -|                 -|            -|        -|            -|GPIO 41         |\nChain 6/B1|        -|             -|                 -|            -|        -|            -|GPIO 42         |\nChain 6/R2|        -|             -|                 -|            -|        -|            -|GPIO 43         |\nChain 6/G2|        -|             -|                 -|            -|        -|            -|GPIO 44         |\nChain 6/B2|        -|             -|                 -|            -|        -|            -|GPIO 45         |\n\n</details>\n\n\nA word about power\n------------------\n\nThese displays suck a lot of current. At 5V, when all LEDs are on (full white),\nmy 32x32 LED panel draws about 3.4A. For an outdoor panel that is very bright,\nthat can be twice as much.\nThat means, you need a beefy power supply to drive these panels; a 2A USB\ncharger or similar is not enough for a 32x32 panel; it might be for a 16x32.\n\nIf you connect multiple boards together, you needs a power supply that can\nkeep up with 3.5A / panel. Good are old PC power supplies that often\nprovide > 20A on the 5V rail. Or you can get a dedicated 5V high current\nswitching power supply for these kind of applications (check eBay).\n\nThe current draw is pretty spiky. Due to the PWM of the LEDs, there are very\nshort peaks of a couple of 100ns to about 1ms of full current draw.\nOften, the power cable can't support these very short spikes due to inherent\ninductance. This can result in 'noisy' outputs, with random pixels not behaving\nas they should. A low ESR capacitor close to the input is good in these cases.\n\nOn some displays, the quality of the output quickly gets erratic\nwhen voltage drops below 4.5V. Some even need a little bit higher voltage around\n5.5V to work reliably. Also, tweak with the `--led-slowdown-gpio` flag.\n\nWhen you connect these boards to a power source, the following are good\nguidelines:\n   - Have fairly thick cables connecting the power to the board.\n     Plan not to loose more than 50mV from the source to the LED matrix.\n     So that would be 50mV / 3.5A = 14 mΩ. For both supply wires, so 7mΩ\n     each trace.\n     A 1mm² copper cable has about 17.5mΩ/meter, so you'd need a **2.5mm²\n     copper cable per meter and panel**. Multiply by meter and number of\n     panels to get the needed cross-section.\n     (For Americans: that would be ~13 gauge wire for 3 ft and one panel)\n\n   - While a star configuration for the cabeling would be optimal (each panel gets\n     an individual wire from the power supply), it is typically sufficient\n     using aluminum mounting brackets or bars as part of\n     your power solution. With aluminum of 1mm² specific resistivity of\n     about 28mΩ/meter, you'd need a cross sectional area of about 4mm² per panel\n     and meter.\n\n     In the following example you see the structural aluminum bars in the middle\n     (covered in colored vinyl) dualing as power bars. The 60A/5V power supply is connected\n     to the center bolts (display uses about 42A all LEDs on):\n     ![Powerbar][powerbar]\n\n   - Often these boards come with cables that have connectors crimped on.\n     Some cheap cables are typically too thin; you might want to clip them close to\n     the connector solder your proper, thick cable to it.\n\n   - It is good to buffer the current spikes directly at the panel. The most\n     spikes happen while PWM-ing a single line.\n     So let's say we want to buffer the energy to power a single line without\n     dropping more than 50mV. We use 3.5A which is 3.5Joule/second. We do\n     about 140Hz refresh rate and divide that in 16 lines, so we need\n     3.5 Joule/140/16 = ~1.6mJoule in the time period to display one line.\n     We want to get the energy out of the voltage drop of 50mV; so with\n     W = 1/2*C*U², we can calculate the capacitance needed:\n       C = 2 * 1.6mJoule / ((5V)² - (5V - 50mV)²) = ~6400µF.\n     So, 2 x 3300µF low-ESR capacitors in parallel directly\n     at the board are a good choice (two, because lower parallel ESR; also\n     fits easier under board).\n     (In reality, we need of course less, as the highest ripple comes with\n      50% duty cyle thus half the current; also the input is recharching all\n      the time. But: as engineer plan for maximum and then some; in the picture\n      above I am using 1x3300uF per panel and it works fine).\n\nNow welcome your over-engineered power solution :)\n\n[hub75]: ./img/hub75.jpg\n[hub75-arrow]: ./img/hub75-other.jpg\n[hub75-idc]: ./img/idc-hub75-connector.jpg\n[coordinates]: ./img/coordinates.png\n[powerbar]: ./img/powerbar.jpg"
        }
      ]
    }
  ]
}