{
  "metadata": {
    "timestamp": 1736565341908,
    "page": 166,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chrisant996/clink",
      "stars": 3838,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": ".build\ntags\n*.swp\n*.exe\n*.log\n*.patch\n"
        },
        {
          "name": ".luacheckrc",
          "type": "blob",
          "size": 0.6650390625,
          "content": "return {\n    exclude_files = {\n        \".install\",\n        \".lua\",\n        \".luarocks\",\n        \"modules/JSON.lua\",\n        \"lua_modules\"\n    },\n    files = {\n        spec = { std = \"+busted\" },\n    },\n    globals = {\n        \"_co_error_handler\",\n        \"_error_handler\",\n        \"_error_handler_ret\",\n        \"clink\",\n        \"CLINK_EXE\",\n        \"console\",\n        \"coroutine.override_isgenerator\",\n        \"coroutine.override_isprompt\",\n        \"coroutine.override_src\",\n        \"git\",\n        \"io\",\n        \"log\",\n        \"NONL\",\n        \"os\",\n        \"path\",\n        \"pause\",\n        \"rl\",\n        \"rl_state\",\n        \"settings\",\n        \"string\",\n        \"unicode\",\n    }\n}\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 50.5732421875,
          "content": "# Changes\n\n### Releases from [chrisant996/clink](https://github.com/chrisant996/clink) fork\n\n#### v1.7.7\n\n- Fixed [#713](https://github.com/chrisant996/clink/issues/713); character width measurements are wrong for some Chinese characters in terminals other than Windows Terminal (regression introduced in v1.7.6).\n\n#### v1.7.6\n\n- Update Win8.1 character width measurements from [wcwidth-verifier](https://github.com/chrisant996/wcwidth-verifier).\n- Fixed a case where other popup list colors could interfere with the `colors.border` color in `clink.popuplist()`.\n- Fixed [#709](https://github.com/chrisant996/clink/issues/709); TAB expansion doesn't work for `cd ~` (regression introduced in v1.3.36).\n\n#### v1.7.5\n\n- Added new Lua API [console.ellipsify()](#console.ellipsify) to truncate an input string in various ways.\n- Added new [rl_buffer:setcommentrow()](#rl_buffer:setcommentrow) to let [`\"luafunc:\"` commands](#luakeybindings) immediately show text in the comment row.\n- Adjusted some character width measurements based on analysis from [wcwidth-verifier](https://github.com/chrisant996/wcwidth-verifier) on Win8.1, Win10 with conhost, Win10 with Windows Terminal 1.22, Win11 with conhost, and Win11 with Windows Terminal 1.22.\n- The Headline, Pure, and Bureau clinkprompt files now consider unpublished branches as being \"ahead\", even in cases where git doesn't report a specific \"ahead by\" count.\n- Internal changes to the right side prompt implementation, to disentangle unnecessary internal dependencies.\n\n#### v1.7.4\n\n- Changed searching for color themes and custom prompts to always include `themes\\` directories under the Clink program directory and Clink profile directory, even when the `clink.path` setting has been used to remove them from the list of script directories.\n- Improved emoji width measurements.\n  - Unqualified emojis are counted as a single cell now.  Windows Terminal intentionally renders these as a single cell for compatibility with the behavior of the first terminal programs on Linux that began to support emoji characters (an important compatibility detail for the Windows Subsystem for Linux, for example).\n  - Country flag emoji character pairs are recognized.\n  - Skin tone variant selectors are recognized.\n  - The zero width joiner is recognized when it joins two emoji characters, or an emoji and a male or female symbol.\n  - **NOTE:**  A given OS version and terminal program version will only recognize certain combinations of joined emojis as valid sequences.  And Windows Terminal is one of the only terminal programs on Windows that can draw color emoji characters.  Clink has no way to know how a given terminal will actually render sequences of Unicode emoji characters.  If a terminal program renders a particular emoji sequence differently than Clink predicts, then the display may become garbled.  If that happens, don't use that emoji sequence.  But if a terminal program renders an emoji sequence as a single glyph and Clink predicts the width incorrectly, then please open an issue with details about the emoji.\n- The pure.clinkprompt now also supports virtualenv's `VIRTUAL_ENV_DISABLE_PROMPT` and `VIRTUAL_ENV_PROMPT` environment variables.\n- Added [console.cellcountiter()](#console.cellcountiter) so scripts can iterate over Unicode character sequences in a string.  Using `unicode.iter()` returns one codepoint at a time, but emojis can have multiple codepoints and `console.cellcountiter()` groups them together for easy processing and accurate overall width measures (measuring the width of each codepoint in an emoji sequence is not the same as measuring the width of the emoji sequence as a whole).\n- Fixed the right side transient prompt so it shows up even when identical to the right side normal prompt.\n- Fixed the `demo` callback in .clinkprompt files.\n- Fixed potential for incomplete input of Unicode surrogate pairs.  An easy way to encounter the problem was using the Windows emoji picker to input an emoji that's a sequence of other emojis joined together -- for example, the pride flag emoji is a flag emoji joined with a rainbow emoji, and the rainbow emoji uses a surrogate pair.\n- Fixed an edge case where if a .clinkprompt file calls `require()` to load a module, and later on a different script also calls `require()` for the same module, then any event handlers or prompt filters registered by the required module accidentally only worked inside the .clinkprompt that originally required it.  Now required modules behave the same regardless whether they are first required by a .clinkprompt file or by some other script file.\n- Fixed [#685](https://github.com/chrisant996/clink/issues/685); CTRL-L while input text is present redraws the input line wrong.\n- Fixed [#686](https://github.com/chrisant996/clink/issues/686); `clink config -h` shows inaccurate info.\n- Fixed [#696](https://github.com/chrisant996/clink/issues/696); console width length off-by-one on certain characters (in particular U+26A1).\n- Fixed [#698](https://github.com/chrisant996/clink/issues/698); script error when using `clink config prompt show pure`.\n- Fixed [#701](https://github.com/chrisant996/clink/issues/701); issues in Antares prompt (missing tag and error when truncation is needed).\n\n#### v1.7.3\n\n- Added the missing Tomorrow* color themes.\n- Fixed [#682](https://github.com/chrisant996/clink/issues/682); the `clink config theme use` and `clink config prompt use` commands had no effect if there is no `clink_settings` file yet.\n\n#### v1.7.2\n\n- Fixed an error when the updater tried to install the new `themes\\` subdirectory and files.\n\n#### v1.7.0\n\nClink now supports color theme files and custom prompt files.  These enable packaging Clink color settings or Clink custom prompts into shareable files.  This finally makes it easy to download and apply themes or prompts shared by other people, or copy them and modify them.  The new [clink-themes](https://github.com/chrisant996/clink-themes) repo is a site where .clinktheme and .clinkprompt files can be shared (see [Contributing](https://github.com/chrisant996/clink-themes#contributing) for details on how to contribute your own themes and prompts).\n\n- Added support for `*.clinktheme` color theme files; see [Color Themes](#color-themes) for more information.\n  - Added several `clink config theme` commands for color themes (run `clink config theme --help`).\n  - The famous [Dracula](https://draculatheme.com), [Solarized](https://github.com/altercation/solarized) (light and dark), and [Tomorrow](https://github.com/chriskempson/tomorrow-theme) (1 light, 4 dark) themes are included.\n  - Use <code>clink config theme use <span class=\"arg\">name</span></code> to apply a color theme, or set the `CLINK_COLORTHEME` environment variable to the color theme name.\n- Added support for `*.clinkprompt` custom prompt files; see [Custom Prompts](#custom-prompts) for more information.  This makes it easy to share custom prompts, and to have a library of many different custom prompts and switch between them quickly and easily.  One .clinkprompt can be active at a time; activating one deactivates any others.\n  - Added several `clink config prompt` commands for custom prompts (run `clink config prompt --help`).\n  - [Oh-My-Posh](#oh-my-posh) support is included.\n  - Also included are ports of [Agnoster](https://github.com/agnoster/agnoster-zsh-theme), [Pure](https://github.com/sindresorhus/pure), [Headline](https://github.com/Moarram/headline), [Antares](https://github.com/elB4RTO/zsh-themes/tree/master/antares), and a few others (all ported from zsh to Clink).\n  - Use <code>clink config prompt use <span class=\"arg\">name</span></code> to activate a custom prompt module, or set the `CLINK_CUSTOMPROMPT` environment variable to the custom prompt name.\n- Added the ability to show input hints in the comment row (below the input line).\n  - Input hints are off by default, and can be enabled with `clink set comment_row.show_hints true`.\n  - Argmatchers can provide input hints; see [Show a Usage Hint](#addarg_hint) for more information.\n  - Lua scripts can create custom hinters; see [Showing Input Hints](#showinginputhints) for more information.\n- Enhanced the syntax for setting colors; added `italic` and `reverse`, and added `#XXXXXX` and `#XXX` shortcuts for specifying 24-bit color values.\n- Added more popup list colors:  `color.popup_border`, `color.popup_header`, `color.popup_footer`, `color.popup_select`, and `color.popup_selectdesc`.\n- Changed phrasing from \"Accept Suggestion\" to \"Insert Suggestion\" in the documentation and in the auto-suggestions usage hint text.\n- Changed the Lua `print()` function to support UTF8 output and terminal escape codes.  Now the only reasons for a script to use `clink.print()` instead of `print()` are (1) background compatibility or (2) using `NONL` to suppress printing a line ending.\n- Improved terminal output logging when the `debug.log_terminal` setting is enabled (the setting is only for diagnostic use).\n  - Now it captures all WriteConsoleW and WriteFile output sent to stdout or stderr (instead of only capturing output from the Readline library).\n  - Added a `debug.log_output_callstacks` setting which includes callstacks for each output reported by the `debug.log_terminal` setting.\n- Added a workaround for Unicode limitations in legacy console windows and legacy terminals (improves cursor position accuracy when Unicode surrogate pairs are present).\n- Added several new Lua APIs for color themes and custom prompts:  [clink.getprompts()](#clink.getprompts), [clink.applyprompt()](#clink.applyprompt), [clink.getclinkprompt()](#clink.getclinkprompt), [clink.getthemes()](#clink.getthemes), [clink.readtheme()](#clink.readtheme), [clink.applytheme()](#clink.applytheme), [settings.clear()](#settings.clear), [settings.parsecolor()](#settings.parsecolor), [settings.formatcolor()](#settings.formatcolor), [os.createguid()](#os.createguid).\n- Added [git Lua APIs](#git) for use by custom prompts.\n- Added optional `cookie` argument to [clink.promptcoroutine()](#clink.promptcoroutine) to make it simple for *.clinkprompt files to allow customization that makes use of asynchronous prompt filtering without needing modifications to the main *.clinkprompt file.\n- Fixed detecting file associations (some file extensions weren't detected as having file associations, causing executable completion to omit them, and causing input line coloring to be inaccurate).\n- Fixed a case where updating the right side prompt could leave stray characters behind.\n- Fixed a case where the `match.coloring_rules` setting could have no effect.\n- Fixed delay when typing `X:` and it's a remote drive.\n- Fixed coloring `2>&1`; the `1` wasn't colored.\n- Fixed color of leading blank lines in a prompt string (use the terminal's default color, not the `color.prompt` color).\n- Fixed `rl.collapsetilde()` which just didn't do its job.\n- Fixed `%clink_dummy_capture_env%` to stop accidentally leaking into the environment variables collection.\n- Fixed an infinite loop when `prompt.async` was false.\n- Fixed <kbd>F9</kbd> to stop jumping one past the actual entered history number.\n- Fixed various edge case bugs in the input line display, which were uncovered while adding the ability to show input hints.\n\n#### v1.6.21\n\n- Reduced the performance overhead of hooked APIs from about 20 microseconds to about 2 microseconds.\n- Enhanced the executable recognition to avoid flickering red (or `color.unrecognized`) for an executable name that was already recognized in a recent previous input line.\n- Enhanced the `srcmap` command in the Lua debugger so that `srcmap dir` automatically sets up source mappings for Clink's built in scripts using `dir` as the repo root.\n- Fixed when `history.expand_mode` is `off`; it didn't fully turn off all of the history expansion syntax forms (for example the `^` syntax).\n- Fixed input line coloring when the first word is a device name (e.g. `nul` or `com1:`); it should use `color.unrecognized` for the color.\n- Fixed [#651](https://github.com/chrisant996/clink/issues/651); completion doesn't work for `./` and `../` anymore in the first word of a command line.  Now when the `match.translate_slashes` setting is `system` or `backslash` then completing `./` and `../` can complete the word as a path, even though CMD does not consider it to be a path.\n- Fixed [#653](https://github.com/chrisant996/clink/issues/653); `clink_start.cmd` gets run twice if the binaries directory is the same as the profile directory.\n- Fixed [#654](https://github.com/chrisant996/clink/issues/654); input line coloring doesn't treat `^` correctly inside quotes (and related quirks).\n\n#### v1.6.20\n\n- Fixed [#652](https://github.com/chrisant996/clink/issues/652); error when trying to update again after updating to v1.6.20 (regression introduced in v1.6.19).\n\n#### v1.6.19\n\n- Fixed truncated descriptions with `clink set exec.` and then `clink-select-complete` (<kbd>Ctrl</kbd>-<kbd>Space</kbd>) (regression introduced in v1.6.11).\n- Fixed fully qualified paths from a different local drive accidentally being colored with `color.unrecognized`.\n- Fixed [#648](https://github.com/chrisant996/clink/issues/648); on Windows 8.1 the title bar can get changed to \"Windows PowerShell\" for the rest of the CMD session.\n\n#### v1.6.18\n\n- Added a new callback function that can be assigned to an argument position in the table given to `:addarg()` via `onalias=` (see [Responding to Arguments in Argmatchers](#responsive-argmatchers) for more information).  The git argmatcher in the [clink-completions](https://github.com/vladimir-kotikov/clink-completions) repo uses this to support git aliases.\n- When a doskey alias doesn't include any `$` tokens then CMD is guaranteed to ignore the rest of the command line after the alias, so now argmatcher parsing also ignores the rest of the command line and colors it using `color.unexpected`.\n- Suppress the ANSICON warning in the log file and diagnostics output on Windows 8.1.  The performance problem in ANSICON exists, but apparently there isn't a better alternative before Windows 10.\n\n#### v1.6.17\n\n- Added warning in the log file and in `clink-diagnostics` (<kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>Z</kbd>) when ANSICON is detected on Windows 8.1 or greater (it's unnecessary, less functional, and greatly degrades performance).\n- Added language info in `clink-diagnostics` when the code page is not 1252 (for easier troubleshooting).\n- Fixed finding argmatchers registered with exact names (typing `foo` couldn't find an argmatcher registered as `c:\\dir\\foo.exe` because it accidentally looked for `c:\\dir\\foo.EXE`).\n- Fixed [#631](https://github.com/chrisant996/clink/issues/631); script error after `cmd ` when the current language is German.\n\n#### v1.6.16\n\n- Added a workaround for how [scoop](https://scoop.sh/) tries to control app versions and updates ([#615](https://github.com/chrisant996/clink/issues/615); scoop causes `clink autorun install` to use a wrong path).\n- Added an `auto` mode for the `match.translate_slashes` setting.  This mode makes completion translate all slashes in the completed word to match whichever kind occurs first in the word, or to the system path separator if there are no slashes yet (e.g. when completing a directory name).\n- Changed the default to `auto` for the `match.translate_slashes` setting.\n- Updated the `clink.slash_translation()` function.\n- UNC share name completion works with forward slashes now (e.g. `//localhost/`).\n- Added a `clink-toggle-slashes` bindable command, bound by default to <kbd>Ctrl</kbd>-<kbd>/</kbd>.  The command toggles between forward and backslashes in the word at the cursor point, or in the <em>N</em>th word if a numeric argument is provided (e.g. by the <kbd>Alt</kbd>-Digit keys).\n- Fixed the `off` mode for the `matches.translate_slashes` setting (regression introduced in v1.1.23).\n- Fixed input line coloring of `@` in `for %a in (*) do @whatever`.\n- Fixed crash in `glob-list-expansions` when used on an empty word (regression introduced in v1.3.36).\n- Fixed wildcard completions when `match.wild` is on and `match.substring` is off.\n- Fixed obscure edge case where match filtering with wildcards could potentially yield inaccurate results immediately after an auto-suggestion was offered.\n\n#### v1.6.15\n\n- Fixed hiding internal script names in the `clink-diagnostics` output (regression introduced in v1.6.11).\n- Fixed [#613](https://github.com/chrisant996/clink/issues/613); wrong input line coloring for `cmd /c \"command line\"`.\n\n#### v1.6.14\n\n- Fixed `menu-complete` to respect `completion-auto-query-items`.\n- Fixed missing line break before `dump-macros`, `dump-variables`, `clink-dump-functions`, and `clink-dump-macros` (regression introduced in v1.6.3).\n- Fixed `rl.getbinding()` to return `clink-select-complete` instead of `clink-popup-complete` (the latter is just an alias; the real command name is `clink-select-complete`).\n\n#### v1.6.13\n\n- Popup lists can now be filtered.\n  - Press <kbd>F4</kbd> in a popup list to toggle the search mode between \"find\" and \"filter\".\n  - The `clink.popup_search_mode` setting controls the default search mode.\n  - The `clink.popuplist()` function can be told to start in a specific search mode.\n- Added `os.findfiles()` to allow getting files/directories one at a time (versus `os.globfiles()` which collects the entire set all at once into a table).\n- Added `exec.associations` setting to let Executable Completion include files with registered file associations as matches (e.g. launchable documents such as \"*.pdf\" files).\n- Fixed <kbd>Ctrl</kbd>-<kbd>C</kbd> in a popup list copying the wrong entry after having used <kbd>Del</kbd> to delete an entry.\n- Fixed input line coloring to use `color.executable` also for files included by the `exec.path` setting, if the files have registered file associations.\n\n#### v1.6.12\n\n- Fixed [#597](https://github.com/chrisant996/clink/issues/597); prompt shows leftover text sometimes (regression introduced in v1.6.10).\n- Fixed [#596](https://github.com/chrisant996/clink/issues/596); it's easy to forget whether <kbd>Enter</kbd> in history list executes or inserts.\n\n#### v1.6.11\n\n- Added `os.setalias()` for setting a doskey alias without needing to invoke the doskey.exe program.\n- Fixed a case where match descriptions could be displayed with incorrect padding and truncation.\n- Lua debugging enhancements:\n  - Changed the built-in embedded scripts to include debug info, which allows some Lua error messages to be more useful for troubleshooting.\n  - Added `srcmap` command in the Lua debugger to override where to find source files.\n\n#### v1.6.10\n\n- Added an optimization to further reduce flicker when re-drawing the prompt.\n- Added a `user_data.shared_user_data` table to allow linked argmatchers to share data with each other while an input line is being parsed (see [Responding to Arguments in Argmatchers](https://chrisant996.github.io/clink/clink.html#responsive-argmatchers) for details).\n- Fixed [#579](https://github.com/chrisant996/clink/issues/579); popup lists could accidentally truncate text in the first column when there's only one column.\n- Fixed [#576](https://github.com/chrisant996/clink/issues/576); setup exe doesn't remove old uninstall exe files.\n- Fixed [#575](https://github.com/chrisant996/clink/issues/575); error when `color.executable` is set and `color.unrecognized` is not (regression introduced in v1.6.2).\n\n#### v1.6.9\n\n- Fixed [#574](https://github.com/chrisant996/clink/issues/574); `prompt.spacing` \"eats\" lines containing Unicode Surrogate Pairs such as for some [nerdfont](https://nerdfonts.com) icons (Windows Terminal accidentally returns that such lines are empty).\n- Fixed [#573](https://github.com/chrisant996/clink/issues/573); C# was unable to read Clink's version resource.\n- Fixed [#555](https://github.com/chrisant996/clink/issues/555); security advisory [CVE-2020-24370](https://github.com/advisories/GHSA-gfr4-c37g-mm3v) for a Lua bug.\n\n#### v1.6.8\n\n- Fixed [#571](https://github.com/chrisant996/clink/issues/571); error in clink.bat under some circumstances (regression introduced in v1.6.7).\n\n#### v1.6.7\n\n- Recognize the little-known `cmd /r` as a synonym for `cmd /c` so that Clink can optimize and skip injecting into a `cmd /r` process.\n- Fixed displaying descriptions when they're left-justified (regression introduced in v1.6.6).\n- Fixed `argmatcher:chaincommand(\"run\")` to not find argmatchers for builtin CMD command names (since CMD doesn't get invoked in that case, so it won't get interpreted as a CMD command).\n- Fixed `argmatcher:chaincommand()` to find an argmatcher for a builtin CMD command even if a directory exists with the same name (since CMD interprets that case as a CMD command).\n- Fixed `argmatcher:chaincommand(\"cmd\")` so when `exec.aliases` is enabled it can include aliases as completions.\n- Fixed `argmatcher:addarg({loopchars=\"+\", etcetc})` so that `-Q:+x` still gets parsed into two input words `-Q:` and `+x`.\n- Fixed to parse `foo^ bar` as two words \"foo\" and \"bar\".\n- Fixed to recognize `^echo` (etc) as a builtin CMD command name despite embedded `^` characters.\n- Fixed [#570](https://github.com/chrisant996/clink/issues/570); fixed #569 more thoroughly, and `cd /d` cannot be used anywhere because it also requires command extensions.\n\n#### v1.6.6\n\n- Added `clink history --no-show-time` to allow omitting history timestamps even when the `history.time_stamp` setting is `show`.\n- Fixed match display to not right justify descriptions when the screen isn't wide enough or when descriptions contain aligned columns (like `clink set` completions do since v1.6.3).\n- Fixed `clink history` when output is redirected; strip any escape codes that might be embedded in the time format.\n- Fixed [#569](https://github.com/chrisant996/clink/issues/569); `cmd /e:off` causes syntax error in clink.bat script.\n- Fixed [#567](https://github.com/chrisant996/clink/issues/567); `clink history compact` accidentally deletes all timestamps.\n- Fixed documentation error in Lua API Reference about `\"w\"` mode in `io.open()` and `io.sopen()` (the behavior was correct, but the documentation was inaccurate/unclear).\n\n#### v1.6.5\n\n- Added all match fields in the table of matches passed to the `clink.onfiltermatches()` callback function.\n- Fixed stripping colors from strings (e.g. when displaying in popup lists); it didn't strip 8-bit and 24-bit colors correctly.\n\n#### v1.6.4\n\n- Added `rl_buffer:hassuggestion()` and `rl_buffer:insertsuggestion()` for direct access to inserting suggestions without invoking Readline commands.\n- Added `clink.dirmatchesexact()` and `clink.filematchesexact()` which are the same as the non-`exact` variants, except these don't append a `*` to the search pattern.  For example, `clink.filematchesexact(\"*.zip\")` can collect exactly \"\\*.zip\" file matches instead of \"\\*.zip\\*\".\n- Added OS version info to `clink info`.\n- Added UNC share name completion when using Executable Completion (the `exec.enable` setting).\n- Fixed completing input `.` or `..` when the `exec.enable` setting is enabled.\n- Fixed applying `colored-completion-prefix` when match display filtering is active or a match has a custom `display` field.\n- Fixed the `exec.path` setting so it doesn't accidentally include directories if their names end with an executable extension such as `.exe`.\n- Fixed finding an argmatcher registered with a full path (e.g. `c:\\foo\\bar.exe`) when a full path is entered without a drive letter (e.g. enter `\\foo\\bar.exe`).\n- Fixed [#562](https://github.com/chrisant996/clink/issues/562); `clink autorun install` strips quotes by mistake.\n\n#### v1.6.3\n\n- **Breaking Change:** For the four <kbd>Ctrl</kbd>-<kbd>-</kbd> key combinations, Clink got the <kbd>Shift</kbd> key backwards and generated inaccurate input codes.  And that broke the Readline/bash default key binding for `undo` (the Windows default key binding of <kbd>Ctrl</kbd>-<kbd>z</kbd> works fine).  If your .inputrc file has bindings for any of the <kbd>Ctrl</kbd>-<kbd>-</kbd> key combinations then you can keep the keys working the same by updating the key bindings.  You can even use the [`$if clink_version >= 1.6.3`](#if_clink_version) syntax in your .inputrc file to make it define the key bindings differently in different versions of Clink.\n  Key Combination | Old Code | New Code\n  -|-|-\n  <kbd>Ctrl</kbd>-<kbd>-</kbd> | `\"\\C-_\"` or `C-_` | `\"\\e[27;5;189~\"`\n  <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>-</kbd> | `\"\\e[27;6;189~\"` | `\"\\C-_\"` or `C-_`\n  <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>-</kbd> | `\"\\e\\C-_\"` or `\"\\M-\\C-_\"` or `M-C-_` or etc | `\"\\e[27;7;189~\"`\n  <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>Shift</kbd>-<kbd>-</kbd> | `\"\\e[27;8;189~\"` | `\"\\e\\C-_\"` or `\"\\M-\\C-_\"` or `M-C-_` or etc\n- Completions for all `clink set` settings include the current value in the description field (e.g. type `clink set `<kbd>Alt</kbd>-<kbd>=</kbd> to see Clink settings and their current values).\n- Fixed to differentiate between `undo` and `vi-undo` commands again (they do the same thing, but are technically different commands).\n- Fixed `execute-named-command` to also accept <kbd>Ctrl</kbd>-<kbd>-</kbd> for `undo` (the emacs binding for undo).\n- Fixed redisplaying multi-line prompts after using completion during `execute-named-command`.\n- Fixed accidentally loading the history file twice on each prompt; now it loads once, as intended.\n- Fixed another double-free and potential crash in the Readline library; after navigating through history entries and then editing a history entry, pressing <kbd>Ctrl</kbd>-<kbd>c</kbd> or <kbd>Ctrl</kbd>-<kbd>Break</kbd> could cause a crash or memory corruption (regression exposed by changes in Readline 8.2).\n- Applied fixes for 6 Lua bugs, curated by [@goodusername123](https://github.com/goodusername123) (thank you!) from [Lua.org](https://lua.org/bugs.html):\n  - \"Dead keys with nil values can stay in weak tables.\"\n  - \"Expression list with four or more expressions in a 'for' loop can crash the interpreter.\"\n  - \"Label between local definitions can mix-up their initializations.\"\n  - \"Return hook may not see correct values for active local variables when function returns.\"\n  - \"Suspended __le metamethod can give wrong result.\"\n  - \"Wrong code generated for a 'goto' followed by a label inside an 'if'.\"\n- Fixed the Lua debugger so 5-digit line numbers don't break indentation when showing source code lines.\n\n#### v1.6.2\n\n- Added optional argument `argmatcher:chaincommand(aliases)` to let the argmatcher know that the chained command will have doskey aliases expanded.\n- Fixed match display potentially missing some matches (regression introduced in v1.6.1).  In particular, git command completions were affected.\n- Fixed command line input parsing so that the first word (the command word) `foo/` is interpreted as two words `foo` and `/` just like CMD does.\n- Fixed [#549](https://github.com/chrisant996/clink/issues/549); `cd -` intercept interferes with `cd` doskey alias.\n- Fixed [#546](https://github.com/chrisant996/clink/issues/546); in Windows 10 when \"Wrap text output on resize\" is unchecked or the Window Width is different from the Screen Buffer Width, then the display becomes garbled.  The root cause is a limitation in how Windows 10 implements support for ANSI escape codes, but Clink now has workaround code that tries to compensate for the problems as much as possible (the terminal display will be a bit jittery, though; there's nothing that can be done about that).\n- Fixed updating the display after using `clink-popup-show-help` to invoke a command that changes only the cursor position.\n- Fixed a case where a custom strategy for auto-suggestions could accidentally skip inserting part of the suggestion.\n- Fixed a race condition where `clink-diagnostics` could encounter an error while printing information about coroutines.\n\n**Important pre-release changes in Readline:**\nReadline 8.2 introduced a crash in the `undo` command after navigating through history and making edits in history entries.  The following pre-release updates in Readline fix the crash and several related issues.  They also fix many other edge-case stability issues, and add a couple of new features.\n- Fixed crashes due to memory corruption in the undo information for editing operations.\n- Fixed many issues found by Address Sanitizer (ASAN); these are edge cases where crashes or memory corruption or malfunctions or memory leaks occurred.\n- Added new `execute-named-command` bindable command which reads a command name from the input and executes it (default is <kbd>Alt</kbd>-<kbd>x</kbd>).\n- Allow `quoted-insert` into search strings.\n- Repeated invocations of `vi-yank-pop` now cycle through the kill ring.\n- Fixed when `do-lowercase-version` is bound to something that's not an uppercase letter.\n- Fixed getting the value of the `active-region-start-color` config variable.\n\n#### v1.6.1\n\n**Features:**\n- Improved input line parsing and coloring:\n  - Commands starting with `@` are supported, and completion correctly ignores the `@`.\n  - Each of the following CMD syntax errors are recognized:  lines starting with `&` or `@2>`, and lines containing `& &` or `2>&file`.\n  - The whole redirections `2>file` or `>file` or `2>&1` are colored instead of only the `>` or `>&`.\n- Completions for `clink set` color settings include a color sample in the description field (e.g. type `clink set color`<kbd>Alt</kbd>-<kbd>=</kbd> to see the color settings and their current color samples).\n- The `clink-reload` bindable command now reverts key bindings and config variables before reloading the inputrc file, so that old bindings and values don't linger in the current session if they've been removed from the inputrc file.\n- Added `clink-dump-functions` and `clink-dump-macros` bindable commands.  These behave similar to `dump-functions` and `dump-macros`, but they show user-friendly key names and `luafunc:` macros are listed as functions instead of as macros.\n- Added some new \"bigword\" cursor movement commands for moving to the next or previous space delimited word; `clink-backward-bigword`, `clink-forward-bigword`, `cua-backward-bigword`, `cua-forward-bigword`.\n- Added a new conditional directive `$if clink_version` in the inputrc file (e.g. `$if clink_version >= 1.6.1`).\n- Added a new `prompt.spacing` setting which can control blank lines before the prompt (it was a clink-flex-prompt feature which has now been incorporated into Clink itself).\n- Added a new `match.coloring_rules` setting and `%CLINK_MATCH_COLORS%` environment variable, both of which supersede Readline's `%LS_COLORS%` definitions when displaying match completions.\n- Internal changes.\n\n**Lua:**\n- Added `line_state:getrangeoffset()` and `line_state:getrangelength()` to get the beginning offset and length of the range in the input line described by the line_state.\n- Added `console.explodeansi()` to split a string into substrings on ANSI escape code boundaries.\n- Added `rl.getinputrcfilename()` to get the loaded inputrc file name.\n- Added `rl.translatekey()` to translate between key sequence formats (input key, key binding, and friendly key name).\n- Added `rl.bracketpromptcodes()` to apply `\\1` and `\\2` codes as needed by Readline in certain inputrc config variables.\n- Document the `CLINK_EXE` global variable which has existed since v1.0.0 but was accidentally undocumented.\n\n**Fixes:**\n- Removed superfluous `;39` and/or `;49` from color setting escape codes in some cases.\n- Fixed `console.readinput()` repeatedly returning nil after `console.checkinput()` returns true (regression introduced in v1.5.12).\n- Fixed loading the `default_inputrc` file if it exists (introduced in v1.3.5, and it never worked properly until now).\n- Fixed the `history-size` config variable to be completely ignored (it interfered with Clink's history database and settings, which were meant to supersede it).\n- Fixed the `clink-popup-show-help` command when including unbound commands (numeric argument of 4) so it doesn't double-list the bound `luafunc:` macros.\n- Fixed updating column text in `clink.popuplist()` when <kbd>Del</kbd> is pressed (e.g. history timestamps in the `clink-popup-history` command).\n- Fixed the width of `clink.popuplist()` to take the title into account.\n- Fixed Lua argument errors for some objects (the argument # in the error message was one lower than it should have been in some messages).\n- Fixed the return value from `rl_buffer:setcursor()`.\n- Fixed `console:getnumlines()` between onendedit and onbeginedit.\n- Fixed erasing the \"History expansion for\" preview when the transient prompt is enabled.\n- Fixed the transient prompt sometimes not erasing properly (regression introduced in v1.5.17).\n- Fixed the color of flags for `clink set` (e.g. `--help`).\n- Fixed the `clink-reload` command so any inputrc file parse errors are printed on new lines.\n- Fixed the `lua.break_on_error` setting so it works properly in released builds of Clink.\n\n#### v1.6.0\n- Updated the Readline library to v8.2 patch 7 (the list here omits changes that were contributed to Readline from Clink, or which do not affect Clink).\n  - New features:\n    - History expansion better understands multiple history expansions that may contain strings that would ordinarily inhibit history expansion (e.g., `abc!$!$`).\n    - There is a new `fetch-history` bindable command that retrieves the history entry corresponding to its numeric argument. Negative arguments count back from the end of the history.\n    - There is a new option: `enable-active-region`. This separates control of the active region and bracketed-paste. It has the same default value as `enable-bracketed-paste`, and enabling bracketed paste enables the active region. Users can now turn off the active region while leaving bracketed paste enabled. (Note that bracketed paste is currently ignored in Clink.)\n    - Readline looks in `%LS_COLORS%` for a custom filename extension (`*.readline-colored-completion-prefix`) and uses that as the default color for the common prefix displayed when `colored-completion-prefix` is set, superseding the `so` type if both are present.\n    - Two new bindable string variables: `active-region-start-color` and `active-region-end-color`. The first sets the color used to display the active region; the second is unused and unnecessary in Clink, but exists anyway for compatibility. If set, these are used in place of terminal standout mode.\n  - Fixes:\n    - Fixed a problem with cleaning up active marks.\n    - Fixed a problem with arithmetic comparison operators checking the version in the inputrc file.\n    - Fixed a bug that could cause readline to crash if the application removed the callback line handler before readline read all typeahead.\n    - Added additional checks for read errors in the middle of readline commands.\n    - Fixed a problem with `unix-filename-rubout` that caused it to delete too much when applied to a pathname consisting only of one or more slashes.\n    - Fixed a couple problems where `transpose-words` could corrupt the end of the input line.\n    - Fixed an issue that caused a history line's undo list to be cleared when it should not have been.\n    - Fixed leaked memory from undo lists.\n    - When replacing a history entry, make sure the existing entry has a non-NULL timestamp before copying it; it may have been added by the application, not the history library.\n- The `blink-matching-paren` setting works in Clink now.\n- Completion works for UNC share names now (share names like `\\\\server\\share`, not server names like `\\\\server`).\n- Improved undo grouping for consecutive inserted text.\n- Added `os.enumshares()` to enumerate the SMB UNC shares on a given server.\n- Fixed Lua error messages from custom Lua libraries that report errors using table objects instead of strings.\n- Fixed issue with the `autosuggest.hint` setting where it could apply incorrect input line coloring when the <kbd>Right</kbd> key isn't bound to one of the usual commands for that key.\n- Internal changes and optimizations.\n\n#### v1.5.18\n- Fixed [#524](https://github.com/chrisant996/clink/issues/524) and [#523](https://github.com/chrisant996/clink/issues/523); garbled display in wide terminal windows (regression introduced in v1.5.14, which exacerbated and revealed a bug that's existed since Clink v1.0.0 alpha and which could intermittently garble Unicode text or escape sequences).\n- Fixed the transient prompt sometimes not displaying properly (regression introduced in v1.5.17).\n\n#### v1.5.17\n- Reduced flicker when async prompt filtering redraws the prompt.\n- When `_argmatcher:addarg()` or `_argmatcher:addflags()` is passed a table containing <code>nowordbreakchars=\"<span class=\"arg\">chars</span>\"</code> then the <span class=\"arg\">chars</span> are not treated as word breaks for that argument index or for flags (see [Overcoming Word Breaks](#addarg_nowordbreakchars) for more information).\n- Added a `user_data` argument to the custom classifier function for an argmatcher (set via `_argmatcher:setclassifier()`).\n- Improved input line coloring for `clink set` so that `color.unexpected` is only used for a completed word that isn't a match.\n- Fixed reading lines from stdin in Lua scripts (e.g. `io.stdin:read()`).\n- Fixed accidentally showing matches in a single column sometimes even when there are no descriptions.\n- Fixed an incomplete `clink inject` if an explicit or implicit `endlocal` happens after `clink inject` but before the prompt is shown (the injection didn't finish successfully until the next time an environment variable was set, but now it finishes immediately).\n\n#### v1.5.16\n- Fixed [#522](https://github.com/chrisant996/clink/issues/522); garbled display in JetBrains WebStorm terminal (regression introduced in v1.5.15).\n  - Fixing this required reverting the change that automatically chose a default for `color.suggestion` based on the current console colors.\n- Fixed `:chaincommand()` so that generators and classifiers that come after argmatchers in the priority order receive the same `line_state` objects as ones that come before argmatchers in the priority order.\n- Fixed `:setdelayinit()` with linked argmatchers; the callback function was only called for registered argmatchers (e.g. `clink.argmatcher(\"foo\"):setdelayinit(func)`) and it wasn't called for linked argmatchers (e.g. `\"-x\" .. clink.argmatcher():setdelayinit(func)`).\n- Fixed the word parser to recognize a single digit as a word when followed by punctuation.\n- Fixed `loopchars` for characters like `-` or `*` that are also Lua pattern characters.\n\n#### v1.5.15\n- Added localized descriptions for flag completions in `cmd`, `cd`, and `rd`.\n- Added partial ability to detect light/dark console color themes:\n  - Added `console.getcolortable()` which returns a table with the console's current 16 predefined colors.  When possible, the table includes a field indicating whether the current console color theme is a light or dark theme.\n  - At this time, the colors can be accurately retrieved only when using the legacy conhost terminal.  When using Windows Terminal, ConEmu, or other ConPty-based terminals there is currently no way to accurately retrieve the colors.  Once the [Terminal#10639](https://github.com/microsoft/terminal/issues/10639) issue is fixed then Clink will also detect the background color in these terminal programs.\n  - Changed the default for `color.suggestion` so that it attempts to detect light themes (bright background colors) when possible, and it attempts to automatically choose a default color for suggestions that is faint but has sufficient contrast to be readable.\n- Fixed the `onlink` callback function in `:addflags()` so that the `arg_index` parameter is correctly `0` instead of `1`.\n- Fixed the upper bound line number for Lua console line API functions.\n- Fixed `console.getlinetext()` when emojis are present.\n\n#### v1.5.14\n- Added a visible usage hint for [Auto-Suggestions](#gettingstarted_autosuggest) to help make the feature more discoverable and usable.  The usage hint can be hidden by turning off the `autosuggest.hint` setting.\n- Added new callback functions that can be assigned to an argument position in the table given to `:addarg()` via `onadvance=` and `onlink=` (see [Responding to Arguments in Argmatchers](#responsive-argmatchers) for more information).\n- Fixed displaying match descriptions containing embedded color codes.\n- Fixed finding argmatchers for doskey alias names containing quotes.\n- Fixed parsing the input line when a doskey alias references a command with an argmatcher that uses the `:chaincommand()` function (e.g. an alias `foo=sudo dir $*` with an argmatcher like `clink.argmatcher(\"sudo\"):chaincommand()` so that completions and input line coloring work properly for the rest of the input line).\n- Fixed the `exec.commands` setting with an argmatcher that uses the `:chaincommand()` function.\n- Fixed `_argmatcher:setclassifier()` so the custom classifier is called for flags as well as for arguments.\n\n#### v1.5.13\n- Added `clink.onhistory()` to register a function to be called when the input line has been accepted and is about to be added to history (and optionally cancel adding it).\n- Fixed `history delete` with a negative number so it indexes backwards from the end, as advertised.\n- Fixed calling `clink.refilterprompt()` from a coroutine, and related fixes to ensure various Lua functions coexist properly with coroutines.\n- Fixed [#520](https://github.com/chrisant996/clink/issues/520); add a link to the Releases page in the updater dialog box.\n\n#### v1.5.12\n- Fixed updating the input line display after using `clink-popup-history` or `win-popup-history` (regression introduced in v1.5.3; the fix in v1.5.4 was incomplete).\n- Fixed `console.checkinput()` so it doesn't eat whatever pending input it detects.\n- Fixed the updater to be more specific about what PowerShell cmdlet it invokes, in case a module replaces the built-in `Expand-Archive` cmdlet.\n\n#### v1.5.11\n- Fixed prompt filters and other Lua coroutines when `color.executable` and `color.unrecognized` are both empty (regression introduced in v1.5.10).\n\n#### v1.5.10\n- Changed `clink update` to consider \"up-to-date\" as a successful case.\n- Fixed a case where the `completion` auto-suggest strategy could be temporarily prevented from providing a suggestion (regression introduced in v1.4.22).\n- Fixed leaked memory when showing history expansion previews.\n- Fixed [#511](https://github.com/chrisant996/clink/issues/511); `!` doesn't need to be treated as a word break character.\n- Internal changes.\n\n#### v1.5.9\n- Added default key binding <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>Up</kbd> for `clink-popup-history`.\n- Fixed the `match.max_rows` setting to control the number of rows of items (instead of the total number of rows including description rows).\n- Fixed [#509](https://github.com/chrisant996/clink/issues/509); crash when using `clink-popup-history` if `history.time_stamp` is `off` (regression introduced in v1.5.7).\n\n#### v1.5.8\n- Fixed [#504](https://github.com/chrisant996/clink/issues/504); the `clink.autoupdate` setting behaves like `auto` even when it's set to `check` (regression introduced in v1.5.5).\n- Fixed [#503](https://github.com/chrisant996/clink/issues/503); the updater could hang if any additional CMD instances were started while the \"Clink Update\" prompt window was open (regression introduced in v1.5.5).\n\n#### v1.5.7\n- Added vertical scrollbars in `clink-select-complete` and in popup lists.\n- Added `terminal.scrollbars` setting which can disable the vertical scrollbars (e.g. according to preference, or if a terminal or font is incompatible with extended Unicode box drawing characters).\n- Added `clink set --info` flag.\n- Added language-related diagnostic info in `clink info`.\n- Added minor optimization when displaying prompt text.\n- Added enhancements in the pager used when displaying help or matches; <kbd>Tab</kbd> or <kbd>Space</kbd> or <kbd>Y</kbd> print the next page, <kbd>D</kbd> prints the next half-page, <kbd>Enter</kbd> prints the next line, <kbd>N</kbd> or <kbd>Q</kbd> stop printing, and <kbd>?</kbd> shows the available keys in the `-- More --` pager prompt (the enhancements were accidentally lost in v1.1.1-alpha).\n- Horizontal scrolling in popup lists works for all columns, if text doesn't fit in the column.\n- Fixed crash in `rl.getmatchcolor(match, type)`; when the optional `type` parameter was passed in, the API could crash.\n- Fixed [#498](https://github.com/chrisant996/clink/issues/498); when `autosuggest.enable` is False, cycling or searching through history and then pressing <kbd>Right</kbd> does nothing (regression introduced in v1.5.4).\n- Internal improvements.\n\n#### v1.5.6\n- Added `os.getpushddepth()`, which works when `%PROMPT%` contains exactly one `$+`.\n- The `clink-popup-history` and `win-history-list` commands show timestamps when `history.time_stamp` is set to `show`.\n- Fixed `os.geterrorlevel()` when `cmd /u` was used.\n- Fixed word break parsing in the input line when certain Unicode characters are present.\n- Fixed Unicode string conversions to disallow translating to \"similar\" characters (which could be problematic in filenames).\n- Fixed a crash in `rl.getkeybindings()` if it's called by a Lua script running inside `clink set`.\n- Fixed Lua debugger input if a script error occurs inside `clink set`.\n- Fixed a width quirk in `clink-select-complete` where typing to narrow the list to a single item accidentally made the column width at least 3 characters, even if the item was only 1 or 2 characters width.\n- Fixed `clink history` to handle escape codes embedded in the `history.time_format` setting.\n- Fixed a potential crash after using `remove-history` at the beginning of the history list.\n- Fixed [#494](https://github.com/chrisant996/clink/issues/494); Lua error when using `unicode.fromcodepage()` (reported and fixed before the bug was published).\n- Fixed [#493](https://github.com/chrisant996/clink/issues/493); `clink-select-complete` displays the selected item incorrectly if both `colored-stats` and `colored-completion-prefix` are `off` (regression introduced in v1.5.5).\n\n#### v1.5.5\n- Changed the `clink.autoupdate` setting to allow `off`, `check` (the default), `prompt`, and `auto` for more control over how and when updating happens.  When set to `prompt` or `auto` Clink can trigger updates automatically, so you don't need to even run `clink update`.\n- Enhanced `debug.log_terminal` to include low level console keyboard and mouse input events.\n- Fixed `debug.log_terminal` to capture all input (regression introduced in v1.5.2).\n- Fixed slowness during `clink-select-complete` while typing, caused by excessive match generation.\n- Fixed selection highlight in `clink-select-complete` when the whole match text has been typed.\n- Fixed [#486](https://github.com/chrisant996/clink/issues/486); window title escape code doesn't work properly if it contains emojis or UTF8 content.\n- Internal changes.\n\n#### v1.5.4\n- Further contrast improvements for default colors to be readable in both Dark and Light terminal themes.\n- Added `arginfo` field in `builder:addmatches()` and in match display filtering.\n- Auto-suggestions are no longer shown while searching history; it was too distracting and confusing.\n- Fixed updating the input line display after using `clink-popup-history` or `win-popup-history` (regression introduced in v1.5.3).\n- Fixed `old-menu-complete` and `menu-complete` when there's only one match.  The first time it should insert the match, and subsequent times should ding instead of cycling through the same match over and over and requiring an equal number of `undo` to undo.\n- Fixed match display filtering to support the `match.substring` setting.\n- Fixed match display filtering to support the `files.system` setting.\n- Fixed the cursor position if match display filtering happens the first time `clink-select-complete` is used in a session.\n- Fixed a case where two `undo` were required to fully undo what `menu-complete` inserted.\n- Fixed <kbd>Esc</kbd> during incremental history search mode so it cancels the search.\n- Fixed input line coloring after `non-incremental-reverse-search-history` or `non-incremental-forward-search-history` finds an exact match for the search text (since v1.1.5).\n- Internal changes and optimizations.\n\n#### v1.5.3\n- Added `builder:setfullyqualified()` to force completions to be inserted as fully qualified path names.\n- Completions for <code>clink set <span class=\"arg\">setting_name</span> <span class=\"arg\">input</span></code> use fully qualified path names for <span class=\"arg\">input</span>.  This helps avoid accidentally setting relative paths in global settings; since the current directory changes frequently, setting relative paths usually leads to unintended consequences.\n- Only load a script from a `completions\\` directory if the associated command exists in the file system.  Also, pass the fully qualified file name as input to the script (in Lua, use `...` to get script arguments, e.g. `local command = ...`).\n- `clink info` now reports whether Clink is injected.\n- Improve efficiency of updating the input line display.  This eliminates some redundant processing in the Readline library and in Clink.\n- Fixed input line parsing and coloring when the `doskey.enhanced` setting is off or when doskey macro expansion is suppressed.\n- Fixed `line_state:getwordinfo()` to accurately set the `.alias` field when the `doskey.enhanced` setting is off or when doskey macro expansion is suppressed.\n- Fixed coloring the command word in the command line when queued keys select and accept a command line from history instantly (it could accidentally continue without applying the appropriate coloring).\n- Fixed script error in `clink.filematches(nil)` and `clink.dirmatches(nil)`; they were meant to behave the same as passing an empty string.\n\n#### v1.5.2\n- Adjusted the colors in \"Use enhanced defaults\" to have sufficient contrast to be readable in both Dark and Light terminal themes.\n- More reliably detect whether hosted in Windows Terminal, and even when Windows Terminal is set as the default terminal application.\n- Fixed crash in `clink.popuplist()` when the `current` argument is past the end of the list of items.\n- Fixed cursor location when the input line contains embedded CTRL characters.\n- Fixed [#474](https://github.com/chrisant996/clink/issues/474); pasting is slow in Windows Terminal and ConEmu.\n- Fixed [#470](https://github.com/chrisant996/clink/issues/470); typo in help text.\n\n#### v1.5.1\n- Added `rl.getcommandbindings()` to get info about a command, including the key(s) bound to it, if any.\n- Changed to also allow `clink.popuplist()` inside a function registered by `clink.onfiltermatches()`.\n- Changed console input mode handling to more aggressively clear `ENABLE_VIRTUAL_TERMINAL_INPUT` since it interferes with input (especially <kbd>Ctrl</kbd> key combinations) and some console programs set it but accidentally neglect to clear it when they're finished.\n\n#### v1.5.0\n- Added code-signing.\n- Added note after successful `clink update` to clarify that the update will take effect in new Clink windows.\n- Fixed order of running the autostart script (from the `clink.autostart` setting) vs loading Lua; the autostart script should run before Lua so that Lua scripts can query environment variables set by it.  Otherwise Lua scripts may behave differently on initial load versus after invoking the `clink-reload` command (e.g. <kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>R</kbd>).\n- Fixed precedence of match colors; readonly should be lower precedence than executable.\n- Fixed [#469](https://github.com/chrisant996/clink/issues/469); incorrect usage of `memset()`.\n\n"
        },
        {
          "name": "CHANGES.older.md",
          "type": "blob",
          "size": 157.251953125,
          "content": "#### v1.4.28\n\n- Added `console.getcursorpos()` to get the cursor position.\n- Updated `os.getscreeninfo()` to include the cursor position.\n- Changed character width measurements in Windows Terminal to accommodate certain fully qualified color emoji variants such as \"✔️\" vs \"✔\".  The former is U+2714 U+FE0F and Windows Terminal draws a double-width color emoji; the latter is U+2714 and Windows Terminal draws a single-width character in the current font.  Note that Windows Terminal draws the characters; Clink just tries to make the best prediction it can about how Windows Terminal will draw the characters.\n- Fixed display glitch where auto-suggest caused the display to scroll up an extra line at the bottom of the screen.\n- Fixed display glitch where cursor position was wrong when the input line ends with a history expansion directive that ends exactly at the right edge of the terminal.\n- Fixed `cmd.ctrld_exits` so <kbd>Ctrl</kbd>-<kbd>D</kbd> always exits with return code 0, so that terminal programs allow the shell window to close gracefully.\n- Fixed mouse input when the `horizontal-scroll-mode` inputrc variable is `on`.\n- Fixed missing prompt text when a prompt filter encounters an unhandled Lua error; now a placeholder prompt string is used so it's clear where the prompt is.\n- Fixed [#467](https://github.com/chrisant996/clink/issues/467); On-Screen Keyboard in Swedish keyboard layout can't type `\\`.\n- Internal improvements.\n\n#### v1.4.27\n\n- Fixed when the `terminal.emulate` setting is `auto` on Windows 8.1 and earlier (regression introduced in v1.4.26).\n\n#### v1.4.26\n\n- Added built-in support for shell integration with Windows Terminal v1.18 and higher.  _Note: Windows Terminal gets confused about the command line text when the transient prompt is enabled._\n- Changed `clink.getansihost()` to return two strings; the first string is the mode in use, and the new second string is what Clink detected (and will use when the `terminal.emulation` setting is `auto`).\n- Fixed to use terminal emulation when the `terminal.emulate` setting is `auto` and ANSICON is present.  Clink's output is no longer able to be intercepted by ANSICON, so bypass it and use Clink's own terminal emulation.\n- Fixed [#461](https://github.com/chrisant996/clink/issues/461); crash due to invalid RVA in ANSI32.DLL or ANSI64.DLL (ANSICON).\n\n#### v1.4.25\n\n- Now `os.issignaled()` works during `onendedit` and `onfilterinput` events.\n- Improve emulation for <kbd>F7</kbd> history popup (the `win-history-popup` command); <kbd>Left</kbd> or <kbd>Right</kbd> replace the input text with the selected line.\n- Transient prompt filters can suppress the transient prompt on a case by case basis by returning `nil, false`.\n- Fixed typo in `clink set --help` text.\n- Fixed where the prompt prefix (from v1.4.24) is inserted in the prompt string, so that shell integration escape codes can work properly.\n- Fixed [#457](https://github.com/chrisant996/clink/issues/457); unrecognized OSC escape codes accidentally stripped from prompt string.\n\n#### v1.4.24\n\n- Added `path.fnmatch()` which behaves like the Linux `fnmatch(3)` function.\n- Added `os.globmatch()` which performs recursive file pattern globbing [the same as git does](https://git-scm.com/docs/gitignore#_pattern_format).\n- Added support for `%CLINK_PROMPT_PREFIX%`, `%CLINK_PROMPT_SUFFIX%`, `%CLINK_RPROMPT_PREFIX%`, and `%CLINK_RPROMPT_SUFFIX%` to provide prefix/suffix strings to surround the prompt strings, and for prompt filters to define a `:surround()` function to add their own prefix/suffix strings if needed.\n- Fixed `~` by itself to change directories, the same as `~\\`.\n- Fixed horizontal scrolling in popup lists (is possible whenever the item doesn't fit and no items contain control codes).\n- Fixed [#452](https://github.com/chrisant996/clink/issues/452); `history delete #` doesn't work (regression introduced in v1.1.43).\n- Fixed [#448](https://github.com/chrisant996/clink/issues/448); completion malfunction with `..\\does_not_exist` (regression introduced in v1.4.1).\n\n#### v1.4.23\n\n- Added help message in `clink-select-complete`: when descriptions are shown below the matches, this adds text to mention that <kbd>F1</kbd> toggles showing descriptions inline with the matches.\n- Added `clink update --check` to only check for an update without installing it.\n\n#### v1.4.22\n\n- Fixed `clink-select-complete` to use per-match `appendchar` when present.\n- Fixed repetitive unnecessary work in the background when the `completion` auto-suggest strategy encounters a `fromhistory` argument slot in an argmatcher.\n- Fixed the installer `/S` flag (silent install) so it returns exit code 0 on success.\n\n#### v1.4.21\n\n- The `clink-diagnostics` command can report merged argmatchers.  When a numeric arg of 2 or greater is given (e.g. <kbd>Alt</kbd>-<kbd>2</kbd>,<kbd>Ctrl</kbd>-<kbd>x</kbd>,<kbd>Ctrl</kbd>-<kbd>z</kbd>) then it includes a list of defined argmatchers.  The list now also reports any merging of argmatchers that occurred.\n- Fixed `clink update` so `winget` doesn't get confused about whether an update is available for Clink.  Once `winget update clink` performs an update, or once a Clink v1.4.21 or greater .exe installer is run, then `winget` should stop getting confused.\n\n#### v1.4.20\n\n- Fixed `os.isfile()` and `os.isdir()` when the specified name contains `<` or `>` or `\"`, which are special wildcard characters for MS-DOS compatibility.  This caused an error when typing `\"<`, which then mistakenly thought a completion script named `<.lua` existed.\n- Fixed `rl.expandtilde()` to omit a trailing backslash when expanding `~` by itself.  This is to avoid running afoul of the [`\\\"` parsing rules](https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw) for `argv[]` for programs.\n- Fixed potential crash when the `clink` command line takes more bytes as UTF8 than it does as UTF16.\n\n#### v1.4.19\n\n- Added `builder:setforcequoting()` to force quoting rules to be applied to matches even if they aren't filenames.  This also reverts \"quoting for non-filename completions\" in v1.4.13; there isn't a safe and backward-compatible way to automatically deduce when non-filenames matches need quoting, so a match generator needs to turn it on explicitly when desired.\n\n#### v1.4.18\n\n- Added `clink.oninputlinechanged()` to register a function to be called whenever the input line is changed.\n\n#### v1.4.17\n\n- Added `os.isuseradmin()` to get whether CMD is running as an admin account.\n- Added `os.getfileversion()` to get a table with version information if the file contains a Windows version info resource.\n- The `clink-diagnostics` command now reports costs for Lua event callback functions when a numeric arg is given (e.g. <kbd>Alt</kbd>-<kbd>1</kbd>,<kbd>Ctrl</kbd>-<kbd>x</kbd>,<kbd>Ctrl</kbd>-<kbd>z</kbd>) or when the `lua.debug` setting is enabled.\n\n#### v1.4.16\n\n- Added `history.show_preview` setting that controls whether to show a preview of history expansions (previously it was inferred by whether `color.histexpand` was set).\n- Added detection for problematic codes in the prompt string.  The `clink-diagnostics` <kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>Z</kbd> command reports problem codes in the prompt string.  When certain problem codes exist in the prompt string, then Clink compensates by reprinting the entire input line after printing the prompt string.  Ideally, the prompt string should be fixed by the user, but sometimes that's difficult if the prompt string was generated by a tool.\n- **Potential Breaking Change:** Fixed how hidden and system files are handled by `os.globdirs()` and `os.globfiles()` (it had never worked properly).  It worked fine with the default modes of the `files.hidden` and `files.system` settings and `match-hidden-files` config variable.  But if any of those were changed from the default values then malfunctions could occur.  With the fix, in backward compatibility mode the `files.hidden` and `files.system` settings and `match-hidden-files` config variable control whether `os.globdirs()` and `os.globfiles()` find hidden or system files, as before, and things can potentially malfunction.  When the optional `extrainfo` argument is non-zero or when a new optional `flags` table is passed to them, they now default to including hidden files and omitting system files, but the `flags` table can override that.  This change was necessary because some scripts were unable to detect git repositories when the `files.hidden` setting was false.  Excluding hidden files never worked properly in the past.  Clink v1.4.16 does its best to be as backward-compatible and forward-compatible as possible, but in some cases scripts may need to be updated to work properly when the settings or config variable are changed from their default values.\n- Fixed the `match-hidden-files` config variable to work again (regression introduced in v1.0.0).  Also, when off, now it hides files and directories whose names begin with `.`.\n- Fixed [#421](https://github.com/chrisant996/clink/issues/421); `clink.bat` errors with quoted arguments (regression introduced in v1.3.47).\n- Updated documentation with more cross-referencing links for Clink settings, Readline commands, Readline config variables, and standard Lua APIs.\n\n#### v1.4.15\n\n- Added `log.getfile()` to get the current log file path.\n- Fixed match display to better accommodate escape codes for italics and underline, if present and supported by the terminal.\n- Fixed [#414](https://github.com/chrisant996/clink/issues/414); argument color doesn't reset for values in multi-column layout when `colored-stats` is `off`.\n- PR [#418](https://github.com/chrisant996/clink/pull/418); Fix crash caused by destruction of non detached threads.\n- PR [#417](https://github.com/chrisant996/clink/pull/417); Fix buffer overread caused by usage of strcmp on non null-terminated char arrays.\n\n#### v1.4.14\n\n- Fixed autosuggest to update again if matches are marked as volatile and the input line changed while matches were generated in the background (related to [clink-completions#164](https://github.com/vladimir-kotikov/clink-completions/issues/164)).\n\n#### v1.4.13\n\n- Added more status information in `clink-diagnostics` <kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>Z</kbd>.\n- Fixed quoting in the `insert-completions` <kbd>Alt</kbd>-<kbd>*</kbd> command.\n- Fixed quoting for non-filename completions.\n- Fixed a CPU busy-loop after `match_builder:setvolatile()` was called during an autosuggest strategy.\n- Fixed [#411](https://github.com/chrisant996/clink/issues/411); setting `%CLINK_HISTORY_LABEL%` after Clink started didn't take effect (regression introduced in v1.3.18).\n\n#### v1.4.12\n\n- Additional improvements and logging for East Asian ambiguous width characters.\n- Running `clink inject` no longer empties the log file, so that AutoRun doesn't result in the log file being cleared over and over, which interferes with diagnostic efforts.\n- Fixed [#407](https://github.com/chrisant996/clink/issues/407); the `complete` command gets confused by `.` prefix on files.\n\n#### v1.4.11\n\n- Fixed [#406](https://github.com/chrisant996/clink/issues/406); the \"lambdagenerated.omp.json\" theme for Oh-My-Posh has problems in CJK codepages.  The [East Asian Ambiguous](https://www.unicode.org/reports/tr11-2/#:~:text=East%20Asian%20Ambiguous%20%28A%29%20-%20Characters%20that%20occur,sets%2C%20but%20also%20some%20of%20the%20mathematical%20symbols%29.) support has been rewritten to solve multiple subtle issues; the fix in v1.4.9 exposed other inaccuracies.\n\n#### v1.4.10\n\n- Added optional `level` argument to `log.info()` to facilitate more accurate reporting about the calling code.\n- Fixed extra duplicate log entry when the updater finds that Clink is already up to date.\n- Fixed [#405](https://github.com/chrisant996/clink/issues/405); vi search gives unexpected results (regression introduced in v1.4.7).\n- Fixed [#402](https://github.com/chrisant996/clink/issues/402); for convenience, print the Clink Releases page URL after a successful update (takes effect on the next upgrade _after_ v1.4.10).\n\n#### v1.4.9\n\n- Improved the problematic character reporting in the `clink-diagnostics` command.\n- Fixed measurements for the East Asian ambiguous width characters (this should solve the Cmder problems with lambda in the CMD.exe prompt text, including the space after the lambda).\n\n#### v1.4.8\n\n- Added `rl.needquotes()` function to check whether text needs quotes in a command line.\n- Changed the `terminal.color_emoji` setting `auto` mode to more broadly support accurate width measurements for color emojis (regardless whether the terminal program is capable of actually drawing the color emoji).\n- Now `clink-diagnostics` <kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>Z</kbd> automatically analyzes the prompt text for problematic characters, reports them, and offers suggestions for how to solve problems they might be causing.\n- Fixed the `completion` autosuggest strategy so it doesn't provide a suggestion that requires quoting if the command line input is not currently quoted.\n- Fixed overly aggressive detection of color emojis (regression introduced in v1.4.7).\n\n#### v1.4.7\n\n- Clink now supports ARM64.\n- Clink now recognizes when the terminal host is WezTerm.\n- Clink now supports color emojis in Windows Terminal and WezTerm, according to the Unicode v15.0 standard.  The new `terminal.color_emoji` setting controls when Clink assumes the terminal supports color emojis (color emojis are rendered using double-width characters, which can interfere with cursor positioning math, so Clink needs to know whether the terminal supports color emojis).\n- Enabled Readline's support for non-incremental vi-mode search (<kbd>N</kbd>, <kbd>n</kbd>) to search for a shell pattern using `fnmatch()`, as Posix specifies.\n- Fixed obscure issue when a \"luafunc:\" macro modifies the input line and then invokes a completion command.\n- Fixed `line_state:getword()` and `line_state:getendword()` to not strip quotes during `generator:getwordbreakinfo()` functions (regression introduced in v1.1.24).\n- Fixed [#393](https://github.com/chrisant996/clink/issues/393); backward compatibility issue when `clink.arg.register_parser()` is passed something that is not a parser at all.\n- Fixed [#111](https://github.com/chrisant996/clink/issues/111) again; `cd ..`<kbd>Tab</kbd> didn't complete to `..\\` (regression introduced in v1.3.1).\n\n#### v1.4.6\n\n- Added a more informative exit code from `clink inject`.  It returns 0 if successful, 2 if a fatal error occurred, or 1 if a non-fatal error occurred (such as Clink was already present; related to [cmderdev/cmder#2800](https://github.com/cmderdev/cmder/issues/2800)).\n- Fixed [#382](https://github.com/chrisant996/clink/issues/382); `%CLINK_PROFILE%` doesn't supersede `--profile` (regression introduced in v1.0.0).\n\n#### v1.4.5\n\n- Improved debug Lua messages; Clink's built-in Lua scripts reported \"?\" as the filename, and now they report \"{filename.lua}\".\n- Fixed potential for a crash in `clink-help` when including unbound \"luafunc:\" macros for which custom descriptions have been provided (e.g. <kbd>Alt</kbd>-<kbd>4</kbd> then <kbd>Alt</kbd>-<kbd>H</kbd>).\n\n#### v1.4.4\n\n- Fixed the screen width in the Help commands and Completion commands (regression introduced in v1.3.43).\n- Fixed to not load the same Lua script more than once from a completions directory when the Lua script doesn't define an argmatcher.\n- Fixed architecture reported by `clink-diagnostics` <kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>-<kbd>Z</kbd> (regression introduced in v1.3.49).\n\n#### v1.4.3\n\n- Added backward compatibility for obsolete `clink.quote_split()`, `clink.split()`, and `clink.get_screen_info()`.\n- Fixed empty completion list when typing two letters in rapid succession when both the `autosuggest.enable` and `autosuggest.async` settings are enabled.\n\n#### v1.4.2\n\n- Fixed path abbreviation in some cases.\n\n#### v1.4.1\n\n- Added `os.abbreviatepath()` and `os.expandabbreviatedpath()`.\n- Invoking completion expands abbreviated paths when the new `match.expand_abbrev` setting is enabled.\n- Fixed displayed matches for `c:` or `c:dir\\`.\n\n#### v1.4.0\n\n- Added `clink.getpopuplistcolors()` to get the default popup list colors.\n- Added `clink.refilterafterterminalresize()` to enable automatic prompt refilter after terminal resize.  Prompt filters should only enable this if they're designed to refilter very quickly, otherwise they may cause responsiveness problems.\n- The `clink.popuplist()` function allows the `items` table to include fields to override the height, width, colors, and direction of the list.\n- The `clink_settings` file format has been relaxed slightly to accept trailing whitespace after a Boolean setting's value.  Note that manually modifying the `clink_settings` file is not supported; always use `clink set` to query or change Clink settings.\n- Fixed an obscure crash in the Readline library inside the `reverse-search-history` command when pressing the first key of a multikey binding (e.g. <kbd>Ctrl</kbd>-<kbd>X</kbd>) and then pressing any key that does not follow the first key in any of the corresponding multikey bindings (e.g. <kbd>Esc</kbd>).\n- Fixed leaked file handle when `history.save` is False.\n- Fixed [#370](https://github.com/chrisant996/clink/issues/370); <kbd>Tab</kbd> inside `set /p var=` mistakenly discards any previous input.\n\n#### v1.3.51\n\n- Fixed `:setendofflags()`; it made `--` work correctly for input line coloring, but it didn't work correctly when generating match completions.\n- Fixed obscure edge cases where matches returned by Lua scripts could display incorrectly in `clink-select-complete`, or could potentially even crash if Lua scripts returned invalid results from the `ondisplaymatches` or `onfiltermatches` events.\n\n#### v1.3.50\n\n- Fixed the prefix highlighting when displaying matches.\n\n#### v1.3.49\n\n- Autorun detects non-interactive CMD process earlier, before injecting the Clink DLL.  This can improve performance somewhat, and may be able to reduce spurious problems with antivirus tools (such as described in [#367](https://github.com/chrisant996/clink/issues/367)).\n- Updater deletes zip file if it fails to unzip.  This can help automatically recover from a damaged zip download.\n\n#### v1.3.48\n\n- Fixed another [#356](https://github.com/chrisant996/clink/issues/356) case; trailing spaces at end of display were sometimes optimized away by mistake (regression introduced in v1.3.43).\n\n#### v1.3.47\n\n- Removed the message \"Clink autorun is disabled by CLINK_NOAUTORUN\".\n- Fixed [#361](https://github.com/chrisant996/clink/issues/361); detect `%CLINK_NOAUTORUN%` faster.\n- Fixed another [#356](https://github.com/chrisant996/clink/issues/356) case; end of display line not cleared sometimes (regression introduced in v1.3.43).\n\n#### v1.3.46\n\n- Fixed right-side prompts on Windows 8.1 (they never worked correctly on Windows 8.1).\n- More fixes for [#356](https://github.com/chrisant996/clink/issues/356); input line display garbled on Windows 8.1 (regression introduced in v1.3.43).\n\n#### v1.3.45\n\n- Fixed the history expansion preview when the input line grows or shrinks to use a different number of screen rows.\n- Fixed `\"cd\"` so it doesn't match the `cd` argmatcher, because CMD commands cannot be quoted.\n- Fixed [#356](https://github.com/chrisant996/clink/issues/356); input line display garbled on Windows 8.1 (regression introduced in v1.3.43).\n\n#### v1.3.44\n\n- Fixed [#348](https://github.com/chrisant996/clink/issues/348); pasting in ConEmu or Windows Terminal duplicates the 2nd character (regression introduced in v1.3.43).\n\n#### v1.3.43\n\n- Added `clink.max_input_rows` setting that limits the number of screen rows to use for displaying the input line, scrolling as appropriate if the input line exceeds the limit.\n- Added `color.histexpand` setting.  When this is configured with a color, then Clink highlights history expansions in the input line and shows a preview of the expansion that will be applied near the current cursor position.\n- Added `history.auto_expand` setting.  When this is set to false, history expansions will not be performed automatically upon <kbd>Enter</kbd>, but they may still be performed by invoking expansion commands such as `clink-expand-history` <kbd>Alt</kbd>-<kbd>^</kbd>, or `clink-expand-line` <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>E</kbd>.\n- When a coroutine error happens, write a Lua traceback to the log file.\n- The `clink-diagnostics` command now reports costs for prompt filters and input line coloring classifiers when a numeric arg is given (e.g. <kbd>Alt</kbd>-<kbd>1</kbd>,<kbd>Ctrl</kbd>-<kbd>x</kbd>,<kbd>Ctrl</kbd>-<kbd>z</kbd>).\n- Fixed the input line color when the command word is an alias _and_ a directory _and_ has an argmatcher (regression introduced in v1.3.40).\n- Fixed how the inserted completion is highlighted while using `clink-select-complete` with the `match.substring` setting enabled.\n- Fixed Readline bugs in the numeric arg input state;\n  - Numeric arg overflow check was missing in certain cases.\n  - Numeric arg input state could accidentally empty the prompt string.\n  - Numeric arg input state accidentally continued showing the arg input message after using <kbd>Alt</kbd>-<kbd>-</kbd> while already in numeric arg input state.\n- Fixed some minor input line coloring and completion mistakes for `clink set`.\n- Fixed `quoted-insert` followed by <kbd>Esc</kbd>, so that it inserts the raw ESC character.\n- Fixed how <kbd>Esc</kbd> is handled in isearch mode (e.g. <kbd>Ctrl</kbd>-<kbd>r</kbd>); it should terminate isearch without reverting the input line.\n- Fixed `what-is` to consistently reset the color afterward.\n- Fixed vi insertion mode when `terminal.raw_esc` is enabled, so that <kbd>Esc</kbd> changes to vi command mode.\n- Fixed `clink.refilterprompt()` to report an error upon invalid usage (it cannot be used inside a prompt filter, as that could cause infinite recursion and a crash).\n- Fixed [#344](https://github.com/chrisant996/clink/issues/344); `history` prints UTF8 text incorrectly.\n- Fixed [#342](https://github.com/chrisant996/clink/issues/342); typing `foo.abc` doesn't recognize `foo.abc.cmd`.\n- Fixed [#340](https://github.com/chrisant996/clink/issues/340); various display glitches in the Readline library (Clink now uses custom display routines instead of the Readline display routines).\n- Fixed [#339](https://github.com/chrisant996/clink/issues/339); `%CD%` doesn't expand.\n\n#### v1.3.42\n\n- Added `console.checkinput()` to check whether input is available.\n- Changed `console.readinput()` to accept an optional <span class=\"arg\">no_cursor</span> argument to avoid changing cursor visibility or position.\n- Fixed [#320](https://github.com/chrisant996/clink/issues/320); resizing the terminal can garble the prompt (`bash` has the same problem, so Clink now uses custom code to handle resizing the terminal).\n\n#### v1.3.41\n\n- Added `io.truncate()` to truncate a file.\n- Added `string.comparematches()` to compare two matches; this is normally not needed because Clink automatically sorts matches, but some match generators may prefer to disable the automatic sorting and perform custom sorting.\n- Added `rl.describemacro()` to associate descriptions with `luafunc:` macros (or any macro), to be shown in the `clink-show-help` and `clink-what-is` commands.\n- The `clink.popuplist()` function now accepts a callback function to be invoked when <kbd>Del</kbd> is pressed.\n- The `colored-completion-prefix` configuration variable now works with match display filtering, provided the display strings only prepend or append to the match strings.\n- Removed the obsolete `clink.gui_popups` setting.\n- Fixed the `completion-prefix-display-length` configuration variable in various cases.\n- Fixed timing condition that could potentially crash (regression introduced in v1.3.40).\n\n#### v1.3.40\n\n- Clink now has an icon, and also includes some colored icons for color-coding your shortcut files, terminal tabs, and etc.\n- Avoid mis-coloring a directory name as though it is an argmatcher (uses a background thread to stay responsive).\n- Fixed command word completion after `:chaincommand()`.  Now <code>cmd /c&nbsp;</code><kbd>Tab</kbd> works properly.\n- Fixed `:chaincommand()` to work properly in a nested argmatcher; it should imply `:nofiles()` otherwise it can pop out to the previous argmatcher instead of chaining.\n- Fixed `cmd` argmatcher to only chain after the `/c` and `/k` flags, to more accurately match actual cmd.exe syntax.\n- Fixed backward compatibility for argmatchers using the old v0.4.9 APIs with [functions as argument options](#argmatcher_functions) (regression introduced in v1.2.7).\n- Fixed the `clink-select-complete` command with match display filtering.\n\n#### v1.3.39\n\n- \"Use enhanced defaults\" now includes history timestamps.\n- Fixed delay while loading the history file when history timestamps are enabled (regression introduced in v1.3.18).\n- Fixed suggestions to resume after fully accepting an input line suggestion and then changing the text (regression introduced in v1.3.29).\n- Fixed reporting unbound commands in `clink-show-help` when arg is 4 (<kbd>Alt</kbd>-<kbd>4</kbd>,<kbd>Alt</kbd>-<kbd>H</kbd>) (regression introduced in v1.3.9).\n- Fixed to normalize path separators in a fully qualified pathname when using `clink.argmatcher(full_path)`.\n- The documentation now shows a link icon when hovering over any heading or API name, to make it easy to copy and share links.\n\n#### v1.3.38\n\n- Added `clink.recognizecommand()` function that input line coloring classifiers can use to find whether to color a word as executable.  This is the same mechanism Clink uses internally, and the analysis is asynchronous.\n- Now `clink.argmatcher(command)` may be passed a fully qualified pathname for <span class=\"arg\">command</span> to enable different argmatchers for programs with the same name.\n- Fixed argmatcher lookup to favor doskey aliases, so that e.g. \"<code>dir</code>\" can be aliased to an alternative program but \"<code>&nbsp;dir</code>\" can invoke the built-in dir command, and they can each have separate argmatchers.\n- Fixed the `oncommand` event to also fire when the command word offset changes, because adding/removing a leading space can change whether the command is an alias, which can make the typed command word resolve to a different file or program to invoke.\n- Fixed `line_state:getcommandoffset()` when the first word is quoted.\n- Fixed `line_state` parsing for input lines such as `foo.exe&`, so that the `exec.enable` setting can generate matches properly.\n- Fixed completion so that CMD command names are not among the completions when preceded by a quote.\n- Fixed `color.argmatcher` color to not overwrite custom colors that may have already been applied.\n- Fixed `^` to not be a word break character when parsing the input line.\n\n#### v1.3.37\n\n- When `argmatcher:addarg()` is passed a table containing <code>loopchars=\"<span class=\"arg\">chars</span>\"</code> then the <span class=\"arg\">chars</span> are treated as delimiters for a single argument, and they do not move on to the next argument slot in the parser.\n- Added `clink.parseline()` to parse a string into one or more `line_state` objects.\n- Added `os.getdrivetype()` to get the drive type for a path; especially useful if your code needs to skip network paths.\n- Added `match_builder:setvolatile()` to force the matches to be used only once.  This makes it possible for match generators to produce different kinds of matches based on what has been typed, e.g. an email address match generator could list user names until `@` is typed, and then list domain names.\n- The `clink-diagnostics` command now lists registered argmatchers when the numeric arg > 1 (<kbd>Alt</kbd>-<kbd>2</kbd>,<kbd>Ctrl</kbd>-<kbd>x</kbd>,<kbd>Ctrl</kbd>-<kbd>z</kbd>).\n- Rewrote the path parsing routines to properly respect UNC paths and `\\\\?\\` syntax and `\\\\?\\UNC\\` syntax.\n- Fixed `clink.print(NONL, etc)` to not print a TAB character after a `NONL` that is the first argument.\n- Fixed [#329](https://github.com/chrisant996/clink/issues/329); file completions may be mistakenly marked as directories (regression introduced in v1.2.36; affects only backward compatibility mode).\n- Fixed [#326](https://github.com/chrisant996/clink/issues/326); `rl.expandtilde()` doesn't have a way to expand tildes everywhere in an input line string.\n- Fixed [#325](https://github.com/chrisant996/clink/issues/325); potential hangs while typing if `%PATH%` contains a UNC path.\n\n#### v1.3.36\n\n- Incremental search in `clink-popup-history` now centers the found item if it is scrolled out of view.\n- Tilde expansion is supported for all Lua script directory names and for the `%CLINK_PROFILE%` environment variable (but there is a quirk, and for the profile directory tilde expands to `%LOCALAPPDATA%` for backward compatibility purposes).\n- Fixed some tilde expansion issues; quotes weren't always recognized, and embedded tildes could in some cases result in malformed paths.\n- Fixed semicolon delimiter in `%CLINK_COMPLETIONS_DIR%`.\n- Fixed stack exhaustion crash when using `inject --profile nul`.\n- Fixed detection of device names when coloring command words; a device name anywhere in a path is not a valid executable.\n\n#### v1.3.35\n\n- Fixed finding a `completions` directory under the profile directory.\n- Fixed finding a `completions` directory under script directories set via `clink installscripts`.\n- Fixed `clink.refilterprompt()` when the prompt wraps past the edge of the screen and a right-sided prompt string is present.\n- Fixed `rl.getpromptinfo()` when the prompt wraps past the edge of the screen (the `promptline` and `inputline` fields were inaccurate).\n- Fixed consistent sort order for completion matches that differ only by case.\n- Fixed `undo` (<kbd>Ctrl</kbd>-<kbd>z</kbd>) after using `clink-reload` (<kbd>Ctrl</kbd>-</kbd>x</kbd>,<kbd>Ctrl</kbd>-<kbd>r</kbd>).  This also fixes `rl.ismodifiedline()` after `clink-reload`, which was causing clink-flex-prompt to show a modmark after `clink-reload`.\n- Fixed [#321](https://github.com/chrisant996/clink/issues/321); incremental search not working in the `clink-popup-history` command (regression introduced in v1.3.19).\n- Fixed [#320](https://github.com/chrisant996/clink/issues/320); prompt becomes garbled when prompt is updated by async prompt filters and wraps past the edge of the screen and a right-sided prompt string is present.\n\n#### v1.3.34\n\n- Improved error reporting in `lua.debug` mode for coroutine failures.\n- Fixed argmatcher flag definitions that begin with `+` (regression introduced in v1.3.11).\n- Fixed the updater when there are PowerShell configuration problems that cause internal errors unrelated to Clink's use of PowerShell.\n- Fixed potential coroutine failure if a `delayinit` argmatcher is still running after a new input line begins (regression introduced in v1.3.29).\n- Fixed `os.getfileattributes()`, `os.isfile()`, and `os.isdir()` to fail as intended when the input includes a wildcard (regression introduced in v1.1.0).\n- Fixed potential Lua error when typing a command name that included a wildcard, if the wildcard matched a file in a `completions` directory (regression introduced in v1.3.23, due to the `os.getfileattributes()` issue above).\n\n#### v1.3.33\n\n- The `io.popenyield()` function now also returns a function that can be used to get the exit status from the command.\n- Fixed `io.popenyield()` for some programs (such as FC and XCOPY) that fail to start if the stdin handle is empty.\n- Fixed [#312](https://github.com/chrisant996/clink/issues/312); slow startup due to inefficiency in the updater check at startup (regression introduced in v1.3.26).\n\n#### v1.3.31\n\n- Reverted the v1.3.29 change to `file:close()` that returned the process exit state even after `io.popen()` or `io.popenyield()` in a coroutine.  It had subtle negative side effects.\n\n#### v1.3.30\n\n- Fixed the `menu-complete` family of commands for `fromhistory` argmatchers when `autosuggest.enable` is enabled.\n- Fixed [#311](https://github.com/chrisant996/clink/issues/311); \"The handle is invalid.\" (regression introduced in v1.3.29).\n\n#### v1.3.29\n\n- Fixed how <kbd>Right</kbd> and etc work after fully accepting an input line suggestion.  It shouldn't immediately show a new suggestion when the current suggestion is fully accepted (until the cursor is moved or the text changes), and `win-cursor-forward` shouldn't append characters from the previous command (e.g. when `clink.default_bindings` is `windows`).  Otherwise holding or double-pressing <kbd>Right</kbd> can accidentally turn into something the user didn't intend.\n- Fixed double-loading completion script when a command word includes a path component (e.g. \"c:\\clink_dir\\program.exe\" mistakenly attempted to load \"c:\\clink_dir\\program.lua\" instead of loading \"program.lua\" from the completions directories).\n- Fixed delayinit argmatchers so they don't get orphaned if a new input line starts before they finish.\n- Fixed `file:close()` to be able to return the process exit state even after `io.popen()` or `io.popenyield()` in a coroutine.\n\n#### v1.3.28\n\n- Fixed [#309](https://github.com/chrisant996/clink/issues/309); some locales fail to parse the PowerShell version number.\n\n#### v1.3.27\n\n- Added more detailed logging when the updater fails.\n- Added check to make sure PowerShell v5 is present when using `clink update`.\n- Added `unicode.fromcodepage()` and `unicode.tocodepage()` for UTF8 conversions.  One of the cases where this can be useful is when handling redirected output from programs that product output using the current Active Code Page.\n\n#### v1.3.26\n\n- Added `unicode.iter()`, `unicode.isnormalized()`, and `unicode.normalize()` for more precise UTF8 string manipulation.\n- The updater now includes an HTTP header to request no caching, in an effort to work around an issue on Win8.x.\n- The updater now updates the version number displayed in the \"Apps & features\" section of Settings in Windows (or \"Add or Remove Programs\" in Control Panel in older versions of Windows).\n- Fixed the `directories.dupe_mode` setting in `clink set`.\n- Fixed the `remove-history` command when trying to remove a history entry added by the `add-history` command that hasn't yet been saved.\n- Fixed the `/D=` flag in the setup program.\n- Fixed potential double-load of scripts in the profile or binaries directories, due to an issue while searching `completions` directories (regression introduced in v1.3.24).\n- Fixed potential infinite loop when merging an argmatcher with itself.\n- Fixed potential accidental resume of an orphaned coroutine.\n- Fixed potential double-reporting of coroutine errors when the `lua.debug` setting is enabled.\n- Internal maintenance to the coroutine management system.\n\n#### v1.3.25\n\n- Fixed updater when `%TEMP%` contains spaces.\n- Fixed executable file detection to color device names (such as nul, aux, con, lpt1, and com1) as neither recognized nor unrecognized.\n- Fixed [#304](https://github.com/chrisant996/clink/issues/304); hang when typing device names (such as aux, con, lpt1, and com1) (regression introduced in v1.3.23).\n- Fixed [#303](https://github.com/chrisant996/clink/issues/303); downloading latest update doesn't work on Windows 8.x.\n\n#### v1.3.24\n\n- Standardized the order in which `completions` directories are searched.\n- Fixed the second return value from `clink.popuplist()`, which was backwards by mistake.\n\n#### v1.3.23\n\n- Automatically loads Lua completion scripts from `completions` directories.  This allows you to optionally store completion scripts (argmatcher scripts) in a separate directory from your other Lua scripts, so that completion scripts are only loaded when needed.  This can speed up Clink start time, if you have a large volume of argmatcher scripts.  See [Completion Directories](#completion-directories) for more information.\n- Fixed `clink.oncommand()` when redirection appears on the command line before the command name (e.g. `>somefile command`).\n- Fixed both parts of [#300](https://github.com/chrisant996/clink/issues/300); unable to find latest release zip file (incomplete fix in v1.3.22 by mistake).\n\n#### v1.3.22\n\n- When the `lua.debug` setting is enabled, any uncaught errors in coroutines are reported (and logged).\n- Fixed edge case that could cause Windows Terminal to temporarily stop responding mouse input.\n- Fixed [#300](https://github.com/chrisant996/clink/issues/300); unable to find latest release zip file.\n\n#### v1.3.21\n\n- Improved the auto-updater when there are multiple copies of Clink on a computer; it no longer needs to download the .zip update file multiple times.\n- Fixed mouse input when the console is scrolled.\n- Fixed [#299](https://github.com/chrisant996/clink/issues/299); update shown even though up to date.\n\n#### v1.3.20\n\n- Fixed potential crash in popup lists if there are only a few items (regression introduced in v1.3.18).\n- Fixed [#296](https://github.com/chrisant996/clink/issues/296); on some computers closing CMD reports it's taking too long to close (the fix works around external issue).\n\n#### v1.3.19\n\n- Added `directories.dupe_mode` setting that controls how duplicates are handled in the directory history list for the `clink-popup-directories` command.\n- Added <kbd>Del</kbd> to delete a directory entry in the `clink-popup-directories` command.\n- Fixed obscure intermittent problem with `delayinit` argmatchers.\n- Fixed <kbd>Ctrl</kbd>-<kbd>C</kbd> and <kbd>Ctrl</kbd>-<kbd>Break</kbd> in CMD built-in commands (regression introduced in v1.3.14).\n\n#### v1.3.18\n\n- Added a built-in updater for Clink, which is enabled by default.  When enabled, Clink reports when an update is available.  Run `clink update` to apply the update.\n- Added `clink-insert-suggested-line`, `clink-insert-suggested-word`, `clink-insert-suggested-full-word`, and `clink-accept-suggested-line` commands (see [#280](https://github.com/chrisant996/clink/issues/280)).\n- Added optional timestamps in the history file.  The new `history.time_stamp` and `history.time_format` settings control whether timestamps are saved and whether/how timestamps are shown.\n- Added `cmd.altf4_exits` setting to control whether <kbd>Alt</kbd>-<kbd>F4</kbd> makes cmd.exe exit.  This is so that when the `terminal.raw_esc` setting is enabled pressing <kbd>Esc</kbd><kbd>Esc</kbd> behaves the same as <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>[</kbd> as expected, while still allowing <kbd>Alt</kbd>-<kbd>F4</kbd> to work.\n- Added horizontal scrolling in the history popup list.\n- Added `clink.onprovideline()` so scripts can register a function to be called after `onbeginedit` but before any input is processed.  The function can return a string to be executed as a command line, in which case the line editor is not invoked and the `onendedit` and `onfilterinput` events happen immediately (see [#263](https://github.com/chrisant996/clink/discussions/263)).\n- Added `rl.gethistorycount()` and `rl.gethistoryitems()` to access the history items.\n- Added `os.gettemppath()` to get the system temporary directory.\n- Added `io.sopen()` to control sharing access when opening or creating a file.\n- Both `io.open()` and `io.sopen()` support the `\"x\"` file mode modifier (combined with `\"w\"` or `\"w+\"`), which makes the function fail if the file already exists.\n- Improved the `what-is` command to apply word wrapping to the command description.\n- Fixed generating matches from history (`fromhistory=true`) in argmatchers (regression introduced in v1.3.13).\n- Fixed executable file detection for file names that contain `+` characters.\n- Fixed some input keys accidentally handled by the OS sometimes (regression introduced in v1.3.6; original fix was introduced in v1.2.10).\n- Fixed timing conditions where other console programs could accidentally override Clink's mouse input mode.\n- Fixed left mouse click in popup lists when `terminal.mouse_input` is enabled.\n- Fixed alternate key bindings for copy (<kbd>Ctrl</kbd>-<kbd>Ins</kbd>) and paste (<kbd>Shift</kbd>-<kbd>Ins</kbd>).\n- Fixed description column alignment in `clink.popuplist()`.\n- Fixed keyboard driver for <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>[</kbd> when the `terminal.raw_esc` setting is enabled.\n- Fixed keyboard driver for <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>]</kbd> and <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>\\</kbd>.\n\n#### v1.3.17\n\n- Fixed coloring executable files in the input line (some file types weren't detected correctly, and missing files were considered executable if their extension had a file type association).\n- Fixed a potential crash when coloring executable files in the input line (regression introduced in v1.3.16).\n- Fixed [#281](https://github.com/chrisant996/clink/issues/281); screen height detected incorrectly (regression introduced in v1.3.16).\n\n#### v1.3.16\n\n- Added `os.sleep()`.\n- Revised the Clink documentation to directly include the Readline documentation.\n- Fixed executable file detection for file extensions that point at Progids instead of having a shell command.\n- Fixed double help message from `history` command when invalid flags are used.\n- Fixed crash when file permissions block accessing the history file, and the `history` command reports an error message accordingly.\n- Fixed [#262](https://github.com/chrisant996/clink/issues/262); changing the terminal width between prompts (while a different program is running) caused Readline to start displaying the input line incorrectly.\n\n#### v1.3.15\n\n- Fixed [#269](https://github.com/chrisant996/clink/issues/269); reverse video could get confused (regression introduced in v1.3, and incompletely fixed in v1.3.4).\n\n#### v1.3.14\n\n- <kbd>Ctrl</kbd>+<kbd>Break</kbd> can now interrupt some operations, including match display and match generators and the `os.globfiles()` and `os.globdirs()` functions in Lua scripts.\n- Added `os.issignaled()` so Lua scripts can cooperatively interrupt themselves.\n- Improved responsiveness of completion commands when an async prompt filter is still running in the background (`io.popen()` and `os.execute()` are serialized in prompt filter coroutines, and are serialized separately in match generator coroutines, but are not serialized in other coroutines).\n- Fixed displaying pasted lines.\n- Fixed doskey aliases in pasted lines.\n- Fixed [#268](https://github.com/chrisant996/clink/issues/268); crash when `copy` command prompts whether to overwrite a file (regression introduced in v1.3.13).\n\n#### v1.3.13\n\n- Argmatchers can use `:chaincommand()` to treat the rest of the command line as another command.\n  - Added an argmatcher for `cmd` that uses `:chaincommand()`.\n  - E.g. so that completion after `cmd program ` can be parsed by an argmatcher for `program` instead of `cmd`.\n- Argmatchers can be more involved in parsing the command line, if they wish.  See [Responding to Arguments in Argmatchers](#responsive-argmatchers) for more information.\n  - A callback function can be assigned to an argument position by including `onarg=your_callback_function` in the table given to `:addarg()`.\n  - The `onarg` callback and match functions receive an additional `user_data` parameter.  When parsing begins, the `user_data` is an empty table, and your functions can set or get data from the table.  Each time a flag or argument links to another argmatcher, the new argmatcher gets a separate new empty `user_data` table.\n  - The built-in `cd` and `pushd` argmatchers use this to influence match completion for the rest of the input line.  E.g. `pushd \\foo & program `<kbd>Tab</kbd> uses `\\foo` as the current directory when generating possible completions.\n- Functions registered with `clink.onfilterinput()` may optionally return multiple lines in a table.\n- Fixed completions for words that contain `.`, such as `clink set color.`<kbd>Tab</kbd> (regression introduced in v1.3.11).\n- Fixed doskey macros that use `echo off $T ...`.\n- Fixed input line coloring for a drive letter by itself.\n- Fixed input line coloring for a file that exists but is not executable.\n- Fixed obscure edge case with delayinit argmatchers and `operate-and-get-next`.\n- Fixed potentially inconsistent input line coloring when `classifier:applycolor()` is given an escape code that sets only the foreground or background color.\n\n#### v1.3.12\n\n- Improved `clink-select-complete` to show inline descriptions as long as they don't require more than 9 rows to display the matches.\n- Added second argument to the `delayinit` function for an argmatcher.\n- Added `argmatcher:setflagsanywhere()` and `argmatcher:setendofflags()` to control where flags are recognized.\n- Added `clink.getargmatcher()` to find the argmatcher for a command name or command line (`line_state`).\n- Added `os.resolvealias()` to expand doskey alias(es) in a line of text.\n- Added `clink.oncommand()` to register a function to be called when a command is entered in the edit line.\n- Improved support for argmatcher non-flag argument values that end with `=`:  now they can have a linked argmatcher, and input line coloring is applied correctly.\n- Fixed quotes during completion (regression introduced in v1.3.11).\n- Fixed `cd /d dir` argmatcher (regression introduced in v1.3.11).\n- Fixed input line coloring for `\"echo\"` and other CMD commands; quotes disqualify a word from being a CMD command.\n- Fixed redundant argmatcher delayinit for flags.\n- Various minor backward compatibility fixes.\n\n#### v1.3.11\n\n- Updated the list of recognized CMD command names.\n- Better support for `(` and `)` when expanding doskey macros (e.g. now `( macro foo ) & ( macro bar )` works).\n- Fixed word break characters during completion.  Only `=` `;` had ever worked before, and now the normal CMD completion word break characters work (including `,` `!` `+` `(` and many others).\n- Fixed match display to not force a single column unless there are descriptions present.\n- Fixed backward compatibility for `_argmatcher:add_arguments()` and `_argmatcher:set_arguments()` (they were mistakenly adding all the arguments into the first argument position).\n- Fixed backward compatibility for merging argmatchers.\n  - Merging argmatchers works again.  It is still a simple merge similar to v0.4.9, but it should be sufficient for common cases.\n  - Fixed some bugs in how Clink v0.4.9 merged argmatchers (the unit tests for merging fail in v0.4.9).\n  - Added support for some merging cases that weren't implemented yet in v0.4.9.\n- And other obscure minor backward compatibility fixes.\n\n#### v1.3.10\n\n- An argmatcher can extend itself on the fly, when needed.  For example, if it needs to parse arguments and flags from `--help` text, or if the available command arguments change based on the current directory, or etc.  See [Adaptive Argmatchers](#adaptive-argmatchers) for more information.\n- Recognizes `^` and environment variables when coloring the command word, and when navigating by typing a directory name by itself.\n- Added input line coloring for the `rem` command.\n- Fixed memory corruption (regression introduced in v1.3.1).\n- Fixed input line coloring for `clink set setting value & another command`.\n- Fixed argmatcher input line coloring for matches using the `{ match=\"abc\" }` syntax.\n- Fixed finding an argmatcher after `(` at the beginning of the line.\n- Fixed mouse clicks in `clink-select-complete` to insert the clicked match, in addition to highlighting it.\n- Fixed [#252](https://github.com/chrisant996/clink/issues/252); `md` and `rd` should complete more than 1 argument.\n\n#### v1.3.9\n\n- When `argmatcher:addarg()` is passed a table containing `fromhistory=true` then additional matches are generated by parsing the history file to find values for that argument slot from commands in the history file.\n- Added `clink.reclassifyline()` which triggers input line coloring and redisplays the input line.  This is intended for use by a coroutine that has made changes that will affect input line coloring.\n- Added `match_builder:isempty()`.\n- Added mouse horizontal wheel support in `clink-select-complete`.\n- Added back the `_argmatcher:setflagprefix()` function.\n- Loading Lua scripts now reports any syntax errors when the `lua.debug` setting is enabled.\n- Incorporate Lua 5.2.4 (minor patches to the Lua language).\n- Report a warning if the profile directory is configured to point at a file.\n- AutoRun is selected by default again in the installer (reverted change from v1.3.5).\n- The `terminal.raw_esc` setting now also address the same kind of problem with <kbd>Alt</kbd>+<kbd>[</kbd> and <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>O</kbd> as with the <kbd>Esc</kbd> key.\n- Fixed when an argmatcher adds nested tables of matches using the `{ match=\"abc\" }` syntax, so that the nested matches are added recursively and properly suppress adding a space after argument matches that end with `:` or `=`.\n- Fixed when `match_builder:addmatch()` and `match_builder:addmatches()` add nested tables of matches using the `{ match=\"abc\" }` syntax, so that the nested matches are added recursively.\n- Fixed when `match_builder:addmatch()` and `match_builder:addmatches()` add an `\"arg\"` match type, so that they automatically suppress appending a space after matches that end with `:` or `=` (the behavior was documented, but did not work correctly).\n- Fixed `remove-history` so that it updates the history offset correctly and subsequent editing operations affect the correct undo list.\n- Fixed obscure issues in how certain key binding patterns were reported by `clink-show-help` and `dump-functions`.\n- Fixed how `clink echo` reports <kbd>Ctrl</kbd>+<kbd>Backspace</kbd> and <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Backspace</kbd>.\n- Fixed [#249](https://github.com/chrisant996/clink/issues/249); sending keystrokes from WScript does nothing for some keys.\n- Fixed [#244](https://github.com/chrisant996/clink/issues/244); installer did not detect previous installation directory (regression introduced in v1.3.5; the fix takes effect on the next install _after_ an install with the fix).\n\n#### v1.3.8\n\n- Added `terminal.mouse_modifier` setting and `%CLINK_MOUSE_MODIFIER%` environment variable; these can override the modifier keys that activate Clink mouse input.\n- Added `%CLINK_SETTINGS%` environment variable; this can override the directory where the `clink_settings` file is located.  This can be used to put it in a directory that syncs between computers, for example.\n- During `clink-select-complete` <kbd>Ctrl</kbd>+<kbd>Home</kbd> or <kbd>Ctrl</kbd>+<kbd>End</kbd> select the first or last match.\n- When `argmatcher:addarg()` is passed a table containing `nosort=true` then the matches are unsorted (displayed in the order listed in the table).\n- The .zip file now contains `_default_settings` and `_default_inputrc` so that they do not take effect unless manually renamed to remove the `_` name prefix.  This avoids changing the defaults unexpectedly.\n- Fixed mouse click+drag in the input line (it accidentally behaved like double click+drag).\n- Fixed the selection highlight width in `clink-select-complete` when some matches have descriptions but some do not.\n- Fixed `argmatcher:addargunsorted()` to turn off sort.\n- Fixed [#239](https://github.com/chrisant996/clink/issues/239); crash when <kbd>F7</kbd> and <kbd>Del</kbd>.\n\n#### v1.3.7\n\n- Mouse click+drag now works.\n- Mouse click below `clink-select-complete` list expands the list instead of dismissing it.\n- Fixed responding to mouse clicks when the terminal's scrollback buffer is not empty (it only worked in Windows Terminal).\n- Fixed [#237](https://github.com/chrisant996/clink/issues/237); installer does not maintain previously selected \"Autorun when cmd.exe starts\" (regression introduced in v1.3.5).\n\n#### v1.3.6\n\n- Added `terminal.mouse_input` setting; the default is `auto`.  `auto` lets mouse input work in ConEmu, or in the default Conhost terminal when Quick Edit mode is unchecked in the console Properties dialog.  See the documentation for more information.\n- Added `cua-select-word` command that selects the word at the cursor.\n- <kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>Ctrl</kbd>+<kbd>Z</kbd> with a numeric argument always includes registered Lua match generators, prompt filters, etc even when the `lua.debug` setting is off.\n- Fixed potential for a coroutine to have extra delays sometimes when continuing past the end of one edit line, and into the next edit line.\n- Fixed a potential busy loop when the command word is unrecognized.\n- Fixed Quick Edit mode in plain Conhost windows; it had always been disabled (I never noticed because I always configure console windows to disable it anyway).\n\n#### v1.3.5\n\n- Raised default `history.max_lines` to 10000.\n- Added an optional `default_inputrc` file:\n  - It is loaded from the profile directory, or from the binaries directory.\n  - It uses the same format as the `.inputrc` file, and is loaded immediately before the `.inputrc` files.\n  - It has the effect of superseding built-in default values for  Readline configuration variables and key bindings; any settings in the `.inputrc` supersede those in the `default_inputrc` file.\n- The installer has a new \"Use enhanced default settings\" option which installs `default_settings` and `default_inputrc` files to provide default values that activate more of the Clink enhancements (to give a more enhanced experience \"out of the box\").\n- The installer no longer defaults to installing AutoRun.\n- The installer no longer has an option to use versioned install directory; files are installed directly in the install directory.\n- Added `clink.runcoroutineuntilcomplete()` which allows a coroutine to keep running past the end of one edit line, and into the next edit line.\n- Fixed `os.execute()` return values when run in a coroutine (regression introduced in v1.3.2).\n- Fixed the selection color in `clink-select-complete` when `colored-stats` is off.\n- Fixed problems when displaying matches that exceed the screen width.\n- Fixed [#231](https://github.com/chrisant996/clink/issues/231); installer fails sometimes when uncheck \"Use versioned install directory\".\n\n#### v1.3.4\n\n- Pressing <kbd>Del</kbd> or <kbd>Ctrl</kbd>+<kbd>D</kbd> in a command history popup deletes the selected history entry.\n- Changed the default color for directory match completions to bright yellow (bright blue is hard to see).\n- Added an argmatcher for `history`.\n- Added an optional `default_settings` file:\n  - It is loaded from the profile directory, or from the binaries directory.\n  - It uses the same format as the `clink_settings` file, and the values in it supersede the built-in default values for settings.\n  - Settings are now saved if they are set (vs cleared by `clink set setting.name clear`), even if the set value matches the default value.\n- Minor performance improvement when calculating columns widths when `match.fit_columns` is enabled.\n- Fixed accidentally using only one column in `clink-select-complete` when there are 9 or fewer matches and none of them have description text (regression introduced in v1.3.3).\n- Fixed <kbd>Shift</kbd>+<kbd>Right</kbd> to accept the next full word of the suggestion without clearing the rest of the suggestion (regression introduced in v1.3.3).\n- Fixed terminal emulation for the reverse video escape codes (this also fixes the right border color of the selected item in popup lists).\n- Fixed buffer overrun in Readline `yank-last-arg` when the previous command ends in a backslash.\n- Fixed the Readline History library to not apply Unix style backslash escaping in CMD (e.g. in `program subdir\\ text` there are 3 arguments; the `\\ ` is not an escaped space).\n- Fixed crash when displaying matches and `match.fit_columns` is enabled and the terminal width is greater than 150 characters.\n- Fixed potential busy loop during idle (until a key is pressed) in certain cases (regression introduced in v1.3.3).\n- Fixed the emulated terminal color conversions from 8-bit and 24-bit.\n- Fixed cursor style when using `clink` to start a new command window from inside a Windows Terminal window.\n- Fixed quirk when using Clink file completion to complete a directory name for `clink --profile \\foo\\`, so that the path doesn't end up malformed.\n- Fixed a memory leak.\n\n#### v1.3.3\n\n- Match completion display calculates column widths to fit the most columns on the screen.  Can be controlled by the `match.fit_columns` and `match.limit_fitted_columns` settings.\n- Match descriptions are right-justified when more than one column is displayed, to help more columns fit.\n- When multiple columns of matches are displayed with descriptions, the descriptions are bracketed with parentheses for readability and accessibility purposes.\n- <kbd>F1</kbd> in `clink-select-complete` toggles between showing descriptions at the bottom vs with the matches.\n- Added `match.substring` setting that uses a substring search for completions if none are found with a prefix search.\n- Added `color.executable` and `color.unrecognized` settings.  When set, these cause the command word (the first word) to be colored if it is recognized as an executable file, or is not recognized as a command, doskey macro, directory, argmatcher, or executable file.  Lookups are asynchronous for optimum responsiveness while typing.\n- Argmatchers can hide certain flags (e.g. synonyms) by using `argmatcher:hideflags()`.\n- Argmatchers can disable sorting matches by using `argmatcher:addargunsorted()` or `argmatcher:addflagsunsorted()`.\n- Generators can disable sorting matches by using `match_builder:setnosort()`.\n- Fixed duplicated closing quote in `clink-select-complete`.\n- Fixed display of non-directory matches that contain slashes, such as git branch names (regression introduced in v1.3.1).\n- Fixed match display filtering in `clink-select-complete` (regression introduced in v1.3.1).\n- Fixed the `insert-comment` command (regression introduced in v1.2.44).\n- Fixed sorting flag completions so that all `-` flags precede any `--` flags.\n- Fixed a couple of memory leaks, and added memory tracking system to more easily catch leaks.\n- Various minor fixes in `clink-select-complete`.\n\n#### v1.3.2\n\n- Added <kbd>Shift</kbd>+<kbd>Space</kbd> as a recognized key.  By default it is bound to `clink-shift-space`, which invokes whatever is bound to the normal <kbd>Space</kbd> key, so that it continues to behave as before unless you specifically bind something else to the <kbd>Shift</kbd>+<kbd>Space</kbd> key.\n- Added `clink-magic-suggest-space` command which inserts the next full suggested word (if any) up to a space, and then inserts a space.  Binding this to <kbd>Shift</kbd>+<kbd>Space</kbd> can be very handy.\n- Added `cmd.admin_title_prefix` setting that can replace the \"Administrator: \" console title prefix.\n- When loading settings, if there is no setting file yet then Clink looks for a `default_settings` file in the binaries directory and uses that to initalize the settings.\n- Added `CLINK_TERM_VE` and `CLINK_TERM_VS` environment variables that can be set to override the normal (insert mode) and enhanced (overwrite mode) cursor styles, respectively.\n- Various minor fixes to how the cursor style is updated; the visible bell now works in Windows Terminal.\n- When `os.execute()` is used in a coroutine, it automatically yields until complete.\n- Fixed async match generators (during autosuggest) to be allowed to finish, instead of getting canceled on every keystroke if they hadn't finished yet.\n- Fixed cursor blink, which was accidentally disabled (regression introduced in v1.2.44).\n- Fixed the `win-cursor-forward` command so it doesn't trigger generating a new suggestion if there isn't already one.\n\n#### v1.3.1\n\n- Added `autosuggest.async` setting (on by default) that lets suggestions generate matches asynchronously to stay responsive while typing.\n- Added `match.max_rows` setting that limits the number of rows `clink-select-complete` can use.\n- Added `match.preview_rows` setting that makes `clink-select-complete` show the specified number of rows of matches as a preview, and expands to show the full set of matches when the selection moves past the preview rows (similar to completion in the fish shell).\n- Added `color.comment_row` setting that chooses the color for the comment row in `clink-select-complete`.  The comment row shows the \"and <em>N</em> more matches\" or \"rows <em>X</em> to <em>Y</em> of <em>Z</em>\" messages.\n- Changed arrow keys in `clink-select-complete` to wrap on both horizontal and vertical edges (similar to the fish shell).\n- Changed arrow keys in `clink-select-complete` at the beginning and end of the list to wrap to the other end based on the `menu-complete-wraparound` config variable.\n- Match generators can now specify an append character (or suppress appending) on a per-match basis.\n- The `clink-diagnostics` command lists prompt filters, generators, classifiers, and suggesters when a numeric argument is given (e.g. <kbd>Alt</kbd>+<kbd>1</kbd> then <kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>Ctrl</kbd>+<kbd>Z</kbd>).\n- The `os.globdirs()` and `os.globfiles()` functions now automatically yield periodically if used inside a coroutine.\n- The `io.popen()` function now automatically yields periodically if used in read mode (the default) inside a coroutine.\n- The `io.popenyield()` function now automatically falls back to `io.popen()` if used outside a coroutine.\n- Fixed input line coloring to operate on only the input line, not including the suggestion.\n- Fixed display when typing to filter `clink-select-complete` (regression introduced in v1.2.49).\n- Fixed display of `clink-select-complete` when the current match changes the number of visible lines in the edit buffer.\n- Fixed displaying matches when only a drive letter is entered.\n- Fixed [#216](https://github.com/chrisant996/clink/issues/216); Long escaped URLs do not display correctly in a prompt.\n\n#### v1.3\n\n- Added back `mark-modified-lines` support (was removed in v1.2.36).\n- Added `rl.ismodifiedline()` function so prompt filters can show a modified line indicator if they wish.\n- Added `autosuggest.original_case` setting (on by default) that controls whether parts of the line are updated to use the suggestion's original capitalization, or to keep the typed capitalization.\n- Added `terminal.east_asian_ambiguous` setting that controls how the width is determined for the [East Asian Ambiguous](https://www.unicode.org/reports/tr11-2/#:~:text=East%20Asian%20Ambiguous%20%28A%29%20-%20Characters%20that%20occur,sets%2C%20but%20also%20some%20of%20the%20mathematical%20symbols%29.) range of characters (which includes the lambda character).  This may help with working around display issues in some terminal hosts.\n- Added help descriptions for many vi mode commands.\n- Improved relevance of `completion` suggestions by suppressing them when the word at the cursor is empty.\n- The `:suggest()` function on suggesters can now return a suggestion string and an offset where the suggestion begins in the input line.\n- Fixed a limitation in Readline so that `completion-prefix-display-length` and `colored-completion-prefix` can coexist.\n- Fixed when temp files from `io.popenyield()` get deleted.  They were lingering until Lua garbage collection, but they can be deleted almost immediately.\n- Fixed the order of initialization:  first the Readline .inputrc config file is loaded, and then Lua scripts are loaded.  This enables Lua scripts to reliably override Readline config variables if they wish (for example so a prompt filter can clear `emacs-mode-string` and print its own keymap indicator as part of the prompt).\n- Fixed transient prompt to not show keymap mode strings or the modified line mark.\n- Fixed vi mode key bindings that can accept suggestions.\n- Fixed missing `vi-undo` command; it was pre-bound to some keys but could not be bound to any other keys.\n- Fixed the \"show help\" commands when listing unbound commands:  unbound vi mode commands should not be listed in emacs mode because the vi mode commands are only meant to be used in vi mode, and are not meant to be bound to custom keys.\n- Fixed memory leak in suggestions.\n\n#### v1.2.50\n\n- Added `rl.insertmode()` function to get or set whether insert mode is active.\n- Added `clink.onaftercommand()` so scripts can register a function to be called after every input command (key binding).\n- Added additional failure logging during `clink inject`.\n\n#### v1.2.49\n\n- Added `cua-previous-screen-line` and `cua-next-screen-line`, bound to <kbd>Shift</kbd>+<kbd>Up</kbd> and <kbd>Shift</kbd>+<kbd>Down</kbd>, to extend the text selection up/down by one screen line.\n- Updated match generator for `clink set autosuggest.strategy` to list the available suggestion generators.\n- The `clink-show-help` and `clink-popup-show-help` commands can include commands that aren't bound to any key, when the numeric argument is 4 (e.g. <kbd>Alt</kbd>+<kbd>4</kbd> then <kbd>Alt</kbd>+<kbd>H</kbd>).\n- The `rl.getkeybindings()` function takes an optional `mode` argument to control sorting and whether to include commands that aren't bound to any key.\n- Generating suggestions skips generating match completions when the current word looks like a UNC path.  This avoids pauses while typing that would otherwise occur when accessing networked drives.\n- Fixed <kbd>Alt</kbd>+<kbd>Right</kbd> so it accepts the next word of the suggestion, just like <kbd>Ctrl</kbd>+<kbd>Right</kbd> does.\n- Fixed the `clink-paste` command so it sets the mark to the cursor point prior to pasting.\n- Fixed when `history.dupe_mode` is \"erase_prev\" and `history.shared` starts true but changes to false; subsequent commands were not added to the history properly anymore in that session (regression introduced in v1.1.0).\n- Fixed [#210](https://github.com/chrisant996/clink/issues/210); `clink-select-complete` drawing bug with RPROMPT.\n\n#### v1.2.48\n\n- <kbd>Ctrl</kbd>+<kbd>Right</kbd> now inserts the next word of the suggestion the same way it would move to the next word, and <kbd>Shift</kbd>+<kbd>Right</kbd> inserts the next full word of the suggestion up to a space.\n- Keys like <kbd>Home</kbd>/<kbd>End</kbd>, <kbd>Shift</kbd>+<kbd>Left</kbd>/<kbd>Right</kbd>, and <kbd>Ctrl</kbd>+<kbd>Left</kbd>/<kbd>Right</kbd> work in VI mode.\n- Fixed input line coloring glitch when color settings use the `sgr` syntax.\n\n#### v1.2.47\n\n- Added autosuggestions similar to the Fish shell.\n  - Turn on by running `clink set autosuggest.enable true`.  See the `autosuggest.enable` and `autosuggest.strategy` Clink settings for details.\n  - Added `clink.suggester()` function to create new suggestion generators that can be used in the `autosuggest.strategy` setting.\n- The `clink-diagnostics` command also lists match generators registered by `clink.generator()`.\n- Fixed the color when the `horizontal-scroll-mode` config variable is `on`.\n- Fixed the transient prompt when using Help commands.\n- Fixed the `clink autorun` commands when paths contain Chinese characters and the system code page isn't UTF8.\n- Fixed [#209](https://github.com/chrisant996/clink/issues/209); `clink-popup-show-help` command fails.\n- Fixed [#208](https://github.com/chrisant996/clink/issues/208); orphaned symlinks are colored wrong.\n- Fixed [#203](https://github.com/chrisant996/clink/issues/203); unable to inject when Clink binary directory contains Chinese characters (regression introduced in v1.0.0).\n\n#### v1.2.46\n\n- Added a `magic-space` command that performs history expansion on the text before the cursor point and then inserts a space.  Note: this is slightly different than one in bash, which performs history expansion on the whole line and can end up inserting the space in a wrong spot.\n- Added `rl.getbinding()` and `rl.setbinding()` functions to query or override key bindings.\n- Added a `clink.refilterprompt()` function to invoke prompt filtering on demand.\n- The `clink-popup-directories` command is now bound by default to <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>PgUp</kbd>.\n- The `clink-select-complete` command is now bound by default to <kbd>Ctrl</kbd>+<kbd>Space</kbd>.\n- Fixed the `clink-popup-history` command so incremental search works again (regression introduced in v1.2.36).\n- Fixed messages sometimes not being erased when finished, e.g. when using <kbd>Alt</kbd>+<kbd>digits</kbd> (regression introduced in v1.1.11).\n- Fixed potential for prompt to redraw incorrectly after showing help when the `prompt.transient` setting is enabled.\n- Fixed settings defined by Lua scripts so that the Lua scripts can reliably see the current values even while the Lua scripts are being loaded or reloaded.\n\n#### v1.2.45\n\n- Clarified description of the `match.wild` Clink setting.\n- Fixed [#196](https://github.com/chrisant996/clink/issues/196); installer checkboxes not working properly.\n\n#### v1.2.44\n\n- Fixed `clink.ondisplaymatches()` so it receives the right match strings (regression introduced in v1.2.39).\n- Fixed [#194](https://github.com/chrisant996/clink/issues/194); argmatcher not found when command name contains a dash (regression introduced in v1.1.5).\n- Fixed [#176](https://github.com/chrisant996/clink/issues/176); use current installation dir when upgrading clink.  Now the installer remembers the chosen installation directory and defaults to the same place when installing an upgrade (all of the checkbox states are remembered, in fact).\n- Fixed [#171](https://github.com/chrisant996/clink/issues/171); have a way to override install directory.  Now the installer has a checkbox whether to install to a versioned directory (recommended).  Unchecking the box installs program files to a `bin` subdirectory, instead of the usual versioned subdirectory.\n\n#### v1.2.43\n\n- Fixed lingering issues with non-ASCII characters in path names in Clink (follows up on the preceding fixes for non-ASCII user name characters).\n\n#### v1.2.42\n\n- Fixed potential for history file to get corrupted during compacting, if multiple Clink instances are running concurrently.\n- Fixed `clink inject` when the user account name contains non-ASCII characters (regression introduced in v1.0.0).\n- Fixed [#193](https://github.com/chrisant996/clink/issues/193); consider removing the 50K history limit:  The `history.max_lines` Clink setting once again supports 0 to mean unlimited.  Note that as the history file grows larger, it takes longer to load.  If the size becomes a problem, you can use `clink history compact <n>` to prune the history file to N items as well as compacting it (removing deleted items).\n- Fixed [#192](https://github.com/chrisant996/clink/issues/192); completing `~` by itself does nothing:  Completing `~` by itself now inserts the %USERPROFILE% directory.  This is different than bash, because on Windows it doesn't make sense for ~ by itself to complete other user accounts.  This is a convenient way to expand tilde into a path that Windows understands.\n- Fixed [#191](https://github.com/chrisant996/clink/issues/191); `cd /d -` isn't supported:  The `cd -` feature now supports `cd /d -` as well.  It also supports `cd -` even if there is a doskey macro defined for `cd`.\n\n#### v1.2.41\n\n- Fixed [#187](https://github.com/chrisant996/clink/issues/187) differently:  `doskey.enhanced` is `true` by default again, but if a macro contains `$*` or `$1`...`$9` tags within quotes then `|` and `&` symbols are part of the arguments, not command separators (and expansion stops after that macro).\n- Fixed compatibility when `doskey.enhanced` is `false`; `alias|whatever` should not expand `alias` because there is no space after it.\n- Fixed doskey expansion when `>&` redirection symbol is present; `command >& alias` should not attempt to expand `alias` because it's a redirection file name, not a command.\n\n#### v1.2.40\n\n- Fixed display quirks when an empty `display` or `description` string is provided by a match generator.\n- Fixed [#187](https://github.com/chrisant996/clink/issues/187); the `doskey.enhanced` setting interferes with some macros (regression introduced in v1.0.0).  The setting is now `false` by default, because of the incompatibilities it can cause.\n\n#### v1.2.39\n\n- Fixed regression in match display filtering when listing possible completions (regression introduced in v1.2.38).\n- Fixed display quirks in the `clink-select-complete` command when descriptions are at the bottom.\n\n#### v1.2.38\n\n- Enhancements for match descriptions (which are displayed when listing possible completions):\n  - Argmatchers can provide description strings for flags and/or args (e.g. \"Verbose output\" for `-v`, or \"Do nothing\" for `-n`, etc).\n  - Argmatchers can also provide argument info strings for flags and/or args.  These are hint strings, and not part of the completion match itself.  E.g. \"linenum\" for `--line`, which gets displayed as \"--line linenum\" when listing possible completions, but only \"--line\" is inserted.\n  - Match generators can provide `display` and `description` strings when adding matches (`match_builder:addmatch()` and `match_builder:addmatches()`) -- it is no longer necessary to use `clink.ondisplaymatches()`.\n  - The `clink-select-complete` command now shows match descriptions in a single line at the bottom (instead of in a second column) when there are more than 9 matches.\n  - Added `color.arginfo` Clink setting for the arguments for a flag or argument when listing possible completions.\n  - Added `color.description` Clink setting for the default match description color when listing possible completions.\n  - Truncate descriptions when a line will wrap (or has wrapped) when listing possible completions.\n- Command separators (`&`, `|`) and redirection symbols (`<`, `>`, `>&`) are colored in the input line, using colors from the new `color.cmdsep` and `color.cmdredir` Clink settings.\n- Fixed <kbd>Backspace</kbd> in `clink-select-complete`; it had sometimes missed expanding the set of matches accordingly.\n- Fixed the `clink-popup-history` command to respect the `search-ignore-case` setting.\n- Fixed `:nofiles()` to dead-end an argmatcher (regression introduced in v1.0.0).\n- Fixed `clink.ondisplaymatches()` and `clink.onfiltermatches()` when there's only 1 match.\n- Fixed incremental find, find next, and find previous in console text popup lists.\n- Fixed backward compatibility for the old matching filtering API.\n- Fixed several other minor issues with match display filtering.\n- Fixed intermittent incorrect match generation for `/flag:` or `/flag=` flags.\n- Fixed duplicate removal with deprecated match generators.\n- Fixed when nested deprecated argmatchers are exhausted (regression introduced in v1.2.36).\n- Fixed deprecated match generators to not infer whether matches are filenames, to match the behavior of the v0.4.9 API.\n- Fixed how `match.wild` works with deprecated match generators; e.g. arg completions for [z.lua](https://github.com/skywind3000/z.lua) weren't working (regression introduced in v1.1.5).\n- Fixed argmatcher for `clink --profile` so it produces directory matches.\n- Fixed `%CLINK_RPROMPT%` alignment when `color.prompt` is set.\n\n#### v1.2.37\n\n- Fixed [#180](https://github.com/chrisant996/clink/issues/180); `rl.collapsetilde()` behaves erratically.\n- Fixed [#179](https://github.com/chrisant996/clink/issues/179); incorrect handling for certain keys on some keyboard layouts.\n- Fixed [#178](https://github.com/chrisant996/clink/issues/178); OneDrive folders mistakenly show up as symlinks.\n- Fixed [#177](https://github.com/chrisant996/clink/issues/177); be silent about autorun injection into TCC.\n\n#### v1.2.36\n\n- Added `win-history-list` command bound to <kbd>F7</kbd> by default.  This shows the history list, and executes the selected history entry.\n- Changed all of the popup list commands to show popups using console text rather than GUI windows.\n    - Added a `color.popup` Clink setting for the popup colors.  If not set, the console's popup colors are used.\n    - Added a `color.popup_desc` Clink setting for the popup colors for the description column(s).  If not set, a color is chosen to complement the console's popup colors.\n    - Added a `clink.gui_popups` Clink setting that can be set to use GUI popup windows as before (the `color.popup` settings have no effect on GUI popup windows).\n- Key bindings now support <kbd>Enter</kbd> plus combinations of the <kbd>Ctrl</kbd>, <kbd>Shift</kbd>, or <kbd>Alt</kbd> modifier keys.\n- Added more backward compatibility shims.\n- Fixed the `clink-select-complete` command when `print-completions-horizontally` is on (and also minor issues when it is off).\n- Fixed the `clink-select-complete` command when a Lua script has used `rl.setmatches()` to provide a custom list of matches.\n- Fixed the `clink-menu-complete-numbers` family of commands (regression introduced in v1.2.32).\n- Fixed a situation where the scrolling keys could stop working (regression introduced in v1.2.24).\n- Fixed flags at the end of a linked parser, and fixed args at the end of two or more nested linked parsers (regression introduced in v1.0.0).\n- Fixed [#172](https://github.com/chrisant996/clink/issues/172); add a choice in the installer to not add Start menu shortcuts.\n- Fixed [#129](https://github.com/chrisant996/clink/issues/129); Bug completing files with - or _ characters (regression introduced in v1.0.0).\n\n#### v1.2.35\n\n- Added `rl_buffer:getanchor()` to get the text selection anchor (there is no set function; use `rl.invokecommand()` to invoke commands to set/extend the selection if needed).\n- Reverted back to using IAT hooking (see issue #169).\n- Fixed CUA selection commands invoked by `rl.invokecommand()`.\n- Fixed [#170](https://github.com/chrisant996/clink/issues/170); directory symlink completion is truncated when `mark-directories` is `off` in the .inputrc file.\n- Fixed [#169](https://github.com/chrisant996/clink/issues/169); incompatibility between AutoHotkey, AnsiCon, and Clink when all three are used in CMD's AutoRun regkey (regression introduced in v1.2.33).\n\n#### v1.2.34\n\n- Changed \"luafunc:\" macro functions to receive the `line_state` as a second argument.\n- Fixed <kbd>Right</kbd> when `clink.default_bindings` is `windows`.\n- Fixed `exec.files` setting so completion works when a path is specified (e.g. `subdir\\foo`) (regression introduced in v1.2.33).\n- Fixed [#158](https://github.com/chrisant996/clink/issues/158); crash when a keyboard macro contains `\\015` (regression introduced in v1.0.0).\n\n#### v1.2.33\n\n- Rewrote how Clink hooks APIs in CMD.EXE; it no longer uses any IAT hooking, and exclusively uses Detours.\n- Added `clink.default_bindings` Clink setting to choose between `bash` or `windows` default key bindings.  `bash` key bindings are still the default, for compatibility with existing Clink installations.\n- Added `exec.aliases`, `exec.commands`, and `exec.files` Clink settings to further customize how matches are generated for the first word when the `exec.enable` Clink setting is enabled.\n- Small performance optimization in the hooked `WriteConsoleW()` system API.\n- Added logging for rare error case during inject.\n- Added default key bindings for <kbd>F1</kbd> through <kbd>F9</kbd> that mimic the default Windows console function key inputs.\n- Added `clink-selectall-conhost` command that mimics the default Windows console Select All command.\n- Fixed `clink-select-complete` to remove duplicate matches if generators try to add duplicate matches.\n- Fixed script error when `%PATH%` is not set and `exec.enable` and `exec.path` are both enabled.\n- Fixed some quirks when using the `quoted-insert` command.\n\n#### v1.2.32\n\n- Added `rl_buffer:setargument()` function for a \"luafunc:\" macro to be able to set Readline's numeric argument.\n- Added `os.getclipboardtext()` and `os.setclipboardtext()` functions.\n- Added extra defense against antivirus interference (if it interferes when Clink inspects the target process, but permits Clink to inject into the target process).\n- Fixed cooperation between \"luafunc:\" macros and CUA selection commands (e.g. <kbd>Shift</kbd>+<kbd>End</kbd>).\n- Fixed `rl_buffer:getcursor()` and the return value from `rl_buffer:setcursor()`; both returned one less than the actual cursor position.\n- Fixed [#162](https://github.com/chrisant996/clink/issues/162); clink completion shows script error (regression introduced in v1.2.31).\n\n#### v1.2.31\n\n- Added `clink uninstallscripts --all` to clear all script paths installed by `clink installscripts`.\n- Added `os.touch()` function to set the access and modified times for a file.\n- Added more fields in `os.globdirs()` and `os.globfiles()` when `extrainfo` is requested.\n- **Potential Breaking Change:** Fixed `os.globdirs()` and `os.globfiles()` to only return extra info when actually requested (regression introduced in v1.1.8).\n    - This unfortunately changes the scheme and may break some scripts if they requested no extra info, but used the extra info anyway.\n- Fixed crash in `clink-select-complete` when a match display filter returns nil.\n- Fixed `ondisplaymatches()` which was receiving one fewer matches than it should (related to [#124](https://github.com/chrisant996/clink/issues/124)).\n- Fixed `ondisplaymatches()` which was not using the word break info correctly (from generators' `:getwordbreakinfo()` functions).\n- Fixed `word_classifications:applycolor()`; the input line didn't necessarily refresh correctly after a custom classifier applied custom colors.\n- Fixed potential stray inaccurate colorations when coloring the input for `clink set color.something some_value`.\n- Fixed [#161](https://github.com/chrisant996/clink/issues/161); `clink installscripts` garbles previously-installed script paths when installing a new one.\n- Fixed [#155](https://github.com/chrisant996/clink/issues/155); `settings.set()` doesn't update the settings file.\n\n#### v1.2.30\n\n- Replaced the built-in Lua implementation of `os.clock()` so it doesn't stop working after the program has been running for more than 24 days (which caused asynchronous prompt filtering to stop working).  As a side effect, the new `os.clock()` has microsecond precision instead of millisecond precision.\n- Fixed coroutine throttling.  It was meant to prevent running more than once per 5 seconds, but accidentally forced running every 5 seconds, even if the coroutine was registered to run less often.\n\n#### v1.2.29\n\n- Added `prompt.transient` Clink setting which can collapse prior prompts to a condensed form.  The new `%CLINK_TRANSIENT_PROMPT%` and `%CLINK_TRANSIENT_RPROMPT%` environment variables supply the initial prompt strings, and prompt filters can define `:transientfilter()` and `:transientrightfilter()` functions to filter the transient prompt.\n- Added `clink.logo` Clink setting to globally control what startup logo is shown (full copyright logo by default, or a short version logo, or no startup logo).\n- Added `console.readinput()` function which waits for one key input, and returns the key sequence string for the key.\n- Added `clink.reload()` function which reloads Lua scripts and the Readline config file at the next prompt.\n- Added logging for more possible failure points while injecting Clink into the host process.\n- Added default key bindings for <kbd>Ctrl</kbd>+<kbd>Up</kbd> and <kbd>Ctrl</kbd>+<kbd>Down</kbd> to scroll the screen one line, like conhost normally does.\n- Now `clink set cl*` lists all settings that begin with `cl` (the star wildcard is only supported at the end of the string).\n- Documentation includes a link to the new [clink-flex-prompt](https://github.com/chrisant996/clink-flex-prompt).\n- Fixed the Lua debugger to support printing UTF8 text, and to escape string variable contents to avoid escape code side effects.\n- Fixed [#154](https://github.com/chrisant996/clink/issues/154); crash when `settings.set(\"some_setting\", false)` is used.\n- Fixed [#153](https://github.com/chrisant996/clink/issues/153); ESC key problem.  Clink migrated the old `esc_clears_line` setting backwards, causing <kbd>Esc</kbd> to behave opposite from what was expected.\n- Fixed [#152](https://github.com/chrisant996/clink/issues/152); LUA debugger breaks on the wrong line, and fails to execute expressions.\n\n#### v1.2.28\n\n- Added `rl.getpromptinfo()` function.\n- Fixed loading .inputrc so that only one is loaded (regression introduced in v1.0.0a0 by the fix for [mridgers #258](https://github.com/mridgers/clink/issues/258)).  If similar behavior is still desired, consider using the `$include` directive in the Readline init file, to load additional files.\n- Fixed `clink-select-complete` to respect when `mark-directories` in .inputrc file is `off`.\n- Fixed crash in `console.findline()` when no attributes are passed.  Callers using v1.2.27 and earlier can work around the crash by passing `{}` for attributes.\n- Fixed an off-by-1 bug in `console.scroll(\"absolute\", top)`.  This will fix edge case malfunctions in some callers, but some callers could experience this as a breaking change.\n\n#### v1.2.27\n\n- The `cmd.get_errorlevel` Clink setting is now enabled by default.\n- Clink now expands `$` codes in `%CLINK_RPROMPT%` before running prompt filters.\n- Fixed parsing `2>&1` style redirection symbols, so the `&` doesn't get treated as a command separator.\n- Fixed argmatchers to generate file matches for redirection arguments; `app.exe >` should generate file matches for the `>` symbol, not matches for the `app` argmatcher's first argument.\n\n#### v1.2.26\n\n- Fixed input line coloring for doskey aliases that don't have an argmatcher (regression introduced in v1.2.16).\n- Fixed <kbd>Space</kbd> during `clink-select-complete` when there were already opening and closing quotes present.\n- Fixed redrawing multiple lines of input after certain commands such as `clink-show-help` <kbd>Alt</kbd>+<kbd>H</kbd> (regression introduced in v1.1.20).\n- Fixed the `completion-auto-query-items` config variable to account for multiple lines of input, if present.\n- Fixed potential race condition if multiple Clink instances try to get the last errorlevel at the same time.\n\n#### v1.2.25\n\n- Added `cua-select-all` command to select the entire input line.\n- Added `edit-and-execute-command` command to invoke an editor on the current input line and then execute the results (<kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>Ctrl</kbd>+<kbd>E</kbd>).  This attempts to invoke `%VISUAL%`, `%EDITOR%`, or `notepad.exe` as the editor, in that order.\n- Added some new expansion commands:\n    - `clink-expand-history` performs history expansion on the current input line (<kbd>Alt</kbd>+<kbd>^</kbd>).\n    - `clink-expand-history-and-alias` performs history and doskey alias expansion on the current input line.\n    - `clink-expand-line` performs history, doskey alias, and environment variable expansion on the current input line (<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>E</kbd>).\n- Added some new completion commands:\n    - `glob-complete-word` performs wildcard completion on the text before the cursor point, with a `*` implicitly appended (<kbd>Alt</kbd>+<kbd>G</kbd>).\n    - `glob-expand-word` inserts all the wildcard completions that `glob-list-expansions` would list (<kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>*</kbd>).\n    - `glob-list-expansions` lists the possible wildcard completions of the text before the cursor point (<kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>g</kbd>).\n- Added some command name synonyms for increased .inputrc file portability with bash:\n    - `alias-expand-line` is a synonym for `clink-expand-doskey-alias`.\n    - `history-expand-line` is a synonym for `clink-expand-history`.\n    - `history-and-alias-expand-line` is a synonym for `clink-expand-history-and-alias`.\n    - `insert-last-argument` is a synonym for `yank-last-arg`.\n    - `shell-expand-line` is a synonym for `clink-expand-line`.\n- Added a `match.expand_envvars` Clink setting to expand environment variables in a word before performing completion (for [mridgers #476](https://github.com/mridgers/clink/issues/476)).\n- Changed the `match.wild` Clink setting to apply to all completion commands.\n- Changed default key binding <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>E</kbd> to the `clink-expand-line` command (not the key binding expands everything, instead of only the env var at the cursor).\n- Removed default key binding <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>H</kbd> for the `clink-show-help-raw` command (it has only niche usefulness).\n- Removed unintended VI mode key binding <kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>H</kbd>.\n- Fixed <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>2</kbd> and <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>6</kbd> (regression introduced in v1.1.39).\n- Fixed `More?` continuation prompt when pasting multiple lines.\n- Fixed `/flag:` and `/flag=` handling quirks, especially when trying to complete an environment variable in `/flag:%env`.\n- Fixed quirks about environment variable expansion in the `clink-expand-env-var` command and the `os.expandenv()` function.\n\n#### v1.2.24\n\n- Added support for `%CLINK_RPROMPT%` to show a right side prompt, and for prompt filters to define a `:rightfilter()` function to filter the right side prompt.\n- Fixed `clink-select-complete` to not append a space after a flag that ends with `:` or `=` (e.g. `/x:`).\n\n#### v1.2.23\n\n- Fixed <kbd>PgUp</kbd> and <kbd>PgDn</kbd> in the `clink-select-complete` command, under certain conditions where they don't navigate in the intended manner.\n- Cosmetic change: better key names for <kbd>Enter</kbd> vs <kbd>Ctrl</kbd>+<kbd>M</kbd>, and <kbd>Alt</kbd>+<kbd>Bkspc</kbd> vs <kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>H</kbd>, depending on the `terminal.differentiate_keys` setting.\n\n#### v1.2.22\n\n- Added `clink-what-is` command bound by default to <kbd>Alt</kbd>+<kbd>?</kbd>, which shows the key binding for the next key sequence that is input.\n- Added `rl.getargument()` function to get the accumulated Readline numeric argument, if any.  For use in \"luafunc:\" macros.\n- The `clink-show-help` command now categorizes key bindings and shows a description for the commands.  Using a numeric argument can control whether categorization and descriptions are used.\n- Fixed invoking `clink-select-complete` while it is already active, so that it doesn't lose quotes around the current match if it has quotes.\n- Fixed `clink-show-help` to list \"Enter\" instead of \"C-m\" for the <kbd>Enter</kbd> key.  Otherwise there's no way to differentiate between <kbd>Enter</kbd> and <kbd>Ctrl</kbd>+<kbd>M</kbd> when the `terminal.differentiate_keys` setting is enabled.\n- Fixed the `insert-comment` command, which accidentally fell back to inserting `#` after the first prompt (that's what bash inserts, and shouldn't be used in Clink).\n- Fixed the `dump-functions` command, which accidentally didn't list UTF8 key sequences correctly.\n\n#### v1.2.21\n\n- Fixed backwards exit codes from `clink autorun` commands.\n- Fixed alert message text on startup when `debug.log_terminal` is set to true.\n- Fixed [#143](https://github.com/chrisant996/clink/issues/143); crash on start when `terminal.raw_esc` is true (regression introduced in v1.2.19).\n\n#### v1.2.20\n\n- Added `os.debugprint()` function to print debug text via the OS `OutputDebugString()` API.\n- Enabled match completion coloring even when using match display filtering.\n- Fixed input of slash and backslash in non-directory completions when using the `clink-select-complete` command.\n- Fixed match display filtering in the `clink-select-complete` command.\n- Fixed match display filtering in the `clink-popup-complete` command.\n- Fixed quirk from Readline where it sometimes displays one fewer columns of matches than actually fit on the screen.\n\n#### v1.2.19\n\n- Added `clink-select-complete` command which shows an interactive list of possible completions.\n- Added terminal emulation for CGI G, CSI s, and CSI u sequences.\n- Fixed column alignment for match display filtering when some characters take more than one cell to display.\n\n#### v1.2.18\n\n- Added completions for `clink installscripts` and `clink uninstallscripts`.\n- Added support for Readline's coloring and marking of symlinks.\n- Fixed `clink installscripts --help`.\n- Fixed `clink-popup-directories` for directories with spaces.\n\n#### v1.2.17\n\n- Added `clink-popup-show-help` command to show popup list with searchable list of key bindings and invoke the selected key binding.\n- Added `clink.popuplist()` function to show a popup list.  Only usable from inside a \"luafunc:\" key binding.\n- Incremental search in the popup list window now centers the found item so items above and below it are visible.\n- Fixed potential internal error when a doskey alias starts with `$` (regression introduced in v1.2.16).\n- Fixed potential infinite loop when the `cmd.auto_answer` setting is enabled but an error occurs while retrieving a language string (might be related to [#137](https://github.com/chrisant996/clink/issues/137)).\n\n#### v1.2.16\n\n- **Breaking Change:** The `clink.onendedit()` Lua event has been split into two separate events:\n    - `clink.onendedit()` registers a function to be called when the edit prompt ends.\n    - `clink.onfilterinput()` registers a function to be called after the edit prompt ends (and after the onendedit event is sent), and the function can replace the input text.\n- Added `rl.getkeybindings()` function to get a table containing key bindings.  The bindings can be invoked via `rl.invokecommand()`.  For example, a \"luafunc:\" macro could use this to get key bindings, show an interactive list, and then invoke the selected key binding.\n- Fixed [#134](https://github.com/chrisant996/clink/issues/134); `print()` can stop working.  Issue [#93](https://github.com/chrisant996/clink/issues/93) can potentially happen any time redirection is used, so the fix must be applied repeatedly (not just after Clink injection).\n- Fixed [#119](https://github.com/chrisant996/clink/issues/119); reuse registered parsers for doskey macros.\n\n#### v1.2.15\n\n- Fixed [#132](https://github.com/chrisant996/clink/issues/132); multiline prompt gets overwritten when resizing the terminal width (regression introduced in v1.2.14).\n\n#### v1.2.14\n\n- Automatically runs `clink_start.cmd` from the binaries directory and/or the profile directory when Clink is injected.\n- Clink is able to retrieve the last exit code for use by Lua scripts.\n    - The new `cmd.get_errorlevel` setting is off by default, but when enabled it retrieves the last exit code from CMD before running Lua scripts.\n    - The new `os.geterrorlevel()` function gets the last exit code (or 0 if the setting is off).\n    - It works by running a hidden command line between each interactive prompt (as if you typed `echo %errorlevel%` yourself every second command you type).  If you experience problems with this, turn it off.\n- Improved refreshing the input line when resizing the terminal window.  It's better than before, but there's no way to make it work perfectly because Windows can resize the terminal further while a program is already trying to respond to the terminal having been resized previously.\n- Fixed [#130](https://github.com/chrisant996/clink/issues/130); doskey alias completions stop working when there are many aliases.\n\n#### v1.2.13\n\n- Added support for linking a parser to flags ending with `:` or `=`; now completion works for the flag's argument.\n\n#### v1.2.12\n\n- Improved diagnostic output for coroutines (<kbd>Ctrl</kbd>-<kbd>X</kbd>,<kbd>Ctrl</kbd>+<kbd>Z</kbd>), plus more diagnostic info when the `lua.debug` setting is enabled.\n- Fixed potential for a script error when a coroutine gets skipped due to a new prompt starting.\n\n#### v1.2.11\n\n- Added `clink.print()` function which behaves like `print()` but with support for ANSI escape codes (and terminal emulation), and also a `NONL` special argument that suppresses the usual newline at the end of the output.\n- Expanded the sample code for async prompt filtering to clarify some things.\n- Fixed [#126](https://github.com/chrisant996/clink/issues/126); allow <kbd>Esc</kbd> to input literal escape character.\n    - The new `terminal.raw_esc` setting controls how <kbd>Esc</kbd> input works.\n    - Added migration for the old `esc_clears_line` setting.\n\n#### v1.2.10\n\n- Added asynchronous prompt filtering -- scripts can use this to do work in the background (e.g. `git status`) and refresh the prompt when finished.\n    - Added `clink.promptcoroutine()` function to allow a prompt filter to do some work in the background.\n    - Added `io.popenyield()` function to allow a coroutine to yield until the command's complete output is ready.\n    - Added `prompt.async` setting that can disable asynchronous prompt filtering if preferred.\n- Log error codes for failures during `clink inject`.\n- Clarified help text for `clink autorun` (per [#122](https://github.com/chrisant996/clink/issues/122)).\n- Documentation clarifications and reorganization.\n- Fixed `clink` and `history` aliases getting lost after exiting a nested Clink instance.\n- Fixed some input keys accidentally handled by the OS after certain Lua code is run.\n- Fixed [#124](https://github.com/chrisant996/clink/issues/124); `onfiltermatches()` receives one fewer matches than it should.\n- Fixed [#123](https://github.com/chrisant996/clink/issues/123); Failed to inject (Host validation failed).\n- Fixed [#117](https://github.com/chrisant996/clink/issues/117); Setup causes \"System Error\".\n\n#### v1.2.9\n\n- Added detection for possible antivirus interference when injecting Clink.\n- Ignore duplicate scripts paths when loading scripts.\n- Fixed [#118](https://github.com/chrisant996/clink/issues/118); inputrc is not read from state directory (regression introduced in v1.0.0).\n\n#### v1.2.8\n\n- Fixed `...\\` or `.../` to change directories (path separator after several dots).\n- Fixed `/dirname/` to change directories (forward slashes when a directory is the only thing in the input line).\n- Fixed [#114](https://github.com/chrisant996/clink/issues/114); \"Clink already loaded in process\" error when autorun is installed for both Current User and All Users.\n- Fixed [#113](https://github.com/chrisant996/clink/issues/113); forward slash translation didn't work with the `cd` command.\n\n#### v1.2.7\n\n- Fixed [#113](https://github.com/chrisant996/clink/issues/113); `clink.slash_translation()` had been removed (regression introduced in v1.0.0).\n    - The new `match.translate_slashes` setting controls the default behavior for slash translation for completion matches.\n    - The new `clink.translateslashes()` API can override slash translation for completion matches (and `clink.slash_translation()` is supported for backward compatibility).\n\n#### v1.2.6\n\n- Fixed tilde expansion for directory by itself; now `~\\` can change the working directory to the `~` directory.\n- Fixed pagination when displaying completions that take more than 1 line to display.\n- Fixed inserting directory match completions when a Lua script didn't include a trailing path separator in the directory match.\n- Fixed [#111](https://github.com/chrisant996/clink/issues/111); `..` completion is different from bash (regression introduced in v1.0.0).\n\n#### v1.2.5\n\n- Added `os.expandenv()` function to expand environment variables in a string.\n- Added `console.cellcount()` function to count the cells a string will use when displayed.\n- Added `console.plaintext()` function to remove ANSI escape codes from a string.\n- Clink now sets `%=clink.bin%` that points to the Clink binaries directory.  This can be particularly useful for a portable installation of Clink so that scripts can find the Clink binaries directory and construct relative paths to other nearby files.\n- Clean up column alignment in `--help` texts.\n- Fixed `history.sticky_search` with anchored history search.\n- Fixed `clink inject --profile` to use correct log file name while initially injecting.\n- Fixed Clink autorun to be more compatible with Cmder ([Cmder #2536](https://github.com/cmderdev/cmder/issues/2536)).\n\n#### v1.2.4\n\n- Added support for <kbd>Shift</kbd>+<kbd>Arrows</kbd> to select text and typing to replace selected text.\n- Added optional argument to `word_classifications:classifyword()` and `word_classifications:applycolor()` to allow only applying color where another color hasn't yet been applied.\n- Fixed first <kbd>Up</kbd> after reusing a history line so that it gets the reused history line, rather than getting the previous history line.\n- Fixed `add-history` command to not add blank lines to history.\n- Fixed `rl.setmatches()` (regression introduced in v1.1.26).\n- Fixed input coloring for `clink set` and any color setting name (regression introduced in v1.2).\n- Fixed potential crash with `clink history --session`.\n- Fixed <kbd>Ctrl</kbd>+<kbd>D</kbd> when `cmd.ctrld_exits` is disabled; it didn't exit, but it did still discard the input line and start a new prompt.\n- Fixed [#107](https://github.com/chrisant996/clink/issues/107); autorun reports inject failures (regression introduced in v1.2.3).\n- Fixed [#106](https://github.com/chrisant996/clink/issues/106); history missing `--bare` option (regression introduced in v1.2.3).\n\n#### v1.2.3\n\n- Added `history.sticky_search` setting:  when enabled, reusing a history line does not add the reused line to the end of the history, and it leaves the history search position on the reused line so next/prev history can continue from there (e.g. replaying commands via <kbd>Up</kbd> several times then <kbd>Enter</kbd>, <kbd>Down</kbd>, <kbd>Enter</kbd>, etc).\n- Added failure reporting and logging when `clink inject` fails.\n- Added `--unique` flag for use with `clink history compact --unique` to remove duplicate entries from the history list.\n- The `clink-popup-complete` command now matches wildcards.\n- Restored the <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>U</kbd> key binding from v0.4.9 (moves the current working directory up one level).\n- Fixed searching for inputrc files to also search in the profile directory (regression introduced in v1.0.0).\n- Fixed incremental search in the History popup list to search in reverse order (bottom to top).\n- Fixed `clink-popup-history` to set the history search position like other history search commands do, so that it plays well with the `history.sticky_search` setting.\n\n#### v1.2.2\n\n- Added `%CLINK_HISTORY_LABEL%` environment variable to use a different master history file (fixes [#99](https://github.com/chrisant996/clink/issues/99)).\n\n#### v1.2.1\n\n- Added Troubleshooting Tips section in the documentation.\n- Added backward compatibility for `clink set` with v0.4.9.  Old setting names and values are not documented, but are automatically mapped to the appropriate new setting(s).  This was done so that suggestions in old web sites and posts can usually continue to work, to reduce confusion and support burden.\n- Fixed [#97](https://github.com/chrisant996/clink/issues/97); VS2017 error C2039: 'min': is not a member of 'std'.\n- Fixed [#96](https://github.com/chrisant996/clink/issues/96); wrong setting string (the name of a setting was accidentally truncated).\n- Fixed some slightly inaccurate/incomplete migration from old settings to new settings.\n\n#### v1.2\n\n- First official release from [chrisant996/clink](https://github.com/chrisant996/clink) fork.\n\n#### v1.1.49\n\n- Added `clink.classifier()` to enable coloring the input line independently from argmatchers.\n- Added `word_classifications:applycolor()` to apply SGR escape codes anywhere in the input line.\n- Removed `word_classifications:iswordclassified()`.\n- Fixed the Product Version string in the binary file version resources.\n\n#### v1.1.48\n\n- Added `clink.getansihost()` function to get Clink's best guess who will process ANSI escape codes (can be useful for avoiding 256 bit and 24 bit color codes, for example).\n- Added detection for being hosted in ConsoleZ.\n- Fixed [#20](https://github.com/chrisant996/clink/issues/20); `set /p VAR=\"\"` shows the normal command prompt text instead of empty prompt text.\n\n#### v1.1.47\n\n- Added default key binding for <kbd>Ctrl</kbd>+<kbd>Space</kbd> to invoke `old-menu-complete`, which is the most similar to CMD's standard <kbd>Tab</kbd> behavior.\n- Fixed `search-ignore-case` config variable to be on by default.\n\n#### v1.1.46\n\n- Added `rl.setvariable()` to temporarily override the value of a Readline config variable.\n- The completion commands now also expand tilde by itself (`~`), in addition to tilde followed by a path separator (`~\\etc`).\n- Fixed [#94](https://github.com/chrisant996/clink/issues/94); setting `history.save` to False also disables interactive history in subsequent sessions.\n\n#### v1.1.45\n\n- Fixed [#93](https://github.com/chrisant996/clink/issues/93); stdout is sometimes broken by Cmder init.bat.\n\n#### v1.1.44\n\n- Added `clink.getsession()`.\n- Added `%CLINK_NOAUTORUN%` which overrides automatic inject when Clink is installed for autorun.\n- Fixed [#92](https://github.com/chrisant996/clink/issues/92); `clink-popup-history` and similar commands not working with ConEmu and Cmder (regression introduced in v1.1.25).\n\n#### v1.1.43\n\n- Added `clink history --diag` flag that prints diagnostic information while performing history operations.\n- Minor optimization in `clink history` when printing the full list of history items.\n- Fixed `clink history compact` so it actually performs compaction.\n\n#### v1.1.42\n\n- Added `clink history --bare` flag to omit history item numbers.\n- Added several Lua functions:\n    - `io.popenrw()` is like `io.popen()`, but returns both a read file handle and a write file handle (see documentation for important usage warning).\n    - `os.createtmpfile()` creates a unique named temporary file, with control over the prefix and suffix and path.\n    - `os.getfullpathname()` to get the full path name for a file.\n    - `os.getlongpathname()` to get the long path name for a file.\n    - `os.getshortpathname()` to get the 8.3 short path name (if available) for a file.\n- Improved argument validation for Clink's Lua APIs.  This could expose bugs in existing scripts, so there is also a `lua.strict` setting that can be disabled to revert back to loose argument validation.\n- Updated documentation.\n- Fixed `clink history compact` so that it forces compaction as intended.\n- Fixed completion for `clink set` so that filename completion works in string settings.\n- Fixed backwards return value from `rl.invokecommand()`.\n- Fixed console input/output modes across \"luafunc:\" key bindings, in case the Lua functions spawn a process that alters the console mode without restoring it.\n\n#### v1.1.41\n\n- Added `terminal.adjust_cursor_style` setting as a workaround to avoid interfering with the Windows 10 Cursor Shape console setting.  There are several trade-offs, though.\n- Added `rl_buffer:refreshline()` function to redraw the input line, e.g. in case something has written over it.\n- Added `os.getpid()` function to get the process ID, intended mainly to help salt unique resource names.\n- Added `clink.onfiltermatches()` so scripts can register a callback function to run after Clink generates matches and before it displays them.\n\n#### v1.1.40\n\n- Added a group of `clink-complete-numbers` commands that do completion for numbers from the console screen, bound to <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>N</kbd> by default.\n- Added `rl.getlastcommand()` function that returns the name of the last command invoked by key bindings.\n- Fixed sort order in <kbd>Alt</kbd>+<kbd>H</kbd> for the newly supported key bindings (that were added in v1.1.39).\n- Fixed <kbd>Ctrl</kbd>+<kbd>Space</kbd> (regression introduced in v1.1.39).\n- Fixed various <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>whatever</kbd> combinations (regression introduced in v1.1.39).\n- Fixed `rl.setmatches()` when the input line is not empty and `clink.colorize_input` is enabled.\n\n#### v1.1.39\n\n- Added support for many more key bindings, such as <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+Letter keys.\n- Added `terminal.differentiate_keys` setting that when enabled allows binding <kbd>Ctrl</kbd> + <kbd>H</kbd> or <kbd>I</kbd> or <kbd>M</kbd> or <kbd>[</kbd> separately from <kbd>Backspace</kbd>, <kbd>Tab</kbd>, <kbd>Return</kbd>, or <kbd>Escape</kbd>.\n- Removed `terminal.modify_other_keys` setting and made it always enabled.\n- Changed `terminal.use_altgr_substitute` to be disabled by default so that <kbd>Ctrl</kbd>+<kbd>Alt</kbd> key bindings can work by default on keyboards with <kbd>AltGr</kbd>.\n- Changed output from `clink echo` so it's directly usable in the inputrc files.\n- Fixed `terminal.use_altgr_substitute` to only affect <kbd>AltGr</kbd> substitute key combinations (it had always broken the <kbd>RightAlt</kbd> key in general on other keyboard layouts).\n- Fixed a benign issue with the console input mode in `clink echo`.\n\n#### v1.1.38\n\n- Fixed [#84](https://github.com/chrisant996/clink/issues/84); added `terminal.use_altgr_substitute` setting.\n- Fixed [#80](https://github.com/chrisant996/clink/issues/80); clink.log is not deleted when Cmder injects Clink.\n\n#### v1.1.37\n\n- Fixed copy to clipboard (it never cleared the clipboard!).\n- Fixed [#82](https://github.com/chrisant996/clink/issues/82); added two new `clink.paste_crlf` modes: `ampersand` replaces newlines with ampersands, and `crlf` pastes newlines as-is and executes any commands ending in a newline.\n- Fixed [#69](https://github.com/chrisant996/clink/issues/69); space in the prompt disappears after enter echo: added support for CJK codepages.\n\n#### v1.1.36\n\n- Fixed [#79](https://github.com/chrisant996/clink/issues/79); Issue with United States - international keyboard layout (regression introduced in v1.1.0).\n- Fixed [#78](https://github.com/chrisant996/clink/issues/78); crash when history file contains a line longer than 8192 characters (regression introduced in v1.1.2-alpha).\n\n#### v1.1.35\n\n- Fixed when the `mark-directories` inputrc variable is `off` (regression introduced in v1.1.1-alpha).\n- Fixed Lua reading from stdin, especially in the Lua debugger (regression introduced in v1.1.25).\n- Fixed exponential cost performance bug in Readline when removing duplicate matches.\n\n#### v1.1.34\n\n- Fixed copying to clipboard (CF_UNICODETEXT was put on the clipboard correctly, but CF_TEXT was empty and should have been omitted to let Windows automatically convert it from the Unicode text).\n\n#### v1.1.33\n\n- Make the \"replacing arglink\" warning message a little more informative, and write a lua traceback to the Clink log file.\n- Fixed [#77](https://github.com/chrisant996/clink/issues/77); with ConsoleZ scrolling does not always work.\n- Fixed [#76](https://github.com/chrisant996/clink/issues/76); cannot `cd` up multiple directories normally.\n\n#### v1.1.32\n\n- Added support for non-standard escape codes to set the window title or print environment variables.  Depending on the `terminal.emulation` setting, the behavior is slightly different.  When `emulate` Clink processes the escape codes.  When `native` with ConEmu (and Clink) the escape codes are passed to ConEmu, except that Clink processes the environment variable codes in prompt strings.  When `native` with other terminals, Clink preprocesses the title and environment variable escape codes in prompt strings, but passes the escape codes to the terminal outside of prompt strings.\n- Fixed [#67](https://github.com/chrisant996/clink/issues/67); AutoRun interferes with Cmder.\n\n#### v1.1.31\n\n- Fixed [#74](https://github.com/chrisant996/clink/issues/74); clink gets confused by non-standard ConEmu escape codes.\n- Fixed [#73](https://github.com/chrisant996/clink/issues/73); `exec.space_prefix` and other settings defined in Lua scripts don't take effect until second input line (regression introduced in v1.1.4).\n\n#### v1.1.30\n\n- Fixed history compacting on x86 (regression introduced in v1.1.2-alpha).\n\n#### v1.1.29\n\n- Added `clink installscripts` and `clink uninstallscripts` to make it easy for package managers like Scoop to install/uninstall script packages for use with Clink.  The installed script paths are stored in the registry for the current user.\n- Fixed `bold` vs `bright` colors to more accurately follow generally accepted ANSI escape code conventions:\n    - Renamed `dim` to `nobold` for clarity (though `dim` is still recognized for backward compatibility).\n    - `bold` adds intensity to a non-intense color (e.g. `cyan` which is 36).\n    - `nobold` removes intensity added by `bold` (e.g. `1;36` becomes `36`), but does not remove intensity from an explicit intense color (such as `bright cyan` which is `96`).\n- Fixed support for `--file=` flags in argmatchers.\n- Fixed match display filtering on the first try for a word (regression introduced in v1.1.19).\n- Fixed the `clink --profile` flag (regression introduced in v1.1.10).\n- Fixed `clink info` to accurately report the script dirs (it didn't account for the `clink.path` setting correctly).\n\n#### v1.1.28\n\n- Renamed the `log.rl_terminal` setting to `debug.log_terminal`; it has already been repeatedly very useful in multiple was since it was added, so it stays.\n- Fixed [#70](https://github.com/chrisant996/clink/issues/70); ctrl+c not working (regression introduced in v1.1.25).\n\n#### v1.1.27\n\n- Added `color.argmatcher` setting which, when set, is used to color a command name if it has an associated argmatcher (this supersedes `color.cmd`, `color.doskey`, and `color.input`).  By default it's not set.\n- Added `log.rl_terminal` setting which logs all terminal input and output for Readline (this setting may be renamed or removed in the future).\n\n#### v1.1.26\n\n- Added `rl.invokecommand()` which can invoke a Readline command from inside a \"luafunc:\" key binding.\n- Added `rl.setmatches()` which can override match completions from inside a \"luafunc:\" key binding.\n- Worked around UTF8 key binding problem with Readline which had been causing some meta key bindings (M-x, M-C-x, etc) to sometimes produce garbled key bindings and garbled entries in `clink-show-help` (<kbd>Alt</kbd>+<kbd>H</kbd>).\n- Fixed crash if \"luafunc:\" key binding macro refers to a symbol that doesn't exist.\n\n#### v1.1.25\n\n- Added `clink-find-conhost` command that, when in a default (conhost) console window, is equivalent to picking \"Find...\" from the system menu.\n- Added `clink-mark-conhost` command that, when in a default (conhost) console window, is equivalent to picking \"Mark\" from the system menu.\n- `clink-copy-word` now copies the current word by default, but copies the nth word if a numeric argument is entered (see \"Readline Arguments\" in the Readline manual).\n- Fixed match display filtering to not exceed the screen width (regression introduced in v1.1.12).\n- Fixed multi-key sequences; in some cases it could get confused about whether an input key is part of a multi-key binding sequence (regression introduced in v1.1.1-alpha).\n- Fixed stray input processing by conhost (holding <kbd>Ctrl</kbd>+<kbd>A</kbd> or <kbd>Ctrl</kbd>+<kbd>F</kbd> or etc could accidentally trigger conhost's shortcut keys).\n- Fixed popup window location and size when using Windows Terminal.\n- Fixed input coloring after `operate-and-get-next`; also fixes brief flicker of incorrect coloring whenever the input line is modified.\n\n#### v1.1.24\n\n- `auto` for `terminal.emulation` now uses native VT support on Windows 10 build 15063 and higher, unless the HKCU\\Console\\ForceV2 regkey is 0.\n- Special quote handling now enables `\"dir\\\"fi` to complete to `\"dir\\file\"`.  CMD simply strips quotes during completion, and now Clink behaves similarly.\n- <strong>Breaking Change:</strong> `line:getword()` and `line:getendword()` now strip quotes from the word.  This should generally automagically make existing match generators work even with embedded quotes, but there's a chance that some match generator might need to be updated.  This seems like a reasonable compromise, given the general benefit purchased by this breaking change.\n- `os:globdirs()` and `os:globfile()` strip quotes from the <span class=\"arg\">globpattern</span> in order to behave more like CMD.  Embedded quotes are nonsensical and the intended interpretation is clear, so the APIs now help out with that.\n- Fixed [#66](https://github.com/chrisant996/clink/issues/66); crash when injecting into 32 bit cmd (regression introduced in v1.1.21).\n- Fixed [#64](https://github.com/chrisant996/clink/issues/64); wrong cursor position when PROMPT contains BEL character.\n- Fixed [#62](https://github.com/chrisant996/clink/issues/62); argmatchers should color `-x:\"foo\"` as a flag if `-x:` is a flag.\n- Fixed [#61](https://github.com/chrisant996/clink/issues/61); argmatchers should not handle completion for text immediately following `-flag:`.  Instead it always uses file completion.  A custom generator can be used to override that behavior.\n- Fixed [#60](https://github.com/chrisant996/clink/issues/60); completion fails with multiple slashes.\n- Fixed completion in some circumstances.  Readline and Clink didn't always agree on where the word breaks were; now Clink always tells Readline where the word breaks are (so that completion, input colorization, and lua scripts can all work properly and consistently).\n- Fixed 256 color ANSI codes.\n\n#### v1.1.23\n\n- Fixed [#57](https://github.com/chrisant996/clink/issues/57); slashes not normalized in some cases.\n- Fixed [#45](https://github.com/chrisant996/clink/issues/45); interaction between `history.dupe_mode`=`erase_prev` and `history.shared`=`false`.\n- Fixed `menu-complete-wraparound` when off and there's only 1 match.\n\n#### v1.1.22\n\n- Added `menu-complete-wraparound` (on by default) that controls whether completion commands wrap around when cycling past an end (affects popup windows as well).\n- Fixed match completion getting stuck (regression introduced in v1.1.19).\n- Fixed active mark region so it gets deactivated appropriately (it wasn't hooked up fully for Readline's callback mode, which is the mode Clink uses).\n- Fixed `clink-show-help` (<kbd>Alt</kbd>+<kbd>H</kbd>) so it's able to list `C-@` bindings.\n- Fixed inconsistent mark color.\n\n#### v1.1.21\n\n- Added `clink.oninject()` so scripts can register a callback function to run when Clink is injected into CMD.\n- Added `console.linehascolor()` function that returns whether the specified line contains any of the specified colors.\n- Added `console.findprevline()` and `console.findnextline()` functions that can search backwards or forwards for text and/or colors in the screen buffer.  Regular expressions may be used.\n- Fixed doskey alias parsing for match generators and input line coloring (Clink had been using slightly different parsing rules than CMD does).\n- Fixed the \"-- More --\" prompt while listing key bindings; <kbd>Esc</kbd> didn't quit, and unexpected keys weren't ignored.\n\n#### v1.1.20\n\n- Now you can bind Lua functions to keys via \"luafunc:\" macros!  Added new `rl_buffer` type that gets passed to the Lua function.\n- Added a group of `console` Lua APIs intended mainly for use by Lua function key bindings (e.g. `console.scroll()`).\n- Added `string.equalsi()` function that performs a case insensitive UTF8 comparison of two strings.\n- Added `string.matchlen()` function that compares two UTF8 strings and returns how many characters match at the beginning, or -1 if the entire strings match. It respects the `match.ignore_case` and `match.ignore_accent` settings.\n- Added `path.toparent()` function that adjust the input string by moving up one directory level.\n- Added `clink.onendedit()` so scripts can register a callback function to run when editing finishes (e.g. <kbd>Enter</kbd> is pressed).  If desired, the function can even change the input text.  This is very powerful, and should be used carefully.\n- Changed `os.getbatterystatus()` to return a table with the battery status details, rather than four separate return values.\n- Fixed the `doskey.enhanced` setting to not expand doskey aliases when preceded by a space.  However, a doskey alias after a `&` or `|` command separator needs to be preceded by two spaces to avoid expanding it.  That's so `alias & alias` expands both, and ` alias &  alias` expands neither; while the rules are more complicated to explain, they make more sense visually.\n- Fixed environment variable completion (regression introduced in v1.1.19).\n- Fixed Cmder startup (regression introduced in v1.1.17).  Cmder expects to be able to replace Clink v0.4.9's clink.lua file, but there is no such thing anymore in newer versions of Clink.  To be properly backwardly compatible with Clink v0.4.9 requires loading clink.lua (if it exists) from the first script directory listed by `clink info`, and ignoring clink.lua files in all other script directories.\n\n#### v1.1.19\n\n- Improved responsiveness while typing:  matches are collected only on demand, instead of always while typing.  This makes it possible to always support match completion for UNC paths.\n- Fixed [#50](https://github.com/chrisant996/clink/issues/50); <kbd>Alt</kbd>+<kbd>H</kbd> could warn about likely mistakes in key bindings.\n\n#### v1.1.18\n\n- The input text now has context sensitive coloring based on the argmatchers. It's on by default and can be turned off with `clink set clink.colorize_input false`.\n- Updated the Readline library to 8.1.\n- Terminal emulation now supports the audible bell character.\n- Fixed [#48](https://github.com/chrisant996/clink/issues/48); `menu-complete` gets stuck.\n- Fixed [#47](https://github.com/chrisant996/clink/issues/47); <kbd>Alt</kbd>+<kbd>D</kbd> erases history instead of word.\n- Fixed [#46](https://github.com/chrisant996/clink/issues/46); typing `..` in subdirectory of root doesn't work.\n- Fixed restoring color after pager when showing help.\n- Fixed `clink set` match completions for color settings.\n\n#### v1.1.17\n\n- Added `os.getbatterystatus()` function that gets battery status information much faster than launching `wmic`.\n- Fixed [#44](https://github.com/chrisant996/clink/issues/44); Path completion doesn't work with `cd /d`.\n- Fixed loading scripts to ignore loading clink.lua, so that loading scripts behaves like Clink v0.4.9.\n\n#### v1.1.16\n\n- Added `match.ignore_accent` setting (enabled by default) that ignores Latin alphabet diacriticals when completing matches (e.g. `ä` matches `a`, `ı` matches `i`, `ł` matches `l`, etc).\n- Fixed [#42](https://github.com/chrisant996/clink/issues/42); history lines are split on special characters.\n- Fixed [#41](https://github.com/chrisant996/clink/issues/41); Enable custom doskey handling of `..` and `-`.\n- Fixed Readline bug inserting dir matches; `\\win_  foo` (cursor at `_`) would become `\\Windows\\\\_  foo`.\n- Fixed the `quoted-insert` command to insert just `\\x1b` when <kbd>ESC</kbd> is pressed.\n\n#### v1.1.15\n\n- Migrating settings now immediately writes a new settings file, instead of waiting until a setting is changed.\n- Added support to detect when running in Windows Terminal and use native terminal support (which enables things like Xterm 256 and 24-bit color support).\n- Added terminal emulation support for Xterm 256 and 24-bit color escape codes. Clink maps the specified color to the most similar color in the active 16 color palette (using the CIELAB color space). To get full support for 24-bit color, it's necessary to use ConEmu or Windows Terminal or a similar console host, or to set `terminal.emulation` to `native` (which isn't supported on some older Windows OS versions).\n- Allow doskey macros named `..` or `-`, and also now doskey macros that resolve to `..` or `-` or a directory name will work (just like if the macro text had been typed at the Clink prompt).\n- Fixed compatibility problem with various scripts getting the %HOME% environment variable. Now if it isn't set, then Clink synthesizes %HOME% from %HOMEDRIVE% and %HOMEPATH% or from %USERPROFILE%.\n- Fixed saving color settings to behave like other settings: only write a setting's value to the setting file if it differs from the default value.\n- Fixed the `clink.print()` Lua function so it also works during loading scripts and during prompt filtering.\n- Fixed the Readline input text display getting garbled if the filtered prompt includes Xterm's OSC window title code (`\\x1b]0;text\\x07`). Clink doesn't support that escape code, but at no longer garbles the input text if that escape code is present.\n\n#### v1.1.14\n\n- Migrate settings and history from an old version of Clink, if present.  This only happens if the new-version Clink settings or history files don't exist.  (Deleting an existing new-version Clink settings or history file will cause migration to happen again.)\n- Added `color.prompt` setting for backward compatibility with Clink v0.4.x.\n\n#### v1.1.13\n\n- Fixed `clink.arg.register_parser` backward compatibility.\n\n#### v1.1.12\n\n- Added `clink.ondisplaymatches()` as a replacement for the deprecated `clink.match_display_filter`.  The new API is able to support popup list windows as well.\n- Speculative possible fix for [#35](https://github.com/chrisant996/clink/issues/35) Crash when clink on clink.bat.\n- Fixed [#33](https://github.com/chrisant996/clink/issues/33); Tab autocomplete, auto-quoting paths doesn't seem to work as in Clink 0.4.9.\n\n#### v1.1.11\n\n- Changed to load Lua scripts only once per session, unless forced to reload them.  This enables backward compatibility for things like [z.lua](https://github.com/skywind3000/z.lua) which has certain features that rely on Clink only loading scripts once per session.\n- Added `clink.onbeginedit()` so scripts can register a callback function to run each time the edit prompt is activated.\n- Added `lua.reload_scripts` setting to optionally force reloading Lua scripts each time the edit prompt is activated.\n- Added `color.message` setting for the Readline message area color (e.g. the search prompt message or digit argument prompt message, etc).\n- Fixed stray sticky `=` appended to completions after typing `set ` and then typing a different command.\n\n#### v1.1.10\n\n- Fixed [#32](https://github.com/chrisant996/clink/issues/32); hooking `ReadConsoleW` on Windows 7.\n\n#### v1.1.9\n\n- Added backward compatibility for `clink.match_display_filter`.  The clink-completions/git.lua script uses it a lot, and that should all be working now.\n- `settings.add` adds a color setting when the type is string and the name starts with \"color.\".\n- `settings.get` now has an extra parameter to request the user friendly color name when getting a color setting.\n- Added `clink.version_encoded` variable with the Clink version number as _MMmmmpppp_ (e.g. v1.1.9 is `10010009`) to make it easy for scripts to check for feature availability.\n- The `clink info` command now shows Lua script paths as well.\n- Fixed backward compatibility for loading scripts from the profile directory (if `clink.path` isn't set, then load scripts from the DLL directory and the profile directory).\n- Fixed some `color.input` bleed through to other things (introduced in v1.1.5).\n- Fixed scroll commands (regression introduced by input line color in v1.1.5).\n- Fixed horizontally sorted match display and re-enabled the performance fix from v1.1.4.\n- Fixed wildcard evaluation with non-file and non-directory matches (e.g. a branch name `origin/master` accidentally didn't match `or` or `*ma` because of the `/`).\n- Fixed sort order of `foo\\` vs `foo.bar\\` when displaying matches or using the `menu-complete` family of commands.\n- Fixed potentially-missing trailing path separator when `menu-complete` completes a directory match (regression introduced by wildcard matching in v1.1.5).\n- Other obscure minor fixes.\n\n#### v1.1.8\n\n- Fixed file match completions when an argmatcher only generates flag matches.\n- Fixed automatic inferring whether Readline should use filename completion and/or display rules (regression introduced by backward compatibility in v1.1.3-alpha).\n- Fixed backward compatibility for `clink.find_files()` and `clink.find_dirs()` (regression introduced by performance improvement in v1.1.7).\n    - Ignore extra arguments after the first one (the performance improvement in v1.1.7 revealed that some scripts call `clink.find_files()` with extra invalid arguments; e.g. clink-completions/modules/matchers.lua).\n    - Don't append a trailing path separator on directory names returned by these functions (the new `os.globfiles()` and `os.globdirs()` functions do, but the old `clink.find_files()` and `clink.find_dirs()` functions should not).\n- Fixed backward compatibility for coloring matches (regression introduced by backward compatibility changes in v1.1.4).\n\n#### v1.1.7\n\n- Performance improvement when displaying matches:  When enumerating files and dirs, the `os.globfiles` and `os.globdirs` functions have all the info about each file.  Now they can return that info in a table.  This frees the match display function from needing to do any further file system IO.  The performance boost is noticeable.\n- Rewrote the color settings:  the .fg and .bg sub-settings are gone, and the main setting now uses a more natural syntax (e.g. `clink set color.input bright yellow` or `clink set color.modmark bright cyan on blue`).\n- Added \"cmd\" match type for shell (CMD.EXE) command completions.\n- Added VT emulation for the reverse video SGR parameters.\n- Fixed tab completion for <code>clink set <em>setting</em></code>, and also handle the new color setting syntax.\n- Fixed confusing behavior if multiple scripts try to add settings with the same name (now the first one succeeds and the rest report errors).\n\n#### v1.1.6\n\n- Hooked up tilde completion in the `cd`, `md`, and `rd` command argmatchers.\n- Hooked up tilde completion with the `exec.enable` setting (\"~\\pro\" matches \"C:\\Users\\myusername\\program.exe\").\n- When `terminal.emulation` is `auto`, now it also detects ANSI{32|64}.DLL just like Clink 0.4.8 did.\n\n#### v1.1.5\n\n- The `menu-complete` family of commands now support matching `?` and `*` wildcards when the `match.wild` setting is enabled.\n- Added `colour.input` and `colour.modmark` settings for coloring Readline's input line.\n- Added `clink.upper()` Lua function, and both `clink.lower()` and `clink.upper()` are properly UTF8 aware now.\n- Added `clink-copy-word` command that copies the word at the cursor to the clipboard.\n- Added `clink.promptfilter` setting to control whether to filter the prompt with Lua scripts.\n- Renamed `terminal.emulate` setting to `terminal.emulation`.\n- Improved executable file extension logic to consistently use %PATHEXT% (and efficiently).\n- Improved file extension logic (e.g. \"file.foo bar\" has no extension because of the space).\n- Updated arg matcher for `clink` itself (was missing some flags).\n- Changed `colour.hidden` setting to not be set by default.\n- Fixed [#28](https://github.com/chrisant996/clink/issues/28); Tab completion for \"~\" does not work.\n- Fixed [#25](https://github.com/chrisant996/clink/issues/25); Unicode surrogate pairs (and emoji) input isn't working -- Microsoft Terminal renders the text correctly, but ConEmu and the default conhost still don't (and that isn't a Clink issue).\n- Fixed screen size bug in Readline on Windows.\n- Fixed the backwards values in the `terminal.emulation` setting.\n- Fixed `....` so it works properly again.\n- Fixed case sensitive sorting of matches.\n- Fixed script error when %PATHEXT% is empty.\n- Fixed the `exec.cwd` Clink setting to default to true, so that the default behavior is consistent with how v0.4.x behaved.\n- Fixed the `cd`, `md`, `rd`, etc argmatchers to only match one argument to be consistent with the actual command syntax.\n\n#### v1.1.4\n\n- Automatically detect when running inside ConEmu and disable Clink's Virtual Terminal emulation.\n- Added `search-ignore-case` inputrc variable that makes the history search commands case insensitive.\n- Suppress adding a space after completing a flag match that ends with `:` or `=` (e.g. `msbuild -maxCpuCount:`).\n- Report any errors while loading Lua scripts.\n- Report an error if a Lua script tries to add a flag string that begins with a letter.\n- Fixed slow printing of possible matches.  Readline is inefficient about emitting output, so Clink supplies a custom implementation.\n- Fixed some bugs in auto detection of flag prefix characters.\n- Fixed backward compatibility for flags, and for args when merging two parsers by calling `clink.arg.register_parser('foo')` multiple times for the same command string.\n- Fixed truncated message when the last line of a prompt exceeds 128 characters.\n- Fixed abort (<kbd>Ctrl</kbd>+<kbd>G</kbd> or <kbd>Esc</kbd>) in non-incremental history search mode.\n- Fixed saved values for settings added by Lua scripts; now the saved value is available to the script immediately on adding the setting, and saved values are retained even if the setting isn't always added by the script.\n- Fixed (and documented) shorthand form for defining an argmatcher.\n- Fixed length of colored match prefix after a path separator.\n- Fixed normalizing a slash by itself (`command /` mustn't become `command \\` since that can interfere with completing flags).\n- Fixed the `completion-auto-query-items` inputrc variable.\n- Fixed the key binding list to correctly respect `completion-display-width`.\n- _No visible effect yet:  internal change that parses the input line to identify colors to use for each word (command, argument, flag, etc), but the colors aren't yet applied to the input line._\n\n#### v1.1.3-alpha\n\n- Fixed argmatcher lookup to be more strict, like in Clink 0.4.9 (match exact names, or name plus an extension from %PATHEXT%).\n- Backward compatibility:\n    - Most things should work now.\n    - Dropping the new Clink on top of the vendor\\clink directory in Cmder seems to work -- _but make a backup before you try this at home!_\n- API changes:\n    - Added `log.info()` function.\n    - Added Clink version numbers in `clink.version_major`, etc.\n    - Added `_argmatcher:getwordbreakinfo()` callback; removed `_argmatcher:setprefixincluded()` (it was a mess, and it was new to v1.x, so there's no compatibility concern with removing it).\n    - Deprecated `_argmatcher:setflagprefix()`; now it happens automagically when using `_argmatcher:addflags()`.\n    - Introduced several deprecated functions to support backward compatibility.\n- Improvements to Lua debugger:\n    - Added `lua.traceback_on_error`, `lua.break_on_error`, and `lua.break_on_traceback` settings to make debugging script errors easier.\n    - Made `pause()` consistent about pausing in the caller (rather than sometimes inside the pause command itself).\n    - The debugger automatically shows the stack trace when entering debug mode, and on every pause.\n    - Show 3 lines of source context by default.\n    - The help list is sorted now.\n    - Fixed the `set` command in the debugger to behave as documented.\n\n#### v1.1.2-alpha\n\n- Documentation is mostly updated; just the argmatcher Lua API and Clink command line options are left to be documented.\n- Added `history.max_lines` setting that controls how many lines of command history to save (1 to 50000, default is 2500).\n- Added `readline.hide_stderr` setting that can suppress stderr output from the Readline library.\n- For backward compatibility with 0.4.8, `clink_inputrc` files are loaded as well.\n- Lua script API changes:\n    - `addmatch()` in Lua scripts takes an optional match type argument.\n    - Removed `displayable`, `aux`, and `suffix` fields in matches.\n    - Revert the change to disallow mixing file/directory/symlink with other match types (it broke the tests and certain completion scenarios).\n- Fixed issues:\n    - [#18](https://github.com/chrisant996/clink/issues/18) alt+digit then alt+ctrl+y isn't working.\n    - [#17](https://github.com/chrisant996/clink/issues/17) arrow keys don't exit `reverse-search-history` like in bash.\n    - [#16](https://github.com/chrisant996/clink/issues/16) problems with $T in doskey macros.\n    - [#13](https://github.com/chrisant996/clink/issues/13) `clink history delete <n>` returns a CRT error.\n- Other fixes:\n    - There should be no more problems running on Windows Insider builds because Clink now uses [Detours](https://github.com/microsoft/detours) for hooking APIs.\n    - Fixed crash in `insert-completions` due to heap failure (introduced by the performance changes for displaying matches).\n    - Fixed `clink` and `history` built-in aliases (solve glitchy path problem).\n    - Fixed scrolling to top of screen buffer.\n    - Fixed env var and `set` completions.\n    - Fixed `tilde-expand` for quoted text.\n    - Fixed <kbd>Esc</kbd> in Readline's digit argument input mode (it doesn't try to cancel the mode, because that's not how Readline is documented to work).\n    - Fixed exit code from some `clink` command line options.\n- Set locale to UTF8 much earlier to avoid quirky behavior early in script processing.\n\n#### v1.1.1-alpha\n\n- Exclusively use Readline's completion implementation.  This (with fixes and enhancements in Readline itself) makes the completion experience much nicer and more sophisticated, and removes a lot of code that was added in v1.0.0a0.\n- Exclusively use Readline's key binding implementation.  This makes it possible to have a single consistent way to set key bindings (inputrc) and for `clink-show-help` to list all key bindings, and removes a lot of code that was added in v1.0.0a0.\n- Converted all of Clink's internal key behaviors to be implemented as commands that can be bound in the inputrc file.\n- Rewrote and refactored the pagination routine to be used in multiple places.\n- Fixed prompt filtering to correctly use the specified priority order.\n- Readline library:\n    - Updated the Readline library from v6.2 to v8.0.  This picked up lots of bug fixes and new capabilities (for example colored completions).\n    - Changed Readline to support backslash as a path separator.\n    - The pager prompt in Readline is optionally colored, controlled by the `colour.interact` Clink setting.\n    - Added `completion-auto-query-items` config variable (on by default) which asks whether to list possible matches when the number of lines listed will fill one screen page.\n    - Added `history-point-at-end-of-anchored-search` config variable in inputrc to make the cursor point behave like 4Dos/4NT/TakeCommand when searching forward and backward through command history.\n    - Fixed prev history at top of history.\n    - Fixed to get the current values of environment variables when needed, rather than always getting the value from whenever Clink was started.\n    - Fixed coloring directory completions.\n    - Fixed `menu-complete` for `\\dir` and `.` and `..`.\n    - Fixed slow performance when displaying matches.  Readline was calling stat() at least once per match (!!).  A new match type field enables faster performance, coloring readonly and hidden file matches, applying filename completion rules only to filenames (vs branch names or other text strings), correct match de-duplication, and more.  The Lua match APIs can supply the new match type.\n    - Fixed inserting a completion to happen as a single undo group.\n    - Fixed tilde to map to `%USERPROFILE%` instead of `%APPDATA%` on Windows.\n- Typing a directory by itself uses `cd /d` to change to the directory:\n    - Typing a directory with a trailing path separator changes to the directory.\n    - Typing `..\\` changes to the parent directory.\n    - Typing `...` or `....` etc moves up an extra parent directory level for each extra dot (2 dots move up one parent, 3 dots moves up two parents, etc).  A trailing path separator is optional when there are more than 2 dots.\n    - Typing `-` or `cd -` or `chdir -` changes to the previous directory.\n- Commands that are new, enhanced, or fixed:\n    - Added `add-history` and `remove-history` commands (similar to 4Dos/4NT/TakeCommand).\n    - Got the `menu-complete`, `menu-complete-backward`, and `old-menu-complete` commands working (they never worked properly before in Clink).\n        - Also added a corresponding `old-menu-complete-backward` command for reverse order.\n        - All of the `*-menu-complete-*` commands support wildcards (`*` and `?`).\n    - Added `clink-show-help` command (<kbd>Alt</kbd>+<kbd>H</kbd>).  The help now lists _**all**_ key bindings, and it shows user-friendly key names (like `A-Up` or `C-x,C-r` or `C-S-PgUp` or `A-C-S-F3`).\n    - Added `clink-popup-completions` command that shows a popup window listing possible completions.  <kbd>Enter</kbd> inserts the highlighted completion.\n    - Added `clink-popup-directories` command that shows a popup window listing recent directories.  <kbd>Enter</kbd> changes to the highlighted directory, or <kbd>Shift</kbd>+<kbd>Enter</kbd> inserts the highlighted directory in the editing line (or <kbd>Ctrl</kbd>+<kbd>Enter</kbd>).\n    - Added `clink-popup-history` command that shows a popup window listing command history.  <kbd>Enter</kbd> executes the highlighted command, or <kbd>Shift</kbd>+<kbd>Enter</kbd> jumps to the highlighted command in the history (or <kbd>Ctrl</kbd>+<kbd>Enter</kbd>).\n    - Added `clink-scroll-lineup`, `clink-scroll-linedown`, `clink-scroll-page-up`, `clink-scroll-page-down`, `clink-scroll-top`, and `clink-scroll-bottom` commands that do what it looks like they'd do and are bound to the keys it looks like they'd be.\n    - Added `clink-expand-doskey` command (<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>f</kbd>) that expands the current line according to the current doskey aliases.\n    - Added `clink-expand-env-var` command (<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>e</kbd>) that expands the environment variable at the cursor point.\n    - Added `clink-exit` command (<kbd>Alt</kbd>+<kbd>F4</kbd>) that exits CMD.\n- Fixed keyboard input issues:\n    - <kbd>Esc</kbd> is a bindable key now (`\\e[27;27~`).\n    - Added more bindable key combinations (run `clink echo` then press keys to see the key sequence to use in the inputrc file).\n    - <kbd>Ctrl</kbd>+<kbd>@</kbd> (NUL) didn't work.\n    - <kbd>Ins</kbd> toggles insert/overwrite mode.\n    - Unbound keys are ignored now, instead of inserting gibberish characters (part of the terminal internal key sequence).\n    - Fixed input handling so the `quoted-insert` command can work properly.\n    - Fixed <kbd>Esc</kbd> while searching.\n    - Fixed vi mode (was working in v0.4.9, but not in v1.0.x).\n- Fixed command history issues:\n    - The `dont_add_to_history_cmds` Clink setting is a space-delimited list of commands to not add to history.\n    - Fixed bleeding between history banks.\n    - Fixed uninitialized variable that made history updates intermittently do nothing or corrupt the other history bank.\n    - Fixed output from `clink history` to convert to UTF16 when writing to the console (but write UTF8 when output is redirected).\n- Fixed terminal output issues:\n    - Added `terminal.emulate` Clink setting that controls whether Clink does VT emulation or passes all ANSI escape codes directly to the console host.  For example, this lets the prompt and completion coloring take advantage of more sophisticated ANSI escape codes such as XTerm 256 color and 16 bit color support.\n    - Added back support for the `prefer-visible-bell` config variable.\n    - Fixed underline support.\n    - Fixed handling for UTF8 output from Readline.\n    - Fixed invisible cursor point in Lua debugger.\n- Completions:\n    - Added `match.sort_dirs` Clink setting that specifies where to sort directories in the list of possible completions:  before files, mixed in with files, or after files.\n    - Don't attempt completing incomplete UNC paths:  at least the `\\\\server\\share\\` path components are required (for anything shorter the OS APIs are guaranteed to fail, but will fail slowly).\n    - Fixed sorting to use Unicode aware locale based sorting (like Windows does) instead of dumb UTF8 byte comparisons.\n    - Fixed arbitrary limit on completions (had been limited to 64KB worth of completions).\n    - Fixed quoting spaces in completions.\n    - Fixed to use the same list as CMD for characters that require quoting.\n    - Fixed normalizing UNC paths.\n    - Fixed volume relative completions (e.g. `x:foo`).\n    - Disallow mixing file/directory/symlink with other match types.  This was to avoid a confusing/malfunctioning case in match display and prefix highlighting.\n- Fixed UTF8 encoding in various Lua functions.\n- Fixed printing stderr output from Readline, Lua, and Clink.\n- Fixed crashes and other failures when starting Clink in 32 bit CMD.\n- Fixed some memory leaks that accumulated with each new line of input.\n- Fixed prompt filtering API to be backward compatible with v0.4.9 scripts.\n- Fixed Lua errors from `clink set` (it neglected to fully initialize Clink's Lua integration before loading Lua scripts).\n- Fixed UTF8 conversion bug that could truncate a string without fully converting it.\n- Fixed serious rampant memory corruption bug in v1.0.x (not present in v0.4.9), which had been causing intermittent malfunctions and data corruption and crashes.\n- Fixed multi-line doskey macros to show the prompt in between lines, like CMD does.\n- Removed the 4096 byte limit on input.\n- Renamed the Clink DLL back to what it was in v0.4.x, to fix compile time problems.\n- Other fixed issues:\n    - [mridgers #544](https://github.com/mridgers/clink/issues/544) Clink v1.0.0.a1 doesn't support cyrillic characters keyboard input on Windows 10 with console V2.\n    - [mridgers #543](https://github.com/mridgers/clink/issues/543) Not compatible with Windows Insider Build 20150.\n    - [mridgers #537](https://github.com/mridgers/clink/issues/537) Clink breaks the CMDS tool.\n    - [mridgers #520](https://github.com/mridgers/clink/issues/520) Clink 1.0.0.a1 - `clink set history_io 1` Error.\n    - [mridgers #519](https://github.com/mridgers/clink/issues/519) Clink v1.0.0.a1 - `-s|--scripts [path]` command line arg removed?\n    - [mridgers #516](https://github.com/mridgers/clink/issues/516) Doskey $T not handled properly.\n    - [mridgers #512](https://github.com/mridgers/clink/issues/512) Command history missing in .history.\n    - [mridgers #503](https://github.com/mridgers/clink/issues/503) Keyboard shortcut for scrolling.\n    - [mridgers #501](https://github.com/mridgers/clink/issues/501) <kbd>Ctrl</kbd>+<kbd>Backspace</kbd> works now.\n    - [mridgers #487](https://github.com/mridgers/clink/issues/487) Clink breaks ConEmu-specific Escape codes.\n    - [mridgers #480](https://github.com/mridgers/clink/issues/480) History never saved.\n    - [mridgers #465](https://github.com/mridgers/clink/issues/465) Using LuaJIT (FFI).\n    - [mridgers #456](https://github.com/mridgers/clink/issues/456) Clear-screen not working properly when PROMPT is two lines long.\n    - [mridgers #453](https://github.com/mridgers/clink/issues/453) Wrong cursor position when a line contains non-printable characters.\n    - [mridgers #442](https://github.com/mridgers/clink/issues/442) Unable to paste more than 1024 characters using <kbd>Ctrl</kbd>+<kbd>V</kbd>.\n    - [mridgers #422](https://github.com/mridgers/clink/issues/422) Problem with filename modifiers.\n    - [mridgers #420](https://github.com/mridgers/clink/issues/420) Use NtSuspendProcess instead of CreateToolhelp32Snapshot to freeze the threads.\n    - [mridgers #372](https://github.com/mridgers/clink/issues/372) Provide a way to select a previous directory.\n    - [mridgers #365](https://github.com/mridgers/clink/issues/365) history-search behavior.\n    - [mridgers #342](https://github.com/mridgers/clink/issues/342) Clink_inputrc not being processed if it the clink_inputrc is a link (created via mklink).\n- Fixed many other bugs.\n\n### Releases from [mridgers/clink](https://github.com/mridgers/clink) original repo\n\n#### v1.0.0a1 _(alpha test release)_\n\n- Improve terminal integration with the Readline library.\n- Internal improvements to the built-in ecma48 terminal emulator.\n- Fixed use after free in Doskey emulation.\n- Fixed dash-dash flag completion.\n- Search ancestors for a compatible target process (for when cmd.exe starts another process that subsequently starts clink; especially useful during development).\n- Use clink/terminal's wcwidth() implementation.\n- screen_buffer::set_cursor() should be relative to the visible area.\n- Try to adjust the cursor position better when resizing the terminal.\n- Some internal Lua functions needed the unquoted clink exe path.\n- The origin path now affects the hash in the dll cache, to guard against directory moves.\n- More code reorganization.\n\n#### v1.0.0a0 _(alpha test release)_\n\n- Extensive code reorganization, refactoring, and rewriting -- multiple times -- almost everything was touched.\n- OS integration:\n    - Fixed Doskey macros on Win8, and on Win10.\n    - Fixed `clink_x??.exe` startup stall on Windows 10.\n    - Removed XP support. It doesn't load DLLs like Clink uses them.\n    - Removed Powershell support.\n- Readline integration:\n    - Search for multiple places for [.|_]inputrc (fixes [mridgers #258](https://github.com/mridgers/clink/issues/258)).\n    - Disabled Readline's completion code, and only use the clink alternative code.\n    - Removed redundant slash translation and shims to make it happen.\n    - Removed control of Readline's suffix appending and disabled it.\n- `clink` commands and flags:\n    - Changed `--cfgdir` to `--profile`, it's no longer required, and added help about it.\n    - Added a `--version` option to print Clink's version.\n    - Added `clink info` to print information about Clink.\n    - Added `clink echo` command to echo input key sequences to stdout.\n    - Added `clink history` command (fixes [mridgers #172](https://github.com/mridgers/clink/issues/172)).\n    - Added `history` as an alias for `clink history`.\n    - Added internal `--list` flag to `clink set` for match generation.\n    - Removed `--scripts` argument (fixes [mridgers #206](https://github.com/mridgers/clink/issues/206)).\n    - Updated `clink autorun` command's help text.\n- Lua scripts:\n    - Prefer `userprofile` over other standard environment variables for where to look for lua scripts.\n    - New API for argument style completion scripts.\n    - Refactored prompt filtering, and introduced new prompt filtering API.\n    - Refactored generating matches, and introduced new match generator API.\n    - Removed built in completions scripts for git, go, hg, and p4. There's better ones.\n    - Renamed many of clink's Lua functions.\n    - Moved functions from `clink` to `os` in Lua.\n    - Removed `clink.is_match()` in Lua; don't presume anything on anyone's behalf about matches.\n    - Added some current dir functions in Lua.\n    - Added some env/dir functions in Lua.\n    - Exposed path manipulation functions to Lua.\n    - Embed the core Lua scripts instead of loading them from files.\n- Terminal IO:\n    - Added a module for scrolling the screen.\n    - Rewrote the terminal emulation module, and all Readline IO goes through it.\n    - Use VT220-style control codes for special keys.\n    - If <kbd>Alt</kbd> is pressed send ESC in the input stream rather than setting meta bit.\n    - Replaced wcwidth() with a more complete and correct version.\n- Settings:\n    - Added `clink_path` setting for where to look for lua scripts.\n    - Added `match.ignore_case` setting.\n    - Added `files.unc_paths` setting for optional matching from UNC paths.\n    - Added a setting to skip adding lines that start with `history`.\n    - Removed `esc_clears_line` setting.\n    - Pasting CRLFs doesn't really make sense.\n    - Don't write out settings that are set to default.\n- Make sure <kbd>Ctrl</kbd>-<kbd>C</kbd> doesn't modify history.\n- Make a cached copy of Clink's DLL when injecting so as to not lock the master.\n- Guard against Readline's writes to stderr.\n- Remove `clink_inputrc_base` file and embed its content (fixes [mridgers #257](https://github.com/mridgers/clink/issues/257)).\n- Include more metadata in the Clink's executables.\n\n#### v0.4.9\n\n- Fixed broken Doskey on Win10 (#438, #451)\n\n#### v0.4.8\n\n- Environment variable `clink_profile` overrides Clink's profile path (#390).\n- Load a clink_inputrc file from Clink's profile directory (fixes #406).\n- Bug fixes;\n    - Redraw issues when prompts end in OSC ANSI codes (#387, #384).\n    - Fixed `clink autorun --help` crash.\n\n#### v0.4.7\n\n- Bug fixes;\n    - Sometimes autorun tries to run clink.exe (#374).\n    - Autorun would cause cmd.exe to return an error if it wasn't interactive (#373).\n\n#### v0.4.6\n\n- HOME is only set if it is currently unset.\n- Readline can be initialised with .inputrc and _inputrc files too (#258).\n- Bug fixes;\n    - Executable completion;\n        - Paths from PATH were checked twice.\n        - Incorrect results were returned for words ending in `.` or `-`.\n        - Directories . and .. were incorrectly displayed.\n    - Fixed a crash if .bat script's stdout is redirected (#366).\n    - Occasional crash when injecting Clink (#351).\n    - Display errors;\n        - When editing near the window's right-hand edge (#347).\n        - Double display of multi-line prompts when resizing the terminal (#352).\n        - Very rare wrap artefacts when making the terminal window larger.\n    - Doskey emulation (#344).\n    - Improved `clink autorun` help (#348).\n    - Fixed launching Clink when clink.bat is renamed (#357).\n\n#### v0.4.5\n\n- Improved `clink autorun`. It now defaults to the Current User registry hive.\n- `clink set` gives more details for enumeration-type settings.\n- Tab completion for p4vc.\n- New settings `history_expand_mode` to control history expansion in quotes (#317).\n- Bug fixes;\n    - Use full width of the terminal (#337).\n    - Fixed MinGW compile error (#335).\n    - Autorun now defaults to the current user's hive (#332).\n    - Creating clink.html no longer needs Pandoc, plus it looks a bit better (#331).\n    - Added settings to control history expansion (#326).\n    - Correct fallback when `use_altgr_substitute` is off (#325).\n    - Load history prior to saving it on shutdown (#318).\n    - Added Shift-Tab documentation and menu completion example (#190).\n    - Added shim for backwards menu completion (#190).\n    - Input handling now outputs <code>\\e`Z</code> for <kbd>Shift</kbd>-<kbd>Tab</kbd> (#190).\n    - Updated Readme with current Premake info (#310).\n    - Guard against there being no buffer to read from (#304).\n    - Fixed artefacts when resizing conhost's buffer (#139).\n    - Clear remaining characters if scroll window was too small (#301)\n    - Escape % characters when expanding aliases (#280).\n    - Fixed leaking exception filters.\n    - Clearing the screen doesn't leave artefacts behind.\n\n#### v0.4.4\n\n- Completing .. behaves more like Bash (#277).\n- Escape from yes/no question when <kbd>Ctrl</kbd>+<kbd>C</kbd> is pressed.\n- Valid XP executables (#278, #289).\n- Fixed n-th argument yank not working as expected (#254).\n- Fixed prompt colours sometimes not working (#279, #286).\n- Fixed `!0` causing Clink to crash.\n- Save/restore cursor position in case Readline moves it.\n\n#### v0.4.3\n\n- Localised Y/N when auto-answering \"terminate?\" prompt.\n- `$*` would early out if there was no arguments.\n- Disable ANSI code support if third party provides it.\n- Installer can now set %CLINK_DIR% to install location.\n- Improved output from `clink set`.\n- Support for Windows 10 Technical Preview.\n- <kbd>Ctrl</kbd>-<kbd>L</kbd> now scrolls last line to the top of the window rather than clearing.\n- New option to control how newline characters are pasted to the line.\n- New options to control history;\n    - `history_file_lines` - maximum lines saved to disk.\n    - `history_ignore_space` - ignore lines prefixed with whitespace.\n    - `history_dupe_mode` - how duplicate entries are handled.\n    - `history_io` - load/save history from disk every line.\n- Fixed nonfunctional numpad keys.\n- Fixed missing WINCH signals if other processes resize the buffer.\n- Support <kbd>Alt</kbd> codes sent from Conhost.\n\n#### v0.4.2\n\n- Prompt colouring no longer requires third party ANSI code utility.\n- Override settings with environment variables prefixed with 'clink'.\n- Ctrl-PgUp goes up a directory.\n- Updated Go completions (by matrixik).\n- Arguments to clink.arg.new_parser() now initialise parser's flags/args (from vladimir-kotikov).\n- New clink.arg.add_flags() and clink.arg.add_arguments() functions.\n- Removed footer and <kbd>Alt</kbd>-<kbd>H</kbd> tip for more succinct stdout output.\n- Bug fixes;\n    - Windows XP works again.\n    - Fixed race condition in lua_execute().\n\n#### v0.4.1\n\n- Bug fixes;\n    - Various Unicode fixes causing corrupt environment variables.\n    - Fixed thread resume/suspend causing rare system-wide deadlock.\n    - Fixed incorrect translation of suffixed slash when completing flags.\n- Add `--nolog` argument to disable file logging. Fix #187 Fix #154\n- Added missing escape sequences from doskey emulation.\n- Reinstated unix-kill-line key binding.\n- Mapped <kbd>PgUp</kbd>/<kbd>Down</kbd> to search history using line typed so far.\n- Added documentation covering escape codes for special keys.\n- Added support for Windows' <kbd>AltGr</kbd> substitute <kbd>Ctrl</kbd>-<kbd>Alt</kbd>.\n- Support for Readline's 'menu' style completion (see docs).\n\n#### v0.4\n\n- New features;\n    - Better `clink.arg` API. Easier, more intuitive, and more powerful.\n    - Whitespace prefix skips exec matching.\n    - Added a `set` verb to easily change settings from the command line.\n    - Basic support for a shells other than cmd.exe.\n    - Completion for Go (contributed by Dobroslaw Zybort).\n    - Setting `exec_match_style` to -1 disables it entirely.\n    - Make history persistence optional.\n    - Alias/doskey completion.\n    - Very basic support for Powershell.\n    - View cmd.exe's autorun entry without needing admin rights.\n- New key bindings;\n    - <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>C</kbd> : Copy command line to the clipboard.\n    - <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>E</kbd> : Expand environment variable under cursor.\n    - <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>U</kbd> : \"up directory\" (formerly <kbd>Shift</kbd>-<kbd>Up</kbd>).\n    - <kbd>Ctrl</kbd>-<kbd>U</kbd> : Adds `..\\` to the command line.\n    - <kbd>Alt</kbd>-<kbd>H</kbd> : Shows active keymap's key bindings.\n- New Lua functions;\n    - clink.execute().\n    - clink.get_host_process().\n    - clink.match_files().\n    - clink.match_words().\n    - clink.get_console_aliases().\n- Lots of bug fixes, including;\n    - Better command extraction.\n    - Fixed cmd.exe command paging and <kbd>Ctrl</kbd>-<kbd>C</kbd>/<kbd>Ctrl</kbd>-<kbd>Break</kbd> handling.\n    - Multiple locale fixes.\n    - Use localised text for \"Terminate batch job?\" prompt.\n\n#### v0.3\n\n- Automatic answering of cmd.exe's \"Terminate batch script?\" prompt.\n- Coloured prompts (requires ANSICON or ConEmu).\n- Added Shift-Up keyboard shortcut to automatically execute `cd ..`\n- Mapped <kbd>Ctrl</kbd>-<kbd>Z</kbd> to undo, Microsoft style.\n- Improved integration of Readline;\n    - New input handling code (<kbd>Ctrl</kbd>-<kbd>Alt</kbd> combos now work).\n    - An implementation of the Termcap library.\n    - Fully functional Vi-mode support.\n    - Support for resizable consoles.\n    - Line wrapping now works correctly (issue 50).\n- Adjustable executable match style (issue 65).\n- Improved environment variable completion.\n- Added settings file to customise Clink.\n- New Lua features and functions;\n    - Matches can now be filtered in Lua before they are display.\n    - clink.quote_split().\n    - clink.arg.node_merge().\n    - clink.get_screen_info() (issue 71).\n    - clink.split() (for splitting strings).\n    - clink.chdir().\n    - clink.get_cwd().\n    - Functions to query Clink's settings.\n- New command line options;\n    - <code>--profile <span class=\"arg\">dir</span></code> to override default profile directory.\n    - `--nohostcheck` disables verification that host is cmd.exe.\n    - `--pid` specifies the process to inject into.\n- Update Mercurial completion (issue 73).\n- Start menu shortcut starts in USERPROFILE, like cmd.exe\n- Zip distribution is now portable.\n\n#### v0.2.1\n\n- The .history file now merges multiple sessions together.\n- Fixed missing y/n, pause, and other prompts.\n- Fixed segfault in loader executable.\n- Better ConEmu compatibility.\n\n#### v0.2\n\n- Basic argument completion for `git`, `hg`, `svn`, and `p4`.\n- Traditional Bash clear screen (<kbd>Ctrl</kbd>-<kbd>L</kbd>) and exit shortcuts (<kbd>Ctrl</kbd>-<kbd>D</kbd>).\n- Scrollable command window using <kbd>PgUp</kbd>/<kbd>PgDown</kbd> keys.\n- Doskey support.\n- Automatic quoting of file names with spaces.\n- Scriptable custom prompts.\n- New argument framework to ease writing context-sensitive match generators.\n- History and log file is now saved per-user rather than globally.\n- Improved Clink's command line interface (`clink --help`).\n- More reliable handling of cmd.exe's autorun entry.\n- General improvements to executable and directory-command completion.\n- Symbolic link support.\n- Documentation.\n- Windows 8 support.\n- Improved hooking so Clink can be shared with other thirdparty utilities that\n  also hook cmd.exe (ConEmu, ANSICon, etc.).\n\n#### v0.1.1\n\n- Fixed <kbd>AltGr</kbd>+<kbd>&lt;key&gt;</kbd> on international keyboards.\n- Fixed broken completion when directories have a `-` in their name (Mark Hammond)\n- The check for single match scenarios now correctly handles case-insensitivity.\n\n#### v0.1\n\n- Initial release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.32421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n"
        },
        {
          "name": "LUANOTES.md",
          "type": "blob",
          "size": 0.994140625,
          "content": "# Lua Notes\n\n## Performance\n\n### Implicit boolean vs equality comparison (100,000,000 iterations).\n- `if mode then` -> 1.23 sec.\n- `if mode == true then` -> 1.42 sec.\n- `if mode == \"one\" then` -> 1.44 sec.\n\n### True vs false branch path (100,000,000 iterations).\n- `if x then` **false** branch 0.2 sec **faster** than true branch.\n- `not` is insignificant; negligible difference between `if x then` vs `if not x then` when following the same branch path.\n\n### Cache table value in local var (100,000,000 iterations).\n- `x = x + t.longer_name.pinky` unconditional -> 2.0 sec.\n- `x = x + t.longer_name.pinky` true branch path w/no else block -> 2.4 sec.\n- `x = x + t.longer_name.pinky` true branch path w/an else block -> 2.7 sec.\n- `x = x + t.longer_name.pinky` false branch path -> 2.5 sec.\n- `x = x + cached` unconditional -> 0.68 sec.\n- `x = x + cached` true branch path w/no else block -> 0.98 sec.\n- `x = x + cached` true branch path w/an else block -> 1.24 sec.\n- `x = x + cached` false branch path -> 1.18 sec.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.287109375,
          "content": "### Overview\n\nClink combines the native Windows shell cmd.exe with the powerful command line editing features of the GNU Readline library, which provides rich completion, history, and line-editing capabilities. Readline is best known for its use in the Unix shell Bash, the standard shell for many Linux distributions.\n\nFor details, refer to the [Clink documentation](https://chrisant996.github.io/clink/clink.html).\n\n> [!NOTE]\n> Starting Clink injects it into a `cmd.exe` process, where it intercepts a handful of Windows API functions so that it can replace the prompt and input line editing with its own Readline-powered enhancements.\n\n### Download\n\nDownloads are available from the [releases page](https://github.com/chrisant996/clink/releases).\n\nSee the [issues page](https://github.com/chrisant996/clink/issues) for known issues or to file new issues.\n\n### Feature Highlights\n\n- [Auto-Suggestions](https://chrisant996.github.io/clink/clink.html#gettingstarted_autosuggest); Clink offers suggestions as you type based on history, files, and completions.\n- [Completions](https://chrisant996.github.io/clink/clink.html#how-completion-works); Clink can complete words when you press <kbd>Tab</kbd> or <kbd>Ctrl</kbd>-<kbd>Space</kbd> (interactive completion list).\n- [Persistent History](https://chrisant996.github.io/clink/clink.html#saved-command-history); Clink stores persistent history between sessions.\n- [Scriptable Prompt](https://chrisant996.github.io/clink/clink.html#customizing-the-prompt); You can customize the prompt dynamically with Lua scripts -- like in other shells -- but never before possible in cmd.exe!\n- [Colored Input Line](https://chrisant996.github.io/clink/clink.html#gettingstarted_colors); Your input is colored by context sensitive completion scripts.\n- [Command Line Editing Improvements](https://chrisant996.github.io/clink/clink.html#gettingstarted_keybindings); Clink supercharges the command line with new input editing commands and configurable key bindings.\n- Auto-answering of the \"Terminate batch job?\" prompt.\n- and much more!\n\n### Installation\n\nYou can install Clink by running the setup EXE file from the [releases page](https://github.com/chrisant996/clink/releases).\n\nOr by using [winget](https://learn.microsoft.com/en-us/windows/package-manager/winget/) and running `winget install clink`.\n\nOr by using [scoop](https://scoop.sh/) and running `scoop install clink`.\n\nOr by downloading the ZIP file from [releases page](https://github.com/chrisant996/clink/releases), and extracting the files to a directory of your choosing.\n\n### Usage\n\nOnce installed, there are several ways to start Clink.\n\n1. If Clink is configured for autorun, just start `cmd.exe` and Clink is automatically injected and ready to use.\n\n    > The setup EXE has an option \"Autorun when cmd.exe starts\".  If you didn't use the setup EXE, or if you want to enable or disable autorun later, you can run `clink autorun install` or `clink autorun uninstall` to change the autorun configuration.  Run `clink autorun --help` for more info.\n\n2. To manually start, run the Clink shortcut from the Start menu (or the clink.bat located in the install directory).\n3. To establish Clink to an existing `cmd.exe` process, use `clink inject`.\n\n    > If the Clink install directory isn't in the PATH, then use <code><em>install_dir</em>\\clink</code> in place of `clink` to run Clink commands.  Once Clink is injected into a `cmd.exe` process, then it automatically sets an alias so that you can simply use `clink`.\n\nYou can use Clink right away without configuring anything:\n\n- Searchable [command history](#saved-command-history) will be saved between sessions.\n- <kbd>Tab</kbd> and <kbd>Ctrl</kbd>+<kbd>Space</kbd> will do match completion two different ways.\n- Press <kbd>Alt</kbd>+<kbd>H</kbd> to see a list of the current key bindings.\n- Press <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>/</kbd> followed by another key to see what command is bound to the key.\n\nSee [Getting Started](https://chrisant996.github.io/clink/clink.html#getting-started) for information on how to get started with using Clink.\n\n### Upgrading from Clink v0.4.9\n\nThe new Clink tries to be as backward compatible with Clink v0.4.9 as possible. However, in some cases upgrading may require a little bit of configuration work. More details can be found in the [Clink documentation](https://chrisant996.github.io/clink/clink.html).\n\n### Extending Clink\n\nClink can be extended through its Lua API which allows easy creation of context sensitive match generators, prompt filtering, and more. More details can be found in the [Clink documentation](https://chrisant996.github.io/clink/clink.html).\n\n### Building Clink\n\nClink uses [Premake](http://premake.github.io) to generate Visual Studio solutions or makefiles for MinGW. Note that Premake >= 5.0.0-beta1 is required.\n\n1. Cd to your clone of Clink.\n2. Run <code>premake5.exe <em>toolchain</em></code> (where <em>toolchain</em> is one of Premake's actions - see `premake5.exe --help`)\n3. Build scripts will be generated in <code>.build\\\\<em>toolchain</em></code>. For example `.build\\vs2022\\clink.sln`.\n4. Call your toolchain of choice (VS, mingw32-make.exe, msbuild.exe, etc). GNU makefiles (Premake's *gmake* target) have a **help** target for more info.\n\n### Building Documentation\n\n1. Run `npm install -g marked@2.0.1` to install the [marked](https://marked.js.org) markdown library (version 2.0.1).\n2. Run `premake5.exe docs`.\n\n> [!IMPORTANT]\n> Clink documentation uses marked@2.0.1.  Newer versions of marked have introduced breaking changes, and I haven't yet rewritten how Clink builds the documentation to accommodate the breaking changes.  The security fixes in newer versions aren't relevant since marked is only used at build time with known inputs (the marked library is no longer embedded in the documentation as of commit [d5b39ca](https://github.com/chrisant996/clink/commit/d5b39caf7a1a4353ab8e474e0a26c4f7981e9c3c) in Oct 2020).\n\n### Debugging Clink\n\n1. Start Clink using any of the normal ways.\n2. Launch a debugger such as Visual Studio.\n3. Attach the debugger to the CMD.exe process that Clink was injected into.\n   - If you break into the debugger now, it will be inside Clink code, waiting for keyboard input.\n4. Here are some breakpoints that might be useful:\n   - `host::edit_line` is the start of showing a prompt and accepting input.\n   - `line_editor_impl::update_matches` is where the match pipeline uses `.generate()` to collect matches and `.select()` to filter the matches.\n   - `rl_module::on_input` and `readline_internal_char` (and the `_rl_dispatch` inside it) is where keys are translated through Readline's keymap to invoke commands.\n   - `rl_complete` or `rl_menu_complete` or `rl_old_menu_complete` are the Readline completion commands.\n   - `alternative_matches` builds a Readline match array from the results collected by the match pipeline.\n\n#### Debugging Clink startup\n\nThe easiest way to debug Clink startup is to use simulated injection rather than real injection:  set a breakpoint on `initialise_clink` and start `clink testbed --hook` under the debugger.  All of the usual Clink startup code is executed, but the cross-process injection is only simulated, so the resulting prompts of course are not actually executed by CMD.exe.\n\nTo debug Clink startup during real injection, you must attach the debugger to the target CMD.exe _before_ injection, set a breakpoint on `initialise_clink` (it will be an unresolved breakpoint at first), and then use `clink inject -p process_id`.  The debugger should resolve the breakpoint as soon as the Clink DLL is loaded, and should hit the breakpoint soon after.\n\n#### Debugging Clink DLL injection\n\nTo debug the actual DLL injection procedure, you must debug both the `clink_x64.exe` (or `clink_x86.exe`) process and the target CMD.exe process.\n- Set a breakpoint on `process::remote_call_internal` in the Clink process.\n  - The first time it's reached should be for injecting a `LoadLibrary` call into the target CMD.exe process.\n  - The second time it's reached should be for injecting an `initialise_clink` call into the target CMD.exe process.\n- Set a breakpoint on `initialise_clink` in the target CMD.exe process.\n- Step through the `remote_call_internal` function to inspect the local side of the operation.\n  - The `stdcall_thunk` function is the instruction payload that will be copied into the target CMD.exe process.\n  - Observe the value of `region.base` before the `CreateRemoteThread` call executes -- this is the address of the instruction payload that has been copied into the target CMD.exe process.\n  - Set a breakpoint in the target CMD.exe process for that address -- when `CreateRemoteThread` executes, it will transfer execution to that address in the target CMD.exe process, and you can debug through the execution of the instruction payload itself.\n\n> [!CAUTION]\n> If the instruction payload references any functions or variables from the Clink process, it will crash during execution inside the target CMD.exe process.  Compiler features like the \"just my code\", \"edit and continue\", \"omit frame pointers\", exception handling, inlining, and runtime checks must be configured appropriately to keep the instruction payload self-contained (see the \"clink_process\" lib in the premake5.lua file).\n\n### Debugging Lua Scripts\n\n1. Use `clink set lua.debug true` to enable using the Lua debugger.\n2. Use `clink set lua.break_on_error true` to automatically break into the Lua debugger on any Lua script error.\n3. Add a `pause()` line in a Lua script to break into the debugger at that spot, if the `lua.debug` setting is enabled.\n4. Use `help` in the Lua debugger to get help on using the Lua debugger.\n\n### Ingesting new Readline versions\n\nPerform a 3-way merge over the Readline sources where:\n- Base = Readline sources from previous Readline version\n- Theirs = Readline sources from updated Readline version\n- Yours = Clink sources for Readline\n\nWatch out for changes that may need additional follow-up!\nIncluding but not limited to these, for example:\n- New config variables in bind.c need to be added to `save_restore_initial_states` in rl_module.cpp.\n- Some config variables may be incompatible with Clink and may need compensating changes.\n- Use of `'/'` literals instead of calling `rl_is_path_separator()` (or in complete.c calling `pathfold()`).\n- Changes in the `COLOR_SUPPORT` code.\n- Changes in `HANDLE_MULTIBYTE` support, which may be incorrect or incomplete on Windows.\n- Changes in keyboard timeout support, an area of Readline that requires shimming and workarounds in order to even compile for Windows, and doesn't behave the same as Readline expects.\n- Changes in signal handler usage, particularly for `SIGALRM` or `SIGTERM` or most other signaler events since MSVC only supports `SIGINT` and `SIGBREAK` (which is a Microsoft extension).\n\n### License\n\nClink is distributed under the terms of the GNU General Public License v3.0.\n\n### Star History\n\n<a href=\"https://star-history.com/#chrisant996/clink&mridgers/clink&Date\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=chrisant996/clink%2Cmridgers/clink&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=chrisant996/clink%2Cmridgers/clink&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=chrisant996/clink%2Cmridgers/clink&type=Date\" />\n  </picture>\n</a>\n\n<!-- vim: set ft=markdown : -->\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 33.8466796875,
          "content": "_This todo list describes ChrisAnt996's current intended roadmap for Clink's future.  It is a living document and does not convey any guarantee about when or whether any item may be implemented._\n\n<br/>\n\n# IMPROVEMENTS\n\n## Mystery Issue\n\n## High Priority\n\n## Unit Tests\n\n## Normal Priority\n- Randomly hit `assert(group == m_prev_group || group == m_catch_group);` upon `Ctrl-Space`.  It left input in a weird state with `clink-select-complete` still active but not handling input.  Could not repro again after I got out of the state.  It seems likely to be a long-standing issue in some obscure edge case.\n- Event handler enhancements:\n  - Allow setting an optional `priority` when registering event handlers?  So that scripts can control the precedence of `onbeginedit`, `onendedit`, and so on.\n  - Allow adding a ONE-TIME event handler which automatically removes itself upon firing?  And `clink-diagnostics` would need to show any ONE-TIME event handlers until the next beginedit.\n    - Watch out for back-compat:  Consider making _new API functions_ for adding one-time event handlers.  Adding an optional parameter is dangerous because a script author could use it without taking steps to ensure backward compatibility, and then potentially significant malfunctions could occur.  And anyway, probably only a small number of events would actually need support for one-time handlers (maybe even only `onbeginedit`).\n- The `oncommand` event isn't sent when the command word is determined by chaincommand parsing; `line_editor_impl::maybe_send_oncommand_event()` needs to let `_argreader` determine the command word.\n- Some wizard for interactively binding/unbinding keys and changing init file settings; can write back to the .inputrc file.\n\n## Low Priority\n- Windows Terminal now has 3 ways of measuring character widths.  There's no way for Clink to ask which mode is being used (but it might be possible to deduce on the fly using techniques from the wcwidth-verifier repo).  The wcwidth updates in Clink are consistent with the \"Grapheme clusters\" mode.  If the \"wcswidth\" and \"Windows Console\" modes turn out to be worth supporting, then that would require a bunch of extra work and configuration.\n- Find a high performance way to detect git bare repos and encapsulate it into a Lua function?\n- `clink_reset_line` still causes UNDO list leaks.  `UP` until `sudo where`, then `asdf`, then `ESC`, then `ENTER`.  May take several repititions; may repro quicker when varying which history entry is recalled.\n- line_state parsed `foo^ bar` as a single word \"foo^ bar\", but CMD parses it as two words \"foo\" and \"bar\".  The parser is fixed now, but what about downstream edge cases where things check the next character after a word (or try to skip a run of spaces but get confused by `foo ^ ^ bar`)?\n- Open issue in Terminal repo about bugs in the new shell integration in v1.18.\n  - Transient prompt can lead to Terminal getting confused about where prompt markers are.\n  - Can the same thing happen with zsh and powerlevel10k transient prompt?\n  - Provide a sample .txt file that repros the issue.  Maybe multiple .txt files that chain together (or with a pause; is there an escape code for a pause?) to show the UX flow.\n- Consider plumbing `lua_State*` through all layers to help guarantee things don't accidentally cross from a coroutine into main?\n- Make a reusable wrapper mechanism to create coroutine-friendly threaded async operations in Lua?\n\n## Argmatcher syntax\n- See the argmatcher_syntax branch.\n\n<br/>\n<br/>\n\n# \"New\" commits from Martin\n\n## To Be Considered\n- Ctrl-W changes.  While I agree in principle, this kind of change upsets people who are used to bash.  Maybe it should only apply when `clink.default_bindings` == `windows`?\n  - [Ctrl-W is more useful if it kills on more granular word boundaries](https://github.com/mridgers/clink/commit/5ee004074e0869273ac42006edef4bcdcfd0e24f)\n  - [Smarter Ctrl-W word deletion](https://github.com/mridgers/clink/commit/a385a1695bb425d6f48aae4e587c9c06af8515f6)\n- [Type name style change](https://github.com/mridgers/clink/commit/e6baa31badb8854413dd34988cc33b7aeb68b7e0) -- Huge; renames types from `foo_bar` to `FooBar`.\n\n## No\n- [Changed member style](https://github.com/mridgers/clink/commit/fd5041a34ba162fd3adc1b7b0c5910438e343235) -- Huge; renames members from `m_foo` to `_foo`.  And what about `c_` and `s_` and `g_`?  Keeping `m_` seems useful, and avoids a huge amount of churn.\n- It could be reasonable to add an iterator version of `os.globfiles()`, but replacing it breaks compatibility -- The way these commits implemented it is problematic because it relies exclusively on garbage collection to release the OS FindFirstFile handle, and that can create sharing violations which the Lua script cannot fix except by forcing garbage collection.  But something similar to `io.open()` and `:lines()` and `:close()` would be fine, and would be consistent with `opendir()`, `readdir()`, and `closedir()`.\n  - [Made Lua's os.glob*() work like an iterator instead of building a table](https://github.com/mridgers/clink/commit/13fc3b68046d2cee0f2188b9c8d54fa0cbc18718)\n  - [os.glob*() tests](https://github.com/mridgers/clink/commit/5cfacee2a2b8230968854bc94bc3e1adf6b56bf9)\n  - [Fixed \"cd \\\\\" Lua error](https://github.com/mridgers/clink/commit/d2ffed58f75597cec08d85e8abf4fafc0b60a067)\n  - [builder::addmatches() now also accepts a function](https://github.com/mridgers/clink/commit/6a2b818efd84377b3a625bb1ecdeffe89da20cd6) -- This is inconsistent with `argmatcher:addflags()` and `argmatcher:addarg()`, and is generally non-intuitive.\n- [Use AppData/Local for a the DLL cache as temp can get cleaned](https://github.com/mridgers/clink/commit/8ed3cb0b427970c8082acb238071b26d5e788057) -- Getting cleaned is desirable.  Otherwise DLL versions accumulate without bound.\n- [Don't expect the user to account for a null terminator](https://github.com/mridgers/clink/commit/4583281d464933d9ce021aedcdf3edc5e3fdc189) -- This still requires the user to account for a null terminator, by removing the space for the null terminator, otherwise the block gets sized differently than expected (and can have extra slop allocated).\n- Removing all copyright dates seems problematic.  Isn't it required in copyright notices?  And in the program logo header it provides date context for the program version being used.\n  - [Removed date from header](https://github.com/mridgers/clink/commit/7ca14e8d4c82b4a6e6801af4b702329d8de29eef)\n  - [Removed years](https://github.com/mridgers/clink/commit/b732e873fc337671fabc62659a0a578cf617028c)\n- [Hand-rolled remote-call thunks. Previous approach was assuming that the compiler won't do what it eventually did; add complex prologue/epilogue.](https://github.com/mridgers/clink/commit/76aee60e5cdad911a0b478765499f8fbdd848619) -- That was resolved in chrisant996/clink by turning off certain compiler features in the relevant files (see commits 462a985e66, 7ba05ea77e, e0750b173d, 03320a2069, and 3dd4f49e72), which also makes ARM64 work without special custom assembly.\n- [Only log inputrc information once](https://github.com/mridgers/clink/commit/f2228b9d64e30852f415969f5a0409e252df3c01) -- That was only annoying because Lua was recreated on each prompt, which had to be removed because (1) it broke `z`, (2) it bogs down performance, and (3) chrisant996/clink uses coroutines which is incompatible with recreate Lua on each prompt.  The logging change would also miss when the user makes a configuration change that results in a different inputrc file getting loaded.\n- `io.popen2()` -- Why was this done?  If this is just trying to support UTF8, then chrisant996/clink solved that by setting the C runtime locale to `\".utf8\"`.\n  - [Added io.popen2() that directly uses Windows' API](https://github.com/mridgers/clink/commit/bd69fe219501e050dd1b92c13fd9b842c497885d)\n  - [Make sure there's a valid stderr handle](https://github.com/mridgers/clink/commit/795c371cfc0cf00888322d68791c99f670210bfe)\n  - [Use the parent process' console](https://github.com/mridgers/clink/commit/2c505bd29c2c9493836e6b2bce29a2cc4e88182b)\n  - [Up-values will always exist so there's no need for a null check](https://github.com/mridgers/clink/commit/8dcb97025af170afe5f357c6ac2ff7101a758b3d)\n  - [Put io.popen2() processes in a different Ctrl-C group](https://github.com/mridgers/clink/commit/6bd9d2c4ca346adfad8ca413776f417cadfca693)\n  - [Corrected a spelling mistake](https://github.com/mridgers/clink/commit/d0a6e8708032c3f08a776953cc59c90e660bc684)\n- [Better implementation of non-ASCII compatible lua_state::do_file()](https://github.com/mridgers/clink/commit/c7105d12a9c35b45d2eef7760df323317bb15d87) -- This was solved in chrisant996/clink by setting the C runtime locale to `\".utf8\"`.\n- Jmp hooking -- Not needed in chrisant996/clink because (1) Detours is available and (2) IAT hooking is used exclusively.\n  - [Very simple and incomplete x86/x64 length disassembler](https://github.com/mridgers/clink/commit/2355aafd2914f2e7af997ae75eac2d9cc3aaa313)\n  - [New jmp-style hooking mechanism that is Win11 compatible](https://github.com/mridgers/clink/commit/7ed4c8f0215c45e96f757dd2ea9d4e44b689cf58)\n  - [Branch displacement was back-to-front](https://github.com/mridgers/clink/commit/3047b9b91e75131db0243bd6cde4a36fffe42b92)\n- [Use Windows 10's virtual terminal if available](https://github.com/mridgers/clink/commit/530196af81f9981d18888e1326ff37d0bd249d7e) -- SetConsoleMode does not validate flags, so the approach here will not detect when `ENABLE_VIRTUAL_TERMINAL_PROCESSING` is not available.  This was solved in chrisant996/clink by checking the OS version and the ConsoleV2 regkey and etc.\n- [unix-filename-rubout uses forward slashes too](https://github.com/mridgers/clink/commit/d82ad89cb0e353ece72f0ddf399632ca21fdcd5c) -- This was solved in chrisant996/clink by refactoring how Readline handles path separators, and the changes were ratified by Chet Ramey and incorporated into the official Readline distribution (although subsequent changes in Readline haven't followed the refactored approach and will need further cleanup).\n- [Let's try a different default colour scheme (white on red was too angry)](https://github.com/mridgers/clink/commit/dd5aeb00b1fed954ec12af8e76598e4c74453b88) -- The color scheme in chrisant996/clink already made similarly-motivated changes.\n- [Option to remap ESC to; raw, ctrl-c, or revert-line (line Windows)](https://github.com/mridgers/clink/commit/295a9e4a3628e94b8b889286ae96c9355dc0ad77) -- Conflicts with `terminal.raw_esc` and the chrisant996/clink approach for differentiating <kbd>Esc</kbd> input from the `ESC` character, which allows binding <kbd>Esc</kbd> to anything the user wishes.\n\n<br/>\n<br/>\n\n# APPENDICES\n\n## Known Issues\n- When `echo` is `off`, CMD doesn't print a prompt, and Clink can't which ReadConsoleW calls are for reading the input line.  In theory, Clink could use `RtlCaptureStackBackTrace()` to deduce when a call is for the input line (see comment in `host_cmd::read_console()`), but that API isn't reliable for use in non-debug code.\n- `foo bar a/b/c` will try to expand `a/b/c` as an abbreviated path even if `foo bar` never generates filename matches.  This is a case that Clink can't really get perfectly right anymore, because of the automatic deduction of whether to use file matches.  Overall, this seems acceptable.\n- Readline's `expand_tilde()` doesn't handle embedded `{space}{tilde}{pathsep}` correctly in strings; `rl.expandtilde()` does, and has an optional parameter to use Readline's original style of tilde expansion.\n- Cursor style may behave unexpectedly in a new console window launched from a Windows Terminal console, or in a console window that gets attached to Windows Terminal.  This is because there's no reliable way for Clink to know whether it is running inside Windows Terminal.  Related to [Terminal #7434](https://github.com/microsoft/terminal/issues/7434).\n- Perturbed PROMPT envvar is visible in child processes (e.g. piped shell in various file editors).\n- [#369](https://github.com/chrisant996/clink/issues/369) and [mridgers#531](https://github.com/mridgers/clink/issues/531) anti-malware suites sometimes think Clink is malicious _[This is likely because of the use of CreateRemoteThread and/or hooking OS APIs.  There's no way around that.  Signing the binaries might reduce that, but that's financially expensive and there's no way for an indepedent author to get an EV code signing certificate even if they were willing to pay the thousands of dollars per year.]_\n- [Terminal #10191](https://github.com/microsoft/terminal/issues/10191#issuecomment-897345862) Microsoft Terminal does not allow a console application to know about or access the scrollback history, nor to scroll the screen.  It blocks Clink's scrolling commands, and also the `console.findline()` function and everything else that relies on access to the scrollback history.\n- The auto-updater settings are stored in the profile.  That makes it more cumbersome to control the auto-updater settings if you use multiple Clink profiles.  However, it makes it possible to control the auto-updater settings separately in \"portable installs\" (e.g. on a USB memory stick).\n- Lua code can check if there is real console input available, and can read real console input.  But there is no way for Lua code to check whether there is any input queued for Readline (pending input, pushed input, macro text).  That probably makes sense, since there is (correctly) no way for Lua code to read input queued for Readline.\n\n## Mystery\n- There's some kind of case where `accept-line` doesn't print a newline before returning the input line to CMD.  Maybe somehow involving modmark.  I've hit it several times.  _[But it only happened for a few days and then stopped.  So I wonder if it was actually some kind of regression in Windows Terminal which got fixed.]_\n  - Maybe _after_ printing the transient prompt and `rl_crlf()`, something may have gotten a chance to force `clink.refilterprompt()` and print a normal prompt again out of turn, leaving the cursor at the end of that and thus output from the command began at that cursor position?  A command that I definitely only ran _once_ shows up in a transient prompt, immediately followed by a normal prompt plus input line, then followed by command output immediately at the end of the displayed input line.  But maybe the transient prompt is present because I hit UP then typed `value`, then hit CTRL-X,CTRL-R which prints transient prompt, then I hit UP again and typed `value` again and finally hit ENTER?\n    ```\n    > xx run -long_flags_that_make_command_wrap args -flags value\n\n     reponame  branchname ↓415  12345 14 hours ago             Tue 11:40\n    *> xx run -long_flags_that_make_command_wrap args -flags valueThis XX command is using the *XX Workflow* If you are testing changes in xx client code...\n    ```\n  - Instrumentation seems to indicate it cannot hit `read_console()` again after the `rl_crlf()`, so on-idle coroutines shouldn't be involved.\n  - Could some `onfoo` callback have forced `clink.refilterprompt()` out of turn?\n  - Could this be a race condition versus `reset_stdio_handles()`?  Doesn't appear to be possible, since it goes through `hooked_fwrite`.\n  - It only happened for a few days and then stopped, without any changes in Clink, so maybe the cause was external.\n- Once in a while raw mouse input sequences spuriously show up in the edit line; have only noticed it when the CMD window did not have focus at the time.  _[Not fixed by [bb870fc494](https://github.com/chrisant996/clink/commit/bb870fc49472a64bc1ea9194fe941a4948362d30).]_ _[Have not seen for many weeks.]_ _[Likely due to `ENABLE_VIRTUAL_TERMINAL_INPUT` and largely mitigated by [a8d80b752a](https://github.com/chrisant996/clink/commit/a8d80b752a3c4ff8660debeec0133a009fb04051).]_ _[Root cause is https://github.com/microsoft/terminal/issues/15711]_\n- Mouse input toggling is unreliable in Windows Terminal, and sometimes ends up disallowing mouse input.  _[Might be fixed by [bb870fc494](https://github.com/chrisant996/clink/commit/bb870fc49472a64bc1ea9194fe941a4948362d30)?]_\n- `\"qq\": \"QQ\"` in `.inputrc`, and then type `qa` --> infinite loop.  _[Was occurring in a 1.3.9 development build; but no longer repros in a later 1.3.9 build, and also does not repro in the 1.3.8 release build.]_\n- Windows 10.0.19042.630 seems to have problems when using WriteConsoleW with ANSI escape codes in a powerline prompt in a git repo.  But Windows 10.0.19041.630 doesn't.\n\n## Punt\n- Some wizard for interactively viewing/modifying color settings.  _[This is low priority now that Clink supports .clinktheme color themes.]_\n- Can `git.getstatus()` be simplified even further, so it automatically handles `clink.promptcoroutine()`?  Maybe a `git.getstatusasync()` function?  _[Not at this time:  that could be something to consider for a bunch of various APIs later, but for now scripts should just use the normal `clink.promptcoroutine()` usage pattern.]_\n- Input hinter; need some way for `:gethint()` to work with coroutines and override the optimization and call it again.  _[No:  that would lead to hints cycling through multiple values at the same cursor position.  Once a hint is shown, it shouldn't change until at least another keypress occurs.]_\n- `^>nul echo hello` behaves strangely:  It redirects to `echo` and tries to run `hello`.  What is going on with that syntax?  Any `^` combined with redirection before the command word seems to go awry one way or another.  It looks like a bug in the CMD parser.  _Trying to accurately predict how the bug will behave in all possible contexts seems unrealistic._\n  - `^>xyz` occurring before the command word loses the `xyz` and pulls the _next_ token as the redirection target.\n  - `^2>&1 whatever` fails to duplicate a handle.\n  - `2^>&1 whatever` says `&` was unexpected.\n  - Etc.\n- [#554](https://github.com/chrisant996/clink/issues/554) Consider adding some way to configure Clink to try to run as a \"portable program\" in the sense that it doesn't write to any OS default locations (such as %TEMP%) and instead writes only to places that are specifically configured.  But Lua scripts and programs they launch would need to also have their own special \"portable program\" support to avoid writing to OS default locations (especially %TEMP%).  And what size of temporary files are ok to redirect to a \"portable storage\"?  And who maintains/purges files from the portable storage?  Because Clink runs scripts and other programs, trying to support a \"portable program\" mode is more complicated than it might sound at first.  _[No; it's not feasible.]_\n- Clink's `win_terminal_in` keyboard driver generates some things differently than VT220:\n  - Ideally it might have mapped `CTRL-SPC`->0x00(`^@`), `CTRL--`->0x0d(`^M`), `CTRL-/`->0x1f(`^_`), `CTRL-?`->0x7f(`^?` aka `Rubout`).  But I think Clink's approach is overall better for those keys.\n  - Ubuntu in Windows Terminal receives `^?` for `BACKSPC` and `^H` for `CTRL-BACKSPC`.  But that seems backwards versus what I've always seen on many systems over the decades, so I think Clink should stick with `^H` for `BACKSPC` and `^?` for `CTRL-BACKSPC`.\n  - The `CTRL-DIGIT` keys intentionally produce unique key sequences instead of `CTRL-0` through `CTRL-9` mapping to certain control codes or `1`, `9`, and `0`.\n- [x] The `:` and `=` parsing has a side effect that flags like `-f`_`file`_ are ambiguous: since parsing happens independently from argmatchers, `-fc:\\file` could be `-f` and `c:\\file` or it could be `-fc:` and `\\file`.  _[Too much complexity for too little benefit too rarely.]_\n  - Revisit the possibility of allowing `line_state` to be mutable and argmatchers adjusting it as they parse the input line?  _No; too messy.  E.g. splitting `\"-fc:\\foo bar\"` gets weird because quoting encloses **two adjacent** words._\n  - But an important benefit of the current implementation is that `program_with_no_argmatcher --unknown-flag:filename` is able to do filename completion on `filename`.\n  - Maybe a better solution would be to let argmatchers specify `getopt`-like parsing rules.  Then an argmatcher parser could split the word into `-f` and `c:\\file`, and the second part could be put into a \"pending word\" variable which the parser could check before trying to advance the parser's word index?  And could even potentially recognize `-az` as two valid flags `-a` and `-z` when appropriate (and if either flag is unknown, then color the whole word as unknown).\n  - _**UPDATE:** This is handled now by [`arghelper.lua`](https://github.com/vladimir-kotikov/clink-completions/commit/db9ed236233b8cb81b8874acf84453de2749fd70) via `concat_one_letter_flags=true`._\n- Maybe consider a way to allow piping matches and help into `less` or other external pager?  It would break/interfere with the intended flow and behavior of the `complete` command and it might not work with ANSI codes.  But in [clink-completions#500](https://github.com/vladimir-kotikov/clink-completions/issues/178) a user cited a link where someone assumed that bash would use an external pager like `less`.  _[No; it would break how completion is designed to work, and ANSI escape codes couldn't be used.]_\n- CMD sets `=ExitCode` = the exit code from running a program.  But it doesn't set the envvar for various other things that update CMD's internal exit code variable.  So, Clink's tempfile dance to get `%ERRORLEVEL%` is still necessary.\n- A reliable way for scripts to tell whether they're loaded in `clink set` versus in `cmd`.  _[No.  The only case reported that needed this was trying to access key bindings when the script was loaded, and due to a bug in `rl.getkeybindings()` Clink crashed.  The crash has been fixed (now it returns an empty table instead), and the script is better implemented using `clink.oninject()` anyway.]_\n- Provide some kind of \"line editor tester\" in the `clink lua` interpreter to facilitate writing unit tests for argmatchers?  _[No.  Too many fundamental incompatibilities with the rest of the code.  Completion script authors can do unit testing of their own code, but trying to do end-to-end testing of Clink itself from within Clink itself with being integrated with CMD?  Hard no.]_\n- [#387](https://github.com/chrisant996/clink/issues/387) requests adding an option to put the cursor at the end of the search text when using `history-substring-search-backward` (and `-forward`).  But that diverges even more from Readline, and I'm actively trying to instead converge as much as possible.  _[The request should be made against bash/Readline.  If it gets implemented there, Clink will be able to pick up the change.]_\n- Consider not redrawing while resizing the terminal, if there is no RPROMPT?  Maybe just flag that a full redraw needs to happen, and defer it until the next time a redraw is normally requested?  _[Defer any further changes to terminal resize behavior until there is further feedback.]_\n- Ctrl-Break does not interrupt Lua scripts during `onendline` or `onfilterinput`.  The Lua engine doesn't support being interrupted; it only supports the application being terminated.  The engine could be modified to check for a `volatile` flag, but that would need to be done carefully to ensure it doesn't interrupt Clink's own internal Lua scripts.  _[Not needed; it's very rare, and hooking up `os.issignaled()` should be sufficient, though it does require scripts to explicitly support being interrupted.]_\n- Some way for `history.save false` to not do any disk IO for history, but still enable `clink history` to show the session's history (probably using Shared Memory).  _[Unfavorable cost vs benefit; expensive and complicated, while offering very little benefit beyond what could be achieved by simply applying ACLs and/or encryption to the profile directory, which is something that is best done externally from Clink.]_\n- Coroutines can call `clink.refilterprompt()` and it immediately refilters while in the coroutine.  Should it instead set a flag to refilter after the coroutines have yielded?  _[It should be fine because only `line_editor_impl` has an input idle callback that runs Lua coroutines.]_\n- Show time stamps in history popup?  _[Gets complicated because of horizontal scrolling.  Too many edge cases; the benefit is not worth the cost.]_\n- Some way to push keys?  (Push keys to Clink; not to other processes.)  _[Can use `WScript.Shell.SendKeys` when that's needed.]_\n- Should coroutines really be able to make Readline redraw immediately?  Should instead set a flag that the main coroutine responds to when it gains control again?  _[For now it seems fine; coroutines run during idle when waiting for input, so it should be safe to let the display code run.]_\n- Readline should pass the timeout into the `rl_input_available_hook` callback function.  _[Not needed; the timeout is only for systems that need to use `select()`, and we don't need to.]_\n- Fix order that isearch executes the extra pending command in Callback Mode.  REPRO: `^R` x `Right` p ==> \"p\" is inserted, _THEN_ `Right` is executed.  _[Readline Callback Mode bug that only malfunctions when `isearch-terminators` omits ESC; not worth tracking down.]_\n- Maybe redefine keyboard driver for Alt+(mod)+Fn key sequences to be like Ubuntu?  _[Not worth the disruptive impact unless it causes some problem.]_\n- Readline doesn't handle certain display cases correctly.  Rather than try to fix the Readline display, I've built an alternative display implementation.  Here are some notes on the Readline issues:\n  - A prompt exactly the width of the terminal seems to add a newline between the prompt and the input line, which might result from a missing `_rl_term_autowrap` test.\n    - `_rl_vis_botlin` ends up with an incorrect value.\n    - Could commit d4f48721ea22258b7239748d0d78d843ba2820f1 be related to that, or maybe it didn't fully fix the problem?\n    - Run `clink drawtest --width 31 --emulation emulate` to observe.\n    - Maybe Readline doesn't emit `SPC CR` if the prompt ends exactly at the screen width?\n  - Readline is trying to use simple arithmetic to figure out how to convert byte position to absolute position, but the arithmetic is wrong and the data structures don't facilitate solving the issues.\n    - E.g. a prompt whose last line wraps TWICE and has one UTF8 multibyte character in the FIRST wrapped segment; cursor position on the final line is offset wrongly.\n      - It looks like this line `nleft = cpos_buffer_position - pos;` is trying to reset `nleft` to only include positions on the current screen row, which then throws off the `woff` arithmetic.  It could maybe use modulus on the overall position, but that wouldn't account for double-wide characters that don't fit at the end of a screen row and wrap \"early\".\n      - This code might be relevant:\n          ```c\n          /* This assumes that all the invisible characters are split\n             between the first and last lines of the prompt, if the\n             prompt consumes more than two lines. It's usually right */\n          /* XXX - not sure this is ever executed */\n          _rl_last_c_pos -= (wrap_offset-prompt_invis_chars_first_line);\n          ```\n    - E.g. a prompt whose last line wraps AT the screen width and contains multibyte UTF8 characters; cursor position near the beginning of the input line gets positioned incorrectly.\n      - `_rl_last_c_pos` is negative on entry to `rl_redisplay()`.\n      - Because the \"yet another special case\" logic is triggered incorrectly, and adjusts cpos incorrectly, which carries forward to future calls.\n      - After disabling that logic, then the cursor still goes wrong when crossing the `woff` boundary.\n        - Need another iDNA for that...\n- [x] Readline 8.1 has slight bug in `update_line`; type `c` then `l`, and it now identifies **2** chars (`cl`) as needing to be displayed; seems like the diff routine has a bug with respect to the new faces capability; it used to only identify `l` as needing to be displayed.  _[Moot; Clink no longer uses Readline's display implementation.]_\n- Optional feature to simplify auto-path-separator after completion, like in `zsh`:  highlight `\\` in a color, and if <kbd>Space</kbd> is the next input then replace the `\"\\\"` with `\" \"`.  _[Not worth it; there is very little value, and there are many side effects, e.g. wrt autosuggest.  I got excited at first, but then I realized what I really need is a better way to signal for `menu-complete` to accept a directory it's inserted and start a new completion.  And then I realized, since completions are normalized as of commit 9ec9eb1b69 in v1.1.24, typing <kbd>&bsol;</kbd><kbd>Tab</kbd> goes from `foo\\` to `foo\\\\` to `foo\\bar`, so the scenario I had in mind is already fully solved in a simple and reliable way.]_\n- Postpone:  Ideally the updater could have a way to run an embedded script in the newly installed version, to do any needed finalization.  But there isn't really a way to reliably determine whether it needs to run, nor to handle errors that may occur.  And a more reliable mechanism is to do upgrade steps on the next inject.\n- There's no straightforward way to let Lua scripts change the current directory and have CMD pick up the changed state.  CMD maintains internal private state about what directory to use when running commands and programs.  Running `cd` is the only way to alter CMD's internal private state.\n- Make `clink-show-help` call out prefix key sequences, since they can behave in a confusing manner?  _[Complex present in a non-confusing way, and very rare to actually occur.  Not worth the investment at this time.]_\n- Maybe deal with timeouts in keyboard input?  Could differentiate <kbd>Esc</kbd> versus <kbd>Esc</kbd>,<kbd>Esc</kbd> but is very dangerous because it makes input processing unpredictable depending on the CPU availability.  _[Too dangerous.  And turned out to not be the issue.]_\n- Ability to rearrange and edit popup list items?  _[Can't realistically rearrange or edit history, due to how the history file format works.]_\n- Using a thread to run globbers could let suggestions uses matches even with UNC paths.  _[But **ONLY** globbers would be safe; if anything else inside match generators tries to access the UNC path then it could hang.  So it's not really safe enough.]_\n- Make scrolling key bindings work at the pager prompt.  Note that it would need to revise how the scroll routines identify the bottom line (currently they use Readline's bottom line, but the pager displays output past that point).  _[Low value; also, Windows Terminal has scrolling hotkeys that supersede Clink, and it can scroll regardless whether prompting for input.  Further, Windows Terminal is deprecating the ability for an app to scroll the screen anyway.]_\n- Is it a problem that `update_internal()` gets called once per char in a key sequence?  Maybe it should only happen after a key that finishes a key binding?  _[Doesn't cause any noticeable issues.]_\n- Provide API to show an input box?  But make it fail if used from outside a \"luafunc:\" macro.  _[Questionable usage pattern; just make the \"luafunc:\" macro invoke a standalone program (or even standalone Lua script) that can accept input however it likes.]_\n- Classify queued input lines?  _[Low value, high cost; the module layer knows about coloring, but queued lines are handled by the host layer without ever reaching the module layer.  Also, the queued input lines (\"More?\") do not adhere to the current parsing assumptions; it would become necessary to carry argmatcher state across lines.  Also, argmatchers do not currently understand `(` or `)`.]_\n- Support this quirk, or not?  <kbd>Esc</kbd> in conhost clears the line but does not reset the history index, but in Clink it resets the history index.  Affects F1, F2, F3, F5, F8.  _[Defer until someone explains why it's important to them.]_\n- Additional ANSI escape codes.\n  - `ESC[?47h` and `ESC[?47l` (save and restore screen) -- not widely supported, so I can't use it, and it's not worth emulating.  Which makes me very sad; no save + show popup + restore. 😭\n  - `ESC[?1049h` and `ESC[?1049l` (enable and disable alternative buffer) -- not worth using or emulating; there's no way to copying between screens, so it can't help for save/popup/restore.\n- Marking mode in-app is not realistic:\n  - Windows Terminal is essentially dropping support for console APIs that read/write the screen buffer, particularly the scrollback buffer.\n  - Different terminal hosts have different capabilities and limitations, so building a marking mode that behaves reasonably across all/most terminal hosts isn't feasible.\n  - One of the big opportunities for terminal hosts is to provide enhancements to marking and copy/paste.\n  - So it seems best to leave marking and copy/paste as something for terminal hosts to provide.\n- Lua API to copy text to clipboard (plain text or HTML) is not realistic, for the same technical reasons as for marking mode.\n- Would be nice to complete \"%ENVVAR%\\*\" by internally expanding ENVVAR for collecting matches, but not expanding it in the editing line.  However, it's difficult to make that work reasonably in conjunction with path normalization.\n- [ConsoleZ](https://github.com/cbucher/console) sometimes draws the prompt in the wrong color:  scroll up, then type => the prompt is drawn in the input color instead of in the default color.  It doesn't happen in conhost or ConEmu or Windows Terminal.  Debugging indicates Clink is _not_ redrawing the prompt, so it's entirely an internal issue inside ConsoleZ.\n- Max input line length:\n  - CMD has a max input buffer size of 8192 WCHARs including the NUL terminator.\n  - ReadConsole does not allow more input than can fit in the input buffer size.\n  - Readline allows infinite input size, and has no way to limit it.\n  - There is a truncation problem here that does not exist without Clink.\n  - However, even CMD itself silently fails to run an inputted command over 8100 characters, despite allowing 8191 characters to be input.\n  - So I'm comfortable punting this for now.\n- [x] A way to disable/enable clink once injected.  _[Why?]_ _[Available via [noclink.cmd](https://github.com/chrisant996/clink-gizmos/commit/5126152d4ea98bf2d4470d13a34f8f88645a29d5) in [clink-gizmos](https://github.com/chrisant996/clink-gizmos)]_\n- [#486](https://github.com/mridgers/clink/issues/486) **Ctrl+C** doesn't always work properly _[Unrelated to Clink; the exact same behavior occurs with plain cmd.exe]_\n\n---\nChris Antos - sparrowhawk996@gmail.com\n"
        },
        {
          "name": "_default_inputrc",
          "type": "blob",
          "size": 0.537109375,
          "content": "# When this file is named \"default_inputrc\" and is in the binaries\n# directory or profile directory, it provides enhanced default settings.\n\n# Override the built-in Readline defaults with ones that provide a more\n# enhanced Clink experience.\n\nset colored-completion-prefix                   on\nset colored-stats                               on\nset mark-symlinked-directories                  on\nset completion-auto-query-items                 on\nset history-point-at-end-of-anchored-search     on\nset search-ignore-case                          on\n\n"
        },
        {
          "name": "_default_settings",
          "type": "blob",
          "size": 1.390625,
          "content": "# When this file is named \"default_settings\" and is in the binaries\n# directory or profile directory, it provides enhanced default settings.\n\n# Override built-in default settings with ones that provide a more\n# enhanced Clink experience.\n\nclink.default_bindings            = windows\ncmd.ctrld_exits                   = False\ncolor.arginfo                     = sgr 38;5;172\ncolor.argmatcher                  = sgr 1;38;5;40\ncolor.cmd                         = bold\ncolor.cmdredir                    = sgr 38;5;172\ncolor.cmdsep                      = sgr 38;5;135\ncolor.comment_row                 = sgr 38;5;87;48;5;18\ncolor.description                 = sgr 38;5;39\ncolor.doskey                      = sgr 1;38;5;75\ncolor.executable                  = sgr 1;38;5;33\ncolor.filtered                    = bold\ncolor.flag                        = sgr 38;5;117\ncolor.hidden                      = sgr 38;5;160\ncolor.histexpand                  = sgr 97;48;5;55\ncolor.horizscroll                 = sgr 38;5;16;48;5;30\ncolor.input                       = sgr 38;5;214\ncolor.readonly                    = sgr 38;5;28\ncolor.selected_completion         = sgr 7\ncolor.selection                   = sgr 38;5;16;48;5;179\ncolor.unrecognized                = sgr 38;5;203\nhistory.max_lines                 = 25000\nhistory.time_stamp                = show\nmatch.expand_envvars              = True\nmatch.substring                   = True\n\n"
        },
        {
          "name": "bld.cmd",
          "type": "blob",
          "size": 8.21484375,
          "content": "@echo off\nsetlocal\n\nset EC=echo\nset LINE=\u001b(0\nset ASC=\u001b(B\nset BOLD=\u001b[1m\nset UNDER=\u001b[4m\nset NEG=\u001b[7m\nset POS=\u001b[27m\nset CYAN=\u001b[36m\nset NORM=%ASC%\u001b[0m\n\nset __debug_config=Debug\nset __release_config=Release\nset __final_config=Final\nset __x86_platform=Win32\nset __x64_platform=x64\nset __arm64_platform=arm64\n\nset __AMD64=\nset __MULTICPU=-m:4\nset __STOPONERROR=\nset __INSTALL=\nset __CONFIG=%__debug_config%\nset __PLATFORM=%__x64_platform%\nset __TARGETS=\nset __SLN=\nset __MSBUILD=\n\nset __DEFAULTCONFIG=%__CONFIG%\nset __DEFAULTPLATFORM=%__PLATFORM%\n\nrem -- Try to find MSBuild.\n\nfor /f %%a in ('where msbuild.exe 2^>nul') do (\n\tset __MSBUILD=\"%%a\"\n\tgoto :gotmsbuild\n)\n\nset __MSBUILD=\"%ProgramFiles%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles%\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\17.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles%\\MSBuild\\17.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\12.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\n\n:gotmsbuild\n\nrem -- Try to find solution file.\n\nif exist *.sln (\n\tfor %%a in (*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2022\\*.sln (\n\tfor %%a in (.build\\vs2022\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2019\\*.sln (\n\tfor %%a in (.build\\vs2019\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2017\\*.sln (\n\tfor %%a in (.build\\vs2017\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n)\n\n:gotsln\ngoto :doarg\n\n:findsln\nif exist %__SLN% (\n\tset __SLN=\"%__SLN%\"\n\tgoto :nextarg\n) else if exist %__SLN%.sln (\n\tset __SLN=\"%__SLN%.sln\"\n\tgoto :nextarg\n) else if exist .build\\vs2022\\%__SLN% (\n\tset __SLN=\".build\\vs2022\\%__SLN%\"\n\tset __MSBUILD=\"%ProgramFiles%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n) else if exist .build\\vs2022\\%__SLN%.sln (\n\tset __SLN=\".build\\vs2022\\%__SLN%.sln\"\n\tset __MSBUILD=\"%ProgramFiles%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n) else if exist .build\\vs2019\\%__SLN% (\n\tset __SLN=\".build\\vs2019\\%__SLN%\"\n\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n) else if exist .build\\vs2019\\%__SLN%.sln (\n\tset __SLN=\".build\\vs2019\\%__SLN%.sln\"\n\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n) else if exist .build\\vs2017\\%__SLN% (\n\tset __SLN=\".build\\vs2017\\%__SLN%\"\n\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n) else if exist .build\\vs2017\\%__SLN%.sln (\n\tset __SLN=\".build\\vs2017\\%__SLN%.sln\"\n\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\n\tgoto :nextarg\n)\necho Unable to find solution '%__SLN%'.\nexit /b 1\n\nrem -- Get next arg.\n\n:nextarg\nshift\n\n:doarg\nif \"%1\" == \"?\" goto :usage\nif \"%1\" == \"??\" goto :msbuildusage\nif \"%1\" == \"/?\" goto :usage\nif \"%1\" == \"/??\" goto :msbuildusage\nif \"%1\" == \"-?\" goto :usage\nif \"%1\" == \"-??\" goto :msbuildusage\nif \"%1\" == \"/h\" goto :usage\nif \"%1\" == \"-h\" goto :usage\nif \"%1\" == \"/help\" goto :usage\nif \"%1\" == \"-help\" goto :usage\nif \"%1\" == \"--help\" goto :usage\nif \"%1\" == \"/x86\" ( set __PLATFORM=%__x86_platform%&goto :nextarg )\nif \"%1\" == \"/win32\" ( set __PLATFORM=%__x86_platform%&goto :nextarg )\nif \"%1\" == \"/x64\" ( set __PLATFORM=%__x64_platform%&goto :nextarg )\nif \"%1\" == \"/amd64\" ( set __PLATFORM=%__x64_platform%&goto :nextarg )\nif \"%1\" == \"/arm64\" ( set __PLATFORM=%__arm64_platform%&goto :nextarg )\nif \"%1\" == \"/dbg\" ( set __CONFIG=%__debug_config%&goto :nextarg )\nif \"%1\" == \"/debug\" ( set __CONFIG=%__debug_config%&goto :nextarg )\nif \"%1\" == \"/fin\" ( set __CONFIG=%__final_config%&goto :nextarg )\nif \"%1\" == \"/final\" ( set __CONFIG=%__final_config%&goto :nextarg )\nif \"%1\" == \"/rel\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/release\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/shp\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/ship\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/single\" ( set __MULTICPU=&goto :nextarg )\nif \"%1\" == \"--single\" ( set __MULTICPU=&goto :nextarg )\nif \"%1\" == \"/multi\" ( set __MULTICPU=-m:6&goto :nextarg )\nif \"%1\" == \"--multi\" ( set __MULTICPU=-m:6&goto :nextarg )\nif \"%1\" == \"/t\" ( set __TARGETS=%__TARGETS% -t:%2&shift&goto :nextarg )\nif \"%1\" == \"-t\" ( set __TARGETS=%__TARGETS% -t:%2&shift&goto :nextarg )\nif \"%1\" == \"/target\" ( set __TARGETS=%__TARGETS% -t:%2&shift&goto :nextarg )\nif \"%1\" == \"--target\" ( set __TARGETS=%__TARGETS% -t:%2&shift&goto :nextarg )\nif \"%1\" == \"/sln\" ( set __SLN=%2&shift&goto :findsln )\nif \"%1\" == \"--sln\" ( set __SLN=%2&shift&goto :findsln )\n:notminus\n\nset __ARGS=\n:appendarg\nif not \"%1\" == \"\" set __ARGS=%__ARGS% %1&shift&goto appendarg\n\nrem -- Try to run MSBuild with the solution file.\n\nif x%__SLN% == x echo error: Unable to find .sln file.&goto :eof\nif x%__MSBUILD% == x echo error: Unable to find MSBuild.&goto :eof\n\nset __SLNNAME=%__SLN%\ncall :setslnname %__SLN%\n\nrem echo.\n%EC% %BOLD%%NEG% Building %__SLNNAME% %__PLATFORM% %__CONFIG% %POS%%NORM%\n%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=%__CONFIG% -p:Platform=%__PLATFORM% %__TARGETS% %__ARGS% %__SLN%\nif errorlevel 1 goto :eof\n\ngoto :eof\n\nrem -- Print usage info.\n\n:usage\n\nset __ISX86DEFAULT=\nset __ISX64DEFAULT=\nset __ISARM64DEFAULT=\nset __ISDEBUGDEFAULT=\nset __ISRELEASEDEFAULT=\nset __ISFINALDEFAULT=\nset __DEFAULTMARKER= %CYAN%(default)%NORM%\nif %__DEFAULTPLATFORM% == %__x86_platform% set __ISX86DEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTPLATFORM% == %__x64_platform% set __ISX64DEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTPLATFORM% == %__arm64_platform% set __ISARM64DEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__debug_config% set __ISDEBUGDEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__release_config% set __ISRELEASEDEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__final_config% set __ISFINALDEFAULT=%__DEFAULTMARKER%\n\n%EC% %BOLD%Usage:%NORM%  BLD [/dbg /rel /fin /x86 /x64 /arm64 /multi /single] [msbuild_options]\necho.\necho Builds %__DEFAULTCONFIG% %__DEFAULTPLATFORM% by default.\necho.\necho   /x86          Builds x86%__ISX86DEFAULT%.\necho   /x64          Builds x64%__ISX64DEFAULT%.\necho   /arm64        Builds arm64%__ISARM64DEFAULT%.\necho   /dbg          Builds DEBUG%__ISDEBUGDEFAULT%.\necho   /rel          Builds RELEASE%__ISRELEASEDEFAULT%.\necho   /fin          Builds FINAL%__ISFINALDEFAULT%.\necho.\necho   /multi        Multi processor build %CYAN%(default)%NORM%.\necho   /single       Single processor build.\necho.\necho   /t target     Build target.\necho.\necho.  /??           Show MSBuild help.\necho.\necho Aliases:\necho   /x86          Or /win32.\necho   /x64          Or /amd64.\necho   /dbg          Or /debug.\necho   /rel          Or /release or /shp or /ship.\necho   /fin          Or /final.\necho.\nif x%__SLN% == x echo warning: Unable to find .sln file.\nif not x%__SLN% == x echo Using SLN file:  %__SLN%\nif not exist %__MSBUILD% echo warning: Unable to find MSBuild.\nif exist %__MSBUILD% echo Using MSBuild:   %__MSBUILD%\ngoto :eof\n\n:msbuildusage\n%__MSBUILD% -help\ngoto :eof\n\n:setslnname\nif not \"%~n1\" == \"\" set __SLNNAME=%~n1\ngoto :eof\n\n"
        },
        {
          "name": "bldall.cmd",
          "type": "blob",
          "size": 7.8935546875,
          "content": "@echo off\nsetlocal\n\nset EC=echo\nset CP=cp.exe /uy\nset XCOPY=xcopy.exe /cdfiky\nset LINE=\u001b(0\nset ASC=\u001b(B\nset BOLD=\u001b[1m\nset UNDER=\u001b[4m\nset NEG=\u001b[7m%ASC%\nset POS=\u001b[27m%LINE%\nset CYAN=\u001b[36m\nset NORM=%ASC%\u001b[0m\n\nset __debug_config=Debug\nset __release_config=Release\nset __final_config=Final\nset __x86_platform=Win32\nset __x64_platform=x64\n\nset __X86=\nset __AMD64=\nset __DEBUG=\nset __RELEASE=\nset __FINAL=\nset __MULTICPU=-m:4\nset __STOPONERROR=\nset __INSTALL=\nset __INSTALLDIR=c:\\wbin\\clink\nset __SLN=\nset __MSBUILD=\n\nrem -- Try to find MSBuild.\n\nfor /f %%a in ('where msbuild.exe 2^>nul') do (\n\tset __MSBUILD=\"%%a\"\n\tgoto :gotmsbuild\n)\n\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\17.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\Current\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\"%ProgramFiles(x86)%\\MSBuild\\12.0\\Bin\\MSBuild.exe\"\nif exist %__MSBUILD% goto gotmsbuild\nset __MSBUILD=\n\n:gotmsbuild\n\nrem -- Try to find solution file.\n\nif exist *.sln (\n\tfor %%a in (*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2022\\*.sln (\n\tfor %%a in (.build\\vs2022\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2019\\*.sln (\n\tfor %%a in (.build\\vs2019\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n) else if exist .build\\vs2017\\*.sln (\n\tfor %%a in (.build\\vs2017\\*.sln) do (\n\t\tset __SLN=\"%%a\"\n\t\tset __MSBUILD=\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\"\n\t\tgoto :gotsln\n\t)\n)\n\n:gotsln\ngoto :doarg\n\nrem -- Get next arg.\n\n:nextarg\nshift\n\n:doarg\nif \"%1\" == \"/x86\" ( set __X86=1&goto :nextarg )\nif \"%1\" == \"/win32\" ( set __X86=1&goto :nextarg )\nif \"%1\" == \"/x64\" ( set __AMD64=1&goto :nextarg )\nif \"%1\" == \"/amd64\" ( set __AMD64=1&goto :nextarg )\nif \"%1\" == \"/dbg\" ( set __DEBUG=1&goto :nextarg )\nif \"%1\" == \"/debug\" ( set __DEBUG=1&goto :nextarg )\nif \"%1\" == \"/rel\" ( set __RELEASE=1&goto :nextarg )\nif \"%1\" == \"/release\" ( set __RELEASE=1&goto :nextarg )\nif \"%1\" == \"/shp\" ( set __RELEASE=1&goto :nextarg )\nif \"%1\" == \"/ship\" ( set __RELEASE=1&goto :nextarg )\nif \"%1\" == \"/fin\" ( set __FINAL=1&goto :nextarg )\nif \"%1\" == \"/final\" ( set __FINAL=1&goto :nextarg )\nrem if \"%1\" == \"-q\" ( set __MULTICPU=-m:1&set __STOPONERROR=yes&goto :nextarg )\nif \"%1\" == \"install\" ( set __INSTALL=final&set __FINAL=1&goto :nextarg )\nif \"%1\" == \"install:debug\" ( set __INSTALL=debug&set __DEBUG=1&goto :nextarg )\nif \"%1\" == \"install:release\" ( set __INSTALL=release&set __RELEASE=1&goto :nextarg )\nif \"%1\" == \"install:final\" ( set __INSTALL=final&set __FINAL=1&goto :nextarg )\n\nif not \"%1\" == \"\" (\n\t%EC% %BOLD%Usage:%NORM%  BLDALL [/x86 /amd64 /dbg /shp] [install]\n\techo.\n\techo   By default, builds DEBUG for both x86 and x64.\n\techo.\n\techo Options:\n\techo   /x86             Build x86.\n\techo   /x64             Build x64.\n\techo   /dbg             Build DEBUG.\n\techo   /rel             Build RELEASE.\n\techo   /fin             Build FINAL.\nrem\techo   -q               Quit immediately on any error.\n\techo   install          Copy FINAL build results to the install directory.\n\techo   install:debug    Copy DEBUG build results to the install directory.\n\techo   install:release  Copy RELEASE build results to the install directory.\n\techo   install:final    Copy FINAL build results to the install directory.\n\techo.\n\techo Aliases:\n\techo   /x86             Or /win32.\n\techo   /x64             Or /amd64.\n\techo   /dbg             Or /debug.\n\techo   /rel             Or /release or /shp or /ship.\n\techo   /fin             Or /final.\n\techo.\n\tif x%__SLN% == x echo warning: Unable to find VS2022, VS2019, or VS2017 clink.sln file.\n\tif not x%__SLN% == x echo Using SLN file:  %__SLN%\n\tif not exist %__MSBUILD% echo warning: Unable to find VS2022, VS2019, or VS2017 Enterprise installation.\n\tif exist %__MSBUILD% echo Using MSBuild:   %__MSBUILD%\n\tgoto :eof\n)\n\nif \"%__X86%\" == \"\" ( if \"%__AMD64%\" == \"\" (set __X86=1&set __AMD64=1) )\nif \"%__DEBUG%\" == \"\" ( if \"%__RELEASE%\" == \"\" ( if \"%__FINAL%\" == \"\" (set __DEBUG=1) ) )\n\nif x%__SLN% == x echo error: Unable to find .sln file.&goto :eof\nif not exist %__MSBUILD% echo error: Unable to find MSBuild.&goto :eof\n\nset __SLNNAME=%__SLN%\ncall :setslnname %__SLN%\n\nif not \"%__X86%\" == \"\" ( if not \"%__DEBUG%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% x86 DEBUG %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Debug;Platform=Win32 %__SLN%\n\tif \"%__AMD64%\" == \"\" (\n\t\tif errorlevel 1 goto :eof\n\t)\n) )\n\nif not \"%__AMD64%\" == \"\" ( if not \"%__DEBUG%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% amd64 DEBUG %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Debug;Platform=x64 %__SLN%\n\tif errorlevel 1 goto :eof\n) )\n\nif not \"%__X86%\" == \"\" ( if not \"%__RELEASE%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% x86 RELEASE %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Release;Platform=Win32 %__SLN%\n\tif \"%__AMD64%\" == \"\" (\n\t\tif errorlevel 1 goto :eof\n\t)\n) )\n\nif not \"%__AMD64%\" == \"\" ( if not \"%__RELEASE%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% amd64 RELEASE %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Release;Platform=x64 %__SLN%\n\tif errorlevel 1 goto :eof\n) )\n\nif not \"%__X86%\" == \"\" ( if not \"%__FINAL%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% x86 FINAL %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Final;Platform=Win32 %__SLN%\n\tif \"%__AMD64%\" == \"\" (\n\t\tif errorlevel 1 goto :eof\n\t)\n) )\n\nif not \"%__AMD64%\" == \"\" ( if not \"%__FINAL%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% Building %__SLNNAME% amd64 FINAL %POS%%NORM%\n\t%__MSBUILD% -nologo -v:minimal %__MULTICPU% -p:Configuration=Final;Platform=x64 %__SLN%\n\tif errorlevel 1 goto :eof\n) )\n\nset __INSTALLTYPE=\nif \"%__INSTALL%\" == \"debug\" ( if not \"%__DEBUG%\" == \"\" ( if not \"%__X86%\" == \"\" ( if not \"%__AMD64%\" == \"\" (\n\tset __INSTALLTYPE=DEBUG\n) ) ) )\nif \"%__INSTALL%\" == \"release\" ( if not \"%__RELEASE%\" == \"\" ( if not \"%__X86%\" == \"\" ( if not \"%__AMD64%\" == \"\" (\n\tset __INSTALLTYPE=RELEASE\n) ) ) )\nif \"%__INSTALL%\" == \"final\" ( if not \"%__FINAL%\" == \"\" ( if not \"%__X86%\" == \"\" ( if not \"%__AMD64%\" == \"\" (\n\tset __INSTALLTYPE=FINAL\n) ) ) )\n\nif not \"%__INSTALLTYPE%\" == \"\" (\n\techo.\n\t%EC% %BOLD%%NEG% INSTALLING %__INSTALLTYPE% OUTPUTS %POS%%NORM%\n\tif \"%USERNAME%\" == \"%chrisant%\" (\n\t\t%CP% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink.bat;clink.lua;clink_x*.exe;clink_x*.pdb;clink_dll_x*.dll;clink_dll_x*.pdb \"%__INSTALLDIR%\"\n\t\t%CP% .build\\docs\\clink.html \"%__INSTALLDIR%\"\n\t) else (\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink.bat \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink.lua \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink_x*.exe \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink_x*.pdb \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink_dll_x*.dll \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\vs2022\\bin\\%__INSTALLTYPE%\\clink_dll_x*.pdb \"%__INSTALLDIR%\"\n\t\t%XCOPY% .build\\docs\\clink.html \"%__INSTALLDIR%\"\n\t)\n)\n\ngoto :eof\n\n:setslnname\nif not \"%~n1\" == \"\" set __SLNNAME=%~n1\ngoto :eof\n\n"
        },
        {
          "name": "clink",
          "type": "tree",
          "content": null
        },
        {
          "name": "detours",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "embed.lua",
          "type": "blob",
          "size": 13.2861328125,
          "content": "--------------------------------------------------------------------------------\nlocal function exec(str)\n    -- Premake5 bug (see docs/premake5.lua)\n    local x = path.normalize\n    path.normalize = function (y) return y end\n    os.execute(str)\n    path.normalize = x\nend\n\n--------------------------------------------------------------------------------\nlocal function spairs(t, order)\n    -- collect the keys\n    local keys = {}\n    for k in pairs(t) do keys[#keys+1] = k end\n\n    -- if order function given, sort by it by passing the table and keys a, b,\n    -- otherwise just sort the keys\n    if order then\n        table.sort(keys, function(a,b) return order(t, a, b) end)\n    else\n        table.sort(keys)\n    end\n\n    -- return the iterator function\n    local i = 0\n    return function()\n        i = i + 1\n        if keys[i] then\n            return keys[i], t[keys[i]]\n        end\n    end\nend\n\n--------------------------------------------------------------------------------\nlocal function compare_values(t, a, b)\n    return t[a] < t[b]\nend\n\n--------------------------------------------------------------------------------\nlocal function do_embed(debug_info)\n    -- Find the Lua compilers.\n    local archs = {\n        [\"64\"] = { luac = os.matchfiles(\".build/*/bin/final/luac_x64.exe\")[1] },\n        [\"86\"] = { luac = os.matchfiles(\".build/*/bin/final/luac_x86.exe\")[1] },\n    }\n\n    if debug_info == nil then\n        debug_info = true -- Include debug info by default.\n    end\n\n    local function strip(file)\n        return (debug_info or path.getname(file) == \"error.lua\") and \"\" or \" -s\"\n    end\n\n    for name, arch in spairs(archs) do\n        if not arch.luac then\n            error(\"Unable to find Lua compiler binary (x\"..name..\" final).\")\n        end\n\n        arch.luac = arch.luac:gsub(\"/\", \"\\\\\")\n    end\n\n    local manifests = os.matchfiles(\"clink/**/_manifest.lua\")\n    for _, manifest in spairs(manifests, compare_values) do\n        local root = path.getdirectory(manifest)\n\n        out = path.join(root, \"lua_scripts.cpp\")\n        print(\"\\n\"..out)\n        out = io.open(out, \"w\")\n        out:write(\"#include \\\"pch.h\\\"\\n\")\n        out:write(\"#include <core/embedded_scripts.h>\\n\")\n        out:write(\"#if defined(CLINK_USE_EMBEDDED_SCRIPTS)\\n\")\n\n        -- Write each sanitised script to 'out' as a global variable.\n        local symbols = {}\n        local manifest = dofile(manifest)\n        for _, file in spairs(manifest.files, compare_values) do\n            local name = path.getname(file)\n            local symbol = manifest.name .. \"_\" .. name:gsub(\"%.\", \"_\") .. \"_script\"\n            table.insert(symbols, symbol)\n\n            file = path.join(root, file)\n            print(\"   \"..file)\n\n            for archname, arch in spairs(archs) do\n                out:write(\"#if ARCHITECTURE == \"..archname..\"\\n\")\n\n                -- Compile the input Lua script to binary.\n                local dbgname = \"@~clink~/\"..manifest.name..\"/\"..name -- To enable detecting \"built in\" scripts.\n                exec(arch.luac..strip(file)..\" -R \"..dbgname..\" -o .build/embed_temp \"..file)\n                local bin_in = io.open(\".build/embed_temp\", \"rb\")\n                local bin_data = bin_in:read(\"*a\")\n                bin_in:close()\n                os.remove(\".build/embed_temp\")\n\n                local crlf_counter = 0\n                out:write(\"const uint8 \" .. symbol .. \"_[] = {\\n\")\n                for byte in string.gmatch(bin_data, \".\") do\n                    out:write(string.format(\"0x%02x, \", byte:byte()))\n                    crlf_counter = crlf_counter + 1\n                    if crlf_counter > 16 then\n                        out:write(\"\\n\")\n                        crlf_counter = 0\n                    end\n                end\n                out:write(\"};\\n\")\n                out:write(\"extern const uint8* const \"..symbol..\" = \"..symbol..\"_;\\n\")\n                out:write(\"extern const int32 \"..symbol..\"_len = sizeof(\"..symbol..\"_);\\n\")\n\n                out:write(\"#endif // ARCHITECTURE == \"..archname..\"\\n\")\n\n                print(\"      x\"..archname..\" : \"..tostring(#bin_data)..\" bytes\")\n            end\n        end\n\n        -- Some debug stuff so loose files can be loaded in debug builds.\n        symbols = {}\n        out:write(\"#else\\n\")\n        for _, file in spairs(manifest.files, compare_values) do\n            local symbol = path.getname(file):gsub(\"%.\", \"_\")\n            symbol = manifest.name .. \"_\" .. symbol .. \"_file\"\n            table.insert(symbols, symbol)\n\n            file = file:gsub(\"\\\\\", \"/\")\n            out:write(\"extern const char* const \" .. symbol .. \" = CLINK_BUILD_ROOT \\\"/../../\" .. root .. \"/\" .. file .. \"\\\";\\n\")\n        end\n\n        out:write(\"#endif\\n\")\n        out:close()\n    end\nend\n\n--------------------------------------------------------------------------------\nlocal function escape_cpp(text)\n    return text:gsub(\"([?\\\"\\\\])\", \"\\\\%1\")\nend\n\n--------------------------------------------------------------------------------\nlocal function write_case(out, line, count, note)\n    local s = \"\\\"\" .. escape_cpp(line) .. \"\\\",  \"\n    local pad = 56 - #s\n    if pad > 0 then\n        s = s .. string.rep(\" \", pad)\n    end\n    note = note and (\"  **\" .. note .. \"**\") or \"\"\n    out:write(s .. \"// case #\" .. count .. note .. \"\\n\")\nend\n\n--------------------------------------------------------------------------------\nlocal function do_wildmatch()\n    local expected = 219\n    local count = 0\n\n    local out = \"wildmatch/tests/t3070-wildmatch.i\"\n    local special1 = [==[match 1 1 '\\' '[\\\\]']==]\n    local special2 = [==[match 1 1 '\\' '[\\\\,]']==]\n    local special3 = [==[match 1 1 '\\' '[[-\\]]']==]\n\n    print(\"\\n\"..out)\n\n    local file = io.open(\"wildmatch/tests/t3070-wildmatch.sh\", \"r\")\n    out = io.open(out, \"w\")\n\n    local header = {\n        \"// Generated from t3070-wildmatch.sh by 'premake5 embed'.\",\n        \"\",\n        \"// Test case format:\",\n        \"//\",\n        \"//  <x>match <wmode> <fnmode> <string> <pattern>\",\n        \"//  <x>imatch <wmode> <string> <pattern>\",\n        \"//  <x>pathmatch <wmode> <string> <pattern>\",\n        \"//\",\n        \"// match        Tests with wildmatch() and fnmatch(), and with slashes and backslashes.\",\n        \"// imatch       Tests with wildmatch() ignoring case, with slashes and backslashes.\",\n        \"// pathmatch    Tests with wildmatch() without WM_PATHNAME, with slashes and backslashes.\",\n        \"//\",\n        \"// <x>          / to run the test only with the verbatim <string>,\",\n        \"//              \\\\ to run the test only with slashes in <string> converted to backslashes,\",\n        \"//              or leave off <x> to run the test once each way.\",\n        \"//\",\n        \"// <wmode>      1 if the test is expected to match with wildmatch(),\",\n        \"//              0 if the test is expected to fail,\",\n        \"//              or any other value to skip running the test with wildmatch().\",\n        \"//\",\n        \"// <fnmode>     1 if the test is expected to match with fnmatch(),\",\n        \"//              0 if the test is expected to fail,\",\n        \"//              or any other value to skip running the test with fnmatch().\",\n        \"\",\n        \"static const char* const c_cases[] = {\",\n        \"\",\n    }\n\n    for _,line in ipairs(header) do\n        out:write(line)\n        out:write(\"\\n\")\n    end\n\n    local keep_blank\n    for line in file:lines() do\n        if line:find(\"^#\") then\n            local comment = line:match(\"^#([^!].+)$\")\n            if comment then\n                keep_blank = true\n                out:write(\"//\" .. comment .. \"\\n\")\n            end\n        elseif keep_blank and line == \"\" then\n            out:write(\"\\n\")\n        else\n            local op = line:match(\"^(%w+) \")\n            if op then\n                local note\n                if line == special1 or line == special2 or line == special3 then\n                    note = \"MODIFIED\"\n                    line = \"/\" .. line\n                elseif line == \"match 1 0 'deep/foo/bar/baz/x' 'deep/**/***/****/*****'\" then\n                    note = \"MODIFIED\"\n                    line = \"match 1 0 'deep/foo/bar/baz/x' 'deep/**/***/****'\"\n                end\n                count = count + 1\n                write_case(out, line, count, note)\n            end\n\n            if line == \"match 0 0 'foo/bar' 'foo[/]bar'\" then\n                count = count + 1\n                write_case(out, \"match 0 0 'foo/bar' 'foo[^a-z]bar'\", count, \"ADDITIONAL\")\n            elseif line == \"pathmatch 1 foo/bar 'foo[/]bar'\" then\n                count = count + 1\n                write_case(out, \"pathmatch 1 foo/bar 'foo[^a-z]bar'\", count, \"ADDITIONAL\")\n            elseif line == \"match 1 0 'deep/foo/bar/baz/x' 'deep/**/***/****'\" then\n                count = count + 1\n                write_case(out, \"match 1 1 'deep/foo/bar/baz/x' 'deep/**/***/****/*****'\", count, \"ADDITIONAL\")\n            end\n        end\n    end\n\n    -- Don't need to force an extra blank line at the end, because\n    -- t3070-wildmatch.sh itself includes an extra blank line at the end.\n    out:write(\"};\\n\")\n    out:write(\"\\n\")\n    out:write(\"static const int c_expected_count = \" .. expected .. \";\\n\")\n\n    file:close()\n    out:close()\n\n    print(\"   \" .. count .. \" test cases\")\n\n    if count ~= expected then\n        error(\"\\x1b[0;31;1mFAILED: expected \" .. expected .. \" tests; found \" .. count .. \" instead.\")\n    end\nend\n\n--------------------------------------------------------------------------------\nlocal function load_indexed_emoji_table(file)\n    -- Collect the emoji characters.\n    --\n    -- This uses a simplistic approach of taking the first codepoint from each\n    -- line in the input file.\n    local indexed = {}\n    for line in file:lines() do\n        local x = line:match(\"^([0-9A-Fa-f]+) \")\n        if x then\n            local d = tonumber(x, 16)\n            if d then\n                indexed[d] = true\n            end\n        end\n    end\n    return indexed\nend\n\n--------------------------------------------------------------------------------\nlocal function output_character_ranges(out, tag, indexed, filtered)\n    -- Declaration.\n    out:write(\"\\nstatic const struct interval \" .. tag .. \"[] = {\\n\\n\")\n\n    -- Build sorted array of characters.\n    local chars = {}\n    for d, _ in pairs(indexed) do\n        if not (filtered and filtered[d]) then\n            table.insert(chars, d)\n        end\n    end\n    table.sort(chars)\n\n    -- Optimize the set of characters into ranges.\n    local count_ranges = 0\n    local first\n    local last\n    for _, d in ipairs(chars) do\n        if last and last + 1 ~= d then\n            count_ranges = count_ranges + 1\n            out:write(string.format(\"{ 0x%X, 0x%X },\\n\", first, last))\n            first = nil\n        end\n        if not first then\n            first = d\n        end\n        last = d\n    end\n    if first then\n        count_ranges = count_ranges + 1\n        out:write(string.format(\"{ 0x%X, 0x%X },\\n\", first, last))\n    end\n\n    out:write(\"\\n};\\n\")\n\n    return chars, count_ranges\nend\n\n--------------------------------------------------------------------------------\nlocal function do_emojis()\n    local out = \"clink/terminal/src/emoji-test.i\"\n\n    print(\"\\n\"..out)\n\n    local file = io.open(\"clink/terminal/src/emoji-test.txt\", \"r\")\n    local filter = io.open(\"clink/terminal/src/emoji-filter.txt\", \"r\")\n    local fe0f = io.open(\"clink/terminal/src/emoji-fe0f.txt\", \"r\")\n    local mono = io.open(\"clink/terminal/src/emoji-mono.txt\", \"r\")\n    out = io.open(out, \"w\")\n\n    local header = {\n        \"// Generated from emoji-test.txt by 'premake5 embed'.\",\n    }\n\n    for _,line in ipairs(header) do\n        out:write(line)\n        out:write(\"\\n\")\n    end\n\n    -- Collect the emoji characters.\n    local indexed = load_indexed_emoji_table(file)\n    local filtered = load_indexed_emoji_table(filter)\n    local possible_unqualified_half_width = load_indexed_emoji_table(fe0f)\n    local mono_emojis = load_indexed_emoji_table(mono)\n    file:close()\n    filter:close()\n    fe0f:close()\n\n    -- Output ranges of double-width emoji characters.\n    local emojis, count_ranges = output_character_ranges(out, \"emojis\", indexed, filtered)\n\n    -- Output ranges of double-width monochrome emoji characters.\n    output_character_ranges(out, \"mono_emojis\", mono_emojis)\n\n    -- Output ranges of emoji characters which may be half-width if unqualified.\n    local half_width = output_character_ranges(out, \"possible_unqualified_half_width\", possible_unqualified_half_width, nil)\n\n    out:close()\n\n    print(\"   \" .. #emojis .. \" emojis; \" .. count_ranges .. \" ranges\")\n    print(\"   \" .. #half_width .. \" possible unqualified half width emojis\")\nend\n\n--------------------------------------------------------------------------------\nnewaction {\n    trigger = \"embed\",\n    description = \"Clink: Update embedded scripts for Clink\",\n    execute = function ()\n        do_embed()\n        do_wildmatch()\n        do_emojis()\n    end\n}\n\n--------------------------------------------------------------------------------\nnewaction {\n    trigger = \"embed_debug\",\n    description = \"Clink: Update embedded scripts for Clink with debugging info\",\n    execute = function ()\n        do_embed(true--[[debug_info]])\n        do_wildmatch()\n        do_emojis()\n    end\n}\n\n--------------------------------------------------------------------------------\nnewaction {\n    trigger = \"embed_nodebug\",\n    description = \"Clink: Update embedded scripts for Clink without debugging info\",\n    execute = function ()\n        do_embed(false--[[debug_info]])\n        do_wildmatch()\n        do_emojis()\n    end\n}\n"
        },
        {
          "name": "findhighbit.lua",
          "type": "blob",
          "size": 2.03515625,
          "content": "-- This Lua script recursively searches the current directory for source code\n-- files that contain bytes >= 0x80 without including a UTF8 byte order mark.\n--\n-- Run this via:\n--      lua52.exe findhighbit.lua\n\nlocal bad = 0\nlocal total = 0\n\nlocal bom_pattern = \"^\\xef\\xbb\\xbf\"\nlocal highbit_pattern = \"[\\x80-\\xff]\"\n\nlocal function scan(name, dolines)\n    local f = io.open(name, \"rb\")\n    if not f then\n        return\n    end\n\n    total = total + 1\n\n    if not dolines then\n        -- This \"*a\" optimization saves around 5-10% elapsed time.\n        local content = f:read(\"*a\")\n        if not content:find(bom_pattern) and content:find(highbit_pattern) then\n            total = total - 1\n            scan(name, true)\n        end\n    else\n        local n = 0\n        for line in f:lines() do\n            n = n + 1\n            if n == 1 and line:find(bom_pattern) then\n                break\n            end\n            local pos = line:find(highbit_pattern)\n            if pos then\n                print(name..\" -- \\x1b[91mline \"..n..\", pos \"..pos..\"\\x1b[m\")\n                bad = bad + 1\n                break\n            end\n        end\n    end\n\n    f:close()\nend\n\nlocal function can_scan(name)\n    return not name:find(\"\\\\%.[^\\\\]*\\\\\") and not name:find(\"\\\\examples\\\\\")\nend\n\nlocal function traverse(dir)\n    local f = io.popen(string.format('2>nul dir /b /s /a:-d \"%s\"', dir))\n    if not f then\n        return\n    end\n\n    for name in f:lines() do\n        if can_scan(name) then\n            name = name:lower()\n            if name:find(\"%.[hc]$\") or name:find(\"%.cpp$\") then\n                scan(name)\n            end\n        end\n    end\n\n    f:close()\nend\n\nlocal function analyze()\n    bad = 0\n    total = 0\n\n    local start = os.clock()\n    traverse(\".\")\n    local elapsed = os.clock() - start\n\n    if bad > 0 then\n        print()\n    end\n\n    print(string.format(\"%u file(s) scanned in %.2f sec.\", total, elapsed))\n\n    if bad > 0 then\n        print(\"\\x1b[91m\"..bad..\" file(s) missing UTF8 BOM.\\x1b[m\")\n    else\n        print(\"\\x1b[92mAll files ok.\\x1b[m\")\n    end\nend\n\nanalyze()\n"
        },
        {
          "name": "getopt",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua",
          "type": "tree",
          "content": null
        },
        {
          "name": "mm.cmd",
          "type": "blob",
          "size": 4.2373046875,
          "content": "@echo off\nsetlocal\n\nset EC=echo\nset LINE=\u001b(0\nset ASC=\u001b(B\nset BOLD=\u001b[1m\nset UNDER=\u001b[4m\nset NEG=\u001b[7m\nset POS=\u001b[27m\nset CYAN=\u001b[36m\nset NORM=%ASC%\u001b[0m\n\nset __debug_config=debug\nset __release_config=release\nset __final_config=final\nset __x86_platform=_x32\nset __x64_platform=_x64\n\nset __MULTICPU=-j6\nset __CONFIG=%__debug_config%\nset __PLATFORM=%__x64_platform%\nset __MAKENAME=mingw32-make\nset __MAKE=\nset __DIR=\n\nset __DEFAULTCONFIG=%__CONFIG%\nset __DEFAULTPLATFORM=%__PLATFORM%\n\nrem -- Try to find build dir.\nif exist .build\\gmake2 (\n\tset __DIR=.build\\gmake2\n) else if exist .build\\gmake (\n\tset __DIR=.build\\gmake\n) else (\n\techo Unable to find build dir ^(try 'premake5 gmake' or 'premake5 gmake2'^).\n\tgoto :eof\n)\n\nrem -- Try to find make program.\ncall :findmake %__MAKENAME%.exe\n\ngoto :doarg\n\nrem -- Get next arg.\n\n:nextarg\nshift\n\n:doarg\nif \"%1\" == \"?\" goto :usage\nif \"%1\" == \"??\" goto :makeusage\nif \"%1\" == \"/?\" goto :usage\nif \"%1\" == \"/??\" goto :makeusage\nif \"%1\" == \"-?\" goto :usage\nif \"%1\" == \"-??\" goto :makeusage\nif \"%1\" == \"/h\" goto :usage\nif \"%1\" == \"-h\" goto :usage\nif \"%1\" == \"/help\" goto :usage\nif \"%1\" == \"-help\" goto :usage\nif \"%1\" == \"--help\" goto :usage\nif \"%1\" == \"/x86\" ( set __PLATFORM=%__x86_platform%&goto :nextarg )\nif \"%1\" == \"/win32\" ( set __PLATFORM=%__x86_platform%&goto :nextarg )\nif \"%1\" == \"/x64\" ( set __PLATFORM=%__x64_platform%&goto :nextarg )\nif \"%1\" == \"/amd64\" ( set __PLATFORM=%__x64_platform%&goto :nextarg )\nif \"%1\" == \"/dbg\" ( set __CONFIG=%__debug_config%&goto :nextarg )\nif \"%1\" == \"/debug\" ( set __CONFIG=%__debug_config%&goto :nextarg )\nif \"%1\" == \"/fin\" ( set __CONFIG=%__final_config%&goto :nextarg )\nif \"%1\" == \"/final\" ( set __CONFIG=%__final_config%&goto :nextarg )\nif \"%1\" == \"/rel\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/release\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/shp\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/ship\" ( set __CONFIG=%__release_config%&goto :nextarg )\nif \"%1\" == \"/single\" ( set __MULTICPU=&goto :nextarg )\nif \"%1\" == \"--single\" ( set __MULTICPU=&goto :nextarg )\nif \"%1\" == \"/multi\" ( set __MULTICPU=-j6&goto :nextarg )\nif \"%1\" == \"--multi\" ( set __MULTICPU=-j6&goto :nextarg )\n:notminus\n\nset __ARGS=\n:appendarg\nif not \"%1\" == \"\" set __ARGS=%__ARGS% %1&shift&goto appendarg\n\nif x%__MAKE% == x echo error: Unable to find %__MAKENAME%.&goto :eof\n\nsetlocal\ncd %__DIR%\n\necho.\n%EC% %BOLD%%NEG% Building %__CONFIG%%__PLATFORM% %POS%%NORM%\n%__MAKE% %__MULTICPU% config=%__CONFIG%%__PLATFORM% %__ARGS%\nif errorlevel 1 goto :eof\n\ngoto :eof\n\nrem -- Print usage info.\n\n:usage\n\nset __ISX86DEFAULT=\nset __ISX64DEFAULT=\nset __ISDEBUGDEFAULT=\nset __ISRELEASEDEFAULT=\nset __ISFINALDEFAULT=\nset __DEFAULTMARKER= %CYAN%(default)%NORM%\nif %__DEFAULTPLATFORM% == %__x86_platform% set __ISX86DEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTPLATFORM% == %__x64_platform% set __ISX64DEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__debug_config% set __ISDEBUGDEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__release_config% set __ISRELEASEDEFAULT=%__DEFAULTMARKER%\nif %__DEFAULTCONFIG% == %__final_config% set __ISFINALDEFAULT=%__DEFAULTMARKER%\n\n%EC% %BOLD%Usage:%NORM%  MM [/dbg /rel /fin /x86 /x64 /multi /single] [make_options]\necho.\necho Builds %__DEFAULTCONFIG% %__DEFAULTPLATFORM% by default.\necho.\necho   /x86          Builds x86%__ISX86DEFAULT%.\necho   /x64          Builds x64%__ISX64DEFAULT%.\necho   /dbg          Builds DEBUG%__ISDEBUGDEFAULT%.\necho   /rel          Builds RELEASE%__ISRELEASEDEFAULT%.\necho   /fin          Builds FINAL%__ISFINALDEFAULT%.\necho.\necho   /multi        Multi processor build %CYAN%(default)%NORM%.\necho   /single       Single processor build.\necho.\necho   /t target     Build target.\necho.\necho.  /??           Show %__MAKENAME% help.\necho.\necho Aliases:\necho   /x86          Or /win32.\necho   /x64          Or /amd64.\necho   /dbg          Or /debug.\necho   /rel          Or /release or /shp or /ship.\necho   /fin          Or /final.\necho.\nif x%__DIR% == x echo warning: Unable to find build dir (try 'premake5 gmake').\nif not x%__DIR% == x echo Using build dir:     %__DIR%\nif not exist %__MAKE% echo warning: Unable to find %__MAKENAME%.\nif exist %__MAKE% echo Using %__MAKENAME%:  %__MAKE%\n\ngoto :eof\n\n:makeusage\n%__MAKE% --help\ngoto :eof\n\n:findmake\nset __MAKE=\"%~$PATH:1\"\ngoto :eof\n\n"
        },
        {
          "name": "open.cmd",
          "type": "blob",
          "size": 0.087890625,
          "content": "@echo off\nstart \"\" \"%~dp0.build\\vs2019\\clink.sln\"\nsleep 2\ncall code \"%~dp0\"\ncd /d \"%~dp0\"\n"
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 20.3076171875,
          "content": "-- Copyright (c) 2012 Martin Ridgers\n-- Portions Copyright (c) 2020-2023 Christopher Antos\n-- License: http://opensource.org/licenses/MIT\n\nlocal to = \".build/\"..(_ACTION or \"nullaction\")\n\nif _ACTION == \"gmake2\" then\n    error(\"Use `premake5 gmake` instead; gmake2 neglects to link resources.\")\nend\n\n--------------------------------------------------------------------------------\nlocal function get_git_info()\n    local git_cmd = \"git branch --verbose --no-color 2>nul\"\n    for line in io.popen(git_cmd):lines() do\n        local _, _, name, commit = line:find(\"^%*.+%s+([^ )]+)%)%s+([a-f0-9]+)%s\")\n        if name and commit then\n            return name, commit:sub(1, 6)\n        end\n\n        local _, _, name, commit = line:find(\"^%*%s+([^ ]+)%s+([a-f0-9]+)%s\")\n        if name and commit then\n            return name, commit:sub(1, 6)\n        end\n    end\n\n    return \"NAME?\", \"COMMIT?\"\nend\n\n--------------------------------------------------------------------------------\nlocal function postbuild_copy(src, cfg)\n    src = path.getabsolute(src)\n    src = path.translate(src)\n\n    local dest = to..\"/bin/\"..cfg\n    dest = path.getabsolute(dest)\n    dest = path.translate(dest)\n    postbuildcommands(\"copy /y \\\"\"..src..\"\\\" \\\"\"..dest..\"\\\" 1>nul 2>nul\")\nend\n\n--------------------------------------------------------------------------------\nlocal function setup_cfg(cfg)\n    filter {cfg}\n        defines(\"CLINK_\"..cfg:upper())\n        targetdir(to..\"/bin/\"..cfg)\n        objdir(to..\"/obj/\")\n\n    filter {cfg, \"architecture:x32\"}\n        targetsuffix(\"_x86\")\n\n    filter {cfg, \"architecture:x64\"}\n        targetsuffix(\"_x64\")\n\n    filter {cfg, \"architecture:arm64\"}\n        targetsuffix(\"_arm64\")\n\n    filter {}\nend\n\n\n\n--------------------------------------------------------------------------------\nlocal function clink_project(name)\n    project(name)\n    flags(\"fatalwarnings\")\n    language(\"c++\")\n\n    filter \"action:vs*\"\n        buildoptions(\"-FI\\\"\"..path.getabsolute(\"clink/core/warning.h\")..\"\\\"\")\n    filter {}\nend\n\n--------------------------------------------------------------------------------\nlocal function clink_lib(name)\n    clink_project(name)\n    kind(\"staticlib\")\nend\n\n--------------------------------------------------------------------------------\nlocal function clink_dll(name)\n    clink_project(name)\n    kind(\"sharedlib\")\nend\n\n--------------------------------------------------------------------------------\nlocal function clink_exe(name)\n    clink_project(name)\n    kind(\"consoleapp\")\nend\n\n--------------------------------------------------------------------------------\nlocal function get_clink_version()\n    local clink_version_file_name = \"clink/app/src/version.h\"\n    local maj, min, pat\n    local x\n    for line in io.lines(clink_version_file_name) do\n        x = line:match(\"CLINK_VERSION_MAJOR[ \\t]+([0-9]+)\")\n        if x then maj = x end\n        x = line:match(\"CLINK_VERSION_MINOR[ \\t]+([0-9]+)\")\n        if x then min = x end\n        x = line:match(\"CLINK_VERSION_PATCH[ \\t]+([0-9]+)\")\n        if x then pat = x end\n    end\n    if not maj or not min or not pat then\n        error(\"Unable to find version number in '\"..clink_version_file_name..\"'.\")\n    end\n    return maj, min, pat\nend\n\n--------------------------------------------------------------------------------\n-- MinGW's windres tool can't seem to handle string concatenation like rc does,\n-- so I gave up and generate it here.\nlocal function get_version_str_defs(branch, commit)\n    local maj, min, pat = get_clink_version()\n    local str = '#define CLINK_VERSION_STR \"'..maj..'.'..min..'.'..pat..'.'..commit..'\"\\n'\n    local lstr = '#define CLINK_VERSION_LSTR L\"'..maj..'.'..min..'.'..pat..'.'..commit..'\"\\n'\n    local bstr\n    if branch ~= \"master\" and branch ~= \"main\" then\n        bstr = '#define CLINK_BRANCH '..branch..'\\n#define CLINK_VERSION_STR_WITH_BRANCH \"'..maj..'.'..min..'.'..pat..'.'..commit..'.'..branch..'\"\\n'\n    else\n        bstr = '#define CLINK_VERSION_STR_WITH_BRANCH \"'..maj..'.'..min..'.'..pat..'.'..commit..'\"\\n'\n    end\n    return str..lstr..bstr\nend\n\n--------------------------------------------------------------------------------\nlocal function write_clink_commit_file(branch, commit)\n    local clink_commit_file\n    local clink_commit_file_name = \".build/clink_commit.h\"\n    local clink_commit_string = \"#pragma once\\n#define CLINK_COMMIT \"..commit..\"\\n\"..get_version_str_defs(branch, commit)\n    local old_commit_string = \"\"\n\n    clink_commit_file = io.open(path.getabsolute(clink_commit_file_name), \"r\")\n    if clink_commit_file then\n        old_commit_string = clink_commit_file:read(\"*all\")\n        clink_commit_file:close()\n    end\n\n    if old_commit_string ~= clink_commit_string then\n        clink_commit_file = io.open(path.getabsolute(clink_commit_file_name), \"w\")\n        if not clink_commit_file then\n            error(\"Unable to write '\"..clink_commit_file_name..\"'.\")\n        end\n        clink_commit_file:write(clink_commit_string)\n        clink_commit_file:close()\n        print(\"Generated \"..clink_commit_file_name..\"...\")\n    end\nend\n\n--------------------------------------------------------------------------------\nlocal function write_clink_manifest_file()\n    local manifest_file = \".build/clink_manifest.xml\"\n    local manifest_file_name = \".build/clink_manifest.xml\"\n    local maj, min, pat = get_clink_version()\n\n    local manifest_string =\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>'..\n        '<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv3=\"urn:schemas-microsoft-com:asm.v3\" manifestVersion=\"1.0\">'..\n        '<assemblyIdentity version=\"'..maj..'.'..min..'.'..pat..'.0\" processorArchitecture=\"*\" name=\"chrisant996.Clink\" type=\"win32\"/>'..\n        '<description>Clink</description>'..\n        '<asmv3:application><asmv3:windowsSettings>'..\n            --'<dpiAware xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">True</dpiAware>'..\n            --'<dpiAwareness xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">PerMonitorV2, PerMonitor</dpiAwareness>'..\n            '<heapType xmlns=\"http://schemas.microsoft.com/SMI/2020/WindowsSettings\">SegmentHeap</heapType>'..\n        '</asmv3:windowsSettings></asmv3:application>'..\n        '<dependency><dependentAssembly>'..\n            '<assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\"/>'..\n        '</dependentAssembly></dependency>'..\n        '<compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\"><application>'..\n            '<supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>'.. -- Windows 10\n            '<supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>'.. -- Windows 8.1\n            '<supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>'.. -- Windows 8\n            '<supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>'.. -- Windows 7\n            '<supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\"/>'.. -- Windows Vista\n        '</application></compatibility></assembly>'\n\n    local old_manifest_string = \"\"\n    manifest_file = io.open(path.getabsolute(manifest_file_name), \"r\")\n    if manifest_file then\n        old_manifest_string = manifest_file:read(\"*all\")\n        manifest_file:close()\n    end\n\n    if old_manifest_string ~= manifest_string then\n        manifest_file = io.open(path.getabsolute(manifest_file_name), \"w\")\n        if not manifest_file then\n            error(\"Unable to write '\"..manifest_file_name..\"'.\")\n        end\n        manifest_file:write(manifest_string);\n        manifest_file:close()\n        print(\"Generated \"..manifest_file_name..\"...\")\n    end\nend\n\n--------------------------------------------------------------------------------\nif _ACTION then\n    local workspace = (_ACTION:find(\"^vs\") or _ACTION:find(\"^gmake\"))\n    local docs = (_ACTION == \"docs\")\n    if workspace or docs then\n        clink_git_name, clink_git_commit = get_git_info()\n        write_clink_commit_file(clink_git_name, clink_git_commit)\n    end\n    if workspace then\n        write_clink_manifest_file()\n    end\nend\n\n\n\n--------------------------------------------------------------------------------\nworkspace(\"clink\")\n    configurations({\"debug\", \"release\", \"final\"})\n    platforms({\"x32\", \"x64\", \"arm64\"})\n    location(to)\n\n    characterset(\"MBCS\")\n    flags(\"NoManifest\")\n    staticruntime(\"on\")\n    symbols(\"on\")\n    exceptionhandling(\"off\")\n    defines(\"HAVE_CONFIG_H\")\n    defines(\"HANDLE_MULTIBYTE\")\n\n    includedirs(\".build\")               -- for clink_commit.h\n\n    setup_cfg(\"final\")\n    setup_cfg(\"release\")\n    setup_cfg(\"debug\")\n\n    filter \"debug\"\n        rtti(\"on\")\n        optimize(\"off\")\n        defines(\"DEBUG\")\n        defines(\"_DEBUG\")\n\n    filter \"final\"\n        --rtti(\"off\")\n        rtti(\"on\")\n        optimize(\"full\")\n        omitframepointer(\"on\")\n        flags(\"NoBufferSecurityCheck\")\n        defines(\"NDEBUG\")\n\n    filter {\"final\", \"action:vs*\"}\n        flags(\"LinkTimeOptimization\")\n\n    filter \"release\"\n        --rtti(\"off\")\n        rtti(\"on\")\n        optimize(\"full\")\n        defines(\"NDEBUG\")\n\n    filter \"debug or release\"\n        defines(\"CLINK_BUILD_ROOT=\\\"\"..path.getabsolute(to)..\"\\\"\")\n\n    filter \"action:vs*\"\n        defines(\"_HAS_EXCEPTIONS=0\")\n        defines(\"_CRT_SECURE_NO_WARNINGS\")\n        defines(\"_CRT_NONSTDC_NO_WARNINGS\")\n\n    filter \"action:gmake\"\n        defines(\"__MSVCRT_VERSION__=0x0601\")\n        defines(\"_WIN32_WINNT=0x0601\")\n        defines(\"WINVER=0x0601\")\n        defines(\"_POSIX=1\")             -- so vsnprintf returns needed size\n        buildoptions(\"-Wno-error=missing-field-initializers\")\n        buildoptions(\"-ffunction-sections\")\n        buildoptions(\"-fdata-sections\")\n        makesettings { \"CC=gcc\" }\n\n--------------------------------------------------------------------------------\nproject(\"readline\")\n    language(\"c\")\n    kind(\"staticlib\")\n    defines(\"BUILD_READLINE\")\n    includedirs(\"readline\")\n    includedirs(\"readline/compat\")\n    includedirs(\"wildmatch/wildmatch\")\n    files(\"readline/readline/*.c\")\n    files(\"readline/readline/*.h\")\n    files(\"readline/compat/*.c\")\n    files(\"readline/compat/*.h\")\n\n    excludes(\"readline/readline/emacs_keymap.c\")    -- #included by readline/keymaps.c\n    excludes(\"readline/readline/vi_keymap.c\")       -- #included by readline/keymaps.c\n    excludes(\"readline/readline/support/wcwidth.c\") -- superseded by clink/terminal/src/wcwidth.cpp\n\n    filter \"action:gmake\"\n        buildoptions(\"-Wno-discarded-qualifiers\")\n        buildoptions(\"-Wno-implicit-function-declaration\")\n        buildoptions(\"-Wno-endif-labels\")\n\n--------------------------------------------------------------------------------\nproject(\"getopt\")\n    language(\"c\")\n    kind(\"staticlib\")\n    files(\"getopt/*\")\n\n--------------------------------------------------------------------------------\nproject(\"wildmatch\")\n    language(\"c\")\n    kind(\"staticlib\")\n    files(\"wildmatch/wildmatch/*.c\")\n    files(\"wildmatch/wildmatch/*.h\")\n\n--------------------------------------------------------------------------------\nproject(\"lua\")\n    language(\"c\")\n    kind(\"staticlib\")\n    defines(\"BUILD_LUA\")\n    defines(\"BUILD_CLINK_LUA\")\n    files(\"lua/src/*.c\")\n    files(\"lua/src/*.h\")\n    excludes(\"lua/src/lua.c\")\n    excludes(\"lua/src/luac.c\")\n\n--------------------------------------------------------------------------------\nproject(\"luac\")\n    language(\"c\")\n    kind(\"consoleapp\")\n    links(\"lua\")\n    files(\"lua/src/luac.c\")\n\n--------------------------------------------------------------------------------\nproject(\"lua52\")\n    language(\"c\")\n    kind(\"consoleapp\")\n    defines(\"BUILD_LUA\")\n    links(\"clink_lib\")\n    links(\"clink_core\") -- Link after clink_lib to solve order issue with linear_allocator.*.\n    links(\"lua\")\n    files(\"lua/src/lua.c\")\n\n--------------------------------------------------------------------------------\nproject(\"detours\")\n    kind(\"staticlib\")\n    files(\"detours/*.cpp\")\n    removefiles(\"detours/disolarm.cpp\")\n    removefiles(\"detours/disolarm64.cpp\")\n    removefiles(\"detours/disolia64.cpp\")\n    removefiles(\"detours/uimports.cpp\")     -- is included by creatwth.cpp\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n        buildoptions(\"-Wno-multichar\")\n        buildoptions(\"-Wno-pointer-arith\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_lib\")\n    includedirs(\"clink/lib/include/lib\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/terminal/include\")\n    includedirs(\"readline\")\n    includedirs(\"readline/compat\")\n    includedirs(\"wildmatch\")\n    files(\"clink/lib/src/**\")\n    files(\"clink/lib/include/**\")\n\n    includedirs(\"clink/lib/src\")\n    filter \"action:vs*\"\n        pchheader(\"pch.h\")\n        pchsource(\"clink/lib/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_lua\")\n    includedirs(\"clink/lua/include/lua\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/lib/include\")\n    includedirs(\"clink/process/include\")\n    includedirs(\"clink/terminal/include\")\n    includedirs(\"lua/src\")\n    includedirs(\"readline\")\n    includedirs(\"readline/compat\")\n    includedirs(\"wildmatch\")\n    files(\"clink/lua/src/**\")\n    files(\"clink/lua/include/**\")\n    files(\"clink/lua/scripts/**\")\n    excludes(\"clink/lua/src/lua_editor_tester.cpp\")\n\n    includedirs(\"clink/lua/src\")\n    filter \"action:vs*\"\n        pchheader(\"pch.h\")\n        pchsource(\"clink/lua/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_core\")\n    includedirs(\"clink/core/include/core\")\n    files(\"clink/core/src/**\")\n    files(\"clink/core/include/**\")\n\n    includedirs(\"clink/core/src\")\n    filter \"action:vs*\"\n        pchheader(\"pch.h\")\n        pchsource(\"clink/core/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_terminal\")\n    includedirs(\"clink/terminal/include/terminal\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/process/include\")\n    files(\"clink/terminal/src/**\")\n    files(\"clink/terminal/include/**\")\n\n    includedirs(\"clink/terminal/src\")\n    filter \"action:vs*\"\n        exceptionhandling(\"on\")         -- for std::wregex\n        pchheader(\"pch.h\")\n        pchsource(\"clink/terminal/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fexceptions\")    -- for std::wregex\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-Wno-multichar\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_process\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/process/include/process\")\n    files(\"clink/process/src/**\")\n    files(\"clink/process/include/**\")\n\n    includedirs(\"clink/process/src\")\n    filter \"action:vs*\"\n        flags { \"NoRuntimeChecks\" } -- required for 32 bit by the inject lambda in process::remote_call\n        pchheader(\"pch.h\")\n        pchsource(\"clink/process/src/pch.cpp\")\n        inlining(\"auto\") -- required by the inject lambda in process::remote_call\n        editAndContinue(\"off\") -- required by the inject lambda in process::remote_call\n        omitframepointer(\"off\") -- required by the inject lambda in process::remote_call\n        exceptionhandling(\"off\") -- required by the inject lambda in process::remote_call\n        -- <SupportJustMyCode>false</SupportJustMyCode> -- required by the inject lambda in process::remote_call\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_lib(\"clink_app_common\")\n    includedirs(\"clink/app/src\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/lib/include\")\n    includedirs(\"clink/lua/include\")\n    includedirs(\"clink/process/include\")\n    includedirs(\"clink/terminal/include\")\n    includedirs(\"detours\")\n    includedirs(\"getopt\")\n    includedirs(\"lua/src\")\n    includedirs(\"readline\")\n    includedirs(\"readline/compat\")\n    files(\"clink/app/src/**\")\n    files(\"clink/app/scripts/**\")\n    excludes(\"clink/app/src/dll/main.cpp\")\n    excludes(\"clink/app/src/loader/main.cpp\")\n\n    filter \"action:vs*\"\n        pchheader(\"pch.h\")\n        pchsource(\"clink/app/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_dll(\"clink_app_dll\")\n    targetname(\"clink_dll\")\n    links(\"clink_app_common\")\n    links(\"clink_lib\")\n    links(\"clink_core\") -- Link after clink_lib to solve order issue with linear_allocator.*.\n    links(\"clink_lua\")\n    links(\"clink_process\")\n    links(\"clink_terminal\")\n    links(\"detours\")\n    links(\"getopt\")\n    links(\"wildmatch\")\n    links(\"lua\")\n    links(\"readline\")\n    links(\"version\")\n    links(\"shlwapi\")\n    links(\"rpcrt4\")\n    files(\"clink/app/src/dll/main.cpp\")\n    files(\"clink/app/src/version.rc\")\n    files(\"clink/app/src/manifest.rc\")\n\n    filter \"action:vs*\"\n        links(\"dbghelp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n        links(\"gdi32\")\n        links(\"ole32\")\n\n--------------------------------------------------------------------------------\nclink_exe(\"clink_app_exe\")\n    targetname(\"clink\")\n    flags(\"OmitDefaultLibrary\")\n    links(\"clink_app_dll\")\n    files(\"clink/app/src/loader/main.cpp\")\n    files(\"clink/app/src/version.rc\")\n    files(\"clink/app/src/manifest.rc\")\n\n    filter \"final\"\n        postbuild_copy(\"CHANGES\", \"final\")\n        postbuild_copy(\"LICENSE\", \"final\")\n        postbuild_copy(\"clink/app/src/loader/clink.bat\", \"final\")\n        postbuild_copy(\"clink/app/src/loader/clink.lua\", \"final\")\n\n    filter \"release\"\n        postbuild_copy(\"clink/app/src/loader/clink.bat\", \"release\")\n        postbuild_copy(\"clink/app/src/loader/clink.lua\", \"release\")\n\n    filter \"debug\"\n        postbuild_copy(\"clink/app/src/loader/clink.bat\", \"debug\")\n        postbuild_copy(\"clink/app/src/loader/clink.lua\", \"debug\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n\n--------------------------------------------------------------------------------\nclink_exe(\"clink_test\")\n    links(\"clink_app_common\")\n    links(\"clink_core\")\n    links(\"clink_lib\")\n    links(\"clink_lua\")\n    links(\"clink_process\")\n    links(\"clink_terminal\")\n    links(\"detours\")\n    links(\"wildmatch\")\n    links(\"lua\")\n    links(\"readline\")\n    links(\"shlwapi\")\n    links(\"rpcrt4\")\n    includedirs(\"clink/test/src\")\n    includedirs(\"clink/app/src\")\n    includedirs(\"clink/core/include\")\n    includedirs(\"clink/lib/include\")\n    includedirs(\"clink/lib/include/lib\")\n    includedirs(\"clink/lib/src\")\n    includedirs(\"clink/lua/include\")\n    includedirs(\"clink/process/include\")\n    includedirs(\"clink/terminal/include\")\n    includedirs(\"wildmatch/wildmatch\")\n    includedirs(\"lua/src\")\n    includedirs(\"readline\")\n    includedirs(\"readline/compat\")\n    files(\"clink/app/test/*.cpp\")\n    files(\"clink/core/test/*.cpp\")\n    files(\"clink/lua/test/*.cpp\")\n    files(\"clink/lib/test/*.cpp\")\n    files(\"clink/process/test/*.cpp\")\n    files(\"clink/terminal/test/*.cpp\")\n    files(\"clink/test/**\")\n    files(\"wildmatch/tests/*.cpp\")\n\n    exceptionhandling(\"on\")\n\n    filter \"action:vs*\"\n        pchheader(\"pch.h\")\n        pchsource(\"clink/test/src/pch.cpp\")\n\n    filter \"action:gmake\"\n        buildoptions(\"-fpermissive\")\n        buildoptions(\"-std=c++17\")\n        links(\"gdi32\")\n        links(\"ole32\")\n        linkgroups(\"on\")\n\n--------------------------------------------------------------------------------\nrequire \"vstudio\"\nlocal function add_tag(tag, value, project_name)\n    premake.override(premake.vstudio.vc2010.elements, \"clCompile\",\n    function(oldfn, cfg)\n        local calls = oldfn(cfg)\n        if project_name == nil or cfg.project.name == project_name then\n            table.insert(calls, function(cfg)\n                premake.vstudio.vc2010.element(tag, nil, value)\n            end)\n        end\n        return calls\n    end)\nend\n\nadd_tag(\"SupportJustMyCode\", \"false\", \"clink_process\")\n\n--------------------------------------------------------------------------------\ndofile(\"docs/premake5.lua\")\ndofile(\"installer/premake5.lua\")\ndofile(\"embed.lua\")\n"
        },
        {
          "name": "readline",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.cmd",
          "type": "blob",
          "size": 0.0546875,
          "content": "@echo off\ncall \"%~dp0.build\\vs2019\\bin\\debug\\clink.bat\"\n"
        },
        {
          "name": "test.cmd",
          "type": "blob",
          "size": 2.044921875,
          "content": "@echo off\nsetlocal\nset __DBG=\nset __ME=%~dp0\nset __CPU=x64\nset __FLAVOR=debug\n\n:arg\nif x%1x == x?x goto :usage\nif x%1x == x/?x goto :usage\nif x%1x == x-?x goto :usage\nif x%1x == x/hx goto :usage\nif x%1x == x-hx goto :usage\nif x%1x == x/helpx goto :usage\nif x%1x == x--helpx goto :usage\nif x%1x == xhelpx goto :usage\nif x%1x == x/x64x set __CPU=x64& goto :nextarg\nif x%1x == x--x64x set __CPU=x64& goto :nextarg\nif x%1x == x/x86x set __CPU=x86& goto :nextarg\nif x%1x == x--x86x set __CPU=x86& goto :nextarg\nif x%1x == x/dbgx set __DBG=call devenv /debugexe& goto:nextarg\nif x%1x == x--dbgx set __DBG=call devenv /debugexe& goto:nextarg\nif x%1x == x/relx set __FLAVOR=release& goto:nextarg\nif x%1x == x--relx set __FLAVOR=release& goto:nextarg\nif x%1x == x/releasex set __FLAVOR=release& goto:nextarg\nif x%1x == x--releasex set __FLAVOR=release& goto:nextarg\nif x%1x == x/shipx set __FLAVOR=release& goto:nextarg\nif x%1x == x--shipx set __FLAVOR=release& goto:nextarg\n\nif x%2x == x/relx goto:oopsflag\nif x%2x == x-relx goto:oopsflag\nif x%2x == x/releasex goto:oopsflag\nif x%2x == x--releasex goto:oopsflag\nif x%2x == x/shipx goto:oopsflag\nif x%2x == x--shipx goto:oopsflag\n\necho %__DBG% %__ME%.build\\vs2022\\bin\\%__FLAVOR%\\clink_test_%__CPU%.exe %1 %2 %3\n%__DBG% %__ME%.build\\vs2022\\bin\\%__FLAVOR%\\clink_test_%__CPU%.exe %1 %2 %3\ngoto :eof\n\n:nextarg\nshift\ngoto :arg\n\n:oopsflag\necho Options in wrong order; %2 belongs before %1.\ngoto :eof\n\n:usage\necho Usage:  test [options1] [options2] [test name prefix]\necho.\necho   Run clink_test_x64.exe.\necho.\necho Script options:\necho.  /?        Show usage info.\necho   /dbg      Run test under the debugger.\necho   /x64      Run clink_test_x64.exe (the default).\necho   /x86      Run clink_test_x86.exe.\necho   /rel      Run release version (runs debug version by default).\necho.\necho Test options:\necho   -d        Load Lua debugger.\necho   -t        Show execution time.\necho.\necho Script options must precede test options.\necho.\necho If [test name prefix] is included, then it only runs tests whose name begins\necho with the specified prefix.\ngoto :eof\n"
        },
        {
          "name": "wildmatch",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}