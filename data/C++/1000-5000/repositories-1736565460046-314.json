{
  "metadata": {
    "timestamp": 1736565460046,
    "page": 314,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pistacheio/pistache",
      "stars": 3244,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.90234375,
          "content": "# SPDX-FileCopyrightText: 2021 Mathieu Stefani\n#\n# SPDX-License-Identifier: Apache-2.0\n\n---\nLanguage:        Cpp\n# BasedOnStyle:  WebKit\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: false\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        Latest\nStatementMacros:\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseCRLF:         false\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.44921875,
          "content": "# SPDX-FileCopyrightText: 2021 Andrea Pappacoda <andrea@pappacoda.it>\n#\n# SPDX-License-Identifier: CC0-1.0\n\nsubprojects/**\nsrc/common/eventmeth.cc\ninclude/pistache/eventmeth.h\ninclude/pistache/emosandlibevdefs.h\nsrc/common/pist_timelog.cc\ninclude/pistache/pist_timelog.h\nsrc/common/pist_check.cc\ninclude/pistache/pist_check.h\nsrc/common/pist_syslog.cc\ninclude/pistache/pist_syslog.h\nsrc/common/ps_strl.cc\ninclude/pistache/ps_strl.h\ninclude/pistache/winornix.h\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9248046875,
          "content": "# SPDX-FileCopyrightText: 2015 Mathieu Stefani\n#\n# SPDX-License-Identifier: CC0-1.0\n\n# Build files\n/*build*/\n/tests/build*/\n/googletest/\n\n# Soft links to favorite build convenience files\n/build.sh\n/builddebug.sh\n/builddebug.ps1\n/copyall.sh\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Ignoring IDE files\n\n.vscode\n.idea\n\n# macOS .DS_Store has custom attributes of containing folder\n.DS_Store\n._.DS_Store\n**/.DS_Store\n**/._.DS_Store\n\n.DS_Store\n**/.DS_Store\n\n# Vim swap files\n.*.swp\n\n# Clangd cache\n/.cache/clangd\n\n# Ad hoc scripts to run tests repeatedly\nrepeat_*.sh\nrepeatx86_*.sh\n\n# Meson Wrap DB cache\n/subprojects/*\n!/subprojects/*.wrap\n\n!/subprojects/cpp-httplib\n!/subprojects/hinnant-date\n*.*~\n*.bak\n\\#*\\#\n\n/How To Run All Tests (README).txt\n"
        },
        {
          "name": ".hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8828125,
          "content": "# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>\n#\n# SPDX-License-Identifier: Apache-2.0\n\nlanguage: cpp\n\nos: linux\n# jammy is currently only available on amd64\n#dist: jammy\n#arch: [ amd64, arm64, ppc64le, s390x ]\n\n# Use an explicit job list until jammy is supported on all archs\njobs:\n  include:\n  - dist: jammy\n    arch: amd64\n  - dist: focal\n    arch: arm64\n  - dist: focal\n    arch: ppc64le\n  - dist: focal\n    arch: s390x\n\nbranches:\n  only: master\n\naddons:\n  apt:\n    update: true\n    packages:\n    - meson\n    - pkg-config\n    - cmake\n    - rapidjson-dev\n    - libssl-dev\n    - '\"?name(libhowardhinnant-date-dev)\"'\n    - '\"?name(libgmock-dev) (?version([1-9]\\.[1-9][1-9]) | ?version([1-9]\\.[2-9][0-9]))\"'\n    - '\"?name(libcpp-httplib-dev)\"'\n    - libcurl4-openssl-dev\n\nscript:\n- meson setup build -DPISTACHE_BUILD_TESTS=true\n- ninja -C build -j2\n- meson test -C build --verbose\n"
        },
        {
          "name": "Building on BSD - FreeBSD, OpenBSD and NetBSD.txt",
          "type": "blob",
          "size": 3.830078125,
          "content": "# SPDX-FileCopyrightText: 2024 Duncan Greatwood\n#\n# SPDX-License-Identifier: Apache-2.0\n\nMaking Pistache on *BSD\n=======================\n\nPistache has been built and tested on FreeBSD, OpenBSD and NetBSD. As\nof July-2024, the versions used for testing were FreeBSD 13.3,\nOpenBSD 7.3 and NetBSD 10.0.\n\nYou will need to configure BSD with a working compiler.\n\nWe would recommend that you also have python installed, including pip\n(use \"python -m ensure-pip\" if needed, and add the directory where pip\nis installed to your path). Plus, we recommend installing sudo, if not\npreinstalled.\n\nYou will need the following Pistache-dependencies installed:\n  git (and configure as needed)\n  llvm\n  meson\n  doxygen\n  googletest (*)\n  openssl\n  rapidjson (*)\n  howard-hinnant-date (*)\n  libevent\n  brotli libbrotli-dev (presuming you want to include)\n  zstd libzstd-dev (presuming you want to include)\n See BSD-type-specific notes below regarding installing these\n dependencies.\n\nConvenience shell scripts are provided to make the build. Once\ndependencies are installed, at the terminal, to build do:\n  bldscripts/mesbuild.sh\nTo test:\n  bldscripts/mestest.sh\nTo install:\n  bldscripts/mesinstall.sh\n\n\nFreeBSD\n=======\n\nTypically, required packages are installed using:\n  sudo pkg install <package-name>\nFor instance:\n  sudo pkg install meson\nDo this for each Pistache dependency, excluding howard-hinnant-date.\n\n\nOpenBSD\n=======\n\nTypically, required packages are installed using:\n  doas pkg_add <package-name>\nFor instance:\n  doas pkg_add meson\nDo this for each Pistache dependency, excluding googletest and\nrapidjson.\n(Note: You may use sudo instead of doas if you have installed the sudo\npackage and configured sudo; however, doas is often preferred on\nOpenBSD.)\n\n\nNetBSD\n======\nTypically, required packages are installed using:\n  sudo pkg_in install <package-name>\nFor instance:\n  sudo pkg_in install meson\nDo this for each Pistache dependency, excluding howard-hinnant-date.\n\nRegarding NetBSD 9.4. NetBSD 9.4 uses gcc 7.5.0, while Pistache's\nbuild files require C++17 support, and Pistache's code uses\nstd::filesystem. However, gcc 7.5.0 does not work correctly with\nstd::filesystem when C++17 is specified. Accordingly, we have tested\nwith NetBSD 10.0, not 9.4. Nonetheless, it is possible that Pistache\ncould be made to work on NetBSD 9.* with a different compiler or\ndifferent compiler version.\n\nRegarding the test net_test.invalid_address, it may be slow to execute\n(about 2 minutes) in NetBSD. The cause is a long time out for the\nsystem function getaddrinfo; it doesn't appear to an issue in\nPistache.\n\n\n(*) Googletest, Rapidjson and Howard-hinnant-date Packages\n==========================================================\n\nThese packages are provided as Pistache subprojects, and so do not\nhave to be installed seperately on the BSD system. Also, note that\nthere is no howard-hinnant-date package supplied as part of the OS by\nFreeBSD 13 nor by NetBSD 10; and no googletest or rapidjson packages\nsupplied by OpenBSD 7. Nonetheless, if you would like to install\ngoogletest, rapidjson and/or howard-hinnant-date manually on the BSD\nsystem, please proceed as follows:\n\nGoogletest:\n  git clone https://github.com/google/googletest.git\n  cd googletest\n  mkdir build\n  cd build\n  cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ..\n  make\n  sudo make install\n\nRapidjson:\n  git clone https://github.com/Tencent/rapidjson/\n  cd rapidjson/\n  mkdir build\n  cd build\n  cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ..\n  make\n  sudo make install\n\nHoward-hinnant-date:\n  git clone https://github.com/HowardHinnant/date.git\n  sudo mkdir /usr/local/include/date\n  sudo cp -p date/include/date/date.h /usr/local/include/date/.\n\n(Note: Typically, use doas instead of sudo on OpenBSD).\n\n\nHow It Works\n============\nPistache on BSD works very much as it does on macOS, i.e. by using the\nlibevent library to provide the core event loop.\n"
        },
        {
          "name": "Building on Windows.txt",
          "type": "blob",
          "size": 12.080078125,
          "content": "# SPDX-FileCopyrightText: 2024 Duncan Greatwood\n#\n# SPDX-License-Identifier: Apache-2.0\n\nBuilding Pistache on Windows\n============================\n\nPistache has been built and tested on Windows 11, Windows Server 2022\nand Windows Server 2019. It could perhaps be made to work on older\nWindows versions too, though going back before Windows 8 would\nbe more difficult due to Windows API changes.\n\nConvenience scripts are provided to configure Pistache to be built\neither with GCC (MinGW-w64) or with Visual Studio. These scripts will\ndownload and install the needed dependencies on your Windows machine,\nif not already present.\n\nThe following instructions assume you are at a PowerShell terminal\nprompt. The terminal prompt can be at the console of the target\nWindows machine, or via a remote SSH session. Just a regular\nPowerShell prompt is needed - you do NOT need to use a preconfigured\n\"Developer PowerShell\" prompt, and in fact the Pistache configuration\nscripts will configure a Developer prompt for you if\nrequired. Likewise, you can use a prompt without administrator rights.\n\nNewer versions of Windows may disable script execution by default. To\nenable script execution, at a PowerShell prompt with admin rights do:\n  Set-ExecutionPolicy -ExecutionPolicy Bypass\n\nOlder versions of Windows (e.g. Windows Server 2019) that default to\nInternet Explorer may block access to Internet downloads needed by the\nPistache setup scripts. To enable that Internet access, see that the\nnote \"Disabling Enhanced Security Configuration for Internet Explorer\"\nlater in this document.\n\nTo begin - clone, fork or download and expand the zip of Pistache to\nfetch Pistache to your Windows machine:\n  To get Pistache using \"git clone\":\n    If you don't already have git, but do have winget on your machine:\n      Invoke-WebRequest -Uri \"https://git.io/JXGyd\" -OutFile \"git.inf\"\n      winget install Git.Git --override '/SILENT /LOADINF=\"git.inf\"'\n    Or to install git without using winget:\n      $mingit_latest_url=(Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/git-for-windows/git-for-windows.github.io/refs/heads/main/latest-64-bit-mingit.url\").Content\n      Invoke-WebRequest -Uri \"$mingit_latest_url\" -Outfile \"mingit_latest.zip\"\n      Expand-Archive -Path \"mingit_latest.zip\" -DestinationPath \"$env:ProgramFiles/Git\"\n      $git_dir = \"$env:ProgramFiles/Git\"\n      $env:Path=\"$git_dir\\cmd;$git_dir\\mingw64\\bin;$git_dir\\usr\\bin;$env:Path\"\n    You can configure your newly installed git:\n      git config --global user.email \"you@somedomain.com\"\n      git config --global user.name \"Your Name\"\n      etc.\n  Then, once git is installed:\n    git clone https://github.com/pistacheio/pistache.git\n  OR to get Pistache using zip download:\n    Invoke-WebRequest -Uri \"https://github.com/pistacheio/pistache/archive/refs/heads/master.zip\" -OutFile \"pistache.zip\"\n    Expand-Archive -Path \"pistache.zip\" -DestinationPath \"pistache\"\n    (Or you can download and expand the zip using a web browser in the GUI)\n\nThen configure for either GCC or Visual Studio:\n  cd pistache\nand EITHER:\n  winscripts\\msvcsetup.ps1\nOR:\n  winscripts\\gccsetup.ps1\n\nNote: You should run msvcsetup.ps1 or gccsetup.ps1 each time you start\na new PowerShell prompt that you will use for building Pistache.\n\nThen run:\n  winscripts\\mesbuild.ps1\n  winscripts\\mestest.ps1\n  winscripts\\mesinstall.ps1\n\nPistache is installed to the pistache_distribution subdirectory of the\n\"Program Files\" directory, most commonly:\n  C:\\Program Files\\pistache_distribution\nYou can link your own executables to Pistache via\n\\Program Files\\pistache_distribution. Note that you will link your\nexecutable to the Pistache import library (.lib file) and, to run your\nprogram, you will ensure that your $env:path includes the location of\nthe Pistache DLL; Windows then loads the Pistache DLL when your\nexecutable runs, based on the information provided in the .lib file.\n\nNote also that you do not need to link to or load pistachelog.dll in\nany way. pistachelog.dll's only purpose is to provide a place to keep\ncertain strings that are needed when registering the Pistache logging\nmanifest with Windows logging (see \"Logging\" below).\n\nIf you prefer not to use msvcsetup.ps1 or gccsetup.ps1, dependencies\ncan be installed manually and the environment can be configured\nmanually. See the later \"Dependencies and Configuration\" section\nbelow.\n\n\nLogging\n=======\n\nIn Windows, Pistache uses the ETW (\"Event Tracing\") system for logging.\n\nFor events above level DEBUG, the event is sent to the Windows\nApplication channel. This makes events appear in Windows Event\nViewer. You can see the Pistache events in Event Viewer under Windows\nLogs / Application, looking for Source type Pistache.\n\nDEBUG events (in Pistache debug builds) are sent to the Pistache debug\nchannel.\n\nSince DEBUG events are not consumed automatically by EventViewer via the\nApplication channel, you will need another event consumer to record the\nevents. You can use the Windows utility logman.exe.\n\nTo use logman, you can do:\n  logman start -ets Pistache -p \"Pistache-Provider\" 0 0 -o pistache.etl\n Then run your program, which you want to log.\n Once your program is complete, you can do:\n  logman stop Pistache -ets\nThis causes the log information to be written out to pistache.etl\n\nYou can view the etl file:\n  1/ Use Event Viewer. (In Event Viewer, Action -> Open Saved Log, then\n     choose pistache.etl).\n  2/ Convert the  to XML:\n       tracerpt -y pistache.etl\n       Then view dumpfile.xml in a text editor or XML viewer\nAlternatively, you can have logman generate a CSV file instead of an .etl\nby adding the \"-f csv\" option to the \"logman start...\" command.\n\nlogman has many other options, do \"logman -?\" to see the list.\n\nTo use logging, you must also:\n 1/ First, copy pistachelog.dll to the predefined location\n    \"$env:ProgramFiles\\pistache_distribution\\bin\"\n 2/ Install the Pistache manifest file by doing:\n    wevtutil im \"pist_winlog.man\"\nThe Pistache build process will do both 1/ and 2/ automatically upon\nrunning \"meson build\" (e.g. when doing winscripts\\mesbuild.ps1).\n\nIf needed or preferred you can also cause Pistache log messages to be\nwritten to the console i.e. to \"stdout\". This is controlled by a\nregistry entry:\n  HKCU:\\Software\\pistacheio\\pistache\\psLogToStdoutAsWell\nA value of zero means, don't send to stdout; 1 means do send to\nstdout; and 10 means don't send to stdout even if the Pistache binary\nhas been preconfigured and built to send every log message to stdout.\nThe pistache build process creates the psLogToStdoutAsWell property\nautomatically, giving it an initial value of zero. You can change its\nvalue via the WIndows GUI using the Windows Registry Editor, or at\nPowerShell command line:\n  $psre_path = \"HKCU:\\Software\\pistacheio\\pistache\"\n  Set-ItemProperty -Path $psre_path -Name \"psLogToStdoutAsWell\" -Value 1\nPistache will respond dynamically while a program is running to a\nchange in psLogToStdoutAsWell's value, but typically you will set\npsLogToStdoutAsWell's value before you run your program.\n\nNote: To run mesinstall.ps1 or mesinstalldebug.ps1, you will typically\nhave to close Windows Event Viewer if it's open. Event Viewer holds\nopen the prior pistachelog.dll, preventing it being overwritten by the\nmeson install methods.\n\n\nDebug Builds\n============\n\nTo create and install a debug version of Pistache, do the following:\n  winscripts\\mesbuilddebug.ps1\n  winscripts\\mestestdebug.ps1\n  winscripts\\mesinstalldebug.ps1\n\nThe debug build can generate verbose debug log output if desired.\n\n\nDependencies and Configuration\n==============================\n\nIf installing dependencies by hand, install the following:\n  git\n  Either GCC or Visual Studio, or both\n  Windows Kits (aka Windows SDK)\n  vcpkg\n  pkg-config (aka pkgconf)\n  Ninja (comes automatically with Visual Studio)\n  Python3 (with PIP)\n  meson\n  doxygen\n  googletest\n  howard-hinnant-date\n  libevent\n  curl[openssl]\n  brotli (library)\n  zstd (library)\n\nAdd the locations of the above utilities and libraries to\n$env:path. Note that $env:path is used by Windows to look for\nexecutables, but also to look for the locations of DLLs.\n\nSet $env:PKG_CONFIG_PATH to point to the location(s) of your\npkg-config information. If you have installed some components using\nvcpkg, you will likely want to include:\n  <vcpkg base directory>\\installed\\x64-windows\\lib\\pkgconfig\nin your $env:PKG_CONFIG_PATH.\n\nFor GCC builds:\n  $env:CXX=\"g++\"\n  $env:CC=\"gcc\"\nFor Visual Studio builds, set:\n  $env:CXX=\"cl\"\n  $env:CC=$env:CXX\n\nOnce you have built your executable that links to Pistache, if you\nfind that the executable exits silently when you try to run it, it\nprobably means that the executable is failing to find a needed DLL on\n$env:path, or it is finding the wrong version of a DLL. Try going to\nthe Windows GUI, open Windows Explorer, and double click on your\nexecutable - when the executable tries and fails to run, Windows may\nshow you an error message that tells you what is wrong.\n\n\nUsing A Source-Code Debugger\n============================\n\nA debugger such as Visual Studio Code can be used to debug binaries\nlinked to a Pistache debug build, locally or remotely.\n\nFor Visual Studio Code -\n\nFor GCC debug builds, include in your launch.json entry:\n  \"type\": \"cppdbg\",\n  \"MIMode\": \"gdb\",\n  \"miDebuggerPath\": \"C:\\\\msys64\\\\ucrt64\\\\bin\\\\gdb.exe\",\n  \"environment\": [\n      {\"name\": \"Path\", \"value\":\n      \"C:\\\\msys64\\\\ucrt64\\\\bin;${env:Path};<Pistache Build Directory>\\\\src;;C:\\\\vcpkg\\\\installed\\\\x64-windows\\\\bin;C:\\\\Program Files (x86)\\\\Windows Kits\\\\<Windows Version>\\\\bin\\\\<Windows SDK Version>\\\\x64\"},\n                 ],\n (Substituting in your <Pistache Build Directory>, <Windows Version>\n  and <Windows SDK Version>)\n\nFor Visual Studio debug builds, include in your launch.json entry:\n  \"type\": \"cppvsdbg\",\n  \"environment\": [\n      {\"name\": \"Path\", \"value\":\n      \"C:\\\\msys64\\\\ucrt64\\\\bin;${env:Path};<Pistache Build Directory>\\\\src;;C:\\\\vcpkg\\\\installed\\\\x64-windows\\\\bin;C:\\\\Program Files (x86)\\\\Windows Kits\\\\<Windows Version>\\\\bin\\\\<Windows SDK Version>\\\\x64\"},\n                 ],\n (Substituting in your <Pistache Build Directory>, <Windows Version>\n  and <Windows SDK Version>)\n\nYou can also use the native debugggers, i.e. the Visual Studio\ndebugger for Visual Studio debug builds, and gdb for GCC debug builds\n(note: gccsetup.ps1 configures gdb on the path if not already\ninstalled).\n\n\nDisabling Enhanced Security Configuration for Internet Explorer\n===============================================================\nOlder versions of Windows (e.g. Windows Server 2019) that default to\nInternet Explorer may block access to Internet downloads needed by the\nPistache setup scripts. To enable that Internet access:\n  Via the Windows GUI on Windows Server 2019, go to:\n    Server Manager > Local Server > IE Enhanced Security Configuration\n    Then, select Off for both Administrators and Users\n    And restart Internet Explorer\n  OR at a PowerShell prompt with admin rights, do:\n    $AdminKey = \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}\"\n    $UserKey = \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\"\n    Set-ItemProperty -Path $AdminKey -Name \"IsInstalled\" -Value 0\n    Set-ItemProperty -Path $UserKey -Name \"IsInstalled\" -Value 0\n    Stop-Process -Name Explorer\n\n\nTroubleshooting\n===============\nIf mingit is installed, and you get an error \"fatal exceeded maximum\ninclude depth\" on invoking git, you likely have a circular include in\nthe file \"$env:ProgramFiles\\Git\\etc\\gitconfig\". Open that gitconfig\nfile in an editor and comment out the line that looks like:\n  path = C:/Program Files/Git/etc/gitconfig\nYou can comment it out by placing a semicolon at the line's start:\n  ; path = C:/Program Files/Git/etc/gitconfig\n\nMore generally, if the setup script goes wrong in a hard-to-understand\nway, one thing to try is quitting the shell, starting a new shell, and\nrunning the script again.\n\n\nHow It Works\n============\nPistache on Windows works very much as it does on macOS, i.e. by using\nthe libevent library to provide the core event loop. Additionally, it\nuses the libevent mechanisms to emulate Linux-style or macOS-style\nedge-triggered events to the extent needed by Pistache, even though\nWindows native events are level-triggered not edge-triggered.\n"
        },
        {
          "name": "Building on macOS with cmake.txt",
          "type": "blob",
          "size": 2.23046875,
          "content": "# SPDX-FileCopyrightText: 2024 Duncan Greatwood\n#\n# SPDX-License-Identifier: Apache-2.0\n\nMaking Pistache on macOS with cmake\n===================================\n\nBuilding pistache using cmake is deprecated. Users are encouraged to\nuse Meson only when building from source. CMake build scripts are only\noffered for convenience to users who depend on them for some reason,\nsince they previously were the recommended way to build Pistache.\n\nIn addition to what is described in \"Making Pistache on macOS\", the\nfollowing are needed.\n\nbrew:\n  brew install cmake\n  brew install howard-hinnant-date\n\nAdditional convenience scripts can be used if helpful:\n  cmkbuild.sh - build release version using cmake\n  cmkbuilddebug.sh - build debug version using cmake\n\nIf using cmake, you should add some homebrew setup to your .bashrc/.zshrc:\n\n  if [ \"$(uname)\" == \"Darwin\" ]; then\n      MYBREWCMD=brew\n      if [[ $(uname -m) == 'x86_64' ]]; then\n          if [ -e \"/usr/local/bin/brew\" ]; then\n              MYBREWCMD=\"/usr/local/bin/brew\"\n          fi\n      else\n          if [ -e \"/opt/homebrew/bin/brew\" ]; then\n              MYBREWCMD=\"/opt/homebrew/bin/brew\"\n          fi\n      fi\n      if command -v ${MYBREWCMD} &> /dev/null\n      then\n          # Setup brew environment variables\n          #     HOMEBREW_PREFIX, HOMEBREW_CELLAR and HOMEBREW_REPOSITORY\n          # Also updates PATH, MANPATH and INFOPATH\n          eval \"$(${MYBREWCMD} shellenv)\"\n      fi\n      unset MYBREWCMD\n  fi\n\nAnd then also add to your .bashrc/.zshrc:\n  if command -v brew &> /dev/null\n  then\n      export HOMEBREW_LIB_DIR=$HOMEBREW_PREFIX/lib\n      export HOMEBREW_INC_DIR=$HOMEBREW_PREFIX/include\n  \n      if [ -d \"$HOMEBREW_LIB_DIR\" ]\n         then\n         export LD_LIBRARY_PATH=$HOMEBREW_LIB_DIR:$LD_LIBRARY_PATH\n      fi\n  \n      if [ -d \"$HOMEBREW_INC_DIR\" ]\n         then\n         export CFLAGS=\"-I$HOMEBREW_INC_DIR $CFLAGS\"\n         export CXXFLAGS=\"-I$HOMEBREW_INC_DIR $CXXFLAGS\"\n         export CPPFLAGS=\"-I$HOMEBREW_INC_DIR $CPPFLAGS\"\n      fi\n  fi\n\nNote: When using cmake on Linux (NOT macOS), you will need to manually\ninstall googletest. install_gtest_gmock.sh in this gist provides the\nmethod (verified on Ubuntu 22.04, April/2024):\n    https://gist.github.com/dlime/313f74fd23e4267c4a915086b84c7d3d\n"
        },
        {
          "name": "Building on macOS.txt",
          "type": "blob",
          "size": 4.0068359375,
          "content": "# SPDX-FileCopyrightText: 2024 Duncan Greatwood\n#\n# SPDX-License-Identifier: Apache-2.0\n\nPistache on macOS\n=================\n\nApple's clang compiler must be installed. It comes as part of\nXcode. If not already installed, at terminal command line do:\n  xcode-select --install\n\nHomebrew (also known as \"brew\") is required. If not already installed,\nfollow the Homebrew instructions to install:\n  In your browser: https://brew.sh/\n\nThe simplest way to install Pistache on macOS is to use brew. For the\nlatest version of Pistache, do:\n  brew install --HEAD pistache\nFor the most recent officially designated release, do:\n  brew install pistache\nWe normally suggest using the most recent (\"HEAD\") Pistache version.\nIn case of difficultly, please see later Troubleshooting note.\n\n\nBuilding Pistache from Source on macOS\n======================================\n\nIf you prefer not to install with brew, Pistache can be built from\nsource.\n\nInstall the necessary brew packages via terminal command line:\n  brew install meson\n  brew install doxygen\n  brew install googletest (skip this if installing with gcc - see later)\n  brew install openssl\n  brew install rapidjson\n  brew install howard-hinnant-date\n  brew install libevent\n  brew install brotli\n  brew install zstd\n(You may be able to skip howard-hinnant-date)\n\nConvenience shell scripts are provided to make the build. At terminal,\ndo:\n  bldscripts/mesbuild.sh\nTo test:\n  bldscripts/mestest.sh\nTo install:\n  bldscripts/mesinstall.sh\n\nSee later section for more details on teh conveinence scripts.\n\n\nTroubleshooting brew install on Intel Macs\n------------------------------------------\n\nOn some Intel-based MACs, when installing Pistache with brew you may\nsee errors like:\n    ==> meson setup build ...\n    Traceback (most recent call last):\n      File \"/usr/local/opt/meson/bin/meson\", line 5, in <module>\n        from mesonbuild.mesonmain import main\n    ModuleNotFoundError: No module named 'mesonbuild'\n    ...\n    Error: Testing requires the latest version of pistache\n\nThis a problem installing Python3, a dependency of meson. We found it\ncould be fixed by:\n  sudo mkdir /usr/local/Frameworks\n  sudo chown <your-user-name> /usr/local/Frameworks\n  (Substituting your own macOS username for <your-user-name>)\nNB: This applies solely to Intel-based Macs. Homebrew uses a different\nlocation for files on Apple-silicon(\"M\")/Arm-based MACs.\n\n\nBuilding with GCC\n-----------------\n\nBy default, Pistache on macOS builds with clang, which is the default\nApple compiler. If you prefer to use gcc, you can utilize the\ngccmacsetup.sh script provided by Pistache before doing the build,\nlike this:\n  source bldscripts/gccmacsetup.sh\n  bldscripts/mesbuild.sh\n  bldscripts/mestest.sh\n  bldscripts/mesinstall.sh\n\n\nConvenience Scripts\n-------------------\n\nThe following scripts cna be used in any environment except\nWindows. The meaning of each convenience script is as follows:\n  mesbuild.sh - build release version\n  mestest.sh - test release version\n  mesinstall.sh - install release version\n\n  mesbuilddebug.sh - build debug version\n  mestestdebug.sh - test debug version with meson\n  mesinstalldebug.sh - install debug version\n\nLinux-only scripts. Note - all environments except Linux use libevent\nby default. libevent is optional on Linux:\n  mesbuildflibev.sh - build version forcing libevent use\n  mestestflibev.sh - test version with libevent use\n  mesinstallflibev.sh - install version with libevent use\n\n  mesbuildflibevdebug.sh - build debug version forcing libevent use\n  mestestflibevdebug.sh - test debug version with libevent use\n  mesinstallflibevdebug.sh - install debug version with libevent use\n\nAlso:\n  clean.sh - remove build directories\n  gccmacsetup.sh - configure for GCC build on macOS\n\n\nBuilding with GCC\n-----------------\n\nBy default, Pistache on macOS builds with clang, which is the default\nApple compiler. If you prefer to use gcc, you can utilize the\ngccmacsetup.sh script provided by Pistache before doing the build,\nlike this:\n  source bldscripts/gccmacsetup.sh\n  bldscripts/mesbuild.sh\n  bldscripts/mestest.sh\n  bldscripts/mesinstall.sh\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.9423828125,
          "content": "# SPDX-FileCopyrightText: 2015 Mathieu Stefani\n#\n# SPDX-License-Identifier: Apache-2.0\n\ncmake_minimum_required (VERSION 3.11)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# @Feb/2024 - CMAKE_BUILD_TYPE_INIT is not defined in cmake documentation?\n# CMAKE_BUILD_TYPE is defined however\n# set(CMAKE_BUILD_TYPE_INIT Release)\n\n# Options are here, before project command, so we can use them in\n# choosing whether to set CMAKE_OSX_DEPLOYMENT_TARGET\noption(BUILD_SHARED_LIBS \"build shared library\" ON)\noption(PISTACHE_BUILD_TESTS \"build tests alongside the project\" ON)\noption(PISTACHE_ENABLE_FLAKY_TESTS \"if tests are built, also run ones that are known to be flaky\" OFF)\noption(PISTACHE_ENABLE_NETWORK_TESTS \"if tests are built, run ones needing network access\" OFF)\noption(PISTACHE_USE_SSL \"add support for SSL server\" OFF)\noption(PISTACHE_PIC \"Enable pistache PIC\" ON) # Position-independent code lib\noption(PISTACHE_BUILD_FUZZ \"Build fuzzer for oss-fuzz\" OFF)\n\nstring(TOLOWER \"${CMAKE_HOST_SYSTEM_NAME}\" CMAKE_HOST_SYSTEM_NAME_LOWER)\n\nif (CMAKE_HOST_SYSTEM_NAME_LOWER MATCHES \"darwin\")\n  if (PISTACHE_BUILD_TESTS OR PISTACHE_ENABLE_FLAKY_TESTS OR\n      PISTACHE_ENABLE_NETWORK_TESTS)\n    # On macOS (Dec/2023, Sonoma 14.2.1), GTest, installed by brew, used\n    # by pistache tests, requires macOS 14 or later\n\n    # Note: Must set CMAKE_OSX_DEPLOYMENT_TARGET before project\n    # command which means we can't test CMAKE_CXX_COMPILER_ID or APPLE\n    # which are not set until after project command\n    set(ENV{MACOSX_DEPLOYMENT_TARGET} \"14.0\")\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"14.0\")\n  endif()\nendif()\n\nfile(READ \"version.txt\" VERSION_FILE_RAW)\nstring(STRIP \"${VERSION_FILE_RAW}\" VERSION_FILE)\n\nproject (pistache\n    LANGUAGES C CXX\n    VERSION ${VERSION_FILE})\n\n# Must have \"project\" before can check for Clang/Apple/CMAKE_SYSTEM_PROCESSOR\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND APPLE AND\n    CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n  set(CMAKE_OSX_ARCHITECTURES \"arm64\" CACHE INTERNAL \"\" FORCE)\nendif()\n\nif(CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  add_compile_options(-DDEBUG=1)\nendif()\n\n# add_compile_options(-fsanitize=address)\n# add_link_options(-fsanitize=address)\n\nadd_compile_options(-Wall -Wextra -Wpedantic -Wconversion -Wno-sign-conversion -Wno-missing-field-initializers)\n\n# require fat LTO objects in static library\nif(CMAKE_INTERPROCEDURAL_OPTIMIZATION OR CMAKE_CXX_FLAGS MATCHES \"-flto\" OR CMAKE_CXX_FLAGS MATCHES \"-flto=thin\")\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n        add_compile_options(-ffat-lto-objects)\n    elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        add_compile_options(-flto=full)\n    endif()\nendif()\n\n# On Linux, libraries by default compile allowing external symbols to be\n# unresolved until the time of linking an executable (i.e. of linking\n# the library to the executable). On macOS by contrast we need to define\n# this \"-undefined dynamic_lookup\" option to avoid link errors on\n# linking the library when there are external dependencies\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND APPLE)\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS \"${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -undefined dynamic_lookup\")\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nif (PISTACHE_USE_SSL)\n    find_package(OpenSSL REQUIRED COMPONENTS SSL Crypto)\nendif ()\n\n# Set version numbers in a header file\n\nset(VERSION_MAJOR    ${pistache_VERSION_MAJOR})\nset(VERSION_MINOR    ${pistache_VERSION_MINOR})\nset(VERSION_PATCH    ${pistache_VERSION_PATCH})\nset(VERSION_GIT_DATE ${pistache_VERSION_TWEAK})\nconfigure_file (\n    \"include/pistache/version.h.in\"\n    \"include/pistache/version.h\"\n    @ONLY\n)\n\nadd_subdirectory (src)\n\n# For info on GTest::gtest GTest::gmock_main, see Pistache's\n# tests/CMakeLists.txt\nif (PISTACHE_BUILD_TESTS)\n    include(CTest)\n    find_package(GTest QUIET)\n    if (NOT GTEST_FOUND)\n    message(\"GoogleTest not found. Consider installing it on your system. Downloading it from source...\")\n    include(FetchContent)\n        FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG \"origin/main\"\n            GIT_SHALLOW true\n        )\n        set(BUILD_GMOCK OFF CACHE BOOL \"\")\n        FetchContent_GetProperties(googletest)\n        if(NOT googletest_POPULATED)\n            FetchContent_Populate(googletest)\n            add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n        endif()\n    endif()\n    add_subdirectory(tests)\nendif()\n\nif (PISTACHE_BUILD_FUZZ) \n    add_subdirectory(tests/fuzzers)\nendif()\n\n# format target\n\nadd_custom_target(format\n    COMMAND\n        ./tools/format.sh\n    WORKING_DIRECTORY\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\n# CMake 3.21 defines this automatically\nif (PROJECT_IS_TOP_LEVEL OR CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    install(CODE \"message(FATAL_ERROR \\\"Please use Meson to install Pistache.\nSee the README for details: https://github.com/pistacheio/pistache#building-from-source\\\")\")\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.70703125,
          "content": "<!--\nSPDX-FileCopyrightText: 2016 Mathieu Stefani\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Pistache\n\n[![N|Solid](pistache.io/static/img/logo.png)](https://www.github.com/pistacheio/pistache)\n\n[![linux](https://github.com/pistacheio/pistache/actions/workflows/linux.yaml/badge.svg)](https://github.com/pistacheio/pistache/actions/workflows/linux.yaml)\n[![autopkgtest](https://github.com/pistacheio/pistache/actions/workflows/autopkgtest.yaml/badge.svg)](https://github.com/pistacheio/pistache/actions/workflows/autopkgtest.yaml)\n[![codecov](https://codecov.io/gh/pistacheio/pistache/branch/master/graph/badge.svg)](https://codecov.io/gh/pistacheio/pistache)\n[![REUSE status](https://api.reuse.software/badge/github.com/pistacheio/pistache)](https://api.reuse.software/info/github.com/pistacheio/pistache)\n\nPistache is a modern and elegant HTTP and REST framework for C++. It is entirely written in pure-C++17[\\*](#linux-only) and provides a clear and pleasant API.\n\nPistache supports Linux, macOS, Windows and BSD (FreeBSD, OpenBSD, and\nNetBSD). To use in macOS, Windows, or BSD, see the respective files:\n*Building on macOS.txt*, *Building on Windows.txt* or *Building on BSD.txt*.\n\n## Documentation\n\nWe are still looking for a volunteer to document fully the API. In the mean time, partial documentation is available at [pistacheio.github.io/pistache/](https://pistacheio.github.io/pistache/). If you are interested in helping with this, please open an issue ticket.\n\nA benchmark comparison of Pistache to other C++ RESTful APIs was created by guteksan and is available [here](https://github.com/guteksan/REST-CPP-benchmark).\n\n## Articles, Tutorials & Videos\n\n* [Building an API in C++ With Pistache](https://levelup.gitconnected.com/building-an-api-in-c-with-pistache-413247535fd3)\n* [Adding a REST API with Pistache](https://www.youtube.com/watch?v=9BCO5W_Kw3Q)\n* [Slim Microservices with Pistache](https://www.dev-insider.de/schlanke-microservices-mit-pistache-a-87155e2f183e637103e19708200f8931/) (German)\n\n## Dependencies\n\nPistache has the following third party dependencies\n\n- [Meson](https://mesonbuild.com)\n- [Doxygen](https://www.doxygen.nl/)\n- [Googletest](https://github.com/google/googletest)\n- [OpenSSL](https://www.openssl.org/)\n- [RapidJSON](https://rapidjson.org/)\n- [Hinnant Date](https://github.com/HowardHinnant/date)\n- [brotli](https://www.brotli.org/)\n- [zstd](https://github.com/facebook/zstd)\n- [libevent](https://libevent.org/)\n\n## Contributing\n\nPistache is released under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0). Contributors are welcome!\n\nPistache was originally created by Mathieu Stefani (`@octal`). He continues to contribute to the maintainence and development of Pistache, supported by a team of volunteers. The maintainers can be reached  in `#pistache` on [Libera.Chat](https://libera.chat/) (ircs://irc.libera.chat:6697). Please come and join us!\n\nThe [Launchpad Team](https://launchpad.net/~pistache+team) administers the daily and stable Ubuntu pre-compiled packages.\n\n### Versioning\n\nThe version of the library's public interface (ABI) is not the same as the release version, but we plan to always guarantee that the major release version and the soname version will match after the 1.0 release; until that, the soname version will follow feature releases. The interface version is primarily associated with the _external_ interface of the library. Different platforms handle this differently, such as AIX, GNU/Linux, and Solaris.\n\nGNU Libtool abstracts each platform's idiosyncrasies away because it is more portable than using `ar(1)` or `ranlib(1)` directly. However, it is [not supported in Meson](https://mesonbuild.com/FAQ.html#how-do-i-do-the-equivalent-of-libtools-exportsymbol-and-exportregex) so we made do without it by setting the SONAME directly.\n\nWhen Pistache is installed it will normally ship:\n\n- `libpistache.so.X.Y.Z`: This is the actual shared-library binary file. The _X_, _Y_ and _Z_ values are the major, minor and patch interface versions respectively.\n\n- `libpistache.so.X.Y`: This is the _soname_ soft link that points to the binary file. It is what other programs and other libraries reference internally. You should never need to directly reference this file in your build environment.\n\n- `libpistache.so`: This is the _linker name_ entry. This is also a soft link that refers to the soname with the highest major interface version. This linker name is what is referred to on the linker command line.\n\n- `libpistache.a`: This is the _static archive_ form of the library. Since when using a static library all of its symbols are normally resolved before runtime, an interface version in the filename is unnecessary.\n\nIf your contribution has modified the interface, you may need to update the major or minor interface versions. Otherwise user applications and build environments will eventually break. This is because they will attempt to link against an incorrect version of the library -- or worse, link correctly but with undefined runtime behaviour.\n\nThe major version should be incremented when you make incompatible API or ABI changes. The minor version should be incremented when you add functionality in a backwards compatible manner. The patch version should be incremented when you make backwards compatible bug fixes. This can be done by modifying `version.txt` accordingly. Also remember to always update the commit date in the aformentioned file.\n\n## Precompiled Packages\n\nIf you have no need to modify the Pistache source, you are strongly recommended to use precompiled packages for your distribution. This will save you time.\n\n### Debian and Ubuntu\n\nPistache is available in the official repositories since Debian 12 and Ubuntu 23.10, under the package name `libpistache-dev`.\n\n### macOS\n\nPistache can be installed using the Homebrew package manager. See *Building on macOS.txt* for specifics.\n\n#### Supported Architectures\n\nCurrently Pistache is built and tested on a number of [architectures](https://wiki.debian.org/SupportedArchitectures). Some of these are suitable for desktop or server use and others for embedded environments. As of this writing we do not currently have any MIPS related packages that have been either built or tested.\n\n- amd64\n- arm64\n- armhf\n- i386\n- ppc64el\n- riscv64\n- s390x\n\n### Ubuntu PPA (Unstable)\n\nThe project builds [daily unstable snapshots](https://launchpad.net/~pistache+team/+archive/ubuntu/unstable) in a separate unstable PPA. To use it, run the following:\n\n```sh\n$ sudo add-apt-repository ppa:pistache+team/unstable\n$ sudo apt update\n$ sudo apt install libpistache-dev\n```\n\n### Ubuntu PPA (Stable)\n\nFrom time to time, the project transfers release packages into the [stable](https://launchpad.net/~pistache+team/+archive/ubuntu/stable) PPA. Run the following to install a stable package:\n\n```sh\n$ sudo add-apt-repository ppa:pistache+team/stable\n$ sudo apt update\n$ sudo apt install libpistache-dev\n```\n\n### Other Distributions\n\nPackage maintainers, please insert instructions for users to install pre-compiled packages from your respective repositories here.\n\n## Use via pkg-config\n\nIf you would like to automatically have your project's build environment use the appropriate compiler and linker build flags, [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/) can greatly simplify things. It is the portable international _de facto_ standard for determining build flags. The development packages include a pkg-config manifest.\n\n### GNU Autotools\n\nTo [use](https://autotools.io/pkgconfig/pkg_check_modules.html) with the GNU Autotools, as an example, include the following snippet in your project's `configure.ac`:\n\n```makefile\n# Pistache...\nPKG_CHECK_MODULES(\n    [libpistache], [libpistache >= 0.0.2], [],\n    [AC_MSG_ERROR([libpistache >= 0.0.2 missing...])])\nYOURPROJECT_CXXFLAGS=\"$YOURPROJECT_CXXFLAGS $libpistache_CFLAGS\"\nYOURPROJECT_LIBS=\"$YOURPROJECT_LIBS $libpistache_LIBS\"\n```\n\n### Meson\n\nTo use with Meson, you just need to add `dependency('libpistache')` as a dependency for your executable.\n\n```meson\nproject(\n    'MyPistacheProject',\n    'cpp',\n    meson_version: '>=0.55.0'\n)\n\nexecutable(\n    'MyPistacheExecutable',\n    sources: 'main.cpp',\n    dependencies: dependency('libpistache')\n)\n```\n\nIf you want to build the library from source in case the dependency is not found on the system, you can add this repository as a submodule in the `subprojects` directory of your project, and edit the `dependency()` call as follows:\n\n```meson\ndependency('libpistache', fallback: 'pistache')\n```\n\nIf you're using a Meson version older than 0.55.0 you'll have to use the \"older\" syntax for `dependency()`:\n\n```meson\ndependency('libpistache', fallback: ['pistache', 'pistache_dep'])\n```\n\nLastly, if you'd like to build the fallback as a static library you can specify it with the `default_options` keyword:\n\n```meson\ndependency('libpistache', fallback: 'pistache', default_options: 'default_library=static')\n```\n\n### CMake\n\nTo use with a CMake build environment, use the [FindPkgConfig](https://cmake.org/cmake/help/latest/module/FindPkgConfig.html) module. Here is an example:\n\n```cmake\ncmake_minimum_required(VERSION 3.6)\nproject(\"MyPistacheProject\")\n\nfind_package(PkgConfig)\npkg_check_modules(Pistache REQUIRED IMPORTED_TARGET libpistache)\n\nadd_executable(${PROJECT_NAME} main.cpp)\ntarget_link_libraries(${PROJECT_NAME} PkgConfig::Pistache)\n```\n\n### Makefile\n\nTo use within a vanilla makefile, you can call `pkg-config` directly to supply compiler and linker flags using shell substitution.\n\n```makefile\nCFLAGS=-g3 -Wall -Wextra -Werror ...\nLDFLAGS=-lfoo ...\n...\nCFLAGS+= $(pkg-config --cflags libpistache)\nLDFLAGS+= $(pkg-config --libs libpistache)\n```\n\n## Building from source\n\nTo download the latest available release, clone the repository over GitHub.\n\n```sh\n$ git clone https://github.com/pistacheio/pistache.git\n```\n\nTo build on macOS, Windows, or BSD, see the respective files *Building on macOS.txt*, *Building on Windows.txt* or *Building on BSD.txt*.\n\nContinuing the Linux instructions:\n\nNow, compile the sources:\n\n```sh\n$ cd pistache\n$ meson setup build                                 \\\n    --buildtype=release                             \\\n    -DPISTACHE_USE_SSL=true                         \\\n    -DPISTACHE_BUILD_EXAMPLES=true                  \\\n    -DPISTACHE_BUILD_TESTS=true                     \\\n    -DPISTACHE_BUILD_DOCS=false                     \\\n    -DPISTACHE_USE_CONTENT_ENCODING_BROTLI=true     \\\n    -DPISTACHE_USE_CONTENT_ENCODING_DEFLATE=true    \\\n    -DPISTACHE_USE_CONTENT_ENCODING_ZSTD=true    \\\n    --prefix=\"$PWD/prefix\"\n$ meson compile -C build\n$ meson install -C build\n```\n\nOptionally, you can also run the tests. You can skip tests requiring network access with `--no-suite=network`:\n\n```sh\n$ meson test -C build\n```\n\nBe patient, async_test can take some time before completing. And that's it, now you can start playing with your newly installed Pistache framework.\n\nSome other Meson options:\n\n| Option                                | Default | Description                                    |\n| ------------------------------------- | ------- | ---------------------------------------------- |\n| PISTACHE_USE_SSL                      | False   | Build server with SSL support                  |\n| PISTACHE_BUILD_TESTS                  | False   | Build all of the unit tests                    |\n| PISTACHE_BUILD_EXAMPLES               | False   | Build all of the example apps                  |\n| PISTACHE_BUILD_DOCS                   | False   | Build Doxygen docs                             |\n| PISTACHE_USE_CONTENT_ENCODING_BROTLI  | False   | Build with Brotli content encoding support     |\n| PISTACHE_USE_CONTENT_ENCODING_DEFLATE | False   | Build with deflate content encoding support    |\n| PISTACHE_USE_CONTENT_ENCODING_ZSTD    | False   | Build with zstd content encoding support       |\n\n## Example\n\n### Hello World (server)\n\n```cpp\n#include <pistache/endpoint.h>\n\nusing namespace Pistache;\n\nstruct HelloHandler : public Http::Handler {\n  HTTP_PROTOTYPE(HelloHandler)\n  void onRequest(const Http::Request&, Http::ResponseWriter writer) override {\n    writer.send(Http::Code::Ok, \"Hello, World!\");\n  }\n};\n\nint main() {\n  Http::listenAndServe<HelloHandler>(Pistache::Address(\"*:9080\"));\n}\n```\n\n## Tutorials\n\n* [Adding a REST API with Pistache](https://www.youtube.com/watch?v=9BCO5W_Kw3Q), Utah Cpp Programmers, 20 July 2022.\n\n## Project status\n\nPistache hasn't yet hit the 1.0 release. This means that the project is _unstable_ but not _unusable_. In fact, most of the code is production ready; you can use Pistache to develop a RESTful API without issues, but the HTTP client has a few issues in it that make it buggy.\n\n<b id=\"linux-only\">\\*</b> While most code uses modern C++, Pistache makes use of some platform-specific APIs where the standard library doesn't provide alternatives. If you know how to help, please contribute a PR to add support for your desired platform :)\n"
        },
        {
          "name": "bldscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "homebrew",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "macOS Implementation.txt",
          "type": "blob",
          "size": 4.833984375,
          "content": "# SPDX-FileCopyrightText: 2024 Duncan Greatwood\n#\n# SPDX-License-Identifier: Apache-2.0\n\nImplementation of Pistache on macOS\n===================================\n\nmacOS lacks three OS capabilities used by Pistache: epoll, eventfd,\nand timerfd_create. Of these, epoll is the most significant.\n\nmacOS does have a capability kqueue, which is similar in principle to\nepoll. However, rather than using kqueue directly, we have used the\nlibrary libevent which wraps native OS event-loop capabilities. Using\nlibevent: i) Could ease future ports to other operating systems beyond\nLinux and macOS; and ii) Enables a \"libevent mode\" Pistache to be\nbuilt and tested on Linux, not just on macOS.\n\nThe libevent-mode implementation uses an opaque class EmEvent. In\nlibevent-mode, the Pistache type 'Fd' is defined to be an\n'EmEvent*'. Of course, in standard mode Pistache defines Fd to be a\nLinux file descriptor i.e. an int.\n\nThe Linux eventfd and timerfd capabilities are provided by opaque\nclasses EmEventFd and EmEventTmrFd, which inherit from EmEvent.\n\nWith Fd defined to be EmEvent*, very little change is needed to the\nmain Pistache code. In a few places, an actual file descriptor\n(i.e. an int) has to be extracted from the EmEvent via a function\ncall.\n\nThe reason why we use a raw C pointer EmEvent* for Fd, rather than a\nstd::shared_ptr for instance, is to make the behavior as a similar as\npossible to that of a conventional file descriptor. A conventional\nfile descriptor, just like a raw C pointer, must be freed (\"closed\")\nexplicitly in order to release its resources.\n\nThe implementation for macOS is largely contained to the two files\neventmeth.h and eventmeth.cc. The eventmeth.h file defines the class\nEventMethEpollEquiv, through which everything takes places. The\ninternals of EmEvent, EmEventFd and EmEventTmrFd are contained to\neventmeth.cc, and remain opaque to the rest of the code base. The use\nof libevent itself is also contained in eventmeth.cc; the rest of the\ncode base doesn't \"know\" that libevent is being used.\n\nSome new logging capabilities are included, which write to syslog or\nos_log on Linux or macOS respectively.\n\nThis version has been tested on macOS Sonoma 14.4.1 on an M3 MacBook\nAir (arm64); on macOS Monterey v12.7.2 2015 Intel MacBook Pro\n(x86_64); and on Ubuntu 22.04.4 LTS. It ran overnight in each\nenvironment repeatedly executing the Pistache test suite without\nerror. It also ran successfully in macOS and Linux as part of an\napplication that reads and writes to the Azure blob API.\n\nPorting to macOS revealed a number of issues in the existing Pistache\nimplementation, which have been addressed as part of the port:\n  1. A mutex is required for access to requestsQueues in client.cc, to\n  make sure the queues are not corrupted by being accessed from\n  multiple threads.\n  2. A mutex is required to protect the peers_ unordered_map in\n  transport.h/.cc. See comment in code for more specifics.\n  3. https_server_test modified so curl_global_init is called only once\n  (see comment in the code).\n  4. The C pointer 'Handler::Reactor* reactor_' was allowing a Reactor\n  instance to be accessed after the Reactor destructor was\n  called. Fixed by allowing deregistering of\n  pollers/handlers/reactors, and also by protecting the deregistering\n  with a mutex. See comment in code for details.\n  5. Made getPeer in transport return a shared_ptr to Peer, NOT a\n  reference to a shared_ptr. Previously, the reference returned by\n  getPeer was to a shared_ptr stored in the map peers_ - so if the\n  entry was removed from peers_, or peers_ went out of scope, the\n  reference could refer to a shared_ptr that no longer existed. This\n  was causing access to memory after free, showing up in github\n  workflows in http_server_test in force-libevent mode.\n  6. Rather than closing a peer's Fd directly in transport\n  (Transport::removePeer in transport.cc), now call peer->closeFd(),\n  which not only closes the Fd but allows peer to set it's fd_ to\n  empty, helping ensure that the Fd is closed exactly once. This,\n  together with the above getPeer fix, fixes a memory/Fd leak that was\n  showing up in github workflows in http_server_test in force-libevent\n  mode, and also fixes memory leak in test streaming_test\n  ClientDisconnect.\n  7. Introduced a handling_mutex, owned by client Transport\n  (client.cc). This mutex is claimed by Transport::onReady, and also\n  claimed when an Fd is being closed, to stop an Fd that is about to\n  be processed by onReady being closed/freed before onReady handling\n  can reach it. See comments in Client::shutdown for more.\n    \nOf these issues, all were seen in practice while testing. None are\nhuge changes at all; the fix for #4 is the \"biggest\" in that it\ntouches multiple points in the code.  None of the issues are macOS\nspecific; the issues showed up in macOS due to differences in timing,\nthreading and heap/memory management in macOS and/or libevent\nvs. Linux and/or epoll.\n\n\n\n\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 9.64453125,
          "content": "# SPDX-FileCopyrightText: 2021 Andrea Pappacoda\n#\n# SPDX-License-Identifier: Apache-2.0\n\nproject(\n\t'pistache',\n\t'cpp',\n        version: '0.3.0', # In Meson 0.57 this can be replaced with files('version.txt')\n\tlicense: 'Apache-2.0',\n\tdefault_options: [\n\t\t'cpp_std=c++17',\n\t\t'buildtype=release',\n\t\t'b_ndebug=if-release',\n\t\t'b_lto=false',\n\t\t'warning_level=3'\n\t],\n\tmeson_version: '>=0.53.2'\n)\n\nfs = import('fs')\n\n#macOS host_machine.system() is 'darwin'\n\nif host_machine.system() != 'linux' and host_machine.system() != 'darwin' and host_machine.system() != 'windows' and not host_machine.system().endswith('bsd')\n\terror('Pistache currenly only supports Linux, macOS, Free/Open/NetBSD and Windows.')\nendif\n\ncompiler = meson.get_compiler('cpp')\n\n# Wrapping arguments inside a call to get_supported_arguments so that only supported arguments get applied\n# No need for -Wall -Wextra -Wpedantic, since warning_level is 3\nadd_project_arguments(compiler.get_supported_arguments(['-Wconversion', '-Wno-sign-conversion', '-Wno-missing-field-initializers']), language: 'cpp')\n\n# No need for --coverage, since b_coverage is set\nif get_option('b_coverage')\n\tadd_project_arguments(compiler.get_supported_arguments(['-fstack-protector-all', '--param=ssp-buffer-size=4']), language: 'cpp')\nendif\n\ndeps_libpistache = [\n\tdependency('threads')\n]\npublic_deps = []\n\n#Check if compiler supports C++20 date\n\ncxx_chrono_date_check_code = '''\n#include <chrono>\n#include <format>\n#if defined(__cpp_lib_format) && (__cpp_lib_format >= 201907L) && \\\n    defined(__cpp_lib_chrono) && (__cpp_lib_chrono >= 201907L)\n// OK\n#else\n#error \"no\"\n#endif\n'''\nhas_working_cxx_chrono_date = compiler.compiles(cxx_chrono_date_check_code, name: 'C++20 std::chrono')\n\nif (not has_working_cxx_chrono_date)\n    # howardhinnant/date has several names - look for them, from the most\n    # to the least explicit name.\n    # In Meson 0.60.0, this can be replaced with a simpler:\n    #\n    #     dependency('howardhinnant-date', 'hinnant-date', 'date')\n    #\n    date_dep = dependency('howardhinnant-date', required: false)\n    if not date_dep.found()\n        date_dep = dependency('hinnant-date', required: false)\n    endif\n    if not date_dep.found()\n        date_dep = dependency('date', fallback: ['hinnant-date', 'date_dep'])\n    endif\n    deps_libpistache += date_dep\nelse\n    add_project_arguments('-DPISTACHE_USE_STD_CHRONO', language: 'cpp')\nendif\n\nif get_option('PISTACHE_USE_RAPIDJSON')\n\trapidjson_dep = dependency('RapidJSON', fallback: ['rapidjson', 'rapidjson_dep'])\n\tdeps_libpistache += rapidjson_dep\n\tpublic_deps += rapidjson_dep\nendif\n\n# Support Zstd compressed Content-Encoding responses...\nif get_option('PISTACHE_USE_CONTENT_ENCODING_ZSTD')\n\n  #Need Zstd encoder for library...\n  zstd_dep = dependency('libzstd')\n  deps_libpistache += zstd_dep\n  public_deps += zstd_dep\nendif\n\n# Support Brotli compressed Content-Encoding responses...\nif get_option('PISTACHE_USE_CONTENT_ENCODING_BROTLI')\n\n\t# Need Brotli encoder for library...\n\tbrotli_dep = dependency('libbrotlienc')\n\tdeps_libpistache += brotli_dep\n\tpublic_deps += brotli_dep\nendif\n\n# Support deflate compressed Content-Encoding responses...\nif get_option('PISTACHE_USE_CONTENT_ENCODING_DEFLATE')\n\n\t# Need zlib...\n\tzlib_dep = dependency('zlib')\n\tdeps_libpistache += zlib_dep\n\tpublic_deps += zlib_dep\nendif\n\nif host_machine.system() == 'windows'\n    # We have to use find_library unless the library is one of the\n    # special ones documented here:\n    # https://mesonbuild.com/Dependencies.html#dependencies-with-custom-lookup-functionality\n    # If the library is one of the \"special ones\", we can simply do\n    # deps_libpistache += <library-name> as we do for zlib above for\n    # instance\n\n    ws2_32_dep = compiler.find_library('Ws2_32', required: true)\n    deps_libpistache += ws2_32_dep\n\n    dbghelp_dep = compiler.find_library('dbghelp', required: true)\n    deps_libpistache += dbghelp_dep # for __unDName\n\n    iphlpapi_dep = compiler.find_library('Iphlpapi', required: true)\n    deps_libpistache += iphlpapi_dep # for GetAdaptersAddresses\n\n    mswsock_dep = compiler.find_library('Mswsock', required: true)\n    deps_libpistache += mswsock_dep # for TransmitFile\nendif\n\n# Check if -latomic is needed - https://github.com/llvm/llvm-project/blob/main/llvm/cmake/modules/CheckAtomic.cmake\ncompiler_id = compiler.get_id()\n\ncxx_atomics_check_code = '''\n#include <atomic>\nstd::atomic<int> x;\nstd::atomic<short> y;\nstd::atomic<char> z;\nint main() {\n\t++z;\n\t++y;\n\treturn ++x;\n}\n'''\nhas_working_cxx_atomics = compiler.links(cxx_atomics_check_code, name: 'std::atomic')\nif (compiler_id == 'clang' or compiler_id == 'gcc') and not has_working_cxx_atomics\n\tlibatomic_dep = compiler.find_library('atomic')\n\thas_working_cxx_atomics = compiler.links(cxx_atomics_check_code, dependencies: libatomic_dep, name: 'std::atomic with libatomic')\n\tassert(has_working_cxx_atomics, 'Host compiler must support std::atomic')\n\tdeps_libpistache += libatomic_dep\nendif\n\ncxx_atomics64_check_code = '''\n#include <atomic>\n#include <cstdint>\nstd::atomic<uint64_t> x (0);\nint main() {\n\tuint64_t i = x.load(std::memory_order_relaxed);\n\t(void)i;\n\treturn 0;\n}\n'''\nhas_working_cxx_atomics64 = compiler.links(cxx_atomics64_check_code, name: 'std::atomic<uint64_t>')\nif (compiler_id == 'clang' or compiler_id == 'gcc') and not has_working_cxx_atomics64\n\tlibatomic_dep = compiler.find_library('atomic')\n\thas_working_cxx_atomics = compiler.links(cxx_atomics64_check_code, dependencies: libatomic_dep, name: 'std::atomic<uint64_t> with libatomic')\n\tassert(has_working_cxx_atomics, 'Host compiler must support 64-bit std::atomic')\n\tdeps_libpistache += libatomic_dep\nendif\n\n# Workaround https://github.com/pistacheio/pistache/issues/1068\nif compiler_id == 'gcc' and compiler.version().version_compare('<9.1') or compiler_id == 'clang'\n\tcpp_fs_dep = compiler.find_library('stdc++fs', required: false)\n\tif not cpp_fs_dep.found()\n\t\tcpp_fs_dep = compiler.find_library('c++fs', required: false)\n\tendif\n\tif cpp_fs_dep.found()\n\t\tdeps_libpistache += cpp_fs_dep\n\tendif\nendif\n\nif get_option('PISTACHE_USE_SSL')\n\topenssl_dep = dependency('openssl')\n\tdeps_libpistache += openssl_dep\n\tpublic_deps += openssl_dep\nendif\n\nif host_machine.system() == 'darwin' or host_machine.system() == 'windows' or host_machine.system().endswith('bsd') or get_option('PISTACHE_FORCE_LIBEVENT')\n\tdeps_libpistache += dependency('libevent')\n        if (not (host_machine.system() == 'windows'))\n                # It looks like libevent assumes windows threads in\n                # windows, at least by default, and libevent_pthreads\n                # is not built on windows\n                deps_libpistache += dependency('libevent_pthreads')\n        endif\nendif\n\nif host_machine.system().endswith('bsd')\n        # libexecinfo is included for the 'backtrace' function\n        libexecinfo_dep = compiler.find_library('execinfo')\n\n        deps_libpistache += libexecinfo_dep\nendif\n\nif host_machine.system() != 'windows'\n        # libdl may be required for function dladdr, used in logStackTrace,\n        # which is called by PS_LogWoBreak, used in turn by the stack-trace\n        # logging macro PS_LOG_WO_BREAK_LIMITED and its derivatives. Issue\n        # #1230.\n        # Note: If 'dl' is not available, per Meson it suggests that the\n        # functionality is provided by libc\n\n        # It would be nice to use compiler.has_function('dladdr') to test if\n        # we need to add libdl, but unfortunately that approach seems to break\n        # certain Redhat builds, specifically the Redhat builds that use\n        # ubi-8. In such cases, it appears meson creates a test file that\n        # includes the comment:\n        #   With some toolchains ... the compiler provides various builtins\n        #   which are not really implemented... [If] the user provides a\n        #   header, including the header didn't lead to the function being\n        #   defined, and the function we are checking isn't a builtin itself,\n        #   we assume the builtin is not functional and error out\n        # To avoid generating such an error, we take the simpler approach of\n        # trying to add libdl but making it optional (i.e. not required).\n        if meson.version().version_compare('>=0.62.0')\n          deps_libpistache += dependency('dl', required: false)\n        else\n          deps_libpistache += compiler.find_library('dl', required: false)\n        endif\nendif\n\nversion_array = []\nif meson.version().version_compare('>=0.57.0')\n\tversion_array = fs.read('version.txt').strip().split('.')\nelse\n\t# Ugly workaround for reading a file\n\tversion_array = run_command(\n\t\tfind_program('python3'), '-c', 'print(open(\"version.txt\").read())',\n\t\tcheck: true\n\t).stdout().strip().split('.')\nendif\n\nversion_major    = version_array[0]\nversion_minor    = version_array[1]\nversion_patch    = version_array[2]\nversion_git_date = version_array[3]\nversion_str      = '@0@.@1@.@2@'.format(version_major, version_minor, version_patch)\n\nversion_conf = configuration_data()\nversion_conf.set('VERSION_MAJOR',    version_major)\nversion_conf.set('VERSION_MINOR',    version_minor)\nversion_conf.set('VERSION_PATCH',    version_patch)\nversion_conf.set('VERSION_GIT_DATE', version_git_date)\n\nincl_pistache = include_directories('include')\n\nsubdir('include'/'pistache')\nsubdir('src')\nif get_option('PISTACHE_BUILD_TESTS') and not get_option('PISTACHE_USE_RAPIDJSON')\n    error('Pistache tests require rapidjson support')\nendif\n\nif get_option('PISTACHE_BUILD_TESTS')\n\tsubdir('tests')\nendif\nif get_option('PISTACHE_BUILD_EXAMPLES')\n\tsubdir('examples')\nendif\nif get_option('PISTACHE_BUILD_DOCS')\n\tsubdir('docs')\nendif\n\nif not meson.is_subproject()\n\tgit = find_program('git', required: false)\n\tif git.found() and fs.is_dir(meson.source_root()/'.git')\n\t\trun_command(git, 'config', '--local', 'core.hooksPath', meson.source_root()/'.hooks', check: false)\n\tendif\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.4599609375,
          "content": "# SPDX-FileCopyrightText: 2021 Andrea Pappacoda\n#\n# SPDX-License-Identifier: Apache-2.0\n\noption('PISTACHE_BUILD_TESTS', type: 'boolean', value: false, description: 'build tests alongside the project')\noption('PISTACHE_BUILD_EXAMPLES', type: 'boolean', value: false, description: 'build examples alongside the project')\noption('PISTACHE_BUILD_DOCS', type: 'boolean', value: false, description: 'build docs alongside the project')\noption('PISTACHE_INSTALL', type: 'boolean', value: true, description: 'add pistache as install target (recommended)')\noption('PISTACHE_USE_SSL', type: 'boolean', value: false, description: 'add support for SSL server')\noption('PISTACHE_USE_RAPIDJSON', type: 'boolean', value: true, description: 'add support for rapidjson')\noption('PISTACHE_USE_CONTENT_ENCODING_BROTLI', type: 'boolean', value: false, description: 'add support for Brotli compressed content encoding')\noption('PISTACHE_USE_CONTENT_ENCODING_ZSTD', type: 'boolean', value: false, description: 'add support for Zstandard compressed content encoding')\noption('PISTACHE_USE_CONTENT_ENCODING_DEFLATE', type: 'boolean', value: false, description: 'add support for deflate compressed content encoding')\noption('PISTACHE_DEBUG', type: 'boolean', value: false, description: 'with debugging code')\noption('PISTACHE_LOG_AND_STDOUT', type: 'boolean', value: false, description: 'send log msgs to stdout too')\noption('PISTACHE_FORCE_LIBEVENT', type: 'boolean', value: false, description: 'force use of libevent')\n"
        },
        {
          "name": "pistache.io",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.015625,
          "content": "0.4.29.20250106\n"
        },
        {
          "name": "version.txt.license",
          "type": "blob",
          "size": 0.0751953125,
          "content": "SPDX-FileCopyrightText: 2019 Kip Warner\n\nSPDX-License-Identifier: Apache-2.0\n"
        },
        {
          "name": "winscripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}