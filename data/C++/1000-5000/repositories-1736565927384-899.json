{
  "metadata": {
    "timestamp": 1736565927384,
    "page": 899,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "meganz/MEGAcmd",
      "stars": 1981,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 2.7958984375,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n*.lo\n*.pyc\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Autotool stuff\n.deps\n/Makefile\n/include/Makefile\nMakefile.in\naclocal.m4\nautom4te.cache\n/include/mega/config.h\n/include/mega/config.h.in\nconfigure\ndepcomp\n*.swp\ninstall-sh\nlibtool\nltmain.sh\nmissing\n.libs\nstamp-h1\n.dirstamp\nlibmega.pc\n*.db\n.ycm_extra_conf.py\ntest-driver\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\ncompile\nclean\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\npy-compile\n\n# Editor and IDE stuff\n*~\n.project\n.cproject\n.settings\n*~\nDebug\nRelease\n*.pro.user*\n\nmegaclient_statecache*\n\n\nmega-cmd\nmega-exec\nmega-cmd-server\nmega-cmd-integration-tests\nmega-cmd-unit-tests\n\n/contrib/QtCreator/MEGAcmd/MEGAcmd.pro.user\n/contrib/QtCreator/MEGAcmd/MEGAcmd\n/contrib/QtCreator/MEGAcmd/Makefile\n/contrib/QtCreator/MEGAcmd/moc_*.cpp\nsrc/build/Release_x64\nMEGAcmdServer.pro.user\n/src/build/megacmd/megacmd.dsc\n/src/build/megacmd/megacmd.spec\n/src/build/megacmd/megacmd_*.tar.gz\n/src/build/megacmd/PKGBUILD\n/contrib/QtCreator/MEGAcmd/MEGAcmdClient/MEGAclient\n/contrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile\n/contrib/QtCreator/MEGAcmd/MEGAcmdShell/MEGAcmdShell\n/contrib/QtCreator/MEGAcmd/MEGAcmdUpdater/MEGAcmdUpdater\n/contrib/QtCreator/MEGAcmd/MEGAcmdServer/MEGAcmd\n/contrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile\n/contrib/QtCreator/MEGAcmd/MEGAcmdLoader/MEGAcmdLoader\n/contrib/QtCreator/MEGAcmd/MEGAcmdLoader/Makefile\n/contrib/QtCreator/build-*\n\n\n#built stuff\nbuild/archives\nbuild/megacmd-*\nmegacmdconfig.h\nmegacmdconfig.h.in\n/build/megacmd/PKGBUILD\n/build/megacmd/megacmd.dsc\n/build/megacmd/megacmd.spec\n/build/megacmd/megacmd_*.tar.gz\n/build/build-cmake-*\n/build/cmake/CMakeLists.txt.user\ncontrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile.Debug\ncontrib/QtCreator/MEGAcmd/.qmake.stash\ncontrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile.Debug\ncontrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile.Release\ncontrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile.Release\ncontrib/QtCreator/MEGAcmd/MEGAcmdUpdateGenerator/Makefile*\ncontrib/QtCreator/MEGAcmd/MEGAcmdUpdater/Makefile*\ncontrib/QtCreator/MEGAcmd/build-*\ncontrib/QtCreator/*/Makefile\ncontrib/QtCreator/*/*/Makefile\ncontrib/QtCreator/*/*/*/Makefile\ntest_integration\ntest_unit\n.qtc_clangd\nCMakeFiles\nbuild-x64-windows-mega\nMakefile.Debug\nMakefile.Release\n\nbuild/Release_x64\n/build/megacmd/megacmd*.dsc\n\n#git stuff\n*_BACKUP_*\n*_BASE_*\n*_LOCAL_*\n*_REMOTE_*\n.git\n\n#backups\n*_bk\ncompile_commands.json\nbuild/cmake/.cmake/\nbuild/cmake/CMakeCache.txt\nbuild/cmake/CMakeCache.txt.prev\nbuild/cmake/Makefile\nbuild/cmake/Testing/\nbuild/cmake/cmake_install.cmake\nbuild/cmake/compile_commands.json\nbuild/cmake/qtcsettings.cmake\n# Created by configure\nconfig.cache\n# Created by clangd\n.cache\nbuild-with-docker"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5625,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n*.lo\n*.pyc\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Autotool stuff\n.deps\n/Makefile\n/include/Makefile\nMakefile.in\naclocal.m4\nautom4te.cache\n/include/mega/config.h\n/include/mega/config.h.in\nconfigure\ndepcomp\n*.swp\ninstall-sh\nlibtool\nltmain.sh\nmissing\n.libs\nstamp-h1\n.dirstamp\nlibmega.pc\n*.db\n.ycm_extra_conf.py\ntest-driver\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\ncompile\nclean\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\npy-compile\n\n# Editor and IDE stuff\n*~\n.project\n.cproject\n.settings\n*~\nDebug\nRelease\n*.pro.user*\n\nmegaclient_statecache*\n\n\nmega-cmd\nmega-exec\nmega-cmd-server\nmega-cmd-integration-tests\nmega-cmd-unit-tests\n\n/contrib/QtCreator/MEGAcmd/MEGAcmd.pro.user\n/contrib/QtCreator/MEGAcmd/MEGAcmd\n/contrib/QtCreator/MEGAcmd/Makefile\n/contrib/QtCreator/MEGAcmd/moc_*.cpp\nsrc/build/Release_x64\nMEGAcmdServer.pro.user\n/src/build/megacmd/megacmd.dsc\n/src/build/megacmd/megacmd.spec\n/src/build/megacmd/megacmd_*.tar.gz\n/src/build/megacmd/PKGBUILD\n/contrib/QtCreator/MEGAcmd/MEGAcmdClient/MEGAclient\n/contrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile\n/contrib/QtCreator/MEGAcmd/MEGAcmdShell/MEGAcmdShell\n/contrib/QtCreator/MEGAcmd/MEGAcmdUpdater/MEGAcmdUpdater\n/contrib/QtCreator/MEGAcmd/MEGAcmdServer/MEGAcmd\n/contrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile\n/contrib/QtCreator/MEGAcmd/MEGAcmdLoader/MEGAcmdLoader\n/contrib/QtCreator/MEGAcmd/MEGAcmdLoader/Makefile\n/contrib/QtCreator/build-*\n\n\n#built stuff\nbuild/archives\nbuild/megacmd-*\nmegacmdconfig.h\nmegacmdconfig.h.in\n/build/megacmd/PKGBUILD\n/build/megacmd/megacmd.dsc\n/build/megacmd/megacmd.spec\n/build/megacmd/megacmd_*.tar.gz\n/build/build-cmake-*\n/build/cmake/CMakeLists.txt.user\nbuild/cmake/build_dir\ncontrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile.Debug\ncontrib/QtCreator/MEGAcmd/.qmake.stash\ncontrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile.Debug\ncontrib/QtCreator/MEGAcmd/MEGAcmdClient/Makefile.Release\ncontrib/QtCreator/MEGAcmd/MEGAcmdServer/Makefile.Release\ncontrib/QtCreator/MEGAcmd/MEGAcmdUpdateGenerator/Makefile*\ncontrib/QtCreator/MEGAcmd/MEGAcmdUpdater/Makefile*\ncontrib/QtCreator/MEGAcmd/build-*\ncontrib/QtCreator/*/Makefile\ncontrib/QtCreator/*/*/Makefile\ncontrib/QtCreator/*/*/*/Makefile\ntest_integration\ntest_unit\n.qtc_clangd\nCMakeFiles\nbuild-x64-windows-mega\nbuild-x86-windows-mega\nMakefile.Debug\nMakefile.Release\n\n/Makefile*\nbuild/Release_x64\n/build/megacmd/megacmd*.dsc\n\nbuild/built64\nbuild/built32\n\n#git stuff\n*_BACKUP_*\n*_BASE_*\n*_LOCAL_*\n*_REMOTE_*\n\n#backups\n*_bk\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0693359375,
          "content": "[submodule \"sdk\"]\n\tpath = sdk\n\turl = https://github.com/meganz/sdk.git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6572265625,
          "content": "Copyright (c) 2013, Mega Limited\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe previous applies to all sources and binaries with the exception of\nthose explicitly distributed under the terms of the GNU General Public\nLicense (see http://www.gnu.org/copyleft/gpl.txt for details), and the\ninteractive MEGAcmdShell executables (mega-cmd in linux, MEGAcmdShell\nin MAC and MEGAcmdShell.exe in Windows), distributed under the \naforementioned GNU General Public License.\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 1.2958984375,
          "content": "##\n # @file Makefile.am\n # @brief an input file for automake tool\n # (c) 2013 by Mega Limited, Auckland, New Zealand\n #\n # This file is part of the MEGAcmd.\n #\n # MEGAcmd is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n #\n # @copyright Simplified (2-clause) BSD License.\n #\n # You should have received a copy of the license along with this\n # program.\n##\n\nAUTOMAKE_OPTIONS=foreign 1.9 subdir-objects\nACLOCAL_AMFLAGS=-I m4\n\nAM_CPPFLAGS = \\\n\t-I$(top_srcdir)/include -I$(top_srcdir)/third_party/utf8proc\n\n#include m4/aminclude.am\n\nAM_CPPFLAGS+=-I$(top_srcdir)/src -I$(top_srcdir)/sdk/include\n\nif WIN32\nAM_CPPFLAGS+=-I$(top_srcdir)/sdk/include/mega/win32\nelse\nAM_CPPFLAGS+=-I$(top_srcdir)/sdk/include/mega/posix\nendif\n\nif ANDROID\nAM_LIBTOOLFLAGS=\"--tag=CXX\"\nendif\n\nif LINUX\nAM_LIBTOOLFLAGS=\"--tag=CXX\"\nendif\n\nVERSION_INFO=$(LT_CURRENT):$(LT_REVISION):$(LT_AGE)\n\nCLEANFILES=\nDISTCLEANFILES=\nBUILT_SOURCES=\nnoinst_PROGRAMS=\n\nSUBDIRS = sdk\ninclude src/include.am\n\n#EXTRA_DIST += autogen.sh\n#EXTRA_DIST += libmega.pc.in\n#EXTRA_DIST += $(DX_CONFIG)\n#EXTRA_DIST += m4/ax_prog_doxygen.m4\n#EXTRA_DIST += m4/aminclude.am\n\n#pkgconfigdir=$(libdir)/pkgconfig\n#pkgconfig_DATA=libmega.pc\n\n#DISTCLEANFILES+=*~ libmega.pc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.828125,
          "content": "# MEGAcmd - Command Line Interactive and Scriptable Application\n\nMEGAcmd provides non UI access to MEGA services. It intends to offer all the \nfunctionality with your MEGA account via commands. It features **synchronization** \n, **backup** of local folders into your MEGA account and a **webdav/streaming** server. \n\nSee [`Usage Examples`](#usage-examples).\n\nAvailable packages for MEGAcmd in all supported platforms should be found \n[here](https://mega.nz/cmd). If the package fails to install, read below for the requirements.\n\n**It supports 2 modes of interaction:** \n\n- **Interactive** - A shell to query your actions\n- **Scriptable** - A way to execute commands from a shell/a script/another program\n\nIn order to provide those 2 modes, it features one server (**MEGAcmdServer**), an interactive shell (**MEGAcmdShell**) and several commands that will launch the non-interactive client (**MEGAcmdClient**). \n\nSee [`Usage`](#usage) and [`Platform`](#platforms) to understand how to use it in your particular system.\n\n# Building MEGAcmd\nIf you wish to build or install MEGAcmd, here are a list of requirements and instructions.\n\n## Requirements\n\nThe requirements are the same as those for the sdk (usually `cryptopp, zlib, sqlite3, cares, libuv, ssl, curl, sodium, readline` for platforms *other than Windows*. It is recommended to include `pcre` to have support for regular expressions.\n\nIn order to have support for thumbnails and previews, it is highly recommended to have `ffmpeg` (`libavcodec-dev libavutil-dev libavformat-dev libswscale-dev`) and `mediainfo`(`libmediainfo-dev + libzen-dev`) for media file attributes.\n\n**For convenience, here is a list of packages for common Linux Distros and precompiled third party dependencies for other Operative Systems:**\n * **Ubuntu 16.04**\n\t * `autoconf libtool g++ libcrypto++-dev libz-dev libsqlite3-dev libssl-dev libcurl4-openssl-dev libreadline-dev libpcre++-dev libsodium-dev libc-ares-dev libfreeimage-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libmediainfo-dev libzen-dev`\n\n * **Ubuntu 18.04**\n\t * `autoconf libtool g++ libcrypto++-dev libz-dev libsqlite3-dev libssl-dev libcurl4-gnutls-dev libreadline-dev libpcre++-dev libsodium-dev libc-ares-dev libfreeimage-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libmediainfo-dev libzen-dev libuv1-dev`\n\n * **Debian 9**\n\n\t* `libcrypto++ libpcrecpp0v5 libc-ares-dev zlib1g-dev libuv1 libssl-dev libsodium-dev readline-common sqlite3 curl autoconf libtool g++ libcrypto++-dev libz-dev libsqlite3-dev libssl-dev libcurl4-gnutls-dev libreadline-dev libpcre++-dev libsodium-dev libc-ares-dev libfreeimage-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libmediainfo-dev libzen-dev`\n\t* In some instanances you may need to run\n\t\t `apt install --reinstall build-essential`\n\n* **Windows and MacOS**\n\t* The simplest way to build on Windows and MacOS is to use CMake. In that case, all required dependencies will be downloaded and compiled automatically.\n\n## Getting the source\n\nEnsure you obtain the repository recursively.\n```\ngit clone https://github.com/meganz/MEGAcmd.git\ncd MEGAcmd && git submodule update --init --recursive\n```\n\n## Building and installing\n\n### With Autotools\nFor platforms with Autotools, MEGAcmd can be built and installed with:\n\n    sh autogen.sh\n    ./configure\n    make\n    make install\n    \n* You will need to run `make install` as root\n\n`Note`: if you use a prefix in configure, autocompletion from non-interactive usage\nwon't work. You would need to `source /YOUR/PREFIX/etc/bash_completion.d/megacmd_completion.sh` \n(or link it at /etc/bash_completion.d)\n\n### With CMake\nWith CMake, all third-party libraries and dependencies will be downloaded and compiled automatically in `../3rdparty_megacmd/`. Nothing else is required; the `build_from_scratch` script takes care of everything. Just navigate to `build/cmake/` and run:\n```\ncmake -DTRIPLET=<triplet> -P build_from_scratch.cmake\n```\n\nSome notes on the above command:\n* The `<triplet>` options are (depending on OS and architecture):\n\t* For Windows, either `x64-windows-mega` or `x86-windows-mega`\n\t* For MacOS, either `arm64-osx-mega` or `x64-osx-mega`\n* After third-party dependencies are downloaded, the build of the project itself may be controlled with an optional `-DTARGET` parameter (or multiple targets separated by semicolons)\n\t* If not provided, everything will be built (equivalent to `make all`)\n* On Windows\n\t* You can use a CMake version from a newer Visual Studio using the `-G` option (e.g., `-G Visual Studio 16 2019`)\n\t* The directory `../3rdparty_megacmd/vcpkg/installed/<triplet>/debug/bin/` (or `../3rdparty_megacmd/vcpkg/installed/<triplet>/bin` for release) must be added to `PATH` _as an absolute path_ to be able to run the executables properly\n\nIf the build is successful, the binaries will be located in `build-<triplet>/`.\n\n### With QtCreator\nYou can build with QtCreator by opening the Qt project file at `contrib/QtCreator/MEGAcmd/MEGAcmd.pro`.\n\n# Usage\n\nBefore explaining the two ways of interaction, it is important to understand how MEGAcmd works. When you login with MEGAcmd, your session, the list of synced folders, and some cache database are stored in your local home folder. MEGAcmd also stores some other configuration in that folder. Closing it does not delete those and restarting your computer will restore your previous session (the same as megasync won't ask for user/password once you restart your computer). \n\nYou will need to `logout` properly in order to clean your data.\n\nNow let's get into details of the two usage modes. Both modes require that MEGAcmdServer is running. You can manually launch it. Fortunately, you can also open the interactive shell or execute any command and the server will start automatically.\n\n## Interactively:\n\nExecute MEGAcmd shell. [`Platform`](#platforms) section explains how to do that in the different supported systems. You should be facing an interactive shell where you can start typing your commands, with their arguments and flags.\n\nYou can list all the available commands with `help`. \n\nAnd obtain useful information about a command with `command --help`\n\nFirst you would like to log in into your account. Again, notice that doing this stores the session and other stuff in your home folder. A complete logout is required if you want to end you session permanently and clean any traces (see `logout --help` for further info).\n\n## Non-interactively:\n\nWhen MEGAcmd server is running, it will be listening for client commands. Use the different `mega-*` commands available.\n\n`mega-help` will list all these commands (you will need to prepend \"mega-\" to the commands listed there). To obtain further info use `mega-command --help`.\n\nThose commands will have an output value != 0 in case of failure. \nSee [megacmd.h](https://github.com/meganz/MEGAcmd/blob/master/src/megacmd.h) to view the existing error codes.\n\nIdeally, you would like to have these commands in your `PATH` variable\n(See [`Platform`](#platforms) for more info). For further info use `mega-help --non-interactive`.\n\n## Usage examples\n\nHere are some examples of use (more info and usage examples are available at the [User Guide](UserGuide.md)).\n\n**Notice:** the commands listed here assume you are using the interactive interaction mode: they are supposed to be executed within MEGAcmdShell.\n\n\n* A **synchronization** can be established simply by typing:\n```\nsync /path/to/local/folder /folder/in/mega\n```\nThis will synchronize the contents in your local and your mega folder both ways.\n\n* You can also set remote **backups** of a local folder to keep historical snapshots of your files. So simple as:\n```\nbackup /path/mega/folder /remote/path --period=\"0 0 4 * * *\" --num-backups=10\n```\nThis will configure a backup of \"myfolder\" into /remote/path that will be carried out at 4:00 A.M. (UTC) every day. It will store the last 10 copies. \n \n Further info on backups [here](contrib/docs/BACKUPS.md). \n \n* You **serve a location** in your MEGA account via WebDAV:\n```\nwebdav /path/mega/folder\n```\n\n* Or **stream a file** in your MEGA account:\n```\nwebdav /path/to/myfile.mp4\n```\nFurther info on webdav and streaming [here](contrib/docs/WEBDAV.md). \n \n* **Download the contents** of a shared link:\n```\nget https://mega.nz/#F!ABcD1E2F!gHiJ23k-LMno45PqrSTUvw /path/to/local/folder \n```\n\nNow let's do something more complicated with non-interactive usage using some GNU tools (similar stuff can be easily done in Windows as well):\n\n* We want to provide something crypto secured with only 10 minutes of access:\n```\nmega-put /path/to/my/temporary_resource /exportedstuff/\nmega-export -a  /exportedstuff/temporary_resource --expire=10M | awk '{print $4}'\n```\n\n* Or imagine we'd like to public the enterprise promotional videos of May 2015 that we have previously stored in MEGA:\n```\nfor i in $(mega-find /enterprise/video/promotional2015/may --pattern=\"*mpeg\"); do \nmega-export -a $i | awk '{print $4}'; \ndone\n```\n\n# Platforms\n\n## Linux\n\nIf you have installed MEGAcmd using one of the available packages at [here](https://mega.nz/cmd).\n\nOr have it built without `--prefix`, both the server (`mega-cmd-server`), the shell (`mega-cmd`) and the different client commands (`mega-*`) will be in your `PATH` (on a fresh install, you might need to open your terminal again). \n\nIf you are using bash, you should also have autocompletion for client commands working. \n\nIf that is not you case, include the location for the binaries in your `PATH` variable.\n\n\n## Windows\nYou can have MEGAcmd installed using the installer from [here](https://mega.nz/cmd). \n\nIf you are interested in installing MEGAcmd without human intervention, notice that this installer supports silent installation, you just need to execute in your command prompt:\n```\nMEGAcmdSetup.exe /S\n```\n\nOnce you have MEGAcmd installed, you just need to execute it (via Desktop icon or Start Menu) to open the shell.  This will open MEGAcmdServer in the background (a process named MEGAcmdServer.exe).\n\nFor a better user experience (specially in Windows 7) we recommend executing MEGAcmd from PowerShell.\n\n**Open PowerShell and execute:**\n\n```\n$env:PATH += \";$env:LOCALAPPDATA\\MEGAcmd\"\nMEGAcmdShell\n```\n\nFor *non-interactive* usage, there are several `mega-*.bat`  client commands you can \nuse writting their absolute paths, or including their location into your environment `PATH`\n and execute them normally (`mega-*`).\n \nIf you use PowerShell and you have installed the official MEGAcmd, you can do that simply with:\n\n```\n$env:PATH += \";$env:LOCALAPPDATA\\MEGAcmd\"\n```\n\nClient commands completion requires bash, hence, it is not available for Windows.\n\n### Caveats\nAlthough there have been several efforts in having non-ASCII unicode characters supported \nin Windows, there still may be some issues. Pay special attention if you are willing to use pipes or \nsend the output of a command into a file from your client commands. See `help --unicode`\nfor further info regarding that.\n\n## MacOS \n\nInstall MEGAcmd from [here](https://mega.nz/cmd).\n\nFor MacOS, after installing the dmg, you can launch the server using MEGAcmd in Applications. If you wish to use the client commands from MacOS Terminal, open the Terminal and include the installation folder in the `PATH`.\n\n**Typically:**\n\n```\nexport PATH=/Applications/MEGAcmd.app/Contents/MacOS:$PATH\n```\n\nAnd for **bash completion**, source `megacmd_completion.sh`:\n\n```\nsource /Applications/MEGAcmd.app/Contents/MacOS/megacmd_completion.sh\n```\n\n## NAS systems\nCurrently we have build scripts for **Synology** and **QNAP**, which can be found in the `build/<system>` folder along with instructions on how to set up the build.  Typically this results in a 'package' which can then be manually installed in the NAS.   To use MEGAcmd on those systems, ssh into the device and run the commands as normal (having first added their folder to your `PATH` variable).\n\n*Important note for MacOS Catalina or above: since Catalina, MacOS uses `zsh` as default shell. If you want to have auto completion, we strongly recommend you to use `bash` shell (just execute `bash` in your terminal).\n\n# Features:\n\n## Autocompletion:\n\nMEGAcmd features autocompletion in both interactive and non-interactive (only for bash) mode. It will help completing both local and remote (Mega Cloud) files, flags for commands, values for flags/access levels, even contacts.  \n\n## Verbosity\nThere are two different kinds of logging messages:\n- **SDK based**: those messages reported by the sdk and dependent libraries.\n- **MEGAcmd based**: those messages reported by MEGAcmd itself.\n\nYou can adjust the level of logging for those kinds with `log` command.\n\nHowever, passing `-v` (`-vv`, `-vvv`, and so on for a more verbose output)\nto an specific command will use higher level of verbosity of MEGAcmd based messages.\n\nFurther info on verbosity [here](contrib/docs/DEBUG.md).\n\n## Regular Expressions\nIf you have compiled MEGAcmd with PCRE (enabled by default), you can use PCRE compatible expressions in certain commands with the flag `--use-pcre`. Otherwise, if compiled with c++11, c++11 regular expressions will be used. \n\n If none of the above is the case, you can only use wildcards: \"*\" for any number of characters or \"?\" for a single unknown character.\n \nYou can check the regular expressions compatibility with `find --help`:\n```\nfind --help\n...\nOptions:\n --pattern=PATTERN\tPattern to match (Perl Compatible Regular Expressions)\n```\n\n**Notice:** if you use MEGAcmd in non interactive mode, notice that shell pattern will take precedence. You will need to either escape symbols like `*` (`\\*`) or surround them between quotes (e.g: \"*.txt\").\n\n## MEGAcmd Updates\n\nMEGAcmd updates automatically for Windows & MacOS.\n\nFor Linux, whenever there is a new update, it will be published in the corresponding repository and your system's updating tool will let you update it.\n\n### Disable automatic updates\n\nYou can type `update --auto=OFF` to disable automatic updates. `update --auto=ON` will re-enable them. \n\nIf you want to see the state of automatic updates you can use `update --auto=query`. This will inform if automatic updates are enabled or not.\n\nNotice that MEGAcmdServer must be running in order to have automatic updates working.\n\nYou can also update manually by typing `update` within MEGAcmd. This will check if there are updates available and proceed to update if affirmative. Whenever MEGAcmd is updated it will be restarted (all open instances of MEGAcmdShell will be restarted too).\n\nAlternatively you can also execute `MEGAcmdUpdater.exe` in Windows or `MEGAcmdUpdater` (located at /Applications/MEGAcmd.app/Contents/MacOS) in MacOS.\n\n## Known Bugs\n\nCurrently there are certain discrepancies with **PATHS** when logging into a public folder.\n\nFor instance, imagine a folder named `toshare` with a subfolder named `x`. If we login in to `toshare` and execute `find /x`, this will be the output:\n\n```\n/toshare/x\n```\n\nWhereas if we execute `find /toshare/x`, we receive an error, since folder absolute path\nrefers to `/` as root path. \n\n```\n[err: 12:21:51] Couldn't find /toshare/x\n```\n\nIt might better be referred as `/toshare/x`.\n"
        },
        {
          "name": "UserGuide.md",
          "type": "blob",
          "size": 37.2353515625,
          "content": "# MEGAcmd User Guide\n\nThis document relates to MEGAcmd version 1.7.0.  It contains introductory information and the [Command Summary](#command-summary), with links to detailed command descriptions.\n\n### What is it\nA command line tool to work with your MEGA account and files.  The intent is to offer all the MEGA account functionality via command line.  You can run it in [interactive](#interactive) mode where it processes all commands directly, or you can run its [scriptable](#scriptable) commands from your favourite Linux or Mac shell such as bash, or you can even run its commands in a Windows command prompt. And of course you can write scripts using those scriptable commands.\n\nHere is an example of downloading a file using MEGAcmd.  In this case we are downloading a file specified by a public link, which does not require being logged in: <p>\n```\nmega-get https://mega.nz/#F!ABcD1E2F!gHiJ23k-LMno45PqrSTUvw /path/to/local/folder\n```\nNote:- If you get any error like this one\n```\nEvent not found\n```\nIn link put ```\\``` in front of every ```!``` for example\n```\nmega-get https://mega.nz/#F\\!ABcD1E2F\\!gHiJ23k-LMno45PqrSTUvw /path/to/local/folder\n```\n\nAnd here is an example of uploading a file using MEGAcmd, and making a link available to share it, that will expire after 10 minutes.<p>\n```\nmega-put /path/to/my/temporary_resource /exportedstuff/\nmega-export -a  /exportedstuff/temporary_resource --expire=10M | awk '{print $4}'\n```\n\nAnd here is an example of the power of using [scriptable](#scriptable) MEGAcmd commands in bash.  In this case we are going to share some promotional videos previously uploaded to MEGA: <p>\n```\nfor i in $(mega-find /enterprise/video/promotional2015/may --pattern=\"*mpeg\")\ndo\nmega-export -a $i | awk '{print $4}';\ndone\n```\n\nIn addition to running commands on request, MEGAcmd can also be configured to [synchronise](#synchronisation-configurations) folders between your local device and your MEGA account, or perform regular [backups](#backup-configurations) from your device to your MEGA account.\n\nIn order to enable synchronisation and backup features, and for efficiency running commands, MEGAcmd runs a server process in the background which the MEGAcmd shell or the script commands forward requests to.   The server keeps running in the background until it is told to close with the [`quit`](#quit) command.   If you want it to keep running when you quit the interactive shell (to keep sync and backup running for example), use `quit --only-shell`.\n\nWorking with your MEGA account requires signing in with your email and password using the [`login`](#login) command, though you can download public links or upload to public folders without logging in.  Logging in with your username and password starts a [Session](#session), and causes some of your account such as the folder structure to be downloaded to your [Local Cache](#local-cache).\n\n### Where can you get it\nFor Linux, Mac, or Windows: Download it from the MEGA.nz website: https://mega.nz/cmd <p>\nWe are also building it for some NAS systems, please check your provider's App Store.\n\n### What can you do with it\nThe major features are\n* Move files around inside your MEGA account or between MEGA and your PC using command line tools.\n* Use those same commands in scripts to manage your files.\n* Set up synchronization or a backup schedule between a folder on your machine, and a folder on your MEGA account.   (use the [`sync`](#sync) or [`backup`](#backup) commands)\n* Set up WebDAV access to files in your MEGA account (use the [`webdav`](#webdav) command)\n\nSee our Help Centre pages for the basics of getting started, and friendly examples of common usages with plenty of pictures:  https://mega.nz/help\n\n## Terminology and Descriptions\n\n### Interactive\nInteractive refers to running the MEGAcmd shell which only processes MEGA commands.  You invoke commands by typing and pressing Enter.  MEGAcmd shell provides a lot of feedback about what it's doing.  You can start the MEGAcmd shell with `mega-cmd` (or `MEGAcmd` on Windows).  You can then issue commands like `ls` directly: <p>\n`ls /my/account/folder`<p>\nor you can get a list of available commands with: <p>\n`help`<p>\nor you can get detailed information about any particular command by using the `--help` flag with that command:<p>\n`ls --help`<p>\nAutocompletion (pressing tab to fill in the remainder of a command) is available in interactive mode.\n\n### Scriptable\nScriptable refers to running the MEGAcmd commands from a shell such as bash or the windows powershell.  If the PATH to the MEGAcmd commands are not yet on the PATH in that shell, you'll need to add it.  You can then issue commands like `ls` by prefixing them with the `mega-` prefix: <p>\n`mega-ls /my/account/folder`<p>\nor you can get a list of available commands with: <p>\n`mega-help`<p>\nor you can get detailed information about any particular command by using the `--help` flag with that command:<p>\n`mega-ls --help`<p>\nScriptable commands can of course be used in scripts to achieve a lot in a short space of time, using loops or preparing all the desired commands ahead of time.\nIf you are using bash as your shell, the MEGAcmd commands support auto-completion.\n\n### Contact\nA contact is someone (identified by their email address) that also has a MEGA account, who you can share files or folders with, and can chat with on MEGAchat.\n\n### Remote Path\nThis refers to a file or a folder stored in your MEGA account, or a publicly available file or folder in the MEGA cloud.  Remote paths always use the '/' character as the separator between folder and file elements.\n\nSome MEGAcmd commands allow the use of regular expressions in remote paths.  You can check if the command supports those by using the `--help` flag with the command.  If you use these in the [scriptable](#scriptable) way, you need to escape characters that would otherwise be intercepted and interpreted by the shell.\n\nPaths to folders shared to you from another person start with their email and a : character, see the example at ([example](#shared-folders-example))\n\n### Local Path\nThis refers to a file or folder on the PC or device that MEGAcmd is running in.\n\n### Session\nWhen you log in with your email and MEGA account password, that creates a session.  The session exists until you log out of it or kill it from another client.  In MEGAcmd, use `whoami -l` to see all your open sessions across all devices, and use `killsession` to close them.   You can use other MEGA clients such as the phone app, or webclient to close these also.   Devices that were using a killed session will have their connection to MEGA closed immediately and will no longer have access to your account, until you log in on them again.   Syncs, backups, and webdavs are specific to a session, so logging out will cause them to be cancelled.\n\n### Local Cache\nLogging in with MEGAcmd creates your Local Cache, a subfolder of your home folder.  MEGAcmd downloads and stores some data in your Local Cache relating to your account, such as folder structure and contacts, for performance reasons.  The MEGAcmd background server keeps the local cache up to date when changes to your account occur from other clients.  The cache does contain a way for MEGAcmd to access your MEGA account when it starts up again if you have not specifically logged out.  The Local Cache also contains information from your Session, including sync, backup, and webdav configurations.  Logging out cleans the Local Cache, but also closes your session and the sync, backup, and webdav configurations are wiped.\n\n### Synchronisation configurations\nMEGAcmd can set up a synchronisation between a folder on your local machine and a folder in your MEGA account, using the [`sync`](#sync) command.   This is the same mechanism that MEGAsync uses.  The synchronisation is two-way: the folders you nominate to be synced will mirror any action!  Whatever you add or delete in your sync folder on your device gets added or deleted in your sync folder in your MEGA account.  And additions or deletions in your synced folder in your MEGA account will similarly be applied to your local synced folder.  Files that are removed from sync folders are moved to a hidden local folder (Rubbish/.debris inside your local sync folder, or SyncDebris folder in the Rubbish Bin of your MEGA account).\n\nHere is a very simple example of setting up a synchronisation with MEGAcmd: <p>\n```\nsync /path/to/local/folder /folder/in/mega\n```\n\nYou can set up more than one pair or folders to be synced, and you can also set a sync from another device to the same folder, to achieve folder synchronisations between different devices.   The changes are sent via your MEGA account rather than directly between the devices in that case.\n\nAdditional information about synchronising folders is available in our Help Centre:  https://mega.nz/help/client/megasync/syncing\n\n### Backup configurations\nMEGAcmd can set up a periodic copy of a local folder to your MEGA account using the [`backup`](#backup) command.  Here is a simple example that will back up a folder immediately and then at 4am each day, keeping the 10 most recent backups: <p>\n```\nbackup /path/mega/folder /remote/path --period=\"0 0 4 * * *\" --num-backups=10\n```\n\nFor further information on backups, please see the [`backup`](#backup) command and the [tutorial](contrib/docs/BACKUPS.md).\n\n### WebDAV configurations\nMEGAcmd can set up access to folders or files in your MEGA account as if they were local folders and files on your device using the [`webdav`](#webdav) command.  For example making the folder appear like a local drive on your PC, or providing a hyperlink a browser can access, where the hyperlink is to your PC.\n\nFor further information on WebDAV, please see the [`webdav`](#webdav) command and the [tutorial](contrib/docs/WEBDAV.md).\n\n### Linux\nOn Linux, MEGAcmd commands are installed at /usr/bin and so will already be on your PATH.  The interactive shell is `mega-cmd` and the background server is `mega-cmd-server`, which will be automatically started on demand.  The various scriptable commands are installed at the same location, and invoke `mega-exec` to send the command to `mega-cmd-server`.\n\nIf you are using the scriptable commands in bash (or using the interactive commands in mega-cmd), the commands will auto-complete.\n\n### Macintosh\nFor MacOS, after installing the dmg, you can launch the server using **MEGAcmd** in Applications. If you wish to use the client commands from MacOS Terminal, open the Terminal and include the installation folder in the PATH.<p>\nTypically:\n```\nexport PATH=/Applications/MEGAcmd.app/Contents/MacOS:$PATH\n```\n\nAnd for bash completion, source `megacmd_completion.sh` :\n```\nsource /Applications/MEGAcmd.app/Contents/MacOS/megacmd_completion.sh\n```\n\n### Windows\nOnce you have MEGAcmd installed, you can start the [interactive](#interactive) shell from the Start Menu or desktop icon.  On windows the interactive shell executable is called `MEGAcmdShell.exe` and the server is `MEGAcmdServer.exe`.\n\nOn Windows 7, we recommend using the MEGAcmd shell from inside PowerShell for a better user experience (and you can do this on other Windows platforms also).  You can start powershell from the Start Menu and then execute these commands to start it:\n```\n$env:PATH += \";$env:LOCALAPPDATA\\MEGAcmd\"\nMEGAcmdShell\n```\n\nFor [scriptable](#scriptable) usage, the MEGAcmd commands are provided via installed .bat files which pass the command to the MEGAcmdServer.exe.  Provided you have set the PATH as above, you can use these like normal command line tools in PowerShell:\n```\n$env:PATH += \";$env:LOCALAPPDATA\\MEGAcmd\"\nmega-cd /my/favourite/folder\nmega-ls\n```\n\nOr in Command Prompt:\n```\nset PATH=%LOCALAPPDATA%\\MEGAcmd;%PATH%\nmega-cd /my/favourite/folder\nmega-ls\n```\n\n\nAnd of course those can be invoked in your own .bat or .cmd files.\nAutocompletion is not available for the scriptable commands, but is in the interactive shell.\n\nUnicode is supported though it currently in the interactive shell it needs to be switched on, and to have a suitable font selected; please execute `help --unicode` for the latest information.  There are plans to improve this.  Please report any issues experienced to our support team.\n\n### NAS Support\nWe have released packages for QNAP and Synology, which you can download and install from the App Center in QNAP, and the Package Center in Synology.   In QNAP, please make sure to turn on \"Enable home folder for all users\" from the control panel, and set HOME=/share/homes/<username> before starting any MEGA commands, and in Synology, 'Enable user home service', so that the `mega-cmd-server` creates the `.megaCmd` local cache folder there (as the default HOME location may be erased on restart).\n\n## Command Summary\n\nThese summaries use the usual conventions - `[]` indicates its content is optional,  `|` indicates you should choose either the item on the left or the one on the right (but not both)\n\nEach command is described as it would be used in the [interactive](#interactive) MEGAcmd shell, and the corresponding [scriptable](#scriptable) command (which must be prefixed with `mega-`) works in the same way.\n\nCommands referring to a [remote path](#remote-path) are talking about a file in your MEGA account online, whereas a [local path](#local-path) refers to a file or folder on your local device where MEGAcmd is running.\n\nVerbosity: You can increase the amount of information given by any command by passing `-v` (`-vv`, `-vvv`, ...)\n\n### Account / Contacts\n* [`signup`](contrib/docs/commands/signup.md)`email password [--name=\"Your Name\"]` Register as user with a given email\n* [`confirm`](contrib/docs/commands/confirm.md)`link email password` Confirm an account using the link provided after the \"signup\" process.\n* [`invite`](contrib/docs/commands/invite.md)`[-d|-r] dstemail [--message=\"MESSAGE\"]` Invites a contact / deletes an invitation\n* [`showpcr`](contrib/docs/commands/showpcr.md)`[--in | --out] [--time-format=FORMAT]` Shows incoming and outgoing contact requests.\n* [`ipc`](contrib/docs/commands/ipc.md)`email|handle -a|-d|-i` Manages contact incoming invitations.\n* [`users`](contrib/docs/commands/users.md)`[-s] [-h] [-n] [-d contact@email] [--time-format=FORMAT] [--verify|--unverify contact@email.com] [--help-verify [contact@email.com]]` List contacts\n* [`userattr`](contrib/docs/commands/userattr.md)`[-s attribute value|attribute|--list] [--user=user@email]` Lists/updates user attributes\n* [`passwd`](contrib/docs/commands/passwd.md)`[-f]  [--auth-code=XXXX] newpassword` Modifies user password\n* [`masterkey`](contrib/docs/commands/masterkey.md)`pathtosave` Shows your master key.\n\n### Login / Logout\n* [`login`](contrib/docs/commands/login.md)`[--auth-code=XXXX] email password | exportedfolderurl#key [--auth-key=XXXX] | passwordprotectedlink [--password=PASSWORD] | session` Logs into a MEGA account or folder link. You can only log into one entity at a time.\n* [`logout`](contrib/docs/commands/logout.md)`[--keep-session]` Logs out\n* [`whoami`](contrib/docs/commands/whoami.md)`[-l]` Prints info of the user\n* [`session`](contrib/docs/commands/session.md) Prints (secret) session ID\n* [`killsession`](contrib/docs/commands/killsession.md)`[-a | sessionid1 sessionid2 ... ]` Kills a session of current user.\n\n### Browse\n* [`cd`](contrib/docs/commands/cd.md)`[remotepath]` Changes the current remote folder\n* [`lcd`](contrib/docs/commands/lcd.md)`[localpath]` Changes the current local folder for the interactive console\n* [`ls`](contrib/docs/commands/ls.md)`[-halRr] [--show-handles] [--tree] [--versions] [remotepath] [--use-pcre] [--show-creation-time] [--time-format=FORMAT]` Lists files in a remote path\n* [`pwd`](contrib/docs/commands/pwd.md) Prints the current remote folder\n* [`lpwd`](contrib/docs/commands/lpwd.md) Prints the current local folder for the interactive console\n* [`attr`](contrib/docs/commands/attr.md)`remotepath [--force-non-officialficial] [-s attribute value|-d attribute [--print-only-value]` Lists/updates node attributes.\n* [`du`](contrib/docs/commands/du.md)`[-h] [--versions] [remotepath remotepath2 remotepath3 ... ] [--use-pcre]` Prints size used by files/folders\n* [`find`](contrib/docs/commands/find.md)`[remotepath] [-l] [--pattern=PATTERN] [--type=d|f] [--mtime=TIMECONSTRAIN] [--size=SIZECONSTRAIN] [--use-pcre] [--time-format=FORMAT] [--show-handles|--print-only-handles]` Find nodes matching a pattern\n* [`mount`](contrib/docs/commands/mount.md) Lists all the root nodes\n\n### Moving / Copying files\n* [`mkdir`](contrib/docs/commands/mkdir.md)`[-p] remotepath` Creates a directory or a directories hierarchy\n* [`cp`](contrib/docs/commands/cp.md)`[--use-pcre] srcremotepath [srcremotepath2 srcremotepath3 ..] dstremotepath|dstemail` : Copies files/folders into a new location (all remotes)\n* [`put`](contrib/docs/commands/put.md)`[-c] [-q] [--ignore-quota-warn] localfile [localfile2 localfile3 ...] [dstremotepath]` Uploads files/folders to a remote folder\n* [`get`](contrib/docs/commands/get.md)`[-m] [-q] [--ignore-quota-warn] [--use-pcre] [--password=PASSWORD] exportedlink|remotepath [localpath]` Downloads a remote file/folder or a public link\n* [`preview`](contrib/docs/commands/preview.md)`[-s] remotepath localpath` To download/upload the preview of a file.\n* [`thumbnail`](contrib/docs/commands/thumbnail.md)`[-s] remotepath localpath` To download/upload the thumbnail of a file.\n* [`mv`](contrib/docs/commands/mv.md)`srcremotepath [--use-pcre] [srcremotepath2 srcremotepath3 ..] dstremotepath` Moves file(s)/folder(s) into a new location (all remotes)\n* [`rm`](contrib/docs/commands/rm.md)`[-r] [-f] [--use-pcre] remotepath` Deletes a remote file/folder\n* [`transfers`](contrib/docs/commands/transfers.md)`[-c TAG|-a] | [-r TAG|-a]  | [-p TAG|-a] [--only-downloads | --only-uploads] [SHOWOPTIONS]` List or operate with transfers\n* [`speedlimit`](contrib/docs/commands/speedlimit.md)`[-u|-d] [-h] [NEWLIMIT]` Displays/modifies upload/download rate limits\n* [`sync`](contrib/docs/commands/sync.md)`[localpath dstremotepath| [-dsr] [ID|localpath]` Controls synchronizations.\n* [`exclude`](contrib/docs/commands/exclude.md)`[(-a|-d) pattern1 pattern2 pattern3]` Manages exclusions in syncs.\n* [`backup`](contrib/docs/commands/backup.md)`(localpath remotepath --period=\"PERIODSTRING\" --num-backups=N  | [-lhda] [TAG|localpath] [--period=\"PERIODSTRING\"] [--num-backups=N]) [--time-format=FORMAT]` Controls backups\n\n### Sharing (your own files, of course, without infringing any copyright)\n* [`export`](contrib/docs/commands/export.md)`[-d|-a [--writable] [--mega-hosted] [--password=PASSWORD] [--expire=TIMEDELAY] [-f]] [remotepath] [--use-pcre] [--time-format=FORMAT]` Prints/Modifies the status of current exports\n* [`import`](contrib/docs/commands/import.md)`exportedlink [--password=PASSWORD] [remotepath]` Imports the contents of a remote link into user's cloud\n* [`share`](contrib/docs/commands/share.md)`[-p] [-d|-a --with=user@email.com [--level=LEVEL]] [remotepath] [--use-pcre] [--time-format=FORMAT]` Prints/Modifies the status of current shares\n* [`webdav`](contrib/docs/commands/webdav.md)`[-d (--all | remotepath ) ] [ remotepath [--port=PORT] [--public] [--tls --certificate=/path/to/certificate.pem --key=/path/to/certificate.key]] [--use-pcre]` Configures a WEBDAV server to serve a location in MEGA\n\n### Misc.\n* [`autocomplete`](contrib/docs/commands/autocomplete.md)`[dos | unix]` Modifes how tab completion operates.\n* [`cancel`](contrib/docs/commands/cancel.md) Cancels your MEGA account\n* [`cat`](contrib/docs/commands/cat.md)`remotepath1 remotepath2 ...` Prints the contents of remote files\n* [`clear`](contrib/docs/commands/clear.md) Clear screen\n* [`codepage`](contrib/docs/commands/codepage.md)`[N [M]]` Switches the codepage used to decide which characters show on-screen.\n* [`confirmcancel`](contrib/docs/commands/confirmcancel.md)`link password` Confirms the cancellation of your MEGA account\n* [`debug`](contrib/docs/commands/debug.md) Enters debugging mode (HIGHLY VERBOSE)\n* [`deleteversions`](contrib/docs/commands/deleteversions.md)`[-f] (--all | remotepath1 remotepath2 ...)  [--use-pcre]` Deletes previous versions.\n* [`df`](contrib/docs/commands/df.md)`[-h]` Shows storage info\n* [`errorcode`](contrib/docs/commands/errorcode.md)`number` Translate error code into string\n* [`exit`](contrib/docs/commands/exit.md)`[--only-shell]` Quits MEGAcmd\n* [`ftp`](contrib/docs/commands/ftp.md)`[-d ( --all | remotepath ) ] [ remotepath [--port=PORT] [--data-ports=BEGIN-END] [--public] [--tls --certificate=/path/to/certificate.pem --key=/path/to/certificate.key]] [--use-pcre]` Configures a FTP server to serve a location in MEGA\n* [`graphics`](contrib/docs/commands/graphics.md)`[on|off]` Shows if special features related to images and videos are enabled.\n* [`help`](contrib/docs/commands/help.md)`[-f|-ff|--non-interactive|--upgrade|--paths]` Prints list of commands\n* [`https`](contrib/docs/commands/https.md)`[on|off]` Shows if HTTPS is used for transfers. Use \"https on\" to enable it.\n* [`info`](contrib/docs/commands/info.md)`remotepath1 remotepath2 ...` Prints media info of remote files\n* [`log`](contrib/docs/commands/log.md)`[-sc] level` Prints/Modifies the current logs level\n* [`permissions`](contrib/docs/commands/permissions.md)`[(--files|--folders) [-s XXX]]` Shows/Establish default permissions for files and folders created by MEGAcmd.\n* [`proxy`](contrib/docs/commands/proxy.md)`[URL|--auto|--none] [--username=USERNAME --password=PASSWORD]` Show or sets proxy configuration\n* [`psa`](contrib/docs/commands/psa.md)`[--discard]` Shows the next available Public Service Announcement (PSA)\n* [`quit`](contrib/docs/commands/quit.md)`[--only-shell]` Quits MEGAcmd\n* [`reload`](contrib/docs/commands/reload.md) Forces a reload of the remote files of the user\n* [`tree`](contrib/docs/commands/tree.md)`[remotepath]` Lists files in a remote path in a nested tree decorated output\n* [`unicode`](contrib/docs/commands/unicode.md) Toggle unicode input enabled/disabled in interactive shell\n* [`update`](contrib/docs/commands/update.md)`[--auto=on|off|query]` Updates MEGAcmd\n* [`version`](contrib/docs/commands/version.md)`[-l][-c]` Prints MEGAcmd versioning and extra info\n\n## Examples\nSome examples of typical MEGAcmd workflows and commands.\n\n**Note:** command output might differ. It could be slightly outdated, or it could've been manually re-formatted to better fit this markdown page.\n\n### Account management\n#### Creating new accounts\n<pre>\nMEGA CMD> <b>signup eg.email_1@example.co.nz --name=\"test1\"</b>\nNew Password:\nRetype New Password:\nAccount <eg.email_1@example.co.nz> created succesfully. You will receive a confirmation link. Use \"confirm\" with the provided link to confirm that account\n\nMEGA CMD> <b>confirm https://mega.nz/#confirmQFSfjtUkExc5M2Us6q5d-klx60Rfx<REDACTED>Vbxjhk eg.email_1@example.co.nz</b>\nPassword:\nAccount eg.email_1@example.co.nz confirmed succesfully. You can login with it now\n\nMEGA CMD> <b>signup eg.email_2@example.co.nz --name=\"test2\"</b>\nNew Password:\nRetype New Password:\nAccount <eg.email_2@example.co.nz> created succesfully. You will receive a confirmation link. Use \"confirm\" with the provided link to confirm that account\n\nMEGA CMD> <b>confirm https://mega.nz/#confirmcz7Ss68ChhMKk8WEFTQCqLMHJg8es<REDACTED>AEEpQE eg.email_2@example.co.nz</b>\nPassword:\nAccount eg.email_2@example.co.nz confirmed succesfully. You can login with it now\n</pre>\n\n#### Logging-in and contacts\n<pre>\nMEGA CMD> <b>login eg.email_1@example.co.nz</b>\nPassword:\n[SDK:info: 23:19:14] Fetching nodes ...\nFetching nodes ||########################################||(38/38 MB: 100.00 %)\n[SDK:info: 23:19:17] Loading transfers from local cache\n[SDK:info: 23:19:17] Login complete as eg.email_1@example.co.nz\n</pre>\n\n#### Adding a contact and viewing\n<pre>\neg.email_1@example.co.nz:/$ <b>invite eg.email_2@example.co.nz</b>\nInvitation to user: eg.email_2@example.co.nz sent\n\neg.email_1@example.co.nz:/$ <b>showpcr</b>\nOutgoing PCRs:\n eg.email_2@example.co.nz  (id: 47Xhz6wvVTk, creation: Thu, 26 Apr 2018 11:20:09 +1200, modification: Thu, 26 Apr 2018 11:20:09 +1200)\n\neg.email_1@example.co.nz:/$ <b>logout</b>\nLogging out...\n\nMEGA CMD> <b>login eg.email_2@example.co.nz</b>\nPassword:\n[SDK:info: 23:21:10] Fetching nodes ...\n[SDK:info: 23:21:12] Loading transfers from local cache\n[SDK:info: 23:21:12] Login complete as eg.email_2@example.co.nz\n\neg.email_2@example.co.nz:/$ <b>showpcr</b>\nIncoming PCRs:\n eg.email_1@example.co.nz  (id: 47Xhz6wvVTk, creation: Thu, 26 Apr 2018 11:20:09 +1200, modification: Thu, 26 Apr 2018 11:20:09 +1200)\n\neg.email_2@example.co.nz:/$ <b>ipc 47Xhz6wvVTk -a</b>\nAccepted invitation by eg.email_1@example.co.nz\n\neg.email_2@example.co.nz:/$ <b>users</b>\neg.email_1@example.co.nz, visible since Thu, 26 Apr 2018 11:22:02 +1200\n\neg.email_2@example.co.nz:/$ <b>userattr --user=eg.email_1@example.co.nz</b>\n        firstname = test1\n        ed25519 = 5Xl2-mUtsZkaATmSS88Ncepju5805uw66Hfdh_-SwpE\n        cu25519 = ejoYtpaJIZvlpmPsYviIa6tNvPTdVjfkYf9G1k8PKgM\n        rsa = AAAAAFrhDPPMS1AXAhJwScpJ_GKqFUJ42uIIcwxLp5RIalkWtsa5j87u2LFhoZlI_rHIzGXrdsbywgs7Msisw0CjodrtwtME\n        cu255 = AAAAAFrhDPPWUOP2tNByV72zU4M3EKNoddyVCT13VkkouMldniR2UZtLrPjUjUeOZOLvOL7H1C0W0Q_b3QqYSvAKo775pUwD\n\neg.email_2@example.co.nz:/$ <b>logout</b>\nLogging out...\n\nMEGA CMD> <b>login eg.email_1@example.co.nz</b>\nPassword:\n[SDK:info: 23:24:26] Fetching nodes ...\n[SDK:info: 23:24:27] Loading transfers from local cache\n[SDK:info: 23:24:27] Login complete as eg.email_1@example.co.nz\n\neg.email_1@example.co.nz:/$ <b>users</b>\neg.email_2@example.co.nz, visible\n\neg.email_1@example.co.nz:/$ <b>userattr --user=eg.email_2@example.co.nz</b>\n        firstname = test2\n        ed25519 = M7SLy2RajwUAvynxJQaVkhe6hxGpbwJmvve3dgl8B1o\n        cu25519 = VaXluGS2c5xbo0xOHHJciqLRxwMaWZHVK8iuxtlCBTk\n        rsa = AAAAAFrhDWemabQ4JAOtP7zcoy6m74PsFTFCbj04Zh4G8K_TZB5Sm9T5Xj9CXYzwWnpfRd1McPdDouKdsASQ6Er7i4Y4LpEA\n        cu255 = AAAAAFrhDWcXE_7AHZmvxk5Hk0G7V65UnvFO42tb1gM9SYy3BpsMCas0X-pbqkYwf6_2eBG-ZLvkonGfXB3DWonWNvnVehIB\n</pre>\n\n### Node operations\n#### Getting user info\n<pre>\nMEGA CMD> <b>login eg.email_1@example.co.nz</b>\nPassword:\n[SDK:info: 23:43:14] Fetching nodes ...\n[SDK:info: 23:43:14] Loading transfers from local cache\n[SDK:info: 23:43:14] Login complete as eg.email_1@example.co.nz\n\neg.email_1@example.co.nz:/$ <b>whoami -l</b>\nAccount e-mail: eg.email_1@example.co.nz\n    Available storage: 50.00 GBytes\n        In ROOT:      146... KBytes in     1 file(s) and     0 folder(s)\n        In INBOX:       0.00  Bytes in     0 file(s) and     0 folder(s)\n        In RUBBISH:     0.00  Bytes in     0 file(s) and     0 folder(s)\n        Total size taken up by file versions:      0.00  Bytes\n    Pro level: 0\n    Subscription type:\n    Account balance:\nCurrent Active Sessions:\n    * Current Session\n    Session ID: m3a8eluyPdo\n    Session start: 4/26/2018 11:43:12 AM\n    Most recent activity: 4/26/2018 11:43:13 AM\n    IP: 122.56.56.232\n    Country: NZ\n    User-Agent: MEGAcmd/0.9.9.0 (Windows 10.0.16299) MegaClient/3.3.5\n    -----\n1 active sessions opened\n\neg.email_1@example.co.nz:/$ <b>mount</b>\nROOT on /\nINBOX on //in\nRUBBISH on //bin\n</pre>\n\n#### Downloading a file\n<pre>\neg.email_1@example.co.nz:/$ <b>ls</b>\nWelcome to MEGA.pdf\n\neg.email_1@example.co.nz:/$ <b>get \"Welcome to MEGA.pdf\"</b>\nTRANSFERING ||################################################################################||(1/1 MB: 100.00 %)\nDownload finished: Welcome to MEGA.pdf\nTRANSFERING ||################################################################################||(1/1 MB: 100.00 %)\n</pre>\n\n#### Uploading a file\n<pre>\neg.email_1@example.co.nz:/$ <b>mkdir my-pictures</b>\n\neg.email_1@example.co.nz:/$ <b>cd my-pictures/</b>\n\neg.email_1@example.co.nz:/my-pictures$ <b>put C:\\Users\\MYWINDOWSUSER\\Pictures</b>\nTRANSFERING ||################################################################################||(1/1 MB: 100.00 %)\nUpload finished: C:\\Users\\MYWINDOWUSER\\Pictures\nTRANSFERING ||################################################################################||(1/1 MB: 100.00 %)\n</pre>\n\n#### Creating and navigating directories\n<pre>\neg.email_1@example.co.nz:/my-pictures$ <b>pwd</b>\n/my-pictures\n\neg.email_1@example.co.nz:/my-pictures$ <b>ls</b>\nPictures\n\neg.email_1@example.co.nz:/my-pictures$ <b>cd Pictures/</b>\n\neg.email_1@example.co.nz:/my-pictures/my-pictures$ <b>ls</b>\nCamera Roll\nFeedback\nSaved Pictures\nmegacmdpkg.gif\nmegacmdpkg_80.gif\nmegacmdpkg_gray.gif\n\neg.email_1@example.co.nz:/my-pictures/my-pictures$ <b>pwd</b>\n/my-pictures/Pictures\n\neg.email_1@example.co.nz:/my-pictures/my-pictures$ <b>cd /</b>\n\neg.email_1@example.co.nz:/$ <b>du -h my-pictures/</b>\nFILENAME                                        SIZE\nmy-pictures:                                 1.31 MB\n----------------------------------------------------------------\nTotal storage used:                          1.31 MB\n</pre>\n\n#### Logging-out\n<pre>\neg.email_1@example.co.nz:/$ <b>logout</b>\nLogging out...\nMEGA CMD>\n</pre>\n\n### Syncing\n<pre>\nemail_1@example.co.nz:/$ <b>sync c:\\Go go-backup/</b>\nAdded sync: //?\\c:\\Go to /go-backup\n\nemail_1@example.co.nz:/$ <b>sync</b>\nID          LOCALPATH                   REMOTEPATH RUN_STATE STATUS  ERROR SIZE      FILES DIRS\nWOOmFwZfQwM \\\\?\\c:\\Go                   /go-backup Running   Syncing NO    119.13 KB 10    97\n\nemail_1@example.co.nz:/$ <b>sync</b>\nID          LOCALPATH                   REMOTEPATH RUN_STATE STATUS  ERROR SIZE     FILES DIRS\nWOOmFwZfQwM \\\\?\\c:\\Go                   /go-backup Running   Syncing NO    61.22 MB 1252  463\n\nemail_1@example.co.nz:/$ <b>sync</b>\nID          LOCALPATH                   REMOTEPATH RUN_STATE STATUS  ERROR SIZE      FILES DIRS\nWOOmFwZfQwM \\\\?\\c:\\Go                   /go-backup Running   Syncing NO    232.94 MB 4942  773\n\nemail_1@example.co.nz:/$ <b>sync</b>\nID          LOCALPATH                   REMOTEPATH RUN_STATE STATUS ERROR SIZE      FILES DIRS\nWOOmFwZfQwM \\\\?\\c:\\Go                   /go-backup Running   Synced NO    285.91 MB 7710  1003\n</pre>\n\nThen, on a windows cmd prompt:\n<pre>\nC:\\Users\\ME><b>rmdir /s c:\\go\\blog</b>\nc:\\go\\blog, Are you sure (Y/N)? <b>Y</b>\n</pre>\n\nBack in MEGAcmd (the update has been applied to MEGA already):\n<pre>\nemail_1@example.co.nz:/$ <b>sync</b>\nID          LOCALPATH                   REMOTEPATH RUN_STATE STATUS ERROR SIZE      FILES DIRS\nWOOmFwZfQwM \\\\?\\c:\\Go                   /go-backup Running   Synced NO    268.53 MB 7306  961\n</pre>\n\n### Backups\n<pre>\neg.email@example.co.nz:/$ <b>backup c:/cmake /cmake-backup --period=\"0 0 4 * * *\" --num-backups=3</b>\nBackup established: c:/cmake into /cmake-backup period=\"0 0 4 * * *\" Number-of-Backups=3\n\neg.email@example.co.nz:/$ <b>backup</b>\nTAG   LOCALPATH                                               REMOTEPARENTPATH                                                STATUS\n166   \\\\?\\c:\\cmake                                            /cmake-backup                                                  COMPLETE\n\neg.email@example.co.nz:/$ <b>backup -h</b>\nTAG   LOCALPATH                                               REMOTEPARENTPATH                                                STATUS\n166   \\\\?\\c:\\cmake                                            /cmake-backup                                                  COMPLETE\n   -- HISTORY OF BACKUPS --\n  NAME                                                    DATE                    STATUS   FILES FOLDERS\n  cmake_bk_20180426133300                                 26Apr2018 13:33:00      COMPLETE     0      92\n</pre>\n\n### WebDAV\n<pre>\neg.email@example.co.nz:/$ <b>webdav myfile.tif --port=1024</b>\nServing via webdav myfile.tif: http://127.0.0.1:1024/5mYHQT4B/myfile.tif\n\neg.email@example.co.nz:/$ <b>webdav</b>\nWEBDAV SERVED LOCATIONS:\n/myfile.tif: http://127.0.0.1:1024/5mYHQT4B/myfile.tif\n\neg.email@example.co.nz:/$ <b>webdav -d myfile.tif</b>\nmyfile.tif no longer served via webdav\n</pre>\n\n### Exporting and importing\n<pre>\neg.email_1@example.co.nz:/$ <b>export -a Pictures/</b>\nMEGA respects the copyrights of others and requires that users of the MEGA cloud service comply with the laws of copyright.\nYou are strictly prohibited from using the MEGA cloud service to infringe copyrights.\nYou may not upload, download, store, share, display, stream, distribute, email, link to, transmit or otherwise make available any files, data or content that infringes any copyright or other proprietary rights of any person or entity. Do you accept this terms? (Yes/No): Yes\nPlease enter [y]es/[n]o/[a]ll/none:yes\nExported /Pictures: https://mega.nz/#F!iaZlEBIL!mQD3rFuJhKov0sco-6s9xg\n\neg.email_1@example.co.nz:/$ <b>export</b>\nPictures (folder, shared as exported permanent folder link: https://mega.nz/#F!iaZlEBIL!mQD3rFuJhKov0sco-6s9xg)\n\neg.email_1@example.co.nz:/$ <b>logout --keep-session</b>\nLogging out...\nSession closed but not deleted. Warning: it will be restored the next time you execute the application. Execute \"logout\" to delete the session permanently.\nYou can also login with the session id: ARo7aiLAxK-jseOdVBYhj285Twb06ivWsFmT4XAnkTsiaDRRbm5oYS1zRm-V3I0FHHOvwj7P2RPvrSw_\n\nMEGA CMD> <b>login eg.email_2@example.co.nz</b>\nPassword:\n[SDK:info: 01:55:04] Fetching nodes ...\n[SDK:info: 01:55:05] Loading transfers from local cache\n[SDK:info: 01:55:05] Login complete as eg.email_2@example.co.nz\n\neg.email_2@example.co.nz:/$ <b>ls</b>\nWelcome to MEGA.pdf\n\neg.email_2@example.co.nz:/$ <b>import https://mega.nz/#F!iaZlEBIL!mQD3rFuJhKov0sco-6s9xg</b>\nImported folder complete: /Pictures\n\neg.email_2@example.co.nz:/$ <b>ls</b>\nPictures\nWelcome to MEGA.pdf\n\neg.email_2@example.co.nz:/$ <b>ls Pictures/</b>\nCamera Roll\nFeedback\nSaved Pictures\nmegacmdpkg.gif\nmegacmdpkg_80.gif\nmegacmdpkg_gray.gif\n\neg.email_2@example.co.nz:/$ <b>logout</b>\nLogging out...\n\nMEGA CMD> <b>login ARo7aiLAxK-jseOdVBYhj285Twb06ivWsFmT4XAnkTsiaDRRbm5oYS1zRm-V3I0FHHOvwj7P2RPvrSw_</b>\neg.email_1@example.co.nz:/$ <b>export</b>\nPictures (folder, shared as exported permanent folder link: https://mega.nz/#F!iaZlEBIL!mQD3rFuJhKov0sco-6s9xg)\n\neg.email_1@example.co.nz:/$ <b>export -d Pictures/</b>\nDisabled export: /Pictures\n\neg.email_1@example.co.nz:/$ <b>export</b>\nCouldn't find anything exported below current folder. Use -a to export it\n</pre>\n\n### Transfers\n<pre>\neg.email@example.co.nz:/tmp-test/Mega.dir$ <b>transfers</b>\nDIR/SYNC TAG  SOURCEPATH                         DESTINYPATH                              PROGRESS           STATE\n U     17361 \\\\?\\C:\\Users\\ME\\...ebug\\megaapi.obj /tmp-test/Mega.dir/Mega.dir/Debug    100.00% of 2016.62 KB  ACTIVE\n U     17362 \\\\?\\C:\\Users\\ME\\...megaapi_impl.obj /tmp-test/Mega.dir/Mega.dir/Debug     13.64% of   13.85 MB  ACTIVE\n U     17363 \\\\?\\C:\\Users\\ME\\...g\\megaclient.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of   15.46 MB  QUEUED\n U     17364 \\\\?\\C:\\Users\\ME\\..._http_parser.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of   85.15 KB  QUEUED\n U     17365 \\\\?\\C:\\Users\\ME\\...ega_utf8proc.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  312.44 KB  QUEUED\n U     17366 \\\\?\\C:\\Users\\ME\\...\\mega_zxcvbn.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  589.88 KB  QUEUED\n U     17367 \\\\?\\C:\\Users\\ME\\...ir\\Debug\\net.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of    3.20 MB  QUEUED\n U     17368 \\\\?\\C:\\Users\\ME\\...r\\Debug\\node.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of    3.73 MB  QUEUED\n U     17369 \\\\?\\C:\\Users\\ME\\...ntactrequest.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  352.22 KB  QUEUED\n U     17370 \\\\?\\C:\\Users\\ME\\...\\Debug\\proxy.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  203.57 KB  QUEUED\n ...  Showing first 10 transfers ...\n\neg.email@example.co.nz:/tmp-test/Mega.dir$ <b>transfers -p 17367</b>\nTransfer 17367 paused successfully.\n\neg.email@example.co.nz:/tmp-test/Mega.dir$ <b>transfers -c 17370</b>\nTransfer 17370 cancelled successfully.\n\neg.email@example.co.nz:/tmp-test/Mega.dir$ <b>transfers</b>\nDIR/SYNC TAG  SOURCEPATH                         DESTINYPATH                              PROGRESS           STATE\n U     17362 \\\\?\\C:\\Users\\ME\\...megaapi_impl.obj /tmp-test/Mega.dir/Mega.dir/Debug     96.32% of   13.85 MB  ACTIVE\n U     17363 \\\\?\\C:\\Users\\ME\\...g\\megaclient.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.20% of   15.46 MB  ACTIVE\n U     17364 \\\\?\\C:\\Users\\ME\\..._http_parser.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of   85.15 KB  QUEUED\n U     17365 \\\\?\\C:\\Users\\ME\\...ega_utf8proc.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  312.44 KB  QUEUED\n U     17366 \\\\?\\C:\\Users\\ME\\...\\mega_zxcvbn.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  589.88 KB  QUEUED\n U     17367 \\\\?\\C:\\Users\\ME\\...ir\\Debug\\net.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of    3.20 MB  PAUSED\n U     17368 \\\\?\\C:\\Users\\ME\\...r\\Debug\\node.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of    3.73 MB  QUEUED\n U     17369 \\\\?\\C:\\Users\\ME\\...ntactrequest.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  352.22 KB  QUEUED\n U     17371 \\\\?\\C:\\Users\\ME\\...pubkeyaction.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  355.75 KB  QUEUED\n U     17372 \\\\?\\C:\\Users\\ME\\...ebug\\request.obj /tmp-test/Mega.dir/Mega.dir/Debug      0.00% of  933.14 KB  QUEUED\n ...  Showing first 10 transfers ...\n</pre>\n\n### Shared folders\n<pre>\neg.email@example.co.nz:/$ mount\nROOT on /\nINBOX on //in\nRUBBISH on //bin\nINSHARE on //from/family.member@example.co.nz:photos_Jan_1_2020 (read access)\nINSHARE on //from/family.member@example.co.nz:other_folder (read access)\n\neg.email@example.co.nz:/$ ls family.member@example.co.nz:photos_Jan_1_2020\nphoto1.jpg\nphoto2.jpg\n\neg.email@example.co.nz:/$ get family.member@example.co.nz:photos_Jan_1_2020/photo1.jpg\nTRANSFERRING ||###########################################################################################||(5/5 MB: 100.00 %)\nDownload finished: .\\photo1.jpg\n\neg.email@example.co.nz:/$ share -a --with=family.member@example.co.nz --level=0  \"/Camera Uploads/my_photos_from_that_day\"\nShared /Camera Uploads/my_photos_from_that_day : family.member@example.co.nz accessLevel=0\n</pre>\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0361328125,
          "content": "#!/bin/sh\nautoreconf -fiv || exit 1;\n"
        },
        {
          "name": "build-with-docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 1.6552734375,
          "content": "#!/bin/sh\n##\n # @file clean.sh\n # @brief removes all temporary, generated files\n#\n # (c) 2013 by Mega Limited, Auckland, New Zealand\n #\n # This file is part of the MEGAcmd.\n #\n # MEGAcmd is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n #\n # @copyright Simplified (2-clause) BSD License.\n #\n # You should have received a copy of the license along with this\n # program.\n##\nTARGETS=\"aclocal.m4 autom4te.cache config.guess config.log config.status config.sub configure depcomp install-sh libmega.pc libtool ltmain.sh Makefile Makefile.in missing stamp-h1 test-driver texput.log .deps clean compile\nexamples/.deps examples/.dirstamp examples/linux/.deps examples/linux/.dirstamp examples/linux/.libs examples/linux/megafuse examples/linux/*.o examples/*.o\nexamples/megacli examples/megasimplesync examples/.libs\ninclude/Makefile include/Makefile.in\ninclude/mega/config.h include/mega/config.h.in include/mega/stamp-h1\nm4/libtool.m4 m4/lt~obsolete.m4  m4/ltoptions.m4  m4/ltsugar.m4  m4/ltversion.m4\nsrc/*.lo\nsrc/.libs\nsrc/libmega.la\nsrc/thread/.deps src/thread/.dirstamp src/thread/.libs src/thread/*.lo\nsrc/.deps src/.dirstamp\nsrc/crypto/.deps src/crypto/.dirstamp src/crypto/.libs src/crypto/*.lo\nsrc/db/.deps src/db/.dirstamp src/db/.libs src/db/*.lo\nsrc/gfx/.deps src/gfx/.dirstamp src/gfx/.libs src/gfx/*.lo\nsrc/posix/.deps src/posix/.dirstamp src/posix/.libs src/posix/*.lo\nsrc/win32/.deps src/win32/.dirstamp\ntests/.deps tests/.dirstamp\ndoc/api doc/sphinx_api doc/_build\nmegacli1 megacli2 sync_in sync_out out\nsdk_build\n\"\nfor file in $TARGETS\ndo\n    rm -fr $file\ndone\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 18.51953125,
          "content": "##\n # @file configure.ac\n # @brief an input file for autoconf tool\n # (c) 2013 by Mega Limited, Auckland, New Zealand\n #\n # This file is part of the MEGAcmd.\n #\n # MEGAcmd is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n #\n # @copyright Simplified (2-clause) BSD License.\n #\n # You should have received a copy of the license along with this\n # program.\n##\n\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nm4_include([sdk/m4/ax_check_compile_flag.m4])\nm4_include([sdk/m4/ax_check_link_flag.m4])\nm4_include([sdk/m4/ax_cxx_compile_stdcxx.m4])\nm4_include([sdk/m4/ax_atomic.m4])\n\nm4_define([megacmd_major_version], [$(cat src/megacmdversion.h | grep \"define MEGACMD_MAJOR\" | cut -d\" \" -f 3)])\nm4_define([megacmd_minor_version], [$(cat src/megacmdversion.h | grep \"define MEGACMD_MINOR\" | cut -d\" \" -f 3)])\nm4_define([megacmd_micro_version], [$(cat src/megacmdversion.h | grep \"define MEGACMD_MICRO\" | cut -d\" \" -f 3)])\n\nm4_define([megacmd_version],\n          [megacmd_major_version.megacmd_minor_version.megacmd_micro_version])\n\n\n# libtool interface versioning\nm4_define([megacmd_lt_revision], [0])\nm4_define([megacmd_lt_current], [$(grep define <src/megacmdversion.h | awk '{print @S|@3}' | awk 'BEGIN { RS = \"\" ; FS = \"\\n\" } {printf @S|@1*10000+@S|@2*100+@S|@3}')])\nm4_define([megacmd_lt_age], [0])\n\nAC_INIT([MEGAcmd], m4_esyscmd([ grep define < src/megacmdversion.h | awk '{print $3}' | awk 'BEGIN { RS = \"\" ; FS = \"\\n\" } {printf $1\".\"$2\".\"$3}']), [https://github.com/meganz/megacmd])\n\nAC_PROG_CC\nAC_CONFIG_FILES(Makefile)\nAC_OUTPUT\n\nAC_CONFIG_SUBDIRS(sdk)\n\n\n# Define _GNU_SOURCE\n# AC_GNU_SOURCE\nAC_USE_SYSTEM_EXTENSIONS\n\nAM_INIT_AUTOMAKE([1.11 foreign silent-rules])\nAC_CONFIG_HEADERS([src/megacmdconfig.h]) #this avoids inline definitions of stuff already defined in sdk's config.h (e.g: -DPACKAGE_NAME)\n\nLT_INIT([shared disable-static win32-dll])\n#AC_CONFIG_MACRO_DIR([m4])\n\n# enable silent build\nm4_ifndef([AM_SILENT_RULES], [m4_define([AM_SILENT_RULES],[])])\nAM_SILENT_RULES([yes])\n\nLT_CURRENT=megacmd_lt_current\nLT_REVISION=megacmd_lt_revision\nLT_AGE=megacmd_lt_age\n\nAC_SUBST(LT_CURRENT)\nAC_SUBST(LT_REVISION)\nAC_SUBST(LT_AGE)\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_SIZE_T\nAC_TYPE_UINT8_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_PID_T\nAC_TYPE_OFF_T\n\nAH_VERBATIM([__STDC_FORMAT_MACROS],\n            [/* C99 says: define this to get the PRI... macros from stdint.h */\n#ifndef __STDC_FORMAT_MACROS\n# define __STDC_FORMAT_MACROS 1\n#endif])\n\nAC_CHECK_TYPES([ssize_t])\n\nAC_CANONICAL_HOST\n\n# Check programs\nAC_PROG_OBJCXX\nAC_PROG_CXX\nif test \"$CXX\" = no || test \"$CXX:$GXX\" = \"g++:\"; then\n  AC_MSG_ERROR([C++ compiler not found !])\nfi\n\nAC_PROG_LIBTOOL\nAM_SANITY_CHECK\n\n# Check for cppcheck\nAC_CHECK_PROG(HAVE_CPPCHECK, cppcheck, yes)\nAM_CONDITIONAL(CPPCHECK, test -n \"$HAVE_CPPCHECK\")\n\n# set C++\nAC_LANG_CPLUSPLUS\n\n# Check for C++11 standard\nAX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [default])\n\n# Check headers\nAC_STDC_HEADERS\nAC_HEADER_STDC\nAC_HEADER_STDBOOL\nAC_HEADER_DIRENT\n\n\n# Add 64-bits file support on some hosts\nAC_SYS_LARGEFILE\n# use new interfaces\nAC_FUNC_FSEEKO\nAC_TYPE_OFF_T\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_CHECK_SIZEOF([uint64_t])\nAC_STRUCT_TM\nAC_TYPE_OFF_T\nAC_TYPE_SIZE_T\n\nAC_CHECK_HEADERS([arpa/inet.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h sys/socket.h sys/timeb.h htonl glob.h malloc.h sys/malloc.h malloc/malloc.h])\n\n# Runtime checks\nAC_ARG_ENABLE(sanitizer,\n    AS_HELP_STRING([--enable-sanitizer@<:@=LIST@:>@],\n                   [compile with (potentially expensive) runtime checks enabled. LIST can be used to enable only certain checks.\n                   Available checks are: asan, ubsan, tsan, all (enables ubsan, asan), none.]),\n    [ac_checks=\"${enableval}\"], [])\nIFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\nfor check in $ac_checks\ndo\n    case $check in\n    no)\n     CHECKS_CXXFLAGS=\"\"\n     CHECKS_CPPFLAGS=\"\"\n     CHECKS_LDFLAGS=\"\"\n      ;;\n    all)\n     # Only enable Address and UB Sanitizer, as ThreadSanitizer cannot be enabled with ASan.\n     CHECKS_CXXFLAGS=\"-fsanitize=address -fsanitize=undefined -fno-common\"\n     CHECKS_CPPFLAGS=\"-fsanitize=address -fsanitize=undefined -fno-common\"\n     CHECKS_LDFLAGS=\"-fsanitize=address -fsanitize=undefined\"\n     enable_debug=\"yes\"\n      ;;\n    asan)\n      CHECKS_CXXFLAGS=\"-fsanitize=address -fno-common $CHECKS_CXXFLAGS\"\n      CHECKS_CPPFLAGS=\"-fsanitize=address -fno-common $CHECKS_CPPFLAGS\"\n      CHECKS_LDFLAGS=\"-fsanitize=address $CHECKS_LDFLAGS\"\n      enable_debug=\"yes\"\n      ;;\n    ubsan)\n      CHECKS_CXXFLAGS=\"-fsanitize=undefined $CHECKS_CXXFLAGS\"\n      CHECKS_CPPFLAGS=\"-fsanitize=undefined $CHECKS_CPPFLAGS\"\n      CHECKS_LDFLAGS=\"-fsanitize=undefined $CHECKS_LDFLAGS\"\n      enable_debug=\"yes\"\n      ;;\n    tsan)\n      CHECKS_CXXFLAGS=\"-fsanitize=thread $CHECKS_CXXFLAGS\"\n      CHECKS_CPPFLAGS=\"-fsanitize=thread $CHECKS_CPPFLAGS\"\n      CHECKS_LDFLAGS=\"-fsanitize=thread $CHECKS_LDFLAGS\"\n      enable_debug=\"yes\"\n      ;;\n    *) AC_MSG_ERROR([unknown check $check]) ;;\n    esac\ndone\nIFS=\"$ac_save_IFS\"\nCXXFLAGS=\"$CHECKS_CXXFLAGS $CXXFLAGS\"\nCPPFLAGS=\"$CHECKS_CPPFLAGS $CPPFLAGS\"\nLDFLAGS=\"$CHECKS_LDFLAGS $LDFLAGS\"\n\n# Debug\nAC_ARG_ENABLE(debug,\n    AS_HELP_STRING([--enable-debug], [enable support for running in debug mode]),\n    [], [enable_debug=no])\n\n# Enable debug flags / build\nif test \"x$enable_debug\" = \"xyes\" ; then\n    AM_CXXFLAGS=\"-Wall -ggdb3 -Og -fno-omit-frame-pointer\"\n    CXXFLAGS=\"-Wall -ggdb3 -Og -fno-omit-frame-pointer\"\n    AC_SUBST([AM_CXXFLAGS])\n    AC_DEFINE(DEBUG, 1, [Define to enable debug logging])\nelse\n    CXXFLAGS=\"$CXXFLAGS -DNDEBUG=1\"\nfi\n\n# Check if we can use -fPIC flag\nAX_CHECK_COMPILE_FLAG([-fPIC], [\n  AX_CHECK_LINK_FLAG([-fPIC],\n    [CXXFLAGS=\"$CXXFLAGS -fPIC\"]\n  )\n])\n\n# Enable backups\nCXXFLAGS=\"$CXXFLAGS -DENABLE_BACKUPS=1\"\n\nAM_CONDITIONAL(ENABLE_STATIC, test x$enable_static = xyes)\nAC_SUBST(ENABLE_STATIC)\n\n\n# TARGET OS:\nWIN32=no\nDARWIN=no\nANDROID=no\nLINUX=no\nAC_MSG_CHECKING([if building for Win32 platform])\ncase $host in\n  *-*-cygwin*)\n    LIBS_EXTRA=\"-luser32 -lkernel32\"\n    WIN32=yes\n    ;;\n  *-*-mingw*)\n    LIBS_EXTRA=\"-lws2_32 -lcrypt32 -lole32 -lwinmm -lshlwapi -lshell32\"\n    CXXFLAGS=\"$CXXFLAGS -DUNICODE -DWINVER=0x0501 -DHAVE_STRUCT_TIMESPEC\"\n    WIN32=yes\n    ;;\n  *-apple-darwin*)\n    AC_DEFINE([_XOPEN_SOURCE], [500], [Define _XOPEN_SOURCE])\n    AC_DEFINE([_DARWIN_C_SOURCE], [1], [Define _DARWIN_C_SOURCE])\n    DARWIN=yes\n    ;;\n  *-android*)\n    ANDROID=yes\n    ;;    \n  *-linux*)\n    LINUX=yes\n    ;;\n  *)\n    LIBS_EXTRA=\"\"\n    ;;\nesac\nAC_MSG_RESULT([${WIN32}])\nAM_CONDITIONAL([WIN32], [test \"${WIN32}\" = \"yes\"])\nAM_CONDITIONAL([DARWIN], [test \"${DARWIN}\" = \"yes\"])\nAM_CONDITIONAL([ANDROID], [test \"${ANDROID}\" = \"yes\"])\nAM_CONDITIONAL([LINUX], [test \"${LINUX}\" = \"yes\"])\n\nSAVE_LDFLAGS=$LDFLAGS\nSAVE_CXXFLAGS=$CXXFLAGS\nSAVE_CPPFLAGS=$CPPFLAGS\n\n#\n# PCRE\n#\n#with megacmd 0.9.4 & sdk 3.2.0, libpcrecpp is no linked in megasdk even when compiled with --with-pcre. Hence we need to check here\n#Plus, contrary to what the sdk will do, if non-specified and available we default it to true\n\n#libpcre\nAC_MSG_CHECKING(for libpcrecpp)\npcre=false\nAC_ARG_WITH(pcre,\n  AS_HELP_STRING(--with-pcre=PATH, base of libpcrecpp installation),\n  [\n   case $with_pcre in\n   no)\n    pcre=false\n     ;;\n   yes)\n    AC_CHECK_HEADERS([pcrecpp.h],, [\n        AC_MSG_ERROR([pcrecpp.h header not found or not usable])\n    ])\n    AC_CHECK_LIB(pcrecpp, [main], [PCRE_LIBS=\"-lpcrecpp\"],[\n            AC_MSG_ERROR([Could not find libpcrecpp])\n    ])\n    AC_CHECK_LIB(pcre, [pcre_compile], [PCRE_LIBS=\"$PCRE_LIBS -lpcre\"],[\n            AC_MSG_ERROR([Could not find libpcre])\n    ])\n    pcre=true\n     ;;\n   *)\n\n    # determine if library is installed\n    if test -d \"$with_pcre/lib64\"; then\n        LDFLAGS=\"-L$with_pcre/lib64 $LDFLAGS\"\n        CXXFLAGS=\"-I$with_pcre/include $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_pcre/include $CPPFLAGS\"\n\n        AC_CHECK_HEADERS(pcrecpp.h,\n         PCRE_CXXFLAGS=\"-I$with_pcre/include\"\n         PCRE_CPPFLAGS=\"-I$with_pcre/include\"\n         PCRE_LDFLAGS=\"-L$with_pcre/lib64\",\n         AC_MSG_ERROR([pcrecpp.h header not found or not usable])\n         )\n    else\n        LDFLAGS=\"-L$with_pcre/lib32 $LDFLAGS\"\n        CXXFLAGS=\"-I$with_pcre/include $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_pcre/include $CPPFLAGS\"\n\n        AC_CHECK_HEADERS(pcrecpp.h,\n         PCRE_CXXFLAGS=\"-I$with_pcre/include\"\n         PCRE_CPPFLAGS=\"-I$with_pcre/include\"\n         PCRE_LDFLAGS=\"-L$with_pcre/lib32\",\n         AC_MSG_ERROR([pcrecpp.h header not found or not usable])\n         )\n    fi\n\n    AC_CHECK_LIB(pcrecpp, [main], [PCRE_LIBS=\"-lpcrecpp\"],[\n            AC_MSG_ERROR([Could not find libpcrecpp])\n    ])\n    AC_CHECK_LIB(pcre, [pcre_compile], [PCRE_LIBS=\"$PCRE_LIBS -lpcre\"],[\n            AC_MSG_ERROR([Could not find libpcre])\n    ])\n\n    pcre=true\n\n    #restore\n    LDFLAGS=$SAVE_LDFLAGS\n    CXXFLAGS=$SAVE_CXXFLAGS\n    CPPFLAGS=$SAVE_CPPFLAGS\n    ;;\n   esac\n  ],\n  [AC_MSG_RESULT([--with-pcre not specified])\n      AC_CHECK_HEADERS([pcrecpp.h], [pcre=true], [])\n    AC_CHECK_LIB(pcrecpp, [main], [PCRE_LIBS=\"-lpcrecpp\"],[])\n    AC_CHECK_LIB(pcre, [pcre_compile], [PCRE_LIBS=\"$PCRE_LIBS -lpcre\"],[])\n  ])\n\nif test \"x$pcre\" = \"xtrue\" ; then\n    AC_DEFINE(USE_PCRE, [1], [Define to use libpcre])\nfi\nAM_CONDITIONAL([USE_PCRE], [test \"x$pcre\" = \"xtrue\"])\n\nAC_SUBST(PCRE_CXXFLAGS)\nAC_SUBST(PCRE_CPPFLAGS)\nAC_SUBST(PCRE_LDFLAGS)\nAC_SUBST(PCRE_LIBS)\n\n\n#################################################\n###      CLIENTS SPECIFIC DEPENDENCIES        ###\n#################################################\n#termcap\nAC_MSG_CHECKING(for termcap)\nAC_ARG_WITH(termcap,\n  AS_HELP_STRING(--with-termcap=PATH, base of termcap installation),\n  [AC_MSG_RESULT($with_termcap)\n   case $with_termcap in\n   no)\n     ;;\n   yes)\n    AC_CHECK_LIB([termcap], [tputs], [TERMCAP_LIBS=\"-ltermcap\"],\n        [AC_MSG_NOTICE([termcap library not found or not usable.])]\n    )\n    ;;\n   *)\n\n    # determine if library is installed\n    if test -d \"$with_termcap/lib\"; then\n        LDFLAGS=\"-L$with_termcap/lib $LDFLAGS\"\n        CXXFLAGS=\"-I$with_termcap/include $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_termcap/include $CPPFLAGS\"\n\n        AC_CHECK_HEADERS([termcap.h],[\n            TERMCAP_LDFLAGS=\"-L$with_termcap/lib\"\n            TERMCAP_CXXFLAGS=\"-I$with_termcap/include\"\n            TERMCAP_CPPFLAGS=\"-I$with_termcap/include\"],\n            AC_MSG_NOTICE([termcap.h header not found or not usable])\n        )\n    else\n        LDFLAGS=\"-L$with_termcap $LDFLAGS\"\n        CXXFLAGS=\"-I$with_termcap $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_termcap $CPPFLAGS\"\n\n        AC_CHECK_HEADERS([termcap.h],[\n            TERMCAP_LDFLAGS=\"-L$with_termcap\"\n            TERMCAP_CXXFLAGS=\"-I$with_termcap\"\n            TERMCAP_CPPFLAGS=\"-I$with_termcap\"],\n            AC_MSG_NOTICE([termcap.h header not found or not usable])\n        )\n    fi\n\n    AC_CHECK_LIB([termcap], [tputs], [TERMCAP_LIBS=\"-ltermcap\"], [\n        AC_MSG_NOTICE([termcap library not found or not usable.])])\n\n    #restore\n    LDFLAGS=$SAVE_LDFLAGS\n    CXXFLAGS=$SAVE_CXXFLAGS\n    CPPFLAGS=$SAVE_CPPFLAGS\n\n    ;;\n   esac\n  ],\n  [AC_MSG_RESULT([--with-termcap not specified])\n    AC_CHECK_LIB([termcap], [tputs], [TERMCAP_LIBS=\"-ltermcap\"],\n        [AC_MSG_NOTICE([termcap library not found or not usable.])]\n    )\n  ]\n)\nAC_SUBST(TERMCAP_LDFLAGS)\nAC_SUBST(TERMCAP_LIBS)\nAC_SUBST(TERMCAP_CXXFLAGS)\nAC_SUBST(TERMCAP_CPPFLAGS)\n\n# ReadLine\nAC_MSG_CHECKING(for Readline)\nAC_ARG_WITH(readline,\n  AS_HELP_STRING(--with-readline=PATH, base of Readline installation),\n  [AC_MSG_RESULT($with_readline)\n   case $with_readline in\n   no)\n    AC_MSG_ERROR([readline library is required for the sample client.])\n     ;;\n   yes)\n    AC_CHECK_HEADERS([readline/readline.h],, [\n        AC_MSG_ERROR([readline/readline.h header not found or not usable])\n    ])\n    # readline requires termcap (or ncurses)\n    SAVE_LIBS=$LIBS\n    LIBS=\"$TERMCAP_LIBS $LIBS\"\n    AC_CHECK_LIB([readline], [rl_save_prompt], [RL_LIBS=\"-lreadline\"], [\n        AC_MSG_ERROR([readline library is required for the sample client.])],\n        [$LIBS])\n    LIBS=$SAVE_LIBS\n     ;;\n   *)\n\n    # determine if library is installed\n    if test -d \"$with_readline/lib\"; then\n        LDFLAGS=\"-L$with_readline/lib $LDFLAGS\"\n        CXXFLAGS=\"-I$with_readline/include $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_readline/include $CPPFLAGS\"\n        AC_CHECK_HEADERS([readline/readline.h], [\n         RL_LDFLAGS=\"-L$with_readline/lib \"\n         RL_CXXFLAGS=\"-I$with_readline/include \"],\n         AC_MSG_ERROR([readline/readline.h header not found or not usable])\n        )\n    else\n        LDFLAGS=\"-L$with_readline $LDFLAGS\"\n        CXXFLAGS=\"-I$with_readline $CXXFLAGS\"\n        CPPFLAGS=\"-I$with_readline $CPPFLAGS\"\n        AC_CHECK_HEADERS([readline/readline.h], [\n         RL_LDFLAGS=\"-L$with_readline\"\n         RL_CXXFLAGS=\"-I$with_readline\"],\n         AC_MSG_ERROR([readline/readline.h header not found or not usable])\n        )\n    fi\n\n    # readline requires termcap (or ncurses)\n    SAVE_LIBS=$LIBS\n    LIBS=\"$TERMCAP_LIBS $LIBS\"\n    AC_CHECK_LIB([readline], [rl_save_prompt], [RL_LIBS=\"-lreadline\"], [\n        AC_MSG_ERROR([readline library is required for the sample client.])])\n    LIBS=$SAVE_LIBS\n\n    #restore\n    LDFLAGS=$SAVE_LDFLAGS\n    CXXFLAGS=$SAVE_CXXFLAGS\n    CPPFLAGS=$SAVE_CPPFLAGS\n    ;;\n   esac\n  ],\n  [AC_MSG_RESULT([--with-readline not specified])\n    AC_CHECK_HEADERS([readline/readline.h],, [\n        AC_MSG_ERROR([readline/readline.h header not found or not usable])\n    ])\n    # readline requires termcap (or ncurses)\n    SAVE_LIBS=$LIBS\n    LIBS=\"$TERMCAP_LIBS $LIBS\"\n    AC_CHECK_LIB([readline], [rl_save_prompt], [RL_LIBS=\"-lreadline\"], [\n        AC_MSG_ERROR([readline library is required for the sample client.])])\n    LIBS=$SAVE_LIBS\n  ]\n  )\nAC_SUBST(RL_LDFLAGS)\nAC_SUBST(RL_LIBS)\nAC_SUBST(RL_CXXFLAGS)\n\n# SQLite3\nsqlite=false\nAC_MSG_CHECKING(for SQLite)\nAC_ARG_WITH(sqlite,\n  AS_HELP_STRING(--with-sqlite=PATH, base of SQLite installation),\n  [AC_MSG_RESULT($with_sqlite)\n   case $with_sqlite in\n   no)\n    sqlite=false\n     ;;\n   yes)\n    AC_CHECK_HEADERS([sqlite3.h],, [\n        AC_MSG_ERROR([sqlite3.h header not found or not usable])\n    ])\n    AC_CHECK_LIB(sqlite3, [sqlite3_open], [DB_LIBS=\"-lsqlite3\"],[\n            AC_MSG_ERROR([Could not find libsqlite3])\n    ])\n    AC_SUBST(DB_LIBS)\n    sqlite=true\n     ;;\n   *)\n\n    # determine if library is installed\n    if test -d \"$with_sqlite/lib\"; then\n        LDFLAGS=\"-L$with_sqlite/lib $LDFLAGS\"\n        CXXFLAGS=\"-I$with_sqlite/include $CXXFLAGS\"\n\n        AC_CHECK_HEADERS(sqlite3.h,[\n         DB_LDFLAGS=\"-L$with_sqlite/lib\"\n         DB_CXXFLAGS=\"-I$with_sqlite/include\"\n         DB_CPPFLAGS=\"-I$with_sqlite/include\"],\n         AC_MSG_ERROR([sqlite3.h header not found or not usable])\n        )\n\n        # use sqlite3 library\n        AC_CHECK_LIB(sqlite3, [main], [DB_LIBS=\"-lsqlite3\"],[\n                AC_MSG_ERROR([Could not find libsqlite3])\n        ])\n        AC_SUBST(DB_LIBS)\n    else\n        LDFLAGS=\"-L$with_sqlite $LDFLAGS\"\n        CXXFLAGS=\"-I$with_sqlite $CXXFLAGS\"\n\n        AC_CHECK_HEADERS(sqlite3.h,[\n         DB_LDFLAGS=\"-L$with_sqlite\"\n         DB_CXXFLAGS=\"-I$with_sqlite\"\n         DB_CPPFLAGS=\"-I$with_sqlite\"],\n         AC_MSG_ERROR([sqlite3.h header not found or not usable])\n        )\n        DB_LIBS=\"-lsqlite3\"\n        AC_SUBST(DB_LIBS)\n    fi\n\n    sqlite=true\n\n    #restore\n    LDFLAGS=$SAVE_LDFLAGS\n    CXXFLAGS=$SAVE_CXXFLAGS\n    CPPFLAGS=$SAVE_CPPFLAGS\n    ;;\n   esac\n  ],\n  [AC_MSG_RESULT([--with-sqlite not specified])]\n  )\nAM_CONDITIONAL(USE_SQLITE, test x$sqlite = xtrue)\nAC_SUBST(DB_CXXFLAGS)\nAC_SUBST(DB_CPPFLAGS)\nAC_SUBST(DB_LDFLAGS)\n\n# check if no DB layer is selected, use SQLite by the default\nif test \"x$sqlite\" = \"xfalse\" ; then\n    AC_MSG_NOTICE([Using SQLite3 as the default DB access layer.])\n\n    AC_CHECK_HEADERS([sqlite3.h],, [\n        AC_MSG_ERROR([sqlite3.h header not found or not usable])\n    ])\n    AC_CHECK_LIB(sqlite3, [sqlite3_open], [DB_LIBS=\"-lsqlite3\"],[\n            AC_MSG_ERROR([Could not find libsqlite3])\n    ])\n    sqlite=true\n\n    AM_CONDITIONAL(USE_SQLITE, test x$sqlite = xtrue)\n    AC_SUBST(DB_LIBS)\nfi\n\nif test \"x$sqlite\" = \"xtrue\" ; then\n    AC_DEFINE(USE_SQLITE, [1], [Define to use SQLite])\nfi\n\n\n#PTHREAD\n\n# check for Pthreads\nAC_ARG_ENABLE(posix-threads,\n    AS_HELP_STRING(--disable-posix-threads, disable POSIX threads support),\n    [enable_posix_threads=no],\n    [enable_posix_threads=yes])\nif test x$enable_posix_threads != xno; then\n    AC_CHECK_LIB(pthread, pthread_create, [HAVE_PTHREAD=yes], [HAVE_PTHREAD=no])\nelse\n    HAVE_PTHREAD=no\nfi\nif test \"$HAVE_PTHREAD\" = \"yes\"; then\n    AC_DEFINE(USE_PTHREAD, 1, [Defined if pthreads are available])\n        if test \"$HAVE_PTHREAD\" = \"yes\"; then\n        SAVE_LDFLAGS=\"-pthread $SAVE_LDFLAGS\"\n        LDFLAGS=\"-pthread $LDFLAGS\"\n    fi    \nfi\nAM_CONDITIONAL([HAVE_PTHREAD], [test \"${HAVE_PTHREAD}\" = \"yes\"])\n\n\n## Tests\nAC_MSG_CHECKING([if building MEGAcmd tests])\nAC_ARG_ENABLE(megacmd-tests,\n    AS_HELP_STRING([--enable-megacmd-tests], [build MEGAcmd test applications]),\n    [], [enable_megacmd_tests=no])\nif test \"x$enable_megacmd_tests\" = \"xyes\" ; then\n    AC_ARG_WITH(gtest,\n        AS_HELP_STRING(--with-gtest=PATH, specify GTest location),\n        [AC_SUBST([GTEST_DIR],[$with_gtest])],\n        [AC_MSG_ERROR([GTest location must be specified. You can pass simply \"--with-gtest\" if expected to be in your include path])]\n    )\nfi\nAM_CONDITIONAL([BUILD_MEGACMD_TESTS], [test \"$enable_megacmd_tests\" = \"yes\"])\nAC_MSG_RESULT([$enable_megacmd_tests])\n\n\n# Add -latomic to LDFLAGS if needed\nCHECK_ATOMIC()\n\n#This will simulate compilation of sdk and extract the includes defined for it. Thus we can\n# take care of the configuration done for the subproject withtout having to recheck here\nAC_OUTPUT\nLMEGAINC=$(cd sdk; for i in $(make -n 2>/dev/null | grep \"\\-I\" | grep megaapi ); do echo $i; done | grep \"\\-I\" | sort | uniq | awk '{printf $0\" \"}')\nAC_SUBST(LMEGAINC)\n\n# Output\n#AC_CONFIG_FILES([\n# Makefile\n#])\nAC_OUTPUT\n#~ AC_OUTPUT([sdk/Makefile])\n\n\nAC_MSG_NOTICE([MEGAcmd configuration:\n\n  MEGACMD version:      megacmd_version\n  Install prefix:   $prefix\n  Compiler:         $CXX\n  CXXFLAGS:         $CXXFLAGS\n  CPPFLAGS:         $CPPFLAGS\n  LDFLAGS:          $LDFLAGS\n  debug:            $enable_debug\n  static:           $enable_static\n  posix threads:    $enable_posix_threads\n\n  Readline:         $RL_CXXFLAGS $RL_LDFLAGS $RL_LIBS\n  Termcap:          $TERMCAP_CXXFLAGS $TERMCAP_LDFLAGS $TERMCAP_LIBS\n  PCRE:             $PCRE_CXXFLAGS $PCRE_LDFLAGS $PCRE_LIBS\n  SDK includes:     $LMEGAINC\n  \n  MEGAcmd Tests:    $enable_megacmd_tests\n])\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "jenkinsfile",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk",
          "type": "commit",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}