{
  "metadata": {
    "timestamp": 1736565300547,
    "page": 116,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ericniebler/range-v3",
      "stars": 4170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buckconfig",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.970703125,
          "content": "{\n  AccessModifierOffset: -4,\n  AlignAfterOpenBracket: Align,\n  AlignEscapedNewlinesLeft: true,\n  AlignTrailingComments: true,\n  AllowAllParametersOfDeclarationOnNextLine: false,\n  AllowShortBlocksOnASingleLine: true,\n  AllowShortCaseLabelsOnASingleLine: false,\n  AllowShortFunctionsOnASingleLine: None,\n  AllowShortIfStatementsOnASingleLine: false,\n  AllowShortLoopsOnASingleLine: false,\n  AlwaysBreakBeforeMultilineStrings: true,\n  AlwaysBreakAfterReturnType: None,\n  AlwaysBreakTemplateDeclarations: true,\n  BinPackArguments: false,\n  BinPackParameters: true,\n  BraceWrapping: {\n    AfterCaseLabel: true,\n    AfterClass: true,\n    AfterControlStatement: true,\n    AfterEnum: true,\n    AfterFunction: true,\n    AfterNamespace: true,\n    AfterStruct: true,\n    AfterUnion: true,\n    AfterExternBlock: true,\n    BeforeCatch: true,\n    BeforeElse: true,\n    IndentBraces: false,\n    SplitEmptyFunction: false,\n    SplitEmptyRecord: false,\n    SplitEmptyNamespace: true,\n  },\n  BreakBeforeBinaryOperators: false,\n  BreakBeforeBraces: Custom,\n  BreakBeforeTernaryOperators: true,\n  BreakConstructorInitializers: BeforeComma,\n  BreakInheritanceList: BeforeComma,\n  ColumnLimit: 90,\n  ConstructorInitializerAllOnOneLineOrOnePerLine: false,\n  ConstructorInitializerIndentWidth: 2,\n  ContinuationIndentWidth: 4,\n  Cpp11BracedListStyle: true,\n  DerivePointerAlignment: false,\n  ExperimentalAutoDetectBinPacking: false,\n  ForEachMacros: ['RANGES_FOR',],\n  IncludeBlocks: Regroup,\n  IncludeCategories: [\n    { Regex:           '^<range/v3/detail/prologue.hpp',\n      Priority:        8},\n    { Regex:           '^<range/v3/range_fwd.hpp',\n      Priority:        6},\n    { Regex:           '^<range/v3',\n      Priority:        7},\n    { Regex:           '^<concepts/',\n      Priority:        5},\n    { Regex:           '^<meta/',\n      Priority:        4},\n    { Regex:           '^<std/.*>$',\n      Priority:        3},\n    { Regex:           '^<benchmark/.*>$',\n      Priority:        2},\n    { Regex:           '^<.*>$',\n      Priority:        1},\n  ],\n  IndentCaseLabels: false,\n  IndentFunctionDeclarationAfterType: false,\n  IndentWidth: 4,\n  KeepEmptyLinesAtTheStartOfBlocks: true,\n  Language: Cpp,\n  MaxEmptyLinesToKeep: 1,\n  MacroBlockBegin: \"^(RANGES|META)_BEGIN_NAMESPACE_(STD|VERSION|CONTAINER)|RANGES_FUNC_BEGIN$\",\n  MacroBlockEnd: \"^(RANGES|META)_END_NAMESPACE_(STD|VERSION|CONTAINER)|RANGES_FUNC_END$\",\n  NamespaceIndentation: All,\n  PenaltyBreakBeforeFirstCallParameter: 10,\n  PenaltyReturnTypeOnItsOwnLine: 1000,\n  PointerAlignment: Middle,\n  SpaceAfterControlStatementKeyword: false,\n  SpaceAfterTemplateKeyword: false,\n  SpaceBeforeAssignmentOperators: true,\n  SpaceBeforeParens: Never,\n  SpaceInEmptyParentheses: false,\n  SpacesBeforeTrailingComments: 1,\n  SpacesInAngles: false,\n  SpacesInCStyleCastParentheses: false,\n  SpacesInParentheses: false,\n  Standard: Cpp11,\n  StatementMacros: [\n    'RANGES_INLINE_VARIABLE',\n    'RANGES_DEFINE_CPO',\n    'CPP_member',\n    'CPP_broken_friend_member',\n  ],\n  TabWidth: 4,\n  UseTab: Never,\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.18359375,
          "content": "*.hpp text\n*.cpp text\n*.txt text\n*.html text\n*.md text\n*.yml text\n*.xml text\n*.in text\n.gitattributes text\n.gitignore text\n\n*.cmd -text\n*.sln -text\n*.vcxproj -text\n*.vcxproj.filters -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.025390625,
          "content": "## Copyright (c) 2013 GitHub, Inc.\n##\n## Permission is hereby granted,  free of charge,  to any person obtaining a\n## copy of this software and associated documentation files (the \"Software\"),\n## to deal in the Software without restriction, including without limitation\n## the rights to  use, copy, modify, merge, publish, distribute, sublicense,\n## and/or sell copies of the Software, and to permit persons to whom the\n## Software is furnished to do so, subject to the following conditions:\n##\n## The above copyright notice and this permission notice shall be included in\n## all copies or substantial portions of the Software.\n##\n## THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n## DEALINGS IN THE SOFTWARE.\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Clion files\n.idea\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild*/\nbld/\n[Bb]in/\n[Oo]bj/\nbazel-*\ncmake-build-*/\n\n# Bazel lock file\nMODULE.bazel.lock\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n## TODO: If the tool you use requires repositories.config, also uncomment the next line\n#!packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Buck build artefacts\n.buckd/\nbuck-out/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n.DS_Store\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Visual Studio stuff\n*.VC.db\n*.VC.opendb\n.vscode/\n.vs/\n.history/\n.devcontainer/\n\n\\#*#\n.#*\n/CMakeSettings.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.115234375,
          "content": "[submodule \"doc/gh-pages\"]\n\tpath = doc/gh-pages\n\turl = https://github.com/ericniebler/range-v3.git\n\tbranch = gh-pages\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUCK",
          "type": "blob",
          "size": 0.7080078125,
          "content": "prebuilt_cxx_library(\n  name = 'concepts',\n  header_namespace = 'concepts',\n  header_only = True,\n  exported_headers = subdir_glob([\n    ('include/concepts', '**/*.hpp'),\n  ]),\n  licenses = [\n    'LICENSE.txt',\n  ],\n)\n\nprebuilt_cxx_library(\n  name = 'meta',\n  header_namespace = 'meta',\n  header_only = True,\n  exported_headers = subdir_glob([\n    ('include/meta', '**/*.hpp'),\n  ]),\n  licenses = [\n    'LICENSE.txt',\n  ],\n)\n\nprebuilt_cxx_library(\n  name = 'range-v3',\n  header_namespace = 'range/v3',\n  header_only = True,\n  exported_headers = subdir_glob([\n    ('include/range/v3', '**/*.hpp'),\n  ]),\n  licenses = [\n    'LICENSE.txt',\n  ],\n  visibility = [\n    'PUBLIC'\n  ],\n  deps = [\n    ':concepts',\n    ':meta',\n  ],\n)\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.53515625,
          "content": "cc_library(\n  name = 'concepts',\n  hdrs = glob([\n    'include/concepts/**/*.hpp',\n  ]),\n  includes = [\n    \"include\",\n  ],\n)\n\ncc_library(\n  name = 'meta',\n  hdrs = glob([\n    'include/meta/**/*.hpp',\n  ]),\n  includes = [\n    \"include\",\n  ],\n)\n\ncc_library(\n  name = 'std',\n  hdrs = glob([\n    'include/std/**/*.hpp',\n  ]),\n  includes = [\n    \"include\",\n  ],\n)\n\ncc_library(\n  name = 'range-v3',\n  hdrs = glob([\n    'include/range/v3/**/*.hpp',\n  ]),\n  visibility = [\"//visibility:public\"],\n  deps = [\n    ':concepts',\n    ':meta',\n    ':std',\n  ],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.025390625,
          "content": "# Copyright Eric Niebler 2014\n# Copyright Gonzalo Brito Gadeschi 2014, 2017\n# Copyright Louis Dionne 2015\n# Copyright Casey Carter 2016\n# Distributed under the Boost Software License, Version 1.0.\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\ncmake_minimum_required(VERSION 3.6)\nget_directory_property(is_subproject PARENT_DIRECTORY)\n\nif(NOT is_subproject)\n    set(is_standalone YES)\nelse()\n    set(is_standalone NO)\nendif()\n\nproject(Range-v3 CXX)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON) # Export compilation data-base\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\ninclude(ranges_options)\ninclude(ranges_env)\ninclude(ranges_flags)\n\nadd_library(range-v3-meta INTERFACE)\nadd_library(range-v3::meta ALIAS range-v3-meta)\ntarget_include_directories(range-v3-meta INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>)\ntarget_include_directories(range-v3-meta SYSTEM INTERFACE $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>)\ntarget_compile_options(range-v3-meta INTERFACE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->\n                                               $<$<COMPILE_LANG_AND_ID:CUDA,MSVC>:-Xcompiler=/permissive->)\n\nadd_library(range-v3-concepts INTERFACE)\nadd_library(range-v3::concepts ALIAS range-v3-concepts)\ntarget_include_directories(range-v3-concepts INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>)\ntarget_include_directories(range-v3-concepts SYSTEM INTERFACE $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>)\ntarget_compile_options(range-v3-concepts INTERFACE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->\n                                                   $<$<COMPILE_LANG_AND_ID:CUDA,MSVC>:-Xcompiler=/permissive->)\ntarget_link_libraries(range-v3-concepts INTERFACE range-v3::meta)\n\nadd_library(range-v3 INTERFACE)\nadd_library(range-v3::range-v3 ALIAS range-v3)\ntarget_include_directories(range-v3 INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>)\ntarget_include_directories(range-v3 SYSTEM INTERFACE $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>)\ntarget_compile_options(range-v3 INTERFACE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->\n                                          $<$<COMPILE_LANG_AND_ID:CUDA,MSVC>:-Xcompiler=/permissive->)\ntarget_link_libraries(range-v3 INTERFACE range-v3::concepts range-v3::meta)\n\nfunction(rv3_add_test TESTNAME EXENAME FIRSTSOURCE)\n  add_executable(range.v3.${EXENAME} ${FIRSTSOURCE} ${ARGN})\n  target_link_libraries(range.v3.${EXENAME} range-v3)\n  add_test(range.v3.${TESTNAME} range.v3.${EXENAME})\nendfunction(rv3_add_test)\n\nif(RANGE_V3_DOCS)\n  add_subdirectory(doc)\nendif()\n\nif(RANGE_V3_TESTS)\n  include(CTest)\n  add_subdirectory(test)\nendif()\n\nif(RANGE_V3_EXAMPLES)\n  add_subdirectory(example)\nendif()\n\nif(RANGE_V3_PERF)\n  include(gtest)\n  include(gbenchmark)\n  add_subdirectory(perf)\nendif()\n\n# Add header files as sources to fix MSVS 2017 not finding source during debugging\nfile(GLOB_RECURSE RANGE_V3_PUBLIC_HEADERS_ABSOLUTE\n                  \"${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp\")\nadd_custom_target(range.v3.headers SOURCES ${RANGE_V3_PUBLIC_HEADERS_ABSOLUTE})\nset_target_properties(range.v3.headers PROPERTIES FOLDER \"header\")\n\n# Test all headers\nif(RANGE_V3_HEADER_CHECKS)\n  include(TestHeaders)\n\n  file(GLOB_RECURSE RANGE_V3_PUBLIC_HEADERS\n                    RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}/include\"\n                    \"${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp\")\n  # These headers are not meant to be included directly:\n  list(REMOVE_ITEM RANGE_V3_PUBLIC_HEADERS std/detail/associated_types.hpp)\n  list(REMOVE_ITEM RANGE_V3_PUBLIC_HEADERS range/v3/detail/epilogue.hpp)\n  # Deprecated headers\n  if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n    foreach(header ${RANGE_V3_PUBLIC_HEADERS})\n      file(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/include/${header}\" is_deprecated\n           LIMIT_COUNT 1\n           REGEX \".*RANGES_DEPRECATED_HEADER.*\")\n      if(is_deprecated)\n        list(APPEND RANGE_V3_DEPRECATED_PUBLIC_HEADERS \"${header}\")\n      endif()\n    endforeach()\n  endif()\n\n  if(NOT RANGE_V3_COROUTINE_FLAGS)\n      # Can't test this header if we can't even compile it\n      list(APPEND RANGE_V3_DEPRECATED_PUBLIC_HEADERS range/v3/experimental/utility/generator.hpp)\n  endif()\n\n  add_header_test(test.range.v3.headers\n    EXCLUDE ${RANGE_V3_DEPRECATED_PUBLIC_HEADERS}\n    HEADERS ${RANGE_V3_PUBLIC_HEADERS})\n  target_link_libraries(test.range.v3.headers PRIVATE range-v3)\nendif()\n\n# Grab the range-v3 version numbers:\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/Version.cmake)\nset(RANGE_V3_VERSION ${RANGE_V3_MAJOR}.${RANGE_V3_MINOR}.${RANGE_V3_PATCHLEVEL})\n\n# Try to build a new version.hpp\nconfigure_file(version.hpp.in include/range/v3/version.hpp @ONLY)\nfile(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/include/range/v3/version.hpp RANGE_V3_OLD_VERSION_HPP)\nfile(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/include/range/v3/version.hpp RANGE_V3_NEW_VERSION_HPP)\n\n# If the new version.hpp is materially different from the one in the source\n# directory, update it, commit, and tag.\nif(NOT RANGE_V3_NEW_VERSION_HPP STREQUAL RANGE_V3_OLD_VERSION_HPP)\n  # Check that doc/release_notes.md and Version.cmake are the only changed file:\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} -C \"${CMAKE_CURRENT_SOURCE_DIR}\" status --porcelain -uno\n    OUTPUT_VARIABLE RANGE_V3_GIT_STATUS\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  string(REPLACE \"\\n\" \";\"  RANGE_V3_GIT_STATUS ${RANGE_V3_GIT_STATUS})\n  if (NOT \"x${RANGE_V3_GIT_STATUS}\" STREQUAL \"x M Version.cmake; M doc/release_notes.md\")\n    message(FATAL_ERROR \"Cannot update version.hpp: range-v3 source directory has a dirty status\")\n  endif()\n  file(\n    COPY ${CMAKE_CURRENT_BINARY_DIR}/include/range/v3/version.hpp\n    DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/include/range/v3\n  )\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} -C \"${CMAKE_CURRENT_SOURCE_DIR}\" add -u\n  )\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} -C \"${CMAKE_CURRENT_SOURCE_DIR}\" commit -m \"${RANGE_V3_VERSION}\"\n  )\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} -C \"${CMAKE_CURRENT_SOURCE_DIR}\" tag -f -a \"${RANGE_V3_VERSION}\" -m \"${RANGE_V3_VERSION}\"\n  )\n  find_program(CONAN_EXECUTABLE NAMES conan conan.exe)\n  if (NOT \"x${CONAN_EXECUTABLE}\" STREQUAL \"xCONAN_EXECUTABLE-NOTFOUND\")\n    message(STATUS \"Exporting conanfile for new version\")\n    execute_process(\n      COMMAND ${CONAN_EXECUTABLE} create . range-v3/${RANGE_V3_VERSION}@ericniebler/stable\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    )\n  endif()\n  message(STATUS \"Version updated to ${RANGE_V3_VERSION}. Don't forget to:\")\n  message(STATUS \"  git push origin <feature-branch>\")\n  message(STATUS \"and (after that is merged to master) then:\")\n  message(STATUS \"  conan remote add range-v3 https://api.bintray.com/conan/range-v3/range-v3\")\n  message(STATUS \"  conan create ${CMAKE_CURRENT_SOURCE_DIR} range-v3/${RANGE_V3_VERSION}@ericniebler/stable\")\n  message(STATUS \"  conan upload --all range-v3/${RANGE_V3_VERSION}@ericniebler/stable -r=range-v3\")\nendif()\n\nif (RANGE_V3_INSTALL)\n  include(CMakePackageConfigHelpers)\n\n  # write_basic_package_version_file(...) gained ARCH_INDEPENDENT in CMake 3.14.\n  # For CMake 3.6, this workaround makes the version file ARCH_INDEPENDENT\n  # by making CMAKE_SIZEOF_VOID_P empty.\n  set(OLD_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n  set(CMAKE_SIZEOF_VOID_P \"\")\n  write_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/range-v3-config-version.cmake\n    VERSION ${RANGE_V3_VERSION}\n    COMPATIBILITY ExactVersion\n  )\n  set(CMAKE_SIZEOF_VOID_P ${OLD_CMAKE_SIZEOF_VOID_P})\n\n  include(GNUInstallDirs)\n  install(TARGETS range-v3-concepts range-v3-meta range-v3 EXPORT range-v3-targets DESTINATION ${CMAKE_INSTALL_LIBDIR})\n  install(EXPORT range-v3-targets FILE range-v3-targets.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/range-v3)\n  install(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/range-v3-config-version.cmake\n    cmake/range-v3-config.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/range-v3)\n  install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} FILES_MATCHING PATTERN \"*\")\n\n  export(EXPORT range-v3-targets FILE range-v3-config.cmake)\nendif()\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 4.6484375,
          "content": "Acknowledgements\n----------------\n\nIn range-v3, I have integrated many ideas that come from other people. I would be remiss to not mention them. Many others helped either directly or indirectly in a variety of ways. In no particular order...\n\n| Contributor                 | Contribution |\n|-----------------------------|------|\n| Jeremy Siek                 | Container algorithms (in Boost pre-history), Boost.Iterators |\n| Thorston Ottoson            | Boost.Range v1 |\n| Neil Groves                 | Boost.Range v2 |\n| David Abrahams, Thomas Witt | Boost.Iterators, Sentinels |\n| Sean Parent                 | ASL, Projections, View / Range distinction, much Generic Program wisdom besides |\n| Dietmar Kühl                | Array Traits, Property Map |\n| Andrew Sutton               | C++ Concepts \"Lite\", Origin Libraries, Palo Alto Report |\n| Doug Gregor                 | C++0x Concepts |\n| Casey Carter                | Co-author and Editor, Ranges TS; major code contributions |\n| Gonzalo Brito Gadeschi      | Many ideas, bug reports, and code contributions |\n| Alexander Stepanov          | STL, Generic Programming, Iterators, Elements of Programming, etc. |\n| Bjarne Stroustrup           | A tireless effort to add proper support for Generic Programming to C++, early support for my Ranges proposal |\n| Herb Sutter                 | Early support for my Ranges proposal |\n| The Standard C++ Foundation | A generous grant supporting my Ranges work |\n\nAn Abreviated History\n--------------------\n\n**Range v1**\n\nI came to Boost in the early 2000's. By that time, Boost already had a Range library (Thorston Ottoson's). At this time, Boost.Range was little more that the `begin` and `end` free functions, and range-based overloads of the STL algorithms that dispatched to the iterator-based overloads in namespace `std`.\n\nBoost also already had the Iterators library by David Abrahams and Jeremy Siek. This library had iterator adaptors like `filter_iterator` and `transform_iterator`.\n\n**Range v2**\n\nIt seemed natural to me that the Range library and the adaptors from the Iterators library should be combined. I wrote the `filter` and `transform` range adaptors, commandeered the pipe operator (`|`) from bash for chaining, and put a rough library together called Range_ex in the Boost File Vault (which would later become the Boost Sandbox). I saw problems with my design and never finished it.\n\nA few years later, Neil Groves picked up some of the ideas in my Range\\_ex, polished them a great deal, published his own Range\\_ex library, and submitted it to Boost. It became Boost.Range v2. At the time of writing (March, 2017), it is the version still shipping with Boost.\n\n**Range v3**\n\nIn 2013, I published a blog post called [\"Out Parameters, Move Semantics, and Stateful Algorithms\"](http://ericniebler.com/2013/10/13/out-parameters-vs-move-semantics/) that turned my mind to ranges once again. Following that, it became clear to me that the Boost.Range library, designed for C++98, needed a facelift for the post-C++11 world. I began what I believed at the time would be a quick hack to bring Boost.Range into the modern world. I called it \"Range v3\", thinking it would become the third major version of the Boost.Range library. Subsequent posts detailed the evolution of my thinking as range-v3 took shape.\n\n**Standardization**\n\nAround this time, some big thinkers in the C++ community were working to resurrect the effort to add Concepts to C++. They published a paper ([N3351](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3351.pdf)) that would become known as the **\"Palo Alto Report\"** which detailed the necessary and sufficient language and library support for a concept-checked version of the Standard Template Library. The authors of the paper included Alexander Stepanov, Bjarne Stroustrup, Sean Parent, Andrew Sutton, and more. Andrew Sutton began working in earnest to realize the core language changes, an effort that became known as \"Concepts Lite\". It became the Concepts TS and ultimately C++20's `concept` language feature.\n\nI realized early on that Concepts Lite, or something like it, would become part of Standard C++. Recognizing that C++ would need a concept-ified Standard Library to go with the language feature, I began evolving range-v3 in that direction, eventually submitting [\"Ranges for the Standard Library, Revision 1\"](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html) to the C++ Standardization Committee, together with Andrew Sutton and Sean Parent. The Committee approved the direction in late 2014, and so it goes...\n\nAs of today (2022-06), C++20 has shipped with modest ranges support in the `std::ranges` namespace, with *much* more to come in C++23 and beyond. Stay tuned.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 7.0634765625,
          "content": "========================================================\nBoost Software License - Version 1.0 - August 17th, 2003\n========================================================\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n==============================================================================\nlibc++ License\n==============================================================================\n\nThe libc++ library is dual licensed under both the University of Illinois\n\"BSD-Like\" license and the MIT license.  As a user of this code you may choose\nto use it under either license.  As a contributor, you agree to allow your code\nto be used under both.\n\nFull text of the relevant licenses is included below.\n\n==============================================================================\n\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2009-2014 by the contributors listed in CREDITS.TXT\nhttp://llvm.org/svn/llvm-project/libcxx/trunk/CREDITS.TXT\n\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\n\nCopyright (c) 2009-2014 by the contributors listed in CREDITS.TXT\n  http://llvm.org/svn/llvm-project/libcxx/trunk/CREDITS.TXT\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n==============================================================================\nStepanov and McJones, \"Elements of Programming\" license\n==============================================================================\n\n// Copyright (c) 2009 Alexander Stepanov and Paul McJones\n//\n// Permission to use, copy, modify, distribute and sell this software\n// and its documentation for any purpose is hereby granted without\n// fee, provided that the above copyright notice appear in all copies\n// and that both that copyright notice and this permission notice\n// appear in supporting documentation. The authors make no\n// representations about the suitability of this software for any\n// purpose. It is provided \"as is\" without express or implied\n// warranty.\n//\n// Algorithms from\n// Elements of Programming\n// by Alexander Stepanov and Paul McJones\n// Addison-Wesley Professional, 2009\n\n==============================================================================\nSGI C++ Standard Template Library license\n==============================================================================\n\n// Copyright (c) 1994\n// Hewlett-Packard Company\n//\n// Permission to use, copy, modify, distribute and sell this software\n// and its documentation for any purpose is hereby granted without fee,\n// provided that the above copyright notice appear in all copies and\n// that both that copyright notice and this permission notice appear\n// in supporting documentation.  Hewlett-Packard Company makes no\n// representations about the suitability of this software for any\n// purpose.  It is provided \"as is\" without express or implied warranty.\n//\n// Copyright (c) 1996\n// Silicon Graphics Computer Systems, Inc.\n//\n// Permission to use, copy, modify, distribute and sell this software\n// and its documentation for any purpose is hereby granted without fee,\n// provided that the above copyright notice appear in all copies and\n// that both that copyright notice and this permission notice appear\n// in supporting documentation.  Silicon Graphics makes no\n// representations about the suitability of this software for any\n// purpose.  It is provided \"as is\" without express or implied warranty.\n//\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.0322265625,
          "content": "module(\n    name = \"range-v3\",\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.52734375,
          "content": "[![range-v3 CI](https://github.com/ericniebler/range-v3/actions/workflows/range-v3-ci.yml/badge.svg)](https://github.com/ericniebler/range-v3/actions/workflows/range-v3-ci.yml)\n\nrange-v3\n========\n\nRange library for C++14/17/20. This code was the basis of [a formal proposal](https://ericniebler.github.io/std/wg21/D4128.html) to add range support to the C++ standard library. That proposal evolved through a Technical Specification, and finally into [P0896R4 \"The One Ranges Proposal\"](https://wg21.link/p0896r4) which was merged into the C++20 working drafts in November 2018.\n\nAbout:\n------\n\nRanges are an extension of the Standard Template Library that makes its iterators and algorithms more powerful by making them _composable_. Unlike other range-like solutions which seek to do away with iterators, in range-v3 ranges are an abstraction layer _on top_ of iterators.\n\nRange-v3 is built on three pillars: Views, Actions, and Algorithms. The algorithms are the same as those with which you are already familiar in the STL, except that in range-v3 all the algorithms have overloads that take ranges in addition to the overloads that take iterators. Views are composable adaptations of ranges where the adaptation happens lazily as the view is iterated. And an action is an eager application of an algorithm to a container that mutates the container in-place and returns it for further processing.\n\nViews and actions use the pipe syntax (e.g., `rng | adapt1 | adapt2 | ...`) so your code is terse and readable from left to right.\n\nDocumentation:\n--------------\n\nCheck out the (woefully incomplete) documentation [here](https://ericniebler.github.io/range-v3/).\n\nOther resources (mind the dates, the library probably has changed since then):\n\n- Usage:\n  - Talk: [CppCon 2015: Eric Niebler \"Ranges for the Standard Library\"](https://www.youtube.com/watch?v=mFUXNMfaciE), 2015.\n  - [A slice of Python in C++](http://ericniebler.com/2014/12/07/a-slice-of-python-in-c/), 07.12.2014.\n  - Actions (back then called [Container Algorithms](http://ericniebler.com/2014/11/23/container-algorithms/)), 23.11.2014.\n  - [Range comprehensions](http://ericniebler.com/2014/04/27/range-comprehensions/), 27.04.2014.\n  - [Input iterators vs input ranges](http://ericniebler.com/2013/11/07/input-iterators-vs-input-ranges/), 07.11.2013.\n\n- Design / Implementation:\n  - Rationale behind range-v3: [N4128: Ranges for the standard library Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html), 2014.\n  - Ranges TS: [N4560: C++ Extensions for Ranges](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf), 2015.\n  - Implementation of customization points in range-v3:\n    - [N4381: Suggested Design for Customization Points](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html), 2015.\n    - [P0386: Inline variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r0.pdf), 2016.\n    - [Customization Point Design in C++11 and Beyond](http://ericniebler.com/2014/10/21/customization-point-design-in-c11-and-beyond/), 2014.\n  - Proxy iterators in range-v3:\n    - [D0022: Proxy Iterators for the Ranges Extensions](https://ericniebler.github.io/std/wg21/D0022.html).\n    - [To Be or Not to Be (an Iterator)](http://ericniebler.com/2015/01/28/to-be-or-not-to-be-an-iterator/), 2015.\n    - [Iterators++: Part1](http://ericniebler.com/2015/02/03/iterators-plus-plus-part-1/), 2015.\n    - [Iterators++: Part2](http://ericniebler.com/2015/02/13/iterators-plus-plus-part-2/), 2015.\n    - [Iterators++: Part3](http://ericniebler.com/2015/03/03/iterators-plus-plus-part-3/), 2015.\n  - Metaprogramming utilities:\n    - See the [meta documentation](https://ericniebler.github.io/meta/index.html), the library has changed significantly since the [2014 blog post](http://ericniebler.com/2014/11/13/tiny-metaprogramming-library/).\n  - Concept emulation layer: [Concept checking in C++11](http://ericniebler.com/2013/11/23/concept-checking-in-c11/), 2013.\n  - [C++Now 2014: Eric Niebler \"C++11 Library Design\"](https://www.youtube.com/watch?v=zgOF4NrQllo), 2014.\n\nLicense:\n--------\n\nMost of the source code in this project are mine, and those are under the Boost Software License. Parts are taken from Alex Stepanov's Elements of Programming, Howard Hinnant's libc++, and from the SGI STL. Please see the attached LICENSE file and the CREDITS file for the licensing and acknowledgments.\n\nSupported Compilers\n-------------------\n\nThe code is known to work on the following compilers:\n\n- clang 5.0 (or later)\n- GCC 6.5 (or later)\n- Clang/LLVM 6 (or later) on Windows (older versions may work - we haven't tested.)\n- Visual Studio 2019 (or later) on Windows, with some caveats due to range-v3's strict conformance requirements:\n  - range-v3 needs `/permissive-` and either `/std:c++latest`, `/std:c++20`,  or `/std:c++17`\n\n**Development Status:** This code is fairly stable, well-tested, and suitable for casual use, although currently lacking documentation. _In general_, no promise is made about support or long-term stability. This code *will* evolve without regard to backwards compatibility.\n\nA notable exception is anything found within the `ranges::cpp20` namespace. Those components will change rarely or (preferably) never at all.\n\n**Build status**\n- on GitHub Actions: [![GitHub Actions Status](https://github.com/ericniebler/range-v3/workflows/range-v3%20CI/badge.svg?branch=master)](https://github.com/ericniebler/range-v3/actions)\n\nBuilding range-v3 - Using vcpkg\n-------------------------------\n\nYou can download and install range-v3 using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n```sh\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install range-v3\n```\nThe range-v3 port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nBuilding range-v3 - Using Conan\n-------------------------------\n\nYou can download and install range-v3 using the [Conan](https://github.com/conan-io/conan) dependency manager.\n\nSetup your CMakeLists.txt (see [Conan documentation](https://docs.conan.io/en/latest/integrations/build_system.html) on how to use MSBuild, Meson and others):\n```cmake\nproject(myproject CXX)\n\nadd_executable(${PROJECT_NAME} main.cpp)\n\ninclude(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake) # Include Conan-generated file\nconan_basic_setup(TARGETS) # Introduce Conan-generated targets\n\ntarget_link_libraries(${PROJECT_NAME} CONAN_PKG::range-v3)\n```\nCreate `conanfile.txt` in your source dir:\n```sh\n[requires]\nrange-v3/0.12.0\n\n[generators]\ncmake\n```\nInstall and run `conan`, then build your project as always:\n```sh\npip install conan\nmkdir build\ncd build\nconan install ../ --build=missing\ncmake ../\ncmake --build .\n```\n\nBuilding range-v3 - Using `build2`\n----------------------------------\n\nYou can use [`build2`](https://build2.org), a dependency manager and build-system combined, to use `range-v3` (or work on it):\n\nCurrently this package is available in these package repositories:\n - **https://cppget.org/range-v3/** for released and published versions.\n - [**The git repository with the sources of the `build2` package of `range-v3`**](https://github.com/build2-packaging/range-v3.git) for unreleased or custom revisions of `range-v3`, or for working on it with `build2`.\n\n### Usage:\n\n - `build2` package name: `range-v3`\n - Library target name : `lib{range-v3}`\n - [Detailed use cases and instructions in this document](https://github.com/build2-packaging/range-v3/blob/master/NOTES-build2.md).\n\nFor example, to make your `build2` project depend on `range-v3`:\n  - Add one of the repositories to your configurations, or in your `repositories.manifest`, if not already there; for example:\n    ```\n    :\n    role: prerequisite\n    location: https://pkg.cppget.org/1/alpha # v0.11.0 is there.\n    ```\n  - Add this package as a dependency to your `manifest` file (example for `v0.11.x`):\n    ```\n    depends: range-v3 ~0.11.0\n    ```\n  - Import the target and use it as a prerequisite to your own target using `range-v3` in the appropriate `buildfile`:\n    ```py\n    import range_v3 = range-v3%lib{range-v3}\n\n    lib{mylib} : cxx{**} ... $range_v3\n    ```\n\nThen just build your project as usual (with `b` or `bdep update`), `build2` will figure out the rest.\n\nFor `build2` newcomers or to get more details and use cases, you can read [this document](https://github.com/build2-packaging/range-v3/blob/master/NOTES-build2.md) and the [`build2` toolchain introduction](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml).\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.1044921875,
          "content": "* Add contiguous iterator utilities. How about `is_contiguous_iterator` and `as_contiguous_range`:\n\n    ```\n    CPP_template(typename I, typename S)(\n        requires RandomAccessIterator<I> &&\n            SizedSentinel<S, I> &&\n            is_contiguous_iterator<I>())\n    subrange<std::add_pointer_t<iter_reference_t<I>>>\n    as_contiguous_range(I begin, S end)\n    {\n        if(begin == end)\n            return {nullptr, nullptr};\n        else\n            return {addressof(*begin), addressof(*begin) + (end - begin)};\n    }\n    ```\n* Longer-term goals:\n  - Make `inplace_merge` work with forward iterators\n  - Make the sorting algorithms work with forward iterators\n\n* Maybe iterators are not necessarily countable. Is there a relation between\n  the ability to be able to subtract two iterators to find the distance, and\n  with the existence of a DistanceType associated type? Think of:\n  - counted iterators (subtractable regardless of traversal category)\n  - repeat_view iterators (*not* subtractable but could be random access otherwise)\n  - infinite ranges (only countable with an infinite precision integer which we lack)\n"
        },
        {
          "name": "Version.cmake",
          "type": "blob",
          "size": 0.328125,
          "content": "# To update the range-v3 version, from a working directory that is clean except for an\n# updated doc/release_notes.md file, update the version numbers below. This makefile will\n# generate a new version.hpp, *AMEND THE MOST RECENT COMMIT*, and git-tag the commit.\n\nset(RANGE_V3_MAJOR 0)\nset(RANGE_V3_MINOR 12)\nset(RANGE_V3_PATCHLEVEL 0)\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 1.2587890625,
          "content": "# Range v3 library\n#\n#  Copyright Luis Martinez de Bartolome Izquierdo 2016\n#\n#  Use, modification and distribution is subject to the\n#  Boost Software License, Version 1.0. (See accompanying\n#  file LICENSE_1_0.txt or copy at\n#  http://www.boost.org/LICENSE_1_0.txt)\n#\n# Project home: https://github.com/ericniebler/range-v3\n#\n\nfrom conans import ConanFile, CMake\n\nclass Rangev3Conan(ConanFile):\n    name = \"range-v3\"\n    version = \"0.12.0\"\n    license = \"Boost Software License - Version 1.0 - August 17th, 2003\"\n    url = \"https://github.com/ericniebler/range-v3\"\n    description = \"\"\"Experimental range library for C++14/17/20\"\"\"\n    # No settings/options are necessary, this is header only\n    exports_sources = \"include*\", \"LICENSE.txt\", \"CMakeLists.txt\", \"cmake/*\", \"Version.cmake\", \"version.hpp.in\"\n    no_copy_source = True\n\n    def package(self):\n        cmake = CMake(self)\n        cmake.definitions[\"RANGE_V3_TESTS\"] = \"OFF\"\n        cmake.definitions[\"RANGE_V3_EXAMPLES\"] = \"OFF\"\n        cmake.definitions[\"RANGE_V3_PERF\"] = \"OFF\"\n        cmake.definitions[\"RANGE_V3_DOCS\"] = \"OFF\"\n        cmake.definitions[\"RANGE_V3_HEADER_CHECKS\"] = \"OFF\"\n        cmake.configure()\n        cmake.install()\n\n        self.copy(\"LICENSE.txt\", dst=\"licenses\", ignore_case=True, keep_path=False)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_libcxx.sh",
          "type": "blob",
          "size": 3.60546875,
          "content": "#!/usr/bin/env bash\n\nTRUNK_VERSION=\"9.0.0\"\n\nset -e\n\n# The pattern of clang --version is: clang version X.Y.Z (sometimes, see below).\nCOMPILER_VERSION_OUTPUT=\"$($CXX --version)\"\narr=(${COMPILER_VERSION_OUTPUT// / })\n\nCOMPILER=\"${arr[0]}\"\nVERSION=\"${arr[2]}\"\n\ncase $COMPILER in\n    \"clang\")\n        # Some Ubuntu clang builds are advertised as \"just clang\", but the\n        # Version still follows the pattern: 3.6.2-svn240577-1~exp1\n        # echo \"Compiler is clang :)\"\n        arr2=(${VERSION//-/ })\n        VERSION=\"${arr2[0]}\"\n        ;;\n    \"Ubuntu\")\n        # Ubuntu renames _some_ (not all) of its clang compilers, the pattern of\n        # clang --version is then:\n        # Ubuntu clang version 3.6.2-svn240577-1~exp1\n        COMPILER=\"${arr[1]}\"\n        VERSION=\"${arr[3]}\"\n        arr2=(${VERSION//-/ })\n        VERSION=\"${arr2[0]}\"\n        ;;\n    *)\n        echo \"case did not match: compiler: ${COMPILER}\"\n        exit 1\n        ;;\nesac\n\nif [ ${COMPILER} != \"clang\" ]; then\n    echo \"Error: trying to install libc++ for a compiler that is not clang: ${COMPILER}\"\n    exit 1\nfi\n\nif [ -z ${VERSION+x} ]; then\n    echo \"Malformed libc++ version - I give up.\"\n    exit 4\nfi\n\nif [ ${VERSION} == $TRUNK_VERSION ]; then\n    echo \"Fetching libc++ and libc++abi tip-of-trunk...\"\n\n    # Checkout LLVM sources\n    git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source\n    git clone --depth=1 https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx\n    git clone --depth=1 https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi\nelse\n    echo \"Fetching libc++/libc++abi version: ${VERSION} ...\"\n    MAJOR=$(echo ${VERSION} | cut -d '.' -f 1)\n    if [[ ${MAJOR} -lt 14 ]]; then\n        URL_ROOT=\"https://releases.llvm.org/${VERSION}\"\n    else\n        URL_ROOT=\"https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}\"\n    fi\n    echo \"From url ${URL_ROOT} ...\"\n\n    LLVM_URL=\"${URL_ROOT}/llvm-${VERSION}.src.tar.xz\"\n    LIBCXX_URL=\"${URL_ROOT}/libcxx-${VERSION}.src.tar.xz\"\n    LIBCXXABI_URL=\"${URL_ROOT}/libcxxabi-${VERSION}.src.tar.xz\"\n    curl -LO $LLVM_URL\n    curl -LO $LIBCXX_URL\n    curl -LO $LIBCXXABI_URL\n\n    mkdir llvm-source\n    mkdir llvm-source/projects\n    mkdir llvm-source/projects/libcxx\n    mkdir llvm-source/projects/libcxxabi\n\n    tar -xf llvm-${VERSION}.src.tar.xz -C llvm-source --strip-components=1\n    tar -xf libcxx-${VERSION}.src.tar.xz -C llvm-source/projects/libcxx --strip-components=1\n    tar -xf libcxxabi-${VERSION}.src.tar.xz -C llvm-source/projects/libcxxabi --strip-components=1\nfi\n\nTARGET=`pwd`/llvm\nmkdir \"${TARGET}\"\nmkdir llvm-build\ncd llvm-build\n\n# - libc++ versions < 4.x do not have the install-cxxabi and install-cxx targets\n# - only ASAN is enabled for clang/libc++ versions < 4.x\nif [[ $VERSION == *\"3.\"* ]]; then\n    cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} \\\n          -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=\"${TARGET}\" \\\n          ../llvm-source\n    if [[ $SANITIZER == \"Address;Undefined\" ]]; then\n        ASAN_FLAGS=\"-fsanitize=address\"\n        cmake -DCMAKE_CXX_FLAGS=\"${ASAN_FLAGS}\" -DCMAKE_EXE_LINKER_FLAGS=\"${ASAN_FLAGS}\" ../llvm-source\n    fi\n    make cxx -j2 VERBOSE=1\n    mkdir \"${TARGET}/lib\"\n    mkdir \"${TARGET}/include\"\n    cp -r lib/* \"${TARGET}/lib\"\n    cp -r include/c++ \"${TARGET}/include\"\nelse\n    cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} \\\n          -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=\"${TARGET}\" \\\n          -DLIBCXX_ABI_UNSTABLE=ON \\\n          -DLLVM_USE_SANITIZER=${SANITIZER} \\\n          ../llvm-source\n    make cxx -j2 VERBOSE=1\n    make install-cxxabi install-cxx\nfi\n\nexit 0\n"
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_package",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.hpp.in",
          "type": "blob",
          "size": 0.6201171875,
          "content": "/// \\file\n// Range v3 library\n//\n//  Copyright Eric Niebler 2017-present\n//\n//  Use, modification and distribution is subject to the\n//  Boost Software License, Version 1.0. (See accompanying\n//  file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n// Project home: https://github.com/ericniebler/range-v3\n//\n\n#ifndef RANGES_V3_VERSION_HPP\n#define RANGES_V3_VERSION_HPP\n\n#define RANGE_V3_MAJOR @RANGE_V3_MAJOR@\n#define RANGE_V3_MINOR @RANGE_V3_MINOR@\n#define RANGE_V3_PATCHLEVEL @RANGE_V3_PATCHLEVEL@\n\n#define RANGE_V3_VERSION \\\n    (RANGE_V3_MAJOR * 10000 + RANGE_V3_MINOR * 100 + RANGE_V3_PATCHLEVEL)\n\n#endif\n"
        }
      ]
    }
  ]
}