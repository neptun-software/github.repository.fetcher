{
  "metadata": {
    "timestamp": 1736566014301,
    "page": 996,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "paullouisageneau/libdatachannel",
      "stars": 1859,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.21875,
          "content": "---\nBasedOnStyle: LLVM\nIndentWidth: 4\nTabWidth: 4\nUseTab: ForIndentation\n---\nLanguage: Cpp\nStandard: Cpp11\nAccessModifierOffset: -4\nColumnLimit: 100\n---\nLanguage: JavaScript\nIndentWidth: 2\nUseTab: Never\nColumnLimit: 100\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.306640625,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = tab\nindent_size = 4\n\n[*.js]\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[*.py]\ninsert_final_newline = false\nindent_style = space\nindent_size = 4\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11328125,
          "content": "build/\nnode_modules/\noutput/\n*.d\n*.o\n*.a\n*.so\n*.pyc\n*.pyo\n__pycache__\ncompile_commands.json\n/tests\n.DS_Store\n.idea\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.521484375,
          "content": "[submodule \"deps/plog\"]\n\tpath = deps/plog\n\turl = https://github.com/SergiusTheBest/plog.git\n\tshallow = true\n[submodule \"deps/usrsctp\"]\n\tpath = deps/usrsctp\n\turl = https://github.com/sctplab/usrsctp.git\n\tshallow = true\n[submodule \"deps/libjuice\"]\n\tpath = deps/libjuice\n\turl = https://github.com/paullouisageneau/libjuice.git\n[submodule \"deps/json\"]\n\tpath = deps/json\n\turl = https://github.com/nlohmann/json.git\n\tshallow = true\n[submodule \"deps/libsrtp\"]\n\tpath = deps/libsrtp\n\turl = https://github.com/cisco/libsrtp.git\n\tshallow = true\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1513671875,
          "content": "name: Build and test on FreeBSD\nos: freebsd\nlanguage: cpp\nscript:\n- sudo sysctl net.inet6.ip6.v6only=0\n- cmake -B build\n- cd build && make -j2 && ./tests\n\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 3.16796875,
          "content": "# libdatachannel - Building instructions\n\n## Clone repository\n\n```bash\n$ git clone https://github.com/paullouisageneau/libdatachannel.git\n```\n\n## Init submodules\n\nThis step is optional if `PREFER_SYSTEM_LIB` CMake option will be enabled.\n\n```bash\n$ cd libdatachannel\n$ git submodule update --init --recursive --depth 1\n```\n\n## Build with CMake\n\nThe CMake library targets `libdatachannel` and `libdatachannel-static` respectively correspond to the shared and static libraries. The default target will build tests and examples.\n\nOptions `USE_GNUTLS` and `USE_MBEDTLS` allow to switch the cryptographic backend to GnuTLS and Mbed TLS respectively, otherwise OpenSSL is selected by default. The option `USE_NICE` allows to switch between libjuice as submodule (default) and libnice as system library.\n\nThe option `PREFER_SYSTEM_LIB` allows to link against the system library rather than building all the submodule. Options `USE_SYSTEM_SRTP`, `USE_SYSTEM_JUICE`, `USE_SYSTEM_USRSCTP`, `USE_SYSTEM_PLOG` and `USE_SYSTEM_JSON` allow to do the same but per submodule, for libsrtp, libjuice, libusrsctp, Plog and Nlohmann JSON respectively.\n\nIf you only need Data Channels, the option `NO_MEDIA` allows to make the library lighter by removing media support. Similarly, `NO_WEBSOCKET` removes WebSocket support.\n\nFor the sake of performance, the library should be compiled in `Release` mode if you don't plan to debug it.\n\nThe CMake build exports the targets with namespace `LibDataChannel::LibDataChannel` and `LibDataChannel::LibDataChannelStatic` to link the library from another CMake project.\n\n### POSIX-compliant operating systems (including Linux and Apple macOS)\n\n```bash\n$ cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release\n$ cd build\n$ make -j2\n```\n\n### Apple macOS with Xcode project\n\nTo generate an Xcode project in the `build` directory:\n\n```bash\n$ cmake -B build -G Xcode -DUSE_GNUTLS=0 -DUSE_NICE=0\n```\n\n#### Solving \"Could NOT find OpenSSL\" error\n\nYou need to add OpenSSL root directory if the build fails with the following message:\n\n```\nCould NOT find OpenSSL, try to set the path to OpenSSL root folder in the system variable OPENSSL_ROOT_DIR (missing: OPENSSL_CRYPTO_LIBRARY OPENSSL_INCLUDE_DIR)\n```\n\nFor example:\n\n```bash\n$ cmake -B build -G Xcode -DUSE_GNUTLS=0 -DUSE_NICE=0 -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl\\@1.1/1.1.1h/\n```\n\n### Microsoft Windows with MinGW cross-compilation\n\n```bash\n$ cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=/usr/share/mingw/toolchain-x86_64-w64-mingw32.cmake # replace with your toolchain file\n$ cd build\n$ make -j2\n```\n\n### Microsoft Windows with Microsoft Visual C++\n\n```bash\n$ cmake -B build -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release\n$ cd build\n$ nmake\n```\n\n## Build directly with Make (Linux only)\n\nOptions `USE_GNUTLS` and `USE_MBEDTLS` allow to switch the cryptographic backend to GnuTLS and Mbed TLS respectively, otherwise OpenSSL is selected by default. The option `USE_NICE` allows to switch between libjuice as submodule (default) and libnice as system library.\n\nIf you only need Data Channels, the option `NO_MEDIA` removes media support. Similarly, `NO_WEBSOCKET` removes WebSocket support.\n\n```bash\n$ make USE_GNUTLS=0 USE_NICE=0\n```\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 23.111328125,
          "content": "cmake_minimum_required(VERSION 3.13)\nproject(libdatachannel\n\tVERSION 0.22.3\n\tLANGUAGES CXX)\nset(PROJECT_DESCRIPTION \"C/C++ WebRTC network library featuring Data Channels, Media Transport, and WebSockets\")\n\ninclude(GNUInstallDirs)\n\n# Options\noption(BUILD_SHARED_LIBS \"Build shared library\" ON)\noption(BUILD_SHARED_DEPS_LIBS \"Build submodules as shared libraries\" OFF)\noption(USE_GNUTLS \"Use GnuTLS instead of OpenSSL\" OFF)\noption(USE_MBEDTLS \"Use Mbed TLS instead of OpenSSL\" OFF)\noption(USE_NICE \"Use libnice instead of libjuice\" OFF)\noption(PREFER_SYSTEM_LIB \"Prefer system libraries over submodules\" OFF)\noption(USE_SYSTEM_SRTP \"Use system libSRTP\" ${PREFER_SYSTEM_LIB})\noption(USE_SYSTEM_JUICE \"Use system libjuice\" ${PREFER_SYSTEM_LIB})\noption(USE_SYSTEM_USRSCTP \"Use system libusrsctp\" ${PREFER_SYSTEM_LIB})\noption(USE_SYSTEM_PLOG \"Use system Plog\" ${PREFER_SYSTEM_LIB})\noption(USE_SYSTEM_JSON \"Use system Nlohmann JSON\" ${PREFER_SYSTEM_LIB})\noption(NO_WEBSOCKET \"Disable WebSocket support\" OFF)\noption(NO_MEDIA \"Disable media transport support\" OFF)\noption(NO_EXAMPLES \"Disable examples\" OFF)\noption(NO_TESTS \"Disable tests build\" OFF)\noption(WARNINGS_AS_ERRORS \"Treat warnings as errors\" OFF)\noption(CAPI_STDCALL \"Set calling convention of C API callbacks stdcall\" OFF)\noption(SCTP_DEBUG \"Enable SCTP debugging output to verbose log\" OFF)\noption(RTC_UPDATE_VERSION_HEADER \"Enable updating the version header\" OFF)\n\nif (USE_GNUTLS AND USE_MBEDTLS)\n\tmessage(FATAL_ERROR \"Both USE_MBEDTLS and USE_GNUTLS cannot be enabled at the same time\")\nendif()\n\nif(USE_GNUTLS)\n\toption(USE_NETTLE \"Use Nettle in libjuice\" ON)\nelse()\n\toption(USE_NETTLE \"Use Nettle in libjuice\" OFF)\n\n\tif(NOT USE_SYSTEM_SRTP)\n\t\tif (USE_MBEDTLS)\n\t\t\toption(ENABLE_MBEDTLS \"Enable Mbed TLS crypto engine for libSRTP\" ON)\n\t\telse()\n\t\t\toption(ENABLE_OPENSSL \"Enable OpenSSL crypto engine for libSRTP\" ON)\n\t\tendif()\n\tendif()\nendif()\n\nif(NOT WARNINGS_AS_ERRORS AND NOT USE_SYSTEM_SRTP)\n\toption(BUILD_WITH_WARNINGS \"Add warning as error flags for libSRTP\" OFF)\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nif(WIN32)\n\tadd_definitions(-DWIN32_LEAN_AND_MEAN)\n\tif(MSVC)\n\t\tadd_definitions(-DNOMINMAX)\n\t\tadd_definitions(-D_CRT_SECURE_NO_WARNINGS)\n\tendif()\nendif()\n\nset(LIBDATACHANNEL_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/candidate.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/channel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/configuration.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/datachannel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/description.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/mediahandler.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/global.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/message.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/peerconnection.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtcpreceivingsession.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/track.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/websocket.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/websocketserver.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtppacketizationconfig.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtcpsrreporter.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtppacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtpdepacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/h264rtppacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/h264rtpdepacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/nalunit.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/h265rtppacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/h265rtpdepacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/h265nalunit.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/av1rtppacketizer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtcpnackresponder.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rtp.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/capi.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/plihandler.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/pacinghandler.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/rembhandler.cpp\n)\n\nset(LIBDATACHANNEL_HEADERS\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/candidate.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/channel.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/configuration.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/datachannel.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/description.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/mediahandler.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtcpreceivingsession.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/common.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/global.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/message.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/frameinfo.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/peerconnection.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/reliability.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtc.h\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtc.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtp.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/track.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/websocket.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/websocketserver.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtppacketizationconfig.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtcpsrreporter.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtppacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtpdepacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/h264rtppacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/h264rtpdepacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/nalunit.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/h265rtppacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/h265rtpdepacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/h265nalunit.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/av1rtppacketizer.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rtcpnackresponder.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/utils.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/plihandler.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/pacinghandler.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/rembhandler.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/version.h\n)\n\nset(LIBDATACHANNEL_IMPL_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/certificate.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/channel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/datachannel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/dtlssrtptransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/dtlstransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/icetransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/init.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/peerconnection.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/logcounter.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/sctptransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/threadpool.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tls.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/track.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/utils.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/processor.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/sha.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/pollinterrupter.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/pollservice.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/http.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/httpproxytransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tcpserver.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tcptransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tlstransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/transport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/verifiedtlstransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/websocket.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/websocketserver.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/wstransport.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/wshandshake.cpp\n)\n\nset(LIBDATACHANNEL_IMPL_HEADERS\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/certificate.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/channel.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/datachannel.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/dtlssrtptransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/dtlstransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/icetransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/init.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/internals.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/peerconnection.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/queue.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/logcounter.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/sctptransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/threadpool.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tls.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/track.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/utils.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/processor.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/sha.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/pollinterrupter.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/pollservice.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/http.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/httpproxytransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tcpserver.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tcptransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/tlstransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/transport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/verifiedtlstransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/websocket.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/websocketserver.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/wstransport.hpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/wshandshake.hpp\n)\n\nset(TESTS_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/main.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/connectivity.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/negotiated.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/reliability.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/turn_connectivity.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/track.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/capi_connectivity.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/capi_track.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/websocket.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/websocketserver.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/capi_websocketserver.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/benchmark.cpp\n)\n\nset(TESTS_UWP_RESOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/Logo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/package.appxManifest\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/SmallLogo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/SmallLogo44x44.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/SplashScreen.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/StoreLogo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/tests/Windows_TemporaryKey.pfx\n)\n\nset(BENCHMARK_UWP_RESOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/Logo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/package.appxManifest\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/SmallLogo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/SmallLogo44x44.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/SplashScreen.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/StoreLogo.png\n\t${CMAKE_CURRENT_SOURCE_DIR}/test/uwp/benchmark/Windows_TemporaryKey.pfx\n)\n\nif(RTC_UPDATE_VERSION_HEADER)\n\tconfigure_file (\n\t\t${PROJECT_SOURCE_DIR}/cmake/version.h.in\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/version.h\n\t)\nendif()\n\nadd_library(datachannel\n\t${LIBDATACHANNEL_SOURCES}\n\t${LIBDATACHANNEL_HEADERS}\n\t${LIBDATACHANNEL_IMPL_SOURCES}\n\t${LIBDATACHANNEL_IMPL_HEADERS})\nset_target_properties(datachannel PROPERTIES\n\tVERSION ${PROJECT_VERSION}\n\tSOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n\tCXX_STANDARD 17\n\tCXX_VISIBILITY_PRESET default)\nif(APPLE)\n\tset_target_properties(datachannel PROPERTIES\n\t\tVERSION ${PROJECT_VERSION_MAJOR}\n\t\tSOVERSION ${PROJECT_VERSION_MAJOR})\nendif()\n\nadd_library(datachannel-static STATIC EXCLUDE_FROM_ALL\n\t${LIBDATACHANNEL_SOURCES}\n\t${LIBDATACHANNEL_HEADERS}\n\t${LIBDATACHANNEL_IMPL_SOURCES}\n\t${LIBDATACHANNEL_IMPL_HEADERS})\nset_target_properties(datachannel-static PROPERTIES\n\tVERSION ${PROJECT_VERSION}\n\tCXX_STANDARD 17)\n\ntarget_compile_definitions(datachannel PRIVATE RTC_EXPORTS)\nif (NOT BUILD_SHARED_LIBS)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_STATIC)\nendif()\ntarget_compile_definitions(datachannel-static PRIVATE RTC_EXPORTS)\ntarget_compile_definitions(datachannel-static PUBLIC RTC_STATIC)\n\nif(BUILD_SHARED_LIBS AND NOT BUILD_SHARED_DEPS_LIBS)\n\tset(BUILD_SHARED_LIBS OFF)\n\tset(INSTALL_DEPS_LIBS OFF)\nelse()\n\tset(INSTALL_DEPS_LIBS ON)\nendif()\n\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package(Threads REQUIRED)\n\nif(USE_SYSTEM_PLOG)\n\tfind_package(plog REQUIRED)\nelse()\n\tset(CMAKE_POLICY_DEFAULT_CMP0048 NEW)\n\tadd_subdirectory(deps/plog EXCLUDE_FROM_ALL)\nendif()\n\nif(SCTP_DEBUG)\n\tadd_definitions(-DSCTP_DEBUG)\nendif()\n\nif(USE_SYSTEM_USRSCTP)\n\tfind_package(Usrsctp REQUIRED)\nelse()\n\toption(sctp_build_shared_lib OFF)\n\toption(sctp_build_programs OFF)\n\toption(sctp_inet OFF)\n\toption(sctp_inet6 OFF)\n\toption(sctp_werror OFF)\n\tset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\tadd_subdirectory(deps/usrsctp EXCLUDE_FROM_ALL)\n\tif (MSYS OR MINGW)\n\t\ttarget_compile_definitions(usrsctp PUBLIC -DSCTP_STDINT_INCLUDE=<stdint.h>)\n\tendif()\n\tadd_library(Usrsctp::Usrsctp ALIAS usrsctp)\n\n\tif(INSTALL_DEPS_LIBS)\n\t\tinstall(TARGETS usrsctp EXPORT LibDataChannelTargets)\n\t\t# Fix directories\n\t\tset_target_properties(usrsctp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"\")\n\t\ttarget_include_directories(usrsctp INTERFACE\n\t\t\t$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/usrsctp/usrsctplib>\n\t\t\t$<INSTALL_INTERFACE:>)\n\tendif()\nendif()\n\ntarget_include_directories(datachannel PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>)\ntarget_include_directories(datachannel PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc\n\t${CMAKE_CURRENT_SOURCE_DIR}/src)\ntarget_link_libraries(datachannel PRIVATE\n\tThreads::Threads\n\tUsrsctp::Usrsctp\n\t$<BUILD_INTERFACE:plog::plog>)\n\ntarget_include_directories(datachannel-static PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>)\ntarget_include_directories(datachannel-static PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc\n\t${CMAKE_CURRENT_SOURCE_DIR}/src)\ntarget_link_libraries(datachannel-static PRIVATE\n\tThreads::Threads\n\tUsrsctp::Usrsctp\n\t$<BUILD_INTERFACE:plog::plog>)\n\nif(WIN32)\n\ttarget_link_libraries(datachannel PUBLIC ws2_32) # winsock2\n\ttarget_link_libraries(datachannel-static PUBLIC ws2_32) # winsock2\nendif()\n\nif (NO_WEBSOCKET)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=0)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=0)\nelse()\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=1)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=1)\nendif()\n\nif(NO_MEDIA)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=0)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=0)\nelse()\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=1)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=1)\n\tif(USE_SYSTEM_SRTP)\n\t\tfind_package(libSRTP REQUIRED)\n\t\tif(NOT TARGET libSRTP::srtp2)\n\t\t\tadd_library(libSRTP::srtp2 UNKNOWN IMPORTED)\n\t\t\tset_target_properties(libSRTP::srtp2 PROPERTIES\n\t\t\t\tINTERFACE_INCLUDE_DIRECTORIES ${SRTP_INCLUDE_DIRS}\n\t\t\t\tIMPORTED_LINK_INTERFACE_LANGUAGES C\n\t\t\t\tIMPORTED_LOCATION ${SRTP_LIBRARIES})\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=1)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=1)\n\t\ttarget_link_libraries(datachannel PRIVATE libSRTP::srtp2)\n\t\ttarget_link_libraries(datachannel-static PRIVATE libSRTP::srtp2)\n\telse()\n\t\tif(NOT TARGET srtp2)\n\t\t\tadd_subdirectory(deps/libsrtp EXCLUDE_FROM_ALL)\n\t\t\tif(INSTALL_DEPS_LIBS)\n\t\t\t\tinstall(TARGETS srtp2 EXPORT LibDataChannelTargets)\n\t\t\tendif()\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=0)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=0)\n\t\ttarget_link_libraries(datachannel PRIVATE srtp2)\n\t\ttarget_link_libraries(datachannel-static PRIVATE srtp2)\n\tendif()\nendif()\n\nif (USE_GNUTLS)\n\tfind_package(GnuTLS REQUIRED)\n\tif(NOT TARGET GnuTLS::GnuTLS)\n\t\tadd_library(GnuTLS::GnuTLS UNKNOWN IMPORTED)\n\t\tset_target_properties(GnuTLS::GnuTLS PROPERTIES\n\t\t\tINTERFACE_INCLUDE_DIRECTORIES \"${GNUTLS_INCLUDE_DIRS}\"\n\t\t\tINTERFACE_COMPILE_DEFINITIONS \"${GNUTLS_DEFINITIONS}\"\n\t\t\tIMPORTED_LINK_INTERFACE_LANGUAGES C\n\t\t\tIMPORTED_LOCATION \"${GNUTLS_LIBRARIES}\")\n\tendif()\n\ttarget_compile_definitions(datachannel PRIVATE USE_GNUTLS=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=1)\n\ttarget_link_libraries(datachannel PRIVATE GnuTLS::GnuTLS)\n\ttarget_link_libraries(datachannel-static PRIVATE GnuTLS::GnuTLS)\n\tif (NOT NO_WEBSOCKET)\n\t\t# Needed for SHA1, it should be present as GnuTLS cryptography backend\n\t\tfind_package(Nettle REQUIRED)\n\t\ttarget_link_libraries(datachannel PRIVATE Nettle::Nettle)\n\t\ttarget_link_libraries(datachannel-static PRIVATE Nettle::Nettle)\n\tendif()\nelseif(USE_MBEDTLS)\n\tif(NOT TARGET MbedTLS::MbedTLS)\n\t\tfind_package(MbedTLS 3 REQUIRED)\n\tendif()\n\ttarget_compile_definitions(datachannel PRIVATE USE_MBEDTLS=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_MBEDTLS=1)\n\ttarget_link_libraries(datachannel PRIVATE MbedTLS::MbedTLS)\n\ttarget_link_libraries(datachannel-static PRIVATE MbedTLS::MbedTLS)\nelse()\n\tif(APPLE)\n\t\t# This is a bug in CMake that causes it to prefer the system version over\n\t\t# the one in the specified ROOT folder\n\t\tif(EXISTS ${OPENSSL_ROOT_DIR})\n            # Use static files when OPENSSL_USE_STATIC_LIBS is set.\n            # OPENSSL_USE_STATIC_LIBS is what CMake's FindOpenSSL looks at\n            # to decide whether to use static libraries.\n            if(OPENSSL_USE_STATIC_LIBS)\n                set(OPENSSL_CRYPTO_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libcrypto.a\" CACHE FILEPATH \"\" FORCE)\n                set(OPENSSL_SSL_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libssl.a\" CACHE FILEPATH \"\" FORCE)\n            else()\n                set(OPENSSL_CRYPTO_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libcrypto.dylib\" CACHE FILEPATH \"\" FORCE)\n                set(OPENSSL_SSL_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libssl.dylib\" CACHE FILEPATH \"\" FORCE)\n            endif()\n\t\tendif()\n\tendif()\n\tfind_package(OpenSSL REQUIRED)\n\ttarget_compile_definitions(datachannel PRIVATE USE_GNUTLS=0)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=0)\n\ttarget_link_libraries(datachannel PRIVATE OpenSSL::SSL)\n\ttarget_link_libraries(datachannel-static PRIVATE OpenSSL::SSL)\nendif()\n\nif (USE_NICE)\n\tfind_package(LibNice REQUIRED)\n\ttarget_compile_definitions(datachannel PRIVATE USE_NICE=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_NICE=1)\n\ttarget_link_libraries(datachannel PRIVATE LibNice::LibNice)\n\ttarget_link_libraries(datachannel-static PRIVATE LibNice::LibNice)\nelse()\n\ttarget_compile_definitions(datachannel PRIVATE USE_NICE=0)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_NICE=0)\n\tif(USE_SYSTEM_JUICE)\n\t\tfind_package(LibJuice REQUIRED)\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=1)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=1)\n\t\ttarget_link_libraries(datachannel PRIVATE LibJuice::LibJuice)\n\t\ttarget_link_libraries(datachannel-static PRIVATE LibJuice::LibJuice)\n\telse()\n\t\tadd_subdirectory(deps/libjuice EXCLUDE_FROM_ALL)\n\t\tif(INSTALL_DEPS_LIBS)\n\t\t\tinstall(TARGETS juice EXPORT LibDataChannelTargets)\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=0)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=0)\n\t\ttarget_link_libraries(datachannel PRIVATE LibJuice::LibJuice)\n\t\ttarget_link_libraries(datachannel-static PRIVATE LibJuice::LibJuiceStatic)\n\tendif()\nendif()\n\nif(CAPI_STDCALL)\n\ttarget_compile_definitions(datachannel PUBLIC CAPI_STDCALL)\n\ttarget_compile_definitions(datachannel-static PUBLIC CAPI_STDCALL)\nendif()\n\nset_target_properties(datachannel PROPERTIES EXPORT_NAME LibDataChannel)\nadd_library(LibDataChannel::LibDataChannel ALIAS datachannel)\n\nset_target_properties(datachannel-static PROPERTIES EXPORT_NAME LibDataChannelStatic)\nadd_library(LibDataChannel::LibDataChannelStatic ALIAS datachannel-static)\n\nif(NOT MSVC)\n\ttarget_compile_options(datachannel PRIVATE -Wall -Wextra)\n\ttarget_compile_options(datachannel-static PRIVATE -Wall -Wextra)\nendif()\n\nif(WARNINGS_AS_ERRORS)\n\tif(MSVC)\n\t\ttarget_compile_options(datachannel PRIVATE /WX)\n\t\ttarget_compile_options(datachannel-static PRIVATE /WX)\n\telse()\n\t\ttarget_compile_options(datachannel PRIVATE -Werror)\n\t\ttarget_compile_options(datachannel-static PRIVATE -Werror)\n\tendif()\nendif()\n\ninstall(TARGETS datachannel EXPORT LibDataChannelTargets\n\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\tARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\ninstall(FILES ${LIBDATACHANNEL_HEADERS}\n\tDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rtc\n)\n\n# Export targets\ninstall(\n\tEXPORT LibDataChannelTargets\n\tFILE LibDataChannelTargets.cmake\n\tNAMESPACE LibDataChannel::\n\tDESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel\n)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/LibDataChannelConfig.cmake.in\n    ${CMAKE_BINARY_DIR}/LibDataChannelConfig.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel\n    NO_SET_AND_CHECK_MACRO\n    NO_CHECK_REQUIRED_COMPONENTS_MACRO\n)\nwrite_basic_package_version_file(\n    ${CMAKE_BINARY_DIR}/LibDataChannelConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY SameMajorVersion\n)\n# Export config and version files\ninstall(FILES\n\t${CMAKE_BINARY_DIR}/LibDataChannelConfig.cmake\n\t${CMAKE_BINARY_DIR}/LibDataChannelConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel)\n\n# Tests\nif(NOT NO_TESTS)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\t\t# Add resource files needed for UWP apps.\n\t\tadd_executable(datachannel-tests ${TESTS_SOURCES} ${TESTS_UWP_RESOURCES})\n\telse()\n\t\tadd_executable(datachannel-tests ${TESTS_SOURCES})\n\tendif()\n\n\tset_target_properties(datachannel-tests PROPERTIES\n\t\tVERSION ${PROJECT_VERSION}\n\t\tCXX_STANDARD 17\n\t\tOUTPUT_NAME tests)\n\n\tset_target_properties(datachannel-tests PROPERTIES\n\t\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.tests)\n\n\ttarget_include_directories(datachannel-tests PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\ttarget_link_libraries(datachannel-tests datachannel Threads::Threads)\n\n\t# Benchmark\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\t\t# Add resource files needed for UWP apps.\n\t\tadd_executable(datachannel-benchmark test/benchmark.cpp ${BENCHMARK_UWP_RESOURCES})\n\telse()\n\t\tadd_executable(datachannel-benchmark test/benchmark.cpp)\n\tendif()\n\n\tset_target_properties(datachannel-benchmark PROPERTIES\n\t\tVERSION ${PROJECT_VERSION}\n\t\tCXX_STANDARD 17\n\t\tOUTPUT_NAME benchmark)\n\n\tset_target_properties(datachannel-benchmark PROPERTIES\n\t\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.benchmark)\n\n\ttarget_compile_definitions(datachannel-benchmark PRIVATE BENCHMARK_MAIN=1)\n\ttarget_include_directories(datachannel-benchmark PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\ttarget_link_libraries(datachannel-benchmark datachannel Threads::Threads)\nendif()\n\n# Examples\nif(NOT NO_EXAMPLES)\n\tset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\tif(USE_SYSTEM_JSON)\n\t\tfind_package(nlohmann_json REQUIRED)\n\telse()\n\t\tadd_subdirectory(deps/json EXCLUDE_FROM_ALL)\n\tendif()\n\n\tif(NOT NO_WEBSOCKET)\n\t\tadd_subdirectory(examples/client)\n\t\tadd_subdirectory(examples/client-benchmark)\n\tendif()\n\tif(NOT NO_MEDIA)\n\t\tadd_subdirectory(examples/media-receiver)\n\t\tadd_subdirectory(examples/media-sender)\n\t\tadd_subdirectory(examples/media-sfu)\n\tendif()\n\tif(NOT NO_MEDIA AND NOT NO_WEBSOCKET)\n    \tadd_subdirectory(examples/streamer)\n\tendif()\n\tadd_subdirectory(examples/copy-paste)\n\tadd_subdirectory(examples/copy-paste-capi)\nendif()\n\n"
        },
        {
          "name": "DOC.md",
          "type": "blob",
          "size": 34.779296875,
          "content": "## libdatachannel - C API Documentation\n\nThe following details the C API of libdatachannel. The C API is available by including the `rtc/rtc.h` header.\n\n### General considerations\n\nUnless stated otherwise, functions return `RTC_ERR_SUCCESS`, defined as `0`, on success.\n\nAll functions can return the following negative error codes:\n\n- `RTC_ERR_INVALID`: an invalid argument was provided\n- `RTC_ERR_FAILURE`: a runtime error happened\n- `RTC_ERR_NOT_AVAIL`: an element is not available at the moment\n- `RTC_ERR_TOO_SMALL`: a user-provided buffer is too small\n\nAll functions taking pointers as arguments (excepted the opaque user pointer) need the memory to be accessible until the call returns, but it can be safely discarded afterwards.\n\n### Common\n\n#### rtcInitLogger\n\n```\nvoid rtcInitLogger(rtcLogLevel level, rtcLogCallbackFunc cb)\n```\n\nArguments:\n\n- `level`: the log level. It must be one of the following: `RTC_LOG_NONE`, `RTC_LOG_FATAL`, `RTC_LOG_ERROR`, `RTC_LOG_WARNING`, `RTC_LOG_INFO`, `RTC_LOG_DEBUG`, `RTC_LOG_VERBOSE`.\n- `cb` (optional): the callback to pass the log lines to. If the callback is already set, it is replaced. If NULL after a callback is set, the callback is unset. If NULL on first call, the library will log to stdout instead.\n\n`cb` must have the following signature:\n`void myLogCallback(rtcLogLevel level, const char *message)`\n\nArguments:\n\n- `level`: the log level for the current message. It will be one of the following: `RTC_LOG_FATAL`, `RTC_LOG_ERROR`, `RTC_LOG_WARNING`, `RTC_LOG_INFO`, `RTC_LOG_DEBUG`, `RTC_LOG_VERBOSE`.\n- `message`: a null-terminated string containing the log message\n\n#### rtcPreload\n\n```\nvoid rtcPreload(void)\n```\n\nAn optional call to `rtcPreload` preloads the global resources used by the library. If it is not called, resources are lazy-loaded when they are required for the first time by a PeerConnection, which for instance prevents from properly timing connection establishment (as the first one will take way more time). The call blocks until preloading is finished. If resources are already loaded, the call has no effect.\n\n#### rtcCleanup\n\n```\nvoid rtcCleanup(void)\n```\n\nAn optional call to `rtcCleanup` unloads the global resources used by the library. The call will block until unloading is done. If Peer Connections, Data Channels, Tracks, or WebSockets created through this API still exist, they will be destroyed. If resources are already unloaded, the call has no effect.\n\nWarning: This function requires all Peer Connections, Data Channels, Tracks, and WebSockets to be destroyed before returning, meaning all callbacks must return before this function returns. Therefore, it must never be called from a callback.\n\n#### rtcSetUserPointer\n\n```\nvoid rtcSetUserPointer(int id, void *user_ptr)\n```\n\nSets a opaque user pointer for a Peer Connection, Data Channel, Track, or WebSocket. The user pointer will be passed as last argument in each corresponding callback. It will never be accessed in any way. The initial user pointer of a Peer Connection or WebSocket is `NULL`, and the initial one of a Data Channel or Track is the one of the Peer Connection at the time of creation.\n\nArguments:\n\n- `id`: the identifier of Peer Connection, Data Channel, Track, or WebSocket\n- `user_ptr`: an opaque pointer whose meaning is up to the user\n\n### PeerConnection\n\n#### rtcCreatePeerConnection\n\n```\nint rtcCreatePeerConnection(const rtcConfiguration *config)\n\ntypedef struct {\n\tconst char **iceServers;\n\tint iceServersCount;\n\tconst char *proxyServer;\n\tconst char *bindAddress;\n\trtcCertificateType certificateType;\n\trtcTransportPolicy iceTransportPolicy;\n\tbool enableIceTcp;\n\tbool enableIceUdpMux;\n\tbool disableAutoNegotiation;\n\tbool forceMediaTransport;\n\tuint16_t portRangeBegin;\n\tuint16_t portRangeEnd;\n\tint mtu;\n\tint maxMessageSize;\n} rtcConfiguration;\n```\n\nCreates a Peer Connection.\n\nArguments:\n\n- `config`: the configuration structure, containing:\n  - `iceServers` (optional): an array of pointers on null-terminated ICE server URIs (NULL if unused)\n  - `iceServersCount` (optional): number of URLs in the array pointed by `iceServers` (0 if unused)\n  - `proxyServer` (optional): if non-NULL, specifies the proxy server URI to use for TURN relaying (ignored with libjuice as ICE backend)\n  - `bindAddress` (optional): if non-NULL, bind only to the given local address (ignored with libnice as ICE backend)\n  - `certificateType` (optional): certificate type, either `RTC_CERTIFICATE_ECDSA` or `RTC_CERTIFICATE_RSA` (0 or `RTC_CERTIFICATE_DEFAULT` if default)\n  - `iceTransportPolicy` (optional): ICE transport policy, if set to `RTC_TRANSPORT_POLICY_RELAY`, the PeerConnection will emit only relayed candidates (0 or `RTC_TRANSPORT_POLICY_ALL` if default)\n  - `enableIceTcp`: if true, generate TCP candidates for ICE (ignored with libjuice as ICE backend)\n  - `enableIceUdpMux`: if true, connections are multiplexed on the same UDP port (should be combined with `portRangeBegin` and `portRangeEnd`, ignored with libnice as ICE backend)\n  - `disableAutoNegotiation`: if true, the user is responsible for calling `rtcSetLocalDescription` after creating a Data Channel and after setting the remote description\n  - `forceMediaTransport`: if true, the connection allocates the SRTP media transport even if no tracks are present (necessary to add tracks during later renegotiation)\n  - `portRangeBegin` (optional): first port (included) of the allowed local port range (0 if unused)\n  - `portRangeEnd` (optional): last port (included) of the allowed local port (0 if unused)\n  - `mtu` (optional): manually set the Maximum Transfer Unit (MTU) for the connection (0 if automatic)\n  - `maxMessageSize` (optional): manually set the local maximum message size for Data Channels (0 if default)\n\nReturn value: the identifier of the new Peer Connection or a negative error code.\n\nThe Peer Connection must be deleted with `rtcDeletePeerConnection`.\n\nEach entry in `iceServers` must match the format `[(\"stun\"|\"turn\"|\"turns\") (\":\"|\"://\")][username \":\" password \"@\"]hostname[\":\" port][\"?transport=\" (\"udp\"|\"tcp\"|\"tls\")]`. The default scheme is STUN, the default port is 3478 (5349 over TLS), and the default transport is UDP. For instance, a STUN server URI could be `mystunserver.org`, and a TURN server URI could be `turn:myuser:12345678@turnserver.org`. Note transports TCP and TLS are only available for a TURN server with libnice as ICE backend and govern only the TURN control connection, meaning relaying is always performed over UDP.\n\nThe `proxyServer` URI, if present, must match the format `[(\"http\"|\"socks5\") (\":\"|\"://\")][username \":\" password \"@\"]hostname[\"    :\" port]`. The default scheme is HTTP, and the default port is 3128 for HTTP or 1080 for SOCKS5.\n\nIf the username or password of an URI contains reserved special characters, they must be percent-encoded. In particular, \":\" must be encoded as \"%3A\" and \"@\" must by encoded as \"%40\".\n\n#### rtcClosePeerConnection\n\n```\nint rtcClosePeerConnection(int pc)\n```\n\nCloses the Peer Connection.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\n#### rtcDeletePeerConnection\n\n```\nint rtcDeletePeerConnection(int pc)\n```\n\nDeletes the Peer Connection.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\nIf it is not already closed, the Peer Connection is implicitly closed before being deleted. After this function has been called, `pc` must not be used in a function call anymore. This function will block until all scheduled callbacks of `pc` return (except the one this function might be called in) and no other callback will be called for `pc` after it returns.\n\n#### rtcSetXCallback\n\nThese functions set, change, or unset (if `cb` is `NULL`) the different callbacks of a Peer Connection.\n\n```\nint rtcSetLocalDescriptionCallback(int pc, rtcDescriptionCallbackFunc cb)*\n```\n\n`cb` must have the following signature: `void myDescriptionCallback(int pc, const char *sdp, const char *type, void *user_ptr)`\n\n```\nint rtcSetLocalCandidateCallback(int pc, rtcCandidateCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myCandidateCallback(int pc, const char *cand, const char *mid, void *user_ptr)`\n\n```\nint rtcSetStateChangeCallback(int pc, rtcStateChangeCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myStateChangeCallback(int pc, rtcState state, void *user_ptr)`\n\n`state` will be one of the following: `RTC_CONNECTING`, `RTC_CONNECTED`, `RTC_DISCONNECTED`, `RTC_FAILED`, or `RTC_CLOSED`.\n\n```\nint rtcSetGatheringStateChangeCallback(int pc, rtcGatheringStateCallbackFunc cb)\n```\n\n`void myGatheringStateCallback(int pc, rtcGatheringState state, void *user_ptr)`\n\n`state` will be `RTC_GATHERING_INPROGRESS` or `RTC_GATHERING_COMPLETE`.\n\n```\nint rtcSetDataChannelCallback(int pc, rtcDataChannelCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myDataChannelCallback(int pc, int dc, void *user_ptr)`\n\n```\nint rtcSetTrackCallback(int pc, rtcTrackCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myTrackCallback(int pc, int tr, void *user_ptr)`\n\n#### rtcSetLocalDescription\n\n```\nint rtcSetLocalDescription(int pc, const char *type)\n```\n\nInitiates the handshake process. Following this call, the local description callback will be called with the local description, which must be sent to the remote peer by the user's method of choice. Note this call is implicit after `rtcSetRemoteDescription` and `rtcCreateDataChannel` if `disableAutoNegotiation` was not set on Peer Connection creation.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `type` (optional): type of the description (\"offer\", \"answer\", \"pranswer\", or \"rollback\") or NULL for autodetection.\n\n#### rtcSetRemoteDescription\n\n```\nint rtcSetRemoteDescription(int pc, const char *sdp, const char *type)\n```\n\nSets the remote description received from the remote peer by the user's method of choice. The remote description may have candidates or not.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `type` (optional): type of the description (\"offer\", \"answer\", \"pranswer\", or \"rollback\") or NULL for autodetection.\n\nIf the remote description is an offer and `disableAutoNegotiation` was not set in `rtcConfiguration`, the library will automatically answer by calling `rtcSetLocalDescription` internally. Otherwise, the user must call it to answer the remote description.\n\n#### rtcAddRemoteCandidate\n\n```\nint rtcAddRemoteCandidate(int pc, const char *cand, const char *mid)\n```\n\nAdds a trickled remote candidate received from the remote peer by the user's method of choice.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `cand`: a null-terminated SDP string representing the candidate (with or without the `\"a=\"` prefix)\n- `mid` (optional): a null-terminated string representing the mid of the candidate in the remote SDP description or NULL for autodetection\n\nThe Peer Connection must have a remote description set.\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\n#### rtcGetLocalDescription\n\n```\nint rtcGetLocalDescription(int pc, char *buffer, int size)\n```\n\nRetrieves the current local description in SDP format.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the description\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the description is not copied but the size is still returned.\n\n#### rtcGetRemoteDescription\n\n```\nint rtcGetRemoteDescription(int pc, char *buffer, int size)\n```\n\nRetrieves the current remote description in SDP format.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the description\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the description is not copied but the size is still returned.\n\n#### rtcGetLocalDescriptionType\n\n```\nint rtcGetLocalDescriptionType(int pc, char *buffer, int size)\n```\n\nRetrieves the current local description type as string.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the type\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the description is not copied but the size is still returned.\n\n#### rtcGetRemoteDescription\n\n```\nint rtcGetRemoteDescriptionType(int pc, char *buffer, int size)\n```\n\nRetrieves the current remote description type as string.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the type\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the description is not copied but the size is still returned.\n\n\n#### rtcGetLocalAddress\n\n```\nint rtcGetLocalAddress(int pc, char *buffer, int size)\n```\n\nRetrieves the current local address, i.e. the network address of the currently selected local candidate. The address will have the format `\"IP_ADDRESS:PORT\"`, where `IP_ADDRESS` may be either IPv4 or IPv6. The call might fail if the PeerConnection is not in state `RTC_CONNECTED`, and the address might change after connection.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the address\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the address is not copied but the size is still returned.\n\n#### rtcGetRemoteAddress\n\n```\nint rtcGetRemoteAddress(int pc, char *buffer, int size)\n```\n\nRetrieves the current remote address, i.e. the network address of the currently selected remote candidate. The address will have the format `\"IP_ADDRESS:PORT\"`, where `IP_ADDRESS` may be either IPv4 or IPv6. The call may fail if the state is not `RTC_CONNECTED`, and the address might change after connection.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `buffer`: a user-supplied buffer to store the address\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the address is not copied but the size is still returned.\n\n#### rtcGetSelectedCandidatePair\n\n```\nint rtcGetSelectedCandidatePair(int pc, char *local, int localSize, char *remote, int remoteSize)\n```\n\nRetrieves the currently selected candidate pair. The call may fail if the state is not `RTC_CONNECTED`, and the selected candidate pair might change after connection.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `local`: a user-supplied buffer to store the local candidate\n- `localSize`: the size of `local`\n- `remote`: a user-supplied buffer to store the remote candidate\n- `remoteSize`: the size of `remote`\n\nReturn value: the maximun length of strings copied in buffers (including the terminating null character) or a negative error code\n\nIf `local`, `remote`, or both, are `NULL`, the corresponding candidate is not copied, but the maximum length is still returned.\n\n#### rtcIsNegotiationNeeded\n```\nbool rtcIsNegotiationNeeded(int pc);\n```\n\nReturn true if negotiation needs to be started or restarted, for instance to signal new tracks. If so, the user may call `rtcSetLocalDescription()` to start it.\n\nArguments:\n- `pc`: the Peer Connection identifier\n\nReturn value: true if negotiation is needed\n\n#### rtcGetMaxDataChannelStream\n```\nint rtcGetMaxDataChannelStream(int pc);\n```\n\nRetrieves the maximum stream ID a Data Channel may use. It is useful to create user-negotiated Data Channels with `negotiated=true` and `manualStream=true`. The maximum is negotiated during connection, therefore the final value after connection might be lower than before connection if the remote maximum is lower.\n\nArguments:\n- `pc`: the Peer Connection identifier\n\nReturn value: the maximum stream ID (`stream` for a Data Channel may be set from 0 to this value included) or a negative error code\n\n#### rtcGetRemoteMaxMessageSize\n\n```\nint rtcGetRemoteMaxMessageSize(int pc)\n```\n\nRetrieves the maximum message size for data channels on the peer connection as negotiated with the remote peer.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n\nReturn value: the maximum message size for data channels or a negative error code\n\n### Channel (Common API for Data Channel, Track, and WebSocket)\n\nThe following common functions might be called with a generic channel identifier. It may be the identifier of either a Data Channel, a Track, or a WebSocket.\n\n#### rtcSetXCallback\n\nThese functions set, change, or unset (if `cb` is `NULL`) the different callbacks of a channel identified by the argument `id`.\n\n```\nint rtcSetOpenCallback(int id, rtcOpenCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myOpenCallback(int id, void *user_ptr)`\n\nIt is called when the channel was previously connecting and is now open.\n\n```\nint rtcSetClosedCallback(int id, rtcClosedCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myClosedCallback(int id, void *user_ptr)`\n\nIt is called when the channel was previously open and is now closed.\n\n```\nint rtcSetErrorCallback(int id, rtcErrorCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myErrorCallback(int id, const char *error, void *user_ptr)`\n\nIt is called when the channel experience an error, either while connecting or open.\n\n```\nint rtcSetMessageCallback(int id, rtcMessageCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myMessageCallback(int id, const char *message, int size, void *user_ptr)`\n\nIt is called when the channel receives a message. While it is set, messages can't be received with `rtcReceiveMessage`.\n\nTrack: By default, the track receives data as RTP packets.\n\n```\nint rtcSetBufferedAmountLowCallback(int id, rtcBufferedAmountLowCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myBufferedAmountLowCallback(int id, void *user_ptr)`\n\nIt is called when the buffered amount was strictly higher than the threshold (see `rtcSetBufferedAmountLowThreshold`) and is now lower or equal than the threshold.\n\n```\nint rtcSetAvailableCallback(int id, rtcAvailableCallbackFunc cb)\n```\n\n`cb` must have the following signature: `void myAvailableCallback(int id, void *user_ptr)`\n\nIt is called when messages are now available to be received with `rtcReceiveMessage`.\n\n#### rtcSendMessage\n\n```\nint rtcSendMessage(int id, const char *data, int size)\n```\n\nSends a message in the channel.\n\nArguments:\n\n- `id`: the channel identifier\n- `data`: the message data\n- `size`: if size >= 0, `data` is interpreted as a binary message of length `size`, otherwise it is interpreted as a null-terminated UTF-8 string.\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\nThe message is sent immediately if possible, otherwise it is buffered to be sent later.\n\nData Channel and WebSocket: If the message may not be sent immediately due to flow control or congestion control, it is buffered until it can actually be sent. You can retrieve the current buffered data size with `rtcGetBufferedAmount`.\n\nTrack: By default, the track expects RTP packets. There is no flow or congestion control, packets are never buffered and `rtcGetBufferedAmount` always returns 0.\n\n#### rtcClose\n\n```\nint rtcClose(int id)\n```\n\nClose the channel.\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\nWebSocket: Like with the JavaScript API, the state will first change to closing, then closed only after the connection has been actually closed.\n\n#### rtcDelete\n\n```\nint rtcDelete(int id)\n```\n\nDeletes the channel.\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\nIf it is not already closed, the channel is implicitly closed before being deleted. After this function has been called, `id` must not be used in a function call anymore. This function will block until all scheduled callbacks of `id` return (except the one this function might be called in) and no other callback will be called for `id` after it returns.\n\n#### rtcIsOpen\n\n```\nbool rtcIsOpen(int id)\n```\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: `true` if the channel exists and is open, `false` otherwise\n\n#### rtcIsClosed\n\n```\nbool rtcIsClosed(int id)\n```\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: `true` if the channel exists and is closed (not open and not connecting), `false` otherwise\n\n#### rtcGetMaxMessageSize\n\n```\nint rtcGetMaxMessageSize(int id)\n```\n\nRetrieves the maximum message size for the channel.\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: the maximum message size or a negative error code\n\n#### rtcGetBufferedAmount\n\n```\nint rtcGetBufferedAmount(int id)\n```\n\nRetrieves the current buffered amount, i.e. the total size of currently buffered messages waiting to be actually sent in the channel. This does not account for the data buffered at the transport level.\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: the buffered amount or a negative error code\n\n#### rtcSetBufferedAmountLowThreshold\n\n```\nint rtcSetBufferedAmountLowThreshold(int id, int amount)\n```\n\nChanges the buffered amount threshold under which `BufferedAmountLowCallback` is called. The callback is called when the buffered amount was strictly superior and gets equal to or lower than the threshold when a message is sent. The initial threshold is 0, meaning the the callback is called each time the buffered amount goes back to zero after being non-zero.\n\nArguments:\n\n- `id`: the channel identifier\n- `amount`: the new buffer level threshold\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\n#### rtcReceiveMessage\n\n```\nint rtcReceiveMessage(int id, char *buffer, int *size)\n```\n\nReceives a pending message if possible. The function may only be called if `MessageCallback` is not set.\n\nArguments:\n\n- `id`: the channel identifier\n- `buffer`: a user-supplied buffer where to write the message data\n- `size`: a pointer to a user-supplied int which must be initialized to the size of `buffer`. On success, the function will write the size of the message to it before returning (positive size if binary, negative size including terminating 0 if string).\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code (In particular, `RTC_ERR_NOT_AVAIL` is returned when there are no pending messages)\n\nIf `buffer` is `NULL`, the message is not copied and kept pending but the size is still written to `size`.\n\nTrack: By default, the track receives data as RTP packets.\n\n#### rtcGetAvailableAmount\n\n```\nint rtcGetAvailableAmount(int id)\n```\n\nRetrieves the available amount, i.e. the total size of messages pending reception with `rtcReceiveMessage`. The function may only be called if `MessageCallback` is not set.\n\nArguments:\n\n- `id`: the channel identifier\n\nReturn value: the available amount or a negative error code\n\n### Data Channel\n\n#### rtcCreateDataChannel\n\n```\nint rtcCreateDataChannel(int pc, const char *label)\nint rtcCreateDataChannelEx(int pc, const char *label, const rtcDataChannelInit *init)\n\ntypedef struct {\n\tbool unordered;\n\tbool unreliable;\n\tunsigned int maxPacketLifeTime;\n\tunsigned int maxRetransmits;\n} rtcReliability;\n\ntypedef struct {\n\trtcReliability reliability;\n\tconst char *protocol;\n\tbool negotiated;\n\tbool manualStream;\n\tuint16_t stream;\n} rtcDataChannelInit;\n```\n\nAdds a Data Channel on a Peer Connection. The Peer Connection does not need to be connected, however, the Data Channel will be open only when the Peer Connection is connected.\n\nArguments:\n\n- `pc`: identifier of the PeerConnection on which to add a Data Channel\n- `label`: a user-defined UTF-8 string representing the Data Channel name\n- `init`: a structure of initialization settings containing:\n  - `reliability`: a structure of reliability settings containing:\n    - `unordered`: if `true`, the Data Channel will not enforce message ordering, else it will be ordered\n    - `unreliable`: if `true`, the Data Channel will not enforce strict reliability, else it will be reliable\n    - `maxPacketLifeTime`: if unreliable, time window in milliseconds during which transmissions and retransmissions may occur\n    - `maxRetransmits`: if unreliable and maxPacketLifeTime is 0, maximum number of attempted retransmissions (0 means no retransmission)\n  - `protocol` (optional): a user-defined UTF-8 string representing the Data Channel protocol, empty if NULL\n  - `negotiated`: if `true`, the Data Channel is assumed to be negotiated by the user and won't be negotiated by the WebRTC layer\n  - `manualStream`: if `true`, the Data Channel will use `stream` as stream ID, else an available id is automatically selected\n  - `stream`: if `manualStream` is `true`, the Data Channel will use it as stream ID, else it is ignored\n\n`rtcDataChannel()` is equivalent to `rtcDataChannelEx()` with settings set to ordered, reliable, non-negotiated, with automatic stream ID selection (all flags set to `false`), and `protocol` set to an empty string.\n\nReturn value: the identifier of the new Data Channel or a negative error code.\n\nThe Data Channel must be deleted with `rtcDeleteDataChannel` (or `rtcDelete`).\n\nIf `disableAutoNegotiation` was not set in `rtcConfiguration`, the library will automatically initiate the negotiation by calling `rtcSetLocalDescription` internally. Otherwise, the user must call `rtcSetLocalDescription` to initiate the negotiation after creating the first Data Channel.\n\n#### rtcDeleteDataChannel\n\n```\nint rtcDeleteDataChannel(int dc)\n```\n\nDeletes a Data Channel.\n\nArguments:\n\n- `dc`: the Data Channel identifier\n\nAfter this function has been called, `dc` must not be used in a function call anymore. This function will block until all scheduled callbacks of `dc` return (except the one this function might be called in) and no other callback will be called for `dc` after it returns.\n\n#### rtcGetDataChannelStream\n\n```\nint rtcGetDataChannelStream(int dc)\n```\n\nRetrieves the stream ID of the Data Channel.\n\nArguments:\n\n- `dc`: the Data Channel identifier\n\nReturn value: the stream ID or a negative error code\n\n#### rtcGetDataChannelLabel\n\n```\nint rtcGetDataChannelLabel(int dc, char *buffer, int size)\n```\n\nRetrieves the label of a Data Channel.\n\nArguments:\n\n- `dc`: the Data Channel identifier\n- `buffer`: a user-supplied buffer to store the label\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the label is not copied but the size is still returned.\n\n#### rtcGetDataChannelProtocol\n\n```\nint rtcGetDataChannelProtocol(int dc, char *buffer, int size)\n```\n\nRetrieves the protocol of a Data Channel.\n\nArguments:\n\n- `dc`: the Data Channel identifier\n- `buffer`: a user-supplied buffer to store the protocol\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the protocol is not copied but the size is still returned.\n\n#### rtcGetDataChannelReliability\n\n```\nint rtcGetDataChannelReliability(int dc, rtcReliability *reliability)\n```\n\nRetrieves the reliability settings of a Data Channel. The function may be called irrelevant of how the Data Channel was created.\n\nArguments:\n\n- `dc`: the Data Channel identifier\n- `reliability` a user-supplied structure to fill\n\nReturn value: `RTC_ERR_SUCCESS` or a negative error code\n\n### Track\n\n#### rtcAddTrack\n\n```\nint rtcAddTrack(int pc, const char *mediaDescriptionSdp)\n```\n\nAdds a new Track on a Peer Connection. The Peer Connection does not need to be connected, however, the Track will be open only when the Peer Connection is connected.\n\nArguments:\n\n- `pc`: the Peer Connection identifier\n- `mediaDescriptionSdp`: a null-terminated string specifying the corresponding media SDP. It must start with a m-line and include a mid parameter.\n\nReturn value: the identifier of the new Track or a negative error code\n\nThe new track must be deleted with `rtcDeleteTrack` (or `rtcDelete`).\n\nThe user must call `rtcSetLocalDescription` to negotiate the track.\n\n#### rtcDeleteTrack\n\n```\nint rtcDeleteTrack(int tr)\n```\n\nDeletes a Track.\n\nArguments:\n\n- `tr`: the Track identifier\n\nAfter this function has been called, `tr` must not be used in a function call anymore. This function will block until all scheduled callbacks of `tr` return (except the one this function might be called in) and no other callback will be called for `tr` after it returns.\n\n#### rtcGetTrackDescription\n\n```\nint rtcGetTrackDescription(int tr, char *buffer, int size)\n```\n\nRetrieves the SDP media description of a Track.\n\nArguments:\n\n- `tr`: the Track identifier\n- `buffer`: a user-supplied buffer to store the description\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the description is not copied but the size is still returned.\n\n#### rtcGetTrackMid\n\n```\nint rtcGetTrackMid(int tr, char *buffer, int size)\n```\n\nRetrieves the mid (media indentifier) of a Track.\n\nArguments:\n\n- `tr`: the Track identifier\n- `buffer`: a user-supplied buffer to store the mid\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the mid is not copied but the size is still returned.\n\n#### rtcGetTrackDirection\n\n```\nint rtcGetTrackDirection(int tr, rtcDirection *direction)\n```\n\nRetrieves the direction of a Track.\n\nArguments:\n\n- `tr`: the Track identifier\n- `direction`: a pointer to a rtcDescription enum to store the result\n\nOn success, the value pointed by `direction` will be set to one of the following: `RTC_DIRECTION_SENDONLY`, `RTC_DIRECTION_RECVONLY`, `RTC_DIRECTION_SENDRECV`, `RTC_DIRECTION_INACTIVE`, or `RTC_DIRECTION_UNKNOWN`.\n\n### Media handling\n\nTODO\n\n### WebSocket\n\n#### rtcCreateWebSocket\n\n```\nint rtcCreateWebSocket(const char *url)\nint rtcCreateWebSocketEx(const char *url, const rtcWsConfiguration *config)\n\ntypedef struct {\n\tbool disableTlsVerification;\n\tconst char **protocols;\n\tint protocolsCount;\n\tint connectionTimeoutMs;\n\tint pingIntervalMs;\n\tint maxOutstandingPings;\n} rtcWsConfiguration;\n```\n\nCreates a new client WebSocket.\n\nArguments:\n\n- `url`: a null-terminated string representing the fully-qualified URL to open.\n- `config`: a structure with the following parameters:\n  - `disableTlsVerification`: if true, don't verify the TLS certificate, else try to verify it if possible\n  - `protocols` (optional): an array of pointers on null-terminated protocol names (NULL if unused)\n  - `protocolsCount` (optional): number of URLs in the array pointed by `protocols` (0 if unused)\n  - `connectionTimeoutMs` (optional): connection timeout in milliseconds (0 if default, < 0 if disabled)\n  - `pingIntervalMs` (optional): ping interval in milliseconds (0 if default, < 0 if disabled)\n  - `maxOutstandingPings` (optional): number of unanswered pings before declaring failure (0 if default, < 0 if disabled)\n\nReturn value: the identifier of the new WebSocket or a negative error code\n\nThe new WebSocket must be deleted with `rtcDeleteWebSocket` (or `rtcDelete`). The scheme of the URL must be either `ws` or `wss`.\n\n#### rtcDeleteWebSocket\n\n```\nint rtcDeleteWebSocket(int ws)\n```\n\nArguments:\n\n- `ws`: the identifier of the WebSocket to delete\n\nAfter this function has been called, `ws` must not be used in a function call anymore. This function will block until all scheduled callbacks of `ws` return (except the one this function might be called in) and no other callback will be called for `ws` after it returns.\n\n#### rtcGetWebSocketRemoteAddress\n\n```\nint rtcGetWebSocketRemoteAddress(int ws, char *buffer, int size)\n```\n\nRetrieves the remote address, i.e. the network address of the remote endpoint. The address will have the format `\"HOST:PORT\"`. The call may fail if the underlying TCP transport of the WebSocket is not connected. This function is useful for a client WebSocket received by a WebSocket Server.\n\nArguments:\n\n- `ws`: the identifier of the WebSocket\n- `buffer`: a user-supplied buffer to store the description\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the address is not copied but the size is still returned.\n\n#### rtcGetWebSocketPath\n\n```\nint rtcGetWebSocketPath(int ws, char *buffer, int size)\n```\n\nRetrieves the path of the WebSocket, i.e. the HTTP requested path. This function is useful for a client WebSocket received by a WebSocket Server. Warning: The WebSocket must be open for the call to succeed.\n\nArguments:\n\n- `ws`: the identifier of the WebSocket\n- `buffer`: a user-supplied buffer to store the description\n- `size`: the size of `buffer`\n\nReturn value: the length of the string copied in buffer (including the terminating null character) or a negative error code\n\nIf `buffer` is `NULL`, the path is not copied but the size is still returned.\n\n### WebSocket Server\n\n#### rtcCreateWebSocketServer\n\n```\nint rtcCreateWebSocketServer(const rtcWsServerConfiguration *config, rtcWebSocketClientCallbackFunc cb);\n\ntypedef struct {\n\tuint16_t port;\n\tbool enableTls;\n\tconst char *certificatePemFile;\n\tconst char *keyPemFile;\n\tconst char *keyPemPass;\n\tint connectionTimeoutMs;\n} rtcWsServerConfiguration;\n```\n\nCreates a new WebSocket server.\n\nArguments:\n\n- `config`: a structure with the following parameters:\n  - `port`: the port to listen on (if 0, automatically select an available port)\n  - `enableTls`: if true, enable the TLS layer (WSS)\n  - `certificatePemFile` (optional): PEM certificate or path of the file containing the PEM certificate (`NULL` for an autogenerated certificate)\n  - `keyPemFile` (optional): PEM key or path of the file containing the PEM key (`NULL` for an autogenerated certificate)\n  - `keyPemPass` (optional): PEM key file passphrase (NULL if no passphrase)\n  - `connectionTimeoutMs` (optional): connection timeout in milliseconds (0 if default, < 0 if disabled)\n- `cb`: the callback for incoming client WebSocket connections (must not be `NULL`)\n\n`cb` must have the following signature: `void rtcWebSocketClientCallbackFunc(int wsserver, int ws, void *user_ptr)`\n\nReturn value: the identifier of the new WebSocket Server or a negative error code\n\nThe new WebSocket Server must be deleted with `rtcDeleteWebSocketServer`.\n\n#### rtcDeleteWebSocketServer\n\n```\nint rtcDeleteWebSocketServer(int wsserver)\n```\n\nArguments:\n\n- `wsserver`: the identifier of the WebSocket Server to delete\n\nAfter this function has been called, `wsserver` must not be used in a function call anymore. This function will block until all scheduled callbacks of `wsserver` return (except the one this function might be called in) and no other callback will be called for `wsserver` after it returns.\n\n#### rtcGetWebSocketServerPort\n```\nint rtcGetWebSocketServerPort(int wsserver);\n```\n\nRetrieves the port which the WebSocket Server is listening on.\n\nArguments:\n\n- `wsserver`: the identifier of the WebSocket Server\n\nReturn value: The port of the WebSocket Server or a negative error code\n\n\n"
        },
        {
          "name": "Jamfile",
          "type": "blob",
          "size": 8.5263671875,
          "content": "import feature : feature ;\n\nproject libdatachannel ;\npath-constant CWD : . ;\n\nfeature gnutls : off on : composite propagated ;\nfeature.compose <gnutls>off\n    : <define>USE_GNUTLS=0 ;\nfeature.compose <gnutls>on\n    : <define>USE_GNUTLS=1 ;\n\nlib libdatachannel\n\t: # sources\n\t[ glob ./src/*.cpp ]\n\t[ glob ./src/impl/*.cpp ]\n\t: # requirements\n\t<cxxstd>17\n\t<include>./include\n\t<include>./include/rtc\n\t<include>./src\n\t<define>RTC_ENABLE_MEDIA=0\n\t<define>RTC_ENABLE_WEBSOCKET=0\n\t<define>USE_NICE=0\n\t<define>RTC_EXPORTS\n\t<define>RTC_STATIC\n\t<toolset>msvc:<define>WIN32_LEAN_AND_MEAN\n\t<toolset>msvc:<define>NOMINMAX\n\t<toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS\n\t<library>/libdatachannel//usrsctp\n\t<library>/libdatachannel//juice\n\t<library>/libdatachannel//plog\n\t<gnutls>on:<library>gnutls/<link>shared\n\t<gnutls>off:<library>ssl\n\t<gnutls>off:<library>crypto\n\t: # default build\n\t<link>static\n\t: # usage requirements\n\t<include>./include\n\t<define>RTC_ENABLE_MEDIA=0\n\t<define>RTC_ENABLE_WEBSOCKET=0\n\t<define>RTC_STATIC\n\t<library>/libdatachannel//plog\n\t<toolset>gcc:<cxxflags>\"-pthread -Wno-pedantic -Wno-unused-parameter -Wno-unused-variable\"\n\t<toolset>clang:<cxxflags>\"-pthread -Wno-pedantic -Wno-unused-parameter -Wno-unused-variable\"\n\t;\n\nalias plog\n    : # no sources\n    : # no build requirements\n    : # no default build\n    : # usage requirements\n    <include>./deps/plog/include\n    ;\n\nalias usrsctp\n    : # no sources\n    : # no build requirements\n    : # no default build\n    : # usage requirements\n    <include>./deps/usrsctp/usrsctplib\n    <library>libusrsctp.a\n    ;\n\nalias usrsctp\n    : # no sources\n    : <toolset>msvc\n    : # no default build\n    : # usage requirements\n    <include>./deps/usrsctp/usrsctplib\n    <library>usrsctp.lib\n    ;\n\nalias juice\n    : # no sources\n    : # no build requirements\n    : # no default build\n    : # usage requirements\n    <include>./deps/libjuice/include\n    <define>JUICE_STATIC\n    <gnutls>on:<library>libjuice-gnutls.a\n    <gnutls>on:<library>nettle/<link>shared\n    <gnutls>off:<library>libjuice-openssl.a\n    ;\n\nalias juice\n    : # no sources\n    : <toolset>msvc\n    : # no default build\n    : # usage requirements\n    <include>./deps/libjuice/include\n    <define>JUICE_STATIC\n    <library>juice-static.lib\n    ;\n\nmake libusrsctp.a : : @make_libusrsctp ;\nmake usrsctp.lib : : @make_libusrsctp_msvc ;\n\nrule make_libusrsctp ( targets * : sources * : properties * )\n{\n\tlocal VARIANT = [ feature.get-values <variant> : $(properties) ] ;\n\tVARIANT on $(targets) = $(VARIANT) ;\n\tBUILD_DIR on $(targets) = \"build-$(VARIANT)\" ;\n}\nactions make_libusrsctp\n{\n    (cd $(CWD)/deps/usrsctp && mkdir -p $(BUILD_DIR) && cd $(BUILD_DIR) && cmake -DCMAKE_BUILD_TYPE=$(VARIANT) -DCMAKE_C_FLAGS=\"-fPIC\" -Dsctp_werror=0 -Dsctp_build_shared_lib=0 -Dsctp_build_programs=0 -Dsctp_inet=0 -Dsctp_inet6=0 .. && make -j2 usrsctp)\n    cp $(CWD)/deps/usrsctp/$(BUILD_DIR)/usrsctplib/libusrsctp.a $(<)\n}\nrule make_libusrsctp_msvc ( targets * : sources * : properties * )\n{\n\tlocal VARIANT = [ feature.get-values <variant> : $(properties) ] ;\n\tVARIANT on $(targets) = $(VARIANT) ;\n\tBUILD_DIR on $(targets) = \"build-$(VARIANT)\" ;\n}\nactions make_libusrsctp_msvc\n{\n\tSET OLDD=%CD%\n    cd $(CWD)/deps/usrsctp\n    mkdir $(BUILD_DIR)\n    cd $(BUILD_DIR)\n    cmake -G \"Visual Studio 16 2019\" -Dsctp_werror=0 -Dsctp_build_shared_lib=0 -Dsctp_build_programs=0 -Dsctp_inet=0 -Dsctp_inet6=0 ..\n    msbuild usrsctplib.sln /property:Configuration=$(VARIANT)\n    cd %OLDD%\n    cp $(CWD)/deps/usrsctp/$(BUILD_DIR)/usrsctplib/Release/usrsctp.lib $(<)\n}\n\nmake libjuice-gnutls.a : : @make_libjuice_gnutls ;\nmake libjuice-openssl.a : : @make_libjuice_openssl ;\nmake juice-static.lib : : @make_libjuice_msvc ;\n\nrule make_libjuice_gnutls ( targets * : sources * : properties * )\n{\n\tlocal VARIANT = [ feature.get-values <variant> : $(properties) ] ;\n\tBUILD_DIR on $(targets) = \"build-gnutls-$(VARIANT)\" ;\n\tCMAKEOPTS on $(targets) = \"-DCMAKE_C_FLAGS=\\\"-fPIC\\\" -DCMAKE_BUILD_TYPE=$(VARIANT) -DUSE_NETTLE=1\" ;\n}\nactions make_libjuice_gnutls\n{\n    (cd $(CWD)/deps/libjuice && mkdir -p $(BUILD_DIR) && cd $(BUILD_DIR) && cmake $(CMAKEOPTS) .. && make -j2 juice-static)\n    cp $(CWD)/deps/libjuice/$(BUILD_DIR)/libjuice-static.a $(<)\n}\nrule make_libjuice_openssl ( targets * : sources * : properties * )\n{\n\tlocal VARIANT = [ feature.get-values <variant> : $(properties) ] ;\n\tBUILD_DIR on $(targets) = \"build-openssl-$(VARIANT)\" ;\n\tCMAKEOPTS on $(targets) = \"-DCMAKE_C_FLAGS=\\\"-fPIC\\\" -DCMAKE_BUILD_TYPE=$(VARIANT) -DUSE_NETTLE=0\" ;\n\n\tlocal OPENSSL_INCLUDE = [ feature.get-values <openssl-include> : $(properties) ] ;\n\tif <target-os>darwin in $(properties) && $(OPENSSL_INCLUDE) = \"\"\n\t{\n\t\t# on macOS, default to pick up openssl from the homebrew installation\n\t\t# brew install openssl\n\t\tOPENSSL_INCLUDE = /opt/homebrew/opt/openssl /usr/local/opt/openssl/include ;\n\t}\n\n\tif $(OPENSSL_INCLUDE) != \"\"\n\t{ CMAKEOPTS on $(targets) += \" -DOPENSSL_ROOT_DIR=$(OPENSSL_INCLUDE)/..\" ; }\n}\nactions make_libjuice_openssl\n{\n    (cd $(CWD)/deps/libjuice && mkdir -p $(BUILD_DIR) && cd $(BUILD_DIR) && cmake $(CMAKEOPTS) .. && make -j2 juice-static)\n    cp $(CWD)/deps/libjuice/$(BUILD_DIR)/libjuice-static.a $(<)\n}\nrule make_libjuice_msvc ( targets * : sources * : properties * )\n{\n\tlocal VARIANT = [ feature.get-values <variant> : $(properties) ] ;\n\tVARIANT on $(targets) = $(VARIANT) ;\n\tif <gnutls>on in $(properties)\n\t{\n\t\tBUILD_DIR on $(targets) += \"build-gnutls-$(VARIANT)\" ;\n\t\tCMAKEOPTS on $(targets) = \"-DUSE_NETTLE=1\" ;\n\t}\n\telse\n\t{\n\t\tBUILD_DIR on $(targets) += \"build-openssl-$(VARIANT)\" ;\n\t\tCMAKEOPTS on $(targets) = \"-DUSE_NETTLE=0\" ;\n\t}\n}\nactions make_libjuice_msvc\n{\n\tSET OLDD=%CD%\n    cd $(CWD)/deps/libjuice\n    mkdir $(BUILD_DIR)\n    cd $(BUILD_DIR)\n    cmake -G \"Visual Studio 16 2019\" $(CMAKEOPTS) ..\n    msbuild libjuice.sln /property:Configuration=$(VARIANT)\n    cd %OLDD%\n    cp $(CWD)/deps/libjuice/$(BUILD_DIR)/Release/juice-static.lib $(<)\n}\n\n# the search path to pick up the openssl libraries from. This is the <search>\n# property of those libraries\nrule openssl-lib-path ( properties * )\n{\n    local OPENSSL_LIB = [ feature.get-values <openssl-lib> : $(properties) ] ;\n\n    if <target-os>darwin in $(properties) && $(OPENSSL_LIB) = \"\"\n    {\n        # on macOS, default to pick up openssl from the homebrew installation\n        # brew install openssl\n        OPENSSL_LIB = /opt/homebrew/opt/openssl/lib /usr/local/opt/openssl/lib ;\n    }\n    else if <target-os>windows in $(properties) && $(OPENSSL_LIB) = \"\"\n    {\n        # on windows, assume openssl is installed to c:\\OpenSSL-Win32\n        if <address-model>64 in $(properties)\n        { OPENSSL_LIB = c:\\\\OpenSSL-Win64\\\\lib ; }\n        else\n        { OPENSSL_LIB = c:\\\\OpenSSL-Win32\\\\lib ; }\n    }\n\n    local result ;\n    result += <search>$(OPENSSL_LIB) ;\n    return $(result) ;\n}\n\n# the include path to pick up openssl headers from. This is the\n# usage-requirement for the openssl-related libraries\nrule openssl-include-path ( properties * )\n{\n    local OPENSSL_INCLUDE = [ feature.get-values <openssl-include> : $(properties) ] ;\n\n    if <target-os>darwin in $(properties) && $(OPENSSL_INCLUDE) = \"\"\n    {\n        # on macOS, default to pick up openssl from the homebrew installation\n        # brew install openssl\n        OPENSSL_INCLUDE = /opt/homebrew/opt/openssl/include /usr/local/opt/openssl/include ;\n    }\n    else if <target-os>windows in $(properties) && $(OPENSSL_INCLUDE) = \"\"\n    {\n        # on windows, assume openssl is installed to c:\\OpenSSL-Win32\n        if <address-model>64 in $(properties)\n        { OPENSSL_INCLUDE = c:\\\\OpenSSL-Win64\\\\include ; }\n        else\n        { OPENSSL_INCLUDE = c:\\\\OpenSSL-Win32\\\\include ; }\n    }\n\n    local result ;\n    result += <include>$(OPENSSL_INCLUDE) ;\n    return $(result) ;\n}\n\n# libraries for OpenSSL on Windows\nlib advapi32 : : <name>advapi32 ;\nlib user32 : : <name>user32 ;\nlib shell32 : : <name>shell32 ;\nlib gdi32 : : <name>gdi32 ;\nlib bcrypt : : <name>bcrypt ;\nlib z : : <link>shared <name>z ;\nalias ssl-deps : advapi32 user32 shell32 gdi32 ;\n\n# OpenSSL on Windows\nlib crypto : ssl-deps : <toolset>msvc <openssl-version>1.1 <name>libcrypto\n    <conditional>@openssl-lib-path : : <conditional>@openssl-include-path ;\nlib ssl : ssl-deps : <toolset>msvc <openssl-version>1.1 <name>libssl <use>crypto\n    <conditional>@openssl-lib-path : : <conditional>@openssl-include-path ;\n\n# OpenSSL on other platforms\nlib crypto : : <name>crypto <use>z <conditional>@openssl-lib-path : :\n    <conditional>@openssl-include-path ;\nlib ssl : : <name>ssl <use>crypto <conditional>@openssl-lib-path : :\n    <conditional>@openssl-include-path ;\n\n# GnuTLS\nlib gnutls : : <link>shared <name>gnutls ;\nlib nettle : : <link>shared <name>nettle ;\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.1689453125,
          "content": "# libdatachannel\n\nNAME=libdatachannel\nCXX=$(CROSS)g++\nAR=$(CROSS)ar\nRM=rm -f\nCXXFLAGS=-std=c++17\nCPPFLAGS=-O2 -pthread -fPIC -Wall\nLDFLAGS=-pthread\nLIBS=\nLOCALLIBS=libusrsctp.a\nUSRSCTP_DIR=deps/usrsctp\nSRTP_DIR=deps/libsrtp\nSRTP_CONFIGURE_FLAGS=\nJUICE_DIR=deps/libjuice\nPLOG_DIR=deps/plog\n\nINCLUDES=-Isrc -Iinclude/rtc -Iinclude -I$(PLOG_DIR)/include -I$(USRSCTP_DIR)/usrsctplib\nLDLIBS=\n\nUSE_GNUTLS ?= 0\nUSE_MBEDTLS ?= 0\nifneq ($(USE_GNUTLS), 0)\nifneq ($(USE_MBEDTLS), 0)\n$(error Both USE_MBEDTLS and USE_GNUTLS cannot be enabled at the same time)\nendif\n\t\tCPPFLAGS+=-DUSE_GNUTLS=1\n        LIBS+=gnutls\nelse ifneq ($(USE_MBEDTLS), 0)\n        CPPFLAGS+=-DUSE_MBEDTLS=1\n        LIBS+=mbedtls\nelse\n        LIBS+=openssl\n        SRTP_CONFIGURE_FLAGS+=--enable-openssl\nendif\n\nUSE_NICE ?= 0\nifneq ($(USE_NICE), 0)\n        CPPFLAGS+=-DUSE_NICE=1\n        LIBS+=glib-2.0 gobject-2.0 nice\nelse\n        CPPFLAGS+=-DUSE_NICE=0\n        INCLUDES+=-I$(JUICE_DIR)/include\n        LOCALLIBS+=libjuice.a\nifneq ($(USE_GNUTLS), 0)\n        LIBS+=nettle\nendif\nendif\n\nNO_MEDIA ?= 0\nUSE_SYSTEM_SRTP ?= 0\nifeq ($(NO_MEDIA), 0)\n        CPPFLAGS+=-DRTC_ENABLE_MEDIA=1\nifneq ($(USE_SYSTEM_SRTP), 0)\n        CPPFLAGS+=-DRTC_SYSTEM_SRTP=1\n        LIBS+=srtp\nelse\n        CPPFLAGS+=-DRTC_SYSTEM_SRTP=0\n\t\tINCLUDES+=-I$(SRTP_DIR)/include\n        LOCALLIBS+=libsrtp2.a\nendif\nelse\n        CPPFLAGS+=-DRTC_ENABLE_MEDIA=0\nendif\n\nNO_WEBSOCKET ?= 0\nifeq ($(NO_WEBSOCKET), 0)\n        CPPFLAGS+=-DRTC_ENABLE_WEBSOCKET=1\nelse\n        CPPFLAGS+=-DRTC_ENABLE_WEBSOCKET=0\nendif\n\nCPPFLAGS+=-DRTC_EXPORTS\n\nINCLUDES+=$(if $(LIBS),$(shell pkg-config --cflags $(LIBS)),)\nLDLIBS+=$(LOCALLIBS) $(if $(LIBS),$(shell pkg-config --libs $(LIBS)),)\n\nSRCS=$(shell printf \"%s \" src/*.cpp src/impl/*.cpp)\nOBJS=$(subst .cpp,.o,$(SRCS))\n\nTEST_SRCS=$(shell printf \"%s \" test/*.cpp)\nTEST_OBJS=$(subst .cpp,.o,$(TEST_SRCS))\n\nall: $(NAME).a $(NAME).so tests\n\nsrc/%.o: src/%.cpp\n\t$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -MMD -MP -o $@ -c $<\n\ntest/%.o: test/%.cpp\n\t$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -Iinclude -Isrc -MMD -MP -o $@ -c $<\n\n-include $(subst .cpp,.d,$(SRCS))\n\n$(NAME).a: $(LOCALLIBS) $(OBJS)\n\t$(AR) crf $@ $(OBJS)\n\n$(NAME).so: $(LOCALLIBS) $(OBJS)\n\t$(CXX) $(LDFLAGS) -shared -o $@ $(OBJS) $(LDLIBS)\n\ntests: $(NAME).a $(TEST_OBJS)\n\t$(CXX) $(LDFLAGS) -o $@ $(TEST_OBJS) $(NAME).a $(LDLIBS)\n\nclean:\n\t-$(RM) include/rtc/*.d *.d\n\t-$(RM) src/*.o src/*.d\n\t-$(RM) src/impl/*.o src/impl/*.d\n\t-$(RM) test/*.o test/*.d\n\ndist-clean: clean\n\t-$(RM) $(NAME).a\n\t-$(RM) $(NAME).so\n\t-$(RM) libusrsctp.a\n\t-$(RM) libjuice.a\n\t-$(RM) libsrtp2.a\n\t-$(RM) tests\n\t-$(RM) include/*~\n\t-$(RM) src/*~\n\t-$(RM) test/*~\n\t-cd $(USRSCTP_DIR) && make clean\n\t-cd $(SRTP_DIR) && make clean\n\t-cd $(JUICE_DIR) && make clean\n\nlibusrsctp.a:\n\tcd $(USRSCTP_DIR) && \\\n\t\t./bootstrap && \\\n\t\t./configure --enable-static --disable-programs --disable-debug \\\n\t\t\t--disable-inet --disable-inet6 CFLAGS=\"-fPIC\" && \\\n\t\tmake\n\tcp $(USRSCTP_DIR)/usrsctplib/.libs/libusrsctp.a .\n\nlibsrtp2.a:\n\tcd $(SRTP_DIR) && \\\n\t\t./configure $(SRTP_CONFIGURE_FLAGS) && \\\n\t\tmake\n\tcp $(SRTP_DIR)/libsrtp2.a .\n\nlibjuice.a:\nifneq ($(USE_GNUTLS), 0)\n\tcd $(JUICE_DIR) && make USE_NETTLE=1\nelse\n\tcd $(JUICE_DIR) && make USE_NETTLE=0\nendif\n\tcp $(JUICE_DIR)/libjuice.a .\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.1943359375,
          "content": "# libdatachannel - C/C++ WebRTC network library\n\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL_2.0-blue.svg)](https://www.mozilla.org/en-US/MPL/2.0/)\n[![Build with GnuTLS](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-gnutls.yml/badge.svg)](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-gnutls.yml)\n[![Build with Mbed TLS](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-mbedtls.yml/badge.svg)](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-mbedtls.yml)\n[![Build with OpenSSL](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-openssl.yml/badge.svg)](https://github.com/paullouisageneau/libdatachannel/actions/workflows/build-openssl.yml)\n\n[![Packaging status](https://repology.org/badge/tiny-repos/libdatachannel.svg)](https://repology.org/project/libdatachannel/versions)\n[![Latest packaged version](https://repology.org/badge/latest-versions/libdatachannel.svg)](https://repology.org/project/libdatachannel/versions)\n[![Gitter](https://badges.gitter.im/libdatachannel/community.svg)](https://gitter.im/libdatachannel/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Discord](https://img.shields.io/discord/903257095539925006?logo=discord)](https://discord.gg/jXAP8jp3Nn)\n\nlibdatachannel is a standalone implementation of WebRTC Data Channels, WebRTC Media Transport, and WebSockets in C++17 with C bindings for POSIX platforms (including GNU/Linux, Android, FreeBSD, Apple macOS and iOS) and Microsoft Windows. WebRTC is a W3C and IETF standard enabling real-time peer-to-peer data and media exchange between two devices.\n\nThe library aims at being both straightforward and lightweight with minimal external dependencies, to enable direct connectivity between native applications and web browsers without the pain of importing Google's bloated [reference library](https://webrtc.googlesource.com/src/). The interface consists of somewhat simplified versions of the JavaScript WebRTC and WebSocket APIs present in browsers, in order to ease the design of cross-environment applications.\n\nIt can be compiled with multiple backends:\n- The security layer can be provided through [GnuTLS](https://www.gnutls.org/), [Mbed TLS](https://www.trustedfirmware.org/projects/mbed-tls/), or [OpenSSL](https://www.openssl.org/).\n- The connectivity for WebRTC can be provided through my ad-hoc ICE library [libjuice](https://github.com/paullouisageneau/libjuice) as submodule or through [libnice](https://github.com/libnice/libnice).\n\nThe WebRTC stack is fully compatible with browsers like Firefox and Chromium, see [Compatibility](#Compatibility) below. Additionally, code using Data Channels and WebSockets from the library may be compiled as is to WebAssembly for browsers with [datachannel-wasm](https://github.com/paullouisageneau/datachannel-wasm).\n\nlibdatachannel is licensed under MPL 2.0 since version 0.18, see [LICENSE](https://github.com/paullouisageneau/libdatachannel/blob/master/LICENSE) (previous versions were licensed under LGPLv2.1 or later).\n\nlibdatachannel is available on [AUR](https://aur.archlinux.org/packages/libdatachannel/), [vcpkg](https://vcpkg.io/en/getting-started), [conan](https://conan.io/center/recipes/libdatachannel), and [FreeBSD ports](https://www.freshports.org/www/libdatachannel). Bindings are available for [Rust](https://crates.io/crates/datachannel) and [Node.js](https://www.npmjs.com/package/node-datachannel).\n\n## Dependencies\n\n- [GnuTLS](https://www.gnutls.org/), [Mbed TLS](https://www.trustedfirmware.org/projects/mbed-tls/), or [OpenSSL](https://www.openssl.org/)\n- [usrsctp](https://github.com/sctplab/usrsctp) (as submodule by default)\n- [plog](https://github.com/SergiusTheBest/plog) (as submodule by default)\n- [libjuice](https://github.com/paullouisageneau/libjuice) (as submodule by default) or [libnice](https://nice.freedesktop.org/) as an ICE backend.\n- [libsrtp](https://github.com/cisco/libsrtp) (as submodule by default) required if compiled with media support.\n- [nlohmann JSON](https://github.com/nlohmann/json) (as submodule by default) required to build examples.\n\n## Building\n\nSee [BUILDING.md](https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md) for building instructions.\n\n## Examples\n\nSee [examples](https://github.com/paullouisageneau/libdatachannel/blob/master/examples/) for complete usage examples with signaling server (under MPL 2.0).\n\nAdditionally, you might want to have a look at the [C API documentation](https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md).\n\n### Signal a PeerConnection\n\n```cpp\n#include \"rtc/rtc.hpp\"\n```\n\n```cpp\nrtc::Configuration config;\nconfig.iceServers.emplace_back(\"mystunserver.org:3478\");\n\nrtc::PeerConnection pc(config);\n\npc.onLocalDescription([](rtc::Description sdp) {\n    // Send the SDP to the remote peer\n    MY_SEND_DESCRIPTION_TO_REMOTE(std::string(sdp));\n});\n\npc.onLocalCandidate([](rtc::Candidate candidate) {\n    // Send the candidate to the remote peer\n    MY_SEND_CANDIDATE_TO_REMOTE(candidate.candidate(), candidate.mid());\n});\n\nMY_ON_RECV_DESCRIPTION_FROM_REMOTE([&pc](std::string sdp) {\n    pc.setRemoteDescription(rtc::Description(sdp));\n});\n\nMY_ON_RECV_CANDIDATE_FROM_REMOTE([&pc](std::string candidate, std::string mid) {\n    pc.addRemoteCandidate(rtc::Candidate(candidate, mid));\n});\n```\n\n### Observe the PeerConnection state\n\n```cpp\npc.onStateChange([](rtc::PeerConnection::State state) {\n    std::cout << \"State: \" << state << std::endl;\n});\n\npc.onGatheringStateChange([](rtc::PeerConnection::GatheringState state) {\n    std::cout << \"Gathering state: \" << state << std::endl;\n});\n```\n\n### Create a DataChannel\n\n```cpp\nauto dc = pc.createDataChannel(\"test\");\n\ndc->onOpen([]() {\n    std::cout << \"Open\" << std::endl;\n});\n\ndc->onMessage([](std::variant<rtc::binary, rtc::string> message) {\n    if (std::holds_alternative<rtc::string>(message)) {\n        std::cout << \"Received: \" << get<rtc::string>(message) << std::endl;\n    }\n});\n```\n\n### Receive a DataChannel\n\n```cpp\nstd::shared_ptr<rtc::DataChannel> dc;\npc.onDataChannel([&dc](std::shared_ptr<rtc::DataChannel> incoming) {\n    dc = incoming;\n    dc->send(\"Hello world!\");\n});\n```\n\n### Open a WebSocket\n\n```cpp\nrtc::WebSocket ws;\n\nws.onOpen([]() {\n    std::cout << \"WebSocket open\" << std::endl;\n});\n\nws.onMessage([](std::variant<rtc::binary, rtc::string> message) {\n    if (std::holds_alternative<rtc::string>(message)) {\n        std::cout << \"WebSocket received: \" << std::get<rtc::string>(message) << endl;\n    }\n});\n\nws.open(\"wss://my.websocket/service\");\n```\n\n## Compatibility\n\nThe library implements the following communication protocols:\n\n### WebRTC Data Channels and Media Transport\n\nWebRTC allows real-time data and media exchange between two devices through a Peer Connection (or RTCPeerConnection), a signaled peer-to-peer connection which can carry both Data Channels and media tracks. It is compatible with browsers Firefox, Chromium, and Safari, and other WebRTC libraries (see [webrtc-echoes](https://github.com/sipsorcery/webrtc-echoes)). Media transport is optional and can be disabled at compile time.\n\nProtocol stack:\n- SCTP-based Data Channels ([RFC8831](https://www.rfc-editor.org/rfc/rfc8831.html))\n- SRTP-based Media Transport ([RFC8834](https://www.rfc-editor.org/rfc/rfc8834.html))\n- DTLS/UDP ([RFC7350](https://www.rfc-editor.org/rfc/rfc7350.html) and [RFC8261](https://www.rfc-editor.org/rfc/rfc8261.html))\n- ICE ([RFC8445](https://www.rfc-editor.org/rfc/rfc8445.html)) with STUN ([RFC8489](https://www.rfc-editor.org/rfc/rfc8489.html)) and its extension TURN ([RFC8656](https://www.rfc-editor.org/rfc/rfc8656.html))\n\nFeatures:\n- Full IPv6 support (as mandated by [RFC8835](https://www.rfc-editor.org/rfc/rfc8835.html))\n- Trickle ICE ([RFC8838](https://www.rfc-editor.org/rfc/rfc8838.html))\n- JSEP-compatible session establishment with SDP ([RFC8829](https://www.rfc-editor.org/rfc/rfc8829.html))\n- SCTP over DTLS with SDP offer/answer ([RFC8841](https://www.rfc-editor.org/rfc/rfc8841.html))\n- DTLS with ECDSA or RSA keys ([RFC8827](https://www.rfc-editor.org/rfc/rfc8827.html))\n- SRTP and SRTCP key derivation from DTLS ([RFC5764](https://www.rfc-editor.org/rfc/rfc5764.html))\n- Differentiated Services QoS ([RFC8837](https://www.rfc-editor.org/rfc/rfc8837.html)) where possible\n- Multicast DNS candidates ([draft-ietf-rtcweb-mdns-ice-candidates-04](https://datatracker.ietf.org/doc/html/draft-ietf-rtcweb-mdns-ice-candidates-04))\n- Multiplexing connections on a single UDP port with libjuice as ICE backend\n\nNote only SDP BUNDLE mode is supported for media multiplexing ([RFC8843](https://www.rfc-editor.org/rfc/rfc8843.html)). The behavior is equivalent to the JSEP bundle-only policy: the library always negotiates one unique network component, where SRTP media streams are multiplexed with SRTCP control packets ([RFC5761](https://www.rfc-editor.org/rfc/rfc5761.html)) and SCTP/DTLS data traffic ([RFC8261](https://www.rfc-editor.org/rfc/rfc8261.html)).\n\n### WebSocket\n\nWebSocket is the protocol of choice for WebRTC signaling. The support is optional and can be disabled at compile time.\n\nProtocol stack:\n- WebSocket protocol ([RFC6455](https://www.rfc-editor.org/rfc/rfc6455.html)), client and server side\n- HTTP over TLS ([RFC2818](https://www.rfc-editor.org/rfc/rfc2818.html))\n\nFeatures:\n- IPv6 and IPv4/IPv6 dual-stack support\n- Keepalive with ping/pong\n\n## External resources\n- Rust bindings for libdatachannel: [datachannel-rs](https://github.com/lerouxrgd/datachannel-rs)\n- Node.js bindings for libdatachannel: [node-datachannel](https://github.com/murat-dogan/node-datachannel)\n- Unity bindings for Windows 10 and Hololens: [datachannel-unity](https://github.com/hanseuljun/datachannel-unity)\n- WebAssembly wrapper compatible with libdatachannel: [datachannel-wasm](https://github.com/paullouisageneau/datachannel-wasm)\n- Lightweight STUN/TURN server: [Violet](https://github.com/paullouisageneau/violet)\n- Native platform (Android/iOS/macOS) wrapper for libdatachannel: [datachannel-native](https://github.com/swarm-cloud/datachannel-native)\n\n## Thanks\n\nThanks to [Streamr](https://streamr.network/), [Vagon](https://vagon.io/), [Shiguredo](https://github.com/shiguredo), [Deon Botha](https://github.com/dbotha), and [Michael Cho](https://github.com/micoolcho) for sponsoring this work!\n\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "pages",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}