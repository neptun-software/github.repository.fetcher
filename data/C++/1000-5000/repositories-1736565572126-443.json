{
  "metadata": {
    "timestamp": 1736565572126,
    "page": 443,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "biometrics/openbr",
      "stars": 2853,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.66796875,
          "content": "### Repository Specific ###\n3rdparty/LatentSDK*\n3rdparty/pittpatt*\n3rdparty/cvmatio\n3rdparty/dlib*\n3rdparty/libav*\n3rdparty/ffmpeg*\ndata/*/img\ndata/*/vid\ndata/PCSO/*\ndata/lfpw\ndata/LFW\nbuild*\nscripts/results\nshare/openbr/models\n\n### Generic ###\n*.log\n*.user\n\n### Latex ###\n*.aux\n*.nav\n*.out\n*.snm\n*.toc\n\n### QtCreator ###\n*CMakeLists.txt.user*\n*.autosave\n\n### R ###\n*.RData\n*.Rhistory\n\n### Python ###\n*.pyc\n\n### Subversion ###\n*.svn*\n\n### OS X ###\n*.DS_Store\n\n### vim ###\n*.swp\n\n### autogenerated sigsets ###\ndata/INRIAPerson/sigset\ndata/KTH/sigset\ndata/CaltechPedestrians/annotations\ndata/CaltechPedestrians/*.xml\n\n### Sublime ###\n*.check_cache\n*.sublime-project\n*.sublime-workspace\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.048828125,
          "content": "project(openbr)\ncmake_minimum_required(VERSION 2.8.9)\n\n# Global settings\nset(BR_SHARE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/share/openbr\")\nset(BR_SCRIPTS_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/scripts\")\nset(CMAKE_AUTOMOC ON)\nset(CPACK_PACKAGE_NAME \"OpenBR\")\nset(CPACK_PACKAGE_VENDOR \"OpenBiometrics\")\nset(CPACK_PACKAGE_DESCRIPTION \"Open Source Biometric Recognition\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})\nif(NOT DEFINED CPACK_PACKAGE_VERSION_MAJOR)\n  set(CPACK_PACKAGE_VERSION_MAJOR 1)\nendif()\nif(NOT DEFINED CPACK_PACKAGE_VERSION_MINOR)\n  set(CPACK_PACKAGE_VERSION_MINOR 1)\nendif()\nif(NOT DEFINED CPACK_PACKAGE_VERSION_PATCH)\n  set(CPACK_PACKAGE_VERSION_PATCH 0)\nendif()\nset(CPACK_PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nset(CMAKE_MODULE_PATH \"${BR_SHARE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\nset(PACKAGE_YEAR 2013)\n\nif(${CMAKE_VERSION} VERSION_EQUAL 2.8.11)\n  cmake_policy(SET CMP0020 OLD)\nendif()\nif(${CMAKE_VERSION} VERSION_GREATER 2.8.11)\n  cmake_policy(SET CMP0020 OLD)\nendif()\n\nif(${CMAKE_VERSION} VERSION_EQUAL 2.8.12)\n  cmake_policy(SET CMP0022 OLD)\nendif()\nif(${CMAKE_VERSION} VERSION_GREATER 2.8.12)\n  cmake_policy(SET CMP0022 OLD)\nendif()\n\nif(${CMAKE_VERSION} VERSION_GREATER 3)\n  cmake_policy(SET CMP0043 NEW)\nendif()\n\nif(${CMAKE_SIZEOF_VOID_P} MATCHES 8)\n  set(BITNESS 64)\nelse()\n  set(BITNESS 32)\nendif()\n\ninclude(ExternalProject)\n\n# Define resources\nif(WIN32)\n  set(CPACK_PACKAGE_ICON \"${BR_SHARE_DIR}\\\\\\\\openbr_small.png\")\n  set(NATIVE_ICON \"${BR_SHARE_DIR}/openbr.ico\")\nelseif(APPLE)\n  set(CPACK_PACKAGE_ICON \"${BR_SHARE_DIR}/openbr_small.png\")\n  set(NATIVE_ICON \"${BR_SHARE_DIR}/openbr.icns\")\nelse()\n  set(CPACK_PACKAGE_ICON \"${BR_SHARE_DIR}/openbr_small.png\")\n  set(NATIVE_ICON \"${BR_SHARE_DIR}/openbr.png\")\nendif()\n\nif(WIN32)\n  configure_file(${BR_SHARE_DIR}/resources.rc.in resources.rc)\n  set(BR_RESOURCES ${CMAKE_CURRENT_BINARY_DIR}/resources.rc)\nendif()\n\n# Build options\noption(BR_EMBEDDED \"Limit software dependencies\")\nif(BR_EMBEDDED)\n  add_definitions(-DBR_EMBEDDED)\nendif()\n\n# Find Qt\nset(QT_DEPENDENCIES ${QT_DEPENDENCIES} Concurrent Core)\nif(NOT BR_EMBEDDED)\n  set(QT_DEPENDENCIES ${QT_DEPENDENCIES} Gui Network Sql Widgets Xml)\nendif()\n\nfind_package(Qt5 COMPONENTS ${QT_DEPENDENCIES} REQUIRED)\n\nset(BR_THIRDPARTY_LIBS ${BR_THIRDPARTY_LIBS} ${Qt5Core_QTMAIN_LIBRARIES})\nif(IOS)\n  set(QT_PCRE2_LIB \"${_qt5Core_install_prefix}/lib/libqtpcre2.a\")\n  if(EXISTS ${QT_PCRE2_LIB})\n    list(APPEND BR_THIRDPARTY_LIBS \"${QT_PCRE2_LIB}\")\n  endif()\nendif()\n\n# Find OpenCV\nfind_package(OpenCV 4.0.0 REQUIRED)\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nif(IOS)\n  set(OPENCV_DEPENDENCIES opencv_core opencv_dnn opencv_features2d opencv_highgui opencv_imgcodecs opencv_imgproc opencv_ml)\n  set(BR_THIRDPARTY_LIBS ${BR_THIRDPARTY_LIBS} ${OPENCV_DEPENDENCIES})\n  list(APPEND BR_THIRDPARTY_LIBS \"-framework Foundation -framework UIKit -framework Security -framework MobileCoreServices -lc++\")\nelse()\n  set(OPENCV_DEPENDENCIES opencv_core opencv_dnn opencv_features2d opencv_highgui opencv_imgcodecs opencv_imgproc opencv_ml opencv_videoio)\n  set(BR_THIRDPARTY_LIBS ${BR_THIRDPARTY_LIBS} ${OPENCV_DEPENDENCIES})\n  if(APPLE)\n    list(APPEND BR_THIRDPARTY_LIBS \"-framework Accelerate\")\n  endif()\nendif()\n\n# Build OpenCV 2 compatability library\nset(BR_THIRDPARTY_SRC ${BR_THIRDPARTY_SRC}\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence_types.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence_base64.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence_xml.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence_yml.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/cv_persistence_json.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/old_ml_boost.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/old_ml_tree.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat/old_ml_inner_functions.cpp)\ninclude_directories(${CMAKE_CURRENT_LIST_DIR}/3rdparty/opencv2-compat)\n\n# Find Alphanum\nfind_package(Alphanum REQUIRED)\n\n# Find cvmatio (if using it)\nset(BR_WITH_CVMATIO OFF CACHE BOOL \"Build with cvmatio library to read Matlab data files (required to use Caltech Pedestrians dataset)\")\nif(${BR_WITH_CVMATIO})\n  find_package(cvmatio REQUIRED)\n  add_definitions(-DCVMATIO)\n  add_subdirectory(${CVMATIO_DIR})\n  include_directories(${CVMATIO_DIR}/include)\n  set(BR_THIRDPARTY_SRC ${BR_THIRDPARTY_SRC} ${CVMATIO_DIR}/src/MatlabIO.cpp)\n  link_directories(${CVMATIO_LIB_DIR})\n  set(BR_THIRDPARTY_LIBS ${BR_THIRDPARTY_LIBS} cvmatio)\nendif()\n\n# Compiler flags\nif(UNIX)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wno-strict-overflow -Wno-sign-compare -Wno-unused-local-typedefs -Wno-int-in-bool-context -Wno-comment -Wno-unknown-pragmas -fvisibility=hidden -fno-omit-frame-pointer\")\n  set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib ${_qt5Core_install_prefix}/lib)\n  if(NOT APPLE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-terminate\")\n    if(${CMAKE_CXX_COMPILER} STREQUAL \"/opt/intel/bin/icpc\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -static-intel -wd2196\")\n    endif()\n  endif()\nelse()\n  if(MINGW)\n    set(CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-auto-import\") # Fixes a linker warning\n    set(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--enable-auto-import\")\n  elseif(MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W3 /DNOMINMAX /D_CRT_SECURE_NO_WARNINGS /wd4018 /wd4244 /wd4267 /wd4305 /wd4308 /wd4307 /wd4554 /wd4996 /w34100 /nologo /MP\")\n  endif()\nendif()\n\n# Enable Testing\ninclude(CppcheckTargets)\ninclude(CTest)\nenable_testing()\nif(BUILD_TESTING)\n  set(BUILDNAME \"${BUILDNAME}\" CACHE STRING \"Name of build on the dashboard\")\n  mark_as_advanced(BUILDNAME)\nendif()\n\n# Look for extensions to OpenBR\nset(BR_THIRDPARTY_PLUGINS_DIR CACHE PATH \"\")\nset(BR_THIRDPARTY_APPS_DIR CACHE PATH \"\")\nmark_as_advanced(BR_THIRDPARTY_PLUGINS_DIR)\nmark_as_advanced(BR_THIRDPARTY_APPS_DIR)\n\nif(BR_THIRDPARTY_DIR)\n  if(EXISTS \"${BR_THIRDPARTY_DIR}/src/src.cmake\")\n    include(\"${BR_THIRDPARTY_DIR}/src/src.cmake\")\n  endif()\n  if(EXISTS \"${BR_THIRDPARTY_DIR}/plugins\")\n    set(BR_THIRDPARTY_PLUGINS_DIR ${BR_THIRDPARTY_PLUGINS_DIR} \"${BR_THIRDPARTY_DIR}/plugins\")\n  endif()\n  if(EXISTS \"${BR_THIRDPARTY_DIR}/app\")\n    set(BR_THIRDPARTY_APPS_DIR    ${BR_THIRDPARTY_APPS_DIR}    \"${BR_THIRDPARTY_DIR}/app\")\n  endif()\nelse()\n  set(BR_THIRDPARTY_DIR \"\" CACHE PATH \"Path to proprietary software\")\n  mark_as_advanced(BR_THIRDPARTY_DIR)\nendif()\n\n# Download the models\nExternalProject_Add(models\n                    URL http://github.com/biometrics/openbr/releases/download/v1.1.0/models.tar.gz\n                    URL_MD5 26cf71abd48cec8d7b2abf3e8f4ebfc4\n                    SOURCE_DIR \"${PROJECT_SOURCE_DIR}/share/openbr/models\"\n                    CONFIGURE_COMMAND \"\"\n                    BUILD_COMMAND \"\"\n                    INSTALL_COMMAND \"\")\n\n# Build the SDK\ninclude_directories(BEFORE .) # Find the local headers first\nadd_subdirectory(openbr)\n\n# Build applications\nadd_subdirectory(app)\nforeach(DIR ${BR_THIRDPARTY_APPS_DIR})\n  get_filename_component(FNAME ${DIR} NAME)\n  # DIR could be out-of-tree so we must specify the build directory\n  add_subdirectory(${DIR} 3rdparty_apps/${FNAME})\nendforeach()\n\n# Install\noption(BR_INSTALL_SHARE \"Install share/openbr files.\" ON)\nif(${BR_INSTALL_SHARE})\n  install(FILES LICENSE.txt README.md DESTINATION share/openbr)\n  install(DIRECTORY share DESTINATION .)\n  install(DIRECTORY ${BR_THIRDPARTY_SHARE} DESTINATION share)\nendif()\n\n# install brpy\noption(BR_INSTALL_BRPY \"Install brpy, the Python wrapper to the C API (requires Python)\")\nif(${BR_INSTALL_BRPY})\n  find_package(PythonInterp REQUIRED)\n  execute_process(COMMAND ${PYTHON_EXECUTABLE} -c \"import site, sys; sys.stdout.write(site.getsitepackages()[-1])\" OUTPUT_VARIABLE PYTHON_SITE_DIR)\n  install(DIRECTORY ${BR_SCRIPTS_DIR}/brpy DESTINATION ${PYTHON_SITE_DIR})\nendif()\n\n# Package\nif(NOT BR_PACKAGE_THIRDPARTY)\n  set(CPACK_PACKAGE_EXECUTABLES \"OpenBR\" \"OpenBR\")\n  set(CPACK_CREATE_DESKTOP_LINKS \"OpenBR\")\n  if(CMAKE_HOST_WIN32)\n    set(CPACK_NSIS_MODIFY_PATH ON)\n    set(CPACK_NSIS_MUI_ICON ${NATIVE_ICON})\n    set(CPACK_NSIS_MUI_UNIICON ${NATIVE_ICON})\n    set(CPACK_NSIS_MENU_LINKS \"doc/html/index.html\" \"Documentation\")\n    if(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL \"8\")\n      set(CPACK_NSIS_INSTALL_ROOT \"$PROGRAMFILES64\")\n    endif()\n    set(CPACK_NSIS_INSTALLED_ICON_NAME \"bin\\\\\\\\br-gui.exe\")\n  elseif(CMAKE_HOST_APPLE)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/README.md\" \"README.txt\" COPYONLY)\n    set(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_BINARY_DIR}/README.txt\")\n    set(CPACK_BUNDLE_NAME ${CPACK_PACKAGE_NAME})\n    set(CPACK_BUNDLE_ICON ${NATIVE_ICON})\n    set(CPACK_BUNDLE_PLIST ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)\n    set(CPACK_BUNDLE_STARTUP_COMMAND ${BR_SHARE_DIR}/bundle.sh)\n    configure_file(${BR_SHARE_DIR}/Info.plist.in Info.plist)\n  else()\n    set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"josh.klontz@gmail.com\")\n  endif()\n\n  include(CPack)\nendif()\n"
        },
        {
          "name": "CODE_OWNERS.txt",
          "type": "blob",
          "size": 0.20703125,
          "content": "Scott Klum <scott.klum@gmail.com>\n\topenbr/gui\n\nCharles Otto <ottochar@gmail.com>\n\topenbr/core/core\n\nBen Klein <benhunter1990@gmail.com>\n\topenbr/core/eval\n\topenbr/core/plot\n\nJosh Klontz <josh.klontz@gmail.com>\n\t*\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.548828125,
          "content": "Copyright 2012 The MITRE Corporation\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.48828125,
          "content": "**www.openbiometrics.org**\n\n1) Identify the latest stable [release tag](https://github.com/biometrics/openbr/releases) such as \"v1.1.0\"\n\n2) Download all OpenBR source code and switch to that release tag:\n\n    $ git clone https://github.com/biometrics/openbr.git\n    $ cd openbr\n    $ git checkout <tag>   (eg: git checkout v1.1.0)\n    $ git submodule init\n    $ git submodule update\n    \n3) Build OpenBR by following the **[Build Instructions](http://openbiometrics.org/docs/install/)** for your OS.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.21875,
          "content": "# Removed Core functionality\n\n- boost.cpp This will likely be the most challenging port. OpenCV 4 carries the old ml headers in the traincascade application (presumably so they don't have to do this port)\n\n# Removed plugins\n\n- classification/boostedforest.cpp: Relies on core boost functionality\n- classification/forest.cpp: Big changes to the RTree interface. It's unclear that ForestInduction is possible in the new interface at all. If it is, it would likely require walking the tree node lists manually\n- imgproc/custom_sift.cpp: Uses functions `fastAtan2`, `magnitude`, and `exp` which are OpenCV functions but with a different set of args (float arrays vs. floats). I can't find a record of float* functions in OpenCV 2 either\n                           so it's unclear where those are defined.\n- imgproc/keypointdescriptor.cpp: OpenCV 4 totally changes the interface from a `create(string)` model to mirror the ml `Ptr<DescriptionExtractor> p = Subclass::create()` paradigm. While this would be relatively easy to\n                                  implement as a enum/switch statement, most of the subclasses have custom initialization parameters. Unclear what the best way to handle those is\n- metadata/keypointdetector.cpp: Same as above \n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "openbr",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}