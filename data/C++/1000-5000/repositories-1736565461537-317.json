{
  "metadata": {
    "timestamp": 1736565461537,
    "page": 317,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bytedance/lightseq",
      "stars": 3242,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0771484375,
          "content": "---\nBasedOnStyle: Google\n---\nLanguage: Cpp\nColumnLimit: 80\nSortIncludes: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0556640625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# Project specific\ntest_case/\nbuild/\n*.pb\n.vscode\n*.bin\n*.idx\n*.hdf5\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1884765625,
          "content": "[submodule \"3rdparty/pybind11\"]\n\tpath = 3rdparty/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"3rdparty/cub\"]\n\tpath = 3rdparty/cub\n\turl = https://github.com/NVIDIA/cub.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5791015625,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.0.1\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n\n  - repo: https://gitlab.com/daverona/pre-commit-cpp\n    rev: 0.8.0\n    hooks:\n      - id: clang-format # formatter of C/C++ code based on a style guide: LLVM, Google, Chromium, Mozilla, and WebKit available\n        args: [-style=file]\n\n  - repo: https://github.com/psf/black\n    rev: 22.3.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/cheshirekow/cmake-format-precommit\n    rev: v0.6.10\n    hooks:\n      - id: cmake-format\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.5009765625,
          "content": "cmake_minimum_required(VERSION 3.18 FATAL_ERROR)\nproject(LightSeq LANGUAGES C CXX CUDA)\n\noption(USE_NEW_ARCH \"inference with new arch\" OFF)\noption(FP16_MODE \"inference with fp16\" OFF)\noption(DEBUG_MODE \"debug computation result\" OFF)\noption(MEM_DEBUG \"debug memory message\" OFF)\noption(DYNAMIC_API \"build dynamic lightseq api library\" OFF)\noption(USE_TRITONBACKEND \"build tritonbackend for lightseq\" OFF)\n\nif(USE_NEW_ARCH)\n  add_definitions(-DNEW_ARCH)\n\n  set(CMAKE_CUDA_ARCHITECTURES 70 75 80 86 87)\n\n  # setting compiler flags\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wall -O0\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0\")\n  set(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -g -G -Xcompiler -Wall\")\n\n  if(DYNAMIC_API)\n    # dynamic link to cuda libraries and protobuf\n    set(CMAKE_CUDA_RUNTIME_LIBRARY \"Shared\")\n    set(HDF5_USE_STATIC_LIBRARIES OFF)\n  else()\n    # static link to cuda libraries and protobuf\n    set(CMAKE_CUDA_RUNTIME_LIBRARY \"Static\")\n    set(HDF5_USE_STATIC_LIBRARIES ON)\n  endif()\n\n  set(Protobuf_USE_STATIC_LIBS ON)\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n  set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)\n\n  set(CMAKE_CXX_STANDARD 14)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n  set(DEVICE_ARCHITECTURES_LIST cuda x86 arm)\n  list(FIND DEVICE_ARCHITECTURES_LIST ${DEVICE_ARCH} DEVICE_INDEX)\n\n  if(DEVICE_INDEX EQUAL 0)\n    add_definitions(-DLIGHTSEQ_cuda)\n    set(DEVICE_ARCHITECTURE cuda)\n    find_package(CUDAToolkit)\n    find_package(CUDA 11 REQUIRED)\n  elseif(DEVICE_INDEX EQUAL 1)\n    add_definitions(-DLIGHTSEQ_x86)\n    set(DEVICE_ARCHITECTURE x86)\n  elseif(DEVICE_INDEX EQUAL 2)\n    add_definitions(-DLIGHTSEQ_arm)\n    set(DEVICE_ARCHITECTURE arm)\n  else()\n    message(\n      WARNING \"compiled with -DDEVICE_ARCHITECTURE=${DEVICE_ARCHITECTURE}\")\n    message(\n      FATAL_ERROR\n        \"-DDEVICE_ARCHITECTURE=\\$\\{device\\} must in value of list [${DEVICE_ARCHITECTURES_LIST}]\"\n    )\n    return()\n  endif()\n  message(STATUS \"compile with device ${DEVICE_ARCHITECTURE} ${index}\")\n\n  if(DEVICE_INDEX GREATER 0 AND FP16_MODE)\n    message(FATAL_ERROR \"CPU device does not have fp16 version\")\n    return()\n  endif()\n\n  if(DEBUG_MODE)\n    add_definitions(-DDEBUG_MODE)\n    set(MEM_DEBUG ON)\n    message(STATUS \"Build using debug mode\")\n  endif()\n\n  if(MEM_DEBUG)\n    add_definitions(-DMEM_DEBUG)\n    message(STATUS \"Build using memory debug\")\n  endif()\n\n  if(FP16_MODE)\n    add_definitions(-DFP16_MODE)\n    message(STATUS \"Build using fp16 precision\")\n  else()\n    message(STATUS \"Build using fp32 precision\")\n  endif()\n\n  set(CUDA_PATH ${CUDA_TOOLKIT_ROOT_DIR})\n  list(APPEND CMAKE_MODULE_PATH ${CUDA_PATH}/lib64)\n\n  set(COMMON_HEADER_DIRS\n      ${PROJECT_SOURCE_DIR}\n      ${CUDA_PATH}/include\n      lightseq/csrc/kernels/${DEVICE_ARCHITECTURE}/includes\n      lightseq/csrc/layers_new/includes\n      lightseq/csrc/lsflow/includes\n      lightseq/csrc/models/includes\n      lightseq/csrc/ops_new/includes\n      lightseq/csrc/proto/includes)\n\n  set(COMMON_LIB_DIRS ${CUDA_PATH}/lib64)\n\n  include_directories(${COMMON_HEADER_DIRS})\n  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/3rdparty/cub)\n\n  link_directories(${COMMON_LIB_DIRS})\n\n  add_subdirectory(3rdparty/pybind11)\n  add_subdirectory(lightseq/csrc/kernels/${DEVICE_ARCHITECTURE})\n  add_subdirectory(lightseq/csrc/lsflow)\n  add_subdirectory(lightseq/csrc/ops_new)\n  add_subdirectory(lightseq/csrc/layers_new)\n  add_subdirectory(lightseq/csrc/proto)\n  add_subdirectory(lightseq/csrc/models)\n  add_subdirectory(lightseq/csrc/example)\n  add_subdirectory(lightseq/csrc/pybind)\n  if(USE_TRITONBACKEND)\n    add_subdirectory(lightseq/csrc/triton_backend)\n  endif()\n\nelse()\n\n  find_package(CUDA 11 REQUIRED)\n\n  set(CUDA_PATH ${CUDA_TOOLKIT_ROOT_DIR})\n  list(APPEND CMAKE_MODULE_PATH ${CUDA_PATH}/lib64)\n\n  # setting compiler flags\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wall -O0\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0\")\n  set(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -g -G -Xcompiler -Wall\")\n\n  if(DYNAMIC_API)\n    # dynamic link to cuda libraries and protobuf\n    set(CMAKE_CUDA_RUNTIME_LIBRARY \"Shared\")\n    set(HDF5_USE_STATIC_LIBRARIES OFF)\n  else()\n    # static link to cuda libraries and protobuf\n    set(CMAKE_CUDA_RUNTIME_LIBRARY \"Static\")\n    set(HDF5_USE_STATIC_LIBRARIES ON)\n  endif()\n\n  set(Protobuf_USE_STATIC_LIBS ON)\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n  set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)\n\n  set(CMAKE_CXX_STANDARD 14)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n  set(CMAKE_CUDA_ARCHITECTURES 60 61 70 75 80 86)\n\n  set(COMMON_HEADER_DIRS ${PROJECT_SOURCE_DIR} ${CUDA_PATH}/include)\n  set(COMMON_LIB_DIRS ${CUDA_PATH}/lib64)\n\n  include_directories(${COMMON_HEADER_DIRS})\n  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/3rdparty/cub)\n\n  link_directories(${COMMON_LIB_DIRS})\n\n  add_compile_options(-Wno-unknown-pragmas)\n\n  if(FP16_MODE)\n    add_definitions(-DFP16_MODE)\n    message(STATUS \"Build using fp16 precision\")\n  else()\n    message(STATUS \"Build using fp32 precision\")\n  endif()\n\n  if(DEBUG_MODE)\n    add_definitions(-DDEBUG_RESULT)\n    message(STATUS \"Debug computation result\")\n  endif()\n\n  add_subdirectory(3rdparty/pybind11)\n  add_subdirectory(lightseq/inference/kernels)\n  add_subdirectory(lightseq/inference/tools)\n  add_subdirectory(lightseq/inference/proto)\n  add_subdirectory(lightseq/inference/model)\n  add_subdirectory(lightseq/inference/pywrapper)\n  add_subdirectory(lightseq/inference/server)\n  if(USE_TRITONBACKEND)\n    add_subdirectory(lightseq/inference/triton_backend)\n  endif()\n\n  # add_subdirectory(examples/inference/cpp)\n\nendif()\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.05859375,
          "content": "*       @neopro12 @godweiyang @Taka152 @hexisyztem @zjersey\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.4541015625,
          "content": "# Contribution guidelines\n\nFirst of all, thanks for taking the time to contribute!\n\nPlease refer to the following guidelines to contribute new functionality or bug fixes:\n\n1. Use [autopep8](https://github.com/hhatto/autopep8) to format the Python code.\n2. Use [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to format C++ code. Changes to LightSeq C++ code should conform to [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1484375,
          "content": "LightSeq\nCopyright 2019 Bytedance Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1357421875,
          "content": "global-include *.txt\nglobal-include *.cu *.cpp *.cc *.cuh *.h *.ldscript *.proto *.cmake\nprune dist\nprune build\nprune tests\nprune examples\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 19.41015625,
          "content": "=======================================================================\nSoftware under 3rdparty\n=======================================================================\nSoftware libraries under 3rdparty are provided as github submodule\nlinks, and their content is not part of the lightseq codebase. Their\nlicences can be found under the respective software repositories.\n\n=======================================================================\ntriton-inference-server\n=======================================================================\nCopyright (c) 2021, NVIDIA CORPORATION. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of NVIDIA CORPORATION nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n=======================================================================\npytorch-quantization in TensorRT\n=======================================================================\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2021 NVIDIA Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n   PORTIONS LICENSED AS FOLLOWS\n\n   > tools/pytorch-quantization/examples/torchvision/models/classification/resnet.py\n\n     BSD 3-Clause License\n\n     Copyright (c) Soumith Chintala 2016,\n     All rights reserved.\n\n     Redistribution and use in source and binary forms, with or without\n     modification, are permitted provided that the following conditions are met:\n\n     * Redistributions of source code must retain the above copyright notice, this\n       list of conditions and the following disclaimer.\n\n     * Redistributions in binary form must reproduce the above copyright notice,\n       this list of conditions and the following disclaimer in the documentation\n       and/or other materials provided with the distribution.\n\n     * Neither the name of the copyright holder nor the names of its\n       contributors may be used to endorse or promote products derived from\n       this software without specific prior written permission.\n\n     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n     CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n     OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n   > samples/common/windows/getopt.c\n\n     Copyright (c) 2002 Todd C. Miller <Todd.Miller@courtesan.com>\n\n     Permission to use, copy, modify, and distribute this software for any\n     purpose with or without fee is hereby granted, provided that the above\n     copyright notice and this permission notice appear in all copies.\n\n     THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n     WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n     MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n     ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n     Sponsored in part by the Defense Advanced Research Projects\n     Agency (DARPA) and Air Force Research Laboratory, Air Force\n     Materiel Command, USAF, under agreement number F39502-99-1-0512.\n\n\n     Copyright (c) 2000 The NetBSD Foundation, Inc.\n     All rights reserved.\n\n     This code is derived from software contributed to The NetBSD Foundation\n     by Dieter Baron and Thomas Klausner.\n\n     Redistribution and use in source and binary forms, with or without\n     modification, are permitted provided that the following conditions\n     are met:\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS\n     ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n     PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS\n     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n     POSSIBILITY OF SUCH DAMAGE.\n     - Copyright (c) 2002 Todd C. Miller <Todd.Miller@courtesan.com>\n     - Copyright (c) 2000 The NetBSD Foundation, Inc.\n\n\n   > samples/common/half.h\n\n     Copyright (c) 2012-2017 Christian Rau <rauy@users.sourceforge.net>\n\n     Permission is hereby granted, free of charge, to any person obtaining a\n     copy of this software and associated documentation files (the \"Software\"),\n     to deal in the Software without restriction, including without limitation\n     the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     and/or sell copies of the Software, and to permit persons to whom the\n     Software is furnished to do so, subject to the following conditions:\n\n     The above copyright notice and this permission notice shall be included\n     in all copies or substantial portions of the Software.\n\n     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     DEALINGS IN THE SOFTWARE.\n\n\n=======================================================================\nfairseq\n=======================================================================\nMIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.251953125,
          "content": "# LightSeq: A High Performance Library for Sequence Processing and Generation\n\n![logo](./docs/images/logo.png)\n\n---\n\n## Table Of Contents\n- [Release Notes](#release-notes)\n- [Introduction](#introduction)\n    - [Support Matrix](#support-matrix)\n- [Performance](#performance)\n    - [Speedup of Transformer Training](#speedup-of-transformer-training)\n    - [Speedup of BERT Training](#speedup-of-bert-training)\n    - [Speedup of Transformer Inference](#speedup-of-transformer-inference)\n    - [Speedup of BERT Inference](#speedup-of-bert-inference)\n- [Installation](#installation)\n    - [Install from PyPI](#install-from-pypi)\n    - [Build from Source](#build-from-source)\n- [Getting Started](#getting-started)\n    - [LightSeq Training from Scratch](#lightseq-training-from-scratch)\n    - [LightSeq Training from Fairseq](#lightseq-training-from-fairseq)\n    - [LightSeq Training from Hugging Face BERT](#lightseq-training-from-hugging-face-bert)\n    - [LightSeq Inference from Fairseq](#lightseq-inference-from-fairseq)\n    - [LightSeq Inference from Hugging Face BERT](#lightseq-inference-from-hugging-face-bert)\n    - [LightSeq Deployment Using Inference Server](#lightseq-deployment-using-inference-server)\n- [Cite Us](#cite-us)\n- [We are Hiring!](#we-are-hiring)\n\n## Release Notes\n**[2022.10.25]** Release v3.0.0 version, which supports int8 mixed-precision training and inference. [[中文介绍](https://bytedance.feishu.cn/docx/doxcnZloQZmLgAVU7z1QFlcRPuO)]\n\n**[2021.06.18]** Release v2.0.0 version, which supports fp16 mixed-precision training. [[中文介绍](https://bytedance.feishu.cn/docs/doccn9w7UdOYcEOD99FjFVpdFzf)]\n\n**[2019.12.06]** Release v1.0.0 version, which supports fp16 mixed-precision inference. [[中文介绍](https://bytedance.feishu.cn/docs/doccnUJ5X9WWEdQxXwzbPJ581J0)]\n\n## Introduction\nLightSeq is a high performance training and inference library for sequence processing and generation implemented in CUDA.\nIt enables highly efficient computation of modern NLP and CV models such as BERT, GPT, Transformer, etc.\nIt is therefore best useful for machine translation, text generation, image classification, and other sequence related tasks.\n\nThe library is built on top of CUDA official\nlibrary([cuBLAS](https://docs.nvidia.com/cuda/cublas/index.html),\n[Thrust](https://docs.nvidia.com/cuda/thrust/index.html), [CUB](http://nvlabs.github.io/cub/)) and\ncustom kernel functions which are specially fused and optimized for Transformer model family. In\naddition to model components, the inference library also provide easy-to-deploy model management and serving backend based on\n[TensorRT Inference\nServer](https://docs.nvidia.com/deeplearning/sdk/inference-server-archived/tensorrt_inference_server_120/tensorrt-inference-server-guide/docs/quickstart.html).\nWith LightSeq, one can easily develop modified Transformer architecture with little additional code.\n\nLightSeq training and inference is very fast. Below is the overall performance:\n* LightSeq fp16 training achieves a speedup of up to **3x**, compared to PyTorch fp16 training.\n* LightSeq int8 training achieves a speedup of up to **5x**, compared to PyTorch QAT (i.e., quantization aware training).\n* LightSeq fp16 and int8 inference achieve a speedup of up to **12x** and **15x**, compared to PyTorch fp16 inference, respectively.\n\n### Support Matrix\nLightSeq supports multiple features, which is shown in the table below.\n|      Features      |                             Support List                             |\n| ------------------ | -------------------------------------------------------------------- |\n| Model              | Transformer, BERT, BART, GPT2, ViT, T5, MT5, XGLM, VAE, Multilingual, MoE |\n| Layer              | embedding, encoder, decoder, criterion, optimizer                    |\n| Precision          | fp32, fp16, int8                                                     |\n| Mode               | training, inference                                                  |\n| Compatibility      | Fairseq, Hugging Face, DeepSpeed                                     |\n| Decoding Algorithm | beam search, diverse beam search, sampling, CRF                      |\n| Others             | gradient communication quantization, auto-tune GEMM algorithm        |\n\nThe table below shows the running modes and precision currently supported by different models.\n|    Models    | fp16 Training | fp16 Inference | int8 Training | int8 Inference |\n| ------------ | ------------- | -------------- | ------------- | -------------- |\n| Transformer  | Yes           | Yes            | Yes           | Yes            |\n| BERT         | Yes           | Yes            | Yes           | Yes            |\n| GPT2         | Yes           | Yes            | Yes           | Yes            |\n| BART         | Yes           | Yes            | -             | -              |\n| T5           | -             | Yes            | -             | -              |\n| MT5          | -             | Yes            | -             | -              |\n| XGLM         | -             | Yes            | -             | -              |\n| ViT          | Yes           | Yes            | Yes           | Yes            |\n| VAE          | -             | Yes            | -             | -              |\n| Multilingual | -             | Yes            | -             | Yes            |\n| MoE          | -             | Yes            | -             | -              |\n\n## Performance\nWe test the speedup of LightSeq training and inference using both fp16 and int8 mix-precision on Transformer and BERT models. The baseline is PyTorch fp16 mix-precision. Training experiments are tested on one A100 GPU and inference experiments are tested on eight A100 GPUs.\n\nMore performance results are available [here](./docs/performance.md).\n\n### Speedup of Transformer Training\n| Batch Token Size | PyTorch QAT | LightSeq fp16 | LightSeq int8 |\n| ---------------- | ----------- | ------------- | ------------- |\n| 512              | 0.36        | 1.99          | 1.86          |\n| 1024             | 0.37        | 1.78          | 1.69          |\n| 2048             | 0.37        | 1.56          | 1.50          |\n| 4096             | 0.39        | 1.47          | 1.44          |\n| 8192             | 0.41        | 1.44          | 1.44          |\n| 15000            | 0.43        | 1.44          | 1.44          |\n\n### Speedup of BERT Training\n| Batch Token Size | PyTorch QAT | LightSeq fp16 | LightSeq int8 |\n| ---------------- | ----------- | ------------- | ------------- |\n| 8                | 0.45        | 2.12          | 1.99          |\n| 16               | 0.44        | 1.92          | 1.80          |\n| 32               | 0.42        | 1.59          | 1.52          |\n| 64               | 0.46        | 1.62          | 1.58          |\n| 128              | 0.46        | 1.74          | 1.70          |\n| 256              | 0.46        | 1.68          | 1.73          |\n\n### Speedup of Transformer Inference\n| Batch Size | Sequence Length | LightSeq fp16 | LightSeq int8 |\n|------------|-----------------|---------------|---------------|\n| 1          | 8               | 8.00          | 9.33          |\n| 1          | 32              | 6.48          | 7.38          |\n| 1          | 128             | 6.24          | 6.19          |\n| 8          | 8               | 9.38          | 10.71         |\n| 8          | 32              | 8.24          | 8.75          |\n| 8          | 128             | 6.83          | 7.28          |\n| 32         | 8               | 11.82         | 14.44         |\n| 32         | 32              | 9.68          | 11.15         |\n| 32         | 128             | 6.68          | 7.74          |\n\n### Speedup of BERT Inference\n| Batch Size | Sequence Length | LightSeq fp16 | LightSeq int8 |\n| ---------- | --------------- | ------------- | ------------- |\n| 1          | 8               | 9.22          | 9.87          |\n| 1          | 32              | 10.51         | 11.30         |\n| 1          | 128             | 9.96          | 10.85         |\n| 8          | 8               | 9.88          | 10.33         |\n| 8          | 32              | 7.79          | 8.22          |\n| 8          | 128             | 4.04          | 4.35          |\n| 32         | 8               | 10.60         | 11.02         |\n| 32         | 32              | 8.11          | 8.85          |\n| 32         | 128             | 1.82          | 2.04          |\n\n## Installation\n### Install from PyPI\nYou can install LightSeq from PyPI, which only supports Python 3.6 to 3.8 on Linux:\n```shell\npip install lightseq\n```\n\n### Build from Source\nYou can also build from source:\n```shell\nPATH=/usr/local/hdf5/:$PATH ENABLE_FP32=0 ENABLE_DEBUG=0 pip install -e $PROJECT_DIR\n```\n\nDetailed building introduction is available [here](docs/build.md).\n\n## Getting Started\nWe provide several samples here to show the usage of LightSeq. Refer to the complete [user guide](./docs/guide.md) and [examples](./docs/examples.md) for more details.\n\n### LightSeq Training from Scratch\nYou can use the modules provided by LightSeq to build your own models. The following is an example of building a Transformer encoder layer.\n\nFirst, import LightSeq Transformer encoder module:\n```python\nfrom lightseq.training import LSTransformerEncoderLayer\n```\n\nThen create an encoder configuration, and create a LightSeq Transformer encoder layer initialized with the configuration:\n```python\nconfig = LSTransformerEncoderLayer.get_config(\n    max_batch_tokens=4096,\n    max_seq_len=512,\n    hidden_size=1024,\n    intermediate_size=4096,\n    nhead=16,\n    attn_prob_dropout_ratio=0.1,\n    activation_dropout_ratio=0.1,\n    hidden_dropout_ratio=0.1,\n    pre_layer_norm=True,\n    activation_fn=\"relu\",\n    fp16=True,\n    local_rank=0,\n)\nlayer = LSTransformerEncoderLayer(config)\n```\n\nIn addition to encoder layers, the other modules can be created using similar methods, and then be trained as normal PyTorch models.\n\nMore usage is available [here](./examples/training/custom/README.md).\n\n### LightSeq Training from Fairseq\nLightSeq integrates all the fast and lightning modules into Fairseq.\n\nFirst install the two following requirements:\n```shell\npip install fairseq==0.10.2 sacremoses\n```\n\nYou can train a fp16 mix-precision translation task on wmt14 en2de dataset by:\n```shell\nsh examples/training/fairseq/ls_fairseq_wmt14en2de.sh\n```\n\n(Optional) Then you can start int8 mix-precision training on the basis of fp16 pre-training models by:\n```shell\nsh examples/training/fairseq/ls_fairseq_quant_wmt14en2de.sh\n```\n\nMore usage is available [here](./examples/training/fairseq/README.md).\n\n### LightSeq Training from Hugging Face BERT\nLightSeq replaces the encoder layers of Hugging Face BERT with LightSeq fast layers.\n\nFirst you should install these requirements:\n\n```shell\npip install transformers seqeval datasets\n```\n\nBefore doing next training, you need to switch to the following directory:\n```shell\ncd examples/training/huggingface/bert\n```\n\nThen you can easily fine-tune BERT for different tasks. Taking named entity recognition task as an example, you can train the BERT with fp16 mixed-precision using:\n```shell\npython task_ner/run_ner.sh\n```\n\n(Optional) You can also start int8 mix-precision training on the basis of fp16 pre-training models by:\n```shell\npython task_ner/run_quant_ner.sh\n```\n\nMore usage is available [here](./examples/training/huggingface/README.md).\n\n### LightSeq Inference from Fairseq\nAfter training using the above scripts, you can quickly infer the models using LightSeq.\n\nYou should transform the fp16 PyTorch weights to LightSeq protobuf or HDF5:\n```shell\npython export/fairseq/ls_fs_transformer_export.py\n```\n\n(Optional) You can also transform the int8 PyTorch weights to LightSeq protobuf or HDF5:\n```shell\npython export/fairseq/ls_fs_quant_transformer_export.py\n```\n\nOnce obtaining the LightSeq weights, you can quickly infer them using the following code:\n```python\nimport lightseq.inference as lsi\nmodel = lsi.Transformer(MODEL_PATH, MAX_BATCH_SIZE)\nresults = model.infer([[63, 47, 65, 1507, 88, 74, 10, 2057, 362, 9, 284, 6, 2, 1]])\n```\nHere MODEL_PATH is the path of your LightSeq weights and MAX_BATCH_SIZE is the maximal batch size of your input sentences.\n\nYou can also quickly infer the int8 LightSeq weights by replacing the `lsi.Transformer` with `lsi.QuantTransformer`.\n\nMore usage is available [here](./examples/inference/python/README.md).\n\n### LightSeq Inference from Hugging Face BERT\nWe provide an end2end bert-base example to see how fast Lightseq is compared to original Hugging Face.\n\nFirst you should install the requirements and locate to the specified directory:\n```shell\npip install transformers\ncd examples/inference/python\n```\n\nThen you can check the performance by simply running the following commands. `hf_bert_export.py` is used to transform PyTorch weights to LightSeq protobuf or HDF5.\n```shell\npython export/huggingface/hf_bert_export.py\npython test/ls_bert.py\n```\n\nMore usage is available [here](./examples/inference/python/README.md).\n\n### LightSeq Deployment Using Inference Server\nWe provide a docker image which contains tritonserver and LightSeq's dynamic link library, and you can deploy an inference server by simply replacing the model file with your own model file.\n```shell\nsudo docker pull hexisyztem/tritonserver_lightseq:22.01-1\n```\n\nMore usage is available [here](./examples/triton_backend/README.md).\n\n## Cite Us\nIf you use LightSeq in your research, please cite the following papers.\n\n```\n@InProceedings{wang2021lightseq,\n    title = \"{L}ight{S}eq: A High Performance Inference Library for Transformers\",\n    author = \"Wang, Xiaohui and Xiong, Ying and Wei, Yang and Wang, Mingxuan and Li, Lei\",\n    booktitle = \"Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies: Industry Papers (NAACL-HLT)\",\n    month = jun,\n    year = \"2021\",\n    publisher = \"Association for Computational Linguistics\",\n    pages = \"113--120\",\n}\n\n@article{wang2021lightseq2,\n  title={LightSeq2: Accelerated Training for Transformer-based Models on GPUs},\n  author={Wang, Xiaohui and Xiong, Ying and Qian, Xian and Wei, Yang and Li, Lei and Wang, Mingxuan},\n  journal={arXiv preprint arXiv:2110.05722},\n  year={2021}\n}\n```\n\n## We are Hiring!\nThe LightSeq team is hiring Interns and FTEs with backgrounds in *deep learning system, natural language processing, computer vision, speech, etc*.\nWe are based in Beijing and Shanghai. If you are interested, please send your resume to wangxiaohui.neo@bytedance.com.\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.4501953125,
          "content": "if [ ! -d 'build' ]; then\n    mkdir build\nfi\n# DEVICE_ARCH could be cuda/x86/arm\ncd build && cmake -DUSE_NEW_ARCH=ON -DDEVICE_ARCH=cuda -DUSE_TRITONBACKEND=OFF -DDEBUG_MODE=ON -DFP16_MODE=ON -DMEM_DEBUG=OFF .. && make -j${nproc}\n# you can use comand like below to compile lightseq with pybind interface:\n# sudo PATH=$PATH:/usr/local/hdf5 CUDACXX=/usr/local/cuda/bin/nvcc  DEVICE_ARCH=cuda ENABLE_FP32=0 ENABLE_DEBUG=0 ENABLE_NEW_ARCH=1 python3 setup.py install\n"
        },
        {
          "name": "build_wheels.sh",
          "type": "blob",
          "size": 0.7490234375,
          "content": "#!bash\nset -e -u -x\n\nfunction repair_wheel() {\n    wheel=\"$1\"\n    if ! auditwheel show \"$wheel\"; then\n        echo \"Skipping non-platform wheel $wheel\"\n    else\n        auditwheel repair \"$wheel\" --plat manylinux2014_x86_64 -w $(dirname $(readlink -e $wheel))\n    fi\n}\n\nPROJECT_DIR=$(dirname $(readlink -e $0))\ncd $PROJECT_DIR\n\necho $LIBRARY_PATH\nexport LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\nexport PATH=/usr/local/cuda/bin:${PATH}\n\n# Compile wheels\nfor PYBIN in /opt/python/*/bin/python; do\n    \"${PYBIN}\" -m pip install -U build\n    ENABLE_FP32=0 ENABLE_DEBUG=0 \"${PYBIN}\" -m build\ndone\n\n# Bundle external shared libraries into the wheels\n# mkdir -p $PROJECT_DIR/dist/manylinux\nfor whl in $PROJECT_DIR/dist/*.whl; do\n    repair_wheel \"$whl\"\ndone\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lightseq",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.4892578125,
          "content": "import os\nimport re\nimport sys\nimport platform\nimport subprocess\nimport multiprocessing\nimport glob\nimport logging\nfrom setuptools import setup, Extension\nimport setuptools\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\nfrom lightseq import __version__\n\nlogging.basicConfig()\nlogger = logging.getLogger(__name__)\n\nENABLE_FP32 = int(os.environ.get(\"ENABLE_FP32\", 0))\nENABLE_DEBUG = int(os.environ.get(\"ENABLE_DEBUG\", 0))\nENABLE_NEW_ARCH = int(os.environ.get(\"ENABLE_NEW_ARCH\", 0))\nDEVICE_ARCH = str(os.environ.get(\"DEVICE_ARCH\", \"cuda\"))  # DEVICE_ARCH can be x86/cuda\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=\"\", *args, **kwargs):\n        Extension.__init__(self, name, sources=[], *args, **kwargs)\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    def run(self):\n        try:\n            out = subprocess.check_output([\"cmake\", \"--version\"])\n        except OSError:\n            raise RuntimeError(\n                \"CMake must be installed to build the following extensions: \"\n                + \", \".join(e.name for e in self.extensions)\n            )\n\n        if platform.system() == \"Windows\":\n            cmake_version = LooseVersion(\n                re.search(r\"version\\s*([\\d.]+)\", out.decode()).group(1)\n            )\n            if cmake_version < \"3.1.0\":\n                raise RuntimeError(\"CMake >= 3.1.0 is required on Windows\")\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n        # required for auto-detection of auxiliary \"native\" libs\n        if not extdir.endswith(os.path.sep):\n            extdir += os.path.sep\n\n        cmake_args = [\n            # fixed for lightseq.inference\n            \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\" + os.path.join(extdir, \"lightseq\"),\n            \"-DPYTHON_EXECUTABLE=\" + sys.executable,\n        ]\n\n        cfg = \"Release\"\n        build_args = [\"--config\", cfg]\n\n        if platform.system() == \"Windows\":\n            cmake_args += [\n                \"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}\".format(cfg.upper(), extdir)\n            ]\n            if sys.maxsize > 2**32:\n                cmake_args += [\"-A\", \"x64\"]\n            build_args += [\"--\", \"/m\"]\n        else:\n            cmake_args += [\"-DCMAKE_BUILD_TYPE=\" + cfg]\n            cmake_args += [\"-DFP16_MODE=OFF\"] if ENABLE_FP32 else [\"-DFP16_MODE=ON\"]\n            cmake_args += [\"-DDEBUG_MODE=ON\"] if ENABLE_DEBUG else [\"-DDEBUG_MODE=OFF\"]\n            cmake_args += (\n                [\"-DUSE_NEW_ARCH=ON\"] if ENABLE_NEW_ARCH else [\"-DUSE_NEW_ARCH=OFF\"]\n            )\n            cmake_args += [\"-DDEVICE_ARCH={}\".format(DEVICE_ARCH)]\n            cmake_args += [\"-DDYNAMIC_API=OFF\"]\n            build_args += [\"--target\", \"lightseq\"]\n            build_args += [\"--\", \"-j{}\".format(multiprocessing.cpu_count())]\n\n        env = os.environ.copy()\n        env[\"CXXFLAGS\"] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(\n            env.get(\"CXXFLAGS\", \"\"), self.distribution.get_version()\n        )\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        subprocess.check_call(\n            [\"cmake\", ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env\n        )\n        subprocess.check_call(\n            [\"cmake\", \"--build\", \".\"] + build_args, cwd=self.build_temp\n        )\n\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\n\nsetup_kwargs = dict(\n    name=\"lightseq\",\n    version=__version__,\n    author=\"Xiaohui Wang, Ying Xiong, Xian Qian, Yang Wei\",\n    author_email=(\n        \"wangxiaohui.neo@bytedance.com, xiongying.taka@bytedance.com\"\n        \", qian.xian@bytedance.com, weiyang.god@bytedance.com\"\n        \", zhoubofan@bytedance.com, zhangzhexi@bytedance.com\"\n    ),\n    description=(\n        \"LightSeq is a high performance library for sequence processing and generation\"\n    ),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/bytedance/lightseq\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX :: Linux\",\n    ],\n    install_requires=[\n        \"ninja\",\n        \"numpy\",\n        \"scipy\",\n    ],\n    python_requires=\">=3.6\",\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n    packages=setuptools.find_packages(exclude=[\"docs\", \"tests\"]) + [\".\"],\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"lightseq-train = lightseq.training.cli.\"\n            \"lightseq_fairseq_train_cli:ls_cli_main\",\n            \"lightseq-generate = lightseq.training.cli.\"\n            \"lightseq_fairseq_generate_cli:ls_cli_main\",\n            \"lightseq-validate = lightseq.training.cli.\"\n            \"lightseq_fairseq_validate_cli:ls_cli_main\",\n            \"lightseq-deepspeed = lightseq.training.cli.\"\n            \"lightseq_deepspeed_cli:ls_cli_main\",\n            \"lightseq-infer = lightseq.training.cli.lightseq_infer_cli:ls_cli_main\",\n        ],\n    },\n)\next_modules = [CMakeExtension(\"inference\")]\n\ntry:\n    setup(ext_modules=ext_modules, **setup_kwargs)\nexcept Exception as e:\n    logger.warning(e)\n    logger.warning(\"The inference extension could not be compiled\")\n\n    # If this new 'setup' call don't fail, the module\n    # will be successfully installed, without the C extension :\n    setup(**setup_kwargs)\n    logger.info(\"lightseq training installation succeeded.\")\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}