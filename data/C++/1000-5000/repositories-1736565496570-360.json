{
  "metadata": {
    "timestamp": 1736565496570,
    "page": 360,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MisterTea/EternalTerminal",
      "stars": 3082,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0283203125,
          "content": "---\nBasedOnStyle: Google\n---\n"
        },
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.1279296875,
          "content": "[codespell]\nskip = .git,*.pdf,*.svg,.codespellrc\ncheck-hidden = true\nignore-regex = \\bhenrik@gassmann.onl\\b\nignore-words-list = te\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55859375,
          "content": "# Build artifacts\ndeps\nout\n.vscode\n*PVS-Studio*\n.dccache\n/*build/\n\n# Public/private keys\nid_rsa*\n.gnupg\n\n# Emacs backups\n*~\n\n# Vagrant\n.vagrant\n\n# Code Coverage\ncode-coverage.info\ncode_coverage_report\n\n# OS/X Junk file\n.DS_Store\n\n# Cmake build dir\nbuild\n\n# Generated by cmake protobuf\nMakefile\n\n# GTags\nGPATH\nGRTAGS\nGTAGS\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.732421875,
          "content": "[submodule \"external/cxxopts\"]\n\tpath = external/cxxopts\n\turl = https://github.com/jarro2783/cxxopts.git\n[submodule \"external/Catch2\"]\n\tpath = external/Catch2\n\turl = https://github.com/catchorg/Catch2.git\n[submodule \"external/msgpack-c\"]\n\tpath = external/msgpack-c\n\turl = https://github.com/msgpack/msgpack-c.git\n[submodule \"external/ThreadPool\"]\n\tpath = external/ThreadPool\n\turl = https://github.com/progschj/ThreadPool.git\n[submodule \"external/easyloggingpp\"]\n\tpath = external/easyloggingpp\n\turl = https://github.com/MisterTea/easyloggingpp.git\n[submodule \"external/sanitizers-cmake\"]\n\tpath = external/sanitizers-cmake\n\turl = https://github.com/arsenm/sanitizers-cmake.git\n[submodule \"external/cotire\"]\n\tpath = external/cotire\n\turl = https://github.com/sakra/cotire.git\n[submodule \"external/UniversalStacktrace\"]\n\tpath = external/UniversalStacktrace\n\turl = https://github.com/MisterTea/UniversalStacktrace.git\n[submodule \"external/vcpkg\"]\n\tpath = external/vcpkg\n\turl = https://github.com/microsoft/vcpkg.git\n[submodule \"external/sentry-native\"]\n\tpath = external/sentry-native\n\turl = https://github.com/getsentry/sentry-native.git\n[submodule \"external/cpp-httplib\"]\n\tpath = external/cpp-httplib\n\turl = https://github.com/yhirose/cpp-httplib.git\n[submodule \"external/PlatformFolders\"]\n\tpath = external/PlatformFolders\n\turl = https://github.com/sago007/PlatformFolders.git\n[submodule \"external/sole\"]\n\tpath = external/sole\n\turl = https://github.com/r-lyeh-archived/sole.git\n[submodule \"external/simpleini\"]\n\tpath = external/simpleini\n\turl = https://github.com/brofield/simpleini.git\n[submodule \"external/json\"]\n\tpath = external/json\n\turl = https://github.com/nlohmann/json.git\n[submodule \"external/base64\"]\n\tpath = external/base64\n\turl = https://github.com/tkislan/base64.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.796875,
          "content": "cmake_minimum_required(VERSION 3.16.3)\n\nset(EXTERNAL_DIR \"${CMAKE_SOURCE_DIR}/external\")\n\nif(DISABLE_VCPKG)\nelse()\n  # Enable vcpkg\n  set(CMAKE_TOOLCHAIN_FILE\n    \"${EXTERNAL_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake\")\n    \n  # Set the triplet\n  if(WIN32)\n    set(VCPKG_TARGET_TRIPLET \"x64-windows-static\" CACHE STRING \"VCPKG Triplet\")\n  elseif(APPLE)\n    execute_process(\n      COMMAND uname -m\n      COMMAND tr -d '\\n'\n      OUTPUT_VARIABLE VCPKG_ARCHITECTURE)\n    message(STATUS \"Architecture: ${VCPKG_ARCHITECTURE}\")\n\n    if(${VCPKG_ARCHITECTURE} STREQUAL \"arm64\") # Apple Silicon\n      set(VCPKG_TARGET_TRIPLET \"arm64-osx\" CACHE STRING \"VCPKG Triplet\")\n    else()\n      set(VCPKG_TARGET_TRIPLET \"x64-osx\" CACHE STRING \"VCPKG Triplet\")\n    endif()\n  else()\n    execute_process(\n      COMMAND uname -m\n      COMMAND tr -d '\\n'\n      OUTPUT_VARIABLE VCPKG_ARCHITECTURE)\n    message(STATUS \"Architecture: ${VCPKG_ARCHITECTURE}\")\n\n    if(${VCPKG_ARCHITECTURE} STREQUAL \"x86_64\")\n      set(VCPKG_TARGET_TRIPLET \"x64-linux\" CACHE STRING \"VCPKG Triplet\")\n    elseif(${VCPKG_ARCHITECTURE} STREQUAL \"x86_86\")\n      set(VCPKG_TARGET_TRIPLET \"x86-linux\" CACHE STRING \"VCPKG Triplet\")\n    elseif(${VCPKG_ARCHITECTURE} STREQUAL \"aarch64\")\n      set(VCPKG_TARGET_TRIPLET \"arm64-linux\" CACHE STRING \"VCPKG Triplet\")\n    elseif(${VCPKG_ARCHITECTURE} STREQUAL \"arm64\")\n      set(VCPKG_TARGET_TRIPLET \"arm64-linux\" CACHE STRING \"VCPKG Triplet\")\n    elseif(${VCPKG_ARCHITECTURE} MATCHES \"arm.*\")\n      set(VCPKG_TARGET_TRIPLET \"arm-linux\" CACHE STRING \"VCPKG Triplet\")\n    else()\n      set(VCPKG_TARGET_TRIPLET \"${VCPKG_ARCHITECTURE}-linux\" CACHE STRING \"VCPKG Triplet\")\n    endif()\n  endif()\n\n  # Some hacks to fix vcpkg\n  if(WIN32)\n    set(Protobuf_PROTOC_EXECUTABLE\n      \"${EXTERNAL_DIR}/vcpkg/packages/protobuf_${VCPKG_TARGET_TRIPLET}/tools/protobuf/protoc.exe\"\n    )\n    set(ZLIB_LIBRARY_RELEASE\n      \"${CMAKE_CURRENT_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/lib/zlib.lib\"\n    )\n    set(ZLIB_LIBRARY_DEBUG\n      \"${CMAKE_CURRENT_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/debug/lib/zlibd.lib\"\n    )\n  else()\n    # Make BoostConfig.cmake able to check its inputs\n    cmake_policy(SET CMP0057 NEW)\n\n    # Honor the visibility properties for all target types, including\n    # object libraries and static libraries.\n    cmake_policy(SET CMP0063 NEW)\n\n    # Don't ignore <PackageName>_ROOT variables\n    cmake_policy(SET CMP0074 NEW)\n    set(Protobuf_PROTOC_EXECUTABLE\n      \"${EXTERNAL_DIR}/vcpkg/packages/protobuf_${VCPKG_TARGET_TRIPLET}/tools/protobuf/protoc\"\n    )\n  endif()\n\n  set(Protobuf_USE_STATIC_LIBS ON)\n  set(protobuf_MSVC_STATIC_RUNTIME ON)\nendif()\n\nmessage(STATUS \"VCPKG TRIPLET: ${VCPKG_TARGET_TRIPLET}\")\n\n# Don't specify languages yet in case we need to bump the cmake version\nproject(EternalTCP VERSION 6.2.9 LANGUAGES NONE)\n\nenable_language(C)\nenable_language(CXX)\n\ninclude(CMakeFindDependencyMacro)\n\n# Add cmake script directory.\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\nset(CMAKE_MODULE_PATH \"${EXTERNAL_DIR}/sanitizers-cmake/cmake\" ${CMAKE_MODULE_PATH})\n\n# Do not install httplib files\nset(HTTPLIB_INSTALL OFF)\n\n# Required packages\nfind_package(OpenSSL REQUIRED)\nfind_package(Sanitizers REQUIRED)\nfind_package(Threads REQUIRED)\nfind_package(sodium REQUIRED)\nfind_package(Protobuf REQUIRED)\nfind_package(ZLIB REQUIRED)\nfind_package(Unwind)\n\nif(DISABLE_VCPKG)\nadd_subdirectory(${EXTERNAL_DIR}/Catch2)\nadd_subdirectory(${EXTERNAL_DIR}/cxxopts)\nadd_subdirectory(${EXTERNAL_DIR}/cpp-httplib)\nadd_subdirectory(${EXTERNAL_DIR}/json)\ninclude_directories(\n  SYSTEM ${EXTERNAL_DIR}/cpp-httplib\n)\ninclude_directories(\n  ${EXTERNAL_DIR}/simpleini\n  ${EXTERNAL_DIR}/json/include\n  ${EXTERNAL_DIR}/cxxopts/include\n)\nelse()\nfind_package(Catch2 CONFIG REQUIRED)\nfind_package(httplib CONFIG REQUIRED)\nfind_package(cxxopts CONFIG REQUIRED)\nfind_package(nlohmann_json CONFIG REQUIRED)\nfind_path(SIMPLEINI_INCLUDE_DIRS \"ConvertUTF.c\")\nendif()\n\n# Optional packages\nfind_package(UTempter)\n\nif(LINUX)\n  find_package(SELinux)\nendif()\n\nif(MSVC)\n  set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n\n# Using FreeBSD?\nif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n  set(FREEBSD TRUE)\nendif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n\n# Using NetBSD?\nif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n  set(NETBSD TRUE)\nendif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n\noption(DISABLE_SENTRY \"Disable Sentry crash logging\" OFF)\noption(DISABLE_TELEMETRY \"Disable all crash logging\" OFF)\n\nIF(APPLE)\n  # Proxy test for Mojave? (Clang that doesn't have std::filesystem)\n  IF(CMAKE_HOST_SYSTEM_VERSION VERSION_LESS \"19.0.0\")\n    # So use Boost's version\n    find_package(Boost 1.76 COMPONENTS filesystem REQUIRED)\n  ENDIF()\nENDIF(APPLE)\n\nif(FREEBSD OR NETBSD OR DISABLE_SENTRY OR DISABLE_TELEMETRY)\n# Sentry doesn't work on BSD\nelse()\n  # Enable sentry\n  set(USE_SENTRY TRUE)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DUSE_SENTRY\")\nendif()\n\nif(DISABLE_TELEMETRY)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNO_TELEMETRY\")\nendif()\n\nif(USE_SENTRY)\n  if(DISABLE_VCPKG)\n    set(SENTRY_BUILD_RUNTIMESTATIC ON)\n    set(BUILD_SHARED_LIBS OFF)\n    add_subdirectory(\"${EXTERNAL_DIR}/sentry-native\")\n    include_directories(\n      ${EXTERNAL_DIR}/sentry-native/include\n    )\n  else()\n    find_package(sentry CONFIG REQUIRED)\n  endif()\nendif()\n\noption(CODE_COVERAGE \"Enable code coverage\" OFF)\noption(FUZZING \"Enable builds for fuzz testing\" OFF)\noption(BUILD_TESTING \"Build tests\" ON)\noption(DISABLE_CRASH_LOG \"Disable installing easylogging crash handler\" OFF)\n\nadd_definitions(-DET_VERSION=\"${PROJECT_VERSION}\")\n\n# For easylogging, disable default log file, enable crash log, ensure thread\n# safe, and catch c++ exceptions\nset(CMAKE_CXX_FLAGS\n  \"${CMAKE_CXX_FLAGS} -DELPP_NO_DEFAULT_LOG_FILE -DELPP_FEATURE_CRASH_LOG -DELPP_THREAD_SAFE -DELPP_STRICT_PERMISSIONS -DSENTRY_BUILD_STATIC\"\n)\n\nIF(WIN32)\n  SET(CMAKE_CXX_FLAGS \"-DSODIUM_STATIC\")\nENDIF(WIN32)\n\nif(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g --coverage\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g --coverage\")\nendif(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\n\nif(DISABLE_CRASH_LOG)\n  set(CMAKE_CXX_FLAGS\n    \"${CMAKE_CXX_FLAGS} -DELPP_DISABLE_DEFAULT_CRASH_HANDLING\")\nendif(DISABLE_CRASH_LOG)\n\nif(UNIX)\n  # Enable debug info\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g -ggdb3\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -ggdb3\")\nendif()\n\n# Enable C++-17\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Enable compile commands export for vscode\nadd_definitions(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON)\n\nif(WIN32)\n  # Enable unicode\n  add_definitions(-DUNICODE)\n  add_definitions(-D_UNICODE)\nendif()\n\noption(FULL_PROTOBUF \"Link to full protobuf library instead of protobuf-lite\" ON)\n\nif(FULL_PROTOBUF)\n  if(WIN32)\n    set(PROTOBUF_LIBS protobuf::libprotobuf)\n  else()\n    set(PROTOBUF_LIBS ${PROTOBUF_LIBRARIES})\n  endif()\nelse()\n  if(WIN32)\n    set(PROTOBUF_LIBS protobuf::libprotobuf-lite)\n  else()\n    set(PROTOBUF_LIBS ${PROTOBUF_LITE_LIBRARIES})\n  endif()\nendif()\n\n# Needed for arch: https://github.com/protocolbuffers/protobuf/issues/15604\nif (Protobuf_VERSION VERSION_GREATER_EQUAL 4)\n    find_package(absl REQUIRED)\n\n    set(PROTOBUF_LIBS ${PROTOBUF_LIBS} absl::log_internal_check_op)\nendif()\n\n\nif(SELINUX_FOUND)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DWITH_SELINUX\")\nelse()\n  set(SELINUX_INCLUDE_DIR \"\")\n  set(SELINUX_LIBRARIES \"\")\nendif()\n\nif(UTEMPTER_FOUND)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DWITH_UTEMPTER\")\nelse()\n  set(UTEMPTER_INCLUDE_DIR \"\")\n  set(UTEMPTER_LIBRARIES \"\")\nendif()\n\nif(NOT Boost_FOUND)\n  set(Boost_INCLUDE_DIR \"\")\n  set(Boost_LIBRARIES \"\")\nendif()\n\nIF(NOT APPLE AND NOT WIN32)\n  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    SET(CMAKE_INSTALL_PREFIX \"/usr\" CACHE PATH \"Install prefix\" FORCE)\n  endif()\nENDIF()\n\nprotobuf_generate_cpp(ET_SRCS ET_HDRS proto/ET.proto)\nset_source_files_properties(${ET_SRCS} ${ET_HDRS} PROPERTIES GENERATED TRUE)\nprotobuf_generate_cpp(ETERMINAL_SRCS ETERMINAL_HDRS proto/ETerminal.proto)\nset_source_files_properties(${ETERMINAL_SRCS} ${ETERMINAL_HDRS}\n  PROPERTIES GENERATED TRUE)\nadd_custom_target(generated-code DEPENDS ${ET_SRCS} ${ET_HDRS}\n  ${ETERMINAL_SRCS} ${ETERMINAL_HDRS})\n\nif(ANDROID)\n  set(CORE_LIBRARIES OpenSSL::SSL ZLIB::ZLIB util)\nelseif(FREEBSD)\n  set(CORE_LIBRARIES OpenSSL::SSL ZLIB::ZLIB util execinfo)\nelseif(NETBSD)\n  set(CORE_LIBRARIES OpenSSL::SSL ZLIB::ZLIB util resolv\n    execinfo)\nelseif(WIN32)\n  set(CORE_LIBRARIES OpenSSL::SSL ZLIB::ZLIB Ws2_32 Shlwapi\n    dbghelp)\nelseif(APPLE)\n  set(CORE_LIBRARIES OpenSSL::SSL ZLIB::ZLIB util resolv)\nelse()\n  set(CORE_LIBRARIES\n    httplib::httplib\n    cxxopts::cxxopts\n    nlohmann_json::nlohmann_json\n    OpenSSL::SSL\n    OpenSSL::Crypto\n    ZLIB::ZLIB\n    util\n    resolv\n    atomic\n    stdc++fs\n  )\nendif()\n\nIF(Unwind_FOUND)\n  list(INSERT CORE_LIBRARIES 0 unwind::unwind)\nENDIF()\n\nIF(USE_SENTRY)\n  list(INSERT CORE_LIBRARIES 0 sentry::sentry)\nENDIF()\n\nmacro(DECORATE_TARGET TARGET_NAME)\n  add_sanitizers(${TARGET_NAME})\n  target_precompile_headers(${TARGET_NAME} PUBLIC \"src/base/Headers.hpp\")\nendmacro()\n\nmacro(DECORATE_FUZZER TARGET_NAME)\n  add_sanitizers(${TARGET_NAME})\n\n  if(FUZZING)\n    # ASAN must also be enabled to build fuzzers.\n    if(NOT SANITIZE_ADDRESS)\n      message(FATAL_ERROR \"Fuzzing requires SANITIZE_ADDRESS=ON to detect memory errors.\")\n    endif()\n\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      set_property(TARGET ${TARGET_NAME} APPEND_STRING\n        PROPERTY COMPILE_FLAGS \" -fsanitize=fuzzer\")\n      set_property(TARGET ${TARGET_NAME} APPEND_STRING\n        PROPERTY LINK_FLAGS \" -fsanitize=fuzzer\")\n    else()\n      message(FATAL_ERROR \"Currently fuzzing is only supported with Clang.\")\n    endif()\n  endif()\nendmacro()\n\ninclude_directories(\n  ${EXTERNAL_DIR}/easyloggingpp/src\n  ${EXTERNAL_DIR}/PlatformFolders\n  ${EXTERNAL_DIR}/ThreadPool\n  ${EXTERNAL_DIR}/sole\n  ${EXTERNAL_DIR}/base64\n  src/base\n  src/terminal\n  src/terminal/forwarding\n  src/htm\n  ${PROTOBUF_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CURSES_INCLUDE_DIR}\n  ${sodium_INCLUDE_DIR}\n  ${SELINUX_INCLUDE_DIR}\n  ${UTEMPTER_INCLUDE_DIR}\n  ${Boost_INCLUDE_DIR}\n  ${OPENSSL_INCLUDE_DIR}\n  ${SIMPLEINI_INCLUDE_DIRS}\n)\n\nif(NOT ANDROID)\n  include_directories(${EXTERNAL_DIR}/UniversalStacktrace/ust)\nendif()\n\nadd_library(\n  et-lib STATIC\n\n  ${EXTERNAL_DIR}/easyloggingpp/src/easylogging++.h\n  ${EXTERNAL_DIR}/easyloggingpp/src/easylogging++.cc\n  ${EXTERNAL_DIR}/PlatformFolders/sago/platform_folders.cpp\n\n  src/base/BackedReader.hpp\n  src/base/BackedReader.cpp\n  src/base/BackedWriter.hpp\n  src/base/BackedWriter.cpp\n  src/base/ClientConnection.hpp\n  src/base/ClientConnection.cpp\n  src/base/Connection.hpp\n  src/base/Connection.cpp\n  src/base/CryptoHandler.hpp\n  src/base/CryptoHandler.cpp\n  src/base/ServerClientConnection.hpp\n  src/base/ServerClientConnection.cpp\n  src/base/ServerConnection.hpp\n  src/base/ServerConnection.cpp\n  src/base/SocketHandler.hpp\n  src/base/SocketHandler.cpp\n  src/base/PipeSocketHandler.hpp\n  src/base/PipeSocketHandler.cpp\n  src/base/TcpSocketHandler.hpp\n  src/base/TcpSocketHandler.cpp\n  src/base/UnixSocketHandler.hpp\n  src/base/UnixSocketHandler.cpp\n  src/base/LogHandler.hpp\n  src/base/LogHandler.cpp\n  src/base/DaemonCreator.hpp\n  src/base/DaemonCreator.cpp\n  src/base/RawSocketUtils.hpp\n  src/base/RawSocketUtils.cpp\n  src/base/WinsockContext.hpp\n  src/base/SubprocessToString.hpp\n  src/base/SubprocessToString.cpp\n  src/base/TunnelUtils.hpp\n  src/base/TunnelUtils.cpp\n\n  ${ET_HDRS}\n  ${ET_SRCS}\n)\nadd_dependencies(et-lib generated-code)\ndecorate_target(et-lib)\n\nadd_library(\n  TerminalCommon STATIC\n  src/terminal/forwarding/PortForwardHandler.hpp\n  src/terminal/forwarding/PortForwardHandler.cpp\n  src/terminal/forwarding/ForwardSourceHandler.hpp\n  src/terminal/forwarding/ForwardSourceHandler.cpp\n  src/terminal/forwarding/ForwardDestinationHandler.hpp\n  src/terminal/forwarding/ForwardDestinationHandler.cpp\n  src/terminal/TerminalServer.hpp\n  src/terminal/TerminalServer.cpp\n  src/terminal/UserTerminalRouter.hpp\n  src/terminal/UserTerminalRouter.cpp\n  src/terminal/TerminalClient.hpp\n  src/terminal/TerminalClient.cpp\n  src/terminal/ServerFifoPath.hpp\n  src/terminal/ServerFifoPath.cpp\n  src/terminal/SshSetupHandler.hpp\n  src/terminal/SshSetupHandler.cpp\n  src/terminal/UserTerminalHandler.hpp\n  src/terminal/UserTerminalHandler.cpp\n  src/terminal/UserJumphostHandler.hpp\n  src/terminal/UserJumphostHandler.cpp\n  src/terminal/TelemetryService.hpp\n  src/terminal/TelemetryService.cpp\n  ${ETERMINAL_SRCS}\n  ${ETERMINAL_HDRS})\nadd_dependencies(TerminalCommon generated-code et-lib)\ndecorate_target(TerminalCommon)\n\nadd_executable(et src/terminal/TerminalClientMain.cpp)\ntarget_link_libraries(\n  et\n  LINK_PUBLIC\n  TerminalCommon\n  et-lib\n  ${CMAKE_THREAD_LIBS_INIT}\n  ${PROTOBUF_LIBS}\n  ${sodium_LIBRARY_RELEASE}\n  ${UTEMPTER_LIBRARIES}\n  ${Boost_LIBRARIES}\n  ${CORE_LIBRARIES})\nadd_dependencies(et generated-code et-lib)\ndecorate_target(et)\n\nif(WIN32)\n  install(\n    TARGETS et\n    DESTINATION \"bin\"\n    COMPONENT client)\n  set(CPACK_COMPONENTS_ALL client)\n  set(CPACK_COMPONENT_CLIENT_DISPLAY_NAME \"Eternal Terminal Client\")\n\nelse(WIN32)\n  add_executable(etserver src/terminal/TerminalServerMain.cpp)\n  target_link_libraries(\n    etserver\n    LINK_PUBLIC\n    TerminalCommon\n    et-lib\n    ${CMAKE_THREAD_LIBS_INIT}\n    ${PROTOBUF_LIBS}\n    ${sodium_LIBRARY_RELEASE}\n    ${SELINUX_LIBRARIES}\n    ${UTEMPTER_LIBRARIES}\n    ${Boost_LIBRARIES}\n    ${CORE_LIBRARIES})\n  add_dependencies(etserver generated-code et-lib)\n  decorate_target(etserver)\n\n  add_executable(etterminal src/terminal/TerminalMain.cpp)\n  target_link_libraries(\n    etterminal\n    LINK_PUBLIC\n    TerminalCommon\n    et-lib\n    ${CMAKE_THREAD_LIBS_INIT}\n    ${PROTOBUF_LIBS}\n    ${sodium_LIBRARY_RELEASE}\n    ${SELINUX_LIBRARIES}\n    ${UTEMPTER_LIBRARIES}\n    ${Boost_LIBRARIES}\n    ${CORE_LIBRARIES})\n  add_dependencies(etterminal generated-code et-lib)\n  decorate_target(etterminal)\n\n  add_library(\n    HtmCommon STATIC\n    src/htm/TerminalHandler.cpp\n    src/htm/MultiplexerState.cpp\n    src/htm/IpcPairClient.cpp\n    src/htm/IpcPairEndpoint.cpp\n    src/htm/IpcPairServer.cpp\n    src/htm/HtmClient.cpp\n    src/htm/HtmServer.cpp\n  )\n  add_dependencies(HtmCommon generated-code et-lib)\n  decorate_target(HtmCommon)\n\n  add_executable(htm src/htm/HtmClientMain.cpp)\n  target_link_libraries(\n    htm\n    LINK_PUBLIC\n    HtmCommon\n    et-lib\n    ${CMAKE_THREAD_LIBS_INIT}\n    ${PROTOBUF_LIBS}\n    ${sodium_LIBRARY_RELEASE}\n    ${SELINUX_LIBRARIES}\n    ${UTEMPTER_LIBRARIES}\n    ${Boost_LIBRARIES}\n    ${CORE_LIBRARIES})\n  decorate_target(htm)\n\n  add_executable(htmd src/htm/HtmServerMain.cpp)\n  target_link_libraries(\n    htmd\n    LINK_PUBLIC\n    HtmCommon\n    et-lib\n    ${CMAKE_THREAD_LIBS_INIT}\n    ${PROTOBUF_LIBS}\n    ${sodium_LIBRARY_RELEASE}\n    ${SELINUX_LIBRARIES}\n    ${UTEMPTER_LIBRARIES}\n    ${Boost_LIBRARIES}\n    ${CORE_LIBRARIES})\n  decorate_target(htmd)\n\n  if(BUILD_TESTING)\n    enable_testing()\n\n    file(GLOB TEST_SRCS test/*Test.cpp)\n    add_executable(\n      et-test\n      ${TEST_SRCS}\n      test/Main.cpp\n    )\n\n    add_dependencies(et-test generated-code TerminalCommon et-lib)\n    target_link_libraries(\n      et-test\n      LINK_PUBLIC\n      TerminalCommon\n      et-lib\n      Catch2::Catch2WithMain\n      ${CMAKE_THREAD_LIBS_INIT}\n      ${PROTOBUF_LIBS}\n      ${sodium_LIBRARY_RELEASE}\n      ${SELINUX_LIBRARIES}\n      ${UTEMPTER_LIBRARIES}\n      ${Boost_LIBRARIES}\n      ${CORE_LIBRARIES})\n    add_test(et-test et-test)\n    add_sanitizers(et-test)\n  endif()\n\n  if(BUILD_TESTING AND FUZZING)\n    add_executable(\n      TerminalServerFuzzer\n      test/TerminalServerFuzzer.cpp\n      test/FuzzableTerminalServer.hpp\n    )\n    add_dependencies(TerminalServerFuzzer TerminalCommon et-lib)\n    target_link_libraries(\n      TerminalServerFuzzer\n      TerminalCommon\n      et-lib\n      ${CMAKE_THREAD_LIBS_INIT}\n      ${PROTOBUF_LIBS}\n      ${sodium_LIBRARY_RELEASE}\n      ${SELINUX_LIBRARIES}\n      ${UTEMPTER_LIBRARIES}\n      ${Boost_LIBRARIES}\n      ${CORE_LIBRARIES})\n    decorate_fuzzer(TerminalServerFuzzer)\n\n    add_executable(\n      TerminalServerRouterFuzzer\n      test/TerminalServerRouterFuzzer.cpp\n      test/FuzzableTerminalServer.hpp\n    )\n    add_dependencies(TerminalServerRouterFuzzer TerminalCommon et-lib)\n    target_link_libraries(\n      TerminalServerRouterFuzzer\n      TerminalCommon\n      et-lib\n      ${CMAKE_THREAD_LIBS_INIT}\n      ${PROTOBUF_LIBS}\n      ${sodium_LIBRARY_RELEASE}\n      ${SELINUX_LIBRARIES}\n      ${UTEMPTER_LIBRARIES}\n      ${Boost_LIBRARIES}\n      ${CORE_LIBRARIES})\n    decorate_fuzzer(TerminalServerRouterFuzzer)\n  endif(BUILD_TESTING AND FUZZING)\n\n  install(\n    TARGETS etserver etterminal et htm htmd\n    PERMISSIONS\n    OWNER_EXECUTE\n    OWNER_WRITE\n    OWNER_READ\n    GROUP_EXECUTE\n    GROUP_READ\n    WORLD_EXECUTE\n    WORLD_READ\n    DESTINATION \"bin\")\nendif()\n\nset(CPACK_PACKAGE_NAME \"EternalTerminal\")\nset(CPACK_PACKAGE_VENDOR \"https://github.com/MisterTea/EternalTerminal\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n  \"Remote terminal for the busy and impatient\")\nset(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})\nset(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"EternalTerminal\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n\nif(NOT CPACK_GENERATOR)\n  SET(CPACK_GENERATOR \"STGZ;TGZ;TZ;DEB\")\nendif()\nSET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${CMAKE_SOURCE_DIR}/debian/postinst;${CMAKE_SOURCE_DIR}/debian/postrm;${CMAKE_SOURCE_DIR}/debian/prerm\")\nSET(CPACK_INSTALLED_DIRECTORIES \"${CMAKE_SOURCE_DIR}/systemctl;/lib/systemd/system\" \"${CMAKE_SOURCE_DIR}/etc;/etc\")\nSET(CPACK_DEBIAN_PACKAGE_MAINTAINER \"Unmaintained\")\nSET(CPACK_DEBIAN_PACKAGE_DEPENDS \"libprotobuf-dev, libc6 (>= 2.34), libgcc-s1 (>= 3.3.1), libstdc++6 (>= 12), libutempter0 (>= 1.1.5)\")\nSET(CPACK_DEBIAN_PACKAGE_SUGGESTS \"systemd\")\n\n# This must always be last!\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8681640625,
          "content": "# Eternal Terminal\n\nEternal Terminal is a remote shell that automatically reconnects without interrupting the session.\n\nWebsite: <https://mistertea.github.io/EternalTerminal/>.\n\n## Integration tests\n\nCircle: [![CircleCI](https://circleci.com/gh/MisterTea/EternalTerminal/tree/master.svg?style=svg)](https://circleci.com/gh/MisterTea/EternalTerminal/tree/master)\n\nLinux: ![Linux CI](https://github.com/MisterTea/EternalTerminal/workflows/Linux%20CI/badge.svg?branch=master)\n\n## Packaging status\n\n[![Packaging\nstatus](https://repology.org/badge/vertical-allrepos/eternalterminal.svg)](https://repology.org/project/eternalterminal/versions)\n\n## Installing\n\n### macOS\n\nThe easiest way to install is using Homebrew:\n\n```bash\nbrew install MisterTea/et/et\n```\n\nIf the install fails on including csignal, see https://github.com/MisterTea/EternalTerminal/issues/662#issuecomment-2408889829\n\nThen if you want a daemon to launch `etserver` on every boot:\n\nOn m1 (Apple Silicon) Macs:\n\n```bash\nsudo sed 's:/usr/local/bin/etserver:/opt/homebrew/bin/etserver:g' ../init/launchd/homebrew.mxcl.et.plist | sudo tee /Library/LaunchDaemons/homebrew.mxcl.et.plist\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.et.plist\n```\n\nOn x86 Macs:\n\n```bash\nsudo cp ../init/launchd/homebrew.mxcl.et.plist /Library/LaunchDaemons/homebrew.mxcl.et.plist\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.et.plist\n```\n\nAlternatively, a package is available in MacPorts:\n\n```bash\nsudo port install et\n```\n\n### Ubuntu\n\nFor Ubuntu, use our PPA:\n\n```bash\nsudo add-apt-repository ppa:jgmath2000/et\nsudo apt-get update\nsudo apt-get install et\n```\n\nOr see \"Debian/Ubuntu\" below to install and build from source (e.g., for ARM).\n\n### Debian\n\nFor Debian, use our deb repo:\n\n```bash\necho \"deb [signed-by=/etc/apt/keyrings/et.gpg] https://mistertea.github.io/debian-et/debian-source/ $(grep VERSION_CODENAME /etc/os-release | cut -d= -f2) main\" | sudo tee -a /etc/apt/sources.list.d/et.list\nsudo mkdir -m 0755 -p /etc/apt/keyrings # only if you're using Debian 11 or older\ncurl -sSL https://github.com/MisterTea/debian-et/raw/master/et.gpg | sudo tee /etc/apt/keyrings/et.gpg >/dev/null\nsudo apt update\nsudo apt install et\n```\n\n### CentOS 7\n\nUp to the present day the only way to install is to [build from source](#centos-7-1).\n\n### CentOS 8\n\n```bash\nsudo dnf install epel-release\nsudo dnf install et\n```\n\n### FreeBSD\n\nOn FreeBSD, use:\n\n```bash\npkg install eternalterminal\n```\n\n### Fedora (version 29 and later):\n\n```bash\nsudo dnf install et\n```\n\n### openSUSE\n\n```bash\nzypper ar -f obs://network\nzypper ref\nzypper in EternalTerminal\n```\n\n### Other Linux\n\nInstall dependencies:\n\n- Fedora (tested on 25):\n\n  ```bash\n  sudo dnf install boost-devel libsodium-devel protobuf-devel \\\n  \tprotobuf-compiler cmake gflags-devel libcurl-devel\n  ```\n\n- Gentoo:\n\n  ```bash\n  sudo emerge dev-libs/boost dev-libs/libsodium \\\n  \tdev-libs/protobuf dev-util/cmake dev-cpp/gflags\n  ```\n\nDownload and install from source:\n\n```bash\ngit clone --recurse-submodules --depth 1 https://github.com/MisterTea/EternalTerminal.git\ncd EternalTerminal\nmkdir build\ncd build\ncmake ../\nmake\nsudo make install\n```\n\n### Windows\n\nEternal Terminal works under WSL (Windows Subsystem for Linux). Follow the ubuntu instructions.\n\n### Docker Image\n\nSee [docker/README.md](docker/)\n\n## Verifying\n\nVerify that the client is installed correctly by looking for the `et` executable: `which et`.\n\nVerify that the server is installed correctly by checking the service status: `systemctl status et`. On some operating systems, you may need to enable and start the service manually: `sudo systemctl enable --now et`.\n\nYou are ready to start using ET!\n\n## Configuring\n\nIf you'd like to modify the server settings (e.g. to change the listening port), edit /etc/et.cfg.\n\n## Using\n\nET uses ssh for handshaking and encryption, so you must be able to ssh into the machine from the client. Make sure that you can `ssh user@hostname`.\n\nET uses TCP, so you need an open port on your server. By default, it uses 2022.\n\n\nOnce you have an open port, the syntax is similar to ssh. Username is default to the current username starting the et process, use `-u` or `user@` to specify a different one if necessary.\n\n```bash\net hostname (etserver running on default port 2022, username is the same as current)\net user@hostname:8000 (etserver running on port 8000, different user)\n```\n\nYou can specify a jumphost and the port et is running on jumphost using `--jumphost` and `--jport`. If no `--jport` is given, et will try to connect to default port 2022.\n\n```bash\net hostname -jumphost jump_hostname (etserver running on port 2022 on both hostname and jumphost)\net hostname:8888 --jumphost jump_hostname --jport 9999\n```\n\nAdditional arguments that et accepts are port forwarding pairs with option `-t \"18000:8000, 18001-18003:8001-8003\"`, a command to run immediately after the connection is setup through `-c`.\n\nStarting from the latest release, et supports parsing both user-specific and system-wide SSH config files.\nThe config file is required when your sshd on server/jumphost is listening on a port which is not 22.\nHere is an example SSH config file showing how to setup when\n\n- there is a jumphost in the middle\n- sshd is listening on a port that is not 22\n- connecting to a different username other than the current one.\n\n```ssh-config\nHost dev\n  HostName 192.168.1.1\n  User fred\n  Port 5555\n  ProxyJump user@jumphost.example.org:22\n```\n\nWith the ssh config file set as above, you can simply call et with\n\n```bash\net dev (etserver running on port 2022 on both hostname and jumphost)\net dev:8000 -jport 9000 (etserver running on port 9000 on jumphost)\n```\n\n## Building from Source\n\n### macOS\n\nTo build Eternal Terminal on Mac, the easiest way is to grab dependencies with Homebrew:\n\n```bash\nbrew install autoconf automake libtool\ngit clone --recurse-submodules --depth 1 https://github.com/MisterTea/EternalTerminal.git\ncd EternalTerminal\nmkdir build\ncd build\ncmake ../\nmake -j$(nproc) && sudo make install\n```\n\nTo run an `et` server for testing, run `./etserver`. To run an `et`\nserver daemon persistently across reboots:\n\n```bash\nsudo cp ../init/launchd/homebrew.mxcl.et.plist /Library/LaunchDaemons\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.et.plist\n```\n\n### Debian/Ubuntu\n\nGrab the deps and then follow this process.\n\nDebian/Ubuntu Dependencies:\n\n```bash\nsudo apt install libsodium-dev autoconf libtool \\\n\tlibprotobuf-dev protobuf-compiler libutempter-dev libcurl4-openssl-dev \\\n    build-essential ninja-build cmake git zip pkg-config\n```\n\nFetch source, build and install:\n\n```bash\ngit clone --recurse-submodules --depth 1 https://github.com/MisterTea/EternalTerminal.git\ncd EternalTerminal\nmkdir build\ncd build\n# For ARM (including OS/X with apple silicon):\nif [[ $(uname -a | grep 'arm\\|aarch64') ]]; then export VCPKG_FORCE_SYSTEM_BINARIES=1; fi\ncmake -DCPACK_GENERATOR=DEB ../\nmake -j$(nproc) package\nsudo dpkg --install *.deb\n```\n\nOnce built, the binary only requires `libprotobuf-dev`.\n\nDisable et server by `sudo systemctl disable --now et`\n\n### CentOS 7\n\nInstall dependencies:\n\n```bash\nsudo yum install epel-release\nsudo yum install cmake3 boost-devel libsodium-devel protobuf-devel \\\n     protobuf-compiler gflags-devel protobuf-lite-devel libcurl-devel \\\n     perl-IPC-Cmd perl-Data-Dumper libunwind-devel libutempter-devel\n```\n\nInstall scl dependencies\n\n```bash\nsudo yum install centos-release-scl\nsudo yum install devtoolset-11 devtoolset-11-libatomic-devel rh-git227\n```\n\nDownload and install from source ([see #238 for details](https://github.com/MisterTea/EternalTerminal/issues/238)):\n\n```bash\ngit clone --recurse-submodules --depth 1 https://github.com/MisterTea/EternalTerminal.git\ncd EternalTerminal\nmkdir build\ncd build\nscl enable devtoolset-11 rh-git227 'cmake3 ../'\nscl enable devtoolset-11 'make && sudo make install'\nsudo cp ../systemctl/et.service /etc/systemd/system/\nsudo cp ../etc/et.cfg /etc/\n```\n\nFind the actual location of et:\n\n```bash\nwhich etserver\n```\n\nCorrect the service file (see [#180](https://github.com/MisterTea/EternalTerminal/issues/180) for details).\n\n```bash\nsudo sed -ie \"s|ExecStart=[^[:space:]]*[[:space:]]|ExecStart=$(which etserver) |\" /etc/systemd/system/et.service\n```\n\nAlternatively, open the file /etc/systemd/system/et.service in an editor and correct the `ExectStart=...` line to point to the correct path of the `etserver` binary.\n\n\n```\nExecStart=/usr/local/bin/etserver --cfgfile=/etc/et.cfg\n```\n\nReload systemd configs:\n\n```bash\nsudo systemctl daemon-reload\n```\n\nStart the et service:\n\n```bash\nsudo systemctl enable --now et.service\n```\n\n## Building using Docker\n\nBuilder Dockerfiles are located at [deployment/](deployment/). Supported OSes: CentOS 8, openSUSE and Ubuntu.\n\n## Reporting issues\n\nIf you have any problems with installation or usage, please [file an issue on GitHub](https://github.com/MisterTea/EternalTerminal/issues).\n\n## Developers\n\n- Jason Gauci: https://github.com/MisterTea\n- Ailing Zhang: https://github.com/ailzhang\n- James Short: https://github.com/jshort\n"
        },
        {
          "name": "build_static.sh",
          "type": "blob",
          "size": 2.39453125,
          "content": "set -e\nset -x\n\nrm -rf build deps out\nmkdir -p build\nmkdir -p deps/out/bin\nmkdir -p out\ncd deps || exit\nexport PATH=\"$PWD\"/out/bin:/usr/sbin:/usr/bin:/sbin:/bin\ncurl -OL https://cmake.org/files/v3.9/cmake-3.9.4.tar.gz\ntar xvzf cmake-3.9.4.tar.gz\ncd cmake-3.9.4 || exit\n./configure --prefix=\"$PWD\"/../out\nmake -j8 install\ncd .. || exit\ncurl -OL http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz\ntar xvzf autoconf-2.69.tar.gz\ncd autoconf-2.69\n./configure --prefix=\"$PWD\"/../out\nmake -j8 install\ncd .. || exit\ncurl -OL http://ftp.gnu.org/gnu/automake/automake-1.15.1.tar.gz\ntar xvzf automake-1.15.1.tar.gz\ncd automake-1.15.1\n./configure --prefix=\"$PWD\"/../out\nmake -j8 install\ncd .. || exit\ncurl -OL http://ftpmirror.gnu.org/libtool/libtool-2.4.6.tar.gz\ntar xvzf libtool-2.4.6.tar.gz\ncd libtool-2.4.6\n./configure --prefix=\"$PWD\"/../out --disable-shared --enable-static\nmake -j8 install\ncd .. || exit\ngit clone https://github.com/jedisct1/libsodium.git\ngit clone https://github.com/google/protobuf.git\ncd protobuf || exit\ngit checkout v3.4.1\ncmake -DCMAKE_INSTALL_PREFIX=\"$PWD\"/../out -Dprotobuf_BUILD_TESTS=OFF ./cmake\nmake -j8 install\ncd ../libsodium || exit\ngit checkout 1.0.12\n./autogen.sh\n./configure --prefix=\"$PWD\"/../out --disable-shared --enable-static\nmake -j8 install\ncd ../../build || exit\nif  [[ -f \"$PWD/../deps/out/lib64/libprotobuf.a\" ]]; then\nPROTO_LIB_DIR=\"$PWD/../deps/out/lib64\"\nelse\nPROTO_LIB_DIR=\"$PWD/../deps/out/lib\"\nfi\nDISABLE_CRASH_LOG=${DISABLE_CRASH_LOG:-OFF}\ncmake \\\n    -DProtobuf_INCLUDE_DIR=\"$PWD\"/../deps/out/include \\\n    -DProtobuf_LIBRARY_DEBUG=\"$PROTO_LIB_DIR\"/libprotobuf.a \\\n    -DProtobuf_LIBRARY_RELEASE=\"$PROTO_LIB_DIR\"/libprotobuf.a \\\n    -DProtobuf_LITE_LIBRARY_DEBUG=\"$PROTO_LIB_DIR\"/libprotobuf-lite.a \\\n    -DProtobuf_LITE_LIBRARY_RELEASE=\"$PROTO_LIB_DIR\"/libprotobuf-lite.a \\\n    -DProtobuf_PROTOC_EXECUTABLE=\"$PWD\"/../deps/out/bin/protoc \\\n    -DProtobuf_PROTOC_LIBRARY_DEBUG=\"$PROTO_LIB_DIR\"/libprotoc.a \\\n    -DProtobuf_PROTOC_LIBRARY_RELEASE=\"$PROTO_LIB_DIR\"/libprotoc.a \\\n    -Dsodium_INCLUDE_DIR=\"$PWD\"/../deps/out/include \\\n    -Dsodium_LIBRARY_DEBUG=\"$PWD\"/../deps/out/lib/libsodium.a \\\n    -Dsodium_LIBRARY_RELEASE=\"$PWD\"/../deps/out/lib/libsodium.a \\\n    -Dsodium_USE_STATIC_LIBS=ON \\\n    -DCMAKE_INSTALL_PREFIX=\"$PWD\"/../out \\\n    -DDISABLE_CRASH_LOG=\"$DISABLE_CRASH_LOG\" \\\n    ../\nmake -j8 install\ncd ../out || exit\necho \"Done!  Static binaries of et and etserver are in the out/bin directory\"\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.4599609375,
          "content": "ignore:\n  - \"external\"\n  - \"external_imported\"\n  - \"src/base/WinsockContext.hpp\"\n  - \"src/htm\" # HTM not tested yet\n  - \"src/terminal/ParseConfigFile.hpp\"\n  - \"src/terminal/TelemetryService*\"\n  - \"src/terminal/PsuedoTerminalConsole.hpp\"\n  - \"src/terminal/PsuedoUserTerminal.hpp\"\n  - \"src/terminal/*Main.cpp\"\n  - \"src/base/Headers.hpp\"\n  - \"src/base/TcpSocketHandler*\"\n  - \"src/base/SubprocessToString*\"\ncoverage:\n  status:\n    project:\n      default:\n        target: 50%\n"
        },
        {
          "name": "coverage.sh",
          "type": "blob",
          "size": 0.55859375,
          "content": "rm -Rf build\nmkdir build\npushd ./build\ncmake ../ -DBUILD_TEST=ON -DBUILD_GTEST=ON -DCODE_COVERAGE=ON -G Ninja\nninja\nfind . -name \"*.gcda\" -print0 | xargs -0 rm\npopd\n./build/test/et-test\nlcov --directory ./build --capture --output-file ./code-coverage.info -rc lcov_branch_coverage=1\ngenhtml code-coverage.info --branch-coverage --output-directory ./code_coverage_report/\necho \"Report generated in code_coverage_report\"\nopen code_coverage_report/index.html\nrm -Rf build\nmkdir build\npushd ./build\ncmake ../ -DBUILD_TEST=ON -DBUILD_GTEST=ON -DCODE_COVERAGE=OFF -G Ninja\npopd\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.sh",
          "type": "blob",
          "size": 0.13671875,
          "content": "#!/bin/bash\nfind ./ -type f | grep \"\\.[hc]pp\" | grep -v /ext/ | grep -v /external/ | grep -v /build/ | xargs clang-format --style=Google -i\n"
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_changelog.sh",
          "type": "blob",
          "size": 0.052734375,
          "content": "github_changelog_generator -u MisterTea -p EternalTCP\n"
        },
        {
          "name": "make_rpm_changelog.sh",
          "type": "blob",
          "size": 0.0927734375,
          "content": "git log --format=\"* %cd %aN%n- (%h) %s%d%n\" --date=local | gsed -r 's/[0-9]+:[0-9]+:[0-9]+ //'\n"
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "rc.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.798828125,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ],\n  \"includeForks\": true,\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"automerge\": true,\n    \"automergeType\": \"pr\",\n    \"platformAutomerge\": true\n  },\n  \"platformAutomerge\": true,\n  \"packageRules\": [\n    {\n      \"description\": \"Automerge non-major updates\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ],\n      \"enabled\": true,\n      \"automerge\": true,\n      \"automergeType\": \"pr\",\n      \"platformAutomerge\": true\n    },\n    {\n      \"matchDepTypes\": [\n        \"devDependencies\"\n      ],\n      \"matchPackagePatterns\": [\n        \"lint\",\n        \"prettier\"\n      ],\n      \"enabled\": true,\n      \"automerge\": true,\n      \"automergeType\": \"pr\",\n      \"platformAutomerge\": true\n    }\n  ]\n}"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "systemctl",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.271484375,
          "content": "{\n  \"name\": \"eternal-terminal\",\n  \"version-string\": \"6.0.13\",\n  \"dependencies\": [\n    \"zlib\",\n    \"openssl\",\n    \"protobuf\",\n    \"libsodium\",\n    \"sentry-native\",\n    \"nlohmann-json\",\n    \"simpleini\",\n    \"platform-folders\",\n    \"cpp-httplib\",\n    \"cxxopts\",\n    \"catch2\"\n  ]\n}\n"
        }
      ]
    }
  ]
}