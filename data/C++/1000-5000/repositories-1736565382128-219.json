{
  "metadata": {
    "timestamp": 1736565382128,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JonathanSalwan/Triton",
      "stars": 3591,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".build_number",
          "type": "blob",
          "size": 0.0048828125,
          "content": "1597\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1767578125,
          "content": "coverage:\n  range: 70..90\n  round: nearest\n  precision: 2\n\nignore:\n  - \"**/examples/cpp\" # ignore folders and all its contents\n  - \"**/*.spec\"       # glob accepted\n\ncomment: false\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0927734375,
          "content": "root = true\r\n# C++\r\n[*.{h,hpp,c,cpp}]\r\nindent_style = space\r\nindent_size = tab\r\ntab_width = 2\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2255859375,
          "content": "*.db\n*.i64\n*.id0\n*.id1\n*.id2\n*.nam\n*.o\n*.pyc\n*.swp\n*.til\n.DS_Store\n.gdb_history\nCMakeLists.txt.user\nCMakeUserPresets.json\nbuild*/*\npeda-session*\npin.log\npintool.log\nprivate/*\n*.so\n.cache\n.vscode\n.venv\ndist/\n*.egg-info/\nwheelhouse/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.6376953125,
          "content": "##\n##  Copyright (C) - Triton\n##\n##  This program is under the terms of the BSD License.\n##\n\n##################################################################################### CMake libtriton\n\ncmake_minimum_required(VERSION 3.20)\n\nset(TRITON_ROOT \"${CMAKE_CURRENT_LIST_DIR}\")\n\n# Read the build version\nfile(READ ${TRITON_ROOT}/.build_number BUILD_NUMBER)\nset(VERSION_MAJOR 1)\nset(VERSION_MINOR 0)\nset(VERSION_BUILD ${BUILD_NUMBER})\n\n# Used for write_basic_package_version_file()\nproject(triton VERSION ${VERSION_MAJOR}.${VERSION_MINOR})\n\n# Define cmake options\ninclude(CMakeDependentOption)\n\noption(ASAN                              \"Enable the ASAN linking\"                         OFF)\noption(BITWUZLA_INTERFACE                \"Use Bitwuzla as SMT solver\"                      OFF)\noption(BUILD_SHARED_LIBS                 \"Build a shared library\"                          ON)\noption(GCOV                              \"Enable code coverage\"                            OFF)\noption(LLVM_INTERFACE                    \"Use LLVM for lifting\"                            OFF)\noption(MSVC_STATIC                       \"Use statically-linked runtime library\"           OFF)\noption(Z3_INTERFACE                      \"Use Z3 as SMT solver\"                            ON)\noption(BOOST_INTERFACE                   \"Use Boost as multiprecision library\"             OFF)\noption(PYTHON_BINDINGS_AUTOCOMPLETE      \"Generate an autocomplete stub file\"              OFF)\n\n# Define cmake dependent options\ncmake_dependent_option(BUILD_EXAMPLES   \"Build the examples\"            ON  BUILD_SHARED_LIBS OFF)\ncmake_dependent_option(ENABLE_TEST      \"Do testing\"                    ON  BUILD_SHARED_LIBS OFF)\ncmake_dependent_option(PYTHON_BINDINGS  \"Enable Python bindings\"        ON  BUILD_SHARED_LIBS OFF)\n\n#Enable ctest\ninclude(CTest)\nadd_custom_target(check\n    COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=\"${CMAKE_CURRENT_BINARY_DIR}/src/libtriton\" ctest --output-on-failure\n    DEPENDS triton\n)\n\nif(PYTHON_BINDINGS)\n    message(STATUS \"Compiling with Python bindings\")\n\n    if(NOT PYTHON_VERSION AND NOT PYTHON_EXECUTABLE)\n        # On Windows, python3 points to the Windows Store version of Python.\n        # Installations from the Python website do not contain python3.exe\n        if(WIN32)\n            set(PYTHON_NAMES python python3)\n        else()\n            set(PYTHON_NAMES python3 python)\n        endif()\n        # Find the python version the user has in the PATH\n        # This prevents an issue where an unexpected python version is used\n        # (eg the system/homebrew python in a virtual environment)\n        find_program(PYTHON_EXECUTABLE\n            NAMES ${PYTHON_NAMES}\n            NO_PACKAGE_ROOT_PATH\n            NO_CMAKE_PATH\n            NO_CMAKE_ENVIRONMENT_PATH\n            NO_CMAKE_SYSTEM_PATH\n            NO_CMAKE_INSTALL_PREFIX\n            REQUIRED\n        )\n    endif()\n\n    if(PYTHON_EXECUTABLE)\n        # Make sure the specified python is not fully broken\n        execute_process(COMMAND ${PYTHON_EXECUTABLE} --version\n            RESULT_VARIABLE PYTHON_RESULT\n            OUTPUT_QUIET\n        )\n        if(NOT PYTHON_RESULT EQUAL 0)\n            message(FATAL_ERROR \"Broken python: ${PYTHON_EXECUTABLE}\")\n        endif()\n    endif()\n\n    # Set the hints for the Python3 package\n    # Reference: https://cmake.org/cmake/help/latest/module/FindPython3.html#hints\n    # The PYTHON_XXX variables are not used by FindPython3, but they are translated\n    # for backwards compatibility with previous Triton versions\n    set(Python3_EXECUTABLE \"${PYTHON_EXECUTABLE}\")\n    if(PYTHON_LIBRARY)\n        set(Python3_LIBRARY \"${PYTHON_LIBRARY}\")\n    elseif(PYTHON_LIBRARIES)\n        set(Python3_LIBRARY \"${PYTHON_LIBRARIES}\")\n    endif()\n    if(PYTHON_INCLUDE_DIRS)\n        set(Python3_INCLUDE_DIR \"${PYTHON_INCLUDE_DIRS}\")\n    endif()\n    set(Python3_FIND_VIRTUALENV \"FIRST\")\n\n    find_package(Python3 ${PYTHON_VERSION} COMPONENTS Interpreter Development REQUIRED)\n    message(STATUS \"Python3 includes: ${Python3_INCLUDE_DIRS}\")\n    message(STATUS \"Python3 libraries: ${Python3_LIBRARIES}\")\n\n    # For backwards compatibility with existing CMake\n    set(PYTHON_EXECUTABLE \"${Python3_EXECUTABLE}\")\n\n    set(PYTHONPATH_CMD ${CMAKE_COMMAND} -E env PYTHONPATH=$<TARGET_FILE_DIR:triton>/)\n    add_custom_target(test-python\n        COMMAND ${PYTHONPATH_CMD} ${PYTHON_EXECUTABLE} -m unittest discover ${TRITON_ROOT}/src/testers/unittests\n        DEPENDS python-triton\n    )\n\n    add_test(NAME test-python\n        COMMAND ${PYTHON_EXECUTABLE} -m unittest discover ${triton_SOURCE_DIR}/src/testers/unittests\n    )\n    set_property(TEST test-python\n        PROPERTY ENVIRONMENT \"PYTHONPATH=$<TARGET_FILE_DIR:triton>/\"\n    )\nelse()\n    add_custom_target(test-python\n        COMMAND echo \"No python test as python support is disabled\"\n    )\nendif()\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\" AND GCOV)\n    message(STATUS \"Compiled with GCOV\")\n    add_custom_target(gcov-test\n        COMMAND lcov --zerocounters --directory $<TARGET_FILE_DIR:triton>\n        COMMAND lcov --capture --initial --directory $<TARGET_FILE_DIR:triton> --output-file app\n        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target test-python\n        COMMAND ctest --output-on-failure\n        COMMAND lcov --no-checksum --directory $<TARGET_FILE_DIR:triton> --capture --output-file coverage.info\n        COMMAND lcov --ignore-errors unused --remove coverage.info '/usr*' --remove coverage.info 'pintools*' --remove coverage.info 'examples*' -o coverage.info\n        COMMAND genhtml coverage.info -o coverage\n        COMMAND ${CMAKE_COMMAND} -E echo \"-- Report generated in ${CMAKE_CURRENT_BINARY_DIR}/coverage/index.html\"\n    )\n    add_dependencies(gcov-test triton)\n    add_dependencies(check gcov-test)\n    add_compile_options(--coverage)\n    add_link_options(--coverage)\nendif()\n\n# Specific OSX POLICY\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    if(POLICY CMP0025)\n        cmake_policy(SET CMP0025 NEW) # report Apple's Clang as just Clang\n    endif()\n    if(POLICY CMP0042)\n        cmake_policy(SET CMP0042 NEW) # MACOSX_RPATH\n    endif()\nendif()\n\n# Custom cmake search\nlist(APPEND CMAKE_MODULE_PATH \"${TRITON_ROOT}/CMakeModules/\")\n\n# Find Z3\nif(Z3_INTERFACE)\n    message(STATUS \"Compiling with Z3 SMT solver\")\n    find_package(Z3 REQUIRED)\n    message(STATUS \"Z3 version: ${Z3_VERSION}\")\n    if(TARGET z3::libz3)\n        link_libraries(z3::libz3)\n    elseif(DEFINED Z3_INCLUDE_DIRS)\n        include_directories(${Z3_INCLUDE_DIRS})\n    else()\n        message(FATAL_ERROR \"Unexpected Z3 package search outcome: neither target z3::libz3 not variable Z3_INCLUDE_DIRS exists.\")\n    endif()\n    set(TRITON_Z3_INTERFACE ON)\nendif()\n\n# Find bitwuzla\nif(BITWUZLA_INTERFACE)\n    message(STATUS \"Compiling with Bitwuzla SMT solver\")\n    find_package(BITWUZLA REQUIRED)\n    if(TARGET Bitwuzla::bitwuzla)\n        link_libraries(Bitwuzla::bitwuzla)\n    elseif(DEFINED BITWUZLA_INCLUDE_DIRS)\n        include_directories(${BITWUZLA_INCLUDE_DIRS})\n    else()\n        message(FATAL_ERROR \"Unexpected Bitwuzla package search outcome: neither target Bitwuzla::bitwuzla not variable BITWUZLA_INCLUDE_DIRS exists.\")\n    endif()\n    set(TRITON_BITWUZLA_INTERFACE ON)\nendif()\n\n# Find LLVM\nif(LLVM_INTERFACE)\n    message(STATUS \"Compiling with LLVM\")\n    if(NOT DEFINED LLVM_INCLUDE_DIRS)\n        find_package(LLVM REQUIRED CONFIG)\n        message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\n        message(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\n        if(LLVM_LINK_LLVM_DYLIB)\n            set(LLVM_LIBRARIES LLVM)\n        else()\n            set(LLVM_LIBRARIES ${LLVM_AVAILABLE_LIBS})\n        endif()\n    endif()\n    include_directories(${LLVM_INCLUDE_DIRS})\n    set(TRITON_LLVM_INTERFACE ON)\nendif()\n\n# Find Capstone\nmessage(STATUS \"Compiling with Capstone\")\nfind_package(CAPSTONE 5 REQUIRED)\nmessage(STATUS \"CAPSTONE version: ${CAPSTONE_VERSION}\")\nif(TARGET capstone::capstone)\n    link_libraries(capstone::capstone)\nelseif(DEFINED CAPSTONE_INCLUDE_DIRS)\n    include_directories(${CAPSTONE_INCLUDE_DIRS})\nelse()\n    message(FATAL_ERROR \"Unexpected capstone package search outcome: neither target capstone::capstone not variable CAPSTONE_INCLUDE_DIRS exists.\")\nendif()\n\n# Find boost\nif(BOOST_INTERFACE)\n  message(STATUS \"Compiling with Boost headers\")\n  find_package(Boost 1.55.0)\n  if (Boost_FOUND)\n    include_directories(\"${Boost_INCLUDE_DIRS}\")\n    set(TRITON_BOOST_INTERFACE ON)\n  else()\n    message(STATUS \"Boost headers not found, compiling with wide-integer headers\")\n    set(TRITON_BOOST_INTERFACE OFF)\n  endif()\nelse()\n  message(STATUS \"Compiling with wide-integer headers\")\n  set(TRITON_BOOST_INTERFACE OFF)\nendif()\n\nif(PYTHON_BINDINGS_AUTOCOMPLETE)\n    message(STATUS \"Compiling with Python autocomplete stub\")\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(doc)\n"
        },
        {
          "name": "CMakeModules",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 3.134765625,
          "content": "{\n  \"version\": 3,\n  \"configurePresets\": [\n    {\n      \"name\": \"locations-base\",\n      \"hidden\": true,\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"installDir\": \"${sourceDir}/out/install/${presetName}\"\n    },\n    {\n      \"name\": \"vcpkg-base\",\n      \"hidden\": true,\n      \"toolchainFile\": \"$penv{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n      \"cacheVariables\": {\n        \"CMAKE_FIND_PACKAGE_PREFER_CONFIG\": \"ON\"\n      }\n    },\n    {\n      \"name\": \"warnings-base\",\n      \"hidden\": true,\n      \"warnings\": {\n        \"dev\": true,\n        \"deprecated\": true,\n        \"systemVars\": true\n      },\n      \"errors\": {\n        \"dev\": true,\n        \"deprecated\": false\n      }\n    },\n    {\n      \"name\": \"ninja\",\n      \"hidden\": true,\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"CMAKE_DEFAULT_BUILD_TYPE\": \"Debug\"\n      }\n    },\n    {\n      \"name\": \"x64\",\n      \"hidden\": true,\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"linux-x64\",\n      \"inherits\": [ \"ninja\", \"x64\", \"locations-base\", \"vcpkg-base\", \"warnings-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Linux\"},\n      \"cacheVariables\": {\n        \"CMAKE_C_COMPILER\": \"gcc\",\n        \"CMAKE_CXX_COMPILER\": \"g++\"\n      }\n    },\n    {\n      \"name\": \"macos-x64\",\n      \"inherits\": [ \"ninja\", \"x64\", \"locations-base\", \"vcpkg-base\", \"warnings-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Darwin\"}\n    },\n    {\n      \"name\": \"windows-x64\",\n      \"inherits\": [ \"ninja\", \"x64\", \"locations-base\", \"vcpkg-base\", \"warnings-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Windows\"}\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"build-linux-x64\",\n      \"configurePreset\": \"linux-x64\",\n      \"nativeToolOptions\": [ \"-v\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Linux\"}\n    },\n    {\n      \"name\": \"build-macos-x64\",\n      \"configurePreset\": \"macos-x64\",\n      \"nativeToolOptions\": [ \"-v\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Darwin\"}\n    },\n    {\n      \"name\": \"build-windows-x64\",\n      \"configurePreset\": \"windows-x64\",\n      \"nativeToolOptions\": [ \"-v\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Windows\"}\n    }\n  ],\n  \"testPresets\": [\n    {\n      \"name\": \"test-base\",\n      \"hidden\": true,\n      \"output\": {\n        \"outputOnFailure\": true\n      },\n      \"execution\": {\n        \"noTestsAction\": \"error\"\n      }\n    },\n    {\n      \"name\": \"test-linux-x64\",\n      \"configurePreset\": \"linux-x64\",\n      \"inherits\": [ \"test-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Linux\"}\n    },\n    {\n      \"name\": \"test-macos-x64\",\n      \"configurePreset\": \"macos-x64\",\n      \"inherits\": [ \"test-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Darwin\"}\n    },\n    {\n      \"name\": \"test-windows-x64\",\n      \"configurePreset\": \"windows-x64\",\n      \"inherits\": [ \"test-base\" ],\n      \"condition\": {\"type\": \"equals\", \"lhs\": \"${hostSystemName}\", \"rhs\": \"Windows\"}\n    }\n  ]\n}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.388671875,
          "content": "FROM --platform=linux/amd64 ubuntu:20.04\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY . /Triton\n\n# libboost >= 1.68\n# libpython >= 3.6\n# llvm >= 12\n# cmake >= 3.20\nRUN apt update && apt upgrade -y && apt install -y build-essential clang curl git libboost-all-dev libgmp-dev libpython3-dev libpython3-stdlib llvm-12 llvm-12-dev python3-pip tar ninja-build pkg-config && apt-get clean && pip install --upgrade pip && pip3 install Cython lief cmake meson\n\n# libcapstone >= 5.0.x\nRUN cd /tmp && \\\n    curl -o cap.tgz -L https://github.com/aquynh/capstone/archive/5.0.1.tar.gz && \\\n    tar xvf cap.tgz && cd capstone-5.0.1/ && CAPSTONE_ARCHS=\"arm aarch64 riscv x86\" ./make.sh && \\\n    make install && rm -rf /tmp/cap* \\\n    && ln -s /usr/lib/libcapstone.so.5 /usr/lib/x86_64-linux-gnu/libcapstone.so\n\n# libbitwuzla >= 0.4.0\nRUN cd /tmp && \\\n    git clone https://github.com/bitwuzla/bitwuzla.git && \\\n    cd bitwuzla && \\\n    git checkout -b 0.4.0 0.4.0 && \\\n    python3 ./configure.py --shared && \\\n    cd build && \\\n    ninja install && \\\n    ldconfig\n\n# To test pre-releases 'pip install' the corresponding .whl from https://github.com/Z3Prover/z3/releases/tag/Nightly\n# libz3 >= 4.6.0\nRUN pip3 install z3-solver==4.8.14\n\nRUN PYV=`python3 -c \"import platform;print(platform.python_version()[:3])\"` && \\\n    # Triton (LLVM for lifting; z3 or bitwuzla as SMT solver)\n    cd /Triton && mkdir /tmp/triton-build && cd /tmp/triton-build && cmake -DLLVM_INTERFACE=ON -DCMAKE_PREFIX_PATH=$(/usr/lib/llvm-12/bin/llvm-config --prefix) -DZ3_INTERFACE=ON -DZ3_INCLUDE_DIRS=/usr/local/lib/python$PYV/dist-packages/z3/include/ -DZ3_LIBRARIES=/usr/local/lib/python$PYV/dist-packages/z3/lib/libz3.so -DBITWUZLA_INTERFACE=ON  -DBITWUZLA_INCLUDE_DIRS=/usr/local/include -DBITWUZLA_LIBRARIES=/usr/local/lib/x86_64-linux-gnu/libbitwuzla.so /Triton && make -j$(nproc) && make install\n\nRUN PYV=`python3 -c \"import platform;print(platform.python_version()[:3])\"` && \\\n    PYP=\"/usr/lib/python$PYV/site-packages\" && \\\n    echo export PYTHONPATH=\"$PYP:\\$PYTHONPATH\" >> /etc/bash.bashrc && \\\n    python3 -c \"import z3; print('Z3 version:', z3.get_version_string())\" && \\\n    # Next command fails if Triton has no z3 or bitwuzla support\n    PYTHONPATH=\"$PYP\" python3 -c \"from triton import *; ctx=TritonContext(ARCH.X86_64); ctx.setSolver(SOLVER.Z3); ctx.setSolver(SOLVER.BITWUZLA);\"\n\n# Dependencies required for testing\nRUN pip install unicorn==2.0.0 lief\n\nENTRYPOINT /bin/bash\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.1220703125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright:\n\n        * Jonathan Salwan (University of Bordeaux, Quarkslab)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.9287109375,
          "content": "<p align=\"center\"><img width=\"50%\" src=\"https://triton-library.github.io/files/triton2.png\"/></p>\n\n**Triton** is a dynamic binary analysis library. It provides internal components that allow you to build your program analysis tools,\nautomate reverse engineering, perform software verification or just emulate code.\n\n* Dynamic **symbolic** execution\n* Dynamic **taint** analysis\n* AST representation of the **x86**, **x86-64**, **ARM32**, **AArch64** and **RISC-V 32/64**  ISA semantic\n* Expressions **synthesis**\n* SMT **simplification** passes\n* **Lifting** to **LLVM** as well as **Z3** and back\n* **SMT solver** interface to **Z3** and **Bitwuzla**\n* **C++** and **Python** API\n\n<p align=\"center\">\n    <img src=\"https://triton-library.github.io/files/triton_v09_architecture.svg\" width=\"80%\"/></br>\n    <img src=\"https://triton-library.github.io/files/triton_multi_os.png\"/>\n</p>\n\nAs **Triton** is a kind of a part-time project, please, **don't blame us** if it is not fully reliable. [Open issues](https://github.com/JonathanSalwan/Triton/issues) or\n[pull requests](https://github.com/JonathanSalwan/Triton/pulls) are always better than trolling =). However, you can follow the development on twitter\n[@qb_triton](https://twitter.com/qb_triton).\n\n<p align=\"center\">\n  <a href=\"https://github.com/JonathanSalwan/Triton/actions/workflows/linux.yml/\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/JonathanSalwan/Triton/linux.yml?branch=master&label=Linux&logo=linux&logoColor=white\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/JonathanSalwan/Triton/actions/workflows/osx.yml/\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/JonathanSalwan/Triton/osx.yml?branch=master&label=OSX&logo=apple\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/JonathanSalwan/Triton/actions/workflows/vcpkg.yml/\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/JonathanSalwan/Triton/vcpkg.yml?branch=master&label=Windows&logo=windows&logoColor=white\">\n  </a>\n  &nbsp;\n  <a href=\"https://codecov.io/gh/JonathanSalwan/Triton\">\n    <img src=\"https://codecov.io/gh/JonathanSalwan/Triton/branch/master/graph/badge.svg\" alt=\"Codecov\" />\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/JonathanSalwan/Triton/releases\">\n    <img src=\"https://img.shields.io/github/v/release/JonathanSalwan/Triton?logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/jonathansalwan/Triton/tree/dev-v1.0\">\n    <img src=\"https://img.shields.io/static/v1?label=dev&message=v1.0&logo=github&color=blue\">\n  </a>\n  &nbsp;\n  <a href=\"https://twitter.com/qb_triton\">\n   <img src=\"https://img.shields.io/static/v1?color=1da1f2&label=Follow&message=2K&logo=twitter&logoColor=white&style=square\">\n  </a>\n</p>\n\n# Quick start\n\n* [Installation](#install)\n* [Python API](https://triton-library.github.io/documentation/doxygen/py_triton_page.html)\n* [C++ API](https://triton-library.github.io/documentation/doxygen/annotated.html)\n* [Python Examples](https://github.com/JonathanSalwan/Triton/tree/master/src/examples/python)\n* [They already used Triton](#they-already-used-triton)\n\n## Getting started\n\n```python\nfrom triton import *\n\n>>> # Create the Triton context with a defined architecture\n>>> ctx = TritonContext(ARCH.X86_64)\n\n>>> # Define concrete values (optional)\n>>> ctx.setConcreteRegisterValue(ctx.registers.rip, 0x40000)\n\n>>> # Symbolize data (optional)\n>>> ctx.symbolizeRegister(ctx.registers.rax, 'my_rax')\n\n>>> # Execute instructions\n>>> ctx.processing(Instruction(b\"\\x48\\x35\\x34\\x12\\x00\\x00\")) # xor rax, 0x1234\n>>> ctx.processing(Instruction(b\"\\x48\\x89\\xc1\")) # mov rcx, rax\n\n>>> # Get the symbolic expression\n>>> rcx_expr = ctx.getSymbolicRegister(ctx.registers.rcx)\n>>> print(rcx_expr)\n(define-fun ref!8 () (_ BitVec 64) ref!1) ; MOV operation - 0x40006: mov rcx, rax\n\n>>> # Solve constraint\n>>> ctx.getModel(rcx_expr.getAst() == 0xdead)\n{0: my_rax:64 = 0xcc99}\n\n>>> # 0xcc99 XOR 0x1234 is indeed equal to 0xdead\n>>> hex(0xcc99 ^ 0x1234)\n'0xdead'\n```\n\n\n## Install\n\nTriton relies on the following dependencies:\n\n```\n* libcapstone                >= 5.0.x   https://github.com/capstone-engine/capstone\n* libboost      (optional)   >= 1.68\n* libpython     (optional)   >= 3.6\n* libz3         (optional)   >= 4.6.0   https://github.com/Z3Prover/z3\n* libbitwuzla   (optional)   >= 0.4.x   https://github.com/bitwuzla/bitwuzla\n* llvm          (optional)   >= 12\n```\n\n\n### Linux and MacOS\n\n```console\n$ git clone https://github.com/JonathanSalwan/Triton\n$ cd Triton\n$ mkdir build ; cd build\n$ cmake ..\n$ make -j3\n$ sudo make install\n```\n\nBy default, LLVM and Bitwuzla are not compiled. If you want to enjoy the full power of Triton, the cmake compile is:\n\n```console\n$ cmake -DLLVM_INTERFACE=ON -DCMAKE_PREFIX_PATH=$(llvm-config --prefix) -DBITWUZLA_INTERFACE=ON ..\n```\n\n#### MacOS M1 Note:\n\nIn case if you get compilation errors like:\n\n```\nCould NOT find PythonLibs (missing: PYTHON_LIBRARIES PYTHON_INCLUDE_DIRS)\n```\n\nTry to specify `PYTHON_EXECUTABLE`, `PYTHON_LIBRARIES` and `PYTHON_INCLUDE_DIRS` for your specific Python version:\n\n```console\ncmake -DCMAKE_INSTALL_PREFIX=/opt/homebrew/ \\\n      -DPYTHON_EXECUTABLE=/opt/homebrew/bin/python3 \\\n      -DPYTHON_LIBRARIES=/opt/homebrew/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/libpython3.10.dylib \\\n      -DPYTHON_INCLUDE_DIRS=/opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10/include/python3.10/ \\\n      ..\n```\n\nThis information you can get out from this snippet:\n\n```python\nfrom sysconfig import get_paths\ninfo = get_paths()\nprint(info)\n```\n\n### Windows\n\nYou can use cmake to generate the .sln file of libTriton.\n\n```console\n> git clone https://github.com/JonathanSalwan/Triton.git\n> cd Triton\n> mkdir build\n> cd build\n> cmake -G \"Visual Studio 14 2015 Win64\" \\\n  -DBOOST_ROOT=\"C:/Users/jonathan/Works/Tools/boost_1_61_0\" \\\n  -DPYTHON_INCLUDE_DIRS=\"C:/Python36/include\" \\\n  -DPYTHON_LIBRARIES=\"C:/Python36/libs/python36.lib\" \\\n  -DZ3_INCLUDE_DIRS=\"C:/Users/jonathan/Works/Tools/z3-4.6.0-x64-win/include\" \\\n  -DZ3_LIBRARIES=\"C:/Users/jonathan/Works/Tools/z3-4.6.0-x64-win/bin/libz3.lib\" \\\n  -DCAPSTONE_INCLUDE_DIRS=\"C:/Users/jonathan/Works/Tools/capstone-5.0.1-win64/include\" \\\n  -DCAPSTONE_LIBRARIES=\"C:/Users/jonathan/Works/Tools/capstone-5.0.1-win64/capstone.lib\" ..\n```\n\nHowever, if you prefer to directly download the precompiled library, check out our AppVeyor's [artefacts](https://ci.appveyor.com/project/JonathanSalwan/triton/history).\nNote that if you use AppVeyor's artefacts, you probably have to install the [Visual C++ Redistributable](https://www.microsoft.com/en-US/download/details.aspx?id=30679)\npackages for Visual Studio 2012.\n\n\n### Installing from vcpkg\n\nThe Triton port in vcpkg is kept up to date by Microsoft team members and community contributors.\nThe url of vcpkg is: https://github.com/Microsoft/vcpkg. You can download and install Triton using\nthe vcpkg dependency manager:\n\n```console\n$ git clone https://github.com/Microsoft/vcpkg.git\n$ cd vcpkg\n$ ./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n$ ./vcpkg integrate install\n$ ./vcpkg install triton\n```\n\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n\n# Contributors\n\n* [**Alberto Garcia Illera**](https://twitter.com/algillera) - Cruise Automation\n* [**Alexey Vishnyakov**](https://vishnya.xyz/) - ISP RAS\n* [**Black Binary**](https://github.com/black-binary) - n/a\n* [**Christian Heitman**](https://github.com/cnheitman) - Quarkslab\n* [**Daniil Kuts**](https://github.com/apach301) - ISP RAS\n* [**Jessy Campos**](https://github.com/ek0) - n/a\n* [**Matteo F.**](https://twitter.com/fvrmatteo) - n/a\n* [**Pierrick Brunet**](https://github.com/pbrunet) - Quarkslab\n* [**PixelRick**](https://github.com/PixelRick) - n/a\n* [**Romain Thomas**](https://twitter.com/rh0main) - Quarkslab\n* [**And many more**](https://github.com/JonathanSalwan/Triton/graphs/contributors)\n\n\n## They already used Triton\n\n### Tools\n\n* [Exrop](https://github.com/d4em0n/exrop): Automatic ROPChain Generation.\n* [Pimp](https://github.com/kamou/pimp): Triton based R2 plugin for concolic execution and total control.\n* [Ponce](https://github.com/illera88/Ponce): IDA 2016 plugin contest winner! Symbolic Execution just one-click away!\n* [QSynthesis](https://github.com/quarkslab/qsynthesis): Greybox Synthesizer geared for deobfuscation of assembly instructions.\n* [TritonDSE](https://github.com/quarkslab/tritondse): Triton-based DSE library with loading and exploration capabilities.\n* [Titan](https://github.com/archercreat/titan): Titan is a VMProtect devirtualizer using Triton.\n\n### Papers and conference\n\n<ul dir=\"auto\">\n<li>\n<b>Sydr-Fuzz: Continuous Hybrid Fuzzing and Dynamic Analysis for Security Development Lifecycle</b><br />\n <b>Talk at</b>: Ivannikov ISP RAS Open Conference, Moscow, Russia, 2022. [<a href=\"publications/ISPOPEN2022-sydr-fuzz.pdf\">paper</a>] [<a href=\"publications/ISPOPEN2022-slide-sydr-fuzz-vishnyakov.pdf\">slide</a>]<br />\n <b>Authors</b>: Vishnyakov A., Kuts D., Logunova V., Parygina D., Kobrin E., Savidov G., Fedotov A.<br />\n <b>Abstract</b>: <em>Nowadays automated dynamic analysis frameworks for\n continuous testing are in high demand to ensure software safety and satisfy the\n security development lifecycle (SDL) requirements. The security bug hunting\n efficiency of cutting-edge hybrid fuzzing techniques outperforms widely\n utilized coverage-guided fuzzing. We propose an enhanced dynamic analysis\n pipeline to leverage productivity of automated bug detection based on hybrid\n fuzzing. We implement the proposed pipeline in the continuous fuzzing toolset\n Sydr-Fuzz which is powered by hybrid fuzzing orchestrator, integrating our DSE\n tool Sydr with libFuzzer and AFL++. Sydr-Fuzz also incorporates security\n predicate checkers, crash triaging tool Casr, and utilities for corpus\n minimization and coverage gathering. The benchmarking of our hybrid fuzzer\n against alternative state-of-the-art solutions demonstrates its superiority\n over coverage-guided fuzzers while remaining on the same level with advanced\n hybrid fuzzers. Furthermore, we approve the relevance of our approach by\n discovering 85 new real-world software flaws within the OSS-Sydr-Fuzz project.\n Finally, we open Casr source code to the community to facilitate examination of\n the existing crashes.</em>\n</li><br/>\n<li>\n<b>Strong Optimistic Solving for Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov Memorial Workshop, Kazan, Russia, 2022. [<a href=\"publications/IVMEM2022-strong-optimistic-parygina.pdf\">paper</a>] [<a href=\"publications/IVMEM2022-slide-strong-optimistic-parygina.pdf\">slide</a>]<br />\n <b>Authors</b>: Parygina D., Vishnyakov A., Fedotov A.<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) is an effective method\n for automated program testing and bug detection. It is increasing the code\n coverage by the complex branches exploration during hybrid fuzzing. DSE tools\n invert the branches along some execution path and help fuzzer examine\n previously unavailable program parts. DSE often faces over- and underconstraint\n problems. The first one leads to significant analysis complication while the\n second one causes inaccurate symbolic execution.\n We propose strong optimistic solving method that eliminates irrelevant path\n predicate constraints for target branch inversion. We eliminate such symbolic\n constraints that the target branch is not control dependent on. Moreover, we\n separately handle symbolic branches that have nested control transfer\n instructions that pass control beyond the parent branch scope, e.g. return,\n goto, break, etc. We implement the proposed method in our dynamic symbolic\n execution tool Sydr.\n We evaluate the strong optimistic strategy, the optimistic strategy that\n contains only the last constraint negation, and their combination. The results\n show that the strategies combination helps increase either the code coverage or\n the average number of correctly inverted branches per one minute. It is optimal\n to apply both strategies together in contrast with other configurations.</em>\n</li><br/>\n<li>\n<b>Greybox Program Synthesis: A New Approach to Attack Dataflow Obfuscation</b><br />\n <b>Talk at</b>: Blackhat USA, Las Vegas, Nevada, 2021. [<a href=\"publications/BHUSA2021-David-Greybox-Program-Synthesis.pdf\">slide</a>]<br />\n <b>Authors</b>: Robin David<br />\n <b>Abstract</b>: <em>This talk presents the latest advances in program synthesis applied for deobfuscation. It aims at demystifying this analysis technique\n by showing how it can be put into action on obfuscation. Especially the implementation Qsynthesis released for this talk shows a complete end-to-end workflow\n to deobfuscate assembly instructions back in optimized (deobfuscated) instructions reassembled back in the binary.</em>\n</li><br/>\n<li>\n<b>From source code to crash test-case through software testing automation</b><br />\n <b>Talk at</b>: C&ESAR, Rennes, France, 2021. [<a href=\"publications/CESAR2021_robin-david-paper.pdf\">paper</a>] [<a href=\"publications/CESAR2021_robin-david-slide.pdf\">slide</a>]<br />\n <b>Authors</b>: Robin David, Jonathan Salwan, Justin Bourroux<br />\n <b>Abstract</b>: <em>This paper present an approach automating the software testing process from a source code to the dynamic testing of the compiled program.  More specifically, from a static\n analysis report indicating alerts on source lines it enables testing to cover these lines dynamically and opportunistically checking whether  whether or not they can trigger\n a crash. The result is a test corpus allowing to cover alerts and to trigger them if they happen to be true positives. This paper discuss the  methodology employed to track\n alerts down in the compiled binary, the testing engines selection process and the results obtained on a TCP/IP stack implementation for embedded  and IoT systems.</em>\n</li><br/>\n<li>\n<b>Symbolic Security Predicates: Hunt Program Weaknesses</b><br />\n <b>Talk at</b>: Ivannikov ISP RAS Open Conference, Moscow, Russia, 2021. [<a href=\"publications/ISPOPEN2021-security-predicates-vishnyakov.pdf\">paper</a>] [<a href=\"publications/ISPOPEN2021-slide-security-predicates-vishnyakov.pdf\">slide</a>]<br />\n <b>Authors</b>: A.Vishnyakov, V.Logunova, E.Kobrin, D.Kuts, D.Parygina, A.Fedotov<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) is a powerful method for\n path exploration during hybrid fuzzing and automatic bug detection. We propose\n security predicates to effectively detect undefined behavior and memory access\n violation errors. Initially, we symbolically execute program on paths that\n don’t trigger any errors (hybrid fuzzing may explore these paths). Then we\n construct a symbolic security predicate to verify some error condition. Thus, we\n may change the program data flow to entail null pointer dereference, division\n by zero, out-of-bounds access, or integer overflow weaknesses. Unlike static\n analysis, dynamic symbolic execution does not only report errors but also\n generates new input data to reproduce them. Furthermore, we introduce function\n semantics modeling for common C/C++ standard library functions. We aim to model\n the control flow inside a function with a single symbolic formula. This assists\n bug detection, speeds up path exploration, and overcomes overconstraints in\n path predicate. We implement the proposed techniques in our dynamic symbolic\n execution tool Sydr. Thus, we utilize powerful methods from Sydr such as path\n predicate slicing that eliminates irrelevant constraints.\n We present Juliet Dynamic to measure dynamic bug detection tools accuracy. The\n testing system also verifies that generated inputs trigger sanitizers. We\n evaluate Sydr accuracy for 11 CWEs from Juliet test suite. Sydr shows 95.59%\n overall accuracy. We make Sydr evaluation artifacts publicly available to\n facilitate results reproducibility.</em>\n</li><br/>\n<li>\n<b>Towards Symbolic Pointers Reasoning in Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov Memorial Workshop, Nizhny Novgorod, Russia, 2021. [<a href=\"publications/IVMEM2021-symbolic-pointers-kuts.pdf\">paper</a>] [<a href=\"publications/IVMEM2021-slide-symbolic-pointers-kuts.pdf\">slide</a>]<br />\n <b>Authors</b>: Daniil Kuts<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution is a widely used technique for\n automated software testing, designed for execution paths exploration and\n program errors detection. A hybrid approach has recently become widespread,\n when the main goal of symbolic execution is helping fuzzer increase program\n coverage. The more branches symbolic executor can invert, the more useful it is\n for fuzzer. A program control flow often depends on memory values, which are\n obtained by computing address indexes from user input. However, most DSE tools\n don't support such dependencies, so they miss some desired program branches. We\n implement symbolic addresses reasoning on memory reads in our dynamic symbolic\n execution tool Sydr. Possible memory access regions are determined by either\n analyzing memory address symbolic expressions, or binary searching with\n SMT-solver. We propose an enhanced linearization technique to model memory\n accesses. Different memory modeling methods are compared on the set of\n programs. Our evaluation shows that symbolic addresses handling allows to\n discover new symbolic branches and increase the program coverage.</em>\n</li><br/>\n<li>\n<b>QSynth: A Program Synthesis based Approach for Binary Code Deobfuscation</b><br />\n <b>Talk at</b>: BAR, San Diego, California, 2020. [<a href=\"publications/BAR2020-qsynth-robin-david.pdf\">paper</a>]<br />\n <b>Authors</b>: Robin David, Luigi Coniglio, Mariano Ceccato<br />\n <b>Abstract</b>: <em>We present a generic approach leveraging both DSE and program synthesis to successfully synthesize programs  obfuscated with Mixed-Boolean-Arithmetic, Data-Encoding\n or Virtualization. The synthesis algorithm proposed is an offline enumerate synthesis primitive guided by top-down breath-first search.  We shows its effectiveness\n against a state-of-the-art obfuscator and its scalability as it supersedes other similar approaches based on synthesis. We also show its effectiveness in presence of\n composite obfuscation (combination of various techniques). This ongoing work enlightens the effectiveness of synthesis to target certain kinds of obfuscations and\n opens the way to more robust algorithms and simplification strategies.</em>\n</li><br/>\n<li>\n<b>Sydr: Cutting Edge Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov ISP RAS Open Conference, Moscow, Russia, 2020. [<a href=\"publications/ISPRAS2020-sydr.pdf\">paper</a>] [<a href=\"publications/ISPOPEN2020-slide-sydr-vishnyakov.pdf\">slide</a>] [<a href=\"https://www.ispras.ru/conf/2020/video/compiler-technology-11-december.mp4#t=6021\">video</a>]<br />\n <b>Authors</b>: A.Vishnyakov, A.Fedotov, D.Kuts, A.Novikov, D.Parygina, E.Kobrin, V.Logunova, P.Belecky, S.Kurmangaleev<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) has enormous amount of applications in computer  security (fuzzing, vulnerability discovery, reverse-engineering, etc.). We propose\n several performance and accuracy improvements for dynamic symbolic execution.  Skipping non-symbolic instructions allows to build a path predicate 1.2--3.5 times faster.\n Symbolic engine simplifies formulas during symbolic execution. Path  predicate slicing eliminates irrelevant conjuncts from solver queries. We handle each jump table\n (switch statement) as multiple branches and describe the method for symbolic execution of multi-threaded programs. The proposed solutions were implemented in Sydr tool.\n Sydr performs inversion of branches in path predicate. Sydr combines DynamoRIO dynamic binary instrumentation tool with Triton symbolic engine.</em>\n</li><br/>\n<li>\n<b>Symbolic Deobfuscation: From Virtualized Code Back to the Original</b><br />\n <b>Talk at</b>: DIMVA, Paris-Saclay, France, 2018. [<a href=\"publications/DIMVA2018-deobfuscation-salwan-bardin-potet.pdf\">paper</a>] [<a href=\"publications/DIMVA2018-slide-deobfuscation-salwan-bardin-potet.pdf\">slide</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Sébastien Bardin, Marie-Laure Potet<br />\n <b>Abstract</b>: <em>Software protection has taken an important place during the last decade in order to protect legit software against reverse engineering or tampering.\n Virtualization is considered as one of the very best defenses against such attacks. We present a generic approach based on symbolic path exploration, taint and\n recompilation allowing to recover, from a virtualized code, a devirtualized code semantically identical to the original one and close in size. We define criteria\n and metrics to evaluate the relevance of the deobfuscated results in terms of correctness and precision. Finally we propose an open-source setup allowing to evaluate\n the proposed approach against several forms of virtualization.</em>\n</li><br/>\n<li>\n<b>Deobfuscation of VM based software protection </b><br />\n <b>Talk at</b>: SSTIC, Rennes, France, 2017. [<a href=\"publications/SSTIC2017-French-Article-desobfuscation_binaire_reconstruction_de_fonctions_virtualisees-salwan_potet_bardin.pdf\">french paper</a>] [<a href=\"publications/SSTIC2017_Deobfuscation_of_VM_based_software_protection.pdf\">english slide</a>] [<a href=\"https://static.sstic.org/videos2017/SSTIC_2017-06-07_P08.mp4\">french video</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Sébastien Bardin, Marie-Laure Potet<br />\n <b>Abstract</b>: <em>In this presentation we describe an approach which consists to automatically analyze virtual machine based software protections and which recompiles a new\n version of the binary without such protections. This automated approach relies on a symbolic execution guide by a taint analysis and some concretization policies, then\n on a binary rewriting using LLVM transition.</em>\n</li><br/>\n<li>\n<b>How Triton can help to reverse virtual machine based software protections</b><br />\n <b>Talk at</b>: CSAW SOS, NYC, New York, 2016. [<a href=\"publications/CSAW2016-SOS-Virtual-Machine-Deobfuscation-RThomas_JSalwan.pdf\">slide</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>The first part of the talk is going to be an introduction to the Triton framework to expose its components and to explain how they work together.\n Then, the second part will include demonstrations on how it's possible to reverse virtual machine based protections using taint analysis, symbolic execution, SMT\n simplifications and LLVM-IR optimizations.</em>\n</li><br/>\n<li>\n<b>Dynamic Binary Analysis and Obfuscated Codes</b><br  />\n <b>Talk at</b>: St'Hack, Bordeaux, France, 2016. [<a href=\"publications/StHack2016_Dynamic_Binary_Analysis_and_Obfuscated_Codes_RThomas_JSalwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>At this presentation we will talk about how a DBA (Dynamic Binary Analysis) may help a reverse engineer to reverse obfuscated code. We will first\n introduce some basic obfuscation techniques and then expose how it's possible to break some stuffs (using our open-source DBA framework - Triton) like detect opaque\n predicates, reconstruct CFG, find the original algorithm, isolate sensible data and many more... Then, we will conclude with a demo and few words about our future work.</em>\n</li><br/>\n<li>\n<b>How Triton may help to analyse obfuscated binaries</b><br  />\n <b>Publication at</b>: MISC magazine 82, 2015. [<a href=\"publications/MISC-82_French_Paper_How_Triton_may_help_to_analyse_obfuscated_binaries_RThomas_JSalwan.pdf\">french article</a>]<br  />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>Binary obfuscation is used to protect software's intellectual property. There exist different kinds of obfucation but roughly, it transforms a binary\n structure into another binary structure by preserving the same semantic. The aim of obfuscation is to ensure that the original information is \"drown\" in useless information\n that will make reverse engineering harder. In this article we will show how we can analyse an ofbuscated program and break some obfuscations using the Triton framework.</em>\n</li><br/>\n<li>\n<b>Triton: A Concolic Execution Framework</b><br  />\n <b>Talk at</b>: SSTIC, Rennes, France, 2015. [<a href=\"publications/SSTIC2015_French_Paper_Triton_Framework_dexecution_Concolique_FSaudel_JSalwan.pdf\">french paper</a>] [<a href=\"publications/SSTIC2015_English_slide_detailed_version_Triton_Concolic_Execution_FrameWork_FSaudel_JSalwan.pdf\">detailed english slide</a>] <br />\n <b>Authors</b>: Jonathan Salwan, Florent Saudel<br />\n <b>Abstract</b>: <em>This talk is about the release of Triton, a concolic execution framework based on Pin. It provides components like a taint engine, a dynamic symbolic execution\n engine, a snapshot engine, translation of x64 instruction to SMT2, a Z3 interface to solve constraints and Python bindings. Based on these components, Triton offers the possibility\n to build tools for vulnerabilities research or reverse-engineering assistance.</em>\n</li><br/>\n<li>\n<b>Dynamic Behavior Analysis Using Binary Instrumentation</b><br  />\n <b>Talk at</b>: St'Hack, Bordeaux, France, 2015. [<a href=\"publications/StHack2015_Dynamic_Behavior_Analysis_using_Binary_Instrumentation_Jonathan_Salwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan<br />\n <b>Abstract</b>: <em>This talk can be considered like the part 2 of our talk at SecurityDay. In the previous part, we talked about how it was possible to cover a targeted function\n in memory using the DSE (Dynamic Symbolic Execution) approach. Cover a function (or its states) doesn't mean find all vulnerabilities, some vulnerability doesn't crashes the program.\n That's why we must implement specific analysis to find specific bugs. These analysis are based on the binary instrumentation and the runtime behavior analysis of the program. In this\n talk, we will see how it's possible to find these following kind of bugs : off-by-one, stack / heap overflow, use-after-free, format string and {write, read}-what-where.</em>\n</li><br/>\n<li>\n<b>Covering a function using a Dynamic Symbolic Execution approach</b><br  />\n <b>Talk at</b>: Security Day, Lille, France, 2015. [<a href=\"publications/SecurityDay2015_dynamic_symbolic_execution_Jonathan_Salwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan<br />\n <b>Abstract</b>: <em>This talk is about binary analysis and instrumentation. We will see how it's possible to target a specific function, snapshot the context memory/registers before the\n function, translate the instrumentation into an intermediate representation,apply a taint analysis based on this IR, build/keep formulas for a Dynamic Symbolic Execution (DSE), generate\n a concrete value to go through a specific path, restore the context memory/register and generate another concrete value to go through another path then repeat this operation until the\n target function is covered.</em>\n</li>\n</ul>\n\n\n## Cite Triton\n\n```latex\n@inproceedings{SSTIC2015-Saudel-Salwan,\n  author    = {Saudel, Florent and Salwan, Jonathan},\n  title     = {Triton: A Dynamic Symbolic Execution Framework},\n  booktitle = {Symposium sur la s{\\'{e}}curit{\\'{e}} des technologies de l'information\n               et des communications},\n  series    = {SSTIC},\n  pages     = {31--54},\n  address   = {Rennes, France},\n  month     = jun,\n  year      = {2015},\n}\n```\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "publications",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.69140625,
          "content": "##\n##  Copyright (C) - Triton\n##\n##  This program is under the terms of the Apache License 2.0.\n##\n\nimport os\nimport platform\nimport re\nimport subprocess\nimport sys\n\nfrom distutils.file_util import copy_file\nfrom distutils.version import LooseVersion\nfrom setuptools import Extension\nfrom setuptools import setup\nfrom setuptools.command.build_ext import build_ext\n\n\nVERSION_MAJOR = 1\nVERSION_MINOR = 0\nVERSION_PATCH = 0\n\nRELEASE_CANDIDATE = 4\n\nVERSION = f'{VERSION_MAJOR}.{VERSION_MINOR}.{VERSION_PATCH}' + \\\n            f'rc{RELEASE_CANDIDATE}' if RELEASE_CANDIDATE else ''\n\ndef is_cmake_true(value):\n    \"\"\"Check if CMake would parse the value as True or False. Might not be completely accurate.\n    Based on https://cmake.org/cmake/help/latest/command/if.html#basic-expressions\"\"\"\n    if(value in ['ON', 'YES', 'TRUE', 'Y']):\n        return True\n    try:\n        float(value)\n        if(int(value) == 0):\n            return False\n        return True\n    except:\n        return False\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n\n    def run(self):\n        ext = self.extensions[0]\n        self.build_extension(ext)\n        self.copy_extension_to_source(ext)\n        self.copy_autocomplete()\n\n\n    def build_extension(self, ext):\n        # Set platform-agnostric arguments.\n        cmake_args = [\n            # General arguments.\n            '-DPYTHON_EXECUTABLE=' + sys.executable,\n            '-DCMAKE_BUILD_TYPE=Release',\n        ]\n\n        # Interfaces can be defined using environment variables.\n        # Interfaces by default:\n        #\n        #   Z3_INTERFACE=On\n        #   LLVM_INTERFACE=Off\n        #   BITWUZLA_INTERFACE=Off\n        #   BOOST_INTERFACE=Off\n        #\n        for arg, value in [('Z3_INTERFACE', 'On'), ('LLVM_INTERFACE', 'Off'), ('BITWUZLA_INTERFACE', 'Off'), ('BOOST_INTERFACE', 'Off')]:\n            if os.getenv(arg):\n                cmake_args += [f'-D{arg}=' + os.getenv(arg)]\n            else:\n                cmake_args += [f'-D{arg}={value}']\n\n        build_args = []\n\n        env = os.environ.copy()\n        env['CXXFLAGS'] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(env.get('CXXFLAGS', ''), self.distribution.get_version())\n\n        # Set platform-specific arguments.\n        if platform.system() == \"Linux\":\n            build_args += ['--', '-j4']\n\n        elif platform.system() == \"Darwin\":\n            build_args += ['--', '-j4']\n\n        elif platform.system() == \"Windows\":\n            cmake_args += [\n                '-G Visual Studio 17 2022',\n            ]\n            build_args += ['--', '/m:4']\n\n        else:\n            raise Exception(f'Platform not supported: {platform.system()}')\n\n        # Custom Python paths.\n        if os.getenv('PYTHON_LIBRARIES'):\n            cmake_args += ['-DPYTHON_LIBRARIES=' + os.getenv('PYTHON_LIBRARIES')]\n\n        if os.getenv('PYTHON_INCLUDE_DIRS'):\n            cmake_args += ['-DPYTHON_INCLUDE_DIRS=' + os.getenv('PYTHON_INCLUDE_DIRS')]\n\n        if os.getenv('PYTHON_LIBRARY'):\n            cmake_args += ['-DPYTHON_LIBRARY=' + os.getenv('PYTHON_LIBRARY')]\n\n        if os.getenv('PYTHON_VERSION'):\n            cmake_args += ['-DPYTHON_VERSION=' + os.getenv('PYTHON_VERSION')]\n\n        # Custom Z3 paths.\n        if os.getenv('Z3_LIBRARIES'):\n            cmake_args += ['-DZ3_LIBRARIES=' + os.getenv('Z3_LIBRARIES')]\n\n        if os.getenv('Z3_INCLUDE_DIRS'):\n            cmake_args += ['-DZ3_INCLUDE_DIRS=' + os.getenv('Z3_INCLUDE_DIRS')]\n\n        # Custom Bitwuzla paths.\n        if os.getenv('BITWUZLA_LIBRARIES'):\n            cmake_args += ['-DBITWUZLA_LIBRARIES=' + os.getenv('BITWUZLA_LIBRARIES')]\n\n        if os.getenv('BITWUZLA_INCLUDE_DIRS'):\n            cmake_args += ['-DBITWUZLA_INCLUDE_DIRS=' + os.getenv('BITWUZLA_INCLUDE_DIRS')]\n\n        # Custom Capstone paths.\n        if os.getenv('CAPSTONE_LIBRARIES'):\n            cmake_args += ['-DCAPSTONE_LIBRARIES=' + os.getenv('CAPSTONE_LIBRARIES')]\n\n        if os.getenv('CAPSTONE_INCLUDE_DIRS'):\n            cmake_args += ['-DCAPSTONE_INCLUDE_DIRS=' + os.getenv('CAPSTONE_INCLUDE_DIRS')]\n\n        # Custom LLVM paths.\n        if os.getenv('LLVM_LIBRARIES'):\n            cmake_args += ['-DLLVM_LIBRARIES=' + os.getenv('LLVM_LIBRARIES')]\n\n        if os.getenv('LLVM_INCLUDE_DIRS'):\n            cmake_args += ['-DLLVM_INCLUDE_DIRS=' + os.getenv('LLVM_INCLUDE_DIRS')]\n\n        # Custom CMake prefix path.\n        if os.getenv('CMAKE_PREFIX_PATH'):\n            cmake_args += ['-DCMAKE_PREFIX_PATH=' + os.getenv('CMAKE_PREFIX_PATH')]\n\n        # Autocomplete stub generation. Enabled by default.\n        python_autocomplete_value = os.getenv('PYTHON_BINDINGS_AUTOCOMPLETE', default='ON').upper()\n        if python_autocomplete_value:\n            cmake_args += ['-DPYTHON_BINDINGS_AUTOCOMPLETE=' + python_autocomplete_value]\n\n        # Create temp and lib folders.\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n\n        if not os.path.exists(self.build_lib):\n            os.makedirs(self.build_lib)\n\n        subprocess.check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n        subprocess.check_call(['cmake', '--build', '.', '--config', 'Release', '--target', 'python-triton'] + build_args, cwd=self.build_temp)\n\n        # The autocomplete file has to be built separately.\n        if (is_cmake_true(python_autocomplete_value)):\n            subprocess.check_call(['cmake', '--build', '.', '--config', 'Release', '--target', 'python_autocomplete'], cwd=self.build_temp)\n\n    def copy_extension_to_source(self, ext):\n        fullname = self.get_ext_fullname(ext.name)\n        filename = self.get_ext_filename(fullname)\n\n        if platform.system() == \"Linux\":\n            src_filename = os.path.join(self.build_temp + '/src/libtriton', 'triton.so')\n            dst_filename = os.path.join(self.build_lib, os.path.basename(filename))\n        elif platform.system() == \"Darwin\":\n            src_filename = os.path.join(self.build_temp + '/src/libtriton', 'libtriton.dylib')\n            dst_filename = os.path.join(self.build_lib, os.path.basename(filename))\n        elif platform.system() == \"Windows\":\n            src_filename = os.path.join(self.build_temp + '\\\\src\\\\libtriton\\\\Release', 'triton.pyd')\n            dst_filename = os.path.join(self.build_lib, os.path.basename(filename))\n        else:\n            raise Exception(f'Platform not supported: {platform.system()}')\n\n        copy_file(src_filename, dst_filename, verbose=self.verbose, dry_run=self.dry_run)\n\n    def copy_autocomplete(self):\n        src_filename = os.path.join(self.build_temp + '/doc/triton_autocomplete', 'triton.pyi')\n        if(os.path.exists(src_filename)):\n            copy_file(src_filename, self.build_lib, verbose=self.verbose, dry_run=self.dry_run)\n\nwith open(\"README.md\", \"r\") as f:\n    long_description = f.read()\n\n\nsetup(\n    name=\"triton-library\",\n    version=VERSION,\n    author=\"The Triton's community\",\n    author_email=\"tritonlibrary@gmail.com\",\n    description=\"Triton is a dynamic binary analysis library\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    license = \"Apache License Version 2.0\",\n    license_files = ('LICENSE.txt',),\n    classifiers=[\n        \"Programming Language :: C++\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    python_requires='>=3.6',\n    project_urls={\n        'Homepage': 'https://triton-library.github.io/',\n        'Source': 'https://github.com/jonathansalwan/Triton',\n    },\n    ext_modules=[\n        CMakeExtension('triton', sourcedir='.')\n    ],\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n    install_requires=[]\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 1.1943359375,
          "content": "{\n    \"$schema\": \"https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json\",\n    \"name\": \"triton\",\n    \"version\": \"1.0\",\n    \"description\": \"Triton is a dynamic binary analysis library. It provides internal components like a dynamic symbolic execution engine, a dynamic taint analysis engine, AST representation of the x86, x86-64, ARM32 and AArch64 ISA semantic, an expressions synthesis engine, some SMT simplification passes, SMT solver interface to Z3 and Bitwuzla and, the last but not least, Python bindings. Based on these components, you are able to build your program analysis tools, automate reverse engineering, perform software verification or just emulate code.\",\n    \"homepage\": \"https://github.com/JonathanSalwan/Triton\",\n    \"license\": \"Apache-2.0\",\n    \"supports\": \"!arm\",\n    \"builtin-baseline\": \"e809a42f87565e803b2178a0c11263f462d1800a\",\n    \"dependencies\": [\n        \"boost-math\",\n        \"boost-multiprecision\",\n        \"boost-numeric-conversion\",\n        { \"name\": \"capstone\", \"default-features\": false, \"features\": [\"arm\", \"arm64\", \"riscv\", \"x86\"] },\n        \"z3\"\n    ],\n    \"overrides\": [\n        { \"name\":\"capstone\", \"version-semver\":\"5.0.1\", \"port-version\": 1 }\n    ]\n}\n"
        },
        {
          "name": "vcpkg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}