{
  "metadata": {
    "timestamp": 1736565623051,
    "page": 504,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "subsurface/subsurface",
      "stars": 2683,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DEREK.yml",
          "type": "blob",
          "size": 0.2158203125,
          "content": "maintainers:\n - dirkhh\n - neolit123\n - atdotde\n - torvalds\n - glance-\n - mturkia\n - janmulder\n - tcanabrava\n - bstoeger\n - sfuchs79\n - janiversen\n - jbygdell\n\nfeatures:\n - dco_check\n - comments\n - pr_description_required\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.822265625,
          "content": "AccessModifierOffset: -8 # so public: and private: stays at the left site\nAlignEscapedNewlinesLeft: true\nAllowAllParametersOfDeclarationOnNextLine: false\nBinPackParameters: true\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Linux\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nColumnLimit: 0\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nForEachMacros: [ 'for_each_line' ]\nIndentFunctionDeclarationAfterType: false #personal taste, good for long methods\nIndentWidth: 8\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: All\nPointerBindsToType: false\nSpaceBeforeAssignmentOperators: true\n# SpaceBeforeParens doesn't work --> SpaceBeforeParens: ControlStatements\nSpacesBeforeTrailingComments: 1\nSpacesInParentheses: false\nUseTab: Always\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.296875,
          "content": ".gitignore\texport-ignore\n.gitattributes\texport-ignore\nDocumentation/*.html.git text=auto\ntheme/jqplot.canvasAxisTickRenderer.js binary\ntheme/jqplot.canvasTextRenderer.js binary\ntheme/jqplot.highlighter.js binary\ntheme/jquery.jqplot.min.js binary\ntheme/jquery.min.js binary\nCHANGELOG.md -text merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0302734375,
          "content": "translations/*.qm\n*.o\n*.orig\n*.rej\n*.exe\n*.dmg\n*.patch\n*.xml\nssrf-version.h\n!dives/*.xml\n*~\npo/*.mo\n/subsurface\n/*.tar.gz\nshare/\nDocumentation/docbook-xsl.css\nDocumentation/user-manual*.html\nDocumentation/user-manual*.pdf\nDocumentation/user-manual*.text\nDocumentation/mobile-manual*.html\nDocumentation/mobile-manual*.pdf\nDocumentation/mobile-manual*.text\nDocumentation/mobile-images/mobile-images\npackaging/windows/subsurface.nsi\npackaging/macos/Info.plist\n*.kdev4\ncallgrind.out.*\n.gitignore\nbuild*/\n.rcc\n.moc\n.uic\n.obj\nMakefile\nsubsurface.pro.user*\nSubsurface-mobile.pro.user*\nSubsurface.app\n.DS_Store\n!android/**/*.xml\nbuild*\nnightly-builds/\nmobile-widgets/qml/kirigami\nmobile-widgets/3rdparty/ECM/\nmobile-widgets/3rdparty/breeze-icons/\nmobile-widgets/3rdparty/extra-cmake-modules/\nmobile-widgets/3rdparty/kirigami/\npackaging/ios/install-root\npackaging/ios/Info.plist\npackaging/ios/Qt\npackaging/ios/asset_catalog_compiler.Info.plist\nappdata/subsurface.appdata.xml\nandroid-mobile/Roboto-Regular.ttf\ngh_release_notes.md\nrelease_content_title.txt\n/output/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[submodule \"libdivecomputer\"]\n\tpath = libdivecomputer\n\turl = https://github.com/Subsurface/libdc.git\n\tbranch = Subsurface-NG\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.5048828125,
          "content": "path_classifiers:\n    test:\n      - \"tests/*\"\n\nextraction:\n    cpp:\n        configure:\n            command:\n                - export INSTALL_ROOT=/opt/out\n                - export PKG_CONFIG_PATH=$INSTALL_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH\n                - bash -x ./scripts/build-libdivecomputer.sh\n                - mkdir _lgtm_build_dir\n                - cd _lgtm_build_dir\n                - cmake -DLIBGIT2_DYNAMIC=ON -DNO_DOCS=ON -DCMAKE_VERBOSE_MAKEFILE=ON ..\n\nqueries:\n    - exclude: \"cpp/short-global-name\"\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.6591796875,
          "content": "<olteanu.claudiu@ymail.com> <olteanu.vasilica.claudiu@gmail.com>\n<danilo.eu@gmail.com> <danilo.cesar@collabora.co.uk>\n<dirk@hohndel.org> <dhohndel@dhohndel-mac02.jf.intel.com>\n<dirk@hohndel.org> <hohndel@mail.gr8dns.org>\nDirk Hohndel <dirk@hohndel.org> Dirk Hohndel (Intel) <dhohndel@dhohndel-mac02.jf.intel.com>\nDirk Hohndel <dirk@hohndel.org> Subsurface <dirk@subsurface-divelog.org>\nDirk Hohndel <dirk@hohndel.org> Subsurface CI <dirk@hohndel.org>\n<guido.lerch@gmail.com> <glerch@Guidos-MacBook-Air.local>\n<jacco.van.koll@gmail.com> <jko@haringstad.com>\n<jlmulder@xs4all.nl> <jlmulder@planet.nl>\n<jef@libdivecomputer.org> <jefdriesen@telenet.be>\n<j.bygdell@gmail.com> <narogh@Qutie.local>\n<karent.bug@gmail.com> <k.arentowicz@gmail.com>\n<me@bearsh.org> <m.gysel@consonics.ch>\n<miika.turkia@gmail.com> <miika.turkia@nixu.fi>\nRobert C. Helling <helling@atdotde.de>\nRobert C. Helling <helling@atdotde.de> Robert.Helling <helling@atdotde.de>\nRobert C. Helling <helling@atdotde.de> Robert.Helling <Helling@th-nb-tmpmbp05.fritz.box>\nRobert C. Helling <helling@atdotde.de> Robert C. Helling <robert@thetheoreticaldiver.org>\nRobert C. Helling <helling@atdotde.de> Robert C. Helling <helling@lmu.de>\nRobert C. Helling <helling@atdotde.de> Robert Helling <helling@lmu.de>\n<sander@myowndomain.nl> <sander.kleywegt@netscout.com>\n<tim@tee-jay.demon.co.uk> <tim@tee-jay.org.uk>\n<tim@tee-jay.demon.co.uk> <timw00.tw@googlemail.com>\n<tomaz.canabrava@intel.com> <tcanabrava@kde.org>\n<tomaz.canabrava@intel.com> <tomaz.canabrava@gmail.com>\n<tomaz.canabrava@intel.com> <tomazcanabrava@Tomazs-MacBook-Pro.local>\nWillem Ferguson <willemferguson@zoology.up.ac.za>\n<willemferguson@zoology.up.ac.za> <fergusonwillem@gmail.com>\n<willemferguson@zoology.up.ac.za> <willem@localhost.localdomain>\n<willemferguson@zoology.up.ac.za> <willem@willem-Precision-M4700.(none)>\n<willemferguson@zoology.up.ac.za> <fergusonwillem@gmail.com>\n<jan@casacondor.com> <jani@libreoffice.org>\n<jan@casacondor.com> <jani@apache.org>\n<jan@casacondor.com> <jancasacondor@gmail.com>\njan Iversen <jan@casacondor.com> jan iversen <jani@apache.org>\nGehad Elrobey <gehadelrobey@gmail.com> <gehadelrobey@gmail.com>\nJoseph W. Joshua <joejoshw@gmail.com> <joejoshw@gmail.com>\nJoseph W. Joshua <joejoshw@gmail.com> <joshua@megvel.me.ke>\nLuisa Pires <luisapiresdesign@gmail.com> <luisapiresdesign@gmail.com>\nPedro Neves <nevesdiver@gmail.com> <nevesdiver@gmail.com>\nSalvo 'LtWorf' Tomaselli <tiposchi@tiscali.it> <tiposchi@tiscali.it>\nBenjamin Fogel <nystire@gmail.com> <nystire@gmail.com>\nGuido Lerch <guido.lerch@gmail.com> <guido.lerch@gmail.com>\nGuido Lerch <guido.lerch@gmail.com> <glerch@Guidos-MacBook-Air.local>\nJoakim Bygdell <j.bygdell@gmail.com> <j.bygdell@gmail.com>\n\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.267578125,
          "content": "desktop: add support to import .asd and .script files from Scubapro's LogTrak and SmartTrak\ndesktop: update \"Save dive data as subtitles\" feature to make it more configurable.\nbluetooth: fix crash on MacOS when doing first download from a new BLE device\nstatistics: show proper dates in January\ndesktop: add country to the fields indexed for full text search\nimport: update libdivecomputer version, add support for the Scubapro G3 / Luna and Shearwater Tern\ndesktop: add a button linking to the 'Contribute' page\nmobile: fix configuration of decompression ceiling and gradient factors\ndesktop: fix gas switches in UDDF exports\ncore: allow of up to 6 O2 sensors (and corresponding voting logic)\ndesktop: add divemode as a possible dive list column\nprofile-widget: Now zomed in profiles can be panned with horizontal scroll.\nmedia: support raw files if libraw is installed\ndesktop: hide only events with the same severity when 'Hide similar events' is used\nequipment: mark gas mixes reported by the dive computer as 'inactive' as 'not used'\nequipment: include unused cylinders in merged dive if the preference is enabled\nequipment: fix bug showing the first diluent in the gas list as 'used' for CCR dives\ndesktop: added button to hide the infobox in the dive profile\ndesktop: use persisted device information for the dive computer configuration\ncore: fix bug using salinity and pressure values in mbar <-> depth conversion\nexport: fix bug resulting in invalid CSV for '\"\"' in 'CSV summary dive details'\ndesktop: add support for multiple tanks to the profile ruler\nexport: change format produced by 'CSV summary dive details' from TSV (tab separated) to CSV\ndesktop: add function to merge dive site into site selected in list\nimport: add option to synchronise dive computer time when downloading dives\ndesktop: fix salinity combo/icon when DC doesnt have salinity info\ncore: fix bug when save sea water salinity given by DC\ndesktop: add option to force firmware update on OSTC4\ndesktop: add column for dive notes to the dive list table\ndesktop: Add an option for printing in landscape mode\ndesktop: fix bug when printing a dive plan with multiple segments\ndesktop: fix remembering of bluetooth address for remembered dive computers (not MacOS)\ndesktop: fix bug in bailout gas selection for CCR dives\ndesktop: fix crash on cylinder update of multiple dives\ndesktop: use dynamic tank use drop down in equipment tab and planner\ndesktop: fix brightness configuration for OSTC4\nequipment: Use 'diluent' as default gas use type if the dive mode is 'CCR'\nhtmlexport: fix search in HTML export\nhtmlexport: fix diveguide display\nstatistics: fix value axis for degenerate value ranges\nprofile: Show correct gas density when in CCR mode\nstatistics: show correct color of selected scatter items when switching to unbinned mode\nstatistics: fix display of month number in continuous date axis\nstatistics: fix range of continuous date axis\ndesktop: fix dive time display in time shift dialog\nlibdivecomputer: garmin: relax string parsing sanity checks\nlibdivecomputer: add Cressi Donatello, Scubapro G2 TEK, Oceanic Geo Air, Scorpena Alpha\n\n---\n* Always add new entries at the very top of this file above other existing entries and this note.\n* Use this layout for new entries: `[Area]: [Details about the change] [reference thread / issue]`\n# vim: textwidth=100\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 31.7783203125,
          "content": "# cmake based build of Subsurface\n\n# Uncomment his to see all commands cmake actually executes\n# set(CMAKE_VERBOSE_MAKEFILE ON)\n\ncmake_minimum_required(VERSION 3.1)\nproject(Subsurface)\n\n# don't process generated files - this is new in 3.10\nif (POLICY CMP0071)\n\tcmake_policy(SET CMP0071 OLD)\nendif()\n\n# support Packagename_ROOT environment variable\nif (POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW) # CMake 3.12\nendif ()\n\n# global settings\n\nset(CMAKE_MODULE_PATH\n\t${${PROJECT_NAME}_SOURCE_DIR}/cmake/Modules\n\t${${PROJECT_NAME}_SOURCE_DIR}/../install-root/lib/cmake\n\t${CMAKE_MODULE_PATH}\n)\n\nset(CMAKE_AUTOMOC ON)\ninclude(MacroOutOfSourceBuild)\nMACRO_ENSURE_OUT_OF_SOURCE_BUILD(\n    \"We don't support building in source, please create a build folder elsewhere and remember to run git clean -xdf to remove temporary files created by CMake.\"\n)\n\n#Option for memory debugging\noption(SUBSURFACE_ASAN_BUILD \"enable memory debugging of Subsurface binary\" OFF)\n\n#Option for profiling\noption(SUBSURFACE_PROFILING_BUILD \"enable profiling of Subsurface binary\" OFF)\n\n#Options regarding usage of pkgconfig\noption(LIBGIT2_FROM_PKGCONFIG \"use pkg-config to retrieve libgit2\" OFF)\noption(LIBDC_FROM_PKGCONFIG \"use pkg-config to retrieve libdivecomputer\" OFF)\n\n#Library Handling\noption(FORCE_LIBSSH \"force linking with libssh to workaround libgit2 bug\" ON)\noption(LIBGIT2_DYNAMIC \"search for libgit2.so before libgit2.a\" OFF)\n\n#Options regarding disabling parts of subsurface.\noption(NO_DOCS \"disable the docs\" OFF)\noption(NO_PRINTING \"disable the printing support\" OFF)\noption(NO_USERMANUAL \"don't include a viewer for the user manual\" OFF)\n\n#Options regarding enabling parts of subsurface\noption(BTSUPPORT \"enable support for QtBluetooth\" ON)\noption(FTDISUPPORT \"enable support for libftdi based serial\" OFF)\noption(LIBRAW_SUPPORT \"enable support for LibRaw images\" ON)\n\n# Options regarding What should we build on subsurface\noption(MAKE_TESTS \"Make the tests\" ON)\n\n# Option whether we should try to build against Qt6, if it is available\noption(BUILD_WITH_QT6 \"try to build against Qt6 (incomplete)\" OFF)\n\nSET(SUBSURFACE_TARGET_EXECUTABLE \"DesktopExecutable\" CACHE STRING \"The type of application, DesktopExecutable, MobileExecutable, or DownloaderExecutable\")\nLIST(APPEND SUBSURFACE_ACCEPTED_EXECUTABLES  \"DesktopExecutable\" \"MobileExecutable\" \"DownloaderExecutable\")\nSET_PROPERTY(CACHE SUBSURFACE_TARGET_EXECUTABLE PROPERTY STRINGS ${SUBSURFACE_ACCEPTED_EXECUTABLES})\n\n#verify if Platform is correct and warn on wxit with example.\nlist (FIND SUBSURFACE_ACCEPTED_EXECUTABLES ${SUBSURFACE_TARGET_EXECUTABLE}  _index)\nif (_index EQUAL -1)\n  message(FATAL_ERROR \"Requested platform not supported, please use one of the following:\n    ${SUBSURFACE_ACCEPTED_EXECUTABLES}\n\n    inputted value was: ${SUBSURFACE_TARGET_EXECUTABLE}\n\n    Example: -DSUBSURFACE_TARGET_EXECUTABLE=DesktopExecutable\")\nendif()\n\n# SUBSURFACE_SOURCE may be used in subdirectories (tests)\nset(SUBSURFACE_SOURCE ${CMAKE_SOURCE_DIR})\nadd_definitions(-DSUBSURFACE_SOURCE=\"${SUBSURFACE_SOURCE}\")\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\n#\n# TODO: This Compilation part should go on the Target specific CMake.\n#\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override\")\n\tif ((CMAKE_SYSTEM_NAME MATCHES \"Darwin\") AND\n\t   ((CMAKE_SYSTEM_VERSION MATCHES \"11.4.\") OR\n\t    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES \"10.7\") OR\n\t    (CMAKE_OSX_DEPLOYMENT_TARGET MATCHES \"10.8\")))\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n\tendif()\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-inconsistent-missing-override\")\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n\t# Warn about possible float conversion errors\n\t# Use NOT VERSION_LESS since VERSION_GREATER_EQUAL is not available\n\t# in currently used cmake version.\n\tif (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.9.0\")\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wfloat-conversion\")\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wfloat-conversion\")\n\tendif()\n\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  # using Intel C++\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  # using Visual Studio C++\nendif()\n\n# set up profiling\nif (SUBSURFACE_PROFILING_BUILD)\n\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pg\")\n\tSET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pg\")\n\tSET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -pg\")\nendif()\n# set up ASan\nif (SUBSURFACE_ASAN_BUILD)\n\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n\tSET(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\nendif()\n\n# every compiler understands -Wall\nset (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Werror=format\")\nset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Werror=format\")\n\n# by detault optimize with -O2 even for debug builds\nset (GCC_OPTIMIZATION_FLAGS \"-O2\" CACHE STRING \"GCC optimization flags\")\nmessage (STATUS \"GCC optimization flags: \" ${GCC_OPTIMIZATION_FLAGS})\nset (CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}\")\nset (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${GCC_OPTIMIZATION_FLAGS}\")\n\n# pkgconfig for required libraries\nfind_package(PkgConfig)\ninclude(pkgconfig_helper)\n\n# The 'HandleFindXXX' are special libraries that subsurface needs\n# to find and configure in a few different ways because of a few\n# developers that prefer pkg-config over CMake, so we try to make\n# everyone happy. It also sets some variables for each library, so\n# if you think a module miss anything, take a look on the specific\n# module file.\ninclude(HandleFindGit2)\ninclude(HandleFindLibDiveComputer)\ninclude(HandleFtdiSupport)\ninclude(HandleVersionGeneration)\ninclude(RunOnBuildDir)\ninclude(cmake_variables_helper)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\tinclude_directories(${CMAKE_OSX_SYSROOT}/usr/include/libxml2)\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -lxml2 -lxslt -lsqlite3)\nelse()\n\tpkg_config_library(LIBXML libxml-2.0 REQUIRED)\n\tpkg_config_library(LIBSQLITE3 sqlite3 REQUIRED)\n\tpkg_config_library(LIBXSLT libxslt REQUIRED)\nendif()\npkg_config_library(LIBZIP libzip REQUIRED)\n\nif(NOT ANDROID)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n\t\tpkg_config_library(BLUEZ bluez REQUIRED)\n\tendif()\n\tpkg_config_library(LIBUSB libusb-1.0 QUIET)\n\tpkg_config_library(LIBMTP libmtp QUIET)\n\tpkg_config_library(LIBRAW libraw )\nendif()\n\ninclude_directories(.\n\t${CMAKE_CURRENT_BINARY_DIR}\n\t${CMAKE_BINARY_DIR}\n\t${CMAKE_BINARY_DIR}/desktop-widgets\n)\n\n# decide what to do about Qt\n# this is messy because we want to support older Qt5 versions, newer Qt5 versions,\n# and Qt6 when enabled / available.\nif(BUILD_WITH_QT6)\n\tset(CHECK_QT6 \"Qt6\")\nendif()\n\n# figure out which version of Qt we are building against\n# in theory this should get us all the variables set up correctly, but that\n# ended up failing in subtle ways to do what was advertized; in the Qt5 case\n# some of the variables didn't get set up, so we'll immediately call it again\n# for Qt5\nfind_package(QT NAMES ${CHECK_QT6} Qt5 REQUIRED COMPONENTS Core Widgets)\n\n# right now there are a few things that don't work with Qt6\n# let's disable them right here and remember our Qt version\nif(QT_VERSION_MAJOR STREQUAL \"6\")\n\tset(USINGQT6 ON)\n\tset(QT5OR6 \"\")\n\t# for Qt6 we want the Qt5 compatibility package\n\tLIST(APPEND QT_EXTRA_COMPONENTS Core5Compat)\n\tLIST(APPEND QT_TEST_LIBRARIES Qt::Core5Compat)\n\n\t# QtWebKit doesn't work with Qt6, so no printing, no manual\n\tset(NO_PRINTING ON)\n\tset(NO_USERMANUAL ON)\n\n\t# as of Qt 6.3 by default QtLocation isn't included, but one can\n\t# build the module from source; so let's look if the user has installed\n\t# it (or if a newer version is out that includes it, anyway)\n\tfind_package(Qt6 COMPONENTS Location)\n\tif(Qt6Location_FOUND)\n\t\tmessage(STATUS \"Found Qt6Location\")\n\t\tLIST(APPEND QT_EXTRA_COMPONENTS Location)\n\t\tadd_definitions(-DMAP_SUPPORT)\n\t\tset(MAPSUPPORT ON)\n\n\t\t# at least on macOS something goes sideways and we fail to load the\n\t\t# QML files with a weird error about Qml.WorkerScript missing\n\t\t# linking Subsurface against that component appears enough to hack\n\t\t# around that, but that feels... wrong\n\t\tif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\t\tfind_package(Qt6 COMPONENTS QmlWorkerScript)\n\t\t\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES Qt6::QmlWorkerScript)\n\t\tendif()\n\tendif()\nelse()\n\t# as mentioned above, since some variables appear to fail to populate\n\t# on some platforms, simply run this again the 'old' way\n\tfind_package(Qt5 REQUIRED COMPONENTS Core Widgets)\n\tset(USINGQT6 OFF)\n\tset(QT5OR6 \"5\")\n\tset(QT_VERSION ${Qt5_VERSION})\n\tset(QT_INSTALL_PREFIX ${_qt5Core_install_prefix})\n\t# for Qt5 we want the Location component (which is missing so far in Qt6)\n\tLIST(APPEND QT_EXTRA_COMPONENTS Location)\n\tadd_definitions(-DMAP_SUPPORT)\n\tset(MAPSUPPORT ON)\nendif()\nmessage(STATUS \"building with Qt ${QT_VERSION}\")\n\n# Project Target specific configuration should go here,\n# if the configuration is too big or would disrupt the normal code flux,\n# move it somewhere else (another file) and include it.\nif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DesktopExecutable\")\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\tset(SUBSURFACE_TARGET Subsurface)\n\telse()\n\t\tset(SUBSURFACE_TARGET subsurface)\n\tendif()\n\tlist(APPEND QT_EXTRA_COMPONENTS QuickWidgets)\n\tremove_definitions(-DSUBSURFACE_MOBILE)\n\tif(NO_USERMANUAL)\n\t\tmessage(STATUS \"building without built-in user manual support\")\n\t\tadd_definitions(-DNO_USERMANUAL)\n\telse()\n\t\tset(REQUEST_WEBKIT ON)\n\tendif()\n\tif(NO_PRINTING)\n\t\tmessage(STATUS \"building without printing support\")\n\t\tadd_definitions(-DNO_PRINTING)\n\telse()\n\t\tset(REQUEST_WEBKIT ON)\n\tendif()\n\tif(REQUEST_WEBKIT)\n\t\t# Because Qt5WebKitWidgets isn't a part of the \"regular\" Qt5, we can't get it the normal way\n\t\tfind_package(Qt5WebKitWidgets QUIET)\n\t\tif(Qt5WebKitWidgets_FOUND STREQUAL \"1\")\n\t\t\tLIST(APPEND QT_EXTRA_COMPONENTS PrintSupport WebKitWidgets)\n\t\t\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES Qt5::WebKitWidgets)\n\t\t\tmessage(STATUS \"building with QtWebKit\")\n\t\telse()\n\t\t\tmessage(STATUS \"didn't find QtWebKit, building without user manual and printing support\")\n\t\t\tadd_definitions(-DNO_PRINTING)\n\t\t\tadd_definitions(-DNO_USERMANUAL)\n\t\t\tset(NO_PRINTING ON)\n\t\t\tset(NO_USERMANUAL ON)\n\t\tendif()\n\tendif()\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"MobileExecutable\")\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\tset(SUBSURFACE_TARGET Subsurface-mobile)\n\telse()\n\t\tset(SUBSURFACE_TARGET subsurface-mobile)\n\tendif()\n\tlist(APPEND QT_EXTRA_COMPONENTS QuickControls2)\n\tlist(APPEND QT_EXTRA_COMPONENTS QuickWidgets)\n\tadd_definitions(-DSUBSURFACE_MOBILE)\n\n\t# add definition to seperate mobile for devices and for desktop\n\tadd_definitions(-DSUBSURFACE_MOBILE_DESKTOP)\n\n\tmessage(STATUS \"Building Subsurface-mobile requires BT support\")\n\tset(BTSUPPORT ON)\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\tset(SUBSURFACE_TARGET Subsurface-downloader)\n\telse()\n\t\tset(SUBSURFACE_TARGET subsurface-downloader)\n\tendif()\n\tset(BTSUPPORT ON)\n\tset(LIBRAW_SUPPORT OFF)\n\tadd_definitions(-DSUBSURFACE_DOWNLOADER)\n\tmessage(STATUS \"building the embedded Subsurface-downloader app\")\nendif()\n\nif(ANDROID)\n\tset(NO_PRINTING ON)\n\tset(NO_USERMANUAL ON)\n\tset(MAKE_TESTS OFF)\n\tlist(APPEND QT_EXTRA_COMPONENTS AndroidExtras)\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -llog)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n\t# add pthread to the end of the library list on Linux\n\t# this is only needed on Ubuntu\n\t# but shouldn't hurt on other Linux versions\n\t# in some builds we appear to be missing libz for some strange reason...\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -lz -lpthread)\n\n\t# Test for ARM processor (Raspberry Pi) and add libGLESv2 if found\n\tif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"armv7l\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"armv6l\")\n\t\tmessage (STATUS \"Found ARM processor. Adding libGLESv2\")\n\t\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -lGLESv2)\n\t\tset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\tendif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\texecute_process(\n\t\tCOMMAND bash scripts/get-version.sh\n\t\tWORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n\t\tOUTPUT_VARIABLE SSRF_VERSION_STRING\n\t\tOUTPUT_STRIP_TRAILING_WHITESPACE\n\t)\n\tfind_library(APP_SERVICES_LIBRARY ApplicationServices)\n\tfind_library(HID_LIB HidApi)\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES ${HID_LIB})\n\tset(EXTRA_LIBS ${APP_SERVICES_LIBRARY})\n\tset(ICON_FILE ${CMAKE_SOURCE_DIR}/packaging/macosx/Subsurface.icns)\n\tif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"MobileExecutable\")\n\t\tset(MACOSX_BUNDLE_INFO_STRING \"Subsurface-mobile\")\n\t\tset(MACOSX_BUNDLE_BUNDLE_NAME \"Subsurface-mobile\")\n\telse()\n\t\tset(MACOSX_BUNDLE_INFO_STRING \"Subsurface\")\n\t\tset(MACOSX_BUNDLE_BUNDLE_NAME \"Subsurface\")\n\tendif()\n\tset(MACOSX_BUNDLE_ICON_FILE Subsurface.icns)\n\tset(MACOSX_BUNDLE_GUI_IDENTIFIER \"org.subsurface-divelog\")\n\tset(MACOSX_BUNDLE_BUNDLE_VERSION \"${SSRF_VERSION_STRING}\")\n\tset(MACOSX_BUNDLE_SHORT_VERSION_STRING \"${SSRF_VERSION_STRING}\")\n\tset(MACOSX_BUNDLE_LONG_VERSION_STRING \"${SSRF_VERSION_STRING}\")\n\tset(MACOSX_BUNDLE_COPYRIGHT \"Linus Torvalds, Dirk Hohndel, Tomaz Canabrava, Berthold Stoeger and others\")\n\tset_source_files_properties(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION \"Resources\")\n\tset(SUBSURFACE_PKG MACOSX_BUNDLE ${ICON_FILE})\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -lwsock32 -lws2_32)\n\tremove_definitions(-DUNICODE)\n\tadd_definitions(-mwindows -D_WIN32)\nendif()\n\nif(BTSUPPORT)\n\tset(BLESUPPORT ON)\n\tlist(APPEND QT_EXTRA_COMPONENTS Bluetooth)\n\tadd_definitions(-DBT_SUPPORT)\n\tadd_definitions(-DBLE_SUPPORT)\nendif()\n\nif (LIBRAW_SUPPORT)\n\tif(LIBRAW_FOUND)\n\t\tadd_definitions(-DLIBRAW_SUPPORT)\n\tendif()\nelse()\n\tmessage(STATUS \"building without built-in libraw support\")\nendif()\n\nif(ANDROID)\n\t# when building for Android, the toolchain file requires all cmake modules\n\t# to be inside the CMAKE_FIND_ROOT_PATH - which prevents cmake from finding\n\t# our Qt installation. This is ugly, but it works.\n\tset(CMAKE_FIND_ROOT_PATH \"/;${CMAKE_FIND_ROOT_PATH}\")\nendif()\nset(QT_FIND_COMPONENTS Core Concurrent Widgets Network Svg Positioning Quick ${QT_EXTRA_COMPONENTS})\nif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DesktopExecutable\")\n\tfind_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"MobileExecutable\")\n\t# Kirigami 5.62 and newer require at least Qt 5.12\n\tif(ANDROID)\n\t\tfind_package(Qt${QT_VERSION_MAJOR} 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools)\n\telse()\n\t\tfind_package(Qt${QT_VERSION_MAJOR} 5.12 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS} LinguistTools Test QuickTest)\n\tendif()\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\n\t# let's pick a version that's not ancient\n\tfind_package(Qt${QT_VERSION_MAJOR} 5.11 REQUIRED COMPONENTS ${QT_FIND_COMPONENTS})\n\tset(MAKE_TESTS OFF)\nendif()\n\nforeach(_QT_COMPONENT ${QT_FIND_COMPONENTS})\n\tlist(APPEND QT_LIBRARIES Qt${QT5OR6}::${_QT_COMPONENT})\nendforeach()\nif(NOT ANDROID)\n\tLIST(APPEND QT_TEST_LIBRARIES ${QT_LIBRARIES} Qt${QT5OR6}::Test Qt${QT5OR6}::QuickTest)\nendif()\n\n#set up the subsurface_link_libraries variable\nLIST(APPEND SUBSURFACE_LINK_LIBRARIES ${LIBDIVECOMPUTER_LIBRARIES} ${LIBGIT2_LIBRARIES} ${LIBUSB_LIBRARIES} ${LIBMTP_LIBRARIES})\nif (NOT SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\n\tif(USINGQT6)\n\t\tif(MAPSUPPORT)\n\t\t\tqt_add_resources(SUBSURFACE_RESOURCES map-widget/qml/map-widget.qrc)\n\t\t\tset(SUBSURFACE_MAPWIDGET subsurface_mapwidget)\n\t\tendif()\n\t\tqt_add_resources(SUBSURFACE_RESOURCES subsurface.qrc profile.qrc stats/statsicons.qrc desktop-widgets/qml/statsview2.qrc)\n\telse()\n\t\tqt5_add_resources(SUBSURFACE_RESOURCES subsurface.qrc profile.qrc stats/statsicons.qrc map-widget/qml/map-widget.qrc desktop-widgets/qml/statsview2.qrc)\n\t\tset(SUBSURFACE_MAPWIDGET subsurface_mapwidget)\n\tendif()\nendif()\n\n# hack to build successfully on LGTM\nif(DEFINED ENV{LGTM_SRC})\n\tLIST(APPEND SUBSURFACE_LINK_LIBRARIES -lgssapi_krb5 -lhttp_parser)\nendif()\n\n# include translations\nif (NOT SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\nadd_subdirectory(translations)\nendif()\nadd_subdirectory(core)\nadd_subdirectory(qt-models)\nadd_subdirectory(commands)\nif (NOT SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\nadd_subdirectory(profile-widget)\nif(MAPSUPPORT)\nadd_subdirectory(map-widget)\nendif()\nadd_subdirectory(mobile-widgets)\nadd_subdirectory(stats)\nendif()\nadd_subdirectory(backend-shared)\n\nif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DesktopExecutable\")\n\tadd_subdirectory(desktop-widgets)\nendif()\n\n# create the executables\nif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"MobileExecutable\")\n\t# set up Kirigami using KDE ECM\n\t# that's available as kde-extra-cmake-modules on Homebrew, on all Linux flavors\n\t# Android and iOS are built via qmake, Windows build of Subsurface-mobile isn't supported\n\tfind_package(ECM REQUIRED CONFIG PATHS ${CMAKE_CURRENT_SOURCE_DIR}/mobile-widgets/3rdparty/ECM)\n\tset(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/ ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH})\n\tset(BREEZEICONS_DIR mobile-widgets/3rdparty/breeze-icons/)\n\n\tSET(QML_IMPORT_PATH ${QML_IMPORT_PATH} ${CMAKE_SOURCE_DIR}/mobile-widgets/3rdparty/kirigami/src ${CMAKE_SOURCE_DIR}/mobile-widgets/qml)\n\tadd_subdirectory(mobile-widgets/3rdparty)\n\tinclude_directories(${CMAKE_SOURCE_DIR}/mobile-widgets/3rdparty/kirigami/src)\n\tinclude(${CMAKE_SOURCE_DIR}/mobile-widgets/3rdparty/kirigami/KF5Kirigami2Macros.cmake)\n\n\tset(MOBILE_SRC\n\t\tsubsurface-mobile-main.cpp\n\t\tsubsurface-helper.cpp\n\t)\n\tif(USINGQT6)\n\t\tqt_add_resources(MOBILE_RESOURCES mobile-widgets/qml/mobile-resources.qrc)\n\t\tqt_add_resources(MOBILE_RESOURCES profile.qrc)\n\t\tqt_add_resources(MOBILE_RESOURCES mobile-widgets/3rdparty/icons.qrc)\n\t\tqt_add_resources(MOBILE_RESOURCES mobile-widgets/3rdparty/kirigami/src/scenegraph/shaders/shaders.qrc)\n\telse()\n\t\tqt5_add_resources(MOBILE_RESOURCES mobile-widgets/qml/mobile-resources.qrc)\n\t\tqt5_add_resources(MOBILE_RESOURCES profile.qrc)\n\t\tqt5_add_resources(MOBILE_RESOURCES mobile-widgets/3rdparty/icons.qrc)\n\t\tqt5_add_resources(MOBILE_RESOURCES mobile-widgets/3rdparty/kirigami/src/scenegraph/shaders/shaders.qrc)\n\tendif()\n\n\t# the following is split across two commands since in cmake 3.12 this would result\n\t# in a non-sensical \"no sources given to target\" error if done all as one set of\n\t# arguments to the add_executable() call\n\tadd_executable(${SUBSURFACE_TARGET} ${SUBSURFACE_PKG} ${SUBSURFACE_RESOURCES})\n\ttarget_sources(${SUBSURFACE_TARGET} PUBLIC ${MOBILE_SRC} ${MOBILE_RESOURCES})\n\ttarget_link_libraries(\n\t\t${SUBSURFACE_TARGET}\n\t\tsubsurface_mobile\n\t\tsubsurface_profile\n\t\t${SUBSURFACE_MAPWIDGET}\n\t\tsubsurface_backend_shared\n\t\tsubsurface_models_mobile\n\t\tsubsurface_commands\n\t\tsubsurface_corelib\n\t\tsubsurface_stats\n\t\tkirigamiplugin\n\t\t${SUBSURFACE_LINK_LIBRARIES}\n\t)\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DesktopExecutable\")\n\tset(SUBSURFACE_APP\n\t\tsubsurface-desktop-main.cpp\n\t\tsubsurface-helper.cpp\n\t)\n\tsource_group(\"Subsurface App\" FILES ${SUBSURFACE_APP})\n\tif(ANDROID)\n\t\tadd_library(${SUBSURFACE_TARGET} SHARED ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})\n\telse()\n\t\tadd_executable(${SUBSURFACE_TARGET} MACOSX_BUNDLE WIN32 ${SUBSURFACE_PKG} ${SUBSURFACE_APP} ${SUBSURFACE_RESOURCES})\n\tendif()\n\n\ttarget_link_libraries(\n\t\t${SUBSURFACE_TARGET}\n\t\tsubsurface_generated_ui\n\t\tsubsurface_interface\n\t\tsubsurface_profile\n\t\t${SUBSURFACE_MAPWIDGET}\n\t\tsubsurface_backend_shared\n\t\tsubsurface_models_desktop\n\t\tsubsurface_commands\n\t\tsubsurface_corelib\n\t\tsubsurface_stats\n\t\t${SUBSURFACE_LINK_LIBRARIES}\n\t)\n\tadd_dependencies(subsurface_desktop_preferences subsurface_generated_ui)\n\tadd_dependencies(subsurface_interface subsurface_generated_ui)\n\tadd_dependencies(subsurface_profile subsurface_generated_ui)\n\tadd_dependencies(subsurface_models_desktop subsurface_generated_ui)\n\tadd_dependencies(subsurface_generated_ui version)\nelseif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"DownloaderExecutable\")\n\tset(DOWNLOADER_APP\n\t\tsubsurface-downloader-main.cpp\n\t\tcli-downloader.cpp\n\t)\n\tsource_group(\"Downloader App\" FILES ${DOWNLOADER_APP})\n\tadd_executable(${SUBSURFACE_TARGET} MACOSX_BUNDLE WIN32 ${SUBSURFACE_PKG} ${DOWNLOADER_APP} ${SUBSURFACE_RESOURCES})\n\ttarget_link_libraries(\n\t\t${SUBSURFACE_TARGET}\n\t\tsubsurface_backend_shared\n\t\tsubsurface_models_downloader\n\t\tsubsurface_commands\n\t\tsubsurface_corelib\n\t\t${SUBSURFACE_LINK_LIBRARIES}\n\t)\nendif()\n\nadd_dependencies(subsurface_corelib version)\n\n# add platform specific actions\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n\tfile(WRITE ${CMAKE_BINARY_DIR}/qt.conf \"[Paths]\nPrefix=.\n\")\nendif()\n\n# build an automated html exporter\nadd_executable(export-html EXCLUDE_FROM_ALL export-html.cpp ${SUBSURFACE_RESOURCES})\ntarget_link_libraries(export-html subsurface_corelib ${SUBSURFACE_LINK_LIBRARIES})\n\n# install Subsurface\n# first some variables with files that need installing\nset(DOCFILES\n\tREADME.md\n\tReleaseNotes/ReleaseNotes.txt\n\tSupportedDivecomputers.txt\n\t${CMAKE_BINARY_DIR}/Documentation/user-manual.html\n\t${CMAKE_BINARY_DIR}/Documentation/user-manual_es.html\n\t${CMAKE_BINARY_DIR}/Documentation/user-manual_fr.html\n)\n\n# add all the translations that we may need\nFILE(STRINGS \"subsurface_enabled_translations\" QTTRANSLATIONS_BASE)\n\nif(NOT DEFINED QT_TRANSLATION_DIR OR QT_TRANSLATION_DIR STREQUAL \"\")\n\tif(USINGQT6)\n\t\tset(QT_TRANSLATION_DIR ${QtCore_DIR}/../../../translations)\n\telse()\n\t\tset(QT_TRANSLATION_DIR ${Qt5Core_DIR}/../../../translations)\n\tendif()\nendif()\nset(QTTRANSLATIONS \"\")\nforeach(QTTRANSLATION ${QTTRANSLATIONS_BASE})\n\tif (QTTRANSLATION AND EXISTS ${QT_TRANSLATION_DIR}/${QTTRANSLATION})\n\t\tset(QTTRANSLATIONS ${QTTRANSLATIONS} ${QT_TRANSLATION_DIR}/${QTTRANSLATION})\n\tendif()\nendforeach()\n\n# now for each platform the install instructions\nif(ANDROID)\n\t# Android template directory\n\tinclude(${QT_ANDROID_CMAKE})\n\tif((DEFINED ENV{KEYSTORE}) AND (DEFINED ENV{KEYSTORE_PASSWORD}))\n\t\tadd_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}\n\t\t\tPACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}\n\t\t\tKEYSTORE $ENV{KEYSTORE} Subsurface-mobile KEYSTORE_PASSWORD $ENV{KEYSTORE_PASSWORD}\n\t\t)\n\t\tmessage(STATUS \"KEYSTORE=$ENV{KEYSTORE} KEYSTORE_PASSWORD=$ENV{KEYSTORE_PASSWORD}\")\n\telse()\n\t\tadd_qt_android_apk(${SUBSURFACE_TARGET}.apk ${SUBSURFACE_TARGET}\n\t\t\tPACKAGE_SOURCES ${CMAKE_BINARY_DIR}/android-mobile DEPENDS ${ANDROID_NATIVE_LIBSSL} ${ANDROID_NATIVE_LIBCRYPT}\n\t\t)\n\t\tmessage(STATUS \"no KEYSTORE\")\n\tendif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\tset(APP_BUNDLE_DIR \"${SUBSURFACE_TARGET}.app\")\n\t# macdeployqt simplifies a lot of this process, but still doesn't get everything right\n\t# - it misses a couple of resources and frameworks\n\t# - it seems to always deploy the SQL plugins (even though they aren't needed)\n\tset(MACDEPLOY_ARGS \"-qmldir=${APP_BUNDLE_DIR}/Contents/Resources/qml -appstore-compliant -verbose=0 -executable=${APP_BUNDLE_DIR}/Contents/MacOS/${SUBSURFACE_TARGET} -always-overwrite -libpath=${CMAKE_SOURCE_DIR}/../install-root/lib\")\n\tset(RESOURCEDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources)\n\tset(PLUGINDIR ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/PlugIns)\n\tinstall(DIRECTORY Documentation/images DESTINATION ${RESOURCEDIR}/share/Documentation)\n\tinstall(FILES ${DOCFILES} DESTINATION ${RESOURCEDIR}/share/Documentation)\n\tinstall(DIRECTORY theme DESTINATION ${RESOURCEDIR})\n\tinstall(DIRECTORY printing_templates DESTINATION ${RESOURCEDIR})\n\tinstall(FILES ${TRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)\n\tinstall(FILES ${QTTRANSLATIONS} DESTINATION ${RESOURCEDIR}/translations)\n\tinstall(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt DESTINATION ${RESOURCEDIR})\n\tinstall(CODE \"execute_process(COMMAND mkdir -p ${RESOURCEDIR}/qml)\")\n\tif(USINGQT6)\n\t\tset(QT_INSTALL_PREFIX ${QT6_INSTALL_PREFIX})\n\telse()\n\t\tset(QT_INSTALL_PREFIX ${_qt5Core_install_prefix})\n\tendif()\n\tif(MAPSUPPORT)\n\t\tinstall(CODE \"execute_process(COMMAND mkdir -p ${PLUGINDIR}/geoservices)\")\n\t\t# this is really weird. We first try a plugin that ended up in the Qt install prefix\n\t\t# then we try one that's in that odd broken install location that the qmake file results in (that includes the QT_INSTALL_PREFIX after our INSTALL_ROOT\n\t\t# and finally, for fat binaries, we copy the one that's in the 'logical' spot under the INSTALL_ROOT\n\t\t# this should cover all cases and always get us the correct library\n\t\tinstall(CODE \"execute_process(COMMAND cp ${QT_INSTALL_PREFIX}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp ${CMAKE_SOURCE_DIR}/../install-root/${QT_INSTALL_PREFIX}/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp ${CMAKE_SOURCE_DIR}/../install-root/plugins/geoservices/libqtgeoservices_googlemaps.dylib ${PLUGINDIR}/geoservices ERROR_QUIET)\")\n\tendif()\n\t# this will fail is macdeployqt isn't in the PATH - that seemed to happen in the past, but not recently\n\t# also, on M1 macOS systems macdeployqt throws a ton of (apparently harmless) errors. Warn the unsuspecting developer\n\tinstall(CODE \"execute_process(COMMAND macdeployqt ${APP_BUNDLE_DIR} -no-strip ${MACDEPLOY_ARGS})\")\n\t# the next hack is here to delete the sqlite plugin that get's installed even though it isn't needed\n\tinstall(CODE \"execute_process(COMMAND rm -rf ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/PlugIns/sqldrivers)\")\n\t# and another hack to get the QML Components in the right place\n\tif(MAPSUPPORT)\n\t\tif (USINGQT6)\n\t\t\tinstall(CODE \"execute_process(COMMAND rm -rf ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml/{QtQuick,QtLocation,QtPositioning})\")\n\t\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtQuick ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\t\telse()\n\t\t\tinstall(CODE \"execute_process(COMMAND rm -rf ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml/{QtQuick.2,QtLocation,QtPositioning})\")\n\t\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtQuick.2 ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\t\tendif()\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtLocation ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\tendif()\n\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\tif(NOT QT_VERSION VERSION_LESS 5.11.0)\n\t\t# and with Qt 5.11 we need another library that isn't copied by macdeployqt\n\t\tinstall(CODE \"execute_process(COMMAND rm -rf ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks/QtPositioningQuick.framework)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/lib/QtPositioningQuick.framework ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks)\")\n\tendif()\n\tif(NOT QT_VERSION VERSION_LESS 5.14.0)\n\t\t# and with Qt 5.14 we need another library that isn't always copied by macdeployqt\n\t\tinstall(CODE \"execute_process(COMMAND rm -rf ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks/QtQmlWorkerScript.framework)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/lib/QtQmlWorkerScript.framework ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Frameworks)\")\n\tendif()\n\tif (SUBSURFACE_TARGET_EXECUTABLE MATCHES \"MobileExecutable\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtQuick ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtGraphicalEffects ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtQml ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\t\tinstall(CODE \"execute_process(COMMAND cp -a ${QT_INSTALL_PREFIX}/qml/QtPositioning ${CMAKE_BINARY_DIR}/${APP_BUNDLE_DIR}/Contents/Resources/qml)\")\n\tendif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n\tif (CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n\t\tif(NOT DEFINED OBJCOPY)\n\t\t\tset(OBJCOPY x86_64-w64-mingw32.shared-objcopy)\n\t\tendif()\n\t\tfind_program(OBJCOPY_FOUND ${OBJCOPY})\n\t\tif (OBJCOPY_FOUND)\n\t\t\tmessage(STATUS \"Build type is 'RelWithDebInfo'. Creating debug symbols in a separate file.\")\n\t\t\tadd_custom_command(TARGET ${SUBSURFACE_TARGET} POST_BUILD\n\t\t\t\tCOMMAND ${OBJCOPY} --only-keep-debug ${SUBSURFACE_TARGET}.exe ${SUBSURFACE_TARGET}.exe.debug\n\t\t\t\tCOMMAND ${OBJCOPY} --strip-debug --strip-unneeded ${SUBSURFACE_TARGET}.exe\n\t\t\t\tCOMMAND ${OBJCOPY} --add-gnu-debuglink=${SUBSURFACE_TARGET}.exe.debug ${SUBSURFACE_TARGET}.exe\n\t\t\t)\n\t\tendif()\n\tendif()\n\n\t# Windows bundling rules\n\t# We don't have a helpful tool like macdeployqt for Windows, so we hardcode\n\t# which libs we need.\n\t# \"make install\", copies everything into a staging area\n\t# \"make installer\", uses makensis to create an installer executable\n\tset(WINDOWSSTAGING ${CMAKE_BINARY_DIR}/staging)\n\tinstall(DIRECTORY Documentation/images DESTINATION ${WINDOWSSTAGING}/Documentation)\n\tinstall(FILES ${DOCFILES} DESTINATION ${WINDOWSSTAGING}/Documentation)\n\tinstall(DIRECTORY theme DESTINATION ${WINDOWSSTAGING})\n\tinstall(DIRECTORY printing_templates DESTINATION ${WINDOWSSTAGING})\n\tinstall(FILES ${TRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)\n\tinstall(FILES ${QTTRANSLATIONS} DESTINATION ${WINDOWSSTAGING}/translations)\n\tinstall(FILES ${CMAKE_SOURCE_DIR}/gpl-2.0.txt ${CMAKE_SOURCE_DIR}/packaging/windows/subsurface.ico DESTINATION ${WINDOWSSTAGING})\n\tinstall(TARGETS ${SUBSURFACE_TARGET} DESTINATION ${WINDOWSSTAGING})\n\tinstall(FILES ${CMAKE_BINARY_DIR}/qt.conf DESTINATION ${WINDOWSSTAGING})\n\n\tif(NOT QT_VERSION VERSION_LESS 5.11.0)\n\t\t# hack to work around the fact that we don't process the dependencies of plugins\n\t\t# as of Qt 5.11 this additional DLL is needed and it's only referenced in the qml DLLs\n\t\tinstall(FILES ${QT_INSTALL_PREFIX}/bin/Qt5PositioningQuick.dll DESTINATION ${WINDOWSSTAGING})\n\tendif()\n\n\tif(NOT DEFINED MAKENSIS)\n\t\tset(MAKENSIS makensis)\n\tendif()\n\n\t# the script we created above is now added as a command to run at\n\t# install time - so this ensures that subsurface.exe has been\n\t# built before this is run\n\tinstall(CODE \"execute_process(COMMAND ${CMAKE_COMMAND} -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DSUBSURFACE_TARGET=${SUBSURFACE_TARGET} -DSUBSURFACE_SOURCE=${SUBSURFACE_SOURCE} -DSTAGING=${WINDOWSSTAGING} -P ${CMAKE_SOURCE_DIR}/cmake/Modules/dlllist.cmake)\")\n\n\t# create the subsurface-x.y.z.exe installer - this needs to depend\n\t# on the install target but cmake doesn't allow that, so we depend\n\t# on the fake target instead\n\tadd_custom_target(\n\t\tfake_install\n\t\tCOMMAND \"${CMAKE_COMMAND}\" --build . --target install\n\t\tDEPENDS ${SUBSURFACE_TARGET}\n\t)\n\n\tadd_custom_target(\n\t\tinstaller\n\t\tCOMMAND ${MAKENSIS} ${WINDOWSSTAGING}/subsurface.nsi\n\t\tDEPENDS fake_install\n\t)\nelseif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n\t# the syntax is odd, but this searches for libqtgeoservices_googlemaps.so\n\t# in the filesystem below our install-root\n\t# different Linux flavors put the plugin in different directories\n\tfile(GLOB_RECURSE GOOGLEMAPS ${CMAKE_SOURCE_DIR}/../install-root/libqtgeoservices_googlemaps.so)\n\tif (NOT GOOGLEMAPS)\n\t\tmessage(STATUS \"Cannot find libqtgeoservices_googlemaps.so\")\n\telse()\n\t\tadd_custom_target(link_googlemaps_plugin ALL COMMAND\n\t\t\trm -rf ${CMAKE_BINARY_DIR}/geoservices &&\n\t\t\tmkdir -p ${CMAKE_BINARY_DIR}/geoservices &&\n\t\t\tln -sf ${GOOGLEMAPS} ${CMAKE_BINARY_DIR}/geoservices)\n\tendif()\n\tinstall(FILES subsurface.debug DESTINATION bin)\n\tinstall(FILES subsurface.desktop DESTINATION share/applications)\n\tinstall(CODE \"execute_process(COMMAND sh ${CMAKE_SOURCE_DIR}/scripts/add-version-to-metainfo.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\")\n\tinstall(FILES metainfo/subsurface.metainfo.xml DESTINATION share/metainfo)\n\tinstall(FILES icons/subsurface-icon.svg DESTINATION share/icons/hicolor/scalable/apps)\n\tinstall(DIRECTORY Documentation/images DESTINATION share/subsurface/Documentation)\n\tinstall(FILES ${DOCFILES} DESTINATION share/subsurface/Documentation)\n\tinstall(DIRECTORY theme DESTINATION share/subsurface)\n\tinstall(DIRECTORY printing_templates DESTINATION share/subsurface)\n\tinstall(FILES ${TRANSLATIONS} DESTINATION share/subsurface/translations)\n\tinstall(TARGETS ${SUBSURFACE_TARGET} DESTINATION bin)\nendif()\n\nif (MAKE_TESTS)\n\tenable_testing()\n\tadd_subdirectory(tests)\nendif()\n\n# useful for debugging CMake issues\n# print_all_variables()\n"
        },
        {
          "name": "CODINGSTYLE.md",
          "type": "blob",
          "size": 17.158203125,
          "content": "# Coding Style\n\nHere are some of the basics that we are trying to enforce for our coding style\nand conventions. The existing code (as of the commit that adds these lines) is\nnot yet fully consistent to these rules, but following these rules will make\nsure that no one yells at you about your patches.\n\nWe have a script that can be used to reformat code to be reasonably close\nto these rules; it's in `scripts/whitespace.pl` – this script requires\nclang-format to be installed (which sadly isn't installed by default on\nany of our platforms; even on Mac where clang is the default compiler).\n\nAt the end of this file are some ideas for your `.emacs` file (if that's\nyour editor of choice) as well as for QtCreator. If you have settings for\nother editors that implement this coding style, please add them here.\n\n## Basic style rules\n\n* all indentation is tabs (set to 8 char) with the exception of\n  continuation lines that are aligned with tabs and then spaces\n\n* all keywords followed by a '(' have a space in between\n  ```\n  if (condition)\n  \n  for (i = 0; i < 5; i++)\n  ```\n\n* function calls do NOT have a space between their name and argument\n  ```\n  i = some_function(argument);\n  ```\n\n* usually there is no space on the inside of parenthesis (see examples\n  above)\n\n* function / method implementations have their opening curly braces in\n  column 1\n\n* all other opening curly braces follow at the end of the line, with a\n  space separating them:\n  ```\n  if (condition) {\n  \tdosomething();\n  \tdosomethingelse();\n  }\n  ```\n\n* both sides of an `if` / `else` clause either use or do not use curly braces:\n  ```\n  if (condition)\n  \ti = 4;\n  else\n  \tj = 6;\n  \n  if (condition) {\n  \ti = 6;\n  } else {\n  \ti = 4;\n  \tj = 6;\n  }\n  ```\n\n* use space to make visual separation easier\n  ```\n  a = b + 3 + e / 4;\n  ```\n\n* continuation lines have the operator / comma at the end\n  ```\n  if (very_long_condition_1 ||\n      condition_2)\n  \n  b = a + (c + d +\n  \t f + z);\n  ```\n\n* in a C++ constructor initialization list, the colon is on the same line and\n  continuation lines are aligned as the rule above:\n  ```\n  ClassName::ClassName() : x(1),\n  \ty(2),\n  \tz(3)\n  {\n  }\n  ```\n\n* unfortunate inconsistency\n\n  - Core code usually uses underscores to structure names\n    ```\n    variable_or_class_in_core\n    ```\n  - In contrast, Qt / display layer code usually uses camelCase\n    ```\n    variableInQt\n    ```\n    for variable names and PascalCase\n    ```\n    ClassInQt\n    ```\n    for names of classes and other types\n\n  where the two meet, use your best judgment and go for best consistency\n  (i.e., where does the name \"originate\")\n\n* macro names should be capitalized; e.g., prefer\n  ```\n  #define FROB 17\n  #define FROBULATE(x) (x)+FROB\n  ```\n  to\n  ```\n  #define frob 17\n  #define frobulate(x) (x)+frob\n  ```\n\n  Since C++ is strongly typed, avoid macros where possible.\n  For constants use `constexpr`:\n  ```\n  static constexpr int frob = 17;\n  ```\n  and for functions use templated inline functions such as\n  ```\n  template<typename T>\n  static bool less_than(T x, T y)\n  {\n    return x < y;\n  }\n  ```\n\n* there is a strong preference for lower case file names; sometimes conventions\n  or outside requirements make camelCase filenames the better (or only) choice,\n  but absent such an outside reason all file names should be lower case\n  This rule applies to new file names, existing file names should not be\n  changed without a reason.\n\n* cpp/h file names should usually be identical to the class name but in lower\n  case. Where it seems appropriate, multiple, closely related classes can be\n  in a single file with a more generic name.\n\n* `switch` statements with blocks are a little bit special (to avoid indenting\n  too far)\n  ```\n  switch (foo) {\n  case FIRST:\n  \twhatever();\n  \tbreak;\n  case SECOND: {\n  \tint i;\n  \tfor (i = 0; i < 5; i++)\n  \t\tdo_something(i);\n  }\n  }\n  ```\n\n## Separation of core and UI layer and historical remarks\n\nIdeally, we strive for a separation of core functionality and UI layer.\nIn practice however, the distinction is rather fuzzy and the code base is\ninconsistent. The current state is due to the fact that the project was\noriginally written in C with the gtk library. Later, the UI layer was\nconverted to Qt, whereas the core functionality was still C. Gradually\nmore and more Qt and C++ creeped into the core layer. Recently we\nswitched to full C++.\n\nTo keep the option of non-Qt frontends, we should strive to use as few Qt\nprimitives in the core code as possible. However, some parts\nare deeply interwoven with Qt, such as for example the translation machinery.\nMoreover, some platform independent features, such as regexps or URL handling\nmight be hard to replace.\n\n## C++\n\nSince the project was originally written in C, some of the creators and\noriginal contributors may feel overwhelmed by all too\n\"modern\" C++, so try to avoid \"fancy\" constructs such as template meta\nprogramming, unless they make the code distinctly simpler.\n\nAlso many of the (potential) contributors will not have an extensive\nbackground in C++, so strive for simplicity.\n\n## Coding conventions\n\n* variable declarations\n\n  In C++ the lifetime of a variable often coincides with the\n  lifetime of a resource (e.g. file) and therefore the variable is defined\n  at the place where the resource is acquired. The resource is freed,\n  when the variable goes out of scope.\n\n* The `*`, `&` and `&&` declarators are grouped with the name, not the type\n  (classical C-style) as in `char *string` instead of `char* string`. This\n  reflects the precedence rules of the language: `int &i` means that the name\n  `i` stands for a reference [to an object with type `int`], not that\n  `i` stands for an object of the type [reference to `int`].\n  Although this may seem like hairsplitting (both interpretations\n  have the same effect) it is crucial in the\n  definition of multiple variables, such\n  as\n  ```\n  struct dive *next, **pprev;\n  ```\n\n* We generally use explicit types in variable declarations for clarity.\n  Use `auto` sparingly and only in cases where code readability improves.\n  Two classical examples are:\n  - Iterators, whose type names often are verbose:\n    ```\n    auto it = m_trackers.find(when);\n    ```\n    is not only distinctly shorter than\n    ```\n    std::map<qint64, gpsTracker>::iterator it = m_trackers.find(when);\n    ```\n    it will also continue working if a different data structure is chosen.\n  - If the type is given in the same line anyway. Thus,\n    ```\n    auto service = std::make_unique<QLowEnergyService*>(sender());\n    ```\n    is easier to read than and conveys the same information as\n    ```\n    std::unique_ptr<QLowEnergyService> service = std::make_unique<QLowEnergyService>(sender());\n    ```\n\n* containers\n\n  The standard library (STL) containers are robust, but their usage may\n  appear verbose. Therefore, we have a few convenience functions in the\n  `core/ranges.h` header.\n  For example, to loop with an index variable, use\n  ```\n  for (auto [idx, v]: container) {\n    ...\n  }\n  ```\n\n* text strings\n\n  The default language of subsurface is US English so please use US English\n  spelling and terminology.\n  User-visible strings should be passed to the `tr()` function to enable\n  translation into other languages.\n  - like this\n    ```\n    QString msgTitle = tr(\"Check for updates.\");\n    ```\n  - rather than\n    ```\n    QString msgTitle = \"Check for updates.\";\n    ```\n\n  This works by default in classes (indirectly) derived from `QObject`. Each\n  string to be translated is associated with a context, which corresponds\n  to the class name. Classes that are not derived from `QObject` can generate\n  the `tr()` functions by using the `Q_DECLARE_TR_FUNCTIONS` macro:\n  ```\n  #include <QCoreApplication>\n  \n  class myClass {\n  \tQ_DECLARE_TR_FUNCTIONS(gettextfromC)\n  \t...\n  };\n  ```\n\n  As an alternative, which also works outside of class context, the `tr()`\n  function of a different class can be called. This avoids creating multiple\n  translations for the same string:\n  ```\n  gettextFromC::tr(\"%1km\")\n  ```\n\n  The `gettextFromC` class in the above example was created as a catch-all\n  context for translations accessed in core code. To use it from C, include\n  the `\"core/gettext.h\"` header and invoke the `translate()` macro:\n  ```\n  #include \"core/gettext.h\"\n  \n  report_error(translate(\"gettextFromC\", \"Remote storage and local data diverged\"));\n  ```\n  It is crucial to pass `\"gettextFromC\"` as a first macro argument so that Qt\n  is able to associate the string with the correct context.\n  The translate macro returns a cached C-style string, which is generated at runtime\n  when the particular translation string is encountered for the first time.\n  It remains valid during the whole application's life time.\n\n  Outside of function context, the `QT_TRANSLATE_NOOP` macro can be used as in\n  ```\n  struct ws_info_t ws_info[100] = {\n  \t{ QT_TRANSLATE_NOOP(\"gettextFromC\", \"integrated\"), 0 },\n  \t{ QT_TRANSLATE_NOOP(\"gettextFromC\", \"belt\"), 0 },\n  \t{ QT_TRANSLATE_NOOP(\"gettextFromC\", \"ankle\"), 0 },\n  \t{ QT_TRANSLATE_NOOP(\"gettextFromC\", \"backplate\"), 0 },\n  \t{ QT_TRANSLATE_NOOP(\"gettextFromC\", \"clip-on\"), 0 },\n  };\n  ```\n  Note that here, the texts will be scheduled for translation with the `\"gettextFromC\"`\n  context, but the array is only initialized with the original text. The actual\n  translation has to be performed later in code. For C-code, the `QT_TRANSLATE_NOOP`\n  macro is defined in the `\"core/gettext.h\"` header.\n\n* UI text style\n\n  These guidelines are designed to ensure consistency in presentation within\n  Subsurface.\n  Only the first word of multi-word text strings should be capitalized unless\n  a word would normally be capitalized mid-sentence, like Africa. This applies\n  to all UI text including menus, menu items, tool-tips, button text and label\n  text etc. e.g. \"Check for updates\" rather than \"Check for Updates\".\n  We also capitalize Subsurface (NOTE: not SubSurface) when referring to the\n  application itself.\n  Abbreviations should end with a period, e.g. \"temp.\" not \"temp\" for\n  temperature\n  Numerals in chemical formulae should use subscript characters e.g. O₂ not O2\n  Partial pressures in Subsurface are, by convention, abbreviated with a single\n  \"p\" rather than 2, as in pO₂ not ppO₂\n  Where more than one term exists for something, please choose the one already\n  in use within Subsurface e.g. Cylinder vs. Tank.\n\n\n* string manipulation\n\n - user interface\n\n    In UI part of the code use of `QString` methods is preferred, see this pretty\n    good guide in [`QString` documentation][1]\n\n - core components\n\n    In the core part of the code, std::string should be used.\n\n* memory management in core\n\n  In core code, objects are typically stored in containers, such as `std::vector<>` or\n  as subobjects of classes.\n\n  If an object has to be allocated on the heap, the owner keeps an `std::unique_ptr`.\n  To transfer ownership, use `std::move()`.\n\n* initialization and life time\n\n  By using subobjects, the life time of objects is well defined.\n  Consider a class A1 with the two subobjects B and C:\n  ```\n  class A1 {\n    struct B;\n    struct C;\n  };\n  ```\n  furthermode, consider a class A2 derived from A1 with the subobjects D and E:\n  ```\n  class A2 : public A1 {\n    struct D;\n    struct E;\n  };\n  ```\n  When creating an object of type A2, the constructors are run in the following order:\n    - B\n    - C\n    - A1\n    - D\n    - E\n    - A2\n  The destructors run in opposite order.\n  This means that C can *always* access B, but not vice-versa and so on.\n\n  Subobjects should be initialized using initializer lists, so that they are initoalized\n  only once.\n  \n* pointers and references\n\n  The difference between pointers and references can be confusing to C programmers,\n  as internally they are realized by the same mechanism. However, conceptually they\n  are different: a reference is a placeholder for a variable.\n\n  In particular this means two things:\n    - A reference cannot be 'reseated'. It stands for a different variable and only\n      that variable. There is no pointer arithmetic with references.\n    - A reference cannot be null. In fact any reasonable compiler will compile\n      ```\n        void f(int &f) {\n            return &f == nullptr ? 1 : 2;\n        }\n      ```\n      as\n      ```\n        f(int&):\n            mov     eax, 2\n            ret\n      ```\n\n  Thus, functions should in general take references, not pointers. A pointer argument is\n  basically only used if the argument is optional.\n\n* output parameters\n\n  If a function returns multiple values, generally don't return them in output parameters,\n  but return a structure of multiple values. This can be used in structured bindings:\n  ```\n    [val, i] = get_result();\n  ```\n\n## Sample Settings\n\n### Emacs\n\nThese lines in your `.emacs` file should get you fairly close when it comes\nto indentation – many of the other rules you have to follow manually\n\n```\n;; indentation\n(defun c-lineup-arglist-tabs-only (ignored)\n  \"Line up argument lists by tabs, not spaces\"\n  (let* ((anchor (c-langelem-pos c-syntactic-element))\n         (column (c-langelem-2nd-pos c-syntactic-element))\n         (offset (- (1+ column) anchor))\n         (steps (floor offset c-basic-offset)))\n    (* (max steps 1)\n       c-basic-offset)))\n\n(add-hook 'c-mode-common-hook\n          (lambda ()\n            ;; Add kernel style\n            (c-add-style\n             \"linux-tabs-only\"\n             '(\"linux\" (c-offsets-alist\n                        (arglist-cont-nonempty\n                         c-lineup-gcc-asm-reg\n                         c-lineup-arglist-tabs-only))))))\n\n(add-hook 'c-mode-hook\n          (lambda ()\n            (let ((filename (buffer-file-name)))\n              ;; Enable kernel mode for the appropriate files\n                (setq indent-tabs-mode t)\n                (c-set-style \"linux-tabs-only\"))))\n\n(add-hook 'c++-mode-hook\n          (lambda ()\n            (let ((filename (buffer-file-name)))\n              ;; Enable kernel mode for the appropriate files\n                (setq indent-tabs-mode t)\n                (c-set-style \"linux-tabs-only\"))))\n```\n\n### QtCreator\n\nThese settings seem to get indentation right in QtCreator. Making TAB\nalways adjust indent makes it hard to add hard tabs before '\\' when\ncreating continuing lines. Copying a tab with your mouse / ctrl-C and\ninserting it with ctrl-V seems to work around that problem (use Command\ninstead of ctrl on your Mac)\nSave this XML code below to a file, open Preferences (or Tools->Options)\nin QtCreator, pick C++ in the left column and then click on Import...\nto open the file you just created. Now you should have a \"Subsurface\"\nstyle that you can select which should work well for our coding style.\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE QtCreatorCodeStyle>\n<!-- Written by QtCreator 3.0.0, 2014-02-27T07:52:57. -->\n<qtcreator>\n <data>\n  <variable>CodeStyleData</variable>\n  <valuemap type=\"QVariantMap\">\n   <value type=\"bool\" key=\"AlignAssignments\">false</value>\n   <value type=\"bool\" key=\"AutoSpacesForTabs\">false</value>\n   <value type=\"bool\" key=\"BindStarToIdentifier\">true</value>\n   <value type=\"bool\" key=\"BindStarToLeftSpecifier\">false</value>\n   <value type=\"bool\" key=\"BindStarToRightSpecifier\">false</value>\n   <value type=\"bool\" key=\"BindStarToTypeName\">false</value>\n   <value type=\"bool\" key=\"ExtraPaddingForConditionsIfConfusingAlign\">false</value>\n   <value type=\"bool\" key=\"IndentAccessSpecifiers\">false</value>\n   <value type=\"bool\" key=\"IndentBlockBody\">true</value>\n   <value type=\"bool\" key=\"IndentBlockBraces\">false</value>\n   <value type=\"bool\" key=\"IndentBlocksRelativeToSwitchLabels\">false</value>\n   <value type=\"bool\" key=\"IndentClassBraces\">false</value>\n   <value type=\"bool\" key=\"IndentControlFlowRelativeToSwitchLabels\">true</value>\n   <value type=\"bool\" key=\"IndentDeclarationsRelativeToAccessSpecifiers\">true</value>\n   <value type=\"bool\" key=\"IndentEnumBraces\">false</value>\n   <value type=\"bool\" key=\"IndentFunctionBody\">true</value>\n   <value type=\"bool\" key=\"IndentFunctionBraces\">false</value>\n   <value type=\"bool\" key=\"IndentNamespaceBody\">false</value>\n   <value type=\"bool\" key=\"IndentNamespaceBraces\">false</value>\n   <value type=\"int\" key=\"IndentSize\">8</value>\n   <value type=\"bool\" key=\"IndentStatementsRelativeToSwitchLabels\">true</value>\n   <value type=\"bool\" key=\"IndentSwitchLabels\">false</value>\n   <value type=\"int\" key=\"PaddingMode\">2</value>\n   <value type=\"bool\" key=\"SpacesForTabs\">false</value>\n   <value type=\"int\" key=\"TabSize\">8</value>\n  </valuemap>\n </data>\n <data>\n  <variable>DisplayName</variable>\n  <value type=\"QString\">Subsurface</value>\n </data>\n</qtcreator>\n```\n\n### Vim\n\nAs everybody knows vim is a way better editor than emacs and thus needs to be\nin this file too. Put this into your `.vimrc` and this should produce something\nclose to our coding standards.\n\n```\n\" Subsurface coding style\nfiletype plugin indent on\nfiletype detect\nset cindent tabstop=8 shiftwidth=8 cinoptions=l1,:0,(0,g0\n\n\" And some sane defaults, optional, but quite nice\nset nocompatible\nsyntax on\ncolorscheme default\nset hls\nset is\n\n\" The default blue is just impossible to see on a black terminal\nhighlight Comment ctermfg=Brown\n\n\" clearly point out when someone have trailing spaces\nhighlight ExtraWhitespace ctermbg=red guibg=red\n\n\" Show trailing whitespace and spaces before a tab:\nmatch ExtraWhitespace /\\s\\+$\\| \\+\\ze\\t/\n```\n\n[1]: http://doc.qt.io/qt-5/qstring.html#manipulating-string-data\n[2]: https://github.com/Subsurface/subsurface/blob/master/core/membuffer.h\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.0849609375,
          "content": "# Contributing to Subsurface\n\n## Ways to Contribute\n\nThere are many ways in which you can contribute. We are always looking for testers who are willing to test the code while it is being developed. We especially need people running Windows and Mac (as the majority of the active developers are Linux people). We are also always looking for volunteers who help reviewing and improving the documentation. And very importantly we are looking for translators willing to translate the software into different languages. Our translations are centrally handled at [Transifex][3] – please sign up for an account there and then request to join the [Subsurface Team][4].\n\nIf you would like to contribute financially to help us cover the cost of running a free cloud synchronisation service for dive logs, you can do so by sponsoring this project.\n\n\n## Joining the Subsurface Contributors' Community\n\nTo get 'into the loop' for what is going on in Subsurface you should join our [User Forum][2], and start watching the [subsurface/subsurface repository on GitHub][1]. Conversation in the mailing list is in English – even though Subsurface itself and the website and documentation are available in many languages, the shared language the contributors communicate in is English. Actually \"Broken English\" is just fine… :-)\n\n\n## Tips for Code Contributions\n\n### Code Change Submissions\n\nIf you would like to contribute patches that fix bugs or add new features, that is of course especially welcome. If you are looking for places to start, look at the open bugs in our [bug tracker][5].\n\nHere is a very brief introduction on creating commits that you can either send as [pull requests][6] on our main GitHub repository or send as emails to the mailing list. Much more details on how to use Git can be found at the [Git user manual][7].\n\nStart with getting the latest source.\n\n    cd subsurface\n    git checkout master\n    git pull\n\nok, now we know you're on the latest version. Create a working branch to keep your development in:\n\n    git checkout -b devel\n\nEdit the code (or documentation), compile, test… then create a commit:\n\n    git commit -s -a\n\nDepending on your OS this will open a default editor – usually you can define which by setting the environment variable `GIT_EDITOR`. Here you enter your commit message. The first line is the title of your commit. Keep it brief and to the point. Then a longer explanation (more on this and the fact that we insist on all contributions containing a Signed-off-by: line below).\n\nIf you want to change the commit message, `git commit --amend` is the way to go. Feel free to break your changes into multiple smaller commits. Then, when you are done there are two directions to go, which one you find easier depends a bit on how familiar you are with GitHub. You can either push your branch to GitHub and create a [pull requests on GitHub][6], or you run:\n\n    git format-patch master..devel\n\nWhich creates a number of files that have names like `0001-Commit-title.patch`, which you can then send to our developer mailing list.\n\n\n### Developer Certificate of Origin (DCO)\n\nWhen sending code, please either send signed-off patches or a pull request with signed-off commits. If you don't sign off on them, we will not accept them. This means adding a line that says \"Signed-off-by: Name \\<Email\\>\" at the end of each commit, indicating that you wrote the code and have the right to pass it on as an open source patch.\n\nSee: [Signed-off-by Lines][8]\n\n\n### Commit Messages\n\nAlso, please write good Git commit messages. A good commit message looks like this:\n\n    Header line: explaining the commit in one line\n    \n    Body of commit message is a few lines of text, explaining things\n    in more detail, possibly giving some background about the issue\n    being fixed, etc etc.\n    \n    The body of the commit message can be several paragraphs, and\n    please do proper word-wrap and keep columns shorter than about\n    74 characters or so. That way \"git log\" will show things\n    nicely even when it's indented.\n    \n    Reported-by: whoever-reported-it\n    Signed-off-by: Your Name <you@example.com>\n\nThat header line really should be meaningful, and really should be just one line. The header line is what is shown by tools like gitk and shortlog, and should summarize the change in one readable line of text, independently of the longer explanation.\n\nThe preferred way to write a commit message is using [imperative mood][11], e.g. \"Make foo do xyz\" instead of \"This patch makes foo do xyz\" or \"I made foo do xyz\", as if you are giving commands or requests to the code base.\n\n![gitk sample][9]\n\n_Example with gitk_\n\n\n### Changelog\n\nAdditionally when important changes to behaviors, fixes or new feature are introduced an entry must be added to `CHANGELOG.md` file. Always add new entries at the very top of the file above other existing entries. Use this layout for new entries:\n\n    Area: Details about the change [reference thread / issue]\n\nWhen multiple areas are affected list the areas separated with a /:\n\n    Area1/Area2: Detail about the change [reference thread / issue]\n\nHere is a (non exhaustive) list of Areas that can be used:\n\n* Bluetooth\n* Cloud-storage\n* Desktop\n* Dive pictures\n* Import\n* Libdivecomputer\n* Map-widget\n* Mobile\n* Planner\n* Printing\n* Profile\n\n\n### Coding Style\n\nIn order to make reviews simpler and have contributions merged faster in the code base, please follow Subsurface project's coding style and coding conventions described in the [CodingStyle][10] file.\n\n[1]: https://github.com/subsurface/subsurface\n[2]: https://groups.google.com/g/subsurface-divelog\n[3]: https://www.transifex.com/\n[4]: https://explore.transifex.com/subsurface/subsurface/\n[5]: https://github.com/Subsurface/subsurface/issues\n[6]: https://github.com/Subsurface/subsurface/pulls\n[7]: https://www.kernel.org/pub/software/scm/git/docs/user-manual.html\n[8]: https://gerrit-review.googlesource.com/Documentation/user-signedoffby.html\n[9]: https://github.com/subsurface/subsurface/Documentation/images/Screenshot-gitk-subsurface-1.png \"Example with gitk\"\n[10]: https://github.com/Subsurface/subsurface/blob/master/CODINGSTYLE.md\n[11]: https://en.wikipedia.org/wiki/Imperative_mood\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 14.9423828125,
          "content": "# Building Subsurface from Source\n\nSubsurface uses quite a few open source libraries and frameworks to do its\njob. The most important ones include libdivecomputer, Qt, libxml2, libxslt,\nlibsqlite3, libzip, and libgit2.\n\nBelow are instructions for building Subsurface\n- on some popular Linux distributions,\n- MacOSX,\n- Windows (cross-building)\n- Android (cross-building)\n- iOS (cross-building)\n\n\n## Getting Subsurface source\n\nYou can get the sources to the latest development version from our git\nrepository:\n\n```\ngit clone http://github.com/Subsurface/subsurface.git\ncd subsurface\ngit submodule init # this will give you our flavor of libdivecomputer\n```\n\nYou keep it updated by doing:\n\n```\ngit checkout master\ngit pull -r\ngit submodule update\n```\n\n\n### Our flavor of libdivecomputer\n\nSubsurface requires its own flavor of libdivecomputer which is inclduded\nabove as git submodule\n\nThe branches won't have a pretty history and will include ugly merges,\nbut they should always allow a fast forward pull that tracks what we\nbelieve developers should build against. All our patches are contained\nin the `Subsurface-DS9` branch.\n\nThis should allow distros to see which patches we have applied on top of\nupstream. They will receive force pushes as we rebase to newer versions of\nupstream so they are not ideal for ongoing development (but they are of\ncourse easy to use for distributions as they always build \"from scratch\",\nanyway).\n\nThe rationale for this is that we have no intention of forking the\nproject. We simply are adding a few patches on top of their latest\nversion and want to do so in a manner that is both easy for our\ndevelopers who try to keep them updated frequently, and anyone packaging\nSubsurface or trying to understand what we have done relative to their\nrespective upstreams.\n\n\n### Getting Qt5\n\nWe use Qt5 in order to only maintain one UI across platforms.\n\nQt5.9.1 is the oldest version supported if ONLY building Subsurface\nQt5.12 is the oldest version supported if also building Subsurface-mobile\n\nMost Linux distributions include a new enough version of Qt (and if you are on\na distro that still ships with an older Qt, likely your C compiler is also not\nnew enough to build Subsurface).\n\nIf you need Qt (likely on macOS) or want a newer version than provided by your\nLinux distro, you can install a separate version that Subsurface will use.\nAs of Qt5.15 it has become a lot harder to download and install Qt - you\nnow need a Qt account and the installer tool has a new space age look and\nsignificantly reduced flexibility.\n\nAs of this writing, there is thankfully a thirdparty offline installer still\navailable:\n\n```\npip3 install aqtinstall\naqt install -O <Qt Location> 5.15.2 mac desktop\n```\n\n(or whatever version / OS you need). This installer is surprisingly fast\nand seems well maintained - note that we don't use this for Windows as\nthat is completely built from source using MXE.\n\nIn order to use this Qt installation, simply add it to your PATH:\n\n```\nPATH=<Qt Location>/<version>/<type>/bin:$PATH\n```\n\nQtWebKit is needed, if you want to print, but no longer part of Qt5,\nso you need to download it and compile. In case you just want to test\nwithout print possibility omit this step.\n\n```\ngit clone -b 5.212 https://github.com/qt/qtwebkit\nmkdir -p qtwebkit/WebKitBuild/Release\ncd qtwebkit/WebKitBuild/Release\ncmake -DPORT=Qt -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=/<Qt Location>/<version>/<type>/lib/cmake/Qt5 ../..\nmake install\n```\n\n\n### Other third party library dependencies\n\nIn order for our cloud storage to be fully functional you need\nlibgit2 0.26 or newer.\n\n\n### cmake build system\n\nOur main build system is based on cmake. But qmake is needed\nfor the googlemaps plugin and the iOS build.\n\nDownload from https://cmake.org/download and follow the instructions\nto install it or alternatively follow the instruction specific to a\ndistribution (see build instructions).\n\n\n\n## Build options for Subsurface\n\nThe following options are recognised when passed to cmake:\n\n`-DCMAKE_BUILD_TYPE=Release` create a release build\n`-DCMAKE_BUILD_TYPE=Debug` create a debug build\n\nThe Makefile that was created using cmake can be forced into a much more\nverbose mode by calling\n\n```\nmake VERBOSE=1\n```\n\nMany more variables are supported, the easiest way to interact with them is\nto call\n\n```\nccmake .\n```\n\nin your build directory.\n\n\n### Building the development version of Subsurface under Linux\n\nOn Fedora you need\n\n```\nsudo dnf install autoconf automake bluez-libs-devel cmake gcc-c++ git \\\n    libcurl-devel libsqlite3x-devel libssh2-devel libtool libudev-devel \\\n    libusbx-devel libxml2-devel libxslt-devel make \\\n    qt5-qtbase-devel qt5-qtconnectivity-devel qt5-qtdeclarative-devel \\\n    qt5-qtlocation-devel qt5-qtscript-devel qt5-qtsvg-devel \\\n    qt5-qttools-devel qt5-qtwebkit-devel redhat-rpm-config \\\n    bluez-libs-devel libgit2-devel libzip-devel libmtp-devel libraw-devel\n```\n\n\nPackage names are sadly different on OpenSUSE\n\n```\nsudo zypper install git gcc-c++ make autoconf automake libtool cmake libzip-devel \\\n    libxml2-devel libxslt-devel sqlite3-devel libusb-1_0-devel \\\n    libqt5-linguist-devel libqt5-qttools-devel libQt5WebKitWidgets-devel \\\n    libqt5-qtbase-devel libQt5WebKit5-devel libqt5-qtsvg-devel \\\n    libqt5-qtscript-devel libqt5-qtdeclarative-devel \\\n    libqt5-qtconnectivity-devel libqt5-qtlocation-devel libcurl-devel \\\n    bluez-devel libgit2-devel libmtp-devel libraw-devel\n```\nOn Debian Bookworm this seems to work\n```\nsudo apt install \\\n    autoconf automake cmake g++ git libbluetooth-dev libcrypto++-dev \\\n    libcurl4-openssl-dev libgit2-dev libqt5qml5 libqt5quick5 libqt5svg5-dev \\\n    libqt5webkit5-dev libsqlite3-dev libssh2-1-dev libssl-dev libtool \\\n    libusb-1.0-0-dev libxml2-dev libxslt1-dev libzip-dev make pkg-config \\\n    qml-module-qtlocation qml-module-qtpositioning qml-module-qtquick2 \\\n    qt5-qmake qtchooser qtconnectivity5-dev qtdeclarative5-dev \\\n    qtdeclarative5-private-dev qtlocation5-dev qtpositioning5-dev \\\n    qtscript5-dev qttools5-dev qttools5-dev-tools libmtp-dev libraw-dev\n```\n\nIn order to build and run mobile-on-desktop, you also need\n\n```\nsudo apt install \\\n    qtquickcontrols2-5-dev qml-module-qtquick-window2 qml-module-qtquick-dialogs \\\n    qml-module-qtquick-layouts qml-module-qtquick-controls2 qml-module-qtquick-templates2 \\\n    qml-module-qtgraphicaleffects qml-module-qtqml-models2 qml-module-qtquick-controls\n```\n\n\nPackage names for Ubuntu 21.04\n\n```\nsudo apt install \\\n    autoconf automake cmake g++ git libbluetooth-dev libcrypto++-dev \\\n    libcurl4-gnutls-dev libgit2-dev libqt5qml5 libqt5quick5 libqt5svg5-dev \\\n    libqt5webkit5-dev libsqlite3-dev libssh2-1-dev libssl-dev libtool \\\n    libusb-1.0-0-dev libxml2-dev libxslt1-dev libzip-dev make pkg-config \\\n    qml-module-qtlocation qml-module-qtpositioning qml-module-qtquick2 \\\n    qt5-qmake qtchooser qtconnectivity5-dev qtdeclarative5-dev \\\n    qtdeclarative5-private-dev qtlocation5-dev qtpositioning5-dev \\\n    qtscript5-dev qttools5-dev qttools5-dev-tools libmtp-dev libraw-dev\n```\n\nIn order to build and run mobile-on-desktop, you also need\n\n```\nsudo apt install \\\n    qtquickcontrols2-5-dev qml-module-qtquick-window2 qml-module-qtquick-dialogs \\\n    qml-module-qtquick-layouts qml-module-qtquick-controls2 qml-module-qtquick-templates2 \\\n    qml-module-qtgraphicaleffects qml-module-qtqml-models2 qml-module-qtquick-controls\n```\n\n\nOn Raspberry Pi (Raspian Buster and Ubuntu Mate 20.04.1) this seems to work\n\n```\nsudo apt install \\\n    autoconf automake cmake g++ git libbluetooth-dev libcrypto++-dev \\\n    libcurl4-gnutls-dev libgit2-dev libqt5qml5 libqt5quick5 libqt5svg5-dev \\\n    libqt5webkit5-dev libsqlite3-dev libssh2-1-dev libssl-dev libtool \\\n    libusb-1.0-0-dev libxml2-dev libxslt1-dev libzip-dev make pkg-config \\\n    qml-module-qtlocation qml-module-qtpositioning qml-module-qtquick2 \\\n    qt5-qmake qtchooser qtconnectivity5-dev qtdeclarative5-dev \\\n    qtdeclarative5-private-dev qtlocation5-dev qtpositioning5-dev \\\n    qtscript5-dev qttools5-dev qttools5-dev-tools libmtp-dev libraw-dev\n```\n\nIn order to build and run mobile-on-desktop, you also need\n\n```\nsudo apt install \\\n    qtquickcontrols2-5-dev qml-module-qtquick-window2 qml-module-qtquick-dialogs \\\n    qml-module-qtquick-layouts qml-module-qtquick-controls2 qml-module-qtquick-templates2 \\\n    qml-module-qtgraphicaleffects qml-module-qtqml-models2 qml-module-qtquick-controls\n```\n\n\nNote that on Ubuntu Mate on the Raspberry Pi, you may need to configure\nsome swap space in order for the build to complete successfully. There is no\nswap space configured by default. See the dphys-swapfile package.\n\nOn Raspberry Pi OS with Desktop (64-bit) Released April 4th, 2022, this seems\nto work\n\n```\nsudo apt install \\\n    autoconf automake cmake g++ git libbluetooth-dev libcrypto++-dev \\\n    libcurl4-gnutls-dev libgit2-dev libqt5qml5 libqt5quick5 libqt5svg5-dev \\\n    libqt5webkit5-dev libsqlite3-dev libssh2-1-dev libssl-dev libtool \\\n    libusb-1.0-0-dev libxml2-dev libxslt1-dev libzip-dev make pkg-config \\\n    qml-module-qtlocation qml-module-qtpositioning qml-module-qtquick2 \\\n    qt5-qmake qtchooser qtconnectivity5-dev qtdeclarative5-dev \\\n    qtdeclarative5-private-dev qtlocation5-dev qtpositioning5-dev \\\n    qtscript5-dev qttools5-dev qttools5-dev-tools libmtp-dev libraw-dev\n```\n\nNote that you'll need to increase the swap space as the default of 100MB\ndoesn't seem to be enough.  1024MB worked on a 3B+.\n\nIf maps aren't working, copy the googlemaps plugin\nfrom `<build_dir>/subsurface/googlemaps/build/libqtgeoservices_googlemaps.so`\nto `/usr/lib/aarch64-linux-gnu/qt5/plugins/geoservices/`.\n\nIf Subsurface can't seem to see your dive computer on `/dev/ttyUSB0`, even after\nadjusting your account's group settings (see note below about usermod), it\nmight be that the FTDI driver doesn't recognize the VendorID/ProductID of your\ncomputer. Follow the instructions here:\n\nhttps://www.ftdichip.com/Support/Documents/TechnicalNotes/TN_101_Customising_FTDI_VID_PID_In_Linux(FT_000081).pdf\n\nIf you're unsure of the VID/PID of your device, plug your dive computer in to\nyour host and run `dmesg`. That should show the codes that are needed to\nfollow TN_101.\n\nOn PCLinuxOS you appear to need the following packages\n\n```\nsu -c \"apt-get install -y autoconf automake cmake gcc-c++ git libtool \\\n    lib64bluez-devel lib64qt5bluetooth-devel lib64qt5concurrent-devel \\\n    lib64qt5help-devel lib64qt5location-devel lib64qt5quicktest-devel \\\n    lib64qt5quickwidgets-devel lib64qt5script-devel lib64qt5svg-devel \\\n    lib64qt5test-devel lib64qt5webkitwidgets-devel lib64qt5xml-devel \\\n    lib64ssh2-devel lib64usb1.0-devel lib64zip-devel qttools5 qttranslations5\"\n```\n\nIn order to build Subsurface, use the supplied build script. This should\nwork on most systems that have all the prerequisite packages installed.\n\nYou should have Subsurface sources checked out in a sane place, something\nlike this:\n\n```\nmkdir -p ~/src\ncd ~/src\ngit clone https://github.com/Subsurface/subsurface.git\n./subsurface/scripts/build.sh # <- this step will take quite a while as it\n                              #    compiles a handful of libraries before\n                              #    building Subsurface\n```\n\nNow you can run Subsurface like this:\n\n```\ncd ~/src/subsurface/build\n./subsurface\n```\n\n\nNote: on many Linux versions (for example on Kubuntu 15.04) the user must\nbelong to the `dialout` group.\n\nYou may need to run something like\n\n```\nsudo usermod -a -G dialout $USER\n```\n\nwith your correct username and log out and log in again for that to take\neffect.\n\nIf you get errors like:\n\n```\n./subsurface: error while loading shared libraries: libGrantlee_Templates.so.5: cannot open shared object file: No such file or directory\n```\n\nYou can run the following command:\n\n```\nsudo ldconfig ~/src/install-root/lib\n```\n\n\n### Building Subsurface under MacOSX\n\nWhile it is possible to build all required components completely from source,\nat this point the preferred way to build Subsurface is to set up the build\ninfrastructure via Homebrew and then build the dependencies from source.\n\n0. You need to have XCode installed. The first time (and possibly after updating OSX)\n\n```\nxcode-select --install\n```\n\n1. install Homebrew (see https://brew.sh) and then the required build infrastructure:\n\n```\nbrew install autoconf automake libtool pkg-config gettext confuse\n```\n\n2. install Qt\n\ndownload the macOS installer from https://download.qt.io/official_releases/online_installers\nand use it to install the desired Qt version. At this point the latest Qt5 version is still\npreferred over Qt6.\n\nIf you plan to deploy your build to an Apple Silicon Mac, you may have better results with\nBluetooth connections if you install Qt5.15.13. If Qt5.15.13 is not available via the\ninstaller, you can download from https://download.qt.io/official_releases/qt/5.15/5.15.13\nand build using the usual configure, make, and make install. Qt is also available as Homebrew package\n\n\n3. now build Subsurface\n\n```\ncd ~/src; bash subsurface/scripts/build.sh -build-deps\n```\n\nif you are building against Qt6 (still experimental) you can create a universal binary with\n\n```\ncd ~/src; bash subsurface/scripts/build.sh -build-with-qt6 -build-deps -fat-build\n```\n\n4. Sign the package\n```\ncodesign --options runtime --keychain $HOME/Library/Keychains/login.keychain --sign - --deep --force --entitlements subsurface/build/entitlements-mac-dev.plist subsurface/build/Subsurface.app\n```\n\nAfter the above is done, Subsurface.app will be available in the\nsubsurface/build directory. You can run Subsurface with the command\n\nA. `open subsurface/build/Subsurface.app`\n   this will however not show diagnostic output\n\nB. `subsurface/build/Subsurface.app/Contents/MacOS/Subsurface`\n   the [Tab] key is your friend :-)\n\nDebugging can be done with either Xcode or QtCreator.\n\nTo install the app for all users, move subsurface/build/Subsurface.app to /Applications.\n\n\n### Cross-building Subsurface on MacOSX for iOS\n\n0. build SubSurface under MacOSX and iOS\n\n1. `cd <repo>/..; bash <repo>/scripts/build.sh -build-deps -both`\nnote: this is mainly done to ensure all external dependencies are downloaded and set\n      to the correct versions\n\n2. follow [these instructions](packaging/ios/README.md)\n\n\n\n### Cross-building Subsurface on Linux for Windows\n\nSubsurface for Windows builds on linux by using the [MXE (M cross environment)](https://github.com/mxe/mxe). The easiest way to do this is to use a Docker container with a pre-built MXE for Subsurface by following [these instructions](packaging/windows/README.md).\n\n\n### Building Subsurface on Windows\n\nThis is NOT RECOMMENDED. To the best of our knowledge there is one single\nperson who regularly does this. The Subsurface team does not provide support\nfor Windows binary build from sources natively under Windows...\n\nThe lack of a working package management system for Windows makes it\nreally painful to build Subsurface natively under Windows,\nso we don't support that at all.\n\nBut if you want to build Subsurface on a Windows system, the docker based [cross-build for Windows](packaging/windows/README.md) works just fine in WSL2 on Windows.\n\n\n### Cross-building Subsurface on Linux for Android\n\nFollow [these instructions](packaging/android/README.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8232421875,
          "content": "# Subsurface\n\n[![Windows](https://github.com/subsurface/subsurface/actions/workflows/windows.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/windows.yml)\n[![Mac](https://github.com/subsurface/subsurface/actions/workflows/mac.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/mac.yml)\n[![iOS](https://github.com/subsurface/subsurface/actions/workflows/ios.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/ios.yml)\n[![Android](https://github.com/subsurface/subsurface/actions/workflows/android.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/android.yml)\n\n[![Snap](https://github.com/subsurface/subsurface/actions/workflows/linux-snap.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/linux-snap.yml)\n[![Ubuntu 16.04 / Qt 5.15-- for AppImage](https://github.com/subsurface/subsurface/actions/workflows/linux-ubuntu-16.04-5.12-appimage.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/linux-ubuntu-16.04-5.12-appimage.yml)\n[![Ubuntu 24.04 / Qt 5.15--](https://github.com/subsurface/subsurface/actions/workflows/linux-ubuntu-24.04-5.15.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/linux-ubuntu-24.04-5.15.yml)\n[![Fedora 35 / Qt 6--](https://github.com/subsurface/subsurface/actions/workflows/linux-fedora-35-qt6.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/linux-fedora-35-qt6.yml)\n[![Debian trixie / Qt 5.15--](https://github.com/subsurface/subsurface/actions/workflows/linux-debian-trixie-5.15.yml/badge.svg)](https://github.com/subsurface/subsurface/actions/workflows/linux-debian-trixie-5.15.yml)\n\n[![Coverity Scan Results](https://scan.coverity.com/projects/14405/badge.svg)](https://scan.coverity.com/projects/subsurface-divelog-subsurface)\n\nSubsurface can be found at http://subsurface-divelog.org\n\nOur user forum is at http://subsurface-divelog.org/user-forum/\n\nReport bugs and issues at https://github.com/Subsurface/subsurface/issues\n\nLicense: GPLv2\n\nWe are releasing 'nightly' builds of Subsurface that are built from the latest version of the code. Versions of this build for Windows, macOS, Android (requiring sideloading), and a Linux AppImage can be downloaded from the [Latest Dev Release](https://www.subsurface-divelog.org/latest-release/) page on [our website](https://www.subsurface-divelog.org/). Alternatively, they can be downloaded [directly from GitHub](https://github.com/subsurface/nightly-builds/releases). Additionally, those same versions are\nposted to the Subsurface-daily repos on Ubuntu Launchpad, Fedora COPR, and\nOpenSUSE OBS, and released to [Snapcraft](https://snapcraft.io/subsurface) into the 'edge' channel of subsurface.\n\nYou can get the sources to the latest development version from the git\nrepository:\n\n```\ngit clone https://github.com/Subsurface/subsurface.git\n```\n\nYou can also fork the repository and browse the sources at the same site,\nsimply using https://github.com/Subsurface/subsurface\n\nAdditionally, artifacts for Windows, macOS, Android, Linux AppImage, and iOS (simulator build) are generated for all open pull requests and linked in pull request comments. Use these if you want to test the changes in a specific pull request and provide feedback before it has been merged.\n\nIf you want a more stable version that is a little bit more tested you can get this from the [Curent Release](https://www.subsurface-divelog.org/current-release/) page on [our website](https://www.subsurface-divelog.org/).\n\nDetailed build instructions can be found in the [INSTALL.md](/INSTALL.md) file.\n\n## System Requirements\n\nOn desktop, the integrated Googlemaps feature of Subsurface requires a GPU\ndriver that has support for at least OpenGL 2.1. If your driver does not\nsupport that, you may have to run Subsurface in software renderer mode.\n\nSubsurface will automatically attempt to detect this scenario, but in case\nit doesn't you may have to enable the software renderer manually with\nthe following:\n1) Learn how to set persistent environment variables on your OS\n2) Set the environment variable 'QT_QUICK_BACKEND' with the value of 'software'\n\n## Basic Usage\n\nInstall and start from the desktop, or you can run it locally from the\nbuild directory:\n\nOn Linux:\n\n```\n$ ./subsurface\n```\n\nOn Mac:\n\n```\n$ open Subsurface.app\n```\n\nNative builds on Windows are not really supported (the official Windows\ninstallers are cross-built on Linux).\n\nYou can give a data file as command line argument, or (once you have\nset this up in the Preferences) Subsurface picks a default file for\nyou when started from the desktop or without an argument.\n\nIf you have a dive computer supported by libdivecomputer, you can just\nselect \"Import from Divecomputer\" from the \"Import\" menu, select which\ndive computer you have (and where it is connected if you need to - note\nthat there's a special selection for Bluetooth dive computers), and click\non \"Download\".\n\nThe latest list of supported dive computers can be found in the file\nSupportedDivecomputers.txt.\n\nMuch more detailed end user instructions can be found from inside\nSubsurface by selecting Help (typically F1). When building from source\nthis is also available as Documentation/user-manual.html. The\ndocumentation for the latest release is also available on-line\nhttp://subsurface-divelog.org/documentation/\n\n## Contributing\n\nThere is a user forum for questions, bug reports, and feature requests:\nhttps://groups.google.com/g/subsurface-divelog\n\nIf you want to contribute code, please open a pull request with signed-off\ncommits at https://github.com/Subsurface/subsurface/pulls\n(alternatively, you can also send your patches as emails to the developer\nmailing list).\n\nEither way, if you don't sign off your patches, we will not accept them.\nThis means adding a line that says \"Signed-off-by: Name <email>\" at the\nend of each commit, indicating that you wrote the code and have the right\nto pass it on as an open source patch under the GPLv2 license.\n\nSee: http://developercertificate.org/\n\nAlso, please write good git commit messages.  A good commit message\nlooks like this:\n\n```\nHeader line: explain the commit in one line (use the imperative)\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n74 characters or so. That way \"git log\" will show things\nnicely even when it's indented.\n\nMake sure you explain your solution and why you're doing what you're\ndoing, as opposed to describing what you're doing. Reviewers and your\nfuture self can read the patch, but might not understand why a\nparticular solution was implemented.\n\nReported-by: whoever-reported-it\nSigned-off-by: Your Name <you@example.com>\n```\n\nwhere that header line really should be meaningful, and really should be\njust one line.  That header line is what is shown by tools like gitk and\nshortlog, and should summarize the change in one readable line of text,\nindependently of the longer explanation. Please use verbs in the\nimperative in the commit message, as in \"Fix bug that...\", \"Add\nfile/feature ...\", or \"Make Subsurface...\"\n\n## A bit of Subsurface history\n\nIn fall of 2011, when a forced lull in kernel development gave him an\nopportunity to start on a new endeavor, Linus Torvalds decided to tackle\nhis frustration with the lack of decent divelog software on Linux.\n\nSubsurface is the result of the work of him and a team of developers since\nthen. It now supports Linux, Windows and MacOS and allows data import from\na large number of dive computers and several existing divelog programs. It\nprovides advanced visualization of the key information provided by a\nmodern dive computer and allows the user to track a wide variety of data\nabout their diving.\n\nIn fall of 2012 Dirk Hohndel took over as maintainer of Subsurface.\n"
        },
        {
          "name": "README_TESTING.md",
          "type": "blob",
          "size": 2.7060546875,
          "content": "Testing subsurface:\n\nSubsurface contains a number of tests to ensure the stability of the product, these tests can be used\nmanually as they are in the build process.\n\nMaking the tests available is automatic, whenever building either desktop or mobile (for desktop) \nthe tests are created.\n\nThe source code for the tests are found in\n- subsurface/tests\nand the executables are (after creation) found in\n- subsurface/build/tests\nor \n- subsurface/build-mobile/tests\n\nTo run a specific test do as in this example:\ncd subsurface/<build directory>/tests\n./TestTagList\n\nTo run the whole suite do:\ncd subsurface/<build directory>/tests\nctest\n\nTo get more verbose (a lot more) do:\ncd subsurface/<build directory>/tests\nctest -V\n\nhint try \"man ctest\" or \"ctest --help\"\n\nIf you have multiple versions of Qt installed,\nyou might get a \"plugin missing error\", you can fix that by doing\n\nexport QT_QPA_PLATFORM_PLUGIN_PATH=~/Qt/5.13.2/clang_64/plugins\n(of course substitute 5.13.2 with your preferred version)\n\nWe need more tests so please have fun.\n\nif you just want to create a new test case:\n\n1) Create a new private slot on an already created test class\n2) Implement the test there, and compare the expected result with the\ncorrect result with QCOMPARE:\n\nvoid testRedCeiling();\ntestRedCeiling()\n{\n\tload_dive(\"../dive/testDive.xml\");\n\tcalculated_ceiling();\n\tQCOMPARE( dive->ceiling->color(), QColor(\"red\"));\n}\n\n3) build the system\n4) Run the test case and see result\n\nif you want to create a new test\n\n1) amend subsurface/tests/CMakeLists.txt \n1.1) there are 3 places where the test needs to be added\n1.1.1) simplest way is to search for e.g. TestPlannerShared and add your test in a similar way\n2) Create the source files (.h and .cpp all lowercase)\n2.1) simplest way is to copy one of the other test sources\n3) build system\n4) correct any errors\n5) run test\n5.1) subsurface/<build directory>/tests/Test<name>\n6) Fix the test case\n\nIf the color is not QColor(\"red\"), when you run the test you will get a\nfailure. Then you run a command to get a more verbose output and see in\nwhich part the test fails.\n\n$ ctest -V\n\n7) submit PR to get the test merged into the product.\n\nHint look at the existing test cases if you run into trouble or need more\nideas. E.g. running following command will show the first test cases\nwritten for unit conversions:\n\nAlso the Qt documentation is good source for more information:\n\nhttp://qt-project.org/doc/qt-5/qtest.html\n\nThere are three main test macros that we use, but of course many more\nare available (check the Qt documentation):\n\nQCOMPARE(value, expected)\nQVERIFY(boolean)\nQVERIFY2(boolean, \"error message on fail\")\n\nIf expecting a test case to fail, use\n\nQEXPECT_FAIL(\"\", \"This test case fails, as it is not yet fully implemented\", Continue);\n"
        },
        {
          "name": "Readme.ubuntu",
          "type": "blob",
          "size": 3.1220703125,
          "content": "Building Ubuntu packages of Subsurface\n--------------------------------------\n\nThese steps describe roughly, how one can create Ubuntu packages out of\nSubsurface and publish them in Launchpad.\n\nWe have a more complete shell script now under packaging/ubuntu, but the\ndetails in this file are still helpful to understand how all this works.\n\nYou need quite a bit of packages installed for all this to work, but that is\nnot described here. The contents of control, rules and other files edited can\nbe based on the files under packaging/ubuntu/debian.  GPG is used to sign the\nchanges file and SSH keys are required for the upload to Launchpad.\n\n---8<---\n# First we need to create a source directory and have the sources of the\n# latest version there\n\nversion=\"4.2.90\"\nmkdir subsurface-${version}\ncd subsurface-git\ngit archive --format=tar v${version} | tar -xf - -C ../subsurface${version}/\ncd ../subsurface${version}\n\n# Then we create the source tarball and \"Debianize\" the sources with\n# dh_make\n\ndh_make --email miika.turkia@gmail.com -c gpl2 --createorig --single\n\n# Next step is to fix the control files\n\nrm debian/*.ex debian/*.EX debian/README.*\nvi debian/{changelog,copyright,control,rules}\n\n# Generating the build instructions that can be uploaded to Launchpad\n# (or tested first locally with pbuilder). Following assumes that the\n# version initially is \"trusty\"\n\ndebuild -S\n\n# To test locally, one needs pbuilder set up properly\n\nsudo pbuilder build subsurface_${version}-0exp1ppa1~trusty.dsc\n\n# Once everything is working properly, create the other supported\n# releases and upload them all to Launchpad.\n\nsed -i 's/trusty/utopic/g' debian/changelog && debuild  -S\nsed -i 's/utopic/precise/g' debian/changelog && debuild  -S\n\ndput ppa:subsurface/subsurface-beta subsurface_${version}-0exp1ppa1~trusty_source.changes\ndput ppa:subsurface/subsurface-beta subsurface_${version}-0exp1ppa1~utopic_source.changes\ndput ppa:subsurface/subsurface-beta subsurface_${version}-0exp1ppa1~precise_source.changes\n---8<---\n\nCurrent dependencies are the following:\n\nBuild-Depends: debhelper (>= 8.0.0), cmake, libdivecomputer-dev (>=\n0.4.2), cdbs, libqt4-dev, qt4-qmake, libxml2-dev, libxslt1-dev,\nzlib1g-dev, libusb-1.0-0-dev, libzip-dev, libsqlite3-dev, libqtwebkit-dev,\npkg-config, libgit2-dev, asciidoc\n\nDepends: ${shlibs:Depends}, ${misc:Depends}, libdivecomputer0 (>= 0.4.2)\n\nAnd the rules file contains only the following includes:\n\ninclude /usr/share/cdbs/1/rules/debhelper.mk\ninclude /usr/share/cdbs/1/class/qmake.mk\n\n\nBuilding Ubuntu packages of libdivecomputer\n-------------------------------------------\n\nBuilding libdivecomputer is mostly the same as building Subsurface.\nHowever, one must remove the line \"usr/share/pkgconfig/*\" from\ndebian/libdivecomputer-dev.install. Also \"debianizing\" the sources\ndiffers and is done with the following command:\n\ndh_make --email miika.turkia@gmail.com -c gpl2 --createorig --library\n\n\nIncluding libgit2\n-----------------\n\nIt should suffice for us to just copy the libgit2 package from\nrepository to another on Launchpad. Precise is the only release that\ndoes not have libgit2 available, for the other releases we can use the\ndistribution provided version.\n"
        },
        {
          "name": "ReleaseNotes",
          "type": "tree",
          "content": null
        },
        {
          "name": "Subsurface-mobile.pro",
          "type": "blob",
          "size": 12.7001953125,
          "content": "TEMPLATE = app\n\nQT += qml quick quickcontrols2 widgets positioning concurrent svg bluetooth \n\nDEFINES += SUBSURFACE_MOBILE BT_SUPPORT BLE_SUPPORT MAP_SUPPORT\n\nCONFIG += c++17\nCONFIG += qtquickcompiler\n\nSOURCES += subsurface-mobile-main.cpp \\\n\tsubsurface-helper.cpp \\\n\tmap-widget/qmlmapwidgethelper.cpp \\\n\tcommands/command_base.cpp \\\n\tcommands/command.cpp \\\n\tcommands/command_device.cpp \\\n\tcommands/command_divelist.cpp \\\n\tcommands/command_divesite.cpp \\\n\tcommands/command_edit.cpp \\\n\tcommands/command_edit_trip.cpp \\\n\tcommands/command_event.cpp \\\n\tcommands/command_filter.cpp \\\n\tcommands/command_pictures.cpp \\\n\tcore/cloudstorage.cpp \\\n\tcore/configuredivecomputerthreads.cpp \\\n\tcore/devicedetails.cpp \\\n\tcore/downloadfromdcthread.cpp \\\n\tcore/qtserialbluetooth.cpp \\\n\tcore/plannernotes.cpp \\\n\tcore/uemis-downloader.cpp \\\n\tcore/qthelper.cpp \\\n\tcore/checkcloudconnection.cpp \\\n\tcore/color.cpp \\\n\tcore/configuredivecomputer.cpp \\\n\tcore/divelogexportlogic.cpp \\\n\tcore/divesitehelpers.cpp \\\n\tcore/errorhelper.cpp \\\n\tcore/exif.cpp \\\n\tcore/format.cpp \\\n\tcore/gettextfromc.cpp \\\n\tcore/metrics.cpp \\\n\tcore/qt-init.cpp \\\n\tcore/subsurfacesysinfo.cpp \\\n\tcore/windowtitleupdate.cpp \\\n\tcore/file.cpp \\\n\tcore/fulltext.cpp \\\n\tcore/subsurfacestartup.cpp \\\n\tcore/subsurface-string.cpp \\\n\tcore/pref.cpp \\\n\tcore/profile.cpp \\\n\tcore/device.cpp \\\n\tcore/dive.cpp \\\n\tcore/divecomputer.cpp \\\n\tcore/divefilter.cpp \\\n\tcore/event.cpp \\\n\tcore/eventtype.cpp \\\n\tcore/filterconstraint.cpp \\\n\tcore/filterpreset.cpp \\\n\tcore/filterpresettable.cpp \\\n\tcore/fit_file.cpp \\\n\tcore/divelist.cpp \\\n\tcore/divelog.cpp \\\n\tcore/gas-model.cpp \\\n\tcore/gaspressures.cpp \\\n\tcore/git-access.cpp \\\n\tcore/globals.cpp \\\n\tcore/liquivision.cpp \\\n\tcore/load-git.cpp \\\n\tcore/parse-xml.cpp \\\n\tcore/parse.cpp \\\n\tcore/picture.cpp \\\n\tcore/sample.cpp \\\n\tcore/import-suunto.cpp \\\n\tcore/import-shearwater.cpp \\\n\tcore/import-seac.cpp \\\n\tcore/import-cobalt.cpp \\\n\tcore/import-divinglog.cpp \\\n\tcore/import-csv.cpp \\\n\tcore/import-asd.cpp \\\n\tcore/import-logtrak.cpp \\\n\tcore/save-html.cpp \\\n\tcore/statistics.cpp \\\n\tcore/worldmap-save.cpp \\\n\tcore/libdivecomputer.cpp \\\n\tcore/version.cpp \\\n\tcore/save-git.cpp \\\n\tcore/datatrak.cpp \\\n\tcore/ostctools.cpp \\\n\tcore/divesoft.cpp \\\n\tcore/planner.cpp \\\n\tcore/save-xml.cpp \\\n\tcore/cochran.cpp \\\n\tcore/deco.cpp \\\n\tcore/divesite.cpp \\\n\tcore/equipment.cpp \\\n\tcore/gas.cpp \\\n\tcore/membuffer.cpp \\\n\tcore/selection.cpp \\\n\tcore/sha1.cpp \\\n\tcore/string-format.cpp \\\n\tcore/strtod.cpp \\\n\tcore/tag.cpp \\\n\tcore/taxonomy.cpp \\\n\tcore/time.cpp \\\n\tcore/trip.cpp \\\n\tcore/triptable.cpp \\\n\tcore/units.cpp \\\n\tcore/uemis.cpp \\\n\tcore/btdiscovery.cpp \\\n\tcore/connectionlistmodel.cpp \\\n\tcore/qt-ble.cpp \\\n\tcore/uploadDiveShare.cpp \\\n\tcore/uploadDiveLogsDE.cpp \\\n\tcore/save-profiledata.cpp \\\n\tcore/xmlparams.cpp \\\n\tcore/settings/qPref.cpp \\\n\tcore/settings/qPrefCloudStorage.cpp \\\n\tcore/settings/qPrefDisplay.cpp \\\n\tcore/settings/qPrefDiveComputer.cpp \\\n\tcore/settings/qPrefDivePlanner.cpp \\\n\tcore/settings/qPrefGeneral.cpp \\\n\tcore/settings/qPrefGeocoding.cpp \\\n\tcore/settings/qPrefLanguage.cpp \\\n\tcore/settings/qPrefPartialPressureGas.cpp \\\n\tcore/settings/qPrefPrivate.cpp \\\n\tcore/settings/qPrefProxy.cpp \\\n\tcore/settings/qPrefTechnicalDetails.cpp \\\n\tcore/settings/qPrefUnit.cpp \\\n\tcore/settings/qPrefEquipment.cpp \\\n\tcore/settings/qPrefLog.cpp \\\n\tcore/settings/qPrefMedia.cpp \\\n\tcore/settings/qPrefUpdateManager.cpp \\\n\tcore/subsurface-qt/divelistnotifier.cpp \\\n\tbackend-shared/exportfuncs.cpp \\\n\tbackend-shared/plannershared.cpp \\\n\tbackend-shared/roundrectitem.cpp \\\n\tstats/statsvariables.cpp \\\n\tstats/statsview.cpp \\\n\tstats/barseries.cpp \\\n\tstats/boxseries.cpp \\\n\tstats/chartitem.cpp \\\n\tstats/chartlistmodel.cpp \\\n\tstats/histogrammarker.cpp \\\n\tstats/informationbox.cpp \\\n\tstats/legend.cpp \\\n\tstats/pieseries.cpp \\\n\tstats/quartilemarker.cpp \\\n\tstats/regressionitem.cpp \\\n\tstats/scatterseries.cpp \\\n\tstats/statsaxis.cpp \\\n\tstats/statscolors.cpp \\\n\tstats/statsgrid.cpp \\\n\tstats/statshelper.cpp \\\n\tstats/statsselection.cpp \\\n\tstats/statsseries.cpp \\\n\tstats/statsstate.cpp \\\n\tmobile-widgets/qmlinterface.cpp \\\n\tmobile-widgets/qmlmanager.cpp \\\n\tmobile-widgets/statsmanager.cpp \\\n\tmobile-widgets/themeinterface.cpp \\\n\tqt-models/divesummarymodel.cpp \\\n\tqt-models/completionmodels.cpp \\\n\tqt-models/divelocationmodel.cpp \\\n\tqt-models/maplocationmodel.cpp \\\n\tqt-models/diveimportedmodel.cpp \\\n\tqt-models/messagehandlermodel.cpp \\\n\tqt-models/diveplannermodel.cpp \\\n\tqt-models/divetripmodel.cpp \\\n\tqt-models/mobilelistmodel.cpp \\\n\tqt-models/cylindermodel.cpp \\\n\tqt-models/cleanertablemodel.cpp \\\n\tqt-models/tankinfomodel.cpp \\\n\tqt-models/models.cpp \\\n\tqt-models/weightsysteminfomodel.cpp \\\n\tqt-models/filterconstraintmodel.cpp \\\n\tqt-models/filterpresetmodel.cpp \\\n\tprofile-widget/qmlprofile.cpp \\\n\tprofile-widget/divecartesianaxis.cpp \\\n\tprofile-widget/diveeventitem.cpp \\\n\tprofile-widget/divepercentageitem.cpp \\\n\tprofile-widget/diveprofileitem.cpp \\\n\tprofile-widget/profilescene.cpp \\\n\tprofile-widget/animationfunctions.cpp \\\n\tprofile-widget/divepixmapcache.cpp \\\n\tprofile-widget/divepixmapitem.cpp \\\n\tprofile-widget/divetooltipitem.cpp \\\n\tprofile-widget/tankitem.cpp \\\n\tprofile-widget/divelineitem.cpp \\\n\tprofile-widget/diverectitem.cpp \\\n\tprofile-widget/divetextitem.cpp\n\nHEADERS += \\\n\tcommands/command_base.h \\\n\tcommands/command.h \\\n\tcommands/command_device.h \\\n\tcommands/command_divelist.h \\\n\tcommands/command_divesite.h \\\n\tcommands/command_edit.h \\\n\tcommands/command_edit_trip.h \\\n\tcommands/command_event.h \\\n\tcommands/command_filter.h \\\n\tcommands/command_pictures.h \\\n\tcore/interpolate.h \\\n\tcore/libdivecomputer.h \\\n\tcore/cloudstorage.h \\\n\tcore/configuredivecomputerthreads.h \\\n\tcore/device.h \\\n\tcore/devicedetails.h \\\n\tcore/dive.h \\\n\tcore/divecomputer.h \\\n\tcore/event.h \\\n\tcore/eventtype.h \\\n\tcore/extradata.h \\\n\tcore/git-access.h \\\n\tcore/globals.h \\\n\tcore/pref.h \\\n\tcore/profile.h \\\n\tcore/qthelper.h \\\n\tcore/range.h \\\n\tcore/save-html.h \\\n\tcore/statistics.h \\\n\tcore/units.h \\\n\tcore/version.h \\\n\tcore/picture.h \\\n\tcore/planner.h \\\n\tcore/divesite.h \\\n\tcore/divesitetable.h \\\n\tcore/checkcloudconnection.h \\\n\tcore/cochran.h \\\n\tcore/color.h \\\n\tcore/configuredivecomputer.h \\\n\tcore/datatrak.h \\\n\tcore/deco.h \\\n\tcore/divefilter.h \\\n\tcore/filterconstraint.h \\\n\tcore/filterpreset.h \\\n\tcore/filterpresettable.h \\\n\tcore/divelist.h \\\n\tcore/divelog.h \\\n\tcore/divelogexportlogic.h \\\n\tcore/divesitehelpers.h \\\n\tcore/exif.h \\\n\tcore/file.h \\\n\tcore/fulltext.h \\\n\tcore/gaspressures.h \\\n\tcore/gettext.h \\\n\tcore/gettextfromc.h \\\n\tcore/membuffer.h \\\n\tcore/metrics.h \\\n\tcore/qt-gui.h \\\n\tcore/sample.h \\\n\tcore/selection.h \\\n\tcore/sha1.h \\\n\tcore/string-format.h \\\n\tcore/subsurfacestartup.h \\\n\tcore/subsurfacesysinfo.h \\\n\tcore/taxonomy.h \\\n\tcore/trip.h \\\n\tcore/triptable.h \\\n\tcore/uemis.h \\\n\tcore/webservice.h \\\n\tcore/windowtitleupdate.h \\\n\tcore/worldmap-options.h \\\n\tcore/worldmap-save.h \\\n\tcore/downloadfromdcthread.h \\\n\tcore/btdiscovery.h \\\n\tcore/connectionlistmodel.h \\\n\tcore/qt-ble.h \\\n\tcore/save-profiledata.h \\\n\tcore/uploadDiveShare.h \\\n\tcore/uploadDiveLogsDE.h \\\n\tcore/xmlparams.h \\\n\tcore/settings/qPref.h \\\n\tcore/settings/qPrefCloudStorage.h \\\n\tcore/settings/qPrefDisplay.h \\\n\tcore/settings/qPrefDiveComputer.h \\\n\tcore/settings/qPrefDivePlanner.h \\\n\tcore/settings/qPrefGeneral.h \\\n\tcore/settings/qPrefGeocoding.h \\\n\tcore/settings/qPrefLanguage.h \\\n\tcore/settings/qPrefPartialPressureGas.h \\\n\tcore/settings/qPrefPrivate.h \\\n\tcore/settings/qPrefProxy.h \\\n\tcore/settings/qPrefTechnicalDetails.h \\\n\tcore/settings/qPrefUnit.h \\\n\tcore/settings/qPrefEquipment.h \\\n\tcore/settings/qPrefLog.h \\\n\tcore/settings/qPrefMedia.h \\\n\tcore/settings/qPrefUpdateManager.h \\\n\tcore/subsurface-qt/divelistnotifier.h \\\n\tbackend-shared/exportfuncs.h \\\n\tbackend-shared/plannershared.h \\\n\tbackend-shared/roundrectitem.h \\\n\tstats/barseries.h \\\n\tstats/boxseries.h \\\n\tstats/chartitem.h \\\n\tstats/chartlistmodel.h \\\n\tstats/histogrammarker.h \\\n\tstats/informationbox.h \\\n\tstats/legend.h \\\n\tstats/pieseries.h \\\n\tstats/quartilemarker.h \\\n\tstats/regressionitem.h \\\n\tstats/scatterseries.h \\\n\tstats/statsaxis.h \\\n\tstats/statscolors.h \\\n\tstats/statsgrid.h \\\n\tstats/statshelper.h \\\n\tstats/statsselection.h \\\n\tstats/statsseries.h \\\n\tstats/statsstate.h \\\n\tstats/statstranslations.h \\\n\tstats/statsvariables.h \\\n\tstats/statsview.h \\\n\tstats/zvalues.h \\\n\tmobile-widgets/qmlinterface.h \\\n\tmobile-widgets/qmlmanager.h \\\n\tmobile-widgets/statsmanager.h \\\n\tmobile-widgets/themeinterface.h \\\n\tmap-widget/qmlmapwidgethelper.h \\\n\tqt-models/divesummarymodel.h \\\n\tqt-models/divelocationmodel.h \\\n\tqt-models/completionmodels.h \\\n\tqt-models/weightsysteminfomodel.h \\\n\tqt-models/maplocationmodel.h \\\n\tqt-models/diveimportedmodel.h \\\n\tqt-models/messagehandlermodel.h \\\n\tqt-models/diveplannermodel.h \\\n\tqt-models/divetripmodel.h \\\n\tqt-models/mobilelistmodel.h \\\n\tqt-models/cylindermodel.h \\\n\tqt-models/cleanertablemodel.h \\\n\tqt-models/tankinfomodel.h \\\n\tqt-models/models.h \\\n\tqt-models/weightsysteminfomodel.h \\\n\tqt-models/filterconstraintmodel.h \\\n\tqt-models/filterpresetmodel.h \\\n\tprofile-widget/qmlprofile.h \\\n\tprofile-widget/divepercentageitem.h \\\n\tprofile-widget/diveprofileitem.h \\\n\tprofile-widget/profilescene.h \\\n\tprofile-widget/diveeventitem.h \\\n\tprofile-widget/divetooltipitem.h \\\n\tprofile-widget/tankitem.h \\\n\tprofile-widget/animationfunctions.h \\\n\tprofile-widget/divecartesianaxis.h \\\n\tprofile-widget/divelineitem.h \\\n\tprofile-widget/divepixmapcache.h \\\n\tprofile-widget/divepixmapitem.h \\\n\tprofile-widget/diverectitem.h \\\n\tprofile-widget/divetextitem.h\n\nRESOURCES += mobile-widgets/qml/mobile-resources.qrc \\\n\t\tmobile-widgets/3rdparty/icons.qrc \\\n\t\tmap-widget/qml/map-widget.qrc \\\n\t\tstats/statsicons.qrc \\\n\t\tprofile.qrc\n\nandroid {\n\tSOURCES += core/android.cpp \\\n\t\tcore/serial_usb_android.cpp\n\n\t# ironically, we appear to need to include the Kirigami shaders here\n\t# as they are not found when we assume that they are part of the\n\t# libkirigami library\n\tRESOURCES += packaging/android/translations.qrc \\\n\t\tandroid-mobile/font.qrc \\\n\t\tmobile-widgets/3rdparty/kirigami/src/scenegraph/shaders/shaders.qrc\n\tQT += androidextras\n\tANDROID_PACKAGE_SOURCE_DIR = $$PWD/android-mobile\n\tANDROID_VERSION_CODE = $$BUILD_NR\n\tANDROID_VERSION_NAME = $$BUILD_VERSION_NAME\n\n\tDISTFILES += \\\n\t\tandroid-build/AndroidManifest.xml \\\n\t\tandroid-build/build.gradle \\\n\t\tandroid-build/res/values/libs.xml\n\n\t# at link time our CWD is parallel to the install-root\n\tLIBS += ../install-root-$${QT_ARCH}/lib/libdivecomputer.a \\\n\t\t../install-root-$${QT_ARCH}/lib/qml/org/kde/kirigami.2/libkirigamiplugin.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libgit2.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libzip.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libxslt.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libxml2.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libsqlite3.a \\\n\t\t../install-root-$${QT_ARCH}/lib/libssl_1_1.so \\\n\t\t../install-root-$${QT_ARCH}/lib/libcrypto_1_1.so \\\n\t\t../googlemaps-build/libplugins_geoservices_qtgeoservices_googlemaps_$${QT_ARCH}.so\n\n\t# ensure that the openssl libraries are bundled into the app\n\t# for some reason doing so with dollar dollar { QT_ARCH } (like what works\n\t# above for the link time case) doesn not work for the EXTRA_LIBS case.\n\t# so stupidly do it explicitly\n\tANDROID_EXTRA_LIBS += \\\n\t\t../install-root-arm64-v8a/lib/libcrypto_1_1.so \\\n\t\t../install-root-arm64-v8a/lib/libssl_1_1.so \\\n\t\t../install-root-armeabi-v7a/lib/libcrypto_1_1.so \\\n\t\t../install-root-armeabi-v7a/lib/libssl_1_1.so\n\n\tINCLUDEPATH += ../install-root-$${QT_ARCH}/include/ \\\n\t\t../install-root/lib/libzip/include \\\n\t\t../install-root-$${QT_ARCH}/include/libxstl \\\n\t\t../install-root-$${QT_ARCH}/include/libxml2 \\\n\t\t../install-root-$${QT_ARCH}/include/libexstl \\\n\t\t../install-root-$${QT_ARCH}/include/openssl \\\n\t\t. \\\n\t\tcore \\\n\t\tmobile-widgets/3rdparty/kirigami/src\n}\n\nios {\n\tSOURCES += core/ios.cpp\n\tRESOURCES += packaging/ios/translations.qrc\n\tQMAKE_IOS_DEPLOYMENT_TARGET = 12.0\n\tQMAKE_TARGET_BUNDLE_PREFIX = org.subsurface-divelog\n\tQMAKE_BUNDLE = subsurface-mobile\n\tQMAKE_INFO_PLIST = packaging/ios/Info.plist\n\tQMAKE_ASSET_CATALOGS += packaging/ios/storeIcon.xcassets\n\tapp_launch_images.files = packaging/ios/SubsurfaceMobileLaunch.xib $$files(packaging/ios/SubsurfaceMobileLaunchImage*.png)\n\timages.files = icons/subsurface-mobile-icon.png\n\tQMAKE_BUNDLE_DATA += app_launch_images images\n\n\tOBJECTIVE_SOURCES += ios/ios-share.mm\n\tHEADERS += ios/ios-share.h\n\tQ_ENABLE_BITCODE.name = ENABLE_BITCODE\n\tQ_ENABLE_BITCODE.value = NO\n\tQMAKE_MAC_XCODE_SETTINGS += Q_ENABLE_BITCODE\n\tARCH_PATH = ../install-root/ios/$${ARCH}\n\n\tLIBS += $${ARCH_PATH}/lib/libdivecomputer.a \\\n\t\t$${ARCH_PATH}/lib/libgit2.a \\\n\t\t$${ARCH_PATH}/lib/libzip.a \\\n\t\t$${ARCH_PATH}/lib/libxslt.a \\\n\t\t$${ARCH_PATH}/lib/qml/org/kde/kirigami.2/libkirigamiplugin.a \\\n\t\t../googlemaps-build/libqtgeoservices_googlemaps.a \\\n\t\t-liconv \\\n\t\t-lsqlite3 \\\n\t\t-lxml2\n\n\tLIBS += -framework MessageUI\n\n\tINCLUDEPATH += $${ARCH_PATH}/include/ \\\n\t\t$${ARCH_PATH}/include/libxstl \\\n\t\t$${ARCH_PATH}/include/libexstl \\\n\t\t$${ARCH_PATH}/include/openssl \\\n\t\t. \\\n\t\t./core \\\n\t\t./mobile-widgets/3rdparty/kirigami/src/libkirigami \\\n\t\t$${ARCH_PATH}/include/libxml2\n\n}\n"
        },
        {
          "name": "SupportedDivecomputers.html",
          "type": "blob",
          "size": 5.9150390625,
          "content": "<!--  This file is automatically generated, please edit scripts/parse-descriptor.pl -->\n<dl><dt>Aeris</dt><dd><ul>\n\t    <li>500 AI, A300, A300 AI, A300CS, Atmos 2, Atmos AI, Atmos AI 2, Compumask, Elite, Elite T3, Epic, F10, F11, Manta, XR-1 NX, XR-2</li></ul>\n    </dd>\n    <dt>Apeks</dt><dd><ul>\n\t    <li>Quantum X</li></ul>\n    </dd>\n    <dt>Aqualung</dt><dd><ul>\n\t    <li>i100, i200, i200C, i300, i300C, i450T, i470TC, i550, i550C, i750TC, i770R</li></ul>\n    </dd>\n    <dt>Atomic Aquatics</dt><dd><ul>\n\t    <li>Cobalt, Cobalt 2</li></ul>\n    </dd>\n    <dt>Beuchat</dt><dd><ul>\n\t    <li>Mundial 2, Mundial 3, Voyager 2G</li></ul>\n    </dd>\n    <dt>Citizen</dt><dd><ul>\n\t    <li>Hyper Aqualand</li></ul>\n    </dd>\n    <dt>Cochran</dt><dd><ul>\n\t    <li>Commander I, Commander II, Commander TM, EMC-14, EMC-16, EMC-20H</li></ul>\n    </dd>\n    <dt>Cressi</dt><dd><ul>\n\t    <li>Cartesio, Donatello, Drake, Edy, Giotto, Goa, Leonardo, Leonardo 2.0, Michelangelo, Neon, Nepto, Newton</li></ul>\n    </dd>\n    <dt>Crest</dt><dd><ul>\n\t    <li>CR-4</li></ul>\n    </dd>\n    <dt>Deep Six</dt><dd><ul>\n\t    <li>Excursion</li></ul>\n    </dd>\n    <dt>Deepblu</dt><dd><ul>\n\t    <li>Cosmiq+</li></ul>\n    </dd>\n    <dt>Dive Rite</dt><dd><ul>\n\t    <li>NiTek Q, NiTek Trio</li></ul>\n    </dd>\n    <dt>DiveSystem</dt><dd><ul>\n\t    <li>Orca, iDive DAN, iDive Deep, iDive Easy, iDive Free, iDive Pro, iDive Reb, iDive Stealth, iDive Tech, iDive X3M</li></ul>\n    </dd>\n    <dt>Divesoft</dt><dd><ul>\n\t    <li>Freedom, Liberty</li></ul>\n    </dd>\n    <dt>FIT</dt><dd><ul>\n\t    <li>File import</li></ul>\n    </dd>\n    <dt>Garmin</dt><dd><ul>\n\t    <li>Descent Mk1, Descent Mk2(i)/Mk3(i)</li></ul>\n    </dd>\n    <dt>Genesis</dt><dd><ul>\n\t    <li>Centauri, React Pro, React Pro White</li></ul>\n    </dd>\n    <dt>Heinrichs Weikamp</dt><dd><ul>\n\t    <li>Frog, OSTC, OSTC 2, OSTC 2 TR, OSTC 2C, OSTC 2N, OSTC 3, OSTC 4, OSTC Mk2, OSTC Plus, OSTC Sport, OSTC cR</li></ul>\n    </dd>\n    <dt>Hollis</dt><dd><ul>\n\t    <li>DG02, DG03, TX1</li></ul>\n    </dd>\n    <dt>Liquivision</dt><dd><ul>\n\t    <li>Kaon, Lynx, Xen, Xeo</li></ul>\n    </dd>\n    <dt>Mares</dt><dd><ul>\n\t    <li>Airlab, Darwin, Darwin Air, Genius, Horizon, Icon HD, Icon HD Net Ready, M1, M2, Matrix, Nemo, Nemo Air, Nemo Apneist, Nemo Excel, Nemo Steel, Nemo Titanium, Nemo Wide, Nemo Wide 2, Puck, Puck 2, Puck 4, Puck Air, Puck Air 2, Puck Pro, Puck Pro +, Quad, Quad Air, Quad Ci, Sirius, Smart, Smart Air, Smart Apnea</li></ul>\n    </dd>\n    <dt>McLean</dt><dd><ul>\n\t    <li>Extreme</li></ul>\n    </dd>\n    <dt>Oceanic</dt><dd><ul>\n\t    <li>Atom 1.0, Atom 2.0, Atom 3.0, Atom 3.1, Datamask, F10, F11, Geo, Geo 2.0, Geo 4.0, Geo Air, OC1, OCS, OCi, Pro Plus 2, Pro Plus 2.1, Pro Plus 3, Pro Plus 4, Pro Plus X, VT 4.1, VT Pro, VT3, VT4, VTX, Veo 1.0, Veo 180, Veo 2.0, Veo 200, Veo 250, Veo 3.0, Veo 4.0, Versa Pro</li></ul>\n    </dd>\n    <dt>Oceans</dt><dd><ul>\n\t    <li>S1</li></ul>\n    </dd>\n    <dt>Ratio</dt><dd><ul>\n\t    <li>ATOM, iDive 2 Deep, iDive 2 Easy, iDive 2 Fancy, iDive 2 Free, iDive 2 Pro, iDive 2 Reb, iDive 2 Tech, iDive Color Deep, iDive Color Easy, iDive Color Fancy, iDive Color Free, iDive Color Pro, iDive Color Reb, iDive Color Tech+, iDive Deep, iDive Easy, iDive Fancy, iDive Free, iDive Pro, iDive Reb, iDive Tech+, iX3M 2 Deep, iX3M 2 Easy, iX3M 2 GPS Deep, iX3M 2 GPS Easy, iX3M 2 GPS Gauge, iX3M 2 GPS Pro, iX3M 2 GPS Reb, iX3M 2 GPS Tech, iX3M 2 Gauge, iX3M 2 Pro, iX3M 2 Tech+, iX3M 2021 GPS Deep, iX3M 2021 GPS Easy, iX3M 2021 GPS Fancy, iX3M 2021 GPS Pro , iX3M 2021 GPS Reb, iX3M 2021 GPS Tech+, iX3M 2021 Pro Deep, iX3M 2021 Pro Easy, iX3M 2021 Pro Fancy, iX3M 2021 Pro Pro, iX3M 2021 Pro Reb, iX3M 2021 Pro Tech+, iX3M GPS Deep, iX3M GPS Easy, iX3M GPS Fancy, iX3M GPS Pro , iX3M GPS Reb, iX3M GPS Tech+, iX3M Pro Deep, iX3M Pro Easy, iX3M Pro Fancy, iX3M Pro Pro, iX3M Pro Reb, iX3M Pro Tech+</li></ul>\n    </dd>\n    <dt>Reefnet</dt><dd><ul>\n\t    <li>Sensus, Sensus Pro, Sensus Ultra</li></ul>\n    </dd>\n    <dt>Scorpena</dt><dd><ul>\n\t    <li>Alpha</li></ul>\n    </dd>\n    <dt>Scubapro</dt><dd><ul>\n\t    <li>Aladin A1, Aladin A2, Aladin H Matrix, Aladin Sport Matrix, Aladin Square, Chromis, G2, G2 Console, G2 HUD, G2 TEK, G3, Luna 2.0, Luna 2.0 AI, Mantis, Mantis 2, Meridian, XTender 5</li></ul>\n    </dd>\n    <dt>Seabaer</dt><dd><ul>\n\t    <li>T1, H3, HUDC</li></ul>\n    </dd>\n    <dt>Seac</dt><dd><ul>\n\t    <li>Action, Guru, Jack, Screen</li></ul>\n    </dd>\n    <dt>Seemann</dt><dd><ul>\n\t    <li>XP5</li></ul>\n    </dd>\n    <dt>Shearwater</dt><dd><ul>\n\t    <li>Nerd, Nerd 2, Perdix, Perdix 2, Perdix AI, Peregrine, Peregrine TX, Petrel, Petrel 2, Petrel 3, Predator, Teric, Tern, Tern TX</li></ul>\n    </dd>\n    <dt>Sherwood</dt><dd><ul>\n\t    <li>Amphos, Amphos 2.0, Amphos Air, Amphos Air 2.0, Beacon, Insight, Insight 2, Sage, Vision, Wisdom, Wisdom 2, Wisdom 3, Wisdom 4</li></ul>\n    </dd>\n    <dt>Sporasub</dt><dd><ul>\n\t    <li>SP2</li></ul>\n    </dd>\n    <dt>Subgear</dt><dd><ul>\n\t    <li>XP Air, XP-10, XP-3G, XP-Air</li></ul>\n    </dd>\n    <dt>Suunto</dt><dd><ul>\n\t    <li>Cobra, Cobra 2, Cobra 3, D3, D4, D4f, D4i, D5, D6, D6i, D9, D9tx, DX, EON Core, EON Steel, EON Steel Black, Eon, Gekko, HelO2, Mosquito, Solution, Solution Alpha, Solution Nitrox, Spyder, Stinger, Vyper, Vyper 2, Vyper Air, Vyper Novo, Vytec, Zoop, Zoop Novo</li></ul>\n    </dd>\n    <dt>Tecdiving</dt><dd><ul>\n\t    <li>DiveComputer.eu</li></ul>\n    </dd>\n    <dt>Tusa</dt><dd><ul>\n\t    <li>Element II (IQ-750), IQ-700, Talis, Zen (IQ-900), Zen Air (IQ-950)</li></ul>\n    </dd>\n    <dt>Uemis</dt><dd><ul>\n\t    <li>Zürich SDA</li></ul>\n    </dd>\n    <dt>Uwatec</dt><dd><ul>\n\t    <li>Aladin 2G, Aladin Air Twin, Aladin Air Z, Aladin Air Z Nitrox, Aladin Air Z O2, Aladin One, Aladin Prime, Aladin Pro, Aladin Pro Ultra, Aladin Sport, Aladin Sport Plus, Aladin Tec, Aladin Tec 2G, Aladin Tec 3G, Galileo Luna, Galileo Sol, Galileo Terra, Galileo Trimix, Memomouse, Smart Com, Smart Pro, Smart Tec, Smart Z</li></ul>\n    </dd>\n    <dt>Zeagle</dt><dd><ul>\n\t    <li>N2iTiON3</li>\n\t</ul>\n    </dd>\n</dl>"
        },
        {
          "name": "SupportedDivecomputers.txt",
          "type": "blob",
          "size": 3.9384765625,
          "content": "#  This file is automatically generated, please edit scripts/parse-descriptor.pl\nAeris: 500 AI, A300, A300 AI, A300CS, Atmos 2, Atmos AI, Atmos AI 2, Compumask, Elite, Elite T3, Epic, F10, F11, Manta, XR-1 NX, XR-2\nApeks: Quantum X\nAqualung: i100, i200, i200C, i300, i300C, i450T, i470TC, i550, i550C, i750TC, i770R\nAtomic Aquatics: Cobalt, Cobalt 2\nBeuchat: Mundial 2, Mundial 3, Voyager 2G\nCitizen: Hyper Aqualand\nCochran: Commander I, Commander II, Commander TM, EMC-14, EMC-16, EMC-20H\nCressi: Cartesio, Donatello, Drake, Edy, Giotto, Goa, Leonardo, Leonardo 2.0, Michelangelo, Neon, Nepto, Newton\nCrest: CR-4\nDeep Six: Excursion\nDeepblu: Cosmiq+\nDive Rite: NiTek Q, NiTek Trio\nDiveSystem: Orca, iDive DAN, iDive Deep, iDive Easy, iDive Free, iDive Pro, iDive Reb, iDive Stealth, iDive Tech, iDive X3M\nDivesoft: Freedom, Liberty\nFIT: File import\nGarmin: Descent Mk1, Descent Mk2(i)/Mk3(i)\nGenesis: Centauri, React Pro, React Pro White\nHeinrichs Weikamp: Frog, OSTC, OSTC 2, OSTC 2 TR, OSTC 2C, OSTC 2N, OSTC 3, OSTC 4, OSTC Mk2, OSTC Plus, OSTC Sport, OSTC cR\nHollis: DG02, DG03, TX1\nLiquivision: Kaon, Lynx, Xen, Xeo\nMares: Airlab, Darwin, Darwin Air, Genius, Horizon, Icon HD, Icon HD Net Ready, M1, M2, Matrix, Nemo, Nemo Air, Nemo Apneist, Nemo Excel, Nemo Steel, Nemo Titanium, Nemo Wide, Nemo Wide 2, Puck, Puck 2, Puck 4, Puck Air, Puck Air 2, Puck Pro, Puck Pro +, Quad, Quad Air, Quad Ci, Sirius, Smart, Smart Air, Smart Apnea\nMcLean: Extreme\nOceanic: Atom 1.0, Atom 2.0, Atom 3.0, Atom 3.1, Datamask, F10, F11, Geo, Geo 2.0, Geo 4.0, Geo Air, OC1, OCS, OCi, Pro Plus 2, Pro Plus 2.1, Pro Plus 3, Pro Plus 4, Pro Plus X, VT 4.1, VT Pro, VT3, VT4, VTX, Veo 1.0, Veo 180, Veo 2.0, Veo 200, Veo 250, Veo 3.0, Veo 4.0, Versa Pro\nOceans: S1\nRatio: ATOM, iDive 2 Deep, iDive 2 Easy, iDive 2 Fancy, iDive 2 Free, iDive 2 Pro, iDive 2 Reb, iDive 2 Tech, iDive Color Deep, iDive Color Easy, iDive Color Fancy, iDive Color Free, iDive Color Pro, iDive Color Reb, iDive Color Tech+, iDive Deep, iDive Easy, iDive Fancy, iDive Free, iDive Pro, iDive Reb, iDive Tech+, iX3M 2 Deep, iX3M 2 Easy, iX3M 2 GPS Deep, iX3M 2 GPS Easy, iX3M 2 GPS Gauge, iX3M 2 GPS Pro, iX3M 2 GPS Reb, iX3M 2 GPS Tech, iX3M 2 Gauge, iX3M 2 Pro, iX3M 2 Tech+, iX3M 2021 GPS Deep, iX3M 2021 GPS Easy, iX3M 2021 GPS Fancy, iX3M 2021 GPS Pro , iX3M 2021 GPS Reb, iX3M 2021 GPS Tech+, iX3M 2021 Pro Deep, iX3M 2021 Pro Easy, iX3M 2021 Pro Fancy, iX3M 2021 Pro Pro, iX3M 2021 Pro Reb, iX3M 2021 Pro Tech+, iX3M GPS Deep, iX3M GPS Easy, iX3M GPS Fancy, iX3M GPS Pro , iX3M GPS Reb, iX3M GPS Tech+, iX3M Pro Deep, iX3M Pro Easy, iX3M Pro Fancy, iX3M Pro Pro, iX3M Pro Reb, iX3M Pro Tech+\nReefnet: Sensus, Sensus Pro, Sensus Ultra\nScorpena: Alpha\nScubapro: Aladin A1, Aladin A2, Aladin H Matrix, Aladin Sport Matrix, Aladin Square, Chromis, G2, G2 Console, G2 HUD, G2 TEK, G3, Luna 2.0, Luna 2.0 AI, Mantis, Mantis 2, Meridian, XTender 5\nSeabaer: T1, H3, HUDC\nSeac: Action, Guru, Jack, Screen\nSeemann: XP5\nShearwater: Nerd, Nerd 2, Perdix, Perdix 2, Perdix AI, Peregrine, Peregrine TX, Petrel, Petrel 2, Petrel 3, Predator, Teric, Tern, Tern TX\nSherwood: Amphos, Amphos 2.0, Amphos Air, Amphos Air 2.0, Beacon, Insight, Insight 2, Sage, Vision, Wisdom, Wisdom 2, Wisdom 3, Wisdom 4\nSporasub: SP2\nSubgear: XP Air, XP-10, XP-3G, XP-Air\nSuunto: Cobra, Cobra 2, Cobra 3, D3, D4, D4f, D4i, D5, D6, D6i, D9, D9tx, DX, EON Core, EON Steel, EON Steel Black, Eon, Gekko, HelO2, Mosquito, Solution, Solution Alpha, Solution Nitrox, Spyder, Stinger, Vyper, Vyper 2, Vyper Air, Vyper Novo, Vytec, Zoop, Zoop Novo\nTecdiving: DiveComputer.eu\nTusa: Element II (IQ-750), IQ-700, Talis, Zen (IQ-900), Zen Air (IQ-950)\nUemis: Zürich SDA\nUwatec: Aladin 2G, Aladin Air Twin, Aladin Air Z, Aladin Air Z Nitrox, Aladin Air Z O2, Aladin One, Aladin Prime, Aladin Pro, Aladin Pro Ultra, Aladin Sport, Aladin Sport Plus, Aladin Tec, Aladin Tec 2G, Aladin Tec 3G, Galileo Luna, Galileo Sol, Galileo Terra, Galileo Trimix, Memomouse, Smart Com, Smart Pro, Smart Tec, Smart Z\nZeagle: N2iTiON3"
        },
        {
          "name": "TODO.CCR",
          "type": "blob",
          "size": 0.35546875,
          "content": "TODO for CCR support\n\n- make tank pressure plot work for bailout dives\n- bailout handling in SAC rate calculation\n- UI to modify the tank type for CCR (i.e., set the diluent and oxygen cylinders)\n\n- UI visualisation of o2 setpoint values and separate oxygen sensor values, probably\n  using the same space as the gas partial pressures underneath the depth profile.\n"
        },
        {
          "name": "android-mobile",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "backend-shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli-downloader.cpp",
          "type": "blob",
          "size": 1.189453125,
          "content": "// SPDX-License-Identifier: GPL-2.0\n#include \"qt-models/diveimportedmodel.h\"\n\nvoid cliDownloader(const std::string &vendor, const std::string &product, const std::string &device)\n{\n\tDiveImportedModel diveImportedModel;\n\tDiveImportedModel::connect(&diveImportedModel, &DiveImportedModel::downloadFinished, [] {\n\t\t// do something useful at the end of the download\n\t\tprintf(\"Finished\\n\");\n\t});\n\n\tauto data = diveImportedModel.thread.data();\n\tdata->setVendor(QString::fromStdString(vendor));\n\tdata->setProduct(QString::fromStdString(product));\n\tdata->setBluetoothMode(false);\n\tif (data->vendor() == \"Uemis\") {\n\t\tQString devname = QString::fromStdString(device);\n\t\tint colon = devname.indexOf(QStringLiteral(\":\\\\ (UEMISSDA)\"));\n\t\tif (colon >= 0) {\n\t\t\tdevname.truncate(colon + 2);\n\t\t\tfprintf(stderr, \"shortened devname to \\\"%s\\\"\", qPrintable(devname));\n\t\t}\n\t\tdata->setDevName(devname);\n\t} else {\n\t\tdata->setDevName(QString::fromStdString(device));\n\t}\n\n\t// some assumptions - should all be configurable\n\tdata->setForceDownload(false);\n\tdata->setSaveLog(true);\n\tdata->setSaveDump(false);\n\tdata->setSyncTime(false);\n\n\tdiveImportedModel.startDownload();\n\tdiveImportedModel.waitForDownload();\n\tdiveImportedModel.recordDives();\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "commands",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "descriptor3.tsv",
          "type": "blob",
          "size": 3.9873046875,
          "content": "Aeris\tAtmos 2\tOCEANIC_VTPRO\nAeris\tA300 AI\tOCEANIC_ATOM2\nAeris\tAtmos AI\tOCEANIC_VTPRO\nAeris\tAtmos AI 2\tOCEANIC_ATOM2\nAeris\tCompumask\tOCEANIC_ATOM2\nAeris\tElite\tOCEANIC_VTPRO\nAeris\tElite T3\tOCEANIC_ATOM2\nAeris\tElite T3\tOCEANIC_ATOM2\nAeris\tEpic\tOCEANIC_ATOM2\nAeris\tEpic\tOCEANIC_ATOM2\nAeris\tF10\tOCEANIC_ATOM2\nAeris\tManta\tOCEANIC_ATOM2\nAeris\tXR-2\tOCEANIC_VEO250\nApeks\tQuantum X\tZEAGLE_N2ITION3\nAtomic Aquatics\tCobalt\tATOMICS_COBALT\nCressi\tEdy\tCRESSI_EDY\nCressi\tLeonardo\tCRESSI_LEONARDO\nDiveRite\tNiTek Trio\tZEAGLE_N2ITION3\nGenesis\tReact Pro\tOCEANIC_VEO250\nGenesis\tReact Pro White\tOCEANIC_ATOM2\nHeinrichs Weikamp\tDR5\tSUBSURFACE\nHeinrichs Weikamp\tFrog\tHW_FROG\nHeinrichs Weikamp\tOSTC\tHW_OSTC\nHeinrichs Weikamp\tOSTC 2N\tHW_OSTC\nHeinrichs Weikamp\tOSTC 3\tHW_OSTC3\nHeinrichs Weikamp\tOSTC Mk2\tHW_OSTC\nHollis\tDG03\tOCEANIC_ATOM2\nMares\tDarwin\tMARES_DARWIN\nMares\tDarwin Air\tMARES_DARWIN\nMares\tIcon HD\tMARES_ICONHD\nMares\tIcon HD Net Ready\tMARES_ICONHD\nMares\tM1\tMARES_DARWIN\nMares\tM2\tMARES_DARWIN\nMares\tMatrix\tMARES_ICONHD\nMares\tNemo\tMARES_NEMO\nMares\tNemo Air\tMARES_PUCK\nMares\tNemo Apneist\tMARES_NEMO\nMares\tNemo Excel\tMARES_NEMO\nMares\tNemo Steel\tMARES_NEMO\nMares\tNemo Titanium\tMARES_NEMO\nMares\tNemo Wide\tMARES_PUCK\nMares\tNemo Wide 2\tMARES_ICONHD\nMares\tPuck\tMARES_PUCK\nMares\tPuck 2\tMARES_ICONHD\nMares\tPuck Air\tMARES_PUCK\nMares\tPuck Pro\tMARES_ICONHD\nOceanic\tAtom 1.0\tOCEANIC_ATOM2\nOceanic\tAtom 2.0\tOCEANIC_ATOM2\nOceanic\tAtom 3.0\tOCEANIC_ATOM2\nOceanic\tAtom 3.1\tOCEANIC_ATOM2\nOceanic\tDatamask\tOCEANIC_ATOM2\nOceanic\tGeo\tOCEANIC_ATOM2\nOceanic\tGeo 2.0\tOCEANIC_ATOM2\nOceanic\tOC1\tOCEANIC_ATOM2\nOceanic\tOC1\tOCEANIC_ATOM2\nOceanic\tOC1\tOCEANIC_ATOM2\nOceanic\tOCi\tOCEANIC_ATOM2\nOceanic\tOCS\tOCEANIC_ATOM2\nOceanic\tPro Plus 2\tOCEANIC_VTPRO\nOceanic\tPro Plus 2.1\tOCEANIC_ATOM2\nOceanic\tPro Plus 3\tOCEANIC_ATOM2\nOceanic\tVeo 1.0\tOCEANIC_ATOM2\nOceanic\tVeo 180\tOCEANIC_VEO250\nOceanic\tVeo 2.0\tOCEANIC_ATOM2\nOceanic\tVeo 200\tOCEANIC_VEO250\nOceanic\tVeo 250\tOCEANIC_VEO250\nOceanic\tVeo 3.0\tOCEANIC_ATOM2\nOceanic\tVersa Pro\tOCEANIC_VTPRO\nOceanic\tVT 4.1\tOCEANIC_ATOM2\nOceanic\tVT Pro\tOCEANIC_VTPRO\nOceanic\tVT3\tOCEANIC_ATOM2\nOceanic\tVT4\tOCEANIC_ATOM2\nReefnet\tSensus\tREEFNET_SENSUS\nReefnet\tSensus Pro\tREEFNET_SENSUSPRO\nReefnet\tSensus Ultra\tREEFNET_SENSUSULTRA\nSeemann\tXP5\tOCEANIC_VEO250\nShearwater\tPetrel\tSHEARWATER_PETREL\nShearwater\tPredator\tSHEARWATER_PREDATOR\nSherwood\tAmphos\tOCEANIC_ATOM2\nSherwood\tInsight\tOCEANIC_VEO250\nSherwood\tInsight 2\tOCEANIC_ATOM2\nSherwood\tWisdom\tOCEANIC_VTPRO\nSherwood\tWisdom 2\tOCEANIC_ATOM2\nSherwood\tWisdom 3\tOCEANIC_ATOM2\nSubgear\tXP Air\tUWATEC_SMART\nSubgear\tXP-10\tUWATEC_SMART\nSuunto\tCobra\tSUUNTO_VYPER\nSuunto\tCobra 2\tSUUNTO_VYPER2\nSuunto\tCobra 3\tSUUNTO_VYPER2\nSuunto\tD3\tSUUNTO_VYPER\nSuunto\tD4\tSUUNTO_D9\nSuunto\tD4i\tSUUNTO_D9\nSuunto\tD6\tSUUNTO_D9\nSuunto\tD6i\tSUUNTO_D9\nSuunto\tD9\tSUUNTO_D9\nSuunto\tD9tx\tSUUNTO_D9\nSuunto\tDX\tSUUNTO_D9\nSuunto\tEon\tSUUNTO_EON\nSuunto\tGekko\tSUUNTO_VYPER\nSuunto\tHelO2\tSUUNTO_VYPER2\nSuunto\tMosquito\tSUUNTO_VYPER\nSuunto\tSolution\tSUUNTO_SOLUTION\nSuunto\tSolution Alpha\tSUUNTO_EON\nSuunto\tSolution Nitrox\tSUUNTO_EON\nSuunto\tSpyder\tSUUNTO_VYPER\nSuunto\tStinger\tSUUNTO_VYPER\nSuunto\tVyper\tSUUNTO_VYPER\nSuunto\tVyper 2\tSUUNTO_VYPER2\nSuunto\tVyper Air\tSUUNTO_VYPER2\nSuunto\tVytec\tSUUNTO_VYPER\nSuunto\tZoop\tSUUNTO_VYPER\nTusa\tElement II (IQ-750)\tOCEANIC_ATOM2\nTusa\tZen (IQ-900)\tOCEANIC_ATOM2\nTusa\tZen Air (IQ-950)\tOCEANIC_ATOM2\nUemis\tZürich\tSUBSURFACE\nUwatec\tAladin 2G\tUWATEC_SMART\nUwatec\tAladin 2G\tUWATEC_SMART\nUwatec\tAladin Air Twin\tUWATEC_ALADIN\nUwatec\tAladin Air Z\tUWATEC_ALADIN\nUwatec\tAladin Air Z Nitrox\tUWATEC_ALADIN\nUwatec\tAladin Air Z O2\tUWATEC_ALADIN\nUwatec\tAladin Prime\tUWATEC_SMART\nUwatec\tAladin Pro\tUWATEC_ALADIN\nUwatec\tAladin Pro Ultra\tUWATEC_ALADIN\nUwatec\tAladin Sport Plus\tUWATEC_ALADIN\nUwatec\tAladin Tec\tUWATEC_SMART\nUwatec\tAladin Tec 2G\tUWATEC_SMART\nUwatec\tGalileo Luna\tUWATEC_SMART\nUwatec\tGalileo Sol\tUWATEC_SMART\nUwatec\tGalileo Terra\tUWATEC_SMART\nUwatec\tGalileo Trimix\tUWATEC_SMART\nUwatec\tMemomouse\tUWATEC_MEMOMOUSE\nUwatec\tSmart Com\tUWATEC_SMART\nUwatec\tSmart Pro\tUWATEC_SMART\nUwatec\tSmart Tec\tUWATEC_SMART\nUwatec\tSmart Z\tUWATEC_SMART\nxDeep\tBlack\tSUBSURFACE\nZeagle\tN2iTiON3\tZEAGLE_N2ITION3\n"
        },
        {
          "name": "desktop-widgets",
          "type": "tree",
          "content": null
        },
        {
          "name": "dives",
          "type": "tree",
          "content": null
        },
        {
          "name": "entitlements-mac-dev.plist",
          "type": "blob",
          "size": 0.2509765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>com.apple.security.cs.disable-library-validation</key>\n\t<true/>\n</dict>\n</plist>"
        },
        {
          "name": "export-html.cpp",
          "type": "blob",
          "size": 1.8408203125,
          "content": "// SPDX-License-Identifier: GPL-2.0\n/* Dirk Hohndel, 2015 */\n\n#include <QString>\n#include <QCommandLineParser>\n#include <QApplication>\n\n#include \"core/qt-gui.h\"\n#include \"core/qthelper.h\"\n#include \"core/file.h\"\n#include \"core/device.h\"\n#include \"core/divelog.h\"\n#include \"core/divesite.h\"\n#include \"core/trip.h\"\n#include \"core/save-html.h\"\n#include <stdio.h>\n#include \"git2.h\"\n#include \"core/subsurfacestartup.h\"\n#include \"core/divelogexportlogic.h\"\n#include \"core/statistics.h\"\n\nint main(int argc, char **argv)\n{\n\tQApplication *application = new QApplication(argc, argv);\n\tgit_libgit2_init();\n\tprefs = default_prefs;\n\tinit_qt_late();\n\n\tQCommandLineParser parser;\n\tQCommandLineOption sourceDirectoryOption(QStringList() << \"s\" << \"source\",\n\t\t\t\t\t\t \"Read git repository from <directory>\",\n\t\t\t\t\t\t \"directory\");\n\tparser.addOption(sourceDirectoryOption);\n\tQCommandLineOption outputDirectoryOption(QStringList() << \"u\" << \"output\",\n\t\t\t\t\t\t \"Write HTML files into <directory>\",\n\t\t\t\t\t\t \"directory\");\n\tparser.addOption(outputDirectoryOption);\n\n\tparser.process(*application);\n\n\tQString source = parser.value(sourceDirectoryOption);\n\tQString output = parser.value(outputDirectoryOption);\n\n\tif (source.isEmpty() || output.isEmpty()) {\n\t\treport_info(\"need --source and --output\");\n\t\texit(1);\n\t}\n\tint ret = parse_file(qPrintable(source), &divelog);\n\tif (ret) {\n\t\treport_info(\"parse_file returned %d\", ret);\n\t\texit(1);\n\t}\n\n\t// this should have set up the informational preferences - let's grab\n\t// the units from there\n\tprefs.unit_system = git_prefs.unit_system;\n\tprefs.units = git_prefs.units;\n\n\t// now set up the export settings to create the HTML export\n\tstruct htmlExportSetting hes;\n\thes.themeFile = \"sand.css\";\n\thes.exportPhotos = true;\n\thes.selectedOnly = false;\n\thes.listOnly = false;\n\thes.yearlyStatistics = true;\n\thes.subsurfaceNumbers = true;\n\texportHtmlInitLogic(output, hes);\n\texit(0);\n}\n"
        },
        {
          "name": "gh_release_notes_bottom.md",
          "type": "blob",
          "size": 2.234375,
          "content": "\nNone of these artifacts are signed with an official key.\n\n# Android\nThe Android APK (named **Subsurface-mobile-\\<version\\>-CICD-release.apk** below) can be side-loaded on most Android devices. *Note*: If you previously had installed Subsurface-mobile from the Google Play store, the first time you switch to a CICD-release, you'll have to uninstall the Play store version first. Make sure your data is synced to the Subsurface Cloud. After you install the CICD-release and log in to the Subsurface Cloud again, the data will be restored. This is *only* required the first time you switch from a Play store release to a CICD-release.\n\n# Windows\nThe Windows installer (named **subsurface-\\<version\\>-CICD-release-installer.exe **) will ask you to confirm installation of an app from an unknown developer. The other **Windows .exe** files are only useful for a few users who are specifically directed to try them. Unless that is you, you typically will want to try the **...-installer.exe** file.\n\n# macOS\nThe macOS DMG (named ** Subsurface-\\<version\\>-CICD-release.dmg) makes it even harder with a multi-step dance that requires opening the Privacy & Security settings in the System Preferences and explicitly confirming that you are willing to install this app.\n\n# Linux\nYou can find similar Subsurface-Daily builds for [Ubuntu](https://ppa.launchpadcontent.net/subsurface) and Subsurface-test for [Fedora](https://copr.fedorainfracloud.org/coprs/dirkhh/Subsurface-test).\n\nFinally, there is a Linux AppImage (named **Subsurface-\\<version\\>-CICD-release.AppImage**) should run on most other x86_64 Linux distributions for which we don't have specific builds.\n\n**Note:** Due to the asynchronous nature of our build process the artifacts for the individual platforms are added to the release one by one, whenever their build is finished. So if you can not find a particular artifact on a recent (less than 2 hours old) build, please come back later and check again.\n\nPlease report any issues with these builds in the [Subsurface user forum](https://groups.google.com/g/subsurface-divelog).\n\nAlso please note - the source tar and zip files below are created by GitHub and are essentially empty. You'll find the sources over in the [Subsurface repo](https://github.com/subsurface/subsurface)\n\n"
        },
        {
          "name": "gh_release_notes_top.md",
          "type": "blob",
          "size": 0.1376953125,
          "content": "CICD release artifact\n\nThese builds are created on every merge or push into the [Subsurface repo](http://github.com/subsurface/subsurface).\n\n"
        },
        {
          "name": "gpl-2.0.txt",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "libdivecomputer",
          "type": "commit",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 0.654296875,
          "content": "# SPDX-License-Identifier: GPL-2.0\n\n# Default target executed when no arguments are given to make.\ndefault_target: all\n\n.PHONY : default_target\n\n# Allow only one \"make -f <foo>\" at a time, but pass parallelism.\n.NOTPARALLEL:\n\n\nmobile:\n\tif test ! -d build-mobile; then (echo \"error: please run build.sh before make\"; exit -1;); fi\n\tcd build-mobile; make \n\tcd build-mobile; make install\n\ndesktop:\n\tif test ! -d build; then (echo \"error: please run build.sh before make\"; exit -1;); fi\n\tcd build; make \n\tcd build; make install\n\ncheck:\n\tif test ! -d build; then (echo \"error: please run build.sh before make\"; exit -1;); fi\n\tcd build; make check\n\n\nall: desktop mobile check\n"
        },
        {
          "name": "map-widget",
          "type": "tree",
          "content": null
        },
        {
          "name": "metainfo",
          "type": "tree",
          "content": null
        },
        {
          "name": "mobile-widgets",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "printing_templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "profile-widget",
          "type": "tree",
          "content": null
        },
        {
          "name": "profile.qrc",
          "type": "blob",
          "size": 1.2265625,
          "content": "<RCC>\n\t<qresource prefix=\"/\">\n\t\t<!-- ************ icons used in the profile ***************** -->\n\t\t<file alias=\"status-warning-icon\">icons/warning-icon.svg</file>\n\t\t<file alias=\"status-violation-icon\">icons/violation-icon.svg</file>\n\t\t<file alias=\"status-info-icon\">icons/info-icon.svg</file>\n\t\t<file alias=\"bailout-icon\">icons/OC.png</file>\n\t\t<file alias=\"onCCRLoop-icon\">icons/CCR.png</file>\n\t\t<file alias=\"dive-bookmark-icon\">icons/flag.svg</file>\n\t\t<file alias=\"gaschange-icon\">icons/gaschange.png</file>\n\t\t<file alias=\"gaschange-air-icon\">icons/Air_change.png</file>\n\t\t<file alias=\"gaschange-ean-icon\">icons/Nx_change.png</file>\n\t\t<file alias=\"gaschange-trimix-icon\">icons/Tmx_change.png</file>\n\t\t<file alias=\"gaschange-oxygen-icon\">icons/Oxy_change.png</file>\n\t\t<file alias=\"gaschange-air-ICD-icon\">icons/Air_changeICD.png</file>\n\t\t<file alias=\"gaschange-ean-ICD-icon\">icons/Nx_changeICD.png</file>\n\t\t<file alias=\"gaschange-trimix-ICD-icon\">icons/Tmx_changeICD.png</file>\n\t\t<file alias=\"gaschange-oxygen-ICD-icon\">icons/Oxy_changeICD.png</file>\n\t\t<file alias=\"list-add-icon\">icons/plus.png</file>\n\t\t<file alias=\"list-remove-icon\">icons/trash.png</file>\n\t\t<file alias=\"list-remove-disabled-icon\">icons/trash-forbidden.png</file>\n\t</qresource>\n</RCC>\n"
        },
        {
          "name": "qt-models",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "smtk-import",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "stats",
          "type": "tree",
          "content": null
        },
        {
          "name": "subsurface-desktop-main.cpp",
          "type": "blob",
          "size": 6.38671875,
          "content": "// SPDX-License-Identifier: GPL-2.0\n/* main.c */\n#include <locale.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#include \"core/downloadfromdcthread.h\" // for fill_computer_list\n#include \"core/divelog.h\"\n#include \"core/errorhelper.h\"\n#include \"core/parse.h\"\n#include \"core/qt-gui.h\"\n#include \"core/qthelper.h\"\n#include \"core/subsurfacestartup.h\"\n#include \"core/subsurface-string.h\"\n#include \"core/settings/qPref.h\"\n#include \"core/tag.h\"\n#include \"desktop-widgets/mainwindow.h\"\n#include \"core/checkcloudconnection.h\"\n\n#include <QApplication>\n#include <QLoggingCategory>\n#include <QOffscreenSurface>\n#include <QOpenGLContext>\n#include <QOpenGLFunctions>\n#include <QQuickWindow>\n#include <QStringList>\n#include <git2.h>\n\nstatic void validateGL();\nstatic void messageHandler(QtMsgType type, const QMessageLogContext &ctx, const QString &msg);\n\nint main(int argc, char **argv)\n{\n\tsubsurface_console_init();\n\tqInstallMessageHandler(messageHandler);\n\tif (verbose) /* print the version if the Win32 console_init() code enabled verbose. */\n\t\tprint_version();\n\n\tbool no_filenames = true;\n\tQLoggingCategory::setFilterRules(QStringLiteral(\"qt.bluetooth* = true\"));\n\tstd::unique_ptr<QApplication> app(new QApplication(argc, argv));\n\tstd::vector<std::string> files;\n\tstd::vector<std::string> importedFiles;\n\tQStringList arguments = QCoreApplication::arguments();\n\n\tsubsurface_mkdir(system_default_directory().c_str());\n\n\tfor (int i = 1; i < arguments.length(); i++) {\n\t\tstd::string a = arguments[i].toStdString();\n\t\tif (a.empty())\n\t\t\tcontinue;\n\t\tif (a[0] == '-') {\n\t\t\tparse_argument(a.c_str());\n\t\t\tcontinue;\n\t\t}\n\t\tif (imported) {\n\t\t\timportedFiles.push_back(a);\n\t\t} else {\n\t\t\tno_filenames = false;\n\t\t\tfiles.push_back(a);\n\t\t}\n\t}\n\tif (subsurface_user_is_root() && !force_root) {\n\t\tprintf(\"You are running Subsurface as root. This is not recommended.\\n\");\n\t\tprintf(\"If you insist to do so, run with option --allow_run_as_root.\\n\");\n\t\texit(0);\n\t}\n\tvalidateGL();\n#if !LIBGIT2_VER_MAJOR && LIBGIT2_VER_MINOR < 22\n\tgit_threads_init();\n#else\n\tgit_libgit2_init();\n#endif\n\tsetup_system_prefs();\n\tprefs = default_prefs;\n\tCheckCloudConnection ccc;\n\tccc.pickServer();\n\tfill_computer_list();\n\treset_tank_info_table(tank_info_table);\n\tparse_xml_init();\n\ttaglist_init_global();\n\tinit_ui();\n\tif (no_filenames) {\n\t\tif (prefs.default_file_behavior == LOCAL_DEFAULT_FILE) {\n\t\t\tif (!prefs.default_filename.empty())\n\t\t\t\tfiles.push_back(prefs.default_filename);\n\t\t} else if (prefs.default_file_behavior == CLOUD_DEFAULT_FILE) {\n\t\t\tauto cloudURL = getCloudURL();\n\t\t\tif (cloudURL)\n\t\t\t\tfiles.push_back(*cloudURL);\n\t\t}\n\t}\n\tMainWindow *m = MainWindow::instance();\n\tif (verbose && !files.empty())\n\t\treport_info(\"loading dive data from: %s\", join(files, std::string(\", \")).c_str());\n\tm->loadFiles(files);\n\tif (verbose && !importedFiles.empty())\n\t\treport_info(\"importing dive data from %s\", join(importedFiles, std::string(\", \")).c_str());\n\tm->importFiles(importedFiles);\n\n\tif (verbose > 0)\n\t\tprint_files();\n\tif (!quit)\n\t\trun_ui();\n\texit_ui();\n\tparse_xml_exit();\n\tsubsurface_console_exit();\n\n\t// Sync struct preferences to disk\n\tqPref::sync();\n\n\treturn 0;\n}\n\n#define VALIDATE_GL_PREFIX \"validateGL(): \"\n\nvoid validateGL()\n{\n\tstd::string quickBackend = qgetenv(\"QT_QUICK_BACKEND\").toStdString();\n\t/* on macOS with Qt6 (maybe others), things only work with the software backend */\n#if defined(Q_OS_MACOS) && QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)\n\tif (quickBackend.empty()) {\n\t\tquickBackend = \"software\";\n\t\tqputenv(\"QT_QUICK_BACKEND\", \"software\");\n\t}\n#endif\n\t/* an empty QT_QUICK_BACKEND env. variable means OpenGL (default).\n\t * only validate OpenGL; for everything else print out and return.\n\t * https://doc.qt.io/qt-5/qtquick-visualcanvas-adaptations.html\n\t */\n\tif (!quickBackend.empty()) {\n\t\tif (verbose) {\n\t\t\treport_info(VALIDATE_GL_PREFIX\n\t\t\t\t    \"'QT_QUICK_BACKEND' is set to '%s'. \"\n\t\t\t\t    \"Skipping validation.\", quickBackend.c_str());\n\t\t}\n\t\treturn;\n\t}\n\tGLint verMajor = -1, verMinor;\n\tconst char *glError = NULL;\n\tQOpenGLContext ctx;\n\tQOffscreenSurface surface;\n\tQOpenGLFunctions *func;\n\tconst char *verChar;\n\n\tsurface.setFormat(ctx.format());\n\tsurface.create();\n\tif (!ctx.create()) {\n\t\tglError = \"Cannot create OpenGL context\";\n\t\tgoto exit;\n\t}\n\tif (verbose)\n\t\treport_info(VALIDATE_GL_PREFIX \"created OpenGLContext.\");\n\tctx.makeCurrent(&surface);\n\tfunc = ctx.functions();\n\tif (!func) {\n\t\tglError = \"Cannot obtain QOpenGLFunctions\";\n\t\tgoto exit;\n\t}\n\tif (verbose)\n\t\treport_info(VALIDATE_GL_PREFIX \"obtained QOpenGLFunctions.\");\n\t// detect version for legacy profiles\n\tverChar = (const char *)func->glGetString(GL_VERSION);\n\tif (verChar) {\n\t\t// detect GLES, show a warning and return early as we don't handle it's versioning\n\t\tif (strstr(verChar, \" ES \") != NULL) {\n\t\t\treport_error(VALIDATE_GL_PREFIX\n\t\t\t\t     \"WARNING: Detected OpenGL ES!\\n\"\n\t\t\t\t     \"Attempting to run with the available profile!\\n\"\n\t\t\t\t     \"If this fails try manually setting the environment variable\\n\"\n\t\t\t\t     \"'QT_QUICK_BACKEND' with the value of 'software'\\n\"\n\t\t\t\t     \"before running Subsurface!\\n\");\n\t\t\treturn;\n\t\t}\n\t\tint min, maj;\n\t\tif (sscanf(verChar, \"%d.%d\", &maj, &min) == 2) {\n\t\t\tverMajor = (GLint)maj;\n\t\t\tverMinor = (GLint)min;\n\t\t}\n\t}\n\t// attempt to detect version using the newer API\n\tif (verMajor == -1) {\n\t\tfunc->glGetIntegerv(GL_MAJOR_VERSION, &verMajor);\n\t\tfunc->glGetIntegerv(GL_MINOR_VERSION, &verMinor);\n\t}\n\tif (verMajor == -1) {\n\t\tglError = \"Cannot detect OpenGL version\";\n\t\tgoto exit;\n\t}\n\tif (verbose)\n\t\treport_info(VALIDATE_GL_PREFIX \"detected OpenGL version %d.%d.\", verMajor, verMinor);\n\tif (verMajor * 10 + verMinor < 21) { // set 2.1 as the minimal version\n\t\tglError = \"OpenGL 2.1 or later is required\";\n\t\tgoto exit;\n\t}\n\nexit:\n\tctx.makeCurrent(NULL);\n\tsurface.destroy();\n\tif (glError) {\n\t\treport_error(VALIDATE_GL_PREFIX \"WARNING: %s. Using a software renderer!\", glError);\n\t\tQQuickWindow::setSceneGraphBackend(\"software\");\n\t}\n}\n\n// install this message handler primarily so that the Windows build can log to files\nvoid messageHandler(QtMsgType type, const QMessageLogContext &, const QString &msg)\n{\n\tQByteArray localMsg = msg.toUtf8();\n\tswitch (type) {\n\tcase QtDebugMsg:\n\t\tfprintf(stdout, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtInfoMsg:\n\t\tfprintf(stdout, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtWarningMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtCriticalMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtFatalMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tabort();\n\t}\n}\n"
        },
        {
          "name": "subsurface-downloader-main.cpp",
          "type": "blob",
          "size": 4.1787109375,
          "content": "// SPDX-License-Identifier: GPL-2.0\n/* main.c */\n#include \"core/downloadfromdcthread.h\" // for fill_computer_list\n#include \"core/errorhelper.h\"\n#include \"core/parse.h\"\n#include \"core/qthelper.h\"\n#include \"core/settings/qPref.h\"\n#include \"core/tag.h\"\n#include \"core/dive.h\"\n#include \"core/divelog.h\"\n#include \"core/subsurfacestartup.h\"\n#include \"core/subsurface-string.h\"\n#include \"core/file.h\"\n#include \"core/trip.h\"\n#include \"core/libdivecomputer.h\"\n#include \"commands/command.h\"\n\n#include <QApplication>\n#include <QLoggingCategory>\n#include <QStringList>\n#include <git2.h>\n\nstatic void messageHandler(QtMsgType type, const QMessageLogContext &ctx, const QString &msg);\nextern void cliDownloader(const std::string &vendor, const std::string &product, const std::string &device);\n\nint main(int argc, char **argv)\n{\n\tCommand::init();\n\tqInstallMessageHandler(messageHandler);\n\t// we always run this in verbose mode as there is no UI\n\tverbose = 1;\n\n\t// now let's say Hi\n\tprint_version();\n\n\t// supporting BT makes sense when used with an iPhone and an rfcomm BT device?\n\tQLoggingCategory::setFilterRules(QStringLiteral(\"qt.bluetooth* = true\"));\n\n\tbool no_filenames = true;\n\tstd::unique_ptr<QCoreApplication> app(new QCoreApplication(argc, argv));\n\tstd::vector<std::string> files;\n\tstd::vector<std::string> importedFiles;\n\tQStringList arguments = QCoreApplication::arguments();\n\n\t// set a default logfile name for libdivecomputer so we always get a logfile\n\tlogfile_name = \"subsurface-downloader.log\";\n\n\tsubsurface_mkdir(system_default_directory().c_str());\n\n\tif (subsurface_user_is_root() && !force_root) {\n\t\tprintf(\"You are running Subsurface as root. This is not recommended.\\n\");\n\t\tprintf(\"If you insist to do so, run with option --allow_run_as_root.\\n\");\n\t\texit(0);\n\t}\n\tgit_libgit2_init();\n\tsetup_system_prefs();\n\tprefs = default_prefs;\n\n\t// now handle the arguments\n\tfill_computer_list();\n\tfor (int i = 1; i < arguments.length(); i++) {\n\t\tstd::string a = arguments[i].toStdString();\n\t\tif (a.empty())\n\t\t\tcontinue;\n\t\tif (a[0] == '-') {\n\t\t\tparse_argument(a.c_str());\n\t\t\tcontinue;\n\t\t}\n\t\tif (imported) {\n\t\t\timportedFiles.push_back(a);\n\t\t} else {\n\t\t\tno_filenames = false;\n\t\t\tfiles.push_back(a);\n\t\t}\n\t}\n\tparse_xml_init();\n\ttaglist_init_global();\n\n\tif (no_filenames) {\n\t\tif (prefs.default_file_behavior == LOCAL_DEFAULT_FILE) {\n\t\t\tif (!prefs.default_filename.empty())\n\t\t\t\tfiles.emplace_back(prefs.default_filename.c_str());\n\t\t} else if (prefs.default_file_behavior == CLOUD_DEFAULT_FILE) {\n\t\t\tauto cloudURL = getCloudURL();\n\t\t\tif (cloudURL)\n\t\t\t\tfiles.emplace_back(*cloudURL);\n\t\t}\n\t}\n\tif (!files.empty()) {\n\t\treport_info(\"loading dive data from %s\", join(files, \", \").c_str());\n\t\tif (parse_file(files.front().c_str(), &divelog) < 0) {\n\t\t\tprintf(\"Failed to load dives from file '%s', aborting.\\n\", files.front().c_str());\n\t\t\texit(1);\n\t\t}\n\t}\n\tprint_files();\n\tif (!quit) {\n\t\tif (!prefs.dive_computer.vendor.empty() && !prefs.dive_computer.product.empty() && !prefs.dive_computer.device.empty()) {\n\t\t\t// download from that dive computer\n\t\t\tprintf(\"Downloading dives from %s %s (via %s)\\n\", prefs.dive_computer.vendor.c_str(),\n\t\t\t\t\tprefs.dive_computer.product.c_str(), prefs.dive_computer.device.c_str());\n\t\t\tcliDownloader(prefs.dive_computer.vendor, prefs.dive_computer.product, prefs.dive_computer.device);\n\t\t}\n\t}\n\tif (!files.empty()) {\n\t\treport_info(\"saving dive data to %s\", join(files, \", \").c_str());\n\t\tsave_dives(files.front().c_str());\n\t} else {\n\t\tprintf(\"No log files given, not saving dive data.\\n\");\n\t\tprintf(\"Give a log file name as argument, or configure a cloud URL.\\n\");\n\t}\n\tparse_xml_exit();\n\n\t// Sync struct preferences to disk\n\tqPref::sync();\n\n\treturn 0;\n}\n\n// install this message handler primarily so that the Windows build can log to files\nvoid messageHandler(QtMsgType type, const QMessageLogContext &, const QString &msg)\n{\n\tQByteArray localMsg = msg.toUtf8();\n\tswitch (type) {\n\tcase QtDebugMsg:\n\t\tfprintf(stdout, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtInfoMsg:\n\t\tfprintf(stdout, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtWarningMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtCriticalMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tbreak;\n\tcase QtFatalMsg:\n\t\tfprintf(stderr, \"%s\\n\", localMsg.constData());\n\t\tabort();\n\t}\n}\n"
        },
        {
          "name": "subsurface-helper.cpp",
          "type": "blob",
          "size": 7.80859375,
          "content": "// SPDX-License-Identifier: GPL-2.0\n#include <QQmlEngine>\n#include <QQuickItem>\n\n#ifdef MAP_SUPPORT\n#include \"map-widget/qmlmapwidgethelper.h\"\n#include \"qt-models/maplocationmodel.h\"\n#endif\n\n#include \"stats/statsview.h\"\n#include \"core/devicedetails.h\"\n#include \"core/errorhelper.h\"\n#include \"core/globals.h\"\n#include \"core/qt-gui.h\"\n#include \"core/settings/qPref.h\"\n\n#ifdef SUBSURFACE_MOBILE\n#include <QApplication>\n#include <QQmlApplicationEngine>\n#include <QQmlContext>\n#include \"mobile-widgets/themeinterface.h\"\n#include \"mobile-widgets/qmlmanager.h\"\n#include \"mobile-widgets/qmlinterface.h\"\n#include \"mobile-widgets/statsmanager.h\"\n#include \"stats/chartlistmodel.h\"\n#include \"qt-models/divesummarymodel.h\"\n#include \"qt-models/messagehandlermodel.h\"\n#include \"qt-models/mobilelistmodel.h\"\n#include \"profile-widget/qmlprofile.h\"\n#include \"core/downloadfromdcthread.h\"\n#include \"core/subsurfacestartup.h\" // for testqml\n#include \"core/metrics.h\"\n#include \"qt-models/diveimportedmodel.h\"\n#else\n#include \"desktop-widgets/mainwindow.h\"\n#endif\n\n#if defined(Q_OS_ANDROID)\nQString getAndroidHWInfo(); // from android.cpp\n#include <QApplication>\n#include <QFontDatabase>\n#endif /* Q_OS_ANDROID */\n\nQObject *qqWindowObject = NULL;\n\n// Forward declaration\nstatic void register_qml_types(QQmlEngine *);\nstatic void register_meta_types();\n\n#ifdef SUBSURFACE_MOBILE\n#include <QtPlugin>\nQ_IMPORT_PLUGIN(KirigamiPlugin)\n#endif\n\nvoid init_ui()\n{\n\tinit_qt_late();\n\tregister_meta_types();\n#ifndef SUBSURFACE_MOBILE\n\tregister_qml_types(NULL);\n\n\tMainWindow *window = make_global<MainWindow>();\n\twindow->setTitle();\n#endif // SUBSURFACE_MOBILE\n}\n\nvoid exit_ui()\n{\n\tfree_globals();\n}\n\n#ifdef SUBSURFACE_MOBILE\nvoid run_mobile_ui(double initial_font_size)\n{\n#if defined(Q_OS_ANDROID)\n\t// work around an odd interaction between the OnePlus flavor of Android and Qt font handling\n\tif (getAndroidHWInfo().contains(\"/OnePlus/\")) {\n\t\tQFontInfo qfi(defaultModelFont());\n\t\tdouble basePointSize = qfi.pointSize();\n\t\tQFontDatabase db;\n\t\tint id = QFontDatabase::addApplicationFont(\":/fonts/Roboto-Regular.ttf\");\n\t\tQStringList fontFamilies = QFontDatabase::applicationFontFamilies(id);\n\t\tif (fontFamilies.count() > 0) {\n\t\t\tQString family = fontFamilies.at(0);\n\t\t\tQFont newDefaultFont;\n\t\t\tnewDefaultFont.setFamily(family);\n\t\t\tnewDefaultFont.setPointSize(basePointSize);\n\t\t\t(static_cast<QApplication *>(QCoreApplication::instance()))->setFont(newDefaultFont);\n\t\t\treport_info(\"Detected OnePlus device, trying to force bundled font %s\", qPrintable(family));\n\t\t\tQFont defaultFont = (static_cast<QApplication *>(QCoreApplication::instance()))->font();\n\t\t\treport_info(\"Qt reports default font is set as\", qPrintable(defaultFont.family()));\n\t\t} else {\n\t\t\treport_info(\"Detected OnePlus device, but can't determine font family used\");\n\t\t}\n\t}\n#endif\n\tQScreen *appScreen = QApplication::screens().at(0);\n\tint availableScreenWidth = appScreen->availableSize().width();\n\tQQmlApplicationEngine engine;\n\tQQmlContext *ctxt = engine.rootContext();\n\n\t// Register qml interface classes\n\tQMLInterface::setup(ctxt);\n\tregister_qml_types(&engine);\n#if defined(__APPLE__) && !defined(Q_OS_IOS)\n\t// when running the QML UI on a Mac the deployment of the QML Components seems\n\t// to fail and the search path for the components is rather odd - simply the\n\t// same directory the executable was started from <bundle>/Contents/MacOS/\n\t// To work around this we need to manually copy the components at install time\n\t// to Contents/Frameworks/qml and make sure that we add the correct import path\n\tconst QStringList importPathList = engine.importPathList();\n\tfor (QString importPath: importPathList) {\n\t\tif (importPath.contains(\"MacOS\"))\n\t\t\tengine.addImportPath(importPath.replace(\"MacOS\", \"Frameworks\"));\n\t}\n#endif // __APPLE__ not Q_OS_IOS\n\t// this is frustrating, but we appear to need different import paths on different OSs\n\tengine.addImportPath(\":\");\n\tengine.addImportPath(\"qrc://imports\");\n\tctxt->setContextProperty(\"vendorList\", vendorList);\n\tctxt->setContextProperty(\"swipeModel\", MobileModels::instance()->swipeModel());\n\tctxt->setContextProperty(\"diveModel\", MobileModels::instance()->listModel());\n\tset_non_bt_addresses();\n\n\t// we need to setup the initial font size before the QML UI is instantiated\n\tThemeInterface *themeInterface = ThemeInterface::instance();\n\tthemeInterface->setInitialFontSize(initial_font_size);\n\n\tctxt->setContextProperty(\"connectionListModel\", &connectionListModel);\n\tctxt->setContextProperty(\"logModel\", MessageHandlerModel::self());\n\tctxt->setContextProperty(\"subsurfaceTheme\", themeInterface);\n\n\tqmlRegisterUncreatableType<QMLManager>(\"org.subsurfacedivelog.mobile\",1,0,\"ExportType\",\"Enum is not a type\");\n\n#ifdef SUBSURFACE_MOBILE_DESKTOP\n\tif (!testqml.empty()) {\n\t\tQString fileLoad(testqml.c_str());\n\t\tfileLoad += \"/main.qml\";\n\t\tengine.load(QUrl(fileLoad));\n\t} else {\n\t\tengine.load(QUrl(QStringLiteral(\"qrc:///qml/main.qml\")));\n\t}\n#else\n\tengine.load(QUrl(QStringLiteral(\"qrc:///qml/main.qml\")));\n#endif\n\treport_info(\"loaded main.qml\");\n\tqqWindowObject = engine.rootObjects().value(0);\n\tif (!qqWindowObject) {\n\t\treport_info(\"can't create window object\");\n\t\texit(1);\n\t}\n\tQQuickWindow *qml_window = qobject_cast<QQuickWindow *>(qqWindowObject);\n\tqml_window->setIcon(QIcon(\":subsurface-mobile-icon\"));\n\treport_info(\"qqwindow devicePixelRatio %f %f\", qml_window->devicePixelRatio(), qml_window->screen()->devicePixelRatio());\n\tQScreen *screen = qml_window->screen();\n\tint qmlWW = qml_window->width();\n\tint qmlSW = screen->size().width();\n\treport_info(\"qml_window reports width as %d associated screen width %d Qt screen reports width as %d\", qmlWW, qmlSW, availableScreenWidth);\n\tQObject::connect(qml_window, &QQuickWindow::screenChanged, QMLManager::instance(), &QMLManager::screenChanged);\n\tQMLManager *manager = QMLManager::instance();\n\n\tmanager->setDevicePixelRatio(qml_window->devicePixelRatio(), qml_window->screen());\n\tmanager->qmlWindow = qqWindowObject;\n\tmanager->screenChanged(screen);\n\treport_info(\"qqwindow screen has ldpi/pdpi %f %f\", screen->logicalDotsPerInch(), screen->physicalDotsPerInch());\n#if !defined(Q_OS_ANDROID) && !defined(Q_OS_IOS)\n\tint width = 800;\n\tint height = 1200;\n\tif (qEnvironmentVariableIsSet(\"SUBSURFACE_MOBILE_WIDTH\")) {\n\t\tbool ok;\n\t\tint width_override = qEnvironmentVariableIntValue(\"SUBSURFACE_MOBILE_WIDTH\", &ok);\n\t\tif (ok) {\n\t\t\twidth = width_override;\n\t\t\treport_info(\"overriding window width: %d\", width);\n\t\t}\n\t}\n\tif (qEnvironmentVariableIsSet(\"SUBSURFACE_MOBILE_HEIGHT\")) {\n\t\tbool ok;\n\t\tint height_override = qEnvironmentVariableIntValue(\"SUBSURFACE_MOBILE_HEIGHT\", &ok);\n\t\tif (ok) {\n\t\t\theight = height_override;\n\t\t\treport_info(\"overriding window height: %d\", height);\n\t\t}\n\t}\n\tqml_window->setHeight(height);\n\tqml_window->setWidth(width);\n#endif // not Q_OS_ANDROID and not Q_OS_IOS\n\tqml_window->show();\n\tqApp->exec();\n}\n#else // SUBSURFACE_MOBILE\n// just run the desktop UI\nvoid run_ui()\n{\n\tMainWindow::instance()->show();\n\tqApp->exec();\n}\n#endif // SUBSURFACE_MOBILE\n\nQ_DECLARE_METATYPE(duration_t)\nstatic void register_meta_types()\n{\n\tqRegisterMetaType<duration_t>();\n\tqRegisterMetaType<DeviceDetails>();\n}\n\ntemplate <typename T>\nstatic void register_qml_type(const char *name)\n{\n\tif(qmlRegisterType<T>(\"org.subsurfacedivelog.mobile\", 1, 0, name) < 0)\n\t\tqWarning(\"ERROR: Cannot register %s, QML will not work!!\", name);\n}\n\nstatic void register_qml_types(QQmlEngine *engine)\n{\n\t// register qPref*\n\tqPref::registerQML(engine);\n\n#ifdef SUBSURFACE_MOBILE\n\tregister_qml_type<QMLManager>(\"QMLManager\");\n\tregister_qml_type<StatsManager>(\"StatsManager\");\n\tregister_qml_type<QMLProfile>(\"QMLProfile\");\n\tregister_qml_type<DiveImportedModel>(\"DCImportModel\");\n\tregister_qml_type<DiveSummaryModel>(\"DiveSummaryModel\");\n\tregister_qml_type<ChartListModel>(\"ChartListModel\");\n#endif // not SUBSURFACE_MOBILE\n\n#ifdef MAP_SUPPORT\n\tregister_qml_type<MapWidgetHelper>(\"MapWidgetHelper\");\n\tregister_qml_type<MapLocationModel>(\"MapLocationModel\");\n#endif\n\tregister_qml_type<StatsView>(\"StatsView\");\n}\n"
        },
        {
          "name": "subsurface-mobile-main.cpp",
          "type": "blob",
          "size": 3.0546875,
          "content": "// SPDX-License-Identifier: GPL-2.0\n/* main.c */\n#include <locale.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#include \"core/dive.h\"\n#include \"core/divelog.h\"\n#include \"core/color.h\"\n#include \"core/downloadfromdcthread.h\"\n#include \"core/parse.h\"\n#include \"core/qt-gui.h\"\n#include \"core/qthelper.h\"\n#include \"core/subsurfacestartup.h\"\n#include \"core/settings/qPref.h\"\n#include \"core/settings/qPrefDisplay.h\"\n#include \"core/tag.h\"\n#include \"core/settings/qPrefCloudStorage.h\"\n#include \"core/checkcloudconnection.h\"\n\n#include <QApplication>\n#include <QFont>\n#include <QFontMetrics>\n#include <QLocale>\n#include <QLoggingCategory>\n#include <QStringList>\n#include <git2.h>\n\n// Implementation of STP logging\n\nint main(int argc, char **argv)\n{\n\tQGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n\tQLoggingCategory::setFilterRules(QStringLiteral(\"qt.bluetooth* = true\"));\n\n\t// Start application\n\tstd::unique_ptr<QApplication> app(new QApplication(argc, argv));\n\n\t// and get comand line arguments\n\tQStringList arguments = QCoreApplication::arguments();\n\n\tsubsurface_console_init();\n\n\tfor (int i = 1; i < arguments.length(); i++) {\n\t\tQString a = arguments.at(i);\n\t\tif (!a.isEmpty() && a.at(0) == '-') {\n\t\t\tparse_argument(qPrintable(a));\n\t\t\tcontinue;\n\t\t}\n\t}\n\tgit_libgit2_init();\n\tsetup_system_prefs();\n\tif (QLocale().measurementSystem() == QLocale::MetricSystem)\n\t\tdefault_prefs.units = SI_units;\n\telse\n\t\tdefault_prefs.units = IMPERIAL_units;\n\tprefs = default_prefs;\n\tCheckCloudConnection ccc;\n\tccc.pickServer();\n\tfill_computer_list();\n\treset_tank_info_table(tank_info_table);\n\n\tparse_xml_init();\n\ttaglist_init_global();\n\n\t// grab the system font size before we overwrite this when we load preferences\n\tdouble initial_font_size = QGuiApplication::font().pointSizeF();\n\tif (initial_font_size < 0.0) {\n\t\t// The OS provides a default font in pixels, not points; doing some crude math\n\t\t// to reverse engineer that information by measuring the height of a 10pt font in pixels\n\t\tQFont testFont;\n\t\ttestFont.setPointSizeF(10.0);\n\t\tQFontMetrics fm(testFont);\n\t\tinitial_font_size = QGuiApplication::font().pixelSize() * 10.0 / fm.height();\n\t}\n\tinit_ui();\n\tif (prefs.default_file_behavior == LOCAL_DEFAULT_FILE)\n\t\texisting_filename = prefs.default_filename;\n\telse\n\t\texisting_filename.clear();\n\n\t// some hard coded settings\n\tqPrefCloudStorage::set_save_password_local(true);\n\n\t// always show the divecomputer reported ceiling in red\n\tprefs.redceiling = 1;\n\n\tinit_proxy();\n\n\tif (!quit)\n\t\trun_mobile_ui(initial_font_size);\n\texit_ui();\n\tparse_xml_exit();\n\tsubsurface_console_exit();\n\n\t// Sync struct preferences to disk\n\tqPref::sync();\n\n\treturn 0;\n}\n\nvoid set_non_bt_addresses()\n{\n#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)\n\tconnectionListModel.addAddress(\"/dev/ttyS0\");\n\tconnectionListModel.addAddress(\"/dev/ttyS1\");\n\tconnectionListModel.addAddress(\"/dev/ttyS2\");\n\tconnectionListModel.addAddress(\"/dev/ttyS3\");\n\t// this makes debugging so much easier - use the simulator\n\tconnectionListModel.addAddress(\"/tmp/ttyS1\");\n#endif\n#if defined(SERIAL_FTDI)\n\tconnectionListModel.addAddress(\"FTDI\");\n#endif\n}\n"
        },
        {
          "name": "subsurface.debug",
          "type": "blob",
          "size": 3.375,
          "content": "#!/bin/sh\n#\n# This is a wrapper script (based on kodi/xbmc script) to monitor subsurface and get debug information using GDB when a crash happens.\n# Informations are stored in *.log file in CRASHLOG_DIR ($HOME by default)\n\nAPP=Subsurface\nbin_name=subsurface\nSAVED_ARGS=\"$@\"\nprefix=\"/usr\"\nCRASHLOG_DIR=${CRASHLOG_DIR:-$HOME}\nAPP_VERSION=$(${prefix}/bin/${bin_name} --version)\n\ncommand_exists()\n{\n  command -pv $1 >/dev/null 2>&1\n}\n\nsingle_stacktrace()\n{\n  # core filename is either \"core.$PID\" or \"core\"\n  find \"$1\" -maxdepth $2 -name 'core*' | while read core; do\n      LC_ALL=C gdb --core=\"$core\" --batch 2> /dev/null | grep -q \"^Core was generated by \\`${prefix}/bin/${bin_name}\" || continue\n      echo \"=====>  Core file: \"$core\" ($(stat -c%y \"$core\"))\" >> $FILE\n      echo \"        =========================================\" >> $FILE\n      gdb \"${prefix}/bin/${bin_name}\" --core=\"$core\" --batch -ex \"thread apply all bt\" 2> /dev/null >> $FILE\n      rm -f \"$core\"\n  done\n}\n\nprint_crash_report()\n{\n  FILE=\"$CRASHLOG_DIR/${bin_name}_crashlog-`date +%Y%m%d_%H%M%S`.log\"\n  echo \"############## $APP CRASH LOG ###############\" >> $FILE\n  echo >> $FILE\n  echo \"################ SYSTEM INFO ################\" >> $FILE\n  echo -n \" Date: \" >> $FILE\n  LC_ALL=C date >> $FILE\n  echo \" $APP Options: $SAVED_ARGS\" >> $FILE\n  echo \" $APP version: $APP_VERSION\" >> $FILE\n  echo -n \" Arch: \" >> $FILE\n  uname -m >> $FILE\n  echo -n \" Kernel: \" >> $FILE\n  uname -rvs >> $FILE\n  echo -n \" Release: \" >> $FILE\n  if [ -f /etc/os-release ]; then\n\t  . /etc/os-release\n\t  echo $NAME $VERSION >> $FILE\n  elif command_exists lsb_release; then\n    echo >> $FILE\n    lsb_release -a 2> /dev/null | sed -e 's/^/    /' >> $FILE\n  else\n    echo \"lsb_release not available\" >> $FILE\n  fi\n  echo \"############## END SYSTEM INFO ##############\" >> $FILE\n  echo >> $FILE\n  echo \"############### STACK TRACE #################\" >> $FILE\n  if command_exists gdb; then\n    if command_exists coredumpctl; then\n      # Generate core\n      core=$(mktemp -p /tmp/ core.subsurface.XXXXXXXXXX)\n      coredumpctl dump ${prefix}/bin/${bin_name} > $core\n      single_stacktrace \"/tmp/\" 1\n    else\n      # Find in current directory\n      single_stacktrace \"$PWD\" 1\n    fi\n    # Find in plugins directories\n    if [ $KODI_HOME ]; then\n      BASEDIR=$KODI_HOME\n    else\n      BASEDIR=\"$LIBDIR/${bin_name}/\"\n    fi\n    single_stacktrace \"$BASEDIR\" 5\n    # find in userdata dir\n    single_stacktrace \"$HOME\" 5\n    # try /proc/sys/kernel/core_pattern\n    [ -d \"$(dirname $(cat /proc/sys/kernel/core_pattern))\" ] && single_stacktrace \"$(dirname $(cat /proc/sys/kernel/core_pattern))\" 1\n  else\n    echo \"gdb not installed, can't get stack trace.\" >> $FILE\n  fi\n  echo \"############# END STACK TRACE ###############\" >> $FILE\n  echo >> $FILE\n  echo \"############ END $APP CRASH LOG #############\" >> $FILE\n  echo \"Crash report available at $FILE\"\n}\n\nif command_exists gdb; then\n  # Output warning in case ulimit is unsupported by shell\n  eval ulimit -c unlimited\n  if [ ! $? = \"0\" ]; then\n    echo \"${bin_name}: ulimit is unsupported by this shell\" 1>&2\n  fi\nfi\n\nLOOP=1\nwhile [ $(( $LOOP )) = \"1\" ]\ndo\n  LOOP=0\n  \"${prefix}/bin/${bin_name}\" $SAVED_ARGS\n  RET=$?\n  if [ $(( $RET == 65 )) = \"1\" ]\n  then # User requested to restart app\n    LOOP=1\n  elif [ $(( ($RET >= 131 && $RET <= 136) || $RET == 139 )) = \"1\" ]\n  then # Crashed with core dump\n    print_crash_report\n  fi\n#   echo \"RET = $RET\"\ndone\n\nexit $RET\n"
        },
        {
          "name": "subsurface.desktop",
          "type": "blob",
          "size": 0.2451171875,
          "content": "[Desktop Entry]\nType=Application\nName=Subsurface\nGenericName=dive log program\nComment=manage and display dive computer data\nIcon=subsurface-icon\nExec=subsurface\nTerminal=false\nCategories=Utility;\nKeywords=dive;log;divelog;divecomputer;dives;computer;\n"
        },
        {
          "name": "subsurface.qrc",
          "type": "blob",
          "size": 5.044921875,
          "content": "<RCC>\n    <qresource prefix=\"/\">\n        <file alias=\"satellite-icon\">icons/satellite.svg</file>\n        <file alias=\"graph-icon\">icons/pref_tech.png</file>\n        <file alias=\"star-icon\">icons/star.svg</file>\n        <file alias=\"subsurface-icon\">icons/subsurface-icon.svg</file>\n        <file alias=\"subsurface-mobile-icon\">icons/subsurface-mobile-icon.png</file>\n        <file alias=\"list-add-icon\">icons/plus.png</file>\n        <file alias=\"list-remove-icon\">icons/trash.png</file>\n        <file alias=\"list-remove-disabled-icon\">icons/trash-forbidden.png</file>\n        <file alias=\"units-icon\">icons/units.png</file>\n        <file alias=\"preferences-system-network-icon\">icons/network.png</file>\n        <file alias=\"preferences-cloud-icon\">icons/pref_cloud.png</file>\n        <file alias=\"preferences-equipment-icon\">icons/pref_equipment.png</file>\n        <file alias=\"preferences-media-icon\">icons/pref_media.png</file>\n        <file alias=\"preferences-dc-icon\">icons/pref_dc.png</file>\n        <file alias=\"preferences-log-icon\">icons/pref_log.png</file>\n        <file alias=\"preferences-display-icon\">icons/pref_display.png</file>\n        <file alias=\"preferences-reset-icon\">icons/pref_reset.png</file>\n        <file alias=\"preferences-reset-warning-icon\">icons/warning-icon.svg</file>\n        <file alias=\"scale-graph-icon\">icons/graph.png</file>\n        <file alias=\"value-minimum-icon\">icons/minimum.svg</file>\n        <file alias=\"value-maximum-icon\">icons/maximum.svg</file>\n        <file alias=\"value-average-icon\">icons/average.svg</file>\n        <file alias=\"salinity-warning-icon\">icons/bluewarning.png</file>\n        <file alias=\"ruler-icon\">icons/ruler.svg</file>\n        <file alias=\"poster-icon\">icons/poster.png</file>\n        <file>xslt/commonTemplates.xsl</file>\n        <file>xslt/csv2xml.xslt</file>\n        <file>xslt/divelogs-export.xslt</file>\n        <file>xslt/divelogs.xslt</file>\n        <file>xslt/DivingLog.xslt</file>\n        <file>xslt/Mares.xslt</file>\n        <file>xslt/jdivelog2subsurface.xslt</file>\n        <file>xslt/MacDive.xslt</file>\n        <file>xslt/SuuntoDM4.xslt</file>\n        <file>xslt/SuuntoSDM.xslt</file>\n        <file>xslt/udcf.xslt</file>\n        <file>xslt/uddf-export.xslt</file>\n        <file>xslt/xml2csv.xslt</file>\n        <file>xslt/xml2manualcsv.xslt</file>\n        <file>xslt/uddf.xslt</file>\n        <file>xslt/sensuscsv.xslt</file>\n        <file>xslt/subsurfacecsv.xslt</file>\n        <file>xslt/manualcsv2xml.xslt</file>\n        <file>xslt/shearwater.xslt</file>\n        <file>xslt/DiveLog.xslt</file>\n        <file>xslt/av1.xslt</file>\n        <file alias=\"rate-sac-icon\">icons/gas.png</file>\n        <file alias=\"depth-mod-icon\">icons/mod.png</file>\n        <file alias=\"pp-he-icon\">icons/he.png</file>\n        <file alias=\"pp-n2-icon\">icons/n2.png</file>\n        <file alias=\"pp-o2-icon\">icons/o2.png</file>\n        <file alias=\"ceiling-calculated-icon\">icons/ss.png</file>\n        <file alias=\"ceiling-tissues-icon\">icons/icon-ceiling-alltissues.png</file>\n        <file alias=\"depth-ndl-icon\">icons/limit.png</file>\n        <file alias=\"ceiling-increments-icon\">icons/3x3.png</file>\n        <file alias=\"ceiling-dc-icon\">icons/pc.png</file>\n        <file alias=\"depth-ead-icon\">icons/ead.png</file>\n        <file alias=\"rate-heart-icon\">icons/icon-HR.png</file>\n        <file alias=\"heatmap-icon\">icons/heatmap.png</file>\n        <file alias=\"photo-icon\">icons/pictures.png</file>\n        <file>icons/subsurface/index.theme</file>\n        <file alias=\"go-down-icon\">icons/subsurface/32x32/actions/go-down.png</file>\n        <file alias=\"go-up-icon\">icons/subsurface/32x32/actions/go-up.png</file>\n        <file alias=\"window-close-icon\">icons/subsurface/32x32/actions/window-close.png</file>\n        <file alias=\"dc-ostc-2n-icon\">icons/ostc2n.png</file>\n        <file alias=\"dc-ostc-3-icon\">icons/ostc3.png</file>\n        <file alias=\"dc-ostc-4-icon\">icons/ostc4.png</file>\n        <file alias=\"dc-suunto-vyper-icon\">icons/suunto_vyper.png</file>\n        <file alias=\"edit-clear-icon\">icons/edit-undo.svg</file>\n        <file alias=\"filter-close\">icons/process-stop.svg</file>\n        <file alias=\"edit-icon\">icons/edit-circled.svg</file>\n        <file alias=\"globe-icon\">icons/Emblem-earth.svg</file>\n        <file alias=\"geotag-icon\">icons/geocode.svg</file>\n        <file alias=\"photo-in-icon\">icons/duringPhoto.png</file>\n        <file alias=\"photo-out-icon\">icons/outsidePhoto.png</file>\n        <file alias=\"photo-in-out-icon\">icons/inAndOutPhoto.png</file>\n        <file alias=\"preferences-desktop-locale-icon\">icons/language.png</file>\n        <file alias=\"camera-icon\">icons/camera.svg</file>\n        <file alias=\"video-icon\">icons/video.svg</file>\n        <file alias=\"video-overlay\">icons/video_overlay.svg</file>\n        <file alias=\"unknown-icon\">icons/unknown.svg</file>\n        <file alias=\"tissue-icon\">icons/tissue.png</file>\n        <file alias=\"gps_good_result-icon\">icons/resultgreen.png</file>\n        <file alias=\"gps_warning_result-icon\">icons/resultyellow.png</file>\n        <file alias=\"gps_bad_result-icon\">icons/resultred.png</file>\n    </qresource>\n</RCC>\n"
        },
        {
          "name": "subsurface_enabled_translations",
          "type": "blob",
          "size": 2.0107421875,
          "content": "qt_ar.qm\nqtbase_ca.qm\nqtbase_cs.qm\nqtbase_de.qm\nqtbase_en.qm\nqtbase_fi.qm\nqtbase_fr.qm\nqtbase_he.qm\nqtbase_hu.qm\nqtbase_it.qm\nqtbase_ja.qm\nqtbase_ko.qm\nqtbase_lv.qm\nqtbase_pl.qm\nqtbase_ru.qm\nqtbase_sk.qm\nqtbase_uk.qm\nqt_ca.qm\nqtconfig_hu.qm\nqtconfig_ja.qm\nqtconfig_ko.qm\nqtconfig_pl.qm\nqtconfig_ru.qm\nqtconfig_sk.qm\nqtconfig_sl.qm\nqtconfig_uk.qm\nqtconfig_zh_CN.qm\nqtconfig_zh_TW.qm\nqt_cs.qm\nqt_da.qm\nqtdeclarative_de.qm\nqtdeclarative_en.qm\nqtdeclarative_fi.qm\nqtdeclarative_fr.qm\nqtdeclarative_ja.qm\nqtdeclarative_ko.qm\nqtdeclarative_lv.qm\nqtdeclarative_pl.qm\nqtdeclarative_ru.qm\nqtdeclarative_sk.qm\nqtdeclarative_uk.qm\nqt_de.qm\nqt_en.qm\nqt_es.qm\nqt_fa.qm\nqt_fi.qm\nqt_fr.qm\nqt_gl.qm\nqt_help_cs.qm\nqt_help_da.qm\nqt_help_de.qm\nqt_help_en.qm\nqt_help_fr.qm\nqt_help_gl.qm\nqt_help_hu.qm\nqt_help_it.qm\nqt_help_ja.qm\nqt_help_ko.qm\nqt_help_pl.qm\nqt_help_ru.qm\nqt_help_sk.qm\nqt_help_sl.qm\nqt_help_uk.qm\nqt_help_zh_CN.qm\nqt_help_zh_TW.qm\nqt_he.qm\nqt_hu.qm\nqt_it.qm\nqt_ja.qm\nqt_ko.qm\nqt_lt.qm\nqtmultimedia_ca.qm\nqtmultimedia_cs.qm\nqtmultimedia_de.qm\nqtmultimedia_en.qm\nqtmultimedia_fi.qm\nqtmultimedia_fr.qm\nqtmultimedia_hu.qm\nqtmultimedia_it.qm\nqtmultimedia_ja.qm\nqtmultimedia_ko.qm\nqtmultimedia_pl.qm\nqtmultimedia_ru.qm\nqtmultimedia_sk.qm\nqtmultimedia_uk.qm\nqt_pl.qm\nqt_pt.qm\nqtquick1_ca.qm\nqtquick1_cs.qm\nqtquick1_de.qm\nqtquick1_en.qm\nqtquick1_fi.qm\nqtquick1_fr.qm\nqtquick1_he.qm\nqtquick1_hu.qm\nqtquick1_it.qm\nqtquick1_ja.qm\nqtquick1_ko.qm\nqtquick1_pl.qm\nqtquick1_ru.qm\nqtquick1_sk.qm\nqtquick1_uk.qm\nqt_ru.qm\nqtscript_ca.qm\nqtscript_cs.qm\nqtscript_de.qm\nqtscript_en.qm\nqtscript_fi.qm\nqtscript_fr.qm\nqtscript_he.qm\nqtscript_hu.qm\nqtscript_it.qm\nqtscript_ja.qm\nqtscript_ko.qm\nqtscript_lv.qm\nqtscript_pl.qm\nqtscript_ru.qm\nqtscript_sk.qm\nqtscript_uk.qm\nqt_sk.qm\nqt_sl.qm\nqt_sv.qm\nqt_uk.qm\nqtxmlpatterns_ca.qm\nqtxmlpatterns_cs.qm\nqtxmlpatterns_de.qm\nqtxmlpatterns_en.qm\nqtxmlpatterns_fr.qm\nqtxmlpatterns_hu.qm\nqtxmlpatterns_it.qm\nqtxmlpatterns_ja.qm\nqtxmlpatterns_ko.qm\nqtxmlpatterns_pl.qm\nqtxmlpatterns_ru.qm\nqtxmlpatterns_sk.qm\nqtxmlpatterns_uk.qm\nqt_zh_CN.qm\nqt_zh_TW.qm\n"
        },
        {
          "name": "subsurfacelatextemplate.tex",
          "type": "blob",
          "size": 16.4423828125,
          "content": "\\def\\ssrfunitmeter{m}\n\\def\\ssrfunitft{ft}\n\\def\\ssrfunitkg{kg}\n\\def\\ssrfunitlb{lb}\n\\def\\ssrfunitbar{bar}\n\\def\\ssrfunitpsi{psi}\n\\def\\ssrfunitcelsius{}\n\\def\\ssrfunitcentigrate{${}^\\circ$C}\n\\def\\ssrfunitfahrenheit{${}^\\circ$F}\n\\def\\ssrfunitliter{$\\ell$}\n\\def\\ssrfunitcuft{cuft}\n\\def\\ssrfunitmeterpermin{m/min}\n\\def\\ssrfunitftpermin{ft/min}\n\\def\\myplot{\\includegraphics[width=12.7cm,height=7.3cm]{\\ssrfprofilename}}\n\\documentclass{article}\n\\usepackage[a4paper,margin=1cm]{geometry}\n\\usepackage[utf8]{inputenc}\n\\usepackage[portuguese]{babel}\n\\usepackage[T1]{fontenc}\n\\usepackage{graphicx}\n\\usepackage{xcolor} \n\\usepackage{helvet}\n\\usepackage{textcomp}\n\\usepackage{tikz}\n\\newcommand{\\myfont}{\\sffamily\\scriptsize}\n\\tikzset{every picture/.style={/utils/exec={\\myfont}}}\n\n\n\\newcommand\\ssrfpage{\n\n\n\n\n\n\\begin{tikzpicture}[remember picture, overlay, y=0.85pt, x=0.85pt, yscale=-3.6, xscale=3.6, inner sep=0pt, outer sep=0pt]\n\\begin{scope}[shift={(0,-87.0)}]\n  \\path[draw=black,miter limit=10.00,nonzero rule,line width=0.207pt,rounded\n    corners=0.0000cm] (0.2764,86.8769) rectangle (147.7171,296.3175);\n  \\path[fill=black] (0.0000,0.0000) node[above right] (flowRoot4524) {};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (294.3900,96.4443) node[above right] (text4770-2) {};\n  \\path[fill=black,line width=0.212pt] (295.5916,96.4856) node[above right]\n    (text1077) {};\n\\end{scope}\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (112.3405,95.8836) node[above right] (text4733) {Date};\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (110.6852,90.7715) -- (147.7015,90.7715) -- (147.7015,108.3254) --\n    (110.6852,108.3254) -- cycle;\n  \\path[shift={(0,-87.0)},draw=black,line join=miter,line cap=butt,miter\n    limit=4.00,even odd rule,line width=0.400pt] (110.8013,98.4555) --\n    (147.7015,98.4555);\n  \\path[draw=black,line join=miter,line cap=butt,miter limit=4.00,even odd\n    rule,line width=0.400pt] (130.1209,11.4555) -- (130.1209,21.3254);\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (111.6620,14.4265) node[above right] (text4758) {Max depth};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (130.5523,14.7016) node[above right] (text4762) {Dive time};\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (20.4075,90.7715) -- (33.9393,90.7715) -- (33.9393,98.7961) --\n    (20.4075,98.7961) -- cycle;\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (35.0892,90.7715) -- (109.4387,90.7715) -- (109.4387,98.7961) --\n    (35.0892,98.7961) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (35.6897,7.3798) node[above right] (text4770) {Location};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.3551,7.3798) node[above right] (text4774) {No:};\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (20.4483,93.6791) --\n    (147.7467,93.6791) -- (147.7467,131.6893) -- (20.4483,131.6893) -- cycle;\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (20.4309,99.9522) -- (109.4832,99.9522) -- (109.4832,109.6564) --\n    (20.4309,109.6564) -- cycle;\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (110.6465,34.4974) --\n    (147.7467,34.4974) -- (147.7467,92.4979) -- (110.6465,92.4979) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (112.3970,38.2627) node[above right] (text4770-1) {Signatures/stamps};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.3522,16.2480) node[above right] (text4770-9) {Buddies};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.1725,96.9371) node[above right] (text4770-0) {Notes};\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (20.4483,219.9589) -- (147.7467,219.9589) -- (147.7467,293.9135) --\n    (20.2185,293.9135) -- cycle;\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (20.4146,48.4321) --\n    (50.6867,48.4321) -- (50.6867,64.2174) -- (20.4146,64.2174) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.2175,51.3059) node[above right] (text4770-0-8-6) {Conditions};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (65.1876,70.8035) --\n    (83.7061,70.8035) -- (83.7061,76.4479) -- (65.1876,76.4479) -- cycle;\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (52.0880,48.5023) --\n    (109.4069,48.5023) -- (109.4069,83.5835) -- (52.0880,83.5835) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (52.9134,51.8125) node[above right] (text4770-1-4) {Equipment};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (52.9698,55.3757) node[above right] (text4770-1-4-4) {Suit};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.0839,68.4975) node[above right] (text4770-1-4-9) {Gases};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (52.9698,63.8888) node[above right=-0.6mm] (text4770-1-4-4-8) {Weight};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (84.5541,51.9167) node[above right] (text4770-1-4-4-85) {Tanks};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (52.8721,88.0971) node[above right] (text4770-1-4-4-2) {Rating};\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.237pt]\n    (25.8511,92.2143) -- (32.9192,92.2143) -- (32.9192,97.3296) --\n    (25.8511,97.3296) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (46.6461,5.0034) --\n    (76.5212,5.0034) -- (76.5212,10.7074) -- (46.6461,10.7074) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (120.9562,91.9200) -- (146.4161,91.9200) -- (146.4161,97.3566) --\n    (120.9562,97.3566) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (112.0476,102.8916) -- (128.9727,102.8916) -- (128.9727,107.0294) --\n    (112.0476,107.0294) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (131.0241,102.8916) -- (146.4161,102.8916) -- (146.4161,107.0294) --\n    (131.0241,107.0294) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (21.3262,104.0935) -- (107.9410,104.0935) -- (107.9410,108.6474) --\n    (21.3262,108.6474) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (21.2369,58.8196) --\n    (30.4140,58.8196) -- (30.4140,63.1953) -- (21.2369,63.1953) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (30.9935,58.8196) --\n    (39.7783,58.8196) -- (39.7783,63.1953) -- (30.9935,63.1953) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (53.2229,56.1967) --\n    (83.7061,56.1967) -- (83.7061,60.9725) -- (53.2229,60.9725) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (63.8714,62.3457) --\n    (83.7061,62.3457) -- (83.7061,67.9901) -- (63.8714,67.9901) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (84.7860,56.0263) --\n    (107.9254,56.0263) -- (107.9254,79.6335) -- (84.7860,79.6335) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (21.8133,98.5368) --\n    (146.3570,98.5368) -- (146.3570,130.5214) -- (21.8133,130.5214) -- cycle;\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (20.3549,65.1769) --\n    (50.6821,65.1769) -- (50.6821,92.4979) -- (20.3549,92.4979) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (21.2787,69.5219) --\n    (34.7830,69.5219) -- (34.7830,90.9781) -- (21.2787,90.9781) -- cycle;\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (52.0318,84.5849) --\n    (109.4306,84.5849) -- (109.4306,92.4979) -- (52.0318,92.4979) -- cycle;\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (69.8440,85.8599) --\n    (107.9254,85.8599) -- (107.9254,91.2163) -- (69.8440,91.2163) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (26.3757,8.2939) node[above right] (text4770-3) {\\ssrfnumber};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.9905,20.2139) node[above right] (text4770-53) {\\ssrfbuddy};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (48.9968,8.5807) node[above right] (text4770-6) {\\ssrfplace};\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (20.4328,34.4973) --\n    (50.6587,34.4973) -- (50.6587,47.2133) -- (20.4328,47.2133) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.2393,38.1932) node[above right] (text4770-5) {Time};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (21.3262,38.8865) --\n    (48.9895,38.8865) -- (48.9895,45.9796) -- (21.3262,45.9796) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (27.6320,44.7196) node[above right] (text4770-12) {\\ssrfhour:\\ssrfminute};\n  \\path[draw=black,miter limit=4.00,line width=0.400pt] (52.1588,34.4973) --\n    (109.4776,34.4973) -- (109.4776,47.3480) -- (52.1588,47.3480) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (53.1042,37.9180) node[above right] (text4770-0-8) {Type};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (60.2784,35.8129) --\n    (107.9410,35.8129) -- (107.9410,46.0945) -- (60.2784,46.0945) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (67.3195,43.3967) node[below right=-5mm,text width=47mm] (text4770-09) {\\ssrftype};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (24.8018,61.7094) node[above right] (text4770-60) {\\ssrfwatertemp};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (31.6437,61.6199) node[above right] (text4770-61) {\\ssrfairtemp};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (53.7828,59.2049) node[right,text width=30mm] (text4770-7) {\\ssrfsuit};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (64.3004,65.7119) node[above right] (text4770-02) {\\ssrftotalweight};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.7259,72.6977) node[above right] (text4770-59) {\\ssrfcylagasname};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (86.0143,58.7748) node[above right] (text4770-36) {\\ssrfcyladescription};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (71.4736,88.9620) node[above right] (text4770-19) {\\ssrfrating};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.6591,102.2643) node[below right=1mm, text width=13cm] (text4770-361) {\\ssrfcomment};\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (127.0870,95.6388) node[above right] (text4770-63) {\\ssrfdate};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.612pt]\n    (121.1000,18.6815) node[above right] (text4770-615) {\\ssrfmaximumdepth};\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (137.0216,105.7200) node[above right] (text4770-76) {\\ssrftime};\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (112.3970,111.4225) node[above right] (text4770-1-4-4-0) {Avg.\n    depth};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (134.7150,24.7146) node[above right] (text4770-1-4-4-1) {SAC};\n  \\path[shift={(0,-87.0)},draw=black,miter limit=4.00,line width=0.400pt]\n    (110.6852,108.3254) -- (147.7015,108.3254) -- (147.7015,120.3261) --\n    (110.6852,120.3261) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (112.0476,112.8925) -- (128.9727,112.8925) -- (128.9727,118.1518) --\n    (112.0476,118.1518) -- cycle;\n  \\path[shift={(0,-87.0)},fill=ceaeaea,miter limit=4.00,line width=0.240pt]\n    (131.0241,112.8925) -- (146.4161,112.8925) -- (146.4161,118.1518) --\n    (131.0241,118.1518) -- cycle;\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (112.7711,115.8848) node[above right] (text4770-93) {\\ssrfmeandepth};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (86.0143,63.2534) node[above right] (text4770-36-4) {\\ssrfcylbdescription};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.7259,79.9484) node[above right] (text4770-59-3) {\\ssrfcylcgasname};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (86.0143,67.7319) node[above right] (text4770-36-4-7) {\\ssrfcylcdescription};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (86.0143,72.2105) node[above right] (text4770-36-4-6) {\\ssrfcylddescription};\n  \\begin{scope}[shift={(-24.69478,-28.62516)}]\n    \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n      (47.8009,86.8125) node[above right] (text4770-0-8-7) {Water};\n  \\end{scope}\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (34.5456,58.2370) node[above right] (text4770-0-8-7-8) {Air};\n  \\begin{scope}[shift={(-28.92506,-29.71932)}]\n    \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n      (50.4592,84.4211) node[above right] (text4770-0-8-7-9) {Temperature};\n    \\begin{scope}[cm={{0.67131,0.0,0.0,0.67131,(40.73125,27.94586)}}]\n    \\end{scope}\n  \\end{scope}\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (40.9143,54.9082) node[above right] (text4770-0-8-7-9-0) {Visibility};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (40.8367,58.8196) --\n    (49.6215,58.8196) -- (49.6215,63.1953) -- (40.8367,63.1953) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (41.7054,61.7596) node[above right] (text4770-61-0) {\\ssrfviz};\n  \\path[shift={(0,-87.0)},fill=black,line join=miter,line cap=butt,line\n    width=0.800pt] (132.0813,116.2725) node[above right] (text4770-93-3) {\\ssrfsac};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (86.0143,76.6890) node[above right] (text4770-36-4-6-5) {\\ssrfcyledescription};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.7259,83.5738) node[above right] (text4770-59-3-3) {\\ssrfcyldgasname};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.7259,76.3230) node[above right] (text4770-59-3-7) {\\ssrfcylbgasname};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (42.2682,68.4249) node[above right=-2mm] (text4770-1-4-9-3) {Used gas};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (37.7148,72.8534) --\n    (49.4151,72.8534) -- (49.4151,80.8125) -- (37.7148,80.8125) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (21.7259,87.1991) node[above right] (text4770-59-3-3-2) {\\ssrfcylegasname};\n  \\path[shift={(0,-87.0)},fill=black,line width=0.212pt] (38.0589,145.7254)\n    node[above right] (text1070) {};\n  \\path[fill=black,line width=0.212pt] (38.4868,77.3007) node[above right]\n    (text1074) {\\ssrfgasuse};\n  \\path[fill=black,line width=0.212pt] (66.4165,74.3607) node[above right]\n    (text1078) {\\ssrfcomputer};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (53.0545,72.3016) node[above right] (text4770-1-4-4-7) {Computer};\n  \\path[fill=black,line width=0.212pt] (21.5737,138.9376) node[inner sep=0pt] (plot) at (84,169)\n    (text1117) {\\myplot};\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (77.2704,7.1215) node[above right] (text4770-367) {Country};\n  \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (87.4168,5.0034) --\n    (107.9410,5.0034) -- (107.9410,10.7074) -- (87.4168,10.7074) -- cycle;\n  \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n    (88.3566,8.5807) node[above right] (text4770-6-6) {\\ssrfcountry};\n  \\path[draw=black,line join=miter,line cap=butt,miter limit=4.00,even odd\n    rule,line width=0.400pt] (130.1209,21.3254) -- (130.1209,33.3261);\n  \\begin{scope}[shift={(0.00554,-11.07159)}]\n    \\path[draw=black,miter limit=4.00,line width=0.400pt] (20.4254,34.7863) --\n      (109.4776,34.7863) -- (109.4776,44.3977) -- (20.4254,44.3977) -- cycle;\n    \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n      (21.3467,38.0821) node[above right] (text4770-9-6) {Divemaster/Instructor};\n    \\path[fill=ceaeaea,miter limit=4.00,line width=0.240pt] (21.3207,38.9276) --\n      (107.9354,38.9276) -- (107.9354,43.4815) -- (21.3207,43.4815) -- cycle;\n    \\path[fill=black,line join=miter,line cap=butt,line width=0.800pt]\n      (21.9849,42.0480) node[above right] (text4770-53-3) {\\ssrfdivemaster};\n  \\end{scope}\n\n\\end{tikzpicture}}\n\n\n\\begin{document}\n\n\\definecolor{ceaeaea}{RGB}{234,234,234}\n"
        },
        {
          "name": "subsurfacetemplate.tex",
          "type": "blob",
          "size": 2.3271484375,
          "content": "\\input graphicx\n\\nopagenumbers\n\\font\\breit=cmr10 scaled \\magstep3\n\\font\\klein=cmr9\n\\font\\winzig=cmr5\n\\def\\slinie{\\hrulefill\\hskip 3em}\n\\def\\leer{}\n\\overfullrule=0pt\n\\def\\p{\\hskip 0.5cm}  % typical horizontal room\n\\parindent=1cm\n%\\offinterlineskip\n\\long\\def\\page{\n%% Unit symbols, add spaces in front if you prefer\n\\def\\unitmeter{m}\n\\def\\unitft{ft}\n\\def\\unitkg{kg}\n\\def\\unitlb{lb}\n\\def\\unitbar{bar}\n\\def\\unitpsi{psi}\n\\def\\unitcentigrade{${}^\\circ$C}\n\\def\\unitfahrenheit{${}^\\circ$F}\n\\def\\unitliter{$\\ell$}\n\\def\\unitcuft{cuft}\n\\def\\unitmeterpermin{m/min}\n\\def\\unitftpermin{ft/min}\n%\n$$\\vbox{\\hrule     % upper cutting line\n\\vskip 2.0cm       % upper whitespace\n\\vrule             % left cutting line\n$\\vbox to 15cm{    % height of box\n\\vss\\hbox to 3mm{\\hrulefill}\\vss}$       % middle line\n\\hskip 4.0cm       % left white space\n\\vrule\\vbox to 15cm{    % again height of box\n\\hrule depth 2pt   % upper box boundary\n\\hbox to 10cm{     % width of box\n\\strut\\p\\date\\slinie\\vrule$\\vcenter to 1.5cm{\\vfil\\hbox to\n1.5cm{\\hss\\breit\\strut\\number\\hss}\\vfil\\hrule}\\vrule$}\n%\n\\hbox{\\p{\\breit\\strut\\place} \\country\\hrulefill}\n\\medskip\n\\hbox{\\p{\\breit\\strut\\spot}\\hrulefill}\n\\medskip\n\\hbox{\\p\\strut Entrance:\\entrance\\slinie}\n\\bigskip\n\\hbox to 10cm{\\hss\\breit\\strut \\time \\p@\\p\\hbox to 1.5cm{\\hss\\depth}\\hss}\n\\bigskip\n\\hbox to 10cm{\\klein\\p $\\Delta p$: \\hbox to 1cm{\\hrulefill\\gasuse}\\hss\nSAC: \\hbox to 1.5cm{\\hrulefill\\sac}\\hss\nType: \\hbox to 1.2cm{\\hrulefill\\type}\\hss Viz.:\n\\hbox to 0.8cm{\\hrulefill\\viz}\\p}\n\n\\ifx\\cylagasname\\leer\\else\n\\hbox to 10cm{\\p\\klein\n\\cyladescription\\ \\cylagasname: \\cylastartpress\\ -- \\cylaendpress\n\\hss}\n\\fi\n\\ifx\\cylbgasname\\leer\\else\n\\hbox to 10cm{\\p\\klein\n\\cylbdescription\\ \\cylbgasname: \\cylbstartpress\\ -- \\cylbendpress\n\\hss}\n\\fi\n\\ifx\\cylcgasname\\leer\\else\n\\hbox to 10cm{\\p\\klein\n\\cylcdescription\\ \\cylcgasname: \\cylcstartpress\\ -- \\cylcendpress\n\\hss}\n\\fi\n\\bigskip\n\\hbox{\\p\\hsize = 9cm\n\\vbox{\\noindent\n\\comment\n}\\p\\hss}\n\\leaders\\vbox to 0.55cm{\\vss\\hbox to 10cm{\\p\\hrulefill\\p}}\\vfill\n\\hbox to 10cm{\\hss\\plot\\hss}\n\\vskip 0.5cm\n\\hbox to 10cm{\\p{\\breit Buddy:} \\buddy\\hrulefill\\p}\n\n\\vskip 1ex         % room above end of box\n\\hrule depth 2pt   % lower boundary\n}\\vrule            % right boundary\n\\hskip 1.0cm\\vrule % right white space\n\\par\n\\hbox{\\hskip 6cm\n\\winzig Subsurface dive log http://subsurface-divelog.org}\n\\vskip 2.0cm       % lower white space\n\\hrule}$$}\n"
        },
        {
          "name": "terms",
          "type": "blob",
          "size": 4.279296875,
          "content": "Do not translate this file.\nThis just tries to collect some of the terms you will run into\nwhen translating Subsurface\n\nSAC\t\t Surface equivalent air consumption\n\t\t The air consumed during a dive at different\n\t\t depth is adjusted for depth/pressure to give\n\t\t an easy to understand air consumption number\n\nOTU\t\t Oxygen Toxicity Unit - a measurement how O₂\n\t\t negatively impacts the lung tissue. This number\n\t\t has no unit, the values are rather abstract\n\nCNS\t\t Central Nervous System Oxygen Toxicity - a\n\t\t measurement how O₂ negatively impacts the\n\t\t central nervous system - this is a percentage\n\t\t or a number <= 1\n\nmaxCNS\t\t the highest CNS value during a dive\n\npO₂, pN₂, pHe\t These are all partial pressures of the three\n\t\t gases Oxygen (O₂), Nitrogen (N₂) and Helium (He).\n\nO₂%, He%\t The fraction of Oxygen and Helium in a gas.\n\t\t The partial pressure is therefore the pressure\n\t\t of the gas times the fraction of the specific\n\t\t component. E.g. a gas with O₂% = 30 (also called\n\t\t 30% Nitrox or EAN30) at 30m depth (where the\n\t\t pressure is 4atm) therefore has a pO₂ of\n\t\t 4 * 0.30 = 1.2\n\nTrimix\t\t Gas Mixture containing Helium, Oxygen and Nitrogen.\n\nHeliox\t\t Gas Mixture containing Helium and Oxygen.\n\nNitrox\t\t Gas Mixture containing Nitrogen and Oxygen.\n\nTC\t\t Tissue Compartment, is a logical tissue interface to various\n\t\t tissues in the human body. Since each tissue has its own gas\n\t\t dissolving time, they have been categorized into compartments.\n\nCSV\t\t Comma separated values - a common file format\n\nTSV\t\t Tab separated values - a common file format\n\nStopdepth\t The depth at which the diver needs to wait for\n\t\t some time in order to \"off-gas\". Also deco stop.\n\nWorkPress\t Working Pressure of a tank - the pressure it should\n\t\t be filled to\n\nStartPress\t Starting Pressure - at the beginning of a dive\n\nEndPress\t Ending Pressure - at the end of a dive\n\nDeco MOD\t The Maximum Operating Depth for a decompression gas,\n\t\t which is the depth at which the diver wants to switch\n\t\t to a decompression gas\n\nBot. MOD\t The Maximum Operating Depth for a gas used in the bottom\n\t\t phase of a dive\n\nDevice ID\t Unique ID for a specific dive computer\n\ntrip\t\t dives are grouped into \"trips\" based on their\n\t\t individual start time. As soon as there are more than\n\t\t 48h between dives the automated algorithm will start\n\t\t a new trip\n\nUDDF\t\t standardized file format\n\nGFHigh, GFLow\t Gradient Factors of the Buehlmann algorithm. These\n\t\t impact the way the deco obligations are calculated\n\t\t in Subsurface. Typically these are between 20 and 100.\n\t\t Lower is more conservative (i.e., more deco). It's\n\t\t possible to use values below 20 and above 100 in\n\t\t certain circumstances, but 70/30 is much more common.\n\nCC\t\t Closed circuit - short for \"rebreather diving\"\n\nOC\t\t Open circuit - traditional scuba\n\nCC Setpoint\t Rebreathers often are run with a fixed pO₂ - the \"setpoint\"\n\nBailing out to OC\n\t\t in a rebreather dive the dive switches to their emergency\n\t\t OC equipment\n\nAuto Group\t automatically arrange dives into trips\n\nCeiling\t\t when the diver is \"in deco\", i.e., when the diver cannot\n\t\t directly ascend to the surface but has to put in \"stops\"\n\t\t to give their body time to \"off gas\" (reduce the amount of N₂\n\t\t and potentially He in the body), there is a minimum depth\n\t\t they should not climb above - that's the ceiling. Often a\n\t\t diver will do a deco stop well below the ceiling\n\nViz\t\t short for visibility\n\nbelt, ankle\t weight system types - a backplate is used mostly by tech\nbackplate,\t divers to mount the tanks on (recreational divers have a BC,\nintegrated,\t tech divers usually a backplate and a wing)\nclip-on\n\nrbt\t\t remaining bottom time\n\nrgt\t\t remaining gas time\n\nworkload\t is this a strenuous dive?\n\ndeepstop\t stop well below the ceiling\n\nsafety stop\t stop at the end of a recreational dive, typically\n\t\t 3 minutes at 5 meters\n\nbelow floor\t event showing dive is below the depth where the dive\n\t\t is accruing additional deco time\n\nOLF\t\t Oxygen Limit Fraction; Suunto specific term for CNS\n\nrgbm\t\t reduced gradient bubble method - alternative deco\n\t\t algorithm\n\nnon stop time\t amount of time the diver can stay at the current depth\nNDL\t\t without going into deco\n\nEAD\t\t equivalent air depth\n\nEND\t\t effective equivalent Nitrogen depth\n\nEADD\t\t equivalent air density depth\n\nTTS\t\t time to surface (including deco stop and reasonable\n\t\t ascent speed)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "theme",
          "type": "tree",
          "content": null
        },
        {
          "name": "transifex.yml",
          "type": "blob",
          "size": 0.1982421875,
          "content": "git:\n  filters:\n  - filter_type: file\n    file_format: QT\n    source_file: translations/subsurface_source.ts\n    source_language: en\n    translation_files_expression: 'translations/subsurface_<lang>.ts'\n"
        },
        {
          "name": "translations",
          "type": "tree",
          "content": null
        },
        {
          "name": "xslt",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}