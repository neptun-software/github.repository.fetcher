{
  "metadata": {
    "timestamp": 1736565751940,
    "page": 673,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jacobdufault/cquery",
      "stars": 2347,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.185546875,
          "content": "version: \"{build}\"\nimage: Visual Studio 2017\nplatform: x64\nconfiguration: Debug\n\ninstall:\n  - git submodule update --init\n\nenvironment:\n  CLICOLOR_FORCE: 1\n  CHERE_INVOKING: 1 # Tell Bash to inherit the current working directory\n  matrix:\n    - MSYSTEM: MINGW64\n    - MSYSTEM: MSVC\n\nmatrix:\n  fast_finish: true # Immediately finish build if one of the jobs fails.\n\nfor:\n  -\n    matrix:\n      only:\n        - MSYSTEM: MINGW64\n    build_script:\n      ps: \"C:\\\\msys64\\\\usr\\\\bin\\\\bash -lc @\\\"\\n\n      cmake -G'MSYS Makefiles' -DCMAKE_INSTALL_PREFIX=install .\\n\n      make -j$(nproc) install 2>&1\\n\n      cp /mingw64/bin/libgcc_s_seh-1.dll install/bin\\n\n      cp /mingw64/bin/libstdc++-6.dll install/bin\\n\n      cp /mingw64/bin/libwinpthread-1.dll install/bin\\n\\\"@\"\n  -\n    matrix:\n      only:\n        - MSYSTEM: MSVC\n    before_build:\n      - cmake -DCI=ON -DCMAKE_INSTALL_PREFIX=install -DCMAKE_GENERATOR_PLATFORM=x64 .\n    build:\n      project: cquery.sln\n    after_build:\n      - cmake --build . --target install\n\ntest_script:\n  - .\\install\\bin\\cquery.exe --ci --log-all-to-stderr --test-unit\n  - .\\install\\bin\\cquery.exe --ci --log-all-to-stderr --test-index\n\ncache:\n  - C:\\projects\\cquery\\build\\LLVM-6.0.0-win64\\\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0224609375,
          "content": "BasedOnStyle: Chromium\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.15625,
          "content": "# By default, use platform specific endings.\n*.h text eol=auto\n*.cpp text eol=auto\n*.cc text eol=auto\n\n# Tests must always be crlf\nindex_tests/** text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2841796875,
          "content": ".cquery_cached_index\n.DS_Store\n.lock-waf*\n.vs\n.vscode/\n.vscode/.ropeproject\n.waf*\n*.cquery\n*.sln\n*.swp\n*.vcxproj\n*.vcxproj.filters\n*.vcxproj.user\n**/*.pyc\nbuild*\ncquery_diagnostics.log\ncquery_log.txt\nDebug\ne2e_cache\nfoo*\nlibcxx\nvscode-extension.vsix\nwaf-*\nwaf2*\nwaf3*\nx64\n.ycm_extra_conf.py\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.72265625,
          "content": "[submodule \"third_party/rapidjson\"]\n\tpath = third_party/rapidjson\n\turl = https://github.com/miloyip/rapidjson\n[submodule \"third_party/doctest\"]\n\tpath = third_party/doctest\n\turl = https://github.com/onqtam/doctest\n[submodule \"third_party/sparsepp\"]\n\tpath = third_party/sparsepp\n\turl = https://github.com/greg7mdp/sparsepp\n[submodule \"third_party/loguru\"]\n\tpath = third_party/loguru\n\turl = https://github.com/emilk/loguru\n[submodule \"third_party/msgpack-c\"]\n\tpath = third_party/msgpack-c\n\turl = https://github.com/msgpack/msgpack-c\n[submodule \"third_party/pugixml\"]\n\tpath = third_party/pugixml\n\turl = https://github.com/zeux/pugixml\n[submodule \"third_party/reproc\"]\n\tpath = third_party/reproc\n\turl = https://github.com/DaanDeMeyer/reproc.git\n"
        },
        {
          "name": ".pep8",
          "type": "blob",
          "size": 0.0205078125,
          "content": "[pep8]\nindent-size=2\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.78125,
          "content": "dist: trusty\nsudo: false\n# Use generic to avoid travis-ci overwriting CC and CXX\n# See: https://stackoverflow.com/questions/35110123/travis-ci-with-c14-and-linux\nlanguage: generic \n\n# Default git clone --recursive clones unnecessary dependencies so we override\n# it with our own command in before_install\ngit:\n  submodules: false\n  depth: 1\n\naddons:\n  apt:\n    sources: &sources\n      - ubuntu-toolchain-r-test\n      - llvm-toolchain-precise-3.6\n      - llvm-toolchain-trusty-6.0\n\ncache:\n  directories:\n    - clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04/\n    - clang+llvm-6.0.0-x86_64-apple-darwin/\n\n# When building with Clang GCC still has to be installed to provide libstdc++\n# that Clang uses (Clang doesn't bundle libc++)\nmatrix:\n  fast_finish: true\n  include:\n    - os: linux\n      env: CC=gcc-5 CXX=g++-5\n      addons:\n        apt:\n          sources: *sources\n          packages: \n            - g++-5\n\n    - os: linux\n      env: CC=gcc-7 CXX=g++-7\n      addons:\n        apt:\n          sources: *sources\n          packages: \n            - g++-7\n\n    - os: linux\n      env: CC=clang-3.6 CXX=clang++-3.6\n      addons:\n        apt:\n          sources: *sources\n          packages: \n            - clang-3.6\n            - g++-5\n\n    - os: linux\n      env: CC=clang-6.0 CXX=clang++-6.0\n      addons:\n        apt:\n          sources: *sources\n          packages:\n            - clang-6.0\n            - g++-5\n\n    - os: osx\n      osx_image: xcode9.2\n      env: CC=clang CXX=clang++\n\nbefore_install:\n  - git submodule update --init\n  - eval \"${INSTALL}\"\n\nscript:\n  - cmake -DCI=ON -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Debug .\n  - cmake --build . -- -j 3\n  - cmake --build . --target install\n  - ./install/bin/cquery --ci --log-all-to-stderr --test-unit\n  - ./install/bin/cquery --ci --log-all-to-stderr --test-index\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.052734375,
          "content": "cmake_minimum_required(VERSION 3.1)\nproject(cquery LANGUAGES CXX)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/)\ninclude(DefaultCMakeBuildType)\n\n# Required Clang version\nset(CLANG_DOWNLOAD_LOCATION ${CMAKE_BINARY_DIR}\n    CACHE STRING \"Downloaded Clang location\")\noption(SYSTEM_CLANG \"Use system installation of Clang instead of \\\n       downloading Clang\" OFF)\noption(ASAN \"Compile with address sanitizers\" OFF)\noption(ASSERTS \"Compile with asserts enabled\" OFF)\noption(CI \"Add -Werror or equivalent\" OFF)\n\n# Sources for the executable are specified at end of CMakeLists.txt\nadd_executable(cquery \"\")\n\n### Compile options\n\n# CMake default compile flags:\n# MSVC + Clang(Windows):\n#   debug: /MDd /Zi /Ob0 /Od /RTC1\n#   release: /MD /O2 /Ob2 /DNDEBUG\n# GCC + Clang(Linux):\n#   debug: -g\n#   release: -O3 -DNDEBUG\n\n# Enable C++14 (Required)\nset_property(TARGET cquery PROPERTY CXX_STANDARD 14)\nset_property(TARGET cquery PROPERTY CXX_STANDARD_REQUIRED ON)\n# Disable gnu extensions except for Cygwin which needs them to build properly\nif(NOT CYGWIN)\n  set_property(TARGET cquery PROPERTY CXX_EXTENSIONS OFF)\nendif()\n\n# CMake sets MSVC for both MSVC and Clang(Windows)\nif(MSVC)\n  # Common MSVC/Clang(Windows) options\n  target_compile_options(cquery PRIVATE\n    /nologo\n    /EHsc\n    /D_CRT_SECURE_NO_WARNINGS # don't try to use MSVC std replacements\n    /W3 # roughly -Wall\n    /wd4996 # disable loguru unsafe warnings\n    /wd4722 # ignores warning C4722\n            # (destructor never returns) in loguru\n    /wd4267 # ignores warning C4267\n            # (conversion from 'size_t' to 'type'),\n            # roughly -Wno-sign-compare\n    /wd4800\n    /wd4068 # Disable unknown pragma warning\n    $<$<CONFIG:Debug>:/FS>\n    $<$<BOOL:${CI}>:/WX> \n  )\nelse()\n  # Common GCC/Clang(Linux) options\n  target_compile_options(cquery PRIVATE\n    -Wall\n    -Wno-sign-compare\n    -Wno-unknown-pragmas\n    $<$<BOOL:${CI}>:-Werror>\n  )\n\n  if(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)\n    target_compile_options(cquery PRIVATE -Wno-return-type -Wno-unused-result)\n  endif()\n\n  if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)\n    target_compile_options(cquery PRIVATE\n      $<$<CONFIG:Debug>:-fno-limit-debug-info>\n    )\n  endif()\n\n  if(ASAN)\n    target_compile_options(cquery PRIVATE -fsanitize=address,undefined)\n    # target_link_libraries also takes linker flags\n    target_link_libraries(cquery PRIVATE -fsanitize=address,undefined)\n  endif()\nendif()\n\n# Enable asserts\nif(ASSERTS)\n  string(REPLACE \"/DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n  string(REPLACE \"-DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\nendif()\n\n### Download Clang if required\n\nif(NOT SYSTEM_CLANG)\n  message(STATUS \"Using downloaded Clang\")\n\n  include(DownloadAndExtractClang)\n  download_and_extract_clang(${CLANG_DOWNLOAD_LOCATION})\n  # Used by FindClang\n  set(CLANG_ROOT ${DOWNLOADED_CLANG_DIR})\nelse()\n  message(STATUS \"Using system Clang\")\nendif()\n\n### Libraries\n\nset(REPROC_BUILD_CXX_WRAPPER ON CACHE BOOL \"\" FORCE)\nadd_subdirectory(third_party/reproc)\ntarget_link_libraries(cquery PRIVATE reproc::reproc)\n\n# See cmake/FindClang.cmake\nfind_package(Clang 6.0.0)\ntarget_link_libraries(cquery PRIVATE Clang::Clang)\n\n# Enable threading support\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\ntarget_link_libraries(cquery PRIVATE Threads::Threads)\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL Linux)\n  # loguru calls dladdr\n  target_link_libraries(cquery PRIVATE ${CMAKE_DL_LIBS})\n\nelseif(${CMAKE_SYSTEM_NAME} STREQUAL FreeBSD)\n  # loguru::stacktrace_as_stdstring calls backtrace_symbols\n  # sparsepp/spp_memory.h uses libkvm\n  # src/platform_posix.cc uses libthr\n  find_package(Backtrace REQUIRED)\n  target_link_libraries(cquery PRIVATE ${Backtrace_LIBRARIES} kvm thr)\n\nelseif(${CMAKE_SYSTEM_NAME} STREQUAL Windows)\n  target_compile_definitions(cquery PRIVATE _WIN32_WINNT=0x0600) # Windows Vista\n  # sparsepp/spp_memory.h uses LibPsapi\n  target_link_libraries(cquery PRIVATE Psapi)\nendif()\n\n### Definitions\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/foo.cpp\n     \"#include <cxxabi.h>\\n#include <dlfcn.h>\\n#include <execinfo.h>\\nint main(){}\")\ntry_compile(LOGURU_STACKTRACES_ALLOWED ${CMAKE_CURRENT_BINARY_DIR}\n            SOURCES ${CMAKE_CURRENT_BINARY_DIR}/foo.cpp)\nfile(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/foo.cpp)\n\ntarget_compile_definitions(cquery PRIVATE\n  LOGURU_STACKTRACES=$<BOOL:${LOGURU_STACKTRACES_ALLOWED}>\n  LOGURU_WITH_STREAMS=1\n  LOGURU_FILENAME_WIDTH=18\n  LOGURU_THREADNAME_WIDTH=13\n  DEFAULT_RESOURCE_DIRECTORY=\"${Clang_RESOURCE_DIR}\"\n)\n\n### Includes\n\ntarget_include_directories(cquery PRIVATE\n  src\n  third_party\n  third_party/doctest\n  third_party/loguru\n  third_party/msgpack-c/include\n  third_party/pugixml/src\n  third_party/rapidjson/include\n  third_party/sparsepp\n)\n\n### Install\n\ninstall(TARGETS cquery RUNTIME DESTINATION bin)\n\n# If downloaded Clang is used we have to bundle the required files from\n# the downloaded Clang along with the cquery executable\nif(NOT SYSTEM_CLANG)\n\n  # On Linux/FreeBSD/Darwin we set the rpath so cquery can find\n  # libclang.[so,dylib]. On Windows we install libclang.dll to the bin directory\n  # to do the same.\n\n  if(APPLE)\n    set_property(TARGET cquery \n      APPEND PROPERTY INSTALL_RPATH @loader_path/../lib\n    )  \n  elseif(UNIX)\n    set_property(TARGET cquery \n      APPEND PROPERTY INSTALL_RPATH $ORIGIN/../lib\n    )\n  elseif(WIN32)\n    install(FILES ${DOWNLOADED_CLANG_DIR}/bin/libclang.dll DESTINATION bin)\n  endif()\n\n  # Install libclang.[so,lib,dylib] to lib directory\n\n  file(GLOB LIBCLANG_PLUS_SYMLINKS\n       ${DOWNLOADED_CLANG_DIR}/lib/libclang.[so,lib,dylib]*)\n  install(FILES ${LIBCLANG_PLUS_SYMLINKS} DESTINATION lib)\n\n  # Install cquery-clang, cquery-clang-format to bin directory\n\n  # Get file extension\n  get_filename_component(EXE ${Clang_EXECUTABLE} EXT)\n\n  # ${Clang_EXECUTABLE} may be a symlink, resolve it before passing to install.\n  get_filename_component(Clang_EXECUTABLE_REALPATH ${Clang_EXECUTABLE}\n                         REALPATH)\n\n  # Install cquery-clang, cquery-clang-format to install directory.\n  install(\n    FILES ${Clang_EXECUTABLE_REALPATH}\n    PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE\n    DESTINATION bin\n    RENAME cquery-clang${EXE}\n  )\n  install(\n    FILES ${Clang_FORMAT}\n    PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE\n    DESTINATION bin\n    RENAME cquery-clang-format${EXE}\n  )\n\n  # cquery-clang will search for these directories to resolve system includes.\n  # We need to install them.\n  #\n  #  - (which cquery-clang)/../lib/clang/6.0.0/include (or current clang version)\n  #  - (which cquery-clang)/../include/c++/v1\n\n  # lib/clang/*/include changes with the version, ie, lib/clang/6.0.0/include.\n  # Find the current value for * and then remove the ${DOWNLOADED_CLANG_DIR}\n  # prefix.\n\n  file(GLOB CLANG_INCLUDE_DIR ${DOWNLOADED_CLANG_DIR}/lib/clang/*/include)\n  string(REPLACE ${DOWNLOADED_CLANG_DIR}/ \"\"\n         CLANG_INCLUDE_DIR ${CLANG_INCLUDE_DIR})\n\n  # Add trailing slash to overwrite destination directory instead of putting the\n  # directory inside the destination directory\n  install(\n    DIRECTORY ${DOWNLOADED_CLANG_DIR}/${CLANG_INCLUDE_DIR}/\n    DESTINATION ${CLANG_INCLUDE_DIR}\n  )\n\n  # include/c++/v1 is not included in every Clang download (Windows) so we check\n  # if it exists first\n  if(IS_DIRECTORY ${DOWNLOADED_CLANG_DIR}/include/c++/v1)\n    install(\n      DIRECTORY ${DOWNLOADED_CLANG_DIR}/include/c++/v1/\n      DESTINATION include/c++/v1\n    )\n  endif()\nendif()\n\n### Tools\n\n# We use glob here since source files are already manually added with\n# target_sources further down\nfile(GLOB SOURCES \n  src/*.cc \n  src/*.h \n  src/serializers/*.cc \n  src/serializers/*.h\n  src/messages/*.h \n  src/messages/*.cc\n)\n\nif(Clang_FORMAT AND ${Clang_VERSION} MATCHES 6.0)\n  add_custom_target(format\n    COMMAND ${Clang_FORMAT} -i ${SOURCES}\n    # .clang-format is located in the cquery root project dir\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    COMMENT \"Running clang-format ...\"\n  )\nelse()\n  # Set error message depending on which condition was false\n  if (NOT Clang_FORMAT)\n    set(Clang_FORMAT_ERROR \"Error: clang-format executable not found\")\n  elseif(NOT ${Clang_VERSION} MATCHES 6.0)\n    set(Clang_FORMAT_ERROR \"Error: clang-format version does not match \\\n6.0. Due to differences in clang-format output between versions we only \\\nsupport clang-format 6.0\")\n  endif()\n\n  add_custom_target(format\n    COMMAND ${CMAKE_COMMAND} -E cmake_echo_color --red --bold \n            ${Clang_FORMAT_ERROR}\n  )\nendif()\n\n### Sources\n\ntarget_sources(cquery PRIVATE\n  third_party/siphash.cc\n  third_party/pugixml/src/pugixml.cpp\n)\n\ntarget_sources(cquery PRIVATE\n  src/c_cpp_properties.cc\n  src/cache_manager.cc\n  src/clang_complete.cc\n  src/clang_cursor.cc\n  src/clang_format.cc\n  src/clang_index.cc\n  src/clang_indexer.cc\n  src/clang_system_include_extractor.cc\n  src/clang_translation_unit.cc\n  src/clang_utils.cc\n  src/code_complete_cache.cc\n  src/command_line.cc\n  src/compiler.cc\n  src/diagnostics_engine.cc\n  src/file_consumer.cc\n  src/file_contents.cc\n  src/file_types.cc\n  src/fuzzy_match.cc\n  src/iindexer.cc\n  src/import_manager.cc\n  src/import_pipeline.cc\n  src/include_complete.cc\n  src/method.cc\n  src/lex_utils.cc\n  src/lsp.cc\n  src/lsp_diagnostic.cc\n  src/match.cc\n  src/message_handler.cc\n  src/options.cc\n  src/platform_posix.cc\n  src/platform_win.cc\n  src/platform.cc\n  src/position.cc\n  src/project.cc\n  src/query_utils.cc\n  src/query.cc\n  src/queue_manager.cc\n  src/recorder.cc\n  src/semantic_highlight_symbol_cache.cc\n  src/serializer.cc\n  src/standard_includes.cc\n  src/task.cc\n  src/test.cc\n  src/third_party_impl.cc\n  src/threaded_queue.cc\n  src/timer.cc\n  src/timestamp_manager.cc\n  src/type_printer.cc\n  src/utils.cc\n  src/work_thread.cc\n  src/working_files.cc\n)\n\ntarget_sources(cquery PRIVATE\n  src/messages/cquery_base.cc\n  src/messages/cquery_call_hierarchy.cc\n  src/messages/cquery_callers.cc\n  src/messages/cquery_did_view.cc\n  src/messages/cquery_file_info.cc\n  src/messages/cquery_freshen_index.cc\n  src/messages/cquery_index_file.cc\n  src/messages/cquery_inheritance_hierarchy.cc\n  src/messages/cquery_vars.cc\n  src/messages/cquery_wait.cc\n  src/messages/exit.cc\n  src/messages/initialize.cc\n  src/messages/shutdown.cc\n  src/messages/text_document_code_action.cc\n  src/messages/text_document_code_lens.cc\n  src/messages/text_document_completion.cc\n  src/messages/text_document_definition.cc\n  src/messages/text_document_did_change.cc\n  src/messages/text_document_did_close.cc\n  src/messages/text_document_did_open.cc\n  src/messages/text_document_did_save.cc\n  src/messages/text_document_document_highlight.cc\n  src/messages/text_document_document_link.cc\n  src/messages/text_document_document_symbol.cc\n  src/messages/text_document_formatting.cc\n  src/messages/text_document_hover.cc\n  src/messages/text_document_implementation.cc\n  src/messages/text_document_range_formatting.cc\n  src/messages/text_document_references.cc\n  src/messages/text_document_rename.cc\n  src/messages/text_document_signature_help.cc\n  src/messages/text_document_type_definition.cc\n  src/messages/workspace_did_change_configuration.cc\n  src/messages/workspace_did_change_watched_files.cc\n  src/messages/workspace_execute_command.cc\n  src/messages/workspace_symbol.cc\n  )\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017-2018 Jacob Dufault\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.4326171875,
          "content": "# Archived\n\ncquery is no longer under development. [clangd](https://clangd.llvm.org/installation.html) and [ccls](https://github.com/MaskRay/ccls) are both good replacements.\n\n# cquery\n\n[![Join the chat at https://gitter.im/cquery-project/Lobby](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/cquery-project/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\ncquery is a highly-scalable, low-latency language server for C/C++/Objective-C. It is tested\nand designed for large code bases like\n[Chromium](https://chromium.googlesource.com/chromium/src/). cquery provides\naccurate and fast semantic analysis without interrupting workflow.\n\n![Demo](https://ptpb.pw/GlSQ.png?raw=true)\n\ncquery implements almost the entire language server protocol and provides\nsome extra features to boot:\n\n  * code completion (with both signature help and snippets)\n  * finding [definition](src/messages/text_document_definition.cc)/[references](src/messages/text_document_references.cc)\n  * [call (caller/callee) hierarchy](src/messages/cquery_call_hierarchy.cc), [inheritance (base/derived) hierarchy](src/messages/cquery_inheritance_hierarchy.cc)\n  * [symbol rename](src/messages/text_document_rename.cc)\n  * [document symbols](src/messages/text_document_document_symbol.cc) and approximate search of [workspace symbol](src/messages/workspace_symbol.cc)\n  * [hover information](src/messages/text_document_hover.cc)\n  * diagnostics\n  * code actions (clang FixIts)\n  * preprocessor skipped regions\n  * #include auto-complete, undefined type include insertion, include quick-jump\n    (goto definition, document links)\n  * auto-implement functions without a definition\n  * semantic highlighting, including support for [rainbow semantic highlighting](https://medium.com/@evnbr/coding-in-color-3a6db2743a1e)\n\n# >>> [Getting started](https://github.com/cquery-project/cquery/wiki) (CLICK HERE) <<<\n\n<a href=\"https://repology.org/metapackage/cquery\">\n  <img src=\"https://repology.org/badge/vertical-allrepos/cquery.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n# Limitations\n\ncquery is able to respond to queries quickly because it caches a huge amount of\ninformation. When a request comes in, cquery just looks it up in the cache\nwithout running many computations. As a result, there's a large memory overhead.\nFor example, a full index of Chrome will take about 10gb of memory. If you\nexclude v8, webkit, and third_party, it goes down to about 6.5gb.\n\n# License\n\nMIT\n"
        },
        {
          "name": "clang_archive_hashes",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e_test_runner.py",
          "type": "blob",
          "size": 11.0693359375,
          "content": "#!/usr/bin/python\n\nimport json\nimport os\nimport importlib\nimport re\nimport shutil\nimport subprocess\n\n#CQUERY_PATH = 'build/release/bin/cquery'\nCQUERY_PATH = 'x64/Debug/cquery.exe'\nCACHE_DIR = 'e2e_cache'\n\n# We write test files in python. The test runner collects all python files in\n# the directory and executes them. The test function just creates a test object\n# which specifies expected stdin/stdout.\n#\n# Test functions are automatically discovered; they just need to be in the\n# global environment and start with `Test_`.\n\n\n# If found in json output with quotes surrounding this value it will be replaced\n# with null, ie, \"~~null~~\" -> null\nNULL_MAGIC_VALUE = \"~~null~~\"\n\nclass TestBuilder:\n  def __init__(self):\n    self.sent = []\n    self.expected = []\n    self.documents = {}\n\n  def IndexFile(self, path, contents):\n    \"\"\"\n    Indexes the given file with contents.\n    \"\"\"\n    self.documents[path] = contents\n    self.Send({\n        'method': '$cquery/indexFile',\n        'params': {\n            'path': path,\n            'contents': contents,\n            'args': [\n                'clang',\n                '-xc++',\n                '-std=c++11',\n                path\n            ]\n        }\n    })\n    return self\n\n  def SendDidOpen(self, path):\n    self.Send({\n        'method': 'textDocument/didOpen',\n        'params': {\n            'textDocument': {\n                'uri': path,\n                'languageId': 'cpp',\n                'version': 0,\n                'text': self.documents[path]\n            },\n        }\n    })\n    return self\n\n  def WaitForIdle(self):\n    \"\"\"\n    cquery will wait until the import pipeline is idle\n    \"\"\"\n    self.Send({'method': '$cquery/wait'})\n    return self\n\n  def Send(self, stdin):\n    \"\"\"\n    Send the given message to the language server.\n    \"\"\"\n    if not isinstance(stdin, str):\n      stdin['jsonrpc'] = '2.0'\n    self.sent.append(stdin)\n    return self\n\n  def Expect(self, expected):\n    \"\"\"\n    Expect a message from the language server.\n    \"\"\"\n    expected['jsonrpc'] = '2.0'\n    self.expected.append(expected)\n    return self\n\n  def SetupCommonInit(self):\n    \"\"\"\n    Add initialize/initialized messages.\n    \"\"\"\n    self.Send({\n        'id': 0,\n        'method': 'initialize',\n        'params': {\n            'processId': 123,\n            'rootUri': 'cquery',\n            'capabilities': {\n              'textDocument': {\n                'codeLens': NULL_MAGIC_VALUE\n              }\n            },\n            'trace': 'off',\n            'initializationOptions': {\n                'cacheDirectory': CACHE_DIR\n            }\n        }\n    })\n    self.Expect({\n        'id': 0,\n        'result': {\n            'capabilities': {\n                'textDocumentSync': 2,\n                'hoverProvider': True,\n                'completionProvider': {\n                    'resolveProvider': False,\n                    'triggerCharacters': ['.', ':', '>', '#', '<', '\"', '/']\n                },\n                'signatureHelpProvider': {\n                    'triggerCharacters': ['(', ',']\n                },\n                'definitionProvider': True,\n                'referencesProvider': True,\n                'documentHighlightProvider': True,\n                'documentSymbolProvider': True,\n                'workspaceSymbolProvider': True,\n                'codeActionProvider': True,\n                'codeLensProvider': {\n                    'resolveProvider': False\n                },\n                'documentFormattingProvider': False,\n                'documentRangeFormattingProvider': False,\n                'renameProvider': True,\n                'documentLinkProvider': {\n                    'resolveProvider': True\n                },\n                'executeCommandProvider': {\n                    'commands': []\n                }\n            }\n        }\n    })\n    return self\n\nclass Diff(object):\n    def __init__(self, first, second, with_values=True, vice_versa=False):\n        self.difference = []\n        self.check(first, second, with_values=with_values)\n\n        if vice_versa:\n            self.check(second, first, with_values=with_values)\n\n    def check(self, first, second, path='', with_values=False):\n        if second != None:\n            if not isinstance(first, type(second)):\n                message = '%s- %s, %s' % (path, type(first), type(second))\n                self.save_diff(message, TYPE)\n\n        if isinstance(first, dict):\n            for key in first:\n                # the first part of path must not have trailing dot.\n                if len(path) == 0:\n                    new_path = key\n                else:\n                    new_path = \"%s.%s\" % (path, key)\n\n                if isinstance(second, dict):\n                    if key in second:\n                        sec = second[key]\n                    else:\n                        #  there are key in the first, that is not presented in the second\n                        self.save_diff(new_path, path)\n\n                        # prevent further values checking.\n                        sec = None\n\n                    # recursive call\n                    self.check(first[key], sec, path=new_path, with_values=with_values)\n                else:\n                    # second is not dict. every key from first goes to the difference\n                    self.save_diff(new_path, 'path')\n                    self.check(first[key], second, path=new_path, with_values=with_values)\n\n        # if object is list, loop over it and check.\n        elif isinstance(first, list):\n            for (index, item) in enumerate(first):\n                new_path = \"%s[%s]\" % (path, index)\n                # try to get the same index from second\n                sec = None\n                if second != None:\n                    try:\n                        sec = second[index]\n                    except (IndexError, KeyError):\n                        # goes to difference\n                        self.save_diff('%s - %s, %s' % (new_path, type(first), type(second)), 'type')\n\n                # recursive call\n                self.check(first[index], sec, path=new_path, with_values=with_values)\n\n        # not list, not dict. check for equality (only if with_values is True) and return.\n        else:\n            if with_values and second != None:\n                if first != second:\n                    self.save_diff('%s - %s | %s' % (path, first, second), 'VALUE')\n            return\n\n    def save_diff(self, diff_message, type_):\n        message = '%s: %s' % (type_, diff_message)\n        if diff_message not in self.difference:\n            self.difference.append(message)\n\ndef _ExecuteTest(name, func):\n  \"\"\"\n  Executes a specific test.\n\n  |func| must return a TestBuilder object.\n  \"\"\"\n\n  # Delete cache directory.\n  shutil.rmtree(CACHE_DIR, ignore_errors=True)\n\n  test_builder = func()\n  # if not isinstance(test_builder, TestBuilder):\n  if not test_builder.__class__.__name__ == 'TestBuilder':\n    raise Exception('%s does not return a TestBuilder instance' % name)\n\n  # Add a final exit message.\n  test_builder.WaitForIdle()\n  test_builder.Send({'method': 'exit'})\n\n  # Convert messages to a stdin byte array.\n  stdin = ''\n  for message in test_builder.sent:\n    payload = message\n    if not isinstance(payload, str):\n      payload = json.dumps(message)\n      payload = payload.replace('\"' + NULL_MAGIC_VALUE + '\"', 'null')\n    wrapped = 'Content-Length: %s\\r\\n\\r\\n%s' % (len(payload), payload)\n    stdin += wrapped\n  stdin_bytes = stdin.encode(encoding='UTF-8')\n\n  # Finds all messages in |string| by parsing Content-Length headers.\n  def GetMessages(string):\n    messages = []\n    for match in re.finditer('Content-Length: (\\d+)\\r\\n\\r\\n', string):\n      start = match.span()[1]\n      length = int(match.groups()[0])\n      message = string[start:start + length]\n      decoded = json.loads(message)\n      # Do not report '$cquery/progress' messages.\n      if 'method' in decoded and decoded['method'] == '$cquery/progress':\n        continue\n      # Do not report '$cquery/setInactiveRegions' messages.\n      if 'method' in decoded and decoded['method'] == '$cquery/setInactiveRegions':\n        continue\n      # Do not report 'textDocument/publishDiagnostic' messages.\n      if 'method' in decoded and decoded['method'] == 'textDocument/publishDiagnostics':\n        continue\n\n      messages.append(decoded)\n    return messages\n\n  # Utility method to print a byte array.\n  def PrintByteArray(bytes):\n    for line in bytes.split(b'\\r\\n'):\n      print(line.decode('utf8'))\n\n  # Execute program.\n  cmd = [CQUERY_PATH, '--language-server', '--log-all-to-stderr']\n  process = subprocess.Popen(\n      cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  (stdout, stderr) = process.communicate(stdin_bytes)\n  exit_code = process.wait()\n\n  # Check if test succeeded.\n  success = exit_code == 0\n  actual = GetMessages(stdout.decode('utf8'))\n  expected = test_builder.expected\n  common_end = min(len(test_builder.expected), len(actual))\n  for i in range(0, common_end):\n    diff = Diff(actual[i], expected[i])\n    if len(diff.difference) != 0:\n      print('############')\n      print('Actual')\n      print(actual[i])\n      print('Expected')\n      print(expected[i])\n      success = False\n      for d in diff.difference:\n        print(d)\n\n  # Print failure messages.\n  if success:\n    print('== Passed %s with exit_code=%s ==' % (name, exit_code))\n  else:\n    print('== FAILED %s with exit_code=%s ==' % (name, exit_code))\n    print('## STDIN:')\n    for message in GetMessages(stdin):\n      print(json.dumps(message, indent=True))\n    if stdout:\n      print('## STDOUT:')\n      for message in GetMessages(stdout.decode('utf8')):\n        print(json.dumps(message, indent=True))\n    if stderr:\n      print('## STDERR:')\n      PrintByteArray(stderr)\n\n    print('## Expected output')\n    for message in test_builder.expected:\n      print(message)\n    print('## Actual output')\n    for message in actual:\n      print(message)\n    print('## Difference')\n    common_end = min(len(test_builder.expected), len(actual))\n    for i in range(0, common_end):\n      if test_builder.expected[i] != actual[i]:\n        print('i=%s' % i)\n        print('- Expected %s' % str(test_builder.expected[i]))\n        print('- Actual %s' % str(actual[i]))\n    for i in range(common_end, len(test_builder.expected)):\n      print('Extra expected: %s' % str(test_builder.expected[i]))\n    for i in range(common_end, len(actual)):\n      print('Extra actual: %s' % str(actual[i]))\n\n\ndef _LoadAllModulesFromDir(dirname):\n  # https://stackoverflow.com/a/1057765\n  result = []\n  for item in os.listdir(dirname):\n    if item == '__init__.py' or item[-3:] != '.py':\n      continue\n    module_path = dirname + '.' + item[:-3]\n    print('Importing ' + module_path)\n    module = importlib.import_module(module_path)\n    result.append(module)\n  return result\n\n\ndef _DiscoverTests():\n  \"\"\"\n  Discover and return all tests.\n  \"\"\"\n  for module in _LoadAllModulesFromDir('e2e_tests'):\n    for name, value in module.__dict__.items():\n      if not callable(value):\n        continue\n      if not name.startswith('Test_'):\n        continue\n      yield (name, value)\n\n\ndef _RunTests():\n  \"\"\"\n  Executes all tests.\n  \"\"\"\n  for name, func in _DiscoverTests():\n    _ExecuteTest(name, func)\n\n\nif __name__ == '__main__':\n  _RunTests()\n"
        },
        {
          "name": "e2e_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "index_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.py",
          "type": "blob",
          "size": 0.4970703125,
          "content": "#!/usr/bin/env python\n\n# This script tags the current commit with the current date and pushes it to\n# GitHub. This will then trigger CI which will build the release and publish\n# binaries.\n\nimport datetime\nimport subprocess\nimport sys\n\ndef RunOrExit(args):\n  if subprocess.call(args) != 0:\n    sys.exit(1)\n\nif __name__ == \"__main__\":\n  # Example: v2018-01-13@1820\n  tag_name = datetime.datetime.now().strftime('v%F@%H%M')\n  RunOrExit(['git', 'tag', tag_name])\n  RunOrExit(['git', 'push', 'origin', tag_name])\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "waf",
          "type": "blob",
          "size": 0.6025390625,
          "content": "#!/usr/bin/env python\n\nimport sys\n\nprint('cquery no longer supports building with waf. Please use cmake instead.')\nprint('')\nprint('Here is a quick getting-started:')\nprint('')\nprint('  # remove previous waf build directory')\nprint('  $ rm -rf build')\nprint('  ')\nprint('  # setup new cmake build directory')\nprint('  $ mkdir build')\nprint('  $ cd build')\nprint('  $ cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES')\nprint('  $ make install -j8')\nprint('')\nprint('See https://github.com/cquery-project/cquery/wiki/Building-cquery for more details')\n\nsys.exit(1)\n"
        }
      ]
    }
  ]
}