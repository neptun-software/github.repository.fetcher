{
  "metadata": {
    "timestamp": 1736565992733,
    "page": 969,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sachuverma/DataStructures-Algorithms",
      "stars": 1888,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.25390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9736328125,
          "content": "# Contributing to Repo\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\n\n## Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n- Becoming a maintainer\nWe Develop with Github\nWe use github to host code, to track issues and feature requests, as well as accept pull requests.\n\nWe Use Github Flow, So All Code Changes Happen Through Pull Requests\nPull requests are the best way to propose changes to the codebase. We actively welcome your pull requests:\n- Fork the repo.\n- If you've added code that should be working and legit code.\n- Update the corresponding readme files, like including question/solution/articles,etc links\n- Make sure your code lints.\n- Issue that pull request!\n- Any contributions you make will be under the MIT Software License\nIn short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.\n\n### Report bugs using Github's issues\nWe use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!\nWrite bug reports with detail, background, and sample code\n\n### Great Bug Reports tend to have:\n- A quick summary and/or background\n- Conditions on which the given code will fail\n- Be specific!\n- Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)\nPeople love thorough bug reports. I'm not even kidding.\n\n### Use a Consistent Coding Style\n- 2 spaces for indentation rather than tabs\n- Include problem statements from codes using comment\n- File should be of proper extension\n\n## License\nBy contributing, you agree that your contributions will be licensed under its MIT License.\n\n## References\nThis document was adapted from the open-source contribution guidelines for Facebook's Draft\n"
        },
        {
          "name": "Companywise Questions",
          "type": "tree",
          "content": null
        },
        {
          "name": "DSA Crack Sheet",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020 sachin verma\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Leetcode Daily Challenge",
          "type": "tree",
          "content": null
        },
        {
          "name": "Leetcode Study Plan",
          "type": "tree",
          "content": null
        },
        {
          "name": "Leetcode Top Interview Questions",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 65.427734375,
          "content": "[![Contributors][contributors-sachu]][contributors-url]\n[![Forks][forks-sachu]][forks-url]\n[![Stargazers][stars-sachu]][stars-url]\n[![Issues][issues-sachu]][issues-url]\n[![MIT License][license-sachu]][license-url]\n[![LinkedIn][linkedin-sachu]][linkedin-url]\n[![Portfolio][portfolio-sachu]][portfolio-url]\n\n# DATA STRUCTURES & ALGORITHMS\n\n`Resources and Solutions` `^_^`\n\n<!-- I am _Sachin Verma_ a student of Netaji Subhas Institute of Technology, Delhi,\nan aspiring **Web Developer** and **Competitive Programmer**. -->\n\nI have compiled many useful links for **Data Structures and Algorithms** questions and their solutions.  \nI have also listed the **Theory Subjects**, which are often **ignored** by students but one must have a vast knowledge of them to help them in their interviews.  \nI have also included the **Placement Ready Roadmap**, from `beginner level -> interview-ready candidate`\n\n<!-- My coding handles:\n`codeforces` [specialist](https://codeforces.com/profile/sachuverma)\n`leetcode` [2000+ | Knight](https://leetcode.com/anjali-mc)\n`codechef` [4 star]()\n\nMy social media handles:\n[LinkedIn](https://www.linkedin.com/in/sachuverma/)\n[Instagram](https://www.instagram.com/sachuverma_/) -->\n\n#### Table of Contents\n\n- [DATA STRUCTURES & ALGORITHMS](#data-structures--algorithms) - [Table of Contents](#table-of-contents)\n  - [üèÜ Roadmap to Dream Placement](#-roadmap-to-dream-placement)\n    - [1Ô∏è‚É£ 100+ Top Product Based Companies](#1%EF%B8%8F‚É£-100-top-product-based-companies)\n    - [2Ô∏è‚É£ Language, Data Structures, CP](#2%EF%B8%8F‚É£-language-data-structures-cp)\n  - [üèÜ DSA Practice Resources](#-dsa-practice-resources)\n    - [üî∞ Leetcode Study Plan](#leetcode-study-plan)\n    - [üî∞ DSA Crack Sheet](#dsa-crack-sheet)\n    - [üî∞ Striver SDE Sheet](#striver-sde-sheet)\n    - [üî∞ Top Interview Preparation Questions](#top-interview-preparation-questions)\n    - [üî∞ Companywise Interview Questions](#companywise-interview-questions)\n    - [üî∞ Leetcode Daily Challenges](#leetcode-daily-challenges)\n  - [üèÜ Theory Subjects](#-theory-subjects)\n    - [1Ô∏è‚É£ Operating System](#1%EF%B8%8F‚É£-operating-system)\n    - [2Ô∏è‚É£ Database Management & Design](#2%EF%B8%8F‚É£-database-management--design)\n    - [3Ô∏è‚É£ Object Oriented Programming](#3%EF%B8%8F‚É£-object-oriented-programming)\n    - [4Ô∏è‚É£ Computer Networks](#4%EF%B8%8F‚É£-computer-networks)\n  - [üèÜ Notes and Resources](#-other-notes-and-resources)\n    - [üîñBest book for Coding Interviews](#best-book-for-coding-interviews---cracking-the-coding-interview)\n  - [üèÜ Sources](#-sources)\n  - [üèÜ Contributing](#-contributing)\n  - [üèÜ License](#-license)\n  - [üèÜ Contact](#-contact)\n\n<br />\n\n## üèÜ Roadmap to Dream Placement\n\n### 1Ô∏è‚É£ 100+ Top Product Based Companies\n\nPeople only chase after **FAANG**, because that's what is hyped up but now there are a lot of companies which:  \n - `Good opportunities to enhance oneself`\n - `Pay Exceptionally Well`  \n - `Good Work Life`  \n - `Great Projects/Learning`  \nCheck their names [here](https://drive.google.com/file/d/15rjcHqjDN7gPU5e6nxb_9NdApRf4TW1I/view?usp=sharing), and decide where you want to land.\n\n### 2Ô∏è‚É£ Language, Data Structures, CP\n\n- Guide to how to start coding if you have zero knowledge about this field\n- Only way to become good at something is to practice, an expert was once a newbie too ;)\n- Only consistency matters, coding once a week for 10 hours is not beneficial, rather coding 1 hour each day will benefit you more.\n- Reading/Learning/Practice resources are also listed below\n\n<details open>\n  <summary style=\"font-size:1.15rem;\">Language</summary>\n  \n  - Intent\n    * Familiarity with Syntax\n    * Familiarity with all keywords & Basic Concepts\n    * main focus is on, that are you comfortable in writing code with your preferred language\n  - Choices\n     * C++\n       * References:    \n         - [cppreferences](https://en.cppreference.com/w/cpp)   \n         - [tutorialspoint](https://www.tutorialspoint.com/cplusplus/index.htm)   \n         - [cplusplus](http://www.cplusplus.com/reference/)\n         - [Scaler Topics](https://www.scaler.com/topics/cpp/)\n       * Time Required:    \n         - 1-2 weeks   \n         - 1-2 hrs/day   \n     * Java\n       * References:   \n         - [Tutorialpoint](https://www.tutorialspoint.com/java/index.htm)   \n         - [GFG](https://www.geeksforgeeks.org/java/)\n         - [Scaler](https://www.scaler.com/topics/java/)\n       * Time Required: same as above    \n     * Python\n       * References:    \n         - [Tutorialspoint](https://www.tutorialspoint.com/python/index.htm)   \n         - [w3schools](https://www.w3schools.com/python/)\n         - [Scaler Topics](https://www.scaler.com/topics/python/)\n         - [Wiingy](https://wiingy.com/learn/python/python-tutorial/)\n       * Time Required: same as above\n       * **Important Callout:** Some companies don't allow python as a choice in their online coding test, so prepare accordingly\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Data Structure and Algorithms</summary>\n\n- Without this, No Software Engineering Interview, in a tech giant can be cracked\n  - Follow the DSA Crack Sheet List given below\n  - Time Required:\n    - 2-3 months\n    - 6-8 questions/day\n    - 3-6 hrs/day\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Projects</summary>\n  \n  * You need some projects to showcase your skills to your interviewer\n    * Choices:   \n      - Mobile Development   \n      - [Web Development](https://www.scaler.com/courses/web-development/)    \n      - [Machine Learning](https://www.scaler.com/courses/machine-learning-course-training/)    \n      - Some other stuff (like Blockchain, IoT, etc.)   \n    * Time Required: 3 months (doing on weekends 6-8 hours)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Subjectve Topics</summary>\n  \n  * Do a Subsequent reading, revision any day you get time    \n    - Operating System   \n    - OOPS, Object Oriented Skills   \n    - DBMS, Databse Management    \n    - Computer Networking    \n  \n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Competitive Programming</summary>\n\n- CP needs time, it's not something that you can master in 2 months, We will get comfortable with online platforms and get a taste of competitive programming\n- Leetcode questions nearly 150-200 questions\n  - Category:\n    - Easy: 30%\n    - Medium: 50%\n    - Hard: 20%\n- If time allows then go for Codeforces div2 Level A, B and C question\n- Time Required:\n  - 150-200 Questions\n  - 2 months\n  - 3-4 Ques/day\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">System Design</summary>\n\n- Tech Level:\n  - System's overview like we will use this queue with DynamoDB and a scheduler with a justification of why we are using this DB, SQS, SNS, multithreading, etc.\n  - for SDE-1 equivalent positions, this level is somewhat rare\n- Normal Understanding:\n  - knowledge of dividing system & creating a rough DFD of system\n  - knowledge of DB Schema creation\n  - able to create problem-solving logic or not\n  - Time Required: Just need some reading of articles/notes, can be pursued parallelly\n- Great Resources:\n  - [Grokking](https://github.com/lei-hsia/grokking-system-design/blob/master/README.md)\n  - [Primer](https://github.com/donnemartin/system-design-primer/blob/master/README.md)\n  </details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Misc Stuff</summary>\n\n- [Aptitude/Reasoning](https://www.geeksforgeeks.org/quiz-corner-gq/)\n  - Do some mock tests to gain confidence\n- Basic Programming MCQ\n  - [C/C++/Java/Python fundamentals](https://www.geeksforgeeks.org/quiz-corner-gq/)\n  - Print output type questions\n  - Time/space complexity Questions\n  - [SQL Queries](https://www.geeksforgeeks.org/dbms-gq/sql-gq/)\n- [Puzzles](https://www.geeksforgeeks.org/puzzles/)\n- [Always go through 50-60 interview experiences before interview](https://www.geeksforgeeks.org/company-interview-corner/)\n</details>\n\n<br />\n\n## üèÜ DSA Practice Resources\n\n<p>\nRemember: Deliberate practice does not mean looking for answers and memorizing them. You won't go very far with that approach. The more you are able to solve a problem yourself without any reference to answers, the more you will improve.\n</p>\n\n### [üî∞Leetcode Study Plan](./Leetcode%20Study%20Plan)\n\n### [üî∞DSA Crack Sheet](./DSA%20Crack%20Sheet)\n\nData Structures and Algorithms Cracks Sheet (created by @lovebabbar) contains the most necessary questions to learn and grasp about most common and important DS and Algos\n\n### [üî∞Striver SDE Sheet](./Striver%20Sheet)\n\nSoftware Developer Engineer Sheet (created by @striver) contains asked during interviews by good product based companies.\n\nThe sheet is divided in 30 parts to be completed in a month to get ready for an interview at a good company\n\n### [üî∞Top Interview Preparation Questions](./Leetcode%20Top%20Interview%20Questions)\n\nThis is LeetCode's official curated list of Top classic interview questions to help you land your dream job. Our top interview questions are divided into the following series:\n\n### [üî∞Companywise Interview Questions](./Companywise%20Questions)\n\nIt is containing the list of most asked company wise questions available on Leetcode.\n\n> [Download Full PDFs](https://mega.nz/folder/HkoglB7C#o2K_WMwTKFgdk_powwR9-g)\n\nEvery pdf file corresponds to a list of questions on leetcode for a specific company based on the leetcode company tags.\nThe list of questions within each pdf is further sorted by their frequency, so the most popular question for a specific company is at the top.\n\n### [üî∞Leetcode Daily Challenges](./Leetcode%20Daily%20Challenge)\n\nThis Challenge is beginner-friendly. It consists of daily problems given by Leetcode.  \nA problem is added here each day.\n\n### [üî∞Technical Interview Questions](https://www.interviewbit.com/technical-interview-questions)\n\nThe Ultimate Guide to Acing Your Technical Interview(2022): Review these commonly asked technical job interview questions and prepare your answer. \n<br />\n\n## üèÜ Theory Subjects\n\nThese must-do questions should be done after studying these subjects  \nIf you don't have much time left for interviews, then you can directly look at them\n\n<h3>MUST-DO Questions for Interviews\n(DBMS, CN and OS) </h3>\n\n<details>\n<summary style=\"font-size:1.15rem;\">Operating System: </summary>\n\n- What is the main purpose of an operating system? Discuss different types?\n- What is a socket, kernel and monolithic kernel ?\n- Difference between process and program and thread? Different types of process.\n- Define virtual memory, thrashing, threads.\n- What is RAID ? Different types.\n- What is a deadlock ? Different conditions to achieve a deadlock.\n- What is fragmentation? Types of fragmentation.\n- What is spooling ?\n- What is semaphore and mutex (Differences might be asked)? Define Binary semaphore.\n- Belady‚Äôs Anomaly\n- Starving and Aging in OS\n- Why does trashing occur?\n- What is paging and why do we need it?\n- Demand Paging, Segmentation\n- Real Time Operating System, types of RTOS.\n- Difference between main memory and secondary memory.\n- Dynamic Binding\n- FCFS Scheduling\n- SJF Scheduling\n- SRTF Scheduling\n- LRTF Scheduling\n- Priority Scheduling\n- Round Robin Scheduling\n- Producer Consumer Problem\n- Banker‚Äôs Algorithm\n- Explain Cache\n- Diff between direct mapping and associative mapping\n- Diff between multitasking and multiprocessing\n\n</details>\n\n<details>\n<summary style=\"font-size:1.15rem;\">DBMS: </summary>\n\n- What is DBMS ? Mention advantages..\n- [What is Database?](https://www.scaler.com/topics/dbms/what-is-database/)\n- What is a database system?\n- What is RDBMS ? Properties..\n- Types of database languages\n- [ACID properties](https://www.scaler.com/topics/dbms/acid-properties-in-dbms/) (VVVVV IMP)\n- Difference between vertical and horizontal scaling\n- What is sharding\n- [Keys in DBMS](https://www.scaler.com/topics/dbms/keys-in-dbms/)\n- Types of relationship\n- Data abstraction in DBMS, three levels of it\n- [Indexing in DBMS](https://www.scaler.com/topics/dbms/indexing-in-dbms/)\n- What is DDL (Data Definition Language)\n- What is DML (Data Manipulation Language)\n- [What is normalization](https://www.scaler.com/topics/dbms/normalization-in-dbms/) ? Types of them ..\n- [What is denormalization](https://www.scaler.com/topics/denormalization-in-dbms/) ?\n- [What is a functional dependency](https://www.scaler.com/topics/dbms/functional-dependency-in-dbms/) ?\n- E-R Model ?\n- Conflict Serializability in DBMS ..\n- Explain Normal forms in DBMS\n- What is CCP ? (Concurrency Control Protocols)\n- Entity, Entity Type, Entity Set, Weak Entity Set..\n- What are SQL commands ? Types of them..\n- [Nested Queries in SQL ?](https://www.scaler.com/topics/nested-sql-query/)\n- What is JOIN .. Explain types of JOINs\n- Inner and Outer Join\n- Practice SQL queries from LeetCode\n- Diff between 2 tier and 3 tier architecture\n- Diff between TRUNCATE and DELETE command\n- Difference between Intension and Extension in a DataBase\n- Difference between share lock and exclusive lock, definition of lock\n\n</details>\n\n<details>\n<summary style=\"font-size:1.15rem;\">Compute Networks: </summary>\n\n- Define network\n- What do you mean by network topology, and explain types of them\n- Define bandwidth, node and link ?\n- Explain TCP model ..\n- Layers of OSI model\n- Significance of Data Link Layer\n- Define gateway, difference between gateway and router ..\n- What does ping command do ?\n- What is DNS, DNS forwarder, NIC, ?\n- What is MAC address ?\n- What is IP address, private IP address, public IP address, APIPA ?\n- Difference between IPv4 and IPv6\n- What is subnet ?\n- Firewalls\n- Different type of delays\n- 3 way handshaking\n- Server-side load balancer\n- RSA Algorithm\n- What is HTTP and HTTPS protocol ?\n- What is SMTP protocol ?\n- TCP and UDP protocol, prepare differences\n- What happens when you enter ‚Äúgoogle.com‚Äù (very very famous question)\n- Hub vs Switch\n- VPN, advantages and disadvantages of it\n- LAN\n\n</details>\n\n<br />\n\n### 1Ô∏è‚É£ Operating System\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Overview</summary>\n\n- [Quick Notes to Follow](https://mega.nz/file/pEpRUIQQ#ArZTGmmvMpygGuoOL6rokFesY7IJVTDJCPUQ_VsLR4U)\n- [What is an Operating System](https://www.scaler.com/topics/operating-system/what-is-operating-system/)\n- [Features of Operating System](https://www.interviewbit.com/blog/features-of-operating-system/)  \n- Services provided by an Operating System\n- [Types of Os](https://www.geeksforgeeks.org/types-of-operating-systems/)\n  - Batched OS\n  - Time Sharing OS\n  - Distributed OS\n  - Network OS\n  - Real Time OS\n- [RAM vs ROM](https://www.guru99.com/difference-between-rom-ram.html)\n- [SRAM & DRAM](https://www.guru99.com/sram-vs-dram-difference.html)\n- [PROM, EPROM & EEROM](https://pediaa.com/what-is-the-difference-between-prom-eprom-and-eeprom/)\n- [Virtualisation vs Containerisation](https://www.tutorialspoint.com/difference-between-virtualization-and-containerization)\n- [BIOS vs UEFI](https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/)\n- [MBR vs GPT](https://www.howtogeek.com/193669/whats-the-difference-between-gpt-and-mbr-when-partitioning-a-drive/)\n- Important Terms to Know\n  - Compiler\n  - Loader\n  - Assembler\n  - Interpreter\n  - System Calls\n  - Application Programming Interface\n  - Kernel\n  - Shell\n  - JVM\n  - [Booting](https://www.scaler.com/topics/operating-system/what-is-booting/)\n- [Multi-programming, Multi-processing, Multi-tasking & Multi-threading](https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/)\n- [Monolothic architecture vs MicroKernel arch](https://stackoverflow.com/questions/4537850/what-is-difference-between-monolithic-and-micro-kernel)\n- [Why Windows kernel is more monolithic & not microkernel?](https://micksmix.wordpress.com/2011/02/20/does-windows-have-a-microkernel-or-monolithic-kernel/)\n- [What happens when we turn on our computer?](https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Process Concept</summary>\n\n- [Process vs Program](https://www.geeksforgeeks.org/difference-between-program-and-process/)\n- [Different State of process](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/)\n- Types of Process?\n- [PCB structure in detail](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/)\n- [How does a process look like in memory?](https://www.tutorialspoint.com/how-does-a-process-look-like-in-memory)\n- [Process vs Threads](https://www.geeksforgeeks.org/difference-between-process-and-thread/)\n- Process Scheduling\n  - [Introduction](https://www.tutorialspoint.com/operating_system/os_process_scheduling.htm)\n  - [Inter Process Communication (IPS) in OS](https://www.scaler.com/topics/operating-system/inter-process-communication-in-os/)\n  - Scheduling Queue\n    - Job Queue\n    - Ready Queue\n    - Device Queue\n  - Scheduler\n    - Short-term Scheduler\n    - Medium-term Scheduler\n    - Long-term Scheduler\n- [CPU Bound Process vs I/O Bound Process](https://stackoverflow.com/questions/868568/what-do-the-terms-cpu-bound-and-i-o-bound-mean)\n  - Best Performance system is which have a combination of CPU bound and I/O bound process\n- [What is Context Switch?](https://www.tutorialspoint.com/what-is-context-switching-in-operating-system)\n- IPC\n  - [Introduction](https://www.geeksforgeeks.org/inter-process-communication-ipc/)\n  - by Shared Memory\n  - by Message Passing\n- [Define Pipe](https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_pipes.htm)\n- [Maximum number of Zombie process a system can handle?](https://www.geeksforgeeks.org/maximum-number-zombie-process-system-can-handle/)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Thread Concepts</summary>\n  \n- [What is a Thread?](https://www.studytonight.com/operating-system/multithreading)\n- [Benefits of Multi-threading?](https://www.geeksforgeeks.org/benefits-of-multithreading-in-operating-system/)\n- [Example of Multi-threading](https://www.quora.com/What-are-some-best-examples-of-multithreaded-applications)\n- [Models](https://www.studytonight.com/operating-system/multithreading)\n  - Many to One\n  - One to One\n  - Many to Many\n  - Best Model??\n- [Optimal number of threads required for a process?](https://stackoverflow.com/questions/1718465/optimal-number-of-threads-per-core)\n- [Effect of Multiple cores on Multi-threading](https://blogs.grammatech.com/multi-core-processors-headache-for-multithreaded-code)\n- Thread vs Process\n- [Why C++ static variables are dangerous in real life OS?](https://stackoverflow.com/questions/7026507/why-are-static-variables-considered-evil)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Process Scheduling</summary>\n\n- Why do we need it?\n- CPU Burst Cycle\n- CPU Scheduler\n  - Pre-Emptive Scheduling\n  - Non PreEmptive\n  - Advantages/Disadvantages\n- Dispatch\n  - Role of Dispatcher\n  - Dispatch Latency\n- Scheduling Criteria\n  - CPU Utilisation\n  - Throughput\n  - TAT [Turn around Time]\n  - Waiting Time\n  - Response Time\n- Scheduling Algo\n  - FCFS\n  - SJFC\n  - Priority-based\n  - Round-Robin\n  - MLQS\n  - MLFQS\n  - Which algo is used in real world OS\n- IMP terms to know\n  - Starvation\n  - Ageing\n- How to prevent Starvation?\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Synchronisation</summary>\n\n- [Why Process Coordinatin/Sync is needed?](https://www.studytonight.com/operating-system/process-synchronization)\n  - Data Inconsistency\n  - Race Condition\n- [Physical Address Space vs Logical Address Space](https://www.geeksforgeeks.org/logical-and-physical-address-in-operating-system/)\n- Imp terms to know\n  - [Mutual Exclusion](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/)\n  - [Critical Section](https://www.geeksforgeeks.org/g-fact-70/)\n- Critical Section Problem, peterson Solution\n  - [Follow youtube video (knowledge gate)](https://www.youtube.com/watch?v=YwqexcfbucE&list=PLmXKhU9FNesSFvj6gASuWmQd23Ul5omtD)\n- Why pre-emptive kernel is better than non pre-emptive kernel?\n- Semaphore\n  - Binary Semaphore/Mutex Locks\n  - Counting Semaphore\n- Imp terms to know\n  - Busy Waiting\n  - Spin Lock\n- Example of busy waiting & spin lock\n- [How to implement Binary Semaphore in real world coding](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/)\n- What is Deadlock & Starvation?\n- Bounded Buffer, Reader-Writer Problem & Dining Philosopher Problem\n  - [Follow youtube video (knowledge gate)](https://www.youtube.com/watch?v=YwqexcfbucE&list=PLmXKhU9FNesSFvj6gASuWmQd23Ul5omtD)\n  </details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Deadlocks</summary>\n\n- [What is Deadlock?](https://www.cs.rpi.edu/academics/courses/fall04/os/c10/)\n- [Effects of Deadlock?](https://stackoverflow.com/questions/41204406/what-is-effect-of-deadlock-on-other-processes-which-are-not-involve-in-deadlock/41713812)\n- Necessary Conditions\n  - Mutual Exclusion\n  - Hold & Wait\n  - No Pre-emption\n  - Circular Wait\n- [Methods for Deadlock handling](https://www.scaler.com/topics/dbms/deadlock-in-dbms/)\n  - Prevention or Avoidance\n  - Detection or Recovery\n    - Banker's Algo\n    - Ostrich Algo\n    - Resource Per-emption\n  - Ignorance\n  </details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Memory-Management</summary>\n  \n  - Imp Points\n    - CPU can direct access Registers and Main Memory\n    - Protection of Memory space is handled by Hardware\n    - OS loads Base and Limit registers\n    - Mapping from Logical to Physical address is done by MMU[Memory Management Unit]\n    - OS memory is categorised into\n      - for the resident of OS\n      - user processes\n  - Logical vs Physical address space\n  - What is Swapping\n    - Ex-Priority based Scheduling\n    - Done by Dispatcher\n    - [Context Switch](https://www.scaler.com/topics/operating-system/context-switching-in-os/) time in swapping is very high\n    - OS can't swap process that has pending input/output\n  - Imp topics to cover\n    - [Follow youtube videos](https://www.youtube.com/watch?v=YwqexcfbucE&list=PLmXKhU9FNesSFvj6gASuWmQd23Ul5omtD)\n    - Memory Allocation\n      - Contiguous Memory Allocation\n        - Address Translation: Base and limit Register\n        - Fixed Partitioning\n        - Variable Partitioning\n        - Variable Partitioning\n        - dynamic storage allocation problem\n          - Best Fit\n          - Worst Fit\n          - First Fit\n        - Internal Fragmentation\n        - External Fragmentation\n          - Compaction\n          - Non-Contiguous Allocation\n            - Paging\n            - Segmentation\n      - Paging\n        - Page table\n        - Page no\n        - Page offset\n        - Page Table Limit Register (PTLR)\n      - Segmentation\n        - Segment Table\n        - Base Register\n        - Limit Register\n  - [Why paging increases the context-switch time?](https://gateoverflow.in/178062/paging-os-galvin-book-page-no-332)\n  - [Page vs Frame?](https://practice.geeksforgeeks.org/problems/page-and-frames)\n  - [What is TLB miss?](https://stackoverflow.com/questions/37825859/cache-miss-a-tlb-miss-and-page-fault)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Virtual Memory</summary>\n\n- Goal of mem. Mgmt\n  - To keep multiple processes in memory to allow multi-programming\n- [Virtual Memory](https://www.tutorialspoint.com/operating_system/os_virtual_memory.htm)\n  - What?\n  - Why?\n  - Where it is physically located?\n  - How it is implemented?\n    - Demand Paging\n    - Strategy to only load pages when they are needed\n    - Paging + Swapping\n  - Advantages\n    - user can write program for extremely large virtual address space\n    - [CPU utilisation & throughput] increases & [Response Time, Turn aruond time, TAT] remains same\n    - Less I/O would be needed to load or swap user programs into memory, so each user program would run faster\n    - Degree of Multiprogramming increases\n    - allows file and memory to be shared by 2 or more processes through page sharing\n  - If it is used carelessely, it can decrease performance\n- [Demand Paging](https://www.youtube.com/watch?v=Agi0u5Png_U)\n  - paging + swapping\n  - Lazy Swapper\n  - pager\n  - page fault\n- [Pure Demand Paging](https://practice.geeksforgeeks.org/problems/what-is-pure-demand-paging)\n- Swap Space\n  - Section of hard disk used for implementing Virtual Mem. in swap\n- What is Page Fault?\n- Page Replacement Algo\n  - FIFO\n  - Optimal Page Replacement\n  - LRU\n- What is Frame Rate\n- [Most Asked Questions (Thrashing)](https://practice.geeksforgeeks.org/problems/thrashing-in-os)\n  - What?\n    - Low CPU Utilisation->Degree of Multiprogramming increases->More Page Fault->Cycle Continues->Thrashing occurs->Page fault occurs tremendously->CPU utilisation decrease sharply\n  - Cause of Thrashing?\n  - Solution to Thrashing?\n    - use priority based replacement algo\n    - allocate the exact no. of frames that are actually required\n- Can we replace physical memory i.e, RAM with virtual memory?\n- Is performance of virtual memory and physical memory same?\n</details>\n<details>\n  <summary style=\"font-size:1.15rem;\">Storage Management</summary>\n  (optional)\n  \n  - [Resource 1](https://www.slideshare.net/DeepikaT13/storage-management-in-operating-system) \n  - [Resource 2](https://www.slideshare.net/arjunk007/secondary-storage-structureoperating-system-concepts)\n\n</details>\n\n<details>\n  <summary><span style=\"font-size:1.15rem;\"> <a href=\"https://www.os-book.com/OS9/slide-dir/index.html\">For College Exams</a></span></summary>\n</details>\n\n<br />\n\n### 2Ô∏è‚É£ Database Management & Design\n\nTech Gaints: They usually ask only a bit about normalization, ACID properties(imp.) ans SQP queries & interview is done\n\nStart Ups: They do focus on system design a lot ans in between questions on DBMS are frequently asked\nSo, we need to be 100% prepared for it & best way is to follow the System Design Primer (resource given below)\nQuestions always revolves around the type of DB, why this DB, why not that DB, how to scale, [SQL vs NoSQL](https://www.interviewbit.com/blog/sql-vs-mysql/), your familiarity level with those DBs, etc\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Resources</summary>\n\n- [System Design Primer (Database Section)](https://github.com/donnemartin/system-design-primer#database)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Introduction</summary>\n\n- [What is Database?](https://www.javatpoint.com/what-is-database)\n- [What is DBMS?](https://www.guru99.com/what-is-dbms.html)\n- [Why do we need DBMS?](https://www.geeksforgeeks.org/need-for-dbms/)\n- [File management system vs DBMS](https://www.javatpoint.com/dbms-vs-files-system)\n- [What is Database Admin & it's functions?](https://practice.geeksforgeeks.org/problems/what-are-the-functions-of-a-dba)\n- [Database Tier-2/Tier-3 Architecture](https://www.geeksforgeeks.org/difference-between-two-tier-and-three-tier-database-architecture/)\n- [Database Language](https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/)\n  - DCL\n  - DDL\n  - DML\n  - TCL\n- [Important Terms](https://whatisdbms.com/instances-schema-and-sub-schema-in-dbms-with-examples/)\n  - Instance\n  - Schema\n  - Sub-Schema\n- How DBMS is implemented?)\n- [What is Data abstraction in DBMS?](https://afteracademy.com/blog/what-is-data-abstraction-in-dbms-and-what-are-its-three-levels)\n- [3 level of Data Abstraction](https://afteracademy.com/blog/what-is-data-abstraction-in-dbms-and-what-are-its-three-levels)\n- [What is Referectial Integrity](https://www.tutorialspoint.com/Referential-Integrity-Rule-in-RDBMS)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">RDBMS</summary>\n\n- [What is RDBMS & how it is stored in memory?](https://www.quora.com/How-does-a-relational-DBMS-internally-store-its-data-In-what-type-of-data-structure-How-does-it-offer-the-rapid-retrieval-without-loading-the-entire-database-into-the-main-memory-I-have-heard-many-DBMS-use-B-trees)\n- What is meaning of word \"Relational\" in RDBMS?\n- [Degree of Relation](https://www.relationaldbdesign.com/database-design/module6/three-relationship-types.php)\n  - 1:1\n  - 1:M\n  - M:M\n- [Keys](https://www.geeksforgeeks.org/types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign/)\n  - Primary Key\n  - Foreign Key\n  - Candidate Key\n  - Alternate Key\n  - [Super Key](https://www.scaler.com/topics/super-key-in-dbms/)\n  - Secondary Key\n- [Databse Schema](https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm)\n  - Physical Databse Schema\n  - Logical Databse Schema\n- [Schema Diagrams](https://www.geeksforgeeks.org/mapping-from-er-model-to-relational-model/)\n  - [Relational Model](https://www.scaler.com/topics/dbms/relational-model-in-dbms/)\n  - ER Diagram\n- [Relational Operations](https://www.guru99.com/relational-algebra-dbms.html)\n  - Select\n  - Project\n  - Union\n  - Set Different\n  - Cartesian Product\n  - Rename\n- SQL\n  - [What is SQL](https://www.w3schools.com/sql/sql_intro.asp)\n  - [SQL vs MySQL](https://www.upgrad.com/blog/sql-vs-mysql/)\n  - [Important Keywords](https://www.educba.com/sql-keywords/)\n  - [CheatSheet: SQL](https://www.educba.com/cheat-sheet-sql/?source=leftnav)\n  - [Composite key in SQL](https://www.educba.com/composite-key-in-sql/?source=leftnav)\n  - [Join & it's types](https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/)\n    - Inner Join\n    - Left Join\n    - Right Join\n    - Full Join\n    - Self Join\n  - [What is View](https://www.geeksforgeeks.org/sql-views/)\n    - [Updating a View](https://www.scaler.com/topics/sql/views-in-sql/)\n  - [What is trigger](https://www.geeksforgeeks.org/sql-trigger-student-database/)\n  - [Unique & Primary key in SQL](https://www.geeksforgeeks.org/difference-between-primary-key-and-unique-key/)\n  - [What is SQL Injection?](https://www.w3schools.com/sql/sql_injection.asp)\n  - [Delete vs Truncate](https://www.geeksforgeeks.org/difference-between-delete-and-truncate/)\n  - [SQL Privileges](https://www.geeksforgeeks.org/mysql-grant-revoke-privileges/)\n  - [What do you mean by Subquery](https://www.tutorialspoint.com/sql/sql-sub-queries.htm)\n  - [What is difference between clustered and non-clustered indexes?](https://www.guru99.com/clustered-vs-non-clustered-index.html)\n  - [What is a Cursor?](https://www.geeksforgeeks.org/what-is-cursor-in-sql/)\n  - Query Emaples\n    - Write an SQL query to get third maximum salary of an employee from a table named employee_table\n    - Write a SQL query to find names of employee start with 'A'\n    - How can you create an empty table from an existing table?\n    - How to fetch common records from two tables?\n    - How to fetch alternate records from a table?\n    - What is command used to fetch first 5 characters of the string?\n    - Which operator is used in query pattern matching?\n- [What is Index in DBMS & it's types](https://www.guru99.com/indexing-in-database.html)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Relational Database Design</summary>\n\n- [Features of Good Relationsl Design](https://www.microfocus.com/documentation/xdbc/win20/GUID-82D58958-278F-482C-B76F-AAF94A28DCCF.html)\n- [What is Functional Dependency?](https://www.guru99.com/dbms-functional-dependency.html)\n  - Trivial\n  - Non-Trivial\n  - Fully-Functional Dependency\n  - Partial\n  - Transitive\n- [What is Normalisation?](https://www.guru99.com/database-normalization.html)\n- [Purpose of Normalisation?](https://medium.com/@bbrumm/what-is-the-purpose-of-database-normalisation-8070b2948d70)\n- [What are 3 anomalies resolved by normalisation?](https://dba.stackexchange.com/questions/194631/how-does-normalization-fix-the-three-types-of-update-anomalies)\n- Types of Normalisation? (Purpose and Steps to Convert?)\n  - [1NF](https://www.geeksforgeeks.org/first-normal-form-1nf/)\n  - [2NF](https://www.geeksforgeeks.org/second-normal-form-2nf/)\n  - [3NF](https://www.geeksforgeeks.org/third-normal-form-3nf/)\n  - [BCNF](https://www.geeksforgeeks.org/boyce-codd-normal-form-bcnf/)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Storage and File Structure</summary>\n\n- [Storage System](https://www.tutorialspoint.com/dbms/dbms_storage_system.htm)\n- [File Structure](https://www.tutorialspoint.com/dbms/dbms_file_structure.htm)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Transaction Management</summary>\n\n- [What is a transaction?](https://www.tutorialspoint.com/dbms/dbms_transaction.htm)\n  - [State of Transaction](https://www.gatevidyalay.com/transaction-states-in-dbms/)\n- [IMP Terms](https://www.studytonight.com/dbms/tcl-command.php)\n  - Commit\n  - Rollback\n  - Savepoint\n- [ACID Properties](https://www.geeksforgeeks.org/acid-properties-in-dbms/)\n- [How to Implement Atomicity in Trsactions?](https://ashutoshtripathi.com/2017/11/27/implementation-of-atomicity-and-durability-using-shadow-copy/)\n  - Problem of Concurrent Transaction?\n    - Lost Update\n    - Dirty Read\n    - Unpredictable Read\n    - Incorrect Summary\n  - Advantages\n    - Reduced Wai Time\n    - High Throughput\n    - High resource utilisation\n- [Concurrent Trnsaction?](https://www.geeksforgeeks.org/concurrency-problems-in-dbms-transactions/)\n- Schedule\n  - [Type](https://www.geeksforgeeks.org/types-of-schedules-in-dbms/)\n    - Serial\n    - Complete\n    - Recoverable\n    - Cascadeless\n    - Strict\n  - [What is Conflict Operation?](https://www.javatpoint.com/dbms-conflict-serializable-schedule)\n  - How to find wether Schedules are conflicting or not\n- [Concurrency Control](https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm)\n  - Purpose?\n    - Shared Lock\n    - Exclusive Lock\n  - 2-Phase Locking PRotocal (important)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Deadlock</summary>\n\n- [What is Deadlock?](https://www.geeksforgeeks.org/deadlock-in-dbms/)\n  - Examples?\n- Deadlock Detection\n- [How to prevent Deadlock](https://www.scaler.com/topics/operating-system/deadlock-prevention-in-operating-system/) (already in OS Topics)\n  - Mutual Exclusion\n  - Hold and Wait\n  - No PreEmption\n  - Circular Wait\n- [Other Techniques to prevent Deadlock](https://www.geeksforgeeks.org/introduction-to-timestamp-and-deadlock-prevention-schemes-in-dbms/)\n  - use Timestamp\n  - Wait-Die Scheme\n  - Wound-Wait Scheme\n  - Timeout Based Scheme\n- [What is Starvation and it's reasons?](https://www.geeksforgeeks.org/starvation-in-dbms/)\n- [Deadlock recovery](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/)\n  - Selection of Victim\n  - Roll Back\n  - Starvation\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Must Do (for system Design Interview)</summary>\n\n- SQL vs NoSQL\n  - [Resources to Follow](https://www.mongodb.com/nosql-explained/nosql-vs-sql)\n  - [Which Modern Databse is Right for your use case?](https://www.xplenty.com/blog/which-database/)\n- [Scaling Patterns](https://www.freecodecamp.org/news/understanding-database-scaling-patterns/)\n- [CAP Theorem](https://www.analyticsvidhya.com/blog/2020/08/a-beginners-guide-to-cap-theorem-for-data-engineering/)\n- [Scaling RDBMS and NoSQL](https://betterprogramming.pub/scaling-sql-nosql-databases-1121b24506df)\n- [What DB to use](http://jlamere.github.io/databases/)\n- [In-memory Database](https://medium.com/@denisanikin/what-an-in-memory-database-is-and-how-it-persists-data-efficiently-f43868cff4c1)\n- [Graph Database](https://neo4j.com/developer/graph-database/)\n- [In-depth Indexing (optional)](https://www.freecodecamp.org/news/database-indexing-at-a-glance-bb50809d48bd/)\n- [Master Slave](https://www.datadriveninvestor.com/2020/05/28/the-master-slave-database-concept-for-beginners/)\n- [Master Slave vs Master Master](https://intellipaat.com/community/6605/master-master-vs-master-slave-database-architecture)\n- [ACID vs BASE](https://www.dataversity.net/acid-vs-base-the-shifting-ph-of-database-transaction-processing/)\n\n</details>\n\n<br />\n\n### 3Ô∏è‚É£ Object Oriented Programming\n\nWhat to expect from these resources,\n\n- To the point for your Interview Preparation\n- Sufficient for Academics\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Resources</summary>\n\n- [C++](https://www.javatpoint.com/cpp-oops-concepts)\n- [Java](https://www.javatpoint.com/java-oops-concepts)\n- [Python](https://www.scaler.com/topics/oops-concepts-in-python/)\n- [OOPs Concepts](https://www.scaler.com/topics/what-is-object-oriented-programming-oop/)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Overview</summary>\n\n- [What is Object Oriented Programming?](https://www.w3schools.com/cpp/cpp_oop.asp)\n  - Object oriented programming is about creating objects that contain both data and functions\n- [How Object Oriented Programming is related to the real world?](https://fdhgjhjhukj.medium.com/object-oriented-programming-with-real-world-example-63f69f917d62)\n  - Example\n- [Why to study OOPS?](https://www.c-sharpcorner.com/forums/why-we-need-oops-in-programming-language)\n- [Limitation of OOPS](https://resources.saylor.org/wwwresources/archived/site/wp-content/uploads/2013/02/CS101-2.1.2-AdvantagesDisadvantagesOfOOP-FINAL.pdf)\n- When we say that 'X' language is object oriented programming language, then what does we mean by that ?\n  - Your Homework\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Pillars of OOPS</summary>\n\n- [What is a Class?](https://www.guru99.com/java-oops-class-objects.html)\n  - [Difference between Structure & Class](https://www.geeksforgeeks.org/structure-vs-class-in-cpp/)\n  - [Similarity between Structure & Class](https://practice.geeksforgeeks.org/problems/what-are-similarities-between-a-class-and-a-structure)\n    - When to use Structure over class?\n  - [Access Modifiers](https://www.javatpoint.com/access-modifiers)\n    - Public\n    - Private\n    - Protected\n    - Friend\n      - Protected Friend\n  - [Member Function](https://www.studytonight.com/cpp/types-of-member-function.php)\n    - Inside Class Function\n    - Outside Class Function\n  - [What is Constructor?](https://www.geeksforgeeks.org/constructors-c/)\n    - Default Constructor\n    - Parameterised Constructor\n    - Copy Constructor\n      - [What is Deep/Shallow Copy?](https://www.geeksforgeeks.org/difference-between-shallow-and-deep-copy-of-a-class/)\n      - [Copy Constructor vs Assignment Operator](https://www.geeksforgeeks.org/copy-constructor-vs-assignment-operator-in-c/)\n    - [Virtual Constructor](https://www.tutorialspoint.com/virtual-constructor-in-cplusplus)\n    - [Virtual Copy Constructor](https://www.tutorialspoint.com/virtual-copy-constructor-in-cplusplus)\n    - [How constructors are different from a normal member function?](https://iq.opengenus.org/constructor-cpp/)\n    - [Can we have more than one constructor in a class?](https://stackoverflow.com/questions/37517522/why-would-you-need-to-use-more-than-one-constructor)\n      - [Constructor Overloading](https://www.scaler.com/topics/constructor-overloading-in-java/)\n  - [Destructor](https://www.geeksforgeeks.org/destructors-c/)\n    - [Private Destructor](https://www.geeksforgeeks.org/private-destructor/)\n    - [Virtual Destructor](https://www.geeksforgeeks.org/virtual-destructor/)\n    - [Pure Virtual Destructor](https://www.geeksforgeeks.org/pure-virtual-destructor-c/)\n    - [How destructors are different from a normal member function?](https://www.tutorialspoint.com/destructors-in-cplusplus)\n    - [Can there be more than one destructor in a class?](https://stackoverflow.com/questions/21934810/why-a-class-has-only-one-destructor/21934951)\n    - [When do we need to write a user-defined destructor?](https://stackoverflow.com/questions/22491174/when-do-we-need-to-define-destructors)\n    - Can a destructor be virtual?\n      - [When to use it?](https://stackoverflow.com/questions/461203/when-to-use-virtual-destructors)\n- What is an Object?\n  - [Class vs Object](https://www.javatpoint.com/difference-between-object-and-class)\n- [Real world analogy of Class and Object?](https://www.c-sharpcorner.com/blogs/real-life-examples-of-object-oriented-programming1)\n- Important Keywords\n  - [Static](https://www.youth4work.com/Talent/Core-Java/Forum/119567-wat-is-the-use-of-a-static-keyword?yFast=On)\n  - [Virtual](https://www.codeproject.com/Questions/270054/why-virtual-keyword-is-used)\n  - [Abstract](https://www.tutorialspoint.com/abstract-keyword-in-Java)\n  - [Final](https://www.javatpoint.com/final-keyword)\n  - [Explicit](https://www.geeksforgeeks.org/g-fact-93/)\n  - [this](https://www.javatpoint.com/this-keyword)\n  - [new](https://www.javatpoint.com/new-keyword-in-java)\n  - [const](https://stackoverflow.com/questions/7428358/why-const-keyword-is-not-used-in-java)\n  - [super](https://www.javatpoint.com/super-keyword)\n- Features of OOPS\n  - [Polymorphism](https://www.scaler.com/topics/java/polymorphism-in-java/)\n    - [What?](https://www.javatpoint.com/runtime-polymorphism-in-java)\n    - [Need?](https://stackoverflow.com/questions/11064409/why-to-use-polymorphism)\n    - Categorisation\n      - [Function/Operator Overloading](https://www.javatpoint.com/cpp-overloading)\n        - [Compiletime Polymorphism](https://www.dineshonjava.com/compile-time-polymorphism-in-java/)\n        - [What function can't be overloaded in C++?](https://www.geeksforgeeks.org/function-overloading-in-c/)\n        - [What are all operators that can't be overloaded?](https://www.tutorialspoint.com/operators-that-cannot-be-overloaded-in-cplusplus)\n      - [Function Overriding](https://www.javatpoint.com/runtime-polymorphism-in-java)\n        - Runtime Polymorphism\n    - [Virtual Function](https://www.javatpoint.com/cpp-virtual-function)\n    - [Virtual Class](https://www.geeksforgeeks.org/virtual-base-class-in-c/)\n    - [Derived Class](https://www.techopedia.com/definition/3780/derived-class)\n    - [Can virtual function be set private?](https://www.geeksforgeeks.org/can-virtual-functions-be-private-in-c/)\n    - [Inline Virtual Function](https://stackoverflow.com/questions/733737/are-inline-virtual-functions-really-a-non-sense)\n    - [Abstract Class](https://www.javatpoint.com/abstract-class-in-java)\n    - [Pure Virtual Function](https://www.geeksforgeeks.org/pure-virtual-functions-and-abstract-classes/)\n    - [Pure Virtual Destructor](https://stackoverflow.com/questions/1219607/why-do-we-need-a-pure-virtual-destructor-in-c)\n  - [Inheritance](https://www.scaler.com/topics/java/inheritance-in-java/)\n    - [What is Inheritance?](https://www.javatpoint.com/inheritance-in-java)\n      - Sub Class\n      - Super Class\n      - Reusability\n    - [Why/Need of Inheritance?](https://www.youth4work.com/Talent/Core-Java/Forum/121637-what-is-the-need-of-inheritance?yFast=On)\n    - [Can Object Oriented Programming exist without Inheritance?](https://yourbasic.org/golang/inheritance-object-oriented/)\n    - [Types of Inheritance](https://www.studytonight.com/cpp/types-of-inheritance.php)\n      - Single Inheritance\n      - Multiple Inheritance\n      - Hierarchical Inheritance\n      - Multilevel Inheritance\n      - Hybrid/Virtual Inheritance\n    - [Real Life Example of Multiple Inheritance](https://www.quora.com/What-are-the-real-world-examples-of-multiple-inheritance-in-C++)\n    - [What are the limitations of Inheritance?](https://practice.geeksforgeeks.org/problems/what-are-advantages-and-disadvantages-of-using-inheritance)\n    - [What is Sealed Modifier?](https://www.c-sharpcorner.com/interview-question/what-is-sealed-modifiers)\n    - [How can we call the base method without creating an instance?](https://stackoverflow.com/questions/10173827/how-to-invoke-parent-class-method-without-creating-object-of-it)\n    - [What is the difference between new and override?](https://stackoverflow.com/questions/6576206/what-is-the-difference-between-the-override-and-new-keywords-in-c)\n    - [Why Java does not support Multiple Inheritance?](https://stackoverflow.com/questions/2515477/why-is-there-no-multiple-inheritance-in-java-but-implementing-multiple-interfac)\n    - [What is diamond problem in case of multiple inheritance in Java?](https://www.tutorialspoint.com/what-is-diamond-problem-in-case-of-multiple-inheritance-in-java)\n    - If a class A inherits from class B, then what all is inherited from Parent class?\n      - Explore Every Combination\n    - [Object Slicing](https://stackoverflow.com/questions/274626/what-is-object-slicing)\n    - [How to hide base class methods/functions?](https://stackoverflow.com/questions/2589146/overload-and-hide-methods-in-java)\n    - Friend Function/Class.Inline Function\n    - Local Class/Nested Class.Simulating Final Class\n    - [Does Overloading works with Inheritance?](https://www.geeksforgeeks.org/does-overloading-work-with-inheritance/)\n    - [Difference between polymorphism and inheritance?](https://www.geeksforgeeks.org/difference-between-inheritance-and-polymorphism/)\n    - [Generalisation vs Aggregation vs Composition](https://javapapers.com/oops/association-aggregation-composition-abstraction-generalization-realization-dependency/)\n  - [Encapsulation](https://www.scaler.com/topics/java/encapsulation-in-java/)\n    - [What?](https://www.javatpoint.com/encapsulation)\n      - Combo of Data-hiding & Abstraction\n    - [Advantages/Needs?](https://www.javatpoint.com/q/7216/use-of-encapsulation-in-java)\n    - [How to achieve?](https://www.quora.com/How-do-we-achieve-encapsulation-in-java)\n    - [Code/implementation Example](https://beginnersbook.com/2013/05/encapsulation-in-java/)\n    - [Real World Example](https://www.sitesbay.com/java/java-encapsulation)\n    - [Difference Between Abstraction and Encapsulation](https://www.scaler.com/topics/difference-between-encapsulation-and-abstraction/)\n  - Abstraction\n    - [What?](https://www.scaler.com/topics/java/abstraction-in-java/)\n      - Implementation hiding\n    - When to use?\n    - [How to achieve?](https://www.javatpoint.com/how-to-achieve-abstraction-in-java)\n      - C++\n        - Access Specifiers\n        - [header Files](https://www.scaler.com/topics/cpp/cpp-header-files/)\n      - Java\n        - [Interfaces](https://www.scaler.com/topics/java/interface-in-java/)\n        - [Abstract Classes](https://www.scaler.com/topics/java/abstract-class-in-java/)\n    - [Encapsulation vs Abstraction](https://stackoverflow.com/questions/12072980/encapsulation-vs-abstraction-real-world-example)\n      - Example\n    - [What are the differences between interfaces and abstract classes?](https://www.javatpoint.com/difference-between-abstract-class-and-interface)\n- [Dynamic Binding](https://www.javatpoint.com/static-binding-and-dynamic-binding)\n- [Message Passing](https://www.panonit.com/blog/overview-message-passing-object-oriented-programming)\n- Object-oriented design interview questions\n  - [Design a hash map](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/hash_table/hash_map.ipynb)\n  - [Design a LRU cache](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/lru_cache/lru_cache.ipynb)\n  - [Design a call center](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/call_center/call_center.ipynb)\n  - [Design a deck of cards](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb)\n  - [Design a parking lot](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb)\n  - [Design an online chat](https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/online_chat/online_chat.ipynb)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Misc</summary>\n\n- [C vs C++ vs Java](https://www.edureka.co/blog/difference-between-c-c-and-java)\n- [Difference between procedural programming and OOPs?](https://www.geeksforgeeks.org/differences-between-procedural-and-object-oriented-programming/)\n- [Why Java is not a Purely Object Oriented Language?](https://www.geeksforgeeks.org/java-not-purely-object-oriented-language/)\n- [Is an array a primitive type or an object in Java?](https://www.geeksforgeeks.org/array-primitive-type-object-java/)\n- [What is early and late binding?](https://stackoverflow.com/questions/10580/what-is-the-difference-between-early-and-late-binding)\n- [What is the default access modifier in a calss?](https://stackoverflow.com/questions/3499572/what-is-the-default-access-modifier-of-a-class)\n- [How many instances can be created for an abstract class?](https://www.quora.com/Can-we-create-instance-to-abstract-class)\n- [Define Garbage collection? How does it works](https://stackify.com/what-is-java-garbage-collection/)\n- [Define manipulators](https://www.geeksforgeeks.org/manipulators-in-c-with-examples/)\n- [What fo you mean by finally block?](https://www.javatpoint.com/finally-block-in-exception-handling)\n- [What is a final variable?](https://www.educative.io/edpresso/what-is-the-final-keyword-in-java)\n- [What is meant by an exception?](http://www.iitk.ac.in/esc101/05Aug/tutorial/essential/exceptions/definition.html)\n- [Is an error basically the same as an exception?](https://www.quora.com/What-is-the-difference-between-error-and-an-exception)\n- [Exception handling?](https://www.scaler.com/topics/java/exception-handling-in-java/)\n  - [try catch](https://beginnersbook.com/2013/04/try-catch-in-java/)\n- [What is the method 'finalize' used for?](https://www.javatpoint.com/java-object-finalize-method)\n- [What is a token?](https://www.geeksforgeeks.org/cc-tokens/)\n- [What are the three arguments of a ternary operator?](https://www.freecodecamp.org/news/c-ternary-operator/)\n- [Describe the concept of enum](https://www.geeksforgeeks.org/enumeration-enum-c/)\n- [Basic understanding of Design Patterns](https://www.javatpoint.com/singleton-design-pattern-in-java)\n- Is it possible for a class to inherit the constructor of it's base class?\n- [When should I use a struct instead of a class?](https://stackoverflow.com/questions/85553/when-should-i-use-a-struct-instead-of-a-class)\n- [Cohesion vs Coupling](https://stackoverflow.com/questions/3085285/difference-between-cohesion-and-coupling)\n\n</details>\n\n<br />\n\n### 4Ô∏è‚É£ Computer Networks\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Overview</summary>\n\n- Basics\n  - [What is Computer Networking](https://www.cisco.com/c/en_in/solutions/enterprise-networks/what-is-computer-networking.html)\n  - Basic Terms\n    - [Client](https://learntomato.flashrouters.com/what-is-a-client-what-is-a-server-what-is-a-host/)\n    - [Server](https://learntomato.flashrouters.com/what-is-a-client-what-is-a-server-what-is-a-host/)\n    - [Peer](https://softwareengineering.stackexchange.com/questions/274116/what-is-a-peer-in-computer-network)\n    - [Host](https://learntomato.flashrouters.com/what-is-a-client-what-is-a-server-what-is-a-host/)\n    - [Bandwidth](https://searchnetworking.techtarget.com/definition/bandwidth)\n    - [Jitter](https://www.ringcentral.com/us/en/blog/what-is-jitter/)\n    - [Packet](https://www.cloudflare.com/en-in/learning/network-layer/what-is-a-packet/)\n    - [Frame](https://www.techopedia.com/definition/27175/frame-networking)\n    - [Local Host](https://www.geeksforgeeks.org/what-is-local-host/)\n    - [Bit Rate](https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:connecting-networks/a/bit-rate-bandwidth-and-latency)\n    - [Noise](https://tutsmaster.org/what-is-noise-types-of-noises-in-network/)\n    - [Attenuation](https://www.comptia.org/content/guides/what-is-attenuation#:~:text=Definition%20of%20Attenuation%20in%20Networking,to%20become%20distorted%20or%20indiscernible.&text=Radio%20signals)\n    - [Distortion](https://www.computerhope.com/jargon/d/distorti.htm#:~:text=Updated%3A%2010%2F04%2F2017,cables%20such%20as%20network%20cables.)\n  - What is Web?\n    - [Difference between Web vs Internet](https://www.geeksforgeeks.org/whats-difference-internet-web/#:~:text=The%20Internet%20is%20a%20global,on%20top%20of%20that%20infrastructure.)\n  - [Type of transmission Media](https://www.geeksforgeeks.org/types-transmission-media/)\n  - [Computer Network Devices](https://www.certiology.com/computing/computer-networking/network-devices.html)\n  - [Unicast, BroadCast and MultiCast](https://www.geeksforgeeks.org/difference-between-unicast-broadcast-and-multicast-in-computer-network/)\n  - [Networking Topology](https://www.guru99.com/type-of-network-topology.html)\n    - Mesh\n    - Star\n    - Bus\n    - Ring\n    - Tree\n  - [LAN vs MAN vs WAN](https://www.geeksforgeeks.org/difference-between-lan-man-and-wan/)\n\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">OSI Model</summary>\n\n- [What](https://www.forcepoint.com/cyber-edu/osi-model)\n- Different Layers\n  - PDNTSPA\n    - Physicsl\n    - Data Link\n      - [What is Ethernet?](https://www.linksys.com/us/r/resource-center/basics/whats-ethernet/)\n      - [Extranet vs Intranet vs Internet](https://www.geeksforgeeks.org/difference-between-internet-intranet-and-extranet/)\n      - [Virtual ckt vs Datagram Network](https://www.geeksforgeeks.org/differences-between-virtual-circuits-and-datagram-networks/)\n      - [Switch & it's types](https://www.geeksforgeeks.org/types-of-switches-in-computer-network/)\n      - [What is Virtual LAN?](https://www.guru99.com/vlan-definition-types-advantages.html)\n      - [Basics of Wifi](https://www.geeksforgeeks.org/basics-of-wi-fi/)\n    - Network\n      - [IP Addressing?](https://www.kaspersky.com/resource-center/definitions/what-is-an-ip-address)\n      - [IPv4 vs IPv6](https://www.guru99.com/difference-ipv4-vs-ipv6.html)\n      - [Supernet](https://www.geeksforgeeks.org/supernetting-in-network-layer/)\n      - [Types of Routing](https://www.geeksforgeeks.org/types-of-routing/)\n        - Static\n        - Default\n        - Dynamic\n      - [Network Address Translation](https://www.geeksforgeeks.org/network-address-translation-nat/)\n      - [WPA vs WPS](https://www.quora.com/What-is-the-difference-between-WPS-and-WPA-in-WiFi)\n      - [LiFi vs WiFi](https://www.geeksforgeeks.org/difference-between-lifi-and-wifi/)\n      - [What is ACL[AccessList]?](https://www.geeksforgeeks.org/access-lists-acl/)\n      - [AAA in networking (imp)](https://www.geeksforgeeks.org/computer-network-aaa-authentication-authorization-and-accounting/)\n      - [SONET](https://www.geeksforgeeks.org/synchronous-optical-network-sonet/)\n    - Transport\n      - [TCP Connection Setup](https://www.geeksforgeeks.org/tcp-connection-establishment/)\n      - [3-way Handshake](https://www.geeksforgeeks.org/tcp-3-way-handshake-process/)\n      - [UDP](https://www.geeksforgeeks.org/user-datagram-protocol-udp/)\n      - [Peer2Peer Sharing](https://www.geeksforgeeks.org/p2ppeer-to-peer-file-sharing/)\n      - [Congestion in Computer Networks](https://www.geeksforgeeks.org/congestion-control-in-computer-networks/)\n      - [Error Control](https://www.geeksforgeeks.org/error-control-in-tcp/)\n    - Session\n    - Presentation\n    - Application\n      - [Protocols in Application Layer](https://www.geeksforgeeks.org/protocols-application-layer/)\n      - [DNS](https://www.geeksforgeeks.org/domain-name-system-dns-in-application-layer/)\n      - [Why does DNS uses UDP and not TCP?](https://www.geeksforgeeks.org/why-does-dns-use-udp-and-not-tcp/)\n      - [Address Resolution in DNS](https://www.geeksforgeeks.org/address-resolution-in-dns-domain-name-server/)\n      - [DNS Spoofing or DNS Cache poisoning](https://www.geeksforgeeks.org/dns-spoofing-or-dns-cache-poisoning/)\n      - [Types of DNS Attacks](https://www.geeksforgeeks.org/types-of-dns-attacks-and-tactics-for-security/)\n      - [Difference in http and https](https://www.geeksforgeeks.org/difference-between-http-and-https/)\n      - [How DHCP server dynamically assigns IP addresses to a host](https://www.geeksforgeeks.org/how-dhcp-server-dynamically-assigns-ip-address-to-a-host/)\n- [How a Packet travels? (V.V.V.Imp)](https://www.practicalnetworking.net/series/packet-traveling/packet-traveling/)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Misc & System Design</summary>\n\n- [Common Networking Commands:](https://www.educba.com/networking-commands/)\n  - ping\n  - netstat\n  - tracert\n  - ipconfig\n  - nslookup\n  - route\n  - pathping\n  - netDiag\n  - hostname\n  - arp\n- [Difference in http and https](https://www.geeksforgeeks.org/difference-between-http-and-https/)\n- [What is API Gateway?](https://www.youtube.com/watch?v=hYgP0cBORVg)\n- [SSL/TLS](https://www.ssl.com/faqs/faq-what-is-ssl/)\n- [Reverse Proxy?](https://www.cloudflare.com/en-gb/learning/cdn/glossary/reverse-proxy/)\n- [Load Balancer](https://www.nginx.com/resources/glossary/load-balancing/)\n- [ARP, Address Resolution Protocol](https://www.practicalnetworking.net/series/arp/traditional-arp/)\n- [Horizontal vs Vertical Scaling](https://www.redswitches.com/blog/difference-between-horizontal-vertical-scaling/)\n- [Caching & How does a website is cached](https://www.cloudflare.com/en-in/learning/cdn/what-is-caching/)\n- [What is VIP in Computer Networks](https://learningnetwork.cisco.com/s/question/0D53i00000KsxEZ/what-is-a-vip-virtual-ip)\n- [REST API vs HTTP API](https://www.baeldung.com/cs/rest-vs-http)\n- [What is a container in computer networks](https://www.vmware.com/topics/glossary/content/container-networking#:~:text=Container%20Networking%20is%20an%20emerging,concept%20to%20a%20virtual%20machine.&text=All%20applications%20inside%20the%20container,available%20inside%20the%20container%20only.)\n- [Containerisation vs Virtualisation](https://www.burwood.com/blog-archive/containerization-vs-virtualization#:~:text=Virtualization%20enables%20you%20to%20run,single%20virtual%20machine%20or%20server.)\n- [Performance vs Scalability](https://www.dynatrace.com/news/blog/performance-vs-scalability/#:~:text=Performance%20refers%20to%20the%20capability,a%20certain%20amount%20of%20data.&text=Scalability%20referes%20to%20the%20characteristic,performance%20by%20adding%20additional%20ressources.)\n- [Latency vs Throughput](https://www.comparitech.com/net-admin/latency-vs-throughput/#:~:text=Latency%20indicates%20how%20long%20it,a%20specific%20period%20of%20time.)\n- [2G vs 3G vs 4G vs 5G](http://net-informations.com/q/diff/generations.html)\n- [How a VPN works?](https://www.kaspersky.com/resource-center/definitions/what-is-a-vpn)\n- [Gateway vs Router](https://www.geeksforgeeks.org/difference-between-router-and-gateway/)\n- [NIC and MAC Address](https://securityxploded.com/basics-nic-mac-and-arp-tutorial.php)\n- [Public vs Private IP Address](https://www.geeksforgeeks.org/difference-between-private-and-public-ip-addresses/)\n- [What is Multiplexing](https://www.javatpoint.com/multiplexing-in-computer-network)\n- [Modem vs Router](https://www.youtube.com/watch?v=1-gDIlH8-fs)\n- [How Bluetooth Works](https://www.tutorialspoint.com/wireless_communication/wireless_communication_bluetooth.htm)\n- [How Hotspot Works](https://www.netspotapp.com/hardware/wifi-hotspot/)\n- [How Email Works](https://www.tutorialspoint.com/internet_technologies/e_mail_working.htm#:~:text=Email%20working%20follows%20the%20client%20server%20approach.&text=Person%20A%20composes%20the%20messages,area%20designated%20for%20person%20B.)\n- [How file transfer works](https://www.geeksforgeeks.org/file-transfer-protocol-ftp-in-application-layer/)\n- [How ATM works](https://www.geeksforgeeks.org/asynchronous-transfer-mode-atm-in-computer-network/)\n</details>\n\n<details>\n  <summary style=\"font-size:1.15rem;\">Security</summary>\n\n- [What is Firewall?](https://www.checkpoint.com/cyber-hub/network-security/what-is-firewall/)\n- [Types of Firewall](https://www.javatpoint.com/types-of-firewall)\n- [Possible attacks on Firewall](https://www.geeksforgeeks.org/types-of-firewall-and-possible-attacks/)\n- [Basic Network Attacks](https://www.geeksforgeeks.org/basic-network-attacks-in-computer-network/)\n- [Denial of Service and Prevention](https://www.geeksforgeeks.org/deniel-service-prevention/)\n- [Digital Signature & Certificates](https://www.geeksforgeeks.org/digital-signatures-certificates/)\n- Terms to know:\n  - [Cryptography](https://www.csoonline.com/article/3583976/what-is-cryptography-how-algorithms-keep-information-secret-and-safe.html)\n  - [Symmetrics Key](https://www.cryptomathic.com/news-events/blog/symmetric-key-encryption-why-where-and-how-its-used-in-banking#:~:text=Symmetric%20encryption%20is%20a%20type,used%20in%20the%20decryption%20process.)\n  - [Assymetrics Key](https://cheapsslsecurity.com/blog/what-is-asymmetric-encryption-understand-with-simple-examples/)\n  - [Hashing](https://www.thesslstore.com/blog/difference-encryption-hashing-salting/)\n  - [Cryptanalysis](https://www.geeksforgeeks.org/cryptanalysis-and-types-of-attacks/)\n  - AES/DES/RSA/MD5 hashing\n- [Active & Passive attack in Infosec](https://www.geeksforgeeks.org/active-and-passive-attacks-in-information-security/)\n- [Types of Email Attacks](https://www.geeksforgeeks.org/types-of-email-attacks/)\n</details>\n\n<br/>\n\n## üèÜ Other Notes and Resources\n\n#### üîñBest book for Coding Interviews - [Cracking-The-Coding-Interview](https://mega.nz/folder/KhpUBLLR#cKmpMsctk9hV_p0hUaZG_Q) | [Link 2](https://mega.nz/file/JJQRXQYR#b0EeBTHvGcPnvD-j8kuItzmgCnh1kZj32DDGIVQpFv0)\n\n##### Some other helpful books\n\n- [CSES Competitive Programming Handbook](https://mega.nz/file/ZQIX1IjY#6S8FY39nLdRScbEL9uL0J_2wGWkvmYCQeibC5UrU81k)\n- [Problem Solving Strategies](https://mega.nz/file/sER3mQoI#eCsgS89O3voBhcSAFmZNdZTvQREZ3o5cQrWQNyFZuNY)\n- [Programming Challenges](https://mega.nz/file/lAJnxaqD#srD7jyEPzm9X0LlvlDtkFzzfoid_dpeeYXFFCeTEU-0)\n- [Concrete Maths](https://mega.nz/file/NAYTAAhA#Kow_caWhfOdb3R-P1YrY6j3Ap7mckktfNLKBZWcpxh4)\n- [Algorithms Design Strategies](https://mega.nz/file/9EQFmIgR#h-fZvrDN2bJN7Br-13m9NnlkfEhxzMxz0yzLAGqsfLY)\n- [The Algorithms Design Manual](https://mega.nz/file/pJpHjKoK#LpZe3G-NnoEBKjBgjYXhH2nRCWpsaLKJfkpNy5EqGX0)\n\nUrls for other Notes, and Reading Resources picked from different editorials.\n\n<details open>\n  <summary>View Resources/Articles</summary>\n\n- [üìò CPP Data Structures, Algorithms, and STL Sheet](./Resources/Articles/CPP-STL.md)\n- [üìò CPP Syntax Cheet Sheet](./Resources/Articles/CPP-SYNTAX.md)\n- [üìò GitHub Sheet](./Resources/Articles/GitCheatsheet.md)\n- [üìò Data Structures and Algorithms](https://www.scaler.com/topics/data-structures/)\n</details>\n\n<details>\n  <summary>Last Minute Notes</summary>\n\n- [üìô Operating System (apni kaksha notes)](https://drive.google.com/file/d/1B_kmekdghu-sO8-eXZ1kc4Xx_YtB8BPM/view)\n- [üìô Last Minute Notes ‚Äì Operating Systems](https://www.geeksforgeeks.org/last-minute-notes-operating-systems/)\n- [üìô Last Minute Notes ‚Äì Computer Networks](https://www.geeksforgeeks.org/last-minute-notes-computer-network/)\n- [üìô Last Minute Notes ‚Äì DBMS](https://www.geeksforgeeks.org/last-minute-notes-dbms/)\n- [üìô Last Minute Notes ‚Äì Algorithms](https://www.geeksforgeeks.org/lmns-algorithms-gq/)\n- [üìô Last Minute Notes ‚Äì Data Structure](https://www.geeksforgeeks.org/lmns-gq/lmns-data-structure-gq/)\n- [üìô Last Minute Notes ‚Äì Git](https://towardsdatascience.com/a-git-cheatsheet-that-all-coders-need-bf8ad4d91576)\n</details>\n\n<details>\n  <summary>Notes/Question/Explanations</summary>\n  \n- [üìí Segment Tree | HackerEarth](https://www.hackerearth.com/practice/data-structures/advanced-data-structures/segment-trees/tutorial/)\n- [üìï Dynamic Programming | HackerEarth)](https://www.hackerearth.com/practice/algorithms/dynamic-programming/introduction-to-dynamic-programming-1/tutorial/)\n- [üìí Disjoint Set Union (Union Find) | HackerEarth](https://www.hackerearth.com/practice/notes/disjoint-set-union-union-find/)\n- [üìï Ternary Search | HackerEarth](https://www.hackerearth.com/practice/algorithms/searching/ternary-search/tutorial/)\n- [üìí Binary Search for Beginners | Leetcode](https://leetcode.com/discuss/general-discussion/691825/Binary-Search-for-Beginners-Problems-or-Patterns-or-Sample-solutions)\n</details>\n\n<br />\n\n## üèÜ Sources\n\nOther coding websites, [hackerearth](https://www.hackerearth.com/), [interviewbit](https://www.interviewbit.com/),[gfg](https://www.geeksforgeeks.org/), [leetcode](https://leetcode.com/), [codechef](https://www.codechef.com/), [codeforces](https://codeforces.com/), [CSES Problem Set](https://cses.fi/problemset/), [Scaler](https://www.scaler.com/topics/)  \nYoutube channels, [love babbar](https://www.youtube.com/channel/UCQHLxxBFrbfdrk1jF0moTpw), [take you forward](https://www.youtube.com/c/takeUforward),\n\n<!-- CONTRIBUTING -->\n\n## üèÜ Contributing\n\nContributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n### :handshake: Our Contributors\n<details>\n  <summary>Click to view!</summary>\n  <a href=\"https://github.com/sachuverma/DataStructures-Algorithms/graphs/contributors\">\n    <img src=\"https://contrib.rocks/image?repo=sachuverma/DataStructures-Algorithms\" />\n  </a>\n</details>\n\n<!-- LICENSE -->\n\n## üèÜ License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<!-- CONTACT -->\n\n## üèÜ Contact\n\nProject Link: [https://github.com/sachuverma/DataStructures-Algorithms](https://github.com/sachuverma/DataStructures-Algorithms)  \nSachin Verma : [sachinverma53121@gmail.com](sachinverma53121.gmail.com)\n\nDrop a ‚≠ê if you like my worküòÑ\n\n<!-- MARKDOWN LINKS & IMAGES -->\n\n[contributors-sachu]: https://img.shields.io/github/contributors/sachuverma/DataStructures-Algorithms.svg?style=flat-square\n[contributors-url]: https://github.com/sachuverma/DataStructures-Algorithms/graphs/contributors\n[forks-sachu]: https://img.shields.io/github/forks/sachuverma/DataStructures-Algorithms.svg?style=flat-square\n[forks-url]: https://github.com/sachuverma/DataStructures-Algorithms/network/members\n[stars-sachu]: https://img.shields.io/github/stars/sachuverma/DataStructures-Algorithms.svg?style=flat-square\n[stars-url]: https://github.com/sachuverma/DataStructures-Algorithms/stargazers\n[issues-sachu]: https://img.shields.io/github/issues/sachuverma/DataStructures-Algorithms.svg?style=flat-square\n[issues-url]: https://github.com/sachuverma/DataStructures-Algorithms/issues\n[license-sachu]: https://img.shields.io/github/license/sachuverma/DataStructures-Algorithms.svg?style=flat-square\n[license-url]: https://github.com/sachuverma/DataStructures-Algorithms/blob/master/LICENSE\n[linkedin-sachu]: https://img.shields.io/badge/LinkedIn--yellow?style=flat-square&logo=linkedin\n[linkedin-url]: https://www.linkedin.com/in/sachuverma/\n[portfolio-sachu]: https://img.shields.io/badge/Portfolio--red?style=flat-square&logo=clickup\n[portfolio-url]: https://sachin-verma.netlify.app/\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Striver Sheet",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        }
      ]
    }
  ]
}