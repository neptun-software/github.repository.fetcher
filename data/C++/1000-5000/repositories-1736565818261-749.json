{
  "metadata": {
    "timestamp": 1736565818261,
    "page": 749,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "selfboot/CS_Offer",
      "stars": 2215,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.20703125,
          "content": "*.pages\n*.pdf\n*.o\n.MWebMetaData/*\n阿里巴巴/*\n百度/*\n宽德科技/*\n涛哥提供宝典.txt\n涛哥题目.md\n腾讯/*\n网易/*\n网易游戏/*\n进化史/*\nREADME_MORE.md\nMedia/*\nImage/*\n项目准备/*\n其它/*\n"
        },
        {
          "name": "Algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "C++",
          "type": "tree",
          "content": null
        },
        {
          "name": "Coding",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataBase",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataStructure",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java",
          "type": "tree",
          "content": null
        },
        {
          "name": "Linux_OS",
          "type": "tree",
          "content": null
        },
        {
          "name": "Math",
          "type": "tree",
          "content": null
        },
        {
          "name": "Network",
          "type": "tree",
          "content": null
        },
        {
          "name": "Offer",
          "type": "tree",
          "content": null
        },
        {
          "name": "OnlineJudge",
          "type": "tree",
          "content": null
        },
        {
          "name": "Others",
          "type": "tree",
          "content": null
        },
        {
          "name": "Python",
          "type": "tree",
          "content": null
        },
        {
          "name": "Questions.md",
          "type": "blob",
          "size": 5.236328125,
          "content": "问题清单，用以自检！\n\n# 操作系统\n\n- [ ] 文件共享：软链接，硬链接\n- [ ] 系统调用与标准库函数的区别\n- [ ] 内核态、用户态\n- [ ] 系统如何将信号通知到进程\n\n# 计算机网络\n\n- [ ] [OSI 网络参考模型](Network/OSI_TCP_IP.md#osi-参考模型)\n- [ ] [TCP/IP 协议栈](Network/OSI_TCP_IP.md#tcpip-协议栈)\n- [ ] [TCP 三次握手建立连接](Network/TCP.md#三次握手建立连接)\n- [ ] [TCP 四次握手断开连接](Network/TCP.md#四次握手断开连接)\n- [ ] [TCP 重传机制](Network/TCP.md#tcp-重传机制)\n- [ ] [TCP 滑动窗口](Network/TCP.md#tcp-滑动窗口)\n- [ ] [TCP 拥塞控制](Network/TCP.md#tcp-拥塞控制)\n- [ ] [Socket 套接字编程](Network/Socket.md)\n- [ ] [get post 区别](Network/HTTP.md#http协议之get和post)\n- [ ] [QQ 传输层UDP](Network/Questions.md#qq-传输层udp)\n- [ ] [访问网页背后流程](Network/Questions.md#访问网页过程)\n\n# 数据库\n\n- [ ] [超码，候选吗，主码](DataBase/Concept.md#码)\n- [ ] [关系代数运算，各种连接](DataBase/Concept.md#关系代数)\n- [ ] [主键、外键](DataBase/Design.md#主键外键)\n- [ ] [原子域和第一范式](DataBase/Design.md#原子域和第一范式)\n- [ ] [第二范式](DataBase/Design.md#第二范式)\n- [ ] [第三范式](DataBase/Design.md#第三范式)\n- [ ] [BCNF 范式](DataBase/Design.md#bcnf-范式)\n- [ ] [一定要遵守范式吗](DataBase/Design.md#范式还是反范式)\n- [ ] [SQL DML：增删查改](DataBase/SQL_Basic.md#sql-dml增删查改)\n- [ ] [SQL 子句、函数](DataBase/SQL_Basic.md#sql-子句函数)\n- [ ] [SQL DDL：数据表操作](DataBase/SQL_Basic.md#sql-ddl)\n- [ ] [事物，隔离级别](DataBase/SQL_More.md#事务)\n- [ ] [存储引擎介绍](DataBase/Engine.md)\n- [ ] [索引原理，分类以及策略](DataBase/Index.md)\n- [ ] [Mysql 的简单使用](DataBase/Mysql.md)\n \n# 数据结构、算法\n\n- [ ] [经典排序算法](Algorithm/Sort.md)\n- [ ] [partition 算法](http://selfboot.cn/2016/09/01/lost_partition/)\n- [ ] [二分查找算法](https://github.com/xuelangZF/LeetCode/tree/master/BinarySearch)\n- [ ] [递归，递归，递归！](https://github.com/xuelangZF/LeetCode/tree/master/Recursion)\n\n# C/C++\n\n- [ ] [声明还是定义](C++/Basic.md/#声明还是定义)\n- [ ] [左值还是右值](C++/Basic.md#左值还是右值)\n- [ ] [引用的使用](C++/Basic.md#引用)\n- [ ] [const 五大类用法](C++/Keywords.md#const)\n- [ ] [static 五种用途](C++/Keywords.md#static)\n- [ ] [extern 作用](C++/Keywords.md#extern)\n- [ ] [extern \"C\" 函数名修饰机制](C++/Keywords.md#extern-c)\n- [ ] [volatile 稳定访问特殊地址](C++/Keywords.md#volatile)\n- [ ] [register 寄存器优化](C++/Keywords.md#register)\n- [ ] [final 禁止继承或者覆盖](C++/Keywords.md#final)\n- [ ] [inline 内联函数](C++/Keywords.md#inline)\n- [ ] [typedef 类型别名](C++/Keywords.md#typedef)\n- [ ] [explicit 避免隐式类型转换](C++/Keywords.md#explicit)\n- [ ] [赋值还是拷贝构造](C++/Class.md#赋值还是构造)\n- [ ] [禁止对象产生在堆栈上](C++/Class.md#禁止对象产生在堆栈中)\n- [ ] [类内初始化](C++/Class.md#构造函数初始值列表)\n- [ ] [虚函数实现机制](C++/Class.md#多态)\n- [ ] [函数重载、覆盖、隐藏区别](C++/Class.md#成员函数)\n- [ ] [数组作为形参](C++/README.md#数组形参)\n- [ ] [指针与引用区别](C++/Pointer.md#指针与引用)\n- [ ] [函数指针](C++/Pointer.md#函数指针)\n- [ ] [内存对齐原则](C++/Basic.md#内存对齐)\n- [ ] [sizeof 运算符](C++/Basic.md#sizeof-运算符)\n- [ ] [union 实现 CPU 字节序判定](C++/Basic.md#联合体cpu字节序)\n- [ ] [内存堆栈的区别](Linux_OS/StackHeap.md)\n- [ ] [常见的内存错误](C++/Memory.md#常见的内存错误)\n- [ ] [new 和 malloc 区别](C++/Memory.md#new-和-malloc-的对比)\n- [ ] [四种类型转换方式](C++/Basic.md#类型转换)\n- [ ] [include 头文件包含](C++/Compiler.md#文件包含)\n- [ ] [按值传递和按引用传递区别](C++/Function#函数参数)\n- [ ] [If 判断规范写法](C++/Basic.md#if-判断语句)\n- [ ] [逗号运算符](C++/Basic.md#逗号运算符)\n- [ ] [智能指针](C++/11_SmartPoint.md)\n\n# Python\n\n- [ ] [新式类、旧式类](Python/Class.md#新式类旧式类)\n- [ ] [静态方法，类方法，成员方法](Python/Class.md#方法)\n- [ ] [数据属性](Python/Class.md#数据属性)\n- [ ] [类继承机制](Python/Class.md#类的继承)\n- [ ] [特殊的类方法, \\_\\_call\\_\\_等](Python/Class.md#特殊的类方法)\n- [ ] [函数参数如何传递](Python/Function.md#函数参数)\n- [ ] [lambda 运行时绑定](Python/Function.md#lambda-匿名函数捕获值)\n- [ ] [函数默认参数](Python/Function.md#默认参数值)\n- [ ] [常用的内置函数](Python/Function.md#内置函数)\n- [ ] [sort 函数用法](Python/Function.md#sorted)\n- [ ] [函数闭包](Python/Function.md#函数闭包)\n- [ ] 提高速度的语言上的技巧\n- [ ] 自省机制：type(), dir()...\n- [ ] 列表推导，字典推导式\n- [ ] 函数参数传递\n- [ ] Python 浅拷贝、深拷贝\n- [ ] Python 协程\n- [ ] Python 闭包\n- [ ] Python 实现单例模式\n- [ ] Python 垃圾回收机制\n- [ ] Python 元类\n- [ ] Python 单下划线和双下划线\n- [ ] 新式类和旧式类\n- [ ] yield 关键字\n- [ ] [Python 3 的变换](Python/py2Vs3.md)\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.4189453125,
          "content": "这个仓库主要用来对计算机学科的基础理论知识和主流编程语言相关内容进行总结，每个目录对应一个大的方向。\n\n\n腾讯内推可以发简历到 xuezaigds@gmail.com ，邮件标题：**学校+手机号+岗位**。我会对合适的简历，内推到相应部门，并及时反馈面试进度与结果。关于TX 面试的一些疑问，也可以发邮件到邮箱咨询。\n\n我的[个人博客](https://selfboot.cn/) ，会有一些技术思考和实践，希望能有帮助。\n\n# 主要内容\n\n主要包含的计算机基础有以下几个大方向：\n\n* [DataBase](DataBase/)\n* [DataStructure](DataStructure/)\n* [Linux_OS](Linux_OS/)\n* [Network](Network/)\n* [Algorithm](Algorithm/)\n* [Math](Math/)\n\n编程语言目前有：\n\n* [Python](Python/)\n* [C++](C++/)\n\n此外，还有几个目录：\n\n* [Coding](Coding/)：一些 C++ 的代码\n* [OnlineJudge](OnlineJudge/)：一些 OJ 的解题代码\n* [Offer](Offer/)：主要分享一些和找工作相关的内容\n* [Others](Others/)：一些无法归类，但是可能有用的东西\n\n最后，[Questions](Questions.md) 文件列出了一些重要的知识点，可以用来自检，看看自己有没有遗漏一些重要知识点。\n\n# 如何贡献\n\n大家可以在Issue 里列出一些感兴趣的问题，或者去认领 Issue，提交 Pull Request.\n\n\n主要贡献者列表：\n\n* [@chenyuze](https://github.com/chenyuze)\n* [@eligao](https://github.com/eligao)\n\n\n"
        }
      ]
    }
  ]
}