{
  "metadata": {
    "timestamp": 1736565657413,
    "page": 550,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "robbert-vdh/yabridge",
      "stars": 2609,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.107421875,
          "content": "BasedOnStyle: Chromium\nIndentWidth: 4\nStandard: Cpp11\n\n# Don't reflow nested comments\nCommentPragmas: '^ *//'\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.2412109375,
          "content": "# Use `tools/run-clang-tidy.sh` to run clang-tidy with the correct config\nChecks: 'bugprone-*,concurrency-*,clang-analyzer-*,-clang-diagnostic-missing-braces'\nInheritParentConfig: false\nFormatStyle: file\nHeaderFilterRegex: ''\nWarningsAsErrors: ''\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "/build*/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 96.818359375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic\nVersioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Fixed\n\n- Worked around an interaction between **Ubuntu 24.10** and certain hosts like\n  **Ardour** that would cause yabridge to hang and eventually crash the host by\n  consuming too much memory. This only affected the prebuilt binaries from the\n  releases page.\n\n### yabridgectl\n\n- Fixed a regression that caused `yabridgectl set --path-auto` to no longer\n  work.\n\n## [5.1.1] - 2024-12-23\n\n### Fixed\n\n- Fixed DPI scaling causing windows contents to become larger than they should\n  be when using **Wine 9.17+** and Wine's font DPI scaling feature.\n- Fixed a potential segfault when unloading yabridge.\n\n## [5.1.0] - 2023-12-23\n\n### Added\n\n- The yabridge libraries now export a `yabridge_version` function that hosts can\n  query to know that a plugin is a yabridge plugin, and which version of\n  yabridge is in use. **Ardour** 8.2 will use this to fix a regression in Ardour\n  7.3 that could cause some VST3 plugins to freeze.\n\n### Changed\n\n- Parsing failures for `yabridge.toml` files will no longer cause plugins to\n  fail to load. If this does happen, you'll now get a desktop notification and\n  the plugin will simply use the default settings instead.\n\n### Fixed\n\n- Fixed freezes in new versions of **Renoise** when it tries to set DPI scaling\n  for VST2 plugins.\n\n### yabridgectl\n\n- Yabridgectl's command line interface looks slightly differently again after\n  some dependency updates. The behavior remains the same.\n- Some outdated warning messages have been updated to match yabridge's current\n  state. There are also some additional warnings for common installation issues.\n\n### Packaging notes\n\n- This release includes a workaround to make bitsery compile with GCC 13 due to\n  changes in transitive header includes.\n- The CLAP dependency has been updated to target version 1.1.9 (revision version\n  update).\n- The asio dependency has been updated to target version 1.28.2.\n- The bitsery dependency has been updated to version 5.2.3 (revision version\n  bump).\n- The function2 dependency has been updated to version 4.2.3 (revision version\n  bump).\n- The `ghc::filesystem` dependency has been updated to version 1.5.14 (revision\n  version bump).\n- The tomlplusplus dependency has been updated to target version 3.4.0.\n\n## [5.0.5] - 2023-05-07\n\n### Changed\n\n- Parameter information for VST3 and CLAP plugins is now queried all at once.\n  This should work around a bug in VST3 _Kontakt_ that would cause loading\n  patches with lots of exposed parameters to become very slow in **REAPER**\n  ([#236](https://github.com/robbert-vdh/yabridge/issues/236)).\n- When dragging plugin windows around, yabridge now waits for the mouse buttons\n  to be released before informing Wine about the window's new screen\n  coordinates. This prevents constant flickering when dragging plugin windows\n  around with some plugin and window manager combinations.\n- Since the above change limits the number of times a plugin GUI potentially has\n  to redraw when dragging the window around to once, the workaround added to\n  yabridge 5.0.2 for _Audio Nebula Aurora FM_ implementing drawing in a very\n  suboptimal way has be reverted. This removes flickering when resizing for a\n  lot of plugin GUIs again.\n- Yabridge now preemptively unsets the `WAYLAND_DISPLAY` environment variable\n  when launching Wine. Upstream Wine currently does not yet have a Wayland\n  driver, but future versions may. When that happens yabridge's X11 window\n  embedding may suddenly start breaking spectacularly. This change makes sure\n  that Wine will keep using X11 even if Wayland support becomes available at\n  some point.\n\n### Fixed\n\n- Fixed a race condition that could occur when a CLAP plugin instance would\n  request a host callback while the host simultaneously tried to create another\n  instance of the same plugin. This would result in a deadlock. An example of a\n  plugin that triggered this is _PolyChrome DSP's McRocklin Suite_.\n- Mutually recursive callbacks are now enabled for more CLAP lifetime function\n  calls. This was another change needed to avoid a deadlock in _PolyChrome DSP's\n  McRocklin Suite_, as it changes its latency while being initialized.\n- Negative indices were not treated as invalid arguments in some of the VST3\n  interface implementations and could cause crashes if a plugin tried to query a\n  parameter value with signed index -1. This has now been fixed. The issue only\n  appeared with the VST3 validator, and not with any regular hosts or DAWs.\n\n### yabridgectl\n\n- VST 3.7.5 `moduleinfo.json` files without a `Compatibility` field are now\n  supported. Previously this would result in a parsing error because the whole\n  point of the `moduleinfo.json` files is to provide `Compatibility` mappings\n  for older VST2 plugins.\n\n## [5.0.4] - 2023-02-23\n\n### Fixed\n\n- Fixed a regression from yabridge 4.0.0 where plugin groups would not exit\n  correctly. When removing a plugin instance that was part of a plugin group, it\n  would block until the group host process had exited. This in turn resulted in\n  hangs if the group host process hosted more than one plugin instance.\n- Configuring the Meson build now works correctly on Wine 8.0 final. Meson's\n  version comparison function considers `8.0` to be a lower version than\n  `8.0rc2`.\n- The tomlplusplus dependency in the Meson build new avoids linking against\n  tomlplusplus' shared libraries. These were recently introduced, and depending\n  on the build environment Meson may still try to link them despite tomlplusplus\n  being used in headers only mode. This is to keep yabridge's plugin libraries\n  free of dependencies outside of the C and C++ standard libraries, avoiding\n  potential symbol clashes.\n\n### Packaging notes\n\n- The CLAP dependency has been updated to target version 1.1.7.\n- The tomlplusplus dependency has been updated to target version 3.3.0.\n\n## [5.0.3] - 2022-12-23\n\n### Changed\n\n- The yabridge 5.0.3 binaries up on the GitHub releases page (and in the\n  [`yabridge-bin`](https://aur.archlinux.org/packages/yabridge-bin) AUR package)\n  now work again with every Wine version after Wine 5.7, including 7.21, 7.22,\n  and the 8.0 release candidates. All workarounds for Wine 7.21 and 7.22 have\n  been reverted. See Wine bug\n  [#53912](https://bugs.winehq.org/show_bug.cgi?id=53912) for more information.\n\n### Packaging notes\n\n- The VST3 dependency has been updated to target version 3.7.7 with tag\n  `v3.7.7_build_19-patched`.\n- The CLAP dependency has been updated to target version 1.1.4.\n- The `patch-vst3-sdk.sh` script now applies a handwritten diff to the SDK\n  instead of patching the SDK using sed. This makes it easier to use older (but\n  still API-compatible) VST3 SDK versions with yabridge and it makes the\n  patching less brittle. The patches can be found in `tools/vst3-sdk-patches`.\n- Since the workarounds from yabridge 5.0.1 and 5.0.2 have been reverted, the\n  Meson build will now throw an error when trying to build against Wine 7.21,\n  7.22, or 8.0-rc1. Yabridge binaries built against these Wine versions will not\n  work correctly.\n- Yabridge built against Wine 8.0-rc2 will also work with older Wine versions,\n  including the aforementioned ones that previously required workarounds.\n  Yabridge built against older Wine versions will not work with Wine 8.0-rc2 or\n  later.\n- Unity builds can safely be re-enabled again.\n\n## [5.0.2] - 2022-11-28\n\n# Changed\n\n- The yabridge builds on the GitHub releases page now have the unity build\n  option disabled. This _may_ work around the same Wine bug\n  [#53912](https://bugs.winehq.org/show_bug.cgi?id=53912) mentioned in the last\n  release, as the bug has not yet been fixed for Wine 7.22. Since this is a low\n  level bug within Wine, there's no guarantee that everything will work\n  correctly until the bug gets fixed. If you still experience crashes or freezes\n  with yabridge, then do consider\n  [downgrading](https://github.com/robbert-vdh/yabridge#downgrading-wine) back\n  to Wine Staging 7.20.\n- Yabridge's build system now errors out when enabling unity builds while\n  compiling with Wine 7.21 and 7.22.\n\n# Fixed\n\n- Changed the behavior when setting window positions for yabridge's editor. This\n  avoids a painfully slow redraw in the _Audio Nebula Aurora FM_ plugin when\n  dragging the editor window around. The change may also help with other slow to\n  redraw GUI, and especially with window managers that send excessive events on\n  window movement like in Cinnamon and XFCE.\n\n### Packaging notes\n\n- The `--unity=on` build option should be removed for the time being as this\n  together with the VST3 SDK triggers the above mentioned [Wine\n  bug](https://bugs.winehq.org/show_bug.cgi?id=53912). Make sure to run\n  `yabridge-host.exe` (just that, with no `wine` in front of it) at least once\n  with Wine Staging 7.21 or 7.22 after building to make sure the build works\n  correctly. It should print a usage message if it does.\n\n## [5.0.1] - 2022-11-14\n\n# Fixed\n\n- Added a temporary workaround for yabridge hanging indefinitely on startup as\n  the result of a new bug in Wine 7.21:\n  https://bugs.winehq.org/show_bug.cgi?id=53912\n\n# yabridgectl\n\n- Fixed converted VST 3.7.5 `moduleinfo.json` files being considered orphan\n  files immediately after yabridgectl created them as part of the sync\n  operation.\n\n## [5.0.0] - 2022-11-02\n\n# Added\n\n- Yabridge 5.0 now supports bridging [CLAP](https://cleveraudio.org/) plugins in\n  addition to its existing VST2 and VST3 plugin support. CLAP is a\n  [collaborative\n  effort](https://github.com/free-audio/clap/blob/main/Contributors.md) by a\n  group of plugin and host developers of all backgrounds to create a\n  permissively licensed extensible plugin standard that is simple while also\n  catering to the needs of plugin developers, host developers, and musicians\n  alike. When bridged under yabridge, these plugins are likely to have lower\n  bridging overhead than their VST2 and VST3 counterparts while also being more\n  responsive and offering better support for instrument plugins and parameter\n  modulation.\n\n  Yabridge 5.0.0's CLAP bridging supports [all official CLAP 1.1\n  extensions](https://github.com/robbert-vdh/yabridge/blob/master/src/common/serialization/clap/README.md)\n  except for the audio thread pool extension. Support for that extension will be\n  added in a future yabridge release as Windows-only plugins that rely on the\n  feature get released.\n\n- Desktop notifications no longer rely on the `notify-send` command line tool,\n  and are now sent by directly talking to D-Bus instead. This ensures that\n  you'll always see yabridge's notifications when something important happens,\n  even when using more niche distros where you may not have `notify-send`\n  installed by default.\n- A new `editor_disable_host_scaling` `yabridge.toml` [compatibility\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) lets\n  you prevent hosts from setting an explicit DPI scaling factor for a plugin's\n  editor. In some cases this can help with inconsistent scaling when using HiDPI\n  displays. This option affects both **VST3** and **CLAP** plugins and it\n  replaces the older `vst3_no_scaling` option.\n\n# Removed\n\n- The `vst3_no_scaling` compatibility option has been removed in favor of the\n  new `editor_disable_host_scaling` option.\n\n# Changed\n\n- Slightly optimized the use of serialization buffers to reduce memory usage for\n  VST3 audio threads. This change also potentially speeds up parameter\n  information queries for parameters with lots of associated text.\n\n### Fixed\n\n- Fixed a minor memory leak in the Wine->X11 drag-and-drop implementation when\n  converting Windows file paths.\n- Removed leftover debug prints when opening VST2 editors.\n\n### yabridgectl\n\n- Added support for setting up CLAP plugins.\n\n### Packaging notes\n\n- There are new `libyabridge-clap.so` and `libyabridge-chainloader-clap.so`\n  files need to be included in the package.\n- The new CLAP support requires version 1.1.2 of the CLAP headers because\n  earlier versions did not yet contain calling conventions.\n  (<https://github.com/free-audio/clap/issues/153>,\n  <https://github.com/free-audio/clap/pull/154>). Building against older\n  versions will result in memory errors.\n- The VST3 dependency is now at tag `v3.7.5_build_44-patched-2`. The only\n  difference with the previous `v3.7.5_build_44-patched` is a fixed version\n  number in the `meson.build` file.\n- The Meson build now requires the `libdbus-1` development package to be\n  installed. Yabridge's binaries don't dynamically link against the shared\n  library, but they do use the definitions from the headers to load\n  `libdbus-1.so.3` at runtime when it needs to send a desktop notification.\n\n## [4.0.2] - 2022-06-27\n\n### Fixed\n\n- Fixed a rare edge case where a Windows VST3 plugin would incorrectly be\n  classified as a bundle-style plugin, which caused loading those plugins to\n  fail. This could happen if the directory `foo` contained some random\n  directory, containing another directory, containing `foo.vst3`. Yabridge\n  always assumed this to be a bundle, even if it was not.\n- Fixed Full Bucket's _Ragnarök_ causing some hosts to freeze when changing\n  presets due to some mutually recursive function calls that weren't being\n  handled as such.\n\n### yabridgectl\n\n- Parsing errors for plugin binaries are now non-fatal. This could happen if\n  your Windows plugin directories contain text files with a `.dll` or `.vst3`\n  file extension. This would normally never happen, but it can still happen if\n  you extracted those Windows plugins from a .zip file that was created on\n  macOS. Don't ask me how or why.\n- Prematurely abort the `yabridgectl sync` process if `~/.vst/yabridge` or\n  `~/.vst3/yabridge` are symlinks to a directory that's part of or contains one\n  of yabridgectl's plugin search directories. This prevents an edge cases where\n  VST2 plugin .dll files could be replaced by symlinks to themeselves.\n- Don't trigger a panic on `yabridgectl sync` if someone `yabridgectl add`'ed\n  the inner contents of a Windows VST3 bundle. For the record, you really,\n  really, _really_ shouldn't be doing this.\n\n## [4.0.1] - 2022-06-12\n\n### Added\n\n- Added a `system-asio` build option to aid distro packaging.\n\n### Fixed\n\n- Fixed recent _Arturia_ VST3 plugins running into memory errors at the end of a\n  plugin scan in **REAPER** and **Ardour**. These plugins would try to read data\n  in the Windows message loop without checking whether that data was\n  initialized, after the data had just been deinitialized.\n\n### yabridgectl\n\n- Fixed a regression from yabridge 4.0.0 where VST3 plugins in the 'new' Windows\n  VST3 bundle format, like _Sforzando_, were not set up correctly.\n\n### Packaging notes\n\n- The new `system-asio` build option forces Asio to be used from the standard\n  include directories. Otherwise the dependency is defined as a regular Meson\n  dependency. Asio does not have any pkgconfig or CMake [build\n  definitions](https://github.com/chriskohlhoff/asio/issues/1071), so it's\n  impossible to detect its presence and version in a standard way. Because of\n  that the Meson build will always fall back to using the included wrap\n  dependency. Configuring the project with\n  `meson setup build -Dsystem-asio=true ...` forces `<asio.hpp>` to be used\n  instead.\n- The `ghc_filesystem` dependency now explicitly mentions the\n  `ghcFilesystem::ghc_filesystem` CMake module. `ghc::filesystem`'s naming is\n  [inconsistent](https://github.com/gulrak/filesystem/pull/129) so Meson can't\n  detect the correct module automatically. It also doesn't expose a\n  [version](https://github.com/gulrak/filesystem/issues/148), so even with this\n  change version 1.5.12 of the upstream dependency still won't be detected\n  correctly. There is a [PR](https://github.com/gulrak/filesystem/pull/149) that\n  fixes this.\n\n## [4.0.0] - 2022-06-09\n\n### Added\n\n- Yabridge 4.0 completely revamps the way plugin loading works to allow yabridge\n  to be updated without breaking existing yabridge'd plugins while saving disk\n  space on filesystems that don't support reflinks and speeding up the\n  `yabridgectl sync` process. Up until this point, `yabridgectl sync` has always\n  made copies of yabridge's `libyabridge-vst2.so` or `libyabridge-vst3.so`\n  plugin libraries for every Windows plugin it sets up. These plugins are\n  tightly coupled to the yabridge plugin host binaries, and updating one but not\n  the other can thus cause issues. With yabridge 4.0, yabridgectl no longer\n  copies the entire plugin libraries. Instead, it now creates copies of these\n  new tiny dependencyless shim libraries. When loaded by a plugin host, these\n  libraries locate the actual plugin libraries on the system and then\n  transparently forward all entry point function calls to them as if the host\n  was loading the yabridge plugin library directly. Yabridge internally calls\n  these libraries chainloaders due to their similarity to the identically named\n  functionality in boot loading process. This allows yabridge to be updated\n  independently of these copied chainloading libraries. As such, it is no longer\n  possible for yabridge to be out of sync after an update. If you use a distro\n  packaged version of yabridge, then that means yabridge can now be updated\n  safely without requiring any action from your side.\n- Added support for the `effBeginLoadBank` and `effBeginLoadProgram` VST2\n  opcodes for loading state as a program or a program bank.\n\n### Changed\n\n- Almost the entirety of yabridge's backend has been rewritten to get rid of all\n  dependencies on the Boost libraries. As a consequence, the runtime dependency\n  on `Boost.Filesystem` has also been removed. This makes packaging yabridge for\n  distros easier, and it makes the packages more reliable by removing the need\n  for yabridge to be rebuilt whenever Boost gets updated. Additionally, it also\n  makes compiling slightly faster and the binaries are slightly smaller.\n- The functionality for the `yabridge-group` binaries has been merged into the\n  `yabridge-host` binaries to reduce duplication.\n- When the user does not have the permissions to lock the shared audio buffers\n  into memory, yabridge will now retry mapping the memory without locking it\n  instead of immediately terminating the process. An annoying desktop\n  notification will still be shown every time you load a plugin until you fix\n  this however.\n- Yabridge now prints the path to the `libyabridge-{vst2,vst3}.so` library\n  that's being used on startup. This tells you where the chainloader is loading\n  the library file from. Because you can never have too much information, right?\n- The `with-bitbridge`, `with-vst3`, and `with-winedbg` build options have been\n  renamed to `bitbridge`, `vst3`, and `winedbg`.\n- `effProcessEvents` VST2 calls are now filtered out from the log when\n  `YABRIDGE_DEBUG_LEVEL` is set to 1.\n\n### Removed\n\n- Removed the `with-static-boost` build option since there's no longer a\n  dependency on Boost.Filesystem.\n- Removed the `yabridge-group` binaries as they are now part of the\n  `yabridge-host` binaries. This saves precious megabytes.\n\n### Fixed\n\n- Fixed manually changing channel counts with supported VST3 plugins in\n  **REAPER** not working.\n- Fixed an obscure issue with VST3 plugins crashing in **Ardour** on\n  Arch/Manjaro because of Ardour's misreported parameter queue lengths.\n- Fixed yabridge throwing assertion failures on serialization when using some of\n  the _Orchestral Tools_ Kontakt libraries in the VST2 version of Kontakt. Some\n  of those libraries would output more than 2048 MIDI events in a single buffer.\n- Some of yabridge's socket file names contained extremely aesthetically\n  unpleasing trailing underscores. Begone pesky underscores!\n- Fixed building with VST3 support disabled.\n\n### yabridgectl\n\n- VST2 plugins are now set up in `~/.vst/yabridge` by default. This means that\n  you no longer have to add any directory search locations in your DAW. The only\n  potential downside is that it's no longer possible for two plugin directories\n  (perhaps in different Wine prefixes) to provide the same plugin file, although\n  you would not have been able to use both with the same DAW anyways. Like with\n  yabridgectl's VST3 support, the subdirectory structure within the plugin\n  directory is preserved. You can use `yabridgectl set --vst2-location=inline`\n  to revert back to the old behavior of setting the plugins up right next to the\n  VST2 plugin `.dll` files. Some migration notes:\n\n  - Because the plugins are now set up in `~/.vst/yabridge` by default instead\n    of next to the Windows VST2 plugin .dll file, you will see notices about\n    leftover `.so` files the first time you run `yabridgectl sync` after\n    updating. Double check the list to make sure there are no files in there\n    that shouldn't be removed, and then run `yabridgectl sync --prune` as\n    instructed to remove the old `.so` files.\n  - Make sure your DAW searches for VST2 plugins in `~/.vst`.\n  - You can and should remove any entries for VST2 plugin directories you added\n    to your DAW's plugin search locations as they will no longer contain any\n    relevant files.\n  - If you were using a `yabridge.toml` configuration file to configure VST2\n    plugins, then you will now need to move that file in `~/.vst/yabridge`\n    instead.\n\n- As mentioned above, yabridgectl now uses the new chainloading libraries when\n  setting up plugins. This means that once you've ran `yabridgectl sync` after\n  updating to yabridge 4.0, yabridge can now be updated without needing to rerun\n  `yabridgectl sync`. This is particularly useful when using a distro packaged\n  version of yabridge.\n- Added support for the new VST 3.7.5 `moduleinfo.json` format to allow VST3\n  plugins to replace VST2 and VST3 plugins with different class IDs.\n- Yabridgectl no longer depends on **winedump**. It now parses Windows PE32(+)\n  binaries without requiring any external dependencies. Or at least, that's the\n  idea. I've come across at least one binary that this new parser can't handle\n  (https://github.com/m4b/goblin/issues/307), so it will still fall back to\n  winedump when that happens.\n- After `yabridgectl sync` has finished setting up plugins, yabridgectl now also\n  checks whether `notify-send` is installed as part of its post-installation\n  verification process. If `notify-send` is missing, then yabridge won't be able\n  to send any notifications when things are going terribly wrong.\n- `yabridgectl status` now shows the locations where bridged VST2 and VST3\n  plugins will be set up.\n- `yabridgectl sync --prune` now also considers broken symlinks.\n- The VST3 subdirectory detection has been made more robust and can now handle\n  arbitrary plugin directories, not just directories that are called `VST3`.\n  This, of course, should not be needed.\n- The previously deprecated symlink installation method has been removed from\n  yabridgectl, along with the `yabridgectl set --method` option. The terminology\n  in `yabridgectl status` has changed accordingly.\n- `yabridgectl status` now lists the architecture of\n  `libyabridge-chainloader-vst2.so` just like it already did for the VST3\n  library.\n\n### Packaging notes\n\n- `libyabridge-chainloader-vst2.so` and `libyabridge-chainloader-vst3.so` are\n  new files that should be included in the package.\n- The `yabridge-group` binaries no longer exist as they are now part of the\n  `yabridge-host` binaries.\n- The `with-bitbridge` build option has been renamed to just `bitbridge`.\n- Both runtime and compile time dependencies on the Boost libraries have been\n  removed.\n- There's a new dependency on the headers-only\n  [`ghc::filesystem`](https://github.com/gulrak/filesystem) library to replace\n  Boost.Filesystem. A Meson wrap is included as a fallback for a distro package.\n- The headers-only [Asio](http://think-async.com/Asio/) library now replaces\n  Boost.Asio. A Meson wrap is included as a fallback for a distro package.\n- Fixed a deprecation warning in the Meson build, causing the minimum supported\n  Meson version to be bumped up to **Meson 0.56** from 0.55.\n- Yabridge now targets VST3 SDK version 3.7.5 with git tag `v3.7.5_build_44-patched`.\n\n## [3.8.1] - 2022-03-08\n\n### Changed\n\n- Change the low `RLIMIT_RTTIME` warning to mention setting up realtime\n  priviliges instead of changing PipeWire's config now that PipeWire MRs\n  [!1118](https://gitlab.freedesktop.org/pipewire/pipewire/-/merge_requests/1118)\n  and\n  [!1120](https://gitlab.freedesktop.org/pipewire/pipewire/-/merge_requests/1120)\n  have been merged and PipeWire can use regular realtime scheduling without\n  imposing any resource limits out of the box.\n- Prevented yabridge's ad-hoc socket acceptors from inheriting realtime\n  scheduling when spawned from audio threads. In practice this should not have\n  caused any noticeable effects as these threads are sleeping all the time\n  except for under very specific circumstances.\n\n### Fixed\n\n- Fixed the **REAPER**-specific `editor_force_dnd` option not working correctly\n  when using the `Track -> Insert virtual instrument on new track...` option.\n  When using this option REAPER will first embed the plugin in an offscreen\n  plugin window and it will only then create the actual FX window and embed the\n  other window in it.\n- Fixed the VST3 version of _IK Multimedia's T-RackS 5_ producing silent output\n  when doing offline rendering. This could happen when exporting or bouncing\n  audio in **Bitwig Studio 4.1+**, **Ardour** and in **REAPER**. These plugins\n  apparently need to process audio from the main GUI thread when in offline\n  rendering mode. If you try to process audio from the...audio thread, then they\n  will produce silence and hang afterwards (which a fix in yabridge 3.7.0\n  previously addressed).\n- Fixed crashes when opening plugin editors under **Crostini** on ChromeOS due\n  to non-standard X11 implementations.\n- Worked around a bug in the _RandARP_ VST2 plugin where the plugin would report\n  that its editor window is 0 by 0 pixels.\n- Fixed building under Wine 7.2 and up because of changes to the definitions of\n  Wine's numerical types.\n\n### yabridgectl\n\n- `yabridgectl status` no longer mentions anything about installation methods if\n  you're using the regular, copy-based installation method. This is a follow-up\n  to the changes made in yabridgectl 3.8.0.\n\n## [3.8.0] - 2022-01-15\n\n### Added\n\n- Added support for VST3 plugins interacting directly with the host's context\n  menu items. Most plugins that use VST3's context menu support let the host\n  handle drawing the actual menu, but it's also possible for plugins to\n  incorporate the host's menu items into their own custom context menu. So far\n  this feature has only been tested with [Surge\n  XT](https://github.com/surge-synthesizer/surge)'s Windows VST3 version since\n  very few if any other plugins do this right now, but other plugins may start\n  doing this as well in the future.\n\n### Changed\n\n- Added support for Wine 6.23's new fixed winedbg command line argument\n  handling.\n- Changed the build and cross-compilation definitions to allow\n  repository-packaged CMake build configurations to be used for the bitsery and\n  function2 dependencies.\n\n### Fixed\n\n- Fixed _Waves_ V13 VST3 plugins crashing when opening the GUI. These plugins\n  thought it would be a great idea to randomly dereference null pointers if the\n  window they're embedded in is already visible. A day's worth of debugging well\n  spent. Even after this, the V13 plugins are a bit unstable under Wine in\n  general, and they will likely crash when reopening the editor a couple of\n  times or when removing them. So as always, if you can avoid Waves, that would\n  be for the best.\n- Fixed sluggish UIs in _Output's Thermal_ and likely a handful of other\n  JUCE-based plugins with a lot of parameters. These plugins would emit hundreds\n  to thousands of events when the GUI changes. Yabridge now detects this, and\n  relaxes the throttling we have in place to prevent certain other plugins from\n  getting stuck in infinite loops.\n- Fixed _DrumCore 3_ crashing when trying to drag grooves from the plugin to\n  other applications. This happened because of an integer underflow in that\n  plugin, causing the number of reported drag-and-drop formats to be magnitudes\n  higher than yabridge's indicated maximum.\n- Fixed Wine version detection in the build configuration.\n- Fixed VST3 connection point proxies not being disconnected properly. The code\n  path for this is not being used for any of the current Linux VST3 hosts, so\n  this won't have caused any issues.\n- Rewritten the VST3 object handling to prevent some theoretical data races when\n  the host inserts or removes plug instances while other instances of that\n  plugin are processing audio.\n\n### yabridgectl\n\n- Yabridgectl's help text received some shiny new colors.\n- Disallowed adding individual files or symlinks to individual files with\n  `yabridgectl add`. Yabridgectl was never intended to be used that way and\n  while it does sort of work, it will lead to a number of surprises down the\n  line.\n- Deprecated support for the symlink-based installation method in yabridgectl\n  and removed all remaining mentions of it from the documentation. This feature\n  has for all intents and purposes already been made obselete in yabridge 2.1.0,\n  but the option still remained available. Enabling this option would lead to a\n  lot of surprises because of the way Linux's dynamic linker works. And with\n  modern file systems supporting reflinks and yabridge falling back to searching\n  for binaries in `~/.local/share/yabridge`, there's zero reason to use this\n  feature anymore. Yabridgectl will now print a warning upon syncing when the\n  symlink installation method has been enabled, and the feature will be removed\n  completely in yabridge 4.0.\n- Blacklisted symlinks and symlinked directories are now handled correctly when\n  syncing.\n\n### Packaging notes\n\n- The tomlplusplus wrap dependency has been updated to version 3.0.1 because of\n  breaking API changes in version 3.0.\n- We now target VST3 SDK version 3.7.4 with git tag `v3.7.4_build_25-patched`.\n- Yabridgectl now uses Rust 2021 and requires rustc 1.56 or newer to build.\n\n## [3.7.0] - 2021-11-21\n\n### Added\n\n- Added an environment variable for changing the directory yabridge stores its\n  sockets and other temporary files in. This is only useful when running the\n  Wine process under a separate namespace. If you don't know what this means,\n  then you probably don't need this!\n\n### Changed\n\n- Added a workaround for a new\n  [bug](https://bugs.winehq.org/show_bug.cgi?id=51919) in Wine 6.20 that would\n  cause compilation to fail by redefining common variable names used in the\n  standard library. This issue has since been fixed in Wine 6.21 and up.\n\n### Fixed\n\n- Fixed the VST3 version of _IK Multimedia's T-RackS 5_ causing offline\n  rendering to stall indefinitely. This could happen when exporting or bouncing\n  audio in **Bitwig Studio 4.1**, **Ardour** and in **REAPER**. Those plugins\n  deadlock when they receives timer events while doing offline audio processing,\n  so we now prevent that from happening.\n- The socket endpoints used by plugin group host processes to accept new\n  connections now get removed when those processes shut down. Previously this\n  would leave behind a file in the temporary directory.\n\n### Packaging notes\n\n- All Meson wraps now use `wrap-git` instead of downloading tarballs from\n  GitHub. Previously the bitsery and function2 wraps would use source tarballs.\n- The `meson.build` patch overlays for the bitsery and function2 wraps are no\n  longer stored in tarballs committed to yabridge's repository. Instead, they\n  are now regular directories in the `subprojects/packagefiles` directory. This\n  means that building yabridge with these wraps now requires **Meson 0.55** or\n  later because of the use of `patch_directory`.\n- The bitsery wrap dependency was updated to version 5.2.2.\n- The function2 wrap dependency was updated to version 4.2.0.\n- The tomlplusplus wrap dependency was updated to slightly after version 2.5.0\n  because of an [issue](https://github.com/marzer/tomlplusplus/issues/121) with\n  their `meson.build` file that breaks compatibility with Meson 0.60.0 on older\n  versions.\n\n## [3.6.0] - 2021-10-15\n\n### Added\n\n- Yabridge will now also show annoying desktop notifications when encountering\n  low `RLIMIT_RTTIME` and `RLIMIT_MEMLOCK` values. This can happen on systems\n  that have not yet been configured for pro audio work or with using an out of\n  the box PipeWire configuration. If these issues are not fixed, then certain\n  plugins may crash during initialization. Since these configuration issues may\n  not immediately cause any obvious problems, it's better to be upfront about it\n  so they can't cause mysterious issues later on. We would already print\n  warnings about this to the terminal, but those are easily missed when starting\n  a DAW from the GUI.\n- Added a new `editor_coordinate_hack` [compatibility\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  replace `editor_double_embed`. This can be useful with buggy plugins that have\n  their editor GUIs misaligned after resizing the window. These plugins tend to\n  draw their GUI based on (top level) window's absolute screen coordinates\n  instead of their own relative position within the parent window. Some known\n  plugins that can benefit from this are _PSPaudioware E27_ and _Soundtoys\n  Crystallizer_.\n\n### Removed\n\n- The `editor_double_embed` option added in yabridge 1.4.0 has been removed as\n  the `editor_coordinate_hack` option supersedes it.\n\n### Changed\n\n- The Wine plugin host applications now print their version information before\n  the `Usage: ` string when invoked without any command line arguments.\n- VST3 Data (SysEx) events now use the same small buffer optimization yabridge\n  already used for VST2 SysEx events. This avoids allocations when a VST3 plugin\n  sends or receives a small SysEx event.\n\n### Fixed\n\n- Worked around a [bug](https://svn.boost.org/trac10/changeset/72855) in\n  Boost.Process that would cause yabridge to crash with an\n  `locale::facet::_S_create_c_locale name not valid` exception when (part of)\n  the current locale is invalid. This could happen on Arch Linux if you skipped\n  part of the Arch installation process.\n- Fixed New Sonic Arts' _Vice_ plugin freezing when loading the plugin. This\n  happened because the plugin interacted with the GUI and tried to spawn new\n  threads when the host changes the sample rate or block size from the audio\n  thread. These things are now done from the main GUI thread, so please let me\n  know if there are any new loading issues with other VST2 plugins after this\n  update.\n- Fixed the drag-and-drop implementation not sending an `XdndStatus` message on\n  the very first tick. This fixes drag-and-drop from the _Samplab_ plugin which\n  has a broken drag-and-drop implementation and only starts the operation after\n  the left mouse button has already been released.\n- Fixed the drag-and-drop implementation not properly handling errors caused by\n  the pointer being grabbed. This would only happen with _Samplab_.\n- Fixed sub 100 millisecond drag-and-drop operations being ignored by certain\n  hosts, like **Bitwig Studio**. This would only happen with _Samplab_. The XDND\n  implementation now has a warmup phase to prevent this from happening.\n\n### yabridgectl\n\n- `yabridgectl rm` and `yabridgectl blacklist rm` now accept relative paths.\n\n### Packaging notes\n\n- We now target VST3 SDK version 3.7.3 with git tag `v3.7.3_build_20-patched`.\n- Because of an\n  [update](https://github.com/clap-rs/clap/commit/241d183b9c3fb21ea4ecb6720a9d2118b9533029)\n  to clap, the minimum rustc version required to build yabridgectl is now\n  `1.54`.\n\n## [3.5.2] - 2021-08-08\n\n### Added\n\n- Added support for VST2 plugins sending and receiving SysEx events. Certain\n  MIDI controllers like the _Arturia MiniLab Mk II_ output SysEx events when\n  changing between octaves, and some hosts like **REAPER** forwards these events\n  directly to the plugin. Before this change this might cause crashes with\n  plugins that try to handle SysEx events, like the _D16 Group_ plugins.\n\n### Fixed\n\n- Fixed a regression from yabridge 3.5.1 where certain VST3 plugins wouldn't\n  resize to their correct size when opening the editor. This affected\n  **Kontakt**, and it was caused by reverting just a little bit too much code in\n  the regression fix from the previous release.\n- Fixed _D16 Group_ plugins crashing when the host tries to send SysEx events.\n\n## [3.5.1] - 2021-07-31\n\n### Added\n\n- You can now directly focus the plugin's editor instead of allowing the host to\n  process keyboard events by holding down the <kbd>Shift</kbd> key while\n  entering a plugin's GUI with your mouse. Certain hosts like **Bitwig Studio**\n  normally still respond to common key presses like <kbd>Space</kbd> for\n  play/pause while interacting with a plugin. That in turn can make it\n  impossible to type a space character in those hosts, which may become a\n  problem when searching for or naming presets. With this feature you can\n  temporarily override this behaviour and allow all keyboard input to go\n  directly to Wine. This can also be useful for _Voxengo_ plugins, which don't\n  grab input focus in their settings and license dialogs.\n\n### Changed\n\n- Added more tracing for the input focus handling when using the `+editor`\n  `YABRIDGE_DEBUG_LEVEL` flag.\n- Yabridge will now handle X11 events from within the Win32 message loop. What\n  this means is that X11 events are now handled even when the plugin is blocking\n  the GUI thread, which can potentially increase responsiveness and help with\n  graphical issues in certain situations (although at the moment there aren't\n  any known situations where the old approach caused any issues).\n\n### Fixed\n\n- Reverted the workaround for the _Nimble Kick_ plugin freezing added in\n  yabridge 3.5.0. This could cause VST3 plugins in **Bitwig Studio** and\n  **Ardour** to have frozen, nonfunctional editors when using multiple instances\n  of a plugin unless you opened every plugin instance's editor. Since the plugin\n  would also cause the native Windows version of Bitwig to crash, we will thus\n  simply revert this change.\n- Fixed a regression from yabridge 3.5.0 where clicking inside of a plugin GUI\n  while the window is already open in the background would not give keyboard\n  focus to the plugin.\n- Changed how input focus releasing works by more selectively filtering out\n  mouse pointer leave events where the pointer is still hovering over a Wine\n  window instead of ignoring an entire wider class of events. This should fix\n  some edge cases where input focus would not be given back to the host, or\n  where dropdown menus could close immediately when hovering over and them\n  leaving them with your mouse. The first case would in practice only happen\n  when using a touchscreen or drawing tablet, since it would require the mouse\n  to instantly move from the plugin GUI to another window without first going\n  over the window's borders.\n- Similarly, the filter in yabridge 3.5.0's Wine->X11 drag-and-drop\n  implementation for distinguishing between Wine windows and other windows (so\n  that we won't interfere with Wine's own internal drag-and-drop mechanism) has\n  also been made more specific. Before this change we might use our own\n  XDND-based drag-and-drop implementation when dragging files from a plugin to a\n  standalone Wine application running within the same Wine prefix.\n\n## [3.5.0] - 2021-07-23\n\n### Added\n\n- Added a warning on startup if yabridge may not be able to lock enough shared\n  memory for its audio processing. If you have not yet set up realtime\n  priviliges and memory locking limits for your user, then yabridge may not be\n  able to map enough shared memory for processing audio with plugins that have a\n  lot of inputs or outputs channels.\n- When this shared memory mapping fails because of a low value being set for\n  `RLIMIT_MEMLOCK`, yabridge will now print a more specific error message\n  telling you about the issue and how to fix it.\n- Added a an optional `+editor` flag to the `YABRIDGE_DEBUG_LEVEL` environment\n  variable that causes debug tracing information about the plugin editor window\n  to be printed. This can be useful for diagnosing DAW or window manager\n  specific issues.\n\n### Changed\n\n- The way editor embedding works has been rewritten. Yabridge now inserts a\n  wrapper window between the host's parent window and the embedded Wine window\n  instead of embedding the Wine window directly into the host. This should get\n  rid of all rare edge cases where the host would ignore the window size\n  reported by the plugin and would instead try to detect the plugin's size on\n  its own by intercepting configuration events sent to the Wine window. This\n  could cause the editor window to grow to fit the entire screen in certain\n  hosts under very specific circumstances.\n- We now support version 3 and 4 of the XDND specification for the Wine->X11\n  drag-and-drop support. Before this yabridge assumed every application\n  supported version 5 from 2002, but JUCE based hosts only support XDND version 3.\n\n### Fixed\n\n- Fixed crashes or freezes when a plugin uses the Windows drag-and-drop system\n  to transfer arbitrary, vendor specific data. This prevents **Reaktor** from\n  freezing when editing a patch after upgrading to yabridge 3.4.0.\n- Fixed yabridge thinking that the Wine plugin host process has died when the\n  user doesn't have permissions to access the Wine process's memory. This fixes\n  a seemingly very rare regression from yabridge 3.4.0 where the Wine plugin\n  host application would immediately be seen as dead when using _AppArmor_,\n  preventing yabridge from starting.\n- Fixed a regression from yabridge 3.4.0 where plugins with zero input and\n  output audio channels like FrozenPlain **Obelisk** would result in a crash.\n- Fixed a regression from yabridge 3.4.0 where JUCE-based VST3 plugins might\n  cause **Ardour** or **Mixbus** to freeze in very specific circumstances.\n- As mentioned above, it's now no longer possible for hosts to wrongly detect\n  the editor window size. This fixes a rare issue with **Ardour** on older XFCE\n  versions where the editor window would extend to cover the entire screen. A\n  similar issue also exists with **Carla** 2.3.1.\n- This same change also fixes VST3 editors in **Ardour** not rendering past\n  their original size when resizing them from the plugin (as opposed to resizing\n  the actual window).\n- Worked around a **REAPER** bug that would cause REAPER to not process any\n  keyboard input when the FX window is active but the mouse cursor is positioned\n  outside of the window. We now use the same validation used in `xprop` and\n  `xwininfo` to find the host's window instead of always taking the topmost\n  window.\n- Fixed Wine->X11 drag-and-drop in **Tracktion Waveform**. Waveform only\n  supports an old 1998 version of the XDND specification, so it was ignoring our\n  messages since we assumed every application would support the most recent XDND\n  version from 2002.\n- Worked around a race condition in _Nimble Kick_, which would trigger a stack\n  overflow when loading the plugin if it wasn't already activated.\n- Potentially fixed an obscure issue where the editor would not render at all\n  when using multiple displays and the rightmost display was set as the primary\n  display. This issue appears to be very rare, and I haven't gotten any response\n  back when I asked the people affected by this to test a potential fix, so I'm\n  just including it in yabridge anyways in case it helps. If anyone was affected\n  by this, please let me know if this update makes any difference!\n\n### yabridgectl\n\n- `yabridgectl status` now also lists the paths to the `yabridge-host.exe` and\n  `yabridge-host-32.exe` binaries that yabridge will end up running. This can be\n  helpful for diagnosing issues with complex setups.\n\n## [3.4.0] - 2021-07-15\n\n### Added\n\n- Added support for drag-and-drop from Windows plugins running under yabridge to\n  native applications, such as your DAW. This makes it much more convenient to\n  use plugins like _Scaler 2_ that generate audio or MIDI files. Because of the\n  way this is implemented this feature will work with any Wine version.\n- When a plugin fails to load or when the Wine plugin host process fails to\n  start, yabridge will now show you the error in a desktop notification instead\n  of only printing it to the logger. This will make it much faster to quickly\n  diagnose issues if you weren't already running your DAW from a terminal. These\n  notifications require `libnotify` and its `notify-send` application to be\n  installed.\n- Similarly, yabridge will show you a warning and a desktop notification with a\n  reminder to rerun `yabridgctl sync` when it detects that there's been a\n  version mismatch between the plugin and the used Wine plugin host application.\n- Added support for building 32-bit versions of the yabridge libraries, allowing\n  you to use both 32-bit and 64-bit Windows VST2 and VST3 plugins under 32-bit\n  Linux plugin hosts. This should not be needed in any normal situation since\n  Desktop Linux has been 64-bit only for a while now, but it could be useful in\n  some very specific situations. Building on an actual 32-bit system will also\n  work, in which case the 64-bit Wine plugin host applications simply won't be\n  built.\n- Added the deprecated pre-VST2.4 `main` entry point for VST2 plugins. This\n  allows the above mentioned 32-bit version of yabridge to be used in\n  **EnergyXT**, allowing you to use both 32-bit and 64-bit Windows VST2 plugins\n  there.\n- Added an environment variable to disable the watchdog timer. This is only\n  needed when running the Wine process under a separate namespace. If you don't\n  know that you need this, then you probably don't need this!\n\n### Changed\n\n- The audio processing implementation for both VST2 and VST3 plugins has been\n  completely rewritten to use both shared memory and message passing to cut down\n  the number of expensive memory copies to a minimum. This reduces the DSP load\n  overhead of audio processing even further.\n- Respect `$XDG_DATA_HOME` as a fallback when looking for yabridge's plugin host\n  binaries instead of hardcoding this to `~/.local/share/yabridge`. This matches\n  the existing behaviour in yabridgectl.\n- Optimized the management of VST3 plugin instances to reduce the overhead when\n  using many instances of a single VST3 plugin.\n- Slightly optimized the function call dispatch for VST2 plugins.\n- Prevented some more potential unnecessary memory operations during yabridge's\n  communication. The underlying serialization library was recreating some\n  objects even when this wasn't needed, which could result in unnecessary memory\n  allocations under certain circumstances. This is related to the similar issue\n  that was fixed in yabridge 3.3.0. A fix for this issue has also been\n  upstreamed to the library.\n\n### Fixed\n\n- Fixed mouse cursors disappearing when interacting with some plugin GUIs. This\n  often happened with _JUCE_ based plugins, such as Sonic Academy's _Kick 2_ and\n  _Anaglyph_. While this is technically a workaround for a bad interaction\n  between JUCE and Wine, it should make these plugins much more pleasant to use.\n- Fixed _Waves_ VST3 plugins not being able to initialize correctly. These\n  plugins would at runtime change their query interface to support more VST3\n  interfaces, including the mandatory edit controller interface. Yabridge now\n  requeries the supported interfaces at a later stage to work around this.\n- Fixed VST2 plugins in **Ardour** not receiving all transport information,\n  breaking host sync and LFOs in certain plugins. This was a regression from\n  yabridge 3.2.0.\n- Fixed input focus handling being broken **REAPER** after reopning a closed FX\n  window. Now moving the mouse cursor outside of the plugin's GUI will always\n  release input focus, even after closing the window.\n- Fixed _Insert Piz Here_'s _midiLooper_ crashing in **REAPER** when the plugin\n  tries to use REAPER's [host function\n  API](https://www.reaper.fm/sdk/vst/vst_ext.php#vst_host). This currently isn't\n  supported by yabridge. We now explicitly ignore these requests.\n- Worked around a rare thread safety issue in _MeldaProduction_ VST3 plugins\n  where the plugin would deadlock when the host asks for the editor's size while\n  plugin is also being initialized from the audio thread at the same time.\n- Fixed JUCE VST3 plugins like Tokyo Dawn Records' _SlickEQ M_ causing the host\n  to freeze when they send a parameter change from the audio thread using the\n  wrong VST3 API while the plugin is also trying to resize the window from the\n  GUI thread at the same time. This would happen in _SlickEQ M_ when reopning\n  the Smart Ops panel after having used it once. To fix this, yabridge's\n  Wine-side VST3 mutual recursion mechanism now only operates when invoked from\n  the GUI thread.\n- Fixed yabridge's logging seeking the STDERR stream to position 0 every time it\n  writes a log message. This would be noticeable when piping the host's STDERR\n  stream to a file and `YABRIDGE_DEBUG_LEVEL` wasn't set.\n- When printing the Wine version during initialization, the Wine process used\n  for this is now run under the same environment that the Wine plugin host\n  process will be run under. This means that if you use a custom `WINELOADER`\n  script to use different Wine versions depending on the prefix,\n  the `wine version:` line in the initialization message will now always match\n  the version of Wine the plugin is going to be run under.\n- Fixed the plugin-side watchdog timer that allows a yabridge plugin to\n  terminate when the Wine plugin host application fails to start treating zombie\n  processes as still running, active processes. This could cause plugins to hang\n  during scanning if the Wine process crashed in a very specific and likely\n  impossible way.\n- If a VST3 plugin returns a null pointer from `IEditController::createView()`,\n  then this will now be propagated correctly on the plugin side.\n- Fixed VST2 speaker arrangement configurations returned by the plugin not being\n  serialized correctly. Very few plugins and hosts seem to actually use these,\n  so it should not have caused any issues.\n\n### yabridgectl\n\n- Added support for setting up merged VST3 bundles when using a 32-bit version\n  of `libyabridge-vst3.so`.\n- Fixed the post-installation setup checks when the default Wine prefix over at\n  `~/.wine` was created with `WINEARCH=win32` set. This would otherwise result\n  in an `00cc:err:process:exec_process` error when running `yabridgectl sync`\n  because yabridgectl would try to run the 64-bit `yabridge-host.exe` in that\n  prefix. Yabridgectl now detects the architecture of the default prefix first\n  and then runs the proper Wine plugin host application for that prefix.\n- Copies of `libyabridge-vst2.so` and `libyabridge-vst3.so` are now reflinked\n  when supported by the file system. This speeds up the file coyping process\n  while also reducing the amount of disk space used for yabridge when using\n  Btrfs or XFS.\n- If pruning causes a directory to be empty, then the empty directory will now\n  also be removed. This avoids having your plugin directories littered with\n  empty directories.\n- Fixed incorrect new and total plugin counts. These counts are now always\n  correct, even when using multiple versions of the same VST3 plugin or when\n  multiple plugin directories overlap because of the use of symlinks.\n- Aside from pruning only unmanaged VST3 bundles in `~/.vst3/yabridge`, yabridge\n  will now also prompt you to prune leftover files from within a managed VST3\n  bundle. This makes it easy to switch from the 64-bit version of a plugin to\n  the 32-bit version, or from a 64-bit version of yabridge to the 32-bit\n  version. I don't know why you would want to do either of those things, but now\n  you can!\n- Yabridgectl now prints a more descriptive error message instead of panicing if\n  running `$WINELOADER --version` during yabridgectl's post-setup verification\n  checks does not result in any output. This is only relevant when using a\n  custom `WINELOADER` script that modifies Wine's output.\n\n## [3.3.1] - 2021-06-09\n\n### Added\n\n- Added thread names to all worker threads created by yabridge. This makes it\n  easier to debug and profile yabridge.\n\n### Fixed\n\n- Fixed the `IPlugView::canResize()` cache added in yabridge 3.2.0 sometimes not\n  being initialized properly, preventing host-driven resizes in certain\n  situations. This was mostly noticeable in **Ardour**.\n- Fixed mouse clicks in VST2 editors in **Tracktion Waveform** being offset\n  vertically by a small amount because of the way Waveform embeds VST2 editors.\n- Fixed _Shattered Glass Audio_ plugins crashing when opening the plugin editor\n  because those plugins don't initialize Microsoft COM before trying to use it.\n  We now always initialize the Microsoft COM library unconditionally, instead of\n  doing it only when a plugin fails to initialize without it.\n- Fixed incorrect version strings being reported by yabridge when building from\n  a tarball that has been extracted inside of an unrelated git repository. This\n  could happen when building the `yabridge` AUR package with certain AUR\n  helpers.\n- Fixed the log message for the cached `IPlugView::canResize()` VST3 function\n  calls implemented in yabridge 3.2.0.\n\n## [3.3.0] - 2021-06-03\n\n### Added\n\n- Added a [compatibility\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  redirect the Wine plugin host's STDOUT and STDERR output streams directly to a\n  file. Enabling this allows _ujam_ plugins and other plugins made with the\n  Gorilla Engine, such as the _LoopCloud_ plugins, to function correctly. Those\n  plugins crash with a seemingly unrelated error message when their output is\n  redirected to a pipe.\n- Added a small warning during initialization when `RLIMIT_RTTIME` is set to\n  some small value. This happens when using PipeWire with rtkit, and it can\n  cause crashes when loading plugins.\n\n### Changed\n\n- Added a timed cache for the `IPlugView::canResize()` VST3 function so the\n  result will be remembered during an active resize. This makes resizing VST3\n  plugin editor windows more responsive.\n- Added another cache for when the host asks a VST3 plugin whether it supports\n  processing 32-bit or 64-bit floating point audio. Some hosts, like **Bitwig\n  Studio**, call this function at the start of every processing cycle even\n  though the value won't ever change. Caching this can significantly reduce the\n  overhead of bridging VST3 plugins under those hosts.\n- Redesigned the VST3 audio socket handling to be able to reuse the process data\n  objects on both sides. This greatly reduces the overhead of our VST3 bridging\n  by getting rid of all potential memory allocations during audio processing.\n- VST2 audio processing also received the same optimizations. In a few places\n  yabridge would still reallocate heap data during every audio processing cycle.\n  We now make sure to always reuse all buffers and heap data used in the audio\n  processing process.\n- Considerably optimized parts of yabridge's communication infrastructure by\n  preventing unnecessary memory operations. As it turned out, the underlying\n  binary serialization library used by yabridge would always reinitialize the\n  type-safe unions yabridge uses to differentiate between single and double\n  precision floating point audio buffers in both VST2 and VST3 plugins, undoing\n  all of our efforts at reusing objects and preventing memory allocations in the\n  process. A fix for this issue has also been upstreamed to the library.\n- VST3 output audio buffers are now no longer zeroed out at the start of every\n  audio processing cycle. We've been doing this for VST3 plugins since the\n  introduction of VST3 bridging in yabridge 3.0.0, but we never did this for\n  VST2 plugins. Since not doing this has never caused any issues with VST2\n  plugins, it should also be safe to also skip this for VST3 plugins. This\n  further reduces the overhead of VST3 audio processing.\n- Optimized VST3 audio processing for instruments by preallocating small vectors\n  for event and parameter change queues.\n- VST2 MIDI event handling also received the same small vector optimization to\n  get rid of any last potential allocations during audio processing.\n- This small vector optimization has also been applied across yabridge's entire\n  communication and event handling architecture, meaning that most plugin\n  function calls and callbacks should no longer produce any allocations for both\n  VST2 and VST3 plugins.\n- Changed the way mutual recursion in VST3 plugins on the plugin side works to\n  counter any potential GUI related timing issues with VST3 plugins when using\n  multiple instances of a plugin.\n- Changed the way realtime scheduling is used on the Wine side to be less\n  aggressive, potentially reducing CPU usage when plugins are idle.\n- The deserialization part of yabridge's communication is now slightly faster by\n  skipping some unnecessary checks.\n- Log messages about VST3 query interfaces are now only printed when\n  `YABRIDGE_DEBUG_LEVEL` is set to 2 or higher, up from 1.\n\n### Fixed\n\n- Fixed a longstanding thread safety issue when hosting a lot of VST2 plugins in\n  a plugin group. This could cause plugins to crash or freeze when initializing\n  a new instance of a VST2 plugin in a plugin group while another VST2 plugin in\n  that same group is currently processing audio.\n- Fixed yabridge's Wine processes inheriting file descriptors in some\n  situations. This could cause **Ardour** and **Mixbus** to hang when reopening\n  the DAW after a crash. The watchdog timer added in yabridge 3.2.0 addressed\n  this issue partially, but it should now be completely fixed. This may also\n  prevent rare issues where the **JACK** server would hang after the host\n  crashes.\n- Fixed _DMG_ VST3 plugins freezing in **REAPER** when the plugin resizes itself\n  while the host passes channel context information to the plugin.\n- Also fixed _DMG_ VST3 plugins freezing in **REAPER** when restoring multiple\n  instances of the plugin at once while the FX window is open and the GUI is\n  visible.\n- Fixed the _PG-8X_ VST2 plugin freezing in **REAPER** when loading the plugin.\n- Fixed _Voxengo_ VST2 plugins freezing in **Renoise** when loading a project or\n  when otherwise restoring plugin state.\n- Fixed logging traces in the VST2 audio processing functions and the VST3 query\n  interfaces causing allocations even when `YABRIDGE_DEBUG_LEVEL` is not set to 2.\n- Fixed building on Wine 6.8 after some internal changes to Wine's `windows.h`\n  implementation.\n\n### yabridgectl\n\n- Improved the warning yabridgectl shows when it cannot run `yabridge-host.exe`\n  as part of the post-installation setup checks.\n- Fixed the reported number of new or updated plugins when yabridgectl manages\n  both a 32-bit and a 64-bit version of the same VST3 plugin.\n- Fixed text wrapping being broken after a dependency update earlier this year.\n\n## [3.2.0] - 2021-05-03\n\n### Added\n\n- During VST2 audio processing, yabridge will now prefetch the current transport\n  information and process level before sending the audio buffers over to the\n  Windows VST2 plugin. This lets us cache this information on the Wine side\n  during the audio processing call, which significantly reduces the overhead of\n  bridging VST2 plugins by avoiding one or more otherwise unavoidable back and\n  forth function calls between yabridge's native plugin and the Wine plugin\n  host. While beneficial to every VST2 plugin, this considerably reduces the\n  overhead of bridging _MeldaProduction_ VST2 plugins, and it has an even\n  greater impact on plugins like _SWAM Cello_ that request this information\n  repeatedly over the course of a single audio processing cycle. Previously\n  yabridge had a `cache_time_info` compatibility option to mitigate the\n  performance hit for those plugins, but this new caching behaviour supercedes\n  that option.\n- We now always force the CPU's flush-to-zero flag to be set when processing\n  audio. Most plugins will already do this by themselves, but plugins like _Kush\n  Audio REDDI_ and _Expressive E Noisy_ that don't will otherwise suffer from\n  extreme DSP usage increases when processing almost silent audio.\n- Added a new [compatibility\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) to hide\n  the name of the DAW you're using. This can be useful with plugins that have\n  undesirable or broken DAW-specific behaviour. See the [known\n  issues](https://github.com/robbert-vdh/yabridge#known-issues-and-fixes)\n  section of the readme for more information on when this may be useful.\n- Yabridge now uses a watchdog timer to prevent rare instances where Wine\n  processes would be left running after the native host has crashed or when it\n  got forcefully terminated. By design yabridge would always try to gracefully\n  shut down its Wine processes when native host has crashed and the sockets\n  become unavailable, but this did not always happen if the crash occurred\n  before the bridged plugin has finished initializing because of the way Unix\n  Domain Sockets work. In that specific situation the `yabridge-host.exe`\n  process would be left running indefinitely, and depending on your DAW that\n  might have also prevented you from actually restarting your DAW without\n  running `wineserver -k` first. To prevent any more dangling processes,\n  yabridge's Wine plugin hosts now have a watchdog timer that periodically\n  checks whether the original process that spawned the bridges is still running.\n  If it detects that the process is no longer alive, yabridge will close the\n  sockets and shut down the bridged plugin to prevent any more dangling\n  processes from sticking around.\n\n### Changed\n\n- Most common VST2 functions that don't have any arguments are now handled\n  explicilty. Yabridge could always automatically support most VST2 functions by\n  simply inspecting the function arguments and handling those accordingly. This\n  works practically everywhere, but _Plugsound Free_ by UVI would sometimes pass\n  unreadable function arguments to functions that weren't supposed to have any\n  arguments, causing yabridge to crash. Explicitly handling those functions\n  should prevent similar situations from happening in the future.\n- Yabridge will now try to bypass VST3 connection proxies if possible. Instead\n  of connecting two VST3 plugin objects directly, **Ardour** and **Mixbus**\n  place a connection proxy between the two plugin objects so that they can only\n  interact indirectly through the DAW. In the past yabridge has always honored\n  this by proxying the host's connection proxy, but this causes difficult\n  situations with plugins that actively communicate over these proxies from the\n  GUI thread, like the _FabFilter_ plugins. Whenever possible, yabridge will now\n  try to bypass the connection proxies and connect the two objects directly\n  instead, only falling back to proxying the proxies when that's not possible.\n- Compile times have been slightly lowered by compiling most of the Wine plugin\n  host into static libraries first.\n- When building the package from source, the targetted Wine version now gets\n  printed at configure-time. This can make it a bit easier to diagnose\n  Wine-related compilation issues.\n\n### Removed\n\n- The `cache_time_info` compatibility option has been removed since it's now\n  obsolete.\n- Removed a message that would show up when loading a VST3 plugin in Ardour,\n  warning about potential crashes due to Ardour not supporting multiple input\n  and output busses. These crashes have been resolved since yabridge 3.1.0.\n\n### Fixed\n\n- Fixed rare X11 errors that could occur when closing a plugin's editor. In\n  certain circumstances, closing a plugin editor would trigger an X11 error and\n  crash the Wine plugin host, and with that likely the entire DAW. This happened\n  because Wine would try to destroy the window after it had already been\n  destroyed. This could happen in Renoise and to a lesser degree in REAPER with\n  plugins that take a while to close their editors, such as the _iZotope Rx_\n  plugins. We now explicitly reparent the window to back the root window first\n  before deferring the window closing. This should fix the issue, while still\n  keeping editor closing nice and snappy.\n- Plugin group host processes now shut down by themselves if they don't get a\n  request to host any plugins within five seconds. This can happen when the DAW\n  gets killed right after starting the group host process but before the native\n  yabridge plugin requests the group host process to host a plugin for them.\n  Before this change, this would result in a `yabridge-group.exe` process\n  staying around indefinitely.\n- Prevented latency introducing VST3 from freezing **Ardour** and **Mixbus**\n  when loading the plugin. This stops _Neural DSP Darkglass_ from freezing when\n  used under those DAWs.\n- Fixed _FabFilter_ VST3 plugins freezing in **Ardour** and **Mixbus** when\n  trying to duplicate existing instances of the plugin after the editor GUI has\n  been opened.\n- Fixed VST3 plugins freezing in **Ardour** and **Mixbus** when the plugin tries\n  to automate a parameter while loading a preset.\n- Fixed _Voxengo_ VST3 plugins freezing in **Ardour** and **Mixbus** when\n  loading a project or when duplicating the plugin instances.\n- Fixed potential X11 errors resulting in assertion failures and crashes in\n  **Ardour** and **Mixbus** when those hosts hide (unmap) a plugin's editor\n  window.\n- Fixed saving and loading plugin state for VST3 _iZotope Rx_ plugins in\n  **Bitwig Studio**.\n- Fixed a regression from yabridge 3.1.0 where **REAPER** would freeze when opening\n  a VST3 plugin context menu.\n- Fixed a potential freezing issue in **REAPER** that could happen when a VST3\n  plugin resizes itself while sending parameter changes to the host when\n  REAPER's 'disable saving full plug-in state' option has not been disabled.\n- Fixed another potential freeze when loading a VST3 plugin preset while the\n  editor is open when the plugin tries to resize itself based on that new\n  preset.\n- Fixed a potential assertion failure when loading VST3 presets. This would\n  depend on the compiler settings and the version of `libstdc++` used to built\n  yabridge with.\n- Fixed _PSPaudioware InifniStrip_ failing to initialize. The plugin expects the\n  host to always be using Microsoft COM, and it doesn't try to initialize it by\n  itself. InfiniStrip loads as expected now.\n- Fixed _Native Instruments' FM7_ crashing when processing MIDI. In order to fix\n  this, MIDI events are now deallocated later then when they normally would have\n  to be.\n- Fixed extreme DSP usage increases in _Kush Audio REDDI_ and _Expressive E\n  Noisy_ due to denormals.\n- Fixed the VST3 version of _W. A. Production ImPerfect_ crashing during audio\n  setup.\n- Fixed _UVI Plugsound Free_ crashing during initialization.\n- Fixed the Wine version detection when using a custom `WINELOADER`.\n- Fixed incorrect logging output for cached VST3 function calls.\n- Because of the new VST2 transport information prefetching, the excessive DSP\n  usage in _SWAM Cello_ has now been fixed without requiring any manual\n  compatibility options.\n\n## [3.1.0] - 2021-04-15\n\n### Added\n\n- Added support for using 32-bit Windows VST3 plugins in 64-bit Linux VST3\n  hosts. This had previously been disabled because of a hard to track down\n  corruption issue.\n- Added an\n  [option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  prefer the 32-bit version of a VST3 plugin over the 64-bit version if both are\n  installed. This likely won't be necessary, but because of the way VST3 bundles\n  work there's no clean way to separate these. So when both are installed, the\n  64-bit version gets used by default.\n\n### Fixed\n\n- Worked around a regression in Wine 6.5 that would prevent yabridge from\n  shutting down ([wine bug\n  #50869](https://bugs.winehq.org/show_bug.cgi?id=50869)). With Wine 6.5\n  terminating a Wine process no longer terminates its threads, which would cause\n  yabridge's plugin and host components to wait for each other to shut down.\n- Fixed preset/state loading in both the VST2 and VST3 versions of _Algonaut\n  Atlas 2.0_ by loading and saving plugin state from the main GUI thread.\n- Added a workaround for a bug present in every current _Bluecat Audio_ VST3\n  plugin. Those plugins would otherwise crash yabridge because they didn't\n  directly expose a core VST3 interface through their query interface.\n- Fixed a multithreading related memory error in the VST3 audio processor socket\n  management system.\n\n### yabridgectl\n\n- Added an indexing blacklist, accessible through `yabridgectl blacklist`. You\n  most likely won't ever have to use this, but this lets you skip over files and\n  directories in yabridgectl's indexing process.\n- Minor spelling fixes.\n\n### Packaging notes\n\n- The Meson wrap dependencies for `bitsery`, `function2` and `tomlplusplus` are\n  now defined using `dependency()` with a subproject fallback instead of using\n  `subproject()` directly. This should make it easier to package.\n- The VST3 SDK Meson wrap dependency and the patches in\n  `tools/patch-vst3-sdk.sh` are now based on version 3.7.2 of the SDK.\n- The VST3 SDK Meson wrap now uses a tag (`v3.7.2_build_28-patched`) instead of\n  a commit hash.\n\n## [3.0.2] - 2021-03-07\n\n### Fixed\n\n- Fix bus information queries being performed for the wrong bus index. This\n  fixes VST3 sidechaining in _Renoise_, and prevents a number of VST3 plugins\n  with a sidechain input from causing _Ardour_ and _Mixbus_ to freeze or crash.\n\n## [3.0.1] - 2021-02-26\n\n### Changed\n\n- Wine 6.2 introduced a\n  [regression](https://bugs.winehq.org/show_bug.cgi?id=50670) that would cause\n  compile errors because some parts of Wine's headers were no longer valid C++.\n  Since we do not need the affecting functionality, yabridge now includes a\n  small workaround to make sure that the affected code never gets compiled. This\n  has been fixed for Wine 6.3.\n\n### Fixed\n\n- Added support for a new ReaSurround related VST2.4 extension that **REAPER**\n  recently started using. This would otherwise cause certain plugins to crash\n  under REAPER.\n- Fixed a regression from yabridge 3.0.0 where log output would no longer\n  include timestamps.\n\n### yabridgectl\n\n- Changed the wording and colors in `yabridgectl status` for plugins that have\n  not yet been setup to look less dramatic and hopefully cause less confusion.\n- Aside from the installation status, `yabridgectl status` now also shows a\n  plugin's type and architecture. This is color coded to make it easier to\n  visually parse the output.\n- Plugin paths printed during `yabridgectl status` and\n  `yabridgectl sync --verbose` are now always shown relative to the plugin\n  directory instead of the same path prefix being repeated for every plugin.\n\n## [3.0.0] - 2021-02-14\n\n### Added\n\n- Yabridge 3.0 introduces the first ever true Wine VST3 bridge, allowing you to\n  use Windows VST3 plugins in Linux VST3 hosts with full VST 3.7.1\n  compatibility. Simply tell yabridgectl to look for plugins in\n  `$HOME/.wine/drive_c/Program Files/Common Files/VST3`, run `yabridgectl sync`,\n  and your VST3 compatible DAW will pick up the new plugins in\n  `~/.vst3/yabridge` automatically. Even though this feature has been tested\n  extensively with a variety of VST3 plugins and hosts, there's still a\n  substantial part of the VST 3.7.1 specification that isn't used by any of the\n  hosts or plugins we could get our hands on, so please let me know if you run\n  into any weird behaviour! There's a list in the readme with all of the tested\n  hosts and their current VST3 compatibility status.\n- Added an\n  [option](https://github.com/robbert-vdh/yabridge#compatibility-options) to use\n  Wine's XEmbed implementation instead of yabridge's normal window embedding\n  method. This can help reduce flickering when dragging the window around with\n  certain window managers. Some plugins will have redrawing issues when using\n  XEmbed or the editor might not show up at all, so your mileage may very much\n  vary.\n- Added a [compatibilty\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  forcefully enable drag-and-drop support under _REAPER_. REAPER's FX window\n  reports that it supports drag-and-drop itself, which makes it impossible to\n  drag files onto a plugin editor embedded there. This option strips the\n  drag-and-drop support from the FX window, thus allowing you to drag files onto\n  plugin editors again.\n- Added a frame rate\n  [option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  change the rate at which events are being handled. This usually also controls\n  the refresh rate of a plugin's editor GUI. The default 60 updates per second\n  may be too high if your computer's cannot keep up, or if you're using a host\n  that never closes the editor such as _Ardour_.\n- Added a [compatibility\n  option](https://github.com/robbert-vdh/yabridge#compatibility-options) to\n  disable HiDPI scaling for VST3 plugins. At the moment Wine does not have\n  proper fractional HiDPI support, so some plugins may not scale their\n  interfaces correctly when the host tells those plugins to scale their GUIs. In\n  some cases setting the font DPI in `winecfg`'s graphics tab to 192 will also\n  cause the GUIs to scale correctly at 200%.\n- Added the `with-vst3` compile time option to control whether yabridge should\n  be built with VST3 support. This is enabled by default.\n\n### Changed\n\n- `libyabridge.so` is now called `libyabridge-vst2.so`. If you're using\n  yabridgectl then nothing changes here. **To avoid any potential confusion in\n  the future, please remove the old `libyabridge.so` file before upgrading.**\n- The release archives uploaded on GitHub are now repackaged to include\n  yabridgectl for your convenience.\n- Window closing is now deferred. This means that when closing the editor\n  window, the host no longer has to wait for Wine to fully close the window.\n  Most hosts already do something similar themselves, so this may not always\n  make a difference in responsiveness.\n- Slightly increased responsiveness when resizing plugin GUIs by preventing\n  unnecessary blitting. This also reduces flickering with plugins that don't do\n  double buffering.\n- VST2 editor idle events are now handled slightly differently. This should\n  result in even more responsive GUIs for VST2 plugins.\n- Win32 and X11 events in the Wine plugin host are now handled with lower\n  scheduling priority than other tasks. This might help get rid of potential DSP\n  latency spikes when having the editor open while the plugin is doing expensive\n  GUI operations.\n- Opening and closing plugin editors is now also no longer done with realtime\n  priority. This should get rid of any latency spikes during those operations,\n  as this could otherwise steal resources away from the threads that are\n  processing audio.\n- The way realtime priorities assigned has been overhauled:\n\n  - Realtime scheduling on the plugin side is now a more granular. Instead of\n    setting everything to use `SCHED_FIFO`, only the spawned threads will be\n    configured to use realtime scheduling. This prevents changing the scheduling\n    policy of your host's GUI thread if your host instantiates plugins from its\n    GUI thread like _REAPER_ does.\n  - Relaying messages printed by the plugin and Wine is now done without\n    realtime priority, as this could in theory cause issues with plugins that\n    produce a steady stream of fixmes or other output.\n  - The realtime scheduling priorities of all audio threads in the Wine plugin\n    host are now periodically synchronized with those of the host's audio\n    threads.\n\n- When using `yabridge.toml` config files, the matched section or glob pattern\n  is now also printed next to the path to the file to make it a bit easier to\n  see where settings are being set from.\n- The architecture document has been updated for the VST3 support and it has\n  been rewritten to talk more about the more interesting bits of yabridge's\n  implementation.\n- Part of the build process has been changed to account for [this Wine\n  bug](https://bugs.winehq.org/show_bug.cgi?id=49138). Building with Wine 5.7\n  and 5.8 required a change for `yabridge-host.exe` to continue working, but\n  that change now also breaks builds using Wine 6.0 and up. The build process\n  now detects which version of Wine is used to build with, and it will then\n  apply the change conditionally based on that to be able to support building\n  with both older and newer versions of Wine. This does mean that when you\n  switch to an older Wine version, you might need to run\n  `meson setup build --reconfigure` before rebuilding to make sure that these\n  changes take effect.\n- `yabridge-host.exe` will no longer remove the socket directories if they're\n  outside of a temporary directory. This could otherwise cause a very unpleasant\n  surprise if someone were to pass random arguments to it when for instance\n  trying to write a wrapper around `yabridge-host.exe`.\n- When `YABRIDGE_DEBUG_LEVEL` is set to 2 or higher and a plugin asks the host\n  for the current position in the song, yabridge will now also print the current\n  tempo to help debugging host bugs.\n\n### Fixed\n\n- VST2 plugin editor resizing in **REAPER** would not cause the FX window to be\n  resized like it would in every other host. This has now been fixed.\n- The function for suspending and resuming audio, `effMainsChanged()`, is now\n  always executed from the GUI thread. This fixes **EZdrummer** not producing\n  any sound because the plugin makes the incorrect assumption that\n  `effMainsChanged()` is always called from the GUI thread.\n- Event handling is now temporarily disabled while plugins are in a partially\n  initialized state. The VST2 versions of **T-RackS 5** would have a chance to\n  hang indefinitely if the event loop was being run before those plugins were\n  fully initialized because of a race condition within those plugins. This issue\n  was only noticeable when using plugin groups.\n- Fixed a potential issue where an interaction between _Bitwig Studio_ and\n  yabridge's input focus grabbing method could cause delayed mouse events when\n  clicking on a plugin's GUI in Bitwig. This issue has not been reported for\n  yabridge 2.2.1 and below, but it could in theory also affect older versions of\n  yabridge.\n\n### yabridgectl\n\n- Updated for the changes in yabridge 3.0. Yabridgectl now allows you to set up\n  yabridge for VST3 plugins. Since `libyabridge.so` got renamed to\n  `libyabridge-vst2.so` in this version, it's advised to carefully remove the\n  old `libyabridge.so` and `yabridgectl` files before upgrading to avoid\n  confusing situations.\n- Added the `yabridgectl set --path-auto` option to revert back to automatically\n  locating yabridge's files after manually setting a path with\n  `yabridgectl set --path=<...>`.\n- Added the `yabridgectl set --no-verify={true,false}` option to permanently\n  disable post-installation setup checks. You can still directly pass the\n  `--no-verify` argument to `yabridgectl sync` to disable these checks for only\n  a single invocation.\n\n## [2.2.1] - 2020-12-12\n\n### Fixed\n\n- Fixed some plugins, notably the _Spitfire Audio_ plugins, from causing a\n  deadlock when using plugin groups in _REAPER_. Even though this did not seem\n  to cause any issues in other hosts, the race condition that caused this issue\n  could also occur elsewhere.\n\n## [2.2.0] - 2020-12-11\n\n### Added\n\n- Added an option to cache the time and tempo info returned by the host for the\n  current processing cycle. This would normally not be needed since plugins\n  should ask the host for this information only once per audio callback, but a\n  bug in _SWAM Cello_ causes this to happen repeatedly for every sample,\n  resutling in very bad performance. See the [compatibility\n  options](https://github.com/robbert-vdh/yabridge#compatibility-options)\n  section of the readme for more information on how to enable this.\n\n### Changed\n\n- When `YABRIDGE_DEBUG_LEVEL` is set to 2 or higher and a plugin asks the host\n  for the current position in the song, yabridge will now print that position in\n  quarter notes and samples as part of the debug output.\n- `YABRIDGE_DEBUG_LEVEL` 2 will now also cause all audio processing callbacks to\n  be logged. This makes recognizing misbheaving plugins a bit easier.\n- Symbols in all `libyabridge.so` and all Winelib `.so` files are now hidden by\n  default.\n\n### Fixed\n\n- Fixed an issue where in certain situations Wine processes were left running\n  after the host got forcefully terminated before it got a chance to tell the\n  plugin to shut down. This could happen when using Kontakt in Bitwig, as Bitwig\n  sets a limit on the amount of time a plugin is allowed to spend closing when\n  you close Bitwig, and Kontakt can take a while to shut down.\n- Fixed a potential crash or freeze when removing a lot of plugins from a plugin\n  group at exactly the same time.\n\n## [2.1.0] - 2020-11-20\n\n### Added\n\n- Added a separate\n  [yabridgectl](https://aur.archlinux.org/packages/yabridgectl/) AUR package for\n  Arch and Manjaro. The original idea was that yabridgectl would not require a\n  lot of changes and that a single\n  [yabridgectl-git](https://aur.archlinux.org/packages/yabridgectl-git/) package\n  would be sufficient, but sometimes changes to yabridgectl will be incompatible\n  with the current release so it's nicer to also have a separate regular\n  package.\n\n### Changed\n\n- Yabridge will now always search for `yabridge-host.exe` in\n  `~/.local/share/yabridge` even if that directory is not in the search path.\n  This should make setup easier, since you no longer have to modify any\n  environment variables when installing yabridge to the default location.\n  Because of this, the symlink-based installation method does not have a lot of\n  advantages over the copy-based method anymore other than the fact that you\n  can't forget to rerun `yabridgectl sync` after an upgrade, so most references\n  to it have been removed from the readme.\n\n### Fixed\n\n- Fixed an issue where _Renoise_ would show an error message when trying to load\n  a plugin in the mixer.\n\n## [2.0.2] - 2020-11-14\n\n### Fixed\n\n- Added a workaround for a bug in _Ardour 6.3_ which would cause several plugins\n  including MT Power Drumkit to crash when opening the editor.\n- Fixed linking error in debug build related to the parallel STL.\n\n## [2.0.1] - 2020-11-08\n\n### Fixed\n\n- Fixed a regression where `yabridge-host.exe` would not exit on its own after\n  the host crashes or gets terminated without being able to properly close all\n  plugins.\n\n## [2.0.0] - 2020-11-08\n\n### Added\n\n- The way communication works in yabridge has been completely redesigned to be\n  fully concurrent and to use additional threads as necessary. This was needed\n  to allow yabridge to handle nested and mutually recursive function calls as\n  well as several other edge cases a synchronous non-concurrent implementation\n  would fail. What this boils down to is that yabridge became even faster, more\n  responsive, and can now handle many scenarios that would previously require\n  workarounds. The most noticeable effects of these changes are as follows:\n\n  - The `hack_reaper_update_display` workaround for _REAPER_ and _Renoise_ to\n    prevent certain plugins from freezing is no longer needed and has been\n    removed.\n  - Opening and scanning plugins becomes much faster in several VST hosts\n    because more work can be done simultaneously.\n  - Certain plugins, such as Kontakt, no longer interrupt audio playback in\n    Bitwig while their editor was being opened.\n  - Any loading issues in Bitwig Studio 3.3 beta 1 are no longer present.\n  - Hosting a yabridged plugin inside of the VST2 version of Carla now works as\n    expected.\n  - And probably many more improvements.\n\n  Aside from these more noticeable changes, this has also made it possible to\n  remove a lot of older checks and behaviour that existed solely to work around\n  the limitations introduced by the old event handling system. I have been\n  testing this extensively to make sure that these changes don't not introduce\n  any regressions, but please let me know if this did break anything for you.\n\n### Changed\n\n- The way the Wine process handles threading has also been completely reworked\n  as part of the communication rework.\n- GUI updates for plugins that don't use hardware acceleration are now run at 60\n  Hz instead of 30 Hz. This was kept at 30 updates per second because that\n  seemed to be a typical rate for Windows VST hosts and because function calls\n  could not be processed while the GUI was being updated, but since that\n  limitation now no longer exists we can safely bump this up.\n- Sockets are now created in `$XDG_RUNTIME_DIR` (which is `/run/user/<user_id>`\n  on most systems) instead of `/tmp` to avoid polluting `/tmp`.\n\n### Removed\n\n- The now obsolete `hack_reaper_update_display` option has been removed.\n- The previously deprecated `use-bitbridge` and `use-winedbg` compilation\n  options have been removed. Please use `with-bitbridge` and `with-winedbg`\n  instead.\n\n### Fixed\n\n- Fixed a very long standing issue with plugins groups where unloading a plugin\n  could cause a crash. Now you can host over a hundred plugins in a single\n  process without any issues.\n- Fixed another edge case with plugin groups when simultaneously opening\n  multiple plugins within the same group. The fallover behaviour that would\n  cause all of those plugins to eventually connect to a single group host\n  process would sometimes not work correctly because the plugins were being\n  terminated prematurely.\n- Fixed the implementation of the accumulative `process()` function. As far as\n  I'm aware no VST hosts made in the last few decades even use this, but it just\n  feels wrong to have an incorrect implementation as part of yabridge.\n\n## [1.7.1] - 2020-10-23\n\n### Fixed\n\n- Fixed a regression where the `editor_double_embed` option would cause X11\n  errors and crash yabridge.\n- Fixed a regression where certain fake dropdown menus such as those used in the\n  Tokyo Dawn Records plugins would close immediately when hovering over them.\n- Fixed an issue where plugins hosted within a plugin group would not shut down\n  properly in certain situations. This would cause the VST host to hang when\n  removing such a plugin.\n\n### yabridgectl\n\n- When running `yabridgectl sync`, existing .so files will no longer be\n  recreated unless necessary. This prevents hosts from rescanning all plugins\n  after setting up a single new plugin through yabridgectl. Running\n  `yabridgectl sync` after updating yabridge will still recreate all existing\n  .so files as usual.\n- Added a `--force` option to `yabridgectl sync` to always recreate all existing\n  .so files like in previous versions.\n- Fixed a regression from yabridgectl 1.6.1 that prevented you from removing\n  directories that no longer exist using `yabridgectl rm`.\n\n## [1.7.0] - 2020-10-13\n\n### Changed\n\n- The way keyboard input works has been completely rewritten to be more reliable\n  in certain hosts and to provide a more integrated experience. Hovering over\n  the plugin's editor while the window provided by the host is active will now\n  immediately grab keyboard focus, and yabridge will return input focus to the\n  host's window when moving the mouse outside of the plugin's editor when the\n  window is still active. This should fix some instances where keyboard input\n  was not working in hosts with more complex editor windows like _REAPER_ and\n  _Ardour_, and it also allows things like the comment field in REAPER's FX\n  window to still function.\n\n  A consequence of this change is that pressing Space in Bitwig Studio 3.2 will\n  now play or pause playback as intended, but this does mean that it can be\n  impossible to type the space character in text boxes inside of a plugin editor\n  window. Please let me know if this causes any issues for you.\n\n- Both unrecognized and invalid options are now printed on started to make\n  debugging `yabridge.toml` files easier.\n\n- Added a note to the message stating that libSwell GUI support has been\n  disabled to clarify that this is expected behaviour when using REAPER. The\n  message now also contains a suggestion to enable the\n  `hack_reaper_update_display` option when it is not already enabled.\n\n### Fixed\n\n- Added a workaround for reparenting issues with the plugin editor GUI on a\n  [specific i3 setup](https://github.com/robbert-vdh/yabridge/issues/40).\n\n### Documentation\n\n- The documentation on `yabridge.toml` files and the available options has been\n  rewritten in an effort to make it easier to comprehend.\n\n## [1.6.1] - 2020-09-28\n\n### Fixed\n\n- Fixed a potential crash that could happen if the host would unload a plugin\n  immediately after its initialization. This issue affected the plugin scanning\n  in _REAPER_.\n- Fixed parsing order of `yabridge.toml`. Sections were not always read from top\n  to bottom like they should be, which could cause incorrect and unexpected\n  setting overrides.\n- Fixed an initialization error when using plugin groups for plugins that are\n  installed outside of a Wine prefix.\n\n### yabridgectl\n\n- Relative paths now work when adding plugin directories or when setting the\n  path to yabridge's files.\n- Also search `/usr/local/lib` for `libyabridge.so` when no manual path has been\n  specified. Note that manually copying yabridge's files to `/usr` is still not\n  recommended.\n\n## [1.6.0] - 2020-09-17\n\n### Added\n\n- Added support for double precision audio processing. This is not very widely\n  used, but some plugins running under REAPER make use of this. Without this\n  those plugins would cause REAPER's audio engine to crash.\n\n### Fixed\n\n- Increased the limit for the maximum number of audio channels. This could cause\n  issues in Renoise when using a lot of output channels.\n\n## [1.5.0] - 2020-08-21\n\n### Added\n\n- Added an option to work around timing issues in _REAPER_ and _Renoise_ where\n  the hosts can freeze when plugins call a certain function while the host\n  doesn't expect it, see\n  [#29](https://github.com/robbert-vdh/yabridge/issues/29) and\n  [#32](https://github.com/robbert-vdh/yabridge/issues/32). The\n  [readme](https://github.com/robbert-vdh/yabridge#known-issues-and-fixes)\n  contains instructions on how to enable this.\n\n### Changed\n\n- Don't print calls to `effIdle()` when `YABRIDGE_DEBUG_LEVEL` is set to 1.\n\n### Fixed\n\n- Fix Waves plugins from freezing the plugin process by preventing them from\n  causing an infinite message loop.\n\n## [1.4.1] - 2020-07-27\n\n### yabridgectl\n\n- Fixed regression caused by\n  [alexcrichton/toml-rs#256](https://github.com/alexcrichton/toml-rs/issues/256)\n  where the configuration file failed to parse after running `yabridgectl sync`.\n  If you have already run `yabridgectl sync` using yabridgectl 1.4.0, then\n  you'll have to manually remove the `[last_known_config]` section from\n  `~/.config/yabridgectl/config.toml`.\n- Fixed issue with overwriting broken symlinks during `yabridgectl sync`.\n\n## [1.4.0] - 2020-07-26\n\n### Added\n\n- Added an alternative editor hosting mode that adds yet another layer of\n  embedding. Right now the only known plugins that may need this are\n  _PSPaudioware_ plugins with expandable GUIs such as E27. The behaviour can be\n  enabled on a per-plugin basis in the plugin configuration. See the\n  [readme](https://github.com/robbert-vdh/yabridge#compatibility-options)\n  for more details.\n\n### Changed\n\n- Both parts of yabridge will now run with realtime priority if available. This\n  can significantly reduce overall latency and spikes. Wine itself will still\n  run with a normal scheduling policy by default, since running wineserver with\n  realtime priority can actually increase the audio processing latency although\n  it does reduce the amount of latency spikes even further. You can verify that\n  yabridge is running with realtime priority by looking for the `realtime:` line\n  in the initialization message. I have not found any downsides to this approach\n  in my testing, but please let me know if this does end up causing any issues.\n\n### Fixed\n\n- Fixed rare plugin location detection issue on Debian based distros related to\n  the plugin and host detection fix in yabridge 1.2.0.\n\n### yabridgectl\n\n- Added a check to `yabridgectl sync` that verifies that the currently installed\n  versions of Wine and yabridge are compatible. This check will only be repeated\n  after updating either Wine or yabridge.\n\n- Added a `--no-verify` option to `yabridgectl sync` to skip the\n  post-installation setup checks. This option will skip both the login shell\n  search path check for the copy-based installation method as well as the new\n  Wine compatibility check.\n\n## [1.3.0] - 2020-07-17\n\n### Added\n\n- By somewhat popular demand yabridge now comes with yabridgectl, a utility that\n  can automatically set up and manage yabridge for you. It also performs some\n  basic checks to ensure that everything has been set up correctly so you can\n  get up and running faster. Yabridgectl can be downloaded separately from the\n  GitHub releases page and its use is completely optional, so you don't have to\n  use it if you don't want to. Check out the\n  [readme](https://github.com/robbert-vdh/yabridge/tree/master/tools/yabridgectl)\n  for more information on how it works.\n\n### Deprecated\n\n- The `use-bitbridge` and `use-winedbg` options have been deprecated in favour\n  of the new `with-bitbridge` and `with-winedbg` options. The old options will\n  continue to work until they are removed in yabridge 2.0.0.\n\n## [1.2.1] - 2020-06-20\n\n### Changed\n\n- When building from source, only statically link Boost when the\n  `with-static-boost` option is enabled.\n- The `use-bitbridge` and `use-winedbg` options have been replaced by\n  `with-bitbridge` and `with-winedbg` for consistency's sake. The old options\n  will be marked as deprecated in the next minor release.\n\n### Fixed\n\n- Fixed memory error that would cause crashing on playback with some buffer\n  sizes in Mixbus6.\n- Opening a plugin would override the Wine prefix for all subsequent plugins\n  opened from within the same process. This prevented the use of multiple Wine\n  prefixes in hosts that do not sandbox their plugins, such as Ardour.\n- Manual Wine prefix overides through the `WINEPREFIX` environment were not\n  reflected in the output shown on startup.\n- Fixed plugin group socket name generation. This would have prevented plugin\n  groups with the same name from being used simultaneously in different Wine\n  prefixes.\n- Distinguish between active processes and zombies when checking whether a group\n  host process is still running during initialization.\n\n## [1.2.0] - 2020-05-29\n\n### Added\n\n- Added the ability to host multiple plugins within a single Wine process\n  through _plugin groups_. A plugin group is a user-defined set of plugins that\n  will be hosted together in the same Wine process. This allows multiple\n  instances of plugins to share data and communicate with each other. Examples\n  of plugins that can benefit from this are FabFilter Pro-Q 3, MMultiAnalyzer,\n  and the iZotope mixing plugins. See the readme for instructions on how to set\n  this up.\n\n### Changed\n\n- Changed architecture to use one fewer socket.\n- GUI events are now always handled on a steady timer rather than being\n  interleaved as part of the event loop. This change was made to unify the event\n  handling logic for individually hosted plugins and plugin groups. It should\n  not have any noticeable effects, but please let me know if this does cause\n  unwanted behavior.\n\n### Fixed\n\n- Steal keyboard focus when clicking on the plugin editor window to account for\n  the new keyboard focus behavior in _Bitwig Studio 3.2_.\n- Fixed large amount of empty lines in the log file when the Wine process closes\n  unexpectedly.\n- Made the plugin and host detection slightly more robust.\n\n## [1.1.4] - 2020-05-12\n\n### Fixed\n\n- Fixed a static linking issue with the 32-bit build for Ubuntu 18.04.\n\n## [1.1.3] - 2020-05-12\n\n### Fixed\n\n- Added a workaround for the compilation issues under Wine 5.7 and above as\n  caused by [Wine bug #49138](https://bugs.winehq.org/show_bug.cgi?id=49138).\n- Added a workaround for plugins that improperly defer part of their\n  initialization process without telling the host. This fixes startup behavior\n  for the Roland Cloud plugins.\n- Added a workaround for a rare race condition in certain plugins caused by\n  incorrect assumptions in plugin's editor handling. Fixes the editor for\n  Superior Drummer 3 and the Roland Cloud synths in Bitwig Studio.\n- Fixed potential issue with plugins not returning their editor size.\n\n## [1.1.2] - 2020-05-09\n\n### Fixed\n\n- Fixed an issue where plugin removal could cause Ardour and Mixbus to crash.\n\n## [1.1.1] - 2020-05-09\n\n### Changed\n\n- Changed installation recommendations to only install using symlinks with hosts\n  that support individually sandboxed plugins.\n- Respect `YABRIDGE_DEBUG_FILE` when printing initialization errors.\n\n### Fixed\n\n- Stop waiting for the Wine VST host process on startup if the process has\n  crashed or if Wine was not able to start.\n\n## [1.1.0] - 2020-05-07\n\n### Added\n\n- Added support for plugins that send MIDI events back to the host. This allows\n  plugins such as Cthulhu and Scaler to output notes and CC for another plugin\n  to work with.\n- Added support for querying and setting detailed information about speaker\n  configurations for use in advanced surround setups. This indirectly allows\n  yabridge to work under _Renoise_.\n- Added automated development builds for yabridge, available by clicking on the\n  'Automated builds' badge in the project readme.\n\n### Changed\n\n- Changed the plugin detection mechanism to support yet another way of\n  symlinking plugins. Now you can use a symlink to a copy of `libyabridge.so`\n  that's installed for a plugin in another directory. This is not recommended\n  though.\n- Changed Wine prefix detection to be relative to the plugin's `.dll` file,\n  rather than the loaded `.so` file.\n- Increased the maximum number of audio channels from 32 to 256.\n- Clarified the error that appears when we're unable to load the `.dll`.\n- Yabridge will now print the used version of Wine during startup. This can be\n  useful for diagnosing startup problems.\n\n### Fixed\n\n- Fixed plugins failing to load on certain versions of _Ubuntu_ because of\n  paths starting with two forward slashes.\n- Redirect the output from the Wine host process earlier in the startup process.\n  Otherwise errors printed during startup won't be visible, making it very hard\n  to diagnose problems.\n\n## [1.0.0] - 2020-05-03\n\n### Added\n\n- This changelog file to track keep track of changes since yabridge's 1.0\n  release.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 54.453125,
          "content": "# yabridge\n\n[![Automated builds](https://github.com/robbert-vdh/yabridge/workflows/Automated%20builds/badge.svg?branch=master&event=push)](https://github.com/robbert-vdh/yabridge/actions?query=workflow%3A%22Automated+builds%22+branch%3Amaster)\n[![Discord](https://img.shields.io/discord/786993304197267527.svg?label=Discord&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/pyNeweqadf)\n\nYet Another way to use Windows audio plugins on Linux. Yabridge seamlessly\nsupports using both 32-bit and 64-bit Windows VST2, VST3, and CLAP plugins in\n64-bit Linux plugin hosts as if they were native plugins, with optional support\nfor [plugin groups](#plugin-groups) to enable inter-plugin communication for\nVST2 plugins and quick startup times. Its modern concurrent architecture and\nfocus on transparency allows yabridge to be both fast and highly compatible,\nwhile also staying easy to debug and maintain.\n\n![yabridge screenshot](https://raw.githubusercontent.com/robbert-vdh/yabridge/master/screenshot.png)\n\n### Table of contents\n\n- [Tested with](#tested-with)\n- [**Usage**](#usage)\n  - [Bitbridge](#bitbridge)\n  - [Wine prefixes](#wine-prefixes)\n  - [Drag-and-drop](#drag-and-drop)\n  - [Input focus grabbing](#input-focus-grabbing)\n  - [Downgrading Wine](#downgrading-wine)\n  - [Installing a development build](#installing-a-development-build)\n- [Configuration](#configuration)\n  - [Plugin groups](#plugin-groups)\n  - [Compatibility options](#compatibility-options)\n  - [Example](#example)\n- [**Known issues and fixes**](#known-issues-and-fixes)\n- [**Troubleshooting common issues**](#troubleshooting-common-issues)\n- [**Performance tuning**](#performance-tuning)\n  - [Environment configuration](#environment-configuration)\n- [Building](#building)\n  - [32-bit bitbridge](#32-bit-bitbridge)\n  - [32-bit libraries](#32-bit-libraries)\n- [Debugging](#debugging)\n  - [Attaching a debugger](#attaching-a-debugger)\n\n## Tested with\n\nYabridge has been tested under the following hosts using Wine Staging 9.21.\n**See [#368](https://github.com/robbert-vdh/yabridge/issues/382) for information about GUI problems with Wine 9.22.**.\n\n| Host                   | VST2               | VST3                                                        | CLAP                                                 |\n| ---------------------- | ------------------ | ----------------------------------------------------------- | ---------------------------------------------------- |\n| Bitwig Studio 5.3 beta | :heavy_check_mark: | :heavy_check_mark:                                          | :heavy_check_mark:                                   |\n| REAPER 7.12            | :heavy_check_mark: | :heavy_check_mark:                                          | :heavy_check_mark:                                   |\n| Carla 2.5.5            | :heavy_check_mark: | :heavy_check_mark:                                          | Does not support CLAP                                |\n| Qtractor 0.9.29        | :heavy_check_mark: | :warning: VST3 editor windows may not have the correct size | :warning: Qtractor may not support every CLAP plugin |\n| Renoise 3.4.3          | :heavy_check_mark: | :heavy_check_mark:                                          | Does not support CLAP                                |\n| Waveform 12.1.3        | :heavy_check_mark: | :heavy_check_mark:                                          | Does not support CLAP                                |\n| Ardour 8.1             | :heavy_check_mark: | :warning: Some plugins may cause Ardour 7.3-8.1 to freeze   | Does not support CLAP                                |\n| Mixbus 7.0.140         | :heavy_check_mark: | :heavy_check_mark:                                          | Does not support CLAP                                |\n\nPlease let me know if there are any issues with other hosts.\n\n<sup>\n  *Bitwig Studio's Flatpak version will not work with yabridge. You'll need to use the .deb found on the release notes page instead.\n</sup>\n\n## Usage\n\n0. First of all, yabridge requires a recent-ish version of Wine (Staging). Users\n   of Debian, Ubuntu, Linux Mint and Pop!\\_OS should install Wine Staging from\n   the [WineHQ repositories](https://wiki.winehq.org/Download) as the Wine\n   versions provided by those distro's repositories may be too old to be used\n   with yabridge. On other distros you should be able to just install\n   `wine-staging` using your distro's package manager.\n\n   For a general overview on how to use Wine to install Windows applications,\n   check out Wine's [user\n   guide](https://wiki.winehq.org/Wine_User%27s_Guide#Using_Wine).\n\n1. Depending on your distro you can install yabridge and its yabridgectl\n   companion utility through your distro's package manager or by using\n   a binary archive from the GitHub releases page. Keep in mind that the distro\n   packages mentioned below may not always be up to date, and some may also not\n   be compiled with support for 32-bit plugins.\n\n   <a href=\"https://repology.org/project/yabridge/versions\" target=\"_blank\" rel=\"noopener\" title=\"Packaging status\"><img align=\"right\" src=\"https://repology.org/badge/vertical-allrepos/yabridge.svg\"></a>\n\n   - On **Arch** and **Manjaro**, yabridge and yabridgectl can be installed from\n     the official repositories using the\n     [`yabridge`](https://archlinux.org/packages/multilib/x86_64/yabridge/) and\n     [`yabridgectl`](https://archlinux.org/packages/multilib/x86_64/yabridgectl/)\n     packages.\n   - On **Fedora**, you can install yabridge and yabridgectl from a\n     [COPR](https://copr.fedorainfracloud.org/coprs/patrickl/yabridge/).\n   - On the **OpenSUSE** distros, yabridge and yabridgectl are packaged by\n     [GeekosDAW](https://geekosdaw.tuxfamily.org/en/).\n   - On **NixOS**, yabridge and yabridgectl are in the repositories.\n\n   - On **Ubuntu**, **Debian**, **Linux Mint**, **Pop!\\_OS**, and any other\n     distro, you can simply download and install a prebuilt version of yabridge:\n\n     1. First download the latest version of yabridge from the [releases\n        page](https://github.com/robbert-vdh/yabridge/releases). These binaries\n        currently target Ubuntu 20.04, and should work on any other distro\n        that's newer than that.\n     2. Extract the contents of the downloaded archive to `~/.local/share`, such\n        that the file `~/.local/share/yabridge/yabridgectl` exists after\n        extracting. You can extract an archive here from the command line with\n        `tar -C ~/.local/share -xavf yabridge-x.y.z.tar.gz`. If you're\n        extracting the archive using a GUI file manager or archive tool, then\n        make sure that hidden files and directories are visible by pressing\n        <kbd>Ctrl+H</kbd>. You should also double check that your archive\n        extraction tool didn't create an additional subdirectory in\n        `~/.local/share`. Dragging and dropping the `yabridge` directory from\n        the archive directly to `~/.local/share` is the best way to make sure\n        this doesn't happen.\n     3. **Whenever any step after this mentions running `yabridgectl <something>`,\n        then you should run `~/.local/share/yabridge/yabridgectl <something>`\n        instead.**\n\n        Alternatively, you can also add that directory to your shell's search\n        path. That way you can run `yabridgectl` directly. If you don't know\n        what that means, then add `export PATH=\"$PATH:$HOME/.local/share/yabridge\"`\n        to the end of `~/.bashrc` and reopen your terminal.\n\n2. Setting up and updating yabridge for your plugins is done though the\n   `yabridgectl` command line utility. The basic idea is that you first install\n   your Windows plugins to their default locations within a Wine prefix just\n   like you would on regular Windows. and yabridgectl then manages those plugin\n   directories for you. You then tell yabridgectl where it can find those\n   plugins so it can manage them for you. That way you only ever need to run a\n   single command whenever you install or remove a plugin. Both yabridge and\n   yabridgectl will automatically detect your yabridge installation if you used\n   one of the installation methods from step 1.\n\n   To tell yabridgectl where it can find your Windows VST2, VST3, and CLAP\n   plugins, you can use yabridgectl's `add`, `rm` and `list` commands to add,\n   remove, and list the plugin directories yabridgectl is managing for you. You\n   can also use `yabridgectl status` to get an overview of the current settings\n   and the installation status for all of your plugins.\n\n   1. To add the most common VST2 plugin directory in the default Wine prefix, use\n      `yabridgectl add \"$HOME/.wine/drive_c/Program Files/Steinberg/VstPlugins\"`.\n      This directory may be capitalized as `VSTPlugins` on your system, and some\n      plugins may also install themselves to a similar directory directly inside\n      of Program Files.\n   2. VST3 plugins under Windows are always installed to\n      `C:\\Program Files\\Common Files\\VST3`, and you can use\n      `yabridgectl add \"$HOME/.wine/drive_c/Program Files/Common Files/VST3\"` to\n      add that directory to yabridge.\n   3. CLAP plugins under Windows are always installed to\n      `C:\\Program Files\\Common Files\\CLAP`, and you can use\n      `yabridgectl add \"$HOME/.wine/drive_c/Program Files/Common Files/CLAP\"` to\n      add that directory to yabridge.\n\n3. Finally, you'll need to run `yabridgectl sync` to finish setting up yabridge\n   for all of your plugins. After doing so, your VST2, VST3, and CLAP plugins\n   will be set up in `~/.vst/yabridge`, `~/.vst3/yabridge`, and\n   `~/.clap/yabridge` respectively. Make sure your DAW searches `~/.vst`,\n   `~/.vst3`, and `~/.clap` for VST2, VST3, and CLAP plugins and you will be\n   good to go.\n\n### Bitbridge\n\nYabridge can also load 32-bit Windows plugins so you can use them in your 64-bit\nLinux DAW. Yabridge will automatically detect whether a plugin is 32-bit or\n64-bit on startup and it will handle it accordingly. If you've installed\nyabridge through a distro package, then it may be possible that your distro has\ndisabled this feature.\n\n### Wine prefixes\n\nIt is also possible to use yabridge with multiple Wine prefixes at the same\ntime. Yabridge will automatically detect and use the Wine prefix the Windows\nplugin's `.dll`, `.vst3`, or `.clap` file is located in. Alternatively, you can\nset the `WINEPREFIX` environment variable to override the Wine prefix for _all\nyabridge plugins_.\n\n### Drag-and-drop\n\nYabridge supports drag-and-drop both from a native (X11) Linux application to\nplugins running under yabridge, as well as from yabridge plugins to native X11\napplications like your DAW or your file browser. When dragging things from a\nplugin to your DAW, then depending on which DAW you're using it may look like\nthe drop is going to fail while you're still holding down the left mouse button.\nThat's expected, since yabridge's and Wine's own drag-and-drop systems are\nactive at the same time. If you're using yabridge in _REAPER_ or _Carla_, then\nyou may need to enable a [compatibility option](#compatibility-options) to\nprevent those hosts from stealing the drop.\n\n### Input focus grabbing\n\nYabridge tries to be clever about the way grabbing and releasing input focus for\na plugin works. One important detail here is that when grabbing input focus,\nyabridge will always focus the _parent window_ passed by the host for the plugin\nto embed itself into. This means that hosts like Bitwig Studio can still process\ncommon key bindings like <kbd>Space</kbd> for play/pause even while you are\ninteracting with a plugin's GUI. The downside of this approach is that this also\nmeans that in those hosts you simply cannot type a space character, as the key\nwill always go to the host.\n\nFor the very specific situations where you may want to focus the plugin's editor\ndirectly so that all keyboard input goes to Wine, you can hold down the\n<kbd>Shift</kbd> key while entering the plugin's GUI with your mouse. This will\nlet you type spaces in text fields in **Bitwig Studio**, type text into the\nsettings and license dialogs in **Voxengo** plugins, and it will also allow you\nto navigate dropdowns with the keyboard.\n\n### Downgrading Wine\n\nIf you run into software or a plugin that does not work correctly with the\ncurrent version of Wine Staging, then you may want to try downgrading to an\nearlier version of Wine. This can be done as follows:\n\n- On Debian, Ubuntu, Linux Mint and other apt-based distros, you can use the\n  command below to install Wine Staging 7.20 after you add the WineHQ\n  repositories linked above. This command is a bit cryptic because on these\n  distros the Wine package is split up into multiple smaller packages, and the\n  package versions include the distros codename (e.g. `focal`, or `buster`) as\n  well as some numeric suffix. Change the version to whatever version of Wine\n  you want to install, and then run these commands under Bash:\n\n  ```shell\n  version=7.20\n  variant=staging\n  codename=$(shopt -s nullglob; awk '/^deb https:\\/\\/dl\\.winehq\\.org/ { print $3; exit 0 } END { exit 1 }' /etc/apt/sources.list /etc/apt/sources.list.d/*.list || awk '/^Suites:/ { print $2; exit }' /etc/apt/sources.list /etc/apt/sources.list.d/wine*.sources)\n  suffix=$(dpkg --compare-versions \"$version\" ge 6.1 && ((dpkg --compare-versions \"$version\" eq 6.17 && echo \"-2\") || echo \"-1\"))\n  sudo apt install --install-recommends {\"winehq-$variant\",\"wine-$variant\",\"wine-$variant-amd64\",\"wine-$variant-i386\"}=\"$version~$codename$suffix\"\n  ```\n\n  If you want to prevent these packages from being updated automatically, then\n  you can do so with:\n\n  ```shell\n  sudo apt-mark hold winehq-staging\n  ```\n\n  Running the same command with `unhold` instead of `hold` will enable updates\n  again.\n\n- On Arch and Manjaro, you can install the\n  [downgrade](https://aur.archlinux.org/packages/downgrade/) tool from the repos\n  or the AUR, then run:\n\n  ```shell\n  sudo env DOWNGRADE_FROM_ALA=1 downgrade wine-staging\n  ```\n\n  Then select the package for the wine-staging version you want to isntall from\n  the list. After installing downgrade will ask if you want to add the package\n  to `IgnorePkg`. If you select `yes`, the package will be added to the\n  `IgnorePkg` field in `/etc/pacman.conf` and it won't be updated again\n  automatically.\n\n### Installing a development build\n\nIf you want to try to a development version of yabridge, then you can do so as\nfollows:\n\n- On Arch and Manjaro, you can install the latest master branch version of\n  yabridge by installing the\n  [yabridge-git](https://aur.archlinux.org/packages/yabridge-git/) and\n  [yabridgectl-git](https://aur.archlinux.org/packages/yabridgectl-git/) AUR\n  packages.\n- Otherwise, you can find development builds on the [automated build\n  page](https://github.com/robbert-vdh/yabridge/actions?query=workflow%3A%22Automated+builds%22+branch%3Amaster).\n  Before you can download these files, you need log in to GitHub. Then simply\n  select the latest commit with a green checkmark next to it, scroll down the\n  build page, and download the latest yabridge and yabridgectl binaries that\n  match your system. You can also access the very latest build from [this\n  page](https://nightly.link/robbert-vdh/yabridge/workflows/build/master)\n  without logging in to GitHub. You'll need to extract these files twice, since\n  GitHub automatically puts the tarball inside of a .zip archive. Then simply\n  overwrite the existing files in `~/.local/share/yabridge` with the ones from\n  the `yabridge` directory, and replace `~/.local/share/yabridge/yabridgectl`\n  with the new `yabridgectl/yabridgectl` binary. It's also possible to use these\n  builds if you're using a distro package, but then you should remove the\n  package first in order to avoid conflicts.\n\nAfter updating yabridge's files, you will need to rerun `yabridgectl sync` to\nfinish the upgrade.\n\n## Configuration\n\nYabridge can be configured on a per plugin basis to host multiple plugins within\na single process using [plugin groups](#plugin-groups), and there are also a\nnumber of [compatibility options](#compatibility-options) available to improve\ncompatibility with certain hosts and plugins.\n\nConfiguring yabridge is done by creating a `yabridge.toml` file located in\neither the same directory as the bridged plugin `.so` or `.clap` file you're\ntrying to configure, or in any of its parent directories. In most cases, this\nfile should be created as either `~/.vst/yabridge/yabridge.toml`,\n`~/.vst3/yabridge/yabridge.toml`, or `~/.clap/yabridge/yabridge.toml` depending\non the type of plugin you want to configure.\n\nConfiguration files contain several _sections_. Each section can match one or\nmore plugins using case sensitive\n[glob](https://www.man7.org/linux/man-pages/man7/glob.7.html) patterns that\nmatch paths to yabridge `.so` and `.clap` files relative to the `yabridge.toml`\nfile, as well as a list of options to apply to the matched plugins. These glob\npatterns can also match entire directories, in which case the settings are\napplied to all plugins under that directory or one of its subdirectories. To\navoid confusion, only the first `yabridge.toml` file found and only the first\nmatching glob pattern within that file will be considered. See below for an\n[example](#example) of a `yabridge.toml` file. To make debugging easier,\nyabridge will print the used `yabridge.toml` file and the matched section within\nit on startup, as well as all of the options that have been set.\n\n### Plugin groups\n\n| Option  | Values            | Description                                                            |\n| ------- | ----------------- | ---------------------------------------------------------------------- |\n| `group` | `{\"<string>\",\"\"}` | Defaults to `\"\"`, meaning that the plugin will be hosted individually. |\n\nSome plugins have the ability to communicate with other instances of that same\nplugin or even with other plugins made by the same manufacturer. This is often\nused in mixing plugins to allow different tracks to reference each other without\nhaving to route audio between them. Examples of plugins that do this are\nFabFilter Pro-Q 3, MMultiAnalyzer and the iZotope mixing plugins. In order for\nthis to work, all instances of a particular plugin will have to be hosted in the\nsame process.\n\nYabridge has the concept of _plugin groups_, which are user defined groups of\nplugins that will all be hosted inside of a single process. Plugins groups can\nbe configured for a plugin by setting the `group` option of that plugin to some\nname. All plugins with the same group name will be hosted within a single\nprocess. Of course, plugin groups with the same name but in different Wine\nprefixes and with different architectures will be run independently of each\nother. See below for an [example](#example) of how these groups can be set up.\n\n_Note that because of the way VST3 and CLAP work, multiple instances of a single\nVST3 or CLAP plugin will always be hosted in a single process regardless of\nwhether you have enabled plugin groups or not._ _The only reason to use plugin\ngroups with those plugins is to get slightly lower loading times the first time\nyou load a new plugin._\n\n### Compatibility options\n\n| Option                        | Values                  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| ----------------------------- | ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `disable_pipes`               | `{true,false,<string>}` | When this option is enabled, yabridge will redirect the Wine plugin host's output streams to a file without any further processing. See the [known issues](#known-issues-and-fixes) section for a list of plugins where this may be useful. This can be set to a boolean, in which case the output will be written to `$XDG_RUNTIME_DIR/yabridge-plugin-output.log`, or to an absolute path (with no expansion for tildes or environment variables). Defaults to `false`.           |\n| `editor_coordinate_hack`      | `{true,false}`          | Compatibility option for plugins that rely on the absolute screen coordinates of the window they're embedded in. Since the Wine window gets embedded inside of a window provided by your DAW, these coordinates won't match up and the plugin would end up drawing in the wrong location without this option. Currently the only known plugins that require this option are _PSPaudioware E27_ and _Soundtoys Crystallizer_. Defaults to `false`.                                   |\n| `editor_disable_host_scaling` | `{true,false}`          | Disable host-driven HiDPI scaling for VST3 and CLAP plugins. Wine currently does not have proper fractional HiDPI support, so you might have to enable this option if you're using a HiDPI display. In most cases setting the font DPI in `winecfg`'s graphics tab to 192 will cause plugins to scale correctly at 200% size. Defaults to `false`.                                                                                                                                  |\n| `editor_force_dnd`            | `{true,false}`          | This option forcefully enables drag-and-drop support in _REAPER_. Because REAPER's FX window supports drag-and-drop itself, dragging a file onto a plugin editor will cause the drop to be intercepted by the FX window. This makes it impossible to drag files onto plugins in REAPER under normal circumstances. Setting this option to `true` will strip drag-and-drop support from the FX window, thus allowing files to be dragged onto the plugin again. Defaults to `false`. |\n| `editor_xembed`               | `{true,false}`          | Use Wine's XEmbed implementation instead of yabridge's normal window embedding method. Some plugins will have redrawing issues when using XEmbed and editor resizing won't always work properly with it, but it could be useful in certain setups. You may need to use [this Wine patch](https://github.com/psycha0s/airwave/blob/master/fix-xembed-wine-windows.patch) if you're getting blank editor windows. Defaults to `false`.                                                |\n| `frame_rate`                  | `<number>`              | The rate at which Win32 events are being handled and usually also the refresh rate of a plugin's editor GUI. When using plugin groups all plugins share the same event handling loop, so in those the last loaded plugin will set the refresh rate. Defaults to `60`.                                                                                                                                                                                                               |\n| `hide_daw`                    | `{true,false}`          | Don't report the name of the actual DAW to the plugin. See the [known issues](#known-issues-and-fixes) section for a list of situations where this may be useful. This affects VST2, VST3, and CLAP plugins. Defaults to `false`.                                                                                                                                                                                                                                                   |\n| `vst3_prefer_32bit`           | `{true,false}`          | Use the 32-bit version of a VST3 plugin instead the 64-bit version if both are installed and they're in the same VST3 bundle inside of `~/.vst3/yabridge`. You likely won't need this.                                                                                                                                                                                                                                                                                              |\n\nThese options are workarounds for issues mentioned in the [known\nissues](#known-issues-and-fixes) section. Depending on the hosts\nand plugins you use you might want to enable some of them.\n\n### Example\n\nAll of the paths used here are relative to the `yabridge.toml` file. A\nconfiguration file for VST2 plugins might look a little something like this:\n\n```toml\n# ~/.vst/yabridge/yabridge.toml\n\n[\"FabFilter Pro-Q 3.so\"]\ngroup = \"fabfilter\"\n\n[\"MeldaProduction/Tools/MMultiAnalyzer.so\"]\ngroup = \"melda\"\n\n# Matches an entire directory and all files inside it, make sure to not include\n# a trailing slash\n[\"ToneBoosters\"]\ngroup = \"toneboosters\"\n\n[\"PSPaudioware\"]\neditor_coordinate_hack = true\n\n[\"Analog Lab 3.so\"]\neditor_xembed = true\n\n[\"Chromaphone 3.so\"]\nhide_daw = true\n\n[\"sforzando VST_x64.so\"]\neditor_force_dnd = true\nframe_rate = 24\n\n[\"Loopcloud*\"]\ndisable_pipes = true\n\n# Simple glob patterns can be used to avoid unneeded repetition\n[\"iZotope*/Neutron *\"]\ngroup = \"izotope\"\n\n# Since this file has already been matched by the above glob pattern, this won't\n# do anything\n[\"iZotope7/Neutron 2 Mix Tap.so\"]\ngroup = \"This will be ignored!\"\n\n# Of course, you can also add multiple plugins to the same group by hand\n[\"iZotope7/Insight 2.so\"]\ngroup = \"izotope\"\n\n# This would cause all plugins to be hosted within a single process. Doing so\n# greatly reduces the loading time of individual plugins, with the caveat being\n# that plugins are no longer sandboxed from each other.\n#\n# [\"*\"]\n# group = \"all\"\n```\n\nFor VST3 plugins you should just match the directory instead of the `.so` file\ndeep within in, like this:\n\n```toml\n# ~/.vst3/yabridge/yabridge.toml\n\n[\"FabFilter*.vst3\"]\ngroup = \"fabfilter\"\neditor_disable_host_scaling = true\n\n[\"Chromaphone 3.vst3\"]\nhide_daw = true\n\n[\"Misstortion2.vst3\"]\neditor_disable_host_scaling = true\n\n[\"*/*Spectral*.vst3\"]\nvst3_prefer_32bit = true\n\n# These options would be applied to all plugins that do not already have their\n# own configuration set\n[\"*\"]\neditor_force_dnd = true\neditor_disable_host_scaling = true\n```\n\nWith CLAP plugins, you match on the Linux `.clap` plugin file, just like\nmatching on `.so` files for a VST2 config file:\n\n```toml\n# ~/.clap/yabridge/yabridge.toml\n\n[\"fb799964.clap\"]\nhide_daw = true\n```\n\n## Known issues and fixes\n\nAny plugin should function out of the box, although some plugins will need some\nadditional dependencies for their GUIs to work correctly. Notable examples\ninclude:\n\n- If plugins have missing, invisible, or misaligned text, then installing\n  `corefonts` or `allfonts` through `winetricks` may help.\n- If a plugin seems to work fine except for the fact that the GUI never seems to\n  update when you interact with it, then try installing\n  [DXVK](https://github.com/doitsujin/dxvk). Many recent JUCE-based plugins\n  don't redraw anymore when using WineD3D. Make sure you also install Vulkan\n  drivers if you don't already have those set up.\n- **Serum** requires you to disable `d2d1.dll` in `winecfg` and to install\n  `gdiplus` through `winetricks`. You may also want to disable the tooltips by\n  going to the global settings tab, unchecking 'Show help tooltips', and\n  clicking on the save icon next to 'Preferences'.\n- **Native Instruments** plugins work, but the latest version of Native Access\n  needs some extra work to run under wine. See the [wineHQ page](https://appdb.winehq.org/objectManager.php?sClass=version&iId=41820)\n  for information on how to get it running.\n\n  The legacy version `1.X` still can be installed directly. You can find it on the\n  [legacy installers](https://support.native-instruments.com/hc/en-us/articles/360000407909-Native-Access-1-Legacy-Installers-for-Older-Operating-Systems)\n  page on Native Instruments' website. To get the installer to finish correctly,\n  open `winecfg` and set the reported Windows version to Windows 10. Otherwise\n  the installer will be stuck on installing an ISO driver. To work around this\n  you can open the .iso file downloaded to your downloads directory and run the\n  installer directly.\n\n  Some plugins or sound libraries will install as expected, but if you get an\n  'Error while mounting disk image' installation failure, then you will need to\n  install the plugin or sound library manually. You will find a .iso file in\n  your downloads directory that you can mount and then run the installer from.\n  However some of those Native Instruments .iso files contain hidden files, and\n  the installer on the .iso file will fail to install unless you mount the .iso\n  file with the correct mounting options to unhide those files. To do this,\n  first run `udisksctl loop-setup -f ~/Downloads/<filename>.iso` to load the\n  .iso file, and then use `udisksctl mount -t udf -o unhide -b /dev/loopX` where\n  `/dev/loopX` corresponds to the loop device printed by the `loop-setup`\n  command to mount the .iso file to a directory in `/run/media`.\n\n  If you're using an older distro and you're getting a\n  `Mount option 'unhide' is not allowed` error when trying to mount the file,\n  then you may need to manually create or edit `/etc/udisks2/mount_options.conf`\n  first, adding the following to the file:\n\n  ```conf\n  [defaults]\n  udf_allow=uid=$UID,gid=$GID,iocharset,utf8,umask,mode,dmode,unhide,undelete\n  ```\n\n- If **Spitfire Audio** plugins like **BBC Symphony Orchestra** and **LABS** are\n  unable to load their sample libraries (_Error #X: Something went wrong_), then\n  you can try reinstalling those plugins to a new, clean Wine prefix. To avoid\n  potential confusion, make sure to uninstall the Spitfire software along with\n  the VST2 and VST3 plugins from your main Wine prefix first.\n- Several **JUCE** based plugins have an issue under Wine where the mouse cursor\n  will disappear after interacting with certain UI elements. This can usually be\n  fixed by mousing over the resize handle in the bottom right corner.\n- Several (JUCE-based) plugins like **Arturia**'s plugins, Sonic Academy's\n  **Kick 2** and Cytomic's **The Drop** have an issue where the GUI freezes when\n  it's trying to display a tooltip. This can be fixed by enabling the '_Hide\n  Wine version from applications_' option in the Staging tab of winecfg. If a\n  plugin seems to function normally but then freezes when clicking on something,\n  then try enabling this option.\n- The GUI in **Sforzando** may appear to not respond to mouse clicks depending\n  on your Wine and system configuration. This is actually a redrawing issue, and\n  the GUI will still be updated even if it doesn't look that way. Dragging the\n  window around or just clicking anywhere in the GUI will force a redraw and\n  make the GUI render correctly again.\n- **MeldaProduction** plugins have minor rendering issues when GPU acceleration\n  is enabled. This can be fixed by disabling GPU acceleration in the plugin\n  settings. I'm not sure whether this is an issue with Wine or the plugins\n  themselves. Notable issues here are missing redraws and incorrect positioning\n  when the window gets dragged offscreen on the top and left sides of the screen.\n- Knobs in **Tokyo Dawn Records** plugins may not behave as expected when\n  dragging long distances. Setting the 'Continuous Drag' option in the plugin's\n  options to 'Linear' fixes the issue.\n- Similarly, the knobs in **Voxengo** plugins behave better when you enable the\n  'Radial knob mode' setting in the global settings.\n- If **Scaler 2**'s interface lags, blacks out, or otherwise renders poorly,\n  then you can try enabling [software\n  rendering](https://forum.scalerplugin.com/t/scaler-2-black-empty-window/3540/8)\n  to fix these issues.\n- **ujam** plugins and other plugins made with the Gorilla Engine, such as the\n  **LoopCloud** plugins, will throw a `JS_EXEC_FAILED` error when trying to load\n  the plugin. Enabling the `disable_pipes` [compatibility\n  option](#compatibility-options) for those plugins will fix this.\n- Plugins by **KiloHearts** have file descriptor leaks when _esync_ is enabled,\n  causing Wine and yabridge to eventually stop working after the system hits the\n  open file limit. To fix this, either unset `WINEESYNC` while using yabridge or\n  switch to using [_fsync_](#performance-tuning) instead.\n- **PSPaudioware** and **Soundtoys** plugins with expandable GUIs, such as E27\n  and Crystallizer, may have their GUI appear in the wrong location after the\n  GUI has been expanded. You can enable an alternative [editor hosting\n  mode](#compatibility-options) to fix this.\n- When using recent _Applied Acoustics_ plugins like **Chromaphone 3** under\n  _Bitwig Studio_, text entry will cause the plugin to crash because Chromaphone\n  uses a different text entry method when it detects Bitwig. You can use the\n  `hide_daw` [compatibility option](#compatibility-options) to work around this.\n- VST2 plugins like **FabFilter Pro-Q 3** that can share data between different\n  instances of the same plugin plugins have to be hosted within a single process\n  for that functionality to work. See the [plugin groups](#plugin-groups)\n  section for instructions on how to set this up. This is not necessary for VST3\n  plugins, as multiple instances of those plugins will always be hosted in a\n  single process by design.\n- Some hosts, particularly _Ardour_, _REAPER_, _Qtractor_, will by default not\n  unload VST3 modules after you close the last plugin. This means that the\n  associated `yabridge-host.exe` process will keep running until you close the\n  project. For REAPER there's an option called\n  `Allow complete unload of VST plug-ins` in the `VST` tab of the settings\n  dialog to disable this behaviour.\n- _Drag-and-drop_ to the plugin window under **REAPER** doesn't work because of\n  a long standing issue in REAPER's FX window implementation. You can use a\n  compatibility option to [force drag-and-drop](#compatibility-options) to work\n  around this limitation.\n\nAside from that, these are some known caveats:\n\n- **iZotope** plugins can't be authorized because of missing functionality in\n  Wine's crypt32 implementation.\n- **D16 Group** plugins also can't be authorized in current versions of Wine as\n  they don't recall their authorization status correctly.\n- **Waves** V13 VST3 plugins have memory issues, at least under Wine. They will\n  likely randomly crash at some point. If you can avoid Waves, that would be for\n  the best. Otherwise, try the V12 versions of the plugins if you still have a\n  license for them.\n- MIDI key labels for VST2 plugins (commonly used for drum machines and\n  multisamplers) will not be updated after the host first asks for them since\n  VST 2.4 has no way to let the host know that those labels have been updated.\n  Deactivating and reactivating the plugin will cause these labels to be updated\n  again for the current patch.\n- The Cinnamon desktop environment has some quirks with its window management\n  that affect yabridge's plugin editor embedding. Most notably some plugins may\n  flicker while dragging windows around, and there may be [rendering\n  issues](https://github.com/robbert-vdh/yabridge/issues/89) when using multiple\n  monitors depending on which screen has been set as primary. Enabling the\n  XEmbed [compatibility option](#compatibility-options) may help, but Wine's\n  XEmbed implementation also introduces other rendering issues.\n\nThere are also some (third party) plugin API extensions for that have not been\nimplemented yet. See the [roadmap](./ROADMAP.md) for a list of future plans.\n\n## Troubleshooting common issues\n\nIf your problem is not listed here, then feel free to post on the [issue\ntracker](https://github.com/robbert-vdh/yabridge/issues) or to ask about it in\nthe yabridge [Discord](https://discord.gg/pyNeweqadf). Also check the [known\nissues and fixes](#known-issues-and-fixes) section above for help with\nplugin-specific issues.\n\n- Old versions of yabridge may not work correctly with Wine 7.21, 7.22, and\n  8.0-rc1 because of Wine bug\n  [#53912](https://bugs.winehq.org/show_bug.cgi?id=53912). Either update to\n  yabridge 5.0.3, or [downgrade to Wine Staging 7.20](#downgrading-wine).\n\n- Both yabridgectl and yabridge try to diagnose many common issues for you. If\n  you're running into crashes or other issues, then try launching your DAW from\n  a terminal and reading the log output for any clues. Bitwig Studio writes\n  plugin output to `~/.BitwigStudio/log/engine.log`, so you may need to look\n  there instead.\n\n- Try to use a clean Wine prefix when testing misbehaving plugins. Either\n  temporarily rename `~/.wine` to something else, or set the `WINEPREFIX`\n  environment variable to a directory path to have Wine use that as a prefix.\n  Don't forget to unset it before starting your DAW or all plugins will use that\n  prefix.\n\n- If you have the `WINEPREFIX` environment variable set and you _don't_ want all\n  of your plugins to use that specific Wine prefix, then you should unset it to\n  allow yabridge to automatically detect Wine prefixes for you.\n\n- If you get a warning about a low `RLIMIT_RTTIME` value of 200000 microseconds,\n  then your DAW is running in an environment where _rtkit_ is active. Rtkit is\n  used to grant realtime scheduling privileges to applications in environments\n  where users can't do that themselves, but it also imposes severe limitations\n  on what those applications can do. Applications known for doing this are:\n\n  - **PipeWire**. With PipeWire versions above 0.3.44, you simply need to make\n    sure your user has realtime priviliges. Follow the instructions from the\n    section below to enable this and then reboot your system.\n  - **GNOME 45+**. Recent GNOME shell versions started using rtkit in the shell\n    itself. As far as I'm aware, this happens unconditionally, and masking the\n    rtkit service to prevent it from running is the only workaround. Make sure\n    your user has realtime priviliges set up according to the instructions from\n    the section below, and then run `sudo systemctl mask rtkit-daemon.service`.\n    The warning should disappear after rebooting. Please let me know if anyone\n    knows a better solution for this problem!\n\n- If yabridge prints errors or warnings about memory locking limits, then that\n  means that you have not yet set up realtime privileges for your user. Setting\n  the memlock limit to unlimited (or -1) is usually part of this process. How\n  you should do this will depend on your distro. On _Arch_ and _Manjaro_, you\n  will need to install the `realtime-privileges` package, add your user to the\n  `realtime` group with `sudo gpasswd -a \"$USER\" realtime`, and then reboot.\n  _Fedora_ does the same thing with their `realtime-setup` package, which also\n  sets up a `realtime` group that you will need to add your user to. On\n  _Debian_, _Ubuntu_, and distros based on those, the `jackd2` package usually\n  sets this up for the `audio` group instead. If\n  `/etc/security/limits.d/audio.conf` exists, then you can simply add yourself\n  to the `audio` group and reboot. In any other case you may need to [set this\n  up yourself](https://jackaudio.org/faq/linux_rt_config.html).\n\n- If you're seeing errors related to Wine either when running `yabridgectl sync`\n  or when trying to load a plugin, then it can be that your installed version of\n  Wine is much older than the version that yabridge has been compiled for.\n  Yabridgectl will automatically check for this when you run `yabridgectl sync`\n  after updating Wine or yabridge. You can also manually verify that Wine is\n  working correctly by running one of the Wine plugin host applications.\n  Assuming that yabridge is installed under `~/.local/share/yabridge`, then\n  running `~/.local/share/yabridge/yabridge-host.exe` directly (so _not_\n  `wine ~/.local/share/yabridge/yabridge-host.exe`, that won't work) in a terminal\n  should print a few messages related to Wine's startup process followed by the\n  following line:\n\n  ```\n  Usage: yabridge-host.exe <plugin_type> <plugin_location> <endpoint_base_directory>\n  ```\n\n  If you're seeing a `002b:err:module:__wine_process_init` error instead, then\n  your version of Wine is too old for this version of yabridge and you'll have\n  to upgrade your Wine version. Instructions for how to do this on Ubuntu can be\n  found on the [WineHQ website](https://wiki.winehq.org/Ubuntu).\n\n  If you're getting a `0024:err:process:exec_process` error, then your Wine\n  prefix is set to 32-bit only and it won't be possible to run 64-bit\n  applications like `yabridge-host.exe`.\n\n- Sometimes left over Wine processes can cause problems. Run `wineserver -k` to\n  terminate Wine related in the current or default Wine prefix.\n\n- If plugin windows show up as a large overlay over the entire screen, covering\n  up other windows and making it impossible to interact with anything else\n  without Alt+Tabbing to them, then make sure the 'Allow the window manager to\n  control the windows' checkbox in winecfg's Graphics tab is checked.\n\n- If you're using a _lot_ of plugins and you're unable to load any new plugins,\n  then you may be running into Xorg's limit of 256 clients. The exact number of\n  plugins it takes for this to happen will depend on your system and the other\n  applications running in the background. An easy way to check if this is the\n  case would be to try and run `wine cmd.exe` from a terminal. If this prints a\n  message about the maximum number of clients being reached (or if you are not\n  able to open the terminal at all), then you might want to consider using\n  [plugin groups](#plugin-groups) to run multiple instances of your most\n  frequently used plugins within a single process. And if you're using many\n  instances of a single VST2 plugin, using the VST3 or CLAP version of that\n  plugin may also help since they'll share a single process.\n\n  Alternatively you can try increasing Xorg's limit itself.\n  First, check what your current limit is:\n  In a terminal, run: `less /var/log/Xorg.0.1` (or use any other text editor)\n  Search for a line containing \"MaxClients\". This then states the currently set\n  limit.\n  Then check if higher values are supported:\n  In a terminal, run: `/usr/lib/Xorg -maxclients 9999`\n  This should give an error message and show some information like this:\n\n  > maxclients must be one of 64, 128, 256, 512, 1024 or 2048\n\n  Let's say we pick 1024. Here's how to apply it.\n  Create this file (will require sudo): `/etc/X11/xorg.conf.d/99-maxclients.conf`\n  Add this content:\n\n  ```\n  Section \"ServerFlags\"\n      Option \"MaxClients\" \"1024\"\n  EndSection\n  ```\n\n  Save and reboot your system. Once you are logged back in, you can verify that\n  the setting has been applied by using the same approach for checking the\n  previously set limit (see above). Now it should be less likely to run into the\n  previous issue regarding \"too many clients\" when opening lots of plugins.\n\n- If you're using a `WINELOADER` that runs the Wine process under a separate\n  namespace while the host is not sandboxed, then you'll have to use the\n  `YABRIDGE_NO_WATCHDOG` environment variable to disable the watchdog timer. If\n  you know what this means then you probably know what you're doing. In that\n  case, you may also want to use `YABRIDGE_TEMP_DIR` to choose a different\n  directory for yabridge to store its sockets and other temporary files in.\n\n## Performance tuning\n\nRunning Windows plugins under Wine should have a minimal performance overhead,\nbut you may still notice an increase in latency spikes and overall DSP load.\nLuckily there are a few things you can do to get rid of most or all of these\nnegative side effects:\n\n- First of all, you'll want to make sure that you can run programs with realtime\n  scheduling. Note that on Arch and Manjaro this does not necessarily require a\n  realtime kernel as they include the `PREEMPT` patch set in their regular\n  kernels. You can verify that this is working correctly by running `chrt -f 10 whoami`,\n  which should print your username, and running `uname -a` should print\n  something that contains `PREEMPT` in the output.\n\n  If the `uname -a` output contains `PREEMPT_DYNAMIC`, then run either\n  `zgrep PREEMPT /proc/config.gz` or `grep PREEMPT \"/boot/config-$(uname -r)\"`\n  depending on your distro. If `CONFIG_PREEMPT` is not set, then either add the\n  `preempt=full` kernel parameter or better yet, switch to a kernel that's\n  optimized for low latencies.\n\n- You can also try enabling the `threadirqs` kernel parameter and using which\n  can in some situations help with xruns. After enabling this, you can use\n  [rtirq](https://github.com/rncbc/rtirq#rtirq) to increase the priority of\n  interrupts for your sound card.\n\n- Make sure that you're using the performance frequency scaling governor, as\n  changing clock speeds in the middle of a real time workload can cause latency\n  spikes. Since Linux 5.9 it's possible to do this by setting the\n  `cpufreq.default_governor=performance` to the kernel's command line in your\n  boot loader configuration.\n\n- The last but perhaps the most important thing you can do is to use a build of\n  Wine compiled with Proton's fsync or FUTEX2 patches. This can improve\n  performance significantly when using certain multithreaded plugins. If you are\n  running Arch or Manjaro, then you can use [Tk-Glitch's Wine\n  fork](https://github.com/Frogging-Family/wine-tkg-git) for a customizable\n  version of Wine with the fsync patches included. Make sure to follow the\n  instructions in the readme to build a version of wine-tkg using the default\n  profile and don't try to use the prebuilt releases as they will have fshack\n  enabled which tends to break many plugins that use Direct3D for their\n  rendering. You'll also want to make sure you're running Linux kernel 5.16 or\n  newer as those include support the `_fsync_futex_waitv` option that's enabled\n  by default though wine-tkg's `customization.cfg`. Finally, you'll have to set\n  the `WINEFSYNC` environment variable to `1` to enable fsync. See the\n  [environment configuration](#environment-configuration) section below for more\n  information on where to set this environment variable so that it gets picked\n  up when you start your DAW.\n\n- If you have the choice, the VST3 version of a plugin will likely perform\n  better than the VST2 version. And if there is a CLAP version, then that may\n  perform even better.\n\n- If the plugin doesn't have a VST3 or CLAP version, then [plugin\n  groups](#plugin-groups) can also greatly improve performance when many\n  instances of same VST2 plugin. _VST3 and CLAP plugins have similar\n  functionality built in by design_. Some plugins, like the BBC Spitfire\n  plugins, can share a lot of resources between different instances of the\n  plugin. Hosting all instances of the same plugin in a single process can in\n  those cases greatly reduce overall CPU usage and get rid of latency spikes.\n\n### Environment configuration\n\nThis section is relevant if you want to configure environment variables in such\na way that they will be set when you launch your DAW from the GUI instead of\nfrom a terminal. You may want to enable `WINEFSYNC` for fsync support with a\ncompatible Wine version and kernel, or you may want to change your search `PATH`\nto allow yabridge to find the `yabridge-*.exe` binaries if you're using yabridge\ndirectly from the `build` directory. To do this you'll need to change your\n_login shell's_ profile, which is different from the configuration loaded during\ninteractive sessions. And some display manager override your login shell to\nalways use `/bin/sh`, so you need to be careful to modify the correct file or\nelse these changes won't work. You can find out your current login shell by\nrunning `echo $SHELL` in a terminal.\n\n- First of all, if you're using GDM, LightDM or LXDM as your display manager\n  (for instance if you're using GNOME, XFCE or LXDE), then your display manager\n  won't respect your login shell and it will always use `/bin/sh`. In that case\n  you will need to add the following line to `~/.profile` to enable fsync:\n\n  ```shell\n  export WINEFSYNC=1\n  ```\n\n- If you are using the default **Bash** shell and you're not using any of the\n  above display managers, then you will want to add the following line to\n  `~/.bash_profile` (or `~/.profile` if the former does not exist):\n\n  ```shell\n  export WINEFSYNC=1\n  ```\n\n- If you are using **Zsh**, then you can add the following line to `~/.zprofile`\n  (`~/.zshenv` should also work, but some distros such as Arch Linux overwrite\n  the environment after this file has been read):\n\n  ```shell\n  export WINEFSYNC=1\n  ```\n\n- If you are using **fish**, then you can add the following line to either\n  `~/.config/fish/config.fish` or some file in `~/.config/fish/conf.d/`:\n\n  ```shell\n  set -gx WINEFSYNC 1\n  # Or if you're changing your PATH:\n  set -gp fish_user_paths ~/directory/with/yabridge/binaries\n  ```\n\n_Make sure to log out and log back in again to ensure that all applications pick\nup the new changes._\n\n## Building\n\nTo compile yabridge, you'll need [Meson](https://mesonbuild.com/index.html) and\nthe following dependencies:\n\n- GCC 10+\n- A Wine installation with `winegcc` and the development headers. The latest\n  commits contain a workaround for a winelib [compilation\n  issue](https://bugs.winehq.org/show_bug.cgi?id=49138) with Wine 5.7+.\n- libxcb\n\nThe following dependencies are included in the repository as a Meson wrap:\n\n- [Asio](http://think-async.com/Asio/)\n- [bitsery](https://github.com/fraillt/bitsery)\n- [function2](https://github.com/Naios/function2)\n- [`ghc::filesystem`](https://github.com/gulrak/filesystem)\n- [tomlplusplus](https://github.com/marzer/tomlplusplus)\n- Version 3.7.7 of the [VST3 SDK](https://github.com/robbert-vdh/vst3sdk) with\n  some [patches](https://github.com/robbert-vdh/yabridge/blob/master/tools/patch-vst3-sdk.sh)\n  to allow Winelib compilation\n- Version 1.1.9 of the [CLAP headers](https://github.com/free-audio/clap).\n\nThe project can then be compiled with the command below. You can remove or\nchange the unity size argument if building takes up too much RAM, or you can\ndisable unity builds completely by getting rid of `--unity=on` at the cost of\nslightly longer build times.\n\n```shell\nmeson setup build --buildtype=release --cross-file=cross-wine.conf --unity=on --unity-size=1000\nninja -C build\n```\n\nAfter you've finished building you can follow the instructions under the\n[usage](#usage) section on how to set up yabridge.\n\n### 32-bit bitbridge\n\nIt is also possible to compile a host application for yabridge that's compatible\nwith 32-bit plugins such as old SynthEdit plugins. This will allow yabridge to\nact as a bitbridge, allowing you to run old 32-bit only Windows plugins in a\nmodern 64-bit Linux plugin host. For this you'll need to have installed the 32\nbit versions of the XCB library. This can then be set up as follows:\n\n```shell\n# Enable the bitbridge on an existing build\nmeson configure build -Dbitbridge=true\n# Or configure a new build from scratch\nmeson setup build --buildtype=release --cross-file cross-wine.conf -Dbitbridge=true\n\nninja -C build\n```\n\nThis will produce a second plugin host binary called `yabridge-host-32.exe`.\nYabridge will detect whether the plugin you're trying to load is 32-bit or\n64-bit, and will run either the regular version or the `*-32.exe` variant\naccordingly.\n\n### 32-bit libraries\n\nIt also possible to build 32-bit versions of yabridge's libraries, which would\nlet you use both 32-bit and 64-bit Windows VST2, VST3, and CLAP plugins from a\n32-bit Linux plugin host. This is mostly untested since 32-bit only Linux\napplications don't really exist anymore, but it should work! The build system\nwill still assume you're compiling from a 64-bit system, so if you're compiling\non an actual 32-bit system you would need to comment out the 64-bit\n`yabridge-host` and `yabridge-group` binaries in `meson.build`:\n\n```shell\nmeson setup build --buildtype=release --cross-file=cross-wine.conf --unity=on --unity-size=1000 -Dbitbridge=true -Dbuild.cpp_args='-m32' -Dbuild.cpp_link_args='-m32'\nninja -C build\n```\n\nLike the above commands, you might need to tweak the unity size based on the\namount of system memory available. See the CI build definitions for some\nexamples on how to add static linking in the mix if you're going to run this\nversion of yabridge on some other machine.\n\n## Debugging\n\nWine's error messages and warning are usually very helpful whenever a plugin\ndoesn't work right away. However, with some hosts it can be hard read a plugin's\noutput. To make it easier to debug malfunctioning plugins, yabridge offers these\ntwo environment variables to control yabridge's logging facilities:\n\n- `YABRIDGE_DEBUG_FILE=<path>` allows you to write yabridge's debug messages as\n  well as all output produced by the plugin and by Wine itself to a file. For\n  instance, you could launch your DAW with\n  `env YABRIDGE_DEBUG_FILE=/tmp/yabridge.log <daw>`, and then use\n  `tail -F /tmp/yabridge.log` to keep track of the output. If this option is not\n  present then yabridge will write all of its debug output to STDERR instead.\n- `YABRIDGE_DEBUG_LEVEL={0,1,2}{,+editor}` allows you to set the verbosity of\n  the debug information. You can set a debug level, optionally followed by\n  `+editor` to also get more debug output related to the editor window handling.\n  Each level increases the amount of debug information printed:\n\n  - A value of `0` (the default) means that yabridge will only log the output\n    from the Wine process and some basic information about the\n    environment, the configuration and the plugin being loaded.\n  - A value of `1` will log detailed information about most events and function\n    calls sent between the plugin host and the plugin. This filters out some\n    noisy events such as `effEditIdle()` and `audioMasterGetTime()` since those\n    are sent multiple times per second by for every plugin.\n  - A value of `2` will cause all of the events to be logged without any\n    filtering. This is very verbose but it can be crucial for debugging\n    plugin-specific problems.\n\n  More detailed information about these debug levels can be found in\n  `src/common/logging.h`.\n\nSee the [bug report\ntemplate](https://github.com/robbert-vdh/yabridge/blob/master/.github/ISSUE_TEMPLATE/bug_report.yml)\nfor an example of how to use this.\n\nWine's own [logging facilities](https://wiki.winehq.org/Debug_Channels) can also\nbe very helpful when diagnosing problems. In particular the `+message`,\n`+module` and `+relay` channels are very useful to trace the execution path\nwithin the loaded plugin itself.\n\n### Attaching a debugger\n\nTo debug the plugin, you can just attach gdb to the host. Debugging the Wine\nplugin host is a bit trickier. Wine comes with a GDB proxy for winedbg, but it\nrequires a little bit of additional setup and it expects the command line\narguments to be a valid Win32 command line. You'll also need to launch winedbg\nin a seperate detached terminal emulator so it doesn't terminate together with\nthe plugin, and winedbg can be a bit picky about the arguments it accepts. I've\nalready set this up behind a feature flag for use in KDE Plasma. Other desktop\nenvironments and window managers will require some slight modifications in\n`src/plugin/host-process.cpp`. To enable this, simply run the follow and then\nrebuild yabridge:\n\n```shell\nmeson configure build --buildtype=debug -Dwinedbg=true\n```\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.2646484375,
          "content": "# Roadmap\n\nYabridge's VST2 and VST3 bridging are feature complete and should work great,\nbut there are still some other features that may be worth implementing. This\npage lists some of those.\n\n# Short-ish term\n\n- [ARA](https://www.celemony.com/en/service1/about-celemony/technologies)\n  support for VST3 plugins. The ARA SDK has recently been [open\n  source](https://github.com/Celemony/ARA_SDK), so we can now finally start\n  working on this.\n\n# Longer term\n\n- An easier [updater](https://github.com/robbert-vdh/yabridge/issues/51) through\n  a new `yabridgectl update` command for distros that don't package yabridge.\n\n# Somewhere in the future, possibly\n\n- CLAP audio thread pool support. Implementing this efficiently is less than\n  trivial, and there are currently no plugins that can benefit from it.\n- REAPER's vendor specific [VST2.4](https://www.reaper.fm/sdk/vst/vst_ext.php)\n  and\n  [VST3](https://github.com/justinfrankel/reaper-sdk/blob/main/sdk/reaper_vst3_interfaces.h)\n  extensions.\n- [Presonus' extensions](https://presonussoftware.com/en_US/developer) to the\n  VST3 interfaces. All of these extensions have been superseded by official VST3\n  interfaces in later versions of the VST3 SDK, so it's unlikely that there are\n  many plugins that still rely on these older extensions.\n"
        },
        {
          "name": "cross-wine.conf",
          "type": "blob",
          "size": 0.9638671875,
          "content": "[binaries]\nc = 'winegcc'\ncpp = 'wineg++'\nar = 'ar'\nstrip = 'strip'\n# Needs to be specified explicitely for Fedora 32\npkgconfig = 'pkg-config'\n# Useful for packaging so Meson can resolve dependencies without a pkg-config\n# file from the repositories\ncmake = 'cmake'\n\n[properties]\nneeds_exe_wrapper = true\n\n[built-in options]\n# Instead of specifying the target architecture below, we'll do this directly in\n# the meson.build file. By setting the `-m64` flags there (or `-m32`), we can\n# build both the regular 64-bit version of the host application and the 32-bit\n# bit bridge in the same build. This ensures that the plugin and both host\n# applications are always in sync. This might not be needed anymore once Meson\n# cross compiling to multiple targets at once.\n# https://github.com/mesonbuild/meson/issues/5125\ncpp_link_args = ['-mwindows']\n\n# For instance, this should be in the 64-bit only cross-file\n# c_args = ['-m64']\n# cpp_args = ['-m64']\n# cpp_link_args = ['-m64', '-mwindows']\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 15.591796875,
          "content": "project(\n  'yabridge',\n  'cpp',\n  version : '5.1.1',\n  meson_version : '>=0.56',\n  default_options : [\n    'warning_level=3',\n    'cpp_std=c++2a',\n    # Even though Meson will complain that this option does not exist, without\n    # this Meson will not apply the above option to native targets\n    'build.cpp_std=c++2a',\n  ],\n)\n\n#\n# Build options\n#\n\n# In theory yabridge should compile fine on a 32-bit system, but you will always\n# need to pass `-Dbitbridge=true`. We just make sure that we won't build\n# any 64-bit binaries in that situation.\nis_64bit_system = build_machine.cpu_family() not in ['x86', 'arm']\nwith_32bit_libraries = (not is_64bit_system) or get_option('build.cpp_args').contains('-m32')\nwith_bitbridge = get_option('bitbridge')\nwith_clap = get_option('clap')\nwith_system_asio = get_option('system-asio')\nwith_winedbg = get_option('winedbg')\nwith_vst3 = get_option('vst3')\n\n# Cookies can't be stored correctly when the native host is 32-bit and the\n# bridged plugin is 64-bit\nif with_clap and with_32bit_libraries and is_64bit_system\n  error('CLAP support will not work correctly when using 32-bit yabridge libraries together with 64-bit host binaries.')\nendif\n\n#\n# Compiler flags\n#\n\n# Depending on the `bitbridge` flag we'll enable building secondary 32-bit\n# host applications that can act as a bit bridge for using 32-bit Windows\n# plugins in 64-bit Linux VST hosts. The plugin will determine which host\n# application to use based on the `.dll` file it's trying to load. This setup is\n# necessary until Meson provides a way to have multiple cross-builds for a\n# single build directory: https://github.com/mesonbuild/meson/issues/5125\n\n# These variables are used to generate a `config.h` file. The library names will\n# be prefixed with `lib` and suffixed with `.so`, and the host names will be\n# suffixed with `.exe`.\nclap_plugin_name = 'yabridge-clap'\nvst2_plugin_name = 'yabridge-vst2'\nvst3_plugin_name = 'yabridge-vst3'\nhost_name_64bit = 'yabridge-host'\nhost_name_32bit = 'yabridge-host-32'\n\ncompiler_options = [\n  '-fvisibility=hidden',\n  '-fvisibility-inlines-hidden',\n  # We use an intrinsic to force flush-to-zero. SSE2 is always enabled in x86_64\n  # CPUs, but when we're compiling the 32-bit bitbridge we need to manually add\n  # this flag.\n  '-msse2',\n  # FIXME: Bitsery relies on the definitions from `<cstdint>`, which is no\n  #        longer included transitively with GCC 13. This should be removed once\n  #        bitsery is updated to support GCC 13.\n  '-include',\n  'cstdint',\n]\n\nchainloader_compiler_options = [\n  # We use our process library for sending notifications from the chainloaders,\n  # but we don't need the Asio pipe support there\n  '-DWITHOUT_ASIO',\n]\n\n# HACK: Some stuff from `windows.h` that we don't need results in conflicting\n#       definitions, so we'll try to exclude those bits\nwine_compiler_options = [\n  '-DNOMINMAX',\n  # Since Wine 5.12 any use of attributes (like visibility specifiers, or\n  # calling conventions) in templated member or variable types causes a warning\n  '-Wno-attributes',\n  '-Wno-ignored-attributes',\n  # Winsock conflicts with the Posix sockets API. Before Wine 6.8 there was a\n  # `WINE_NOWINSOCK` that would exclude just `winsock.h` from `windows.h`, but\n  # they got rid of that so we now need to explicitly define the ifdef guards\n  '-D__WINE_WINSOCKAPI_STDLIB_H',\n  '-D_WINSOCKAPI_',\n  # This is only relevant for Wine 6.2, but commit\n  # `0c19e2e487d36a89531daf4897c0b6390d82a843`, broke compilation of\n  # `shobjidl.h` under C++.\n  #\n  # https://bugs.winehq.org/show_bug.cgi?id=50670\n  '-D__IFileOperation_INTERFACE_DEFINED__',\n  # This Wine 6.20 commit `dfdf56fbe47f8ff50ebe533e6d73f2de6546f008` added a\n  # bunch of new SAL includes to `windows.h`, which include things like `__in`\n  # and `__out`. This breaks libstdc++ compilation since they often use those\n  # names for function parameters.\n  #\n  # https://bugs.winehq.org/show_bug.cgi?id=51919\n  '-D__WINE_SAL_H__',\n]\n\n# NOTE: GCC doesn't 8-byte align doubles in structs on x86 for ABI-compatibilty\n#       reasons, but MSVC++ does. We need to force this same alignment to be\n#       ABI-compatible with 32-bit binaries created with MSVC++ on Windows.\nwine_32bit_compiler_options = wine_compiler_options + ['-m32', '-malign-double']\nwine_64bit_compiler_options = wine_compiler_options + ['-m64']\n\n# Enable addition assertions on the STL containers during debug builds. Meson\n# has a `cpp_debugstl` option, but it's nicer having this automatically tied to\n# debug builds.\nif get_option('buildtype') == 'debug'\n  compiler_options += ['-D_GLIBCXX_DEBUG']\nendif\n\nif with_bitbridge\n  compiler_options += '-DWITH_BITBRIDGE'\nendif\n\nif with_clap\n  compiler_options += '-DWITH_CLAP'\nendif\n\n# This provides an easy way to start the Wine plugin host using winedbg since it\n# can be quite a pain to set up\nif with_winedbg\n  compiler_options += '-DWITH_WINEDBG'\nendif\n\nif with_vst3\n  compiler_options += '-DWITH_VST3'\nendif\n\n#\n# Wine checks\n#\n\n# Meson does not let us set a default cross compiler, which makes sense, but it\n# also means that it's easy to forget. This will cause the setup process to\n# abort if no cross compiler has been set up.\nwinelib_check = '''#ifndef __WINE__\n#error 1\n#endif'''\nif not meson.get_compiler('cpp').compiles(winelib_check)\n  error('You need to set up a cross compiler, check the README for compilation instructions.')\nendif\n\n# Wine versions after Wine 5.6 and before 6.0 require a `__cdecl` calling\n# convention to be specified on the `main()` functions or else `argc` and `argv`\n# will point to the wrong memory. Similarly, with other versions of Wine this\n# should _not_ be specified for the same reason. We'll try to figure out the\n# current Wine version and add this calling convention based on that. Also,\n# printing the configure-time Wine version might be useful in diagnosing build\n# issues so we'll do just that.\n#\n# https://bugs.winehq.org/show_bug.cgi?id=49138\nwine_version = run_command(\n  'sh', '-c', '''wine --version | grep --only-matching -E '[0-9]+\\.[0-9]+(-?rc[0-9]+)?' | head -n1''',\n  check : false\n)\nif wine_version.returncode() == 0\n  wine_version = wine_version.stdout()\n  message('Targetting Wine @0@'.format(wine_version))\n\n  # Wine versions below 5.7 will segfault in `CoCreateGuid` which gets called\n  # during static initialization. I'm not exactly sure why this is happening,\n  # but to prevent this from causing more headaches and confusion in the future\n  # we should just immediately error out when building yabridge's VST3 support\n  # with these older Wine versions.\n  if wine_version.version_compare('<5.7') and with_vst3\n    error('Because of a bug in Wine < 5.7\\n' +\n          'you cannot build yabridge with VST3 support using these older Wine versions.\\n' +\n          'Use the \\'-Dvst3=false\\' build option to disable VST3 support.\\n\\n' +\n          'https://github.com/robbert-vdh/yabridge/issues/63#issuecomment-757369645')\n  endif\n  # This version of yabridge will not work when built against Wine 7.21, 7.22,\n  # or 8.0-rc1 because of https://bugs.winehq.org/show_bug.cgi?id=53912. We'll\n  # outright prevent building yabridge with these versions to avoid broken\n  # yabridge builds. If anyone's reading this because you ran into the error\n  # below, either build with Wine 8.0-rc2+, or stick with yabridge 5.0.2 if\n  # you're stuck with Wine 7.22.\n  # NOTE: Meson considers 8.0 to be below 8.0rc2, so this third check is also\n  #       needed\n  if wine_version.version_compare('>=7.21') and \\\n     wine_version.version_compare('<8.0rc2') and \\\n     wine_version.version_compare('!=8.0')\n    error('Building this version of yabridge against Wine ' + wine_version +\n          'would result in nonfunctional binaries. Either build yabridge 5.0.2 ' +\n          'with Wine 7.22, or switch to Wine 8.0-rc2+. Yabridge built with 8.0-rc2+ ' +\n          'will also work with older Wine versions, but yabridge built against older ' +\n          'Wine versions will not work with Wine 7.21+.\\n\\n' +\n          'https://bugs.winehq.org/show_bug.cgi?id=53912')\n  endif\n\n  if wine_version.version_compare('>=5.7') and \\\n     wine_version.version_compare('<6.0')\n    message('- Using the cdecl calling convention')\n    compiler_options += '-DWINE_USE_CDECL'\n  endif\n  if wine_version.version_compare('<6.23') and with_winedbg\n    message('- Using legacy winedbg argument quoting')\n    compiler_options += '-DWINEDBG_LEGACY_ARGUMENT_QUOTING'\n  endif\nelse\n  warning('Unable to determine the current Wine version')\nendif\n\n#\n# Dependencies\n#\n\ninclude_dir = include_directories('src/include', is_system : true)\n\n# These dependencies require separate linking flags for the 32-bit and 64-bit\n# versions\n\n# I honestly have no idea what the correct way is to have `dependency()` or\n# `compiler.find_dependency()` search for 32-bit versions of libraries when\n# cross-compiling. Meson also doesn't seem to respect the default linker\n# search path set by the system in `find_library()`. If anyone does know how\n# to properly do this, please let me know!\nwinegcc = meson.get_compiler('cpp', native : false)\n\nif is_64bit_system\n  xcb_64bit_dep = dependency('xcb')\nendif\nif with_32bit_libraries or with_bitbridge\n  xcb_32bit_dep = winegcc.find_library('xcb')\nendif\n\n# These are all headers-only libraries, and thus won't require separate 32-bit\n# and 64-bit versions\n\n# NOTE: The standalone asio library does not come with a pkgconfig or CMake\n#       build definition, and Meson thus also won't be able to detect it this\n#       way. As a workaround for distro packaging, configuring the project with\n#       `-Dsystem-asio=true` will use `<asio.h>` from the standard include\n#       directories instead.\nif with_system_asio\n  if not meson.get_compiler('cpp', native : true).check_header('asio.hpp')\n    error('The \\'system-asio\\' build option was set, but <asio.hpp> was not found')\n  endif\n\n  asio_version = meson.get_compiler('cpp', native : true).get_define('ASIO_VERSION', prefix : '#include <asio.hpp>')\n  if asio_version.to_int() < 102800\n    error('Expected version 1.28.0 of the asio library or higher, found @0@ (MMmmrr)'.format(asio_version))\n  endif\n\n  # This is a dummy dependency, since the library is only accessible implicitly through the system include path\n  asio_dep = declare_dependency()\nelse\n  asio_dep = dependency('asio', version : '>=1.28.0')\nendif\n\nif meson.version().version_compare('>=0.60')\n  # Bitsery's CMake build definition is capitalized for some reason\n  bitsery_dep = dependency('bitsery', 'Bitsery', version : '>=5.2.0')\nelse\n  # Mmeson <=0.6.0 didn't support multiple names for a dependency, and since at\n  # the moment this is only relevant for packing on Arch btw, it's probably\n  # better to remove this conditional later than it is to bump the minimum Meson\n  # version now.\n  bitsery_dep = dependency('bitsery', version : '>=5.2.0')\nendif\n\n# The D-Bus headers are also only accessed through the include path. We don't\n# link to libdbus-1 to make soname changes don't completely break yabridge.\ndbus_dep = dependency('dbus-1').partial_dependency(compile_args : true, includes : true)\nfunction2_dep = dependency('function2', version : '>=4.0.0')\nghc_filesystem_dep = dependency('ghc_filesystem', modules : 'ghcFilesystem::ghc_filesystem', version : '>=1.5.0')\nthreads_dep = dependency('threads')\n# Tomlplusplus recently added a shraed library version. We don't want to link to\n# that. `compile_library` is deprecated but it (incorrectly) defaults to `true`\n# so we can't omit it.\ntomlplusplus_dep = dependency('tomlplusplus', version : '>=3.4.0', default_options : ['compile_library=false']).partial_dependency(compile_args : true, includes : true)\n\ndl_dep = declare_dependency(link_args : '-ldl')\nrt_dep = declare_dependency(link_args : '-lrt')\n\nwine_ole32_dep = declare_dependency(link_args : '-lole32')\n# The SDK includes a comment pragma that would link to this on MSVC\nwine_shell32_dep = declare_dependency(link_args : '-lshell32')\n# The built in threads dependency does not know how to handle winegcc\nwine_threads_dep = declare_dependency(link_args : '-lpthread')\nwine_uuid_dep = declare_dependency(link_args : '-luuid')\n\nif with_clap\n  clap_dep = dependency('clap', version : ['>=1.1.7', '<1.2'])\nendif\n\n# We need to build the VST3 SDK dependencies in tree because Meson won't let us\n# build both native, 32-bit cross compiled and 64-bit cross compiled\n# dependencies from a (CMake) subproject\nif with_vst3\n  subdir('src/common/vst3')\nendif\n\n#\n# Binaries\n#\n# The application consists of a plugin (`libyabridge-{clap,vst2,vst3}.so`) that calls\n# a Winelib application (`yabridge-host{,-32}.exe`) that can host Windows VST2\n# and VST3 plugins. These plugins can in turn be loaded from small stub\n# libraries dubbed chainloaders to avoid having to copy large plugin libraries\n# around. More information about the way these two components work together can\n# be found in `docs/architecture.md`.\n#\n\n# Generate header files for configuration variables such as the current git tag\n# and the name of the host binary\nsubdir('src/common/config')\n\n# These only contain the definitions for sources and dependencies. It would be\n# nice to define the libraries and executables inside of these meson.build\n# files, but that will also scatter the build artifacts around in the `build/`\n# directory and it's much more convenient having all of the important files\n# directory under `build/`.\n# https://github.com/mesonbuild/meson/pull/4037\nsubdir('src/chainloader')\nsubdir('src/plugin')\nsubdir('src/wine-host')\n\nshared_library(\n  vst2_plugin_name,\n  vst2_plugin_sources,\n  native : true,\n  include_directories : include_dir,\n  dependencies : vst2_plugin_deps,\n  # NOTE: LTO does not support Winelibs, and it seems to break\n  #       `libyabridge-vst2.so` in Bitwig for some reason. It should be left\n  #       turned off for the time being except for on the chainloader\n  #       libraries.\n  cpp_args : compiler_options,\n)\nshared_library(\n  'yabridge-chainloader-vst2',\n  vst2_chainloader_sources,\n  native : true,\n  dependencies : chainloader_deps,\n  cpp_args : compiler_options + chainloader_compiler_options,\n  # LTO is useful here to get rid of unused code\n  override_options : ['b_lto=true'],\n)\n\nif with_clap\n  # This is the CLAP equivalent of `libyabridge-vst2.so`. The Wine host\n  # applications can handle VST2, VST3, and CLAP plugins.\n  shared_library(\n    clap_plugin_name,\n    clap_plugin_sources,\n    native : true,\n    include_directories : include_dir,\n    dependencies : clap_plugin_deps,\n    cpp_args : compiler_options,\n  )\n  shared_library(\n    'yabridge-chainloader-clap',\n    clap_chainloader_sources,\n    native : true,\n    dependencies : clap_chainloader_deps,\n    cpp_args : compiler_options + chainloader_compiler_options,\n    # See above\n    override_options : ['b_lto=true'],\n  )\nendif\n\nif with_vst3\n  # This is the VST3 equivalent of `libyabridge-vst2.so`. The Wine host\n  # applications can handle both VST2, VST3 and CLAP plugins.\n  shared_library(\n    vst3_plugin_name,\n    vst3_plugin_sources,\n    native : true,\n    include_directories : include_dir,\n    dependencies : vst3_plugin_deps,\n    cpp_args : compiler_options,\n  )\n  shared_library(\n    'yabridge-chainloader-vst3',\n    vst3_chainloader_sources,\n    native : true,\n    dependencies : chainloader_deps,\n    cpp_args : compiler_options + chainloader_compiler_options,\n    # See above\n    override_options : ['b_lto=true'],\n  )\nendif\n\nif is_64bit_system\n  executable(\n    host_name_64bit,\n    host_sources,\n    native : false,\n    include_directories : include_dir,\n    dependencies : host_64bit_deps,\n    cpp_args : compiler_options + wine_64bit_compiler_options,\n    link_args : ['-m64'],\n  )\nendif\n\nif with_bitbridge\n  executable(\n    host_name_32bit,\n    host_sources,\n    native : false,\n    include_directories : include_dir,\n    dependencies : host_32bit_deps,\n    cpp_args : compiler_options + wine_32bit_compiler_options,\n    link_args : ['-m32'],\n  )\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.1162109375,
          "content": "option(\n  'bitbridge',\n  type : 'boolean',\n  value : false,\n  description : 'Build a 32-bit host application for hosting 32-bit plugins. See the readme for full instructions on how to use this.'\n)\n\noption(\n  'clap',\n  type : 'boolean',\n  value : true,\n  description : 'Whether to build the CLAP version of yabridge.'\n)\n\noption(\n  'system-asio',\n  type : 'boolean',\n  value : false,\n  description : '''If set to true, then <asio.hpp> from the standard include\n                   directories will be used in place of a pkgconfig definition,\n                   CMake dependency, or subproject wrap. The asio library does\n                   not come with any build definitions Meson can use to detect\n                   its installed version and location, so this behavior is\n                   behind an option as it's only relevant for distro packaging.'''\n)\n\noption(\n  'vst3',\n  type : 'boolean',\n  value : true,\n  description : 'Whether to build the VST3 version of yabridge.'\n)\n\noption(\n  'winedbg',\n  type : 'boolean',\n  value : false,\n  description : 'Whether to run the Wine plugin host with GDB attached. Might not always be reliable.'\n)\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 1153.037109375,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}