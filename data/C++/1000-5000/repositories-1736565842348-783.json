{
  "metadata": {
    "timestamp": 1736565842348,
    "page": 783,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Dobiasd/FunctionalPlus",
      "stars": 2154,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0244140625,
          "content": "---\nBasedOnStyle: WebKit\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.046875,
          "content": "# Ignore generated files\n./include_all_in_one/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2431640625,
          "content": "*.sublime-project\n*.sublime-workspace\n.vscode\ntest/temp*\nbuild\nbuild64\napi_search/frontend/build\napi_search/frontend/elm-stuff\napi_search/frontend/deploy.sh\napi_search/frontend/src/Database.elm\n.mypy_cache\n.idea\ncmake-build-*/\nCMakeUserPresets.json\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.2021484375,
          "content": "cff-version: 1.2.0\ntitle: \"FunctionalPlus\"\nurl: \"https://github.com/Dobiasd/FunctionalPlus/\"\nauthors:\n  - family-names: \"Hermann\"\n    given-names: \"Tobias\"\n    orcid: \"https://orcid.org/0009-0007-4792-4904\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.494140625,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nproject(FunctionalPlus VERSION 0.2.25)\n\n# ---- Warning guard ----\n\n# Protect dependents from this project's warnings if the guard isn't disabled\nset(FunctionalPlus_warning_guard SYSTEM)\nif (FunctionalPlus_INCLUDE_WITHOUT_SYSTEM)\n    set(FunctionalPlus_warning_guard \"\")\nendif ()\n\n# ---- Declare library ----\n\nadd_library(fplus INTERFACE)\nadd_library(FunctionalPlus::fplus ALIAS fplus)\ntarget_include_directories(\n        fplus\n        ${FunctionalPlus_warning_guard}\n        INTERFACE\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>\"\n)\n\ntarget_compile_features(fplus INTERFACE cxx_std_14)\n\nfind_package(Threads REQUIRED)\ntarget_link_libraries(fplus INTERFACE Threads::Threads)\n\n# ---- Create auto-generated fwd and curried functions, and amalgamated library ----\n\nfind_package(Python COMPONENTS Interpreter QUIET)\nif (Python_FOUND)\n    add_custom_target(\n            auto_generate\n            ALL\n            COMMAND\n            \"${Python_EXECUTABLE}\" \"${PROJECT_SOURCE_DIR}/generate/auto_generate.py\"\n            BYPRODUCTS\n            \"${PROJECT_SOURCE_DIR}/include/fplus/fwd_instances.autogenerated_defines\"\n            \"${PROJECT_SOURCE_DIR}/include/fplus/curry_instances.autogenerated_defines\"\n            \"${PROJECT_SOURCE_DIR}/include_all_in_one/include/fplus/fplus.hpp\"\n    )\n    add_dependencies(fplus auto_generate)\nelse ()\n    message(STATUS \"Not adding the 'auto_generate' target (requires Python)\")\nendif ()\n\n# ---- Install ----\n\ninclude(cmake/install-rules.cmake)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.662109375,
          "content": "## Contributing to FunctionalPlus\n\nThe main intention of this library is to provide small composable and [referentially transparent](https://en.wikipedia.org/wiki/Referential_transparency) functions.\n\n\n### New Issues\n\nFeel free to open [issues](https://github.com/Dobiasd/FunctionalPlus/issues) for any kind of bugs, problems, feature requests, or questions.\n\nA good bug report should include:\n\n- A clear title\n- A detailed description of the problem or error\n- The expected behavior\n- (If possible) a minimal example or steps to reproduce\n- Information about used compiler and platform\n\nIf you have problems installing FunctionalPlus please let us know by opening an issue. This will help us optimize the setup experience.\n\n\n### Open Issues\n\nIf you are looking for a way to contribute, have a look into the [open issues](https://github.com/Dobiasd/FunctionalPlus/issues). Especially the ones tagged with \"help wanted\" could be interesting to you.\n\n\n### Pull requests\n\nA good [PR](https://github.com/Dobiasd/FunctionalPlus/pulls) should include:\n\n- A clear Description\n- Test cases\n- Informative commit message\n\nBefore starting to write code, please check the issues to see if there is already work in progress regarding your concern to avoid redundant work.\n\n------------------------\n\n### Details of the inner workings\n\nLet's say you have an idea for a new useful function you would like to [add](https://github.com/Dobiasd/FunctionalPlus/pulls).\nThe small example of `without` can already show a lot of things.\n\n```c++\n// API search type: without : (a, [a]) -> [a]\n// fwd bind count: 1\n// without(0, [1, 0, 0, 5, 3, 0, 1]) == [1, 5, 3, 1]\ntemplate <typename Container,\n    typename T = typename Container::value_type>\nContainer without(T elem, const Container& xs)\n{\n    return drop_if(is_equal_to(elem), xs);\n}\n```\n\nThe function resides in `./include/fplus/filter.hpp`, because, well, it is some kind of filter. ;)\n\nEvery public exposed function (so everything not in `namespace internal`) should have an `API search type`. So the `./api_search/compile_all_and_deploy.sh` can parse the type and show it on the [website](http://www.editgym.com/fplus-api-search/). It will be run by a website admin after merging your pull request\n\nIf it makes sense to have a partially curried version of your function in `namespace fwd` for forward application and composition (data parameter as the last one), you should specify a `fwd bind count`. If your functions type is `foo : (a, b, c) -> d` then `generate/auto_generate.py` will insert a derived function `fwd::foo : (a, b) -> (c -> d)` into `./include/fplus/fwd_instances.autogenerated_defines` \n\nThe `make` step will automatically call `python ./generate/auto_generate.py`, which will update the `fwd_instances.autogenerated_defines` file, as well as the amalgamated library in `include_all_in_one/include/fplus/fplus.hpp`.\n\nAs the maintainer, I will run `cd api_search && ./compile_all_and_deploy.sh && cd ..` once your pull request has been merged, in order to update the doc at http://www.editgym.com/fplus-api-search/.\n\n\nA few unit tests would also be nice. In our example they belong into `./test/filter_test.cpp`\n\n```c++\nTEST_CASE(\"filter_test - without\")\n{\n    using namespace fplus;\n    typedef std::vector<int> Ints;\n    REQUIRE_EQ(without(1, Ints({1,2,3})), Ints({2,3}));\n    REQUIRE_EQ(without(5, Ints({1,2,3})), Ints({1,2,3}));\n    REQUIRE_EQ(without(5, Ints({})), Ints({}));\n}\n```\n\nTry to also cover corner cases you can think of.\n\nPlease do not hesitate to create a PR even if you are not completely sure if you have followed these guidelines correctly. We will help you perfect your contribution before merging.\n\nOh, and for a unified coding style, just run `./script/auto_format.sh`. :-)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 6.7236328125,
          "content": "FunctionalPlus\n==============\n\nRequirements and Installation\n-----------------------------\n\nYou can install FunctionalPlus in **one of the following ways**:\n\n\n### way 1: using [CMake](https://cmake.org/)\n\n```bash\ngit clone https://github.com/Dobiasd/FunctionalPlus\ncmake -S FunctionalPlus -B FunctionalPlus/build\ncmake --build FunctionalPlus/build\nsudo cmake --install FunctionalPlus/build\n```\n\n<a id=\"cmake-dependency\"></a>\nAnd then, you can add **FunctionalPlus** as a dependency in your CMake project as in the following.\n\n```cmake\nfind_package(FunctionalPlus REQUIRED)\n\nadd_executable(HelloWorld main.cpp)\ntarget_link_libraries(HelloWorld FunctionalPlus::fplus)\n```\n\nIf you want CMake to download and install the package automatically,\nsee [FetchContent](#way-3-using-cmake-314-fetchcontent) or\n[ExternalProject](#way-2-using-cmakes-externalproject) below.\n\n#### Building the unit tests\n\nUnit Tests are available from a separate CMakeLists.txt file. Building the\ntests requires [doctest](https://github.com/doctest/doctest).\n\nInstall doctest:\n```bash\ngit clone --depth=1 --branch=v2.4.11 https://github.com/doctest/doctest\ncmake -S doctest -B doctest/build -DDOCTEST_WITH_TESTS=OFF -DDOCTEST_WITH_MAIN_IN_STATIC_LIB=OFF\ncmake --build doctest/build -j 4\nsudo cmake --install doctest/build\n```\n\nThen, compile & run the tests\n````bash\ngit clone https://github.com/Dobiasd/FunctionalPlus\ncmake -S FunctionalPlus/test -B FunctionalPlus/build\ncmake --build FunctionalPlus/build -j 4\n(cd FunctionalPlus/build; ctest)\n````\n\nAs an alternative, doctest global installation can be skipped by installing to\na local prefix:\n\n````bash\ngit clone --depth=1 --branch=v2.4.11 https://github.com/doctest/doctest\ncmake -S doctest -B doctest/build -DDOCTEST_WITH_TESTS=OFF -DDOCTEST_WITH_MAIN_IN_STATIC_LIB=OFF\ncmake --build doctest/build\ncmake --install doctest/build --prefix doctest\n\ngit clone https://github.com/Dobiasd/FunctionalPlus\ncmake -S FunctionalPlus/test -B FunctionalPlus/build -D \"CMAKE_PREFIX_PATH=${PWD}/doctest\"\ncmake --build FunctionalPlus/build\n(cd FunctionalPlus/build; ctest)\n````\n\n\n### way 2: using [CMake's ExternalProject](https://cmake.org/cmake/help/latest/module/ExternalProject.html)\n\nYou can also add `FunctionalPlus` as an `ExternalProject` to your CMakeLists.\n\nThe benefits of this:\n\n- No installation\n- Better version control with the `GIT_TAG`\n  - Always get the latest version when `GIT_TAG master`\n  - When you build your project, it will automatically update the headers if there is a change\n  - Or get the specific version by setting it to a specific commit point\n\n```cmake\ncmake_minimum_required(VERSION 3.8)\nproject(FplusMinimalExternalExample)\n\ninclude(ExternalProject)\nExternalProject_Add(\n    functional_plus\n    GIT_REPOSITORY https://github.com/Dobiasd/FunctionalPlus.git\n    GIT_TAG master\n\n    SOURCE_DIR \"${CMAKE_BINARY_DIR}/thirdparty/fplus\"\n\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND \"\"\n    INSTALL_COMMAND \"\"\n\n    LOG_DOWNLOAD ON\n    LOG_BUILD ON\n)\n\nExternalProject_Get_Property(functional_plus SOURCE_DIR)\n\nadd_executable(main src/main.cpp)\nadd_dependencies(main functional_plus)\ntarget_compile_features(main PRIVATE cxx_std_14)\ntarget_include_directories(main PRIVATE \"${SOURCE_DIR}\")\n```\n\n\n### way 3: using [CMake 3.14 FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html)\n\nThis should be preferred over the\n[ExternalProject](#way-2-using-cmakes-externalproject) method.\n\nThis has similar benefits, but it's easier to set up in your CMakeLists.txt.\n\n```cmake\ncmake_minimum_required(VERSION 3.14)\nproject(FplusMinimalExternalExample)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    functional_plus\n    GIT_REPOSITORY https://github.com/Dobiasd/FunctionalPlus.git\n    GIT_TAG master\n)\nFetchContent_MakeAvailable(functional_plus)\n\nadd_executable(main src/main.cpp)\ntarget_compile_features(main PRIVATE cxx_std_14)\ntarget_link_libraries(main PRIVATE FunctionalPlus::fplus)\n```\n\n\n### way 4: using [cget](https://github.com/pfultz2/cget/)\n\n```bash\n# Setup up toolchain to use c++14\ncget init --std=c++14\n# Test and install\ncget install Dobiasd/FunctionalPlus\n```\n\n\n### way 5: download manually\n\nJust [download](https://github.com/Dobiasd/FunctionalPlus/archive/master.zip)/extract FunctionalPlus and tell your compiler to use the `include` directory.\n\n\n### way 6: using [Conan C/C++ package manager](https://conan.io)\n\nJust add a *conanfile.txt* with FunctionalPlus as a requirement and chose the generator for your project.\n\n```\n[requires]\nfunctionalplus/0.2.25\n\n[generators]\ncmake\n```\n\nThen install it:\n\n```bash\nconan install conanfile.txt\n```\n\n\n### way 7: using [conda-forge](https://conda-forge.org/)\n\n```bash\nconda config --add channels conda-forge\nconda install FunctionalPlus\n```\n\nVisit [`conda-forge/FunctionalPlus-feedstock`](https://github.com/conda-forge/FunctionalPlus-feedstock) for more details.\n\n\n### way 8: using [Homebrew](https://brew.sh/)\n\n```bash\nbrew install functionalplus\n```\n\nAnd then, you can add **FunctionalPlus** as a dependency in your CMake project [as in way 1](#cmake-dependency).\n\nIf you're not using CMake, you might need to add `$(brew --prefix functionalplus)/include` to the additional include paths for your compiler.\n\n\n### way 9: using the \"all in one\" include file\n\n[include_all_in_one/include/fplus/fplus.hpp](include_all_in_one/include/fplus/fplus.hpp) is a standalone header that groups all FunctionalPlus code.\n\nFor example, download this file into external/fplus/include/fplus, like this:\n\n````bash\nmkdir -p external/fplus/include/fplus\nwget -O external/fplus/include/fplus/fplus.hpp https://raw.githubusercontent.com/Dobiasd/FunctionalPlus/master/include_all_in_one/include/fplus/fplus.hpp\n````\n\nThen, compile like this:\n````bash\ng++ --std=c++14 src/main.cpp -Iexternal/fplus/include\n````\n\nor, with CMake:\n````cmake\ncmake_minimum_required(VERSION 3.8)\nproject(YourProjectName)\nadd_executable(main src/main.cpp)\ntarget_compile_features(main PRIVATE cxx_std_14)\ntarget_include_directories(main PRIVATE external/fplus/include)\n````\n\nYou can also use this standalone header on [Compiler Explorer](https://godbolt.org): See [this example](https://godbolt.org/z/arnEx7). Just add a line like this:\n````cpp\n#include \"https://raw.githubusercontent.com/Dobiasd/FunctionalPlus/master/include_all_in_one/include/fplus/fplus.hpp\"\n````\n\n### way 10: using [vcpkg](https://github.com/Microsoft/vcpkg)\n\nYou can download and install FunctionalPlus using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install fplus\n\nThe fplus port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.306640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.1728515625,
          "content": "![logo](logo/fplus.png)\n\n[![CI](https://github.com/Dobiasd/FunctionalPlus/workflows/ci/badge.svg)](https://github.com/Dobiasd/FunctionalPlus/actions)\n[![(License Boost 1.0)](https://img.shields.io/badge/license-boost%201.0-blue.svg)][license]\n\n[license]: http://www.boost.org/LICENSE_1_0.txt\n\n\nFunctionalPlus\n==============\n**helps you write concise and readable C++ code.**\n\nTable of contents\n-----------------\n  * [Introduction](#introduction)\n  * [Usage examples](#usage-examples)\n  * [Type deduction and useful error messages](#type-deduction-and-useful-error-messages)\n  * [Tutorial](#tutorial)\n  * [Forward application and composition](#forward-application-and-composition)\n  * [Finding the functions you need](#finding-the-functions-you-need)\n  * [Performance](#performance)\n  * [Comparison with range-v3](#comparison-with-range-v3)\n  * [Requirements and Installation](#requirements-and-installation)\n\n\nIntroduction\n------------\nGreat code should mostly be self-documenting, but while using C++ in reality you can find yourself dealing with low-level stuff like iterators or hand-written loops that distract from the actual essence of your code.\n\n**FunctionalPlus is a small header-only library** supporting you in reducing code noise and in dealing with only one single level of abstraction at a time. By increasing brevity and maintainability of your code it can improve productivity (and fun!) in the long run. It pursues these goals by providing pure and easy-to-use functions that free you from implementing commonly used flows of control over and over again.\n\nSay you have a list of numbers and are interested in the odd ones only.\n\n```c++\nbool is_odd_int(int x) { return x % 2 != 0; }\n\nint main()\n{\n    typedef vector<int> Ints;\n    Ints values = {24, 11, 65, 44, 80, 18, 73, 90, 69, 18};\n    // todo: get odd numbers from values ...\n}\n```\n\nThere are different possibilities to attain your goal. Some of them are:\n\n1. write a (range based) for loop\n ```c++\n     Ints odds;\n     for (int x : values)\n     {\n         if (is_odd_int(x))\n         {\n             odds.push_back(x);\n         }\n     }\n ```\n\n2. use `std::copy_if` from the STL\n ```c++\n     Ints odds;\n     std::copy_if(std::begin(values), std::end(values),\n             std::back_inserter(odds), is_odd_int);\n ```\n\n3. use `keep_if` from `FunctionalPlus`\n ```c++\n     auto odds = fplus::keep_if(is_odd_int, values);\n ```\n\nIf you think version 3 could be the one most pleasant to work with, you might like FunctionalPlus.\nAnd if you still think the hand-written for loop is easier to understand, also consider what would happen if the loop body (i.e. a corresponding lambda function in the call to `fplus::keep_if`) would be much longer. When reading `keep_if` you would still immediately know that `odds` can only contain elements that came from `values` and were selected by some, possibly complicated, predicate. In the for loop case you have no idea what is happening until you read the whole loop body. The loop version probably would need a comment at the top stating what the use of `keep_if` would tell at first glance.\n\n\nUsage examples\n--------------\nBelow are some short examples showing nice things you can do with functions and containers using FunctionalPlus.\n\n### The same old song\nYou can test the content of a container for various properties, e.g.\n```c++\n#include <fplus/fplus.hpp>\n#include <iostream>\n\nint main()\n{\n    std::list<std::string> things = {\"same old\", \"same old\"};\n    if (fplus::all_the_same(things))\n        std::cout << \"All things being equal.\" << std::endl;\n}\n```\n\n### The I in our `team`\nThere also are some convenience functions for retrieving properties of containers. For example you can count the occurrences of a character in a string.\n```c++\n#include <fplus/fplus.hpp>\n#include <iostream>\n\nint main()\n{\n    std::string team = \"Our team is great. I love everybody I work with.\";\n    std::cout << \"There actually are this many 'I's in team: \" <<\n        fplus::count(\"I\", fplus::split_words(false, team)) << std::endl;\n}\n```\n\nOutput:\n\n```\nThere actually are this many 'I's in team: 2\n```\n\n### The cutest kitty\nFinding the highest rated element in a container is very simple compared to a hand-written version([1](https://gist.github.com/Dobiasd/a4e7aa9c25a3dd4c0522d75a71e2a867#file-cuteness-cpp-L28-L38), [2](https://gist.github.com/Dobiasd/ca9963ecafa786a18bd5990414fd9a59#file-cuteness2-cpp-L28-L31)).\n```c++\n#include <fplus/fplus.hpp>\n#include <iostream>\n\nstruct cat\n{\n    double cuteness() const\n    {\n        return softness_ * temperature_ * roundness_ * fur_amount_ - size_;\n    }\n    std::string name_;\n    double softness_;\n    double temperature_;\n    double size_;\n    double roundness_;\n    double fur_amount_;\n};\n\nvoid main()\n{\n    std::vector<cat> cats = {\n        {\"Tigger\",   5, 5, 5, 5, 5},\n        {\"Simba\",    2, 9, 9, 2, 7},\n        {\"Muffin\",   9, 4, 2, 8, 6},\n        {\"Garfield\", 6, 5, 7, 9, 5}};\n\n    auto cutest_cat = fplus::maximum_on(std::mem_fn(&cat::cuteness), cats);\n\n    std::cout << cutest_cat.name_ <<\n        \" is happy and sleepy. *purr* *purr* *purr*\" << std::endl;\n}\n```\n\nOutput:\n\n```\nMuffin is happy and sleepy. *purr* *purr* *purr*\n```\n\n### Function composition, binding, and map creation\nLet's say you have the following function [given](https://gist.github.com/Dobiasd/17f5eeab2ba0ee6631394f149fc61ce2).\n```c++\nstd::list<int> collatz_seq(int x);\n```\n\nAnd you want to create an `std::map<std::uint64_t, std::string>` containing string representations of the [Collatz sequences](https://en.wikipedia.org/wiki/Collatz_conjecture) for all numbers below 30. You can implement this nicely in a functional way too.\n\n```c++\n#include <fplus/fplus.hpp>\n#include <iostream>\n\n// std::list<std::uint64_t> collatz_seq(std::uint64_t x) { ... }\n\nint main()\n{\n    typedef std::list<int> Ints;\n\n    // [1, 2, 3 ... 29]\n    auto xs = fplus::numbers<Ints>(1, 30);\n\n    // A function that does [1, 2, 3, 4, 5] -> \"[1 => 2 => 3 => 4 => 5]\"\n    auto show_ints = fplus::bind_1st_of_2(fplus::show_cont_with<Ints>, \" => \");\n\n    // A composed function that calculates a Collatz sequence and shows it.\n    auto show_collats_seq = fplus::compose(collatz_seq, show_ints);\n\n    // Associate the numbers with the string representation of their sequences.\n    auto collatz_dict = fplus::create_map_with(show_collats_seq, xs);\n\n    // Print some of the sequences.\n    std::cout << collatz_dict[13] << std::endl;\n    std::cout << collatz_dict[17] << std::endl;\n}\n```\n\nOutput:\n\n```\n[13 => 40 => 20 => 10 => 5 => 16 => 8 => 4 => 2 => 1]\n[17 => 52 => 26 => 13 => 40 => 20 => 10 => 5 => 16 => 8 => 4 => 2 => 1]\n```\n\nThe functions shown not only work with default STL containers like `std::vector`, `std::list`, `std::deque`, `std::string` etc. but also with custom containers providing a similar interface.\n\n\nType deduction and useful error messages\n----------------------------------------\n\nFunctionalPlus deduces types for you where possible. Let's take one line of code from the Collatz example:\n```c++\n    auto show_collats_seq = fplus::compose(collatz_seq, show_ints);\n```\n\n`collatz_seq` is a function taking an `uint64_t` and returning a `list<uint64_t>`. `show_ints` takes a `list<uint64_t>` and returns a `string`. By making use of `function_traits`, [written by kennyim](https://github.com/kennytm/utils/blob/master/traits.hpp), it is possible to automatically deduce the expression `fplus::compose(collatz_seq, show_ints)` as being a function taking an `uint64_t` and returning a `string`, so you do not have to manually provide type hints to the compiler.\n\nIf two functions whose \"connecting types\" do not match are passed in, an unambiguous error message describing the issue will be generated. FunctionalPlus uses compile time assertions to avoid the confusingly long error messages compilers generate when faced with type errors in function templates.\n\nChanging the way you program from \"writing your own loops and nested ifs\" to \"composing and using small functions\" will result in more errors at compile time but will pay out by having fewer errors at runtime. Also, more precise compile-time errors will reduce the time spent debugging.\n\nTutorial\n--------\n\nThe article \"[Functional programming in C++ with the FunctionalPlus library; today: HackerRank challenge Gemstones](https://github.com/Dobiasd/articles/blob/master/functional_programming_in_cpp_with_the_functionalplus_library_today_hackerrank_challange_gemstones.md)\" provides a smooth introduction into the library by showing how one could develop an elegant solution to a problem using the FunctionalPlus approach.\n\nAlso on Udemy there is a [course \"Functional Programming using C++\"](https://www.udemy.com/functional-programming-using-cpp/) that makes heavy use of FunctionalPlus to explain general functional concepts.\n\n\nForward application and composition\n-----------------------------------\n\nThe \"Gemstones\" tutorial above explains how one can apply functional thinking to arrive at the solution below for the following problem:\n\n> Find the number of characters present in every line of an input text.\n\n```c++\nstd::string gemstone_count(const std::string& input)\n{\n    using namespace fplus;\n\n    typedef std::set<std::string::value_type> characters;\n\n    const auto lines = split_lines(false, input); // false = no empty lines\n\n    const auto sets = transform(\n        convert_container<characters, std::string>,\n        lines);\n\n    // Build the intersection of all given character sets (one per line).\n    const auto gem_elements = fold_left_1(\n        set_intersection<characters>, sets);\n\n    return show(size_of_cont(gem_elements));\n}\n```\n\nBy using the functionality from `namespace fwd`, you can get along without temporary variables, and make it clear that the whole process is simply pushing the input through a chain of functions, similar to the pipe concept in the Unix command line.\n\n```c++\nstd::string gemstone_count_fwd_apply(const std::string& input)\n{\n    using namespace fplus;\n    typedef std::set<std::string::value_type> characters;\n    return fwd::apply(\n        input\n        , fwd::split_lines(false)\n        , fwd::transform(convert_container<characters, std::string>)\n        , fwd::fold_left_1(set_intersection<characters>)\n        , fwd::size_of_cont()\n        , fwd::show()\n    );\n}\n```\n\nIn `fplus::fwd::` you find many `fplus::` functions again, but in a partially [curried](http://stackoverflow.com/a/36321/1866775) version, i.e. `fplus::foo : (a, b, c) -> d` has its counterpart with `fplus::foo : (a, b) -> (c -> d)`. This makes the style above possible.\n\nAlternatively to the forward application version, you can also write [point-free](https://en.wikipedia.org/wiki/Tacit_programming) and define your function by composition:\n\n```c++\nusing namespace fplus;\ntypedef std::set<std::string::value_type> characters;\n\nconst auto gemstone_count_fwd_compose = fwd::compose(\n    fwd::split_lines(false),\n    fwd::transform(convert_container<characters, std::string>),\n    fwd::fold_left_1(set_intersection<characters>),\n    fwd::size_of_cont(),\n    fwd::show()\n);\n```\n\nBy the way, in case you need the parameters of a binary function in reverse order, `namespace fplus::fwd::flip` also exists. `fplus::bar : (a, b) -> c` does not only have its analog in `fplus::fwd::bar : a -> b -> c` but also in `fplus::fwd::flip::bar : b -> a -> c`.\n\n\nFinding the functions you need\n------------------------------\nIf you are looking for a specific FunctionalPlus function you do not know the name of yet, you can of course use the auto-complete feature of your IDE to browse the content of the `namespace fplus`. But the recommended way is to use the **[FunctionalPlus API search website](http://www.editgym.com/fplus-api-search/)**. You can quickly search by keywords or function type signatures with it. If you prefer, you can also [browse the source code using Sourcegraph](https://sourcegraph.com/github.com/Dobiasd/FunctionalPlus/-/tree/include/fplus).\n\n\nPerformance\n-----------\n\nThe basic functions are fast, thanks to C++'s concept of abstraction without overhead. Here are some measurements from the first example, taken on a standard desktop PC, compiled with GCC and the `O3` flag.\n```\n5000 random numbers, keep odd ones, 20000 consecutive runs accumulated\n----------------------------------------------------------------------\n\n| Hand-written for loop | std::copy_if | fplus::keep_if |\n|-----------------------|--------------|----------------|\n|               0.632 s |      0.641 s |        0.627 s |\n```\n\nSo the compiler seems to do a very good job optimizing and inlining everything to basically equal machine code performance-wise.\n\nThe more complex functions though sometimes could be written in a more optimized way. If you use FunctionalPlus in a performance-critical scenario and profiling shows you need a faster version of a function [please let me know](https://github.com/Dobiasd/FunctionalPlus/issues) or [even help improving FunctionalPlus](https://github.com/Dobiasd/FunctionalPlus/pulls).\n\nFunctionalPlus internally often can operate in-place if a given container is an r-value (e.g. in chained calls) and thus avoids many unnecessary allocations and copies. But this is not the case in all situations. However, thanks to working with a multi-paradigm language one easily can combine manually optimized imperative code with `fplus` functions. Luckily experience (aka. profiling) shows that in most cases the vast majority of code in an application is not relevant for overall performance and memory consumption. So initially focusing on developer productivity and readability of code is a good idea.\n\n\nComparison with range-v3\n------------------------\n\nFunctionalPlus and [range-v3](https://github.com/ericniebler/range-v3) ([basis](https://ericniebler.github.io/std/wg21/D4128.html) for `ranges` [in C++-20](https://en.cppreference.com/w/cpp/ranges)) do have things in common, as the following code snippet shows.\n\n```c++\nconst auto times_3 = [](int i){return 3 * i;};\nconst auto is_odd_int = [](int i){return i % 2 != 0;};\nconst auto as_string_length = [](int i){return std::to_string(i).size();};\n\n// FunctionalPlus\nusing namespace fplus;\nconst auto result_fplus = fwd::apply(\n    numbers(0, 15000000)\n    , fwd::transform(times_3)\n    , fwd::drop_if(is_odd_int)\n    , fwd::transform(as_string_length)\n    , fwd::sum());\n\n// range-v3\nconst auto result_range_v3 =\n    accumulate(\n        views::ints(0, ranges::unreachable)\n        | views::take(15000000)\n        | views::transform(times_3)\n        | views::remove_if(is_odd_int)\n        | views::transform(as_string_length), 0);\n```\n\nThere are some differences though. Range-v3 ranges are lazy, which means no intermediate memory is allocated during the single steps of a processing chain like the above.\nWhen using FunctionalPlus on the other hand you work with normal STL containers. Also [implementing a new function](https://github.com/Dobiasd/FunctionalPlus/blob/a17fc716d40a4370eed13f16e7d9105c4cc75e26/include/fplus/generate.hpp#L19) is simpler compared to [writing a new range adaptor](https://github.com/ericniebler/range-v3/blob/4cfcb59c3db1c279d72c64ccf15de3c724a0362d/include/range/v3/algorithm/generate.hpp#L32). Additionally FunctionalPlus provides much more functions out of the box and has the [API search website](http://www.editgym.com/fplus-api-search/). So the choice between the two libraries depends on your preferences and the project's needs.\n\n\nRequirements and Installation\n-----------------------------\n\nA **C++14**-compatible compiler is needed. Compilers from these versions on are fine:\n* GCC ( >= 4.9 )\n* Clang ( >= 3.7 with libc++ >= 3.7 )\n* Visual Studio ( >= 2015 )\n* XCode ( >= 9 )\n\nGuides for different ways to install FunctionalPlus can be found in [INSTALL.md](INSTALL.md).\n\n\nDisclaimer\n----------\nThe functionality in this library initially grew due to my personal need for it while using C++ regularly. I try my best to make it error-free and as comfortable to use as I can. The API still might change in the future. If you have any suggestions, find errors, miss some functions, or want to give general feedback/criticism, I'd [love to hear from you](https://github.com/Dobiasd/FunctionalPlus/issues). Of course, [contributions](CONTRIBUTING.md) are also very welcome.\n\n\nLicense\n-------\nDistributed under the Boost Software License, Version 1.0.\n(See accompanying file [`LICENSE`](https://github.com/Dobiasd/FunctionalPlus/blob/master/LICENSE) or copy at\n[http://www.boost.org/LICENSE_1_0.txt](http://www.boost.org/LICENSE_1_0.txt))\n"
        },
        {
          "name": "all",
          "type": "tree",
          "content": null
        },
        {
          "name": "api_search",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.txt",
          "type": "blob",
          "size": 0.0634765625,
          "content": "[requires]\ndoctest/2.4.11\n\n[generators]\nCMakeToolchain\nCMakeDeps\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "include_all_in_one",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}