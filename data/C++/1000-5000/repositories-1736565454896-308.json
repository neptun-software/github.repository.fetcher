{
  "metadata": {
    "timestamp": 1736565454896,
    "page": 308,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cycfi/elements",
      "stars": 3281,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.046875,
          "content": "---\nAccessModifierOffset: -3\nIndentWidth: 3\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.330078125,
          "content": "# EditorConfig configuration\n# http://editorconfig.org\n\n# Top-most EditorConfig file\nroot = true\n\n# UTF-8 charset, set indent to spaces with width of three,\n# with no trailing whitespaces and a newline ending every file.\n[*]\ncharset = utf-8\nindent_size = 3\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.513671875,
          "content": ".DS_Store\n\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\n_build/\nDerivedData/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n\n## Other\n*.moved-aside\n*.xccheckout\n*.xcscmblueprint\n*.user\n/.vscode/\n/.idea/\n/build/\n/cmake-build-debug/\n/cmake-build-release/\n/.vs/\n/CMakeSettings.json\n/docs/antora/node_modules/\n/docs/antora/build/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.0927734375,
          "content": "###############################################################################\n#  Copyright (c) 2016-2023 Joel de Guzman\n#  Copyright (c) 2020 Michał Urbański\n#\n#  Distributed under the MIT License (https://opensource.org/licenses/MIT)\n###############################################################################\ncmake_minimum_required(VERSION 3.15.0)\n\nproject(elements LANGUAGES C CXX)\n\nset(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n# Set the minimum required C++ standard to C++20\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\ninclude(ElementsConfigCommon)\n\noption(ELEMENTS_BUILD_EXAMPLES \"build Elements library examples\" ON)\noption(ELEMENTS_ENABLE_LTO \"enable link time optimization for Elements targets\" OFF)\nset(ELEMENTS_HOST_UI_LIBRARY \"\" CACHE STRING \"gtk, cocoa or win32\")\noption(ELEMENTS_HOST_ONLY_WIN7 \"If host UI library is win32, reduce elements features to support Windows 7\" OFF)\n\nadd_subdirectory(lib)\n\nif (ELEMENTS_BUILD_EXAMPLES)\n   set(ELEMENTS_ROOT ${PROJECT_SOURCE_DIR})\n   add_subdirectory(examples)\nendif()\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.03125,
          "content": "# ![Elements-Logo](https://cycfi.github.io/assets/img/elements/elements.png) Elements C++ GUI library\n\n[![CMake Build Matrix](https://github.com/cycfi/elements/workflows/Build/badge.svg)](https://github.com/cycfi/elements/actions?query=workflow%3ABuild)\n\n\n## Introduction\n\n![alt Elements Sampler](https://cycfi.github.io/assets/img/elements/photon_sampler.jpg)\n\nElements is a lightweight, fine-grained, resolution-independent, extremely modular GUI library. The library is written using modern C++20 language features. It has a declarative interface with a sensible and easy-to-use Domain Specific Embedded Languages (DSEL) syntax for constructing the GUI elements. A declarative description of the GUI is written exclusively in C++, and therefore, there is no need for an external visual GUI editor or code generator.\n\nElements is embeddable, meaning you can embed it in any application, and it will play well with other GUI libraries and frameworks. This also implies that you can utilize it for the creation of plugins. It does not own the event loop and is able to co-exist with components within a plugin host, such as [VST](https://en.wikipedia.org/wiki/Virtual_Studio_Technology) and [AU](https://en.wikipedia.org/wiki/Audio_Units). Porting to a new host target is straightforward, requiring the porting of only a few files.\n\nElements is distributed under the liberal and non-viral MIT License.\n\n## Status\n\nPlease take note that Elements is still very much in flux as we are inching closer towards a version 1.0 release. The API and code is still undergoing continuous changes, and for that matter, Elements is not yet \"production ready\". But that should not prevent you from using Elements now! It is already in a very usable form, and more people using it will ultimately make it more robust when bugs are reported and fixed. API and usability matters and I very much welcome suggestions and contributions. Hey, this is an open source project! If you like the design, concepts and ideas behind Elements, I very much welcome collaboration.\n\n## News\n\n**March 28, 2024:**\nI decided to bring the Cairo-based backend of Elements back into the fold. It will be the master branch once again. The Skia backend version is still very much in active development, but it still needs a lot of testing and work, especially with the way Skia is integrated.\n\nFollow [this link](news.md) for details.\n\n## Discord\n\nFeel free to join the [discord channel](https://discord.gg/NJkadSx) for discussion and chat with the developers.\n\n## Documentation\n\nDocumentation is work in progress. Stay tuned...\n\n1. [Gallery](http://cycfi.github.io/elements/elements/gallery.html)\n2. [Setup and Installation](http://cycfi.github.io/elements/elements/setup.html)\n3. [Design Aspects](http://cycfi.github.io/elements/elements/aspects.html)\n4. [Layout](http://cycfi.github.io/elements/elements/layout.html)\n\n## <a name=\"jdeguzman\"></a>About the Author\n\n<img align=\"right\" src=\"https://github.com/cycfi/elements/blob/assets/images/joel.jpg?raw=true\" width=\"200\">\n\nJoel got into electronics and programming in the 80s because almost\neverything in music, his first love, is becoming electronic and digital.\nSince then, he builds his own guitars, effect boxes and synths. He enjoys\nplaying distortion-laden rock guitar, composes and produces his own music in\nhis home studio.\n\nJoel de Guzman is the principal architect and engineer at [Cycfi\nResearch](https://www.cycfi.com/). He is a software engineer specializing in\nadvanced C++ and an advocate of Open Source. He has authored a number of\nhighly successful Open Source projects such as\n[Boost.Spirit](http://tinyurl.com/ydhotlaf),\n[Boost.Phoenix](http://tinyurl.com/y6vkeo5t) and\n[Boost.Fusion](http://tinyurl.com/ybn5oq9v). These libraries are all part of\nthe [Boost Libraries](http://tinyurl.com/jubgged), a well respected,\npeer-reviewed, Open Source, collaborative development effort.\n\n-------------------------------------------------------------------------------\n\n*Copyright (c) 2014-2024 Joel de Guzman. All rights reserved.*\n*Distributed under the [MIT License](https://opensource.org/licenses/MIT)*\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "news.md",
          "type": "blob",
          "size": 4.5458984375,
          "content": "# News\n\n**March 28, 2024:**\nI decided to bring the Cairo-based backend of Elements back into the fold. It will be the master branch once again. The Skia backend version is still very much in active development, but it still needs a lot of testing and work, especially with the way Skia is integrated (more on that below). The APIs of elements with Skia and Cairo-based backends are essentially in sync right now. There are some necessary API changes, but I made sure, as best as I could, to apply deprecation warnings so as not to cause too much disruption when upgrading to the latest code.\n\nThe latest code that uses Cairo is in the `cairo_2024` branch. This will become the new master. The current master will become the `skia_2024` branch. I am now trying to avoid prebuilt libraries, as I find them too unwieldy to work with and difficult to maintain. The `cairo_2024` branch, for example, now uses `pkg-config`, which obviously requires a package manager that supports it, with integration with CMake. In my development work, I use VCPKG on Windows. I find that it only requires `pkgconf`, `cairo`, and `libwebp` to get the `cairo_2024` branch building. Installing Cairo already brings in the other dependencies.\n\nIntegrating Skia, on the other hand, is a mess! Currently, prebuilt binaries are automatically installed via CMake. But this strategy has proven to be VERY difficult to maintain. Windows, for example, requires binaries for x86-64 (forget 32-bit!) and arm64 in both debug and release modes, as well as Clang and MSVC! And the situation is fragile! For example, a prebuilt binary for VS 2022 may not necessarily link properly with prebuilt binary for VS 2019. And then multiply that with the OSes supported, and it becomes a combinatorial explosion nightmare! I intend to find a solution to this madness. One solution is to rely on VCPKG, as it is the only package manager that supports Skia on all platforms.\n\nThe longer-term plan is to complete the port of the Cairo backend into the Artist library, find a reasonable packaging solution for Skia, fix the instabilities of Elements on Wayland, and unify the `skia_2024` and `cairo_2024` (soon to be master) branches. The develop branch will cease to exist, BTW. Development will happen on feature branches, with frequent merges into the `master` branch.\n\n**December 5, 2023:**\nThe master branch now contains the code base using the Artist library for 2D canvas\ndrawing (https://github.com/cycfi/artist).\n\nFor those who have not been following recently, the Artist 2D Canvas Library is an abstraction layer with an API\ninspired by the HTML5 canvas API. The library presents a lean API modeled after the HTML Canvas 2D Context\nspecification. The API is a not-so-thin layer above various 2D platform-specific and cross-platform 2D\n\"backend\" graphics libraries, such as Skia and Quartz-2D.\n\nThe artist library replaces the original cairo based  canvas implementation used by elements. The classic\ncairo implementation is now in the `cairo_2023` branch. At this point, as long as you are using the examples\nas a starting point and usage guide, code cairo_2023 is fully compatible with the artist based code, which\nis now in the `master` branch.\n\n**19 January 2021:** Added Child Windows to develop (will merge to master in due time). [See Example](https://bit.ly/3iLMJt2).\n\n**25 September 2020:** Added [thumbwheels](https://github.com/cycfi/elements/issues/231).\n\n**12 September 2020:** Linux [Artist 2D Canvas Library](https://github.com/cycfi/artist) port feature complete.\n\n**10 September 2020:** Windows [Artist 2D Canvas Library](https://github.com/cycfi/artist) port feature complete.\n\n**7 September 2020: MacOS** [Artist 2D Canvas Library](https://github.com/cycfi/artist) port feature complete.\n\n**22 June 2020:** Removed dependency on Boost. This requires some API changes to the `app` with additional arguments. See examples.\n\n**26 May 2020:** Introducing the [Artist 2D Canvas Library](https://github.com/cycfi/artist). The Artist library will eventually replace Element's 2d canvas implementation.\n\n**23 May 2020: Work in progress** `notebook` gallery factory (`notebook` branch).\n\n**8 April 2020: Simplified installation** (Infra and Json are now header-only submodules)\n\n**11 March 2020:** Added [Layout documentation](http://cycfi.github.io/elements/layout).\n\n**3 March 2020: Added** [Design Aspects documentation](http://cycfi.github.io/elements/aspects).\n\n**23 February 2020:** Setup and Installation guide updated for Windows and Linux.\n\n**22 February 2020:** Improved font support\n\n**01 September 2019:** Linux port completed\n\n**12 August 2019:** Windows port completed\n\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}