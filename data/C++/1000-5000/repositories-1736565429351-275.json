{
  "metadata": {
    "timestamp": 1736565429351,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xtensor-stack/xtensor",
      "stars": 3397,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.6083984375,
          "content": "BasedOnStyle: Mozilla\n\nAccessModifierOffset: '-4'\nAlignAfterOpenBracket: BlockIndent\nAlignEscapedNewlines: Left\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\n# Forbid one line lambdas because clang-format makes a weird split when\n# single instructions lambdas are too long.\nAllowShortLambdasOnASingleLine: Empty\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: AfterComma\nBreakStringLiterals: false\nColumnLimit: '110'\nConstructorInitializerIndentWidth: '4'\nContinuationIndentWidth: '4'\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat: false\nEmptyLineAfterAccessModifier: Always\nEmptyLineBeforeAccessModifier: Always\nExperimentalAutoDetectBinPacking: true\nIncludeBlocks: Regroup\nIncludeCategories:\n- Regex: <[^.]+>\n  Priority: 1\n- Regex: <xtensor/.+>\n  Priority: 3\n- Regex: <.+>\n  Priority: 2\n- Regex: '\"xtensor/.+\"'\n  Priority: 4\n- Regex: '\".+\"'\n  Priority: 5\nIndentCaseLabels: true\nIndentWidth: '4'\nIndentWrappedFunctionNames: false\nInsertBraces: true\nInsertTrailingCommas: Wrapped\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nLanguage: Cpp\nMaxEmptyLinesToKeep: '2'\nNamespaceIndentation: All\nObjCBlockIndentWidth: '4'\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPackConstructorInitializers: Never\nPenaltyBreakAssignment: 100000\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyBreakComment: 10\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakTemplateDeclaration: 0\nPenaltyExcessCharacter: 10\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 10\nPointerAlignment: Left\nQualifierAlignment: Custom  # Experimental\nQualifierOrder: [inline, static, constexpr, const, volatile, type]\nReflowComments: true\nSeparateDefinitionBlocks: Always\nSortIncludes: CaseInsensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: '2'\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: c++14\nTabWidth: '4'\nUseTab: Never\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.666015625,
          "content": "# Doxygen output\ndocs/html/\ndocs/xml/\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Vim tmp files\n*.swp\n*~\n\n# Generated directory\ninclude/tmp/\n\n# Build directory\nbuild/\n\n# Test build artefacts\ntest/test_xtensor\ntest/CMakeCache.txt\ntest/Makefile\ntest/CMakeFiles/\ntest/cmake_install.cmake\n\n# Documentation build artefacts\ndocs/CMakeCache.txt\ndocs/xml/\ndocs/build/\ndocs/*.tmp\n\n# Jupyter artefacts\n.ipynb_checkpoints/\n\n# Pytho artefacts\n__pycache__\n\n# Generated files\n*.pc\n.vscode/settings.json\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.2607421875,
          "content": "repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.5.0\n  hooks:\n  - id: check-added-large-files\n  - id: check-case-conflict\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n  - id: mixed-line-ending\n    args: [--fix=lf]\n    exclude: \\.bat$\n  - id: check-json\n  - id: pretty-format-json\n    args: [--autofix, --top-keys=version]\n  - id: check-yaml\n    types: [file]\n    files: \\.(yaml|yml|clang-format)\n  - id: detect-private-key\n  - id: check-merge-conflict\n- repo: https://github.com/Lucas-C/pre-commit-hooks\n  rev: v1.5.4\n  hooks:\n  - id: forbid-tabs\n  - id: remove-tabs\n    args: [--whitespaces-count, '4']\n- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks\n  rev: v2.11.0\n  hooks:\n  - id: pretty-format-yaml\n    args: [--autofix, --indent, '2']\n    types: [file]\n    files: \\.(yaml|yml|clang-format)\n- repo: https://github.com/tdegeus/cpp_comment_format\n  rev: v0.2.1\n  hooks:\n  - id: cpp_comment_format\n- repo: https://github.com/tdegeus/conda_envfile\n  rev: v0.4.2\n  hooks:\n  - id: conda_envfile_parse\n    files: environment.yaml\n# Externally provided executables (so we can use them with editors as well).\n- repo: https://github.com/pre-commit/mirrors-clang-format\n  rev: v17.0.6\n  hooks:\n  - id: clang-format\n    files: .*\\.[hc]pp$\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.896484375,
          "content": "############################################################################\n# Copyright (c) Johan Mabille, Sylvain Corlay and Wolf Vollprecht          #\n# Copyright (c) QuantStack                                                 #\n#                                                                          #\n# Distributed under the terms of the BSD 3-Clause License.                 #\n#                                                                          #\n# The full license is in the file LICENSE, distributed with this software. #\n############################################################################\n\ncmake_minimum_required(VERSION 3.5)\nproject(xtensor CXX)\n\nset(XTENSOR_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n# Versionning\n# ===========\n\nfile(STRINGS \"${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_config.hpp\" xtensor_version_defines\n     REGEX \"#define XTENSOR_VERSION_(MAJOR|MINOR|PATCH)\")\nforeach(ver ${xtensor_version_defines})\n    if(ver MATCHES \"#define XTENSOR_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$\")\n        set(XTENSOR_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"\")\n    endif()\nendforeach()\nset(${PROJECT_NAME}_VERSION\n    ${XTENSOR_VERSION_MAJOR}.${XTENSOR_VERSION_MINOR}.${XTENSOR_VERSION_PATCH})\nmessage(STATUS \"Building xtensor v${${PROJECT_NAME}_VERSION}\")\n\n# Dependencies\n# ============\n\nset(xtl_REQUIRED_VERSION 0.7.5)\nif(TARGET xtl)\n    set(xtl_VERSION ${XTL_VERSION_MAJOR}.${XTL_VERSION_MINOR}.${XTL_VERSION_PATCH})\n    # Note: This is not SEMVER compatible comparison\n    if(${xtl_VERSION} VERSION_LESS ${xtl_REQUIRED_VERSION})\n        message(ERROR \"Mismatch xtl versions. Found '${xtl_VERSION}' but requires: '${xtl_REQUIRED_VERSION}'\")\n    else()\n        message(STATUS \"Found xtl v${xtl_VERSION}\")\n    endif()\nelse()\n    find_package(xtl ${xtl_REQUIRED_VERSION} REQUIRED)\n    message(STATUS \"Found xtl: ${xtl_INCLUDE_DIRS}/xtl\")\nendif()\n\nfind_package(nlohmann_json 3.1.1 QUIET)\n\n# Optional dependencies\n# =====================\n\nOPTION(XTENSOR_USE_XSIMD \"simd acceleration for xtensor\" OFF)\nOPTION(XTENSOR_USE_TBB \"enable parallelization using intel TBB\" OFF)\nOPTION(XTENSOR_USE_OPENMP \"enable parallelization using OpenMP\" OFF)\nif(XTENSOR_USE_TBB AND XTENSOR_USE_OPENMP)\n    message(\n        FATAL\n        \"XTENSOR_USE_TBB and XTENSOR_USE_OPENMP cannot both be active at once\"\n    )\nendif()\n\nif(XTENSOR_USE_XSIMD)\n    set(xsimd_REQUIRED_VERSION 11.0.0)\n    if(TARGET xsimd)\n        set(xsimd_VERSION ${XSIMD_VERSION_MAJOR}.${XSIMD_VERSION_MINOR}.${XSIMD_VERSION_PATCH})\n        # Note: This is not SEMVER compatible comparison\n        if(${xsimd_VERSION} VERSION_LESS ${xsimd_REQUIRED_VERSION})\n            message(ERROR \"Mismatch xsimd versions. Found '${xsimd_VERSION}' but requires: '${xsimd_REQUIRED_VERSION}'\")\n        else()\n            message(STATUS \"Found xsimd v${xsimd_VERSION}\")\n        endif()\n    else()\n        find_package(xsimd ${xsimd_REQUIRED_VERSION} REQUIRED)\n        message(STATUS \"Found xsimd: ${xsimd_INCLUDE_DIRS}/xsimd\")\n    endif()\nendif()\n\nif(XTENSOR_USE_TBB)\n    set(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH}\" \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\n    find_package(TBB REQUIRED)\n    message(STATUS \"Found intel TBB: ${TBB_INCLUDE_DIRS}\")\nendif()\n\nif(XTENSOR_USE_OPENMP)\n    find_package(OpenMP REQUIRED)\n    if (OPENMP_FOUND)\n        # Set openmp variables now\n\n        # Create private target just for this lib\n        # https://cliutils.gitlab.io/modern-cmake/chapters/packages/OpenMP.html\n        # Probably not safe for cmake < 3.4 ..\n        find_package(Threads REQUIRED)\n        add_library(OpenMP::OpenMP_CXX_xtensor IMPORTED INTERFACE)\n        set_property(\n            TARGET\n            OpenMP::OpenMP_CXX_xtensor\n            PROPERTY\n            INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}\n        )\n        # Only works if the same flag is passed to the linker; use CMake 3.9+ otherwise (Intel, AppleClang)\n        set_property(\n            TARGET\n            OpenMP::OpenMP_CXX_xtensor\n            PROPERTY\n            INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_FLAGS} Threads::Threads)\n\n        message(STATUS \"OpenMP Found\")\n    else()\n        message(FATAL \"Failed to locate OpenMP\")\n    endif()\nendif()\n\n# Build\n# =====\n\nset(XTENSOR_HEADERS\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xaccessible.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xaccumulator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xadapt.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xarray.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xassign.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xaxis_iterator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xaxis_slice_iterator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xblockwise_reducer.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xblockwise_reducer_functors.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xbroadcast.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xbuffer_adaptor.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xbuilder.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xchunked_array.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xchunked_assign.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xchunked_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xcomplex.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xcontainer.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xcsv.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xdynamic_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xeval.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xexception.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression_holder.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xexpression_traits.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xfixed.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xfunction.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xfunctor_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xfft.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xgenerator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xhistogram.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xindex_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xinfo.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xio.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xiterable.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xiterator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xjson.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xlayout.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xmanipulation.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xmasked_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xmath.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xmime.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xmultiindex_iterator.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xnoalias.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xnorm.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xnpy.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoffset_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoperation.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly_base.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xoptional_assembly_storage.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xpad.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xrandom.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xreducer.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xrepeat.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xscalar.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xsemantic.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xset_operation.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xshape.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xslice.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xsort.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xstorage.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrided_view.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrided_view_base.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xstrides.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_config.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_forward.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xtensor_simd.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xutils.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xvectorize.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xview.hpp\n    ${XTENSOR_INCLUDE_DIR}/xtensor/xview_utils.hpp\n)\n\nadd_library(xtensor INTERFACE)\n\ntarget_include_directories(xtensor INTERFACE\n    $<BUILD_INTERFACE:${XTENSOR_INCLUDE_DIR}>\n    $<INSTALL_INTERFACE:include>)\n\ntarget_compile_features(xtensor INTERFACE cxx_std_14)\n\ntarget_link_libraries(xtensor INTERFACE xtl)\n\nOPTION(XTENSOR_ENABLE_ASSERT \"xtensor bound check\" OFF)\nOPTION(XTENSOR_CHECK_DIMENSION \"xtensor dimension check\" OFF)\nOPTION(XTENSOR_FORCE_TEMPORARY_MEMORY_IN_ASSIGNMENTS \"xtensor force the use of temporary memory when assigning instead of an automatic overlap check\" ON)\nOPTION(BUILD_TESTS \"xtensor test suite\" OFF)\nOPTION(BUILD_BENCHMARK \"xtensor benchmark\" OFF)\nOPTION(DOWNLOAD_GTEST \"build gtest from downloaded sources\" OFF)\nOPTION(DOWNLOAD_GBENCHMARK \"download google benchmark and build from source\" ON)\nOPTION(DEFAULT_COLUMN_MAJOR \"set default layout to column major\" OFF)\nOPTION(DISABLE_VS2017 \"disables the compilation of some test with Visual Studio 2017\" OFF)\nOPTION(CPP17 \"enables C++17\" OFF)\nOPTION(CPP20 \"enables C++20 (experimental)\" OFF)\nOPTION(XTENSOR_DISABLE_EXCEPTIONS \"Disable C++ exceptions\" OFF)\nOPTION(DISABLE_MSVC_ITERATOR_CHECK \"Disable the MVSC iterator check\" ON)\n\n\nif(XTENSOR_ENABLE_ASSERT OR XTENSOR_CHECK_DIMENSION)\n    add_definitions(-DXTENSOR_ENABLE_ASSERT)\nendif()\n\nif(XTENSOR_CHECK_DIMENSION)\n    add_definitions(-DXTENSOR_ENABLE_CHECK_DIMENSION)\nendif()\n\nif(XTENSOR_FORCE_TEMPORARY_MEMORY_IN_ASSIGNMENTS)\n    add_definitions(-DXTENSOR_FORCE_TEMPORARY_MEMORY_IN_ASSIGNMENTS)\nendif()\n\nif(DEFAULT_COLUMN_MAJOR)\n    add_definitions(-DXTENSOR_DEFAULT_LAYOUT=layout_type::column_major)\nendif()\n\nif(DISABLE_VS2017)\n    add_definitions(-DDISABLE_VS2017)\nendif()\n\nif(MSVC AND DISABLE_MSVC_ITERATOR_CHECK)\n    add_compile_definitions($<$<CONFIG:Debug>:_ITERATOR_DEBUG_LEVEL=0>)\nendif()\n\nif(BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(test)\nendif()\n\nif(BUILD_BENCHMARK)\n    add_subdirectory(benchmark)\nendif()\n\nif(XTENSOR_USE_OPENMP)\n    # Link xtensor itself to OpenMP to propagate to user projects\n    target_link_libraries(xtensor INTERFACE OpenMP::OpenMP_CXX_xtensor)\nendif()\n\n# Installation\n# ============\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\ninstall(TARGETS xtensor\n        EXPORT ${PROJECT_NAME}-targets)\n\n# Makes the project importable from the build directory\nexport(EXPORT ${PROJECT_NAME}-targets\n       FILE \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake\")\n\ninstall(FILES ${XTENSOR_HEADERS}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xtensor)\n\nset(XTENSOR_CMAKECONFIG_INSTALL_DIR \"${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}\" CACHE\n    STRING \"install path for xtensorConfig.cmake\")\n\nconfigure_package_config_file(${PROJECT_NAME}Config.cmake.in\n                              \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n                              INSTALL_DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})\n\n# xtensor is header-only and does not depend on the architecture.\n# Remove CMAKE_SIZEOF_VOID_P from xtensorConfigVersion.cmake so that an xtensorConfig.cmake\n# generated for a 64 bit target can be used for 32 bit targets and vice versa.\nset(_XTENSOR_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\nunset(CMAKE_SIZEOF_VOID_P)\nwrite_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n                                 VERSION ${${PROJECT_NAME}_VERSION}\n                                 COMPATIBILITY AnyNewerVersion)\nset(CMAKE_SIZEOF_VOID_P ${_XTENSOR_CMAKE_SIZEOF_VOID_P})\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n        DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})\ninstall(EXPORT ${PROJECT_NAME}-targets\n        FILE ${PROJECT_NAME}Targets.cmake\n        DESTINATION ${XTENSOR_CMAKECONFIG_INSTALL_DIR})\n\nconfigure_file(${PROJECT_NAME}.pc.in\n               \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n                @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n        DESTINATION \"${CMAKE_INSTALL_DATADIR}/pkgconfig/\")\n\n# Write single include\n# ====================\n\nfunction(PREPEND var prefix)\n   set(listVar \"\")\n   foreach(f ${ARGN})\n      list(APPEND listVar \"${prefix}${f}\")\n   endforeach(f)\n   set(${var} \"${listVar}\" PARENT_SCOPE)\nendfunction()\n\nfunction(POSTFIX var postfix)\n   set(listVar \"\")\n   foreach(f ${ARGN})\n      list(APPEND listVar \"${f}${postfix}\")\n   endforeach(f)\n   set(${var} \"${listVar}\" PARENT_SCOPE)\nendfunction()\n\nset(XTENSOR_SINGLE_INCLUDE ${XTENSOR_HEADERS})\nstring(REPLACE \"${XTENSOR_INCLUDE_DIR}/\" \"\" XTENSOR_SINGLE_INCLUDE \"${XTENSOR_SINGLE_INCLUDE}\")\nlist(REMOVE_ITEM XTENSOR_SINGLE_INCLUDE\n    xtensor/xexpression_holder.hpp\n    xtensor/xjson.hpp\n    xtensor/xmime.hpp\n    xtensor/xnpy.hpp)\n\nPREPEND(XTENSOR_SINGLE_INCLUDE \"#include <\" ${XTENSOR_SINGLE_INCLUDE})\nPOSTFIX(XTENSOR_SINGLE_INCLUDE \">\" ${XTENSOR_SINGLE_INCLUDE})\nstring(REPLACE \";\" \"\\n\" XTENSOR_SINGLE_INCLUDE \"${XTENSOR_SINGLE_INCLUDE}\")\nstring(CONCAT XTENSOR_SINGLE_INCLUDE \"#ifndef XTENSOR\\n\" \"#define XTENSOR\\n\\n\" \"${XTENSOR_SINGLE_INCLUDE}\" \"\\n\\n#endif\\n\")\n\nfile(WRITE \"${CMAKE_BINARY_DIR}/xtensor.hpp\" \"${XTENSOR_SINGLE_INCLUDE}\")\n\ninstall(FILES \"${CMAKE_BINARY_DIR}/xtensor.hpp\"\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.521484375,
          "content": "Copyright (c) 2016, Johan Mabille, Sylvain Corlay and Wolf Vollprecht\nCopyright (c) 2016, QuantStack\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.8291015625,
          "content": "# ![xtensor](docs/source/xtensor.svg)\n\n[![GHA Linux](https://github.com/xtensor-stack/xtensor/actions/workflows/linux.yml/badge.svg)](https://github.com/xtensor-stack/xtensor/actions/workflows/linux.yml)\n[![GHA OSX](https://github.com/xtensor-stack/xtensor/actions/workflows/osx.yml/badge.svg)](https://github.com/xtensor-stack/xtensor/actions/workflows/osx.yml)\n[![GHA Windows](https://github.com/xtensor-stack/xtensor/actions/workflows/windows.yml/badge.svg)](https://github.com/xtensor-stack/xtensor/actions/workflows/windows.yml)\n[![Documentation](http://readthedocs.org/projects/xtensor/badge/?version=latest)](https://xtensor.readthedocs.io/en/latest/?badge=latest)\n[![Doxygen -> gh-pages](https://github.com/xtensor-stack/xtensor/workflows/gh-pages/badge.svg)](https://xtensor-stack.github.io/xtensor)\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/xtensor-stack/xtensor/stable?filepath=notebooks%2Fxtensor.ipynb)\n[![Join the Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/QuantStack/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nMulti-dimensional arrays with broadcasting and lazy computing.\n\n## Introduction\n\n`xtensor` is a C++ library meant for numerical analysis with multi-dimensional\narray expressions.\n\n`xtensor` provides\n\n - an extensible expression system enabling **lazy broadcasting**.\n - an API following the idioms of the **C++ standard library**.\n - tools to manipulate array expressions and build upon `xtensor`.\n\nContainers of `xtensor` are inspired by [NumPy](http://www.numpy.org), the\nPython array programming library. **Adaptors** for existing data structures to\nbe plugged into our expression system can easily be written.\n\nIn fact, `xtensor` can be used to **process NumPy data structures inplace**\nusing Python's [buffer protocol](https://docs.python.org/3/c-api/buffer.html).\nSimilarly, we can operate on Julia and R arrays. For more details on the NumPy,\nJulia and R bindings, check out the [xtensor-python](https://github.com/xtensor-stack/xtensor-python),\n[xtensor-julia](https://github.com/xtensor-stack/Xtensor.jl) and\n[xtensor-r](https://github.com/xtensor-stack/xtensor-r) projects respectively.\n\n`xtensor` requires a modern C++ compiler supporting C++14. The following C++\ncompilers are supported:\n\n - On Windows platforms, Visual C++ 2015 Update 2, or more recent\n - On Unix platforms, gcc 4.9 or a recent version of Clang\n\n## Installation\n\n### Package managers\n\nWe provide a package for the mamba (or conda) package manager:\n\n```bash\nmamba install -c conda-forge xtensor\n```\n\n### Install from sources\n\n`xtensor` is a header-only library.\n\nYou can directly install it from the sources:\n\n```bash\ncmake -DCMAKE_INSTALL_PREFIX=your_install_prefix\nmake install\n```\n\n### Installing xtensor using vcpkg\n\nYou can download and install xtensor using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n```bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install xtensor\n```\n\nThe xtensor port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Trying it online\n\nYou can play with `xtensor` interactively in a Jupyter notebook right now! Just click on the binder link below:\n\n[![Binder](docs/source/binder-logo.svg)](https://mybinder.org/v2/gh/xtensor-stack/xtensor/stable?filepath=notebooks/xtensor.ipynb)\n\nThe C++ support in Jupyter is powered by the [xeus-cling](https://github.com/jupyter-xeus/xeus-cling) C++ kernel. Together with xeus-cling, xtensor enables a similar workflow to that of NumPy with the IPython Jupyter kernel.\n\n![xeus-cling](docs/source/xeus-cling-screenshot.png)\n\n## Documentation\n\nFor more information on using `xtensor`, check out the reference documentation\n\nhttp://xtensor.readthedocs.io/\n\n## Dependencies\n\n`xtensor` depends on the [xtl](https://github.com/xtensor-stack/xtl) library and\nhas an optional dependency on the [xsimd](https://github.com/xtensor-stack/xsimd)\nlibrary:\n\n| `xtensor` | `xtl`   |`xsimd` (optional) |\n|-----------|---------|-------------------|\n|  master   | ^0.7.5  |       ^11.0.0     |\n|  0.25.0   | ^0.7.5  |       ^11.0.0     |\n|  0.24.7   | ^0.7.0  |       ^10.0.0     |\n|  0.24.6   | ^0.7.0  |       ^10.0.0     |\n|  0.24.5   | ^0.7.0  |       ^10.0.0     |\n|  0.24.4   | ^0.7.0  |       ^10.0.0     |\n|  0.24.3   | ^0.7.0  |       ^8.0.3      |\n|  0.24.2   | ^0.7.0  |       ^8.0.3      |\n|  0.24.1   | ^0.7.0  |       ^8.0.3      |\n|  0.24.0   | ^0.7.0  |       ^8.0.3      |\n|  0.23.x   | ^0.7.0  |       ^7.4.8      |\n|  0.22.0   | ^0.6.23 |       ^7.4.8      |\n\nThe dependency on `xsimd` is required if you want to enable SIMD acceleration\nin `xtensor`. This can be done by defining the macro `XTENSOR_USE_XSIMD`\n*before* including any header of `xtensor`.\n\n## Usage\n\n### Basic usage\n\n**Initialize a 2-D array and compute the sum of one of its rows and a 1-D array.**\n\n```cpp\n#include <iostream>\n#include \"xtensor/xarray.hpp\"\n#include \"xtensor/xio.hpp\"\n#include \"xtensor/xview.hpp\"\n\nxt::xarray<double> arr1\n  {{1.0, 2.0, 3.0},\n   {2.0, 5.0, 7.0},\n   {2.0, 5.0, 7.0}};\n\nxt::xarray<double> arr2\n  {5.0, 6.0, 7.0};\n\nxt::xarray<double> res = xt::view(arr1, 1) + arr2;\n\nstd::cout << res;\n```\n\nOutputs:\n\n```\n{7, 11, 14}\n```\n\n**Initialize a 1-D array and reshape it inplace.**\n\n```cpp\n#include <iostream>\n#include \"xtensor/xarray.hpp\"\n#include \"xtensor/xio.hpp\"\n\nxt::xarray<int> arr\n  {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\narr.reshape({3, 3});\n\nstd::cout << arr;\n```\n\nOutputs:\n\n```\n{{1, 2, 3},\n {4, 5, 6},\n {7, 8, 9}}\n```\n\n**Index Access**\n\n```cpp\n#include <iostream>\n#include \"xtensor/xarray.hpp\"\n#include \"xtensor/xio.hpp\"\n\nxt::xarray<double> arr1\n  {{1.0, 2.0, 3.0},\n   {2.0, 5.0, 7.0},\n   {2.0, 5.0, 7.0}};\n\nstd::cout << arr1(0, 0) << std::endl;\n\nxt::xarray<int> arr2\n  {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\nstd::cout << arr2(0);\n```\n\nOutputs:\n\n```\n1.0\n1\n```\n\n### The NumPy to xtensor cheat sheet\n\nIf you are familiar with NumPy APIs, and you are interested in xtensor, you can\ncheck out the [NumPy to xtensor cheat sheet](https://xtensor.readthedocs.io/en/latest/numpy.html)\nprovided in the documentation.\n\n### Lazy broadcasting with `xtensor`\n\nXtensor can operate on arrays of different shapes of dimensions in an\nelement-wise fashion. Broadcasting rules of xtensor are similar to those of\n[NumPy](http://www.numpy.org) and [libdynd](http://libdynd.org).\n\n### Broadcasting rules\n\nIn an operation involving two arrays of different dimensions, the array with\nthe lesser dimensions is broadcast across the leading dimensions of the other.\n\nFor example, if `A` has shape `(2, 3)`, and `B` has shape `(4, 2, 3)`, the\nresult of a broadcasted operation with `A` and `B` has shape `(4, 2, 3)`.\n\n```\n   (2, 3) # A\n(4, 2, 3) # B\n---------\n(4, 2, 3) # Result\n```\n\nThe same rule holds for scalars, which are handled as 0-D expressions. If `A`\nis a scalar, the equation becomes:\n\n```\n       () # A\n(4, 2, 3) # B\n---------\n(4, 2, 3) # Result\n```\n\nIf matched up dimensions of two input arrays are different, and one of them has\nsize `1`, it is broadcast to match the size of the other. Let's say B has the\nshape `(4, 2, 1)` in the previous example, so the broadcasting happens as\nfollows:\n\n```\n   (2, 3) # A\n(4, 2, 1) # B\n---------\n(4, 2, 3) # Result\n```\n\n### Universal functions, laziness and vectorization\n\nWith `xtensor`, if `x`, `y` and `z` are arrays of *broadcastable shapes*, the\nreturn type of an expression such as `x + y * sin(z)` is **not an array**. It\nis an `xexpression` object offering the same interface as an N-dimensional\narray, which does not hold the result. **Values are only computed upon access\nor when the expression is assigned to an xarray object**. This allows to\noperate symbolically on very large arrays and only compute the result for the\nindices of interest.\n\nWe provide utilities to **vectorize any scalar function** (taking multiple\nscalar arguments) into a function that will perform on `xexpression`s, applying\nthe lazy broadcasting rules which we just described. These functions are called\n*xfunction*s. They are `xtensor`'s counterpart to NumPy's universal functions.\n\nIn `xtensor`, arithmetic operations (`+`, `-`, `*`, `/`) and all special\nfunctions are *xfunction*s.\n\n### Iterating over `xexpression`s and broadcasting Iterators\n\nAll `xexpression`s offer two sets of functions to retrieve iterator pairs (and\ntheir `const` counterpart).\n\n - `begin()` and `end()` provide instances of `xiterator`s which can be used to\n   iterate over all the elements of the expression. The order in which\n   elements are listed is `row-major` in that the index of last dimension is\n   incremented first.\n - `begin(shape)` and `end(shape)` are similar but take a *broadcasting shape*\n   as an argument. Elements are iterated upon in a row-major way, but certain\n   dimensions are repeated to match the provided shape as per the rules\n   described above. For an expression `e`, `e.begin(e.shape())` and `e.begin()`\n   are equivalent.\n\n### Runtime vs compile-time dimensionality\n\nTwo container classes implementing multi-dimensional arrays are provided:\n`xarray` and `xtensor`.\n\n - `xarray` can be reshaped dynamically to any number of dimensions. It is the\n   container that is the most similar to NumPy arrays.\n - `xtensor` has a dimension set at compilation time, which enables many\n   optimizations. For example, shapes and strides of `xtensor` instances are\n   allocated on the stack instead of the heap.\n\n`xarray` and `xtensor` container are both `xexpression`s and can be involved\nand mixed in universal functions, assigned to each other etc...\n\nBesides, two access operators are provided:\n\n - The variadic template `operator()` which can take multiple integral\n   arguments or none.\n - And the `operator[]` which takes a single multi-index argument, which can be\n   of size determined at runtime. `operator[]` also supports access with braced\n   initializers.\n\n## Performances\n\nXtensor operations make use of SIMD acceleration depending on what instruction\nsets are available on the platform at hand (SSE, AVX, AVX512, Neon).\n\n### [![xsimd](docs/source/xsimd-small.svg)](https://github.com/xtensor-stack/xsimd)\n\nThe [xsimd](https://github.com/xtensor-stack/xsimd) project underlies the\ndetection of the available instruction sets, and provides generic high-level\nwrappers and memory allocators for client libraries such as xtensor.\n\n### Continuous benchmarking\n\nXtensor operations are continuously benchmarked, and are significantly improved\nat each new version. Current performances on statically dimensioned tensors\nmatch those of the Eigen library. Dynamically dimension tensors for which the\nshape is heap allocated come at a small additional cost.\n\n### Stack allocation for shapes and strides\n\nMore generally, the library implement a `promote_shape` mechanism at build time\nto determine the optimal sequence type to hold the shape of an expression. The\nshape type of a broadcasting expression whose members have a dimensionality\ndetermined at compile time will have a stack allocated sequence type. If at\nleast one note of a broadcasting expression has a dynamic dimension\n(for example an `xarray`), it bubbles up to the entire broadcasting expression\nwhich will have a heap allocated shape. The same hold for views, broadcast\nexpressions, etc...\n\nTherefore, when building an application with xtensor, we recommend using\nstatically-dimensioned containers whenever possible to improve the overall\nperformance of the application.\n\n## Language bindings\n\n### [![xtensor-python](docs/source/xtensor-python-small.svg)](https://github.com/xtensor-stack/xtensor-python)\n\nThe [xtensor-python](https://github.com/xtensor-stack/xtensor-python) project\nprovides the implementation of two `xtensor` containers, `pyarray` and\n`pytensor` which effectively wrap NumPy arrays, allowing inplace modification,\nincluding reshapes.\n\nUtilities to automatically generate NumPy-style universal functions, exposed to\nPython from scalar functions are also provided.\n\n### [![xtensor-julia](docs/source/xtensor-julia-small.svg)](https://github.com/xtensor-stack/xtensor-julia)\n\nThe [xtensor-julia](https://github.com/xtensor-stack/xtensor-julia) project\nprovides the implementation of two `xtensor` containers, `jlarray` and\n`jltensor` which effectively wrap julia arrays, allowing inplace modification,\nincluding reshapes.\n\nLike in the Python case, utilities to generate NumPy-style universal functions\nare provided.\n\n### [![xtensor-r](docs/source/xtensor-r-small.svg)](https://github.com/xtensor-stack/xtensor-r)\n\nThe [xtensor-r](https://github.com/xtensor-stack/xtensor-r) project provides the\nimplementation of two `xtensor` containers, `rarray` and `rtensor` which\neffectively wrap R arrays, allowing inplace modification, including reshapes.\n\nLike for the Python and Julia bindings, utilities to generate NumPy-style\nuniversal functions are provided.\n\n## Library bindings\n\n### [![xtensor-blas](docs/source/xtensor-blas-small.svg)](https://github.com/xtensor-stack/xtensor-blas)\n\nThe [xtensor-blas](https://github.com/xtensor-stack/xtensor-blas) project provides\nbindings to BLAS libraries, enabling linear-algebra operations on xtensor\nexpressions.\n\n### [![xtensor-io](docs/source/xtensor-io-small.svg)](https://github.com/xtensor-stack/xtensor-io)\n\nThe [xtensor-io](https://github.com/xtensor-stack/xtensor-io) project enables the\nloading of a variety of file formats into xtensor expressions, such as image\nfiles, sound files, HDF5 files, as well as NumPy npy and npz files.\n\n## Building and running the tests\n\nBuilding the tests requires the [GTest](https://github.com/google/googletest)\ntesting framework and [cmake](https://cmake.org).\n\ngtest and cmake are available as packages for most Linux distributions.\nBesides, they can also be installed with the `conda` package manager (even on\nwindows):\n\n```bash\nconda install -c conda-forge gtest cmake\n```\n\nOnce `gtest` and `cmake` are installed, you can build and run the tests:\n\n```bash\nmkdir build\ncd build\ncmake -DBUILD_TESTS=ON ../\nmake xtest\n```\n\nYou can also use CMake to download the source of `gtest`, build it, and use the\ngenerated libraries:\n\n```bash\nmkdir build\ncd build\ncmake -DBUILD_TESTS=ON -DDOWNLOAD_GTEST=ON ../\nmake xtest\n```\n\n## Building the HTML documentation\n\nxtensor's documentation is built with three tools\n\n - [doxygen](http://www.doxygen.org)\n - [sphinx](http://www.sphinx-doc.org)\n - [breathe](https://breathe.readthedocs.io)\n\nWhile doxygen must be installed separately, you can install breathe by typing\n\n```bash\npip install breathe sphinx_rtd_theme\n```\n\nBreathe can also be installed with `conda`\n\n```bash\nconda install -c conda-forge breathe\n```\n\nFinally, go to `docs` subdirectory and build the documentation with the\nfollowing command:\n\n```bash\nmake html\n```\n\n## License\n\nWe use a shared copyright model that enables all contributors to maintain the\ncopyright on their contributions.\n\nThis software is licensed under the BSD-3-Clause license. See the\n[LICENSE](LICENSE) file for details.\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment-dev.yml",
          "type": "blob",
          "size": 0.13671875,
          "content": "name: xtensor\nchannels:\n- conda-forge\ndependencies:\n- cmake\n- xtl=0.7.5\n- xsimd=11.1.0\n- nlohmann_json\n- doctest=2.4.7\n- pre-commit\n- ninja\n"
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.1083984375,
          "content": "name: xtensor\nchannels:\n- conda-forge\ndependencies:\n- xtensor=0.24.6\n- xtensor-blas=0.20.0\n- xeus-cling=0.15.0\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.1201171875,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: mambaforge-22.9\n\nconda:\n  environment: docs/rtd_environment.yml\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtensor.pc.in",
          "type": "blob",
          "size": 0.228515625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nincludedir=${prefix}/include\n\nName: xtensor\nDescription: xtensor is a C++ library meant for numerical analysis with multi-dimensional array expressions.\nVersion: @xtensor_VERSION@\nCflags: -I${includedir}\n"
        },
        {
          "name": "xtensorConfig.cmake.in",
          "type": "blob",
          "size": 2.7236328125,
          "content": "############################################################################\n# Copyright (c) Johan Mabille, Sylvain Corlay and Wolf Vollprecht          #\n# Copyright (c) QuantStack\n#                                                                          #\n# Distributed under the terms of the BSD 3-Clause License.                 #\n#                                                                          #\n# The full license is in the file LICENSE, distributed with this software. #\n############################################################################\n\n# xtensor cmake module\n# This module sets the following variables in your project::\n#\n#   xtensor_FOUND - true if xtensor found on the system\n#   xtensor_INCLUDE_DIRS - the directory containing xtensor headers\n#   xtensor_LIBRARY - empty\n\n@PACKAGE_INIT@\n\ninclude(CMakeFindDependencyMacro)\nfind_dependency(xtl @xtl_REQUIRED_VERSION@)\n\nif(NOT TARGET @PROJECT_NAME@)\n    include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")\n    get_target_property(@PROJECT_NAME@_INCLUDE_DIRS @PROJECT_NAME@ INTERFACE_INCLUDE_DIRECTORIES)\nendif()\n\nif(XTENSOR_USE_XSIMD)\n    find_dependency(xsimd @xsimd_REQUIRED_VERSION@)\n    target_link_libraries(@PROJECT_NAME@ INTERFACE xsimd)\n    target_compile_definitions(@PROJECT_NAME@ INTERFACE XTENSOR_USE_XSIMD)\nendif()\n\nif(XTENSOR_USE_TBB)\n    find_dependency(TBB)\n    target_link_libraries(@PROJECT_NAME@ INTERFACE TBB::tbb)\n    target_compile_definitions(@PROJECT_NAME@ INTERFACE XTENSOR_USE_TBB)\nendif()\n\nif (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} VERSION_GREATER_EQUAL 3.11)\n    if(NOT TARGET xtensor::optimize)\n        add_library(xtensor::optimize INTERFACE IMPORTED)\n        # Microsoft compiler\n        if(CMAKE_${COMPILER_LANGUAGE}_COMPILER_IS_MSVC)\n            target_compile_options(xtensor::optimize INTERFACE /EHsc /MP /bigobj)\n        # gcc, clang, ...\n        else()\n            include(CheckCXXCompilerFlag)\n            CHECK_CXX_COMPILER_FLAG(-march=native arch_native_supported)\n            if(arch_native_supported)\n              target_compile_options(xtensor::optimize INTERFACE -march=native)\n          endif()\n        endif()\n    endif()\n\n    if(NOT TARGET xtensor::use_xsimd)\n        find_package(xsimd QUIET)\n        if (xsimd_FOUND)\n            add_library(xtensor::use_xsimd INTERFACE IMPORTED)\n            target_link_libraries(xtensor::use_xsimd INTERFACE xsimd)\n            target_compile_definitions(xtensor::use_xsimd INTERFACE XTENSOR_USE_XSIMD)\n        endif()\n    endif()\n\n    if(NOT TARGET xtensor::use_TBB)\n        find_package(TBB QUIET)\n        if (TBB_FOUND)\n            add_library(xtensor::use_TBB INTERFACE IMPORTED)\n            target_compile_definitions(xtensor::use_TBB INTERFACE XTENSOR_USE_TBB)\n        endif()\n    endif()\nendif()\n"
        }
      ]
    }
  ]
}