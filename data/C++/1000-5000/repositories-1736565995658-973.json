{
  "metadata": {
    "timestamp": 1736565995658,
    "page": 973,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vinniefalco/DSPFilters",
      "stars": 1884,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "build\n.waf*\n.lock*\n.*.sw*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6357421875,
          "content": "## A Collection of Useful C++ Classes for Digital Signal Processing\r\n\r\n> \"Techniques for digital signal processing are well guarded and held\r\n> close to the chest, as they have valuable applications for multimedia\r\n> content. The black art of Infinite Impulse Response (\"IIR\") filtering\r\n> has remained veiled in secrecy with little publicly available source\r\n> code...until now.\"\r\n\r\n<a href=\"https://github.com/downloads/vinniefalco/DSPFilters/DSPFiltersComplete.zip\">\r\n<img src=\"https://github.com/vinniefalco/vinniefalco.github.com/raw/master/images/DownloadNow.png\">\r\n</a>\r\n\r\n### What is this?\r\n\r\nBuilding on the work of cherished luminaries such as Sophocles Orfanidis,\r\nAndreas Antoniou, Martin Holters, and Udo Zolzer, this library harnesses\r\nthe power of C++ templates to solve a useful problem in Digital Signal\r\nProcessing: the realization of multichannel IIR filters of arbitrary order\r\nand prescribed specifications with various properties such as Butterworth,\r\nChebyshev, Elliptic, and Optimum-L (Legendre) responses. The library is\r\nprovided under the MIT license and is therefore fully compatible with\r\nproprietary usage.\r\n\r\nClasses are designed as independent re-usable building blocks. Use some or\r\nall of the provided features, or extend the functionality by writing your\r\nown objects that plug into the robust framework. Only the code that you\r\nneed will get linked into your application. Here's a list of features:\r\n\r\n- Exclusive focus on IIR filters instead of boring FIR filters\r\n- Complete implementation of all \"RBJ Biquad\" Cookbook filter formulas\r\n- Butterworth, Chebyshev, Elliptic, Bessel, Legendre designs\r\n- Low Pass, High Pass, Band Pass, Band Stop transformations\r\n- Low, High, and Band Shelf filter implementations for most types\r\n- Smooth interpolation of filter settings, pole/zeros, and biquad\r\n  coefficients to achieve seamless parameter changes\r\n- Representation of digital filters using poles and zeros\r\n- Realization using Direct Form I, Direct Form II, or user provided class\r\n- Fully factored to minimize template instantiations\r\n- \"Design\" layer provides runtime introspection into a filter\r\n- Utility template functions for manipulating buffers of sample data\r\n- No calls to malloc or new, great for embedded systems\r\n- No external dependencies, just the standard C++ library!\r\n\r\nUsing these filters is easy:\r\n\r\n    // Create a Chebyshev type I Band Stop filter of order 3\r\n    // with state for processing 2 channels of audio.\r\n    Dsp::SimpleFilter <Dsp::ChebyshevI::BandStop <3>, 2> f;\r\n    f.setup (3,    // order\r\n             44100,// sample rate\r\n             4000, // center frequency\r\n             880,  // band width\r\n             1);   // ripple dB\r\n    f.process (numSamples, arrayOfChannels);\r\n\r\nAn accompanying demonstration program that works on most popular\r\nplatforms by using the separately licensed Juce application framework\r\n(included), exercises all the functionality of the library, including\r\nthese features:\r\n\r\n- Dynamic interface creates itself using filter introspection capabilities\r\n- Audio playback with real time application of a selected filter\r\n- Live time stretching and amplitude modulation without clicks or popping\r\n- Charts to show magnitude, phase response and pole/zero placement\r\n- Thread safety \"best practices\" for audio applications \r\n\r\nThis is the provided DSP Filters Demo application, which demonstrates the\r\nfeatures of the library and uses the Juce application framework to run on\r\nall popular platforms:\r\n\r\n<img src=\"https://github.com/vinniefalco/DSPFilters/raw/gh-pages/images/DSPFiltersScreenshot.png\">\r\n\r\nIf you've been searching in futility on the Internet for some source code\r\nfor implementing high order filters, then look no further because this is\r\nit! Whether you are a student of C++ or digital signal processing, a writer\r\nof audio plugins, or even a VST synthesizer coder, \"A Collection of Useful\r\nC++ Classes for Digital Signal Processing\" might have something for you!\r\n\r\n### DSP Filters on the Web\r\n\r\nDSP Filters Official Discussion Forum<br>\r\nhttp://www.kvraudio.com/forum/viewtopic.php?t=249926\r\n\r\nDSP and Audio Plugin Discussion Forum<br>\r\nhttp://www.kvraudio.com/forum/viewforum.php?f=33\r\n\r\nJuce Official Discussion Forum<br>\r\nhttp://www.rawmaterialsoftware.com/index.php\r\n\r\nJuce Official Site<br>\r\nhttp://www.rawmaterialsoftware.com\r\n\r\n### Terms and Conditions\r\nDSP Filters Library and DSP Demo Application Copyright (c) 2009 by\r\n[Vinnie Falco](http://github.com/vinniefalco)<br>\r\nSource code is provided under the\r\n[MIT License](http://www.opensource.org/licenses/mit-license.php)<br>\r\nThe [Juce Library](http://www.rawmaterialsoftware.com) is licensed\r\nseparately, from [Raw Material Software](http://rawmaterialsoftware.com).\r\n"
        },
        {
          "name": "Research Papers",
          "type": "tree",
          "content": null
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "user",
          "type": "tree",
          "content": null
        },
        {
          "name": "waf",
          "type": "blob",
          "size": 85.619140625,
          "content": null
        },
        {
          "name": "wscript",
          "type": "blob",
          "size": 2.5595703125,
          "content": "\nimport os, sys\nfrom waflib import Logs\n\ndef options(opt):\n    opt.load('compiler_cxx')\n    config_options = opt.get_option_group('configure options')\n    config_options.add_option('--build-demo',\n        action='store_true',\n        dest='build_demo',\n        help='build the demo application [default: false]')\n\ndef configure(conf):\n    conf.load('compiler_cxx')\n    configure_lib(conf)\n    if conf.options.build_demo:\n        Logs.warn('DSPFiltersDemo: demo application will also be built.')\n        configure_demo(conf)\n\ndef configure_lib(conf):\n    pass\n\ndef configure_demo(conf):\n    conf.env['BUILD_DEMO'] = True\n    configure_juce(conf)\n\ndef configure_juce(conf):\n    juce_required_libs=[]\n    juce_required_packages=[]\n    \n    if os.name.startswith('posix') and not sys.platform.startswith('darwin'):\n        juce_required_libs+=['dl', 'pthread', 'rt']\n        juce_required_packages+=['freetype2', 'gl', 'glu', 'x11', 'xinerama', 'alsa', 'xext']\n    else:\n        # TODO: add Darwin and non-POSIX dependency checks\n        conf.fatal('DSPFiltersDemo: Building DSPFiltersDemo with waf is currently only possible on'\n            ' POSIX systems with X11.')\n\n    for l in juce_required_libs:\n        conf.check(\n            lib=l,\n            uselib_store=l)\n    for pkg in juce_required_packages:\n        conf.check_cfg(\n            package=pkg,\n            uselib_store=pkg,\n            args=['--cflags', '--libs'])\n    conf.env.append_value('JUCE_USELIBS', juce_required_libs)\n    conf.env.append_value('JUCE_USELIBS', juce_required_packages)\n\n\ndef build(bld):\n    build_lib(bld)\n    if bld.env['BUILD_DEMO']:\n        build_demo(bld)\n\ndef build_lib(bld):\n    dspfilters_include_dir = bld.path.find_dir('shared/DSPFilters/include')\n    bld.install_files('${PREFIX}/include',\n        dspfilters_include_dir.ant_glob('**/*.h'),\n        cwd=dspfilters_include_dir,\n        relative_trick=True)\n    bld.shlib(\n        source=bld.path.ant_glob('shared/DSPFilters/source/*.cpp'),\n        includes='shared/DSPFilters/include',\n        target='DSPFilters')\n\ndef build_demo(bld):\n    build_juce(bld)\n    bld.program(\n        source=bld.path.ant_glob('shared/DSPFiltersDemo/source/*.cpp'),\n        includes=['shared/DSPFiltersDemo/source', 'shared/DSPFilters/include', 'shared/JuceAmalgam'],\n        use=bld.env['JUCE_USELIBS'] + ['JuceAmalgam', 'DSPFilters'],\n        target='DSPFiltersDemo')\n\ndef build_juce(bld):\n    bld.stlib(\n        source=bld.path.ant_glob('shared/JuceAmalgam/*.cpp'),\n        includes='shared/JuceAmalgam',\n        use=bld.env['JUCE_USELIBS'],\n        target='JuceAmalgam')\n\n# vim: syntax=python\n"
        }
      ]
    }
  ]
}