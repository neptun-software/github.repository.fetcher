{
  "metadata": {
    "timestamp": 1736565896779,
    "page": 860,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prusa3d/Prusa-Firmware",
      "stars": 2027,
      "defaultBranch": "MK3",
      "files": [
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 0.490234375,
          "content": "# If a statement is wrapped to more than one line, than dangle the closing\n# parenthesis on it's own line.\ndangle_parens = True\ndangle_align = 'child'\n\n# If true, the parsers may infer whether or not an argument list is sortable\n# (without annotation).\nautosort = True\n\n# How wide to allow formatted cmake files\nline_width = 100\n\nadditional_commands = {\n    \"target_sources\": {\n        \"kwargs\": {\n            \"PUBLIC\": \"*\",\n            \"PRIVATE\": \"*\",\n            \"INTERFACE\": \"*\",\n        }\n    },\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4150390625,
          "content": "#-*-mode:conf-*-\n# editorconfig file (see EditorConfig.org)\n\nroot                        = true\n\n[*]\nend_of_line                 = lf\ninsert_final_newline        = true\ncharset                     = utf-8\ntrim_trailing_whitespace    = true\nindent_style                = space\nindent_size                 = 4\ntab_width                   = 4\nmax_line_length             = 100\n\n[lang/po/*.po]\nend_of_line                 = crlf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.060546875,
          "content": "lang/po/*.po text eol=crlf diff=po\nlang/po/*.pot text diff=po\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3984375,
          "content": "# IDE data\n/.settings\n/.project\n/.cproject\n\n# cmake\n/build/\n/build_gen/\n/.dependencies\n/compile_commands.json\n\n# Temporary configuration\n/Firmware/Configuration_prusa.h\n\n# Temporary language files\n/lang/po/*.mo\n/lang/tmp/\n/lang/Firmware-intl.hex\n/lang/Firmware-intl-en_*.hex\n/lang/*.map\n\n# Temporary files and directories\n*[~#]\n*.tmp\n*.bak\n.DS_Store\n__pycache__\n\n# Generated files\n/build-env/\n/Firmware/Doc/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.109375,
          "content": "cmake_minimum_required(VERSION 3.19)\ninclude(cmake/Utilities.cmake)\ninclude(cmake/GetGitRevisionDescription.cmake)\ninclude(cmake/ReproducibleBuild.cmake)\ninclude(cmake/ProjectVersion.cmake)\nresolve_version_variables()\n\nOPTION(ENFORCE_VERSION_MATCH \"Enforce checking that configuration.h matches any parsed git tags\" OFF)\nOPTION(NO_TAG_IS_FATAL \"If tag parsing fails, issue a fatal error\" OFF)\n\nset(PROJECT_VERSION_HASH\n    \"<auto>\"\n    CACHE\n      STRING\n      \"Version suffix to be appended to the final filename (<ver+PROJECT_VERSION_HASH>). Overrides git hash if set.\"\n    )\nif(PROJECT_VERSION_HASH STREQUAL \"<auto>\")\n  set(PROJECT_VERSION_HASH \"${FW_COMMIT_HASH}\")\nendif()\nset(PROJECT_VERSION_FULL\n    \"<auto>\"\n    CACHE\n      STRING\n      \"Full version string to be shown on the info screen in settings. Overrides git version if set.\"\n    )\nif(PROJECT_VERSION_FULL STREQUAL \"<auto>\")\n  set(PROJECT_VERSION_FULL \"${FW_COMMIT_DSC}\")\nendif()\nset(PROJECT_REPOSITORY\n    \"Unknown\"\n    CACHE STRING \"Repository string to be shown on the info screen in settings.\"\n    )\n\nset(CUSTOM_COMPILE_OPTIONS\n    \"\"\n    CACHE STRING \"Allows adding custom C/C++ flags\"\n    )\n\n#set(FN_VERSION_SUFFIX \"FW${PROJECT_VERSION}+${PROJECT_VERSION_HASH}\")\nset(FN_VERSION_SUFFIX \"FW_${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_REV}\")\nif(PROJECT_VERSION_FLV AND PROJECT_VERSION_FLV_VER)\n  set (FN_VERSION_SUFFIX \"${FN_VERSION_SUFFIX}-${PROJECT_VERSION_FLV}${PROJECT_VERSION_FLV_VER}\")\nendif()\nset(FN_VERSION_DEBUG_SUFFIX \"${FN_VERSION_SUFFIX}+${PROJECT_VERSION_COMMIT}\")\n\n# Inform user about the resolved settings from Configuration.h\nmessage(STATUS \"Project version (Configuration.h): ${PROJECT_VERSION}\")\n#message(STATUS \"Project version major............: ${PROJECT_VERSION_MAJOR}\") #For debuging\n#message(STATUS \"Project version minor............: ${PROJECT_VERSION_MINOR}\") #For debuging\n#message(STATUS \"Project version revision.........: ${PROJECT_VERSION_REV}\") #For debuging\n#message(STATUS \"Project version flavor...........: ${PROJECT_VERSION_FLV}\") #For debuging\n#message(STATUS \"Project version fla-revison......: ${PROJECT_VERSION_FLV_VER}\") #For debuging\n#message(STATUS \"Project version commit number....: ${PROJECT_VERSION_COMMIT}\") #For debuging\nmessage(STATUS \"Filename suffix..................: ${FN_VERSION_SUFFIX}\")\nmessage(STATUS \"Filename debug suffix ...........: ${FN_VERSION_DEBUG_SUFFIX}\")\n#message(STATUS \"Host OS .........................: ${CMAKE_HOST_SYSTEM_NAME}\")\n# testing\n# SET(FW_COMMIT_DSC \"v3.13.0-1234\")\n\nif(NOT \"${PROJECT_VERSION_HASH}\" STREQUAL \"UNKNOWN\" AND NOT \"${FW_COMMIT_DSC}\" MATCHES \".+NOTFOUND.+\") # else -> no commit hash is known... likely no git.\nstring(REGEX MATCH \"[v|t]([0-9]+)\\.([0-9]+)\\.([0-9]+)-?(${DEV_TAG_REGEX})?([0-9]+)?-([0-9]+)\" TAG_VERSION \"${FW_COMMIT_DSC}\")\n\nif (CMAKE_MATCH_4) # Do we have a build type?\n    decode_flavor_code(PROJECT_VER_TAG_FLV \"${CMAKE_MATCH_4}\" \"${CMAKE_MATCH_5}\")\nelse()\n    # No dev status found, it must be a final tag.\n    decode_flavor_code(PROJECT_VER_TAG_FLV \"RELEASED\" \"0\")\nendif()\n\nif(ENFORCE_VERSION_MATCH)\n    if(NOT ${CMAKE_MATCH_1} STREQUAL ${PROJECT_VERSION_MAJOR})\n        message(FATAL_ERROR \"Major version of current tag disagrees with Configuration.h ${CMAKE_MATCH_1}!=${PROJECT_VERSION_MAJOR}\")\n    endif()\n\n    if(NOT ${CMAKE_MATCH_2} STREQUAL ${PROJECT_VERSION_MINOR})\n        message(FATAL_ERROR \"Minor version of current tag disagrees with Configuration.h ${CMAKE_MATCH_2}!=${PROJECT_VERSION_MINOR}\")\n    endif()\n\n    if(NOT ${CMAKE_MATCH_3} STREQUAL ${PROJECT_VERSION_REV})\n        message(FATAL_ERROR \"Rev version of current tag disagrees with Configuration.h ${CMAKE_MATCH_3}!=${PROJECT_VERSION_REV}\")\n    endif()\n\n    if(NOT ${PROJECT_VER_TAG_FLV} STREQUAL ${PROJECT_VERSION_TWEAK})\n        message(FATAL_ERROR \"Dev status of current tag disagrees with Configuration.h ${PROJECT_VER_TAG_FLV}!=${PROJECT_VERSION_TWEAK}\")\n    endif()\n    # Note - we don't check the commit counter, that'd be too much of a headache. Maybe it\n    # should be an error only on a tagged build?\n    MESSAGE(STATUS \"Configuration.h and tag match: OK (${PROJECT_VERSION}/${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}.${PROJECT_VER_TAG_FLV})\")\nelse()\n    MESSAGE(STATUS \"Configuration.h and tag (not enforced): (${PROJECT_VERSION}/${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}.${PROJECT_VER_TAG_FLV})\")\nendif()\n\nMESSAGE(STATUS \"Commit Nr: Configuration.h: ${PROJECT_VERSION_COMMIT} Tag: ${CMAKE_MATCH_6}\")\nMESSAGE(STATUS \"These tag values will override Configuration.h\")\nSET(PROJECT_VERSION ${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}.${PROJECT_VER_TAG_FLV})\nSET(PROJECT_VERSION_COMMIT ${CMAKE_MATCH_6})\n\ngit_get_repository(PROJECT_REPOSITORY)\nelse(GIT_FOUND)\nif (NO_TAG_IS_FATAL)\n    MESSAGE(FATAL_ERROR \"Git was not found or an error occurred parsing the tag. This is a fatal error according to the settings.\")\nelse()\n    MESSAGE(STATUS \"Git was not found or an error occurred parsing the tag. Falling back to Configuration.h values (${PROJECT_VERSION}).\")\nendif()\nset(FW_COMMIT_HASH ${FW_COMMIT_HASH_UNKNOWN}) # Clear it, the code expects a binary...\nset(PROJECT_VERSION_TIMESTAMP \"0\")\nendif()\n\nif(CMAKE_MATCH_1 AND CMAKE_MATCH_2)\n  set(FN_VERSION_SUFFIX \"FW_${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}\")\nendif()\nif(CMAKE_MATCH_4 AND CMAKE_MATCH_5)\n  set (FN_VERSION_SUFFIX \"${FN_VERSION_SUFFIX}-${CMAKE_MATCH_4}${CMAKE_MATCH_5}\")\nendif()\nif(CMAKE_MATCH_6 AND PROJECT_VERSION_HASH)\n  set(FN_VERSION_DEBUG_SUFFIX \"${FN_VERSION_SUFFIX}+${CMAKE_MATCH_6}_${PROJECT_VERSION_HASH}\")\nendif()\n# Inform user about the resolved settings from github\nmessage(STATUS \"Project version git..............: ${PROJECT_VERSION}\")\nmessage(STATUS \"Project version git hash.........: ${PROJECT_VERSION_HASH}\")\nmessage(STATUS \"Project version git description..: ${PROJECT_VERSION_FULL}\")\n#message(STATUS \"Project version git major........: ${CMAKE_MATCH_1}\") #For debuging\n#message(STATUS \"Project version git minor........: ${CMAKE_MATCH_2}\") #For debuging\n#message(STATUS \"Project version git revision.....: ${CMAKE_MATCH_3}\") #For debuging\n#message(STATUS \"Project version git flavor.......: ${CMAKE_MATCH_4}\") #For debuging\n#message(STATUS \"Project version git fla-revison..: ${CMAKE_MATCH_5}\") #For debuging\n#message(STATUS \"Project version git commit number: ${CMAKE_MATCH_6}\") #For debuging\nmessage(STATUS \"Filename suffix .................: ${FN_VERSION_SUFFIX}\")\nmessage(STATUS \"Filename debug suffix ...........: ${FN_VERSION_DEBUG_SUFFIX}\")\n\n# Language configuration\nset(MAIN_LANGUAGES\n    cs de es fr it pl\n    CACHE STRING \"The list of 'main' languages to be included, in the correct order\"\n    )\nset(COMMUNITY_LANGUAGES\n    nl\n    ro\n    hu\n    hr\n    sk\n    sv\n    no\n    CACHE STRING \"The list of community languages to be included, in the correct order\"\n    )\nset(SELECTED_LANGUAGES ${MAIN_LANGUAGES} ${COMMUNITY_LANGUAGES})\n\nget_dependency_directory(prusa3dboards PRUSA_BOARDS_DIR)\nproject(Prusa-Firmware VERSION ${PROJECT_VERSION})\nadd_subdirectory(lib)\n\n# Get LANG_MAX_SIZE from sources\nfile(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/Firmware/config.h MAX_SIZE_LINE\n     REGEX \"^#define \\+LANG_SIZE_RESERVED \\+\"\n     )\nstring(REGEX MATCH \"0x[0-9]+\" MAX_SIZE_HEX \"${MAX_SIZE_LINE}\")\nmath(EXPR LANG_MAX_SIZE \"${MAX_SIZE_HEX}\" OUTPUT_FORMAT DECIMAL)\nmessage(\"Language maximum size (from config.h): ${LANG_MAX_SIZE} bytes\")\n\n# Ditto, this in xflash_layout.h but needs invocation of the preprocessor... :-/\nset(LANG_BIN_MAX 249856)\n\n# Check GCC Version\nget_recommended_gcc_version(RECOMMENDED_TOOLCHAIN_VERSION)\nif(CMAKE_CROSSCOMPILING AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL\n                            ${RECOMMENDED_TOOLCHAIN_VERSION}\n   )\n  message(WARNING \"Recommended AVR toolchain is ${RECOMMENDED_TOOLCHAIN_VERSION}\"\n                  \", but you have ${CMAKE_CXX_COMPILER_VERSION}\"\n          )\n\nelseif(NOT CMAKE_CROSSCOMPILING AND NOT CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  message(\n    WARNING\n      \"Recommended compiler for host tools and unittests is GCC, you have ${CMAKE_CXX_COMPILER_ID}.\"\n    )\nendif()\n\n# append custom C/C++ flags\nif(CUSTOM_COMPILE_OPTIONS)\n  string(REPLACE \" \" \";\" CUSTOM_COMPILE_OPTIONS \"${CUSTOM_COMPILE_OPTIONS}\")\n  add_compile_options(${CUSTOM_COMPILE_OPTIONS})\nendif()\n\n#\n# Global Compiler & Linker Configuration\n#\n\n# enable warnings\nadd_compile_options(-Wall -Wextra -Wno-expansion-to-defined -Wsign-compare)\n\n# default standards for all targets\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n\n# support _DEBUG macro (some code uses to recognize debug builds)\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  add_compile_definitions(_DEBUG)\nendif()\n\n#\n# Firmware - get file lists.\n#\nset(FW_SOURCES\n    adc.cpp\n    backlight.cpp\n    BlinkM.cpp\n    bootapp.c\n    cardreader.cpp\n    cmdqueue.cpp\n    Configuration.cpp\n    ConfigurationStore.cpp\n    Dcodes.cpp\n    eeprom.cpp\n    fancheck.cpp\n    Filament_sensor.cpp\n    first_lay_cal.cpp\n    heatbed_pwm.cpp\n    host.cpp\n    la10compat.cpp\n    language.c\n    lcd.cpp\n    Marlin_main.cpp\n    MarlinSerial.cpp\n    meatpack.cpp\n    menu.cpp\n    mesh_bed_calibration.cpp\n    mesh_bed_leveling.cpp\n    messages.cpp\n    mmu2.cpp\n    mmu2_crc.cpp\n    mmu2_error_converter.cpp\n    mmu2_fsensor.cpp\n    mmu2_log.cpp\n    mmu2_marlin1.cpp\n    mmu2_power.cpp\n    mmu2_progress_converter.cpp\n    mmu2_protocol.cpp\n    mmu2_protocol_logic.cpp\n    mmu2_reporting.cpp\n    mmu2_serial.cpp\n    motion_control.cpp\n    optiboot_xflash.cpp\n    pat9125.cpp\n    planner.cpp\n    power_panic.cpp\n    printer_state.cpp\n    Prusa_farm.cpp\n    rbuf.c\n    Sd2Card.cpp\n    SdBaseFile.cpp\n    SdFatUtil.cpp\n    SdFile.cpp\n    SdVolume.cpp\n    sm4.cpp\n    sound.cpp\n    speed_lookuptable.cpp\n    spi.c\n    SpoolJoin.cpp\n    stepper.cpp\n    stopwatch.cpp\n    strtod.c\n    swi2c.c\n    Tcodes.cpp\n    temperature.cpp\n    timer02.c\n    Timer.cpp\n    tmc2130.cpp\n    tone04.c\n    twi.cpp\n    uart2.cpp\n    ultralcd.cpp\n    util.cpp\n    xflash.c\n    xflash_dump.cpp\n    xyzcal.cpp\n    )\nlist(TRANSFORM FW_SOURCES PREPEND ${CMAKE_CURRENT_SOURCE_DIR}/Firmware/)\n\nset(AVR_SOURCES\n    wiring_digital.c\n    WInterrupts.c\n    wiring_pulse.c\n    hooks.c\n    wiring.c\n    wiring_analog.c\n    wiring_shift.c\n    CDC.cpp\n    PluggableUSB.cpp\n    HardwareSerial.cpp\n    HardwareSerial0.cpp\n    HardwareSerial1.cpp\n    HardwareSerial3.cpp\n    IPAddress.cpp\n    HardwareSerial2.cpp\n    Print.cpp\n    Stream.cpp\n    Tone.cpp\n    USBCore.cpp\n    WMath.cpp\n    WString.cpp\n    abi.cpp\n    main.cpp\n    )\nlist(TRANSFORM AVR_SOURCES PREPEND ${PRUSA_BOARDS_DIR}/cores/prusa_einsy_rambo/)\n\n#\n# Target configuration\n#\nif(CMAKE_CROSSCOMPILING)\n  set_source_epoch(${PROJECT_VERSION_TIMESTAMP})\n\n  # default optimization flags\n  set(CMAKE_CXX_FLAGS_DEBUG \"-Og -g\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"-Os -g -DNDEBUG\")\n  set(CMAKE_C_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})\n  set(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n\n  # mcu and target-related settings\n  add_compile_options(\n    -mmcu=atmega2560 -DF_CPU=16000000L -DARDUINO=10819 -DARDUINO_AVR_PRUSA_EINSY_RAMBO\n    -DARDUINO_ARCH_AVR\n    )\n  add_link_options(-mmcu=atmega2560 -Wl,-u,vfprintf -lprintf_flt -lm)\n\n  # disable some C++ language features\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-threadsafe-statics>)\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-rtti>)\n\n  # disable exceptions\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>)\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-unwind-tables>)\n\n  # split and gc sections\n  add_compile_options(-ffunction-sections -fdata-sections)\n  add_link_options(-ffunction-sections -fdata-sections -Wl,--gc-sections)\n\n  # LTO (with custom options)\n  add_compile_options(-flto -fno-fat-lto-objects)\n  add_link_options(-flto)\n\n  # Create this target before we apply the GC options\n  add_library(avr_core STATIC ${AVR_SOURCES})\n  set_reproducible_target(avr_core)\n  target_include_directories(\n    avr_core PRIVATE ${PRUSA_BOARDS_DIR}/cores/prusa_einsy_rambo/\n                     ${PRUSA_BOARDS_DIR}/variants/prusa_einsy_rambo/\n    )\nendif()\n\n# Meta targets to build absolutely everything\nadd_custom_target(ALL_FIRMWARE)\nadd_custom_target(ALL_ENGLISH)\nadd_custom_target(ALL_MULTILANG)\nadd_dependencies(ALL_FIRMWARE ALL_ENGLISH ALL_MULTILANG)\nset_target_properties(ALL_MULTILANG PROPERTIES EXCLUDE_FROM_ALL FALSE)\n\nfunction(add_base_binary variant_name)\n  add_executable(${variant_name} ${FW_SOURCES} ${FW_HEADERS} ${VARIANT_CFG_DST})\n  set_target_properties(${variant_name} PROPERTIES EXCLUDE_FROM_ALL TRUE)\n  set_reproducible_target(${variant_name})\n\n  target_include_directories(\n    ${variant_name}\n    PRIVATE ${PRUSA_BOARDS_DIR}/cores/prusa_einsy_rambo/\n            ${PRUSA_BOARDS_DIR}/variants/prusa_einsy_rambo/ ${CMAKE_SOURCE_DIR}/Firmware\n    )\n\n  target_link_libraries(${variant_name} avr_core)\n\n  # configure linker script\n  set(LINKER_SCRIPT ${PRUSA_BOARDS_DIR}/ldscripts/avr6.xn)\n  target_link_options(${variant_name} PUBLIC -Wl,-T,${LINKER_SCRIPT})\n\n  # limit the text section to 248K (256K - 8k reserved for the bootloader)\n  target_link_options(${variant_name} PUBLIC -Wl,--defsym=__TEXT_REGION_LENGTH__=248K)\n\n  # produce ASM listing. Note we also specify the .map as a byproduct so it gets cleaned because\n  # link_options doesn't have a \"generated outputs\" feature.\n  add_custom_command(\n    TARGET ${variant_name}\n    POST_BUILD\n    COMMAND ${CMAKE_OBJDUMP} --prefix ${CMAKE_SOURCE_DIR} -CSd ${variant_name} > ${variant_name}.asm\n    BYPRODUCTS ${variant_name}.asm ${variant_name}.map\n    )\n\n  # inform about the firmware's size in terminal\n  add_custom_command(\n    TARGET ${variant_name}\n    POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E echo_append \"${variant_name} \"\n    COMMAND ${CMAKE_SIZE_UTIL} -C --mcu=atmega2560 ${variant_name}\n    )\n  report_size(${variant_name})\n\n  # generate linker map file\n  target_link_options(\n    ${variant_name} PUBLIC -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${variant_name}.map\n    )\n  decode_tweak_version(PROJECT_VERSION_FLV PROJECT_VERSION_FLV_VER)\n  target_compile_definitions(\n    ${variant_name}\n    PRIVATE CMAKE_CONTROL FW_REPOSITORY=\"${PROJECT_REPOSITORY}\"\n            FW_COMMIT_HASH=\"${FW_COMMIT_HASH}\"\n            FW_COMMIT_HASH_LENGTH=${FW_COMMIT_HASH_LENGTH}\n            FW_MAJOR=${PROJECT_VERSION_MAJOR}\n            FW_MINOR=${PROJECT_VERSION_MINOR}\n            FW_REVISION=${PROJECT_VERSION_REV}\n            FW_COMMITNR=${PROJECT_VERSION_COMMIT}\n    )\n    if(NOT PROJECT_VERSION_FLV STREQUAL \"RELEASED\")\n        target_compile_definitions(\n        ${variant_name}\n        PRIVATE\n        FW_FLAVERSION=${PROJECT_VERSION_FLV_VER}\n        FW_FLAVOR=${PROJECT_VERSION_FLV}\n        )\n    endif()\nendfunction()\n\nfunction(fw_add_variant variant_name)\n  set(variant_header \"variants/${variant_name}.h\")\n  string(REPLACE \"1_75mm_\" \"\" variant_name \"${variant_name}\")\n  string(REPLACE \"-E3Dv6full\" \"\" variant_name \"${variant_name}\")\n\n  # Single-language build\n  set(FW_EN \"${variant_name}_ENGLISH\")\n  #MK3S_MK3S+_FW_3.13.2-RC1_ENGLISH.hex\n  set(hex_variant_name \"${variant_name}\")\n  if(hex_variant_name STRGREATER_EQUAL \"MK3S\")\n    string(REPLACE \"MK3S\" \"MK3S_MK3S+\" hex_variant_name ${hex_variant_name})\n  endif()\n  set(FW_HEX \"${CMAKE_BINARY_DIR}/${hex_variant_name}_${FN_VERSION_SUFFIX}_ENGLISH.hex\")\n  #message(STATUS \"Hex filename: ${FW_HEX}\")\n\n  add_base_binary(${FW_EN})\n  target_compile_definitions(${FW_EN} PUBLIC LANG_MODE=0 FW_VARIANT=\"${variant_header}\")\n  add_custom_command(\n    TARGET ${FW_EN}\n    POST_BUILD\n    COMMAND ${CMAKE_OBJCOPY} -O ihex ${FW_EN} ${FW_EN}.hex\n    COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_EN}.hex ${FW_HEX}\n    BYPRODUCTS ${FW_EN}.hex ${FW_HEX}\n    COMMENT \"Generating ${FW_EN}.hex\"\n    )\n  add_dependencies(ALL_ENGLISH ${FW_EN})\n\n  # Multi-language build/s\n  set(FW_LANG_BASE \"${variant_name}_lang_base\")\n  set(FW_LANG_PATCH \"${variant_name}_lang_patch\")\n  add_base_binary(${FW_LANG_BASE})\n  target_compile_definitions(${FW_LANG_BASE} PUBLIC LANG_MODE=1 FW_VARIANT=\"${variant_header}\")\n\n  # Construct language map\n  set(LANG_TMP_DIR lang)\n  set(LANG_MAP ${LANG_TMP_DIR}/${variant_name}_lang.map)\n\n  add_custom_command(\n    OUTPUT ${LANG_MAP}\n    COMMAND ${CMAKE_OBJCOPY} -O binary ${FW_LANG_BASE} ${FW_LANG_PATCH}.bin\n    COMMAND \"${Python3_EXECUTABLE}\" ${CMAKE_SOURCE_DIR}/lang/lang-map.py ${FW_LANG_BASE} ${FW_LANG_PATCH}.bin > ${LANG_MAP}\n    COMMAND ${CMAKE_OBJCOPY} -I binary -O ihex ${FW_LANG_PATCH}.bin ${FW_LANG_PATCH}.hex\n    DEPENDS ${FW_LANG_BASE}\n    BYPRODUCTS ${FW_LANG_PATCH}.bin ${FW_LANG_PATCH}.hex\n    COMMENT \"Generating ${variant_name} language map\"\n    )\n\n  # Base targets for language checks\n  add_custom_target(check_lang_${variant_name})\n  add_dependencies(check_lang check_lang_${variant_name})\n\n  # Build language catalogs\n  set(LANG_BINS \"\")\n  foreach(LANG IN LISTS SELECTED_LANGUAGES)\n    set(LANG_BIN ${LANG_TMP_DIR}/${variant_name}_${LANG}.bin)\n    set(PO_FILE \"${CMAKE_SOURCE_DIR}/lang/po/Firmware_${LANG}.po\")\n\n    # Full language checks\n    add_custom_target(\n      check_lang_${variant_name}_${LANG}\n      COMMENT \"Checking ${variant_name} language ${LANG}\"\n      COMMAND \"${Python3_EXECUTABLE}\" ${CMAKE_SOURCE_DIR}/lang/lang-check.py --map ${LANG_MAP} ${PO_FILE}\n      DEPENDS ${LANG_MAP} ${PO_FILE}\n      USES_TERMINAL\n      )\n    add_dependencies(check_lang_${variant_name} check_lang_${variant_name}_${LANG})\n    add_dependencies(check_lang_${LANG} check_lang_${variant_name}_${LANG})\n\n    add_custom_command(\n      OUTPUT ${LANG_BIN}\n      # Check po file for errors _only_\n      COMMAND \"${Python3_EXECUTABLE}\" ${CMAKE_SOURCE_DIR}/lang/lang-check.py --errors-only --map ${LANG_MAP} ${PO_FILE}\n      # Build the catalog\n      COMMAND \"${Python3_EXECUTABLE}\" ${CMAKE_SOURCE_DIR}/lang/lang-build.py ${LANG_MAP} ${PO_FILE} ${LANG_BIN}\n      # Check bin size\n      COMMAND ${CMAKE_COMMAND} -DLANG_MAX_SIZE=${LANG_MAX_SIZE} -DLANG_FILE=${LANG_BIN} -P\n              ${PROJECT_CMAKE_DIR}/Check_lang_size.cmake\n      DEPENDS ${LANG_MAP} ${PO_FILE}\n      COMMENT \"Generating ${variant_name}_${LANG}.bin\"\n      )\n    list(APPEND LANG_BINS ${LANG_BIN})\n  endforeach()\n\n  string(FIND ${variant_name} \"MK3\" HAS_XFLASH)\n  if(${HAS_XFLASH} GREATER_EQUAL 0)\n    # X-Flash based build (catalogs appended to patched binary)\n    set(FW_LANG_FINAL \"${variant_name}_MULTILANG\")\n    set(hex_variant_name \"${variant_name}\")\n    #MK3S_MK3S+_FW_3.13.2-RC1+7651_deadbeef_MULTILANG.hex\n    if(hex_variant_name STRGREATER_EQUAL \"MK3S\")\n      string(REPLACE \"MK3S\" \"MK3S_MK3S+\" hex_variant_name ${hex_variant_name})\n    endif()\n    set(LANG_HEX ${CMAKE_BINARY_DIR}/${hex_variant_name}_${FN_VERSION_SUFFIX}_MULTILANG.hex)\n    set(LANG_DEBUG_HEX ${CMAKE_BINARY_DIR}/${hex_variant_name}_${FN_VERSION_DEBUG_SUFFIX}_MULTILANG.hex)\n    #message(STATUS \"Hex filename .....: ${LANG_HEX}\")\n    #message(STATUS \"Hex debug filename: ${LANG_DEBUG_HEX}\")\n    set(LANG_CATBIN ${LANG_TMP_DIR}/${variant_name}_cat.bin)\n    set(LANG_CATHEX ${LANG_TMP_DIR}/${variant_name}_cat.hex)\n\n    add_custom_command(\n      OUTPUT ${LANG_CATBIN}\n      COMMAND ${CMAKE_COMMAND} -E cat ${LANG_BINS} > ${LANG_CATBIN}\n      DEPENDS ${LANG_BINS}\n      COMMENT \"Merging language catalogs\"\n      )\n    #[[\n    #add_custom_command(OUTPUT ${LANG_FINAL_BIN}\n    #  COMMAND ${CMAKE_COMMAND} -DLANG_MAX_SIZE=${LANG_BIN_MAX} -DLANG_FILE=${LANG_FINAL_BIN}\n    #                           -P ${PROJECT_CMAKE_DIR}/Check_final_lang_bin_size.cmake\n    #  APPEND)\n    #]]\n    add_custom_command(\n      OUTPUT ${LANG_CATHEX}\n      COMMAND ${CMAKE_OBJCOPY} -I binary -O ihex ${LANG_CATBIN} ${LANG_CATHEX}\n      DEPENDS ${LANG_CATBIN}\n      COMMENT \"Generating Hex for language data\"\n      )\n\n    add_custom_command(\n      OUTPUT ${FW_LANG_FINAL}.hex\n      COMMAND ${CMAKE_COMMAND} -E cat ${FW_LANG_PATCH}.hex ${LANG_CATHEX} > ${FW_LANG_FINAL}.hex\n      COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_LANG_FINAL}.hex ${LANG_HEX}\n      BYPRODUCTS ${LANG_HEX}\n      COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_LANG_FINAL}.hex ${LANG_DEBUG_HEX}\n      BYPRODUCTS ${LANG_DEBUG_HEX}\n      COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_LANG_FINAL}.hex ${CMAKE_BINARY_DIR}/release/${hex_variant_name}_${FN_VERSION_SUFFIX}_MULTILANG.hex\n      BYPRODUCTS ${CMAKE_BINARY_DIR}/release/${hex_variant_name}_${FN_VERSION_SUFFIX}_MULTILANG.hex\n      DEPENDS ${FW_LANG_PATCH}.hex ${LANG_CATHEX}\n      COMMENT \"Generating final ${FW_LANG_FINAL}.hex\"\n      )\n\n    add_custom_target(${FW_LANG_FINAL} DEPENDS ${FW_LANG_FINAL}.hex)\n    add_dependencies(ALL_MULTILANG ${FW_LANG_FINAL})\n  else()\n    set(ALL_VARIANT_HEXES \"\")\n    # Non-xflash, e.g. MK2.5\n    foreach(LANG IN LISTS SELECTED_LANGUAGES)\n      set(FW_LANG_FINAL ${variant_name}_en-${LANG})\n      set(LANG_HEX ${CMAKE_BINARY_DIR}/${variant_name}_${FN_VERSION_SUFFIX}_en-${LANG}.hex)\n      set(LANG_DEBUG_HEX ${CMAKE_BINARY_DIR}/${variant_name}_${FN_VERSION_DEBUG_SUFFIX}_en-${LANG}.hex)\n      set(LANG_BIN ${LANG_TMP_DIR}/${variant_name}_${LANG}.bin)\n\n      # Patched binary with pre-baked secondary language\n      add_custom_command(\n        OUTPUT ${FW_LANG_FINAL}.bin\n        COMMAND ${CMAKE_COMMAND} -E copy ${FW_LANG_PATCH}.bin ${FW_LANG_FINAL}.bin\n        COMMAND \"${Python3_EXECUTABLE}\" ${CMAKE_SOURCE_DIR}/lang/lang-patchsec.py ${FW_LANG_BASE} ${LANG_BIN}\n                ${FW_LANG_FINAL}.bin\n        DEPENDS ${FW_LANG_BASE} ${FW_LANG_PATCH}.bin ${LANG_BIN}\n        COMMENT \"Generating ${FW_LANG_FINAL}.bin\"\n        )\n\n      # Final hex files\n      add_custom_command(\n        OUTPUT ${FW_LANG_FINAL}.hex\n        COMMAND ${CMAKE_OBJCOPY} -I binary -O ihex ${FW_LANG_FINAL}.bin ${FW_LANG_FINAL}.hex\n        COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_LANG_FINAL}.hex ${LANG_HEX}\n        BYPRODUCTS ${LANG_HEX}\n        COMMAND ${CMAKE_COMMAND} -E create_hardlink ${FW_LANG_FINAL}.hex ${LANG_DEBUG_HEX}\n        BYPRODUCTS ${LANG_DEBUG_HEX}\n        DEPENDS ${FW_LANG_FINAL}.bin\n        COMMENT \"Creating ${FW_LANG_FINAL}.hex\"\n        )\n\n      add_custom_target(${FW_LANG_FINAL} DEPENDS ${FW_LANG_FINAL}.hex)\n      list(APPEND ALL_VARIANT_HEXES ${FW_LANG_FINAL})\n    endforeach()\n    add_custom_target(\"${variant_name}-All-Languages\" DEPENDS ${ALL_VARIANT_HEXES})\n    if(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Linux\")\n      add_custom_command(TARGET \"${variant_name}-All-Languages\"\n        POST_BUILD\n        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n        COMMAND ${CMAKE_COMMAND} -E make_directory \"release\"\n        COMMAND ${CMAKE_COMMAND} -E tar \"cfv\" \"release/${variant_name}_${FN_VERSION_SUFFIX}.zip\" --format=zip ${variant_name}_${FN_VERSION_SUFFIX}_en*.hex\n        BYPRODUCTS \"${CMAKE_BINARY_DIR}/release/${variant_name}_${FN_VERSION_SUFFIX}.zip\"\n        )\n    endif()\n    add_dependencies(ALL_MULTILANG \"${variant_name}-All-Languages\")\n  endif()\nendfunction()\n\nif(CMAKE_CROSSCOMPILING)\n\n  # Main target for language checks\n  add_custom_target(check_lang)\n  foreach(LANG IN LISTS SELECTED_LANGUAGES)\n    add_custom_target(check_lang_${LANG})\n    add_dependencies(check_lang check_lang_${LANG})\n  endforeach()\n\n  # build a list of all supported variants\n  file(\n    GLOB ALL_VARIANTS\n    RELATIVE ${PROJECT_SOURCE_DIR}/Firmware/variants\n    ${PROJECT_SOURCE_DIR}/Firmware/variants/*.h\n    )\n  list(TRANSFORM ALL_VARIANTS REPLACE \"\\.h$\" \"\")\n  set(FW_VARIANTS\n      ${ALL_VARIANTS}\n      CACHE STRING \"Firmware variants to be built\"\n      )\n\n  foreach(THIS_VAR IN LISTS FW_VARIANTS)\n    if(NOT ${THIS_VAR} IN_LIST ALL_VARIANTS)\n      message(FATAL_ERROR \"Variant ${THIS_VAR} does not exist\")\n    endif()\n\n    message(\"Variant added: ${THIS_VAR}\")\n\n    # Generate a file in a subfolder so that we can organize things a little more neatly in VS code\n    set(DIR_NAME ${THIS_VAR})\n    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build_gen/${DIR_NAME})\n    file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/build_gen/${DIR_NAME}/CMakeLists.txt\n         \"project(${DIR_NAME} VERSION ${PROJECT_VERSION})\\nfw_add_variant(${THIS_VAR})\"\n         )\n    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/build_gen/${DIR_NAME})\n  endforeach(THIS_VAR IN LISTS FW_VARIANTS)\nendif()\n\nSET(REVO_FW_ZIP_NAME \"E3D_REVO_FW_MK3_MK3S_MK3S+_${FN_VERSION_SUFFIX}.zip\")\n\nif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Linux\")\n  add_custom_command(TARGET ALL_MULTILANG\n    POST_BUILD\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/release\n    BYPRODUCTS ${CMAKE_BINARY_DIR}/release/${REVO_FW_ZIP_NAME}\n    COMMAND ${CMAKE_COMMAND} -E tar \"cfv\" \"${REVO_FW_ZIP_NAME}\" --format=zip *E3DREVO*.hex\n    COMMAND ${CMAKE_COMMAND} -E rm *E3DREVO*.hex\n    )\nendif()\n\n#\n# Tests\n#\nif(NOT CMAKE_CROSSCOMPILING)\n  enable_testing()\n  add_subdirectory(tests)\nendif()\n"
        },
        {
          "name": "Community_made.md",
          "type": "blob",
          "size": 2.572265625,
          "content": "# Community made\nCommunity made features aren't fully supported by Prusa and the owners are responsible to maintain them.\nIn case the feature isn't maintained OR causes issues Prusa will deactivate these.\n## Prusa-Firmware build\n- `PF-build.sh`\n  - Maintainers: **@3d-gussner**\n  - Co-maintainers:\n  - Contributors: **@mkbel**, **@ropaha**, **@deliopoulos**, **@DRracer**, **wavexx**, **@leptun**, **@andrewluebke**, **@kuhnmarek**\n  - [X] **Active**      since February 2019\n  - [X] **Maintained**  since January 2019\n\n### How-to use PF-build.sh\nStart `./PF-build.sh` and follow the instructions\n\nHelp `./PF-build.sh -h`\n\n# MK404 Simulator\n\n## MK404-build.sh\n**MK404 is a community 3d printer simulator created by @vintagepc**\nPlease checkout and support his github repository [MK404](https://github.com/vintagepc/MK404) and the [MK404 Wiki](https://github.com/vintagepc/MK404/wiki)\n\nAt this moment the `MK404-build.sh` script is only supported on Linux\n- `MK404-build.sh`\n  - Maintainers: **@3d-gussner**\n  - Co-maintainers:\n  - Contributors:\n  - [X] **Active**      since August 2021\n  - [X] **Maintained**  since August 2021\n\n### How-to use MK404-build.sh\nAfter compiling with `PF-build.sh` you get the option to start the `MK404` simulator with the fresh compiled firmware. (Linux only at this moment)\n\nHelp `./MK404-build.sh -h`\n\n# Translations\n- see [/lang/Community_made_translations.md](https://github.com/prusa3d/Prusa-Firmware/blob/MK3/lang/Community_made_translations.md)\n\n# Arc interpolation features\n**Arc interpolation features by @FormerLurker**\nPlease read more about it [here](https://github.com/prusa3d/Prusa-Firmware/pull/2657) and [here](https://github.com/FormerLurker/ArcWelderPlugin)\n\n- Maintainers: **@FormerLurker**\n- Co-maintainers:\n- Contributors:\n- [X] **Active**      since January 2023\n- [X] **Maintained**  since May 2020\n\n# MeatPack\n**MeatPack by @scottmudge**\nPlease read more about it [here](https://github.com/prusa3d/Prusa-Firmware/pull/2955), [here](https://github.com/prusa3d/Prusa-Firmware/pull/4067) and [here](https://github.com/scottmudge/OctoPrint-MeatPack/)\n\n- Maintainers: **@scottmudge**\n- Co-maintainers:\n- Contributors:\n- [X] **Active**      since April 2023\n- [X] **Maintained**  since January 2021\n\n# E3D Revo\n**The E3D REVO support is a community effort thanks to these Contributors, E3D and others.**\n- Maintainers: **E3D**\n- Co-maintainers:\n- Contributors: @alexiri @kromeninja @ulab @JWvP @snafu1282 @matthiazzz @sdh2 @jdrozdz @peschkaj @MarcelTh @zuidwijk @davejhilton @WhiterRice @NightSkySK @D-an-W\n- [X] **Active**      since June 2023\n- [X] **Maintained**  since April 2023\n"
        },
        {
          "name": "Firmware",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3203125,
          "content": "\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n"
        },
        {
          "name": "MK404-build.sh",
          "type": "blob",
          "size": 20.7861328125,
          "content": "#!/bin/bash\n# This bash script is used to compile automatically and run the MK404 simulator\n#\n# Supported OS:  Linux64 bit\n#\n# Linux:\n# Linux Ubuntu\n# 1. Follow these instructions\n# 2. Open Ubuntu bash and get latest updates with 'sudo apt-get update'\n# 3. Install latest updates with 'sudo apt-get upgrade'\n#\n#\n# Version: 1.0.0-Build_18\n# Change log:\n# 11 Feb 2021, 3d-gussner, Inital\n# 11 Feb 2021, 3d-gussner, Optional flags to check for updates\n# 12 Feb 2021, 3d-gussner, Update cmake\n# 13 Feb 2021, 3d-gussner, Auto build SD cards\n# 18 Jun 2021, 3d-gussner, Documentation and version number\n# 18 Jun 2021, 3d-gussner, Added some arguments and checks\n# 18 Jun 2021, 3d-gussner, Default extrusion graphics to line. Thanks @vintagepc point it out\n# 18 Jun 2021, 3d-gussner, Added -g 3 and 4 for more details extrusion lines\n# 18 Jun 2021, 3d-gussner, Check for updates is default. Fix update if internet connection is lost.\n# 21 Jun 2021, 3d-gussner, Change board_flash argument to 'y' and firmware_version to 'f'\n# 25 Jan 2022, 3d-gussner, Allow upper and lower case in selection\n#                          Add update option to release OR devel\n# 01 Jul 2022, 3d-gussner, Limit atmegaMK404 boards mem to 8,16,32\n\n#### Start: Failures\nfailures()\n{\ncase \"$1\" in\n    0) echo \"$(tput setaf 2)MK404-build.sh finished with success$(tput sgr0)\" ;;\n    2) echo \"$(tput setaf 1)Unsupported OS: Linux $(uname -m)\" ; echo \"Please refer to the notes of MK404-build.sh$(tput sgr0)\" ; exit 2 ;;\n    3) echo \"$(tput setaf 1)This script doesn't support your Operating system!\"; echo \"Please use Linux 64-bit\"; echo \"Read the notes of MK404-build.sh$(tput sgr0)\" ; exit 2 ;;\n    4) echo \"$(tput setaf 1)Some packages are missing please install these!$(tput sgr0)\" ; exit 4 ;;\n    5) echo \"$(tput setaf 1)Wrong printer chosen.$(tput sgr0) Following Printers are supported: MK25, MK25S, MK3 and MK3S\" ; exit 5 ;;\n    6) echo \"$(tput setaf 1)Unsupported board flash size chosen.$(tput sgr0) Only '256', '384', '512', '1024' and '32M' are allowed.\" ; exit 6 ;;\n    7) echo \"$(tput setaf 1)Unsupported board mem size chosen.$(tput sgr0) Only '8', '16' and '32' are allowed.\" ; exit 7 ;;\n    8) echo \"$(tput setaf 1)No firmware version file selected!$(tput sgr0)\" ; echo \"Add argument -f with path and hex filename to start MK404\" ; exit 8 ;;\n    9) echo \"$(tput setaf 1)Tried to determine MK404 printer from hex file, but failed!$(tput sgr0)\" ; \"Add argument -p with 'MK25', 'MK25S', 'MK3' or 'MK3S' to start MK404\" ; exit 9 ;;\n    10) echo \"$(tput setaf 1)Missing printer$(tput sgr0)\" ; exit 10 ;;\nesac\n}\n#### End: Failures\n\n#### Start: Check options\n##check_options()\n##{\nwhile getopts c:f:g:m:n:p:u:x:y:?h flag\n    do\n        case \"${flag}\" in\n            c) check_flag=${OPTARG};;\n            f) firmware_version_flag=${OPTARG};;\n            g) mk404_graphics_flag=${OPTARG};;\n            h) help_flag=1;;\n            m) mk404_flag=${OPTARG};;\n            n) new_build_flag=${OPTARG};;\n            p) mk404_printer_flag=${OPTARG};;\n            u) update_flag=${OPTARG};;\n            x) board_mem_flag=${OPTARG};;\n            y) board_flash_flag=${OPTARG};;\n            ?) help_flag=1;;\n        esac\n    done\n#Debug echos\n#echo \"c: $check_flag\"\n#echo \"f: $firmware_version_flag\"\n#echo \"g: $mk404_graphics_flag\"\n#echo \"m: $mk404_flag\"\n#echo \"n: $new_build_flag\"\n#echo \"p: $mk404_printer_flag\"\n#echo \"u: $update_flag\"\n#echo \"x: $board_mem_flag\"\n#echo \"y: $board_flash_flag\"\n\n# '?' 'h' argument usage and help\nif [ \"$help_flag\" == \"1\" ] ; then\necho \"***************************************\"\necho \"* MK404-build.sh Version: 1.0.0-Build_18 *\"\necho \"***************************************\"\necho \"Arguments:\"\necho \"$(tput setaf 2)-c$(tput sgr0) Check for update\"\necho \"$(tput setaf 2)-f$(tput sgr0) Prusa-Firmware version\"\necho \"$(tput setaf 2)-g$(tput sgr0) Start MK404 graphics\"\necho \"$(tput setaf 2)-h$(tput sgr0) Help\"\necho \"$(tput setaf 2)-m$(tput sgr0) Start MK404 sim\"\necho \"$(tput setaf 2)-n$(tput sgr0) Force new build\"\necho \"$(tput setaf 2)-p$(tput sgr0) MK404 Printer\"\necho \"$(tput setaf 2)-u$(tput sgr0) Update MK404\"\necho \"$(tput setaf 2)-x$(tput sgr0) Board memory size\"\necho \"$(tput setaf 2)-y$(tput sgr0) Board flash size\"\necho \"$(tput setaf 2)-?$(tput sgr0) Help\"\necho\necho \"Brief USAGE:\"\necho \"  $(tput setaf 2)./MK404-build.sh$(tput sgr0)  [-c] [-f] [-g] [-m] [-n] [-p] [-u] [-v] [-x] [-h] [-?]\"\necho\necho \"  -c : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes\"\necho \"  -f : '$(tput setaf 2)path+file name$(tput sgr0)'\"\necho \"  -g : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' lite, '$(tput setaf 2)2$(tput sgr0)' fancy, '$(tput setaf 2)3$(tput sgr0)' lite with Quad_HR, '$(tput setaf 2)4$(tput sgr0)' fancy with Quad_HR\"\necho \"  -m : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes '$(tput setaf 2)2$(tput sgr0)' with MMU2\"\necho \"  -n : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes\"\necho \"  -p : '$(tput setaf 2)MK25$(tput sgr0)', '$(tput setaf 2)MK25S$(tput sgr0)', '$(tput setaf 2)MK3$(tput sgr0)' or '$(tput setaf 2)MK3S$(tput sgr0)'\"\necho \"  -u : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' release ', '$(tput setaf 2)2$(tput sgr0)' devel '\"\necho \"  -x : '$(tput setaf 2)8$(tput sgr0)',$(tput setaf 2)16$(tput sgr0)' or $(tput setaf 2)32$(tput sgr0)' Kb.\"\necho \"  -y : '$(tput setaf 2)256$(tput sgr0)','$(tput setaf 2)384$(tput sgr0)','$(tput setaf 2)512$(tput sgr0)','$(tput setaf 2)1024$(tput sgr0)''$(tput setaf 2)32M$(tput sgr0)'\"\necho\necho \"Example:\"\necho \"  $(tput setaf 2)./MK404-build.sh -f 1$(tput sgr0)\"\necho \"  Will force an update and rebuild the MK404 SIM\"\necho\necho \"  $(tput setaf 2)./MK404-build.sh -m 1 -g 1 -f ../../../../Prusa-Firmware/PF-build-hex/FW3100-Build4481/BOARD_EINSY_1_0a/FW3100-Build4481-1_75mm_MK3S-EINSy10a-E3Dv6full.hex$(tput sgr0)\"\necho \"  Will start MK404 with Prusa_MK3S and Prusa-Firmware 3.10.0-Build4481\"\nexit 1\nfi\n\n#Check MK404 agruments\n#Set Check for updates as default\ncheck_flag=1\n#Start: Check mk404_printer_flag\nif [ ! -z $mk404_printer_flag ]; then\n    if [[ \"$mk404_printer_flag\" == \"MK3\" || \"$mk404_printer_flag\" == \"MK3S\" || \"$mk404_printer_flag\" == \"MK25\" || \"$mk404_printer_flag\" == \"MK25S\" ]]; then\n        MK404_PRINTER_TEMP=$mk404_printer_flag\n    else\n        failures 5\n    fi\nfi\n#End: Check mk404_printer_flag\n\n#Start: Check if Build is selected with argument '-f'\nif [ ! -z \"$board_flash_flag\" ] ; then\n    if [ \"$board_flash_flag\" == \"256\" ] ; then\n        BOARD_FLASH=\"0x3FFFF\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_FLASH (hex)\"\n    elif [ \"$board_flash_flag\" == \"384\" ] ; then\n        BOARD_FLASH=\"0x5FFFF\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_FLASH (hex)\"\n    elif [ \"$board_flash_flag\" == \"512\" ] ; then\n        BOARD_FLASH=\"0x7FFFF\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_FLASH (hex)\"\n    elif [ \"$board_flash_flag\" == \"1024\" ] ; then\n        BOARD_FLASH=\"0xFFFFF\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_FLASH (hex)\"\n    elif [[ \"$board_flash_flag\" == \"32M\" || \"$board_flash_flag\" == \"32768\" ]] ; then\n        BOARD_FLASH=\"0x1FFFFFF\"\n        echo \"Board flash size :    32 Mb, $BOARD_FLASH (hex)\"\n    else\n        failures 6\n    fi\nfi\n#End: Check if Build is selected with argument '-f'\n\n#Start: Check if Build is selected with argument '-x'\nif [ ! -z \"$board_mem_flag\" ] ; then\n    if [ \"$board_mem_flag\" == \"8\" ] ; then\n        BOARD_MEM=\"0x21FF\"\n        echo \"Board mem size   :     $board_mem_flag Kb, $BOARD_MEM (hex)\"\n    elif [ \"$board_mem_flag\" == \"16\" ] ; then\n        BOARD_MEM=\"0x3DFF\"\n        echo \"Board mem size   :    $board_mem_flag Kb, $BOARD_MEM (hex)\"\n    elif [ \"$board_mem_flag\" == \"32\" ] ; then\n        BOARD_MEM=\"0x7DFF\"\n        echo \"Board mem size   :    $board_mem_flag Kb, $BOARD_MEM (hex)\"\n    else\n        failures 7\n    fi\nfi\n#End: Check if Build is selected with argument '-x'\n\n#Start: Check if new build is selected\nif [ \"$new_build_flag\" == \"1\" ]; then\n    check_flag=1\nfi\nif [[ \"$update_flag\" == \"1\" || \"$update_flag\" == \"2\" ]]; then\n    check_flag=1\nfi\n#End: Check if new build is selected\n\n# Prepare run MK404\n#Check MK404_Printer\nif [ ! -z $firmware_version_flag ]; then\n    MK404_PRINTER_TEMP=$(echo $firmware_version_flag | sed 's/\\(.*\\)\\///' | grep 'MK3')\n    if [ ! -z $MK404_PRINTER_TEMP ]; then\n        MK404_PRINTER=MK3\n    fi\n    MK404_PRINTER_TEMP=$(echo $firmware_version_flag | sed 's/\\(.*\\)\\///' | grep 'MK3S')\n    if [ ! -z $MK404_PRINTER_TEMP ]; then\n        MK404_PRINTER=MK3S\n    fi\n    MK404_PRINTER_TEMP=$(echo $firmware_version_flag | sed 's/\\(.*\\)\\///' | grep 'MK25')\n    if [ ! -z $MK404_PRINTER_TEMP ]; then\n        MK404_PRINTER=MK25\n    fi\n    MK404_PRINTER_TEMP=$(echo $firmware_version_flag | sed 's/\\(.*\\)\\///' | grep 'MK25S')\n    if [ ! -z $MK404_PRINTER_TEMP ]; then\n        MK404_PRINTER=MK25S\n    fi\nelif [[ ! -z $new_build_flag || ! -z $update_flag || ! -z $check_flag ]]; then\n        echo \"continue\"\nelse\n    failures 8\nfi\n\nif [[ -z $MK404_PRINTER && -z $new_build_flag && -z $update_flag && -z $check_flag ]]; then\n    failures 9\nfi\n\nif [ ! -z $mk404_printer_flag ]; then\n    if [ \"$mk404_printer_flag\" != \"$MK404_PRINTER\" ]; then\n        echo \"$(tput setaf 3)You defined a different printer type than the firmware!\"\n        echo \"This can cause unexpected issues.$(tput sgr 0)\"\n        echo\n        PS3=\"Select $(tput setaf 2)printer$(tput sgr 0) you want to use.\"\n        select which in \"$(tput setaf 2)$MK404_PRINTER$(tput sgr 0)\" \"$mk404_printer_flag\"; do\n            case $which in\n                $MK404_PRINTER)\n                    echo \"Set $MK404_PRINTER as printer\"\n                    break\n                    ;;\n                $mk404_printer_flag)\n                    echo \"Set $(tput setaf 3)$mk404_printer_flag$(tput sgr 0) as printer\"\n                    echo \"$(tput setaf 3)This firmware file isn't correct for this printer!!!$(tput sgr 0)\"\n                    echo\n                    MK404_PRINTER=$mk404_printer_flag\n                    read -p \"Press Enter to continue.\"\n                    break\n                    ;;\n                *)\n                    break\n                    ;;\n            esac\n        done\n    fi\nfi\n\nif [[ -z $MK404_PRINTER && -z $new_build_flag && -z $update_flag && -z $check_flag ]]; then\n    failures 10\nfi\n\nif [[ \"$MK404_PRINTER\" == \"MK25\" || \"$MK404_PRINTER\" == \"MK25S\" ]]; then\n    MK404_PRINTER=\"${MK404_PRINTER}_mR13\"\nelse\n    if [ \"$mk404_flag\" == \"2\" ]; then # Check if MMU is selected only for MK3/S\n        MK404_PRINTER=\"${MK404_PRINTER}MMU2\"\n    fi\nfi\n\n# Run MK404 with 'debugcore' and/or 'bootloader-file'\n    if [[ ! -z $MK404_DEBUG && \"$MK404_DEBUG\" == \"atmega404\" || ! -z $BOARD_MEM && \"$BOARD_MEM\" == \"0xFFFF\" ]]; then\n        MK404_options=\"--debugcore\"\n    fi\n    if [[ ! -z $MK404_DEBUG && \"$MK404_DEBUG\" == \"atmega404_no_bootloader\"  || ! -z $BOARD_FLASH && \"$BOARD_FLASH\" != \"0x3FFFF\" ]]; then\n        MK404_options='--debugcore --bootloader-file \"\"'\n    fi\n\n# Run MK404 with graphics\n    if [ ! -z \"$mk404_graphics_flag\" ]; then\n        if [ ! -z \"$MK404_options\" ]; then\n            MK404_options=\"${MK404_options} -g \"\n        else\n            MK404_options=\" -g \"\n        fi\n        if [[ \"$mk404_graphics_flag\" == \"1\" || \"$mk404_graphics_flag\" == \"lite\" || \"$mk404_graphics_flag\" == \"3\" ]]; then\n            MK404_options=\"${MK404_options}lite\"\n        elif [[ \"$mk404_graphics_flag\" == \"2\" || \"$mk404_graphics_flag\" == \"fancy\" || \"$mk404_graphics_flag\" == \"4\" ]]; then\n            MK404_options=\"${MK404_options}fancy\"\n        else\n            echo \"$(tput setaf 1)Unsupported MK404 graphics option $mk404_graphics_flag$(tput sgr 0)\"\n        fi\n        if [[ \"$mk404_graphics_flag\" == \"3\" || \"$mk404_graphics_flag\" == \"4\" ]]; then\n            MK404_options=\"${MK404_options} --colour-extrusion --extrusion Quad_HR\"\n        else\n            MK404_options=\"${MK404_options} --extrusion Line\"\n        fi\n    fi\nif [ ! -z $firmware_version_flag ]; then\n    MK404_firmware_file=\" -f $firmware_version_flag\"\nfi\n\n#End: Check MK404 agruments\n##}\n#### End: Check for options/flags\n\n#### Start: Check if OSTYPE is supported\ncheck_OS()\n{\nOS_FOUND=$( command -v uname)\ncase $( \"${OS_FOUND}\" | tr '[:upper:]' '[:lower:]') in\n  linux*)\n    TARGET_OS=\"linux\"\n   ;;\n  *)\n    TARGET_OS='unknown'\n    ;;\nesac\n# Linux\nif [ $TARGET_OS == \"linux\" ]; then\n    if [ $(uname -m) == \"x86_64\" ]; then\n        echo \"$(tput setaf 2)Linux 64-bit found$(tput sgr0)\"\n        Processor=\"64\"\n    #elif [[ $(uname -m) == \"i386\" || $(uname -m) == \"i686\" ]]; then\n    #    echo \"$(tput setaf 2)Linux 32-bit found$(tput sgr0)\"\n    #    Processor=\"32\"\n    else\n        failures 2\n    fi\nelse\n    failures 3\nfi\nsleep 2\n}\n#### End: Check if OSTYPE is supported\n\n#### Start: Check MK404 dependencies\ncheck_packages()\n{\npackages=(\n\"libelf-dev\"\n\"gcc\"\n\"gcc-avr\"\n\"libglew-dev\"\n\"freeglut3-dev\"\n\"libsdl-sound1.2-dev\"\n\"libpng-dev\"\n\"cmake\"\n\"zip\"\n\"wget\"\n\"git\"\n\"build-essential\"\n\"lcov\"\n\"mtools\"\n)\n\nfor check_package in ${packages[@]}; do\n    if dpkg-query -W -f'${db:Status-Abbrev}\\n' $check_package 2>/dev/null \\\n | grep -q '^.i $'; then\n        echo \"$(tput setaf 2)$check_package: Installed$(tput sgr0)\"\n    else\n        echo \"$(tput setaf 1)$check_package: Not installed use $(tput setaf 3)'sudo apt install $check_package'$(tput setaf 1) to install missing package$(tput sgr0)\"\n        not_installed=1;\n    fi\ndone\n\nif [ \"$not_installed\" = \"1\" ]; then\n    failures 4\nfi\n}\n#### End: Check MK404 dependencies\n\n#### Start: Set build environment\nset_build_env_variables()\n{\nMK404_SCRIPT_PATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\nMK404_URL=\"https://github.com/vintagepc/MK404.git\"\nMK404_owner=\"vintagepc\"\nMK404_project=\"MK404\"\nMK404_PATH=\"$MK404_SCRIPT_PATH/../MK404/master\"\nMK404_BUILD_PATH=\"$MK404_PATH/build\"\n}\n#### End: Set build environment\n\n#### Start: List few useful data\noutput_useful_data()\n{\necho\necho \"Script path :\" $MK404_SCRIPT_PATH\necho \"OS          :\" $TARGET_OS\necho \"\"\necho \"MK404 path  :\" $MK404_PATH\n}\n#### End: List few useful data\n\n#### Start: Clone MK404 if needed\nget_MK404()\n{\nif [ ! -d $MK404_PATH ]; then\n    #release_url=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/$MK404_owner/$MK404_project/releases/latest)\n    #release_tag=$(basename $release_url)\n    #git clone -b $release_tag -- https://github.com/$MK404_owner/$MK404_project.git $MK404_PATH\n    git clone $MK404_URL $MK404_PATH\nfi\n}\n#### End: Clone MK404 if needed\n\n#### Start: Check for updates\ncheck_for_updates()\n{\nif [ \"$check_flag\" == \"1\" ]; then\n    if [ -d $MK404_BUILD_PATH ]; then\n        cd $MK404_BUILD_PATH\n        MK404_current_version=$( command ./MK404 --version | grep \"MK404\" | cut -f 4 -d \" \")\n        cd $MK404_PATH\n    else\n        echo \"Cannot check current version as it has not been build.\"\n    fi\n# Get local Commit_Hash\n    MK404_local_GIT_COMMIT_HASH=$(git log --pretty=format:\"%H\" -1)\n# Get local Commit_Number\n    MK404_local_GIT_COMMIT_NUMBER=$(git rev-list HEAD --count)\n# Get latest release\n    MK404_release_url=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/$MK404_owner/$MK404_project/releases/latest)\n    MK404_release_tag=$(basename $MK404_release_url)\n# Get release Commit_Hash\n    MK404_release_GIT_COMMIT_HASH=$(git ls-remote | grep \"refs/tags/$MK404_release_tag\"  | cut -f 1)\n# Get release Commit_Number\n    MK404_release_GIT_COMMIT_NUMBER=$(git rev-list $MK404_release_tag --count)\n# Get latest development Commit_Hash\n    MK404_devel_GIT_COMMIT_HASH=$(git for-each-ref refs/remotes/origin/master | cut -d\" \" -f 1)\n# Get latest development Commit_Number\n    MK404_devel_GIT_COMMIT_NUMBER=$(git rev-list refs/remotes/origin/master --count)\n# Output\n    echo \"\"\n    echo \"Current version         : $MK404_current_version\"\n    echo \"\"\n    echo \"Current local hash      : $MK404_local_GIT_COMMIT_HASH\"\n    echo \"Current local commit nr : $MK404_local_GIT_COMMIT_NUMBER\"\n    if [ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_release_GIT_COMMIT_HASH\" ]; then\n        echo \"$(tput setaf 1)\"\n    else\n        echo \"$(tput setaf 2)\"\n    fi\n    echo \"Latest release tag      : $MK404_release_tag\"\n    echo \"Latest release hash     : $MK404_release_GIT_COMMIT_HASH\"\n    echo \"Latest release commit nr: $MK404_release_GIT_COMMIT_NUMBER\"\n    if [ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_devel_GIT_COMMIT_HASH\" ]; then\n        echo \"$(tput setaf 1)\"\n    else\n        echo \"$(tput setaf 2)\"\n    fi\n    echo \"Latest devel hash       : $MK404_devel_GIT_COMMIT_HASH\"\n    echo \"Latest devel commit nr  : $MK404_devel_GIT_COMMIT_NUMBER\"\n    echo \"$(tput sgr 0)\"\n\n# Check for updates\n    if [ ! -z $MK404_release_GIT_COMMIT_HASH ]; then\n        if [[ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_release_GIT_COMMIT_HASH\" && -z \"$update_flag\" ]]; then\n            echo \"$(tput setaf 2)Update to release is availible.$(tput sgr 0)\"\n            read -t 10 -n 1 -p \"$(tput setaf 3)Update to release now Y/n$(tput sgr 0)\" update_answer\n            if [[ \"$update_answer\" == \"Y\" || \"$update_answer\" == \"y\" ]]; then\n                update_flag=1\n            fi\n            echo \"\"\n        fi\n    fi\n    if [ ! -z $MK404_devel_GIT_COMMIT_HASH ]; then\n        if [[ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_devel_GIT_COMMIT_HASH\" && -z \"$update_flag\" ]]; then\n            echo \"$(tput setaf 2)Update to devel is availible.$(tput sgr 0)\"\n            read -t 10 -n 1 -p \"$(tput setaf 3)Update to devel now Y/n$(tput sgr 0)\" update_answer\n            if [[ \"$update_answer\" == \"Y\" || \"$update_answer\" == \"y\" ]]; then\n                update_flag=2\n            fi\n            echo \"\"\n        fi\n    fi\nfi\n}\n#### End: Check for updates\n\n#### Start: Fetch updates and force new build\nfetch_updates()\n{\nif [ \"$update_flag\" == \"1\" ]; then\n    if [ ! -z $MK404_release_GIT_COMMIT_HASH ]; then\n        if [ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_release_GIT_COMMIT_HASH\" ]; then\n            echo \"\"\n            git fetch --all\n            read -t 5 -p \"$(tput setaf 2)Updating MK404 to release!$(tput sgr 0)\"\n            echo \"\"\n            git reset --hard $MK404_release_tag\n            read -t 5 -p \"$(tput setaf 2)Compiling MK404 release!$(tput sgr 0)\"\n            echo \"\"\n            new_build_flag=1\n        fi\n    fi\nelif [ \"$update_flag\" == \"2\" ]; then\n    if [ ! -z $MK404_devel_GIT_COMMIT_HASH ]; then\n        if [ \"$MK404_local_GIT_COMMIT_HASH\" != \"$MK404_devel_GIT_COMMIT_HASH\" ]; then\n            echo \"\"\n            git fetch --all\n            read -t 5 -p \"$(tput setaf 2)Updating MK404 to devel!$(tput sgr 0)\"\n            echo \"\"\n            git reset --hard origin/master\n            read -t 5 -p \"$(tput setaf 2)Compiling MK404 devel!$(tput sgr 0)\"\n            echo \"\"\n            new_build_flag=1\n        fi\n    fi\nfi\n}\n#### End: Fetch updates and force new build\n\n#### Start: Prepare MK404 build\nprepare_MK404()\n{\nif [ ! -d $MK404_BUILD_PATH ]; then\n    mkdir -p $MK404_BUILD_PATH\nfi\n}\n#### End: Prepare MK404 build\n\n#### Start: Build MK404\nbuild_MK404()\n{\nif [[ ! -f \"$MK404_BUILD_PATH/Makefile\" || \"$new_build_flag\" == \"1\" ]]; then\n# Init and update submodules\n    if [ -d $MK404_BUILD_PATH ]; then\n        rm -rf $MK404_BUILD_PATH\n        mkdir -p $MK404_BUILD_PATH\n    fi\n    git submodule init\n    git submodule update\n    cmake -B$MK404_BUILD_PATH -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_BUILD_TYPE=Release -G \"Unix Makefiles\"\nfi\n\n# Make MK404\ncd $MK404_BUILD_PATH\nif [[ ! -f \"$MK404_BUILD_PATH/MK404\" || \"$new_build_flag\" == \"1\" ]]; then\n    make\nfi\n\n# Make SDcards\nif [[ ! -f \"$MK404_BUILD_PATH/Prusa_MK3S_SDcard.bin\" || \"$new_build_flag\" == \"1\" ]]; then\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK3S_SDcard.bin\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK3_SDcard.bin\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK25_13_SDcard.bin\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK25S_13_SDcard.bin\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK3SMMU2_SDcard.bin\n    cmake --build $MK404_BUILD_PATH --config Release --target Prusa_MK3MMU2_SDcard.bin\nfi\n}\n#### End: Build MK404\n\n\n#### Start: Run MK404 SIM\nrun_MK404_SIM()\n{\nif [ ! -z $mk404_flag ]; then\n    # Output some useful data\n    echo \"Printer     : $MK404_PRINTER\"\n    echo \"Options     : $MK404_options\"\n    echo \"\"\n    read -t 5 -p \"Press $(tput setaf 2)Enter$(tput sgr 0) to start MK404\"\n    echo \"\"\n\n    # Change to MK404 build folder\n    cd $MK404_BUILD_PATH\n\n    # Start MK404\n    # default with serial output and terminal to manipulate it via terminal\n    echo \"\"\n    echo \"./MK404 Prusa_$MK404_PRINTER -s --terminal $MK404_options $MK404_firmware_file\"\n    sleep 5\n    ./MK404 Prusa_$MK404_PRINTER -s --terminal $MK404_options $MK404_firmware_file || exit 10\nfi\n}\n#### End: Run MK404 SIM\n\n#### Check OS and needed packages\necho \"Check OS\"\ncheck_OS\ncheck_packages\n\n#### Check for options/flags\necho \"Check for options\"\n\n#### Prepare build environment\necho \"Prepare build env\"\nset_build_env_variables\noutput_useful_data\nget_MK404\n\n#\ncd $MK404_PATH\n\ncheck_for_updates\nfetch_updates\nprepare_MK404\nbuild_MK404\nrun_MK404_SIM\n#### End of MK404 Simulator\n"
        },
        {
          "name": "PF-build.sh",
          "type": "blob",
          "size": 71.087890625,
          "content": "#!/bin/bash\n# This bash script is used to compile automatically the Prusa firmware with a dedicated build environment and settings\n#\n# Supported OS: Windows 10, Linux64 bit\n# Beta OS: Linux32 bit\n#\n# Linux:\n#\n# Windows:\n# To execute this script you gonna need few things on your Windows machine\n#\n# Linux Subsystem Ubuntu\n# 1. Follow these instructions\n# 2. Open Ubuntu bash and get latest updates with 'apt-get update'\n# 3. Install zip with 'apt-get install zip'\n# 4. Install python3 with 'apt-get install python3'\n# 5. Add command 'ln -sf /usr/bin/python3.5 /usr/bin/python' to link python3 to python.\n#    Do not install 'python' as python 2.x has end of life see https://pythonclock.org/\n# 6. Add at top of ~/.bashrc following lines by using 'sudo nano ~/.bashrc'\n#\n#    export OS=\"Linux\"\n#    export JAVA_TOOL_OPTIONS=\"-Djava.net.preferIPv4Stack=true\"\n#    export GPG_TTY=$(tty)\n#\n#    and confirm them. Restart Ubuntu bash\n#\n# Or GIT-BASH\n# 1. Download and install the correct (64bit or 32bit) Git version https://git-scm.com/download/win\n# 2. Also follow these instructions https://gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058\n# 3. Download and install 7z-zip from its official website.\n#    By default, it is installed under the directory /c/Program Files/7-Zip in Windows 10 as my case.\n# 4. Run git Bash under Administrator privilege and navigate to the directory /c/Program Files/Git/mingw64/bin,\n#    you can run the command ln -s /c/Program Files/7-Zip/7z.exe zip.exe\n#\n# Useful things to edit and compare your custom Firmware\n# 1. Download and install current and correct (64bit or 32bit) Notepad++ version https://notepad-plus-plus.org/download\n# 2. Another great tool to compare your custom mod and stock firmware is WinMerge http://winmerge.org/downloads/?lang=en\n#\n# Example for MK3: open git bash and change to your Firmware directory\n# <username>@<machine name> MINGW64 /<drive>/path\n# bash build.sh 1_75mm_MK3-EINSy10a-E3Dv6full\n#\n# Example for MK25: open git bash and change to your directory\n# gussner@WIN01 MINGW64 /d/Data/Prusa-Firmware/MK3\n# bash build.sh 1_75mm_MK25-RAMBo13a-E3Dv6full\n#\n# The compiled hex files can be found in the folder above like from the example\n# gussner@WIN01 MINGW64 /d/Data/Prusa-Firmware\n# FW351-Build1778-1_75mm_MK25-RAMBo13a-E3Dv6full.hex\n#\n# Why make Arduino IDE portable?\n# To have a distinguished Prusa Firmware build environment I decided to use Arduino IDE in portable mode.\n# - Changes made to other Arduino instances do not change anything in this build environment.\n#   By default Arduino IDE uses \"users\" and shared library folders which is useful as soon you update the Software.\n#   But in this case we need a stable and defined build environment, so keep it separated it kind of important.\n#   Some may argue that this is only used by a script, BUT as soon someone accidentally or on purpose starts Arduino IDE\n#   it will use the default Arduino IDE folders and so can corrupt the build environment.\n#\n# Version: 2.0.3-Build_89\n# Change log:\n# 12 Jan 2019, 3d-gussner, Fixed \"compiler.c.elf.flags=-w -Os -Wl,-u,vfprintf -lprintf_flt -lm -Wl,--gc-sections\" in 'platform.txt'\n# 16 Jan 2019, 3d-gussner, Build_2, Added development check to modify 'Configuration.h' to prevent unwanted LCD messages that Firmware is unknown\n# 17 Jan 2019, 3d-gussner, Build_3, Check for OS Windows or Linux and use the right build environment\n# 10 Feb 2019, ropaha, Pull Request, Select variant from list while using build.sh\n# 10 Feb 2019, ropaha, change FW_DEV_VERSION automatically depending on FW_VERSION RC/BETA/ALPHA\n# 10 Feb 2019, 3d-gussner, 1st tests with English only\n# 10 Feb 2019, ropaha, added compiling of all variants and English only\n# 10 Feb 2019, 3d-gussner, Set OUTPUT_FOLDER for hex files\n# 11 Feb 2019, 3d-gussner/ropaha, Minor changes and fixes\n# 11 Feb 2019, 3d-gussner, Ready for RC\n# 12 Feb 2019, 3d-gussner, Check if wget and zip are installed. Thanks to Bernd to point it out\n# 12 Feb 2019, 3d-gussner, Changed OS check to OSTYPE as it is not supported on Ubuntu\n#                          Also added different BUILD_ENV folders depending on OS used so Windows\n#                          Users can use git-bash AND Windows Linux Subsystems at the same time\n#                          Cleanup compiler flags is only depends on OS version.\n# 12 Feb 2019, 3d-gussner, Added additional OSTYPE check\n# 15 feb 2019, 3d-gussner, Added zip files for miniRAMbo multi language hex files\n# 15 Feb 2019, 3d-gussner, Added more checks if\n#                                              Compiled Hex-files\n#                                              Configuration_prusa.h\n#                                              language build files\n#                                              multi language firmware files exist and clean them up\n# 15 Feb 2019, 3d-gussner, Fixed selection GOLD/UNKNOWN DEV_STATUS for ALL variants builds, so you have to choose only once\n# 15 Feb 2019, 3d-gussner, Added some colored output\n# 15 Feb 2019, 3d-gussner, troubleshooting and minor fixes\n# 16 Feb 2019, 3d-gussner, Script can be run using arguments\n#                          $1 = variant, example \"1_75mm_MK3-EINSy10a-E3Dv6full.h\" at this moment it is not possible to use ALL\n#                          $2 = multi language OR English only [ALL/EN_FARM]\n#                          $3 = development status [GOLD/RC/BETA/ALPHA/DEVEL/DEBUG]\n#                          If one argument is wrong a list of valid one will be shown\n# 13 Mar 2019, 3d-gussner, MKbel updated the Linux build environment to version 1.0.2 with an Fix maximum firmware flash size.\n#                          So did I\n# 11 Jul 2019, deliopoulos,Updated to v1.0.6 as Prusa needs a new board definition for Firmware 3.8.x86_64\n#                           - Split the Download of Windows Arduino IDE 1.8.5 and Prusa specific part\n#                            --> less download volume needed and saves some time\n#\n# 13 Jul 2019, deliopoulos,Splitting of Arduino IDE and Prusa parts also for Linux64\n# 13 Jul 2019, 3d-gussner, Added Linux 32-bit version (untested yet)\n#                          MacOS could be added in future if needs\n# 14 Jul 2019, 3d-gussner, Update preferences and make it really portable\n# 15 Jul 2019, 3d-gussner, New PF-build-env GitHub branch\n# 16 Jul 2019, 3d-gussner, New Arduino_boards GitHub fork\n# 17 Jul 2019, 3d-gussner, Final tests under Windows 10 and Linux Subsystem for Windows\n# 18 Jul 2019, 3d-gussner, Added python check\n# 18 Jul 2019, deliopoulos, No need more for changing 'platform.txt' file as it comes with the Arduino Boards.\n# 18 Jul 2019, deliopoulos, Modified 'PF_BUILD_FILE_URL' to use 'BUILD_ENV' variable\n# 22 Jul 2019, 3d-gussner, Modified checks to check folder and/or installation output exists.\n# 22 Jul 2019, 3d-gussner, Added check if Arduino IDE 1.8.5 boards have been updated\n# 22 Jul 2019, 3d-gussner, Changed exit numbers 1-13 for prepare build env 21-28 for prepare compiling 31-36 compiling\n# 22 Jul 2019, 3d-gussner, Changed BOARD_URL to DRracers repository after he pulled my PR https://github.com/DRracer/Arduino_Boards/pull/1\n# 23 Jul 2019, 3d-gussner, Changed Build-env path to \"PF-build-dl\" as requested in PR https://github.com/prusa3d/Prusa-Firmware/pull/2028\n#                          Changed Hex-files folder to PF-build-hex as requested in PR\n# 23 Jul 2019, 3d-gussner, Added Finding OS version routine so supporting new OS should get easier\n# 26 Jul 2019, 3d-gussner, Change JSON repository to prusa3d after PR https://github.com/prusa3d/Arduino_Boards/pull/1 was merged\n# 23 Sep 2019, 3d-gussner, Prepare PF-build.sh for coming Prusa3d/Arduino_Boards version 1.0.2 Pull Request\n# 17 Oct 2019, 3d-gussner, Changed folder and check file names to have separated build environments depending on Arduino IDE version and\n#                          board-versions.\n# 15 Dec 2019, 3d-gussner, Prepare for switch to Prusa3d/PF-build-env repository\n# 15 Dec 2019, 3d-gussner, Fix Arduino user preferences for the chosen board.\n# 17 Dec 2019, 3d-gussner, Fix \"timer0_fract = 0\" warning by using Arduino_boards v1.0.3\n# 28 Apr 2020, 3d-gussner, Added RC3 detection\n# 03 May 2020, deliopoulos, Accept all RCx as RC versions\n# 05 May 2020, 3d-gussner, Make a copy of `not_tran.txt`and `not_used.txt` as `not_tran_$VARIANT.txt`and `not_used_$VARIANT.txt`\n#                          After compiling All multi-language variants it makes it easier to find missing or unused translations.\n# 12 May 2020, DRracer   , Cleanup double MK2/s MK25/s `not_tran` and `not_used` files\n# 13 May 2020, leptun    , If cleanup files do not exist don't try to.\n# 01 Oct 2020, 3d-gussner, Bug fix if using argument EN_FARM. Thank to @leptun for pointing out.\n#                          Change Build number to script commits 'git rev-list --count HEAD PF-build.sh'\n# 02 Oct 2020, 3d-gussner, Add UNKNOWN as argument option\n# 05 Oct 2020, 3d-gussner, Disable pause and warnings using command line with all needed arguments\n#                          Install needed apps under linux if needed.\n#                          Clean PF-Firmware build when changing git branch\n# 02 Nov 2020, 3d-gussner, Check for \"gawk\" on Linux\n#                          Add argument to change build number automatically to current commit or define own number\n#                          Update exit numbers 1-13 for prepare build env 21-29 for prepare compiling 30-36 compiling\n# 08 Jan 2021, 3d-gussner, Comment out 'sudo' auto installation\n#                          Add '-?' '-h' help option\n# 27 Jan 2021, 3d-gussner, Add `-c`, `-p` and `-n` options\n# 12 Feb 2021, 3d-gussner, Add MK404-build.sh\n# 13 Feb 2021, 3d-gussner, Indentations\n# 13 Feb 2021, 3d-gussner, MK404 improvements like \"flash\" MK3, MK3S languages files to MK404 xflash.\n# 27 Feb 2021, 3d-gussner, Add './lang-community.sh' and update exits\n# 03 May 2021, 3d-gussner, Update exit numbers\n#                          01-14 prepare build env\n#                          21-32 prepare compiling\n#                          41-47 compiling\n#                          51-54 cleanup\n#                          61-62 MK404\n# 03 May 2021, 3d-gussner, Update documentation and change version to v1.2.0\n# 03 May 2021, 3d-gussner, Add SIM atmega404\n# 17 Jun 2021, 3d-gussner, Update PF-build.sh to work after DRracer Remove FW version parsing PR\n# 17 Jun 2021, 3d-gussner, Save ELF files for FW3.10.1 debugging PRs\n# 17 Jun 2021, 3d-gussner, Add verbose_IDE to output more information during build\n# 17 Jun 2021, 3d-gussner, Change version to v2.0.0\n# 18 Jun 2021, 3d-gussner, Use atmega404 if extanded RAM or FLASH size are chosen\n# 18 Jun 2021, 3d-gussner, Remove MK404 copy of lang file as it has been fixed in MK404\n# 21 Jun 2021, 3d-gussner, Change atmega404 board flash argument to y\n#                          Use newer version of MK404-build.sh instead start the program\n# 22 Jun 2021, 3d-gussner, Added _RAM-<value> and _FLASH-<value> as OUTPUT_FILE_SUFFIX if someone builds an atmega404 firmware\n#                          Added some logic if IDE 1.8.13 is used\n#                          Added some logic if Arduino_boards 1.0.4 is used\n#                          Fixed typo\n#                          Restore original `Configuration.h` and `config.h` in case of cannceled script or failed compiling during next start of this script.\n#                          use function\n# 23 Jun 2021, 3d-gussner, Improve MK404 usage\n# 24 Jun 2021, 3d-gussner, Fix MK404 user interaction not to show if compiling 'All' variants\n# 24 Jun 2021, 3d-gussner, MK404 is only supported on Linux at this moment.\n# 03 Jan 2022, 3d-gussner, Remove calling lang-community.sh as not needed anymore\n# 21 Jan 2022, 3d-gussner, Sort variants\n#                          Add Arduino 1.8.19 as an option\n# 25 Jan 2022, 3d-gussner, Allow upper and lower case for MK404\n# 09 Feb 2022, 3d-gussner, Add community language firmware files for MK2.5/S\n#                          Add selection of language in MK404 for MK2.5/S\n# 10 Feb 2022, 3d-gussner, Add SRCDIR for compatibility with build server\n# 13 Feb 2022, leptun    , Fix -o for \"Restoring\" messages after failure\n# 24 Feb 2022, 3d-gussner, Change to Arduino IDE 1.8.19 and Arduino boards 1.0.5\n#                          Fix DEV_STATUS to set correctly on RC/BETA/ALPHA/DEVEL\n#                          Fix atmegaMK404 Board mem and flash modifications\n#                          Limit atmegaMK404 boards mem to 8,16,32\n# 20 Jun 2022, 3d-gussner, Change to Ardunio_boards v1.0.5-1\n# 20 Jun 2022, wavexx    , New PO-based language translation support\n# 20 Jun 2022, 3d-gussner, fix Mk2.5/S zip after change PO-based language translation support\n# 06 Jul 2022, 3d-gussner, Change to v1.0.8 and Ardunio_boards v1.0.5-2\n# 06 Jul 2022, 3d-gussner, Fix branch check\n# 12 Jul 2022, 3d-gussner, Check if FW_FLAVAVOR and FW_FLAVERSION are correct\n# 29 Sep 2022, 3d-gussner, Rename EN_ONLY to EN_FARM\n# 03 Oct 2022, 3d-gussner, Update to Arduino boards 1.0.6 and remove gawk\n# 17 Dec 2022, wavexx    , Check for the coorect pyton version, improve depencies\n# 14 Mar 2023, 3d-gussner, Rename MMU2 to MMU\n# 11 Oct 2023, 3d-gussner, Fix issues with new cmake build, remove devel flag\n\nSCRIPT_PATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\nexport SRCDIR=$SCRIPT_PATH\n\n#### Start: Failures\nfailures()\n{\ncase \"$1\" in\n    0) echo \"$(tput setaf 2)PF-build.sh finished with success$(tput sgr0)\" ;;\n    1) echo \"$(tput setaf 1)This script doesn't support your Operating system!$(tput sgr0)\" ; exit 1 ;;\n    4) echo \"$(tput setaf 5)Follow the instructions above $(tput sgr0)\" ; exit 4 ;;\n    5) echo \"$(tput setaf 5)Invalid argument $(tput sgr0)\" ; exit 5 ;;\n    8) echo \"$(tput setaf 5)Failed to download $(tput sgr0)\" ; exit 8 ;;\n    9) echo \"$(tput setaf 5)Failed to create folder $(tput sgr0)\" ; exit 9 ;;\n    10) echo \"$(tput setaf 5)Failed to change folder $(tput sgr0)\"; exit 10 ;;\n    11) echo \"$(tput setaf 5)Failed to unzip $(tput sgr0)\" ; exit 11 ;;\n    12) echo \"$(tput setaf 5)Failed to copy file $(tput sgr0)\" ; exit 12 ;;\n    13) echo \"$(tput setaf 5)Failed to delete $(tput sgr0)\" ; exit 13 ;;\n    20) echo \"$(tput setaf 2)Conditional stop initiated by user $(tput sgr0)\" ; exit 20 ;;\n    21) echo \"$(tput setaf 1)PF-build.sh has been interrupted/failed. $(tput setaf 6)Restoring 'Configuration.h'$(tput sgr0)\" ; if [ $OUTPUT == \"1\" ] ; then sleep 5 ; fi ;;\n    22) echo \"$(tput setaf 1)PF-build.sh has been interrupted/failed. $(tput setaf 6)Restoring 'config.h'$(tput sgr0)\" ; if [ $OUTPUT == \"1\" ] ; then sleep 5 ; fi ;;\n    24) echo \"$(tput setaf 1)PF-build.sh stopped due to compiling errors! Try to restore modified files.$(tput sgr0)\"; check_script_failed_nr1 ; check_script_failed_nr2 ; cleanup_firmware ; exit 24 ;;\n    25) echo \"$(tput setaf 1)Failed to execute $(tput sgr0)\" ; exit 25 ;;\n    26) echo \"$(tput setaf 1)FW_FLAVAVOR or FW_FLAVERSION commented out in 'Firmware/Configuration.h'$(tput sgr0)\"; check_script_failed_nr1 ; check_script_failed_nr2 ; cleanup_firmware ; exit 26 ;;\nesac\n}\n#### End: Failures\n\n#### Start: Check for options/flags\n##check_options()\n##{\nwhile getopts b:c:d:g:h:i:j:l:m:n:o:p:v:x:y:?h flag\n    do\n        case \"${flag}\" in\n            b) build_flag=${OPTARG};;\n            c) clean_flag=${OPTARG};;\n            g) mk404_graphics_flag=${OPTARG};;\n            h) help_flag=1;;\n            i) IDE_flag=${OPTARG};;\n            j) verbose_IDE_flag=${OPTARG};;\n            l) language_flag=${OPTARG};;\n            m) mk404_flag=${OPTARG};;\n            n) new_build_flag=${OPTARG};;\n            o) output_flag=${OPTARG};;\n            p) prusa_flag=${OPTARG};;\n            v) variant_flag=${OPTARG};;\n            x) board_mem_flag=${OPTARG};;\n            y) board_flash_flag=${OPTARG};;\n            ?) help_flag=1;;\n        esac\n    done\n\n#\n# '?' 'h' argument usage and help\nif [ \"$help_flag\" == \"1\" ] ; then\necho \"***************************************\"\necho \"* PF-build.sh Version: 2.0.2-Build_80 *\"\necho \"***************************************\"\necho \"Arguments:\"\necho \"$(tput setaf 2)-b$(tput sgr0) Build/commit number\"\necho \"$(tput setaf 2)-c$(tput sgr0) Do not clean up lang build\"\necho \"$(tput setaf 2)-g$(tput sgr0) Start MK404 graphics\"\necho \"$(tput setaf 2)-i$(tput sgr0) Arduino IDE version\"\necho \"$(tput setaf 2)-j$(tput sgr0) Arduino IDE verbose output\"\necho \"$(tput setaf 2)-l$(tput sgr0) Languages\"\necho \"$(tput setaf 2)-m$(tput sgr0) Start MK404 sim\"\necho \"$(tput setaf 2)-n$(tput sgr0) New fresh build\"\necho \"$(tput setaf 2)-o$(tput sgr0) Output\"\necho \"$(tput setaf 2)-p$(tput sgr0) Keep Configuration_prusa.h\"\necho \"$(tput setaf 2)-v$(tput sgr0) Variant\"\necho \"$(tput setaf 2)-x$(tput sgr0) Board memory size\"\necho \"$(tput setaf 2)-y$(tput sgr0) Board flash size\"\necho \"$(tput setaf 2)-?$(tput sgr0) Help\"\necho\necho \"Brief USAGE:\"\necho \"  $(tput setaf 2)./PF-build.sh$(tput sgr0) [-b] [-c] [-d] [-g] [-i] [-j] [-l] [-m] [-n] [-o] [-p ] -[v] [-x] [-y] [-h] [-?]\"\necho\necho \"  -b : '$(tput setaf 2)Auto$(tput sgr0)' needs git or a number\"\necho \"  -c : '$(tput setaf 2)0$(tput sgr0)' clean up, '$(tput setaf 2)1$(tput sgr0)' keep\"\necho \"  -g : '$(tput setaf 2)0$(tput sgr0)' no '$(tput setaf 2)1$(tput sgr0)' lite '$(tput setaf 2)2$(tput sgr0)' fancy  '$(tput setaf 2)3$(tput sgr0)' lite  with Quad_HR '$(tput setaf 2)4$(tput sgr0)' fancy with Quad_HR\"\necho \"  -i : '$(tput setaf 2)1.8.5$(tput sgr0)', '$(tput setaf 2)1.8.19$(tput sgr0)'\"\necho \"  -j : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes\"\necho \"  -l : '$(tput setaf 2)ALL$(tput sgr0)' for multi language or '$(tput setaf 2)EN_FARM$(tput sgr0)' for English only\"\necho \"  -m : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes '$(tput setaf 2)2$(tput sgr0)' with MMU2\"\necho \"  -n : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes\"\necho \"  -o : '$(tput setaf 2)1$(tput sgr0)' force or '$(tput setaf 2)0$(tput sgr0)' block output and delays\"\necho \"  -p : '$(tput setaf 2)0$(tput sgr0)' no, '$(tput setaf 2)1$(tput sgr0)' yes\"\necho \"  -v : '$(tput setaf 2)All$(tput sgr0)' or variant file name\"\necho \"  -x : '$(tput setaf 2)8$(tput sgr0)','$(tput setaf 2)16$(tput sgr0)'or'$(tput setaf 2)32$(tput sgr0)' Kb.\"\necho \"  -y : '$(tput setaf 2)256$(tput sgr0)','$(tput setaf 2)384$(tput sgr0)','$(tput setaf 2)512$(tput sgr0)','$(tput setaf 2)1024$(tput sgr0)''$(tput setaf 2)32M$(tput sgr0)'\"\necho\necho \"Example:\"\necho \"  $(tput setaf 2)./PF-build.sh -v All -l ALL -d GOLD$(tput sgr0)\"\necho \"  Will build all variants as multi language and final GOLD version\"\necho\necho \"  $(tput setaf 2) ./PF-build.sh -v 1_75mm_MK3S-EINSy10a-E3Dv6full.h -b Auto -l ALL -d GOLD -o 1 -c 1 -p 1 -n 1$(tput sgr0)\"\necho \"  Will build MK3S multi language final GOLD firmware \"\necho \"  with current commit count number and output extra information,\"\necho \"  not delete lang build temporary files, keep Configuration_prusa.h and build with new fresh build folder.\"\necho\nexit 6\nfi\n\n#Check if verbose_IDE is selected with argument '-j'\n\nif [ ! -z \"$verbose_IDE_flag\" ]; then\n    if [ $verbose_IDE_flag == \"1\" ]; then\n        verbose_IDE=\"1\"\n    elif [ $verbose_IDE_flag == \"0\" ]; then\n        verbose_IDE=\"0\"\n    else\n        echo \"Only '0' and '1' are valid verbose_IDE values.\"\n        failures 5\n    fi\nelse\n    verbose_IDE=\"0\"\nfi\n\n#Check if Build is selected with argument '-f'\nif [ ! -z \"$board_flash_flag\" ] ; then\n    if [ \"$board_flash_flag\" == \"256\" ] ; then\n        BOARD_FLASH=\"0x3FFFF\"\n        BOARD_maximum_size=\"253952\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_maximum_size bytes, $BOARD_FLASH (hex)\"\n    elif [ \"$board_flash_flag\" == \"384\" ] ; then\n        BOARD_FLASH=\"0x5FFFF\"\n        BOARD_maximum_size=\"385024\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_maximum_size bytes, $BOARD_FLASH (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_FLASH-$board_flash_flag\"\n\n    elif [ \"$board_flash_flag\" == \"512\" ] ; then\n        BOARD_FLASH=\"0x7FFFF\"\n        BOARD_maximum_size=\"516096\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_maximum_size bytes, $BOARD_FLASH (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_FLASH-$board_flash_flag\"\n    elif [ \"$board_flash_flag\" == \"1024\" ] ; then\n        BOARD_FLASH=\"0xFFFFF\"\n        BOARD_maximum_size=\"1040384\"\n        echo \"Board flash size :   $board_flash_flag Kb, $BOARD_maximum_size bytes, $BOARD_FLASH (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_FLASH-$board_flash_flag\"\n    elif [[ \"$board_flash_flag\" == \"32M\" || \"$board_flash_flag\" == \"32768\" ]] ; then\n        BOARD_FLASH=\"0x1FFFFFF\"\n        BOARD_maximum_size=\"33546240\"\n        echo \"Board flash size :    32 Mb, $BOARD_maximum_size bytes, $BOARD_FLASH (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_FLASH-$board_flash_flag\"\n    else\n        echo \"Unsupported board flash size chosen. Only '256', '384', '512', '1024' and '32M' are allowed.\"\n        failures 5\n    fi\nfi\n\n#Check if Build is selected with argument '-x'\nif [ ! -z \"$board_mem_flag\" ] ; then\n    if [ \"$board_mem_flag\" == \"8\" ] ; then\n        BOARD_MEM=\"0x21FF\"\n        echo \"Board mem size   :     $board_mem_flag Kb, $BOARD_MEM (hex)\"\n    elif [ \"$board_mem_flag\" == \"16\" ] ; then\n        BOARD_MEM=\"0x3DFF\"\n        echo \"Board mem size   :    $board_mem_flag Kb, $BOARD_MEM (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_RAM-$board_mem_flag\"\n    elif [ \"$board_mem_flag\" == \"32\" ] ; then\n        BOARD_MEM=\"0x7DFF\"\n        echo \"Board mem size   :    $board_mem_flag Kb, $BOARD_MEM (hex)\"\n        OUTPUT_FILENAME_SUFFIX=\"${OUTPUT_FILENAME_SUFFIX}_RAM-$board_mem_flag\"\n    else\n        echo \"Unsupported board mem size chosen. Only '8', '16' and '32' are allowed.\"\n        failures 5\n    fi\nfi\n\n#Start: Check if Arduino IDE version is correct\nif [ ! -z \"$IDE_flag\" ]; then\n    if [[ \"$IDE_flag\" == \"1.8.5\" || \"$IDE_flag\" == \"1.8.19\" ]]; then\n        ARDUINO_ENV=\"${IDE_flag}\"\n    else\n        ARDUINO_ENV=\"1.8.19\"\n    fi\nelse\n    ARDUINO_ENV=\"1.8.19\"\nfi\n#End: Check if Arduino IDE version is correct\n\n#Start: Check if Output is selecetd via argument '-o'\nif [[ -z \"$output_flag\" || \"$output_flag\" == 1 ]] ; then\n    OUTPUT=1\nelse\n    OUTPUT=0\nfi\n#End: Check if Output is selecetd via argument '-o'\n##}\n#### End: Check for options/flags\n\n#### Start: Make backup of Configuration.h\nmake_backup1()\n{\nif [ ! -f \"$SCRIPT_PATH/Firmware/Configuration.tmp\" ]; then\n    cp -f $SCRIPT_PATH/Firmware/Configuration.h $SCRIPT_PATH/Firmware/Configuration.tmp\nfi\n}\n#### End: Make backup of Configuration.h\n\n#### Start: Make backup of config.h\nmake_backup2()\n{\nif [ ! -f \"$SCRIPT_PATH/Firmware/config.tmp\" ]; then\n    cp -f $SCRIPT_PATH/Firmware/config.h $SCRIPT_PATH/Firmware/config.tmp\nfi\n}\n#### End: Make backup of config.h\n\n#### Start: Check Check if script has been canceled or failed nr1.\ncheck_script_failed_nr1()\n{\n#Check for \"Configuration.tmp\"\nif [ -f \"$SCRIPT_PATH/Firmware/Configuration.tmp\" ]; then\n    cp -f $SCRIPT_PATH/Firmware/Configuration.tmp $SCRIPT_PATH/Firmware/Configuration.h\n    #echo \"Found Configuration.tmp restore Configuration.h\"\n    failures 21\nfi\n}\n#### End: Check Check if script has been canceled or failed nr1.\n\n#### Start: Check if script has been canceled or failed nr2.\ncheck_script_failed_nr2()\n{\n#Check for \"config.tmp\"\n    #echo \"No config.tmp\"\nif [ -f \"$SCRIPT_PATH/Firmware/config.tmp\" ]; then\n    cp -f $SCRIPT_PATH/Firmware/config.tmp $SCRIPT_PATH/Firmware/config.h\n    #echo \"Found config.tmp restore config.h\"\n    failures 22\nfi\n}\n#### End: Check if script has been canceled or failed nr2.\n\n#### Start: Check if OSTYPE is supported\ncheck_OS()\n{\nOS_FOUND=$( command -v uname)\n\ncase $( \"${OS_FOUND}\" | tr '[:upper:]' '[:lower:]') in\n  linux*)\n    TARGET_OS=\"linux\"\n   ;;\n  msys*|cygwin*|mingw*)\n    # or possible 'bash on windows'\n    TARGET_OS='windows'\n   ;;\n  nt|win*)\n    TARGET_OS='windows'\n    ;;\n  *)\n    TARGET_OS='unknown'\n    ;;\nesac\n# Windows\nif [ $TARGET_OS == \"windows\" ]; then\n    if [ $(uname -m) == \"x86_64\" ]; then\n        echo \"$(tput setaf 2)Windows 64-bit found$(tput sgr0)\"\n        Processor=\"64\"\n    elif [ $(uname -m) == \"i386\" ]; then\n        echo \"$(tput setaf 2)Windows 32-bit found$(tput sgr0)\"\n        Processor=\"32\"\n    else\n        echo \"$(tput setaf 1)Unsupported OS: Windows $(uname -m)\"\n        failures 1\n    fi\n# Linux\nelif [ $TARGET_OS == \"linux\" ]; then\n    if [ $(uname -m) == \"x86_64\" ]; then\n        echo \"$(tput setaf 2)Linux 64-bit found$(tput sgr0)\"\n        Processor=\"64\"\n    elif [[ $(uname -m) == \"i386\" || $(uname -m) == \"i686\" ]]; then\n        echo \"$(tput setaf 2)Linux 32-bit found$(tput sgr0)\"\n        Processor=\"32\"\n    else\n        echo \"$(tput setaf 1)Unsupported OS: Linux $(uname -m)\"\n        failures 1\n    fi\nelse\n    #echo \"$(tput setaf 1)This script doesn't support your Operating system!\"\n    #echo \"Please use Linux 64-bit or Windows 10 64-bit with Linux subsystem / git-bash\"\n    #echo \"Read the notes of build.sh$(tput sgr0)\"\n    failures 1\nfi\nif [ $OUTPUT == \"1\" ] ; then\n    sleep 2\nfi\n}\n#### End: Check if OSTYPE is supported\n\n#### Start: Prepare bash environment and check if wget, zip and other needed things are available\n# Start: Check wget\ncheck_wget()\n{\nif ! type wget > /dev/null; then\n    echo \"$(tput setaf 1)Missing 'wget' which is important to run this script\"\n    echo \"Please follow these instructions https://gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058 to install wget$(tput sgr0)\"\n    failures 4\nfi\n}\n# End: Check wget\n\n# Start: Check for zip\ncheck_zip()\n{\nif ! type zip > /dev/null; then\n    if [ $TARGET_OS == \"windows\" ]; then\n        echo \"$(tput setaf 1)Missing 'zip' which is important to run this script\"\n        echo \"Download and install 7z-zip from its official website https://www.7-zip.org/\"\n        echo \"By default, it is installed under the directory /c/Program Files/7-Zip in Windows 10 as my case.\"\n        echo \"Run git Bash under Administrator privilege and\"\n        echo \"navigate to the directory /c/Program Files/Git/mingw64/bin,\"\n        echo \"you can run the command $(tput setaf 2)ln -s /c/Program Files/7-Zip/7z.exe zip.exe$(tput sgr0)\"\n        failures 4\n    elif [ $TARGET_OS == \"linux\" ]; then\n        echo \"$(tput setaf 1)Missing 'zip' which is important to run this script\"\n        echo \"install it with the command $(tput setaf 2)'sudo apt-get install zip'$(tput sgr0)\"\n        failures 4\n    fi\nfi\n}\n# End: Check for zip\n\n# Start: Check python ... needed during language build\ncheck_python()\n{\nif ! type python3 > /dev/null; then\n    if [ $TARGET_OS == \"windows\" ]; then\n        echo \"$(tput setaf 1)Missing 'python3' which is important to run this script\"\n        failures 4\n    elif [ $TARGET_OS == \"linux\" ]; then\n        echo \"$(tput setaf 1)Missing 'python3' which is important to run this script\"\n        echo \"Install it with the command $(tput setaf 2)'sudo apt-get install python3'.\"\n        failures 4\n    fi\nfi\n}\n# End: Check python ... needed during language build\n\n\n#### Start: Set build environment\nset_build_env_variables()\n{\nBUILD_ENV=\"1.0.8\"\nBOARD=\"prusa_einsy_rambo\"\nBOARD_PACKAGE_NAME=\"PrusaResearch\"\nif [ \"$ARDUINO_ENV\" == \"1.8.19\" ]; then\n    BOARD_VERSION=\"1.0.6\"\nelse\n    BOARD_VERSION=\"1.0.4\"\nfi\nif [ \"$ARDUINO_ENV\" == \"1.8.19\" ]; then\n    BOARD_URL=\"https://raw.githubusercontent.com/prusa3d/Arduino_Boards/master/IDE_Board_Manager/package_prusa3d_index.json\"\n    #BOARD_URL=\"https://raw.githubusercontent.com/3d-gussner/Arduino_Boards/master/IDE_Board_Manager/package_prusa3d_index.json\"\nelse\n    BOARD_URL=\"https://raw.githubusercontent.com/prusa3d/Arduino_Boards/master/IDE_Board_Manager/package_prusa3d_index.json\"\nfi\nBOARD_FILENAME=\"prusa3dboards\"\nif [ \"$ARDUINO_ENV\" == \"1.8.19\" ]; then\n    BOARD_FILE_URL=\"https://raw.githubusercontent.com/prusa3d/Arduino_Boards/master/IDE_Board_Manager/prusa3dboards-$BOARD_VERSION.tar.bz2\"\n    #BOARD_FILE_URL=\"https://raw.githubusercontent.com/3d-gussner/Arduino_Boards/master/IDE_Board_Manager/prusa3dboards-$BOARD_VERSION.tar.bz2\"\nelse\n    BOARD_FILE_URL=\"https://raw.githubusercontent.com/prusa3d/Arduino_Boards/master/IDE_Board_Manager/prusa3dboards-$BOARD_VERSION.tar.bz2\"\nfi\n#PF_BUILD_FILE_URL=\"https://github.com/3d-gussner/PF-build-env-1/releases/download/$BUILD_ENV-WinLin/PF-build-env-WinLin-$BUILD_ENV.zip\"\nif [[ \"$BOARD_VERSION\" == \"1.0.3\" || \"$BOARD_VERSION\" == \"1.0.2\" || \"$BOARD_VERSION\" == \"1.0.1\" ]]; then\n    PF_BUILD_FILE_URL=\"https://github.com/prusa3d/PF-build-env/releases/download/$BUILD_ENV-WinLin/PF-build-env-WinLin-$BUILD_ENV.zip\"\nfi\nLIB=\"PrusaLibrary\"\n}\n#### End: Set build environment\n\n#### Start: List few useful data\noutput_useful_data()\n{\necho\necho \"Script path :\" $SCRIPT_PATH\necho \"OS          :\" $OS\necho \"OS type     :\" $TARGET_OS\necho \"\"\necho \"Arduino IDE :\" $ARDUINO_ENV\necho \"Build env   :\" $BUILD_ENV\necho \"Board       :\" $BOARD\nif [ ! -z \"$BOARD_FLASH\" ] ; then\n    echo \"Board flash :\" $BOARD_FLASH\nfi\nif [ ! -z \"$BOARD_MEM\" ] ; then\n    echo \"Board mem   :\" $BOARD_MEM\nfi\necho \"Package name:\" $BOARD_PACKAGE_NAME\necho \"Board v.    :\" $BOARD_VERSION\necho \"Specific Lib:\" $LIB\necho \"\"\n}\n#### End: List few useful data\n\n#### Start: Prepare building environment\n\n# Start: Check if build exists and creates it if not\ncheck_create_build_folders()\n{\n# Check if PF-build-env/<version> exists and downloads + creates it if not\n# The build environment is based on the supported Arduino IDE portable version with some changes\nif [ ! -d \"../PF-build-env/$BUILD_ENV\" ]; then\n    echo \"$(tput setaf 6)PF-build-env/$BUILD_ENV is missing ... creating it now for you$(tput sgr 0)\"\n    mkdir -p ../PF-build-env/$BUILD_ENV\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\nfi\n}\n# End: Check if build exists and creates it if not\n\n# Start: Download and extract supported Arduino IDE depending on OS\ndownload_prepare_arduinoIDE()\n{\nif [ ! -d \"../PF-build-dl\" ]; then\n    mkdir ../PF-build-dl || failures 9\nfi\n\ncd ../PF-build-dl || failures 10\nBUILD_ENV_PATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\n\n# Windows\nif [ $TARGET_OS == \"windows\" ]; then\n    if [ ! -f \"arduino-$ARDUINO_ENV-windows.zip\" ]; then\n        echo \"$(tput setaf 6)Downloading Windows 32/64-bit Arduino IDE portable...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        wget https://downloads.arduino.cc/arduino-$ARDUINO_ENV-windows.zip || failures 8\n        echo \"$(tput sgr 0)\"\n    fi\n    if [[ ! -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\" && ! -e \"../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\" ]]; then\n        echo \"$(tput setaf 6)Unzipping Windows 32/64-bit Arduino IDE portable...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        unzip arduino-$ARDUINO_ENV-windows.zip -d ../PF-build-env/$BUILD_ENV || failures 11\n        mv ../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\n        echo \"# arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\" >> ../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n        echo \"$(tput sgr0)\"\n    fi\nfi\n# Linux\nif [ $TARGET_OS == \"linux\" ]; then\n# 32 or 64 bit version\n    if [ ! -f \"arduino-$ARDUINO_ENV-linux$Processor.tar.xz\" ]; then\n        echo \"$(tput setaf 6)Downloading Linux $Processor Arduino IDE portable...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        wget --no-check-certificate https://downloads.arduino.cc/arduino-$ARDUINO_ENV-linux$Processor.tar.xz || failures 8\n        echo \"$(tput sgr 0)\"\n    fi\n    if [[ ! -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\" && ! -e \"../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\" ]]; then\n        echo \"$(tput setaf 6)Unzipping Linux $Processor Arduino IDE portable...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        tar -xvf arduino-$ARDUINO_ENV-linux$Processor.tar.xz -C ../PF-build-env/$BUILD_ENV/ || failures 11\n        mv ../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\n        echo \"# arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\" >> ../PF-build-env/$BUILD_ENV/arduino-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n        echo \"$(tput sgr0)\"\n    fi\nfi\n}\n# End: Download and extract supported Arduino IDE depending on OS\n\n# Start: Make Arduino IDE portable\nportable_ArduinoIDE()\n{\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/\nfi\n\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable\nfi\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/output/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/output\nfi\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages\nfi\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/sketchbook/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/sketchbook\nfi\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/sketchbook/libraries/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/sketchbook/libraries\nfi\nif [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/staging/ ]; then\n    mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/staging\nfi\n}\n# End: Make Arduino IDE portable\n\n# Start: Change Arduino IDE preferences\nchange_ArduinoIDEpreferances()\n{\nif [ ! -e ../PF-build-env/$BUILD_ENV/Preferences-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt ]; then\n    echo \"$(tput setaf 6)Setting $ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor Arduino IDE preferences for portable GUI usage...$(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    echo \"update.check\"\n    sed -i 's/update.check = true/update.check = false/g' ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"board\"\n    sed -i \"s/board = uno/board = $BOARD/g\" ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"editor.linenumbers\"\n    sed -i 's/editor.linenumbers = false/editor.linenumbers = true/g' ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"boardsmanager.additional.urls\"\n    echo \"boardsmanager.additional.urls=$BOARD_URL\" >>../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"build.verbose=true\" >>../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"compiler.cache_core=false\" >>../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"compiler.warning_level=all\" >>../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/lib/preferences.txt\n    echo \"# Preferences-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor\" >> ../PF-build-env/$BUILD_ENV/Preferences-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n    echo \"$(tput sgr0)\"\nfi\n}\n# End: Change Arduino IDE preferences\n\n# Start: Download and extract Prusa Firmware related parts\ndownload_prepare_Prusa_build_files()\n{\n# Download and extract PrusaResearchRambo board\nif [ ! -f \"$BOARD_FILENAME-$BOARD_VERSION.tar.bz2\" ]; then\n    echo \"$(tput setaf 6)Downloading Prusa Research AVR MK3 RAMBo EINSy build environment...$(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    wget $BOARD_FILE_URL || failures 8\nfi\nif [[ ! -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION\" || ! -e \"../PF-build-env/$BUILD_ENV/$BOARD_FILENAME-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\" ]]; then\n    echo \"$(tput setaf 6)Unzipping $BOARD_PACKAGE_NAME Arduino IDE portable...$(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    tar -xvf $BOARD_FILENAME-$BOARD_VERSION.tar.bz2 -C ../PF-build-env/$BUILD_ENV/ || failures 11\n    if [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME ]; then\n        mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME\n    fi\n    if [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME ]; then\n        mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME\n    fi\n    if [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware ]; then\n        mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware\n    fi\n    if [ ! -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr ]; then\n        mkdir ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr\n    fi\n\n    mv ../PF-build-env/$BUILD_ENV/$BOARD_FILENAME-$BOARD_VERSION ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION\n    echo \"# $BOARD_FILENAME-$BOARD_VERSION\" >> ../PF-build-env/$BUILD_ENV/$BOARD_FILENAME-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n\n    echo \"$(tput sgr 0)\"\nfi\n\n# Download and extract Prusa Firmware specific library files\nif [[ \"$BOARD_VERSION\" == \"1.0.3\" || \"$BOARD_VERSION\" == \"1.0.2\" || \"$BOARD_VERSION\" == \"1.0.1\" ]]; then\n    if [ ! -f \"PF-build-env-WinLin-$BUILD_ENV.zip\" ]; then\n        echo \"$(tput setaf 6)Downloading Prusa Firmware build environment...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        wget $PF_BUILD_FILE_URL || failures 8\n        echo \"$(tput sgr 0)\"\n    fi\n    if [ ! -e \"../PF-build-env/$BUILD_ENV/PF-build-env/$BUILD_ENV-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\" ]; then\n        echo \"$(tput setaf 6)Unzipping Prusa Firmware build environment...$(tput setaf 2)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        unzip -o PF-build-env-WinLin-$BUILD_ENV.zip -d ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor || failures 11\n        echo \"# PF-build-env-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor-$BUILD_ENV\" >> ../PF-build-env/$BUILD_ENV/PF-build-env/$BUILD_ENV-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n        echo \"$(tput sgr0)\"\n    fi\nfi\n}\n# End: Download and extract Prusa Firmware related parts\n\n# Start: Check if User updated Arduino IDE 1.8.5 boardsmanager and tools\ncheck_ArduinoIDE_User_interaction()\n{\nif [ -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/arduino/tools\" ]; then\n    echo \"$(tput setaf 6)Arduino IDE boards / tools have been manually updated...$\"\n    echo \"Please don't update the 'Arduino AVR boards' as this will prevent running this script (tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\nfi\nif [ -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/arduino/tools/avr-gcc/4.9.2-atmel3.5.4-arduino2\" ]; then\n    echo \"$(tput setaf 6)PrusaReasearch compatible tools have been manually updated...$(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    echo \"$(tput setaf 6)Copying Prusa Firmware build environment to manually updated boards / tools...$(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    cp -f ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/hardware/tools/avr/avr/lib/ldscripts/avr6.xn ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/arduino/tools/avr-gcc/4.9.2-atmel3.5.4-arduino2/avr/lib/ldscripts/avr6.xn\n    echo \"# PF-build-env-portable-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor-$BUILD_ENV\" >> ../PF-build-env/$BUILD_ENV/PF-build-env-portable-$BUILD_ENV-$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor.txt\n    echo \"$(tput sgr0)\"\nfi\nif [ -d \"../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor/portable/packages/arduino/tools/avr-gcc/5.4.0-atmel3.6.1-arduino2\" ]; then\n    echo \"$(tput setaf 1)Arduino IDE tools have been updated manually to a non supported version!!!\"\n    echo \"Delete ../PF-build-env/$BUILD_ENV and start the script again\"\n    echo \"Script will not continue until this have been fixed $(tput setaf 2)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    echo \"$(tput sgr0)\"\n    failures 4\nfi\n}\n# End: Check if User updated Arduino IDE 1.8.5 boardsmanager and tools\n#\n#### End: prepare bash / Linux environment\n#### End prepare building\n\n#### Start: Getting arguments for command line compiling\nget_arguments()\n{\n\n# Check if git is available\nif type git > /dev/null; then\n    git_available=\"1\"\nfi\n\n#\n# '-v' argument defines which variant of the Prusa Firmware will be compiled\nif [ -z \"$variant_flag\" ] ; then\n    # Select which variant of the Prusa Firmware will be compiled, like\n    PS3=\"Select a variant: \"\n    while IFS= read -r -d $'\\0' f; do\n        options[i++]=\"$f\"\n    done < <(find Firmware/variants/ -maxdepth 1 -type f -name \"*.h\" -print0 )\n    IFS=$'\\n' sorted=($(sort -n <<<\"${options[*]}\")); unset IFS\n    select opt in \"${sorted[@]}\" \"All\" \"Quit\"; do\n        case $opt in\n            *.h)\n                VARIANT=$(basename \"$opt\" \".h\")\n                VARIANTS[i++]=\"$opt\"\n                break\n                ;;\n            \"All\")\n                VARIANT=\"All\"\n                VARIANTS=${options[*]}\n                variant_flag=\"All\"\n                break\n                ;;\n            \"Quit\")\n                echo \"You chose to stop\"\n                failures 20\n                ;;\n            *)\n                echo \"$(tput setaf 1)This is not a valid variant$(tput sgr0)\"\n                ;;\n        esac\n    done\nelse\n    if [ -f \"$SCRIPT_PATH/Firmware/variants/$variant_flag\" ] ; then\n        VARIANTS=$variant_flag\n    elif [ \"$variant_flag\" == \"All\" ] ; then\n        while IFS= read -r -d $'\\0' f; do\n            options[i++]=\"$f\"\n        done < <(find Firmware/variants/ -maxdepth 1 -type f -name \"*.h\" -print0 )\n        VARIANT=\"All\"\n        VARIANTS=${options[*]}\n    else\n        echo \"$(tput setaf 1)Argument $variant_flag could not be found in Firmware/variants please choose a valid one.$(tput sgr0)\"\n        echo \"Only $(tput setaf 2)'All'$(tput sgr0) and file names below are allowed as variant '-v' argument.$(tput setaf 2)\"\n        ls -1 $SCRIPT_PATH/Firmware/variants/*.h | xargs -n1 basename\n        echo \"$(tput sgr0)\"\n        failures 4\n    fi\nfi\n\n#'-l' argument defines if it is an English only version. Known values EN_FARM / ALL\n#Check default language mode\nMULTI_LANGUAGE_CHECK=$(grep --max-count=1 \"^#define LANG_MODE *\" $SCRIPT_PATH/Firmware/config.h|sed -e's/  */ /g'|cut -d ' ' -f3)\n\nif [ -z \"$language_flag\" ] ; then\n    PS3=\"Select a language: \"\n    echo\n    echo \"Which lang-build do you want?\"\n    select yn in \"Multi languages\" \"English only\"; do\n        case $yn in\n            \"Multi languages\")\n                LANGUAGES=\"ALL\"\n                break\n                ;;\n            \"English only\")\n                LANGUAGES=\"EN_FARM\"\n                break\n                ;;\n            *)\n                echo \"$(tput setaf 1)This is not a valid language$(tput sgr0)\"\n                ;;\n        esac\n    done\nelse\n    if [[ \"$language_flag\" == \"ALL\" || \"$language_flag\" == \"EN_FARM\" ]] ; then\n        LANGUAGES=$language_flag\n    else\n        echo \"$(tput setaf 1)Language argument is wrong!$(tput sgr0)\"\n        echo \"Only $(tput setaf 2)'ALL'$(tput sgr0) or $(tput setaf 2)'EN_FARM'$(tput sgr0) are allowed as language '-l' argument!\"\n        failures 5\n    fi\nfi\n\n#Check if Build is selected via argument '-b'\nif [ ! -z \"$build_flag\" ] ; then\n    if [[ \"$build_flag\" == \"Auto\" && \"$git_available\" == \"1\" ]] ; then\n        BUILD=$(git rev-list --count HEAD)\n    elif [[ $build_flag =~ ^[0-9]+$ ]] ; then\n        BUILD=$build_flag\n    else\n        echo \"$(tput setaf 1)Build number argument is wrong!$(tput sgr0)\"\n        echo \"Only $(tput setaf 2)'Auto' (git needed) or numbers $(tput sgr0) are allowed as build '-b' argument!$(tput sgr0)\"\n        failures 5\n    fi\nfi\n\n#Check git branch has changed\nif [ ! -z \"git_available\" ]; then\n    BRANCH=$(git branch --show-current)\n    echo \"Current branch is:\" $BRANCH\n    if [ ! -f \"$SCRIPT_PATH/../PF-build.branch\" ]; then\n        #echo \"$BRANCH\" >| $SCRIPT_PATH/../PF-build.branch\n        echo \"created PF-build.branch file\"\n    else\n        PRE_BRANCH=$(cat \"$SCRIPT_PATH/../PF-build.branch\")\n        #echo \"Previous branch was:\" $PRE_BRANCH\n        if [ ! \"$BRANCH\" == \"$PRE_BRANCH\" ] ; then\n            CLEAN_PF_FW_BUILD=1\n            echo \"$BRANCH\" >| $SCRIPT_PATH/../PF-build.branch\n        fi\n    fi\nelse\n    BRANCH=\"\"\n    CLEAN_PF_FW_BUILD=0\nfi\n}\n#### End: Getting arguments for command line compiling\n\n#### Start: Set needed Paths\nset_paths()\n{\ncd ../PF-build-env/$BUILD_ENV/$ARDUINO_ENV-$BOARD_VERSION-$TARGET_OS-$Processor || failures 10\nBUILD_ENV_PATH=\"$( pwd -P )\"\n\ncd ../../..\n\n#Checkif BUILD_PATH exists and if not creates it\nif [ ! -d \"Prusa-Firmware-build\" ]; then\n    mkdir Prusa-Firmware-build  || failures 9\nfi\n\n#Set the BUILD_PATH for Arduino IDE\ncd Prusa-Firmware-build || failures 10\nBUILD_PATH=\"$( pwd -P )\"\n}\n#### End: Set needed Paths\n\n#### Start: Check git branch has changed\ncheck_branch_changed()\n{\nif [ \"$CLEAN_PF_FW_BUILD\" == \"1\" ]; then\n    read -t 10 -p \"Branch changed, cleaning Prusa-Firmware-build folder\"\n    rm -r *\nelse\n    echo \"Nothing to clean up\"\nfi\n}\n#### End: Check git branch has changed\n\n#### Start: Prepare code for compiling\n\nprepare_code_for_compiling()\n{\n    VARIANT=$(basename \"$v\" \".h\")\n    MK404_PRINTER=$(grep --max-count=1 \"\\bPRINTER_TYPE\\b\" $SCRIPT_PATH/Firmware/variants/$VARIANT.h | sed -e's/  */ /g' |cut -d ' ' -f3 | cut -d '_' -f2)\n    # Find firmware version in Configuration.h file and use it to generate the hex filename\n    FW_MAJOR=$(grep --max-count=1 \"\\bFW_MAJOR\\b\" $SCRIPT_PATH/Firmware/Configuration.h | sed -e's/  */ /g'|cut -d ' ' -f3)\n    FW_MINOR=$(grep --max-count=1 \"\\bFW_MINOR\\b\" $SCRIPT_PATH/Firmware/Configuration.h | sed -e's/  */ /g'|cut -d ' ' -f3)\n    FW_REVISION=$(grep --max-count=1 \"\\bFW_REVISION\\b\" $SCRIPT_PATH/Firmware/Configuration.h| sed -e's/  */ /g'|cut -d ' ' -f3)\n    FW=\"$FW_MAJOR$FW_MINOR$FW_REVISION\"\n    #FW=$(grep --max-count=1 \"\\bFW_VERSION\\b\" $SCRIPT_PATH/Firmware/Configuration.h | sed -e's/  */ /g'|cut -d '\"' -f2|sed 's/\\.//g')\n    if [ -z \"$BUILD\" ] ; then\n        # Find build version in Configuration.h file and use it to generate the hex filename\n        BUILD=$(grep --max-count=1 \"\\bFW_COMMITNR\\b\" $SCRIPT_PATH/Firmware/Configuration.h | sed -e's/  */ /g'|cut -d ' ' -f3)\n    else\n        # Find and replace build version in Configuration.h file\n        BUILD_ORG=$(grep --max-count=1 \"\\bFW_COMMITNR\\b\" $SCRIPT_PATH/Firmware/Configuration.h | sed -e's/  */ /g'|cut -d ' ' -f3)\n        echo \"Original build number: $BUILD_ORG\"\n        if [ \"$BUILD_ORG\" != \"$BUILD\" ]; then\n            echo \"New build number     : $BUILD\"\n            sed -i -- \"s/^#define FW_COMMITNR.*/#define FW_COMMITNR $BUILD/g\" $SCRIPT_PATH/Firmware/Configuration.h\n        fi\n    fi\n    # Check if the motherboard is an EINSY and if so only one hex file will generated\n    MOTHERBOARD=$(grep --max-count=1 \"\\bMOTHERBOARD\\b\" $SCRIPT_PATH/Firmware/variants/$VARIANT.h | sed -e's/  */ /g' |cut -d ' ' -f3)\n    # Check development status\n    FW_FLAV=$(grep --max-count=1 \"//#define FW_FLAVOR\\b\" $SCRIPT_PATH/Firmware/Configuration.h|cut -d ' ' -f1)\n    FW_FLAVREV=$(grep --max-count=1 \"//#define FW_FLAVERSION\\b\" $SCRIPT_PATH/Firmware/Configuration.h|cut -d ' ' -f1)\n    if [[ \"$FW_FLAV\" == \"//#define\" && -z $FW_FLAVREV ]];then\n        failures 26\n    fi\n    #echo \"FLAV:$FW_FLAV\"\n    if [[ \"$FW_FLAV\" != \"//#define\" ]] ; then\n        FW_FLAVOR=$(grep --max-count=1 \"\\bFW_FLAVOR\\b\" $SCRIPT_PATH/Firmware/Configuration.h| sed -e's/  */ /g'|cut -d ' ' -f3)\n        #echo \"FLAVOR:$FW_FLAVOR\"\n        if [[ \"$FW_FLAVREV\" != \"//#define\" ]] ; then\n            FW_FLAVERSION=$(grep --max-count=1 \"\\bFW_FLAVERSION\\b\" $SCRIPT_PATH/Firmware/Configuration.h| sed -e's/  */ /g'|cut -d ' ' -f3)\n            FW=\"$FW-$FW_FLAVOR\"\n            DEV_CHECK=\"$FW_FLAVOR\"\n            echo \"DEV:$DEV_CHECK\"\n            if [ ! -z \"$FW_FLAVERSION\" ] ; then\n                FW=\"$FW$FW_FLAVERSION\"\n            fi\n        else\n            failures 26\n        fi\n    fi\n}\n#### End: Prepare code for compiling\n\nprepare_hex_folders()\n{\n    if [ ! -d \"$SCRIPT_PATH/../PF-build-hex/FW$FW-Build$BUILD/$MOTHERBOARD\" ]; then\n        mkdir -p $SCRIPT_PATH/../PF-build-hex/FW$FW-Build$BUILD/$MOTHERBOARD || failures 9\n    fi\n    OUTPUT_FOLDER=\"PF-build-hex/FW$FW-Build$BUILD/$MOTHERBOARD\"\n    if [ \"$BOARD\" != \"prusa_einsy_rambo\" ]; then\n        if [ ! -d \"$SCRIPT_PATH/../PF-build-hex/FW$FW-Build$BUILD/$BOARD\" ]; then\n            mkdir -p $SCRIPT_PATH/../PF-build-hex/FW$FW-Build$BUILD/$BOARD || failures 9\n        fi\n        OUTPUT_FOLDER=\"PF-build-hex/FW$FW-Build$BUILD/$BOARD\"\n    fi\n\n    #Define OUTPUT_FILENAME\n    OUTPUT_FILENAME=FW$FW-Build$BUILD-$VARIANT\n    #Check for OUTPUT_FILENAME_SUFFIX and add it\n    if [ ! -z $OUTPUT_FILENAME_SUFFIX ]; then\n        OUTPUT_FILENAME=\"${OUTPUT_FILENAME}$OUTPUT_FILENAME_SUFFIX\"\n    fi\n\n    #Check if exactly the same hexfile already exists\n    if [[ -f \"$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.hex\"  &&  \"$LANGUAGES\" == \"ALL\" ]]; then\n        echo \"\"\n        ls -1 $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.hex | xargs -n1 basename\n        echo \"$(tput setaf 6)This hex file to be compiled already exists! To cancel this process press CRTL+C and rename existing hex file.$(tput sgr 0)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            read -t 10 -p \"Press Enter to continue...\"\n        fi\n    elif [[ -f \"$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-EN_FARM.hex\"  &&  \"$LANGUAGES\" == \"EN_FARM\" ]]; then\n        echo \"\"\n        ls -1 $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-EN_FARM.hex | xargs -n1 basename\n        echo \"$(tput setaf 6)This hex file to be compiled already exists! To cancel this process press CRTL+C and rename existing hex file.$(tput sgr 0)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            read -t 10 -p \"Press Enter to continue...\"\n        fi\n    fi\n    if [[ -f \"$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.zip\"  &&  \"$LANGUAGES\" == \"ALL\" ]]; then\n        echo \"\"\n        ls -1 $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.zip | xargs -n1 basename\n        echo \"$(tput setaf 6)This zip file to be compiled already exists! To cancel this process press CRTL+C and rename existing hex file.$(tput sgr 0)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            read -t 10 -p \"Press Enter to continue...\"\n        fi\n    fi\n}\n#### End: Prepare hex files folder\n\n#### Start: List usefull data\nlist_usefull_data()\n{\n    echo \"$(tput setaf 2)$(tput setab 7) \"\n    echo \"Printer        :\" $MK404_PRINTER\n    echo \"Variant        :\" $VARIANT\n    echo \"Firmware       :\" $FW\n    echo \"Build #        :\" $BUILD\n    echo \"Dev Check      :\" $DEV_CHECK\n    echo \"Motherboard    :\" $MOTHERBOARD\n    echo \"Board flash    :\" $BOARD_FLASH\n    echo \"Board mem      :\" $BOARD_MEM\n    echo \"Languages      :\" $LANGUAGES\n    echo \"Hex-file Folder:\" $OUTPUT_FOLDER\n    echo \"Hex filename   :\" $OUTPUT_FILENAME\n    echo \"$(tput sgr0)\"\n\n}\n#### End: List usefull data\n\n#### Start: Prepare Firmware to be compiled\nprepare_variant_for_compiling()\n{\n    # Copy variant as Configuration_prusa.h\n    if [ ! -f \"$SCRIPT_PATH/Firmware/Configuration_prusa.h\" ]; then\n        cp -f $SCRIPT_PATH/Firmware/variants/$VARIANT.h $SCRIPT_PATH/Firmware/Configuration_prusa.h || failures 12\n    else\n        echo \"$(tput setaf 6)Configuration_prusa.h already exist it will be overwritten in 10 seconds by the chosen variant.$(tput sgr 0)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            read -t 10 -p \"Press Enter to continue...\"\n        fi\n        cp -f $SCRIPT_PATH/Firmware/variants/$VARIANT.h $SCRIPT_PATH/Firmware/Configuration_prusa.h || failures 12\n    fi\n\n    # set FW_REPOSITORY\n    sed -i -- 's/#define FW_REPOSITORY \"Unknown\"/#define FW_REPOSITORY \"Prusa3d\"/g' $SCRIPT_PATH/Firmware/Configuration.h\n\n    #Prepare English only or multi-language version to be build\n    if [ $LANGUAGES == \"EN_FARM\" ]; then\n        echo \" \"\n        echo \"English only language firmware will be built\"\n        sed -i -- \"s/^#define LANG_MODE *1/#define LANG_MODE              0/g\" $SCRIPT_PATH/Firmware/config.h\n        echo \" \"\n    else\n        echo \" \"\n        echo \"Multi-language firmware will be built\"\n        sed -i -- \"s/^#define LANG_MODE *0/#define LANG_MODE              1/g\" $SCRIPT_PATH/Firmware/config.h\n        echo \" \"\n    fi\n\n    #Check if compiler flags are set to Prusa specific needs for the rambo board.\n    #if [ $TARGET_OS == \"windows\" ]; then\n       #RAMBO_PLATFORM_FILE=\"PrusaResearchRambo/avr/platform.txt\"\n    #fi\n\n    #New fresh PF-Firmware-build\n    if [ \"$new_build_flag\" == \"1\" ]; then\n        rm -r -f $BUILD_PATH/* || failures 13\n    fi\n\n}\n#### End: Prepare Firmware to be compiled\n#### End of Prepare building\n\n#### Start: Compiling EN Prusa Firmware\ncompile_en_firmware()\n{\n    ## Check board mem size\n    CURRENT_BOARD_MEM=$(grep \"#define RAMEND\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h | sed -e's/.* //g'|cut -d ' ' -f2 |tr -d ' \\t\\n\\r')\n    if [ $CURRENT_BOARD_MEM != \"0x21FF\" ] ; then\n        echo \"$(tput setaf 1)Board mem has been modified or not reset$(tput sgr 0)\"\n        echo \"Current:\" $CURRENT_BOARD_MEM\n        PS3=\"Select $(tput setaf 2)Yes$(tput sgr 0) if you want to reset it.\"\n        select yn in \"Yes\" \"No\"; do\n            case $yn in\n                Yes)\n                    echo \"Resetting board mem size\"\n                    sed -i -- \"s/^#define RAMEND .*$/#define RAMEND          0x21FF/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n                    BOARD_MEM_MODIFIED=0\n                    break\n                    ;;\n                *)\n                    echo \"Continuing with modified mem size\"\n                    BOARD_MEM_MODIFIED=1\n                    break\n                    ;;\n            esac\n        done\n    else\n        BOARD_MEM_MODIFIED=0\n    fi\n    ## Modify board mem size\n    if [[ ! -z $BOARD_MEM && \"$BOARD_MEM\" != \"0x21FF\" ]] ; then\n        echo \"$(tput setaf 3)Modifying board memory size (hex):$(tput sgr 0)\"\n        echo \"Old:\" $CURRENT_BOARD_MEM\n        echo \"New:\" $BOARD_MEM\n        read -t 5 -p \"To cancel press $(tput setaf 1)CRTL+C$(tput sgr 0)\"\n        echo \"\"\n        sed -i -- \"s/^#define RAMEND          0x21FF/#define RAMEND          ${BOARD_MEM}/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n        BOARD_MEM_MODIFIED=1\n    fi\n\n    ## Check board flash size\n    CURRENT_BOARD_FLASH=$(grep \"#define FLASHEND\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h | sed -e's/.* //g'|cut -d ' ' -f2 |tr -d ' \\t\\n\\r')\n    CURRENT_BOARD_maximum_size=$(grep \"prusa_einsy_rambo.upload.maximum_size\" $BUILD_ENV_PATH/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION/boards.txt |cut -d '=' -f2|tr -d ' \\t\\n\\r')\n    if [[ $CURRENT_BOARD_FLASH != \"0x3FFFF\" || $CURRENT_BOARD_maximum_size != \"253952\" ]] ; then\n        echo \"$(tput setaf 1)Board flash has been modified or not reset$(tput sgr 0)\"\n        echo \"Current flash size:\" $CURRENT_BOARD_FLASH\n        echo \"Current max.  size:\" $CURRENT_BOARD_maximum_size\n        PS3=\"Select $(tput setaf 2)Yes$(tput sgr 0) if you want to reset it.\"\n        select yn in \"Yes\" \"No\"; do\n            case $yn in\n                Yes)\n                    echo \"$(tput setaf 1)Resetting board flash size$(tput sgr 0)\"\n                    sed -i -- \"s/^#define FLASHEND .*$/#define FLASHEND        0x3FFFF/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n                    sed -i -- \"s/^prusa_einsy_rambo.upload.maximum_size.*/prusa_einsy_rambo.upload.maximum_size=253952/g\" $BUILD_ENV_PATH/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION/boards.txt\n                    BOARD_FLASH_MODIFIED=0\n                    break\n                    ;;\n                *)\n                    echo \"$(tput setaf 3)Continuing with modified flash size$(tput sgr 0)\"\n                    BOARD_FLASH_MODIFIED=1\n                    break\n                    ;;\n            esac\n        done\n    else\n        BOARD_FLASH_MODIFIED=1\n    fi\n    ## Modify boad flash size\n    if [[ ! -z $BOARD_FLASH && \"$BOARD_FLASH\" != \"0x3FFFF\" ]] ; then\n        echo \"$(tput setaf 3)Modifying board flash size (hex):$(tput sgr 0)\"\n        echo \"Old flash size:\" $CURRENT_BOARD_FLASH\n        echo \"New flash size:\" $BOARD_FLASH\n        echo \"Old max.  size:\" $CURRENT_BOARD_maximum_size\n        echo \"New max.  size:\" $BOARD_maximum_size\n        read -t 5 -p \"To cancel press $(tput setaf 1)CRTL+C$(tput sgr 0)\"\n        sed -i -- \"s/^#define FLASHEND .*/#define FLASHEND        ${BOARD_FLASH}/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n        sed -i -- \"s/^prusa_einsy_rambo.upload.maximum_size.*/prusa_einsy_rambo.upload.maximum_size=${BOARD_maximum_size}/g\" $BUILD_ENV_PATH/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION/boards.txt\n        BOARD_FLASH_MODIFIED=1\n    fi\n\n    #Check if compiler flags are set to Prusa specific needs for the rambo board.\n#    if [ $TARGET_OS == \"windows\" ]; then\n#        RAMBO_PLATFORM_FILE=\"PrusaResearchRambo/avr/platform.txt\"\n#    fi\n\n    #### End of Prepare building\n\n    #### Start building\n\n    export ARDUINO=$BUILD_ENV_PATH\n    #echo $BUILD_ENV_PATH\n    #export BUILDER=$ARDUINO/arduino-builder\n\n    echo\n    #read -t 5 -p \"Press Enter...\"\n    echo\n\n    echo \"Start to build Prusa Firmware ...\"\n    echo \"Using variant $VARIANT$(tput setaf 3)\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n\n    if [ $verbose_IDE == \"1\" ]; then\n        $BUILD_ENV_PATH/arduino-builder -dump-prefs -debug-level 10 -compile -hardware $ARDUINO/hardware -hardware $ARDUINO/portable/packages -tools $ARDUINO/tools-builder -tools $ARDUINO/hardware/tools/avr -tools $ARDUINO/portable/packages -built-in-libraries $ARDUINO/libraries -libraries $ARDUINO/portable/sketchbook/libraries -fqbn=$BOARD_PACKAGE_NAME:avr:$BOARD -build-path=$BUILD_PATH -warnings=all $SCRIPT_PATH/Firmware/Firmware.ino || failures 24\n    fi\n    $BUILD_ENV_PATH/arduino-builder -compile -hardware $ARDUINO/hardware -hardware $ARDUINO/portable/packages -tools $ARDUINO/tools-builder -tools $ARDUINO/hardware/tools/avr -tools $ARDUINO/portable/packages -built-in-libraries $ARDUINO/libraries -libraries $ARDUINO/portable/sketchbook/libraries -fqbn=$BOARD_PACKAGE_NAME:avr:$BOARD -build-path=$BUILD_PATH -warnings=all -verbose=$verbose_IDE $SCRIPT_PATH/Firmware/Firmware.ino || failures 24\n}\n#### End: Compiling EN Prusa Firmware\n\n#### Start: Create and save Multi Language Prusa Firmware\ncreate_multi_firmware()\n{\n    #if [ $LANGUAGES ==  \"ALL\" ]; then\n        echo \"$(tput setaf 2)\"\n\n        echo \"Building multi language firmware\" $MULTI_LANGUAGE_CHECK\n        echo \"$(tput sgr 0)\"\n        if [ $OUTPUT == \"1\" ] ; then\n            sleep 2\n        fi\n        cd $SCRIPT_PATH/lang\n        echo \"$(tput setaf 3)\"\n        ./config.sh || failures 25\n        echo \"$(tput sgr 0)\"\n        # Check if previous languages and firmware build exist and if so clean them up\n        if [ -f \"lang_en.tmp\" ]; then\n            echo \"\"\n            echo \"$(tput setaf 6)Previous lang build files already exist these will be cleaned up in 10 seconds.$(tput sgr 0)\"\n            if [ $OUTPUT == \"1\" ] ; then\n                read -t 10 -p \"Press Enter to continue...\"\n            fi\n            echo \"$(tput setaf 3)\"\n            ./lang-clean.sh\n            echo \"$(tput sgr 0)\"\n        fi\n        if [ -f \"progmem.out\" ]; then\n            echo \"\"\n            echo \"$(tput setaf 6)Previous firmware build files already exist these will be cleaned up in 10 seconds.$(tput sgr 0)\"\n            if [ $OUTPUT == \"1\" ] ; then\n                read -t 10 -p \"Press Enter to continue...\"\n            fi\n            echo \"$(tput setaf 3)\"\n            ./fw-clean.sh\n            echo \"$(tput sgr 0)\"\n        fi\n        # Combine compiled firmware with languages\n        echo \"$(tput setaf 3)\"\n        ./fw-build.sh || failures 25\n        echo \"$(tput sgr 0)\"\n        # Check if the motherboard is an EINSY and if so only one hex file will generated\n        MOTHERBOARD=$(grep --max-count=1 \"\\bMOTHERBOARD\\b\" $SCRIPT_PATH/Firmware/variants/$VARIANT.h | sed -e's/  */ /g' |cut -d ' ' -f3)\n        # If the motherboard is an EINSY just copy one hexfile\n        if [ \"$MOTHERBOARD\" = \"BOARD_EINSY_1_0a\" ]; then\n            echo \"$(tput setaf 2)Copying multi language firmware for MK3/Einsy board to PF-build-hex folder$(tput sgr 0)\"\n            # End of \"lang.bin\" for MK3 and MK3S copy\n            cp -f Firmware-intl.hex $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.hex\n            cp -f $BUILD_PATH/Firmware.ino.elf $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.elf\n        else\n            #Search for created firmware languages\n            langs=$(find Firmware-intl-en_*.hex | cut -d \"_\" -f2 | cut -d \".\" -f1)\n            #Copy found firmware_*.hex files\n                for la in $langs; do\n                    cp -f Firmware-intl-en_$la.hex $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-$la.hex\n                done\n            cp -f $BUILD_PATH/Firmware.ino.elf $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.elf\n            echo \"$(tput setaf 2)Zip multi language firmware for MK2.5/miniRAMbo board to PF-build-hex folder$(tput sgr 0)\"\n            if [ $TARGET_OS == \"windows\" ]; then\n                zip a $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.zip $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-??.hex\n                #rm $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-??.hex\n            elif [ $TARGET_OS == \"linux\" ]; then\n                zip -j ../../$OUTPUT_FOLDER/$OUTPUT_FILENAME.zip ../../$OUTPUT_FOLDER/$OUTPUT_FILENAME-??.hex\n            fi\n        fi\n\n    # Cleanup after build\n    if [[ -z \"$clean_flag\" || \"$clean_flag\" == \"0\" ]]; then\n        echo \"$(tput setaf 3)\"\n        ./fw-clean.sh || failures 25\n        echo \"$(tput sgr 0)\"\n    fi\n}\n#### End: Create and save Multi Language Prusa Firmware\n\n#### Start: Save EN_FARM language Prusa Firmware\nsave_en_firmware()\n{\n    #else\n        echo \"$(tput setaf 2)Copying English only firmware to PF-build-hex folder$(tput sgr 0)\"\n        cp -f $BUILD_PATH/Firmware.ino.hex $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-EN_FARM.hex || failures 12\n        echo \"$(tput setaf 2)Copying English only elf file to PF-build-hex folder$(tput sgr 0)\"\n        cp -f $BUILD_PATH/Firmware.ino.elf $SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-EN_FARM.elf || failures 12\n    #fi\n}\n#### End: Save EN_FARM language Prusa Firmware\n\n#### Start: Cleanup Firmware\ncleanup_firmware()\n{\n    if [[ -z \"$prusa_flag\" || \"$prusa_flag\" == \"0\" ]]; then\n        if [ -e \"$SCRIPT_PATH/Firmware/Configuration_prusa.h\" ]; then\n            rm $SCRIPT_PATH/Firmware/Configuration_prusa.h || failures 13\n        fi\n    fi\n    # Delete dupblicates\n    if find $SCRIPT_PATH/lang/ -name '*RAMBo10a*.txt' -printf 1 -quit | grep -q 1\n    then\n        rm $SCRIPT_PATH/lang/*RAMBo10a*.txt || failures 13\n    fi\n    # MK2 not supported in this branch\n    if find $SCRIPT_PATH/lang/ -name '*MK2-RAMBo13a*' -printf 1 -quit | grep -q 1\n    then\n        rm $SCRIPT_PATH/lang/*MK2-RAMBo13a*.txt || failures 13\n    fi\n    if find $SCRIPT_PATH/lang/ -name 'not_tran.txt' -printf 1 -quit | grep -q 1\n    then\n        rm $SCRIPT_PATH/lang/not_tran.txt || failures 13\n    fi\n    if find $SCRIPT_PATH/lang/ -name 'not_used.txt' -printf 1 -quit | grep -q 1\n    then\n        rm $SCRIPT_PATH/lang/not_used.txt || failures 13\n    fi\n\n    #New fresh PF-Firmware-build\n    if [ \"$new_build_flag\" == \"1\" ]; then\n        rm -r -f $BUILD_PATH/* || failures 13\n    fi\n\n    # Restore files to previous state\n    sed -i -- 's/^#define FW_REPOSITORY.*/#define FW_REPOSITORY \"Unknown\"/g' $SCRIPT_PATH/Firmware/Configuration.h\n    if [ ! -z \"$BUILD_ORG\" ] ; then\n        sed -i -- \"s/^#define FW_COMMITNR.*/#define FW_COMMITNR $BUILD_ORG/g\" $SCRIPT_PATH/Firmware/Configuration.h\n    fi\n    echo $MULTI_LANGUAGE_CHECK\n    #sed -i -- \"s/^#define LANG_MODE * /#define LANG_MODE              $MULTI_LANGUAGE_CHECK/g\" $SCRIPT_PATH/Firmware/config.h\n    sed -i -- \"s/^#define LANG_MODE *1/#define LANG_MODE              ${MULTI_LANGUAGE_CHECK}/g\" $SCRIPT_PATH/Firmware/config.h\n    sed -i -- \"s/^#define LANG_MODE *0/#define LANG_MODE              ${MULTI_LANGUAGE_CHECK}/g\" $SCRIPT_PATH/Firmware/config.h\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    #Check for \"Configuration.tmp\" and delete it\n    if [ -e \"$SCRIPT_PATH/Firmware/Configuration.tmp\" ]; then\n        rm $SCRIPT_PATH/Firmware/Configuration.tmp\n    fi\n    #Check for \"config.tmp\" and delete it\n    if [ -e \"$SCRIPT_PATH/Firmware/config.tmp\" ]; then\n        rm $SCRIPT_PATH/Firmware/config.tmp\n    fi\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n\n    # Restore build env files to previous state\n    if [ \"$BOARD_MEM_MODIFIED\" == \"1\" ]; then\n        sed -i -- \"s/^#define FLASHEND .*$/#define FLASHEND        0x3FFFF/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n        echo \"$(tput setaf 2)Restored Board Mem$(tput sgr 0)\"\n    fi\n    if [ \"$BOARD_FLASH_MODIFIED\" == \"1\" ]; then\n        sed -i -- \"s/^prusa_einsy_rambo.upload.maximum_size.*/prusa_einsy_rambo.upload.maximum_size=253952/g\" $BUILD_ENV_PATH/portable/packages/$BOARD_PACKAGE_NAME/hardware/avr/$BOARD_VERSION/boards.txt\n        sed -i -- \"s/^#define RAMEND.*/#define RAMEND          0x21FF/g\" $BUILD_ENV_PATH/hardware/tools/avr/avr/include/avr/iom2560.h\n        echo \"$(tput setaf 2)Restored Board Flash$(tput sgr 0)\"\n    fi\n\n}\n#### End: Prepare code for compiling\n#done\n\n#### Start: Finish script\n# List hex path and list build files\nfinish_pf-build()\n{\ncd $SCRIPT_PATH\ncd ..\necho \"$(tput setaf 2) \"\necho \" \"\nfailures 0\necho \"Build done, please use Slic3rPE > 1.41.0 to upload the firmware\"\necho \"more information how to flash firmware https://www.prusa3d.com/drivers/ $(tput sgr 0)\"\necho\necho \"Files:\"\nls -r -h $SCRIPT_PATH/../PF-build-hex/FW$FW-Build$BUILD/*\n}\n#### End: Finish script\n#### End: building\n\n\n####Start: MK404 Simulator\nMK404_SIM()\n{\ncd $SCRIPT_PATH\n# Check/compile MK404 sim\nif [[ \"$output_flag\" == \"1\" || -z \"$output_flag\" ]]; then\n    if [[ -z \"$mk404_flag\" && \"$variant_flag\" != \"All\" ]]; then\n        echo\n        read -t 10 -n 1 -p \"Do you want to start MK404? Y/$(tput setaf 2)n$(tput sgr 0)\" mk404_start\n        if [[ \"$mk404_start\" == \"Y\" || \"$mk404_start\" == \"y\" ]]; then\n            echo\n            read -t 10 -n 1 -p \"Do you want to start MK404 with or without MMU2S? $(tput setaf 2)1$(tput sgr 0)/2\" mk404_choose1\n            if [ \"$mk404_choose1\" == \"1\" ]; then\n                mk404_flag=1\n            elif [ \"$mk404_choose1\" == \"2\" ]; then\n                mk404_flag=2\n            else\n                mk404_flag=1 #default\n            fi\n            echo\n            echo \"Choose MK404 graphics\"\n            echo \"0 = no graphics\"\n            echo \"1 = lite\"\n            echo \"2 = fancy\"\n            echo \"3 = lite with Quad_HR\"\n            echo \"4 = fancy lite with Quad_HR\"\n            read -t 10 -n 1 -p \"Which one do you want? $(tput setaf 2)0$(tput sgr 0)/1/2/3/4\" mk404_choose2\n            if [ \"$mk404_choose2\" == \"1\" ]; then\n                mk404_graphics_flag=1\n            elif [ \"$mk404_choose2\" == \"2\" ]; then\n                mk404_graphics_flag=2\n            elif [ \"$mk404_choose2\" == \"3\" ]; then\n                mk404_graphics_flag=3\n            elif [ \"$mk404_choose2\" == \"4\" ]; then\n                mk404_graphics_flag=4\n            elif [ \"$mk404_choose2\" == \"0\" ]; then\n                mk404_graphics_flag=\"\"\n            else\n                mk404_graphics_flag=\"\" #default\n            fi\n        fi\n        echo\n    fi\nfi\n\n# For MMU2S\n    if [[ \"$mk404_flag\" == \"2\" || \"$mk404_flag\" == \"MMU2\" || \"$mk404_flag\" == \"MMU2S\" ]]; then # Check if MMU is selected only for MK3/S\n        mk404_flag=2\n    fi\n\nif [[ ! -z \"$mk404_flag\" && \"$variant_flag\" != \"All \" ]]; then\n\n# Run MK404 with 'debugcore' and/or 'bootloader-file'\n    if [ ! -z \"$board_mem_flag\" ]; then\n        MK404_options=\"-x $board_mem_flag\"\n    fi\n    if [ ! -z \"$board_flash_flag\" ]; then\n        MK404_options=\"${MK404_options} -y $board_flash_flag\"\n    fi\n\n# Run MK404 with graphics\n    if [ ! -z \"$mk404_graphics_flag\" ]; then\n        if [[ \"$mk404_graphics_flag\" == \"1\" || \"$mk404_graphics_flag\" == \"2\" || \"$mk404_graphics_flag\" == \"3\" || \"$mk404_graphics_flag\" == \"4\" ]]; then\n            MK404_options=\"${MK404_options}  -g $mk404_graphics_flag\"\n        else\n            echo \"$(tput setaf 1)Unsupported MK404 graphics option $mk404_graphics_flag$(tput sgr 0)\"\n        fi\n    fi\n\n# Output some useful data\n    echo \"Printer: $MK404_PRINTER\"\n    echo \"Options: $MK404_options\"\n    echo \"\"\n    #read -t 5 -p \"Press $(tput setaf 2)Enter$(tput sgr 0) to start MK404\"\n    echo \"\"\n\n# Change to MK404 build folder\n    #cd ../MK404/master/build\n\n\n#Decide which hex file to use EN_FARM or Multi language\n    if [ \"$LANGUAGES\" == \"ALL\" ]; then\n        if [[ \"$MK404_PRINTER\" == \"MK3\" || \"$MK404_PRINTER\" == \"MK3S\" ]]; then\n            MK404_firmware_file=$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME.hex\n        else\n            PS3=\"Select a language:\"\n            select lan in ${langs[@]}\n            do\n                MK404_firmware_file=$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-$lan.hex\n                break\n            done\n        fi\n    else\n        MK404_firmware_file=$SCRIPT_PATH/../$OUTPUT_FOLDER/$OUTPUT_FILENAME-EN_FARM.hex\n    fi\n\n# Start MK404\n# default with serial output and terminal to manipulate it via terminal\n    #echo \"\"\n    #echo \"./MK404 Prusa_$MK404_PRINTER -s --terminal $MK404_options -f $MK404_firmware_file\"\n    #sleep 5\n    #./MK404 Prusa_$MK404_PRINTER -s --terminal $MK404_options -f $MK404_firmware_file || exit 62\n    echo \"\"\n    echo \"./MK404-build.sh -m $mk404_flag -p $MK404_PRINTER $MK404_options -f $MK404_firmware_file\"\n    if [ $OUTPUT == \"1\" ] ; then\n        sleep 2\n    fi\n    ./MK404-build.sh -m $mk404_flag -p $MK404_PRINTER $MK404_options -f $MK404_firmware_file|| failures 25\nfi\n}\n#### End: MK404 Simulator\n\n\n#### Check OS and needed apps\necho \"Check OS\"\ncheck_OS\ncheck_wget\ncheck_zip\ncheck_python\n\n#### Check for options/flags\necho \"Check for options\"\n\n#### Prepare build environment\necho \"Prepare build env\"\nget_arguments\nset_build_env_variables\noutput_useful_data\n\n#### Download/set needed apps and dependencies\nif [ ! -d \"../PF-build-env/$BUILD_ENV\" ]; then\n    check_create_build_folders\n    download_prepare_arduinoIDE\n    portable_ArduinoIDE\n    change_ArduinoIDEpreferances\n    download_prepare_Prusa_build_files\n    check_ArduinoIDE_User_interaction\nfi\n\n#### Start\nset_paths\ncheck_branch_changed\n\nfor v in ${VARIANTS[*]}\ndo\n    check_script_failed_nr1\n    check_script_failed_nr2\n    make_backup1\n    make_backup2\n    prepare_code_for_compiling\n    prepare_hex_folders\n    list_usefull_data\n    prepare_variant_for_compiling\n    compile_en_firmware\n    if [ $LANGUAGES ==  \"ALL\" ]; then\n        create_multi_firmware\n    else\n        save_en_firmware\n    fi\n    cleanup_firmware\ndone\nfinish_pf-build\nif [ $TARGET_OS == \"linux\" ]; then\n    MK404_SIM\nfi\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.2119140625,
          "content": "# Prusa Firmware MK3\n\nThis repository contains the source code and the development versions of the firmware running on the [Original Prusa i3](https://prusa3d.com/) MK3S/MK3/MK2.5S/MK2.5 line of printers.\n\nThe latest official builds can be downloaded from [Prusa Drivers](https://www.prusa3d.com/drivers/). Pre-built development releases are also [available here](https://github.com/prusa3d/Prusa-Firmware/releases).\n\nThe firmware for the Original Prusa i3 printers is proudly based on [Marlin 1.0.x](https://github.com/MarlinFirmware/Marlin/) by Scott Lahteine (@thinkyhead) et al. and is distributed under the terms of the [GNU GPL 3 license](LICENSE).\n\nThis repository contains _development material only!_\n\n\n# Build\n## Linux\nThere are two ways to build Prusa-Firmware on Linux: using [CMake](#cmake) (recommended for developers) or with [PF-build](#pf-build) which is more user-friendly for casual users.\n\n### CMake\n#### Quick-start\nThe workflow should be pretty straightforward for anyone with development experience. After installing git and a recent version of python 3 all you have to do is:\n\n    # clone the repository\n    git clone https://github.com/prusa3d/Prusa-Firmware\n    cd Prusa-Firmware\n\n    # automatically setup dependencies\n    ./utils/bootstrap.py\n\n    # configure and build\n    mkdir build\n    cd build\n    cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/AvrGcc.cmake\n    ninja\n\n\n#### Detailed CMake guide\nBuilding with cmake requires:\n\n- cmake >= 3.22.5\n- ninja >= 1.12.1 (optional, but recommended)\n\nPython >= 3.8 is also required with the following modules:\n\n- pyelftools (package `python3-pyelftools`)\n- polib (package `python3-polib`)\n- regex (package `python3-regex`)\n\nAdditionally `gettext` is required for translators.\n\nAssuming a recent Debian/Ubuntu distribution, install the dependencies globally with:\n\n    sudo apt-get install cmake ninja python3-pyelftools python3-polib python3-regex gettext\n\nPrusa-Firmware depends on a pinned version of `avr-gcc` and the external `prusa3dboards` package. These can be setup using `./utils/bootstrap.py`:\n\n    # automatically setup dependencies\n    ./utils/bootstrap.py\n\nwhich will download and unpack them inside the `.dependencies` directory. `./utils/bootstrap.py` will also install `cmake`, `ninja` and the required python packages if missing, although installing those through the system's package manager is usually preferred.\n\nYou can then proceed by creating a build directory, configure for AVR and build:\n\n    # configure\n    mkdir build\n    cd build\n    cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/AvrGcc.cmake\n\n    # build\n    ninja\n\nBy default all variants are built. There are several ways to restrict the build for development. During configuration you can set:\n\n- `cmake -DFW_VARIANTS=variant`: comma-separated list of variants to build. This is the file name as present in `Firmware/variants` without the final `.h`.\n- `cmake -DMAIN_LANGUAGES=languages`: comma-separated list of ISO language codes to include as main translations.\n- `cmake -DCOMMUNITY_LANGUAGES=languages`: comma-separated list of ISO language codes to include as community translations.\n\nWhen building the following targets are available:\n\n- `ninja ALL_MULTILANG`: build all multi-language targets (default)\n- `ninja ALL_ENGLISH`: build all single-language targets\n- `ninja ALL_FIRMWARE`: build all single and multi-language targets\n- `ninja VARIANT_ENGLISH`: build the single-language version of `VARIANT`\n- `ninja VARIANT_MULTILANG`: build the multi-language version of `VARIANT`\n- `ninja check_lang`: build and check all language translations\n- `ninja check_lang_ISO`: build and check all variants with language `ISO`\n- `ninja check_lang_VARIANT`: build and check all languages for `VARIANT`\n- `ninja check_lang_VARIANT_ISO`: build and check language `ISO` for `VARIANT`\n\n\n#### Automated tests\nAutomated tests are built with cmake by configuring for the current host:\n\n    # clone the repository\n    git clone https://github.com/prusa3d/Prusa-Firmware\n    cd Prusa-Firmware\n\n    # automatically setup dependencies\n    ./utils/bootstrap.py\n\n    # configure and build\n    mkdir build\n    cd build\n    cmake .. -G Ninja\n    ninja\n\n    # run the tests\n    ctest\n\n\n### PF-build\nPF-build is recommended for users without development experience. Download or clone the repository,\nthen run PF-build and simply follow the instructions:\n\n    cd Prusa-Firmware\n    ./PF-build.sh\n\nPF-build currently assumes a Debian/Ubuntu (or derivative) distribution.\n\n\n## Windows\n### Visual Studio Code (VSCode)\n#### Prerequisites\n\n* [Visual Studio Code](https://code.visualstudio.com/)\n* [CMake Tools plugin](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools)\n* [Python](https://www.python.org/)\n* [Git Bash](https://git-scm.com/downloads)\n\n#### First time setup\n\nStart by cloning the Prusa-Firmware repository\n\n    git clone https://github.com/prusa3d/Prusa-Firmware\n\nOpen the `Prusa-Firmware` folder in VScode.\n\nOpen a new terminal in VScode (Terminal→New Terminal) and run\n\n    python .\\utils\\bootstrap.py\n\nThis will download all dependencies required to build the firmware. You should see a `.dependencies` folder in the Prusa-Firmware folder.\n\nReload VScode. If all works correctly you should see the VScode automatically configuring the CMake project for you. If this doesn't happen you likely need to set the CMake kit; This can be done in two ways:\n\n1. Type `Ctrl+Shift+P` and search for `CMake: Select a Kit`. Select `avr-gcc`. If none appear, Scan for kits first.\n2. If 1) does not work for some reason, as a last resort you can edit the CMake Tools settings. Search for \"Additional Kits\" and add `.vscode/cmake-kits.json` to the list.\n\nAfter updating the kit, you may need to reload VScode.\n\n#### Building\n\nTo start building a firmware, click the CMake Tools plugin icon on the far left side. You will get a very large list of targets to build. Find the firmware you'd like to build (like `MK3S_ENGLISH`) and select the small icon which shows \"Build\" when hovered over.\n\nThe built .hex file can then be found in folder `Prusa-Firmware/build`\n\n\n## Arduino IDE (deprecated)\n\nUsing Arduino IDE is still possible, but _no longer supported_. Prusa-Firmware requires a complex multi-step build process that cannot be done automatically with just the IDE. For a long time we provided instructions to use Arduino in combination with shell scripts, however starting with 3.13 the build system has been completely switched to `cmake`.\n\nBuilding with Arduino IDE results in a *limited* firmware:\n\n- Arduino IDE can only build a single, english-only variant at a time that you manually have to select\n- The build will not be reproducible (meaning you will likely get a different binary every time you build the same sources)\n- You need to download, patch and select the correct board definitions by hand\n\nFor these reasons, you should think twice before reporting issues for a firmware built with Arduino. If you find a bug in the firmware, building and testing using CMake should be your first thought. Issues regarding Arduino builds are answered by the community and are not officially supported.\n\n\n### Environment preparation\n\nInstall \"Arduino Software IDE\" from the official website https://www.arduino.cc -> Software -> Downloads. Version 1.8.19 or higher is required.\n\nSetup Arduino to install and use the Prusa board definitions:\n\n- Open Arduino and navigate to File -> Preferences -> Settings\n- To the text field \"Additional Boards Manager URLs\" add `https://raw.githubusercontent.com/prusa3d/Arduino_Boards/master/IDE_Board_Manager/package_prusa3d_index.json`\n- Open Board manager (Tools -> Board -> Board manager)\n- Install \"Prusa Research AVR Boards by Prusa Research\"\n\n\n### Source code preparation\n\nClone or download this repository to your local drive.\n\nIn the subdirectory `Firmware/variants/` select the configuration file (.h) corresponding to your printer model and manually copy it to `Firmware/Configuration_prusa.h`\n\nRun \"Arduino IDE\", then\n\n- Open the file `Firmware/Firmware.ino`\n- Select the target board with Tools -> Board -> \"PrusaResearch Einsy RAMBo\"\n- Open `Firmware/config.h` and change `LANG_MODE` to 0.\n\n\n### Compilation and upload\n\n- Run the compilation: Sketch -> Verify/Compile\n- Upload the result code into the connected printer: Sketch -> Upload\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare_winbuild.ps1",
          "type": "blob",
          "size": 0.3359375,
          "content": "#This powershell script prepares your Windows 10 64-bit computer to be able to compile your\n#Prusa Firmware by installing a Linux Subsystem\n#Please run it as administrator\n\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\nInvoke-WebRequest -Uri https://aka.ms/wsl-ubuntu -OutFile Ubuntu.appx -UseBasicParsing"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}