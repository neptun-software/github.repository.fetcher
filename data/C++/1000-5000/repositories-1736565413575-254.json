{
  "metadata": {
    "timestamp": 1736565413575,
    "page": 254,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "projectM-visualizer/projectm",
      "stars": 3455,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.896484375,
          "content": "# Generated from CLion C/C++ Code Style settings\nBasedOnStyle: LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: None\nAlignOperands: Align\nAllowAllArgumentsOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Always\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: Yes\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: true\n  AfterControlStatement: Always\n  AfterEnum: true\n  AfterFunction: true\n  AfterNamespace: false\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\nBreakBeforeBinaryOperators: None\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeColon\nColumnLimit: 0\nCompactNamespaces: false\nContinuationIndentWidth: 4\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth: 4\nKeepEmptyLinesAtTheStartOfBlocks: true\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPointerAlignment: Left\nReflowComments: false\nSpaceAfterCStyleCast: true\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.966796875,
          "content": "Checks: '\n-*,\n\nreadability-*,\n-readability-named-parameter,\n-readability-magic-numbers,\n-readability-make-member-function-const,\n\ncppcoreguidelines-*,\n-cppcoreguidelines-owning-memory,\n-cppcoreguidelines-pro-type-union-access,\n-cppcoreguidelines-avoid-magic-numbers,\n-cppcoreguidelines-pro-bounds-constant-array-index,\n-cppcoreguidelines-pro-bounds-pointer-arithmetic,\n\nbugprone-*,\n-bugprone-easily-swappable-parameters,\n\nmodernize-*,\nperformance-*,\nmisc-*'\n\nCheckOptions:\n  - key: readability-identifier-naming.VariableCase\n    value: camelBack\n  - key: readability-identifier-naming.LocalVariableCase\n    value: camelBack\n  - key: readability-identifier-naming.ParameterCase\n    value: camelBack\n  - key: readability-identifier-naming.ClassCase\n    value: CamelCase\n  - key: readability-identifier-naming.StructCase\n    value: CamelCase\n  - key: readability-identifier-naming.StructIgnoredRegexp\n    value: ^projectm_.*\n  - key: readability-identifier-naming.MemberCase\n    value: camelBack\n  - key: readability-identifier-naming.PublicMethodCase\n    value: CamelCase\n  - key: readability-identifier-naming.ProtectedMethodCase\n    value: CamelCase\n  - key: readability-identifier-naming.PrivateMethodCase\n    value: CamelCase\n  - key: readability-identifier-naming.MethodCase\n    value: CamelCase\n  - key: readability-identifier-naming.FunctionCase\n    value: CamelCase\n  - key: readability-identifier-naming.GlobalFunctionCase\n    value: CamelCase\n  - key: readability-identifier-naming.GlobalFunctionIgnoredRegexp\n    value: ^projectm_.*\n  - key: readability-identifier-naming.ScopedEnumConstantCase\n    value: CamelCase\n  - key: readability-identifier-naming.MacroDefinitionCase\n    value: UPPER_CASE\n  - key: readability-identifier-naming.PrivateMemberCase\n    value: camelBack\n  - key: readability-identifier-naming.ProtectedMemberPrefix\n    value: m_\n  - key: readability-identifier-naming.PrivateMemberPrefix\n    value: m_\n\n  - key: readability-uppercase-literal-suffix.NewSuffixes\n    value: L;LL;Lu;LLu\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.736328125,
          "content": "build_logs/\n\nxcuserdata\nsrc/libprojectM/config.inp\nsrc/libprojectM/config.inp.b\nsrc/libprojectM/config.inp.in\nsrc/projectM-emscripten/build/presets\npresets/custom\nproject.xcworkspace\n*.o\n*.lo\n*.la\n*.a\nprojectM-*.tar.gz\n.deps/\n.libs/\nMakefile\nMakefile.in\n/aclocal.m4\n/autom4te.cache\n/build-aux\n/config.h\n/config.h.in\n/configure\n/libtool\n/stamp-h1\n.dirstamp\n/src/libprojectM/config.h\nar-lib\ncompile\ndepcomp\ninstall-sh\nltmain.sh\nmissing\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\n/t\n/src/libprojectM/libprojectM.pc\n/build\n/dist\n\n# Visual Studio w/CMake\n/out\n/.vs\n/CMakeSettings.json\n\n_sync.bat\n_sync.sh\nto_sync/\n.DS_Store\nsrc/projectM-sdl/build/\nsrc/libprojectM/build/\n*.pkg\n./vcpkg_installed\n\n# CLion\ncmake-build-*\n.idea\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.125,
          "content": "[submodule \"vendor/projectm-eval\"]\n\tpath = vendor/projectm-eval\n\turl = https://github.com/projectM-visualizer/projectm-eval.git\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 2.3916015625,
          "content": "projectM -- Milkdrop-esque visualisation SDK\r\nCopyright (C)2003-2019 projectM Team\r\n\r\nThis library is free software; you can redistribute it and/or\r\nmodify it under the terms of the GNU Lesser General Public\r\nLicense as published by the Free Software Foundation; either\r\nversion 2.1 of the License, or (at your option) any later version.\r\n\r\nThis library is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\nLesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public\r\nLicense along with this library; if not, write to the Free Software\r\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\nSee 'LICENSE.txt' included within this release\r\n\r\nFor the purposes of the copyright statement in the preamble of each source\r\ncode file comprising projectM, the projectM team are:\r\n\r\nCarmelo Piccione\r\n    Original Expression Parser/Evaluator\r\n    Pulse Audio support (projectM-pulseaudio)\r\n    Qt GUI (projectM-qt)\r\n\r\nPeter Sperl\r\n    Beat Detection\r\n    Rendering\r\n    XMMS Support (projectM-xmms)\r\n    libvisual Support (projectM-libvisual)\r\n\r\nAlligator Descartes\r\n    Media Player Support (iTunes, Winamp, Windows Media Player)\r\n    Test application frameworks (projectM-wxvis, projectM-sdlvis)\r\n    DVD application (projectM-movie)\r\n    Win32 screensaver (projectM-screensaver)\r\n\r\nRoger Dannenburg\r\n    Advice & Support\r\n\r\nMatthias Klumpp\r\n    Original CMake build system\r\n    Distro integration\r\n    Bug fixes\r\n\r\nMischa Spiegelmock\r\n    OSX native iTunes visualization plugin\r\n    Preliminary web support (projectM-emscripten)\r\n    CMake improvements for OSX and Linux\r\n    SDL\r\n    OpenGLES\r\n\r\nRobert Pancoast\r\n    Modernize win32 Build\r\n    Windows Universal Application\r\n    Provide XBOX Support\r\n    Input Windows Audio Loopback with WASAPI\r\n\r\nKai Blaschke\r\n    Updated CMake build system\r\n    New Bison-/Flex-based Expression Evaluator (projectm-eval)\r\n    C API\r\n    Modernized Milkdrop 2 Renderer\r\n\r\nBlaque Allen\r\n    Rust Crates\r\n    Emscripten Improvements\r\n    Code Reviews\r\n\r\nDane Wagner\r\n    Improved Audio Processing\r\n    HLSL Shader Translation Fixes\r\n    Sphinx Documentation\r\n\r\n...and many others!\r\n\r\nFor a full list, please see the contributors page on GitHub:\r\nhttps://github.com/projectM-visualizer/projectm/graphs/contributors"
        },
        {
          "name": "BUILDING-cmake.md",
          "type": "blob",
          "size": 18.748046875,
          "content": "# Building with CMake\n\nThis file contains in-depth information for building with the CMake build system.\n\n## Quickstart\n\nWant to build it fast?\n\nRequired tools and dependencies:\n\n- CMake 3.20 or higher.\n- A working toolchain, e.g. Visual Studio on Windows or the `build-essentials` package on Ubuntu Linux.\n- Main OpenGL libraries and development files.\n- The `GLEW` Library on Windows.\n\nTo use the library in other projects, it is required to install it. Use `CMAKE_INSTALL_PREFIX` to specify the\ninstallation directory.\n\nFrom the project root, execute:\n\n```shell\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/path/to/install-dir\ncmake --build . --target install --config Release\n```\n\nIf the build succeeded, you should now have the projectM libraries and include files in the specified install dir.\n\nTo use the library in other CMake projects, simply point the build to your install dir by adding it\nto `CMAKE_PREFIX_PATH` and call `find_package(libprojectM)` in the other project's `CMakeLists.txt`.\n\nIf you use other build systems, you have to specify the include and library paths manually.\n\n## Selecting a specific project file generator\n\nBuilding libprojectM does not require any specific CMake generator. It should work with any available generator, single-\nand multi-config.\n\nTo specify a CMake generator, use the `-G` switch, followed by the generator name. Some newer generators take an\nadditional architecture using the `-A` switch. To list all available generators available on your current platform,\nleave out the generator name:\n\n```shell\ncmake -G\n```\n\nAdditional information on the supported generators can be\nfound [in the CMake documentation](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html).\n\n### Popular generators\n\nBy default, CMake will use the [`Unix Makefiles`](https://cmake.org/cmake/help/latest/generator/Unix%20Makefiles.html)\ngenerator on Linux and macOS, which is a good choice and should work. Yet in some circumstances, you might want to\ngenerate project files for a specific build tool or IDE:\n\n```shell\ncmake -G \"Unix Makefiles\" -S /path/to/source/dir -B /path/to/build/dir\n```\n\nA common alternative is the [`Ninja`](https://cmake.org/cmake/help/latest/generator/Ninja.html) generator, which\nrequires `ninja` to be installed. It is mostly a `make`\nreplacement with less overhead and should work equally well. It is supported on all major platforms, including Windows:\n\n```shell\ncmake -G Ninja -S /path/to/source/dir -B /path/to/build/dir\n```\n\nOn macOS, CMake also supports the [`Xcode`](https://cmake.org/cmake/help/latest/generator/Xcode.html) generator. It will\ncreate an `.xcodeproj` bundle which you can open in Xcode. It also adds support for automatic code signing, which might\nbe required if your application using projectM needs to be notarized for store deployment.\n\n```shell\ncmake -G Xcode -S /path/to/source/dir -B /path/to/build/dir\n```\n\nIf you develop on Windows, you will possibly use Visual Studio. While recent visual Studio versions have CMake support\nbuilt-in, you can still pre-generate the solution and project files and open the `.sln` file from the build directory.\nCMake provides a separate generator for each Visual Studio release. For Visual Studio 2019 you would use\nthe [`Visual Studio 16 2019`](https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2016%202019.html) generator\nand provide an additional architecture parameter:\n\n```shell\ncmake -G \"Visual Studio 16 2019\" -A \"X64\" -S /path/to/source/dir -B /path/to/build/dir\n```\n\nIt is not possible to generate multi-arch solutions with CMake though. You need to create separate build directories and\nuse the respective `-A` switch for each.\n\n## Project-specific configuration options\n\nCMake has no built-in way of printing all available configuration options. You can either refer to the\ntop-level `CMakeLists.txt` which contains a block of `option` and `cmake_dependent_option` commands, or use one of the\navailable CMake UIs which will display the options after configuring the project once.\n\n### Important build switches\n\nThe following table also gives you an overview of important build options and their defaults. All options accept a\nboolean\nvalue (`YES`/`NO`, `TRUE`/`FALSE`, `ON`/`OFF` or `1`/`0`) and can be provided on the configuration-phase command line\nusing the `-D` switch.\n\n| CMake option        | Default | Required dependencies | Description                                                                                 |\n|---------------------|---------|-----------------------|---------------------------------------------------------------------------------------------|\n| `BUILD_TESTING`     | `OFF`   |                       | Builds the unit tests.                                                                      |\n| `BUILD_SHARED_LIBS` | `ON`    |                       | Build projectM as shared libraries. If `OFF`, build static libraries.                       |\n| `ENABLE_PLAYLIST`   | `ON`    |                       | Builds and installs the playlist library.                                                   |\n| `ENABLE_EMSCRIPTEN` | `OFF`   | `Emscripten`          | Build for the web using Emscripten. Only supports build as a static library and using GLES. |\n| `ENABLE_GLES`       | `OFF`   | `GLES`                | Use OpenGL ES 3 profile for rendering instead of the Core profile.                          |\n\nNote that `ENABLE_GLES` will be forcibly set to `ON` for Emscripten and Android builds, making it mandatory.\n\n### Experimental and application-dependent build switches\n\nThe following table contains a list of build options which are only useful in special circumstances, e.g. when\ndeveloping libprojectM, trying experimental features or building the library for a special use-case/environment.\n\n| CMake option           | Default | Required dependencies          | Description                                                                                                                                                   |\n|------------------------|---------|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ENABLE_SDL_UI`        | `ON`    | `SDL2`                         | Builds the SDL-based test application. Only used for development testing, will not be installed.                                                              |\n| `ENABLE_INSTALL`       | `OFF`   | Building as a CMake subproject | Enable projectM install targets when built as a subproject via `add_subdirectory()`.                                                                          |\n| `ENABLE_DEBUG_POSTFIX` | `ON`    |                                | Adds `d` (by default) to the name of any binary file in debug builds.                                                                                         |\n| `ENABLE_SYSTEM_GLM`    | `OFF`   |                                | Builds against a system-installed GLM library.                                                                                                                |\n| `ENABLE_CXX_INTERFACE` | `OFF`   |                                | Exports symbols for the `ProjectM` and `PCM` C++ classes and installs the additional the headers. Using the C++ interface is not recommended and unsupported. |\n\n### Path options\n\nThere are also a few textual parameters that can be used to fine-tune the installation directories. Relative paths in\nthe following options are appended to the value\nof [`CMAKE_INSTALL_PREFIX`](https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html) (which, on most UNIX\nplatforms, defaults to `/usr/local`):\n\n| CMake option           | Default        | Description                                                                                |\n|------------------------|----------------|--------------------------------------------------------------------------------------------|\n| `CMAKE_INSTALL_PREFIX` | (OS dependent) | Base directory where the projectM libraries, includes and support files will be installed. |\n| `PROJECTM_BIN_DIR`     | `bin`          | Directory where executables (e.g. the SDL standalone application) are installed.           |\n| `PROJECTM_LIB_DIR`     | `lib[64]`      | Directory where libprojectM is installed.                                                  |\n| `PROJECTM_INCLUDE_DIR` | `include`      | Directory where the libprojectM include files will be installed under.                     |\n\n### Other options\n\nVarious other options for specific needs.\n\n| CMake option               | Default                                | Description                                                                                                       |\n|----------------------------|----------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| `CMAKE_DEBUG_POSTFIX`      | `d` (if `ENABLE_DEBUG_POSTFIX` is set) | Postfix appended to debug libraries.                                                                              |\n| `CMAKE_INSTALL_BINDIR`     | `bin`                                  | Another way to specify the binary installation directory. Used as default value for `PROJECTM_BIN_DIR`.           |\n| `CMAKE_INSTALL_LIBDIR`     | `lib` or `lib64`                       | Another way to specify the library installation directory. Used as default value for `PROJECTM_LIB_DIR`.          |\n| `CMAKE_INSTALL_INCLUDEDIR` | `include`                              | Another way to specify the include file installation directory. Used as default value for `PROJECTM_INCLUDE_DIR`. |\n\n## Always perform out-of-tree builds!\n\nMost classic IDEs and build systems directly make use of the source tree and create project files, temporary build\nartifacts (e.g. object files) and the final binaries in the same directory structure as the source files. An advantage\nof this approach is that you can find all compiled binaries side-by-side with their sources and generated headers are\nalready in the same directories as the source files including them. This approach has some drawbacks though:\n\n- Only a single build configuration is supported as files are overwritten in-place.\n- A lot of noise is created in the source directory, making it hard to distinguish between generated and original source\n  files.\n- A very large `.gitignore` file is required to cover all unwanted files.\n- Mistakes in the build scripts can overwrite source files, causing errors and destroy uncommitted work.\n\nSome of these can be mitigated by providing additional targets (`make clean` and `make distclean`) or creating\nsubdirectories for Debug/Release build configurations.\n\nWhile CMake also supports in-tree builds, it is \"discouraged\" in the official documentation, for the above reasons.\nBuilding out-of-tree allows it to create multiple build directories with different configurations which do not influence\neach other in any way. If a build directory contains unwanted artifacts, and you want to start fresh, simply delete and\nrecreate the whole directory - no work is lost.\n\nThis project follow this principle by treating the original source tree as read-only and avoiding potential conflicts:\n\n- Everything under [`CMAKE_SOURCE_DIR`](https://cmake.org/cmake/help/latest/variable/CMAKE_SOURCE_DIR.html) must only be\n  read, never changed or written to.\n- Everything under [`CMAKE_BINARY_DIR`](https://cmake.org/cmake/help/latest/variable/CMAKE_BINARY_DIR.html) is temporary\n  and related to the current build configuration.\n- When generating configuration-dependent files,\n  use [`CMAKE_CONFIGURATION_TYPES`](https://cmake.org/cmake/help/latest/variable/CMAKE_CONFIGURATION_TYPES.html)\n  and [`CMAKE_BUILD_TYPE`](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html) to create non-conflicting\n  files in the build tree.\n\nWhile this project will not force you to build out-of-tree, there is no mechanism to clean up the generated files after\nrunning cmake in-tree.\n\n## CMake build directory layout\n\nIf you are new to CMake, the way of how CMake creates the build directory and where it creates the build targets might\nbe confusing. Here is a summary of what's in the build directory and how it is structured in general.\n\n### Using files from the build tree\n\nIt is generally not good practice to directly take binaries and other files from the build tree for packaging, for\nseveral reasons:\n\n1. The directory structure is generated by CMake and depends on the generator used. The layout might change between\n   CMake versions, even for the same generator.\n2. On platforms with RPATH support, CMake will store absolute paths in executables and shared libraries which point to\n   the absolute paths of any linked dependencies, either from the build tree or external libraries as well. These\n   binaries are not relocatable and will most certainly not work if run on any other computer (or even on the same after\n   deleting the build directory).\n3. For some configurations, even Release build artifacts may contain debug symbols until they are installed.\n\nIt is fine to build and run executables from the build directory for development and debugging. For packaging or using\nlibprojectM in other projects, always use the `install` target and copy files from there.\n\n### Generated files\n\nIn the top-level build directory, CMake creates a few files that are present on any platform:\n\n- `CMakeCache.txt`: This file contains all variables and build settings CMake needs to remember from the first\n  configuration run. This file can be edited on demand either manually or using a CMake UI to change any values. On the\n  next build, CMake will regenerate the project files if this file has been modified.\n- `cmake_install.cmake`: Contains generated install-related settings.\n- `install_manifest.txt`: After installing the project, this file contains a list with absolute filenames of all\n  installed files. It can be used for packaging or deleting installed files as CMake doesn't define an `uninstall`\n  target.\n- The top-level project file for use with the selected build toolset, e.g. `Makefile`, `build.ninja`, `projectm.sln`\n  or `projectm.xcodeproj`, plus additional toolset-specific files.\n\nThe projectM build files generate additional files used in the build and install phases. These are scattered over the\nbuild tree, but installed into the proper directories. Do not try and gather these files yourself from the build tree.\n\n### Subdirectory structure\n\nThe rest of the directory structure generally resembles the source tree. Source directories containing\na `CMakeLists.txt` file will also be created in the build tree with the same relative path. Each of these subdirectories\ncontains a `CMakeFiles` directory with CMake-internal data, generated project files for the select toolset, e.g.\nmakefiles and any temporary compile artifacts.\n\nThe directory structure is created by CMake and may change depending on the generator and CMake version used.\n\n### Executable and library locations\n\nBuild targets - shared/static libraries and executables - are created in the same subdirectory in the build tree as\nthe `CMakeLists.txt` file that defines the target in the source tree (which, in most cases, resides in the same\ndirectory as the source files). Depending on the generator used, the binaries are created directly in the directory for\nsingle-configuration generators (like `Unix Makefiles` or `Ninja`) and in a subdirectory with the configuration name,\ne.g. `Debug` or `Release`, for multi-configuration generators like `Xcode` or `Visual Studio 16 2019`.\n\nYou may also find additional files and symbolic links in the same location depending on the platform, e.g. `.pdb` files\non Windows.\n\n## Using libprojectM in other CMake projects\n\nThe projectM library can be used as a static library or shared library in other CMake-based projects to provide embedded\naudio visualization. It is highly recommended to build projectM as shared libraries for maximum compatibility and LGPL\ncompliance.\n\nThe build directory is not structured in a way that other projects can make use of it. Use the `install` target to copy\nall required files to the configured installation prefix. You can customize the subdirectories for libraries, includes\nand binaries using the `PROJECTM_<X>>_DIR` variables when configuring the CMake project.\n\n### Importing libprojectM targets from the build tree\n\nThis approach is not recommended, but can be useful for projects that either require more in-depth access to the\nprojectM library files, especially to headers that are not installed as part of the public API. This might cause issues\nif the internal headers change, but gives a broader set of features and more control to the developer.\n\nPlease refer to the [`ExternalProject`](https://cmake.org/cmake/help/latest/module/ExternalProject.html) CMake module\ndocumentation on how to set up the libprojectM build system for use in another project.\n\n### Importing libprojectM targets from an installed version\n\nThis is the recommended and supported way of importing libprojectM in your project. This project installs a set of CMake\nfiles in `<PREFIX>/<LIBDIR>/cmake/projectM4`, containing target definitions, version and dependency checks as well as\nany additional libraries required for linking. Other projects then use CMake's `find_package` command to search for\nthese files in [different locations](https://cmake.org/cmake/help/latest/command/find_package.html#search-procedure).\n\nIn the case projectM libraries and headers are not installed in any system search path, you need to add either the\ninstall prefix path (the top-level install dir) or the directory containing the libraries (the `lib` dir by default) to\nthe [`CMAKE_PREFIX_PATH`](https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html) list.\n\nIf the package was found, you can then link against libprojectM by using the `libprojectM::projectM` target.\n\nDepending on how the package was built, targets might be available for multiple configurations or only `Release`. CMake\nwill automatically select the most appropriate one to link.\n\nInclude dirs, additional link dependencies and possible compiler options will be propagated to any target the library is\nlinked to.\n\n#### Using the optional playlist library\n\nIf you want to use the optional playlist library, you need to specifically request it as a component:\n\n```cmake\nfind_package(projectM4 COMPONENTS Playlist)\n```\n\nYou can either use `REQUIRED` to force a fatal error if the component cannot be found or check if the target exists\nusing:\n\n```cmake\nif(TARGET libprojectM::playlist)\n    # ...\nendif()\n```\n\nIf you link the playlist library, the main `libprojectM::projectM` target will be linked automatically as a dependency.\n\n#### Example\n\nSearches for projectM and the playlist library and links both to the application:\n\n```cmake\nfind_package(projectM4 REQUIRED COMPONENTS Playlist)\n\nadd_executable(MyApp main.cpp)\n\ntarget_link_libraries(MyApp PRIVATE\n        libprojectM::playlist\n        )\n```\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 14.611328125,
          "content": "# Building projectM from source\n\nSuggested: use CMake. See [BUILDING-cmake.md](./BUILDING-cmake.md).\n\nThis document describes the deprecated GNU Autotools setup.\n\n## Quick Start (Debian / Ubuntu)\n\nFor other operating systems (Windows/macOS), see the OS-specific sections below.\n\n### Install the build tools and dependencies\n\nMandatory packages:\n\n```bash\nsudo apt install build-essential libgl1-mesa-dev mesa-common-dev libsdl2-dev libglm-dev\n```\n\nOptional packages for additional features:\n\n```bash\nsudo apt install qtbase5-dev # For building Qt-based UIs\nsudo apt install libvisual-0.4-dev # To build the libvisual plug-in\nsudo apt install libjack-jackd2-dev # To build the JACK visualizer application\nsudo apt install ninja-build # To build projectM with Ninja instead of make\n```\n\n### Download the projectM sources\n\nIf you want to use a stable version of projectM, download the latest release from\nthe [Releases page on GitHub](https://github.com/projectM-visualizer/projectm/releases) and unpack it. You can then skip\nto the next step.\n\nIf you prefer a bleeding-edge version or want to modify the code, clone the Git repository and initialize any\nsubmodules:\n\n```bash\nsudo apt install git # Probably already installed\ngit clone https://github.com/projectM-visualizer/projectm.git /path/to/local/repo\ncd /path/to/local/repo\ngit fetch --all --tags\ngit submodule init\ngit submodule update\n```\n\n### Build and install projectM\n\nOlder projectM releases use autoconf/automake for building. If your repository has a `CMakeLists.txt` file on the top\nlevel, skip to the CMake part right below.\n\nReplace `/usr/local` with your preferred installation prefix.\n\n#### Configure the project using CMake\n\n```bash\nsudo apt install cmake\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..\n```\n\nTo generate Ninja scripts instead of Makefiles, add `-GNinja` to the above command.\n\n#### Build and install\n\nThese commands will build projectM and install it to /usr/local or the configured installation prefix set in the step\nbefore:\n\n```bash\ncmake --build . -- -j && sudo cmake --build . --target install \n```\n\n**Note**: You won't need to use `sudo` if the install prefix is writeable by your non-privileged user.\n\n#### Test projectM\n\nIf you have a desktop environment installed, you can now run `[prefix]/bin/projectMSDL`.\n\n## Dependencies\n\nDepending on the OS/distribution and packaging system, libraries might be split into separate packages with binaries and\ndevelopment files. To build projectM, both binaries and development files need to be installed.\n\n#### General build dependencies for all platforms:\n\n* A working build toolchain.\n* **OpenGL**: 3D graphics library. Used to render the visualizations.\n* **GLES3**: OpenGL libraries for embedded systems, version 3. Required to build projectM on mobile devices, Raspberry\n  Pi and Emscripten.\n* [**glm**](https://github.com/g-truc/glm):  OpenGL Mathematics library. Optional, will use a bundled version with\n  autotools or if not installed.\n* [**SDL2**](https://github.com/libsdl-org/SDL): Simple Directmedia Layer. Version 2.0.5 or higher is required to build\n  the standalone visualizer application (projectMSDL).\n\n#### Only relevant for Linux distributions, FreeBSD and macOS:\n\n* [**Qt5**](https://www.qt.io/): Qt cross-platform UI framework. Used to build the Pulseaudio and JACK visualizer\n  applications. Requires the `Gui` and `OpenGL` component libraries/frameworks.\n* [**Pulseaudio**](https://www.freedesktop.org/wiki/Software/PulseAudio/): Sound system for POSIX platforms. Required to\n  build the Pulseaudio visualizer application.\n* [**JACK**](https://jackaudio.org/): Real-time audio server. Required to build the JACK visualizer application.\n* [**libvisual 0.4**](http://libvisual.org/): Audio visualization library with plug-in support. Required to build the\n  projectM libvisual plug-in.\n* [**CMake**](https://cmake.org/): Used to generate platform-specific build files.\n\n### Only relevant for Windows:\n\n* [**vcpkg**](https://github.com/microsoft/vcpkg): C++ Library Manager for Windows. Optional, but recommended to install\n  the aforementioned library dependencies and/or using CMake to configure the build.\n* [**NuGet**](https://www.nuget.org/): Dependency manager for .NET. Required to build the EyeTune app.\n* [**GLEW**](http://glew.sourceforge.net/): The OpenGL Extension Wrangler Library. Only required if using CMake to\n  configure the build, the pre-created solutions use a bundled copy of GLEW.\n\n## Building on Linux and macOS\n\n### Installing dependencies\n\n- Linux distributions will have packages available for most (if not all) required libraries. The package names and\n  commands to install them vary widely between distributions (and even versions of the same distribution). Please refer\n  to the documentation of your build OS on how to find and install the required libraries.\n- On *BSD, install the appropriate Ports with `pkg install`.\n- On macOS, using [Homebrew](https://brew.sh/) is the recommended way of installing any dependencies not supplied by\n  Xcode.\n\n### Building with CMake\n\n---\n\n:exclamation: **IMPORTANT NOTE**: Currently, CMake build support is still in active development and considered\nunfinished. It is working and produces running binaries, but there are still some features, build internals and whole\ntargets missing. While testing the CMake build files on any platform and feedback on this is strongly encouraged,\nCMake-based builds should not yet be used in any production environment until this message is gone.\n\n---\n\nThe steps documented below are a bare minimum quickstart guide on how to build and install the project. If you want to\nconfigure the build to your needs, require more in-depth information about the build process and available tweaks, or on\nhow to use libprojectM in your own CMake-based projects, see [BUILDING-cmake.md](BUILDING-cmake.md).\n\nUsing CMake is the recommended and future-proof way of building projectM. CMake is a platform-independent tool that is\nable to generate files for multiple build systems and toolsets while using only a single set of build instructions.\nCMake support is still new and in development, but will replace the other project files (automake/autoconf scripts,\nVisual Studio solutions and Xcode projects) in this repository once mature and stable.\n\nBuilding the project with CMake requires two steps:\n\n- Configure the build and generate project files.\n- Build and install the project using the selected build tools.\n\n**Note:** When building with CMake, the build directory should always be separate from the source directory. Generating\nthe build files directly inside the source tree is possible, but strongly discouraged. Using a subdirectory,\ne.g. `cmake-build` inside the source directory is fine though.\n\nThis documentation only covers project-specific information. CMake is way too versatile and feature-rich to cover any\npossible platform- and toolset-specific configuration details here. If you are not experienced in using CMake, please\nfirst read the [official CMake documentation](https://cmake.org/cmake/help/latest/) (at least\nthe [User Interaction Guide](https://cmake.org/cmake/help/latest/guide/user-interaction/index.html)) for basic usage\ninstructions.\n\n#### Configure the build\n\nConfiguring a non-debug build with default options and install prefix (`/usr/local`) can be done with these commands,\nbuilding in a subdirectory inside the source directory:\n\n```shell\ncd /path/to/source\nmkdir cmake-build\ncd cmake-build\ncmake -DCMAKE_BUILD_TYPE=Release ..\n```\n\nCMake will check all required dependencies and display any errors. If configuration was successful, a summary of the\nbuild configuration is printed and CMake should display a `Generating done` line. The project is now ready to build.\n\n#### Compile and install the project\n\nDepending on your generator choice, you can use your selected toolset as usual to build and install projectM:\n\n- With `Unix Makefiles`, run `make && sudo make install`.\n- With `Ninja`, run `ninja && sudo ninja install`.\n- With `Xcode`, select the appropriate target and configuration in Xcode and build it, or `INSTALL` to install the\n  project.\n\nYou can also use CMake's build mode to run the selected toolset and build any specified target. CMake knows which\ncommand to call and which parameters to pass, so the syntax works on all platforms with all generators. If you've\nalready set the top-level build directory as working directory, simply pass `.` as `/path/to/build/dir`:\n\n```shell\ncmake --build /path/to/build/dir --config Release\nsudo cmake --build /path/to/build/dir --config Release --target install\n```\n\nIf you don't need root permissions to install running the second command without `sudo` is sufficient.\n\nIf you want to provide arguments directly to the toolset command, add `--` at the end of the CMake command line followed\nby any additional arguments. CMake will pass these *unchanged and unchecked* to the subcommand:\n\n```shell\ncmake --build /path/to/build/dir --config Release -- -j 4\n```\n\n## Building on Windows\n\nTo build the projectM library and the SDL-based standalone application, CMake must be used to create the project files\nfirst. Using vcpkg to pull in the build dependencies is highly recommended, as CMake can't use NuGet (NuGet pulls in\ndependencies using the project files, while CMake requires the libraries before creating the project files).\n\n#### Installing the dependencies with vcpkg\n\nAs stated above, using vcpkg is the easiest way to get the required dependencies. First,\ninstall [vcpkg from GitHub](https://github.com/microsoft/vcpkg) by following the official guide.\n\nWe've included a vcpkg manifest file in the repository root, designed to automatically install dependencies when you\ncreate your solution.\n\n#### Creating the Visual Studio solution\n\nCMake provides separate generators for different Visual Studio versions. Newer CMake versions will support recent Visual\nStudio releases, but may remove generators for older ones. To get a list of available generators from the command line,\nuse the `-G` switch without an argument. The CMake GUI will present you a dropdown list you can easily select from.\n\nTo set the build architecture in Visual Studio builds, use the `-A` switch and specify either `Win32` or `X64` as the\nargument. If you want to build for both architectures, create separate build directories and configure them accordingly.\n\nTo make CMake aware of the installed vcpkg packages, simply use the provided toolchain file when configuring the\nprojectM build by\npointing [`CMAKE_TOOLCHAIN_FILE`](https://cmake.org/cmake/help/latest/variable/CMAKE_TOOLCHAIN_FILE.html) to it.\n\nHere is a full command line example to create a Visual Studio 2019 solution for X64:\n\n```commandline\ncmake -G \"Visual Studio 16 2019\" -A \"X64\" -DCMAKE_TOOLCHAIN_FILE=\"<path to vcpkg>/scripts/buildsystems/vcpkg.cmake\" -S \"<path to source dir>\" -B \"<path to build dir>\"\n```\n\nIf you use the CMake GUI, check the \"Specify toolchain file for cross-compiling\" option in the first page of the\nconfiguration assistant, then select the above `vcpkg.cmake` file on the second page.\n\nAnother option is to open the project folder in a recent Visual Studio version as a CMake project and configure CMake\nusing Visual Studio's JSON-based settings file.\n\n#### Building the solution\n\nTo build the project, open the generated solution in Visual Studio and build it like any other solution. Each time the\nCMake files are changed, Visual Studio will automatically regenerate the CMake build files and reload the solution\nbefore continuing the build. Be aware that in old Visual Studio versions (2015 and earlier) the reload-and-continue\nmight not work properly.\n\nYou can also build the solution with msbuild via the command line, or use CMake's build wrapper to do that for you:\n\n```commandline\ncmake --build \"<path to build dir>\" --config Release\n```\n\n#### Using Ninja to build\n\nThe Ninja build system is shipped with Visual Studio since version 2019 and used by default if loading a CMake project\ndirectly from within the IDE. Ninja can also be [installed separately](https://github.com/ninja-build/ninja/releases).\n\nTo configure the build directory for Ninja, pass `Ninja` or `Ninja Multi-Config` as the argument for the `-G` switch.\nThe difference between both generators is that the former uses `CMAKE_BUILD_TYPE` to specify the configuration (\ne.g. `Debug` or `Release`) while the latter supports all configurations in a single build directory, specified during\nbuild time.\n\nThe architecture is determined from the toolset, so make sure to run the commands in the correct Visual Studio command\nprompt, e.g. \"Native Tools for X64\".\n\nConfigure and build for a single-configuration Release build with vcpkg:\n\n```commandline\ncmake -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=\"<path to vcpkg>/scripts/buildsystems/vcpkg.cmake\" -S \"<path to source dir>\" -B \"<path to build dir>\"\ncmake --build \"<path to build dir>\"\n```\n\nSame, but using the multi-configuration generator:\n\n```commandline\ncmake -G \"Ninja Multi-Config\" -DCMAKE_TOOLCHAIN_FILE=\"<path to vcpkg>/scripts/buildsystems/vcpkg.cmake\" -S \"<path to source dir>\" -B \"<path to build dir>\"\ncmake --build \"<path to build dir>\" --config Release\n```\n\n## Notes on other platforms and features\n\n### Raspberry Pi (and other embedded systems)\n\n* projectM is arch-independent, although there are some SSE2 enhancements for x86\n* [Notes on running on raspberry pi](https://github.com/projectM-visualizer/projectm/issues/115)\n\n### Build using NDK for Android\n\nTo build projectM using the Android SDK, please refer to the official NDK docs:\n\n> https://developer.android.com/ndk/guides/cmake\n\nIt is highly recommended using the latest NDK and CMake >= 3.21 for building.\n\n### Using libprojectM with pkgconfig\n\nSome UNIX build systems cannot use CMake config packages, like GNU autotools. To use libprojectM with such build\nsystems, projectM's build system also creates basic `.pc` files during the installation process.\n\nNote that the resulting pkgconfig files will not necessarily work in all circumstances, because they are much less\nflexible than CMake (or Meson). When using pkgconfig, some required libraries will probably nor be linked\nautomatically (e.g. OpenGL libraries) and have to be added manually depending on the application needs.\n\n## libprojectM\n\n`libprojectM` is the core library. It is made up of three sub-libraries:\n\n#### Renderer\n\nMade up of everything in `src/libprojectM/Renderer`. These files compose the `libRenderer` sub-library.\n\n### Assets\n\n`libprojectM` can either have a configuration hard-coded or load from a configuration file. It's up to each application\nto decide how to load the config file. The config file can have paths defined specifying where to load fonts and presets\nfrom.\n\nYou will want to install the config file and presets somewhere, and then define that path for the application you're\ntrying to build.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.783203125,
          "content": "cmake_minimum_required(VERSION 3.21 FATAL_ERROR)\n\ninclude(CMakeDependentOption)\ninclude(CheckSymbolExists)\n\n# Save the current source/binary dirs if we're in a subdirectory of a larger CMake project.\nset(PROJECTM_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(PROJECTM_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nset(CMAKE_POSITION_INDEPENDENT_CODE YES)\n\n# Don't export any symbols except those explicitly exported.\nset(CMAKE_VISIBILITY_INLINES_HIDDEN YES)\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# General build options\noption(ENABLE_SYSTEM_GLM \"Enable use of system-install GLM library\" OFF)\noption(ENABLE_SYSTEM_PROJECTM_EVAL \"Enable use of a system-installed/external projectM-eval library\" ON)\noption(ENABLE_DEBUG_POSTFIX \"Add \\\"d\\\" (by default) after library names for debug builds.\" ON)\noption(ENABLE_PLAYLIST \"Enable building the playlist management library\" ON)\noption(ENABLE_BOOST_FILESYSTEM \"Force the use of boost::filesystem, even if the compiler supports C++17.\" OFF)\noption(ENABLE_SDL_UI \"Build the SDL2-based developer test UI. Ignored when building with Emscripten or for Android.\" OFF)\n\noption(BUILD_TESTING \"Build the libprojectM test suite\" OFF)\noption(BUILD_DOCS \"Build documentation\" OFF)\n\n# Enable vcpkg manifest features according to the build options set\nif(ENABLE_SYSTEM_GLM)\n    list(APPEND VCPKG_MANIFEST_FEATURES external-glm)\nendif()\nif(ENABLE_SYSTEM_PROJECTM_EVAL)\n    list(APPEND VCPKG_MANIFEST_FEATURES external-evallib)\nendif()\nif(ENABLE_BOOST_FILESYSTEM)\n    list(APPEND VCPKG_MANIFEST_FEATURES boost-filesystem)\nendif()\nif(ENABLE_SDL_UI)\n    list(APPEND VCPKG_MANIFEST_FEATURES gui)\nendif()\nif(BUILD_TESTING)\n    list(APPEND VCPKG_MANIFEST_FEATURES test)\nendif()\n\nif(ENABLE_DEBUG_POSTFIX)\n    set(CMAKE_DEBUG_POSTFIX \"d\" CACHE STRING \"Output file debug postfix. Default is \\\"d\\\".\")\nendif()\n\nproject(libprojectM\n        LANGUAGES C CXX\n        VERSION 4.1.0\n        )\n\n# The API (SO) version for the shared library. Should be incremented whenever the binary interface changes\n# in a non-backwards-compatible way, e.g. changing parameters or return values of existing functions or removing\n# functions. Adding new function should be okay if documented.\nset(PROJECTM_SO_VERSION \"4\")\n\n# Base filename of all installed libraries. Also used as package name in pkgconfig.\nset(PROJECTM_LIBRARY_BASE_OUTPUT_NAME \"projectM-${PROJECT_VERSION_MAJOR}\")\n\n# The actual (full) library version of projectM\nset(PROJECTM_LIB_VERSION \"${CMAKE_PROJECT_VERSION}\")\n\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECTM_SOURCE_DIR}/cmake\")\n\ninclude(VCSVersion)\ninclude(GNUInstallDirs)\n\nset(PROJECTM_BIN_DIR \"${CMAKE_INSTALL_BINDIR}\" CACHE STRING \"Executable installation directory, relative to the install prefix.\")\nset(PROJECTM_LIB_DIR \"${CMAKE_INSTALL_LIBDIR}\" CACHE STRING \"Library installation directory, relative to the install prefix.\")\nset(PROJECTM_INCLUDE_DIR \"${CMAKE_INSTALL_INCLUDEDIR}\" CACHE STRING \"Header installation directory, relative to the install prefix.\")\n\nif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n    set(PROJECTM_RUNTIME_DIR \"${PROJECTM_BIN_DIR}\")\nelse()\n    set(PROJECTM_RUNTIME_DIR \"${PROJECTM_LIB_DIR}\")\nendif()\n\n# Dummy file for merged static libs.\nset(PROJECTM_DUMMY_SOURCE_FILE \"${PROJECTM_BINARY_DIR}/dummy.cpp\")\nfile(TOUCH \"${PROJECTM_DUMMY_SOURCE_FILE}\")\n\nif(CMAKE_SYSTEM_NAME STREQUAL Emscripten)\n    set(ENABLE_EMSCRIPTEN ON CACHE BOOL \"Build for web with emscripten. Will also build the SDL2-based entrypoint.\" FORCE)\n    option(USE_PTHREADS \"Enable multithreading support\" OFF)\nelse()\n    set(ENABLE_EMSCRIPTEN OFF CACHE BOOL \"Build for web with emscripten. Requires emscripten toolset for building.\" FORCE)\nendif()\n\n# Compiler-/system-dependent options, including dependencies.\ncmake_dependent_option(BUILD_SHARED_LIBS \"Build and install libprojectM as a shared libraries. If OFF, builds as static libraries.\" ON \"NOT ENABLE_EMSCRIPTEN\" OFF)\ncmake_dependent_option(ENABLE_GLES \"Enable OpenGL ES support\" OFF \"NOT ENABLE_EMSCRIPTEN AND NOT CMAKE_SYSTEM_NAME STREQUAL Android\" ON)\ncmake_dependent_option(ENABLE_INSTALL \"Enable installing projectM libraries and headers.\" OFF \"NOT PROJECT_IS_TOP_LEVEL\" ON)\n\n# Experimental/unsupported features\noption(ENABLE_CXX_INTERFACE \"Enable exporting C++ symbols for ProjectM and PCM classes, not only the C API. Warning: This is not very portable.\" OFF)\n\nif(ENABLE_SYSTEM_GLM)\n    find_package(GLM REQUIRED)\nendif()\n\nif(ENABLE_SYSTEM_PROJECTM_EVAL)\n    find_package(projectM-Eval)\nendif()\n\nif(NOT BUILD_SHARED_LIBS AND CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n    # Add \"lib\" in front of static library files to allow installing both shared and static libs in the same dir.\n    set(CMAKE_STATIC_LIBRARY_PREFIX lib)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n    # Silence OpenGL API deprecation warnings on macOS.\n    add_compile_definitions(GL_SILENCE_DEPRECATION)\nendif()\n\nif(ENABLE_EMSCRIPTEN)\n    message(STATUS \"${CMAKE_C_COMPILER} on ${CMAKE_SYSTEM_NAME}\")\n    check_symbol_exists(__EMSCRIPTEN__ \"\" HAVE_EMSCRIPTEN)\n    if(NOT HAVE_EMSCRIPTEN)\n        message(FATAL_ERROR \"You are not using an emscripten compiler.\")\n    endif()\n\n    # emscripten uses different options to compile and link libraries, so we can't use find_package().\n    # Instead, specifying the required options directly to emcc is the way to go.\n    # Note: The \"SHELL:\" syntax is required to pass each argument as-is, but without quotes and CMake's de-duplication.\n    add_compile_options(\n            \"SHELL:-s USE_SDL=2\"\n            \"SHELL:-s NO_DISABLE_EXCEPTION_CATCHING\"\n            )\n\n    add_link_options(\n            \"SHELL:-s USE_SDL=2\"\n            \"SHELL:-s MIN_WEBGL_VERSION=2\"\n            \"SHELL:-s MAX_WEBGL_VERSION=2\"\n            \"SHELL:-s FULL_ES2=1\"\n            \"SHELL:-s FULL_ES3=1\"\n            \"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n            \"SHELL:-s NO_DISABLE_EXCEPTION_CATCHING\"\n            )\n\n    if(USE_PTHREADS)\n        add_compile_options(\"SHELL:-s USE_PTHREADS=1\")\n        add_link_options(\"SHELL:-s USE_PTHREADS=1\")\n    endif()\n\n    set(USE_GLES ON)\nelse()\n    if(ENABLE_SDL_UI)\n        find_package(SDL2 REQUIRED)\n\n        # Apply some fixes, as SDL2's CMake support is new and still a WiP.\n        include(SDL2Target)\n    endif()\n\n    if(ENABLE_GLES)\n        message(STATUS \"Building for OpenGL Embedded Profile\")\n        if(NOT CMAKE_SYSTEM_NAME STREQUAL Linux\n                AND NOT CMAKE_SYSTEM_NAME STREQUAL Android)\n            message(FATAL_ERROR \"OpenGL ES 3 support is currently only available for Linux platforms. You're building for ${CMAKE_SYSTEM_NAME}.\")\n        endif()\n\n        # We use a local find script for OpenGL::GLES3 until the proposed changes are merged upstream.\n        list(APPEND CMAKE_MODULE_PATH \"${PROJECTM_SOURCE_DIR}/cmake/gles\")\n        find_package(OpenGL REQUIRED COMPONENTS GLES3)\n        if(NOT TARGET OpenGL::GLES3)\n            message(FATAL_ERROR \"No suitable GLES3 library was found.\")\n        endif()\n\n        set(PROJECTM_OPENGL_LIBRARIES OpenGL::GLES3)\n        set(USE_GLES ON)\n    else()\n        message(STATUS \"Building for OpenGL Core Profile\")\n        find_package(OpenGL REQUIRED)\n        set(PROJECTM_OPENGL_LIBRARIES OpenGL::GL)\n        # GLX is required by SOIL2 on platforms with the X Window System (e.g. most Linux distributions)\n        if(TARGET OpenGL::GLX)\n            list(APPEND PROJECTM_OPENGL_LIBRARIES OpenGL::GLX)\n        endif()\n        if(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n            find_package(GLEW REQUIRED)\n            # Prefer shared, but check for static lib if shared is not available.\n            if(TARGET GLEW::glew)\n                list(APPEND PROJECTM_OPENGL_LIBRARIES GLEW::glew)\n            elseif(TARGET GLEW::glew_s)\n                list(APPEND PROJECTM_OPENGL_LIBRARIES GLEW::glew_s)\n            endif()\n        endif()\n    endif()\nendif()\n\nif(ENABLE_CXX_INTERFACE)\n    set(CMAKE_C_VISIBILITY_PRESET default)\n    set(CMAKE_CXX_VISIBILITY_PRESET default)\n    set(CMAKE_VISIBILITY_INLINES_HIDDEN OFF)\nelse()\n    set(CMAKE_C_VISIBILITY_PRESET hidden)\n    set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n    set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)\nendif()\n\nif(BUILD_DOCS)\n    find_package(Doxygen REQUIRED)\n    find_package(Sphinx REQUIRED breathe exhale)\n    set(DOXYGEN_GENERATE_HTML NO)\n    set(DOXYGEN_GENERATE_XML YES)\n    # All doxygen comments are in header files. Processing cpp files\n    # produces duplicate C++ function definitions in doxygen, resulting\n    # in various problems.\n    # See https://github.com/breathe-doc/breathe/issues/772\n    set(DOXYGEN_EXCLUDE_PATTERNS \"*.cpp\")\n\n    doxygen_add_docs(\n        projectm_doxygen\n        src\n        COMMENT \"Generate HTML documentation\")\n\n    sphinx_add_docs(\n        projectm_sphinx\n        BREATHE_PROJECTS projectm_doxygen\n        BUILDER html\n        SOURCE_DIRECTORY docs)\nendif()\n\nadd_subdirectory(vendor)\n\ninclude(features.cmake)\n\nadd_subdirectory(presets)\nadd_subdirectory(src)\n\nif(BUILD_TESTING)\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\nmessage(STATUS \"\")\nmessage(STATUS \"libprojectM v${PROJECT_VERSION}\")\nmessage(STATUS \"==============================================\")\nmessage(STATUS \"\")\nmessage(STATUS \"    prefix:                      ${CMAKE_INSTALL_PREFIX}\")\nmessage(STATUS \"    libdir:                      ${PROJECTM_LIB_DIR}\")\nmessage(STATUS \"    includedir:                  ${PROJECTM_INCLUDE_DIR}\")\nmessage(STATUS \"    bindir:                      ${PROJECTM_BIN_DIR}\")\nmessage(STATUS \"\")\nmessage(STATUS \"    compiler:                    ${CMAKE_CXX_COMPILER}\")\nmessage(STATUS \"    cflags:                      ${CMAKE_C_FLAGS}\")\nmessage(STATUS \"    cxxflags:                    ${CMAKE_CXX_FLAGS}\")\nmessage(STATUS \"    ldflags:                     ${CMAKE_SHARED_LINKER_FLAGS}\")\nmessage(STATUS \"\")\nmessage(STATUS \"Features:\")\nmessage(STATUS \"==============================================\")\nmessage(STATUS \"\")\nmessage(STATUS \"    Build shared libraries:      ${BUILD_SHARED_LIBS}\")\nif(ENABLE_BOOST_FILESYSTEM)\n    message(STATUS \"    Filesystem support:          Boost\")\n    message(STATUS \"        Boost version:           ${Boost_VERSION}\")\nelse()\n    message(STATUS \"    Filesystem support:          C++17 STL\")\nendif()\nmessage(STATUS \"    SDL2:                        ${ENABLE_SDL_UI}\")\nif(ENABLE_SDL_UI)\n    message(STATUS \"        SDL2 version:            ${SDL2_VERSION}\")\nendif()\nmessage(STATUS \"    OpenGL ES:                   ${ENABLE_GLES}\")\nmessage(STATUS \"    Emscripten:                  ${ENABLE_EMSCRIPTEN}\")\nif(CMAKE_SYSTEM_NAME STREQUAL Emscripten)\n    message(STATUS \"    - PThreads:              ${USE_PTHREADS}\")\nendif()\nmessage(STATUS \"    Use system GLM:              ${ENABLE_SYSTEM_GLM}\")\nmessage(STATUS \"    Use system projectM-eval:    ${ENABLE_SYSTEM_PROJECTM_EVAL}\")\nmessage(STATUS \"    Link UI with shared lib:     ${ENABLE_SHARED_LINKING}\")\nmessage(STATUS \"\")\nmessage(STATUS \"Targets and applications:\")\nmessage(STATUS \"==============================================\")\nmessage(STATUS \"\")\nmessage(STATUS \"    libprojectM:                 (always built)\")\nmessage(STATUS \"    Playlist library:            ${ENABLE_PLAYLIST}\")\nmessage(STATUS \"    SDL2 Test UI:                ${ENABLE_SDL_UI}\")\nmessage(STATUS \"    Tests:                       ${BUILD_TESTING}\")\nmessage(STATUS \"    Documentation:               ${BUILD_DOCS}\")\nmessage(STATUS \"\")\n\nif(ENABLE_CXX_INTERFACE)\n    message(AUTHOR_WARNING\n            \"This build is configured to export C++ symbols for ProjectM and PCM classes in the shared library.\\n\"\n            \"Using C++ STL types across library borders only works if all components were built \"\n            \"with the exact same toolchain and C++ language level, otherwise it will cause crashes.\\n\"\n            \"Only use this if you know what you're doing. You have been warned!\"\n            )\nendif()\n\n# Create CPack configuration\nset(CPACK_PACKAGE_NAME \"projectM\")\nset(CPACK_VERBATIM_VARIABLES YES)\ninclude(CPack)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.849609375,
          "content": "/**\n* projectM -- Milkdrop-esque visualisation SDK\n* Copyright (C)2003-2024 projectM Team\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n* See 'LICENSE.txt' included within this release\n*\n*/\n\n"
        },
        {
          "name": "EMSCRIPTEN.md",
          "type": "blob",
          "size": 2.234375,
          "content": "# Using libprojectM in Emscripten\n\nprojectM supports OpenGL ES rendering, and can be compiled into WebAssembly for use in browsers. WebGL is similar to\nOpenGL ES, but not identical, so a few additional considerations apply to get projectM running with Emscripten.\n\n## Additional Build Settings\n\nA few additional build settings will be required when building an Emscripten wrapper. Pass these flags/parameterrs to\nthe Emscripten linker:\n\n- `-sUSE_SDL=2`: It is highly recommended to use Emscripten's built-in SDL2 port to set up the rendering context. This\n  flag will link the appropriate library.\n- `-sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2`: Forces the use of WebGL 2, which is required for OpenGL ES 3 emulation.\n- `-sFULL_ES2=1 -sFULL_ES3=1`: Enables full emulation support for both OpenGL ES 2.0 and 3.0 variants.\n- `-sALLOW_MEMORY_GROWTH=1`: Allows allocating additional memory if necessary. This may be required to load additional\n  textures etc. in projectM.\n\n## Initializing Emscripten's OpenGL Context\n\nIn addition to the above linker flags, some additional initialization steps must be performed to set up the OpenGL\nrendering context for projectM. Specifically, the `OES_texture_float` WenGL extension must be loaded explicitly to\nsupport the required texture format for the motion vector grid. The following code template can be used to set up a\nproper SDL2/WebGL context for projectM:\n\n```c\n\n#include <emscripten.h>\n#include <emscripten/html5_webgl.h>\n\n#include <GL/gl.h>\n\n#include <SDL.h>\n\nint main(void)\n{\n    // Init SDL's video and audio subsystems\n    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);\n\n    // Create the SDL window (will be tied to the Emscripten HTML5 canvas)\n    SDL_window* window = NULL;\n    SDL_renderer* renderer = NULL;\n    SDL_CreateWindowAndRenderer(1024, 768, SDL_WINDOW_OPENGL, &window, &renderer);\n    if (window == NULL || renderer == NULL)\n    {\n        fprintf(stderr, \"Failed to create SDL renderer: %s\\n\", SDL_GetError());\n        return 1;\n    }\n\n    // Enable floating-point texture support for motion vector grid.\n    auto webGlContext = emscripten_webgl_get_current_context();\n    emscripten_webgl_enable_extension(webGlContext, \"OES_texture_float\");\n\n    // Initialize projectM and put all other stuff below.\n    \n    return 0;\n}\n\n```"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 24.2587890625,
          "content": "\t\t  GNU LESSER GENERAL PUBLIC LICENSE\r\n\t\t       Version 2.1, February 1999\r\n\r\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\r\n     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n Everyone is permitted to copy and distribute verbatim copies\r\n of this license document, but changing it is not allowed.\r\n\r\n[This is the first released version of the Lesser GPL.  It also counts\r\n as the successor of the GNU Library Public License, version 2, hence\r\n the version number 2.1.]\r\n\r\n\t\t\t    Preamble\r\n\r\n  The licenses for most software are designed to take away your\r\nfreedom to share and change it.  By contrast, the GNU General Public\r\nLicenses are intended to guarantee your freedom to share and change\r\nfree software--to make sure the software is free for all its users.\r\n\r\n  This license, the Lesser General Public License, applies to some\r\nspecially designated software packages--typically libraries--of the\r\nFree Software Foundation and other authors who decide to use it.  You\r\ncan use it too, but we suggest you first think carefully about whether\r\nthis license or the ordinary General Public License is the better\r\nstrategy to use in any particular case, based on the explanations below.\r\n\r\n  When we speak of free software, we are referring to freedom of use,\r\nnot price.  Our General Public Licenses are designed to make sure that\r\nyou have the freedom to distribute copies of free software (and charge\r\nfor this service if you wish); that you receive source code or can get\r\nit if you want it; that you can change the software and use pieces of\r\nit in new free programs; and that you are informed that you can do\r\nthese things.\r\n\r\n  To protect your rights, we need to make restrictions that forbid\r\ndistributors to deny you these rights or to ask you to surrender these\r\nrights.  These restrictions translate to certain responsibilities for\r\nyou if you distribute copies of the library or if you modify it.\r\n\r\n  For example, if you distribute copies of the library, whether gratis\r\nor for a fee, you must give the recipients all the rights that we gave\r\nyou.  You must make sure that they, too, receive or can get the source\r\ncode.  If you link other code with the library, you must provide\r\ncomplete object files to the recipients, so that they can relink them\r\nwith the library after making changes to the library and recompiling\r\nit.  And you must show them these terms so they know their rights.\r\n\r\n  We protect your rights with a two-step method: (1) we copyright the\r\nlibrary, and (2) we offer you this license, which gives you legal\r\npermission to copy, distribute and/or modify the library.\r\n\r\n  To protect each distributor, we want to make it very clear that\r\nthere is no warranty for the free library.  Also, if the library is\r\nmodified by someone else and passed on, the recipients should know\r\nthat what they have is not the original version, so that the original\r\nauthor's reputation will not be affected by problems that might be\r\nintroduced by others.\r\n\r\n  Finally, software patents pose a constant threat to the existence of\r\nany free program.  We wish to make sure that a company cannot\r\neffectively restrict the users of a free program by obtaining a\r\nrestrictive license from a patent holder.  Therefore, we insist that\r\nany patent license obtained for a version of the library must be\r\nconsistent with the full freedom of use specified in this license.\r\n\r\n  Most GNU software, including some libraries, is covered by the\r\nordinary GNU General Public License.  This license, the GNU Lesser\r\nGeneral Public License, applies to certain designated libraries, and\r\nis quite different from the ordinary General Public License.  We use\r\nthis license for certain libraries in order to permit linking those\r\nlibraries into non-free programs.\r\n\r\n  When a program is linked with a library, whether statically or using\r\na shared library, the combination of the two is legally speaking a\r\ncombined work, a derivative of the original library.  The ordinary\r\nGeneral Public License therefore permits such linking only if the\r\nentire combination fits its criteria of freedom.  The Lesser General\r\nPublic License permits more lax criteria for linking other code with\r\nthe library.\r\n\r\n  We call this license the \"Lesser\" General Public License because it\r\ndoes Less to protect the user's freedom than the ordinary General\r\nPublic License.  It also provides other free software developers Less\r\nof an advantage over competing non-free programs.  These disadvantages\r\nare the reason we use the ordinary General Public License for many\r\nlibraries.  However, the Lesser license provides advantages in certain\r\nspecial circumstances.\r\n\r\n  For example, on rare occasions, there may be a special need to\r\nencourage the widest possible use of a certain library, so that it becomes\r\na de-facto standard.  To achieve this, non-free programs must be\r\nallowed to use the library.  A more frequent case is that a free\r\nlibrary does the same job as widely used non-free libraries.  In this\r\ncase, there is little to gain by limiting the free library to free\r\nsoftware only, so we use the Lesser General Public License.\r\n\r\n  In other cases, permission to use a particular library in non-free\r\nprograms enables a greater number of people to use a large body of\r\nfree software.  For example, permission to use the GNU C Library in\r\nnon-free programs enables many more people to use the whole GNU\r\noperating system, as well as its variant, the GNU/Linux operating\r\nsystem.\r\n\r\n  Although the Lesser General Public License is Less protective of the\r\nusers' freedom, it does ensure that the user of a program that is\r\nlinked with the Library has the freedom and the wherewithal to run\r\nthat program using a modified version of the Library.\r\n\r\n  The precise terms and conditions for copying, distribution and\r\nmodification follow.  Pay close attention to the difference between a\r\n\"work based on the library\" and a \"work that uses the library\".  The\r\nformer contains code derived from the library, whereas the latter must\r\nbe combined with the library in order to run.\r\n\r\n\t\t  GNU LESSER GENERAL PUBLIC LICENSE\r\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\r\n\r\n  0. This License Agreement applies to any software library or other\r\nprogram which contains a notice placed by the copyright holder or\r\nother authorized party saying it may be distributed under the terms of\r\nthis Lesser General Public License (also called \"this License\").\r\nEach licensee is addressed as \"you\".\r\n\r\n  A \"library\" means a collection of software functions and/or data\r\nprepared so as to be conveniently linked with application programs\r\n(which use some of those functions and data) to form executables.\r\n\r\n  The \"Library\", below, refers to any such software library or work\r\nwhich has been distributed under these terms.  A \"work based on the\r\nLibrary\" means either the Library or any derivative work under\r\ncopyright law: that is to say, a work containing the Library or a\r\nportion of it, either verbatim or with modifications and/or translated\r\nstraightforwardly into another language.  (Hereinafter, translation is\r\nincluded without limitation in the term \"modification\".)\r\n\r\n  \"Source code\" for a work means the preferred form of the work for\r\nmaking modifications to it.  For a library, complete source code means\r\nall the source code for all modules it contains, plus any associated\r\ninterface definition files, plus the scripts used to control compilation\r\nand installation of the library.\r\n\r\n  Activities other than copying, distribution and modification are not\r\ncovered by this License; they are outside its scope.  The act of\r\nrunning a program using the Library is not restricted, and output from\r\nsuch a program is covered only if its contents constitute a work based\r\non the Library (independent of the use of the Library in a tool for\r\nwriting it).  Whether that is true depends on what the Library does\r\nand what the program that uses the Library does.\r\n\r\n  1. You may copy and distribute verbatim copies of the Library's\r\ncomplete source code as you receive it, in any medium, provided that\r\nyou conspicuously and appropriately publish on each copy an\r\nappropriate copyright notice and disclaimer of warranty; keep intact\r\nall the notices that refer to this License and to the absence of any\r\nwarranty; and distribute a copy of this License along with the\r\nLibrary.\r\n\r\n  You may charge a fee for the physical act of transferring a copy,\r\nand you may at your option offer warranty protection in exchange for a\r\nfee.\r\n\r\n  2. You may modify your copy or copies of the Library or any portion\r\nof it, thus forming a work based on the Library, and copy and\r\ndistribute such modifications or work under the terms of Section 1\r\nabove, provided that you also meet all of these conditions:\r\n\r\n    a) The modified work must itself be a software library.\r\n\r\n    b) You must cause the files modified to carry prominent notices\r\n    stating that you changed the files and the date of any change.\r\n\r\n    c) You must cause the whole of the work to be licensed at no\r\n    charge to all third parties under the terms of this License.\r\n\r\n    d) If a facility in the modified Library refers to a function or a\r\n    table of data to be supplied by an application program that uses\r\n    the facility, other than as an argument passed when the facility\r\n    is invoked, then you must make a good faith effort to ensure that,\r\n    in the event an application does not supply such function or\r\n    table, the facility still operates, and performs whatever part of\r\n    its purpose remains meaningful.\r\n\r\n    (For example, a function in a library to compute square roots has\r\n    a purpose that is entirely well-defined independent of the\r\n    application.  Therefore, Subsection 2d requires that any\r\n    application-supplied function or table used by this function must\r\n    be optional: if the application does not supply it, the square\r\n    root function must still compute square roots.)\r\n\r\nThese requirements apply to the modified work as a whole.  If\r\nidentifiable sections of that work are not derived from the Library,\r\nand can be reasonably considered independent and separate works in\r\nthemselves, then this License, and its terms, do not apply to those\r\nsections when you distribute them as separate works.  But when you\r\ndistribute the same sections as part of a whole which is a work based\r\non the Library, the distribution of the whole must be on the terms of\r\nthis License, whose permissions for other licensees extend to the\r\nentire whole, and thus to each and every part regardless of who wrote\r\nit.\r\n\r\nThus, it is not the intent of this section to claim rights or contest\r\nyour rights to work written entirely by you; rather, the intent is to\r\nexercise the right to control the distribution of derivative or\r\ncollective works based on the Library.\r\n\r\nIn addition, mere aggregation of another work not based on the Library\r\nwith the Library (or with a work based on the Library) on a volume of\r\na storage or distribution medium does not bring the other work under\r\nthe scope of this License.\r\n\r\n  3. You may opt to apply the terms of the ordinary GNU General Public\r\nLicense instead of this License to a given copy of the Library.  To do\r\nthis, you must alter all the notices that refer to this License, so\r\nthat they refer to the ordinary GNU General Public License, version 2,\r\ninstead of to this License.  (If a newer version than version 2 of the\r\nordinary GNU General Public License has appeared, then you can specify\r\nthat version instead if you wish.)  Do not make any other change in\r\nthese notices.\r\n\r\n  Once this change is made in a given copy, it is irreversible for\r\nthat copy, so the ordinary GNU General Public License applies to all\r\nsubsequent copies and derivative works made from that copy.\r\n\r\n  This option is useful when you wish to copy part of the code of\r\nthe Library into a program that is not a library.\r\n\r\n  4. You may copy and distribute the Library (or a portion or\r\nderivative of it, under Section 2) in object code or executable form\r\nunder the terms of Sections 1 and 2 above provided that you accompany\r\nit with the complete corresponding machine-readable source code, which\r\nmust be distributed under the terms of Sections 1 and 2 above on a\r\nmedium customarily used for software interchange.\r\n\r\n  If distribution of object code is made by offering access to copy\r\nfrom a designated place, then offering equivalent access to copy the\r\nsource code from the same place satisfies the requirement to\r\ndistribute the source code, even though third parties are not\r\ncompelled to copy the source along with the object code.\r\n\r\n  5. A program that contains no derivative of any portion of the\r\nLibrary, but is designed to work with the Library by being compiled or\r\nlinked with it, is called a \"work that uses the Library\".  Such a\r\nwork, in isolation, is not a derivative work of the Library, and\r\ntherefore falls outside the scope of this License.\r\n\r\n  However, linking a \"work that uses the Library\" with the Library\r\ncreates an executable that is a derivative of the Library (because it\r\ncontains portions of the Library), rather than a \"work that uses the\r\nlibrary\".  The executable is therefore covered by this License.\r\nSection 6 states terms for distribution of such executables.\r\n\r\n  When a \"work that uses the Library\" uses material from a header file\r\nthat is part of the Library, the object code for the work may be a\r\nderivative work of the Library even though the source code is not.\r\nWhether this is true is especially significant if the work can be\r\nlinked without the Library, or if the work is itself a library.  The\r\nthreshold for this to be true is not precisely defined by law.\r\n\r\n  If such an object file uses only numerical parameters, data\r\nstructure layouts and accessors, and small macros and small inline\r\nfunctions (ten lines or less in length), then the use of the object\r\nfile is unrestricted, regardless of whether it is legally a derivative\r\nwork.  (Executables containing this object code plus portions of the\r\nLibrary will still fall under Section 6.)\r\n\r\n  Otherwise, if the work is a derivative of the Library, you may\r\ndistribute the object code for the work under the terms of Section 6.\r\nAny executables containing that work also fall under Section 6,\r\nwhether or not they are linked directly with the Library itself.\r\n\r\n  6. As an exception to the Sections above, you may also combine or\r\nlink a \"work that uses the Library\" with the Library to produce a\r\nwork containing portions of the Library, and distribute that work\r\nunder terms of your choice, provided that the terms permit\r\nmodification of the work for the customer's own use and reverse\r\nengineering for debugging such modifications.\r\n\r\n  You must give prominent notice with each copy of the work that the\r\nLibrary is used in it and that the Library and its use are covered by\r\nthis License.  You must supply a copy of this License.  If the work\r\nduring execution displays copyright notices, you must include the\r\ncopyright notice for the Library among them, as well as a reference\r\ndirecting the user to the copy of this License.  Also, you must do one\r\nof these things:\r\n\r\n    a) Accompany the work with the complete corresponding\r\n    machine-readable source code for the Library including whatever\r\n    changes were used in the work (which must be distributed under\r\n    Sections 1 and 2 above); and, if the work is an executable linked\r\n    with the Library, with the complete machine-readable \"work that\r\n    uses the Library\", as object code and/or source code, so that the\r\n    user can modify the Library and then relink to produce a modified\r\n    executable containing the modified Library.  (It is understood\r\n    that the user who changes the contents of definitions files in the\r\n    Library will not necessarily be able to recompile the application\r\n    to use the modified definitions.)\r\n\r\n    b) Use a suitable shared library mechanism for linking with the\r\n    Library.  A suitable mechanism is one that (1) uses at run time a\r\n    copy of the library already present on the user's computer system,\r\n    rather than copying library functions into the executable, and (2)\r\n    will operate properly with a modified version of the library, if\r\n    the user installs one, as long as the modified version is\r\n    interface-compatible with the version that the work was made with.\r\n\r\n    c) Accompany the work with a written offer, valid for at\r\n    least three years, to give the same user the materials\r\n    specified in Subsection 6a, above, for a charge no more\r\n    than the cost of performing this distribution.\r\n\r\n    d) If distribution of the work is made by offering access to copy\r\n    from a designated place, offer equivalent access to copy the above\r\n    specified materials from the same place.\r\n\r\n    e) Verify that the user has already received a copy of these\r\n    materials or that you have already sent this user a copy.\r\n\r\n  For an executable, the required form of the \"work that uses the\r\nLibrary\" must include any data and utility programs needed for\r\nreproducing the executable from it.  However, as a special exception,\r\nthe materials to be distributed need not include anything that is\r\nnormally distributed (in either source or binary form) with the major\r\ncomponents (compiler, kernel, and so on) of the operating system on\r\nwhich the executable runs, unless that component itself accompanies\r\nthe executable.\r\n\r\n  It may happen that this requirement contradicts the license\r\nrestrictions of other proprietary libraries that do not normally\r\naccompany the operating system.  Such a contradiction means you cannot\r\nuse both them and the Library together in an executable that you\r\ndistribute.\r\n\r\n  7. You may place library facilities that are a work based on the\r\nLibrary side-by-side in a single library together with other library\r\nfacilities not covered by this License, and distribute such a combined\r\nlibrary, provided that the separate distribution of the work based on\r\nthe Library and of the other library facilities is otherwise\r\npermitted, and provided that you do these two things:\r\n\r\n    a) Accompany the combined library with a copy of the same work\r\n    based on the Library, uncombined with any other library\r\n    facilities.  This must be distributed under the terms of the\r\n    Sections above.\r\n\r\n    b) Give prominent notice with the combined library of the fact\r\n    that part of it is a work based on the Library, and explaining\r\n    where to find the accompanying uncombined form of the same work.\r\n\r\n  8. You may not copy, modify, sublicense, link with, or distribute\r\nthe Library except as expressly provided under this License.  Any\r\nattempt otherwise to copy, modify, sublicense, link with, or\r\ndistribute the Library is void, and will automatically terminate your\r\nrights under this License.  However, parties who have received copies,\r\nor rights, from you under this License will not have their licenses\r\nterminated so long as such parties remain in full compliance.\r\n\r\n  9. You are not required to accept this License, since you have not\r\nsigned it.  However, nothing else grants you permission to modify or\r\ndistribute the Library or its derivative works.  These actions are\r\nprohibited by law if you do not accept this License.  Therefore, by\r\nmodifying or distributing the Library (or any work based on the\r\nLibrary), you indicate your acceptance of this License to do so, and\r\nall its terms and conditions for copying, distributing or modifying\r\nthe Library or works based on it.\r\n\r\n  10. Each time you redistribute the Library (or any work based on the\r\nLibrary), the recipient automatically receives a license from the\r\noriginal licensor to copy, distribute, link with or modify the Library\r\nsubject to these terms and conditions.  You may not impose any further\r\nrestrictions on the recipients' exercise of the rights granted herein.\r\nYou are not responsible for enforcing compliance by third parties with\r\nthis License.\r\n\r\n  11. If, as a consequence of a court judgment or allegation of patent\r\ninfringement or for any other reason (not limited to patent issues),\r\nconditions are imposed on you (whether by court order, agreement or\r\notherwise) that contradict the conditions of this License, they do not\r\nexcuse you from the conditions of this License.  If you cannot\r\ndistribute so as to satisfy simultaneously your obligations under this\r\nLicense and any other pertinent obligations, then as a consequence you\r\nmay not distribute the Library at all.  For example, if a patent\r\nlicense would not permit royalty-free redistribution of the Library by\r\nall those who receive copies directly or indirectly through you, then\r\nthe only way you could satisfy both it and this License would be to\r\nrefrain entirely from distribution of the Library.\r\n\r\nIf any portion of this section is held invalid or unenforceable under any\r\nparticular circumstance, the balance of the section is intended to apply,\r\nand the section as a whole is intended to apply in other circumstances.\r\n\r\nIt is not the purpose of this section to induce you to infringe any\r\npatents or other property right claims or to contest validity of any\r\nsuch claims; this section has the sole purpose of protecting the\r\nintegrity of the free software distribution system which is\r\nimplemented by public license practices.  Many people have made\r\ngenerous contributions to the wide range of software distributed\r\nthrough that system in reliance on consistent application of that\r\nsystem; it is up to the author/donor to decide if he or she is willing\r\nto distribute software through any other system and a licensee cannot\r\nimpose that choice.\r\n\r\nThis section is intended to make thoroughly clear what is believed to\r\nbe a consequence of the rest of this License.\r\n\r\n  12. If the distribution and/or use of the Library is restricted in\r\ncertain countries either by patents or by copyrighted interfaces, the\r\noriginal copyright holder who places the Library under this License may add\r\nan explicit geographical distribution limitation excluding those countries,\r\nso that distribution is permitted only in or among countries not thus\r\nexcluded.  In such case, this License incorporates the limitation as if\r\nwritten in the body of this License.\r\n\r\n  13. The Free Software Foundation may publish revised and/or new\r\nversions of the Lesser General Public License from time to time.\r\nSuch new versions will be similar in spirit to the present version,\r\nbut may differ in detail to address new problems or concerns.\r\n\r\nEach version is given a distinguishing version number.  If the Library\r\nspecifies a version number of this License which applies to it and\r\n\"any later version\", you have the option of following the terms and\r\nconditions either of that version or of any later version published by\r\nthe Free Software Foundation.  If the Library does not specify a\r\nlicense version number, you may choose any version ever published by\r\nthe Free Software Foundation.\r\n\r\n  14. If you wish to incorporate parts of the Library into other free\r\nprograms whose distribution conditions are incompatible with these,\r\nwrite to the author to ask for permission.  For software which is\r\ncopyrighted by the Free Software Foundation, write to the Free\r\nSoftware Foundation; we sometimes make exceptions for this.  Our\r\ndecision will be guided by the two goals of preserving the free status\r\nof all derivatives of our free software and of promoting the sharing\r\nand reuse of software generally.\r\n\r\n\t\t\t    NO WARRANTY\r\n\r\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\r\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\r\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\r\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\r\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\r\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\r\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n\r\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\r\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\r\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\r\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\r\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\r\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\r\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\r\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\r\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\r\nDAMAGES.\r\n\r\n\t\t     END OF TERMS AND CONDITIONS\r\n\r\n\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.69140625,
          "content": "[![Windows Build Status](https://github.com/projectM-visualizer/projectm/actions/workflows/build_windows.yml/badge.svg?branch=master)](https://github.com/projectM-visualizer/projectm/actions/workflows/build_windows.yml)\n[![Linux Build Status](https://github.com/projectM-visualizer/projectm/actions/workflows/build_linux.yml/badge.svg?branch=master)](https://github.com/projectM-visualizer/projectm/actions/workflows/build_linux.yml)\n[![macOS Build Status](https://github.com/projectM-visualizer/projectm/actions/workflows/build_osx.yml/badge.svg?branch=master)](https://github.com/projectM-visualizer/projectm/actions/workflows/build_osx.yml)\n[![Emscripten Build Status](https://github.com/projectM-visualizer/projectm/actions/workflows/build_emscripten.yml/badge.svg?branch=master)](https://github.com/projectM-visualizer/projectm/actions/workflows/build_emscripten.yml)\n[![Android Build Status](https://github.com/projectM-visualizer/projectm/actions/workflows/build_android.yml/badge.svg?branch=master)](https://github.com/projectM-visualizer/projectm/actions/workflows/build_android.yml)\n\n![Discord Shield](https://discordapp.com/api/guilds/737206408482914387/widget.png?style=shield) [Chat with us on Discord](https://discord.gg/mMrxAqaa3W)\n\n![Logo](https://github.com/projectM-visualizer/projectm/raw/master/docs/web/logo.png)\n\n## projectM - The most advanced open-source music visualizer\n\n**Experience psychedelic and mesmerizing visuals by transforming music into equations that render into a limitless array\nof user-contributed visualizations.**\n\nprojectM is an open-source project that reimplements the\nesteemed [Winamp Milkdrop](https://en.wikipedia.org/wiki/MilkDrop) by Geiss in a more modern, cross-platform reusable\nlibrary.\n\nIts purpose in life is to read an audio input and to produce mesmerizing visuals, detecting tempo, and rendering\nadvanced equations into a limitless array of user-contributed visualizations.\n\n### Important: This repository only contains libprojectM for use in application development!\n\nThis repository now only contains the projectM shared/static library. All frontends, plug-ins and other tools were\noutsourced into separate repositories. If you're not a developer and just look for a download to run projectM visuals on\nyour machine or device, please use one of the links listed below. The releases section in this repository only contains\nsource-code and binary releases of the projectM development libraries and headers, which aren't useful for end users.\n\n### End-User Applications\n\n**Important**: projectM is currently undergoing heavy development, so the available end-user frontends are either\noutdated or unavailable. We've released a few development previews, which are not feature-complete and may have bugs. As\nsoon as we've finished the current modernization of libprojectM, we'll release new and tested versions of most of the\nfrontends listed below, while we may remove or replace some of those which are no longer maintained by their original\ndevelopers.\n\n##### Windows\n\n- Standalone (currently only available as\n  a [development preview](https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-windows-pre1))\n- [Steam](https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/) (Same as standalone development\n  preview)\n- [Windows Store](https://www.microsoft.com/store/apps/9NDCVH0VCWJN) (Old 3.1.12 release )\n\n#### macOS\n\n- Standalone (currently only available as\n  a [development preview](https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-macos-pre1))\n- [Steam](https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/) (Old 3.1.12 release)\n- Music.app Plugin  (currently only available as an\n  _unsigned_ [development preview](https://github.com/kblaschke/frontend-music-plug-in/releases/tag/v3.0-pre1))\n- [Brew](https://formulae.brew.sh/formula/projectm) (Old 3.1.12 release)\n\n#### Linux\n\n- Standalone (currently only available as\n  a [development preview](https://github.com/kblaschke/frontend-sdl2/releases/tag/2.0-linux-pre1) for Ubuntu 22.04 and\n  compatible distributions)\n- [Steam](https://store.steampowered.com/app/1358800/projectM_Music_Visualizer/) (Same as standalone development\n  preview)\n\nOr check your distribution's package manager for a binary release. If it is outdated, please contact the package\nmaintainer, as the projectM development team does not maintain any of the distribution-specific packages.\n\n#### Android\n\n- [Google Play](https://play.google.com/store/apps/details?id=com.psperl.prjM)\n\n**Note**: Both the free and paid apps plus the Android TV app are _not_ created or supported by the projectM developers!\nIf you have technical troubles or other inquiries, please contact the app author via the means provided in the Play\nStore. Any bug reports in the projectM issue tracker regarding the apps will be closed immediately.\n\n#### Xbox / Windows Phone\n\n- [Windows Store](https://www.microsoft.com/store/apps/9NDCVH0VCWJN) (Old 3.1.12 release)\n\n#### Other\n\nSource code and other resources, mostly aimed at developers.\n\n- [Library source code](https://github.com/projectM-visualizer/projectm/) (this repository)\n- [Qt5](https://www.qt.io/) based [PulseAudio](https://www.freedesktop.org/wiki/Software/PulseAudio/) and JACK desktop\n  apps [as source code for Linux](https://github.com/projectM-visualizer/frontend-qt), currently broken and needs some\n  updating (help wanted!).\n- [ALSA, XMMS, Winamp, JACK](https://sourceforge.net/projects/projectm/files/) (legacy 2.x sources for historic\n  purposes, unmaintained since 2012)\n\n### Discord chat\n\n[Chat with us on Discord!](https://discord.gg/mMrxAqaa3W)\n\n### Demo Video\n\n[![](http://img.youtube.com/vi/2dSam8zwSFw/0.jpg)](http://www.youtube.com/watch?v=2dSam8zwSFw \"Demo\")\n\n### Presets\n\nThe preset files define the visualizations via pixel shaders and Milkdrop-style equations and parameters.\n\nThe projectM library does not ship with any presets. The frontends come with varying preset packs which can be found in\nseparate repositories in the projectM repository list:\n\n- [Base Milkdrop texture pack](https://github.com/projectM-visualizer/presets-milkdrop-texture-pack) - Recommended for\n  use with _any_ preset pack!\n- [Cream of the Crop Pack](https://github.com/projectM-visualizer/presets-cream-of-the-crop) - A collection of about 10K\n  presets compiled by Jason Fletcher. Currently, projectM's default preset pack.\n- [Classic projectM Presets](https://github.com/projectM-visualizer/presets-projectm-classic) - A bit over 4K presets\n  shipped with previous versions of projectM.\n- [Milkdrop 2 Presets](https://github.com/projectM-visualizer/presets-milkdrop-original) - The original preset\n  collection shipped with Milkdrop and Winamp.\n- [En D Presets](https://github.com/projectM-visualizer/presets-en-d) - About 50 presets created by \"En D\".\n\nIncluded with projectM are the bltc201, Milkdrop 1 and 2, projectM, tryptonaut and yin collections. You can grab these\npresets [here](http://spiegelmc.com/pub/projectm_presets.zip).\n\nYou can also download an enormous 41,000 preset pack of\npresets [here](https://mischa.lol/projectM/presets_community.zip) (123MB zipped).\n\n### Also Featured In\n\n[![Kodi](docs/web/kodi.png) Kodi (formerly XBMC)](https://kodi.tv/)\n\n[![Helix](docs/web/helix.jpg) Helix](https://web.archive.org/web/20180628174410/http://ghostfiregames.com/helixhome.html)\n\n[![Silverjuke](docs/web/silverjuke.png) Silverjuke (FOSS Jukebox)](https://www.silverjuke.net)\n\n[![VLC Media Player](docs/web/vlc.png) VLC Media Player (AKA VideoLAN Client)](https://www.videolan.org/vlc/)\n\nReminder: These are all third-party integrations of libprojectM and not developed or supported by the projectM\ndevelopment team. Please report bugs in those applications to their respective developers.\n\n---\n\n## Screenshots\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.31.20%20AM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.33.50%20AM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.14.41%20PM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.13.53%20PM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-07-18%20at%202.15.36%20PM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-08-16%20at%204.49.32%20PM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-08-16%20at%204.50.37%20PM.png)\n\n![Screenshot](docs/web/projectM_screenshots/Screen%20Shot%202014-08-25%20at%2012.31.07%20AM.png)\n\n---\n\n## Architecture\n\n- [Article](https://lwn.net/Articles/750152/)\n\n# Building from source\n\nSee [BUILDING.md](BUILDING.md) and\nthe [developer documentation in the wiki](https://github.com/projectM-visualizer/projectm/wiki/Building-libprojectM).\n\n# Using the library\n\nAt its core projectM is a library, [libprojectM](src/libprojectM). This library is responsible for parsing presets,\nanalyzing audio PCM data with beat detection and FFT, applying the preset to the audio feature data and rendering the\nresulting output with OpenGL. It can render to a dedicated OpenGL context or a texture.\n\nTo get started using projectM in your own projects, please go to the wiki and read\nthe [developer documentation](https://github.com/projectM-visualizer/projectm/wiki#integrating-projectm-into-applications)\navailable there.\n\nThere are some open-source applications that make use of libprojectM which can be found in\nthe [projectM organization's repositories](https://github.com/projectM-visualizer) and elsewhere.\n\n---\n\n# Todo\n\n- Improve projectM using the recently-released Milkdrop source (WIP).\n- Update the various implementations using libprojectM.\n- Update downstream projects with new versions.\n\n---\n\n## Help\n\nReport issues on GitHub in the respective repositories:\n\n- [Rendering issues, crashes or the libprojectM core/API](https://github.com/projectM-visualizer/projectm/issues)\n- [Standalone SDL app](https://github.com/projectM-visualizer/frontend-sdl2/issues) (including the Steam release)\n- [Windows Store App](https://github.com/projectM-visualizer/frontend-uwp/issues)\n- [Apple Music plug-in](https://github.com/projectM-visualizer/frontend-music-plug-in/issues)\n- Issues regarding the **projectM Android apps in the Play Store**, please contact the app author via the Play Store. We\n  cannot help with any problems or requests.\n\nIf unsure, post your issue in the\nmain [libprojectM issue tracker](https://github.com/projectM-visualizer/projectm/issues).\nPlease always check any existing issues if your problem has already been posted by another user. If so, add your logs\nand findings to the existing issue instead of opening a new ticket.\n\n## Get in contact with us\n\n[Chat with us on Discord.](https://discord.gg/mMrxAqaa3W)\n\n## Contribute to projectM\n\nIf you would like to help improve this project, either with documentation, code, porting, hardware or anything else\nplease let us know! We gladly accept pull requests and issues.\n\nBefore starting to write code, please take your time to read\nthe [contribution guidelines](https://github.com/projectM-visualizer/projectm/wiki#contributing-to-projectm) in our\nwiki.\n\n## Package Maintainers\n\nIf you maintain packages of libprojectM, we are happy to work with you! Please note well:\n\n- The main focus of this project is libprojectM. It's a library that only really depends on OpenGL. The other\n  applications are more like examples and demos.\n- Many of the frontend applications are likely outdated and of less utility than the core library. If you desire to use\n  them or depend on them, please file an issue in the respective repository so we can help update them.\n- The \"canonical\" application for actually viewing the visualizations is\n  now [projectM-SDL](https://github.com/projectM-visualizer/frontend-sdl2), based on libSDL2 because it supports audio\n  input and is completely cross-platform.\n- If you like Rust, there is a [SDL3 rust frontend](https://github.com/projectM-visualizer/frontend-sdl-rust) in the works looking for contributors.\n- This is an open source project! If you don't like something, feel free to contribute improvements!\n- Yes, you are looking at the official version. This is not a fork.\n\n## Authors\n\n[Authors](https://github.com/projectM-visualizer/projectm/raw/master/AUTHORS.txt)\n\n## License\n\nThe core projectM library is released under\nthe [GNU Lesser General Public License 2.1](https://github.com/projectM-visualizer/projectm/raw/master/LICENSE.txt) to\nkeep any changes open-sourced, but also enable the use of libprojectM in closed-source applications (as a shared\nlibrary) as long as the license terms are adhered to. The up- and downstream projects may use different licenses -\nplease check all parts of the software to be compatible with your specific project if you plan an integration.\n\n## Wiki\n\nMore information for developers is available from\nthe [projectM Wiki](https://github.com/projectM-visualizer/projectm/wiki).\n"
        },
        {
          "name": "background.png",
          "type": "blob",
          "size": 9076.267578125,
          "content": ""
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.h.cmake.in",
          "type": "blob",
          "size": 0.4140625,
          "content": "#pragma once\n\n/* Define USE_GLES */\n#cmakedefine USE_GLES\n\n/* Define PROJECTM_USE_THREADS */\n#cmakedefine01 PROJECTM_USE_THREADS\n\n/* Version number of package */\n#define VERSION \"@libprojectM_VERSION@\"\n\n/* Boost or std filesystem API support */\n#cmakedefine PROJECTM_FILESYSTEM_USE_BOOST\n#define PROJECTM_FILESYSTEM_NAMESPACE @PROJECTM_FILESYSTEM_NAMESPACE@\n#define PROJECTM_FILESYSTEM_INCLUDE @PROJECTM_FILESYSTEM_INCLUDE@\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "features.cmake",
          "type": "blob",
          "size": 1.0810546875,
          "content": "# Tests for various platform features and generates a header with the appropriate defines.\ninclude(EnableCFlagsIfSupported)\n\nadd_compile_definitions(\n        $<$<CONFIG:DEBUG>:DEBUG>\n        )\n\nif(NOT MSVC)\n    enable_cflags_if_supported(\n            -Wpedantic\n            -Wextra\n            -Wall\n            -Wchar-subscripts\n            -Wformat-security\n            -Wpointer-arith\n            -Wshadow\n            -Wsign-compare\n            -Wtype-limits\n    )\nelse()\n    enable_cflags_if_supported(\n            /EHsc   # Exception handling support\n            /GR     # RTTI, for dynamic_cast\n            /W4\n    )\nendif()\n\n# Adds fallback support to boost if std::filesystem is unavailable.\ninclude(FilesystemSupport)\n\n# Create global configuration header\nfile(MAKE_DIRECTORY \"${PROJECTM_BINARY_DIR}/include\")\nconfigure_file(config.h.cmake.in \"${PROJECTM_BINARY_DIR}/include/config.h\")\ninclude_directories(\"${PROJECTM_BINARY_DIR}/include\")\n\n# Force-include the file in all targets\nif(MSVC)\n    add_definitions(/FI\"config.h\")\nelse()\n    # GCC or Clang\n    add_definitions(-include config.h)\nendif()\n"
        },
        {
          "name": "policy.txt",
          "type": "blob",
          "size": 0.125,
          "content": "This software system does not access, collect, or transmit personal information (data that could be used to identify a person).\n"
        },
        {
          "name": "presets",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg-configuration.json",
          "type": "blob",
          "size": 0.162109375,
          "content": "{\n  \"default-registry\": {\n    \"kind\": \"git\",\n    \"baseline\": \"a0f7f5379aa39d638efb1b89ac88a39c1011e4aa\",\n    \"repository\": \"https://github.com/microsoft/vcpkg\"\n  }\n}\n"
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 1.2041015625,
          "content": "{\n  \"name\": \"projectm\",\n  \"version\": \"4.1.2\",\n  \"description\": \"projectM is an open-source project that reimplements the esteemed Winamp Milkdrop by Geiss in a more modern, cross-platform reusable library.\",\n  \"homepage\": \"https://github.com/projectM-visualizer/projectm\",\n  \"license\": \"LGPL-2.1-only\",\n  \"dependencies\": [\n    {\n      \"name\": \"glew\",\n      \"platform\": \"windows\"\n    }\n  ],\n  \"default-features\": [\n    \"external-glm\",\n    \"external-evallib\"\n  ],\n  \"features\": {\n    \"external-glm\": {\n      \"description\": \"Use external GLM headers instead of the built-in ones\",\n      \"dependencies\": [\n        \"glm\"\n      ]\n    },\n    \"external-evallib\": {\n      \"description\": \"Use external projectm-eval library instead of the Git submodule\",\n      \"dependencies\": [\n        \"projectm-eval\"\n      ]\n    },\n    \"gui\": {\n      \"description\": \"Build a simple, SDL2-based development test UI\",\n      \"dependencies\": [\n        \"sdl2\"\n      ]\n    },\n    \"boost-filesystem\": {\n      \"description\": \"Force using boost::filesystem instead of std::filesystem\",\n      \"dependencies\": [\n        \"boost-filesystem\"\n      ]\n    },\n    \"test\": {\n      \"description\": \"Build unit tests\",\n      \"dependencies\": [\n        \"gtest\"\n      ]\n    }\n  }\n}"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}