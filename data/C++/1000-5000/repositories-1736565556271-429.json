{
  "metadata": {
    "timestamp": 1736565556271,
    "page": 429,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ARM-software/ComputeLibrary",
      "stars": 2901,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.12890625,
          "content": "# Copyright (c) 2023-2024 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nbuild --cxxopt=\"-Wall\" --cxxopt=\"-DARCH_ARM\" --cxxopt=\"-Wextra\" --cxxopt=\"-pedantic\" \\\n      --cxxopt=\"-Wdisabled-optimization\" --cxxopt=\"-Wformat=2\" --cxxopt=\"-Winit-self\" \\\n      --cxxopt=\"-Wstrict-overflow=2\" --cxxopt=\"-Wswitch-default\" --cxxopt=\"-Woverloaded-virtual\" \\\n      --cxxopt=\"-Wformat-security\" --cxxopt=\"-Wctor-dtor-privacy\" --cxxopt=\"-Wsign-promo\" \\\n      --cxxopt=\"-Weffc++\" --cxxopt=\"-Wno-overlength-strings\" --cxxopt=\"-Wno-ignored-attributes\" \\\n      --cxxopt=\"-std=c++14\"\n\n--repo_env=CC=gcc-10\n--repo_env=CXX=g++-10\n\n# Flag alises to allow user to write for example --Werror=true instead of --//:Werror=true\nbuild --flag_alias=Werror=//:Werror\nbuild --flag_alias=debug=//:debug\nbuild --flag_alias=logging=//:logging\nbuild --flag_alias=openmp=//:openmp\nbuild --flag_alias=cppthreads=//:cppthreads\nbuild --flag_alias=enable_bf16_validation=//:enable_bf16_validation\nbuild --flag_alias=enable_sve_validation=//:enable_sve_validation\nbuild --flag_alias=arch=//:arch\nbuild --flag_alias=thread_local_scheduler=//:thread_local_scheduler\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.4208984375,
          "content": "---\nLanguage: Cpp\nAccessModifierOffset: '0'\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: 'true'\nAlignConsecutiveDeclarations: 'true'\nAlignEscapedNewlinesLeft: 'true'\nAlignTrailingComments: 'true'\nAllowShortBlocksOnASingleLine: 'false'\nAllowShortCaseLabelsOnASingleLine: 'false'\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: 'false'\nAllowShortLoopsOnASingleLine: 'false'\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: 'true'\nAlwaysBreakTemplateDeclarations: 'true'\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: 'false'\nBreakConstructorInitializersBeforeComma: 'false'\n#BreakStringLiterals: 'true'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'true'\nCpp11BracedListStyle: 'false'\nDerivePointerAlignment: 'false'\nIndentCaseLabels: 'true'\nIndentWidth: '4'\nIndentWrappedFunctionNames: 'false'\nKeepEmptyLinesAtTheStartOfBlocks: 'false'\nMaxEmptyLinesToKeep: '1'\nNamespaceIndentation: None\nPointerAlignment: Right\nSortIncludes: 'true'\nSpaceAfterCStyleCast: 'false'\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeParens: Never\nSpaceInEmptyParentheses: 'false'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nStandard: Cpp11\nTabWidth: '4'\nUseTab: Never\nReflowComments: 'false'\nContinuationIndentWidth: '4'\nColumnLimit: 0\n---\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Android.bp",
          "type": "blob",
          "size": 97.7275390625,
          "content": "//\n// Copyright Â© 2020-2024 Arm Ltd. All rights reserved.\n// SPDX-License-Identifier: MIT\n//\n\n// OpenCL sources are NOT required by ArmNN or its Android NNAPI driver and are used for CI purposes only.\nopencl_srcs = [\n        \"src/core/CL/cl_kernels/activation_float_helpers.h\",\n        \"src/core/CL/cl_kernels/activation_quant_helpers.h\",\n        \"src/core/CL/cl_kernels/common/activation_layer.cl\",\n        \"src/core/CL/cl_kernels/common/activation_layer_quant.cl\",\n        \"src/core/CL/cl_kernels/common/arg_min_max.cl\",\n        \"src/core/CL/cl_kernels/common/batchnormalization_layer.cl\",\n        \"src/core/CL/cl_kernels/common/bitwise_op.cl\",\n        \"src/core/CL/cl_kernels/common/bounding_box_transform.cl\",\n        \"src/core/CL/cl_kernels/common/bounding_box_transform_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/cast.cl\",\n        \"src/core/CL/cl_kernels/common/col2im.cl\",\n        \"src/core/CL/cl_kernels/common/comparisons.cl\",\n        \"src/core/CL/cl_kernels/common/concatenate.cl\",\n        \"src/core/CL/cl_kernels/common/convert_fc_weights.cl\",\n        \"src/core/CL/cl_kernels/common/convolution_layer.cl\",\n        \"src/core/CL/cl_kernels/common/copy_tensor.cl\",\n        \"src/core/CL/cl_kernels/common/crop_tensor.cl\",\n        \"src/core/CL/cl_kernels/common/deconvolution_layer.cl\",\n        \"src/core/CL/cl_kernels/common/dequantization_layer.cl\",\n        \"src/core/CL/cl_kernels/common/elementwise_operation.cl\",\n        \"src/core/CL/cl_kernels/common/elementwise_operation_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/elementwise_unary.cl\",\n        \"src/core/CL/cl_kernels/common/elementwise_unary_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/fft.cl\",\n        \"src/core/CL/cl_kernels/common/fft_digit_reverse.cl\",\n        \"src/core/CL/cl_kernels/common/fft_scale.cl\",\n        \"src/core/CL/cl_kernels/common/fill_border.cl\",\n        \"src/core/CL/cl_kernels/common/floor.cl\",\n        \"src/core/CL/cl_kernels/common/gather.cl\",\n        \"src/core/CL/cl_kernels/common/gemm.cl\",\n        \"src/core/CL/cl_kernels/common/gemm_reshaped_only_rhs_mmul.cl\",\n        \"src/core/CL/cl_kernels/common/gemm_utils.cl\",\n        \"src/core/CL/cl_kernels/common/gemmlowp.cl\",\n        \"src/core/CL/cl_kernels/common/gemmlowp_reshaped_only_rhs_mmul.cl\",\n        \"src/core/CL/cl_kernels/common/gemv.cl\",\n        \"src/core/CL/cl_kernels/common/generate_proposals.cl\",\n        \"src/core/CL/cl_kernels/common/generate_proposals_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/instance_normalization.cl\",\n        \"src/core/CL/cl_kernels/common/l2_normalize.cl\",\n        \"src/core/CL/cl_kernels/common/mat_mul.cl\",\n        \"src/core/CL/cl_kernels/common/mat_mul_mmul.cl\",\n        \"src/core/CL/cl_kernels/common/mat_mul_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/mat_mul_quantized_mmul.cl\",\n        \"src/core/CL/cl_kernels/common/mean_stddev_normalization.cl\",\n        \"src/core/CL/cl_kernels/common/memset.cl\",\n        \"src/core/CL/cl_kernels/common/minmax_layer.cl\",\n        \"src/core/CL/cl_kernels/common/nonmax.cl\",\n        \"src/core/CL/cl_kernels/common/pad_layer.cl\",\n        \"src/core/CL/cl_kernels/common/permute.cl\",\n        \"src/core/CL/cl_kernels/common/pixelwise_mul_float.cl\",\n        \"src/core/CL/cl_kernels/common/pixelwise_mul_int.cl\",\n        \"src/core/CL/cl_kernels/common/qlstm_layer_normalization.cl\",\n        \"src/core/CL/cl_kernels/common/quantization_layer.cl\",\n        \"src/core/CL/cl_kernels/common/range.cl\",\n        \"src/core/CL/cl_kernels/common/reduction_operation.cl\",\n        \"src/core/CL/cl_kernels/common/reshape_layer.cl\",\n        \"src/core/CL/cl_kernels/common/reverse.cl\",\n        \"src/core/CL/cl_kernels/common/roi_align_layer.cl\",\n        \"src/core/CL/cl_kernels/common/roi_align_layer_quantized.cl\",\n        \"src/core/CL/cl_kernels/common/roi_pooling_layer.cl\",\n        \"src/core/CL/cl_kernels/common/scatter.cl\",\n        \"src/core/CL/cl_kernels/common/select.cl\",\n        \"src/core/CL/cl_kernels/common/slice_ops.cl\",\n        \"src/core/CL/cl_kernels/common/softmax_layer.cl\",\n        \"src/core/CL/cl_kernels/common/stack_layer.cl\",\n        \"src/core/CL/cl_kernels/common/tile.cl\",\n        \"src/core/CL/cl_kernels/common/transpose.cl\",\n        \"src/core/CL/cl_kernels/common/unpooling_layer.cl\",\n        \"src/core/CL/cl_kernels/gemm_helpers.h\",\n        \"src/core/CL/cl_kernels/helpers.h\",\n        \"src/core/CL/cl_kernels/helpers_asymm.h\",\n        \"src/core/CL/cl_kernels/load_store_utility.h\",\n        \"src/core/CL/cl_kernels/nchw/batch_to_space.cl\",\n        \"src/core/CL/cl_kernels/nchw/batchnormalization_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/channel_shuffle.cl\",\n        \"src/core/CL/cl_kernels/nchw/depth_to_space.cl\",\n        \"src/core/CL/cl_kernels/nchw/dequantization_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/direct_convolution.cl\",\n        \"src/core/CL/cl_kernels/nchw/im2col.cl\",\n        \"src/core/CL/cl_kernels/nchw/normalization_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/normalize_planar_yuv_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/normalize_planar_yuv_layer_quantized.cl\",\n        \"src/core/CL/cl_kernels/nchw/pooling_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/prior_box_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/reorg_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/scale.cl\",\n        \"src/core/CL/cl_kernels/nchw/space_to_batch.cl\",\n        \"src/core/CL/cl_kernels/nchw/space_to_depth.cl\",\n        \"src/core/CL/cl_kernels/nchw/upsample_layer.cl\",\n        \"src/core/CL/cl_kernels/nchw/winograd_filter_transform.cl\",\n        \"src/core/CL/cl_kernels/nchw/winograd_input_transform.cl\",\n        \"src/core/CL/cl_kernels/nchw/winograd_output_transform.cl\",\n        \"src/core/CL/cl_kernels/nhwc/batch_to_space.cl\",\n        \"src/core/CL/cl_kernels/nhwc/batchnormalization_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/channel_shuffle.cl\",\n        \"src/core/CL/cl_kernels/nhwc/depth_to_space.cl\",\n        \"src/core/CL/cl_kernels/nhwc/dequantization_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/direct_convolution.cl\",\n        \"src/core/CL/cl_kernels/nhwc/direct_convolution3d.cl\",\n        \"src/core/CL/cl_kernels/nhwc/dwc_native_fp_nhwc.cl\",\n        \"src/core/CL/cl_kernels/nhwc/dwc_native_quantized_nhwc.cl\",\n        \"src/core/CL/cl_kernels/nhwc/im2col.cl\",\n        \"src/core/CL/cl_kernels/nhwc/indirect_convolution.cl\",\n        \"src/core/CL/cl_kernels/nhwc/normalization_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/normalize_planar_yuv_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/normalize_planar_yuv_layer_quantized.cl\",\n        \"src/core/CL/cl_kernels/nhwc/pooling_3d_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/pooling_3d_layer_quantized.cl\",\n        \"src/core/CL/cl_kernels/nhwc/pooling_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/pooling_layer_quantized.cl\",\n        \"src/core/CL/cl_kernels/nhwc/reorg_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/scale.cl\",\n        \"src/core/CL/cl_kernels/nhwc/space_to_batch.cl\",\n        \"src/core/CL/cl_kernels/nhwc/space_to_depth.cl\",\n        \"src/core/CL/cl_kernels/nhwc/transposed_convolution.cl\",\n        \"src/core/CL/cl_kernels/nhwc/upsample_layer.cl\",\n        \"src/core/CL/cl_kernels/nhwc/winograd_filter_transform.cl\",\n        \"src/core/CL/cl_kernels/nhwc/winograd_input_transform.cl\",\n        \"src/core/CL/cl_kernels/nhwc/winograd_output_transform.cl\",\n        \"src/core/CL/cl_kernels/repeat.h\",\n        \"src/core/CL/cl_kernels/tile_helpers.h\",\n        \"src/core/CL/cl_kernels/types.h\",\n        \"src/core/CL/cl_kernels/warp_helpers.h\",\n        \n]\n\nbootstrap_go_package {\n    name: \"arm_compute_library_nn_driver\",\n    pkgPath: \"arm_compute_library_nn_driver\",\n    deps: [\n        \"blueprint\",\n        \"blueprint-pathtools\",\n        \"blueprint-proptools\",\n        \"soong\",\n        \"soong-android\",\n        \"soong-cc\",\n    ],\n    srcs: [\n        \"scripts/arm_compute_library_nn_driver.go\",\n    ],\n    pluginFor: [ \"soong_build\" ],\n}\n\narm_compute_library_defaults {\n       name: \"acl-default-cppflags\",\n       cppflags: [\n            \"-std=c++14\",\n            \"-fexceptions\",\n            \"-DBOOST_NO_AUTO_PTR\",\n            \"-DEMBEDDED_KERNELS\",\n            \"-DARM_COMPUTE_ASSERTS_ENABLED\",\n            \"-DARM_COMPUTE_CPP_SCHEDULER\",\n            \"-DENABLE_NEON\",\n            \"-DARM_COMPUTE_ENABLE_NEON\",\n            \"-Wno-unused-parameter\",\n            \"-DNO_DOT_IN_TOOLCHAIN\",\n            \"-Wno-implicit-fallthrough\",\n            \"-fPIC\"\n    ],\n    rtti: true,\n}\n\ncc_library_static {\n    name: \"arm_compute_library\",\n    defaults: [\"acl-default-cppflags\"],\n    proprietary: true,\n    local_include_dirs: [\"build/android-arm64v8a/src/core\",\n                         \"build/android-arm64v8a/src/core/CL\",\n                         \"compute_kernel_writer/include\",\n                         \"src/core/common\",\n                         \"src/core/helpers\",\n                         \"src/core/NEON/kernels/arm_gemm\",\n                         \"src/core/NEON/kernels/assembly\",\n                         \"src/core/NEON/kernels/convolution/common\",\n                         \"src/core/NEON/kernels/convolution/winograd\",\n                         \"src/cpu/kernels/assembly\"],\n    export_include_dirs: [\".\", \"./include\"],\n    srcs: [\n        \"src/c/AclContext.cpp\",\n        \"src/c/AclOperator.cpp\",\n        \"src/c/AclQueue.cpp\",\n        \"src/c/AclTensor.cpp\",\n        \"src/c/AclTensorPack.cpp\",\n        \"src/c/AclVersion.cpp\",\n        \"src/c/cl/AclOpenClExt.cpp\",\n        \"src/c/operators/AclActivation.cpp\",\n        \"src/common/AllocatorWrapper.cpp\",\n        \"src/common/IOperator.cpp\",\n        \"src/common/ITensorV2.cpp\",\n        \"src/common/TensorPack.cpp\",\n        \"src/common/cpuinfo/CpuInfo.cpp\",\n        \"src/common/cpuinfo/CpuIsaInfo.cpp\",\n        \"src/common/cpuinfo/CpuModel.cpp\",\n        \"src/common/utils/LegacySupport.cpp\",\n        \"src/core/AccessWindowAutoPadding.cpp\",\n        \"src/core/AccessWindowStatic.cpp\",\n        \"src/core/AccessWindowTranspose.cpp\",\n        \"src/core/CL/CLCompileContext.cpp\",\n        \"src/core/CL/CLHelpers.cpp\",\n        \"src/core/CL/CLKernelLibrary.cpp\",\n        \"src/core/CL/CLUtils.cpp\",\n        \"src/core/CL/DefaultLWSHeuristics.cpp\",\n        \"src/core/CL/ICLKernel.cpp\",\n        \"src/core/CL/ICLSimple2DKernel.cpp\",\n        \"src/core/CL/ICLSimple3DKernel.cpp\",\n        \"src/core/CL/ICLSimpleKernel.cpp\",\n        \"src/core/CL/ICLTensor.cpp\",\n        \"src/core/CL/OpenCL.cpp\",\n        \"src/core/CL/kernels/CLArgMinMaxLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLBatchToSpaceLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLBitwiseKernel.cpp\",\n        \"src/core/CL/kernels/CLBoundingBoxTransformKernel.cpp\",\n        \"src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLComparisonKernel.cpp\",\n        \"src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp\",\n        \"src/core/CL/kernels/CLDeconvolutionReshapeOutputKernel.cpp\",\n        \"src/core/CL/kernels/CLDepthToSpaceLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLDepthwiseConvolutionLayerNativeKernel.cpp\",\n        \"src/core/CL/kernels/CLFFTDigitReverseKernel.cpp\",\n        \"src/core/CL/kernels/CLFFTRadixStageKernel.cpp\",\n        \"src/core/CL/kernels/CLFFTScaleKernel.cpp\",\n        \"src/core/CL/kernels/CLFillBorderKernel.cpp\",\n        \"src/core/CL/kernels/CLFuseBatchNormalizationKernel.cpp\",\n        \"src/core/CL/kernels/CLGatherKernel.cpp\",\n        \"src/core/CL/kernels/CLGenerateProposalsLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLInstanceNormalizationLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLMaxUnpoolingLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLMeanStdDevNormalizationKernel.cpp\",\n        \"src/core/CL/kernels/CLNormalizationLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLNormalizePlanarYUVLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLPadLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLPriorBoxLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLQLSTMLayerNormalizationKernel.cpp\",\n        \"src/core/CL/kernels/CLROIAlignLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLROIPoolingLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLRangeKernel.cpp\",\n        \"src/core/CL/kernels/CLReductionOperationKernel.cpp\",\n        \"src/core/CL/kernels/CLReorgLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLReverseKernel.cpp\",\n        \"src/core/CL/kernels/CLSelectKernel.cpp\",\n        \"src/core/CL/kernels/CLSpaceToBatchLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLSpaceToDepthLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLStackLayerKernel.cpp\",\n        \"src/core/CL/kernels/CLStridedSliceKernel.cpp\",\n        \"src/core/CL/kernels/CLTileKernel.cpp\",\n        \"src/core/CPP/CPPTypes.cpp\",\n        \"src/core/CPP/kernels/CPPBoxWithNonMaximaSuppressionLimitKernel.cpp\",\n        \"src/core/CPP/kernels/CPPNonMaximumSuppressionKernel.cpp\",\n        \"src/core/CPP/kernels/CPPPermuteKernel.cpp\",\n        \"src/core/CPP/kernels/CPPTopKVKernel.cpp\",\n        \"src/core/CPP/kernels/CPPUpsampleKernel.cpp\",\n        \"src/core/Error.cpp\",\n        \"src/core/GPUTarget.cpp\",\n        \"src/core/Helpers.cpp\",\n        \"src/core/IAccessWindow.cpp\",\n        \"src/core/IKernel.cpp\",\n        \"src/core/ITensor.cpp\",\n        \"src/core/ITensorPack.cpp\",\n        \"src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEBatchToSpaceLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEBitwiseAndKernel.cpp\",\n        \"src/core/NEON/kernels/NEBitwiseNotKernel.cpp\",\n        \"src/core/NEON/kernels/NEBitwiseOrKernel.cpp\",\n        \"src/core/NEON/kernels/NEBitwiseXorKernel.cpp\",\n        \"src/core/NEON/kernels/NEBoundingBoxTransformKernel.cpp\",\n        \"src/core/NEON/kernels/NEChannelShuffleLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NECropKernel.cpp\",\n        \"src/core/NEON/kernels/NEDepthToSpaceLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEFFTDigitReverseKernel.cpp\",\n        \"src/core/NEON/kernels/NEFFTRadixStageKernel.cpp\",\n        \"src/core/NEON/kernels/NEFFTScaleKernel.cpp\",\n        \"src/core/NEON/kernels/NEFillBorderKernel.cpp\",\n        \"src/core/NEON/kernels/NEFuseBatchNormalizationKernel.cpp\",\n        \"src/core/NEON/kernels/NEGatherKernel.cpp\",\n        \"src/core/NEON/kernels/NEGenerateProposalsLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEInstanceNormalizationLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NELogicalKernel.cpp\",\n        \"src/core/NEON/kernels/NEMeanStdDevNormalizationKernel.cpp\",\n        \"src/core/NEON/kernels/NENormalizationLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEPadLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEPriorBoxLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEQLSTMLayerNormalizationKernel.cpp\",\n        \"src/core/NEON/kernels/NEROIAlignLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEROIPoolingLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NERangeKernel.cpp\",\n        \"src/core/NEON/kernels/NEReductionOperationKernel.cpp\",\n        \"src/core/NEON/kernels/NEReorderKernel.cpp\",\n        \"src/core/NEON/kernels/NEReorgLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEReverseKernel.cpp\",\n        \"src/core/NEON/kernels/NESelectKernel.cpp\",\n        \"src/core/NEON/kernels/NESpaceToBatchLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NESpaceToDepthLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEStackLayerKernel.cpp\",\n        \"src/core/NEON/kernels/NEStridedSliceKernel.cpp\",\n        \"src/core/NEON/kernels/NETileKernel.cpp\",\n        \"src/core/NEON/kernels/arm_conv/addressing.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_common.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_fp16.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_fp32.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_s8q.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_strategies_common.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_u8q.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_u8s8u8q.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/generic.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/generic_quantized_dot_product.cpp\",\n        \"src/core/NEON/kernels/arm_conv/depthwise/premultiply.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/kernels/cpp_nhwc_1x1_stride_any_depthfirst/generic.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_fp16.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_fp32.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_s8.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_s8q.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_u8.cpp\",\n        \"src/core/NEON/kernels/arm_conv/pooling/pooling_u8q.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_bf16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_bf16bf16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_int16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_int8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_q8_mixed.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_qint8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_quint8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_s8fp32.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_u8s8fp32.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/interleave-8way.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/interleave_indirect-sve.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/interleave_indirect.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/mergeresults-fp16.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/mergeresults-sve.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/mergeresults.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/misc-sve.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/misc.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/quantized.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/rowsum_indirect_s8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/rowsum_indirect_u8.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/transform-sve.cpp\",\n        \"src/core/NEON/kernels/arm_gemm/transform.cpp\",\n        \"src/core/NEON/kernels/batchnormalization/impl/NEON/fp16.cpp\",\n        \"src/core/NEON/kernels/batchnormalization/impl/NEON/fp32.cpp\",\n        \"src/core/NEON/kernels/convolution/common/padding.cpp\",\n        \"src/core/NEON/kernels/convolution/common/qasymm8.cpp\",\n        \"src/core/NEON/kernels/convolution/common/qsymm8.cpp\",\n        \"src/core/NEON/kernels/convolution/common/utils.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_1x8.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_4x4.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_6x6.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/input_transforms_fp16.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/input_transforms_fp32.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x2_1x7.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x4_1x5.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x6_1x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_2x2_3x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_2x2_5x5.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_4x4_3x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms_fp16.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/output_transforms_fp32.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_2x2_3x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_2x2_5x5.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_4x4_3x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x2_1x7.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x4_1x5.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x6_1x3.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms_fp16.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/weight_transforms_fp32.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/winograd_fp16.cpp\",\n        \"src/core/NEON/kernels/convolution/winograd/winograd_fp32.cpp\",\n        \"src/core/Rounding.cpp\",\n        \"src/core/Size2D.cpp\",\n        \"src/core/Size3D.cpp\",\n        \"src/core/SubTensorInfo.cpp\",\n        \"src/core/TensorInfo.cpp\",\n        \"src/core/Utils.cpp\",\n        \"src/core/Validate.cpp\",\n        \"src/core/Version.cpp\",\n        \"src/core/helpers/LUTManager.cpp\",\n        \"src/core/helpers/SoftmaxHelpers.cpp\",\n        \"src/core/helpers/Utils.cpp\",\n        \"src/core/helpers/WindowHelpers.cpp\",\n        \"src/core/utils/ActivationFunctionUtils.cpp\",\n        \"src/core/utils/AssemblyUtils.cpp\",\n        \"src/core/utils/DataLayoutUtils.cpp\",\n        \"src/core/utils/DataTypeUtils.cpp\",\n        \"src/core/utils/FormatUtils.cpp\",\n        \"src/core/utils/InterpolationPolicyUtils.cpp\",\n        \"src/core/utils/Math.cpp\",\n        \"src/core/utils/ScaleUtils.cpp\",\n        \"src/core/utils/StringUtils.cpp\",\n        \"src/core/utils/helpers/fft.cpp\",\n        \"src/core/utils/helpers/tensor_transform.cpp\",\n        \"src/core/utils/io/FileHandler.cpp\",\n        \"src/core/utils/logging/FilePrinter.cpp\",\n        \"src/core/utils/logging/Helpers.cpp\",\n        \"src/core/utils/logging/Logger.cpp\",\n        \"src/core/utils/logging/LoggerRegistry.cpp\",\n        \"src/core/utils/misc/MMappedFile.cpp\",\n        \"src/core/utils/quantization/AsymmHelpers.cpp\",\n        \"src/cpu/CpuContext.cpp\",\n        \"src/cpu/CpuQueue.cpp\",\n        \"src/cpu/CpuTensor.cpp\",\n        \"src/cpu/kernels/CpuActivationKernel.cpp\",\n        \"src/cpu/kernels/CpuAddKernel.cpp\",\n        \"src/cpu/kernels/CpuAddMulAddKernel.cpp\",\n        \"src/cpu/kernels/CpuCastKernel.cpp\",\n        \"src/cpu/kernels/CpuCol2ImKernel.cpp\",\n        \"src/cpu/kernels/CpuConcatenateBatchKernel.cpp\",\n        \"src/cpu/kernels/CpuConcatenateDepthKernel.cpp\",\n        \"src/cpu/kernels/CpuConcatenateHeightKernel.cpp\",\n        \"src/cpu/kernels/CpuConcatenateWidthKernel.cpp\",\n        \"src/cpu/kernels/CpuConvertFullyConnectedWeightsKernel.cpp\",\n        \"src/cpu/kernels/CpuConvertQuantizedSignednessKernel.cpp\",\n        \"src/cpu/kernels/CpuCopyKernel.cpp\",\n        \"src/cpu/kernels/CpuDepthwiseConv2dNativeKernel.cpp\",\n        \"src/cpu/kernels/CpuDequantizeKernel.cpp\",\n        \"src/cpu/kernels/CpuDirectConv2dKernel.cpp\",\n        \"src/cpu/kernels/CpuDirectConv2dOutputStageKernel.cpp\",\n        \"src/cpu/kernels/CpuDirectConv3dKernel.cpp\",\n        \"src/cpu/kernels/CpuDynamicGemmKernel.cpp\",\n        \"src/cpu/kernels/CpuDynamicGemmKernelHeuristics.cpp\",\n        \"src/cpu/kernels/CpuElementwiseKernel.cpp\",\n        \"src/cpu/kernels/CpuElementwiseUnaryKernel.cpp\",\n        \"src/cpu/kernels/CpuFillKernel.cpp\",\n        \"src/cpu/kernels/CpuFloorKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmInterleave4x4Kernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpMatrixMultiplyKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpMatrixReductionKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpOffsetContributionKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpOffsetContributionOutputStageKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ScaleKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmMatrixAdditionKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmMatrixMultiplyKernel.cpp\",\n        \"src/cpu/kernels/CpuGemmTranspose1xWKernel.cpp\",\n        \"src/cpu/kernels/CpuIm2ColKernel.cpp\",\n        \"src/cpu/kernels/CpuMaxUnpoolingLayerKernel.cpp\",\n        \"src/cpu/kernels/CpuMulKernel.cpp\",\n        \"src/cpu/kernels/CpuPermuteKernel.cpp\",\n        \"src/cpu/kernels/CpuPool2dKernel.cpp\",\n        \"src/cpu/kernels/CpuPool3dKernel.cpp\",\n        \"src/cpu/kernels/CpuQuantizeKernel.cpp\",\n        \"src/cpu/kernels/CpuReshapeKernel.cpp\",\n        \"src/cpu/kernels/CpuScaleKernel.cpp\",\n        \"src/cpu/kernels/CpuScatterKernel.cpp\",\n        \"src/cpu/kernels/CpuSoftmaxKernel.cpp\",\n        \"src/cpu/kernels/CpuSubKernel.cpp\",\n        \"src/cpu/kernels/CpuTransposeKernel.cpp\",\n        \"src/cpu/kernels/CpuWeightsReshapeKernel.cpp\",\n        \"src/cpu/kernels/CpuWinogradConv2dKernel.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/lut.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/activation/generic/neon/qsymm16.cpp\",\n        \"src/cpu/kernels/activation/heuristics/CpuActivationKernelHeuristics.cpp\",\n        \"src/cpu/kernels/add/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/add/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/add/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/add/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/add/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/add/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/add/generic/neon/qsymm16.cpp\",\n        \"src/cpu/kernels/addmuladd/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/addmuladd/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/addmuladd/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/addmuladd/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/boundingboxtransform/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/boundingboxtransform/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/boundingboxtransform/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/boundingboxtransform/generic/neon/qsymm16.cpp\",\n        \"src/cpu/kernels/cast/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/conv3d/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/conv3d/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/conv3d/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/conv3d/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/crop/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/crop/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/crop/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/depth_to_space/nchw/any/impl.cpp\",\n        \"src/cpu/kernels/depth_to_space/nhwc/any/impl.cpp\",\n        \"src/cpu/kernels/depthwiseconv2d/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/depthwiseconv2d/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/depthwiseconv2d/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/depthwiseconv2d/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/depthwiseconv2d/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/dequantize/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/dequantize/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/directconv2d/nchw/all.cpp\",\n        \"src/cpu/kernels/directconv2d/nchw/fp16.cpp\",\n        \"src/cpu/kernels/directconv2d/nhwc/neon/fp16.cpp\",\n        \"src/cpu/kernels/directconv2d/nhwc/neon/fp32.cpp\",\n        \"src/cpu/kernels/directconv2d/nhwc/neon/impl.cpp\",\n        \"src/cpu/kernels/directconv2d/nhwc/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/directconv2d_output_stage/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/directconv2d_output_stage/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/directconv2d_output_stage/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/directconv2d_output_stage/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/elementwise_binary/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/elementwise_binary/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/elementwise_binary/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/elementwise_binary/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/elementwise_binary/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/q8.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/elementwise_unary/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/floor/neon/fp16.cpp\",\n        \"src/cpu/kernels/floor/neon/fp32.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/generic/fp16.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/generic/fp32.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/nchw/all.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/nchw/neon/fp16.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/nchw/neon/fp32.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/nhwc/neon/fp16.cpp\",\n        \"src/cpu/kernels/fuse_batch_normalization/nhwc/neon/fp32.cpp\",\n        \"src/cpu/kernels/gemm_matrix_add/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/gemm_matrix_add/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/gemm_matrix_add/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/gemm_matrix_mul/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/gemm_matrix_mul/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/gemm_matrix_mul/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/genproposals/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/genproposals/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/genproposals/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/genproposals/generic/neon/qsymm16.cpp\",\n        \"src/cpu/kernels/instancenorm/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/instancenorm/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/instancenorm/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/internal/CpuDepthwiseConv2dAssemblyWrapperKernel.cpp\",\n        \"src/cpu/kernels/internal/CpuPool2dAssemblyWrapperKernel.cpp\",\n        \"src/cpu/kernels/l2normlayer/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/l2normlayer/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/lut/generic/neon/u8.cpp\",\n        \"src/cpu/kernels/maxunpool/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/maxunpool/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/maxunpool/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/maxunpool/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/meanstddevnorm/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/meanstddevnorm/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/meanstddevnorm/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/meanstddevnorm/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/mul/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/mul/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/norm_layer/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/norm_layer/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/pool2d/neon/fp16.cpp\",\n        \"src/cpu/kernels/pool2d/neon/fp32.cpp\",\n        \"src/cpu/kernels/pool2d/neon/nchw/all.cpp\",\n        \"src/cpu/kernels/pool2d/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/pool2d/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/pool3d/neon/fp16.cpp\",\n        \"src/cpu/kernels/pool3d/neon/fp32.cpp\",\n        \"src/cpu/kernels/pool3d/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/pool3d/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/quantize/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/quantize/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/quantize/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/range/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/range/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/range/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/reduction_layer/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/reduction_layer/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/reduction_layer/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/reduction_layer/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/reduction_layer/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/roialign/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/roialign/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/roialign/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/roialign/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/scale/neon/fp16.cpp\",\n        \"src/cpu/kernels/scale/neon/integer.cpp\",\n        \"src/cpu/kernels/scale/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/scale/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/select/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/select/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/select/generic/neon/integer.cpp\",\n        \"src/cpu/kernels/softmax/generic/neon/fp16.cpp\",\n        \"src/cpu/kernels/softmax/generic/neon/fp32.cpp\",\n        \"src/cpu/kernels/softmax/generic/neon/impl.cpp\",\n        \"src/cpu/kernels/softmax/generic/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/softmax/generic/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/sub/neon/fp16.cpp\",\n        \"src/cpu/kernels/sub/neon/qasymm8.cpp\",\n        \"src/cpu/kernels/sub/neon/qasymm8_signed.cpp\",\n        \"src/cpu/kernels/sub/neon/qsymm16.cpp\",\n        \"src/cpu/operators/CpuActivation.cpp\",\n        \"src/cpu/operators/CpuAdd.cpp\",\n        \"src/cpu/operators/CpuAddMulAdd.cpp\",\n        \"src/cpu/operators/CpuCast.cpp\",\n        \"src/cpu/operators/CpuConcatenate.cpp\",\n        \"src/cpu/operators/CpuConv2d.cpp\",\n        \"src/cpu/operators/CpuConvertFullyConnectedWeights.cpp\",\n        \"src/cpu/operators/CpuCopy.cpp\",\n        \"src/cpu/operators/CpuDepthwiseConv2d.cpp\",\n        \"src/cpu/operators/CpuDepthwiseConv2dAssemblyDispatch.cpp\",\n        \"src/cpu/operators/CpuDequantize.cpp\",\n        \"src/cpu/operators/CpuDirectConv2d.cpp\",\n        \"src/cpu/operators/CpuDirectConv3d.cpp\",\n        \"src/cpu/operators/CpuDynamicGemm.cpp\",\n        \"src/cpu/operators/CpuElementwise.cpp\",\n        \"src/cpu/operators/CpuElementwiseUnary.cpp\",\n        \"src/cpu/operators/CpuFill.cpp\",\n        \"src/cpu/operators/CpuFlatten.cpp\",\n        \"src/cpu/operators/CpuFloor.cpp\",\n        \"src/cpu/operators/CpuFullyConnected.cpp\",\n        \"src/cpu/operators/CpuGemm.cpp\",\n        \"src/cpu/operators/CpuGemmConv2d.cpp\",\n        \"src/cpu/operators/CpuGemmDirectConv2d.cpp\",\n        \"src/cpu/operators/CpuGemmLowpMatrixMultiplyCore.cpp\",\n        \"src/cpu/operators/CpuGemmLowpOutputStage.cpp\",\n        \"src/cpu/operators/CpuMatMul.cpp\",\n        \"src/cpu/operators/CpuMaxUnpooling.cpp\",\n        \"src/cpu/operators/CpuMul.cpp\",\n        \"src/cpu/operators/CpuPermute.cpp\",\n        \"src/cpu/operators/CpuPool2d.cpp\",\n        \"src/cpu/operators/CpuPool3d.cpp\",\n        \"src/cpu/operators/CpuQuantize.cpp\",\n        \"src/cpu/operators/CpuReshape.cpp\",\n        \"src/cpu/operators/CpuScale.cpp\",\n        \"src/cpu/operators/CpuScatter.cpp\",\n        \"src/cpu/operators/CpuSoftmax.cpp\",\n        \"src/cpu/operators/CpuSub.cpp\",\n        \"src/cpu/operators/CpuTranspose.cpp\",\n        \"src/cpu/operators/CpuWinogradConv2d.cpp\",\n        \"src/cpu/operators/internal/CpuGemmAssemblyDispatch.cpp\",\n        \"src/dynamic_fusion/runtime/gpu/cl/ClKernelRuntime.cpp\",\n        \"src/dynamic_fusion/runtime/gpu/cl/ClWorkloadRuntime.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/CastAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ClampAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/Conv2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/DepthwiseConv2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/MatMulAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/Pool2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ReshapeAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ResizeAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/SoftmaxAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentGraph.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentGroup.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentStream.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuLogicalKernel.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuOperatorGroup.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuWorkloadContext.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuWorkloadSketch.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentActivation.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentCast.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentDepthwiseConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentDirectConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentElementwiseBinary.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentMatMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentPool2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentReshape.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentResize.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentStore.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuAdd.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuCast.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuClamp.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuDepthwiseConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuMatMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuOutput.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuPool2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuReshape.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuResize.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSigmoid.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSoftmax.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSub.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuTanh.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/internal/GpuElementwiseBinaryCommon.cpp\",\n        \"src/gpu/cl/ClContext.cpp\",\n        \"src/gpu/cl/ClKernelLibrary.cpp\",\n        \"src/gpu/cl/ClQueue.cpp\",\n        \"src/gpu/cl/ClTensor.cpp\",\n        \"src/gpu/cl/kernels/ClActivationKernel.cpp\",\n        \"src/gpu/cl/kernels/ClBatchConcatenateKernel.cpp\",\n        \"src/gpu/cl/kernels/ClCastKernel.cpp\",\n        \"src/gpu/cl/kernels/ClCol2ImKernel.cpp\",\n        \"src/gpu/cl/kernels/ClConvertFullyConnectedWeightsKernel.cpp\",\n        \"src/gpu/cl/kernels/ClCopyKernel.cpp\",\n        \"src/gpu/cl/kernels/ClCropKernel.cpp\",\n        \"src/gpu/cl/kernels/ClDepthConcatenateKernel.cpp\",\n        \"src/gpu/cl/kernels/ClDequantizeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClDirectConv2dKernel.cpp\",\n        \"src/gpu/cl/kernels/ClDirectConv3dKernel.cpp\",\n        \"src/gpu/cl/kernels/ClElementwiseKernel.cpp\",\n        \"src/gpu/cl/kernels/ClElementwiseUnaryKernel.cpp\",\n        \"src/gpu/cl/kernels/ClFillKernel.cpp\",\n        \"src/gpu/cl/kernels/ClFloorKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyNativeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpOffsetContributionKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpOffsetContributionOutputStageKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleByFloatKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmLowpReductionKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmMatrixMultiplyNativeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedOnlyRhsKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmReshapeLhsMatrixKernel.cpp\",\n        \"src/gpu/cl/kernels/ClGemmReshapeRhsMatrixKernel.cpp\",\n        \"src/gpu/cl/kernels/ClHeightConcatenateKernel.cpp\",\n        \"src/gpu/cl/kernels/ClIm2ColKernel.cpp\",\n        \"src/gpu/cl/kernels/ClIndirectConv2dAddressPrecalculationKernel.cpp\",\n        \"src/gpu/cl/kernels/ClIndirectConv2dKernel.cpp\",\n        \"src/gpu/cl/kernels/ClMatMulLowpNativeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClMatMulLowpNativeMMULKernel.cpp\",\n        \"src/gpu/cl/kernels/ClMatMulNativeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClMatMulNativeMMULKernel.cpp\",\n        \"src/gpu/cl/kernels/ClMulKernel.cpp\",\n        \"src/gpu/cl/kernels/ClPermuteKernel.cpp\",\n        \"src/gpu/cl/kernels/ClPool2dKernel.cpp\",\n        \"src/gpu/cl/kernels/ClPool3dKernel.cpp\",\n        \"src/gpu/cl/kernels/ClQuantizeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClReshapeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClScaleKernel.cpp\",\n        \"src/gpu/cl/kernels/ClScatterKernel.cpp\",\n        \"src/gpu/cl/kernels/ClSoftmaxKernel.cpp\",\n        \"src/gpu/cl/kernels/ClTransposeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClTransposedConvolutionKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWeightsReshapeKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWidthConcatenate2TensorsKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWidthConcatenate4TensorsKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWidthConcatenateKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWinogradFilterTransformKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWinogradInputTransformKernel.cpp\",\n        \"src/gpu/cl/kernels/ClWinogradOutputTransformKernel.cpp\",\n        \"src/gpu/cl/kernels/gemm/ClGemmHelpers.cpp\",\n        \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeBifrost.cpp\",\n        \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeMidgard.cpp\",\n        \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeValhall.cpp\",\n        \"src/gpu/cl/kernels/gemm/reshaped/ClGemmDefaultConfigReshapedBifrost.cpp\",\n        \"src/gpu/cl/kernels/gemm/reshaped/ClGemmDefaultConfigReshapedValhall.cpp\",\n        \"src/gpu/cl/kernels/gemm/reshaped_only_rhs/ClGemmDefaultConfigReshapedRhsOnlyBifrost.cpp\",\n        \"src/gpu/cl/kernels/gemm/reshaped_only_rhs/ClGemmDefaultConfigReshapedRhsOnlyValhall.cpp\",\n        \"src/gpu/cl/kernels/helpers/MatMulKernelHelpers.cpp\",\n        \"src/gpu/cl/operators/ClActivation.cpp\",\n        \"src/gpu/cl/operators/ClAdd.cpp\",\n        \"src/gpu/cl/operators/ClCast.cpp\",\n        \"src/gpu/cl/operators/ClConcatenate.cpp\",\n        \"src/gpu/cl/operators/ClConv2d.cpp\",\n        \"src/gpu/cl/operators/ClConvertFullyConnectedWeights.cpp\",\n        \"src/gpu/cl/operators/ClCopy.cpp\",\n        \"src/gpu/cl/operators/ClCrop.cpp\",\n        \"src/gpu/cl/operators/ClDequantize.cpp\",\n        \"src/gpu/cl/operators/ClDirectConv2d.cpp\",\n        \"src/gpu/cl/operators/ClDirectConv3d.cpp\",\n        \"src/gpu/cl/operators/ClElementwiseOperations.cpp\",\n        \"src/gpu/cl/operators/ClElementwiseUnary.cpp\",\n        \"src/gpu/cl/operators/ClFill.cpp\",\n        \"src/gpu/cl/operators/ClFlatten.cpp\",\n        \"src/gpu/cl/operators/ClFloor.cpp\",\n        \"src/gpu/cl/operators/ClFullyConnected.cpp\",\n        \"src/gpu/cl/operators/ClGemm.cpp\",\n        \"src/gpu/cl/operators/ClGemmConv2d.cpp\",\n        \"src/gpu/cl/operators/ClGemmLowpMatrixMultiplyCore.cpp\",\n        \"src/gpu/cl/operators/ClGemmLowpOutputStage.cpp\",\n        \"src/gpu/cl/operators/ClIndirectConv2d.cpp\",\n        \"src/gpu/cl/operators/ClLogicalNot.cpp\",\n        \"src/gpu/cl/operators/ClMatMul.cpp\",\n        \"src/gpu/cl/operators/ClMul.cpp\",\n        \"src/gpu/cl/operators/ClPRelu.cpp\",\n        \"src/gpu/cl/operators/ClPermute.cpp\",\n        \"src/gpu/cl/operators/ClPool2d.cpp\",\n        \"src/gpu/cl/operators/ClPool3d.cpp\",\n        \"src/gpu/cl/operators/ClQuantize.cpp\",\n        \"src/gpu/cl/operators/ClReshape.cpp\",\n        \"src/gpu/cl/operators/ClScale.cpp\",\n        \"src/gpu/cl/operators/ClScatter.cpp\",\n        \"src/gpu/cl/operators/ClSoftmax.cpp\",\n        \"src/gpu/cl/operators/ClSub.cpp\",\n        \"src/gpu/cl/operators/ClTranspose.cpp\",\n        \"src/gpu/cl/operators/ClTransposedConvolution.cpp\",\n        \"src/gpu/cl/operators/ClWinogradConv2d.cpp\",\n        \"src/runtime/Allocator.cpp\",\n        \"src/runtime/BlobLifetimeManager.cpp\",\n        \"src/runtime/BlobMemoryPool.cpp\",\n        \"src/runtime/CL/CLBufferAllocator.cpp\",\n        \"src/runtime/CL/CLGEMMHeuristicsHandle.cpp\",\n        \"src/runtime/CL/CLHelpers.cpp\",\n        \"src/runtime/CL/CLMemory.cpp\",\n        \"src/runtime/CL/CLMemoryRegion.cpp\",\n        \"src/runtime/CL/CLOperator.cpp\",\n        \"src/runtime/CL/CLRuntimeContext.cpp\",\n        \"src/runtime/CL/CLScheduler.cpp\",\n        \"src/runtime/CL/CLSubTensor.cpp\",\n        \"src/runtime/CL/CLTensor.cpp\",\n        \"src/runtime/CL/CLTensorAllocator.cpp\",\n        \"src/runtime/CL/CLTuner.cpp\",\n        \"src/runtime/CL/ICLSimpleFunction.cpp\",\n        \"src/runtime/CL/Utils.cpp\",\n        \"src/runtime/CL/functions/CLActivationLayer.cpp\",\n        \"src/runtime/CL/functions/CLArgMinMaxLayer.cpp\",\n        \"src/runtime/CL/functions/CLBatchNormalizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLBatchToSpaceLayer.cpp\",\n        \"src/runtime/CL/functions/CLBitwiseAnd.cpp\",\n        \"src/runtime/CL/functions/CLBitwiseNot.cpp\",\n        \"src/runtime/CL/functions/CLBitwiseOr.cpp\",\n        \"src/runtime/CL/functions/CLBitwiseXor.cpp\",\n        \"src/runtime/CL/functions/CLBoundingBoxTransform.cpp\",\n        \"src/runtime/CL/functions/CLCast.cpp\",\n        \"src/runtime/CL/functions/CLChannelShuffleLayer.cpp\",\n        \"src/runtime/CL/functions/CLComparison.cpp\",\n        \"src/runtime/CL/functions/CLConcatenateLayer.cpp\",\n        \"src/runtime/CL/functions/CLConv3D.cpp\",\n        \"src/runtime/CL/functions/CLConvertFullyConnectedWeights.cpp\",\n        \"src/runtime/CL/functions/CLConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLCopy.cpp\",\n        \"src/runtime/CL/functions/CLCrop.cpp\",\n        \"src/runtime/CL/functions/CLCropResize.cpp\",\n        \"src/runtime/CL/functions/CLDeconvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp\",\n        \"src/runtime/CL/functions/CLDepthConvertLayer.cpp\",\n        \"src/runtime/CL/functions/CLDepthToSpaceLayer.cpp\",\n        \"src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLDequantizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLDirectConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLDirectDeconvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLElementwiseOperations.cpp\",\n        \"src/runtime/CL/functions/CLElementwiseUnaryLayer.cpp\",\n        \"src/runtime/CL/functions/CLFFT1D.cpp\",\n        \"src/runtime/CL/functions/CLFFT2D.cpp\",\n        \"src/runtime/CL/functions/CLFFTConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLFill.cpp\",\n        \"src/runtime/CL/functions/CLFlattenLayer.cpp\",\n        \"src/runtime/CL/functions/CLFloor.cpp\",\n        \"src/runtime/CL/functions/CLFullyConnectedLayer.cpp\",\n        \"src/runtime/CL/functions/CLFuseBatchNormalization.cpp\",\n        \"src/runtime/CL/functions/CLGEMM.cpp\",\n        \"src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLGEMMDeconvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp\",\n        \"src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp\",\n        \"src/runtime/CL/functions/CLGather.cpp\",\n        \"src/runtime/CL/functions/CLGenerateProposalsLayer.cpp\",\n        \"src/runtime/CL/functions/CLIndirectConvolutionLayer.cpp\",\n        \"src/runtime/CL/functions/CLInstanceNormalizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLL2NormalizeLayer.cpp\",\n        \"src/runtime/CL/functions/CLLSTMLayer.cpp\",\n        \"src/runtime/CL/functions/CLLSTMLayerQuantized.cpp\",\n        \"src/runtime/CL/functions/CLLogicalAnd.cpp\",\n        \"src/runtime/CL/functions/CLLogicalNot.cpp\",\n        \"src/runtime/CL/functions/CLLogicalOr.cpp\",\n        \"src/runtime/CL/functions/CLMatMul.cpp\",\n        \"src/runtime/CL/functions/CLMaxUnpoolingLayer.cpp\",\n        \"src/runtime/CL/functions/CLMeanStdDevNormalizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLNormalizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLNormalizePlanarYUVLayer.cpp\",\n        \"src/runtime/CL/functions/CLPReluLayer.cpp\",\n        \"src/runtime/CL/functions/CLPadLayer.cpp\",\n        \"src/runtime/CL/functions/CLPermute.cpp\",\n        \"src/runtime/CL/functions/CLPixelWiseMultiplication.cpp\",\n        \"src/runtime/CL/functions/CLPooling3dLayer.cpp\",\n        \"src/runtime/CL/functions/CLPoolingLayer.cpp\",\n        \"src/runtime/CL/functions/CLPriorBoxLayer.cpp\",\n        \"src/runtime/CL/functions/CLQLSTMLayer.cpp\",\n        \"src/runtime/CL/functions/CLQuantizationLayer.cpp\",\n        \"src/runtime/CL/functions/CLRNNLayer.cpp\",\n        \"src/runtime/CL/functions/CLROIAlignLayer.cpp\",\n        \"src/runtime/CL/functions/CLROIPoolingLayer.cpp\",\n        \"src/runtime/CL/functions/CLRange.cpp\",\n        \"src/runtime/CL/functions/CLReduceMean.cpp\",\n        \"src/runtime/CL/functions/CLReductionOperation.cpp\",\n        \"src/runtime/CL/functions/CLReorgLayer.cpp\",\n        \"src/runtime/CL/functions/CLReshapeLayer.cpp\",\n        \"src/runtime/CL/functions/CLReverse.cpp\",\n        \"src/runtime/CL/functions/CLScale.cpp\",\n        \"src/runtime/CL/functions/CLScatter.cpp\",\n        \"src/runtime/CL/functions/CLSelect.cpp\",\n        \"src/runtime/CL/functions/CLSlice.cpp\",\n        \"src/runtime/CL/functions/CLSoftmaxLayer.cpp\",\n        \"src/runtime/CL/functions/CLSpaceToBatchLayer.cpp\",\n        \"src/runtime/CL/functions/CLSpaceToDepthLayer.cpp\",\n        \"src/runtime/CL/functions/CLSplit.cpp\",\n        \"src/runtime/CL/functions/CLStackLayer.cpp\",\n        \"src/runtime/CL/functions/CLStridedSlice.cpp\",\n        \"src/runtime/CL/functions/CLTile.cpp\",\n        \"src/runtime/CL/functions/CLTranspose.cpp\",\n        \"src/runtime/CL/functions/CLUnstack.cpp\",\n        \"src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp\",\n        \"src/runtime/CL/gemm/CLGEMMDefaultTypeBifrost.cpp\",\n        \"src/runtime/CL/gemm/CLGEMMDefaultTypeMidgard.cpp\",\n        \"src/runtime/CL/gemm/CLGEMMDefaultTypeValhall.cpp\",\n        \"src/runtime/CL/gemm_auto_heuristics/CLGEMMAutoHeuristics.cpp\",\n        \"src/runtime/CL/mlgo/HeuristicTree.cpp\",\n        \"src/runtime/CL/mlgo/MLGOHeuristics.cpp\",\n        \"src/runtime/CL/mlgo/MLGOParser.cpp\",\n        \"src/runtime/CL/mlgo/Utils.cpp\",\n        \"src/runtime/CL/tuners/CLTuningParametersList.cpp\",\n        \"src/runtime/CPP/CPPScheduler.cpp\",\n        \"src/runtime/CPP/ICPPSimpleFunction.cpp\",\n        \"src/runtime/CPP/SingleThreadScheduler.cpp\",\n        \"src/runtime/CPP/functions/CPPBoxWithNonMaximaSuppressionLimit.cpp\",\n        \"src/runtime/CPP/functions/CPPDetectionOutputLayer.cpp\",\n        \"src/runtime/CPP/functions/CPPDetectionPostProcessLayer.cpp\",\n        \"src/runtime/CPP/functions/CPPNonMaximumSuppression.cpp\",\n        \"src/runtime/CPP/functions/CPPPermute.cpp\",\n        \"src/runtime/CPP/functions/CPPTopKV.cpp\",\n        \"src/runtime/CPP/functions/CPPUpsample.cpp\",\n        \"src/runtime/IScheduler.cpp\",\n        \"src/runtime/ISimpleLifetimeManager.cpp\",\n        \"src/runtime/ITensorAllocator.cpp\",\n        \"src/runtime/IWeightsManager.cpp\",\n        \"src/runtime/Memory.cpp\",\n        \"src/runtime/MemoryManagerOnDemand.cpp\",\n        \"src/runtime/NEON/INEOperator.cpp\",\n        \"src/runtime/NEON/INESimpleFunction.cpp\",\n        \"src/runtime/NEON/INESimpleFunctionNoBorder.cpp\",\n        \"src/runtime/NEON/functions/NEActivationLayer.cpp\",\n        \"src/runtime/NEON/functions/NEAddMulAdd.cpp\",\n        \"src/runtime/NEON/functions/NEArgMinMaxLayer.cpp\",\n        \"src/runtime/NEON/functions/NEArithmeticAddition.cpp\",\n        \"src/runtime/NEON/functions/NEArithmeticSubtraction.cpp\",\n        \"src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NEBatchToSpaceLayer.cpp\",\n        \"src/runtime/NEON/functions/NEBitwiseAnd.cpp\",\n        \"src/runtime/NEON/functions/NEBitwiseNot.cpp\",\n        \"src/runtime/NEON/functions/NEBitwiseOr.cpp\",\n        \"src/runtime/NEON/functions/NEBitwiseXor.cpp\",\n        \"src/runtime/NEON/functions/NEBoundingBoxTransform.cpp\",\n        \"src/runtime/NEON/functions/NECast.cpp\",\n        \"src/runtime/NEON/functions/NEChannelShuffleLayer.cpp\",\n        \"src/runtime/NEON/functions/NEConcatenateLayer.cpp\",\n        \"src/runtime/NEON/functions/NEConv3D.cpp\",\n        \"src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp\",\n        \"src/runtime/NEON/functions/NEConvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NECopy.cpp\",\n        \"src/runtime/NEON/functions/NECropResize.cpp\",\n        \"src/runtime/NEON/functions/NEDeconvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDepthConvertLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDepthToSpaceLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDequantizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDetectionPostProcessLayer.cpp\",\n        \"src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NEElementwiseOperations.cpp\",\n        \"src/runtime/NEON/functions/NEElementwiseUnaryLayer.cpp\",\n        \"src/runtime/NEON/functions/NEFFT1D.cpp\",\n        \"src/runtime/NEON/functions/NEFFT2D.cpp\",\n        \"src/runtime/NEON/functions/NEFFTConvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NEFill.cpp\",\n        \"src/runtime/NEON/functions/NEFillBorder.cpp\",\n        \"src/runtime/NEON/functions/NEFlattenLayer.cpp\",\n        \"src/runtime/NEON/functions/NEFloor.cpp\",\n        \"src/runtime/NEON/functions/NEFullyConnectedLayer.cpp\",\n        \"src/runtime/NEON/functions/NEFuseBatchNormalization.cpp\",\n        \"src/runtime/NEON/functions/NEGEMM.cpp\",\n        \"src/runtime/NEON/functions/NEGEMMConv2d.cpp\",\n        \"src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp\",\n        \"src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp\",\n        \"src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp\",\n        \"src/runtime/NEON/functions/NEGather.cpp\",\n        \"src/runtime/NEON/functions/NEGenerateProposalsLayer.cpp\",\n        \"src/runtime/NEON/functions/NEInstanceNormalizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NEL2NormalizeLayer.cpp\",\n        \"src/runtime/NEON/functions/NELSTMLayer.cpp\",\n        \"src/runtime/NEON/functions/NELSTMLayerQuantized.cpp\",\n        \"src/runtime/NEON/functions/NELogical.cpp\",\n        \"src/runtime/NEON/functions/NEMatMul.cpp\",\n        \"src/runtime/NEON/functions/NEMaxUnpoolingLayer.cpp\",\n        \"src/runtime/NEON/functions/NEMeanStdDevNormalizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NENormalizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NEPReluLayer.cpp\",\n        \"src/runtime/NEON/functions/NEPadLayer.cpp\",\n        \"src/runtime/NEON/functions/NEPermute.cpp\",\n        \"src/runtime/NEON/functions/NEPixelWiseMultiplication.cpp\",\n        \"src/runtime/NEON/functions/NEPooling3dLayer.cpp\",\n        \"src/runtime/NEON/functions/NEPoolingLayer.cpp\",\n        \"src/runtime/NEON/functions/NEPriorBoxLayer.cpp\",\n        \"src/runtime/NEON/functions/NEQLSTMLayer.cpp\",\n        \"src/runtime/NEON/functions/NEQuantizationLayer.cpp\",\n        \"src/runtime/NEON/functions/NERNNLayer.cpp\",\n        \"src/runtime/NEON/functions/NEROIAlignLayer.cpp\",\n        \"src/runtime/NEON/functions/NEROIPoolingLayer.cpp\",\n        \"src/runtime/NEON/functions/NERange.cpp\",\n        \"src/runtime/NEON/functions/NEReduceMean.cpp\",\n        \"src/runtime/NEON/functions/NEReductionOperation.cpp\",\n        \"src/runtime/NEON/functions/NEReorderLayer.cpp\",\n        \"src/runtime/NEON/functions/NEReorgLayer.cpp\",\n        \"src/runtime/NEON/functions/NEReshapeLayer.cpp\",\n        \"src/runtime/NEON/functions/NEReverse.cpp\",\n        \"src/runtime/NEON/functions/NEScale.cpp\",\n        \"src/runtime/NEON/functions/NEScatter.cpp\",\n        \"src/runtime/NEON/functions/NESelect.cpp\",\n        \"src/runtime/NEON/functions/NESlice.cpp\",\n        \"src/runtime/NEON/functions/NESoftmaxLayer.cpp\",\n        \"src/runtime/NEON/functions/NESpaceToBatchLayer.cpp\",\n        \"src/runtime/NEON/functions/NESpaceToDepthLayer.cpp\",\n        \"src/runtime/NEON/functions/NESplit.cpp\",\n        \"src/runtime/NEON/functions/NEStackLayer.cpp\",\n        \"src/runtime/NEON/functions/NEStridedSlice.cpp\",\n        \"src/runtime/NEON/functions/NETile.cpp\",\n        \"src/runtime/NEON/functions/NETranspose.cpp\",\n        \"src/runtime/NEON/functions/NEUnstack.cpp\",\n        \"src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp\",\n        \"src/runtime/OMP/OMPScheduler.cpp\",\n        \"src/runtime/OffsetLifetimeManager.cpp\",\n        \"src/runtime/OffsetMemoryPool.cpp\",\n        \"src/runtime/OperatorTensor.cpp\",\n        \"src/runtime/PoolManager.cpp\",\n        \"src/runtime/RuntimeContext.cpp\",\n        \"src/runtime/Scheduler.cpp\",\n        \"src/runtime/SchedulerFactory.cpp\",\n        \"src/runtime/SchedulerUtils.cpp\",\n        \"src/runtime/SubTensor.cpp\",\n        \"src/runtime/Tensor.cpp\",\n        \"src/runtime/TensorAllocator.cpp\",\n        \"src/runtime/Utils.cpp\",\n        \"src/runtime/experimental/low_level/CpuGemmAssemblyDispatch.cpp\",\n        \"src/runtime/experimental/operators/CpuActivation.cpp\",\n        \"src/runtime/experimental/operators/CpuAdd.cpp\",\n        \"src/runtime/experimental/operators/CpuDepthwiseConv2d.cpp\",\n        \"src/runtime/experimental/operators/CpuDequantize.cpp\",\n        \"src/runtime/experimental/operators/CpuElementwise.cpp\",\n        \"src/runtime/experimental/operators/CpuGEMMLowp.cpp\",\n        \"src/runtime/experimental/operators/CpuGemm.cpp\",\n        \"src/runtime/experimental/operators/CpuGemmConv2d.cpp\",\n        \"src/runtime/experimental/operators/CpuGemmDirectConv2d.cpp\",\n        \"src/runtime/experimental/operators/CpuMul.cpp\",\n        \"src/runtime/experimental/operators/CpuQuantize.cpp\",\n        \"src/runtime/experimental/operators/CpuSoftmax.cpp\",\n        \"src/runtime/experimental/operators/CpuSub.cpp\",\n        \"src/runtime/experimental/operators/CpuTranspose.cpp\",\n        \"src/runtime/experimental/operators/CpuWinogradConv2d.cpp\",\n        \"src/runtime/heuristics/direct_conv/ClDirectConvDefaultConfigBifrost.cpp\",\n        \"src/runtime/heuristics/direct_conv/ClDirectConvDefaultConfigValhall.cpp\",\n        \"src/runtime/heuristics/dwc_native/ClDWCNativeDefaultConfigBifrost.cpp\",\n        \"src/runtime/heuristics/dwc_native/ClDWCNativeDefaultConfigValhall.cpp\",\n        \"src/runtime/heuristics/dwc_native/ClDWCNativeHeuristicsHelpers.cpp\",\n        \"src/runtime/heuristics/indirect_conv/ClIndirectConvDefaultConfigValhall.cpp\",\n        \"src/runtime/heuristics/matmul_native/ClMatMulNativeDefaultConfigValhall.cpp\",\n        \"src/runtime/heuristics/matmul_native/ClMatMulNativeDefaultVariantValhall.cpp\",\n        \"src/runtime/heuristics/matmul_native/ClMatMulNativeHelpers.cpp\",\n        \"utils/CommonGraphOptions.cpp\",\n        \"utils/GraphUtils.cpp\",\n        \"utils/Utils.cpp\",\n        \n    ],\n    arch: {\n        arm: {\n            srcs: [\n                \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a53.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a55r1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/generic.cpp\",\n                \n            ],\n        },\n        arm64: {\n            srcs: [\n                \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/a64_s8q_3x3_dot.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/a64_u8q_3x3_dot.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/sve_s8q_3x3_dot.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/sve_u8q_3x3_dot.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8qs_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_3x3_s1_4rows_mla_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_3x3_s2_4rows_mla_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_5x5_s1_4rows_mla_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_5x5_s2_4rows_mla_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8qs_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8q_nhwc_max_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_bf16fp32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp16_mla_6x32/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32_mla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32bf16fp32_mmla_4x24/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32bf16fp32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_bf16fp32_dot_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_bf16fp32_mmla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_fp16_mla_8x24/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_fp32_mla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/a55r1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/x1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/a55r1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/x1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/a55r1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/x1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_bf16fp32_dot_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_bf16fp32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp16_mla_6x32/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp16_mla_6x32/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_4x24/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_4x24/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_6x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_8x4/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_8x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32bf16fp32_mmla_4x24/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32bf16fp32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_dot_4x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_dot_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_mmla_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_dot_6x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_dot_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_dot_6x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_dot_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_dot_4x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_dot_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_mmla_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_dot_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_mmla_4x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8s32_dot_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8s32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_dot_6x16/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_dot_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_mmla_6x16/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_dot_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_dot_8x12/x1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_mmla_8x12/a510.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_mmla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_s8s32_mmla_8x12/a510.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_s8s32_mmla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8s8s32_mmla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8u32_mmla_8x12/a510.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8u32_mmla_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a53.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a55r1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/x1.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x6/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_fp32_mla_6x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_fp32_mla_8x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_6x4/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_6x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_8x4/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_8x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_6x4/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_6x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_8x4/a55.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_8x4/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_bf16fp32_dot_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp16_mla_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp16fp32fp16_dot_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp32_mla_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp32bf16fp32_dot_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_s8qa_dot_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_u8qa_dot_16VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_1VLx4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_2VLx2VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_4VLx1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_bf16fp32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp16_mla_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp16_mla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32_mla_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32_mla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32bf16fp32_mmla_4x6VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_bf16fp32_dot_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_bf16fp32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp16_mla_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp16_mla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp32_mla_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp32_mla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_bf16fp32_dot_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_bf16fp32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp16_mla_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp16_mla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_8x1VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_8x1VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32bf16fp32_mmla_4x6VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32bf16fp32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qa_dot_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qa_mmla_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qs_dot_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qs_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_dot_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_dot_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8qa_dot_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8qa_mmla_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_dot_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_mmla_4x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8s32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_dot_6x4VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_dot_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_mmla_6x4VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_bf16fp32_dot_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_bf16fp32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp16_mla_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp16_mla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mla_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_dot_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_dot_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8s8s32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_dot_8x3VL/a64fx.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_dot_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_mmla_8x3VL/generic.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/input_transforms/a64_fp16_6x6.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/input_transforms/a64_fp32_6x6.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/input_transforms/sme_fp32_mla_6x6.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/input_transforms/sve_fp32_6x6.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/output_transforms/a64_fp16_4x4_3x3.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/output_transforms/sme_fp32_mopa_4x4_3x3.cpp\",\n                \"src/core/NEON/kernels/convolution/winograd/weight_transforms/a64_fp16_4x4_3x3.cpp\",\n                \n            ],\n        },\n    },\n    rtti: true,\n}"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 11.939453125,
          "content": "# Copyright (c) 2023-2024 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nload(\"@bazel_skylib//rules:common_settings.bzl\", \"string_flag\")\nload(\"@bazel_skylib//rules:common_settings.bzl\", \"bool_flag\")\n\n#---------------------------------------------------------------------\n# Config setting for Tensorflow build\nconfig_setting(\n    name = \"build_with_acl\",\n    define_values = {\n        \"build_with_acl\": \"true\",\n    },\n    visibility = [\"//visibility:public\"],\n)\n\n#---------------------------------------------------------------------\n# Flags for build options. Example: --//:debug=true\n# All flags have aliases in .bazelrc so can use for example --debug=true when building\nbool_flag(\n    name = \"debug\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"Werror\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"logging\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"openmp\",\n    build_setting_default = True,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"cppthreads\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"enable_bf16_validation\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"enable_sve_validation\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nbool_flag(\n    name = \"thread_local_scheduler\",\n    build_setting_default = True,\n    visibility = [\"//visibility:public\"],\n)\n\nstring_flag(\n    name = \"arch\",\n    build_setting_default = \"armv8-a\",\n    values = [\n        \"armv8-a\",\n        \"armv8.2-a+fp16\"\n    ]\n)\n\n#---------------------------------------------------------------------\n# Flag variables\nconfig_setting(\n    name = \"debug_flag\",\n    flag_values = {\n        \":debug\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"Werror_flag\",\n    flag_values = {\n        \":Werror\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"logging_flag\",\n    flag_values = {\n        \":logging\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"openmp_flag\",\n    flag_values = {\n        \":openmp\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"cppthreads_flag\",\n    flag_values = {\n        \":cppthreads\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"bf16_validation_flag\",\n    flag_values = {\n        \":enable_bf16_validation\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"sve_validation_flag\",\n    flag_values = {\n        \":enable_sve_validation\": \"true\",\n    },\n)\n\nconfig_setting(\n    name = \"arch_armv8-a\",\n    flag_values = {\n        \"arch\": \"armv8-a\"\n    }\n)\n\nconfig_setting(\n    name = \"arch_armv8.2-a+fp16\",\n    flag_values = {\n        \"arch\": \"armv8.2-a+fp16\"\n    }\n)\n\nconfig_setting(\n    name = \"thread_local_scheduler_flag\",\n    flag_values = {\n        \":thread_local_scheduler\": \"true\",\n    },\n)\n\n#---------------------------------------------------------------------\n# Common defines used for all targets\ncc_library(\n    name = \"common_defines\",\n    defines = [\n                  \"ENABLE_NEON\",\n                  \"ARM_COMPUTE_CPU_ENABLED\",\n                  \"ARM_COMPUTE_ENABLE_NEON\",\n                  \"ARM_COMPUTE_ENABLE_I8MM\",\n                  \"ENABLE_FP32_KERNELS\",\n                  \"ENABLE_QASYMM8_KERNELS\",\n                  \"ENABLE_QASYMM8_SIGNED_KERNELS\",\n                  \"ENABLE_QSYMM16_KERNELS\",\n                  \"ENABLE_INTEGER_KERNELS\",\n                  \"ENABLE_NHWC_KERNELS\",\n                  \"ENABLE_NCHW_KERNELS\",\n                  \"ARM_COMPUTE_GRAPH_ENABLED\",\n                  \"ARM_COMPUTE_ENABLE_SVEF32MM\",\n                  \"ARM_COMPUTE_ENABLE_FIXED_FORMAT_KERNELS\",\n                  \"_GLIBCXX_USE_NANOSLEEP\"\n              ] + select({\n                  \"//:debug_flag\": [\n                      \"ARM_COMPUTE_DEBUG_ENABLED\",\n                      \"ARM_COMPUTE_ASSERTS_ENABLED\",\n                  ],\n                  \"//conditions:default\": [],\n              }) +\n              select({\n                  \"//:logging_flag\": [\"ARM_COMPUTE_LOGGING_ENABLED\"],\n                  \"//conditions:default\": [],\n              }) +\n              select({\n                  \"//:cppthreads_flag\": [\"ARM_COMPUTE_CPP_SCHEDULER\"],\n                  \"//conditions:default\": [],\n              }) +\n              select({\n                  \"//:openmp_flag\": [\"ARM_COMPUTE_OPENMP_SCHEDULER\"],\n                  \"//conditions:default\": [],\n              }) +\n              select({\n                  \"//:arch_armv8-a\": [],\n                  \"//:arch_armv8.2-a+fp16\": [\"ENABLE_FP16_KERNELS\", \"ARM_COMPUTE_ENABLE_FP16\"],\n                  \"//conditions:default\": [],\n              }) +\n              select({\n                  \"//:thread_local_scheduler_flag\": [\"ARM_COMPUTE_THREAD_LOCAL_SCHEDULER\"],\n                  \"//conditions:default\": [],\n              }),\n    visibility = [\"//visibility:public\"],\n)\n\n#---------------------------------------------------------------------\n# Rule for creating file \"arm_compute_version.embed\"\ngenrule(\n    name = \"create_version_file\",\n    srcs = [\"SConscript\"],\n    outs = [\"arm_compute_version.embed\"],\n    cmd = \"$(location //scripts:print_version_file) 'n/a' 'n/a' 'true' > $@\",\n    tools = [\"//scripts:print_version_file\"],\n    visibility = [\"//visibility:public\"],\n)\n\n#---------------------------------------------------------------------\n# Graph library\n\ncc_library(\n    name = \"arm_compute_graph\",\n    srcs = [\"//src:arm_compute_graph_srcs\"],\n    copts = [] + select({\n                  \"//:arch_armv8-a\": [\"-march=armv8-a\"],\n                  \"//:arch_armv8.2-a+fp16\": [\"-march=armv8.2-a+fp16\"],\n                  \"//conditions:default\": [\"-march=armv8-a\"],\n              }) + select({\n                \"//:debug_flag\": [\n                    \"-O0\",\n                    \"-g\",\n                    \"-gdwarf-2\",\n                ],\n                \"//conditions:default\": [\"-O3\"],\n            }) +\n            select({\n                \"//:openmp_flag\": [\"-fopenmp\"],\n                \"//conditions:default\": [],\n            }) +\n            select({\n                \"//:Werror_flag\": [\"-Werror\"],\n                \"//conditions:default\": [],\n            }),\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"arm_compute\",\n        \"//:common_defines\",\n        \"//arm_compute:graph_headers\",\n    ],\n    alwayslink = True,\n)\n\n#---------------------------------------------------------------------\n# SVE2 library\n\ncc_library(\n    name = \"arm_compute_sve2\",\n    srcs = [\"//src:arm_compute_sve2_srcs\"],\n    copts = [\n                \"-march=armv8.6-a+sve2+fp16+dotprod\",\n            ] + select({\n                \"//:debug_flag\": [\n                    \"-O0\",\n                    \"-g\",\n                    \"-gdwarf-2\",\n                ],\n                \"//conditions:default\": [\"-O3\"],\n            }) +\n            select({\n                \"//:openmp_flag\": [\"-fopenmp\"],\n                \"//conditions:default\": [],\n            }) +\n            select({\n                \"//:Werror_flag\": [\"-Werror\"],\n                \"//conditions:default\": [],\n            }),\n    includes = [\n        \"src/core/NEON/kernels/arm_conv\",\n        \"src/core/NEON/kernels/arm_gemm\",\n        \"src/core/NEON/kernels/assembly\",\n        \"src/core/cpu/kernels/assembly\",\n        \"src/cpu/kernels/assembly\",\n    ],\n    linkopts = select({\n        \"//:openmp_flag\": [\"-fopenmp\"],\n        \"//conditions:default\": [],\n    }),\n    local_defines = [\n        \"ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_SVE2\",\n        \"ARM_COMPUTE_ENABLE_BF16\",\n    ],\n    deps = [\n        \"//:common_defines\",\n        \"//arm_compute:core_headers\",\n        \"//arm_compute:runtime_headers\",\n        \"//include\",\n        \"//support\",\n    ],\n    alwayslink = True,\n)\n\n#---------------------------------------------------------------------\n# SVE library\n\ncc_library(\n    name = \"arm_compute_sve\",\n    srcs = [\"//src:arm_compute_sve_srcs\"],\n    copts = [\n                \"-march=armv8.2-a+sve+fp16+dotprod\",\n            ] + select({\n                \"//:debug_flag\": [\n                    \"-O0\",\n                    \"-g\",\n                    \"-gdwarf-2\",\n                ],\n                \"//conditions:default\": [\"-O3\"],\n            }) +\n            select({\n                \"//:openmp_flag\": [\"-fopenmp\"],\n                \"//conditions:default\": [],\n            }) +\n            select({\n                \"//:Werror_flag\": [\"-Werror\"],\n                \"//conditions:default\": [],\n            }),\n    includes = [\n        \"src/core/NEON/kernels/arm_conv\",\n        \"src/core/NEON/kernels/arm_gemm\",\n        \"src/core/NEON/kernels/assembly\",\n        \"src/core/cpu/kernels/assembly\",\n        \"src/cpu/kernels/assembly\",\n    ],\n    linkopts = select({\n        \"//:openmp_flag\": [\"-fopenmp\"],\n        \"//conditions:default\": [],\n    }),\n    local_defines = [\n        \"ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_BF16\",\n    ],\n    deps = [\n        \"//:common_defines\",\n        \"//arm_compute:core_headers\",\n        \"//arm_compute:runtime_headers\",\n        \"//include\",\n        \"//support\",\n    ],\n    alwayslink = True,\n)\n\n#---------------------------------------------------------------------\n# Core and Runtime library\n\ncc_library(\n    name = \"arm_compute\",\n    srcs = [\"//src:arm_compute_srcs\"],\n    hdrs = glob([\n        \"core/NEON/kernels/**/*.h\",\n        \"core/NEON/kernels/**/*.hpp\",\n        \"**/*.inl\",\n    ]) + [\n        \"//:create_version_file\",\n    ],\n    copts = [] + select({\n                  \"//:arch_armv8-a\": [\"-march=armv8-a\"],\n                  \"//:arch_armv8.2-a+fp16\": [\"-march=armv8.2-a+fp16\"],\n                  \"//conditions:default\": [\"-march=armv8-a\"],\n              }) + select({\n                \"//:debug_flag\": [\n                    \"-O0\",\n                    \"-g\",\n                    \"-gdwarf-2\",\n                ],\n                \"//conditions:default\": [\"-O3\"],\n            }) +\n            select({\n                \"//:openmp_flag\": [\"-fopenmp\"],\n                \"//conditions:default\": [],\n            }) +\n            select({\n                \"//:Werror_flag\": [\"-Werror\"],\n                \"//conditions:default\": [],\n            }),\n    includes = [\n        \"arm_compute/runtime\",\n        \"src/core/NEON/kernels/arm_gemm\",\n        \"src/core/NEON/kernels/assembly\",\n        \"src/core/NEON/kernels/convolution/common\",\n        \"src/core/NEON/kernels/convolution/winograd\",\n        \"src/core/cpu/kernels/assembly\",\n        \"src/cpu/kernels/assembly\",\n    ],\n    linkopts = select({\n        \"//:openmp_flag\": [\"-fopenmp\"],\n        \"//conditions:default\": [],\n    }),\n    local_defines = [\n        \"ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_SVE\",\n        \"ARM_COMPUTE_ENABLE_BF16\",\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//:common_defines\",\n        \"//arm_compute:core_headers\",\n        \"//arm_compute:graph_headers\",\n        \"//arm_compute:runtime_headers\",\n        \"//include\",\n        \"//support\",\n        \"//utils\",\n        \"//:arm_compute_sve\",\n        \"//:arm_compute_sve2\"\n    ],\n    alwayslink = True,\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.08203125,
          "content": "# Copyright (c) 2023-2024 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\ncmake_minimum_required(VERSION 3.13 FATAL_ERROR)\n\n# ---------------------------------------------------------------------\n# Project ArmCompute\n\nlist(APPEND CMAKE_MESSAGE_CONTEXT ArmCompute)\nproject(\n  ArmCompute\n  VERSION 45.0.0\n  DESCRIPTION\n    \"The Arm Compute Library is a collection of low-level machine learning functions optimized for ArmÂ® CortexÂ®-A CPU and ArmÂ® Maliâ¢ GPU architectures\"\n  LANGUAGES C CXX ASM)\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_C_EXTENSIONS OFF)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Options.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Version.cmake)\n\n# Require at least gcc/g++ 11) CMAKE_CXX_COMPILER_VERSION OR\nif(CMAKE_C_COMPILER_VERSION VERSION_LESS 10.2 OR CMAKE_CXX_COMPILER_VERSION\n                                                 VERSION_LESS 10.2)\n  message(\n    FATAL_ERROR \"gcc and g++ version => 10.2 is required for building project!\")\nendif()\n\n# ---------------------------------------------------------------------\n# Configuration\n\nset(CMAKE_CXX_FLAGS_DEBUG \"-O0 -g -gdwarf-2 -DARM_COMPUTE_ASSERTS_ENABLED -DARM_COMPUTE_DEBUG_ENABLED\")\nset(CMAKE_CXX_FLAGS_RELEASE \"-O3\")\n# Default to Release Build\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE\n      \"Release\"\n      CACHE\n        STRING\n        \"Choose build type, available options are: Debug, Release, RelWithDebInfo\"\n        FORCE)\nendif()\n\n# ---------------------------------------------------------------------\n# Information\n\nmessage(STATUS \"Arm Compute Library ${PROJECT_VERSION}\")\n\nmessage(VERBOSE \"-----------------------------------------------------\")\nmessage(VERBOSE \"Build information:\")\nlist(APPEND CMAKE_MESSAGE_INDENT \"  \")\nmessage(VERBOSE \"Host system: ${CMAKE_SYSTEM_NAME}\")\nmessage(VERBOSE \"Host processor: ${CMAKE_SYSTEM_PROCESSOR}\")\nmessage(VERBOSE \"Build path: ${CMAKE_CURRENT_BINARY_DIR}\")\nmessage(VERBOSE \"Enable OpenCL acceleration: ${ENABLE_OPENCL}\")\nmessage(VERBOSE \"Enable CPU acceleration: ${ENABLE_NEON}\")\nlist(POP_BACK CMAKE_MESSAGE_INDENT)\nmessage(VERBOSE \"-----------------------------------------------------\")\n\n# ---------------------------------------------------------------------\n# Compile options and features\n\nset(COMMON_CXX_FLAGS\n    -Wall\n    -DARCH_ARM\n    -Wextra\n    -Wdisabled-optimization\n    -Wformat=2\n    -Winit-self\n    -Wstrict-overflow=2\n    -Wswitch-default\n    -Woverloaded-virtual\n    -Wformat-security\n    -Wctor-dtor-privacy\n    -Wsign-promo\n    -Weffc++\n    -Wno-overlength-strings\n    -Wno-ignored-attributes\n    -Wlogical-op\n    -Wnoexcept\n    -Wstrict-null-sentinel\n    -Wno-misleading-indentation)\n\n# Disable note popups on compiler ABI changes\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  add_compile_options(\"-Wno-psabi\")\nendif()\n\n# Compile with -Werror if ARM_COMPUTE_WERROR set\nif(ARM_COMPUTE_WERROR)\n  add_compile_options(\"-Werror\")\nendif()\n\n# Compile with -fno-exceptions flag and define ARM_COMPUTE_EXCEPTIONS_DISABLED\n# if ARM_COMPUTE_EXCEPTIONS not set\nif(NOT ARM_COMPUTE_EXCEPTIONS)\n  add_compile_options(\"-fno-exceptions\")\n  add_definitions(-DARM_COMPUTE_EXCEPTIONS_DISABLED)\nendif()\n\n# Link OpenMP libraries if ARM_COMPUTE_OPENMP set\nif(ARM_COMPUTE_OPENMP)\n  find_package(OpenMP)\n  if(OpenMP_CXX_FOUND)\n    link_libraries(OpenMP::OpenMP_CXX)\n    add_definitions(-DARM_COMPUTE_OPENMP_SCHEDULER)\n  else()\n    message(FATAL_ERROR \"OPENMP was set but no OpenMP library was found!\")\n  endif()\nendif()\n\n# ---------------------------------------------------------------------\n# SVE Object Library\n\nadd_library(arm_compute_sve OBJECT \"\")\ntarget_compile_options(arm_compute_sve\n                       PRIVATE \"-march=armv8.2-a+sve+fp16+dotprod\"\n                       PRIVATE \"-fPIC\")\ntarget_compile_definitions(arm_compute_sve PRIVATE ARM_COMPUTE_ENABLE_BF16)\ntarget_compile_definitions(arm_compute_sve PRIVATE ENABLE_SVE)\ntarget_compile_definitions(arm_compute_sve PRIVATE ARM_COMPUTE_ENABLE_SVE)\ntarget_include_directories(\n  arm_compute_sve\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         ${CMAKE_CURRENT_SOURCE_DIR}\n  PUBLIC src\n         src/core/NEON/kernels/arm_conv\n         src/core/NEON/kernels/arm_gemm\n         src/core/NEON/kernels/assembly\n         src/core/cpu/kernels/assembly\n         src/cpu/kernels/assembly\n         src/core/NEON/kernels/arm_gemm/merges)\n\n# ---------------------------------------------------------------------\n# SVE2 Object Library\n\nadd_library(arm_compute_sve2 OBJECT \"\")\ntarget_compile_options(arm_compute_sve2\n                       PRIVATE \"-march=armv8.6-a+sve2+fp16+dotprod\"\n                       PRIVATE \"-fPIC\")\ntarget_compile_definitions(arm_compute_sve2 PRIVATE ARM_COMPUTE_ENABLE_SVE2)\ntarget_compile_definitions(arm_compute_sve2 PRIVATE ARM_COMPUTE_ENABLE_BF16)\ntarget_compile_definitions(arm_compute_sve2 PRIVATE ENABLE_SVE)\ntarget_compile_definitions(arm_compute_sve2 PRIVATE ARM_COMPUTE_ENABLE_SVE)\ntarget_include_directories(\n  arm_compute_sve2\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         ${CMAKE_CURRENT_SOURCE_DIR}\n  PUBLIC src\n         src/core/NEON/kernels/arm_conv\n         src/core/NEON/kernels/arm_gemm\n         src/core/NEON/kernels/assembly\n         src/core/cpu/kernels/assembly\n         src/cpu/kernels/assembly\n         src/core/NEON/kernels/arm_gemm/merges)\n\n# ---------------------------------------------------------------------\n# Core Library\n\nadd_library(arm_compute \"\")\ntarget_compile_options(arm_compute PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\ntarget_compile_definitions(arm_compute PRIVATE ARM_COMPUTE_ENABLE_BF16)\ntarget_compile_definitions(arm_compute PRIVATE ENABLE_SVE)\ntarget_compile_definitions(arm_compute PRIVATE ARM_COMPUTE_ENABLE_SVE)\ntarget_include_directories(\n  arm_compute\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE src\n          src/cpu/kernels/assembly\n          src/core/NEON/kernels/arm_gemm\n          src/core/NEON/kernels/assembly\n          src/core/NEON/kernels/convolution/common\n          src/core/NEON/kernels/arm_conv/depthwise\n          src/core/NEON/kernels/convolution/winograd)\ntarget_compile_options(arm_compute PUBLIC ${COMMON_CXX_FLAGS})\n\nadd_library(ArmCompute::Core ALIAS arm_compute)\n\n# arm_compute_sve and arm_compute_sve2 obj files will not be public in the arm_compute.so\ntarget_link_libraries(\n  arm_compute PRIVATE $<TARGET_OBJECTS:arm_compute_sve>\n              PRIVATE $<TARGET_OBJECTS:arm_compute_sve2>)\n\n# ---------------------------------------------------------------------\n# Graph Library\n\nadd_library(arm_compute_graph \"\")\ntarget_compile_options(arm_compute_graph PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\ntarget_compile_definitions(arm_compute_graph PRIVATE ENABLE_SVE)\ntarget_compile_definitions(arm_compute_graph PRIVATE ARM_COMPUTE_ENABLE_SVE)\n# add_subdirectory(src/graph)\n\ntarget_include_directories(\n  arm_compute_graph\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE src\n          src/cpu/kernels/assembly\n          src/core/NEON/kernels/arm_gemm\n          src/core/NEON/kernels/assembly\n          src/core/NEON/kernels/convolution/common\n          src/core/NEON/kernels/arm_conv/depthwise\n          src/core/NEON/kernels/convolution/winograd)\ntarget_compile_options(arm_compute_graph PUBLIC ${COMMON_CXX_FLAGS})\n\nadd_library(ArmCompute::Graph ALIAS arm_compute_graph)\n\n# ---------------------------------------------------------------------\n# Library Target Sources\nadd_subdirectory(src)\n\nif(ARM_COMPUTE_BUILD_TESTING)\n  # ---------------------------------------------------------------------\n  # Validation Framework Library\n  add_library(arm_compute_validation_framework \"\")\n  # target_compile_options(arm_compute_validation_framework PRIVATE\n  # \"-march=armv8.2-a\")\n  target_compile_options(arm_compute_validation_framework\n                        PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\n\n  add_subdirectory(tests)\n  target_include_directories(\n    arm_compute_validation_framework\n    PUBLIC $<INSTALL_INTERFACE:include>\n          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n          ${CMAKE_CURRENT_SOURCE_DIR})\n  target_compile_options(arm_compute_validation_framework\n                        PUBLIC ${COMMON_CXX_FLAGS})\n                        target_link_libraries(\n                          arm_compute_validation_framework\n      PUBLIC arm_compute arm_compute_graph)\n\n  # ---------------------------------------------------------------------\n  # Validation Binary\n\n  add_executable(arm_compute_validation \"\")\n  target_compile_options(arm_compute_validation PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\n  if(ARM_COMPUTE_ENABLE_BF16_VALIDATION)\n    target_compile_definitions(arm_compute_validation PRIVATE ARM_COMPUTE_ENABLE_BF16)\n  endif()\n  if(ARM_COMPUTE_ENABLE_SVE_VALIDATION)\n    target_compile_definitions(arm_compute_validation PRIVATE ENABLE_SVE)\n    target_compile_definitions(arm_compute_validation PRIVATE ARM_COMPUTE_ENABLE_SVE)\n  endif()\n  add_subdirectory(tests/validation)\n  target_compile_options(arm_compute_validation PUBLIC ${COMMON_CXX_FLAGS})\n  set_target_properties(\n    arm_compute_validation PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                                      \"${CMAKE_BINARY_DIR}/validation\")\n  target_link_libraries(\n    arm_compute_validation\n    PUBLIC arm_compute arm_compute_graph arm_compute_validation_framework\n           arm_compute_sve)\n  target_link_directories(arm_compute_validation PUBLIC tests)\n\n  # ---------------------------------------------------------------------\n  # Benchmark Binary\n\n  add_executable(arm_compute_benchmark)\n  target_compile_options(arm_compute_benchmark PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\n\n  add_subdirectory(tests/benchmark)\n  target_compile_options(arm_compute_benchmark PUBLIC ${COMMON_CXX_FLAGS})\n  set_target_properties(\n    arm_compute_benchmark PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                                     \"${CMAKE_BINARY_DIR}/validation\")\n  target_link_libraries(\n    arm_compute_benchmark PUBLIC arm_compute arm_compute_graph\n                                 arm_compute_validation_framework)\n\nendif() # ARM_COMPUTE_BUILD_TESTING\n# ---------------------------------------------------------------------\n# Examples Binaries\n\nif(ARM_COMPUTE_BUILD_EXAMPLES)\n\n  add_subdirectory(examples)\n\n  # Graph Examples\n  foreach(test_name ${EXAMPLE_GRAPH_NAMES})\n    add_executable(\n      ${test_name} \"examples/${test_name}.cpp\" utils/Utils.cpp\n                   utils/GraphUtils.cpp utils/CommonGraphOptions.cpp)\n    target_compile_options(${test_name} PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\n    set_target_properties(\n      ${test_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                              \"${CMAKE_BINARY_DIR}/examples\")\n    target_link_libraries(${test_name} PUBLIC arm_compute\n                                              arm_compute_graph arm_compute_sve)\n  endforeach()\n\n  # NEON Examples\n  foreach(test_name ${EXAMPLE_NEON_NAMES})\n    add_executable(${test_name} \"examples/${test_name}.cpp\" utils/Utils.cpp)\n    target_compile_options(${test_name} PRIVATE \"-march=${ARM_COMPUTE_ARCH}\")\n    set_target_properties(\n      ${test_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                              \"${CMAKE_BINARY_DIR}/examples\")\n    target_link_libraries(${test_name} PUBLIC arm_compute)\n  endforeach()\n\nendif() # ARM_COMPUTE_BUILD_EXAMPLES\n\n# Install libraries\ninstall(TARGETS arm_compute arm_compute_graph\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n# Install test executables\nif(ARM_COMPUTE_BUILD_TESTING)\n  install(TARGETS arm_compute_validation_framework arm_compute_benchmark arm_compute_validation\n          RUNTIME DESTINATION \"${CMAKE_INSTALL_LIBDIR}/tests\"\n          LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}/tests\"\n          ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}/tests\")\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.6064453125,
          "content": "Please read https://artificial-intelligence.sites.arm.com/computelibrary/latest/contribution_guidelines.xhtml\n\nHere on github we only publish a snapshot of the main development branch for each release, that's the reason why we don't accept pull requests.\n\nPlease submit your patch for review to review.mlplatform.org.\n\nThe development is structured in the following way:\n\n    Release repository: https://github.com/arm-software/ComputeLibrary\n    Development repository: https://review.mlplatform.org/#/admin/projects/ml/ComputeLibrary\n    Please report issues here: https://github.com/ARM-software/ComputeLibrary/issues\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.37109375,
          "content": "\n> **â  Deprecation Notice**\n> 24.01 announcement: NCHW data format specific optimizations will gradually be removed from the code base in\n> future releases. The implication of this is that the user is expected to translate NCHW models into NHWC in\n> order to benefit from the optimizations.\n\n<br>\n<div align=\"center\">\n <img src=\"https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png\"/><br><br>\n</div>\n\n# Compute Library ![](https://img.shields.io/badge/latest_release-24.12-green)\n\n\nThe Compute Library is a collection of low-level machine learning functions optimized for ArmÂ® CortexÂ®-A, ArmÂ® NeoverseÂ® and ArmÂ® Maliâ¢ GPUs architectures.<br>\n\nThe library provides superior performance to other open source alternatives and immediate support for new ArmÂ® technologies e.g. SVE2.\n\nKey Features:\n\n- Open source software available under a permissive MIT license\n- Over 100 machine learning functions for CPU and GPU\n- Multiple convolution algorithms (GeMM, Winograd, FFT, Direct and indirect-GeMM)\n- Support for multiple data types: FP32, FP16, INT8, UINT8, BFLOAT16\n- Micro-architecture optimization for key ML primitives\n- Highly configurable build options enabling lightweight binaries\n- Advanced optimization techniques such as kernel fusion, Fast math enablement and texture utilization\n- Device and workload specific tuning using OpenCL tuner and GeMM optimized heuristics\n\n<br>\n\n| Repository  | Link                                                             |\n| ----------- | ---------------------------------------------------------------- |\n| Release     | https://github.com/arm-software/ComputeLibrary                   |\n| Development | https://review.mlplatform.org/#/admin/projects/ml/ComputeLibrary |\n\n<br>\n\n## Documentation\n[![Documentation](https://img.shields.io/badge/documentation-24.12-green)](https://artificial-intelligence.sites.arm.com/computelibrary/v24.12/index.xhtml)\n\n> Note: The documentation includes the reference API, changelogs, build guide, contribution guide, errata, etc.\n\n<br>\n\n## Pre-built binaries\nAll the binaries can be downloaded from [here](https://github.com/ARM-software/ComputeLibrary/releases) or from the tables below.\n\n<br>\n\n| Platform       | Operating System | Release archive (Download) |\n| -------------- | ---------------- | -------------------------- |\n| Raspberry Pi 4 | LinuxÂ® 32bit      | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-armv7a-cpu-bin.tar.gz) |\n| Raspberry Pi 4 | LinuxÂ® 64bit      | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-bin.tar.gz) |\n| Odroid N2      | LinuxÂ® 64bit      | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-bin.tar.gz) [![](https://img.shields.io/badge/build-neon+cl-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-gpu-bin.tar.gz) |\n| HiKey960       | LinuxÂ® 64bit      | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-bin.tar.gz) [![](https://img.shields.io/badge/build-neon+cl-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-gpu-bin.tar.gz) |\n\n<br>\n\n| Architecture | Operating System | Release archive (Download) |\n| ------------ | ---------------- | -------------------------- |\n| armv7        | LinuxÂ®            | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-armv7a-cpu-bin.tar.gz) [![](https://img.shields.io/badge/build-neon+cl-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-armv7a-cpu-gpu-bin.tar.gz) |\n| arm64-v8a    | Androidâ¢          | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-android-aarch64-cpu-bin.tar.gz) [![](https://img.shields.io/badge/build-neon+cl-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-android-aarch64-cpu-gpu-bin.tar.gz) |\n| arm64-v8a    | LinuxÂ®            | [![](https://img.shields.io/badge/build-neon-orange)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-bin.tar.gz) [![](https://img.shields.io/badge/build-neon+cl-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/download/v24.12/arm_compute-v24.12-linux-aarch64-cpu-gpu-bin.tar.gz) |\n\n<br>\n\nPlease refer to the following link for more pre-built binaries: [![](https://img.shields.io/badge/v24.12-bins-yellowgreen)](https://github.com/ARM-software/ComputeLibrary/releases/tag/v24.12)\n\nPre-build binaries are generated with the following security / good coding practices related flags:\n> -Wall, -Wextra, -Wformat=2, -Winit-self, -Wstrict-overflow=2, -Wswitch-default, -Woverloaded-virtual, -Wformat-security, -Wctor-dtor-privacy, -Wsign-promo, -Weffc++, -pedantic, -fstack-protector-strong\n\n## Supported Architectures/Technologies\n\n- ArmÂ® CPUs:\n    - ArmÂ® CortexÂ®-A processor family using ArmÂ® Neonâ¢ technology\n    - ArmÂ® NeoverseÂ® processor family\n    - ArmÂ® CortexÂ®-R processor family with Armv8-R AArch64 architecture using ArmÂ® Neonâ¢ technology\n    - ArmÂ® CortexÂ®-X1 processor using ArmÂ® Neonâ¢ technology\n\n- ArmÂ® Maliâ¢ GPUs:\n    - ArmÂ® Maliâ¢-G processor family\n    - ArmÂ® Maliâ¢-T processor family\n\n- x86\n\n<br>\n\n## Supported Systems\n\n- Androidâ¢\n- Bare Metal\n- LinuxÂ®\n- OpenBSDÂ®\n- macOSÂ®\n- Tizenâ¢\n\n<br>\n\n## Resources\n- [Tutorial: Running AlexNet on Raspberry Pi with Compute Library](https://community.arm.com/processors/b/blog/posts/running-alexnet-on-raspberry-pi-with-compute-library)\n- [Gian Marco's talk on Performance Analysis for Optimizing Embedded Deep Learning Inference Software](https://www.embedded-vision.com/platinum-members/arm/embedded-vision-training/videos/pages/may-2019-embedded-vision-summit)\n- [Gian Marco's talk on optimizing CNNs with Winograd algorithms at the EVS](https://www.embedded-vision.com/platinum-members/arm/embedded-vision-training/videos/pages/may-2018-embedded-vision-summit-iodice)\n- [Gian Marco's talk on using SGEMM and FFTs to Accelerate Deep Learning](https://www.embedded-vision.com/platinum-members/arm/embedded-vision-training/videos/pages/may-2016-embedded-vision-summit-iodice)\n\n<br>\n\n## Experimental builds\n\n**â  Important** Bazel and CMake builds are experimental CPU only builds, please see the [documentation](https://artificial-intelligence.sites.arm.com/computelibrary/v24.12/how_to_build.xhtml) for more details.\n\n<br>\n\n## How to contribute\n\nContributions to the Compute Library are more than welcome. If you are interested on contributing, please have a look at our [how to contribute guidelines](https://artificial-intelligence.sites.arm.com/computelibrary/v24.12/contribution_guidelines.xhtml).\n\n### Developer Certificate of Origin (DCO)\nBefore the Compute Library accepts your contribution, you need to certify its origin and give us your permission. To manage this process we use the Developer Certificate of Origin (DCO) V1.1 (https://developercertificate.org/)\n\nTo indicate that you agree to the the terms of the DCO, you \"sign off\" your contribution by adding a line with your name and e-mail address to every git commit message:\n\n```Signed-off-by: John Doe <john.doe@example.org>```\n\nYou must use your real name, no pseudonyms or anonymous contributions are accepted.\n\n### Public mailing list\nFor technical discussion, the ComputeLibrary project has a public mailing list: acl-dev@lists.linaro.org\nThe list is open to anyone inside or outside of Arm to self subscribe.  In order to subscribe, please visit the following website:\nhttps://lists.linaro.org/mailman3/lists/acl-dev.lists.linaro.org/\n\n<br>\n\n## License and Contributions\n\nThe software is provided under MIT license. Contributions to this project are accepted under the same license.\n\n### Other Projects\nThis project contains code from other projects as listed below. The original license text is included in those source files.\n\n* The OpenCL header library is licensed under Apache License, Version 2.0, which is a permissive license compatible with MIT license.\n\n* The half library is licensed under MIT license.\n\n* The libnpy library is licensed under MIT license.\n\n* The stb image library is either licensed under MIT license or is in Public Domain. It is used by this project under the terms of MIT license.\n\n<br>\n\n## Trademarks and Copyrights\n\nAndroid is a trademark of Google LLC.\n\nArm, Cortex, Mali and Neon are registered trademarks or trademarks of Arm Limited (or its subsidiaries) in the US and/or elsewhere.\n\nBazel is a trademark of Google LLC., registered in the U.S. and other\ncountries.\n\nCMake is a trademark of Kitware, Inc., registered in the U.S. and other\ncountries.\n\nLinuxÂ® is the registered trademark of Linus Torvalds in the U.S. and other countries.\n\nMac and macOS are trademarks of Apple Inc., registered in the U.S. and other\ncountries.\n\nTizen is a registered trademark of The Linux Foundation.\n\nWindowsÂ® is a trademark of the Microsoft group of companies.\n"
        },
        {
          "name": "REUSE.toml",
          "type": "blob",
          "size": 2.4443359375,
          "content": "# SPDX-FileCopyrightText: 2024 Arm Limited\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nversion = 1\n\n[[annotations]]\npath = [\"filedefs.json\"]\nSPDX-FileCopyrightText = \"2021-2023 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"filelist.json\"]\nSPDX-FileCopyrightText = \"2021-2024 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\n\t\"data/images/*\",\n\t\".clang-tidy\",\n\t\"SECURITY.md\"\n]\nSPDX-FileCopyrightText = \"2020 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\".github/issue_template.md\"]\nSPDX-FileCopyrightText = \"2018 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"CONTRIBUTING.md\"]\nSPDX-FileCopyrightText = \"2022-2024 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"README.md\"]\nSPDX-FileCopyrightText = \"2018-2024 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"compute_kernel_writer/README.md\"]\nSPDX-FileCopyrightText = \"2023 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"examples/gemm_tuner/README.md\"]\nSPDX-FileCopyrightText = \"2019-2021 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"python/scripts/report-model-ops/README.md\"]\nSPDX-FileCopyrightText = \"2021 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n\n[[annotations]]\npath = [\"docs/contributor_guide/non_inclusive_language_examples.dox\"]\nSPDX-FileCopyrightText = \"2022 Arm Limited\"\nSPDX-License-Identifier = \"MIT\"\n"
        },
        {
          "name": "SConscript",
          "type": "blob",
          "size": 34.4697265625,
          "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2016-2024 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport collections\nimport os.path\nimport re\nimport subprocess\nimport zlib\nimport json\nimport codecs\nimport platform\nimport SCons\n\nVERSION = \"v24.12\"\nLIBRARY_VERSION_MAJOR = 45\nLIBRARY_VERSION_MINOR = 0\nLIBRARY_VERSION_PATCH = 0\nSONAME_VERSION = str(LIBRARY_VERSION_MAJOR) + \".\" + str(LIBRARY_VERSION_MINOR) + \".\" + str(LIBRARY_VERSION_PATCH)\n\nImport('env')\nImport('vars')\nImport('install_lib')\n\n# Workaround to enable cross-compiling from macOSÂ® to Androidâ¢ using the Android NDK.\nif platform.system() == 'Darwin' and env['os'] == 'android':\n    # SCons incorrectly assumes that we always want to build a dynamic library on a macOS host.\n    # When targeting Android, we overwrite the following construction variables to build a shared library instead.\n    env.Replace(SHLIBSUFFIX = '.so')                      # overwrites .dylib\n    env.Replace(SHLINKFLAGS = ['$LINKFLAGS', '-shared'])  # overwrites -dynamiclib\n\ndef build_bootcode_objs(sources):\n    arm_compute_env.Append(ASFLAGS = \"-I bootcode/\")\n    obj = arm_compute_env.Object(sources)\n    obj = install_lib(obj)\n    Default(obj)\n    return obj\n\n\n# @brief Create a list of object from a given file list.\n#\n# @param  arch_info      A dictionary represents the architecture info such as the\n#                        compiler flags and defines (filedefs.json).\n#\n# @param  sources        A list of files to build\n#\n# @return A list of objects for the corresponding architecture.\n\ndef build_obj_list(arch_info, sources, static=False):\n\n    # Clone environment\n    tmp_env = arm_compute_env.Clone()\n\n    # Append architecture spec\n    if 'cxxflags' in arch_info and len(arch_info['cxxflags']) > 0:\n        tmp_env.Append(CXXFLAGS = arch_info['cxxflags'])\n\n    # Build and return objects\n    if static:\n        objs = tmp_env.StaticObject(sources)\n    else:\n        objs = tmp_env.SharedObject(sources)\n\n    tmp_env.Default(objs)\n    return objs\n\n# @brief Build multi-ISA files with the respective architecture.\n#\n# @return Two distinct lists:\n#         A list of static objects\n#         A list of shared objects\n\ndef build_multiisa_lib_objects():\n    lib_static_objs = [] # static objects\n    lib_shared_objs = [] # shared objects\n\n    # note that ARM_COMPUTE_ENABLE_FP16 is enabled in update_data_type_layout_flags() to make\n    # sure the environment is progated to the validation suite\n    arm_compute_env.Append(CPPDEFINES = ['ENABLE_NEON', 'ARM_COMPUTE_ENABLE_NEON',\n                           'ENABLE_SVE', 'ARM_COMPUTE_ENABLE_SVE','ARM_COMPUTE_ENABLE_BF16',\n                           'ARM_COMPUTE_ENABLE_I8MM', 'ARM_COMPUTE_ENABLE_SVEF32MM'])\n\n    # Build all the common files for the base architecture\n    if env['arch'] == 'armv8a' or env['arch'] == 'arm64-v8a':\n        lib_static_objs += build_obj_list(filedefs[\"armv8-a\"], misa_lib_files, static=True)\n        lib_shared_objs += build_obj_list(filedefs[\"armv8-a\"], misa_lib_files, static=False)\n    else:\n        lib_static_objs += build_obj_list(filedefs[\"armv8.2-a\"], misa_lib_files, static=True)\n        lib_shared_objs += build_obj_list(filedefs[\"armv8.2-a\"], misa_lib_files, static=False)\n\n    # Build the FP16 specific files\n    lib_static_objs += build_obj_list(filedefs[\"armv8.2-a\"], misa_lib_files_neon_fp16, static=True)\n    lib_shared_objs += build_obj_list(filedefs[\"armv8.2-a\"], misa_lib_files_neon_fp16, static=False)\n\n    # Build the SVE specific files\n    lib_static_objs += build_obj_list(filedefs[\"armv8.2-a-sve\"], misa_lib_files_sve, static=True)\n    lib_shared_objs += build_obj_list(filedefs[\"armv8.2-a-sve\"], misa_lib_files_sve, static=False)\n    lib_static_objs += build_obj_list(filedefs[\"armv8.2-a-sve\"], misa_lib_files_sve_fp16, static=True)\n    lib_shared_objs += build_obj_list(filedefs[\"armv8.2-a-sve\"], misa_lib_files_sve_fp16, static=False)\n\n\n    # Build the SVE2 specific files\n    arm_compute_env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_SVE2'])\n    lib_static_objs += build_obj_list(filedefs[\"armv8.6-a-sve2\"], misa_lib_files_sve2, static=True)\n    lib_shared_objs += build_obj_list(filedefs[\"armv8.6-a-sve2\"], misa_lib_files_sve2, static=False)\n    lib_static_objs += build_obj_list(filedefs[\"armv8.6-a-sve2\"], misa_lib_files_sve2_fp16, static=True)\n    lib_shared_objs += build_obj_list(filedefs[\"armv8.6-a-sve2\"], misa_lib_files_sve2_fp16, static=False)\n\n\n    return lib_static_objs, lib_shared_objs\n\n\n# The built-in SCons Glob() method does not support recursive searching of directories, thus we implement our own:\ndef recursive_glob(root_dir, pattern):\n    files = []\n    regex = re.compile(pattern)\n\n    for dirpath, _, filenames in os.walk(root_dir):\n        for f in filenames:\n            f = os.path.join(dirpath, f)\n            if regex.match(f):\n                files.append(f)\n\n    return files\n\n\ndef get_ckw_obj_list():\n    cmake_obj_dir = os.path.abspath(\"CMakeFiles/ckw.dir/src\")\n    return recursive_glob(root_dir=cmake_obj_dir, pattern=\".*.o$\")\n\n\ndef build_library(name, build_env, sources, static=False, libs=[]):\n    cloned_build_env = build_env.Clone()\n\n    #The following set up only works for posix system, RANLIBCOM isn't available on win32 HOST_OS\n    if cloned_build_env['HOST_OS'] == 'posix':\n        #Set up to use temp file for long command when building and linking libraries\n        cloned_build_env['TEMPFILE'] = SCons.Platform.TempFileMunge\n\n        #To use temp file for any command, the following pattern should be used:\n        #   env['COMMAND'] = \"{$TEMPFILE('$COMMANDSTRING')}\"\n        #See: https://github.com/SCons/scons/blob/05f2992377844bbfec9bcd4a9c7f5479c634b91b/SCons/Platform/__init__.py#L147\n        #The commands' string are taken from https://github.com/SCons/scons\n        #The commands' explanations are taken from Scons userguide\n\n        #The command line used to compile C++ source file to an object file\n        cloned_build_env['CXXCOM'] = \"${TEMPFILE('\"+ cloned_build_env['CXXCOM'] + \"')}\"\n        #The command line used to compile C++ source file to a shared-library object file\n        cloned_build_env['SHCXXCOM'] = \"${TEMPFILE('\"+ cloned_build_env['SHCXXCOM'] + \"')}\"\n        #The command line used to generate a static library from object files\n        cloned_build_env['ARCOM'] = \"${TEMPFILE('\"+ cloned_build_env['ARCOM'] + \"')}\"\n        #The command line used to link object files into an executable\n        cloned_build_env['LINKCOM'] = \"${TEMPFILE('\"+ cloned_build_env['LINKCOM'] + \"')}\"\n        #The command line used to link programs using shared libraries\n        cloned_build_env['SHLINKCOM'] = \"${TEMPFILE('\"+ cloned_build_env['SHLINKCOM'] + \"')}\"\n        #The command line used to index a static library archive\n        cloned_build_env['RANLIBCOM'] = \"${TEMPFILE('\"+ cloned_build_env['RANLIBCOM'] + \"')}\"\n        #Set up directory for temp files. To prevent permission issue, the temp files are in the same directory with output files\n        cloned_build_env['TEMPFILEDIR'] = cloned_build_env['build_dir']\n\n    if env['os'] == 'android' and static == False:\n        cloned_build_env[\"LINKFLAGS\"].remove('-pie')\n        cloned_build_env[\"LINKFLAGS\"].remove('-static-libstdc++')\n\n    # -- Static Library --\n    if static:\n        # Recreate the list to avoid mutating the original\n        static_sources = list(sources)\n\n        # Dynamic Fusion has a direct dependency on the Compute Kernel Writer (CKW) subproject, therefore we collect the\n        # built CKW objects to pack into the Compute Library archive.\n        if env['experimental_dynamic_fusion'] and name == \"arm_compute-static\":\n            static_sources += get_ckw_obj_list()\n\n        obj = cloned_build_env.StaticLibrary(name, source=static_sources, LIBS=arm_compute_env[\"LIBS\"] + libs)\n\n    # -- Shared Library --\n    else:\n        # Always statically link Compute Library against CKW\n        if env['experimental_dynamic_fusion'] and name == \"arm_compute\":\n            libs.append('libckw.a')\n\n        # Add shared library versioning\n        if env['set_soname']:\n            obj = cloned_build_env.SharedLibrary(name, source=sources, SHLIBVERSION = SONAME_VERSION, LIBS = arm_compute_env[\"LIBS\"] + libs)\n        else:\n            obj = cloned_build_env.SharedLibrary(name, source=sources, LIBS = arm_compute_env[\"LIBS\"] + libs)\n\n    if env['mapfile']:\n        if not 'windows' in env['os'] and not 'macos' in env['os']:\n            cloned_build_env['LINKFLAGS'].append('\"-Wl,-Map='+ name + '.map\"')\n        else:\n            cloned_build_env['LINKFLAGS'].append('-Wl,-map,' + name + '.map')\n\n    obj = install_lib(obj)\n    build_env.Default(obj)\n    return obj\n\n\ndef remove_incode_comments(code):\n    def replace_with_empty(match):\n        s = match.group(0)\n        if s.startswith('/'):\n            return \" \"\n        else:\n            return s\n\n    comment_regex = re.compile(r'//.*?$|/\\*.*?\\*/|\\'(?:\\\\.|[^\\\\\\'])*\\'|\"(?:\\\\.|[^\\\\\"])*\"', re.DOTALL | re.MULTILINE)\n    return re.sub(comment_regex, replace_with_empty, code)\n\n\ndef resolve_includes(target, source, env):\n    # File collection\n    FileEntry = collections.namedtuple('FileEntry', 'target_name file_contents')\n\n    # Include pattern\n    pattern = re.compile(\"#include \\\"(.*)\\\"\")\n\n    # Get file contents\n    files = []\n    for i in range(len(source)):\n        src = source[i]\n        dst = target[i]\n        contents = src.get_contents().decode('utf-8')\n        contents = remove_incode_comments(contents).splitlines()\n        entry = FileEntry(target_name=dst, file_contents=contents)\n        files.append((os.path.basename(src.get_path()),entry))\n\n    # Create dictionary of tupled list\n    files_dict = dict(files)\n\n    # Check for includes (can only be files in the same folder)\n    final_files = []\n    for file in files:\n        done = False\n        tmp_file = file[1].file_contents\n        while not done:\n            file_count = 0\n            updated_file = []\n            for line in tmp_file:\n                found = pattern.search(line)\n                if found:\n                    # Only get the header file name and discard the relative path.\n                    # E.g. \"src/core/CL/cl_kernels/activation_float_helpers.h\" -> \"activation_float_helpers.h\"\n                    include_file = found.group(1).split('/')[-1]\n                    data = files_dict[include_file].file_contents\n                    updated_file.extend(data)\n                else:\n                    updated_file.append(line)\n                    file_count += 1\n\n            # Check if all include are replaced.\n            if file_count == len(tmp_file):\n                done = True\n\n            # Update temp file\n            tmp_file = updated_file\n\n        # Append and prepend string literal identifiers and add expanded file to final list\n        entry = FileEntry(target_name=file[1].target_name, file_contents=tmp_file)\n        final_files.append((file[0], entry))\n\n    # Write output files\n    for file in final_files:\n        with open(file[1].target_name.get_path(), 'w+') as out_file:\n            file_to_write = \"\\n\".join( file[1].file_contents )\n            if env['compress_kernels']:\n                file_to_write = zlib.compress(file_to_write.encode('utf-8'), 9)\n                file_to_write = codecs.encode(file_to_write, \"base64\").decode('utf-8').replace(\"\\n\", \"\")\n            file_to_write = \"R\\\"(\" + file_to_write + \")\\\"\"\n            out_file.write(file_to_write)\n\n\ndef create_version_file(target, source, env):\n# Generate string with build options library version to embed in the library:\n    try:\n        git_hash = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"])\n    except (OSError, subprocess.CalledProcessError):\n        git_hash=\"unknown\"\n\n    build_options = str(vars.args).replace('\"', '\\\\\"')\n    build_info = \"\\\"arm_compute_version=%s Build options: %s Git hash=%s\\\"\" % (VERSION,build_options, git_hash.strip())\n    with open(target[0].get_path(), \"w\") as fd:\n        fd.write(build_info)\n\n\ndef get_attrs_list(env, data_types, data_layouts):\n    attrs = []\n\n    # Manage data-types\n    if 'all' in data_types:\n        attrs += ['fp16', 'fp32', 'integer', 'qasymm8', 'qasymm8_signed', 'qsymm16']\n    else:\n        if 'fp16' in data_types: attrs += ['fp16']\n        if 'fp32' in data_types: attrs += ['fp32']\n        if 'integer' in data_types: attrs += ['integer']\n        if 'qasymm8' in data_types: attrs += ['qasymm8']\n        if 'qasymm8_signed' in data_types: attrs += ['qasymm8_signed']\n        if 'qsymm16' in data_types: attrs += ['qsymm16']\n    # Manage data-layouts\n    if 'all' in data_layouts:\n        attrs += ['nhwc', 'nchw']\n    else:\n        if 'nhwc' in data_layouts: attrs += ['nhwc']\n        if 'nchw' in data_layouts: attrs += ['nchw']\n\n    # Manage execution state\n    attrs += ['estate32' if (env['estate'] == 'auto' and 'v7a' in env['arch']) or '32' in env['estate'] else 'estate64']\n\n    return attrs\n\n\ndef get_operator_backend_files(filelist, operators, backend='', techs=[], attrs=[], include_common=True):\n    files = { \"common\" : [] }\n    # Early return if filelist is empty\n    if backend not in filelist:\n        return files\n    # Iterate over operators and create the file lists to compiler\n    for operator in operators:\n        if operator in filelist[backend]['operators']:\n            if include_common :\n                files['common'] += filelist[backend]['operators'][operator][\"files\"][\"common\"]\n            for tech in techs:\n                if tech in filelist[backend]['operators'][operator][\"files\"]:\n                    # Add tech as a key to dictionary if not there\n                    if tech not in files:\n                        files[tech] = []\n                    # Add tech files to the tech file list\n                    tech_files = filelist[backend]['operators'][operator][\"files\"][tech]\n                    if include_common:\n                        files[tech] += tech_files.get('common', [])\n                    for attr in attrs:\n                        files[tech] += tech_files.get(attr, [])\n\n\n    # Remove duplicates if they exist\n    return {k: list(set(v)) for k,v in files.items()}\n\ndef collect_operators(filelist, operators, backend=''):\n    ops = set()\n    for operator in operators:\n        if operator in filelist[backend]['operators']:\n            ops.add(operator)\n            if 'deps' in filelist[backend]['operators'][operator]:\n                ops.update(filelist[backend]['operators'][operator]['deps'])\n        else:\n            print(\"Operator {0} is unsupported on {1} backend!\".format(operator, backend))\n\n    return ops\n\n\ndef resolve_operator_dependencies(filelist, operators, backend=''):\n    resolved_operators = collect_operators(filelist, operators, backend)\n\n    are_ops_resolved = False\n    while not are_ops_resolved:\n        resolution_pass = collect_operators(filelist, resolved_operators, backend)\n        if len(resolution_pass) != len(resolved_operators):\n            resolved_operators.update(resolution_pass)\n        else:\n            are_ops_resolved = True\n\n    return resolved_operators\n\ndef read_build_config_json(build_config):\n    build_config_contents = {}\n    custom_operators = []\n    custom_types = []\n    custom_layouts = []\n    if os.path.isfile(build_config):\n        with open(build_config) as f:\n            try:\n                build_config_contents = json.load(f)\n            except:\n                print(\"Warning: Build configuration file is of invalid JSON format!\")\n    else:\n        try:\n            build_config_contents = json.loads(build_config)\n        except:\n            print(\"Warning: Build configuration string is of invalid JSON format!\")\n    if build_config_contents:\n        custom_operators = build_config_contents.get(\"operators\", [])\n        custom_types = build_config_contents.get(\"data_types\", [])\n        custom_layouts = build_config_contents.get(\"data_layouts\", [])\n    return custom_operators, custom_types, custom_layouts\n\narm_compute_env = env.Clone()\nversion_file = arm_compute_env.Command(\"src/core/arm_compute_version.embed\", \"\", action=create_version_file)\narm_compute_env.AlwaysBuild(version_file)\n\ndefault_cpp_compiler = 'g++' if env['os'] not in ['android', 'macos', 'openbsd'] else 'clang++'\ncpp_compiler = os.environ.get('CXX', default_cpp_compiler)\n\n# Generate embed files\ngenerate_embed = [ version_file ]\nif env['opencl'] and env['embed_kernels']:\n\n    # Header files\n    cl_helper_files = [ 'src/core/CL/cl_kernels/activation_float_helpers.h',\n                        'src/core/CL/cl_kernels/activation_quant_helpers.h',\n                        'src/core/CL/cl_kernels/gemm_helpers.h',\n                        'src/core/CL/cl_kernels/helpers_asymm.h',\n                        'src/core/CL/cl_kernels/helpers.h',\n                        'src/core/CL/cl_kernels/load_store_utility.h',\n                        'src/core/CL/cl_kernels/repeat.h',\n                        'src/core/CL/cl_kernels/tile_helpers.h',\n                        'src/core/CL/cl_kernels/types.h',\n                        'src/core/CL/cl_kernels/warp_helpers.h',\n                    ]\n\n    # Common kernels\n    cl_files_common = ['src/core/CL/cl_kernels/common/activation_layer.cl',\n                       'src/core/CL/cl_kernels/common/activation_layer_quant.cl',\n                       'src/core/CL/cl_kernels/common/arg_min_max.cl',\n                       'src/core/CL/cl_kernels/common/batchnormalization_layer.cl',\n                       'src/core/CL/cl_kernels/common/bounding_box_transform.cl',\n                       'src/core/CL/cl_kernels/common/bounding_box_transform_quantized.cl',\n                       'src/core/CL/cl_kernels/common/bitwise_op.cl',\n                       'src/core/CL/cl_kernels/common/cast.cl',\n                       'src/core/CL/cl_kernels/common/comparisons.cl',\n                       'src/core/CL/cl_kernels/common/concatenate.cl',\n                       'src/core/CL/cl_kernels/common/convolution_layer.cl',\n                       'src/core/CL/cl_kernels/common/col2im.cl',\n                       'src/core/CL/cl_kernels/common/convert_fc_weights.cl',\n                       'src/core/CL/cl_kernels/common/copy_tensor.cl',\n                       'src/core/CL/cl_kernels/common/crop_tensor.cl',\n                       'src/core/CL/cl_kernels/common/deconvolution_layer.cl',\n                       'src/core/CL/cl_kernels/common/dequantization_layer.cl',\n                       'src/core/CL/cl_kernels/common/elementwise_operation.cl',\n                       'src/core/CL/cl_kernels/common/elementwise_operation_quantized.cl',\n                       'src/core/CL/cl_kernels/common/elementwise_unary.cl',\n                       'src/core/CL/cl_kernels/common/elementwise_unary_quantized.cl',\n                       'src/core/CL/cl_kernels/common/fft_digit_reverse.cl',\n                       'src/core/CL/cl_kernels/common/fft.cl',\n                       'src/core/CL/cl_kernels/common/fft_scale.cl',\n                       'src/core/CL/cl_kernels/common/fill_border.cl',\n                       'src/core/CL/cl_kernels/common/floor.cl',\n                       'src/core/CL/cl_kernels/common/gather.cl',\n                       'src/core/CL/cl_kernels/common/scatter.cl',\n                       'src/core/CL/cl_kernels/common/gemm.cl',\n                       'src/core/CL/cl_kernels/common/gemm_reshaped_only_rhs_mmul.cl',\n                       'src/core/CL/cl_kernels/common/gemm_utils.cl',\n                       'src/core/CL/cl_kernels/common/gemmlowp.cl',\n                       'src/core/CL/cl_kernels/common/gemmlowp_reshaped_only_rhs_mmul.cl',\n                       'src/core/CL/cl_kernels/common/gemv.cl',\n                       'src/core/CL/cl_kernels/common/generate_proposals.cl',\n                       'src/core/CL/cl_kernels/common/generate_proposals_quantized.cl',\n                       'src/core/CL/cl_kernels/common/instance_normalization.cl',\n                       'src/core/CL/cl_kernels/common/l2_normalize.cl',\n                       'src/core/CL/cl_kernels/common/mat_mul.cl',\n                       'src/core/CL/cl_kernels/common/mat_mul_mmul.cl',\n                       'src/core/CL/cl_kernels/common/mat_mul_quantized.cl',\n                       'src/core/CL/cl_kernels/common/mat_mul_quantized_mmul.cl',\n                       'src/core/CL/cl_kernels/common/mean_stddev_normalization.cl',\n                       'src/core/CL/cl_kernels/common/memset.cl',\n                       'src/core/CL/cl_kernels/common/minmax_layer.cl',\n                       'src/core/CL/cl_kernels/common/nonmax.cl',\n                       'src/core/CL/cl_kernels/common/pad_layer.cl',\n                       'src/core/CL/cl_kernels/common/permute.cl',\n                       'src/core/CL/cl_kernels/common/pixelwise_mul_float.cl',\n                       'src/core/CL/cl_kernels/common/pixelwise_mul_int.cl',\n                       'src/core/CL/cl_kernels/common/qlstm_layer_normalization.cl',\n                       'src/core/CL/cl_kernels/common/quantization_layer.cl',\n                       'src/core/CL/cl_kernels/common/range.cl',\n                       'src/core/CL/cl_kernels/common/reduction_operation.cl',\n                       'src/core/CL/cl_kernels/common/reshape_layer.cl',\n                       'src/core/CL/cl_kernels/common/reverse.cl',\n                       'src/core/CL/cl_kernels/common/roi_align_layer.cl',\n                       'src/core/CL/cl_kernels/common/roi_align_layer_quantized.cl',\n                       'src/core/CL/cl_kernels/common/roi_pooling_layer.cl',\n                       'src/core/CL/cl_kernels/common/select.cl',\n                       'src/core/CL/cl_kernels/common/slice_ops.cl',\n                       'src/core/CL/cl_kernels/common/softmax_layer.cl',\n                       'src/core/CL/cl_kernels/common/stack_layer.cl',\n                       'src/core/CL/cl_kernels/common/tile.cl',\n                       'src/core/CL/cl_kernels/common/transpose.cl',\n                       'src/core/CL/cl_kernels/common/unpooling_layer.cl'\n                    ]\n\n    # NCHW kernels\n    cl_files_nchw = ['src/core/CL/cl_kernels/nchw/batch_to_space.cl',\n                    'src/core/CL/cl_kernels/nchw/batchnormalization_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/channel_shuffle.cl',\n                    'src/core/CL/cl_kernels/nchw/depth_to_space.cl',\n                    'src/core/CL/cl_kernels/nchw/direct_convolution.cl',\n                    'src/core/CL/cl_kernels/nchw/dequantization_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/im2col.cl',\n                    'src/core/CL/cl_kernels/nchw/normalization_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/normalize_planar_yuv_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/normalize_planar_yuv_layer_quantized.cl',\n                    'src/core/CL/cl_kernels/nchw/pooling_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/prior_box_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/reorg_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/scale.cl',\n                    'src/core/CL/cl_kernels/nchw/space_to_batch.cl',\n                    'src/core/CL/cl_kernels/nchw/space_to_depth.cl',\n                    'src/core/CL/cl_kernels/nchw/upsample_layer.cl',\n                    'src/core/CL/cl_kernels/nchw/winograd_filter_transform.cl',\n                    'src/core/CL/cl_kernels/nchw/winograd_input_transform.cl',\n                    'src/core/CL/cl_kernels/nchw/winograd_output_transform.cl'\n                ]\n\n    # NHWC kernels\n    cl_files_nhwc = ['src/core/CL/cl_kernels/nhwc/batch_to_space.cl',\n                    'src/core/CL/cl_kernels/nhwc/batchnormalization_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/channel_shuffle.cl',\n                    'src/core/CL/cl_kernels/nhwc/direct_convolution.cl',\n                    'src/core/CL/cl_kernels/nhwc/direct_convolution3d.cl',\n                    'src/core/CL/cl_kernels/nhwc/depth_to_space.cl',\n                    'src/core/CL/cl_kernels/nhwc/dequantization_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/dwc_native_fp_nhwc.cl',\n                    'src/core/CL/cl_kernels/nhwc/dwc_native_quantized_nhwc.cl',\n                    'src/core/CL/cl_kernels/nhwc/im2col.cl',\n                    'src/core/CL/cl_kernels/nhwc/indirect_convolution.cl',\n                    'src/core/CL/cl_kernels/nhwc/normalization_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/normalize_planar_yuv_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/normalize_planar_yuv_layer_quantized.cl',\n                    'src/core/CL/cl_kernels/nhwc/pooling_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/pooling_3d_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/pooling_3d_layer_quantized.cl',\n                    'src/core/CL/cl_kernels/nhwc/pooling_layer_quantized.cl',\n                    'src/core/CL/cl_kernels/nhwc/reorg_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/scale.cl',\n                    'src/core/CL/cl_kernels/nhwc/space_to_batch.cl',\n                    'src/core/CL/cl_kernels/nhwc/space_to_depth.cl',\n                    'src/core/CL/cl_kernels/nhwc/transposed_convolution.cl',\n                    'src/core/CL/cl_kernels/nhwc/upsample_layer.cl',\n                    'src/core/CL/cl_kernels/nhwc/winograd_filter_transform.cl',\n                    'src/core/CL/cl_kernels/nhwc/winograd_input_transform.cl',\n                    'src/core/CL/cl_kernels/nhwc/winograd_output_transform.cl'\n                ]\n\n    cl_files = cl_helper_files + cl_files_common + cl_files_nchw + cl_files_nhwc\n\n    embed_files = [ f+\"embed\" for f in cl_files ]\n    arm_compute_env.Append(CPPPATH =[Dir(\"./src/core/CL/\").path] )\n\n    generate_embed.append(arm_compute_env.Command(embed_files, cl_files, action=resolve_includes))\n\nDefault(generate_embed)\nif env[\"build\"] == \"embed_only\":\n    Return()\n\n# Append version defines for semantic versioning\narm_compute_env.Append(CPPDEFINES = [('ARM_COMPUTE_VERSION_MAJOR', LIBRARY_VERSION_MAJOR),\n                                     ('ARM_COMPUTE_VERSION_MINOR', LIBRARY_VERSION_MINOR),\n                                     ('ARM_COMPUTE_VERSION_PATCH', LIBRARY_VERSION_PATCH)])\n\n# Don't allow undefined references in the libraries:\nundefined_flag = '-Wl,-undefined,error' if 'macos' in arm_compute_env[\"os\"] else '-Wl,--no-undefined'\nif not env['thread_sanitizer'] and not env['address_sanitizer'] and not env['undefined_sanitizer']:\n    arm_compute_env.Append(LINKFLAGS=[undefined_flag])\n\narm_compute_env.Append(CPPPATH =[Dir(\"./src/core/\").path] )\n\nif env['os'] != 'openbsd':\n    if env['os'] == 'windows':\n        arm_compute_env.Append(LIBS = [])\n    else:\n        arm_compute_env.Append(LIBS = ['dl'])\n\n\n# Load build definitions file\nwith (open(Dir('#').path + '/filedefs.json')) as fd:\n    filedefs = json.load(fd)\n    filedefs = filedefs['cpu']['arch']\n\n\nwith (open(Dir('#').path + '/filelist.json')) as fp:\n    filelist = json.load(fp)\n\n# Common backend files\nlib_files = filelist['common']\n\n# Fixed format GEMM kernels.\nif env['fixed_format_kernels']:\n    arm_compute_env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_FIXED_FORMAT_KERNELS'])\n\n# Experimental files\n# Dynamic fusion\nif env['experimental_dynamic_fusion']:\n    lib_files += filelist['experimental']['dynamic_fusion']['common']\n    lib_files += filelist['experimental']['dynamic_fusion']['ckw_driver']\n\n# Logging files\nif env[\"logging\"]:\n    lib_files += filelist['logging']\n\n# C API files\nlib_files += filelist['c_api']['common']\nlib_files += filelist['c_api']['operators']\n\n# Scheduler infrastructure\nlib_files += filelist['scheduler']['single']\nif env['cppthreads']:\n     lib_files += filelist['scheduler']['threads']\nif env['openmp']:\n     lib_files += filelist['scheduler']['omp']\n\n# Graph files\ngraph_files = Glob('src/graph/*.cpp')\ngraph_files += Glob('src/graph/*/*.cpp')\n\n# Specify user-defined priority operators\ncustom_operators = []\ncustom_types = []\ncustom_layouts = []\n\nuse_custom_ops = env['build_config']\n\n\nif env['build_config']:\n    custom_operators, custom_types, custom_layouts = read_build_config_json(env['build_config'])\n\nif env['opencl']:\n    lib_files += filelist['c_api']['gpu']\n    lib_files += filelist['gpu']['common']\n\n    cl_operators = custom_operators if use_custom_ops else filelist['gpu']['operators'].keys()\n    cl_ops_to_build = resolve_operator_dependencies(filelist, cl_operators, 'gpu')\n    lib_files += get_operator_backend_files(filelist, cl_ops_to_build, 'gpu')['common']\n\n    graph_files += Glob('src/graph/backends/CL/*.cpp')\n\n\nlib_files_sve = []\nlib_files_sve2 = []\n\n# the variables below are used for the multi_isa builds\n# please note that the variables names without the _fp16 suffix\n# do not hold any fp16 files.\n\nmisa_lib_files = lib_files\nmisa_lib_files_sve = []\nmisa_lib_files_sve2 = []\nmisa_lib_files_neon_fp16 = []\nmisa_lib_files_sve_fp16 = []\nmisa_lib_files_sve2_fp16 = []\n\nif env['neon']:\n    # build winograd/depthwise sources for either v7a / v8a\n    arm_compute_env.Append(CPPPATH = [\"src/core/NEON/kernels/arm_gemm\",\n                                      \"src/core/NEON/kernels/convolution/common/\",\n                                      \"src/core/NEON/kernels/convolution/winograd/\",\n                                      \"src/core/NEON/kernels/arm_conv/depthwise/\",\n                                      \"src/core/NEON/kernels/arm_conv/pooling/\",\n                                      \"src/core/NEON/kernels/arm_conv/\",\n                                      \"src/core/NEON/kernels/assembly/\",\n                                      \"arm_compute/core/NEON/kernels/assembly/\",\n                                      \"src/cpu/kernels/assembly/\"])\n\n    # Setup SIMD file list to include\n    simd = ['neon']\n    if env['multi_isa']:\n        simd += ['sve', 'sve2']\n    else:\n        if 'sve' in env['arch']: simd += ['sve']\n        if 'sve2' in env['arch']: simd += ['sve2']\n\n    # Get attributes\n    if(use_custom_ops):\n        attrs = get_attrs_list(env, custom_types, custom_layouts)\n    else:\n        attrs = get_attrs_list(env, env['data_type_support'], env['data_layout_support'])\n\n    if env['fixed_format_kernels']:\n        attrs.append(\"fixed_format_kernels\")\n\n    # Setup data-type and data-layout files to include\n    cpu_operators = custom_operators if use_custom_ops else filelist['cpu']['operators'].keys()\n    cpu_ops_to_build = resolve_operator_dependencies(filelist, cpu_operators, 'cpu')\n\n    if env['multi_isa']:\n        misa_lib_files += filelist['cpu']['common']\n\n        # For multi_isa builds we need to build fp16 files for armv8.2-a+fp16 so we filter them out of cpu_files removing the attribute fp16\n        attrs.remove('fp16')\n        cpu_files = get_operator_backend_files(filelist, cpu_ops_to_build, 'cpu', simd, attrs)\n\n        # Shared among ALL CPU files\n        misa_lib_files += cpu_files.get('common', [])\n\n        # ArmÂ® Neonâ¢ specific files\n        misa_lib_files += cpu_files.get('neon', [])\n\n        # Get all the fp16 files\n        fp16_cpu_files = get_operator_backend_files(filelist, cpu_ops_to_build, 'cpu', simd, ['fp16'],False)\n\n        misa_lib_files_neon_fp16 = fp16_cpu_files.get('neon',[])\n        misa_lib_files_sve_fp16 = fp16_cpu_files.get('sve',[])\n        misa_lib_files_sve2_fp16 = fp16_cpu_files.get('sve2',[])\n\n        # SVE files only minus FP16\n        misa_lib_files_sve = cpu_files.get('sve', [])\n\n        # SVE2 files only minus FP16\n        misa_lib_files_sve2 = cpu_files.get('sve2', [])\n    else:\n        lib_files += filelist['cpu']['common']\n\n        # Non multi_isa build\n        cpu_files = get_operator_backend_files(filelist, cpu_ops_to_build, 'cpu', simd, attrs)\n\n        # Shared among ALL CPU files\n        lib_files += cpu_files.get('common', [])\n\n        # ArmÂ® Neonâ¢ specific files\n        lib_files += cpu_files.get('neon', [])\n\n        lib_files_sve = cpu_files.get('sve', [])\n\n        lib_files_sve2 = cpu_files.get('sve2', [])\n\n    graph_files += Glob('src/graph/backends/NEON/*.cpp')\n\n# Restrict from building graph API if a reduced operator list has been provided\nif use_custom_ops:\n    print(\"WARNING: Graph library requires all operators to be built\")\n    graph_files = []\n\n# Build bootcode in case of bare-metal\nbootcode_o = []\nif env['os'] == 'bare_metal':\n    bootcode_files = Glob('bootcode/*.s')\n    bootcode_o = build_bootcode_objs(bootcode_files)\nExport('bootcode_o')\n\n\nif (env['multi_isa']):\n    lib_static_objs, lib_shared_objs = build_multiisa_lib_objects()\n    # STATIC library build.\n    arm_compute_a = build_library('arm_compute-static', arm_compute_env, lib_static_objs, static=True)\nelse:\n    if 'sve2' in env['arch']:\n        lib_files += lib_files_sve\n        lib_files += lib_files_sve2\n    elif 'sve' in env['arch']:\n        lib_files += lib_files_sve\n\n    arm_compute_a = build_library('arm_compute-static', arm_compute_env, lib_files, static=True)\n\nExport('arm_compute_a')\n\n# SHARED library build.\nif env['os'] != 'bare_metal' and not env['standalone']:\n    if (env['multi_isa']):\n\n        arm_compute_so = build_library('arm_compute', arm_compute_env, lib_shared_objs, static=False)\n    else:\n        arm_compute_so = build_library('arm_compute', arm_compute_env, lib_files, static=False)\n\n    Export('arm_compute_so')\n\n\narm_compute_graph_env = arm_compute_env.Clone()\n\n# Build graph libraries\narm_compute_graph_env.Append(CXXFLAGS = ['-Wno-redundant-move', '-Wno-pessimizing-move'])\n\narm_compute_graph_a = build_library('arm_compute_graph-static', arm_compute_graph_env, graph_files, static=True)\nExport('arm_compute_graph_a')\n\nif env['os'] != 'bare_metal' and not env['standalone']:\n    arm_compute_graph_so = build_library('arm_compute_graph', arm_compute_graph_env, graph_files, static=False, libs = [ \"arm_compute\" ])\n    Depends(arm_compute_graph_so, arm_compute_so)\n    Export('arm_compute_graph_so')\n\nif env['standalone']:\n    alias = arm_compute_env.Alias(\"arm_compute\", [arm_compute_a])\nelse:\n    alias = arm_compute_env.Alias(\"arm_compute\", [arm_compute_a, arm_compute_so])\n\nDefault(alias)\n\nif env['standalone']:\n    Depends([alias], generate_embed)\nelse:\n    Depends([alias], generate_embed)\n"
        },
        {
          "name": "SConstruct",
          "type": "blob",
          "size": 30.130859375,
          "content": "# -*- coding: utf-8 -*-\n\n# Copyright (c) 2016-2024 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport SCons\nimport json\nimport os\nimport subprocess\n\ndef version_at_least(version, required):\n\n    version_list = version.split('.')\n    required_list = required.split('.')\n    end = min(len(version_list), len(required_list))\n    for i in range(0, end):\n        if int(version_list[i]) < int(required_list[i]):\n            return False\n        elif int(version_list[i]) > int(required_list[i]):\n            return True\n\n    return True\n\ndef read_build_config_json(build_config):\n    build_config_contents = {}\n    custom_types = []\n    custom_layouts = []\n    if os.path.isfile(build_config):\n        with open(build_config) as f:\n            try:\n                build_config_contents = json.load(f)\n            except:\n                print(\"Warning: Build configuration file is of invalid JSON format!\")\n    else:\n        try:\n            build_config_contents = json.loads(build_config)\n        except:\n            print(\"Warning: Build configuration string is of invalid JSON format!\")\n    if build_config_contents:\n        custom_types = build_config_contents.get(\"data_types\", [])\n        custom_layouts = build_config_contents.get(\"data_layouts\", [])\n    return custom_types, custom_layouts\n\ndef update_data_type_layout_flags(env, data_types, data_layouts):\n    # Manage data-types\n    if env['multi_isa']:\n        if  any(i in data_types for i in ['all', 'fp16']):\n            env.Append(CXXFLAGS = ['-DENABLE_FP16_KERNELS', '-DARM_COMPUTE_ENABLE_FP16'])\n    else:\n            if not 'v8a' in env['arch'] and not 'v7a' in env['arch'] and not 'armv8r64' in env['arch'] and not 'x86' in env['arch']:\n                if  any(i in data_types for i in ['all', 'fp16']):\n                    env.Append(CXXFLAGS = ['-DENABLE_FP16_KERNELS','-DARM_COMPUTE_ENABLE_FP16'])\n\n    if any(i in data_types for i in ['all', 'fp32']):\n        env.Append(CXXFLAGS = ['-DENABLE_FP32_KERNELS'])\n    if any(i in data_types for i in ['all', 'qasymm8']):\n        env.Append(CXXFLAGS = ['-DENABLE_QASYMM8_KERNELS'])\n    if any(i in data_types for i in ['all', 'qasymm8_signed']):\n        env.Append(CXXFLAGS = ['-DENABLE_QASYMM8_SIGNED_KERNELS'])\n    if any(i in data_types for i in ['all', 'qsymm16']):\n        env.Append(CXXFLAGS = ['-DENABLE_QSYMM16_KERNELS'])\n    if any(i in data_types for i in ['all', 'integer']):\n        env.Append(CXXFLAGS = ['-DENABLE_INTEGER_KERNELS'])\n\n    # Manage data-layouts\n    if any(i in data_layouts for i in ['all', 'nhwc']):\n        env.Append(CXXFLAGS = ['-DENABLE_NHWC_KERNELS'])\n    if any(i in data_layouts for i in ['all', 'nchw']):\n        env.Append(CXXFLAGS = ['-DENABLE_NCHW_KERNELS'])\n\n    return env\n\n\nvars = Variables(\"scons\")\nvars.AddVariables(\n    BoolVariable(\"debug\", \"Debug\", False),\n    BoolVariable(\"asserts\", \"Enable asserts (this flag is forced to 1 for debug=1)\", False),\n    BoolVariable(\"logging\", \"Enable Logging\", False),\n    EnumVariable(\"arch\", \"Target Architecture. The x86_32 and x86_64 targets can only be used with neon=0 and opencl=1.\", \"armv7a\",\n                  allowed_values=(\"armv7a\", \"armv7a-hf\", \"arm64-v8a\", \"arm64-v8.2-a\", \"arm64-v8.2-a-sve\", \"arm64-v8.2-a-sve2\", \"x86_32\", \"x86_64\",\n                                  \"armv8a\", \"armv8.2-a\", \"armv8.2-a-sve\", \"armv8.6-a\", \"armv8.6-a-sve\", \"armv8.6-a-sve2\", \"armv8.6-a-sve2-sme2\", \"armv8r64\", \"x86\")),\n    EnumVariable(\"estate\", \"Execution State\", \"auto\", allowed_values=(\"auto\", \"32\", \"64\")),\n    EnumVariable(\"os\", \"Target OS. With bare metal selected, only ArmÂ® Neonâ¢ (not OpenCL) can be used, static libraries get built and Neonâ¢'s multi-threading support is disabled.\", \"linux\", allowed_values=(\"linux\", \"android\", \"tizen\", \"macos\", \"bare_metal\", \"openbsd\",\"windows\")),\n    EnumVariable(\"build\", \"Either build directly on your device (native) or cross compile from your desktop machine (cross-compile). In both cases make sure the compiler is available in your path.\", \"cross_compile\", allowed_values=(\"native\", \"cross_compile\", \"embed_only\")),\n    BoolVariable(\"examples\", \"Build example programs\", True),\n    BoolVariable(\"gemm_tuner\", \"Build gemm_tuner programs\", True),\n    BoolVariable(\"Werror\", \"Enable/disable the -Werror compilation flag\", True),\n    BoolVariable(\"multi_isa\", \"Build Multi ISA binary version of library. Works for armv8a without the support for FP16 vector arithmetic. Use armv8.2-a or beyond to enable FP16 vector arithmetic support\", False),\n    BoolVariable(\"standalone\", \"Builds the tests as standalone executables, links statically with libgcc, libstdc++ and libarm_compute\", False),\n    BoolVariable(\"opencl\", \"Enable OpenCL support\", True),\n    BoolVariable(\"neon\", \"Enable ArmÂ® Neonâ¢ support\", False),\n    BoolVariable(\"embed_kernels\", \"Enable if you want the OpenCL kernels to be built in the library's binaries instead of being read from separate '.cl' / '.cs' files. If embed_kernels is set to 0 then the application can set the path to the folder containing the OpenCL kernel files by calling CLKernelLibrary::init(). By default the path is set to './cl_kernels'.\", True),\n    BoolVariable(\"compress_kernels\", \"Compress embedded OpenCL kernels in library binary using zlib. Useful for reducing the binary size. embed_kernels should be enabled\", False),\n    BoolVariable(\"set_soname\", \"If enabled the library will contain a SONAME and SHLIBVERSION and some symlinks will automatically be created between the objects. (requires SCons 2.4 or above)\", False),\n    BoolVariable(\"openmp\", \"Enable OpenMP backend. Only works when building with g++ and not clang++\", False),\n    BoolVariable(\"cppthreads\", \"Enable C++11 threads backend\", True),\n    PathVariable(\"build_dir\", \"Specify sub-folder for the build\", \".\", PathVariable.PathAccept),\n    PathVariable(\"install_dir\", \"Specify sub-folder for the install\", \"\", PathVariable.PathAccept),\n    BoolVariable(\"exceptions\", \"Enable/disable C++ exception support\", True),\n    PathVariable(\"linker_script\", \"Use an external linker script\", \"\", PathVariable.PathAccept),\n    PathVariable(\"external_tests_dir\", \"\"\"Add examples, benchmarks and tests to the tests suite from an external path. In order to use this option, the external tests directory must have the following structure:\n    EXTERNAL_TESTS_DIR:\n    âââ tests\n        âââ benchmark\n        âÂ Â  âââ CL\n        âÂ Â  âââ datasets\n        âÂ Â  âââ fixtures\n        âÂ Â  âââ Neon\n        âââ validation\n        Â  Â  âââ CL\n        Â  Â  âââ datasets\n        Â  Â  âââ fixtures\n        Â  Â  âââ Neon\\n\"\"\", \"\", PathVariable.PathAccept),\n    BoolVariable(\"experimental_dynamic_fusion\", \"Build the experimental dynamic fusion files. This option also enables opencl=1 on which it has a direct dependency.\", False),\n    BoolVariable(\"fixed_format_kernels\", \"Enable fixed format kernels for GEMM\", False),\n    BoolVariable(\"mapfile\", \"Generate a map file\", False),\n    ListVariable(\"custom_options\", \"Custom options that can be used to turn on/off features\", \"none\", [\"disable_mmla_fp\"]),\n    ListVariable(\"data_type_support\", \"Enable a list of data types to support\", \"all\", [\"qasymm8\", \"qasymm8_signed\", \"qsymm16\", \"fp16\", \"fp32\", \"integer\"]),\n    ListVariable(\"data_layout_support\", \"Enable a list of data layout to support\", \"all\", [\"nhwc\", \"nchw\"]),\n    (\"toolchain_prefix\", \"Override the toolchain prefix; used by all toolchain components: compilers, linker, assembler etc. If unspecified, use default(auto) prefixes; if passed an empty string '' prefixes would be disabled\", \"auto\"),\n    (\"compiler_prefix\", \"Override the compiler prefix; used by just compilers (CC,CXX); further overrides toolchain_prefix for compilers; this is for when the compiler prefixes are different from that of the linkers, archivers etc. If unspecified, this is the same as toolchain_prefix; if passed an empty string '' prefixes would be disabled\", \"auto\"),\n    BoolVariable(\"address_sanitizer\", \"Enable AddressSanitizer\", False),\n    BoolVariable(\"undefined_sanitizer\", \"Enable UndefinedBehaviorSanitizer\", False),\n    BoolVariable(\"thread_sanitizer\", \"Enable ThreadSanitizer\", False),\n    (\"extra_cxx_flags\", \"Extra CXX flags to be appended to the build command\", \"\"),\n    (\"extra_link_flags\", \"Extra LD flags to be appended to the build command\", \"\"),\n    (\"compiler_cache\", \"Command to prefix to the C and C++ compiler (e.g ccache)\", \"\"),\n    (\"specs_file\", \"Specs file to use (e.g. rdimon.specs)\", \"\"),\n    (\"build_config\", \"Operator/Data-type/Data-layout configuration to use for tailored ComputeLibrary builds. Can be a JSON file or a JSON formatted string\", \"\")\n)\n\nif version_at_least(SCons.__version__, \"4.0\"):\n    vars.Add(BoolVariable(\"export_compile_commands\", \"Export compile_commands.json file.\", False))\n\n\nenv = Environment(variables=vars, ENV = os.environ)\n\n\nbuild_path = env['build_dir']\n# If build_dir is a relative path then add a #build/ prefix:\nif not env['build_dir'].startswith('/'):\n    SConsignFile('build/%s/.scons' % build_path)\n    build_path = \"#build/%s\" % build_path\nelse:\n    SConsignFile('%s/.scons' % build_path)\n\ninstall_path = env['install_dir']\n#If the install_dir is a relative path then assume it's from inside build_dir\nif not env['install_dir'].startswith('/') and install_path != \"\":\n    install_path = \"%s/%s\" % (build_path, install_path)\n\nenv.Append(LIBPATH = [build_path, os.path.join(build_path, \"\")])\nExport('env')\nExport('vars')\n\ndef install_lib( lib ):\n    # If there is no install folder, then there is nothing to do:\n    if install_path == \"\":\n        return lib\n    return env.Install( \"%s/lib/\" % install_path, lib)\ndef install_bin( bin ):\n    # If there is no install folder, then there is nothing to do:\n    if install_path == \"\":\n        return bin\n    return env.Install( \"%s/bin/\" % install_path, bin)\ndef install_include( inc ):\n    if install_path == \"\":\n        return inc\n    return env.Install( \"%s/include/\" % install_path, inc)\n\nExport('install_lib')\nExport('install_bin')\n\nHelp(vars.GenerateHelpText(env))\n\n# Export compile_commands.json file\nif env.get(\"export_compile_commands\", False):\n    env.Tool(\"compilation_db\")\n    env.CompilationDatabase(\"%s/compile_commands.json\" % build_path)\n\nif 'armv7a' in env['arch'] and env['os'] == 'android':\n    print(\"WARNING: armv7a on Android is no longer maintained\")\n\nif env['linker_script'] and env['os'] != 'bare_metal':\n    print(\"Linker script is only supported for bare_metal builds\")\n    Exit(1)\n\nif env['build'] == \"embed_only\":\n    SConscript('./SConscript', variant_dir=build_path, duplicate=0)\n    Return()\n\nif env['neon'] and 'x86' in env['arch']:\n    print(\"Cannot compile ArmÂ® Neonâ¢ for x86\")\n    Exit(1)\n\nif env['set_soname'] and not version_at_least(SCons.__version__, \"2.4\"):\n    print(\"Setting the library's SONAME / SHLIBVERSION requires SCons 2.4 or above\")\n    print(\"Update your version of SCons or use set_soname=0\")\n    Exit(1)\n\nif env['os'] == 'bare_metal':\n    if env['cppthreads'] or env['openmp']:\n         print(\"ERROR: OpenMP and C++11 threads not supported in bare_metal. Use cppthreads=0 openmp=0\")\n         Exit(1)\n\nif env['experimental_dynamic_fusion']:\n    # Dynamic Fusion on GPU has a direct dependency on OpenCL and Compute Kernel Writer\n    env['opencl'] = 1\n\nif env['opencl'] and env['embed_kernels'] and env['compress_kernels'] and env['os'] not in ['android']:\n    print(\"Compressed kernels are supported only for android builds\")\n    Exit(1)\n\nif not env['exceptions']:\n    if env['opencl']:\n         print(\"ERROR: OpenCL is not supported when building without exceptions. Use opencl=0\")\n         Exit(1)\n\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_EXCEPTIONS_DISABLED'])\n    env.Append(CXXFLAGS = ['-fno-exceptions'])\n\nenv.Append(CXXFLAGS = ['-DARCH_ARM',\n         '-Wextra','-Wdisabled-optimization','-Wformat=2',\n         '-Winit-self','-Wstrict-overflow=2','-Wswitch-default',\n         '-Woverloaded-virtual', '-Wformat-security',\n         '-Wctor-dtor-privacy','-Wsign-promo','-Weffc++','-Wno-overlength-strings'])\n\nif not 'windows' in env['os']:\n    env.Append(CXXFLAGS = ['-Wall','-std=c++14', '-pedantic' ])\n\n\ncpp_tool = {'linux': 'g++', 'android' : 'clang++',\n             'tizen': 'g++', 'macos':'clang++',\n             'bare_metal':'g++', 'openbsd':'g++','windows':'clang-cl'}\n\nc_tool = {'linux':'gcc', 'android': 'clang', 'tizen':'gcc',\n          'macos':'clang','bare_metal':'gcc',\n          'openbsd':'gcc','windows':'clang-cl'}\n\ndefault_cpp_compiler = cpp_tool[env['os']]\ndefault_c_compiler = c_tool[env['os']]\ncpp_compiler = os.environ.get('CXX', default_cpp_compiler)\nc_compiler = os.environ.get('CC', default_c_compiler)\n\nif env['os'] == 'android' and ( 'clang++' not in cpp_compiler or 'clang' not in c_compiler ):\n    print( \"WARNING: Only clang is officially supported to build the Compute Library for Android\")\n\nif 'clang++' in cpp_compiler:\n    env.Append(CXXFLAGS = ['-Wno-vla-extension'])\nelif 'armclang' in cpp_compiler:\n    pass\nelif not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-Wlogical-op','-Wnoexcept','-Wstrict-null-sentinel','-Wno-misleading-indentation'])\n\nif cpp_compiler == 'g++':\n    # Don't strip comments that could include markers\n    env.Append(CXXFLAGS = ['-C'])\n\nif env['cppthreads']:\n    env.Append(CPPDEFINES = [('ARM_COMPUTE_CPP_SCHEDULER', 1)])\n\nif env['openmp']:\n    env.Append(CPPDEFINES = [('ARM_COMPUTE_OPENMP_SCHEDULER', 1)])\n    if not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-fopenmp'])\n        env.Append(LINKFLAGS = ['-fopenmp'])\n    else:\n        env.Append(CXXFLAGS = ['-openmp'])\n        env.Append(LINKFLAGS = ['libomp.lib'])\n\n# Validate and define state\nif env['estate'] == 'auto':\n    if 'v7a' in env['arch']:\n        env['estate'] = '32'\n    else:\n        env['estate'] = '64'\n\n# Map legacy arch\nif 'arm64' in env['arch']:\n    env['estate'] = '64'\n\nif 'v7a' in env['estate'] and env['estate'] == '64':\n    print(\"ERROR: armv7a architecture has only 32-bit execution state\")\n    Exit(1)\n\nenv.Append(CPPDEFINES = ['ENABLE_NEON', 'ARM_COMPUTE_ENABLE_NEON'])\n\nif 'sve' in env['arch']:\n    env.Append(CPPDEFINES = ['ENABLE_SVE', 'ARM_COMPUTE_ENABLE_SVE'])\n    if 'sve2' in env['arch']:\n        env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_SVE2'])\n\nif 'sme' in env['arch']:\n    env.Append(CPPDEFINES = ['ENABLE_SME', 'ARM_COMPUTE_ENABLE_SME'])\n    if 'sme2' in env['arch']:\n       env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_SME2'])\n\n# Add architecture specific flags\nif env['multi_isa']:\n    # assert arch version is v8\n    if 'v8' not in env['arch']:\n        print(\"Currently Multi ISA binary is only supported for arm v8 family\")\n        Exit(1)\n\n    if 'v8a' in env['arch']:\n        env.Append(CXXFLAGS = ['-march=armv8-a'])\n    else:\n        if 'v8.6-a' in env['arch']:\n            if \"disable_mmla_fp\" not in env['custom_options']:\n                env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_SVEF32MM'])\n\n        env.Append(CXXFLAGS = ['-march=armv8.2-a+fp16']) # explicitly enable fp16 extension otherwise __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is undefined\n\nelse: # NONE \"multi_isa\" builds\n\n    if 'v7a' in env['arch']:\n        env.Append(CXXFLAGS = ['-march=armv7-a', '-mthumb', '-mfpu=neon'])\n        if (env['os'] == 'android' or env['os'] == 'tizen') and not 'hf' in env['arch']:\n            env.Append(CXXFLAGS = ['-mfloat-abi=softfp'])\n        else:\n            env.Append(CXXFLAGS = ['-mfloat-abi=hard'])\n    elif 'v8.6-a' in env['arch']:\n        if 'armv8.6-a-sve2' in env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.6-a+sve2'])\n        elif 'armv8.6-a-sve' == env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.6-a+sve'])\n        elif 'armv8.6-a' == env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.6-a+fp16'])\n\n        env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_I8MM', 'ARM_COMPUTE_ENABLE_BF16','ARM_COMPUTE_ENABLE_FP16'])\n        if \"disable_mmla_fp\" not in env['custom_options']:\n            env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_SVEF32MM'])\n    elif 'v8' in env['arch']:\n        # Preserve the V8 archs for non-multi-ISA variants\n        if 'sve2' in env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.2-a+sve2+fp16+dotprod'])\n        elif 'sve' in env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.2-a+sve+fp16+dotprod'])\n        elif 'armv8r64' in env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.4-a'])\n        elif 'v8.' in env['arch']:\n            env.Append(CXXFLAGS = ['-march=armv8.2-a+fp16']) # explicitly enable fp16 extension otherwise __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is undefined\n        else:\n            env.Append(CXXFLAGS = ['-march=armv8-a'])\n\n        if 'v8.' in env['arch']:\n            env.Append(CPPDEFINES = ['ARM_COMPUTE_ENABLE_FP16'])\n\n    elif 'x86' in env['arch']:\n        if env['estate'] == '32':\n            env.Append(CCFLAGS = ['-m32'])\n            env.Append(LINKFLAGS = ['-m32'])\n        else:\n            env.Append(CXXFLAGS = ['-fPIC'])\n            env.Append(CCFLAGS = ['-m64'])\n            env.Append(LINKFLAGS = ['-m64'])\n\n# Define toolchain\n# The reason why we distinguish toolchain_prefix from compiler_prefix is for cases where the linkers/archivers use a\n# different prefix than the compilers. An example is the NDK r20 toolchain\nauto_toolchain_prefix = \"\"\nif 'x86' not in env['arch']:\n    if env['estate'] == '32':\n        if env['os'] == 'linux':\n            auto_toolchain_prefix = \"arm-linux-gnueabihf-\" if 'v7' in env['arch'] else \"armv8l-linux-gnueabihf-\"\n        elif env['os'] == 'bare_metal':\n            auto_toolchain_prefix = \"arm-eabi-\"\n        elif env['os'] == 'android':\n            auto_toolchain_prefix = \"arm-linux-androideabi-\"\n        elif env['os'] == 'tizen':\n            auto_toolchain_prefix = \"armv7l-tizen-linux-gnueabi-\"\n    elif env['estate'] == '64' and 'v8' in env['arch']:\n        if env['os'] == 'linux':\n            auto_toolchain_prefix = \"aarch64-linux-gnu-\"\n        elif env['os'] == 'bare_metal':\n            auto_toolchain_prefix = \"aarch64-elf-\"\n        elif env['os'] == 'android':\n            auto_toolchain_prefix = \"aarch64-linux-android-\"\n        elif env['os'] == 'tizen':\n            auto_toolchain_prefix = \"aarch64-tizen-linux-gnu-\"\n\nif env['build'] == 'native' or env[\"toolchain_prefix\"] == \"\":\n    toolchain_prefix = \"\"\nelif env[\"toolchain_prefix\"] == \"auto\":\n    toolchain_prefix = auto_toolchain_prefix\nelse:\n    toolchain_prefix = env[\"toolchain_prefix\"]\n\nif env['build'] == 'native' or env[\"compiler_prefix\"] == \"\":\n    compiler_prefix = \"\"\nelif env[\"compiler_prefix\"] == \"auto\":\n    compiler_prefix = toolchain_prefix\nelse:\n    compiler_prefix = env[\"compiler_prefix\"]\n\nenv['CC'] = env['compiler_cache']+ \" \" + compiler_prefix + c_compiler\nenv['CXX'] = env['compiler_cache']+ \" \" + compiler_prefix + cpp_compiler\nenv['LD'] = toolchain_prefix + \"ld\"\nenv['AS'] = toolchain_prefix + \"as\"\n\nif env['os'] == 'windows':\n    env['AR'] = \"llvm-lib\"\n    env['RANLIB'] = \"llvm-ranlib\"\nelse:\n    env['AR'] = toolchain_prefix + \"ar\"\n\nenv['RANLIB'] = toolchain_prefix + \"ranlib\"\n\nprint(\"Using compilers:\")\nprint(\"CC\", env['CC'])\nprint(\"CXX\", env['CXX'])\n\n\"\"\"Build the Compute Kernel Writer subproject\"\"\"\nif env['experimental_dynamic_fusion']:\n    # Strip ccache prefix from CC and CXX to obtain only the target triple\n    CKW_CC = env['CC'].replace(env['compiler_cache'] + \" \", \"\")\n    CKW_CXX = env['CXX'].replace(env['compiler_cache'] + \" \", \"\")\n    CKW_CCACHE = 1 if env['compiler_cache'] else 0\n\n    CKW_BUILD_TYPE = \"Debug\" if env['debug'] else \"Release\"\n\n    CKW_ENABLE_OPENCL = env['opencl']\n    CKW_ENABLE_ASSERTS = env['debug'] or env['asserts']\n\n    CKW_PROJECT_DIR = Dir('.').path + \"/compute_kernel_writer\"\n    CKW_INCLUDE_DIR = CKW_PROJECT_DIR + \"/include\"\n    CKW_BUILD_DIR = build_path.replace(\"#\", \"\")\n\n    CKW_CMAKE_CMD = \"CC={CKW_CC} CXX={CKW_CXX} cmake -G \\\"Unix Makefiles\\\" \" \\\n                    \"-S {CKW_PROJECT_DIR} -B {CKW_BUILD_DIR} \" \\\n                    \"-DCMAKE_BUILD_TYPE={CKW_BUILD_TYPE} \" \\\n                    \"-DCKW_ENABLE_OPENCL=ON \" \\\n                    \"-DCKW_ENABLE_ASSERTS={CKW_ENABLE_ASSERTS} \" \\\n                    \"-DCKW_CCACHE={CKW_CCACHE} \".format(CKW_CC=CKW_CC,\n                                                        CKW_CXX=CKW_CXX,\n                                                        CKW_PROJECT_DIR=CKW_PROJECT_DIR,\n                                                        CKW_BUILD_DIR=CKW_BUILD_DIR,\n                                                        CKW_BUILD_TYPE=CKW_BUILD_TYPE,\n                                                        CKW_ENABLE_OPENCL=CKW_ENABLE_OPENCL,\n                                                        CKW_ENABLE_ASSERTS=CKW_ENABLE_ASSERTS,\n                                                        CKW_CCACHE=CKW_CCACHE\n                                                        )\n\n    # Configure CKW static objects with -fPIC (CMAKE_POSITION_INDEPENDENT_CODE) option to enable linking statically to ACL\n    CKW_CMAKE_CONFIGURE_STATIC = CKW_CMAKE_CMD + \"-DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON\"\n    CKW_CMAKE_BUILD = \"cmake --build {CKW_BUILD_DIR} --target ckw -j{NUM_JOBS}\".format(CKW_BUILD_DIR=CKW_BUILD_DIR,\n                                                                                                 NUM_JOBS=GetOption('num_jobs')\n                                                                                                 )\n\n    # Build Compute Kernel Writer Static Library\n    subprocess.check_call(CKW_CMAKE_CONFIGURE_STATIC, stderr=subprocess.STDOUT, shell=True)\n    subprocess.check_call(CKW_CMAKE_BUILD, stderr=subprocess.STDOUT, shell=True)\n\n    # Let ACL know where to find CKW headers\n    env.Append(CPPPATH = CKW_INCLUDE_DIR)\n\nif not GetOption(\"help\"):\n    try:\n        if env['os'] == 'windows':\n            compiler_ver = subprocess.check_output(\"clang++ -dumpversion\").decode().strip()\n        else:\n            compiler_ver = subprocess.check_output(env['CXX'].split() + [\"-dumpversion\"]).decode().strip()\n    except OSError:\n        print(\"ERROR: Compiler '%s' not found\" % env['CXX'])\n        Exit(1)\n\n    if 'armclang' in cpp_compiler:\n        pass\n    elif 'clang++' not in cpp_compiler:\n        if env['arch'] == 'arm64-v8.2-a' and not version_at_least(compiler_ver, '6.2.1'):\n            print(\"GCC 6.2.1 or newer is required to compile armv8.2-a code\")\n            Exit(1)\n        elif env['arch'] == 'arm64-v8a' and not version_at_least(compiler_ver, '4.9'):\n            print(\"GCC 4.9 or newer is required to compile ArmÂ® Neonâ¢ code for AArch64\")\n            Exit(1)\n\n        if version_at_least(compiler_ver, '6.1'):\n            env.Append(CXXFLAGS = ['-Wno-ignored-attributes'])\n\n        if compiler_ver == '4.8.3':\n            env.Append(CXXFLAGS = ['-Wno-array-bounds'])\n\n        if not version_at_least(compiler_ver, '7.0.0') and env['os'] == 'bare_metal':\n            env.Append(LINKFLAGS = ['-fstack-protector-strong'])\n\n    # Add Android NDK toolchain specific flags\n    if 'clang++' in cpp_compiler and env['os'] == 'android':\n        # For NDK >= r21, clang 9 or above is used\n        if version_at_least(compiler_ver, '9.0.0'):\n            env['ndk_above_r21'] = True\n\n            if env['openmp']:\n                env.Append(LINKFLAGS = ['-static-openmp'])\n\n        # For NDK >= r23, clang 12 or above is used. This condition detects NDK < r23\n        if not version_at_least(compiler_ver, '12.0.0'):\n            # System assembler is deprecated and integrated assembler is preferred since r23.\n            # However integrated assembler has always been suppressed for NDK < r23.\n            # Thus for backward compatibility, we include this flag only for NDK < r23\n            env.Append(CXXFLAGS = ['-no-integrated-as'])\n\ndata_types = []\ndata_layouts = []\n\n# Set correct data types / layouts to build\nif env['build_config']:\n    data_types, data_layouts = read_build_config_json(env['build_config'])\nelse:\n    data_types = env['data_type_support']\n    data_layouts = env['data_layout_support']\n\nenv = update_data_type_layout_flags(env, data_types, data_layouts)\n\nif env['standalone']:\n    if not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-fPIC'])\n        env.Append(LINKFLAGS = ['-static-libgcc','-static-libstdc++'])\n\nif env['Werror']:\n    env.Append(CXXFLAGS = ['-Werror'])\n\nif env['os'] == 'android':\n    env.Append(CPPDEFINES = ['ANDROID'])\n    env.Append(LINKFLAGS = ['-pie', '-static-libstdc++', '-ldl'])\nelif env['os'] == 'bare_metal':\n    env.Append(LINKFLAGS = ['-static'])\n    env.Append(CXXFLAGS = ['-fPIC'])\n    if env['specs_file'] == \"\":\n        env.Append(LINKFLAGS = ['-specs=rdimon.specs'])\n    env.Append(CPPDEFINES = ['NO_MULTI_THREADING'])\n    env.Append(CPPDEFINES = ['BARE_METAL'])\nif env['os'] == 'linux' and env['arch'] == 'armv7a':\n    env.Append(CXXFLAGS = [ '-Wno-psabi' ])\nif env['os'] == 'windows':\n    env.Append(CXXFLAGS = [ '/std:c++14','/EHa'])\n    env.Append(CXXFLAGS = [ '-Wno-c++98-compat', '-Wno-covered-switch-default','-Wno-c++98-compat-pedantic'])\n    env.Append(CXXFLAGS = [ '-Wno-shorten-64-to-32', '-Wno-sign-conversion','-Wno-documentation'])\n    env.Append(CXXFLAGS = [ '-Wno-extra-semi-stmt', '-Wno-float-equal','-Wno-implicit-int-conversion'])\n    env.Append(CXXFLAGS = [ '-Wno-documentation-pedantic', '-Wno-extra-semi','-Wno-shadow-field-in-constructor'])\n    env.Append(CXXFLAGS = [ '-Wno-float-conversion', '-Wno-switch-enum','-Wno-comma'])\n    env.Append(CXXFLAGS = [ '-Wno-implicit-float-conversion', '-Wno-deprecated-declarations','-Wno-old-style-cast'])\n    env.Append(CXXFLAGS = [ '-Wno-zero-as-null-pointer-constant', '-Wno-inconsistent-missing-destructor-override'])\n    env.Append(CXXFLAGS = [ '-Wno-asm-operand-widths'])\n\n\nif env['specs_file'] != \"\":\n    env.Append(LINKFLAGS = ['-specs='+env['specs_file']])\n\nif env['neon']:\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_CPU_ENABLED'])\n\nif env['opencl']:\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_OPENCL_ENABLED'])\n    if env['os'] in ['bare_metal'] or env['standalone']:\n        print(\"Cannot link OpenCL statically, which is required for bare metal / standalone builds\")\n        Exit(1)\n\nif env[\"os\"] not in [\"windows\",\"android\", \"bare_metal\"] and (env['opencl'] or env['cppthreads']):\n    env.Append(LIBS = ['pthread'])\n\nif env['os'] == 'openbsd':\n    env.Append(LIBS = ['c'])\n    env.Append(CXXFLAGS = ['-fPIC'])\n\nif env['opencl']:\n    if env['embed_kernels']:\n        env.Append(CPPDEFINES = ['EMBEDDED_KERNELS'])\n    if env['compress_kernels']:\n        env.Append(CPPDEFINES = ['ARM_COMPUTE_COMPRESSED_KERNELS'])\n        env.Append(LIBS = ['z'])\n\nif env['debug']:\n    env['asserts'] = True\n    if not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-O0','-g','-gdwarf-2'])\n    else:\n        env.Append(CXXFLAGS = ['-Z7','-MTd','-fms-compatibility','-fdelayed-template-parsing'])\n        env.Append(LINKFLAGS = ['-DEBUG'])\n\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_DEBUG_ENABLED'])\nelse:\n    if not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-O3'])\n    else:\n        # on windows we use clang-cl which does not support the option -O3\n        if not version_at_least(compiler_ver, '17.0.0'):\n            # Disable optimizations in clang 17 or later because the compiler crashes with -O2\n            env.Append(CXXFLAGS = ['-O2'])\n\nif env['asserts']:\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_ASSERTS_ENABLED'])\n    if not 'windows' in env['os']:\n        env.Append(CXXFLAGS = ['-fstack-protector-strong'])\n\nif env['logging']:\n    env.Append(CPPDEFINES = ['ARM_COMPUTE_LOGGING_ENABLED'])\n\nif env['address_sanitizer']:\n    if 'android' in env['os']:\n        env.Append(CXXFLAGS = ['-fsanitize=hwaddress'])\n        env.Append(LINKFLAGS = ['-fsanitize=hwaddress'])\n    else:\n        env.Append(CXXFLAGS = ['-fsanitize=address'])\n        env.Append(LINKFLAGS = ['-fsanitize=address'])\n\nif env['undefined_sanitizer']:\n    env.Append(CXXFLAGS = ['-fsanitize=undefined'])\n    env.Append(LINKFLAGS = ['-fsanitize=undefined'])\n\nif env['thread_sanitizer']:\n    env.Append(CXXFLAGS = ['-fsanitize=thread'])\n    env.Append(LINKFLAGS = ['-fsanitize=thread'])\n\nenv.Append(CPPPATH = ['#/include', \"#\"])\nenv.Append(CXXFLAGS = env['extra_cxx_flags'])\nenv.Append(LINKFLAGS = env['extra_link_flags'])\n\nDefault( install_include(\"arm_compute\"))\nDefault( install_include(\"support\"))\nDefault( install_include(\"utils\"))\nfor dirname in os.listdir(\"./include\"):\n    Default( install_include(\"include/%s\" % dirname))\n\nExport('version_at_least')\n\nSConscript('./SConscript', variant_dir=build_path, duplicate=0)\n\nif env['examples'] and env['build_config']:\n    print(\"WARNING: Building examples for selected operators not supported. Use examples=0\")\n    Return()\n\nif env['examples'] and env['exceptions']:\n    if env['os'] == 'bare_metal' and env['arch'] == 'armv7a':\n        print(\"WARNING: Building examples for bare metal and armv7a is not supported. Use examples=0\")\n        Return()\n    SConscript('./examples/SConscript', variant_dir='%s/examples' % build_path, duplicate=0)\n\nif env['exceptions']:\n    if env['build_config']:\n        print(\"WARNING: Building tests for selected operators not supported\")\n        Return()\n    if env['os'] == 'bare_metal' and env['arch'] == 'armv7a':\n        print(\"WARNING: Building tests for bare metal and armv7a is not supported\")\n        Return()\n    SConscript('./tests/SConscript', variant_dir='%s/tests' % build_path, duplicate=0)\n\n# Unknown variables are not allowed\n# Note: we must delay the call of UnknownVariables until after\n# we have applied the Variables object to the construction environment\nunknown = vars.UnknownVariables()\nif unknown:\n    print(\"Unknown variables: %s\" % \" \".join(unknown.keys()))\n    Exit(1)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 4.09375,
          "content": "**Reporting vulnerabilities**\n\nArm takes security issues seriously and welcomes feedback from researchers and the security community in order to improve the security of its products and services. We operate a coordinated disclosure policy for disclosing vulnerabilities and other security issues.\n\nSecurity issues can be complex and one single timescale doesn't fit all circumstances. We will make best endeavours to inform you when we expect security notifications and fixes to be available and facilitate coordinated disclosure when notifications and patches/mitigations are available.\n\n**Report**\n\nFor all security issues, contact Arm by email at [arm-security@arm.com](mailto:arm-security@arm.com).\n\n\n**Secure submission using PGP**\n\nWe support and encourage secure submission of vulnerability reports using PGP, using the key below. If you would like replies to be encrypted, please provide your own public key through a secure mechanism.\n\n~~~\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBFr7/RMBEACjHR5QZL/z1t2aLCRNXLE4KJiQmCo7edU5Be+7MTjIJDzZNu68\nlNEUYRoLexeayif8eC4T19bUsSbGpxHiYsFFjV8ewLXDyDJRRuaBGPfQ5rn/mE6X\nNvu+9Pputr+mB1R3CXcvrNkhmzPkK7zVM15oeyBMhogqPssuT4OeMduQdip8smfK\nxTMk91RrJTLb+G3eE1tf+81kXBYvzp2e24Sn0/VeYe0IWnBobjVBZk3TmcYxDvz5\nY47fU9V6cNj3Zq4VYrgxuLoFCA2VtetyiFQm5IYa3Bt3SWcAwihr8nbR2HoNdWyA\nu8wJYYVzSq3hvT5l/IjTHxEcY+6RBq8poDSsftzvX386u9hmw7sJQFlTw6/pUjdr\ngbsZ2ZzRBzKtU17ercpn4kU6VgVP3WRB5HiTFFkEpZuqAznOYaHbMq4dfd/g7Quq\nC0VTbWiJnhku2i+g4BdHHRDtIF6U3aVQAfbrDb1LjVTa65p5ULOeY3HRAWtMNtu/\nCj8cD98JDanzXtcnisds8vMQ8LZ6iMFChEnF8K4V0eLw9Ju6CMNiFYY7SEBndD/H\nM4KcU4li7mROSbJcshgEbe1SYkxdMuI9eY4DNYxl3VjxoPUGzeqXo/ADFKE9bHsi\nGTyEoij4ku0HspLVKnYHXn/LqHGwEcwjF8zphS+w5cn/e01akYwz5EVSQwARAQAB\ntB1Bcm0gU3VwcG9ydCA8c3VwcG9ydEBhcm0uY29tPokCTgQTAQgAOBYhBN9zqDwZ\nRL/vF0ihcdfNKdz4bBRiBQJa+/0TAhsDBQsJCAcCBhUKCQgLAgQWAgMBAh4BAheA\nAAoJENfNKdz4bBRibK0P/jLlJR/QYypcjb+8BnHT9tCDgcV2KFYXS15VpbSNviN9\nXs/UOnSadoGUMGCXDyb1PRNn98yUn7JlNR9rtsqPRmkpbo5cuw46ehgxjVlfcHnk\nCttaE8Davx6zo0fyrBib2+oVVW8usi9+uRK4vhhPUicO3oXwzldsVFz+RbpubZxc\nBg/CZ+dQ2jMKOv1zDtInOG6OBnbQZRAeiWXgGhcIoPZ4zBQOi8nr0+bLcfvMeZi2\nuz6uKnylpXwZbl4ijcG8MKV/ei+7du+SzA9NY0WOT2g3FXDREWUhjKs8bmEZgIx4\nQgvDNpxAUThF+TqQ7zrsA8nT8POvDD0MhN/Z+A3QdPTdcaZFaXzIdxbDg+0FKmzu\nOgtQBH4C01RWrkmZlhO5w7/Qjt0vLlhfyQIL9BW/HeEPtjnH2Hnq8xYnZhlVqJEh\nFJU7F9sMvyiJiKviobFTd6AmpVkhxhcJ3k2L2C03imTsmUwAoejQCXwiYcOhyQ2t\nZ9Nk8YIZTEw2urGFi4HSQPwPq2j/2j7ABJ4rlzJvO6vs5ppGkumvzIIP9JnpVXbp\nwcbK6Ev6KdkX4s14Mzd6Hsd8LpL8t5nHhxUey6G0xKe2eSlHVm5Mlfhoete9UmIZ\ndzIOZkgTgWXlYXRIxwGQ2Pss7pURtofykvLklq4jcobQuHxurl9cteodETfbWk/J\nuQINBFr7/RMBEADWZG8eqt5D22g3T7ehnH/T3fuTX8LPUBnODMWGAEUY8uv64To8\n46odvrXFgWBgCf0sROEyJchc3SGLyR9S4lJsVJRde3QLN3WZkHlB4pSn4IQHFyQd\nwsLQi+S9uggHMPlQ6MNvc5n0P3k5bT9fLUmtJWJ3QVjW7k963ZXpzf1zbQJqs30w\nrlqGUZllfRoYQTfcYxFEaUFhwRJ//skNImWH8Vz+PTnqg2zRtFn3usrBV4GpNvsM\n6jy+YEsSvUa7IY8k4wpPzEhIfqDjGbZxFSQ1H1G+mLUL+DD7oGffej/ZoC86TIdM\np6ew1rGhJdQBLh9nx+1ADOLWjNo2R0h60u7VR5q/K6V4fwWmeGFipPXZCD92I+nR\nt/cjznwNyD/6J9YrBMF7mbGrS1TyfLaLt4tpdcBnsgqDTodd5OmG65mroXsg/lNO\n7YZdecLZ34krfaLrWTtKkqULXbppB+uQvbVj8p8ONRImn6bZ+iAhnNaH9wJ06ico\nb1F0imJ2SJWnFr6PzPRr0gPStLgu9wrRKheaORwF/H/HxSyPZxNVxFqu81q518A/\nplhub9INQLaxHf/TTjXpqZCcfdNTYUAW8rwbQfW9doSIT4lHY8bJXktb6BsVjkFj\nPzDeYpXeOoTWetQqsEuTdg/F+qg041QBLtNj9Lr3Vy3StgMciRUIP8m0XwARAQAB\niQI2BBgBCAAgFiEE33OoPBlEv+8XSKFx180p3PhsFGIFAlr7/RMCGwwACgkQ180p\n3PhsFGLWMA//V/XKrnI2YBh/SptUrgg7knPXva45bb7tGSH1fJg8f/wqycOSFFCY\nES45boA5jlQ3z8uw6BYCz5KeOucGhxAMw+x5EDdxZ33ksY5zqXB35WaMXzEwGYYb\nE113/yhOsTbzu4bBKABSXbJO98MdAWvWpyCpp2MHIR3S9+ycM7/FMZ5xi3czZNRg\n9+WZP+7W4qWhJptQ0kBh5C3N/tiltju5WQ2Y7XIn+5dMOJdtseFS7CNerxXZGAtH\nnfRxaD/4ENdbWOwaVJiVW7+ioUJz09OWgy0gLYSDW+hciDnW1QAaJLpdAbniGZ0S\nJsTmaZla8JnUKqZPgbFfA2OcnH9H+DWc0pHv17c5tJzTMP7rgirgGRX/U2LOzmFZ\n1UxjQj5nn3Oa5frXbIAzb8xKiR0VDaquCM/3sti1AesYiS0Gw0Sqnw8qpFypgFXN\nCKVgYXppIT+TmbDbNJDOB2UycxeI4vbiBwU8fI4qSpW12WsGdAJt/rx3UsyhZ+02\n4aSqDHzhJmtDPQ6lnaKe1fUkC90tgp8loVGmriWQx82jAQMqATVjIklTpE4vm00f\nocQIWOKEE90mKNEoV6rNbfl5QevmapTVdV/pmrRBzhbsa1uAUS4HZdH0Nf/OXEyv\nyYCr2gCFPymkkRYhPr2w5EgbWyzLaBIwqjyIbXaveuB3DYi2Lhbf64I=\n=EaN7\n-----END PGP PUBLIC KEY BLOCK-----\n~~~\n\nFor more information visit https://developer.arm.com/support/arm-security-updates/report-security-vulnerabilities"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.6533203125,
          "content": "# Copyright (c) 2023 Arm Limited.\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nworkspace(name = \"compute_library\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"bazel_skylib\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz\",\n        \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz\",\n    ],\n    sha256 = \"f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728\",\n)\n\nload(\"@bazel_skylib//:workspace.bzl\", \"bazel_skylib_workspace\")\n\nbazel_skylib_workspace()"
        },
        {
          "name": "arm_compute",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compute_kernel_writer",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "filedefs.json",
          "type": "blob",
          "size": 1.6728515625,
          "content": "{\n    \"cpu\": {\n        \"arch\" : {\n            \"armv8-a\": {\n                \"cxxflags\": [\"-march=armv8-a\"]\n            },\n            \"armv8.2-a\": {\n                \"cxxflags\": [\"-march=armv8.2-a+fp16\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\"]\n            },\n            \"armv8.2-a-sve\": {\n                \"cxxflags\": [\"-march=armv8.2-a+sve+fp16+dotprod\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\", \"ARM_COMPUTE_ENABLE_BF16\",\n                               \"ARM_COMPUTE_ENABLE_I8MM\", \"ARM_COMPUTE_ENABLE_SVEF32MM\"]\n            },\n            \"armv8.2-a-sve2\": {\n                \"cxxflags\": [\"-march=armv8.2-a+sve2+fp16+dotprod\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\", \"ARM_COMPUTE_ENABLE_BF16\",\n                               \"ARM_COMPUTE_ENABLE_I8MM\", \"ARM_COMPUTE_ENABLE_SVEF32MM\"]\n            },\n            \"armv8r64\": {\n                \"cxxflags\": [\"-march=armv8.4-a\"]\n            },\n            \"armv8.6-a\": {\n                \"cxxflags\": [\"-march=armv8.6-a+fp16\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\", \"ARM_COMPUTE_ENABLE_BF16\",\n                               \"ARM_COMPUTE_ENABLE_I8MM\"]\n            },\n            \"armv8.6-a-sve\": {\n                \"cxxflags\": [\"-march=armv8.6-a+sve+fp16+dotprod\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\", \"ARM_COMPUTE_ENABLE_BF16\",\n                               \"ARM_COMPUTE_ENABLE_I8MM\"]\n            },\n            \"armv8.6-a-sve2\": {\n                \"cxxflags\": [\"-march=armv8.6-a+sve2+fp16+dotprod\"],\n                \"cppdefines\": [\"ARM_COMPUTE_ENABLE_FP16\", \"ARM_COMPUTE_ENABLE_BF16\",\n                               \"ARM_COMPUTE_ENABLE_I8MM\"]\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "filelist.json",
          "type": "blob",
          "size": 115.359375,
          "content": "{\n  \"common\": [\n    \"src/common/cpuinfo/CpuInfo.cpp\",\n    \"src/common/cpuinfo/CpuModel.cpp\",\n    \"src/common/cpuinfo/CpuIsaInfo.cpp\",\n    \"src/common/utils/LegacySupport.cpp\",\n    \"src/common/AllocatorWrapper.cpp\",\n    \"src/common/ITensorV2.cpp\",\n    \"src/common/TensorPack.cpp\",\n    \"src/common/IOperator.cpp\",\n    \"src/core/AccessWindowAutoPadding.cpp\",\n    \"src/core/AccessWindowStatic.cpp\",\n    \"src/core/AccessWindowTranspose.cpp\",\n    \"src/core/Error.cpp\",\n    \"src/core/GPUTarget.cpp\",\n    \"src/core/Helpers.cpp\",\n    \"src/core/helpers/LUTManager.cpp\",\n    \"src/core/IAccessWindow.cpp\",\n    \"src/core/IKernel.cpp\",\n    \"src/core/ITensor.cpp\",\n    \"src/core/ITensorPack.cpp\",\n    \"src/core/Rounding.cpp\",\n    \"src/core/Size2D.cpp\",\n    \"src/core/SubTensorInfo.cpp\",\n    \"src/core/TensorInfo.cpp\",\n    \"src/core/Utils.cpp\",\n    \"src/core/Validate.cpp\",\n    \"src/core/Version.cpp\",\n    \"src/core/helpers/SoftmaxHelpers.cpp\",\n    \"src/core/helpers/Utils.cpp\",\n    \"src/core/helpers/WindowHelpers.cpp\",\n    \"src/core/utils/ActivationFunctionUtils.cpp\",\n    \"src/core/utils/AssemblyUtils.cpp\",\n    \"src/core/utils/DataTypeUtils.cpp\",\n    \"src/core/utils/DataLayoutUtils.cpp\",\n    \"src/core/utils/InterpolationPolicyUtils.cpp\",\n    \"src/core/utils/FormatUtils.cpp\",\n    \"src/core/utils/Math.cpp\",\n    \"src/core/utils/ScaleUtils.cpp\",\n    \"src/core/utils/StringUtils.cpp\",\n    \"src/core/utils/helpers/fft.cpp\",\n    \"src/core/utils/helpers/tensor_transform.cpp\",\n    \"src/core/utils/io/FileHandler.cpp\",\n    \"src/core/utils/misc/MMappedFile.cpp\",\n    \"src/core/utils/quantization/AsymmHelpers.cpp\",\n    \"src/core/CPP/CPPTypes.cpp\",\n    \"src/core/CPP/kernels/CPPBoxWithNonMaximaSuppressionLimitKernel.cpp\",\n    \"src/core/CPP/kernels/CPPNonMaximumSuppressionKernel.cpp\",\n    \"src/core/CPP/kernels/CPPPermuteKernel.cpp\",\n    \"src/core/CPP/kernels/CPPTopKVKernel.cpp\",\n    \"src/core/CPP/kernels/CPPUpsampleKernel.cpp\",\n    \"src/runtime/Allocator.cpp\",\n    \"src/runtime/BlobLifetimeManager.cpp\",\n    \"src/runtime/BlobMemoryPool.cpp\",\n    \"src/runtime/ISimpleLifetimeManager.cpp\",\n    \"src/runtime/ITensorAllocator.cpp\",\n    \"src/runtime/IWeightsManager.cpp\",\n    \"src/runtime/IScheduler.cpp\",\n    \"src/runtime/Memory.cpp\",\n    \"src/runtime/MemoryManagerOnDemand.cpp\",\n    \"src/runtime/OffsetLifetimeManager.cpp\",\n    \"src/runtime/OffsetMemoryPool.cpp\",\n    \"src/runtime/OperatorTensor.cpp\",\n    \"src/runtime/PoolManager.cpp\",\n    \"src/runtime/RuntimeContext.cpp\",\n    \"src/runtime/Scheduler.cpp\",\n    \"src/runtime/SchedulerFactory.cpp\",\n    \"src/runtime/SchedulerUtils.cpp\",\n    \"src/runtime/SubTensor.cpp\",\n    \"src/runtime/Tensor.cpp\",\n    \"src/runtime/TensorAllocator.cpp\",\n    \"src/runtime/Utils.cpp\",\n    \"src/runtime/CPP/ICPPSimpleFunction.cpp\",\n    \"src/runtime/CPP/functions/CPPBoxWithNonMaximaSuppressionLimit.cpp\",\n    \"src/runtime/CPP/functions/CPPDetectionOutputLayer.cpp\",\n    \"src/runtime/CPP/functions/CPPDetectionPostProcessLayer.cpp\",\n    \"src/runtime/CPP/functions/CPPNonMaximumSuppression.cpp\",\n    \"src/runtime/CPP/functions/CPPPermute.cpp\",\n    \"src/runtime/CPP/functions/CPPTopKV.cpp\",\n    \"src/runtime/CPP/functions/CPPUpsample.cpp\"\n  ],\n  \"logging\": [\n    \"src/core/utils/logging/FilePrinter.cpp\",\n    \"src/core/utils/logging/Helpers.cpp\",\n    \"src/core/utils/logging/Logger.cpp\",\n    \"src/core/utils/logging/LoggerRegistry.cpp\"\n  ],\n  \"scheduler\": {\n    \"single\": [ \"src/runtime/CPP/SingleThreadScheduler.cpp\" ],\n    \"threads\": [ \"src/runtime/CPP/CPPScheduler.cpp\" ],\n    \"omp\": [ \"src/runtime/OMP/OMPScheduler.cpp\"]\n  },\n  \"c_api\": {\n    \"common\": [\n      \"src/c/AclContext.cpp\",\n      \"src/c/AclOperator.cpp\",\n      \"src/c/AclQueue.cpp\",\n      \"src/c/AclTensor.cpp\",\n      \"src/c/AclTensorPack.cpp\",\n      \"src/c/AclVersion.cpp\"\n    ],\n    \"cpu\": [\n    ],\n    \"gpu\": [\n      \"src/c/cl/AclOpenClExt.cpp\"\n    ],\n    \"operators\":\n    [\n      \"src/c/operators/AclActivation.cpp\"\n    ]\n  },\n  \"gpu\": {\n    \"common\": [\n      \"src/core/CL/CLCompileContext.cpp\",\n      \"src/core/CL/DefaultLWSHeuristics.cpp\",\n      \"src/core/CL/CLHelpers.cpp\",\n      \"src/core/CL/CLKernelLibrary.cpp\",\n      \"src/core/CL/CLUtils.cpp\",\n      \"src/core/CL/ICLKernel.cpp\",\n      \"src/core/CL/ICLSimple2DKernel.cpp\",\n      \"src/core/CL/ICLSimple3DKernel.cpp\",\n      \"src/core/CL/ICLSimpleKernel.cpp\",\n      \"src/core/CL/ICLTensor.cpp\",\n      \"src/core/CL/OpenCL.cpp\",\n      \"src/gpu/cl/ClContext.cpp\",\n      \"src/gpu/cl/ClKernelLibrary.cpp\",\n      \"src/gpu/cl/ClQueue.cpp\",\n      \"src/gpu/cl/ClTensor.cpp\",\n      \"src/core/CL/kernels/CLFillBorderKernel.cpp\",\n      \"src/runtime/CL/CLBufferAllocator.cpp\",\n      \"src/runtime/CL/CLGEMMHeuristicsHandle.cpp\",\n      \"src/runtime/CL/CLHelpers.cpp\",\n      \"src/runtime/CL/CLMemory.cpp\",\n      \"src/runtime/CL/CLMemoryRegion.cpp\",\n      \"src/runtime/CL/CLOperator.cpp\",\n      \"src/runtime/CL/CLRuntimeContext.cpp\",\n      \"src/runtime/CL/CLScheduler.cpp\",\n      \"src/runtime/CL/CLSubTensor.cpp\",\n      \"src/runtime/CL/CLTensor.cpp\",\n      \"src/runtime/CL/CLTensorAllocator.cpp\",\n      \"src/runtime/CL/CLTuner.cpp\",\n      \"src/runtime/CL/ICLSimpleFunction.cpp\",\n      \"src/runtime/CL/Utils.cpp\",\n      \"src/runtime/CL/mlgo/HeuristicTree.cpp\",\n      \"src/runtime/CL/mlgo/MLGOHeuristics.cpp\",\n      \"src/runtime/CL/mlgo/MLGOParser.cpp\",\n      \"src/runtime/CL/mlgo/Utils.cpp\",\n      \"src/runtime/CL/tuners/CLTuningParametersList.cpp\"\n    ],\n    \"operators\": {\n    \"Activation\":{\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClActivationKernel.cpp\",\n          \"src/gpu/cl/operators/ClActivation.cpp\",\n          \"src/runtime/CL/functions/CLActivationLayer.cpp\"\n        ]\n      }\n    },\n    \"ArgMinMax\": {\n      \"deps\": [ \"Reshape\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLArgMinMaxLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLArgMinMaxLayer.cpp\"\n        ]\n      }\n    },\n    \"Add\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClElementwiseKernel.cpp\",\n          \"src/gpu/cl/operators/ClAdd.cpp\"\n        ]\n      }\n    },\n    \"BatchNormalization\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp\",\n          \"src/core/CL/kernels/CLFuseBatchNormalizationKernel.cpp\",\n          \"src/runtime/CL/functions/CLBatchNormalizationLayer.cpp\",\n          \"src/runtime/CL/functions/CLFuseBatchNormalization.cpp\"\n        ]\n      }\n    },\n    \"BatchToSpace\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLBatchToSpaceLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLBatchToSpaceLayer.cpp\"\n         ]\n      }\n    },\n    \"Bitwise\": {\n      \"files\": {\n        \"common\": [ \"src/core/CL/kernels/CLBitwiseKernel.cpp\" ]\n      }\n    },\n    \"BitwiseAnd\": {\n      \"deps\": [ \"Bitwise\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLBitwiseAnd.cpp\" ]\n      }\n    },\n    \"BitwiseNot\": {\n      \"deps\": [ \"Bitwise\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLBitwiseNot.cpp\" ]\n      }\n    },\n    \"BitwiseOr\": {\n      \"deps\": [ \"Bitwise\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLBitwiseOr.cpp\" ]\n      }\n    },\n    \"BitwiseXor\": {\n      \"deps\": [ \"Bitwise\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLBitwiseXor.cpp\" ]\n      }\n    },\n    \"BoundingBoxTransform\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLBoundingBoxTransformKernel.cpp\",\n          \"src/runtime/CL/functions/CLBoundingBoxTransform.cpp\"\n        ]\n      }\n    },\n    \"Cast\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClCastKernel.cpp\",\n          \"src/gpu/cl/operators/ClCast.cpp\",\n          \"src/runtime/CL/functions/CLCast.cpp\"\n        ]\n      }\n    },\n    \"ChannelShuffle\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLChannelShuffleLayer.cpp\"\n        ]\n      }\n    },\n    \"Comparison\":  {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLComparisonKernel.cpp\",\n          \"src/runtime/CL/functions/CLComparison.cpp\"\n        ]\n      }\n    },\n    \"Concatenate\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClBatchConcatenateKernel.cpp\",\n          \"src/gpu/cl/kernels/ClDepthConcatenateKernel.cpp\",\n          \"src/gpu/cl/kernels/ClHeightConcatenateKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWidthConcatenate2TensorsKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWidthConcatenate4TensorsKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWidthConcatenateKernel.cpp\",\n          \"src/gpu/cl/operators/ClConcatenate.cpp\",\n          \"src/runtime/CL/functions/CLConcatenateLayer.cpp\"\n        ]\n      }\n    },\n    \"Conv2d\": {\n      \"deps\": [\n        \"Activation\",\n        \"ElementwiseBinary\",\n        \"FFT2D\",\n        \"Gemm\",\n        \"Mul\",\n        \"Pad\",\n        \"Permute\",\n        \"Reduction\",\n        \"Reshape\",\n        \"Reverse\",\n        \"Slice\"\n      ],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClDirectConv2dKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWinogradFilterTransformKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWinogradInputTransformKernel.cpp\",\n          \"src/gpu/cl/kernels/ClWinogradOutputTransformKernel.cpp\",\n          \"src/gpu/cl/kernels/ClIm2ColKernel.cpp\",\n          \"src/gpu/cl/kernels/ClIndirectConv2dKernel.cpp\",\n          \"src/gpu/cl/kernels/ClIndirectConv2dAddressPrecalculationKernel.cpp\",\n          \"src/gpu/cl/kernels/ClCol2ImKernel.cpp\",\n          \"src/gpu/cl/operators/ClConv2d.cpp\",\n          \"src/gpu/cl/operators/ClDirectConv2d.cpp\",\n          \"src/gpu/cl/operators/ClGemmConv2d.cpp\",\n          \"src/gpu/cl/operators/ClIndirectConv2d.cpp\",\n          \"src/gpu/cl/operators/ClWinogradConv2d.cpp\",\n          \"src/gpu/cl/kernels/ClWeightsReshapeKernel.cpp\",\n          \"src/runtime/CL/functions/CLConvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLDirectConvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLFFTConvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLIndirectConvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp\"\n        ]\n      }\n    },\n    \"Conv3d\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClDirectConv3dKernel.cpp\",\n          \"src/gpu/cl/operators/ClDirectConv3d.cpp\",\n          \"src/runtime/CL/functions/CLConv3D.cpp\"\n        ]\n      }\n    },\n    \"Copy\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClCopyKernel.cpp\",\n          \"src/gpu/cl/operators/ClCopy.cpp\",\n          \"src/runtime/CL/functions/CLCopy.cpp\"\n        ]\n      }\n    },\n    \"CropResize\": {\n      \"deps\": [ \"Copy\", \"Fill\", \"Scale\" ],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClCropKernel.cpp\",\n          \"src/gpu/cl/operators/ClCrop.cpp\",\n          \"src/runtime/CL/functions/CLCrop.cpp\",\n          \"src/runtime/CL/functions/CLCropResize.cpp\"\n        ]\n      }\n    },\n    \"Deconv2d\": {\n      \"deps\": [ \"Conv2d\", \"Reverse\", \"Transpose\"],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp\",\n          \"src/core/CL/kernels/CLDeconvolutionReshapeOutputKernel.cpp\",\n          \"src/gpu/cl/kernels/ClTransposedConvolutionKernel.cpp\",\n          \"src/gpu/cl/operators/ClTransposedConvolution.cpp\",\n          \"src/runtime/CL/functions/CLDeconvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp\",\n          \"src/runtime/CL/functions/CLDirectDeconvolutionLayer.cpp\",\n          \"src/runtime/CL/functions/CLGEMMDeconvolutionLayer.cpp\"\n        ]\n      }\n    },\n    \"DepthConvert\": {\n      \"deps\": [ \"Cast\"],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLDepthConvertLayer.cpp\" ]\n      }\n    },\n    \"DepthToSpace\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLDepthToSpaceLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLDepthToSpaceLayer.cpp\"\n        ]\n      }\n    },\n    \"DepthwiseConv2d\": {\n      \"deps\": [ \"Permute\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLDepthwiseConvolutionLayerNativeKernel.cpp\",\n          \"src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp\"\n        ]\n      }\n    },\n    \"Dequantize\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClDequantizeKernel.cpp\",\n          \"src/gpu/cl/operators/ClDequantize.cpp\",\n          \"src/runtime/CL/functions/CLDequantizationLayer.cpp\"\n        ]\n      }\n    },\n    \"ElementwiseBinary\": {\n      \"deps\": [\"Add\", \"Sub\"],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClElementwiseKernel.cpp\",\n          \"src/gpu/cl/operators/ClElementwiseOperations.cpp\",\n          \"src/runtime/CL/functions/CLElementwiseOperations.cpp\"\n        ]\n      }\n    },\n    \"ElementwiseUnary\":{\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClElementwiseUnaryKernel.cpp\",\n          \"src/gpu/cl/operators/ClElementwiseUnary.cpp\",\n          \"src/runtime/CL/functions/CLElementwiseUnaryLayer.cpp\"\n        ]\n      }\n    },\n    \"FFT1D\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLFFTDigitReverseKernel.cpp\",\n          \"src/core/CL/kernels/CLFFTRadixStageKernel.cpp\",\n          \"src/core/CL/kernels/CLFFTScaleKernel.cpp\",\n          \"src/runtime/CL/functions/CLFFT1D.cpp\"\n        ]\n      }\n    },\n    \"FFT2D\": {\n      \"deps\": [ \"FFT1D\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLFFT2D.cpp\" ]\n      }\n    },\n    \"Fill\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClFillKernel.cpp\",\n          \"src/gpu/cl/operators/ClFill.cpp\",\n          \"src/runtime/CL/functions/CLFill.cpp\"\n        ]\n      }\n    },\n    \"Flatten\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/operators/ClFlatten.cpp\",\n          \"src/runtime/CL/functions/CLFlattenLayer.cpp\"\n        ]\n      }\n    },\n    \"Floor\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClFloorKernel.cpp\",\n          \"src/gpu/cl/operators/ClFloor.cpp\",\n          \"src/runtime/CL/functions/CLFloor.cpp\"\n        ]\n      }\n    },\n    \"FullyConnected\": {\n      \"deps\": [ \"Flatten\", \"Gemm\", \"Transpose\"],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClConvertFullyConnectedWeightsKernel.cpp\",\n          \"src/gpu/cl/operators/ClConvertFullyConnectedWeights.cpp\",\n          \"src/gpu/cl/operators/ClFullyConnected.cpp\",\n          \"src/runtime/CL/functions/CLConvertFullyConnectedWeights.cpp\",\n          \"src/runtime/CL/functions/CLFullyConnectedLayer.cpp\"\n        ]\n      }\n    },\n    \"Gather\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLGatherKernel.cpp\",\n          \"src/runtime/CL/functions/CLGather.cpp\"]\n      }\n    },\n    \"Gemm\": {\n      \"deps\": [ \"Cast\" ],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/gemm/ClGemmHelpers.cpp\",\n          \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeBifrost.cpp\",\n          \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeMidgard.cpp\",\n          \"src/gpu/cl/kernels/gemm/native/ClGemmDefaultConfigNativeValhall.cpp\",\n          \"src/gpu/cl/kernels/gemm/reshaped/ClGemmDefaultConfigReshapedBifrost.cpp\",\n          \"src/gpu/cl/kernels/gemm/reshaped/ClGemmDefaultConfigReshapedValhall.cpp\",\n          \"src/gpu/cl/kernels/gemm/reshaped_only_rhs/ClGemmDefaultConfigReshapedRhsOnlyBifrost.cpp\",\n          \"src/gpu/cl/kernels/gemm/reshaped_only_rhs/ClGemmDefaultConfigReshapedRhsOnlyValhall.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyNativeKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpOffsetContributionKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpOffsetContributionOutputStageKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleByFloatKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpQuantizeDownInt32ScaleKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmMatrixMultiplyNativeKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmMatrixMultiplyReshapedOnlyRhsKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmReshapeLhsMatrixKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmReshapeRhsMatrixKernel.cpp\",\n          \"src/gpu/cl/kernels/ClGemmLowpReductionKernel.cpp\",\n          \"src/gpu/cl/operators/ClGemm.cpp\",\n          \"src/gpu/cl/operators/ClGemmLowpMatrixMultiplyCore.cpp\",\n          \"src/gpu/cl/operators/ClGemmLowpOutputStage.cpp\",\n          \"src/runtime/CL/gemm/CLGEMMDefaultTypeBifrost.cpp\",\n          \"src/runtime/CL/gemm/CLGEMMDefaultTypeMidgard.cpp\",\n          \"src/runtime/CL/gemm/CLGEMMDefaultTypeValhall.cpp\",\n          \"src/runtime/CL/gemm_auto_heuristics/CLGEMMAutoHeuristics.cpp\",\n          \"src/runtime/CL/functions/CLGEMM.cpp\",\n          \"src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp\",\n          \"src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp\",\n          \"src/runtime/heuristics/direct_conv/ClDirectConvDefaultConfigBifrost.cpp\",\n          \"src/runtime/heuristics/direct_conv/ClDirectConvDefaultConfigValhall.cpp\",\n          \"src/runtime/heuristics/dwc_native/ClDWCNativeDefaultConfigBifrost.cpp\",\n          \"src/runtime/heuristics/dwc_native/ClDWCNativeDefaultConfigValhall.cpp\",\n          \"src/runtime/heuristics/dwc_native/ClDWCNativeHeuristicsHelpers.cpp\",\n          \"src/runtime/heuristics/indirect_conv/ClIndirectConvDefaultConfigValhall.cpp\"\n        ]\n      }\n    },\n    \"MatMul\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClMatMulLowpNativeKernel.cpp\",\n          \"src/gpu/cl/kernels/ClMatMulLowpNativeMMULKernel.cpp\",\n          \"src/gpu/cl/kernels/ClMatMulNativeKernel.cpp\",\n          \"src/gpu/cl/kernels/ClMatMulNativeMMULKernel.cpp\",\n          \"src/gpu/cl/kernels/helpers/MatMulKernelHelpers.cpp\",\n          \"src/gpu/cl/operators/ClMatMul.cpp\",\n          \"src/runtime/CL/functions/CLMatMul.cpp\",\n          \"src/runtime/heuristics/matmul_native/ClMatMulNativeDefaultConfigValhall.cpp\",\n          \"src/runtime/heuristics/matmul_native/ClMatMulNativeHelpers.cpp\",\n          \"src/runtime/heuristics/matmul_native/ClMatMulNativeDefaultVariantValhall.cpp\"\n        ]\n      }\n    },\n    \"GenerateProposals\": {\n      \"deps\": [ \"BoundingBoxTransform\", \"Dequantize\", \"Pad\", \"Permute\", \"Quantize\", \"Reshape\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLGenerateProposalsLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLGenerateProposalsLayer.cpp\"\n        ]\n      }\n    },\n    \"InstanceNormalize\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLInstanceNormalizationLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLInstanceNormalizationLayer.cpp\"\n        ]\n      }\n    },\n    \"L2Normalize\": {\n      \"deps\": [ \"Reduction\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLL2NormalizeLayer.cpp\"\n        ]\n      }\n    },\n    \"Logical\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/operators/ClLogicalNot.cpp\",\n          \"src/runtime/CL/functions/CLLogicalAnd.cpp\",\n          \"src/runtime/CL/functions/CLLogicalNot.cpp\",\n          \"src/runtime/CL/functions/CLLogicalOr.cpp\"\n        ]\n      }\n    },\n    \"LSTM\": {\n      \"deps\": [\n        \"Activation\",\n        \"Concatenate\",\n        \"Copy\",\n        \"Dequantize\",\n        \"ElementwiseBinary\",\n        \"Fill\",\n        \"FullyConnected\",\n        \"Gemm\",\n        \"MeanStdDevNormalize\",\n        \"Mul\",\n        \"Quantize\",\n        \"Slice\",\n        \"Transpose\"\n      ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLQLSTMLayerNormalizationKernel.cpp\",\n          \"src/runtime/CL/functions/CLQLSTMLayer.cpp\",\n          \"src/runtime/CL/functions/CLLSTMLayer.cpp\",\n          \"src/runtime/CL/functions/CLLSTMLayerQuantized.cpp\"\n        ]\n      }\n    },\n    \"MaxUnpool2d\": {\n      \"deps\": [ \"Fill\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLMaxUnpoolingLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLMaxUnpoolingLayer.cpp\"\n        ]\n      }\n    },\n    \"MeanStdDevNormalize\": {\n      \"deps\": [ \"Reduction\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLMeanStdDevNormalizationKernel.cpp\",\n          \"src/runtime/CL/functions/CLMeanStdDevNormalizationLayer.cpp\",\n          \"src/runtime/CL/functions/CLReduceMean.cpp\"\n        ]\n      }\n    },\n    \"Mul\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClMulKernel.cpp\",\n          \"src/gpu/cl/operators/ClMul.cpp\",\n          \"src/runtime/CL/functions/CLPixelWiseMultiplication.cpp\"\n        ]\n      }\n    },\n    \"Normalize\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLNormalizationLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLNormalizationLayer.cpp\"\n        ]\n      }\n    },\n    \"Pad\": {\n      \"deps\": [ \"Copy\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLPadLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLPadLayer.cpp\"\n        ]\n      }\n    },\n    \"Permute\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClPermuteKernel.cpp\",\n          \"src/gpu/cl/operators/ClPermute.cpp\",\n          \"src/runtime/CL/functions/CLPermute.cpp\"\n        ]\n      }\n    },\n    \"Pool2d\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClPool2dKernel.cpp\",\n          \"src/gpu/cl/operators/ClPool2d.cpp\",\n          \"src/runtime/CL/functions/CLPoolingLayer.cpp\"\n        ]\n      }\n    },\n    \"Pool3d\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClPool3dKernel.cpp\",\n          \"src/gpu/cl/operators/ClPool3d.cpp\",\n          \"src/runtime/CL/functions/CLPooling3dLayer.cpp\"\n        ]\n      }\n    },\n    \"PRelu\": {\n      \"deps\": [ \"ElementwiseBinary\" ],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/operators/ClPRelu.cpp\",\n          \"src/runtime/CL/functions/CLPReluLayer.cpp\"\n        ]\n      }\n    },\n    \"PriorBox\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLPriorBoxLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLPriorBoxLayer.cpp\"\n        ]\n      }\n    },\n    \"Quantize\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClQuantizeKernel.cpp\",\n          \"src/gpu/cl/operators/ClQuantize.cpp\",\n          \"src/runtime/CL/functions/CLQuantizationLayer.cpp\"\n        ]\n      }\n    },\n    \"Range\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLRangeKernel.cpp\",\n          \"src/runtime/CL/functions/CLRange.cpp\"\n        ]\n      }\n    },\n    \"Reduction\": {\n      \"deps\": [ \"Reshape\" ],\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLReductionOperationKernel.cpp\",\n          \"src/runtime/CL/functions/CLReductionOperation.cpp\"\n        ]\n      }\n    },\n    \"Reorg\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLReorgLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLReorgLayer.cpp\"\n        ]\n      }\n    },\n    \"Reshape\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClReshapeKernel.cpp\",\n          \"src/gpu/cl/operators/ClReshape.cpp\",\n          \"src/runtime/CL/functions/CLReshapeLayer.cpp\"\n        ]\n      }\n    },\n    \"Reverse\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLReverseKernel.cpp\",\n          \"src/runtime/CL/functions/CLReverse.cpp\"\n        ]\n      }\n    },\n    \"RNN\": {\n      \"deps\": [ \"Activation\", \"Cast\", \"ElementwiseBinary\", \"FullyConnected\", \"Gemm\"],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLRNNLayer.cpp\" ]\n      }\n    },\n    \"ROIAlign\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLROIAlignLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLROIAlignLayer.cpp\"\n        ]\n      }\n    },\n    \"ROIPool2d\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLROIPoolingLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLROIPoolingLayer.cpp\"\n        ]\n      }\n    },\n    \"Scale\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClScaleKernel.cpp\",\n          \"src/gpu/cl/operators/ClScale.cpp\",\n          \"src/runtime/CL/functions/CLScale.cpp\"\n        ]\n      }\n    },\n    \"Scatter\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClScatterKernel.cpp\",\n          \"src/gpu/cl/operators/ClScatter.cpp\",\n          \"src/runtime/CL/functions/CLScatter.cpp\"\n        ]\n      }\n    },\n    \"Select\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLSelectKernel.cpp\",\n          \"src/runtime/CL/functions/CLSelect.cpp\"\n        ]\n      }\n    },\n    \"Slice\": {\n      \"deps\": [ \"StridedSlice\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLSlice.cpp\" ]\n      }\n    },\n    \"Softmax\": {\n      \"deps\": [ \"Permute\" ],\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClSoftmaxKernel.cpp\",\n          \"src/gpu/cl/operators/ClSoftmax.cpp\",\n          \"src/runtime/CL/functions/CLSoftmaxLayer.cpp\"\n        ]\n      }\n    },\n    \"SpaceToBatch\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLSpaceToBatchLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLSpaceToBatchLayer.cpp\"\n        ]\n      }\n    },\n    \"SpaceToDepth\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLSpaceToDepthLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLSpaceToDepthLayer.cpp\"\n        ]\n      }\n    },\n    \"Split\": {\n      \"deps\": [ \"StridedSlice\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLSplit.cpp\" ]\n      }\n    },\n    \"Stack\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLStackLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLStackLayer.cpp\"\n        ]\n      }\n    },\n    \"StridedSlice\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLStridedSliceKernel.cpp\",\n          \"src/runtime/CL/functions/CLStridedSlice.cpp\"\n        ]\n      }\n    },\n    \"Sub\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClElementwiseKernel.cpp\",\n          \"src/gpu/cl/operators/ClSub.cpp\"\n        ]\n      }\n    },\n    \"Tile\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLTileKernel.cpp\",\n          \"src/runtime/CL/functions/CLTile.cpp\"\n        ]\n      }\n    },\n    \"Transpose\": {\n      \"files\": {\n        \"common\": [\n          \"src/gpu/cl/kernels/ClTransposeKernel.cpp\",\n          \"src/gpu/cl/operators/ClTranspose.cpp\",\n          \"src/runtime/CL/functions/CLTranspose.cpp\"\n        ]\n      }\n    },\n    \"Unstack\": {\n      \"deps\": [ \"StridedSlice\" ],\n      \"files\": {\n        \"common\": [ \"src/runtime/CL/functions/CLUnstack.cpp\" ]\n      }\n    },\n    \"YUVNormalize\": {\n      \"files\": {\n        \"common\": [\n          \"src/core/CL/kernels/CLNormalizePlanarYUVLayerKernel.cpp\",\n          \"src/runtime/CL/functions/CLNormalizePlanarYUVLayer.cpp\"\n        ]\n      }\n    }\n  }\n},\n  \"cpu\": {\n    \"common\": [\n      \"src/cpu/CpuContext.cpp\",\n      \"src/cpu/CpuQueue.cpp\",\n      \"src/cpu/CpuTensor.cpp\",\n      \"src/core/NEON/kernels/NEFillBorderKernel.cpp\",\n      \"src/runtime/NEON/INEOperator.cpp\",\n      \"src/runtime/NEON/INESimpleFunction.cpp\",\n      \"src/runtime/NEON/INESimpleFunctionNoBorder.cpp\"\n    ],\n    \"operators\": {\n      \"Activation\": {\n        \"deps\": [ \"LUT\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuActivation.cpp\",\n            \"src/cpu/kernels/CpuActivationKernel.cpp\",\n            \"src/cpu/kernels/activation/heuristics/CpuActivationKernelHeuristics.cpp\",\n            \"src/runtime/NEON/functions/NEActivationLayer.cpp\"\n          ],\n          \"neon\": {\n            \"fp16\": [ \"src/cpu/kernels/activation/generic/neon/fp16.cpp\" ],\n            \"fp32\": [ \"src/cpu/kernels/activation/generic/neon/fp32.cpp\" ],\n            \"qasymm8\": [\n              \"src/cpu/kernels/activation/generic/neon/qasymm8.cpp\",\n              \"src/cpu/kernels/activation/generic/neon/lut.cpp\"\n            ],\n            \"qasymm8_signed\": [\n              \"src/cpu/kernels/activation/generic/neon/qasymm8_signed.cpp\",\n              \"src/cpu/kernels/activation/generic/neon/lut.cpp\"\n            ],\n            \"qsymm16\": [ \"src/cpu/kernels/activation/generic/neon/qsymm16.cpp\" ]\n          },\n          \"sve\": {\n            \"fp16\": [ \"src/cpu/kernels/activation/generic/sve/fp16.cpp\" ],\n            \"fp32\": [ \"src/cpu/kernels/activation/generic/sve/fp32.cpp\" ]\n          },\n          \"sve2\":{\n            \"fp32\":[\"src/cpu/kernels/logistic/generic/sme2/fp32.cpp\"],\n            \"qasymm8\": [\n              \"src/cpu/kernels/activation/generic/sve2/qasymm8.cpp\",\n              \"src/cpu/kernels/activation/generic/sve2/lut.cpp\"\n            ],\n            \"qasymm8_signed\": [ \"src/cpu/kernels/activation/generic/sve2/qasymm8_signed.cpp\" ],\n            \"qsymm16\": [ \"src/cpu/kernels/activation/generic/sve2/qsymm16.cpp\" ]\n          }\n        }\n      },\n      \"ArgMinMax\": {\n        \"deps\": [ \"Reduction\" ],\n        \"files\": {\n          \"common\": [ \"src/runtime/NEON/functions/NEArgMinMaxLayer.cpp\" ]\n        }\n      },\n      \"Add\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuAdd.cpp\",\n            \"src/cpu/kernels/CpuAddKernel.cpp\",\n            \"src/runtime/NEON/functions/NEArithmeticAddition.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\"src/cpu/kernels/add/generic/neon/impl.cpp\"],\n            \"fp32\":[\"src/cpu/kernels/add/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/add/generic/neon/fp16.cpp\"],\n            \"integer\":[\"src/cpu/kernels/add/generic/neon/integer.cpp\"],\n            \"qasymm8\": [\"src/cpu/kernels/add/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/add/generic/neon/qasymm8_signed.cpp\"],\n            \"qsymm16\": [\"src/cpu/kernels/add/generic/neon/qsymm16.cpp\"]\n          },\n          \"sve\": {\n            \"common\": [ \"src/cpu/kernels/add/generic/sve/impl.cpp\" ],\n            \"integer\":[\"src/cpu/kernels/add/generic/sve/integer.cpp\"],\n            \"fp32\":[\"src/cpu/kernels/add/generic/sve/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/add/generic/sve/fp16.cpp\"]\n          },\n          \"sve2\": {\n            \"common\": [\"src/cpu/kernels/add/generic/sme2/impl.cpp\"],\n            \"qasymm8\": [ \"src/cpu/kernels/add/generic/sve2/qasymm8.cpp\" ],\n            \"qasymm8_signed\": [ \"src/cpu/kernels/add/generic/sve2/qasymm8_signed.cpp\",\n                                \"src/cpu/kernels/add/generic/sme2/qasymm8_signed.cpp\" ],\n            \"qsymm16\": [ \"src/cpu/kernels/add/generic/sve2/qsymm16.cpp\" ]\n          }\n        }\n      },\n      \"AddMulAdd\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuAddMulAdd.cpp\",\n            \"src/cpu/kernels/CpuAddMulAddKernel.cpp\",\n            \"src/runtime/NEON/functions/NEAddMulAdd.cpp\"\n          ],\n          \"neon\": {\n            \"fp32\":[\"src/cpu/kernels/addmuladd/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/addmuladd/generic/neon/fp16.cpp\"],\n            \"qasymm8\": [\"src/cpu/kernels/addmuladd/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/addmuladd/generic/neon/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"BatchNormalize\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp\",\n            \"src/core/NEON/kernels/NEFuseBatchNormalizationKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp\",\n            \"src/runtime/NEON/functions/NEFuseBatchNormalization.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\n              \"src/cpu/kernels/fuse_batch_normalization/nchw/all.cpp\"\n            ],\n            \"fp16\": [\n              \"src/cpu/kernels/fuse_batch_normalization/generic/fp16.cpp\",\n              \"src/core/NEON/kernels/batchnormalization/impl/NEON/fp16.cpp\",\n              \"src/cpu/kernels/fuse_batch_normalization/nhwc/neon/fp16.cpp\",\n              \"src/cpu/kernels/fuse_batch_normalization/nchw/neon/fp16.cpp\"\n\n            ],\n            \"fp32\": [\n              \"src/cpu/kernels/fuse_batch_normalization/generic/fp32.cpp\",\n              \"src/core/NEON/kernels/batchnormalization/impl/NEON/fp32.cpp\",\n              \"src/cpu/kernels/fuse_batch_normalization/nhwc/neon/fp32.cpp\",\n              \"src/cpu/kernels/fuse_batch_normalization/nchw/neon/fp32.cpp\"\n            ]\n          },\n          \"sve\": {\n            \"fp16\": [ \"src/core/NEON/kernels/batchnormalization/impl/SVE/fp16.cpp\" ],\n            \"fp32\": [ \"src/core/NEON/kernels/batchnormalization/impl/SVE/fp32.cpp\" ]\n          }\n        }\n      },\n      \"BatchToSpace\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBatchToSpaceLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBatchToSpaceLayer.cpp\"\n          ]\n        }\n      },\n      \"BitwiseAnd\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBitwiseAndKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBitwiseAnd.cpp\"\n          ]\n        }\n      },\n      \"BitwiseNot\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBitwiseNotKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBitwiseNot.cpp\"\n          ]\n        }\n      },\n      \"BitwiseOr\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBitwiseOrKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBitwiseOr.cpp\"\n          ]\n        }\n      },\n      \"BitwiseXor\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBitwiseXorKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBitwiseXor.cpp\"\n          ]\n        }\n      },\n      \"BoundingBoxTransform\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEBoundingBoxTransformKernel.cpp\",\n            \"src/runtime/NEON/functions/NEBoundingBoxTransform.cpp\"\n          ],\n          \"neon\":{\n            \"common\":[\"src/cpu/kernels/boundingboxtransform/generic/neon/impl.cpp\"],\n            \"fp32\":[\"src/cpu/kernels/boundingboxtransform/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/boundingboxtransform/generic/neon/fp16.cpp\"],\n            \"qsymm16\":[\"src/cpu/kernels/boundingboxtransform/generic/neon/qsymm16.cpp\"]\n          }\n        }\n      },\n      \"Cast\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuCast.cpp\",\n            \"src/cpu/kernels/CpuCastKernel.cpp\",\n            \"src/runtime/NEON/functions/NECast.cpp\"\n          ],\n          \"neon\":{\n            \"fp16\":[\"src/cpu/kernels/cast/generic/neon/fp16.cpp\"]\n          }\n        }\n      },\n      \"ChannelShuffle\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEChannelShuffleLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEChannelShuffleLayer.cpp\"\n          ]\n        }\n      },\n      \"Concatenate\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuConcatenate.cpp\",\n            \"src/cpu/kernels/CpuConcatenateWidthKernel.cpp\",\n            \"src/cpu/kernels/CpuConcatenateBatchKernel.cpp\",\n            \"src/cpu/kernels/CpuConcatenateDepthKernel.cpp\",\n            \"src/cpu/kernels/CpuConcatenateHeightKernel.cpp\",\n            \"src/runtime/NEON/functions/NEConcatenateLayer.cpp\"\n          ]\n        }\n      },\n      \"Conv2d\": {\n        \"deps\": [\n          \"Activation\",\n          \"ElementwiseBinary\",\n          \"FFT2D\",\n          \"Gemm\",\n          \"Mul\",\n          \"Pad\",\n          \"Permute\",\n          \"Reshape\",\n          \"Reverse\",\n          \"Slice\"\n        ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuConv2d.cpp\",\n            \"src/cpu/operators/CpuDirectConv2d.cpp\",\n            \"src/cpu/operators/CpuGemmDirectConv2d.cpp\",\n            \"src/cpu/operators/CpuGemmConv2d.cpp\",\n            \"src/cpu/operators/CpuWinogradConv2d.cpp\",\n            \"src/cpu/operators/internal/CpuGemmAssemblyDispatch.cpp\",\n            \"src/cpu/kernels/CpuDirectConv2dKernel.cpp\",\n            \"src/cpu/kernels/CpuDirectConv2dOutputStageKernel.cpp\",\n            \"src/cpu/kernels/CpuWinogradConv2dKernel.cpp\",\n            \"src/cpu/kernels/CpuCol2ImKernel.cpp\",\n            \"src/cpu/kernels/CpuIm2ColKernel.cpp\",\n            \"src/cpu/kernels/CpuWeightsReshapeKernel.cpp\",\n            \"src/runtime/NEON/functions/NEConvolutionLayer.cpp\",\n            \"src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp\",\n            \"src/runtime/NEON/functions/NEFFTConvolutionLayer.cpp\",\n            \"src/runtime/NEON/functions/NEGEMMConv2d.cpp\",\n            \"src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp\",\n            \"src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\n              \"src/core/NEON/kernels/convolution/common/padding.cpp\",\n              \"src/core/NEON/kernels/convolution/common/qasymm8.cpp\",\n              \"src/core/NEON/kernels/convolution/common/qsymm8.cpp\",\n              \"src/core/NEON/kernels/convolution/common/utils.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms_fp32.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms_fp32.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms_fp32.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/winograd_fp32.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/a64_fp32_6x6.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_1x8.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_4x4.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/arm_fp32_6x6.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x2_1x7.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x4_1x5.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_1x6_1x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_2x2_3x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_2x2_5x5.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/arm_fp32_4x4_3x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_2x2_3x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_2x2_5x5.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/arm_fp32_4x4_3x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x2_1x7.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x4_1x5.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/cpp_fp32_1x6_1x3.cpp\",\n              \"src/cpu/kernels/directconv2d/nhwc/neon/impl.cpp\",\n              \"src/cpu/kernels/directconv2d/nhwc/neon/qasymm8.cpp\",\n              \"src/cpu/kernels/directconv2d/nchw/all.cpp\"\n\n            ],\n            \"fp32\": [\n              \"src/cpu/kernels/directconv2d/nhwc/neon/fp32.cpp\",\n              \"src/cpu/kernels/directconv2d_output_stage/generic/neon/fp32.cpp\"\n            ],\n            \"fp16\": [\n              \"src/cpu/kernels/directconv2d/nchw/fp16.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/winograd_fp16.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms_fp16.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms_fp16.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms_fp16.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/a64_fp16_6x6.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/a64_fp16_4x4_3x3.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/weight_transforms/a64_fp16_4x4_3x3.cpp\",\n              \"src/cpu/kernels/directconv2d/nhwc/neon/fp16.cpp\",\n              \"src/cpu/kernels/directconv2d_output_stage/generic/neon/fp16.cpp\"\n            ],\n            \"qasymm8\": [\n               \"src/cpu/kernels/directconv2d_output_stage/generic/neon/qasymm8.cpp\"\n            ],\n            \"qasymm8_signed\": [\n                \"src/cpu/kernels/directconv2d_output_stage/generic/neon/qasymm8_signed.cpp\"\n             ]\n          },\n          \"sve\": {\n            \"common\": [\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/sve_fp32_6x6.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/input_transforms/sme_fp32_mla_6x6.cpp\",\n              \"src/core/NEON/kernels/convolution/winograd/output_transforms/sme_fp32_mopa_4x4_3x3.cpp\"\n            ]\n          }\n        }\n      },\n      \"Copy\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuCopy.cpp\",\n            \"src/cpu/kernels/CpuCopyKernel.cpp\",\n            \"src/runtime/NEON/functions/NECopy.cpp\"\n          ]\n        }\n      },\n      \"CropResize\": {\n        \"deps\": [ \"Scale\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NECropKernel.cpp\",\n            \"src/runtime/NEON/functions/NECropResize.cpp\"\n          ],\n          \"neon\": {\n            \"fp32\":    [ \"src/cpu/kernels/crop/generic/neon/fp32.cpp\" ],\n            \"fp16\":    [ \"src/cpu/kernels/crop/generic/neon/fp16.cpp\" ],\n            \"integer\": [ \"src/cpu/kernels/crop/generic/neon/integer.cpp\"   ]\n          }\n        }\n      },\n      \"Deconv2d\": {\n        \"deps\": [ \"Conv2d\", \"Reverse\", \"Transpose\"],\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NEDeconvolutionLayer.cpp\"\n          ]\n        }\n      },\n      \"DepthConvert\": {\n        \"deps\": [ \"Cast\"],\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NEDepthConvertLayer.cpp\"\n          ]\n        }\n      },\n      \"DepthToSpace\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEDepthToSpaceLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEDepthToSpaceLayer.cpp\",\n            \"src/cpu/kernels/depth_to_space/nhwc/any/impl.cpp\",\n            \"src/cpu/kernels/depth_to_space/nchw/any/impl.cpp\"\n          ]\n        }\n      },\n      \"DepthwiseConv2d\": {\n        \"deps\": [ \"Activation\", \"Permute\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuDepthwiseConv2d.cpp\",\n            \"src/cpu/operators/CpuDepthwiseConv2dAssemblyDispatch.cpp\",\n            \"src/cpu/kernels/CpuDepthwiseConv2dNativeKernel.cpp\",\n            \"src/cpu/kernels/internal/CpuDepthwiseConv2dAssemblyWrapperKernel.cpp\",\n            \"src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\n              \"src/core/NEON/kernels/convolution/common/padding.cpp\",\n              \"src/core/NEON/kernels/convolution/common/qasymm8.cpp\",\n              \"src/core/NEON/kernels/convolution/common/qsymm8.cpp\",\n              \"src/core/NEON/kernels/convolution/common/utils.cpp\",\n              \"src/core/NEON/kernels/arm_conv/addressing.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_common.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_strategies_common.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_u8q.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_u8s8u8q.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_s8q.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_fp32.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp32_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_s8qs_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_u8qa_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/a64_s8q_3x3_dot.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/a64_u8q_3x3_dot.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/generic_quantized_dot_product.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/premultiply.cpp\",\n              \"src/cpu/kernels/depthwiseconv2d/generic/neon/impl.cpp\"\n              ],\n              \"fp16\":[\n              \"src/cpu/kernels/depthwiseconv2d/generic/neon/fp16.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/depthwise_fp16.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/a64_fp16_nhwc_generic_output9_mla_depthfirst/generic.cpp\"\n              ],\n              \"fp32\":[\"src/cpu/kernels/depthwiseconv2d/generic/neon/fp32.cpp\"],\n              \"qasymm8\":[\"src/cpu/kernels/depthwiseconv2d/generic/neon/qasymm8.cpp\"],\n              \"qasymm8_signed\":[\"src/cpu/kernels/depthwiseconv2d/generic/neon/qasymm8_signed.cpp\"]\n          },\n          \"sve\": {\n            \"common\": [\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/sve_s8q_3x3_dot.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/interleaves/sve_u8q_3x3_dot.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_nhwc_generic_output9_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_s8qs_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s1_output2x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_3x3_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_3x3_s2_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sve_u8s8u8q_nhwc_5x5_s1_output2x2_mla_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output3x3_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s1_output4x4_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_direct.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_nhwc_3x3_s2_output2x2_mla_depthfirst/generic_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_3x3_s1_4rows_mla_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_3x3_s2_4rows_mla_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_5x5_s1_4rows_mla_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32_planar_5x5_s2_4rows_mla_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_s8q_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8q_planar_5x5_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/depthwise/kernels/sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za/generic.cpp\"\n            ]\n          }\n        }\n      },\n      \"Dequantize\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuDequantize.cpp\",\n            \"src/cpu/kernels/CpuDequantizeKernel.cpp\",\n            \"src/runtime/NEON/functions/NEDequantizationLayer.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/dequantize/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/dequantize/generic/neon/fp16.cpp\"]\n          }\n        }\n      },\n      \"DetectionPostProcess\": {\n        \"deps\": [ \"Dequantize\" ],\n        \"files\": {\n          \"common\" : [ \"src/runtime/NEON/functions/NEDetectionPostProcessLayer.cpp\" ]\n        }\n      },\n      \"Conv3d\": {\n        \"deps\": [\n          \"Activation\"\n        ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuDirectConv3d.cpp\",\n            \"src/cpu/kernels/CpuDirectConv3dKernel.cpp\",\n            \"src/runtime/NEON/functions/NEConv3D.cpp\"\n          ],\n          \"neon\":{\n              \"fp32\":[\"src/cpu/kernels/conv3d/generic/neon/fp32.cpp\"],\n              \"fp16\":[\"src/cpu/kernels/conv3d/generic/neon/fp16.cpp\"],\n              \"qasymm8\":[\"src/cpu/kernels/conv3d/generic/neon/qasymm8.cpp\"],\n              \"qasymm8_signed\":[\"src/cpu/kernels/conv3d/generic/neon/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"ElementwiseBinary\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuElementwise.cpp\",\n            \"src/cpu/kernels/CpuElementwiseKernel.cpp\",\n            \"src/runtime/NEON/functions/NEElementwiseOperations.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\": [\"src/cpu/kernels/elementwise_binary/generic/neon/fp32.cpp\"],\n            \"fp16\": [\"src/cpu/kernels/elementwise_binary/generic/neon/fp16.cpp\"],\n            \"integer\": [\"src/cpu/kernels/elementwise_binary/generic/neon/integer.cpp\"],\n            \"qasymm8\": [\"src/cpu/kernels/elementwise_binary/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/elementwise_binary/generic/neon/qasymm8_signed.cpp\"]\n          },\n          \"sve\": {\n            \"common\": [\"src/cpu/kernels/elementwise_binary/generic/sve/impl.cpp\" ],\n            \"integer\": [\"src/cpu/kernels/elementwise_binary/generic/sve/integer.cpp\"],\n            \"fp32\": [\"src/cpu/kernels/elementwise_binary/generic/sve/fp32.cpp\"],\n            \"fp16\": [\"src/cpu/kernels/elementwise_binary/generic/sve/fp16.cpp\"]\n\n          },\n          \"sve2\":{\n            \"qasymm8\": [\"src/cpu/kernels/elementwise_binary/generic/sve2/qasymm8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/elementwise_binary/generic/sve2/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"ElementwiseUnary\":{\n        \"deps\": [ \"LUT\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuElementwiseUnary.cpp\",\n            \"src/cpu/kernels/CpuElementwiseUnaryKernel.cpp\",\n            \"src/runtime/NEON/functions/NEElementwiseUnaryLayer.cpp\"\n          ],\n          \"neon\": {\n            \"integer\": [\"src/cpu/kernels/elementwise_unary/generic/neon/integer.cpp\"],\n            \"fp32\": [\"src/cpu/kernels/elementwise_unary/generic/neon/fp32.cpp\"],\n            \"fp16\": [\"src/cpu/kernels/elementwise_unary/generic/neon/fp16.cpp\"],\n            \"qasymm8\": [\n              \"src/cpu/kernels/elementwise_unary/generic/neon/q8.cpp\",\n              \"src/cpu/kernels/elementwise_unary/generic/neon/qasymm8.cpp\"\n            ],\n            \"qasymm8_signed\": [\n              \"src/cpu/kernels/elementwise_unary/generic/neon/q8.cpp\",\n              \"src/cpu/kernels/elementwise_unary/generic/neon/qasymm8_signed.cpp\"\n            ]\n          },\n          \"sve\": {\n            \"common\": [\"src/cpu/kernels/elementwise_unary/generic/sve/impl.cpp\" ],\n            \"integer\": [\"src/cpu/kernels/elementwise_unary/generic/sve/integer.cpp\"],\n            \"fp32\": [\"src/cpu/kernels/elementwise_unary/generic/sve/fp32.cpp\"],\n            \"fp16\": [\"src/cpu/kernels/elementwise_unary/generic/sve/fp16.cpp\"]\n          },\n          \"sve2\": {\n            \"qasymm8\": [\"src/cpu/kernels/elementwise_unary/generic/sve2/q8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/elementwise_unary/generic/sve2/q8.cpp\"]\n          }\n        }\n      },\n      \"FFT1D\": {\n        \"deps\": [ \"Reduction\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEFFTDigitReverseKernel.cpp\",\n            \"src/core/NEON/kernels/NEFFTRadixStageKernel.cpp\",\n            \"src/core/NEON/kernels/NEFFTScaleKernel.cpp\",\n            \"src/runtime/NEON/functions/NEFFT1D.cpp\"\n          ]\n        }\n      },\n      \"FFT2D\": {\n        \"deps\": [ \"FFT1D\" ],\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NEFFT2D.cpp\"\n          ]\n        }\n      },\n      \"Fill\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuFill.cpp\",\n            \"src/cpu/kernels/CpuFillKernel.cpp\",\n            \"src/runtime/NEON/functions/NEFill.cpp\"\n          ]\n        }\n      },\n      \"Flatten\": {\n        \"deps: \": [ \"Reshape\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuFlatten.cpp\",\n            \"src/runtime/NEON/functions/NEFlattenLayer.cpp\"\n          ]\n        }\n      },\n      \"Floor\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuFloor.cpp\",\n            \"src/cpu/kernels/CpuFloorKernel.cpp\",\n            \"src/runtime/NEON/functions/NEFloor.cpp\"\n          ],\n          \"neon\": {\n            \"fp32\": [ \"src/cpu/kernels/floor/neon/fp32.cpp\" ],\n            \"fp16\": [ \"src/cpu/kernels/floor/neon/fp16.cpp\" ]\n          }\n        }\n      },\n      \"FullyConnected\": {\n        \"deps\": [ \"Flatten\", \"Gemm\", \"Transpose\"],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/kernels/CpuConvertFullyConnectedWeightsKernel.cpp\",\n            \"src/cpu/operators/CpuConvertFullyConnectedWeights.cpp\",\n            \"src/cpu/operators/CpuFullyConnected.cpp\",\n            \"src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp\",\n            \"src/runtime/NEON/functions/NEFullyConnectedLayer.cpp\"\n          ]\n        }\n      },\n      \"Gather\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEGatherKernel.cpp\",\n            \"src/runtime/NEON/functions/NEGather.cpp\"\n          ]\n        }\n      },\n      \"Gemm\": {\n        \"deps\": [ \"Quantize\", \"Add\", \"Sub\", \"Softmax\"],\n          \"files\": {\n          \"common\": [\n            \"src/cpu/kernels/CpuConvertQuantizedSignednessKernel.cpp\",\n            \"src/cpu/kernels/CpuDynamicGemmKernel.cpp\",\n            \"src/cpu/kernels/CpuDynamicGemmKernelHeuristics.cpp\",\n            \"src/cpu/kernels/CpuGemmMatrixAdditionKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmMatrixMultiplyKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmTranspose1xWKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmInterleave4x4Kernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ScaleKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpMatrixMultiplyKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpMatrixReductionKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpOffsetContributionOutputStageKernel.cpp\",\n            \"src/cpu/kernels/CpuGemmLowpOffsetContributionKernel.cpp\",\n            \"src/cpu/operators/CpuDynamicGemm.cpp\",\n            \"src/cpu/operators/CpuGemm.cpp\",\n            \"src/cpu/operators/CpuGemmLowpOutputStage.cpp\",\n            \"src/cpu/operators/CpuGemmLowpMatrixMultiplyCore.cpp\",\n            \"src/runtime/NEON/functions/NEGEMM.cpp\",\n            \"src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp\",\n            \"src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp\",\n            \"src/runtime/experimental/low_level/CpuGemmAssemblyDispatch.cpp\",\n            \"src/runtime/experimental/operators/CpuActivation.cpp\",\n            \"src/runtime/experimental/operators/CpuAdd.cpp\",\n            \"src/runtime/experimental/operators/CpuDepthwiseConv2d.cpp\",\n            \"src/runtime/experimental/operators/CpuDequantize.cpp\",\n            \"src/runtime/experimental/operators/CpuElementwise.cpp\",\n            \"src/runtime/experimental/operators/CpuGEMMLowp.cpp\",\n            \"src/runtime/experimental/operators/CpuGemm.cpp\",\n            \"src/runtime/experimental/operators/CpuGemmConv2d.cpp\",\n            \"src/runtime/experimental/operators/CpuGemmDirectConv2d.cpp\",\n            \"src/runtime/experimental/operators/CpuMul.cpp\",\n            \"src/runtime/experimental/operators/CpuQuantize.cpp\",\n            \"src/runtime/experimental/operators/CpuSoftmax.cpp\",\n            \"src/runtime/experimental/operators/CpuSub.cpp\",\n            \"src/runtime/experimental/operators/CpuTranspose.cpp\",\n            \"src/runtime/experimental/operators/CpuWinogradConv2d.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\n              \"src/core/NEON/kernels/arm_gemm/gemm_bf16.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_bf16bf16.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_int16.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_int8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_s8fp32.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_qint8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_quint8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_q8_mixed.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_u8s8fp32.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/interleave-8way.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/interleave_indirect.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/mergeresults.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/misc.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/quantized.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/rowsum_indirect_s8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/rowsum_indirect_u8.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/transform.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/a55r1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_8x12/x1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/a55r1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_8x12/x1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_bf16fp32_dot_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_bf16fp32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_4x24/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_4x24/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_6x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_8x4/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32_mla_8x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32bf16fp32_mmla_4x24/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp32bf16fp32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_dot_4x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_dot_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qa_mmla_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_dot_6x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_dot_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8qs_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_dot_6x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_dot_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_s8s32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_dot_4x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_dot_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8qa_mmla_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_dot_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_mmla_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_dot_6x16/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_dot_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8u32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_dot_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8qa_mmla_4x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8s32_dot_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_u8s8s32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_dot_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_dot_8x12/x1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_mmla_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_bf16fp32_mmla_8x12/a510.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_s8s32_mmla_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_s8s32_mmla_8x12/a510.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8u32_mmla_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8u32_mmla_8x12/a510.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_interleaved_u8s8s32_mmla_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a53.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/a55r1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x12/x1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_8x6/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_fp32_mla_6x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_fp32_mla_8x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_6x4/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_6x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_8x4/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_s8s32_dot_8x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_6x4/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_6x4/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_8x4/a55.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_smallK_hybrid_u8u32_dot_8x4/generic.cpp\",\n              \"src/cpu/kernels/gemm_matrix_mul/generic/neon/impl.cpp\",\n              \"src/cpu/kernels/gemm_matrix_add/generic/neon/impl.cpp\"\n            ],\n            \"fp32\":[\"src/cpu/kernels/gemm_matrix_mul/generic/neon/fp32.cpp\",\n                    \"src/cpu/kernels/gemm_matrix_add/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/gemm_matrix_mul/generic/neon/fp16.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/a55r1.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp16_mla_6x32/generic.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_fp16_mla_8x24/generic.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/mergeresults-fp16.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/generic.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp16_mla_6x32/a55.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_hybrid_fp16_mla_6x32/generic.cpp\",\n                    \"src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_8x24/x1.cpp\",\n                    \"src/cpu/kernels/gemm_matrix_add/generic/neon/fp16.cpp\"],\n            \"estate32\": [\n              \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a53.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a55r1.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/generic.cpp\"\n            ],\n            \"estate64\": [\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed/generic.cpp\"\n\n            ],\n            \"fixed_format_kernels\": [\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_bf16fp32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32_mla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32bf16fp32_mmla_4x24/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffhybrid_fp32bf16fp32_mmla_6x16/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_bf16fp32_dot_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_bf16fp32_mmla_8x12/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/a64_ffinterleaved_fp32_mla_8x12/generic.cpp\"\n            ]\n          },\n          \"sve\": {\n            \"common\": [\n              \"src/core/NEON/kernels/arm_gemm/interleave_indirect-sve.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_bf16fp32_dot_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp16_mla_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp16fp32fp16_dot_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp32_mla_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_fp32bf16fp32_dot_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_s8qa_dot_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_gemv_u8qa_dot_16VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_bf16fp32_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp16fp32fp16_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_fp32_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8qfp32_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8s32_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_1VLx4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_2VLx2VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_u8q_mopa_4VLx1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_bf16fp32_dot_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_bf16fp32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp16_mla_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp16_mla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_8x1VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32_mla_8x1VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32bf16fp32_mmla_4x6VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_fp32bf16fp32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qa_dot_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qa_mmla_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qs_dot_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8qs_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_dot_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_dot_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_s8s32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8qa_dot_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8qa_mmla_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_dot_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_mmla_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_dot_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_dot_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8u32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_dot_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8qa_mmla_4x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_hybrid_u8s8s32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_bf16fp32_dot_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_bf16fp32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp16_mla_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp16_mla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mla_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_fp32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_dot_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_dot_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_s8s32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_dot_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_dot_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8u32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_interleaved_u8s8s32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/mergeresults-sve.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/transform-sve.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/misc-sve.cpp\"\n            ],\n            \"fixed_format_kernels\": [\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_bf16fp32_mmla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp16_mla_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp16_mla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32_mla_6x4VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32_mla_6x4VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffhybrid_fp32bf16fp32_mmla_4x6VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_bf16fp32_dot_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_bf16fp32_mmla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp16_mla_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp16_mla_8x3VL/generic.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp32_mla_8x3VL/a64fx.cpp\",\n              \"src/core/NEON/kernels/arm_gemm/kernels/sve_ffinterleaved_fp32_mla_8x3VL/generic.cpp\"\n\t    ]\n          }\n        }\n      },\n      \"GenerateProposals\": {\n        \"deps\": [ \"BoundingBoxTransform\", \"Dequantize\", \"Pad\", \"Permute\", \"Quantize\", \"Reshape\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEGenerateProposalsLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEGenerateProposalsLayer.cpp\"\n          ],\n          \"neon\":{\n            \"common\":[\"src/cpu/kernels/genproposals/generic/neon/impl.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/genproposals/generic/neon/fp16.cpp\"],\n            \"fp32\":[\"src/cpu/kernels/genproposals/generic/neon/fp32.cpp\"],\n            \"qsymm16\":[\"src/cpu/kernels/genproposals/generic/neon/qsymm16.cpp\"]\n          }\n        }\n      },\n      \"InstanceNormalize\": {\n        \"deps\": [ \"Permute\", \"Reduction\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEInstanceNormalizationLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEInstanceNormalizationLayer.cpp\"\n          ],\n          \"neon\":{\n            \"common\":[\"src/cpu/kernels/instancenorm/generic/neon/impl.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/instancenorm/generic/neon/fp16.cpp\"],\n            \"fp32\":[\"src/cpu/kernels/instancenorm/generic/neon/fp32.cpp\"]\n          }\n        }\n      },\n      \"L2Normalize\": {\n        \"deps\": [ \"Reduction\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEL2NormalizeLayer.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/l2normlayer/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/l2normlayer/generic/neon/fp16.cpp\"]\n          }\n        }\n      },\n      \"Logical\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NELogicalKernel.cpp\",\n            \"src/runtime/NEON/functions/NELogical.cpp\"\n          ]\n        }\n      },\n      \"LUT\": {\n        \"files\": {\n          \"common\": [],\n          \"neon\":{\n            \"qasymm8\": [\"src/cpu/kernels/lut/generic/neon/u8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/lut/generic/neon/u8.cpp\"]\n          },\n          \"sve\": {\n            \"fp16\": [\"src/cpu/kernels/lut/generic/sve/u16.cpp\"],\n            \"qasymm16\": [\"src/cpu/kernels/lut/generic/sve/u16.cpp\"],\n            \"qasymm16_signed\": [\"src/cpu/kernels/lut/generic/sve/u16.cpp\"]\n          },\n          \"sve2\": {\n            \"qasymm8\": [\"src/cpu/kernels/lut/generic/sve2/u8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/lut/generic/sve2/u8.cpp\"]\n          }\n        }\n      },\n      \"LSTM\": {\n        \"deps\": [\n          \"Activation\",\n          \"Concatenate\",\n          \"Copy\",\n          \"Dequantize\",\n          \"ElementwiseBinary\",\n          \"Fill\",\n          \"FullyConnected\",\n          \"Gemm\",\n          \"MeanStdDevNormalize\",\n          \"Mul\",\n          \"Quantize\",\n          \"Slice\",\n          \"Transpose\"\n        ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEQLSTMLayerNormalizationKernel.cpp\",\n            \"src/runtime/NEON/functions/NELSTMLayer.cpp\",\n            \"src/runtime/NEON/functions/NELSTMLayerQuantized.cpp\",\n            \"src/runtime/NEON/functions/NEQLSTMLayer.cpp\"\n          ]\n        }\n      },\n      \"MaxUnpool2d\": {\n        \"deps\": [ \"Fill\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/kernels/CpuMaxUnpoolingLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEMaxUnpoolingLayer.cpp\",\n            \"src/cpu/operators/CpuMaxUnpooling.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/maxunpool/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/maxunpool/generic/neon/fp16.cpp\"],\n            \"qasymm8\":[\"src/cpu/kernels/maxunpool/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\":[ \"src/cpu/kernels/maxunpool/generic/neon/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"Mean\": {\n        \"deps\" : [ \"Reduction\" ],\n        \"files\": {\n          \"common\": [ \"src/runtime/NEON/functions/NEReduceMean.cpp\" ]\n        }\n      },\n      \"MeanStdDevNormalize\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEMeanStdDevNormalizationKernel.cpp\",\n            \"src/runtime/NEON/functions/NEMeanStdDevNormalizationLayer.cpp\"\n          ],\n        \"neon\":{\n          \"common\":[\"src/cpu/kernels/meanstddevnorm/generic/neon/impl.cpp\"],\n          \"fp32\":[\"src/cpu/kernels/meanstddevnorm/generic/neon/fp32.cpp\"],\n          \"fp16\":[\"src/cpu/kernels/meanstddevnorm/generic/neon/fp16.cpp\"],\n          \"qasymm8\":[\"src/cpu/kernels/meanstddevnorm/generic/neon/qasymm8.cpp\"]\n        }\n        }\n      },\n      \"MatMul\" : {\n        \"deps\": [ \"Transpose\" ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuMatMul.cpp\",\n            \"src/runtime/NEON/functions/NEMatMul.cpp\"\n          ]\n        }\n      },\n      \"Mul\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuMul.cpp\",\n            \"src/cpu/kernels/CpuMulKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPixelWiseMultiplication.cpp\"\n          ],\n        \"neon\":{\n          \"fp16\":[\"src/cpu/kernels/mul/generic/neon/fp16.cpp\"],\n          \"fp32\":[\"src/cpu/kernels/mul/generic/neon/fp32.cpp\"]\n        },\n        \"sve2\": {\n          \"qasymm8_signed\": [\"src/cpu/kernels/mul/generic/sme2/qasymm8_signed.cpp\"]\n        }\n        }\n      },\n      \"Normalize\": {\n        \"deps\": [ \"Mul\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NENormalizationLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NENormalizationLayer.cpp\"\n          ],\n        \"neon\":{\n          \"fp16\":[\"src/cpu/kernels/norm_layer/generic/neon/fp16.cpp\"],\n          \"fp32\":[\"src/cpu/kernels/norm_layer/generic/neon/fp32.cpp\"]\n        }\n        }\n      },\n      \"Pad\": {\n        \"deps\": [ \"Concatenate\", \"Copy\", \"StridedSlice\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEPadLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPadLayer.cpp\"\n          ]\n        }\n      },\n      \"Permute\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuPermute.cpp\",\n            \"src/cpu/kernels/CpuPermuteKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPermute.cpp\"\n          ]\n        }\n      },\n      \"Pool2d\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuPool2d.cpp\",\n            \"src/cpu/kernels/CpuPool2dKernel.cpp\",\n            \"src/cpu/kernels/internal/CpuPool2dAssemblyWrapperKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPoolingLayer.cpp\"\n          ],\n          \"neon\": {\n            \"common\": [\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/cpp_nhwc_1x1_stride_any_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/pooling_fp32.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/pooling_s8.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/pooling_s8q.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/pooling_u8.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/pooling_u8q.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_u8q_nhwc_max_generic_depthfirst/generic.cpp\"\n            ],\n            \"nchw\": [ \"src/cpu/kernels/pool2d/neon/nchw/all.cpp\" ],\n            \"fp16\": [\n                \"src/cpu/kernels/pool2d/neon/fp16.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/pooling_fp16.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n                \"src/core/NEON/kernels/arm_conv/pooling/kernels/a64_fp16_nhwc_max_generic_depthfirst/generic.cpp\"\n             ],\n            \"fp32\": [ \"src/cpu/kernels/pool2d/neon/fp32.cpp\" ],\n            \"qasymm8\":[ \"src/cpu/kernels/pool2d/neon/qasymm8.cpp\" ],\n            \"qasymm8_signed\":[\"src/cpu/kernels/pool2d/neon/qasymm8_signed.cpp\"]\n          },\n          \"sve\": {\n            \"common\": [\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp16_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sve_u8q_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp16_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_fp32_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_s8q_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8_nhwc_max_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8q_nhwc_avg_generic_depthfirst/generic.cpp\",\n              \"src/core/NEON/kernels/arm_conv/pooling/kernels/sme_u8q_nhwc_max_generic_depthfirst/generic.cpp\"\n            ]\n          }\n        }\n      },\n      \"Pool3d\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuPool3d.cpp\",\n            \"src/cpu/kernels/CpuPool3dKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPooling3dLayer.cpp\"\n          ],\n          \"neon\": {\n            \"fp16\":           [ \"src/cpu/kernels/pool3d/neon/fp16.cpp\" ],\n            \"fp32\":           [ \"src/cpu/kernels/pool3d/neon/fp32.cpp\" ],\n            \"qasymm8\":        [ \"src/cpu/kernels/pool3d/neon/qasymm8.cpp\" ],\n            \"qasymm8_signed\": [ \"src/cpu/kernels/pool3d/neon/qasymm8_signed.cpp\" ]\n          }\n        }\n      },\n      \"PRelu\": {\n        \"deps\": [ \"ElementwiseBinary\" ],\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NEPReluLayer.cpp\"\n          ]\n        }\n      },\n      \"PriorBox\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEPriorBoxLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEPriorBoxLayer.cpp\"\n          ]\n        }\n      },\n      \"Quantize\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuQuantize.cpp\",\n            \"src/cpu/kernels/CpuQuantizeKernel.cpp\",\n            \"src/runtime/NEON/functions/NEQuantizationLayer.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/quantize/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/quantize/generic/neon/fp16.cpp\"],\n            \"integer\":[\"src/cpu/kernels/quantize/generic/neon/integer.cpp\"]\n          }\n        }\n      },\n      \"Range\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NERangeKernel.cpp\",\n            \"src/runtime/NEON/functions/NERange.cpp\"\n          ],\n          \"neon\": {\n            \"fp32\":    [ \"src/cpu/kernels/range/generic/neon/fp32.cpp\" ],\n            \"fp16\":    [ \"src/cpu/kernels/range/generic/neon/fp16.cpp\" ],\n            \"integer\": [ \"src/cpu/kernels/range/generic/neon/integer.cpp\"   ]\n          }\n        }\n      },\n      \"Reduction\":{\n        \"deps\": [ \"Reshape\" ],\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEReductionOperationKernel.cpp\",\n            \"src/runtime/NEON/functions/NEReductionOperation.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/reduction_layer/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/reduction_layer/generic/neon/fp16.cpp\"],\n            \"integer\":[\"src/cpu/kernels/reduction_layer/generic/neon/integer.cpp\"],\n            \"qasymm8\":[\"src/cpu/kernels/reduction_layer/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\":[\"src/cpu/kernels/reduction_layer/generic/neon/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"Reorg\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEReorgLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEReorgLayer.cpp\"\n          ]\n        }\n      },\n      \"Reshape\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuReshape.cpp\",\n            \"src/cpu/kernels/CpuReshapeKernel.cpp\",\n            \"src/runtime/NEON/functions/NEReshapeLayer.cpp\"\n          ]\n        }\n      },\n      \"Reorder\": {\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NEReorderLayer.cpp\",\n            \"src/core/NEON/kernels/NEReorderKernel.cpp\"\n          ]\n        }\n      },\n      \"Reverse\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEReverseKernel.cpp\",\n            \"src/runtime/NEON/functions/NEReverse.cpp\"\n          ]\n        }\n      },\n      \"RNN\": {\n        \"deps\": [ \"Activation\", \"Add\", \"FullyConnected\", \"Gemm\"],\n        \"files\": {\n          \"common\": [ \"src/runtime/NEON/functions/NERNNLayer.cpp\" ]\n        }\n      },\n      \"ROIAlign\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEROIAlignLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEROIAlignLayer.cpp\"\n          ],\n          \"neon\":{\n            \"fp32\":[\"src/cpu/kernels/roialign/generic/neon/fp32.cpp\"],\n            \"fp16\":[\"src/cpu/kernels/roialign/generic/neon/fp16.cpp\"],\n            \"qasymm8\":[\"src/cpu/kernels/roialign/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\":[\"src/cpu/kernels/roialign/generic/neon/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"ROIPool2d\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEROIPoolingLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEROIPoolingLayer.cpp\"\n          ]\n        }\n      },\n      \"Scale\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuScale.cpp\",\n            \"src/cpu/kernels/CpuScaleKernel.cpp\",\n            \"src/runtime/NEON/functions/NEScale.cpp\"\n          ],\n          \"sve\": {\n            \"fp16\": [ \"src/cpu/kernels/scale/sve/fp16.cpp\" ],\n            \"fp32\": [ \"src/cpu/kernels/scale/sve/fp32.cpp\" ],\n            \"integer\": [ \"src/cpu/kernels/scale/sve/integer.cpp\" ],\n            \"qasymm8\": [ \"src/cpu/kernels/scale/sve/qasymm8.cpp\" ],\n            \"qasymm8_signed\": [ \"src/cpu/kernels/scale/sve/qasymm8_signed.cpp\" ]\n          },\n          \"neon\": {\n            \"fp16\": [ \"src/cpu/kernels/scale/neon/fp16.cpp\" ],\n            \"integer\": [ \"src/cpu/kernels/scale/neon/integer.cpp\" ],\n            \"qasymm8\": [ \"src/cpu/kernels/scale/neon/qasymm8.cpp\", \"src/cpu/kernels/scale/neon/integer.cpp\" ],\n            \"qasymm8_signed\": [ \"src/cpu/kernels/scale/neon/qasymm8_signed.cpp\", \"src/cpu/kernels/scale/neon/integer.cpp\" ]\n          }\n        }\n      },\n      \"Scatter\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/kernels/CpuScatterKernel.cpp\",\n            \"src/cpu/operators/CpuScatter.cpp\",\n            \"src/runtime/NEON/functions/NEScatter.cpp\"\n          ]\n        }\n      },\n      \"Select\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NESelectKernel.cpp\",\n            \"src/runtime/NEON/functions/NESelect.cpp\"\n          ],\n          \"neon\": {\n            \"fp32\": [ \"src/cpu/kernels/select/generic/neon/fp32.cpp\" ],\n            \"fp16\": [ \"src/cpu/kernels/select/generic/neon/fp16.cpp\" ],\n            \"integer\": [ \"src/cpu/kernels/select/generic/neon/integer.cpp\"  ]\n          }\n        }\n      },\n      \"Slice\": {\n        \"deps\": [ \"StridedSlice\" ],\n        \"files\": {\n          \"common\": [ \"src/runtime/NEON/functions/NESlice.cpp\" ]\n        }\n      },\n      \"Softmax\": {\n        \"deps\": [\n          \"Permute\"\n        ],\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuSoftmax.cpp\",\n            \"src/cpu/kernels/CpuSoftmaxKernel.cpp\",\n            \"src/runtime/NEON/functions/NESoftmaxLayer.cpp\"\n          ],\n          \"neon\":{\n            \"common\":[\"src/cpu/kernels/softmax/generic/neon/impl.cpp\"],\n            \"fp32\": [\"src/cpu/kernels/softmax/generic/neon/fp32.cpp\"],\n            \"fp16\": [\"src/cpu/kernels/softmax/generic/neon/fp16.cpp\"],\n            \"qasymm8\":[ \"src/cpu/kernels/softmax/generic/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\":[\"src/cpu/kernels/softmax/generic/neon/qasymm8_signed.cpp\"]\n          },\n          \"sve\": {\n            \"common\": [ \"src/cpu/kernels/softmax/generic/sve/impl.cpp\", \"src/cpu/kernels/softmax/generic/sve/impl_bf16.cpp\" ]\n          },\n          \"sve2\":{\n            \"common\" :[\"src/cpu/kernels/softmax/generic/sve2/impl.cpp\"],\n            \"fp32\" :[\"src/cpu/kernels/softmax/generic/sme2/fp32.cpp\"],\n            \"fp16\" :[\"src/cpu/kernels/softmax/generic/sme2/fp16.cpp\"],\n            \"qasymm8\" :[\"src/cpu/kernels/softmax/generic/sme2/qasymm8.cpp\"],\n            \"qasymm8_signed\" :[\"src/cpu/kernels/softmax/generic/sme2/qasymm8_signed.cpp\"]\n          }\n        }\n      },\n      \"SpaceToBatch\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NESpaceToBatchLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NESpaceToBatchLayer.cpp\"\n          ]\n        }\n      },\n      \"SpaceToDepth\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NESpaceToDepthLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NESpaceToDepthLayer.cpp\"\n          ]\n        }\n      },\n      \"Split\": {\n        \"deps\": [ \"StridedSlice\" ],\n        \"files\": {\n          \"common\": [\n            \"src/runtime/NEON/functions/NESplit.cpp\"\n          ]\n        }\n      },\n      \"Stack\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEStackLayerKernel.cpp\",\n            \"src/runtime/NEON/functions/NEStackLayer.cpp\"\n          ]\n        }\n      },\n      \"StridedSlice\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NEStridedSliceKernel.cpp\",\n            \"src/runtime/NEON/functions/NEStridedSlice.cpp\"\n          ]\n        }\n      },\n      \"Sub\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/operators/CpuSub.cpp\",\n            \"src/cpu/kernels/CpuSubKernel.cpp\",\n            \"src/runtime/NEON/functions/NEArithmeticSubtraction.cpp\"\n          ],\n          \"neon\": {\n            \"fp16\":[\"src/cpu/kernels/sub/neon/fp16.cpp\"],\n            \"qasymm8\": [\"src/cpu/kernels/sub/neon/qasymm8.cpp\"],\n            \"qasymm8_signed\": [\"src/cpu/kernels/sub/neon/qasymm8_signed.cpp\"],\n            \"qsymm16\": [\"src/cpu/kernels/sub/neon/qsymm16.cpp\"]\n          }\n        }\n      },\n\n      \"Tile\": {\n        \"files\": {\n          \"common\": [\n            \"src/core/NEON/kernels/NETileKernel.cpp\",\n            \"src/runtime/NEON/functions/NETile.cpp\"\n          ]\n        }\n      },\n      \"Transpose\": {\n        \"files\": {\n          \"common\": [\n            \"src/cpu/kernels/CpuTransposeKernel.cpp\",\n            \"src/cpu/operators/CpuTranspose.cpp\",\n            \"src/runtime/NEON/functions/NETranspose.cpp\"\n          ]\n        }\n      },\n      \"Unstack\": {\n        \"deps\": [ \"StridedSlice\" ],\n        \"files\": {\n          \"common\": [ \"src/runtime/NEON/functions/NEUnstack.cpp\" ]\n        }\n      }\n    }\n  },\n  \"experimental\": {\n    \"dynamic_fusion\": {\n      \"common\": [\n        \"src/dynamic_fusion/runtime/gpu/cl/ClKernelRuntime.cpp\",\n        \"src/dynamic_fusion/runtime/gpu/cl/ClWorkloadRuntime.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/CastAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ClampAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/Conv2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/DepthwiseConv2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/MatMulAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/Pool2dAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ResizeAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/SoftmaxAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/attributes/ReshapeAttributes.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentGraph.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentGroup.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuKernelComponentStream.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuLogicalKernel.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuOperatorGroup.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuWorkloadContext.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/GpuWorkloadSketch.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentActivation.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentCast.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentDepthwiseConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentDirectConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentMatMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentPool2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentElementwiseBinary.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentReshape.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentResize.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/components/cl/ClComponentStore.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuAdd.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuCast.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuClamp.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuDepthwiseConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuMatMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuReshape.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuPool2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuOutput.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuResize.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSigmoid.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSoftmax.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuSub.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/GpuTanh.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/operators/internal/GpuElementwiseBinaryCommon.cpp\"\n      ],\n      \"ckw_driver\": [\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwComponentArgument.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwDriver.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwActivation.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwCast.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwDepthwiseConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwDirectConv2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwElementwiseBinary.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwPool2d.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwMatMul.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwResize.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwStore.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/CkwHelper.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/type_converter/Common.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/type_converter/ElementwiseBinary.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwScopedKernelWriter.cpp\",\n        \"src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwVariableTable.cpp\",\n        \"src/dynamic_fusion/runtime/gpu/cl/ckw_driver/GpuCkwKernelArgumentsHelpers.cpp\"\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}