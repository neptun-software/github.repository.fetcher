{
  "metadata": {
    "timestamp": 1736565827323,
    "page": 761,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "plibither8/2048.cpp",
      "stars": 2194,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.2431640625,
          "content": "ï»¿---\nAccessModifierOffset: '-2'\nAlignAfterOpenBracket: 'Align'\nAlignConsecutiveAssignments: 'false'\nAlignConsecutiveDeclarations: 'false'\nAlignEscapedNewlines: 'Left'\nAlignOperands: 'true'\nAlignTrailingComments: 'false'\nAllowAllParametersOfDeclarationOnNextLine: 'false'\nAllowShortBlocksOnASingleLine: 'true'\nAllowShortCaseLabelsOnASingleLine: 'false'\nAllowShortFunctionsOnASingleLine: 'InlineOnly'\nAllowShortIfStatementsOnASingleLine: 'false'\nAllowShortLoopsOnASingleLine: 'false'\nAlwaysBreakAfterReturnType: 'None'\nAlwaysBreakBeforeMultilineStrings: 'false'\nAlwaysBreakTemplateDeclarations: 'true'\nBinPackArguments: 'true'\nBinPackParameters: 'true'\nBraceWrapping:\n  AfterClass: 'false'\n  AfterControlStatement: 'false'\n  AfterEnum: 'false'\n  AfterFunction: 'false'\n  AfterNamespace: 'false'\n  AfterStruct: 'false'\n  AfterUnion: 'false'\n  AfterExternBlock: 'false'\n  BeforeCatch: 'true'\n  BeforeElse: 'false'\n  IndentBraces: 'false'\n  SplitEmptyFunction: 'false'\n  SplitEmptyRecord: 'false'\n  SplitEmptyNamespace: 'false'\nBreakBeforeBinaryOperators: 'None'\nBreakBeforeBraces: 'Custom'\nBreakBeforeTernaryOperators: 'false'\nBreakConstructorInitializers: 'BeforeColon'\n##BreakInheritanceList: 'BeforeColon'\nBreakStringLiterals: 'false'\nColumnLimit: '80'\nCompactNamespaces: 'false'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'false'\nConstructorInitializerIndentWidth: '4'\nCpp11BracedListStyle: 'true'\nFixNamespaceComments: 'true'\nIncludeBlocks: 'Merge'\nIndentCaseLabels: 'false'\nIndentPPDirectives: 'AfterHash'\nIndentWidth: '2'\nKeepEmptyLinesAtTheStartOfBlocks: 'true'\nMaxEmptyLinesToKeep: '1'\nNamespaceIndentation: 'None'\nPointerAlignment: 'Right'\nReflowComments: 'true'\nSortIncludes: 'true'\nSortUsingDeclarations: 'true'\nSpaceAfterCStyleCast: 'false'\nSpaceAfterTemplateKeyword: 'false'\nSpaceBeforeAssignmentOperators: 'true'\n##SpaceBeforeCpp11BracedList: 'false'\n##SpaceBeforeCtorInitializerColon: 'true'\n##SpaceBeforeInheritanceColon: 'true'\nSpaceBeforeParens: 'ControlStatements'\n##SpaceBeforeRangeBasedForLoopColon: 'true'\nSpaceInEmptyParentheses: 'false'\nSpacesBeforeTrailingComments: '1'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInContainerLiterals: 'false'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nStandard: 'Cpp11'\nUseTab: 'Never'\n\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.47265625,
          "content": "### C++ ###\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n/build\n/data/*\n2048\n/.vscode\n/src/.vscode/\n.DS_Store\n\n# CMake\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n"
        },
        {
          "name": ".replit",
          "type": "blob",
          "size": 0.07421875,
          "content": "language = \"cpp\"\nrun = \"cd build && cmake ../ && cmake --build . && ./2048\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.330078125,
          "content": "cmake_minimum_required(VERSION 3.7...3.21)\nproject(2048 LANGUAGES CXX)\nenable_testing()\n\nset(SOURCES src/2048.cpp src/gameboard.cpp src/gameboard-graphics.cpp src/game.cpp src/game-graphics.cpp src/game-input.cpp src/game-pregamemenu.cpp src/global.cpp src/loadresource.cpp src/menu.cpp src/menu-graphics.cpp src/saveresource.cpp src/scores.cpp src/scores-graphics.cpp src/statistics.cpp src/statistics-graphics.cpp src/tile.cpp src/tile-graphics.cpp)\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n  add_compile_options(-Wall)\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n  add_compile_options(-Wall)\nelseif(CMAKE_CXX_COMPILER_ID MATCHES \"^Intel\")\n  if(WIN32)\n    add_compile_options(/W3)\n  else()\n    add_compile_options(-w2)\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL NVHPC)\n  add_compile_options(-a)\nendif()\n\nadd_executable(2048 ${SOURCES})\ntarget_include_directories(2048 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/headers/)\ntarget_compile_features(2048 PRIVATE cxx_std_17)\n\n# --- test\n\nfind_program(PWSH NAMES pwsh powershell)\nif(PWSH)\n  add_test(NAME basic COMMAND ${PWSH} -c \\\"echo 4 | $<TARGET_FILE:2048>\\\")\nelseif(UNIX)\n  add_test(NAME basic COMMAND sh -c \"echo 4 | $<TARGET_FILE:2048>\")\nendif()\n\n# --- install\n\ninstall(TARGETS 2048\n  RUNTIME DESTINATION bin)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data\n        DESTINATION ${CMAKE_INSTALL_PREFIX})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2018, Mihir Chaturvedi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6591796875,
          "content": "# 2048.cpp\n\n![Actions Status](https://github.com/plibither8/2048.cpp/workflows/ci/badge.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b37414d66e7d4146bf72a4a467fdc84d)](https://app.codacy.com/app/plibither8/2048.cpp?utm_source=github.com&utm_medium=referral&utm_content=plibither8/2048.cpp&utm_campaign=Badge_Grade_Dashboard)\n[![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/plibither8/2048.cpp.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/plibither8/2048.cpp/context:cpp)\n[![Made with Love in India](https://madewithlove.org.in/badge.svg)](https://madewithlove.org.in/)\n[![Run on Repl.it](https://repl.it/badge/github/plibither8/2048.cpp)](https://repl.it/github/plibither8/2048.cpp)\n\n> Terminal version of the game \"2048\" written in C++.\n\n:tada: Featured on GitHub's [Twitter](https://twitter.com/github/status/1017094930991370240) and [Facebook](https://www.facebook.com/GitHub/videos/1433491453419807/) pages! :tada:\n\n<p align=\"center\">\n    <img align=\"center\" alt=\"2048 in action!\" src=\"assets/demo.gif\"></img>\n</p>\n\n## Setup\n\nThe game and code is made to run natively on the GNU/Linux and MacOS platforms, but cross-platform compatibility for Windows has been added too.\n\n### Requirements\n\n* C++11 compiler (e.g. `g++`, `clang++`, `pgc++`, `icpc`, etc.)\n* Virtually any platform including:\n  * Linux\n  * MacOS\n  * Windows (via Cygwin or Windows Subsystem for Linux)\n* [CMake](https://cmake.org/) or [Meson](https://mesonbuild.com/)\n\n### Installation\n\n1. Open your terminal in your preferred directory and clone this project:\n```sh\ngit clone https://github.com/plibither8/2048.cpp\n```\n2. Enter the project directory:\n```sh\ncd 2048.cpp\n```\n\n---\n\nFor both CMake and Meson, the default C++ compiler on your system will be used.\nIf you wish to manually select a C++ compiler, optionally add `CXX=clang++ cmake` or `CXX=clang++ meson` etc.\n\n#### Building with CMake\n\n3. Build the executable and run tests\n```sh\nctest -S setup.cmake\n```\n4. Install the program (optional)\n```sh\ncmake --install build\n```\n\n5. Run the program and play the game! :tada:\n```sh\n2048    # run `build/2048` if game is not installed\n```\n\n<p align=\"center\">\n    <b>OR</b>\n</p>\n\n#### Building with Meson\n\n3. Generate build configuration\n```sh\nmeson build\n```\n4. Build the executable and run tests\n```sh\nmeson test -C build\n```\n5. Install the program (optional)\n```sh\nmeson configure build --prefix=$HOME/.local\nmeson install -C build\n```\n\n6. Run the program and play the game! :tada:\n```sh\n2048    # run `build/2048` if game is not installed\n```\n\n## Contributing\n\nFirst of all, thank you for contributing :smile:! A few things to note:\n\n* If you have found a bug, or have a feature that you'd like implemented, [raise an issue](https://github.com/plibither8/2048.cpp/issues).\n\n* If you have proposed a pull request, make sure that you run `clang-format` on the source code (both, `.cpp` and `.hpp`) files if you've made changes there.\n\n* In your local repository, run `git update-index --skip-worktree ./data/*.txt` to ensure that changes to the data files are not tracked by git, and thus are not staged.\n\n## Thanks\n\nI deeply appreciate the help of the following people:\n\n* [Michael Hirsch](https://github.com/scivision)\n  * cleaned up the code,\n  * organised the header files in a better way for a more efficient build,\n  * added the AppVeyor CI,\n  * added the Meson build system and, fixed CMake and added install feature.\n* [Aiman Ismail](https://github.com/pokgak) added support for Vim keybinding.\n* [Patrik Huber](https://github.com/patrikhuber) fixed a typo in the Readme.\n* [zestze](https://github.com/zestze) changed `cstdlib rand` to C++ random int generator.\n* [Pascal J. Bourguignon](https://github.com/informatimago) added support for ANSI arrow keys.\n* [Jean-MichaÃ«l Celerier](https://github.com/jcelerier) added `CMakeLists.txt` file.\n* [comwrg](https://github.com/comwrg) made the duration in the statistics and highscores human-readable, wrapping seconds to minutes and hours.\n* [Christian Bundy](https://github.com/christianbundy) replaced the ugly -, + and | with box-drawing characters.\n* [Tor E Hagemann](https://github.com/hagemt) fixed issue #10, causing unwanted character `1` to be printed.\n* [farazxameer](https://github.com/farazxameer) implemented feature to save a game state and continue from a saved game state, refined game logic.\n* [drodil](https://github.com/drodil) implemented checks to ascertain existence of data files, fixed issue #12\n* [Aviskar KC](https://github.com/aviskarkc10) added arrow keys to game instructions.\n* [Peter Squicciarini](https://github.com/stripedpajamas) fixed readme instructions.\n* [Mark Fischer, Jr.](https://github.com/flyingfisch) fixed a typo.\n* [Hugo BrandÃ£o](https://github.com/jhugobb) completely reorganised the existing project structure and updated the build method to enfore CMake.\n* [Alton Alvarez](https://github.com/mathematicalist) fixed a typo.\n* [cawvyoct](https://github.com/cawvyoct) made the source code much, much easier to read: removed most magic numbers, replacing them with variables to ease maintenance. Implemented `clang-format`.\n* [Cong](https://github.com/cxong) edited the `Game` class constructor.\n* [Tien Do](https://github.com/tiendq) added the 'exit' option in the main menu, updated the `CMakeLists.txt` file and made `Color` enum to a scoped enum.\n* [ScorrMorr](https://github.com/ScorrMorr) made many methods `const`s.\n* [tangmengqiu](https://github.com/tangmengqiu) fixed an error-causing instruction step in the readme.\n\n### Maintainers\n\n* [Mihir Chaturvedi](https://github.com/plibither8)\n* [cawvyoct](https://github.com/cawvyoct)\n\n## Notes\n\n`[GameBoard].getTile(2,0)` refers to the 0th tile (or column) in 2nd row as in this case, x = 0 and y = 2. The specific tile is denoted the by '@' symbol in the following gameboard:\n\n> Note: `row` and `column` indexing starts at 0.\n\n```plaintext\nââââââââ¬âââââââ¬âââââââ¬âââââââ\nâ      â      â      â      â\nââââââââ¼âââââââ¼âââââââ¼âââââââ¤\nâ      â      â      â      â\nââââââââ¼âââââââ¼âââââââ¼âââââââ¤\nâ   @  â      â      â      â\nââââââââ¼âââââââ¼âââââââ¼âââââââ¤\nâ      â      â      â      â\nââââââââ´âââââââ´âââââââ´âââââââ\n```\n\n## To-Do\n\n- [x] Add start menu [19/04/2018]\n- [x] Save highscore / score [21/04/2018]\n- [x] Save a game state and play from a saved game state\n- [ ] ~~AI~~ *(Abandoned indefinitely)*\n\n---\n\n## License\n\nCopyright (c) Mihir Chaturvedi. All rights reserved.\n\nLicensed under the [MIT](LICENSE) License.\n"
        },
        {
          "name": "archive",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.7177734375,
          "content": "project('2048', 'cpp',\n  default_options : ['cpp_std=c++14', 'warning_level=2'])\n\nmain_target_name = '2048'\nsources = ['src/2048.cpp', 'src/gameboard.cpp', 'src/gameboard-graphics.cpp', 'src/game.cpp', 'src/game-input.cpp', 'src/game-graphics.cpp', 'src/game-pregamemenu.cpp', 'src/global.cpp', 'src/loadresource.cpp', 'src/menu.cpp', 'src/menu-graphics.cpp', 'src/saveresource.cpp', 'src/scores.cpp', 'src/scores-graphics.cpp', 'src/statistics.cpp', 'src/statistics-graphics.cpp', 'src/tile.cpp', 'src/tile-graphics.cpp']\nhdrs = include_directories('src/headers')\n\nexecutable(main_target_name, sources,\n  include_directories : hdrs,\n  install : true)\n\ninstall_data(['data/scores.txt', 'data/statistics.txt'],\n  install_dir : 'data')\n\n"
        },
        {
          "name": "setup.cmake",
          "type": "blob",
          "size": 1.837890625,
          "content": "# run by:\n# ctest -S setup.cmake\n\n# --- Project-specific -Doptions\n# these will be used if the project isn't already configured.\nset(_opts)\n\n# --- boilerplate follows\n\n# CTEST_CMAKE_GENERATOR must always be defined\nif(NOT DEFINED CTEST_CMAKE_GENERATOR AND DEFINED ENV{CMAKE_GENERATOR})\n  set(CTEST_CMAKE_GENERATOR $ENV{CMAKE_GENERATOR})\nendif()\nif(NOT DEFINED CTEST_CMAKE_GENERATOR AND CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)\n  find_program(_gen NAMES ninja ninja-build samu)\n  if(_gen)\n    execute_process(COMMAND ${_gen} --version\n      OUTPUT_VARIABLE _ninja_version\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n      RESULT_VARIABLE _gen_ok\n      TIMEOUT 10)\n    if(_gen_ok EQUAL 0 AND _ninja_version VERSION_GREATER_EQUAL 1.10)\n      set(CTEST_CMAKE_GENERATOR \"Ninja\")\n    endif()\n  endif(_gen)\nendif()\nif(NOT DEFINED CTEST_CMAKE_GENERATOR)\n  set(CTEST_BUILD_FLAGS -j)  # not --parallel as this goes to generator directly\n  if(WIN32)\n    set(CTEST_CMAKE_GENERATOR \"MinGW Makefiles\")\n  else()\n    set(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n  endif()\nendif()\n\nif(NOT DEFINED CTEST_BUILD_CONFIGURATION)\n  list(APPEND _opts -DCMAKE_BUILD_TYPE=Release)\nendif()\n\nset(CTEST_SOURCE_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})\nif(NOT DEFINED CTEST_BINARY_DIRECTORY)\n  set(CTEST_BINARY_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/build)\nendif()\n\n# -- build and test\nctest_start(\"Experimental\")\n\nctest_configure(\n  OPTIONS \"${_opts}\"\n  RETURN_VALUE _ret\n  CAPTURE_CMAKE_ERROR _err)\nif(NOT (_ret EQUAL 0 AND _err EQUAL 0))\n  message(FATAL_ERROR \"Configure failed: return ${_ret} cmake return ${_err}\")\nendif()\n\nctest_build(\n  RETURN_VALUE _ret\n  CAPTURE_CMAKE_ERROR _err)\nif(NOT (_ret EQUAL 0 AND _err EQUAL 0))\n  message(FATAL_ERROR \"Build failed.\")\nendif()\n\nctest_test(\n  RETURN_VALUE _ret\n  CAPTURE_CMAKE_ERROR _err)\n\nif(NOT (_ret EQUAL 0 AND _err EQUAL 0))\n  message(FATAL_ERROR \"Test failed.\")\nendif()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}