{
  "metadata": {
    "timestamp": 1736565281915,
    "page": 94,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-deepmind/open_spiel",
      "stars": 4324,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.86328125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n # C extensions\n*.so\n\n # Jupyter Notebook\n.ipynb_checkpoints\n\n # virtualenv\n.venv\nvenv/\nENV/\n\n # OSX specific\n.DS_Store\n\n # Build products\nbuild/\nbuild*/\ncmake-build-*/\ndist/\npyspiel.egg-info/\n\n# Swift build directory\n.build\n\n # External git modules\nopen_spiel/abseil-cpp/\nopen_spiel/eigen/libeigen/\nopen_spiel/libnop/libnop/\nopen_spiel/games/bridge/double_dummy_solver/\nopen_spiel/games/universal_poker/double_dummy_solver/\nopen_spiel/games/hanabi/hanabi-learning-environment/\n/open_spiel/pybind11_abseil/\npybind11/\n\n# Install artifacts\ndownload_cache/\nget-pip.py\nopen_spiel/scripts/shflags\nopen_spiel/scripts/jill.sh\n\n# julia wrapper\nManifest.toml\n\n\n# IDE\n.idea/\n.vscode/\n*~\n\n\nopen_spiel/cmake-build-debug/\n\n# Swift generated build file\nPackage.resolved\n# Visual Studio generated files\nopen_spiel/.vs\n/.env\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "Dockerfile.base",
          "type": "blob",
          "size": 1.2724609375,
          "content": "FROM ubuntu:20.04 as base\nRUN apt update\nRUN apt-get -y install \\\n    clang \\\n    curl \\\n    git \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-wheel \\\n    sudo\nRUN mkdir repo\nWORKDIR /repo\n\nRUN sudo pip3 install --upgrade pip\nRUN sudo pip3 install matplotlib\n\n# install\nCOPY . .\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install tzdata\nRUN ./install.sh\nRUN pip3 install --upgrade setuptools testresources\n# Line below is a workaround for the issue https://github.com/google-deepmind/open_spiel/issues/1293\nRUN pip install importlib_metadata --force-reinstall\nRUN pip3 install --upgrade -r requirements.txt\nRUN pip3 install --upgrade cmake\n\n# build and test\nRUN mkdir -p build\nWORKDIR /repo/build\nRUN cmake -DPython3_EXECUTABLE=`which python3` -DCMAKE_CXX_COMPILER=`which clang++` ../open_spiel\nRUN make -j12\nENV PYTHONPATH=${PYTHONPATH}:/repo\nENV PYTHONPATH=${PYTHONPATH}:/repo/build/python\nRUN ctest -j12\nWORKDIR /repo/open_spiel\n\n# minimal image for development in Python\nFROM python:3.6-slim-buster as python-slim\nRUN mkdir repo\nWORKDIR /repo\nCOPY --from=base /repo .\nRUN pip3 install --upgrade -r requirements.txt\nRUN pip3 install matplotlib\nENV PYTHONPATH=${PYTHONPATH}:/repo\nENV PYTHONPATH=${PYTHONPATH}:/repo/build/python\nWORKDIR /repo/open_spiel\n"
        },
        {
          "name": "Dockerfile.jupyter",
          "type": "blob",
          "size": 1.0458984375,
          "content": "FROM ubuntu:20.04 as base\nRUN apt update\nRUN apt-get -y install \\\n    clang \\\n    curl \\\n    git \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-wheel \\\n    sudo\nRUN mkdir repo\nWORKDIR /repo\n\nRUN sudo pip3 install --upgrade pip\nRUN sudo pip3 install matplotlib\n\n# install\nCOPY . .\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install tzdata\nRUN ./install.sh\nRUN pip3 install --upgrade setuptools testresources\nRUN pip3 install --upgrade -r requirements.txt\nRUN pip3 install --upgrade cmake\n\n# build and test\nRUN mkdir -p build\nWORKDIR /repo/build\nRUN cmake -DPython_TARGET_VERSION=${PYVERSION} -DCMAKE_CXX_COMPILER=`which clang++` ../open_spiel\nRUN make -j12\nENV PYTHONPATH=${PYTHONPATH}:/repo\nENV PYTHONPATH=${PYTHONPATH}:/repo/build/python\n# ctest can be disabled for faster builds when tests are not required\nRUN ctest -j12\nWORKDIR /repo/open_spiel\n\n# Jupyterlab Environment\nFROM base as jupyterlab\nRUN pip install jupyter -U && pip install jupyterlab\nEXPOSE 8888\nENTRYPOINT [\"jupyter\", \"lab\",\"--ip=0.0.0.0\",\"--allow-root\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.45703125,
          "content": "# python package requirements\ninclude requirements.txt\n\n# pybind files\nrecursive-include pybind11/include/pybind11 *.h\nrecursive-include pybind11/pybind11 *.py\ninclude pybind11/CMakeLists.txt\n\n# open_spiel files, including source files for abseil and dds\nrecursive-include open_spiel CMakeLists.txt *.cc *.cpp *.h *.hpp *.py evalHandTables\n\n# abseil CMake files\nrecursive-include open_spiel/abseil-cpp/CMake **\nrecursive-include open_spiel/abseil-cpp/ *.cmake *.inc\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0927734375,
          "content": "\n# OpenSpiel: A Framework for Reinforcement Learning in Games\n\n[![Documentation Status](https://readthedocs.org/projects/openspiel/badge/?version=latest)](https://openspiel.readthedocs.io/en/latest/?badge=latest)\n![build_and_test](https://github.com/deepmind/open_spiel/workflows/build_and_test/badge.svg)\n\nOpenSpiel is a collection of environments and algorithms for research in general\nreinforcement learning and search/planning in games. OpenSpiel supports n-player\n(single- and multi- agent) zero-sum, cooperative and general-sum, one-shot and\nsequential, strictly turn-taking and simultaneous-move, perfect and imperfect\ninformation games, as well as traditional multiagent environments such as\n(partially- and fully- observable) grid worlds and social dilemmas. OpenSpiel\nalso includes tools to analyze learning dynamics and other common evaluation\nmetrics. Games are represented as procedural extensive-form games, with some\nnatural extensions. The core API and games are implemented in C++ and exposed to\nPython. Algorithms and tools are written both in C++ and Python.\n\nTo try OpenSpiel in Google Colaboratory, please refer to `open_spiel/colabs` subdirectory or start [here](https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/install_open_spiel.ipynb).\n\n<p align=\"center\">\n  <img src=\"docs/_static/OpenSpielB.png\" alt=\"OpenSpiel visual asset\">\n</p>\n\n# Index\n\nPlease choose among the following options:\n\n*   [Installing OpenSpiel](docs/install.md)\n*   [Introduction to OpenSpiel](docs/intro.md)\n*   [API Overview and First Example](docs/concepts.md)\n*   [API Reference](docs/api_reference.md)\n*   [Overview of Implemented Games](docs/games.md)\n*   [Overview of Implemented Algorithms](docs/algorithms.md)\n*   [Developer Guide](docs/developer_guide.md)\n*   [Using OpenSpiel as a C++ Library](docs/library.md)\n*   [Guidelines and Contributing](docs/contributing.md)\n*   [Authors](docs/authors.md)\n\nFor a longer introduction to the core concepts, formalisms, and terminology,\nincluding an overview of the algorithms and some results, please see\n[OpenSpiel: A Framework for Reinforcement Learning in Games](https://arxiv.org/abs/1908.09453).\n\nFor an overview of OpenSpiel and example uses of the core API, please check out\nour tutorials:\n\n*   [Motivation, Core API, Brief Intro to Replictor Dynamics and Imperfect\n    Information Games](https://www.youtube.com/watch?v=8NCPqtPwlFQ) by Marc\n    Lanctot.\n    [(slides)](http://mlanctot.info/files/OpenSpiel_Tutorial_KU_Leuven_2022.pdf)\n    [(colab)](https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/OpenSpielTutorial.ipynb)\n*   [Motivation, Core API, Implementing CFR and REINFORCE on Kuhn poker, Leduc\n    poker, and Goofspiel](https://www.youtube.com/watch?v=o6JNHoGUXCo) by Edward\n    Lockhart.\n    [(slides)](http://mlanctot.info/files/open_spiel_tutorial-mar2021-comarl.pdf)\n    [(colab)](https://colab.research.google.com/github/deepmind/open_spiel/blob/master/open_spiel/colabs/CFR_and_REINFORCE.ipynb)\n\nIf you use OpenSpiel in your research, please cite the paper using the following\nBibTeX:\n\n```bibtex\n@article{LanctotEtAl2019OpenSpiel,\n  title     = {{OpenSpiel}: A Framework for Reinforcement Learning in Games},\n  author    = {Marc Lanctot and Edward Lockhart and Jean-Baptiste Lespiau and\n               Vinicius Zambaldi and Satyaki Upadhyay and Julien P\\'{e}rolat and\n               Sriram Srinivasan and Finbarr Timbers and Karl Tuyls and\n               Shayegan Omidshafiei and Daniel Hennes and Dustin Morrill and\n               Paul Muller and Timo Ewalds and Ryan Faulkner and J\\'{a}nos Kram\\'{a}r\n               and Bart De Vylder and Brennan Saeta and James Bradbury and David Ding\n               and Sebastian Borgeaud and Matthew Lai and Julian Schrittwieser and\n               Thomas Anthony and Edward Hughes and Ivo Danihelka and Jonah Ryan-Davis},\n  year      = {2019},\n  eprint    = {1908.09453},\n  archivePrefix = {arXiv},\n  primaryClass = {cs.LG},\n  journal   = {CoRR},\n  volume    = {abs/1908.09453},\n  url       = {http://arxiv.org/abs/1908.09453},\n}\n```\n\n## Versioning\n\nWe use [Semantic Versioning](https://semver.org/).\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.7373046875,
          "content": "#!/usr/bin/env bash\n\n# Copyright 2019 DeepMind Technologies Ltd. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Just a stub here in the root to reference the real install script.\nsource $(dirname \"$0\")/open_spiel/scripts/install.sh\n"
        },
        {
          "name": "open_spiel",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.75,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/requirements.readthedocs.txt\n\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.8\"\n  jobs:\n    pre_build:\n      - echo \"Running pre-build commands.\"\n      - echo `date`\n      - echo `pwd`\n      - echo `ls`\n      - echo `ls docs`\n      - echo \"Fixing the table links\"\n      - bash docs/fix_table_links.sh\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.6884765625,
          "content": "# The core OpenSpiel pip dependencies.\n#\n# Note that there are optional python packages used by some of the python\n# algorithms or tools in OpenSpiel that are purposely excluded (e.g.,\n# cvxopt, nashpy, matplotlib, etc.) This is because we want to keep only\n# the dependencies that are absolutely necessary to use the Python API.\n#\n# However, when testing using continuous integration like GitHub Actions,\n# we install several more packages to ensure the proper tests are\n# included. See open_spiel/scripts/python_extra_deps.sh for the extra\n# packages and their versions we use for testing purposes.\npip >= 20.0.2\nattrs >= 19.3.0\nabsl-py >= 0.10.0\nnumpy >= 1.21.5\nscipy >= 1.10.1\nml-collections >= 0.1.1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.5205078125,
          "content": "# Copyright 2019 DeepMind Technologies Limited\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"The setup script for setuptools.\n\nSee https://setuptools.readthedocs.io/en/latest/setuptools.html\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\n\nimport setuptools\nfrom setuptools.command.build_ext import build_ext\n\n\nclass CMakeExtension(setuptools.Extension):\n  \"\"\"An extension with no sources.\n\n  We do not want distutils to handle any of the compilation (instead we rely\n  on CMake), so we always pass an empty list to the constructor.\n  \"\"\"\n\n  def __init__(self, name, sourcedir=\"\"):\n    super().__init__(name, sources=[])\n    self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass BuildExt(build_ext):\n  \"\"\"Our custom build_ext command.\n\n  Uses CMake to build extensions instead of a bare compiler (e.g. gcc, clang).\n  \"\"\"\n\n  def run(self):\n    self._check_build_environment()\n    for ext in self.extensions:\n      self.build_extension(ext)\n\n  def _check_build_environment(self):\n    \"\"\"Check for required build tools: CMake, C++ compiler, and python dev.\"\"\"\n    try:\n      subprocess.check_call([\"cmake\", \"--version\"])\n    except OSError as e:\n      ext_names = \", \".join(e.name for e in self.extensions)\n      raise RuntimeError(\n          \"CMake must be installed to build\" +\n          f\"the following extensions: {ext_names}\") from e\n    print(\"Found CMake\")\n\n    cxx = \"clang++\"\n    if os.environ.get(\"CXX\") is not None:\n      cxx = os.environ.get(\"CXX\")\n    try:\n      subprocess.check_call([cxx, \"--version\"])\n    except OSError as e:\n      ext_names = \", \".join(e.name for e in self.extensions)\n      raise RuntimeError(\n          \"A C++ compiler that supports c++17 must be installed to build the \"\n          + \"following extensions: {}\".format(ext_names)\n          + \". We recommend: Clang version >= 7.0.0.\"\n      ) from e\n    print(\"Found C++ compiler: {}\".format(cxx))\n\n  def build_extension(self, ext):\n    extension_dir = os.path.abspath(\n        os.path.dirname(self.get_ext_fullpath(ext.name)))\n    cxx = \"clang++\"\n    if os.environ.get(\"CXX\") is not None:\n      cxx = os.environ.get(\"CXX\")\n    env = os.environ.copy()\n    cmake_args = [\n        f\"-DPython3_EXECUTABLE={sys.executable}\",\n        f\"-DCMAKE_CXX_COMPILER={cxx}\",\n        f\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extension_dir}\",\n    ]\n    if not os.path.exists(self.build_temp):\n      os.makedirs(self.build_temp)\n    subprocess.check_call(\n        [\"cmake\", ext.sourcedir] + cmake_args, cwd=self.build_temp,\n        env=env)\n\n    # Build only pyspiel (for pip package)\n    subprocess.check_call([\"make\", \"pyspiel\", f\"-j{os.cpu_count()}\"],\n                          cwd=self.build_temp,\n                          env=env)\n\n\ndef _get_requirements(requirements_file):  # pylint: disable=g-doc-args\n  \"\"\"Returns a list of dependencies for setup() from requirements.txt.\n\n  Currently a requirements.txt is being used to specify dependencies. In order\n  to avoid specifying it in two places, we're going to use that file as the\n  source of truth.\n  \"\"\"\n  with open(requirements_file) as f:\n    return [_parse_line(line) for line in f if line]\n\n\ndef _parse_line(s):\n  \"\"\"Parses a line of a requirements.txt file.\"\"\"\n  requirement, *_ = s.split(\"#\")\n  return requirement.strip()\n\n\n# Get the requirements from file.\n# When installing from pip it is in the parent directory\nreq_file = \"\"\nif os.path.exists(\"requirements.txt\"):\n  req_file = \"requirements.txt\"\nelse:\n  req_file = \"../requirements.txt\"\n\nsetuptools.setup(\n    name=\"open_spiel\",\n    version=\"1.5\",\n    license=\"Apache 2.0\",\n    author=\"The OpenSpiel authors\",\n    author_email=\"open_spiel@google.com\",\n    description=\"A Framework for Reinforcement Learning in Games\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/deepmind/open_spiel\",\n    install_requires=_get_requirements(req_file),\n    python_requires=\">=3.9\",\n    ext_modules=[CMakeExtension(\"pyspiel\", sourcedir=\"open_spiel\")],\n    cmdclass={\"build_ext\": BuildExt},\n    zip_safe=False,\n    packages=setuptools.find_packages(include=[\"open_spiel\", \"open_spiel.*\"]))\n"
        }
      ]
    }
  ]
}