{
  "metadata": {
    "timestamp": 1736565308527,
    "page": 126,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zeux/pugixml",
      "stars": 4086,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.103515625,
          "content": "comment: false\ncoverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch: off\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01953125,
          "content": "tests/data/* -text\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "/build/\n/.vscode/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.095703125,
          "content": "cmake_minimum_required(VERSION 3.5...3.30)\n\n# Policy configuration; this *MUST* be specified before project is defined\nif(POLICY CMP0091)\n    cmake_policy(SET CMP0091 NEW) # Enables use of MSVC_RUNTIME_LIBRARY\nendif()\n\nproject(pugixml VERSION 1.15 LANGUAGES CXX)\n\ninclude(CMakePackageConfigHelpers)\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\ncmake_dependent_option(PUGIXML_USE_VERSIONED_LIBDIR\n  \"Use a private subdirectory to install the headers and libraries\" OFF\n  \"CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\n\ncmake_dependent_option(PUGIXML_USE_POSTFIX\n  \"Use separate postfix for each configuration to make sure you can install multiple build outputs\" OFF\n  \"CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\n\ncmake_dependent_option(PUGIXML_STATIC_CRT\n  \"Use static MSVC RT libraries\" OFF\n  \"MSVC\" OFF)\n\ncmake_dependent_option(PUGIXML_BUILD_TESTS\n  \"Build pugixml tests\" OFF\n  \"CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\n\n# Custom build defines\nset(PUGIXML_BUILD_DEFINES CACHE STRING \"Build defines for custom options\")\nseparate_arguments(PUGIXML_BUILD_DEFINES)\n\n# Technically not needed for this file. This is builtin CMAKE global variable.\noption(BUILD_SHARED_LIBS \"Build shared instead of static library\" OFF)\n\n# Expose option to build PUGIXML as static as well when the global BUILD_SHARED_LIBS variable is set\ncmake_dependent_option(PUGIXML_BUILD_SHARED_AND_STATIC_LIBS\n  \"Build both shared and static libraries\" OFF\n  \"BUILD_SHARED_LIBS\" OFF)\n\n# Expose options from the pugiconfig.hpp\noption(PUGIXML_WCHAR_MODE \"Enable wchar_t mode\" OFF)\noption(PUGIXML_COMPACT \"Enable compact mode\" OFF)\noption(PUGIXML_INSTALL \"Enable installation rules\" ON)\n\n# Advanced options from pugiconfig.hpp\noption(PUGIXML_NO_XPATH \"Disable XPath\" OFF)\noption(PUGIXML_NO_STL \"Disable STL\" OFF)\noption(PUGIXML_NO_EXCEPTIONS \"Disable Exceptions\" OFF)\nmark_as_advanced(PUGIXML_NO_XPATH PUGIXML_NO_STL PUGIXML_NO_EXCEPTIONS)\n\nif (APPLE)\n  option(PUGIXML_BUILD_APPLE_FRAMEWORK \"Build as Apple Frameworks\" OFF)\nendif()\n\nset(PUGIXML_PUBLIC_DEFINITIONS\n  $<$<BOOL:${PUGIXML_WCHAR_MODE}>:PUGIXML_WCHAR_MODE>\n  $<$<BOOL:${PUGIXML_COMPACT}>:PUGIXML_COMPACT>\n  $<$<BOOL:${PUGIXML_NO_XPATH}>:PUGIXML_NO_XPATH>\n  $<$<BOOL:${PUGIXML_NO_STL}>:PUGIXML_NO_STL>\n  $<$<BOOL:${PUGIXML_NO_EXCEPTIONS}>:PUGIXML_NO_EXCEPTIONS>\n)\n\n# This is used to backport a CMake 3.15 feature, but is also forwards compatible\nif (NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)\n  set(CMAKE_MSVC_RUNTIME_LIBRARY\n    MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<NOT:$<BOOL:${PUGIXML_STATIC_CRT}>>:DLL>)\nendif()\n\n# Set the default C++ standard to C++17 if not set; CMake will automatically downgrade this if the compiler does not support it\n# When CMAKE_CXX_STANDARD_REQUIRED is set, we fall back to C++11 to avoid breaking older compilers\nif (NOT DEFINED CMAKE_CXX_STANDARD_REQUIRED AND NOT DEFINED CMAKE_CXX_STANDARD AND NOT CMAKE_VERSION VERSION_LESS 3.8)\n\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED OFF)\nelseif (NOT DEFINED CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 11)\nendif()\n\nif (PUGIXML_USE_POSTFIX)\n  set(CMAKE_RELWITHDEBINFO_POSTFIX _r)\n  set(CMAKE_MINSIZEREL_POSTFIX _m)\n  set(CMAKE_DEBUG_POSTFIX _d)\nendif()\n\nif (CMAKE_VERSION VERSION_LESS 3.15)\n  set(msvc-rt $<TARGET_PROPERTY:MSVC_RUNTIME_LIBRARY>)\n\n  set(msvc-rt-mtd-shared $<STREQUAL:${msvc-rt},MultiThreadedDebugDLL>)\n  set(msvc-rt-mtd-static $<STREQUAL:${msvc-rt},MultiThreadedDebug>)\n  set(msvc-rt-mt-shared $<STREQUAL:${msvc-rt},MultiThreadedDLL>)\n  set(msvc-rt-mt-static $<STREQUAL:${msvc-rt},MultiThreaded>)\n  unset(msvc-rt)\n\n  set(msvc-rt-mtd-shared $<${msvc-rt-mtd-shared}:-MDd>)\n  set(msvc-rt-mtd-static $<${msvc-rt-mtd-static}:-MTd>)\n  set(msvc-rt-mt-shared $<${msvc-rt-mt-shared}:-MD>)\n  set(msvc-rt-mt-static $<${msvc-rt-mt-static}:-MT>)\nendif()\n\nset(versioned-dir $<$<BOOL:${PUGIXML_USE_VERSIONED_LIBDIR}>:/pugixml-${PROJECT_VERSION}>)\n\nset(libs)\n\nif (BUILD_SHARED_LIBS)\n  add_library(pugixml-shared SHARED\n    ${PROJECT_SOURCE_DIR}/scripts/pugixml_dll.rc\n    ${PROJECT_SOURCE_DIR}/src/pugixml.cpp)\n  add_library(pugixml::shared ALIAS pugixml-shared)\n  list(APPEND libs pugixml-shared)\n  string(CONCAT pugixml.msvc $<OR:\n    $<STREQUAL:${CMAKE_CXX_COMPILER_FRONTEND_VARIANT},MSVC>,\n    $<CXX_COMPILER_ID:MSVC>\n  >)\n\n  set_property(TARGET pugixml-shared PROPERTY EXPORT_NAME shared)\n  target_include_directories(pugixml-shared\n    PUBLIC\n      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>)\n  target_compile_definitions(pugixml-shared\n    PUBLIC\n      ${PUGIXML_BUILD_DEFINES}\n      ${PUGIXML_PUBLIC_DEFINITIONS}\n    PRIVATE\n      PUGIXML_API=$<IF:${pugixml.msvc},__declspec\\(dllexport\\),__attribute__\\(\\(visibility\\(\"default\"\\)\\)\\)>\n    )\n  target_compile_options(pugixml-shared\n    PRIVATE\n      ${msvc-rt-mtd-shared}\n      ${msvc-rt-mtd-static}\n      ${msvc-rt-mt-shared}\n      ${msvc-rt-mt-static})\nendif()\n\nif (NOT BUILD_SHARED_LIBS OR PUGIXML_BUILD_SHARED_AND_STATIC_LIBS)\n  add_library(pugixml-static STATIC\n    ${PROJECT_SOURCE_DIR}/src/pugixml.cpp)\n  add_library(pugixml::static ALIAS pugixml-static)\n  list(APPEND libs pugixml-static)\n\n  set_property(TARGET pugixml-static PROPERTY EXPORT_NAME static)\n  target_include_directories(pugixml-static\n    PUBLIC\n      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>)\n  target_compile_definitions(pugixml-static\n    PUBLIC\n      ${PUGIXML_BUILD_DEFINES}\n      ${PUGIXML_PUBLIC_DEFINITIONS})\n  target_compile_options(pugixml-static\n    PRIVATE\n      ${msvc-rt-mtd-shared}\n      ${msvc-rt-mtd-static}\n      ${msvc-rt-mt-shared}\n      ${msvc-rt-mt-static})\nendif()\n\nif (BUILD_SHARED_LIBS)\n  set(pugixml-alias pugixml-shared)\nelse()\n  set(pugixml-alias pugixml-static)\nendif()\nadd_library(pugixml INTERFACE)\ntarget_link_libraries(pugixml INTERFACE ${pugixml-alias})\nadd_library(pugixml::pugixml ALIAS pugixml)\n\nset_target_properties(${libs}\n  PROPERTIES\n    MSVC_RUNTIME_LIBRARY ${CMAKE_MSVC_RUNTIME_LIBRARY}\n    EXCLUDE_FROM_ALL ON\n    POSITION_INDEPENDENT_CODE ON\n    SOVERSION ${PROJECT_VERSION_MAJOR}\n    VERSION ${PROJECT_VERSION}\n    OUTPUT_NAME pugixml)\n\nset_target_properties(${libs}\n  PROPERTIES\n    EXCLUDE_FROM_ALL OFF)\nset(install-targets pugixml ${libs})\n\nif (PUGIXML_BUILD_APPLE_FRAMEWORK)\n  set_target_properties(${libs} PROPERTIES\n    FRAMEWORK TRUE\n    FRAMEWORK_VERSION ${PROJECT_VERSION}\n    XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.zeux.pugixml\n    MACOSX_FRAMEWORK_IDENTIFIER com.zeux.pugixml\n    MACOSX_FRAMEWORK_BUNDLE_VERSION ${PROJECT_VERSION}\n    MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR})\nendif()\n\nconfigure_package_config_file(\n  \"${PROJECT_SOURCE_DIR}/scripts/pugixml-config.cmake.in\"\n  \"${PROJECT_BINARY_DIR}/pugixml-config.cmake\"\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO\n  NO_SET_AND_CHECK_MACRO)\n\nwrite_basic_package_version_file(\n  \"${PROJECT_BINARY_DIR}/pugixml-config-version.cmake\"\n  COMPATIBILITY SameMajorVersion)\n\nif (PUGIXML_USE_POSTFIX)\n  if(CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)\n    set(LIB_POSTFIX ${CMAKE_RELWITHDEBINFO_POSTFIX})\n  elseif(CMAKE_BUILD_TYPE MATCHES MinSizeRel)\n    set(LIB_POSTFIX ${CMAKE_MINSIZEREL_POSTFIX})\n  elseif(CMAKE_BUILD_TYPE MATCHES Debug)\n    set(LIB_POSTFIX ${CMAKE_DEBUG_POSTFIX})\n  endif()\nendif()\n\n# Handle both relative and absolute paths (e.g. NixOS) for a relocatable package\nif(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  set(PUGIXML_PC_INCLUDEDIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\nelse()\n  set(PUGIXML_PC_INCLUDEDIR \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\nendif()\nif(IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n  set(PUGIXML_PC_LIBDIR \"${CMAKE_INSTALL_LIBDIR}\")\nelse()\n  set(PUGIXML_PC_LIBDIR \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\nconfigure_file(scripts/pugixml.pc.in pugixml.pc @ONLY)\n\nexport(TARGETS ${install-targets}\n  NAMESPACE pugixml::\n  FILE pugixml-targets.cmake)\n\nif(PUGIXML_INSTALL)\n  if (NOT DEFINED PUGIXML_RUNTIME_COMPONENT)\n    set(PUGIXML_RUNTIME_COMPONENT Runtime)\n  endif()\n\n  if (NOT DEFINED PUGIXML_LIBRARY_COMPONENT)\n    set(PUGIXML_LIBRARY_COMPONENT Library)\n  endif()\n\n  if (NOT DEFINED PUGIXML_DEVELOPMENT_COMPONENT)\n    set(PUGIXML_DEVELOPMENT_COMPONENT Development)\n  endif()\n\n  set(namelink-component)\n  if (NOT CMAKE_VERSION VERSION_LESS 3.12)\n    set(namelink-component NAMELINK_COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT})\n  endif()\n  install(TARGETS ${install-targets}\n    EXPORT pugixml-targets\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${PUGIXML_RUNTIME_COMPONENT}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${PUGIXML_LIBRARY_COMPONENT} ${namelink-component}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT}\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}${versioned-dir}\n    FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT runtime OPTIONAL)\n\n  install(EXPORT pugixml-targets\n    NAMESPACE pugixml::\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/pugixml COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT})\n\n  install(FILES\n    \"${PROJECT_BINARY_DIR}/pugixml-config-version.cmake\"\n    \"${PROJECT_BINARY_DIR}/pugixml-config.cmake\"\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/pugixml COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT})\n\n  install(FILES ${PROJECT_BINARY_DIR}/pugixml.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT})\n\n  install(\n    FILES\n      \"${PROJECT_SOURCE_DIR}/src/pugiconfig.hpp\"\n      \"${PROJECT_SOURCE_DIR}/src/pugixml.hpp\"\n    DESTINATION\n      ${CMAKE_INSTALL_INCLUDEDIR}${versioned-dir} COMPONENT ${PUGIXML_DEVELOPMENT_COMPONENT})\nendif()\n\nif (PUGIXML_BUILD_TESTS)\n  include(CTest)\n  set(fuzz-pattern \"tests/fuzz_*.cpp\")\n  set(test-pattern \"tests/*.cpp\")\n  if (CMAKE_VERSION VERSION_GREATER 3.11)\n    list(INSERT fuzz-pattern 0 CONFIGURE_DEPENDS)\n    list(INSERT test-pattern 0 CONFIGURE_DEPENDS)\n  endif()\n  file(GLOB test-sources ${test-pattern})\n  file(GLOB fuzz-sources ${fuzz-pattern})\n  list(REMOVE_ITEM test-sources ${fuzz-sources})\n\n  add_custom_target(check\n    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure)\n\n  add_executable(pugixml-check ${test-sources})\n  add_test(NAME pugixml::test\n    COMMAND pugixml-check\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})\n  add_dependencies(check pugixml-check)\n  target_link_libraries(pugixml-check\n    PRIVATE\n      pugixml::pugixml)\nendif()\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2006-2025 Arseny Kapoulkine\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.4736328125,
          "content": ".SUFFIXES:\nMAKEFLAGS+=-r\n\nconfig=debug\ndefines=standard\ncxxstd=any\n\nBUILD=build/make-$(firstword $(CXX))-$(config)-$(defines)-$(cxxstd)\n\nSOURCES=src/pugixml.cpp $(filter-out tests/fuzz_%,$(wildcard tests/*.cpp))\nEXECUTABLE=$(BUILD)/test\n\nVERSION=$(shell sed -n 's/.*version \\(.*\\).*/\\1/p; /version/q' src/pugiconfig.hpp)\nRELEASE=$(filter-out scripts/archive.py docs/%.adoc,$(shell git ls-files docs scripts src CMakeLists.txt LICENSE.md readme.txt))\n\nCXXFLAGS=-g -Wall -Wextra -Werror -pedantic -Wundef -Wshadow -Wcast-align -Wcast-qual -Wold-style-cast -Wdouble-promotion\nLDFLAGS=\n\nifeq ($(config),release)\n\tCXXFLAGS+=-O3 -DNDEBUG\nendif\n\nifeq ($(config),coverage)\n\tCXXFLAGS+=-coverage\n\tLDFLAGS+=-coverage\nendif\n\nifeq ($(config),sanitize)\n\tCXXFLAGS+=-fsanitize=address,undefined -fno-sanitize-recover=all\n\tLDFLAGS+=-fsanitize=address,undefined\nendif\n\nifeq ($(config),analyze)\n\tCXXFLAGS+=--analyze\nendif\n\nifneq ($(defines),standard)\n\tCOMMA=,\n\tCXXFLAGS+=-D $(subst $(COMMA), -D ,$(defines))\nendif\n\nifneq ($(findstring PUGIXML_NO_EXCEPTIONS,$(defines)),)\n\tCXXFLAGS+=-fno-exceptions\nendif\n\nifneq ($(cxxstd),any)\n\tCXXFLAGS+=-std=$(cxxstd)\nendif\n\nOBJECTS=$(SOURCES:%=$(BUILD)/%.o)\n\nall: $(EXECUTABLE)\n\nifeq ($(config),coverage)\ntest: $(EXECUTABLE)\n\t-@find $(BUILD) -name '*.gcda' -exec rm {} +\n\t./$(EXECUTABLE)\n\t@gcov -b -o $(BUILD)/src/ pugixml.cpp.gcda | sed -e '/./{H;$!d;}' -e 'x;/pugixml.cpp/!d;'\n\t@find . -name '*.gcov' -and -not -name 'pugixml.cpp.gcov' -exec rm {} +\n\t@sed -i -e \"s/#####\\(.*\\)\\(\\/\\/ unreachable.*\\)/    1\\1\\2/\" pugixml.cpp.gcov\nelse\ntest: $(EXECUTABLE)\n\t./$(EXECUTABLE)\nendif\n\nfuzz_%: $(BUILD)/fuzz_%\n\t@mkdir -p build/$@\n\t$< build/$@ tests/data_fuzz_$* -max_len=1024 -dict=tests/fuzz_$*.dict -fork=16\n\nclean:\n\trm -rf $(BUILD)\n\nrelease: build/pugixml-$(VERSION).tar.gz build/pugixml-$(VERSION).zip\n\ndocs: docs/quickstart.html docs/manual.html\n\nbuild/pugixml-%: .FORCE | $(RELEASE)\n\t@mkdir -p $(BUILD)\n\tTIMESTAMP=`git show v$(VERSION) -s --format=%ct` && python3 scripts/archive.py $@ pugixml-$(VERSION) $$TIMESTAMP $|\n\n$(EXECUTABLE): $(OBJECTS)\n\t$(CXX) $(OBJECTS) $(LDFLAGS) -o $@\n\n$(BUILD)/fuzz_%: tests/fuzz_%.cpp src/pugixml.cpp\n\t@mkdir -p $(BUILD)\n\t$(CXX) $(CXXFLAGS) -fsanitize=address,fuzzer $^ -o $@\n\n$(BUILD)/%.o: %\n\t@mkdir -p $(dir $@)\n\t$(CXX) $< $(CXXFLAGS) -c -MMD -MP -o $@\n\n-include $(OBJECTS:.o=.d)\n\n.SECONDEXPANSION:\ndocs/%.html: docs/%.adoc $$(shell sed -n 's/include\\:\\:\\(.*\\)\\[.*/docs\\/\\1/p' docs/%.adoc)\n\tasciidoctor -b html5 -a version=$(VERSION) $< -o $@\n\n.PHONY: all test clean release .FORCE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.990234375,
          "content": "pugixml [![Actions Status](https://github.com/zeux/pugixml/workflows/build/badge.svg)](https://github.com/zeux/pugixml/actions) [![Build status](https://ci.appveyor.com/api/projects/status/9hdks1doqvq8pwe7/branch/master?svg=true)](https://ci.appveyor.com/project/zeux/pugixml) [![codecov.io](https://codecov.io/github/zeux/pugixml/coverage.svg?branch=master)](https://codecov.io/github/zeux/pugixml?branch=master) ![MIT](https://img.shields.io/badge/license-MIT-blue.svg)\n=======\n\npugixml is a C++ XML processing library, which consists of a DOM-like interface with rich traversal/modification\ncapabilities, an extremely fast XML parser which constructs the DOM tree from an XML file/buffer, and an XPath 1.0\nimplementation for complex data-driven tree queries. Full Unicode support is also available, with Unicode interface\nvariants and conversions between different Unicode encodings (which happen automatically during parsing/saving).\n\npugixml is used by a lot of projects, both open-source and proprietary, for performance and easy-to-use interface.\n\n## Documentation\n\nDocumentation for the current release of pugixml is available on-line as two separate documents:\n\n* [Quick-start guide](https://pugixml.org/docs/quickstart.html), that aims to provide enough information to start using the library;\n* [Complete reference manual](https://pugixml.org/docs/manual.html), that describes all features of the library in detail.\n\nYou’re advised to start with the quick-start guide; however, many important library features are either not described in it at all or only mentioned briefly; if you require more information you should read the complete manual.\n\n## Example\n\nHere's an example of how code using pugixml looks; it opens an XML file, goes over all Tool nodes and prints tools that have a Timeout attribute greater than 0:\n\n```c++\n#include \"pugixml.hpp\"\n#include <iostream>\n\nint main()\n{\n    pugi::xml_document doc;\n    pugi::xml_parse_result result = doc.load_file(\"xgconsole.xml\");\n    if (!result)\n        return -1;\n        \n    for (pugi::xml_node tool: doc.child(\"Profile\").child(\"Tools\").children(\"Tool\"))\n    {\n        int timeout = tool.attribute(\"Timeout\").as_int();\n        \n        if (timeout > 0)\n            std::cout << \"Tool \" << tool.attribute(\"Filename\").value() << \" has timeout \" << timeout << \"\\n\";\n    }\n}\n```\n\nAnd the same example using XPath:\n\n```c++\n#include \"pugixml.hpp\"\n#include <iostream>\n\nint main()\n{\n    pugi::xml_document doc;\n    pugi::xml_parse_result result = doc.load_file(\"xgconsole.xml\");\n    if (!result)\n        return -1;\n        \n    pugi::xpath_node_set tools_with_timeout = doc.select_nodes(\"/Profile/Tools/Tool[@Timeout > 0]\");\n    \n    for (pugi::xpath_node node: tools_with_timeout)\n    {\n        pugi::xml_node tool = node.node();\n        std::cout << \"Tool \" << tool.attribute(\"Filename\").value() <<\n            \" has timeout \" << tool.attribute(\"Timeout\").as_int() << \"\\n\";\n    }\n}\n```\n\n\n## License\n\nThis library is available to anybody free of charge, under the terms of MIT License (see LICENSE.md).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3046875,
          "content": "# Security Policy\n\n## Supported Versions\n\nPlease verify that the vulnerabilities reported can be reproduced on the [latest released version](https://github.com/zeux/pugixml/releases).\n\n## Reporting a Vulnerability\n\nVulnerabilities can be reported via e-mail to the [project maintainer](https://github.com/zeux).\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.3076171875,
          "content": "branches:\n  only:\n    - master\n\nimage:\n  - Visual Studio 2022\n  - Visual Studio 2019\n  - Visual Studio 2017\n  - Visual Studio 2015\n\nversion: \"{branch}-{build}\"\n\nbuild_script:\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2013\") { .\\scripts\\nuget_build.ps1 2013}\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { .\\scripts\\nuget_build.ps1 2015}\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2017\") { .\\scripts\\nuget_build.ps1 2017}\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2019\") { .\\scripts\\nuget_build.ps1 2019}\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2022\") { .\\scripts\\nuget_build.ps1 2022}\n\ntest_script:\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { .\\tests\\cmake-appveyor.ps1 9 2008 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { .\\tests\\cmake-appveyor.ps1 12 2013 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { .\\tests\\cmake-appveyor.ps1 14 2015 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2017\") { .\\tests\\cmake-appveyor.ps1 15 2017 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2019\") { .\\tests\\cmake-appveyor.ps1 16 2019 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2022\") { .\\tests\\cmake-appveyor.ps1 17 2022 }\n\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { .\\tests\\autotest-appveyor.ps1 9 10 11 12 14 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2017\") { .\\tests\\autotest-appveyor.ps1 15 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2019\") { .\\tests\\autotest-appveyor.ps1 19 }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2022\") { .\\tests\\autotest-appveyor.ps1 22 }\n\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { & C:\\cygwin\\bin\\bash.exe -c \"PATH=/usr/bin:/usr/local/bin:$PATH; make -j2 config=coverage test && bash <(curl -s https://codecov.io/bash) -f pugixml.cpp.gcov 2>&1\" }\n  - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq \"Visual Studio 2015\") { & C:\\cygwin\\bin\\bash.exe -c \"PATH=/usr/bin:/usr/local/bin:$PATH; make -j2 config=coverage defines=PUGIXML_WCHAR_MODE test && bash <(curl -s https://codecov.io/bash) -f pugixml.cpp.gcov 2>&1\" }\n\nartifacts:\n  - path: .\\scripts\\*.nupkg\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.txt",
          "type": "blob",
          "size": 2.044921875,
          "content": "pugixml 1.15 - an XML processing library\n\nCopyright (C) 2006-2025, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nReport bugs and download new versions at https://pugixml.org/\n\nThis is the distribution of pugixml, which is a C++ XML processing library,\nwhich consists of a DOM-like interface with rich traversal/modification\ncapabilities, an extremely fast XML parser which constructs the DOM tree from\nan XML file/buffer, and an XPath 1.0 implementation for complex data-driven\ntree queries. Full Unicode support is also available, with Unicode interface\nvariants and conversions between different Unicode encodings (which happen\nautomatically during parsing/saving).\n\nThe distribution contains the following folders:\n\n\tdocs/ - documentation\n\t\tdocs/samples - pugixml usage examples\n\t\tdocs/quickstart.html - quick start guide\n\t\tdocs/manual.html - complete manual\n\n\tscripts/ - project files for IDE/build systems\n\n\tsrc/ - header and source files\n\n\treadme.txt - this file.\n\nThis library is distributed under the MIT License:\n\nCopyright (c) 2006-2025 Arseny Kapoulkine\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}