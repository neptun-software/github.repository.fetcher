{
  "metadata": {
    "timestamp": 1736565532069,
    "page": 407,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tpoechtrager/osxcross",
      "stars": 2966,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "*.o\n*gcc*.tar.*\n*MacOSX*.*\ncpucount\nbuild/\ntarget/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.328125,
          "content": "N: Thomas Poechtrager\nE: t.poechtrager@gmail.com\nD: OSXCross, cctools/ld64 port\n\nN: Cjacker\nW: https://code.google.com/p/ios-toolchain-based-on-clang-for-linux\nD: cctools/ld64 port\n\nN: Don Bright\nE: hugh.m.bright@gmail.com\nD: tools/get_dependencies.sh\n\nN: Marcel Wysocki\nD: Initial MacPorts script (https://github.com/maci0/pmmacports)\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 6.9013671875,
          "content": "/****************************** v1.5 *********************************/\n\nChanged:\n * Updated cctools to 986 and ld64 to 711\n * Update TAPI library to 1300.6.5\n\n/****************************** v1.4 *********************************/\n\nChanged:\n * Updated cctools to 973.0.1 and ld64 to 609\n\n\n/****************************** v1.3 *********************************/\n\nAdded:\n * Support for arm64 and arm64e targets\n\nChanged:\n * Updated TAPI library to 1100.0.11\n\n/****************************** v1.2 *********************************/\n\nAdded:\n * Support for ld64 '-lto_library <path>'\n\nChanged:\n * Updated cctools to 949.0.1 and ld64 to 512.4\n\nRemoved:\n * Support for <= 10.5 SDKs. Use 'osxcross-1.1' branch for these.\n\n\n/****************************** v1.1 *********************************/\n\nAdded:\n * ... back support for OpenBSD\n\nChanged:\n * Updated cctools to 927.0.2 and ld64 to 450.3\n * TARGET_DIR can now be configured via env\n   (TARGET_DIR=<path> ./build.sh)\n * Various other improvements and fixes\n\n/****************************** v1.0 *********************************/\n\nAdded:\n * Support for TAPIv3 stubs (including \"zippering\" target)\n * Support for macOS SDKs up to 10.15\n * SDK packaging script for \".xip\" Xcode images\n   -> tools/gen_sdk_package_pbzx.sh <xcode.xip> \n   --> tested up to Xcode 10.2.1\n\nFixed:\n * Implemented fix for https://github.com/tpoechtrager/osxcross/issues/171\n * Implemented fix for https://github.com/tpoechtrager/osxcross/issues/178\n * Implemented fix for https://github.com/tpoechtrager/osxcross/issues/182\n\nChanged:\n * cctools, ld64, apple-libtapi and xar are now \"git clone\"'d\n   and no longer come with OSXCross.\n * Updated cctools to 921 and ld64 to 409.12\n\nRemoved:\n * Support for Cygwin and *BSD (besides FreeBSD)\n * Support for building OSXCross with GCC\n\n/****************************** v0.15 ********************************/\n\nChanged:\n * Updated cctools to 895\n * Updated ld64 to 274.2 (without TAPIv2 support)\n\nAdded:\n * Support for ThinLTO:\n   -> https://clang.llvm.org/docs/ThinLTO.html\n   -> http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html\n   -> Requires LLVM/Clang >= 3.8. LLVM/Clang >= 3.9 is recommended.\n * USE_CLANG_AS build.sh option:\n   -> Use Clang as assembler.\n\n/****************************** v0.14 ********************************/\n\nChanged:\n * Updated cctools to 886\n * Updated ld64 to 264.3.102\n\n/****************************** v0.13 ********************************/\n\nChanged:\n * Updated cctools to 877.8\n * Updated ld64 to 253.9\n\n/****************************** v0.12 ********************************/\n\nChanged:\n * Updated cctools to 877.5\n * Updated ld64 to 253.3\n\nAdded:\n * Support for Xcode 7.x / El Capitan\n\n/****************************** v0.11 ********************************/\n\nChanged:\n * '-oc-use-GCC-libs' has been renamed to '-foc-use-GCC-libstdc++'\n * Support for generating fat object files with GCC and '-foc-use-GCC-libstdc++'\n   has been removed.\n * Support for setting the language standard via\n  'OSXCROSS_C_STANDARD' / 'OSXCROSS_CXX_STANDARD' (env) has been removed\n\nAdded:\n * Support for '-stdc++' and '-gstdc++' compiler \"shortcuts\"\n   o32-clang++ --> uses libstdc++ for <= 10.8 and libc++ for >= 10.9\n   o32-clang++-libc++ --> uses the SDK's libc++\n   o32-clang++-stdc++ --> uses the SDK's libstdc++\n   o32-clang++-gstdc++ --> uses GCC's (build_GCC.sh) libstdc++\n * Unit tests (wrapper)\n * llvm-dsymutil build script\n * dsymutil is now wrapped to llvm-dsymutil (LLVM >= 3.8 only)\n\n/****************************** v0.10 ********************************/\n\nChanged:\n * Improved and colorized wrapper error/warning/debug/info messages\n * Updated cctools to 870\n * Updated ld64 to 242\n\nAdded:\n * Windows support via Cygwin\n * OpenBSD and DragonFlyBSD support\n * Linux ARM support\n * Linux PPC/PPC64 support: Totally untested, but compiles\n * GCC compiler support: OSXCross can now be built with GCC\n * 'osxcross-man' man page tool\n * p7zip sdk packaging script\n * A minimalistic xcrun tool\n * Support for ccache symlinks\n * darling-dmg sdk packaging script\n * include path warnings for /usr/include and /usr/local/include\n   (can be switched off via 'OSXCROSS_NO_INCLUDE_PATH_WARNINGS=1')\n * An option to silence osxcross extension warnings\n   (OSXCROSS_NO_EXTENSION_WARNINGS=1)\n\n/******************************* v0.9 *******************************/\n\nChanged:\n * Updated cctools to 862\n * Updated ld64 to 241.9\n\nAdded:\n * binutils / gdb build script\n * OSXCROSS_GCC_NO_STATIC_RUNTIME option (env)\n * osxcross-macports: A minimalistic macports package manager\n\n/******************************* v0.8 *******************************/\n\nChanged:\n * Updated cctools to 855\n * Updated ld64 to 236.3\n * GCC 4.9.0 -> GCC 4.9.2\n\nAdded:\n * Support for new '-arch x86_64h' (requires Clang 3.5+)\n * Support for multiple '-arch' flags with GCC\n * Scripts to make sdk extraction possible on linux (xcode 4.2 only)\n * OS X 10.10 support (DP1)\n * pkg-config wrapper\n\n/******************************* v0.7 *******************************/\n\nAdded:\n * New compiler wrapper written in C++\n * '-oc-use-GCC-libs' option (uses './build_GCC.sh' libstdc++)\n * 10.6 SDK support (10.4-10.9 are all supported now)\n * 'sw_vers' tool, which is required by some projects\n * '-stdlib=' support for GCC (as an extension through the wrapper)\n * 'OSXCROSS_C_STANDARD' env var (set C standard globally)\n * 'OSXCROSS_CXX_STANDARD' env var (set C++ standard globally)\n * macOS support (as host)\n\nChanged:\n * 'osxcross-conf', 'osxcross-env' and the (fake) 'dsymutil' are now\n   implemented in the wrapper\n * <arch>-apple-darwinXX-cc/c++ defaults now to Clang\n * Switched to two-space indents\n * GCC 4.8.2 -> GCC 4.9.0\n\nfixed:\n * 'MACOSX_DEPLOYMENT_TARGET' env var is now handled correctly\n\n/******************************* v0.6 *******************************/\n\nAdded:\n * NetBSD support\n * Dependencies installer script (Don Bright)\n * SDK packaging script\n\n/******************************* v0.5 *******************************/\n\nAdded:\n * libc++ support (for both, Clang and GCC)\n * FreeBSD support\n\nChanged:\n * Attempt to make the toolchain less path dependent\n * Updated cctools to 845\n\nfixed:\n * Help Clang to find its own intrinsic headers\n   (this issue appears to be fixed in Clang 3.4+)\n * Building the toolchain on 32 bit systems\n\n/******************************* v0.4 *******************************/\n\nAdded:\n * GCC build script\n * A workaround for buggy unistd.h headers\n\n/******************************* v0.3 *******************************/\n\nAdded:\n * 10.9 SDK support\n * *-apple-darwin*-clang* symlinks (same as invoking oXX-clang)\n\nChanged:\n * No need to build extra cctools binaries for targeting i386,\n   symlinking the x86_64 builds works as well\n\n/******************************* v0.2 *******************************/\n\nAdded:\n * A check for broken unistd.h\n * Comments to build.sh\n\nChanged:\n * Updated cctools to 839 with ld64-134.9\n\nFixed:\n * Check if macOS package is present in tarballs\n\n/******************************* v0.1 *******************************/\n\ninitial commit.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.6552734375,
          "content": "       GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "KNOWN_BUGS.md",
          "type": "blob",
          "size": 1.0283203125,
          "content": "### OSXCROSS BUGS ###\n\n-------------\n\n***ISSUE:***\n\nGCH generation does not work with `gcc` or `clang++-gstdc++`/`-foc-use-gcc-libstdc++`\nif `-c` or `-x<lang>-header` is **not** passed to the compiler.\n\nExample:\n\n    $ o64-gcc test.h\n    Undefined symbols for architecture x86_64:\n    \"_main\", referenced from:\n    start in crt1.10.6.o\n\nThis is due to `-Wl,-no_compact_unwind` being passed to the compiler under the hood.\n\nExample:\n\n    $ x86_64-apple-darwin14-base-gcc\n    x86_64-apple-darwin14-base-gcc: fatal error: no input files\n\n    $ x86_64-apple-darwin14-base-gcc -Wl,-no_compact_unwind\n    Undefined symbols for architecture x86_64:\n    \"_main\", referenced from:\n    start in crt1.10.6.o\n    ld: symbol(s) not found for architecture x86_64\n\n***WORKAROUND:***\n\nAdd `-c` or `-x<lang>-header` to the compiler flags.\n\nExample:\n\n    o64-clang++-gstdc++ test.hpp              # BAD\n    o64-clang++-gstdc++ -xc++-header test.hpp # OK\n    o64-clang++-gstdc++ test.hpp -c           # OK\n    o64-g++ test.hpp -c                       # OK\n\n-------------\n"
        },
        {
          "name": "README.COMPILER-RT.md",
          "type": "blob",
          "size": 4.6279296875,
          "content": "## COMPILER-RT ##\n\n### WHAT IS COMPILER-RT? ###\n\nPlease see http://compiler-rt.llvm.org.\n\n### INSTALLATION: ###\n\nEnsure you have finished `build.sh`,\n\nthen run: `./build_compiler_rt.sh`.\n\nBy default, installation steps for compiler-rt will be printed to the terminal\nto run manually, but you can automate the installation process by defining\n`ENABLE_COMPILER_RT_INSTALL`.\n\nYou can verify compiler-rt is working by invoking the following command:\n\n    echo \"int main(void){return 0;}\" | xcrun clang -xc -o/dev/null -v - 2>&1 | \\\n      grep \"libclang_rt\" 1>/dev/null && echo \"Success\"\n\nIf you see \"Success\", then everything went well.\n\n### USAGE: ###\n\nYou do not need to do anything, clang's doing the job for you.\n\nHowever, `-fsanitize=address` is a bit annoying because the address sanitizer library is linked  \ndynamically, and thus requires you to copy the ASAN runtime library onto the target system. \n\n\\[See [README.DEBUGGING](README.DEBUGGING.md) in how to get a backtrace with line numbers and symbol names]\n\nThe following example illustrates how to achieve this:\n\n    # Example source code.\n    $ cat test.c\n    #include <stdlib.h>\n    #include <string.h>\n    #include <stdio.h>\n\n    int main(void) {\n      char buf[2];\n      strcpy(buf, \"Hello World\"); /* Buffer overflow. */\n      puts(buf);\n      return 0;\n    }\n\n    # Compile the source file.\n    $ o64-clang test.c -fsanitize=address -o test\n\n    # Ensure the ASAN library is linked in.\n    $ xcrun otool -L test\n    test:\n            /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 104.1.0) # ASAN dep.\n            @rpath/libclang_rt.asan_osx_dynamic.dylib (compatibility version 0.0.0, current version 0.0.0)\n            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1213.0.0)\n\n    # Copy 'test' and 'libclang_rt.asan_osx_dynamic.dylib' onto the target system.\n\n    # You can find the ASAN library path easily with this one-liner:\n    $ echo \"int main(void){return 0;}\" | xcrun clang -fsanitize=address -xc -o/dev/null -v - 2>&1 | \\\n      tr ' ' '\\n' | grep libclang_rt.asan_osx_dynamic.dylib\n    [...]/bin/../lib/clang/3.6.2/lib/darwin/libclang_rt.asan_osx_dynamic.dylib\n\n    # Run ./test on the target system:\n    $ DYLD_LIBRARY_PATH=. ./test\n    =================================================================\n    ==410==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff58c3ec72 at pc [...]\n    WRITE of size 12 at 0x7fff58c3ec72 thread T0\n        #0 0x1070029ac  ([...]/tmp/libclang_rt.asan_osx_dynamic.dylib+0x3a9ac)\n        #1 0x106fc1d3a  ([...]/tmp/./test+0x100000d3a)\n        #2 0x106fc1bd3  ([...]/tmp/./test+0x100000bd3)\n        #3 0x0  (<unknown module>)\n\n    Address 0x7fff58c3ec72 is located in stack of thread T0 at offset 50 in frame\n        #0 0x106fc1bef  ([...]/tmp/./test+0x100000bef)\n\n      This frame has 2 object(s):\n        [32, 36) ''\n        [48, 50) 'buf' <== Memory access at offset 50 overflows this variable\n    HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n          (longjmp and C++ exceptions *are* supported)\n    Shadow bytes around the buggy address:\n      0x1fffeb187d30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    =>0x1fffeb187d80: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 04 f2[02]f3\n      0x1fffeb187d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187da0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187db0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187dc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x1fffeb187dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    Shadow byte legend (one shadow byte represents 8 application bytes):\n      Addressable:           00\n      Partially addressable: 01 02 03 04 05 06 07 \n      Heap left redzone:       fa\n      Heap right redzone:      fb\n      Freed heap region:       fd\n      Stack left redzone:      f1\n      Stack mid redzone:       f2\n      Stack right redzone:     f3\n      Stack partial redzone:   f4\n      Stack after return:      f5\n      Stack use after scope:   f8\n      Global redzone:          f9\n      Global init order:       f6\n      Poisoned by user:        f7\n      Container overflow:      fc\n      Array cookie:            ac\n      Intra object redzone:    bb\n      ASan internal:           fe\n      Left alloca redzone:     ca\n      Right alloca redzone:    cb\n    ==410==ABORTING\n\n"
        },
        {
          "name": "README.DEBUGGING.md",
          "type": "blob",
          "size": 0.7568359375,
          "content": "### Requirements: ###\n\n* llvm-dsymutil (>= 3.8)\n* A macOS system with lldb / gdb installed\n\n### Setting up llvm-dsymutil: ###\n\nFirst of all, you **really** need llvm-dsymutil from llvm 3.8 (trunk as of writing),  \nllvm 3.7 or earlier **is not** sufficient.\n\nRun `./build_llvm_dsymutil.sh` to build and install llvm-dsymutil to target/bin.\n\n`dsymutil` is a no-op if you do not have [osxcross-]llvm-dsymutil >= 3.8 in PATH.\n\n### Debug Example: ###\n\n* Build your application with `-g`\n* [LTO only] Add `-Wl,-object_path_lto,lto.o` to the linker flags\n* After linking run: `dsymutil binary`\n* [Optional] Strip the binary: `x86_64-apple-darwinXX-strip binary`\n* Copy the binary **and** the created `<binary>.dSYM` \"folder\" onto the target macOS system\n* Debug the binary as usual\n"
        },
        {
          "name": "README.MACPORTS.md",
          "type": "blob",
          "size": 3.48828125,
          "content": "## OSXCROSS-MACPORTS ##\n\n`osxcross-macports` is a small \"package manager\" for 16.000+ binary MacPorts packages.\n\nPackages are installed to `target/macports/pkgs`.\n\n### DEPENDENCIES: ###\n\n`bash`, `wget` and `openssl`\n\nAlso ensure that you are using the 10.6 SDK (or later).\n\n### INSTALLATION: ###\n\nRun OSXCross' `./build.sh`, then you should have `osxcross-macports` in PATH.\n\n**Setting up osxcross-macports:**\n\nMacPorts doesn't support 10.5 anymore, so we need to change OSXCross'  \ndefault target to 10.6 (better 10.7, or later).\n\nTo achive this, add the following to your bashrc (or similar):\n\n`export MACOSX_DEPLOYMENT_TARGET=10.7`\n\nThen run `osxcross-macports <cmd>`.\n\n### THINGS YOU SHOULD KNOW: ###\n\n**shortcuts:**\n\n`osxcross-mp`, `omp`\n\n\\--\n\n**pkg-config:**\n\nOSXCross' `pkg-config` (`<arch>-apple-darwinXX-pkg-config`)  \nis automatically aware of MacPorts packages.  \n\nIf you want `pkg-config` to be unaware of MacPorts packages  \n(for whatever reason), do the following:\n\n`export OSXCROSS_PKG_CONFIG_NO_MP_INC=1`\n\n\\--\n\n**automatic compiler includes:**\n\nYou can set up automatic compiler includes (`-I / -L / -F`) by doing the\nfollowing:\n\n`export OSXCROSS_MP_INC=1`\n\n\\--\n\n**verbose messages:**\n\nCan be enabled by adding '-v' or '--verbose'.\n\n\\--\n\n**upgrading packages:**\n\nRun `osxcross-macports upgrade`.\n\nThis will simply re-install the latest  version of all your installed packages.\n\n**listing all available packages:**\n\n`osxcross-macports search $`\n\n### COMMANDS: ###\n\nosxcross-macports [...]\n\n  * install &lt;pkg1&gt; [&lt;pkg2&gt; [...]]\n     * Install <package name> and its deps.\n\n  * search &lt;pkg&gt;\n     * Prints a list of matching package names.\n\n  * update-cache\n     * Updates the search index cache.\n\n  * clear-cache\n     * Clears the download and search cache.\n\n  * remove-dylibs\n     * Removes all \\*.dylib (useful for static linking).\n\n  * upgrade\n     * Reinstalls the latest version of every package.\n\n  * select-mirror\n     * Switch to a different mirror.\n\nUseful flags:\n\n  * '-v', '--verbose':\n     * Print verbose messages.\n\n  * '-v=2', '--verbose=2':\n     * Print more verbose messages.\n\n  * '-s', '--static':\n     * Install static libraries only.\n\n  * '-c', '--cflags' &lt;lib&gt;:\n     * Shows cflags for &lt;lib&gt; (same as pkg-config).\n\n  * '-l', '--ldflags' &lt;lib&gt;:\n     * Shows ldflags for &lt;lib&gt; (same as pkg-config).\n\nUninstalling is not supported (and probably never will be).\n\nHowever, you can remove packages by hand. A simpler (and cleaner) way would  \nbe to remove the whole macports directory (target/macports) and to reinstall  \nall other packages again.\n\n### USAGE EXAMPLES: ###\n\nlibrary installation:\n\n    $ osxcross-macports install libsdl2\n    searching package libsdl2 ...\n    downloading libsdl2-2.0.3_0.darwin_11.x86_64.tbz2 ...\n    installing libsdl2 ...\n    installed libsdl2\n\nprint library flags (osxcross-macports):\n\n    $ osxcross-macports --cflags sdl2\n    -D_THREAD_SAFE -I/data/development/osxcross/target/bin/../macports/pkgs/opt/local/include/SDL2 \n\n    $ osxcross-macports --ldflags sdl2\n    -L/data/development/osxcross/target/bin/../macports/pkgs/opt/local/lib -lSDL2\n\nprint library flags (pkg-config):\n\n    $ x86_64-apple-darwinXX-pkg-config --cflags sdl2\n    -D_THREAD_SAFE -I/data/development/osxcross/target/bin/../macports/pkgs/opt/local/include/SDL2 \n\n    $ x86_64-apple-darwinXX-pkg-config --libs sdl2\n    -L/data/development/osxcross/target/bin/../macports/pkgs/opt/local/lib -lSDL2\n\nautomatic includes:\n\n    OSXCROSS_MP_INC=1 o64-clang file.c -lSDL2\n\n    OSXCROSS_MP_INC=1 make [...]\n"
        },
        {
          "name": "README.PKG-CONFIG.md",
          "type": "blob",
          "size": 1.2421875,
          "content": "OSXCross' pkg-config ignores `PKG_CONFIG_*` environment variables by default and maps to `OSXCROSS_PKG_*` to `PKG_*` internally to prevent including wrong header files (`/usr/include`, etc.).\n\nYou can restore the default behavior by setting `OSXCROSS_PKG_CONFIG_USE_NATIVE_VARIABLES` (env) to 1.\n\nUsage examples:\n\n    $ x86_64-apple-darwin15-pkg-config\n    osxcross: warning: x86_64-apple-darwin15-pkg-config is a no-op - please see README.PKG-CONFIG.md for more\n    ## Explanation: No MacPorts packages installed and no OSXCROSS_PKG_* variables set = no-op. ##\n\n    $ x86_64-apple-darwin15-pkg-config --libs sdl2\n    -L[...]/target/bin/../macports/pkgs/opt/local/lib -lSDL2\n\n    $ OSXCROSS_PKG_CONFIG_NO_MP_INC=1 x86_64-apple-darwin15-pkg-config --libs sdl2\n    osxcross: warning: x86_64-apple-darwin15-pkg-config is a no-op - please see README.PKG-CONFIG.md for more\n\n    $ OSXCROSS_PKG_CONFIG_LIBDIR=<path> x86_64-apple-darwin15-pkg-config\n    ## Explanation: OSXCROSS_PKG_CONFIG_LIBDIR gets mapped to PKG_CONFIG_LIBDIR internally. ##\n\n    $ OSXCROSS_PKG_CONFIG_USE_NATIVE_VARIABLES=1 PKG_CONFIG_LIBDIR=<path> x86_64-apple-darwin15-pkg-config\n    ## Explanation: Restores the default behavior. PKG_CONFIG_LIBDIR is used and OSXCROSS_PKG_* variables will be ignored. ##\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.712890625,
          "content": "\n## macOS Cross toolchain for Linux and *BSD ##\n\n### WHAT IS THE GOAL OF OSXCROSS? ###\n\nThe goal of OSXCross is to provide a well working macOS cross toolchain for  \n`Linux`, `FreeBSD`, `OpenBSD`, and `Android (Termux)`.\n\nOSXCross works **on** `x86`, `x86_64`, `arm` and `AArch64`/`arm64`,  \nand is able to **target** `arm64`, `arm64e`, `x86_64`, `x86_64h` and `i386`.\n\n`arm64` requires macOS 11.0 SDK (or later).  \n`arm64e` [requires a recent Apple clang compiler.](https://github.com/apple/llvm-project)\n\n[There is also a `ppc` test branch that has recently seen some daylight.](https://github.com/tpoechtrager/osxcross/blob/ppc-test/README.PPC-GCC-5.5.0-SDK-10.5.md)\n\n### HOW DOES IT WORK? ###\n\nFor cross-compiling for macOS you need\n* the Clang/LLVM compiler\n* the cctools (lipo, otool, nm, ar, ...) and ld64\n* the macOS SDK.\n\n[Clang/LLVM is a cross compiler by default](http://clang.llvm.org/docs/CrossCompilation.html)\nand is now available on nearly every Linux distribution, so we just\nneed a proper [port](https://github.com/tpoechtrager/cctools-port) of\nthe cctools/ld64 and the macOS SDK.\n\nOSXCross includes a collection of scripts for preparing the SDK and\nbuilding the cctools/ld64.\n\nIt also includes scripts for optionally building\n* Clang using gcc (for the case your distribution does not include it),\n* an up-to-date vanilla GCC as a cross-compiler for target macOS,\n* the \"compiler-rt\" runtime library, and\n* the `llvm-dsymutil` tool required for debugging.\n\nNote: The \"compiler-rt\" library can be needed to link code that uses the\n`__builtin_available()` runtime version check.\n\n\n### WHAT CAN BE BUILT WITH IT? ###\n\nBasically everything you can build on macOS with clang/gcc should build with\nthis cross toolchain as well.\n\n### PACKAGE MANAGERS ###\n\nOSXCross comes with a minimalistic MacPorts Package Manager.\nSee [README.MACPORTS](README.MACPORTS.md) for more.\n\n### INSTALLATION: ###\n\nMove your\n[packaged SDK](https://github.com/tpoechtrager/osxcross#packaging-the-sdk)\nto the tarballs/ directory.\n\nThen ensure you have the following installed on your system:\n\n`Clang 3.9+`, `cmake`, `git`, `patch`, `Python`, `libssl-dev` (openssl)\n`lzma-dev`, `libxml2-dev`, `xz`, `bzip2`, `cpio`, `libbz2`, `zlib1g-dev`\nand the `bash shell`.\n\nYou can run 'sudo tools/get\\_dependencies.sh' to get these (and the\noptional packages) automatically. (outdated)\n\n*Optional:*\n\n- `llvm-devel`: For Link Time Optimization support\n- `llvm-devel`: For ld64 `-bitcode_bundle` support\n- `uuid-devel`: For ld64 `-random_uuid` support\n\nOn Ubuntu trusty you must upgrade CMake to >= 3.2.3 first. Or do this:\n\n```shell\n    curl -sSL https://cmake.org/files/v3.14/cmake-3.14.5-Linux-x86_64.tar.gz | sudo tar -xzC /opt\n    export PATH=/opt/cmake-3.14.5-Linux-x86_64/bin:$PATH\n```\n\n##### Building Clang #####\n\nOSXCross uses `clang` as the default compiler for building its tools, and also\nas a cross-compiler to create macOS binaries.\n\nIn `clang` there is no difference between cross-compilation and native\ncompilation, so OSXCross can use a normal `clang` install for both.  You can\nuse either a `clang` installation you already have, or build your own from\nsource.\n\nTo build and install your own `clang` from a recent source tree, using `gcc`,\nrun:\n\n```shell\n    ./build_clang.sh # Builds a mainline version of Clang\n    ./build_apple_clang.sh # Builds Apple's version of Clang\n```\n\nThis installs `clang` into `/usr/local`.  If you want to install somewhere\nelse, set the `INSTALLPREFIX` variable.  For example:\n\n```shell\n    INSTALLPREFIX=/opt/clang ./build_clang.sh\n```\n\n##### Building OSXCross #####\n\nTo build the cross toolchain (using `clang`), run:\n\n```shell\n    ./build.sh\n```\n\nThis installs the osxcross toolchain into `<path>/target`. If you want to install somewhere\nelse, set the `TARGET_DIR` variable.  For example:\n\n```shell\n    TARGET_DIR=/usr/local/osxcross ./build.sh\n```\n\nAnd/Or, set variable `UNATTENDED` to `1` to skip the prompt and proceed straight to\nthe build:\n\n```shell\n    UNATTENDED=1 ./build.sh\n```\n\n(This will search 'tarballs' for your SDK and then build in its own directory.)\n\n**Once this is done:** add `<path>/target/bin` to your PATH variable so that\nyou can invoke the cross-compiler.\n\nThat's it. See usage examples below.\n\n##### Building GCC: #####\n\nIf you also want to build GCC as a cross-compiler, you can do that by running:\n\n```shell\n    ./build_gcc.sh\n```\n\nThe script lets you select a GCC version by setting the variable `GCC_VERSION`.\n By default you get C and C++ compilers, but you can tell the script to build a\nFortran compiler as well:\n\n```shell\n    GCC_VERSION=5.2.0 ENABLE_FORTRAN=1 ./build_gcc.sh\n```\n\n\\[A gfortran usage example can be found [here](https://github.com/tpoechtrager/osxcross/issues/28#issuecomment-67047134)]\n\nBefore you do this, make sure you have the GCC build depedencies installed on\nyour system.\n\nOn debian like systems you can install these using:\n\n```shell\n    sudo apt-get install gcc g++ zlib1g-dev libmpc-dev libmpfr-dev libgmp-dev\n```\n\nATTENTION:\n\nOSXCross does not enable `-Werror=implicit-function-declaration` by default.  \nYou can emulate Xcode 12's behavior by setting the environmental variable  \n`OSXCROSS_ENABLE_WERROR_IMPLICIT_FUNCTION_DECLARATION` to 1.\n\nOSXCross links libgcc and libstdc++ statically by default (this affects\n`-foc-use-gcc-libstdc++` too).  You can turn this behavior off with\n`OSXCROSS_GCC_NO_STATIC_RUNTIME=1` (env).\n\nThe build also creates aliases `*-g++-libc++` which link with the `clang`\nimplementation of the C++ standard library instead of the GCC version.  Don't\nuse these variants unless you know what you're doing.\n\n### PACKAGING THE SDK: ###\n\n**[Please ensure you have read and understood the Xcode license\n   terms before continuing.](https://www.apple.com/legal/sla/docs/xcode.pdf)**\n\nThe SDKs can be extracted either from full Xcode or from Command Line\nTools for Xcode.\n\n##### Packaging the SDK on recent macOS (Xcode): #####\n\n1. [Download Xcode: https://developer.apple.com/download/all/?q=xcode] \\*\\*\n2. [Mount Xcode.dmg (Open With -> DiskImageMounter) \\*\\*\\*]\n3. Run: `./tools/gen_sdk_package.sh` (from the OSXCross package)\n4. Copy the packaged SDK (\\*.tar.\\* or \\*.pkg) on a USB Stick\n5. (On Linux/BSD) Copy or move the SDK into the tarballs/ directory of\n   OSXCross.\n\n\\*\\*  \n-- Xcode up to 16.1 Beta 1 is known to work.  \n-- Use Firefox if you have problems signing in.\n\n\\*\\*\\*  \n-- If you get a dialog with a crossed circle, ignore it.  \n-- You don't need to install Xcode.\n\nStep 1. and 2. can be skipped if you have Xcode installed.\n\n##### Packaging the Xcode 4.2 SDK on Snow Leopard: #####\n1. Install a recent version of Bash from MacPorts or Tigerbrew\n2. Download Xcode 4.2 for Snow Leopard\n3. Mount the disk image with DiskImageMounter or by running\n  `hdiutil attach <xcode>.dmg`\n4. Run: `XCODEDIR=/Volumes/Xcode ./tools/gen_sdk_package.sh`\n5. (On Linux/BSD) Copy or move the SDK into the tarballs/ directory of\n   OSXCross.\n\n##### Packing the SDK on Linux - Method 1 (Xcode > 8.0): #####\n\nThis method may require up to 45 GB of free disk space.  \nAn SSD is recommended for this method.\n\n1. Download Xcode like described in 'Packaging the SDK on macOS'\n2. Install `clang`, `make`, `libssl-devel`, `lzma-devel` and `libxml2-devel`\n3. Run `./tools/gen_sdk_package_pbzx.sh <xcode>.xip`\n4. Copy or move the SDK into the tarballs/ directory\n\n##### Packing the SDK on Linux - Method 2 (works up to Xcode 7.3): #####\n\n1. Download Xcode like described in 'Packaging the SDK on macOS'\n2. Install `cmake`, `libxml2-dev` and `fuse`\n3. Run `./tools/gen_sdk_package_darling_dmg.sh <xcode>.dmg`\n4. Copy or move the SDK into the tarballs/ directory\n\n##### Packing the SDK on Linux (and others) - Method 3 (works up to Xcode 7.2): #####\n\n1. Download Xcode like described in 'Packaging the SDK on macOS'\n2. Ensure you have `clang` and `make` installed\n3. Run `./tools/gen_sdk_package_p7zip.sh <xcode>.dmg`\n4. Copy or move the SDK into the tarballs/ directory\n\n##### Packing the SDK on Linux - Method 4 (works up to Xcode 4.2): #####\n\n1. Download Xcode 4.2 for Snow Leopard\n2. Ensure you are downloading the \"Snow Leopard\" version\n3. Install `dmg2img`\n4. Run (as root): `./tools/mount_xcode_image.sh /path/to/xcode.dmg`\n5. Follow the instructions printed by `./tools/mount_xcode_image.sh`\n6. Copy or move the SDK into the tarballs/ directory\n\n\n##### Packaging the SDK from Xcode Command Line Tools on macOS: #####\n\n1. [Download Xcode Command Line Tools: https://developer.apple.com/download/more] \\*\\*\\*\\*\n2. [Mount Command_Line_Tools_for_Xcode.dmg (Open With -> DiskImageMounter)]\n3. [Install \"Command Line Tools.pkg\" (Open With -> Installer)]\n3. Run: `./tools/gen_sdk_package_tools.sh` (from the OSXCross package)\n4. Copy the packaged SDK (\\*.tar.\\* or \\*.pkg) on a USB Stick\n5. (On Linux/BSD) Copy or move the SDK into the tarballs/ directory of\n   OSXCross.\n\n\\*\\*\\*\\*\n-- Xcode command line tools 12.x are known to work.\n\nSteps 1. to 3. can be skipped if you have Xcode Command line tools\nalready installed (e.g., auto-installed by running `git` or `gcc`\ncommand from command-line).\n\n##### Packing the SDK from from Xcode Command Line Tools on Linux: #####\n\nThis method may require up to 45 GB of free disk space.\nAn SSD is recommended for this method.\n\n1. Download Xcode Command Line Tools like described in 'Packaging the SDK from Xcode Command Line Tools on macOS'\n2. Install `clang`, `make`, `libssl-devel`, `lzma-devel` and `libxml2-devel`\n3. Run `./tools/gen_sdk_package_tools_dmg.sh <command_line_tools_for_xcode>.dmg`\n4. Copy or move the SDK into the tarballs/ directory\n\n\n### USAGE EXAMPLES: ###\n\n##### Example.  To compile a file called test.cpp, you can run: #####\n\n##### x86 #####\n\n* Clang:\n\n  * 32 bit: `o32-clang++ test.cpp -O3 -o test` OR\n    `i386-apple-darwinXX-clang++ test.cpp -O3 -o test`\n  * 64 bit: `o64-clang++ test.cpp -O3 -o test` OR\n    `x86_64-apple-darwinXX-clang++ test.cpp -O3 -o test`\n\n* GCC:\n\n  * 32 bit:  `o32-g++ test.cpp -O3 -o test` OR\n    `i386-apple-darwinXX-g++ test.cpp -O3 -o test`\n  * 64 bit:  `o64-g++ test.cpp -O3 -o test` OR\n    `x86_64-apple-darwinXX-g++ test.cpp -O3 -o test`\n\n##### ARM #####\n\n* Clang:\n\n  * arm64: `oa64-clang++ test.cpp -O3 -o test` OR\n    `arm64-apple-darwinXX-clang++ test.cpp -O3 -o test`\n  * arm64e: `oa64e-clang++ test.cpp -O3 -o test` OR\n    `arm64e-apple-darwinXX-clang++ test.cpp -O3 -o test`\n\n\nXX= the target version, you can find it out by running  `osxcross-conf` and\nthen see `TARGET`.\n\nYou can use the shortcuts `o32-...` for `i386-apple-darwin...`, depending on\nwhich you prefer.\n\n*I'll continue from here on with `o32-clang`, but remember,\n you can simply replace it with `o32-gcc` or `i386-apple-darwin...`.*\n\n##### Building Makefile based projects: #####\n\n  * `make CC=o32-clang CXX=o32-clang++`\n\n##### Building automake based projects: #####\n\n  * `CC=o32-clang CXX=o32-clang++ ./configure --host=i386-apple-darwinXX`\n\n##### Building test.cpp with libc++: #####\n\nNote: libc++ requires macOS 10.7 or later! If you really need C++11 for\nan older macOS version, then you can do the following:\n\n1. Build GCC so you have an up-to-date libstdc++\n2. Build your source code with GCC or\n   `clang++-gstdc++` / `clang++ -foc-use-gcc-libstdc++`\n\nUsage Examples:\n\n* Clang:\n\n  * C++98: `o32-clang++ -stdlib=libc++ -std=c++98 test.cpp -o test`\n  * C++11: `o32-clang++ -stdlib=libc++ -std=c++11 test1.cpp -o test`\n  * C++14: `o32-clang++ -stdlib=libc++ -std=c++14 test1.cpp -o test`\n  * C++17: `o32-clang++ -stdlib=libc++ -std=c++17 test1.cpp -o test`\n  * C++2a: `o32-clang++ -stdlib=libc++ -std=c++20 test1.cpp -o test`\n\n* Clang (shortcut):\n\n  * C++98: `o32-clang++-libc++ -std=c++98 test.cpp -o test`\n  * C++11: `o32-clang++-libc++ -std=c++11 test.cpp -o test`\n  * C++14: `o32-clang++-libc++ -std=c++14 test.cpp -o test`\n  * C++17: `o32-clang++-libc++ -std=c++17 test.cpp -o test`\n  * C++2a: `o32-clang++-libc++ -std=c++20 test.cpp -o test`\n\n* GCC\n\n  * C++11: `o32-g++-libc++ -std=c++11 test.cpp`\n  * C++14: `o32-g++-libc++ -std=c++14 test.cpp -o test`\n  * C++17: `o32-g++-libc++ -std=c++17 test.cpp -o test`\n  * C++2a: `o32-g++-libc++ -std=c++20 test.cpp -o test`\n\n##### Building test1.cpp and test2.cpp with LTO (Link Time Optimization): #####\n\n  * build the first object file: `o32-clang++ test1.cpp -O3 -flto -c`\n  * build the second object file: `o32-clang++ test2.cpp -O3 -flto -c`\n  * link them with LTO: `o32-clang++ -O3 -flto test1.o test2.o -o test`\n\n##### Building a universal binary: #####\n\n* Clang:\n  * `o64-clang++ test.cpp -O3 -arch i386 -arch x86_64 -o test`\n* GCC:\n  * build the 32 bit binary: `o32-g++ test.cpp -O3 -o test.i386`\n  * build the 64 bit binary: `o64-g++ test.cpp -O3 -o test.x86_64`\n  * use lipo to generate the universal binary:\n    `x86_64-apple darwinXX-lipo -create test.i386 test.x86_64 -output test`\n\n### DEPLOYMENT TARGET: ###\n\nThe default deployment target is:  \n\nSDK <= 10.13: `macOS 10.6`  \nSDK >= 10.14: `macOS 10.9`\n\nHowever, there are several ways to override the default value:\n\n1. by passing `OSX_VERSION_MIN=10.x` to `./build.sh`\n2. by passing `-mmacosx-version-min=10.x` to the compiler\n3. by setting the `MACOSX_DEPLOYMENT_TARGET` environment variable\n\n\\>= 10.9 also defaults to `libc++` instead of `libstdc++`,  \nthis behavior can be overriden by explicitly passing `-stdlib=libstdc++` to clang.\n\nx86\\_64h defaults to `macOS 10.8` and requires clang 3.5+.  \nx86\\_64h = x86\\_64 with optimizations for the Intel Haswell Architecture.\n\n### PROJECTS USING OSXCROSS: ###\n\n* [multiarch/crossbuild](https://github.com/multiarch/crossbuild):  \n  various cross-compilers  \n  (**Systems**: Linux, macOS, Windows, **Archs**: x86\\_64,i386, arm, ppc, mips)  \n  in Docker. OSXCross powers the Darwin builds.\n* [Smartmontools](https://www.smartmontools.org)\n\n### LICENSE: ####\n  * scripts/wrapper: GPLv2\n  * cctools/ld64: APSL 2.0\n  * xar: New BSD\n\n### CREDITS: ####\n * [cjacker for the initial cctools port](https://code.google.com/p/ios-toolchain-based-on-clang-for-linux/source/browse/#svn%2Ftrunk%2Fcctools-porting%2Fpatches)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.2744140625,
          "content": "* Document 'osxcross-man'\n* Verify downloaded archive tarballs (gcc, llvm, ...) with sha256sum or similar\n* Add support for Swift\n* Implement '-lto-library' on the linker side. A test branch is available at:\n  https://github.com/tpoechtrager/cctools-port/tree/lto-test.\n* FAQ Wiki\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 14.421875,
          "content": "#!/usr/bin/env bash\n#\n# Build and install the cctools the SDK and macports.\n#\n# This script requires the OS X SDK and the Clang/LLVM compiler.\n#\n\nVERSION=1.5\n\npushd \"${0%/*}\" &>/dev/null\n\nsource tools/tools.sh\n\nif [ $SDK_VERSION ]; then\n  echo \"SDK VERSION set in environment variable: $SDK_VERSION\"\nelse\n  guess_sdk_version\n  SDK_VERSION=$guess_sdk_version_result\nfi\nset_and_verify_sdk_path\n\ncase $SDK_VERSION in\n  10.4*|10.5*)\n    echo \"\"\n    echo \"SDK <= 10.5 no longer supported. Use 'osxcross-1.1' branch instead.\"\n    exit 1\n      ;;\nesac\n\n\ncase $SDK_VERSION in\n  10.6*)  TARGET=darwin10; X86_64H_SUPPORTED=0; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=0; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.7*)  TARGET=darwin11; X86_64H_SUPPORTED=0; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=0; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.8*)  TARGET=darwin12; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=0; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.9*)  TARGET=darwin13; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=0; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.10*) TARGET=darwin14; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=0; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.11*) TARGET=darwin15; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.12*) TARGET=darwin16; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.13*) TARGET=darwin17; X86_64H_SUPPORTED=1; I386_SUPPORTED=1; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.6;  ;;\n  10.14*) TARGET=darwin18; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  10.15*) TARGET=darwin19; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=0; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  10.16*) TARGET=darwin20; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  11|11.0*)  TARGET=darwin20.1; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  11.1*)  TARGET=darwin20.2; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  11.2*)  TARGET=darwin20.3; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  11.3*)  TARGET=darwin20.4; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  12|12.0*)  TARGET=darwin21.1; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  12.1*)  TARGET=darwin21.2; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  12.2*)  TARGET=darwin21.3; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  12.3*)  TARGET=darwin21.4; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  12.4*)  TARGET=darwin21.5; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  13|13.0*)  TARGET=darwin22.1; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  13.1*)  TARGET=darwin22.2; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  13.2*)  TARGET=darwin22.3; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  13.3*)  TARGET=darwin22.4; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.9;  ;;\n  14|14.0*)  TARGET=darwin23; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.1*)  TARGET=darwin23.1; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.2*)  TARGET=darwin23.2; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.3*)  TARGET=darwin23.3; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.4*)  TARGET=darwin23.4; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.5*)  TARGET=darwin23.5; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  14.6*)  TARGET=darwin23.6; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  15|15.0*)  TARGET=darwin24; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n  15.1*)  TARGET=darwin24.1; X86_64H_SUPPORTED=1; I386_SUPPORTED=0; ARM_SUPPORTED=1; NEED_TAPI_SUPPORT=1; OSX_VERSION_MIN_INT=10.13;  ;;\n *) echo \"Unsupported SDK\"; exit 1 ;;\nesac\n\n# Minimum targeted macOS version\n# Must be <= SDK_VERSION\nif [ -n \"$OSX_VERSION_MIN_INT\" -a -z \"$OSX_VERSION_MIN\" ]; then\n  OSX_VERSION_MIN=$OSX_VERSION_MIN_INT\nfi\n\nexport TARGET\n\necho \"\"\necho \"Building OSXCross toolchain, Version: $VERSION\"\necho \"\"\necho \"macOS SDK Version: $SDK_VERSION, Target: $TARGET\"\necho \"Minimum targeted macOS Version: $OSX_VERSION_MIN\"\necho \"Tarball Directory: $TARBALL_DIR\"\necho \"Build Directory: $BUILD_DIR\"\necho \"Install Directory: $TARGET_DIR\"\necho \"SDK Install Directory: $SDK_DIR\"\nif [ -z \"$UNATTENDED\" ]; then\n  echo \"\"\n  read -p \"Press enter to start building\"\nfi\necho \"\"\n\nexport PATH=$TARGET_DIR/bin:$PATH\n\nmkdir -p $BUILD_DIR\nmkdir -p $TARGET_DIR\nmkdir -p $SDK_DIR\n\nsource $BASE_DIR/tools/trap_exit.sh\n\npushd $BUILD_DIR &>/dev/null\n\n\n\nOLD_SDK_VERSION=$(cat .oc_sdk_version 2>/dev/null || echo \"\")\necho -n \"$SDK_VERSION\" > .oc_sdk_version\n\nif [ \"$SDK_VERSION\" != \"$OLD_SDK_VERSION\" ]; then\n  # SDK Version has changed. -> Rebuild everything.\n  rm -f .*_build_complete\nfi\n\n# XAR\n\nbuild_xar\n\n# XAR END\n\n## Apple TAPI Library ##\n\nif [ $NEED_TAPI_SUPPORT -eq 1 ]; then\n  get_sources https://github.com/tpoechtrager/apple-libtapi.git 1300.6.5\n\n  if [ $f_res -eq 1 ]; then\n    pushd $CURRENT_BUILD_PROJECT_NAME &>/dev/null\n    INSTALLPREFIX=$TARGET_DIR ./build.sh\n    ./install.sh\n    popd &>/dev/null\n    build_success\n  fi\nfi\n\n## cctools and ld64 ##\n\nCCTOOLS_VERSION=986\nLINKER_VERSION=711\n\nget_sources \\\n  https://github.com/tpoechtrager/cctools-port.git \\\n  $CCTOOLS_VERSION-ld64-$LINKER_VERSION\n\nif [ $f_res -eq 1 ]; then\n  pushd $CURRENT_BUILD_PROJECT_NAME/cctools &>/dev/null\n  echo \"\"\n\n  CONFFLAGS=\"--prefix=$TARGET_DIR --target=x86_64-apple-$TARGET \"\n  if [ $NEED_TAPI_SUPPORT -eq 1 ]; then\n    CONFFLAGS+=\"--with-libtapi=$TARGET_DIR \"\n  fi\n  CONFFLAGS+=\"--with-libxar=$TARGET_DIR \"\n  [ -n \"$DISABLE_CLANG_AS\" ] && CONFFLAGS+=\"--disable-clang-as \"\n  [ -n \"$DISABLE_LTO_SUPPORT\" ] && CONFFLAGS+=\"--disable-lto-support \"\n  ./configure $CONFFLAGS\n  $MAKE -j$JOBS\n  $MAKE install -j$JOBS\n  popd &>/dev/null\nfi\n\n## Create Arch Symlinks ##\n\npushd $TARGET_DIR/bin &>/dev/null\nCCTOOLS=($(find . -name \"x86_64-apple-${TARGET}*\"))\nfunction create_arch_symlinks()\n{\n  local arch=$1\n  for CCTOOL in ${CCTOOLS[@]}; do\n    verbose_cmd create_symlink $CCTOOL $(echo \"$CCTOOL\" | $SED \"s/x86_64/$arch/g\")\n  done\n}\nif [ $X86_64H_SUPPORTED -eq 1 ]; then\n  create_arch_symlinks \"x86_64h\"\nfi\nif [ $I386_SUPPORTED -eq 1 ]; then\n  create_arch_symlinks \"i386\"\nfi\n\nif [ $ARM_SUPPORTED -eq 1 ]; then\n  create_arch_symlinks \"aarch64\"\n  create_arch_symlinks \"arm64\"\n  create_arch_symlinks \"arm64e\"\nfi\n# For unpatched dsymutil. There is currently no way around it.\ncreate_symlink x86_64-apple-$TARGET-lipo lipo\npopd &>/dev/null\n\n\n## MacPorts ##\n\npushd $TARGET_DIR/bin &>/dev/null\nrm -f osxcross-macports\ncp $BASE_DIR/tools/osxcross-macports osxcross-macports\ncreate_symlink osxcross-macports osxcross-mp\ncreate_symlink osxcross-macports omp\npopd &>/dev/null\n\n## Extract SDK and move it to $SDK_DIR ##\n\necho \"\"\nextract $SDK\n\nrm -rf $SDK_DIR/MacOSX$SDK_VERSION* 2>/dev/null\nif [ \"$(ls -l SDKs/*$SDK_VERSION* 2>/dev/null | wc -l | tr -d ' ')\" != \"0\" ]; then\n  mv -f SDKs/*$SDK_VERSION* $SDK_DIR\nelse\n  mv -f *OSX*$SDK_VERSION*sdk* $SDK_DIR\nfi\n\nif [ ! -d \"$SDK_DIR/MacOSX$SDK_VERSION.sdk\" ]; then\n  echo \"Broken SDK! '$SDK_DIR/MacOSX$SDK_VERSION.sdk' does not exist!\"\n  exit 1\nfi\n\n## Fix broken SDKs ##\n\npushd $SDK_DIR/MacOSX$SDK_VERSION*.sdk &>/dev/null\n# Remove troublesome libc++ IWYU mapping file that may cause compiler errors\n# https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/IWYUMappings.md\nrm -f usr/include/c++/v1/libcxx.imp\nset +e\nfiles=$(echo $BASE_DIR/oclang/quirks/*.h)\nfor file in $files; do\n  filename=$(basename $file)\n  if [ ! -f \"usr/include/$filename\" ]; then\n    rm -f usr/include/$filename # Broken symlink\n    cp $file usr/include\n  fi\ndone\nset -e\npopd &>/dev/null\n\npopd &>/dev/null\n\n## Wrapper ##\n\nbuild_msg \"wrapper\"\n\nOSXCROSS_CONF=\"$TARGET_DIR/bin/osxcross-conf\"\nOSXCROSS_ENV=\"$TARGET_DIR/bin/osxcross-env\"\nrm -f $OSXCROSS_CONF $OSXCROSS_ENV\n\nif [ \"$PLATFORM\" != \"Darwin\" ]; then\n  # libLTO.so\n  set +e\n  eval $(cat $BUILD_DIR/cctools*/cctools/config.log | grep LLVM_LIB_DIR | head -n1)\n  set -e\n  export LIBLTO_PATH=$LLVM_LIB_DIR\nfi\n\nexport VERSION\nexport TARGET\nexport BUILD_DIR\nexport OSX_VERSION_MIN\nexport LIBLTO_PATH\nexport LINKER_VERSION\nexport X86_64H_SUPPORTED\nexport I386_SUPPORTED\nexport ARM_SUPPORTED\nexport TOP_BUILD_SCRIPT=1\n\n$BASE_DIR/wrapper/build_wrapper.sh\n\necho \"\"\n\nif [ $(osxcross-cmp $SDK_VERSION \"<\" $OSX_VERSION_MIN) -eq 1 ]; then\n  echo \"OSX_VERSION_MIN must be <= SDK_VERSION\"\n  trap \"\" EXIT\n  exit 1\nelif [ $(osxcross-cmp $OSX_VERSION_MIN \"<\" 10.6) -eq 1  ]; then\n  echo \"OSX_VERSION_MIN must be >= 10.6\"\n  trap \"\" EXIT\n  exit 1\nfi\n\n## CMake ##\n\ncp -f \"$BASE_DIR/tools/toolchain.cmake\" \"$TARGET_DIR/\"\ncp -f \"$BASE_DIR/tools/osxcross-cmake\" \"$TARGET_DIR/bin/\"\n\nchmod 755 \"$TARGET_DIR/bin/osxcross-cmake\"\n\nif [ $I386_SUPPORTED -eq 1 ]; then\n  create_symlink osxcross-cmake \"$TARGET_DIR/bin/i386-apple-$TARGET-cmake\"\nfi\n\ncreate_symlink osxcross-cmake \"$TARGET_DIR/bin/x86_64-apple-$TARGET-cmake\"\n\nif [ $X86_64H_SUPPORTED -eq 1 ]; then\n  create_symlink osxcross-cmake \"$TARGET_DIR/bin/x86_64h-apple-$TARGET-cmake\"\nfi\n\nif [ $ARM_SUPPORTED -eq 1 ]; then\n  create_symlink osxcross-cmake \"$TARGET_DIR/bin/aarch64-apple-$TARGET-cmake\"\n  create_symlink osxcross-cmake \"$TARGET_DIR/bin/arm64-apple-$TARGET-cmake\"\n  create_symlink osxcross-cmake \"$TARGET_DIR/bin/arm64e-apple-$TARGET-cmake\"\nfi\n\n## Compiler test ##\n\nunset MACOSX_DEPLOYMENT_TARGET\n\nif [ $(osxcross-cmp $SDK_VERSION \">=\" 10.7) -eq 1 ]; then\n  pushd $SDK_DIR/MacOSX$SDK_VERSION.sdk &>/dev/null\n  if [ ! -f \"usr/include/c++/v1/vector\" ]; then\n    echo \"\"\n    echo -n \"Given SDK does not contain libc++ headers \"\n    echo \"(-stdlib=libc++ test may fail)\"\n    echo -n \"You may want to re-package your SDK using \"\n    echo \"'tools/gen_sdk_package.sh' on macOS\"\n  fi\n  if [ -f \"usr/include/c++/v1/__hash_table\" ]; then\n    if [ $(osxcross-cmp $SDK_VERSION \">=\" 10.7) -eq 1 ]; then\n    if [ $(osxcross-cmp $SDK_VERSION \"<=\" 10.12) -eq 1 ]; then\n      # https://github.com/tpoechtrager/osxcross/issues/171\n      echo \"SDK needs patching for libc++ hash table issue ...\"\n      patch -N -p1 -r /dev/null < $PATCH_DIR/libcxx__hash_table.patch || true\n    fi\n    fi\n  fi\n  if [ -f \"usr/include/Availability.h\" ]; then\n    if [ $(osxcross-cmp $SDK_VERSION \"==\" 10.15) -eq 1 ]; then\n      # 10.15 comes with a broken Availability.h header file\n      # which breaks building GCC\n      cat $PATCH_DIR/gcc_availability.h >> usr/include/Availability.h || true\n    fi\n  fi\n  popd &>/dev/null\n  echo \"\"\n  if [ $I386_SUPPORTED -eq 1 ]; then\n    test_compiler_cxx11 i386-apple-$TARGET-clang++ $BASE_DIR/oclang/test_libcxx.cpp\n  fi\n  test_compiler_cxx11 x86_64-apple-$TARGET-clang++ $BASE_DIR/oclang/test_libcxx.cpp\n  echo \"\"\nfi\n\nif [ $(osxcross-cmp $SDK_VERSION \">=\" 13.3) -eq 1 ]; then\n  CLANG_VERSION=$(echo \"__clang_major__ __clang_minor__ __clang_patchlevel__\" | \\\n                  xcrun clang -xc -E - | tail -n1 | tr ' ' '.')\n\n  if [ $(osxcross-cmp $CLANG_VERSION \">=\" 13.0) -eq 1 ]; then\n    echo \"Performing complex c++20 test ...\"\n    test_compiler_cxx2b x86_64-apple-$TARGET-clang++ $BASE_DIR/oclang/test_libcxx_complex.cpp\n    if [ $ARM_SUPPORTED -eq 1 ]; then\n      test_compiler_cxx2b arm64-apple-$TARGET-clang++ $BASE_DIR/oclang/test_libcxx_complex.cpp\n    fi\n    echo \"\"\n  else\n    echo \"Skipping complex c++20 test. Requires clang >= 13.0.\"\n  fi\nfi\n\nif [ $I386_SUPPORTED -eq 1 ]; then\n  test_compiler i386-apple-$TARGET-clang $BASE_DIR/oclang/test.c \"required\"\n  test_compiler i386-apple-$TARGET-clang++ $BASE_DIR/oclang/test.cpp \"required\"\n  echo \"\"\nfi\n\nif [ $X86_64H_SUPPORTED -eq 1 ]; then\n  test_compiler x86_64h-apple-$TARGET-clang $BASE_DIR/oclang/test.c\n  test_compiler x86_64h-apple-$TARGET-clang++ $BASE_DIR/oclang/test.cpp\n  echo \"\"\nfi\n\nif [ $ARM_SUPPORTED -eq 1 ]; then\n  test_compiler arm64-apple-$TARGET-clang $BASE_DIR/oclang/test.c\n  test_compiler arm64-apple-$TARGET-clang++ $BASE_DIR/oclang/test.cpp\n  echo \"\"\n\n  test_compiler arm64e-apple-$TARGET-clang $BASE_DIR/oclang/test.c\n  test_compiler arm64e-apple-$TARGET-clang++ $BASE_DIR/oclang/test.cpp\n  echo \"\"\nfi\n\ntest_compiler x86_64-apple-$TARGET-clang $BASE_DIR/oclang/test.c \"required\"\ntest_compiler x86_64-apple-$TARGET-clang++ $BASE_DIR/oclang/test.cpp \"required\"\n\necho \"\"\necho \"Do not forget to add\"\necho \"\"\necho -e \"\\x1B[32m${TARGET_DIR}/bin\\x1B[0m\"\necho \"\"\necho \"to your PATH variable.\"\necho \"\"\n\necho \"All done! Now you can use o32-clang(++) and o64-clang(++) like a normal compiler.\"\necho \"\"\necho \"Example usage:\"\necho \"\"\necho \"Example 1: CC=o32-clang ./configure --host=i386-apple-$TARGET\"\necho \"Example 2: CC=i386-apple-$TARGET-clang ./configure --host=i386-apple-$TARGET\"\necho \"Example 3: o64-clang -Wall test.c -o test\"\necho \"Example 4: x86_64-apple-$TARGET-strip -x test\"\necho \"\"\n\nif [ $ARM_SUPPORTED -eq 1 ]; then\n  echo \"!!! Use aarch64-apple-$TARGET-* instead of arm64-* when dealing with Automake !!!\"\n  echo \"!!! CC=aarch64-apple-$TARGET-clang ./configure --host=aarch64-apple-$TARGET !!!\"\n  echo \"!!! CC=\\\"aarch64-apple-$TARGET-clang -arch arm64e\\\" ./configure --host=aarch64-apple-$TARGET !!!\"\n  echo \"\"\nfi\n\n\nif [ $I386_SUPPORTED -eq 0 ]; then\n  echo \"Your SDK does not support i386 anymore.\"\n  echo \"Use <= 10.13 SDK if you rely on i386 support.\"\n  echo \"\"\nfi\n\nif [ $(osxcross-cmp $SDK_VERSION \">=\" 10.14) -eq 1 ]; then\n  echo \"Your SDK does not support libstdc++ anymore.\"\n  echo \"Use <= 10.13 SDK if you rely on libstdc++ support.\"\n  echo \"\"\nfi\n"
        },
        {
          "name": "build_apple_clang.sh",
          "type": "blob",
          "size": 0.2099609375,
          "content": "#!/usr/bin/env bash\n\n# Builds the Apple version of Clang/LLVM\n\npushd \"${0%/*}\" &>/dev/null\n\nif [ -z \"$CLANG_VERSION\" ]; then\n  CLANG_VERSION=17\nfi\n\nGITPROJECT=apple CLANG_VERSION=$CLANG_VERSION \\\n  ./build_clang.sh\n"
        },
        {
          "name": "build_binutils.sh",
          "type": "blob",
          "size": 1.583984375,
          "content": "#!/usr/bin/env bash\n#\n# Build and install the GNU binutils and the GNU Debugger (gdb) for\n# target macOS.\n#\n# You may want to run this script if you want to build software using\n# gcc. Please refer to the README.md for details.\n#\n\npushd \"${0%/*}\" &>/dev/null\n\nDESC=binutils\nUSESYSTEMCOMPILER=1\nsource tools/tools.sh\n\neval $(tools/osxcross_conf.sh)\n\n# binutils version to build\nif [ -z \"$BINUTILS_VERSION\" ]; then\n  BINUTILS_VERSION=2.32\nfi\n\n# gdb version to build\nif [ -z \"$GDB_VERSION\" ]; then\n  GDB_VERSION=8.3\nfi\n\n# architecture to target\nif [ -z \"$TARGET_ARCH\" ]; then\n  TARGET_ARCH=x86_64\nfi\n\n# mirror\nMIRROR=\"https://ftp.gnu.org/gnu\"\n\npushd $BUILD_DIR &>/dev/null\n\nfunction remove_locks()\n{\n  rm -rf $BUILD_DIR/have_binutils*\n}\n\nfunction build_and_install()\n{\n  if [ ! -f \"have_$1_$2_${TARGET}_${TARGET_ARCH}\" ]; then\n    pushd $TARBALL_DIR &>/dev/null\n    download \"$MIRROR/$1/$1-$2.tar.gz\"\n    popd &>/dev/null\n\n    echo \"cleaning up ...\"\n    rm -rf $1* 2>/dev/null\n\n    extract \"$TARBALL_DIR/$1-$2.tar.gz\" 1\n\n    pushd $1*$2* &>/dev/null\n    mkdir -p build\n    pushd build &>/dev/null\n\n    ../configure \\\n      --target=$TARGET_ARCH-apple-$TARGET \\\n      --program-prefix=$TARGET_ARCH-apple-$TARGET- \\\n      --prefix=$TARGET_DIR/binutils \\\n      --disable-nls \\\n      --disable-werror\n\n    $MAKE -j$JOBS\n    $MAKE install\n\n    popd &>/dev/null\n    popd &>/dev/null\n    touch \"have_$1_$2_${TARGET}_${TARGET_ARCH}\"\n  fi\n}\n\nsource $BASE_DIR/tools/trap_exit.sh\n\nbuild_and_install binutils $BINUTILS_VERSION\nbuild_and_install gdb $GDB_VERSION\n\necho \"\"\necho \"installed binutils and gdb to $TARGET_DIR/binutils\"\necho \"\"\n"
        },
        {
          "name": "build_clang.sh",
          "type": "blob",
          "size": 6.4228515625,
          "content": "#!/usr/bin/env bash\n#\n# Build and install Clang/LLVM, using `gcc`.\n#\n# You only need to run this if your distribution does not provide\n# clang - or if you want to build your own version from a recent\n# source tree.\n#\n\npushd \"${0%/*}\" &>/dev/null\n\nDESC=clang\nUSESYSTEMCOMPILER=1\n\nsource tools/tools.sh\n\nmkdir -p $BUILD_DIR\n\nsource $BASE_DIR/tools/trap_exit.sh\n\nif [ -z \"$CLANG_VERSION\" ]; then\n  CLANG_VERSION=18.1.8\nfi\n\nif [ -z \"$INSTALLPREFIX\" ]; then\n  INSTALLPREFIX=\"/usr/local\"\nfi\n\n# acceptable values are llvm or apple\nif [ -z \"$GITPROJECT\" ]; then\n  GITPROJECT=\"llvm\"\nfi\n\nrequire cmake\nrequire curl\n\nCLANG_LLVM_PKG=\"\"\n\nfunction set_package_link()\n{\n  pushd $TARBALL_DIR &>/dev/null\n  \n  # Official LLVM project download URLs look like:\n  # https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-10.0.1.zip\n  \n  # Apple LLVM project download URLs look like:\n  # https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20200108.zip\n  # where the branch-to-major-version lookup is the below:\n  # apple/stable/20210107 = 12\n  # apple/stable/20200714 = 11\n  # apple/stable/20200108 = 10\n  # apple/stable/20190619 = 9\n  # apple/stable/20190104 = 8\n  # apple/stable/20180801 = 7\n  \n  if [ $GITPROJECT == \"llvm\" ]; then\n    # with official LLVM we just pass the version straight into the URL\n    CLANG_LLVM_PKG=\"https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$CLANG_VERSION.zip\"\n  elif [ $GITPROJECT == \"apple\" ]; then\n    # with Apple LLVM we only get each major version as a stable branch so we just compare the input major version\n    CLANG_VERSION_PARTS=(${CLANG_VERSION//./ })\n    case ${CLANG_VERSION_PARTS[0]} in\n\n      17) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/stable/20230725.zip\" ;;\n      16) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/stable/20221013.zip\" ;;\n      15) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/stable/20220421.zip\" ;;\n      14) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/stable/20211026.zip\" ;;\n      13) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/stable/20210726.zip\" ;;\n      12) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20210107.zip\" ;;\n      11) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20200714.zip\" ;;\n      10) CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20200108.zip\" ;;\n      9)  CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20190619.zip\" ;;\n      8)  CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20190104.zip\" ;;\n      7)  CLANG_LLVM_PKG=\"https://github.com/apple/llvm-project/archive/refs/heads/apple/stable/20180801.zip\" ;;\n\n      *)\n        echo \"Unknown Apple Clang version $CLANG_VERSION!\" 1>&2\n        exit 1\n        ;;\n    esac\n  fi\n  \n  # after we generate the URL string above we need to actually check it works\n  if [ ! -f $(basename $CLANG_LLVM_PKG) ] && [ $(curl --head -L $CLANG_LLVM_PKG -o /dev/stderr -w \"%{http_code}\" 2> /dev/null) -ne 200 ]; then\n    echo \"Release $CLANG_VERSION not found in $GITPROJECT repo!\" 1>&2\n    exit 1\n  fi\n\n  popd &>/dev/null #$TARBALL_DIR\n}\n\nset_package_link\n\nif [ -z \"$CLANG_LLVM_PKG\" ]; then\n  echo \"Release $CLANG_VERSION not found!\" 1>&2\n  exit 1\nfi\n\necho \"Building Clang/LLVM $GITPROJECT-$CLANG_VERSION (this may take a long time).\"\necho \"Installation Prefix: $INSTALLPREFIX [INSTALLPREFIX=<Prefix>]\"\n\necho \"\"\n\nif [ -z \"$UNATTENDED\" ]; then\n  if prompt \"Perform two stage build? (recommended)\"; then\n    echo \"Enabling two stage build ...\"\n    ENABLE_BOOTSTRAP=1\n  else\n    echo \"Disabling two stage build ...\"\n  fi\n\n  echo \"\"\n  read -p \"Press enter to start building.\"\n  echo \"\"\nelse\n  ENABLE_BOOTSTRAP=1\nfi\n\n# download the GitHub repo as a ZIP file - but only if it doesn't exist already\npushd $TARBALL_DIR &>/dev/null\n\nif [ ! -f $(basename $CLANG_LLVM_PKG) ]; then\n  download $CLANG_LLVM_PKG\nfi\n\npopd &>/dev/null #$TARBALL_DIR\n\n# extract ZIP\npushd $BUILD_DIR &>/dev/null\n\nrm -rf \"clang-$CLANG_VERSION\"\nmkdir \"clang-$CLANG_VERSION\"\npushd \"clang-$CLANG_VERSION\" &>/dev/null\n\necho \"extracting ...\"\nextract $TARBALL_DIR/$(basename $CLANG_LLVM_PKG)\n\n# Various Buildfixes\n\nif ([[ $CLANG_VERSION == 15* ]] || [[ $CLANG_VERSION == 14* ]] ||\n    [[ $CLANG_VERSION == 13* ]] || [[ $CLANG_VERSION == 12* ]] ||\n    [[ $CLANG_VERSION == 11* ]] || [[ $CLANG_VERSION == 10* ]]); then\n  $SED -i 's/#include <string>/#include <string>\\\n\\ #include <cstdint>/' *llvm*/llvm/include/llvm/Support/Signals.h\nfi\n\nif ([[ $CLANG_VERSION == 11* ]] || [[ $CLANG_VERSION == 10* ]] ||\n    [[ $CLANG_VERSION == 9* ]] || [[ $CLANG_VERSION == 8* ]]); then\n  $SED -i 's/#include <vector>/#include <vector>\\\n\\ #include <limits>/' *llvm*/llvm/utils/benchmark/src/benchmark_register.h\nfi\n\nif ([[ $CLANG_VERSION == 9* ]] || [[ $CLANG_VERSION == 8* ]]); then\n  $SED -i 's/#include <array>/#include <array>\\\n\\ #include <cstdint>\\\n\\ #include <string>/' *llvm*/llvm/include/llvm/Demangle/MicrosoftDemangleNodes.h\nfi\n\nfunction build()\n{\n  stage=$1\n  mkdir -p $stage\n  pushd $stage &>/dev/null\n  cmake ../*llvm*/llvm \\\n    -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_ENABLE_ASSERTIONS=OFF \\\n    -DLLVM_ENABLE_PROJECTS=\"clang\" \\\n    -DLLVM_TARGETS_TO_BUILD=\"X86;AArch64;ARM\" \\\n    -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=1\n  $MAKE $2 -j $JOBS\n  popd &>/dev/null\n}\n\nexport CFLAGS=\"\"\nexport CXXFLAGS=\"\"\n\nif [ -z \"$PORTABLE\" ]; then\n  export CFLAGS+=\" -march=native\"\n  export CXXFLAGS+=\" -march=native\"\nfi\n\n# Silence warnings to get a cleaner build state output\nif [ -z \"$ENABLE_COMPILER_WARNINGS\" ]; then\n  export CFLAGS+=\" -w\"\n  export CXXFLAGS+=\" -w\"\nfi\n\nif [ -z \"$ENABLE_BOOTSTRAP\" ]; then\n  build build\nelse\n  build build_stage1 clang\n\n  export CC=$PWD/build_stage1/bin/clang\n  export CXX=$PWD/build_stage1/bin/clang++\n\n  build build_stage2\n\n  if [ -n \"$ENABLE_FULL_BOOTSTRAP\" ]; then\n    CC=$PWD/build_stage2/bin/clang \\\n    CXX=$PWD/build_stage2/bin/clang++ \\\n    build build_stage3\n  fi\nfi\n\n# install, but only if it is globally enabled\nif [ -z \"$ENABLE_CLANG_INSTALL\" ]; then\n  echo \"\"\n  echo \"Done!\"\n  echo \"\"\n  echo -n \"cd into '$BUILD_DIR/clang-$CLANG_VERSION/$stage' and type 'make install' to install \"\n  echo \"clang/llvm to '$INSTALLPREFIX'\"\n  echo \"\"\nelse\n  $MAKE -C \"$BUILD_DIR/clang-$CLANG_VERSION/$stage\" install -j $JOBS VERBOSE=1\n  echo \"\"\n  echo \"Done!\"\n  echo \"\"\nfi\n"
        },
        {
          "name": "build_compiler_rt.sh",
          "type": "blob",
          "size": 11.2685546875,
          "content": "#!/usr/bin/env bash\n#\n# Build and install the \"compiler-rt\" runtime library.\n#\n# This requires that you already finished `build.sh`.\n# Please refer to README.COMPILER-RT.md for details.\n#\n\npushd \"${0%/*}\" &>/dev/null\n\nDESC=compiler-rt\nsource tools/tools.sh\neval $(tools/osxcross_conf.sh)\n\nif [ $PLATFORM == \"Darwin\" ]; then\n  exit 1\nfi\n\nCLANG_VERSION=$(echo \"__clang_major__ __clang_minor__ __clang_patchlevel__\" | \\\n xcrun clang -xc -E - | tail -n1 | tr ' ' '.')\n\n# Drop patch level for <= 3.3.\nif [ $(osxcross-cmp $CLANG_VERSION \"<=\" 3.3) -eq 1 ]; then\n  CLANG_VERSION=$(echo $CLANG_VERSION | tr '.' ' ' |\n                  awk '{print $1, $2}' | tr ' ' '.')\nfi\n\nCLANG_LIB_DIR=$(clang -print-search-dirs | grep \"libraries: =\" | \\\n                tr '=' ' ' | tr ':' ' ' | awk '{print $2}')\n\nVERSION=$(echo \"${CLANG_LIB_DIR}\" | tr '/' '\\n' | tail -n1)\nCLANG_INCLUDE_DIR=\"${CLANG_LIB_DIR}/include\"\nCLANG_DARWIN_LIB_DIR=\"${CLANG_LIB_DIR}/lib/darwin\"\n\nUSE_CMAKE=0\n\ncase $CLANG_VERSION in\n  3.2* ) BRANCH=release/3.2.x ;;\n  3.3* ) BRANCH=release/3.3.x ;;\n  3.4* ) BRANCH=release/3.4.x ;;\n  3.5* ) BRANCH=release/3.5.x ;;\n  3.6* ) BRANCH=release/3.6.x ;;\n  3.7* ) BRANCH=release/3.7.x ;;\n  3.8* ) BRANCH=release/3.8.x;   USE_CMAKE=1; ;;\n  3.9* ) BRANCH=release/3.9.x;   USE_CMAKE=1; ;;\n  4.0* ) BRANCH=release/4.x;     USE_CMAKE=1; ;;\n  5.0* ) BRANCH=release/5.x;     USE_CMAKE=1; ;;\n  6.0* ) BRANCH=release/6.x;     USE_CMAKE=1; ;;\n  7.*  ) BRANCH=release/7.x;     USE_CMAKE=1; ;;\n  8.*  ) BRANCH=release/8.x;     USE_CMAKE=1; ;;\n  9.*  ) BRANCH=release/9.x;     USE_CMAKE=1; ;;\n  10.* ) BRANCH=release/10.x;    USE_CMAKE=1; ;;\n  11.* ) BRANCH=release/11.x;    USE_CMAKE=1; ;;\n  12.* ) BRANCH=release/12.x;    USE_CMAKE=1; ;;\n  13.* ) BRANCH=release/13.x;    USE_CMAKE=1; ;;\n  14.* ) BRANCH=release/14.x;    USE_CMAKE=1; ;;\n  15.* ) BRANCH=release/15.x;    USE_CMAKE=1; ;;\n  16.* ) BRANCH=release/16.x;    USE_CMAKE=1; ;;\n  17.* ) BRANCH=release/17.x;    USE_CMAKE=1; ;;\n  18.* ) BRANCH=main;            USE_CMAKE=1; ;; # Does not build with release/18.x\n  19.* ) BRANCH=main;            USE_CMAKE=1; ;;\n     * ) echo \"Unsupported Clang version, must be >= 3.2 and <= 19.0\" 1>&2; exit 1;\nesac\n\nif [ $(osxcross-cmp $CLANG_VERSION \">=\" 3.5) -eq 1 ]; then\n  export MACOSX_DEPLOYMENT_TARGET=10.8 # x86_64h\nelse\n  export MACOSX_DEPLOYMENT_TARGET=10.4\nfi\n\nif [ $(osxcross-cmp $MACOSX_DEPLOYMENT_TARGET \">\" \\\n                    $SDK_VERSION) -eq 1 ];\nthen\n  echo \">= $MACOSX_DEPLOYMENT_TARGET SDK required\" 1>&2\n  exit 1\nfi\n\nHAVE_OS_LOCK=0\n\nif echo \"#include <os/lock.h>\" | xcrun clang -E - &>/dev/null; then\n  HAVE_OS_LOCK=1\nfi\n\nexport OSXCROSS_NO_10_5_DEPRECATION_WARNING=1\n\nmkdir -p $BUILD_DIR\n\npushd $BUILD_DIR &>/dev/null\n\n# Check if a build project for compiler-rt already exists.\n# Delete any directory that is called compiler-rt, but is not a build project.\nif [ -d \"$BUILD_DIR/compiler-rt\" ] && [ ! -d \"$BUILD_DIR/compiler_rt/compiler-rt\" ]; then\n    rm -rf \"$BUILD_DIR/compiler-rt\"\nfi\n\nget_sources https://github.com/llvm/llvm-project.git $BRANCH \"compiler-rt\"\n\nif [ $f_res -eq 1 ]; then\n  pushd \"$CURRENT_BUILD_PROJECT_NAME/compiler-rt\" &>/dev/null\n\n  if [ $(osxcross-cmp $SDK_VERSION \"<=\" 10.11) -eq 1 ]; then\n    # https://github.com/tpoechtrager/osxcross/issues/178\n    patch -p1 < $PATCH_DIR/compiler-rt_clock-gettime.patch\n  fi\n\n  EXTRA_MAKE_FLAGS=\"\"\n  if [ -n \"$OCDEBUG\" ]; then\n    EXTRA_MAKE_FLAGS+=\"VERBOSE=1 \"\n  fi\n\n  if [ $USE_CMAKE -eq 1 ]; then\n\n    ### CMAKE ###\n\n    $SED -i 's/COMMAND xcodebuild -version -sdk ${sdk_name}.internal Path/'\\\n\\ \\ \\ \\ \\ \\ \\ 'COMMAND xcrun -sdk ${sdk_name}.internal --show-sdk-path/g' \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i 's/COMMAND xcodebuild -version -sdk ${sdk_name} Path/'\\\n\\ \\ \\ \\ \\ \\ \\ 'COMMAND xcrun -sdk ${sdk_name} --show-sdk-path/g' \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i 's/COMMAND xcodebuild -version -sdk ${sdk_name}.internal SDKVersion/'\\\n\\ \\ \\ \\ \\ \\ \\ 'COMMAND xcrun -sdk ${sdk_name}.internal --show-sdk-version/g' \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i 's/COMMAND xcodebuild -version -sdk ${sdk_name}.internal SDKVersion/'\\\n\\ \\ \\ \\ \\ \\ \\ 'COMMAND xcrun -sdk ${sdk_name} --show-sdk-version/g' \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i \"s/COMMAND lipo /COMMAND xcrun lipo /g\" \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i \"s/COMMAND ld /COMMAND xcrun ld /g\" \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i \"s/COMMAND sysctl hw.cputype/COMMAND true/g\" \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i \"s/COMMAND sysctl hw.cpusubtype/COMMAND true/g\" \\\n      cmake/Modules/CompilerRTDarwinUtils.cmake\n\n    $SED -i \"s/COMMAND codesign /COMMAND true /g\" \\\n      cmake/Modules/AddCompilerRT.cmake\n\n    $SED -i 's/${CMAKE_COMMAND} -E ${COMPILER_RT_LINK_OR_COPY}/ln -sf/g' \\\n      lib/builtins/CMakeLists.txt\n\n    if [ -f \"lib/orc/CMakeLists.txt\" ]; then\n      $SED -i 's/list(APPEND ORC_CFLAGS -I${DIR})//g' \\\n        lib/orc/CMakeLists.txt\n    fi\n\n    if [ $HAVE_OS_LOCK -eq 0 ]; then\n      $SED -i \"s/COMPILER_RT_HAS_TSAN TRUE/COMPILER_RT_HAS_TSAN FALSE/g\" \\\n        cmake/config-ix.cmake\n    fi\n\n    function build\n    {\n      local arch=$1\n      local build_dir=\"build\"\n      local extra_cmake_flags=\"\"\n\n      if [ -n \"$arch\" ]; then\n        build_dir+=\"_$arch\"\n\n        extra_cmake_flags+=\"-DDARWIN_osx_ARCHS=$arch \"\n        extra_cmake_flags+=\"-DDARWIN_osx_BUILTIN_ARCHS=$arch \"\n\n        if [ $arch == \"arm64\" ] || [ $arch == \"arm64e\" ]; then\n          # https://github.com/tpoechtrager/osxcross/issues/259\n          extra_cmake_flags+=\"-DCOMPILER_RT_BUILD_SANITIZERS=OFF \"\n          extra_cmake_flags+=\"-DCOMPILER_RT_BUILD_XRAY=OFF \"\n        fi\n\n        echo \"\"\n        echo \"Building for arch $arch ...\"\n        echo \"\"\n      fi\n\n      mkdir $build_dir\n      pushd $build_dir &>/dev/null\n\n      CC=$(xcrun -f clang) CXX=$(xcrun -f clang++) $CMAKE .. \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_SYSTEM_NAME=Darwin \\\n        -DCOMPILER_RT_ENABLE_IOS=OFF \\\n        -DCMAKE_LIPO=$(xcrun -f lipo) \\\n        -DCMAKE_OSX_SYSROOT=$(xcrun --show-sdk-path) \\\n        -DCMAKE_AR=$(xcrun -f ar) \\\n        $extra_cmake_flags\n\n      $MAKE -j $JOBS $EXTRA_MAKE_FLAGS\n\n      popd &>/dev/null\n    }\n\n    if [ $(osxcross-cmp $SDK_VERSION \">=\" 11.0) -eq 1 ] &&\n       [ $(osxcross-cmp $CLANG_VERSION \">=\" 4.0) -eq 1 ]; then\n      # https://github.com/tpoechtrager/osxcross/issues/258\n      # https://github.com/tpoechtrager/osxcross/issues/286\n\n      function check_archs\n      {\n        tmp=$(mktemp -d)\n        [ -z \"$tmp\" ] && exit 1\n        pushd $tmp &>/dev/null\n\n        for arch in $*; do\n          if echo \"int main(){}\" | xcrun clang -arch $arch -xc -o test - &>/dev/null; then\n            rm test\n            [ -n \"$ARCHS\" ] && ARCHS+=\" \"\n            ARCHS+=\"$arch\"\n          fi\n        done\n\n        popd &>/dev/null\n        rmdir $tmp\n      }\n\n      ARCHS=\"\"\n      check_archs i386 x86_64 x86_64h arm64 arm64e\n\n      if [ -z \"$ARCHS\" ]; then\n        echo \"Compiler does not seem to work\"\n        exit 1\n      fi\n\n      echo \"\"\n      echo \"Building for archs $ARCHS ...\"\n      echo \"\"\n\n      if [ -z \"$DISABLE_PARALLEL_ARCH_BUILD\" ] && [ $JOBS -gt 2 ]; then\n        build_pids=\"\";\n        jobs_per_build_job=$(awk \"BEGIN{print int($JOBS/$(echo $ARCHS | wc -w)+0.5)}\")\n        ((jobs_per_build_job=jobs_per_build_job+1))\n\n        for arch in $ARCHS; do\n          JOBS=$jobs_per_build_job build $arch &\n          build_pids+=\" $!\"\n        done\n\n        for pid in $build_pids; do\n          wait $pid || {\n            echo \"\"\n            echo \"Build failed!\"\n            echo \"Use DISABLE_PARALLEL_ARCH_BUILD=1 to disable parallel building of architectures\"\n            echo \"\"\n            exit 1\n          }\n        done\n      else\n        for arch in $ARCHS; do\n          build $arch\n        done\n      fi\n\n      arch1=$(echo $ARCHS | awk '{print $1}')\n\n      for file in $(ls build_$arch1/lib/darwin/); do\n        libs=\"\"\n\n        for arch in $ARCHS; do\n          lib=\"build_$arch/lib/darwin/$file\"\n          [ -n \"$libs\" ] && libs+=\" \"\n          if [ -f \"$lib\" ]; then\n            libs+=\"$lib\"\n          fi\n        done\n\n        xcrun lipo -create $libs -output build_$arch1/lib/darwin/$file.lipo\n        rm build_$arch1/lib/darwin/$file\n        mv build_$arch1/lib/darwin/$file.lipo build_$arch1/lib/darwin/$file\n      done\n\n      create_symlink build_$arch1 build\n    else\n      build\n    fi\n\n    ### CMAKE END ###\n\n  else\n\n    ### MAKE ###\n\n    $SED -i \"s/Configs += ios//g\" make/platform/clang_darwin.mk\n    $SED -i \"s/Configs += cc_kext_ios5//g\" make/platform/clang_darwin.mk\n    $SED -i \"s/Configs += profile_ios//g\" make/platform/clang_darwin.mk\n    $SED -i \"s/Configs += asan_iossim_dynamic//g\" make/platform/clang_darwin.mk\n\n    # Unbreak the -Werror build.\n    if [ -f lib/asan/asan_mac.h ]; then\n      $SED -i \"s/ASAN__MAC_H/ASAN_MAC_H/g\" lib/asan/asan_mac.h\n    fi\n\n    EXTRA_MAKE_FLAGS+=\"LIPO=\\\"$(xcrun -f lipo)\\\"\"\n\n    if [ $(osxcross-cmp $CLANG_VERSION \"<=\" 3.3) -eq 1 ]; then\n      EXTRA_MAKE_FLAGS+=\" AR=\\\"$(xcrun -f ar)\\\"\"\n      EXTRA_MAKE_FLAGS+=\" RANLIB=\\\"$(xcrun -f ranlib)\\\"\"\n      EXTRA_MAKE_FLAGS+=\" CC=\\\"$(xcrun -f clang)\\\"\"\n    fi\n\n    # Must eval here because of the spaces in EXTRA_MAKE_FLAGS.\n\n    eval \"$MAKE clang_darwin $EXTRA_MAKE_FLAGS -j $JOBS\"\n\n    ### MAKE END ###\n\n  fi\n\n  build_success\nfi\n\n# We must re-build every time. git clean -fdx\n# removes the libraries.\nrm -f $BUILD_DIR/.compiler-rt_build_complete\n\n\n# Installation. Can be either automated (ENABLE_COMPILER_RT_INSTALL) or will\n# print the commands that the user should run manually.\n\nfunction print_or_run() {\n  if [ -z \"$ENABLE_COMPILER_RT_INSTALL\" ]; then\n    echo \"$@\"\n  else\n    $@\n  fi\n}\n\nmkdir -p ${CLANG_INCLUDE_DIR} && \\\n  touch ${CLANG_INCLUDE_DIR} 2>/dev/null && ENABLE_COMPILER_RT_INSTALL=1\n\necho \"\"\necho \"\"\necho \"\"\nif [ -z \"$ENABLE_COMPILER_RT_INSTALL\" ]; then\n  echo \"Please run the following commands by hand to install compiler-rt:\"\nelse\n  echo \"Installing compiler-rt headers and libraries to the following paths:\"\n  echo \"  ${CLANG_INCLUDE_DIR}\"\n  echo \"  ${CLANG_DARWIN_LIB_DIR}\"\nfi\necho \"\"\n\nprint_or_run mkdir -p ${CLANG_INCLUDE_DIR}\nprint_or_run mkdir -p ${CLANG_DARWIN_LIB_DIR}\nprint_or_run cp -rv $BUILD_DIR/compiler-rt/compiler-rt/include/sanitizer ${CLANG_INCLUDE_DIR}\n\nif [ $USE_CMAKE -eq 1 ]; then\n\n  ### CMAKE ###\n\n  print_or_run cp -v $BUILD_DIR/compiler-rt/compiler-rt/build/lib/darwin/*.a ${CLANG_DARWIN_LIB_DIR}\n  print_or_run cp -v $BUILD_DIR/compiler-rt/compiler-rt/build/lib/darwin/*.dylib ${CLANG_DARWIN_LIB_DIR}\n\n  ### CMAKE END ###\n\nelse\n\n  ### MAKE ###\n\n  pushd \"clang_darwin\" &>/dev/null\n\n  function print_install_command() {\n    if [ -f \"$1\" ]; then\n      print_or_run cp $PWD/compiler-rt/$1 ${CLANG_DARWIN_LIB_DIR}/$2\n    fi\n  }\n\n  print_install_command \"osx/libcompiler_rt.a\"         \"libclang_rt.osx.a\"\n  print_install_command \"10.4/libcompiler_rt.a\"        \"libclang_rt.10.4.a\"\n  print_install_command \"eprintf/libcompiler_rt.a\"     \"libclang_rt.eprintf.a\"\n  print_install_command \"cc_kext/libcompiler_rt.a\"     \"libclang_rt.cc_kext.a\"\n  print_install_command \"profile_osx/libcompiler_rt.a\" \"libclang_rt.profile_osx.a\"\n\n  print_install_command \"ubsan_osx_dynamic/libcompiler_rt.dylib\" \\\n    \"libclang_rt.ubsan_osx_dynamic.dylib\"\n\n  print_install_command \"asan_osx_dynamic/libcompiler_rt.dylib\" \\\n    \"libclang_rt.asan_osx_dynamic.dylib\"\n\n  popd &>/dev/null\n\n  ### MAKE END ###\n\nfi\n\n\necho \"\"\n\n"
        },
        {
          "name": "build_gcc.sh",
          "type": "blob",
          "size": 5.6708984375,
          "content": "#!/usr/bin/env bash\n#\n# Build and install gcc/gcc++ as a cross-compiler with target OSX,\n# using `clang`.\n#\n# You may want to run this script if you want to build software using\n# gcc. Please refer to the README.md for details.\n#\n\npushd \"${0%/*}\" &>/dev/null\n\nunset LIBRARY_PATH\n\nDESC=gcc\nUSESYSTEMCOMPILER=1\nsource tools/tools.sh\n\n# GCC version to build\n# (<4.7 will not work properly with libc++)\nif [ -z \"$GCC_VERSION\" ]; then\n  GCC_VERSION=13.2.0\n  #GCC_VERSION=5-20200228 # snapshot\nfi\n\nif [ $(osxcross-cmp $OSX_VERSION_MIN '<=' 10.5) -eq 1 ]; then\n  echo \"You must build OSXCross with OSX_VERSION_MIN >= 10.6\" 2>&1\n  exit 1\nfi\n\n# GCC mirror\n# Official GNU \"ftp\" doesn't have GCC snapshots\nGCC_MIRROR=\"https://ftp.gnu.org/pub/gnu/gcc\"\nGCC_MIRROR_WITH_SNAPSHOTS=\"https://mirror.koddos.net/gcc\"\n\npushd $BUILD_DIR &>/dev/null\n\nfunction remove_locks()\n{\n  rm -rf $BUILD_DIR/have_gcc*\n}\n\nsource $BASE_DIR/tools/trap_exit.sh\n\nif [ ! -f \"have_gcc_${GCC_VERSION}_${TARGET}\" ]; then\n\npushd $TARBALL_DIR &>/dev/null\nif [[ $GCC_VERSION != *-* ]]; then\n  download \"$GCC_MIRROR/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\"\nelse\n  download \"$GCC_MIRROR_WITH_SNAPSHOTS/snapshots/$GCC_VERSION/gcc-$GCC_VERSION.tar.xz\"\nfi\npopd &>/dev/null\n\necho \"cleaning up ...\"\nrm -rf gcc* 2>/dev/null\n\nextract \"$TARBALL_DIR/gcc-$GCC_VERSION.tar.xz\"\necho \"\"\n\npushd gcc*$GCC_VERSION* &>/dev/null\n\nrm -f $TARGET_DIR/bin/*-gcc*\nrm -f $TARGET_DIR/bin/*-g++*\n\nif [ $(osxcross-cmp $GCC_VERSION '>' 5.0.0) -eq 1 ] &&\n   [ $(osxcross-cmp $GCC_VERSION '<' 5.3.0) -eq 1 ]; then\n  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66035\n  patch -p1 < $PATCH_DIR/gcc-pr66035.patch\nfi\n\nif [ $(osxcross-cmp $GCC_VERSION '>=' 6.1.0) -eq 1 ] &&\n   [ $(osxcross-cmp $GCC_VERSION '<=' 6.3.0) -eq 1 ]; then\n  # https://gcc.gnu.org/ml/gcc-patches/2016-09/msg00129.html\n  patch -p1 < $PATCH_DIR/gcc-6-buildfix.patch\nfi\n\nif [ $(osxcross-cmp $GCC_VERSION '==' 6.3.0) -eq 1 ]; then\n  # https://gcc.gnu.org/viewcvs/gcc/trunk/gcc/config/darwin-driver.c?r1=244010&r2=244009&pathrev=244010\n  patch -p1 < $PATCH_DIR/darwin-driver.c.patch\nfi\n\nif [ $(osxcross-cmp $SDK_VERSION '>=' 10.14) -eq 1 ] &&\n   [ $(osxcross-cmp $GCC_VERSION '<' 9.0.0) -eq 1 ]; then\n  files_to_patch=(\n    libsanitizer/asan/asan_mac.cc\n    libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc\n    libsanitizer/sanitizer_common/sanitizer_posix.cc\n    libsanitizer/sanitizer_common/sanitizer_mac.cc\n    gcc/ada/init.c\n    gcc/config/darwin-driver.c\n  )\n\n  for file in ${files_to_patch[*]}; do\n    if [ -f $file ]; then\n      echo \"patching $PWD/$file\"\n      $SED -i 's/#include <sys\\/sysctl.h>/#define _Atomic volatile\\n#include <sys\\/sysctl.h>\\n#undef _Atomic/g' $file\n      $SED -i 's/#include <sys\\/mount.h>/#define _Atomic volatile\\n#include <sys\\/mount.h>\\n#undef _Atomic/g' $file\n    fi\n  done\n\n  echo \"\"\nfi\n\n\nmkdir -p build\npushd build &>/dev/null\n\nif [[ $PLATFORM == *BSD ]]; then\n  export CPATH=\"/usr/local/include:/usr/pkg/include:$CPATH\"\n  export LDFLAGS=\"-L/usr/local/lib -L/usr/pkg/lib $LDFLAGS\"\n  export LD_LIBRARY_PATH=\"/usr/local/lib:/usr/pkg/lib:$LD_LIBRARY_PATH\"\nelif [ \"$PLATFORM\" == \"Darwin\" ]; then\n  export CPATH=\"/opt/local/include:$CPATH\"\n  export LDFLAGS=\"-L/opt/local/lib $LDFLAGS\"\n  export LD_LIBRARY_PATH=\"/opt/local/lib:$LD_LIBRARY_PATH\"\nfi\n\nEXTRACONFFLAGS=\"\"\n\nif [ \"$PLATFORM\" != \"Darwin\" ]; then\n  EXTRACONFFLAGS+=\"--with-ld=$TARGET_DIR/bin/x86_64-apple-$TARGET-ld \"\n  EXTRACONFFLAGS+=\"--with-as=$TARGET_DIR/bin/x86_64-apple-$TARGET-as \"\nfi\n\nLANGS=\"c,c++,objc,obj-c++\"\n\nif [ -n \"$ENABLE_FORTRAN\" ]; then\n  LANGS+=\",fortran\"\nfi\n\nif [ $(osxcross-cmp $SDK_VERSION \"<=\" 10.13) -eq 1 ]; then\n  EXTRACONFFLAGS+=\"--with-multilib-list=m32,m64 --enable-multilib \"\nelse\n  EXTRACONFFLAGS+=\"--disable-multilib \"\nfi\n\n../configure \\\n  --target=x86_64-apple-$TARGET \\\n  --with-sysroot=$SDK \\\n  --disable-nls \\\n  --enable-languages=$LANGS \\\n  --without-headers \\\n  --enable-lto \\\n  --enable-checking=release \\\n  --disable-libstdcxx-pch \\\n  --prefix=$TARGET_DIR \\\n  --with-system-zlib \\\n  $EXTRACONFFLAGS\n\n$MAKE -j$JOBS\n$MAKE install\n\nGCC_VERSION=`echo $GCC_VERSION | tr '-' ' ' |  awk '{print $1}'`\n\npushd $TARGET_DIR/x86_64-apple-$TARGET/include &>/dev/null\npushd c++/${GCC_VERSION}* &>/dev/null\n\ncat $PATCH_DIR/libstdcxx.patch | \\\n  $SED \"s/darwin13/$TARGET/g\" | \\\n  patch -p0 -l &>/dev/null || true\n\npopd &>/dev/null\npopd &>/dev/null\n\npopd &>/dev/null # build\npopd &>/dev/null # gcc\n\ntouch \"have_gcc_${GCC_VERSION}_${TARGET}\"\n\nfi # have gcc\n\npopd &>/dev/null # build dir\n\nunset USESYSTEMCOMPILER\nsource tools/tools.sh\n\npushd $TARGET_DIR/bin &>/dev/null\n\nif [ ! -f i386-apple-$TARGET-base-gcc ]; then\n  mv x86_64-apple-$TARGET-gcc \\\n    x86_64-apple-$TARGET-base-gcc\n\n  mv x86_64-apple-$TARGET-g++ \\\n    x86_64-apple-$TARGET-base-g++\n\n  if [ $(osxcross-cmp $SDK_VERSION \"<=\" 10.13) -eq 1 ]; then\n    create_symlink x86_64-apple-$TARGET-base-gcc \\\n                   i386-apple-$TARGET-base-gcc\n\n    create_symlink x86_64-apple-$TARGET-base-g++ \\\n                   i386-apple-$TARGET-base-g++\n  fi\nfi\n\necho \"compiling wrapper ...\"\n\nTARGETCOMPILER=gcc \\\n  $BASE_DIR/wrapper/build_wrapper.sh\n\npopd &>/dev/null # wrapper dir\n\necho \"\"\n\nif [ $(osxcross-cmp $SDK_VERSION \"<=\" 10.13) -eq 1 ]; then\n  test_compiler o32-gcc $BASE_DIR/oclang/test.c\n  test_compiler o32-g++ $BASE_DIR/oclang/test.cpp\nfi\n\ntest_compiler o64-gcc $BASE_DIR/oclang/test.c\ntest_compiler o64-g++ $BASE_DIR/oclang/test.cpp\n\necho \"\"\n\necho \"Done! Now you can use o32-gcc/o32-g++ and o64-gcc/o64-g++ as compiler\"\necho \"\"\necho \"Example usage:\"\necho \"\"\necho \"Example 1: CC=o32-gcc ./configure --host=i386-apple-$TARGET\"\necho \"Example 2: CC=i386-apple-$TARGET-gcc ./configure --host=i386-apple-$TARGET\"\necho \"Example 3: o64-gcc -Wall test.c -o test\"\necho \"Example 4: x86_64-apple-$TARGET-strip -x test\"\necho \"\"\n"
        },
        {
          "name": "cleanup.sh",
          "type": "blob",
          "size": 0.0693359375,
          "content": "#!/usr/bin/env bash\n\ngit clean -fdx || rm -rf *~ build target *.tar.xz\n"
        },
        {
          "name": "oclang",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.sh",
          "type": "blob",
          "size": 2.107421875,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\ntest -z \"$COMPRESSLEVEL\" && COMPRESSLEVEL=9\n\nif [ -n \"$BINARYPACKAGE\" ]; then\n  SUFFIX=\"\"\nelse\n  SUFFIX=\"_src\"\n  BINARYPACKAGE=\"0\"\nfi\n\nTMPDIR=`mktemp -d /tmp/XXXXXXXXX`\n\nBASEDIR=`pwd`\n\nset +e\nREVHASH=`git rev-parse --short HEAD`\nset -e\n\nOSXCROSSVER=`cat build.sh | grep \"OSXCROSS_VERSION\" | head -n1 | tr '=' ' ' | awk '{print $2}'`\n\npushd $TMPDIR\n\nmkdir osxcross\npushd osxcross\n\nif [ $BINARYPACKAGE != \"1\" ]; then\n  cp -r $BASEDIR/tarballs .\n  cp -r $BASEDIR/patches .\n  cp -r $BASEDIR/tools .\n  cp -r $BASEDIR/oclang .\n  cp -r $BASEDIR/wrapper .\nelse\n  ldd `ls $BASEDIR/target/bin/x86_64-apple-darwin*-ld | head -n1` | grep \"libLTO.so\" &>/dev/null && \\\n    echo \"-->> WARNING: ld is linked dynamically against libLTO.so! Consider recompiling with DISABLE_LTO_SUPPORT=1 <<--\" && \\\n    sleep 5\n\n  cp -r $BASEDIR/target/* .\n  cp $BASEDIR/build/cctools*/cctools/APPLE_LICENSE CCTOOLS.LICENSE\n\n  READMEINSTALL=\"README_INSTALL\"\n\n  echo \"- BINARY INSTALLATION INSTRUCTIONS -\"     > $READMEINSTALL\n  echo \"\"                                        >> $READMEINSTALL\n  echo \"Add \"                                    >> $READMEINSTALL\n  echo \"\"                                        >> $READMEINSTALL\n  echo \"  \\`<absolute path>/bin/osxcross-env\\`\"  >> $READMEINSTALL\n  echo \"\"                                        >> $READMEINSTALL\n  echo \"To your ~/.profile or ~/.bashrc,\"        >> $READMEINSTALL\n  echo \"then restart your shell session.\"        >> $READMEINSTALL\n  echo \"\"                                        >> $READMEINSTALL\n  echo \"That's it.\"                              >> $READMEINSTALL\n  echo \"\"                                        >> $READMEINSTALL\nfi\n\nfind $BASEDIR -maxdepth 1 -type f -exec cp {} . \\;\n\nif [ $BINARYPACKAGE == \"1\" ]; then\n  rm -f *.sh\n  rm -f TODO\nfi\n\nrm -rf tarballs/old*\nrm -rf tarballs/gcc*\nrm -rf tarballs/MacOSX*\n\nrm -f tools/cpucount\n\nrm -f osxcross*.tar.*\n\nfind . \\( -name \"*.save\" -o -name \"*~\" -o -name \"*.kate-swp\" \\) -exec rm {} \\;\n\nrm -rf osxcross*.tar.*\n\npopd\n\ntar -cf - * | xz -$COMPRESSLEVEL -c - > $BASEDIR/osxcross-v${OSXCROSSVER}_${REVHASH}${SUFFIX}.tar.xz\n\npopd\n\nrm -rf $TMPDIR\n"
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "tarballs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrapper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}