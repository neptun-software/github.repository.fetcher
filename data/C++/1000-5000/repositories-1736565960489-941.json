{
  "metadata": {
    "timestamp": 1736565960489,
    "page": 941,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doyubkim/fluid-engine-dev",
      "stars": 1925,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.6875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -3\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8212890625,
          "content": "# macOS\n.DS_Store\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n*.ilk\n*.pdb\n*.idb\n*.pyc\n*.VC.db\n*.VC.opendb\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# IDE-generated files\n*.xcuserstate\n*xcuserdata\n*.opensdf\n*.sconsign.dblite\n*swp\n*.suo\n*.sdf\n*.ipch\n*.vcxproj.user\n*.log\n*.tlog\n*.cache\n*.user\n*.g.h\n*.g.hpp\n*.g.cpp\n*.xbf\n*.pri\n*.png\n*.winmd\n*.appxrecipe\n*.sublime-workspace\nproject.lock.json\nsrc/**/bin/**/*\nsrc/**/Generated Files/**/*\n.idea\ncmake-build-*\n\n# Temp files\n_*\nobj\n\n# Doxygen files\ndoc/doxygen/html\n\n# Output files\nbuild*\n*.csv\n*.log.*\n*.xml\n*.pdf\noutput\ndist\nmanual_tests_output\nunit_tests_output\n*.bat\n*.vol\n*.pos\n*.tga\n*.gif\n*.mp4\n*.xyz\n\n# NuGet\npackages\n\n# Python\nENV*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.51171875,
          "content": "[submodule \"external/googletest\"]\n\tpath = external/googletest\n\turl = https://github.com/google/googletest\n[submodule \"external/pybind11\"]\n\tpath = external/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"external/googlebenchmark\"]\n\tpath = external/googlebenchmark\n\turl = https://github.com/google/benchmark.git\n[submodule \"external/Clara\"]\n\tpath = external/Clara\n\turl = https://github.com/catchorg/Clara\n[submodule \"external/tinyobj\"]\n\tpath = external/tinyobj\n\turl = https://github.com/syoyo/tinyobjloader\n"
        },
        {
          "name": "3RD_PARTY.md",
          "type": "blob",
          "size": 25.5322265625,
          "content": "Jet uses Google Test for testing.\n\nCopyright 2008, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---\n\nJet uses portion of pbrt-v2\n\nCopyright (c) 1998-2014, Matt Pharr and Greg Humphreys.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---\n\nJet uses cnpy for testing\n\nThe MIT License\n\nCopyright (c) Carl Rogers, 2011\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---\n\nJet uses portion of SPH demo code from\nBart Adams and Martin Wicke, \"Meshless Approximation Methods and Applications in Physics Based Modeling and Animation\", Eurographics 2009 Tutorial\n\n---\n\nJet uses libobj for Wavefront OBJ file handling\nThe original source code from http://people.cs.kuleuven.be/~ares.lagae/libobj/\n\n---\n\nJet uses portion of Marching Cubes Example Program by Cory Bloyd\n\nMarching Cubes Example Program\nby Cory Bloyd (corysama@yahoo.com)\n\nA simple, portable and complete implementation of the Marching Cubes\nand Marching Tetrahedrons algorithms in a single source file.\nThere are many ways that this code could be made faster, but the\nintent is for the code to be easy to understand.\n\nFor a description of the algorithm go to\nhttp://astronomy.swin.edu.au/pbourke/modelling/polygonise/\n\nThis code is public domain.\n\n---\n\nJet uses pystring for string manipulation\n\nCopyright (c) 2008-2010, Sony Pictures Imageworks Inc\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nNeither the name of the organization Sony Pictures Imageworks nor the\nnames of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---\n\nJet uses portion of Christopher Batty's example code from http://www.cs.ubc.ca/labs/imager/tr/2007/Batty_VariationalFluids/ and https://github.com/christopherbatty/FluidRigidCoupling2D\n\n---\n\nJet uses FlatBuffers for serialization\n\n\nCopyright 2014 Google Inc. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n---\n\nJet uses doxygen-bootstrapped for custom Doxygen styling.\n\nApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n---\n\nJet uses portion of cmake-init with modification.\nOriginal code from: https://github.com/cginternals/cmake-init\n\n\nCopyright (c) 2012-2015 Computer Graphics Systems Group at the Hasso-Plattner-Institute, Germany.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n---\n\nJet uses portion of Fluid3D by Christopher Batty.\nOriginal code from: https://github.com/christopherbatty/Fluid3D\n\n---\n\nJet uses pybind11 for Python binding.\n\nCopyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n\n---\n\nJet uses portion of pybind/cmake_example for Python binding.\n\nCopyright (c) 2016 The Pybind Development Team, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n\n---\n\nJet uses Google Benchmark for perf testing.\n\nCopyright 2017, Google Inc.\nAll rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n---\n\nJet uses CodeCoverage.cmake for code coverage.\n\nMIT License\n\nCopyright (c) 2017 Rok Kos\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.5302734375,
          "content": "#\n# Copyright (c) 2019 Doyub Kim\n#\n# I am making my contributions/submissions to this project solely in my personal\n# capacity and am not conveying any rights to any intellectual property of any\n# third parties.\n#\n\n# CMake version\ncmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n\n# Include cmake modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n# Declare project\nproject(jet)\n\n# Useful paths\nset(EXTERNAL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external)\n\n# Set output directories\nset(DEFAULT_CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\n\n# Includes\ninclude_directories(include)\ninclude_directories(external)\ninclude_directories(external/pybind11/include)\ninclude_directories(external/Clara/include)\ninclude_directories(external/tinyobj)\ninclude_directories(src/examples)\n\n# Build type - Release by default\nmessage(\"CMake build type: \" ${CMAKE_BUILD_TYPE})\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nelseif(CMAKE_BUILD_TYPE MATCHES \"Debug\")\n    add_definitions(-DDEBUG)\nendif()\n\n# Configure tasking system backend\ninclude(cmake/TaskingSystemOptions.cmake)\n\n# Compile options\ninclude(cmake/CompileOptions.cmake)\n\n# Code coverage - Debug only\n# NOTE: Code coverage results with an optimized (non-Debug) build may be misleading\noption(BUILD_COVERAGE \"Build code coverage\" OFF)\nif (CMAKE_BUILD_TYPE MATCHES Debug AND CMAKE_COMPILER_IS_GNUCXX AND BUILD_COVERAGE)\n    include(CodeCoverage)\n    setup_target_for_coverage(${PROJECT_NAME}_coverage unit_tests coverage)\nendif()\n\n# Overrides\nset(CMAKE_MACOSX_RPATH ON)\n\n# Unpack resources\nset(RESOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/resources)\nset(RESOURCES_OBJS\n        ${RESOURCES_DIR}/bunny.obj\n        ${RESOURCES_DIR}/cube.obj\n        ${RESOURCES_DIR}/cup.obj\n        ${RESOURCES_DIR}/dragon.obj)\nset(unzip_py ${CMAKE_CURRENT_SOURCE_DIR}/scripts/unzip.py)\nadd_custom_command(\n        COMMAND python ${unzip_py} ${RESOURCES_DIR}/resources.zip ${RESOURCES_DIR}\n        DEPENDS ${headers}\n        OUTPUT ${RESOURCES_OBJS})\nadd_custom_target(unzip_py ALL\n        DEPENDS ${RESOURCES_OBJS})\n\n# Project modules\nset(BUILD_GTEST ON CACHE BOOL \"\" FORCE)\nset(BUILD_GMOCK ON CACHE BOOL \"\" FORCE)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nadd_subdirectory(external/googletest EXCLUDE_FROM_ALL)\nif ((CMAKE_VERSION VERSION_EQUAL 3.3) OR (CMAKE_VERSION VERSION_GREATER 3.3))\n    cmake_policy(SET CMP0063 NEW)\nendif()\nset(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"\" FORCE)\nadd_subdirectory(external/googlebenchmark)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\nadd_subdirectory(external/cnpy)\nadd_subdirectory(external/pystring)\nadd_subdirectory(src/jet)\nadd_subdirectory(src/tests/manual_tests)\nadd_subdirectory(src/tests/mem_perf_tests)\nadd_subdirectory(src/tests/time_perf_tests)\nadd_subdirectory(src/tests/unit_tests)\nadd_subdirectory(src/examples/hello_fluid_sim)\nadd_subdirectory(src/examples/hybrid_liquid_sim)\nadd_subdirectory(src/examples/level_set_liquid_sim)\nadd_subdirectory(src/examples/obj2sdf)\nadd_subdirectory(src/examples/particles2obj)\nadd_subdirectory(src/examples/particles2xml)\nadd_subdirectory(src/examples/smoke_sim)\nadd_subdirectory(src/examples/sph_sim)\nadd_subdirectory(src/examples/playground)\n\nadd_subdirectory(external/pybind11)\nif (BUILD_FROM_PIP)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DEFAULT_CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nendif()\nadd_subdirectory(src/python)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4501953125,
          "content": "FROM ubuntu:14.04\nMAINTAINER Doyub Kim <doyubkim@gmail.com>\n\nRUN apt-get update -yq && \\\n    apt-get install -yq build-essential python-dev cmake curl\n\nADD . /app\n\nWORKDIR /app/build\nRUN cmake .. && \\\n    make -j`nproc` && \\\n    make install\n\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py\nRUN apt-get install -yq pkg-config libfreetype6-dev libpng-dev\nRUN pip install -r ../requirements.txt && \\\n    pip install ..\n\nWORKDIR /\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 8.0732421875,
          "content": "This document explains how to build, test, and install the SDK.\n\n## Building the Code\n\nTo get started, clone the code from the repository and also download dependent libraries by running\n\n```\ngit clone https://github.com/doyubkim/fluid-engine-dev.git\ncd fluid-engine-dev.git\ngit submodule init\ngit submodule update\n```\n\nTo build the code, a compiler that supports C++11 is required. Platform-specific build instructions are described below.\n\n### Building from macOS\n\nJet supports OS X 10.10 Yosemite or higher. Also, Xcode 6.4 or higher and the command line tools are required for building Jet. Once ready, install [Homebrew](http://brew.sh) and run the following command line to setup [CMake](https://cmake.org/):\n\n```\nbrew install cmake python\n```\n\n> Note that we want `brew` version of Python which is recommended. You can still use macOS's default Python.\n\nOptionally, which is recommended, you can [Intel TBB](https://www.threadingbuildingblocks.org) for multithreading backend:\n\n```\nbrew install tbb\n```\n\nOnce CMake and Python is installed, build the code by running\n\n```\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n> Of course, use `make -j<num_threads>` flag to boost up the build performance by using multithreads. Also, pass `-DJET_TASKING_SYSTEM=TBB` or `-DJET_TASKING_SYSTEM=CPP11Threads` to the `cmake` command in order to explicitly enable either Intel TBB or C++11 thread-based multithreading backend. If not specified, the build script will try to use Intel TBB first. If not found, it will fall back to C++11 threads.\n\nThis will build entire codebase. To run the unit test, execute\n\n```\nbin/unit_tests\n```\n\nIt should show all the tests are passing.\n\n### Building from Ubuntu\n\nJet supports Ubuntu 14.04 or higher. Using `apt-get`, install required tools and libraries by running,\n\n```\nsudo apt-get install build-essential python-dev python-pip cmake\n```\n\nOptionally, which is recommended, you can [Intel TBB](https://www.threadingbuildingblocks.org) for multithreading backend:\n\n```\nsudo apt-get install libtbb-dev\n```\n\nThis will install GNU compilers, python, and CMake. Once installed, build the code by running\n\n```\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n> Again, use `make -j<num_threads>` flag to boost up the build performance by using multithreads. Also, pass `-DJET_TASKING_SYSTEM=TBB`, `-DJET_TASKING_SYSTEM=OpenMP` or `-DJET_TASKING_SYSTEM=CPP11Threads` to the `cmake` command in order to explicitly enable either Intel TBB , OpenMP, or C++11 thread-based multithreading backend. If not specified, the build script will try to use Intel TBB first. If not found, it will fall back to OpenMP and then C++11 threads.\n\nThis will build entire codebase. To run the unit test, execute\n\n```\nbin/unit_tests\n```\n\nIt should show all the tests are passing.\n\n### Building from Windows\n\nTo build the code on Windows, CMake, Python, and Visual Studio 2015 (or higher) is required. Windows' version of CMake is available from [this website](https://cmake.org/), Python installer can be downloaded from [here](https://python.org/). For Python, version 2.7.9 or later is recommended. To install Visual Studio, the community edition of the tool can be downloaded from [Visual Studio Community 2015](https://www.Visualstudio.com/en-us/products/Visual-studio-community-vs.aspx). You can also use Visual Studio 2017.\n\nOnce everything is installed, run the following commands:\n\n```\nmd build\ncd build\ncmake .. -G\"Visual Studio 14 2015 Win64\"\n```\n> Again, pass `-DJET_TASKING_SYSTEM=TBB`, `-DJET_TASKING_SYSTEM=OpenMP` or `-DJET_TASKING_SYSTEM=CPP11Threads` to the `cmake` command in order to explicitly enable either Intel TBB , OpenMP, or C++11 thread-based multithreading backend. If not specified, the build script will try to use Intel TBB first. If not found, it will fall back to OpenMP and then C++11 threads.\n\nThis will generate 64-bit version of VS 2015 solution and projects. (To build with Visual Studio 2017, just replace the parameter with `Visual Studio 15 2017 Win64`.) Once executed, you can find `jet.sln` solution file in the `build` directory. Open the solution file and hit `Ctrl + Shift + B` to build the entire solution. Set `unit_tests` as a start-up project and hit `Ctrl + F5` to run the test.\n\nAlternatively, you can use MSBuild to build the solution from the command prompt. In such case, simply run:\n\n```\nMSBuild jet.sln /p:Configuration=Release\n```\n\nThis will build the whole solution in release mode. Once built, run the following command to execute unit tests:\n\n```\nbin\\Release\\unit_tests.exe\n```\n\n### Running Tests\n\nThere are four different tests in the codebase including the unit test, manual test, time/memory performance tests, and Python API test. For the detailed instruction on how to run those tests, please checkout the documentation page from [the project website](http://doyubkim.github.io/fluid-engine-dev/documentation/).\n\n### Code Coverage\n\nJet uses ```lcov``` for the code coverage. For macOS and Ubuntu platforms, the code coverage report can be generated by running\n\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Debug\nmake -j 8\nlcov -c -i -d src/tests/unit_tests -o base.info\nbin/unit_tests\nlcov -c -d src/tests/unit_tests -o test.info\nlcov -a base.info -a test.info -o coverage.info\nlcov -r coverage.info '/usr/*' -o coverage.info\nlcov -r coverage.info '*/external/*' -o coverage.info\nlcov -r coverage.info '*/src/tests/*' -o coverage.info\nlcov -l coverage.info\ngenhtml coverage.info -o out\n```\n\nThis will exports the code coverage report ```index.html``` under `out` folder.\n\n### Installing C++ SDK\n\nFor macOS and Ubuntu platforms, the library can be installed by running\n\n```\ncmake .. -DCMAKE_INSTALL_PREFIX=_INSTALL_PATH_\nmake\nmake install\n```\n\nThis will install the header files and the static library `libjet.a` under `_INSTALL_PATH_`.\n\nFor Windows, run:\n\n```\ncmake .. -G\"Visual Studio 14 2015 Win64\" -DCMAKE_INSTALL_PREFIX=_INSTALL_PATH_\n```\n\nThen, build `INSTALL` project under `jet.sln`. This will install the header files and the static library `jet.lib` under `_INSTALL_PATH_`.\n\n### Installing Python SDK\n\nTo install the Python SDK, `pyjet`, run the following command from the project root directory (where `setup.py` lives):\n\n```\npip install -U .\n```\n\n> You can also use `virtualenv` to isolate the SDK installation. Check out [the virtualenv documentation](https://virtualenv.pypa.io/en/stable/) for more details.\n\nTo run the test/example scripts, install other Python dependencies as follows:\n\n```\npip install -r requirements.txt\n```\n\nOnce installed, try running the unit test to see if the module is installed correctly:\n\n```\npytest src/tests/python_tests\n```\n\nThe tests should pass.\n\n### Using Docker\n\nYou can also use pre-built docker image by pulling the latest version from Docker Hub:\n\n```\ndocker pull doyubkim/fluid-engine-dev\n```\n\nRun a container and see if it can import `pyjet` module and the unit test passes:\n\n```\ndocker run -it doyubkim/fluid-engine-dev\npython import -c \"pyjet\"\n\ndocker run doyubkim/fluid-engine-dev /app/build/bin/unit_tests\n```\n\nYou can also build the image from the source as well. From the root directory of this codebase, run:\n\n```\ndocker build -t doyubkim/fluid-engine-dev .\n```\n\n> Warning: When you run Python examples using Intel TBB from Windows, you might encounter the following error:\n```\nimport pyjet\nImportError: DLL load failed while importing pyjet:\nThe specified module could not be found. \n```\n\n> It is a new Windows safety feature that changes how DLLs are loaded in Python 3.8+. To resolve this issue, I needed to tell Python how to find the library again like this:\n```\nimport os\nos.add_dll_directory(r'C:/Intel/tbb/bin/intel64/vc14') << (The path that Intel TBB is located)\nimport pyjet\n```\n\n> Open example file and add the code above to the first line. Now, you won't have any problems running it.\n\n### Coding Style\n\nJet uses clang-format. Checkout [`.clang-format`](https://github.com/doyubkim/fluid-engine-dev/blob/main/.clang-format) file for the style guideline.\n\n### Continuous Integration\n\nThe build quality is tracked by [Travis CI](https://travis-ci.org/doyubkim/fluid-engine-dev) for Linux and Mac. For Windows, [AppVeyor](https://ci.appveyor.com/project/doyubkim/fluid-engine-dev) is used. Any pull requests must pass all the builds.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 Doyub Kim\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.009765625,
          "content": "# Fluid Engine Dev - Jet\n\n[![License](http://img.shields.io/:license-mit-blue.svg)](LICENSE.md) ![Windows](https://github.com/doyubkim/fluid-engine-dev/workflows/Windows/badge.svg) ![Windows-MinGW](https://github.com/doyubkim/fluid-engine-dev/workflows/Windows-MinGW/badge.svg) ![Ubuntu](https://github.com/doyubkim/fluid-engine-dev/workflows/Ubuntu/badge.svg) ![macOS](https://github.com/doyubkim/fluid-engine-dev/workflows/macOS/badge.svg) [![codecov](https://codecov.io/gh/doyubkim/fluid-engine-dev/branch/main/graph/badge.svg)](https://codecov.io/gh/doyubkim/fluid-engine-dev)\n\nJet framework is a fluid simulation engine SDK for computer graphics applications that was created by Doyub Kim as part of the book, [\"Fluid Engine Development\"](https://www.crcpress.com/Fluid-Engine-Development/Kim/p/book/9781498719926). The code is built on C++11 and can be compiled with most of the commonly available compilers such as g++, clang++, or Microsoft Visual Studio. Jet currently supports macOS (10.10 or later), Ubuntu (14.04 or later), and Windows (Visual Studio 2015 or later). Other untested platforms that support C++11 also should be able to build Jet. The framework also provides Python API for faster prototyping.\n\nThe latest code is always available from the [`main`](https://github.com/doyubkim/fluid-engine-dev/tree/main) branch. Since the code evolves over time, the latest from the main branch could be somewhat different from the code in the book. To find the version that is consistent with the book, check out the branch [`book-1st-edition`](https://github.com/doyubkim/fluid-engine-dev/tree/book-1st-edition).\n\n## Key Features\n* Basic math and geometry operations and data structures\n* Spatial query accelerators\n* SPH and PCISPH fluid simulators\n* Stable fluids-based smoke simulator\n* Level set-based liquid simulator\n* PIC, FLIP, and APIC fluid simulators\n* Upwind, ENO, and FMM level set solvers\n* Jacobi, Gauss-Seidel, SOR, MG, CG, ICCG, and MGPCG linear system solvers\n* Spherical, SPH, Zhu & Bridson, and Anisotropic kernel for points-to-surface converter\n* Converters between signed distance function and triangular mesh\n* C++ and Python API\n* Intel TBB, OpenMP, and C++11 multi-threading backends\n\nEvery simulator has both 2-D and 3-D implementations.\n\n## Quick Start\n\nYou will need CMake to build the code. If you're using Windows, you need Visual Studio 2015 or 2017 in addition to CMake.\n\nFirst, clone the code:\n\n```\ngit clone https://github.com/doyubkim/fluid-engine-dev.git --recursive\ncd fluid-engine-dev\n```\n\n### Python API\n\nBuild and install the package by running\n\n```\npip install -U .\n```\n\nNow run some examples, such as:\n\n```\npython src/examples/python_examples/smoke_example01.py\n```\n\n### C++ API\n\nFor macOS or Linux:\n\n```\nmkdir build && cd build && cmake .. && make\n```\n\nFor Windows:\n\n```\nmkdir build\ncd build\ncmake .. -G\"Visual Studio 14 2015 Win64\"\nMSBuild jet.sln /p:Configuration=Release\n```\n\nNow run some examples, such as:\n\n```\nbin/hybrid_liquid_sim\n```\n\n### Docker\n\n```\ndocker pull doyubkim/fluid-engine-dev:latest\n```\n\nNow run some examples, such as:\n\n```\ndocker run -it doyubkim/fluid-engine-dev\n[inside docker container]\n/app/build/bin/hybrid_liquid_sim\n```\n\n\n### More Instructions of Building the Code\n\nTo learn how to build, test, and install the SDK, please check out [INSTALL.md](https://github.com/doyubkim/fluid-engine-dev/blob/main/INSTALL.md).\n\n## Documentations\n\nAll the documentations for the framework can be found from [the project website](http://fluidenginedevelopment.org/documentation/) including the API reference.\n\n## Examples\n\nHere are some of the example simulations generated using Jet framework. Corresponding example codes can be found under src/examples. All images are rendered using [Mitsuba renderer](https://www.mitsuba-renderer.org/) and the Mitsuba scene files can be found from [the demo repository](https://github.com/doyubkim/fluid-engine-dev-demo/). Find out more demos from [the project website](http://fluidenginedevelopment.org/examples/).\n\n### FLIP Simulation Example\n\n![FLIP Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/flip_dam_breaking.png \"FLIP Example\")\n\n### PIC Simulation Example\n\n![PIC Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/pic_dam_breaking.png \"PIC Example\")\n\n### Level Set Example with Different Viscosity\n\n![Level Set Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/ls_bunny_drop.png \"Level Set Example \")\n\n### Smoke Simulation with Different Advection Methods\n\n![Cubic-smoke Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/smoke_cubic.png \"Cubic-smoke Example\")\n![Linear-smoke Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/smoke_linear.png \"Linear-smoke Example\")\n\n### Point-to-Surface Examples\n\n![Point-to-Surface Example](https://github.com/doyubkim/fluid-engine-dev/raw/main/doc/img/point_to_surface.png \"Point-to-Surface Example\")\n\n> Top-left: spherical, top-right: SPH blobby, bottom-left: Zhu and Bridson's method, and bottom-right: Anisotropic kernel\n\n## Developers\n\nThis repository is created and maintained by Doyub Kim (@doyubkim). Chris Ohk (@utilForever) is a co-developer of the framework since v1.3. [Many other contributors](https://github.com/doyubkim/fluid-engine-dev/graphs/contributors) also helped improving the codebase including Jefferson Amstutz (@jeffamstutz) who helped integrating Intel TBB and OpenMP backends.\n\n## License\n\nJet is under the MIT license. For more information, check out [LICENSE.md](https://github.com/doyubkim/fluid-engine-dev/blob/main/LICENSE.md). Jet also utilizes other open source codes. Checkout [3RD_PARTY.md](https://github.com/doyubkim/fluid-engine-dev/blob/main/3RD_PARTY.md) for more details.\n\nI am making my contributions/submissions to this project solely in my personal capacity and am not conveying any rights to any intellectual property of any third parties.\n\n## Acknowledgement\n\nWe would like to thank [JetBrains](https://www.jetbrains.com/) for their support and allowing us to use their products for developing Jet Framework.\n\n![JetBrains](doc/img/jetbrains.svg)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.111328125,
          "content": "numpy<1.17; python_version<'3.5'\nnumpy==1.17; python_version=='3.5'\nnumpy>1.17; python_version>'3.5'\npytest\nwheel\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.2001953125,
          "content": "# Original code from https://github.com/pybind/cmake_example/blob/master/setup.py\n#\n# Copyright (c) 2019 Doyub Kim\n#\n# I am making my contributions/submissions to this project solely in my personal\n# capacity and am not conveying any rights to any intellectual property of any\n# third parties.\n#\n\nimport os\nimport re\nimport sys\nimport platform\nimport subprocess\nimport multiprocessing\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    def run(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError(\"CMake must be installed to build the following extensions: \" +\n                               \", \".join(e.name for e in self.extensions))\n\n        if platform.system() == \"Windows\":\n            cmake_version = LooseVersion(\n                re.search(r'version\\s*([\\d.]+)', out.decode()).group(1))\n            if cmake_version < '3.1.0':\n                raise RuntimeError(\"CMake >= 3.1.0 is required on Windows\")\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(\n            self.get_ext_fullpath(ext.name)))\n        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n                      '-DPYTHON_EXECUTABLE=' + sys.executable,\n                      '-DBUILD_FROM_PIP=ON']\n\n        env = os.environ.copy()\n        tasking_sys = env.get('TASKING_SYSTEM', '')\n        if tasking_sys:\n            cmake_args += ['-DJET_TASKING_SYSTEM=' + tasking_sys]\n\n        cfg = 'Debug' if self.debug else 'Release'\n        build_args = ['--config', cfg]\n\n        if platform.system() == \"Windows\":\n            cmake_args += [\n                '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir)]\n            if sys.maxsize > 2**32:\n                cmake_args += ['-A', 'x64']\n            build_args += ['--', '/m']\n        else:\n            cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]\n            num_jobs = env.get('NUM_JOBS', multiprocessing.cpu_count())\n            build_args += ['--', '-j%s' % str(num_jobs), 'pyjet']\n\n        env['CXXFLAGS'] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(env.get('CXXFLAGS', ''),\n                                                              self.distribution.get_version())\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        subprocess.check_call(['cmake', ext.sourcedir] +\n                              cmake_args, cwd=self.build_temp, env=env)\n        subprocess.check_call(['cmake', '--build', '.'] +\n                              build_args, cwd=self.build_temp)\n\n\nsetup(\n    name='pyjet',\n    version='1.3.3',\n    author='Doyub Kim',\n    author_email='doyubkim@gmail.com',\n    description='Fluid simulation engine for computer graphics applications',\n    long_description='',\n    ext_modules=[CMakeExtension('pyjet')],\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}