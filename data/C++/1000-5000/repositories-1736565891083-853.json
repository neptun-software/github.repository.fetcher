{
  "metadata": {
    "timestamp": 1736565891083,
    "page": 853,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cryfs/cryfs",
      "stars": 2045,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.5732421875,
          "content": "---\n# TODO Enable (some of) the explicitly disabled checks. Possibly needs helper types from gsl library or similar to enable full cppcoreguidelines.\n# TODO Enable more checks (google-*, hicpp-*, llvm-*, modernize-*, mpi-*, performance-*, readability-*)\n# TODO Maybe just enable * and disable a list instead?\n# TODO Check if there's new checks in clang-tidy-9 and later and potentially enable them\n# TODO Enable misc-include-cleaner\nChecks: |\n  clang-diagnostic-*,\n  clang-analyzer-*,\n  bugprone-*,\n  cert-*,\n  cppcoreguidelines-*,\n  misc-*,\n  boost-use-to-string,\n  -cert-env33-c,\n  -cert-err58-cpp,\n  -cert-err60-cpp,\n  -bugprone-macro-parentheses,\n  -bugprone-exception-escape,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-implicit-widening-of-multiplication-result,\n  -bugprone-narrowing-conversions,\n  -cppcoreguidelines-owning-memory,\n  -cppcoreguidelines-no-malloc,\n  -cppcoreguidelines-pro-type-const-cast,\n  -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n  -cppcoreguidelines-pro-type-reinterpret-cast,\n  -cppcoreguidelines-special-member-functions,\n  -cppcoreguidelines-pro-type-cstyle-cast,\n  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n  -cppcoreguidelines-pro-type-vararg,\n  -cppcoreguidelines-avoid-goto,\n  -cppcoreguidelines-avoid-magic-numbers,\n  -cppcoreguidelines-macro-usage,\n  -cppcoreguidelines-non-private-member-variables-in-classes,\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  -cppcoreguidelines-narrowing-conversions,\n  -cppcoreguidelines-use-default-member-init,\n  -clang-analyzer-optin.cplusplus.VirtualCall,\n  -clang-analyzer-cplusplus.NewDeleteLeaks,\n  -misc-macro-parentheses,\n  -misc-non-private-member-variables-in-classes,\n  -misc-unused-raii\n  -misc-include-cleaner\nWarningsAsErrors: '*'\nHeaderFilterRegex: '/src/|/test/'\nCheckOptions:\n  - key:   google-readability-braces-around-statements.ShortStatementLines\n    value: '1'\n  - key:   google-readability-function-size.StatementThreshold\n    value: '800'\n  - key:   google-readability-namespace-comments.ShortNamespaceLines\n    value: '10'\n  - key:   google-readability-namespace-comments.SpacesBeforeComments\n    value: '2'\n  - key:   modernize-loop-convert.MaxCopySize\n    value: '16'\n  - key:   modernize-loop-convert.MinConfidence\n    value: reasonable\n  - key:   modernize-loop-convert.NamingStyle\n    value: CamelCase\n  - key:   modernize-pass-by-value.IncludeStyle\n    value: llvm\n  - key:   modernize-replace-auto-ptr.IncludeStyle\n    value: llvm\n  - key:   modernize-use-nullptr.NullMacros\n    value: 'NULL'\n  - key:   cppcoreguidelines-rvalue-reference-param-not-moved.AllowPartialMove\n    value: true\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.20703125,
          "content": "umltest.inner.sh\numltest.status\n/build\n/cmake\n/cmake-build-*\n/.idea\n*~\n/.vs\n/.vscode\n\nsrc/gitversion/*.pyc\nsrc/gitversion/__pycache__\ncmake-build-debug\ncmake-build-release\ncmake-build-test\n\nCMakeUserPresets.json\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.8193359375,
          "content": "cmake_minimum_required(VERSION 3.25 FATAL_ERROR)\n\n# TODO Perf test:\n#  - try if setting CRYPTOPP_NATIVE_ARCH=ON and adding -march=native to the compile commands for cryfs source files makes a difference\n#    -> if yes, offer a cmake option to enable both of these\n\nproject(cryfs)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake-utils)\ninclude(utils)\n\nrequire_gcc_version(7.0)\nrequire_clang_version(7.0)\n\n# Default value is not to build test cases\noption(BUILD_TESTING \"build test cases\" OFF)\noption(CRYFS_UPDATE_CHECKS \"let cryfs check for updates and security vulnerabilities\" ON)\noption(DISABLE_OPENMP \"allow building without OpenMP libraries. This will cause performance degradations.\" OFF)\n\n# The following options are helpful for development and/or CI\noption(USE_WERROR \"build with -Werror flag\")\noption(USE_CLANG_TIDY \"build with clang-tidy checks enabled\" OFF)\noption(USE_IWYU \"build with iwyu checks enabled\" OFF)\noption(CLANG_TIDY_WARNINGS_AS_ERRORS \"treat clang-tidy warnings as errors\" OFF)\n\nif (MSVC)\n  option(DOKAN_PATH \"Location of the Dokan library, e.g. C:\\\\Program Files\\\\Dokan\\\\DokanLibrary-2.2.0\" \"\")\nendif()\n\n# Default value is to build in release mode but with debug symbols\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE INTERNAL \"CMAKE_BUILD_TYPE\")\nendif(NOT CMAKE_BUILD_TYPE)\n\n# We don't use LTO because crypto++ has problems with it, see https://github.com/weidai11/cryptopp/issues/1031 and https://www.cryptopp.com/wiki/Link_Time_Optimization\n\nif(MSVC)\n  # Needed to avoid a msvc build error \"fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj\"\n  add_definitions(/bigobj)\nendif()\n\ninclude(cmake-utils/Dependencies.cmake)\n\nadd_subdirectory(vendor EXCLUDE_FROM_ALL)\nadd_subdirectory(src)\nadd_subdirectory(doc)\nadd_subdirectory(test)\nadd_subdirectory(cpack)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 2.0146484375,
          "content": "{\n  \"configurations\": [\n    {\n      \"name\": \"x86-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DBUILD_TESTING=on -DDOKAN_PATH=\\\"C:\\\\Program Files\\\\Dokan\\\\Dokan Library-2.2.0\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x86-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DBUILD_TESTING=on -DDOKAN_PATH=\\\"C:\\\\Program Files\\\\Dokan\\\\Dokan Library-2.2.0\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DBUILD_TESTING=on -DDOKAN_PATH=\\\"C:\\\\Program Files\\\\Dokan\\\\Dokan Library-2.2.0\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DBUILD_TESTING=on -DDOKAN_PATH=\\\"C:\\\\Program Files\\\\Dokan\\\\Dokan Library-2.2.0\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\"\n    }\n  ]\n}\n"
        },
        {
          "name": "ChangeLog.txt",
          "type": "blob",
          "size": 19.1953125,
          "content": "Version 1.0.1\n---------------\nFixes\n* On Windows, don't error but just show a warning when the `-f` flag is provided. This re-establishes backwards compatibility with cryfs 0.11.\n\nDependency Updates\n* range-v3 cci.20240905\n\n\nVersion 1.0.0\n---------------\nBackwards Compatibility:\n* Filesystems created with CryFS 0.11.x and CryFS 1.0.0 are fully compatible with each other. The storage format hasn't changed.\n* This means filesystems created with 0.10.x or 0.11.x can be mounted without requiring a migration.\n* Filesystems created with 1.0.0 or 0.11.x can be mounted by CryFS 0.10.x, but only if you configure it to use a cipher supported by CryFS 0.10.x, e.g. AES-256-GCM. The new default, XChaCha20-Poly1305, is not supported by CryFS 0.10.x.\n\nFixes/Improvements\n* Added a man page for `cryfs-unmount`\n* Fixed small inaccuracy in calculation of free space in statvfs\n* Fix an issue when using `-o` atime mount options\n* On Windows\n  * when the wrong DokanY version is installed, or DokanY is not installed, show an error instead of letting it look like mounting succeeded.\n  * remove '-f' flag and always run CryFS in foreground mode. Background mode didn't work anyways but attempting to use it would swallow logs and errors. Now they show up correctly.\n  * show better error message when attempting to mount to a non-drive mount path\n  * libcurl now uses SChannel for SSL instead of OpenSSL. OpenSSL used to have problems finding certificate authorities, but with SChannel, things work fine.\n* Fix some Windows build issues when using Visual Studio 2022. Visual Studio 2019 worked fine but 2022 introduced some breaking changes.\n* Fix some MacOS build issues\n\nBuild changes\n* Requires CMake 3.25\n* Remove Windows 32bit build, only 64bit remains supported\n* Remove MacOS gcc build, only clang remains supported\n* Migrate build from Conan 1.x to Conan 2.x\n* There is now an easier way to opt-out of conan. CMake now works directly and without conan if the necessary dependencies are already installed.\n* Remove apt.cryfs.org from the `.deb` package generation process since that repository isn't being used anymore\n* We now only link to libcurl if CRYFS_UPDATE_CHECKS is enabled. If the compile time flag is disabled,\n  that already disabled update checks in previous versions, but needlessly still linked to libcurl.\n  Now the flag will fully remove the libcurl dependency from the build.\n\nDependency Updates\n* Fuse 2.9\n* DokanY 2.2.0.1000\n* Crypto++ 8.9\n* range-v3 0.12.0\n* boost 1.84\n* spdlog 1.14.1\n* gtest 1.15.0\n* Use libcurl dependency from conan instead of requiring it to be preinstalled. Cut away most of it to minimize dependencies, only keep the minimum needed for querying Cryfs release information.\n* Use gtest dependency from conan instead of having it in the vendor/ directory of the repository\n\n\nVersion 0.11.4\n---------------\n* Fixed build issue with GCC 13 (see https://github.com/cryfs/cryfs/pull/448 )\n* Fixed build issue with Python 3.12 (see https://github.com/cryfs/cryfs/issues/459 )\n\nVersion 0.11.3\n---------------\n* Fixed build issue on systems with libfmt 9.0 (see https://github.com/cryfs/cryfs/issues/432 )\n* Fixed build issue on Apple Silicon Macs (see https://github.com/cryfs/homebrew-tap/issues/10 )\n* Fixed build issue on systems that only have `python3` but no `python` executable (see https://github.com/cryfs/homebrew-tap/issues/12 )\n\nVersion 0.11.2\n---------------\nBugfix:\n* Time to mount a file system was very long because the build didn't correctly use OpenMP. This is now fixed and file systems should open faster again.\n\nVersion 0.11.1\n---------------\nBugfix:\n* Fix building of the range-v3 dependency. The conan remote URL for this dependency changed and we have to use the new URL. See https://github.com/cryfs/cryfs/issues/398\n* Update to CryptoPP 8.6. This fixes a rare bug where CryptoPP 8.5 encrypts data wrongly, see https://github.com/weidai11/cryptopp/issues/1069\n* cryfs-unmount correctly unmounts paths that contain spaces, see https://github.com/cryfs/cryfs/issues/372\n* Updated to DokanY 1.2.2.1001\n\nVersion 0.11.0\n---------------\nBackwards Compatibility:\n* Filesystems created with CryFS 0.10.x can be mounted without requiring a migration.\n* Filesystems created with CryFS 0.11.x can be mounted by CryFS 0.10.x if you configure it to use a cipher supported by CryFS 0.10.x, e.g. AES-256-GCM. The new default, XChaCha20-Poly1305, is not supported by CryFS 0.10.x.\n\nSecurity:\n* Added the XChaCha20-Poly1305 encryption cipher. For new filesystems, this will be the default, but you're still able to create a filesystem with the previous default of AES-256-GCM\n  by saying \"no\" to the \"use default settings?\" question when creating the file system. Also, old filesystems will not be automatically converted and will keep using AES-256-GCM.\n  XChaCha20-Poly1305 is significantly slower than AES-256-GCM on modern CPUs, but it is more secure for large filesystems (>64GB).\n  For AES-256-GCM, it is recommended to encrypt at most 2^32 blocks, which at the CryFS default block size of 16KB would be 64GB. The more the filesystem grows above that, the\n  more likely it gets that a nonce gets reused and the two corresponding blocks become decryptable by an adversary. Other blocks would not be affected, but an adversary being\n  able to access those two blocks (i.e. 64KB of the stored data) is bad enough. See Section 8.3 in https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\n  XChaCha20-Poly1305 does not suffer from this constraint and stays secure even if the filesystem gets very large.\n\nNew platforms:\n* CryFS now works on devices with Apple M1 silicon\n\nBuild changes:\n* Switch to Conan package manager\n* Allow an easy way to modify how the dependencies are found. This is mostly helpful for package maintainers. See \"Using local dependencies\" in the README.\n* Build with macFUSE instead of osxfuse on OSX\n* Now requires CMake 3.10 or later, and GCC 7 or later, or Clang 7 or later\n* Fix a build issue on Gentoo systems\n* Fix a build issue when building with boost 1.77\n\nImprovements:\n* Display the file system configuration when mounting a file system\n* Now shows a better error message when failing to load the config file that distinguishes between \"wrong password\" and \"config file not found\".\n\nNew features:\n* Add support for atime mount options (noatime, strictatime, relatime, atime, nodiratime).\n* The new default is now *noatime* (in 0.10.x is was relatime).\n  Noatime reduces the amount of writes necessary and with that reduces the probability of synchronization conflicts,\n  and the probability of corrupted file systems if a power outage happens while writing.\n* Add an --immediate flag to cryfs-unmount that tries to unmount immediately and doesn't wait for processes to release their locks on the file system.\n* Add a --create-missing-basedir and --create-missing-mountpoint flag to create the base directory and mount directory respectively, if they don't exist, skipping the confirmation prompt.\n\nOther:\n* Updated to spdlog 1.8.5\n* Updated to ranges-v3 0.11.0\n* Updated to boost 1.75\n* Updated to crypto++ 8.5\n\n\nVersion 0.10.4\n--------------\nFixed bugs:\n* Fixed an issue when compiling with GCC 11, see https://github.com/cryfs/cryfs/issues/389\n\n\nVersion 0.10.3\n---------------\nFixed bugs:\n* A comma in the base directory name would make the file system fail to mount, https://github.com/cryfs/cryfs/issues/326\n* Fixed determining the user's homedir: If $HOME and the /etc/passwd entry for the current user contradict each other, now $HOME takes preference over /etc/passwd.\n* Fix Android compilation, https://github.com/cryfs/cryfs/issues/345\n* Remove cryfs-stats tool which isn't ready yet and could destroy the file system\n* Fixed crash on startup when running in an environment that doesn't have $HOME set (e.g. an empty env), https://github.com/cryfs/cryfs/issues/374\n\n\nVersion 0.10.2\n---------------\nFixed bugs:\n* Fix occasional crash in mkdir() on Windows\n* Fix a race condition when a file descriptor is closed while there's read/write requests for that file being processed.\n\nImprovements:\n* Better logging when local state can't be loaded\n\nOther:\n* Updated to crypto++ 8.2\n\n\nVersion 0.10.1\n---------------\nFixed bugs:\n* If file system migration encounters files or folders with the wrong format in the base directory, it now just ignores them instead of crashing.\n* When trying to migrate a file system from CryFS 0.9.3 or older, show an error message suggesting to first open it with 0.9.10 because we can't load that anymore.\n* The '--unmount-idle' parameter works again\n* Fix building with boost 1.67\n\nCompatibility:\n* Fixed some incompatibilities with systems using the musl libc\n* Use boost::stacktrace instead of libbacktrace to build stack traces. This fixes a segfault issue with platforms using libexecinfo and is generally more portable.\n\nOther:\n* Updated to crypto++ 8.1\n* Updated to DokanY 1.2.1\n* Unit tests can now be run from any directory\n\n\nVersion 0.10.0\n---------------\nNew Features & Improvements:\n* Experimental Windows support\n* Integrity checks ensure you notice when someone modifies your file system.\n* File system nodes (files, directories, symlinks) store a parent pointer to the directory that contains them. This information can be used in later versions to resolve some synchronization conflicts.\n* Allow mounting using system mount tool and /etc/fstab (e.g. mount -t fuse.cryfs basedir mountdir)\n* Performance improvements\n* Use relatime instead of strictatime (further performance improvement)\n* Pass fuse options directly to cryfs (i.e. 'cryfs basedir mountdir -o allow_other' instead of 'cryfs basedir mountdir -- -o allow_other')\n* CryFS tells the operating system to lock the encryption key to memory, i.e. not swap it to the disk (note: this is best-effort and cannot be guaranteed. Hibernation, for example, will still write the encryption key to the disk).\n* New block size options: 4KB and 16KB\n* New default block size: 16KB. This should decrease the size of the ciphertext directory for most users.\n* Increased scrypt hardness to (N=1048576, r=4, p=8) to make it harder to crack the key while allowing cryfs to take advantage of multicore machines.\n* cryfs-unmount tool to unmount filesystems\n\nFixed bugs:\n* `du` shows correct file system size on Mac OS X.\n* On Mac OS X, Finder shows the correct name for the mount directory\n\n\nVersion 0.9.11\n--------------\nFixed bugs:\n* Fix a race condition when a file descriptor is closed while there's read/write requests for that file being processed.\n\n\nVersion 0.9.10\n--------------\nFixed bugs:\n* Fixed occasional deadlock (https://github.com/cryfs/cryfs/issues/64)\n* Fix for reading empty files out of bounds\n* Fixed race condition (https://github.com/cryfs/cryfs/issues/224 and https://github.com/cryfs/cryfs/issues/243)\n\n\nVersion 0.9.9\n--------------\nImprovements:\n* Add --allow-filesystem-upgrade option which will upgrade old file systems without asking the user. This will be especially helpful for GUI tools.\n* Add --version option that shows the CryFS version and exits.\n* When CryFS fails to load a file system, the process stops with a helpful error code, which can be used by GUI tools to show detailed messages.\n* Only migrate a file system if the underlying storage format changed\n\n\nVersion 0.9.8\n--------------\nCompatibility:\n* Runs on Debian with FreeBSD kernel\n* Runs on FreeBSD 11.1\n* Works with Crypto++ 6.0\n\nImprovements:\n* added a man page\n\nFixed bugs:\n* `du` shows correct file system size\n* Updated spdlog dependency to fix build on newer systems\n\nVersion 0.9.7\n--------------\nCompatibility:\n* Runs on FreeBSD\n* Works with Clang++ 3.8 (Debian experimental or newer Ubuntu systems)\n* Works with GCC 7\n\nVersion 0.9.6\n---------------\nFixed bugs:\n* Fix potential deadlock\n* Fix potential crash\n\nImprovements:\n* Allow building with -DCRYFS_UPDATE_CHECKS=off, which will create an executable with disabled update checks (the alternative to disable them in the environment also still works).\n* Automatically disable update checks when running in noninteractive mode.\n* More detailed error reporting if key derivation fails\n\nCompatibility:\n* Compatible with libcurl version >= 7.50.0, and <= 7.21.6 (tested down to 7.19.0)\n* Compatible with Crypto++ 5.6.4\n* Compatible with compilers running under hardening-wrapper\n\nVersion 0.9.5\n---------------\nFixed Bugs:\n* Fixed a bug that prevented mounting a file system on Mac OS X.\n* File system operations correctly update the timestamps (access time, modification time and status change time).\n* Reacts correctly to fsync() and fdatasync() syscalls by flushing the corresponding data to the disk.\n\nImprovements:\n* When mounting an old file system, CryFS will ask before migrating it to the newest version.\n* Operating system tools like the mount command or /proc/self/mountinfo report correct file system type and also report the base directory.\n* Compatibility with GCC 6\n\nVersion 0.9.4\n---------------\nImprovements:\n* Ciphertext blocks are split into subdirectories (before, all were on top level) to reduce number of files per directory. Some unix tools don't work well with directories with too many entries.\n\nFixed Bugs:\n* Renaming a file to an existing file (i.e. overwriting an existing file) didn't free the allocated memory for the overwritten file\n* Renaming a file to an existing file could hurt an invariant in the directory layout (directory entries have to be sorted) and doing so could cause files to seemingly disappear.\n* Fix a potential deadlock in the cache\n\nCompatibility:\n* The generated .deb packages work for any Ubuntu/Debian based distribution, but will not install the package source for automatic updates if it's an unsupported operating system.\n\nVersion 0.9.3\n---------------\nNew Features:\n* The ciphertext block size is configurable. You can use the \"--blocksize\" command line argument.\n  If not specified, CryFS will ask you for a block size when creating a file system.\n* It's easier for tools and scripts to use CryFS:\n  If an environment variable CRYFS_FRONTEND=noninteractive is set, we don't ask for options\n  (but take default values for everything that's not specified on command line).\n  Furthermore, in noninteractive mode, we won't ask for password confirmation when creating a file system.\n  The password only has to be sent once to stdin.\n* You can disable the automatic update check by setting CRYFS_NO_UPDATE_CHECK=true in your environment.\n\nFixed Bugs:\n* Building CryFS from the GitHub tarball (i.e. when there is no .git directory present) works.\n* A bug in the fstat implementation caused problems with some text editors (e.g. nano) falsely thinking a file changed since they opened it.\n* When trying to rename a file to an already existing file name, a bug deleted it instead.\n* Rename operation allows overwriting existing files, as specified in the rename(2) man page.\n\nCompatibility:\n* The generated .deb packages for Debian also work for the Devuan operating system.\n\nVersion 0.9.2\n---------------\n* Experimental support for installing CryFS on Mac OS X using homebrew\n  (0.9.2 is not released for Linux)\n\nVersion 0.9.1\n---------------\n* Report file system usage statistics to the operating system (e.g. amount of space used). This information can be queried using the 'df' tool on linux. See https://github.com/cryfs/cryfs/commit/68acc27e88ff5209ca55ddb4e91f5a449d77fb54\n* Use stronger scrypt parameters when generating the config file key from the user password. This makes it a bit more secure, but also takes a bit longer to load a file system. See https://github.com/cryfs/cryfs/commit/7f1493ab9210319cab008e71d4ee8f4d7d920f39\n* Fix a bug where deleting a non-empty directory could leave some blocks over. See https://github.com/cryfs/cryfs/commit/df041ac84511e4560c4f099cd8cc089d08e05737\n\nVersion 0.9.0\n---------------\n  (warning) file systems created with earlier CryFS versions are incompatible with this release.\n* Fully support file access times\n* Fix: Password is read from stdin, not from glibc getpass(). This enables external tools (e.g. GUIs) to pass in the password without problems.\n* Remove --extpass parameter, because that encourages tool writers to do bad things like storing a password in a file and using --extpass=\"cat filename\".\n  The password can now be passed in to stdin without problems, so tools should use that.\n* Works with zuluMount GUI, https://mhogomchungu.github.io/zuluCrypt/\n* Introduce version flags for file system entities to allow future CryFS versions to be backwards-compatible even if the format changes.\n* (for developers) New git repository layout. All subrepositories have been merged to one directory.\n* (for developers) Using CMake instead of biicode as build system.\n\nVersion 0.8.6\n---------------\n* Fix a deadlock that was caused when a very high load of parallel resize operations was issued, see https://github.com/cryfs/cryfs/issues/3\n* Fix a bug that prevented deleting symlinks, see https://github.com/cryfs/cryfs/issues/2\n* Gracefully accept modifications to the file access times instead of failing, although they're not stored yet (they will be stored in 0.9.0). This should fix https://github.com/cryfs/cryfs/issues/4\n\nVersion 0.8.5\n---------------\n* Fix package manager warning when installing the .deb package\n* Offer a default configuration when creating new filesystems\n* If the given base or mount directory doesn't exist, offer to create them\n\nVersion 0.8.4\n---------------\n* Offering .deb packages for Debian and Ubuntu\n* Compatibility with 32bit systems\n* Support files larger than 4GB\n\nVersion 0.8.3\n---------------\n* Ask for password confirmation when creating new filesystem\n* Check for new CryFS versions and ask the user to update if a new version is available\n* Implemented a mechanism that can show warnings about security bugs to users of a certain CryFS version. Let's hope this won't be necessary ;)\n* Compatibility with GCC 4.8 (that allows compiling on Ubuntu 14.04 for example)\n\nVersion 0.8.2\n---------------\n* Mount directory, base directory, logfile and config file can be specified as relative paths\n* Improved error messages\n\nVersion 0.8.1\n---------------\n* Config File Encryption: Configuration files are encrypted with two ciphers. The user specifies a password, which is then used with the scrypt KDF to generate the two encryption keys.\n  - Inner level: Encrypts the config data using the user specified cipher.\n  - Outer level: Encrypts the name of the inner cipher and the inner level ciphertext using aes-256-gcm.\n  The config file is padded to hide the size of the configuration data (including the name of the cipher used).\n* No external config file needed: If the configuration file is not specified as command line parameter, it will be put into the base directory. This way, the filesystem can be mounted with the password only, without specifying a config file on command line.\n* Logfiles: Added a --logfile option to specify where logs should be written to. If the option is not specified, CryFs logs to syslog.\n* Running in Background: Fixed daemonization. When CryFs is run without \"-f\" flag, it will run in background.\n* Better error messages when base directory is not existing, not readable or not writeable.\n* Allow --cipher=xxx to specify cipher on command line. If cryfs is creating a new filesystem, it will use this cipher. If it is opening an existing filesystem, it will check whether this is the cipher used by it.\n* --show-ciphers shows a list of all supported ciphers\n* --extpass allows using an external program for password input\n* --unmount-idle x automatically unmounts the filesystem after x minutes without a filesystem operation.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 7.47265625,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9462890625,
          "content": "# CryFS\n\nCryFS encrypts your files, so you can safely store them anywhere. It works well together with cloud services like Dropbox, iCloud, OneDrive and others.\nSee [https://www.cryfs.org](https://www.cryfs.org).\n\nInstall latest release\n======================\n\nLinux\n------\n\nCryFS is available through apt, but depending on which version of Ubuntu or Debian you're using, you may get an old version.\n\n    sudo apt install cryfs\n\nThe following should work on Arch and Arch-based distros:\n\n    sudo pacman -S cryfs\n\nIf you use homebrew-core, using the following instruction you should be able to install CrysFS:\n\n    brew install cryfs/tap/cryfs\n\nAdditionally, the following would work for any Linux distro with the Nix package manager:\n\n    nix-env -iA nixpkgs.cryfs\n\nOSX\n----\n\nCryFS is distributed via Homebrew, MacPorts, and Nix.\n\nIf you use Homebrew:\n\n    brew install --cask macfuse\n    brew install cryfs/tap/cryfs\n\nIf you use MacPorts:\n\n    port install cryfs\n\nFor Nix, the macOS build for cryfs is available in the Nixpkgs channel 21.05\nand later:\n\n    brew install --cask macfuse # or download from https://osxfuse.github.io/\n    nix-env -iA nixpkgs.cryfs\n\nWindows (experimental)\n----------------------\n\nCryFS has experimental Windows support since the 0.10 release series. To install it, do:\n\n1. Install [DokanY](https://github.com/dokan-dev/dokany/releases)\n   It's recommended to install the matching version DokanY a given CryFS version was built with. Other versions may work but we have seen issues.\n   * CryFS 1.0: DokanY 2.2.0.1000\n   * CryFS 0.11: DokanY 1.2.2.1001\n2. Install [Microsoft Visual C++ Redistributable for Visual Studio 2022](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)\n4. Install [CryFS](https://www.cryfs.org/#download)\n\nGUI\n===\nThere are some GUI applications with CryFS support. You usually have to install the GUI **and** also CryFS itself for it to work.\n- [SiriKali](https://mhogomchungu.github.io/sirikali/)\n- [Plasma Vault](https://www.kde.org/announcements/plasma-5.11.0.php) in KDE Plasma >= 5.11\n\nStability / Production readiness\n====================\nFor non-concurrent use, CryFS 0.10 or later is stable, but has a couple of known issues that can corrupt your file system.\nThey don't happen in normal day to day use, but can happen if you don't pay attention or aren't aware of them.\n\n- If you kill the CryFS process while it was in the middle of writing data (either intentionally or unintentionally by losing power to your PC), your file system could get corrupted.\n  CryFS does not do journaling. Note that in 0.10.x, read accesses into a CryFS file system can cause writes because file timestamps get updated. So if you're unlucky, your file system\n  could get corrupted if you lose power while you were reading files as well. Read accesses aren't an issue in CryFS 0.11.x or later anymore, because it mounts the filesystem with `noatime` by default.\n- The same corruption mentioned above can happen when CryFS is trying to write data but your disk ran out of space, causing the write to fail.\n- CryFS does not currently support concurrent access, i.e. accessing a file system from multiple devices at the same time.\n  CryFS works very well for storing data in a cloud and using it from multiple devices, but you need to make sure that only one CryFS process is active at any point in time, and you also need\n  to make sure that the cloud synchronization client (e.g. Dropbox) finishes its synchronization before you switch devices. There are some ideas on how concurrent access could be supported in\n  future versions, but it's a hard problem to solve. If you do happen to access the file system from multiple devices at the same time, it will likely go well most of the time, but it can corrupt your file system.\n- In addition to the scenarios above that can corrupt your file system, note that there is currently no fsck-like tool for CryFS that could recover your data. Such a tool is in development together with the Rust rewrite of CryFS.\n  Until that is ready, a corrupted file system will most likely cause a loss of all of your data.\n\nIf the scenarios mentioned above don't apply to you, then you can consider CryFS 0.10.x and later as stable. The 0.9.x versions are not recommended anymore.\n\nBuilding from source\n====================\n\nRequirements\n------------\n  - Git (for getting the source code)\n  - GCC version >= 7 or Clang >= 7\n  - CMake version >= 3.25\n  - pkg-config (on Unix)\n  - Conan package manager (version 2.x)\n  - libFUSE version >= 2.9 (including development headers), on Mac OS X instead install macFUSE from https://osxfuse.github.io/\n  - Python >= 3.5\n  - OpenMP\n\nYou can use the following commands to install these requirements\n\n    # Ubuntu\n    $ sudo apt install git python3 g++ cmake libomp-dev pkg-config libfuse-dev fuse\n\n    # Fedora\n    $ sudo dnf install git python3 gcc-c++ cmake pkgconf fuse-devel perl\n\n    # Macintosh\n    # TODO Update the package list\n    $ brew install cmake pkg-config libomp macfuse\n\nTo install conan, follow the [official installation instructions](https://docs.conan.io/2/installation.html). The following steps should work on Ubuntu/Debian based systems:\n\n    $ sudo apt install pipx\n    $ pipx install conan~=2.7.0\n    $ pipx ensurepath\n\nRestart your shell so that conan is on your PATH, and then let it find your compiler\n\n    $ conan profile detect\n\nYou can edit the generated profile file (usually `~/.conan2/profiles/default`) if you want to use different compiler settings.\n\n\nBuild & Install\n---------------\nSee further below in this README for instructions on how to build a .deb/.rpm package instead of installing CryFS directly.\n\n 1. Clone repository\n\n        $ git clone https://github.com/cryfs/cryfs.git cryfs\n        $ cd cryfs\n\n 2. Build\n\n        $ conan build . -s build_type=RelWithDebInfo --build=missing\n        \n    The executable will be generated at `build/RelWithDebInfo/src/cryfs-cli/cryfs`\n\n 3. Install\n\n        $ cd build/RelWithDebInfo\n        $ sudo make install\n\nYou can pass the following build types to the *conan build* command (using *-s build_type=value*):\n - **Debug**: No optimizations, debug symbols enabled, assertions enabled\n - **RelWithDebInfo**: Optimizations enabled, debug symbols enabled, assertions enabled\n - **Release**: Optimizations enabled, no debug symbols, no assertions\n\nYou can pass the following options to the *conan build* command (using *-o \"&:key=value\"*):\n - **build_tests**=[True|False]: Whether to build the test cases (can take a long time). Default: False.\n - **update_checks**=[True|False]: Build a CryFS that doesn't check online for updates and security vulnerabilities. Default: True.\n - **disable_openmp**=[True|False]: Disable OpenMP support. Default: False.\n\n\nRun tests\n---------\nFollow the build & install steps from above, but add the `-o \"&:build_tests=True\"` parameter to conan:\n\n    $ conan build . -s build_type=RelWithDebInfo --build=missing -s build_type=Debug -o \"&:build_tests=True\"\n\nThen run the tests:\n\n    $ cd build/Debug/test\n    $ ./blobstore/blobstore-test\n    $ ./blockstore/blockstore-test\n    $ ./cpp-utils/cpp-utils-test\n    $ ./cryfs/cryfs-test\n    $ ./cryfs-cli/cryfs-cli-test\n    $ ./fspp/fspp-test\n    $ ./gitversion/gitversion-test\n    $ ./parallelaccessstore/parallelaccessstore-test\n\nBuilding on Windows (experimental)\n----------------------------------\n1. Install conan2. If you want to use \"pip install conan\", you may have to install Python first.\n2. Install DokanY 2.2.0.1000. Other versions may not work.\n3. Build the project\n\n        $ conan build . --build=missing -o \"&:windows_dokany_path=C:/Program Files/Dokan/DokanLibrary-2.2.0\"\n\nUsing local dependencies\n-------------------------------\nStarting with CryFS 0.11, Conan is used for dependency management.\nWhen you build CryFS, Conan downloads the exact version of each dependency library that was also used for development.\nAll dependencies are linked statically, so there should be no incompatibility with locally installed libraries.\nThis is the recommended way because it has the highest probability of working correctly.\n\nHowever, some distributions prefer software packages to be built against dependencies dynamically and against locally installed versions of libraries.\nSo if you're building a package for such a distribution, you have the option of doing that, at the cost of potential incompatibilities.\nIf you follow this workflow, please make sure to extensively test your build of CryFS.\nYou're using a setup that wasn't tested by the CryFS developers.\n\nTo use local dependencies, you can install all of CryFS's dependencies (e.g. boost, spdlog) manually and run cmake directly without invoking conan first:\n\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make\n\nIt is recommended to use the same versions of the dependencies as stated in the conanfile.py in this repository.\nIt might be useful to take a look at [how our CI setup installs those dependencies](https://github.com/cryfs/cryfs/blob/develop/.github/workflows/actions/install_local_dependencies/action.yaml) to get you started.\n\nCMake will use pkg-config to find those dependencies.\n\nCreating .deb and .rpm packages\n-------------------------------\n\nIt is recommended to install CryFS using packages, because that allows for an easy way to uninstall it again once you don't need it anymore.\n\nIf you want to create a .rpm package, you need to install rpmbuild.\n\n 1. Clone repository\n\n        $ git clone https://github.com/cryfs/cryfs.git cryfs\n        $ cd cryfs\n\n 2. Make sure you have the required dependencies\n\n        $ sudo apt install file dpkg-dev rpm\n\n 3. Build\n\n        $ conan build . -s build_type=RelWithDebInfo --build=missing\n        $ cd build/RelWithDebInfo\n        $ make package\n\nDisclaimer\n----------------------\n\nIn the event of a password leak, you are strongly advised to create a new filesystem and copy all the data over from the previous one. Then, remove all copies of the compromised filesystem and config file(e.g, from the \"previous versions\" feature of your cloud system) to prevent access to the key (and, as a result, your data) using the leaked password.\n"
        },
        {
          "name": "archive.sh",
          "type": "blob",
          "size": 0.28125,
          "content": "#!/usr/bin/env bash\n\nTAG=$1\nGPGHOMEDIR=$2\n\ngit archive --format=tgz \"$1\" > \"cryfs-$1.tar.gz\"\ngpg --homedir \"$GPGHOMEDIR\" --armor --detach-sign \"cryfs-$1.tar.gz\"\n\ngit archive --format=tar \"$1\" | xz -9 > \"cryfs-$1.tar.xz\"\ngpg --homedir \"$GPGHOMEDIR\" --armor --detach-sign \"cryfs-$1.tar.xz\"\n"
        },
        {
          "name": "cmake-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 7.078125,
          "content": "from conan import ConanFile\nfrom conan.tools.build import check_min_cppstd\nfrom conan.tools.cmake import CMakeToolchain, CMake, cmake_layout\nfrom conan.tools.apple import is_apple_os\nfrom conan.tools.microsoft import is_msvc\nimport os\n\nclass CryFSConan(ConanFile):\n    name = \"cryfs\"\n    version = \"na\"\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    tool_requires = \"cmake/3.25.3\"\n    generators = [\"CMakeToolchain\", \"CMakeDeps\"]\n    package_folder = \"/usr\"\n    options = {\n        \"build_tests\": [True, False],\n        \"update_checks\": [True, False],\n        \"disable_openmp\": [True, False],\n\n        # The following options are helpful for development and/or CI\n        \"use_werror\": [True, False],\n        \"use_clang_tidy\": [True, False],\n        \"export_compile_commands\": [True, False],\n        \"use_iwyu\": [True, False],\n        \"clang_tidy_warnings_as_errors\": [True, False],\n        \"windows_dokany_path\": [\"ANY\"],\n        \"use_ccache\": [True, False],\n    }\n    default_options = {\n        \"build_tests\": False,\n        \"update_checks\": True,\n        \"disable_openmp\": False,\n        \"use_werror\": False,\n        \"use_clang_tidy\": False,\n        \"export_compile_commands\": False,\n        \"use_iwyu\": False,\n        \"clang_tidy_warnings_as_errors\": False,\n        \"windows_dokany_path\": \"\",\n        \"use_ccache\": \"False\",\n        # Options of our dependencies\n        \"boost/*:system_no_deprecated\": True,\n        \"boost/*:asio_no_deprecated\": True,\n        \"boost/*:filesystem_no_deprecated\": True,\n        \"boost/*:without_atomic\": False,  # needed by boost thread\n        \"boost/*:without_chrono\": False,  # needed by CryFS\n        \"boost/*:without_cobalt\": True,\n        \"boost/*:without_container\": False,  # needed by boost thread\n        \"boost/*:without_context\": True,\n        \"boost/*:without_contract\": True,\n        \"boost/*:without_coroutine\": True,\n        \"boost/*:without_date_time\": False,  # needed by boost thread\n        \"boost/*:without_exception\": False,  # needed by boost thread\n        \"boost/*:without_fiber\": True,\n        \"boost/*:without_filesystem\": False,  # needed by CryFS\n        \"boost/*:without_graph\": True,\n        \"boost/*:without_graph_parallel\": True,\n        \"boost/*:without_iostreams\": True,\n        \"boost/*:without_json\": True,\n        \"boost/*:without_locale\": True,\n        \"boost/*:without_log\": True,\n        \"boost/*:without_math\": True,\n        \"boost/*:without_mpi\": True,\n        \"boost/*:without_nowide\": True,\n        \"boost/*:without_program_options\": False,  # needed by CryFS\n        \"boost/*:without_python\": True,\n        \"boost/*:without_random\": True,\n        \"boost/*:without_regex\": True,\n        \"boost/*:without_serialization\": False,  # needed by boost date_time\n        # Stacktrace is needed by CryFS. Stacktrace is a header-only library and linking against its static version actually **disables** stacktraces,\n        # see https://www.boost.org/doc/libs/1_65_0/doc/html/stacktrace/getting_started.html#stacktrace.getting_started.enabling_and_disabling_stacktrac\n        # This is why we need to **not** link against the static version of stacktrace.\n        \"boost/*:without_stacktrace\": True,\n        \"boost/*:without_system\": False,  # needed by CryFS\n        \"boost/*:without_test\": True,\n        \"boost/*:without_thread\": False,  # needed by CryFS\n        \"boost/*:without_timer\": True,\n        \"boost/*:without_type_erasure\": True,\n        \"boost/*:without_url\": True,\n        \"boost/*:without_wave\": True,\n\t\"libcurl/*:shared\": False,\n        \"libcurl/*:fPIC\": True,\n        \"libcurl/*:with_dict\": False,\n        \"libcurl/*:with_file\": False,\n        \"libcurl/*:with_ftp\": False,\n        \"libcurl/*:with_gopher\": False,\n        \"libcurl/*:with_http\": True,\n        \"libcurl/*:with_imap\": False,\n        \"libcurl/*:with_ldap\": False,\n        \"libcurl/*:with_mqtt\": False,\n        \"libcurl/*:with_pop3\": False,\n        \"libcurl/*:with_rtsp\": False,\n        \"libcurl/*:with_smb\": False,\n        \"libcurl/*:with_smtp\": False,\n        \"libcurl/*:with_telnet\": False,\n        \"libcurl/*:with_tftp\": False,\n        \"libcurl/*:with_libssh2\": False,\n        \"libcurl/*:with_libidn\": False,\n        \"libcurl/*:with_librtmp\": False,\n        \"libcurl/*:with_libgsasl\": False,\n        \"libcurl/*:with_libpsl\": False,\n        \"libcurl/*:with_largemaxwritesize\": False,\n        \"libcurl/*:with_nghttp2\": False,\n        \"libcurl/*:with_zlib\": True,\n        \"libcurl/*:with_brotli\": False,\n        \"libcurl/*:with_zstd\": False,\n        \"libcurl/*:with_c_ares\": False,\n        \"libcurl/*:with_threaded_resolver\": True,\n        \"libcurl/*:with_proxy\": True,\n        \"libcurl/*:with_crypto_auth\": False,\n        \"libcurl/*:with_ntlm\": False,\n        \"libcurl/*:with_ntlm_wb\": False,\n        \"libcurl/*:with_cookies\": False,\n        \"libcurl/*:with_ipv6\": True,\n        \"libcurl/*:with_docs\": False,\n        \"libcurl/*:with_misc_docs\": False,\n        \"libcurl/*:with_verbose_debug\": True,\n        \"libcurl/*:with_symbol_hiding\": False,\n        \"libcurl/*:with_unix_sockets\": False,\n        \"libcurl/*:with_verbose_strings\": True,\n        \"libcurl/*:with_ca_bundle\": \"auto\",\n        \"libcurl/*:with_ca_path\": \"auto\",\n        \"libcurl/*:with_ca_fallback\": False,\n    }\n\n    def configure(self):\n        self.options[\"libcurl/*\"].with_ssl = \"darwinssl\" if is_apple_os(self) else \"schannel\" if is_msvc(self) else \"openssl\"\n\n    def validate(self):\n        check_min_cppstd(self, \"17\")\n     \n    def requirements(self):\n        self.requires(\"range-v3/cci.20240905\")\n        self.requires(\"spdlog/1.14.1\")\n        self.requires(\"boost/1.84.0\")\n        if self.options.update_checks:\n            self.requires(\"libcurl/8.9.1\")\n        if self.options.build_tests:\n            self.requires(\"gtest/1.15.0\")\n\n    def layout(self):\n        cmake_layout(self)\n\n    def build(self):\n        cmake = CMake(self)\n        cmake_vars = {\n            \"BUILD_TESTING\": self.options.build_tests,\n            \"CRYFS_UPDATE_CHECKS\": self.options.update_checks,\n            \"DISABLE_OPENMP\": self.options.disable_openmp,\n            \"USE_WERROR\": self.options.use_werror,\n            \"USE_CLANG_TIDY\": self.options.use_clang_tidy,\n            \"CMAKE_EXPORT_COMPILE_COMMANDS\": self.options.export_compile_commands,\n            \"USE_IWYU\": self.options.use_iwyu,\n            \"CLANG_TIDY_WARNINGS_AS_ERRORS\": self.options.clang_tidy_warnings_as_errors,\n        }\n        if self.options.use_ccache:\n            cmake_vars[\"CMAKE_C_COMPILER_LAUNCHER\"] = \"ccache\"\n            cmake_vars[\"CMAKE_CXX_COMPILER_LAUNCHER\"] = \"ccache\"\n            # ccache is incomptible with `/Zi` or `/ZI` and needs `/Z7`, see\n            # - https://discourse.cmake.org/t/early-experiences-with-msvc-debug-information-format-and-cmp0141/6859\n            # - https://learn.microsoft.com/en-us/cpp/build/reference/z7-zi-zi-debug-information-format?view=msvc-170\n            # - https://cmake.org/cmake/help/latest/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.html\n            cmake_vars[\"CMAKE_MSVC_DEBUG_INFORMATION_FORMAT\"] = \"Embedded\"\n        if self.options.windows_dokany_path != \"\":\n            cmake_vars[\"DOKAN_PATH\"] = self.options.windows_dokany_path\n        cmake.configure(cmake_vars)\n        cmake.build()\n\n"
        },
        {
          "name": "cpack",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-clang-tidy.sh",
          "type": "blob",
          "size": 1.078125,
          "content": "#!/bin/bash\n\n# Note: Call this from a cmake build directory (e.g. cmake/) for out-of-source builds\n# Examples:\n# mkdir cmake && cd cmake && ../run-clang-tidy.sh\n# mkdir cmake && cd cmake && ../run-clang-tidy.sh -fix\n# mkdir cmake && cd cmake && ../run-clang-tidy.sh -export-fixes fixes.yaml\n\nset -e\nset -v\n\nSCRIPT=run-clang-tidy-17.py\n\nexport NUMCORES=`nproc` && if [ ! -n \"$NUMCORES\" ]; then export NUMCORES=`sysctl -n hw.ncpu`; fi\necho Using ${NUMCORES} cores\n\n# Run cmake in current working directory, but on source that is in the same directory as this script file\nconan build . --build=missing -o \"&:build_tests=True\" -o \"&:export_compile_commands=True\" -o \"&:use_ccache=True\" -s build_type=Debug\n\n# Filter all third party code from the compilation database\nROOTPATH=$(realpath ${0%/*})\ncd build/Debug\ncat compile_commands.json|jq \"map(select(.file | test(\\\"^${ROOTPATH}/(src|test)/.*$\\\")))\" > compile_commands2.json\nrm compile_commands.json\nmv compile_commands2.json compile_commands.json\n\n${SCRIPT} -j${NUMCORES} -quiet -config-file ../../.clang-tidy -header-filter \"${ROOTPATH}/(src|test)/.*\" $@\n"
        },
        {
          "name": "run-iwyu.sh",
          "type": "blob",
          "size": 1.0361328125,
          "content": "#!/bin/bash\n\n# Note: Call this from a cmake build directory (e.g. cmake/) for out-of-source builds\n# Examples:\n# mkdir cmake && cd cmake && ../run-iwqu.sh\n# mkdir cmake && cd cmake && ../run-iwqu.sh -fix\n\nset -e\n\nexport NUMCORES=`nproc` && if [ ! -n \"$NUMCORES\" ]; then export NUMCORES=`sysctl -n hw.ncpu`; fi\necho Using ${NUMCORES} cores\n\n# Run cmake in current working directory, but on source that is in the same directory as this script file\ncmake -DBUILD_TESTING=on -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \"${0%/*}\"\n\n# Filter all third party code from the compilation database\ncat compile_commands.json|jq \"map(select(.file | test(\\\"^$(realpath ${0%/*})/(src|test)/.*$\\\")))\" > compile_commands2.json\nrm compile_commands.json\nmv compile_commands2.json compile_commands.json\n\nif [ \"$1\" = \"-fix\" ]; then\n  TMPFILE=/tmp/iwyu.`cat /dev/urandom | tr -cd 'a-f0-9' | head -c 8`.out\n\n  function cleanup {\n    rm ${TMPFILE}\n  }\n  trap cleanup EXIT\n\n  iwyu_tool -j${NUMCORES} -p. ${@:2} | tee ${TMPFILE}\n  fix_include < ${TMPFILE}\nelse\n  iwyu_tool -j${NUMCORES} -p. $@\nfi\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}