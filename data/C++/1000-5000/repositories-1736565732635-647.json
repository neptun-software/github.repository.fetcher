{
  "metadata": {
    "timestamp": 1736565732635,
    "page": 647,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "teeworlds/teeworlds",
      "stars": 2394,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.5029296875,
          "content": "# Why we disabled individual checks:\n#\n# clang-analyzer-optin.cplusplus.UninitializedObject\n#   TODO: Occurs commonly in graphics_threaded.h\n# clang-analyzer-optin.cplusplus.VirtualCall\n#   Occurs very commonly all over\n# clang-analyzer-optin.performance.Padding\n#   Too annoying to always align for perfect padding\n# clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,\n#   TODO: Requires C11 to fix\n# misc-unused-parameters\n#   TODO: Many changes\n\nChecks: >\n  -*,\n  bugprone-*,\n  -bugprone-assignment-in-if-condition,\n  -bugprone-branch-clone,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-implicit-widening-of-multiplication-result,\n  -bugprone-incorrect-roundings,\n  -bugprone-integer-division,\n  -bugprone-macro-parentheses,\n  -bugprone-narrowing-conversions,\n  -bugprone-parent-virtual-call,\n  -bugprone-reserved-identifier,\n  -bugprone-suspicious-include,\n  -bugprone-unhandled-self-assignment,\n  clang-analyzer-*,\n  -clang-analyzer-optin.cplusplus.UninitializedObject,\n  -clang-analyzer-optin.cplusplus.VirtualCall,\n  -clang-analyzer-optin.performance.Padding,\n  -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,\n  cppcoreguidelines-avoid-goto,\n  cppcoreguidelines-interfaces-global-init,\n  cppcoreguidelines-slicing,\n  cppcoreguidelines-virtual-class-destructor,\n  misc-*,\n  -misc-const-correctness,\n  -misc-no-recursion,\n  -misc-non-private-member-variables-in-classes,\n  -misc-static-assert,\n  -misc-unused-parameters,\n  performance-*,\n  -performance-no-int-to-ptr,\n  portability-*,\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9052734375,
          "content": "/.bam\n/bam\n/build\n/config.lua\n/objs\n/other/*/include\n/other/*/lib\n/other/*/linux\n/other/*/mac\n/other/*/windows\n__pycache__/\n*.dll\n*.dmg\n*.pyc\n*.pyo\nscripts/work/\n/SDL.dll\n/freetype.dll\n/autoexec.cfg\nother/freetype\nother/sdl\nInfo.plist\n\ncrapnet*\nfake_server*\nmap_resave*\nmap_version*\nmastersrv*\npacketgen*\nteeworlds*\n!other/bash-completion/teeworlds\n!teeworlds.manifest\n!teeworlds.rc\nteeworlds_srv*\n!other/bash-completion/teeworlds_srv\ntestrunner\nversionsrv*\n\n# IDE project files\n.cache\n.cproject\n.idea\n.project\n.settings\n.vs\n.vscode\n*.vcxproj\n*.vcxproj.filters\ncompile_commands.json\ncscope.files\ncscope.out\nout\ntags\n\n# CMake\ndata\ngenerated\n\n.ninja_deps\n.ninja_log\nCMakeCache.txt\nCMakeFiles\nCMakeSettings*\nCPackConfig.cmake\nCPackSourceConfig.cmake\nDebug\nMakefile\nRelWithDebInfo\nRelease\n_CPack_Packages/\nbuild.ninja\ncmake_install.cmake\ngoogletest-build\ngoogletest-download\ngoogletest-src\ninstall_manifest.txt\npack_*/\nrules.ninja\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2509765625,
          "content": "[submodule \"datasrc/languages\"]\n\tpath = datasrc/languages\n\turl = https://github.com/teeworlds/teeworlds-translation.git\n\tbranch = master\n[submodule \"datasrc/maps\"]\n\tpath = datasrc/maps\n\turl = https://github.com/teeworlds/teeworlds-maps.git\n\tbranch = master\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 61.416015625,
          "content": "cmake_minimum_required(VERSION 3.12...3.27.4)\n\nfile(STRINGS src/game/version.h VERSION_LINE\n  LIMIT_COUNT 1\n  REGEX GAME_RELEASE_VERSION\n)\n\nif(VERSION_LINE MATCHES \"\\\"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+|[0-9]+\\\\.[0-9]+)\\\"\")\n  set(VERSION_MAJOR ${CMAKE_MATCH_1})\n  set(VERSION_MINOR ${CMAKE_MATCH_2})\n  set(VERSION_PATCH ${CMAKE_MATCH_3})\nelseif(VERSION_LINE MATCHES \"\\\"([0-9]+)\\\\.([0-9]+)\\\"\")\n  set(VERSION_MAJOR ${CMAKE_MATCH_1})\n  set(VERSION_MINOR ${CMAKE_MATCH_2})\n  set(VERSION_PATCH \"0\")\nelse()\n  message(FATAL_ERROR \"Couldn't parse version from src/game/version.h\")\nendif()\n\n# Extra support for CMake pre-3.0\nif(NOT POLICY CMP0048)\n  set(PROJECT_VERSION_MAJOR ${VERSION_MAJOR})\n  set(PROJECT_VERSION_MINOR ${VERSION_MINOR})\n  set(PROJECT_VERSION_PATCH ${VERSION_PATCH})\n  set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})\nendif()\n\nproject(teeworlds VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})\n\nset(ORIGINAL_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})\nset(ORIGINAL_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES})\nset(ORIGINAL_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\nset(OWN_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)\nset(CMAKE_MODULE_PATH ${OWN_CMAKE_MODULE_PATH})\n\nif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n  set(TARGET_BITS \"32\")\nelse()\n  set(TARGET_BITS \"64\")\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  set(TARGET_OS \"windows\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  set(TARGET_OS \"linux\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set(TARGET_OS \"mac\")\nendif()\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckSymbolExists)\n\ncheck_symbol_exists(__i386 \"\" TARGET_ARCH_X86_i386)\nif(TARGET_ARCH_X86_i386)\n  set(TARGET_ARCH x86)\nelse()\n  set(TARGET_ARCH)\nendif()\n\nset(AUTO_DEPENDENCIES_DEFAULT OFF)\nif(TARGET_OS STREQUAL \"windows\")\n  set(AUTO_DEPENDENCIES_DEFAULT ON)\nendif()\n\noption(CLIENT \"Compile client\" ON)\noption(HEADLESS_CLIENT \"Build the client without graphics\" OFF)\noption(DOWNLOAD_DEPENDENCIES \"Download dependencies (only available on Windows)\" ${AUTO_DEPENDENCIES_DEFAULT})\noption(DOWNLOAD_GTEST \"Download and compile GTest if not found\" ${AUTO_DEPENDENCIES_DEFAULT})\noption(PREFER_BUNDLED_LIBS \"Prefer bundled libraries over system libraries\" ${AUTO_DEPENDENCIES_DEFAULT})\noption(DEV \"Don't generate stuff necessary for packaging\" OFF)\n\nset(OpenGL_GL_PREFERENCE GLVND)\n\n# Set the default build type to Release\nif(NOT(CMAKE_BUILD_TYPE))\n  if(NOT(DEV))\n    set(CMAKE_BUILD_TYPE Release)\n  else()\n    set(CMAKE_BUILD_TYPE Debug)\n  endif()\nendif()\n\nset(DBG $<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>)\n\nset_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS\n  src/game/version.h\n)\n\nset(SERVER_EXECUTABLE teeworlds_srv CACHE STRING \"Name of the built server executable\")\nset(CLIENT_EXECUTABLE teeworlds CACHE STRING \"Name of the build client executable\")\n\n########################################################################\n# Download dependencies\n########################################################################\n\nfind_package(Python3)\nif(DOWNLOAD_DEPENDENCIES)\n  if(Python3_EXECUTABLE AND TARGET_OS STREQUAL \"windows\" AND TARGET_BITS)\n    set(DOWNLOADS)\n    foreach(d freetype sdl)\n      if(NOT EXISTS \"${PROJECT_SOURCE_DIR}/other/${d}/${TARGET_OS}/lib${TARGET_BITS}\")\n        list(APPEND DOWNLOADS ${d})\n      endif()\n    endforeach()\n    if(DOWNLOADS)\n      message(STATUS \"Downloading Freetype and SDL 2\")\n      execute_process(COMMAND ${Python3_EXECUTABLE} scripts/download.py ${DOWNLOADS}\n        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n      )\n    endif()\n  endif()\nendif()\n\n########################################################################\n# Compiler flags\n########################################################################\n\nfunction(add_c_compiler_flag_if_supported VARIABLE FLAG)\n  if(ARGC GREATER 2)\n    set(CHECKED_FLAG \"${ARGV2}\")\n  else()\n    set(CHECKED_FLAG \"${FLAG}\")\n  endif()\n  string(REGEX REPLACE \"[^A-Za-z0-9]\" \"_\" CONFIG_VARIABLE \"FLAG_SUPPORTED${CHECKED_FLAG}\")\n  check_c_compiler_flag(\"${CHECKED_FLAG}\" ${CONFIG_VARIABLE})\n  if(${CONFIG_VARIABLE})\n    if(${VARIABLE})\n      set(\"${VARIABLE}\" \"${${VARIABLE}};${FLAG}\" PARENT_SCOPE)\n    else()\n      set(\"${VARIABLE}\" \"${FLAG}\" PARENT_SCOPE)\n    endif()\n  endif()\nendfunction()\n\nif(NOT MSVC)\n  # Protect the stack pointer.\n  add_c_compiler_flag_if_supported(OUR_FLAGS -fstack-protector-all)\n\n  # Control-flow protection. Should protect against ROP.\n  add_c_compiler_flag_if_supported(OUR_FLAGS -fcf-protection)\n\n  # Inaccurate floating point numbers cause problems on mingw-w64-gcc when\n  # compiling for x86, might cause problems elsewhere. So don't store floats\n  # in registers but keep them at higher accuracy.\n  if(TARGET_ARCH STREQUAL \"x86\")\n    add_c_compiler_flag_if_supported(OUR_FLAGS -ffloat-store)\n  endif()\n\n  # gcc < 4.10 chokes on _mm_pause on x86 without SSE support.\n  if(TARGET_ARCH STREQUAL \"x86\")\n    check_c_source_compiles(\"#include <immintrin.h>\\nint main() { _mm_pause(); return 0; }\" MM_PAUSE_WORKS_WITHOUT_MSSE2)\n    if(NOT MM_PAUSE_WORKS_WITHOUT_MSSE2)\n      add_c_compiler_flag_if_supported(OUR_FLAGS -msse2)\n    endif()\n  endif()\n\n  if(TARGET_OS STREQUAL \"mac\")\n    add_c_compiler_flag_if_supported(OUR_FLAGS -stdlib=libc++)\n    add_c_compiler_flag_if_supported(OUR_FLAGS -mmacosx-version-min=10.7)\n  endif()\n\n  add_c_compiler_flag_if_supported(OUR_FLAGS_OWN -Wall)\n  if(CMAKE_VERSION VERSION_GREATER 3.3 OR CMAKE_VERSION VERSION_EQUAL 3.3)\n    add_c_compiler_flag_if_supported(OUR_FLAGS_OWN\n      $<$<COMPILE_LANGUAGE:C>:-Wdeclaration-after-statement>\n      -Wdeclaration-after-statement\n    )\n  endif()\n  add_c_compiler_flag_if_supported(OUR_FLAGS_OWN -Wextra)\n  add_c_compiler_flag_if_supported(OUR_FLAGS_OWN -Wno-unused-parameter)\n  add_c_compiler_flag_if_supported(OUR_FLAGS_OWN -Wno-missing-field-initializers)\n  add_c_compiler_flag_if_supported(OUR_FLAGS_OWN -Wformat=2) # Warn about format strings.\n  add_c_compiler_flag_if_supported(OUR_FLAGS_DEP -Wno-implicit-function-declaration)\nendif()\n\nif(NOT MSVC)\n  check_c_compiler_flag(\"-O2;-Wp,-Werror;-D_FORTIFY_SOURCE=2\" DEFINE_FORTIFY_SOURCE) # Some distributions define _FORTIFY_SOURCE by themselves.\nendif()\n\n########################################################################\n# COMMON FUNCTIONS\n########################################################################\n\nfunction(set_glob VAR GLOBBING EXTS DIRECTORY) # ...\n  set(GLOBS)\n  foreach(ext ${EXTS})\n    list(APPEND GLOBS \"${DIRECTORY}/*.${ext}\")\n  endforeach()\n  file(${GLOBBING} GLOB_RESULT ${GLOBS})\n  list(SORT GLOB_RESULT)\n  set(FILES)\n  foreach(file ${ARGN})\n    list(APPEND FILES \"${PROJECT_SOURCE_DIR}/${DIRECTORY}/${file}\")\n  endforeach()\n\n  if(NOT FILES STREQUAL GLOB_RESULT)\n    message(AUTHOR_WARNING \"${VAR} does not contain every file from directory ${DIRECTORY}\")\n    set(LIST_BUT_NOT_GLOB)\n    if(POLICY CMP0057)\n      cmake_policy(SET CMP0057 NEW)\n      foreach(file ${FILES})\n        if(NOT file IN_LIST GLOB_RESULT)\n          list(APPEND LIST_BUT_NOT_GLOB ${file})\n        endif()\n      endforeach()\n      if(LIST_BUT_NOT_GLOB)\n        message(AUTHOR_WARNING \"Entries only present in ${VAR}: ${LIST_BUT_NOT_GLOB}\")\n      endif()\n      set(GLOB_BUT_NOT_LIST)\n      foreach(file ${GLOB_RESULT})\n        if(NOT file IN_LIST FILES)\n          list(APPEND GLOB_BUT_NOT_LIST ${file})\n        endif()\n      endforeach()\n      if(GLOB_BUT_NOT_LIST)\n        message(AUTHOR_WARNING \"Entries only present in ${DIRECTORY}: ${GLOB_BUT_NOT_LIST}\")\n      endif()\n      if(NOT LIST_BUT_NOT_GLOB AND NOT GLOB_BUT_NOT_LIST)\n        message(AUTHOR_WARNING \"${VAR} is not alphabetically sorted\")\n      endif()\n    endif()\n  endif()\n\n  set(${VAR} ${FILES} PARENT_SCOPE)\nendfunction()\n\nfunction(set_src VAR GLOBBING DIRECTORY) # ...\n  set_glob(${VAR} ${GLOBBING} \"c;cpp;h\" ${DIRECTORY} ${ARGN})\n  set(${VAR} ${${VAR}} PARENT_SCOPE)\nendfunction()\n\n########################################################################\n# INITIALIZE TARGET LISTS\n########################################################################\n\nset(TARGETS_OWN)\nset(TARGETS_DEP)\n\nset(TARGETS_LINK) # Targets with a linking stage.\n\n########################################################################\n# DEPENDENCIES\n########################################################################\n\nfunction(set_extra_dirs_lib VARIABLE NAME)\n  set(\"PATHS_${VARIABLE}_LIBDIR\" PARENT_SCOPE)\n  set(\"HINTS_${VARIABLE}_LIBDIR\" PARENT_SCOPE)\n  if(PREFER_BUNDLED_LIBS)\n    set(TYPE HINTS)\n  else()\n    set(TYPE PATHS)\n  endif()\n  if(TARGET_BITS AND TARGET_OS)\n    set(DIR \"other/${NAME}/${TARGET_OS}/lib${TARGET_BITS}\")\n    set(\"${TYPE}_${VARIABLE}_LIBDIR\" \"${DIR}\" PARENT_SCOPE)\n    set(\"EXTRA_${VARIABLE}_LIBDIR\" \"${DIR}\" PARENT_SCOPE)\n  endif()\nendfunction()\n\nfunction(set_extra_dirs_include VARIABLE NAME LIBRARY)\n  set(\"PATHS_${VARIABLE}_INCLUDEDIR\" PARENT_SCOPE)\n  set(\"HINTS_${VARIABLE}_INCLUDEDIR\" PARENT_SCOPE)\n  is_bundled(IS_BUNDLED \"${LIBRARY}\")\n  if(IS_BUNDLED)\n    set(\"HINTS_${VARIABLE}_INCLUDEDIR\" \"other/${NAME}/include\" \"other/${NAME}/include/${TARGET_OS}\" PARENT_SCOPE)\n  endif()\nendfunction()\n\nif(CMAKE_CROSSCOMPILING)\n  set(CROSSCOMPILING_NO_CMAKE_SYSTEM_PATH NO_CMAKE_SYSTEM_PATH)\nelse()\n  set(CROSSCOMPILING_NO_CMAKE_SYSTEM_PATH)\nendif()\n\nfunction(is_bundled VARIABLE PATH)\n  if(PATH)\n    string(FIND \"${PATH}\" \"${PROJECT_SOURCE_DIR}\" LOCAL_PATH_POS)\n    if(LOCAL_PATH_POS EQUAL 0 AND TARGET_BITS AND TARGET_OS)\n      set(\"${VARIABLE}\" ON PARENT_SCOPE)\n    else()\n      set(\"${VARIABLE}\" OFF PARENT_SCOPE)\n    endif()\n  else()\n    set(\"${VARIABLE}\" OFF PARENT_SCOPE)\n  endif()\nendfunction()\n\nif(NOT CMAKE_CROSSCOMPILING)\n  # Check for PkgConfig once so all the other `find_package` calls can do it\n  # quietly.\n  find_package(PkgConfig)\nendif()\nfind_package(ZLIB)\nfind_package(Crypto)\nfind_package(Freetype)\nfind_package(Git)\nfind_package(GTest)\nfind_package(Pnglite)\nfind_package(SDL2)\nfind_package(Threads)\nfind_package(Wavpack)\n\n\nif(TARGET_OS AND TARGET_OS STREQUAL \"mac\")\n  find_program(CMAKE_OTOOL otool)\n  find_program(DMG dmg)\n  find_program(HFSPLUS hfsplus)\n  find_program(NEWFS_HFS newfs_hfs)\n  if(DMG AND HFSPLUS AND NEWFS_HFS)\n    set(DMGTOOLS_FOUND ON)\n  else()\n    set(DMGTOOLS_FOUND OFF)\n  endif()\n\n  find_program(HDIUTIL hdiutil)\n  if(HDIUTIL)\n    set(HDIUTIL_FOUND ON)\n  else()\n    set(HDIUTIL_FOUND OFF)\n  endif()\nendif()\n\nmessage(STATUS \"******** Teeworlds ********\")\nmessage(STATUS \"Target OS: ${TARGET_OS} ${TARGET_BITS}bit\")\nmessage(STATUS \"Compiler: ${CMAKE_CXX_COMPILER}\")\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\nmessage(STATUS \"Dependencies:\")\nfunction(show_dependency_status OUTPUT_NAME NAME)\n  if(${NAME}_FOUND)\n    if(${NAME}_BUNDLED)\n      message(STATUS \" * ${OUTPUT_NAME} not found (using bundled version)\")\n    else()\n      message(STATUS \" * ${OUTPUT_NAME} found\")\n    endif()\n  else()\n    message(STATUS \" * ${OUTPUT_NAME} not found\")\n  endif()\nendfunction()\n\nif(TARGET_OS AND TARGET_OS STREQUAL \"mac\")\n  show_dependency_status(\"Dmg tools\" DMGTOOLS)\nendif()\nshow_dependency_status(\"Freetype\" FREETYPE)\nif(TARGET_OS AND TARGET_OS STREQUAL \"mac\")\n  show_dependency_status(\"Hdiutil\" HDIUTIL)\nendif()\nshow_dependency_status(\"OpenSSL Crypto\" CRYPTO)\nshow_dependency_status(\"Pnglite\" PNGLITE)\nshow_dependency_status(\"Python3\" Python3)\nshow_dependency_status(\"SDL2\" SDL2)\nshow_dependency_status(\"Wavpack\" WAVPACK)\nshow_dependency_status(\"Zlib\" ZLIB)\n\nif(NOT(Python3_FOUND))\n  message(SEND_ERROR \"You must install Python to compile Teeworlds\")\nendif()\n\nif(CLIENT AND NOT(FREETYPE_FOUND))\n  message(SEND_ERROR \"You must install Freetype to compile the Teeworlds client\")\nendif()\nif(CLIENT AND NOT(SDL2_FOUND))\n  message(SEND_ERROR \"You must install SDL2 to compile the Teeworlds client\")\nendif()\nif(NOT(GTEST_FOUND))\n  if(DOWNLOAD_GTEST)\n    if(GIT_FOUND)\n      message(STATUS \"Automatically downloading GTest to be able to run tests\")\n    else()\n      set(DOWNLOAD_GTEST OFF)\n      message(WARNING \"To automatically download GTest, you have to install Git\")\n    endif()\n  else()\n    message(STATUS \"To run the tests, you have to install GTest\")\n  endif()\nendif()\n\nif(TARGET_OS STREQUAL \"windows\")\n  set(PLATFORM_CLIENT)\n  set(PLATFORM_CLIENT_LIBS opengl32 winmm imm32)\n  set(PLATFORM_LIBS ws2_32) # Windows sockets\nelseif(TARGET_OS STREQUAL \"mac\")\n  find_library(CARBON Carbon)\n  find_library(COCOA Cocoa)\n  find_library(OPENGL OpenGL)\n  set(PLATFORM_CLIENT\n    src/macoslaunch/client.m\n  )\n  set(PLATFORM_CLIENT_LIBS ${COCOA} ${OPENGL})\n  set(PLATFORM_LIBS ${CARBON})\nelse()\n  set(PLATFORM_CLIENT)\n  find_package(OpenGL)\n  if(CMAKE_VERSION VERSION_LESS 3.10)\n    set(PLATFORM_CLIENT_LIBS ${OPENGL_gl_LIBRARY})\n  else()\n    set(PLATFORM_CLIENT_LIBS ${OPENGL_opengl_LIBRARY})\n  endif()\n  set(PLATFORM_CLIENT_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})\n  if(TARGET_OS STREQUAL \"linux\")\n    set(PLATFORM_LIBS rt) # clock_gettime for glibc < 2.17\n  else()\n    set(PLATFORM_LIBS)\n  endif()\nendif()\n\n########################################################################\n# DOWNLOAD GTEST\n########################################################################\n\nif(NOT(GTEST_FOUND) AND DOWNLOAD_GTEST)\n  set(TEEWORLDS_GTEST_VERSION v1.13.0)\n  configure_file(cmake/Download_GTest_CMakeLists.txt.in googletest-download/CMakeLists.txt)\n  execute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" .\n    RESULT_VARIABLE result\n    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/googletest-download\n  )\n  if(result)\n    message(WARNING \"CMake step for googletest failed: ${result}\")\n    set(DOWNLOAD_GTEST OFF)\n  else()\n    execute_process(COMMAND ${CMAKE_COMMAND} --build .\n      RESULT_VARIABLE result\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/googletest-download\n    )\n    if(result)\n      message(WARNING \"Build step for googletest failed: ${result}\")\n      set(DOWNLOAD_GTEST OFF)\n    else()\n      # Prevent overriding the parent project's compiler/linker settings on Windows\n      set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n      # Add googletest directly to our build. This defines the gtest target.\n      add_subdirectory(\n        ${PROJECT_BINARY_DIR}/googletest-src\n        ${PROJECT_BINARY_DIR}/googletest-build\n        EXCLUDE_FROM_ALL\n      )\n\n      if(MSVC)\n        foreach(target gtest)\n          # `/w` disables all warnings. This is needed because `gtest` enables\n          # `/WX` (equivalent of `-Werror`) for some reason, breaking builds\n          # when MSVS adds new warnings.\n          target_compile_options(${target} PRIVATE /w)\n          if(POLICY CMP0091)\n            set_property(TARGET ${target} PROPERTY MSVC_RUNTIME_LIBRARY MultiThreaded$<${DBG}:Debug>)\n          else()\n            target_compile_options(${target} PRIVATE $<$<NOT:${DBG}>:/MT> $<${DBG}:/MTd>)\n          endif()\n        endforeach()\n      endif()\n\n      set(GTEST_LIBRARIES gtest)\n      set(GTEST_INCLUDE_DIRS)\n      if(CMAKE_VERSION VERSION_LESS 2.8.11)\n        set(GTEST_INCLUDE_DIRS \"${gtest_SOURCE_DIR}/include\")\n      endif()\n    endif()\n  endif()\nendif()\n\n########################################################################\n# DEPENDENCY COMPILATION\n########################################################################\n\nset_src(DEP_JSON_SRC GLOB src/engine/external/json-parser json.c json.h)\nadd_library(json EXCLUDE_FROM_ALL OBJECT ${DEP_JSON_SRC})\n\nset_src(DEP_MD5_SRC GLOB src/engine/external/md5 md5.c md5.h)\nadd_library(md5 EXCLUDE_FROM_ALL OBJECT ${DEP_MD5_SRC})\n\nlist(APPEND TARGETS_DEP json md5)\nset(DEP_JSON $<TARGET_OBJECTS:json>)\nset(DEP_MD5)\nif(NOT CRYPTO_FOUND)\n  set(DEP_MD5 $<TARGET_OBJECTS:md5>)\nendif()\n\n########################################################################\n# DATA\n########################################################################\n\nset(EXPECTED_DATA\n  audio/foley_body_impact-01.wv\n  audio/foley_body_impact-02.wv\n  audio/foley_body_impact-03.wv\n  audio/foley_body_splat-01.wv\n  audio/foley_body_splat-02.wv\n  audio/foley_body_splat-03.wv\n  audio/foley_body_splat-04.wv\n  audio/foley_dbljump-01.wv\n  audio/foley_dbljump-02.wv\n  audio/foley_dbljump-03.wv\n  audio/foley_foot_left-01.wv\n  audio/foley_foot_left-02.wv\n  audio/foley_foot_left-03.wv\n  audio/foley_foot_left-04.wv\n  audio/foley_foot_right-01.wv\n  audio/foley_foot_right-02.wv\n  audio/foley_foot_right-03.wv\n  audio/foley_foot_right-04.wv\n  audio/foley_land-01.wv\n  audio/foley_land-02.wv\n  audio/foley_land-03.wv\n  audio/foley_land-04.wv\n  audio/hook_attach-01.wv\n  audio/hook_attach-02.wv\n  audio/hook_attach-03.wv\n  audio/hook_loop-01.wv\n  audio/hook_loop-02.wv\n  audio/hook_noattach-01.wv\n  audio/hook_noattach-02.wv\n  audio/hook_noattach-03.wv\n  audio/music_menu.wv\n  audio/sfx_ctf_cap_pl.wv\n  audio/sfx_ctf_drop.wv\n  audio/sfx_ctf_grab_en.wv\n  audio/sfx_ctf_grab_pl.wv\n  audio/sfx_ctf_rtn.wv\n  audio/sfx_hit_strong-01.wv\n  audio/sfx_hit_strong-02.wv\n  audio/sfx_hit_weak-01.wv\n  audio/sfx_hit_weak-02.wv\n  audio/sfx_hit_weak-03.wv\n  audio/sfx_msg-client.wv\n  audio/sfx_msg-highlight.wv\n  audio/sfx_msg-server.wv\n  audio/sfx_pickup_arm-01.wv\n  audio/sfx_pickup_arm-02.wv\n  audio/sfx_pickup_arm-03.wv\n  audio/sfx_pickup_arm-04.wv\n  audio/sfx_pickup_gun.wv\n  audio/sfx_pickup_hrt-01.wv\n  audio/sfx_pickup_hrt-02.wv\n  audio/sfx_pickup_launcher.wv\n  audio/sfx_pickup_ninja.wv\n  audio/sfx_pickup_sg.wv\n  audio/sfx_skid-01.wv\n  audio/sfx_skid-02.wv\n  audio/sfx_skid-03.wv\n  audio/sfx_skid-04.wv\n  audio/sfx_spawn_wpn-01.wv\n  audio/sfx_spawn_wpn-02.wv\n  audio/sfx_spawn_wpn-03.wv\n  audio/vo_teefault_cry-01.wv\n  audio/vo_teefault_cry-02.wv\n  audio/vo_teefault_ninja-01.wv\n  audio/vo_teefault_ninja-02.wv\n  audio/vo_teefault_ninja-03.wv\n  audio/vo_teefault_ninja-04.wv\n  audio/vo_teefault_pain_long-01.wv\n  audio/vo_teefault_pain_long-02.wv\n  audio/vo_teefault_pain_short-01.wv\n  audio/vo_teefault_pain_short-02.wv\n  audio/vo_teefault_pain_short-03.wv\n  audio/vo_teefault_pain_short-04.wv\n  audio/vo_teefault_pain_short-05.wv\n  audio/vo_teefault_pain_short-06.wv\n  audio/vo_teefault_pain_short-07.wv\n  audio/vo_teefault_pain_short-08.wv\n  audio/vo_teefault_pain_short-09.wv\n  audio/vo_teefault_pain_short-10.wv\n  audio/vo_teefault_pain_short-11.wv\n  audio/vo_teefault_pain_short-12.wv\n  audio/vo_teefault_sledge-01.wv\n  audio/vo_teefault_sledge-02.wv\n  audio/vo_teefault_sledge-03.wv\n  audio/vo_teefault_spawn-01.wv\n  audio/vo_teefault_spawn-02.wv\n  audio/vo_teefault_spawn-03.wv\n  audio/vo_teefault_spawn-04.wv\n  audio/vo_teefault_spawn-05.wv\n  audio/vo_teefault_spawn-06.wv\n  audio/vo_teefault_spawn-07.wv\n  audio/wp_flump_explo-01.wv\n  audio/wp_flump_explo-02.wv\n  audio/wp_flump_explo-03.wv\n  audio/wp_flump_launch-01.wv\n  audio/wp_flump_launch-02.wv\n  audio/wp_flump_launch-03.wv\n  audio/wp_gun_fire-01.wv\n  audio/wp_gun_fire-02.wv\n  audio/wp_gun_fire-03.wv\n  audio/wp_hammer_hit-01.wv\n  audio/wp_hammer_hit-02.wv\n  audio/wp_hammer_hit-03.wv\n  audio/wp_hammer_swing-01.wv\n  audio/wp_hammer_swing-02.wv\n  audio/wp_hammer_swing-03.wv\n  audio/wp_laser_bnce-01.wv\n  audio/wp_laser_bnce-02.wv\n  audio/wp_laser_bnce-03.wv\n  audio/wp_laser_fire-01.wv\n  audio/wp_laser_fire-02.wv\n  audio/wp_laser_fire-03.wv\n  audio/wp_ninja_attack-01.wv\n  audio/wp_ninja_attack-02.wv\n  audio/wp_ninja_attack-03.wv\n  audio/wp_ninja_attack-04.wv\n  audio/wp_ninja_hit-01.wv\n  audio/wp_ninja_hit-02.wv\n  audio/wp_ninja_hit-03.wv\n  audio/wp_ninja_hit-04.wv\n  audio/wp_noammo-01.wv\n  audio/wp_noammo-02.wv\n  audio/wp_noammo-03.wv\n  audio/wp_noammo-04.wv\n  audio/wp_noammo-05.wv\n  audio/wp_shotty_fire-01.wv\n  audio/wp_shotty_fire-02.wv\n  audio/wp_shotty_fire-03.wv\n  audio/wp_switch-01.wv\n  audio/wp_switch-02.wv\n  audio/wp_switch-03.wv\n  countryflags/AD.png\n  countryflags/AE.png\n  countryflags/AF.png\n  countryflags/AG.png\n  countryflags/AI.png\n  countryflags/AL.png\n  countryflags/AM.png\n  countryflags/AO.png\n  countryflags/AR.png\n  countryflags/AS.png\n  countryflags/AT.png\n  countryflags/AU.png\n  countryflags/AW.png\n  countryflags/AX.png\n  countryflags/AZ.png\n  countryflags/BA.png\n  countryflags/BB.png\n  countryflags/BD.png\n  countryflags/BE.png\n  countryflags/BF.png\n  countryflags/BG.png\n  countryflags/BH.png\n  countryflags/BI.png\n  countryflags/BJ.png\n  countryflags/BL.png\n  countryflags/BM.png\n  countryflags/BN.png\n  countryflags/BO.png\n  countryflags/BR.png\n  countryflags/BS.png\n  countryflags/BT.png\n  countryflags/BW.png\n  countryflags/BY.png\n  countryflags/BZ.png\n  countryflags/CA.png\n  countryflags/CC.png\n  countryflags/CD.png\n  countryflags/CF.png\n  countryflags/CG.png\n  countryflags/CH.png\n  countryflags/CI.png\n  countryflags/CK.png\n  countryflags/CL.png\n  countryflags/CM.png\n  countryflags/CN.png\n  countryflags/CO.png\n  countryflags/CR.png\n  countryflags/CU.png\n  countryflags/CV.png\n  countryflags/CW.png\n  countryflags/CX.png\n  countryflags/CY.png\n  countryflags/CZ.png\n  countryflags/DE.png\n  countryflags/DJ.png\n  countryflags/DK.png\n  countryflags/DM.png\n  countryflags/DO.png\n  countryflags/DZ.png\n  countryflags/EC.png\n  countryflags/EE.png\n  countryflags/EG.png\n  countryflags/EH.png\n  countryflags/ER.png\n  countryflags/ES.png\n  countryflags/ET.png\n  countryflags/FI.png\n  countryflags/FJ.png\n  countryflags/FK.png\n  countryflags/FM.png\n  countryflags/FO.png\n  countryflags/FR.png\n  countryflags/GA.png\n  countryflags/GB.png\n  countryflags/GD.png\n  countryflags/GE.png\n  countryflags/GF.png\n  countryflags/GG.png\n  countryflags/GH.png\n  countryflags/GI.png\n  countryflags/GL.png\n  countryflags/GM.png\n  countryflags/GN.png\n  countryflags/GP.png\n  countryflags/GQ.png\n  countryflags/GR.png\n  countryflags/GS.png\n  countryflags/GT.png\n  countryflags/GU.png\n  countryflags/GW.png\n  countryflags/GY.png\n  countryflags/HK.png\n  countryflags/HN.png\n  countryflags/HR.png\n  countryflags/HT.png\n  countryflags/HU.png\n  countryflags/ID.png\n  countryflags/IE.png\n  countryflags/IL.png\n  countryflags/IM.png\n  countryflags/IN.png\n  countryflags/IO.png\n  countryflags/IQ.png\n  countryflags/IR.png\n  countryflags/IS.png\n  countryflags/IT.png\n  countryflags/JE.png\n  countryflags/JM.png\n  countryflags/JO.png\n  countryflags/JP.png\n  countryflags/KE.png\n  countryflags/KG.png\n  countryflags/KH.png\n  countryflags/KI.png\n  countryflags/KM.png\n  countryflags/KN.png\n  countryflags/KP.png\n  countryflags/KR.png\n  countryflags/KW.png\n  countryflags/KY.png\n  countryflags/KZ.png\n  countryflags/LA.png\n  countryflags/LB.png\n  countryflags/LC.png\n  countryflags/LI.png\n  countryflags/LK.png\n  countryflags/LR.png\n  countryflags/LS.png\n  countryflags/LT.png\n  countryflags/LU.png\n  countryflags/LV.png\n  countryflags/LY.png\n  countryflags/MA.png\n  countryflags/MC.png\n  countryflags/MD.png\n  countryflags/ME.png\n  countryflags/MF.png\n  countryflags/MG.png\n  countryflags/MH.png\n  countryflags/MK.png\n  countryflags/ML.png\n  countryflags/MM.png\n  countryflags/MN.png\n  countryflags/MO.png\n  countryflags/MP.png\n  countryflags/MQ.png\n  countryflags/MR.png\n  countryflags/MS.png\n  countryflags/MT.png\n  countryflags/MU.png\n  countryflags/MV.png\n  countryflags/MW.png\n  countryflags/MX.png\n  countryflags/MY.png\n  countryflags/MZ.png\n  countryflags/NA.png\n  countryflags/NC.png\n  countryflags/NE.png\n  countryflags/NF.png\n  countryflags/NG.png\n  countryflags/NI.png\n  countryflags/NL.png\n  countryflags/NO.png\n  countryflags/NP.png\n  countryflags/NR.png\n  countryflags/NU.png\n  countryflags/NZ.png\n  countryflags/OM.png\n  countryflags/PA.png\n  countryflags/PE.png\n  countryflags/PF.png\n  countryflags/PG.png\n  countryflags/PH.png\n  countryflags/PK.png\n  countryflags/PL.png\n  countryflags/PM.png\n  countryflags/PN.png\n  countryflags/PR.png\n  countryflags/PS.png\n  countryflags/PT.png\n  countryflags/PW.png\n  countryflags/PY.png\n  countryflags/QA.png\n  countryflags/RE.png\n  countryflags/RO.png\n  countryflags/RS.png\n  countryflags/RU.png\n  countryflags/RW.png\n  countryflags/SA.png\n  countryflags/SB.png\n  countryflags/SC.png\n  countryflags/SD.png\n  countryflags/SE.png\n  countryflags/SG.png\n  countryflags/SH.png\n  countryflags/SI.png\n  countryflags/SK.png\n  countryflags/SL.png\n  countryflags/SM.png\n  countryflags/SN.png\n  countryflags/SO.png\n  countryflags/SR.png\n  countryflags/SS.png\n  countryflags/ST.png\n  countryflags/SV.png\n  countryflags/SX.png\n  countryflags/SY.png\n  countryflags/SZ.png\n  countryflags/TC.png\n  countryflags/TD.png\n  countryflags/TF.png\n  countryflags/TG.png\n  countryflags/TH.png\n  countryflags/TJ.png\n  countryflags/TK.png\n  countryflags/TL.png\n  countryflags/TM.png\n  countryflags/TN.png\n  countryflags/TO.png\n  countryflags/TR.png\n  countryflags/TT.png\n  countryflags/TV.png\n  countryflags/TW.png\n  countryflags/TZ.png\n  countryflags/UA.png\n  countryflags/UG.png\n  countryflags/US.png\n  countryflags/UY.png\n  countryflags/UZ.png\n  countryflags/VA.png\n  countryflags/VC.png\n  countryflags/VE.png\n  countryflags/VG.png\n  countryflags/VI.png\n  countryflags/VN.png\n  countryflags/VU.png\n  countryflags/WF.png\n  countryflags/WS.png\n  countryflags/XBZ.png\n  countryflags/XCA.png\n  countryflags/XEN.png\n  countryflags/XES.png\n  countryflags/XGA.png\n  countryflags/XNI.png\n  countryflags/XSC.png\n  countryflags/XWA.png\n  countryflags/YE.png\n  countryflags/ZA.png\n  countryflags/ZM.png\n  countryflags/ZW.png\n  countryflags/default.png\n  countryflags/index.json\n  deadtee.png\n  editor/automap/desert_main.json\n  editor/automap/grass_doodads.json\n  editor/automap/grass_main.json\n  editor/automap/jungle_deathtiles.json\n  editor/automap/jungle_main.json\n  editor/automap/winter_main.json\n  editor/background.png\n  editor/checker.png\n  editor/cursor.png\n  editor/entities.png\n  emoticons.png\n  fonts/DejaVuSans.ttf\n  fonts/SourceHanSans.ttc\n  fonts/index.json\n  game.png\n  languages/belarusian.json\n  languages/bosnian.json\n  languages/brazilian_portuguese.json\n  languages/breton.json\n  languages/bulgarian.json\n  languages/catalan.json\n  languages/chuvash.json\n  languages/czech.json\n  languages/danish.json\n  languages/dutch.json\n  languages/esperanto.json\n  languages/estonian.json\n  languages/finnish.json\n  languages/french.json\n  languages/gaelic_scottish.json\n  languages/galician.json\n  languages/german.json\n  languages/greek.json\n  languages/hungarian.json\n  languages/index.json\n  languages/irish.json\n  languages/italian.json\n  languages/japanese.json\n  languages/korean.json\n  languages/kyrgyz.json\n  languages/license.txt\n  languages/lithuanian.json\n  languages/norwegian.json\n  languages/polish.json\n  languages/portuguese.json\n  languages/readme.txt\n  languages/romanian.json\n  languages/russian.json\n  languages/serbian.json\n  languages/simplified_chinese.json\n  languages/slovak.json\n  languages/slovenian.json\n  languages/spanish.json\n  languages/swedish.json\n  languages/traditional_chinese.json\n  languages/turkish.json\n  languages/ukrainian.json\n  mapres/bg_cloud1.png\n  mapres/bg_cloud2.png\n  mapres/bg_cloud3.png\n  mapres/desert_doodads.png\n  mapres/desert_main.png\n  mapres/desert_mountains.png\n  mapres/desert_mountains2.png\n  mapres/desert_sun.png\n  mapres/easter.png\n  mapres/generic_deathtiles.png\n  mapres/generic_lamps.png\n  mapres/generic_shadows.png\n  mapres/generic_unhookable.png\n  mapres/grass_doodads.png\n  mapres/grass_main.png\n  mapres/jungle_background.png\n  mapres/jungle_deathtiles.png\n  mapres/jungle_doodads.png\n  mapres/jungle_main.png\n  mapres/jungle_midground.png\n  mapres/jungle_unhookables.png\n  mapres/light.png\n  mapres/moon.png\n  mapres/mountains.png\n  mapres/snow.png\n  mapres/stars.png\n  mapres/sun.png\n  mapres/winter_doodads.png\n  mapres/winter_main.png\n  mapres/winter_mountains.png\n  mapres/winter_mountains2.png\n  mapres/winter_mountains3.png\n  maps/ctf1.map\n  maps/ctf2.map\n  maps/ctf3.map\n  maps/ctf4.map\n  maps/ctf5.map\n  maps/ctf6.map\n  maps/ctf7.map\n  maps/ctf8.map\n  maps/dm1.map\n  maps/dm2.map\n  maps/dm3.map\n  maps/dm6.map\n  maps/dm7.map\n  maps/dm8.map\n  maps/dm9.map\n  maps/license.txt\n  maps/lms1.map\n  maps/readme.txt\n  particles.png\n  race_flag.png\n  skins/beaver.json\n  skins/bluekitty.json\n  skins/bluestripe.json\n  skins/body/bat.png\n  skins/body/bear.png\n  skins/body/beaver.png\n  skins/body/dog.png\n  skins/body/force.png\n  skins/body/fox.png\n  skins/body/hippo.png\n  skins/body/kitty.png\n  skins/body/koala.png\n  skins/body/monkey.png\n  skins/body/mouse.png\n  skins/body/piglet.png\n  skins/body/raccoon.png\n  skins/body/spiky.png\n  skins/body/standard.png\n  skins/body/x_ninja.png\n  skins/bot.png\n  skins/brownbear.json\n  skins/bumbler.json\n  skins/cammo.json\n  skins/cammostripes.json\n  skins/cavebat.json\n  skins/decoration/hair.png\n  skins/decoration/twinbopp.png\n  skins/decoration/twinmello.png\n  skins/decoration/twinpen.png\n  skins/decoration/unibop.png\n  skins/decoration/unimelo.png\n  skins/decoration/unipento.png\n  skins/default.json\n  skins/eyes/colorable.png\n  skins/eyes/negative.png\n  skins/eyes/standard.png\n  skins/eyes/standardreal.png\n  skins/eyes/x_ninja.png\n  skins/feet/standard.png\n  skins/force.json\n  skins/fox.json\n  skins/greycoon.json\n  skins/greyfox.json\n  skins/hands/standard.png\n  skins/hippo.json\n  skins/koala.json\n  skins/limedog.json\n  skins/limekitty.json\n  skins/marking/bear.png\n  skins/marking/belly1.png\n  skins/marking/belly2.png\n  skins/marking/blush.png\n  skins/marking/bug.png\n  skins/marking/cammo1.png\n  skins/marking/cammo2.png\n  skins/marking/cammostripes.png\n  skins/marking/coonfluff.png\n  skins/marking/donny.png\n  skins/marking/downdony.png\n  skins/marking/duodonny.png\n  skins/marking/fox.png\n  skins/marking/hipbel.png\n  skins/marking/lowcross.png\n  skins/marking/lowpaint.png\n  skins/marking/marksman.png\n  skins/marking/mice.png\n  skins/marking/mixture1.png\n  skins/marking/mixture2.png\n  skins/marking/monkey.png\n  skins/marking/panda1.png\n  skins/marking/panda2.png\n  skins/marking/purelove.png\n  skins/marking/saddo.png\n  skins/marking/setisu.png\n  skins/marking/sidemarks.png\n  skins/marking/singu.png\n  skins/marking/stripe.png\n  skins/marking/striped.png\n  skins/marking/stripes.png\n  skins/marking/stripes2.png\n  skins/marking/thunder.png\n  skins/marking/tiger1.png\n  skins/marking/tiger2.png\n  skins/marking/toptri.png\n  skins/marking/triangular.png\n  skins/marking/tricircular.png\n  skins/marking/tripledon.png\n  skins/marking/tritri.png\n  skins/marking/twinbelly.png\n  skins/marking/twincross.png\n  skins/marking/twintri.png\n  skins/marking/uppy.png\n  skins/marking/warpaint.png\n  skins/marking/warstripes.png\n  skins/marking/whisker.png\n  skins/marking/wildpaint.png\n  skins/marking/wildpatch.png\n  skins/marking/yinyang.png\n  skins/monkey.json\n  skins/paintgre.json\n  skins/pandabear.json\n  skins/panther.json\n  skins/pento.json\n  skins/piggy.json\n  skins/pinky.json\n  skins/raccoon.json\n  skins/redbopp.json\n  skins/redstripe.json\n  skins/saddo.json\n  skins/setisu.json\n  skins/snowti.json\n  skins/spiky.json\n  skins/swardy.json\n  skins/tiger.json\n  skins/tooxy.json\n  skins/toptri.json\n  skins/twinbop.json\n  skins/twintri.json\n  skins/warmouse.json\n  skins/warpaint.json\n  skins/x_ninja.json\n  skins/xmas_hat.png\n  ui/blob.png\n  ui/console.png\n  ui/console_bar.png\n  ui/debug_font.png\n  ui/demo_buttons.png\n  ui/file_icons.png\n  ui/gametypes/ctf.png\n  ui/gametypes/dm.png\n  ui/gametypes/lms.png\n  ui/gametypes/lts.png\n  ui/gametypes/mod.png\n  ui/gametypes/race.png\n  ui/gametypes/tdm.png\n  ui/gui_buttons.png\n  ui/gui_cursor.png\n  ui/gui_icons.png\n  ui/gui_logo.png\n  ui/icons/arrows.png\n  ui/icons/browse.png\n  ui/icons/browser.png\n  ui/icons/chat_whisper.png\n  ui/icons/friend.png\n  ui/icons/level.png\n  ui/icons/menu.png\n  ui/icons/network.png\n  ui/icons/sidebar.png\n  ui/icons/timer_clock.png\n  ui/icons/tools.png\n  ui/menuimages/demos.png\n  ui/menuimages/editor.png\n  ui/menuimages/local_server.png\n  ui/menuimages/play_game.png\n  ui/menuimages/settings.png\n  ui/no_skinpart.png\n  ui/sound_icons.png\n  ui/themes/auto.png\n  ui/themes/heavens.png\n  ui/themes/heavens_day.map\n  ui/themes/heavens_night.map\n  ui/themes/jungle.png\n  ui/themes/jungle_day.map\n  ui/themes/jungle_night.map\n  ui/themes/none.png\n  ui/themes/winter.png\n  ui/themes/winter_day.map\n  ui/themes/winter_night.map\n)\n\nif(NOT EXISTS ${PROJECT_SOURCE_DIR}/datasrc/languages/index.json)\n  message(WARNING \"Missing datasrc/languages submodule. Please download a source release or update your git submodules with `git submodule update --init`\")\n  foreach(item ${EXPECTED_DATA})\n    if(item MATCHES \"^languages/\")\n      list(REMOVE_ITEM EXPECTED_DATA ${item})\n    endif()\n  endforeach()\nendif()\n\nif(NOT EXISTS ${PROJECT_SOURCE_DIR}/datasrc/maps/dm1.map)\n  message(WARNING \"Missing datasrc/maps submodule. Please download a source release or update your git submodules with `git submodule update --init`\")\n  foreach(item ${EXPECTED_DATA})\n    if(item MATCHES \"^maps/\")\n      list(REMOVE_ITEM EXPECTED_DATA ${item})\n    endif()\n  endforeach()\nendif()\n\nset_glob(DATA GLOB_RECURSE \"json;map;png;rules;ttc;ttf;txt;wv\" datasrc ${EXPECTED_DATA})\n\n########################################################################\n# COPY DATA AND DLLS\n########################################################################\n\nforeach(datafile ${DATA})\n  file(RELATIVE_PATH OUT ${PROJECT_SOURCE_DIR}/datasrc ${datafile})\n  get_filename_component(DESTINATION data/${OUT} PATH)\n  file(MAKE_DIRECTORY ${DESTINATION})\n  file(COPY ${datafile} DESTINATION ${DESTINATION})\nendforeach()\nset(COPY_FILES\n  ${FREETYPE_COPY_FILES}\n  ${SDL2_COPY_FILES}\n)\nfile(COPY ${COPY_FILES} DESTINATION .)\n\n########################################################################\n# CODE GENERATION\n########################################################################\n\nfunction(chash output_file)\n  add_custom_command(OUTPUT ${output_file}\n    COMMAND ${Python3_EXECUTABLE} scripts/cmd5.py ${ARGN}\n      > \"${PROJECT_BINARY_DIR}/${output_file}\"\n    DEPENDS scripts/cmd5.py ${ARGN}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  )\nendfunction()\n\nfunction(generate_source output_file script_parameter)\n  add_custom_command(OUTPUT ${output_file}\n    COMMAND ${Python3_EXECUTABLE} datasrc/compile.py ${script_parameter}\n      > \"${PROJECT_BINARY_DIR}/${output_file}\"\n    DEPENDS\n      datasrc/compile.py\n      datasrc/content.py\n      datasrc/datatypes.py\n      datasrc/network.py\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  )\nendfunction()\n\nfile(MAKE_DIRECTORY \"${PROJECT_BINARY_DIR}/src/generated/\")\nif(GIT_FOUND)\n  execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --git-dir\n    ERROR_QUIET\n    OUTPUT_VARIABLE PROJECT_GIT_DIR\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    RESULT_VARIABLE PROJECT_GIT_DIR_ERROR\n  )\n  if(NOT PROJECT_GIT_DIR_ERROR)\n    set(GIT_REVISION_EXTRA_DEPS\n      ${PROJECT_GIT_DIR}/index\n      ${PROJECT_GIT_DIR}/logs/HEAD\n    )\n  endif()\nendif()\nadd_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/src/generated/git_revision.cpp\n  COMMAND ${Python3_EXECUTABLE}\n    scripts/git_revision.py\n    > ${PROJECT_BINARY_DIR}/src/generated/git_revision.cpp\n  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  DEPENDS\n    ${GIT_REVISION_EXTRA_DEPS}\n    scripts/git_revision.py\n)\nchash(\"src/generated/nethash.cpp\"\n  \"src/engine/shared/protocol.h\"\n  \"src/game/tuning.h\"\n  \"src/game/gamecore.cpp\"\n  \"${PROJECT_BINARY_DIR}/src/generated/protocol.h\"\n)\ngenerate_source(\"src/generated/client_data.cpp\" \"client_content_source\")\ngenerate_source(\"src/generated/client_data.h\" \"client_content_header\")\ngenerate_source(\"src/generated/protocol.cpp\" \"network_source\")\ngenerate_source(\"src/generated/protocol.h\" \"network_header\")\ngenerate_source(\"src/generated/server_data.cpp\" \"server_content_source\")\ngenerate_source(\"src/generated/server_data.h\" \"server_content_header\")\n\n\n########################################################################\n# SHARED\n########################################################################\n\n# Sources\nset_src(BASE GLOB_RECURSE src/base\n  color.h\n  detect.h\n  hash.c\n  hash.h\n  hash_bundled.c\n  hash_ctxt.h\n  hash_libtomcrypt.c\n  hash_openssl.c\n  math.h\n  system.c\n  system.h\n  tl/algorithm.h\n  tl/allocator.h\n  tl/array.h\n  tl/range.h\n  tl/sorted_array.h\n  tl/string.h\n  tl/threading.h\n  vmath.h\n)\nset_src(ENGINE_INTERFACE GLOB src/engine\n  client.h\n  config.h\n  console.h\n  contacts.h\n  demo.h\n  editor.h\n  engine.h\n  graphics.h\n  input.h\n  kernel.h\n  keys.h\n  map.h\n  mapchecker.h\n  masterserver.h\n  message.h\n  server.h\n  serverbrowser.h\n  sound.h\n  storage.h\n  textrender.h\n)\nset_src(ENGINE_SHARED GLOB src/engine/shared\n  compression.cpp\n  compression.h\n  config.cpp\n  config.h\n  config_variables.h\n  console.cpp\n  console.h\n  datafile.cpp\n  datafile.h\n  demo.cpp\n  demo.h\n  econ.cpp\n  econ.h\n  engine.cpp\n  filecollection.cpp\n  filecollection.h\n  huffman.cpp\n  huffman.h\n  jobs.cpp\n  jobs.h\n  jsonparser.cpp\n  jsonparser.h\n  jsonwriter.cpp\n  jsonwriter.h\n  kernel.cpp\n  linereader.cpp\n  linereader.h\n  map.cpp\n  mapchecker.cpp\n  mapchecker.h\n  masterserver.cpp\n  memheap.cpp\n  memheap.h\n  netban.cpp\n  netban.h\n  network.cpp\n  network.h\n  network_client.cpp\n  network_conn.cpp\n  network_console.cpp\n  network_console_conn.cpp\n  network_server.cpp\n  network_token.cpp\n  packer.cpp\n  packer.h\n  protocol.h\n  ringbuffer.cpp\n  ringbuffer.h\n  snapshot.cpp\n  snapshot.h\n  storage.cpp\n)\nset(ENGINE_GENERATED_SHARED src/generated/nethash.cpp src/generated/protocol.cpp src/generated/protocol.h)\nset_src(GAME_SHARED GLOB src/game\n  collision.cpp\n  collision.h\n  commands.h\n  gamecore.cpp\n  gamecore.h\n  layers.cpp\n  layers.h\n  mapitems.h\n  tuning.h\n  variables.h\n  version.h\n  voting.h\n)\nset(GAME_GENERATED_SHARED\n  src/generated/git_revision.cpp\n  src/generated/nethash.cpp\n  src/generated/protocol.h\n)\n\nset(DEPS ${DEP_JSON} ${DEP_MD5} ${ZLIB_DEP})\n\n# Libraries\nset(LIBS ${CMAKE_THREAD_LIBS_INIT} ${ZLIB_LIBRARIES} ${CRYPTO_LIBRARIES} ${PLATFORM_LIBS})\n\n# Targets\nadd_library(engine-shared EXCLUDE_FROM_ALL OBJECT ${ENGINE_INTERFACE} ${ENGINE_SHARED} ${ENGINE_GENERATED_SHARED} ${BASE})\nadd_library(game-shared EXCLUDE_FROM_ALL OBJECT ${GAME_SHARED} ${GAME_GENERATED_SHARED})\nlist(APPEND TARGETS_OWN engine-shared game-shared)\n\n\n########################################################################\n# CLIENT\n########################################################################\n\nif(CLIENT)\n  # Sources\n  set_src(ENGINE_CLIENT GLOB src/engine/client\n    backend_sdl.cpp\n    backend_sdl.h\n    client.cpp\n    client.h\n    contacts.cpp\n    contacts.h\n    graphics_threaded.cpp\n    graphics_threaded.h\n    graphics_threaded_null.h\n    input.cpp\n    input.h\n    keynames.h\n    serverbrowser.cpp\n    serverbrowser.h\n    serverbrowser_entry.h\n    serverbrowser_fav.cpp\n    serverbrowser_fav.h\n    serverbrowser_filter.cpp\n    serverbrowser_filter.h\n    sound.cpp\n    sound.h\n    textrender.cpp\n    textrender.h\n  )\n  set_src(GAME_CLIENT GLOB_RECURSE src/game/client\n    animstate.cpp\n    animstate.h\n    component.h\n    components/binds.cpp\n    components/binds.h\n    components/broadcast.cpp\n    components/broadcast.h\n    components/camera.cpp\n    components/camera.h\n    components/chat.cpp\n    components/chat.h\n    components/console.cpp\n    components/console.h\n    components/controls.cpp\n    components/controls.h\n    components/countryflags.cpp\n    components/countryflags.h\n    components/damageind.cpp\n    components/damageind.h\n    components/debughud.cpp\n    components/debughud.h\n    components/effects.cpp\n    components/effects.h\n    components/emoticon.cpp\n    components/emoticon.h\n    components/flow.cpp\n    components/flow.h\n    components/hud.cpp\n    components/hud.h\n    components/infomessages.cpp\n    components/infomessages.h\n    components/items.cpp\n    components/items.h\n    components/mapimages.cpp\n    components/mapimages.h\n    components/maplayers.cpp\n    components/maplayers.h\n    components/menus.cpp\n    components/menus.h\n    components/menus_browser.cpp\n    components/menus_callback.cpp\n    components/menus_demo.cpp\n    components/menus_ingame.cpp\n    components/menus_settings.cpp\n    components/menus_start.cpp\n    components/motd.cpp\n    components/motd.h\n    components/nameplates.cpp\n    components/nameplates.h\n    components/notifications.cpp\n    components/notifications.h\n    components/particles.cpp\n    components/particles.h\n    components/players.cpp\n    components/players.h\n    components/scoreboard.cpp\n    components/scoreboard.h\n    components/skins.cpp\n    components/skins.h\n    components/sounds.cpp\n    components/sounds.h\n    components/spectator.cpp\n    components/spectator.h\n    components/stats.cpp\n    components/stats.h\n    components/voting.cpp\n    components/voting.h\n    gameclient.cpp\n    gameclient.h\n    lineinput.cpp\n    lineinput.h\n    localization.cpp\n    localization.h\n    render.cpp\n    render.h\n    render_map.cpp\n    ui.cpp\n    ui.h\n    ui_listbox.cpp\n    ui_listbox.h\n    ui_rect.cpp\n    ui_rect.h\n    ui_scrollregion.cpp\n    ui_scrollregion.h\n  )\n  set_src(GAME_EDITOR GLOB src/game/editor\n    auto_map.cpp\n    auto_map.h\n    editor.cpp\n    editor.h\n    io.cpp\n    layer_game.cpp\n    layer_quads.cpp\n    layer_tiles.cpp\n    popups.cpp\n  )\n  set(GAME_GENERATED_CLIENT\n    src/generated/client_data.cpp\n    src/generated/client_data.h\n  )\n  set(CLIENT_SRC ${PLATFORM_CLIENT} ${ENGINE_CLIENT} ${GAME_CLIENT} ${GAME_EDITOR} ${GAME_GENERATED_CLIENT})\n\n  set(DEPS_CLIENT ${DEPS} ${PNGLITE_DEP} ${WAVPACK_DEP})\n\n  # Libraries\n  set(LIBS_CLIENT\n    ${LIBS}\n    ${FREETYPE_LIBRARIES}\n    ${PNGLITE_LIBRARIES}\n    ${SDL2_LIBRARIES}\n    ${WAVPACK_LIBRARIES}\n    ${PLATFORM_CLIENT_LIBS}\n  )\n\n  if(TARGET_OS STREQUAL \"windows\")\n    set(CLIENT_ICON \"other/icons/${CLIENT_EXECUTABLE}.rc\")\n    if(NOT MINGW)\n      set(CLIENT_MANIFEST \"other/manifest/teeworlds.manifest\")\n    else()\n      set(CLIENT_MANIFEST \"other/manifest/teeworlds.rc\")\n    endif()\n  else()\n    set(CLIENT_ICON)\n  endif()\n\n  # Target\n  set(TARGET_CLIENT ${CLIENT_EXECUTABLE})\n  add_executable(${TARGET_CLIENT}\n    ${CLIENT_SRC}\n    ${CLIENT_ICON}\n    ${CLIENT_MANIFEST}\n    ${DEPS_CLIENT}\n    $<TARGET_OBJECTS:engine-shared>\n    $<TARGET_OBJECTS:game-shared>\n  )\n  target_link_libraries(${TARGET_CLIENT} ${LIBS_CLIENT})\n\n  target_include_directories(${TARGET_CLIENT} PRIVATE\n    ${FREETYPE_INCLUDE_DIRS}\n    ${PNGLITE_INCLUDE_DIRS}\n    ${SDL2_INCLUDE_DIRS}\n    ${WAVPACK_INCLUDE_DIRS}\n  )\n\n  set(PARAMS \"${WAVPACK_INCLUDE_DIRS};${WAVPACK_INCLUDE_DIRS}\")\n  if(NOT(WAVPACK_OPEN_FILE_INPUT_EX_PARAMS STREQUAL PARAMS))\n    unset(WAVPACK_OPEN_FILE_INPUT_EX CACHE)\n  endif()\n  set(WAVPACK_OPEN_FILE_INPUT_EX_PARAMS \"${PARAMS}\" CACHE INTERNAL \"\")\n\n  set(CMAKE_REQUIRED_INCLUDES ${ORIGINAL_CMAKE_REQUIRED_INCLUDES} ${WAVPACK_INCLUDE_DIRS})\n  set(CMAKE_REQUIRED_LIBRARIES ${ORIGINAL_CMAKE_REQUIRED_LIBRARIES} ${WAVPACK_LIBRARIES})\n  check_symbol_exists(WavpackOpenFileInputEx wavpack.h WAVPACK_OPEN_FILE_INPUT_EX)\n  set(CMAKE_REQUIRED_INCLUDES ${ORIGINAL_CMAKE_REQUIRED_INCLUDES})\n  set(CMAKE_REQUIRED_LIBRARIES ${ORIGINAL_CMAKE_REQUIRED_LIBRARIES})\n\n  if(WAVPACK_OPEN_FILE_INPUT_EX)\n    target_compile_definitions(${TARGET_CLIENT} PRIVATE CONF_WAVPACK_OPEN_FILE_INPUT_EX)\n  endif()\n\n  list(APPEND TARGETS_OWN ${TARGET_CLIENT})\n  list(APPEND TARGETS_LINK ${TARGET_CLIENT})\nendif()\n\n\n########################################################################\n# SERVER\n########################################################################\n\n# Sources\nset_src(ENGINE_SERVER GLOB src/engine/server\n  register.cpp\n  register.h\n  server.cpp\n  server.h\n)\nset_src(GAME_SERVER GLOB_RECURSE src/game/server\n  alloc.h\n  entities/character.cpp\n  entities/character.h\n  entities/flag.cpp\n  entities/flag.h\n  entities/laser.cpp\n  entities/laser.h\n  entities/pickup.cpp\n  entities/pickup.h\n  entities/projectile.cpp\n  entities/projectile.h\n  entity.cpp\n  entity.h\n  eventhandler.cpp\n  eventhandler.h\n  gamecontext.cpp\n  gamecontext.h\n  gamecontroller.cpp\n  gamecontroller.h\n  gamemodes/ctf.cpp\n  gamemodes/ctf.h\n  gamemodes/dm.cpp\n  gamemodes/dm.h\n  gamemodes/lms.cpp\n  gamemodes/lms.h\n  gamemodes/lts.cpp\n  gamemodes/lts.h\n  gamemodes/mod.cpp\n  gamemodes/mod.h\n  gamemodes/tdm.cpp\n  gamemodes/tdm.h\n  gameworld.cpp\n  gameworld.h\n  player.cpp\n  player.h\n)\nset(GAME_GENERATED_SERVER\n  src/generated/server_data.cpp\n  src/generated/server_data.h\n)\nset(SERVER_SRC ${ENGINE_SERVER} ${GAME_SERVER} ${GAME_GENERATED_SERVER})\nif(TARGET_OS STREQUAL \"windows\")\n  set(SERVER_ICON \"other/icons/${SERVER_EXECUTABLE}.rc\")\nelse()\n  set(SERVER_ICON)\nendif()\n\n# Libraries\nset(LIBS_SERVER ${LIBS})\n\n# Target\nset(TARGET_SERVER ${SERVER_EXECUTABLE})\nadd_executable(${TARGET_SERVER}\n  ${DEPS}\n  ${SERVER_SRC}\n  ${SERVER_ICON}\n  $<TARGET_OBJECTS:engine-shared>\n  $<TARGET_OBJECTS:game-shared>\n)\ntarget_link_libraries(${TARGET_SERVER} ${LIBS_SERVER})\nlist(APPEND TARGETS_OWN ${TARGET_SERVER})\nlist(APPEND TARGETS_LINK ${TARGET_SERVER})\n\nif(TARGET_OS AND TARGET_OS STREQUAL \"mac\")\n  set(SERVER_LAUNCHER_SRC src/macoslaunch/server.mm)\n  set(TARGET_SERVER_LAUNCHER ${TARGET_SERVER}-Launcher)\n  add_executable(${TARGET_SERVER_LAUNCHER} ${SERVER_LAUNCHER_SRC})\n  target_link_libraries(${TARGET_SERVER_LAUNCHER} ${COCOA})\n  list(APPEND TARGETS_OWN ${TARGET_SERVER_LAUNCHER})\n  list(APPEND TARGETS_LINK ${TARGET_SERVER_LAUNCHER})\nendif()\n\n########################################################################\n# VARIOUS TARGETS\n########################################################################\n\nset_src(MASTERSRV_SRC GLOB src/mastersrv mastersrv.cpp mastersrv.h)\nset_src(VERSIONSRV_SRC GLOB src/versionsrv mapversions.h versionsrv.cpp versionsrv.h)\nlist(APPEND VERSIONSRV_SRC ${PROJECT_BINARY_DIR}/src/generated/nethash.cpp)\n\nset(TARGET_MASTERSRV mastersrv)\nset(TARGET_VERSIONSRV versionsrv)\n\nadd_executable(${TARGET_MASTERSRV} EXCLUDE_FROM_ALL ${MASTERSRV_SRC} $<TARGET_OBJECTS:engine-shared> ${DEPS})\nadd_executable(${TARGET_VERSIONSRV} EXCLUDE_FROM_ALL ${VERSIONSRV_SRC} $<TARGET_OBJECTS:engine-shared> ${DEPS})\n\ntarget_link_libraries(${TARGET_MASTERSRV} ${LIBS})\ntarget_link_libraries(${TARGET_VERSIONSRV} ${LIBS})\n\nlist(APPEND TARGETS_OWN ${TARGET_MASTERSRV} ${TARGET_VERSIONSRV})\nlist(APPEND TARGETS_LINK ${TARGET_MASTERSRV} ${TARGET_VERSIONSRV})\n\nset(TARGETS_TOOLS)\nset_src(TOOLS GLOB src/tools\n  crapnet.cpp\n  fake_server.cpp\n  map_resave.cpp\n  map_version.cpp\n  packetgen.cpp\n)\nforeach(ABS_T ${TOOLS})\n  file(RELATIVE_PATH T \"${PROJECT_SOURCE_DIR}/src/tools/\" ${ABS_T})\n  if(T MATCHES \"\\\\.cpp$\")\n    string(REGEX REPLACE \"\\\\.cpp$\" \"\" TOOL \"${T}\")\n    add_executable(${TOOL} EXCLUDE_FROM_ALL\n      ${DEPS}\n      src/tools/${TOOL}.cpp\n      ${EXTRA_TOOL_SRC}\n      $<TARGET_OBJECTS:engine-shared>\n    )\n    target_link_libraries(${TOOL} ${LIBS})\n    list(APPEND TARGETS_TOOLS ${TOOL})\n  endif()\nendforeach()\n\nlist(APPEND TARGETS_OWN ${TARGETS_TOOLS})\nlist(APPEND TARGETS_LINK ${TARGETS_TOOLS})\n\nadd_custom_target(tools DEPENDS ${TARGETS_TOOLS})\nadd_custom_target(everything DEPENDS ${TARGETS_OWN})\n\n########################################################################\n# TESTS\n########################################################################\n\nif(GTEST_FOUND OR DOWNLOAD_GTEST)\n  set_src(TESTS GLOB src/test\n    aio.cpp\n    bytes_be.cpp\n    compression.cpp\n    datafile.cpp\n    fs.cpp\n    git_revision.cpp\n    hash.cpp\n    io.cpp\n    jsonparser.cpp\n    jsonwriter.cpp\n    packer.cpp\n    sorted_array.cpp\n    storage.cpp\n    str.cpp\n    test.cpp\n    test.h\n    thread.cpp\n  )\n  set(TARGET_TESTRUNNER testrunner)\n  add_executable(${TARGET_TESTRUNNER} EXCLUDE_FROM_ALL\n    ${TESTS}\n    $<TARGET_OBJECTS:engine-shared>\n    $<TARGET_OBJECTS:game-shared>\n    ${DEPS}\n  )\n  target_link_libraries(${TARGET_TESTRUNNER} ${LIBS} ${GTEST_LIBRARIES})\n  target_include_directories(${TARGET_TESTRUNNER} PRIVATE ${GTEST_INCLUDE_DIRS})\n\n  list(APPEND TARGETS_OWN ${TARGET_TESTRUNNER})\n  list(APPEND TARGETS_LINK ${TARGET_TESTRUNNER})\n\n  add_custom_target(run_tests\n    COMMAND $<TARGET_FILE:${TARGET_TESTRUNNER}> ${TESTRUNNER_ARGS}\n    COMMENT Running tests\n    DEPENDS ${TARGET_TESTRUNER}\n    USES_TERMINAL\n  )\nendif()\n\n########################################################################\n# INSTALLATION\n########################################################################\n\nfunction(escape_regex VAR STRING)\n  string(REGEX REPLACE \"([][^$.+*?|()\\\\\\\\])\" \"\\\\\\\\\\\\1\" ESCAPED \"${STRING}\")\n  set(${VAR} ${ESCAPED} PARENT_SCOPE)\nendfunction()\n\nfunction(escape_backslashes VAR STRING)\n  string(REGEX REPLACE \"\\\\\\\\\" \"\\\\\\\\\\\\\\\\\" ESCAPED \"${STRING}\")\n  set(${VAR} ${ESCAPED} PARENT_SCOPE)\nendfunction()\n\nfunction(max_length VAR)\n  set(MAX_LENGTH 0)\n  foreach(str ${ARGN})\n    string(LENGTH ${str} LENGTH)\n    if(LENGTH GREATER MAX_LENGTH)\n      set(MAX_LENGTH ${LENGTH})\n    endif()\n  endforeach()\n  set(${VAR} ${MAX_LENGTH} PARENT_SCOPE)\nendfunction()\n\n# Tries to generate a list of regex that matches everything except the given\n# parameters.\nfunction(regex_inverted VAR)\n  max_length(MAX_LENGTH ${ARGN})\n  math(EXPR UPPER_BOUND \"${MAX_LENGTH}-1\")\n\n  set(REMAINING ${ARGN})\n  set(RESULT)\n\n  foreach(i RANGE ${UPPER_BOUND})\n    set(TEMP ${REMAINING})\n    set(REMAINING)\n    foreach(str ${TEMP})\n      string(LENGTH ${str} LENGTH)\n      if(i LESS LENGTH)\n        list(APPEND REMAINING ${str})\n      endif()\n    endforeach()\n\n    set(ADDITIONAL)\n    foreach(outer ${REMAINING})\n      string(SUBSTRING ${outer} 0 ${i} OUTER_PREFIX)\n      set(CHARS \"\")\n      foreach(inner ${REMAINING})\n        string(SUBSTRING ${inner} 0 ${i} INNER_PREFIX)\n        if(OUTER_PREFIX STREQUAL INNER_PREFIX)\n          string(SUBSTRING ${inner} ${i} 1 INNER_NEXT)\n          set(CHARS \"${CHARS}${INNER_NEXT}\")\n        endif()\n      endforeach()\n      escape_regex(OUTER_PREFIX_ESCAPED \"${OUTER_PREFIX}\")\n\n      list(APPEND ADDITIONAL \"${OUTER_PREFIX_ESCAPED}([^${CHARS}]|$)\")\n    endforeach()\n    list(REMOVE_DUPLICATES ADDITIONAL)\n    list(APPEND RESULT ${ADDITIONAL})\n  endforeach()\n  set(${VAR} ${RESULT} PARENT_SCOPE)\nendfunction()\n\nset(CPACK_PACKAGE_NAME ${PROJECT_NAME})\nset(CPACK_GENERATOR TGZ TXZ)\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\nset(CPACK_STRIP_FILES TRUE)\nset(CPACK_COMPONENTS_ALL portable)\nset(CPACK_SOURCE_GENERATOR ZIP TGZ TBZ2 TXZ)\nset(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\nset(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})\nset(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})\n\nif(TARGET_OS AND TARGET_BITS)\n  if(TARGET_OS STREQUAL \"windows\")\n    set(CPACK_SYSTEM_NAME \"win${TARGET_BITS}\")\n    set(CPACK_GENERATOR ZIP)\n  elseif(TARGET_OS STREQUAL \"linux\")\n    # Assuming Intel here.\n    if(TARGET_BITS EQUAL 32)\n      set(CPACK_SYSTEM_NAME \"linux_x86\")\n    elseif(TARGET_BITS EQUAL 64)\n      set(CPACK_SYSTEM_NAME \"linux_x86_64\")\n    endif()\n  elseif(TARGET_OS STREQUAL \"mac\")\n    set(CPACK_SYSTEM_NAME \"macos\")\n    set(CPACK_GENERATOR DMG)\n  endif()\nendif()\n\nset(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME})\nset(CPACK_ARCHIVE_PORTABLE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME})\nset(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-src)\nset(CPACK_SOURCE_FILES\n  CMakeLists.txt\n  bam.lua\n  cmake/\n  configure.lua\n  datasrc/\n  license.txt\n  other/\n  readme.md\n  scripts/\n  src/\n  storage.cfg\n)\nset(CPACK_SOURCE_IGNORE_FILES\n  \"\\\\\\\\.o$\"\n  \"\\\\\\\\.pyc$\"\n  \"/\\\\\\\\.git\"\n  \"/__pycache__/\"\n)\n\nregex_inverted(CPACK_SOURCE_FILES_INVERTED ${CPACK_SOURCE_FILES})\nescape_regex(PROJECT_SOURCE_DIR_ESCAPED ${PROJECT_SOURCE_DIR})\n\nforeach(str ${CPACK_SOURCE_FILES_INVERTED})\n  escape_backslashes(STR_ESCAPED \"${PROJECT_SOURCE_DIR_ESCAPED}/${str}\")\n  list(APPEND CPACK_SOURCE_IGNORE_FILES \"${STR_ESCAPED}\")\nendforeach()\n\nset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME ${PROJECT_NAME})\n\nset(CPACK_TARGETS\n  ${TARGET_CLIENT}\n  ${TARGET_SERVER}\n)\nset(CPACK_DIRS ${PROJECT_BINARY_DIR}/data)\nset(CPACK_FILES\n  license.txt\n  storage.cfg\n  ${COPY_FILES}\n)\nif(TARGET_OS STREQUAL \"windows\")\n  list(APPEND CPACK_FILES other/config_directory.bat)\nendif()\n\nif(NOT DEV)\n  install(DIRECTORY ${PROJECT_BINARY_DIR}/data DESTINATION share/${PROJECT_NAME} COMPONENT data)\n  install(TARGETS ${TARGET_CLIENT} DESTINATION bin COMPONENT client)\n  install(TARGETS ${TARGET_SERVER} DESTINATION bin COMPONENT server)\nendif()\n\nif(DEV)\n  # Don't generate CPack targets.\nelseif(CMAKE_VERSION VERSION_LESS 3.6 OR CMAKE_VERSION VERSION_EQUAL 3.6)\n  message(WARNING \"Cannot create CPack targets, CMake version too old. Use CMake 3.6 or newer.\")\nelse()\n  set(EXTRA_ARGS DESTINATION ${CPACK_PACKAGE_FILE_NAME} COMPONENT portable EXCLUDE_FROM_ALL)\n  install(TARGETS ${CPACK_TARGETS} ${EXTRA_ARGS})\n  install(DIRECTORY ${CPACK_DIRS} ${EXTRA_ARGS})\n  install(FILES ${CPACK_FILES} ${EXTRA_ARGS})\nendif()\n\nset(PACKAGE_TARGETS)\n\nif(CLIENT AND (DMGTOOLS_FOUND OR HDIUTIL))\n  file(MAKE_DIRECTORY bundle/client/)\n  file(MAKE_DIRECTORY bundle/server/)\n  configure_file(other/bundle/client/Info.plist.in bundle/client/Info.plist)\n  configure_file(other/bundle/server/Info.plist.in bundle/server/Info.plist)\n\n  if(HDIUTIL)\n    set(DMG_PARAMS --hdiutil ${HDIUTIL})\n  elseif(DMGTOOLS_FOUND)\n    set(DMG_PARAMS --dmgtools ${DMG} ${HFSPLUS} ${NEWFS_HFS})\n  endif()\n  set(DMG_TMPDIR pack_${CPACK_PACKAGE_FILE_NAME}_dmg)\n  set(DMG_MKDIRS\n    ${TARGET_CLIENT}.app\n    ${TARGET_CLIENT}.app/Contents\n    ${TARGET_CLIENT}.app/Contents/Frameworks\n    ${TARGET_CLIENT}.app/Contents/MacOS\n    ${TARGET_CLIENT}.app/Contents/Resources\n    ${TARGET_SERVER}.app\n    ${TARGET_SERVER}.app/Contents\n    ${TARGET_SERVER}.app/Contents/MacOS\n    ${TARGET_SERVER}.app/Contents/Resources\n    ${TARGET_SERVER}.app/Contents/Resources/data\n    # Needed so the server recognizes the data directory.\n    ${TARGET_SERVER}.app/Contents/Resources/data/mapres\n  )\n  set(DMG_MKDIR_COMMANDS)\n  foreach(dir ${DMG_MKDIRS})\n    list(APPEND DMG_MKDIR_COMMANDS COMMAND ${CMAKE_COMMAND} -E make_directory ${DMG_TMPDIR}/${dir})\n  endforeach()\n  add_custom_command(OUTPUT ${CPACK_PACKAGE_FILE_NAME}.dmg\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${DMG_TMPDIR}\n    ${DMG_MKDIR_COMMANDS}\n\n    # CLIENT\n    COMMAND ${CMAKE_COMMAND} -E copy_directory data ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/Resources/data\n    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/other/icons/${TARGET_CLIENT}.icns ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/Resources/\n    COMMAND ${CMAKE_COMMAND} -E copy bundle/client/Info.plist ${PROJECT_SOURCE_DIR}/other/bundle/client/PkgInfo ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/\n    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${TARGET_CLIENT}> ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/MacOS/\n    COMMAND ${CMAKE_COMMAND} -E copy ${SDL2_LIBRARY} ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/Frameworks/libSDL2-2.0.0.dylib\n    COMMAND ${CMAKE_COMMAND} -E copy ${FREETYPE_LIBRARY} ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/Frameworks/libfreetype.6.dylib\n    COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/darwin_change_dylib.py change --tools ${CMAKE_INSTALL_NAME_TOOL} ${CMAKE_OTOOL} ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/MacOS/${TARGET_CLIENT} SDL2 @executable_path/../Frameworks/libSDL2-2.0.0.dylib\n    COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/darwin_change_dylib.py change --tools ${CMAKE_INSTALL_NAME_TOOL} ${CMAKE_OTOOL} ${DMG_TMPDIR}/${TARGET_CLIENT}.app/Contents/MacOS/${TARGET_CLIENT} libfreetype @executable_path/../Frameworks/libfreetype.6.dylib\n\n    # SERVER\n    COMMAND ${CMAKE_COMMAND} -E copy_directory data/maps ${DMG_TMPDIR}/${TARGET_SERVER}.app/Contents/Resources/data/maps\n    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/other/icons/${TARGET_SERVER}.icns ${DMG_TMPDIR}/${TARGET_SERVER}.app/Contents/Resources/\n    COMMAND ${CMAKE_COMMAND} -E copy bundle/server/Info.plist ${PROJECT_SOURCE_DIR}/other/bundle/server/PkgInfo ${DMG_TMPDIR}/${TARGET_SERVER}.app/Contents/\n    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${TARGET_SERVER}> $<TARGET_FILE:${TARGET_SERVER_LAUNCHER}> ${DMG_TMPDIR}/${TARGET_SERVER}.app/Contents/MacOS/\n\n    # DMG\n    COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/dmg.py create ${DMG_PARAMS} ${CPACK_PACKAGE_FILE_NAME}.dmg ${CPACK_PACKAGE_FILE_NAME} ${DMG_TMPDIR}\n\n    DEPENDS\n      ${TARGET_CLIENT}\n      ${TARGET_SERVER_LAUNCHER}\n      ${TARGET_SERVER}\n      ${PROJECT_BINARY_DIR}/bundle/client/Info.plist\n      ${PROJECT_BINARY_DIR}/bundle/server/Info.plist\n      other/bundle/client/PkgInfo\n      other/bundle/server/PkgInfo\n      other/icons/${TARGET_CLIENT}.icns\n      other/icons/${TARGET_SERVER}.icns\n      scripts/dmg.py\n  )\n  add_custom_target(package_dmg DEPENDS ${CPACK_PACKAGE_FILE_NAME}.dmg)\n  list(APPEND PACKAGE_TARGETS package_dmg)\nendif()\n\nforeach(ext zip tar.gz tar.xz)\n  set(TAR_MODE c)\n  set(TAR_EXTRA_ARGS)\n  string(REPLACE . _ EXT_SLUG ${ext})\n\n  set(TMPDIR pack_${CPACK_PACKAGE_FILE_NAME}_${EXT_SLUG}/${CPACK_PACKAGE_FILE_NAME})\n\n  set(COPY_FILE_COMMANDS)\n  set(COPY_DIR_COMMANDS)\n  set(COPY_TARGET_COMMANDS)\n  set(STRIP_TARGET_COMMANDS)\n  foreach(file ${CPACK_FILES})\n    list(APPEND COPY_FILE_COMMANDS COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/${file} ${TMPDIR}/)\n  endforeach()\n  foreach(dir ${CPACK_DIRS})\n    get_filename_component(NAME ${dir} NAME)\n    list(APPEND COPY_DIR_COMMANDS COMMAND ${CMAKE_COMMAND} -E copy_directory ${dir} ${TMPDIR}/${NAME})\n  endforeach()\n  foreach(target ${CPACK_TARGETS})\n    list(APPEND COPY_TARGET_COMMANDS COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${target}> ${TMPDIR}/)\n  endforeach()\n\n  if(ext STREQUAL zip)\n    set(TAR_EXTRA_ARGS --format=zip)\n  elseif(ext STREQUAL tar.gz)\n    set(TAR_MODE cz)\n  elseif(ext STREQUAL tar.xz)\n    set(TAR_MODE cJ)\n  endif()\n  add_custom_command(OUTPUT ${CPACK_PACKAGE_FILE_NAME}.${ext}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${TMPDIR}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${TMPDIR}\n    ${COPY_FILE_COMMANDS}\n    ${COPY_DIR_COMMANDS}\n    ${COPY_TARGET_COMMANDS}\n    ${STRIP_TARGET_COMMANDS}\n    COMMAND ${CMAKE_COMMAND} -E chdir pack_${CPACK_PACKAGE_FILE_NAME}_${EXT_SLUG} ${CMAKE_COMMAND} -E tar ${TAR_MODE} ../${CPACK_PACKAGE_FILE_NAME}.${ext} ${TAR_EXTRA_ARGS} -- ${CPACK_PACKAGE_FILE_NAME}/\n    DEPENDS ${CPACK_TARGETS}\n  )\n  add_custom_target(package_${EXT_SLUG} DEPENDS ${CPACK_PACKAGE_FILE_NAME}.${ext})\n  list(APPEND PACKAGE_TARGETS package_${EXT_SLUG})\nendforeach()\n\nset(PACKAGE_DEFAULT tar_xz)\nif(TARGET_OS STREQUAL \"windows\")\n  set(PACKAGE_DEFAULT zip)\nelseif(TARGET_OS STREQUAL \"mac\")\n  set(PACKAGE_DEFAULT dmg)\nendif()\nadd_custom_target(package_default DEPENDS package_${PACKAGE_DEFAULT})\n\nadd_custom_target(package_all DEPENDS ${PACKAGE_TARGETS})\n\n# Unset these variables, they might do something in the future of CPack.\nunset(CPACK_SOURCE_FILES)\nunset(CPACK_SOURCE_FILES_INVERTED)\nunset(CPACK_TARGETS)\nunset(CPACK_DIRS)\nunset(CPACK_FILES)\n\ninclude(CPack)\n\n########################################################################\n# COMPILER-SPECIFICS\n########################################################################\n\n# In the future (CMake 3.8.0+), use source_group(TREE ...)\nmacro(source_group_tree dir)\n  file(GLOB ents RELATIVE ${PROJECT_SOURCE_DIR}/${dir} ${PROJECT_SOURCE_DIR}/${dir}/*)\n  foreach(ent ${ents})\n    if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/${dir}/${ent})\n      source_group_tree(${dir}/${ent})\n    else()\n      string(REPLACE \"/\" \"\\\\\" group ${dir})\n      source_group(${group} FILES ${PROJECT_SOURCE_DIR}/${dir}/${ent})\n    endif()\n  endforeach()\nendmacro()\nsource_group_tree(src)\n\nset(TARGETS ${TARGETS_OWN} ${TARGETS_DEP})\n\nforeach(target ${TARGETS})\n  if(MSVC)\n    if(POLICY CMP0091)\n      set_property(TARGET ${target} PROPERTY MSVC_RUNTIME_LIBRARY \"MultiThreaded$<${DBG}:Debug>\")\n    else()\n      target_compile_options(${target} PRIVATE $<$<NOT:${DBG}>:/MT> $<${DBG}:/MTd>)\n    endif()\n    target_compile_options(${target} PRIVATE /MP) # Use multiple cores\n    target_compile_options(${target} PRIVATE /EHsc) # Only catch C++ exceptions with catch.\n    target_compile_options(${target} PRIVATE /GS) # Protect the stack pointer.\n    target_compile_options(${target} PRIVATE /wd4996) # Use of non-_s functions.\n    target_compile_options(${target} PRIVATE /utf-8) # Use UTF-8 for source files.\n  endif()\n  if(OUR_FLAGS)\n    target_compile_options(${target} PRIVATE ${OUR_FLAGS})\n  endif()\n  if(DEFINE_FORTIFY_SOURCE)\n    target_compile_definitions(${target} PRIVATE $<$<NOT:$<CONFIG:Debug>>:_FORTIFY_SOURCE=2>) # Detect some buffer overflows.\n  endif()\n  target_compile_definitions(${target} PRIVATE _GLIBCXX_ASSERTIONS) # Enable run-time bounds-checking for the STL\nendforeach()\n\nforeach(target ${TARGETS_LINK})\n  if(MSVC)\n    set_property(TARGET ${target} APPEND PROPERTY LINK_FLAGS /SAFESEH:NO) # Disable SafeSEH because the shipped libraries don't support it (would cause error LNK2026 otherwise).\n  endif()\n  if(TARGET_OS STREQUAL \"mac\")\n    target_link_libraries(${target} -stdlib=libc++)\n    target_link_libraries(${target} -mmacosx-version-min=10.7)\n  endif()\n  if((MINGW OR TARGET_OS STREQUAL \"linux\") AND PREFER_BUNDLED_LIBS)\n    # Statically link the standard libraries with on MinGW/Linux so we don't\n    # have to ship them as DLLs.\n    target_link_libraries(${target} -static-libgcc)\n    target_link_libraries(${target} -static-libstdc++)\n    if(MINGW)\n      # Link pthread library statically instead of dynamically.\n      # Solution from https://stackoverflow.com/a/28001261.\n      target_link_libraries(${target} -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic)\n    endif()\n  endif()\nendforeach()\n\nforeach(target ${TARGETS_OWN})\n  if(MSVC)\n    target_compile_options(${target} PRIVATE /W3)\n    target_compile_options(${target} PRIVATE /wd4244) # Possible loss of data (float -> int, int -> float, etc.).\n    target_compile_options(${target} PRIVATE /wd4267) # Possible loss of data (size_t - int on win64).\n    target_compile_options(${target} PRIVATE /wd4800) # Implicit conversion of int to bool.\n  endif()\n  if(TARGET_OS STREQUAL \"windows\")\n    target_compile_definitions(${target} PRIVATE _WIN32_WINNT=0x0501)\n    target_compile_definitions(${target} PRIVATE UNICODE) # Windows headers\n    target_compile_definitions(${target} PRIVATE _UNICODE) # C-runtime\n  endif()\n  if(OUR_FLAGS_OWN)\n    target_compile_options(${target} PRIVATE ${OUR_FLAGS_OWN})\n  endif()\n  target_include_directories(${target} PRIVATE ${PROJECT_BINARY_DIR}/src)\n  target_include_directories(${target} PRIVATE src)\n  target_compile_definitions(${target} PRIVATE $<$<CONFIG:Debug>:CONF_DEBUG>)\n  target_include_directories(${target} PRIVATE ${CURL_INCLUDE_DIRS})\n  target_include_directories(${target} PRIVATE ${ZLIB_INCLUDE_DIRS})\n  if(CRYPTO_FOUND)\n    target_compile_definitions(${target} PRIVATE CONF_OPENSSL)\n    target_include_directories(${target} PRIVATE ${CRYPTO_INCLUDE_DIRS})\n  endif()\n  if(HEADLESS_CLIENT)\n    target_compile_definitions(${target} PRIVATE CONF_HEADLESS_CLIENT)\n  endif()\nendforeach()\n\nforeach(target ${TARGETS_DEP})\n  if(MSVC)\n    target_compile_options(${target} PRIVATE /W0)\n  endif()\n  if(OUR_FLAGS_DEP)\n    target_compile_options(${target} PRIVATE ${OUR_FLAGS_DEP})\n  endif()\nendforeach()\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1123046875,
          "content": "<a href=\"https://repology.org/metapackage/teeworlds/versions\">\r\n    <img src=\"https://repology.org/badge/vertical-allrepos/teeworlds.svg\" alt=\"Packaging status\" align=\"right\">\r\n</a>\r\n\r\nTeeworlds ![GitHub Actions](https://github.com/teeworlds/teeworlds/workflows/Build/badge.svg)\r\n=========\r\n\r\nA retro multiplayer shooter\r\n---------------------------\r\n\r\nTeeworlds is a free online multiplayer game, available for all major\r\noperating systems. Battle with up to 16 players in a variety of game\r\nmodes, including Team Deathmatch and Capture The Flag. You can even\r\ndesign your own maps!\r\n\r\nThis software is provided 'as-is', without any express or implied\r\nwarranty. In no event will the authors be held liable for any damages\r\narising from the use of this software. See license.txt for full license\r\ntext including copyright information.\r\n\r\nPlease visit https://www.teeworlds.com/ for up-to-date information about\r\nthe game, including new versions, custom maps and much more.\r\n\r\nOriginally written by Magnus Auvinen.\r\n\r\n---\r\n\r\nTeeworlds supports two build systems: CMake and bam.\r\n\r\nBuilding on Linux or macOS (CMake)\r\n==========================\r\n\r\nInstalling dependencies\r\n-----------------------\r\n\r\n    # Debian/Ubuntu\r\n    sudo apt install build-essential cmake git libfreetype6-dev libsdl2-dev libpnglite-dev libwavpack-dev python3\r\n    \r\n    # Fedora\r\n    sudo dnf install @development-tools cmake gcc-c++ git freetype-devel pnglite-devel python3 SDL2-devel wavpack-devel\r\n    \r\n    # Arch Linux (doesn't have pnglite in its repositories)\r\n    sudo pacman -S --needed base-devel cmake freetype2 git python sdl2 wavpack\r\n    \r\n    # macOS\r\n    brew install cmake freetype sdl2\r\n\r\n\r\nDownloading repository\r\n----------------------\r\n\r\n    git clone https://github.com/teeworlds/teeworlds --recurse-submodules\r\n    cd teeworlds\r\n    \r\n    # If you already cloned the repository before, use:\r\n    # git submodule update --init\r\n\r\n\r\nBuilding\r\n--------\r\n\r\n    mkdir -p build\r\n    cd build\r\n    cmake ..\r\n    make\r\n\r\nOn subsequent builds, you only have to repeat the `make` step.\r\n\r\nYou can then run the client with `./teeworlds` and the server with\r\n`./teeworlds_srv`.\r\n\r\n\r\nBuild options\r\n-------------\r\n\r\nThe following options can be passed to the `cmake ..` command line (between the\r\n`cmake` and `..`) in the \"Building\" step above.\r\n\r\n`-GNinja`: Use the Ninja build system instead of Make. This automatically\r\nparallelizes the build and is generally **faster**. (Needs `sudo apt install\r\nninja-build` on Debian, `sudo dnf install ninja-build` on Fedora, and `sudo\r\npacman -S --needed ninja` on Arch Linux.)\r\n\r\n`-DDEV=ON`: Enable debug mode and disable some release mechanics. This leads to\r\n**faster** builds.\r\n\r\n`-DCLIENT=OFF`: Disable generation of the client target. Can be useful on\r\nheadless servers which don't have graphics libraries like SDL2 installed.\r\n\r\nBuilding on Linux or macOS (bam)\r\n==========================\r\n\r\nInstalling dependencies\r\n-----------------------\r\n\r\n    # Debian/Ubuntu 19.10+\r\n    sudo apt install bam git libfreetype6-dev libsdl2-dev libpnglite-dev libwavpack-dev python3\r\n    \r\n    # Fedora\r\n    sudo dnf install bam gcc-c++ git freetype-devel pnglite-devel python3 SDL2-devel wavpack-devel\r\n    \r\n    # Arch Linux (doesn't have pnglite in its repositories)\r\n    sudo pacman -S --needed base-devel bam freetype2 git python sdl2 wavpack\r\n    \r\n    # macOS\r\n    brew install bam freetype sdl2\r\n    \r\n    # other (add bam to your path)\r\n    git clone https://github.com/teeworlds/bam\r\n    cd bam\r\n    ./make_unix.sh\r\n\r\n\r\nDownloading repository\r\n----------------------\r\n\r\n    git clone https://github.com/teeworlds/teeworlds --recurse-submodules\r\n    cd teeworlds\r\n    \r\n    # If you already cloned the repository before, use:\r\n    # git submodule update --init\r\n\r\n\r\nBuilding\r\n--------\r\n\r\n    bam\r\n\r\nThe compiled game is located in a sub-folder of `build`. You can run the client from there with `./teeworlds` and the server with `./teeworlds_srv`.\r\n\r\n\r\nBuild options\r\n-------------\r\n\r\nOne of the following targets can be added to the `bam` command line: `game` (default), `server`, `client`, `content`, `masterserver`, `tools`.\r\n\r\nThe following options can also be added.\r\n\r\n`conf=release` to build in release mode (defaults to `conf=debug`).\r\n\r\n`arch=x86` or `arch=x86_64` to force select an architecture.\r\n\r\nBuilding on Windows with Visual Studio & CMake\r\n======================\r\n\r\nDownload and install some version of [Microsoft Visual\r\nStudio](https://www.visualstudio.com/) (as of writing, MSVS Community 2019)\r\nwith the following components:\r\n\r\n* Desktop development with C++ (on the main page)\r\n* Python development (on the main page)\r\n* Git for Windows (in Individual Components → Code tools)\r\n\r\nRun Visual Studio. Open the Team Explorer (View → Team Explorer, Ctrl+^,\r\nCtrl+M). Click Clone (in the Team Explorer, Connect → Local Git Repositories).\r\nEnter `https://github.com/teeworlds/teeworlds` into the first input box. Wait\r\nfor the download to complete (terminals might pop up).\r\n\r\nWait until the CMake configuration is done (watch the Output windows at the\r\nbottom).\r\n\r\nSelect `teeworlds.exe` in the Select Startup Item… combobox next to the green\r\narrow. Wait for the compilation to finish.\r\n\r\nFor subsequent builds you only have to click the button with the green arrow\r\nagain.\r\n\r\nBuilding on Windows with MSVC build tools & bam\r\n======================\r\n\r\nDownload and install [Microsoft C++ Build Tools](https://visualstudio.microsoft.com/visual-cpp-build-tools/) and [Python](https://www.python.org/downloads/).\r\n\r\nDownload and unzip [Teeworlds stable sources](https://github.com/teeworlds/teeworlds/releases) or [Teeworlds latest sources](https://github.com/teeworlds/teeworlds/archive/master.zip).\r\n\r\nDownload and unzip [bam](https://github.com/matricks/bam/archive/v0.5.1.tar.gz) to `teeworlds-version\\bam`.\r\n\r\nRun the `x64 Native Tools Command Prompt` (or `x86` for 32-bit) from the start menu.\r\n\r\n    # Navigate to the Teeworlds source directory\r\n    cd ...\\teeworlds-version\r\n    \r\n    # Build bam (use make_win32_msvc.bat for 32-bit)\r\n    cd bam\r\n    make_win64_msvc.bat\r\n    copy bam ..\r\n    cd ..\r\n    \r\n    # Build Teeworlds\r\n    bam conf=release\r\n\r\nUse `conf=debug` to build the debug version instead. You can also provide a target after the `bam` command : `game` (default), `server`, `client`, `content`, `masterserver`, `tools`.\r\n\r\nBuilding on Windows with MinGW & CMake\r\n======================\r\n\r\nDownload and install MinGW with at least the following components:\r\n\r\n- mingw-developer-toolkit-bin\r\n- mingw32-base-bin\r\n- mingw32-gcc-g++-bin\r\n- msys-base-bin\r\n\r\nAlso install [Git](https://git-scm.com/downloads) (for downloading the source\r\ncode), [Python](https://www.python.org/downloads/) and\r\n[CMake](https://cmake.org/download/).\r\n\r\nOpen CMake (\"CMake (cmake-gui)\" in the start menu). Click \"Browse Source\"\r\n(first line) and select the directory with the Teeworlds source code. Next,\r\nclick \"Browse Build\" and create a subdirectory for the build (e.g. called\r\n\"build\"). Then click \"Configure\". Select \"MinGW Makefiles\" as the generator and\r\nclick \"Finish\". Wait a bit (until the progress bar is full). Then click\r\n\"Generate\".\r\n\r\nYou can now build Teeworlds by executing `mingw32-make` in the build directory.\r\n"
        },
        {
          "name": "bam.lua",
          "type": "blob",
          "size": 17.6201171875,
          "content": "CheckVersion(\"0.5\")\n\nImport(\"configure.lua\")\nImport(\"other/sdl/sdl.lua\")\nImport(\"other/freetype/freetype.lua\")\n\n--- Setup Config -------\nconfig = NewConfig()\nconfig:Add(OptCCompiler(\"compiler\"))\nconfig:Add(OptTestCompileC(\"stackprotector\", \"int main(){return 0;}\", \"-fstack-protector -fstack-protector-all\"))\nconfig:Add(OptTestCompileC(\"minmacosxsdk\", \"int main(){return 0;}\", \"-mmacosx-version-min=10.7 -isysroot /Developer/SDKs/MacOSX10.7.sdk\"))\nconfig:Add(OptTestCompileC(\"buildwithoutsseflag\", \"#include <immintrin.h>\\nint main(){_mm_pause();return 0;}\", \"\"))\nconfig:Add(OptLibrary(\"zlib\", \"zlib.h\", false))\nconfig:Add(SDL.OptFind(\"sdl\", true))\nconfig:Add(FreeType.OptFind(\"freetype\", true))\nconfig:Finalize(\"config.lua\")\n\ngenerated_src_dir = \"build/src\"\ngenerated_icon_dir = \"build/icons\"\nbuilddir = \"build/%(arch)s/%(conf)s\"\ncontent_src_dir = \"datasrc/\"\n\npython_in_path = ExecuteSilent(\"python -V\") == 0\n\n-- data compiler\nfunction Python(name)\n\tif family == \"windows\" then\n\t\tname = str_replace(name, \"/\", \"\\\\\")\n\t\tif not python_in_path then\n\t\t\t-- Python is usually registered for .py files in Windows\n\t\t\treturn name\n\t\tend\n\tend\n\treturn \"python \" .. name\nend\n\nfunction CHash(output, ...)\n\tlocal inputs = TableFlatten({...})\n\n\toutput = PathJoin(generated_src_dir, Path(output))\n\n\t-- compile all the files\n\tlocal cmd = Python(\"scripts/cmd5.py\") .. \" \"\n\tfor index, inname in ipairs(inputs) do\n\t\tcmd = cmd .. Path(inname) .. \" \"\n\tend\n\n\tcmd = cmd .. \" > \" .. output\n\n\tAddJob(output, \"cmd5 \" .. output, cmd)\n\tfor index, inname in ipairs(inputs) do\n\t\tAddDependency(output, inname)\n\tend\n\tAddDependency(output, \"scripts/cmd5.py\")\n\treturn output\nend\n\nfunction ResCompile(scriptfile, compiler)\n\tscriptfile = Path(scriptfile)\n\tlocal output = nil\n\tif compiler == \"cl\" then\n\t\toutput = PathJoin(generated_icon_dir, PathBase(PathFilename(scriptfile)) .. \".res\")\n\t\tAddJob(output, \"rc \" .. scriptfile, \"rc /fo \" .. output .. \" \" .. scriptfile)\n\telseif compiler == \"gcc\" or compiler == \"clang\" then\n\t\toutput = PathJoin(generated_icon_dir, PathBase(PathFilename(scriptfile)) .. \".coff\")\n\t\tAddJob(output, \"windres \" .. scriptfile, \"windres -i \" .. scriptfile .. \" -o \" .. output)\n\tend\n\tAddDependency(output, scriptfile)\n\treturn output\nend\n\nfunction ContentCompile(action, output)\n\toutput = PathJoin(generated_src_dir, Path(output))\n\tAddJob(\n\t\toutput,\n\t\taction .. \" > \" .. output,\n\t\tPython(\"datasrc/compile.py\") .. \" \" .. action .. \" > \" .. output\n\t)\n\tAddDependency(output, \"datasrc/compile.py\")\n\tAddDependency(\"datasrc/compile.py\", \"datasrc/content.py\", \"datasrc/network.py\", \"datasrc/datatypes.py\")\n\treturn output\nend\n\n\nfunction GenerateCommonSettings(settings, conf, arch, compiler)\n\tif compiler == \"gcc\" or compiler == \"clang\" then\n\t\tsettings.cc.flags:Add(\"-Wall\", \"-fno-exceptions\")\n\tend\n\n\t-- Compile zlib if needed\n\tlocal zlib = nil\n\tif config.zlib.value == 1 then\n\t\tsettings.link.libs:Add(\"z\")\n\t\tif config.zlib.include_path then\n\t\t\tsettings.cc.includes:Add(config.zlib.include_path)\n\t\tend\n\telse\n\t\tsettings.cc.includes:Add(\"src/engine/external/zlib\")\n\t\tzlib = Compile(settings, Collect(\"src/engine/external/zlib/*.c\"))\n\tend\n\n\tlocal md5 = Compile(settings, Collect(\"src/engine/external/md5/*.c\"))\n\tlocal wavpack = Compile(settings, Collect(\"src/engine/external/wavpack/*.c\"))\n\tlocal png = Compile(settings, Collect(\"src/engine/external/pnglite/*.c\"))\n\tlocal json = Compile(settings, Collect(\"src/engine/external/json-parser/*.c\"))\n\n\t-- globally available libs\n\tlibs = {zlib=zlib, wavpack=wavpack, png=png, md5=md5, json=json}\nend\n\nfunction GenerateMacOSSettings(settings, conf, arch, compiler)\n\tif arch == \"x86\" then\n\t\tsettings.cc.flags:Add(\"-arch i386\")\n\t\tsettings.link.flags:Add(\"-arch i386\")\n\telseif arch == \"x86_64\" then\n\t\tsettings.cc.flags:Add(\"-arch x86_64\")\n\t\tsettings.link.flags:Add(\"-arch x86_64\")\n\telseif arch == \"ppc\" then\n\t\tsettings.cc.flags:Add(\"-arch ppc\")\n\t\tsettings.link.flags:Add(\"-arch ppc\")\n\telseif arch == \"ppc64\" then\n\t\tsettings.cc.flags:Add(\"-arch ppc64\")\n\t\tsettings.link.flags:Add(\"-arch ppc64\")\n\telse\n\t\tprint(\"Unknown Architecture '\" .. arch .. \"'. Supported: x86, x86_64, ppc, ppc64\")\n\t\tos.exit(1)\n\tend\n\n\t-- c++ stdlib needed\n\tsettings.cc.flags:Add(\"--stdlib=libc++\")\n\tsettings.link.flags:Add(\"--stdlib=libc++\")\n\t-- this also needs the macOS min SDK version to be at least 10.7\n\n\tsettings.cc.flags:Add(\"-mmacosx-version-min=10.7\")\n\tsettings.link.flags:Add(\"-mmacosx-version-min=10.7\")\n\n\tif config.minmacosxsdk.value == 1 then\n\t\tsettings.cc.flags:Add(\"-isysroot /Developer/SDKs/MacOSX10.7.sdk\")\n\t\tsettings.link.flags:Add(\"-isysroot /Developer/SDKs/MacOSX10.7.sdk\")\n\tend\n\n\tsettings.link.frameworks:Add(\"Carbon\")\n\tsettings.link.frameworks:Add(\"AppKit\")\n\n\tGenerateCommonSettings(settings, conf, arch, compiler)\n\n\t-- Build server launcher before adding game stuff\n\tlocal serverlaunch = Link(settings, \"serverlaunch\", Compile(settings, \"src/macoslaunch/server.m\"))\n\n\t-- Master server, version server and tools\n\tBuildEngineCommon(settings)\n\tBuildMasterserver(settings)\n\tBuildVersionserver(settings)\n\tBuildTools(settings)\n\n\t-- Add requirements for Server & Client\n\tBuildGameCommon(settings)\n\n\t-- Server\n\tsettings.link.frameworks:Add(\"Cocoa\")\n\tlocal server_exe = BuildServer(settings)\n\tAddDependency(server_exe, serverlaunch)\n\n\t-- Client\n\tsettings.link.frameworks:Add(\"OpenGL\")\n\tsettings.link.frameworks:Add(\"AGL\")\n\t-- FIXME: the SDL config is applied in BuildClient too but is needed here before so the launcher will compile\n\tconfig.sdl:Apply(settings)\n\tsettings.link.extrafiles:Merge(Compile(settings, \"src/macoslaunch/client.m\"))\n\tBuildClient(settings)\n\n\t-- Content\n\tBuildContent(settings, arch, conf)\nend\n\nfunction GenerateLinuxSettings(settings, conf, arch, compiler)\n\tif arch == \"x86\" then\n\t\tif config.buildwithoutsseflag.value == false then\n\t\t\tsettings.cc.flags:Add(\"-msse2\") -- for the _mm_pause call\n\t\tend\n\t\tsettings.cc.flags:Add(\"-m32\")\n\t\tsettings.link.flags:Add(\"-m32\")\n\telseif arch == \"x86_64\" then\n\t\tsettings.cc.flags:Add(\"-m64\")\n\t\tsettings.link.flags:Add(\"-m64\")\n\telseif arch == \"armv7l\" then\n\t\t-- arm 32 bit\n\telse\n\t\tprint(\"Unknown Architecture '\" .. arch .. \"'. Supported: x86, x86_64\")\n\t\tos.exit(1)\n\tend\n\tsettings.link.libs:Add(\"pthread\")\n\n\tGenerateCommonSettings(settings, conf, arch, compiler)\n\n\t-- Master server, version server and tools\n\tBuildEngineCommon(settings)\n\tBuildTools(settings)\n\tBuildMasterserver(settings)\n\tBuildVersionserver(settings)\n\n\t-- Add requirements for Server & Client\n\tBuildGameCommon(settings)\n\n\t-- Server\n\tBuildServer(settings)\n\n\t-- Client\n\tsettings.link.libs:Add(\"X11\")\n\tsettings.link.libs:Add(\"GL\")\n\tBuildClient(settings)\n\n\t-- Content\n\tBuildContent(settings, arch, conf)\nend\n\nfunction GenerateSolarisSettings(settings, conf, arch, compiler)\n\tsettings.link.libs:Add(\"socket\")\n\tsettings.link.libs:Add(\"nsl\")\n\n\tGenerateLinuxSettings(settings, conf, arch, compiler)\nend\n\nfunction GenerateWindowsSettings(settings, conf, target_arch, compiler)\n\tif compiler == \"cl\" then\n\t\tif (target_arch == \"x86\" and arch ~= \"ia32\") or\n\t\t   (target_arch == \"x86_64\" and arch ~= \"ia64\" and arch ~= \"amd64\") then\n\t\t\tprint(\"Cross compiling is unsupported on Windows.\")\n\t\t\tos.exit(1)\n\t\tend\n\t\tsettings.cc.flags:Add(\"/wd4244\", \"/wd4577\")\n\telseif compiler == \"gcc\" or config.compiler.driver == \"clang\" then\n\t\tif target_arch ~= \"x86\" and target_arch ~= \"x86_64\" then\n\t\t\tprint(\"Unknown Architecture '\" .. arch .. \"'. Supported: x86, x86_64\")\n\t\t\tos.exit(1)\n\t\tend\n\n\t\t-- disable visibility attribute support for gcc on windows\n\t\tsettings.cc.defines:Add(\"NO_VIZ\")\n\t\tsettings.cc.defines:Add(\"_WIN32_WINNT=0x0501\")\n\tend\n\n\t-- Unicode support\n\tsettings.cc.defines:Add(\"UNICODE\") -- Windows headers\n\tsettings.cc.defines:Add(\"_UNICODE\") -- C-runtime\n\n\tlocal icons = SharedIcons(compiler)\n\tlocal manifests = SharedManifests(compiler)\n\n\t-- Required libs\n\tsettings.link.libs:Add(\"gdi32\")\n\tsettings.link.libs:Add(\"user32\")\n\tsettings.link.libs:Add(\"ws2_32\")\n\tsettings.link.libs:Add(\"ole32\")\n\tsettings.link.libs:Add(\"shell32\")\n\tsettings.link.libs:Add(\"advapi32\")\n\n\tGenerateCommonSettings(settings, conf, target_arch, compiler)\n\n\t-- Master server, version server and tools\n\tBuildEngineCommon(settings)\n\tBuildMasterserver(settings)\n\tBuildVersionserver(settings)\n\tBuildTools(settings)\n\n\t-- Add requirements for Server & Client\n\tBuildGameCommon(settings)\n\n\t-- Server\n\tlocal server_settings = settings:Copy()\n\tserver_settings.link.extrafiles:Add(icons.server)\n\tBuildServer(server_settings)\n\n\t-- Client\n\tsettings.link.extrafiles:Add(icons.client)\n\tsettings.link.extrafiles:Add(manifests.client)\n\tsettings.link.libs:Add(\"opengl32\")\n\tsettings.link.libs:Add(\"winmm\")\n\tsettings.link.libs:Add(\"imm32\")\n\tBuildClient(settings)\n\n\t-- Content\n\tBuildContent(settings, target_arch, conf)\nend\n\nfunction SharedCommonFiles()\n\t-- Shared game files, generate only once\n\n\tif not shared_common_files then\n\t\tlocal network_source = ContentCompile(\"network_source\", \"generated/protocol.cpp\")\n\t\tlocal network_header = ContentCompile(\"network_header\", \"generated/protocol.h\")\n\t\tAddDependency(network_source, network_header, \"src/engine/shared/protocol.h\")\n\n\t\tlocal nethash = CHash(\"generated/nethash.cpp\", \"src/engine/shared/protocol.h\", \"src/game/tuning.h\", \"src/game/gamecore.cpp\", network_header)\n\t\tshared_common_files = {network_source, nethash}\n\tend\n\n\treturn shared_common_files\nend\n\nfunction SharedServerFiles()\n\t-- Shared server files, generate only once\n\n\tif not shared_server_files then\n\t\tlocal server_content_source = ContentCompile(\"server_content_source\", \"generated/server_data.cpp\")\n\t\tlocal server_content_header = ContentCompile(\"server_content_header\", \"generated/server_data.h\")\n\t\tAddDependency(server_content_source, server_content_header)\n\t\tshared_server_files = {server_content_source}\n\tend\n\n\treturn shared_server_files\nend\n\nfunction SharedClientFiles()\n\t-- Shared client files, generate only once\n\n\tif not shared_client_files then\n\t\tlocal client_content_source = ContentCompile(\"client_content_source\", \"generated/client_data.cpp\")\n\t\tlocal client_content_header = ContentCompile(\"client_content_header\", \"generated/client_data.h\")\n\t\tAddDependency(client_content_source, client_content_header)\n\t\tshared_client_files = {client_content_source}\n\tend\n\n\treturn shared_client_files\nend\n\nshared_icons = {}\nfunction SharedIcons(compiler)\n\tif not shared_icons[compiler] then\n\t\tlocal server_icon = ResCompile(\"other/icons/teeworlds_srv_\" .. compiler .. \".rc\", compiler)\n\t\tlocal client_icon = ResCompile(\"other/icons/teeworlds_\" .. compiler .. \".rc\", compiler)\n\t\tshared_icons[compiler] = {server=server_icon, client=client_icon}\n\tend\n\treturn shared_icons[compiler]\nend\n\nfunction SharedManifests(compiler)\n\tif not shared_manifests then\n\t\tlocal client_manifest = ResCompile(\"other/manifest/teeworlds.rc\", compiler)\n\t\tshared_manifests = {client=client_manifest}\n\tend\n\treturn shared_manifests\nend\n\nfunction BuildEngineCommon(settings)\n\tsettings.link.extrafiles:Merge(Compile(settings, Collect(\"src/engine/shared/*.cpp\", \"src/base/*.c\")))\nend\n\nfunction BuildGameCommon(settings)\n\tsettings.link.extrafiles:Merge(Compile(settings, Collect(\"src/game/*.cpp\"), SharedCommonFiles()))\nend\n\n\nfunction BuildClient(settings, family, platform)\n\tconfig.sdl:Apply(settings)\n\tconfig.freetype:Apply(settings)\n\t\n\tlocal client = Compile(settings, Collect(\"src/engine/client/*.cpp\"))\n\t\n\tlocal game_client = Compile(settings, CollectRecursive(\"src/game/client/*.cpp\"), SharedClientFiles())\n\tlocal game_editor = Compile(settings, Collect(\"src/game/editor/*.cpp\"))\n\t\n\tLink(settings, \"teeworlds\", libs[\"zlib\"], libs[\"md5\"], libs[\"wavpack\"], libs[\"png\"], libs[\"json\"], client, game_client, game_editor)\nend\n\nfunction BuildServer(settings, family, platform)\n\tlocal server = Compile(settings, Collect(\"src/engine/server/*.cpp\"))\n\t\n\tlocal game_server = Compile(settings, CollectRecursive(\"src/game/server/*.cpp\"), SharedServerFiles())\n\t\n\treturn Link(settings, \"teeworlds_srv\", libs[\"zlib\"], libs[\"md5\"], libs[\"json\"], server, game_server)\nend\n\nfunction BuildTools(settings)\n\tlocal tools = {}\n\tfor i,v in ipairs(Collect(\"src/tools/*.cpp\", \"src/tools/*.c\")) do\n\t\tlocal toolname = PathFilename(PathBase(v))\n\t\ttools[i] = Link(settings, toolname, Compile(settings, v), libs[\"zlib\"], libs[\"md5\"], libs[\"wavpack\"], libs[\"png\"], libs[\"json\"])\n\tend\n\tPseudoTarget(settings.link.Output(settings, \"pseudo_tools\") .. settings.link.extension, tools)\nend\n\nfunction BuildMasterserver(settings)\n\treturn Link(settings, \"mastersrv\", Compile(settings, Collect(\"src/mastersrv/*.cpp\")), libs[\"zlib\"], libs[\"md5\"], libs[\"json\"])\nend\n\nfunction BuildVersionserver(settings)\n\treturn Link(settings, \"versionsrv\", Compile(settings, Collect(\"src/versionsrv/*.cpp\")), libs[\"zlib\"], libs[\"md5\"], libs[\"json\"])\nend\n\nfunction BuildContent(settings, arch, conf)\n\tlocal content = {}\n\ttable.insert(content, CopyToDir(settings.link.Output(settings, \"data\"), CollectRecursive(content_src_dir .. \"*.png\", content_src_dir .. \"*.wv\", content_src_dir .. \"*.ttc\", content_src_dir .. \"*.ttf\", content_src_dir .. \"*.txt\", content_src_dir .. \"*.map\", content_src_dir .. \"*.rules\", content_src_dir .. \"*.json\")))\n\tif family == \"windows\" then\n\t\tif arch == \"x86_64\" then\n\t\t\t_arch = \"64\"\n\t\telse\n\t\t\t_arch = \"32\"\n\t\tend\n\t\t-- dependencies\n\t\tdl = Python(\"scripts/download.py\")\n\t\tAddJob({\n\t\t\t\t\"other/freetype/include/ft2build.h\", \"other/freetype/windows/lib\" .. _arch .. \"/freetype.dll\",\n\t\t\t\t\"other/sdl/include/SDL.h\", \"other/sdl/windows/lib\" .. _arch .. \"/SDL2.dll\"\n\t\t\t}, \"Downloading freetype and SDL2\", dl .. \" freetype sdl\"\n\t\t)\n\t\ttable.insert(content, CopyFile(settings.link.Output(settings, \"\") .. \"/SDL2.dll\", \"other/sdl/windows/lib\" .. _arch .. \"/SDL2.dll\"))\n\t\ttable.insert(content, CopyFile(settings.link.Output(settings, \"\") .. \"/freetype.dll\", \"other/freetype/windows/lib\" .. _arch .. \"/freetype.dll\"))\n\t\tAddDependency(settings.link.Output(settings, \"\") .. \"/SDL2.dll\", \"other/sdl/include/SDL.h\")\n\t\tAddDependency(settings.link.Output(settings, \"\") .. \"/freetype.dll\", \"other/freetype/include/ft2build.h\")\n\tend\n\tPseudoTarget(settings.link.Output(settings, \"content\") .. settings.link.extension, content)\nend\n\n-- create all targets for specified configuration & architecture\nfunction GenerateSettings(conf, arch, builddir, compiler, headless)\n\tlocal settings = NewSettings()\n\n\t-- Set compiler if explicitly requested\n\tif compiler == \"gcc\" then\n\t\tSetDriversGCC(settings)\n\telseif compiler == \"clang\" then\n\t\tSetDriversClang(settings)\n\telseif compiler == \"cl\" then\n\t\tSetDriversCL(settings)\n\telse\n\t\t-- apply compiler settings\n\t\tconfig.compiler:Apply(settings)\n\t\tcompiler = config.compiler.driver\n\tend\n\t\n\tif conf == \"debug\" then\n\t\tsettings.debug = 1\n\t\tsettings.optimize = 0\n\t\tsettings.cc.defines:Add(\"CONF_DEBUG\")\n\telse\n\t\tsettings.debug = 0\n\t\tsettings.optimize = 1\n\t\tsettings.cc.defines:Add(\"CONF_RELEASE\")\n\tend\n\n\tif headless == \"on\" then\n\t\tsettings.cc.defines:Add(\"CONF_HEADLESS_CLIENT\")\n\tend\n\t\n\t-- Generate object files in {builddir}/objs/\n\tsettings.cc.Output = function (settings_, input)\n\t\t-- strip \n\t\tinput = input:gsub(\"^src/\", \"\")\n\t\tinput = input:gsub(\"^\" .. generated_src_dir .. \"/\", \"\")\n\t\treturn PathJoin(PathJoin(builddir, \"objs\"), PathBase(input))\n\tend\n\t\n\t-- Build output files in {builddir}\n\tsettings.link.Output = function (settings_, input)\n\t\treturn PathJoin(builddir, PathBase(input) .. settings_.config_ext)\n\tend\n\t\n\tsettings.cc.includes:Add(\"src\")\n\tsettings.cc.includes:Add(\"src/engine/external/pnglite\")\n\tsettings.cc.includes:Add(\"src/engine/external/wavpack\")\n\tsettings.cc.includes:Add(generated_src_dir)\n\t\n\tif family == \"windows\" then\n\t\tGenerateWindowsSettings(settings, conf, arch, compiler)\n\telseif family == \"unix\" then\n\t\tif platform == \"macosx\" then\n\t\t\tGenerateMacOSSettings(settings, conf, arch, compiler)\n\t\telseif platform == \"solaris\" then\n\t\t\tGenerateSolarisSettings(settings, conf, arch, compiler)\n\t\telse -- Linux, BSD\n\t\t\tGenerateLinuxSettings(settings, conf, arch, compiler)\n\t\tend\n\tend\n\n\treturn settings\nend\n\n-- String formatting with named parameters, by RiciLake http://lua-users.org/wiki/StringInterpolation\nfunction interp(s, tab)\n\treturn (s:gsub('%%%((%a%w*)%)([-0-9%.]*[cdeEfgGiouxXsq])',\n\t\t\tfunction(k, fmt)\n\t\t\t\treturn tab[k] and (\"%\"..fmt):format(tab[k]) or '%('..k..')'..fmt\n\t\t\tend))\nend\n\nfunction CopyToDir(dst, ...)\n\tlocal output = {}\n\tfor filename in TableWalk({...}) do\n\t\ttable.insert(output, CopyFile(PathJoin(dst, string.sub(filename, string.len(content_src_dir)+1)), filename))\n\tend\n\treturn output\nend\n\nfunction split(str, sep)\n\tlocal vals = {}\n\tstr:gsub(\"([^,]+)\", function(val) table.insert(vals, val) end)\n\treturn vals\nend\n\n-- Supported archtitectures: x86, amd64, ppc, ppc64\nif ScriptArgs['arch'] then\n\tarchs = split(ScriptArgs['arch'])\nelse\n\tif arch == \"ia32\" then\n\t\tarchs = {\"x86\"}\n\telseif arch == \"ia64\" or arch == \"amd64\" or arch == \"arm64\" then\n\t\tarchs = {\"x86_64\"}\n\telse\n\t\tarchs = {arch}\n\tend\nend\n\nif ScriptArgs['conf'] then\n\tconfs = split(ScriptArgs['conf'])\nelse\n\tconfs = {\"debug\"}\nend\n\nif ScriptArgs['compiler'] then\n\tcompiler = ScriptArgs['compiler']\nelse\n\tcompiler = nil\nend\n\nif ScriptArgs['builddir'] then\n\tbuilddir = ScriptArgs['builddir']\nend\n\nif ScriptArgs['headless'] then\n\theadless = ScriptArgs['headless']\nelse\n\theadless = nil\nend\n\ntargets = {client=\"teeworlds\", server=\"teeworlds_srv\",\n           versionserver=\"versionsrv\", masterserver=\"mastersrv\",\n           tools=\"pseudo_tools\", content=\"content\"}\n\nsubtargets = {}\nfor t, cur_target in pairs(targets) do\n\tsubtargets[cur_target] = {}\nend\nfor a, cur_arch in ipairs(archs) do\n\tfor c, cur_conf in ipairs(confs) do\n\t\tcur_builddir = interp(builddir, {platform=family, arch=cur_arch, target=cur_target, conf=cur_conf, compiler=compiler})\n\t\tlocal settings = GenerateSettings(cur_conf, cur_arch, cur_builddir, compiler, headless)\n\t\tfor t, cur_target in pairs(targets) do\n\t\t\ttable.insert(subtargets[cur_target], PathJoin(cur_builddir, cur_target .. settings.link.extension))\n\t\tend\n\tend\nend\n\nfor cur_name, cur_target in pairs(targets) do\n\t-- Supertarget for all configurations and architectures of that target\n\tPseudoTarget(cur_name, subtargets[cur_target])\nend\n\nPseudoTarget(\"game\", \"client\", \"server\", \"content\")\nDefaultTarget(\"game\")\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.lua",
          "type": "blob",
          "size": 11.9189453125,
          "content": "\n--[[@GROUP Configuration@END]]--\n\n--[[@FUNCTION\n\tTODO\n@END]]--\nfunction NewConfig(on_configured_callback)\n\tlocal config = {}\n\n\tconfig.OnConfigured = function(self)\n\t\treturn true\n\tend\n\n\tif on_configured_callback then config.OnConfigured = on_configured_callback end\n\n\tconfig.options = {}\n\tconfig.settings = NewSettings()\n\n\tconfig.NewSettings = function(self)\n\t\tlocal s = NewSettings()\n\t\tfor _,v in pairs(self.options) do\n\t\t\tv:Apply(s)\n\t\tend\n\t\treturn s\n\tend\n\n\tconfig.Add = function(self, o)\n\t\ttable.insert(self.options, o)\n\t\tself[o.name] = o\n\tend\n\n\tconfig.Print = function(self)\n\t\tfor k,v in pairs(self.options) do\n\t\t\tprint(v:FormatDisplay())\n\t\tend\n\tend\n\n\tconfig.Save = function(self, filename)\n\t\tprint(\"saved configuration to '\"..filename..\"'\")\n\t\tlocal file = io.open(filename, \"w\")\n\n\t\t-- Define a little helper function to save options\n\t\tlocal saver = {}\n\t\tsaver.file = file\n\n\t\tsaver.line = function(self, str)\n\t\t\tself.file:write(str .. \"\\n\")\n\t\tend\n\n\t\tsaver.option = function(self, option, name)\n\t\t\tlocal valuestr = \"no\"\n\t\t\tif type(option[name]) == type(0) then\n\t\t\t\tvaluestr = option[name]\n\t\t\telseif type(option[name]) == type(true) then\n\t\t\t\tvaluestr = \"false\"\n\t\t\t\tif option[name] then\n\t\t\t\t\tvaluestr = \"true\"\n\t\t\t\tend\n\t\t\telseif type(option[name]) == type(\"\") then\n\t\t\t\tvaluestr = \"'\"..option[name]..\"'\"\n\t\t\telse\n\t\t\t\terror(\"option \"..name..\" have a value of type \".. type(option[name])..\" that can't be saved\")\n\t\t\tend\n\t\t\tself.file:write(option.name..\".\"..name..\" = \".. valuestr..\"\\n\")\n\t\tend\n\n\t\t-- Save all the options\n\t\tfor k,v in pairs(self.options) do\n\t\t\tv:Save(saver)\n\t\tend\n\t\tfile:close()\n\tend\n\n\tconfig.Load = function(self, filename)\n\t\tlocal options_table = {}\n\t\tlocal options_func = loadfile(filename, nil, options_table)\n\n\t\tif not options_func then\n\t\t\tprint(\"auto configuration\")\n\t\t\tself:Config(filename)\n\t\t\toptions_func = loadfile(filename, nil, options_table)\n\t\tend\n\n\t\tif options_func then\n\t\t\t-- Setup the options tables\n\t\t\tfor k,v in pairs(self.options) do\n\t\t\t\toptions_table[v.name] = {}\n\t\t\tend\n\n\t\t\t-- this is to make sure that we get nice error messages when\n\t\t\t-- someone sets an option that isn't valid.\n\t\t\tlocal mt = {}\n\t\t\tmt.__index = function(t, key)\n\t\t\t\tlocal v = rawget(t, key)\n\t\t\t\tif v ~= nil then return v end\n\t\t\t\terror(\"there is no configuration option named '\" .. key .. \"'\")\n\t\t\tend\n\n\t\t\tsetmetatable(options_table, mt)\n\n\t\t\t-- Process the options\n\t\t\toptions_func()\n\n\t\t\t-- Copy the options\n\t\t\tfor k,v in pairs(self.options) do\n\t\t\t\tif options_table[v.name] then\n\t\t\t\t\tfor k2,v2 in pairs(options_table[v.name]) do\n\t\t\t\t\t\tv[k2] = v2\n\t\t\t\t\tend\n\t\t\t\t\tv.auto_detected = false\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tprint(\"error: no '\"..filename..\"' found\")\n\t\t\tprint(\"\")\n\t\t\tprint(\"run 'bam config' to generate\")\n\t\t\tprint(\"run 'bam config help' for configuration options\")\n\t\t\tprint(\"\")\n\t\t\tos.exit(1)\n\t\tend\n\tend\n\n\tconfig.Config = function(self, filename)\n\t\tprint(\"\")\n\t\tprint(\"configuration:\")\n\t\tif _bam_targets[1] == \"print\" then\n\t\t\tself:Load(filename)\n\t\t\tself:Print()\n\t\t\tprint(\"\")\n\t\t\tprint(\"notes:\")\n\t\t\tself:OnConfigured()\n\t\t\tprint(\"\")\n\t\telse\n\t\t\tself:Autodetect()\n\t\t\tprint(\"\")\n\t\t\tprint(\"notes:\")\n\t\t\tif self:OnConfigured() then\n\t\t\t\tself:Save(filename)\n\t\t\tend\n\t\t\tprint(\"\")\n\t\tend\n\n\tend\n\n\tconfig.Autodetect = function(self)\n\t\tfor k,v in pairs(self.options) do\n\t\t\tv:Check(self.settings)\n\t\t\tprint(v:FormatDisplay())\n\t\t\tself[v.name] = v\n\t\tend\n\tend\n\n\tconfig.PrintHelp = function(self)\n\t\tprint(\"options:\")\n\t\tfor k,v in pairs(self.options) do\n\t\t\tif v.PrintHelp then\n\t\t\t\tv:PrintHelp()\n\t\t\tend\n\t\tend\n\tend\n\n\tconfig.Finalize = function(self, filename)\n\t\tif _bam_targets[0] == \"config\" then\n\t\t\tif _bam_targets[1] == \"help\" then\n\t\t\t\tself:PrintHelp()\n\t\t\t\tos.exit(0)\n\t\t\tend\n\n\t\t\tself:Config(filename)\n\n\t\t\tos.exit(0)\n\t\tend\n\n\t\tself:Load(filename)\n\t\tbam_update_globalstamp(filename)\n\tend\n\n\treturn config\nend\n\n\n-- Helper functions --------------------------------------\nfunction DefaultOptionDisplay(option)\n\tif not option.value then return \"no\" end\n\tif option.value == 1 or option.value == true then return \"yes\" end\n\treturn option.value\nend\n\nfunction IsNegativeTerm(s)\n\tif s == \"no\" then return true end\n\tif s == \"false\" then return true end\n\tif s == \"off\" then return true end\n\tif s == \"disable\" then return true end\n\tif s == \"0\" then return true end\n\treturn false\nend\n\nfunction IsPositiveTerm(s)\n\tif s == \"yes\" then return true end\n\tif s == \"true\" then return true end\n\tif s == \"on\" then return true end\n\tif s == \"enable\" then return true end\n\tif s == \"1\" then return true end\n\treturn false\nend\n\nfunction MakeOption(name, value, check, save, display, printhelp)\n\tlocal o = {}\n\to.name = name\n\to.value = value\n\to.Check = check\n\to.Save = save\n\to.auto_detected = true\n\to.FormatDisplay = function(self)\n\t\tlocal a = \"SET\"\n\t\tif self.auto_detected then a = \"AUTO\" end\n\t\treturn string.format(\"%-5s %-20s %s\", a, self.name, self:Display())\n\tend\n\n\to.Display = display\n\to.PrintHelp = printhelp\n\tif o.Display == nil then o.Display = DefaultOptionDisplay end\n\treturn o\nend\n\n\n-- Test Compile C --------------------------------------\nfunction OptTestCompileC(name, source, compileoptions, desc)\n\tlocal check = function(option, settings)\n\t\toption.value = false\n\t\tif ScriptArgs[option.name] then\n\t\t\tif IsNegativeTerm(ScriptArgs[option.name]) then\n\t\t\t\toption.value = false\n\t\t\telseif IsPositiveTerm(ScriptArgs[option.name]) then\n\t\t\t\toption.value = true\n\t\t\telse\n\t\t\t\terror(ScriptArgs[option.name]..\" is not a valid value for option \"..option.name)\n\t\t\tend\n\t\t\toption.auto_detected = false\n\t\telse\n\t\t\tif CTestCompile(settings, option.source, option.compileoptions) then\n\t\t\t\toption.value = true\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"value\")\n\tend\n\n\tlocal printhelp = function(option)\n\t\tprint(\"\\t\"..option.name..\"=on|off\")\n\t\tif option.desc then print(\"\\t\\t\"..option.desc) end\n\tend\n\n\tlocal o = MakeOption(name, false, check, save, nil, printhelp)\n\to.desc = desc\n\to.source = source\n\to.compileoptions = compileoptions\n\treturn o\nend\n\n\n-- OptToggle --------------------------------------\nfunction OptToggle(name, default_value, desc)\n\tlocal check = function(option, settings)\n\t\tif ScriptArgs[option.name] then\n\t\t\tif IsNegativeTerm(ScriptArgs[option.name]) then\n\t\t\t\toption.value = false\n\t\t\telseif IsPositiveTerm(ScriptArgs[option.name]) then\n\t\t\t\toption.value = true\n\t\t\telse\n\t\t\t\terror(ScriptArgs[option.name]..\" is not a valid value for option \"..option.name)\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"value\")\n\tend\n\n\tlocal printhelp = function(option)\n\t\tprint(\"\\t\"..option.name..\"=on|off\")\n\t\tif option.desc then print(\"\\t\\t\"..option.desc) end\n\tend\n\n\tlocal o = MakeOption(name, default_value, check, save, nil, printhelp)\n\to.desc = desc\n\treturn o\nend\n\n-- OptInteger --------------------------------------\nfunction OptInteger(name, default_value, desc)\n\tlocal check = function(option, settings)\n\t\tif ScriptArgs[option.name] then\n\t\t\toption.value = tonumber(ScriptArgs[option.name])\n\t\tend\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"value\")\n\tend\n\n\tlocal printhelp = function(option)\n\t\tprint(\"\\t\"..option.name..\"=N\")\n\t\tif option.desc then print(\"\\t\\t\"..option.desc) end\n\tend\n\n\tlocal o = MakeOption(name, default_value, check, save, nil, printhelp)\n\to.desc = desc\n\treturn o\nend\n\n\n-- OptString --------------------------------------\nfunction OptString(name, default_value, desc)\n\tlocal check = function(option, settings)\n\t\tif ScriptArgs[option.name] then\n\t\t\toption.value = ScriptArgs[option.name]\n\t\tend\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"value\")\n\tend\n\n\tlocal printhelp = function(option)\n\t\tprint(\"\\t\"..option.name..\"=STRING\")\n\t\tif option.desc then print(\"\\t\\t\"..option.desc) end\n\tend\n\n\tlocal o = MakeOption(name, default_value, check, save, nil, printhelp)\n\to.desc = desc\n\treturn o\nend\n\n-- Find Compiler --------------------------------------\n--[[@FUNCTION\n\tTODO\n@END]]--\nfunction OptCCompiler(name, default_driver, default_c, default_cxx, desc)\n\tlocal check = function(option, settings)\n\t\tif ScriptArgs[option.name] then\n\t\t\t-- set compile driver\n\t\t\toption.driver = ScriptArgs[option.name]\n\n\t\t\t-- set c compiler\n\t\t\tif ScriptArgs[option.name..\".c\"] then\n\t\t\t\toption.c_compiler = ScriptArgs[option.name..\".c\"]\n\t\t\tend\n\n\t\t\t-- set c+= compiler\n\t\t\tif ScriptArgs[option.name..\".cxx\"] then\n\t\t\t\toption.cxx_compiler = ScriptArgs[option.name..\".cxx\"]\n\t\t\tend\n\n\t\t\toption.auto_detected = false\n\t\telseif option.driver then\n\t\t\t-- no need todo anything if we have a driver\n\t\t\t-- TODO: test if we can find the compiler\n\t\telse\n\t\t\tif ExecuteSilent(\"g++ -v\") == 0 and ((arch ~= \"amd64\" and arch ~= \"ia64\") or CTestCompile(settings, \"int main(){return 0;}\", \"-m64\")) then\n\t\t\t\toption.driver = \"gcc\"\n\t\t\telseif ExecuteSilent(\"cl\") == 0 then\n\t\t\t\toption.driver = \"cl\"\n\t\t\telse\n\t\t\t\terror(\"no c/c++ compiler found\")\n\t\t\tend\n\t\tend\n\t\t--setup_compiler(option.value)\n\tend\n\n\tlocal apply = function(option, settings)\n\t\tif option.driver == \"cl\" then\n\t\t\tSetDriversCL(settings)\n\t\telseif option.driver == \"gcc\" then\n\t\t\tSetDriversGCC(settings)\n\t\telseif option.driver == \"clang\" then\n\t\t\tSetDriversClang(settings)\n\t\telse\n\t\t\terror(option.driver..\" is not a known c/c++ compile driver\")\n\t\tend\n\n\t\tif option.c_compiler then settings.cc.c_compiler = option.c_compiler end\n\t\tif option.cxx_compiler then settings.cc.cxx_compiler = option.cxx_compiler end\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"driver\")\n\t\toutput:option(option, \"c_compiler\")\n\t\toutput:option(option, \"cxx_compiler\")\n\tend\n\n\tlocal printhelp = function(option)\n\t\tlocal a = \"\"\n\t\tif option.desc then a = \"for \"..option.desc end\n\t\tprint(\"\\t\"..option.name..\"=gcc|cl|clang\")\n\t\tprint(\"\\t\\twhat c/c++ compile driver to use\"..a)\n\t\tprint(\"\\t\"..option.name..\".c=FILENAME\")\n\t\tprint(\"\\t\\twhat c compiler executable to use\"..a)\n\t\tprint(\"\\t\"..option.name..\".cxx=FILENAME\")\n\t\tprint(\"\\t\\twhat c++ compiler executable to use\"..a)\n\tend\n\n\tlocal display = function(option)\n\t\tlocal s = option.driver\n\t\tif option.c_compiler then s = s .. \" c=\"..option.c_compiler end\n\t\tif option.cxx_compiler then s = s .. \" cxx=\"..option.cxx_compiler end\n\t\treturn s\n\tend\n\n\tlocal o = MakeOption(name, nil, check, save, display, printhelp)\n\to.desc = desc\n\to.driver = false\n\to.c_compiler = false\n\to.cxx_compiler = false\n\n\tif default_driver then o.driver = default_driver end\n\tif default_c then o.c_compiler = default_c end\n\tif default_cxx then o.cxx_compiler = default_cxx end\n\n\to.Apply = apply\n\treturn o\nend\n\n-- Option Library --------------------------------------\n--[[@FUNCTION\n\tTODO\n@END]]--\nfunction OptLibrary(name, header, desc)\n\tlocal check = function(option, settings)\n\t\toption.value = false\n\t\toption.include_path = false\n\n\t\tlocal function check_compile_include(filename, paths)\n\t\t\tif CTestCompile(settings, \"#include <\" .. filename .. \">\\nint main(){return 0;}\", \"\") then\n\t\t\t\treturn \"\"\n\t\t\tend\n\n\t\t\tfor k,v in pairs(paths) do\n\t\t\t\tif CTestCompile(settings, \"#include <\" .. filename .. \">\\nint main(){return 0;}\", \"-I\"..v) then\n\t\t\t\t\treturn v\n\t\t\t\tend\n\t\t\tend\n\n\t\t\treturn false\n\t\tend\n\n\t\tif ScriptArgs[option.name] then\n\t\t\tif IsNegativeTerm(ScriptArgs[option.name]) then\n\t\t\t\toption.value = false\n\t\t\telseif ScriptArgs[option.name] == \"system\" then\n\t\t\t\toption.value = true\n\t\t\telse\n\t\t\t\toption.value = true\n\t\t\t\toption.include_path = ScriptArgs[option.name]\n\t\t\tend\n\t\t\toption.auto_detected = false\n\t\telse\n\t\t\toption.include_path = check_compile_include(option.header, {})\n\t\t\tif option.include_path == false then\n\t\t\t\tif option.required then\n\t\t\t\t\tprint(name..\" library not found and is required\")\n\t\t\t\t\terror(\"required library not found\")\n\t\t\t\tend\n\t\t\telse\n\t\t\t\toption.value = true\n\t\t\t\toption.include_path = false\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal save = function(option, output)\n\t\toutput:option(option, \"value\")\n\t\toutput:option(option, \"include_path\")\n\tend\n\n\tlocal display = function(option)\n\t\tif option.value then\n\t\t\tif option.include_path then\n\t\t\t\treturn option.include_path\n\t\t\telse\n\t\t\t\treturn \"(in system path)\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"not found\"\n\t\tend\n\tend\n\n\tlocal printhelp = function(option)\n\t\tprint(\"\\t\"..option.name..\"=disable|system|PATH\")\n\t\tif option.desc then print(\"\\t\\t\"..option.desc) end\n\tend\n\n\tlocal o = MakeOption(name, false, check, save, display, printhelp)\n\to.include_path = false\n\to.header = header\n\to.desc = desc\n\treturn o\nend\n\n"
        },
        {
          "name": "datasrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.6943359375,
          "content": "Copyright (C) 2007-2024 Magnus Auvinen\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n  claim that you wrote the original software. If you use this software\n  in a product, an acknowledgment in the product documentation would be\n  appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n  misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n------------------------------------------------------------------------\n\nAll content under 'data' and 'datasrc' except the font (which has its own\nlicense) is released under CC-BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0/).\n\nAuthors:\tandroid272, Chi11y (chi1), Crises, Daniel, Echchouik, Fisico,\n\t\t\tleovilok, Landil, Lappi, LordSk, maikka, matricks, Pocram, \n\t\t\tred_com, serpis, SkizZ, somerunce, Sonix, Stephanator, teetow,\n\t\t\tUbu, Zatline\n\n------------------------------------------------------------------------\n\nIMPORTANT NOTE! The source under src/engine/external are stripped\nlibraries with their own licenses. Mostly BSD or zlib/libpng license but\ncheck the individual libraries.\n\n------------------------------------------------------------------------\n\nWith that being said, contact us if there is anything you want to do\nthat the license does not permit.\n"
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage.cfg",
          "type": "blob",
          "size": 0.900390625,
          "content": "####\n# This specifies where and in which order Teeworlds looks\n# for its data (sounds, skins, ...). The search goes top\n# down which means the first path has the highest priority.\n# Furthermore the top entry also defines the save path where\n# all data (settings.cfg, screenshots, ...) are stored.\n# There are 3 special paths available:\n#\t$USERDIR\n#\t- ~/.appname on UNIX based systems\n#\t- ~/Library/Applications Support/appname on macOS\n#\t- %APPDATA%/Appname on Windows based systems\n#\t$DATADIR\n#\t- the 'data' directory which is part of an official\n#\trelease\n#\t$CURRENTDIR\n#\t- current working directory\n#\t$APPDIR\n#\t- usable path provided by argv[0]\n#\n#\n# The default file has the following entries:\n#\tadd_path $USERDIR\n#\tadd_path $DATADIR\n#\tadd_path $CURRENTDIR\n#\n# A customised one could look like this:\n#\tadd_path user\n#\tadd_path mods/mymod\n####\n\nadd_path $USERDIR\nadd_path $DATADIR\nadd_path $CURRENTDIR\nadd_path $APPDIR\n"
        }
      ]
    }
  ]
}