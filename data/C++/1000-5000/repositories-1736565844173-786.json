{
  "metadata": {
    "timestamp": 1736565844173,
    "page": 786,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SpacehuhnTech/WiFiDuck",
      "stars": 2148,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.36328125,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Save on Command Plugin\nsave-commands.json\n\n# Compiled binaries\n*.bin\n*.zip\n.DS_Store\n\n*.hex\n\n*.uf2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2020 Spacehuhn Technologies\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.8486328125,
          "content": "# WiFi Duck\n\n<p align=\"center\">\n<img alt=\"WiFi Duck Logo\" src=\"img/thumbnail.jpg\" width=\"640\">\n</p>\n\n### üëâ Visit [wifiduck.com](https://wifiduck.com) for an improved documentation.\n\nWant to learn more about BadUSBs? Check out our online course: [learnbadusb.com](https://learnbadusb.com) \n\n---\n\n* [About](#about)\n* [Usage](#usage)\n* [Support us](#support-us)\n* [Buy Hardware](#buy-hardware)\n  + [Malduino W](#malduino-w)\n  + [DSTIKE WiFi Duck](#dstike-wifi-duck)\n* [DIY Hardware](#diy-hardware)\n  + [Atmega32u4 Development Boards](#atmega32u4-development-boards)\n  + [ESP8266 Development Boards](#esp8266-development-boards)\n  + [Connections](#connections)\n  + [PCB](#pcb)\n* [Flash Software](#flash-software)\n  + [Flash Atmega32u4](#flash-atmega32u4)\n  + [Flash ESP8266](#flash-esp8266)\n  + [Unbrick Atmega32u4](#unbrick-atmega32u4)\n* [Scripting](#scripting)\n  + [Basics](#basics)\n  + [Functions](#functions)\n  + [Standard Keys](#standard-keys)\n  + [Modifier Keys](#modifier-keys)\n  + [Other Keys](#other-keys)\n  + [Numpad Keys](#numpad-keys)\n  + [Examples](#examples)\n* [CLI Commands](#cli-commands)\n  + [General](#general)\n  + [SPIFFS File Management](#spiffs-file-management)\n* [How to Debug](#how-to-debug)\n* [Development](#development)\n  + [Edit Web Files](#edit-web-files)\n  + [Translate Keyboard Layout](#translate-keyboard-layout)\n* [Disclaimer](#disclaimer)\n* [License](#license)\n* [Credits](#credits)\n\n## About\n\nThis open-source project aims to provide a user-friendly tool to learn about keystroke injection attacks and 'BadUSBs'.  \n\nBy emulating a USB keyboard, tools like this can gain full access to any computer with a USB port in a matter of seconds!  \nThis is made possible by the fact that keyboards are trusted by computers. You can have full control over a computer with just a keyboard.  \nA BadUSB pretends to be a keyboard to the computer to send keystrokes. \nBut unlike a human, it can type hundreds of characters per second. \nBy using a simple scripting language, it's easy to make BadUSBs type whatever you want. \n\nWith the WiFi Duck, you can simply connect via WiFi to manage all scripts\nfrom within a web interface. This means that, unlike other BadUSBs, you don't need to install an app, log in, compile or copy scripts to an SD card.  \n\n## Usage\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=sSJuGXd8QRk\">\n    <img alt=\"WiFi Duck Video Thumbnail\" src=\"https://raw.githubusercontent.com/spacehuhn/WiFiDuck/master/img/showcase.gif\" width=\"400\">\n    <br>\n    <b>Watch the full video</b>\n  </a>\n</p>\n\n1. Plug in your WiFi Duck\n2. Connect to the WiFi network `wifiduck` with the password `wifiduck`\n3. Open a browser and visit `192.168.4.1`\n4. Write, save and run your first Ducky Script\n5. [Recommended] Open `Settings` (top right corner) and update SSID and password\n\n**Help I forgot the password:**\n[Flash the ESP8266](#flash-esp8266), but make sure that you select `Erase Flash: Sketch + WiFi Settings`\nunder Tools in the Arduino IDE.  \n\nIf you have further questions, check out the [issue section](https://github.com/spacehuhn/WiFiDuck/issues).  \n\n## Support us\n\nHey, do you like this kind of project?  \nIt took a huge amount of effort to create!  \n\nTo make sure we can keep working on free and open-source projects like this,  \n**please consider becoming a [:heart: Sponsor](https://github.com/sponsors/spacehuhntech) or support us via [:coffee: Ko-fi](https://ko-fi.com/spacehuhn).**  \n\nVisit [spacehuhn.com](https://spacehuhn.com) to learn more about us. :chicken:\n\n<a href='https://ko-fi.com/G2G75FA4V' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://cdn.ko-fi.com/cdn/kofi2.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>\n\n## Buy Hardware\n\n### Malduino W\n\n<p align=\"center\">\n  <a href=\"https://maltronics.com/collections/malduinos/products/malduino-w\">\n    <img alt=\"Malduino W\" src=\"img/malw.jpg\" width=\"400\">\n    <br>\n    <b>Go to Maltronics.com</b>\n  </a>\n</p>\n\nA nicely encased, inconspicuous looking BadUSB by Maltronics.  \nHaving USB-A and USB-C makes it compatible with all kind of devices.  \nIt comes flashed with the WiFi Duck firmware and works plug and play.  \n‚ÑπÔ∏è **[Documentation can be found here](http://docs.maltronics.com/malduino-w/)**\n\n### DSTIKE WiFi Duck\n\n<p align=\"center\">\n  <a href=\"https://dstike.com/collections/frontpage/products/dstike-wifi-duck\">\n    <img alt=\"DSTIKE WiFi Duck\" src=\"img/dstikeboard.jpg\" width=\"400\">\n    <br>\n    <b>Got to DSTIKE.com</b>\n  </a>\n</p>\n\nA custom designed development board which comes preflashed with this software by Travis Lin.  \n\nYou can update the ESP8266 over the air and flash the Atmega32u4 via Arduino, all while enclosed in its neat little case.  \nüì∫ **[Watch the How to Update Tutorial here](https://youtu.be/e3-nsOjclsY)**.\n\nIf you wish to develop your own software or help improve this one, \nthe 8-bit DIP-switch makes it easy for you to access the Atmega32u4 or ESP8266 independently. \nFor more info see [Flash Software](#flash-software).\n\n| Mode | Atmega32u4 | ESP8266 | DIP-switch | Image |\n| --- | --- | --- | --- | --- |\n| Default Operating Mode | USB | On | 10101101 | <img alt=\"dstike wifi duck work mode\" src=\"img/dstike_normal.jpg\" height=\"50px\"> |\n| Atmega32u4 Flash Mode | USB | Off |10101010 | <img alt=\"dstike wifi duck atmega mode\" src=\"img/dstike_atmega.jpg\" height=\"50px\"> |\n| ESP8266 Flash Mode | Off | USB | 01011101 | <img alt=\"dstike wifi duck esp8266 mode\" src=\"img/dstike_esp8266.jpg\" height=\"50px\"> |\n\n## DIY Hardware\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=-Gmv98tUiYw\">\n    <img alt=\"WiFi Duck Hardware Tutorial Video Thumbnail\" src=\"https://img.youtube.com/vi/-Gmv98tUiYw/maxresdefault.jpg\" width=\"400\">\n    <br>\n    <b>Watch the video tutorial</b>\n  </a>\n</p>\n\nTo build a WiFi Duck yourself, you need the following hardware:  \n* An Atmega32u4 development board (see the list below)  \n* An ESP8266 or ESP8285 development board (see the list below)  \n* Optional: A single Neopixel (WS2812b) or Dotstar (APA102) LED\n\nTo flash the microcontrollers you need a computer and USB cable.  \n\nIf you're a beginner, it's recommended you wire everything together on a breadboard first!  \nIn this case, you'd also need a breadboard with a couple of jumper wires.  \n\nIf you wish to solder everything together into a small gadget,\nyou also need soldering equipment.  \n\nYou can use any Atmega32u4 or ESP8266 based development board,\nbut if you have no idea where to start, here's a list.  \n:warning: **Keep in mind that you will need both microcontrollers!**  \nThe Atmega32u4 to act as USB keyboard, and the ESP8266 for WiFi.\n\n### Atmega32u4 Development Boards\n* Arduino Leonardo\n* Arduino Micro\n* Sparkfun Pro Micro\n* CJMCU Beetle\n* SS Micro\n\n:bangbang: **DIGISPARK or other ATTINY85 based development boards, are NOT supported!** :bangbang:  \n\n### ESP8266 Development Boards\n* NodeMCU 1.0 (ESP-12E Module)\n* LOLIN(WEMOS) D1 Mini\n* LOLIN(WEMOS) D1 Mini Pro\n* LOLIN(WEMOS) D1 Mini Lite\n\n### Connections\n\nA map of pins that need to be connected.  \n\n| ESP8266 | Atmega32u4 |\n| ------- | ---------- |\n| `D1` alias `GPIO 5` | `3` alias `SCL` |\n| `D2` alias `GPIO 4` | `2` alias `SDA` |\n| `GND` | `GND` |\n\nIdeally, you want the Atmega32u4 to power the ESP8266, so it can run on **one** USB connection, instead of having to always plug in both.  \nTo share power between both chips, you need a voltage regulator that takes 5V and turns it into 3.3V.  \nThat's because USB runs on 5V, but the ESP8266 only takes 3.3V. Luckily most development boards have such a regulator on board.  \n**DO NOT CONNECT ESP8266 VCC to the ATMEGA32u4 VCC**, it will kill the ESP826. Instead look for the `5V` or `VIN` pin on your dev board, as those will be connected to the regulator.  \n\n| ESP8266 Dev Board |      Atmega32u4      |\n| ----------------- | -------------------- |\n| `5V` or `VIN`     | `RAW`, `5V` or `VIN` |\n\nTo add a Neopixel (WS2812b) LED:  \n\n| Atmega32u4 | Neopixel LED |\n| ---------- | ------------ |\n| `7`* | `DI` alias `Data`, `In` |\n| `5V` alias `VCC` | `5V` alias `VCC` |\n| `GND` | `GND` |\n\n\\* The Data pin can be changed later on in the software, pin 7 is just an example.  \n\n![Example of a DIY build using a Wemos d1 mini, a Pro Micro and a Neopixel LED](img/diy_example.jpg)\n\n### PCB\n\nTo make the DIY process easier, I designed a little PCB.  \n\nYou solder a Pro Micro board on one side and a Wemos d1 mini or NodeMCU board (depending on the PCB) on the other side.  \nThat's it. You don't even have to solder all pins,\njust the ones mentioned in [Connections](#connections), excluding the LED.\n\n<p align=\"center\">\n  <img alt=\"PCB Layout\" src=\"img/pcbs.jpg\" width=\"400\">\n</p>\n\n<p align=\"center\">\n  <img alt=\"Soldered PCBs\" src=\"img/pcbs_soldered.jpg\" width=\"400\">\n</p>\n\nDesign Files:  \n* Pro Micro + Wemos d1 mini: https://easyeda.com/Spacehuhn/wifi-duck\n* Pro Micro + NodeMCU: https://easyeda.com/Spacehuhn/diy-wifi-duck-pro-micro-nodemcu\n\nYou can also order them on OSHPark:\n* Pro Micro + Wemos d1 mini: https://oshpark.com/shared_projects/ARCED9je\n* Pro Micro + NodeMCU: https://oshpark.com/shared_projects/XUuUH1HB\n\n## Flash Software\n\n<p align=\"center\">\n  <a href=\"https://youtu.be/VQAzxBefLZo\">\n    <img alt=\"WiFi Duck Hardware Tutorial Video Thumbnail\" src=\"https://img.youtube.com/vi/VQAzxBefLZo/maxresdefault.jpg\" width=\"400\">\n    <br>\n    <b>Watch the video tutorial</b>\n  </a>\n</p>\n\n1. Download and install the [Arduino IDE](https://www.arduino.cc/en/main/software).\n2. Start the Arduino IDE, go to `File` > `Preferences`.\n3. At *Additional Board Manager ULRs* enter `https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json`. You can add multiple URLs, separating them with commas.\n4. Go to `Tools` > `Board` > `Board Manager`, search for `wifi duck` and install `WiFi Duck AVR Boards` and `WiFi Duck ESP8266 Boards`.\n5. [Download](https://github.com/spacehuhn/WiFiDuck/archive/master.zip) and extract this repository or [git clone](https://github.com/spacehuhn/WiFiDuck.git) it.\n\nIf you can't find the COM port of ESP8266 board, then you're probably missing the right drivers.\nHere are links to drivers of the 2 most used UART chips on ESP8266 development boards:\n- :floppy_disk: [CP2102](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers)\n- :floppy_disk: [CH340](https://sparks.gogo.co.nz/ch340.html)\n\n### Flash Atmega32u4\n\n1. Open `atmegaduck/atmega_duck.ino` with the Arduino IDE.\n2. Under `Tools` > `Board` in the `WiFi Duck AVR` section, select your board;\nfor example, `Sparkfun Pro Micro`.\n3. Connect the Atmega32u4 board via USB and select its port under `Tools` > `Port`.\n4. Optional: Under `Tools` you can enable the LED and set its pin.\nYou can also change the USB ID to make it appear as a certain type of keyboard.\n5. Press Upload.\n\n### Flash ESP8266\n\n1. Open `esp_duck/esp_duck.ino` with the Arduino IDE.\n2. Under `Tools` > `Board` in the `WiFi Duck ESP8266` section, select your board.\nFor example `NodeMCU 1.0 (ESP-12E Module)`.\n3. Connect the ESP8266 board via USB and select its port under `Tools` > `Port`.\n5. Press Upload.\n\n**Pro Tip:** If the ESP8266 is already running this software\nand you just want to update it, you don't have to connect it via USB.\nYou can update it over the air! Simply connect to the `wifiduck` network (default password is `wifiduck`).  \nThen in Arduino at `Tools` > `Port` you should now see a network port.\nSelect it and press `Upload`.  \n\n**Note:** After the initial flashing, the ESP8266 has to format its memory, so it might take a minute until it's fully ready.  \n\nIf you connected the RGB LED:\n* Blue LED = Connection working\n* Green LED = Device ready\n\n### Unbrick Atmega32u4\n\nIf you flashed your Atmega32u4 board with the wrong bootloader, \nit will no longer appear in the port selection after you connect it.  \nTo solve this, you need to:\n\n1. Connect the reset pin `RST` to ground `GND`.\nPreferably with a jumper wires, because you need to be able to disconnect it quickly.  \n2. Open a sketch, `atmegaduck/atmega_duck.ino` or an empty sketch.  \n**Make sure to have the correct board selected under `Tools` > `Board`!**\n3. Connect the board with the wire still connected.\n4. Press `Upload` and as soon as you see `Compiling...` turn to `Uploading...`, disconnect the wire.  \n\nNow it should flash the sketch and the correct bootloader.  \n\n## Scripting\n\n### Basics\n\nKeys are separated by a single space.  \nEverything written in a single line gets pressed and released at the same time.  \nTo write text, use the STRING function.  \nIt's compatible to Ducky Script, which was developed by the wonderful people at [Hak5](https://www.hak5.org/).  \n\n| Example | Explanation |\n| ------- | ----------- |\n| WINDOWS <br> r | Type the Windows key and then the r key |\n| WINDOWS r | Press the Windows key and the r key simultaneously |\n| STRING WINDOWS r | Write WINDOWS r |\n\n### Functions\n\n| Command | Example | Description |\n| ------- | ------- | ----------- |\n| `REM` | `REM Hello World!` |Comment |\n| `DEFAULTDELAY` or `DEFAULT_DELAY` | `DEFAULTDELAY 200` | Time in ms between every command |\n| `DELAY` | `DELAY 1000` | Delay in ms |\n| `STRING` | `STRING Hello World!` | Types the following string |\n| `REPEAT` or `REPLAY` | `REPEAT 3` | Repeats the last command n times |\n| `LOCALE` | `LOCALE DE` | Sets the keyboard layout. [List](#translate-keyboard-layout) |\n| `KEYCODE` | `KEYCODE 0x02 0x04` | Types a specific key code (modifier, key1[, ..., key6]) in decimal or hexadecimal |\n| `LED` | `LED 40 20 10` |Changes the color of the LED in decimal RGB values (0-255) |\n\n### Standard Keys\n\n| Key |\n| --- |\n| `a` - `z` |\n| `A` - `Z` |\n| `0` - `9` |\n| `F1` - `F12` |\n\n### Modifier Keys\n\n| Key |\n| --- |\n| `CTRL` or `CONTROL` |\n| `SHIFT` |\n| `ALT` |\n| `WINDOWS` or `GUI` |\n\n### Other Keys\n\n| Key |\n| --- |\n| `ENTER` |\n| `MENU` or `APP`|\n| `DELETE` |\n| `HOME` |\n| `INSERT` |\n| `PAGEUP` |\n| `PAGEDOWN` |\n| `UP` or `UPARROW` |\n| `DOWN` or `DOWNARROW` |\n| `LEFT` or `LEFTARROW` |\n| `RIGHT` or `RIGHTARROW` |\n| `TAB` |\n| `END` |\n| `ESC` or `ESCAPE` |\n| `SPACE` |\n| `PAUSE or BREAK` |\n| `CAPSLOCK` |\n| `NUMLOCK` |\n| `PRINTSCREEN` |\n| `SCROLLLOCK` |\n\n### Numpad Keys\n\n| Key |\n| --- |\n| `NUM_0` - `NUM_9` |\n| `NUM_ASTERIX` |\n| `NUM_ENTER` |\n| `NUM_MINUS` |\n| `NUM_DOT` |\n| `NUM_PLUS` |\n\n### Examples\n\n```\nREM Hello World for Windows PCs\nDEFAULTDELAY 200\nGUI r\nSTRING notepad\nENTER\nSTRING Hello World!\n```\n\n## CLI Commands\n\nThe command line interface or CLI is accessible using a serial connection to the ESP8266 (115200 baud, Newline ending) or via the web interface at `192.168.4.1/terminal.html`.  \n\n### General\n\n| Command | Description | Example |\n| ------- | ----------- | ------- |\n| help | Returns all available commands | `help` |\n| ram | Returns available memory in bytes | `ram` |\n| version | Returns version number | `version` |\n| settings | Returns list of settings | `settings` |\n| set -n/ame <value> -v/alue <value> | Sets value of a specific setting | `set ssid \"why fight duck\"` |\n| reset | Resets all settings to their default values | `reset` |\n| status | Returns status of i2c connection with Atmega32u4 | `status` |\n| run <...> | Starts executing a Ducky script | `run example.txt` |\n| stop <...> | Stops executing a Ducky script | `stop example.txt` |\n\n### SPIFFS File Management\n\n| Command | Description | Example |\n| ------- | ----------- | ------- |\n| mem | Returns available, used and free memory of SPIFFS in bytes | `mem` |\n| format | Formats SPIFFS | `format` |\n| ls <...> | Returns list of files | `ls /` |\n| create <...> | Creates file | `create example.duck` |\n| remove <...> | Deletes file | `remove example.duck` |\n| cat <...> | Returns content of file | `cat example.duck` |\n| rename -fileA,a <value> -fileB,b <value> | Renames file | `rename example.duck example.txt` |\n| write -f/ile <value> -c/ontent <value> | Writes (appends) data to file | `write example.txt \"Hello World!\"` |\n| stream <...> | Opens file stream | `stream example.txt` |\n| close | Closes file stream | `close` |\n| read | Read and return the result from file stream | `read` |\n\nIf a stream is open, everything you type (except messages containing exactly `close` or `read`) will be written to the file until you type `close`!  \n\n## How to Debug\n\nTo properly debug, you need to have both the Atmega32u4\nand the ESP8266 connected via USB to your computer.  \n\nThat can be tricky when you only have a all in one board, so it might be useful\nyou built one yourself. You don't need to solder it, for example you can use an\nArduino Leonardo and a NodeMCU and connect them with jumper cables.  \n\nNow open 2 instances of Arduino (so they run as separate processes!),\nselect the COM port and open the serial monitor for each device.\nYou might need to reset the Atmega32u4 to see serial output.\nIf that causes problems with the i2c connection, try to reset the ESP8266 too.  \n## Development\n\n### Edit Web Files\n\nIf you would like to modify the web interface, you can!  \nThe `web/` folder contains all `.html`, `.css`, `.js` files.  \nYou can edit and test them locally as long as you're connected to the WiFi Duck\nnetwork thanks to the websocket connection handled by JavaScript in the background.  \n\nTo get the new files onto the ESP8266, run `python3 webconverter.py` in the\nrepository folder.  \nIt gzips all files inside `web/`, converts them into a hex array\nand saves it in `esp_duck/webfiles.h`.  \nNow you just need to [flash](#flash-software) the ESP8266 again.  \n\n### Translate Keyboard Layout\n\nCurrently supported keyboard layouts:  \n- [:de: DE](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_de.h)\n- [:gb: GB](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_gb.h)\n- [:us: US](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_us.h)\n- [:es: ES](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_es.h)\n- [:denmark: DK](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_dk.h)\n- [:ru: RU](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_ru.h)\n- [:fr: FR](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_fr.h)\n- [:belgium: BE](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_be.h)\n- [:portugal: PT](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_pt.h)\n- [:it: IT](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_it.h)\n- [:slovakia: SK](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_sk.h)\n- [:czech_republic: CZ](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_cz.h)\n- [:slovenia: SI](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_si.h)\n- [:bulgaria: BG](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_bg.h)\n- [:canada: CA-FR](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_cafr.h)\n- [:switzerland: CH-DE](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_chde.h)\n- [:switzerland: CH-FR](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_chfr.h)\n- [:hungary: HU](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_hu.h)\n\nAll standard keys are defined in [usb_hid_keys.h](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/usb_hid_keys.h).  \nTo translate a keyboard layout, you have to match each character on\nyour keyboard to the one(s) of a US keyboard.  \nThis stuff is hard to explain in writing and requires a lot of manual work and testing.  \n\n1. Copy one of the existing layouts files, like [locale_us.h](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_us.h).  \nPreferably one that is close to your keyboard layout, it will save you time!  \n2. Add `#include \"locale_xx.h\"` to the end of the locales.h file.\n3. Rename the file and its variables to your language code.\nFor example:  \n`locale_xx.h` -> `locale_de.h`,  \n`ascii_xx` -> `ascii_de`,  \n`locale_xx` -> `locale_de`,  \n`utf8_xx` -> `utf8_de`.  \n`combinations_xx` -> `combinations_de`,  \n4. Modify the ASCII array.  \nThe ASCII array has a fixed size. Each row describes a key.\nFirst a modifier key like `KEY_MOD_LSHIFT`, then a character key.\nSome ASCII characters can't be typed or don't require a modifier,\nthat's where you must place `KEY_NONE`.\nCheck [usb_hid_keys.h](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/usb_hid_keys.h) for the available keys.  \nIf multiple modifiers are required, you must use a bitwise OR to connect them: `KEY_MOD_RALT | KEY_MOD_LSHIFT`.  \nFor example, in [locale_de.h](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/locale_de.h#L136) `Z` is saved as `KEY_MOD_LSHIFT, KEY_Y`.  \nThis is because German keyboards use QWERTZ instead of the QWERTY layout\nand since the letter is uppercase, shift must be pressed as well.   \nThankfully you don't have to trial and error everything, the Hak5 Community\ntranslated a lot of layouts already [here](https://github.com/hak5darren/USB-Rubber-Ducky/tree/master/Encoder/resources). It's just written in a different syntax. For example, `ASCII_20` (20 in hexadecimal) is the 32th character in our ascii array.  \n5. [deprecated] ~~Modify or create the extended ASCII array.  \nThe extended ASCII array doesn't have a fixed size and is only as long as you make it.\nFirst the character code. For example, [√§](https://theasciicode.com.ar/extended-ascii-code/letter-a-umlaut-diaeresis-a-umlaut-lowercase-ascii-code-132.html) has the index 132, or 84 in hex.\nIt doesn't use a modifier and sits where the apostrophe key is on a US keyboard:\n`0x84, KEY_NONE,       KEY_APOSTROPHE, // √§`.~~  \n6. Modify or create the UTF-8 array.  \nThe UTF-8 array is variable in length, too.  \nThe first 4 bytes are the character code.  \nFor example, [√Ñ](https://www.fileformat.info/info/unicode/char/00c4/index.htm) has the hex code c384 or 0xc3 0x84. The other 2 bytes are not used so we set them to 0.\nBecause the letter is uppercase, we need to press the shift key and like before, the letter is typed by pressing the same key as the apostrophe key of a US keyboard: `0xc3, 0x84, 0x00, 0x00, KEY_MOD_LSHIFT, KEY_APOSTROPHE, // √Ñ`.  \n7. Edit the hid_locale_t structure.  \nIf you renamed all variables accordingly, there's nothing left to do.  \n8. Go to [duckparser.cpp](https://github.com/spacehuhn/WiFiDuck/blob/master/atmega_duck/duckparser.cpp#L163) at `// LOCALE (-> change keyboard layout)` you can see a bunch of else if statements.\nYou need to copy one for your layout.  \n\nBefore adding GB layout:  \n```c\nif (compare(w->str, w->len, \"US\", CASE_SENSETIVE)) {\n    keyboard::setLocale(&locale_us);\n} else if (compare(w->str, w->len, \"DE\", CASE_SENSETIVE)) {\n    keyboard::setLocale(&locale_de);\n}\n```\n\nAfter adding GB layout:\n```c\nif (compare(w->str, w->len, \"US\", CASE_SENSETIVE)) {\n    keyboard::setLocale(&locale_us);\n} else if (compare(w->str, w->len, \"DE\", CASE_SENSETIVE)) {\n    keyboard::setLocale(&locale_de);\n} else if (compare(w->str, w->len, \"GB\", CASE_SENSETIVE)) {\n   keyboard::setLocale(&locale_gb);\n}\n```\n9. Test your layout with a Ducky Script that contains all characters of your keyboard. For example:  \n```\nLOCALE DE\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¬≤¬≥√§√∂√º√Ñ√ñ√ú√ü‚Ç¨¬∞¬ß`\nENTER\n```\n10. Add a link to your layout to [README](README.md), to [web/index.html](web/index.html) and please feel free to improve this tutorial to help future translators!\n11. [Create a Pull Request](https://help.github.com/en/articles/creating-a-pull-request)\n\n## Disclaimer\n\nThis tool is intended to be used for testing, training, and educational purposes only.  \nNever use it to do harm or create damage!  \n\nThe continuation of this project counts on you!  \n\n## License\n\nThis software is licensed under the MIT License.\nSee the [license file](LICENSE) for details.  \n\n## Credits\n\nSoftware libraries used in this project:\n  - [Arduino](https://www.arduino.cc)\n  - [Neopixel Library](https://github.com/adafruit/Adafruit_NeoPixel)\n  - [Dotstar Library](https://github.com/adafruit/Adafruit_DotStar)\n  - [AVR, ESP8266 & SAMD Arduino Core](https://github.com/spacehuhn/hardware/tree/master/wifiduck)\n  - [ESPAsyncTCP](https://github.com/me-no-dev/ESPAsyncTCP)\n  - [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer)\n  - [SimpleCLI](https://github.com/spacehuhn/SimpleCLI)\n"
        },
        {
          "name": "atmega_duck",
          "type": "tree",
          "content": null
        },
        {
          "name": "esp_duck",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.script",
          "type": "blob",
          "size": 3.3515625,
          "content": "REM default delay\nDEFAULTDELAY 200\n\nREM LED Test\nLED 0 100 0\nLED 255 0 0\nDELAY 1000\nLED 0 255 0\nDELAY 1000\nLED 0 0 255\n\nREM open notepad\nGUI r\nSTRING notepad\nENTER\n\nREM hello world\nSTRING Hello World!\nENTER\n\nREM delay test\nDELAY 1000\n.\nDELAY 3000\n.\nDELAY 5000\n.\nENTER\n\nREM repeat test\nSTRING Hello World!\nREPEAT 2\nENTER\n\nREM us char test\nLOCALE US\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~`\nENTER\n\nREM de char test\nLOCALE DE\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¬≤¬≥√§√∂√º√Ñ√ñ√ú√ü‚Ç¨¬∞¬ß`\nENTER\n\nREM gb char test\nLOCALE GB\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¬£¬¶¬¨√©√≠√∫√≥√â√ç√ö√ì‚Ç¨\nENTER\n\nREM es char test\nLOCALE ES\nSTRING !\"#$%&'()*+,-./0123456789: =>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¬ø¬°√±√ë√ß√á¬∫¬™‚Ç¨¬∑¬®`\nENTER\n\nREM dk char test\nLOCALE DK\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}¬£¬§¬ß√Ö√Ü√ò√•√¶√∏\nENTER\n\nREM ru char test\nLOCALE RU\nSTRING —ë–Å–π–ô—Ü–¶—É–£–∫–ö–µ–ï–Ω–ù–≥–ì—à–®—â–©–∑–ó—Ö–•—ä–™–§–§—ã–´–≤–í–∞–ê–ø–ü—Ä–†–æ–û–ª–õ–¥–î–∂–ñ—ç–≠—è–Ø—á–ß—Å–°–º–ú–∏–ò—Ç–¢—å–¨–±–ë—é–Æ\nENTER\n\nREM overflow test\nnENTER\n\nREM keycode test\nA\nKEYCODE 0x02 0x04\nKEYCODE 2 4\n\nREM close notepad\nDELAY 5000\nALT F4\nRIGHT\nENTER\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "webconverter.py",
          "type": "blob",
          "size": 2.3671875,
          "content": "\"\"\"\n   This software is licensed under the MIT License. See the license file for details.\n   Source: https://github.com/spacehuhntech/WiFiDuck\n\"\"\"\n\nimport os\nimport binascii\nimport gzip\n\ndef get_file_content(path):\n    file = open(path,\"r\")\n    content = file.read().encode(\"utf-8\")\n    file.close();\n\n    gzip_content = gzip.compress(content)\n\n    print(f\"({len(content)} -> {len(gzip_content)} byte)...\", end=\"\")\n\n    return gzip_content\n\ndef get_varname(filename):\n    return filename.replace(\".\",\"_\").lower()\n\ndef get_file_type(filename):\n    file_ending = filename.split('.')[1]\n    if file_ending == \"js\":\n        return \"application/javascript\"\n    elif file_ending == \"css\":\n        return \"text/css\"\n    elif file_ending == \"html\":\n        return \"text/html\"\n    else:\n        return \"text/plain\"\n\ndef get_response_code(filename):\n    if filename == \"error404.html\":\n        return 404\n    else:\n        return 200\n\ndef build_hex_string(varname, content):\n    hexstr = f\"const uint8_t {varname}[] PROGMEM = {{ \"\n\n    for c in content:\n        hexstr += f\"{hex(c)},\"\n\n    hexstr = hexstr[:-1]\n    hexstr += \" };\\n\\n\"\n\n    return hexstr\n\ndef write_server_callback(filename, output):\n    varname = get_varname(filename)\n    filetype = get_file_type(filename)\n    response_code = get_response_code(filename)\n\n    output.write(f\"\\\\\\nserver.on(\\\"/{filename}\\\", HTTP_GET, [](AsyncWebServerRequest* request) {{\")\n    output.write(f\"\\\\\\n\\treply(request, {response_code}, \\\"{filetype}\\\", {varname}, sizeof({varname}));\")\n    output.write(f\"\\\\\\n}});\")\n\ndef write_hex_array(filename, output):\n    print(f\"Converting {filename}...\", end=\"\")\n\n    path = f\"web/{filename}\"\n    content = get_file_content(path)\n    varname = get_varname(filename)\n\n    hex_array = build_hex_string(varname, content)\n\n    output.write(hex_array)\n\n    print(\"OK\")\n\ndef write_callbacks(files, output):\n    for filename in files:\n        write_server_callback(filename, output);\n\ndef write_arrays(files, output):\n    for filename in files:\n        write_hex_array(filename, output)\n\ndef main():\n    web_files = os.listdir(\"web/\")\n\n    outputfile = open(\"esp_duck/webfiles.h\", \"w+\")\n    outputfile.write(\"#pragma once\\n\\n\")\n\n    outputfile.write(f\"#define WEBSERVER_CALLBACK \")\n\n    write_callbacks(web_files, outputfile)\n\n    outputfile.write(\"\\n\\n\")\n\n    write_arrays(web_files, outputfile)\n\n    outputfile.close()\n\nif __name__== \"__main__\":\n  main()\n"
        }
      ]
    }
  ]
}