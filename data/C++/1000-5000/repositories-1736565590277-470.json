{
  "metadata": {
    "timestamp": 1736565590277,
    "page": 470,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libjxl/libjxl",
      "stars": 2770,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "third_party\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0908203125,
          "content": "BasedOnStyle: Google\nIncludeCategories:\n  - Regex:           '^<hwy/'\n    Priority:        2\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.1123046875,
          "content": "# Disabled checks:\n# - modernize-deprecated-headers: We don't use std:: versions of the standard\n#   types and functions like size_t or printf, so we should include <stdio.h>\n#   instead <cstdio>.\n# - modernize-return-braced-init-list: this often doesn't improve readability.\n# - modernize-use-auto: is too aggressive towards using auto.\n# - modernize-use-default-member-init: with a mix of constructors and default\n#   member initialization this can be confusing if enforced.\n# - modernize-use-trailing-return-type: does not improve readability when used\n#   systematically.\n# - modernize-use-using: typedefs are ok.\n#\n# - readability-else-after-return: It doesn't always improve readability.\n# - readability-static-accessed-through-instance\n#   It is often more useful and readable to access a constant of a passed\n#   variable (like d.N) instead of using the type of the variable that could be\n#   long and complex.\n# - readability-uppercase-literal-suffix: we write 1.0f, not 1.0F.\n\nChecks: >-\n  bugprone-*,\n  clang-*,\n  -clang-diagnostic-unused-command-line-argument,\n  google-*,\n  modernize-*,\n  performance-*,\n  readability-*,\n  -bugprone-branch-clone,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-implicit-widening-of-multiplication-result,\n  -bugprone-infinite-loop,\n  -bugprone-narrowing-conversions,\n  -bugprone-unused-local-non-trivial-variable,\n  -modernize-avoid-c-arrays,\n  -modernize-concat-nested-namespaces,\n  -modernize-deprecated-headers,\n  -modernize-return-braced-init-list,\n  -modernize-type-traits,\n  -modernize-use-auto,\n  -modernize-use-default-member-init,\n  -modernize-use-nodiscard,\n  -modernize-use-trailing-return-type,\n  -modernize-use-using,\n  -performance-enum-size,\n  -readability-avoid-nested-conditional-operator,\n  -readability-else-after-return,\n  -readability-function-cognitive-complexity,\n  -readability-identifier-length,\n  -readability-magic-numbers,\n  -readability-redundant-access-specifiers,\n  -readability-simplify-boolean-expr,\n  -readability-static-accessed-through-instance,\n  -readability-suspicious-call-argument,\n  -readability-uppercase-literal-suffix,\n  -readability-use-anyofallof,\n\n\nWarningsAsErrors: >-\n  bugprone-argument-comment,\n  bugprone-macro-parentheses,\n  bugprone-suspicious-string-compare,\n  bugprone-use-after-move,\n  clang-*,\n  clang-analyzer-*,\n  -clang-diagnostic-unused-command-line-argument,\n  google-build-using-namespace,\n  google-explicit-constructor,\n  google-readability-braces-around-statements,\n  google-readability-namespace-comments,\n  modernize-use-override,\n  readability-inconsistent-declaration-parameter-name\n\n# We are only interested in the headers from this projects, excluding\n# third_party/ and build/.\nHeaderFilterRegex: '^.*/(lib|tools)/.*\\.h$'\n\nCheckOptions:\n  - key:   readability-braces-around-statements.ShortStatementLines\n    value: '2'\n  - key:   google-readability-braces-around-statements.ShortStatementLines\n    value: '2'\n  - key:   readability-implicit-bool-conversion.AllowPointerConditions\n    value: '1'\n  - key:   readability-implicit-bool-conversion.AllowIntegerConditions\n    value: '1'\n  - key:   bugprone-signed-char-misuse.CharTypdefsToIgnore\n    value: 'int8_t'\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.34765625,
          "content": "# Build output directories\n/build\n/build*\n/bazel*\n\n# clangd\n.cache\n\n# The downloaded corpora files for benchmark.\n/third_party/corpora\n\n# hdrvdp source code\nthird_party/hdrvdp-2.2.2\nthird_party/hdrvdp-2.2.2.zip\nthird_party/hdrvdp-2.2.2.zip.tmp\n\n# Output plots\ntools/benchmark/metrics/plots\ntools/benchmark/metrics/results.csv\ntools/conformance/__pycache__\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.0234375,
          "content": "[submodule \"third_party/brotli\"]\n\tpath = third_party/brotli\n\turl = https://github.com/google/brotli\n[submodule \"third_party/lcms\"]\n\tpath = third_party/lcms\n\turl = https://github.com/mm2/Little-CMS\n[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest\n[submodule \"third_party/sjpeg\"]\n\tpath = third_party/sjpeg\n\turl = https://github.com/webmproject/sjpeg.git\n[submodule \"third_party/skcms\"]\n\tpath = third_party/skcms\n\turl = https://skia.googlesource.com/skcms\n[submodule \"third_party/highway\"]\n\tpath = third_party/highway\n\turl = https://github.com/google/highway\n[submodule \"third_party/libpng\"]\n\tpath = third_party/libpng\n\turl = https://github.com/glennrp/libpng.git\n[submodule \"third_party/zlib\"]\n\tpath = third_party/zlib\n\turl = https://github.com/madler/zlib.git\n[submodule \"third_party/testdata\"]\n\tpath = testdata\n\turl = https://github.com/libjxl/testdata\n[submodule \"third_party/libjpeg-turbo\"]\n\tpath = third_party/libjpeg-turbo\n\turl = https://github.com/libjpeg-turbo/libjpeg-turbo.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.6650390625,
          "content": "repos:\n- repo: https://github.com/gherynos/pre-commit-java\n  rev: v0.2.4\n  hooks:\n  - id: Checkstyle\n- repo: https://github.com/gitleaks/gitleaks\n  rev: v8.16.3\n  hooks:\n  - id: gitleaks\n- repo: https://github.com/jumanjihouse/pre-commit-hooks\n  rev: 3.0.0\n  hooks:\n  - id: shellcheck\n- repo: https://github.com/pocc/pre-commit-hooks\n  rev: v1.3.5\n  hooks:\n  - id: cpplint\n- repo: https://github.com/pre-commit/mirrors-eslint\n  rev: v8.38.0\n  hooks:\n  - id: eslint\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n- repo: https://github.com/pylint-dev/pylint\n  rev: v2.17.2\n  hooks:\n  - id: pylint\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.49609375,
          "content": "# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n#\n# readthedocs.io configuration file. See:\n#   https://docs.readthedocs.io/en/stable/config-file/v2.html\n\nversion: 2\n\nsphinx:\n   configuration: doc/sphinx/conf.py\n\nbuild:\n   os: ubuntu-22.04\n   tools:\n      python: \"3\"\n   apt_packages:\n      - doxygen\n      - graphviz\n\npython:\n   install:\n   - requirements: doc/sphinx/requirements.txt\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 3.4267578125,
          "content": "# List of the project authors.\n# When contributing you can add your name to this list.\n# For a complete list of contributions made after the move\n# from gitlab to github, see\n# https://github.com/libjxl/libjxl/graphs/contributors.\n# See CONTRIBUTING.md for details.\n#\n#\n# Please keep each list sorted. If you wish to change your email address please\n# send a pull request.\n\n# Organizations:\n\n# - Cloudinary Ltd.:\nJon Sneyers <jon@cloudinary.com>\n\n# - Google:\nEvgenii Kliuchnikov <eustas@google.com>\nIulia Comșa <iuliacomsa@google.com>\nJan Wassenberg <janwas@google.com>\nJyrki Alakuijala <jyrki@google.com>\nLode Vandevenne <lode@google.com>\nLuca Versari <veluca@google.com>\nMarcin Kowalczyk <qrczak@google.com>\nMartin Bruse <zond@google.com>\nMoritz Firsching <firsching@google.com>\nSami Boukortt <sboukortt@google.com>\nSebastian Gomez <sggonzalez@google.com>\nThomas Fischbacher <tfish@google.com>\nZoltan Szabadka <szabadka@google.com>\n\n# Individuals:\na-shvedov\nAditya Patadia <adityapatadia@users.noreply.github.com>\nAhmad Amsyar Asyadiq Bin Syaiful Bahri <27284123+Ahmad-Amsyar@users.noreply.github.com>\nAlex Xu (Hello71) <alex_y_xu@yahoo.ca>\nAlexander Sago <cagelight@gmail.com>\nAlifian Caesar Khalid <alifiancaesar@gmail.com>\nAlistair Barrow\nAndrius Lukas Narbutas <andrius4669@gmail.com>\nAous Naman <aous@unsw.edu.au>\nArtem Selishchev\nAryan Pingle <realaryanpingle@gmail.com>\nBiswapriyo Nath <nathbappai@gmail.com>\nCanadianBaconBoi <beamconnor@gmail.com>\nCrushedAsian255 <155333241+CrushedAsian255@users.noreply.github.com>\nDamiano Albani <damiano.albani@gmail.com>\nDamon Townsend\nDaniel Novomeský <dnovomesky@gmail.com>\nDavid Burnett <vargolsoft@gmail.com>\ndependabot[bot]\nDiego Pino <dpino@igalia.com>\nDirk Lemstra <dirk@lemstra.org>\nDmitry Baryshev <dima8w@gmail.com>\nDon Olmstead <don.j.olmstead@gmail.com>\nDong Xu <xdong181@gmail.com>\nestrogently <41487185+estrogently@users.noreply.github.com>\nEven Rouault <even.rouault@spatialys.com>\nFred Brennan <copypaste@kittens.ph>\nGerhard Huber <support@pl32.com>\nGalaxy4594 <164440799+Galaxy4594@users.noreply.github.com>\ngi-man\nGilles Devillers (GilDev) <gildev@gmail.com>\nHeiko Becker <heirecka@exherbo.org>\nIvan Kokorev\nJim Robinson <jimbo2150@gmail.com>\nJohn Platts <john_platts@hotmail.com>\nJonathan Brown (Jonnyawsom3) <jonathanbr30@gmail.com>\nJoshua Root <jmr@macports.org>\nKai Hollberg <Schweinepriester@users.noreply.github.com>\nKerry Su <me@sshockwave.net>\nKleis Auke Wolthuizen <github@kleisauke.nl>\nL. E. Segovia\nledoge\nLeo Izen <leo.izen@gmail.com>\nLovell Fuller\nMaarten DB <anonymous.maarten@gmail.com>\nMarcin Konicki <ahwayakchih@gmail.com>\nMartin Strunz\nMathieu Malaterre <mathieu.malaterre@gmail.com>\nMikk Leini <mikk.leini@krakul.eu>\nMisaki Kasumi <misakikasumi@outlook.com>\nMoonchild Straver <moonchild@palemoon.org>\nNicholas Hayes <0xC0000054@users.noreply.github.com>\nNigel Tao <nigeltao@golang.org>\noupson <oupson1er@gmail.com>\nPetr Diblík\nPieter Wuille\nroland-rollo\nSamuel Leong <wvvwvvvvwvvw@gmail.com>\nSandro <sandro.jaeckel@gmail.com>\nsandstrom\nSergey Fedorov <vital.had@gmail.com>\nStephan T. Lavavej <stl@nuwen.net>\nStepSecurity Bot <bot@stepsecurity.io>\nSylvestre Ledru <sylvestre@debian.org>\nThomas Bonfort <thomas.bonfort@airbus.com>\nTimo Rothenpieler <timo@rothenpieler.org>\ntmkk <tmkkmac@gmail.com>\nVincent Torri <vincent.torri@gmail.com>\nWonwoo Choi <chwo9843@gmail.com>\nxiota\nYonatan Nebenzhal <yonatan.nebenzhl@gmail.com>\nZiemowit Zabawa <ziemek.zabawa@outlook.com>\n源文雨 <41315874+fumiama@users.noreply.github.com>\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.720703125,
          "content": "# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\npackage(default_visibility = [\"//:__subpackages__\"])\n\nfilegroup(\n    name = \"testdata\",\n    srcs = glob([\n        \"testdata/**/*.icc\",\n        \"testdata/**/*.pam\",\n        \"testdata/**/*.pfm\",\n        \"testdata/**/*.pgm\",\n        \"testdata/**/*.pnm\",\n        \"testdata/**/*.ppm\",\n        \"testdata/**/*.png\",\n        \"testdata/**/*.jpg\",\n        \"testdata/**/*.jxl\",\n        \"testdata/**/*.gif\",\n        \"testdata/**/*.y4m\",\n        \"testdata/**/*.jxl\",\n        \"testdata/**/*.png\",\n        \"testdata/**/*.jpg\",\n        \"testdata/position_encoding/*.txt\",\n    ]),\n)\n\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 2.431640625,
          "content": "# Compilation\n\nFor more details and other workflows see the \"Advanced guide\" below.\n\n## Checking out the code\n\n```bash\ngit clone https://github.com/libjxl/libjxl.git --recursive --shallow-submodules\n```\n\nThis repository uses git submodules to handle some third party dependencies\nunder `third_party`, that's why it is important to pass `--recursive`. If you\ndidn't check out with `--recursive`, or any submodule has changed, run:\n\n```bash\ngit submodule update --init --recursive --depth 1 --recommend-shallow\n```\n\nThe `--shallow-submodules` and `--depth 1 --recommend-shallow` options create\nshallow clones which only downloads the commits requested, and is all that is\nneeded to build `libjxl`. Should full clones be necessary, you could always run:\n\n```bash\ngit submodule foreach git fetch --unshallow\ngit submodule update --init --recursive\n```\n\nwhich pulls the rest of the commits in the submodules.\n\nImportant: If you downloaded a zip file or tarball from the web interface you\nwon't get the needed submodules and the code will not compile. You can download\nthese external dependencies from source running `./deps.sh`. The git workflow\ndescribed above is recommended instead.\n\n## Installing dependencies\n\nRequired dependencies for compiling the code, in a Debian/Ubuntu based\ndistribution run:\n\n```bash\nsudo apt install cmake pkg-config libbrotli-dev\n```\n\nOptional dependencies for supporting other formats in the `cjxl`/`djxl` tools,\nin a Debian/Ubuntu based distribution run:\n\n```bash\nsudo apt install libgif-dev libjpeg-dev libopenexr-dev libpng-dev libwebp-dev\n```\n\nWe recommend using a recent Clang compiler (version 7 or newer), for that\ninstall clang and set `CC` and `CXX` variables.\n\n```bash\nsudo apt install clang\nexport CC=clang CXX=clang++\n```\n\n## Building\n\n```bash\ncd libjxl\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF ..\ncmake --build . -- -j$(nproc)\n```\n\nThe encoder/decoder tools will be available in the `build/tools` directory.\n\n## <a name=\"installing\"></a> Installing\n\n```bash\nsudo cmake --install .\n```\n\n\n## Building JPEG XL for developers\n\nFor experienced developers, we provide build instructions for several other environments:\n\n*   [Building on Debian](doc/developing_in_debian.md)\n*   Building on Windows with [vcpkg](doc/developing_in_windows_vcpkg.md) (Visual Studio 2019)\n*   Building on Windows with [MSYS2](doc/developing_in_windows_msys.md)\n*   [Cross Compiling for Windows with Crossroad](doc/developing_with_crossroad.md)\n"
        },
        {
          "name": "BUILDING_Haiku.md",
          "type": "blob",
          "size": 0.7666015625,
          "content": "## Disclaimer\n\nHaiku builds are not officially supported, i.e. the build might not work at all,\nsome tests may fail and some sub-projects are excluded from build.\n\nThis manual outlines Haiku-specific setup. For general building and testing\ninstructions see \"[BUILDING](BUILDING.md)\" and\n\"[Building and Testing changes](doc/building_and_testing.md)\".\n\n## Dependencies\n\n```shell\npkgman install llvm9_clang ninja cmake doxygen libjpeg_turbo_devel giflib_devel\n```\n\n## Building\n\n```shell\nTEST_STACK_LIMIT=none CMAKE_FLAGS=\"-I/boot/system/develop/tools/lib/gcc/x86_64-unknown-haiku/8.3.0/include/c++ -I/boot/system/develop/tools/lib/gcc/x86_64-unknown-haiku/8.3.0/include/c++/x86_64-unknown-haiku\" CMAKE_SHARED_LINKER_FLAGS=\"-shared -Xlinker -soname=libjpegxl.so -lpthread\" ./ci.sh opt\n```\n"
        },
        {
          "name": "BUILDING_OSX.md",
          "type": "blob",
          "size": 1.16015625,
          "content": "## Disclaimer\n\nOSX builds have \"best effort\" support, i.e. build might not work at all, some\ntests may fail and some sub-projects are excluded from build.\n\nThis manual outlines OSX specific setup. For general building and testing\ninstructions see \"[BUILDING](BUILDING.md)\" and\n\"[Building and Testing changes](doc/building_and_testing.md)\".\n\n[Homebrew](https://brew.sh/) is a popular package manager. JPEG XL library and\nbinaries could be installed using it:\n\n```bash\nbrew install jpeg-xl\n```\n\n## Dependencies\n\nMake sure that `brew doctor` does not report serious problems and up-to-date\nversion of XCode is installed.\n\nInstalling (actually, building) `clang` might take a couple hours.\n\n```bash\nbrew install llvm\n```\n\n```bash\nbrew install coreutils cmake giflib jpeg-turbo libpng ninja zlib\n```\n\nBefore building the project check that `which clang` is\n`/usr/local/opt/llvm/bin/clang`, not the one provided by XCode. If not, update\n`PATH` environment variable.\n\nAlso, setting `CMAKE_PREFIX_PATH` might be necessary for correct include paths\nresolving, e.g.:\n\n```bash\nexport CMAKE_PREFIX_PATH=`brew --prefix giflib`:`brew --prefix jpeg-turbo`:`brew --prefix libpng`:`brew --prefix zlib`\n```"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.6484375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n### Fixed\n  - Huffman lookup table size fix (#3871 -\n    [CVE-2024-11403](https://www.cve.org/cverecord?id=CVE-2024-11403))\n  - Check height limit in modular trees. (#3943 -\n    [CVE-2024-11498](https://www.cve.org/cverecord?id=CVE-2024-11498))\n\n## [0.11.0] - 2024-09-13\n\n### Added\n  - Gain Map API (#3552 and #3628):  `JxlGainMapBundle` struct and API functions\n    to read and write gain map bundles`JxlGainMapWriteBundle` and\n    `JxlGainMapReadBundle` as well as handling compressed ICC profiles:\n    `JxlICCProfileEncode` and `JxlICCProfileDecode`.\n  - decoder API: added `JXL_DEC_BOX_COMPLETE` event to signal that the output\n    buffer for the current box has received all contents. Previously, this was\n    to be determined from the fact that the decoder had moved on either to\n    `JXL_DEC_SUCCESS` or to another subsequent `JXL_DEC_BOX`. This change is\n    made backward-compatible by the fact that the new event must be explicitly\n    subscribed to, and that `JXL_DEC_SUCCESS` / `JXL_DEC_BOX` still occur\n    afterwards and still imply that the previous box must be complete.\n\n### Changed / clarified\n  - avoiding abort in release build (#3631 and #3639)\n\n## [0.10.2] - 2024-03-08\n\n### Fixed\n  - bugs in (lossless) encoding (#3367, #3359 and #3386)\n  - re-enable installation of MIME file (#3375)\n  - bugs in streaming mode (#3379 and #3380)\n\n## [0.10.1] - 2024-02-28\n\n### Fixed\n - reduce allocations (#3336 and #3339),\n   fixing a significant speed regression present since 0.9.0\n - bug in streaming encoding (#3331)\n\n##  [0.10.0] - 2024-02-21\n\n### Added\n - decoder API: added `JxlDecoderGetBoxSizeContents` for getting the size of the\n   content of a box without the headers.\n - encoder API: implemented new api functions for streaming encoding.\n\n### Changed / clarified\n - decoder/encoder API: return failure when surface allocation fail\n - encoder API / cjxl: updated modular effort levels to faster settings; the\n   effort range is now 1-10, with 11 available in advanced mode.\n\n## [0.9.2] - 2024-02-07\n\n### Fixed\n - bugs in the gdk-pixbuf plugin\n - some build issues\n\n## [0.9.1] - 2024-01-08\n\n### Fixed\n - multiple build issues\n\n## [0.9.0] - 2023-12-22\n\n### Added\n - encoder API: add `JxlEncoderSetExtraChannelDistance` to adjust the quality\n   of extra channels (like alpha) separately.\n - encoder API: new api functions for streaming encoding:\n  - `JxlEncoderSetOutputProcessor`\n  - `JxlEncoderFlushInput`\n  - `JxlEncoderOutputProcessor` struct\n  - `JxlEncoderSetOutputCallback`\n  - `JxlChunkedFrameInputSource` struct\n  - `JxlEncoderAddChunkedFrame`\n - encoder API: new options for more fine-grained control over metadata\n   preservation when using `JxlEncoderAddJPEGFrame`:\n  - `JXL_ENC_FRAME_SETTING_JPEG_KEEP_EXIF`\n  - `JXL_ENC_FRAME_SETTING_JPEG_KEEP_XMP`\n  - `JXL_ENC_FRAME_SETTING_JPEG_KEEP_JUMBF`\n - encoder API: new function `JxlEncoderSetUpsamplingMode` to change the upsampling\n   method, e.g. to use nearest-neighbor upsampling for pixel art\n - decoder API: implemented `JxlDecoderSetOutputColorProfile` and\n   `JxlDecoderSetCms` to enable decoding to desired colorspace.\n - cjxl can now be used to explicitly add/update/strip Exif/XMP/JUMBF metadata using\n   the decoder-hints syntax, e.g. `cjxl input.ppm -x exif=input.exif output.jxl`\n - djxl can now be used to extract Exif/XMP/JUMBF metadata\n - encoder API: new function `JxlEncoderDistanceFromQuality` for convenience to\n   calculate a `distance` given a `quality`\n\n### Removed\n - API: the Butteraugli API (`jxl/butteraugli.h`) was removed.\n - encoder and decoder API: all deprecated functions were removed:\n   `JxlDecoderDefaultPixelFormat`, `JxlEncoderOptionsSetLossless`,\n   `JxlEncoderOptionsSetEffort`, `JxlEncoderOptionsSetDecodingSpeed`,\n   `JxlEncoderOptionsSetDistance`, `JxlEncoderOptionsCreate`, as well as\n   the deprecated enumerator values `JXL_DEC_EXTENSIONS`, `JXL_ENC_NOT_SUPPORTED`,\n   `JXL_TYPE_BOOLEAN`, `JXL_TYPE_UINT32`, and deprecated type `JxlEncoderOptions`.\n - decoder API: the signature of `JxlDecoderGetColorAsEncodedProfile`,\n   `JxlDecoderGetICCProfileSize`, and `JxlDecoderGetColorAsICCProfile`\n   changed: a deprecated unused argument was removed.\n\n### Changed / clarified\n - changed the name of the cjxl flag `photon_noise` to `photon_noise_iso`\n - fixed how large boxes are decoded (#2958)\n - fixed encoding files with unreadable patches (#3042, #3046)\n\n## [0.8.2] - 2023-06-14\n\n### Changed\n - Security: Fix an integer underflow bug in patch decoding (#2551- CVE-2023-35790).\n\n## [0.8.1] - 2023-02-03\n\n### Changed\n - Allow fast-lossless for 16-bit float input (#2093)\n - Fix bug in palette (#2120)\n - Security: Fix OOB read in exif.h (#2101 - [CVE-2023-0645](https://www.cve.org/cverecord?id=CVE-2023-0645))\n\n## [0.8.0] - 2023-01-18\n\n### Added\n - decoder API: new function `JxlDecoderSetImageBitDepth` to set the bit depth\n   of the output buffer.\n - decoder API proposal: add `JxlDecoderSetOutputColorProfile` and\n   `JxlDecoderSetCms` to enable decoding to desired colorspace; NB: not\n   implemented yet.\n - encoder API: new function `JxlEncoderSetFrameBitDepth` to set the bit depth\n   of the input buffer.\n - encoder API: add an effort 10 option for lossless compression; using this\n   setting requires calling `JxlEncoderAllowExpertOptions`.\n - encoder API: new `JXL_ENC_FRAME_SETTING_JPEG_COMPRESS_BOXES` enum value to\n   allow explicit control of metadata compression\n\n### Removed\n - common API: removed `JxlIntrinsicSizeHeader`\n - decoder API: removed deprecated `JXL_DEC_NEED_DC_OUT_BUFFER` and\n   `JXL_DEC_DC_IMAGE` events, `JxlDecoderDCOutBufferSize` and\n   `JxlDecoderSetDCOutBuffer` functions\n\n### Changed / clarified\n - encoder API: `JxlEncoderProcessOutput` requires at least 32 bytes of output\n   space to proceed and guarantees that at least one byte will be written\n\n## [0.7] - 2022-07-21\n\n### Added\n - Export version information in headers.\n - decoder API: Ability to decode the content of metadata boxes:\n   `JXL_DEC_BOX`, `JXL_DEC_BOX_NEED_MORE_OUTPUT`, `JxlDecoderSetBoxBuffer`,\n   `JxlDecoderGetBoxType`, `JxlDecoderGetBoxSizeRaw` and\n   `JxlDecoderSetDecompressBoxes`.\n - decoder API: ability to mark the input is finished: `JxlDecoderCloseInput`.\n - decoder API: ability to request updates on different progressive events using\n   `JxlDecoderSetProgressiveDetail`; currently supported events are\n   `kDC`, `kLastPasses` and `kPasses`.\n - decoder API: ability to specify desired intensity target using\n   `JxlDecoderSetDesiredIntensityTarget`\n - decoder API: new function `JxlDecoderSetCoalesced` to allow decoding\n   non-coalesced (unblended) frames, e.g. layers of a composite still image\n   or the cropped frames of a recompressed GIF/APNG.\n - decoder API: new function `JxlDecoderSetUnpremultiplyAlpha` to set\n   preference for getting an associated alpha channel with premultiplied or\n   unpremultiplied colors.\n - decoder API: field added to `JxlFrameHeader`: a `JxlLayerInfo` struct\n   that contains crop dimensions and offsets and blending information for\n   the non-coalesced case.\n - decoder API: new function `JxlDecoderGetExtraChannelBlendInfo` to get\n   the blending information for extra channels in the non-coalesced case.\n - decoder API: new function `JxlDecoderSetMultithreadedImageOutCallback`,\n   allowing output callbacks to receive more information about the number of\n   threads on which they are running.\n - decoder API: new function `JxlDecoderSkipCurrentFrame` to skip processing\n   the current frame after a progressive detail is reached.\n - decoder API: new function `JxlDecoderGetIntendedDownsamplingRatio` to get\n   the intended downsampling ratio of progressive steps, based on the\n   information in the frame header.\n - decoder API: new function `JxlDecoderSetRenderSpotcolors` to allow disabling\n   rendering of spot colors.\n - decoder/encoder API: add two fields to `JXLBasicInfo`: `intrinsic_xsize`\n   and `intrinsic_ysize` to signal the intrinsic size.\n - encoder API: ability to add metadata boxes, added new functions\n   `JxlEncoderAddBox`, `JxlEncoderUseBoxes`, `JxlEncoderCloseBoxes` and\n   `JxlEncoderCloseFrames`.\n - encoder API: added ability to set several encoder options / extra fields to\n   frames using `JxlEncoderSetFrameName`, `JxlEncoderFrameSettingsSetOption`,\n   `JxlEncoderFrameSettingsSetFloatOption`.\n - encoder API: added ability to check required codestream compatibility level\n   and force specified using `JxlEncoderGetRequiredCodestreamLevel` and\n   `JxlEncoderSetCodestreamLevel`.\n - encoder API: added ability to force emitting box-based container format\n   using `JxlEncoderUseContainer`.\n - encoder API: added ability to store JPEG metadata for lossless reconstruction\n   using `JxlEncoderStoreJPEGMetadata`\n - encoder API: new functions `JxlEncoderSetFrameHeader` and\n   `JxlEncoderSetExtraChannelBlendInfo` to set animation\n   and blending parameters of the frame, and `JxlEncoderInitFrameHeader` and\n   `JxlEncoderInitBlendInfo` to initialize the structs to set.\n - encoder API: ability to encode arbitrary extra channels:\n  `JxlEncoderInitExtraChannelInfo`, `JxlEncoderSetExtraChannelInfo`,\n  `JxlEncoderSetExtraChannelName` and `JxlEncoderSetExtraChannelBuffer`.\n - encoder API: ability to plug custom CMS implementation using\n   `JxlEncoderSetCms(JxlEncoder* enc, JxlCmsInterface cms)`\n - encoder API: added `JxlEncoderGetError` to retrieve last encoder error.\n\n### Changed\n- decoder API: using `JxlDecoderCloseInput` at the end of all input is required\n  when using JXL_DEC_BOX, and is now also encouraged in other cases, but not\n  required in those other cases for backwards compatibility.\n- encoder API: `JxlEncoderCloseInput` now closes both frames and boxes input.\n- CLI: `cjxl` and `djxl` have been reimplemented on the base of public decoder\n  and encoder API; dropped dependency on `gflags` for argument parsing.\n\n### Deprecated\n- decoder API: `JXL_DEC_EXTENSIONS` event: use `JXL_DEC_BASIC_INFO`\n- decoder / encoder API: pixel types `JXL_TYPE_BOOLEAN` and `JXL_TYPE_UINT32`:\n  consider using `JXL_TYPE_UINT8` and `JXL_TYPE_FLOAT` correspondingly.\n- decoder API: pixel format parameter for `JxlDecoderGetColorAsEncodedProfile`\n  and `JxlDecoderGetICCProfileSize`: pass `NULL`.\n- decoder API: `JxlDecoderDefaultPixelFormat`\n- encoder API: `JxlEncoderOptions`: use `JxlEncoderFrameSettings` instead.\n- encoder API: `JxlEncoderOptionsCreate`: use `JxlEncoderFrameSettingsCreate`\n  instead.\n- encoder API: `JxlEncoderOptionsSetDistance`: use `JxlEncoderSetFrameDistance`\n  instead.\n- encoder API: `JxlEncoderOptionsSetLossless`: use `JxlEncoderSetFrameLossless`\n  instead.\n- encoder API: `JxlEncoderOptionsSetEffort`: use\n  `JxlEncoderFrameSettingsSetOption(frame_settings, JXL_ENC_FRAME_SETTING_EFFORT, effort)`\n  instead.\n- encoder API: `JxlEncoderOptionsSetDecodingSpeed`: use\n  `JxlEncoderFrameSettingsSetOption(frame_settings, JXL_ENC_FRAME_SETTING_DECODING_SPEED, tier)`\n  instead.\n- encoder API: deprecated `JXL_ENC_NOT_SUPPORTED`, the encoder returns\n  `JXL_ENC_ERROR` instead and there is no need to handle\n  `JXL_ENC_NOT_SUPPORTED`.\n\n## [0.6.1] - 2021-10-29\n### Changed\n - Security: Fix OOB read in splines rendering (#735 -\n   [CVE-2021-22563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22563))\n - Security: Fix OOB copy (read/write) in out-of-order/multi-threaded decoding\n   (#708 - [CVE-2021-22564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22564))\n - Fix segfault in `djxl` tool with `--allow_partial_files` flag (#781).\n - Fix border in extra channels when using upsampling (#796)\n\n## [0.6] - 2021-10-04\n### Added\n - API: New functions to decode extra channels:\n   `JxlDecoderExtraChannelBufferSize` and `JxlDecoderSetExtraChannelBuffer`.\n - API: New function `JxlEncoderInitBasicInfo` to initialize `JxlBasicInfo`\n   (only needed when encoding). NOTE: it is now required to call this function\n   when using the encoder. Padding was added to the struct for forward\n   compatibility.\n - API: Support for encoding oriented images.\n - API: FLOAT16 support in the encoder API.\n - Rewrite of the GDK pixbuf loader plugin. Added proper color management and\n   animation support.\n - Rewrite of GIMP plugin. Added compression parameters dialog and switched to\n   using the public C API.\n - Debian packages for GDK pixbuf loader (`libjxl-gdk-pixbuf`) and GIMP\n   (`libjxl-gimp-plugin`) plugins.\n - `cjxl`/`djxl` support for `stdin` and `stdout`.\n\n### Changed\n - API: Renamed the field `alpha_associated` in `JxlExtraChannelInfo` to\n   `alpha_premultiplied`, to match the corresponding name in `JxlBasicInfo`.\n - Improved the 2x2 downscaling method in the encoder for the optional color\n   channel resampling for low bit rates.\n - Fixed: the combination of floating point original data, XYB color encoding,\n   and Modular mode was broken (in both encoder and decoder). It now works.\n   NOTE: this can cause the current encoder to write jxl bitstreams that do\n   not decode with the old decoder. In particular this will happen when using\n   cjxl with PFM, EXR, or floating point PSD input, and a combination of XYB\n   and modular mode is used (which caused an encoder error before), e.g.\n   using options like `-m -q 80` (lossy modular), `-d 4.5` or `--progressive_dc=1`\n   (modular DC frame), or default lossy encoding on an image where patches\n   end up being used. There is no problem when using cjxl with PNG, JPEG, GIF,\n   APNG, PPM, PGM, PGX, or integer (8-bit or 16-bit) PSD input.\n - `libjxl` static library now bundles skcms, fixing static linking in\n   downstream projects when skcms is used.\n - Spline rendering performance improvements.\n - Butteraugli changes for less visual masking.\n\n## [0.5] - 2021-08-02\n### Added\n - API: New function to decode the image using a callback outputting a part of a\n   row per call.\n - API: 16-bit float output support.\n - API: `JxlDecoderRewind` and `JxlDecoderSkipFrames` functions to skip more\n   efficiently to earlier animation frames.\n - API: `JxlDecoderSetPreferredColorProfile` function to choose color profile in\n   certain circumstances.\n - encoder: Adding `center_x` and `center_y` flags for more control of the tile\n   order.\n - New encoder speeds `lightning` (1) and `thunder` (2).\n\n### Changed\n - Re-licensed the project under a BSD 3-Clause license. See the\n   [LICENSE](LICENSE) and [PATENTS](PATENTS) files for details.\n - Full JPEG XL part 1 specification support: Implemented all the spec required\n   to decode files to pixels, including cases that are not used by the encoder\n   yet. Part 2 of the spec (container format) is final but not fully implemented\n   here.\n - Butteraugli metric improvements. Exact numbers are different from previous\n   versions.\n - Memory reductions during decoding.\n - Reduce the size of the jxl_dec library by removing dependencies.\n - A few encoding speedups.\n - Clarify the security policy.\n - Significant encoding improvements (~5 %) and less ringing.\n - Butteraugli metric to have some less masking.\n - `cjxl` flag `--speed` is deprecated and replaced by the `--effort` synonym.\n\n### Removed\n- API for returning a downsampled DC was deprecated\n  (`JxlDecoderDCOutBufferSize` and `JxlDecoderSetDCOutBuffer`) and will be\n  removed in the next release.\n\n## [0.3.7] - 2021-03-29\n### Changed\n - Fix a rounding issue in 8-bit decoding.\n\n## [0.3.6] - 2021-03-25\n### Changed\n - Fix a bug that could result in the generation of invalid codestreams as\n   well as failure to decode valid streams.\n\n## [0.3.5] - 2021-03-23\n### Added\n - New encode-time options for faster decoding at the cost of quality.\n - Man pages for cjxl and djxl.\n\n### Changed\n - Memory usage improvements.\n - Faster decoding to 8-bit output with the C API.\n - GIMP plugin: avoid the sRGB conversion dialog for sRGB images, do not show\n   a console window on Windows.\n - Various bug fixes.\n\n## [0.3.4] - 2021-03-16\n### Changed\n - Improved box parsing.\n - Improved metadata handling.\n - Performance and memory usage improvements.\n\n## [0.3.3] - 2021-03-05\n### Changed\n - Performance improvements for small images.\n - Add a (flag-protected) non-high-precision mode with better speed.\n - Significantly speed up the PQ EOTF.\n - Allow optional HDR tone mapping in djxl (--tone_map, --display_nits).\n - Change the behavior of djxl -j to make it consistent with cjxl (#153).\n - Improve image quality.\n - Improve EXIF handling.\n\n## [0.3.2] - 2021-02-12\n### Changed\n - Fix embedded ICC encoding regression\n   [#149](https://gitlab.com/wg1/jpeg-xl/-/issues/149).\n\n## [0.3.1] - 2021-02-10\n### Changed\n - New experimental Butteraugli API (`jxl/butteraugli.h`).\n - Encoder improvements to low quality settings.\n - Bug fixes, including fuzzer-found potential security bug fixes.\n - Fixed `-q 100` and `-d 0` not triggering lossless modes.\n\n## [0.3] - 2021-01-29\n### Changed\n - Minor change to the Decoder C API to accommodate future work for other ways\n   to provide input.\n - Future decoder C API changes will be backwards compatible.\n - Lots of bug fixes since the previous version.\n\n## [0.2] - 2020-12-24\n### Added\n - JPEG XL bitstream format is frozen. Files encoded with 0.2 will be supported\n   by future versions.\n\n### Changed\n - Files encoded with previous versions are not supported.\n\n## [0.1.1] - 2020-12-01\n\n## [0.1] - 2020-11-14\n### Added\n - Initial release of an encoder (`cjxl`) and decoder (`djxl`) that work\n   together as well as a benchmark tool for comparison with other codecs\n   (`benchmark_xl`).\n - Note: JPEG XL format is in the final stages of standardization, minor changes\n   to the codestream format are still possible but we are not expecting any\n   changes beyond what is required by bug fixing.\n - API: new decoder API in C, check the `examples/` directory for its example\n   usage. The C API is a work in progress and likely to change both in API and\n   ABI in future releases.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 20.01953125,
          "content": "# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Ubuntu focal ships with cmake 3.16.\ncmake_minimum_required(VERSION 3.16...3.27)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nproject(LIBJXL LANGUAGES C CXX)\n\n# TODO(sboukortt): remove once oss-fuzz passes -DBUILD_SHARED_LIBS=OFF\nif(JPEGXL_ENABLE_FUZZERS)\n  message(STATUS \"Fuzzer build detected, building static libs\")\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\nmessage(STATUS \"CMAKE_SYSTEM_PROCESSOR is ${CMAKE_SYSTEM_PROCESSOR}\")\ninclude(CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag(\"-fsanitize=fuzzer-no-link\" CXX_FUZZERS_SUPPORTED)\ncheck_cxx_compiler_flag(\"-fmacro-prefix-map=OLD=NEW\" CXX_MACRO_PREFIX_MAP)\ncheck_cxx_compiler_flag(\"-fno-rtti\" CXX_NO_RTTI_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx2\" CXX_MAVX2_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mf16c\" CXX_MF16C_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx512f\" CXX_MAVX512F_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx512dq\" CXX_MAVX512DQ_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx512cd\" CXX_MAVX512CD_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx512bw\" CXX_MAVX512BW_SUPPORTED)\ncheck_cxx_compiler_flag(\"-mavx512vl\" CXX_MAVX512VL_SUPPORTED)\n\n# Add \"DebugOpt\" CMake build type. Unlike builtin DEBUG it is optimized.\nstring(REGEX REPLACE \"-DNDEBUG \" \"\" CMAKE_CXX_FLAGS_DEBUGOPT \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DDEBUG\" )\nstring(REGEX REPLACE \"-DNDEBUG \" \"\" CMAKE_C_FLAGS_DEBUGOPT \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -DDEBUG\" )\n\n# Enabled PIE binaries by default if supported.\ninclude(CheckPIESupported OPTIONAL RESULT_VARIABLE CHECK_PIE_SUPPORTED)\nif(CHECK_PIE_SUPPORTED)\n  check_pie_supported(LANGUAGES CXX)\n  if(CMAKE_CXX_LINK_PIE_SUPPORTED)\n    set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n  endif()\nendif()\n\nif(PROVISION_DEPENDENCIES)\n  # Run script to provision dependencies.\n  find_program (BASH_PROGRAM bash)\n  if(BASH_PROGRAM)\n    execute_process(\n      COMMAND ${BASH_PROGRAM} ${CMAKE_CURRENT_SOURCE_DIR}/deps.sh\n      RESULT_VARIABLE PROVISION_DEPENDENCIES_RESULT)\n  endif()\n  if(NOT PROVISION_DEPENDENCIES_RESULT EQUAL \"0\")\n    message(FATAL_ERROR \"${CMAKE_CURRENT_SOURCE_DIR}/deps.sh failed with ${PROVISION_DEPENDENCIES_RESULT}\")\n  endif()\nendif()\n\n### Project build options:\nif(CXX_FUZZERS_SUPPORTED)\n  # Enabled by default except on arm64, Windows and Apple builds.\n  set(ENABLE_FUZZERS_DEFAULT true)\nendif()\nfind_package(PkgConfig)\nif(NOT APPLE AND NOT WIN32 AND NOT HAIKU AND CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n  pkg_check_modules(TCMallocMinimalVersionCheck QUIET IMPORTED_TARGET\n      libtcmalloc_minimal)\n  if(TCMallocMinimalVersionCheck_FOUND AND\n     NOT TCMallocMinimalVersionCheck_VERSION VERSION_EQUAL 2.8.0)\n    # Enabled by default except on Windows and Apple builds for\n    # tcmalloc != 2.8.0. tcmalloc 2.8.1 already has a fix for this issue.\n    set(ENABLE_TCMALLOC_DEFAULT true)\n  else()\n    message(STATUS\n        \"tcmalloc version ${TCMallocMinimalVersionCheck_VERSION} -- \"\n        \"tcmalloc 2.8.0 disabled due to \"\n        \"https://github.com/gperftools/gperftools/issues/1204\")\n  endif()\nendif()\n\ncheck_cxx_source_compiles(\n   \"int main() {\n      #if !defined(HWY_DISABLED_TARGETS)\n      static_assert(false, \\\"HWY_DISABLED_TARGETS is not defined\\\");\n      #endif\n      return 0;\n    }\"\n  JXL_HWY_DISABLED_TARGETS_FORCED\n)\n\nif((SANITIZER STREQUAL \"msan\") OR EMSCRIPTEN)\n  set(BUNDLE_LIBPNG_DEFAULT YES)\nelse()\n  set(BUNDLE_LIBPNG_DEFAULT NO)\nendif()\n\n\nif(EXISTS \"${PROJECT_SOURCE_DIR}/third_party/libjpeg-turbo/jconfig.h.in\")\n  set(ENABLE_JPEGLI_DEFAULT YES)\nelse()\n  set(ENABLE_JPEGLI_DEFAULT NO)\n  message(STATUS \"libjpeg-turbo submodule is absent; not enabling jpegli\")\nendif()\n\ninclude(TestBigEndian)\ntest_big_endian(ARCH_IS_BIG_ENDIAN)\nif(ARCH_IS_BIG_ENDIAN)\n  set(ENABLE_SKCMS_DEFAULT NO)\n  message(STATUS \"Big-endian architecture detected; defaulting to lcms2 instead of skcms\")\nelse()\n  set(ENABLE_SKCMS_DEFAULT YES)\nendif()\n\n# Standard cmake naming for building shared libraries.\nget_property(SHARED_LIBS_SUPPORTED GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)\noption(BUILD_SHARED_LIBS \"Build shared libraries instead of static ones\" ${SHARED_LIBS_SUPPORTED})\n\nset(JPEGXL_ENABLE_FUZZERS ${ENABLE_FUZZERS_DEFAULT} CACHE BOOL\n    \"Build JPEGXL fuzzer targets.\")\nset(JPEGXL_ENABLE_DEVTOOLS false CACHE BOOL\n    \"Build JPEGXL developer tools.\")\nset(JPEGXL_ENABLE_TOOLS true CACHE BOOL\n    \"Build JPEGXL user tools: cjxl and djxl.\")\nset(JPEGXL_ENABLE_JPEGLI ${ENABLE_JPEGLI_DEFAULT} CACHE BOOL\n    \"Build jpegli library.\")\nset(JPEGXL_ENABLE_JPEGLI_LIBJPEG true CACHE BOOL\n    \"Build libjpeg.so shared library based on jpegli.\")\nset(JPEGXL_INSTALL_JPEGLI_LIBJPEG false CACHE BOOL\n    \"Install jpegli version of libjpeg.so system-wide.\")\nset(JPEGLI_LIBJPEG_LIBRARY_VERSION \"62.3.0\" CACHE STRING\n    \"Library version of the libjpeg.so shared library that we build.\")\nset(JPEGLI_LIBJPEG_LIBRARY_SOVERSION \"62\" CACHE STRING\n    \"Library so-version of the libjpeg.so shared library that we build.\")\nset(JPEGXL_ENABLE_DOXYGEN true CACHE BOOL\n    \"Generate C API documentation using Doxygen.\")\nset(JPEGXL_ENABLE_MANPAGES true CACHE BOOL\n    \"Build and install man pages for the command-line tools.\")\nset(JPEGXL_ENABLE_BENCHMARK true CACHE BOOL\n    \"Build JPEGXL benchmark tools.\")\nset(JPEGXL_ENABLE_EXAMPLES true CACHE BOOL\n    \"Build JPEGXL library usage examples.\")\nset(JPEGXL_BUNDLE_LIBPNG ${BUNDLE_LIBPNG_DEFAULT} CACHE BOOL\n    \"Build libpng from source and link it statically.\")\nset(JPEGXL_ENABLE_JNI true CACHE BOOL\n    \"Build JPEGXL JNI Java wrapper, if Java dependencies are installed.\")\nset(JPEGXL_ENABLE_SJPEG true CACHE BOOL\n    \"Build JPEGXL with support for encoding with sjpeg.\")\nset(JPEGXL_ENABLE_OPENEXR true CACHE BOOL\n    \"Build JPEGXL with support for OpenEXR if available.\")\nset(JPEGXL_ENABLE_SKCMS ${ENABLE_SKCMS_DEFAULT} CACHE BOOL\n    \"Build with skcms instead of lcms2.\")\nset(JPEGXL_ENABLE_VIEWERS false CACHE BOOL\n    \"Build JPEGXL viewer tools for evaluation.\")\nset(JPEGXL_ENABLE_TCMALLOC ${ENABLE_TCMALLOC_DEFAULT} CACHE BOOL\n    \"Build JPEGXL using gperftools (tcmalloc) allocator.\")\nset(JPEGXL_ENABLE_PLUGINS false CACHE BOOL\n    \"Build third-party plugins to support JPEG XL in other applications.\")\nset(JPEGXL_ENABLE_COVERAGE false CACHE BOOL\n    \"Enable code coverage tracking for libjxl. This also enables debug and disables optimizations.\")\nset(JPEGXL_ENABLE_SIZELESS_VECTORS false CACHE BOOL\n    \"Builds in support for SVE/RVV vectorization\")\nset(JPEGXL_ENABLE_TRANSCODE_JPEG true CACHE BOOL\n    \"Builds in support for decoding transcoded JXL files back to JPEG,\\\n disabling it makes the decoder reject JXL_DEC_JPEG_RECONSTRUCTION events,\\\n (default enabled)\")\nset(JPEGXL_ENABLE_BOXES true CACHE BOOL\n    \"Builds in support for decoding boxes in JXL files,\\\n disabling it makes the decoder reject JXL_DEC_BOX events,\\\n (default enabled)\")\nset(JPEGXL_STATIC false CACHE BOOL\n    \"Build tools as static binaries.\")\nset(JPEGXL_WARNINGS_AS_ERRORS false CACHE BOOL\n    \"Treat warnings as errors during compilation.\")\nset(JPEGXL_DEP_LICENSE_DIR \"\" CACHE STRING\n    \"Directory where to search for system dependencies \\\"copyright\\\" files.\")\nset(JPEGXL_FORCE_NEON false CACHE BOOL\n    \"Set flags to enable NEON in arm if not enabled by your toolchain.\")\nset(JPEGXL_TEST_TOOLS false CACHE BOOL\n    \"Run scripts that test the encoding / decoding tools.\")\nset(JPEGXL_ENABLE_AVX512 false CACHE BOOL\n    \"Build with AVX512 support (faster on CPUs that support it, but larger binary size).\")\nset(JPEGXL_ENABLE_AVX512_SPR false CACHE BOOL\n    \"Build with AVX-512FP16 support (faster on CPUs that support it, but larger binary size).\")\nset(JPEGXL_ENABLE_AVX512_ZEN4 false CACHE BOOL\n\"Build with Zen4-optimized AVX512 support (faster on CPUs that support it, but larger binary size).\")\nset(JPEGXL_ENABLE_WASM_THREADS true CACHE BOOL\n    \"Builds WASM modules with threads support\")\n\n# Force system dependencies.\nset(JPEGXL_FORCE_SYSTEM_BROTLI false CACHE BOOL\n    \"Force using system installed brotli instead of third_party/brotli source.\")\nset(JPEGXL_FORCE_SYSTEM_GTEST false CACHE BOOL\n    \"Force using system installed googletest (gtest) instead of third_party/googletest source.\")\nset(JPEGXL_FORCE_SYSTEM_LCMS2 false CACHE BOOL\n    \"Force using system installed lcms2 instead of third_party/lcms source.\")\nset(JPEGXL_FORCE_SYSTEM_HWY false CACHE BOOL\n    \"Force using system installed highway (libhwy-dev) instead of third_party/highway source.\")\n\n# Check minimum compiler versions. Older compilers are not supported and fail\n# with hard to understand errors.\nif (NOT CMAKE_C_COMPILER_ID STREQUAL CMAKE_CXX_COMPILER_ID)\n  message(FATAL_ERROR \"Different C/C++ compilers set: \"\n          \"${CMAKE_C_COMPILER_ID} vs ${CMAKE_CXX_COMPILER_ID}\")\nendif()\n\nmessage(STATUS\n    \"Compiled IDs C:${CMAKE_C_COMPILER_ID}, C++:${CMAKE_CXX_COMPILER_ID}\")\n\nset(JXL_HWY_INCLUDE_DIRS \"$<BUILD_INTERFACE:$<TARGET_PROPERTY:$<IF:$<TARGET_EXISTS:hwy::hwy>,hwy::hwy,hwy>,INTERFACE_INCLUDE_DIRECTORIES>>\")\n# Always disable SSSE3 since it is rare to have SSSE3 but not SSE4\nset(HWY_DISABLED_TARGETS \"HWY_SSSE3\")\nif (NOT JPEGXL_ENABLE_AVX512)\n  message(STATUS \"Disabled AVX512 (set JPEGXL_ENABLE_AVX512 to enable it)\")\n  set(HWY_DISABLED_TARGETS \"${HWY_DISABLED_TARGETS}|HWY_AVX3\")\n  add_definitions(-DFJXL_ENABLE_AVX512=0)\nendif()\nif (NOT JPEGXL_ENABLE_AVX512_SPR)\n  message(STATUS \"Disabled AVX512_SPR (set JPEGXL_ENABLE_AVX512_SPR to enable it)\")\n  set(HWY_DISABLED_TARGETS \"${HWY_DISABLED_TARGETS}|HWY_AVX3_SPR\")\nendif()\nif (NOT JPEGXL_ENABLE_AVX512_ZEN4)\n  message(STATUS \"Disabled AVX512_ZEN4 (set JPEGXL_ENABLE_AVX512_ZEN4 to enable it)\")\n  set(HWY_DISABLED_TARGETS \"${HWY_DISABLED_TARGETS}|HWY_AVX3_ZEN4\")\nendif()\n\n\n\n# CMAKE_EXPORT_COMPILE_COMMANDS is used to generate the compilation database\n# used by clang-tidy.\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(JPEGXL_STATIC)\n  set(BUILD_SHARED_LIBS 0)\n\n  # https://learn.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=msvc-170\n  # https://cmake.org/cmake/help/latest/variable/CMAKE_MSVC_RUNTIME_LIBRARY.html\n  # For debug builds we intentionally link with shared library to ensure that we don’t accidentally\n  # redistribute such binaries anywhere.\n  set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:DebugDLL>\" CACHE STRING \"\")\n\n  # Clang developers say that in case to use \"static\" we have to build stdlib\n  # ourselves; for real use case we don't care about stdlib, as it is \"granted\",\n  # so just linking all other libraries is fine.\n  if (NOT MSVC)\n    string(APPEND CMAKE_EXE_LINKER_FLAGS \" -static\")\n  endif()\n  if ((NOT WIN32 AND NOT APPLE) OR CYGWIN OR MINGW)\n    set(CMAKE_FIND_LIBRARY_SUFFIXES .a)\n    string(APPEND CMAKE_EXE_LINKER_FLAGS \" -static-libgcc -static-libstdc++\")\n  endif()\nendif()  # JPEGXL_STATIC\n\n# Threads\nset(THREADS_PREFER_PTHREAD_FLAG YES)\nfind_package(Threads REQUIRED)\n\n# These settings are important to drive check_cxx_source_compiles\n# See CMP0067 (min cmake version is 3.10 anyway)\n\nif (\"cxx_std_17\" IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n  set(CMAKE_CXX_STANDARD 17)\nelse()\n  if (\"cxx_std_14\" IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n    set(CMAKE_CXX_STANDARD 14)\n  else()\n    set(CMAKE_CXX_STANDARD 11)\n  endif()\nendif()\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nmessage(STATUS \"CXX_STANDARD is ${CMAKE_CXX_STANDARD}\")\n\n# Atomics\nfind_package(Atomics REQUIRED)\n\nif(JPEGXL_STATIC)\n  if (MINGW)\n    # In MINGW libstdc++ uses pthreads directly. When building statically a\n    # program (regardless of whether the source code uses pthread or not) the\n    # toolchain will add stdc++ and pthread to the linking step but stdc++ will\n    # be linked statically while pthread will be linked dynamically.\n    # To avoid this and have pthread statically linked with need to pass it in\n    # the command line with \"-Wl,-Bstatic -lpthread -Wl,-Bdynamic\" but the\n    # linker will discard it if not used by anything else up to that point in\n    # the linker command line. If the program or any dependency don't use\n    # pthread directly -lpthread is discarded and libstdc++ (added by the\n    # toolchain later) will then use the dynamic version. For this we also need\n    # to pass -lstdc++ explicitly before -lpthread. For pure C programs -lstdc++\n    # will be discarded anyway.\n    # This adds these flags as dependencies for *all* targets. Adding this to\n    # CMAKE_EXE_LINKER_FLAGS instead would cause them to be included before any\n    # object files and therefore discarded. This should be set in the\n    # INTERFACE_LINK_LIBRARIES of Threads::Threads but some third_part targets\n    # don't depend on it.\n    link_libraries(-Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic)\n  elseif(CMAKE_USE_PTHREADS_INIT)\n    # \"whole-archive\" is not supported on OSX.\n    if (NOT APPLE)\n      # Set pthreads as a whole-archive, otherwise weak symbols in the static\n      # libraries will discard pthreads symbols leading to segmentation fault at\n      # runtime.\n      message(STATUS \"Using -lpthread as --whole-archive\")\n      set_target_properties(Threads::Threads PROPERTIES\n        INTERFACE_LINK_LIBRARIES\n            \"-Wl,--whole-archive;-lpthread;-Wl,--no-whole-archive\")\n    endif()\n  endif()\nendif()  # JPEGXL_STATIC\n\nif (EMSCRIPTEN AND JPEGXL_ENABLE_WASM_THREADS)\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pthread\")\nendif()\n\nif (CXX_MACRO_PREFIX_MAP)\n  add_compile_options(-fmacro-prefix-map=${CMAKE_CURRENT_SOURCE_DIR}=.)\nendif()\n\nif (CXX_NO_RTTI_SUPPORTED)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti\")\nendif()\n\n# Internal flags for coverage builds:\nset(JPEGXL_COVERAGE_FLAGS)\nset(JPEGXL_COVERAGE_LINK_FLAGS)\n\nif (MSVC)\n  # TODO(janwas): add flags\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\nelse ()\n  # Global compiler flags for all targets here and in subdirectories.\n  add_definitions(\n    # Avoid changing the binary based on the current time and date.\n    -D__DATE__=\"redacted\"\n    -D__TIMESTAMP__=\"redacted\"\n    -D__TIME__=\"redacted\"\n  )\n\n  # TODO(eustas): JXL currently compiles, but does not pass tests...\n  if (NOT JXL_HWY_DISABLED_TARGETS_FORCED)\n    if (NOT JPEGXL_ENABLE_SIZELESS_VECTORS)\n      set(HWY_DISABLED_TARGETS \"${HWY_DISABLED_TARGETS}|HWY_SVE|HWY_SVE2|HWY_SVE_256|HWY_SVE2_128|HWY_RVV\")\n    endif()\n    add_compile_options($<$<NOT:$<COMPILE_LANGUAGE:RC>>:-DHWY_DISABLED_TARGETS=\\(${HWY_DISABLED_TARGETS}\\)>)\n  endif()\n\n  # Machine flags.\n  add_compile_options(-funwind-tables)\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    add_compile_options(\"SHELL:-Xclang -mrelax-all\")\n  endif()\n  if (CXX_CONSTRUCTOR_ALIASES_SUPPORTED)\n    add_compile_options(\"SHELL:-Xclang -mconstructor-aliases\")\n  endif()\n\n  if(WIN32)\n    # Not supported by clang-cl, but frame pointers are default on Windows\n  else()\n    add_compile_options(-fno-omit-frame-pointer)\n  endif()\n\n  # CPU flags - remove once we have NEON dynamic dispatch\n\n  # TODO(janwas): this also matches M1, but only ARMv7 is intended/needed.\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm\")\n    if(JPEGXL_FORCE_NEON)\n      # GCC requires these flags, otherwise __ARM_NEON is undefined.\n      add_compile_options(-mfpu=neon-vfpv4 -mfloat-abi=hard)\n    endif()\n  endif()\n\n  add_compile_options(\n    # Ignore this to allow redefining __DATE__ and others.\n    -Wno-builtin-macro-redefined\n\n    # Global warning settings.\n    -Wall\n  )\n\n  if (JPEGXL_WARNINGS_AS_ERRORS)\n    add_compile_options(-Werror)\n  endif ()\n\n  if(JPEGXL_ENABLE_COVERAGE)\n    set(JPEGXL_COVERAGE_FLAGS\n        -g -O0 -fprofile-arcs -ftest-coverage -fprofile-update=atomic\n    )\n    set(JPEGXL_COVERAGE_LINK_FLAGS\n        --coverage\n    )\n  endif()  # JPEGXL_ENABLE_COVERAGE\nendif ()  # !MSVC\n\ninclude(GNUInstallDirs)\n\n# Separately build/configure testing frameworks and other third_party libraries\n# to allow disabling tests in those libraries.\ninclude(third_party/testing.cmake)\nadd_subdirectory(third_party)\n# Copy the JXL license file to the output build directory.\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\"\n               ${PROJECT_BINARY_DIR}/LICENSE.jpeg-xl COPYONLY)\n\n# Enable tests regardless of where they are defined.\nenable_testing()\ninclude(CTest)\n# Specify default location of `testdata`:\nif(NOT DEFINED JPEGXL_TEST_DATA_PATH)\n  set(JPEGXL_TEST_DATA_PATH \"${PROJECT_SOURCE_DIR}/testdata\")\nendif()\n\n# Libraries.\nadd_subdirectory(lib)\n\nif(BUILD_TESTING)\n  if (NOT EXISTS \"${JPEGXL_TEST_DATA_PATH}/README.md\")\n    message(FATAL_ERROR \"testdata directory '${JPEGXL_TEST_DATA_PATH}' is not populated\")\n  endif()\n  # Script to run tests over the source code in bash.\n  find_program (BASH_PROGRAM bash)\n  if(BASH_PROGRAM)\n    add_test(\n      NAME bash_test\n      COMMAND ${BASH_PROGRAM} ${CMAKE_CURRENT_SOURCE_DIR}/bash_test.sh)\n  endif()\nendif() # BUILD_TESTING\n\n# Documentation generated by Doxygen\nif(JPEGXL_ENABLE_DOXYGEN)\n  add_subdirectory(doc)\nendif() # JPEGXL_ENABLE_DOXYGEN\n\nif(JPEGXL_ENABLE_MANPAGES)\n  find_program(ASCIIDOC a2x)\n  if(ASCIIDOC)\n    file(STRINGS \"${ASCIIDOC}\" ASCIIDOC_SHEBANG LIMIT_COUNT 1)\n    if(ASCIIDOC_SHEBANG MATCHES \"sh( -e)?$\" OR ASCIIDOC_SHEBANG MATCHES \"libexec/bin/python$\" OR MINGW)\n      set(ASCIIDOC_PY_FOUND ON)\n      # Run the program directly and set ASCIIDOC as empty.\n      set(ASCIIDOC_PY \"${ASCIIDOC}\")\n      set(ASCIIDOC \"\")\n    elseif(ASCIIDOC_SHEBANG MATCHES \"python2\")\n      find_package(Python2 COMPONENTS Interpreter)\n      set(ASCIIDOC_PY_FOUND \"${Python2_Interpreter_FOUND}\")\n      set(ASCIIDOC_PY Python2::Interpreter)\n    elseif(ASCIIDOC_SHEBANG MATCHES \"python3\")\n      find_package(Python3 COMPONENTS Interpreter)\n      set(ASCIIDOC_PY_FOUND \"${Python3_Interpreter_FOUND}\")\n      set(ASCIIDOC_PY Python3::Interpreter)\n    else()\n      find_package(Python COMPONENTS Interpreter QUIET)\n      if(NOT Python_Interpreter_FOUND)\n        find_program(ASCIIDOC_PY python)\n        if(ASCIIDOC_PY)\n          set(ASCIIDOC_PY_FOUND ON)\n        endif()\n      else()\n        set(ASCIIDOC_PY_FOUND \"${Python_Interpreter_FOUND}\")\n        set(ASCIIDOC_PY Python::Interpreter)\n      endif()\n    endif()\n\n    if (ASCIIDOC_PY_FOUND)\n      set(MANPAGE_FILES \"\")\n      set(MANPAGES \"\")\n      foreach(PAGE IN ITEMS cjxl djxl)\n        # Invoking the Python interpreter ourselves instead of running the a2x binary\n        # directly is necessary on MSYS2, otherwise it is run through cmd.exe which\n        # does not recognize it.\n        add_custom_command(\n          OUTPUT \"${PAGE}.1\"\n          COMMAND \"${ASCIIDOC_PY}\"\n          ARGS ${ASCIIDOC}\n            --format manpage --destination-dir=\"${CMAKE_CURRENT_BINARY_DIR}\"\n            \"${CMAKE_CURRENT_SOURCE_DIR}/doc/man/${PAGE}.txt\"\n          MAIN_DEPENDENCY \"${CMAKE_CURRENT_SOURCE_DIR}/doc/man/${PAGE}.txt\")\n        list(APPEND MANPAGE_FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PAGE}.1\")\n        list(APPEND MANPAGES \"${PAGE}.1\")\n      endforeach()\n      add_custom_target(manpages ALL DEPENDS ${MANPAGES})\n      install(FILES ${MANPAGE_FILES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n    endif()  # ASCIIDOC_PY_FOUND\n  else()\n    message(WARNING \"asciidoc was not found, the man pages will not be installed.\")\n  endif()  # ASCIIDOC\nendif()  # JPEGXL_ENABLE_MANPAGES\n\n# Example usage code.\nif (JPEGXL_ENABLE_EXAMPLES)\n  include(examples/examples.cmake)\nendif ()\n\n# Plugins for third-party software\nif (JPEGXL_ENABLE_PLUGINS)\n  add_subdirectory(plugins)\nendif ()\n\n# Binary tools\nadd_subdirectory(tools)\n\n\nmacro(list_test_targets out dir)\n  get_property(dir_targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)\n  foreach(target ${dir_targets})\n    if (target MATCHES \".*_test\")\n      list(APPEND ${out} ${target})\n    endif()\n  endforeach()\n  get_property(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)\n  foreach(subdir ${subdirectories})\n    list_test_targets(${out} ${subdir})\n  endforeach()\nendmacro()\n\nset(all_tests_list)\nlist_test_targets(all_tests_list ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(all_tests_list)\n  add_custom_target(all_tests)\n  add_dependencies(all_tests ${all_tests_list})\nendif()\n\n# uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.3837890625,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of\nexperience, education, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n*   Using welcoming and inclusive language\n*   Being respectful of differing viewpoints and experiences\n*   Gracefully accepting constructive criticism\n*   Focusing on what is best for the community\n*   Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n*   The use of sexualized language or imagery and unwelcome sexual attention or\n    advances\n*   Trolling, insulting/derogatory comments, and personal or political attacks\n*   Public or private harassment\n*   Publishing others' private information, such as a physical or electronic\n    address, without explicit permission\n*   Other conduct which could reasonably be considered inappropriate in a\n    professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening,\noffensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when the Project\nSteward has a reasonable belief that an individual's behavior may have a\nnegative impact on the project or its community.\n\n## Conflict Resolution\n\nWe do not believe that all conflict is bad; healthy debate and disagreement\noften yield positive results. However, it is never okay to be disrespectful or\nto engage in behavior that violates the project’s code of conduct.\n\nIf you see someone violating the code of conduct, you are encouraged to address\nthe behavior directly with those involved. Many issues can be resolved quickly\nand easily, and this gives people more control over the outcome of their\ndispute. If you are unable to resolve the matter for any reason, or if the\nbehavior is threatening or harassing, report it. We are dedicated to providing\nan environment where participants feel welcome and safe.\n\nReports should be directed to Jyrki Alakuijala <jyrki@google.com>, the\nProject Steward(s) for JPEG XL. It is the Project Steward’s duty to\nreceive and address reported violations of the code of conduct. They will then\nwork with a committee consisting of representatives from the Open Source\nPrograms Office and the Google Open Source Strategy team. If for any reason you\nare uncomfortable reaching out to the Project Steward, please email\nopensource@google.com.\n\nWe will investigate every complaint, but you may not receive a direct response.\nWe will use our discretion in determining when and how to follow up on reported\nincidents, which may range from not taking action to permanent expulsion from\nthe project and project-sponsored spaces. We will notify the accused of the\nreport and provide them an opportunity to discuss it before any action is taken.\nThe identity of the reporter will be omitted from the details of the report\nsupplied to the accused. In potentially harmful situations, such as ongoing\nharassment or threats to anyone's safety, we may take action without notice.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.912109375,
          "content": "# Contributing to libjxl\n\n## Contributing with bug reports\n\nFor security-related issues please see [SECURITY.md](SECURITY.md).\n\nWe welcome suggestions, feature requests and bug reports. Before opening a new\nissue please take a look if there is already an existing one in the following\nlink:\n\n *  https://github.com/libjxl/libjxl/issues\n\n## Contributing with patches and Pull Requests\n\nWe'd love to accept your contributions to the JPEG XL Project. Please read\nthrough this section before sending a Pull Request.\n\n### Contributor License Agreements\n\nOur project is open source under the terms outlined in the [LICENSE](LICENSE)\nand [PATENTS](PATENTS) files. Before we can accept your contributions, even for\nsmall changes, there are just a few small guidelines you need to follow:\n\nPlease fill out either the individual or corporate Contributor License Agreement\n(CLA) with Google. JPEG XL Project is an an effort by multiple individuals and\ncompanies, including the initial contributors Cloudinary and Google, but Google\nis the legal entity in charge of receiving these CLA and relicensing this\nsoftware:\n\n  * If you are an individual writing original source code and you're sure you\n  own the intellectual property, then you'll need to sign an [individual\n  CLA](https://code.google.com/legal/individual-cla-v1.0.html).\n\n  * If you work for a company that wants to allow you to contribute your work,\n  then you'll need to sign a [corporate\n  CLA](https://code.google.com/legal/corporate-cla-v1.0.html).\n\nFollow either of the two links above to access the appropriate CLA and\ninstructions for how to sign and return it. Once we receive it, we'll be able\nto accept your pull requests.\n\n***NOTE***: Only original source code from you and other people that have signed\nthe CLA can be accepted into the main repository.\n\n### License\n\nContributions are licensed under the project's [LICENSE](LICENSE). Each new\nfile must include the following header when possible, with comment style adapted\nto the language as needed:\n\n```\n// Copyright (c) the JPEG XL Project Authors. All rights reserved.\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n```\n\n### Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n### Contribution philosophy\n\n  * Prefer small changes, even if they don't implement a complete feature. Small\n  changes are easier to review and can be submitted faster. Think about what's\n  the smallest unit you can send that makes sense to review and submit in\n  isolation. For example, new modules that are not yet used by the tools but\n  have their own unittests are ok. If you have unrelated changes that\n  you discovered while working on something else, please send them in a\n  different Pull Request. If your are refactoring code and changing\n  functionality try to send the refactor first without any change in\n  functionality. Reviewers may ask you to split a Pull Request and it is\n  easier to create a smaller change from the beginning.\n\n  * Describe your commits. Add a meaningful description to your commit message,\n  explain what you are changing if it is not trivially obvious, but more\n  importantly explain *why* you are making those changes. For example \"Fix\n  build\" is not a good commit message, describe what build and if it makes sense\n  why is this fixing it or why was it failing without this. It is very likely\n  that people far in the future without any context you have right now will be\n  looking at your commit trying to figure out why was the change introduced. If\n  related to an issue in this or another repository include a link to it.\n\n  * Code Style: We follow the [Google C++ Coding\n  Style](https://google.github.io/styleguide/cppguide.html). A\n  [clang-format](https://clang.llvm.org/docs/ClangFormat.html) configuration\n  file is available to automatically format your code, you can invoke it with\n  the `./ci.sh lint` helper tool.\n\n  * Testing: Test your change and explain in the commit message *how* your\n  commit was tested. For example adding unittests or in some cases just testing\n  with the existing ones is enough. In any case, mention what testing was\n  performed so reviewers can evaluate whether that's enough testing. In many\n  cases, testing that the Continuous Integration workflow passes is enough.\n\n  * Make one commit per Pull Request / review, unless there's a good reason not\n  to. If you have multiple changes send multiple Pull Requests and each one can\n  have its own review.\n\n  * When addressing comments from reviewers prefer to squash or fixup your\n  edits and force-push your commit. When merging changes into the repository we\n  don't want to include the history of code review back and forth changes or\n  typos. Reviewers can click on the \"force-pushed\" automatic comment on a Pull\n  Request to see the changes between versions. We use \"Rebase and merge\" policy\n  to keep a linear git history which is easier to reason about.\n\n  * Your change must pass the build and test workflows. There's a `ci.sh` script\n  to help building and testing these configurations. See [building and\n  testing](doc/building_and_testing.md) for more details.\n\n### Contributing checklist.\n\n  * Sign the CLA (only needed once per user, see above).\n\n  * AUTHORS: You can add your name to the [AUTHORS](AUTHORS) file.\n\n  * Style guide. Check `./ci.sh lint`.\n\n  * Meaningful commit description: What and *why*, links to issues, testing\n  procedure.\n\n  * Squashed multiple edits into a single commit.\n\n  * Upload your changes to your fork and [create a Pull\n  Request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request).\n\n# Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.65625,
          "content": "# This files lists individuals who made significant contributions to the JPEG XL\n# code base, such as design, adding features, performing experiments, ...\n# Small changes such as a small bugfix or fixing spelling errors are not\n# included. If you'd like to be included in this file thanks to a significant\n# contribution, feel free to send a pull request changing this file.\nAlex Deymo\nAlexander Rhatushnyak\nEvgenii Kliuchnikov\nIulia-Maria Comșa\nJan Wassenberg\nJon Sneyers\nJyrki Alakuijala\nKrzysztof Potempa\nLode Vandevenne\nLuca Versari\nMartin Bruse\nMoritz Firsching\nRenata Khasanova\nRobert Obryk\nSami Boukortt\nSebastian Gomez-Gonzalez\nThomas Fischbacher\nZoltan Szabadka\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.47265625,
          "content": "Copyright (c) the JPEG XL Project Authors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.880859375,
          "content": "# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n\"\"\"JPEG XL reference implementation\"\"\"\n\nmodule(\n    name = \"libjxl\",\n    repo_name = \"libjxl\",\n)\n\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\nbazel_dep(name = \"brotli\", version = \"1.1.0\")\nbazel_dep(name = \"giflib\", version = \"5.2.1\")\nbazel_dep(name = \"googletest\", version = \"1.14.0\")\nbazel_dep(name = \"libjpeg_turbo\", version = \"2.1.91\")\nbazel_dep(name = \"libpng\", version = \"1.6.40\")\nbazel_dep(name = \"libwebp\", version = \"1.3.2\")\nbazel_dep(name = \"openexr\", version = \"3.2.1\")\nbazel_dep(name = \"skcms\", version = \"20241202.0.bcr.1\")\n\n# Requires patching `MODULE.bazel` and `BUILD` files\nbazel_dep(name = \"highway\", version = \"1.2.0\")\nlocal_path_override(\n    module_name = \"highway\",\n    path = \"third_party/highway\",\n)\n"
        },
        {
          "name": "MODULE.bazel.lock",
          "type": "blob",
          "size": 26.318359375,
          "content": "{\n  \"lockFileVersion\": 16,\n  \"registryFileHashes\": {\n    \"https://bcr.bazel.build/bazel_registry.json\": \"8a28e4aff06ee60aed2a8c281907fb8bcbf3b753c91fb5a5c57da3215d5b3497\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20210324.2/MODULE.bazel\": \"7cd0312e064fde87c8d1cd79ba06c876bd23630c83466e9500321be55c96ace2\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20211102.0/MODULE.bazel\": \"70390338f7a5106231d20620712f7cccb659cd0e9d073d1991c038eb9fc57589\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230125.1/MODULE.bazel\": \"89047429cb0207707b2dface14ba7f8df85273d484c2572755be4bab7ce9c3a0\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230802.0.bcr.1/MODULE.bazel\": \"1c8cec495288dccd14fdae6e3f95f772c1c91857047a098fad772034264cc8cb\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230802.0/MODULE.bazel\": \"d253ae36a8bd9ee3c5955384096ccb6baf16a1b1e93e858370da0a3b94f77c16\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230802.1/MODULE.bazel\": \"fa92e2eb41a04df73cdabeec37107316f7e5272650f81d6cc096418fe647b915\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20240116.1/MODULE.bazel\": \"37bcdb4440fbb61df6a1c296ae01b327f19e9bb521f9b8e26ec854b6f97309ed\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20240116.2/MODULE.bazel\": \"73939767a4686cd9a520d16af5ab440071ed75cec1a876bf2fcfaf1f71987a16\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20240116.2/source.json\": \"750d5e29326fb59cbe61116a7b803c8a1d0a7090a9c8ed89888d188e3c473fc7\",\n    \"https://bcr.bazel.build/modules/apple_support/1.15.1/MODULE.bazel\": \"a0556fefca0b1bb2de8567b8827518f94db6a6e7e7d632b4c48dc5f865bc7c85\",\n    \"https://bcr.bazel.build/modules/apple_support/1.15.1/source.json\": \"517f2b77430084c541bc9be2db63fdcbb7102938c5f64c17ee60ffda2e5cf07b\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.1.1/MODULE.bazel\": \"27b8c79ef57efe08efccbd9dd6ef70d61b4798320b8d3c134fd571f78963dbcd\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.11.0/MODULE.bazel\": \"f9382337dd5a474c3b7d334c2f83e50b6eaedc284253334cf823044a26de03e8\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.15.0/MODULE.bazel\": \"d38ff6e517149dc509406aca0db3ad1efdd890a85e049585b7234d04238e2a4d\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.17.0/MODULE.bazel\": \"039de32d21b816b47bd42c778e0454217e9c9caac4a3cf8e15c7231ee3ddee4d\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.18.0/MODULE.bazel\": \"1be0ae2557ab3a72a57aeb31b29be347bcdc5d2b1eb1e70f39e3851a7e97041a\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.19.0/MODULE.bazel\": \"59adcdf28230d220f0067b1f435b8537dd033bfff8db21335ef9217919c7fb58\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.21.0/MODULE.bazel\": \"675642261665d8eea09989aa3b8afb5c37627f1be178382c320d1b46afba5e3b\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.21.0/source.json\": \"3e8379efaaef53ce35b7b8ba419df829315a880cb0a030e5bb45c96d6d5ecb5f\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.4.1/MODULE.bazel\": \"e45b6bb2350aff3e442ae1111c555e27eac1d915e77775f6fdc4b351b758b5d7\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.9.1/MODULE.bazel\": \"8f679097876a9b609ad1f60249c49d68bfab783dd9be012faf9d82547b14815a\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.0.3/MODULE.bazel\": \"bcb0fd896384802d1ad283b4e4eb4d718eebd8cb820b0a2c3a347fb971afd9d8\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.1.1/MODULE.bazel\": \"1add3e7d93ff2e6998f9e118022c84d163917d912f5afafb3058e3d2f1545b5e\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.2.0/MODULE.bazel\": \"44fe84260e454ed94ad326352a698422dbe372b21a1ac9f3eab76eb531223686\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.2.1/MODULE.bazel\": \"f35baf9da0efe45fa3da1696ae906eea3d615ad41e2e3def4aeb4e8bc0ef9a7a\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.3.0/MODULE.bazel\": \"20228b92868bf5cfc41bda7afc8a8ba2a543201851de39d990ec957b513579c5\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.4.1/MODULE.bazel\": \"a0dcb779424be33100dcae821e9e27e4f2901d9dfd5333efe5ac6a8d7ab75e1d\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.4.2/MODULE.bazel\": \"3bd40978e7a1fac911d5989e6b09d8f64921865a45822d8b09e815eaa726a651\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.5.0/MODULE.bazel\": \"32880f5e2945ce6a03d1fbd588e9198c0a959bb42297b2cfaf1685b7bc32e138\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.6.1/MODULE.bazel\": \"8fdee2dbaace6c252131c00e1de4b165dc65af02ea278476187765e1a617b917\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.7.0/MODULE.bazel\": \"0db596f4563de7938de764cc8deeabec291f55e8ec15299718b93c4423e9796d\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.7.1/MODULE.bazel\": \"3120d80c5861aa616222ec015332e5f8d3171e062e3e804a2a0253e1be26e59b\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.7.1/source.json\": \"f121b43eeefc7c29efbd51b83d08631e2347297c95aac9764a701f2a6a2bb953\",\n    \"https://bcr.bazel.build/modules/brotli/1.1.0/MODULE.bazel\": \"3b5b90488995183419c4b5c9b063a164f6c0bc4d0d6b40550a612a5e860cc0fe\",\n    \"https://bcr.bazel.build/modules/brotli/1.1.0/source.json\": \"098a4fd315527166e8dfe1fd1537c96a737a83764be38fc43f4da231d600f3d0\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/MODULE.bazel\": \"2e8dd40ede9c454042645fd8d8d0cd1527966aa5c919de86661e62953cd73d84\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/source.json\": \"c9028a501d2db85793a6996205c8de120944f50a0d570438fcae0457a5f9d1f8\",\n    \"https://bcr.bazel.build/modules/giflib/5.2.1/MODULE.bazel\": \"810dbc4275425c89ffe648dd78c537fe2eb1d2a9704d10e950b295263af03366\",\n    \"https://bcr.bazel.build/modules/giflib/5.2.1/source.json\": \"94215af981976c329eaec0083727b155ea89607e61debea50ed508e7963ef9a6\",\n    \"https://bcr.bazel.build/modules/google_benchmark/1.8.2/MODULE.bazel\": \"a70cf1bba851000ba93b58ae2f6d76490a9feb74192e57ab8e8ff13c34ec50cb\",\n    \"https://bcr.bazel.build/modules/googletest/1.11.0/MODULE.bazel\": \"3a83f095183f66345ca86aa13c58b59f9f94a2f81999c093d4eeaa2d262d12f4\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0.bcr.1/MODULE.bazel\": \"22c31a561553727960057361aa33bf20fb2e98584bc4fec007906e27053f80c6\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0/MODULE.bazel\": \"cfbcbf3e6eac06ef9d85900f64424708cc08687d1b527f0ef65aa7517af8118f\",\n    \"https://bcr.bazel.build/modules/googletest/1.15.2/MODULE.bazel\": \"6de1edc1d26cafb0ea1a6ab3f4d4192d91a312fd2d360b63adaa213cd00b2108\",\n    \"https://bcr.bazel.build/modules/googletest/1.15.2/source.json\": \"dbdda654dcb3a0d7a8bc5d0ac5fc7e150b58c2a986025ae5bc634bb2cb61f470\",\n    \"https://bcr.bazel.build/modules/imath/3.1.9/MODULE.bazel\": \"26fe47ee8137a4c605667fb0d26a5c12b8fb2e758824a376789b287b2f9d424d\",\n    \"https://bcr.bazel.build/modules/imath/3.1.9/source.json\": \"22b7d9e617d4d26626f5ac8fba3cd2bd7a87f7501c99fa847f8d9e2980416e8f\",\n    \"https://bcr.bazel.build/modules/jsoncpp/1.9.5/MODULE.bazel\": \"31271aedc59e815656f5736f282bb7509a97c7ecb43e927ac1a37966e0578075\",\n    \"https://bcr.bazel.build/modules/jsoncpp/1.9.5/source.json\": \"4108ee5085dd2885a341c7fab149429db457b3169b86eb081fa245eadf69169d\",\n    \"https://bcr.bazel.build/modules/libdeflate/1.19/MODULE.bazel\": \"b7396a2edfd5ce6669509fbdd10db5e8731d60954063699c546c3126c8156824\",\n    \"https://bcr.bazel.build/modules/libdeflate/1.19/source.json\": \"d4604a526efba9b5347309de49673bbe152da465f7c80c7f7ffe6800d8b504d1\",\n    \"https://bcr.bazel.build/modules/libjpeg_turbo/2.1.91/MODULE.bazel\": \"bcc23b7c4866af2d7777ee49db435603ca1e35b90ea0689f8051900fa8c73c6b\",\n    \"https://bcr.bazel.build/modules/libjpeg_turbo/2.1.91/source.json\": \"42ea85708058e2408f229075e1cbeaad13fa2719918ff9c505be5e22b57ef17b\",\n    \"https://bcr.bazel.build/modules/libpfm/4.11.0/MODULE.bazel\": \"45061ff025b301940f1e30d2c16bea596c25b176c8b6b3087e92615adbd52902\",\n    \"https://bcr.bazel.build/modules/libpng/1.6.40/MODULE.bazel\": \"cc1952a9b5efd4df3dfdb9f9ba2b1c8d88b4fd9b0e474185cb81d90a31c7c453\",\n    \"https://bcr.bazel.build/modules/libpng/1.6.40/source.json\": \"2fe294bf161c2d3f1e04e7cecb6eb2e6c0c198698b23cabc1c4e6ff77d82a86a\",\n    \"https://bcr.bazel.build/modules/libwebp/1.3.2/MODULE.bazel\": \"c60edf34a913daebac9bd2cbe17b84048e4a7a5d3571f70be93c1b1227a69659\",\n    \"https://bcr.bazel.build/modules/libwebp/1.3.2/source.json\": \"e7b8d3047ad9758fda22fcf46bd8b57414b0eb5e7903f4ce888683d778633cf7\",\n    \"https://bcr.bazel.build/modules/openexr/3.2.1/MODULE.bazel\": \"5665fa95490825760943601d618e2d70eb45378ea3f2961c5ec18f23ae8a2106\",\n    \"https://bcr.bazel.build/modules/openexr/3.2.1/source.json\": \"afc17dda6614ff723cc1def634fa4f33534d3d29514b089fa4aa5eb47ba1c65b\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.10/MODULE.bazel\": \"8cb8efaf200bdeb2150d93e162c40f388529a25852b332cec879373771e48ed5\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.10/source.json\": \"f22828ff4cf021a6b577f1bf6341cb9dcd7965092a439f64fc1bb3b7a5ae4bd5\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.4/MODULE.bazel\": \"9b328e31ee156f53f3c416a64f8491f7eb731742655a47c9eec4703a71644aee\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.5/MODULE.bazel\": \"5733b54ea419d5eaf7997054bb55f6a1d0b5ff8aedf0176fef9eea44f3acda37\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.6/MODULE.bazel\": \"ad6eeef431dc52aefd2d77ed20a4b353f8ebf0f4ecdd26a807d2da5aa8cd0615\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.7/MODULE.bazel\": \"72fd4a0ede9ee5c021f6a8dd92b503e089f46c227ba2813ff183b71616034814\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.8/MODULE.bazel\": \"9f142c03e348f6d263719f5074b21ef3adf0b139ee4c5133e2aa35664da9eb2d\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.9/MODULE.bazel\": \"4a87a60c927b56ddd67db50c89acaa62f4ce2a1d2149ccb63ffd871d5ce29ebc\",\n    \"https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel\": \"a5a29bb89544f9b97edce05642fac225a808b5b7be74038ea3640fae2f8e66a7\",\n    \"https://bcr.bazel.build/modules/protobuf/27.0/MODULE.bazel\": \"7873b60be88844a0a1d8f80b9d5d20cfbd8495a689b8763e76c6372998d3f64c\",\n    \"https://bcr.bazel.build/modules/protobuf/27.1/MODULE.bazel\": \"703a7b614728bb06647f965264967a8ef1c39e09e8f167b3ca0bb1fd80449c0d\",\n    \"https://bcr.bazel.build/modules/protobuf/29.0-rc2/MODULE.bazel\": \"6241d35983510143049943fc0d57937937122baf1b287862f9dc8590fc4c37df\",\n    \"https://bcr.bazel.build/modules/protobuf/29.0/MODULE.bazel\": \"319dc8bf4c679ff87e71b1ccfb5a6e90a6dbc4693501d471f48662ac46d04e4e\",\n    \"https://bcr.bazel.build/modules/protobuf/29.0/source.json\": \"b857f93c796750eef95f0d61ee378f3420d00ee1dd38627b27193aa482f4f981\",\n    \"https://bcr.bazel.build/modules/protobuf/3.19.0/MODULE.bazel\": \"6b5fbb433f760a99a22b18b6850ed5784ef0e9928a72668b66e4d7ccd47db9b0\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.11.1/MODULE.bazel\": \"88af1c246226d87e65be78ed49ecd1e6f5e98648558c14ce99176da041dc378e\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/MODULE.bazel\": \"e6f4c20442eaa7c90d7190d8dc539d0ab422f95c65a57cc59562170c58ae3d34\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/source.json\": \"6900fdc8a9e95866b8c0d4ad4aba4d4236317b5c1cd04c502df3f0d33afed680\",\n    \"https://bcr.bazel.build/modules/re2/2023-09-01/MODULE.bazel\": \"cb3d511531b16cfc78a225a9e2136007a48cf8a677e4264baeab57fe78a80206\",\n    \"https://bcr.bazel.build/modules/re2/2024-07-02/MODULE.bazel\": \"0eadc4395959969297cbcf31a249ff457f2f1d456228c67719480205aa306daa\",\n    \"https://bcr.bazel.build/modules/re2/2024-07-02/source.json\": \"547d0111a9d4f362db32196fef805abbf3676e8d6afbe44d395d87816c1130ca\",\n    \"https://bcr.bazel.build/modules/rules_android/0.1.1/MODULE.bazel\": \"48809ab0091b07ad0182defb787c4c5328bd3a278938415c00a7b69b50c4d3a8\",\n    \"https://bcr.bazel.build/modules/rules_android/0.1.1/source.json\": \"e6986b41626ee10bdc864937ffb6d6bf275bb5b9c65120e6137d56e6331f089e\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.1/MODULE.bazel\": \"cb2aa0747f84c6c3a78dad4e2049c154f08ab9d166b1273835a8174940365647\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.10/MODULE.bazel\": \"ec1705118f7eaedd6e118508d3d26deba2a4e76476ada7e0e3965211be012002\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.13/MODULE.bazel\": \"0e8529ed7b323dad0775ff924d2ae5af7640b23553dfcd4d34344c7e7a867191\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.14/MODULE.bazel\": \"5e343a3aac88b8d7af3b1b6d2093b55c347b8eefc2e7d1442f7a02dc8fea48ac\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.15/MODULE.bazel\": \"6704c35f7b4a72502ee81f61bf88706b54f06b3cbe5558ac17e2e14666cd5dcc\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.16/MODULE.bazel\": \"7661303b8fc1b4d7f532e54e9d6565771fea666fbdf839e0a86affcd02defe87\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.16/source.json\": \"227e83737046aa4f50015da48e98e0d8ab42fd0ec74d8d653b6cc9f9a357f200\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.2/MODULE.bazel\": \"6915987c90970493ab97393024c156ea8fb9f3bea953b2f3ec05c34f19b5695c\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.6/MODULE.bazel\": \"abf360251023dfe3efcef65ab9d56beefa8394d4176dd29529750e1c57eaa33f\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.8/MODULE.bazel\": \"964c85c82cfeb6f3855e6a07054fdb159aced38e99a5eecf7bce9d53990afa3e\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel\": \"836e76439f354b89afe6a911a7adf59a6b2518fafb174483ad78a2a2fde7b1c5\",\n    \"https://bcr.bazel.build/modules/rules_foreign_cc/0.9.0/MODULE.bazel\": \"c9e8c682bf75b0e7c704166d79b599f93b72cfca5ad7477df596947891feeef6\",\n    \"https://bcr.bazel.build/modules/rules_fuzzing/0.5.2/MODULE.bazel\": \"40c97d1144356f52905566c55811f13b299453a14ac7769dfba2ac38192337a8\",\n    \"https://bcr.bazel.build/modules/rules_fuzzing/0.5.2/source.json\": \"c8b1e2c717646f1702290959a3302a178fb639d987ab61d548105019f11e527e\",\n    \"https://bcr.bazel.build/modules/rules_java/4.0.0/MODULE.bazel\": \"5a78a7ae82cd1a33cef56dc578c7d2a46ed0dca12643ee45edbb8417899e6f74\",\n    \"https://bcr.bazel.build/modules/rules_java/5.3.5/MODULE.bazel\": \"a4ec4f2db570171e3e5eb753276ee4b389bae16b96207e9d3230895c99644b86\",\n    \"https://bcr.bazel.build/modules/rules_java/6.0.0/MODULE.bazel\": \"8a43b7df601a7ec1af61d79345c17b31ea1fedc6711fd4abfd013ea612978e39\",\n    \"https://bcr.bazel.build/modules/rules_java/6.4.0/MODULE.bazel\": \"e986a9fe25aeaa84ac17ca093ef13a4637f6107375f64667a15999f77db6c8f6\",\n    \"https://bcr.bazel.build/modules/rules_java/6.5.2/MODULE.bazel\": \"1d440d262d0e08453fa0c4d8f699ba81609ed0e9a9a0f02cd10b3e7942e61e31\",\n    \"https://bcr.bazel.build/modules/rules_java/7.10.0/MODULE.bazel\": \"530c3beb3067e870561739f1144329a21c851ff771cd752a49e06e3dc9c2e71a\",\n    \"https://bcr.bazel.build/modules/rules_java/7.12.2/MODULE.bazel\": \"579c505165ee757a4280ef83cda0150eea193eed3bef50b1004ba88b99da6de6\",\n    \"https://bcr.bazel.build/modules/rules_java/7.2.0/MODULE.bazel\": \"06c0334c9be61e6cef2c8c84a7800cef502063269a5af25ceb100b192453d4ab\",\n    \"https://bcr.bazel.build/modules/rules_java/7.3.2/MODULE.bazel\": \"50dece891cfdf1741ea230d001aa9c14398062f2b7c066470accace78e412bc2\",\n    \"https://bcr.bazel.build/modules/rules_java/7.6.1/MODULE.bazel\": \"2f14b7e8a1aa2f67ae92bc69d1ec0fa8d9f827c4e17ff5e5f02e91caa3b2d0fe\",\n    \"https://bcr.bazel.build/modules/rules_java/8.6.1/MODULE.bazel\": \"f4808e2ab5b0197f094cabce9f4b006a27766beb6a9975931da07099560ca9c2\",\n    \"https://bcr.bazel.build/modules/rules_java/8.6.1/source.json\": \"f18d9ad3c4c54945bf422ad584fa6c5ca5b3116ff55a5b1bc77e5c1210be5960\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\": \"a56b85e418c83eb1839819f0b515c431010160383306d13ec21959ac412d2fe7\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel\": \"33f6f999e03183f7d088c9be518a63467dfd0be94a11d0055fe2d210f89aa909\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/5.2/MODULE.bazel\": \"d9351ba35217ad0de03816ef3ed63f89d411349353077348a45348b096615036\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/5.3/MODULE.bazel\": \"bf93870767689637164657731849fb887ad086739bd5d360d90007a581d5527d\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/6.1/MODULE.bazel\": \"75b5fec090dbd46cf9b7d8ea08cf84a0472d92ba3585b476f44c326eda8059c4\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/6.3/MODULE.bazel\": \"c998e060b85f71e00de5ec552019347c8bca255062c990ac02d051bb80a38df0\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/6.3/source.json\": \"6f5f5a5a4419ae4e37c35a5bb0a6ae657ed40b7abc5a5189111b47fcebe43197\",\n    \"https://bcr.bazel.build/modules/rules_kotlin/1.9.0/MODULE.bazel\": \"ef85697305025e5a61f395d4eaede272a5393cee479ace6686dba707de804d59\",\n    \"https://bcr.bazel.build/modules/rules_kotlin/1.9.6/MODULE.bazel\": \"d269a01a18ee74d0335450b10f62c9ed81f2321d7958a2934e44272fe82dcef3\",\n    \"https://bcr.bazel.build/modules/rules_kotlin/1.9.6/source.json\": \"2faa4794364282db7c06600b7e5e34867a564ae91bda7cae7c29c64e9466b7d5\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.3/MODULE.bazel\": \"627e9ab0247f7d1e05736b59dbb1b6871373de5ad31c3011880b4133cafd4bd0\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.7/MODULE.bazel\": \"088fbeb0b6a419005b89cf93fe62d9517c0a2b8bb56af3244af65ecfe37e7d5d\",\n    \"https://bcr.bazel.build/modules/rules_license/1.0.0/MODULE.bazel\": \"a7fda60eefdf3d8c827262ba499957e4df06f659330bbe6cdbdb975b768bb65c\",\n    \"https://bcr.bazel.build/modules/rules_license/1.0.0/source.json\": \"a52c89e54cc311196e478f8382df91c15f7a2bfdf4c6cd0e2675cc2ff0b56efb\",\n    \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/MODULE.bazel\": \"df99f03fc7934a4737122518bb87e667e62d780b610910f0447665a7e2be62dc\",\n    \"https://bcr.bazel.build/modules/rules_pkg/1.0.1/MODULE.bazel\": \"5b1df97dbc29623bccdf2b0dcd0f5cb08e2f2c9050aab1092fd39a41e82686ff\",\n    \"https://bcr.bazel.build/modules/rules_pkg/1.0.1/source.json\": \"bd82e5d7b9ce2d31e380dd9f50c111d678c3bdaca190cb76b0e1c71b05e1ba8a\",\n    \"https://bcr.bazel.build/modules/rules_proto/4.0.0/MODULE.bazel\": \"a7a7b6ce9bee418c1a760b3d84f83a299ad6952f9903c67f19e4edd964894e06\",\n    \"https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/MODULE.bazel\": \"e8dff86b0971688790ae75528fe1813f71809b5afd57facb44dad9e8eca631b7\",\n    \"https://bcr.bazel.build/modules/rules_proto/6.0.0-rc1/MODULE.bazel\": \"1e5b502e2e1a9e825eef74476a5a1ee524a92297085015a052510b09a1a09483\",\n    \"https://bcr.bazel.build/modules/rules_proto/6.0.2/MODULE.bazel\": \"ce916b775a62b90b61888052a416ccdda405212b6aaeb39522f7dc53431a5e73\",\n    \"https://bcr.bazel.build/modules/rules_proto/7.0.2/MODULE.bazel\": \"bf81793bd6d2ad89a37a40693e56c61b0ee30f7a7fdbaf3eabbf5f39de47dea2\",\n    \"https://bcr.bazel.build/modules/rules_proto/7.0.2/source.json\": \"1e5e7260ae32ef4f2b52fd1d0de8d03b606a44c91b694d2f1afb1d3b28a48ce1\",\n    \"https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel\": \"cc82bc96f2997baa545ab3ce73f196d040ffb8756fd2d66125a530031cd90e5f\",\n    \"https://bcr.bazel.build/modules/rules_python/0.23.1/MODULE.bazel\": \"49ffccf0511cb8414de28321f5fcf2a31312b47c40cc21577144b7447f2bf300\",\n    \"https://bcr.bazel.build/modules/rules_python/0.25.0/MODULE.bazel\": \"72f1506841c920a1afec76975b35312410eea3aa7b63267436bfb1dd91d2d382\",\n    \"https://bcr.bazel.build/modules/rules_python/0.28.0/MODULE.bazel\": \"cba2573d870babc976664a912539b320cbaa7114cd3e8f053c720171cde331ed\",\n    \"https://bcr.bazel.build/modules/rules_python/0.31.0/MODULE.bazel\": \"93a43dc47ee570e6ec9f5779b2e64c1476a6ce921c48cc9a1678a91dd5f8fd58\",\n    \"https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel\": \"3e036c4ad8d804a4dad897d333d8dce200d943df4827cb849840055be8d2e937\",\n    \"https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel\": \"9208ee05fd48bf09ac60ed269791cf17fb343db56c8226a720fbb1cdf467166c\",\n    \"https://bcr.bazel.build/modules/rules_python/0.40.0/MODULE.bazel\": \"9d1a3cd88ed7d8e39583d9ffe56ae8a244f67783ae89b60caafc9f5cf318ada7\",\n    \"https://bcr.bazel.build/modules/rules_python/0.40.0/source.json\": \"939d4bd2e3110f27bfb360292986bb79fd8dcefb874358ccd6cdaa7bda029320\",\n    \"https://bcr.bazel.build/modules/rules_shell/0.2.0/MODULE.bazel\": \"fda8a652ab3c7d8fee214de05e7a9916d8b28082234e8d2c0094505c5268ed3c\",\n    \"https://bcr.bazel.build/modules/rules_shell/0.2.0/source.json\": \"7f27af3c28037d9701487c4744b5448d26537cc66cdef0d8df7ae85411f8de95\",\n    \"https://bcr.bazel.build/modules/skcms/20241202.0.bcr.1/MODULE.bazel\": \"9a1f00dd0038c3f502e59e2f2f0e3f7c6261ccf20338cca2fd9d7c9688ad8eee\",\n    \"https://bcr.bazel.build/modules/skcms/20241202.0.bcr.1/source.json\": \"add631be7b1b03b796e805034513d68edf20a97e5dbc7e6f8210d0e90f3ff655\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.1/MODULE.bazel\": \"1a05d92974d0c122f5ccf09291442580317cdd859f07a8655f1db9a60374f9f8\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.3/MODULE.bazel\": \"c7f6948dae6999bf0db32c1858ae345f112cacf98f174c7a8bb707e41b974f1c\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.6/MODULE.bazel\": \"c43dabc564990eeab55e25ed61c07a1aadafe9ece96a4efabb3f8bf9063b71ef\",\n    \"https://bcr.bazel.build/modules/stardoc/0.7.0/MODULE.bazel\": \"05e3d6d30c099b6770e97da986c53bd31844d7f13d41412480ea265ac9e8079c\",\n    \"https://bcr.bazel.build/modules/stardoc/0.7.1/MODULE.bazel\": \"3548faea4ee5dda5580f9af150e79d0f6aea934fc60c1cc50f4efdd9420759e7\",\n    \"https://bcr.bazel.build/modules/stardoc/0.7.1/source.json\": \"b6500ffcd7b48cd72c29bb67bcac781e12701cc0d6d55d266a652583cfcdab01\",\n    \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/MODULE.bazel\": \"7298990c00040a0e2f121f6c32544bab27d4452f80d9ce51349b1a28f3005c43\",\n    \"https://bcr.bazel.build/modules/zlib/1.2.11/MODULE.bazel\": \"07b389abc85fdbca459b69e2ec656ae5622873af3f845e1c9d80fe179f3effa0\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/MODULE.bazel\": \"af322bc08976524477c79d1e45e241b6efbeb918c497e8840b8ab116802dda79\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/source.json\": \"2be409ac3c7601245958cd4fcdff4288be79ed23bd690b4b951f500d54ee6e7d\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1/MODULE.bazel\": \"751c9940dcfe869f5f7274e1295422a34623555916eb98c174c1e945594bf198\",\n    \"https://bcr.bazel.build/modules/zlib/1.3/MODULE.bazel\": \"6a9c02f19a24dcedb05572b2381446e27c272cd383aed11d41d99da9e3167a72\"\n  },\n  \"selectedYankedVersions\": {},\n  \"moduleExtensions\": {\n    \"@@apple_support+//crosstool:setup.bzl%apple_cc_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"pd/h9zu+PbVBnRwZ3tnvvnAydlf0zxd9Ov95CD7vJIM=\",\n        \"usagesDigest\": \"aYRVMk+1OupIp+5hdBlpzT36qgd6ntgSxYTzMLW5K4U=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_apple_cc_toolchains\": {\n            \"repoRuleId\": \"@@apple_support+//crosstool:setup.bzl%_apple_cc_autoconf_toolchains\",\n            \"attributes\": {}\n          },\n          \"local_config_apple_cc\": {\n            \"repoRuleId\": \"@@apple_support+//crosstool:setup.bzl%_apple_cc_autoconf\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"apple_support+\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ],\n          [\n            \"bazel_tools\",\n            \"rules_cc\",\n            \"rules_cc+\"\n          ]\n        ]\n      }\n    },\n    \"@@platforms//host:extension.bzl%host_platform\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"xelQcPZH8+tmuOHVjL9vDxMnnQNMlwj0SlvgoqBkm4U=\",\n        \"usagesDigest\": \"SeQiIN/f8/Qt9vYQk7qcXp4I4wJeEC0RnQDiaaJ4tb8=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"host_platform\": {\n            \"repoRuleId\": \"@@platforms//host:extension.bzl%host_platform_repo\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": []\n      }\n    },\n    \"@@rules_java+//java:rules_java_deps.bzl%compatibility_proxy\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"84xJEZ1jnXXwo8BXMprvBm++rRt4jsTu9liBxz0ivps=\",\n        \"usagesDigest\": \"jTQDdLDxsS43zuRmg1faAjIEPWdLAbDAowI1pInQSoo=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"compatibility_proxy\": {\n            \"repoRuleId\": \"@@rules_java+//java:rules_java_deps.bzl%_compatibility_proxy_repo_rule\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"rules_java+\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    },\n    \"@@rules_kotlin+//src/main/starlark/core/repositories:bzlmod_setup.bzl%rules_kotlin_extensions\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"sFhcgPbDQehmbD1EOXzX4H1q/CD5df8zwG4kp4jbvr8=\",\n        \"usagesDigest\": \"QI2z8ZUR+mqtbwsf2fLqYdJAkPOHdOV+tF2yVAUgRzw=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"com_github_jetbrains_kotlin_git\": {\n            \"repoRuleId\": \"@@rules_kotlin+//src/main/starlark/core/repositories:compiler.bzl%kotlin_compiler_git_repository\",\n            \"attributes\": {\n              \"urls\": [\n                \"https://github.com/JetBrains/kotlin/releases/download/v1.9.23/kotlin-compiler-1.9.23.zip\"\n              ],\n              \"sha256\": \"93137d3aab9afa9b27cb06a824c2324195c6b6f6179d8a8653f440f5bd58be88\"\n            }\n          },\n          \"com_github_jetbrains_kotlin\": {\n            \"repoRuleId\": \"@@rules_kotlin+//src/main/starlark/core/repositories:compiler.bzl%kotlin_capabilities_repository\",\n            \"attributes\": {\n              \"git_repository_name\": \"com_github_jetbrains_kotlin_git\",\n              \"compiler_version\": \"1.9.23\"\n            }\n          },\n          \"com_github_google_ksp\": {\n            \"repoRuleId\": \"@@rules_kotlin+//src/main/starlark/core/repositories:ksp.bzl%ksp_compiler_plugin_repository\",\n            \"attributes\": {\n              \"urls\": [\n                \"https://github.com/google/ksp/releases/download/1.9.23-1.0.20/artifacts.zip\"\n              ],\n              \"sha256\": \"ee0618755913ef7fd6511288a232e8fad24838b9af6ea73972a76e81053c8c2d\",\n              \"strip_version\": \"1.9.23-1.0.20\"\n            }\n          },\n          \"com_github_pinterest_ktlint\": {\n            \"repoRuleId\": \"@@bazel_tools//tools/build_defs/repo:http.bzl%http_file\",\n            \"attributes\": {\n              \"sha256\": \"01b2e0ef893383a50dbeb13970fe7fa3be36ca3e83259e01649945b09d736985\",\n              \"urls\": [\n                \"https://github.com/pinterest/ktlint/releases/download/1.3.0/ktlint\"\n              ],\n              \"executable\": true\n            }\n          },\n          \"rules_android\": {\n            \"repoRuleId\": \"@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive\",\n            \"attributes\": {\n              \"sha256\": \"cd06d15dd8bb59926e4d65f9003bfc20f9da4b2519985c27e190cddc8b7a7806\",\n              \"strip_prefix\": \"rules_android-0.1.1\",\n              \"urls\": [\n                \"https://github.com/bazelbuild/rules_android/archive/v0.1.1.zip\"\n              ]\n            }\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"rules_kotlin+\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "PATENTS",
          "type": "blob",
          "size": 1.3017578125,
          "content": "Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the JPEG XL project.\n\nGoogle hereby grants to You a perpetual, worldwide, non-exclusive,\nno-charge, royalty-free, irrevocable (except as stated in this section)\npatent license to make, have made, use, offer to sell, sell, import,\ntransfer and otherwise run, modify and propagate the contents of this\nimplementation of JPEG XL, where such license applies only to those patent\nclaims, both currently owned or controlled by Google and acquired in\nthe future, licensable by Google that are necessarily infringed by this\nimplementation of JPEG XL.  This grant does not include claims that would be\ninfringed only as a consequence of further modification of this\nimplementation.  If you or your agent or exclusive licensee institute or\norder or agree to the institution of patent litigation against any\nentity (including a cross-claim or counterclaim in a lawsuit) alleging\nthat this implementation of JPEG XL or any code incorporated within this\nimplementation of JPEG XL constitutes direct or contributory patent\ninfringement, or inducement of patent infringement, then any patent\nrights granted to you under this License for this implementation of JPEG XL\nshall terminate as of the date such litigation is filed.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6904296875,
          "content": "# JPEG XL reference implementation\n\n[![Build/Test](https://github.com/libjxl/libjxl/actions/workflows/build_test.yml/badge.svg)](\nhttps://github.com/libjxl/libjxl/actions/workflows/build_test.yml)\n[![Build/Test Cross](https://github.com/libjxl/libjxl/actions/workflows/build_test_cross.yml/badge.svg)](\nhttps://github.com/libjxl/libjxl/actions/workflows/build_test_cross.yml)\n[![Conformance](https://github.com/libjxl/libjxl/actions/workflows/conformance.yml/badge.svg)](\nhttps://github.com/libjxl/libjxl/actions/workflows/conformance.yml)\n[![CIFuzz](https://github.com/libjxl/libjxl/actions/workflows/fuzz.yml/badge.svg)](\nhttps://github.com/libjxl/libjxl/actions/workflows/fuzz.yml)\n[![Releases](https://github.com/libjxl/libjxl/actions/workflows/release.yaml/badge.svg)](\nhttps://github.com/libjxl/libjxl/actions/workflows/release.yaml)\n[![Doc](https://readthedocs.org/projects/libjxl/badge/?version=latest)](\nhttps://libjxl.readthedocs.io/en/latest/?badge=latest)\n[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/7845/badge)](\nhttps://www.bestpractices.dev/projects/7845)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/libjxl/libjxl/badge)](\nhttps://securityscorecards.dev/viewer/?uri=github.com/libjxl/libjxl)\n[![codecov](https://codecov.io/gh/libjxl/libjxl/branch/main/graph/badge.svg)](\nhttps://codecov.io/gh/libjxl/libjxl)\n\n<img src=\"doc/jxl.svg\" width=\"100\" align=\"right\" alt=\"JXL logo\">\n\nThis repository contains a reference implementation of JPEG XL (encoder and\ndecoder), called `libjxl`. This software library is\n[used by many applications that support JPEG XL](doc/software_support.md).\n\nJPEG XL was standardized in 2022 as [ISO/IEC 18181](https://jpeg.org/jpegxl/workplan.html).\nThe [core codestream](doc/format_overview.md#codestream-features) is specified in 18181-1,\nthe [file format](doc/format_overview.md#file-format-features) in 18181-2.\n[Decoder conformance](https://github.com/libjxl/conformance) is defined in 18181-3,\nand 18181-4 is the [reference software](https://github.com/libjxl/libjxl).\n\nThe library API, command line options, and tools in this repository are subject\nto change, however files encoded with `cjxl` conform to the JPEG XL specification\nand can be decoded with current and future `djxl` decoders or the `libjxl` decoding library.\n\n## Installation\n\nIn most Linux distributions, installing `libjxl` is just a matter of using the package management system.\nFor example in Debian-based distributions: `apt install libjxl-tools` will install `cjxl` and `djxl`\nand other tools like `benchmark_xl` are available in the package `libjxl-devtools`.\nOn MacOS, you can use [Homebrew](https://brew.sh/): `brew install jpeg-xl`.\n\n[![libjxl packaging status](https://repology.org/badge/vertical-allrepos/libjxl.svg?exclude_unsupported=1&columns=3&exclude_sources=modules,site&header=libjxl%20packaging%20status)](https://repology.org/project/libjxl/versions)\n\nFrom the [releases page](https://github.com/libjxl/libjxl/releases/) the following can be downloaded:\n - Windows binaries \n - Debian and Ubuntu .deb packages \n\nOf course you can also [build libjxl from sources](BUILDING.md).\n\n\n## Usage\n\nTo encode a source image to JPEG XL with default settings:\n\n```bash\ncjxl input.png output.jxl\n```\n\nThe desired visual fidelity can be selected using the `--distance` parameter\n(in units of just-noticeable difference, where 0 is lossless and the most useful lossy range is 0.5 .. 3.0),\nor using `--quality` (on a scale from 0 to 100, roughly matching libjpeg).\nThe [encode effort](doc/encode_effort.md) can be selected using the `--effort` parameter.\n\nFor more settings run `cjxl --help` or for a full list of options\nrun `cjxl -v -v --help`.\n\nTo decode a JPEG XL file run:\n\n```bash\ndjxl input.jxl output.png\n```\n\nWhen possible, `cjxl`/`djxl` are able to read/write the following image formats:\nOpenEXR (`.exr`), GIF (`.gif`), JPEG (`.jpg`/`.jpeg`), NetPBM (`.pam`/`.pgm`/`.ppm`),\nPortable FloatMap (`.pfm`), PGX Test Format (`.pgx`), Portable Network Graphics (`.png`),\nAnimated PNG (`.png`/`.apng`), and JPEG XL itself (`.jxl`).\n\nSpecifically for JPEG files, the default `cjxl` behavior is to apply lossless\nrecompression and the default `djxl` behavior is to reconstruct the original\nJPEG file (when the extension of the output file is `.jpg`).\n\n### Benchmarking\n\nFor speed benchmarks on single images in single or multi-threaded decoding\n`djxl` can print decoding speed information. See `djxl --help` for details\non the decoding options and note that the output image is optional for\nbenchmarking purposes.\n\nFor more comprehensive benchmarking options, see the\n[benchmarking guide](doc/benchmarking.md).\n\n### Library API\n\nBesides the `libjxl` library [API documentation](https://libjxl.readthedocs.io/en/latest/),\nthere are [example applications](examples/) and [plugins](plugins/) that can be used as a reference or\nstarting point for developers who wish to integrate `libjxl` in their project.\n\n\n## License\n\nThis software is available under a 3-clause BSD license which can be found in\nthe [LICENSE](LICENSE) file, with an \"Additional IP Rights Grant\" as outlined in\nthe [PATENTS](PATENTS) file.\n\nPlease note that the PATENTS file only mentions Google since Google is the legal\nentity receiving the Contributor License Agreements (CLA) from all contributors\nto the JPEG XL Project, including the initial main contributors to the JPEG XL\nformat: Cloudinary and Google.\n\n## Additional documentation\n\n### Codec description\n\n*   [JPEG XL Format Overview](doc/format_overview.md)\n*   [Introductory paper](https://www.spiedigitallibrary.org/proceedings/Download?fullDOI=10.1117%2F12.2529237) (open-access)\n*   [XL Overview](doc/xl_overview.md) - a brief introduction to the source code modules\n*   [JPEG XL white paper](https://ds.jpeg.org/whitepapers/jpeg-xl-whitepaper.pdf)\n*   [JPEG XL official website](https://jpeg.org/jpegxl)\n*   [JPEG XL community website](https://jpegxl.info)\n\n### Development process\n\n*   [More information on testing/build options](doc/building_and_testing.md)\n*   [Git guide for JPEG XL](doc/developing_in_github.md) - for developers\n*   [Fuzzing](doc/fuzzing.md) - for developers\n*   [Building Web Assembly artifacts](doc/building_wasm.md)\n*   [Test coverage on Codecov.io](https://app.codecov.io/gh/libjxl/libjxl) - for\n    developers\n*   [libjxl documentation on readthedocs.io](https://libjxl.readthedocs.io/)\n*   The development of jpegli, the improved JPEG encoder and decoder, will continue at https://github.com/google/jpegli\n\n### Contact\n\nIf you encounter a bug or other issue with the software, please open an Issue here.\n\nThere is a [subreddit about JPEG XL](https://www.reddit.com/r/jpegxl/), and\ninformal chatting with developers and early adopters of `libjxl` can be done on the\n[JPEG XL Discord server](https://discord.gg/DqkQgDRTFu).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.15625,
          "content": "# Security and Vulnerability Policy for libjxl\n\n## TL;DR:\n\nCPE prefix: `cpe:2.3:a:libjxl_project:libjxl`\n\nTo report a security issue, please email libjxl-security@google.com.\n\nInclude in your email a description of the issue, the steps you took to create\nthe issue, affected versions, and if known, mitigations for the issue. Our\nvulnerability management team will acknowledge receiving your email within 3\nworking days.\n\nThis project follows a 90 day disclosure timeline.\n\nFor all other bugs, where there are no security implications about disclosing\nthe unpatched bug, open a [new issue](https://github.com/libjxl/libjxl/issues)\nchecking first for existing similar issues. If in doubt about the security\nimpact of a bug you discovered, email first.\n\n## Policy overview\n\nlibjxl's Security Policy is based on the [Google Open Source program\nguidelines](https://github.com/google/oss-vulnerability-guide) for coordinated\nvulnerability disclosure.\n\nEarly versions of `libjxl` had a different security policy that didn't provide\nsecurity and vulnerability disclosure support. Versions up to and including\n0.3.7 are not covered and won't receive any security advisory.\n\nOnly released versions, starting from version 0.5, are covered by this policy.\nDevelopment branches, arbitrary commits from `main` branch or even releases with\nbackported features externally patched on top are not covered. Only those\nversions with a release tag in `libjxl`'s repository are covered, starting from\nversion 0.5.\n\n## What's a \"Security bug\"\n\nA security bug is a bug that can potentially be exploited to let an attacker\ngain unauthorized access or privileges such as disclosing information or\narbitrary code execution. Not all fuzzer-found bugs and not all assert()\nfailures are considered security bugs in libjxl. For a detailed explanation and\nexamples see our [Security Vulnerabilities Playbook](doc/vuln_playbook.md).\n\n## What to expect\n\nTo report a security issue, please email libjxl-security@google.com with all the\ndetails about the bug you encountered.\n\n * Include a description of the issue, steps to reproduce, etc. Compiler\n   versions, flags, exact version used and even CPU are often relevant given our\n   usage of SIMD and run-time dispatch of SIMD instructions.\n\n * A member of our security team will reply to you within 3 business days. Note\n   that business days are different in different countries.\n\n * We will evaluate the issue and we may require more input from your side to\n   reproduce it.\n\n * If the issue fits in the description of a security bug, we will issue a\n   CVE, publish a fix and make a new minor or patch release with it. There is\n   a maximum of 90 day disclosure timeline, we ask you to not publish the\n   details before the 90 day deadline or the release date (whichever comes\n   first).\n\n * In the case that we publish a CVE we will credit the external researcher who\n   reported the issue. When reporting security issues please let us know if you\n   need to include specific information while doing so, like for example a\n   company affiliation.\n\nOur security team follows the [Security Vulnerabilities\nPlaybook](doc/vuln_playbook.md). For more details about the process and policies\nplease take a look at it.\n"
        },
        {
          "name": "bash_test.sh",
          "type": "blob",
          "size": 8.9072265625,
          "content": "#!/bin/bash\n# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Tests implemented in bash. These typically will run checks about the source\n# code rather than the compiled one.\n\nSELF=$(realpath \"$0\")\nMYDIR=$(dirname \"${SELF}\")\n\nset -u\n\ntest_includes() {\n  local ret=0\n  local f\n  for f in $(git ls-files | grep -E '(\\.cc|\\.cpp|\\.h)$'); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    # Check that the full paths to the public headers are not used, since users\n    # of the library will include the library as: #include \"jxl/foobar.h\".\n    if grep -i -H -n -E '#include\\s*[<\"]lib/include/jxl' \"$f\" >&2; then\n      echo \"Don't add \\\"include/\\\" to the include path of public headers.\" >&2\n      ret=1\n    fi\n\n    if [[ \"${f#third_party/}\" == \"$f\" ]]; then\n      # $f is not in third_party/\n\n      # Check that local files don't use the full path to third_party/\n      # directory since the installed versions will not have that path.\n      # Add an exception for third_party/dirent.h.\n      if grep -v -F 'third_party/dirent.h' \"$f\" | \\\n          grep -i -H -n -E '#include\\s*[<\"]third_party/' >&2 &&\n          [[ $ret -eq 0 ]]; then\n        cat >&2 <<EOF\n$f: Don't add third_party/ to the include path of third_party projects. This \\\nmakes it harder to use installed system libraries instead of the third_party/ \\\nones.\nEOF\n        ret=1\n      fi\n    fi\n\n  done\n  return ${ret}\n}\n\ntest_include_collision() {\n  local ret=0\n  local f\n  for f in $(git ls-files | grep -E '^lib/include/'); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    local base=${f#lib/include/}\n    if [[ -e \"lib/${base}\" ]]; then\n      echo \"$f: Name collision, both $f and lib/${base} exist.\" >&2\n      ret=1\n    fi\n  done\n  return ${ret}\n}\n\ntest_copyright() {\n  local ret=0\n  local f\n  for f in $(\n      git ls-files | grep -E \\\n      '(Dockerfile.*|\\.c|\\.cc|\\.cpp|\\.gni|\\.h|\\.java|\\.sh|\\.m|\\.py|\\.ui|\\.yml)$'); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    if [[ \"${f#third_party/}\" == \"$f\" ]]; then\n      # $f is not in third_party/\n      if ! head -n 10 \"$f\" |\n          grep -F 'Copyright (c) the JPEG XL Project Authors.' >/dev/null ; then\n        echo \"$f: Missing Copyright blob near the top of the file.\" >&2\n        ret=1\n      fi\n      if ! head -n 10 \"$f\" |\n          grep -F 'Use of this source code is governed by a BSD-style' \\\n            >/dev/null ; then\n        echo \"$f: Missing License blob near the top of the file.\" >&2\n        ret=1\n      fi\n    fi\n  done\n  return ${ret}\n}\n\n# Check that we don't use \"%zu\" or \"%zd\" in format string for size_t.\ntest_printf_size_t() {\n  local ret=0\n  if grep -n -E '%[0-9]*z[udx]' \\\n      $(git ls-files | grep -E '(\\.c|\\.cc|\\.cpp|\\.h)$'); then\n    echo \"Don't use '%zu' or '%zd' in a format string, instead use \" \\\n      \"'%\\\" PRIuS \\\"' or '%\\\" PRIdS \\\"'.\" >&2\n    ret=1\n  fi\n\n  if grep -n -E '[^_]gtest\\.h' \\\n      $(git ls-files | grep -E '(\\.c|\\.cc|\\.cpp|\\.h)$' | grep -v -F /testing.h); then\n    echo \"Don't include gtest directly, instead include 'testing.h'. \" >&2\n    ret=1\n  fi\n\n  local f\n  for f in $(git ls-files | grep -E \"\\.cc$\" | xargs grep 'PRI[udx]S' |\n      cut -f 1 -d : | uniq); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    if ! grep -F printf_macros.h \"$f\" >/dev/null; then\n      echo \"$f: Add lib/jxl/base/printf_macros.h for PRI.S, or use other \" \\\n        \"types for code outside lib/jxl library.\" >&2\n      ret=1\n    fi\n  done\n\n  for f in $(git ls-files | grep -E \"\\.h$\" | grep -v -E '(printf_macros\\.h|testing\\.h)' |\n      xargs grep -n 'PRI[udx]S'); do\n    # Having PRIuS / PRIdS in a header file means that printf_macros.h may\n    # be included before a system header, in particular before gtest headers.\n    # those may re-define PRIuS unconditionally causing a compile error.\n    echo \"$f: Don't use PRI.S in header files. Sorry.\"\n    ret=1\n  done\n\n  return ${ret}\n}\n\n# Check that \"dec_\" code doesn't depend on \"enc_\" headers.\ntest_dec_enc_deps() {\n  local ret=0\n  local f\n  for f in $(git ls-files | grep -E '/dec_'); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    if [[ \"${f#third_party/}\" == \"$f\" ]]; then\n      # $f is not in third_party/\n      if grep -n -H -E \"#include.*/enc_\" \"$f\" >&2; then\n        echo \"$f: Don't include \\\"enc_*\\\" files from \\\"dec_*\\\" files.\" >&2\n        ret=1\n      fi\n    fi\n  done\n  return ${ret}\n}\n\n# Check for git merge conflict markers.\ntest_merge_conflict() {\n  local ret=0\n  TEXT_FILES='(\\.cc|\\.cpp|\\.h|\\.sh|\\.m|\\.py|\\.md|\\.txt|\\.cmake)$'\n  for f in $(git ls-files | grep -E \"${TEXT_FILES}\"); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    if grep -E '^<<<<<<< ' \"$f\"; then\n      echo \"$f: Found git merge conflict marker. Please resolve.\" >&2\n      ret=1\n    fi\n  done\n  return ${ret}\n}\n\n# Check that the library and the package have the same version. This prevents\n# accidentally having them out of sync.\nget_version() {\n  local varname=$1\n  local line=$(grep -F \"set(${varname} \" lib/CMakeLists.txt | head -n 1)\n  [[ -n \"${line}\" ]]\n  line=\"${line#set(${varname} }\"\n  line=\"${line%)}\"\n  echo \"${line}\"\n}\n\ntest_version() {\n  local major=$(get_version JPEGXL_MAJOR_VERSION)\n  local minor=$(get_version JPEGXL_MINOR_VERSION)\n  local patch=$(get_version JPEGXL_PATCH_VERSION)\n  # Check that the version is not empty\n  if [[ -z \"${major}${minor}${patch}\" ]]; then\n    echo \"Couldn't parse version from CMakeLists.txt\" >&2\n    return 1\n  fi\n  local pkg_version=$(head -n 1 debian/changelog)\n  # Get only the part between the first \"jpeg-xl (\" and the following \")\".\n  pkg_version=\"${pkg_version#jpeg-xl (}\"\n  pkg_version=\"${pkg_version%%)*}\"\n  if [[ -z \"${pkg_version}\" ]]; then\n    echo \"Couldn't parse version from debian package\" >&2\n    return 1\n  fi\n\n  local lib_version=\"${major}.${minor}.${patch}\"\n  lib_version=\"${lib_version%.0}\"\n  if [[ \"${pkg_version}\" != \"${lib_version}\"* ]]; then\n    echo \"Debian package version (${pkg_version}) doesn't match library\" \\\n      \"version (${lib_version}).\" >&2\n    return 1\n  fi\n  return 0\n}\n\n# Check that the SHA versions in deps.sh matches the git submodules.\ntest_deps_version() {\n  while IFS= read -r line; do\n    if [[ \"${line:0:10}\" != \"[submodule\" ]]; then\n      continue\n    fi\n    line=\"${line#[submodule \\\"}\"\n    line=\"${line%\\\"]}\"\n    local varname=$(tr '[:lower:]' '[:upper:]' <<< \"${line}\")\n    varname=\"${varname/\\//_}\"\n    if ! grep -F \"${varname}=\" deps.sh >/dev/null; then\n      # Ignoring submodule not in deps.sh\n      continue\n    fi\n    local deps_sha=$(grep -F \"${varname}=\" deps.sh | cut -f 2 -d '\"')\n    [[ -n \"${deps_sha}\" ]]\n    local git_sha=$(git ls-tree -r HEAD \"${line}\" | cut -f 1 | cut -f 3 -d ' ')\n    if [[ \"${deps_sha}\" != \"${git_sha}\" ]]; then\n      cat >&2 <<EOF\ndeps.sh: SHA for project ${line} is at ${deps_sha} but the git submodule is at\n${git_sha}. Please update deps.sh\n\nIf you did not intend to change the submodule's SHA value, it is possible that\nyou accidentally included this change in your commit after a rebase or checkout\nwithout running \"git submodule --init\". To revert the submodule change run from\nthe top checkout directory:\n\n  git -C ${line} checkout ${deps_sha}\n  git commit --amend ${line}\n\nEOF\n      return 1\n    fi\n  done < .gitmodules\n}\n\n# Make sure that all the Fields objects are fuzzed directly.\ntest_fuzz_fields() {\n  local ret=0\n  # List all the classes of the form \"ClassName : public Fields\".\n  # This doesn't catch class names that are too long to fit.\n  local field_classes=$( git ls-files |\n    grep -E '\\.(cc|h)' | grep -v 'test\\.cc$' |\n    xargs grep -h -o -E '\\b[^ ]+ : public Fields' | cut -f 1 -d ' ')\n  local classname\n  for classname in ${field_classes}; do\n    if [ ! -e \"$classname\" ]; then\n      continue\n    fi\n    if ! grep -E \"\\\\b${classname}\\\\b\" tools/fields_fuzzer.cc >/dev/null; then\n      cat >&2 <<EOF\ntools/fields_fuzzer.cc: Class ${classname} not found in the fields_fuzzer.\nEOF\n      ret=1\n    fi\n  done\n  return $ret\n}\n\n# Test that we don't use %n in C++ code to avoid using it in printf and scanf.\n# This test is not very precise but in cases where \"module n\" is needed we would\n# normally have \"% n\" instead of \"%n\". Using %n is not allowed in Android 10+.\ntest_percent_n() {\n  local ret=0\n  local f\n  for f in $(git ls-files | grep -E '(\\.cc|\\.cpp|\\.h)$'); do\n    if [ ! -e \"$f\" ]; then\n      continue\n    fi\n    if grep -i -H -n -E '%h*n' \"$f\" >&2; then\n      echo \"Don't use \\\"%n\\\".\" >&2\n      ret=1\n    fi\n  done\n  return ${ret}\n}\n\nmain() {\n  local ret=0\n  cd \"${MYDIR}\"\n\n  if ! git rev-parse >/dev/null 2>/dev/null; then\n    echo \"Not a git checkout, skipping bash_test\"\n    return 0\n  fi\n\n  IFS=$'\\n'\n  for f in $(declare -F); do\n    local test_name=$(echo \"$f\" | cut -f 3 -d ' ')\n    # Runs all the local bash functions that start with \"test_\".\n    if [[ \"${test_name}\" == test_* ]]; then\n      echo \"Test ${test_name}: Start\"\n      if ${test_name}; then\n        echo \"Test ${test_name}: PASS\"\n      else\n        echo \"Test ${test_name}: FAIL\"\n        ret=1\n      fi\n    fi\n  done\n  return ${ret}\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 50.1142578125,
          "content": "#!/usr/bin/env bash\n# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Continuous integration helper module. This module is meant to be called from\n# workflows during the continuous integration build, as well as from the\n# command line for developers.\n\nset -eu\n\nOS=`uname -s`\n\nSELF=$(realpath \"$0\")\nMYDIR=$(dirname \"${SELF}\")\n\n### Environment parameters:\nTEST_STACK_LIMIT=\"${TEST_STACK_LIMIT:-256}\"\nBENCHMARK_NUM_THREADS=\"${BENCHMARK_NUM_THREADS:-0}\"\nBUILD_CONFIG=${BUILD_CONFIG:-}\nCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-RelWithDebInfo}\nCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:-}\nCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER:-}\nCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER:-}\nCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM:-}\nSKIP_BUILD=\"${SKIP_BUILD:-0}\"\nSKIP_TEST=\"${SKIP_TEST:-0}\"\nFASTER_MSAN_BUILD=\"${FASTER_MSAN_BUILD:-0}\"\nTARGETS=\"${TARGETS:-all doc}\"\nTEST_SELECTOR=\"${TEST_SELECTOR:-}\"\nBUILD_TARGET=\"${BUILD_TARGET:-}\"\nENABLE_WASM_SIMD=\"${ENABLE_WASM_SIMD:-0}\"\nif [[ -n \"${BUILD_TARGET}\" ]]; then\n  BUILD_DIR=\"${BUILD_DIR:-${MYDIR}/build-${BUILD_TARGET%%-*}}\"\nelse\n  BUILD_DIR=\"${BUILD_DIR:-${MYDIR}/build}\"\nfi\n# Whether we should post a message in the MR when the build fails.\nPOST_MESSAGE_ON_ERROR=\"${POST_MESSAGE_ON_ERROR:-1}\"\n# By default, do a lightweight debian HWY package build.\nHWY_PKG_OPTIONS=\"${HWY_PKG_OPTIONS:---set-envvar=HWY_EXTRA_CONFIG=-DBUILD_TESTING=OFF -DHWY_ENABLE_EXAMPLES=OFF -DHWY_ENABLE_CONTRIB=OFF}\"\n\n# Set default compilers to clang if not already set\nexport CC=${CC:-clang}\nexport CXX=${CXX:-clang++}\n\n# Time limit for the \"fuzz\" command in seconds (0 means no limit).\nFUZZER_MAX_TIME=\"${FUZZER_MAX_TIME:-0}\"\n\nSANITIZER=\"none\"\n\n\nif [[ \"${BUILD_TARGET%%-*}\" == \"x86_64\" ||\n    \"${BUILD_TARGET%%-*}\" == \"i686\" ]]; then\n  # Default to building all targets, even if compiler baseline is SSE4\n  HWY_BASELINE_TARGETS=${HWY_BASELINE_TARGETS:-HWY_EMU128}\nelse\n  HWY_BASELINE_TARGETS=${HWY_BASELINE_TARGETS:-}\nfi\n\n# Convenience flag to pass both CMAKE_C_FLAGS and CMAKE_CXX_FLAGS\nCMAKE_FLAGS=${CMAKE_FLAGS:-}\nCMAKE_C_FLAGS=\"${CMAKE_C_FLAGS:-} ${CMAKE_FLAGS}\"\nCMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS:-} ${CMAKE_FLAGS}\"\n\nCMAKE_CROSSCOMPILING_EMULATOR=${CMAKE_CROSSCOMPILING_EMULATOR:-}\nCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS:-}\nCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH:-}\nCMAKE_MODULE_LINKER_FLAGS=${CMAKE_MODULE_LINKER_FLAGS:-}\nCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS:-}\nCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE:-}\n\nif [[ \"${ENABLE_WASM_SIMD}\" -ne \"0\" ]]; then\n  CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} -msimd128\"\n  CMAKE_C_FLAGS=\"${CMAKE_C_FLAGS} -msimd128\"\n  CMAKE_EXE_LINKER_FLAGS=\"${CMAKE_EXE_LINKER_FLAGS} -msimd128\"\nfi\n\nif [[ \"${ENABLE_WASM_SIMD}\" -eq \"2\" ]]; then\n  CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} -DHWY_WANT_WASM2\"\n  CMAKE_C_FLAGS=\"${CMAKE_C_FLAGS} -DHWY_WANT_WASM2\"\nfi\n\nif [[ -z \"${BUILD_CONFIG}\" ]]; then\n  TOOLS_DIR=\"${BUILD_DIR}/tools\"\nelse\n  TOOLS_DIR=\"${BUILD_DIR}/tools/${BUILD_CONFIG}\"\nfi\n\nif [[ ! -z \"${HWY_BASELINE_TARGETS}\" ]]; then\n  CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} -DHWY_BASELINE_TARGETS=${HWY_BASELINE_TARGETS}\"\nfi\n\n# Version inferred from the CI variables.\nCI_COMMIT_SHA=${GITHUB_SHA:-}\nJPEGXL_VERSION=${JPEGXL_VERSION:-}\n\n# Benchmark parameters\nSTORE_IMAGES=${STORE_IMAGES:-1}\nBENCHMARK_CORPORA=\"${MYDIR}/third_party/corpora\"\n\n# Local flags passed to sanitizers.\nUBSAN_FLAGS=(\n  -fsanitize=alignment\n  -fsanitize=bool\n  -fsanitize=bounds\n  -fsanitize=builtin\n  -fsanitize=enum\n  -fsanitize=float-cast-overflow\n  -fsanitize=float-divide-by-zero\n  -fsanitize=integer-divide-by-zero\n  -fsanitize=null\n  -fsanitize=object-size\n  -fsanitize=pointer-overflow\n  -fsanitize=return\n  -fsanitize=returns-nonnull-attribute\n  -fsanitize=shift-base\n  -fsanitize=shift-exponent\n  -fsanitize=unreachable\n  -fsanitize=vla-bound\n\n  -fno-sanitize-recover=undefined\n  # Brunsli uses unaligned accesses to uint32_t, so alignment is just a warning.\n  -fsanitize-recover=alignment\n)\n# -fsanitize=function doesn't work on aarch64 and arm.\nif [[ \"${BUILD_TARGET%%-*}\" != \"aarch64\" &&\n    \"${BUILD_TARGET%%-*}\" != \"arm\" ]]; then\n  UBSAN_FLAGS+=(\n    -fsanitize=function\n  )\nfi\nif [[ \"${BUILD_TARGET%%-*}\" != \"arm\" ]]; then\n  UBSAN_FLAGS+=(\n    -fsanitize=signed-integer-overflow\n  )\nfi\n\nCLANG_TIDY_BIN_CANDIDATES=(\n  clang-tidy\n  clang-tidy-6.0\n  clang-tidy-7\n  clang-tidy-8\n  clang-tidy-9\n  clang-tidy-10\n  clang-tidy-11\n  clang-tidy-12\n  clang-tidy-13\n  clang-tidy-14\n  clang-tidy-15\n  clang-tidy-16\n  clang-tidy-17\n  clang-tidy-18\n)\n\nCLANG_TIDY_BIN=${CLANG_TIDY_BIN:-$(which ${CLANG_TIDY_BIN_CANDIDATES[@]} 2>/dev/null | tail -n 1)}\n# Default to \"cat\" if \"colordiff\" is not installed or if stdout is not a tty.\nif [[ -t 1 ]]; then\n  COLORDIFF_BIN=$(which colordiff cat 2>/dev/null | head -n 1)\nelse\n  COLORDIFF_BIN=\"cat\"\nfi\nFIND_BIN=$(which gfind find 2>/dev/null | head -n 1)\n# \"false\" will disable wine64 when not installed. This won't allow\n# cross-compiling.\nWINE_BIN=$(which wine64 false 2>/dev/null | head -n 1)\n\nCLANG_VERSION=\"${CLANG_VERSION:-}\"\n# Detect the clang version suffix and store it in CLANG_VERSION. For example,\n# \"6.0\" for clang 6 or \"7\" for clang 7.\ndetect_clang_version() {\n  if [[ -n \"${CLANG_VERSION}\" ]]; then\n    return 0\n  fi\n  local clang_version=$(\"${CC:-clang}\" --version | head -n1)\n  clang_version=${clang_version#\"Debian \"}\n  clang_version=${clang_version#\"Ubuntu \"}\n  local llvm_tag\n  case \"${clang_version}\" in\n    \"clang version 6.\"*)\n      CLANG_VERSION=\"6.0\"\n      ;;\n    \"clang version \"*)\n      # Any other clang version uses just the major version number.\n      local suffix=\"${clang_version#clang version }\"\n      CLANG_VERSION=\"${suffix%%.*}\"\n      ;;\n    \"emcc\"*)\n      # We can't use asan or msan in the emcc case.\n      ;;\n    *)\n      echo \"Unknown clang version: ${clang_version}\" >&2\n      return 1\n  esac\n}\n\n# Temporary files cleanup hooks.\nCLEANUP_FILES=()\ncleanup() {\n  if [[ ${#CLEANUP_FILES[@]} -ne 0 ]]; then\n    rm -fr \"${CLEANUP_FILES[@]}\"\n  fi\n}\n\n# Executed on exit.\non_exit() {\n  local retcode=\"$1\"\n  # Always cleanup the CLEANUP_FILES.\n  cleanup\n}\n\ntrap 'retcode=$?; { set +x; } 2>/dev/null; on_exit ${retcode}' INT TERM EXIT\n\n\n# These variables are populated when calling merge_request_commits().\n\n# The current hash at the top of the current branch or merge request branch (if\n# running from a merge request pipeline).\nMR_HEAD_SHA=\"\"\n# The common ancestor between the current commit and the tracked branch, such\n# as main. This includes a list\nMR_ANCESTOR_SHA=\"\"\n\n# Populate MR_HEAD_SHA and MR_ANCESTOR_SHA.\nmerge_request_commits() {\n  { set +x; } 2>/dev/null\n  # GITHUB_SHA is the current reference being build in GitHub Actions.\n  if [[ -n \"${GITHUB_SHA:-}\" ]]; then\n    # GitHub normally does a checkout of a merge commit on a shallow repository\n    # by default. We want to get a bit more of the history to be able to diff\n    # changes on the Pull Request if needed. This fetches 10 more commits which\n    # should be enough given that PR normally should have 1 commit.\n    git -C \"${MYDIR}\" fetch -q origin \"${GITHUB_SHA}\" --depth 10\n    if [ \"${GITHUB_EVENT_NAME}\" = \"pull_request\" ]; then\n      MR_HEAD_SHA=\"$(git rev-parse \"FETCH_HEAD^2\" 2>/dev/null ||\n                   echo \"${GITHUB_SHA}\")\"\n    else\n      MR_HEAD_SHA=\"${GITHUB_SHA}\"\n    fi\n  else\n    MR_HEAD_SHA=$(git -C \"${MYDIR}\" rev-parse -q \"HEAD\")\n  fi\n\n  if [[ -n \"${GITHUB_BASE_REF:-}\" ]]; then\n    # Pull request workflow in GitHub Actions. GitHub checkout action uses\n    # \"origin\" as the remote for the git checkout.\n    git -C \"${MYDIR}\" fetch -q origin \"${GITHUB_BASE_REF}\"\n    MR_ANCESTOR_SHA=$(git -C \"${MYDIR}\" rev-parse -q FETCH_HEAD)\n  else\n    # We are in a local branch, not a pull request workflow.\n    MR_ANCESTOR_SHA=$(git -C \"${MYDIR}\" rev-parse -q HEAD@{upstream} || true)\n  fi\n\n  if [[ -z \"${MR_ANCESTOR_SHA}\" ]]; then\n    echo \"Warning, not tracking any branch, using the last commit in HEAD.\">&2\n    # This prints the return value with just HEAD.\n    MR_ANCESTOR_SHA=$(git -C \"${MYDIR}\" rev-parse -q \"${MR_HEAD_SHA}^\")\n  else\n    # GitHub runs the pipeline on a merge commit, no need to look for the common\n    # ancestor in that case.\n    if [[ -z \"${GITHUB_BASE_REF:-}\" ]]; then\n      MR_ANCESTOR_SHA=$(git -C \"${MYDIR}\" merge-base \\\n        \"${MR_ANCESTOR_SHA}\" \"${MR_HEAD_SHA}\")\n    fi\n  fi\n  set -x\n}\n\n\n# Set up and export the environment variables needed by the child processes.\nexport_env() {\n  if [[ \"${BUILD_TARGET}\" == *mingw32 ]]; then\n    # Wine needs to know the paths to the mingw dlls. These should be\n    # separated by ';'.\n    WINEPATH=$(\"${CC:-clang}\" -print-search-dirs --target=\"${BUILD_TARGET}\" \\\n      | grep -F 'libraries: =' | cut -f 2- -d '=' | tr ':' ';')\n    # We also need our own libraries in the wine path.\n    local real_build_dir=$(realpath \"${BUILD_DIR}\")\n    # Some library .dll dependencies are installed in /bin:\n    export WINEPATH=\"${WINEPATH};${real_build_dir};${real_build_dir}/third_party/brotli;/usr/${BUILD_TARGET}/bin\"\n\n    local prefix=\"${BUILD_DIR}/wineprefix\"\n    mkdir -p \"${prefix}\"\n    export WINEPREFIX=$(realpath \"${prefix}\")\n  fi\n  # Sanitizers need these variables to print and properly format the stack\n  # traces:\n  LLVM_SYMBOLIZER=$(\"${CC:-clang}\" -print-prog-name=llvm-symbolizer || true)\n  if [[ -n \"${LLVM_SYMBOLIZER}\" ]]; then\n    export ASAN_SYMBOLIZER_PATH=\"${LLVM_SYMBOLIZER}\"\n    export MSAN_SYMBOLIZER_PATH=\"${LLVM_SYMBOLIZER}\"\n    export UBSAN_SYMBOLIZER_PATH=\"${LLVM_SYMBOLIZER}\"\n  fi\n}\n\ncmake_configure() {\n  export_env\n\n  if [[ \"${STACK_SIZE:-0}\" == 1 ]]; then\n    # Dump the stack size of each function in the .stack_sizes section for\n    # analysis.\n    CMAKE_C_FLAGS+=\" -fstack-size-section\"\n    CMAKE_CXX_FLAGS+=\" -fstack-size-section\"\n  fi\n\n  local args=(\n    -B\"${BUILD_DIR}\" -H\"${MYDIR}\"\n    -DCMAKE_BUILD_TYPE=\"${CMAKE_BUILD_TYPE}\"\n    -G Ninja\n    -DCMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS}\"\n    -DCMAKE_C_FLAGS=\"${CMAKE_C_FLAGS}\"\n    -DCMAKE_EXE_LINKER_FLAGS=\"${CMAKE_EXE_LINKER_FLAGS}\"\n    -DCMAKE_MODULE_LINKER_FLAGS=\"${CMAKE_MODULE_LINKER_FLAGS}\"\n    -DCMAKE_SHARED_LINKER_FLAGS=\"${CMAKE_SHARED_LINKER_FLAGS}\"\n    -DJPEGXL_VERSION=\"${JPEGXL_VERSION}\"\n    -DSANITIZER=\"${SANITIZER}\"\n    # These are not enabled by default in cmake.\n    -DJPEGXL_ENABLE_VIEWERS=ON\n    -DJPEGXL_ENABLE_PLUGINS=ON\n    -DJPEGXL_ENABLE_DEVTOOLS=ON\n    # We always use libfuzzer in the ci.sh wrapper.\n    -DJPEGXL_FUZZER_LINK_FLAGS=\"-fsanitize=fuzzer\"\n  )\n  if [[ \"${BUILD_TARGET}\" != *mingw32 ]]; then\n    args+=(\n      -DJPEGXL_WARNINGS_AS_ERRORS=ON\n    )\n  fi\n  if [[ -n \"${BUILD_TARGET}\" ]]; then\n    local system_name=\"Linux\"\n    if [[ \"${BUILD_TARGET}\" == *mingw32 ]]; then\n      # When cross-compiling with mingw the target must be set to Windows and\n      # run programs with wine.\n      system_name=\"Windows\"\n      args+=(\n        -DCMAKE_CROSSCOMPILING_EMULATOR=\"${WINE_BIN}\"\n        # Normally CMake automatically defines MINGW=1 when building with the\n        # mingw compiler (x86_64-w64-mingw32-gcc) but we are normally compiling\n        # with clang.\n        -DMINGW=1\n      )\n    fi\n    # EMSCRIPTEN toolchain sets the right values itself\n    if [[ \"${BUILD_TARGET}\" != wasm* ]]; then\n      # If set, BUILD_TARGET must be the target triplet such as\n      # x86_64-unknown-linux-gnu.\n      args+=(\n        -DCMAKE_C_COMPILER_TARGET=\"${BUILD_TARGET}\"\n        -DCMAKE_CXX_COMPILER_TARGET=\"${BUILD_TARGET}\"\n        # Only the first element of the target triplet.\n        -DCMAKE_SYSTEM_PROCESSOR=\"${BUILD_TARGET%%-*}\"\n        -DCMAKE_SYSTEM_NAME=\"${system_name}\"\n        -DCMAKE_TOOLCHAIN_FILE=\"${CMAKE_TOOLCHAIN_FILE}\"\n      )\n    else\n      args+=(\n        # sjpeg confuses WASM SIMD with SSE.\n        -DSJPEG_ENABLE_SIMD=OFF\n        # Building shared libs is not very useful for WASM.\n        -DBUILD_SHARED_LIBS=OFF\n      )\n    fi\n    args+=(\n      # These are needed to make googletest work when cross-compiling.\n      -DCMAKE_CROSSCOMPILING=1\n      -DHAVE_STD_REGEX=0\n      -DHAVE_POSIX_REGEX=0\n      -DHAVE_GNU_POSIX_REGEX=0\n      -DHAVE_STEADY_CLOCK=0\n      -DHAVE_THREAD_SAFETY_ATTRIBUTES=0\n    )\n    if [[ -z \"${CMAKE_FIND_ROOT_PATH}\" ]]; then\n      # find_package() will look in this prefix for libraries.\n      CMAKE_FIND_ROOT_PATH=\"/usr/${BUILD_TARGET}\"\n    fi\n    if [[ -z \"${CMAKE_PREFIX_PATH}\" ]]; then\n      CMAKE_PREFIX_PATH=\"/usr/${BUILD_TARGET}\"\n    fi\n    # Use pkg-config for the target. If there's no pkg-config available for the\n    # target we can set the PKG_CONFIG_PATH to the appropriate path in most\n    # linux distributions.\n    local pkg_config=$(which \"${BUILD_TARGET}-pkg-config\" || true)\n    if [[ -z \"${pkg_config}\" ]]; then\n      pkg_config=$(which pkg-config)\n      export PKG_CONFIG_LIBDIR=\"/usr/${BUILD_TARGET}/lib/pkgconfig\"\n    fi\n    if [[ -n \"${pkg_config}\" ]]; then\n      args+=(-DPKG_CONFIG_EXECUTABLE=\"${pkg_config}\")\n    fi\n  fi\n  if [[ -n \"${CMAKE_CROSSCOMPILING_EMULATOR}\" ]]; then\n    args+=(\n      -DCMAKE_CROSSCOMPILING_EMULATOR=\"${CMAKE_CROSSCOMPILING_EMULATOR}\"\n    )\n  fi\n  if [[ -n \"${CMAKE_FIND_ROOT_PATH}\" ]]; then\n    args+=(\n      -DCMAKE_FIND_ROOT_PATH=\"${CMAKE_FIND_ROOT_PATH}\"\n    )\n  fi\n  if [[ -n \"${CMAKE_PREFIX_PATH}\" ]]; then\n    args+=(\n      -DCMAKE_PREFIX_PATH=\"${CMAKE_PREFIX_PATH}\"\n    )\n  fi\n  if [[ -n \"${CMAKE_C_COMPILER_LAUNCHER}\" ]]; then\n    args+=(\n      -DCMAKE_C_COMPILER_LAUNCHER=\"${CMAKE_C_COMPILER_LAUNCHER}\"\n    )\n  fi\n  if [[ -n \"${CMAKE_CXX_COMPILER_LAUNCHER}\" ]]; then\n    args+=(\n      -DCMAKE_CXX_COMPILER_LAUNCHER=\"${CMAKE_CXX_COMPILER_LAUNCHER}\"\n    )\n  fi\n  if [[ -n \"${CMAKE_MAKE_PROGRAM}\" ]]; then\n    args+=(\n      -DCMAKE_MAKE_PROGRAM=\"${CMAKE_MAKE_PROGRAM}\"\n    )\n  fi\n  if [[ \"${BUILD_TARGET}\" == wasm* ]]; then\n    emcmake cmake \"${args[@]}\" \"$@\"\n  else\n    cmake \"${args[@]}\" \"$@\"\n  fi\n}\n\ncmake_build_and_test() {\n  if [[ \"${SKIP_BUILD}\" -eq \"1\" ]]; then\n      return 0\n  fi\n  # gtest_discover_tests() runs the test binaries to discover the list of tests\n  # at build time, which fails under qemu.\n  ASAN_OPTIONS=detect_leaks=0 cmake --build \"${BUILD_DIR}\" -- $TARGETS\n  # Pack test binaries if requested.\n  if [[ \"${PACK_TEST:-}\" == \"1\" ]]; then\n    (cd \"${BUILD_DIR}\"\n     ${FIND_BIN} -name '*.cmake' -a '!' -path '*CMakeFiles*'\n     # gtest / gtest_main shared libs\n     ${FIND_BIN} lib/ -name 'libg*.so*'\n     ${FIND_BIN} -type d -name tests -a '!' -path '*CMakeFiles*'\n    ) | tar -C \"${BUILD_DIR}\" -cf \"${BUILD_DIR}/tests.tar.xz\" -T - \\\n      --use-compress-program=\"xz --threads=$(nproc --all || echo 1) -6\"\n    du -h \"${BUILD_DIR}/tests.tar.xz\"\n    # Pack coverage data if also available.\n    touch \"${BUILD_DIR}/gcno.sentinel\"\n    (cd \"${BUILD_DIR}\"; echo gcno.sentinel; ${FIND_BIN} -name '*gcno') | \\\n      tar -C \"${BUILD_DIR}\" -cvf \"${BUILD_DIR}/gcno.tar.xz\" -T - \\\n        --use-compress-program=\"xz --threads=$(nproc --all || echo 1) -6\"\n  fi\n\n  if [[ \"${SKIP_TEST}\" -ne \"1\" ]]; then\n    (cd \"${BUILD_DIR}\"\n     export UBSAN_OPTIONS=print_stacktrace=1\n     [[ \"${TEST_STACK_LIMIT}\" == \"none\" ]] || ulimit -s \"${TEST_STACK_LIMIT}\"\n     ctest -j $(nproc --all || echo 1) ${TEST_SELECTOR} --output-on-failure)\n  fi\n}\n\n# Configure the build to strip unused functions. This considerably reduces the\n# output size, specially for tests which only use a small part of the whole\n# library.\nstrip_dead_code() {\n  # Emscripten does tree shaking without any extra flags.\n  if [[ \"${BUILD_TARGET}\" == wasm* ]]; then\n    return 0\n  fi\n  # -ffunction-sections, -fdata-sections and -Wl,--gc-sections effectively\n  # discard all unreachable code, reducing the code size. For this to work, we\n  # need to also pass --no-export-dynamic to prevent it from exporting all the\n  # internal symbols (like functions) making them all reachable and thus not a\n  # candidate for removal.\n  CMAKE_CXX_FLAGS+=\" -ffunction-sections -fdata-sections\"\n  CMAKE_C_FLAGS+=\" -ffunction-sections -fdata-sections\"\n  if [[ \"${OS}\" == \"Darwin\" ]]; then\n    CMAKE_EXE_LINKER_FLAGS+=\" -dead_strip\"\n    CMAKE_SHARED_LINKER_FLAGS+=\" -dead_strip\"\n  else\n    CMAKE_EXE_LINKER_FLAGS+=\" -Wl,--gc-sections -Wl,--no-export-dynamic\"\n    CMAKE_SHARED_LINKER_FLAGS+=\" -Wl,--gc-sections -Wl,--no-export-dynamic\"\n  fi\n}\n\n### Externally visible commands\n\ncmd_debug() {\n  CMAKE_BUILD_TYPE=\"DebugOpt\"\n  cmake_configure \"$@\"\n  cmake_build_and_test\n}\n\ncmd_release() {\n  CMAKE_BUILD_TYPE=\"Release\"\n  strip_dead_code\n  cmake_configure \"$@\"\n  cmake_build_and_test\n}\n\ncmd_opt() {\n  CMAKE_BUILD_TYPE=\"RelWithDebInfo\"\n  CMAKE_CXX_FLAGS+=\" -DJXL_IS_DEBUG_BUILD\"\n  cmake_configure \"$@\"\n  cmake_build_and_test\n}\n\ncmd_coverage() {\n  # -O0 prohibits stack space reuse -> causes stack-overflow on dozens of tests.\n  TEST_STACK_LIMIT=\"none\"\n\n  cmd_release -DJPEGXL_ENABLE_COVERAGE=ON \"$@\"\n\n  if [[ \"${SKIP_TEST}\" -ne \"1\" ]]; then\n    # If we didn't run the test we also don't print a coverage report.\n    cmd_coverage_report\n  fi\n}\n\ncmd_coverage_report() {\n  LLVM_COV=$(\"${CC:-clang}\" -print-prog-name=llvm-cov)\n  local real_build_dir=$(realpath \"${BUILD_DIR}\")\n  local gcovr_args=(\n    -r \"${real_build_dir}\"\n    --gcov-executable \"${LLVM_COV} gcov\"\n    --gcov-ignore-parse-errors suspicious_hits.warn_once_per_file\n    # Only print coverage information for the libjxl directories. The rest\n    # is not part of the code under test.\n    --filter '.*jxl/.*'\n    --exclude '.*_gbench.cc'\n    --exclude '.*_test.cc'\n    --exclude '.*_testonly..*'\n    --exclude '.*_debug.*'\n    --exclude '.*test_utils..*'\n    --object-directory \"${real_build_dir}\"\n  )\n\n  (\n   cd \"${real_build_dir}\"\n    gcovr \"${gcovr_args[@]}\" --html --html-details \\\n      --output=\"${real_build_dir}/coverage.html\"\n    gcovr \"${gcovr_args[@]}\" --print-summary |\n      tee \"${real_build_dir}/coverage.txt\"\n    gcovr \"${gcovr_args[@]}\" --xml --output=\"${real_build_dir}/coverage.xml\"\n  )\n}\n\ncmd_test() {\n  export_env\n  # Unpack tests if needed.\n  if [[ -e \"${BUILD_DIR}/tests.tar.xz\" && ! -d \"${BUILD_DIR}/tests\" ]]; then\n    tar -C \"${BUILD_DIR}\" -Jxvf \"${BUILD_DIR}/tests.tar.xz\"\n  fi\n  if [[ -e \"${BUILD_DIR}/gcno.tar.xz\" && ! -d \"${BUILD_DIR}/gcno.sentinel\" ]]; then\n    tar -C \"${BUILD_DIR}\" -Jxvf \"${BUILD_DIR}/gcno.tar.xz\"\n  fi\n  (cd \"${BUILD_DIR}\"\n   export UBSAN_OPTIONS=print_stacktrace=1\n   [[ \"${TEST_STACK_LIMIT}\" == \"none\" ]] || ulimit -s \"${TEST_STACK_LIMIT}\"\n   ctest -j $(nproc --all || echo 1) ${TEST_SELECTOR} --output-on-failure \"$@\")\n}\n\ncmd_gbench() {\n  export_env\n  (cd \"${BUILD_DIR}\"\n   export UBSAN_OPTIONS=print_stacktrace=1\n   lib/jxl_gbench \\\n     --benchmark_counters_tabular=true \\\n     --benchmark_out_format=json \\\n     --benchmark_out=gbench.json \"$@\"\n  )\n}\n\ncmd_asanfuzz() {\n  CMAKE_CXX_FLAGS+=\" -fsanitize=fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1\"\n  CMAKE_C_FLAGS+=\" -fsanitize=fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1\"\n  cmd_asan -DJPEGXL_ENABLE_FUZZERS=ON \"$@\"\n}\n\ncmd_msanfuzz() {\n  # Install msan if needed before changing the flags.\n  detect_clang_version\n  local msan_prefix=\"${HOME}/.msan/${CLANG_VERSION}\"\n  # TODO(eustas): why libc++abi.a is bad?\n  if [[ ! -d \"${msan_prefix}\" || -e \"${msan_prefix}/lib/libc++abi.a\" ]]; then\n    # Install msan libraries for this version if needed or if an older version\n    # with libc++abi was installed.\n    cmd_msan_install\n  fi\n\n  CMAKE_CXX_FLAGS+=\" -fsanitize=fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1\"\n  CMAKE_C_FLAGS+=\" -fsanitize=fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1\"\n  cmd_msan -DJPEGXL_ENABLE_FUZZERS=ON \"$@\"\n}\n\ncmd_asan() {\n  SANITIZER=\"asan\"\n  CMAKE_C_FLAGS+=\" -g -DADDRESS_SANITIZER \\\n    -fsanitize=address ${UBSAN_FLAGS[@]}\"\n  CMAKE_CXX_FLAGS+=\" -g -DADDRESS_SANITIZER \\\n    -fsanitize=address ${UBSAN_FLAGS[@]}\"\n  strip_dead_code\n  cmake_configure \"$@\" -DJPEGXL_ENABLE_TCMALLOC=OFF\n  cmake_build_and_test\n}\n\ncmd_tsan() {\n  SANITIZER=\"tsan\"\n  local tsan_args=(\n    -g\n    -DTHREAD_SANITIZER\n    -fsanitize=thread\n  )\n  CMAKE_C_FLAGS+=\" ${tsan_args[@]}\"\n  CMAKE_CXX_FLAGS+=\" ${tsan_args[@]}\"\n\n  cmake_configure \"$@\" -DJPEGXL_ENABLE_TCMALLOC=OFF\n  cmake_build_and_test\n}\n\ncmd_msan() {\n  SANITIZER=\"msan\"\n  detect_clang_version\n  local msan_prefix=\"${HOME}/.msan/${CLANG_VERSION}\"\n  if [[ ! -d \"${msan_prefix}\" || -e \"${msan_prefix}/lib/libc++abi.a\" ]]; then\n    # Install msan libraries for this version if needed or if an older version\n    # with libc++abi was installed.\n    cmd_msan_install\n  fi\n\n  local msan_c_flags=(\n    -fsanitize=memory\n    -fno-omit-frame-pointer\n\n    -g\n    -DMEMORY_SANITIZER\n\n    # Force gtest to not use the cxxbai.\n    -DGTEST_HAS_CXXABI_H_=0\n  )\n  if [[ \"${FASTER_MSAN_BUILD}\" -ne \"1\" ]]; then\n    msan_c_flags=(\n      \"${msan_c_flags[@]}\"\n      -fsanitize-memory-track-origins\n    )\n  fi\n\n  local msan_cxx_flags=(\n    \"${msan_c_flags[@]}\"\n\n    # Some C++ sources don't use the std at all, so the -stdlib=libc++ is unused\n    # in those cases. Ignore the warning.\n    -Wno-unused-command-line-argument\n    -stdlib=libc++\n\n    # We include the libc++ from the msan directory instead, so we don't want\n    # the std includes.\n    -nostdinc++\n    -cxx-isystem\"${msan_prefix}/include/c++/v1\"\n  )\n\n  local msan_linker_flags=(\n    -L\"${msan_prefix}\"/lib\n    -Wl,-rpath -Wl,\"${msan_prefix}\"/lib/\n  )\n\n  CMAKE_C_FLAGS+=\" ${msan_c_flags[@]}\"\n  CMAKE_CXX_FLAGS+=\" ${msan_cxx_flags[@]}\"\n  CMAKE_EXE_LINKER_FLAGS+=\" ${msan_linker_flags[@]}\"\n  CMAKE_MODULE_LINKER_FLAGS+=\" ${msan_linker_flags[@]}\"\n  CMAKE_SHARED_LINKER_FLAGS+=\" ${msan_linker_flags[@]}\"\n  strip_dead_code\n\n  # MSAN share of stack size is non-negligible.\n  TEST_STACK_LIMIT=\"none\"\n\n  # TODO(eustas): investigate why fuzzers do not link when MSAN libc++ is used\n  cmake_configure \"$@\" \\\n    -DCMAKE_CROSSCOMPILING=1 -DRUN_HAVE_STD_REGEX=0 -DRUN_HAVE_POSIX_REGEX=0 \\\n    -DJPEGXL_ENABLE_TCMALLOC=OFF -DJPEGXL_WARNINGS_AS_ERRORS=OFF \\\n    -DCMAKE_REQUIRED_LINK_OPTIONS=\"${msan_linker_flags[@]}\" \\\n    -DJPEGXL_ENABLE_FUZZERS=OFF\n  cmake_build_and_test\n}\n\n# Install libc++ libraries compiled with msan in the msan_prefix for the current\n# compiler version.\ncmd_msan_install() {\n  local tmpdir=$(mktemp -d)\n  CLEANUP_FILES+=(\"${tmpdir}\")\n  local msan_root=\"${HOME}/.msan\"\n  mkdir -p \"${msan_root}\"\n  # Detect the llvm to install:\n  export CC=\"${CC:-clang}\"\n  export CXX=\"${CXX:-clang++}\"\n  detect_clang_version\n  # Allow overriding the LLVM checkout.\n  local llvm_root=\"${LLVM_ROOT:-}\"\n  if [ -z \"${llvm_root}\" ]; then\n    declare -A llvm_tag_by_version=(\n      [\"6.0\"]=\"6.0.1\"\n      [\"7\"]=\"7.1.0\"\n      [\"8\"]=\"8.0.1\"\n      [\"9\"]=\"9.0.2\"\n      [\"10\"]=\"10.0.1\"\n      [\"11\"]=\"11.1.0\"\n      [\"12\"]=\"12.0.1\"\n      [\"13\"]=\"13.0.1\"\n      [\"14\"]=\"14.0.6\"\n      [\"15\"]=\"15.0.7\"\n      [\"16\"]=\"16.0.6\"\n      [\"17\"]=\"17.0.6\"\n      [\"18\"]=\"18.1.6\"\n    ) \n    local llvm_tag=\"${CLANG_VERSION}.0.0\"\n    if [[ -n \"${llvm_tag_by_version[\"${CLANG_VERSION}\"]}\" ]]; then\n      llvm_tag=${llvm_tag_by_version[\"${CLANG_VERSION}\"]}\n    fi\n    llvm_tag=\"llvmorg-${llvm_tag}\"\n    local llvm_targz=\"${msan_root}/${llvm_tag}.tar.gz\"\n    if [ ! -f \"${llvm_targz}\" ]; then\n      curl -L --show-error -o \"${llvm_targz}\" \\\n        \"https://github.com/llvm/llvm-project/archive/${llvm_tag}.tar.gz\"\n    fi\n    tar -C \"${tmpdir}\" -zxf \"${llvm_targz}\"\n    llvm_root=\"${tmpdir}/llvm-project-${llvm_tag}\"\n  fi\n\n  local msan_prefix=\"${msan_root}/${CLANG_VERSION}\"\n  rm -rf \"${msan_prefix}\"\n\n  local TARGET_OPTS=\"\"\n  if [[ -n \"${BUILD_TARGET}\" ]]; then\n    TARGET_OPTS=\" \\\n      -DCMAKE_C_COMPILER_TARGET=\\\"${BUILD_TARGET}\\\" \\\n      -DCMAKE_CXX_COMPILER_TARGET=\\\"${BUILD_TARGET}\\\" \\\n      -DCMAKE_SYSTEM_PROCESSOR=\\\"${BUILD_TARGET%%-*}\\\" \\\n    \"\n  fi\n\n  local build_dir=\"${tmpdir}/build-llvm\"\n  mkdir -p \"${build_dir}\"\n  cd ${llvm_root}\n  cmake -B\"${build_dir}\" \\\n    -G Ninja \\\n    -S runtimes \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_USE_SANITIZER=Memory \\\n    -DLLVM_ENABLE_RUNTIMES=\"libcxx;libcxxabi;libunwind;compiler-rt\" \\\n    -DLIBCXXABI_ENABLE_SHARED=ON \\\n    -DLIBCXXABI_ENABLE_STATIC=OFF \\\n    -DLIBCXX_ENABLE_SHARED=ON \\\n    -DLIBCXX_ENABLE_STATIC=OFF \\\n    -DCMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS}\" \\\n    -DCMAKE_C_FLAGS=\"${CMAKE_C_FLAGS}\" \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"${CMAKE_EXE_LINKER_FLAGS}\" \\\n    -DCMAKE_SHARED_LINKER_FLAGS=\"${CMAKE_SHARED_LINKER_FLAGS}\" \\\n    -DCMAKE_INSTALL_PREFIX=\"${msan_prefix}\" \\\n    -DLLVM_PATH=\"${llvm_root}/llvm\" \\\n    -DLLVM_CONFIG_PATH=\"$(which llvm-config-${CLANG_VERSION} llvm-config | head -n1)\" \\\n     ${TARGET_OPTS}\n  cmake --build \"${build_dir}\"\n  ninja -C \"${build_dir}\" install\n}\n\n# Internal build step shared between all cmd_ossfuzz_* commands.\n_cmd_ossfuzz() {\n  local sanitizer=\"$1\"\n  shift\n  mkdir -p \"${BUILD_DIR}\"\n  local real_build_dir=$(realpath \"${BUILD_DIR}\")\n\n  # oss-fuzz defines three directories:\n  # * /work, with the working directory to do re-builds\n  # * /src, with the source code to build\n  # * /out, with the output directory where to copy over the built files.\n  # We use $BUILD_DIR as the /work and the script directory as the /src. The\n  # /out directory is ignored as developers are used to look for the fuzzers in\n  # $BUILD_DIR/tools/ directly.\n\n  if [[ \"${sanitizer}\" = \"memory\" && ! -d \"${BUILD_DIR}/msan\" ]]; then\n    sudo docker run --rm -i \\\n      --user $(id -u):$(id -g) \\\n      -v \"${real_build_dir}\":/work \\\n      gcr.io/oss-fuzz-base/msan-libs-builder \\\n      bash -c \"cp -r /msan /work\"\n  fi\n\n  # Args passed to ninja. These will be evaluated as a string separated by\n  # spaces.\n  local jpegxl_extra_args=\"$@\"\n\n  sudo docker run --rm -i \\\n    -e JPEGXL_UID=$(id -u) \\\n    -e JPEGXL_GID=$(id -g) \\\n    -e FUZZING_ENGINE=\"${FUZZING_ENGINE:-libfuzzer}\" \\\n    -e SANITIZER=\"${sanitizer}\" \\\n    -e ARCHITECTURE=x86_64 \\\n    -e FUZZING_LANGUAGE=c++ \\\n    -e MSAN_LIBS_PATH=\"/work/msan\" \\\n    -e JPEGXL_EXTRA_ARGS=\"${jpegxl_extra_args}\" \\\n    -v \"${MYDIR}\":/src/libjxl \\\n    -v \"${MYDIR}/tools/scripts/ossfuzz-build.sh\":/src/build.sh \\\n    -v \"${real_build_dir}\":/work \\\n    gcr.io/oss-fuzz/libjxl\n}\n\ncmd_ossfuzz_asan() {\n  _cmd_ossfuzz address \"$@\"\n}\ncmd_ossfuzz_msan() {\n  _cmd_ossfuzz memory \"$@\"\n}\ncmd_ossfuzz_ubsan() {\n  _cmd_ossfuzz undefined \"$@\"\n}\n\ncmd_ossfuzz_ninja() {\n  [[ -e \"${BUILD_DIR}/build.ninja\" ]]\n  local real_build_dir=$(realpath \"${BUILD_DIR}\")\n\n  if [[ -e \"${BUILD_DIR}/msan\" ]]; then\n    echo \"ossfuzz_ninja doesn't work with msan builds. Use ossfuzz_msan.\" >&2\n    exit 1\n  fi\n\n  sudo docker run --rm -i \\\n    --user $(id -u):$(id -g) \\\n    -v \"${MYDIR}\":/src/libjxl \\\n    -v \"${real_build_dir}\":/work \\\n    gcr.io/oss-fuzz/libjxl \\\n    ninja -C /work \"$@\"\n}\n\ncmd_fast_benchmark() {\n  local small_corpus_tar=\"${BENCHMARK_CORPORA}/jyrki-full.tar\"\n  local small_corpus_url=\"https://storage.googleapis.com/artifacts.jpegxl.appspot.com/corpora/jyrki-full.tar\"\n  mkdir -p \"${BENCHMARK_CORPORA}\"\n  if [ -f \"${small_corpus_tar}\" ]; then\n    curl --show-error -o \"${small_corpus_tar}\" -z \"${small_corpus_tar}\" \"${small_corpus_url}\"\n  else\n    curl --show-error -o \"${small_corpus_tar}\" \"${small_corpus_url}\"\n  fi\n\n  local tmpdir=$(mktemp -d)\n  CLEANUP_FILES+=(\"${tmpdir}\")\n  tar -xf \"${small_corpus_tar}\" -C \"${tmpdir}\"\n\n  run_benchmark \"${tmpdir}\" 1048576\n}\n\ncmd_benchmark() {\n  local nikon_corpus_tar=\"${BENCHMARK_CORPORA}/nikon-subset.tar\"\n  mkdir -p \"${BENCHMARK_CORPORA}\"\n  curl --show-error -o \"${nikon_corpus_tar}\" -z \"${nikon_corpus_tar}\" \\\n    \"https://storage.googleapis.com/artifacts.jpegxl.appspot.com/corpora/nikon-subset.tar\"\n\n  local tmpdir=$(mktemp -d)\n  CLEANUP_FILES+=(\"${tmpdir}\")\n  tar -xvf \"${nikon_corpus_tar}\" -C \"${tmpdir}\"\n\n  local sem_id=\"jpegxl_benchmark-$$\"\n  local nprocs=$(nproc --all || echo 1)\n  images=()\n  local filename\n  while IFS= read -r filename; do\n    # This removes the './'\n    filename=\"${filename:2}\"\n    local mode\n    if [[ \"${filename:0:4}\" == \"srgb\" ]]; then\n      mode=\"RGB_D65_SRG_Rel_SRG\"\n    elif [[ \"${filename:0:5}\" == \"adobe\" ]]; then\n      mode=\"RGB_D65_Ado_Rel_Ado\"\n    else\n      echo \"Unknown image colorspace: ${filename}\" >&2\n      exit 1\n    fi\n    png_filename=\"${filename%.ppm}.png\"\n    png_filename=$(echo \"${png_filename}\" | tr '/' '_')\n    sem --bg --id \"${sem_id}\" -j\"${nprocs}\" -- \\\n      \"${TOOLS_DIR}/decode_and_encode\" \\\n        \"${tmpdir}/${filename}\" \"${mode}\" \"${tmpdir}/${png_filename}\"\n    images+=( \"${png_filename}\" )\n  done < <(cd \"${tmpdir}\"; ${FIND_BIN} . -name '*.ppm' -type f)\n  sem --id \"${sem_id}\" --wait\n\n  # We need about 10 GiB per thread on these images.\n  run_benchmark \"${tmpdir}\" 10485760\n}\n\nget_mem_available() {\n  if [[ \"${OS}\" == \"Darwin\" ]]; then\n    echo $(vm_stat | grep -F 'Pages free:' | awk '{print $3 * 4}')\n  elif [[ \"${OS}\" == MINGW* ]]; then\n    echo $(vmstat | tail -n 1 | awk '{print $4 * 4}')\n  else\n    echo $(grep -F MemAvailable: /proc/meminfo | awk '{print $2}')\n  fi\n}\n\nrun_benchmark() {\n  local src_img_dir=\"$1\"\n  local mem_per_thread=\"${2:-10485760}\"\n\n  local output_dir=\"${BUILD_DIR}/benchmark_results\"\n  mkdir -p \"${output_dir}\"\n\n  if [[ \"${OS}\" == MINGW* ]]; then\n    src_img_dir=`cygpath -w \"${src_img_dir}\"`\n  fi\n\n  local num_threads=1\n  if [[ ${BENCHMARK_NUM_THREADS} -gt 0 ]]; then\n    num_threads=${BENCHMARK_NUM_THREADS}\n  else\n    # The memory available at the beginning of the benchmark run in kB. The number\n    # of threads depends on the available memory, and the passed memory per\n    # thread. We also add a 2 GiB of constant memory.\n    local mem_available=\"$(get_mem_available)\"\n    # Check that we actually have a MemAvailable value.\n    [[ -n \"${mem_available}\" ]]\n    num_threads=$(( (${mem_available} - 1048576) / ${mem_per_thread} ))\n    if [[ ${num_threads} -le 0 ]]; then\n      num_threads=1\n    fi\n  fi\n\n  local benchmark_args=(\n    --input \"${src_img_dir}/*.png\"\n    --codec=jpeg:yuv420:q85,webp:q80,jxl:d1:6,jxl:d1:6:downsampling=8,jxl:d5:6,jxl:d5:6:downsampling=8,jxl:m:d0:2,jxl:m:d0:3,jxl:m:d2:2\n    --output_dir \"${output_dir}\"\n    --show_progress\n    --num_threads=\"${num_threads}\"\n    --decode_reps=11\n    --encode_reps=11\n  )\n  if [[ \"${STORE_IMAGES}\" == \"1\" ]]; then\n    benchmark_args+=(--save_decompressed --save_compressed)\n  fi\n  (\n    [[ \"${TEST_STACK_LIMIT}\" == \"none\" ]] || ulimit -s \"${TEST_STACK_LIMIT}\"\n    \"${TOOLS_DIR}/benchmark_xl\" \"${benchmark_args[@]}\" | \\\n       tee \"${output_dir}/results.txt\"\n\n    # Check error code for benchmark_xl command. This will exit if not.\n    return ${PIPESTATUS[0]}\n  )\n}\n\n# Helper function to wait for the CPU temperature to cool down on ARM.\nwait_for_temp() {\n  { set +x; } 2>/dev/null\n  local temp_limit=${1:-38000}\n  if [[ -z \"${THERMAL_FILE:-}\" ]]; then\n    echo \"Must define the THERMAL_FILE with the thermal_zoneX/temp file\" \\\n      \"to read the temperature from. This is normally set in the runner.\" >&2\n    exit 1\n  fi\n  local org_temp=$(cat \"${THERMAL_FILE}\")\n  if [[ \"${org_temp}\" -ge \"${temp_limit}\" ]]; then\n    echo -n \"Waiting for temp to get down from ${org_temp}... \"\n  fi\n  local temp=\"${org_temp}\"\n  local secs=0\n  while [[ \"${temp}\" -ge \"${temp_limit}\" ]]; do\n    sleep 1\n    temp=$(cat \"${THERMAL_FILE}\")\n    echo -n \"${temp} \"\n    secs=$((secs + 1))\n    if [[ ${secs} -ge 5 ]]; then\n      break\n    fi\n  done\n  if [[ \"${org_temp}\" -ge \"${temp_limit}\" ]]; then\n    echo \"Done, temp=${temp}\"\n  fi\n  set -x\n}\n\n# Helper function to set the cpuset restriction of the current process.\ncmd_cpuset() {\n  [[ \"${SKIP_CPUSET:-}\" != \"1\" ]] || return 0\n  local newset=\"$1\"\n  local mycpuset=$(cat /proc/self/cpuset)\n  mycpuset=\"/dev/cpuset${mycpuset}\"\n  # Check that the directory exists:\n  [[ -d \"${mycpuset}\" ]]\n  if [[ -e \"${mycpuset}/cpuset.cpus\" ]]; then\n    echo \"${newset}\" >\"${mycpuset}/cpuset.cpus\"\n  else\n    echo \"${newset}\" >\"${mycpuset}/cpus\"\n  fi\n}\n\n# Return the encoding/decoding speed from the Stats output.\n_speed_from_output() {\n  local speed=\"$1\"\n  local unit=\"${2:-MP/s}\"\n  if [[ \"${speed}\" == *\"${unit}\"* ]]; then\n    speed=\"${speed%% ${unit}*}\"\n    speed=\"${speed##* }\"\n    echo \"${speed}\"\n  fi\n}\n\n\n# Run benchmarks on ARM for the big and little CPUs.\ncmd_arm_benchmark() {\n  # Flags used for cjxl encoder with .png inputs\n  local jxl_png_benchmarks=(\n    # Lossy options:\n    \"--epf=0 --distance=1.0 --speed=cheetah\"\n    \"--epf=2 --distance=1.0 --speed=cheetah\"\n    \"--epf=0 --distance=8.0 --speed=cheetah\"\n    \"--epf=1 --distance=8.0 --speed=cheetah\"\n    \"--epf=2 --distance=8.0 --speed=cheetah\"\n    \"--epf=3 --distance=8.0 --speed=cheetah\"\n    \"--modular -Q 90\"\n    \"--modular -Q 50\"\n    # Lossless options:\n    \"--modular\"\n    \"--modular -E 0 -I 0\"\n    \"--modular -P 5\"\n    \"--modular --responsive=1\"\n    # Near-lossless options:\n    \"--epf=0 --distance=0.3 --speed=fast\"\n    \"--modular -Q 97\"\n  )\n\n  # Flags used for cjxl encoder with .jpg inputs. These should do lossless\n  # JPEG recompression (of pixels or full jpeg).\n  local jxl_jpeg_benchmarks=(\n    \"--num_reps=3\"\n  )\n\n  local images=(\n    \"testdata/jxl/flower/flower.png\"\n  )\n\n  local jpg_images=(\n    \"testdata/jxl/flower/flower.png.im_q85_420.jpg\"\n  )\n\n  if [[ \"${SKIP_CPUSET:-}\" == \"1\" ]]; then\n    # Use a single cpu config in this case.\n    local cpu_confs=(\"?\")\n  else\n    # Otherwise the CPU config comes from the environment:\n    local cpu_confs=(\n      \"${RUNNER_CPU_LITTLE}\"\n      \"${RUNNER_CPU_BIG}\"\n      # The CPU description is something like 3-7, so these configurations only\n      # take the first CPU of the group.\n      \"${RUNNER_CPU_LITTLE%%-*}\"\n      \"${RUNNER_CPU_BIG%%-*}\"\n    )\n    # Check that RUNNER_CPU_ALL is defined. In the SKIP_CPUSET=1 case this will\n    # be ignored but still evaluated when calling cmd_cpuset.\n    [[ -n \"${RUNNER_CPU_ALL}\" ]]\n  fi\n\n  local jpg_dirname=\"third_party/corpora/jpeg\"\n  mkdir -p \"${jpg_dirname}\"\n  local jpg_qualities=( 50 80 95 )\n  for src_img in \"${images[@]}\"; do\n    for q in \"${jpg_qualities[@]}\"; do\n      local jpeg_name=\"${jpg_dirname}/\"$(basename \"${src_img}\" .png)\"-q${q}.jpg\"\n      convert -sampling-factor 1x1 -quality \"${q}\" \\\n        \"${src_img}\" \"${jpeg_name}\"\n      jpg_images+=(\"${jpeg_name}\")\n    done\n  done\n\n  local output_dir=\"${BUILD_DIR}/benchmark_results\"\n  mkdir -p \"${output_dir}\"\n  local runs_file=\"${output_dir}/runs.txt\"\n\n  if [[ ! -e \"${runs_file}\" ]]; then\n    echo -e \"binary\\tflags\\tsrc_img\\tsrc size\\tsrc pixels\\tcpuset\\tenc size (B)\\tenc speed (MP/s)\\tdec speed (MP/s)\\tJPG dec speed (MP/s)\\tJPG dec speed (MB/s)\" |\n      tee -a \"${runs_file}\"\n  fi\n\n  mkdir -p \"${BUILD_DIR}/arm_benchmark\"\n  local flags\n  local src_img\n  for src_img in \"${jpg_images[@]}\" \"${images[@]}\"; do\n    local src_img_hash=$(sha1sum \"${src_img}\" | cut -f 1 -d ' ')\n    local enc_binaries=(\"${TOOLS_DIR}/cjxl\")\n    local src_ext=\"${src_img##*.}\"\n    for enc_binary in \"${enc_binaries[@]}\"; do\n      local enc_binary_base=$(basename \"${enc_binary}\")\n\n      # Select the list of flags to use for the current encoder/image pair.\n      local img_benchmarks\n      if [[ \"${src_ext}\" == \"jpg\" ]]; then\n        img_benchmarks=(\"${jxl_jpeg_benchmarks[@]}\")\n      else\n        img_benchmarks=(\"${jxl_png_benchmarks[@]}\")\n      fi\n\n      for flags in \"${img_benchmarks[@]}\"; do\n        # Encoding step.\n        local enc_file_hash=\"${enc_binary_base} || $flags || ${src_img} || ${src_img_hash}\"\n        enc_file_hash=$(echo \"${enc_file_hash}\" | sha1sum | cut -f 1 -d ' ')\n        local enc_file=\"${BUILD_DIR}/arm_benchmark/${enc_file_hash}.jxl\"\n\n        for cpu_conf in \"${cpu_confs[@]}\"; do\n          cmd_cpuset \"${cpu_conf}\"\n          # nproc returns the number of active CPUs, which is given by the cpuset\n          # mask.\n          local num_threads=\"$(nproc)\"\n\n          echo \"Encoding with: ${enc_binary_base} img=${src_img} cpus=${cpu_conf} enc_flags=${flags}\"\n          local enc_output\n          if [[ \"${flags}\" == *\"modular\"* ]]; then\n            # We don't benchmark encoding speed in this case.\n            if [[ ! -f \"${enc_file}\" ]]; then\n              cmd_cpuset \"${RUNNER_CPU_ALL:-}\"\n              \"${enc_binary}\" ${flags} \"${src_img}\" \"${enc_file}.tmp\"\n              mv \"${enc_file}.tmp\" \"${enc_file}\"\n              cmd_cpuset \"${cpu_conf}\"\n            fi\n            enc_output=\" ?? MP/s\"\n          else\n            wait_for_temp\n            enc_output=$(\"${enc_binary}\" ${flags} \"${src_img}\" \"${enc_file}.tmp\" \\\n              2>&1 | tee /dev/stderr | grep -F \"MP/s [\")\n            mv \"${enc_file}.tmp\" \"${enc_file}\"\n          fi\n          local enc_speed=$(_speed_from_output \"${enc_output}\")\n          local enc_size=$(stat -c \"%s\" \"${enc_file}\")\n\n          echo \"Decoding with: img=${src_img} cpus=${cpu_conf} enc_flags=${flags}\"\n\n          local dec_output\n          wait_for_temp\n          dec_output=$(\"${TOOLS_DIR}/djxl\" \"${enc_file}\" \\\n            --num_reps=5 --num_threads=\"${num_threads}\" 2>&1 | tee /dev/stderr |\n            grep -E \"M[BP]/s \\[\")\n          local img_size=$(echo \"${dec_output}\" | cut -f 1 -d ',')\n          local img_size_x=$(echo \"${img_size}\" | cut -f 1 -d ' ')\n          local img_size_y=$(echo \"${img_size}\" | cut -f 3 -d ' ')\n          local img_size_px=$(( ${img_size_x} * ${img_size_y} ))\n          local dec_speed=$(_speed_from_output \"${dec_output}\")\n\n          # For JPEG lossless recompression modes (where the original is a JPEG)\n          # decode to JPG as well.\n          local jpeg_dec_mps_speed=\"\"\n          local jpeg_dec_mbs_speed=\"\"\n          if [[ \"${src_ext}\" == \"jpg\" ]]; then\n            wait_for_temp\n            local dec_file=\"${BUILD_DIR}/arm_benchmark/${enc_file_hash}.jpg\"\n            dec_output=$(\"${TOOLS_DIR}/djxl\" \"${enc_file}\" \\\n              \"${dec_file}\" --num_reps=5 --num_threads=\"${num_threads}\" 2>&1 | \\\n                tee /dev/stderr | grep -E \"M[BP]/s \\[\")\n            local jpeg_dec_mps_speed=$(_speed_from_output \"${dec_output}\")\n            local jpeg_dec_mbs_speed=$(_speed_from_output \"${dec_output}\" MB/s)\n            if ! cmp --quiet \"${src_img}\" \"${dec_file}\"; then\n              # Add a start at the end to signal that the files are different.\n              jpeg_dec_mbs_speed+=\"*\"\n            fi\n          fi\n\n          # Record entry in a tab-separated file.\n          local src_img_base=$(basename \"${src_img}\")\n          echo -e \"${enc_binary_base}\\t${flags}\\t${src_img_base}\\t${img_size}\\t${img_size_px}\\t${cpu_conf}\\t${enc_size}\\t${enc_speed}\\t${dec_speed}\\t${jpeg_dec_mps_speed}\\t${jpeg_dec_mbs_speed}\" |\n            tee -a \"${runs_file}\"\n        done\n      done\n    done\n  done\n  cmd_cpuset \"${RUNNER_CPU_ALL:-}\"\n  cat \"${runs_file}\"\n\n}\n\n# Generate a corpus and run the fuzzer on that corpus.\ncmd_fuzz() {\n  local corpus_dir=$(realpath \"${BUILD_DIR}/fuzzer_corpus\")\n  local fuzzer_crash_dir=$(realpath \"${BUILD_DIR}/fuzzer_crash\")\n  mkdir -p \"${corpus_dir}\" \"${fuzzer_crash_dir}\"\n  # Generate step.\n  \"${TOOLS_DIR}/fuzzer_corpus\" \"${corpus_dir}\"\n  # Run step:\n  local nprocs=$(nproc --all || echo 1)\n  (\n   cd \"${TOOLS_DIR}\"\n   djxl_fuzzer \"${fuzzer_crash_dir}\" \"${corpus_dir}\" \\\n     -max_total_time=\"${FUZZER_MAX_TIME}\" -jobs=${nprocs} \\\n     -artifact_prefix=\"${fuzzer_crash_dir}/\"\n  )\n}\n\n# Runs the linters (clang-format, build_cleaner, buildirier) on the pending CLs.\ncmd_lint() {\n  merge_request_commits\n  { set +x; } 2>/dev/null\n  local versions=(${1:-16 15 14 13 12 11 10 9 8 7 6.0})\n  local clang_format_bins=(\"${versions[@]/#/clang-format-}\" clang-format)\n  local tmpdir=$(mktemp -d)\n  CLEANUP_FILES+=(\"${tmpdir}\")\n\n  local ret=0\n  local build_patch=\"${tmpdir}/build_cleaner.patch\"\n  if ! \"${MYDIR}/tools/scripts/build_cleaner.py\" >\"${build_patch}\"; then\n    ret=1\n    echo \"build_cleaner.py findings:\" >&2\n    \"${COLORDIFF_BIN}\" <\"${build_patch}\"\n    echo \"Run \\`tools/scripts/build_cleaner.py --update\\` to apply them\" >&2\n  fi\n\n  # It is ok, if buildifier is not installed.\n  if which buildifier >/dev/null; then\n    local buildifier_patch=\"${tmpdir}/buildifier.patch\"\n    local bazel_files=`git -C \"${MYDIR}\" ls-files | grep -E \"/BUILD$|WORKSPACE|.bzl$\"`\n    set -x\n    buildifier -d ${bazel_files} >\"${buildifier_patch}\"|| true\n    { set +x; } 2>/dev/null\n    if [ -s \"${buildifier_patch}\" ]; then\n      ret=1\n      echo 'buildifier have found some problems in Bazel build files:' >&2\n      \"${COLORDIFF_BIN}\" <\"${buildifier_patch}\"\n      echo 'To fix them run (from the base directory):' >&2\n      echo '  buildifier `git ls-files | grep -E \"/BUILD$|WORKSPACE|.bzl$\"`' >&2\n    fi\n  fi\n\n  # It is ok, if spell-checker is not installed.\n  if which typos >/dev/null; then\n    local src_ext=\"bazel|bzl|c|cc|cmake|gni|h|html|in|java|js|m|md|nix|py|rst|sh|ts|txt|yaml|yml\"\n    local sources=`git -C \"${MYDIR}\" ls-files | grep -E \"\\.(${src_ext})$\"`\n    typos -c \"${MYDIR}/tools/scripts/typos.toml\" ${sources}\n  else\n    echo \"Consider installing https://github.com/crate-ci/typos for spell-checking\"\n  fi\n\n  local installed=()\n  local clang_patch\n  local clang_format\n  for clang_format in \"${clang_format_bins[@]}\"; do\n    if ! which \"${clang_format}\" >/dev/null; then\n      continue\n    fi\n    installed+=(\"${clang_format}\")\n    local tmppatch=\"${tmpdir}/${clang_format}.patch\"\n    # We include in this linter all the changes including the uncommitted changes\n    # to avoid printing changes already applied.\n    set -x\n    # Ignoring the error that git-clang-format outputs.\n    git -C \"${MYDIR}\" \"${clang_format}\" --binary \"${clang_format}\" \\\n      --style=file --diff \"${MR_ANCESTOR_SHA}\" -- >\"${tmppatch}\" || true\n    { set +x; } 2>/dev/null\n    if grep -E '^--- ' \"${tmppatch}\" | grep -v 'a/third_party' >/dev/null; then\n      if [[ -n \"${LINT_OUTPUT:-}\" ]]; then\n        cp \"${tmppatch}\" \"${LINT_OUTPUT}\"\n      fi\n      clang_patch=\"${tmppatch}\"\n    else\n      echo \"clang-format check OK\" >&2\n      return ${ret}\n    fi\n  done\n\n  if [[ ${#installed[@]} -eq 0 ]]; then\n    echo \"You must install clang-format for \\\"git clang-format\\\"\" >&2\n    exit 1\n  fi\n\n  # clang-format is installed but found problems.\n  echo \"clang-format findings:\" >&2\n  \"${COLORDIFF_BIN}\" < \"${clang_patch}\"\n\n  echo \"clang-format found issues in your patches from ${MR_ANCESTOR_SHA}\" \\\n    \"to the current patch. Run \\`./ci.sh lint | patch -p1\\` from the base\" \\\n    \"directory to apply them.\" >&2\n  exit 1\n}\n\n# Runs clang-tidy on the pending CLs. If the \"all\" argument is passed it runs\n# clang-tidy over all the source files instead.\ncmd_tidy() {\n  local what=\"${1:-}\"\n\n  if [[ -z \"${CLANG_TIDY_BIN}\" ]]; then\n    echo \"ERROR: You must install clang-tidy-7 or newer to use ci.sh tidy\" >&2\n    exit 1\n  fi\n\n  local git_args=()\n  if [[ \"${what}\" == \"all\" ]]; then\n    git_args=(ls-files)\n    shift\n  else\n    merge_request_commits\n    git_args=(\n        diff-tree --no-commit-id --name-only -r \"${MR_ANCESTOR_SHA}\"\n        \"${MR_HEAD_SHA}\"\n    )\n  fi\n\n  # Clang-tidy needs the compilation database generated by cmake.\n  if [[ ! -e \"${BUILD_DIR}/compile_commands.json\" ]]; then\n    # Generate the build options in debug mode, since we need the debug asserts\n    # enabled for the clang-tidy analyzer to use them.\n    CMAKE_BUILD_TYPE=\"Debug\"\n    cmake_configure\n    # Build the autogen targets to generate the .h files from the .ui files.\n    local autogen_targets=(\n        $(ninja -C \"${BUILD_DIR}\" -t targets | grep -F _autogen: |\n          cut -f 1 -d :)\n    )\n    if [[ ${#autogen_targets[@]} != 0 ]]; then\n      ninja -C \"${BUILD_DIR}\" \"${autogen_targets[@]}\"\n    fi\n  fi\n\n  cd \"${MYDIR}\"\n  local nprocs=$(nproc --all || echo 1)\n  local ret=0\n  if ! parallel -j\"${nprocs}\" --keep-order -- \\\n      \"${CLANG_TIDY_BIN}\" -p \"${BUILD_DIR}\" -format-style=file -quiet \"$@\" {} \\\n      < <(git \"${git_args[@]}\" | grep -E '(\\.cc|\\.cpp)$') \\\n      >\"${BUILD_DIR}/clang-tidy.txt\"; then\n    ret=1\n  fi\n  { set +x; } 2>/dev/null\n  echo \"Findings statistics:\" >&2\n  grep -E ' \\[[A-Za-z\\.,\\-]+\\]' -o \"${BUILD_DIR}/clang-tidy.txt\" | sort \\\n    | uniq -c >&2\n\n  if [[ $ret -ne 0 ]]; then\n    cat >&2 <<EOF\nErrors found, see ${BUILD_DIR}/clang-tidy.txt for details.\nTo automatically fix them, run:\n\n  SKIP_TEST=1 ./ci.sh debug\n  ${CLANG_TIDY_BIN} -p ${BUILD_DIR} -fix -format-style=file -quiet $@ \\$(git ${git_args[@]} | grep -E '(\\.cc|\\.cpp)\\$')\nEOF\n  fi\n\n  return ${ret}\n}\n\n# Print stats about all the packages built in ${BUILD_DIR}/debs/.\ncmd_debian_stats() {\n  { set +x; } 2>/dev/null\n  local debsdir=\"${BUILD_DIR}/debs\"\n  local f\n  while IFS='' read -r -d '' f; do\n    echo \"=====================================================================\"\n    echo \"Package $f:\"\n    dpkg --info $f\n    dpkg --contents $f\n  done < <(find \"${BUILD_DIR}/debs\" -maxdepth 1 -mindepth 1 -type f \\\n           -name '*.deb' -print0)\n}\n\nbuild_debian_pkg() {\n  local srcdir=\"$1\"\n  local srcpkg=\"$2\"\n  local options=\"${3:-}\"\n\n  local debsdir=\"${BUILD_DIR}/debs\"\n  local builddir=\"${debsdir}/${srcpkg}\"\n\n  # debuild doesn't have an easy way to build out of tree, so we make a copy\n  # of with all symlinks on the first level.\n  mkdir -p \"${builddir}\"\n  for f in $(find \"${srcdir}\" -mindepth 1 -maxdepth 1 -printf '%P\\n'); do\n    if [[ ! -L \"${builddir}/$f\" ]]; then\n      rm -f \"${builddir}/$f\"\n      ln -s \"${srcdir}/$f\" \"${builddir}/$f\"\n    fi\n  done\n  (\n    cd \"${builddir}\"\n    debuild \"${options}\" -b -uc -us\n  )\n}\n\ncmd_debian_build() {\n  local srcpkg=\"${1:-}\"\n\n  case \"${srcpkg}\" in\n    jpeg-xl)\n      build_debian_pkg \"${MYDIR}\" \"jpeg-xl\"\n      ;;\n    highway)\n      build_debian_pkg \"${MYDIR}/third_party/highway\" \"highway\" \"${HWY_PKG_OPTIONS}\"\n      ;;\n    *)\n      echo \"ERROR: Must pass a valid source package name to build.\" >&2\n      ;;\n  esac\n}\n\nget_version() {\n  local varname=$1\n  local line=$(grep -F \"set(${varname} \" lib/CMakeLists.txt | head -n 1)\n  [[ -n \"${line}\" ]]\n  line=\"${line#set(${varname} }\"\n  line=\"${line%)}\"\n  echo \"${line}\"\n}\n\ncmd_bump_version() {\n  local newver=\"${1:-}\"\n\n  if ! which dch >/dev/null; then\n    echo \"Missing dch\\nTo install it run:\\n  sudo apt install devscripts\"\n    exit 1\n  fi\n\n  if [[ -z \"${newver}\" ]]; then\n    local major=$(get_version JPEGXL_MAJOR_VERSION)\n    local minor=$(get_version JPEGXL_MINOR_VERSION)\n    local patch=0\n    minor=$(( ${minor}  + 1))\n  else\n    local major=\"${newver%%.*}\"\n    newver=\"${newver#*.}\"\n    local minor=\"${newver%%.*}\"\n    newver=\"${newver#${minor}}\"\n    local patch=\"${newver#.}\"\n    if [[ -z \"${patch}\" ]]; then\n      patch=0\n    fi\n  fi\n\n  newver=\"${major}.${minor}.${patch}\"\n\n  echo \"Bumping version to ${newver} (${major}.${minor}.${patch})\"\n  sed -E \\\n    -e \"s/(set\\\\(JPEGXL_MAJOR_VERSION) [0-9]+\\\\)/\\\\1 ${major})/\" \\\n    -e \"s/(set\\\\(JPEGXL_MINOR_VERSION) [0-9]+\\\\)/\\\\1 ${minor})/\" \\\n    -e \"s/(set\\\\(JPEGXL_PATCH_VERSION) [0-9]+\\\\)/\\\\1 ${patch})/\" \\\n    -i lib/CMakeLists.txt\n  sed -E \\\n    -e \"s/(LIBJXL_VERSION: )\\\"[0-9.]+\\\"/\\\\1\\\"${major}.${minor}.${patch}\\\"/\" \\\n    -e \"s/(LIBJXL_ABI_VERSION: )\\\"[0-9.]+\\\"/\\\\1\\\"${major}.${minor}\\\"/\" \\\n    -i .github/workflows/conformance.yml\n\n  # Update lib.gni\n  tools/scripts/build_cleaner.py --update\n\n  # Mark the previous version as \"unstable\".\n  DEBCHANGE_RELEASE_HEURISTIC=log dch -M --distribution unstable --release ''\n  DEBCHANGE_RELEASE_HEURISTIC=log dch -M \\\n    --newversion \"${newver}\" \\\n    \"Bump JPEG XL version to ${newver}.\"\n}\n\n# Check that the AUTHORS file contains the email of the committer.\ncmd_authors() {\n  merge_request_commits\n  local emails\n  local names\n  readarray -t emails < <(git log --format='%ae' \"${MR_ANCESTOR_SHA}..${MR_HEAD_SHA}\")\n  readarray -t names < <(git log --format='%an' \"${MR_ANCESTOR_SHA}..${MR_HEAD_SHA}\")\n  for i in \"${!names[@]}\"; do\n    echo \"Checking name '${names[$i]}' with email '${emails[$i]}' ...\"\n    \"${MYDIR}\"/tools/scripts/check_author.py \"${emails[$i]}\" \"${names[$i]}\"\n  done\n}\n\nmain() {\n  local cmd=\"${1:-}\"\n  if [[ -z \"${cmd}\" ]]; then\n    cat >&2 <<EOF\nUse: $0 CMD\n\nWhere cmd is one of:\n opt       Build and test a Release with symbols build.\n debug     Build and test a Debug build (NDEBUG is not defined).\n release   Build and test a striped Release binary without debug information.\n asan      Build and test an ASan (AddressSanitizer) build.\n msan      Build and test an MSan (MemorySanitizer) build. Needs to have msan\n           c++ libs installed with msan_install first.\n tsan      Build and test a TSan (ThreadSanitizer) build.\n asanfuzz  Build and test an ASan (AddressSanitizer) build for fuzzing.\n msanfuzz  Build and test an MSan (MemorySanitizer) build for fuzzing.\n test      Run the tests build by opt, debug, release, asan or msan. Useful when\n           building with SKIP_TEST=1.\n gbench    Run the Google benchmark tests.\n fuzz      Generate the fuzzer corpus and run the fuzzer on it. Useful after\n           building with asan or msan.\n benchmark Run the benchmark over the default corpus.\n fast_benchmark Run the benchmark over the small corpus.\n\n coverage  Build and run tests with coverage support. Runs coverage_report as\n           well.\n coverage_report Generate HTML, XML and text coverage report after a coverage\n           run.\n\n lint      Run the linter checks on the current commit or merge request.\n tidy      Run clang-tidy on the current commit or merge request.\n authors   Check that the last commit's author is listed in the AUTHORS file.\n\n msan_install Install the libc++ libraries required to build in msan mode. This\n              needs to be done once.\n\n debian_build <srcpkg> Build the given source package.\n debian_stats  Print stats about the built packages.\n\noss-fuzz commands:\n ossfuzz_asan   Build the local source inside oss-fuzz docker with asan.\n ossfuzz_msan   Build the local source inside oss-fuzz docker with msan.\n ossfuzz_ubsan  Build the local source inside oss-fuzz docker with ubsan.\n ossfuzz_ninja  Run ninja on the BUILD_DIR inside the oss-fuzz docker. Extra\n                parameters are passed to ninja, for example \"djxl_fuzzer\" will\n                only build that ninja target. Use for faster build iteration\n                after one of the ossfuzz_*san commands.\n\nYou can pass some optional environment variables as well:\n - BUILD_DIR: The output build directory (by default \"$$repo/build\")\n - BUILD_TARGET: The target triplet used when cross-compiling.\n - CMAKE_FLAGS: Convenience flag to pass both CMAKE_C_FLAGS and CMAKE_CXX_FLAGS.\n - CMAKE_PREFIX_PATH: Installation prefixes to be searched by the find_package.\n - ENABLE_WASM_SIMD=1: enable experimental SIMD in WASM build (only).\n - FUZZER_MAX_TIME: \"fuzz\" command fuzzer running timeout in seconds.\n - LINT_OUTPUT: Path to the output patch from the \"lint\" command.\n - SKIP_CPUSET=1: Skip modifying the cpuset in the arm_benchmark.\n - SKIP_BUILD=1: Skip the build stage, cmake configure only.\n - SKIP_TEST=1: Skip the test stage.\n - STORE_IMAGES=0: Makes the benchmark discard the computed images.\n - TEST_STACK_LIMIT: Stack size limit (ulimit -s) during tests, in KiB.\n - TEST_SELECTOR: pass additional arguments to ctest, e.g. \"-R .Resample.\".\n - STACK_SIZE=1: Generate binaries with the .stack_sizes sections.\n\nThese optional environment variables are forwarded to the cmake call as\nparameters:\n - CMAKE_BUILD_TYPE\n - CMAKE_C_FLAGS\n - CMAKE_CXX_FLAGS\n - CMAKE_C_COMPILER_LAUNCHER\n - CMAKE_CXX_COMPILER_LAUNCHER\n - CMAKE_CROSSCOMPILING_EMULATOR\n - CMAKE_FIND_ROOT_PATH\n - CMAKE_EXE_LINKER_FLAGS\n - CMAKE_MAKE_PROGRAM\n - CMAKE_MODULE_LINKER_FLAGS\n - CMAKE_SHARED_LINKER_FLAGS\n - CMAKE_TOOLCHAIN_FILE\n\nExample:\n  BUILD_DIR=/tmp/build $0 opt\nEOF\n    exit 1\n  fi\n\n  cmd=\"cmd_${cmd}\"\n  shift\n  set -x\n  \"${cmd}\" \"$@\"\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake_uninstall.cmake.in",
          "type": "blob",
          "size": 1.4501953125,
          "content": "# see  https://gitlab.kitware.com/cmake/community/-/wikis/FAQ#can-i-do-make-uninstall-with-cmake\n\nif(NOT EXISTS \"@CMAKE_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_BINARY_DIR@/install_manifest.txt\")\nendif()\n\n# Read the install manifest\nfile(READ \"@CMAKE_BINARY_DIR@/install_manifest.txt\" files)\nstring(REGEX REPLACE \"\\n\" \";\" files \"${files}\")\n\n# Uninstall files\nforeach(file ${files})\n  message(STATUS \"Uninstalling $ENV{DESTDIR}${file}\")\n  if(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")\n    execute_process(\n      COMMAND \"@CMAKE_COMMAND@\" -E remove \"$ENV{DESTDIR}${file}\"\n      OUTPUT_VARIABLE rm_out\n      RESULT_VARIABLE rm_retval\n    )\n    if(NOT \"${rm_retval}\" STREQUAL 0)\n      message(FATAL_ERROR \"Problem when removing $ENV{DESTDIR}${file}\")\n    endif()\n  else(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")\n    message(STATUS \"File $ENV{DESTDIR}${file} does not exist.\")\n  endif()\nendforeach()\n\n# Remove empty directories\nforeach(file ${files})\n  get_filename_component(dir \"$ENV{DESTDIR}${file}\" DIRECTORY)\n  while(NOT \"${dir}\" STREQUAL \"/\" AND EXISTS \"${dir}\")\n    file(GLOB dir_content \"${dir}/*\")\n    if(dir_content)\n      break()  # Directory is not empty, stop removing\n    endif()\n    message(STATUS \"Removing empty directory ${dir}\")\n    file(REMOVE_RECURSE \"${dir}\")\n    get_filename_component(dir \"${dir}\" DIRECTORY)  # Move up one directory\n  endwhile()\nendforeach()\n\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps.sh",
          "type": "blob",
          "size": 3.060546875,
          "content": "#!/usr/bin/env bash\n# Copyright (c) the JPEG XL Project Authors. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# This file downloads the dependencies needed to build JPEG XL into third_party.\n# These dependencies are normally pulled by git.\n\nset -eu\n\nSELF=$(realpath \"$0\")\nMYDIR=$(dirname \"${SELF}\")\n\n# Git revisions we use for the given submodules. Update these whenever you\n# update a git submodule.\nTESTDATA=\"873045a9c42ed60721756e26e2a6b32e17415205\"\nTHIRD_PARTY_BROTLI=\"36533a866ed1ca4b75cf049f4521e4ec5fe24727\"\nTHIRD_PARTY_GOOGLETEST=\"58d77fa8070e8cec2dc1ed015d66b454c8d78850\"\nTHIRD_PARTY_HIGHWAY=\"457c891775a7397bdb0376bb1031e6e027af1c48\" # v1.2.0\nTHIRD_PARTY_SKCMS=\"b2e692629c1fb19342517d7fb61f1cf83d075492\"\nTHIRD_PARTY_SJPEG=\"e5ab13008bb214deb66d5f3e17ca2f8dbff150bf\"\nTHIRD_PARTY_ZLIB=\"51b7f2abdade71cd9bb0e7a373ef2610ec6f9daf\" # v1.3.1\nTHIRD_PARTY_LIBPNG=\"f135775ad4e5d4408d2e12ffcc71bb36e6b48551\" # v1.6.40\nTHIRD_PARTY_LIBJPEG_TURBO=\"8ecba3647edb6dd940463fedf38ca33a8e2a73d1\" # 2.1.5.1\n\n# Download the target revision from GitHub.\ndownload_github() {\n  local path=\"$1\"\n  local project=\"$2\"\n\n  local varname=`echo \"$path\" | tr '[:lower:]' '[:upper:]'`\n  varname=\"${varname//[\\/-]/_}\"\n  local sha\n  eval \"sha=\\${${varname}}\"\n\n  local down_dir=\"${MYDIR}/downloads\"\n  local local_fn=\"${down_dir}/${sha}.tar.gz\"\n  if [[ -e \"${local_fn}\" && -d \"${MYDIR}/${path}\" ]]; then\n    echo \"${path} already up to date.\" >&2\n    return 0\n  fi\n\n  local url\n  local strip_components=0\n  if [[ \"${project:0:4}\" == \"http\" ]]; then\n    # \"project\" is a googlesource.com base url.\n    url=\"${project}${sha}.tar.gz\"\n  else\n    # GitHub files have a top-level directory\n    strip_components=1\n    url=\"https://github.com/${project}/tarball/${sha}\"\n  fi\n\n  echo \"Downloading ${path} version ${sha}...\" >&2\n  mkdir -p \"${down_dir}\"\n  curl -L --show-error -o \"${local_fn}.tmp\" \"${url}\"\n  mkdir -p \"${MYDIR}/${path}\"\n  tar -zxf \"${local_fn}.tmp\" -C \"${MYDIR}/${path}\" \\\n    --strip-components=\"${strip_components}\"\n  mv \"${local_fn}.tmp\" \"${local_fn}\"\n}\n\nis_git_repository() {\n    local dir=\"$1\"\n    local toplevel=$(git rev-parse --show-toplevel)\n\n    [[ \"${dir}\" == \"${toplevel}\" ]]\n}\n\n\nmain() {\n  if is_git_repository \"${MYDIR}\"; then\n    cat >&2 <<EOF\nCurrent directory is a git repository, downloading dependencies via git:\n\n  git submodule update --init --recursive\n\nEOF\n    git -C \"${MYDIR}\" submodule update --init --recursive --depth 1 --recommend-shallow\n    return 0\n  fi\n\n  # Sources downloaded from a tarball.\n  download_github testdata libjxl/testdata\n  download_github third_party/brotli google/brotli\n  download_github third_party/googletest google/googletest\n  download_github third_party/highway google/highway\n  download_github third_party/sjpeg webmproject/sjpeg\n  download_github third_party/skcms \\\n    \"https://skia.googlesource.com/skcms/+archive/\"\n  download_github third_party/zlib madler/zlib\n  download_github third_party/libpng glennrp/libpng\n  download_github third_party/libjpeg-turbo libjpeg-turbo/libjpeg-turbo\n  echo \"Done.\"\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4619140625,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1731533236,\n        \"narHash\": \"sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"11707dc2f618dd54ca8739b309ec4fc024de578b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1735471104,\n        \"narHash\": \"sha256-0q9NGQySwDQc7RhAV2ukfnu7Gxa5/ybJ2ANT8DQrQrs=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"88195a94f390381c6afcdaa933c2f6ff93959cb4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.8408203125,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem\n      (system:\n        let\n          pkgs = import nixpkgs {\n            inherit system;\n          };\n        in\n        with pkgs;\n        {\n          devShells.default = mkShell {\n            buildInputs = [\n              clang\n              cmake\n              pkg-config\n              gtest\n              doxygen\n              graphviz\n              python3\n              libclang.python\n              libpng\n              giflib\n              lcms2\n              brotli\n              ninja\n            ];\n            shellHook = ''\n              export CC=clang\n              export CXX=clang++\n            '';\n          };\n        }\n      );\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "commit",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}