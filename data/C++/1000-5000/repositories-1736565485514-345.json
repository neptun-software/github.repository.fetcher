{
  "metadata": {
    "timestamp": 1736565485514,
    "page": 345,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KhronosGroup/glslang",
      "stars": 3137,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.3701171875,
          "content": "Language: Cpp\nIndentWidth: 4\nPointerAlignment: Left\nBreakBeforeBraces: Custom\nBraceWrapping: { AfterFunction: true, AfterControlStatement: false }\nIndentCaseLabels: false\nReflowComments: false\nColumnLimit: 120\nAccessModifierOffset: -4\nAlignTrailingComments: true\nAllowShortBlocksOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5107421875,
          "content": "# test files have a mix of lf/crlf, and that's a good thing, for testing, don't mess with it\n# bash scripts need lines ending with lf, and that's correct for Windows too, e.g., under Cygwin\n# (scripts often don't have a suffix)\n* -text\n*.sh text eof=lf\n\n# txt files should be native and normalized\n*.txt text\n\n# source code can be native and normalized, but simpler if lf everywhere; will try that way\n*.h text eol=lf\n*.c text eol=lf\n*.cpp text eol=lf\n*.y text eol=lf\n*.out text eol=lf\n*.conf text eol=lf\n*.err text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.24609375,
          "content": "*.o\n*.a\n*.so\n*.exe\n.vscode/\ntags\nTAGS\nbazel-*\nbuild/\nTest/localResults/\nExternal/googletest\nExternal/spirv-tools\nout/\nCMakeUserPresets.json\n\n# GN generated files\n.cipd/\n*.gclient_entries\nthird_party/\nbuildtools/\ntools/\n\n# Random OS stuff\n.DS_Store\n._*\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 1.666015625,
          "content": "# Copyright (C) 2020 The Khronos Group Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of The Khronos Group Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nbuildconfig = \"//build/config/BUILDCONFIG.gn\"\n\ndefault_args = {\n    clang_use_chrome_plugins = false\n    use_custom_libcxx = false\n}\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.2138671875,
          "content": "Faith Ekstrand <faith.ekstrand@collabora.com> <jason@jlekstrand.net>\nFaith Ekstrand <faith.ekstrand@collabora.com> <jason.ekstrand@intel.com>\nFaith Ekstrand <faith.ekstrand@collabora.com> <jason.ekstrand@collabora.com>\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 5.6708984375,
          "content": "# Copyright (C) 2020-2023 The Khronos Group Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of The Khronos Group Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nLOCAL_PATH := $(call my-dir)\n\n# Generate glslang/build_info.h\nGLSLANG_GENERATED_INCLUDEDIR:=$(TARGET_OUT)/include\nGLSLANG_BUILD_INFO_H:=$(GLSLANG_GENERATED_INCLUDEDIR)/glslang/build_info.h\n\ndefine gen_glslang_build_info_h\n$(call generate-file-dir,$(GLSLANG_GENERATED_INCLUDEDIR)/dummy_filename)\n$(GLSLANG_BUILD_INFO_H): \\\n\t\t$(LOCAL_PATH)/build_info.py \\\n\t\t$(LOCAL_PATH)/build_info.h.tmpl \\\n\t\t$(LOCAL_PATH)/CHANGES.md\n\t\t@$(HOST_PYTHON) $(LOCAL_PATH)/build_info.py \\\n\t\t\t\t\t\t$(LOCAL_PATH) \\\n\t\t\t\t\t\t-i $(LOCAL_PATH)/build_info.h.tmpl \\\n\t\t\t\t\t\t-o $(GLSLANG_BUILD_INFO_H)\n\t\t@echo \"[$(TARGET_ARCH_ABI)] Generate       : $(GLSLANG_BUILD_INFO_H) <= CHANGES.md\"\nendef\n$(eval $(call gen_glslang_build_info_h))\n\nGLSLANG_OS_FLAGS := -DGLSLANG_OSINCLUDE_UNIX\n# AMD and NV extensions are turned on by default in upstream Glslang.\nGLSLANG_DEFINES:= -DENABLE_HLSL $(GLSLANG_OS_FLAGS)\n\ninclude $(CLEAR_VARS)\nLOCAL_MODULE:=OSDependent\nLOCAL_CXXFLAGS:=-std=c++17 -fno-exceptions -fno-rtti $(GLSLANG_DEFINES)\nLOCAL_EXPORT_C_INCLUDES:=$(LOCAL_PATH)\nLOCAL_SRC_FILES:=glslang/stub.cpp\nLOCAL_C_INCLUDES:=$(LOCAL_PATH)\ninclude $(BUILD_STATIC_LIBRARY)\n\ninclude $(CLEAR_VARS)\nGLSLANG_OUT_PATH=$(if $(call host-path-is-absolute,$(TARGET_OUT)),$(TARGET_OUT),$(abspath $(TARGET_OUT)))\n\n# ShaderLang.cpp depends on the generated build_info.h\n$(LOCAL_PATH)/glslang/MachineIndependent/ShaderLang.cpp: \\\n\t$(GLSLANG_BUILD_INFO_H)\n\nLOCAL_MODULE:=glslang\nLOCAL_CXXFLAGS:=-std=c++17 -fno-exceptions -fno-rtti $(GLSLANG_DEFINES)\nLOCAL_EXPORT_C_INCLUDES:=$(LOCAL_PATH) \\\n\t$(LOCAL_PATH)/glslang/OSDependent/Unix\nLOCAL_SRC_FILES:= \\\n\t\tglslang/CInterface/glslang_c_interface.cpp \\\n\t\tglslang/GenericCodeGen/CodeGen.cpp \\\n\t\tglslang/GenericCodeGen/Link.cpp \\\n\t\tglslang/HLSL/hlslAttributes.cpp \\\n\t\tglslang/HLSL/hlslGrammar.cpp \\\n\t\tglslang/HLSL/hlslOpMap.cpp \\\n\t\tglslang/HLSL/hlslParseables.cpp \\\n\t\tglslang/HLSL/hlslParseHelper.cpp \\\n\t\tglslang/HLSL/hlslScanContext.cpp \\\n\t\tglslang/HLSL/hlslTokenStream.cpp \\\n\t\tglslang/MachineIndependent/attribute.cpp \\\n\t\tglslang/MachineIndependent/Constant.cpp \\\n\t\tglslang/MachineIndependent/glslang_tab.cpp \\\n\t\tglslang/MachineIndependent/InfoSink.cpp \\\n\t\tglslang/MachineIndependent/Initialize.cpp \\\n\t\tglslang/MachineIndependent/Intermediate.cpp \\\n\t\tglslang/MachineIndependent/intermOut.cpp \\\n\t\tglslang/MachineIndependent/IntermTraverse.cpp \\\n\t\tglslang/MachineIndependent/iomapper.cpp \\\n\t\tglslang/MachineIndependent/limits.cpp \\\n\t\tglslang/MachineIndependent/linkValidate.cpp \\\n\t\tglslang/MachineIndependent/parseConst.cpp \\\n\t\tglslang/MachineIndependent/ParseContextBase.cpp \\\n\t\tglslang/MachineIndependent/ParseHelper.cpp \\\n\t\tglslang/MachineIndependent/PoolAlloc.cpp \\\n\t\tglslang/MachineIndependent/propagateNoContraction.cpp \\\n\t\tglslang/MachineIndependent/reflection.cpp \\\n\t\tglslang/MachineIndependent/RemoveTree.cpp \\\n\t\tglslang/MachineIndependent/Scan.cpp \\\n\t\tglslang/MachineIndependent/ShaderLang.cpp \\\n\t\tglslang/MachineIndependent/SpirvIntrinsics.cpp \\\n\t\tglslang/MachineIndependent/SymbolTable.cpp \\\n\t\tglslang/MachineIndependent/Versions.cpp \\\n\t\tglslang/MachineIndependent/preprocessor/PpAtom.cpp \\\n\t\tglslang/MachineIndependent/preprocessor/PpContext.cpp \\\n\t\tglslang/MachineIndependent/preprocessor/Pp.cpp \\\n\t\tglslang/MachineIndependent/preprocessor/PpScanner.cpp \\\n\t\tglslang/MachineIndependent/preprocessor/PpTokens.cpp \\\n\t\tglslang/OSDependent/Unix/ossource.cpp \\\n\t\tSPIRV/CInterface/spirv_c_interface.cpp \\\n\t\tSPIRV/GlslangToSpv.cpp \\\n\t\tSPIRV/InReadableOrder.cpp \\\n\t\tSPIRV/Logger.cpp \\\n\t\tSPIRV/SPVRemapper.cpp \\\n\t\tSPIRV/SpvBuilder.cpp \\\n\t\tSPIRV/SpvPostProcess.cpp \\\n\t\tSPIRV/SpvTools.cpp \\\n\t\tSPIRV/disassemble.cpp \\\n\t\tSPIRV/doc.cpp\nLOCAL_C_INCLUDES:=$(LOCAL_PATH) \\\n\t$(LOCAL_PATH)/glslang/MachineIndependent \\\n\t$(LOCAL_PATH)/glslang/OSDependent/Unix \\\n\t$(LOCAL_PATH)/SPIRV \\\n\t$(GLSLANG_GENERATED_INCLUDEDIR) \\\n\t$(GLSLANG_OUT_PATH)\ninclude $(BUILD_STATIC_LIBRARY)\n\ninclude $(CLEAR_VARS)\n\n# GlslangToSpv.cpp depends on the generated build_info.h\n$(LOCAL_PATH)/SPIRV/GlslangToSpv.cpp: \\\n\t$(GLSLANG_BUILD_INFO_H)\n\nLOCAL_MODULE:=SPIRV\nLOCAL_CXXFLAGS:=-std=c++17 -fno-exceptions -fno-rtti -Werror $(GLSLANG_DEFINES)\nLOCAL_SRC_FILES:=glslang/stub.cpp\nLOCAL_C_INCLUDES:=$(LOCAL_PATH)\nLOCAL_EXPORT_C_INCLUDES:=$(LOCAL_PATH)\ninclude $(BUILD_STATIC_LIBRARY)\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 11.021484375,
          "content": "# Copyright (C) 2018 Google, Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of Google Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nimport(\"//build_overrides/glslang.gni\")\n\n# Both Chromium and Fuchsia use by default a set of warning errors\n# that is far too strict to compile this project. These are also\n# typically appended after |cflags|, overriding target-specific\n# definitions. To work around this, determine which configs to\n# add and remove in order to succesfully build the project.\nif (defined(is_fuchsia_tree) && is_fuchsia_tree) {\n  _configs_to_remove = [ \"//build/config:default_warnings\" ]\n  _configs_to_add = []\n} else {\n  _configs_to_remove = [ \"//build/config/compiler:chromium_code\" ]\n  _configs_to_add = [ \"//build/config/compiler:no_chromium_code\" ]\n}\n\naction(\"glslang_build_info\") {\n  script = \"build_info.py\"\n\n  src_dir = \".\"\n  changes_file = \"CHANGES.md\"\n  template_file = \"build_info.h.tmpl\"\n  out_file = \"${target_gen_dir}/include/glslang/build_info.h\"\n\n  inputs = [\n    changes_file,\n    script,\n    template_file,\n  ]\n  outputs = [ out_file ]\n  args = [\n    rebase_path(src_dir, root_build_dir),\n    \"-i\",\n    rebase_path(template_file, root_build_dir),\n    \"-o\",\n    rebase_path(out_file, root_build_dir),\n  ]\n}\n\naction(\"glslang_extension_headers\") {\n  script = \"gen_extension_headers.py\"\n\n  out_file = \"${target_gen_dir}/include/glslang/glsl_intrinsic_header.h\"\n\n  # Fuchsia GN build rules require all GN actions to be hermetic and they\n  # should correctly and fully state their inputs and outpus (see\n  # https://fuchsia.dev/fuchsia-src/development/build/hermetic_actions\n  # for details). All input files of the script should be added to the\n  # |sources| list.\n  sources = [\n    \"glslang/ExtensionHeaders/GL_EXT_shader_realtime_clock.glsl\",\n  ]\n\n  inputs = [\n    script\n  ]\n  outputs = [ out_file ]\n  args = [\n    \"-i\",\n    rebase_path(\"glslang/ExtensionHeaders\", root_build_dir),\n    \"-o\",\n    rebase_path(out_file, root_build_dir),\n  ]\n}\n\nspirv_tools_dir = glslang_spirv_tools_dir\n\nconfig(\"glslang_public\") {\n  include_dirs = [ \".\" ]\n  if (!is_win || is_clang) {\n    cflags = [ \"-Wno-conversion\" ]\n  }\n}\n\nconfig(\"glslang_hlsl\") {\n  defines = [ \"ENABLE_HLSL=1\" ]\n}\n\ntemplate(\"glslang_sources_common\") {\n  source_set(target_name) {\n    public_configs = [ \":glslang_public\" ]\n\n    if (invoker.enable_hlsl) {\n      public_configs += [ \":glslang_hlsl\" ]\n    }\n\n    sources = [\n      \"SPIRV/GLSL.ext.AMD.h\",\n      \"SPIRV/GLSL.ext.EXT.h\",\n      \"SPIRV/GLSL.ext.KHR.h\",\n      \"SPIRV/GLSL.ext.NV.h\",\n      \"SPIRV/GLSL.ext.ARM.h\",\n      \"SPIRV/GLSL.ext.QCOM.h\",\n      \"SPIRV/GLSL.std.450.h\",\n      \"SPIRV/GlslangToSpv.cpp\",\n      \"SPIRV/GlslangToSpv.h\",\n      \"SPIRV/InReadableOrder.cpp\",\n      \"SPIRV/Logger.cpp\",\n      \"SPIRV/Logger.h\",\n      \"SPIRV/NonSemanticDebugPrintf.h\",\n      \"SPIRV/NonSemanticShaderDebugInfo100.h\",\n      \"SPIRV/SPVRemapper.cpp\",\n      \"SPIRV/SPVRemapper.h\",\n      \"SPIRV/SpvBuilder.cpp\",\n      \"SPIRV/SpvBuilder.h\",\n      \"SPIRV/SpvPostProcess.cpp\",\n      \"SPIRV/SpvTools.h\",\n      \"SPIRV/bitutils.h\",\n      \"SPIRV/disassemble.cpp\",\n      \"SPIRV/disassemble.h\",\n      \"SPIRV/doc.cpp\",\n      \"SPIRV/doc.h\",\n      \"SPIRV/hex_float.h\",\n      \"SPIRV/spirv.hpp\",\n      \"SPIRV/spvIR.h\",\n      \"glslang/GenericCodeGen/CodeGen.cpp\",\n      \"glslang/GenericCodeGen/Link.cpp\",\n      \"glslang/Include/BaseTypes.h\",\n      \"glslang/Include/Common.h\",\n      \"glslang/Include/ConstantUnion.h\",\n      \"glslang/Include/InfoSink.h\",\n      \"glslang/Include/InitializeGlobals.h\",\n      \"glslang/Include/PoolAlloc.h\",\n      \"glslang/Include/ResourceLimits.h\",\n      \"glslang/Include/ShHandle.h\",\n      \"glslang/Include/SpirvIntrinsics.h\",\n      \"glslang/Include/Types.h\",\n      \"glslang/Include/arrays.h\",\n      \"glslang/Include/intermediate.h\",\n      \"glslang/Include/visibility.h\",\n      \"glslang/MachineIndependent/Constant.cpp\",\n      \"glslang/MachineIndependent/InfoSink.cpp\",\n      \"glslang/MachineIndependent/Initialize.cpp\",\n      \"glslang/MachineIndependent/Initialize.h\",\n      \"glslang/MachineIndependent/IntermTraverse.cpp\",\n      \"glslang/MachineIndependent/Intermediate.cpp\",\n      \"glslang/MachineIndependent/LiveTraverser.h\",\n      \"glslang/MachineIndependent/ParseContextBase.cpp\",\n      \"glslang/MachineIndependent/ParseHelper.cpp\",\n      \"glslang/MachineIndependent/ParseHelper.h\",\n      \"glslang/MachineIndependent/PoolAlloc.cpp\",\n      \"glslang/MachineIndependent/RemoveTree.cpp\",\n      \"glslang/MachineIndependent/RemoveTree.h\",\n      \"glslang/MachineIndependent/Scan.cpp\",\n      \"glslang/MachineIndependent/Scan.h\",\n      \"glslang/MachineIndependent/ScanContext.h\",\n      \"glslang/MachineIndependent/ShaderLang.cpp\",\n      \"glslang/MachineIndependent/SpirvIntrinsics.cpp\",\n      \"glslang/MachineIndependent/SymbolTable.cpp\",\n      \"glslang/MachineIndependent/SymbolTable.h\",\n      \"glslang/MachineIndependent/Versions.cpp\",\n      \"glslang/MachineIndependent/Versions.h\",\n      \"glslang/MachineIndependent/attribute.cpp\",\n      \"glslang/MachineIndependent/attribute.h\",\n      \"glslang/MachineIndependent/gl_types.h\",\n      \"glslang/MachineIndependent/glslang_tab.cpp\",\n      \"glslang/MachineIndependent/glslang_tab.cpp.h\",\n      \"glslang/MachineIndependent/intermOut.cpp\",\n      \"glslang/MachineIndependent/iomapper.cpp\",\n      \"glslang/MachineIndependent/iomapper.h\",\n      \"glslang/MachineIndependent/limits.cpp\",\n      \"glslang/MachineIndependent/linkValidate.cpp\",\n      \"glslang/MachineIndependent/localintermediate.h\",\n      \"glslang/MachineIndependent/parseConst.cpp\",\n      \"glslang/MachineIndependent/parseVersions.h\",\n      \"glslang/MachineIndependent/preprocessor/Pp.cpp\",\n      \"glslang/MachineIndependent/preprocessor/PpAtom.cpp\",\n      \"glslang/MachineIndependent/preprocessor/PpContext.cpp\",\n      \"glslang/MachineIndependent/preprocessor/PpContext.h\",\n      \"glslang/MachineIndependent/preprocessor/PpScanner.cpp\",\n      \"glslang/MachineIndependent/preprocessor/PpTokens.cpp\",\n      \"glslang/MachineIndependent/preprocessor/PpTokens.h\",\n      \"glslang/MachineIndependent/propagateNoContraction.cpp\",\n      \"glslang/MachineIndependent/propagateNoContraction.h\",\n      \"glslang/MachineIndependent/reflection.cpp\",\n      \"glslang/MachineIndependent/reflection.h\",\n      \"glslang/OSDependent/osinclude.h\",\n      \"glslang/Public/ShaderLang.h\",\n    ]\n\n    # Workaround gn issue complaining about these not being allowed even though GLSLANG_HLSL is not\n    # defined.\n    sources += [\n      \"glslang/HLSL/hlslParseHelper.h\",\n      \"glslang/HLSL/hlslParseables.h\",\n      \"glslang/HLSL/hlslScanContext.h\",\n      \"glslang/HLSL/hlslTokens.h\",\n    ]\n\n    if (invoker.enable_hlsl) {\n      sources += [\n        \"glslang/HLSL/hlslAttributes.cpp\",\n        \"glslang/HLSL/hlslAttributes.h\",\n        \"glslang/HLSL/hlslGrammar.cpp\",\n        \"glslang/HLSL/hlslGrammar.h\",\n        \"glslang/HLSL/hlslOpMap.cpp\",\n        \"glslang/HLSL/hlslOpMap.h\",\n        \"glslang/HLSL/hlslParseHelper.cpp\",\n        \"glslang/HLSL/hlslParseables.cpp\",\n        \"glslang/HLSL/hlslScanContext.cpp\",\n        \"glslang/HLSL/hlslTokenStream.cpp\",\n        \"glslang/HLSL/hlslTokenStream.h\",\n      ]\n    }\n\n    defines = [ \"ENABLE_SPIRV=1\" ]\n    if (invoker.enable_opt) {\n      sources += [ \"SPIRV/SpvTools.cpp\" ]\n      defines += [ \"ENABLE_OPT=1\" ]\n    }\n\n    if (is_win) {\n      sources += [ \"glslang/OSDependent/Windows/ossource.cpp\" ]\n      defines += [ \"GLSLANG_OSINCLUDE_WIN32\" ]\n    } else {\n      sources += [ \"glslang/OSDependent/Unix/ossource.cpp\" ]\n      defines += [ \"GLSLANG_OSINCLUDE_UNIX\" ]\n    }\n\n    if (is_clang) {\n      cflags = [\n        \"-Wno-extra-semi\",\n        \"-Wno-ignored-qualifiers\",\n        \"-Wno-implicit-fallthrough\",\n        \"-Wno-inconsistent-missing-override\",\n        \"-Wno-missing-field-initializers\",\n        \"-Wno-newline-eof\",\n        \"-Wno-sign-compare\",\n        \"-Wno-suggest-destructor-override\",\n        \"-Wno-suggest-override\",\n        \"-Wno-unused-variable\",\n      ]\n    }\n    if (is_win && !is_clang) {\n      cflags = [\n        \"/wd4018\",  # signed/unsigned mismatch\n        \"/wd4189\",  # local variable is initialized but not referenced\n      ]\n    }\n\n    include_dirs = [ \"${target_gen_dir}/include\" ]\n\n    deps = [ \":glslang_build_info\" ]\n\n    if (invoker.enable_opt) {\n      deps += [\n        \"${spirv_tools_dir}:spvtools_opt\",\n        \"${spirv_tools_dir}:spvtools_val\",\n      ]\n      include_dirs += [ \"${spirv_tools_dir}/include\" ]\n    }\n\n    configs -= _configs_to_remove\n    configs += _configs_to_add\n  }\n}\n\nglslang_sources_common(\"glslang_lib_sources\") {\n  enable_opt = true\n  enable_hlsl = true\n}\n\nglslang_sources_common(\"glslang_sources\") {\n  enable_opt = true\n  enable_hlsl = true\n}\n\nsource_set(\"glslang_default_resource_limits_sources\") {\n  sources = [\n    \"glslang/ResourceLimits/ResourceLimits.cpp\",\n    \"glslang/Public/ResourceLimits.h\",\n    \"glslang/Include/ResourceLimits.h\",\n    \"glslang/Include/visibility.h\",\n  ]\n  public_configs = [ \":glslang_public\" ]\n\n  configs -= _configs_to_remove\n  configs += _configs_to_add\n}\n\nexecutable(\"glslang_validator\") {\n  sources = [\n    \"StandAlone/DirStackFileIncluder.h\",\n    \"StandAlone/StandAlone.cpp\",\n  ]\n  if (!is_win) {\n    cflags = [ \"-Woverflow\" ]\n  }\n  defines = [\n    \"ENABLE_OPT=1\",\n    \"ENABLE_SPIRV=1\",\n  ]\n  deps = [\n    \":glslang_build_info\",\n    \":glslang_default_resource_limits_sources\",\n    \":glslang_sources\",\n    \":glslang_extension_headers\",\n  ]\n  public_configs = [ \":glslang_hlsl\" ]\n\n  include_dirs = [\n    \"${target_gen_dir}/include\",\n    \"${spirv_tools_dir}/include\",\n  ]\n\n  configs -= _configs_to_remove\n  configs += _configs_to_add\n}\n\nexecutable(\"spirv-remap\") {\n  sources = [ \"StandAlone/spirv-remap.cpp\" ]\n  defines = [\n    \"ENABLE_OPT=1\",\n    \"ENABLE_SPIRV=1\",\n  ]\n  deps = [ \":glslang_sources\" ]\n\n  include_dirs = [ \"${spirv_tools_dir}/include\" ]\n\n  configs -= _configs_to_remove\n  configs += _configs_to_add\n}\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 12.5732421875,
          "content": "# Revision history for `glslang`\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](https://semver.org/).\n\n## 15.1.0 2024-12-13\n* Add Vulkan 1.4 target and client\n* Improve conversion of uniform block to push constant\n* Improve cross stage error reporting by reporting proper stager rather than \"unkwown stage\"\n* Add warning if forward declaration uses layout qualifiers\n* Implement GLSL_NV_cooperative_matrix2\n* Emit OpModfStruct instead of depracated OpModf\n* Add link-time cross stage optimization\n* Add column to DebugLexicalBlock\n* Propagate errors from symbol table initialization\n* Fix nonsemantic debuginfo line attribution for cooperative matrix\n\n## 15.0.0 2024-09-23\n### Breaking changes\n* Explicitly export all symbols that are part of the public API and hide other symbols by default\n\n### Other changes\n* Allow building glslang without the SPIR-V backend using the new ENABLE_SPIRV build option\n* Add setResourceSetBinding method to the API\n* Add interface to get the GLSL IO mapper and resolver\n* Allow compute derivative modes when the workgroup dimensions are spec constants\n* Improve debug location of branch/return instructions\n* Silence preprocessor '#' error reporting in inactive #if/#ifdef/#elif/#else blocks\n* Apply GLSL memory decorations to top-level OpVariable\n* Move definition of GLSLANG_EXPORT to visibility.h\n* Merge ancillary libraries into main glslang library and stub originals\n* Add public setSourceFile and addSourceText methods to TShader class\n* Add type checks for hitObjectNV\n* Add optimizerAllowExpandedIDBound to SpvOptions\n* Add SpvTools.h back to public headers \n* Add cross-stage check for missing outputs\n* Fix HLSL offsets for non-buffers\n* Add types and functions for IO mapping to API\n* Add function to set preprocessed code to API\n* Add set/get version functions to API\n* Expose setGlobalUniform functions to API\n* Don't emit debug instructions before an OpPhi\n* Add command-line and API option to enable reporting column location for compiler errors\n* Improve location aliasing checks\n* Support constant expression calculated by matrixCompMult\n* Fix crash caused by atomicCounter() use without arguments\n* Fix multi-line function call line numbers\n* Add line info to OpDebugDeclare for function parameters\n* Fix HLSL OpDebugFunction file name\n* Fix duplicate decorations\n* Enable compilation of glslang without thread support for WASI\n\n## 14.3.0 2024-06-25\n* Generate vector constructions more efficiently when sizes match\n* Skip identity conversions for 8-bit and 16-bit types\n* Add cmake aliases for public libraries\n* Support ARM extended matrix layout\n* Emit debug info for buffer references\n* Add support for OpExtInstWithForwardRefsKHR\n* Generate SPV_EXT_replicated_compisites when requested by pragma\n* Reuse loads generated for repeated function arguments\n* Fix gl_HitT alias of gl_RayTmax\n* Fix some cases where invalid SPIR-V was being generated when using separate samplers\n* Add back layoutLocation to public API\n\n## 14.2.0 2024-05-02\n* Improve checking for location aliasing errors\n* Fix undefined behavior in parser\n* Add bounds check to gl_SampleMask\n* Fix alignment and padding of matrices consuming one vector\n* Remove duplicate SPIR-V decorations\n* Check for exponent overflow in float parser\n* Fix bug in relaxed verification rules\n* Fix disassembly of debugBreak\n* Fix bug when importing SPIR-V extended intruction set\n* Fix issues with the interaction of cooperative_matrix and spirv_intrinsics\n* Support SPV_QCOM_image_processing2\n* Support files with UTF8BOM character\n\n## 14.1.0 2024-03-08\n* Add a new --abosute-path command-line option to output absolute paths in error messages\n* Support GL_EXT_control_flow_attributes2\n* Support GL_ARB_shading_language_include\n* Fix HLSL built-in passthrough via inout\n* Enable -Wimplicit-fallthrough and fix warnings\n* Fix -Wmissing_field_initializer warnings\n* Document supported dependencies in known_good.json\n* Clear spirv vector before use\n* Emit debug info for accelerationStructure and rayQuery variables\n* Support NV_shader_atomic_fp16_vector\n* Support GL_EXT_expect_assume_support\n* Allow external control of whether glslang will be tested or installed\n* Improve debug source and line info\n* Support GL_KHR_shader_subgroup_rotate\n* Add SPIRV-Tools-opt dependency if ENABLE_OPT\n* Support EXT_shader_quad_control\n* Add OpAssumeTrueKHR and OpExpectKHR\n* Support GL_EXT_maximal_reconvergence\n* Remove generation of deprecated Target.cmake files\n* Fix array size of gl_SampleMask and gl_SampleMaskIn\n* Support GL_ARB_texture_multisample_extension\n* Emit DebugTypePointer when non-semantic debug info is enabled\n\n## 14.0.0 2023-12-21\n\n### Breaking changes\n* The legacy libraries named HLSL and OGLCompiler have been removed. To avoid future disruptions, please use cmake's find_package mechanism rather than hardcoding library dependencies.\n* Only the headers that are part of glslang's public interface are included in the install target.\n* Remove OVERRIDE_MSVCCRT cmake option.\n\n### Other changes\n* Fix spv_options initialization\n* Fix line number for OpDebugFunction and OpDebugScope for function\n* Fix SPV_KHR_cooperative_matrix enumerants\n* Fix nullptr crash\n* Fix GL_ARB_shader_storage_buffer_object version\n* Fix interpolant ES error\n* Generate DebugValue for constant arguments\n* Overflow/underflow out-of-range floats to infinity/0.0 respectively\n* Support SV_ViewID keywords for HLSL\n* Implement relaxed rule for opaque struct members\n* Add BUILD_WERROR cmake option\n* Add GLSLANG_TESTS cmake option\n* Always generate OpDebugBasicType for bool type\n* Fix GLSL parsing of '#' when not preceded by space or tab\n* Fix GL_ARB_bindless_texture availability\n* Support GL_EXT_draw_instanced extension\n* Support GL_EXT_texture_array extension\n* Fix conversion of 64-bit unsigned integer constants to bool\n* Output 8-bit and 16-bit capabilities when appropriate for OpSpecConstant\n\n## 13.1.1 2023-10-16\n* Initialize compile_only field in C interface\n\n## 13.1.0 2023-10-13\n* Support GL_EXT_texture_shadow_lod\n* Support GL_NV_displacement_micromap\n* Fix ByteAddressBuffer when used a function parameter\n* Add more verbose messages if SPIRV-Tools is not found\n* Fix names for explicitly sized types when emitting nonsemantic debug info\n* Emit error for r-value arguments in atomic memory operations\n* Add --no-link option\n* Beautify preprocessor output format\n* Fix race condition in glslangValidator\n* Only set LocalSizeId mode when necessary\n* Don't emit invalid debug info for buffer references\n\n## 13.0.0 2023-08-23\n\n### Breaking changes\n* Simplify PoolAlloc via thread_local\n  * Remove InitializeDLL functions\n  * Remove OSDependent TLS functions\n* Remove GLSLANG_WEB and GLSLANG_WEB_DEVEL code paths\n\n### Other changes\n* Raise CMAKE minimum to 3.17.2\n* Support GL_KHR_cooperative_matrix \n* Support GL_QCOM_image_processing_support\n* Support outputting each module to a filename with spirv-remap\n* Generate an error when gl_PrimitiveShaderRateEXT is used without enabling the extension\n* Improve layout checking when GL_EXT_spirv_intrinsics is enabled\n\n## 12.3.1 2023-07-20\n\n### Other changes\n* Improve backward compatibility for glslangValidator rename on Windows\n\n## 12.3.0 2023-07-19\n\n### Other changes\n* Rename glslangValidator to glslang and create glslangValidator symlink\n* Support HLSL binary literals\n* Add missing initialization members for web\n* Improve push_constant upgrading\n* Fix race condition in spirv remap\n* Support pre and post HLSL qualifier validation\n* Force generateDebugInfo when non-semantic debug info is enabled\n* Exit with error if output file cannot be written\n* Fix struct member buffer reference decorations\n\n## 12.2.0 2023-05-17\n\n### Other changes\n* Support GLSL_EXT_shader_tile_image\n* Support GL_EXT_ray_tracing_position_fetch\n* Support custom include callbacks via the C API\n* Add preamble-text command-line option\n* Accept variables as parameters of spirv_decorate_id\n* Fix generation of conditionals with a struct result\n* Fix double expansion of macros\n* Fix DebugCompilationUnit scope\n* Improve line information\n\n## 12.1.0 2023-03-21\n\n### Other changes\n* Reject non-float inputs/outputs for version less than 120\n* Fix invalid BufferBlock decoration for SPIR-V 1.3 and above\n* Add HLSL relaxed-precision float/int matrix expansions\n* Block decorate Vulkan structs with RuntimeArrays\n* Support InterlockedAdd on float types\n\n## 12.0.0 2023-01-18\n\n### Breaking changes\n* An ABI was accidentally broken in #3014. Consequently, we have incremented the major revision number.\n\n### Other changes\n* Add support for ARB_bindless_texture.\n* Add support for GL_NV_shader_invocation_reorder.\n* Fix const parameter debug types when using NonSemantic.Shader.DebugInfo.100.\n* Fix NonSemantic.Shader.DebugInfo.100 disassembly.\n* Fix MaxDualSourceDrawBuffersEXT usage.\n* Fix structure member reference crash.\n\n## 11.13.0 2022-12-06\n\n### Other changes\n* Make HelperInvocation accesses volatile for SPIR-V 1.6.\n* Improve forward compatibility of ResourceLimits interface \n* Remove GLSLANG_ANGLE\n\n## 11.12.0 2022-10-12\n\n### Other changes\n* Update generator version\n* Add support for GL_EXT_mesh_shader\n* Add support for NonSemantic.Shader.DebugInfo.100\n* Make OpEmitMeshTasksEXT a terminal instruction\n* Make gl_SubGroupARB a flat in int in Vulkan\n* Add support for GL_EXT_opacity_micromap\n* Add preamble support to C interface\n\n## 11.11.0 2022-08-11\n\n### Other changes\n* Add OpSource support to C interface\n* Deprecate samplerBuffer for spirv1.6 and later\n* Add support for SPV_AMD_shader_early_and_late_fragment_tests\n\n## 11.10.0 2022-06-02\n\n### Other changes\n* Generate OpLine before OpFunction\n* Add support for VK_EXT_fragment_shader_barycentric\n* Add whitelist filtering for debug comments in SPIRV-Remap\n* Add support for GL_EXT_ray_cull_mask\n\n## 11.9.0 2022-04-06\n\n### Other changes\n* Add GLSL version override functionality\n* Add eliminate-dead-input-components to -Os\n* Add enhanced-msgs option\n* Explicitly use Python 3 for builds\n\n## 11.8.0 2022-01-27\n\n### Other changes\n* Add support for SPIR-V 1.6\n* Add support for Vulkan 1.3\n* Add --hlsl-dx-position-w option\n\n## 11.7.0 2021-11-11\n\n### Other changes\n* Add support for targeting Vulkan 1.2 in the C API\n\n## 11.6.0 2021-08-25\n\n### Other changes\n* Atomic memory function only for shader storage block member or shared variable\n* Add support for gl_MaxVaryingVectors for ogl\n* Fix loading bool arrays from interface blocks\n* Generate separate stores for partially swizzled memory stores\n* Allow layout(std430) uniform with GL_EXT_scalar_block_layout\n* Support for pragma STDGL invariant(all)\n* Support for GL_NV_ray_tracing_motion_blur\n\n## 11.5.0 2021-06-23\n\n### Other changes\n* Implement GLSL_EXT_shader_atomic_float2\n* Implement GL_EXT_spirv_intrinsics\n* Fixed SPIR-V remapper not remapping OpExtInst instruction set IDs\n* only declare compatibility gl_ variables in compatibility mode\n* Add support for float spec const vector initialization\n* Implement GL_EXT_subgroup_uniform_control_flow.\n* Fix arrays dimensioned with spec constant sized gl_WorkGroupSize\n* Add support for 64bit integer scalar and vector types to bitCount() builtin\n\n## 11.4.0 2021-04-22\n\n### Other changes\n* Fix to keep source compatible with CMake 3.10.2\n\n## 11.3.0 2021-04-21\n\n### Other changes\n* Added --depfile\n* Added --auto-sampled-textures\n* Now supports InterpolateAt-based functions\n* Supports cross-stage automatic IO mapping\n* Supports GL_EXT_vulkan_glsl_relaxed (-R option)\n\n## 11.2.0 2021-02-18\n\n### Other changes\n* Removed Python requirement when not building with spirv-tools\n* Add support for GL_EXT_shared_memory_block\n* Implement GL_EXT_null_initializer\n* Add CMake support for Fuschia\n\n## 11.1.0 2020-12-07\n\n### Other changes\n* Added ray-tracing extension support\n\n## 11.0.0 2020-07-20\n\n### Breaking changes\n\n#### Visual Studio 2013 is no longer supported\n\n[As scheduled](https://github.com/KhronosGroup/glslang/blob/9eef54b2513ca6b40b47b07d24f453848b65c0df/README.md#planned-deprecationsremovals),\nMicrosoft Visual Studio 2013 is no longer officially supported. Please upgrade\nto at least Visual Studio 2015.\n\n## 10.15.3847 2020-07-20\n\n### Breaking changes\n\n* The following files have been removed:\n  * `glslang/include/revision.h`\n  * `glslang/include/revision.template`\n\nThe `GLSLANG_MINOR_VERSION` and `GLSLANG_PATCH_LEVEL` defines have been removed\nfrom the public headers. \\\nInstead each build script now uses the new `build_info.py`\nscript along with the `build_info.h.tmpl` and this `CHANGES.md` file to generate\nthe glslang build-time generated header `glslang/build_info.h`.\n\nThe new public API to obtain the `glslang` version is `glslang::GetVersion()`.\n\n### Other changes\n* `glslang` shared objects produced by CMake are now `SONAME` versioned using\n   [Semantic Versioning 2.0.0](https://semver.org/).\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.50390625,
          "content": "# Copyright (C) 2020-2023 The Khronos Group Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of The Khronos Group Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\ncmake_minimum_required(VERSION 3.17.2)\nproject(glslang)\n\nif (CMAKE_VERSION VERSION_LESS \"3.21\")\n    # https://cmake.org/cmake/help/latest/variable/PROJECT_IS_TOP_LEVEL.html\n    string(COMPARE EQUAL ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_SOURCE_DIR} PROJECT_IS_TOP_LEVEL)\nendif()\n\nset(GLSLANG_TESTS_DEFAULT ON) # Can be turned off, below, based on environment.\nset(GLSLANG_ENABLE_INSTALL_DEFAULT ON) # Can be turned off, below, based on environment.\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Adhere to GNU filesystem layout conventions\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\n# Needed for CMAKE_DEPENDENT_OPTION macro\ninclude(CMakeDependentOption)\n\noption(BUILD_SHARED_LIBS \"Build Shared Libraries\")\noption(BUILD_EXTERNAL \"Build external dependencies in /External\" ON)\noption(BUILD_WERROR \"Enable warnings as errors (default is OFF)\" OFF)\n\nset(LIB_TYPE STATIC)\n\nif(BUILD_SHARED_LIBS)\n    set(LIB_TYPE SHARED)\nendif()\n\nif (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n    # This logic inside SPIRV-Tools, which can upset build target dependencies\n    # if changed after targets are already defined. To prevent these issues,\n    # ensure CMAKE_BUILD_TYPE is assigned early and at the glslang root scope.\n    message(STATUS \"No build type selected, default to Debug\")\n    set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\n# Currently iOS and Android are very similar.\n# They both have their own packaging (APP/APK).\n# Which makes regular executables/testing problematic.\n#\n# Currently the only deliverables for these platforms are\n# libraries (either STATIC or SHARED).\n#\n# Furthermore testing is equally problematic.\nif (IOS OR ANDROID)\n    set(ENABLE_GLSLANG_BINARIES OFF)\n    set(GLSLANG_TESTS_DEFAULT OFF)\nendif()\n\n# Simplify the default case of including this project.\n# Otherwise add_subdirectory users have a harder time consuming the library.\n# Since glslang will pollute the installation and add undesirable testing.\nif(NOT PROJECT_IS_TOP_LEVEL)\n    set(GLSLANG_TESTS_DEFAULT OFF)\n    set(GLSLANG_ENABLE_INSTALL_DEFAULT OFF)\nendif()\n\n# Control whether Glslang self-tests are built and tested.\n# Always expose this as an option, so the defaults can be overridden.\noption(GLSLANG_TESTS \"Enable glslang testing\" ${GLSLANG_TESTS_DEFAULT})\n\n# Control whether to install Glslang.\n# Always expose this as an option, so the defaults can be overridden.\noption(GLSLANG_ENABLE_INSTALL \"Enable glslang installation\" ${GLSLANG_ENABLE_INSTALL_DEFAULT})\n\noption(ENABLE_SPIRV \"Enables SPIRV output support\" ON)\noption(ENABLE_SPVREMAPPER \"Enables building of SPVRemapper\" ON)\n\noption(ENABLE_GLSLANG_BINARIES \"Builds glslang and spirv-remap\" ON)\n\noption(ENABLE_GLSLANG_JS \"If using Emscripten, build glslang.js. Otherwise, builds a sample executable for binary-size testing.\")\nCMAKE_DEPENDENT_OPTION(ENABLE_EMSCRIPTEN_SINGLE_FILE\n    \"If using Emscripten, enables SINGLE_FILE build\"\n    OFF \"ENABLE_GLSLANG_JS AND EMSCRIPTEN\"\n    OFF)\nCMAKE_DEPENDENT_OPTION(ENABLE_EMSCRIPTEN_ENVIRONMENT_NODE\n    \"If using Emscripten, builds to run on Node instead of Web\"\n    OFF \"ENABLE_GLSLANG_JS AND EMSCRIPTEN\"\n    OFF)\n\noption(ENABLE_HLSL \"Enables HLSL input support\" ON)\noption(ENABLE_RTTI \"Enables RTTI\")\noption(ENABLE_EXCEPTIONS \"Enables Exceptions\")\nCMAKE_DEPENDENT_OPTION(ENABLE_OPT \"Enables spirv-opt capability if present\" ON \"ENABLE_SPIRV\" OFF)\n\nif(MINGW OR (APPLE AND ${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\"))\n    # Workaround for CMake behavior on Mac OS with gcc, cmake generates -Xarch_* arguments\n    # which gcc rejects\n    set(ENABLE_PCH OFF)\n    message(NOTICE \"Disabling PCH\")\nendif()\n\noption(ENABLE_PCH \"Enables Precompiled header\" ON)\n\nif(ENABLE_SPIRV)\n    add_compile_definitions(ENABLE_SPIRV)\nendif()\n\nif(ENABLE_HLSL)\n    add_compile_definitions(ENABLE_HLSL)\nendif()\n\nif(WIN32)\n    set(CMAKE_DEBUG_POSTFIX \"d\")\n    add_definitions(-DGLSLANG_OSINCLUDE_WIN32)\nelseif(UNIX OR ANDROID)\n    add_definitions(-DGLSLANG_OSINCLUDE_UNIX)\nelse()\n    message(\"unknown platform\")\nendif()\n\nif(${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\")\n    add_compile_options(-Wall -Wmaybe-uninitialized -Wuninitialized -Wunused -Wunused-local-typedefs -Wimplicit-fallthrough\n                        -Wunused-parameter -Wunused-value  -Wunused-variable -Wunused-but-set-parameter -Wunused-but-set-variable -fno-exceptions)\n    if(NOT ENABLE_RTTI)\n        add_compile_options(-fno-rtti)\n    endif()\n    if(NOT ENABLE_EXCEPTIONS)\n        add_compile_options(-fno-exceptions)\n    endif()\n    if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"9.0.0\")\n        add_compile_options(-Werror=deprecated-copy)\n    endif()\n\n    if(NOT (CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\"))\n        if (NOT APPLE)\n            # Error if there's symbols that are not found at link time.\n            add_link_options(\"-Wl,--no-undefined\")\n        endif()\n    endif()\nelseif(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\" AND NOT MSVC)\n    add_compile_options(-Wall -Wuninitialized -Wunused -Wunused-local-typedefs -Wimplicit-fallthrough\n                        -Wunused-parameter -Wunused-value  -Wunused-variable)\n    if(NOT ENABLE_RTTI)\n        add_compile_options(-fno-rtti)\n    endif()\n    if(NOT ENABLE_EXCEPTIONS)\n        add_compile_options(-fno-exceptions)\n    endif()\n\n    if(NOT (CMAKE_SYSTEM_NAME MATCHES \"OpenBSD|Emscripten\"))\n        # Error if there's symbols that are not found at link time. Some linkers do not support this flag.\n        if(NOT APPLE)\n            add_link_options(\"-Wl,--no-undefined\")\n        endif()\n    endif()\nelseif(MSVC)\n    if(NOT ENABLE_RTTI)\n        string(FIND \"${CMAKE_CXX_FLAGS}\" \"/GR\" MSVC_HAS_GR)\n        if(MSVC_HAS_GR)\n            string(REGEX REPLACE \"/GR\" \"/GR-\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n        else()\n            add_compile_options(/GR-) # Disable RTTI\n        endif()\n    endif()\n    if(ENABLE_EXCEPTIONS)\n        add_compile_options(/EHsc) # Enable Exceptions\n\telse()\n        string(REGEX REPLACE \"/EHsc\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\") # Try to remove default /EHsc cxx_flag\n        add_compile_options(/D_HAS_EXCEPTIONS=0)\n    endif()\nendif()\n\n# NOTE we could potentially replace this logic with COMPILE_WARNING_AS_ERROR if cmake minimum is bumped to >= 3.24\nif (BUILD_WERROR)\n    if (NOT MSVC)\n        add_compile_options(-Werror)\n    else()\n        add_compile_options(/WX)\n    endif()\nendif()\n\nif(ENABLE_GLSLANG_JS)\n    if(MSVC)\n        add_compile_options(/Os /GR-)\n    else()\n        add_compile_options(-Os -fno-rtti -fno-exceptions)\n        if(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\" AND NOT MSVC)\n            add_compile_options(-Wno-unused-parameter)\n            add_compile_options(-Wno-unused-variable -Wno-unused-const-variable)\n        endif()\n    endif()\nendif()\n\n# Request C++17\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nfunction(glslang_set_link_args TARGET)\n    # For MinGW compiles, statically link against the GCC and C++ runtimes.\n    # This avoids the need to ship those runtimes as DLLs.\n    # This is supported by GCC and Clang.\n    if(WIN32 AND NOT MSVC)\n        set_target_properties(${TARGET} PROPERTIES\n                              LINK_FLAGS \"-static -static-libgcc -static-libstdc++\")\n    endif()\nendfunction(glslang_set_link_args)\n\n# Root directory for build-time generated include files\nset(GLSLANG_GENERATED_INCLUDEDIR \"${CMAKE_BINARY_DIR}/include\")\n\n################################################################################\n# Build version information generation\n################################################################################\ninclude(parse_version.cmake)\nset(GLSLANG_CHANGES_FILE      \"${CMAKE_CURRENT_SOURCE_DIR}/CHANGES.md\")\nset(GLSLANG_BUILD_INFO_H_TMPL \"${CMAKE_CURRENT_SOURCE_DIR}/build_info.h.tmpl\")\nset(GLSLANG_BUILD_INFO_H      \"${GLSLANG_GENERATED_INCLUDEDIR}/glslang/build_info.h\")\n\nparse_version(${GLSLANG_CHANGES_FILE} GLSLANG)\n\nfunction(configurate_version)\n    set(major ${GLSLANG_VERSION_MAJOR})\n    set(minor ${GLSLANG_VERSION_MINOR})\n    set(patch ${GLSLANG_VERSION_PATCH})\n    set(flavor ${GLSLANG_VERSION_FLAVOR})\n    configure_file(${GLSLANG_BUILD_INFO_H_TMPL} ${GLSLANG_BUILD_INFO_H} @ONLY)\nendfunction()\n\nconfigurate_version()\n\n# glslang_add_build_info_dependency() adds the glslang-build-info dependency and\n# generated include directories to target.\nfunction(glslang_add_build_info_dependency target)\n    target_include_directories(${target} PUBLIC $<BUILD_INTERFACE:${GLSLANG_GENERATED_INCLUDEDIR}>)\nendfunction()\n\n# glslang_only_export_explicit_symbols() makes the symbol visibility hidden by\n# default for <target> when building shared libraries, and sets the\n# GLSLANG_IS_SHARED_LIBRARY define, and GLSLANG_EXPORTING to 1 when specifically\n# building <target>.\nfunction(glslang_only_export_explicit_symbols target)\n    if(BUILD_SHARED_LIBS)\n        target_compile_definitions(${target} PUBLIC \"GLSLANG_IS_SHARED_LIBRARY=1\")\n        set_target_properties(${target} PROPERTIES CXX_VISIBILITY_PRESET hidden)\n        set_target_properties(${target} PROPERTIES C_VISIBILITY_PRESET hidden)\n        if(WIN32)\n            target_compile_definitions(${target} PRIVATE \"GLSLANG_EXPORTING=1\")\n        endif()\n    endif()\nendfunction()\n\n# glslang_pch() adds precompiled header rules to <target> for the pre-compiled\n# header file <pch>. As target_precompile_headers() was added in CMake 3.16,\n# this is a no-op if called on earlier versions of CMake.\nfunction(glslang_pch target pch)\n    if(ENABLE_PCH)\n        target_precompile_headers(${target} PRIVATE ${pch})\n    endif()\nendfunction()\n\nif(BUILD_EXTERNAL AND IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/External)\n    # We depend on these for later projects, so they should come first.\n    add_subdirectory(External)\nendif()\n\noption(ALLOW_EXTERNAL_SPIRV_TOOLS \"Allows to build against installed SPIRV-Tools-opt. This is unsupported if the commit isn't the one in known_good.json\")\nif(NOT TARGET SPIRV-Tools-opt)\n    if(ALLOW_EXTERNAL_SPIRV_TOOLS)\n        # Look for external SPIR-V Tools build, if not building in-tree\n        message(STATUS \"Trying to find local SPIR-V tools\")\n        find_package(SPIRV-Tools-opt)\n        if(NOT TARGET SPIRV-Tools-opt)\n            if(ENABLE_OPT)\n                message(WARNING \"ENABLE_OPT set but SPIR-V tools not found! Disabling SPIR-V optimization.\")\n            endif()\n            set(ENABLE_OPT OFF)\n        endif()\n    else()\n        if(ENABLE_OPT)\n            message(SEND_ERROR \"ENABLE_OPT set but SPIR-V tools not found. Please run update_glslang_sources.py, \"\n                \"set the ALLOW_EXTERNAL_SPIRV_TOOLS option to use a local install of SPIRV-Tools, or set ENABLE_OPT=0.\")\n        endif()\n    endif()\nendif()\n\nif(ENABLE_OPT)\n    message(STATUS \"optimizer enabled\")\n    add_definitions(-DENABLE_OPT=1)\nelse()\n    if(ENABLE_HLSL)\n        message(STATUS \"spirv-tools not linked - illegal SPIRV may be generated for HLSL\")\n    endif()\n    add_definitions(-DENABLE_OPT=0)\nendif()\n\nif(ENABLE_SPIRV)\n    add_subdirectory(SPIRV)\nendif()\nadd_subdirectory(glslang)\nif(ENABLE_GLSLANG_BINARIES)\n    add_subdirectory(StandAlone)\nendif()\n\nif(GLSLANG_TESTS)\n    enable_testing()\n    add_subdirectory(gtests)\n\n    # glslang-testsuite runs a bash script on Windows.\n    # Make sure to use '-o igncr' flag to ignore carriage returns (\\r).\n    set(IGNORE_CR_FLAG \"\")\n    if(WIN32)\n\tset(IGNORE_CR_FLAG -o igncr)\n    endif()\n\n    if (CMAKE_CONFIGURATION_TYPES)\n\tset(RESULTS_PATH ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/localResults)\n\tset(VALIDATOR_PATH ${CMAKE_CURRENT_BINARY_DIR}/StandAlone/$<CONFIG>/glslang)\n\tset(REMAP_PATH ${CMAKE_CURRENT_BINARY_DIR}/StandAlone/$<CONFIG>/spirv-remap)\n    else()\n\tset(RESULTS_PATH ${CMAKE_CURRENT_BINARY_DIR}/localResults)\n\tset(VALIDATOR_PATH ${CMAKE_CURRENT_BINARY_DIR}/StandAlone/glslang)\n\tset(REMAP_PATH ${CMAKE_CURRENT_BINARY_DIR}/StandAlone/spirv-remap)\n    endif()\n\n    # The TARGET_RUNTIME_DLL_DIRS feature requires CMake 3.27 or greater.\n    if(WIN32 AND BUILD_SHARED_LIBS AND CMAKE_VERSION VERSION_LESS \"3.27\")\n        message(WARNING \"The Windows shared library test configuration requires CMake 3.27 or greater\")\n    else()\n        add_test(NAME glslang-testsuite\n            COMMAND bash ${IGNORE_CR_FLAG} runtests ${RESULTS_PATH} ${VALIDATOR_PATH} ${REMAP_PATH}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Test/)\n\n        # Prepend paths to shared libraries.\n        if (BUILD_SHARED_LIBS)\n            set_tests_properties(glslang-testsuite PROPERTIES ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<JOIN:$<TARGET_RUNTIME_DLL_DIRS:glslang-standalone>,\\;>\")\n            set_tests_properties(glslang-testsuite PROPERTIES ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<JOIN:$<TARGET_RUNTIME_DLL_DIRS:spirv-remap>,\\;>\")\n        endif()\n    endif()\nendif(GLSLANG_TESTS)\n\nif (GLSLANG_ENABLE_INSTALL)\n    file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/glslang-config.cmake.in\" [=[\n        @PACKAGE_INIT@\n        include(CMakeFindDependencyMacro)\n        if(@ENABLE_OPT@)\n            find_dependency(SPIRV-Tools-opt)\n        endif()\n        @INSTALL_CONFIG_UNIX@\n        include(\"@PACKAGE_PATH_EXPORT_TARGETS@\")\n    ]=])\n\n    set(PATH_EXPORT_TARGETS \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/glslang-targets.cmake\")\n    if(UNIX OR \"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Fuchsia\")\n        set(INSTALL_CONFIG_UNIX [=[\n            set(THREADS_PREFER_PTHREAD_FLAG ON)\n            find_dependency(Threads)\n        ]=])\n    endif()\n    configure_package_config_file(\n        \"${CMAKE_CURRENT_BINARY_DIR}/glslang-config.cmake.in\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/glslang-config.cmake\"\n        PATH_VARS\n            PATH_EXPORT_TARGETS\n        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n    )\n\n    write_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/glslang-config-version.cmake\"\n        VERSION ${GLSLANG_VERSION}\n        COMPATIBILITY SameMajorVersion\n    )\n\n    install(\n        EXPORT      glslang-targets\n        NAMESPACE   \"glslang::\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n    )\n\n    install(\n        FILES\n            \"${CMAKE_CURRENT_BINARY_DIR}/glslang-config.cmake\"\n            \"${CMAKE_CURRENT_BINARY_DIR}/glslang-config-version.cmake\"\n        DESTINATION\n            \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n    )\nendif(GLSLANG_ENABLE_INSTALL)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2734375,
          "content": "A reminder that this issue tracker is managed by the Khronos Group. Interactions here should follow the Khronos Code of Conduct (https://www.khronos.org/developers/code-of-conduct), which prohibits aggressive or derogatory language. Please keep the discussion friendly and civil.\n"
        },
        {
          "name": "DEPS",
          "type": "blob",
          "size": 2.779296875,
          "content": "# Copyright (C) 2020 The Khronos Group Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of The Khronos Group Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nuse_relative_paths = True\n\ngclient_gn_args_file = 'build/config/gclient_args.gni'\n\nvars = {\n  'chromium_git': 'https://chromium.googlesource.com',\n  'build_with_chromium': False,\n}\n\ndeps = {\n\n  './build': {\n    'url': '{chromium_git}/chromium/src/build.git@85ee3b7692e5284f08bd3c9459fb5685eed7b838',\n    'condition': 'not build_with_chromium',\n  },\n\n  './buildtools': {\n    'url': '{chromium_git}/chromium/src/buildtools.git@4be464e050b3d05060471788f926b34c641db9fd',\n    'condition': 'not build_with_chromium',\n  },\n\n  './tools/clang': {\n    'url': '{chromium_git}/chromium/src/tools/clang.git@3a982adabb720aa8f3e3885d40bf3fe506990157',\n    'condition': 'not build_with_chromium',\n  },\n\n}\n\nhooks = [\n  {\n    'name': 'sysroot_x64',\n    'pattern': '.',\n    'condition': 'checkout_linux and (checkout_x64 and not build_with_chromium)',\n    'action': ['python', './build/linux/sysroot_scripts/install-sysroot.py',\n               '--arch=x64'],\n  },\n  {\n    # Note: On Win, this should run after win_toolchain, as it may use it.\n    'name': 'clang',\n    'pattern': '.',\n    'action': ['python', './tools/clang/scripts/update.py'],\n    'condition': 'not build_with_chromium',\n  },\n]\n\nrecursedeps = [\n  # buildtools provides clang_format, libc++, and libc++abi\n  'buildtools',\n]\n"
        },
        {
          "name": "External",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 53.4228515625,
          "content": "Here, glslang proper means core GLSL parsing, HLSL parsing, and SPIR-V code\ngeneration. Glslang proper requires use of a number of licenses, one that covers\npreprocessing and others that covers non-preprocessing.\n\nBison was removed long ago. You can build glslang from the source grammar,\nusing tools of your choice, without using bison or any bison files.\n\nOther parts, outside of glslang proper, include:\n\n- gl_types.h, only needed for OpenGL-like reflection, and can be left out of\n  a parse and codegen project.  See it for its license.\n\n- update_glslang_sources.py, which is not part of the project proper and does\n  not need to be used.\n\n- the SPIR-V \"remapper\", which is optional, but has the same license as\n  glslang proper\n\n- Google tests and SPIR-V tools, and anything in the external subdirectory\n  are external and optional; see them for their respective licenses.\n\n--------------------------------------------------------------------------------\n\nThe core of glslang-proper, minus the preprocessor is licenced as follows:\n\n--------------------------------------------------------------------------------\n3-Clause BSD License\n--------------------------------------------------------------------------------\n\n//\n// Copyright (C) 2015-2018 Google, Inc.\n// Copyright (C) <various other dates and companies>\n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//\n//    Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n//\n//    Redistributions in binary form must reproduce the above\n//    copyright notice, this list of conditions and the following\n//    disclaimer in the documentation and/or other materials provided\n//    with the distribution.\n//\n//    Neither the name of 3Dlabs Inc. Ltd. nor the names of its\n//    contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n// COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n\n\n--------------------------------------------------------------------------------\n2-Clause BSD License\n--------------------------------------------------------------------------------\n\nCopyright 2020 The Khronos Group Inc\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n--------------------------------------------------------------------------------\nThe MIT License\n--------------------------------------------------------------------------------\n\nCopyright 2020 The Khronos Group Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n--------------------------------------------------------------------------------\nAPACHE LICENSE, VERSION 2.0\n--------------------------------------------------------------------------------\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n--------------------------------------------------------------------------------\nGPL 3 with special bison exception\n--------------------------------------------------------------------------------\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\nBison Exception\n\nAs a special exception, you may create a larger work that contains part or all\nof the Bison parser skeleton and distribute that work under terms of your\nchoice, so long as that work isn't itself a parser generator using the skeleton\nor a modified version thereof as a parser skeleton.  Alternatively, if you\nmodify or redistribute the parser skeleton itself, you may (at your option)\nremove this special exception, which will cause the skeleton and the resulting\nBison output files to be licensed under the GNU General Public License without\nthis special exception.\n\nThis special exception was added by the Free Software Foundation in version\n2.2 of Bison.\n\n                     END OF TERMS AND CONDITIONS\n\n--------------------------------------------------------------------------------\n================================================================================\n--------------------------------------------------------------------------------\n\nThe preprocessor has the core licenses stated above, plus additional licences:\n\n/****************************************************************************\\\nCopyright (c) 2002, NVIDIA Corporation.\n\nNVIDIA Corporation(\"NVIDIA\") supplies this software to you in\nconsideration of your agreement to the following terms, and your use,\ninstallation, modification or redistribution of this NVIDIA software\nconstitutes acceptance of these terms.  If you do not agree with these\nterms, please do not use, install, modify or redistribute this NVIDIA\nsoftware.\n\nIn consideration of your agreement to abide by the following terms, and\nsubject to these terms, NVIDIA grants you a personal, non-exclusive\nlicense, under NVIDIA's copyrights in this original NVIDIA software (the\n\"NVIDIA Software\"), to use, reproduce, modify and redistribute the\nNVIDIA Software, with or without modifications, in source and/or binary\nforms; provided that if you redistribute the NVIDIA Software, you must\nretain the copyright notice of NVIDIA, this notice and the following\ntext and disclaimers in all such redistributions of the NVIDIA Software.\nNeither the name, trademarks, service marks nor logos of NVIDIA\nCorporation may be used to endorse or promote products derived from the\nNVIDIA Software without specific prior written permission from NVIDIA.\nExcept as expressly stated in this notice, no other rights or licenses\nexpress or implied, are granted by NVIDIA herein, including but not\nlimited to any patent rights that may be infringed by your derivative\nworks or by other works in which the NVIDIA Software may be\nincorporated. No hardware is licensed hereunder.\n\nTHE NVIDIA SOFTWARE IS BEING PROVIDED ON AN \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,\nINCLUDING WITHOUT LIMITATION, WARRANTIES OR CONDITIONS OF TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR\nITS USE AND OPERATION EITHER ALONE OR IN COMBINATION WITH OTHER\nPRODUCTS.\n\nIN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT,\nINCIDENTAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, LOST PROFITS; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) OR ARISING IN ANY WAY\nOUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE\nNVIDIA SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT,\nTORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF\nNVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\\****************************************************************************/\n\n/*\n** Copyright (c) 2014-2016 The Khronos Group Inc.\n**\n** Permission is hereby granted, free of charge, to any person obtaining a copy\n** of this software and/or associated documentation files (the \"Materials\"),\n** to deal in the Materials without restriction, including without limitation\n** the rights to use, copy, modify, merge, publish, distribute, sublicense,\n** and/or sell copies of the Materials, and to permit persons to whom the\n** Materials are furnished to do so, subject to the following conditions:\n**\n** The above copyright notice and this permission notice shall be included in\n** all copies or substantial portions of the Materials.\n**\n** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS\n** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND\n** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/\n**\n** THE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS\n** IN THE MATERIALS.\n*/\n"
        },
        {
          "name": "README-spirv-remap.txt",
          "type": "blob",
          "size": 5.06640625,
          "content": "\nVERSION\n--------------------------------------------------------------------------------\nspirv-remap 0.97\n\nINTRO:\n--------------------------------------------------------------------------------\nspirv-remap is a utility to improve compression of SPIR-V binary files via\nentropy reduction, plus optional stripping of debug information and\nload/store optimization.  It transforms SPIR-V to SPIR-V, remapping IDs.  The\nresulting modules have an increased ID range (IDs are not as tightly packed\naround zero), but will compress better when multiple modules are compressed\ntogether, since compressor's dictionary can find better cross module\ncommonality.\n\nRemapping is accomplished via canonicalization.  Thus, modules can be\ncompressed one at a time with no loss of quality relative to operating on\nmany modules at once.  The command line tool operates on multiple modules\nonly in the trivial repetition sense, for ease of use.  The remapper API\nonly accepts a single module at a time.\n\nThere are two modes of use: command line, and a C++11 API.  Both are\ndescribed below.\n\nspirv-remap is currently in an alpha state.  Although there are no known\nremapping defects, it has only been exercised on one real world game shader\nworkload.\n\n\nFEEDBACK\n---------------------------------------------------------------------------------\nReport defects, enhancement requests, code improvements, etc by creating\nissues in the glslang repository at https://github.com/KhronosGroup/glslang\n\nCOMMAND LINE USAGE:\n--------------------------------------------------------------------------------\nExamples are given with a verbosity of one (-v), but more verbosity can be\nhad via -vv, -vvv, etc, or an integer parameter to --verbose, such as\n\"--verbose 4\".  With no verbosity, the command is silent and returns 0 on\nsuccess, and a positive integer error on failure.\n\nPre-built binaries for several OSs are available.  Examples presented are\nfor Linux.  Command line arguments can be provided in any order.\n\n1. Basic ID remapping\n\nPerform ID remapping on all shaders in \"*.spv\", writing new files with\nthe same basenames to /tmp/out_dir.\n\n  spirv-remap -v --map all --input *.spv --output /tmp/out_dir\n\n2. Perform all possible size reductions\n\n  spirv-remap-linux-64 -v --do-everything --input *.spv --output /tmp/out_dir\n\nNote that --do-everything is a synonym for:\n\n  --map all --dce all --opt all --strip all\n\nAPI USAGE:\n--------------------------------------------------------------------------------\n\nThe public interface to the remapper is defined in SPIRV/SPVRemapper.h as follows:\n\nnamespace spv {\n\nclass spirvbin_t\n{\npublic:\n   enum Options { ... };\n   spirvbin_t(int verbose = 0);  // construct\n\n   // remap an existing binary in memory\n   void remap(std::vector<std::uint32_t>& spv, std::uint32_t opts = DO_EVERYTHING);\n\n   // Type for error/log handler functions\n   typedef std::function<void(const std::string&)> errorfn_t;\n   typedef std::function<void(const std::string&)> logfn_t;\n\n   // Register error/log handling functions (can be c/c++ fn, lambda fn, or functor)\n   static void registerErrorHandler(errorfn_t handler) { errorHandler = handler; }\n   static void registerLogHandler(logfn_t handler)     { logHandler   = handler; }\n};\n\n} // namespace spv\n\nThe class definition is in SPVRemapper.cpp.\n\nremap() accepts an std::vector of SPIR-V words, modifies them per the\nrequest given in 'opts', and leaves the 'spv' container with the result.\nIt is safe to instantiate one spirvbin_t per thread and process a different\nSPIR-V in each.\n\nThe \"opts\" parameter to remap() accepts a bit mask of desired remapping\noptions.  See REMAPPING AND OPTIMIZATION OPTIONS.\n\nOn error, the function supplied to registerErrorHandler() will be invoked.\nThis can be a standard C/C++ function, a lambda function, or a functor.\nThe default handler simply calls exit(5); The error handler is a static\nmember, so need only be set up once, not once per spirvbin_t instance.\n\nLog messages are supplied to registerLogHandler().  By default, log\nmessages are eaten silently.  The log handler is also a static member.\n\nBUILD DEPENDENCIES:\n--------------------------------------------------------------------------------\n 1. C++11 compatible compiler\n 2. cmake\n 3. glslang\n\n\nBUILDING\n--------------------------------------------------------------------------------\nThe standalone remapper is built along side glslang through its\nnormal build process.\n\n\nREMAPPING AND OPTIMIZATION OPTIONS\n--------------------------------------------------------------------------------\nAPI:\n   These are bits defined under spv::spirvbin_t::, and can be\n   bitwise or-ed together as desired.\n\n   MAP_TYPES      = canonicalize type IDs\n   MAP_NAMES      = canonicalize named data\n   MAP_FUNCS      = canonicalize function bodies\n   DCE_FUNCS      = remove dead functions\n   DCE_VARS       = remove dead variables\n   DCE_TYPES      = remove dead types\n   OPT_LOADSTORE  = optimize unneeded load/stores\n   MAP_ALL        = (MAP_TYPES | MAP_NAMES | MAP_FUNCS)\n   DCE_ALL        = (DCE_FUNCS | DCE_VARS | DCE_TYPES)\n   OPT_ALL        = (OPT_LOADSTORE)\n   ALL_BUT_STRIP  = (MAP_ALL | DCE_ALL | OPT_ALL)\n   DO_EVERYTHING  = (STRIP | ALL_BUT_STRIP)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.1357421875,
          "content": "![Continuous Integration](https://github.com/KhronosGroup/glslang/actions/workflows/continuous_integration.yml/badge.svg)\n![Continuous Deployment](https://github.com/KhronosGroup/glslang/actions/workflows/continuous_deployment.yml/badge.svg)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/KhronosGroup/glslang/badge)](https://securityscorecards.dev/viewer/?uri=github.com/KhronosGroup/glslang)\n\n# News\n\n1. Building glslang as a DLL or shared library is now possible and supported.\n\n2. The `GenericCodeGen`, `MachineIndependent`, `OSDependent`, and `SPIRV` libraries have been integrated into the main `glslang` library. The old separate libraries have replaced with empty stubs for a temporary compatibility period, and they will be removed entirely in the future.\n\n3. A new CMake `ENABLE_SPIRV` option has been added to control whether glslang is built with SPIR-V support. Its default value is `ON`.\n\n4. `OGLCompiler` and `HLSL` stub libraries have been fully removed from the build.\n\n# Glslang Components and Status\n\nThere are several components:\n\n### Reference Validator and GLSL/ESSL -> AST Front End\n\nAn OpenGL GLSL and OpenGL|ES GLSL (ESSL) front-end for reference validation and translation of GLSL/ESSL into an internal abstract syntax tree (AST).\n\n**Status**: Virtually complete, with results carrying similar weight as the specifications.\n\n### HLSL -> AST Front End\n\nAn HLSL front-end for translation of an approximation of HLSL to glslang's AST form.\n\n**Status**: Partially complete. Semantics are not reference quality and input is not validated.\nThis is in contrast to the [DXC project](https://github.com/Microsoft/DirectXShaderCompiler), which receives a much larger investment and attempts to have definitive/reference-level semantics.\n\nSee [issue 362](https://github.com/KhronosGroup/glslang/issues/362) and [issue 701](https://github.com/KhronosGroup/glslang/issues/701) for current status.\n\n### AST -> SPIR-V Back End\n\nTranslates glslang's AST to the Khronos-specified SPIR-V intermediate language.\n\n**Status**: Virtually complete.\n\n### Reflector\n\nAn API for getting reflection information from the AST, reflection types/variables/etc. from the HLL source (not the SPIR-V).\n\n**Status**: There is a large amount of functionality present, but no specification/goal to measure completeness against.  It is accurate for the input HLL and AST, but only approximate for what would later be emitted for SPIR-V.\n\n### Standalone Wrapper\n\n`glslang` is command-line tool for accessing the functionality above.\n\nStatus: Complete.\n\nTasks waiting to be done are documented as GitHub issues.\n\n## Other References\n\nAlso see the Khronos landing page for glslang as a reference front end:\n\nhttps://www.khronos.org/opengles/sdk/tools/Reference-Compiler/\n\nThe above page, while not kept up to date, includes additional information regarding glslang as a reference validator.\n\n# How to Use Glslang\n\n## Execution of Standalone Wrapper\n\nTo use the standalone binary form, execute `glslang`, and it will print\na usage statement.  Basic operation is to give it a file containing a shader,\nand it will print out warnings/errors and optionally an AST.\n\nThe applied stage-specific rules are based on the file extension:\n* `.vert` for a vertex shader\n* `.tesc` for a tessellation control shader\n* `.tese` for a tessellation evaluation shader\n* `.geom` for a geometry shader\n* `.frag` for a fragment shader\n* `.comp` for a compute shader\n\nFor ray tracing pipeline shaders:\n* `.rgen` for a ray generation shader\n* `.rint` for a ray intersection shader\n* `.rahit` for a ray any-hit shader\n* `.rchit` for a ray closest-hit shader\n* `.rmiss` for a ray miss shader\n* `.rcall` for a callable shader\n\nThere is also a non-shader extension:\n* `.conf` for a configuration file of limits, see usage statement for example\n\n## Building (CMake)\n\nInstead of building manually, you can also download the binaries for your\nplatform directly from the [main-tot release][main-tot-release] on GitHub.\nThose binaries are automatically uploaded by the buildbots after successful\ntesting and they always reflect the current top of the tree of the main\nbranch.\n\n### Dependencies\n\n* A C++17 compiler.\n  (For MSVS: use 2019 or later.)\n* [CMake][cmake]: for generating compilation targets.\n* make: _Linux_, ninja is an alternative, if configured.\n* [Python 3.x][python]: for executing SPIRV-Tools scripts. (Optional if not using SPIRV-Tools and the 'External' subdirectory does not exist.)\n* [bison][bison]: _optional_, but needed when changing the grammar (glslang.y).\n* [googletest][googletest]: _optional_, but should use if making any changes to glslang.\n\n### Build steps\n\nThe following steps assume a Bash shell. On Windows, that could be the Git Bash\nshell or some other shell of your choosing.\n\n#### 1) Check-Out this project\n\n```bash\ncd <parent of where you want glslang to be>\ngit clone https://github.com/KhronosGroup/glslang.git\n```\n\n#### 2) Check-Out External Projects\n\n```bash\n./update_glslang_sources.py\n```\n\n#### 3) Configure\n\nAssume the source directory is `$SOURCE_DIR` and the build directory is `$BUILD_DIR`.\nCMake will create the `$BUILD_DIR` for the user if it doesn't exist.\n\nFirst change your working directory:\n```bash\ncd $SOURCE_DIR\n```\n\nFor building on Linux:\n\n```bash\ncmake -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"$(pwd)/install\"\n# \"Release\" (for CMAKE_BUILD_TYPE) could also be \"Debug\" or \"RelWithDebInfo\"\n```\n\nFor building on Android:\n```bash\ncmake -B $BUILD_DIR -G \"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=\"$(pwd)/install\" -DANDROID_ABI=arm64-v8a -DCMAKE_BUILD_TYPE=Release -DANDROID_STL=c++_static -DANDROID_PLATFORM=android-24 -DCMAKE_SYSTEM_NAME=Android -DANDROID_TOOLCHAIN=clang -DANDROID_ARM_MODE=arm -DCMAKE_MAKE_PROGRAM=$ANDROID_NDK_HOME/prebuilt/linux-x86_64/bin/make -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake\n# If on Windows will be -DCMAKE_MAKE_PROGRAM=%ANDROID_NDK_HOME%\\prebuilt\\windows-x86_64\\bin\\make.exe\n# -G is needed for building on Windows\n# -DANDROID_ABI can also be armeabi-v7a for 32 bit\n```\n\nFor building on Windows:\n\n```bash\ncmake -B $BUILD_DIR -DCMAKE_INSTALL_PREFIX=\"$(pwd)/install\"\n# The CMAKE_INSTALL_PREFIX part is for testing (explained later).\n```\n\nAlso, consider using `git config --global core.fileMode false` (or with `--local`) on Windows\nto prevent the addition of execution permission on files.\n\n#### 4) Build and Install\n\n```bash\n# for Linux:\nmake -j4 install\n\n# for Windows:\ncmake --build . --config Release --target install\n# \"Release\" (for --config) could also be \"Debug\", \"MinSizeRel\", or \"RelWithDebInfo\"\n```\n\nIf using MSVC, after running CMake to configure, use the\nConfiguration Manager to check the `INSTALL` project.\n\n### Building (GN)\n\nglslang can also be built with the [GN build system](https://gn.googlesource.com/gn/).\n\n#### 1) Install `depot_tools`\n\nDownload [depot_tools.zip](https://storage.googleapis.com/chrome-infra/depot_tools.zip),\nextract to a directory, and add this directory to your `PATH`.\n\n#### 2) Synchronize dependencies and generate build files\n\nThis only needs to be done once after updating `glslang`.\n\nWith the current directory set to your `glslang` checkout, type:\n\n```bash\n./update_glslang_sources.py\ngclient sync --gclientfile=standalone.gclient\ngn gen out/Default\n```\n\n#### 3) Build\n\nWith the current directory set to your `glslang` checkout, type:\n\n```bash\ncd out/Default\nninja\n```\n\n### If you need to change the GLSL grammar\n\nThe grammar in `glslang/MachineIndependent/glslang.y` has to be recompiled with\nbison if it changes, the output files are committed to the repo to avoid every\ndeveloper needing to have bison configured to compile the project when grammar\nchanges are quite infrequent. For windows you can get binaries from\n[GnuWin32][bison-gnu-win32].\n\nThe command to rebuild is:\n\n```bash\nbison --defines=MachineIndependent/glslang_tab.cpp.h\n      -t MachineIndependent/glslang.y\n      -o MachineIndependent/glslang_tab.cpp\n```\n\nThe above command is also available in the bash script in `updateGrammar`,\nwhen executed from the glslang subdirectory of the glslang repository.\n\n### Building to WASM for the Web and Node\n### Building a standalone JS/WASM library for the Web and Node\n\nUse the steps in [Build Steps](#build-steps), with the following notes/exceptions:\n* `emsdk` needs to be present in your executable search path, *PATH* for\n  Bash-like environments:\n  + [Instructions located here](https://emscripten.org/docs/getting_started/downloads.html#sdk-download-and-install)\n* Wrap cmake call: `emcmake cmake`\n* Set `-DENABLE_OPT=OFF`.\n* Set `-DENABLE_HLSL=OFF` if HLSL is not needed.\n* For a standalone JS/WASM library, turn on `-DENABLE_GLSLANG_JS=ON`.\n* To get a fully minimized build, make sure to use `brotli` to compress the .js\n  and .wasm files\n* Note that by default, Emscripten allocates a very small stack size, which may\n  cause stack overflows when compiling large shaders. Use the\n  [STACK_SIZE](https://emscripten.org/docs/tools_reference/settings_reference.html?highlight=environment#stack-size)\n  compiler setting to increase the stack size.\n\nExample:\n\n```sh\nemcmake cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_GLSLANG_JS=ON \\\n    -DENABLE_HLSL=OFF -DENABLE_OPT=OFF ..\n```\n\n## Building glslang - Using vcpkg\n\nYou can download and install glslang using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install glslang\n\nThe glslang port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Testing\n\nRight now, there are two test harnesses existing in glslang: one is [Google\nTest](gtests/), one is the [`runtests` script](Test/runtests). The former\nruns unit tests and single-shader single-threaded integration tests, while\nthe latter runs multiple-shader linking tests and multi-threaded tests.\n\nTests may erroneously fail or pass if using `ALLOW_EXTERNAL_SPIRV_TOOLS` with\nany commit other than the one specified in `known_good.json`.\n\n### Running tests\n\nThe [`runtests` script](Test/runtests) requires compiled binaries to be\ninstalled into `$BUILD_DIR/install`. Please make sure you have supplied the\ncorrect configuration to CMake (using `-DCMAKE_INSTALL_PREFIX`) when building;\notherwise, you may want to modify the path in the `runtests` script.\n\nRunning Google Test-backed tests:\n\n```bash\ncd $BUILD_DIR\n\n# for Linux:\nctest\n\n# for Windows:\nctest -C {Debug|Release|RelWithDebInfo|MinSizeRel}\n\n# or, run the test binary directly\n# (which gives more fine-grained control like filtering):\n<dir-to-glslangtests-in-build-dir>/glslangtests\n```\n\nRunning `runtests` script-backed tests:\n\n```bash\ncd $SOURCE_DIR/Test && ./runtests\n```\n\nIf some tests fail with validation errors, there may be a mismatch between the\nversion of `spirv-val` on the system and the version of glslang.  In this\ncase, it is necessary to run `update_glslang_sources.py`.  See \"Check-Out\nExternal Projects\" above for more details.\n\n### Contributing tests\n\nTest results should always be included with a pull request that modifies\nfunctionality.\n\nIf you are writing unit tests, please use the Google Test framework and\nplace the tests under the `gtests/` directory.\n\nIntegration tests are placed in the `Test/` directory. It contains test input\nand a subdirectory `baseResults/` that contains the expected results of the\ntests.  Both the tests and `baseResults/` are under source-code control.\n\nGoogle Test runs those integration tests by reading the test input, compiling\nthem, and then compare against the expected results in `baseResults/`. The\nintegration tests to run via Google Test is registered in various\n`gtests/*.FromFile.cpp` source files. `glslangtests` provides a command-line\noption `--update-mode`, which, if supplied, will overwrite the golden files\nunder the `baseResults/` directory with real output from that invocation.\nFor more information, please check `gtests/` directory's\n[README](gtests/README.md).\n\nFor the `runtests` script, it will generate current results in the\n`localResults/` directory and `diff` them against the `baseResults/`.\nWhen you want to update the tracked test results, they need to be\ncopied from `localResults/` to `baseResults/`.  This can be done by\nthe `bump` shell script.\n\nYou can add your own private list of tests, not tracked publicly, by using\n`localtestlist` to list non-tracked tests.  This is automatically read\nby `runtests` and included in the `diff` and `bump` process.\n\n## Programmatic Interfaces\n\nAnother piece of software can programmatically translate shaders to an AST\nusing one of two different interfaces:\n* A new C++ class-oriented interface, or\n* The original C functional interface\n\nThe `main()` in `StandAlone/StandAlone.cpp` shows examples using both styles.\n\n### C++ Class Interface (new, preferred)\n\nThis interface is in roughly the last 1/3 of `ShaderLang.h`.  It is in the\nglslang namespace and contains the following, here with suggested calls\nfor generating SPIR-V:\n\n```cxx\nconst char* GetEsslVersionString();\nconst char* GetGlslVersionString();\nbool InitializeProcess();\nvoid FinalizeProcess();\n\nclass TShader\n    setStrings(...);\n    setEnvInput(EShSourceHlsl or EShSourceGlsl, stage,  EShClientVulkan or EShClientOpenGL, 100);\n    setEnvClient(EShClientVulkan or EShClientOpenGL, EShTargetVulkan_1_0 or EShTargetVulkan_1_1 or EShTargetOpenGL_450);\n    setEnvTarget(EShTargetSpv, EShTargetSpv_1_0 or EShTargetSpv_1_3);\n    bool parse(...);\n    const char* getInfoLog();\n\nclass TProgram\n    void addShader(...);\n    bool link(...);\n    const char* getInfoLog();\n    Reflection queries\n```\n\nFor just validating (not generating code), substitute these calls:\n\n```cxx\n    setEnvInput(EShSourceHlsl or EShSourceGlsl, stage,  EShClientNone, 0);\n    setEnvClient(EShClientNone, 0);\n    setEnvTarget(EShTargetNone, 0);\n```\n\nSee `ShaderLang.h` and the usage of it in `StandAlone/StandAlone.cpp` for more\ndetails. There is a block comment giving more detail above the calls for\n`setEnvInput, setEnvClient, and setEnvTarget`.\n\n### C Functional Interface (original)\n\nThis interface is in roughly the first 2/3 of `ShaderLang.h`, and referred to\nas the `Sh*()` interface, as all the entry points start `Sh`.\n\nThe `Sh*()` interface takes a \"compiler\" call-back object, which it calls after\nbuilding call back that is passed the AST and can then execute a back end on it.\n\nThe following is a simplified resulting run-time call stack:\n\n```c\nShCompile(shader, compiler) -> compiler(AST) -> <back end>\n```\n\nIn practice, `ShCompile()` takes shader strings, default version, and\nwarning/error and other options for controlling compilation.\n\n### C Functional Interface (new)\n\nThis interface is located `glslang_c_interface.h` and exposes functionality similar to the C++ interface. The following snippet is a complete example showing how to compile GLSL into SPIR-V 1.5 for Vulkan 1.2.\n\n```c\n#include <glslang/Include/glslang_c_interface.h>\n\n// Required for use of glslang_default_resource\n#include <glslang/Public/resource_limits_c.h>\n\ntypedef struct SpirVBinary {\n    uint32_t *words; // SPIR-V words\n    int size; // number of words in SPIR-V binary\n} SpirVBinary;\n\nSpirVBinary compileShaderToSPIRV_Vulkan(glslang_stage_t stage, const char* shaderSource, const char* fileName) {\n    const glslang_input_t input = {\n        .language = GLSLANG_SOURCE_GLSL,\n        .stage = stage,\n        .client = GLSLANG_CLIENT_VULKAN,\n        .client_version = GLSLANG_TARGET_VULKAN_1_2,\n        .target_language = GLSLANG_TARGET_SPV,\n        .target_language_version = GLSLANG_TARGET_SPV_1_5,\n        .code = shaderSource,\n        .default_version = 100,\n        .default_profile = GLSLANG_NO_PROFILE,\n        .force_default_version_and_profile = false,\n        .forward_compatible = false,\n        .messages = GLSLANG_MSG_DEFAULT_BIT,\n        .resource = glslang_default_resource(),\n    };\n\n    glslang_shader_t* shader = glslang_shader_create(&input);\n\n    SpirVBinary bin = {\n        .words = NULL,\n        .size = 0,\n    };\n    if (!glslang_shader_preprocess(shader, &input))\t{\n        printf(\"GLSL preprocessing failed %s\\n\", fileName);\n        printf(\"%s\\n\", glslang_shader_get_info_log(shader));\n        printf(\"%s\\n\", glslang_shader_get_info_debug_log(shader));\n        printf(\"%s\\n\", input.code);\n        glslang_shader_delete(shader);\n        return bin;\n    }\n\n    if (!glslang_shader_parse(shader, &input)) {\n        printf(\"GLSL parsing failed %s\\n\", fileName);\n        printf(\"%s\\n\", glslang_shader_get_info_log(shader));\n        printf(\"%s\\n\", glslang_shader_get_info_debug_log(shader));\n        printf(\"%s\\n\", glslang_shader_get_preprocessed_code(shader));\n        glslang_shader_delete(shader);\n        return bin;\n    }\n\n    glslang_program_t* program = glslang_program_create();\n    glslang_program_add_shader(program, shader);\n\n    if (!glslang_program_link(program, GLSLANG_MSG_SPV_RULES_BIT | GLSLANG_MSG_VULKAN_RULES_BIT)) {\n        printf(\"GLSL linking failed %s\\n\", fileName);\n        printf(\"%s\\n\", glslang_program_get_info_log(program));\n        printf(\"%s\\n\", glslang_program_get_info_debug_log(program));\n        glslang_program_delete(program);\n        glslang_shader_delete(shader);\n        return bin;\n    }\n\n    glslang_program_SPIRV_generate(program, stage);\n\n    bin.size = glslang_program_SPIRV_get_size(program);\n    bin.words = malloc(bin.size * sizeof(uint32_t));\n    glslang_program_SPIRV_get(program, bin.words);\n\n    const char* spirv_messages = glslang_program_SPIRV_get_messages(program);\n    if (spirv_messages)\n        printf(\"(%s) %s\\b\", fileName, spirv_messages);\n\n    glslang_program_delete(program);\n    glslang_shader_delete(shader);\n\n    return bin;\n}\n```\n\n## Basic Internal Operation\n\n* Initial lexical analysis is done by the preprocessor in\n  `MachineIndependent/Preprocessor`, and then refined by a GLSL scanner\n  in `MachineIndependent/Scan.cpp`.  There is currently no use of flex.\n\n* Code is parsed using bison on `MachineIndependent/glslang.y` with the\n  aid of a symbol table and an AST.  The symbol table is not passed on to\n  the back-end; the intermediate representation stands on its own.\n  The tree is built by the grammar productions, many of which are\n  offloaded into `ParseHelper.cpp`, and by `Intermediate.cpp`.\n\n* The intermediate representation is very high-level, and represented\n  as an in-memory tree.   This serves to lose no information from the\n  original program, and to have efficient transfer of the result from\n  parsing to the back-end.  In the AST, constants are propagated and\n  folded, and a very small amount of dead code is eliminated.\n\n  To aid linking and reflection, the last top-level branch in the AST\n  lists all global symbols.\n\n* The primary algorithm of the back-end compiler is to traverse the\n  tree (high-level intermediate representation), and create an internal\n  object code representation.  There is an example of how to do this\n  in `MachineIndependent/intermOut.cpp`.\n\n* Reduction of the tree to a linear byte-code style low-level intermediate\n  representation is likely a good way to generate fully optimized code.\n\n* There is currently some dead old-style linker-type code still lying around.\n\n* Memory pool: parsing uses types derived from C++ `std` types, using a\n  custom allocator that puts them in a memory pool.  This makes allocation\n  of individual container/contents just few cycles and deallocation free.\n  This pool is popped after the AST is made and processed.\n\n  The use is simple: if you are going to call `new`, there are three cases:\n\n  - the object comes from the pool (its base class has the macro\n    `POOL_ALLOCATOR_NEW_DELETE` in it) and you do not have to call `delete`\n\n  - it is a `TString`, in which case call `NewPoolTString()`, which gets\n    it from the pool, and there is no corresponding `delete`\n\n  - the object does not come from the pool, and you have to do normal\n    C++ memory management of what you `new`\n\n* Features can be protected by version/extension/stage/profile:\n  See the comment in `glslang/MachineIndependent/Versions.cpp`.\n\n[cmake]: https://cmake.org/\n[python]: https://www.python.org/\n[bison]: https://www.gnu.org/software/bison/\n[googletest]: https://github.com/google/googletest\n[bison-gnu-win32]: http://gnuwin32.sourceforge.net/packages/bison.htm\n[main-tot-release]: https://github.com/KhronosGroup/glslang/releases/tag/main-tot\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3115234375,
          "content": "# Security Policy\n\nTo report a security issue, please disclose it at [security advisory](https://github.com/KhronosGroup/glslang/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As\nsuch, please give us at least 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "SPIRV",
          "type": "tree",
          "content": null
        },
        {
          "name": "StandAlone",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-merlot\n"
        },
        {
          "name": "build_info.h.tmpl",
          "type": "blob",
          "size": 2.8515625,
          "content": "// Copyright (C) 2020 The Khronos Group Inc.\n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//\n//    Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n//\n//    Redistributions in binary form must reproduce the above\n//    copyright notice, this list of conditions and the following\n//    disclaimer in the documentation and/or other materials provided\n//    with the distribution.\n//\n//    Neither the name of The Khronos Group Inc. nor the names of its\n//    contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n// COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\n#ifndef GLSLANG_BUILD_INFO\n#define GLSLANG_BUILD_INFO\n\n#define GLSLANG_VERSION_MAJOR @major@\n#define GLSLANG_VERSION_MINOR @minor@\n#define GLSLANG_VERSION_PATCH @patch@\n#define GLSLANG_VERSION_FLAVOR \"@flavor@\"\n\n#define GLSLANG_VERSION_GREATER_THAN(major, minor, patch) \\\n    ((GLSLANG_VERSION_MAJOR) > (major) || ((major) == GLSLANG_VERSION_MAJOR && \\\n    ((GLSLANG_VERSION_MINOR) > (minor) || ((minor) == GLSLANG_VERSION_MINOR && \\\n     (GLSLANG_VERSION_PATCH) > (patch)))))\n\n#define GLSLANG_VERSION_GREATER_OR_EQUAL_TO(major, minor, patch) \\\n    ((GLSLANG_VERSION_MAJOR) > (major) || ((major) == GLSLANG_VERSION_MAJOR && \\\n    ((GLSLANG_VERSION_MINOR) > (minor) || ((minor) == GLSLANG_VERSION_MINOR && \\\n     (GLSLANG_VERSION_PATCH >= (patch))))))\n\n#define GLSLANG_VERSION_LESS_THAN(major, minor, patch) \\\n    ((GLSLANG_VERSION_MAJOR) < (major) || ((major) == GLSLANG_VERSION_MAJOR && \\\n    ((GLSLANG_VERSION_MINOR) < (minor) || ((minor) == GLSLANG_VERSION_MINOR && \\\n     (GLSLANG_VERSION_PATCH) < (patch)))))\n\n#define GLSLANG_VERSION_LESS_OR_EQUAL_TO(major, minor, patch) \\\n    ((GLSLANG_VERSION_MAJOR) < (major) || ((major) == GLSLANG_VERSION_MAJOR && \\\n    ((GLSLANG_VERSION_MINOR) < (minor) || ((minor) == GLSLANG_VERSION_MINOR && \\\n     (GLSLANG_VERSION_PATCH <= (patch))))))\n\n#endif // GLSLANG_BUILD_INFO\n"
        },
        {
          "name": "build_info.py",
          "type": "blob",
          "size": 7.984375,
          "content": "#!/usr/bin/env python3\n\n# Copyright (c) 2020 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport datetime\nimport errno\nimport os\nimport os.path\nimport re\nimport subprocess\nimport sys\nimport time\n\nusage = \"\"\"{} emits a string to stdout or file with project version information.\n\nargs: <project-dir> [<input-string>] [-i <input-file>] [-o <output-file>]\n\nEither <input-string> or -i <input-file> needs to be provided.\n\nThe tool will output the provided string or file content with the following\ntokens substituted:\n\n <major>   - The major version point parsed from the CHANGES.md file.\n <minor>   - The minor version point parsed from the CHANGES.md file.\n <patch>   - The point version point parsed from the CHANGES.md file.\n <flavor>  - The optional dash suffix parsed from the CHANGES.md file (excluding\n             dash prefix).\n <-flavor> - The optional dash suffix parsed from the CHANGES.md file (including\n             dash prefix).\n <date>    - The optional date of the release in the form YYYY-MM-DD\n <commit>  - The git commit information for the directory taken from\n             \"git describe\" if that succeeds, or \"git rev-parse HEAD\"\n             if that succeeds, or otherwise a message containing the phrase\n             \"unknown hash\".\n\n-o is an optional flag for writing the output string to the given file. If\n   ommitted then the string is printed to stdout.\n\"\"\"\n\ntry:\n    utc = datetime.timezone.utc\nexcept AttributeError:\n    # Python 2? In datetime.date.today().year? Yes.\n    class UTC(datetime.tzinfo):\n        ZERO = datetime.timedelta(0)\n\n        def utcoffset(self, dt):\n            return self.ZERO\n\n        def tzname(self, dt):\n            return \"UTC\"\n\n        def dst(self, dt):\n            return self.ZERO\n    utc = UTC()\n\n\ndef mkdir_p(directory):\n    \"\"\"Make the directory, and all its ancestors as required.  Any of the\n    directories are allowed to already exist.\"\"\"\n\n    if directory == \"\":\n        # We're being asked to make the current directory.\n        return\n\n    try:\n        os.makedirs(directory)\n    except OSError as e:\n        if e.errno == errno.EEXIST and os.path.isdir(directory):\n            pass\n        else:\n            raise\n\n\ndef command_output(cmd, directory):\n    \"\"\"Runs a command in a directory and returns its standard output stream.\n\n    Captures the standard error stream.\n\n    Raises a RuntimeError if the command fails to launch or otherwise fails.\n    \"\"\"\n    p = subprocess.Popen(cmd,\n                         cwd=directory,\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n    (stdout, _) = p.communicate()\n    if p.returncode != 0:\n        raise RuntimeError('Failed to run %s in %s' % (cmd, directory))\n    return stdout\n\n\ndef deduce_software_version(directory):\n    \"\"\"Returns a software version number parsed from the CHANGES.md file\n    in the given directory.\n\n    The CHANGES.md file describes most recent versions first.\n    \"\"\"\n\n    # Match the first well-formed version-and-date line.\n    # Allow trailing whitespace in the checked-out source code has\n    # unexpected carriage returns on a linefeed-only system such as\n    # Linux.\n    pattern = re.compile(r'^#* +(\\d+)\\.(\\d+)\\.(\\d+)(-\\w+)? (\\d\\d\\d\\d-\\d\\d-\\d\\d)? *$')\n    changes_file = os.path.join(directory, 'CHANGES.md')\n    with open(changes_file, mode='r') as f:\n        for line in f.readlines():\n            match = pattern.match(line)\n            if match:\n                flavor = match.group(4)\n                if flavor == None:\n                    flavor = \"\"\n                return {\n                    \"major\": match.group(1),\n                    \"minor\": match.group(2),\n                    \"patch\": match.group(3),\n                    \"flavor\": flavor.lstrip(\"-\"),\n                    \"-flavor\": flavor,\n                    \"date\": match.group(5),\n                }\n    raise Exception('No version number found in {}'.format(changes_file))\n\n\ndef describe(directory):\n    \"\"\"Returns a string describing the current Git HEAD version as descriptively\n    as possible.\n\n    Runs 'git describe', or alternately 'git rev-parse HEAD', in directory.  If\n    successful, returns the output; otherwise returns 'unknown hash, <date>'.\"\"\"\n    try:\n        # decode() is needed here for Python3 compatibility. In Python2,\n        # str and bytes are the same type, but not in Python3.\n        # Popen.communicate() returns a bytes instance, which needs to be\n        # decoded into text data first in Python3. And this decode() won't\n        # hurt Python2.\n        return command_output(['git', 'describe'], directory).rstrip().decode()\n    except:\n        try:\n            return command_output(\n                ['git', 'rev-parse', 'HEAD'], directory).rstrip().decode()\n        except:\n            # This is the fallback case where git gives us no information,\n            # e.g. because the source tree might not be in a git tree.\n            # In this case, usually use a timestamp.  However, to ensure\n            # reproducible builds, allow the builder to override the wall\n            # clock time with environment variable SOURCE_DATE_EPOCH\n            # containing a (presumably) fixed timestamp.\n            timestamp = int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))\n            formatted = datetime.datetime.fromtimestamp(timestamp, utc).isoformat()\n            return 'unknown hash, {}'.format(formatted)\n\ndef parse_args():\n    directory = None\n    input_string = None\n    input_file = None\n    output_file = None\n\n    if len(sys.argv) < 2:\n        raise Exception(\"Invalid number of arguments\")\n\n    directory = sys.argv[1]\n    i = 2\n\n    if not sys.argv[i].startswith(\"-\"):\n        input_string = sys.argv[i]\n        i = i + 1\n\n    while i < len(sys.argv):\n        opt = sys.argv[i]\n        i = i + 1\n\n        if opt == \"-i\" or opt == \"-o\":\n            if i == len(sys.argv):\n                raise Exception(\"Expected path after {}\".format(opt))\n            val = sys.argv[i]\n            i = i + 1\n            if (opt == \"-i\"):\n                input_file = val\n            elif (opt == \"-o\"):\n                output_file = val\n            else:\n                raise Exception(\"Unknown flag {}\".format(opt))\n\n    return {\n        \"directory\": directory,\n        \"input_string\": input_string,\n        \"input_file\": input_file,\n        \"output_file\": output_file,\n    }\n\ndef main():\n    args = None\n    try:\n        args = parse_args()\n    except Exception as e:\n        print(e)\n        print(\"\\nUsage:\\n\")\n        print(usage.format(sys.argv[0]))\n        sys.exit(1)\n\n    directory = args[\"directory\"]\n    template = args[\"input_string\"]\n    if template == None:\n        with open(args[\"input_file\"], 'r') as f:\n            template = f.read()\n    output_file = args[\"output_file\"]\n\n    software_version = deduce_software_version(directory)\n    commit = describe(directory)\n    output = template \\\n        .replace(\"@major@\", software_version[\"major\"]) \\\n        .replace(\"@minor@\", software_version[\"minor\"]) \\\n        .replace(\"@patch@\", software_version[\"patch\"]) \\\n        .replace(\"@flavor@\", software_version[\"flavor\"]) \\\n        .replace(\"@-flavor@\", software_version[\"-flavor\"]) \\\n        .replace(\"@date@\", software_version[\"date\"]) \\\n        .replace(\"@commit@\", commit)\n\n    if output_file is None:\n        print(output)\n    else:\n        mkdir_p(os.path.dirname(output_file))\n\n        if os.path.isfile(output_file):\n            with open(output_file, 'r') as f:\n                if output == f.read():\n                    return\n\n        with open(output_file, 'w') as f:\n            f.write(output)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "build_overrides",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen_extension_headers.py",
          "type": "blob",
          "size": 3.5625,
          "content": "#!/usr/bin/env python3\n\n# Copyright (c) 2020 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\r\n\r\nimport glob\r\nimport sys\r\nimport os\r\n\r\ndef generate_main(glsl_files, output_header_file):\r\n    # Write commit ID to output header file\r\n    with open(output_header_file, \"w\") as header_file:\r\n        # Copyright Notice\r\n        header_string =  '/***************************************************************************\\n'\r\n        header_string += ' *\\n'\r\n        header_string += ' * Copyright (c) 2015-2021 The Khronos Group Inc.\\n'\r\n        header_string += ' * Copyright (c) 2015-2021 Valve Corporation\\n'\r\n        header_string += ' * Copyright (c) 2015-2021 LunarG, Inc.\\n'\r\n        header_string += ' * Copyright (c) 2015-2021 Google Inc.\\n'\r\n        header_string += ' * Copyright (c) 2021 Advanced Micro Devices, Inc.All rights reserved.\\n'\r\n        header_string += ' *\\n'\r\n        header_string += ' ****************************************************************************/\\n'\r\n        header_string += '#pragma once\\n\\n'\r\n        header_string += '#ifndef _INTRINSIC_EXTENSION_HEADER_H_\\n'\r\n        header_string += '#define _INTRINSIC_EXTENSION_HEADER_H_\\n\\n'\r\n        header_file.write(header_string)\r\n\r\n        symbol_name_list = []\r\n\r\n        for i in glsl_files:\r\n            glsl_contents = open(i,\"r\").read()\r\n\r\n            filename = os.path.basename(i)\r\n            symbol_name = filename.split(\".\")[0]\r\n            symbol_name_list.append(symbol_name)\r\n            header_name = symbol_name + \".h\"\r\n            header_str = 'std::string %s_GLSL = R\"(\\n%s\\n)\";\\n' % (symbol_name, glsl_contents)\r\n            header_str += '\\n'\r\n            header_file.write(header_str)\r\n\r\n        contents = ''\r\n        contents += '\\n'\n        contents += 'std::string getIntrinsic(const char* const* shaders, int n) {\\n'\n        contents += '\\tstd::string shaderString = \"\";\\n';\n\n        contents += '\\tfor (int i = 0; i < n; i++) {\\n'\n\n        for symbol_name in symbol_name_list:\r\n            contents += '\\t\\tif (strstr(shaders[i], \"%s\") != nullptr) {\\n'   % (symbol_name)\n            contents += '\\t\\t    shaderString.append(%s_GLSL);\\n' % (symbol_name)\n            contents += '\\t\\t}\\n'\r\n\n        contents += '\\t}\\n'\n        contents += '\\treturn shaderString;\\n';\n        contents += '}\\n'\r\n\r\n        contents += '\\n#endif\\n'\r\n        header_file.write(contents)\r\n\r\ndef main():\r\n    if len(sys.argv) < 2:\n        raise Exception(\"Invalid number of arguments\")\r\n\r\n    i = 0\r\n    while i < len(sys.argv):\n        opt = sys.argv[i]\n        i = i + 1\n\n        if opt == \"-i\" or opt == \"-o\":\n            if i == len(sys.argv):\n                raise Exception(\"Expected path after {}\".format(opt))\n            val = sys.argv[i]\n            i = i + 1\n            if (opt == \"-i\"):\n                input_dir = val\n            elif (opt == \"-o\"):\n                output_file = val\n            else:\n                raise Exception(\"Unknown flag {}\".format(opt))\r\n\r\n    glsl_files = glob.glob(input_dir + '/*.glsl')\r\n\r\n    # Generate main header\r\n    generate_main(glsl_files, output_file)\r\n\r\nif __name__ == '__main__':\r\n    main()\n"
        },
        {
          "name": "glslang",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtests",
          "type": "tree",
          "content": null
        },
        {
          "name": "known_good.json",
          "type": "blob",
          "size": 0.65234375,
          "content": "{\n  \"commits\" : [\n    {\n      \"name\" : \"spirv-tools\",\n      \"site\" : \"github\",\n      \"subrepo\" : \"KhronosGroup/SPIRV-Tools\",\n      \"subdir\" : \"External/spirv-tools\",\n      \"commit\": \"4d2f0b40bfe290dea6c6904dafdf7fd8328ba346\"\n    },\n    {\n      \"name\" : \"spirv-tools/external/spirv-headers\",\n      \"site\" : \"github\",\n      \"subrepo\" : \"KhronosGroup/SPIRV-Headers\",\n      \"subdir\" : \"External/spirv-tools/external/spirv-headers\",\n      \"commit\" : \"3f17b2af6784bfa2c5aa5dbb8e0e74a607dd8b3b\"\n    },\n    {\n      \"name\": \"googletest\",\n      \"site\": \"github\",\n      \"subrepo\": \"google/googletest\",\n      \"subdir\": \"External/googletest\",\n      \"commit\": \"v1.14.0\"\n    }\n  ]\n}\n"
        },
        {
          "name": "known_good_khr.json",
          "type": "blob",
          "size": 0.6171875,
          "content": "{\n  \"commits\" : [\n    {\n      \"name\" : \"spirv-tools\",\n      \"site\" : \"gitlab\",\n      \"subrepo\" : \"spirv/spirv-tools\",\n      \"subdir\" : \"External/spirv-tools\",\n      \"commit\" : \"d4e2c2eaa6fd2e9f9cd218ea9add9b0c8ae759ba\"\n    },\n    {\n      \"name\" : \"spirv-tools/external/spirv-headers\",\n      \"site\" : \"gitlab\",\n      \"subrepo\" : \"spirv/SPIRV-Headers\",\n      \"subdir\" : \"External/spirv-tools/external/spirv-headers\",\n      \"commit\" : \"gitlab-prelim-rc4\"\n    },\n    {\n      \"name\": \"googletest\",\n      \"site\": \"github\",\n      \"subrepo\": \"google/googletest\",\n      \"subdir\": \"External/googletest\",\n      \"commit\": \"v1.14.0\"\n    }\n  ]\n}\n"
        },
        {
          "name": "kokoro",
          "type": "tree",
          "content": null
        },
        {
          "name": "license-checker.cfg",
          "type": "blob",
          "size": 1.6904296875,
          "content": "[\r\n    {\r\n        \"licenses\": [\r\n            \"Apache-2.0\",\r\n            \"Apache-2.0-Header\",\r\n            \"BSD-2-Clause\",\r\n            \"BSD-3-Clause\",\r\n            \"MIT-0\",\r\n            \"MIT\"\r\n        ],\r\n        \"paths\": [\r\n            {\r\n                \"exclude\": [\r\n                    \"**.md\",\r\n\r\n                    \"_config.yml\",\r\n                    \".*\",\r\n                    \".github/workflows/*.yml\",\r\n                    \".github/workflows/*.js\",\r\n                    \"CMakeSettings.json\",\r\n                    \"known_good_khr.json\",\r\n                    \"known_good.json\",\r\n                    \"LICENSE.txt\",\r\n                    \"make-revision\",\r\n                    \"README-spirv-remap.txt\",\r\n                    \"WORKSPACE\",\r\n\r\n                    \"glslang/OSDependent/Web/glslang.*.js\",\r\n                    \"glslang/MachineIndependent/glslang_tab.cpp\",\r\n                    \"glslang/MachineIndependent/glslang_tab.cpp.h\",\r\n\r\n                    \"build/**\",\r\n                    \"out/**\",\r\n                    \"Test/**\",\r\n                    \"External/spirv-tools/**\",\r\n\r\n                    \"SPIRV/GLSL.*.h\",\r\n                    \"SPIRV/NonSemanticDebugPrintf.h\",\r\n                    \"SPIRV/NonSemanticShaderDebugInfo100.h\",\r\n                    \"SPIRV/spirv.hpp\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"licenses\": [\r\n            \"GPL-Header\",\r\n            \"GPL-3.0-or-later\"\r\n        ],\r\n        \"paths\": [\r\n            { \"exclude\": [ \"**\" ] },\r\n            {\r\n                \"include\": [\r\n                    \"glslang/MachineIndependent/glslang_tab.cpp\",\r\n                    \"glslang/MachineIndependent/glslang_tab.cpp.h\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n]\r\n"
        },
        {
          "name": "ndk_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "parse_version.cmake",
          "type": "blob",
          "size": 1.8583984375,
          "content": "# Copyright (C) 2020 Google, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# parse_version() reads and parses the version string from FILE, assigning the\n# version string to ${PROJECT}_VERSION and the parsed version to\n# ${PROJECT}_VERSION_MAJOR, ${PROJECT}_VERSION_MINOR, ${PROJECT}_VERSION_PATCH,\n# and the optional ${PROJECT}_VERSION_FLAVOR.\n#\n# The version string take one of the forms:\n#    <major>.<minor>.<patch>\n#    <major>.<minor>.<patch>-<flavor>\nfunction(parse_version FILE PROJECT)\n    configure_file(${FILE} \"${CMAKE_CURRENT_BINARY_DIR}/CHANGES.md\") # Required to re-run cmake on version change\n    file(READ ${FILE} CHANGES)\n    if(${CHANGES} MATCHES \"#+ *([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(-[a-zA-Z0-9]+)?\")\n        set(FLAVOR \"\")\n        if(NOT \"${CMAKE_MATCH_4}\" STREQUAL \"\")\n            string(SUBSTRING ${CMAKE_MATCH_4} 1 -1 FLAVOR)\n        endif()\n        set(\"${PROJECT}_VERSION_MAJOR\"  ${CMAKE_MATCH_1} PARENT_SCOPE)\n        set(\"${PROJECT}_VERSION_MINOR\"  ${CMAKE_MATCH_2} PARENT_SCOPE)\n        set(\"${PROJECT}_VERSION_PATCH\"  ${CMAKE_MATCH_3} PARENT_SCOPE)\n        set(\"${PROJECT}_VERSION_FLAVOR\" ${FLAVOR}        PARENT_SCOPE)\n        set(\"${PROJECT}_VERSION\"\n            \"${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}${CMAKE_MATCH_4}\"\n            PARENT_SCOPE)\n    else()\n        message(FATAL_ERROR \"Unable to parse version from '${FILE}'\")\n    endif()\nendfunction()\n"
        },
        {
          "name": "standalone.gclient",
          "type": "blob",
          "size": 1.724609375,
          "content": "# Copyright (C) 2020 The Khronos Group Inc.\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n#    Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n#    Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#\n#    Neither the name of The Khronos Group Inc. nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nsolutions = [\n  { \"name\"        : \".\",\n    \"url\"         : \"https://github.com/KhronosGroup/glslang\",\n    \"deps_file\"   : \"DEPS\",\n    \"managed\"     : False,\n    \"custom_deps\" : {\n    },\n  },\n]\n"
        },
        {
          "name": "update_glslang_sources.py",
          "type": "blob",
          "size": 4.9287109375,
          "content": "#!/usr/bin/env python3\n\n# Copyright 2017 The Glslang Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Get source files for Glslang and its dependencies from public repositories.\n\"\"\"\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\n\nKNOWN_GOOD_FILE = 'known_good.json'\n\nSITE_TO_KNOWN_GOOD_FILE = { 'github' : 'known_good.json',\n                            'gitlab' : 'known_good_khr.json' }\n\n# Maps a site name to its hostname.\nSITE_TO_HOST = { 'github' : 'https://github.com/',\n                 'gitlab' : 'git@gitlab.khronos.org:' }\n\nVERBOSE = True\n\n\ndef command_output(cmd, directory, fail_ok=False):\n    \"\"\"Runs a command in a directory and returns its standard output stream.\n\n    Captures the standard error stream.\n\n    Raises a RuntimeError if the command fails to launch or otherwise fails.\n    \"\"\"\n    if VERBOSE:\n        print('In {d}: {cmd}'.format(d=directory, cmd=cmd))\n    p = subprocess.Popen(cmd,\n                         cwd=directory,\n                         stdout=subprocess.PIPE)\n    (stdout, _) = p.communicate()\n    if p.returncode != 0 and not fail_ok:\n        raise RuntimeError('Failed to run {} in {}'.format(cmd, directory))\n    if VERBOSE:\n        print(stdout)\n    return stdout\n\n\ndef command_retval(cmd, directory):\n    \"\"\"Runs a command in a directory and returns its return value.\n\n    Captures the standard error stream.\n    \"\"\"\n    p = subprocess.Popen(cmd,\n                         cwd=directory,\n                         stdout=subprocess.PIPE)\n    p.communicate()\n    return p.returncode\n\n\nclass GoodCommit(object):\n    \"\"\"Represents a good commit for a repository.\"\"\"\n\n    def __init__(self, json):\n        \"\"\"Initializes this good commit object.\n\n        Args:\n        'json':  A fully populated JSON object describing the commit.\n        \"\"\"\n        self._json = json\n        self.name = json['name']\n        self.site = json['site']\n        self.subrepo = json['subrepo']\n        self.subdir = json['subdir'] if ('subdir' in json) else '.'\n        self.commit = json['commit']\n\n    def GetUrl(self):\n        \"\"\"Returns the URL for the repository.\"\"\"\n        host = SITE_TO_HOST[self.site]\n        return '{host}{subrepo}'.format(\n                    host=host,\n                    subrepo=self.subrepo)\n\n    def AddRemote(self):\n        \"\"\"Add the remote 'known-good' if it does not exist.\"\"\"\n        remotes = command_output(['git', 'remote'], self.subdir).splitlines()\n        if b'known-good' not in remotes:\n            command_output(['git', 'remote', 'add', 'known-good', self.GetUrl()], self.subdir)\n\n    def HasCommit(self):\n        \"\"\"Check if the repository contains the known-good commit.\"\"\"\n        return 0 == subprocess.call(['git', 'rev-parse', '--verify', '--quiet',\n                                     self.commit + \"^{commit}\"],\n                                    cwd=self.subdir)\n\n    def Clone(self):\n        os.makedirs(self.subdir, exist_ok=True)\n        command_output(['git', 'clone', self.GetUrl(), '.'], self.subdir)\n\n    def Fetch(self):\n        command_output(['git', 'fetch', 'known-good'], self.subdir)\n\n    def Checkout(self):\n        if not os.path.exists(os.path.join(self.subdir,'.git')):\n            self.Clone()\n        self.AddRemote()\n        if not self.HasCommit():\n            self.Fetch()\n        command_output(['git', 'checkout', self.commit], self.subdir)\n\n\ndef GetGoodCommits(site):\n    \"\"\"Returns the latest list of GoodCommit objects.\"\"\"\n    known_good_file = SITE_TO_KNOWN_GOOD_FILE[site]\n    with open(known_good_file) as known_good:\n        return [GoodCommit(c) for c in json.loads(known_good.read())['commits']]\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Get Glslang source dependencies at a known-good commit')\n    parser.add_argument('--dir', dest='dir', default='.',\n                        help=\"Set target directory for Glslang source root. Default is \\'.\\'.\")\n    parser.add_argument('--site', dest='site', default='github',\n                        help=\"Set git server site. Default is github.\")\n\n    args = parser.parse_args()\n\n    commits = GetGoodCommits(args.site)\n\n    os.makedirs(args.dir, exist_ok=True)\n    print('Change directory to {d}'.format(d=args.dir))\n    os.chdir(args.dir)\n\n    # Create the subdirectories in sorted order so that parent git repositories\n    # are created first.\n    for c in sorted(commits, key=lambda x: x.subdir):\n        print('Get {n}\\n'.format(n=c.name))\n        c.Checkout()\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()\n"
        }
      ]
    }
  ]
}