{
  "metadata": {
    "timestamp": 1736565317877,
    "page": 137,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "asmjit/asmjit",
      "stars": 4012,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "# Editor configuration, see https://editorconfig.org for more details.\nroot = true\n\n[*.{cpp,h,natvis}]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "/build\n/build_*\n.vscode\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.1162109375,
          "content": "cmake_minimum_required(VERSION 3.19 FATAL_ERROR)\n\n# Don't create a project if it was already created by another CMakeLists.txt. This makes\n# it possible to support both add_subdirectory() and include() ways of using AsmJit as a\n# dependency.\nif (NOT CMAKE_PROJECT_NAME OR \"${CMAKE_PROJECT_NAME}\" STREQUAL \"asmjit\")\n  project(asmjit CXX)\nendif()\n\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCXXSourceCompiles)\ninclude(GNUInstallDirs)\n\n# AsmJit - Configuration - Build\n# ==============================\n\nif (NOT DEFINED ASMJIT_TEST)\n  set(ASMJIT_TEST FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_EMBED)\n  set(ASMJIT_EMBED FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_STATIC)\n  set(ASMJIT_STATIC ${ASMJIT_EMBED})\nendif()\n\nif (NOT DEFINED ASMJIT_SANITIZE)\n  set(ASMJIT_SANITIZE FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_CUSTOM_FLAGS)\n  set(ASMJIT_NO_CUSTOM_FLAGS FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_NATVIS)\n  set(ASMJIT_NO_NATVIS FALSE)\nendif()\n\n# EMBED implies STATIC.\nif (ASMJIT_EMBED AND NOT ASMJIT_STATIC)\n  set(ASMJIT_STATIC TRUE)\nendif()\n\n# AsmJit - Configuration - Backend\n# ================================\n\nif (NOT DEFINED ASMJIT_NO_X86)\n  set(ASMJIT_NO_X86 FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_AARCH64)\n  set(ASMJIT_NO_AARCH64 FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_FOREIGN)\n  set(ASMJIT_NO_FOREIGN FALSE)\nendif()\n\n# AsmJit - Configuration - Features\n# =================================\n\nif (NOT DEFINED ASMJIT_NO_DEPRECATED)\n  set(ASMJIT_NO_DEPRECATED FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_SHM_OPEN)\n  set(ASMJIT_NO_SHM_OPEN FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_JIT)\n  set(ASMJIT_NO_JIT FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_TEXT)\n  set(ASMJIT_NO_TEXT FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_LOGGING)\n  set(ASMJIT_NO_LOGGING ${ASMJIT_NO_TEXT})\nendif()\n\nif (NOT DEFINED ASMJIT_NO_VALIDATION)\n  set(ASMJIT_NO_VALIDATION FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_INTROSPECTION)\n  set(ASMJIT_NO_INTROSPECTION FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_BUILDER)\n  set(ASMJIT_NO_BUILDER FALSE)\nendif()\n\nif (NOT DEFINED ASMJIT_NO_COMPILER)\n  if (ASMJIT_NO_BUILDER OR ASMJIT_NO_INTROSPECTION)\n    set(ASMJIT_NO_COMPILER TRUE)\n  else()\n    set(ASMJIT_NO_COMPILER FALSE)\n  endif()\nendif()\n\n# AsmJit - Configuration - CMake Introspection\n# ============================================\n\nset(ASMJIT_DIR              \"${CMAKE_CURRENT_LIST_DIR}\"  CACHE PATH \"Location of 'asmjit'\")\nset(ASMJIT_TEST             \"${ASMJIT_TEST}\"             CACHE BOOL \"Build 'asmjit' test applications\")\nset(ASMJIT_EMBED            \"${ASMJIT_EMBED}\"            CACHE BOOL \"Embed 'asmjit' library (no targets)\")\nset(ASMJIT_STATIC           \"${ASMJIT_STATIC}\"           CACHE BOOL \"Build 'asmjit' library as static\")\nset(ASMJIT_SANITIZE         \"${ASMJIT_SANITIZE}\"         CACHE STRING \"Build with sanitizers: 'address', 'undefined', etc...\")\nset(ASMJIT_NO_NATVIS        \"${ASMJIT_NO_NATVIS}\"        CACHE BOOL \"Disable natvis support (embedding asmjit.natvis in PDB)\")\nset(ASMJIT_NO_CUSTOM_FLAGS  \"${ASMJIT_NO_CUSTOM_FLAGS}\"  CACHE BOOL \"Disable extra compilation flags added by AsmJit to its targets\")\n\nset(ASMJIT_NO_X86           \"${ASMJIT_NO_X86}\"           CACHE BOOL \"Disable X86/X64 backend\")\nset(ASMJIT_NO_AARCH64       \"${ASMJIT_NO_AARCH64}\"       CACHE BOOL \"Disable AArch64 backend\")\nset(ASMJIT_NO_FOREIGN       \"${ASMJIT_NO_FOREIGN}\"       CACHE BOOL \"Disable all foreign architectures (enables only a target architecture)\")\n\nset(ASMJIT_NO_DEPRECATED    \"${ASMJIT_NO_DEPRECATED}\"    CACHE BOOL \"Disable deprecated API at build time\")\nset(ASMJIT_NO_SHM_OPEN      \"${ASMJIT_NO_SHM_OPEN}\"      CACHE BOOL \"Disable the use of shm_open() even on platforms where it's supported\")\nset(ASMJIT_NO_JIT           \"${ASMJIT_NO_JIT}\"           CACHE BOOL \"Disable VirtMem, JitAllocator, and JitRuntime at build time\")\nset(ASMJIT_NO_TEXT          \"${ASMJIT_NO_TEXT}\"          CACHE BOOL \"Disable textual representation of instructions, enums, cpu features, ...\")\nset(ASMJIT_NO_LOGGING       \"${ASMJIT_NO_LOGGING}\"       CACHE BOOL \"Disable logging features at build time\")\nset(ASMJIT_NO_VALIDATION    \"${ASMJIT_NO_VALIDATION}\"    CACHE BOOL \"Disable instruction validation API at build time\")\nset(ASMJIT_NO_INTROSPECTION \"${ASMJIT_NO_INTROSPECTION}\" CACHE BOOL \"Disable instruction introspection API at build time\")\nset(ASMJIT_NO_BUILDER       \"${ASMJIT_NO_BUILDER}\"       CACHE BOOL \"Disable Builder emitter at build time\")\nset(ASMJIT_NO_COMPILER      \"${ASMJIT_NO_COMPILER}\"      CACHE BOOL \"Disable Compiler emitter at build time\")\n\n# AsmJit - Project\n# ================\n\nset(ASMJIT_INCLUDE_DIRS \"${ASMJIT_DIR}/src\")     # Include directory is the same as source dir.\nset(ASMJIT_DEPS \"\")                              # AsmJit dependencies (libraries) for the linker.\nset(ASMJIT_LIBS \"\")                              # Dependencies of libs/apps that want to use AsmJit.\nset(ASMJIT_CFLAGS \"\")                            # Public compiler flags.\nset(ASMJIT_PRIVATE_CFLAGS \"\")                    # Private compiler flags independent of build type.\nset(ASMJIT_PRIVATE_CFLAGS_DBG \"\")                # Private compiler flags used by debug builds.\nset(ASMJIT_PRIVATE_CFLAGS_REL \"\")                # Private compiler flags used by release builds.\nset(ASMJIT_SANITIZE_CFLAGS \"\")                   # Compiler flags required by currently enabled sanitizers.\nset(ASMJIT_SANITIZE_LFLAGS \"\")                   # Linker flags required by currently enabled sanitizers.\n\n# AsmJit - Utilities\n# ==================\n\nfunction(asmjit_detect_cflags out)\n  set(out_array ${${out}})\n  foreach(flag ${ARGN})\n    string(REGEX REPLACE \"[+]\" \"x\" flag_signature \"${flag}\")\n    string(REGEX REPLACE \"[-=:;/.\\]\" \"_\" flag_signature \"${flag_signature}\")\n    check_cxx_compiler_flag(${flag} \"__CxxFlag_${flag_signature}\")\n    if (${__CxxFlag_${flag_signature}})\n      list(APPEND out_array \"${flag}\")\n    endif()\n  endforeach()\n  set(${out} \"${out_array}\" PARENT_SCOPE)\nendfunction()\n\n# Support for various sanitizers provided by C/C++ compilers.\nfunction(asmjit_detect_sanitizers out)\n  set(_out_array ${${out}})\n  set(_flags \"\")\n\n  foreach(_arg ${ARGN})\n    string(REPLACE \",\" \";\" _arg \"${_arg}\")\n    list(APPEND _flags ${_arg})\n  endforeach()\n\n  foreach(_flag ${_flags})\n    if (NOT \"${_flag}\" MATCHES \"^-fsanitize=\")\n      SET(_flag \"-fsanitize=${_flag}\")\n    endif()\n\n    # Sanitizers also require link flags, see CMAKE_REQUIRED_FLAGS.\n    set(CMAKE_REQUIRED_FLAGS \"${_flag}\")\n    asmjit_detect_cflags(_out_array ${_flag})\n    unset(CMAKE_REQUIRED_FLAGS)\n  endforeach()\n\n  set(${out} \"${_out_array}\" PARENT_SCOPE)\nendfunction()\n\nfunction(asmjit_add_target target target_type)\n  set(single_val \"\")\n  set(multi_val SOURCES LIBRARIES CFLAGS CFLAGS_DBG CFLAGS_REL)\n  cmake_parse_arguments(\"X\" \"\" \"${single_val}\" \"${multi_val}\" ${ARGN})\n\n  if (\"${target_type}\" MATCHES \"^(EXECUTABLE|TEST)$\")\n    add_executable(${target} ${X_SOURCES})\n  else()\n    add_library(${target} ${target_type} ${X_SOURCES})\n  endif()\n\n  set_target_properties(${target}\n    PROPERTIES\n      DEFINE_SYMBOL \"\"\n      CXX_VISIBILITY_PRESET hidden)\n  target_compile_options(${target} PRIVATE ${X_CFLAGS} ${ASMJIT_SANITIZE_CFLAGS} $<$<CONFIG:Debug>:${X_CFLAGS_DBG}> $<$<NOT:$<CONFIG:Debug>>:${X_CFLAGS_REL}>)\n  target_compile_features(${target} PUBLIC cxx_std_11)\n  target_link_options(${target} PRIVATE ${ASMJIT_PRIVATE_LFLAGS})\n  target_link_libraries(${target} PRIVATE ${X_LIBRARIES})\n\n  if (\"${target_type}\" STREQUAL \"TEST\")\n    add_test(NAME ${target} COMMAND ${target})\n  endif()\nendfunction()\n\n# AsmJit - Compiler Support\n# =========================\n\n# We will have to keep this most likely forever as some users may still be using it.\nset(ASMJIT_INCLUDE_DIR \"${ASMJIT_INCLUDE_DIRS}\")\n\nif (NOT ASMJIT_NO_CUSTOM_FLAGS)\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"x${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}\" STREQUAL \"xMSVC\")\n    list(APPEND ASMJIT_PRIVATE_CFLAGS\n      -MP                      # [+] Multi-Process Compilation.\n      -GF                      # [+] Eliminate duplicate strings.\n      -Zc:__cplusplus          # [+] Conforming __cplusplus definition.\n      -Zc:inline               # [+] Remove unreferenced COMDAT.\n      -Zc:strictStrings        # [+] Strict const qualification of string literals.\n      -Zc:threadSafeInit-      # [-] Thread-safe statics.\n      -W4)                     # [+] Warning level 4.\n\n    list(APPEND ASMJIT_PRIVATE_CFLAGS_DBG\n      -GS)                     # [+] Buffer security-check.\n\n    list(APPEND ASMJIT_PRIVATE_CFLAGS_REL\n      -GS-                     # [-] Buffer security-check.\n      -O2                      # [+] Favor speed over size.\n      -Oi)                     # [+] Generate intrinsic functions.\n  elseif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"^(GNU|Clang|AppleClang)$\")\n    list(APPEND ASMJIT_PRIVATE_CFLAGS -Wall -Wextra -Wconversion)\n    list(APPEND ASMJIT_PRIVATE_CFLAGS -fno-math-errno)\n    list(APPEND ASMJIT_PRIVATE_CFLAGS_REL -O2)\n\n    # -fno-semantic-interposition is not available on apple - the compiler issues a warning, which is not detected.\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n      asmjit_detect_cflags(ASMJIT_PRIVATE_CFLAGS -fno-threadsafe-statics)\n    else()\n      asmjit_detect_cflags(ASMJIT_PRIVATE_CFLAGS -fno-threadsafe-statics -fno-semantic-interposition)\n    endif()\n\n    # The following flags can save few bytes in the resulting binary.\n    asmjit_detect_cflags(ASMJIT_PRIVATE_CFLAGS_REL\n      -fmerge-all-constants    # Merge all constants even if it violates ISO C++.\n      -fno-enforce-eh-specs)   # Don't enforce termination if noexcept function throws.\n  endif()\nendif()\n\n# Support for sanitizers.\nif (ASMJIT_SANITIZE)\n  asmjit_detect_sanitizers(ASMJIT_SANITIZE_CFLAGS ${ASMJIT_SANITIZE})\n  if (ASMJIT_SANITIZE_CFLAGS)\n    message(\"-- Enabling sanitizers: '${ASMJIT_SANITIZE_CFLAGS}'\")\n\n    # Linker must receive the same flags as the compiler when it comes to sanitizers.\n    set(ASMJIT_SANITIZE_LFLAGS ${ASMJIT_SANITIZE_CFLAGS})\n\n    # Don't omit frame pointer if sanitizers are enabled.\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"x${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}\" STREQUAL \"xMSVC\")\n      list(APPEND ASMJIT_SANITIZE_CFLAGS -Oy-)\n    else()\n      list(APPEND ASMJIT_SANITIZE_CFLAGS -fno-omit-frame-pointer -g)\n    endif()\n\n    list(APPEND ASMJIT_PRIVATE_CFLAGS ${ASMJIT_SANITIZE_CFLAGS})\n    list(APPEND ASMJIT_PRIVATE_LFLAGS ${ASMJIT_SANITIZE_LFLAGS})\n  endif()\nendif()\n\nif (WIN32)\n  # Dependency: nothing extra at the moment.\nelseif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Android\")\n  # Dependency: libc is the only required library on Android as it also provides libthread.\n  message(\"-- Dependency: adding libc (Android target detected)\")\n  list(APPEND ASMJIT_DEPS c)\nelseif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Haiku\")\n  # Dependency: libroot is used by Haiku instead of libc, so link to libroot and libpthread.\n  message(\"-- Dependency: adding libroot and libpthread (Haiku target detected)\")\n  list(APPEND ASMJIT_DEPS root pthread)\nelse()\n  # Dependency: libc is always required.\n  message(\"-- Dependency: adding libc (Linux, BSD, or other UNIX/POSIX environment)\")\n  list(APPEND ASMJIT_DEPS c)\n\n  # Dependency: pthread (required so AsmJit can use pthread_lock).\n  check_cxx_source_compiles(\"\n    #include <pthread.h>\n    int main() {\n      pthread_mutex_t m;\n      pthread_mutex_init(&m, nullptr);\n      return pthread_mutex_destroy(&m);\n    }\n    \" ASMJIT_LIBC_HAS_LIBPTHREAD)\n  if (ASMJIT_LIBC_HAS_LIBPTHREAD)\n    message(\"-- Dependency: libpthread provided by libc (not linking to libpthread)\")\n  else()\n    message(\"-- Dependency: libpthread not provided by libc, linking to libpthread\")\n    list(APPEND ASMJIT_DEPS pthread)\n  endif()\n\n  # Dependency: shm_open (required so AsmJit can use shm_open on supported platforms).\n  if (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"^(Linux|NetBSD)$\" AND NOT ASMJIT_NO_SHM_OPEN)\n    check_cxx_source_compiles(\"\n      #include <sys/mman.h>\n      int main() {\n        const char file_name[1] {};\n        return shm_open(file_name, 0, 0);\n      }\n      \" ASMJIT_LIBC_HAS_LIBRT)\n    if (ASMJIT_LIBC_HAS_LIBRT)\n      message(\"-- Dependency: shm_open provided by libc (not linking to librt)\")\n    else()\n      message(\"-- Dependency: shm_open not provided by libc, linking to librt\")\n      list(APPEND ASMJIT_DEPS rt)\n    endif()\n  endif()\nendif()\n\nset(ASMJIT_LIBS ${ASMJIT_DEPS})\nif (NOT ASMJIT_EMBED)\n  list(INSERT ASMJIT_LIBS 0 asmjit)\nendif()\n\nif (ASMJIT_EMBED)\n  set(ASMJIT_TARGET_TYPE \"EMBED\")\nelseif (ASMJIT_STATIC)\n  set(ASMJIT_TARGET_TYPE \"STATIC\")\nelse()\n  set(ASMJIT_TARGET_TYPE \"SHARED\")\nendif()\n\nforeach(build_option # AsmJit build options.\n                     ASMJIT_STATIC\n                     ASMJIT_NO_DEPRECATED\n                     # AsmJit backends selection.\n                     ASMJIT_NO_X86\n                     ASMJIT_NO_AARCH64\n                     ASMJIT_NO_FOREIGN\n                     # AsmJit features selection.\n                     ASMJIT_NO_JIT\n                     ASMJIT_NO_TEXT\n                     ASMJIT_NO_LOGGING\n                     ASMJIT_NO_INTROSPECTION\n                     ASMJIT_NO_VALIDATION\n                     ASMJIT_NO_BUILDER\n                     ASMJIT_NO_COMPILER)\n  if (${build_option})\n    List(APPEND ASMJIT_CFLAGS         \"-D${build_option}\")\n    List(APPEND ASMJIT_PRIVATE_CFLAGS \"-D${build_option}\")\n  endif()\nendforeach()\n\n# AsmJit - Linker Support\n# =======================\n\nif (WIN32)\n  if (CMAKE_LINKER MATCHES \"link\\\\.exe\" OR CMAKE_LINKER MATCHES \"lld-link\\\\.exe\")\n    set(ASMJIT_LINKER_SUPPORTS_NATVIS TRUE)\n  endif()\nendif()\n\n# AsmJit - Source\n# ===============\n\nset(ASMJIT_SRC_LIST\n  asmjit/asmjit.h\n  asmjit/asmjit-scope-begin.h\n  asmjit/asmjit-scope-end.h\n\n  asmjit/core.h\n  asmjit/core/api-build_p.h\n  asmjit/core/api-config.h\n  asmjit/core/archtraits.cpp\n  asmjit/core/archtraits.h\n  asmjit/core/archcommons.h\n  asmjit/core/assembler.cpp\n  asmjit/core/assembler.h\n  asmjit/core/builder.cpp\n  asmjit/core/builder.h\n  asmjit/core/codebuffer.h\n  asmjit/core/codeholder.cpp\n  asmjit/core/codeholder.h\n  asmjit/core/codewriter.cpp\n  asmjit/core/codewriter_p.h\n  asmjit/core/compiler.cpp\n  asmjit/core/compiler.h\n  asmjit/core/compilerdefs.h\n  asmjit/core/constpool.cpp\n  asmjit/core/constpool.h\n  asmjit/core/cpuinfo.cpp\n  asmjit/core/cpuinfo.h\n  asmjit/core/emithelper.cpp\n  asmjit/core/emithelper_p.h\n  asmjit/core/emitter.cpp\n  asmjit/core/emitter.h\n  asmjit/core/emitterutils.cpp\n  asmjit/core/emitterutils_p.h\n  asmjit/core/environment.cpp\n  asmjit/core/environment.h\n  asmjit/core/errorhandler.cpp\n  asmjit/core/errorhandler.h\n  asmjit/core/formatter.cpp\n  asmjit/core/formatter.h\n  asmjit/core/func.cpp\n  asmjit/core/func.h\n  asmjit/core/funcargscontext.cpp\n  asmjit/core/funcargscontext_p.h\n  asmjit/core/globals.cpp\n  asmjit/core/globals.h\n  asmjit/core/inst.cpp\n  asmjit/core/inst.h\n  asmjit/core/instdb.cpp\n  asmjit/core/instdb_p.h\n  asmjit/core/jitallocator.cpp\n  asmjit/core/jitallocator.h\n  asmjit/core/jitruntime.cpp\n  asmjit/core/jitruntime.h\n  asmjit/core/logger.cpp\n  asmjit/core/logger.h\n  asmjit/core/misc_p.h\n  asmjit/core/operand.cpp\n  asmjit/core/operand.h\n  asmjit/core/osutils.cpp\n  asmjit/core/osutils.h\n  asmjit/core/osutils_p.h\n  asmjit/core/raassignment_p.h\n  asmjit/core/rabuilders_p.h\n  asmjit/core/radefs_p.h\n  asmjit/core/ralocal.cpp\n  asmjit/core/ralocal_p.h\n  asmjit/core/rapass.cpp\n  asmjit/core/rapass_p.h\n  asmjit/core/rastack.cpp\n  asmjit/core/rastack_p.h\n  asmjit/core/string.cpp\n  asmjit/core/string.h\n  asmjit/core/support.cpp\n  asmjit/core/support.h\n  asmjit/core/target.cpp\n  asmjit/core/target.h\n  asmjit/core/type.cpp\n  asmjit/core/type.h\n  asmjit/core/virtmem.cpp\n  asmjit/core/virtmem.h\n  asmjit/core/zone.cpp\n  asmjit/core/zone.h\n  asmjit/core/zonehash.cpp\n  asmjit/core/zonehash.h\n  asmjit/core/zonelist.cpp\n  asmjit/core/zonelist.h\n  asmjit/core/zonestack.cpp\n  asmjit/core/zonestack.h\n  asmjit/core/zonestring.h\n  asmjit/core/zonetree.cpp\n  asmjit/core/zonetree.h\n  asmjit/core/zonevector.cpp\n  asmjit/core/zonevector.h\n\n  asmjit/a64.h\n  asmjit/arm.h\n  asmjit/arm/armformatter.cpp\n  asmjit/arm/armformatter_p.h\n  asmjit/arm/armglobals.h\n  asmjit/arm/armoperand.h\n  asmjit/arm/armutils.h\n  asmjit/arm/a64archtraits_p.h\n  asmjit/arm/a64assembler.cpp\n  asmjit/arm/a64assembler.h\n  asmjit/arm/a64builder.cpp\n  asmjit/arm/a64builder.h\n  asmjit/arm/a64compiler.cpp\n  asmjit/arm/a64compiler.h\n  asmjit/arm/a64emithelper.cpp\n  asmjit/arm/a64emithelper_p.h\n  asmjit/arm/a64emitter.h\n  asmjit/arm/a64formatter.cpp\n  asmjit/arm/a64formatter_p.h\n  asmjit/arm/a64func.cpp\n  asmjit/arm/a64func_p.h\n  asmjit/arm/a64globals.h\n  asmjit/arm/a64instapi.cpp\n  asmjit/arm/a64instapi_p.h\n  asmjit/arm/a64instdb.cpp\n  asmjit/arm/a64instdb.h\n  asmjit/arm/a64operand.cpp\n  asmjit/arm/a64operand.h\n  asmjit/arm/a64rapass.cpp\n  asmjit/arm/a64rapass_p.h\n\n  asmjit/x86.h\n  asmjit/x86/x86archtraits_p.h\n  asmjit/x86/x86assembler.cpp\n  asmjit/x86/x86assembler.h\n  asmjit/x86/x86builder.cpp\n  asmjit/x86/x86builder.h\n  asmjit/x86/x86compiler.cpp\n  asmjit/x86/x86compiler.h\n  asmjit/x86/x86emithelper.cpp\n  asmjit/x86/x86emithelper_p.h\n  asmjit/x86/x86emitter.h\n  asmjit/x86/x86formatter.cpp\n  asmjit/x86/x86formatter_p.h\n  asmjit/x86/x86func.cpp\n  asmjit/x86/x86func_p.h\n  asmjit/x86/x86globals.h\n  asmjit/x86/x86instdb.cpp\n  asmjit/x86/x86instdb.h\n  asmjit/x86/x86instdb_p.h\n  asmjit/x86/x86instapi.cpp\n  asmjit/x86/x86instapi_p.h\n  asmjit/x86/x86operand.cpp\n  asmjit/x86/x86operand.h\n  asmjit/x86/x86rapass.cpp\n  asmjit/x86/x86rapass_p.h\n)\n\nif (MSVC AND NOT ASMJIT_NO_NATVIS)\n  list(APPEND ASMJIT_SRC_LIST asmjit.natvis)\nendif()\n\nset(ASMJIT_SRC \"\")\nforeach(src_file ${ASMJIT_SRC_LIST})\n  set(src_file \"${ASMJIT_DIR}/src/${src_file}\")\n  list(APPEND ASMJIT_SRC ${src_file})\n\n  if (\"${src_file}\" MATCHES \"\\\\.natvis\")\n    if (ASMJIT_LINKER_SUPPORTS_NATVIS)\n      list(APPEND ASMJIT_PRIVATE_LFLAGS \"-natvis:${src_file}\")\n    endif()\n  endif()\nendforeach()\n\nsource_group(TREE \"${ASMJIT_DIR}\" FILES ${ASMJIT_SRC})\n\n# AsmJit - Summary\n# ================\n\nmessage(\"** AsmJit Summary **\")\nmessage(\"   ASMJIT_DIR=${ASMJIT_DIR}\")\nmessage(\"   ASMJIT_TEST=${ASMJIT_TEST}\")\nmessage(\"   ASMJIT_TARGET_TYPE=${ASMJIT_TARGET_TYPE}\")\nmessage(\"   ASMJIT_DEPS=${ASMJIT_DEPS}\")\nmessage(\"   ASMJIT_LIBS=${ASMJIT_LIBS}\")\nmessage(\"   ASMJIT_CFLAGS=${ASMJIT_CFLAGS}\")\nmessage(\"   ASMJIT_PRIVATE_CFLAGS=${ASMJIT_PRIVATE_CFLAGS}\")\nmessage(\"   ASMJIT_PRIVATE_CFLAGS_DBG=${ASMJIT_PRIVATE_CFLAGS_DBG}\")\nmessage(\"   ASMJIT_PRIVATE_CFLAGS_REL=${ASMJIT_PRIVATE_CFLAGS_REL}\")\n\n# AsmJit - Targets\n# ================\n\nif (NOT ASMJIT_EMBED)\n  # Add AsmJit target.\n  asmjit_add_target(asmjit \"${ASMJIT_TARGET_TYPE}\"\n                    SOURCES    ${ASMJIT_SRC}\n                    LIBRARIES  ${ASMJIT_DEPS}\n                    CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                    CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                    CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n\n  target_compile_options(asmjit INTERFACE ${ASMJIT_CFLAGS})\n  target_include_directories(asmjit BEFORE INTERFACE\n                             $<BUILD_INTERFACE:${ASMJIT_INCLUDE_DIRS}>\n                             $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\n  # Create an asmjit::asmjit alias.\n  add_library(asmjit::asmjit ALIAS asmjit)\n\n  # Add AsmJit install instructions (library and public headers).\n  if (NOT ASMJIT_NO_INSTALL)\n    install(TARGETS asmjit\n            EXPORT asmjit-config\n            RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n            ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n            LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n            INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    install(EXPORT asmjit-config\n            NAMESPACE asmjit::\n            DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/asmjit\")\n\n    foreach(_src_file ${ASMJIT_SRC_LIST})\n      if (\"${_src_file}\" MATCHES \"\\\\.h$\" AND NOT \"${_src_file}\" MATCHES \"_p\\\\.h$\")\n        get_filename_component(_src_dir ${_src_file} PATH)\n        install(FILES \"${ASMJIT_DIR}/src/${_src_file}\" DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${_src_dir}\")\n      endif()\n    endforeach()\n  endif()\n\n  # Add AsmJit tests.\n  if (ASMJIT_TEST)\n    enable_testing()\n\n    # Special target that always uses embedded AsmJit.\n    asmjit_add_target(asmjit_test_unit TEST\n                      SOURCES    ${ASMJIT_SRC}\n                                 test/asmjit_test_unit.cpp\n                                 test/broken.cpp\n                                 test/broken.h\n                      LIBRARIES  ${ASMJIT_DEPS}\n                      CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                                 -DASMJIT_TEST\n                                 -DASMJIT_STATIC\n                      CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                      CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n    target_include_directories(asmjit_test_unit BEFORE PRIVATE ${ASMJIT_INCLUDE_DIRS})\n\n    asmjit_add_target(asmjit_test_assembler TEST\n                      SOURCES    test/asmjit_test_assembler.cpp\n                                 test/asmjit_test_assembler.h\n                                 test/asmjit_test_assembler_a64.cpp\n                                 test/asmjit_test_assembler_x64.cpp\n                                 test/asmjit_test_assembler_x86.cpp\n                      LIBRARIES  asmjit::asmjit\n                      CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                      CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                      CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n\n    asmjit_add_target(asmjit_test_perf EXECUTABLE\n                      SOURCES    test/asmjit_test_perf.cpp\n                                 test/asmjit_test_perf_a64.cpp\n                                 test/asmjit_test_perf_x86.cpp\n                      SOURCES    test/asmjit_test_perf.h\n                      LIBRARIES  asmjit::asmjit\n                      CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                      CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                      CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n\n    foreach(_target asmjit_test_emitters\n                    asmjit_test_execute\n                    asmjit_test_x86_sections)\n      asmjit_add_target(${_target} TEST\n                        SOURCES    test/${_target}.cpp\n                        LIBRARIES  asmjit::asmjit\n                        CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                        CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                        CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n    endforeach()\n\n    if (NOT ASMJIT_NO_INTROSPECTION)\n      asmjit_add_target(asmjit_test_instinfo TEST\n                        SOURCES    test/asmjit_test_instinfo.cpp\n                        LIBRARIES  asmjit::asmjit\n                        CFLAGS     ${ASMJIT_PRIVATE_CFLAGS}\n                        CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                        CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n    endif()\n\n    if (NOT (ASMJIT_NO_BUILDER OR ASMJIT_NO_COMPILER))\n      # Vectorcall tests and XMM tests require at least SSE2 in 32-bit mode (in 64-bit mode it's implicit).\n      # Some compilers don't like passing -msse2 for 64-bit targets, and some compilers targeting non-x86\n      # would pass \"-msse2\" compile flag check, but with a warning not detected by CMake. Thus, verify that\n      # our target is really 32-bit X86 and only use -msse2 or -arch:SSE2 flags when necessary.\n      set(ASMJIT_SSE2_CFLAGS \"\")\n\n      check_cxx_source_compiles(\"\n        #if defined(_M_IX86) || defined(__X86__) || defined(__i386__)\n          int target_is_32_bit_x86() { return 1; }\n        #else\n          // Compile error...\n        #endif\n\n        int main() {\n          return target_is_32_bit_x86();\n        }\n        \" ASMJIT_TARGET_IS_32_BIT_X86)\n\n      if (ASMJIT_TARGET_IS_32_BIT_X86)\n        if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"x${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}\" STREQUAL \"xMSVC\")\n          asmjit_detect_cflags(ASMJIT_SSE2_CFLAGS \"-arch:SSE2\")\n        else()\n          asmjit_detect_cflags(ASMJIT_SSE2_CFLAGS \"-msse2\")\n        endif()\n      endif()\n      asmjit_add_target(asmjit_test_compiler TEST\n                        SOURCES    test/asmjit_test_compiler.cpp\n                                   test/asmjit_test_compiler.h\n                                   test/asmjit_test_compiler_a64.cpp\n                                   test/asmjit_test_compiler_x86.cpp\n                        LIBRARIES  asmjit::asmjit\n                        CFLAGS     ${ASMJIT_PRIVATE_CFLAGS} ${ASMJIT_SSE2_CFLAGS}\n                        CFLAGS_DBG ${ASMJIT_PRIVATE_CFLAGS_DBG}\n                        CFLAGS_REL ${ASMJIT_PRIVATE_CFLAGS_REL})\n    endif()\n\n  endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.759765625,
          "content": "## How to Contribute to AsmJit\n\n### Did you find a bug or something isn't working as expected?\n\n  * Please use [Issues](https://github.com/asmjit/asmjit/issues) page to report bugs or create a [pull request](https://github.com/asmjit/asmjit/pulls) if you have already fixed it.\n\n  * Make sure that when a bug is reported it provides as much information as possible to make it easy to either reproduce it locally or to at least guess where the problem could be. AsmJit is a low-level tool, which makes it very easy to emit code that would crash or not work as intended when executed. Always use AsmJit's [Logging](https://asmjit.com/doc/group__asmjit__logging.html) and [Error Handling](https://asmjit.com/doc/group__asmjit__error__handling.html) features first to analyze whether there is not a simple to catch bug in your own code.\n\n  * Don't be afraid to ask for help if you don't know how to solve a particular problem or in case it's unclear how to do it. The community would help if the problem is well described and has a solution. In general we always try to at least improve the documentation in case it doesn't provide enough information and users must ask for help.\n\n### Asking questions\n\n  * We prefer GitHub issues to be used for reporting bugs or feature requests, but it's still okay to ask questions there as well. However, please consider joining our [Gitter Chat](https://app.gitter.im/#/room/#asmjit:gitter.im) to ask questions; it has an active community that can quickly respond.\n\n### Suggesting feature requests\n\n  * It's very likely that when using AsmJit you have found something that AsmJit doesn't provide, which would be handy to have as a built-in. The [Issues](https://github.com/asmjit/asmjit/issues) page can be used to submit feature requests, but please keep in mind that AsmJit is a relatively small project and not all requested features will be accepted, especially if they are non-trivial, time consuming to implement, or the scope of the feature doesn't match AsmJit goals.\n\n  * If you have already implemented the feature you are suggesting, please open a [pull request](https://github.com/asmjit/asmjit/pulls).\n\n  * Ports (requesting new AsmJit backends) can be reported as feature requests, but only by people that are willing to work on them as creating new ports takes a lot of time.\n\n### Suggesting a documentation enhancement\n\n  * [AsmJit's documentation](https://asmjit.com/doc/index.html) is auto-generated from source code, so if you would like to improve it just open a [pull request](https://github.com/asmjit/asmjit/pulls) with your changes. The documentation uses [Doxygen](https://www.doxygen.nl/) as a front-end, so you can use `\\ref` keyword to create links and other Doxygen keywords to enhance the documentation.\n\n### Suggesting a website content enhancement\n\n  * [AsmJit's website](https://asmjit.com) is also generated, but not from public sources at the moment. If you did find an issue on the website you can either use contact information on the [support page](https://asmjit.com/support.html) or to discuss the change on our [Gitter Chat](https://app.gitter.im/#/room/#asmjit:gitter.im). Alternatively, opening a regular issue is also okay.\n\n\n## Coding Style & Consistency\n\n  * If you decide to open a pull request, make sure that the code you submit uses the same convention as the rest of the code. We prefer keeping the code consistent.\n\n  * [.editorconfig](./.editorconfig) should help with basic settings.\n\n  * Initially, AsmJit coding style was based on Google C++ Style Guide, but it has diverged from it.\n\n  * Include guards use `<PATH_TO_SRC>_H_INCLUDED` format.\n\n  * `asmjit` namespace must be open by `ASMJIT_BEGIN_NAMESPACE` and closed by `ASMJIT_END_NAMESPACE`\n\n  * `asmjit::xxx` (backend specific) nested namespace must be open by `ASMJIT_BEGIN_SUB_NAMESPACE(xxx)` and closed by `ASMJIT_END_SUB_NAMESPACE`.\n\n  * Opening bracket is on the same line, like `struct Something {`, `if (condition) {`, etc...\n\n  * The code uses a soft limit of 120 characters per line (including documentation), but it's not enforced and it's okay to use more when it makes sense (for example defining tables, etc...).\n\n  * Since AsmJit doesn't use Exceptions nor RTTI the code cannot use containers provided by the C++ standard library. In general, we try to only use a bare minimum from the C++ standard library to make it viable to use AsmJit even in C code bases where JIT complier is implemented in C++ ([Erlang](https://www.erlang.org/) can be seen as a great example).\n\n## Testing\n\n  * AsmJit uses a minimalist unit testing framework to write unit tests to avoid third-party dependencies.\n\n  * At the moment tests are in the same file as the implementation and are only compiled when `ASMJIT_TEST` macro is defined.\n\n  * Use `-DASMJIT_TEST=1` when invoking [CMake](https://cmake.org/) to compile AsmJit tests.\n\n  * Unit tests are compiled to a single `asmjit_test_unit[.exe]` executable.\n\n  * Other tests have their own executables based on what is tested.\n\n  * Always add assembler tests when adding new instructions, see [asmjit_test_assembler_x64.cpp](./test/asmjit_test_assembler_x64.cpp) and [asmjit_test_assembler_a64.cpp](./test/asmjit_test_assembler_a64.cpp) for more details.\n\n## Pull Request Messages\n\n  * If a change fixes a bug the message should should start with `[bug]`.\n\n  * If a change fixes or enhances documentation it should start with `[doc]`.\n\n  * If a change fixes or enhances our CI it should start with `[ci]`.\n\n  * If a change breaks ABI it must start with `[abi]`.\n\n  * Otherwise there is no suggested prefix.\n\n## ABI Changes\n\n  * ABI changes happen, but they are usually accumulated and committed within a short time window to not break it often. In general we prefer to break ABI once a year, or once 6 months if there is something that has a high priority. There are no hard rules though.\n\n  * AsmJit uses an `inline namespace`, which should make it impossible to link to AsmJit library that is ABI incompatible. When ABI break happens both AsmJit version and ABI namespace are changed, see [asmjit/core/api-config.h](./src/asmjit/core/api-config.h) for more details.\n\n  * What is an ABI break?\n\n    * Modifying a public struct/class in a way that its functionality is altered and/or its size is changed\n\n    * Adding/removing virtual functions to/from classes, respectively\n\n    * Changing a signature of a public function or a class member function (for example adding a parameter).\n\n    * Changing the value of an enum or global constant (for example instructions are now sorted by name, so adding a new instruction breaks ABI)\n\n    * Possibly more, but these were the most common...\n\n  * What is not ABI break?\n\n    * Extending the functionality by using reserved members of a struct/class\n\n    * Adding new API including new structs and classes\n\n    * Changing anything that is internal and that doesn't leak to public headers\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.841796875,
          "content": "Copyright (c) 2008-2024 The AsmJit Authors\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7353515625,
          "content": "AsmJit\n------\n\nAsmJit is a lightweight library for machine code generation written in C++ language.\n\n  * [Official Home Page (asmjit.com)](https://asmjit.com)\n  * [Official Repository (asmjit/asmjit)](https://github.com/asmjit/asmjit)\n  * [Public Chat Channel](https://app.gitter.im/#/room/#asmjit:gitter.im)\n  * [Zlib License](./LICENSE.md)\n\nSee [asmjit.com](https://asmjit.com) page for more details, examples, and documentation.\n\nDocumentation\n-------------\n\n  * [Documentation Index](https://asmjit.com/doc/index.html)\n  * [Build Instructions](https://asmjit.com/doc/group__asmjit__build.html)\n\nContributing\n------------\n\n  * See [CONTRIBUTING](./CONTRIBUTING.md) page for more details\n\nBreaking Changes\n----------------\n\nBreaking the API is sometimes inevitable, what to do?\n\n  * See [Breaking Changes Guide](https://asmjit.com/doc/group__asmjit__breaking__changes.html), which is now part of AsmJit documentation\n  * See asmjit tests, they always compile and provide implementation of many use-cases:\n    * [asmjit_test_emitters.cpp](./test/asmjit_test_emitters.cpp) - Tests that demonstrate the purpose of emitters\n    * [asmjit_test_assembler_x86.cpp](./test/asmjit_test_assembler_x86.cpp) - Tests targeting AsmJit's Assembler (x86/x64)\n    * [asmjit_test_compiler_x86.cpp](./test/asmjit_test_compiler_x86.cpp) - Tests targeting AsmJit's Compiler (x86/x64)\n    * [asmjit_test_instinfo.cpp](./test/asmjit_test_instinfo.cpp) - Tests that query instruction information\n    * [asmjit_test_x86_sections.cpp](./test/asmjit_test_x86_sections.cpp) - Multiple sections test.\n  * Visit our [Gitter Chat](https://app.gitter.im/#/room/#asmjit:gitter.im) if you need a quick help\n\nProject Organization\n--------------------\n\n  * **`/`**        - Project root\n    * **src**      - Source code\n      * **asmjit** - Source code and headers (always point include path in here)\n        * **core** - Core API, backend independent except relocations\n        * **arm**  - ARM specific API, used only by ARM and AArch64 backends\n        * **x86**  - X86 specific API, used only by X86 and X64 backends\n    * **test**     - Unit and integration tests (don't embed in your project)\n    * **tools**    - Tools used for configuring, documenting, and generating files\n\nPorts\n-----\n\n  * [ ] 32-bit ARM/Thumb port (work in progress)\n  * [ ] RISC-V port (not in progress, help welcome)\n\nSupport\n-------\n\n  * AsmJit project has both community and commercial support, see [AsmJit's Support Page](https://asmjit.com/support.html)\n  * You can help the development and maintenance through Petr Kobalicek's [GitHub sponsors Profile](https://github.com/sponsors/kobalicek)\n\nNotable Donors List:\n\n  * [ZehMatt](https://github.com/ZehMatt)\n\n\nAuthors & Maintainers\n---------------------\n\n  * Petr Kobalicek <kobalicek.petr@gmail.com>\n"
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}