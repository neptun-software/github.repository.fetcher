{
  "metadata": {
    "timestamp": 1736565669743,
    "page": 569,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GaijinEntertainment/DagorEngine",
      "stars": 2561,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.6767578125,
          "content": "---\nBasedOnStyle: Microsoft\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveMacros:\n  Enabled:         true\n  AcrossEmptyLines: false\n  AcrossComments:  true\n  AlignCompound:   false\n  PadOperators:    false\nAlignEscapedNewlines: Left\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAlwaysBreakTemplateDeclarations: Yes\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterUnion:      true\n  BeforeLambdaBody: false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakConstructorInitializers: AfterColon\nColumnLimit:     135\nCommentPragmas:  '^-V\\d+'\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nForEachMacros:\n  - FOR_EACH_RG_LAYER_DO\n  - FOR_EACH_PRIMARY_RG_LAYER_DO\n  - FOR_EACH_RG_LAYER_RENDER\n  - FOR_EACH_RG_LAYER_RENDER_EX\n  - ITERATE_OVER_SUBFX\nStatementMacros: ['DAG_DECLARE_NEW', 'decl_ptr', 'decl_dclass_hdr', 'decl_class_name', 'decl_issubof', 'JPH_IMPLEMENT_SERIALIZABLE_VIRTUAL', 'JPH_ADD_ATTRIBUTE']\nIfMacros: ['IF_CONSTEXPR']\nIndentCaseLabels: true\nIndentWidth:     2\nMacroBlockBegin: \"^(\\\nBEGIN_BITFIELD_TYPE|\\\ndecl_dclass|\\\ndecl_dclass_and_id|\\\n(DX12|VULKAN)_BEGIN_CONTEXT_COMMAND(_EXT_[0-9])?|\\\nITERATE_OVER_OBJECT_POOL(_(LOCK|BEG))?|\\\nBINDUMP_BEGIN_LAYOUT|\\\nBINDUMP_BEGIN_EXTEND_LAYOUT\\\n)$\"\nMacroBlockEnd: \"^(\\\nEND_BITFIELD_TYPE|\\\nend_dclass_decl|\\\n(DX12|VULKAN)_END_CONTEXT_COMMAND|\\\nITERATE_OVER_OBJECT_POOL_(UNLOCK|END|RESTORE|DESTROY)|\\\nBINDUMP_END_LAYOUT|\\\nBINDUMP_END_LAYOUT\\\n)$\"\nMaxEmptyLinesToKeep: 2\nPackConstructorInitializers: NextLine\nPenaltyBreakOpenParenthesis: 1\nPenaltyBreakComment: 1\nSortIncludes:    Never\nTabWidth:        2\n...\n"
        },
        {
          "name": ".engine.qdox",
          "type": "blob",
          "size": 0.7275390625,
          "content": "//this is json with single line comments supported\n// QDox config file\n[\n{\n  \"paths\": [\"prog/engine/lib3d/picMgr.cpp\",\"prog/engine/image/decodeFnameSuffix.h\"], //folders or files list, required,\n  \"doc_chapter\": \"picture_image\", //internal folder name, required\n  \"chapter_desc\": \"Picture Manager documentation\", //displayed title, optional\n  \"chapter_title\": \"Dagor Engine Libraries\", //displayed title, optional\n  \"extensions\": [\".cpp\",\".h\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n}\n]\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.208984375,
          "content": "* text=auto\n*.cpp text\n*.h text\n*.cc text\n*.c text\n*.hpp text\n*.inl text\n*.inc text\n*.jam text\n*jamfile text\n*.py text\n*.nut text\n*.as text\n*.tis text\n*.png binary\n*.jpg binary\n*.sh text eol=lf\n*.plist text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3076171875,
          "content": "/tools/\n/samples/physTest\n/samples/*/develop\n/samples/*/game*\n/samples/dngSceneViewer/viewer*\n/samples/*/tools\n/samples/*/application.blk\n/outerSpace/develop\n/outerSpace/game*\n/outerSpace/tools\n/outerSpace/fmod_project\n/outerSpace/application.blk\n/_output/\n/prog/platform.jam\n*.pyc\n*.das.inl\n*.dshl.log\nShaderLog-*\n"
        },
        {
          "name": ".quirrel_modules.qdox",
          "type": "blob",
          "size": 5.908203125,
          "content": "//this is json with single line comments supported\n// QDox config file\n[\n{\n  \"paths\": [\"prog/gameLibs\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/quirrel_gamelibs\", //internal folder name, required\n  \"chapter_desc\": \"Docs for Quirrel modules extracted from source in gameLibs\", //displayed title, optional\n  \"chapter_title\": \"Quirrel Gamelibs Native Modules\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/gameLibs/ecs/scripts\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/quirrel_daECS\", //internal folder name, required\n  \"chapter_desc\": \"Docs for Quirrel modules for dagor ECS\", //displayed title, optional\n  \"chapter_title\": \"Quirrel ECS\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/gameLibs/daRg\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/darg_framework\", //internal folder name, required\n  \"chapter_desc\": \"Docs for DaRG - Dagor Reactive GUI framework, based on Quirrel language and FRP.\", //displayed title, optional\n  \"chapter_title\": \"daRg framework\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/tools/dargbox\"], //folders or files list, required,\n  \"doc_chapter\": \"dargbox\", //internal folder name, required\n  \"chapter_desc\": \"Docs for DargBox - darg utlitiy application and sandbox.\", //displayed title, optional\n  \"chapter_title\": \"dargbox\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/daNetGameLibs\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/daNetGameLibs\", //internal folder name, required\n  \"chapter_desc\": \"Docs for daNetGameLibs Quirrel Modules. DaNetGameLibs can be used in any daNetGame based project\", //displayed title, optional\n  \"chapter_title\": \"daNetGameLibs\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/daNetGame\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/daNetGame\", //internal folder name, required\n  \"chapter_desc\": \"Docs for daNetGame Quirrel Modules. DaNetGame is framework for building games\", //displayed title, optional\n  \"chapter_title\": \"daNetGame\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"launcher/client/scilauncher2/src\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/scilauncher2\", //internal folder name, required\n  \"chapter_desc\": \"Sciter Launcher2\", //displayed title, optional\n  \"chapter_title\": \"Sciter Launcher2 API\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"skyquake/prog\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/skyquake_native\", //internal folder name, required\n  \"chapter_desc\": \"Docs for Skyquake based Quirrel Modules. VRT, WTM and WT are based on Skyquake\", //displayed title, optional\n  \"chapter_title\": \"skyquake native modules\", //displayed title, optional\n  \"extensions\": [\".cpp\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n},\n\n{\n  \"paths\": [\"prog/gameLibs/soundSystem/quirrel\"], //folders or files list, required,\n  \"doc_chapter\": \"quirrel-modules/soundSystem\", //internal folder name, required\n  \"chapter_desc\": \"Docs for soundSystem Quirrel Modules. DaNetGameLibs can be used in any daNetGame based project\", //displayed title, optional\n  \"chapter_title\": \"soundSystem\", //displayed title, optional\n  \"extensions\": [\".cpp\",\".inl\"], //optional, list of extensions of files\n  \"exclude_dirs_re\": [], //optional, list of regexps that should full match to exclude dirs in recursive search\n  \"exclude_files_re\": [], //optional, list of full match regexp to skip files'\n  \"recursive\": true //optional, do recursive search for folders'\n}\n\n]\n"
        },
        {
          "name": "DagorEngine.rev.txt",
          "type": "blob",
          "size": 0.0400390625,
          "content": "8486c81d97afccec3ee17945750171fbd2fc5c14\n"
        },
        {
          "name": "DagorEngine.sln",
          "type": "blob",
          "size": 7.8916015625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.4.33205.214\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Code\", \"Code\", \"{FEF3A269-1AD5-4BC8-BF57-94213689F668}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Samples\", \"Samples\", \"{3515D005-B190-45AD-91FF-742F5CE1EC82}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Tools\", \"Tools\", \"{05423D57-B211-4110-8BED-FFD0CF21C94A}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"skiesSample\", \"samples\\skiesSample\\prog\\skiesSample.vcxproj\", \"{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"testGI\", \"samples\\testGI\\prog\\testGI.vcxproj\", \"{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"prog\", \"prog\\prog.vcxproj\", \"{89D18E89-8553-4D5B-842E-EE8D4F78043F}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F} = {9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}\n\tEndProjectSection\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"natvis\", \"prog\\_jBuild\\msbuild\\natvis.vcxproj\", \"{4EE8CF3A-7339-4469-A8B9-E62584192C8E}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tdbg|_default = dbg|_default\n\t\tdbg|Android = dbg|Android\n\t\tdbg|linux64 = dbg|linux64\n\t\tdbg|win32 = dbg|win32\n\t\tdbg|win64 = dbg|win64\n\t\tdev|_default = dev|_default\n\t\tdev|Android = dev|Android\n\t\tdev|linux64 = dev|linux64\n\t\tdev|win32 = dev|win32\n\t\tdev|win64 = dev|win64\n\t\trel|_default = rel|_default\n\t\trel|Android = rel|Android\n\t\trel|linux64 = rel|linux64\n\t\trel|win32 = rel|win32\n\t\trel|win64 = rel|win64\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|_default.ActiveCfg = dbg_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|Android.ActiveCfg = dbg_android|ARM64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|linux64.ActiveCfg = dbg_linux64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|win32.ActiveCfg = dbg_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|win32.Build.0 = dbg_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|win64.ActiveCfg = dbg_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dbg|win64.Build.0 = dbg_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|_default.ActiveCfg = dev_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|Android.ActiveCfg = dev_android|ARM64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|linux64.ActiveCfg = dev_linux64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|win32.ActiveCfg = dev_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|win32.Build.0 = dev_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|win64.ActiveCfg = dev_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.dev|win64.Build.0 = dev_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|_default.ActiveCfg = rel_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|Android.ActiveCfg = rel_android|ARM64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|linux64.ActiveCfg = rel_linux64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|win32.ActiveCfg = rel_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|win32.Build.0 = rel_win32|Win32\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|win64.ActiveCfg = rel_win64|x64\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F}.rel|win64.Build.0 = rel_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|_default.ActiveCfg = dbg_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|Android.ActiveCfg = dbg_android|ARM64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|linux64.ActiveCfg = dbg_linux64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|win32.ActiveCfg = dbg_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|win32.Build.0 = dbg_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|win64.ActiveCfg = dbg_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dbg|win64.Build.0 = dbg_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|_default.ActiveCfg = dev_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|Android.ActiveCfg = dev_android|ARM64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|linux64.ActiveCfg = dev_linux64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|win32.ActiveCfg = dev_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|win32.Build.0 = dev_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|win64.ActiveCfg = dev_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.dev|win64.Build.0 = dev_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|_default.ActiveCfg = rel_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|Android.ActiveCfg = rel_android|ARM64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|linux64.ActiveCfg = rel_linux64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|win32.ActiveCfg = rel_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|win32.Build.0 = rel_win32|Win32\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|win64.ActiveCfg = rel_win64|x64\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75}.rel|win64.Build.0 = rel_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dbg|_default.ActiveCfg = dbg_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dbg|Android.ActiveCfg = dbg_android|ARM64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dbg|linux64.ActiveCfg = dbg_linux64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dbg|win32.ActiveCfg = dbg_win32|Win32\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dbg|win64.ActiveCfg = dbg_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dev|_default.ActiveCfg = dev_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dev|Android.ActiveCfg = dev_android|ARM64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dev|linux64.ActiveCfg = dev_linux64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dev|win32.ActiveCfg = dev_win32|Win32\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.dev|win64.ActiveCfg = dev_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.rel|_default.ActiveCfg = rel_win64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.rel|Android.ActiveCfg = rel_android|ARM64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.rel|linux64.ActiveCfg = rel_linux64|x64\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.rel|win32.ActiveCfg = rel_win32|Win32\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F}.rel|win64.ActiveCfg = rel_win64|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dbg|_default.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dbg|Android.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dbg|linux64.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dbg|win32.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dbg|win64.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dev|_default.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dev|Android.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dev|linux64.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dev|win32.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.dev|win64.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.rel|_default.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.rel|Android.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.rel|linux64.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.rel|win32.ActiveCfg = Any|x64\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E}.rel|win64.ActiveCfg = Any|x64\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{9A8E7914-B5F0-4E32-9F9C-E7D1B9F5040F} = {3515D005-B190-45AD-91FF-742F5CE1EC82}\n\t\t{85EAEB4C-3C9B-4058-B97F-3A92B4A2EF75} = {3515D005-B190-45AD-91FF-742F5CE1EC82}\n\t\t{89D18E89-8553-4D5B-842E-EE8D4F78043F} = {FEF3A269-1AD5-4BC8-BF57-94213689F668}\n\t\t{4EE8CF3A-7339-4469-A8B9-E62584192C8E} = {05423D57-B211-4110-8BED-FFD0CF21C94A}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {2582E9D2-2C2C-4D13-A629-9CCAC4373CB9}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 8.046875,
          "content": "Dagor Engine \n\nBSD 3-Clause License\n\nCopyright (c) 2023, Gaijin Entertainment\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n=======================================================================================\nFirst-Party Software Distributed with Dagor Engine: Licensing and Copyright Information \n=======================================================================================\n\nThe Dagor Engine software includes other code developed by Gaijin Entertainment aside\nfrom the main software. Each of these first-party components has its own LICENSE.txt or\na similar document specifying its licensing terms that may significantly differ from\nthis license. These files are located in the respective directories of each\nfirst-party component as follows:\n\n  prog/1stPartyLibs/dag/LICENSE\n  prog/1stPartyLibs/daScript/das-fmt/LICENSE\n  prog/1stPartyLibs/daScript/dastest/LICENSE\n  prog/1stPartyLibs/daScript/LICENSE\n  prog/1stPartyLibs/daScript/modules/dasImgui/LICENSE\n  prog/1stPartyLibs/daScript/modules/dasQuirrel/LICENSE\n  prog/1stPartyLibs/daScript/modules/dasStdDlg/LICENSE\n  prog/1stPartyLibs/daScript/modules/dasStdDlg/stub/LICENSE\n  prog/1stPartyLibs/quirrel/quirrel/COPYRIGHT\n\n=======================================================================================\nThird-Party Software Distributed with Dagor Engine: Licensing and Copyright Information\n=======================================================================================\n\nThe Dagor Engine software incorporates code developed by third-party contributors. Each\nof these third-party components comes with its own LICENSE.txt or a similar document\nspecifying its copyright attribution and licensing terms that may significantly differ\nfrom this license. \n\nPlease note that Gaijin Entertainment assumes no responsibility, liability, or\nobligations whatsoever for the third-party components and their use by you. You should\nadhere to and further comply with the licensing terms outlined by these third-party\ncomponents. You agree to indemnify, defend, and hold harmless Gaijin Entertainment from\nand against any and all claims, damages, obligations, losses, liabilities, costs, debts,\nand expenses (including but not limited to attorney's fees) arising from your failure\nto comply with them.\n\nWe recommend consulting the respective LICENSE.txt or equivalent files for your\nguidance. You can find them in the respective directories of each\nthird-party component as follows:\n\n  prog/3rdPartyLibs/arc/brotli/LICENSE\n  prog/3rdPartyLibs/arc/fastlz/LICENSE\n  prog/3rdPartyLibs/arc/libzip/LICENSE\n  prog/3rdPartyLibs/arc/lz4/LICENSE\n  prog/3rdPartyLibs/arc/lzma-9.20/LICENSE\n  prog/3rdPartyLibs/arc/unzip/LICENSE.txt\n  prog/3rdPartyLibs/arc/zlib-ng/LICENSE.md\n  prog/3rdPartyLibs/arc/zstd-1.4.5/LICENSE\n  prog/3rdPartyLibs/assimp/contrib/poly2tri/LICENSE\n  prog/3rdPartyLibs/assimp/LICENSE\n  prog/3rdPartyLibs/bencode/LICENSE\n  prog/3rdPartyLibs/binPack2D/LICENSE\n  prog/3rdPartyLibs/breakpad/LICENSE\n  prog/3rdPartyLibs/bsdiff/LICENSE\n  prog/3rdPartyLibs/cachesim/LICENSE\n  prog/3rdPartyLibs/cef3/v4896/libcef_dll/LICENSE\n  prog/3rdPartyLibs/cef3/v4951/libcef_dll/LICENSE\n  prog/3rdPartyLibs/codecs/dav1d/LICENSE\n  prog/3rdPartyLibs/codecs/libogg-1.1.3/copying\n  prog/3rdPartyLibs/codecs/libtheora-1.0/copying\n  prog/3rdPartyLibs/codecs/libtheora-1.0/license\n  prog/3rdPartyLibs/codecs/speexdsp-1.2.0/LICENSE\n  prog/3rdPartyLibs/convert/detex/LICENSE\n  prog/3rdPartyLibs/convert/fastDXT/LICENSE\n  prog/3rdPartyLibs/convert/nvtt-2.0.7/LICENSE\n  prog/3rdPartyLibs/cpu_features/LICENSE\n  prog/3rdPartyLibs/crashpad/LICENSE\n  prog/3rdPartyLibs/Detour/LICENSE\n  prog/3rdPartyLibs/doctest/LICENSE.txt\n  prog/3rdPartyLibs/eastl/LICENSE\n  prog/3rdPartyLibs/enet/LICENSE\n  prog/3rdPartyLibs/fast_float/LICENSE\n  prog/3rdPartyLibs/fileWatcher/License.txt\n  prog/3rdPartyLibs/flatbuffers/LICENSE.txt\n  prog/3rdPartyLibs/fmt/LICENSE\n  prog/3rdPartyLibs/freetype/freetype-2.8/LICENSE.TXT\n  prog/3rdPartyLibs/freetype/harfbuzz-2.6.4/COPYING\n  prog/3rdPartyLibs/fsr2/dx12/license.txt\n  prog/3rdPartyLibs/fsr2/LICENSE.txt\n  prog/3rdPartyLibs/hash/BLAKE3/LICENSE\n  prog/3rdPartyLibs/hash/LICENSE\n  prog/3rdPartyLibs/image/avif/LICENSE\n  prog/3rdPartyLibs/image/imageresampler/LICENSE\n  prog/3rdPartyLibs/image/jpeg-6b/LICENSE\n  prog/3rdPartyLibs/image/libpng-1.4.22/license.txt\n  prog/3rdPartyLibs/image/psdRead/LICENSE\n  prog/3rdPartyLibs/image/tiff-4.4.0/LICENSE.md\n  prog/3rdPartyLibs/image/tinyexr-1.0.8/LICENSE\n  prog/3rdPartyLibs/imgui-node-editor/LICENSE\n  prog/3rdPartyLibs/imgui/LICENSE_imgui.txt\n  prog/3rdPartyLibs/imgui/LICENSE_implot.txt\n  prog/3rdPartyLibs/ImGuizmo/LICENSE\n  prog/3rdPartyLibs/jsoncpp/LICENSE\n  prog/3rdPartyLibs/jsonsl/LICENSE\n  prog/3rdPartyLibs/libb64/LICENSE\n  prog/3rdPartyLibs/libcurl/COPYING\n  prog/3rdPartyLibs/libev/LICENSE\n  prog/3rdPartyLibs/libunwind/LICENSE.TXT\n  prog/3rdPartyLibs/lottie/COPYING\n  prog/3rdPartyLibs/math/carve/LICENSE\n  prog/3rdPartyLibs/math/clipper-4.x/license.txt\n  prog/3rdPartyLibs/math/DelaunayTriangulator/LICENSE\n  prog/3rdPartyLibs/math/misc/LICENSE\n  prog/3rdPartyLibs/math/poly2tri/LICENSE\n  prog/3rdPartyLibs/math/vhacd/LICENSE\n  prog/3rdPartyLibs/meshoptimizer/LICENSE.md\n  prog/3rdPartyLibs/metal/glslang/LICENSE\n  prog/3rdPartyLibs/metal/SPIRV-Headers/LICENSE\n  prog/3rdPartyLibs/metal/spirv-tools/LICENSE\n  prog/3rdPartyLibs/metal/spirv-tools/utils/vscode/src/lsp/LICENSE\n  prog/3rdPartyLibs/metal/spirv2Metal/LICENSE\n  prog/3rdPartyLibs/mimalloc/LICENSE\n  prog/3rdPartyLibs/minhook/LICENSE\n  prog/3rdPartyLibs/miniaudio/LICENSE\n  prog/3rdPartyLibs/miniupnpc/LICENSE\n  prog/3rdPartyLibs/mit-hrtf-lib/LICENSE\n  prog/3rdPartyLibs/mongoose/LICENSE\n  prog/3rdPartyLibs/nanosvg/LICENSE.txt\n  prog/3rdPartyLibs/openssl-3.x/LICENSE.txt\n  prog/3rdPartyLibs/ozz/LICENSE.md\n  prog/3rdPartyLibs/pcre/LICENSE\n  prog/3rdPartyLibs/phys/bullet-3/Extras/ConvexDecomposition/LICENSE.txt\n  prog/3rdPartyLibs/phys/bullet-3/Extras/InverseDynamics/LICENSE.txt\n  prog/3rdPartyLibs/phys/bullet-3/LICENSE.txt\n  prog/3rdPartyLibs/phys/bullet-3/test/gtest-1.7.0/LICENSE\n  prog/3rdPartyLibs/phys/joltPhysics/LICENSE\n  prog/3rdPartyLibs/poisson-disk-generator/LICENSE\n  prog/3rdPartyLibs/rapidjson/license.txt\n  prog/3rdPartyLibs/reachability/LICENSE.txt\n  prog/3rdPartyLibs/Recast/LICENSE\n  prog/3rdPartyLibs/ssr/LICENSE\n  prog/3rdPartyLibs/udis86/LICENSE\n  prog/3rdPartyLibs/unittest-cpp/LICENSE\n  prog/3rdPartyLibs/uriparser/COPYING\n  prog/3rdPartyLibs/vulkan/glslang/LICENSE\n  prog/3rdPartyLibs/vulkan/hlslcc/license.txt\n  prog/3rdPartyLibs/vulkan/hlslcc/src/cbstring/license.txt\n  prog/3rdPartyLibs/vulkan/smol-v/LICENSE\n  prog/3rdPartyLibs/vulkan/spirv-tools/external/spirv-headers/LICENSE\n  prog/3rdPartyLibs/vulkan/spirv-tools/LICENSE\n  prog/3rdPartyLibs/vulkan/spirv-tools/utils/vscode/src/lsp/LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.158203125,
          "content": "## How to Build: Environment\nRequirements for building and using the Dagor Engine toolkit: Windows 10 (x64), 16 GB of RAM, 200 GB of HDD/SSD space.\n\n* Install Git: https://git-scm.com/download/win\n* Install 7-Zip: https://www.7-zip.org/\n* Install Python 3\n* If you plan to use the FMOD sound library, also install FMOD Studio SDK 2.02.15\n\nCreate a project folder at the root of any drive (the folder name should not contain spaces or non-Latin characters).\n```\nmd X:\\develop && cd X:\\develop\n```\n\nClone the Dagor Engine source code and samples:\n```\ngit clone https://github.com/GaijinEntertainment/DagorEngine.git\ncd DagorEngine\n```\n\nRun the `make_devtools.py` script. This script will download, install, and configure the build toolkit. You should provide the path to the build toolkit folder as an argument, and the script will create this folder if it doesn't exist.\n\n```\npython3 make_devtools.py X:\\develop\\devtools\n```\n\nIf the script is not run as an administrator, installers of certain programs may request permission for installation, which you should grant. If you plan to use plugins for 3ds Max, press 'Y' when the script asks if you want to install the 3ds Max SDK. The script will also ask to add the path X:\\develop\\devtools to the PATH environment variable and set the GDEVTOOL variable to point to this folder.\n\nAfter the script completes its work, the X:\\develop\\devtools folder will be configured with the following SDKs and tools:\n\n* Agility.SDK.1.614.1 - DirectX 12 Agility SDK\n* astcenc-4.6.1 - Adaptive Scalable Texture Compression (ASTC) Encoder\n* DXC-1.7.2207 - DirectX Compiler\n* FidelityFX_SC - a library for image quality enhancement\n* fmod-studio-2.xx.xx [optional] - FMOD sound library\n* ispc-v1.23.0-windows - Implicit SPMD Program Compiler\n* LLVM-15.0.7 - C/C++ compiler and libraries (Clang)\n* max2024.sdk - 3ds Max 2024 SDK\n* nasm - netwide assembler ver 2.x\n* openxr-1.0.27 - library for AR/VR\n* vc2019_16.11.34 - C/C++ compiler and libraries (MSVC)\n* vc2022_17.9.5 - C/C++ compiler and libraries (MSVC)\n* win.sdk.100 - Windows 10 SDK\n* win.sdk.81 - Windows 8.1 SDK\n* ducible.exe - a tool to make builds of Portable Executables (PEs) and PDBs reproducible\n* pdbdump.exe - a tool for dumping the content of PDB files\n* jam.exe - a small build tool that can be used as a replacement for Make\n\nRestart the command line console to make the new environment variables available.\n\n## How to Build: Prebuilt Binaries\n\nYou will need to download and extract additional binary files from the repository [https://github.com/GaijinEntertainment/DagorEngine/releases](https://github.com/GaijinEntertainment/DagorEngine/releases) into the X:\\develop\\DagorEngine folder:\n\n* [tools-base.7z](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/tools-base.7z) - contains initial data for tools\n* [samples-base.7z](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/samples-base.7z) - contains initial assets that will be compiled into binary files that will be loaded the game\n* [tools-prebuilt-windows-x86_64.7z](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/tools-prebuilt-windows-x86_64.7z),\n  [tools-prebuilt-linux-x86_64.tar.gz](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/tools-prebuilt-linux-x86_64.tar.gz),\n  [tools-prebuilt-macOS.tar.gz](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/tools-prebuilt-macOS.tar.gz) - contains the prebuilt engine toolkit\n\nThe directory structure should look like this:\n```\nX:\\develop\\DagorEngine\\tools\\...\n\nX:\\develop\\DagorEngine\\samples\\skiesSample\\game\n                              \\skiesSample\\develop\n                              \\skiesSample\\prog\n\nX:\\develop\\DagorEngine\\samples\\testGI\\game\n                              \\testGI\\develop\n                              \\testGI\\prog\n```\n\n* prog - game source code\n* develop - initial assets\n* game - directory where assets are placed after building and game executable files are located\n\n## How to Build: Build from Source Code\n\nRun `build_all.py` in DagorEngine root.\n\nThis builds the entire project toolkit from the source code. This process may take a considerable amount of time.\nAfter tools are built and ready to be used script builds game and UI resources using daBuild and other utilities.\n\nYou can use direct build commands instead of using Python script.<br>\nFor example we will build \"skiesSample\" sample:<br>\n* **To build code**, navigate to the `X:\\develop\\DagorEngine\\samples\\skiesSample\\prog` folder and run the `jam` command (it builds `jamfile` script found in that folder).<br>After building the executable file will be placed in the `skiesSample\\game` folder.<br>\n* **To build shaders**, navigate to the `X:\\develop\\DagorEngine\\samples\\skiesSample\\prog\\shaders` folder and run any of `compile_shaders_*` scripts.<br>After building the shader-dump file will be placed in the `skiesSample\\game\\compiledShaders` folder.<br>\n* **To build resources**, navigate to the `X:\\develop\\DagorEngine\\samples\\skiesSample\\develop` folder and run the `dabuild.cmd` script.<br>After building the game resources will be placed in the `skiesSample\\game\\res` folder.<br>\n\nYou can also build everything for **Outer Space** sample game project or **daNetGame-based Scene Viewer** with their own scripts:<br>\n* `X:\\develop\\DagorEngine\\outerSpace\\prog\\build.py`<br>\n* `X:\\develop\\DagorEngine\\samples\\dngSceneViewer\\prog\\build.py`<br>\n\nJust be aware that these scripts use DagorEngine tools so they must be built beforehand or downloaded as prebuilt archive as described earlier.\n\n`build*.py` script may accept optional parameters to limit components to be built:\n`code`, `shaders`, `assets`, `vromfs`, `gui`.\nIf no parameters passed script builds all components.\n\n`build*.py` script may accept optional parameters to force target architecture to be built, e.g. `arch:x86_64`, `arch:arm64`, `arch:x86`.\nIf none is specified code is built to default architecture (depends on host OS and jamfile settings).\nNot all code applies target architecture now (only **Outer Space** and **daNetGame-based Scene Viewer**).\n\n`build_all.py` script in addition to components accepts optional list of projects to be built:\n`project:dagorTools`, `project:physTest`, `project:skiesSample`, `project:testGI`, `project:outerSpace`, `project:dngSceneViewer`.\nIf none is passed script builds all projects.\n\nExample: `build_all.py project:dngSceneViewer code shaders` will build only code and shaders for **daNetGame-based Scene Viewer** project.\n\n### Basic dagor samples\n\n* Offline scene viewer : **East District**<br>\n  [Code](https://github.com/GaijinEntertainment/DagorEngine/tree/main/samples/dngSceneViewer/prog) and built scene data [east_district-dagor.tar.gz](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/east_district-dagor.tar.gz) to be unpacked to DagorEngine root<br>\n  **east_district-dagor.tar.gz** also contains prebuilt viewer app (for windows, macOS and linux) to run sample at once<br>\n  [Demos of a new Gaijin’s game showcase Dagor Engine power](https://gaijinent.com/news/demos-of-a-new-gaijins-game-showcase-dagor-engine-power)<br>\n  [East District review on YouTube](https://youtu.be/miABl6aekBA)\n* Multiplayer sample: **Outer Space**<br>\n  [Code](https://github.com/GaijinEntertainment/DagorEngine/tree/main/outerSpace/prog) and source (develop) files [outerSpace-devsrc.7z](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/outerSpace-devsrc.7z) to be unpacked to DagorEngine root<br>\n  Prebuilt game (executables, shaders, vromfs, gameres) is available as [outerSpace-prebuilt-fullsrc.tar.gz](https://dagorenginedata.cdn.gaijin.net/rel-ceec7596681cd53080ae54d5c7f30f8e9a282a80/outerSpace-prebuilt-fullsrc.tar.gz)\n\n### Documentation\n  Automatically generated [Dagor Documentation](https://gaijinentertainment.github.io/DagorEngine/) contains general architecture description, API reference, tutorials and manuals.<br>\n  It is not complete yet and will be extended.\n\n## Open-source roadmap\n\nWe are going to open-source more parts of our Engine and tools.\nThese are general and broad plans for next year, can be changed.\n\n### Documentation\n\n* how to work with dagor assets\n* daNetGame framework\n"
        },
        {
          "name": "_docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_all.py",
          "type": "blob",
          "size": 4.755859375,
          "content": "#!/usr/bin/env python3\n# module to help building DagorEngine code, shaders and game data\nimport sys\nimport subprocess\nimport pathlib\nimport os\nimport platform\nimport multiprocessing\n\nDAGOR_ROOT_FOLDER = os.path.dirname(os.path.realpath(__file__))\nDAGOR_HOST_ARCH = 'x86_64'\n\nif sys.platform.startswith('win'):\n  DAGOR_HOST = 'windows'\n  DAGOR_TOOLS_FOLDER = os.path.realpath('{0}/tools/dagor_cdk/windows-{1}'.format(DAGOR_ROOT_FOLDER, DAGOR_HOST_ARCH))\nelif sys.platform.startswith('darwin'):\n  DAGOR_HOST = 'macOS'\n  DAGOR_TOOLS_FOLDER = os.path.realpath('{0}/tools/dagor_cdk/macOS-{1}'.format(DAGOR_ROOT_FOLDER, DAGOR_HOST_ARCH))\nelif sys.platform.startswith('linux'):\n  DAGOR_HOST = 'linux'\n  DAGOR_HOST_ARCH = platform.uname().machine\n  DAGOR_TOOLS_FOLDER = os.path.realpath('{0}/tools/dagor_cdk/linux-{1}'.format(DAGOR_ROOT_FOLDER, DAGOR_HOST_ARCH))\nelse:\n  print('\\nERROR: unsupported platform {0}\\n'.format(sys.platform))\n  exit(1)\nVROMFS_PACKER_EXE = os.path.realpath('{0}/vromfsPacker-dev{1}'.format(DAGOR_TOOLS_FOLDER, '.exe' if DAGOR_HOST == 'windows' else ''))\nDABUILD_EXE = os.path.realpath('{0}/daBuild-dev{1}'.format(DAGOR_TOOLS_FOLDER, '.exe' if DAGOR_HOST == 'windows' else ''))\nDABUILD_CMD = [DABUILD_EXE, '-jobs:{}'.format(multiprocessing.cpu_count()), '-q']\nFONTGEN_EXE = os.path.realpath('{0}/fontgen2-dev{1}'.format(DAGOR_TOOLS_FOLDER, '.exe' if DAGOR_HOST == 'windows' else ''))\n\n# gather build components from commandline (to allow partial builds)\nBUILD_COMPONENTS = []\nfor s in sys.argv[1:]:\n  if not s.startswith('project:') and not s.startswith('arch:'):\n    BUILD_COMPONENTS += [s]\n# when no components specified we build all of them\nif len(BUILD_COMPONENTS) == 0:\n  BUILD_COMPONENTS = ['code', 'shaders', 'assets', 'vromfs', 'gui']\n\n# get target architecture from commandline if any (and using default when none specified)\nBUILD_TARGET_ARCH = \"\"\nfor s in sys.argv[1:]:\n  if s.startswith('arch:'):\n    BUILD_TARGET_ARCH = s[5:]\n    break\n\ndef run(cmd, cwd='.'):\n  try:\n    print('--- Running: {0}  in  {1}'.format(cmd, cwd)); sys.stdout.flush()\n    subprocess.run(cmd, shell = True if type(cmd)==str else False, check = True, cwd = cwd)\n    return True\n  except subprocess.CalledProcessError as e:\n    print('subprocess.run failed with a non-zero exit code. Error: {0}'.format(e))\n    return False\n  except OSError as e:\n    print('An OSError occurred, subprocess.run command may have failed. Error: {0}'.format(e))\n    return True\n\ndef run_per_platform(cmds_windows=[], cmds_macOS=[], cmds_linux=[], cwd='.'):\n  for c in cmds_windows if DAGOR_HOST == 'windows' else cmds_macOS if DAGOR_HOST == 'macOS' else cmds_linux if DAGOR_HOST == 'linux' else []:\n    if not run(c, cwd=cwd):\n      return False\n  return True\n\n# build DagorEngine code, shades and vromfs (when script is called directly)\nif __name__ == '__main__':\n  # gather build projects from commandline (to allow partial builds)\n  BUILD_PROJECTS = []\n  for s in sys.argv[1:]:\n    if s.startswith('project:'):\n      BUILD_PROJECTS += [s[8:]]\n  # when no projects specified we build all of them\n  if len(BUILD_PROJECTS) == 0:\n    BUILD_PROJECTS = ['dagorTools', 'dargbox', 'physTest', 'skiesSample', 'testGI', 'outerSpace', 'dngSceneViewer']\n\n  # build command line to run other build scripts\n  PY_ADD_CMDLINE = BUILD_COMPONENTS\n  if BUILD_TARGET_ARCH != '':\n    PY_ADD_CMDLINE += ['arch:'+BUILD_TARGET_ARCH]\n\n  # core CDK (tools and dargbox)\n  if 'dagorTools' in BUILD_PROJECTS and 'code' in BUILD_COMPONENTS:\n    proj_dir = 'prog/tools'\n    if DAGOR_HOST == 'windows':\n      if not run('build_dagor_cdk_mini.cmd', cwd=proj_dir):\n        print('build_dagor3_cdk_mini.cmd failed, trying once more...')\n        if not run('build_dagor_cdk_mini.cmd', cwd=proj_dir):\n          print('echo failed to build CDK, stop!')\n          exit(1)\n    elif DAGOR_HOST == 'macOS':\n      run('./build_dagor_cdk_mini_macOS.sh', cwd=proj_dir)\n    elif DAGOR_HOST == 'linux':\n      run('./build_dagor_cdk_mini_linux.sh', cwd=proj_dir)\n\n  # dargbox tool\n  if 'dargbox' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='prog/tools/dargbox')\n\n  # physTest sample\n  if 'physTest' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='prog/samples/physTest')\n\n  # skiesSample\n  if 'skiesSample' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='samples/skiesSample/prog')\n\n  # testGI sample\n  if 'testGI' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='samples/testGI/prog')\n\n  # Outer Space game sample\n  if 'outerSpace' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='outerSpace/prog')\n\n  # daNetGame-based Scene Viewer\n  if 'dngSceneViewer' in BUILD_PROJECTS:\n    run([sys.executable, './build.py'] + PY_ADD_CMDLINE, cwd='samples/dngSceneViewer/prog')\n"
        },
        {
          "name": "make_devtools.py",
          "type": "blob",
          "size": 28.9736328125,
          "content": "import sys\n\nif not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n  print(\"\\nERROR: Python 3.5 or a higher version is required to run this script.\")\n  exit(1)\n\nimport sys\nimport subprocess\nimport pathlib\nimport os\nimport urllib\nimport ssl\nimport ctypes\nimport zipfile\nimport shutil\nfrom urllib import request\n\n\nif len(sys.argv) != 2:\n  print('\\nUsage: make_devtools.py DEVTOOLS_DEST_DIR\\nexample: python3 make_devtools.py d:\\\\devtools\\n')\n  exit(1)\n\nif sys.platform.startswith('darwin'):\n  exit(exec(open(os.path.join(os.path.dirname(__file__), \"make_devtools_macOS.py\")).read()))\nelif sys.platform.startswith('linux'):\n  exit(exec(open(os.path.join(os.path.dirname(__file__), \"make_devtools_linux.py\")).read()))\n\ndef error(s):\n  print(\"\\nERROR: {0}\\n\".format(s))\n  exit(1)\n\ndef ask(s):\n  while True:\n    answer = input(\"\\n{0} [Y/n]: \".format(s)).strip().lower()\n    if answer == \"y\" or answer == \"y\" or answer == \"\":\n      return True\n    if answer == \"n\" or answer == \"no\":\n      return False\n\ndef contains_spaces(s):\n  return ' ' in s\n\ndef contains_non_ascii(s):\n  try:\n    s.encode('ascii')\n  except UnicodeEncodeError:\n    return True\n  return False\n\ndest_dir = sys.argv[1].replace('\\\\', '/').rstrip('/')\n\nif contains_spaces(dest_dir):\n  error(\"The destination directory contains spaces, which are not allowed in a file path.\")\n\nif contains_non_ascii(dest_dir):\n  error(\"The destination directory contains non-ASCII characters.\")\n\nif not os.path.isabs(dest_dir):\n  error(\"The destination directory must be an absolute path.\")\n\n\ndef make_directory_symlink(src, dest):\n  try:\n    subprocess.run(['cmd', '/C', 'mklink', '/J', os.path.normpath(dest), os.path.normpath(src)], shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    error(\"Symlink command failed with a non-zero exit code. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n  except OSError as e:\n    print(\"An OSError occurred. Symlink command may have failed. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n\ndef make_file_link(src, dest):\n  os.link(src, dest)\n\ndef run(cmd):\n  try:\n    print(\"Running: {0}\".format(cmd))\n    subprocess.run(cmd, shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    print(\"subprocess.run failed with a non-zero exit code. Error: {0}\".format(e))\n  except OSError as e:\n    print(\"An OSError occurred, subprocess.run command may have failed. Error: {0}\".format(e))\n\n\nssl._create_default_https_context = ssl._create_unverified_context\n\ndef download_url2(url, file):\n  file = \"{0}/.packages/{1}\".format(dest_dir, file)\n  if not pathlib.Path(file).exists():\n    print(\"Downloading '{0}' to '{1}' ...\".format(url, file));\n    response = request.urlretrieve(url, file)\n  else:\n    print(\"Package '{0}' already exists\".format(file));\n\ndef download_url(url):\n  path, file = os.path.split(os.path.normpath(url))\n  download_url2(url, file)\n\npathlib.Path(dest_dir).mkdir(parents=True, exist_ok=True)\npathlib.Path(dest_dir+'/.packages').mkdir(parents=True, exist_ok=True)\n\n# python3\npython_dest_folder = dest_dir+'/python3'\nif pathlib.Path(python_dest_folder).exists():\n  print('=== Python 3 symlink found at {0}, skipping setup'.format(python_dest_folder))\nelse:\n  python_src_folder = os.path.dirname(sys.executable)\n  if not pathlib.Path(python_src_folder+'/python.exe').exists():\n    python_src_folder = os.environ.get('LOCALAPPDATA', '') + '/Programs/Python'\n  if pathlib.Path(python_src_folder).exists():\n    if not pathlib.Path(python_src_folder+'/python.exe').exists():\n      for item in pathlib.Path(python_src_folder).glob(\"Python3*\"):\n        if item.is_dir():\n          if pathlib.Path(os.path.normpath(item)+'/python.exe').exists():\n            python_src_folder = os.path.normpath(item)\n            break\n    print('+++ Python 3 found at {0}'.format(python_src_folder))\n    make_directory_symlink(python_src_folder, python_dest_folder)\n\n    subprocess.run([python_dest_folder+'/python.exe', '-m', 'pip', 'install', '--upgrade', 'pip'])\n    subprocess.run([python_dest_folder+'/python.exe', '-m', 'pip', '--version'])\n    subprocess.run([python_dest_folder+'/python.exe', '-m', 'pip', 'install', 'clang==14.0.6'])\n    subprocess.run([python_dest_folder+'/python.exe', '-m', 'pip', 'install', 'cymbal'])\n    if not pathlib.Path(python_dest_folder+'/python3.exe').exists():\n      make_file_link(python_dest_folder+'/python.exe', python_dest_folder+'/python3.exe')\n  else:\n    error(\"Python 3 not found\")\n\n\nmicrosoft_retry = []\n\n# vs140\ndef setup_vs140(check_again_after_download):\n  vc2015_dest_folder = dest_dir+'/vc2015.3'\n  if pathlib.Path(vc2015_dest_folder).exists():\n    print('=== VC2015 symlink found at {0}, skipping setup'.format(vc2015_dest_folder))\n  else:\n    vc2015_src_folder = os.environ.get('VS140COMNTOOLS', '')\n    if vc2015_src_folder != '':\n      vc2015_src_folder = os.path.normpath(vc2015_src_folder+'/../..')\n    else:\n      vc2015_src_folder = '{0}/Microsoft Visual Studio 14.0'.format(os.environ['ProgramFiles(x86)'])\n\n    if vc2015_src_folder and pathlib.Path(vc2015_src_folder).exists():\n      print('+++ VC2015 found at {0}'.format(vc2015_src_folder))\n      make_directory_symlink(vc2015_src_folder+'/VC', vc2015_dest_folder)\n    else:\n      print('--- VC2015 not found (VS140COMNTOOLS env var is empty), install VisualStudio 2015 upd.3 and re-run setup')\n      if not check_again_after_download:\n        error(\"Visual Studio 2015 is required but not found at '{0}'\".format(vc2015_src_folder))\n      microsoft_retry.append(setup_vs140)\n\n#Visual Studio 2015 is turned off\n#setup_vs140(True)\n\n\n# vs142\ndef setup_vs142(check_again_after_download):\n  vs142_ver = \"14.29\"\n  vc2019_dest_folder = dest_dir + '/vc2019_16.11.34'\n\n  if pathlib.Path(vc2019_dest_folder).exists():\n    real_path = \"\"\n    try:\n      real_path = os.path.realpath(vc2019_dest_folder)\n    except OSError as e:\n      pass\n\n    if (not pathlib.Path(vc2019_dest_folder + '/bin/HostX64/x64/1033').exists() or\n       (real_path.find(\"Microsoft\") != -1 and real_path.find(vs142_ver) == -1)):\n      print(vc2019_dest_folder+\" contains invalid version of build tools.\")\n      print(\"...removing \"+vc2019_dest_folder)\n      try:\n        os.remove(vc2019_dest_folder)\n      except OSError as e:\n        error(\"Cannot remove link {0}: {1}\".format(vc2019_dest_folder, e))\n\n\n  if pathlib.Path(vc2019_dest_folder).exists():\n    print('=== VC2019 symlink found at {0}, skipping setup'.format(vc2019_dest_folder))\n  else:\n    ok = False\n    vc2019_src_folder = '{0}/Microsoft Visual Studio'.format(os.environ['ProgramFiles(x86)'])\n    if vc2019_src_folder and pathlib.Path(vc2019_src_folder).exists():\n      for nm in ['/2022/BuildTools', '/2022/Community', '/2022/Enterprise', '/2022/Professional',\n                 '/2019/BuildTools', '/2019/Community', '/2019/Enterprise', '/2019/Professional']:\n        if pathlib.Path(vc2019_src_folder + nm + '/VC/Tools/MSVC').exists():\n          versions_folder = vc2019_src_folder + nm + '/VC/Tools/MSVC'\n          for item in pathlib.Path(versions_folder).glob(vs142_ver + \".*\"):\n            if item.is_dir():\n              if pathlib.Path(os.path.normpath(item)+'/bin/HostX64/x64/1033').exists():\n                if pathlib.Path(os.path.normpath(item)+'/bin/HostX86/x86/1033').exists():\n                  vc2019_src_folder = os.path.normpath(item)\n                  ok = True\n                  break\n\n    if ok:\n      print('+++ VC2019 found at {0}'.format(vc2019_src_folder))\n      make_directory_symlink(vc2019_src_folder, vc2019_dest_folder)\n    else:\n      print('--- VC2019 not found, install VisualStudio 2019 16.11.34+ and re-run setup')\n      if not check_again_after_download:\n        error(\"Visual Studio 2019 is required but not found at '{0}'\".format(vc2019_src_folder))\n      microsoft_retry.append(setup_vs142)\n\n\nsetup_vs142(True)\n\n\ndef setup_vs143(check_again_after_download):\n  vs143_ver = \"14.39\"\n  vc2022_dest_folder = dest_dir + '/vc2022_17.9.5'\n\n  if pathlib.Path(vc2022_dest_folder).exists():\n    real_path = \"\"\n    try:\n      real_path = os.path.realpath(vc2022_dest_folder)\n    except OSError as e:\n      pass\n\n    if (not pathlib.Path(vc2022_dest_folder + '/bin/HostX64/x64/1033').exists() or\n       (real_path.find(\"Microsoft\") != -1 and real_path.find(vs143_ver) == -1)):\n      print(vc2022_dest_folder+\" contains invalid version of build tools.\")\n      print(\"...removing \"+vc2022_dest_folder)\n      try:\n        os.remove(vc2022_dest_folder)\n      except OSError as e:\n        error(\"Cannot remove link {0}: {1}\".format(vc2022_dest_folder, e))\n\n\n  if pathlib.Path(vc2022_dest_folder).exists():\n    print('=== VC2022 symlink found at {0}, skipping setup'.format(vc2022_dest_folder))\n  else:\n    ok = False\n    vc2022_src_folder = '{0}/Microsoft Visual Studio'.format(os.environ['ProgramFiles(x86)'])\n    if vc2022_src_folder and pathlib.Path(vc2022_src_folder).exists():\n      for nm in ['/2022/BuildTools', '/2022/Community', '/2022/Enterprise', '/2022/Professional']:\n        if pathlib.Path(vc2022_src_folder + nm + '/VC/Tools/MSVC').exists():\n          versions_folder = vc2022_src_folder + nm + '/VC/Tools/MSVC'\n          for item in pathlib.Path(versions_folder).glob(vs143_ver + \".*\"):\n            if item.is_dir():\n              if pathlib.Path(os.path.normpath(item)+'/bin/HostX64/x64/1033').exists():\n                if pathlib.Path(os.path.normpath(item)+'/bin/HostX86/x86/1033').exists():\n                  vc2022_src_folder = os.path.normpath(item)\n                  ok = True\n                  break\n\n    if ok:\n      print('+++ VC2022 found at {0}'.format(vc2022_src_folder))\n      make_directory_symlink(vc2022_src_folder, vc2022_dest_folder)\n    else:\n      print('--- VC2022 not found, install VisualStudio 2022 17.9.5+ and re-run setup')\n      if not check_again_after_download:\n        error(\"Visual Studio 2022 is required but not found at '{0}'\".format(vc2022_src_folder))\n      microsoft_retry.append(setup_vs143)\n\n\nsetup_vs143(True)\n\n\n# Microsoft Windows 10 SDK\ndef setup_winsdk_100(check_again_after_download):\n  winsdk_dest_folder = dest_dir+'/win.sdk.100'\n  if pathlib.Path(winsdk_dest_folder).exists():\n    print('=== Windows 10 SDK symlink found at {0}, skipping setup'.format(winsdk_dest_folder))\n  else:\n    winsdk_src_folder = '{0}/Windows Kits/10'.format(os.environ['ProgramFiles(x86)'])\n    if pathlib.Path(winsdk_src_folder+'/include/10.0.19041.0').exists():\n      print('+++ Windows 10 SDK found at {0}'.format(winsdk_src_folder))\n      make_directory_symlink(winsdk_src_folder, winsdk_dest_folder)\n    else:\n      print('--- Windows 10 SDK not found, install Windows SDK and re-run setup')\n      if not check_again_after_download:\n        error(\"Windows 10 SDK is required but not found at '{0}'\".format(winsdk_src_folder))\n      microsoft_retry.append(setup_winsdk_100)\n\nsetup_winsdk_100(True)\n\n\n# Microsoft Windows 8.1 SDK\ndef setup_winsdk_81(check_again_after_download):\n  winsdk_dest_folder = dest_dir+'/win.sdk.81'\n  if pathlib.Path(winsdk_dest_folder).exists():\n    print('=== Windows 8.1 SDK symlink found at {0}, skipping setup'.format(winsdk_dest_folder))\n  else:\n    winsdk_src_folder = '{0}/Windows Kits/8.1'.format(os.environ['ProgramFiles(x86)'])\n    if pathlib.Path(winsdk_src_folder+'/include').exists():\n      print('+++ Windows 8.1 SDK found at {0}'.format(winsdk_src_folder))\n      make_directory_symlink(winsdk_src_folder, winsdk_dest_folder)\n    else:\n      print('--- Windows 8.1 SDK not found, install Windows SDK and re-run setup')\n      if not check_again_after_download:\n        error(\"Windows 8.1 SDK is required but not found at '{0}'\".format(winsdk_src_folder))\n\n      pathlib.Path(dest_dir+\"/.packages/vs140\").mkdir(parents=True, exist_ok=True)\n      download_url2(\"https://aka.ms/vs/15/release/vs_buildtools.exe\", \"vs140/vs_buildtools.exe\")\n      run(dest_dir+\"/.packages/vs140/vs_buildtools.exe --wait --passive --add \" +\n           \"Microsoft.VisualStudio.Component.Windows81SDK \")\n      setup_winsdk_81(False)\n\nsetup_winsdk_81(True)\n\n\nif len(microsoft_retry) > 0:\n  download_url('https://aka.ms/vs/17/release/vs_buildtools.exe')\n  run(dest_dir+\"/.packages/vs_buildtools.exe --wait --passive --addProductLang en-US --add \" +\n    \" Microsoft.VisualStudio.Component.Roslyn.Compiler\" +\n    \" Microsoft.Component.MSBuild\" +\n    \" Microsoft.VisualStudio.Component.CoreBuildTools\" +\n    \" Microsoft.VisualStudio.Workload.MSBuildTools\" +\n    \" Microsoft.VisualStudio.Component.Windows10SDK\" +\n    \" Microsoft.VisualStudio.Component.VC.CoreBuildTools\" +\n    \" Microsoft.VisualStudio.Component.VC.Redist.14.Latest\" +\n    \" Microsoft.VisualStudio.Component.TestTools.BuildTools\" +\n    \" Microsoft.Net.Component.4.7.2.TargetingPack\" +\n    \" Microsoft.VisualStudio.Component.VC.ASAN\" +\n    \" Microsoft.VisualStudio.Component.TextTemplating\" +\n    \" Microsoft.VisualStudio.Component.VC.CoreIde\" +\n    \" Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core\" +\n    \" Microsoft.VisualStudio.Component.Windows10SDK.19041\" +\n    \" Microsoft.VisualStudio.ComponentGroup.VC.Tools.142.x86.x64\" +\n    \" Microsoft.Component.VC.Runtime.UCRTSDK\" +\n    \" Microsoft.VisualStudio.Component.VC.140\" +\n    \" Microsoft.VisualStudio.Workload.VCTools\" +\n    \" Microsoft.VisualStudio.Component.VC.14.29.16.11.x86.x64 \" +\n    \" Microsoft.VisualStudio.Component.VC.14.29.16.11.ARM64 \" +\n    \" Microsoft.VisualStudio.Component.VC.14.29.16.11.ATL \" +\n    \" Microsoft.VisualStudio.Component.VC.14.39.17.9.x86.x64 \" +\n    \" Microsoft.VisualStudio.Component.VC.14.39.17.9.ARM64 \" +\n    \" Microsoft.VisualStudio.Component.VC.14.39.17.9.ATL \" )\n\n  for fn in microsoft_retry:\n    fn(False)\n\n\n\n# LLVM 15.0.7\nllvm_dest_folder = dest_dir+'/LLVM-15.0.7'\nif pathlib.Path(llvm_dest_folder).exists():\n  print('=== LLVM 15.0.7 symlink found at {0}, skipping setup'.format(llvm_dest_folder))\nelse:\n  llvm_src_folder = '{0}/LLVM'.format(os.environ['ProgramFiles']) #(x86)\n  if not pathlib.Path(llvm_src_folder+'/bin').exists():\n    print('--- LLVM 15.0.7 not found, trying to install')\n    download_url('https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/LLVM-15.0.7-win64.exe')\n    run(dest_dir+'/.packages/LLVM-15.0.7-win64.exe /S')\n\n  if pathlib.Path(llvm_src_folder+'/bin').exists():\n    print('+++ LLVM 15.0.7 found at {0}'.format(llvm_src_folder))\n    make_directory_symlink(llvm_src_folder, llvm_dest_folder)\n  else:\n    error(\"LLVM 15.0.7 not found\")\n\n\n# nasm\nnasm_dest_folder = dest_dir+'/nasm'\nif pathlib.Path(nasm_dest_folder).exists():\n  print('=== NASM symlink found at {0}, skipping setup'.format(nasm_dest_folder))\nelse:\n  download_url('https://www.nasm.us/pub/nasm/releasebuilds/2.16/win64/nasm-2.16-win64.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/nasm-2.16-win64.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir)\n    make_directory_symlink(dest_dir+'/nasm-2.16', nasm_dest_folder)\n    shutil.copyfile(nasm_dest_folder+'/nasm.exe', nasm_dest_folder+'/nasmw.exe')\n    shutil.copyfile(nasm_dest_folder+'/ndisasm.exe', nasm_dest_folder+'/ndisasmw.exe')\n    print('+++ NASM 2.16 installed at {0}'.format(nasm_dest_folder))\n\n\n# ducible\nducible_dest_file = dest_dir+'/ducible.exe'\nif pathlib.Path(ducible_dest_file).exists():\n  print('=== Ducible tool found at {0}, skipping setup'.format(ducible_dest_file))\nelse:\n  download_url('https://github.com/jasonwhite/ducible/releases/download/v1.2.2/ducible-windows-x64-Release.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/ducible-windows-x64-Release.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir)\n    print('+++ Ducible tool installed at {0}'.format(dest_dir))\n\n\n# boost-1.62\ndef install_boost_1_62():\n  boost_dest_folder = dest_dir+'/boost-1.62'\n  if pathlib.Path(boost_dest_folder).exists():\n    print('=== boost-1.62 found at {0}, skipping setup'.format(boost_dest_folder))\n  else:\n    boost_src_folder = ''\n    for loc in ['c:/local']:\n      for item in pathlib.Path(loc).glob(\"boost_1_62*\"):\n        if item.is_dir():\n          if pathlib.Path(os.path.normpath(item)+'/boost').exists():\n            boost_src_folder = os.path.normpath(item)\n            break\n\n    if boost_src_folder != '':\n      print('+++ boost-1.62 found at {0}'.format(boost_src_folder))\n      make_directory_symlink(boost_src_folder, boost_dest_folder)\n    else:\n      download_url('https://sourceforge.net/projects/boost/files/boost/1.62.0/boost_1_62_0.zip')\n      with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/boost_1_62_0.zip'), 'r') as zip_file:\n        zip_file.extractall(dest_dir)\n        pathlib.Path(dest_dir+'/boost-1.62/libs').mkdir(parents=True, exist_ok=True)\n        subprocess.run(['cmd', '/C', 'move',\n          os.path.normpath(dest_dir+'/boost_1_62_0/boost'), os.path.normpath(dest_dir+'/boost-1.62/')])\n        for d in ['date_time', 'filesystem', 'system', 'thread']:\n          pathlib.Path(dest_dir+'/boost-1.62/libs/'+d).mkdir(parents=True, exist_ok=True)\n          subprocess.run(['cmd', '/C', 'move',\n            os.path.normpath(dest_dir+'/boost_1_62_0/libs/'+d+'/src'), os.path.normpath(dest_dir+'/boost-1.62/libs/'+d)])\n        subprocess.run(['cmd', '/C', 'rmdir', '/S', '/Q', os.path.normpath(dest_dir+'/boost_1_62_0')])\n        print('+++ boost-1.62 installed at {0}'.format(boost_dest_folder))\n\n#install_boost_1_62()\n\n\n# 3ds Max SDK\ndef install_3ds_Max_SDK(ver, url):\n  maxsdk_dest_folder = dest_dir+'/max'+ver+'.sdk'\n  if pathlib.Path(maxsdk_dest_folder).exists():\n    print('=== 3ds Max SDK {1} symlink found at {0}, skipping setup'.format(maxsdk_dest_folder, ver))\n  else:\n    if ask(\"Do you want to install 3ds Max {0} SDK?\".format(ver)):\n      maxsdk_src_folder = '{0}/Autodesk/3ds Max {1} SDK'.format(os.environ['ProgramFiles'], ver)\n      if not pathlib.Path(maxsdk_src_folder+'/maxsdk').exists():\n        print('--- 3ds Max SDK '+ver+' not found, trying to install')\n        download_url(url)\n        path, file = os.path.split(os.path.normpath(url))\n        run('msiexec /i ' + os.path.normpath(dest_dir + '/.packages/' + file) + ' /qb')\n\n      if pathlib.Path(maxsdk_src_folder+'/maxsdk').exists():\n        print('+++ 3ds Max SDK {1} found at {0}'.format(maxsdk_src_folder, ver))\n        make_directory_symlink(maxsdk_src_folder+'/maxsdk', maxsdk_dest_folder)\n      else:\n        print('--- 3ds Max SDK {1} not found at {0}, skipped setup'.format(maxsdk_src_folder, ver))\n\n# FMOD\nfmod_dest_folder = dest_dir+'/fmod-studio-2.xx.xx'\nif pathlib.Path(fmod_dest_folder).exists():\n  print('=== FMOD symlinks found at {0}, skipping setup'.format(fmod_dest_folder))\nelse:\n  fmod_src_folder = '{0}/FMOD SoundSystem/FMOD Studio API Windows'.format(os.environ['ProgramFiles(x86)'])\n  if pathlib.Path(fmod_src_folder).exists():\n    print('+++ FMOD found at {0}'.format(fmod_src_folder))\n\n    pathlib.Path(fmod_dest_folder+'/core/win32').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/core/inc', fmod_dest_folder+'/core/win32/inc')\n    make_directory_symlink(fmod_src_folder+'/api/core/lib/x86', fmod_dest_folder+'/core/win32/lib')\n\n    pathlib.Path(fmod_dest_folder+'/core/win64').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/core/inc', fmod_dest_folder+'/core/win64/inc')\n    make_directory_symlink(fmod_src_folder+'/api/core/lib/x64', fmod_dest_folder+'/core/win64/lib')\n\n    pathlib.Path(fmod_dest_folder+'/core/win-arm64').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/core/inc', fmod_dest_folder+'/core/win-arm64/inc')\n    make_directory_symlink(fmod_src_folder+'/api/core/lib/arm64', fmod_dest_folder+'/core/win-arm64/lib')\n\n    pathlib.Path(fmod_dest_folder+'/studio/win32').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/studio/inc', fmod_dest_folder+'/studio/win32/inc')\n    make_directory_symlink(fmod_src_folder+'/api/studio/lib/x86', fmod_dest_folder+'/studio/win32/lib')\n\n    pathlib.Path(fmod_dest_folder+'/studio/win64').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/studio/inc', fmod_dest_folder+'/studio/win64/inc')\n    make_directory_symlink(fmod_src_folder+'/api/studio/lib/x64', fmod_dest_folder+'/studio/win64/lib')\n\n    pathlib.Path(fmod_dest_folder+'/studio/win-arm64').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink(fmod_src_folder+'/api/studio/inc', fmod_dest_folder+'/studio/win-arm64/inc')\n    make_directory_symlink(fmod_src_folder+'/api/studio/lib/arm64', fmod_dest_folder+'/studio/win-arm64/lib')\n\n    shutil.copyfile(fmod_src_folder+'/doc/LICENSE.TXT', fmod_dest_folder+'/LICENSE.TXT')\n    shutil.copyfile(fmod_src_folder+'/doc/revision.txt', fmod_dest_folder+'/revision.txt')\n  else:\n    print('--- FMOD not found at {0}, creating stub folders'.format(fmod_src_folder))\n    print('consider downloading and installing https://www.fmod.com/download#fmodengine - Windows Download')\n    pathlib.Path(fmod_dest_folder+'/core/win32/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/core/win64/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/core/win-arm64/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/studio/win32/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/studio/win64/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/studio/win-arm64/inc').mkdir(parents=True, exist_ok=True)\n\n\n# OpenXR 1.0.27\nopenxr_dest_folder = dest_dir+'/openxr-1.0.27'\nif pathlib.Path(openxr_dest_folder).exists():\n  print('=== OpenXR symlink found at {0}, skipping setup'.format(openxr_dest_folder))\nelse:\n  download_url('https://github.com/KhronosGroup/OpenXR-SDK-Source/releases/download/release-1.0.27/openxr_loader_windows-1.0.27.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/openxr_loader_windows-1.0.27.zip'), 'r') as zip_file:\n    zip_file.extractall(openxr_dest_folder)\n    make_directory_symlink(openxr_dest_folder+'/openxr_loader_windows/include', openxr_dest_folder+'/include')\n    make_directory_symlink(openxr_dest_folder+'/openxr_loader_windows/Win32', openxr_dest_folder+'/win32')\n    make_directory_symlink(openxr_dest_folder+'/openxr_loader_windows/x64', openxr_dest_folder+'/win64')\n    print('+++ OpenXR 1.0.27 installed at {0}'.format(openxr_dest_folder))\n\n\n# FidelityFX-FSR2 compiler\nffxsc_dest_folder = dest_dir+'/FidelityFX_SC'\nif pathlib.Path(ffxsc_dest_folder).exists():\n  print('=== FidelityFX_SC symlink found at {0}, skipping setup'.format(ffxsc_dest_folder))\nelse:\n  download_url2('https://github.com/GPUOpen-Effects/FidelityFX-FSR2/archive/refs/tags/v2.2.1.zip', 'FidelityFX-FSR2.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/FidelityFX-FSR2.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir+'/.packages/')\n    make_directory_symlink(dest_dir+'/.packages/FidelityFX-FSR2-2.2.1/tools/sc', ffxsc_dest_folder)\n    print('+++ FidelityFX_SC 2.2.1 installed at {0}'.format(ffxsc_dest_folder))\n\n\n# DXC-1.7.2207\ndxc_dest_folder = dest_dir+'/DXC-1.7.2207'\nif pathlib.Path(dxc_dest_folder).exists():\n  print('=== DXC Jul 2022 found at {0}, skipping setup'.format(dxc_dest_folder))\nelse:\n  download_url('https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.7.2207/dxc_2022_07_18.zip')\n  download_url('https://github.com/microsoft/DirectXShaderCompiler/archive/refs/tags/v1.7.2207.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/v1.7.2207.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir+'/.packages/')\n    with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/dxc_2022_07_18.zip'), 'r') as zip_file:\n      zip_file.extractall(dest_dir+'/.packages/DirectXShaderCompiler-1.7.2207/_win')\n\n      pathlib.Path(dxc_dest_folder+'/include').mkdir(parents=True, exist_ok=True)\n      pathlib.Path(dxc_dest_folder+'/lib/win64').mkdir(parents=True, exist_ok=True)\n      make_directory_symlink(dest_dir+'/.packages/DirectXShaderCompiler-1.7.2207/include/dxc', dxc_dest_folder+'/include/dxc')\n      shutil.copyfile(dest_dir+'/.packages/DirectXShaderCompiler-1.7.2207/_win/bin/x64/dxcompiler.dll', dxc_dest_folder+'/lib/win64/dxcompiler.dll')\n      shutil.copyfile(dest_dir+'/.packages/DirectXShaderCompiler-1.7.2207/LICENSE.TXT', dxc_dest_folder+'/LICENSE.TXT')\n      print('+++ DXC Jul 2022 installed at {0}'.format(dxc_dest_folder))\n\n# Agility.SDK.1.614.1\nasdk_ver = '1.614.1'\nasdk_dest_folder = dest_dir+'/Agility.SDK.'+asdk_ver\nif pathlib.Path(asdk_dest_folder).exists():\n  print('=== Agility.SDK.{1} symlink found at {0}, skipping setup'.format(asdk_dest_folder, asdk_ver))\nelse:\n  zip_name = 'D3D12-{0}.zip'.format(asdk_ver)\n  download_url2('https://www.nuget.org/api/v2/package/Microsoft.Direct3D.D3D12/'+asdk_ver, zip_name)\n  asdk_pkg_name = dest_dir+'/.packages/D3D12-'+asdk_ver+'.pkg'\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/'+zip_name), 'r') as zip_file:\n    zip_file.extractall(asdk_pkg_name)\n    #make_directory_symlink(asdk_pkg_name+'/build/native', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/build/native', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/README.md', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/distributable files.txt', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/LICENSE.txt', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/LICENSE-CODE.txt', asdk_dest_folder)\n    shutil.move(asdk_pkg_name+'/Microsoft.Direct3D.D3D12.nuspec', asdk_dest_folder)\n    print('+++ Agility.SDK.{1} installed at {0}'.format(asdk_dest_folder, asdk_ver))\n\n# astcenc-4.5.1\nastcenc_dest_folder = dest_dir+'/astcenc-4.6.1'\nif pathlib.Path(astcenc_dest_folder).exists():\n  print('=== ASTC encoder 4.6.1 {0}, skipping setup'.format(astcenc_dest_folder))\nelse:\n  download_url('https://github.com/ARM-software/astc-encoder/releases/download/4.6.1/astcenc-4.6.1-windows-x64.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/astcenc-4.6.1-windows-x64.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir+'/astcenc-4.6.1')\n    os.rename(os.path.normpath(dest_dir+'/astcenc-4.6.1/bin'), os.path.normpath(dest_dir+'/astcenc-4.6.1/win64'));\n    print('+++ ASTC encoder 4.6.1 installed at {0}'.format(astcenc_dest_folder))\n\n# ispc-v1.23.0\nispc_dest_folder = dest_dir+'/ispc-v1.23.0-windows'\nif pathlib.Path(ispc_dest_folder).exists():\n  print('=== ISPC v1.23.0 {0}, skipping setup'.format(ispc_dest_folder))\nelse:\n  download_url('https://github.com/ispc/ispc/releases/download/v1.23.0/ispc-v1.23.0-windows.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/ispc-v1.23.0-windows.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir)\n    print('+++ ISPC v1.23.0 installed at {0}'.format(ispc_dest_folder))\n\n\n# install 3ds Max SDKs\ninstall_3ds_Max_SDK('2025',\n  'https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN+Extranet/M%26E/Max/Autodesk+3ds+Max+2025/SDK_3dsMax2025.msi')\ninstall_3ds_Max_SDK('2024',\n  'https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN+Extranet/M%26E/Max/Autodesk+3ds+Max+2024/SDK_3dsMax2024.msi')\ninstall_3ds_Max_SDK('2023',\n  'https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN+Extranet/M%26E/Max/Autodesk+3ds+Max+2023/SDK_3dsMax2023.msi')\n#install_3ds_Max_SDK('2019',\n#  'https://autodesk-adn-transfer.s3.us-west-2.amazonaws.com/ADN%20Extranet/M%26E/Max/Autodesk%203ds%20Max%202019/SDK_3dsMax2019.msi')\n\n\n# re-write platform.jam\nif pathlib.Path(\"prog\").exists():\n  with open('prog/platform.jam', 'w') as fd:\n    fd.write('_DEVTOOL = {0} ;\\n'.format(dest_dir))\n    if pathlib.Path(fmod_dest_folder+'/LICENSE.TXT').exists():\n      fd.write('FmodStudio = 2.xx.xx ;\\n')\n    else:\n      fd.write('FmodStudio = none ;\\n')\n    fd.close()\n\n\nnomalized_dest = os.path.normpath(dest_dir)\nenv_updated = False\n\nif os.environ.get('GDEVTOOL', '') == '':\n  if ask(\"Environment variable 'GDEVTOOL' not found. Do you want to set it?\"):\n    subprocess.run([\"setx\", \"GDEVTOOL\", nomalized_dest], shell=True, text=True)\n    os.environ[\"GDEVTOOL\"] = nomalized_dest\n    env_updated = True\nelif os.environ.get('GDEVTOOL', '') != nomalized_dest:\n  if ask(\"Environment variable 'GDEVTOOL' points to another directory. Do you want to update it?\"):\n    subprocess.run([\"setx\", \"GDEVTOOL\", nomalized_dest], shell=True, text=True)\n    os.environ[\"GDEVTOOL\"] = nomalized_dest\n    env_updated = True\n\nif nomalized_dest not in os.environ.get('PATH', '').split(os.pathsep):\n  if ask(\"'{0}' is not found in 'PATH' variable. Do you want to add it?\".format(nomalized_dest)):\n    print(\"adding {0} to 'PATH', it may take a while...\".format(nomalized_dest))\n    add_path_command = ('[System.Environment]::SetEnvironmentVariable(\"PATH\", ' +\n                        '\"{0};\" + [System.Environment]::GetEnvironmentVariable(\"PATH\", [System.EnvironmentVariableTarget]::User), '.format(nomalized_dest) +\n                        '[System.EnvironmentVariableTarget]::User)')\n    subprocess.run([\"powershell\", \"-Command\", add_path_command], shell=True, text=True)\n    env_updated = True\n\ntry:\n  subprocess.run([\"jam\", \"-v\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\nexcept FileNotFoundError:\n  print(\"jam.exe not found, installing jam...\")\n  jam_zip = 'jam-windows-x86_64.zip'\n  download_url(\"https://github.com/GaijinEntertainment/jam-G8/releases/download/2.5-G8-1.3-2024%2F04%2F01/jam-windows-x86_64.zip\")\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/'+jam_zip), 'r') as zip_file:\n    zip_file.extractall(dest_dir)\n\nif env_updated:\n  print(\"\\nDone. Please restart your command-line environment to apply the environment variables.\")\nelse:\n  print(\"\\nDone.\")\n"
        },
        {
          "name": "make_devtools_linux.py",
          "type": "blob",
          "size": 12.359375,
          "content": "#!/usr/bin/env python3\nimport sys\n\nif not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n  print(\"\\nERROR: Python 3.5 or a higher version is required to run this script.\")\n  exit(1)\nif not sys.platform.startswith('linux'):\n  print(\"\\nERROR: script is expected to be run on linux.\")\n  exit(1)\n\nimport subprocess\nimport pathlib\nimport os\nimport urllib\nimport ssl\nimport ctypes\nimport zipfile\nimport shutil\nimport tarfile\nimport platform\nimport glob\nimport re\nfrom urllib import request\n\nif len(sys.argv) != 2:\n  print('\\nUsage: make_devtools_linux.py DEVTOOLS_DEST_DIR\\nexample: python3 make_devtools_linux.py ~/devtools\\n')\n  exit(1)\n\n\nlinux_release_name = ''\nlinux_release_id = ''\nlinux_release_ver = ''\nlinux_arch_type = platform.uname().machine\n\nwith open('/etc/os-release', 'r') as file:\n  for val_pair in re.findall(r'(\\w+)=(.+)\\n', file.read()):\n    if val_pair[0] == 'NAME':\n      linux_release_name = val_pair[1]\n    elif val_pair[0] == 'ID':\n      linux_release_id = val_pair[1]\n    elif val_pair[0] == 'VERSION':\n      linux_release_ver = val_pair[1]\n  file.close()\n\nis_rosa_linux = (linux_release_id == 'rosa')\nis_astra_linux = \"Astra Linux\" in linux_release_name\nis_ubuntu = (\"Ubuntu\" in linux_release_name)\nis_centos = ('centos' in linux_release_id)\nis_altlinux = (linux_release_id == 'altlinux')\nis_elbrus_linux = ('elbrus' in linux_release_id)\nprint('Detected linux: {0} {1}  ({2}) arch={3}'.format(linux_release_name, linux_release_ver, linux_release_id, linux_arch_type))\n\ndef error(s):\n  print(\"\\nERROR: {0}\\n\".format(s))\n  exit(1)\n\ndef contains_spaces(s):\n  return ' ' in s\n\ndef contains_non_ascii(s):\n  try:\n    s.encode('ascii')\n  except UnicodeEncodeError:\n    return True\n  return False\n\ndest_dir = sys.argv[1].replace('\\\\', '/').rstrip('/')\n\nif contains_spaces(dest_dir):\n  error(\"The destination directory contains spaces, which are not allowed in a file path.\")\n\nif contains_non_ascii(dest_dir):\n  error(\"The destination directory contains non-ASCII characters.\")\n\nif not os.path.isabs(dest_dir):\n  error(\"The destination directory must be an absolute path.\")\n\n\ndef make_directory_symlink(src, dest):\n  try:\n    subprocess.run('ln -s {0} {1}'.format(os.path.normpath(src), os.path.normpath(dest)), shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    error(\"Symlink command failed with a non-zero exit code. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n  except OSError as e:\n    print(\"An OSError occurred. Symlink command may have failed. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n\ndef run(cmd):\n  try:\n    print(\"Running: {0}\".format(cmd))\n    subprocess.run(cmd, shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    print(\"subprocess.run failed with a non-zero exit code. Error: {0}\".format(e))\n  except OSError as e:\n    print(\"An OSError occurred, subprocess.run command may have failed. Error: {0}\".format(e))\n\n\nssl._create_default_https_context = ssl._create_unverified_context\n\ndef download_url2(url, file):\n  file = \"{0}/.packages/{1}\".format(dest_dir, file)\n  if not pathlib.Path(file).exists():\n    print(\"Downloading '{0}' to '{1}' ...\".format(url, file));\n    response = request.urlretrieve(url, file)\n  else:\n    print(\"Package '{0}' already exists\".format(file));\n\ndef download_url(url):\n  path, file = os.path.split(os.path.normpath(url))\n  download_url2(url, file)\n\npathlib.Path(dest_dir).mkdir(parents=True, exist_ok=True)\npathlib.Path(dest_dir+'/.packages').mkdir(parents=True, exist_ok=True)\n\npkg_to_install = ['nasm']\npkg_install_cmd = ''\nif is_rosa_linux:\n  pkg_install_cmd = 'dnf install'\n  pkg_to_install += ['python3-pip', 'gcc', 'gcc-c++', 'clang']\n  pkg_to_install += ['lib64x11-devel', 'lib64xrandr-devel', 'lib64fltk-devel', 'lib64xkbfile-devel', 'lib64udev-devel', 'lib64pulseaudio-devel', 'lib64alsa-oss-devel']\nelif is_altlinux:\n  pkg_install_cmd = 'apt-get install'\n  pkg_to_install += ['python3-module-pip']\n  pkg_to_install += ['libX11-devel', 'libXrandr-devel', 'libfltk-devel', 'libxkbfile-devel', 'libudev-devel', 'libpulseaudio-devel', 'libalsa-devel']\nelif is_elbrus_linux:\n  pkg_install_cmd = 'apt install'\n  pkg_to_install  = ['python3-pip']\n  pkg_to_install += ['libx11', 'libxrandr', 'fltk', 'libxkbfile', 'pulseaudio', 'alsa-lib']\nelif is_ubuntu:\n  pkg_install_cmd = 'apt install'\n  pkg_to_install += ['python3-pip', 'gcc', 'clang']\n  pkg_to_install += ['libx11-dev', 'libxrandr-dev', 'libfltk1.3-dev', 'libxkbfile-dev', 'libudev-dev', 'libpulse-dev']\nelif is_astra_linux:\n  pkg_install_cmd = 'apt install'\n  pkg_to_install += ['python3-pip', 'gcc-mozilla', 'clang-10']\n  pkg_to_install += ['libx11-dev', 'libxrandr-dev', 'libfltk1.3-dev', 'libxkbfile-dev', 'libudev-dev', 'libpulse-dev']\nelif is_centos:\n  pkg_install_cmd = 'yum install'\n  pkg_to_install += ['python3-pip', 'devtoolset-11', 'llvm-toolset-7.0']\n  pkg_to_install += ['libX11-devel', 'libXrandr-devel', 'libfltk-devel', 'libxkbfile-devel', 'libgudev1-devel', 'pulseaudio-libs-devel', 'alsa-lib-devel']\nelse:\n  pkg_to_install += ['python3-pip', 'gcc', 'gcc-c++', 'clang']\n  pkg_to_install += ['libx11-dev', 'libxrandr-dev', 'libfltk1.3-dev', 'libxkbfile-dev', 'libudev-dev', 'libpulse-dev', 'libalsa-devel']\n\nif pkg_install_cmd != '':\n  print('--- will try to install required packages:\\n  '+' '.join(pkg_to_install))\n  run('sudo {0} {1}'.format(pkg_install_cmd, ' '.join(pkg_to_install)))\nelse:\n  print('NOTE: you have to install these (or similar) packages manually:\\n  ' + ' '.join(pkg_to_install) + '\\n\\n')\n\nif is_rosa_linux:\n  if not pathlib.Path('/usr/lib64/libclang.so').exists() and pathlib.Path('/usr/lib64/libclang.so.12').exists():\n    run('sudo ln -s libclang.so.12 /usr/lib64/libclang.so')\n\n# python3\npython_dest_folder = dest_dir+'/python3'\nif pathlib.Path(python_dest_folder).exists():\n  print('=== Python 3 symlink found at {0}, skipping setup'.format(python_dest_folder))\nelse:\n  python_src_folder = os.path.dirname(sys.executable)\n  print('+++ Python 3 found at {0}'.format(python_src_folder))\n  make_directory_symlink(python_src_folder, python_dest_folder)\n\n  subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])\n  subprocess.run([sys.executable, '-m', 'pip', '--version'])\n  subprocess.run([sys.executable, '-m', 'pip', 'install', 'clang==14.0.6'])\n  subprocess.run([sys.executable, '-m', 'pip', 'install', 'cymbal'])\n\n\n# FMOD\nfmod_dest_folder = dest_dir+'/fmod-studio-2.xx.xx'\nif pathlib.Path(fmod_dest_folder).exists():\n  print('=== FMOD symlinks found at {0}, skipping setup'.format(fmod_dest_folder))\nelse:\n  for fmod_src_folder in glob.glob('{0}/fmodstudioapi2*linux'.format(os.environ['HOME'])):\n    if pathlib.Path(fmod_src_folder+'/api').exists():\n      print('+++ FMOD found at {0}'.format(fmod_src_folder))\n\n      pathlib.Path(fmod_dest_folder+'/core/linux64').mkdir(parents=True, exist_ok=True)\n      make_directory_symlink('\"{0}/api/core/inc\"'.format(fmod_src_folder), fmod_dest_folder+'/core/linux64/inc')\n      make_directory_symlink('\"{0}/api/core/lib\"'.format(fmod_src_folder), fmod_dest_folder+'/core/linux64/lib')\n\n      pathlib.Path(fmod_dest_folder+'/studio/linux64').mkdir(parents=True, exist_ok=True)\n      make_directory_symlink('\"{0}/api/studio/inc\"'.format(fmod_src_folder), fmod_dest_folder+'/studio/linux64/inc')\n      make_directory_symlink('\"{0}/api/studio/lib\"'.format(fmod_src_folder), fmod_dest_folder+'/studio/linux64/lib')\n      run('cp \"{0}/doc/LICENSE.TXT\" {1}'.format(fmod_src_folder, fmod_dest_folder))\n      run('cp \"{0}/doc/revision.txt\" {1}'.format(fmod_src_folder, fmod_dest_folder))\n      break\n  if not pathlib.Path(fmod_dest_folder).exists():\n    print('--- FMOD not found, creating stub folders')\n    print('consider downloading and installing https://www.fmod.com/download#fmodengine - Linux Download')\n    pathlib.Path(fmod_dest_folder+'/core/linux64/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/studio/linux64/inc').mkdir(parents=True, exist_ok=True)\n\n\n# DXC-1.7.2207\ndxc_dest_folder = dest_dir+'/DXC-1.7.2207'\nif pathlib.Path(dxc_dest_folder).exists():\n  print('=== DXC Jul 2022 found at {0}, skipping setup'.format(dxc_dest_folder))\nelse:\n  download_url('https://github.com/GaijinEntertainment/DXC-prebuilt/releases/download/dxc-1.7.2207/DXC-1.7.2207.tar.gz')\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/DXC-1.7.2207.tar.gz'), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    tar_file.close()\n    shutil.rmtree(dxc_dest_folder+'/lib/macosx')\n    shutil.rmtree(dxc_dest_folder+'/lib/win64')\n    print('+++ DXC Jul 2022 installed at {0}'.format(dxc_dest_folder))\n    if linux_arch_type == 'e2k':\n      print('!!! arch={0} differs from x86_64, you should rebuild {1} for\\n'\n            '    your arch and place result binary to {2}/lib/linux64/libdxcompiler.so\\n\\n'\n            .format(linux_arch_type, 'https://github.com/microsoft/DirectXShaderCompiler', dxc_dest_folder))\n\n# astcenc-4.5.1\nastcenc_dest_folder = dest_dir+'/astcenc-4.6.1'\nif pathlib.Path(astcenc_dest_folder).exists():\n  print('=== ASTC encoder 4.6.1 {0}, skipping setup'.format(astcenc_dest_folder))\nelif linux_arch_type == 'e2k':\n  pathlib.Path(astcenc_dest_folder+'/linux64').mkdir(parents=True, exist_ok=True)\n  print('+++ ASTC encoder 4.6.1 folder created at {0}'.format(astcenc_dest_folder))\n  print('!!! arch={0} differs from x86_64, you should rebuild {1}\\n'\n        '    for your arch and place result binary to {2}/linux64/astcenc-native\\n\\n'\n        .format(linux_arch_type, 'https://github.com/ARM-software/astc-encoder', astcenc_dest_folder))\nelse:\n  download_url('https://github.com/ARM-software/astc-encoder/releases/download/4.6.1/astcenc-4.6.1-linux-x64.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/astcenc-4.6.1-linux-x64.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir+'/astcenc-4.6.1')\n    os.rename(os.path.normpath(dest_dir+'/astcenc-4.6.1/bin'), os.path.normpath(dest_dir+'/astcenc-4.6.1/linux64'));\n    run('chmod 755 '+dest_dir+'/astcenc-4.6.1/linux64/astcenc*')\n    print('+++ ASTC encoder 4.6.1 installed at {0}'.format(astcenc_dest_folder))\n\n# ispc-v1.23.0\nispc_dest_folder = dest_dir+'/ispc-v1.23.0-linux'\nif pathlib.Path(ispc_dest_folder).exists():\n  print('=== ISPC v1.23.0 {0}, skipping setup'.format(ispc_dest_folder))\nelif linux_arch_type == 'e2k':\n  pathlib.Path(ispc_dest_folder).mkdir(parents=True, exist_ok=True)\n  print('+++ ISPC v1.23.0 skipped (stub created at {0})'.format(ispc_dest_folder))\n  print('!!! arch={0} differs from x86_64, you should rebuild {1}\\n'\n        '    for your arch and place result binary to {2}/bin/ispc\\n\\n'\n        .format(linux_arch_type, 'https://github.com/ispc/ispc', ispc_dest_folder))\nelse:\n  download_url('https://github.com/ispc/ispc/releases/download/v1.23.0/ispc-v1.23.0-linux-oneapi.tar.gz')\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/ispc-v1.23.0-linux-oneapi.tar.gz'), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    tar_file.close()\n    print('+++ ISPC v1.23.0 installed at {0}'.format(ispc_dest_folder))\n\n\ntry:\n  subprocess.run(['jam', '-v'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nexcept FileNotFoundError:\n  print(\"jam not found, installing jam...\")\n  jam_zip = 'jam-centOS-7-x86_64.tar.gz'\n  if linux_arch_type == 'e2k':\n    if is_altlinux:\n      jam_zip = 'jam-AltLinux-10-e2k-v3.tar.gz'\n    elif is_elbrus_linux:\n      jam_zip = 'jam-ElbrusLinux-8-e2k-v3.tar.gz'\n\n  download_url('https://github.com/GaijinEntertainment/jam-G8/releases/download/2.5-G8-1.3-2024%2F04%2F01/'+jam_zip)\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/'+jam_zip), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    print('--- will copy jam to /usr/local/bin using sudo:')\n    run('sudo cp '+dest_dir+'/jam /usr/local/bin/jam')\n\n# re-write platform.jam\nif pathlib.Path(\"prog\").exists():\n  with open('prog/platform.jam', 'w') as fd:\n    fd.write('_DEVTOOL = {0} ;\\n'.format(dest_dir))\n    if pathlib.Path(fmod_dest_folder+'/LICENSE.TXT').exists():\n      fd.write('FmodStudio = 2.xx.xx ;\\n')\n    else:\n      fd.write('FmodStudio = none ;\\n')\n    if linux_arch_type == 'e2k':\n      fd.write('PlatformArch = e2k ;\\n')\n      fd.write('PlatformSpec = gcc ;\\n')\n      fd.write('WError = no ;\\n')\n      fd.write('RemoveCompilerSwitches_linux/gcc = -mno-recip -minline-all-stringops -fconserve-space ;\\n')\n    if is_astra_linux:\n      fd.write('PlatformSpec = clang ;\\n')\n    if is_astra_linux or is_rosa_linux:\n      fd.write('MArch = -default- ; #remove it to build for haswell\\n') # to avoid building daNetGame for haswell arch\n    fd.close()\n"
        },
        {
          "name": "make_devtools_macOS.py",
          "type": "blob",
          "size": 8.4931640625,
          "content": "#!/usr/bin/env python3\nimport sys\n\nif not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n  print(\"\\nERROR: Python 3.5 or a higher version is required to run this script.\")\n  exit(1)\nif not sys.platform.startswith('darwin'):\n  print(\"\\nERROR: script is expected to be run on macOS.\")\n  exit(1)\n\nimport subprocess\nimport pathlib\nimport os\nimport urllib\nimport ssl\nimport ctypes\nimport shutil\nimport zipfile\nimport tarfile\nimport platform\nfrom urllib import request\n\nif len(sys.argv) != 2:\n  print('\\nUsage: make_devtools_macOS.py DEVTOOLS_DEST_DIR\\nexample: python3 make_devtools_macOS.py ~/devtools\\n')\n  exit(1)\n\nmac_proc_arm = (platform.processor() == 'arm')\n\ndef error(s):\n  print(\"\\nERROR: {0}\\n\".format(s))\n  exit(1)\n\ndef contains_spaces(s):\n  return ' ' in s\n\ndef contains_non_ascii(s):\n  try:\n    s.encode('ascii')\n  except UnicodeEncodeError:\n    return True\n  return False\n\ndest_dir = sys.argv[1].replace('\\\\', '/').rstrip('/')\n\nif contains_spaces(dest_dir):\n  error(\"The destination directory contains spaces, which are not allowed in a file path.\")\n\nif contains_non_ascii(dest_dir):\n  error(\"The destination directory contains non-ASCII characters.\")\n\nif not os.path.isabs(dest_dir):\n  error(\"The destination directory must be an absolute path.\")\n\n\ndef make_directory_symlink(src, dest):\n  try:\n    subprocess.run('ln -s {0} {1}'.format(os.path.normpath(src), os.path.normpath(dest)), shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    error(\"Symlink command failed with a non-zero exit code. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n  except OSError as e:\n    print(\"An OSError occurred. Symlink command may have failed. Error: {0}, Source = '{1}', Destination = '{2}'\".format(e, src, dest))\n\ndef run(cmd):\n  try:\n    print(\"Running: {0}\".format(cmd))\n    subprocess.run(cmd, shell = True, check = True)\n  except subprocess.CalledProcessError as e:\n    print(\"subprocess.run failed with a non-zero exit code. Error: {0}\".format(e))\n  except OSError as e:\n    print(\"An OSError occurred, subprocess.run command may have failed. Error: {0}\".format(e))\n\n\nssl._create_default_https_context = ssl._create_unverified_context\n\ndef download_url2(url, file):\n  file = \"{0}/.packages/{1}\".format(dest_dir, file)\n  if not pathlib.Path(file).exists():\n    print(\"Downloading '{0}' to '{1}' ...\".format(url, file));\n    response = request.urlretrieve(url, file)\n  else:\n    print(\"Package '{0}' already exists\".format(file));\n\ndef download_url(url):\n  path, file = os.path.split(os.path.normpath(url))\n  download_url2(url, file)\n\npathlib.Path(dest_dir).mkdir(parents=True, exist_ok=True)\npathlib.Path(dest_dir+'/.packages').mkdir(parents=True, exist_ok=True)\n\n# python3\npython_dest_folder = dest_dir+'/python3'\nif pathlib.Path(python_dest_folder).exists():\n  print('=== Python 3 symlink found at {0}, skipping setup'.format(python_dest_folder))\nelse:\n  python_src_folder = os.path.dirname(sys.executable)\n  print('+++ Python 3 found at {0}'.format(python_src_folder))\n  make_directory_symlink(python_src_folder, python_dest_folder)\n\n  subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])\n  subprocess.run([sys.executable, '-m', 'pip', '--version'])\n  subprocess.run([sys.executable, '-m', 'pip', 'install', 'clang==14.0.6'])\n  subprocess.run([sys.executable, '-m', 'pip', 'install', 'cymbal'])\n\n\n# nasm\nnasm_dest_folder = dest_dir+'/nasm'\nif pathlib.Path(nasm_dest_folder).exists():\n  print('=== NASM symlink found at {0}, skipping setup'.format(nasm_dest_folder))\nelse:\n  download_url('https://www.nasm.us/pub/nasm/releasebuilds/2.16/macosx/nasm-2.16-macosx.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/nasm-2.16-macosx.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir)\n    run('chmod 755 '+dest_dir+'/nasm-2.16/nasm')\n    run('chmod 755 '+dest_dir+'/nasm-2.16/ndisasm')\n    print('--- will copy nasm to /usr/local/bin using sudo:')\n    run('sudo cp '+dest_dir+'/nasm-2.16/nasm /usr/local/bin/nasm')\n    print('+++ NASM 2.16 installed at {0}'.format(nasm_dest_folder))\n\n\n# FMOD\nfmod_dest_folder = dest_dir+'/fmod-studio-2.xx.xx'\nif pathlib.Path(fmod_dest_folder).exists():\n  print('=== FMOD symlinks found at {0}, skipping setup'.format(fmod_dest_folder))\nelse:\n  fmod_src_folder = '{0}/FMOD Programmers API'.format(os.environ['HOME'])\n  if pathlib.Path(fmod_src_folder).exists():\n    print('+++ FMOD found at {0}'.format(fmod_src_folder))\n\n    pathlib.Path(fmod_dest_folder+'/core/macosx').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink('\"{0}/api/core/inc\"'.format(fmod_src_folder), fmod_dest_folder+'/core/macosx/inc')\n    make_directory_symlink('\"{0}/api/core/lib\"'.format(fmod_src_folder), fmod_dest_folder+'/core/macosx/lib')\n\n    pathlib.Path(fmod_dest_folder+'/studio/macosx').mkdir(parents=True, exist_ok=True)\n    make_directory_symlink('\"{0}/api/studio/inc\"'.format(fmod_src_folder), fmod_dest_folder+'/studio/macosx/inc')\n    make_directory_symlink('\"{0}/api/studio/lib\"'.format(fmod_src_folder), fmod_dest_folder+'/studio/macosx/lib')\n    run('cp \"{0}/doc/LICENSE.TXT\" {1}'.format(fmod_src_folder, fmod_dest_folder))\n    run('cp \"{0}/doc/revision.txt\" {1}'.format(fmod_src_folder, fmod_dest_folder))\n  else:\n    print('--- FMOD not found at {0}, creating stub folders'.format(fmod_src_folder))\n    print('consider downloading and installing https://www.fmod.com/download#fmodengine - Mac Download')\n    pathlib.Path(fmod_dest_folder+'/core/macosx/inc').mkdir(parents=True, exist_ok=True)\n    pathlib.Path(fmod_dest_folder+'/studio/macosx/inc').mkdir(parents=True, exist_ok=True)\n\n\n# DXC-1.7.2207\ndxc_dest_folder = dest_dir+'/DXC-1.7.2207'\nif pathlib.Path(dxc_dest_folder).exists():\n  print('=== DXC Jul 2022 found at {0}, skipping setup'.format(dxc_dest_folder))\nelse:\n  download_url('https://github.com/GaijinEntertainment/DXC-prebuilt/releases/download/dxc-1.7.2207/DXC-1.7.2207.tar.gz')\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/DXC-1.7.2207.tar.gz'), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    tar_file.close()\n    shutil.rmtree(dxc_dest_folder+'/lib/linux64')\n    shutil.rmtree(dxc_dest_folder+'/lib/win64')\n    print('+++ DXC Jul 2022 installed at {0}'.format(dxc_dest_folder))\n\n# astcenc-4.5.1\nastcenc_dest_folder = dest_dir+'/astcenc-4.6.1'\nif pathlib.Path(astcenc_dest_folder).exists():\n  print('=== ASTC encoder 4.6.1 {0}, skipping setup'.format(astcenc_dest_folder))\nelse:\n  download_url('https://github.com/ARM-software/astc-encoder/releases/download/4.6.1/astcenc-4.6.1-macos-universal.zip')\n  with zipfile.ZipFile(os.path.normpath(dest_dir+'/.packages/astcenc-4.6.1-macos-universal.zip'), 'r') as zip_file:\n    zip_file.extractall(dest_dir+'/astcenc-4.6.1')\n    os.rename(os.path.normpath(dest_dir+'/astcenc-4.6.1/bin'), os.path.normpath(dest_dir+'/astcenc-4.6.1/macosx'));\n    run('chmod 755 '+dest_dir+'/astcenc-4.6.1/macosx/astcenc*')\n    print('+++ ASTC encoder 4.6.1 installed at {0}'.format(astcenc_dest_folder))\n\n# ispc-v1.23.0\nispc_dest_folder = dest_dir+'/ispc-v1.23.0-macOS.x86_64'\nif pathlib.Path(ispc_dest_folder).exists():\n  print('=== ISPC v1.23.0 {0}, skipping setup'.format(ispc_dest_folder))\nelse:\n  download_url('https://github.com/ispc/ispc/releases/download/v1.23.0/ispc-v1.23.0-macOS.universal.tar.gz')\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/ispc-v1.23.0-macOS.universal.tar.gz'), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    tar_file.close()\n    print('+++ ISPC v1.23.0 installed at {0}'.format(ispc_dest_folder))\n\n\ntry:\n  subprocess.run([\"jam\", \"-v\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\nexcept FileNotFoundError:\n  print(\"jam not found, installing jam...\")\n  jam_zip = 'jam-macOS-11.0-arm64.tar.gz' if mac_proc_arm else 'jam-macOS-10.9-x64_86.tar.gz'\n  download_url('https://github.com/GaijinEntertainment/jam-G8/releases/download/2.5-G8-1.3-2024%2F04%2F01/'+jam_zip)\n  with tarfile.open(os.path.normpath(dest_dir+'/.packages/'+jam_zip), 'r:gz') as tar_file:\n    tar_file.extractall(dest_dir)\n    run('chmod 755 '+dest_dir+'/jam')\n    print('--- will copy jam to /usr/local/bin using sudo:')\n    run('sudo cp '+dest_dir+'/jam /usr/local/bin/jam')\n\n# re-write platform.jam\nif pathlib.Path(\"prog\").exists():\n  with open('prog/platform.jam', 'w') as fd:\n    fd.write('_DEVTOOL = {0} ;\\n'.format(dest_dir))\n    if pathlib.Path(fmod_dest_folder+'/LICENSE.TXT').exists():\n      fd.write('FmodStudio = 2.xx.xx ;\\n')\n    else:\n      fd.write('FmodStudio = none ;\\n')\n    fd.close()\n  print('--- will prepare {0}/mac folder using jamfile:'.format(dest_dir))\n  run('sudo jam -sRoot=. -f prog/engine/kernel/jamfile mkdevtools');\n"
        },
        {
          "name": "outerSpace",
          "type": "tree",
          "content": null
        },
        {
          "name": "prog",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}