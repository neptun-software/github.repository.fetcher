{
  "metadata": {
    "timestamp": 1736565620386,
    "page": 502,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "borglab/gtsam",
      "stars": 2697,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0205078125,
          "content": "BasedOnStyle: Google\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.384765625,
          "content": "/build*\n/debug*\n.idea\n*.pyc\n*.DS_Store\n*.swp\n/examples/Data/dubrovnik-3-7-pre-rewritten.txt\n/examples/Data/pose2example-rewritten.txt\n/examples/Data/pose3example-rewritten.txt\n*.txt.user\n*.txt.user.6d59f0c\n*.pydevproject\n.vscode\n.env\n/.vs/\n/CMakeSettings.json\n# for QtCreator:\nCMakeLists.txt.user*\nxcode/\n/Dockerfile\n/python/gtsam/notebooks/.ipynb_checkpoints/ellipses-checkpoint.ipynb\n.cache/\n"
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 2.3681640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>gtsam</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>?name?</key>\n\t\t\t\t\t<value></value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.append_environment</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.autoBuildTarget</key>\n\t\t\t\t\t<value>all</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.buildArguments</key>\n\t\t\t\t\t<value>-j4</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.buildCommand</key>\n\t\t\t\t\t<value>make</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.buildLocation</key>\n\t\t\t\t\t<value>${ProjDirPath}/build</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>\n\t\t\t\t\t<value>clean</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.contents</key>\n\t\t\t\t\t<value>org.eclipse.cdt.make.core.activeConfigSettings</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableAutoBuild</key>\n\t\t\t\t\t<value>false</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableCleanBuild</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableFullBuild</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.fullBuildTarget</key>\n\t\t\t\t\t<value>all</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.stopOnError</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n</projectDescription>\n"
        },
        {
          "name": ".settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.16015625,
          "content": "cmake_minimum_required(VERSION 3.9...3.29)\nif (POLICY CMP0167)\ncmake_policy(SET CMP0167 OLD) # Don't complain about boost\nendif()\n\n# Set the version number for the library\nset (GTSAM_VERSION_MAJOR 4)\nset (GTSAM_VERSION_MINOR 3)\nset (GTSAM_VERSION_PATCH 0)\nset (GTSAM_PRERELEASE_VERSION \"a0\")\nmath (EXPR GTSAM_VERSION_NUMERIC \"10000 * ${GTSAM_VERSION_MAJOR} + 100 * ${GTSAM_VERSION_MINOR} + ${GTSAM_VERSION_PATCH}\")\n\nif (\"${GTSAM_PRERELEASE_VERSION}\" STREQUAL \"\")\n    set (GTSAM_VERSION_STRING \"${GTSAM_VERSION_MAJOR}.${GTSAM_VERSION_MINOR}.${GTSAM_VERSION_PATCH}\")\nelse()\n    set (GTSAM_VERSION_STRING \"${GTSAM_VERSION_MAJOR}.${GTSAM_VERSION_MINOR}${GTSAM_PRERELEASE_VERSION}\")\nendif()\n\nproject(GTSAM\n        LANGUAGES CXX C\n        VERSION \"${GTSAM_VERSION_MAJOR}.${GTSAM_VERSION_MINOR}.${GTSAM_VERSION_PATCH}\")\n\nset (CMAKE_PROJECT_VERSION_MAJOR ${GTSAM_VERSION_MAJOR})\nset (CMAKE_PROJECT_VERSION_MINOR ${GTSAM_VERSION_MINOR})\nset (CMAKE_PROJECT_VERSION_PATCH ${GTSAM_VERSION_PATCH})\n\n###############################################################################\n# Gather information, perform checks, set defaults\n\nif(MSVC)\n  set(MSVC_LINKER_FLAGS \"/FORCE:MULTIPLE\")\n  set(CMAKE_EXE_LINKER_FLAGS ${MSVC_LINKER_FLAGS})\n  set(CMAKE_MODULE_LINKER_FLAGS ${MSVC_LINKER_FLAGS})\n  set(CMAKE_SHARED_LINKER_FLAGS ${MSVC_LINKER_FLAGS})\nendif()\n\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH}\" \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\ninclude(GtsamMakeConfigFile)\ninclude(GNUInstallDirs)\n\n# guard against in-source builds\nif(${GTSAM_SOURCE_DIR} STREQUAL ${GTSAM_BINARY_DIR})\n  message(FATAL_ERROR \"In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. \")\nendif()\n\ninclude(cmake/HandleGeneralOptions.cmake)   # CMake build options\n\n# Load build type flags and default to Debug mode\ninclude(GtsamBuildTypes)\n\n# Use macros for creating tests/timing scripts\ninclude(GtsamTesting)\ninclude(GtsamPrinting)\n\n############### Decide on BOOST ######################################\n# Enable or disable serialization with GTSAM_ENABLE_BOOST_SERIALIZATION\noption(GTSAM_ENABLE_BOOST_SERIALIZATION \"Enable Boost serialization\" ON)\noption(GTSAM_USE_BOOST_FEATURES \"Enable Features that use Boost\" ON)\n\nif(GTSAM_ENABLE_BOOST_SERIALIZATION OR GTSAM_USE_BOOST_FEATURES)\ninclude(cmake/HandleBoost.cmake)\nendif()\n######################################################################\n\n# Other Libraries:\ninclude(cmake/HandleCCache.cmake)           # ccache\ninclude(cmake/HandleCPack.cmake)            # CPack\ninclude(cmake/HandleEigen.cmake)            # Eigen3\ninclude(cmake/HandleMetis.cmake)            # metis\ninclude(cmake/HandleCephes.cmake)           # cephes\ninclude(cmake/HandleMKL.cmake)              # MKL\ninclude(cmake/HandleOpenMP.cmake)           # OpenMP\ninclude(cmake/HandlePerfTools.cmake)        # Google perftools\ninclude(cmake/HandlePython.cmake)           # Python options and commands\ninclude(cmake/HandleTBB.cmake)              # TBB\ninclude(cmake/HandleUninstall.cmake)        # for \"make uninstall\"\n\ninclude(cmake/HandleAllocators.cmake)       # Must be after tbb, pertools\n\ninclude(cmake/HandleGlobalBuildFlags.cmake) # Build flags\n\n###############################################################################\n# Add components\n\n# Build CppUnitLite\nadd_subdirectory(CppUnitLite)\n\n# Build GTSAM library\nadd_subdirectory(gtsam)\n\n# Build Tests\nadd_subdirectory(tests)\n\n# Build examples\nadd_subdirectory(examples)\n\n# Build timing\nadd_subdirectory(timing)\n\n# Build gtsam_unstable\nif (GTSAM_BUILD_UNSTABLE)\n  add_subdirectory(gtsam_unstable)\nendif()\n\n# This is the new wrapper\nif(GTSAM_BUILD_PYTHON OR GTSAM_INSTALL_MATLAB_TOOLBOX)\n    # Need to set this for the wrap package so we don't use the default value.\n    set(WRAP_PYTHON_VERSION ${GTSAM_PYTHON_VERSION}\n        CACHE STRING \"The Python version to use for wrapping\")\n    # Set the include directory for matlab.h\n    set(GTWRAP_INCLUDE_NAME \"wrap\")\n\n    # Copy matlab.h to the correct folder.\n    configure_file(${PROJECT_SOURCE_DIR}/wrap/matlab.h\n               ${PROJECT_BINARY_DIR}/wrap/matlab.h COPYONLY)\n\n    add_subdirectory(wrap)\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/wrap/cmake\")\nendif()\n\n# Python toolbox\nif(GTSAM_BUILD_PYTHON)\n    add_subdirectory(python)\nendif()\n\n# Matlab toolbox\nif(GTSAM_INSTALL_MATLAB_TOOLBOX)\n    add_subdirectory(matlab)\nendif()\n\n# Install config and export files\nGtsamMakeConfigFile(GTSAM \"${CMAKE_CURRENT_SOURCE_DIR}/gtsam_extra.cmake.in\")\nexport(TARGETS ${GTSAM_EXPORTED_TARGETS} FILE GTSAM-exports.cmake)\n\nif (GTSAM_BUILD_UNSTABLE)\n    GtsamMakeConfigFile(GTSAM_UNSTABLE \"${CMAKE_CURRENT_SOURCE_DIR}/gtsam_extra.cmake.in\")\n    export(TARGETS ${GTSAM_UNSTABLE_EXPORTED_TARGETS} FILE GTSAM_UNSTABLE-exports.cmake)\nendif()\n\n# Check for doxygen availability - optional dependency\nfind_package(Doxygen)\n\n# Doxygen documentation - enabling options in subfolder\nif (DOXYGEN_FOUND)\n    add_subdirectory(doc)\nendif()\n\n# CMake Tools\nadd_subdirectory(cmake)\n\n# Print configuration variables\ninclude(cmake/HandlePrintConfiguration.cmake)\n\n# Print warnings at the end\ninclude(cmake/HandleFinalChecks.cmake)\n\n# Include CPack *after* all flags\ninclude(CPack)\n"
        },
        {
          "name": "CppUnitLite",
          "type": "tree",
          "content": null
        },
        {
          "name": "DEVELOP.md",
          "type": "blob",
          "size": 0.6142578125,
          "content": "# Information for Developers\n\n### Coding Conventions\n\n* Classes are Uppercase, methods and functions lowerMixedCase.\n* Apart from those naming conventions, we adopt Google C++ style.\n* Use meaningful variable names, e.g. `measurement` not `msm`, avoid abbreviations.\n\n\n### Windows\n\nOn Windows it is necessary to explicitly export all functions from the library which should be externally accessible. To do this, include the macro `GTSAM_EXPORT` in your class or function definition.\n\nFor example:\n```cpp\nclass GTSAM_EXPORT MyClass { ... };\n\nGTSAM_EXPORT return_type myFunction();\n```\n\nMore details [here](Using-GTSAM-EXPORT.md).\n"
        },
        {
          "name": "GTSAM-Concepts.md",
          "type": "blob",
          "size": 11.4052734375,
          "content": "GTSAM Concepts\n==============\n\nAs discussed in [Generic Programming Techniques](http://www.boost.org/community/generic_programming.html), concepts define\n\n* associated types\n* valid expressions, like functions and values\n* invariants\n* complexity guarantees\n\nBelow we discuss the most important concepts use in GTSAM, and after that we discuss how they are implemented/used/enforced.\n\n\nManifold\n--------\n\nTo optimize over continuous types, we assume they are manifolds. This is central to GTSAM and hence discussed in some more detail below.\n\n[Manifolds](http://en.wikipedia.org/wiki/Manifold#Charts.2C_atlases.2C_and_transition_maps) and [charts](http://en.wikipedia.org/wiki/Manifold#Charts.2C_atlases.2C_and_transition_maps) are intimately linked concepts. We are only interested here in [differentiable manifolds](http://en.wikipedia.org/wiki/Differentiable_manifold#Definition), continuous spaces that can be locally approximated *at any point* using a local vector space, called the [tangent space](http://en.wikipedia.org/wiki/Tangent_space). A *chart* is an invertible map from the manifold to that tangent space.\n\nIn GTSAM, all properties and operations needed to use a type must be defined through template specialization of the struct `gtsam::traits`. Concept checks are used to check that all required functions are implemented.\nIn detail, we ask that the following items are defined in the traits object (although, not all are needed for optimization):\n\n* values:\n   * `inline constexpr static auto dimension = D;`, a constexpr that indicates the dimensionality *n* of the manifold. In Eigen-fashion, we also support manifolds whose dimensionality is only defined at runtime, by specifying the value -1.\n* types:\n    * `TangentVector`, type that lives in tangent space. This will almost always be an `Eigen::Matrix<double,n,1>`.\n    * `ChartJacobian`, a typedef for `OptionalJacobian<dimension, dimension>`.\n    * `ManifoldType`, a pointer back to the type.\n    * `structure_category`, a tag type that defines what requirements the type fulfills, and therefore what requirements this traits class must fulfill. It should be defined to be one of the following: \n        * `gtsam::traits::manifold_tag` -- Everything in this list is expected\n        * `gtsam::traits::group_tag` -- The functions defined under **Groups** below.\n        * `gtsam::traits::lie_group_tag` -- Everything in this list is expected, plus the functions defined under **Groups**, and **Lie Groups** below.\n        * `gtsam::traits::vector_space_tag` -- Everything in this list is expected, plus the functions defined under **Groups**, and **Lie Groups** below.\n* valid expressions:\n    * `size_t dim = traits<T>::GetDimension(p);` static function should be defined. This is mostly useful if the size is not known at compile time.\n    * `v = traits<T>::Local(p,q)`, the chart, from manifold to tangent space, think of it as *q (-) p*, where *p* and *q* are elements of the manifold and the result, *v* is an element of the vector space.\n    * `p = traits<T>::Retract(p,v)`, the inverse chart, from tangent space to manifold, think of it as *p (+) v*, where *p* is an element of the manifold and the result, *v* is an element of the vector space.\n* invariants\n    * `Retract(p, Local(p,q)) == q`\n    * `Local(p, Retract(p, v)) == v`\n\nGroup\n-----\nA [group](\"http://en.wikipedia.org/wiki/Group_(mathematics)\"\") should be well known from grade school :-), and provides a type with a composition operation that is closed, associative, has an identity element, and an inverse for each element. The following should be added to the traits class for a group:\n\n* valid expressions:\n    * `r = traits<T>::Compose(p,q)`, where *p*, *q*, and *r* are elements of the manifold. \n    * `q = traits<T>::Inverse(p)`, where *p* and*q* are elements of the manifold. \n    * `r = traits<T>::Between(p,q)`, where *p*, *q*, and *r* are elements of the manifold. \n* static members:\n    * `traits<T>::Identity`, a static const member that represents the group's identity element.\n* invariants:\n    * `Compose(p,Inverse(p)) == Identity`\n    * `Compose(p,Between(p,q)) == q`\n    * `Between(p,q) == Compose(Inverse(p),q)`\nThe `gtsam::group::traits` namespace defines the following:\n* values:\n    * `traits<T>::Identity` -- The identity element for this group stored as a static const.\n    * `traits<T>::group_flavor` -- the flavor of this group's `compose()` operator, either:\n         *  `gtsam::traits::group_multiplicative_tag` for multiplicative operator syntax ,or \n         * `gtsam::traits::group_additive_tag` for additive operator syntax.\n\nWe do *not* at this time support more than one composition operator per type. Although mathematically possible, it is hardly ever needed, and the machinery to support it would be burdensome and counter-intuitive. \n\nAlso, a type should provide either multiplication or addition operators depending on the flavor of the operation. To distinguish between the two, we will use a tag (see below).\n\nLie Group\n---------\n\nA Lie group is both a manifold *and* a group. Hence, a LIE_GROUP type should implements both MANIFOLD and GROUP concepts. \nHowever, we now also need to be able to evaluate the derivatives of compose and inverse. \nHence, we have the following extra valid static functions defined in the struct `gtsam::traits<T>`:\n\n* `r = traits<T>::Compose(p,q,Hp,Hq)`\n* `q = traits<T>::Inverse(p,Hp)`\n* `r = traits<T>::Between(p,q,Hp,Hq)`\n\nwhere above the *H* arguments stand for optional Jacobian arguments. \nThat makes it possible to create factors implementing priors (PriorFactor) or relations between two instances of a Lie group type (BetweenFactor).\n\nIn addition, a Lie group has a Lie algebra, which affords two extra valid expressions:\n\n* `v = traits<T>::Logmap(p,Hp)`, the log map, with optional Jacobian\n* `p = traits<T>::Expmap(v,Hv)`, the exponential map, with optional Jacobian\n\nNote that in the Lie group case, the usual valid expressions for Retract and Local can be generated automatically, e.g.\n\n```\n    T Retract(p,v,Hp,Hv) {\n      T q = Expmap(v,Hqv);\n      T r = Compose(p,q,Hrp,Hrq);\n      Hv = Hrq * Hqv; // chain rule\n      return r;\n    }\n```\n\nFor Lie groups, the `exponential map` above is the most obvious mapping: it \nassociates straight lines in the tangent space with geodesics on the manifold \n(and it's inverse, the log map). However, there are several cases in which we deviate from this:\n\nHowever, the exponential map is unnecessarily expensive for use in optimization. Hence, in GTSAM there is the option to provide a cheaper chart by means of the `ChartAtOrigin` struct in a class. This is done for *SE(2)*, *SO(3)* and *SE(3)* (see `Pose2`, `Rot3`, `Pose3`)\n\nMost Lie groups we care about are *Matrix groups*, continuous sub-groups of *GL(n)*, the group of *n x n* invertible matrices. In this case, a lot of the derivatives calculations needed can be standardized, and this is done by the `LieGroup` superclass. You only need to provide an `AdjointMap` method.\n\nA CRTP helper class `LieGroup` is available that can take a class and create some of the Lie group methods automatically. The class needs:\n\n* operator* : implements group operator\n* inverse: implements group inverse\n* AdjointMap: maps tangent vectors according to group element\n* Expmap/Logmap: exponential map and its inverse\n* ChartAtOrigin: struct where you define Retract/Local at origin\n\nTo use, simply derive, but also say `using LieGroup<Class,N>::inverse` so you get an inverse with a derivative.\n\nFinally, to create the traits automatically you can use `internal::LieGroupTraits<Class>`\n\nVector Space\n------------\n\nWhile vector spaces are in principle also manifolds, it is overkill to think about charts etc. Really, we should simply think about vector addition and subtraction. I.e.where\n\n  * `Identity == 0`\n  * `Inverse(p) == -p`\n  * `Compose(p,q) == p+q`\n  * `Between(p,q) == q-p`\n  * `Local(q) == p-q`   \n  * `Retract(v) == p+v`\n\nThis considerably simplifies certain operations. A `VectorSpace` superclass is available to implement the traits. Types that are vector space models include `Matrix`, `Vector`, any fixed or dynamic Eigen Matrix, `Point2`, and `Point3`.\n\nTestable\n--------\nUnit tests heavily depend on the following two functions being defined for all types that need to be tested:\n\n* valid expressions:\n    * `Print(p,s)` where s is an optional string\n    * `Equals(p,q,tol)` where tol is an optional (double) tolerance \n\nImplementation\n==============\n\nGTSAM Types start with Uppercase, e.g., `gtsam::Point2`, and are models of the \nTESTABLE, MANIFOLD, GROUP, LIE_GROUP, and VECTOR_SPACE concepts.\n\n`gtsam::traits` is our way to associate these concepts with types, \nand we also define a limited number of `gtsam::tags` to select the correct implementation\nof certain functions at compile time (tag dispatching). \n\nTraits\n------\n\nHowever, a base class is not a good way to implement/check the other concepts, as we would like these\nto apply equally well to types that are outside GTSAM control, e.g., `Eigen::VectorXd`. This is where\n[traits](http://www.boost.org/doc/libs/1_57_0/libs/type_traits/doc/html/boost_typetraits/background.html) come in.\n\nWe use Eigen-style or STL-style traits, that define *many* properties at once. \n\nNote that not everything that makes a concept is defined by traits. Valid expressions such as traits<T>::Compose are\ndefined simply as static functions within the traits class.\nFinally, for GTSAM types, it is perfectly acceptable (and even desired) to define associated types as internal types, \nrather than having to use traits internally.\n\nConcept Checks\n--------------\n\nBoost provides a nice way to check whether a given type satisfies a concept. For example, the following\n\n    GTSAM_CONCEPT_ASSERT(IsVectorSpace<Point2>)\n    \nasserts that Point2 indeed is a model for the VectorSpace concept.\n\nFuture Concepts\n===============\n\n\nGroup Action\n------------\n\nGroup actions are concepts in and of themselves that can be concept checked (see below).\nIn particular, a group can *act* on another space.\nFor example, the [cyclic group of order 6](http://en.wikipedia.org/wiki/Cyclic_group) can rotate 2D vectors around the origin:\n\n    q = R(i)*p\n    where R(i) = R(60)^i, where R(60) rotates by 60 degrees\n    \nHence, we formalize by the following extension of the concept:\n\n* valid expressions:\n    * `q = traits<T>::Act(g,p)`, for some instance, *p*,  of a space *S*, that can be acted upon by the group element *g* to produce *q* in *S*.\n    * `q = traits<T>::Act(g,p,Hp)`, if the space acted upon is a continuous differentiable manifold. *\n  \nIn the latter case, if *S* is an n-dimensional manifold, *Hp* is an output argument that should be \nfilled with the *nxn* Jacobian matrix of the action with respect to a change in *p*. It typically depends\non the group element *g*, but in most common example will *not* depend on the value of *p*. For example, in \nthe cyclic group example above, we simply have\n\n    Hp = R(i)\n  \nNote there is no derivative of the action with respect to a change in g. That will only be defined\nfor Lie groups, which we introduce now.\n\n\nLie Group Action\n----------------\n\nWhen a Lie group acts on a space, we have two derivatives to care about:\n\n  * `gtasm::manifold::traits<T>::act(g,p,Hg,Hp)`, if the space acted upon is a continuous differentiable manifold.\n\nAn example is a *similarity transform* in 3D, which can act on 3D space, like\n\n    q = s*R*p + t\n    \nNote that again the derivative in *p*,  *Hp* is simply *s R*, which depends on *g* but not on *p*. \nThe derivative  in *g*,  *Hg*, is in general more complex.\n\nFor now, we won't care about Lie groups acting on non-manifolds.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 10.748046875,
          "content": "# Quickstart\n\nIn the root library folder execute:\n\n```sh\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make check # (optional, runs unit tests)\n$ make install\n```\n\n## Important Installation Notes\n\n1. GTSAM requires the following libraries to be installed on your system:\n    - BOOST version 1.65 or greater (install through Linux repositories or MacPorts). Please see [Boost Notes](#boost-notes) for version recommendations based on your compiler.\n\n    - Cmake version 3.0 or higher\n    - Support for XCode 4.3 command line tools on Mac requires CMake 2.8.8 or higher\n\n    Optional dependent libraries:\n     - If TBB is installed and detectable by CMake GTSAM will use it automatically.\n       Ensure that CMake prints \"Use Intel TBB : Yes\".  To disable the use of TBB,\n       disable the CMake flag `GTSAM_WITH_TBB` (enabled by default) by providing\n       the argument `-DGTSAM_WITH_TBB=OFF` to `cmake`.  On Ubuntu, TBB may be\n       installed from the Ubuntu repositories, and for other platforms it may be\n       downloaded from https://www.threadingbuildingblocks.org/\n     - GTSAM may be configured to use MKL by toggling `GTSAM_WITH_EIGEN_MKL` and\n       `GTSAM_WITH_EIGEN_MKL_OPENMP` to `ON`; however, best performance is usually\n       achieved with MKL disabled. We therefore advise you to benchmark your problem\n       before using MKL.\n\n    Tested compilers:\n\n    - GCC 4.2-7.3\n    - OS X Clang 2.9-10.0\n    - OS X GCC 4.2\n    - MSVC 2010, 2012, 2017\n\n    Tested systems:\n\n    - Ubuntu 16.04 - 18.04\n    - MacOS 10.6 - 10.14\n    - Windows 7, 8, 8.1, 10\n\n2. GTSAM makes extensive use of debug assertions, and we highly recommend you work\nin Debug mode while developing (enabled by default). Likewise, it is imperative\nthat you switch to release mode when running finished code and for timing. GTSAM\nwill run up to 10x faster in Release mode! See the end of this document for\nadditional debugging tips.\n\n3. GTSAM has Doxygen documentation. To generate, run 'make doc' from your\nbuild directory after setting the `GTSAM_BUILD_DOCS` and `GTSAM_BUILD_[HTML|LATEX]` cmake flags.\n\n4. The instructions below install the library to the default system install path and\nbuild all components. From a terminal, starting in the root library folder,\nexecute commands as follows for an out-of-source build:\n\n  ```sh\n  $ mkdir build\n  $ cd build\n  $ cmake ..\n  $ make check (optional, runs unit tests)\n  $ make install\n  ```\n\n  This will build the library and unit tests, run all of the unit tests,\n  and then install the library itself.\n\n## Boost Notes\n\nVersions of Boost prior to 1.65 have a known bug that prevents proper \"deep\" serialization of objects, which means that objects encapsulated inside other objects don't get serialized.\nThis is particularly seen when using `clang` as the C++ compiler.\n\nFor this reason we recommend Boost>=1.65, and recommend installing it through alternative channels when it is not available through your operating system's primary package manager.\n\n## Known Issues\n\n- MSVC 2013 is not yet supported because it cannot build the serialization module of Boost 1.55 (or earlier).\n\n# Windows Installation\n\nThis section details how to build a GTSAM `.sln` file using Visual Studio.\n\n### Prerequisites\n\n- Visual Studio with C++ CMake tools for Windows\n- All the other pre-requisites listed above.\n\n### Steps\n\n1. Open Visual Studio.\n2. Select `Open a local folder` and select the GTSAM source directory.\n3. Go to `Project -> CMake Settings`.\n  - (Optional) Set `Configuration name`.\n  - (Optional) Set `Configuration type`.\n  - Set the `Toolset` to `msvc_x64_x64`. If you know what toolset you require, then skip this step.\n  - Update the `Build root` to `${projectDir}\\build\\${name}`.\n  - You can optionally create a new configuration for a `Release` build.\n  - Set the necessary CMake variables for your use case.\n  - Click on `Show advanced settings`.\n  - For `CMake generator`, select a version which matches `Visual Studio <Version> <Year> Win64`, e.g. `Visual Studio 16 2019 Win64`.\n  - Save the settings (Ctrl + S).\n4. Click on `Project -> Generate Cache`. This will generate the CMake build files (as seen in the Output window).\n5. The last step will generate a `GTSAM.sln` file in the `build` directory. At this point, GTSAM can be used as a regular Visual Studio project.\n\n\n# CMake Configuration Options and Details\n\nGTSAM has a number of options that can be configured, which is best done with\none of the following:\n\n  - ccmake      the curses GUI for cmake\n  - cmake-gui   a real GUI for cmake\n\n## Important Options:\n\n#### CMAKE_BUILD_TYPE\nWe support several build configurations for GTSAM (case insensitive)\n\n```cmake -DCMAKE_BUILD_TYPE=[Option] ..```\n\n  - Debug (default)  All error checking options on, no optimization. Use for development.\n  - Release          Optimizations turned on, no debug symbols.\n  - Timing           Adds ENABLE_TIMING flag to provide statistics on operation\n  - Profiling        Standard configuration for use during profiling\n  - RelWithDebInfo   Same as Release, but with the -g flag for debug symbols\n\n#### CMAKE_INSTALL_PREFIX\n\nThe install folder. The default is typically `/usr/local/`.\nTo configure to install to your home directory, you could execute:\n\n```cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME ..```\n\n#### GTSAM_TOOLBOX_INSTALL_PATH\n\nThe Matlab toolbox will be installed in a subdirectory\nof this folder, called 'gtsam'.\n\n```cmake -DGTSAM_TOOLBOX_INSTALL_PATH:PATH=$HOME/toolbox ..```\n\n#### GTSAM_BUILD_CONVENIENCE_LIBRARIES\n\nThis is a build option to allow for tests in subfolders to be linked against convenience libraries rather than the full libgtsam.\nSet with the command line as follows:\n\n```cmake -DGTSAM_BUILD_CONVENIENCE_LIBRARIES:OPTION=ON ..```\n  - ON (Default): This builds convenience libraries and links tests against them. This   \t\t\t\t option is suggested for gtsam developers, as it is possible to build and run tests without first building the rest of the library, and speeds up compilation for a single test. The downside of this option is that it will build the entire library again to build the full libgtsam library, so build/install will be slower.\n  - OFF: This will build all of libgtsam before any of the tests, and then link all of the tests at once. This option is best for users of GTSAM, as it avoids rebuilding the entirety of gtsam an extra time.\n\n#### GTSAM_BUILD_UNSTABLE\n\nEnable build and install for libgtsam_unstable library.\nSet with the command line as follows:\n\n```cmake -DGTSAM_BUILD_UNSTABLE:OPTION=ON ..```\n\n  ON:             When enabled, libgtsam_unstable will be built and installed with the same options as libgtsam.  In addition, if tests are enabled, the unit tests will be built as well.  The Matlab toolbox will also be generated if the matlab toolbox is enabled, installing into a folder called `gtsam_unstable`.\n  OFF (Default)  If disabled, no `gtsam_unstable` code will be included in build or install.\n\n## Convenience Options:\n\n#### GTSAM_BUILD_EXAMPLES_ALWAYS\n\nWhether or not to force building examples, can be true or false.\n\n#### GTSAM_BUILD_TESTS\n\nWhether or not to build tests, can be true or false.\n\n## Check\n\n`make check` will build and run all of the tests. Note that the tests will only be\nbuilt when using the \"check\" targets, to prevent `make install` from building the tests\nunnecessarily. You can also run `make timing` to build all of the timing scripts.\nTo run check on a particular module only, run `make check.[subfolder]`, so to run\njust the geometry tests, run `make check.geometry`. Individual tests can be run by\nappending `.run` to the name of the test, for example, to run testMatrix, run\n`make testMatrix.run`.\n\nMEX_COMMAND: Path to the mex compiler. Defaults to assume the path is included in your shell's PATH environment variable. mex is installed with matlab at `$MATLABROOT/bin/mex`\n\n$MATLABROOT can be found by executing the command `matlabroot` in MATLAB\n\n## Performance\n\nHere are some tips to get the best possible performance out of GTSAM.\n\n1. Build in `Release` mode. GTSAM will run up to 10x faster compared to `Debug` mode.\n2. Enable TBB. On modern processors with multiple cores, this can easily speed up\n    optimization by 30-50%. Please note that this may not be true for very small\n    problems where the overhead of dispatching work to multiple threads outweighs\n    the benefit. We recommend that you benchmark your problem with/without TBB.\n3. Use `GTSAM_BUILD_WITH_MARCH_NATIVE`. A performance gain of\n    25-30% can be expected on modern processors. Note that this affects the portability\n    of your executable. It may not run when copied to another system with older/different\n    processor architecture.\n    Also note that all dependent projects *must* be compiled with the same flag, or\n    seg-faults and other undefined behavior may result.\n4. Possibly enable MKL. Please note that our benchmarks have shown that this helps only\n    in very limited cases, and actually hurts performance in the usual case. We therefore\n    recommend that you do *not* enable MKL, unless you have benchmarked it on\n    your problem and have verified that it improves performance.\n\n\n## Debugging tips\n\nAnother useful debugging symbol is _GLIBCXX_DEBUG, which enables debug checks and safe containers in the standard C++ library and makes problems much easier to find.\n\nNOTE:  The native Snow Leopard g++ compiler/library contains a bug that makes it impossible to use _GLIBCXX_DEBUG.  MacPorts g++ compilers do work with it though.\n\nNOTE:  If _GLIBCXX_DEBUG is used to compile gtsam, anything that links against gtsam will need to be compiled with _GLIBCXX_DEBUG as well, due to the use of header-only Eigen.\n\n\n## Installing MKL on Linux\n\nIntel has a guide for installing MKL on Linux through APT repositories at <https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo>.\n\nAfter following the instructions, add the following to your `~/.bashrc` (and afterwards, open a new terminal before compiling GTSAM):\n`LD_PRELOAD` need only be set if you are building the python wrapper to use GTSAM from python.\n```sh\nsource /opt/intel/mkl/bin/mklvars.sh intel64\nexport LD_PRELOAD=\"$LD_PRELOAD:/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/mkl/lib/intel64/libmkl_sequential.so\"\n```\nTo use MKL in GTSAM pass the flag `-DGTSAM_WITH_EIGEN_MKL=ON` to cmake.\n\n\nThe `LD_PRELOAD` fix seems to be related to a well known problem with MKL which leads to lots of undefined symbol errors, for example:\n- <https://software.intel.com/en-us/forums/intel-math-kernel-library/topic/300857>\n- <https://software.intel.com/en-us/forums/intel-distribution-for-python/topic/628976>\n- <https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/J3YGoef64z8>\n\nFailing to specify `LD_PRELOAD` may lead to errors such as:\n`ImportError: /opt/intel/mkl/lib/intel64/libmkl_vml_avx2.so: undefined symbol: mkl_serv_getenv`\nor\n`Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.`\nwhen importing GTSAM using the python wrapper.\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4716796875,
          "content": "GTSAM is released under the simplified BSD license, reproduced in the file \nLICENSE.BSD in this directory.\n\nGTSAM contains several third party libraries, with documentation of licensing\nand modifications as follows:\n\n- CCOLAMD 2.9.6: Tim Davis' constrained column approximate minimum degree\nordering library\n    - Included unmodified in gtsam/3rdparty/CCOLAMD and\n      gtsam/3rdparty/SuiteSparse_config\n    - http://faculty.cse.tamu.edu/davis/suitesparse.html\n    - Licenced under BSD-3, provided in gtsam/3rdparty/CCOLAMD/Doc/License.txt\n- ceres: Google's nonlinear least-squares optimization library\n    - Includes only auto-diff/jet code, with minor modifications to includes\n    - http://ceres-solver.org/license.html\n- Eigen 3.3.7:  General C++ matrix and linear algebra library\n    - Licenced under MPL2, provided in gtsam/3rdparty/Eigen/COPYING.README \n    - Some code that is 3rd-party to Eigen is BSD and LGPL\n- GeographicLib 1.35: Charles Karney's geographic conversion utility library\n    - Included unmodified in gtsam/3rdparty/GeographicLib\n    - Licenced under MIT, provided in gtsam/3rdparty/GeographicLib/LICENSE.txt\n- METIS 5.1.0: Graph partitioning and fill-reducing matrix ordering library\n    - Included unmodified in gtsam/3rdparty/metis\n    - Licenced under Apache License v 2.0, provided in\n      gtsam/3rdparty/metis/LICENSE.txt\n- Spectra v0.9.0: Sparse Eigenvalue Computation Toolkit as a Redesigned ARPACK.\n    - Licenced under MPL2, provided at https://github.com/yixuan/spectra\n"
        },
        {
          "name": "LICENSE.BSD",
          "type": "blob",
          "size": 1.494140625,
          "content": "Copyright (c) 2010, Georgia Tech Research Corporation\nAtlanta, Georgia 30332-0415\nAll Rights Reserved\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4140625,
          "content": "# README - Georgia Tech Smoothing and Mapping Library\n\n**Important Note**\n\n**As of January 2023, the `develop` branch is officially in \"Pre 4.3\" mode. We envision several API-breaking changes as we switch to C++17 and away from boost.**\n\nIn addition, features deprecated in 4.2 will be removed. Please use the stable [4.2 release](https://github.com/borglab/gtsam/releases/tag/4.2) if you need those features. However, most are easily converted and can be tracked down (in 4.2) by disabling the cmake flag `GTSAM_ALLOW_DEPRECATED_SINCE_V42`.\n\n## What is GTSAM?\n\nGTSAM is a C++ library that implements smoothing and\nmapping (SAM) in robotics and vision, using Factor Graphs and Bayes\nNetworks as the underlying computing paradigm rather than sparse\nmatrices.\n\nThe current support matrix is:\n\n| Platform           | Compiler  | Build Status                                                                     |\n|:------------------:|:---------:|:--------------------------------------------------------------------------------:|\n| Ubuntu 20.04/22.04 | gcc/clang | ![Linux CI](https://github.com/borglab/gtsam/workflows/Linux%20CI/badge.svg)     |\n| macOS              | clang     | ![macOS CI](https://github.com/borglab/gtsam/workflows/macOS%20CI/badge.svg)     |\n| Windows            | MSVC      | ![Windows CI](https://github.com/borglab/gtsam/workflows/Windows%20CI/badge.svg) |\n\n\nOn top of the C++ library, GTSAM includes [wrappers for MATLAB & Python](#wrappers).\n\n\n## Quickstart\n\nIn the root library folder execute:\n\n```sh\n#!bash\nmkdir build\ncd build\ncmake ..\nmake check (optional, runs unit tests)\nmake install\n```\n\nPrerequisites:\n\n- [Boost](http://www.boost.org/users/download/) >= 1.65 (Ubuntu: `sudo apt-get install libboost-all-dev`)\n- [CMake](http://www.cmake.org/cmake/resources/software.html) >= 3.0 (Ubuntu: `sudo apt-get install cmake`)\n- A modern compiler, i.e., at least gcc 4.7.3 on Linux.\n\nOptional prerequisites - used automatically if findable by CMake:\n\n- [Intel Threaded Building Blocks (TBB)](http://www.threadingbuildingblocks.org/) (Ubuntu: `sudo apt-get install libtbb-dev`)\n- [Intel Math Kernel Library (MKL)](http://software.intel.com/en-us/intel-mkl) (Ubuntu: [installing using APT](https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo))\n    - See [INSTALL.md](INSTALL.md) for more installation information\n    - Note that MKL may not provide a speedup in all cases. Make sure to benchmark your problem with and without MKL.\n\n## GTSAM 4 Compatibility\n\nGTSAM 4 introduces several new features, most notably Expressions and a Python toolbox. It also introduces traits, a C++ technique that allows optimizing with non-GTSAM types. That opens the door to retiring geometric types such as Point2 and Point3 to pure Eigen types, which we also do. A significant change which will not trigger a compile error is that zero-initializing of Point2 and Point3 is deprecated, so please be aware that this might render functions using their default constructor incorrect.\n\n## Wrappers\n\nWe provide support for [MATLAB](matlab/README.md) and [Python](python/README.md) wrappers for GTSAM. Please refer to the linked documents for more details.\n\n## Citation\n\nIf you are using GTSAM for academic work, please use the following citation:\n\n```bibtex\n@software{gtsam,\n  author       = {Frank Dellaert and GTSAM Contributors},\n  title        = {borglab/gtsam},\n  month        = May,\n  year         = 2022,\n  publisher    = {Georgia Tech Borg Lab},\n  version      = {4.2a8},\n  doi          = {10.5281/zenodo.5794541},\n  url          = {https://github.com/borglab/gtsam)}}\n}\n```\n\nTo cite the `Factor Graphs for Robot Perception` book, please use:\n```bibtex\n@book{factor_graphs_for_robot_perception,\n    author={Frank Dellaert and Michael Kaess},\n    year={2017},\n    title={Factor Graphs for Robot Perception},\n    publisher={Foundations and Trends in Robotics, Vol. 6},\n    url={http://www.cs.cmu.edu/~kaess/pub/Dellaert17fnt.pdf}\n}\n```\n\nIf you are using the IMU preintegration scheme, please cite:\n```bibtex\n@book{imu_preintegration,\n    author={Christian Forster and Luca Carlone and Frank Dellaert and Davide Scaramuzza},\n    title={IMU preintegration on Manifold for Efficient Visual-Inertial Maximum-a-Posteriori Estimation},\n    year={2015}\n}\n```\n\n\n## The Preintegrated IMU Factor\n\nGTSAM includes a state of the art IMU handling scheme based on\n\n- Todd Lupton and Salah Sukkarieh, _\"Visual-Inertial-Aided Navigation for High-Dynamic Motion in Built Environments Without Initial Conditions\"_, TRO, 28(1):61-76, 2012. [[link]](https://ieeexplore.ieee.org/document/6092505)\n\nOur implementation improves on this using integration on the manifold, as detailed in\n\n- Luca Carlone, Zsolt Kira, Chris Beall, Vadim Indelman, and Frank Dellaert, _\"Eliminating conditionally independent sets in factor graphs: a unifying perspective based on smart factors\"_, Int. Conf. on Robotics and Automation (ICRA), 2014. [[link]](https://ieeexplore.ieee.org/abstract/document/6907483)\n- Christian Forster, Luca Carlone, Frank Dellaert, and Davide Scaramuzza, _\"IMU Preintegration on Manifold for Efficient Visual-Inertial Maximum-a-Posteriori Estimation\"_, Robotics: Science and Systems (RSS), 2015. [[link]](http://www.roboticsproceedings.org/rss11/p06.pdf)\n\nIf you are using the factor in academic work, please cite the publications above.\n\nIn GTSAM 4 a new and more efficient implementation, based on integrating on the NavState tangent space and detailed in [this document](doc/ImuFactor.pdf), is enabled by default. To switch to the RSS 2015 version, set the flag `GTSAM_TANGENT_PREINTEGRATION` to OFF.\n\n\n## Additional Information\n\nThere is a [`GTSAM users Google group`](https://groups.google.com/forum/#!forum/gtsam-users) for general discussion.\n\nRead about important [`GTSAM-Concepts`](GTSAM-Concepts.md) here. A primer on GTSAM Expressions,\nwhich support (superfast) automatic differentiation,\ncan be found on the [GTSAM wiki on BitBucket](https://bitbucket.org/gtborg/gtsam/wiki/Home).\n\nSee the [`INSTALL`](INSTALL.md) file for more detailed installation instructions.\n\nGTSAM is open source under the BSD license, see the [`LICENSE`](LICENSE) and [`LICENSE.BSD`](LICENSE.BSD) files.\n\nPlease see the [`examples/`](examples) directory and the [`USAGE`](USAGE.md) file for examples on how to use GTSAM.\n\nGTSAM was developed in the lab of [Frank Dellaert](http://www.cc.gatech.edu/~dellaert) at the [Georgia Institute of Technology](http://www.gatech.edu), with the help of many contributors over the years, see [THANKS](THANKS.md).\n"
        },
        {
          "name": "THANKS.md",
          "type": "blob",
          "size": 0.9404296875,
          "content": "GTSAM was made possible by the efforts of many collaborators at Georgia Tech, listed below with their current afffiliation, if they left Tech:\n\n* Jeremy Aguilon, Facebook\n* Sungtae An\n* Doru Balcan, Bank of America\n* Chris Beall\n* Luca Carlone\n* Alex Cunningham, U Michigan\n* Jing Dong\n* Alireza Fathi, Stanford\n* Eohan George\n* Alex Hagiopol\n* Viorela Ila, Czeck Republic\n* Vadim Indelman, the Technion\n* David Jensen, GTRI\n* Yong-Dian Jian, Baidu\n* Michael Kaess, Carnegie Mellon\n* Zhaoyang Lv\n* Andrew Melim, Oculus Rift\n* Kai Ni, Baidu\n* Carlos Nieto\n* Duy-Nguyen Ta\n* Manohar Paluri, Facebook\n* Christian Potthast, USC\n* Richard Roberts, Google X\n* Grant Schindler, Consultant\n* Natesh Srinivasan\n* Alex Trevor\n* Stephen Williams, BossaNova\n* Matthew Broadway\n\nat ETH, Zurich\n\n* Paul Furgale\n* Mike Bosse\n* Hannes Sommer\n* Thomas Schneider\n\nat Uni Zurich:\n\n* Christian Forster\n\nat LAAS-CNRS\n\n* Ellon Paiva\n\nMany thanks for your hard work!!!!\n\nFrank Dellaert\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 2.2548828125,
          "content": "# GTSAM USAGE\n\nThis file explains how to make use of the library for common SLAM tasks, using a visual SLAM implementation as an example.\n\n## Getting Started\n\n### Install\n\t\nFollow the installation instructions in the README file to build and install gtsam, as well as running tests to ensure the library is working properly.\n\n### Compiling/Linking with GTSAM\n\nThe installation creates a binary `libgtsam` at the installation prefix, and an include folder `gtsam`.  These are the only required includes, but the library has also been designed to make use of XML serialization through the `Boost.serialization` library, which requires the the Boost.serialization headers and binaries to be linked.  \n\nIf you use CMake for your project, you can use the CMake scripts in the cmake folder for finding `GTSAM`, `CppUnitLite`, and `Wrap`.  \n\n### Examples\n\nTo see how the library works, examine the unit tests provided.  \n \n## Overview\n\nThe GTSAM library has three primary components necessary for the construction of factor graph representation and optimization which users will need to adapt to their particular problem.  \n\n* FactorGraph\n\n\tA factor graph contains a set of variables to solve for (i.e., robot poses, landmark poses, etc.) and a set of constraints between these variables, which make up factors.\n\n* Values:\n\n\tValues is a single object containing labeled values for all of the variables.  Currently, all variables are labeled with strings, but the type or organization of the variables can change.\n\n* Factors\n\n\tA nonlinear factor expresses a constraint between variables, which in the SLAM example, is a measurement such as a visual reading on a landmark or odometry.\n\nThe library is organized according to the following directory structure:\n\n    3rdparty      local copies of third party libraries e.g. Eigen3 and CCOLAMD\n    base          provides some base Math and data structures, as well as test-related utilities\n    geometry      points, poses, tensors, etc\n    inference     core graphical model inference such as factor graphs, junction trees, Bayes nets, Bayes trees \n    linear        inference specialized to Gaussian linear case, GaussianFactorGraph etc...\n    nonlinear     non-linear factor graphs and non-linear optimization\n    slam          SLAM and visual SLAM application code\n\n\n\n"
        },
        {
          "name": "Using-GTSAM-EXPORT.md",
          "type": "blob",
          "size": 5.818359375,
          "content": "# Using GTSAM_EXPORT\n\nTo create a DLL in windows, the `GTSAM_EXPORT` keyword has been created and needs to be applied to different methods and classes in the code to expose this code outside of the DLL.  However, there are several intricacies that make this more difficult than it sounds.  In general, if you follow the following three rules, GTSAM_EXPORT should work properly.  The rest of the document also describes (1) the common error message encountered when you are not following these rules and (2) the reasoning behind these usage rules.\n\n## Usage Rules\n1.  Put `GTSAM_EXPORT` in front of any function that you want exported in the DLL _if and only if_ that function is declared in a .cpp file, not just a .h file.\n2.  Use `GTSAM_EXPORT` in a class definition (i.e. `class GSTAM_EXPORT MyClass {...}`) only if:\n    * At least one of the functions inside that class is declared in a .cpp file and not just the .h file.\n    * You can `GTSAM_EXPORT` any class it inherits from as well.  (Note that this implictly requires the class does not derive from a \"header-only\" class.  Note that Eigen is a \"header-only\" library, so if your class derives from Eigen, _do not_ use `GTSAM_EXPORT` in the class definition!) \n3.  If you have defined a class using `GTSAM_EXPORT`, do not use `GTSAM_EXPORT` in any of its individual function declarations.  (Note that you _can_ put `GTSAM_EXPORT` in the definition of individual functions within a class as long as you don't put `GTSAM_EXPORT` in the class definition.)\n4. For template specializations, you need to add `GTSAM_EXPORT` to each individual specialization.\n\n## When is GTSAM_EXPORT being used incorrectly\nUnfortunately, using `GTSAM_EXPORT` incorrectly often does not cause a compiler or linker error in the library that is being compiled, but only when you try to use that DLL in a different library.  For example, an error in `gtsam/base` will often show up when compiling the `check_base_program` or the MATLAB wrapper, but not when compiling/linking gtsam itself.  The most common errors will say something like:\n\n```\nError\tLNK2019\tunresolved external symbol \"public: void __cdecl gtsam::SO3::print(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const \" (?print@SO3@gtsam@@QEBAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z) referenced in function \"public: static void __cdecl gtsam::Testable<class gtsam::SO3>::Print(class gtsam::SO3 const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)\" (?Print@?$Testable@VSO3@gtsam@@@gtsam@@SAXAEBVSO3@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)\tcheck_geometry_program\tC:\\AFIT\\lib\\gtsam\\build\\gtsam\\geometry\\tests\\testSO3.obj\n```\n\nLet's analyze this error statement.  First, there is an unresolved symbol `gtsam::SO3::print`.  This can occur because _either_ `GTSAM_EXPORT` was not added to the print function definition when it should have been, _OR_ because `GTSAM_EXPORT` was added to the print function definition when it is fully declared in the header.  This error was detected while compiling `check_geometry_program` and pulling in `...\\testSO3.obj`.  Specifically, within the function call `gtsam::Testable<class gtsam::SO3>::Print (...)`.  Note that this error did _not_ occur when compiling the library that actually has SO3 inside of it.\n\n## But Why?\nI believe that how the compiler/linker interacts with GTSAM_EXPORT can be explained by understanding the rules that MSVC operates under.  \n\nBut first, we need to understand exactly what `GTSAM_EXPORT` is.  `GTSAM_EXPORT` is a `#define` macro that is created by CMAKE when GTSAM is being compiled on a Windows machine.  Inside the GTSAM project, GTSAM export will be set to a \"dllexport\" command.  A \"dllexport\" command tells the compiler that this function should go into the DLL and be visible externally.  In any other library, `GTSAM_EXPORT`  will be set to a \"dllimport\" command, telling the linker it should find this function in a DLL somewhere.  This leads to the first rule the compiler uses.  (Note that I say \"compiler rules\" when the rules may actually be in the linker, but I am conflating the two terms here when I speak of the \"compiler rules\".) \n\n***Compiler Rule #1*** If a `dllimport` command is used in defining a function or class, that function or class _must_ be found in a DLL.\n\nRule #1 doesn't seem very bad, until you combine it with rule #2\n\n***Compiler Rule #2*** Anything declared in a header file is not included in a DLL.\n\nWhen these two rules are combined, you get some very confusing results.  For example, a class which is completely defined in a header (e.g. Foo) cannot use `GTSAM_EXPORT` in its definition.  If Foo is defined with `GTSAM_EXPORT`, then the compiler _must_ find Foo in a DLL.  Because Foo is a header-only class, however, it can't find it, leading to a very confusing \"I can't find this symbol\" type of error.  Note that the linker says it can't find the symbol even though the compiler found the header file that completely defines the class.\n\nAlso note that when a class that you want to export inherits from another class that is not exportable, this can cause significant issues.  According to this [MSVC Warning page](https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-2-c4275?view=vs-2019), it may not strictly be a rule, but we have seen several linker errors when a class that is defined with `GTSAM_EXPORT` extended an Eigen class.  In general, it appears that any inheritance of non-exportable class by an exportable class is a bad idea.\n\n## Conclusion\nHopefully, this little document clarifies when `GTSAM_EXPORT` should and should not be used whenever future GTSAM code is being written.  Following the usage rules above, we have been able to get all of the libraries, together with their test and wrapping libraries, to compile/link successfully."
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtsam",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtsam_extra.cmake.in",
          "type": "blob",
          "size": 0.37109375,
          "content": "# Extra CMake definitions for GTSAM\n\n# All version variables are handled by GTSAMConfigVersion.cmake, except these\n# two below. We continue to set them here in case someone uses them\nset (GTSAM_VERSION_NUMERIC @GTSAM_VERSION_NUMERIC@)\nset (GTSAM_VERSION_STRING \"@GTSAM_VERSION_STRING@\")\n\nset (GTSAM_USE_TBB @GTSAM_USE_TBB@)\nset (GTSAM_DEFAULT_ALLOCATOR @GTSAM_DEFAULT_ALLOCATOR@)\n"
        },
        {
          "name": "gtsam_unstable",
          "type": "tree",
          "content": null
        },
        {
          "name": "makestats.sh",
          "type": "blob",
          "size": 0.12109375,
          "content": "java -jar ~/src/statsvn-0.7.0/statsvn.jar -output-dir stats -exclude \"examples/Data/**/*;gtsam/3rdparty/**/*\" logfile.log .\n"
        },
        {
          "name": "matlab",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 1.27734375,
          "content": "<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"3\">\n  <name>gtsam</name>\n  <version>4.3.0</version>\n  <description>gtsam</description>\n\n  <maintainer email=\"gtsam@lists.gatech.edu\">Frank Dellaert</maintainer>\n\n  <!-- Main License for GTSAM sources -->\n  <license>BSD-3-Clause</license>\n  <!-- 3rd party libraries -->\n  <license file=\"gtsam/3rdparty/CCOLAMD/Doc/License.txt\">BSD-3-Clause</license>\n  <license file=\"gtsam/3rdparty/ceres/jet.h\">BSD-3-Clause</license>\n  <license file=\"gtsam/3rdparty/Eigen/COPYING.README\">MPL-2.0</license>\n  <license file=\"gtsam/3rdparty/GeographicLib/LICENSE.txt\">MIT</license>\n  <license file=\"gtsam/3rdparty/metis/LICENSE.txt\">Apache-2.0</license>\n  <license file=\"gtsam/3rdparty/Spectra/GenEigsSolver.h\">MPL-2.0</license>\n\n  <!-- Maintainers of the ROS packaging -->\n  <maintainer email=\"fan.jiang@gatech.edu\">Fan Jiang</maintainer>\n  <maintainer email=\"jlblanco@ual.es\">José Luis Blanco-Claraco</maintainer>\n\n  <buildtool_depend>cmake</buildtool_depend>\n\n  <depend>boost</depend>\n  <depend>eigen</depend>\n  <depend>tbb</depend>\n\n  <export>\n    <!-- Specify that this is not really a Catkin package-->\n    <build_type>cmake</build_type>\n  </export>\n</package>\n\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "timing",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_wrap.sh",
          "type": "blob",
          "size": 0.5830078125,
          "content": "#!/bin/bash\nREF=${1-master} # branch or tag; defaults to 'master' if parameter 1 not present\nREMOTE=wrap # just a name to identify the remote\nREPO=git@github.com:borglab/wrap.git # replace this with your repository URL\nFOLDER=wrap # where to mount the subtree\n\ngit remote add $REMOTE --no-tags $REPO\nif [[ -d $FOLDER ]]; then # update the existing subtree\n    git subtree pull $REMOTE $REF --prefix=$FOLDER --squash -m \"Merging '$REF' into '$FOLDER'\"\nelse # add the subtree\n    git subtree add  $REMOTE $REF --prefix=$FOLDER --squash -m \"Merging '$REF' into '$FOLDER'\"\nfi\ngit remote remove $REMOTE"
        },
        {
          "name": "wrap",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}