{
  "metadata": {
    "timestamp": 1736565962870,
    "page": 944,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "patrikhuber/eos",
      "stars": 1923,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.6787109375,
          "content": "---\nBasedOnStyle: LLVM\nAccessModifierOffset: '-4'\nAlwaysBreakTemplateDeclarations: 'true'\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nColumnLimit: '110'\nCpp11BracedListStyle: 'true'\nPointerAlignment: Left\nAllowShortFunctionsOnASingleLine: Empty\nIndentWidth: '4'\nLanguage: Cpp\nNamespaceIndentation: None\nSortIncludes: false\nStandard: Cpp11\nUseTab: Never\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.580078125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Explicitly declare text files we want to always be normalized and converted \n# to native line endings on checkout.\n*.c text\n*.cpp text\n*.h text\n*.hxx text\n*.hpp text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.177734375,
          "content": "# Ignore files generated by Visual Studio's CMake:\n.vs/\nout/build/\nCMakePresets.json\n\n# Ignore (optional) configuration files with user-specific paths:\ninitial_cache.cmake\nsetup.cfg\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.712890625,
          "content": "[submodule \"3rdparty/pybind11\"]\n\tpath = 3rdparty/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"3rdparty/nanoflann\"]\n\tpath = 3rdparty/nanoflann\n\turl = https://github.com/jlblancoc/nanoflann.git\n[submodule \"3rdparty/eigen3-nnls\"]\n\tpath = 3rdparty/eigen3-nnls\n\turl = https://github.com/hmatuschek/eigen3-nnls.git\n[submodule \"3rdparty/mexplus\"]\n\tpath = 3rdparty/mexplus\n\turl = https://github.com/kyamagu/mexplus.git\n[submodule \"3rdparty/cereal\"]\n\tpath = 3rdparty/cereal\n\turl = https://github.com/USCiLab/cereal.git\n[submodule \"3rdparty/toml11\"]\n\tpath = 3rdparty/toml11\n\turl = https://github.com/ToruNiina/toml11.git\n[submodule \"3rdparty/eigen\"]\n\tpath = 3rdparty/eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n"
        },
        {
          "name": ".natvis",
          "type": "tree",
          "content": null
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 1.4599609375,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Huber\"\n  given-names: \"Patrik\"\n  orcid: \"https://orcid.org/0000-0002-1474-1040\"\ntitle: \"eos: A lightweight 3D Morphable Face Model library in modern C++\"\nversion: 1.5.0\ndate-released: 2024-12-10\nurl: \"https://github.com/patrikhuber/eos\"\nlicense: Apache-2.0\npreferred-citation:\n  type: conference-paper\n  title: \"A Multiresolution 3D Morphable Face Model and Fitting Framework\"\n  authors:\n  - family-names: \"Huber\"\n    given-names: \"Patrik\"\n    orcid: \"https://orcid.org/0000-0002-1474-1040\"\n  - family-names: \"Hu\"\n    given-names: \"Guosheng\"\n  - family-names: \"Tena\"\n    given-names: \"Jose Rafael\"\n  - family-names: \"Mortazavian\"\n    given-names: \"Pouria\"\n  - family-names: \"Koppen\"\n    given-names: \"Willen P.\"\n  - family-names: \"Christmas\"\n    given-names: \"William J.\"\n  - family-names: \"Raetsch\"\n    given-names: \"Matthias\"\n  - family-names: \"Kittler\"\n    given-names: \"Josef\"\n    orcid: \"https://orcid.org/0000-0002-8110-9205\"\n  doi: \"10.5220/0005669500790086\"\n  conference:\n    name: \"11th Joint Conference on Computer Vision, Imaging and Computer Graphics Theory and Applications (VISIGRAPP 2016)\"\n  volume-title: \"Proceedings of the 11th Joint Conference on Computer Vision, Imaging and Computer Graphics Theory and Applications (VISIGRAPP 2016)\"\n  start: 79 # First page number\n  end: 86 # Last page number\n  volume: 4\n  year: 2016\n  month: 2\n  publisher:\n    name: \"SciTePress\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.703125,
          "content": "cmake_minimum_required(VERSION 3.8.2)\nif(MSVC)\n  cmake_minimum_required(VERSION 3.10.0) # needed for CMAKE_CXX_STANDARD 17 on >=VS2017.3\nendif()\nproject(eos VERSION 1.5.0 LANGUAGES CXX)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# This sets the C++ standard to c++17 and required for all the following targets that we define.\n# It has no effect on MSVC though - we thus define more specific requirements for each executable target respectively.\n# Also it will not apply to the eos library target, since it is an INTERFACE_LIBRARY, and these properties do not apply to interface libraries.\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF) # This makes CMake use -std=c++xx instead of -std=gnu++xx\n# This list is likely not complete, but it should be sufficient to error out on old compilers that we cannot build on:\nset(EOS_CXX_COMPILE_FEATURES cxx_defaulted_functions cxx_generalized_initializers cxx_generic_lambdas cxx_lambdas cxx_nonstatic_member_init cxx_range_for cxx_right_angle_brackets cxx_strong_enums)\n\n# All the options for building the library. Can be changed on the command-line or in initial_cache.cmake.\nmessage(STATUS \"Options:\")\noption(EOS_BUILD_EXAMPLES \"Build the example applications.\" ON)\nmessage(STATUS \"EOS_BUILD_EXAMPLES: ${EOS_BUILD_EXAMPLES}\")\noption(EOS_BUILD_CERES_EXAMPLE \"Build the fit-model-ceres example (requires Ceres).\" OFF)\nmessage(STATUS \"EOS_BUILD_CERES_EXAMPLE: ${EOS_BUILD_CERES_EXAMPLE}\")\noption(EOS_BUILD_UTILS \"Build utility applications.\" OFF)\nmessage(STATUS \"EOS_BUILD_UTILS: ${EOS_BUILD_UTILS}\")\noption(EOS_BUILD_DOCUMENTATION \"Build the library documentation.\" OFF)\nmessage(STATUS \"EOS_BUILD_DOCUMENTATION: ${EOS_BUILD_DOCUMENTATION}\")\noption(EOS_GENERATE_PYTHON_BINDINGS \"Build python bindings. Requires python to be installed.\" OFF)\nmessage(STATUS \"EOS_GENERATE_PYTHON_BINDINGS: ${EOS_GENERATE_PYTHON_BINDINGS}\")\noption(EOS_GENERATE_MATLAB_BINDINGS \"Build Matlab bindings. Requires Matlab with the compiler installed or the Matlab Compiler Runtime.\" OFF)\nmessage(STATUS \"EOS_GENERATE_MATLAB_BINDINGS: ${EOS_GENERATE_MATLAB_BINDINGS}\")\n\n# Build a CPack driven installer package:\ninclude(InstallRequiredSystemLibraries) # This module will include any runtime libraries that are needed by the project for the current platform\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${eos_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${eos_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${eos_VERSION_PATCH}\")\ninclude(CPack)\n\nset(eos_3RDPARTY_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/3rdparty\") # this is used by the CMakeLists.txt files in the subdirectories\n\nset(CMAKE_MODULE_PATH ${eos_3RDPARTY_DIR}/eigen/cmake)\n# Use the Eigen included in the submodule by default, but allow the user to override EIGEN3_INCLUDE_DIR:\nif(NOT DEFINED EIGEN3_INCLUDE_DIR)\n  set(EIGEN3_INCLUDE_DIR ${eos_3RDPARTY_DIR}/eigen)\nendif()\nfind_package(Eigen3 REQUIRED)\nmessage(STATUS \"Eigen3 found: ${EIGEN3_FOUND}, version: ${EIGEN3_VERSION}\")\nmessage(STATUS \"Eigen3 include dir found at ${EIGEN3_INCLUDE_DIR}\")\n\n# Set the include directories of the 3rd-party submodules that we use:\nset(CEREAL_INCLUDE_DIR \"${eos_3RDPARTY_DIR}/cereal/include\")\nset(nanoflann_INCLUDE_DIR \"${eos_3RDPARTY_DIR}/nanoflann/include\")\nset(eigen3_nnls_INCLUDE_DIR \"${eos_3RDPARTY_DIR}/eigen3-nnls/src\")\nset(toml11_INCLUDE_DIR \"${eos_3RDPARTY_DIR}/toml11\")\n\n# Header files of the eos library:\nset(HEADERS\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/Landmark.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/LandmarkMapper.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/read_pts_landmarks.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/Image.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/image/Pixel.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/image/PixelTraits.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/image/utils.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/image/resize.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/image/opencv_interop.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/Mesh.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/read_obj.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/write_obj.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/Rect.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/core/math.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/PcaModel.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/MorphableModel.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/Blendshape.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/ExpressionModel.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/coefficients.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/EdgeTopology.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/io/cvssp.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/morphablemodel/io/eigen_cerealisation.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/pca/pca.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/orthographic_camera_estimation_linear.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/nonlinear_camera_estimation.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/detail/nonlinear_camera_estimation_detail.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/detail/eigen_quaternion_cerealisation.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/linear_shape_fitting.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/contour_correspondence.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/blendshape_fitting.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/closest_edge_fitting.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/fitting.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/multi_image_fitting.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/ceres_nonlinear.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/RenderingParameters.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/rotation_angles.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/fitting/FittingResult.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/normals.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/transforms.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/matrix_projection.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/ray_triangle_intersect.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/draw_utils.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/opencv/draw_utils.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/render.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/TriangleToRasterize.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/plane.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/utils.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/ProjectionType.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/RayDirection.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/vertex_visibility.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/texture_extraction.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/texturing.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/SoftwareRenderer.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/VertexShader.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/Rasterizer.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/FragmentShader.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/Texture.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/render/detail/Vertex.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/video/Keyframe.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/video/keyframe_merging.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/optional.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/optional_serialization.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/detail/akrzemi1_optional.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/detail/akrzemi1_optional_serialization.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/variant.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/variant_serialization.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/detail/mpark_variant.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/detail/mpark_variant_serialization.hpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/eos/cpp17/clamp.hpp\n)\n\nadd_library(eos INTERFACE)\ntarget_compile_features(eos INTERFACE ${EOS_CXX_COMPILE_FEATURES})\n\n# Add header includes:\ntarget_include_directories(eos INTERFACE \"include\")\ntarget_include_directories(eos INTERFACE ${CEREAL_INCLUDE_DIR})\ntarget_include_directories(eos INTERFACE ${EIGEN3_INCLUDE_DIR})\ntarget_include_directories(eos INTERFACE ${nanoflann_INCLUDE_DIR})\ntarget_include_directories(eos INTERFACE ${eigen3_nnls_INCLUDE_DIR})\ntarget_include_directories(eos INTERFACE ${toml11_INCLUDE_DIR})\n\n# Custom target for the library, to make the headers show up in IDEs:\nadd_custom_target(eos-headers SOURCES ${HEADERS})\nsource_group(core REGULAR_EXPRESSION include/eos/core/*)\nsource_group(core\\\\image REGULAR_EXPRESSION include/eos/core/image/*)\nsource_group(morphablemodel REGULAR_EXPRESSION include/eos/morphablemodel/*)\nsource_group(morphablemodel\\\\io REGULAR_EXPRESSION include/eos/morphablemodel/io/*)\nsource_group(pca REGULAR_EXPRESSION include/eos/pca/*)\nsource_group(fitting REGULAR_EXPRESSION include/eos/fitting/*)\nsource_group(fitting\\\\detail REGULAR_EXPRESSION include/eos/fitting/detail/*)\nsource_group(render REGULAR_EXPRESSION include/eos/render/*)\nsource_group(render\\\\detail REGULAR_EXPRESSION include/eos/render/detail/*)\nsource_group(render\\\\opencv REGULAR_EXPRESSION include/eos/render/opencv/*)\nsource_group(video REGULAR_EXPRESSION include/eos/video/*)\nsource_group(cpp17 REGULAR_EXPRESSION include/eos/cpp17/*)\nsource_group(cpp17\\\\detail REGULAR_EXPRESSION include/eos/cpp17/detail/*)\n\n# The eos install target:\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ DESTINATION include) # our library headers\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/share/ DESTINATION share) # the model and metadata\n# For 3rd party headers, we only copy the headers and licence files:\ninstall(DIRECTORY ${eos_3RDPARTY_DIR}/cereal/ DESTINATION 3rdparty/cereal) # cereal headers\ninstall(DIRECTORY ${eos_3RDPARTY_DIR}/nanoflann/include/ DESTINATION 3rdparty/nanoflann/include) # nanoflann header\ninstall(FILES ${eos_3RDPARTY_DIR}/nanoflann/COPYING DESTINATION 3rdparty/nanoflann/) # nanoflann licence\ninstall(DIRECTORY ${eos_3RDPARTY_DIR}/eigen3-nnls/src/ DESTINATION 3rdparty/eigen3-nnls/src) # eigen3-nnls header\ninstall(FILES ${eos_3RDPARTY_DIR}/eigen3-nnls/README.md DESTINATION 3rdparty/eigen3-nnls/) # eigen3-nnls attribution\ninstall(DIRECTORY ${eos_3RDPARTY_DIR}/toml11/ DESTINATION 3rdparty/toml11) # toml11 headers\n# Install Eigen headers if we're using the Eigen submodule included with eos:\nif(EIGEN3_INCLUDE_DIR STREQUAL ${eos_3RDPARTY_DIR}/eigen)\n  install(DIRECTORY ${eos_3RDPARTY_DIR}/eigen/Eigen/ DESTINATION 3rdparty/eigen/Eigen)\nendif()\n\nif(EOS_BUILD_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(EOS_BUILD_UTILS)\n  add_subdirectory(utils)\nendif()\n\nif(EOS_BUILD_DOCUMENTATION)\n  add_subdirectory(doc)\nendif()\n\nif(EOS_GENERATE_PYTHON_BINDINGS)\n  set(PYBIND11_PATH \"${eos_3RDPARTY_DIR}/pybind11\")\n  # If this fails, the repo has probably not been cloned with submodules. Run: git submodule update --init\n  add_subdirectory(${PYBIND11_PATH}) # add and initialise pybind11\n  add_subdirectory(python) # the actual bindings\n  install(DIRECTORY ${eos_3RDPARTY_DIR}/pybind11/include/ DESTINATION 3rdparty/pybind11/include) # pybind11 headers\n  install(FILES ${eos_3RDPARTY_DIR}/pybind11/LICENSE DESTINATION 3rdparty/pybind11/) # pybind11 licence\nendif()\n\nif(EOS_GENERATE_MATLAB_BINDINGS)\n  add_subdirectory(matlab)\n  install(DIRECTORY ${eos_3RDPARTY_DIR}/mexplus/include/ DESTINATION 3rdparty/mexplus/include) # mexplus headers\n  install(FILES ${eos_3RDPARTY_DIR}/mexplus/LICENSE DESTINATION 3rdparty/mexplus/) # mexplus licence\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.41796875,
          "content": "include README.md LICENSE\nglobal-include CMakeLists.txt *.cmake\nexclude initial_cache.cmake\nrecursive-exclude out *\nrecursive-include 3rdparty/cereal/include *\nrecursive-include 3rdparty/eigen/Eigen *\nrecursive-include 3rdparty/eigen3-nnls/src *.h\nrecursive-include 3rdparty/nanoflann/include *\nrecursive-include 3rdparty/toml11 *.hpp\nrecursive-include 3rdparty/pybind11 *\nrecursive-include include *\nrecursive-include python *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5703125,
          "content": "# eos: A lightweight header-only 3D Morphable Face Model fitting library in modern C++11/14.\n[![Latest release](http://img.shields.io/github/release/patrikhuber/eos.svg?style=flat-square)][release]\n[![Build status of master branch](https://github.com/patrikhuber/eos/actions/workflows/cmake.yml/badge.svg)][github-actions-build]\n[![Apache License 2.0](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat-square)][license]\n[![Sponsor eos on GitHub Sponsors](https://img.shields.io/static/v1?style=flat-square&label=Sponsor&message=%E2%9D%A4&logo=GitHub)][sponsor]\n\n[release]: https://github.com/patrikhuber/eos/releases\n[github-actions-build]: https://github.com/patrikhuber/eos/actions\n[license]: https://github.com/patrikhuber/eos/blob/master/LICENSE\n[sponsor]: https://github.com/sponsors/patrikhuber\n\neos is a lightweight 3D Morphable Face Model fitting library that provides basic functionality to use face models, as well as camera and shape fitting functionality. It's written in modern C++11/14.\n\nAt the moment, it mainly provides the following functionality:\n\n* MorphableModel and PcaModel classes to represent 3DMMs, with basic operations like `draw_sample()`. Supports the Surrey Face Model (SFM), 4D Face Model (4DFM), Basel Face Model (BFM) 2009 and 2017, and the Liverpool-York Head Model (LYHM) out-of-the-box\n* The low-resolution, shape-only Surrey Face Model ([share/sfm_shape_3448.bin](https://github.com/patrikhuber/eos/blob/master/share/sfm_shape_3448.bin))\n* Fast, linear pose, shape and expression fitting, edge and contour fitting:\n  * Linear scaled orthographic projection camera pose estimation\n  * Linear shape-to-landmarks fitting, implementation of O. Aldrian & W. Smith, _Inverse Rendering of Faces with a 3D Morphable Model_, PAMI 2013\n  * Expression fitting, with 6 linear expression blendshapes of the SFM: anger, disgust, fear, happiness, sadness, surprise\n  * Edge-fitting, heavily inspired by: A. Bas et al., _Fitting a 3D Morphable Model to Edges: A Comparison Between Hard and Soft Correspondences_, ACCVW 2016\n* Texture extraction to obtain a pose-invariant representation of the face texture\n* **Python bindings**: Much of eos's functionality is available as a python module (try `pip install eos-py`!)\n* (_Experimental_): Non-linear fitting cost functions using Ceres for shape, camera, blendshapes and the colour model (needs Ceres to be installed separately)\n\nAn experimental model viewer to visualise 3D Morphable Models and blendshapes is available [here](https://github.com/patrikhuber/eos-model-viewer).\n\n## Usage\n\n* Tested with the following compilers: >=gcc-6, >=clang-5, >=Visual Studio 2017 15.5, >=Xcode 9.2.\n* The library and python bindings **do not require any external dependencies**. The example applications require Boost (>=1.71.0) and OpenCV (>=2.4.3).\n\nTo use the library in your own project, just add the following directories to your include path:\n\n* `eos/include`\n* `eos/3rdparty/cereal/include`\n* `eos/3rdparty/nanoflann/include`\n* `eos/3rdparty/eigen/Eigen`\n* `eos/3rdparty/eigen3-nnls/src`\n* `eos/3rdparty/toml11`\n\n**Make sure to clone with `--recursive` to download the required submodules!**\n\n### Build the examples and tests\n\n* Needed dependencies for the example app: CMake (>=3.8.2, or >=3.10.0 for MSVC), Boost system, filesystem, program_options (>=1.71.0), OpenCV core, imgproc, highgui (>=2.4.3).\n\nTo build:\n\n```\ngit clone --recursive https://github.com/patrikhuber/eos.git\nmkdir build && cd build # creates a build directory next to the 'eos' folder\ncmake -G \"<your favourite generator>\" ../eos -DCMAKE_INSTALL_PREFIX=../install/\nmake && make install # or open the project file and build in an IDE like Visual Studio\n```\nIt is strongly recommended to use [vcpkg](https://github.com/Microsoft/vcpkg/) to install the dependencies on Windows.\nUsers who wish to manage dependencies manually may find it helpful to copy `initial_cache.cmake.template` to `initial_cache.cmake`, edit the necessary paths and run `cmake` with `-C ../eos/initial_cache.cmake`. On Linux, you may also want to set `-DCMAKE_BUILD_TYPE=...` appropriately.\n\n\n## Sample code\n\nThe fit-model example app creates a 3D face from a 2D image.\n\nAfter `make install` or running the `INSTALL` target, an example image with landmarks can be found in `install/bin/data/`. The model and the necessary landmarks mapping file are installed to `install/share/`.\n\nYou can run the example just by running:\n\n`fit-model`\n\nIt will load the face model, landmark-to-vertex mappings, blendshapes, and other required files from the `../share/` directory, and run on the example image. It can be run on other images by giving it a `-i` parameter for the image and `-l` for a set of ibug landmarks. The full set of parameters can be viewed by running `fit-model --help`.\n\nIf you are just getting started, it is recommended to have a look at `fit-model-simple` too, as it requires much fewer input, and only fits pose and shape, without any blendshapes or edge-fitting. Its full set of arguments is:\n\n`fit-model-simple -m ../share/sfm_shape_3448.bin -p ../share/ibug_to_sfm.txt -i data/image_0010.png -l data/image_0010.pts`\n\nThe output in both cases is an `obj` file with the shape and a `png` with the extracted texture map. The estimated pose angles and shape coefficients are available in the code via the API.\n\nSee [examples/fit-model.cpp](https://github.com/patrikhuber/eos/blob/master/examples/fit-model.cpp) for the full code.\n\n## The Surrey Face Model\n\nThe library includes a low-resolution shape-only version of the Surrey Morphable Face Model. It is a PCA model of shape variation built from 3D face scans. It comes with uv-coordinates to perform texture remapping.\n\n<img src=\"https://raw.githubusercontent.com/patrikhuber/eos/gh-pages/images/sfm_shape_3448_mesh.png\" width=20% alt=\"Surrey Face Model shape picture\"></img>\n\nThe full model is available at [http://www.cvssp.org/facemodel](http://www.cvssp.org/facemodel).\n\n## 4D Face Model (4DFM)\n\neos can be used to load, use and do basic fitting with the 4D Face Model (4DFM) from [4dface Ltd](https://www.4dface.io). The model features 39 expressions/action units, and diverse identity variation.\n\n<img src=\"https://raw.githubusercontent.com/patrikhuber/eos/gh-pages/images/4dfm_color_sample.jpg\" width=20% alt=\"4D Face Model colour picture\"></img>\n<img src=\"https://raw.githubusercontent.com/patrikhuber/eos/gh-pages/images/4dfm_shape.png\" width=20% alt=\"4D Face Model shape picture\"></img>\n\nMore information about the model can be found on [www.4dface.io/4dfm](https://www.4dface.io/4dfm/).\n\n## Python bindings\n\neos includes python bindings for some of its functionality (and more can be added!). It can be installed from [PyPI](https://pypi.org/project/eos-py/) with `pip install eos-py`. You will still need the data files from this repository.\nMake sure that you've got >=gcc-7 or >=clang-5 as the default compiler on Linux (for example from the [ubuntu-toolchain-r/test](https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test) repository) or do ``CC=`which gcc-7` CXX=`which g++-7` pip install eos-py``. Also make sure you've got >=cmake-3.8.2 (or >=cmake-3.10.0 for MSVC) in your path.\nIn case of issues, the bindings can also be built manually: Clone the repository and set `-DEOS_GENERATE_PYTHON_BINDINGS=on` when running `cmake` (and optionally set `PYTHON_EXECUTABLE` to point to your python interpreter if it's not found automatically).\n\nAfter having obtained the bindings, they can be used like any python module:\n\n```\nimport eos\nimport numpy as np\n\nmodel = eos.morphablemodel.load_model(\"eos/share/sfm_shape_3448.bin\")\nsample = model.get_shape_model().draw_sample([1.0, -0.5, 0.7])\n\nhelp(eos) # check the documentation\n```\n\nSee [`demo.py`](https://github.com/patrikhuber/eos/blob/master/python/demo.py) for an example on how to run the fitting.\n\n## Matlab bindings\n\n_Experimental (not maintained currently)_: eos includes Matlab bindings for the `fit_shape_and_pose(...)` function, which means the fitting can be run from Matlab. Set `-DEOS_GENERATE_MATLAB_BINDINGS=on` when running `cmake` to build the required mex-file and run the `INSTALL` target to install everything. (Set `Matlab_ROOT_DIR` to point to your Matlab directory if it's not found automatically). More bindings (e.g. the MorphableModel itself) might be added in the future.\n\nGo to the `install/eos/matlab` directory and run [`demo.m`](https://github.com/patrikhuber/eos/blob/master/matlab/demo.m) to see how to run the fitting. The result is a mesh and rendering parameters (pose).\n\n## Documentation\n\nDoxygen: http://patrikhuber.github.io/eos/doc/\n\nThe [fit-model example](https://github.com/patrikhuber/eos/blob/master/examples/fit-model.cpp) and the [Namespace List](http://patrikhuber.github.io/eos/doc/namespaces.html) in doxygen are a good place to start.\n\n\n## License & contributions\n\nThis code is licensed under the Apache License, Version 2.0. The 3D morphable face model under [share/sfm_shape_3448.bin](https://github.com/patrikhuber/eos/blob/master/share/sfm_shape_3448.bin) is free for use for non-commercial purposes. For commercial purposes and to obtain other model resolutions, see [http://www.cvssp.org/facemodel](http://www.cvssp.org/facemodel).\n\nContributions are very welcome! (best in the form of pull requests.) Please use GitHub issues for any bug reports, ideas, and discussions.\n\nIf you use this code in your own work, please cite the following paper: _A Multiresolution 3D Morphable Face Model and Fitting Framework_, P. Huber, G. Hu, R. Tena, P. Mortazavian, W. Koppen, W. Christmas, M. Rätsch, J. Kittler, International Conference on Computer Vision Theory and Applications (VISAPP) 2016, Rome, Italy [[PDF]](http://www.patrikhuber.ch/files/3DMM_Framework_VISAPP_2016.pdf).\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "initial_cache.cmake.template",
          "type": "blob",
          "size": 2.689453125,
          "content": "# NOTE: It is recommended to use vcpkg (https://github.com/Microsoft/vcpkg/) to install the dependencies for eos.\n# However, for users who wish to install the dependencies manually, this file might be helpful to set the library paths explicitly.\n\n# Mechanism via FindLIB.cmake\n# ==============================\n# Boost:\n# -------\n# Windows: Download the pre-built binaries from http://sourceforge.net/projects/boost/files/boost-binaries/ for VS2017 (msvc-14.1 64bit).\n# Either set the windows PATH variable to \"<YOUR_BOOST_DIRECTORY>\\lib64-msvc-14.1\" and CMake will find it, or, set:\n#set(BOOST_ROOT \"C:/boost\" CACHE PATH \"Boost search location\" FORCE)\n# Linux: Boost can usually be installed via a package manager (e.g. apt-get install boost-all-dev) and this variable can be left uncommented.\n#set(BOOST_ROOT \"/home/user/boost/install\" CACHE PATH \"Boost search location\" FORCE)\n\n\n# Mechanism via ConfigLIB.cmake in 3rd party library directory\n# ==============================\n# OpenCV:\n# -------\n# Windows: Download the package from opencv.org, use 2.4.13 or newer (e.g. 3.x), which it include binaries for VS2017. Set this path accordingly.\n#set(OpenCV_DIR \"C:/opencv/install\" CACHE PATH \"Location of OpenCVConfig.cmake\" FORCE)\n# Linux: Usually can be left blank but it can be used if OpenCV is not found.\n#set(OpenCV_DIR \"/home/user/opencv/install/share/OpenCV\" CACHE PATH \"Location of OpenCVConfig.cmake\" FORCE)\n#\n# Ceres:\n# -------\n#set(Ceres_DIR \"C:/ceres/install-vs2017/CMake\" CACHE PATH \"Location of CeresConfig.cmake\" FORCE)\n\n# Set the path to the python interpreter if you want to build the python bindings and it doesn't find it automatically:\n# ==============================\n#set(PYTHON_EXECUTABLE \"C:/Users/user/AppData/Local/Programs/Python/Python36/python.exe\" CACHE PATH \"Path to the python interpreter.\" FORCE)\n\n# Set the path to the Matlab root directory if you want to build the Matlab bindings and it doesn't find Matlab automatically:\n# ==============================\n#set(Matlab_ROOT_DIR \"/opt/matlab\" CACHE PATH \"Path to the Matlab installation directory.\" FORCE)\n\n# Configuration options\n# ==============================\nset(EOS_BUILD_EXAMPLES ON CACHE BOOL \"Build the example applications.\" FORCE)\nset(EOS_BUILD_CERES_EXAMPLE OFF CACHE BOOL \"Build the fit-model-ceres example (requires Ceres).\" FORCE)\nset(EOS_BUILD_UTILS OFF CACHE BOOL \"Build utility applications.\" FORCE)\nset(EOS_BUILD_DOCUMENTATION OFF CACHE BOOL \"Build the library documentation.\" FORCE)\nset(EOS_GENERATE_PYTHON_BINDINGS OFF CACHE BOOL \"Build python bindings. Requires python to be installed.\" FORCE)\nset(EOS_GENERATE_MATLAB_BINDINGS OFF CACHE BOOL \"Build Matlab bindings. Requires Matlab with the compiler installed or the Matlab Compiler Runtime.\" FORCE)\n"
        },
        {
          "name": "matlab",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.1162109375,
          "content": "import os\nimport re\nimport sys\nimport platform\nimport subprocess\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n\n    def run(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError(\"CMake must be installed to build the following extensions: \" +\n                               \", \".join(e.name for e in self.extensions))\n\n        if platform.system() == \"Windows\":\n            cmake_version = LooseVersion(re.search(r'version\\s*([\\d.]+)', out.decode()).group(1))\n            if cmake_version < '3.10.0':\n                raise RuntimeError(\"CMake >= 3.10.0 is required on Windows\")\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n                      '-DPYTHON_EXECUTABLE=' + sys.executable,\n                      '-DEOS_BUILD_EXAMPLES=OFF',\n                      '-DEOS_GENERATE_PYTHON_BINDINGS=ON'\n                      ]\n\n        cfg = 'Debug' if self.debug else 'Release'\n        build_args = ['--config', cfg]\n\n        if platform.system() == \"Windows\":\n            if platform.architecture()[0] == '32bit':\n                cmake_args += ['-A', 'Win32']\n            else:\n                cmake_args += ['-A', 'x64']\n            cmake_args += ['-G', 'Visual Studio 17 2022']\n            cmake_args += ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir)]\n            build_args += ['--', '/m']\n        else:\n            cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]\n            build_args += ['--', '-j2']\n\n        env = os.environ.copy()\n        env['CXXFLAGS'] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(env.get('CXXFLAGS', ''),\n                                                              self.distribution.get_version())\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        subprocess.check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n        subprocess.check_call(['cmake', '--build', '.'] + build_args, cwd=self.build_temp)\n\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='eos-py',\n    version='1.5.0',\n    author='Patrik Huber',\n    author_email='patrikhuber@gmail.com',\n    description='Python bindings for eos - A lightweight 3D Morphable Face Model fitting library in modern C++11/14',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/patrikhuber/eos',\n    license='Apache-2.0',\n    ext_modules=[CMakeExtension('eos')],\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n)\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg-configuration.json",
          "type": "blob",
          "size": 0.33984375,
          "content": "{\n  \"default-registry\": {\n    \"kind\": \"git\",\n    \"baseline\": \"b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c\",\n    \"repository\": \"https://github.com/microsoft/vcpkg\"\n  },\n  \"registries\": [\n    {\n      \"kind\": \"artifact\",\n      \"location\": \"https://github.com/microsoft/vcpkg-ce-catalog/archive/refs/heads/main.zip\",\n      \"name\": \"microsoft\"\n    }\n  ]\n}\n"
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.4462890625,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json\",\n  \"name\": \"eos\",\n  \"version\": \"1.5.0\",\n  \"dependencies\": [\n    \"boost-filesystem\",\n    \"boost-program-options\",\n    {\n      \"name\": \"opencv4\",\n      \"features\": [ \"jpeg\", \"png\" ],\n      \"default-features\": false\n    }\n  ],\n  \"features\": {\n    \"ceres\": {\n      \"description\": \"Required for non-linear fitting\",\n      \"dependencies\": [ \"ceres\" ]\n    }\n  }\n}\n"
        }
      ]
    }
  ]
}