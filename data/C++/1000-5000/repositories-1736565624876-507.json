{
  "metadata": {
    "timestamp": 1736565624876,
    "page": 507,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "klee/klee",
      "stars": 2678,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.677734375,
          "content": "task:\n  freebsd_instance:\n    matrix:\n      - image_family: freebsd-15-0-snap\n  deps_script:\n    - sed -i.bak -e 's/quarterly/latest/' /etc/pkg/FreeBSD.conf\n    - env ASSUME_ALWAYS_YES=yes pkg update -f\n    - env ASSUME_ALWAYS_YES=yes pkg install -y llvm13 gmake z3 cmake pkgconf google-perftools python311 py311-sqlite3 py311-tabulate\n  build_script:\n    - mkdir build\n    - cd build\n    - cmake -DLLVM_DIR=/usr/local/llvm11 -DMAKE_BINARY=/usr/local/bin/gmake -DENABLE_TCMALLOC:BOOL=true -DENABLE_POSIX_RUNTIME:BOOL=ON -DENABLE_SOLVER_Z3:BOOL=true -DENABLE_SYSTEM_TESTS:BOOL=ON ..\n    - gmake\n  test_script:\n    - sed -i.bak -e 's/lit\\./lit13\\./' test/lit.cfg\n    - cd build\n    - gmake check\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0419921875,
          "content": "---\nBasedOnStyle: LLVM\nStandard: c++17\n...\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.318359375,
          "content": "codecov:\n  disable_default_path_fixes: true\n\ncoverage:\n  range: 70...90\n  precision: 2\n  round: down\n  status:\n    project: no\n    patch: yes\n    changes: no\n\nfixes:\n  - \"/tmp/klee_src::\"\n\nignore:\n  - \"test/\"\n  - \"unittests\"\n  - \"**/test-utils\"\n\ncomment:\n  layout: \"header, diff, changes, uncovered, tree\"\n  behavior: default\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "#.git - Don't delete git, we need that to generate the correct version number\nautom4te.cache\n**/.*.swp\nDockerfile\ncmake-*/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.041015625,
          "content": "* text=auto\n\n*.h text\n*.c text\n*.cpp text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.36328125,
          "content": "Release/\nRelease+Asserts/\nDebug/\nDebug+Asserts/\nOutput/\n\n# commonly used as cmake build directory\n/build\n\ncscope.*\n*~\n\n*.log\n*.sum\n*.out\n*.status\n\n# In source build files\ndocs/doxygen.cfg\ninclude/klee/Config/CompileTimeInfo.h\n*.config\n\nconfig.h\nsite.exp\n\n# Site file for llvm-lit\nlit.site.cfg\n\n# Autoconf files\nautoconf/aclocal.m4\nautoconf/autom4te.cache/\nautom4te.cache/\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.1015625,
          "content": "# Tell ShellCheck to use bash when checking scripts\n# This is alternative for disable=SC2148\nshell=bash\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 27.341796875,
          "content": "#===------------------------------------------------------------------------===#\n#\n#                     The KLEE Symbolic Virtual Machine\n#\n# This file is distributed under the University of Illinois Open Source\n# License. See LICENSE.TXT for details.\n#\n#===------------------------------------------------------------------------===#\n\n###############################################################################\n# Minimum CMake version and policies\n###############################################################################\ncmake_minimum_required(VERSION 3.16.0)\nproject(KLEE CXX C)\n\n###############################################################################\n# Project version\n###############################################################################\nset(KLEE_VERSION_MAJOR 3)\nset(KLEE_VERSION_MINOR 2-pre)\nset(KLEE_VERSION \"${KLEE_VERSION_MAJOR}.${KLEE_VERSION_MINOR}\")\n\n# If a patch is needed, we can add KLEE_VERSION_PATCH\n# set(KLEE_VERSION_PATCH 0)\n# set(KLEE_VERSION \"${KLEE_VERSION_MAJOR}.${KLEE_VERSION_MINOR}.${KLEE_VERSION_PATCH}\")\n\nmessage(STATUS \"KLEE version ${KLEE_VERSION}\")\nset(PACKAGE_STRING \"\\\"KLEE ${KLEE_VERSION}\\\"\")\nset(PACKAGE_URL \"\\\"https://klee-se.org/\\\"\")\n\n################################################################################\n# Sanity check - Disallow building in source.\n################################################################################\nif (\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n  message(FATAL_ERROR \"In source builds are not allowed. You should invoke \"\n          \"CMake from a different directory.\")\nendif()\n\n################################################################################\n# Build type\n################################################################################\nmessage(STATUS \"CMake generator: ${CMAKE_GENERATOR}\")\nif (DEFINED CMAKE_CONFIGURATION_TYPES)\n  # Multi-configuration build (e.g. Xcode). Here\n  # CMAKE_BUILD_TYPE doesn't matter\n  message(STATUS \"Available configurations: ${CMAKE_CONFIGURATION_TYPES}\")\nelse()\n  # Single configuration generator (e.g. Unix Makefiles, Ninja)\n  set(available_build_types Debug Release RelWithDebInfo MinSizeRel)\n  if(NOT CMAKE_BUILD_TYPE)\n    message(STATUS \"CMAKE_BUILD_TYPE is not set. Setting default\")\n    message(STATUS \"The available build types are: ${available_build_types}\")\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n        \"Options are ${available_build_types}\"\n        FORCE)\n    # Provide drop down menu options in cmake-gui\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${available_build_types})\n  endif()\n  message(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\n  # Check the selected build type is valid\n  list(FIND available_build_types \"${CMAKE_BUILD_TYPE}\" _build_type_index)\n  if (\"${_build_type_index}\" EQUAL \"-1\")\n    message(FATAL_ERROR \"\\\"${CMAKE_BUILD_TYPE}\\\" is an invalid build type.\\n\"\n      \"Use one of the following build types ${available_build_types}\")\n  endif()\nendif()\n\n# Reference specific library paths used during linking for install\nSET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n# use, i.e. don't skip the full RPATH for the build tree\nset(CMAKE_SKIP_BUILD_RPATH FALSE)\n\n################################################################################\n# Add our CMake module directory to the list of module search directories\n################################################################################\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/modules\")\n\n################################################################################\n# Assertions\n################################################################################\noption(ENABLE_KLEE_ASSERTS \"Enable KLEE assertions\" ON)\nif (ENABLE_KLEE_ASSERTS)\n  message(STATUS \"KLEE assertions enabled\")\n  # We have to undefine `NDEBUG` (which CMake adds by default) using `FLAGS`\n  # and not `DEFINES` since `target_compile_definitions` does not support `-U`.\n  list(APPEND KLEE_COMPONENT_CXX_FLAGS \"-UNDEBUG\")\nelse()\n  message(STATUS \"KLEE assertions disabled\")\n  list(APPEND KLEE_COMPONENT_CXX_DEFINES \"-DNDEBUG\")\nendif()\n\n################################################################################\n# KLEE timestamps\n################################################################################\noption(KLEE_ENABLE_TIMESTAMP \"Add timestamps to KLEE sources\" OFF)\n\n################################################################################\n# Include useful CMake functions\n################################################################################\ninclude(GNUInstallDirs)\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSymbolExists)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\ninclude(CheckLibraryExists)\ninclude(CheckPrototypeDefinition)\ninclude(CMakePushCheckState)\n\n################################################################################\n# Find LLVM\n################################################################################\nfind_package(LLVM REQUIRED CONFIG HINTS \"${LLVM_DIR}\")\nmessage(STATUS \"LLVM directory ${LLVM_DIR}\")\nset(LLVMCC \"${LLVM_TOOLS_BINARY_DIR}/clang\"\n  CACHE\n  PATH\n  \"Path to C bitcode compiler\"\n  )\nset(LLVMCXX \"${LLVM_TOOLS_BINARY_DIR}/clang++\"\n  CACHE\n  PATH\n  \"Path to C++ bitcode compiler\"\n)\n\nif (LLVM_ENABLE_ASSERTIONS)\n  # Certain LLVM debugging macros only work when LLVM was built with asserts\n  set(ENABLE_KLEE_DEBUG 1) # for config.h\nelse()\n  unset(ENABLE_KLEE_DEBUG) # for config.h\nendif()\n\n# Warn about mixing build types.\n# This is likely a bad idea because some of LLVM's header files use the NDEBUG\n# macro which can change things like data layout.\nif (LLVM_ENABLE_ASSERTIONS AND (NOT ENABLE_KLEE_ASSERTS))\n  message(WARNING\n    \"LLVM was built with assertions but KLEE will be built without them.\\n\"\n    \"This might lead to unexpected behaviour.\"\n  )\nelseif ((NOT LLVM_ENABLE_ASSERTIONS) AND ENABLE_KLEE_ASSERTS)\n  message(WARNING\n    \"LLVM was built without assertions but KLEE will be built with them.\\n\"\n    \"This might lead to unexpected behaviour.\"\n  )\nendif()\n\nlist(APPEND KLEE_COMPONENT_CXX_DEFINES ${LLVM_DEFINITIONS})\nlist(APPEND KLEE_COMPONENT_EXTRA_INCLUDE_DIRS ${LLVM_INCLUDE_DIRS})\n\n# Find llvm-link\nset(LLVM_LINK \"${LLVM_TOOLS_BINARY_DIR}/llvm-link\"\n  CACHE\n  PATH\n  \"Path to bitcode linker\"\n  )\nif (NOT EXISTS \"${LLVM_LINK}\")\n  message(FATAL_ERROR \"Failed to find llvm-link at \\\"${LLVM_LINK}\\\"\")\nendif()\n\n# Find llvm-ar\nset(LLVM_AR \"${LLVM_TOOLS_BINARY_DIR}/llvm-ar\"\n  CACHE\n  PATH\n  \"Path to bitcode archive tool\"\n  )\nif (NOT EXISTS \"${LLVM_AR}\")\n  message(FATAL_ERROR \"Failed to find llvm-ar at \\\"${LLVM_AR}\\\"\")\nendif()\n\n# Find llvm-as\nset(LLVM_AS \"${LLVM_TOOLS_BINARY_DIR}/llvm-as\"\n  CACHE\n  PATH\n  \"Path to bitcode assembly tool\"\n  )\nif (NOT EXISTS \"${LLVM_AS}\")\n  message(FATAL_ERROR \"Failed to find llvm-as at \\\"${LLVM_AS}\\\"\")\nendif()\n\n# Check for dynamic linking\nif (LLVM_LINK_LLVM_DYLIB)\n  set(USE_LLVM_SHARED USE_SHARED)\nendif()\n\n################################################################################\n# C++ version\n################################################################################\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n################################################################################\n# Warnings\n################################################################################\ninclude(${CMAKE_SOURCE_DIR}/cmake/compiler_warnings.cmake)\n\n################################################################################\n# Solvers\n################################################################################\n# STP\ninclude(${CMAKE_SOURCE_DIR}/cmake/find_stp.cmake)\n# Z3\ninclude(${CMAKE_SOURCE_DIR}/cmake/find_z3.cmake)\n# metaSMT\ninclude(${CMAKE_SOURCE_DIR}/cmake/find_metasmt.cmake)\n\nif ((NOT ${ENABLE_Z3}) AND (NOT ${ENABLE_STP}) AND (NOT ${ENABLE_METASMT}))\n  message(FATAL_ERROR \"No solver was specified. At least one solver is required.\"\n    \"You should enable a solver by passing one of more the following options\"\n    \" to cmake:\\n\"\n    \"\\\"-DENABLE_SOLVER_STP=ON\\\"\\n\"\n    \"\\\"-DENABLE_SOLVER_Z3=ON\\\"\\n\"\n    \"\\\"-DENABLE_SOLVER_METASMT=ON\\\"\")\nendif()\n\n###############################################################################\n# Exception handling\n###############################################################################\nif (NOT LLVM_ENABLE_EH)\n  if (ENABLE_SOLVER_METASMT)\n    message(WARNING \"Not disabling exceptions because metaSMT uses them\")\n  else()\n    list(APPEND KLEE_COMPONENT_CXX_FLAGS \"-fno-exceptions\")\n  endif()\nendif()\n\n###############################################################################\n# RTTI\n###############################################################################\nif (NOT LLVM_ENABLE_RTTI)\n  if (ENABLE_SOLVER_METASMT AND metaSMT_REQUIRE_RTTI)\n    message(FATAL_ERROR\n      \"RTTI cannot be disabled because metaSMT uses them.\"\n      \"This build configuration is not supported and will likely not work.\"\n      \"You should recompile LLVM with RTTI enabled.\")\n  else()\n    list(APPEND KLEE_COMPONENT_CXX_FLAGS \"-fno-rtti\")\n  endif()\nendif()\n\n################################################################################\n# Support for compressed logs\n################################################################################\nfind_package(ZLIB)\nif (ZLIB_FOUND)\n  set(ENABLE_ZLIB_DEFAULT ON)\nelse()\n  set(ENABLE_ZLIB_DEFAULT OFF)\nendif()\noption(ENABLE_ZLIB \"Enable use of zlib\" ${ENABLE_ZLIB_DEFAULT})\nif (ENABLE_ZLIB)\n  message(STATUS \"Zlib support enabled\")\n  if (ZLIB_FOUND)\n    set(HAVE_ZLIB_H 1) # For config.h\n    list(APPEND KLEE_COMPONENT_EXTRA_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})\n  else()\n    message(FATAL_ERROR \"ENABLE_ZLIB is true but zlib could not be found\")\n  endif()\nelse()\n  message(STATUS \"Zlib support disabled\")\n  unset(HAVE_ZLIB_H) # For config.h\nendif()\n\n################################################################################\n# TCMalloc support\n################################################################################\nOPTION(ENABLE_TCMALLOC \"Enable TCMalloc support\" ON)\nif (ENABLE_TCMALLOC)\n  message(STATUS \"TCMalloc support enabled\")\n  set(TCMALLOC_HEADER \"gperftools/malloc_extension.h\")\n  find_path(TCMALLOC_INCLUDE_DIR\n    \"${TCMALLOC_HEADER}\"\n    HINTS \"${TCMALLOC_DIR}/include\"\n    )\n  cmake_push_check_state()\n  list(APPEND CMAKE_REQUIRED_INCLUDES ${TCMALLOC_INCLUDE_DIR})\n  check_include_file_CXX(\"${TCMALLOC_HEADER}\" HAVE_GPERFTOOLS_MALLOC_EXTENSION_H)\n  cmake_pop_check_state()\n\n  if (${HAVE_GPERFTOOLS_MALLOC_EXTENSION_H})\n    find_library(TCMALLOC_LIBRARIES\n      NAMES tcmalloc tcmalloc_minimal\n      HINTS \"${TCMALLOC_DIR}/lib\"\n      DOC \"TCMalloc libraries\"\n    )\n    if (NOT TCMALLOC_LIBRARIES)\n      message(FATAL_ERROR\n        \"Found \\\"${TCMALLOC_HEADER}\\\" but could not find library\")\n    endif()\n    list(APPEND KLEE_COMPONENT_EXTRA_INCLUDE_DIRS ${TCMALLOC_INCLUDE_DIR})\n    # TCMalloc's documentation says its safest to pass these flags when\n    # building with gcc because gcc can optimize assuming its using its own\n    # malloc.\n    list(APPEND KLEE_COMPONENT_CXX_FLAGS \"-fno-builtin-malloc\" \"-fno-builtin-calloc\" \"-fno-builtin-realloc\" \"-fno-builtin-free\")\n  else()\n    message(FATAL_ERROR \"Can't find \\\"${TCMALLOC_HEADER}\\\"\")\n  endif()\nelse()\n  unset(HAVE_GPERFTOOLS_MALLOC_EXTENSION_H)\n  unset(HAVE_GPERFTOOLS_MALLOC_EXTENSION_H CACHE)\n  message(STATUS \"TCMalloc support disabled\")\nendif()\n\n################################################################################\n# Detect SQLite3\n################################################################################\nfind_package(SQLite3)\nif (NOT SQLite3_FOUND)\n  message( FATAL_ERROR \"SQLite3 not found, please install\" )\nendif()\n\nfind_program(\n  SQLITE_CLI\n  NAMES \"sqlite3\"\n  DOC \"Path to sqlite3 tool\"\n)\n\nif (NOT SQLITE_CLI)\n  set(SQLITE_CLI \"\")\nendif()\n\n################################################################################\n# Detect libcap\n################################################################################\ncheck_include_file(\"sys/capability.h\" HAVE_SYS_CAPABILITY_H)\nif (HAVE_SYS_CAPABILITY_H)\n  find_library(LIBCAP_LIBRARIES\n    NAMES cap\n    DOC \"libcap library\"\n  )\n# On FreeBSD <sys/capability.h> is a different thing\n  if (NOT LIBCAP_LIBRARIES OR CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n    set(HAVE_SYS_CAPABILITY_H 0)\n  endif()\nelse()\n  set(LIBCAP_LIBRARIES \"\")\nendif()\n\n################################################################################\n# Detect libutil\n################################################################################\ncheck_include_file(pty.h HAVE_PTY_H)\ncheck_include_file(util.h HAVE_UTIL_H)\ncheck_include_file(libutil.h HAVE_LIBUTIL_H)\nif (HAVE_PTY_H OR HAVE_UTIL_H OR HAVE_LIBUTIL_H)\n  check_function_exists(openpty openpty_in_libc)\n  if (NOT openpty_in_libc)\n    check_library_exists(util openpty \"\" openpty_in_libutil)\n    if (openpty_in_libutil)\n      set(LIBUTIL_LIBRARIES util)\n    else ()\n      message(FATAL_ERROR \"Could not find libutil\")\n    endif (openpty_in_libutil)\n  endif (NOT openpty_in_libc)\nendif (HAVE_PTY_H OR HAVE_UTIL_H OR HAVE_LIBUTIL_H)\n\n################################################################################\n# Miscellaneous header file detection\n################################################################################\ncheck_cxx_symbol_exists(__ctype_b_loc ctype.h HAVE_CTYPE_EXTERNALS)\ncheck_cxx_symbol_exists(mallinfo malloc.h HAVE_MALLINFO)\ncheck_cxx_symbol_exists(mallinfo2 malloc.h HAVE_MALLINFO2)\ncheck_cxx_symbol_exists(malloc_zone_statistics malloc/malloc.h HAVE_MALLOC_ZONE_STATISTICS)\n\ncheck_include_file(sys/statfs.h HAVE_SYSSTATFS_H)\n\n# FIXME: This is needed by the runtime not KLEE itself so we are testing the wrong\n# compiler.\ncheck_include_file(\"selinux/selinux.h\" HAVE_SELINUX_SELINUX_H)\ncheck_include_file(\"sys/acl.h\" HAVE_SYS_ACL_H)\nif (HAVE_SELINUX_SELINUX_H)\n  message(STATUS \"SELinux support enabled\")\n  set(HAVE_SELINUX 1)\n  # Test what function signature we need to use for SELinux. The signatures\n  # have changed between 2.2 and 2.3. In particular, the type of the \"security\n  # context\" parameter was changed from char * to const char *, with this\n  # patch: [PATCH] Get rid of security_context_t and fix const declarations.\n  # [http://www.spinics.net/lists/selinux/msg14827.html]\n  check_prototype_definition(setcon\n    \"int setcon(char* context)\"\n    \"0\"\n    \"selinux/selinux.h\"\n    SELINUX_SECURITY_CTX_NO_CONST\n  )\n  if (SELINUX_SECURITY_CTX_NO_CONST)\n    message(STATUS \"security_context_t is char*\")\n    set(KLEE_SELINUX_CTX_CONST \" \")\n  else()\n    check_prototype_definition(setcon\n      \"int setcon(const char* context)\"\n      \"0\"\n      \"selinux/selinux.h\"\n      SELINUX_SECURITY_CTX_WITH_CONST\n    )\n    if (SELINUX_SECURITY_CTX_WITH_CONST)\n      message(STATUS \"security_context_t is const char*\")\n      set(KLEE_SELINUX_CTX_CONST \"const\")\n    else()\n      message(FATAL_ERROR \"Failed to determine function signature for \\\"setcon\\\"\")\n    endif()\n  endif()\nelse()\n  message(STATUS \"SELinux support disabled\")\n  set(HAVE_SELINUX 0)\nendif()\n\ncmake_push_check_state()\ncheck_c_source_compiles(\"\n        #include <fcntl.h>\n        #include <stddef.h>\n        #include <sys/stat.h>\n\n        int main(void) {\n          struct stat buf;\n          #pragma GCC diagnostic error \\\"-Wnonnull\\\"\n          fstatat(0, NULL, &buf, 0);\n        }\n        \"\n        FSTATAT_PATH_ACCEPTS_NULL)\ncmake_pop_check_state()\n\n################################################################################\n# KLEE runtime support\n################################################################################\n# This is set here and not in `runtime` because `config.h` needs to be generated.\n\nset(available_klee_runtime_build_types\n  \"Release\"\n  \"Release+Debug\"\n  \"Release+Asserts\"\n  \"Release+Debug+Asserts\"\n  \"Debug\"\n  \"Debug+Asserts\"\n)\nif (NOT KLEE_RUNTIME_BUILD_TYPE)\n  message(STATUS \"KLEE_RUNTIME_BUILD_TYPE is not set. Setting default\")\n  message(STATUS \"The available runtime build types are: ${available_klee_runtime_build_types}\")\n  set(KLEE_RUNTIME_BUILD_TYPE \"Debug+Asserts\" CACHE STRING\n    \"Options are ${available_klee_runtime_build_types}\"\n    FORCE)\nendif()\n# Provide drop down menu options in cmake-gui\nset_property(CACHE\n  KLEE_RUNTIME_BUILD_TYPE\n  PROPERTY STRINGS ${available_klee_runtime_build_types})\nmessage(STATUS \"KLEE_RUNTIME_BUILD_TYPE: ${KLEE_RUNTIME_BUILD_TYPE}\")\n\n# Check availability of 32bit support for platform\ninclude(CheckCSourceRuns)\ncmake_push_check_state()\nset(CMAKE_REQUIRED_FLAGS \"-m32\")\ncheck_c_source_runs(\"int main(int argc, char** argv){return 0;}\" CHECK_M32_SUPPORT)\ncmake_pop_check_state()\nif (NOT CHECK_M32_SUPPORT)\n  set(M32_SUPPORTED 0)\nelse()\n  set(M32_SUPPORTED 1)\nendif()\n\nmessage(STATUS \"32bit platform supported: ${M32_SUPPORTED}\")\n\nset(KLEE_INSTALL_RUNTIME_DIR \"${CMAKE_INSTALL_FULL_LIBDIR}/klee/runtime\")\n\n# Location where KLEE will look for the built runtimes by default.\nset(KLEE_RUNTIME_DIRECTORY \"${CMAKE_BINARY_DIR}/runtime/lib\")\n\nfile(MAKE_DIRECTORY ${KLEE_RUNTIME_DIRECTORY})\n\n################################################################################\n# KLEE POSIX Runtime Support\n################################################################################\noption(ENABLE_POSIX_RUNTIME \"Enable KLEE's POSIX runtime\" OFF)\nif (ENABLE_POSIX_RUNTIME)\n  message(STATUS \"POSIX runtime enabled\")\nelse()\n  message(STATUS \"POSIX runtime disabled\")\nendif()\n\n################################################################################\n# KLEE uclibc support\n################################################################################\nset(KLEE_UCLIBC_PATH \"\" CACHE PATH \"Path to klee-uclibc root directory\")\nset(KLEE_UCLIBC_BCA_NAME \"klee-uclibc.bca\")\nif (NOT KLEE_UCLIBC_PATH STREQUAL \"\")\n  # Find the C library bitcode archive\n  set(KLEE_UCLIBC_C_BCA \"${KLEE_UCLIBC_PATH}/lib/libc.a\")\n  if (NOT EXISTS \"${KLEE_UCLIBC_C_BCA}\")\n    message(FATAL_ERROR\n      \"klee-uclibc library not found at \\\"${KLEE_UCLIBC_C_BCA}\\\". Set KLEE_UCLIBC_PATH to klee-uclibc root directory or empty string.\")\n  endif()\n  message(STATUS \"Found klee-uclibc library: \\\"${KLEE_UCLIBC_C_BCA}\\\"\")\n  # Copy KLEE_UCLIBC_C_BCA so KLEE can find it where it is expected.\n  execute_process(COMMAND ${CMAKE_COMMAND} -E copy\n    \"${KLEE_UCLIBC_C_BCA}\"\n    \"${KLEE_RUNTIME_DIRECTORY}/${KLEE_UCLIBC_BCA_NAME}\"\n  )\nelse()\n  message(STATUS \"Skipping copying of klee-uclibc runtime\")\nendif()\n\n################################################################################\n# KLEE libc++ support\n################################################################################\noption(ENABLE_KLEE_LIBCXX \"Enable libc++ for klee\" OFF)\nif (ENABLE_KLEE_LIBCXX)\n  message(STATUS \"klee-libc++ support enabled\")\n  set(SUPPORT_KLEE_LIBCXX 1) # For config.h\n\n  find_file(KLEE_LIBCXX_BC_PATH\n          NAMES libc++.bca libc++.so.bc libc++.dylib.bc\n          DOC \"Path to directory containing libc++ shared object (bitcode)\"\n          PATH_SUFFIXES \"lib\" \"lib/x86_64-unknown-linux-gnu\"\n          HINTS ${KLEE_LIBCXX_DIR}\n          REQUIRED\n  )\n  message(STATUS \"Found libc++ library: \\\"${KLEE_LIBCXX_BC_PATH}\\\"\")\n\n  find_path(KLEE_LIBCXX_PLATFORM_INCLUDE_PATH\n          NAMES __config_site #We are searching for a platform-specific C++ library header called `__config_site`\n          DOC \"Path to platform-specific libc++ include directory\"\n          PATH_SUFFIXES \"x86_64-unknown-linux-gnu/c++/v1\" \"include/x86_64-unknown-linux-gnu/c++/v1\"\n          HINTS ${KLEE_LIBCXX_INCLUDE_DIR}\n          NO_DEFAULT_PATH # Make sure we don't pick-up the standard library's path\n  )\n\n  find_path(KLEE_LIBCXX_INCLUDE_PATH\n          NAMES cerrno #We are searching for a C++ library header called `cerrno`\n          DOC \"Path to libc++ include directory\"\n          PATH_SUFFIXES \"c++/v1\" \"include/c++/v1\"\n          HINTS ${KLEE_LIBCXX_INCLUDE_DIR}\n          REQUIRED\n          NO_DEFAULT_PATH # Make sure we don't pick-up the standard library's path\n  )\n\n  message(STATUS \"Found libc++ include path: ${KLEE_LIBCXX_INCLUDE_PATH} and ${KLEE_LIBCXX_PLATFORM_INCLUDE_PATH} \")\n\n\n  # Copy KLEE_LIBCXX_BC_PATH so KLEE can find it where it is expected.\n  file(MAKE_DIRECTORY \"${KLEE_RUNTIME_DIRECTORY}\")\n  execute_process(COMMAND ${CMAKE_COMMAND} -E copy\n    \"${KLEE_LIBCXX_BC_PATH}\"\n    \"${KLEE_RUNTIME_DIRECTORY}/${KLEE_LIBCXX_BC_PATH}\"\n  )\n  list(APPEND KLEE_COMPONENT_CXX_DEFINES\n    -DKLEE_LIBCXX_BC_NAME=\\\"${KLEE_LIBCXX_BC_PATH}\\\")\n\nelse()\n  message(STATUS \"libc++ support disabled\")\n  set(SUPPORT_KLEE_LIBCXX 0) # For config.h\nendif()\n\n################################################################################\n# KLEE Exception Handling Support for C++\n################################################################################\noption(ENABLE_KLEE_EH_CXX \"Enable support for C++ Exceptions\" OFF)\nif (ENABLE_KLEE_EH_CXX)\n  if (NOT ENABLE_KLEE_LIBCXX)\n    message(FATAL_ERROR \"C++ Exception support requires klee-libc++.\"\n      \"Pass -DENABLE_KLEE_LIBCXX=ON to CMake to enable it.\")\n  endif()\n\n  set(KLEE_LIBCXXABI_SRC_DIR \"\" CACHE PATH \"Path to libc++abi source directory\")\n  if (NOT EXISTS \"${KLEE_LIBCXXABI_SRC_DIR}\")\n    message(FATAL_ERROR\n      \"KLEE_LIBCXXABI_SRC_DIR (\\\"${KLEE_LIBCXXABI_SRC_DIR}\\\") does not exist.\\n\"\n      \"Try passing -DKLEE_LIBCXXABI_SRC_DIR=<path> to CMake where <path> is the\"\n      \"libc++abi source directory.\")\n  endif()\n  message(STATUS \"Use libc++abi source path: \\\"${KLEE_LIBCXXABI_SRC_DIR}\\\"\")\n\n  set(SUPPORT_KLEE_EH_CXX 1) # For config.h\n  message(STATUS \"Support for C++ Exceptions enabled\")\n\nelse()\n  set(SUPPORT_KLEE_EH_CXX 0) # For config.h\nendif()\n\n################################################################################\n# Sanitizer support\n################################################################################\nmessage(STATUS \"CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}\")\nset(IS_ASAN_BUILD 0)\nset(IS_UBSAN_BUILD 0)\nset(IS_MSAN_BUILD 0)\nstring(REPLACE \" \" \";\" _flags \"${CMAKE_CXX_FLAGS}\")\nforeach(arg IN ITEMS ${_flags})\n  if (${arg} STREQUAL -fsanitize=address)\n    set(IS_ASAN_BUILD 1)\n  elseif (${arg} STREQUAL -fsanitize=undefined)\n    set(IS_UBSAN_BUILD 1)\n  elseif (${arg} STREQUAL -fsanitize=memory)\n    set(IS_MSAN_BUILD 1)\n  endif()\nendforeach()\nunset(_flags)\n\n################################################################################\n# Generate `config.h`\n################################################################################\nconfigure_file(${CMAKE_SOURCE_DIR}/include/klee/Config/config.h.cmin\n  ${CMAKE_BINARY_DIR}/include/klee/Config/config.h)\n\n################################################################################\n# Generate `CompileTimeInfo.h`\n################################################################################\nif (EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n  # Get information from git. We use third-party code to do this. The nice\n  # thing about this code is it will trigger a re-configure if the HEAD changes\n  # which means when we build KLEE, it should always have the correct git\n  # information.\n  include(${CMAKE_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake)\n  get_git_head_revision(_NOT_USED_KLEE_GIT_REFSPEC KLEE_GIT_SHA1HASH)\n  message(STATUS \"KLEE_GIT_SHA1HASH: ${KLEE_GIT_SHA1HASH}\")\nelse()\n  set(KLEE_GIT_SHA1HASH \"unknown\")\nendif()\nset(AUTO_GEN_MSG \"AUTOMATICALLY GENERATED. DO NOT EDIT!\")\nconfigure_file(${CMAKE_SOURCE_DIR}/include/klee/Config/CompileTimeInfo.h.cmin\n  ${CMAKE_BINARY_DIR}/include/klee/Config/CompileTimeInfo.h\n)\n\n################################################################################\n# Set KLEE-specific include files\n################################################################################\n\nset(KLEE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/include ${CMAKE_BINARY_DIR}/include)\n\n################################################################################\n# Set default location for targets in the build directory\n################################################################################\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(KLEE_UTILS_DIR ${CMAKE_SOURCE_DIR}/utils)\n\n\n################################################################################\n# Report the value of various variables to aid debugging\n################################################################################\nmessage(STATUS \"KLEE_COMPONENT_EXTRA_INCLUDE_DIRS: '${KLEE_COMPONENT_EXTRA_INCLUDE_DIRS}'\")\nmessage(STATUS \"KLEE_COMPONENT_CXX_DEFINES: '${KLEE_COMPONENT_CXX_DEFINES}'\")\nmessage(STATUS \"KLEE_COMPONENT_CXX_FLAGS: '${KLEE_COMPONENT_CXX_FLAGS}'\")\nmessage(STATUS \"KLEE_SOLVER_LIBRARIES: '${KLEE_SOLVER_LIBRARIES}'\")\n\n################################################################################\n# KLEE components\n################################################################################\nadd_subdirectory(lib)\nadd_subdirectory(runtime)\n\n################################################################################\n# KLEE tools\n################################################################################\nadd_subdirectory(tools)\n\n################################################################################\n# Testing\n################################################################################\noption(ENABLE_UNIT_TESTS \"Enable unit tests\" OFF)\noption(ENABLE_SYSTEM_TESTS \"Enable system tests\" ON)\n\nif (ENABLE_UNIT_TESTS OR ENABLE_SYSTEM_TESTS)\n  message(STATUS \"Testing is enabled\")\n\n  # Find lit\n  set(LIT_TOOL_NAMES \"llvm-lit\" \"lit\")\n  find_program(\n    LIT_TOOL\n    NAMES ${LIT_TOOL_NAMES}\n    HINTS \"${LLVM_TOOLS_BINARY_DIR}\"\n    DOC \"Path to lit tool\"\n  )\n\n  set(LIT_ARGS\n    \"-v;-s\"\n    CACHE\n    STRING\n    \"Lit arguments\"\n  )\n\n  if ((NOT LIT_TOOL) OR (NOT EXISTS \"${LIT_TOOL}\"))\n    message(FATAL_ERROR \"The lit tool is required for testing.\"\n      \" CMake tried to find lit with the following names \\\"${LIT_TOOL_NAMES}\\\"\"\n      \" but it could not be found.\\n\"\n      \"You should either disable testing by passing \"\n      \"\\\"-DENABLE_UNIT_TESTS=OFF -DENABLE_SYSTEM_TESTS=OFF\\\" to cmake\"\n      \" or you should install the lit tool from the Python Package Index by running\"\n      \" \\\"pip install lit\\\". Note \\\"pip\\\" requires root privileges to run. If you\"\n      \" don't have root privileges you can create a virtual python environment using\"\n      \" the \\\"virtualenv\\\" tool and run \\\"pip\\\" from there.\")\n  else()\n    message(STATUS \"Using lit: ${LIT_TOOL}\")\n  endif()\n\n  # Add global test target\n  add_custom_target(check\n    COMMENT \"Running tests\"\n  )\nelse()\n  message(STATUS \"Testing is disabled\")\nendif()\n\n\nif (ENABLE_UNIT_TESTS)\n  message(STATUS \"Unit tests enabled\")\n  add_subdirectory(unittests)\n  add_dependencies(check unittests)\nelse()\n  message(STATUS \"Unit tests disabled\")\nendif()\nif (ENABLE_SYSTEM_TESTS)\n  message(STATUS \"System tests enabled\")\n  add_subdirectory(test)\n  add_dependencies(check systemtests)\nelse()\n  message(STATUS \"System tests disabled\")\nendif()\n\n################################################################################\n# Documentation\n################################################################################\noption(ENABLE_DOCS \"Enable building documentation\" ON)\nif (ENABLE_DOCS)\n  add_subdirectory(docs)\nendif()\n\n################################################################################\n# Miscellaneous install\n################################################################################\ninstall(FILES include/klee/klee.h DESTINATION include/klee)\n\n################################################################################\n# Uninstall rule\n################################################################################\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n  \"${CMAKE_BINARY_DIR}/cmake_uninstall.cmake\"\n\t@ONLY\n)\n\nadd_custom_target(uninstall\n  COMMAND\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_BINARY_DIR}/cmake_uninstall.cmake\"\n  COMMENT \"Uninstalling...\"\n  VERBATIM\n)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.8662109375,
          "content": "FROM ghcr.io/klee/llvm:130_O_D_A_ubuntu_jammy-20230126 AS llvm_base\nFROM ghcr.io/klee/gtest:1.11.0_ubuntu_jammy-20230126 AS gtest_base\nFROM ghcr.io/klee/uclibc:klee_uclibc_v1.3_130_ubuntu_jammy-20230126 AS uclibc_base\nFROM ghcr.io/klee/tcmalloc:2.9.1_ubuntu_jammy-20230126 AS tcmalloc_base\nFROM ghcr.io/klee/stp:2.3.3_ubuntu_jammy-20230126 AS stp_base\nFROM ghcr.io/klee/z3:4.8.15_ubuntu_jammy-20230126 AS z3_base\nFROM ghcr.io/klee/libcxx:130_ubuntu_jammy-20230126 AS libcxx_base\nFROM ghcr.io/klee/sqlite:3400100_ubuntu_jammy-20230126 AS sqlite3_base\nFROM llvm_base as intermediate\nCOPY --from=gtest_base /tmp /tmp/\nCOPY --from=uclibc_base /tmp /tmp/\nCOPY --from=tcmalloc_base /tmp /tmp/\nCOPY --from=stp_base /tmp /tmp/\nCOPY --from=z3_base /tmp /tmp/\nCOPY --from=libcxx_base /tmp /tmp/\nCOPY --from=sqlite3_base /tmp /tmp/\nENV COVERAGE=0\nENV USE_TCMALLOC=1\nENV BASE=/tmp\nENV LLVM_VERSION=13.0\nENV ENABLE_DOXYGEN=1\nENV ENABLE_OPTIMIZED=1\nENV ENABLE_DEBUG=1\nENV DISABLE_ASSERTIONS=0\nENV REQUIRES_RTTI=0\nENV SOLVERS=STP:Z3\nENV GTEST_VERSION=1.11.0\nENV UCLIBC_VERSION=klee_uclibc_v1.3\nENV TCMALLOC_VERSION=2.9.1\nENV SANITIZER_BUILD=\nENV STP_VERSION=2.3.3\nENV MINISAT_VERSION=master\nENV Z3_VERSION=4.8.15\nENV USE_LIBCXX=1\nENV KLEE_RUNTIME_BUILD=\"Debug+Asserts\"\nENV SQLITE_VERSION=3400100\nLABEL maintainer=\"KLEE Developers\"\n\n# TODO remove adding sudo package\n# Create ``klee`` user for container with password ``klee``.\n# and give it password-less sudo access (temporarily so we can use the CI scripts)\nRUN apt update && DEBIAN_FRONTEND=noninteractive apt -y --no-install-recommends install sudo less emacs-nox vim-nox file python3-dateutil && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    useradd -m klee && \\\n    echo klee:klee | chpasswd && \\\n    cp /etc/sudoers /etc/sudoers.bak && \\\n    echo 'klee  ALL=(root) NOPASSWD: ALL' >> /etc/sudoers\n\n# Copy across source files needed for build\nCOPY --chown=klee:klee . /tmp/klee_src/\n\nUSER klee\nWORKDIR /home/klee\n# Build and set klee user to be owner\nRUN /tmp/klee_src/scripts/build/build.sh --debug --install-system-deps klee && pip3 install flask wllvm && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n\nENV PATH=\"$PATH:/tmp/llvm-130-install_O_D_A/bin:/home/klee/klee_build/bin:/home/klee/.local/bin\"\nENV BASE=/tmp\n# Add path to local LLVM installation - let system install precede local install\nRUN /bin/bash -c 'echo \"export \\\"PATH=$PATH:$(cd ${BASE}/llvm-*-install*/bin/ && pwd)\\\" >> /home/klee/.bashrc\"'\n\n# Add KLEE header files to system standard include folder\nRUN sudo /bin/bash -c 'ln -s /tmp/klee_src/include/klee /usr/include/'\n\nENV LD_LIBRARY_PATH /home/klee/klee_build/lib/\n\n# Add KLEE binary directory to PATH\nRUN /bin/bash -c 'ln -s ${BASE}/klee_src /home/klee/ && ln -s ${BASE}/klee_build* /home/klee/klee_build'\n\n# TODO Remove when STP is fixed\nRUN /bin/bash -c 'echo \"export LD_LIBRARY_PATH=$(cd ${BASE}/metaSMT-*-deps/stp-git-basic/lib/ && pwd):$LD_LIBRARY_PATH\" >> /home/klee/.bashrc'"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 2.9892578125,
          "content": "==============================================================================\nKLEE Release License\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nhttps://klee-se.org/\n\nDeveloped by:\n    KLEE Team\n    Stanford Checking Group\n\nCopyright (c) 2007-2009 Stanford University.\nAll rights reserved.\n\n\nMaintained since 2009 by:\n    Software Reliability Group\n    http://srg.doc.ic.ac.uk/\n    Imperial College London\n\n\nImproved and extended since 2009 by many developers.  For a full list\nof contributors, refer to\n         https://github.com/klee/klee/graphs/contributors\nand the Git commit history.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the KLEE Team, Stanford University,\n      Imperial College London, nor the names of its contributors may\n      be used to endorse or promote products derived from this\n      Software without specific prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\nThe KLEE software contains code written by third parties.  Such software will\nhave its own individual LICENSE.TXT file in the directory in which it appears.\nThis file will describe the copyrights, license, and restrictions which apply\nto that code.\n\nThe disclaimer of warranty in the University of Illinois Open Source\nLicense applies to all code in the KLEE distribution, and nothing in\nany of the other licenses gives permission to use the names of the\nKLEE team, Stanford University, or the names of its contributors to\nendorse or promote products derived from this Software.\n\nThe following pieces of software have additional or alternate copyrights,\nlicenses, and/or restrictions:\n\nProgram             Directory\n-------             ---------\nklee-libc           runtime/klee-libc\n\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 28.4716796875,
          "content": "KLEE 3.1, 29 February 2024\n==========================\n\nIncorporating changes from 8 June 2023 to 29 February 2024.\nMaintainers during this time span: @ccadar, @MartinNowack, @251.\nDocumentation at https://klee-se.org/releases/docs/v3.1\n\n== Major features and important changes ==\n- New execution tree implementation and klee-exec-tree tool (@251)\n- KDAlloc is now the default allocator in KLEE (KDAlloc was introduced in KLEE 3.0)\n- Resolve memory reads/writes to single objects in more cases (@tkuchta)\n- Concretize values based on seeds when available (@ccadar)\n- Fixed some interactions with external code (@ccadar, @MartinNowack, mishok2503)\n\n== LLVM support ==\n- Current recommended version is still LLVM 13\n- Added support for LLVM 15 and 16 (@MartinNowack)\n- Removed support for LLVM <11 (@danielschemmel)\n- KLEE 3.1 will be the last version with support for LLVM <13\n\n== Options, scripts and KLEE intrinsics added, changed or removed ==\n- New klee-exec-tree tool (@251)\n- New --write-exec-tree and --exec-tree-batch-size options (@251)\n- Renamed --compress-process-tree to --compress-exec-tree (@ccadar)\n- PTree is now called ExecutionTree in the code (@ccadar)\n- KDAlloc (--kdalloc) is now enabled by default (@ccadar)\n- Replaced --suppress-external-warnings and --all-external-warnings with --external-call-warnings=none|once-per-function|all (@ccadar)\n- Keep in the KLEE and Kleaver help menus only the KLEE/Kleaver option categories (@ccadar)\n- Removed --cex-cache-exp, a broken experimental optimisation for validity (@ccadar)\n- Removed --zero-seed-extension, and merge it with --allow-seed-extension (@ccadar)\n\n== Other changes ==\n- Improvements to KDAlloc (@danielschemmel)\n- Avoid generating array names in solver builders that could accidently collide (@MartinNowack)\n- Function has_permission in the POSIX model now returns permission error a single time in symbolic execution mode (@ccadar)\n- Smaller refactorings, fixes and improvements, test cases, maintenance, comments, web version, website, etc. (@251, @ccadar, @dependabot, @danielschemmel, @davidtr1037, @jbuening, @marco6, @MartinNowack, @McSinyx, @sp1ff)\n\n\nKLEE 3.0, 7 June 2023\n=====================\n\nIncorporating changes from 8 April 2022 to 7 June 2023.\nMaintainers during this time span: @ccadar, @MartinNowack, @251.\n(@251 joined as a new maintainer during 2022).\nDocumentation at https://klee-se.org/releases/docs/v3.0\n\n== Major features ==\n- Added support for the KDAlloc memory allocator, which enables KLEE to more robustly detect use-after-free errors, improves the detection of buffer overflows, and provides deterministic memory allocation (@danielschemmel, based on https://srg.doc.ic.ac.uk/publications/22-kdalloc-ecoop.html)\n- Enabled KLEE to support UBSan-added checks (@operasfantom)\n- Added support for concrete inline assembly, which is now handled as an external call (@mishok2503)\n\n== LLVM support ==\n- Current recommended version is LLVM 13\n- Added support for LLVM 14 (@lzaoral)\n- Removed support for LLVM <9\n- KLEE 3.0 will be the last version with support for LLVM <11\n\n== Options, scripts and KLEE intrinsics added, changed or removed ==\n- Renamed gen-bout to ktest-gen, and gen-random-bout to ktest-randgen (@ccadar)\n- Added option --stp-sat-solver for selecting the SAT solver used by STP (@251)\n- Added many more runtime statistics that can be inspected with klee-stats, and renamed several of them (@251)\n- Removed unused model_version from the tests generated when the POSIX runtime is enabled (@ccadar)\n- Removed unused option --replay-keep-symbolic (@251)\n- Added support for the @llvm.f{ma,muladd}.f* intrinsics (@lzaoral)\n- Allow UcLibc to support a runtime option rather than a compile-time one (@arrowd)\n- Added support for llvm.experimental.noalias.scope.decl (@operasfantom)\n- Modified names of SMT variables to use underscores instead of dashes, e.g., A_data instead of A-data (@ccadar)\n\n== Other changes ==\n- Overhaul of KLEE's CI and build scripts (@MartinNowack, @jbuening)\n- Introduce separate categories for different kinds of undefined behavior (@operasfantom)\n- Support arguments of width 128, 256 and 512 bits for external calls (@operasfantom)\n- Added check for nonnull path APIs in fstatat (@251, @jbuening)\n- Fixed a bug in KLEE libc's implementation of strcmp, where characters were not compared as unsigned (@ccadar)\n- Added support for Differential ShellCheck (@jamacku)\n- Fixed a bug triggered when --entry-point and --libc=uclibc are used together (@ccadar)\n- Fixed a bug with --use-batching-search ignoring disabled time budget (@jbuening)\n- Smaller refactorings, fixes and improvements, test cases, maintenance, comments, web version, website, etc. (@251, @andronat, @arrowd, @ccadar, @danielschemmel, @dependabot, @fwc, @jamesjer, @jbuening, @jryans, @kt218, @lzaoral, @m-davis, @MartinNowack, @McSinyx, @mishok2503, @operasfantom, @prncoprs, @rriley, @rshariffdeen, @sava-cska, @ZHYfeng)\n\n\nKLEE 2.3, 4 April 2022\n======================\n\nIncorporating changes from 8 December 2020 to 4 April 2022.\nMaintainers during this time span: @ccadar and @MartinNowack\nDocumentation at https://klee-se.org/releases/docs/v2.3\n\n== LLVM support ==\n- Current recommended version is LLVM 11\n- Added support for LLVM 12 and 13 (@lzaoral)\n- Removed support for LLVM <6\n- KLEE 2.3 will be the last version with support for LLVM <9\n\n== Options, scripts and KLEE intrinsics added, changed or removed ==\n- Added --max-static-pct-check-delay to specify the number of forks after which the --max-static-*-pct checks are enforced (@ccadar)\n- In klee-stats, added --print-columns to print user-defined columns, e.g. --print-columns 'Path,Instrs,Time(s)' (@251)\n- Disabled Doxygen generation by default; it can be enabled via CMake option ENABLE_DOXYGEN=ON\n\n== Other changes ==\n- Introduced termination categories and branch types (@251)\n- Added support for more recent versions of Google Test (@jbuening)\n- Fixed --prefer-cex, which was crashing in some cases (@TarasBereznyak)\n- Added support for executing 32bit code, with some limitations (@lzaoral)\n- Improved exception handling (@jbuening)\n- Various improvements to klee-stats (@251)\n- Fixed UBSan reporting in the CI and fixed several errors reported by UBSan (@lzaoral)\n- Fixed path statistics with -dump-states-on-halt=false (@251)\n- Differentiate between partial and completed paths in the summary printed at the end (@251)\n- Improved determinism (@jbuening)\n- Added support for LLVM abs (except for the vector variants), llvm.roundeven and llvm.{s,u}{max,min} intrinsics (@lzaoral)\n- Fixed and improved model for getcwd (@251)\n- Fixed a silent concretization case in Executor::fork (@ccadar)\n- Added a large number of KLEE-related publications to the website (@251)\n- Fixed the memory usage computation on macOS (@ccadar)\n- Removed or updated obsolete Doxygen options and added Doxygen generation to the CI (@ccadar)\n- Smaller refactorings, fixes and improvements, test cases, maintenance, comments, web version, website, etc. (@251, @aesophor, @arrowd, @bathooman,  @ccadar, @carlocab, @davidtr1037, @dependabot, @futile, @iangneal, @jbuening, @jirislaby, @jiseongg, @jordr, @lzaoral, @MartinNowack, @numinit, @operasfantom, @prncoprs)\n\n\nKLEE 2.2, 7 December 2020\n=========================\n\nIncorporating changes from 4 March 2020 to 7 December 2020.\nMaintainers during this time span: @ccadar and @MartinNowack\nDocumentation at https://klee-se.org/releases/docs/v2.2\n\n== Major features ==\n- Added support for C++ exceptions (@corrodedHash, @futile, @jbuening)\n- Correctly copy variadic arguments with byval attribute (@ccadar)\n- Modified the random path searcher to work on a subset of states (@kren1)\n- Added state IDs to improve determinism (@251)\n- Overhauled the (Travis CI) build scripts (@MartinNowack)\n- Restructured header files (@ccadar)\n\n== LLVM support ==\n- Current recommended version is LLVM 9\n- Added support for LLVM 11 (@lzaoral)\n- We have decided to extend support for LLVM 3.8 to 5, but KLEE 2.2 will be the last version with support for LLVM <6\n\n== Options, scripts and KLEE intrinsics added, changed or removed ==\n- Changed --debug-print-instructions to also print state IDs (@251)\n- Added -rng-initial-seed to set the seed for KLEE's random number generator (@251)\n- Added klee_is_replay intrinsic which returns whether the code is being executed symbolically or in replay mode (@alastairreid)\n- Added --compress-process-tree to remove intermediate nodes in the process tree when possible (@sebastianpoeplau)\n- Added klee-zesti, a ZESTI-like wrapper (@kren1)\n- Added --table-format=readable-csv/csv to klee-stats (@251)\n\n== Other changes ==\n- Fixed GlobalAlias initialization (@jbuening)\n- Enforced fork/branch limits in branch() and fix double termination (@251)\n- Enhanced POSIX runtime in the case where a symbolic file is given as an absolute path, i.e. /current/work/dir/A (@kren1)\n- Named jobs in Travis CI for better visualization of results (@ccadar)\n- Fixes and improvements in the statistics code including klee-stats (@251)\n- Added a simple model for GET/SET_LK (@kren1)\n- Fixed bug in the handling of vectorized code (@Warfley)\n- Fixed bug in the handling of STP array names (@MartinNowack)\n- Fixed bug in Z3Solver::getConstraintLog (@daniel-grumberg)\n- Added support for reading strings from the middle of objects in readStringAtAddress (@mchalupa)\n- Disabled asm lifting for memory fences with return values (@MartinNowack)\n- Fixed bug when the search requires MD2U (@adrianherrera)\n- Added support for fshr/fshl intrinsics (@alastairreid)\n- Refactored the constraint manager (@MartinNowack)\n- Changed DiscretePDF to use IDs instead of pointers to remove nondeterminism (@251)\n- Added a more robust handling of unknown intrinsics: if an unknown intrinsic is encountered on a path, that path is terminated but the others can proceed (@alastairreid)\n- Fixed PTree::remove to clean the tree properly (@sebastianpoeplau)\n- Added support for multiple symbolic files to gen-bout (@kren1)\n- Added a PR template, with a checklist documenting the most frequent issues we have encountered (@ccadar)\n- Fixed the behaviour of klee-stats for broken or empty DBs (@251)\n- Added support for klee_open_merge and klee_close_merge in replay (@ccadar)\n- Fixed the handling of global variables while validating direct call targets (@MartinNowack)\n- Fixed the handling of the fabs intrinsic (@dlaprell)\n- Added support for the fneg instruction (@jbuening)\n- Removed incompatibility between merging and the random path search (@251)\n- Fixed the behaviour of klee-libc to call the functions in __cxa_atexit in reverse order (@tomsik68)\n- Fixed the behaviour of bcmp in klee-libc (@alastairreid)\n- Added support for multi-version bitcode libraries (@MartinNowack)\n- Added support for several fortified functions, -D_FORTIFY_SOURCE (@ccadar)\n- Modernize ref<> and isa<> nullptr checks (@jbuening)\n- Switched CI from Travis CI to GitHub Actions (@MartinNowack, with thanks to @jordr)\n- Smaller refactorings, fixes and improvements, test cases, maintenance, comments, web version, website, etc. (@251, @adrianherrera, @alastairreid, @andrewvaughanj, @andronat, @arrowd, @ccadar, @dependabot, @i-ky, @jbuening, @jiseongg, @jordr, @kren1, @lahiri-phdworks, @MartinNowack, @yxliang01)\n\n\nKLEE 2.1, 3 March 2020\n=======================\nIncorporating changes from 20 March 2019 to 3 March 2020.\nMaintainers during this time span: @ccadar and @MartinNowack\nDocumentation at https://klee-se.org/releases/docs/v2.1\n\n== Major features ==\n- New container-based architecture for KLEE Web (@Denis-Gavrielov, @andronat)\n- Changed the statistics framework to use SQL and improve klee-stats (@kren1, @251)\n- Added Grafana visualisation to klee-stats (@gdish, @KennyMacheka, @kren1)\n- Brought gen-random-bout up-to-date (@domainexpert)\n- Fixed support for FreeBSD (@arrowd)\n- Replaced signalling with synchronous checks for implementing timers (@251)\n- Improved reference handling (ref<>) (@MartinNowack)\n\n== LLVM support ==\n- Added support for LLVM 9 and 10 (@jbuening)\n- Removed support for LLVM <3.8 (@jbuening)\n- KLEE 2.1 will be the last version with support for LLVM <6\n\n== Options, scripts and KLEE intrinsics added, changed or removed ==\n- Replaced intrinsic klee_alias_function(\"foo\", \"bar\") with option -function-alias=foo:bar, which supports regular expressions (@jbuening, @SolalPirelli)\n- Removed -max-instruction-time (@251)\n- Added -timer-interval (default 1s) to specify the minimum interval to check timers (@251)\n- Added nurs:rp searcher which uses non-uniform random search with 1/2^depth (@kren1)\n- Replaced the behavior of the nurs:depth searcher to use NURS with depth (@kren1)\n- klee-stats: new --grafana option (see above) \n- klee-stats: new --to-csv option for converting statistics to the CSV format (@251)\n- klee-stats: removed --sample-interval, --sort-by, --compare-by, --precision.  These can be now simulated by querying the SQL database directly (@kren1)\n- klee-replay: added --keep-replay-dir option to keep the replay directory (@ccadar)\n\n== Other changes ==\n- Added support for llvm.fabs (@futile)\n- Added support for saturated arithmetic intrinsics (@mateon1)\n- Added support for llvm.objectsize (@MartinNowack)\n- Added support for llvm.is.constant (@arrowd)\n- Fixed bugs in --optimize-array (@kren1)\n- Removed statistics limit from istats (@MartinNowack)\n- Refactored PTree (@251)\n- Improved klee-replay and made it safe to run multiple instances in parallel (@ccadar)\n- Check if read-only objects are marked as symbolic (@MartinNowack)\n- Allow main() with 3 arguments (@ccadar)\n- Improved the structure of the codebase (@ccadar)\n- Improved KLEE's CI build scripts (@MartinNowack, @jbuening)\n- Smaller refactorings, fixes and improvements, test cases, maintenance, comments, web version, website, etc. (@251, @arrowd, @benquike, @ccadar, @cyberwookiee, @danielschemmel, @Denis-Gavrielov, @dependabot, @domainexpert, @futile, @gdish, @JasonPap, @jbuening, @jirislaby, @KennyMacheka, @kren1, @MartinNowack, @qurben)\n\n\nKLEE 2.0, 19 March 2019\n========================\nIncorporating changes from 22 July 2017 to 19 March 2019\nMaintainers during this time span: @AndreaMattavelli, @ccadar, @delcypher, @MartinNowack\nDocumentation at https://klee-se.org/releases/docs/v2.0\n\n== Major features ==\n- Added support for KLEE array optimizations from ISSTA'17 paper \"Accelerating Array Constraints in Symbolic Execution\" (@AndreaMattavelli, @MartinNowack, @ccadar)\n- Added support for LibC++ (--libcxx flag) (@corrodedHash, @futile, @MartinNowack)\n- Added support for CVC4 and Yices2 via metaSMT (@hoangmle)\n- Added better path merging functionality via klee_open_merge and klee_close_merge (@corrodedHash, @futile)\n- Fixed support for vector instructions (@MartinNowack)\n- Support for recent LLVM versions (see \"LLVM support\" below)\n- New categorized --help menu, with LLVM options hidden by default (see \"Options, scripts and intrinsics changed or removed\" below)\n\n== LLVM support ==\n- Added support for LLVM 3.7 - 7.0 (@jirislaby)\n- Added support for LLVM 8.0 (@MartinNowack)\n- KLEE 2.0 will be the last release with support for LLVM 3.4 to 3.7\n- Removed support for LLVM <3.4 (@MartinNowack)\n\n== Options, scripts and intrinsics changed or removed ==\n- Renamed several options (@ccadar)\n  * --environ to --env-file\n  * --no-output to --write-no-tests\n  * --red-zone-space to --redzone-size \n  * --run-in to --run-in-dir\n  * --seed-out to --seed-file\n  * --seed-out-dir to --seed-dir\n  * --stop-after-n-tests to --max-tests\n  * --use-cache to --use-branch-cache\n  * --use-construct-hash to --use-construct-hash-stp\n  * --warn-all-externals to --warn-all-external-symbols\n- Replaced --no-externals and --allow-external-sym-calls with --external-calls (@ccadar)\n- Added --libcxx option to enable LibC++ support (see \"Major features\" above)\n- Added option --max-stack-frames to limit the number of stack frames used (@MartinNowack)\n- Added --klee-call-optimisation option, which can be set to false to disable some optimizations that interact incorrectly with the checks injected by KLEE. See https://github.com/klee/klee/pull/1059 for more details (@MartinNowack)\n- Added support for disabling --batch-instructions and --batch-time by setting them to zero (@ccadar)\n- Removed option --disable-opt (@ccadar)\n- Removed klee-gcc and klee-clang (@251, @MartinNowack)\n- Removed support for klee_make_symbolic with two arguments (@ccadar)\n- Allow NULL as name to klee_int, to create \"unnamed\" object (@251)\n- New time API used in options (@251)\n- Improved the output of ktest-tool and added an --extract option (@251)\n- Categorized options in --help, improved help messages, and hid LLVM options by default (@ccadar)\n\n== Other changes ==\n- Updated build system to detect whether STP, Z3, metaSMT are available (@delcypher)\n- Fixed test case counter: previously the number of test cases generated by KLEE was always incremented, even if a symbolic solution was not found (@andreamattavelli)\n- Added checks for div/mod by zero and overshifts in constant expressions (@ccadar)\n- Fixed a bug causing KLEE to generate files with no permissions bits set (@ccadar)\n- Added clean_doxygen target and a global clean_all target to the build system (@delcypher)\n- Fixed initialization of distance to uncovered instructions when KLEE relies on default searchers (@andreamattavelli)\n- Fixed assert in BFSSearcher that does not hold as part of interleaved searcher (@jbuening)\n- Fixed huge allocation size constant (@davidtr1037)\n- Added Codecov support (@andreamattavelli, @MartinNowack)\n- Store cex cache stats and report them in klee-stats (@helicopter88)\n- Fixed incorrectly incremented stats for dumped states (@251)\n- Fixed bug where KLEE would not output test cases when --exit-on-error is enabled (@buszk)\n- Added support for blockaddress and indirectbr instructions (@251)\n- Implemented klee_prefer_cex() and klee_abort() for replay mode (@Lysxia)\n- Fixed handling of errno when external functions are invoked (@MartinNowack)\n- Fixed utimes() behavior for symbolic files when the second argument is NULL (@yxliang01)\n- Improved handling of constant array in Z3 (@kren1)\n- Improved the handling of external calls with symbolic data (@kren1)\n- Abort execution if --only-output-states-covering-new is enabled but its dependency --output-istats is not (@ccadar)\n- Improved ConstantExpr performance (@kren1)\n- Improved linking and optimizations order (@MartinNowack)\n- Enabled TCMalloc by default (@kren1)\n- Disabled unit testing in default build (@AndreaMattavelli)\n- Added resolve time to klee-stats --print-all (@251)\n- Improved the startup sequence enabling the POSIX runtime (@MartinNowack)\n- Added ASan and UBSan flags to lit (@251)\n- Added support for handling multiple SIGSEGVs in external calls (@251)\n- Added checks for correct usage of the POSIX mode (@ccadar)\n- Added support for klee-replay on OSX (@251)\n- Added lowering pass for atomic instructions (@erzett, @futile)\n- Improved handling of metadata (@MartinNowack)\n- Improved efficiency of div/mod and shift checks by skipping unnecessary checks (@MartinNowack)\n- Added support for memalign (@corrodedHash)\n- Enable C++14 support (@MartinNowack)\n- Fixed issue with aliases that point to other aliases (@jbuening)\n- Added workaround for the LLVM bug PR39177 (@jbuening)\n- Updated dependency build system for KLEE (@MartinNowack)\n- Fixed the Docker deployment for KLEE (@MartinNowack)\n- Added support for compiling KLEE with MSan and UBSan's integer sanitizer (@MartinNowack)\n- Fixed representation of ReadExpr's into equivalent arrays (@MartinNowack)\n- Added support for debug information provided by newer LLVM versions (@MartinNowack)\n- Added many KLEE-related publications (@251)\n- Smaller refactorings, fixes and improvements, test cases, maintenance,\ncomments, web version, website, etc. (@andronat, @251, @andreamattavelli, @ccadar, @corrodedHash, @danielschemmel, @delcypher, @itbot08, @jasondavies, @jbuening, @jirislaby, @kren1, @Lysxia, @MartinNowack, @Mic92, @odeits-vidder, @SolalPirelli, @szeyiuchau, @Tipwheal, @yannicnoller)\n\n\nKLEE 1.4.0, 21 July 2017\n========================\n(Incorporating changes from 4 November 2016 up to and including 21 July 2017)\nDocumentation at https://klee-se.org/releases/docs/v1.4.0/\n\nThis will be the last version supporting LLVM 2.9 and the autoconf build system.\n\n- New CMake build system (@delcypher, @jirislaby)\n- Added support for vectorized instructions (@delcypher)\n- Fixed and documents BFS searcher behaviour (@MartinNowack, @ccadar)\n- Renames .pc files to .kquery files (@holycrap872)\n- Removed option --randomize-fork (@ccadar)\n- Changed preferred permissions from 0622 to the more standard 0644 in the\nPOSIX model (@ccadar)\n- New target name, \"make systemtests\", for running the system tests.  This replaces \"make test\".  Running the unit tests is still accomplished via \"make unittests\".\n- Better support for MacOS (@andreamattavelli, @delcypher)\n- Enabled support for ASan builds of KLEE (@delcypher)\n- Support long long values in --stop-after-n-instructions for LLVM > 2.9\n(@andreamattavelli)\n- Teach KLEE to respect the requested memory alignment of globals and stack\nvariables when possible (@delcypher)\n- Added new option --warnings-only-to-file which causes warnings to be written\nto warnings.txt only (@ccadar)\n- metaSMT improvements (@hoangmle)\n- KLEE-web improvements (@andronat, @helicopter88)\n- Fixed bug in the implementation of NotExpr (@delcypher)\n- Fixed a bug leading to data loss when writing into files (@ccadar, @gladtbx)\n- Some improvements and refactoring to the Expr library (@delcypher)\n- Added missing constant folding opportunity when handling constant arrays\n(@andreamattavelli, @delcypher)\n- Teach klee::getDirectCallTarget() to resolve weak aliases (@delcypher)\n- Fixed handling of internal forks (@gladtbx)\n- Improved replay using libkleeRuntest (@delcypher)\n- Added -debug-assignment-validating-solver feature to check the correctness\nof generated assignments (@delcypher)\n- Added -debug-z3-dump-queries, -debug-z3-validate-models and\n-debug-z3-verbosity options useful for debugging the interaction with Z3\n(@delcypher)\n- Added geq/lt-llvm- configs in lit (@jirislaby)\n- Work on supporting newer LLVM versions (@jirislaby)\n- Fixed bug where stats would not be updated on early exit (@delcypher)\n- Reworked the external dispatching mechanism (@delcypher)\n- Added support for creating release documentation (@delcypher)\n- Smaller refactorings, fixes and improvements, test cases, maintenance,\ncomments, website, etc. (@adrianherrera, @akshaynagpal, @AlexxNica,\n@andreamattavelli, @bananaappletw, @bigelephant29, @bunseokbot, @ccadar,\n@delcypher, @emlai, @hoangmle, @jirislaby, @kren1, @levex,\n@Manouchehri, @MartinNowack, @mechtaev, @Mic92, @omeranson, @rtrembecky,\n@thestr4ng3r, @tomek-kuchta)\n\n\nKLEE 1.3.0, 30 November 2016\n============================\n(Incorporating changes from 1 April up to and including 3 November 2016)\n\n* Improved determinism of KLEE, an essential feature for experiments involving KLEE (@MartinNowack)\n* KLEE-web has been improved and refactored, and now available at http://klee.doc.ic.ac.uk/ (@giacomoguerci, @helicopter88, @andronat, @ccadar, based on work by @ains, @ben-chin, @ilovepjs, @JamesDavidCarr, Kaho Sato, Conrad Watt, @ccadar)\n* Renamed --replay-out to --replay-ktest and --replay-out-dir to replay-ktest-dir (@delcypher)\n* Split creation of symbolic files and stdin in two distinct options, documented at https://klee-se.org/docs/options/#symbolic-environment (@andreamattavelli)\n* Support for logging queries before invoking the solver via --log-partial-queries-early, useful for debugging solver crashes (@MartinNowack)\n* Added --stats-write-after-instructions and --istats-write-after-instructions to update each statistic after n steps (@MartinNowack)\n* Added --compress-log and --debug-compress-instructions to gzip-compress logs (@MartinNowack)\n* Added --exit-on-error-type option for stopping execution when certain error types are encountered (@jirislaby)\n* Updated and improved metaSMT support and added TravisCI targets (@hoangmle)\n* Added option --debug-crosscheck-core-solver to allow crosschecking of solvers (@delcypher)\n* Explicitly made division total in STP (@ccadar)\n* Extended support for assembler raising (@MartinNowack)\n* Disabled --solver-optimize-divides, as the optimization is currently buggy (@ccadar)\n* Improved --debug-print-instructions options with more logging options (@andreamattavelli)\n* Improved stub for times() not to trigger a NULL dereference (@ccadar)\n* Allow relocation of installed KLEE tree (@ShayDamir)\n* Fixed bug in independent solver (@delcypher)\n* Fixed alignement of varargs (@MartinNowack)\n* Fixed variable shifting behavior with different sizes and generation of STP shift operations with variable amounts (@MartinNowack)\n* Fixed handling of non-sized globals (@jirislaby)\n* Fixed klee_get_obj_size() crash on 64-bit (@hutoTUM)\n* Fixed bug in Kleaver's parser (@andreamattavelli)\n* Refactorings, small fixes and improvements, test cases, maintenance and website: (@andreamattavelli, @ccadar, @delcypher, @domainexpert, @giacomoguerci, @hoangmle, @helicopter88, @jirislaby, @Justme0, @kren1, @MartinNowack, @mchalupa)\n\n\nKLEE 1.2.0, 31 March 2016\n=========================\n\n* Added native support for Z3 (@delcypher)\n* Made it possible to build KLEE without using STP and only MetaSMT (@delcypher)\n* Added support for tcmalloc, which allows KLEE to better track memory consumption (@MartinNowack)\n* Added support for lowering the ``llvm.objectsize`` intrinsic (@delcypher)\n* Added soname for Runtest dynamic library (@MartinNowack)\n* Added support to load libraries from command line (@omeranson)\n* Added command line flag --silent-klee-assume to suppress errors due to infeasible assumptions (Valentin Wüstholz, @wuestholz)\n* Changed code to print out arrays deterministically (@MartinNowack)\n* Improved klee-clang script (@msoos)\n* Added code to dump queries and assignments (@MartinNowack)\n* Code cleanup and refactorings (@delcypher, @MartinNowack)\n* Improvements to code infrastructure (@delcypher, @domainexpert, @MartinNowack, @mdimjasevic, @msoos)\n* Fixed several memory leaks (@delcypher)\n* Fixed a bug with how non-power of 2 values were written to memory (@kren1)\n* Fixed valueIsOnlyCalled() used by MD2U (@yotann)\n* Fixed SELinux signatures (@lszekeres)\n* Fixed incorrect position of Not in Expr::Kind (@delcypher)\n* Fixed wrong std::vector usage after reserve() call (@pollnossa)\n* Improved documentation (@bananaappletw, @ccadar, @delcypher, @mdimjasevic, @Teemperor, @ward, @wuestholz)\n\n\nKLEE 1.1.0, 13 November 2015\n============================\n\n* Made LLVM 3.4 and STP 2.1.0 the recommended versions for installing KLEE (Cristian Cadar, @ccadar; Dan Liew, @delcypher; Martin Nowack, @MartinNowack; Mate Soos, @msoos)\n* Added instructions for using the Docker images (Dan Liew, @delcypher)\n* Added NEWS file to keep track of changes for each release (Cristian Cadar, @ccadar)\n* Added coverage information for the current KLEE codebase (Timotej Kapus, @kren1)\n* Added -entry-point=FOO option, where FOO is the name of the function to use as the entry point for execution (Riccardo Schirone, @ret2libc)\n* Switched STP to v2.1.0 (instead of the old r940) in TravisCI (Martin Nowack, @MartinNowack)\n* Improved Dockerfiles to use specific dependency versions (Dan Liew, @delcypher)\n* Bug fix: Fixed signed division by constant 1/-1 (Martin Nowack, @MartinNowack, reported by Timotej Kapus, @kren1)\n* Bug fix: Generate SRrem expressions correctly (Martin Nowack, @MartinNowack, reported by Timotej Kapus, @kren1)\n* Bug fix: Allowed the generation of initial values for queries with empty constraint set (Martin Nowack, @MartinNowack)\n* Bug fix: Fixed assertion failure in getDirectCallTarget (Sean Bartell, @yotann)\n* Bug fix/test improvement: Use a temporary directory instead of /tmp in futimesat test (Andrew Chi, @andrewchi)\n* Various fixes and improvements to the website (Eric Rizzi, @holycrap872; Martin Nowack, @MartinNowack; Bheesham Persaud, @bheesham; Gu Zhengxiong, @NoviceLive; Cristian Cadar, @ccadar)\n\n\nKLEE 1.0.0, 10 August 2015\n==========================\n\n# Recent changes (from 2015)\n\n* Several performance improvements to the counterexample cache, including changing some default behaviour (Eric Rizzi, @holycrap872)\n* Computing coverage of KLEE code in Travis CI (Timotej Kapus, @kren1)\n* Added an option --readable-posix-inputs which is used to turn on/off the CEX preferences added in the POSIX model (Eric Rizzi, @holycrap872; Cristian Cadar, @ccadar)\n* Lots of improvements to the build process (Dan Liew, @delcypher)\n* Added klee-clang as alternative to klee-gcc (Martin Nowack, @MartinNowack)\n* Added Dockerfile for building a KLEE Docker image (Dan Liew, @delcypher)\n* Added a new option, --rewrite-equalities, which makes it possible to disable the optimisation that rewrites existing constraints when an equality with a constant is added (Cristian Cadar, @ccadar)\n* Cleaner, more efficient timestamps (Emil Rakadjiev, @erakadjiev)\n* Improved integer overflow detection (Luca Dariz, @luckyluke) \n"
        },
        {
          "name": "README-CMake.md",
          "type": "blob",
          "size": 3.3115234375,
          "content": "# CMake build system\n\nKLEE has a CMake build system.\n\n## Useful top-level targets\n\n* `check` - Build and run all tests.\n* `clean` - Clean the build tree.\n* `docs` - Build documentation.\n* `edit_cache` - Show cmake/ccmake/cmake-gui interface for changing configure options.\n* `help` - Show list of top-level targets.\n* `systemtests` - Build and run system tests.\n* `unittests` - Build and run unit tests.\n\n## Useful CMake variables\n\nThese can be set by passing `-DVAR_NAME=VALUE` to the CMake invocation.\n\ne.g.\n\n```\ncmake -DCMAKE_BUILD_TYPE=Release /path/to/klee/src\n```\n* `LLVMCC` (STRING) - Path to the LLVM C compiler (e.g. Clang).\n\n* `LLVMCXX` (STRING) - Path to the LLVM C++ compiler (e.g. Clang++).\n\n* `CMAKE_BUILD_TYPE` (STRING) - Build type for KLEE. Can be\n  `Debug`, `Release`, `RelWithDebInfo` or `MinSizeRel`.\n\n* `DOWNLOAD_LLVM_TESTING_TOOLS` (BOOLEAN) - Force downloading\n   of LLVM testing tool sources.\n\n* `ENABLE_DOCS` (BOOLEAN) - Enable building documentation.\n\n* `ENABLE_DOXYGEN` (BOOLEAN) - Enable building doxygen documentation.\n\n* `ENABLE_SYSTEM_TESTS` (BOOLEAN) - Enable KLEE system tests.\n\n* `ENABLE_KLEE_ASSERTS` (BOOLEAN) - Enable assertions when building KLEE.\n\n* `ENABLE_KLEE_EH_CXX` (BOOLEAN) - Enable support for C++ Exceptions.\n\n* `ENABLE_KLEE_LIBCXX` (BOOLEAN) - Enable libc++ for klee.\n\n* `ENABLE_POSIX_RUNTIME` (BOOLEAN) - Enable POSIX runtime.\n\n* `ENABLE_SOLVER_METASMT` (BOOLEAN) - Enable MetaSMT solver support.\n\n* `ENABLE_SOLVER_STP` (BOOLEAN) - Enable STP solver support.\n\n* `ENABLE_SOLVER_Z3` (BOOLEAN) - Enable Z3 solver support.\n\n* `ENABLE_TCMALLOC` (BOOLEAN) - Enable TCMalloc support.\n\n* `ENABLE_UNIT_TESTS` (BOOLEAN) - Enable KLEE unit tests.\n\n* `ENABLE_ZLIB` (BOOLEAN) - Enable zlib support.\n\n* `GTEST_SRC_DIR` (STRING) - Path to Google Test source tree. If it is not\n   specified, CMake will try to reuse the version included within the LLVM\n   source tree or find a system installation of Google Test.\n\n* `GTEST_INCLUDE_DIR` (STRING) - Path to Google Test include directory,\n   if it is not under `GTEST_SRC_DIR`.\n\n* `KLEE_ENABLE_TIMESTAMP` (BOOLEAN) - Enable timestamps in KLEE sources.\n\n* `KLEE_LIBCXX_DIR` (STRING) - Path to directory containing libc++ shared object (bitcode).\n\n* `KLEE_LIBCXX_INCLUDE_DIR` (STRING) - Path to libc++ include directory.\n\n* `KLEE_LIBCXXABI_SRC_DIR` (STRING) - Path to libc++abi source directory.\n\n* `KLEE_UCLIBC_PATH` (STRING) - Path to klee-uclibc root directory.\n\n* `KLEE_RUNTIME_BUILD_TYPE` (STRING) - Build type for KLEE's runtimes.\n   Can be `Release`, `Release+Asserts`, `Debug` or `Debug+Asserts`.\n\n* `LIT_TOOL` (STRING) - Path to lit testing tool.\n\n* `LIT_ARGS` (STRING) - Semi-colon separated list of lit options.\n\n* `LLVM_DIR` (STRING) - Path to the target LLVM install directory\n\n* `metaSMT_DIR` (STRING) - Provides a hint to CMake, where the metaSMT constraint\n  solver can be found.  This should be an absolute path to a directory\n  containing the file `metaSMTConfig.cmake`.\n\n* `STP_DIR` (STRING) - Provides a hint to CMake, where the STP constraint\n  solver can be found.  This should be an absolute path to a directory\n  containing the file `STPConfig.cmake`. This file is installed by STP\n  but also exists in its build directory. This allows KLEE to link\n  against STP in a build directory or an installed copy.\n\n* `WARNINGS_AS_ERRORS` (BOOLEAN) - Treat warnings as errors when building KLEE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.34375,
          "content": "KLEE Symbolic Virtual Machine\n=============================\n\n[![Build Status](https://github.com/klee/klee/workflows/CI/badge.svg)](https://github.com/klee/klee/actions?query=workflow%3ACI)\n[![Build Status](https://api.cirrus-ci.com/github/klee/klee.svg)](https://cirrus-ci.com/github/klee/klee)\n[![Coverage](https://codecov.io/gh/klee/klee/branch/master/graph/badge.svg)](https://codecov.io/gh/klee/klee)\n\n`KLEE` is a symbolic virtual machine built on top of the LLVM compiler\ninfrastructure. Currently, there are two primary components:\n\n  1. The core symbolic virtual machine engine; this is responsible for\n     executing LLVM bitcode modules with support for symbolic\n     values. This is comprised of the code in lib/.\n\n  2. A POSIX/Linux emulation layer oriented towards supporting uClibc,\n     with additional support for making parts of the operating system\n     environment symbolic.\n\nAdditionally, there is a simple library for replaying computed inputs\non native code (for closed programs). There is also a more complicated\ninfrastructure for replaying the inputs generated for the POSIX/Linux\nemulation layer, which handles running native programs in an\nenvironment that matches a computed test input, including setting up\nfiles, pipes, environment variables, and passing command line\narguments.\n\nFor further information, see the [webpage](https://klee-se.org/).\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}