{
  "metadata": {
    "timestamp": 1736565990702,
    "page": 966,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DFHack/dfhack",
      "stars": 1891,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0302734375,
          "content": "docs/changelog.txt merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1142578125,
          "content": "# linux backup files\n*~\n\n# Kdevelop project files\n*.kdev4\n.kdev4\n\n# any build folders\nbuild*/\nnix\nbuntu\n\n#except for the real one\n!build/\n\n# Sphinx generated documentation\ndocs/changelogs/\ndocs/html/\ndocs/pdf/\ndocs/pseudoxml/\ndocs/tags/\ndocs/text/\ndocs/tools/\ndocs/xml/\n\n# in-place build\nbuild/Makefile\nbuild/CMakeCache.txt\nbuild/cmake_install.cmake\nbuild/CMakeFiles\nbuild/CTestTestfile.cmake\nbuild/DartConfiguration.tcl\nbuild/data\nbuild/docs\nbuild/lua\nbuild/bin\nbuild/lib\nbuild/depends\nbuild/library\nbuild/package\nbuild/plugins\nbuild/scripts\nbuild/install_manifest.txt\nbuild/_CPack_Packages\nbuild/dfhack-*.zip\nbuild/dfhack-*.bz2\nbuild/*ninja*\nbuild/compile_commands.json\nbuild/dfhack_setarch.txt\nbuild/ImportExecutables.cmake\nbuild/Testing\n\n# Python binding binaries\n*.pyc\n\n# CPack stuff\nbuild/CPack*Config.cmake\n\n/cmakeall.bat\n\n# vim files\n*.swp\n.vimrc\n\n# VSCode files\n.vscode\n\n# ctags file\ntags\n\n# Mac OS X .DS_Store files\n.DS_Store\n\n# VS is annoying about this one.\n/build/win64/DF_PATH.txt\n/build/win32/DF_PATH.txt\n/.vs\n\n# CLion\n.idea\n\n# external plugins\n/plugins/CMakeLists.custom.txt\n\n# 3rd party downloads\ndepends/steam\ndepends/SDL2\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.921875,
          "content": "[submodule \"plugins/stonesense\"]\n\tpath = plugins/stonesense\n\turl = ../../DFHack/stonesense.git\n[submodule \"library/xml\"]\n\tpath = library/xml\n\turl = ../../DFHack/df-structures.git\n[submodule \"depends/clsocket\"]\n\tpath = depends/clsocket\n\turl = ../../DFHack/clsocket.git\n[submodule \"scripts2\"]\n\tpath = scripts\n\turl = ../../DFHack/scripts.git\n[submodule \"depends/jsoncpp\"]\n\tpath = depends/jsoncpp-sub\n\turl = ../../DFHack/jsoncpp.git\n[submodule \"depends/xlsxio\"]\n\tpath = depends/xlsxio\n\turl = ../../DFHack/xlsxio.git\n[submodule \"depends/libzip\"]\n\tpath = depends/libzip\n\turl = ../../DFHack/libzip.git\n[submodule \"depends/libexpat\"]\n\tpath = depends/libexpat\n\turl = ../../DFHack/libexpat.git\n[submodule \"depends/luacov\"]\n\tpath = depends/luacov\n\turl = ../../DFHack/luacov.git\n[submodule \"depends/googletest\"]\n\tpath = depends/googletest\n\turl = ../../google/googletest.git\n[submodule \"depends/dfhooks\"]\n\tpath = depends/dfhooks\n\turl = ../../DFHack/dfhooks\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.12109375,
          "content": "ci:\n  autofix_prs: false\n  autoupdate_schedule: monthly\nrepos:\n# shared across repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v5.0.0\n  hooks:\n    - id: check-added-large-files\n    - id: check-case-conflict\n    - id: check-executables-have-shebangs\n    - id: check-merge-conflict\n    - id: check-shebang-scripts-are-executable\n    - id: check-symlinks\n    - id: check-xml\n    - id: check-yaml\n    - id: destroyed-symlinks\n    - id: end-of-file-fixer\n    - id: mixed-line-ending\n      args: ['--fix=lf']\n    - id: trailing-whitespace\n- repo: https://github.com/python-jsonschema/check-jsonschema\n  rev: 0.30.0\n  hooks:\n    - id: check-github-workflows\n- repo: https://github.com/Lucas-C/pre-commit-hooks\n  rev: v1.5.5\n  hooks:\n    - id: forbid-tabs\n      exclude_types:\n        - json\n    - id: remove-tabs\n      exclude_types:\n        - json\n# specific to dfhack:\n- repo: local\n  hooks:\n    - id: authors-rst\n      name: Check Authors.rst\n      language: python\n      entry: python3 ci/authors-rst.py\n      files: docs/about/Authors\\.rst\n      pass_filenames: false\nexclude: '^(depends/|data/.*\\.json$|.*\\.diff$|.*\\.dfstock$)'\n"
        },
        {
          "name": ".readthedocs.requirements.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.3310546875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3\"\n\nsubmodules:\n  include: all\n\nsphinx:\n  configuration: conf.py\n\nformats: all\n\npython:\n  install:\n  - requirements: .readthedocs.requirements.txt\n"
        },
        {
          "name": ".ycm_extra_conf.py",
          "type": "blob",
          "size": 5.2001953125,
          "content": "'''This file provides editor completions while working on DFHack using ycmd:\nhttps://github.com/Valloric/ycmd\n'''\n\n# pylint: disable=import-error,invalid-name,missing-docstring,unused-argument\n\nimport os,platform\nimport ycm_core\n\ndef DirectoryOfThisScript():\n    return os.path.dirname(os.path.abspath(__file__))\n\ndefault_flags = [\n    '-I','library/include',\n    '-I','library/proto',\n    '-I','plugins/proto',\n    '-I','depends/protobuf',\n    '-I','depends/lua/include',\n    '-I','depends/md5',\n    '-I','depends/jsoncpp/include',\n    '-I','depends/tinyxml',\n    '-I','depends/clsocket/src',\n    '-x','c++',\n    '-D','PROTOBUF_USE_DLLS',\n    '-D','LUA_BUILD_AS_DLL',\n    '-Wall','-Wextra',\n]\n\nif os.name == 'posix':\n    default_flags.extend([\n        '-D','LINUX_BUILD',\n        '-D','_GLIBCXX_USE_C99',\n    ])\n    if platform.system() == 'Darwin':\n        default_flags.extend(['-D','_DARWIN'])\n    else:\n        default_flags.extend(['-D','_LINUX'])\nelse:\n    default_flags.extend(['-D','WIN32'])\n\n# We need to tell YouCompleteMe how to compile this project. We do this using\n# clang's \"Compilation Database\" system, which essentially just dumps a big\n# json file into the build folder.\n# More details: http://clang.llvm.org/docs/JSONCompilationDatabase.html\n#\n# We don't use clang, but luckily CMake supports generating a database on its\n# own, using:\n#     set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )\n\nfor potential_build_folder in ['build', 'build-osx']:\n    if os.path.exists(DirectoryOfThisScript() + os.path.sep + potential_build_folder\n                      + os.path.sep + 'compile_commands.json'):\n        database = ycm_core.CompilationDatabase(potential_build_folder)\n        break\nelse:\n    raise RuntimeError(\"Can't find dfhack build folder: not one of build, build-osx\")\n\n\ndef MakeRelativePathsInFlagsAbsolute(flags, working_directory):\n    if not working_directory:\n        return list(flags)\n    new_flags = []\n    make_next_absolute = False\n    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']\n    for flag in flags:\n        new_flag = flag\n\n        if make_next_absolute:\n            make_next_absolute = False\n            if not flag.startswith('/'):\n                new_flag = os.path.join(working_directory, flag)\n\n        for path_flag in path_flags:\n            if flag == path_flag:\n                make_next_absolute = True\n                break\n\n            if flag.startswith(path_flag):\n                path = flag[len(path_flag):]\n                new_flag = path_flag + os.path.join(working_directory, path)\n                break\n\n        if new_flag:\n            new_flags.append(new_flag)\n    return new_flags\n\n\ndef IsHeaderFile(filename):\n    extension = os.path.splitext(filename)[1]\n    return extension in ['.h', '.hxx', '.hpp', '.hh']\n\n\nSOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']\n\ndef PotentialAlternatives(header):\n    dirname, filename = os.path.split(header)\n    basename, _ = os.path.splitext(filename)\n\n    source_dirs = [dirname]\n\n    if dirname.endswith(os.path.sep + 'include'):\n        # if we're in a folder 'include', also look in its parent\n        parent = os.path.abspath(os.path.join(dirname, os.path.pardir))\n        source_dirs.append(parent)\n        # and ../src (used by lua dependency)\n        source_dirs.append(os.path.join(parent, 'src'))\n\n    include_idx = dirname.rfind(os.path.sep + 'include' + os.path.sep)\n    if include_idx != -1:\n        # we're in a subfolder of a parent '/include/'\n        # .../include/subdir/path\n        # look in .../subdir/path\n        source_dirs.append(\n            dirname[:include_idx] +\n            os.path.sep +\n            dirname[include_idx + len('include') + 2*len(os.path.sep):]\n        )\n\n    for source_dir in source_dirs:\n        for ext in SOURCE_EXTENSIONS:\n            yield source_dir + os.path.sep + basename + ext\n\n\ndef GetCompilationInfoForFile(filename):\n    # The compilation_commands.json file generated by CMake does not have entries\n    # for header files. So we do our best by asking the db for flags for a\n    # corresponding source file, if any. If one exists, the flags for that file\n    # should be good enough.\n    if IsHeaderFile(filename):\n        for alternative in PotentialAlternatives(filename):\n            if os.path.exists(alternative):\n                compilation_info = database.GetCompilationInfoForFile(\n                    alternative\n                )\n\n                if compilation_info.compiler_flags_:\n                    return compilation_info\n        return None\n    else:\n        return database.GetCompilationInfoForFile(filename)\n\n\ndef FlagsForFile(filename, **kwargs):\n    # Bear in mind that compilation_info.compiler_flags_ does NOT return a\n    # python list, but a \"list-like\" StringVec object\n    compilation_info = GetCompilationInfoForFile(filename)\n    if not compilation_info:\n        return {\n            'flags':MakeRelativePathsInFlagsAbsolute(default_flags,DirectoryOfThisScript()),\n            'do_cache': True,\n        }\n\n    final_flags = MakeRelativePathsInFlagsAbsolute(\n        compilation_info.compiler_flags_,\n        compilation_info.compiler_working_dir_\n    )\n\n    # Make sure ycm reports more suspicuous code lines\n    final_flags.append('-Wextra')\n\n    return {\n        'flags': final_flags,\n        'do_cache': True\n    }\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.126953125,
          "content": "# main project file. use it from a build sub-folder, see COMPILE for details\n\n## some generic CMake magic\ncmake_minimum_required(VERSION 3.18 FATAL_ERROR)\ncmake_policy(SET CMP0048 NEW)\ncmake_policy(SET CMP0074 NEW)\n\n# set up versioning.\nset(DF_VERSION \"50.15\")\nset(DFHACK_RELEASE \"r1.2\")\nset(DFHACK_PRERELEASE FALSE)\n\nset(DFHACK_VERSION \"${DF_VERSION}-${DFHACK_RELEASE}\")\nset(DFHACK_ABI_VERSION 2)\nset(DFHACK_BUILD_ID \"\" CACHE STRING \"Build ID (should be specified on command line)\")\n\n# set up ccache\nfind_program(CCACHE_EXECUTABLE \"ccache\" HINTS /usr/local/bin /opt/local/bin)\nif(CCACHE_EXECUTABLE)\n    message(STATUS \"using ccache\")\n    set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\" CACHE PATH \"ccache\" FORCE)\n    set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_EXECUTABLE}\" CACHE PATH \"ccache\" FORCE)\nendif()\n\n# project must be declared *after* ccache setup\nproject(dfhack)\n\n# Set up build types\nif(CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_CONFIGURATION_TYPES \"Release;RelWithDebInfo\" CACHE STRING \"List of supported configuration types\" FORCE)\nelse(CMAKE_CONFIGURATION_TYPES)\n    set(DFHACK_TYPE_HELP \"Choose the type of build, options are: Release and RelWithDebInfo\")\n    # Prevent cmake C module attempts to overwrite our help string\n    if(NOT CMAKE_BUILD_TYPE)\n        set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"${DFHACK_TYPE_HELP}\")\n    else(NOT CMAKE_BUILD_TYPE)\n        set(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING \"${DFHACK_TYPE_HELP}\")\n    endif(NOT CMAKE_BUILD_TYPE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Release;RelWithDebInfo\")\nendif(CMAKE_CONFIGURATION_TYPES)\n\noption(BUILD_DOCS \"Choose whether to build the documentation (requires python and Sphinx).\" OFF)\noption(BUILD_DOCS_NO_HTML \"Don't build the HTML docs, only the in-game docs.\" OFF)\noption(REMOVE_SYMBOLS_FROM_DF_STUBS \"Remove debug symbols from DF stubs. (Reduces libdfhack size to about half but removes a few useful symbols)\" ON)\n\nmacro(CHECK_GCC compiler_path)\n    execute_process(COMMAND ${compiler_path} -dumpversion OUTPUT_VARIABLE GCC_VERSION_OUT)\n    string(STRIP \"${GCC_VERSION_OUT}\" GCC_VERSION_OUT)\n    if(${GCC_VERSION_OUT} VERSION_LESS \"10\")\n        message(SEND_ERROR \"${compiler_path} version ${GCC_VERSION_OUT} cannot be used - use GCC 10 or later\")\n    endif()\nendmacro()\n\nif(UNIX)\n    if(CMAKE_COMPILER_IS_GNUCC)\n        check_gcc(${CMAKE_C_COMPILER})\n    else()\n        message(SEND_ERROR \"C compiler is not GCC\")\n    endif()\n    if(CMAKE_COMPILER_IS_GNUCXX)\n        check_gcc(${CMAKE_CXX_COMPILER})\n    else()\n        message(SEND_ERROR \"C++ compiler is not GCC\")\n    endif()\nendif()\n\nif(WIN32)\n    set(MSVC_MIN_VER 1930)\n    set(MSVC_MAX_VER 1942)\n    if(NOT MSVC)\n        message(SEND_ERROR \"No MSVC found! MSVC 2022 version ${MSVC_MIN_VER} to ${MSVC_MAX_VER} is required.\")\n    elseif((MSVC_VERSION LESS MSVC_MIN_VER) OR (MSVC_VERSION GREATER MSVC_MAX_VER))\n        message(SEND_ERROR \"MSVC 2022 version ${MSVC_MIN_VER} to ${MSVC_MAX_VER} is required, Version Found: ${MSVC_VERSION}\")\n    endif()\nendif()\n\n# Ask for C++-20 standard from compilers\nset(CMAKE_CXX_STANDARD 20)\n# Require the standard support from compilers.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n# Use only standard c++ to keep code portable\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nif(MSVC)\n    # increase warning level and treat warnings as errors\n    add_compile_options(\"/WX\")\n    add_compile_options(\"/W3\")\n\n    # disable C4819 code-page warning\n    add_compile_options(\"/wd4819\")\n\n    # disable use of POSIX name warnings\n    add_definitions(\"/D_CRT_NONSTDC_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS\")\n\n    # supress C4503 - VC++ dislikes if a name is too long. If you get\n    # weird and mysterious linking errors, you can disable this, but you'll have to\n    # deal with a LOT of compiler noise over it\n    # see https://msdn.microsoft.com/en-us/library/074af4b6.aspx\n    add_compile_options(\"/wd4503\")\n\n    # suppress C4267 - VC++ considers a narrowing conversion from size_t to a smaller\n    # integer type a warning. this is technically correct but there are so many instances\n    # of this that we don't want to fix, so....\n    add_compile_options(\"/wd4267\")\n\n    # suppress C4251 - VC++ will warn when exporting an entire class which contains members\n    # referencing unexported compound types as this is potentially unsafe. because we don't\n    # guarantee a stable ABI for exports, we don't really care about this, and so we choose to\n    # be lazy and continue to export entire classes instead of exporting on a method-by-method basis\n    add_compile_options(\"/wd4251\")\n\n    # suppress C4068 - VC++ will warn for unknown pragmas by default. this is equivalent to gcc\n    # -Wno-unknown-pragmas (which is enabled for gcc below).\n    # we could work around this with sufficiently complex macros\n    add_compile_options(\"/wd4068\")\n\n    # suppress C4244 - VC++ warns by default (with /W3) about narrowing conversions that may lose data\n    # (such as double -> int or int32_t -> int16_t). dfhack has many of these, mostly related to Lua\n    # this is equivalent to gcc -Wno_conversions which is the default as gcc -Wall doesn't enable -Wconversions\n    add_compile_options(\"/wd4244\")\n\n    # Enable C5038 - This is equivalent to gcc's -Werror=reorder, which is enabled by default by gcc -Wall\n    add_compile_options(\"/w15038\")\n\n    # MSVC panics if an object file contains more than 65,279 sections. this\n    # happens quite frequently with code that uses templates, such as vectors.\n    add_compile_options(\"/bigobj\")\nendif()\n\n# Automatically detect architecture based on Visual Studio generator\nif(MSVC AND NOT DEFINED DFHACK_BUILD_ARCH)\n    if ((${CMAKE_GENERATOR} MATCHES \"Win32\") OR (${CMAKE_GENERATOR} MATCHES \"x86\"))\n        message(SEND_ERROR \"DF v50 does not support 32-bit\")\n    else()\n        set(DFHACK_BUILD_ARCH \"64\")\n    endif()\nelse()\n    set(DFHACK_BUILD_ARCH \"64\" CACHE STRING \"Architecture to build ('32' or '64')\")\nendif()\n\nif(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"32\")\n    set(DFHACK_BUILD_32 1)\n    set(DFHACK_BUILD_64 0)\n    set(DFHACK_SETARCH \"i386\")\nelseif(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"64\")\n    set(DFHACK_BUILD_32 0)\n    set(DFHACK_BUILD_64 1)\n    set(DFHACK_SETARCH \"x86_64\")\n    add_definitions(-DDFHACK64)\nelse()\n    message(SEND_ERROR \"Invalid build architecture (should be 32 or 64): ${DFHACK_BUILD_ARCH}\")\nendif()\n\nif(CMAKE_CROSSCOMPILING)\n    set(DFHACK_NATIVE_BUILD_DIR \"DFHACK_NATIVE_BUILD_DIR-NOTFOUND\" CACHE FILEPATH \"Path to a native build directory\")\n    include(\"${DFHACK_NATIVE_BUILD_DIR}/ImportExecutables.cmake\")\nendif()\n\nfind_package(Perl REQUIRED)\n\n# set up folder structures for IDE solutions\n# checking for msvc express is meaningless now, all available editions of msvc support folder groupings\noption(CMAKE_USE_FOLDERS \"Enable folder grouping of projects in IDEs.\" ON)\n\nif(CMAKE_USE_FOLDERS)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nelse()\n    set_property(GLOBAL PROPERTY USE_FOLDERS OFF)\nendif()\n\n# macro for setting up IDE folders without nasty if()s everywhere\nmacro(IDE_FOLDER target folder)\n    if(CMAKE_USE_FOLDERS)\n        set_property(TARGET ${target} PROPERTY FOLDER ${folder})\n    endif()\nendmacro()\n\nset(CMAKE_MODULE_PATH\n    ${dfhack_SOURCE_DIR}/CMake/Modules\n    ${CMAKE_MODULE_PATH}\n)\n\n# generates compile_commands.json, used for autocompletion by some editors\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"\n#include <cstdlib>\n#include <cuchar>\nint main(void) {\n    char32_t in = 0;\n    char out[MB_CUR_MAX];\n    std::mbstate_t state{};\n    std::c32rtomb(out, in, &state);\n    return 0;\n}\" HAVE_CUCHAR2)\nif(HAVE_CUCHAR2)\n    add_definitions(\"-DHAVE_CUCHAR\")\nendif()\n\n# mixing the build system with the source code is ugly and stupid. enforce the opposite :)\nif(\"${dfhack_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n    message(FATAL_ERROR \"In-source builds are not allowed.\")\nendif()\n\n# make sure all the necessary submodules have been set up\nif(NOT EXISTS ${dfhack_SOURCE_DIR}/library/xml/codegen.pl\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/scripts/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/dfhooks/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/clsocket/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/jsoncpp-sub/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/libexpat/expat/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/libzip/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/xlsxio/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/googletest/CMakeLists.txt\n    OR NOT EXISTS ${dfhack_SOURCE_DIR}/depends/luacov/src\n)\n    message(SEND_ERROR \"One or more required submodules could not be found! Run 'git submodule update --init' from the root DFHack directory. (See the section 'Getting the Code' in docs/dev/compile/Compile.rst)\")\nendif()\n\n# dfhack data goes here:\nset(DFHACK_DATA_DESTINATION hack)\n\n## where to install things (after the build is done, classic 'make install' or package structure)\n# the dfhack libraries will be installed here:\nif(UNIX)\n    # put the lib into DF/hack\n    set(DFHACK_LIBRARY_DESTINATION ${DFHACK_DATA_DESTINATION})\nelse()\n    # windows is crap, therefore we can't do nice things with it. leave the libs on a nasty pile...\n    set(DFHACK_LIBRARY_DESTINATION .)\nendif()\n\n# external tools will be installed here:\nset(DFHACK_BINARY_DESTINATION .)\n# plugin libs go here:\nset(DFHACK_PLUGIN_DESTINATION ${DFHACK_DATA_DESTINATION}/plugins)\n# dfhack lua files go here:\nset(DFHACK_LUA_DESTINATION ${DFHACK_DATA_DESTINATION}/lua)\n\n# user documentation goes here:\nset(DFHACK_USERDOC_DESTINATION ${DFHACK_DATA_DESTINATION})\n\n# some options for the user/developer to play with\noption(BUILD_LIBRARY \"Build the DFHack library.\" ON)\noption(BUILD_PLUGINS \"Build the DFHack plugins.\" ON)\noption(INSTALL_SCRIPTS \"Install DFHack scripts.\" ON)\noption(INSTALL_DATA_FILES \"Install DFHack platform independent files.\" ON)\n\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\nif(UNIX)\n    ## flags for GCC\n    # default to hidden symbols\n    # ensure compatibility with older CPUs\n    add_definitions(-DLINUX_BUILD)\n    set(GCC_COMMON_FLAGS \"-fvisibility=hidden -mtune=generic -Wall -Werror -Wl,--disable-new-dtags -Wno-unknown-pragmas\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${GCC_COMMON_FLAGS}\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${GCC_COMMON_FLAGS}\")\n    if(DFHACK_BUILD_64)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m64 -mno-avx\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m64 -mno-avx\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32 -march=i686\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m32 -march=i686\")\n    endif()\n    string(REPLACE \"-DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_INSTALL_RPATH ${DFHACK_LIBRARY_DESTINATION})\nelseif(MSVC)\n    # for msvc, tell it to always use 8-byte pointers to member functions to avoid confusion\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /vmg /vmm /MP\")\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Od\")\n    string(REPLACE \"/O2\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    string(REPLACE \"/DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n\n    option(BUILD_PDBS \"Build PDB debug symbol files.\" OFF)\n    if(BUILD_PDBS)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Z7\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /DEBUG\")\n        set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /DEBUG\")\n    endif()\nendif()\n\n# use shared libraries for protobuf\nadd_definitions(-DPROTOBUF_USE_DLLS)\nadd_definitions(-DLUA_BUILD_AS_DLL)\n\nif(APPLE)\n    add_definitions(-D_DARWIN)\n    set(CMAKE_MACOSX_RPATH 1)\nelseif(UNIX)\n    add_definitions(-D_LINUX)\nelseif(WIN32)\n    add_definitions(-DWIN32)\nendif()\n\n#### dependencies ####\n\n# fix for pyenv: default to `python3` before `python3.x`\nset(Python_FIND_UNVERSIONED_NAMES FIRST)\n\ninclude(CMake/DownloadFile.cmake)\n\nif(WIN32)\n    set(ZLIB_FILE zlib.lib)\n    set(ZLIB_PATH ${dfhack_SOURCE_DIR}/depends/zlib/)\n    set(ZLIB_MD5 a3b2fc6b68efafa89b0882e354fc8418)\n    download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/win64-${ZLIB_FILE}\"\n        ${ZLIB_PATH}lib/${ZLIB_FILE}\n        ${ZLIB_MD5})\n    set(ZLIB_ROOT ${ZLIB_PATH})\nelse()\n    # Rescan for pthread and zlib if the build arch changed\n    if(NOT \"${DFHACK_BUILD_ARCH}\" STREQUAL \"${DFHACK_BUILD_ARCH_PREV}\")\n        unset(ZLIB_LIBRARY CACHE)\n        unset(CMAKE_HAVE_PTHREAD_H CACHE)\n    endif()\n\n    if(NOT APPLE AND DFHACK_BUILD_32)\n        set(ZLIB_ROOT /usr/lib/i386-linux-gnu)\n    endif()\nendif()\nfind_package(ZLIB REQUIRED)\n\nset(USE_SYSTEM_SDL2 OFF CACHE BOOL \"Set to ON to use the system SDL2 headers.\")\n\nif(BUILD_LIBRARY)\n    if(USE_SYSTEM_SDL2)\n        find_package(SDL2 REQUIRED CONFIG REQUIRED COMPONENTS SDL2)\n    else()\n        # Download SDL release and extract into depends in the build dir\n        # all we need are the header files (including generated headers), so the same release package\n        # will work for all platforms\n        # (the above statement is untested for OSX)\n        set(SDL_VERSION 2.26.2)\n        set(SDL_ZIP_MD5 574daf26d48de753d0b1e19823c9d8bb)\n        set(SDL_ZIP_FILE SDL2-devel-${SDL_VERSION}-VC.zip)\n        set(SDL_ZIP_PATH ${dfhack_SOURCE_DIR}/depends/SDL2/)\n        download_file(\"https://github.com/libsdl-org/SDL/releases/download/release-${SDL_VERSION}/${SDL_ZIP_FILE}\"\n            ${SDL_ZIP_PATH}${SDL_ZIP_FILE}\n            ${SDL_ZIP_MD5})\n        file(ARCHIVE_EXTRACT INPUT ${SDL_ZIP_PATH}${SDL_ZIP_FILE}\n            DESTINATION ${SDL_ZIP_PATH})\n        set(SDL2_INCLUDE_DIRS ${SDL_ZIP_PATH}/SDL2-${SDL_VERSION}/include)\n    endif()\nendif()\n\nif(APPLE)\n    # libstdc++ (GCC 4.8.5 for OS X 10.6)\n    # fixes crash-on-unwind bug in DF's libstdc++\n    set(LIBSTDCXX_DOWNLOAD_DIR ${dfhack_SOURCE_DIR}/package/darwin/osx${DFHACK_BUILD_ARCH})\n\n    if(${GCC_VERSION_OUT} VERSION_LESS \"4.9\")\n        set(LIBSTDCXX_GCC_VER \"48\")\n    else()\n        set(LIBSTDCXX_GCC_VER \"7\")\n        set(LIBSTDCXX_DOWNLOAD_DIR \"${LIBSTDCXX_DOWNLOAD_DIR}-gcc7\")\n    endif()\n\n    if(${DFHACK_BUILD_ARCH} STREQUAL \"64\")\n        if(${LIBSTDCXX_GCC_VER} STREQUAL \"48\")\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-gcc48-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"cf26ed588be8e83c8e3a49919793b416\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"16dc6dbd4ecde7f9b95bb6dc91f07404\")\n        else()\n            # GCC 7\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-gcc7-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"81314b7846f9e8806409bef2160c76e6\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"93b6cf4b01e9a9084a508fd6a4a88992\")\n        endif()\n\n    else() # 32-bit\n\n        if(${LIBSTDCXX_GCC_VER} STREQUAL \"48\")\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx32-gcc48-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"40f3d83871b114f0279240626311621b\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"c3f5678b8204917e03870834902c3e8b\")\n        else()\n            # GCC 7\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx32-gcc7-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"dbd213171f66edb90d204d525f10c969\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"b14c857e7e485a097c70a9ccd3132da7\")\n        endif()\n    endif()\n\n    if(NOT EXTERNAL_LIBSTDCXX)\n        install(PROGRAMS ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n            DESTINATION ./hack/)\n    endif()\nendif()\n\n#### expose depends ####\n\n# Support linking against external tinyxml\n# If we find an external tinyxml, set the DFHACK_TINYXML variable to \"tinyxml\"\n# Otherwise, set it to \"dfhack-tinyxml\"\noption(EXTERNAL_TINYXML \"Choose to link against external TinyXML\" OFF)\nif(EXTERNAL_TINYXML)\n    find_package(TinyXML REQUIRED)\n    if(NOT TinyXML_FOUND)\n        message(SEND_ERROR \"Could not find an external TinyXML, consider setting EXTERNAL_TINYXML to OFF.\")\n    endif()\n    set(DFHACK_TINYXML \"tinyxml\")\nelse()\n    set(DFHACK_TINYXML \"dfhack-tinyxml\")\nendif()\n\nif(BUILD_LIBRARY)\n    add_subdirectory(depends)\nendif()\n\n# Testing with CTest\nmacro(dfhack_test name files)\nif(BUILD_LIBRARY AND UNIX AND NOT APPLE) # remove this once our MSVC build env has been updated\n    add_executable(${name} ${files})\n    target_include_directories(${name} PUBLIC depends/googletest/googletest/include)\n    target_link_libraries(${name} dfhack gtest)\n    add_test(NAME ${name} COMMAND ${name})\nendif()\nendmacro()\ninclude(CTest)\n\nfind_package(Git REQUIRED)\nif(NOT GIT_FOUND)\n    message(SEND_ERROR \"could not find git\")\nendif()\n\n# build the lib itself\nadd_subdirectory(library)\nif(BUILD_LIBRARY)\n    file(WRITE ${CMAKE_BINARY_DIR}/dfhack_setarch.txt ${DFHACK_SETARCH})\n    install(FILES ${CMAKE_BINARY_DIR}/dfhack_setarch.txt DESTINATION ${DFHACK_DATA_DESTINATION})\nendif()\n\n# build the plugins\nadd_subdirectory(plugins)\n\nif(INSTALL_DATA_FILES)\n    add_subdirectory(data)\n    install(FILES LICENSE.rst DESTINATION ${DFHACK_USERDOC_DESTINATION})\n    install(FILES docs/changelog-placeholder.txt DESTINATION ${DFHACK_USERDOC_DESTINATION} RENAME changelog.txt)\n    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/depends/luacov/src/luacov/ DESTINATION ${DFHACK_DATA_DESTINATION}/lua/luacov)\nendif()\n\nif(INSTALL_SCRIPTS)\n    add_subdirectory(scripts)\nendif()\n\nif(BUILD_DOCS)\n    find_package(Python3)\n    find_package(Sphinx)\n\n    if(NOT SPHINX_FOUND)\n        message(SEND_ERROR \"Sphinx not found but BUILD_DOCS enabled\")\n    endif()\n\n    file(GLOB SPHINX_GLOB_DEPS\n        LIST_DIRECTORIES false\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/images/*.png\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/styles/*\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/data/init/*init\"\n    )\n    file(GLOB_RECURSE SPHINX_GLOB_RECURSE_DEPS\n        \"${CMAKE_CURRENT_SOURCE_DIR}/*.rst\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/changelog.txt\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/*py\"\n    )\n    list(FILTER SPHINX_GLOB_RECURSE_DEPS\n        EXCLUDE REGEX \"docs/changelogs\"\n    )\n    list(FILTER SPHINX_GLOB_RECURSE_DEPS\n        EXCLUDE REGEX \"docs/html\"\n    )\n    list(FILTER SPHINX_GLOB_RECURSE_DEPS\n        EXCLUDE REGEX \"docs/tags\"\n    )\n    list(FILTER SPHINX_GLOB_RECURSE_DEPS\n        EXCLUDE REGEX \"docs/text\"\n    )\n    list(FILTER SPHINX_GLOB_RECURSE_DEPS\n        EXCLUDE REGEX \"docs/tools\"\n    )\n    set(SPHINX_DEPS ${SPHINX_GLOB_DEPS} ${SPHINX_GLOB_RECURSE_DEPS} ${SPHINX_SCRIPT_DEPS}\n        \"${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/conf.py\"\n    )\n\n    if(BUILD_DOCS_NO_HTML)\n        set(SPHINX_OUTPUT \"${CMAKE_CURRENT_SOURCE_DIR}/docs/text/index.txt\")\n        set(SPHINX_BUILD_TARGETS text)\n    else()\n        set(SPHINX_OUTPUT \"${CMAKE_CURRENT_SOURCE_DIR}/docs/html/.buildinfo\")\n        set(SPHINX_BUILD_TARGETS html text)\n    endif()\n\n    set_property(\n        DIRECTORY PROPERTY ADDITIONAL_CLEAN_FILES TRUE\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/changelogs\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/html\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/pdf\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/pseudoxml\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/tags\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/text\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/tools\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/docs/xml\"\n        \"${CMAKE_BINARY_DIR}/docs/html\"\n        \"${CMAKE_BINARY_DIR}/docs/pdf\"\n        \"${CMAKE_BINARY_DIR}/docs/pseudoxml\"\n        \"${CMAKE_BINARY_DIR}/docs/text\"\n        \"${CMAKE_BINARY_DIR}/docs/xml\"\n    )\n\n    add_custom_command(OUTPUT ${SPHINX_OUTPUT}\n        COMMAND \"${Python3_EXECUTABLE}\" \"${CMAKE_CURRENT_SOURCE_DIR}/docs/build.py\"\n        ${SPHINX_BUILD_TARGETS} --sphinx=\"${SPHINX_EXECUTABLE}\" -- -q -W\n        DEPENDS ${SPHINX_DEPS}\n        COMMENT \"Building documentation with Sphinx\"\n    )\n\n    add_custom_target(dfhack_docs ALL\n        DEPENDS ${SPHINX_OUTPUT}\n    )\n    # Sphinx doesn't touch this file if it didn't make changes,\n    # which makes CMake think it didn't complete\n    add_custom_command(TARGET dfhack_docs POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E touch ${SPHINX_OUTPUT})\n\n    if(NOT BUILD_DOCS_NO_HTML)\n        install(DIRECTORY ${dfhack_SOURCE_DIR}/docs/html/\n            DESTINATION ${DFHACK_USERDOC_DESTINATION}/docs\n            FILES_MATCHING PATTERN \"*\"\n                           PATTERN html/_sources EXCLUDE)\n    endif()\n    install(DIRECTORY ${dfhack_SOURCE_DIR}/docs/text/\n        DESTINATION ${DFHACK_USERDOC_DESTINATION}/docs)\n    install(FILES docs/changelogs/news.rst docs/changelogs/news-dev.rst DESTINATION ${DFHACK_USERDOC_DESTINATION})\n    install(FILES \"README.html\" DESTINATION \"${DFHACK_DATA_DESTINATION}\")\nendif()\n\noption(BUILD_TESTS \"Include tests (currently just installs Lua tests into the scripts folder)\" OFF)\nif(BUILD_TESTS)\n    if(EXISTS \"${dfhack_SOURCE_DIR}/test/scripts\")\n        message(SEND_ERROR \"test/scripts must not exist in the dfhack repo since it would conflict with the tests installed from the scripts repo.\")\n    endif()\n    install(DIRECTORY ${dfhack_SOURCE_DIR}/test\n        DESTINATION ${DFHACK_DATA_DESTINATION}/scripts)\n    install(FILES ci/test.lua DESTINATION ${DFHACK_DATA_DESTINATION}/scripts)\nendif()\n\n# Packaging with CPack!\nset(DFHACK_PACKAGE_SUFFIX \"\")\nif(UNIX)\n    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)\n    string(STRIP ${GCC_VERSION} GCC_VERSION)\n    set(DFHACK_PACKAGE_SUFFIX \"-gcc-${GCC_VERSION}\")\n    set(CPACK_GENERATOR \"TBZ2\")\nelseif(WIN32)\n    set(CPACK_GENERATOR \"ZIP\")\nendif()\nset(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)\nif(APPLE)\n    set(DFHACK_PACKAGE_PLATFORM_NAME OSX)\nelse()\n    set(DFHACK_PACKAGE_PLATFORM_NAME ${CMAKE_SYSTEM_NAME})\nendif()\n# set on command line\nif(DFHACK_BUILD_ID STREQUAL \"\")\n    set(DFHACK_BUILD_ID_PACKAGE \"\")\nelse()\n    set(DFHACK_BUILD_ID_PACKAGE \"${DFHACK_BUILD_ID}-\")\nendif()\nset(CPACK_PACKAGE_FILE_NAME \"dfhack-${DFHACK_VERSION}-${DFHACK_BUILD_ID_PACKAGE}${DFHACK_PACKAGE_PLATFORM_NAME}-${DFHACK_BUILD_ARCH}bit${DFHACK_PACKAGE_SUFFIX}\")\ninclude(CPack)\n\noption(DFHACK_INCLUDE_CORE \"Download and include Dwarf Fortress core files in DFHack. Useful for local testing, but should not be used in releases.\" OFF)\nif(DFHACK_INCLUDE_CORE)\n    string(REPLACE \".\" \"_\" DF_CORE_FILENAME \"${DF_VERSION}\")\n    string(REGEX REPLACE \"^0_\" \"df_\" DF_CORE_FILENAME \"${DF_CORE_FILENAME}\")\n    if(UNIX)\n        if(APPLE)\n            string(APPEND DF_CORE_FILENAME \"_osx\")\n        else()\n            string(APPEND DF_CORE_FILENAME \"_linux\")\n        endif()\n        if(DFHACK_BUILD_32)\n            string(APPEND DF_CORE_FILENAME \"32\")\n        endif()\n        string(APPEND DF_CORE_FILENAME \".tar.bz2\")\n    else()\n        string(APPEND DF_CORE_FILENAME \"_win\")\n        if(DFHACK_BUILD_32)\n            string(APPEND DF_CORE_FILENAME \"32\")\n        endif()\n        string(APPEND DF_CORE_FILENAME \".zip\")\n    endif()\n    set(DF_CORE_URL \"http://bay12games.com/dwarves/${DF_CORE_FILENAME}\")\n    if(NOT EXISTS \"${CMAKE_BINARY_DIR}/${DF_CORE_FILENAME}\")\n        file(DOWNLOAD \"${DF_CORE_URL}\" \"${CMAKE_BINARY_DIR}/${DF_CORE_FILENAME}\" SHOW_PROGRESS)\n    endif()\n    file(REMOVE_RECURSE \"${CMAKE_BINARY_DIR}/df-core\")\n    file(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}/df-core\")\n    if(UNIX)\n        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xjf \"../${DF_CORE_FILENAME}\" --strip-components=1\n            WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/df-core\")\n    else()\n        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf \"../${DF_CORE_FILENAME}\" --format=zip\n            WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/df-core\")\n        file(REMOVE \"${CMAKE_BINARY_DIR}/df-core/SDL.dll\")\n    endif()\n    install(DIRECTORY \"${CMAKE_BINARY_DIR}/df-core/\"\n        DESTINATION .)\nendif()\n\n# Store old build arch\nset(DFHACK_BUILD_ARCH_PREV \"${DFHACK_BUILD_ARCH}\" CACHE STRING \"Previous build architecture\" FORCE)\n\noption(BUILD_SIZECHECK \"Build the sizecheck library, for research\" OFF)\nif(BUILD_LIBRARY AND BUILD_SIZECHECK)\n    add_subdirectory(depends/sizecheck)\n    add_dependencies(dfhack sizecheck)\nendif()\n\nadd_subdirectory(package)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 7.6396484375,
          "content": "{\n  \"configurations\": [\n    {\n      \"name\": \"MSVC 64 Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"REMOVE_SYMBOLS_FROM_DF_STUBS\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"DFHACK_INCLUDE_CORE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MSVC 64 Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 32 Debug\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/debug-32\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"intelliSenseMode\": \"linux-gcc-x86\",\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"REMOVE_SYMBOLS_FROM_DF_STUBS\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"DFHACK_INCLUDE_CORE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 32 Release\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/release-32\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"intelliSenseMode\": \"linux-gcc-x86\",\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 64 Debug\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/debug-64\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"intelliSenseMode\": \"linux-gcc-x64\",\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"REMOVE_SYMBOLS_FROM_DF_STUBS\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"DFHACK_INCLUDE_CORE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 64 Release\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/release-64\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"intelliSenseMode\": \"linux-gcc-x64\",\n      \"variables\": [\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 4.8 32 Debug\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/debug-32-48\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"intelliSenseMode\": \"linux-gcc-x86\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_C_COMPILER\",\n          \"value\": \"gcc-4.8\"\n        },\n        {\n          \"name\": \"CMAKE_CXX_COMPILER\",\n          \"value\": \"g++-4.8\"\n        },\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"REMOVE_SYMBOLS_FROM_DF_STUBS\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"DFHACK_INCLUDE_CORE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 4.8 32 Release\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/release-32-48\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"intelliSenseMode\": \"linux-gcc-x86\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_C_COMPILER\",\n          \"value\": \"gcc-4.8\"\n        },\n        {\n          \"name\": \"CMAKE_CXX_COMPILER\",\n          \"value\": \"g++-4.8\"\n        },\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 4.8 64 Debug\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/debug-64-48\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"intelliSenseMode\": \"linux-gcc-x64\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_C_COMPILER\",\n          \"value\": \"gcc-4.8\"\n        },\n        {\n          \"name\": \"CMAKE_CXX_COMPILER\",\n          \"value\": \"g++-4.8\"\n        },\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"REMOVE_SYMBOLS_FROM_DF_STUBS\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"DFHACK_INCLUDE_CORE\",\n          \"value\": \"1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GCC 4.8 64 Release\",\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\n      \"remoteCMakeListsRoot\": \"/tmp/dfhack-${workspaceHash}/src\",\n      \"remoteBuildRoot\": \"/tmp/dfhack-${workspaceHash}/release-64-48\",\n      \"rsyncCommandArgs\": \"--exclude=build --include=.git\",\n      \"remoteCopySources\": true,\n      \"cmakeExecutable\": \"$(which cmake)/..\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"intelliSenseMode\": \"linux-gcc-x64\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_C_COMPILER\",\n          \"value\": \"gcc-4.8\"\n        },\n        {\n          \"name\": \"CMAKE_CXX_COMPILER\",\n          \"value\": \"g++-4.8\"\n        },\n        {\n          \"name\": \"DFHACK_BUILD_ARCH\",\n          \"value\": \"64\"\n        },\n        {\n          \"name\": \"BUILD_STONESENSE\",\n          \"value\": \"1\"\n        }\n      ]\n    }\n  ]\n}\n"
        },
        {
          "name": "LICENSE.rst",
          "type": "blob",
          "size": 7.1689453125,
          "content": ".. _license:\n\n########\nLicenses\n########\n\nDFHack is distributed under the Zlib license, with some MIT- and BSD-licensed\ncomponents.  These licenses protect your right to use DFHack for any purpose,\ndistribute copies, and so on.\n\nThe core, plugins, scripts, and other DFHack code all use the ZLib license\nunless noted otherwise.  By contributing to DFHack, authors release the\ncontributed work under this license.\n\nSome graphic assets are derived from vanilla DF assets and used with permission\nfrom Bay12.\n\nDFHack also draws on several external packages. Their licenses are summarised\nhere and reproduced below.\n\n=============== ============= =================================================\nComponent       License       Copyright\n=============== ============= =================================================\nDFHack_         Zlib          \\(c\\) 2009-2012, Petr Mrázek\nclsocket_       BSD 3-clause  \\(c\\) 2007-2009, CarrierLabs, LLC.\ndirent_         MIT           \\(c\\) 2006, Toni Ronkko\nJSON.lua_       CC-BY-SA_     \\(c\\) 2010-2014, Jeffrey Friedl\njsoncpp_        MIT           \\(c\\) 2007-2010, Baptiste Lepilleur\nlibexpat_       MIT           \\(c\\) 1998-2000 Thai Open Source Software Center Ltd and Clark Cooper \\(c\\) 2001-2019 Expat maintainers\nlibzip_         BSD 3-clause  \\(c\\) 1999-2020 Dieter Baron and Thomas Klausner\nlinenoise_      BSD 2-clause  \\(c\\) 2010, Salvatore Sanfilippo & Pieter Noordhuis\nlua_            MIT           \\(c\\) 1994-2008, Lua.org, PUC-Rio.\nluacov_         MIT           \\(c\\) 2007 - 2018 Hisham Muhammad\nluafilesystem_  MIT           \\(c\\) 2003-2014, Kepler Project\nlua-profiler_   MIT           \\(c\\) 2002,2003,2004 Pepperfish\nprotobuf_       BSD 3-clause  \\(c\\) 2008, Google Inc.\ntinyxml_        Zlib          \\(c\\) 2000-2006, Lee Thomason\nUTF-8-decoder_  MIT           \\(c\\) 2008-2010, Bjoern Hoehrmann\nxlsxio_         MIT           \\(c\\) 2016-2020, Brecht Sanders\nalt-getopt_     MIT           \\(c\\) 2009 Aleksey Cheusov\ngoogletest_     BSD 3-Clause  \\(c\\) 2008, Google Inc.\n=============== ============= =================================================\n\n.. _DFHack: https://github.com/DFHack/dfhack\n.. _clsocket: https://github.com/DFHack/clsocket\n.. _dirent: https://github.com/tronkko/dirent\n.. _JSON.lua: http://regex.info/blog/lua/json\n.. _jsoncpp: https://github.com/open-source-parsers/jsoncpp\n.. _libexpat: https://github.com/libexpat/libexpat\n.. _libzip: https://github.com/nih-at/libzip\n.. _linenoise: http://github.com/antirez/linenoise\n.. _lua: http://www.lua.org\n.. _luacov: https://github.com/keplerproject/luacov\n.. _luafilesystem: https://github.com/keplerproject/luafilesystem\n.. _lua-profiler: http://lua-users.org/wiki/PepperfishProfiler\n.. _protobuf: https://github.com/google/protobuf\n.. _tinyxml: http://www.sourceforge.net/projects/tinyxml\n.. _UTF-8-decoder: http://bjoern.hoehrmann.de/utf-8/decoder/dfa\n.. _xlsxio: https://github.com/brechtsanders/xlsxio\n.. _alt-getopt: https://github.com/LuaDist/alt-getopt\n.. _googletest: https://github.com/google/googletest\n\n.. _CC-BY-SA: http://creativecommons.org/licenses/by/3.0/deed.en_US\n\n\nZlib License\n============\nSee https://en.wikipedia.org/wiki/Zlib_License\n::\n\n    This software is provided 'as-is', without any express or implied\n    warranty. In no event will the authors be held liable for any\n    damages arising from the use of this software.\n\n    Permission is granted to anyone to use this software for any\n    purpose, including commercial applications, and to alter it and\n    redistribute it freely, subject to the following restrictions:\n\n    1. The origin of this software must not be misrepresented; you must\n       not claim that you wrote the original software. If you use this\n       software in a product, an acknowledgment in the product\n       documentation would be appreciated but is not required.\n\n    2. Altered source versions must be plainly marked as such, and\n       must not be misrepresented as being the original software.\n\n    3. This notice may not be removed or altered from any source\n       distribution.\n\nMIT License\n===========\nSee https://en.wikipedia.org/wiki/MIT_License\n::\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    \"Software\"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be included\n    in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nBSD Licenses\n============\nSee https://en.wikipedia.org/wiki/BSD_licenses\n::\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are\n    met:\n\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in\n        the documentation and/or other materials provided with the\n        distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n``linenoise`` adds no further clauses.\n\n``protobuf`` adds the following clause::\n\n    3. Neither the name of Google Inc. nor the names of its\n       contributors may be used to endorse or promote products derived\n       from this software without specific prior written permission.\n\n``clsocket`` adds the following clauses::\n\n    3. The name of the author may not be used to endorse or promote\n       products derived from this software without specific prior\n       written permission.\n\n    4. The name \"CarrierLabs\" must not be used to endorse or promote\n       products derived from this software without prior written\n       permission. For written permission, please contact\n       mark@carrierlabs.com\n"
        },
        {
          "name": "README.html",
          "type": "blob",
          "size": 0.5673828125,
          "content": "<!DOCTYPE HTML>\n<!-- DO NOT CHANGE THIS FILE - it redirects to the actual documentation. -->\n<!-- If the page is not found, you can read the raw docs in the docs folder. -->\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"refresh\" content=\"0;url=./docs/index.html\">\n        <script type=\"text/javascript\">\n            window.location.href = \"./docs/index.html\"\n        </script>\n        <title>Page Redirection</title>\n    </head>\n    <body>\n        Follow this <a href='./docs/index.html'>link to the documentation.</a>\n    </body>\n</html>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.0478515625,
          "content": "# DFHack Readme\n\n[![Build Status](https://github.com/DFHack/dfhack/workflows/Build/badge.svg?event=push)](https://github.com/DFHack/dfhack/actions?query=workflow%3ABuild)\n[![Documentation Status](https://readthedocs.org/projects/dfhack/badge)](https://dfhack.readthedocs.org)\n[![License](https://img.shields.io/badge/license-ZLib-blue.svg)](https://en.wikipedia.org/wiki/Zlib_License)\n[![Discord](https://img.shields.io/discord/793331351645323264)](https://dfhack.org/discord)\n\nDFHack is a Dwarf Fortress memory access library, distributed with scripts\nand plugins implementing a wide variety of useful functions and tools.\n\nThe full documentation [is available online here](https://dfhack.readthedocs.org).\nIf you have DFHack installed, it is also accessible as raw text in the `hack/docs` folder.\nIf you're an end-user, modder, or interested in contributing to DFHack -- go read those docs.\n\nIf the docs are unclear or you need more help, please check out our [support page](https://docs.dfhack.org/en/latest/docs/Support.html) for ways to contact the DFHack developers.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf.py",
          "type": "blob",
          "size": 9.775390625,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\nDFHack documentation build configuration file\n\nThis file is execfile()d with the current directory set to its\ncontaining dir.\n\nNote that not all possible configuration values are present in this\nautogenerated file.\n\nAll configuration values have a default; values that are commented out\nserve to show the default.\n\"\"\"\n\n# pylint:disable=redefined-builtin\n\nimport datetime\nimport os\nimport re\nimport shlex  # pylint:disable=unused-import\nimport sphinx\nimport sys\n\nsys.path.append(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'docs', 'sphinx_extensions'))\nfrom dfhack.util import write_file_if_changed\n\nif os.environ.get('DFHACK_DOCS_BUILD_OFFLINE'):\n    # block attempted image downloads, particularly for the PDF builder\n    def request_disabled(*args, **kwargs):\n        raise RuntimeError('Offline build - network request blocked')\n\n    import urllib3.util\n    urllib3.util.create_connection = request_disabled\n\n    import urllib3.connection\n    urllib3.connection.HTTPConnection.connect = request_disabled\n\n    import requests\n    requests.request = request_disabled\n    requests.get = request_disabled\n\n\n# -- Autodoc for DFhack plugins and scripts -------------------------------\n\ndef doc_dir(dirname, files, prefix):\n    \"\"\"Yield (name, includepath) for each file in the directory.\"\"\"\n    sdir = os.path.relpath(dirname, '.').replace('\\\\', '/').replace('../', '')\n    if prefix == '.':\n        prefix = ''\n    else:\n        prefix += '/'\n    for f in files:\n        if f[-4:] != '.rst':\n            continue\n        yield prefix + f[:-4], sdir + '/' + f\n\n\ndef doc_all_dirs():\n    \"\"\"Collect the commands and paths to include in our docs.\"\"\"\n    tools = []\n    for root, _, files in os.walk('docs/builtins'):\n        tools.extend(doc_dir(root, files, os.path.relpath(root, 'docs/builtins')))\n    for root, _, files in os.walk('docs/plugins'):\n        tools.extend(doc_dir(root, files, os.path.relpath(root, 'docs/plugins')))\n    for root, _, files in os.walk('scripts/docs'):\n        tools.extend(doc_dir(root, files, os.path.relpath(root, 'scripts/docs')))\n    return tuple(tools)\n\n\ndef write_tool_docs():\n    \"\"\"\n    Creates a file for each tool with the \".. include::\" directives to pull in\n    the original documentation.\n    \"\"\"\n    for k in doc_all_dirs():\n        label = ('.. _{name}:\\n\\n').format(name=k[0])\n        include = ('.. include:: /{path}\\n\\n').format(path=k[1])\n        os.makedirs(os.path.join('docs/tools', os.path.dirname(k[0])),\n                    mode=0o755, exist_ok=True)\n        with write_file_if_changed('docs/tools/{}.rst'.format(k[0])) as outfile:\n            outfile.write(label)\n            outfile.write(include)\n\n\nwrite_tool_docs()\n\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\nneeds_sphinx = '3.4.3'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.extlinks',\n    'dfhack.changelog',\n    'dfhack.lexer',\n    'dfhack.tool_docs',\n]\n\nsphinx_major_version = sphinx.version_info[0]\n\ndef get_caption_str(prefix=''):\n    return prefix + (sphinx_major_version >= 5 and '%s' or '')\n\n# This config value must be a dictionary of external sites, mapping unique\n# short alias names to a base URL and a prefix.\n# See http://sphinx-doc.org/ext/extlinks.html\nextlinks = {\n    'wiki': ('https://dwarffortresswiki.org/%s', get_caption_str()),\n    'forums': ('http://www.bay12forums.com/smf/index.php?topic=%s',\n               get_caption_str('Bay12 forums thread ')),\n    'dffd': ('https://dffd.bay12games.com/file.php?id=%s',\n             get_caption_str('DFFD file ')),\n    'bug': ('https://dwarffortressbugtracker.com/view.php?id=%s',\n            get_caption_str('Bug ')),\n    'source': ('https://github.com/DFHack/dfhack/tree/develop/%s',\n               get_caption_str()),\n    'source-scripts': ('https://github.com/DFHack/scripts/tree/master/%s',\n                       get_caption_str()),\n    'issue': ('https://github.com/DFHack/dfhack/issues/%s',\n               get_caption_str('Issue ')),\n    'commit': ('https://github.com/DFHack/dfhack/commit/%s',\n               get_caption_str('Commit ')),\n}\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"docs/templates\"]\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\nsource_suffix = ['.rst']\n\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = 'DFHack'\ncopyright = '2015-%d, The DFHack Team' % datetime.datetime.now().year\nauthor = 'The DFHack Team'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n\ndef get_version():\n    \"\"\"Return the DFHack version string, from CMakeLists.txt\"\"\"\n    version = release = ''  #pylint:disable=redefined-outer-name\n    pattern = re.compile(r'set\\((df_version|dfhack_release)\\s+\"(.+?)\"\\)')\n    try:\n        with open('CMakeLists.txt') as f:\n            for s in f.readlines():\n                for match in pattern.findall(s.lower()):\n                    if match[0] == 'df_version':\n                        version = match[1]\n                    elif match[0] == 'dfhack_release':\n                        release = match[1]\n        return (version + '-' + release).replace('\")\\n', '')\n    except IOError:\n        return 'unknown'\n\n# The short X.Y version.\n# The full version, including alpha/beta/rc tags.\nversion = release = get_version()\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = 'en'\n\n# strftime format for |today| and 'Last updated on:' timestamp at page bottom\ntoday_fmt = html_last_updated_fmt = '%Y-%m-%d'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = [\n    'README.md',\n    '.git/*',\n    'build*',\n    'depends/*',\n    'docs/html/*',\n    'docs/tags/*',\n    'docs/text/*',\n    'docs/builtins/*',\n    'docs/pdf/*',\n    'docs/plugins/*',\n    'docs/pseudoxml/*',\n    'docs/xml/*',\n    'scripts/docs/*',\n    'plugins/*',\n    ]\n\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\ndefault_role = 'ref'\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# The default language to highlight source code in.\nhighlight_language = 'dfhack'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n\nrst_prolog = \"\"\"\n.. |sphinx_min_version| replace:: {sphinx_min_version}\n.. |dfhack_version| replace:: {dfhack_version}\n\"\"\".format(\n    sphinx_min_version=needs_sphinx,\n    dfhack_version=version,\n)\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'alabaster'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\nhtml_theme_options = {\n    'logo': 'dfhack-logo.png',\n    'github_user': 'DFHack',\n    'github_repo': 'dfhack',\n    'github_button': False,\n    'travis_button': False,\n    'fixed_sidebar': True,\n}\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'DFHack Docs'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = 'docs/styles/dfhack-icon.ico'\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['docs/styles']\n\n# A list of paths that contain extra files not directly related to the\n# documentation.\nhtml_extra_path = ['robots.txt']\n\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': [\n        'about.html',\n        'relations.html',\n        'searchbox.html',\n        'localtoc.html',\n    ]\n}\n\n# generate domain indices but not the (unused) genindex\nhtml_use_index = False\nhtml_domain_indices = True\n\n# don't link to rst sources in the generated pages\nhtml_show_sourcelink = False\n\nhtml_css_files = [\n    'dfhack.css',\n]\n\nif sphinx_major_version >= 5:\n    html_css_files.append('sphinx5.css')\n\n# -- Options for LaTeX output ---------------------------------------------\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, 'DFHack.tex', 'DFHack Documentation',\n     'The DFHack Team', 'manual'),\n]\n\nlatex_toplevel_sectioning = 'part'\n\n# -- Options for text output ---------------------------------------------\n\nfrom sphinx.writers import text\n\n# this value is arbitrary. it just needs to be bigger than the number of\n# characters in the longest paragraph in the DFHack docs\ntext.MAXWIDTH = 1000000000\n\n# this is the order that section headers will use the characters for underlines\n# they are in the order of (subjective) text-mode readability\ntext_sectionchars = '=-~`+\"*'\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "depends",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.rst",
          "type": "blob",
          "size": 0.9873046875,
          "content": "##################################\nWelcome to DFHack's documentation!\n##################################\n\nDFHack is a memory editing library for `Dwarf Fortress <https://www.bay12games.com/dwarves/>`_\nthat provides a unified, cross-platform environment where tools can be developed\nto extend the game. The default distribution contains a variety of tools, including\nbugfixes, interface improvements, automation tools, modding tools, and more.\nThere are also a variety of third-party tools available.\n\n.. _quick-links:\n\nQuick Links\n===========\n\n* `Downloads <https://www.github.com/DFHack/dfhack/releases>`_\n* `Installation guide <installing>`\n* `quickstart`\n* `Getting help <support>`\n* :source:`Source code <>`\n    (**important:** read `building-dfhack-index` before attempting to build from source.)\n\nUser Manual\n===========\n\n.. toctree::\n   :maxdepth: 2\n\n   /docs/Introduction\n   /docs/Quickstart\n   /docs/Installing\n   /docs/Core\n   /docs/Tools\n   /docs/guides/index\n   /docs/dev/index\n   /docs/about/index\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "robots.txt",
          "type": "blob",
          "size": 0.078125,
          "content": "User-agent: *\n\nAllow: /en/stable/\n\nSitemap: https://docs.dfhack.org/sitemap.xml\n"
        },
        {
          "name": "scripts",
          "type": "commit",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}