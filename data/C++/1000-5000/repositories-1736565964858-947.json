{
  "metadata": {
    "timestamp": 1736565964858,
    "page": 947,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PyMesh/PyMesh",
      "stars": 1914,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "*\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3134765625,
          "content": "*.pyc\n*.aux\n*.log\n*.out\n*.pdf\n*.toc\n*.orig\n*.o\n*.dia~\n*.dia.autosave\n*.egg-info\n.DS_Store\n\nlib/\nbin/\nswig/\nbuild/\nbuild_*/\ndist/\npython/pymesh/lib\npython/pymesh/swig\npython/pymesh/third_party/\npython/pymesh.egg-info/\ndocs/_build/\nthird_party/build/\nthird_party/local/\ncmake/SetInstallRpath.cmake\ncmake/PythonPrefix.cmake\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.37890625,
          "content": "[submodule \"third_party/carve\"]\n\tpath = third_party/carve\n\turl = https://github.com/PyMesh/carve.git\n\tshallow = true\n[submodule \"third_party/cork\"]\n\tpath = third_party/cork\n\turl = https://github.com/PyMesh/cork.git\n\tshallow = true\n[submodule \"third_party/tetgen\"]\n\tpath = third_party/tetgen\n\turl = https://github.com/PyMesh/tetgen.git\n\tshallow = true\n[submodule \"third_party/triangle\"]\n\tpath = third_party/triangle\n\turl = https://github.com/PyMesh/triangle.git\n\tshallow = true\n[submodule \"third_party/qhull\"]\n\tpath = third_party/qhull\n\turl = https://github.com/PyMesh/qhull.git\n\tshallow = true\n[submodule \"third_party/Clipper\"]\n\tpath = third_party/Clipper\n\turl = https://github.com/PyMesh/Clipper.git\n\tshallow = true\n[submodule \"third_party/eigen\"]\n\tpath = third_party/eigen\n\turl = https://github.com/PyMesh/eigen.git\n\tshallow = true\n[submodule \"third_party/quartet\"]\n\tpath = third_party/quartet\n\turl = https://github.com/PyMesh/quartet.git\n\tshallow = false\n[submodule \"third_party/cgal\"]\n\tpath = third_party/cgal\n\turl = https://github.com/PyMesh/cgal.git\n\tshallow = false\n[submodule \"third_party/pybind11\"]\n\tpath = third_party/pybind11\n\turl = https://github.com/PyMesh/pybind11.git\n\tshallow = true\n[submodule \"third_party/mmg\"]\n\tpath = third_party/mmg\n\turl = https://github.com/PyMesh/mmg.git\n\tshallow = true\n[submodule \"third_party/geogram\"]\n\tpath = third_party/geogram\n\turl = https://github.com/PyMesh/geogram.git\n\tshallow = true\n[submodule \"third_party/draco\"]\n\tpath = third_party/draco\n\turl = https://github.com/PyMesh/draco.git\n\tshallow = true\n[submodule \"third_party/TetWild\"]\n\tpath = third_party/TetWild\n\turl = https://github.com/PyMesh/TetWild.git\n\tshallow = true\n[submodule \"third_party/WindingNumber\"]\n\tpath = third_party/WindingNumber\n\turl = https://github.com/PyMesh/WindingNumber.git\n\tshallow = true\n[submodule \"third_party/tbb\"]\n\tpath = third_party/tbb\n\turl = https://github.com/PyMesh/tbb.git\n\tshallow = true\n[submodule \"libigl\"]\n\tpath = third_party/libigl\n\turl = https://github.com/PyMesh/libigl.git\n\tshallow = true\n[submodule \"third_party/jigsaw\"]\n\tpath = third_party/jigsaw\n\turl = https://github.com/PyMesh/jigsaw.git\n[submodule \"third_party/spdlog\"]\n\tpath = third_party/spdlog\n\turl = https://github.com/gabime/spdlog.git\n[submodule \"third_party/fmt\"]\n\tpath = third_party/fmt\n\turl = https://github.com/fmtlib/fmt.git\n[submodule \"third_party/json\"]\n\tpath = third_party/json\n\turl = https://github.com/nlohmann/json.git\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.1162109375,
          "content": "build:\n  image: latest\n\npython:\n  version: 3.6\n  setup_py_install: false\n\nsubmodules:\n  include: []\n  recursive: false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.533203125,
          "content": "language: cpp\nsudo: required\nvirtualenv:\n    system_site_packages: true\ngit:\n    submodules: false\n    depth: 1\naddons:\n    homebrew:\n        packages:\n            - ccache\n            - cmake\n        update: true\ncache: ccache\nmatrix:\n  include:\n    - os: osx\n      osx_image: xcode11.2\n      compiler: clang\n      before_install:\n        - git submodule update --init\n        - sw_vers\n        - python3 -m venv pyenv\n        - source pyenv/bin/activate\n      install:\n        - pip install -r python/requirements.txt\n    - os: osx\n      osx_image: xcode9.4\n      compiler: clang\n      before_install:\n        - git submodule update --init\n        - sw_vers\n        - python3 -m venv pyenv\n        - source pyenv/bin/activate\n      install:\n        - pip install -r python/requirements.txt\n    - os: osx\n      osx_image: xcode9.3\n      compiler: clang\n      before_install:\n        - git submodule update --init\n        - sw_vers\n        - pip install virtualenv\n        - virtualenv pyenv\n        - source pyenv/bin/activate\n      install:\n        - pip install -r python/requirements.txt\n    - os: linux\n      dist: xenial\n      python: \"2.7\"\n      addons:\n        apt:\n          update: true\n          sources:\n            - sourceline: ppa:deadsnakes/ppa\n          packages:\n            - libeigen3-dev\n            - libgmp-dev\n            - libgmpxx4ldbl\n            - libmpfr-dev\n            - libboost-dev\n            - libboost-thread-dev\n            - libtbb-dev\n      before_install:\n        - git submodule update --init\n        # Conda (Miniconda)\n        - wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;\n        - bash miniconda.sh -b -p $HOME/miniconda\n        - export PATH=\"$HOME/miniconda/bin:$PATH\"\n        - hash -r\n        - conda config --set always_yes yes --set changeps1 no\n        - conda update -q conda\n        # Useful for debugging any issues with conda\n        - conda info -a\n      install:\n        # Create conda enviroment\n        - conda create -q -n test-environment python=2.7\n        - source activate test-environment\n        - conda install cmake\n        # info on python executables\n        - python --version\n        - pip install -r python/requirements.txt\n\nscript:\n    - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"; fi\n    - ccache --max-size=5.0G\n    - ccache -V && ccache --show-stats && ccache --zero-stats\n    - ./setup.py build\n    - ./setup.py install\n    - python -c \"import pymesh; import sys; sys.exit(0 if pymesh.test().wasSuccessful() else 1)\"\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.34765625,
          "content": "cmake_minimum_required(VERSION 3.11.0)\n#set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CMAKE_COMMAND} -E time\")\n\nproject(PyMesh)\n\ninclude(Settings.cmake)\n\n# Process code in each subdirectories\nadd_subdirectory(src)\nadd_subdirectory(tools)\nadd_subdirectory(python)\n\nadd_subdirectory(tests EXCLUDE_FROM_ALL)\n#add_subdirectory(examples EXCLUDE_FROM_ALL)\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4677734375,
          "content": "include README* CMakeLists.txt Settings.cmake\nrecursive-include src *\nrecursive-include tools *\nrecursive-include tests *\nrecursive-include cmake *.cmake\nrecursive-include cmake *.py\nrecursive-include scripts *.py\nrecursive-include third_party *\nrecursive-exclude third_party *.png\nrecursive-exclude third_party *.pdf\nprune build\nprune third_party/build\nprune third_party/libigl/tutorial\nprune third_party/libigl/external\nprune third_party/carve/data\nprune third_party/carve/doc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5498046875,
          "content": "[![CircleCI](https://circleci.com/gh/PyMesh/PyMesh/tree/main.svg?style=svg)](https://circleci.com/gh/PyMesh/PyMesh/tree/main)\n[![Build Status](https://travis-ci.org/PyMesh/PyMesh.svg?branch=main)](https://travis-ci.org/PyMesh/PyMesh)\n[![Documentation Status](https://readthedocs.org/projects/pymesh/badge/?version=latest)](https://pymesh.readthedocs.io/en/latest/?badge=latest)\n\n\n### About PyMesh ###\n\n**PyMesh** is a code base developed by Qingnan Zhou for his PhD research at New\nYork University.  It is a rapid prototyping platform focused on geometry\nprocessing.  **PyMesh** is written with both C++ and Python, where\ncomputational intensive functionalities are realized in C++, and Python is used\nfor creating minimalistic and easy to use interfaces.\n\n![PyMesh][teaser]\n(Model source: [Bust of Sappho](https://www.thingiverse.com/thing:14565))\n\n### Documentation ###\n\n[Latest documentation](http://pymesh.readthedocs.org/en/latest/)\n\n### Quick try ###\n\nPerhaps the easiest way of trying out PyMesh is through\n[docker](https://www.docker.com/):\n\n    docker run -it pymesh/pymesh\n    Python 3.6.4 (default, Feb 17 2018, 09:32:33)\n    [GCC 4.9.2] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import pymesh\n\nFor example, to run [meshstat.py](scripts/meshstat.py):\n\n    docker run -it --rm -v `pwd`:/models pymesh/pymesh meshstat.py -x /models/model.obj\n\nThis command mounts your current working directory to the `/models` directory\nin a docker container and executes the `meshstat.py` script on the mesh file\n`model.obj` in the current directory.\n\n### Download Source ###\n\nTo retrieve the code:\n\n    git clone https://github.com/PyMesh/PyMesh.git\n    cd PyMesh\n    git submodule update --init\n\n### Dependencies ###\n\nPyMesh has the following required dependencies:\n\n* [Python](https://www.python.org/) v2.7 and v3.x.\n* [NumPy](http://www.numpy.org/) v1.8 or higher\n* [SciPy](http://www.scipy.org/) v0.13 or higher\n* [nose](http://nose.readthedocs.io/en/latest/) v1.3.7 or higher\n\nThe following C++ libraries are required.  They are included in\n`$PYMESH_PATH/third_party` directory.\n\n* [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) v3.2 or higher\n* [PyBind11](https://github.com/pybind/pybind11)\n\nPyMesh also has a number of optional dependencies:\n\n* [Carve](https://github.com/qnzhou/carve): A fast, robust constructive solid\n  geometry library.\n* [CGAL](https://www.cgal.org/): The Computational Geometry Algorithms Library.\n* [Clipper](http://www.angusj.com/delphi/clipper.php): An open source freeware\n  library for clipping and offsetting lines and polygons.\n* [Cork](https://github.com/gilbo/cork): A 3D boolean/CSG library.\n* [Draco](https://google.github.io/draco/): An open-source library for\n  compressing and decompressing 3D geometric meshes and point clouds\n* [Geogram](http://alice.loria.fr/software/geogram/doc/html/index.html): A\n  programming library of geometric algorithms\n* [libigl](http://igl.ethz.ch/projects/libigl/): A simple C++ geometry\n  processing library.\n* [MMG](https://www.mmgtools.org/): Robust, open source & multidisciplinary\n  software for remeshing.\n* [Qhull](http://www.qhull.org/): Engine for convex hulls, Delaunay\n  triangulations, Voronoi diagrams computations.\n* [Quartet](https://github.com/crawforddoran/quartet): A tetrahedral mesh\n  generator that does isosurface stuffing with an acute tetrahedral tile.\n* [TBB](https://www.threadingbuildingblocks.org/): Thread building blocks from\n  Intel.\n* [Tetgen](http://wias-berlin.de/software/tetgen/): Tetrahedral mesh generation\n  engine.\n* [Triangle](http://www.cs.cmu.edu/~quake/triangle.html): A two-Dimensional\n  quality mesh generator and Delaunay triangulator.\n\nAll of the optional libraries are included in `$PYMESH_PATH/third_party`\ndirectory.\n\n### Specify Dependency Locations ###\n\nAll dependencies are included as git submodules in the `third_party` directory.\nIt is recommended to build these dependencies directly (see [Build](#Build) section).\nHowever, it is possible to use an existing dependency installed on your system.\nIf the dependent library is not installed in standard locations\n(``/usr/local/``, ``/opt/local``), one needs to set environment variables that\npoint to the correct directories.  PyMesh check the following environment\nvariables:\n\n* Eigen: Set ``EIGEN_PATH`` to the directory containing the `eigen3` directory.\n* CGAL: Set ``CGAL_PATH`` to the directory containing `UseCGAL.cmake` file.\n    * Boost: Set ``BOOST_INC`` to the directory containing boost.\n    * GMP: Set ``GMP_INC`` and ``GMP_LIB`` to the directories containing GMP\n      header and library.\n* libigl: Set ``LIBIGL_PATH`` the ``include`` directory of libigl sources.\n* Cork: Set ``CORK_PATH`` to the install directory of Cork.\n* Tetgen: Set ``TETGEN_PATH`` to the install directory of Tetgen.\n* Triangle: Set ``TRIANGLE_PATH`` to the install directory of Triangle.\n* Qhull: Set ``QHULL_PATH`` to the install directory of Qhull.\n* Clipper: Set ``CLIPPER_PATH`` to the install directory of Clipper.\n* Carve: Set ``CARVE_PATH`` to the install directory of Carve.\n* Geogram: Set ``GEOGRAM_PATH`` to the install directory of Geogram.\n* Quartet: Set ``QUARTET_PATH`` to the install directory of Quartet.\n* Draco: Set ``Draco_PATH`` to the install directory of Draco.\n* MMG: Set ``MMG_PATH`` to the install directory of MMG.\n\n### Build ###\n\nLet `$PYMESH_PATH` be the root directory of the repository.\nThe first step is to compile the optional third party dependencies:\n\n    cd $PYMESH_PATH/third_party\n    build.py all\n\nThird party dependencies will be installed in\n`$PYMESH_PATH/python/pymesh/third_party` directory.\n\nNow we can build the main project.  It is recommended to build out of source:\n\n    cd $PYMESH_PATH\n    mkdir build\n    cd build\n    cmake ..\n\nTo build the PyMesh library:\n\n    make\n    make tests\n\nMake sure all unit tests are passed before using the library.\n\n### Install ###\n\nThe output of building PyMesh consists a set of C++ libraries and a python\nmodule. Installing the C++ library is currently not available.  However,\ninstalling the python package can be done:\n\n    ./setup.py build # This an alternative way of calling cmake/make\n    ./setup.py install\n\nTo check PyMesh is installed correctly, run the following python unit tests::\n\n    python -c \"import pymesh; pymesh.test()\"\n\nOnce again, make sure all unit tests are passed, and report any unit test\nfailures.\n\n### Feedback ###\n\nThank you for using PyMesh!  Please consider help PyMesh improve by leaving\n[feedback]!\n\n[teaser]: docs/_static/pymesh_teaser.jpg\n[feedback]: https://docs.google.com/forms/d/e/1FAIpQLSc8YAzx1SL4t3qntzahYd0igPNGyIxw6N8eRs-PloYlwbPaXg/viewform?usp=pp_url\n"
        },
        {
          "name": "Settings.cmake",
          "type": "blob",
          "size": 2.6904296875,
          "content": "find_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    message(STATUS \"ccache enabled\")\nendif(CCACHE_FOUND)\n\n# Set output directories\nset(LIBRARY_OUTPUT_PATH    ${PROJECT_SOURCE_DIR}/python/pymesh/lib)\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\nmake_directory(${LIBRARY_OUTPUT_PATH})\nmake_directory(${EXECUTABLE_OUTPUT_PATH})\n\n# Windows export symbols.\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\n# Include customized FindPackage scripts\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\n# Set PIC\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# Include all libraries\ncmake_policy(SET CMP0074 NEW)\nfind_package(AllDependencies)\n\n# Options\noption(PYMESH_USE_CARVE      \"Enable Carve support\"      ${CARVE_FOUND})\noption(PYMESH_USE_CGAL       \"Enable CGAL support\"       ${CGAL_FOUND})\noption(PYMESH_USE_CLIPPER    \"Enable Clipper support\"    ${CLIPPER_FOUND})\noption(PYMESH_USE_CHOLMOD    \"Enable Cholmod support\"    ${CHOLMOD_FOUND})\noption(PYMESH_USE_CORK       \"Enable Cork support\"       ${CORK_FOUND})\noption(PYMESH_USE_DRACO      \"Enable Draco support\"      ${draco_FOUND})\noption(PYMESH_USE_GEOGRAM    \"Enable Geogram support\"    ${GEOGRAM_FOUND})\noption(PYMESH_USE_LIBIGL     \"Enable libigl support\"     ${LIBIGL_FOUND})\noption(PYMESH_USE_METIS      \"Enable Metis support\"      ${METIS_FOUND})\noption(PYMESH_USE_MMG        \"Enable MMG support\"        ${MMG_FOUND})\noption(PYMESH_USE_MKL        \"Enable Intel MKL support\"  ${MKL_FOUND})\noption(PYMESH_USE_QHULL      \"Enable QHull support\"      ${QHULL_FOUND})\noption(PYMESH_USE_QUARTET    \"Enable Quartet support\"    ${QUARTET_FOUND})\noption(PYMESH_USE_TETGEN     \"Enable TetGen support\"     ${TETGEN_FOUND})\noption(PYMESH_USE_TETWILD    \"Enable TetWild support\"    ${TETWILD_FOUND})\noption(PYMESH_USE_TINYXML2   \"Enable TinyXML2 support\"   ${TINYXML2_FOUND})\noption(PYMESH_USE_TRIANGLE   \"Enable Triangle support\"   ${TRIANGLE_FOUND})\noption(PYMESH_USE_UMFPACK    \"Enable Umfpack support\"    ${UMFPACK_FOUND})\noption(PYMESH_USE_SPARSEHASH \"Enable SparseHash support\" ${SPARSEHASH_FOUND})\noption(PYMESH_USE_FastWindingNumber \"Enable Fast Winding Number support\"\n    ${FAST_WINDING_NUMBER_FOUND})\ninclude(GenerateDependencyTargets)\n\n# Need support for C++14.\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Add pybind11\nadd_subdirectory(${PROJECT_SOURCE_DIR}/third_party/pybind11)\n\n## Setup RPath\nset(CMAKE_MACOSX_RPATH ON)\nexecute_process(COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/cmake/SetInstallRpath.py)\ninclude(SetInstallRpath)\nset(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 6.84375,
          "content": "#!/usr/bin/env python\n\nfrom distutils.command.build import build\nfrom distutils.command.build_ext import build_ext\nfrom distutils.command.clean import clean\nimport multiprocessing\nimport os\nimport os.path\nfrom setuptools import setup, Distribution, Extension\nfrom subprocess import check_call\nimport shutil\nimport platform\n\nexec(open(os.path.join('python/pymesh/version.py')).read())\n\nnum_cores = multiprocessing.cpu_count()\nnum_cores = max(1, num_cores)\nnum_cores = min(num_cores, int(os.environ.get(\"NUM_CORES\", num_cores)))\n\nclass BinaryDistribution(Distribution):\n    def is_pure(self):\n        return False\n\n    def has_ext_modules(self):\n        return True\n\nclass CleanCommand(clean):\n    def run(self):\n        for d in \"python/pymesh/third_party/lib\", \"python/pymesh/lib\":\n            try:\n                shutil.rmtree(d)\n            except Exception:\n                pass\n\nclass dummy_ext(build_ext):\n    \"\"\" This is a dummy class.  Cmake is responsible for building python\n    extension.  This class is necessary to inform distutils/setuptools that we\n    are building an extension, not a pure lib.\n    \"\"\"\n    def run(self):\n        pass\n\nclass cmake_build(build):\n    \"\"\"\n    Python packaging system is messed up.  This class redirect python to use\n    cmake for configuration and compilation of pymesh.\n    \"\"\"\n\n    def build_third_party(self):\n        \"\"\"\n        Config and build third party dependencies.\n        \"\"\"\n        commands = [\n                \"third_party/build.py cgal\",\n                \"third_party/build.py eigen\",\n                \"third_party/build.py triangle\",\n                \"third_party/build.py tetgen\",\n                \"third_party/build.py clipper\",\n                \"third_party/build.py qhull\",\n                \"third_party/build.py cork\",\n                #\"third_party/build.py carve\",\n                \"third_party/build.py draco\",\n                \"third_party/build.py tbb\",\n                \"third_party/build.py mmg\",\n                \"third_party/build.py json\",\n                ];\n        for c in commands:\n            check_call(c.split())\n\n    def build_pymesh(self):\n        \"\"\"\n        Config and build pymesh.\n        \"\"\"\n        python_version = \"{v[0]}.{v[1]}\".format(v=platform.python_version_tuple())\n        self._build(\n            \"build_{}\".format(python_version),\n            \" -DPythonLibsNew_FIND_VERSION={}\".format(python_version),\n            False,\n        )\n\n    def _build(self, build_dir, cmake_args, want_install):\n        \"\"\"\n        Config and build in build_dir\n        \"\"\"\n\n        cwd = os.getcwd()\n        try:\n            if not os.path.isdir(build_dir):\n                os.makedirs(build_dir)\n\n            os.chdir(build_dir)\n            commands = [\n                \"cmake .. -DCMAKE_BUILD_TYPE=Release\" + cmake_args,\n                \"cmake --build . --config Release -- -j {}\".format(num_cores),\n            ] + ([\"cmake --build . --target install\"] if want_install else [])\n            for c in commands:\n                check_call(c.split())\n        finally:\n            os.chdir(cwd)\n\n    def run(self):\n        self.build_third_party()\n        self.build_pymesh()\n        build.run(self)\n\nsetup(\n        name = \"pymesh2\",\n        description = \"Mesh Processing for Python\",\n        version = __version__,\n        author = \"Qingnan Zhou\",\n        author_email = \"qnzhou@gmail.com\",\n        license = \"MPL\",\n        zip_safe = False,\n        package_dir = {\"\": \"python\"},\n        packages = [\"pymesh\", \"pymesh.misc\", \"pymesh.meshutils\", \"pymesh.wires\",\n            \"pymesh.tests\", \"pymesh.meshutils.tests\", \"pymesh.wires.tests\"],\n        package_data = {\"pymesh\": [\n            \"lib/*\",\n            \"third_party/lib/lib*\",\n            \"third_party/lib/*.lib\",\n            \"third_party/lib/*.dll\",\n            \"third_party/lib64/lib*\",\n            \"third_party/lib64/lib*.lib\",\n            \"third_party/lib64/lib*.dll\", ]},\n        # For some reason, the include_package_data flag requires package data\n        # to be tracked by version control system.  In our case, the data are\n        # dynamic libraries generated by compiler.  Do not use it.\n        #include_package_data = True,\n        cmdclass={\n            'build': cmake_build,\n            'build_ext': dummy_ext,\n            'clean': CleanCommand,\n            },\n        ext_modules=[Extension('foo', ['foo.c'])], # Dummy\n        scripts=[\n            \"scripts/add_element_attribute.py\",\n            \"scripts/add_index.py\",\n            \"scripts/arrangement_2d.py\",\n            \"scripts/bbox.py\",\n            \"scripts/box_gen.py\",\n            \"scripts/boolean.py\",\n            \"scripts/carve.py\",\n            \"scripts/convex_hull.py\",\n            \"scripts/curvature.py\",\n            \"scripts/distortion.py\",\n            \"scripts/dodecahedron_gen.py\",\n            \"scripts/extract_self_intersecting_faces.py\",\n            \"scripts/fem_check.py\",\n            \"scripts/find_file.py\",\n            \"scripts/fix_mesh.py\",\n            \"scripts/geodesic.py\",\n            \"scripts/highlight_boundary_edges.py\",\n            \"scripts/highlight_degenerated_faces.py\",\n            \"scripts/highlight_non_oriented_edges.py\",\n            \"scripts/highlight_self_intersection.py\",\n            \"scripts/highlight_zero_area_faces.py\",\n            \"scripts/highlight_inverted_tets.py\",\n            \"scripts/highlight_delaunay.py\",\n            \"scripts/hilbert_curve_gen.py\",\n            \"scripts/icosphere_gen.py\",\n            \"scripts/inflate.py\",\n            \"scripts/map_to_sphere.py\",\n            \"scripts/matrix_gen.py\",\n            \"scripts/mean_curvature_flow.py\",\n            \"scripts/merge.py\",\n            \"scripts/mesh_diff.py\",\n            \"scripts/meshconvert.py\",\n            \"scripts/meshstat.py\",\n            \"scripts/mesh_to_wire.py\",\n            \"scripts/microstructure_gen.py\",\n            \"scripts/minkowski_sum.py\",\n            \"scripts/outer_hull.py\",\n            \"scripts/point_cloud.py\",\n            \"scripts/print_utils.py\",\n            \"scripts/quad_to_tri.py\",\n            \"scripts/refine_mesh.py\",\n            \"scripts/remove_degenerated_triangles.py\",\n            \"scripts/remove_duplicated_faces.py\",\n            \"scripts/remove_isolated_vertices.py\",\n            \"scripts/remove_nan.py\",\n            \"scripts/resolve_self_intersection.py\",\n            \"scripts/retriangulate.py\",\n            \"scripts/rigid_transform.py\",\n            \"scripts/scale_mesh.py\",\n            \"scripts/self_union.py\",\n            \"scripts/separate.py\",\n            \"scripts/slice_mesh.py\",\n            \"scripts/subdivide.py\",\n            \"scripts/submesh.py\",\n            \"scripts/svg_to_mesh.py\",\n            \"scripts/tet.py\",\n            \"scripts/tet_boundary.py\",\n            \"scripts/tet_to_hex.py\",\n            \"scripts/triangulate.py\",\n            \"scripts/uv.py\",\n            \"scripts/voxelize.py\",\n            ],\n        url = \"https://github.com/qnzhou/PyMesh\",\n        download_url=\"https://github.com/qnzhou/PyMesh\",\n        distclass=BinaryDistribution,\n        )\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}