{
  "metadata": {
    "timestamp": 1736565287887,
    "page": 103,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "USCiLab/cereal",
      "stars": 4272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5361328125,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Visual studio cruft\n*.opensdf\n*.sdf\n*.suo\n*.user\n*/x64\n*\\Debug*\n*\\Release*\n*.log\n*.tlog*\n*.obj\n*.VC.db\n*.VC.VC.opendb\n*.pdb\n*.idb\n*\\build_*\n.vs/\nCMakeSettings.json\n\n# misc files mostly used for testing\nout.txt\nptr.txt\ntest.txt\nboost_serialize\narr.txt\nperformance\ninclude_renamed\n.ycm_extra_conf.py*\ndoc/html\nrtti.txt\ndoc/latex\nportability64\nportability32\nfile.json\nout.xml\ncereal_version.out\nxml_ordering.out\nbuild\n/out/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 8.509765625,
          "content": "# Portions of this file based on https://github.com/Microsoft/GSL/blob/master/.travis.yml\n\nlanguage: cpp\nos: linux\ndist: trusty\nsudo: false\ngroup: beta\n\naddons:\n  apt:\n    sources: &default_sources\n      - ubuntu-toolchain-r-test\n      - libboost-latest\n    packages: &default_packages\n      - libboost-serialization-dev\n      - libboost-dev\n\nmatrix:\n  include:\n\n    # |---------- LINUX GCC ----------|\n    - compiler: g++-4.7\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=g++-4.7\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-4.7', *default_packages]\n\n    - compiler: g++-4.8\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=g++-4.8\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-4.8', *default_packages]\n         \n    - compiler: g++-4.9\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=g++-4.9\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-4.9', *default_packages]\n         \n    - compiler: g++-5\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=g++-5\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-5', *default_packages]\n    \n    - compiler: g++-5\n      name: \"g++-5 multilib\"\n      env: [\"COMPILER=g++-5\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['gcc-multilib g++-5-multilib linux-libc-dev', *default_packages]\n                  \n    - compiler: g++-6\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=g++-6\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-6', *default_packages]\n\n    - compiler: g++-7\n      name: \"g++-7 c++17\"\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON -DCMAKE_CXX_STANDARD=17'\", \"COMPILER=g++-7\"]\n      addons:\n        apt:\n          sources: *default_sources\n          packages: ['g++-7', *default_packages]\n\n    # |---------- LINUX GCC ----------|\n    - dist: xenial\n      compiler: g++-8\n      name: \"g++-8 c++17\"\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON -DCMAKE_CXX_STANDARD=17'\", \"COMPILER=g++-8\"]\n      addons:\n        apt:\n            sources: *default_sources\n            packages: ['g++-8', *default_packages]\n\n\n    # |---------- LINUX CLANG ----------|\n    - compiler: clang++-3.5\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-3.5\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-precise-3.5]\n          packages: ['clang-3.5', *default_packages]\n\n    - compiler: clang++-3.6\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-3.6\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-precise-3.6]\n          packages: ['clang-3.6', *default_packages]\n\n    - compiler: clang++-3.7\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-3.7\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-precise-3.7]\n          packages: ['clang-3.7', *default_packages]\n\n    - compiler: clang++-3.8\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-3.8\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-precise-3.8]\n          packages: ['clang-3.8', *default_packages]\n\n    - compiler: clang++-3.9\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-3.9\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-precise-3.9]\n          packages: ['clang-3.9', *default_packages]\n\n    - compiler: clang++-4.0\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-4.0\"]\n      addons:\n        apt:\n          sources: [*default_sources, llvm-toolchain-trusty-4.0]\n          packages: ['clang-4.0', 'g++-5', *default_packages]\n\n    - compiler: clang++-5.0\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON'\", \"COMPILER=clang++-5.0\"]\n      addons: &clang50\n        apt:\n          packages: \n            - clang-5.0\n            - g++-7\n            - *default_packages\n          sources: \n            - *default_sources\n            - llvm-toolchain-trusty-5.0\n            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main'\n              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n\n    - env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON -DCMAKE_CXX_STANDARD=17'\", \"COMPILER=clang++-5.0\"]\n      name: \"clang++-5.0 c++17\"\n      addons: *clang50\n\n    - compiler: clang++-7\n      name: \"clang++-7 c++17\"\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON -DCMAKE_CXX_STANDARD=17'\", \"COMPILER=clang++-7\"]\n      addons: \n        apt:\n          packages: \n            - clang-7\n            - g++-7\n            - *default_packages\n          sources: \n            - *default_sources\n            - llvm-toolchain-trusty-7\n\n    - compiler: clang++-8\n      name: \"clang++-8 c++17 libc++\"\n      env: [\"CMAKE_OPTIONS='-DSKIP_PORTABILITY_TEST=ON -DCMAKE_CXX_STANDARD=17 -DCLANG_USE_LIBCPP=ON -DSKIP_PERFORMANCE_COMPARISON=ON'\", \"COMPILER=clang++-8\"]\n      addons: \n        apt:\n          packages: \n            - clang-8\n            - g++-8\n            - libc++-8-dev\n            - libc++abi-8-dev\n            - *default_packages\n          sources: \n            - *default_sources\n            - llvm-toolchain-trusty-8\n\n    # # |---------- LINUX CLANG (32-bit) ----------|\n    # # Doesn't work.\n    # - compiler: clang++\n    #   addons:\n    #     apt:\n    #       sources: [*default_sources]\n    #       packages: ['clang', 'gcc-multilib', 'g++-multilib', *default_packages]\n\n\n    # |---------- OSX CLANG ----------|\n    - compiler: clang++\n      os: osx\n      osx_image: xcode7.3\n      env: COMPILER=clang++\n\n    - compiler: clang++\n      os: osx\n      osx_image: xcode8\n      env: COMPILER=clang++\n\n    # # Missing CMake\n    # - compiler: clang++\n    #   os: osx\n    #   osx_image: xcode8.1\n\n    - compiler: clang++\n      os: osx\n      osx_image: xcode8.2\n      env: COMPILER=clang++\n\n    - compiler: clang++\n      os: osx\n      osx_image: xcode8.3\n      env: COMPILER=clang++\n\n    - compiler: clang++\n      env: [\"CMAKE_OPTIONS='-DWITH_WERROR=OFF'\"]\n      os: osx\n      osx_image: xcode9\n      env: COMPILER=clang++\n    \n    - compiler: clang++\n      env: [\"CMAKE_OPTIONS='-DWITH_WERROR=OFF'\"]\n      os: osx\n      osx_image: xcode10\n      env: COMPILER=clang++\n\ninstall:\n  # Set the ${CXX} variable properly\n  - export CXX=${COMPILER}\n  - ${CXX} --version\n\n  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/\n  - DEPS_DIR=\"${TRAVIS_BUILD_DIR}/deps\"\n  - mkdir -p \"${DEPS_DIR}\"\n  - cd \"${DEPS_DIR}\"\n\n  - JOBS=2\n\n  # [linux]: Install the right version of libc++\n  - |\n    LLVM_INSTALL=${DEPS_DIR}/llvm/install\n    # if in linux and compiler clang and llvm not installed\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && \"${CXX%%+*}\" == \"clang\" && -n \"$(ls -A ${LLVM_INSTALL})\" ]]; then\n      if   [[ \"${CXX}\" == \"clang++-3.6\" ]]; then LLVM_VERSION=\"3.6.2\";\n      elif [[ \"${CXX}\" == \"clang++-3.7\" ]]; then LLVM_VERSION=\"3.7.1\";\n      elif [[ \"${CXX}\" == \"clang++-3.8\" ]]; then LLVM_VERSION=\"3.8.1\";\n      elif [[ \"${CXX}\" == \"clang++-3.9\" ]]; then LLVM_VERSION=\"3.9.1\";\n      fi\n      LLVM_URL=\"http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz\"\n      LIBCXX_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz\"\n      LIBCXXABI_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz\"\n      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi\n      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm\n      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx\n      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi\n      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})\n      (cd llvm/build/projects/libcxx && make install -j2)\n      (cd llvm/build/projects/libcxxabi && make install -j2)\n      export CXXFLAGS=\"-isystem ${LLVM_INSTALL}/include/c++/v1\"\n      export LDFLAGS=\"-L ${LLVM_INSTALL}/lib -l c++ -l c++abi\"\n      export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib\"\n    fi\n\nscript:\n  - cd \"${TRAVIS_BUILD_DIR}\"\n  - if [[ \"${COMPILERCC}\" != \"\" ]]; then export CC=\"${COMPILERCC}\"; fi\n  - if [[ \"${COMPILER}\" != \"\" ]]; then export CXX=\"${COMPILER}\"; fi\n  - $CXX --version\n  - cmake --version\n  - mkdir build && cd build\n  - cmake ${CMAKE_OPTIONS} .. && make -j4\n  - ctest . --output-on-failure\n\nbranches:\n  only:\n    - master\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.2265625,
          "content": "cmake_minimum_required(VERSION 3.6...3.15)\n\nproject(cereal LANGUAGES CXX VERSION 1.3.2)\n\nif(PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(CEREAL_MASTER_PROJECT ON)\nendif()\n\noption(SKIP_PORTABILITY_TEST \"Skip portability (32 bit) tests\" OFF)\ninclude(CheckCXXCompilerFlag)\nset(CMAKE_REQUIRED_FLAGS \"-m32\")\ncheck_cxx_compiler_flag(\"-m32\" COMPILER_SUPPORT_M32)\nunset(CMAKE_REQUIRED_FLAGS)\nif(NOT COMPILER_SUPPORT_M32)\n    set(SKIP_PORTABILITY_TEST ON CACHE BOOL \"Skip portability (32 bit) tests\" FORCE)\nendif()\n\noption(BUILD_DOC \"Build documentation\" ON)\noption(BUILD_SANDBOX \"Build sandbox examples\" ON)\noption(SKIP_PERFORMANCE_COMPARISON \"Skip building performance sandbox comparison (requires boost)\" OFF)\n\n# TODO: should not be needed! CK\nif(NOT CMAKE_VERSION VERSION_LESS 3.0) # installing cereal requires INTERFACE lib\n    option(JUST_INSTALL_CEREAL \"Don't do anything besides installing the library\" OFF)\nendif()\n\n\nset(CEREAL_THREAD_LIBS)\nif(UNIX)\n    option(THREAD_SAFE \"Use mutexes to ensure thread safety\" OFF)\n    if(THREAD_SAFE)\n        message(STATUS \"Use mutexes\")\n        add_definitions(-DCEREAL_THREAD_SAFE=1)\n        set(CEREAL_THREAD_LIBS pthread)\n    endif()\nendif()\n\n\nif(MSVC)\n    add_compile_options(/bigobj /W3 /WX)\nelse()\n    add_compile_options(-Wall -Wextra -pedantic -Wshadow -Wold-style-cast)\n    option(WITH_WERROR \"Compile with '-Werror' C++ compiler flag\" ON)\n    if(WITH_WERROR)\n        add_compile_options(-Werror)\n    endif()\n\n    option(CLANG_USE_LIBCPP \"Use libc++ for clang compilation\" OFF)\n    if(APPLE OR CLANG_USE_LIBCPP)\n        message(STATUS \"Use libc++\")\n        add_compile_options(-stdlib=libc++)\n        # TODO: use add_link_options(-stdlib=libc++ -lc++abi\") bud this needs cmake 3.13! CK\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")\n    endif()\n\n    if(NOT DEFINED CMAKE_CXX_STANDARD OR CMAKE_CXX_STANDARD STREQUAL \"98\")\n        set(CMAKE_CXX_STANDARD 11)\n    endif()\n\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n\nadd_library(cereal INTERFACE)\nadd_library(cereal::cereal ALIAS cereal)\ntarget_include_directories(cereal INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>\n)\nlist(APPEND CEREAL_THREAD_LIBS cereal::cereal)\n\nif(NOT CMAKE_VERSION VERSION_LESS 3.8)\n    target_compile_features(cereal INTERFACE cxx_std_11)\nendif()\n\n\noption(CEREAL_INSTALL \"Generate the install target\" ${CEREAL_MASTER_PROJECT})\nif(CEREAL_INSTALL)\n    include(GNUInstallDirs)\n    include(CMakePackageConfigHelpers)\n\n    install(TARGETS cereal EXPORT ${PROJECT_NAME}Targets)\n    install(DIRECTORY include/cereal DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n    set(configFile ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake)\n    set(versionFile ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake)\n    set(configInstallDestination ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\n    configure_package_config_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in\n        ${configFile}\n        INSTALL_DESTINATION ${configInstallDestination}\n    )\n    if(${CMAKE_VERSION} VERSION_GREATER 3.13)\n        write_basic_package_version_file(\"${versionFile}\" COMPATIBILITY SameMajorVersion ARCH_INDEPENDENT)\n    else()\n        write_basic_package_version_file(\"${versionFile}\" COMPATIBILITY SameMajorVersion)\n    endif()\n    configure_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.pc.in\n        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\n        @ONLY\n    )\n\n    install(FILES ${configFile} ${versionFile} DESTINATION ${configInstallDestination})\n    install(\n        EXPORT ${PROJECT_NAME}Targets\n        NAMESPACE \"cereal::\"\n        DESTINATION ${configInstallDestination}\n    )\n    install(\n        FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig\n    )\nendif()\n\n\nif(JUST_INSTALL_CEREAL)\n    return()\nendif()\n\n\nif(NOT SKIP_PERFORMANCE_COMPARISON)\n    # Boost serialization for performance sandbox\n    find_package(Boost REQUIRED COMPONENTS serialization)\nendif()\n\n\noption(BUILD_TESTS \"Build tests\" ${CEREAL_MASTER_PROJECT})\nif(BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(unittests)\nendif()\n\n\nif(BUILD_SANDBOX)\n    add_subdirectory(sandbox)\nendif()\n\n\nif(BUILD_DOC)\n    add_subdirectory(doc)\nendif()\n"
        },
        {
          "name": "Config.cmake.in",
          "type": "blob",
          "size": 0.0791015625,
          "content": "@PACKAGE_INIT@\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.505859375,
          "content": "Copyright (c) 2013-2022, Randolph Voorhies, Shane Grant\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the copyright holder nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.826171875,
          "content": "cereal - A C++11 library for serialization\n==========================================\n\n<img src=\"https://uscilab.github.io/cereal/assets/img/cerealboxside.png\" align=\"right\"/><p>cereal is a header-only C++11 serialization library.  cereal takes arbitrary data types and reversibly turns them into different representations, such as compact binary encodings, XML, or JSON.  cereal was designed to be fast, light-weight, and easy to extend - it has no external dependencies and can be easily bundled with other code or used standalone.</p>\n\n### cereal has great documentation\n\nLooking for more information on how cereal works and its documentation?  Visit [cereal's web page](https://USCiLab.github.io/cereal) to get the latest information.\n\n### cereal is easy to use\n\nInstallation and use of of cereal is fully documented on the [main web page](https://USCiLab.github.io/cereal), but this is a quick and dirty version:\n\n* Download cereal and place the headers somewhere your code can see them\n* Write serialization functions for your custom types or use the built in support for the standard library cereal provides\n* Use the serialization archives to load and save data\n\n```cpp\n#include <cereal/types/unordered_map.hpp>\n#include <cereal/types/memory.hpp>\n#include <cereal/archives/binary.hpp>\n#include <fstream>\n    \nstruct MyRecord\n{\n  uint8_t x, y;\n  float z;\n  \n  template <class Archive>\n  void serialize( Archive & ar )\n  {\n    ar( x, y, z );\n  }\n};\n    \nstruct SomeData\n{\n  int32_t id;\n  std::shared_ptr<std::unordered_map<uint32_t, MyRecord>> data;\n  \n  template <class Archive>\n  void save( Archive & ar ) const\n  {\n    ar( data );\n  }\n      \n  template <class Archive>\n  void load( Archive & ar )\n  {\n    static int32_t idGen = 0;\n    id = idGen++;\n    ar( data );\n  }\n};\n\nint main()\n{\n  std::ofstream os(\"out.cereal\", std::ios::binary);\n  cereal::BinaryOutputArchive archive( os );\n\n  SomeData myData;\n  archive( myData );\n\n  return 0;\n}\n```    \n\n### cereal has a mailing list\n\nEither get in touch over <a href=\"mailto:cerealcpp@googlegroups.com\">email</a> or [on the web](https://groups.google.com/forum/#!forum/cerealcpp).\n\n\n\n## cereal has a permissive license\n\ncereal is licensed under the [BSD license](http://opensource.org/licenses/BSD-3-Clause).\n\n## cereal build status\n\n* [![Linux build status](https://github.com/USCiLab/cereal/actions/workflows/ci.yml/badge.svg)](https://github.com/USCiLab/cereal/actions/workflows/ci.yml)\n* [![Mac build status](https://github.com/USCiLab/cereal/actions/workflows/ci-macos.yml/badge.svg)](https://github.com/USCiLab/cereal/actions/workflows/ci-macos.yml)\n* [![Windows build status](https://ci.appveyor.com/api/projects/status/91aou6smj36or0vb/branch/master?svg=true)](https://ci.appveyor.com/project/AzothAmmo/cereal/branch/master)\n\n---\n\nWere you looking for the Haskell cereal?  Go <a href=\"https://github.com/GaloisInc/cereal\">here</a>.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.2216796875,
          "content": "# can use variables like {build} and {branch}\nversion: 1.3.{build}\npull_requests:\n  do_not_increment_build_number: true\n\nbranches:\n  only:\n    - master\n\nconfiguration:\n  - Debug\n  - Release\n\nenvironment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n      VS_VERSION_MAJOR: 12\n      BOOST_ROOT: C:\\Libraries\\boost_1_58_0\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n      VS_VERSION_MAJOR: 14\n      BOOST_ROOT: C:\\Libraries\\boost_1_60_0\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VS_VERSION_MAJOR: 15\n      BOOST_ROOT: C:\\Libraries\\boost_1_66_0\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VS_VERSION_MAJOR: 16\n      BOOST_ROOT: C:\\Libraries\\boost_1_73_0\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n      VS_VERSION_MAJOR: 17\n      BOOST_ROOT: C:\\Libraries\\boost_1_73_0\n\nmatrix:\n  exclude:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      platform: Win32\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n      platform: Win32\n\nplatform:\n  - Win32\n  - x64\n\nbefore_build: \"scripts\\\\appveyor.bat\"\n\nbuild:\n  parallel: true\n  project: build/cereal.sln\n  verbosity: minimal\n\ntest_script: \"scripts\\\\appveyor.bat test\"\n\nartifacts:\n  - path: build\\Testing\n  - path: out\n"
        },
        {
          "name": "cereal.pc.in",
          "type": "blob",
          "size": 0.2509765625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: @PROJECT_NAME@\nDescription: cereal is a header-only C++11 serialization library\nURL: https://uscilab.github.io/cereal/\nVersion: @PROJECT_VERSION@\nCflags: -I\"${includedir}\"\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}