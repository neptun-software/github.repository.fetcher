{
  "metadata": {
    "timestamp": 1736565573389,
    "page": 445,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xelatihy/yocto-gl",
      "stars": 2845,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.4384765625,
          "content": "BasedOnStyle: Google\n\n# Language:        Cpp\nStandard:        Cpp11\n\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\n\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\n\nBreakConstructorInitializersBeforeComma: true\nBreakStringLiterals: false\n\nPenaltyBreakAssignment: 20\nPenaltyBreakBeforeFirstCallParameter: 50\n\nDerivePointerAlignment: false\nPointerAlignment: Left\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.23828125,
          "content": "bin\nbuild\nout\nout1\nmsvc\n.vscode/.cmaketools.json\n/*.hdr\n/*.exr\n/*.png\n/*.jpg\n/*.ply\n/*.obj\n/*.stl\n.vscode/ipch/\ntests/renderings/*.png\ntests/renderings/*.hdr\ntests1/\ntests2/\n.vs\ntestsr/\nsite/\ntests/_version40/sculpting1\ntests/_version40/cities1"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.291015625,
          "content": "cmake_minimum_required (VERSION 3.22)\n\nproject (yocto_gl VERSION 4.0 LANGUAGES C CXX)\n\noption(YOCTO_APPS \"Build apps\" ON)\noption(YOCTO_OPENGL \"Enable OpenGL\" ON)\noption(YOCTO_DENOISE \"Enable denoising with Intel's OIDN\" OFF)\noption(YOCTO_EMBREE \"Enable ray casting with Intel's Embree\" OFF)\noption(YOCTO_CUDA \"Enable ray casting with Optix and Cuda\" OFF)\noption(YOCTO_TESTING \"Enable testing\" OFF)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"RelWithDebInfo\")\nendif()\n\nset(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)\nif(NOT GENERATOR_IS_MULTI_CONFIG AND CMAKE_BUILD_TYPE MATCHES Debug)\n  set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin/debug)\nendif(NOT GENERATOR_IS_MULTI_CONFIG AND CMAKE_BUILD_TYPE MATCHES Debug)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nif(GENERATOR_IS_MULTI_CONFIG)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})\nendif(GENERATOR_IS_MULTI_CONFIG)\n\nadd_subdirectory(exts)\nadd_subdirectory(libs)\nif(YOCTO_APPS)\n  add_subdirectory(apps)\nendif(YOCTO_APPS)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 4.357421875,
          "content": "{\n  \"version\": 2,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 22,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"release\",\n      \"description\": \"Release build\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"ON\",\n        \"YOCTO_DENOISE\": \"ON\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"debug\",\n      \"description\": \"Debug build\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"ON\",\n        \"YOCTO_DENOISE\": \"ON\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"release-nodep\",\n      \"description\": \"Release build - no dependencies\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"OFF\",\n        \"YOCTO_DENOISE\": \"OFF\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"debug-nodep\",\n      \"description\": \"Debug build - no dependencies\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"OFF\",\n        \"YOCTO_DENOISE\": \"OFF\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"release-nogl\",\n      \"description\": \"Release build - no OpenGL\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"OFF\",\n        \"YOCTO_DENOISE\": \"OFF\",\n        \"YOCTO_OPENGL\": \"OFF\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"debug-nogl\",\n      \"description\": \"Debug build - no OpenGL\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"OFF\",\n        \"YOCTO_DENOISE\": \"OFF\",\n        \"YOCTO_OPENGL\": \"OFF\",\n        \"YOCTO_CUDA\": \"OFF\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"release-cuda\",\n      \"description\": \"Release build\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"ON\",\n        \"YOCTO_DENOISE\": \"ON\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"ON\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    },\n    {\n      \"name\": \"debug-cuda\",\n      \"description\": \"Debug build\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build/${presetName}\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\",\n        \"YOCTO_APPS\": \"ON\",\n        \"YOCTO_EMBREE\": \"ON\",\n        \"YOCTO_DENOISE\": \"ON\",\n        \"YOCTO_OPENGL\": \"ON\",\n        \"YOCTO_CUDA\": \"ON\"\n      },\n      \"architecture\": {\n        \"value\": \"x64\",\n        \"strategy\": \"external\"\n      }\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"release\",\n      \"configurePreset\": \"release\"\n    },\n    {\n      \"name\": \"debug\",\n      \"configurePreset\": \"debug\"\n    },\n    {\n      \"name\": \"release-nodep\",\n      \"configurePreset\": \"release-nodep\"\n    },\n    {\n      \"name\": \"debug-nodep\",\n      \"configurePreset\": \"debug-nodep\"\n    },\n    {\n      \"name\": \"release-cuda\",\n      \"configurePreset\": \"release-cuda\"\n    },\n    {\n      \"name\": \"debug-cuda\",\n      \"configurePreset\": \"debug-cuda\"\n    }\n  ]\n}\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "exts",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.2451171875,
          "content": "# Project information\nsite_name: Yocto/GL\nsite_author: Fabio Pellacini\n\n# Repository\nrepo_name: xelatihy/yocto-gl\nrepo_url: https://github.com/xelatihy/yocto-gl/\nedit_uri: \"\"\n\n# Copyright\ncopyright: Copyright &copy; 2016 - 2020 Fabio Pellacini\n\n# Theme\ntheme:\n  name: material\n  language: en\n  extra_css:\n    - css/extra.css\n  palette:\n    primary: blue\n  features:\n    - navigation.instant\n\n# Extensions\nmarkdown_extensions:\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - pymdownx.inlinehilite\n  - attr_list\n  - meta\n\n# Pages\nnav:\n  - About: index.md\n  - Gallery: gallery.md\n  - Math types: yocto/yocto_math.md\n  - Color operations: yocto/yocto_color.md\n  - Geometry operations: yocto/yocto_geometry.md\n  - Sampling routines: yocto/yocto_sampling.md\n  - Noise functions: yocto/yocto_noise.md\n  - Shading routines: yocto/yocto_shading.md\n  - Image utilities: yocto/yocto_image.md\n  - Shape utilities: yocto/yocto_shape.md\n  - Scene representation: yocto/yocto_scene.md\n  - Ray-scene intersection: yocto/yocto_bvh.md\n  - Path tracing: yocto/yocto_trace.md\n  - Image, shape and scene serialization: yocto/yocto_sceneio.md\n  - Model serialization: yocto/yocto_modelio.md\n  # - Concurrency utilities: yocto/yocto_parallel.md\n  # - Command-line utilities: yocto/yocto_cli.md\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 6.1171875,
          "content": "# Yocto/GL: Tiny C++ Libraries for Data-Oriented Physically-based Graphics\n\nYocto/GL is a collection of small C++17 libraries for building\nphysically-based graphics algorithms released under the MIT license.\nYocto/GL is written in a deliberately data-oriented style for ease of\ndevelopment and use.\nYocto/GL is split into small libraries to make code navigation easier.\nSee each header file for documentation.\n\n- `yocto/yocto_math.{h}`: fixed-size vectors, matrices, rigid frames,\n  transforms\n- `yocto/yocto_color.{h}`: color conversion, color adjustment,\n  tone mapping functions, color grading, color maps, color spaces\n- `yocto/yocto_geometry.{h}`: rays, bounding boxes,\n  geometry functions, ray-primitive intersection, point-primitive overlap\n- `yocto/yocto_noise.{h}`: Perlin noise\n- `yocto/yocto_sampling.{h}`: random number generation, generation of points\n  and directions, Monte Carlo utilities\n- `yocto/yocto_shading.{h}`: evaluation and sampling of fresnel\n  functions, bsdf lobes, transmittance lobes, phase functions\n- `yocto/yocto_image.{h,cpp}`: simple image data type, image resizing,\n  tonemapping, color correction, procedural images, procedural sun-sky\n- `yocto/yocto_shape.{h,cpp}`: simple shape data structure, utilities \n  for manipulating triangle meshes, quads meshes and line sets, computation of \n  normals and tangents, linear and Catmull-Clark subdivision, \n  procedural shapes generation, ray intersection and closest point queries\n- `yocto/yocto_scene.{h,cpp}`: scene representation and properties\n  evaluation\n- `yocto/yocto_bvh.{h,cpp}`: ray intersection and closest point queries\n  of triangle meshes, quads meshes, line sets and instances scenes using a\n  two-level bounding volume hierarchy\n- `yocto/yocto_trace.{h,cpp}`: path tracing of surfaces and hairs supporting\n  area and environment illumination, microfacet GGX and subsurface scattering,\n  multiple importance sampling\n- `yocto/yocto_sceneio.{h,cpp}`: image, shape and scene serialization\n- `yocto/yocto_modelio.{h,cpp}`: low-level parsing and writing for \n  Ply, Obj, Stl formats\n- `yocto/yocto_pbrtio.{h,cpp}`: low-level parsing and writing for \n  Pbrt format\n- `yocto/yocto_cli.{h}`: printing utilities and command line parsing\n- `yocto/yocto_parallel.h`: concurrency utilities (deprecated)\n\nYou can see Yocto/GL in action in the following applications written to\ntest the library:\n\n- `apps/ytonemap.cpp`: image conversion and viewing\n- `apps/ycolorgrade.cpp`: image color grading\n- `apps/yconvert.cpp`: scene conversion\n- `apps/yconverts.cpp`: shape conversion\n- `apps/ytrace.cpp`: offline and interactive scene rendering\n- `apps/ycutrace.cpp`: offline and interactive scene rendering with CUDA\n- `apps/yview.cpp`: interactive scene viewing\n\nHere are some test images rendered with the path tracer. More images are\nincluded in the [project site](https://xelatihy.github.io/yocto-gl/).\n\n![Example materials: matte, plastic, metal, glass, subsurface, normal mapping](images/features1.jpg)\n\n![Example shapes: procedural shapes, Catmull-Clark subdivision, hairs, displacement mapping](images/features2.jpg)\n\n![Image rendered with Yocto/GL path tracer. Model by Disney Animation Studios.](images/island.jpg)\n\n## Design Considerations\n\nYocto/GL follows a \"data-oriented programming model\" that makes data explicit.\nData is stored in simple structs and accessed with free functions or directly.\nAll data is public, so we make no attempt at encapsulation.\nWe do this since this makes Yocto/GL easier to extend and quicker to learn,\nwith a more explicit data flow that is easier when writing parallel code.\nSince Yocto/GL is mainly used for research and teaching,\nexplicit data is both more hackable and easier to understand.\n\nNearly all objects in Yocto/GL have value semantic. This means that everything\ncan be trivially copied and serialized and there is no need for memory management. \nWhile this has the drawback of potentially introducing spurious copies, it does\nhave the benefit of ensuring that no memory corruption can occur, which\nturned out was a major issue for novice C++ users, even in a very small\nlibrary like this one.\n\nIn terms of code style we prefer a functional approach rather than an\nobject oriented one, favoring free functions to class methods. All functions\nand data are defined in the `yocto` namespace so libraries can call each others\ntrivially.\n\nThe use of templates in Yocto was the reason for many refactoring, going\nfrom no template to heavy template use. At this point, Yocto uses some templates\nfor readability. In the future, we will increase the use of templates in math\ncode, while keeping many APIs explicitly typed.\n\nFor error handling in IO we either return status object or an interface that\nuses boolean flags and error strings. Internally exceptions are used when used\nby external libraries, but otherwise no exception are used. At the moment,\nexceptions are only used to report \"programmer errors\", namely when\npreconditions or post conditions are violated in functions, just lime the\nstandard library does.\n\n## License\n\nThe library is released under the MIT license. We include various external\ndependencies in the distribution that each have thir own license, compatible\nwith the chosen one.\n\n## Compilation\n\nThis library requires a C++17 compiler and is know to compiled on\nOsX (Xcode >= 11), Windows (MSVC >= 2019) and Linux (gcc >= 9, clang >= 9).\n\nYou can build the example applications using CMake with\n`mkdir build; cd build; cmake ..; cmake --build .`\n\nYocto/GL required dependencies are included in the distribution and do not\nneed to be installed separately.\n\nYocto/GL optionally supports building OpenGL demos. OpenGL support is enabled\nby defining the cmake option `YOCTO_OPENGL`. \nOpenGL dependencies are included in this repo.\n\nYocto/GL optionally supports the use of Intel's Embree for ray casting.\nSee the main CMake file for how to link to it. Embree support is enabled by\ndefining the cmake option `YOCTO_EMBREE`. Embree needs to be installed separately.\n\nYocto/GL optionally supports the use of Intel's Open Image Denoise for denoising.\nSee the main CMake file for how to link to it. Open Image Denoise support\nis enabled by defining the cmake option `YOCTO_DENOISE`.\nOIDN needs to be installed separately.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}