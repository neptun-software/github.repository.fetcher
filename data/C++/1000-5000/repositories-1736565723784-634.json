{
  "metadata": {
    "timestamp": 1736565723784,
    "page": 634,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CVCUDA/CV-CUDA",
      "stars": 2419,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.8623046875,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n---\nBasedOnStyle: Microsoft\nIndentWidth: 4\nTabWidth:    8\n---\nLanguage:        Cpp\n\nAccessModifierOffset: -4\n\nAlignArrayOfStructures: Right\nAlignConsecutiveMacros: AcrossComments\nAlignConsecutiveAssignments: Consecutive\nAlignConsecutiveBitFields: AcrossComments\nAlignConsecutiveDeclarations: AcrossComments\nAlignEscapedNewlines: Left\nAlignOperands:   AlignAfterOperator\n\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: Inline\nAllowShortLoopsOnASingleLine: true\n\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\n\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterUnion:      true\n\n  # Must be false or else CompactNamespace=true won't work.\n  # Tested with clang-format-14\n  AfterNamespace:  false\n\n  BeforeLambdaBody: true\n  BeforeWhile:     true\n\nBreakBeforeBinaryOperators: All\nBreakInheritanceList: BeforeComma\nBreakConstructorInitializers: BeforeComma\nQualifierAlignment: Custom\n\nQualifierOrder:\n  - inline\n  - static\n  - const\n  - volatile\n  - type\n\nCompactNamespaces: true\n\nPackConstructorInitializers: Never\n\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^\".*Fwd\\.hpp\"'\n    Priority:        9\n  - Regex:           '^<.*Fwd\\.hpp>'\n    Priority:        11\n  - Regex:           '^\".*\\.h.*\"'\n    Priority:        2\n  - Regex:           '^\".*\\.cuh\"'\n    Priority:        3\n  - Regex:           '^\".*'\n    Priority:        4\n  - Regex:           '^<.*\\.h.*>'\n    Priority:        5\n  - Regex:           '^<.*\\.cuh>'\n    Priority:        7\n  - Regex:           '^<.*'\n    Priority:        8\n  - Regex:           '[^.]+'\n    Priority:        11\n  - Regex:           '.*'\n    Priority:        12\n\nIncludeIsMainRegex: '([-_](test|unittest))?$'\n\nIndentGotoLabels: false\nIndentPPDirectives: AfterHash\nIndentExternBlock: NoIndent\nIndentWrappedFunctionNames: true\n\nKeepEmptyLinesAtTheStartOfBlocks: false\n\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyReturnTypeOnItsOwnLine: 200\nReferenceAlignment: Right\nReflowComments:  false\nSeparateDefinitionBlocks: Always\n\nSpaceAfterTemplateKeyword: false\nSpaceBeforeParens: Custom\nSpacesInContainerLiterals: false\n\nStandard:        c++17\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.078125,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n*.png filter=lfs diff=lfs merge=lfs -text\n*.jpg filter=lfs diff=lfs merge=lfs -text\n*.tif filter=lfs diff=lfs merge=lfs -text\n*.tiff filter=lfs diff=lfs merge=lfs -text\n*.onnx filter=lfs diff=lfs merge=lfs -text\n*.bmp filter=lfs diff=lfs merge=lfs -text\n*.mp4 filter=lfs diff=lfs merge=lfs -text\n*.a filter=lfs diff=lfs merge=lfs -text\n*.hdf5 filter=lfs diff=lfs merge=lfs -text\n*.pt filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1328125,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Project specific\n# ----------------\n/build/\n/build-*/\n/build_*/\n/install/\n/cvcuda-installer*/\n\n# Visual Studio Code\n# ------------------\n.vscode/\n.history/\n\n# Python\n# ------\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Jupyter Notebooks\n# -----------------\nipynb_checkpoints\n*/.ipynb_checkpoints/*\nprofile_default/\nipython_config.py\n\n# Miscellaneous\n# -------------\n*.bin\n*.gz\n*.xz\n*.bz2\n\n# Documentation\n# -------------\n_c_cpp_api\n_cvcuda_api\n\n# Samples\n# -------------\n*.engine\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.0693359375,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n[submodule \"python/pybind11\"]\n\tpath = 3rdparty/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"3rdparty/googletest\"]\n\tpath = 3rdparty/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"3rdparty/dlpack\"]\n\tpath = 3rdparty/dlpack\n\turl = https://github.com/dmlc/dlpack.git\n[submodule \"3rdparty/nvbench\"]\n\tpath = 3rdparty/nvbench\n\turl = https://github.com/NVIDIA/nvbench.git\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.77734375,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.20.1)\n\n# We need to check this variable before starting a CUDA project - otherwise it will appear\n# as set, with the default value pointing to the oldest supported architecture (52 as of CUDA 11.8)\nif(CMAKE_CUDA_ARCHITECTURES)\n    set(USE_CMAKE_CUDA_ARCHITECTURES TRUE)\nendif()\n\nproject(cvcuda\n        LANGUAGES C CXX\n        VERSION 0.13.0\n        DESCRIPTION \"CUDA-accelerated Computer Vision algorithms\"\n)\n\n# Make sure the cuda host compiler agrees with what we're using,\n# unless user overwrites it (at their own risk).\nif(NOT CMAKE_CUDA_HOST_COMPILER)\n    set(CMAKE_CUDA_HOST_COMPILER \"${CMAKE_CXX_COMPILER}\")\nendif()\n\nenable_language(CUDA)\n\n# Used when creating special builds\nset(PROJECT_VERSION_SUFFIX \"-beta\")\n\n# if user didn't set install prefix,\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    # Allow cv-cuda libraries with different major versions to be\n    # installed in parallel\n    set(CMAKE_INSTALL_PREFIX \"/opt/nvidia/cvcuda${PROJECT_VERSION_MAJOR}\" CACHE PATH \"where cvcuda will be installed\" FORCE)\nendif()\n\n# Options to configure the build tree =======\noption(BUILD_TESTS \"Enable testsuite\" OFF)\noption(BUILD_PYTHON \"Build python bindings\" OFF)\noption(BUILD_BENCH \"Build benchmark\" OFF)\noption(BUILD_DOCS \"Build documentation\" OFF)\noption(ENABLE_SANITIZER \"Enabled sanitized build\" OFF)\n\n# Configure build tree ======================\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\" )\n\ninclude(ConfigVersion)\ninclude(ConfigBuildTree)\ninclude(ConfigCompiler)\ninclude(ConfigCUDA)\ninclude(ConfigCCache)\nif(BUILD_PYTHON)\n    include(ConfigPython)\nendif()\n\n# Define the build tree ====================\n\nadd_subdirectory(3rdparty EXCLUDE_FROM_ALL)\n\nadd_subdirectory(src)\n\nif(BUILD_PYTHON)\n    include(BuildPython)\nendif()\n\nif(BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n\nif(BUILD_DOCS)\n    add_subdirectory(docs)\nendif()\n\nif(BUILD_SAMPLES)\n    add_subdirectory(samples)\nendif()\n\nif(BUILD_BENCH)\n    add_subdirectory(bench)\nendif()\n\n# Must be done after build tree is defined\ninclude(ConfigCPack)\n\n# Print build tree configuration ===========\n\nmessage(STATUS \"\")\ninclude(PrintConfig)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.34375,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\n\n# Contributor Code of Conduct\n\n## Overview\n\nThis document defines the Code of Conduct followed and enforced for the\nCV-CUDA Libraries.\n\n### Intended Audience\n\n* Community\n* Developers\n* Project Leads\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make\nparticipation in our community a harassment-free experience for everyone,\nregardless of age, body size, visible or invisible disability, ethnicity, sex\ncharacteristics, gender identity and expression, level of experience, education,\nsocio-economic status, nationality, personal appearance, race, caste, color,\nreligion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[cpp-conduct@nvidia.com].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[cpp-conduct@nvidia.com]: mailto:cpp-conduct@nvidia.com\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0400390625,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\n\n# Contributing to CV-CUDA\n\n**Currently, CV-CUDA is not accepting outside contributions.**\n\nContributions to CV-CUDA fall into the following categories:\n\n1. To report a bug, request a new feature, or report a problem with documentation,\n   please file an [issue](https://github.com/CVCUDA/CV-CUDA/issues/new/choose)\n   describing the problem or new feature in detail. The CV-CUDA team evaluates\n   and triages issues, and schedules them for a release. If you believe the issue\n   needs priority attention, please comment on the issue to notify the team.\n1. To propose a new feature, please file a new feature request\n   [issue](https://github.com/CVCUDA/CV-CUDA/issues/new/choose). Describe the\n   intended feature and discuss the design and implementation with the team and\n   community. NOTE: Currently, CV-CUDA is not accepting\n   outside contributions.\n1. To ask a general question, please sumbit a question\n   [issue](https://github.com/CVCUDA/CV-CUDA/issues/new/choose). If you need\n   more context on a particular issue, please ask in a comment.\n\nAs contributors and maintainers to this project, you are expected to abide by\nCV-CUDA's contributor code of conduct. More information can be found at:\n[Contributor Code of Conduct](https://github.com/CVCUDA/CV-CUDA/tree/main/CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "DEVELOPER_GUIDE.md",
          "type": "blob",
          "size": 12.4013671875,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2023-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\n\n# CV-CUDA Developer Guide\n\n## What is CV-CUDA?\n\nCV-CUDA™ is an open-source, graphics processing unit (GPU)-accelerated library\nfor cloud-scale image processing and computer vision developed jointly by NVIDIA\nand the ByteDance Applied Machine Learning teams.  CV-CUDA helps developers build\nhighly efficient pre- and post-processing pipelines that can improve throughput\nby more than 10x while lowering cloud computing costs.\n\nCV-CUDA includes:\n\n- A unified, specialized set of high-performance CV and image processing kernels\n- C, C++, and Python APIs\n- Batching support, with variable shape images\n- Zero-copy interfaces to PyTorch\n- Sample applications\n\n## What Pre- and Post-Processing Operators Are Included?\n\n| Pre/Post-Processing Operators | Definition |\n|-------------------------------|------------|\n| Adaptive Thresholding | Chooses threshold based on smaller regions in the neighborhood of each pixel. |\n| Advanced Color Format Conversions | Performs color conversion from interleaved RGB/BGR <-> YUV/YVU and semi planar. Supported standards: BT.601. BT.709. BT.2020 |\n| AverageBlur | Reduces image noise using an average filter |\n| BilateralFilter | Reduces image noise while preserving strong edges |\n| Bounding Box | Draws an rectangular border using the X-Y coordinates and dimensions typically to define the location and size of an object in an image |\n| Box Blurring | Overlays a blurred rectangle using the X-Y coordinates and dimensions that define the location and size of an object in an image |\n| Brightness_Contrast | Adjusts brightness and contrast of an image |\n| CenterCrop | Crops an image at its center |\n| ChannelReorder | Shuffles the order of image channels |\n| Color_Twist | Adjusts the hue saturation brightness and contrast of an image |\n| Composite | Composites two images together |\n| Conv2D | Convolves an image with a provided kernel |\n| CopyMakeBorder | Creates a border around an image |\n| CustomCrop | Crops an image with a given region-of-interest |\n| CvtColor | Converts an image from one color space to another |\n| DataTypeConvert | Converts an image’s data type, with optional scaling |\n| Erase | Erases image regions |\n| Flip | Flips a 2D image around its axis |\n| GammaContrast | Adjusts image contrast |\n| Gaussian | Applies a gaussian blur filter to the image |\n| Gaussian Noise | Generates a statistical noise with a normal (Gaussian) distribution |\n| Histogram | Provides a grayscale value distribution showing the frequency of occurrence of each gray value. |\n| Histogram Equalizer | Allows effective spreading out the intensity range of the image typically used to improve contrast |\n| HqResize | Performs advanced resizing supporting 2D and 3D data, tensors, tensor batches, and varshape image batches (2D only). Supports nearest neighbor, linear, cubic, Gaussian and Lanczos interpolation, with optional antialiasing when down-sampling |\n| Inpainting | Performs inpainting by replacing a pixel by normalized weighted sum of all the known pixels in the neighborhood |\n| Joint Bilateral Filter | Reduces image noise while preserving strong edges based on a guidance image |\n| Label | Labels connected regions in an image using 4-way connectivity for foreground and 8-way for background pixels |\n| Laplacian | Applies a Laplace transform to an image |\n| MedianBlur | Reduces an image’s salt-and-pepper noise |\n| MinArea Rect | Finds the minimum area rotated rectangle typically used to draw bounding rectangle with minimum area |\n| MinMaxLoc | Finds the maximum and minimum values in a given array |\n| Morphology | Performs morphological erode and dilate transformations |\n| Morphology (close) | Performs morphological operation that involves dilation followed by erosion on an image |\n| Morphology (open) | Performs morphological operation that involves erosion followed by dilation on an image |\n| Non-Maximum Suppression | Enables selecting a single entity out of many overlapping ones typically used for selecting from multiple bounding boxes during object detection |\n| Normalize | Normalizes an image pixel’s range |\n| OSD (Polyline Line Text Rotated Rect Segmented Mask) | Displays an overlay on the image of different forms including polyline line text rotated rectangle segmented mask |\n| PadStack | Stacks several images into a tensor with border extension |\n| PairwiseMatcher | Matches features computed separately (e.g. via the SIFT operator) in two images, e.g. using the brute force method |\n| PillowResize | Changes the size and scale of an image using python-pillow algorithm |\n| RandomResizedCrop | Crops a random portion of an image and resizes it to a specified size. |\n| Reformat | Converts a planar image into non-planar and vice versa |\n| Remap | Maps pixels in an image with one projection to another projection in a new image. |\n| Resize | Changes the size and scale of an image |\n| ResizeCropConvertReformat | Performs fused Resize-Crop-Convert-Reformat sequence with optional channel reordering |\n| Rotate | Rotates a 2D array in multiples of 90 degrees |\n| SIFT | Identifies and describes features in images that are invariant to scale rotation and affine distortion. |\n| Thresholding | Chooses a global threshold value that is the same for all pixels across the image. |\n| WarpAffine | Applies an affine transformation to an image |\n| WarpPerspective | Applies a perspective transformation to an image |\n\n## Where Are the Release Notes?\n\nCV-CUDA release notes can be\nfound [here](https://github.com/CVCUDA/CV-CUDA/releases)\n\n## Where Can I Get Help?\n\nAn awesome product requires excellent support. File requests for enhancements and bug reports\n[here](https://github.com/CVCUDA/CV-CUDA/issues/new/choose).\n\nWe are providing limited, direct, support to select enterprises using CV-CUDA.\nTo apply for direct enterprise developer engagement from NVIDIA , please fill\nout the early access developer application\n[here](http://developer.nvidia.com/cv-cuda/early-access).\n\n## What Other Computer Vision Products Does NVIDIA Offer?\n\nNVIDIA offers a number of computer vision products\n\nIn addition to cloud-scale computer vision and image processing, NVIDIA offers:\n\n- [DALI](https://developer.nvidia.com/dali) (Data Loading Library), a portable,\n  holistic framework for accelerated data loading and augmentation in deep\n  learning workflows involving images, videos, and audio data.\n- [VPI](https://developer.nvidia.com/embedded/vpi) (Vision Programming\n  Interface), an accelerated computer vision and image processing software\n  library primarily for embedded/edge applications.\n- [cuCIM](https://developer.nvidia.com/multidimensional-image-processing)\n  (Compute Unified Device Architecture Clara Image), an open source,\n  accelerated computer vision and image processing library for multidimensional\n  images in biomedical, geospatial, material life science, and remote sensing\n  use cases.\n- [NPP](https://developer.nvidia.com/npp) (NVIDIA Performance Primitives), an\n  image, signal, and video processing library that accelerates and performs\n  domain-specific functions.\n\nIf you want to learn more about what computer vision solutions are available,\nreview the computer vision solutions landing page.\n\n---\n\n<font size=\"1\">\n<b>Notice</b>\n\nThe information provided in this specification is believed to be accurate and\nreliable as of the date provided. However, NVIDIA Corporation (“NVIDIA”) does\nnot give any representations or warranties, expressed or implied, as to the\naccuracy or completeness of such information. NVIDIA shall have no liability for\nthe consequences or use of such information or for any infringement of patents\nor other rights of third parties that may result from its use. This publication\nsupersedes and replaces all other specifications for the product that may have\nbeen previously supplied.\n\nNVIDIA reserves the right to make corrections, modifications, enhancements,\nimprovements, and other changes to this specification, at any time and/or to\ndiscontinue any product or service without notice. Customer should obtain the\nlatest relevant specification before placing orders and should verify that such\ninformation is current and complete.\n\nNVIDIA products are sold subject to the NVIDIA standard terms and conditions of\nsale supplied at the time of order acknowledgement, unless otherwise agreed in\nan individual sales agreement signed by authorized representatives of NVIDIA and\ncustomer. NVIDIA hereby expressly objects to applying any customer general terms\nand conditions with regards to the purchase of the NVIDIA product referenced in\nthis specification.\n\nNVIDIA products are not designed, authorized or warranted to be suitable for use\nin medical, military, aircraft, space or life support equipment, nor in\napplications where failure or malfunction of the NVIDIA product can reasonably\nbe expected to result in personal injury, death or property or environmental\ndamage. NVIDIA accepts no liability for inclusion and/or use of NVIDIA products\nin such equipment or applications and therefore such inclusion and/or use is at\ncustomer’s own risk.\n\nNVIDIA makes no representation or warranty that products based on these\nspecifications will be suitable for any specified use without further testing or\nmodification. Testing of all parameters of each product is not necessarily\nperformed by NVIDIA. It is customer’s sole responsibility to ensure the product\nis suitable and fit for the application planned by customer and to do the\nnecessary testing for the application in order to avoid a default of the\napplication or the product. Weaknesses in customer’s product designs may affect\nthe quality and reliability of the NVIDIA product and may result in additional\nor different conditions and/or requirements beyond those contained in this\nspecification. NVIDIA does not accept any liability related to any default,\ndamage, costs or problem which may be based on or attributable to: (i) the use\nof the NVIDIA product in any manner that is contrary to this specification, or\n(ii) customer product designs.\n\nNo license, either expressed or implied, is granted under any NVIDIA patent\nright, copyright, or other NVIDIA intellectual property right under this\nspecification. Information published by NVIDIA regarding third-party products or\nservices does not constitute a license from NVIDIA to use such products or\nservices or a warranty or endorsement thereof. Use of such information may\nrequire a license from a third party under the patents or other intellectual\nproperty rights of the third party, or a license from NVIDIA under the patents\nor other intellectual property rights of NVIDIA. Reproduction of information in\nthis specification is permissible only if reproduction is approved by NVIDIA in\nwriting, is reproduced without alteration, and is accompanied by all associated\nconditions, limitations, and notices.\n\nALL NVIDIA DESIGN SPECIFICATIONS, REFERENCE BOARDS, FILES, DRAWINGS, DIAGNOSTICS,\nLISTS, AND OTHER DOCUMENTS (TOGETHER AND SEPARATELY, “MATERIALS”) ARE BEING\nPROVIDED “AS IS.” NVIDIA MAKES NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR\nOTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED\nWARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR\nPURPOSE. Notwithstanding any damages that customer might incur for any reason\nwhatsoever, NVIDIA’s aggregate and cumulative liability towards customer for the\nproducts described herein shall be limited in accordance with the NVIDIA terms\nand conditions of sale for the product.\n\n<b>Trademarks</b>\n\nNVIDIA, the NVIDIA logo, NVIDIA CV-CUDA, and NVIDIA TensorRT are trademarks\nand/or registered trademarks of NVIDIA Corporation in the U.S. and other\ncountries. Other company and product names may be trademarks of the respective\ncompanies with which they are associated.\n\n<b>Copyright</b>\n\n© 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n</font>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 10.8232421875,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2023-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\nApache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\n# APPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[ ]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.\n\n    Copyright (c) [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.0244140625,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\n# CV-CUDA\n\n\n[![License](https://img.shields.io/badge/License-Apache_2.0-yellogreen.svg)](https://opensource.org/licenses/Apache-2.0)\n\n![Version](https://img.shields.io/badge/Version-v0.13.0--beta-blue)\n\n![Platform](https://img.shields.io/badge/Platform-linux--64_%7C_win--64_wsl2%7C_aarch64-gray)\n\n[![CUDA](https://img.shields.io/badge/CUDA-v11.7-%2376B900?logo=nvidia)](https://developer.nvidia.com/cuda-toolkit-archive)\n[![GCC](https://img.shields.io/badge/GCC-v11.0-yellow)](https://gcc.gnu.org/gcc-11/changes.html)\n[![Python](https://img.shields.io/badge/python-v3.8_%7c_v3.9_%7c_v3.10%7c_v3.11-blue?logo=python)](https://www.python.org/)\n[![CMake](https://img.shields.io/badge/CMake-v3.20-%23008FBA?logo=cmake)](https://cmake.org/)\n\nCV-CUDA is an open-source project that enables building efficient cloud-scale\nArtificial Intelligence (AI) imaging and computer vision (CV) applications. It\nuses graphics processing unit (GPU) acceleration to help developers build highly\nefficient pre- and post-processing pipelines. CV-CUDA originated as a\ncollaborative effort between [NVIDIA][NVIDIA Develop] and [ByteDance][ByteDance].\n\nRefer to our [Developer Guide](DEVELOPER_GUIDE.md) for more information on the\noperators available.\n\n## Getting Started\n\nTo get a local copy up and running follow these steps.\n\n### Compatibility\n\n|CV-CUDA Build|Platform|CUDA Version|CUDA Compute Capability|Hardware Architectures|Nvidia Driver|Python Versions|Supported Compilers (build from source)|API compatibility with prebuilt binaries|OS/Linux distributions tested with prebuilt packages|\n|-|-|-|-|-|-|-|-|-|-|\n|x86_64_cu11|x86_64|11.7 or later|SM7 and later|Volta, Turing, Ampere, Hopper, Ada Lovelace|r525 or later*** |3.8, 3.9, 3.10, 3.11|gcc>=9* <br> gcc>=11**|gcc>=9|Ubuntu>= 20.04<br>WSL2/Ubuntu>=20.04|\n|x86_64_cu12|x86_64|12.2 or later|SM7 and later|Volta, Turing, Ampere, Hopper, Ada Lovelace|r525 or later***|3.8, 3.9, 3.10, 3.11|gcc>=9* <br> gcc>=11**|gcc>=9|Ubuntu>= 20.04<br>WSL2/Ubuntu>=20.04|\n|aarch64_cu11|aarch64|11.4|SM7 and later|Jetson AGX Orin|JetPack 5.1|3.8|gcc>=9* <br> gcc>=11**|gcc>=9|Jetson Linux 35.x|\n|aarch64_cu12|aarch64|12.2|SM7 and later|Jetson AGX Orin, IGX Orin + Ampere RTX6000, IGX Orin + ADA RTX6000|JetPack 6.0 DP, r535 (IGX OS v0.6)|3.10|gcc>=9* <br> gcc>=11**|gcc>=9|Jetson Linux 36.2<br> IGX OS v0.6|\n\n\\* partial build, no test module (see Known Limitations) <br>\n\\** full build, including test module <br>\n\\*** [samples][CV-CUDA Samples] require driver r535 or later to run and are only officially supported with CUDA 12.\n\n### Known limitations and issues\n\n- For GCC versions lower than 11.0, C++17 support needs to be enabled when compiling CV-CUDA.\n- The C++ test module cannot build with gcc<11 (requires specific C++-20 features).  With gcc-9 or gcc-10, please build with option `-DBUILD_TESTS=0`\n- [CV-CUDA Samples] require driver r535 or later to run and are only officially supported with CUDA 12.\n- Only one CUDA version (CUDA 11.x or CUDA 12.x) of CV-CUDA packages (Debian packages, tarballs, Python Wheels) can be installed at a time. Please uninstall all packages from a given CUDA version before installing packages from a different version.\n- Documentation built on Ubuntu 20.04 needs an up-to-date version of sphinx (`pip install --upgrade sphinx`) as well as explicitly parsing the system's default python version ` ./ci/build_docs path/to/build -DPYTHON_VERSIONS=\"<py_ver>\"`.\n- The Resize and RandomResizedCrop operators incorrectly interpolate pixel values near the boundary of an image or tensor when using cubic interpolation. This will be fixed in an upcoming release.\n\n### Installation\n\nFor convenience, we provide pre-built packages for various combinations of CUDA versions, Python versions and architectures [here][CV-CUDA GitHub Releases].\nThe following steps describe how to install CV-CUDA from such pre-built packages.\n\nWe support two main alternative pathways:\n- Standalone Python Wheels (containing C++/CUDA Libraries and Python bindings)\n- DEB or Tar archive installation (C++/CUDA Libraries, Headers, Python bindings)\n\nChoose the installation method that meets your environment needs.\n\n#### Python Wheel File Installation\n\nDownload the appropriate .whl file for your computer architecture, Python and CUDA version from the release assets of current CV-CUDA release. Release information of all CV-CUDA releases can be found [here][CV-CUDA GitHub Releases]. Once downloaded, execute the `pip install` command to install the Python wheel. For example:\n   ```shell\n   pip install cvcuda_<cu_ver>-<x.x.x>-cp<py_ver>-cp<py_ver>-linux_<arch>.whl\n   ```\n\nwhere `<cu_ver>` is the desired CUDA version, `<x.x.x>` is the CV-CUDA release version, `<py_ver>` is the desired Python version and `<arch>` is the desired architecture.\n\nPlease note that the Python wheels are standalone, they include both the C++/CUDA libraries and the Python bindings.\n\n#### DEB File Installation\n\nInstall C++/CUDA libraries (cvcuda-lib*) and development headers (cvcuda-dev*) using `apt`:\n```shell\nsudo apt install -y ./cvcuda-lib-<x.x.x>-<cu_ver>-<arch>-linux.deb ./cvcuda-dev-<x.x.x>-<cu_ver>-<arch>-linux.deb\n```\n\nInstall Python bindings (cvcuda-python*) using `apt`:\n```shell\nsudo apt install -y ./cvcuda-python<py_ver>-<x.x.x>-<cu_ver>-<arch>-linux.deb\n```\nwhere `<cu_ver>` is the desired CUDA version, `<py_ver>` is the desired Python version and `<arch>` is the desired architecture.\n\n#### Tar File Installation\n\nInstall C++/CUDA libraries (cvcuda-lib*) and development headers (cvcuda-dev*):\n```shell\ntar -xvf cvcuda-lib-<x.x.x>-<cu_ver>-<arch>-linux.tar.xz\ntar -xvf cvcuda-dev-<x.x.x>-<cu_ver>-<arch>-linux.tar.xz\n```\nInstall Python bindings (cvcuda-python*)\n```shell\ntar -xvf cvcuda-python<py_ver>-<x.x.x>-<cu_ver>-<arch>-linux.tar.xz\n```\nwhere `<cu_ver>` is the desired CUDA version, `<py_ver>` is the desired Python version and `<arch>` is the desired architecture.\n\n\n### Build from Source\n\nFollow these instruction to build CV-CUDA from source:\n\n#### 1. Set up your local CV-CUDA repository\n\nInstall the dependencies needed to setup up the repository:\n- git\n- git-lfs: to retrieve binary files from remote repository\n\nOn Ubuntu >= 20.04, install the following packages using `apt`:\n```shell\nsudo apt install -y git git-lfs\n```\n\nClone the repository\n```shell\ngit clone https://github.com/CVCUDA/CV-CUDA.git\n```\n\nAssuming the repository was cloned in `~/cvcuda`, it needs to be properly configured by running the `init_repo.sh` script only once.\n\n```shell\ncd ~/cvcuda\n./init_repo.sh\n```\n\n#### 2. Build CV-CUDA\n\nInstall the dependencies required to build CV-CUDA:\n- g++-11: compiler to be used\n- cmake (>= 3.20), ninja-build (optional): manage build rules\n- python3-dev: for python bindings\n- libssl-dev: needed by the testsuite (MD5 hashing utilities)\n- CUDA toolkit\n- patchelf\n\nOn Ubuntu >= 20.04, install the following packages using `apt`:\n```shell\nsudo apt install -y g++-11 cmake ninja-build python3-dev libssl-dev patchelf\n```\n\nAny version of the 11.x or 12.x CUDA toolkit should work.\nCV-CUDA was tested with 11.7 and 12.2, these versions are thus recommended.\n\n```shell\nsudo apt install -y cuda-11-7\n# or\nsudo apt install -y cuda-12-2\n```\n\nBuild the project:\n```shell\nci/build.sh [release|debug] [output build tree path] [-DBUILD_TESTS=1|0] [-DPYTHON_VERSIONS='3.8;3.9;3.10;3.11'] [-DPUBLIC_API_COMPILERS='gcc-9;gcc-11;clang-11;clang-14']\n```\n\n- The default build type is 'release'.\n- If output build tree path isn't specified, it will be `build-rel` for release\n      builds, and `build-deb` for debug.\n- The library is in `build-rel/lib` and executables (tests, etc...) are in `build-rel/bin`.\n- The `-DBUILD_TESTS` option can be used to disable/enable building the tests (enabled by default, see Known Limitations).\n- The `-DPYTHON_VERSIONS` option can be used to select Python versions to build bindings and Wheels for. By default, only the default system Python3 version will be selected.\n- The `-DPUBLIC_API_COMPILERS` option can be used to select the compilers used to check public API compatibility. By default, gcc-11, gcc-9, clang-11, and clang-14 is tried to be selected and checked.\n\n#### 3. Build Documentation\n\nKnown limitation: Documentation built on Ubuntu 20.04 needs an up-to-date version of sphinx (`pip install --upgrade sphinx`) as well as explicitly parsing the system's default python version ` ./ci/build_docs path/to/build -DPYTHON_VERSIONS=\"<py_ver>\"`.\n\nInstall the dependencies required to  build the documentation:\n- doxygen: parse header files for reference documentation\n- python3, python3-pip: to install some python packages needed\n- sphinx, breathe, recommonmark, graphiviz: to render the documentation\n- sphinx-rtd-theme: documentation theme used\n\nOn Ubuntu, install the following packages using `apt` and `pip`:\n```shell\nsudo apt install -y doxygen graphviz python3 python3-pip sphinx\npython3 -m pip install breathe recommonmark graphviz sphinx-rtd-theme\n```\n\nBuild the documentation:\n```shell\nci/build_docs.sh [build folder]\n```\nDefault build folder is 'build'.\n\n#### 4. Build and run Samples\n\nFor instructions on how to build samples from source and run them, see the [Samples](samples/README.md) documentation.\n\n#### 5. Run Tests\n\nInstall the dependencies required for running the tests:\n- python3, python3-pip: to run python bindings tests\n- torch: dependencies needed by python bindings tests\n\nOn Ubuntu >= 20.04, install the following packages using `apt` and `pip`:\n```shell\nsudo apt install -y python3 python3-pip\npython3 -m pip install pytest torch numpy==1.26\n```\n\nThe tests are in `<buildtree>/bin`. You can run the script below to run all tests at once. Here's an example when build tree is created in `build-rel`:\n```shell\nbuild-rel/bin/run_tests.sh\n```\n\n#### 6. Package installers and Python Wheels\n\nPackage installers\n\nInstallers can be generated using the following cpack command once you have successfully built the project:\n```shell\ncd build-rel\ncpack .\n```\nThis will generate in the build directory both Debian installers and tarballs (\\*.tar.xz), needed for integration in other distros.\n\nFor a fine-grained choice of what installers to generate, the full syntax is:\n\n```shell\ncpack . -G [DEB|TXZ]\n```\n- DEB for Debian packages\n- TXZ for \\*.tar.xz tarballs.\n\nPython Wheels\n\nBy default, during the `release` build, Python bindings and wheels are created for the available CUDA version and the specified Python version(s). The wheels are now output to the `build-rel/python3/repaired_wheels` folder (after being processed by the `auditwheel repair` command in the case of ManyLinux). The single generated python wheel is compatible with all versions of python specified during the cmake build step. Here, `build-rel` is the build directory used to build the release build.\n\nThe new Python wheels for PyPI compliance must be built within the ManyLinux 2014 Docker environment. The Docker images can be generated using the `docker/manylinux/docker_buildx.sh` script. These images ensure the wheels meet ManyLinux 2014 and PyPI standards.\n\nThe built wheels can still be installed using `pip`. For example, to install the Python wheel built for CUDA 12.x, Python 3.10 and 3.11 on Linux x86_64 systems:\n```shell\npip install cvcuda_cu12-<x.x.x>-cp310.cp311-cp310.cp311-linux_x86_64.whl\n```\n\n## Contributing\n\nCV-CUDA is an open source project. As part of the Open Source Community, we are\ncommitted to the cycle of learning, improving, and updating that makes this\ncommunity thrive. However, CV-CUDA is not yet ready\nfor external contributions.\n\nTo understand the process for contributing the CV-CUDA, see our\n[Contributing](CONTRIBUTING.md) page. To understand our commitment to the Open\nSource Community, and providing an environment that both supports and respects\nthe efforts of all contributors, please read our\n[Code of Conduct](CODE_OF_CONDUCT.md).\n\n### CV-CUDA Make Operator Tool\n\nThe `mkop.sh` script is a powerful tool for creating a scaffold for new operators in the CV-CUDA library. It automates several tasks, ensuring consistency and saving time.\n\n#### Features of `mkop.sh`:\n\n1. **Operator Stub Creation**: Generates no-op (no-operation) operator templates, which serve as a starting point for implementing new functionalities.\n\n2. **File Customization**: Modifies template files to include the new operator's name, ensuring consistent naming conventions across the codebase.\n\n3. **CMake Integration**: Adds the new operator files to the appropriate CMakeLists, facilitating seamless compilation and integration into the build system.\n\n4. **Python Bindings**: Creates Python wrapper stubs for the new operator, allowing it to be used within Python environments.\n\n5. **Test Setup**: Generates test files for both C++ and Python, enabling immediate development of unit tests for the new operator.\n\n#### How to Use `mkop.sh`:\n\nRun the script with the desired operator name. The script assumes it's located in `~/cvcuda/tools/mkop`.\n\n```shell\n./mkop.sh [Operator Name]\n```\n\nIf the script is run from a different location, provide the path to the CV-CUDA root directory.\n\n```shell\n./mkop.sh [Operator Name] [CV-CUDA root]\n```\n\n**NOTE**: The first letter of the new operator name is captitalized where needed to match the rest of the file structures.\n\n#### Process Details:\n\n- **Initial Setup**: The script begins by validating the input and setting up necessary variables. It then capitalizes the first letter of the operator name to adhere to naming conventions.\n\n- **Template Modification**: It processes various template files (`Public.h`, `PrivateImpl.cpp`, etc.), replacing placeholders with the new operator name. This includes adjusting file headers, namespaces, and function signatures.\n\n- **CMake and Python Integration**: The script updates `CMakeLists.txt` files and Python module files to include the new operator, ensuring it's recognized by the build system and Python interface.\n\n- **Testing Framework**: Finally, it sets up test files for both C++ and Python, allowing developers to immediately start writing tests for the new operator.\n\n## License\n\nCV-CUDA operates under the [Apache-2.0](LICENSE.md) license.\n\n## Security\n\nCV-CUDA, as a NVIDIA program, is committed to secure development practices.\nPlease read our [Security](SECURITY.md) page to learn more.\n\n## Acknowledgements\n\nCV-CUDA is developed jointly by NVIDIA and ByteDance.\n\n[NVIDIA Develop]: https://developer.nvidia.com/\n[ByteDance]: https://www.bytedance.com/\n[CV-CUDA GitHub Releases]: https://github.com/CVCUDA/CV-CUDA/releases\n[CV-CUDA Samples]: https://github.com/CVCUDA/CV-CUDA/blob/main/samples/README.md\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.16796875,
          "content": "\n[//]: # \"SPDX-FileCopyrightText: Copyright (c) 2023-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\"\n[//]: # \"SPDX-License-Identifier: Apache-2.0\"\n[//]: # \"\"\n[//]: # \"Licensed under the Apache License, Version 2.0 (the 'License');\"\n[//]: # \"you may not use this file except in compliance with the License.\"\n[//]: # \"You may obtain a copy of the License at\"\n[//]: # \"http://www.apache.org/licenses/LICENSE-2.0\"\n[//]: # \"\"\n[//]: # \"Unless required by applicable law or agreed to in writing, software\"\n[//]: # \"distributed under the License is distributed on an 'AS IS' BASIS\"\n[//]: # \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\"\n[//]: # \"See the License for the specific language governing permissions and\"\n[//]: # \"limitations under the License.\"\n\n# Security\n\nNVIDIA is dedicated to the security and trust of our software products and\nservices, including all source code repositories managed through our\norganization.\n\nIf you need to report a security issue, please use the appropriate contact\npoints outlined below.\n**Please do not report security vulnerabilities through GitHub/GitLab.**\n\n## Reporting Potential Security Vulnerability in an NVIDIA Product\n\n---\nTo report a potential security vulnerability in any NVIDIA product:\n\n- Web: [Security Vulnerability Submission Form](https://www.nvidia.com/object/submit-security-vulnerability.html)\n- E-Mail: psirt@nvidia.com\n  - We encourage you to use the following PGP key for secure email communication: [NVIDIA public PGP Key for communication](https://www.nvidia.com/en-us/security/pgp-key)\n  - Please include the following information:\n  - Product/Driver name and version/branch that contains the vulnerability\n\n## Code Static Analysis\n\nIn our commitment to maintaining the highest standards of code quality and security, we have enabled GitHub's Code Static Analysis scanning on our repositories. Static Analysis is a powerful tool for analyzing the codebase for potential vulnerabilities.\n\n- Scope: CodeQL scanning is activated across all branches of this repository.\n- Frequency: Scans are conducted regularly on new commits to ensure continuous integration and delivery are secure.\n- Results Handling: Any identified vulnerabilities or code issues are reviewed and addressed promptly by our development team.\n- Community Contribution: We welcome contributions to enhance our CodeQL queries. If you have suggestions or improvements, please submit a pull request or contact us via the outlined channels.\n\n## Secrets Scanning\n\nTo further bolster our repository's security, we have implemented GitHub's secrets scanning feature. This feature helps detect and prevent accidental commits of sensitive information such as passwords, private keys, and API tokens.\n\n- Active Scanning: Secrets scanning is active on all branches of this repository.\n- Alerts and Notifications: In the event that a potential secret is committed to the repository, an alert is generated. These alerts are reviewed and addressed swiftly by our security team.\n- Prevention and Education: We continuously educate our contributors about best practices in handling secrets and sensitive data. We encourage the use of environment variables and secure vaults for managing secrets.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpack",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "init_repo.sh",
          "type": "blob",
          "size": 2.263671875,
          "content": "#!/bin/bash -e\n\n# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# SDIR is the directory where this script is located\nSDIR=$(dirname \"$(readlink -f \"$0\")\")\n\ndistro_name=$(lsb_release -is || true)\ndistro_ver=$(lsb_release -rs || true)\n\nfunction version_le()\n{\n    [[ $(echo -e \"$1\\n$2\" | sort -V | head -n1) = \"$1\" ]] && echo true\n}\n\nskip_precommit=0\n\nif ! which pre-commit || ! which shellcheck ; then\n    echo 'pre-commit must be fully configured.'\n    if [[ \"$distro_name\" = \"Ubuntu\" ]]; then\n        if [[ $(version_le \"$distro_ver\" \"18.04\") ]]; then\n            echo \"Ubuntu v$distro_ver is too old, you need at least Ubuntu 20.04.\"\n            skip_precommit=1\n        elif [[ $(version_le \"$distro_ver\" \"21.10\") ]]; then\n            echo \"Try 'sudo apt-get install -y pip shellcheck && sudo pip install pre-commit'.\"\n            exit 1\n        else\n            echo \"Try 'sudo apt-get install -y pre-commit shellcheck'.\"\n            exit 1\n        fi\n    else\n        echo \"For linting support, install pre-commit and shellcheck packaged from your distro\"\n        skip_precommit=1\n    fi\nfi\n\nif ! which git-lfs ; then\n    echo \"git-lfs must be fully configured. Try 'apt-get install git-lfs'.\"\n    exit 1\nfi\n\ncd \"$SDIR\"\n\n# We use LFS\ngit lfs install\n\n# Fetch all lfs object\ngit lfs fetch && git lfs checkout\n\n# We use submodules\ngit submodule update --init\n\nif [ \"$skip_precommit\" -ne 1 ]; then\n    # allow-missing-config is useful when checking out an old commit or a branch that don't have pre-config configuration.\n    pre-commit install \\\n        --allow-missing-config \\\n        --install-hooks \\\n        -t pre-commit \\\n        -t pre-merge-commit \\\n        -t commit-msg\nfi\n"
        },
        {
          "name": "print_env.sh",
          "type": "blob",
          "size": 2.298828125,
          "content": "#!/usr/bin/env bash\n\n# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Usage:\n# \"./print_env.sh\" - prints to stdout\n# \"./print_env.sh > env.txt\" - prints to file \"env.txt\"\n\nprint_env() {\necho \"**git***\"\nif [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" == \"true\" ]; then\ngit log --decorate -n 1\necho \"**git submodules***\"\ngit submodule status --recursive\nelse\necho \"Not inside a git repository\"\nfi\necho\n\necho \"***OS Information***\"\ncat /etc/*-release\nuname -a\necho\n\necho \"***GPU Information***\"\nnvidia-smi\necho\n\necho \"***CPU***\"\nlscpu\necho\n\necho \"***CMake***\"\nwhich cmake && cmake --version\necho\n\necho \"***g++***\"\nwhich g++ && g++ --version\necho\n\necho \"***nvcc***\"\nwhich nvcc && nvcc --version\necho\n\necho \"***Python***\"\nwhich python && python -c \"import sys; print('Python {0}.{1}.{2}'.format(sys.version_info[0], sys.version_info[1], sys.version_info[2]))\"\necho\n\necho \"***Environment Variables***\"\n\nprintf '%-32s: %s\\n' PATH $PATH\n\nprintf '%-32s: %s\\n' LD_LIBRARY_PATH $LD_LIBRARY_PATH\n\nprintf '%-32s: %s\\n' NUMBAPRO_NVVM $NUMBAPRO_NVVM\n\nprintf '%-32s: %s\\n' NUMBAPRO_LIBDEVICE $NUMBAPRO_LIBDEVICE\n\nprintf '%-32s: %s\\n' CONDA_PREFIX $CONDA_PREFIX\n\nprintf '%-32s: %s\\n' PYTHON_PATH $PYTHON_PATH\n\necho\n\n\n# Print conda packages if conda exists\nif type \"conda\" &> /dev/null; then\necho '***conda packages***'\nwhich conda && conda list\necho\n# Print pip packages if pip exists\nelif type \"pip\" &> /dev/null; then\necho \"conda not found\"\necho \"***pip packages***\"\nwhich pip && pip list\necho\nelse\necho \"conda not found\"\necho \"pip not found\"\nfi\n}\n\necho \"<details><summary>Click here to see environment details</summary><pre>\"\necho \"     \"\nprint_env | while read -r line; do\n    echo \"     $line\"\ndone\necho \"</pre></details>\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}