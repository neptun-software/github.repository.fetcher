{
  "metadata": {
    "timestamp": 1736565475395,
    "page": 331,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ton-blockchain/ton",
      "stars": 3176,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.63671875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None # All\nAllowShortIfStatementsOnASingleLine: false # true\nAllowShortLoopsOnASingleLine: false # true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: true # false\n# BreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120 # 80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\n# ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\n# ObjCBlockIndentWidth: 2\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  false # true\nSortIncludes: false # disabled, because we need case insensitive sort\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        100 # 8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".clang_complete",
          "type": "blob",
          "size": 0.1865234375,
          "content": "-xc++\n-std=c++17\n-iquote .\n-iquote tdtl/\n-iquote tl/\n-iquote tl/generate/\n-iquote tdactor/\n-iquote tdnet/\n-iquote tdutils/\n-iquote ../ton-build/tdutils/\n-iquote crypto/\n-I/opt/local/include/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1123046875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.1923828125,
          "content": "* text=auto\n\n*.cpp text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.hpp text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.h text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.c text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.fc text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.fif text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.tl text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.tlb text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.txt text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.sh text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent eol=lf\n*.cmake text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.in text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.tex text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.py text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n\n*.ans text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.bat text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent eol=crlf\n*.fp text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.gradle text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.java text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.kt text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.md text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.php text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.pro text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.properties text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.ps1 text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent eol=crlf\n*.xml text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.yml text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n\nthird_party/** linguist-vendored\n\n*.a binary\n*.jar binary\n*.tlo binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4423828125,
          "content": "__pycache__\nparser.out\nparsetab.py\nparsetab.pyc\ntdutils/generate/auto/\ntl/generate/auto/\ncompile_commands.json\ncrypto/block/block-auto.cpp\ncrypto/block/block-auto.h\ncrypto/smartcont/auto/\ntest/regression-tests.cache/\n*.swp\n**/*build*/\n.idea\n.vscode\n.DS_Store\ndev/\nzlib/\nlibsodium/\nlibmicrohttpd-0.9.77-w32-bin/\nreadline-5.0-1-lib/\nopenssl-3.1.4/\nlibsodium-1.0.18-stable-msvc.zip\nlibmicrohttpd-0.9.77-w32-bin.zip\nopenssl-3.1.4.zip\nreadline-5.0-1-lib.zip\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.666015625,
          "content": "[submodule \"third-party/rocksdb\"]\n\tpath = third-party/rocksdb\n\turl = https://github.com/facebook/rocksdb.git\n[submodule \"third-party/crc32c\"]\n\tpath = third-party/crc32c\n\turl = https://github.com/google/crc32c\n[submodule \"third-party/abseil-cpp\"]\n\tpath = third-party/abseil-cpp\n\turl = https://github.com/abseil/abseil-cpp.git\n[submodule \"third-party/libraptorq\"]\n\tpath = third-party/libraptorq\n\turl = https://github.com/ton-blockchain/libRaptorQ\n[submodule \"third-party/blst\"]\n\tpath = third-party/blst\n\turl = https://github.com/supranational/blst.git\n[submodule \"third-party/secp256k1\"]\n\tpath = third-party/secp256k1\n\turl = https://github.com/bitcoin-core/secp256k1\n\tbranch = v0.3.2\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 23.0283203125,
          "content": "cmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(TON VERSION 0.5 LANGUAGES C CXX)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n#set(OPENSSL_USE_STATIC_LIBS TRUE)\n\n# Define the two required variables before including the source code for watching a git repository.\nset(PRE_CONFIGURE_FILE \"git.cc.in\")\nset(POST_CONFIGURE_FILE \"${CMAKE_CURRENT_BINARY_DIR}/git.cc\")\ninclude(git_watcher.cmake)\n\n# Create a library out of the compiled post-configure file.\nadd_library(git STATIC ${POST_CONFIGURE_FILE})\ntarget_include_directories(git PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\nadd_dependencies(git check_git)\n\n# Prevent in-source build\nget_filename_component(TON_REAL_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\" REALPATH)\nget_filename_component(TON_REAL_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\" REALPATH)\n\nif (TON_REAL_BINARY_DIR STREQUAL TON_REAL_SOURCE_DIR)\n  message(\"  Out-of-source build should be used to build TON.\")\n  message(\"  You need to remove the files already created by CMake and\")\n  message(\"  rerun CMake from a new directory:\")\n  message(\"  rm -rf CMakeFiles CMakeCache.txt\")\n  message(\"  mkdir build\")\n  message(\"  cd build\")\n  message(\"  cmake ..\")\n  message(FATAL_ERROR \"In-source build failed.\")\nendif()\n\n# HAVE_SSE42 for crc32c and rocksdb\ninclude(CheckCXXSourceCompiles)\n# Check for SSE4.2 support in the compiler.\nset(OLD_CMAKE_REQURED_FLAGS ${CMAKE_REQUIRED_FLAGS})\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} /arch:AVX\")\nelse(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -msse4.2\")\nendif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\ncheck_cxx_source_compiles(\"\n#if defined(_MSC_VER)\n#include <intrin.h>\n#else  // !defined(_MSC_VER)\n#include <cpuid.h>\n#include <nmmintrin.h>\n#endif  // defined(_MSC_VER)\n\nint main() {\n  _mm_crc32_u8(0, 0); _mm_crc32_u32(0, 0);\n#if defined(_M_X64) || defined(__x86_64__)\n   _mm_crc32_u64(0, 0);\n#endif // defined(_M_X64) || defined(__x86_64__)\n  return 0;\n}\n\"  CRC32C_HAVE_SSE42)\nset(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQURED_FLAGS})\n\nif(NOT MSVC)\n  set(CMAKE_REQUIRED_FLAGS \"-msse4.2 -mpclmul\")\nendif()\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <cstdint>\n#include <nmmintrin.h>\n#include <wmmintrin.h>\nint main() {\n  volatile uint32_t x = _mm_crc32_u32(0, 0);\n  const auto a = _mm_set_epi64x(0, 0);\n  const auto b = _mm_set_epi64x(0, 0);\n  const auto c = _mm_clmulepi64_si128(a, b, 0x00);\n  auto d = _mm_cvtsi128_si64(c);\n}\n\" ROCKSDB_HAVE_SSE42)\nunset(CMAKE_REQUIRED_FLAGS)\n\nif (ROCKSDB_HAVE_SSE42 AND CRC32C_HAVE_SSE42)\n  set(HAVE_SSE42 TRUE)\nelse()\n  set(HAVE_SSE42 FALSE)\nendif()\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS FALSE)\n\n#BEGIN internal\noption(USE_EMSCRIPTEN \"Use \\\"ON\\\" for config building wasm.\" OFF)\noption(TON_ONLY_TONLIB \"Use \\\"ON\\\" to build only tonlib.\" OFF)\nif (USE_EMSCRIPTEN)\n  set(TON_ONLY_TONLIB true)\nendif()\nif (TON_ONLY_TONLIB)\n  set(NOT_TON_ONLY_TONLIB false)\nelse()\n  set(NOT_TON_ONLY_TONLIB true)\nendif()\noption(TON_USE_ROCKSDB \"Use \\\"ON\\\" to enable RocksDb.\" ${NOT_TON_ONLY_TONLIB})\noption(TON_USE_ABSEIL \"Use \\\"ON\\\" to enable Abseil.\" ${NOT_TON_ONLY_TONLIB})\noption(TON_USE_JEMALLOC \"Use \\\"ON\\\" to enable JeMalloc.\" OFF)\n#END internal\n\noption(TONLIB_ENABLE_JNI \"Use \\\"ON\\\" to enable JNI-compatible TonLib API.\")\noption(TON_USE_ASAN \"Use \\\"ON\\\" to enable AddressSanitizer.\" OFF)\noption(TON_USE_TSAN \"Use \\\"ON\\\" to enable ThreadSanitizer.\" OFF)\noption(TON_USE_UBSAN \"Use \\\"ON\\\" to enable UndefinedBehaviorSanitizer.\" OFF)\nset(TON_ARCH \"native\" CACHE STRING \"Architecture, will be passed to -march=\")\n\n#BEGIN M1 support\nEXECUTE_PROCESS( COMMAND uname -m COMMAND tr -d '\\n' OUTPUT_VARIABLE ARCHITECTURE )\n\nif ((ARCHITECTURE MATCHES \"arm64\") AND (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\") AND\n    (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 13.0)) # only clang 13+ supports cpu=apple-m1\n    set(TON_ARCH \"apple-m1\")\nendif()\n#END M1 support\n\nif (TON_USE_ABSEIL)\n  message(\"Add abseil-cpp\")\n  set(ABSL_PROPAGATE_CXX_STD TRUE)\n  add_subdirectory(third-party/abseil-cpp EXCLUDE_FROM_ALL)\n  set(ABSL_FOUND 1)\nendif()\n\n#add_subdirectory(third-party/libcuckoo EXCLUDE_FROM_ALL)\n#add_subdirectory(third-party/junction EXCLUDE_FROM_ALL)\n\nif (WIN32)\n  message(\"Add wingetopt\")\n  add_subdirectory(third-party/wingetopt EXCLUDE_FROM_ALL)\n  set(WINGETOPT_FOUND 1)\n  message(STATUS \"Use wingetopt\")\nendif()\n\nset(CRC32C_BUILD_TESTS OFF CACHE BOOL \"Build CRC32C's unit tests\")\nset(CRC32C_BUILD_BENCHMARKS OFF CACHE BOOL \"Build CRC32C's benchmarks\")\nset(CRC32C_USE_GLOG OFF CACHE BOOL \"Build CRC32C's tests with Google Logging\")\nset(CRC32C_INSTALL OFF CACHE BOOL \"Install CRC32C's header and library\")\nmessage(\"Add crc32c\")\nif (NOT MSVC)\n  set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})\n  # fix aarch64 build @ crc32c/src/crc32c_arm64_linux_check.h\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-error=address\")\n  add_subdirectory(third-party/crc32c EXCLUDE_FROM_ALL)\n  set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})\n  unset(OLD_CMAKE_CXX_FLAGS)\nelse()\n  add_subdirectory(third-party/crc32c EXCLUDE_FROM_ALL)\nendif()\nset(CRC32C_FOUND 1)\n\nif (TON_USE_ROCKSDB)\n  if (ANDROID)\n    set(PORTABLE ON CACHE BOOL \"portable\")\n  endif()\n  set(WITH_GFLAGS OFF CACHE BOOL \"build with GFlags\")\n  set(WITH_TESTS OFF CACHE BOOL \"build with tests\")\n  set(WITH_TOOLS OFF CACHE BOOL \"build with tools\")\n  set(FAIL_ON_WARNINGS OFF CACHE BOOL \"fail on warnings\")\n  message(\"Add rocksdb\")\n  add_subdirectory(third-party/rocksdb EXCLUDE_FROM_ALL)\nendif()\n\noption(USE_COROUTINES \"experimental support of coroutines\" OFF)\nif (USE_COROUTINES)\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    set(TD_HAVE_COROUTINES 1)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcoroutines-ts\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n  endif()\nendif()\n\noption(USE_LIBRAPTORQ \"use libraptorq for tests\" OFF)\nif (USE_LIBRAPTORQ)\n  set(USE_LZ4 OFF CACHE BOOL \"use lz4\")\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    set(CLANG_STDLIB \"ON\") # for libraptorq\n  endif()\n  message(\"Add libraptorq\")\n  add_subdirectory(third-party/libraptorq EXCLUDE_FROM_ALL)\nendif()\n\nmessage(\"Add ton\")\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\" ${CMAKE_MODULE_PATH})\n\ninclude(BuildBLST)\ninclude(BuildSECP256K1)\n\n# Configure CCache if available\nfind_program(CCACHE_FOUND ccache)\n#set(CCACHE_FOUND 0)\nif (CCACHE_FOUND)\n  message(STATUS \"Found ccache\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nelse()\n  message(STATUS \"Could NOT find ccache\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  set(GCC 1)\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CLANG 1)\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  set(INTEL 1)\nelseif (NOT MSVC)\n  message(FATAL_ERROR \"Compiler isn't supported\")\nendif()\n\ninclude(CheckCXXCompilerFlag)\n\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nfind_package(PkgConfig REQUIRED)\n\nif (NOT ZLIB_FOUND)\n  find_package(ZLIB REQUIRED)\nelse()\n  message(STATUS \"Using zlib ${ZLIB_LIBRARIES}\")\nendif()\n\n\nif (TON_ARCH AND NOT MSVC)\n  CHECK_CXX_COMPILER_FLAG( \"-march=${TON_ARCH}\" COMPILER_OPT_ARCH_SUPPORTED )\n  if (TON_ARCH STREQUAL \"apple-m1\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=${TON_ARCH}\")\t\n  elseif(COMPILER_OPT_ARCH_SUPPORTED)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=${TON_ARCH}\")\n  elseif(NOT TON_ARCH STREQUAL \"native\")\n    message(FATAL_ERROR \"Compiler doesn't support arch ${TON_ARCH}\")\n  endif()\nendif()\nif (THREADS_HAVE_PTHREAD_ARG)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\nendif()\n\nif (TON_USE_JEMALLOC)\n  find_package(jemalloc REQUIRED)\nendif()\n\nif (NIX)\n  find_package(Secp256k1 REQUIRED)\nendif()\n\n\nset(MEMPROF \"\" CACHE STRING \"Use one of \\\"ON\\\", \\\"FAST\\\" or \\\"SAFE\\\" to enable memory profiling. \\\nWorks under macOS and Linux when compiled using glibc. \\\nIn FAST mode stack is unwinded only using frame pointers, which may fail. \\\nIn SAFE mode stack is unwinded using backtrace function from execinfo.h, which may be very slow. \\\nBy default both methods are used to achieve maximum speed and accuracy\")\n\nif (CLANG OR GCC)\n  if (MEMPROF)\n    check_cxx_compiler_flag(-no-pie CXX_NO_PIE_FLAG)\n    if (CXX_NO_PIE_FLAG)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -no-pie\")\n    elseif (APPLE)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-no_pie\")\n    endif()\n  endif()\nendif()\n\nif (MSVC)\n  if (CMAKE_CXX_FLAGS_DEBUG MATCHES \"/RTC1\")\n    string(REPLACE \"/RTC1\" \" \" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n  endif()\n  add_definitions(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP /W4 /wd4100 /wd4127 /wd4324 /wd4456 /wd4457 /wd4458 /wd4505 /wd4702\")\nelseif (CLANG OR GCC)\n  if (GCC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fstrong-eval-order=some\")\n  endif()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer\")\n  if (APPLE)\n    #use \"-Wl,-exported_symbols_list,${CMAKE_CURRENT_SOURCE_DIR}/export_list\" for exported symbols\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fvisibility=hidden -Wl,-dead_strip,-x,-S\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} -fvisibility=hidden -Wl,-dead_strip,-x,-S\")\n  else()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ffunction-sections -fdata-sections\")\n    if (NOT USE_EMSCRIPTEN)\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--gc-sections -Wl,--exclude-libs,ALL\")\n    endif()\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections\")\n    if (NOT TON_USE_ASAN AND NOT TON_USE_TSAN AND NOT MEMPROF)\n      if (NOT USE_EMSCRIPTEN)\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--exclude-libs,ALL\")\n      endif()\n    endif()\n  endif()\nendif()\n\nif (WIN32)\n  add_definitions(-DNTDDI_VERSION=0x06020000 -DWINVER=0x0602 -D_WIN32_WINNT=0x0602 -DNOMINMAX -DUNICODE -D_UNICODE)\nendif()\nif (CYGWIN)\n  add_definitions(-D_DEFAULT_SOURCE=1 -DFD_SETSIZE=4096)\nendif()\n\nif (NOT ANDROID) # _FILE_OFFSET_BITS is broken in ndk r15 and r15b and doesn't work prior to Android 7.0\n  add_definitions(-D_FILE_OFFSET_BITS=64)\nendif()\n\nset(INTERNAL_COMPILE \"0\")\n#BEGIN internal\n  add_definitions(-D_INTERNAL_COMPILE=1)\n  set(INTERNAL_COMPILE \"1\")\n#END internal\n\nset(TONLIB_COMPILE \"0\")\n#BEGIN tonlib\n  add_definitions(-D_TONLIB_COMPILE=1)\n  set(TONLIB_COMPILE \"1\")\n#END tonlib\n\ninclude(AddCXXCompilerFlag)\nif (MSVC)\n  add_cxx_compiler_flag(\"/experimental:external /external:anglebrackets /external:W0\")\nendif()\nif (NOT MSVC)\n  add_cxx_compiler_flag(\"-Wall\")\n  add_cxx_compiler_flag(\"-Wextra\")\nendif()\n\nadd_cxx_compiler_flag(\"-Wimplicit-fallthrough=2\")\nadd_cxx_compiler_flag(\"-Wpointer-arith\")\nadd_cxx_compiler_flag(\"-Wcast-qual\")\nadd_cxx_compiler_flag(\"-Wsign-compare\")\nadd_cxx_compiler_flag(\"-Wduplicated-branches\")\nadd_cxx_compiler_flag(\"-Wduplicated-cond\")\nadd_cxx_compiler_flag(\"-Walloc-zero\")\nadd_cxx_compiler_flag(\"-Wlogical-op\")\nadd_cxx_compiler_flag(\"-Wno-tautological-compare\")\nadd_cxx_compiler_flag(\"-Wpointer-arith\")\nadd_cxx_compiler_flag(\"-Wvla\")\nadd_cxx_compiler_flag(\"-Wnon-virtual-dtor\")\nadd_cxx_compiler_flag(\"-Wno-unused-parameter\")\nadd_cxx_compiler_flag(\"-Wconversion\")\nadd_cxx_compiler_flag(\"-Wno-sign-conversion\")\nadd_cxx_compiler_flag(\"-Qunused-arguments\")\nadd_cxx_compiler_flag(\"-Wno-unused-private-field\")\nadd_cxx_compiler_flag(\"-Wno-redundant-move\")\n\n#add_cxx_compiler_flag(\"-Wno-unused-function\")\n#add_cxx_compiler_flag(\"-Wno-unused-variable\")\n#add_cxx_compiler_flag(\"-Wno-shorten-64-to-32\")\n#add_cxx_compiler_flag(\"-Werror\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -isystem /usr/include/c++/v1\")\nif (CLANG)\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\nendif()\nif (TON_USE_ASAN)\n  if (CLANG)\n    add_cxx_compiler_flag(\"-stdlib=libc++\")\n  endif()\n  add_cxx_compiler_flag(\"-fsanitize=address\")\n  add_definitions(-DTD_USE_ASAN=1)\nendif()\nif (TON_USE_TSAN)\n  if (CLANG)\n    add_cxx_compiler_flag(\"-stdlib=libc++\")\n  endif()\n  add_cxx_compiler_flag(\"-fsanitize=thread\")\nendif()\nif (TON_USE_UBSAN)\n  if (CLANG)\n    add_cxx_compiler_flag(\"-stdlib=libc++\")\n  endif()\n  add_cxx_compiler_flag(\"-fsanitize=undefined\")\nendif()\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread\")\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=leak\")\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -finstrument-functions\")\n\n#Compilation database\nset(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n\n#BEGIN internal\nfind_package(LATEX)\nif (LATEX_FOUND)\n  include(UseLATEX)\n  add_latex_document(doc/ton.tex TARGET_NAME ton_white_paper)\n  add_latex_document(doc/tvm.tex TARGET_NAME ton_vm_description)\n  add_latex_document(doc/tblkch.tex TARGET_NAME ton_blockchain_description)\n  add_latex_document(doc/fiftbase.tex TARGET_NAME fift_basic_description)\n  add_latex_document(doc/catchain.tex TARGET_NAME catchain_consensus_description)\nendif()\nif (NOT LATEX_FOUND)\n  message(STATUS \"Could NOT find LATEX (this is NOT an error)\")\nendif()\n#END internal\n\nfunction(target_link_libraries_system target)\n  set(libs ${ARGN})\n  foreach(lib ${libs})\n    get_target_property(lib_include_dirs ${lib} INTERFACE_INCLUDE_DIRECTORIES)\n    target_include_directories(${target} SYSTEM PUBLIC ${lib_include_dirs})\n    target_link_libraries(${target} PUBLIC ${lib})\n  endforeach(lib)\nendfunction(target_link_libraries_system)\n\nset(TDUTILS_MIME_TYPE OFF CACHE BOOL \"Generate mime type conversion\")\nadd_subdirectory(tdutils)\nadd_subdirectory(memprof)\nadd_subdirectory(tdactor)\nadd_subdirectory(tdnet)\nif (TON_USE_ROCKSDB)\n  option(TDDB_USE_ROCKSDB \"Use rockdb\" ON)\nendif()\nadd_subdirectory(tddb)\nadd_subdirectory(tdtl)\nadd_subdirectory(tl)\nadd_subdirectory(terminal)\nadd_subdirectory(keys)\nadd_subdirectory(tl-utils)\nadd_subdirectory(adnl)\nadd_subdirectory(crypto)\nadd_subdirectory(lite-client)\nadd_subdirectory(emulator)\nadd_subdirectory(tolk)\n\n#BEGIN tonlib\nadd_subdirectory(tonlib)\n#END tonlib\n\n#BEGIN internal\nif (NOT TON_ONLY_TONLIB)\nadd_subdirectory(common)\nadd_subdirectory(tdfec)\nadd_subdirectory(keyring)\nadd_subdirectory(fec)\nadd_subdirectory(rldp)\nadd_subdirectory(rldp2)\nadd_subdirectory(dht)\nadd_subdirectory(overlay)\nadd_subdirectory(catchain)\nadd_subdirectory(validator-session)\nadd_subdirectory(validator)\nadd_subdirectory(blockchain-explorer)\nadd_subdirectory(storage)\nadd_subdirectory(validator-engine)\nadd_subdirectory(validator-engine-console)\nadd_subdirectory(create-hardfork)\nadd_subdirectory(dht-server)\nadd_subdirectory(utils)\nadd_subdirectory(http)\nadd_subdirectory(rldp-http-proxy)\nendif()\n#END internal\n\nif (NOT CMAKE_CROSSCOMPILING)\n  if (TDUTILS_MIME_TYPE)\n    set(TDMIME_AUTO tdmime_auto)\n  endif()\n  add_custom_target(prepare_cross_compiling DEPENDS tl_generate_common tlb_generate_block gen_fif ${TDMIME_AUTO})\nendif()\n\n#TESTS\nadd_executable(test-ed25519 test/test-td-main.cpp ${ED25519_TEST_SOURCE})\ntarget_link_libraries(test-ed25519 PRIVATE ton_crypto)\n\nadd_executable(test-vm test/test-td-main.cpp ${TONVM_TEST_SOURCE})\ntarget_link_libraries(test-vm PRIVATE ton_crypto fift-lib)\n\nadd_executable(test-smartcont test/test-td-main.cpp ${SMARTCONT_TEST_SOURCE})\ntarget_link_libraries(test-smartcont PRIVATE smc-envelope fift-lib ton_db)\n\nadd_executable(test-bigint ${BIGINT_TEST_SOURCE})\ntarget_link_libraries(test-bigint PRIVATE ton_crypto)\n\nif (WINGETOPT_FOUND)\n  target_link_libraries_system(test-bigint wingetopt)\nendif()\n\nadd_executable(test-cells test/test-td-main.cpp ${CELLS_TEST_SOURCE})\ntarget_link_libraries(test-cells PRIVATE ton_crypto)\n\nadd_executable(test-fift test/test-td-main.cpp ${FIFT_TEST_SOURCE})\ntarget_link_libraries(test-fift PRIVATE fift-lib)\n\nadd_executable(test-tdutils test/test-td-main.cpp ${TDUTILS_TEST_SOURCE})\ntarget_link_libraries(test-tdutils PRIVATE tdutils ${CMAKE_THREAD_LIBS_INIT} memprof ${JEMALLOC_LIBRARIES})\n#target_link_libraries_system(test-tdutils absl::base absl::container absl::hash )\n#target_link_libraries_system(test-tdutils libcuckoo)\n#target_include_directories(test-tdutils PRIVATE SYSTEM ${JUNCTION_ALL_INCLUDE_DIRS})\n#target_link_libraries(test-tdutils PRIVATE ${JUNCTION_ALL_LIBRARIES})\n\nadd_executable(test-tdactor test/test-td-main.cpp ${TDACTOR_TEST_SOURCE})\ntarget_link_libraries(test-tdactor PRIVATE tdactor ${CMAKE_THREAD_LIBS_INIT})\n\nadd_executable(test-net test/test-td-main.cpp ${NET_TEST_SOURCE})\ntarget_link_libraries(test-net PRIVATE tdnet tdutils ${CMAKE_THREAD_LIBS_INIT})\n\n#BEGIN tonlib\nadd_executable(test-tonlib ${TONLIB_ONLINE_TEST_SOURCE})\ntarget_link_libraries(test-tonlib tdactor adnllite tl_api ton_crypto tl_tonlib_api tonlib)\n\nadd_executable(test-tonlib-offline test/test-td-main.cpp ${TONLIB_OFFLINE_TEST_SOURCE})\ntarget_link_libraries(test-tonlib-offline tdactor adnllite tl_api ton_crypto fift-lib tl_tonlib_api tonlib)\n\nif (NOT CMAKE_CROSSCOMPILING)\n  add_dependencies(test-tonlib-offline gen_fif)\nendif()\n#END tonlib\n\n#BEGIN internal\nif (NOT TON_ONLY_TONLIB)\nadd_executable(test-db test/test-td-main.cpp ${TONDB_TEST_SOURCE})\ntarget_link_libraries(test-db PRIVATE ton_db memprof tdfec)\n\nadd_executable(test-storage test/test-td-main.cpp ${STORAGE_TEST_SOURCE})\ntarget_link_libraries(test-storage PRIVATE storage ton_db memprof tl_api tl-utils fec rldp2)\n\nadd_executable(test-rocksdb test/test-rocksdb.cpp)\ntarget_link_libraries(test-rocksdb PRIVATE memprof tddb tdutils)\n\nadd_executable(test-tddb test/test-td-main.cpp ${TDDB_TEST_SOURCE})\ntarget_link_libraries(test-tddb PRIVATE tdutils tddb ${CMAKE_THREAD_LIBS_INIT} memprof)\n\nadd_executable(test-fec test/test-td-main.cpp ${FEC_TEST_SOURCE})\ntarget_link_libraries(test-fec PRIVATE tdfec tdutils ${CMAKE_THREAD_LIBS_INIT})\nif (USE_LIBRAPTORQ)\n  target_link_libraries(test-fec PRIVATE third_party_fec)\n  target_compile_definitions(test-fec PRIVATE \"USE_LIBRAPTORQ=1\")\nendif()\n\nadd_executable(test-hello-world test/test-hello-world.cpp )\ntarget_link_libraries(test-hello-world tl_api ton_crypto)\n\nadd_executable(test-adnl test/test-adnl.cpp)\ntarget_link_libraries(test-adnl adnl adnltest dht tl_api)\nadd_executable(test-dht test/test-dht.cpp)\ntarget_link_libraries(test-dht adnl adnltest dht tl_api)\nadd_executable(test-rldp test/test-rldp.cpp)\ntarget_link_libraries(test-rldp adnl adnltest dht rldp tl_api)\nadd_executable(test-rldp2 test/test-rldp2.cpp)\ntarget_link_libraries(test-rldp2 adnl adnltest dht rldp2 tl_api)\nadd_executable(test-validator-session-state test/test-validator-session-state.cpp)\ntarget_link_libraries(test-validator-session-state adnl dht rldp validatorsession tl_api)\n\nadd_executable(test-overlay test/test-overlay.cpp)\ntarget_link_libraries(test-overlay overlay tdutils tdactor adnl adnltest tl_api dht )\nadd_executable(test-catchain test/test-catchain.cpp)\ntarget_link_libraries(test-catchain overlay tdutils tdactor adnl adnltest rldp tl_api dht\n  catchain )\nadd_executable(test-ton-collator test/test-ton-collator.cpp)\ntarget_link_libraries(test-ton-collator overlay tdutils tdactor adnl tl_api dht\n  catchain validatorsession validator-disk ton_validator validator-disk )\n\nadd_executable(test-http test/test-http.cpp)\ntarget_link_libraries(test-http PRIVATE tonhttp)\n\nadd_executable(test-emulator test/test-td-main.cpp emulator/test/emulator-tests.cpp)\ntarget_link_libraries(test-emulator PRIVATE emulator)\n\nget_directory_property(HAS_PARENT PARENT_DIRECTORY)\nif (HAS_PARENT)\n  set(ALL_TEST_SOURCE\n          ${TDUTILS_TEST_SOURCE}\n          ${TDACTOR_TEST_SOURCE}\n          ${NET_TEST_SOURCE}\n          ${TDDB_TEST_SOURCE}\n          ${FEC_TEST_SOURCE}\n          ${ED25519_TEST_SOURCE}\n          ${TONDB_TEST_SOURCE}\n          ${BIGNUM_TEST_SOURCE}\n          ${CELLS_TEST_SOURCE} # ${TONVM_TEST_SOURCE} ${FIFT_TEST_SOURCE} ${TONLIB_ONLINE_TEST_SOURCE}\n          PARENT_SCOPE)\nendif()\nadd_library(all_tests INTERFACE)\ntarget_link_libraries(all_tests INTERFACE tdutils tdactor tdnet tdfec ton_db ton_crypto fift-lib)\nendif()\n#END internal\n\nenable_testing()\nset(TEST_OPTIONS \"--regression ${CMAKE_CURRENT_SOURCE_DIR}/test/regression-tests.ans --filter -Bench\")\nseparate_arguments(TEST_OPTIONS)\nadd_test(test-ed25519-crypto crypto/test-ed25519-crypto)\nadd_test(test-ed25519 test-ed25519)\nadd_test(test-bigint test-bigint)\nadd_test(test-vm test-vm ${TEST_OPTIONS})\nadd_test(test-fift test-fift ${TEST_OPTIONS})\nadd_test(test-cells test-cells ${TEST_OPTIONS})\nadd_test(test-smartcont test-smartcont)\nadd_test(test-net test-net)\nadd_test(test-actors test-tdactor)\nadd_test(test-emulator test-emulator)\n\n#BEGIN tonlib\nadd_test(test-tdutils test-tdutils)\nadd_test(test-tonlib-offline test-tonlib-offline)\n#END tonlib\n\n# FunC tests\nif (NOT NIX)\n    if (MSVC)\n      set(PYTHON_VER \"python\")\n    else()\n      set(PYTHON_VER \"python3\")\n    endif()\n    add_test(\n      NAME test-func\n      COMMAND ${PYTHON_VER} run_tests.py tests/\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/crypto/func/auto-tests)\n    if (WIN32)\n        set_property(TEST test-func PROPERTY ENVIRONMENT\n          \"FUNC_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/func.exe\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift.exe\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    else()\n        set_property(TEST test-func PROPERTY ENVIRONMENT\n          \"FUNC_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/func\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    endif()\n\n    add_test(\n      NAME test-func-legacy\n      COMMAND ${PYTHON_VER} legacy_tester.py\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/crypto/func/auto-tests)\n    if (WIN32)\n        set_property(TEST test-func-legacy PROPERTY ENVIRONMENT\n          \"FUNC_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/func.exe\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift.exe\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    else()\n        set_property(TEST test-func-legacy PROPERTY ENVIRONMENT\n          \"FUNC_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/func\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    endif()\nendif()\n\n# Tolk tests\nif (NOT NIX)\n    if (MSVC)\n      set(PYTHON_VER \"python\")\n    else()\n      set(PYTHON_VER \"python3\")\n    endif()\n    add_test(\n      NAME test-tolk\n      COMMAND ${PYTHON_VER} tolk-tester.py tests/\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tolk-tester)\n    if (WIN32)\n        set_property(TEST test-tolk PROPERTY ENVIRONMENT\n          \"TOLK_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/tolk/tolk.exe\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift.exe\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    else()\n        set_property(TEST test-tolk PROPERTY ENVIRONMENT\n          \"TOLK_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/tolk/tolk\"\n          \"FIFT_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/crypto/fift\"\n          \"FIFTPATH=${CMAKE_CURRENT_SOURCE_DIR}/crypto/fift/lib/\")\n    endif()\nendif()\n\n#BEGIN internal\nif (NOT TON_ONLY_TONLIB)\nadd_test(test-adnl test-adnl)\nadd_test(test-dht test-dht)\nadd_test(test-rldp test-rldp)\nadd_test(test-rldp2 test-rldp2)\nadd_test(test-validator-session-state test-validator-session-state)\nadd_test(test-catchain test-catchain)\n\nadd_test(test-fec test-fec)\nadd_test(test-tddb test-tddb ${TEST_OPTIONS})\nadd_test(test-db test-db ${TEST_OPTIONS})\nendif()\n#END internal\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 18.24609375,
          "content": "## 2024.12 Update\n\n1. FunC 0.4.6: Fix in try/catch handling, fixing pure flag for functions stored in variables\n2. Merging parts of Accelerator: support of specific shard monitoring, archive/liteserver slice format, support for partial liteservers, proxy liteserver, on-demand neighbour queue loading\n3. Fix of asynchronous cell loading\n4. Various improvements: caching certificates checks, better block overloading detection, `_malloc` in emulator\n5. Introduction of telemetry in overlays\n6. Use non-null local-id for tonlib-LS interaction - mitigates MitM attack.\n7. Adding `SECP256K1_XONLY_PUBKEY_TWEAK_ADD`, `SETCONTCTRMANY` instructions to TVM (activated by `Config8.version >= 9`)\n8. Private keys export via validator-engine-console - required for better backups\n9. Fix proof checking in tonlib, `hash` in `raw.Message` in tonlib_api\n\nBesides the work of the core team, this update is based on the efforts of OtterSec and LayerZero (FunC), tg:@throwunless (FunC), Aviv Frenkel and Dima Kogan from Fordefi (LS MitM), @hacker-volodya (Tonlib), OKX team (async cell loading), @krigga (emulator)\n\n## 2024.10 Update\n\n1. Parallel write to celldb: substantial improvement of sync and GC speed, especially with slow disks.\n2. Decreased network traffic: only first block candidate is sent optimistically.\n3. Improved channel creation and dht lookups, introduction of semi-private overlays\n4. New LS dispatch queue related methods and improvement security\n5. Fixing recursion in TVM continuations\n6. Improved stats for actors, validator sessions, perf counters, overlays, adnl, rocksdb\n7. Migration to C++20\n8. Improved block size estimates: account for depth in various structures\n9. Fix bug with `<<` optimization in FunC\n10. Minor changes of TVM which will be activated by `Config8.version >= 9`\n11. Multiple minor improvements\n\nBesides the work of the core team, this update is based on the efforts of @krigga (emulator), Arayz @ TonBit (LS security, TVM recursion), @ret2happy (UB in BLST).\n\n## 2024.08 Update\n\n1. Introduction of dispatch queues, message envelopes with transaction chain metadata, and explicitly stored msg_queue size, which will be activated by `Config8.version >= 8` and new `Config8.capabilities` bits: `capStoreOutMsgQueueSize`, `capMsgMetadata`, `capDeferMessages`. \n2. A number of changes to transcation executor which will activated for `Config8.version >= 8`:\n    - Check mode on invalid `action_send_msg`. Ignore action if `IGNORE_ERROR` (+2) bit is set, bounce if `BOUNCE_ON_FAIL` (+16) bit is set.\n    - Slightly change random seed generation to fix mix of `addr_rewrite` and `addr`.\n    - Fill in `skipped_actions` for both invalid and valid messages with `IGNORE_ERROR` mode that can't be sent.\n    - Allow unfreeze through external messages.\n    - Don't use user-provided `fwd_fee` and `ihr_fee` for internal messages.\n3. A few issues with broadcasts were fixed: stop on receiving last piece, response to AdnlMessageCreateChannel\n4. A number of fixes and improvements for emulator and tonlib: correct work with config_addr, not accepted externals, bounces, debug ops gas consumption, added version and c5 dump, fixed tonlib crashes\n5. Added new flags and commands to the node, in particular `--fast-state-serializer`, `getcollatoroptionsjson`, `setcollatoroptionsjson`\n\nBesides the work of the core team, this update is based on the efforts of @krigga (emulator), stonfi team, in particular @dbaranovstonfi and @hey-researcher (emulator), and  @loeul, @xiaoxianBoy, @simlecode (typos in comments and docs).\n\n\n\n## 2024.06 Update\n\n1. Make Jemalloc default allocator\n2. Add candidate broadcasting and caching\n3. Limit per address speed for external messages broadcast by reasonably large number \n4. Overlay improvements: fix dropping peers in small custom overlays, fix wrong certificate on missed keyblocks\n5. Extended statistics and logs for celldb usage, session stats, persistent state serialization\n6. Tonlib and explorer fixes\n7. Flags for precize control of Celldb: `--celldb-cache-size`, `--celldb-direct-io` and `--celldb-preload-all`\n8. Add valiator-console command to stop persistent state serialization\n9. Use `@` path separator for defining include path in fift and create-state utilities on Windows only.\n\n\n## 2024.04 Update\n\n1. Emulator: Single call optimized runGetMethod added\n2. Tonlib: a series of proof improvements, also breaking Change in `liteServer.getAllShardsInfo` method (see below)\n3. DB: usage statistics now collected, outdated persistent states are not serialized\n4. LS: fast `getOutMsgQueueSizes` added, preliminary support of non-final block requests\n5. Network: lz4 compression of block candidates (disabled by default).\n6. Overlays: add custom overlays\n7. Transaction Executor: fixed issue with due_payment collection\n\n* `liteServer.getAllShardsInfo` method was updated for better efficiency. Previously, field proof contained BoC with two roots: one for BlockState from block's root and another for ShardHashes from BlockState. Now, it returns a single-root proof BoC, specifically the merkle proof of ShardHashes directly from the block's root, streamlining data access and integrity. Checking of the proof requires to check that ShardHashes in the `data` correspond to ShardHashes from the block.\n\nBesides the work of the core team, this update is based on the efforts of @akifoq (due_payment issue).\n\n## 2024.03 Update\n\n1. Preparatory (not enabled yet) code for pre-compiled smart-contract.\n2. Minor fixes for fee-related opcodes.\n\n## 2024.02 Update\n\n1. Improvement of validator synchronisation:\n   * Better handling of block broadcasts -> faster sync\n   * Additional separate overlay among validators as second option for synchronisation\n2. Improvements in LS:\n   * c7 and library context is fully filled up for server-side rungetmethod\n   * Cache for runmethods and successfull external messages\n   * Logging of LS requests statistic\n3. Precise control of open files:\n   * almost instantaneous validator start\n   * `--max-archive-fd` option\n   * autoremoval of not used temp archive files\n   * `--archive-preload-period` option\n4. Preparatory (not enabled yet) code for addition on new TVM instructions for cheaper fee calculation onchain.\n\n## 2024.01 Update\n\n1. Fixes in how gas in transactions on special accounts is accounted in block limit. Previously, gas was counted as usual, so to conduct elections that costs >30m gas block limit in masterchain was set to 37m gas. To lower the limit for safety reasons it is proposed to caunt gas on special accounts separately. Besides `gas_max` is set to `special_gas_limit` for all types of transactions on special accounts. New behavior is activated through setting `version >= 5` in `ConfigParam 8;`.\n   * Besides update of config temporally increases gas limit on `EQD_v9j1rlsuHHw2FIhcsCFFSD367ldfDdCKcsNmNpIRzUlu` to `special_gas_limit`, see [details](https://t.me/tonstatus/88).\n2. Improvements in LS behavior\n   * Improved detection of the state with all shards applied to decrease rate of `Block is not applied` error\n   * Better error logs: `block not in db` and `block is not applied` separation\n   * Fix error in proof generation for blocks after merge\n   * Fix most of `block is not applied` issues related to sending too recent block in Proofs\n   * LS now check external messages till `accept_message` (`set_gas`).\n3. Improvements in DHT work and storage, CellDb, config.json ammendment, peer misbehavior detection, validator session stats collection, emulator.\n4. Change in CTOS and XLOAD behavior activated through setting `version >= 5` in `ConfigParam 8;`:\n   * Loading \"nested libraries\" (i.e. a library cell that points to another library cell) throws an exception.\n   * Loading a library consumes gas for cell load only once (for the library cell), not twice (both for the library cell and the cell in the library).\n   * `XLOAD` now works differently. When it takes a library cell, it returns the cell that it points to. This allows loading \"nested libraries\", if needed.\n\nBesides the work of the Core team, this update is based on the efforts of @XaBbl4 (peer misbehavior detection) and @akifoq (CTOS behavior and gas limit scheme for special accounts).\n\n## 2023.12 Update\n\n1. Optimized message queue handling, now queue cleaning speed doesn't depend on total queue size\n     * Cleaning delivered messages using lt augmentation instead of random search / consequtive walk\n     * Keeping root cell of queue message in memory until outdated (caching)\n2. Changes to block collation/validation limits\n3. Stop accepting new external message if message queue is overloaded\n4. Introducing conditions for shard split/merge based on queue size\n\nRead [more](https://blog.ton.org/technical-report-december-5-inscriptions-launch-on-ton) on that update.\n\n## 2023.11 Update\n\n1. New TVM Functionality. (Disabled by default)\n2. A series of emulator improvements: libraries support, higher max stack size, etc\n3. A series of tonlib and tonlib-cli improvements: wallet-v4 support, getconfig, showtransactions, etc\n4. Changes to public libraries: now contract can not publish more than 256 libraries (config parameter) and contracts can not be deployed with public libraries in initstate (instead contracts need explicitly publish all libraries)\n5. Changes to storage due payment: now due payment is collected in Storage Phase, however for bouncable messages fee amount can not exceed balance of account prior to message.\n\n\nBesides the work of the core team, this update is based on the efforts of @aleksej-paschenko (emulator improvements), @akifoq (security improvements), Trail of Bits auditor as well as all participants of [TEP-88 discussion](https://github.com/ton-blockchain/TEPs/pull/88).\n\n## 2023.10 Update\n1. A series of additional security checks in node: special cells in action list, init state in external messages, peers data prior to saving to disk.\n2. Human-readable timestamps in explorer\n\nBesides the work of the core team, this update is based on the efforts of @akifoq and @mr-tron.\n\n## 2023.06 Update\n1. (disabled by default) New deflation mechanisms: partial fee burning and blackhole address\n2. Storage-contract improvement\n\nBesides the work of the core team, this update is based on the efforts of @DearJohnDoe from Tonbyte (Storage-contract improvement).\n\n## 2023.05 Update\n1. Archive manager optimization\n2. A series of catchain (basic consensus protocol) security improvements\n3. Update for Fift libraries and FunC: better error-handling, fixes for `catch` stack recovery\n4. A series of out message queue handling optimization (already deployed during emergency upgrades between releases)\n5. Improvement of binaries portability\n\nBesides the work of the core team, this update is based on the efforts of @aleksej-paschenko (portability improvement), [Disintar team](https://github.com/disintar/) (archive manager optimization) and [sec3-service](https://github.com/sec3-service) security auditors (funC improvements).\n\n## 2023.04 Update\n1. CPU load optimization: previous DHT reconnect policy was too aggressive\n2. Network throughput improvements: granular control on external message broadcast, optimize celldb GC, adjust state serialization and block downloading timings, rldp2 for states and archives \n3. Update for Fift (namespaces) and Fift libraries (list of improvements: https://github.com/ton-blockchain/ton/issues/631)\n4. Better handling of incorrect inputs in funC: fix UB and prevent crashes on some inputs, improve optimizing int consts and unused variables in FunC, fix analyzing repeat loop. FunC version is increase to 0.4.3.\n5. `listBlockTransactionsExt` in liteserver added\n6. Tvm emulator improvements\n\nBesides the work of the core team, this update is based on the efforts of @krigga (tvm emulator improvement), @ex3ndr (`PUSHSLICE` fift-asm improvement) and [sec3-service](https://github.com/sec3-service) security auditors (funC improvements).\n\n## 2023.03 Update\n1. Improvement of ADNL connection stability\n2. Transaction emulator support and getAccountStateByTransaction method\n3. Fixes of typos, undefined behavior and timer warnings\n4. Handling incorrect integer literal values in funC; funC version bumped to 0.4.2\n5. FunC Mathlib\n\n## 2023.01 Update\n1. Added ConfigParam 44: `SuspendedAddressList`. Upon being set this config suspends initialisation of **uninit** addresses from the list for given time.\n2. FunC: `v0.4.1` added pragmas for precise control of computation order\n3. FunC: fixed compiler crashes for some exotic inputs\n4. FunC: added legacy tester, a collection of smart-contracts which is used to check whether compilator update change compilation result\n5. Improved archive manager: proper handling of recently garbage-collected blocks\n\n## 2022.12 Update\nNode update:\n1. Improvements of ton-proxy: fixed few bugs, improved stability\n2. Improved collator/validator checks, added optimization of storage stat calculation, generation and validation of new blocks is made safer\n3. Some previously hard-coded parameters such as split/merge timings, max sizes and depths of internal and external messages, and others now can be updated by validators through setting ConfigParams. Max contract size added to configs.\n4. Tonlib: updated raw.getTransactions (now it contains InitState), fixed long bytestrings truncation\n5. abseil-cpp is updated to newer versions\n6. Added configs for Token Bridge\n7. LiteServers: a few bug fixes, added liteServer.getAccountStatePrunned method, improved work with not yet applied blocks.\n8. Improved DHT: works for some NAT configurations, optimized excessive requests, added option for DHT network segregation.\n9. FunC v0.4.0: added try/catch statements, added throw_arg functions, allowed in-place modification of global variables, forbidden ambiguous modification of local variables after it's usage in the same expression.\n10. TON Storage: added storage-daemon (create, download bag of Files, storage-provider staff), added storage-daemon-cli\n\nBesides the work of the core team, this update is based on the efforts of @vtamara (help with abseil-cpp upgrade), @krigga(in-place modification of global variables) and third-party security auditors.\n\n## 2022.10 Update\n* Added extended block creation and general perfomance stats gathering\n* Forbidden report data on blocks not committed to the master chain for LS\n* Improved debug in TVM\n* FunC 0.3.0: multi-line asms, bitwise operations for constants, duplication of identical definition for constants and asms now allowed\n* New tonlib methods: sendMessageReturnHash, getTransactionsV2, getMasterchainBlockSignatures, getShardBlockProof, getLibraries.\n* Fixed bugs related to invalid TVM output (c4, c5, libaries) and non-validated network data; avoided too deep recursion in libraries loading\n* Fixed multiple undefined behavior issues\n* Added build of FunC and Fift to WASM\n\nBesides the work of the core team, this update is based on the efforts of @tvorogme (debug improvements), @AlexeyFSL (WASM builds)  and third-party security auditors.\n\n## 2022.08 Update\n* Blockchain state serialization now works via separate db-handler which simplfies memory clearing after serialization\n* CellDB now works asynchronously which substantially increase database access throughput\n* Abseil-cpp and crc32 updated: solve issues with compilation on recent OS distributives\n* Fixed a series of UBs and issues for exotic endianness hosts\n* Added detailed network stats for overlays (can be accessed via `validator-console`)\n* Improved auto-builds for wide range of systems.\n* Added extended error information for unaccepted external messages: `exit_code` and TVM trace (where applicable).\n* [Improved catchain DoS resistance](https://github.com/ton-blockchain/ton/blob/master/doc/catchain-dos.md)\n* A series of FunC improvements, summarized [here](https://github.com/ton-blockchain/ton/pull/378)\n#### Update delay\nUpdate coincided with persistent state serialization event which lead to block production speed deterioration (issue substantially mitigated in update itself). This phenomena was aggravated by the fact that after update some validators lost ability to participate in block creation. The last was caused by threshold based hardcoded protocol version bump, where threshold was set in such manner (based on block height with value higher than 9m), that it eluded detection in private net tests. The update was temporarily paused and resumed after persistent state serialization ended and issues with block creation were resolved.\n\nBesides the work of the core team, this update is based on the efforts of @awesome-doge (help with abseil-cpp upgrade), @rec00rsiff (noted issues for exotic endianess and implemented network stats) and third-party security auditors.\n\n## 2022.05 Update\n* Initial synchronization improved: adjusted timeouts for state download and the way of choosing which state to download. Nodes with low network speed and/or bad connectivity will synchronize faster and consistently.\n* Improved peer-to-peer network stability and DDoS resistance: now peers will only relay valid messages to the network. Large messages, which require splitting for relaying, will be retranslated as well, but only after the node gets all parts, and reassembles and checks them. Validators may sign certificates for network peers, which allow relaying large messages by parts without checks. It is used now by validators to faster relay new blocks. Sign and import certificate commands are exposed via `validator-engine-console`.\n* Fixed some rare edge cases in TVM arithmetic operations related to big numbers (`2**63+`)\n* Improved fixes used to combat wrong activate-destruct-activate contract behavior last November.\n* Improved tonlib: support libraries (with client-side caching), getmethods completely fill c7 register, getmethods support slice arguments, improved messages listing for transactions, added extended block header params, added getConfig method.\n* RocksDB updated to a newer version.\n* Improved persistent state serialization: memory usage during serialization was optimized; the start of serialization on different nodes was sparsed.\n* FunC update: support for string literals and constants (including precompiled constant expressions), semver, `include` expressions.\n* Fixed rarely manifested bugs in `Asm.fif`.\n* LiteClient supports key as cli parameter.\n* Improved Liteserver DoS resistance for running getmethods.\n\nBesides the work of the core team, this update is based on the efforts of @tvorogme (added support for slice arguments and noted bugs in Asm.fif), @akifoq (fixed bug in Asm.fif), @cryshado (noted strange behavior of LS, which, upon inspection, turned out to be a vector of DoS attack).\n\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.0087890625,
          "content": "FROM ubuntu:22.04 AS builder\nRUN apt-get update && \\\n        DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential cmake clang openssl libssl-dev zlib1g-dev gperf wget git ninja-build libsodium-dev libmicrohttpd-dev liblz4-dev pkg-config autoconf automake libtool libjemalloc-dev lsb-release software-properties-common gnupg\n\nRUN wget https://apt.llvm.org/llvm.sh && \\\n    chmod +x llvm.sh && \\\n    ./llvm.sh 16 all && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV CC=/usr/bin/clang-16\nENV CXX=/usr/bin/clang++-16\nENV CCACHE_DISABLE=1\n\nWORKDIR /\nRUN mkdir ton\nWORKDIR /ton\n\nCOPY ./ ./\n\nRUN mkdir build && \\\n        cd build && \\\n        cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DPORTABLE=1 -DTON_ARCH= -DTON_USE_JEMALLOC=ON .. && \\\n        ninja storage-daemon storage-daemon-cli tonlibjson fift func validator-engine validator-engine-console \\\n    generate-random-id dht-server lite-client tolk rldp-http-proxy dht-server proxy-liteserver create-state \\\n    blockchain-explorer emulator tonlibjson http-proxy adnl-proxy\n\nFROM ubuntu:22.04\nRUN apt-get update && \\\n    apt-get install -y wget curl libatomic1 openssl libsodium-dev libmicrohttpd-dev liblz4-dev libjemalloc-dev htop \\\n    net-tools netcat iptraf-ng jq tcpdump pv plzip && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /var/ton-work/db /var/ton-work/scripts /usr/share/ton/smartcont/auto /usr/lib/fift/\n\nCOPY --from=builder /ton/build/storage/storage-daemon/storage-daemon /usr/local/bin/\nCOPY --from=builder /ton/build/storage/storage-daemon/storage-daemon-cli /usr/local/bin/\nCOPY --from=builder /ton/build/lite-client/lite-client /usr/local/bin/\nCOPY --from=builder /ton/build/validator-engine/validator-engine /usr/local/bin/\nCOPY --from=builder /ton/build/validator-engine-console/validator-engine-console /usr/local/bin/\nCOPY --from=builder /ton/build/utils/generate-random-id /usr/local/bin/\nCOPY --from=builder /ton/build/blockchain-explorer/blockchain-explorer /usr/local/bin/\nCOPY --from=builder /ton/build/crypto/create-state /usr/local/bin/\nCOPY --from=builder /ton/build/utils/proxy-liteserver /usr/local/bin/\nCOPY --from=builder /ton/build/dht-server/dht-server /usr/local/bin/\nCOPY --from=builder /ton/build/rldp-http-proxy/rldp-http-proxy /usr/local/bin/\nCOPY --from=builder /ton/build/http/http-proxy  /usr/local/bin/\nCOPY --from=builder /ton/build/adnl/adnl-proxy  /usr/local/bin/\nCOPY --from=builder /ton/build/tonlib/libtonlibjson.so /usr/local/bin/\nCOPY --from=builder /ton/build/emulator/libemulator.so /usr/local/bin/\nCOPY --from=builder /ton/build/tolk/tolk /usr/local/bin/\nCOPY --from=builder /ton/build/crypto/fift /usr/local/bin/\nCOPY --from=builder /ton/build/crypto/func /usr/local/bin/\nCOPY --from=builder /ton/crypto/smartcont/* /usr/share/ton/smartcont/\nCOPY --from=builder /ton/crypto/smartcont/auto/* /usr/share/ton/smartcont/auto/\nCOPY --from=builder /ton/crypto/fift/lib/* /usr/lib/fift/\n\nWORKDIR /var/ton-work/db\nCOPY ./docker/init.sh ./docker/control.template /var/ton-work/scripts/\nRUN chmod +x /var/ton-work/scripts/init.sh\n\nENTRYPOINT [\"/var/ton-work/scripts/init.sh\"]\n"
        },
        {
          "name": "GPLv2",
          "type": "blob",
          "size": 1.3408203125,
          "content": "/*\n    This file is part of TON Blockchain source code.\n\n    TON Blockchain is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    TON Blockchain is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with TON Blockchain.  If not, see <http://www.gnu.org/licenses/>.\n\n    In addition, as a special exception, the copyright holders give permission\n    to link the code of portions of this program with the OpenSSL library.\n    You must obey the GNU General Public License in all respects for all\n    of the code used other than OpenSSL. If you modify file(s) with this\n    exception, you may extend this exception to your version of the file(s),\n    but you are not obligated to do so. If you do not wish to do so, delete this\n    exception statement from your version. If you delete this exception statement\n    from all source files in the program, then also delete it here.\n\n    Copyright 2017-2020 Telegram Systems LLP\n*/\n"
        },
        {
          "name": "LGPLv2",
          "type": "blob",
          "size": 0.7861328125,
          "content": "/*\n    This file is part of TON Blockchain Library.\n\n    TON Blockchain Library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 2 of the License, or\n    (at your option) any later version.\n\n    TON Blockchain Library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with TON Blockchain Library.  If not, see <http://www.gnu.org/licenses/>.\n\n    Copyright 2017-2020 Telegram Systems LLP\n*/\n"
        },
        {
          "name": "LICENSE.LGPL",
          "type": "blob",
          "size": 24.78125,
          "content": "                 GNU LIBRARY GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1991 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the library GPL.  It is\n numbered 2 because it goes with version 2 of the ordinary GPL.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Library General Public License, applies to some\nspecially designated Free Software Foundation software, and to any\nother libraries whose authors decide to use it.  You can use it for\nyour libraries, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if\nyou distribute copies of the library, or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link a program with the library, you must provide\ncomplete object files to the recipients so that they can relink them\nwith the library, after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  Our method of protecting your rights has two steps: (1) copyright\nthe library, and (2) offer you this license which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  Also, for each distributor's protection, we want to make certain\nthat everyone understands that there is no warranty for this free\nlibrary.  If the library is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original\nversion, so that any problems introduced by others will not reflect on\nthe original authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that companies distributing free\nsoftware will individually obtain patent licenses, thus in effect\ntransforming the program into proprietary software.  To prevent this,\nwe have made it clear that any patent must be licensed for everyone's\nfree use or not licensed at all.\n\n  Most GNU software, including some libraries, is covered by the ordinary\nGNU General Public License, which was designed for utility programs.  This\nlicense, the GNU Library General Public License, applies to certain\ndesignated libraries.  This license is quite different from the ordinary\none; be sure to read it in full, and don't assume that anything in it is\nthe same as in the ordinary license.\n\n  The reason we have a separate public license for some libraries is that\nthey blur the distinction we usually make between modifying or adding to a\nprogram and simply using it.  Linking a program with a library, without\nchanging the library, is in some sense simply using the library, and is\nanalogous to running a utility program or application program.  However, in\na textual and legal sense, the linked executable is a combined work, a\nderivative of the original library, and the ordinary General Public License\ntreats it as such.\n\n  Because of this blurred distinction, using the ordinary General\nPublic License for libraries did not effectively promote software\nsharing, because most developers did not use the libraries.  We\nconcluded that weaker conditions might promote sharing better.\n\n  However, unrestricted linking of non-free programs would deprive the\nusers of those programs of all benefit from the free status of the\nlibraries themselves.  This Library General Public License is intended to\npermit developers of non-free programs to use free libraries, while\npreserving your freedom as a user of such programs to change the free\nlibraries that are incorporated in them.  (We have not seen how to achieve\nthis as regards changes in header files, but we have achieved it as regards\nchanges in the actual functions of the Library.)  The hope is that this\nwill lead to faster development of free libraries.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, while the latter only\nworks together with the library.\n\n  Note that it is possible for a library to be covered by the ordinary\nGeneral Public License rather than by this special one.\n\n                  GNU LIBRARY GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library which\ncontains a notice placed by the copyright holder or other authorized\nparty saying it may be distributed under the terms of this Library\nGeneral Public License (also called \"this License\").  Each licensee is\naddressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n  \n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also compile or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    c) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    d) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe source code distributed need not include anything that is normally\ndistributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Library General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Library General Public\n    License as published by the Free Software Foundation; either\n    version 2 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Library General Public License for more details.\n\n    You should have received a copy of the GNU Library General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4609375,
          "content": "<div align=\"center\">\n  <a href=\"https://ton.org\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://ton.org/download/ton_logo_dark_background.svg\">\n      <img alt=\"TON logo\" src=\"https://ton.org/download/ton_logo_light_background.svg\">\n    </picture>\n  </a>\n  <h3>Reference implementation of TON Node and tools</h3>\n  <hr/>\n</div>\n\n## \n\n<p align=\"center\">\n  <a href=\"https://tonresear.ch\">\n    <img src=\"https://img.shields.io/badge/TON%20Research-0098EA?style=flat&logo=discourse&label=Forum&labelColor=gray\" alt=\"Ton Research\">\n  </a>\n  <a href=\"https://t.me/toncoin\">\n    <img src=\"https://img.shields.io/badge/TON%20Community-0098EA?logo=telegram&logoColor=white&style=flat\" alt=\"Telegram Community Group\">\n  </a>\n  <a href=\"https://t.me/tonblockchain\">\n    <img src=\"https://img.shields.io/badge/TON%20Foundation-0098EA?logo=telegram&logoColor=white&style=flat\" alt=\"Telegram Foundation Group\">\n  </a>\n  <a href=\"https://t.me/tondev_eng\">\n    <img src=\"https://img.shields.io/badge/chat-TONDev-0098EA?logo=telegram&logoColor=white&style=flat\" alt=\"Telegram Community Chat\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://twitter.com/ton_blockchain\">\n    <img src=\"https://img.shields.io/twitter/follow/ton_blockchain\" alt=\"Twitter Group\">\n  </a>\n  <a href=\"https://answers.ton.org\">\n    <img src=\"https://img.shields.io/badge/-TON%20Overflow-FE7A16?style=flat&logo=stack-overflow&logoColor=white\" alt=\"TON Overflow Group\">\n  </a>\n  <a href=\"https://stackoverflow.com/questions/tagged/ton\">\n    <img src=\"https://img.shields.io/badge/-Stack%20Overflow-FE7A16?style=flat&logo=stack-overflow&logoColor=white\" alt=\"Stack Overflow Group\">\n  </a>\n</p>\n\n\n\nMain TON monorepo, which includes the code of the node/validator, lite-client, tonlib, FunC compiler, etc.\n\n## The Open Network\n\n__The Open Network (TON)__ is a fast, secure, scalable blockchain focused on handling _millions of transactions per second_ (TPS) with the goal of reaching hundreds of millions of blockchain users.\n- To learn more about different aspects of TON blockchain and its underlying ecosystem check [documentation](https://ton.org/docs)\n- To run node, validator or lite-server check [Participate section](https://ton.org/docs/participate/nodes/run-node)\n- To develop decentralised apps check [Tutorials](https://ton.org/docs/develop/smart-contracts/), [FunC docs](https://ton.org/docs/develop/func/overview) and [DApp tutorials](https://ton.org/docs/develop/dapps/)\n- To work on TON check [wallets](https://ton.app/wallets), [explorers](https://ton.app/explorers), [DEXes](https://ton.app/dex) and [utilities](https://ton.app/utilities)\n- To interact with TON check [APIs](https://ton.org/docs/develop/dapps/apis/)\n\n## Updates flow\n\n* **master branch** - mainnet is running on this stable branch.\n\n    Only emergency updates, urgent updates, or updates that do not affect the main codebase (GitHub workflows / docker images / documentation) are committed directly to this branch.\n\n* **testnet branch** - testnet is running on this branch. The branch contains a set of new updates. After testing, the testnet branch is merged into the master branch and then a new set of updates is added to testnet branch.\n\n* **backlog** - other branches that are candidates to getting into the testnet branch in the next iteration.\n\nUsually, the response to your pull request will indicate which section it falls into.\n\n\n## \"Soft\" Pull Request rules\n\n* Thou shall not merge your own PRs, at least one person should review the PR and merge it (4-eyes rule)\n* Thou shall make sure that workflows are cleanly completed for your PR before considering merge\n\n## Build TON blockchain\n\n### Ubuntu 20.4, 22.04 (x86-64, aarch64)\nInstall additional system libraries\n```bash\n  sudo apt-get update\n  sudo apt-get install -y build-essential git cmake ninja-build zlib1g-dev libsecp256k1-dev libmicrohttpd-dev libsodium-dev\n          \n  wget https://apt.llvm.org/llvm.sh\n  chmod +x llvm.sh\n  sudo ./llvm.sh 16 all\n```\nCompile TON binaries\n```bash\n  cp assembly/native/build-ubuntu-shared.sh .\n  chmod +x build-ubuntu-shared.sh\n  ./build-ubuntu-shared.sh  \n```\n\n### MacOS 11, 12 (x86-64, aarch64)\n```bash\n  cp assembly/native/build-macos-shared.sh .\n  chmod +x build-macos-shared.sh\n  ./build-macos-shared.sh\n```\n\n### Windows 10, 11, Server (x86-64)\nYou need to install `MS Visual Studio 2022` first.\nGo to https://www.visualstudio.com/downloads/ and download `MS Visual Studio 2022 Community`.\n\nLaunch installer and select `Desktop development with C++`. \nAfter installation, also make sure that `cmake` is globally available by adding\n`C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin` to the system `PATH` (adjust the path per your needs).\n\nOpen an elevated (Run as Administrator) `x86-64 Native Tools Command Prompt for VS 2022`, go to the root folder and execute: \n```bash\n  copy assembly\\native\\build-windows.bat .\n  build-windows.bat\n```\n\n### Building TON to WebAssembly\nInstall additional system libraries on Ubuntu\n```bash\n  sudo apt-get update\n  sudo apt-get install -y build-essential git cmake ninja-build zlib1g-dev libsecp256k1-dev libmicrohttpd-dev libsodium-dev\n          \n  wget https://apt.llvm.org/llvm.sh\n  chmod +x llvm.sh\n  sudo ./llvm.sh 16 all\n```\nCompile TON binaries with emscripten\n```bash\n  cd assembly/wasm\n  chmod +x fift-func-wasm-build-ubuntu.sh\n  ./fift-func-wasm-build-ubuntu.sh\n```\n\n### Building TON tonlib library for Android (arm64-v8a, armeabi-v7a, x86, x86-64)\nInstall additional system libraries on Ubuntu\n```bash\n  sudo apt-get update\n  sudo apt-get install -y build-essential git cmake ninja-build automake libtool texinfo autoconf libgflags-dev \\\n  zlib1g-dev libssl-dev libreadline-dev libmicrohttpd-dev pkg-config libgsl-dev python3 python3-dev \\\n  libtool autoconf libsodium-dev libsecp256k1-dev\n```\nCompile TON tonlib library\n```bash\n  cp assembly/android/build-android-tonlib.sh .\n  chmod +x build-android-tonlib.sh\n  ./build-android-tonlib.sh\n```\n\n### Build TON portable binaries with Nix package manager\nYou need to install Nix first.\n```bash\n   sh <(curl -L https://nixos.org/nix/install) --daemon\n```\nThen compile TON with Nix by executing below command from the root folder: \n```bash\n  cp -r assembly/nix/* .\n  export NIX_PATH=nixpkgs=https://github.com/nixOS/nixpkgs/archive/23.05.tar.gz\n  nix-build linux-x86-64-static.nix\n```\nMore examples for other platforms can be found under `assembly/nix`.  \n\n## Running tests\n\nTests are executed by running `ctest` in the build directory. See `doc/Tests.md` for more information.\n"
        },
        {
          "name": "adnl",
          "type": "tree",
          "content": null
        },
        {
          "name": "assembly",
          "type": "tree",
          "content": null
        },
        {
          "name": "blockchain-explorer",
          "type": "tree",
          "content": null
        },
        {
          "name": "catchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "create-hardfork",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "dht-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "dht",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "emulator",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "fec",
          "type": "tree",
          "content": null
        },
        {
          "name": "git.cc.in",
          "type": "blob",
          "size": 0.66796875,
          "content": "#include \"git.h\"\n\nbool GitMetadata::Populated() {\n    return @GIT_RETRIEVED_STATE@;\n}\nbool GitMetadata::AnyUncommittedChanges() {\n    return @GIT_IS_DIRTY@;\n}\nstd::string GitMetadata::AuthorName() {\n    return \"@GIT_AUTHOR_NAME@\";\n}\nstd::string GitMetadata::AuthorEmail() {\n    return \"@GIT_AUTHOR_EMAIL@\";\n}\nstd::string GitMetadata::CommitSHA1() {\n    return \"@GIT_HEAD_SHA1@\";\n}\nstd::string GitMetadata::CommitDate() {\n    return \"@GIT_COMMIT_DATE_ISO8601@\";\n}\nstd::string GitMetadata::CommitSubject() {\n    return \"@GIT_COMMIT_SUBJECT@\";\n}\nstd::string GitMetadata::CommitBody() {\n    return @GIT_COMMIT_BODY@;\n}\nstd::string GitMetadata::Describe() {\n    return \"@GIT_DESCRIBE@\";\n}\n"
        },
        {
          "name": "git.h",
          "type": "blob",
          "size": 0.7890625,
          "content": "#pragma once\n#include <string>\n\nclass GitMetadata {\npublic:\n  // Is the metadata populated? We may not have metadata if\n  // there wasn't a .git directory (e.g. downloaded source\n  // code without revision history).\n  static bool Populated();\n\n  // Were there any uncommitted changes that won't be reflected\n  // in the CommitID?\n  static bool AnyUncommittedChanges();\n\n  // The commit author's name.\n  static std::string AuthorName();\n  // The commit author's email.\n  static std::string AuthorEmail();\n  // The commit SHA1.\n  static std::string CommitSHA1();\n  // The ISO8601 commit date.\n  static std::string CommitDate();\n  // The commit subject.\n  static std::string CommitSubject();\n  // The commit body.\n  static std::string CommitBody();\n  // The commit describe.\n  static std::string Describe();\n};\n"
        },
        {
          "name": "git_watcher.cmake",
          "type": "blob",
          "size": 10.09375,
          "content": "# git_watcher.cmake\n# https://raw.githubusercontent.com/andrew-hardin/cmake-git-version-tracking/master/git_watcher.cmake\n#\n# Released under the MIT License.\n# https://raw.githubusercontent.com/andrew-hardin/cmake-git-version-tracking/master/LICENSE\n\n\n# This file defines a target that monitors the state of a git repo.\n# If the state changes (e.g. a commit is made), then a file gets reconfigured.\n# Here are the primary variables that control script behavior:\n#\n#   PRE_CONFIGURE_FILE (REQUIRED)\n#   -- The path to the file that'll be configured.\n#\n#   POST_CONFIGURE_FILE (REQUIRED)\n#   -- The path to the configured PRE_CONFIGURE_FILE.\n#\n#   GIT_STATE_FILE (OPTIONAL)\n#   -- The path to the file used to store the previous build's git state.\n#      Defaults to the current binary directory.\n#\n#   GIT_WORKING_DIR (OPTIONAL)\n#   -- The directory from which git commands will be run.\n#      Defaults to the directory with the top level CMakeLists.txt.\n#\n#   GIT_EXECUTABLE (OPTIONAL)\n#   -- The path to the git executable. It'll automatically be set if the\n#      user doesn't supply a path.\n#\n# DESIGN\n#   - This script was designed similar to a Python application\n#     with a Main() function. I wanted to keep it compact to\n#     simplify \"copy + paste\" usage.\n#\n#   - This script is invoked under two CMake contexts:\n#       1. Configure time (when build files are created).\n#       2. Build time (called via CMake -P).\n#     The first invocation is what registers the script to\n#     be executed at build time.\n#\n# MODIFICATIONS\n#   You may wish to track other git properties like when the last\n#   commit was made. There are two sections you need to modify,\n#   and they're tagged with a \">>>\" header.\n\n# Short hand for converting paths to absolute.\nmacro(PATH_TO_ABSOLUTE var_name)\n    get_filename_component(${var_name} \"${${var_name}}\" ABSOLUTE)\nendmacro()\n\n# Check that a required variable is set.\nmacro(CHECK_REQUIRED_VARIABLE var_name)\n    if(NOT DEFINED ${var_name})\n        message(FATAL_ERROR \"The \\\"${var_name}\\\" variable must be defined.\")\n    endif()\n    PATH_TO_ABSOLUTE(${var_name})\nendmacro()\n\n# Check that an optional variable is set, or, set it to a default value.\nmacro(CHECK_OPTIONAL_VARIABLE var_name default_value)\n    if(NOT DEFINED ${var_name})\n        set(${var_name} ${default_value})\n    endif()\n    PATH_TO_ABSOLUTE(${var_name})\nendmacro()\n\nCHECK_REQUIRED_VARIABLE(PRE_CONFIGURE_FILE)\nCHECK_REQUIRED_VARIABLE(POST_CONFIGURE_FILE)\nCHECK_OPTIONAL_VARIABLE(GIT_STATE_FILE \"${CMAKE_BINARY_DIR}/git-state-hash\")\nCHECK_OPTIONAL_VARIABLE(GIT_WORKING_DIR \"${CMAKE_SOURCE_DIR}\")\n\n# Check the optional git variable.\n# If it's not set, we'll try to find it using the CMake packaging system.\nif(NOT DEFINED GIT_EXECUTABLE)\n    find_package(Git QUIET REQUIRED)\nendif()\nCHECK_REQUIRED_VARIABLE(GIT_EXECUTABLE)\n\n\nset(_state_variable_names\n    GIT_RETRIEVED_STATE\n    GIT_HEAD_SHA1\n    GIT_IS_DIRTY\n    GIT_AUTHOR_NAME\n    GIT_AUTHOR_EMAIL\n    GIT_COMMIT_DATE_ISO8601\n    GIT_COMMIT_SUBJECT\n    GIT_COMMIT_BODY\n    GIT_DESCRIBE\n    # >>>\n    # 1. Add the name of the additional git variable you're interested in monitoring\n    #    to this list.\n)\n\n\n\n# Macro: RunGitCommand\n# Description: short-hand macro for calling a git function. Outputs are the\n#              \"exit_code\" and \"output\" variables.\nmacro(RunGitCommand)\n    execute_process(COMMAND\n        \"${GIT_EXECUTABLE}\" ${ARGV}\n        WORKING_DIRECTORY \"${_working_dir}\"\n        RESULT_VARIABLE exit_code\n        OUTPUT_VARIABLE output\n        ERROR_QUIET\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if(NOT exit_code EQUAL 0)\n        set(ENV{GIT_RETRIEVED_STATE} \"false\")\n    endif()\nendmacro()\n\n\n\n# Function: GetGitState\n# Description: gets the current state of the git repo.\n# Args:\n#   _working_dir (in)  string; the directory from which git commands will be executed.\nfunction(GetGitState _working_dir)\n\n    # This is an error code that'll be set to FALSE if the\n    # RunGitCommand ever returns a non-zero exit code.\n    set(ENV{GIT_RETRIEVED_STATE} \"true\")\n\n    # Get whether or not the working tree is dirty.\n    RunGitCommand(status --porcelain)\n    if(NOT exit_code EQUAL 0)\n        set(ENV{GIT_IS_DIRTY} \"false\")\n    else()\n        if(NOT \"${output}\" STREQUAL \"\")\n            set(ENV{GIT_IS_DIRTY} \"true\")\n        else()\n            set(ENV{GIT_IS_DIRTY} \"false\")\n        endif()\n    endif()\n\n    # There's a long list of attributes grabbed from git show.\n    set(object HEAD)\n    RunGitCommand(show -s \"--format=%H\" ${object})\n    if(exit_code EQUAL 0)\n        set(ENV{GIT_HEAD_SHA1} ${output})\n    else()\n        set(ENV{GIT_HEAD_SHA1} \"$ENV{GIT_REVISION}\")\n    endif()\n\n    RunGitCommand(show -s \"--format=%an\" ${object})\n    if(exit_code EQUAL 0)\n        set(ENV{GIT_AUTHOR_NAME} \"${output}\")\n    endif()\n\n    RunGitCommand(show -s \"--format=%ae\" ${object})\n    if(exit_code EQUAL 0)\n        set(ENV{GIT_AUTHOR_EMAIL} \"${output}\")\n    endif()\n\n    RunGitCommand(show -s \"--format=%ci\" ${object})\n    if(exit_code EQUAL 0)\n        set(ENV{GIT_COMMIT_DATE_ISO8601} \"${output}\")\n    else()\n        set(ENV{GIT_COMMIT_DATE_ISO8601} \"$ENV{GIT_REVISION_DATE}\")\n    endif()\n\n    RunGitCommand(show -s \"--format=%s\" ${object})\n    if(exit_code EQUAL 0)\n        # Escape quotes\n        string(REPLACE \"\\\"\" \"\\\\\\\"\" output \"${output}\")\n        set(ENV{GIT_COMMIT_SUBJECT} \"${output}\")\n    endif()\n\n    RunGitCommand(show -s \"--format=%b\" ${object})\n    if(exit_code EQUAL 0)\n        if(output)\n            # Escape quotes\n            string(REPLACE \"\\\"\" \"\\\\\\\"\" output \"${output}\")\n            # Escape line breaks in the commit message.\n            string(REPLACE \"\\r\\n\" \"\\\\r\\\\n\\\\\\r\\n\" safe \"${output}\")\n            if(safe STREQUAL output)\n                # Didn't have windows lines - try unix lines.\n                string(REPLACE \"\\n\" \"\\\\n\\\\\\n\" safe \"${output}\")\n            endif()\n        else()\n            # There was no commit body - set the safe string to empty.\n            set(safe \"\")\n        endif()\n        set(ENV{GIT_COMMIT_BODY} \"\\\"${safe}\\\"\")\n    else()\n        set(ENV{GIT_COMMIT_BODY} \"\\\"\\\"\") # empty string.\n    endif()\n\n    # Get output of git describe\n    RunGitCommand(describe --always ${object})\n    if(NOT exit_code EQUAL 0)\n        set(ENV{GIT_DESCRIBE} \"unknown\")\n    else()\n        set(ENV{GIT_DESCRIBE} \"${output}\")\n    endif()\n\n    # >>>\n    # 2. Additional git properties can be added here via the\n    #    \"execute_process()\" command. Be sure to set them in\n    #    the environment using the same variable name you added\n    #    to the \"_state_variable_names\" list.\n\nendfunction()\n\n\n\n# Function: GitStateChangedAction\n# Description: this function is executed when the state of the git\n#              repository changes (e.g. a commit is made).\nfunction(GitStateChangedAction)\n    foreach(var_name ${_state_variable_names})\n        set(${var_name} $ENV{${var_name}})\n    endforeach()\n    configure_file(\"${PRE_CONFIGURE_FILE}\" \"${POST_CONFIGURE_FILE}\" @ONLY)\nendfunction()\n\n\n\n# Function: HashGitState\n# Description: loop through the git state variables and compute a unique hash.\n# Args:\n#   _state (out)  string; a hash computed from the current git state.\nfunction(HashGitState _state)\n    set(ans \"\")\n    foreach(var_name ${_state_variable_names})\n        string(SHA256 ans \"${ans}$ENV{${var_name}}\")\n    endforeach()\n    set(${_state} ${ans} PARENT_SCOPE)\nendfunction()\n\n\n\n# Function: CheckGit\n# Description: check if the git repo has changed. If so, update the state file.\n# Args:\n#   _working_dir    (in)  string; the directory from which git commands will be ran.\n#   _state_changed (out)    bool; whether or no the state of the repo has changed.\nfunction(CheckGit _working_dir _state_changed)\n\n    # Get the current state of the repo.\n    GetGitState(\"${_working_dir}\")\n\n    # Convert that state into a hash that we can compare against\n    # the hash stored on-disk.\n    HashGitState(state)\n\n    # Issue 14: post-configure file isn't being regenerated.\n    #\n    # Update the state to include the SHA256 for the pre-configure file.\n    # This forces the post-configure file to be regenerated if the\n    # pre-configure file has changed.\n    file(SHA256 ${PRE_CONFIGURE_FILE} preconfig_hash)\n    string(SHA256 state \"${preconfig_hash}${state}\")\n\n    # Check if the state has changed compared to the backup on disk.\n    if(EXISTS \"${GIT_STATE_FILE}\")\n        file(READ \"${GIT_STATE_FILE}\" OLD_HEAD_CONTENTS)\n        if(OLD_HEAD_CONTENTS STREQUAL \"${state}\")\n            # State didn't change.\n            set(${_state_changed} \"false\" PARENT_SCOPE)\n            return()\n        endif()\n    endif()\n\n    # The state has changed.\n    # We need to update the state file on disk.\n    # Future builds will compare their state to this file.\n    file(WRITE \"${GIT_STATE_FILE}\" \"${state}\")\n    set(${_state_changed} \"true\" PARENT_SCOPE)\nendfunction()\n\n\n\n# Function: SetupGitMonitoring\n# Description: this function sets up custom commands that make the build system\n#              check the state of git before every build. If the state has\n#              changed, then a file is configured.\nfunction(SetupGitMonitoring)\n    add_custom_target(check_git\n        ALL\n        DEPENDS ${PRE_CONFIGURE_FILE}\n        BYPRODUCTS\n            ${POST_CONFIGURE_FILE}\n            ${GIT_STATE_FILE}\n        COMMENT \"Checking the git repository for changes...\"\n        COMMAND\n            ${CMAKE_COMMAND}\n            -D_BUILD_TIME_CHECK_GIT=TRUE\n            -DGIT_WORKING_DIR=${GIT_WORKING_DIR}\n            -DGIT_EXECUTABLE=${GIT_EXECUTABLE}\n            -DGIT_STATE_FILE=${GIT_STATE_FILE}\n            -DPRE_CONFIGURE_FILE=${PRE_CONFIGURE_FILE}\n            -DPOST_CONFIGURE_FILE=${POST_CONFIGURE_FILE}\n            -P \"${CMAKE_CURRENT_LIST_FILE}\")\nendfunction()\n\n\n\n# Function: Main\n# Description: primary entry-point to the script. Functions are selected based\n#              on whether it's configure or build time.\nfunction(Main)\n    if(_BUILD_TIME_CHECK_GIT)\n        # Check if the repo has changed.\n        # If so, run the change action.\n        CheckGit(\"${GIT_WORKING_DIR}\" changed)\n        if(changed OR NOT EXISTS \"${POST_CONFIGURE_FILE}\")\n            GitStateChangedAction()\n        endif()\n    else()\n        # >> Executes at configure time.\n        SetupGitMonitoring()\n    endif()\nendfunction()\n\n# And off we go...\nMain()\n"
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "keyring",
          "type": "tree",
          "content": null
        },
        {
          "name": "keys",
          "type": "tree",
          "content": null
        },
        {
          "name": "lite-client-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lite-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "memprof",
          "type": "tree",
          "content": null
        },
        {
          "name": "overlay",
          "type": "tree",
          "content": null
        },
        {
          "name": "recent_changelog.md",
          "type": "blob",
          "size": 1.072265625,
          "content": "## 2024.12 Update\n\n1. FunC 0.4.6: Fix in try/catch handling, fixing pure flag for functions stored in variables\n2. Merging parts of Accelerator: support of specific shard monitoring, archive/liteserver slice format, support for partial liteservers, proxy liteserver, on-demand neighbour queue loading\n3. Fix of asynchronous cell loading\n4. Various improvements: caching certificates checks, better block overloading detection, `_malloc` in emulator\n5. Introduction of telemetry in overlays\n6. Use non-null local-id for tonlib-LS interaction - mitigates MitM attack.\n7. Adding `SECP256K1_XONLY_PUBKEY_TWEAK_ADD`, `SETCONTCTRMANY` instructions to TVM (activated by `Config8.version >= 9`)\n8. Private keys export via validator-engine-console - required for better backups\n9. Fix proof checking in tonlib, `hash` in `raw.Message` in tonlib_api\n\nBesides the work of the core team, this update is based on the efforts of OtterSec and LayerZero (FunC), tg:@throwunless (FunC), Aviv Frenkel and Dima Kogan from Fordefi (LS MitM), @hacker-volodya (Tonlib), OKX team (async cell loading), @krigga (emulator)\n"
        },
        {
          "name": "rldp-http-proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "rldp",
          "type": "tree",
          "content": null
        },
        {
          "name": "rldp2",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-clang-format.sh",
          "type": "blob",
          "size": 0.0673828125,
          "content": "#!/bin/sh\n./src.sh | xargs -n 1 clang-format -verbose -style=file -i\n"
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "tdactor",
          "type": "tree",
          "content": null
        },
        {
          "name": "tddb",
          "type": "tree",
          "content": null
        },
        {
          "name": "tdfec",
          "type": "tree",
          "content": null
        },
        {
          "name": "tdnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "tdtl",
          "type": "tree",
          "content": null
        },
        {
          "name": "tdutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "terminal",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tl-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "tl",
          "type": "tree",
          "content": null
        },
        {
          "name": "tolk-tester",
          "type": "tree",
          "content": null
        },
        {
          "name": "tolk",
          "type": "tree",
          "content": null
        },
        {
          "name": "ton",
          "type": "tree",
          "content": null
        },
        {
          "name": "tonlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "validator-engine-console",
          "type": "tree",
          "content": null
        },
        {
          "name": "validator-engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "validator-session",
          "type": "tree",
          "content": null
        },
        {
          "name": "validator",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}