{
  "metadata": {
    "timestamp": 1736565415216,
    "page": 257,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CLIUtils/CLI11",
      "stars": 3446,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 19.3515625,
          "content": "{\n  \"projectName\": \"CLI11\",\n  \"projectOwner\": \"CLIUtils\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": true,\n  \"commitConvention\": \"atom\",\n  \"contributors\": [\n    {\n      \"login\": \"henryiii\",\n      \"name\": \"Henry Schreiner\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/4616906?v=4\",\n      \"profile\": \"http://iscinumpy.gitlab.io\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"phlptp\",\n      \"name\": \"Philip Top\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/20667153?v=4\",\n      \"profile\": \"https://github.com/phlptp\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"cbachhuber\",\n      \"name\": \"Christoph Bachhuber\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/27212661?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/cbachhuber/\",\n      \"contributions\": [\n        \"example\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"lambdafu\",\n      \"name\": \"Marcus Brinkmann\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1138455?v=4\",\n      \"profile\": \"https://lambdafu.net/\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SkyToGround\",\n      \"name\": \"Jonas Nilsson\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/58835?v=4\",\n      \"profile\": \"https://github.com/SkyToGround\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dvj\",\n      \"name\": \"Doug Johnston\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/77217?v=4\",\n      \"profile\": \"https://github.com/dvj\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"lczech\",\n      \"name\": \"Lucas Czech\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/4741887?v=4\",\n      \"profile\": \"http://lucas-czech.de\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"rafiw\",\n      \"name\": \"Rafi Wiener\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/3034707?v=4\",\n      \"profile\": \"https://github.com/rafiw\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"mensinda\",\n      \"name\": \"Daniel Mensinger\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/3407462?v=4\",\n      \"profile\": \"https://github.com/mensinda\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"jbriales\",\n      \"name\": \"Jesus Briales\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6850478?v=4\",\n      \"profile\": \"https://github.com/jbriales\",\n      \"contributions\": [\n        \"code\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"seanfisk\",\n      \"name\": \"Sean Fisk\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/410322?v=4\",\n      \"profile\": \"https://seanfisk.com/\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"fpeng1985\",\n      \"name\": \"fpeng1985\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/87981?v=4\",\n      \"profile\": \"https://github.com/fpeng1985\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"almikhayl\",\n      \"name\": \"almikhayl\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/6747040?v=4\",\n      \"profile\": \"https://github.com/almikhayl\",\n      \"contributions\": [\n        \"code\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"andrew-hardin\",\n      \"name\": \"Andrew Hardin\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/16496326?v=4\",\n      \"profile\": \"https://github.com/andrew-hardin\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SX91\",\n      \"name\": \"Anton\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/754754?v=4\",\n      \"profile\": \"https://github.com/SX91\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"helmesjo\",\n      \"name\": \"Fred Helmesjö\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2501070?v=4\",\n      \"profile\": \"https://github.com/helmesjo\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"skannan89\",\n      \"name\": \"Kannan\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/11918764?v=4\",\n      \"profile\": \"https://github.com/skannan89\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"kraj\",\n      \"name\": \"Khem Raj\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/465279?v=4\",\n      \"profile\": \"http://himvis.com\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"mogigoma\",\n      \"name\": \"Mak Kolybabi\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/130862?v=4\",\n      \"profile\": \"https://www.mogigoma.com/\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"msoeken\",\n      \"name\": \"Mathias Soeken\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1998245?v=4\",\n      \"profile\": \"http://msoeken.github.io\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"nathanhourt\",\n      \"name\": \"Nathan Hourt\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/271977?v=4\",\n      \"profile\": \"https://github.com/nathanhourt\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"pleroux0\",\n      \"name\": \"Paul le Roux\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/39619854?v=4\",\n      \"profile\": \"https://github.com/pleroux0\",\n      \"contributions\": [\n        \"code\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"chfast\",\n      \"name\": \"Paweł Bylica\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/573380?v=4\",\n      \"profile\": \"https://github.com/chfast\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"peterazmanov\",\n      \"name\": \"Peter Azmanov\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/15322318?v=4\",\n      \"profile\": \"https://github.com/peterazmanov\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"delpinux\",\n      \"name\": \"Stéphane Del Pino\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/35096584?v=4\",\n      \"profile\": \"https://github.com/delpinux\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"metopa\",\n      \"name\": \"Viacheslav Kroilov\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/3974178?v=4\",\n      \"profile\": \"https://github.com/metopa\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ChristosT\",\n      \"name\": \"christos\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/6725596?v=4\",\n      \"profile\": \"http://cs.odu.edu/~ctsolakis\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"deining\",\n      \"name\": \"deining\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/18169566?v=4\",\n      \"profile\": \"https://github.com/deining\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"elszon\",\n      \"name\": \"elszon\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2971495?v=4\",\n      \"profile\": \"https://github.com/elszon\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ncihnegn\",\n      \"name\": \"ncihnegn\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/12021721?v=4\",\n      \"profile\": \"https://github.com/ncihnegn\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"nurelin\",\n      \"name\": \"nurelin\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/5276274?v=4\",\n      \"profile\": \"https://github.com/nurelin\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ryan4729\",\n      \"name\": \"ryan4729\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/40183301?v=4\",\n      \"profile\": \"https://github.com/ryan4729\",\n      \"contributions\": [\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"slurps-mad-rips\",\n      \"name\": \"Isabella Muerte\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/63051?v=4\",\n      \"profile\": \"https://izzys.casa\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"KOLANICH\",\n      \"name\": \"KOLANICH\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/240344?v=4\",\n      \"profile\": \"https://github.com/KOLANICH\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"jgerityneurala\",\n      \"name\": \"James Gerity\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/57360646?v=4\",\n      \"profile\": \"https://github.com/jgerityneurala\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"jsoref\",\n      \"name\": \"Josh Soref\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2119212?v=4\",\n      \"profile\": \"https://github.com/jsoref\",\n      \"contributions\": [\n        \"tool\"\n      ]\n    },\n    {\n      \"login\": \"geir-t\",\n      \"name\": \"geir-t\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/35292136?v=4\",\n      \"profile\": \"https://github.com/geir-t\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"certik\",\n      \"name\": \"Ondřej Čertík\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/20568?v=4\",\n      \"profile\": \"https://ondrejcertik.com/\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"samhocevar\",\n      \"name\": \"Sam Hocevar\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/245089?v=4\",\n      \"profile\": \"http://sam.hocevar.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"rcurtin\",\n      \"name\": \"Ryan Curtin\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1845039?v=4\",\n      \"profile\": \"http://www.ratml.org/\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"mbhall88\",\n      \"name\": \"Michael Hall\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/20403931?v=4\",\n      \"profile\": \"https://mbh.sh\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"ferdymercury\",\n      \"name\": \"ferdymercury\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10653970?v=4\",\n      \"profile\": \"https://github.com/ferdymercury\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"jakoblover\",\n      \"name\": \"Jakob Lover\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/14160441?v=4\",\n      \"profile\": \"https://github.com/jakoblover\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ZeeD26\",\n      \"name\": \"Dominik Steinberger\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2487468?v=4\",\n      \"profile\": \"https://github.com/ZeeD26\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dfleury2\",\n      \"name\": \"D. Fleury\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/4805384?v=4\",\n      \"profile\": \"https://github.com/dfleury2\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dbarowy\",\n      \"name\": \"Dan Barowy\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/573142?v=4\",\n      \"profile\": \"https://github.com/dbarowy\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"paddy-hack\",\n      \"name\": \"Olaf Meeuwissen\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6804372?v=4\",\n      \"profile\": \"https://github.com/paddy-hack\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dryleev\",\n      \"name\": \"dryleev\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/83670813?v=4\",\n      \"profile\": \"https://github.com/dryleev\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"AnticliMaxtic\",\n      \"name\": \"Max\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43995389?v=4\",\n      \"profile\": \"https://github.com/AnticliMaxtic\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"alexdewar\",\n      \"name\": \"Alex Dewar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/23149834?v=4\",\n      \"profile\": \"https://profiles.sussex.ac.uk/p281168-alex-dewar/publications\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"trokhymchuk\",\n      \"name\": \"Artem Trokhymchuk \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/66204814?v=4\",\n      \"profile\": \"https://github.com/trokhymchuk\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dherrera-fb\",\n      \"name\": \"dherrera-fb\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/89840711?v=4\",\n      \"profile\": \"https://github.com/dherrera-fb\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"VolkerChristian\",\n      \"name\": \"Volker Christian\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/18554540?v=4\",\n      \"profile\": \"https://github.com/VolkerChristian\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"thewtex\",\n      \"name\": \"Matt McCormick\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/25432?v=4\",\n      \"profile\": \"https://www.mmmccormick.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"polistern\",\n      \"name\": \"polistern\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/55511995?v=4\",\n      \"profile\": \"http://polistern.i2p/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"andreasxp\",\n      \"name\": \"Andrey Zhukov\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/28830446?v=4\",\n      \"profile\": \"https://github.com/andreasxp\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SherlockInSpace\",\n      \"name\": \"Ryan Sherlock\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5507786?v=4\",\n      \"profile\": \"https://github.com/SherlockInSpace\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Krzmbrzl\",\n      \"name\": \"Robert Adam\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/12751591?v=4\",\n      \"profile\": \"https://github.com/Krzmbrzl\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"RangeMachine\",\n      \"name\": \"RangeMachine\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/11577601?v=4\",\n      \"profile\": \"https://github.com/RangeMachine\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ptheywood\",\n      \"name\": \"Peter Heywood\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/628937?v=4\",\n      \"profile\": \"http://ptheywood.uk/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"peterh\",\n      \"name\": \"Peter Harris\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/79339?v=4\",\n      \"profile\": \"https://github.com/peterh\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"PeteAudinate\",\n      \"name\": \"PeteAudinate\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/99274874?v=4\",\n      \"profile\": \"https://github.com/PeteAudinate\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"captainurist\",\n      \"name\": \"captainurist\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/73941350?v=4\",\n      \"profile\": \"https://github.com/captainurist\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"djerius\",\n      \"name\": \"djerius\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/196875?v=4\",\n      \"profile\": \"https://github.com/djerius\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"shameekganguly\",\n      \"name\": \"shameekganguly\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2412842?v=4\",\n      \"profile\": \"https://github.com/shameekganguly\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ayum\",\n      \"name\": \"ayum\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6747040?v=4\",\n      \"profile\": \"https://github.com/ayum\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"BenjaminBeichler\",\n      \"name\": \"Benjamin Beichler\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1441492?v=4\",\n      \"profile\": \"https://github.com/BenjaminBeichler\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"DarkWingMcQuack\",\n      \"name\": \"DarkWingMcQuack\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/38857302?v=4\",\n      \"profile\": \"https://github.com/DarkWingMcQuack\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"eli-schwartz\",\n      \"name\": \"Eli Schwartz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6551424?v=4\",\n      \"profile\": \"https://github.com/eli-schwartz\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"bruxisma\",\n      \"name\": \"Izzy Muerte\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63051?v=4\",\n      \"profile\": \"https://izzys.casa/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"j-rivero\",\n      \"name\": \"Jose Luis Rivero\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2098802?v=4\",\n      \"profile\": \"https://github.com/j-rivero\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"looopTools\",\n      \"name\": \"Lars Nielsen\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1943536?v=4\",\n      \"profile\": \"https://github.com/looopTools\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"cetius\",\n      \"name\": \"Marcin Ropa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6552472?v=4\",\n      \"profile\": \"https://github.com/cetius\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"nathanielhourt\",\n      \"name\": \"Nathaniel Hourt\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/271977?v=4\",\n      \"profile\": \"https://github.com/nathanielhourt\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"krico\",\n      \"name\": \"Christian Asmussen\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6952185?v=4\",\n      \"profile\": \"https://github.com/krico\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"dcbaker\",\n      \"name\": \"Dylan Baker\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1779595?v=4\",\n      \"profile\": \"https://recursiveascent.blogspot.com/\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"calebzulawski\",\n      \"name\": \"Caleb Zulawski\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/563826?v=4\",\n      \"profile\": \"https://github.com/calebzulawski\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"gostefan\",\n      \"name\": \"gostefan\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2479455?v=4\",\n      \"profile\": \"https://github.com/gostefan\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"sifferman\",\n      \"name\": \"Ethan Sifferman\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43790149?v=4\",\n      \"profile\": \"https://github.com/sifferman\",\n      \"contributions\": [\n        \"code\"\n      ]\n    }\n  ],\n  \"contributorsSortAlphabetically\": true,\n  \"contributorsPerLine\": 7,\n  \"skipCi\": true,\n  \"commitType\": \"docs\"\n}\n"
        },
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.6171875,
          "content": "Language: Cpp\nBasedOnStyle: LLVM\n# AccessModifierOffset: -2\n# AlignAfterOpenBracket: Align\n# AlignConsecutiveAssignments: false\n# AlignConsecutiveDeclarations: false\n# AlignEscapedNewlinesLeft: false\n# AlignOperands:   true\n# AlignTrailingComments: true\n# AllowAllParametersOfDeclarationOnNextLine: true\n# AllowShortBlocksOnASingleLine: false\n# AllowShortCaseLabelsOnASingleLine: false\n# AllowShortFunctionsOnASingleLine: All\n# AllowShortIfStatementsOnASingleLine: false\n# AllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\n# AlwaysBreakTemplateDeclarations: false\nBinPackArguments: false\nBinPackParameters: false\n# BraceWrapping:\n#   AfterClass:      false\n#   AfterControlStatement: false\n#   AfterEnum:       false\n#   AfterFunction:   false\n#   AfterNamespace:  false\n#   AfterObjCDeclaration: false\n#   AfterStruct:     false\n#   AfterUnion:      false\n#   BeforeCatch:     false\n#   BeforeElse:      false\n#   IndentBraces:    false\n# BreakBeforeBinaryOperators: None\n# BreakBeforeBraces: Attach\n# BreakBeforeTernaryOperators: true\n# BreakConstructorInitializersBeforeComma: false\n# BreakAfterJavaFieldAnnotations: false\n# BreakStringLiterals: true\nColumnLimit: 120\n# CommentPragmas:  '^ IWYU pragma:'\n# ConstructorInitializerAllOnOneLineOrOnePerLine: false\n# ConstructorInitializerIndentWidth: 4\n# ContinuationIndentWidth: 4\n# Cpp11BracedListStyle: true\n# DerivePointerAlignment: false\n# DisableFormat:   false\n# ExperimentalAutoDetectBinPacking: false\n# ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\n# IncludeIsMainRegex: '$'\n# IndentCaseLabels: false\nIndentWidth: 4\n# IndentWrappedFunctionNames: false\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\n# KeepEmptyLinesAtTheStartOfBlocks: true\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\n# MaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# ObjCBlockIndentWidth: 2\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\n# PenaltyBreakBeforeFirstCallParameter: 19\n# PenaltyBreakComment: 300\n# PenaltyBreakFirstLessLess: 120\n# PenaltyBreakString: 1000\n# PenaltyExcessCharacter: 1000000\n# PenaltyReturnTypeOnItsOwnLine: 60\n# PointerAlignment: Right\n# ReflowComments:  true\nSortIncludes: true\n# SpaceAfterCStyleCast: false\n# SpaceAfterTemplateKeyword: true\n# SpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: Never\n# SpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\n# SpacesInAngles:  false\n# SpacesInContainerLiterals: true\n# SpacesInCStyleCastParentheses: false\n# SpacesInParentheses: false\n# SpacesInSquareBrackets: false\nStandard: Cpp11\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.0576171875,
          "content": "# Checks that will be implemented in future PRs:\n# performance-unnecessary-value-param, hints to ~110 issues. Be careful with implementing the suggested changes of this one, as auto-fixes may break the code\n# bugprone-forwarding-reference-overload probably should be enabled and fixed.\n# clang-diagnostic-float-equal can be fixed by using _a from Catch::literals\n# bugprone-exception-escape due to main being a bit simple in examples\n# modernize-avoid-c-arrays trips up in TEMPLATE_TEST_CASE catch macro\n# modernize-return-braced-init-list triggers on lambdas ?\n# modernize-make-unique requires C++14\n# modernize-type_traits requires C++17\n# readability-avoid-const-params-in-decls Affected by the pre-compile split\n\nChecks: |\n  *bugprone*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-forwarding-reference-overload,\n  -bugprone-exception-escape,\n  clang-analyzer-optin.cplusplus.VirtualCall,\n  clang-analyzer-optin.performance.Padding,\n  -clang-diagnostic-float-equal,\n  cppcoreguidelines-init-variables,\n  cppcoreguidelines-prefer-member-initializer,\n  cppcoreguidelines-pro-type-static-cast-downcast,\n  cppcoreguidelines-slicing,\n  google-*,\n  -google-runtime-references,\n  llvm-include-order,\n  llvm-namespace-comment,\n  misc-definitions-in-headers,\n  misc-misplaced-const,\n  misc-non-copyable-objects,\n  misc-static-assert,\n  misc-throw-by-value-catch-by-reference,\n  misc-throw-by-value-catch-by-reference,\n  misc-uniqueptr-reset-release,\n  misc-unused-parameters,\n  modernize*,\n  -modernize-use-trailing-return-type,\n  -modernize-concat-nested-namespaces,\n  -modernize-return-braced-init-list,\n  -modernize-make-unique,\n  -modernize-type-traits,\n  -modernize-macro-to-enum,\n  *performance*,\n  -performance-unnecessary-value-param,\n  -performance-inefficient-string-concatenation,\n  readability-const-return-type,\n  readability-container-size-empty,\n  readability-delete-null-pointer,\n  readability-else-after-return,\n  readability-implicit-bool-conversion,\n  readability-inconsistent-declaration-parameter-name,\n  readability-make-member-function-const,\n  readability-misplaced-array-index,\n  readability-non-const-parameter,\n  readability-qualified-auto,\n  readability-redundant-function-ptr-dereference,\n  readability-redundant-smartptr-get,\n  readability-redundant-string-cstr,\n  readability-simplify-subscript-expr,\n  readability-static-accessed-through-instance,\n  readability-static-definition-in-anonymous-namespace,\n  readability-string-compare,\n  readability-suspicious-call-argument,\n  readability-uniqueptr-delete-release,\n\nCheckOptions:\n  - key: google-readability-braces-around-statements.ShortStatementLines\n    value: \"3\"\n  - key: performance-for-range-copy.WarnOnAllAutoCopies\n    value: true\n  - key: performance-inefficient-string-concatenation.StrictMode\n    value: true\n  - key: performance-unnecessary-value-param.AllowedTypes\n    value: \"exception_ptr$;\"\n  - key: readability-implicit-bool-conversion.AllowPointerConditions\n    value: true\n  - key: modernize-use-nodiscard.ReplacementString\n    value: \"CLI11_NODISCARD\"\n\nHeaderFilterRegex: \"CLI.*hpp\"\n\nFormatStyle: file\n# WarningsAsErrors: \"*\"\n"
        },
        {
          "name": ".cmake-format.yaml",
          "type": "blob",
          "size": 0.109375,
          "content": "format:\n  line_width: 99\n\n# Causes a few issues - can be solved later, possibly.\nmarkup:\n  enable_markup: false\n"
        },
        {
          "name": ".codacy.yml",
          "type": "blob",
          "size": 0.232421875,
          "content": "---\nengines:\n  rubocop:\n    enabled: true\n  duplication:\n    enabled: true\n  metrics:\n    enabled: true\n  coverage:\n    enabled: false\nlanguages:\n\nexclude_paths:\n  - \"fuzz/**/*\"\n  - \"fuzz/*\"\n  - \"scripts/**/*\"\n  - \"scripts/*\"\n  - \"**.md\"\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1943359375,
          "content": "ignore:\n  - \"tests\"\n  - \"examples\"\n  - \"book\"\n  - \"docs\"\n  - \"test_package\"\n  - \"fuzz\"\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.171875,
          "content": "root = true\n\n[*]\nindent_style = space\ninsert_final_newline = true\nend_of_line = lf\ntrim_trailing_whitespace = true\n\n[*.cpp,*.hpp,*.py]\nindent_size = 4\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2734375,
          "content": "a.out*\n*.swp\n/*build*\n/test_package/build\n/Makefile\n/CMakeFiles/*\n/cmake_install.cmake\n/*.kdev4\n/.vscode\n/html/*\n!/meson.build\n/CMakeUserPresets.json\n/bazel-*\n/MODULE.bazel.lock\n\n/node_modules/*\n/package.json\n/yarn.lock\n/CLI11.hpp\n\n/subprojects/Catch2-*\n/subprojects/packagecache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.5654296875,
          "content": "exclude: ^(.github/workflows/|docs/img/|tests/fuzzFail)\nci:\n  autoupdate_commit_msg: \"chore(deps): pre-commit.ci autoupdate\"\n  autofix_commit_msg: \"style: pre-commit.ci fixes\"\n\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: check-yaml\n      - id: check-toml\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n      - id: trailing-whitespace\n      - id: check-shebang-scripts-are-executable\n      - id: check-executables-have-shebangs\n      - id: debug-statements\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v19.1.6\n    hooks:\n      - id: clang-format\n        types_or: [c++, c, cuda]\n\n  - repo: https://github.com/cheshirekow/cmake-format-precommit\n    rev: v0.6.13\n    hooks:\n      - id: cmake-format\n        additional_dependencies: [pyyaml]\n\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: \"v4.0.0-alpha.8\"\n    hooks:\n      - id: prettier\n        types_or: [yaml, markdown, html, css, scss, javascript, json]\n        args: [--prose-wrap=always]\n\n  - repo: https://github.com/markdownlint/markdownlint\n    rev: v0.12.0\n    hooks:\n      - id: markdownlint\n        args: [\"--style=scripts/mdlint_style.rb\"]\n        # Uncomment on macOS - Apple has deprecated Ruby, so macOS is stuck on 2.6\n        # language_version: 3.1.2\n\n  # - repo: local\n  #   hooks:\n  #     - id: remarklint\n  #       name: remarklint\n  #       language: node\n  #       entry: remark\n  #       types: [markdown]\n  #       args: [\"--frail\", \"--quiet\"]\n  #       additional_dependencies:\n  #         [\n  #           remark,\n  #           remark-lint,\n  #           remark-cli,\n  #           remark-preset-lint-recommended,\n  #           remark-lint-list-item-indent,\n  #           remark-lint-no-undefined-references,\n  #         ]\n\n  - repo: local\n    hooks:\n      - id: disallow-caps\n        name: Disallow improper capitalization\n        language: pygrep\n        entry: PyBind|Numpy|Cmake|CCache|PyTest|Github\n        exclude: .pre-commit-config.yaml\n\n  - repo: local\n    hooks:\n      - id: avoid-msvc-macro\n        name: Avoid MSVC <=2017 min/max macro (use extra parens)\n        language: pygrep\n        entry: \\b(min|max)\\(\n        exclude: .pre-commit-config.yaml\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        args: [\"-L\", \"atleast,ans,doub,inout,AtMost\"]\n"
        },
        {
          "name": ".remarkrc",
          "type": "blob",
          "size": 0.1669921875,
          "content": "{\n  \"plugins\": [\n    \"remark-preset-lint-recommended\",\n    [\"remark-lint-list-item-indent\", \"space\"],\n    [\"remark-lint-no-undefined-references\", {\"allow\": [\"^1\"]}]\n  ]\n}\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.22265625,
          "content": "cc_library(\n    name = \"cli11\",\n    srcs = glob([\"src/**/*.cpp\"]),\n    hdrs = glob([\"include/**/*.hpp\"]),\n    local_defines = [\"CLI11_COMPILE\"],\n    strip_include_prefix = \"/include\",\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 54.17578125,
          "content": "# Changelog\n\n## Unreleased\n\n- add mechanism to allow option groups to be hidden and all options be\n  considered part of the parent for help display\n\n## Version 2.4: Unicode and TOML support\n\nThis version adds Unicode support, support for TOML standard including multiline\nstrings, digit separators, string escape sequences,and dot notation. An initial\nround of a fuzzer was added to testing which has caught several bugs related to\nconfig file processing, and a few other edge cases not previously observed.\n\n- Add Unicode support and bug fixes [#804][], [#923][], [#876][], [#848][],\n  [#832][], [#987][]\n- Match TOML standard for string and numerical entries, multiline strings\n  [#968][], [#967][],[#964][], [#935][]\n- Add validation for environmental variables [#926][]\n- Add an escape string transform [#970][]\n- Add A REVERSE multi-option policy to support multiple config files and other\n  applications [#918][]\n- Add usage message replacement [#768][]\n- Allow using dot notation for subcommand arguments such as `--sub1.field`\n  [#789][]\n- Bugfix: Fuzzing tests and fixes [#930][], [#905][], [#874][], [#846][]\n- Bugfix: Missing coverage tests [#928][]\n- Bugfix: CMake package and package config tests and fixes [#916][]\n- Bugfix: Support for Windows ARM compilation and tests [#913][], [#914][]\n- Bugfix: Environmental variable checks in non-triggered subcommands [#904][]\n- Bugfix: Environmental variables were not being correctly process by config\n  pointer [#891][]\n- Bugfix: Undefined behavior in `sum_string_vector` [#893][]\n- Bugfix: Warnings and updates for CUDA 11 support [#851][]\n- Backend: Add tests for newer compilers (lost with Travis CI) [#972][]\n- Backend: Increase minimum CMake to 3.5 [#898][]\n- Backend: Remove integrated Conan support (provided now by Conan center)\n  [#853][]\n- Tests: Support Catch2 Version 3 [#896][], [#980][]\n\n[#768]: https://github.com/CLIUtils/CLI11/pull/768\n[#789]: https://github.com/CLIUtils/CLI11/pull/789\n[#804]: https://github.com/CLIUtils/CLI11/pull/804\n[#832]: https://github.com/CLIUtils/CLI11/pull/832\n[#846]: https://github.com/CLIUtils/CLI11/pull/846\n[#848]: https://github.com/CLIUtils/CLI11/pull/848\n[#851]: https://github.com/CLIUtils/CLI11/pull/851\n[#853]: https://github.com/CLIUtils/CLI11/pull/853\n[#874]: https://github.com/CLIUtils/CLI11/pull/874\n[#876]: https://github.com/CLIUtils/CLI11/pull/876\n[#891]: https://github.com/CLIUtils/CLI11/pull/891\n[#893]: https://github.com/CLIUtils/CLI11/pull/893\n[#896]: https://github.com/CLIUtils/CLI11/pull/896\n[#898]: https://github.com/CLIUtils/CLI11/pull/898\n[#904]: https://github.com/CLIUtils/CLI11/pull/904\n[#905]: https://github.com/CLIUtils/CLI11/pull/905\n[#913]: https://github.com/CLIUtils/CLI11/pull/913\n[#914]: https://github.com/CLIUtils/CLI11/pull/914\n[#916]: https://github.com/CLIUtils/CLI11/pull/916\n[#918]: https://github.com/CLIUtils/CLI11/pull/918\n[#923]: https://github.com/CLIUtils/CLI11/pull/923\n[#926]: https://github.com/CLIUtils/CLI11/pull/926\n[#928]: https://github.com/CLIUtils/CLI11/pull/928\n[#930]: https://github.com/CLIUtils/CLI11/pull/930\n[#935]: https://github.com/CLIUtils/CLI11/pull/935\n[#964]: https://github.com/CLIUtils/CLI11/pull/964\n[#967]: https://github.com/CLIUtils/CLI11/pull/967\n[#968]: https://github.com/CLIUtils/CLI11/pull/968\n[#970]: https://github.com/CLIUtils/CLI11/pull/970\n[#972]: https://github.com/CLIUtils/CLI11/pull/972\n[#980]: https://github.com/CLIUtils/CLI11/pull/980\n[#987]: https://github.com/CLIUtils/CLI11/pull/987\n\n### Version 2.4.1: Missing header\n\nA transitive include that might be present in some standard libraries is now\nincluded directly. This also fixes a test on architectures that need libatomic\nlinked and fix an inadvertent breaking change regarding unused defaults for\nconfig files\n\n- Bugfix: Include cstdint [#996][]\n- Bugfix: Fix change in operation of config_ptr with unused default in the count\n  method [#1003][]\n- Tests: Include libatomic if required for fuzzing test [#1000][]\n\n[#996]: https://github.com/CLIUtils/CLI11/pull/996\n[#1000]: https://github.com/CLIUtils/CLI11/pull/1000\n[#1003]: https://github.com/CLIUtils/CLI11/pull/1003\n\n### Version 2.4.2: Build systems\n\nThis version improves support for alternative build systems, like Meson and\nBazel. The single-include file now is in its own subdirectory. Several smaller\nfixes as well.\n\n- Meson: fixes, cleanups, and modernizations [#1024][] & [#1025][]\n- Support building with Bazel [#1033][]\n- Restore non-arch dependent path for the pkgconfig file [#1012][]\n- Add `get_subcommand_no_throw` [#1016][]\n- Move single file to `single-include` folder [#1030][] & [#1036][]\n- Fixed `app.set_failure_message(...)` -> `app.failure_message(...)` [#1018][]\n- Add IWYU pragmas [#1008][]\n- Fix internal header include paths [#1011][]\n- Improved clarity in `RequiredError` [#1029][]\n- Added ability to use lexical_cast overloads constrained with enable_if\n  [#1021][]\n- Bug fixes in latest release related to environmental variable parsing from\n  option groups and unrecognized fields in a config file [#1005][]\n\n[#1005]: https://github.com/CLIUtils/CLI11/pull/1005\n[#1008]: https://github.com/CLIUtils/CLI11/pull/1008\n[#1011]: https://github.com/CLIUtils/CLI11/pull/1011\n[#1012]: https://github.com/CLIUtils/CLI11/pull/1012\n[#1016]: https://github.com/CLIUtils/CLI11/pull/1016\n[#1018]: https://github.com/CLIUtils/CLI11/pull/1018\n[#1021]: https://github.com/CLIUtils/CLI11/pull/1021\n[#1024]: https://github.com/CLIUtils/CLI11/pull/1024\n[#1025]: https://github.com/CLIUtils/CLI11/pull/1025\n[#1029]: https://github.com/CLIUtils/CLI11/pull/1029\n[#1030]: https://github.com/CLIUtils/CLI11/pull/1030\n[#1033]: https://github.com/CLIUtils/CLI11/pull/1033\n[#1036]: https://github.com/CLIUtils/CLI11/pull/1036\n\n## Version 2.3: Precompilation Support\n\nThis version adds a pre-compiled mode to CLI11, which allows you to precompile\nthe library, saving time on incremental rebuilds, making CLI11 more competitive\non compile time with classic compiled CLI libraries. The header-only mode is\nstill default, and is not yet distributed via binaries.\n\n- Add `CLI11_PRECOMPILED` as an option [#762][]\n- Bugfix: Include `<functional>` in `FormatterFwd` [#727][]\n- Bugfix: Add missing `Macros.hpp` to `Error.hpp` [#755][]\n- Bugfix: Fix subcommand callback trigger [#733][]\n- Bugfix: Variable rename to avoid warning [#734][]\n- Bugfix: `split_program_name` single file name error [#740][]\n- Bugfix: Better support for min/max overrides on MSVC [#741][]\n- Bugfix: Support MSVC 2022 [#748][]\n- Bugfix: Support negated flag in config file [#775][]\n- Bugfix: Better errors for some confusing config file situations [#781][]\n- Backend: Restore coverage testing (lost with Travis CI) [#747][]\n\n[#727]: https://github.com/CLIUtils/CLI11/pull/727\n[#733]: https://github.com/CLIUtils/CLI11/pull/733\n[#734]: https://github.com/CLIUtils/CLI11/pull/734\n[#740]: https://github.com/CLIUtils/CLI11/pull/740\n[#741]: https://github.com/CLIUtils/CLI11/pull/741\n[#747]: https://github.com/CLIUtils/CLI11/pull/747\n[#748]: https://github.com/CLIUtils/CLI11/pull/748\n[#755]: https://github.com/CLIUtils/CLI11/pull/755\n[#762]: https://github.com/CLIUtils/CLI11/pull/762\n[#775]: https://github.com/CLIUtils/CLI11/pull/775\n[#781]: https://github.com/CLIUtils/CLI11/pull/781\n\n### Version 2.3.1: Missing implementation\n\nA function implementation was missing after the pre-compile move, missed due to\nthe fact we lost 100% after losing coverage checking. We are working on filling\nout 100% coverage again to ensure this doesn't happen again!\n\n- Bugfix: `App::get_option_group` implementation missing [#793][]\n- Bugfix: Fix spacing when setting an empty footer [#796][]\n- Bugfix: Address Klocwork static analysis checking issues [#785][]\n\n[#785]: https://github.com/CLIUtils/CLI11/pull/785\n[#793]: https://github.com/CLIUtils/CLI11/pull/793\n[#796]: https://github.com/CLIUtils/CLI11/pull/796\n\n### Version 2.3.2: Minor maintenance\n\nThis version provides a few fixes collected over the last three months before\nadding features for 2.4.\n\n- Bugfix: Consistently use ADL for `lexical_cast`, making it easier to extend\n  for custom template types [#820][]\n- Bugfix: Tweak the parsing of files for flags with `disable_flag_override`\n  [#800][]\n- Bugfix: Handle out of bounds long long [#807][]\n- Bugfix: Spacing of `make_description` min option output [#808][]\n- Bugfix: Print last parsed subcommand's help message [#822][]\n- Bugfix: Avoid floating point warning in GCC 12 [#803][]\n- Bugfix: Fix a few gcc warnings [#813][]\n- Backend: Max CMake tested 3.22 -> 3.24 [#823][]\n\n[#800]: https://github.com/CLIUtils/CLI11/pull/800\n[#803]: https://github.com/CLIUtils/CLI11/pull/803\n[#807]: https://github.com/CLIUtils/CLI11/pull/807\n[#808]: https://github.com/CLIUtils/CLI11/pull/808\n[#813]: https://github.com/CLIUtils/CLI11/pull/813\n[#820]: https://github.com/CLIUtils/CLI11/pull/820\n[#822]: https://github.com/CLIUtils/CLI11/pull/822\n[#823]: https://github.com/CLIUtils/CLI11/pull/823\n\n## Version 2.2: Option and Configuration Flexibility\n\nNew features include support for output of an empty vector, a summing option\npolicy that can be applied more broadly, and an option to validate optional\narguments to discriminate from positional arguments. A new validator to check\nfor files on a default path is included to allow one or more default paths for\nconfiguration files or other file arguments. A number of bug fixes and code\ncleanup for various build configurations. Clean up of some error outputs and\nextension of existing capability to new types or situations.\n\nThere is a possible minor breaking change in behavior of certain types which\nwrapped an integer, such as `std::atomic<int>` or `std::optional<int>` when used\nin a flag. The default behavior is now as a single argument value vs. summing\nall the arguments. The default summing behavior is now restricted to pure\nintegral types, int64_t, int, uint32_t, etc. Use the new `sum` multi option\npolicy to revert to the older behavior. The summing behavior on wrapper types\nwas not originally intended.\n\n- Add `MultiOptionPolicy::Sum` and refactor the `add_flag` to fix a bug when\n  using `std::optional<bool>` as type. [#709][]\n- Add support for an empty vector result in TOML and as a default string.\n  [#660][]\n- Add `.validate_optional_arguments()` to support discriminating positional\n  arguments from vector option arguments. [#668][]\n- Add `CLI::FileOnDefaultPath` to check for files on a specified default path.\n  [#698][]\n- Change default value display in help messages from `=XXXX` to `[XXXXX]` to\n  make it clearer. [#666][]\n- Modify the Range Validator to support additional types and clean up the error\n  output. [#690][]\n- Bugfix: The trigger on parse modifier did not work on positional argument.s\n  [#713][]\n- Bugfix: The single header file generation was missing custom namespace\n  generation. [#707][]\n- Bugfix: Clean up File Error handling in the argument processing. [#678][]\n- Bugfix: Fix a stack overflow error if nameless commands had fallthrough.\n  [#665][]\n- Bugfix: A subcommand callback could be executed multiple times if it was a\n  member of an option group. [#666][]\n- Bugfix: Fix an issue with vectors of multi argument types where partial\n  argument sets did not result in an error. [#661][]\n- Bugfix: Fix an issue with type the template matching on C++20 and add some CI\n  builds for C++20. [#663][]\n- Bugfix: Fix typo in C++20 detection on MSVC. [#706][]\n- Bugfix: An issue where the detection of RTTI being disabled on certain MSVC\n  platforms did not disable the use of dynamic cast calls. [#666][]\n- Bugfix: Resolve strict-overflow warning on some GCC compilers. [#666][]\n- Backend: Add additional tests concerning the use of aliases for option groups\n  in config files. [#666][]\n- Build: Add support for testing in meson and cleanup symbolic link generation.\n  [#701][], [#697][]\n- Build: Support building in WebAssembly. [#679][]\n\n[#660]: https://github.com/CLIUtils/CLI11/pull/660\n[#661]: https://github.com/CLIUtils/CLI11/pull/661\n[#663]: https://github.com/CLIUtils/CLI11/pull/663\n[#665]: https://github.com/CLIUtils/CLI11/pull/665\n[#666]: https://github.com/CLIUtils/CLI11/pull/666\n[#668]: https://github.com/CLIUtils/CLI11/pull/668\n[#678]: https://github.com/CLIUtils/CLI11/pull/678\n[#679]: https://github.com/CLIUtils/CLI11/pull/679\n[#690]: https://github.com/CLIUtils/CLI11/pull/690\n[#697]: https://github.com/CLIUtils/CLI11/pull/697\n[#698]: https://github.com/CLIUtils/CLI11/pull/698\n[#701]: https://github.com/CLIUtils/CLI11/pull/701\n[#706]: https://github.com/CLIUtils/CLI11/pull/706\n[#707]: https://github.com/CLIUtils/CLI11/pull/707\n[#709]: https://github.com/CLIUtils/CLI11/pull/709\n[#713]: https://github.com/CLIUtils/CLI11/pull/713\n\n## Version 2.1: Names and callbacks\n\nThe name restrictions for options and subcommands are now much looser, allowing\na wider variety of characters than before, even spaces can be used (use quotes\nto include a space in most shells). The default configuration parser was\nimproved, allowing your configuration to sit in a larger file. And option\ncallbacks have a few new settings, allowing them to be run even if the option is\nnot passed, or every time the option is parsed.\n\n- Option/subcommand name restrictions have been relaxed. Most characters are now\n  allowed. [#627][]\n- The config parser can accept streams, specify a specific section, and inline\n  comment characters are supported [#630][]\n- `force_callback` & `trigger_on_parse` added, allowing a callback to always run\n  on parse even if not present or every time the option is parsed [#631][]\n- Bugfix(cmake): Only add `CONFIGURE_DEPENDS` if CLI11 is the main project\n  [#633][]\n- Bugfix(cmake): Ensure the cmake/pkg-config files install to a arch independent\n  path [#635][]\n- Bugfix: The single header file generation was missing the include guard.\n  [#620][]\n\n[#620]: https://github.com/CLIUtils/CLI11/pull/620\n[#627]: https://github.com/CLIUtils/CLI11/pull/627\n[#630]: https://github.com/CLIUtils/CLI11/pull/630\n[#631]: https://github.com/CLIUtils/CLI11/pull/631\n[#633]: https://github.com/CLIUtils/CLI11/pull/633\n[#635]: https://github.com/CLIUtils/CLI11/pull/635\n\n### Version 2.1.1: Quick Windows fix\n\n- A collision with `min`/`max` macros on Windows has been fixed. [#642][]\n- Tests pass with Boost again [#646][]\n- Running the pre-commit hooks in development no longer requires docker for\n  clang-format [#647][]\n\n[#642]: https://github.com/CLIUtils/CLI11/pull/642\n[#646]: https://github.com/CLIUtils/CLI11/pull/646\n[#647]: https://github.com/CLIUtils/CLI11/pull/647\n\n## Version 2.1.2: Better subproject builds\n\n- Use `main` for the main branch of the repository [#657][]\n- Bugfix(cmake): Enforce at least C++11 when using CMake target [#656][]\n- Build: Don't run doxygen and CTest includes if a submodule [#656][]\n- Build: Avoid a warning on CMake 3.22 [#656][]\n- Build: Support compiling the tests with an external copy of Catch2 [#653][]\n\n[#653]: https://github.com/CLIUtils/CLI11/pull/653\n[#656]: https://github.com/CLIUtils/CLI11/pull/656\n[#657]: https://github.com/CLIUtils/CLI11/pull/657\n\n## Version 2.0: Simplification\n\nThis version focuses on cleaning up deprecated functionality, and some minor\ndefault changes. The config processing is TOML compliant now. Atomics and\ncomplex numbers are directly supported, along with other container improvements.\nA new version flag option has finally been added. Subcommands are significantly\nimproved with new features and bugfixes for corner cases. This release contains\na lot of backend cleanup, including a complete overhaul of the testing system\nand single file generation system.\n\n- Built-in config format is TOML compliant now [#435][]\n  - Support multiline TOML [#528][]\n  - Support for configurable quotes [#599][]\n  - Support short/positional options in config mode [#443][]\n- More powerful containers, support for `%%` separator [#423][]\n- Support atomic types [#520][] and complex types natively [#423][]\n- Add a type validator `CLI::TypeValidator<TYPE>` [#526][]\n- Add a version flag easily [#452][], with help message [#601][]\n- Support `->silent()` on subcommands. [#529][]\n- Add alias section to help for subcommands [#545][]\n- Allow quotes to specify a program name [#605][]\n- Backend: redesigned MakeSingleFiles to have a higher level of manual control,\n  to support future features. [#546][]\n- Backend: moved testing from GTest to Catch2 [#574][]\n- Bugfix: avoid duplicated and missed calls to the final callback [#584][]\n- Bugfix: support embedded newlines in more places [#592][]\n- Bugfix: avoid listing helpall as a required flag [#530][]\n- Bugfix: avoid a clash with WINDOWS define [#563][]\n- Bugfix: the help flag didn't get processed when a config file was required\n  [#606][]\n- Bugfix: fix description of non-configurable subcommands in config [#604][]\n- Build: support pkg-config [#523][]\n\n> ### Converting from CLI11 1.9\n>\n> - Removed deprecated set commands, use validators instead. [#565][]\n> - The final \"defaulted\" bool has been removed, use `->capture_default_str()`\n>   instead. Use `app.option_defaults()->always_capture_default()` to set this\n>   for all future options. [#597][]\n> - Use `add_option` on a complex number instead of `add_complex`, which has\n>   been removed.\n\n[#423]: https://github.com/CLIUtils/CLI11/pull/423\n[#435]: https://github.com/CLIUtils/CLI11/pull/435\n[#443]: https://github.com/CLIUtils/CLI11/pull/443\n[#452]: https://github.com/CLIUtils/CLI11/pull/452\n[#520]: https://github.com/CLIUtils/CLI11/pull/520\n[#523]: https://github.com/CLIUtils/CLI11/pull/523\n[#526]: https://github.com/CLIUtils/CLI11/pull/526\n[#528]: https://github.com/CLIUtils/CLI11/pull/528\n[#529]: https://github.com/CLIUtils/CLI11/pull/529\n[#530]: https://github.com/CLIUtils/CLI11/pull/530\n[#545]: https://github.com/CLIUtils/CLI11/pull/545\n[#546]: https://github.com/CLIUtils/CLI11/pull/546\n[#563]: https://github.com/CLIUtils/CLI11/pull/563\n[#565]: https://github.com/CLIUtils/CLI11/pull/565\n[#574]: https://github.com/CLIUtils/CLI11/pull/574\n[#584]: https://github.com/CLIUtils/CLI11/pull/584\n[#592]: https://github.com/CLIUtils/CLI11/pull/592\n[#597]: https://github.com/CLIUtils/CLI11/pull/597\n[#599]: https://github.com/CLIUtils/CLI11/pull/599\n[#601]: https://github.com/CLIUtils/CLI11/pull/601\n[#604]: https://github.com/CLIUtils/CLI11/pull/604\n[#605]: https://github.com/CLIUtils/CLI11/pull/605\n[#606]: https://github.com/CLIUtils/CLI11/pull/606\n\n## Version 1.9: Config files and cleanup\n\nConfig file handling was revamped to fix common issues, and now supports reading\n[TOML](https://github.com/toml-lang/toml).\n\nAdding options is significantly more powerful with support for things like\n`std::tuple` and `std::array`, including with transforms. Several new\nconfiguration options were added to facilitate a wider variety of apps. GCC 4.7\nis no longer supported.\n\n- Config files refactored, supports TOML (may become default output in 2.0)\n  [#362][]\n- Added two template parameter form of `add_option`, allowing `std::optional` to\n  be supported without a special import [#285][]\n- `string_view` now supported in reasonable places [#300][], [#285][]\n- `immediate_callback`, `final_callback`, and `parse_complete_callback` added to\n  support controlling the App callback order [#292][], [#313][]\n- Multiple positional arguments maintain order if `positionals_at_end` is set.\n  [#306][]\n- Pair/tuple/array now supported, and validators indexed to specific components\n  in the objects [#307][], [#310][]\n- Footer callbacks supported [#309][]\n- Subcommands now support needs (including nameless subcommands) [#317][]\n- More flexible type size, more useful `add_complex` [#325][], [#370][]\n- Added new validators `CLI::NonNegativeNumber` and `CLI::PositiveNumber`\n  [#342][]\n- Transform now supports arrays [#349][]\n- Option groups can be hidden [#356][]\n- Add `CLI::deprecate_option` and `CLI::retire_option` functions [#358][]\n- More flexible and safer Option `default_val` [#387][]\n- Backend: Cleaner type traits [#286][]\n- Backend: File checking updates [#341][]\n- Backend: Using pre-commit to format, checked in GitHub Actions [#336][]\n- Backend: Clang-tidy checked again, CMake option now `CL11_CLANG_TIDY` [#390][]\n- Backend: Warning cleanup, more checks from klocwork [#350][], Effective C++\n  [#354][], clang-tidy [#360][], CUDA NVCC [#365][], cross compile [#373][],\n  sign conversion [#382][], and cpplint [#400][]\n- Docs: CLI11 Tutorial now hosted in the same repository [#304][], [#318][],\n  [#374][]\n- Bugfix: Fixed undefined behavior in `checked_multiply` [#290][]\n- Bugfix: `->check()` was adding the name to the wrong validator [#320][]\n- Bugfix: Resetting config option works properly [#301][]\n- Bugfix: Hidden flags were showing up in error printout [#333][]\n- Bugfix: Enum conversion no longer broken if stream operator added [#348][]\n- Build: The meson build system supported [#299][]\n- Build: GCC 4.7 is no longer supported, due mostly to GoogleTest. GCC 4.8+ is\n  now required. [#160][]\n- Build: Restructured significant portions of CMake build system [#394][]\n\n> ### Converting from CLI11 1.8\n>\n> - Some deprecated methods dropped\n>   - `add_set*` should be replaced with `->check`/`->transform` and\n>     `CLI::IsMember` since 1.8\n>   - `get_defaultval` was replaced by `get_default_str` in 1.8\n> - The true/false 4th argument to `add_option` is expected to be removed in\n>   2.0, use `->capture_default_str()` since 1.8\n\n[#160]: https://github.com/CLIUtils/CLI11/pull/160\n[#285]: https://github.com/CLIUtils/CLI11/pull/285\n[#286]: https://github.com/CLIUtils/CLI11/pull/286\n[#290]: https://github.com/CLIUtils/CLI11/pull/290\n[#292]: https://github.com/CLIUtils/CLI11/pull/292\n[#299]: https://github.com/CLIUtils/CLI11/pull/299\n[#300]: https://github.com/CLIUtils/CLI11/pull/300\n[#301]: https://github.com/CLIUtils/CLI11/pull/301\n[#304]: https://github.com/CLIUtils/CLI11/pull/304\n[#306]: https://github.com/CLIUtils/CLI11/pull/306\n[#307]: https://github.com/CLIUtils/CLI11/pull/307\n[#309]: https://github.com/CLIUtils/CLI11/pull/309\n[#310]: https://github.com/CLIUtils/CLI11/pull/310\n[#313]: https://github.com/CLIUtils/CLI11/pull/313\n[#317]: https://github.com/CLIUtils/CLI11/pull/317\n[#318]: https://github.com/CLIUtils/CLI11/pull/318\n[#320]: https://github.com/CLIUtils/CLI11/pull/320\n[#325]: https://github.com/CLIUtils/CLI11/pull/325\n[#333]: https://github.com/CLIUtils/CLI11/pull/333\n[#336]: https://github.com/CLIUtils/CLI11/pull/336\n[#341]: https://github.com/CLIUtils/CLI11/pull/341\n[#342]: https://github.com/CLIUtils/CLI11/pull/342\n[#348]: https://github.com/CLIUtils/CLI11/pull/348\n[#349]: https://github.com/CLIUtils/CLI11/pull/349\n[#350]: https://github.com/CLIUtils/CLI11/pull/350\n[#354]: https://github.com/CLIUtils/CLI11/pull/354\n[#356]: https://github.com/CLIUtils/CLI11/pull/356\n[#358]: https://github.com/CLIUtils/CLI11/pull/358\n[#360]: https://github.com/CLIUtils/CLI11/pull/360\n[#362]: https://github.com/CLIUtils/CLI11/pull/362\n[#365]: https://github.com/CLIUtils/CLI11/pull/365\n[#370]: https://github.com/CLIUtils/CLI11/pull/370\n[#373]: https://github.com/CLIUtils/CLI11/pull/373\n[#374]: https://github.com/CLIUtils/CLI11/pull/374\n[#382]: https://github.com/CLIUtils/CLI11/pull/382\n[#387]: https://github.com/CLIUtils/CLI11/pull/387\n[#390]: https://github.com/CLIUtils/CLI11/pull/390\n[#394]: https://github.com/CLIUtils/CLI11/pull/394\n[#400]: https://github.com/CLIUtils/CLI11/pull/400\n\n### Version 1.9.1: Backporting fixes\n\nThis is a patch version that backports fixes from the development of 2.0.\n\n- Support relative inclusion [#475][]\n- Fix cases where spaces in paths could break CMake support [#471][]\n- Fix an issue with string conversion [#421][]\n- Cross-compiling improvement for Conan.io [#430][]\n- Fix option group default propagation [#450][]\n- Fix for C++20 [#459][]\n- Support compiling with RTTI off [#461][]\n\n[#421]: https://github.com/CLIUtils/CLI11/pull/421\n[#430]: https://github.com/CLIUtils/CLI11/pull/430\n[#450]: https://github.com/CLIUtils/CLI11/pull/450\n[#459]: https://github.com/CLIUtils/CLI11/pull/459\n[#461]: https://github.com/CLIUtils/CLI11/pull/461\n[#471]: https://github.com/CLIUtils/CLI11/pull/471\n[#475]: https://github.com/CLIUtils/CLI11/pull/475\n\n## Version 1.8: Transformers, default strings, and flags\n\nSet handling has been completely replaced by a new backend that works as a\nValidator or Transformer. This provides a single interface instead of the 16\ndifferent functions in App. It also allows ordered collections to be used,\ncustom functions for filtering, and better help and error messages. You can also\nuse a collection of pairs (like `std::map`) to transform the match into an\noutput. Also new are inverted flags, which can cancel or reduce the count of\nflags, and can also support general flag types. A new `add_option_fn` lets you\nmore easily program CLI11 options with the types you choose. Vector options now\nsupport a custom separator. Apps can now be composed with unnamed subcommand\nsupport. The final bool \"defaults\" flag when creating options has been replaced\nby `->capture_default_str()` (ending an old limitation in construction made this\npossible); the old method is still available but may be removed in future\nversions.\n\n- Replaced default help capture: `.add_option(\"name\", value, \"\", True)` becomes\n  `.add_option(\"name\", value)->capture_default_str()` [#242][]\n- Added `.always_capture_default()` [#242][]\n- New `CLI::IsMember` validator replaces set validation [#222][]\n- `IsMember` also supports container of pairs, transform allows modification of\n  result [#228][]\n- Added new Transformers, `CLI::AsNumberWithUnit` and `CLI::AsSizeValue`\n  [#253][]\n- Much more powerful flags with different values [#211][], general types\n  [#235][]\n- `add_option` now supports bool due to unified bool handling [#211][]\n- Support for composable unnamed subcommands [#216][]\n- Reparsing is better supported with `.remaining_for_passthrough()` [#265][]\n- Custom vector separator using `->delimiter(char)` [#209][], [#221][], [#240][]\n- Validators added for IP4 addresses and positive numbers [#210][] and numbers\n  [#262][]\n- Minimum required Boost for optional Optionals has been corrected to 1.61\n  [#226][]\n- Positionals can stop options from being parsed with `app.positionals_at_end()`\n  [#223][]\n- Added `validate_positionals` [#262][]\n- Positional parsing is much more powerful [#251][], duplicates supported\n  [#247][]\n- Validators can be negated with `!` [#230][], and now handle tname functions\n  [#228][]\n- Better enum support and streaming helper [#233][] and [#228][]\n- Cleanup for shadow warnings [#232][]\n- Better alignment on multiline descriptions [#269][]\n- Better support for aarch64 [#266][]\n- Respect `BUILD_TESTING` only if CLI11 is the main project; otherwise,\n  `CLI11_TESTING` must be used [#277][]\n- Drop auto-detection of experimental optional and boost::optional; must be\n  enabled explicitly (too fragile) [#277][] [#279][]\n\n> ### Converting from CLI11 1.7\n>\n> - `.add_option(..., true)` should be replaced by\n>   `.add_option(...)->capture_default_str()` or\n>   `app.option_defaults()->always_capture_default()` can be used\n> - `app.add_set(\"--name\", value, {\"choice1\", \"choice2\"})` should become\n>   `app.add_option(\"--name\", value)->check(CLI::IsMember({\"choice1\", \"choice2\"}))`\n> - The `_ignore_case` version of this can be replaced by adding\n>   `CLI::ignore_case` to the argument list in `IsMember`\n> - The `_ignore_underscore` version of this can be replaced by adding\n>   `CLI::ignore_underscore` to the argument list in `IsMember`\n> - The `_ignore_case_underscore` version of this can be replaced by adding both\n>   functions listed above to the argument list in `IsMember`\n> - If you want an exact match to the original choice after one of the modifier\n>   functions matches, use `->transform` instead of `->check`\n> - The `_mutable` versions of this can be replaced by passing a pointer or\n>   shared pointer into `IsMember`\n> - An error with sets now produces a `ValidationError` instead of a\n>   `ConversionError`\n\n[#209]: https://github.com/CLIUtils/CLI11/pull/209\n[#210]: https://github.com/CLIUtils/CLI11/pull/210\n[#211]: https://github.com/CLIUtils/CLI11/pull/211\n[#216]: https://github.com/CLIUtils/CLI11/pull/216\n[#221]: https://github.com/CLIUtils/CLI11/pull/221\n[#222]: https://github.com/CLIUtils/CLI11/pull/222\n[#223]: https://github.com/CLIUtils/CLI11/pull/223\n[#226]: https://github.com/CLIUtils/CLI11/pull/226\n[#228]: https://github.com/CLIUtils/CLI11/pull/228\n[#230]: https://github.com/CLIUtils/CLI11/pull/230\n[#232]: https://github.com/CLIUtils/CLI11/pull/232\n[#233]: https://github.com/CLIUtils/CLI11/pull/233\n[#235]: https://github.com/CLIUtils/CLI11/pull/235\n[#240]: https://github.com/CLIUtils/CLI11/pull/240\n[#242]: https://github.com/CLIUtils/CLI11/pull/242\n[#247]: https://github.com/CLIUtils/CLI11/pull/247\n[#251]: https://github.com/CLIUtils/CLI11/pull/251\n[#253]: https://github.com/CLIUtils/CLI11/pull/253\n[#262]: https://github.com/CLIUtils/CLI11/pull/262\n[#265]: https://github.com/CLIUtils/CLI11/pull/265\n[#266]: https://github.com/CLIUtils/CLI11/pull/266\n[#269]: https://github.com/CLIUtils/CLI11/pull/269\n[#277]: https://github.com/CLIUtils/CLI11/pull/277\n[#279]: https://github.com/CLIUtils/CLI11/pull/279\n\n## Version 1.7: Parse breakup\n\nThe parsing procedure now maps much more sensibly to complex, nested subcommand\nstructures. Each phase of the parsing happens on all subcommands before moving\non with the next phase of the parse. This allows several features, like required\nenvironment variables, to work properly even through subcommand boundaries.\nPassing the same subcommand multiple times is better supported. Several new\nfeatures were added as well, including Windows style option support, parsing\nstrings directly, and ignoring underscores in names. Adding a set that you plan\nto change later must now be done with `add_mutable_set`.\n\n- Support Windows style options with `->allow_windows_style_options`. [#187][]\n  On by default on Windows. [#190][]\n- Added `parse(string)` to split up and parse a command-line style string\n  directly. [#186][]\n- Added `ignore_underscore` and related functions, to ignore underscores when\n  matching names. [#185][]\n- The default INI Config will now add quotes to strings with spaces [#195][]\n- The default message now will mention the help-all flag also if present\n  [#197][]\n- Added `->description` to set Option descriptions [#199][]\n- Mutating sets (introduced in Version 1.6) now have a clear add method,\n  `add_mutable_set*`, since the set reference should not expire [#200][]\n- Subcommands now track how many times they were parsed in a parsing process.\n  `count()` with no arguments will return the number of times a subcommand was\n  encountered. [#178][]\n- Parsing is now done in phases: `shortcurcuits`, `ini`, `env`, `callbacks`, and\n  `requirements`; all subcommands complete a phase before moving on. [#178][]\n- Calling parse multiple times is now officially supported without `clear`\n  (automatic). [#178][]\n- Dropped the mostly undocumented `short_circuit` property, as help flag parsing\n  is a bit more complex, and the default callback behavior of options now works\n  properly. [#179][]\n- Use the standard `BUILD_TESTING` over `CLI11_TESTING` if defined [#183][]\n- Cleanup warnings [#191][]\n- Remove deprecated names: `set_footer`, `set_name`, `set_callback`, and\n  `set_type_name`. Use without the `set_` instead. [#192][]\n\n> ### Converting from CLI11 1.6\n>\n> - `->short_circuit()` is no longer needed, just remove it if you were using\n>   it - raising an exception will happen in the proper place now without it.\n> - `->add_set*` becomes `->add_mutable_set*` if you were using the editable set\n>   feature\n> - `footer`, `name`, `callback`, and `type_name` must be used instead of the\n>   `set_*` versions (deprecated previously).\n\n[#178]: https://github.com/CLIUtils/CLI11/pull/178\n[#183]: https://github.com/CLIUtils/CLI11/pull/183\n[#185]: https://github.com/CLIUtils/CLI11/pull/185\n[#186]: https://github.com/CLIUtils/CLI11/pull/186\n[#187]: https://github.com/CLIUtils/CLI11/pull/187\n[#190]: https://github.com/CLIUtils/CLI11/pull/190\n[#191]: https://github.com/CLIUtils/CLI11/pull/191\n[#192]: https://github.com/CLIUtils/CLI11/pull/192\n[#197]: https://github.com/CLIUtils/CLI11/pull/197\n[#195]: https://github.com/CLIUtils/CLI11/issues/195\n[#199]: https://github.com/CLIUtils/CLI11/pull/199\n[#200]: https://github.com/CLIUtils/CLI11/pull/200\n\n### Version 1.7.1: Quick patch\n\nThis version provides a quick patch for a (correct) warning from GCC 8 for the\nwindows options code.\n\n- Fix for Windows style option parsing [#201][]\n- Improve `add_subcommand` when throwing an exception [#204][]\n- Better metadata for Conan package [#202][]\n\n[#201]: https://github.com/CLIUtils/CLI11/pull/201\n[#202]: https://github.com/CLIUtils/CLI11/pull/202\n[#204]: https://github.com/CLIUtils/CLI11/pull/204\n\n## Version 1.6: Formatting help\n\nAdded a new formatting system [#109][]. You can now set the formatter on Apps.\nThis has also simplified the internals of Apps and Options a bit by separating\nmost formatting code.\n\n- Added `CLI::Formatter` and `formatter` slot for apps, inherited.\n- `FormatterBase` is the minimum required.\n- `FormatterLambda` provides for the easy addition of an arbitrary function.\n- Added `help_all` support (not added by default).\n\nChanges to the help system (most normal users will not notice this):\n\n- Renamed `single_name` to `get_name(false, false)` (the default).\n- The old `get_name()` is now `get_name(false, true)`.\n- The old `get_pname()` is now `get_name(true, false)`.\n- Removed `help_*` functions.\n- Protected function `_has_help_positional` removed.\n- `format_help` can now be chained.\n- Added getters for the missing parts of options (help no longer uses any\n  private parts).\n- Help flags now use new `short_circuit` property to simplify parsing. [#121][]\n\nNew for Config file reading and writing [#121][]:\n\n- Overridable, bidirectional Config.\n- ConfigINI provided and used by default.\n- Renamed ini to config in many places.\n- Has `config_formatter()` and `get_config_formatter()`.\n- Dropped prefix argument from `config_to_str`.\n- Added `ConfigItem`.\n- Added an example of a custom config format using [nlohmann/json][]. [#138][]\n\nValidators are now much more powerful [#118][], all built in validators upgraded\nto the new form:\n\n- A subclass of `CLI::Validator` is now also accepted.\n- They now can set the type name to things like `PATH` and `INT in [1-4]`.\n- Validators can be combined with `&` and `|`.\n- Old form simple validators are still accepted.\n\nOther changes:\n\n- Fixing `parse(args)`'s `args` setting and ordering after parse. [#141][]\n- Replaced `set_custom_option` with `type_name` and `type_size` instead of\n  `set_custom_option`. Methods return `this`. [#136][]\n- Dropped `set_` on Option's `type_name`, `default_str`, and `default_val`.\n  [#136][]\n- Removed `set_` from App's `failure_message`, `footer`, `callback`, and `name`.\n  [#136][]\n- Fixed support `N<-1` for `type_size`. [#140][]\n- Added `->each()` to make adding custom callbacks easier. [#126][]\n- Allow empty options `add_option(\"-n\",{})` to be edited later with `each`\n  [#142][]\n- Added filter argument to `get_subcommands`, `get_options`; use empty filter\n  `{}` to avoid filtering.\n- Added `get_groups()` to get groups.\n- Better support for manual options with `get_option`, `set_results`, and\n  `empty`. [#119][]\n- `lname` and `sname` have getters, added `const get_parent`. [#120][]\n- Using `add_set` will now capture L-values for sets, allowing further\n  modification. [#113][]\n- Dropped duplicate way to run `get_type_name` (`get_typeval`).\n- Removed `requires` in favor of `needs` (deprecated in last version). [#112][]\n- Const added to argv. [#126][]\n\nBackend and testing changes:\n\n- Internally, `type_name` is now a lambda function; for sets, this reads the set\n  live. [#116][]\n- Cleaner tests without `app.reset()` (and `reset` is now `clear`). [#141][]\n- Better CMake policy handling. [#110][]\n- Includes are properly sorted. [#120][]\n- Testing (only) now uses submodules. [#111][]\n\n[#109]: https://github.com/CLIUtils/CLI11/pull/109\n[#110]: https://github.com/CLIUtils/CLI11/pull/110\n[#111]: https://github.com/CLIUtils/CLI11/pull/111\n[#112]: https://github.com/CLIUtils/CLI11/pull/112\n[#113]: https://github.com/CLIUtils/CLI11/issues/113\n[#116]: https://github.com/CLIUtils/CLI11/pull/116\n[#118]: https://github.com/CLIUtils/CLI11/pull/118\n[#119]: https://github.com/CLIUtils/CLI11/pull/119\n[#120]: https://github.com/CLIUtils/CLI11/pull/120\n[#121]: https://github.com/CLIUtils/CLI11/pull/121\n[#126]: https://github.com/CLIUtils/CLI11/pull/126\n[#136]: https://github.com/CLIUtils/CLI11/pull/136\n[#138]: https://github.com/CLIUtils/CLI11/pull/138\n[#140]: https://github.com/CLIUtils/CLI11/pull/140\n[#141]: https://github.com/CLIUtils/CLI11/pull/141\n[#142]: https://github.com/CLIUtils/CLI11/pull/142\n[nlohmann/json]: https://github.com/nlohmann/json\n\n### Version 1.6.1: Platform fixes\n\nThis version provides a few fixes for special cases, such as mixing with\n`Windows.h` and better defaults for systems like Hunter. The one new feature is\nthe ability to produce \"branded\" single file output for providing custom\nnamespaces or custom macro names.\n\n- Added fix and test for including Windows.h [#145][]\n- No longer build single file by default if main project, supports systems stuck\n  on Python 2.6 [#149][], [#151][]\n- Branding support for single file output [#150][]\n\n[#145]: https://github.com/CLIUtils/CLI11/pull/145\n[#149]: https://github.com/CLIUtils/CLI11/pull/149\n[#150]: https://github.com/CLIUtils/CLI11/pull/150\n[#151]: https://github.com/CLIUtils/CLI11/pull/151\n\n### Version 1.6.2: Help-all\n\nThis version fixes some formatting bugs with help-all. It also adds fixes for\nseveral warnings, including an experimental optional error on Clang 7. Several\nsmaller fixes.\n\n- Fixed help-all formatting [#163][]\n  - Printing help-all on nested command now fixed (App)\n  - Missing space after help-all restored (Default formatter)\n  - More detail printed on help all (Default formatter)\n  - Help-all subcommands get indented with inner blank lines removed (Default\n    formatter)\n  - `detail::find_and_replace` added to utilities\n- Fixed CMake install as subproject with `CLI11_INSTALL` flag. [#156][]\n- Fixed warning about local variable hiding class member with MSVC [#157][]\n- Fixed compile error with default settings on Clang 7 and libc++ [#158][]\n- Fixed special case of `--help` on subcommands (general fix planned for 1.7)\n  [#168][]\n- Removing an option with links [#179][]\n\n[#156]: https://github.com/CLIUtils/CLI11/issues/156\n[#157]: https://github.com/CLIUtils/CLI11/issues/157\n[#158]: https://github.com/CLIUtils/CLI11/issues/158\n[#163]: https://github.com/CLIUtils/CLI11/pull/163\n[#168]: https://github.com/CLIUtils/CLI11/issues/168\n[#179]: https://github.com/CLIUtils/CLI11/pull/179\n\n## Version 1.5: Optionals\n\nThis version introduced support for optionals, along with clarification and\nexamples of custom conversion overloads. Enums now have been dropped from the\nautomatic conversion system, allowing explicit protection for out-of-range ints\n(or a completely custom conversion). This version has some internal cleanup and\nimproved support for the newest compilers. Several bugs were fixed, as well.\n\nNote: This is the final release with `requires`, please switch to `needs`.\n\n- Fix unlimited short options eating two values before checking for positionals\n  when no space present [#90][]\n- Symmetric exclude text when excluding options, exclude can be called multiple\n  times [#64][]\n- Support for `std::optional`, `std::experimental::optional`, and\n  `boost::optional` added if `__has_include` is supported [#95][]\n- All macros/CMake variables now start with `CLI11_` instead of just `CLI_`\n  [#95][]\n- The internal stream was not being cleared before use in some cases. Fixed.\n  [#95][]\n- Using an enum now requires explicit conversion overload [#97][]\n- The separator `--` now is removed when it ends unlimited arguments [#100][]\n\nOther, non-user facing changes:\n\n- Added `Macros.hpp` with better C++ mode discovery [#95][]\n- Deprecated macros added for all platforms\n- C++17 is now tested on supported platforms [#95][]\n- Informational printout now added to CTest [#95][]\n- Better single file generation [#95][]\n- Added support for GTest on MSVC 2017 (but not in C++17 mode, will need next\n  version of GTest)\n- Types now have a specific size, separate from the expected number - cleaner\n  and more powerful internally [#92][]\n- Examples now run as part of testing [#99][]\n\n[#64]: https://github.com/CLIUtils/CLI11/issues/64\n[#90]: https://github.com/CLIUtils/CLI11/issues/90\n[#92]: https://github.com/CLIUtils/CLI11/issues/92\n[#95]: https://github.com/CLIUtils/CLI11/pull/95\n[#97]: https://github.com/CLIUtils/CLI11/pull/97\n[#99]: https://github.com/CLIUtils/CLI11/pull/99\n[#100]: https://github.com/CLIUtils/CLI11/pull/100\n\n### Version 1.5.1: Access\n\nThis patch release adds better access to the App programmatically, to assist\nwith writing custom converters to other formats. It also improves the help\noutput, and uses a new feature in CLI11 1.5 to fix an old \"quirk\" in the way\nunlimited options and positionals interact.\n\n- Make mixing unlimited positionals and options more intuitive [#102][]\n- Add missing getters `get_options` and `get_description` to App [#105][]\n- The app name now can be set, and will override the auto name if present\n  [#105][]\n- Add `(REQUIRED)` for required options [#104][]\n- Print simple name for Needs/Excludes [#104][]\n- Use Needs instead of Requires in help print [#104][]\n- Groups now are listed in the original definition order [#106][]\n\n[#102]: https://github.com/CLIUtils/CLI11/issues/102\n[#104]: https://github.com/CLIUtils/CLI11/pull/104\n[#105]: https://github.com/CLIUtils/CLI11/pull/105\n[#106]: https://github.com/CLIUtils/CLI11/pull/106\n\n### Version 1.5.2: LICENSE in single header mode\n\nThis is a quick patch release that makes LICENSE part of the single header file,\nmaking it easier to include. Minor cleanup from codacy. No significant code\nchanges from 1.5.1.\n\n### Version 1.5.3: Compiler compatibility\n\nThis version fixes older AppleClang compilers by removing the optimization for\ncasting. The minimum version of Boost Optional supported has been clarified to\nbe 1.58. CUDA 7.0 NVCC is now supported.\n\n### Version 1.5.4: Optionals\n\nThis version fixes the optional search in the single file version; some macros\nwere not yet defined when it did the search. You can define the\n`CLI11_*_OPTIONAL` macros to 0 if needed to eliminate the search.\n\n## Version 1.4: More feedback\n\nThis version adds lots of smaller fixes and additions after the refactor in\nversion 1.3. More ways to download and use CLI11 in CMake have been added. INI\nfiles have improved support.\n\n- Lexical cast is now more strict than before [#68][] and fails on overflow\n  [#84][]\n- Added `get_parent()` to access the parent from a subcommand\n- Added `ExistingPath` validator [#73][]\n- `app.allow_ini_extras()` added to allow extras in INI files [#70][]\n- Multiline INI comments now supported\n- Descriptions can now be written with `config_to_str` [#66][]\n- Double printing of error message fixed [#77][]\n- Renamed `requires` to `needs` to avoid C++20 keyword [#75][], [#82][]\n- MakeSingleHeader now works if outside of git [#78][]\n- Adding install support for CMake [#79][], improved support for `find_package`\n  [#83][], [#84][]\n- Added support for Conan.io [#83][]\n\n[#70]: https://github.com/CLIUtils/CLI11/issues/70\n[#75]: https://github.com/CLIUtils/CLI11/issues/75\n[#84]: https://github.com/CLIUtils/CLI11/pull/84\n[#83]: https://github.com/CLIUtils/CLI11/pull/83\n[#82]: https://github.com/CLIUtils/CLI11/pull/82\n[#79]: https://github.com/CLIUtils/CLI11/pull/79\n[#78]: https://github.com/CLIUtils/CLI11/pull/78\n[#77]: https://github.com/CLIUtils/CLI11/pull/77\n[#73]: https://github.com/CLIUtils/CLI11/pull/73\n[#68]: https://github.com/CLIUtils/CLI11/pull/68\n[#66]: https://github.com/CLIUtils/CLI11/pull/66\n\n## Version 1.3: Refactor\n\nThis version focused on refactoring several key systems to ensure correct\nbehavior in the interaction of different settings. Most caveats about features\nonly working on the main App have been addressed, and extra arguments have been\nreworked. Inheritance of defaults makes configuring CLI11 much easier without\nhaving to subclass. Policies add new ways to handle multiple arguments to match\nyour favorite CLI programs. Error messages and help messages are better and more\nflexible. Several bugs and odd behaviors in the parser have been fixed.\n\n- Added a version macro, `CLI11_VERSION`, along with `*_MAJOR`, `*_MINOR`, and\n  `*_PATCH`, for programmatic access to the version.\n- Reworked the way defaults are set and inherited; explicit control given to\n  user with `->option_defaults()`\n  [#48](https://github.com/CLIUtils/CLI11/pull/48)\n- Hidden options now are based on an empty group name, instead of special\n  \"hidden\" keyword [#48](https://github.com/CLIUtils/CLI11/pull/48)\n- `parse` no longer returns (so `CLI11_PARSE` is always usable)\n  [#37](https://github.com/CLIUtils/CLI11/pull/37)\n- Added `remaining()` and `remaining_size()`\n  [#37](https://github.com/CLIUtils/CLI11/pull/37)\n- `allow_extras` and `prefix_command` are now valid on subcommands\n  [#37](https://github.com/CLIUtils/CLI11/pull/37)\n- Added `take_last` to only take last value passed\n  [#40](https://github.com/CLIUtils/CLI11/pull/40)\n- Added `multi_option_policy` and shortcuts to provide more control than just a\n  take last policy [#59](https://github.com/CLIUtils/CLI11/pull/59)\n- More detailed error messages in a few cases\n  [#41](https://github.com/CLIUtils/CLI11/pull/41)\n- Footers can be added to help [#42](https://github.com/CLIUtils/CLI11/pull/42)\n- Help flags are easier to customize\n  [#43](https://github.com/CLIUtils/CLI11/pull/43)\n- Subcommand now support groups [#46](https://github.com/CLIUtils/CLI11/pull/46)\n- `CLI::RuntimeError` added, for easy exit with error codes\n  [#45](https://github.com/CLIUtils/CLI11/pull/45)\n- The clang-format script is now no longer \"hidden\"\n  [#48](https://github.com/CLIUtils/CLI11/pull/48)\n- The order is now preserved for subcommands (list and callbacks)\n  [#49](https://github.com/CLIUtils/CLI11/pull/49)\n- Tests now run individually, utilizing CMake 3.10 additions if possible\n  [#50](https://github.com/CLIUtils/CLI11/pull/50)\n- Failure messages are now customizable, with a shorter default\n  [#52](https://github.com/CLIUtils/CLI11/pull/52)\n- Some improvements to error codes\n  [#53](https://github.com/CLIUtils/CLI11/pull/53)\n- `require_subcommand` now offers a two-argument form and negative values on the\n  one-argument form are more useful\n  [#51](https://github.com/CLIUtils/CLI11/pull/51)\n- Subcommands no longer match after the max required number is obtained\n  [#51](https://github.com/CLIUtils/CLI11/pull/51)\n- Unlimited options no longer prioritize over remaining/unlimited positionals\n  [#51](https://github.com/CLIUtils/CLI11/pull/51)\n- Added `->transform` which modifies the string parsed\n  [#54](https://github.com/CLIUtils/CLI11/pull/54)\n- Changed of API in validators to `void(std::string &)` (const for users),\n  throwing providing nicer errors\n  [#54](https://github.com/CLIUtils/CLI11/pull/54)\n- Added `CLI::ArgumentMismatch` [#56](https://github.com/CLIUtils/CLI11/pull/56)\n  and fixed missing failure if one arg expected\n  [#55](https://github.com/CLIUtils/CLI11/issues/55)\n- Support for minimum unlimited expected arguments\n  [#56](https://github.com/CLIUtils/CLI11/pull/56)\n- Single internal arg parse function\n  [#56](https://github.com/CLIUtils/CLI11/pull/56)\n- Allow options to be disabled from INI file, rename `add_config` to\n  `set_config` [#60](https://github.com/CLIUtils/CLI11/pull/60)\n\n> ### Converting from CLI11 1.2\n>\n> - `app.parse` no longer returns a vector. Instead, use `app.remaining(true)`.\n> - `\"hidden\"` is no longer a special group name, instead use `\"\"`\n> - Validators API has changed to return an error string; use `.empty()` to get\n>   the old bool back\n> - Use `.set_help_flag` instead of accessing the help pointer directly\n>   (discouraged, but not removed yet)\n> - `add_config` has been renamed to `set_config`\n> - Errors thrown in some cases are slightly more specific\n\n## Version 1.2: Stability\n\nThis release focuses on making CLI11 behave properly in corner cases, and with\nconfig files on the command line. This includes fixes for a variety of reported\nissues. A few features were added to make life easier, as well; such as a new\nflag callback and a macro for the parse command.\n\n- Added functional form of flag\n  [#33](https://github.com/CLIUtils/CLI11/pull/33), automatic on C++14\n- Fixed Config file search if passed on command line\n  [#30](https://github.com/CLIUtils/CLI11/issues/30)\n- Added `CLI11_PARSE(app, argc, argv)` macro for simple parse commands (does not\n  support returning arg)\n- The name string can now contain spaces around commas\n  [#29](https://github.com/CLIUtils/CLI11/pull/29)\n- `set_default_str` now only sets string, and `set_default_val` will evaluate\n  the default string given [#26](https://github.com/CLIUtils/CLI11/issues/26)\n- Required positionals now take priority over subcommands\n  [#23](https://github.com/CLIUtils/CLI11/issues/23)\n- Extra requirements enforced by Travis\n\n## Version 1.1: Feedback\n\nThis release incorporates feedback from the release announcement. The examples\nare slowly being expanded, some corner cases improved, and some new\nfunctionality for tricky parsing situations.\n\n- Added simple support for enumerations, allow non-printable objects\n  [#12](https://github.com/CLIUtils/CLI11/issues/12)\n- Added `app.parse_order()` with original parse order\n  ([#13](https://github.com/CLIUtils/CLI11/issues/13),\n  [#16](https://github.com/CLIUtils/CLI11/pull/16))\n- Added `prefix_command()`, which is like `allow_extras` but ceases processing\n  and puts all remaining args in the remaining_args structure.\n  [#8](https://github.com/CLIUtils/CLI11/issues/8),\n  [#17](https://github.com/CLIUtils/CLI11/pull/17))\n- Removed Windows warning ([#10](https://github.com/CLIUtils/CLI11/issues/10),\n  [#20](https://github.com/CLIUtils/CLI11/pull/20))\n- Some improvements to CMake, detect Python and no dependencies on Python 2\n  (like Python 3) ([#18](https://github.com/CLIUtils/CLI11/issues/18),\n  [#21](https://github.com/CLIUtils/CLI11/pull/21))\n\n## Version 1.0: Official release\n\nThis is the first stable release for CLI11. Future releases will try to remain\nbackward compatible and will follow semantic versioning if possible. There were\na few small changes since version 0.9:\n\n- Cleanup using `clang-tidy` and `clang-format`\n- Small improvements to Timers, easier to subclass Error\n- Move to 3-Clause BSD license\n\n## Version 0.9: Polish\n\nThis release focused on cleaning up the most exotic compiler warnings, fixing a\nfew oddities of the config parser, and added a more natural method to check\nsubcommands.\n\n- Better CMake named target (CLI11)\n- More warnings added, fixed\n- Ini output now includes `=false` when `default_also` is true\n- Ini no longer lists the help pointer\n- Added test for inclusion in multiple files and linking, fixed issues (rarely\n  needed for CLI, but nice for tools)\n- Support for complex numbers\n- Subcommands now test true/false directly or with `->parsed()`, cleaner parse\n\n## Version 0.8: CLIUtils\n\nThis release moved the repository to the CLIUtils main organization.\n\n- Moved to CLIUtils on GitHub\n- Fixed docs build and a few links\n\n## Version 0.7: Code coverage 100%\n\nLots of small bugs fixed when adding code coverage, better in edge cases. Much\nmore powerful ini support.\n\n- Allow comments in ini files (lines starting with `;`)\n- Ini files support flags, vectors, subcommands\n- Added CodeCov code coverage reports\n- Lots of small bugfixes related to adding tests to increase coverage to 100%\n- Error handling now uses scoped enum in errors\n- Reparsing rules changed a little to accommodate Ini files. Callbacks are now\n  called when parsing INI, and reset any time results are added.\n- Adding extra utilities in full version only, `Timer` (not needed for parsing,\n  but useful for general CLI applications).\n- Better support for custom `add_options` like functions.\n\n## Version 0.6: Cleanup\n\nLots of cleanup and docs additions made it into this release. Parsing is simpler\nand more robust; fall through option added and works as expected; much more\nconsistent variable names internally.\n\n- Simplified parsing to use `vector<string>` only\n- Fixed fallthrough, made it optional as well (default: off): `.fallthrough()`.\n- Added string versions of `->requires()` and `->excludes()` for consistency.\n- Renamed protected members for internal consistency, grouped docs.\n- Added the ability to add a number to `.require_subcommand()`.\n\n## Version 0.5: Windows support\n\n- Allow `Hidden` options.\n- Throw `OptionAlreadyAdded` errors for matching subcommands or options, with\n  ignore-case included, tests\n- `->ignore_case()` added to subcommands, options, and `add_set_ignore_case`.\n  Subcommands inherit setting from parent App on creation.\n- Subcommands now can be \"chained\", that is, left over arguments can now include\n  subcommands that then get parsed. Subcommands are now a list\n  (`get_subcommands`). Added `got_subcommand(App_or_name)` to check for\n  subcommands.\n- Added `.allow_extras()` to disable error on failure. Parse returns a vector of\n  leftover options. Renamed error to `ExtrasError`, and now triggers on extra\n  options too.\n- Added `require_subcommand` to `App`, to simplify forcing subcommands. Do\n  **not** do `add_subcommand()->require_subcommand`, since that is the\n  subcommand, not the main `App`.\n- Added printout of ini file text given parsed options, skips flags.\n- Support for quotes and spaces in ini files\n- Fixes to allow support for Windows (added Appveyor) (Uses `-`, not `/` syntax)\n\n## Version 0.4: Ini support\n\n- Updates to help print\n- Removed `run`, please use `parse` unless you subclass and add it\n- Supports ini files mixed with command line, tested\n- Added Range for further Plumbum compatibility\n- Added function to print out ini file\n\n## Version 0.3: Plumbum compatibility\n\n- Added `->requires`, `->excludes`, and `->envname` from\n  [Plumbum](http://plumbum.readthedocs.io/en/latest/)\n- Supports `->mandatory` from Plumbum\n- More tests for help strings, improvements in formatting\n- Support type and set syntax in positionals help strings\n- Added help groups, with `->group(\"name\")` syntax\n- Added initial support for ini file reading with `add_config` option.\n- Supports GCC 4.7 again\n- Clang 3.5 now required for tests due to googlemock usage, 3.4 should still\n  work otherwise\n- Changes `setup` for an explicit help bool in constructor/`add_subcommand`\n\n## Version 0.2: Leaner and meaner\n\n- Moved to simpler syntax, where `Option` pointers are returned and operated on\n- Removed `make_` style options\n- Simplified Validators, now only requires `->check(function)`\n- Removed Combiners\n- Fixed pointers to Options, stored in `unique_ptr` now\n- Added `Option_p` and `App_p`, mostly for internal use\n- Startup sequence, including help flag, can be modified by subclasses\n\n## Version 0.1: First release\n\nFirst release before major cleanup. Still has make syntax and combiners; very\nclever syntax but not the best or most commonly expected way to work.\n"
        },
        {
          "name": "CLI11.CPack.Description.txt",
          "type": "blob",
          "size": 0.3505859375,
          "content": "CLI11 provides all the features you expect in a powerful command line parser, with a beautiful, minimal syntax and no dependencies beyond C++11. It is header only, and comes in a single file form for easy inclusion in projects. It is easy to use for small projects, but powerful enough for complex command line projects, and can be customized for frameworks.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.052734375,
          "content": "cmake_minimum_required(VERSION 3.10...3.31)\n# Note: this is a header only library. If you have an older CMake than 3.5,\n# just add the CLI11/include directory and that's all you need to do.\n\nset(VERSION_REGEX \"#define CLI11_VERSION[ \\t]+\\\"(.+)\\\"\")\n\n# Read in the line containing the version\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/include/CLI/Version.hpp\" VERSION_STRING\n     REGEX ${VERSION_REGEX})\n\n# Pick out just the version\nstring(REGEX REPLACE ${VERSION_REGEX} \"\\\\1\" VERSION_STRING \"${VERSION_STRING}\")\n\n# Add the project\nproject(\n  CLI11\n  LANGUAGES CXX\n  VERSION ${VERSION_STRING})\n\nlist(APPEND CMAKE_MODULE_PATH \"${CLI11_SOURCE_DIR}/cmake\")\n\n# Print the version number of CMake if this is the main project\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  message(STATUS \"CMake ${CMAKE_VERSION}\")\n\n  find_package(Doxygen)\n\n  if(NOT Doxygen_FOUND)\n    message(STATUS \"Doxygen not found, building docs has been disabled\")\n  endif()\n\n  include(CTest)\nelse()\n  if(NOT DEFINED BUILD_TESTING)\n    set(BUILD_TESTING OFF)\n  endif()\nendif()\n\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\nif(NOT CMAKE_VERSION VERSION_LESS 3.11)\n  include(FetchContent)\nendif()\n\nlist(APPEND force-libcxx \"CMAKE_CXX_COMPILER_ID STREQUAL \\\"Clang\\\"\")\nlist(APPEND force-libcxx \"CMAKE_SYSTEM_NAME STREQUAL \\\"Linux\\\"\")\nlist(APPEND force-libcxx \"CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME\")\n\nlist(APPEND build-docs \"CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME\")\nlist(APPEND build-docs \"NOT CMAKE_VERSION VERSION_LESS 3.11\")\nlist(APPEND build-docs \"Doxygen_FOUND\")\n\n# Necessary to support paths with spaces, see #457\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/docs\")\n  set(docs_EXIST TRUE)\nelse()\n  set(docs_EXIST FALSE)\nendif()\nlist(APPEND build-docs \"docs_EXIST\")\n\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/examples\")\n  set(examples_EXIST TRUE)\nelse()\n  set(examples_EXIST FALSE)\nendif()\n\noption(CLI11_WARNINGS_AS_ERRORS \"Turn all warnings into errors (for CI)\")\noption(CLI11_SINGLE_FILE \"Generate a single header file\")\noption(CLI11_PRECOMPILED \"Generate a precompiled static library instead of a header-only\" OFF)\ncmake_dependent_option(CLI11_SANITIZERS \"Download the sanitizers CMake config\" OFF\n                       \"NOT CMAKE_VERSION VERSION_LESS 3.13\" OFF)\n\ncmake_dependent_option(CLI11_BUILD_DOCS \"Build CLI11 documentation\" ON \"${build-docs}\" OFF)\n\ncmake_dependent_option(CLI11_BUILD_TESTS \"Build CLI11 tests\" ON\n                       \"BUILD_TESTING;CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME\" OFF)\n\ncmake_dependent_option(CLI11_BUILD_EXAMPLES \"Build CLI11 examples\" ON\n                       \"CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME;${examples_EXIST}\" OFF)\n\ncmake_dependent_option(CLI11_BUILD_EXAMPLES_JSON \"Build CLI11 json example\" OFF\n                       \"CLI11_BUILD_EXAMPLES;NOT CMAKE_VERSION VERSION_LESS 3.11\" OFF)\n\ncmake_dependent_option(CLI11_SINGLE_FILE_TESTS \"Duplicate all the tests for a single file build\"\n                       OFF \"BUILD_TESTING;CLI11_SINGLE_FILE\" OFF)\n\ncmake_dependent_option(CLI11_INSTALL \"Install the CLI11 folder to include during install process\"\n                       ON \"CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME\" OFF)\n\ncmake_dependent_option(\n  CLI11_FORCE_LIBCXX \"Force clang to use libc++ instead of libstdc++ (Linux only)\" OFF\n  \"${force-libcxx}\" OFF)\n\ncmake_dependent_option(\n  CLI11_CUDA_TESTS \"Build the tests with NVCC to check for warnings there - requires CMake 3.9+\"\n  OFF \"CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME\" OFF)\n\nif(CLI11_PRECOMPILED AND CLI11_SINGLE_FILE)\n  # Sanity check\n  message(FATAL_ERROR \"CLI11_PRECOMPILE and CLI11_SINGLE_FILE are mutually exclusive\")\nendif()\n\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND NOT DEFINED CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 11)\nendif()\n\nif(NOT DEFINED CMAKE_CXX_EXTENSIONS)\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nif(NOT DEFINED CMAKE_CXX_STANDARD_REQUIRED)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n# Allow IDE's to group targets into folders\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nendif()\n\ninclude(CLI11Warnings)\n\n# Sources\n\nset(CLI11_headerLoc \"${PROJECT_SOURCE_DIR}/include/CLI\")\n\nset(CLI11_headers\n    ${CLI11_headerLoc}/App.hpp\n    ${CLI11_headerLoc}/Config.hpp\n    ${CLI11_headerLoc}/ConfigFwd.hpp\n    ${CLI11_headerLoc}/Error.hpp\n    ${CLI11_headerLoc}/Formatter.hpp\n    ${CLI11_headerLoc}/FormatterFwd.hpp\n    ${CLI11_headerLoc}/Macros.hpp\n    ${CLI11_headerLoc}/Option.hpp\n    ${CLI11_headerLoc}/Split.hpp\n    ${CLI11_headerLoc}/StringTools.hpp\n    ${CLI11_headerLoc}/TypeTools.hpp\n    ${CLI11_headerLoc}/Validators.hpp\n    ${CLI11_headerLoc}/Version.hpp\n    ${CLI11_headerLoc}/Encoding.hpp\n    ${CLI11_headerLoc}/Argv.hpp)\n\nset(CLI11_impl_headers\n    ${CLI11_headerLoc}/impl/App_inl.hpp\n    ${CLI11_headerLoc}/impl/Config_inl.hpp\n    ${CLI11_headerLoc}/impl/Formatter_inl.hpp\n    ${CLI11_headerLoc}/impl/Option_inl.hpp\n    ${CLI11_headerLoc}/impl/Split_inl.hpp\n    ${CLI11_headerLoc}/impl/StringTools_inl.hpp\n    ${CLI11_headerLoc}/impl/Validators_inl.hpp\n    ${CLI11_headerLoc}/impl/Encoding_inl.hpp\n    ${CLI11_headerLoc}/impl/Argv_inl.hpp)\n\nset(CLI11_library_headers ${CLI11_headerLoc}/CLI.hpp ${CLI11_headerLoc}/Timer.hpp)\n\n# build the fuzzing example or fuzz entry point\nadd_subdirectory(fuzz)\n\nadd_subdirectory(src)\nadd_subdirectory(single-include)\n\n# Allow tests to be run on CUDA\nif(CLI11_CUDA_TESTS)\n  enable_language(CUDA)\n\n  # Print out warning and error numbers\n  set(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} -Xcudafe --display_error_number\")\nendif()\n\n# This folder should be installed\nif(CLI11_INSTALL)\n\n  # Use find_package on the installed package\n  # Since we have no custom code, we can directly write this\n  # to Config.cmake (otherwise we'd have a custom config and would\n  # import Targets.cmake\n\n  # Add the version in a CMake readable way\n  configure_file(\"cmake/CLI11ConfigVersion.cmake.in\" \"CLI11ConfigVersion.cmake\" @ONLY)\n\n  # Make version available in the install\n  install(FILES \"${PROJECT_BINARY_DIR}/CLI11ConfigVersion.cmake\"\n          DESTINATION \"${CMAKE_INSTALL_DATADIR}/cmake/CLI11\")\n\n  # Install the export target as a file\n  install(\n    EXPORT CLI11Targets\n    FILE CLI11Config.cmake\n    NAMESPACE CLI11::\n    DESTINATION \"${CMAKE_INSTALL_DATADIR}/cmake/CLI11\")\n\n  # Use find_package on the installed package\n  export(\n    TARGETS CLI11\n    NAMESPACE CLI11::\n    FILE CLI11Targets.cmake)\n\n  include(cmake/CLI11GeneratePkgConfig.cmake)\n\n  # Register in the user cmake package registry\n  export(PACKAGE CLI11)\nendif()\n\nif(CLI11_BUILD_TESTS)\n  include(CTest)\n  add_subdirectory(tests)\nendif()\n\nif(CLI11_BUILD_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(CLI11_BUILD_DOCS)\n  add_subdirectory(docs)\nendif()\n\n# From a build system, this might not be included.\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/book\")\n  add_subdirectory(book)\nendif()\n\n# Packaging support\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  set(CPACK_PACKAGE_VENDOR \"github.com/CLIUtils/CLI11\")\n  set(CPACK_PACKAGE_CONTACT \"https://${CPACK_PACKAGE_VENDOR}\")\n  set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}) # Automatic in CMake 3.12+\n  set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR}) # Automatic in CMake 3.12+\n  set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH}) # Automatic in CMake 3.12+\n  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Command line parser with simple and intuitive interface\")\n  set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n  set(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\n  set(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/CLI11.CPack.Description.txt\")\n  set(CPACK_SOURCE_GENERATOR \"TGZ;ZIP\")\n\n  # CPack collects *everything* except what's listed here.\n  set(CPACK_SOURCE_IGNORE_FILES\n      /.git\n      /dist\n      /.*build.*\n      /\\\\\\\\.DS_Store\n      /.*\\\\\\\\.egg-info\n      /var\n      /azure-pipelines.yml\n      /.ci\n      /docs\n      /examples\n      /test_package\n      /book\n      /.travis.yml\n      .swp\n      /.all-contributorsrc\n      /.pre-commit.*yaml)\n\n  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"all\")\n  set(CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\n  set(CPACK_DEBIAN_PACKAGE_NAME \"libcli11-dev\")\n\n  include(CPack)\nendif()\n"
        },
        {
          "name": "CPPLINT.cfg",
          "type": "blob",
          "size": 1.1630859375,
          "content": "set noparent\nlinelength=120  # As in .clang-format\n\n# Unused filters\nfilter=-build/c++11  # Reports e.g. chrono and thread, which overlap with Chromium's API. Not applicable to general C++ projects.\nfilter=-build/c++17  # google only restrictions not relevant\nfilter=-build/include_order  # Requires unusual include order that encourages creating not self-contained headers\nfilter=-build/include_subdir  # Prevents including files in current directory for whatever reason\nfilter=-readability/nolint  # Conflicts with clang-tidy\nfilter=-readability/check  # Catch uses CHECK(a == b) (Tests only)\nfilter=-build/namespaces  # Currently using it for one test (Tests only)\nfilter=-runtime/references  # Requires fundamental change of API, don't see need for this\nfilter=-runtime/string  # Requires not using static const strings which makes thing really annoying\nfilter=-whitespace/blank_line  # Unnecessarily strict with blank lines that otherwise help with readability\nfilter=-whitespace/indent  # Requires strange 3-space indent of private/protected/public markers\nfilter=-whitespace/parens,-whitespace/braces  # Conflict with clang-format\nfilter=-whitespace/newline # handled by clang-format\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.548828125,
          "content": "CLI11 2.2 Copyright (c) 2017-2025 University of Cincinnati, developed by Henry\nSchreiner under NSF AWARD 1414736. All rights reserved.\n\nRedistribution and use in source and binary forms of CLI11, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.0908203125,
          "content": "module(name = \"cli11\")\n\nbazel_dep(name = \"catch2\", version = \"3.5.4\", dev_dependency = True)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 118.458984375,
          "content": "# CLI11: Command line parser for C++11\n\n![CLI11 Logo](./docs/CLI11_300.png)\n\n[![Build Status Azure][azure-badge]][azure]\n[![Actions Status][actions-badge]][actions-link]\n[![Code Coverage][codecov-badge]][codecov]\n[![Codacy Badge][codacy-badge]][codacy-link]\n[![License: BSD][license-badge]](./LICENSE) [![DOI][doi-badge]][doi-link]\n\n[![Gitter chat][gitter-badge]][gitter]\n[![Latest GHA release][releases-badge]][github releases]\n[![Latest release][repology-badge]][repology]\n[![Conan.io][conan-badge]][conan-link]\n[![Conda Version][conda-badge]][conda-link]\n[![Try CLI11 2.4 online][wandbox-badge]][wandbox-link]\n\n[What's new](./CHANGELOG.md) • [Documentation][gitbook] • [API\nReference][api-docs]\n\nCLI11 is a command line parser for C++11 and beyond that provides a rich feature\nset with a simple and intuitive interface.\n\n## Table of Contents\n\n- [CLI11: Command line parser for C++11](#cli11-command-line-parser-for-c11)\n  - [Table of Contents](#table-of-contents)\n  - [Background](#background)\n    - [Introduction](#introduction)\n    - [Why write another CLI parser?](#why-write-another-cli-parser)\n    - [Other parsers](#other-parsers)\n    - [Features not supported by this library](#features-not-supported-by-this-library)\n  - [Install](#install)\n  - [Usage](#usage)\n    - [Adding options](#adding-options)\n      - [Option types](#option-types)\n      - [Example](#example)\n      - [Option options](#option-options)\n      - [Validators](#validators)\n        - [Transforming Validators](#transforming-validators)\n        - [Validator operations](#validator-operations)\n        - [Custom Validators](#custom-validators)\n        - [Querying Validators](#querying-validators)\n      - [Getting results](#getting-results)\n    - [Subcommands](#subcommands)\n      - [Subcommand options](#subcommand-options)\n      - [Callbacks](#callbacks)\n      - [Option groups](#option-groups)\n    - [Configuration file](#configuration-file)\n    - [Inheriting defaults](#inheriting-defaults)\n    - [Formatting](#formatting)\n    - [Subclassing](#subclassing)\n    - [How it works](#how-it-works)\n    - [Unicode support](#unicode-support)\n      - [Note on using Unicode paths](#note-on-using-unicode-paths)\n    - [Utilities](#utilities)\n    - [Other libraries](#other-libraries)\n  - [API](#api)\n  - [Examples](#examples)\n  - [Contribute](#contribute)\n  - [License](#license)\n\nFeatures that were added in the last released minor version are marked with\n\"🆕\". Features only available in main are marked with \"🚧\".\n\n## Background\n\n### Introduction\n\nCLI11 provides all the features you expect in a powerful command line parser,\nwith a beautiful, minimal syntax and no dependencies beyond C++11. It is header\nonly, and comes in a single file form for easy inclusion in projects. It is easy\nto use for small projects, but powerful enough for complex command line\nprojects, and can be customized for frameworks. It is tested on [Azure][] and\n[GitHub Actions][actions-link], and was originally used by the [GooFit GPU\nfitting framework][goofit]. It was inspired by [`plumbum.cli`][plumbum] for\nPython. CLI11 has a user friendly introduction in this README, a more in-depth\ntutorial [GitBook][], as well as [API documentation][api-docs] generated by\nTravis. See the [changelog](./CHANGELOG.md) or [GitHub Releases][] for details\nfor current and past releases. Also see the [Version 1.0 post][], [Version 1.3\npost][], [Version 1.6 post][], or [Version 2.0 post][] for more information.\n\nYou can be notified when new releases are made by subscribing to\n<https://github.com/CLIUtils/CLI11/releases.atom> on an RSS reader, like Feedly,\nor use the releases mode of the GitHub watching tool.\n\n### Why write another CLI parser?\n\nAn acceptable CLI parser library should be all of the following:\n\n- Easy to include (i.e., header only, one file if possible, **no external\n  requirements**).\n- Short, simple syntax: This is one of the main reasons to use a CLI parser, it\n  should make variables from the command line nearly as easy to define as any\n  other variables. If most of your program is hidden in CLI parsing, this is a\n  problem for readability.\n- C++11 or better: Should work with GCC 4.8+ (default on CentOS/RHEL 7), Clang\n  3.4+, AppleClang 7+, NVCC 7.0+, or MSVC 2015+.\n- Work on Linux, macOS, and Windows.\n- Well tested on all common platforms and compilers. \"Well\" is defined as having\n  good coverage measured by [CodeCov][].\n- Clear help printing.\n- Nice error messages.\n- Standard shell idioms supported naturally, like grouping flags, a positional\n  separator, etc.\n- Easy to execute, with help, parse errors, etc. providing correct exit and\n  details.\n- Easy to extend as part of a framework that provides \"applications\" to users.\n- Usable subcommand syntax, with support for multiple subcommands, nested\n  subcommands, option groups, and optional fallthrough (explained later).\n- Ability to add a configuration file (`TOML`, `INI`, or custom format), and\n  produce it as well.\n- Produce real values that can be used directly in code, not something you have\n  pay compute time to look up, for HPC applications.\n- Work with common types, simple custom types, and extensible to exotic types.\n- Permissively licensed.\n\n### Other parsers\n\n<details><summary>The major CLI parsers for C++ include, with my biased opinions: (click to expand)</summary><p>\n\n| Library                             | My biased opinion                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Boost Program Options][]           | A great library if you already depend on Boost, but its pre-C++11 syntax is really odd and setting up the correct call in the main function is poorly documented (and is nearly a page of code). A simple wrapper for the Boost library was originally developed, but was discarded as CLI11 became more powerful. The idea of capturing a value and setting it originated with Boost PO. [See this comparison.][cli11-po-compare] |\n| [The Lean Mean C++ Option Parser][] | One header file is great, but the syntax is atrocious, in my opinion. It was quite impractical to wrap the syntax or to use in a complex project. It seems to handle standard parsing quite well.                                                                                                                                                                                                                                  |\n| [TCLAP][]                           | The not-quite-standard command line parsing causes common shortcuts to fail. It also seems to be poorly supported, with only minimal bugfixes accepted. Header only, but in quite a few files. Has not managed to get enough support to move to GitHub yet. No subcommands. Produces wrapped values.                                                                                                                               |\n| [Cxxopts][]                         | C++11, single file, and nice CMake support, but requires regex, therefore GCC 4.8 (CentOS 7 default) does not work. Syntax closely based on Boost PO, so not ideal but familiar.                                                                                                                                                                                                                                                   |\n| [DocOpt][]                          | Completely different approach to program options in C++11, you write the docs and the interface is generated. Too fragile and specialized.                                                                                                                                                                                                                                                                                         |\n\nAfter I wrote this, I also found the following libraries:\n\n| Library                 | My biased opinion                                                                                                                                                                    |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [GFlags][]              | The Google Commandline Flags library. Uses macros heavily, and is limited in scope, missing things like subcommands. It provides a simple syntax and supports config files/env vars. |\n| [GetOpt][]              | Very limited C solution with long, convoluted syntax. Does not support much of anything, like help generation. Always available on UNIX, though (but in different flavors).          |\n| [ProgramOptions.hxx][]  | Interesting library, less powerful and no subcommands. Nice callback system.                                                                                                         |\n| [Args][]                | Also interesting, and supports subcommands. I like the optional-like design, but CLI11 is cleaner and provides direct value access, and is less verbose.                             |\n| [Argument Aggregator][] | I'm a big fan of the [fmt][] library, and the try-catch statement looks familiar. :thumbsup: Doesn't seem to support subcommands.                                                    |\n| [Clara][]               | Simple library built for the excellent [Catch][] testing framework. Unique syntax, limited scope.                                                                                    |\n| [Argh!][]               | Very minimalistic C++11 parser, single header. Don't have many features. No help generation?!?! At least it's exception-free.                                                        |\n| [CLI][]                 | Custom language and parser. Huge build-system overkill for very little benefit. Last release in 2009, but still occasionally active.                                                 |\n| [argparse][]            | C++17 single file argument parser. Design seems similar to CLI11 in some ways. The author has several other interesting projects.                                                    |\n| [lyra][]                | a simple header only parser with composable options. Might work well for simple standardized parsing                                                                                 |\n\nSee [Awesome C++][] for a less-biased list of parsers. You can also find other\nsingle file libraries at [Single file libs][].\n\n</p></details>\n<br/>\n\nNone of these libraries fulfill all the above requirements, or really even come\nclose. As you probably have already guessed, CLI11 does. So, this library was\ndesigned to provide a great syntax, good compiler compatibility, and minimal\ninstallation fuss.\n\n### Features not supported by this library\n\nThere are some other possible \"features\" that are intentionally not supported by\nthis library:\n\n- Completion of partial options, such as Python's `argparse` supplies for\n  incomplete arguments. It's better not to guess. Most third party command line\n  parsers for python actually reimplement command line parsing rather than using\n  argparse because of this perceived design flaw (recent versions do have an\n  option to disable it).\n- Autocomplete: This might eventually be added to both Plumbum and CLI11, but it\n  is not supported yet.\n\n## Install\n\nTo use, the most common methods are described here additional methods and\ndetails are available at [installation][]:\n\n- All-in-one local header: Copy `CLI11.hpp` from the [most recent\n  release][github releases] into your include directory, and you are set. This\n  is combined from the source files for every release. This includes the entire\n  command parser library, but does not include separate utilities (like `Timer`,\n  `AutoTimer`). The utilities are completely self contained and can be copied\n  separately.\n- All-in-one global header: Like above, but copying the file to a shared folder\n  location like `/opt/CLI11`. Then, the C++ include path has to be extended to\n  point at this folder. With CMake 3.10+, use `include_directories(/opt/CLI11)`\n- For other methods including using CMake, conan or vcpkg and some specific\n  instructions for GCC 8 or WASI see [installation][].\n\n## Usage\n\n### Adding options\n\nTo set up, add options, and run, your main function will look something like\nthis:\n\n```cpp\nint main(int argc, char** argv) {\n    CLI::App app{\"App description\"};\n    argv = app.ensure_utf8(argv);\n\n    std::string filename = \"default\";\n    app.add_option(\"-f,--file\", filename, \"A help string\");\n\n    CLI11_PARSE(app, argc, argv);\n    return 0;\n}\n```\n\nFor more information about 🆕`ensure_utf8` the section on\n[Unicode support](#unicode-support) below. The 🆕`ensure_utf8` function is only\navailable in main currently and not in a release.\n\n<details><summary>Note: If you don't like macros, this is what that macro expands to: (click to expand)</summary><p>\n\n```cpp\ntry {\n    app.parse(argc, argv);\n} catch (const CLI::ParseError &e) {\n    return app.exit(e);\n}\n```\n\nThe try/catch block ensures that `-h,--help` or a parse error will exit with the\ncorrect return code (selected from `CLI::ExitCodes`). (The return here should be\ninside `main`). You should not assume that the option values have been set\ninside the catch block; for example, help flags intentionally short-circuit all\nother processing for speed and to ensure required options and the like do not\ninterfere.\n\n</p></details>\n</br>\n\nThe initialization is just one line, adding options is just two each. The parse\nmacro is just one line (or 5 for the contents of the macro). After the app runs,\nthe filename will be set to the correct value if it was passed, otherwise it\nwill be set to the default. You can check to see if this was passed on the\ncommand line with `app.count(\"--file\")`.\n\n#### Option types\n\nWhile all options internally are the same type, there are several ways to add an\noption depending on what you need. The supported values are:\n\n```cpp\n// Add options\napp.add_option(option_name, help_str=\"\")\n\napp.add_option(option_name,\n               variable_to_bind_to, // bool, char(see note), int, float, vector, enum, std::atomic, or string-like, or anything with a defined conversion from a string or that takes an int, double, or string in a constructor. Also allowed are tuples, std::array or std::pair. Also supported are complex numbers, wrapper types, and containers besides vectors of any other supported type.\n               help_string=\"\")\n\napp.add_option_function<type>(option_name,\n               function <void(const type &value)>, // type can be any type supported by add_option\n               help_string=\"\")\n\n// char as an option type is supported before 2.0 but in 2.0 it defaulted to allowing single non numerical characters in addition to the numeric values.\n\n// There is a template overload which takes two template parameters the first is the type of object to assign the value to, the second is the conversion type.  The conversion type should have a known way to convert from a string, such as any of the types that work in the non-template version.  If XC is a std::pair and T is some non pair type.  Then a two argument constructor for T is called to assign the value.  For tuples or other multi element types, XC must be a single type or a tuple like object of the same size as the assignment type\napp.add_option<typename T, typename XC>(option_name,\n               T &output, // output must be assignable or constructible from a value of type XC\n               help_string=\"\")\n\n// Add flags\napp.add_flag(option_name,\n             help_string=\"\")\n\napp.add_flag(option_name,\n             variable_to_bind_to, // bool, int, float, complex, containers, enum, std::atomic, or string-like, or any singular object with a defined conversion from a string like add_option\n             help_string=\"\")\n\napp.add_flag_function(option_name,\n             function <void(std::int64_t count)>,\n             help_string=\"\")\n\napp.add_flag_callback(option_name,function<void(void)>,help_string=\"\")\n\n// Add subcommands\nApp* subcom = app.add_subcommand(name, description);\n\nOption_group *app.add_option_group(name,description);\n```\n\nAn option name may start with any character except ('-', ' ', '\\n', and '!').\nFor long options, after the first character all characters are allowed except\n('=',':','{',' ', '\\n'). For the `add_flag*` functions '{' and '!' have special\nmeaning which is why they are not allowed. Names are given as a comma separated\nstring, with the dash or dashes. An option or flag can have as many names as you\nwant, and afterward, using `count`, you can use any of the names, with dashes as\nneeded, to count the options. One of the names is allowed to be given without\nproceeding dash(es); if present the option is a positional option, and that name\nwill be used on the help line for its positional form. The string `++` is also\nnot allowed as option name due to its use as an array separator and marker on\nconfig files.\n\nThe `add_option_function<type>(...` function will typically require the template\nparameter be given unless a `std::function` object with an exact match is\npassed. The type can be any type supported by the `add_option` function. The\nfunction should throw an error (`CLI::ConversionError` or `CLI::ValidationError`\npossibly) if the value is not valid.\n\nThe two parameter template overload can be used in cases where you want to\nrestrict the input such as\n\n```cpp\ndouble val\napp.add_option<double,unsigned int>(\"-v\",val);\n```\n\nwhich would first verify the input is convertible to an `unsigned int` before\nassigning it. Or using some variant type\n\n```cpp\nusing vtype=std::variant<int, double, std::string>;\n vtype v1;\napp.add_option<vtype,std:string>(\"--vs\",v1);\napp.add_option<vtype,int>(\"--vi\",v1);\napp.add_option<vtype,double>(\"--vf\",v1);\n```\n\notherwise the output would default to a string. The `add_option` can be used\nwith any integral or floating point types, enumerations, or strings. Or any type\nthat takes an int, double, or std\\::string in an assignment operator or\nconstructor. If an object can take multiple varieties of those, std::string\ntakes precedence, then double then int. To better control which one is used or\nto use another type for the underlying conversions use the two parameter\ntemplate to directly specify the conversion type.\n\nTypes such as (std or boost) `optional<int>`, `optional<double>`, and\n`optional<string>` and any other wrapper types are supported directly. For\npurposes of CLI11 wrapper types are those which `value_type` definition. See\n[CLI11 Advanced Topics/Custom Converters][] for information on how you can add\nyour own converters for additional types.\n\nVector types can also be used in the two parameter template overload\n\n```cpp\nstd::vector<double> v1;\napp.add_option<std::vector<double>,int>(\"--vs\",v1);\n```\n\nwould load a vector of doubles but ensure all values can be represented as\nintegers.\n\nAutomatic direct capture of the default string is disabled when using the two\nparameter template. Use `set_default_str(...)` or\n`->default_function(std::string())` to set the default string or capture\nfunction directly for these cases.\n\nFlag options specified through the `add_flag*` functions allow a syntax for the\noption names to default particular options to a false value or any other value\nif some flags are passed. For example:\n\n```cpp\napp.add_flag(\"--flag,!--no-flag\",result,\"help for flag\");\n```\n\nspecifies that if `--flag` is passed on the command line result will be true or\ncontain a value of 1. If `--no-flag` is passed `result` will contain false or -1\nif `result` is a signed integer type, or 0 if it is an unsigned type. An\nalternative form of the syntax is more explicit: `\"--flag,--no-flag{false}\"`;\nthis is equivalent to the previous example. This also works for short form\noptions `\"-f,!-n\"` or `\"-f,-n{false}\"`. If `variable_to_bind_to` is anything but\nan integer value the default behavior is to take the last value given, while if\n`variable_to_bind_to` is an integer type the behavior will be to sum all the\ngiven arguments and return the result. This can be modified if needed by\nchanging the `multi_option_policy` on each flag (this is not inherited). The\ndefault value can be any value. For example if you wished to define a numerical\nflag:\n\n```cpp\napp.add_flag(\"-1{1},-2{2},-3{3}\",result,\"numerical flag\")\n```\n\nUsing any of those flags on the command line will result in the specified number\nin the output. Similar things can be done for string values, and enumerations,\nas long as the default value can be converted to the given type.\n\nOn a `C++14` compiler, you can pass a callback function directly to `.add_flag`,\nwhile in C++11 mode you'll need to use `.add_flag_function` if you want a\ncallback function. The function will be given the number of times the flag was\npassed. You can throw a relevant `CLI::ParseError` to signal a failure.\n\n#### Example\n\n- `\"one,-o,--one\"`: Valid as long as not a flag, would create an option that can\n  be specified positionally, or with `-o` or `--one`\n- `\"this\"` Can only be passed positionally\n- `\"-a,-b,-c\"` No limit to the number of non-positional option names\n\nThe add commands return a pointer to an internally stored `Option`. This option\ncan be used directly to check for the count (`->count()`) after parsing to avoid\na string based lookup.\n\n#### Option options\n\nBefore parsing, you can set the following options:\n\n- `->required()`: The program will quit if this option is not present. This is\n  `mandatory` in Plumbum, but required options seems to be a more standard term.\n  For compatibility, `->mandatory()` also works.\n- `->expected(N)`: Take `N` values instead of as many as possible, only for\n  vector args. If negative, require at least `-N`; end with `--` or another\n  recognized option or subcommand.\n- `->expected(MIN,MAX)`: Set a range of expected values to accompany an option.\n  `expected(0,1)` is the equivalent of making a flag.\n- `->type_name(typename)`: Set the name of an Option's type (`type_name_fn`\n  allows a function instead)\n- `->type_size(N)`: Set the intrinsic size of an option value. The parser will\n  require multiples of this number if negative. Most of the time this is\n  detected automatically though can be modified for specific use cases.\n- `->type_size(MIN,MAX)`: Set the intrinsic size of an option to a range.\n- `->needs(opt)`: This option requires another option to also be present, opt is\n  an `Option` pointer. Options can be removed from the `needs` with\n  `remove_needs(opt)`. The option can also be specified with a string containing\n  the name of the option\n- `->excludes(opt)`: This option cannot be given with `opt` present, opt is an\n  `Option` pointer. Can also be given as a string containing the name of the\n  option. Options can be removed from the excludes list with\n  `->remove_excludes(opt)`\n- `->envname(name)`: Gets the value from the environment if present and not\n  passed on the command line. 🆕 The value must also pass any validators to be\n  used.\n- `->group(name)`: The help group to put the option in. No effect for positional\n  options. Defaults to `\"Options\"`. Options given an empty string will not show\n  up in the help print (hidden).\n- `->ignore_case()`: Ignore the case on the command line (also works on\n  subcommands, does not affect arguments).\n- `->ignore_underscore()`: Ignore any underscores in the options names (also\n  works on subcommands, does not affect arguments). For example \"option_one\"\n  will match with \"optionone\". This does not apply to short form options since\n  they only have one character\n- `->disable_flag_override()`: From the command line long form flag options can\n  be assigned a value on the command line using the `=` notation `--flag=value`.\n  If this behavior is not desired, the `disable_flag_override()` disables it and\n  will generate an exception if it is done on the command line. The `=` does not\n  work with short form flag options.\n- `->allow_extra_args(true/false)`: If set to true the option will take an\n  unlimited number of arguments like a vector, if false it will limit the number\n  of arguments to the size of the type used in the option. Default value depends\n  on the nature of the type use, containers default to true, others default to\n  false.\n- `->delimiter(char)`: Allows specification of a custom delimiter for separating\n  single arguments into vector arguments, for example specifying\n  `->delimiter(',')` on an option would result in `--opt=1,2,3` producing 3\n  elements of a vector and the equivalent of --opt 1 2 3 assuming opt is a\n  vector value.\n- `->description(str)`: Set/change the description.\n- `->multi_option_policy(CLI::MultiOptionPolicy::Throw)`: Set the multi-option\n  policy. Shortcuts available: `->take_last()`, `->take_first()`,`->take_all()`,\n  and `->join()`. This will only affect options expecting 1 argument or bool\n  flags (which do not inherit their default but always start with a specific\n  policy). `->join(delim)` can also be used to join with a specific delimiter.\n  This equivalent to calling `->delimiter(delim)` and `->join()`. Valid values\n  are `CLI::MultiOptionPolicy::Throw`, `CLI::MultiOptionPolicy::Throw`,\n  `CLI::MultiOptionPolicy::TakeLast`, `CLI::MultiOptionPolicy::TakeFirst`,\n  `CLI::MultiOptionPolicy::Join`, `CLI::MultiOptionPolicy::TakeAll`,\n  `CLI::MultiOptionPolicy::Sum`, and `CLI::MultiOptionPolicy::Reverse` 🆕.\n- `->check(std::string(const std::string &), validator_name=\"\",validator_description=\"\")`:\n  Define a check function. The function should return a non empty string with\n  the error message if the check fails\n- `->check(Validator)`: Use a Validator object to do the check see\n  [Validators](#validators) for a description of available Validators and how to\n  create new ones.\n- `->transform(std::string(std::string &), validator_name=\"\",validator_description=\")`:\n  Converts the input string into the output string, in-place in the parsed\n  options.\n- `->transform(Validator)`: Uses a Validator object to do the transformation see\n  [Validators](#validators) for a description of available Validators and how to\n  create new ones.\n- `->each(void(const std::string &)>`: Run this function on each value received,\n  as it is received. It should throw a `ValidationError` if an error is\n  encountered.\n- `->configurable(false)`: Disable this option from being in a configuration\n  file.\n- `->capture_default_str()`: Store the current value attached and display it in\n  the help string.\n- `->default_function(std::string())`: Advanced: Change the function that\n  `capture_default_str()` uses.\n- `->always_capture_default()`: Always run `capture_default_str()` when creating\n  new options. Only useful on an App's `option_defaults`.\n- `->default_str(string)`: Set the default string directly (NO VALIDATION OR\n  CALLBACKS). This string will also be used as a default value if no arguments\n  are passed and the value is requested.\n- `->default_val(value)`: Generate the default string from a value and validate\n  that the value is also valid. For options that assign directly to a value type\n  the value in that type is also updated. Value must be convertible to a\n  string(one of known types or have a stream operator). The callback may be\n  triggered if the `run_callback_for_default` is set.\n- `->run_callback_for_default()`: This will force the option callback to be\n  executed or the variable set when the `default_val` is set.\n- `->option_text(string)`: Sets the text between the option name and\n  description.\n- `->force_callback()`: Causes the option callback or value set to be triggered\n  even if the option was not present in parsing.\n- `->trigger_on_parse()`: If set, causes the callback and all associated\n  validation checks for the option to be executed when the option value is\n  parsed vs. at the end of all parsing. This could cause the callback to be\n  executed multiple times. Also works with positional options.\n\nThese options return the `Option` pointer, so you can chain them together, and\neven skip storing the pointer entirely. The `each` function takes any function\nthat has the signature `void(const std::string&)`; it should throw a\n`ValidationError` when validation fails. The help message will have the name of\nthe parent option prepended. Since `each`, `check` and `transform` use the same\nunderlying mechanism, you can chain as many as you want, and they will be\nexecuted in order. Operations added through `transform` are executed first in\nreverse order of addition, and `check` and `each` are run following the\ntransform functions in order of addition. If you just want to see the\nunconverted values, use `.results()` to get the `std::vector<std::string>` of\nresults.\n\nOn the command line, options can be given as:\n\n- `-a` (flag)\n- `-abc` (flags can be combined)\n- `-f filename` (option)\n- `-ffilename` (no space required)\n- `-abcf filename` (flags and option can be combined)\n- `--long` (long flag)\n- `--long_flag=true` (long flag with equals -- to override default value)\n- `--file filename` (space)\n- `--file=filename` (equals)\n\nIf `allow_windows_style_options()` is specified in the application or subcommand\noptions can also be given as:\n\n- `/a` (flag)\n- `/f filename` (option)\n- `/long` (long flag)\n- `/file filename` (space)\n- `/file:filename` (colon)\n- `/long_flag:false` (long flag with : to override the default value)\n  - Windows style options do not allow combining short options or values not\n    separated from the short option like with `-` options\n\nLong flag options may be given with an `=<value>` to allow specifying a false\nvalue, or some other value to the flag. See [config files](#configuration-file)\nfor details on the values supported. NOTE: only the `=` or `:` for windows-style\noptions may be used for this, using a space will result in the argument being\ninterpreted as a positional argument. This syntax can override the default\nvalues, and can be disabled by using `disable_flag_override()`.\n\nExtra positional arguments will cause the program to exit, so at least one\npositional option with a vector is recommended if you want to allow extraneous\narguments. If you set `.allow_extras()` on the main `App`, you will not get an\nerror. You can access the missing options using `remaining` (if you have\nsubcommands, `app.remaining(true)` will get all remaining options, subcommands\nincluded). If the remaining arguments are to processed by another `App` then the\nfunction `remaining_for_passthrough()` can be used to get the remaining\narguments in reverse order such that `app.parse(vector)` works directly and\ncould even be used inside a subcommand callback.\n\nYou can access a vector of pointers to the parsed options in the original order\nusing `parse_order()`. If `--` is present in the command line that does not end\nan unlimited option, then everything after that is positional only.\n\n#### Validators\n\nValidators are structures to check or modify inputs, they can be used to verify\nthat an input meets certain criteria or transform it into another value. They\nare added through the `check` or `transform` functions. The differences between\nthe two function are that checks do not modify the input whereas transforms can\nand are executed before any Validators added through `check`.\n\nCLI11 has several Validators built-in that perform some common checks\n\n- `CLI::IsMember(...)`: Require an option be a member of a given set. See\n  [Transforming Validators](#transforming-validators) for more details.\n- `CLI::Transformer(...)`: Modify the input using a map. See\n  [Transforming Validators](#transforming-validators) for more details.\n- `CLI::CheckedTransformer(...)`: Modify the input using a map, and require that\n  the input is either in the set or already one of the outputs of the set. See\n  [Transforming Validators](#transforming-validators) for more details.\n- `CLI::AsNumberWithUnit(...)`: Modify the `<NUMBER> <UNIT>` pair by matching\n  the unit and multiplying the number by the corresponding factor. It can be\n  used as a base for transformers, that accept things like size values (`1 KB`)\n  or durations (`0.33 ms`).\n- `CLI::AsSizeValue(...)`: Convert inputs like `100b`, `42 KB`, `101 Mb`,\n  `11 Mib` to absolute values. `KB` can be configured to be interpreted as 10^3\n  or 2^10.\n- `CLI::ExistingFile`: Requires that the file exists if given.\n- `CLI::ExistingDirectory`: Requires that the directory exists.\n- `CLI::ExistingPath`: Requires that the path (file or directory) exists.\n- `CLI::NonexistentPath`: Requires that the path does not exist.\n- `CLI::FileOnDefaultPath`: Best used as a transform, Will check that a file\n  exists either directly or in a default path and update the path appropriately.\n  See [Transforming Validators](#transforming-validators) for more details\n- `CLI::Range(min,max)`: Requires that the option be between min and max (make\n  sure to use floating point if needed). Min defaults to 0.\n- `CLI::Bounded(min,max)`: Modify the input such that it is always between min\n  and max (make sure to use floating point if needed). Min defaults to 0. Will\n  produce an error if conversion is not possible.\n- `CLI::PositiveNumber`: Requires the number be greater than 0\n- `CLI::NonNegativeNumber`: Requires the number be greater or equal to 0\n- `CLI::Number`: Requires the input be a number.\n- `CLI::ValidIPV4`: Requires that the option be a valid IPv4 string e.g.\n  `'255.255.255.255'`, `'10.1.1.7'`.\n- `CLI::TypeValidator<TYPE>`:Requires that the option be convertible to the\n  specified type e.g. `CLI::TypeValidator<unsigned int>()` would require that\n  the input be convertible to an `unsigned int` regardless of the end\n  conversion.\n\nThese Validators can be used by simply passing the name into the `check` or\n`transform` methods on an option\n\n```cpp\n->check(CLI::ExistingFile);\n->check(CLI::Range(0,10));\n```\n\nValidators can be merged using `&` and `|` and inverted using `!`. For example:\n\n```cpp\n->check(CLI::Range(0,10)|CLI::Range(20,30));\n```\n\nwill produce a check to ensure a value is between 0 and 10 or 20 and 30.\n\n```cpp\n->check(!CLI::PositiveNumber);\n```\n\nwill produce a check for a number less than or equal to 0.\n\n##### Transforming Validators\n\nThere are a few built in Validators that let you transform values if used with\nthe `transform` function. If they also do some checks then they can be used\n`check` but some may do nothing in that case.\n\n- `CLI::Bounded(min,max)` will bound values between min and max and values\n  outside of that range are limited to min or max, it will fail if the value\n  cannot be converted and produce a `ValidationError`\n- The `IsMember` Validator lets you specify a set of predefined options. You can\n  pass any container or copyable pointer (including `std::shared_ptr`) to a\n  container to this Validator; the container just needs to be iterable and have\n  a `::value_type`. The key type should be convertible from a string, You can\n  use an initializer list directly if you like. If you need to modify the set\n  later, the pointer form lets you do that; the type message and check will\n  correctly refer to the current version of the set. The container passed in can\n  be a set, vector, or a map like structure. If used in the `transform` method\n  the output value will be the matching key as it could be modified by filters.\n\nAfter specifying a set of options, you can also specify \"filter\" functions of\nthe form `T(T)`, where `T` is the type of the values. The most common choices\nprobably will be `CLI::ignore_case` an `CLI::ignore_underscore`, and\n`CLI::ignore_space`. These all work on strings but it is possible to define\nfunctions that work on other types. Here are some examples of `IsMember`:\n\n- `CLI::IsMember({\"choice1\", \"choice2\"})`: Select from exact match to choices.\n- `CLI::IsMember({\"choice1\", \"choice2\"}, CLI::ignore_case, CLI::ignore_underscore)`:\n  Match things like `Choice_1`, too.\n- `CLI::IsMember(std::set<int>({2,3,4}))`: Most containers and types work; you\n  just need `std::begin`, `std::end`, and `::value_type`.\n- `CLI::IsMember(std::map<std::string, TYPE>({{\"one\", 1}, {\"two\", 2}}))`: You\n  can use maps; in `->transform()` these replace the matched value with the\n  matched key. The value member of the map is not used in `IsMember`, so it can\n  be any type.\n- `auto p = std::make_shared<std::vector<std::string>>(std::initializer_list<std::string>(\"one\", \"two\")); CLI::IsMember(p)`:\n  You can modify `p` later.\n- The `Transformer` and `CheckedTransformer` Validators transform one value into\n  another. Any container or copyable pointer (including `std::shared_ptr`) to a\n  container that generates pairs of values can be passed to these `Validator's`;\n  the container just needs to be iterable and have a `::value_type` that\n  consists of pairs. The key type should be convertible from a string, and the\n  value type should be convertible to a string You can use an initializer list\n  directly if you like. If you need to modify the map later, the pointer form\n  lets you do that; the description message will correctly refer to the current\n  version of the map. `Transformer` does not do any checking so values not in\n  the map are ignored. `CheckedTransformer` takes an extra step of verifying\n  that the value is either one of the map key values, in which case it is\n  transformed, or one of the expected output values, and if not will generate a\n  `ValidationError`. A Transformer placed using `check` will not do anything.\n\nAfter specifying a map of options, you can also specify \"filter\" just like in\n`CLI::IsMember`. Here are some examples (`Transformer` and `CheckedTransformer`\nare interchangeable in the examples) of `Transformer`:\n\n- `CLI::Transformer({{\"key1\", \"map1\"},{\"key2\",\"map2\"}})`: Select from key values\n  and produce map values.\n- `CLI::Transformer(std::map<std::string,int>({\"two\",2},{\"three\",3},{\"four\",4}}))`:\n  most maplike containers work, the `::value_type` needs to produce a pair of\n  some kind.\n- `CLI::CheckedTransformer(std::map<std::string, int>({{\"one\", 1}, {\"two\", 2}}))`:\n  You can use maps; in `->transform()` these replace the matched key with the\n  value. `CheckedTransformer` also requires that the value either match one of\n  the keys or match one of known outputs.\n- `auto p = std::make_shared<CLI::TransformPairs<std::string>>(std::initializer_list<std::pair<std::string,std::string>>({\"key1\", \"map1\"},{\"key2\",\"map2\"})); CLI::Transformer(p)`:\n  You can modify `p` later. `TransformPairs<T>` is an alias for\n  `std::vector<std::pair<<std::string,T>>`\n\nNOTES: If the container used in `IsMember`, `Transformer`, or\n`CheckedTransformer` has a `find` function like `std::unordered_map` or\n`std::map` then that function is used to do the searching. If it does not have a\n`find` function a linear search is performed. If there are filters present, the\nfast search is performed first, and if that fails a linear search with the\nfilters on the key values is performed.\n\n- `CLI::FileOnDefaultPath(default_path)`: can be used to check for files in a\n  default path. If used as a transform it will first check that a file exists,\n  if it does nothing further is done, if it does not it tries to add a default\n  Path to the file and search there again. If the file does not exist an error\n  is returned normally but this can be disabled using\n  `CLI::FileOnDefaultPath(default_path, false)`. This allows multiple paths to\n  be chained using multiple transform calls.\n\n- `CLI::EscapedString`: 🆕 can be used to process an escaped string. The\n  processing is equivalent to that used for TOML config files, see\n  [TOML strings](https://toml.io/en/v1.0.0#string). With 2 notable exceptions.\n  \\` can also be used as a literal string notation, and it also allows binary\n  string notation see\n  [binary strings](https://cliutils.github.io/CLI11/book/chapters/config.html).\n  The escaped string processing will remove outer quotes if present, `\"` will\n  indicate a string with potential escape sequences, `'` and \\` will indicate a\n  literal string and the quotes removed but no escape sequences will be\n  processed. This is the same escape processing as used in config files.\n\n##### Validator operations\n\nValidators are copyable and have a few operations that can be performed on them\nto alter settings. Most of the built in Validators have a default description\nthat is displayed in the help. This can be altered via\n`.description(validator_description)`. The name of a Validator, which is useful\nfor later reference from the `get_validator(name)` method of an `Option` can be\nset via `.name(validator_name)` The operation function of a Validator can be set\nvia `.operation(std::function<std::string(std::string &>)`. The `.active()`\nfunction can activate or deactivate a Validator from the operation. A validator\ncan be set to apply only to a specific element of the output. For example in a\npair option `std::pair<int, std::string>` the first element may need to be a\npositive integer while the second may need to be a valid file. The\n`.application_index(int)` function can specify this. It is zero based and\nnegative indices apply to all values.\n\n```cpp\nopt->check(CLI::Validator(CLI::PositiveNumber).application_index(0));\nopt->check(CLI::Validator(CLI::ExistingFile).application_index(1));\n```\n\nAll the validator operation functions return a Validator reference allowing them\nto be chained. For example\n\n```cpp\nopt->check(CLI::Range(10,20).description(\"range is limited to sensible values\").active(false).name(\"range\"));\n```\n\nwill specify a check on an option with a name \"range\", but deactivate it for the\ntime being. The check can later be activated through\n\n```cpp\nopt->get_validator(\"range\")->active();\n```\n\n##### Custom Validators\n\nA validator object with a custom function can be created via\n\n```cpp\nCLI::Validator(std::function<std::string(std::string &)>,validator_description,validator_name=\"\");\n```\n\nor if the operation function is set later they can be created with\n\n```cpp\nCLI::Validator(validator_description);\n```\n\nIt is also possible to create a subclass of `CLI::Validator`, in which case it\ncan also set a custom description function, and operation function.\n\n##### Querying Validators\n\nOnce loaded into an Option, a pointer to a named Validator can be retrieved via\n\n```cpp\nopt->get_validator(name);\n```\n\nThis will retrieve a Validator with the given name or throw a\n`CLI::OptionNotFound` error. If no name is given or name is empty the first\nunnamed Validator will be returned or the first Validator if there is only one.\n\nor\n\n```cpp\nopt->get_validator(index);\n```\n\nWhich will return a validator in the index it is applied which isn't necessarily\nthe order in which was defined. The pointer can be `nullptr` if an invalid index\nis given. Validators have a few functions to query the current values:\n\n- `get_description()`: Will return a description string\n- `get_name()`: Will return the Validator name\n- `get_active()`: Will return the current active state, true if the Validator is\n  active.\n- `get_application_index()`: Will return the current application index.\n- `get_modifying()`: Will return true if the Validator is allowed to modify the\n  input, this can be controlled via the `non_modifying()` method, though it is\n  recommended to let `check` and `transform` option methods manipulate it if\n  needed.\n\n#### Getting results\n\nIn most cases, the fastest and easiest way is to return the results through a\ncallback or variable specified in one of the `add_*` functions. But there are\nsituations where this is not possible or desired. For these cases the results\nmay be obtained through one of the following functions. Please note that these\nfunctions will do any type conversions and processing during the call so should\nnot used in performance critical code:\n\n- `->results()`: Retrieves a vector of strings with all the results in the order\n  they were given.\n- `->results(variable_to_bind_to)`: Gets the results according to the\n  MultiOptionPolicy and converts them just like the `add_option_function` with a\n  variable.\n- `Value=opt->as<type>()`: Returns the result or default value directly as the\n  specified type if possible, can be vector to return all results, and a\n  non-vector to get the result according to the MultiOptionPolicy in place.\n\n### Subcommands\n\nSubcommands are keywords that invoke a new set of options and features. For\nexample, the `git` command has a long series of subcommands, like `add` and\n`commit`. Each can have its own options and implementations. Subcommands are\nsupported in CLI11, and can be nested infinitely. To add a subcommand, call the\n`add_subcommand` method with a name and an optional description. This gives a\npointer to an `App` that behaves just like the main app, and can take options or\nfurther subcommands. Add `->ignore_case()` to a subcommand to allow any\nvariation of caps to also be accepted. `->ignore_underscore()` is similar, but\nfor underscores. Children inherit the current setting from the parent. You\ncannot add multiple matching subcommand names at the same level (including\n`ignore_case` and `ignore_underscore`).\n\nIf you want to require that at least one subcommand is given, use\n`.require_subcommand()` on the parent app. You can optionally give an exact\nnumber of subcommands to require, as well. If you give two arguments, that sets\nthe min and max number allowed. 0 for the max number allowed will allow an\nunlimited number of subcommands. As a handy shortcut, a single negative value N\nwill set \"up to N\" values. Limiting the maximum number allows you to keep\narguments that match a previous subcommand name from matching.\n\nIf an `App` (main or subcommand) has been parsed on the command line, `->parsed`\nwill be true (or convert directly to bool). All `App`s have a\n`get_subcommands()` method, which returns a list of pointers to the subcommands\npassed on the command line. A `got_subcommand(App_or_name)` method is also\nprovided that will check to see if an `App` pointer or a string name was\ncollected on the command line.\n\nFor many cases, however, using an app's callback capabilities may be easier.\nEvery app has a set of callbacks that can be executed at various stages of\nparsing; a `C++` lambda function (with capture to get parsed values) can be used\nas input to the callback definition function. If you throw `CLI::Success` or\n`CLI::RuntimeError(return_value)`, you can even exit the program through the\ncallback.\n\nMultiple subcommands are allowed, to allow [`Click`][click] like series of\ncommands (order is preserved). The same subcommand can be triggered multiple\ntimes but all positional arguments will take precedence over the second and\nfuture calls of the subcommand. `->count()` on the subcommand will return the\nnumber of times the subcommand was called. The subcommand callback will only be\ntriggered once unless the `.immediate_callback()` flag is set or the callback is\nspecified through the `parse_complete_callback()` function. The\n`final_callback()` is triggered only once. In which case the callback executes\non completion of the subcommand arguments but after the arguments for that\nsubcommand have been parsed, and can be triggered multiple times.\n\nSubcommands may also have an empty name either by calling `add_subcommand` with\nan empty string for the name or with no arguments. Nameless subcommands function\na similarly to groups in the main `App`. See [Option groups](#option-groups) to\nsee how this might work. If an option is not defined in the main App, all\nnameless subcommands are checked as well. This allows for the options to be\ndefined in a composable group. The `add_subcommand` function has an overload for\nadding a `shared_ptr<App>` so the subcommand(s) could be defined in different\ncomponents and merged into a main `App`, or possibly multiple `Apps`. Multiple\nnameless subcommands are allowed. Callbacks for nameless subcommands are only\ntriggered if any options from the subcommand were parsed. Subcommand names given\nthrough the `add_subcommand` method have the same restrictions as option names.\n\n🆕 Options or flags in a subcommand may be directly specified using dot notation\n\n- `--subcommand.long=val` (long subcommand option)\n- `--subcommand.long val` (long subcommand option)\n- `--subcommand.f=val` (short form subcommand option)\n- `--subcommand.f val` (short form subcommand option)\n- `--subcommand.f` (short form subcommand flag)\n- `--subcommand1.subsub.f val` (short form nested subcommand option)\n\nThe use of dot notation in this form is equivalent `--subcommand.long <args>` =>\n`subcommand --long <args> ++`. Nested subcommands also work `sub1.subsub` would\ntrigger the subsub subcommand in `sub1`. This is equivalent to \"sub1 subsub\".\nQuotes around the subcommand names are permitted 🆕 following the TOML standard\nfor such specification. This includes allowing escape sequences. For example\n`\"subcommand\".'f'` or `\"subcommand.with.dots\".arg1 = value`.\n\n#### Subcommand options\n\nThere are several options that are supported on the main app and subcommands and\noption_groups. These are:\n\n- `.ignore_case()`: Ignore the case of this subcommand. Inherited by added\n  subcommands, so is usually used on the main `App`.\n- `.ignore_underscore()`: Ignore any underscores in the subcommand name.\n  Inherited by added subcommands, so is usually used on the main `App`.\n- `.allow_windows_style_options()`: Allow command line options to be parsed in\n  the form of `/s /long /file:file_name.ext` This option does not change how\n  options are specified in the `add_option` calls or the ability to process\n  options in the form of `-s --long --file=file_name.ext`.\n- `.allow_non_standard_option_names()`:🚧 Allow specification of single `-` long\n  form option names. This is not recommended but is available to enable\n  reworking of existing interfaces. If this modifier is enabled on an app or\n  subcommand, options or flags can be specified like normal but instead of\n  throwing an exception, long form single dash option names will be allowed. It\n  is not allowed to have a single character short option starting with the same\n  character as a single dash long form name; for example, `-s` and `-single` are\n  not allowed in the same application.\n- `.fallthrough()`: Allow extra unmatched options and positionals to \"fall\n  through\" and be matched on a parent option. Subcommands by default are allowed\n  to \"fall through\" as in they will first attempt to match on the current\n  subcommand and if they fail will progressively check parents for matching\n  subcommands. This can be disabled through `subcommand_fallthrough(false)` 🚧.\n- `.subcommand_fallthrough()`: 🚧 Allow subcommands to \"fall through\" and be\n  matched on a parent option. Disabling this prevents additional subcommands at\n  the same level from being matched. It can be useful in certain circumstances\n  where there might be ambiguity between subcommands and positionals. The\n  default is true.\n- `.configurable()`: Allow the subcommand to be triggered from a configuration\n  file. By default subcommand options in a configuration file do not trigger a\n  subcommand but will just update default values.\n- `.disable()`: Specify that the subcommand is disabled, if given with a bool\n  value it will enable or disable the subcommand or option group.\n- `.disabled_by_default()`: Specify that at the start of parsing the\n  subcommand/option_group should be disabled. This is useful for allowing some\n  Subcommands to trigger others.\n- `.enabled_by_default()`: Specify that at the start of each parse the\n  subcommand/option_group should be enabled. This is useful for allowing some\n  Subcommands to disable others.\n- `.silent()`: Specify that the subcommand is silent meaning that if used it\n  won't show up in the subcommand list. This allows the use of subcommands as\n  modifiers\n- `.validate_positionals()`: Specify that positionals should pass validation\n  before matching. Validation is specified through `transform`, `check`, and\n  `each` for an option. If an argument fails validation it is not an error and\n  matching proceeds to the next available positional or extra arguments.\n- `.validate_optional_arguments()`: Specify that optional arguments should pass\n  validation before being assigned to an option. Validation is specified through\n  `transform`, `check`, and `each` for an option. If an argument fails\n  validation it is not an error and matching proceeds to the next available\n  positional subcommand or extra arguments.\n- `.excludes(option_or_subcommand)`: If given an option pointer or pointer to\n  another subcommand, these subcommands cannot be given together. In the case of\n  options, if the option is passed the subcommand cannot be used and will\n  generate an error.\n- `.needs(option_or_subcommand)`: If given an option pointer or pointer to\n  another subcommand, the subcommands will require the given option to have been\n  given before this subcommand is validated which occurs prior to execution of\n  any callback or after parsing is completed.\n- `.require_option()`: Require 1 or more options or option groups be used.\n- `.require_option(N)`: Require `N` options or option groups, if `N>0`, or up to\n  `N` if `N<0`. `N=0` resets to the default to 0 or more.\n- `.require_option(min, max)`: Explicitly set min and max allowed options or\n  option groups. Setting `max` to 0 implies unlimited options.\n- `.require_subcommand()`: Require 1 or more subcommands.\n- `.require_subcommand(N)`: Require `N` subcommands if `N>0`, or up to `N` if\n  `N<0`. `N=0` resets to the default to 0 or more.\n- `.require_subcommand(min, max)`: Explicitly set min and max allowed\n  subcommands. Setting `max` to 0 is unlimited.\n- `.add_subcommand(name=\"\", description=\"\")`: Add a subcommand, returns a\n  pointer to the internally stored subcommand.\n- `.add_subcommand(shared_ptr<App>)`: Add a subcommand by shared_ptr, returns a\n  pointer to the internally stored subcommand.\n- `.remove_subcommand(App)`: Remove a subcommand from the app or subcommand.\n- `.got_subcommand(App_or_name)`: Check to see if a subcommand was received on\n  the command line.\n- `.get_subcommands(filter)`: The list of subcommands that match a particular\n  filter function.\n- `.add_option_group(name=\"\", description=\"\")`: Add an\n  [option group](#option-groups) to an App, an option group is specialized\n  subcommand intended for containing groups of options or other groups for\n  controlling how options interact.\n- `.get_parent()`: Get the parent App or `nullptr` if called on main App.\n- `.get_option(name)`: Get an option pointer by option name will throw if the\n  specified option is not available, nameless subcommands are also searched\n- `.get_option_no_throw(name)`: Get an option pointer by option name. This\n  function will return a `nullptr` instead of throwing if the option is not\n  available.\n- `.get_options(filter)`: Get the list of all defined option pointers (useful\n  for processing the app for custom output formats).\n- `.parse_order()`: Get the list of option pointers in the order they were\n  parsed (including duplicates).\n- `.formatter(fmt)`: Set a formatter, with signature\n  `std::string(const App*, std::string, AppFormatMode)`. See Formatting for more\n  details.\n- `.description(str)`: Set/change the description.\n- `.get_description()`: Access the description.\n- `.alias(str)`: set an alias for the subcommand, this allows subcommands to be\n  called by more than one name.\n- `.parsed()`: True if this subcommand was given on the command line.\n- `.count()`: Returns the number of times the subcommand was called.\n- `.count(option_name)`: Returns the number of times a particular option was\n  called.\n- `.count_all()`: Returns the total number of arguments a particular subcommand\n  processed, on the main App it returns the total number of processed commands.\n- `.name(name)`: Add or change the name.\n- `.callback(void() function)`: Set the callback for an app. Either sets the\n  `pre_parse_callback` or the `final_callback` depending on the value of\n  `immediate_callback`. See [Subcommand callbacks](#callbacks) for some\n  additional details.\n- `.parse_complete_callback(void() function)`: Set the callback that runs at the\n  completion of parsing. For subcommands this is executed at the completion of\n  the single subcommand and can be executed multiple times. See\n  [Subcommand callbacks](#callbacks) for some additional details.\n- `.final_callback(void() function)`: Set the callback that runs at the end of\n  all processing. This is the last thing that is executed before returning. See\n  [Subcommand callbacks](#callbacks) for some additional details.\n- `.immediate_callback()`: Specifies whether the callback for a subcommand\n  should be run as a `parse_complete_callback`(true) or `final_callback`(false).\n  When used on the main app it will execute the main app callback prior to the\n  callbacks for a subcommand if they do not also have the `immediate_callback`\n  flag set. It is preferable to use the `parse_complete_callback` or\n  `final_callback` directly instead of the `callback` and `immediate_callback`\n  if one wishes to control the ordering and timing of callback. Though\n  `immediate_callback` can be used to swap them if that is needed.\n- `.pre_parse_callback(void(std::size_t) function)`: Set a callback that\n  executes after the first argument of an application is processed. See\n  [Subcommand callbacks](#callbacks) for some additional details.\n- `.allow_extras()`: Do not throw an error if extra arguments are left over.\n- `.positionals_at_end()`: Specify that positional arguments occur as the last\n  arguments and throw an error if an unexpected positional is encountered.\n- `.prefix_command()`: Like `allow_extras`, but stop processing immediately on\n  the first unrecognized item. All subsequent arguments are placed in the\n  remaining_arg list. It is ideal for allowing your app or subcommand to be a\n  \"prefix\" to calling another app.\n- `.usage(message)`: 🆕 Replace text to appear at the start of the help string\n  after description.\n- `.usage(std::string())`: 🆕 Set a callback to generate a string that will\n  appear at the start of the help string after description.\n- `.footer(message)`: Set text to appear at the bottom of the help string.\n- `.footer(std::string())`: Set a callback to generate a string that will appear\n  at the end of the help string.\n- `.set_help_flag(name, message)`: Set the help flag name and message, returns a\n  pointer to the created option.\n- `.set_version_flag(name, versionString or callback, help_message)`: Set the\n  version flag name and version string or callback and optional help message,\n  returns a pointer to the created option.\n- `.set_help_all_flag(name, message)`: Set the help all flag name and message,\n  returns a pointer to the created option. Expands subcommands.\n- `.failure_message(func)`: Set the failure message function. Two provided:\n  `CLI::FailureMessage::help` and `CLI::FailureMessage::simple` (the default).\n- `.group(name)`: Set a group name, defaults to `\"Subcommands\"`. Setting an\n  empty string for the name will be hide the subcommand.\n- `[option_name]`: retrieve a const pointer to an option given by `option_name`\n  for Example `app[\"--flag1\"]` will get a pointer to the option for the\n  \"--flag1\" value, `app[\"--flag1\"]->as<bool>()` will get the results of the\n  command line for a flag. The operation will throw an exception if the option\n  name is not valid.\n\n> [!NOTE]\n>\n> If you have a fixed number of required positional options, that will match\n> before subcommand names. `{}` is an empty filter function, and any positional\n> argument will match before repeated subcommand names.\n\n#### Callbacks\n\nA subcommand has three optional callbacks that are executed at different stages\nof processing. The `preparse_callback` is executed once after the first argument\nof a subcommand or application is processed and gives an argument for the number\nof remaining arguments to process. For the main app the first argument is\nconsidered the program name, for subcommands the first argument is the\nsubcommand name. For Option groups and nameless subcommands the first argument\nis after the first argument or subcommand is processed from that group. The\nsecond callback is executed after parsing. This is known as the\n`parse_complete_callback`. For subcommands this is executed immediately after\nparsing and can be executed multiple times if a subcommand is called multiple\ntimes. On the main app this callback is executed after all the\n`parse_complete_callback`s for the subcommands are executed but prior to any\n`final_callback` calls in the subcommand or option groups. If the main app or\nsubcommand has a config file, no data from the config file will be reflected in\n`parse_complete_callback` on named subcommands. For `option_group`s the\n`parse_complete_callback` is executed prior to the `parse_complete_callback` on\nthe main app but after the `config_file` is loaded (if specified). The\n`final_callback` is executed after all processing is complete. After the\n`parse_complete_callback` is executed on the main app, the used subcommand\n`final_callback` are executed followed by the \"final callback\" for option\ngroups. The last thing to execute is the `final_callback` for the `main_app`.\nFor example say an application was set up like\n\n```cpp\napp.parse_complete_callback(ac1);\napp.final_callback(ac2);\nauto sub1=app.add_subcommand(\"sub1\")->parse_complete_callback(c1)->preparse_callback(pc1);\nauto sub2=app.add_subcommand(\"sub2\")->final_callback(c2)->preparse_callback(pc2);\napp.preparse_callback( pa);\n\n... A bunch of other options\n```\n\nThen the command line is given as\n\n```bash\nprogram --opt1 opt1_val  sub1 --sub1opt --sub1optb val sub2 --sub2opt sub1 --sub1opt2 sub2 --sub2opt2 val\n```\n\n- `pa` will be called prior to parsing any values with an argument of 13.\n- `pc1` will be called immediately after processing the `sub1` command with a\n  value of 10.\n- `c1` will be called when the `sub2` command is encountered.\n- `pc2` will be called with value of 6 after the `sub2` command is encountered.\n- `c1` will be called again after the second `sub2` command is encountered.\n- `ac1` will be called after processing of all arguments\n- `c2` will be called once after processing all arguments.\n- `ac2` will be called last after completing all lower level callbacks have been\n  executed.\n\nA subcommand is considered terminated when one of the following conditions are\nmet.\n\n1. There are no more arguments to process\n2. Another subcommand is encountered that would not fit in an optional slot of\n   the subcommand\n3. The `positional_mark` (`--`) is encountered and there are no available\n   positional slots in the subcommand.\n4. The `subcommand_terminator` mark (`++`) is encountered\n\nPrior to executed a `parse_complete_callback` all contained options are\nprocessed before the callback is triggered. If a subcommand with a\n`parse_complete_callback` is called again, then the contained options are reset,\nand can be triggered again.\n\n#### Option groups\n\nThe subcommand method\n\n```cpp\n.add_option_group(name,description)\n```\n\nWill create an option group, and return a pointer to it. The argument for\n`description` is optional and can be omitted. An option group allows creation of\na collection of options, similar to the groups function on options, but with\nadditional controls and requirements. They allow specific sets of options to be\ncomposed and controlled as a collective. For an example see\n[range example](https://github.com/CLIUtils/CLI11/blob/main/examples/ranges.cpp).\nOption groups are a specialization of an App so all\n[functions](#subcommand-options) that work with an App or subcommand also work\non option groups. Options can be created as part of an option group using the\nadd functions just like a subcommand, or previously created options can be added\nthrough. The name given in an option group must not contain newlines or null\ncharacters.\n\n```cpp\nogroup->add_option(option_pointer);\nogroup->add_options(option_pointer);\nogroup->add_options(option1,option2,option3,...);\n```\n\nThe option pointers used in this function must be options defined in the parent\napplication of the option group otherwise an error will be generated.\nSubcommands can also be added via\n\n```cpp\nogroup->add_subcommand(subcom_pointer);\n```\n\nThis results in the subcommand being moved from its parent into the option\ngroup.\n\nOptions in an option group are searched for a command line match after any\noptions in the main app, so any positionals in the main app would be matched\nfirst. So care must be taken to make sure of the order when using positional\narguments and option groups. Option groups work well with `excludes` and\n`require_options` methods, as an application will treat an option group as a\nsingle option for the purpose of counting and requirements, and an option group\nwill be considered used if any of the options or subcommands contained in it are\nused. Option groups allow specifying requirements such as requiring 1 of 3\noptions in one group and 1 of 3 options in a different group. Option groups can\ncontain other groups as well. Disabling an option group will turn off all\noptions within the group.\n\nThe `CLI::TriggerOn` and `CLI::TriggerOff` methods are helper functions to allow\nthe use of options/subcommands from one group to trigger another group on or\noff.\n\n```cpp\nCLI::TriggerOn(group1_pointer, triggered_group);\nCLI::TriggerOff(group2_pointer, disabled_group);\n```\n\nThese functions make use of `preparse_callback`, `enabled_by_default()` and\n`disabled_by_default`. The triggered group may be a vector of group pointers.\nThese methods should only be used once per group and will override any previous\nuse of the underlying functions. More complex arrangements can be accomplished\nusing similar methodology with a custom `preparse_callback` function that does\nmore.\n\nAdditional helper functions `deprecate_option` and `retire_option` are available\nto deprecate or retire options\n\n```cpp\nCLI::deprecate_option(option *, replacement_name=\"\");\nCLI::deprecate_option(App,option_name,replacement_name=\"\");\n```\n\nwill specify that the option is deprecated which will display a message in the\nhelp and a warning on first usage. Deprecated options function normally but will\nadd a message in the help and display a warning on first use.\n\n```cpp\nCLI::retire_option(App,option *);\nCLI::retire_option(App,option_name);\n```\n\nwill create an option that does nothing by default and will display a warning on\nfirst usage that the option is retired and has no effect. If the option exists\nit is replaces with a dummy option that takes the same arguments.\n\nIf an empty string is passed the option group name the entire group will be\nhidden in the help results. For example.\n\n```cpp\nauto hidden_group=app.add_option_group(\"\");\n```\n\nwill create a group such that no options in that group are displayed in the help\nstring. For the purposes of help display, if the option group name starts with a\n'+' it is treated as if it were not in a group for help and get_options. For\nexample:\n\n```cpp\nauto added_group=app.add_option_group(\"+sub\");\n```\n\nIn this case the help output will not reference the option group and options\ninside of it will be treated for most purposes as if they were part of the\nparent.\n\n### Configuration file\n\n```cpp\napp.set_config(option_name=\"\",\n               default_file_name=\"\",\n               help_string=\"Read an ini file\",\n               required=false)\n```\n\nIf this is called with no arguments, it will remove the configuration file\noption (like `set_help_flag`). Setting a configuration option is special. If it\nis present, it will be read along with the normal command line arguments. The\nfile will be read if it exists, and does not throw an error unless `required` is\n`true`. Configuration files are in [TOML][] format by default, though the\ndefault reader can also accept files in INI format as well. The config reader\ncan read most aspects of TOML files including strings both literal 🆕 and with\npotential escape sequences 🆕, digit separators 🆕, and multi-line strings 🆕,\nand run them through the CLI11 parser. Other formats can be added by an adept\nuser, some variations are available through customization points in the default\nformatter. An example of a TOML file:\n\n```toml\n# Comments are supported, using a #\n# The default section is [default], case-insensitive\n\nvalue = 1\nvalue2 = 123_456 # a string with separators\nstr = \"A string\"\nstr2 = \"A string\\nwith new lines\"\nstr3 = 'A literal \"string\"'\nvector = [1,2,3]\nstr_vector = [\"one\",\"two\",\"and three\"]\n\n# Sections map to subcommands\n[subcommand]\nin_subcommand = Wow\nsub.subcommand = true\n\"sub\".\"subcommand2\" = \"string_value\"\n```\n\nor equivalently in INI format\n\n```ini\n; Comments are supported, using a ;\n; The default section is [default], case-insensitive\n\nvalue = 1\nstr = \"A string\"\nvector = 1 2 3\nstr_vector = \"one\" \"two\" \"and three\"\n\n; Sections map to subcommands\n[subcommand]\nin_subcommand = Wow\nsub.subcommand = true\n```\n\nSpaces before and after the name and argument are ignored. Multiple arguments\nare separated by spaces. One set of quotes will be removed, preserving spaces\n(the same way the command line works). Boolean options can be `true`, `on`, `1`,\n`yes`, `enable`; or `false`, `off`, `0`, `no`, `disable` (case-insensitive).\nSections (and `.` separated names) are treated as subcommands (note: this does\nnot necessarily mean that subcommand was passed, it just sets the \"defaults\").\nYou cannot set positional-only arguments. Subcommands can be triggered from\nconfiguration files if the `configurable` flag was set on the subcommand. Then\nthe use of `[subcommand]` notation will trigger a subcommand and cause it to act\nas if it were on the command line.\n\nTo print a configuration file from the passed arguments, use\n`.config_to_str(default_also=false, write_description=false)`, where\n`default_also` will also show any defaulted arguments, and `write_description`\nwill include the app and option descriptions. See\n[Config files](https://cliutils.github.io/CLI11/book/chapters/config.html) for\nsome additional details and customization points.\n\nIf it is desired that multiple configuration be allowed. Use\n\n```cpp\napp.set_config(\"--config\")->expected(1, X);\n```\n\nWhere X is some positive number and will allow up to `X` configuration files to\nbe specified by separate `--config` arguments. Value strings with quote\ncharacters in it will be printed with a single quote. All other arguments will\nuse double quote. Empty strings will use a double quoted argument. Numerical or\nboolean values are not quoted.\n\nFor options or flags which allow 0 arguments to be passed using an empty string\nin the config file, `{}`, or `[]` will convert the result to the default value\nspecified via `default_str` or `default_val` on the option. If no user specified\ndefault is given the result is an empty string or the converted value of an\nempty string.\n\nNOTE: Transforms and checks can be used with the option pointer returned from\nset_config like any other option to validate the input if needed. It can also be\nused with the built in transform `CLI::FileOnDefaultPath` to look in a default\npath as well as the current one. For example\n\n```cpp\napp.set_config(\"--config\")->transform(CLI::FileOnDefaultPath(\"/to/default/path/\"));\n```\n\nSee [Transforming Validators](#transforming-validators) for additional details\non this validator. Multiple transforms or validators can be used either by\nmultiple calls or using `|` operations with the transform.\n\n### Inheriting defaults\n\nMany of the defaults for subcommands and even options are inherited from their\ncreators. The inherited default values for subcommands are `allow_extras`,\n`prefix_command`, `ignore_case`, `ignore_underscore`, `fallthrough`, `group`,\n`usage`, `footer`, `immediate_callback` and maximum number of required\nsubcommands. The help flag existence, name, and description are inherited, as\nwell.\n\nOptions have defaults for `group`, `required`, `multi_option_policy`,\n`ignore_case`, `ignore_underscore`, `delimiter`, and `disable_flag_override`. To\nset these defaults, you should set the `option_defaults()` object, for example:\n\n```cpp\napp.option_defaults()->required();\n// All future options will be required\n```\n\nThe default settings for options are inherited to subcommands, as well.\n\n### Formatting\n\nThe job of formatting help printouts is delegated to a formatter callable object\non Apps and Options. You are free to replace either formatter by calling\n`formatter(fmt)` on an `App`, where fmt is any copyable callable with the\ncorrect signature. CLI11 comes with a default App formatter functional,\n`Formatter`. It is customizable; you can set `label(key, value)` to replace the\ndefault labels like `REQUIRED`, and `column_width(n)` to set the width of the\ncolumns before you add the functional to the app or option. You can also\noverride almost any stage of the formatting process in a subclass of either\nformatter. If you want to make a new formatter from scratch, you can do that\ntoo; you just need to implement the correct signature. The first argument is a\nconst pointer to the in question. The formatter will get a `std::string` usage\nname as the second option, and a `AppFormatMode` mode for the final option. It\nshould return a `std::string`.\n\nThe `AppFormatMode` can be `Normal`, `All`, or `Sub`, and it indicates the\nsituation the help was called in. `Sub` is optional, but the default formatter\nuses it to make sure expanded subcommands are called with their own formatter\nsince you can't access anything but the call operator once a formatter has been\nset.\n\n### Subclassing\n\nThe App class was designed allow toolkits to subclass it, to provide preset\ndefault options (see above) and setup/teardown code. Subcommands remain an\nunsubclassed `App`, since those are not expected to need setup and teardown. The\ndefault `App` only adds a help flag, `-h,--help`, than can removed/replaced\nusing `.set_help_flag(name, help_string)`. You can also set a help-all flag with\n`.set_help_all_flag(name, help_string)`; this will expand the subcommands (one\nlevel only). You can remove options if you have pointers to them using\n`.remove_option(opt)`. You can add a `pre_callback` override to customize the\nafter parse but before run behavior, while still giving the user freedom to\n`callback` on the main app.\n\nThe most important parse function is `parse(std::vector<std::string>)`, which\ntakes a reversed list of arguments (so that `pop_back` processes the args in the\ncorrect order). `get_help_ptr` and `get_config_ptr` give you access to the\nhelp/config option pointers. The standard `parse` manually sets the name from\nthe first argument, so it should not be in this vector. You can also use\n`parse(string, bool)` to split up and parse a single string; the optional\nboolean should be set to true if you are including the program name in the\nstring, and false otherwise. The program name can contain spaces if it is an\nexisting file, otherwise can be enclosed in quotes(single quote, double quote or\nbacktick). Embedded quote characters can be escaped with `\\`.\n\nAlso, in a related note, the `App` you get a pointer to is stored in the parent\n`App` in a `shared_ptr`s (similar to `Option`s) and are deleted when the main\n`App` goes out of scope unless the object has another owner.\n\n### How it works\n\nEvery `add_` option you have seen so far depends on one method that takes a\nlambda function. Each of these methods is just making a different lambda\nfunction with capture to populate the option. The function has full access to\nthe vector of strings, so it knows how many times an option was passed or how\nmany arguments it received. The lambda returns `true` if it could validate the\noption strings, and `false` if it failed.\n\nOther values can be added as long as they support `operator>>` (and defaults can\nbe printed if they support `operator<<`). To add a new type, for example,\nprovide a custom `operator>>` with an `istream` (inside the CLI namespace is\nfine if you don't want to interfere with an existing `operator>>`).\n\nIf you wanted to extend this to support a completely new type, use a lambda or\nadd an overload of the `lexical_cast` function in the namespace of the type you\nneed to convert to. Some examples of some new parsers for `complex<double>` that\nsupport all of the features of a standard `add_options` call are in\n[one of the tests](./tests/NewParseTest.cpp). A simpler example is shown below:\n\n```cpp\napp.add_option(\"--fancy-count\", [](std::vector<std::string> val){\n    std::cout << \"This option was given \" << val.size() << \" times.\" << std::endl;\n    return true;\n    });\n```\n\n### Unicode support\n\nCLI11 supports Unicode and wide strings as defined in the\n[UTF-8 Everywhere](http://utf8everywhere.org/) manifesto. In particular:\n\n- The library can parse a wide version of command-line arguments on Windows,\n  which are converted internally to UTF-8 (more on this below);\n- You can store option values in `std::wstring`, in which case they will be\n  converted to a correct wide string encoding on your system (UTF-16 on Windows\n  and UTF-32 on most other systems);\n- Instead of storing wide strings, it is recommended to use provided `widen` and\n  `narrow` functions to convert to and from wide strings when actually necessary\n  (such as when calling into Windows APIs).\n\nWhen using the command line on Windows with unicode arguments, your `main`\nfunction may already receive broken Unicode. Parsing `argv` at that point will\nnot give you a correct string. To fix this, you have three options; the first is\nrecommended for cross-platform support:\n\n1\\. Replace `argv` with `app.ensure_utf8(argv)` before any arguments are parsed.\n`ensure_utf8` will do nothing on systems where `argv` is already in UTF-8 (Such\nas Linux or macOS) and return `argv` unmodified. On Windows, it will discard\n`argv` and replace it with a correctly decoded array or arguments from win32\nAPI.\n\n```cpp\nint main(int argc, char** argv) {\n    CLI::App app;\n    argv = app.ensure_utf8(argv);  // new argv memory is held by app\n    // ...\n    CLI11_PARSE(app, argc, argv);\n}\n```\n\nBe sure you do not modify `argv` before this function call, as the correct\nvalues will be reconstructed using Windows APIs and produced by this call. It\nhas no effect on other platforms and just passes through `argv`.\n\n<details><summary>Other options (click to expand)</summary><p>\n\n2\\. Use the Windows-only non-standard `wmain` function, which accepts\n`wchar_t *argv[]` instead of `char* argv[]`. Parsing this will allow CLI to\nconvert wide strings to UTF-8 without losing information.\n\n```cpp\nint wmain(int argc, wchar_t *argv[]) {\n    CLI::App app;\n    // ...\n    CLI11_PARSE(app, argc, argv);\n}\n```\n\n3\\. Retrieve arguments yourself by using Windows APIs like\n[`CommandLineToArgvW`](https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw)\nand pass them to CLI. This is what the library is doing under the hood in\n`ensure_utf8`.\n\n</p></details>\n</br>\n\nThe library provides functions to convert between UTF-8 and wide strings:\n\n```cpp\nnamespace CLI {\n    std::string narrow(const std::wstring &str);\n    std::string narrow(const wchar_t *str);\n    std::string narrow(const wchar_t *str, std::size_t size);\n    std::string narrow(std::wstring_view str);  // C++17\n\n    std::wstring widen(const std::string &str);\n    std::wstring widen(const char *str);\n    std::wstring widen(const char *str, std::size_t size);\n    std::wstring widen(std::string_view str);  // C++17\n}\n```\n\n#### Note on using Unicode paths\n\nWhen creating a `filesystem::path` from a UTF-8 path on Windows, you need to\nconvert it to a wide string first. CLI11 provides a platform-independent\n`to_path` function, which will convert a UTF-8 string to path, the right way:\n\n```cpp\nstd::string utf8_name = \"Hello Halló Привет 你好 👩‍🚀❤️.txt\";\n\nstd::filesystem::path p = CLI::to_path(utf8_name);\nstd::ifstream stream(CLI::to_path(utf8_name));\n// etc.\n```\n\n### Utilities\n\nThere are a few other utilities that are often useful in CLI programming. These\nare in separate headers, and do not appear in `CLI11.hpp`, but are completely\nindependent and can be used as needed. The `Timer`/`AutoTimer` class allows you\nto easily time a block of code, with custom print output.\n\n```cpp\n{\nCLI::AutoTimer timer {\"My Long Process\", CLI::Timer::Big};\nsome_long_running_process();\n}\n```\n\nThis will create a timer with a title (default: `Timer`), and will customize the\noutput using the predefined `Big` output (default: `Simple`). Because it is an\n`AutoTimer`, it will print out the time elapsed when the timer is destroyed at\nthe end of the block. If you use `Timer` instead, you can use `to_string` or\n`std::cout << timer << std::endl;` to print the time. The print function can be\nany function that takes two strings, the title and the time, and returns a\nformatted string for printing.\n\n### Other libraries\n\nIf you use the excellent [Rang][] library to add color to your terminal in a\nsafe, multi-platform way, you can combine it with CLI11 nicely:\n\n```cpp\nstd::atexit([](){std::cout << rang::style::reset;});\ntry {\n    app.parse(argc, argv);\n} catch (const CLI::ParseError &e) {\n    std::cout << (e.get_exit_code()==0 ? rang::fg::blue : rang::fg::red);\n    return app.exit(e);\n}\n```\n\nThis will print help in blue, errors in red, and will reset before returning the\nterminal to the user.\n\nIf you are on a Unix-like system, and you'd like to handle control-c and color,\nyou can add:\n\n```cpp\n #include <csignal>\n void signal_handler(int s) {\n     std::cout << std::endl << rang::style::reset << rang::fg::red << rang::fg::bold;\n     std::cout << \"Control-C detected, exiting...\" << rang::style::reset << std::endl;\n     std::exit(1); // will call the correct exit func, no unwinding of the stack though\n }\n```\n\nAnd, in your main function:\n\n```cpp\n     // Nice Control-C\n     struct sigaction sigIntHandler;\n     sigIntHandler.sa_handler = signal_handler;\n     sigemptyset(&sigIntHandler.sa_mask);\n     sigIntHandler.sa_flags = 0;\n     sigaction(SIGINT, &sigIntHandler, nullptr);\n```\n\n## API\n\nThe API is [documented here][api-docs]. Also see the [CLI11 tutorial\nGitBook][gitbook].\n\n## Examples\n\nSeveral short examples of different features are included in the repository. A\nbrief description of each is included here\n\n- [arg_capture](https://github.com/CLIUtils/CLI11/blob/main/examples/arg_capture.cpp):\n  Example of capturing all remaining arguments after a specific option, using\n  subcommand and prefix_command() with an alias.\n- [callback_passthrough](https://github.com/CLIUtils/CLI11/blob/main/examples/callback_passthrough.cpp):\n  Example of directly passing remaining arguments through to a callback function\n  which generates a CLI11 application based on existing arguments.\n- [custom_parse](https://github.com/CLIUtils/CLI11/blob/main/examples/custom_parse.cpp):\n  Based on [Issue #566](https://github.com/CLIUtils/CLI11/issues/566), example\n  of custom parser\n- [digit_args](https://github.com/CLIUtils/CLI11/blob/main/examples/digit_args.cpp):\n  Based on [Issue #123](https://github.com/CLIUtils/CLI11/issues/123), uses\n  digit flags to pass a value\n- [enum](https://github.com/CLIUtils/CLI11/blob/main/examples/enum.cpp): Using\n  enumerations in an option, and the use of\n  [CheckedTransformer](#transforming-validators)\n- [enum_ostream](https://github.com/CLIUtils/CLI11/blob/main/examples/enum_ostream.cpp):\n  In addition to the contents of example enum.cpp, this example shows how a\n  custom ostream operator overrides CLI11's enum streaming.\n- [formatter](https://github.com/CLIUtils/CLI11/blob/main/examples/formatter.cpp):\n  Illustrating usage of a custom formatter\n- [groups](https://github.com/CLIUtils/CLI11/blob/main/examples/groups.cpp):\n  Example using groups of options for help grouping and a timer helper class\n- [inter_argument_order](https://github.com/CLIUtils/CLI11/blob/main/examples/inter_argument_order.cpp):\n  An app to practice mixing unlimited arguments, but still recover the original\n  order.\n- [json](https://github.com/CLIUtils/CLI11/blob/main/examples/json.cpp): Using\n  JSON as a config file parser\n- [modhelp](https://github.com/CLIUtils/CLI11/blob/main/examples/modhelp.cpp):\n  How to modify the help flag to do something other than default\n- [nested](https://github.com/CLIUtils/CLI11/blob/main/examples/nested.cpp):\n  Nested subcommands\n- [option_groups](https://github.com/CLIUtils/CLI11/blob/main/examples/option_groups.cpp):\n  Illustrating the use of option groups and a required number of options. Based\n  on [Issue #88](https://github.com/CLIUtils/CLI11/issues/88) to set interacting\n  groups of options\n- [positional_arity](https://github.com/CLIUtils/CLI11/blob/main/examples/positional_arity.cpp):\n  Illustrating use of `preparse_callback` to handle situations where the number\n  of arguments can determine which should get parsed, Based on\n  [Issue #166](https://github.com/CLIUtils/CLI11/issues/166)\n- [positional_validation](https://github.com/CLIUtils/CLI11/blob/main/examples/positional_validation.cpp):\n  Example of how positional arguments are validated using the\n  `validate_positional` flag, also based on\n  [Issue #166](https://github.com/CLIUtils/CLI11/issues/166)\n- [prefix_command](https://github.com/CLIUtils/CLI11/blob/main/examples/prefix_command.cpp):\n  Illustrating use of the `prefix_command` flag.\n- [ranges](https://github.com/CLIUtils/CLI11/blob/main/examples/ranges.cpp): App\n  to demonstrate exclusionary option groups based on\n  [Issue #88](https://github.com/CLIUtils/CLI11/issues/88)\n- [shapes](https://github.com/CLIUtils/CLI11/blob/main/examples/shapes.cpp):\n  Illustrating how to set up repeated subcommands Based on\n  [gitter discussion](https://gitter.im/CLI11gitter/Lobby?at=5c7af6b965ffa019ea788cd5)\n- [simple](https://github.com/CLIUtils/CLI11/blob/main/examples/simple.cpp): A\n  simple example of how to set up a CLI11 Application with different flags and\n  options\n- [subcom_help](https://github.com/CLIUtils/CLI11/blob/main/examples/subcom_help.cpp):\n  Configuring help for subcommands\n- [subcom_partitioned](https://github.com/CLIUtils/CLI11/blob/main/examples/subcom_partitioned.cpp):\n  Example with a timer and subcommands generated separately and added to the\n  main app later.\n- [subcommands](https://github.com/CLIUtils/CLI11/blob/main/examples/subcommands.cpp):\n  Short example of subcommands\n- [validators](https://github.com/CLIUtils/CLI11/blob/main/examples/validators.cpp):\n  Example illustrating use of validators\n\n## Contribute\n\nTo contribute, open an [issue][github issues] or [pull\nrequest][github pull requests] on GitHub, or ask a question on [gitter][]. There\nis also a [short note to contributors](./.github/CONTRIBUTING.md). This readme\nroughly follows the [Standard Readme Style][] and includes a mention of almost\nevery feature of the library. More complex features are documented in more\ndetail in the [CLI11 tutorial GitBook][gitbook].\n\nThis project was created by [Henry Schreiner](https://github.com/henryiii) and\nmajor features were added by [Philip Top](https://github.com/phlptp). Special\nthanks to all the contributors\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://profiles.sussex.ac.uk/p281168-alex-dewar/publications\"><img src=\"https://avatars.githubusercontent.com/u/23149834?v=4?s=100\" width=\"100px;\" alt=\"Alex Dewar\"/><br /><sub><b>Alex Dewar</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=alexdewar\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrew-hardin\"><img src=\"https://avatars0.githubusercontent.com/u/16496326?v=4?s=100\" width=\"100px;\" alt=\"Andrew Hardin\"/><br /><sub><b>Andrew Hardin</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=andrew-hardin\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andreasxp\"><img src=\"https://avatars.githubusercontent.com/u/28830446?v=4?s=100\" width=\"100px;\" alt=\"Andrey Zhukov\"/><br /><sub><b>Andrey Zhukov</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=andreasxp\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SX91\"><img src=\"https://avatars2.githubusercontent.com/u/754754?v=4?s=100\" width=\"100px;\" alt=\"Anton\"/><br /><sub><b>Anton</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=SX91\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trokhymchuk\"><img src=\"https://avatars.githubusercontent.com/u/66204814?v=4?s=100\" width=\"100px;\" alt=\"Artem Trokhymchuk \"/><br /><sub><b>Artem Trokhymchuk </b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=trokhymchuk\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BenjaminBeichler\"><img src=\"https://avatars.githubusercontent.com/u/1441492?v=4?s=100\" width=\"100px;\" alt=\"Benjamin Beichler\"/><br /><sub><b>Benjamin Beichler</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=BenjaminBeichler\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/calebzulawski\"><img src=\"https://avatars.githubusercontent.com/u/563826?v=4?s=100\" width=\"100px;\" alt=\"Caleb Zulawski\"/><br /><sub><b>Caleb Zulawski</b></sub></a><br /><a href=\"#platform-calebzulawski\" title=\"Packaging/porting to new platform\">📦</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/krico\"><img src=\"https://avatars.githubusercontent.com/u/6952185?v=4?s=100\" width=\"100px;\" alt=\"Christian Asmussen\"/><br /><sub><b>Christian Asmussen</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=krico\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/cbachhuber/\"><img src=\"https://avatars0.githubusercontent.com/u/27212661?v=4?s=100\" width=\"100px;\" alt=\"Christoph Bachhuber\"/><br /><sub><b>Christoph Bachhuber</b></sub></a><br /><a href=\"#example-cbachhuber\" title=\"Examples\">💡</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=cbachhuber\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfleury2\"><img src=\"https://avatars1.githubusercontent.com/u/4805384?v=4?s=100\" width=\"100px;\" alt=\"D. Fleury\"/><br /><sub><b>D. Fleury</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dfleury2\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dbarowy\"><img src=\"https://avatars3.githubusercontent.com/u/573142?v=4?s=100\" width=\"100px;\" alt=\"Dan Barowy\"/><br /><sub><b>Dan Barowy</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dbarowy\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mensinda\"><img src=\"https://avatars3.githubusercontent.com/u/3407462?v=4?s=100\" width=\"100px;\" alt=\"Daniel Mensinger\"/><br /><sub><b>Daniel Mensinger</b></sub></a><br /><a href=\"#platform-mensinda\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DarkWingMcQuack\"><img src=\"https://avatars.githubusercontent.com/u/38857302?v=4?s=100\" width=\"100px;\" alt=\"DarkWingMcQuack\"/><br /><sub><b>DarkWingMcQuack</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=DarkWingMcQuack\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ZeeD26\"><img src=\"https://avatars2.githubusercontent.com/u/2487468?v=4?s=100\" width=\"100px;\" alt=\"Dominik Steinberger\"/><br /><sub><b>Dominik Steinberger</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ZeeD26\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dvj\"><img src=\"https://avatars2.githubusercontent.com/u/77217?v=4?s=100\" width=\"100px;\" alt=\"Doug Johnston\"/><br /><sub><b>Doug Johnston</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Advj\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=dvj\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://recursiveascent.blogspot.com/\"><img src=\"https://avatars.githubusercontent.com/u/1779595?v=4?s=100\" width=\"100px;\" alt=\"Dylan Baker\"/><br /><sub><b>Dylan Baker</b></sub></a><br /><a href=\"#platform-dcbaker\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/eli-schwartz\"><img src=\"https://avatars.githubusercontent.com/u/6551424?v=4?s=100\" width=\"100px;\" alt=\"Eli Schwartz\"/><br /><sub><b>Eli Schwartz</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=eli-schwartz\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sifferman\"><img src=\"https://avatars.githubusercontent.com/u/43790149?v=4?s=100\" width=\"100px;\" alt=\"Ethan Sifferman\"/><br /><sub><b>Ethan Sifferman</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=sifferman\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/helmesjo\"><img src=\"https://avatars0.githubusercontent.com/u/2501070?v=4?s=100\" width=\"100px;\" alt=\"Fred Helmesjö\"/><br /><sub><b>Fred Helmesjö</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ahelmesjo\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=helmesjo\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://iscinumpy.gitlab.io\"><img src=\"https://avatars1.githubusercontent.com/u/4616906?v=4?s=100\" width=\"100px;\" alt=\"Henry Schreiner\"/><br /><sub><b>Henry Schreiner</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ahenryiii\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=henryiii\" title=\"Documentation\">📖</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=henryiii\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://izzys.casa\"><img src=\"https://avatars0.githubusercontent.com/u/63051?v=4?s=100\" width=\"100px;\" alt=\"Isabella Muerte\"/><br /><sub><b>Isabella Muerte</b></sub></a><br /><a href=\"#platform-slurps-mad-rips\" title=\"Packaging/porting to new platform\">📦</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://izzys.casa/\"><img src=\"https://avatars.githubusercontent.com/u/63051?v=4?s=100\" width=\"100px;\" alt=\"Izzy Muerte\"/><br /><sub><b>Izzy Muerte</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=bruxisma\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jakoblover\"><img src=\"https://avatars0.githubusercontent.com/u/14160441?v=4?s=100\" width=\"100px;\" alt=\"Jakob Lover\"/><br /><sub><b>Jakob Lover</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jakoblover\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jgerityneurala\"><img src=\"https://avatars2.githubusercontent.com/u/57360646?v=4?s=100\" width=\"100px;\" alt=\"James Gerity\"/><br /><sub><b>James Gerity</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jgerityneurala\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jbriales\"><img src=\"https://avatars1.githubusercontent.com/u/6850478?v=4?s=100\" width=\"100px;\" alt=\"Jesus Briales\"/><br /><sub><b>Jesus Briales</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jbriales\" title=\"Code\">💻</a> <a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ajbriales\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SkyToGround\"><img src=\"https://avatars1.githubusercontent.com/u/58835?v=4?s=100\" width=\"100px;\" alt=\"Jonas Nilsson\"/><br /><sub><b>Jonas Nilsson</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3ASkyToGround\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=SkyToGround\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/j-rivero\"><img src=\"https://avatars.githubusercontent.com/u/2098802?v=4?s=100\" width=\"100px;\" alt=\"Jose Luis Rivero\"/><br /><sub><b>Jose Luis Rivero</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=j-rivero\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4?s=100\" width=\"100px;\" alt=\"Josh Soref\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"#tool-jsoref\" title=\"Tools\">🔧</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/KOLANICH\"><img src=\"https://avatars1.githubusercontent.com/u/240344?v=4?s=100\" width=\"100px;\" alt=\"KOLANICH\"/><br /><sub><b>KOLANICH</b></sub></a><br /><a href=\"#platform-KOLANICH\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/skannan89\"><img src=\"https://avatars0.githubusercontent.com/u/11918764?v=4?s=100\" width=\"100px;\" alt=\"Kannan\"/><br /><sub><b>Kannan</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Askannan89\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=skannan89\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://himvis.com\"><img src=\"https://avatars3.githubusercontent.com/u/465279?v=4?s=100\" width=\"100px;\" alt=\"Khem Raj\"/><br /><sub><b>Khem Raj</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=kraj\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/looopTools\"><img src=\"https://avatars.githubusercontent.com/u/1943536?v=4?s=100\" width=\"100px;\" alt=\"Lars Nielsen\"/><br /><sub><b>Lars Nielsen</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=looopTools\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucas-czech.de\"><img src=\"https://avatars0.githubusercontent.com/u/4741887?v=4?s=100\" width=\"100px;\" alt=\"Lucas Czech\"/><br /><sub><b>Lucas Czech</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Alczech\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=lczech\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mogigoma.com/\"><img src=\"https://avatars2.githubusercontent.com/u/130862?v=4?s=100\" width=\"100px;\" alt=\"Mak Kolybabi\"/><br /><sub><b>Mak Kolybabi</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=mogigoma\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cetius\"><img src=\"https://avatars.githubusercontent.com/u/6552472?v=4?s=100\" width=\"100px;\" alt=\"Marcin Ropa\"/><br /><sub><b>Marcin Ropa</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=cetius\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lambdafu.net/\"><img src=\"https://avatars1.githubusercontent.com/u/1138455?v=4?s=100\" width=\"100px;\" alt=\"Marcus Brinkmann\"/><br /><sub><b>Marcus Brinkmann</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Alambdafu\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=lambdafu\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://msoeken.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/1998245?v=4?s=100\" width=\"100px;\" alt=\"Mathias Soeken\"/><br /><sub><b>Mathias Soeken</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=msoeken\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mmmccormick.com/\"><img src=\"https://avatars.githubusercontent.com/u/25432?v=4?s=100\" width=\"100px;\" alt=\"Matt McCormick\"/><br /><sub><b>Matt McCormick</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=thewtex\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AnticliMaxtic\"><img src=\"https://avatars.githubusercontent.com/u/43995389?v=4?s=100\" width=\"100px;\" alt=\"Max\"/><br /><sub><b>Max</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=AnticliMaxtic\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://mbh.sh\"><img src=\"https://avatars3.githubusercontent.com/u/20403931?v=4?s=100\" width=\"100px;\" alt=\"Michael Hall\"/><br /><sub><b>Michael Hall</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=mbhall88\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nathanhourt\"><img src=\"https://avatars2.githubusercontent.com/u/271977?v=4?s=100\" width=\"100px;\" alt=\"Nathan Hourt\"/><br /><sub><b>Nathan Hourt</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Anathanhourt\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=nathanhourt\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nathanielhourt\"><img src=\"https://avatars.githubusercontent.com/u/271977?v=4?s=100\" width=\"100px;\" alt=\"Nathaniel Hourt\"/><br /><sub><b>Nathaniel Hourt</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=nathanielhourt\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paddy-hack\"><img src=\"https://avatars.githubusercontent.com/u/6804372?v=4?s=100\" width=\"100px;\" alt=\"Olaf Meeuwissen\"/><br /><sub><b>Olaf Meeuwissen</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=paddy-hack\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ondrejcertik.com/\"><img src=\"https://avatars3.githubusercontent.com/u/20568?v=4?s=100\" width=\"100px;\" alt=\"Ondřej Čertík\"/><br /><sub><b>Ondřej Čertík</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Acertik\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pleroux0\"><img src=\"https://avatars2.githubusercontent.com/u/39619854?v=4?s=100\" width=\"100px;\" alt=\"Paul le Roux\"/><br /><sub><b>Paul le Roux</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=pleroux0\" title=\"Code\">💻</a> <a href=\"#platform-pleroux0\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/chfast\"><img src=\"https://avatars1.githubusercontent.com/u/573380?v=4?s=100\" width=\"100px;\" alt=\"Paweł Bylica\"/><br /><sub><b>Paweł Bylica</b></sub></a><br /><a href=\"#platform-chfast\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/PeteAudinate\"><img src=\"https://avatars.githubusercontent.com/u/99274874?v=4?s=100\" width=\"100px;\" alt=\"PeteAudinate\"/><br /><sub><b>PeteAudinate</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=PeteAudinate\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/peterazmanov\"><img src=\"https://avatars0.githubusercontent.com/u/15322318?v=4?s=100\" width=\"100px;\" alt=\"Peter Azmanov\"/><br /><sub><b>Peter Azmanov</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=peterazmanov\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/peterh\"><img src=\"https://avatars.githubusercontent.com/u/79339?v=4?s=100\" width=\"100px;\" alt=\"Peter Harris\"/><br /><sub><b>Peter Harris</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=peterh\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ptheywood.uk/\"><img src=\"https://avatars.githubusercontent.com/u/628937?v=4?s=100\" width=\"100px;\" alt=\"Peter Heywood\"/><br /><sub><b>Peter Heywood</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ptheywood\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/phlptp\"><img src=\"https://avatars0.githubusercontent.com/u/20667153?v=4?s=100\" width=\"100px;\" alt=\"Philip Top\"/><br /><sub><b>Philip Top</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Aphlptp\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=phlptp\" title=\"Documentation\">📖</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=phlptp\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rafiw\"><img src=\"https://avatars3.githubusercontent.com/u/3034707?v=4?s=100\" width=\"100px;\" alt=\"Rafi Wiener\"/><br /><sub><b>Rafi Wiener</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Arafiw\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=rafiw\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/RangeMachine\"><img src=\"https://avatars.githubusercontent.com/u/11577601?v=4?s=100\" width=\"100px;\" alt=\"RangeMachine\"/><br /><sub><b>RangeMachine</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=RangeMachine\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Krzmbrzl\"><img src=\"https://avatars.githubusercontent.com/u/12751591?v=4?s=100\" width=\"100px;\" alt=\"Robert Adam\"/><br /><sub><b>Robert Adam</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=Krzmbrzl\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ratml.org/\"><img src=\"https://avatars0.githubusercontent.com/u/1845039?v=4?s=100\" width=\"100px;\" alt=\"Ryan Curtin\"/><br /><sub><b>Ryan Curtin</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=rcurtin\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SherlockInSpace\"><img src=\"https://avatars.githubusercontent.com/u/5507786?v=4?s=100\" width=\"100px;\" alt=\"Ryan Sherlock\"/><br /><sub><b>Ryan Sherlock</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=SherlockInSpace\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sam.hocevar.net/\"><img src=\"https://avatars2.githubusercontent.com/u/245089?v=4?s=100\" width=\"100px;\" alt=\"Sam Hocevar\"/><br /><sub><b>Sam Hocevar</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=samhocevar\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://seanfisk.com/\"><img src=\"https://avatars0.githubusercontent.com/u/410322?v=4?s=100\" width=\"100px;\" alt=\"Sean Fisk\"/><br /><sub><b>Sean Fisk</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Aseanfisk\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=seanfisk\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/delpinux\"><img src=\"https://avatars0.githubusercontent.com/u/35096584?v=4?s=100\" width=\"100px;\" alt=\"Stéphane Del Pino\"/><br /><sub><b>Stéphane Del Pino</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=delpinux\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/metopa\"><img src=\"https://avatars2.githubusercontent.com/u/3974178?v=4?s=100\" width=\"100px;\" alt=\"Viacheslav Kroilov\"/><br /><sub><b>Viacheslav Kroilov</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=metopa\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VolkerChristian\"><img src=\"https://avatars.githubusercontent.com/u/18554540?v=4?s=100\" width=\"100px;\" alt=\"Volker Christian\"/><br /><sub><b>Volker Christian</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=VolkerChristian\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/almikhayl\"><img src=\"https://avatars2.githubusercontent.com/u/6747040?v=4?s=100\" width=\"100px;\" alt=\"almikhayl\"/><br /><sub><b>almikhayl</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=almikhayl\" title=\"Code\">💻</a> <a href=\"#platform-almikhayl\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ayum\"><img src=\"https://avatars.githubusercontent.com/u/6747040?v=4?s=100\" width=\"100px;\" alt=\"ayum\"/><br /><sub><b>ayum</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ayum\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/captainurist\"><img src=\"https://avatars.githubusercontent.com/u/73941350?v=4?s=100\" width=\"100px;\" alt=\"captainurist\"/><br /><sub><b>captainurist</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=captainurist\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://cs.odu.edu/~ctsolakis\"><img src=\"https://avatars0.githubusercontent.com/u/6725596?v=4?s=100\" width=\"100px;\" alt=\"christos\"/><br /><sub><b>christos</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ChristosT\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/deining\"><img src=\"https://avatars3.githubusercontent.com/u/18169566?v=4?s=100\" width=\"100px;\" alt=\"deining\"/><br /><sub><b>deining</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=deining\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dherrera-fb\"><img src=\"https://avatars.githubusercontent.com/u/89840711?v=4?s=100\" width=\"100px;\" alt=\"dherrera-fb\"/><br /><sub><b>dherrera-fb</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dherrera-fb\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djerius\"><img src=\"https://avatars.githubusercontent.com/u/196875?v=4?s=100\" width=\"100px;\" alt=\"djerius\"/><br /><sub><b>djerius</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=djerius\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dryleev\"><img src=\"https://avatars.githubusercontent.com/u/83670813?v=4?s=100\" width=\"100px;\" alt=\"dryleev\"/><br /><sub><b>dryleev</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dryleev\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/elszon\"><img src=\"https://avatars0.githubusercontent.com/u/2971495?v=4?s=100\" width=\"100px;\" alt=\"elszon\"/><br /><sub><b>elszon</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=elszon\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ferdymercury\"><img src=\"https://avatars3.githubusercontent.com/u/10653970?v=4?s=100\" width=\"100px;\" alt=\"ferdymercury\"/><br /><sub><b>ferdymercury</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ferdymercury\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/fpeng1985\"><img src=\"https://avatars1.githubusercontent.com/u/87981?v=4?s=100\" width=\"100px;\" alt=\"fpeng1985\"/><br /><sub><b>fpeng1985</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=fpeng1985\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/geir-t\"><img src=\"https://avatars3.githubusercontent.com/u/35292136?v=4?s=100\" width=\"100px;\" alt=\"geir-t\"/><br /><sub><b>geir-t</b></sub></a><br /><a href=\"#platform-geir-t\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gostefan\"><img src=\"https://avatars.githubusercontent.com/u/2479455?v=4?s=100\" width=\"100px;\" alt=\"gostefan\"/><br /><sub><b>gostefan</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=gostefan\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ncihnegn\"><img src=\"https://avatars3.githubusercontent.com/u/12021721?v=4?s=100\" width=\"100px;\" alt=\"ncihnegn\"/><br /><sub><b>ncihnegn</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ncihnegn\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nurelin\"><img src=\"https://avatars3.githubusercontent.com/u/5276274?v=4?s=100\" width=\"100px;\" alt=\"nurelin\"/><br /><sub><b>nurelin</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=nurelin\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://polistern.i2p/\"><img src=\"https://avatars.githubusercontent.com/u/55511995?v=4?s=100\" width=\"100px;\" alt=\"polistern\"/><br /><sub><b>polistern</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=polistern\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryan4729\"><img src=\"https://avatars3.githubusercontent.com/u/40183301?v=4?s=100\" width=\"100px;\" alt=\"ryan4729\"/><br /><sub><b>ryan4729</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ryan4729\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shameekganguly\"><img src=\"https://avatars.githubusercontent.com/u/2412842?v=4?s=100\" width=\"100px;\" alt=\"shameekganguly\"/><br /><sub><b>shameekganguly</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=shameekganguly\" title=\"Code\">💻</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/all-contributors/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## License\n\nAs of version 1.0, this library is available under a 3-Clause BSD license. See\nthe [LICENSE](./LICENSE) file for details.\n\nCLI11 was developed at the [University of Cincinnati][] to support of the\n[GooFit][] library under [NSF Award 1414736][]. Version 0.9 was featured in a\n[DIANA/HEP][] meeting at CERN ([see the slides][diana slides]). Please give it a\ntry! Feedback is always welcome.\n\n[doi-badge]: https://zenodo.org/badge/80064252.svg\n[doi-link]: https://zenodo.org/badge/latestdoi/80064252\n[azure-badge]:\n  https://dev.azure.com/CLIUtils/CLI11/_apis/build/status/CLIUtils.CLI11?branchName=main\n[azure]: https://dev.azure.com/CLIUtils/CLI11\n[actions-link]: https://github.com/CLIUtils/CLI11/actions\n[actions-badge]:\n  https://github.com/CLIUtils/CLI11/actions/workflows/tests.yml/badge.svg\n[repology-badge]: https://repology.org/badge/latest-versions/cli11.svg\n[repology]: https://repology.org/project/cli11/versions\n[codecov-badge]:\n  https://codecov.io/gh/CLIUtils/CLI11/branch/main/graph/badge.svg?token=2O4wfs8NJO\n[codecov]: https://codecov.io/gh/CLIUtils/CLI11\n[gitter-badge]: https://badges.gitter.im/CLI11gitter/Lobby.svg\n[gitter]: https://gitter.im/CLI11gitter/Lobby\n[license-badge]: https://img.shields.io/badge/License-BSD-blue.svg\n[conan-badge]: https://img.shields.io/badge/conan-io-blue\n[conan-link]: https://conan.io/center/cli11\n[conda-badge]: https://img.shields.io/conda/vn/conda-forge/cli11.svg\n[conda-link]: https://github.com/conda-forge/cli11-feedstock\n[github releases]: https://github.com/CLIUtils/CLI11/releases\n[github issues]: https://github.com/CLIUtils/CLI11/issues\n[github pull requests]: https://github.com/CLIUtils/CLI11/pulls\n[goofit]: https://GooFit.github.io\n[plumbum]: https://plumbum.readthedocs.io/en/latest/\n[click]: http://click.pocoo.org\n[api-docs]: https://CLIUtils.github.io/CLI11/index.html\n[rang]: https://github.com/agauniyal/rang\n[boost program options]:\n  http://www.boost.org/doc/libs/1_63_0/doc/html/program_options.html\n[the lean mean c++ option parser]: http://optionparser.sourceforge.net\n[tclap]: http://tclap.sourceforge.net\n[cxxopts]: https://github.com/jarro2783/cxxopts\n[docopt]: https://github.com/docopt/docopt.cpp\n[gflags]: https://gflags.github.io/gflags\n[getopt]: https://www.gnu.org/software/libc/manual/html_node/Getopt.html\n[diana/hep]: http://diana-hep.org\n[nsf award 1414736]: https://nsf.gov/awardsearch/showAward?AWD_ID=1414736\n[university of cincinnati]: http://www.uc.edu\n[gitbook]: https://cliutils.github.io/CLI11/book/\n[cli11 advanced topics/custom converters]:\n  https://cliutils.gitlab.io/CLI11Tutorial/chapters/advanced-topics.html#custom-converters\n[programoptions.hxx]: https://github.com/Fytch/ProgramOptions.hxx\n[argument aggregator]: https://github.com/vietjtnguyen/argagg\n[args]: https://github.com/Taywee/args\n[argh!]: https://github.com/adishavit/argh\n[fmt]: https://github.com/fmtlib/fmt\n[catch]: https://github.com/philsquared/Catch\n[clara]: https://github.com/philsquared/Clara\n[version 1.0 post]: https://iscinumpy.gitlab.io/post/announcing-cli11-10/\n[version 1.3 post]: https://iscinumpy.gitlab.io/post/announcing-cli11-13/\n[version 1.6 post]: https://iscinumpy.gitlab.io/post/announcing-cli11-16/\n[version 2.0 post]: https://iscinumpy.gitlab.io/post/announcing-cli11-20/\n[wandbox-badge]: https://img.shields.io/badge/try_2.1-online-blue.svg\n[wandbox-link]: https://wandbox.org/permlink/9eQyaD1DchlzukRv\n[releases-badge]: https://img.shields.io/github/release/CLIUtils/CLI11.svg\n[cli11-po-compare]:\n  https://iscinumpy.gitlab.io/post/comparing-cli11-and-boostpo/\n[diana slides]:\n  https://indico.cern.ch/event/619465/contributions/2507949/attachments/1448567/2232649/20170424-diana-2.pdf\n[awesome c++]: https://github.com/fffaraz/awesome-cpp/blob/master/README.md#cli\n[cli]: https://codesynthesis.com/projects/cli/\n[single file libs]:\n  https://github.com/nothings/single_file_libs/blob/master/README.md\n[codacy-badge]:\n  https://app.codacy.com/project/badge/Grade/2796b969c1b54321a02ad08affec0800\n[codacy-link]:\n  https://www.codacy.com/gh/CLIUtils/CLI11/dashboard?utm_source=github.com&utm_medium=referral&utm_content=CLIUtils/CLI11&utm_campaign=Badge_Grade\n[hunter]: https://docs.hunter.sh/en/latest/packages/pkg/CLI11.html\n[standard readme style]: https://github.com/RichardLitt/standard-readme\n[argparse]: https://github.com/p-ranav/argparse\n[toml]: https://toml.io\n[lyra]: https://github.com/bfgroup/Lyra\n[installation]: https://cliutils.github.io/CLI11/book/chapters/installation.html\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 5.123046875,
          "content": "# C/C++ with GCC\n# Build your C/C++ project with GCC using make.\n# Add steps that publish test results, save build artifacts, deploy, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc\n\ntrigger:\n  - main\n  - \"v*\"\n\npr:\n  - main\n\nvariables:\n  cli11.single: ON\n  cli11.std: 14\n  cli11.build_type: Debug\n  cli11.options: -DCLI11_EXAMPLES_JSON=ON\n  cli11.precompile: OFF\n  CMAKE_BUILD_PARALLEL_LEVEL: 4\n\njobs:\n  - job: CppLint\n    pool:\n      vmImage: \"ubuntu-latest\"\n    container: helics/buildenv:cpplint\n    steps:\n      - bash: cpplint --counting=detailed --recursive examples include/CLI tests\n        displayName: Checking against google style guide\n\n  - job: build_only\n    strategy:\n      matrix:\n        visual_studio_arm64:\n          vmImage: \"windows-2022\"\n          cli11.std: 17\n          cli11.build_type: Debug\n          cli11.options: -G \"Visual Studio 17 2022\" -A ARM64\n    pool:\n      vmImage: $(vmImage)\n\n    steps:\n      - template: .ci/azure-build.yml\n\n  - job: Native\n    strategy:\n      matrix:\n        Linux14:\n          vmImage: \"ubuntu-latest\"\n        Linux14PC:\n          vmImage: \"ubuntu-latest\"\n          cli11.precompile: ON\n        macOS-15_23:\n          vmImage: \"macOS-15\"\n          cli11.std: 23\n        macOS-14_20:\n          vmImage: \"macOS-14\"\n          cli11.std: 20\n        macOS-13_17:\n          vmImage: \"macOS-13\"\n          cli11.std: 17\n        macOS-14_11:\n          vmImage: \"macOS-14\"\n          cli11.std: 11\n        macOS-14_14_PC:\n          vmImage: \"macOS-14\"\n          cli11.std: 14\n          cli11.precompile: ON\n        Windows17:\n          vmImage: \"windows-2019\"\n          cli11.std: 17\n        Windows17PC:\n          vmImage: \"windows-2019\"\n          cli11.std: 17\n          cli11.precompile: ON\n        Windows11:\n          vmImage: \"windows-2019\"\n          cli11.std: 11\n        Windows20:\n          vmImage: \"windows-2022\"\n          cli11.std: 20\n          cli11.options: -DCMAKE_CXX_FLAGS=\"/EHsc\"\n        WindowsLatest:\n          vmImage: \"windows-2022\"\n          cli11.std: 23\n          cli11.options: -DCMAKE_CXX_FLAGS=\"/EHsc\"\n        Linux17nortti:\n          vmImage: \"ubuntu-latest\"\n          cli11.std: 17\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-fno-rtti\"\n    pool:\n      vmImage: $(vmImage)\n    steps:\n      - template: .ci/azure-build.yml\n      - template: .ci/azure-test.yml\n\n  - job: Meson\n    pool:\n      vmImage: \"ubuntu-latest\"\n    steps:\n      - task: UsePythonVersion@0\n        inputs:\n          versionSpec: \"3.7\"\n      - script: python3 -m pip install meson ninja\n        displayName: install meson\n      - script: mkdir tests/mesonTest/subprojects\n        displayName: generate test directories\n      - script: ln -s  \"$(pwd)\" tests/mesonTest/subprojects/CLI11\n        displayName: generate CLI11 symlink\n        # Ensure that Meson doesn't use cmake or pkgconfig to find CLI11\n      - script: meson setup build --force-fallback-for=CLI11\n        displayName: Run meson to generate build\n        workingDirectory: tests/mesonTest\n      - script: ninja -C tests/mesonTest/build\n        displayName: Build with Ninja\n      - script: ./tests/mesonTest/build/main --help\n        displayName: Run help\n\n  - job: Docker\n    variables:\n      cli11.single: OFF\n    pool:\n      vmImage: \"ubuntu-latest\"\n    strategy:\n      matrix:\n        gcc9:\n          containerImage: gcc:9\n          cli11.std: 17\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-Wstrict-overflow=5\"\n        gcc11:\n          containerImage: gcc:11\n          cli11.std: 20\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-Wredundant-decls -Wconversion\"\n        gcc7:\n          containerImage: gcc:7\n          cli11.std: 14\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-Wconversion\"\n        gcc4.8:\n          containerImage: helics/buildenv:gcc4-8-builder\n          cli11.std: 11\n        clang3.4:\n          containerImage: silkeh/clang:3.4\n          cli11.std: 11\n        clang8:\n          containerImage: silkeh/clang:8\n          cli11.std: 14\n          cli11.options: -DCLI11_FORCE_LIBCXX=ON\n        clang8_17:\n          containerImage: silkeh/clang:8\n          cli11.std: 17\n          cli11.options: -DCLI11_FORCE_LIBCXX=ON\n        clang10_20:\n          containerImage: silkeh/clang:10\n          cli11.std: 20\n          cli11.options: -DCLI11_FORCE_LIBCXX=ON -DCMAKE_CXX_FLAGS=-std=c++20\n    container: $[ variables['containerImage'] ]\n    steps:\n      - template: .ci/azure-cmake.yml\n      - template: .ci/azure-build.yml\n      - template: .ci/azure-test.yml\n\n  - job: Docker_new\n    variables:\n      cli11.single: OFF\n    pool:\n      vmImage: \"ubuntu-latest\"\n    strategy:\n      matrix:\n        gcc13:\n          containerImage: gcc:13\n          cli11.std: 17\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-Wstrict-overflow=5\"\n        gcc12:\n          containerImage: gcc:12\n          cli11.std: 20\n          cli11.options: -DCMAKE_CXX_FLAGS=\"-Wredundant-decls -Wconversion\"\n        clang17_20:\n          containerImage: silkeh/clang:17\n          cli11.std: 23\n          cli11.options: -DCMAKE_CXX_FLAGS=-std=c++23\n    container: $[ variables['containerImage'] ]\n    steps:\n      - template: .ci/azure-cmake-new.yml\n      - template: .ci/azure-build.yml\n      - template: .ci/azure-test.yml\n"
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 2.35546875,
          "content": "project('CLI11', ['cpp'],\n  version         : run_command(find_program('scripts/ExtractVersion.py'), check: true).stdout().strip(),\n  license         : 'BSD-3-clause',\n  meson_version   : '>= 0.60',\n  default_options : ['cpp_std=c++11', 'warning_level=3']\n)\n\ncxx = meson.get_compiler('cpp')\n\nuse_single_header = get_option('single-file-header')\nuse_precompiled =   get_option('precompiled')\n\nif use_precompiled and use_single_header\n  error('Options \"single-file\"header\" and \"precompiled\" are mutually exclusive')\nendif\n\ncli11_headers = files(\n  'include/CLI/App.hpp',\n  'include/CLI/Argv.hpp',\n  'include/CLI/CLI.hpp',\n  'include/CLI/Config.hpp',\n  'include/CLI/ConfigFwd.hpp',\n  'include/CLI/Encoding.hpp',\n  'include/CLI/Error.hpp',\n  'include/CLI/Formatter.hpp',\n  'include/CLI/FormatterFwd.hpp',\n  'include/CLI/Macros.hpp',\n  'include/CLI/Option.hpp',\n  'include/CLI/Split.hpp',\n  'include/CLI/StringTools.hpp',\n  'include/CLI/TypeTools.hpp',\n  'include/CLI/Validators.hpp',\n  'include/CLI/Version.hpp',\n)\n\ncli11_impl_headers = files(\n  'include/CLI/impl/App_inl.hpp',\n  'include/CLI/impl/Argv_inl.hpp',\n  'include/CLI/impl/Config_inl.hpp',\n  'include/CLI/impl/Encoding_inl.hpp',\n  'include/CLI/impl/Formatter_inl.hpp',\n  'include/CLI/impl/Option_inl.hpp',\n  'include/CLI/impl/Split_inl.hpp',\n  'include/CLI/impl/StringTools_inl.hpp',\n  'include/CLI/impl/Validators_inl.hpp',\n)\n\nsubdir('single-include')\n\nCLI11_inc = include_directories(['include'])\n\nwarnings = ['-Wshadow', '-Wsign-conversion', '-Wswitch-enum']\nif cxx.get_id() == 'gcc' and cxx.version().version_compare('>=4.9')\n  warnings += '-Weffc++'\nendif\nif cxx.get_id() == 'clang'\n  warnings += [\n    '-Wcast-align',\n    '-Wimplicit-atomic-properties',\n    '-Wmissing-declarations',\n    '-Woverlength-strings',\n    '-Wstrict-selector-match',\n    '-Wundeclared-selector',\n  ]\nendif\nadd_project_arguments(cxx.get_supported_arguments(warnings), language: 'cpp')\n\nif use_precompiled\n  libcli11 = static_library(\n    'CLI11',\n    'src/Precompile.cpp',\n    include_directories : CLI11_inc,\n    cpp_args            : ['-DCLI11_COMPILE'],\n  )\nelse\n  libcli11 = []\nendif\n\nCLI11_dep = declare_dependency(\n  sources             : single_header,\n  link_with           : libcli11,\n  include_directories : CLI11_inc,\n  version             : meson.project_version(),\n)\n\nmeson.override_dependency('CLI11', CLI11_dep)\n\nif get_option('tests')\n  subdir('tests')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.314453125,
          "content": "option('tests', type: 'boolean', value: false, description: 'Build CLI11 tests')\noption('single-file-header', type: 'boolean', value: false, description : 'Generate a single header file.')\noption('precompiled', type: 'boolean', value: false, description : 'Generate a precompiled static library instead of a header-only')\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "single-include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}