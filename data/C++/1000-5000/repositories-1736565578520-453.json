{
  "metadata": {
    "timestamp": 1736565578520,
    "page": 453,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "miguelbalboa/rfid",
      "stars": 2822,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.20703125,
          "content": ".github/ export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n\n.travis.yml export-ignore\n\ndoc/*.doc export-ignore\n\n*.h text diff=cpp linguist-language=C++\n*.ino text diff=cpp linguist-language=C++\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": "MFRC522.zip\n\n# ignore IDE files\n.idea\ncmake\nCMakeLists.txt"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 18.37109375,
          "content": "MFRC522\n=======\n\n.. image:: https://img.shields.io/maintenance/no/2019.svg\n    :target: `development`_\n.. image:: https://github.com/miguelbalboa/rfid/workflows/PlatformIO%20CI/badge.svg\n   :target: https://github.com/miguelbalboa/rfid/actions\n   :alt: GitHub Actions\n.. image:: https://img.shields.io/badge/C%2B%2B-11-brightgreen.svg\n    :target: `compatible ide`_\n.. image:: https://img.shields.io/github/release/miguelbalboa/rfid.svg?colorB=green\n    :target: https://github.com/miguelbalboa/rfid/releases\n    :alt: Releases\n.. image:: https://img.shields.io/badge/ArduinoIDE-%3E%3D1.6.10-lightgrey.svg\n    :target: `compatible ide`_\n\nArduino library for MFRC522 and other RFID RC522 based modules.\n\nRead and write different types of Radio-Frequency IDentification (RFID) cards\non your Arduino using a RC522 based reader connected via the Serial Peripheral\nInterface (SPI) interface.\n\nFor advanced and further development please use library `RFID_MFRC522v2 <https://github.com/OSSLibraries/Arduino_MFRC522v2>`_.\n\n.. _development:\nDevelopment\n-----------\n\n**The development by owner miguelbalboa has ended**.\n\n**Feature status: complete freeze**; no function or API change.\n\n**Code status: partial freeze**; just fixes/typos or documentation updates; *no* extensions for other boards; *no* new examples.\n\n**Maintenance status: sporadically**.\n\n**Why no further development?**\nThis library has a long history and is used in many projects. These projects often do not document what version they use. Committing changes might break those old projects and lead to bad experiences (for beginners) and support requests. For these reasons the library is in freeze mode. You can still commit typo, documentation or bug fixes.\n\n\n.. _before buy:\nBefore buy\n----------\nPlease notice that there are many sellers (ebay, aliexpress, ..) who sell mfrc522 boards. **The quality of these boards are extremely different.** Some are soldered with wrong/low quality capacitors or fake/defect mfrc522.\n\n**Please consider buying several devices from different suppliers.** So the chance of getting a working device is higher.\n\nIf you got a bad board and you can tell us how to detect those boards (silk, chip description, ..), please share your knowledge.\n\n\n.. _what works and not:\nWhat works and not?\n-------------------\n\n* **Works**\n  \n  #. Communication (Crypto1) with MIFARE Classic (1k, 4k, Mini).\n  #. Communication (Crypto1) with MIFARE Classic compatible PICCs.\n  #. Firmware self check of MFRC522.\n  #. Set the UID, write to sector 0, and unbrick Chinese UID changeable MIFARE cards.\n  #. Manage the SPI chip select pin (aka SS, SDA)\n\n* **Works partially**\n\n  #. Communication with MIFARE Ultralight.\n  #. Other PICCs (Ntag216).\n  #. More than 2 modules, require a multiplexer `#191 <https://github.com/miguelbalboa/rfid/issues/191#issuecomment-242631153>`_.\n\n* **Doesn't work**\n  \n  #. MIFARE DESFire, MIFARE DESFire EV1/EV2, not supported by software.\n  #. Communication with 3DES or AES, not supported by software.\n  #. Peer-to-peer (ISO/IEC 18092), not `supported by hardware`_.\n  #. Communication with smart phone, not `supported by hardware`_.\n  #. Card emulation, not `supported by hardware`_.\n  #. Use of IRQ pin. But there is a proof-of-concept example.\n  #. With Intel Galileo (Gen2) see `#310 <https://github.com/miguelbalboa/rfid/issues/310>`__, not supported by software.\n  #. Power reduction modes `#269 <https://github.com/miguelbalboa/rfid/issues/269>`_, not supported by software.\n  #. I2C instead of SPI `#240 <https://github.com/miguelbalboa/rfid/issues/240>`_, not supported by software.\n  #. UART instead of SPI `#281 <https://github.com/miguelbalboa/rfid/issues/281>`_, not supported by software.\n  \n* **Need more?**\n\n  #. If software: code it and make a pull request.\n  #. If hardware: buy a more expensive like PN532 (supports NFC and many more, but costs about $15 and not usable with this library).\n\n\n.. _compatible ide:\nCompatible IDE\n--------------\nThis library works with Arduino IDE 1.6, older versions are **not supported** and will cause compiler errors. The built-in library manager is supported.\n\nIf you use your own compiler, you have to enable ``c++11``-support.\n\n\n.. _compatible boards:\nCompatible boards\n-----------------\n\n**!!!Only for advanced users!!!**\n\nThis library is compatible with the Teensy and ESP8266 if you use the board plugin of the Arduino IDE. Not all examples are available for every board. You also have to change pins. See `pin layout`_.\n\nSome user made some patches/suggestions/ports for other boards:\n\n* Linux: https://github.com/miguelbalboa/rfid/pull/216\n* chipKIT: https://github.com/miguelbalboa/rfid/pull/230\n* ESP8266 (native): https://github.com/miguelbalboa/rfid/pull/235\n* LPCOPen (in C): https://github.com/miguelbalboa/rfid/pull/258\n\nNote that the main target/support of library is still Arduino.\n\n.. _support issue:\nSupport/issue\n-------------\n1. First checkout `what works and not`_ and `troubleshooting`_ .\n\n2. It seems to be a hardware issue or you need support to program your project?\n    Please ask in the official `Arduino forum`_, where you would get a much faster answer than on Github.\n\n3. It seems to be a software issue?\n    Open an issue on Github.\n\n\n.. _code style:\nCode style\n----------\n\nPlease use ``fixed integers``, see `stdint.h`_. Why? This library is compatible with different boards which use different architectures (16bit and 32bit.) Unfixed ``int`` variables have different sizes in different environments and may cause unpredictable behaviour.\n\n\n.. _pin layout:\nPin Layout\n----------\n\nThe following table shows the typical pin layout used:\n\n+-----------+----------+-----------------------------------------------------------------------------------+\n|           | PCD      |                                      Arduino                                      |\n|           +----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n|           | MFRC522  | Uno / 101   | Mega    | Nano v3 |Leonardo / Micro | Pro Micro | Yun [4]_| Due     |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n| Signal    | Pin      | Pin         | Pin     | Pin     | Pin             | Pin       | Pin     | Pin     |\n+===========+==========+=============+=========+=========+=================+===========+=========+=========+\n| RST/Reset | RST      | 9 [1]_      | 5 [1]_  | D9      | RESET / ICSP-5  | RST       | Pin9    | 22 [1]_ |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n| SPI SS    | SDA [3]_ | 10 [2]_     | 53 [2]_ | D10     | 10              | 10        | Pin10   | 23 [2]_ |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n| SPI MOSI  | MOSI     | 11 / ICSP-4 | 51      | D11     | ICSP-4          | 16        | ICSP4   | SPI-4   |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n| SPI MISO  | MISO     | 12 / ICSP-1 | 50      | D12     | ICSP-1          | 14        | ICSP1   | SPI-1   |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n| SPI SCK   | SCK      | 13 / ICSP-3 | 52      | D13     | ICSP-3          | 15        | ICSP3   | SPI-3   |\n+-----------+----------+-------------+---------+---------+-----------------+-----------+---------+---------+\n\n+-----------+---------------+--------------------------+-------------+\n|           | ESP8266       | Teensy                   | 8F328P-U    |\n|           +---------------+--------+--------+--------+-------------+\n|           | Wemos D1 mini | 2.0    | ++ 2.0 | 3.1    | ALPHA       |\n+-----------+---------------+--------+--------+--------+-------------+\n| Signal    | Pin           | Pin    | Pin    | Pin    | Pin [5]_    |\n+===========+===============+========+========+========+=============+\n| RST/Reset | D3            | 7      | 4      | 9      | D9# [1]_    |\n+-----------+---------------+--------+--------+--------+-------------+\n| SPI SS    | D8            | 0      | 20     | 10     | D10# [2]_   |\n+-----------+---------------+--------+--------+--------+-------------+\n| SPI MOSI  | D7            | 2      | 22     | 11     | MOSI / D11# |\n+-----------+---------------+--------+--------+--------+-------------+\n| SPI MISO  | D6            | 3      | 23     | 12     | MISO / D12# |\n+-----------+---------------+--------+--------+--------+-------------+\n| SPI SCK   | D5            | 1      | 21     | 13     | SCK         |\n+-----------+---------------+--------+--------+--------+-------------+\n\n.. [1] Configurable, typically defined as RST_PIN in sketch/program.\n.. [2] Configurable, typically defined as SS_PIN in sketch/program.\n.. [3] The SDA pin might be labeled SS on some/older MFRC522 boards. \n.. [4] Source: `#111 <https://github.com/miguelbalboa/rfid/issues/111#issuecomment-420433658>`_ .\n.. [5] Pin names from the back (empty) side of the board were used as more definitive.\n\nImportant: If your micro controller supports multiple SPI interfaces, the library only uses the **default (first) SPI** of the Arduino framework.\n\n.. _hardware:\nHardware\n--------\n\nThere are three hardware components involved:\n\n1. **Micro Controller**:\n\n* An `Arduino`_ or compatible executing the Sketch using this library.\n\n* Prices vary from USD 7 for clones, to USD 75 for \"starter kits\" (which\n  might be a good choice if this is your first exposure to Arduino;\n  check if such kit already includes the Arduino, Reader, and some Tags).\n\n2. **Proximity Coupling Device (PCD)**:\n\n* The PCD is the actual RFID **Reader** based on the `NXP MFRC522`_ Contactless\n  Reader Integrated Circuit.\n\n* Readers can be found on `eBay`_ for around USD 5: search for *\"rc522\"*.\n\n* You can also find them on several web stores. They are often included in\n  *\"starter kits\"*, so check your favourite electronics provider as well.\n\n3. **Proximity Integrated Circuit Card (PICC)**:\n\n* The PICC is the RFID **Card** or **Tag** using the `ISO/IEC 14443A`_\n  interface, for example Mifare or NTAG203.\n\n* One or two might be included with the Reader or *\"starter kit\"* already.\n\n\n.. _protocol:\nProtocols\n---------\n\n1. The micro controller and the reader use SPI for communication.\n\n* The protocol is described in the `NXP MFRC522`_ datasheet.\n\n* See the `Pin Layout`_ section for details on connecting the pins.\n\n2. The reader and the tags communicate using a 13.56 MHz electromagnetic field.\n\n* The protocol is defined in ISO/IEC 14443-3:2011 Part 3 Type A.\n\n  * Details are found in chapter 6 *\"Type A – Initialization and anticollision\"*.\n  \n  * See http://wg8.de/wg8n1496_17n3613_Ballot_FCD14443-3.pdf for a free version\n    of the final draft (which might be outdated in some areas).\n    \n  * The reader does not support ISO/IEC 14443-3 Type B.\n\n\n.. _security:\nSecurity\n--------\n* The **UID** of a card **can not be used** as an unique identification for security related projects. Some Chinese cards allow to change the UID which means you can easily clone a card. For projects like *access control*, *door opener* or *payment systems* you **must implement** an **additional security mechanism** like a password or normal key.\n\n* This library only supports crypto1-encrypted communication. Crypto1 has been known as `broken`_ for a few years, so it does NOT offer ANY security, it is virtually unencrypted communication. **Do not use it for any security related applications!**\n\n* This library does not offer 3DES or AES authentication used by cards like the Mifare DESFire, it may be possible to be implemented because the datasheet says there is support. We hope for pull requests :).\n\n\n.. _troubleshooting:\nTroubleshooting\n---------------\n\n* **I don't get input from reader** or **WARNING: Communication failure, is the MFRC522 properly connected?**\n\n  #. Check your physical connection, see `Pin Layout`_ .\n  #. Check your pin settings/variables in the code, see `Pin Layout`_ .\n  #. Check your pin header soldering. Maybe you have cold solder joints.\n  #. Check your power supply. Maybe add a capacitor between 3.3V and GND to stabilize the power #560, sometimes an additional delay after `PCD_Init()` can help.\n  #. Check voltage. Most breakouts work with 3.3V.\n  #. SPI only works with 3.3V, most breakouts seem 5V tolerant, but try a level shifter.\n  #. SPI does not like long connections. Try shorter connections.\n  #. SPI does not like prototyping boards. Try soldered connections.\n  #. According to reports #101, #126 and #131, there may be a problem with the soldering on the MFRC522 breakout. You could fix this on your own.\n\n\n* **Firmware Version: 0x12 = (unknown) or other random values**\n\n  #. The exact reason of this behaviour is unknown.\n  #. Some boards need more time after `PCD_Init()` to be ready. As workaround add a `delay(4)` directly after `PCD_Init()` to give the PCD more time.\n  #. If this sometimes appears, a bad connection or power source is the reason.\n  #. If the firmware version is reported permanent, it is very likely that the hardware is a fake or has a defect. Contact your supplier.\n\n\n* **Sometimes I get timeouts** or **sometimes tag/card does not work.**\n\n  #. Try the other side of the antenna.\n  #. Try to decrease the distance between the MFRC522 and your tag.\n  #. Increase the antenna gain per firmware: ``mfrc522.PCD_SetAntennaGain(mfrc522.RxGain_max);``\n  #. Use better power supply.\n  #. Hardware may be corrupted, most products are from china and sometimes the quality is really poor. Contact your seller.\n\n\n* **My tag/card doesn't work.**\n  \n  #. Distance between antenna and token too large (>1cm).\n  #. You got the wrong type PICC. Is it really 13.56 MHz? Is it really a Mifare Type A?\n  #. NFC tokens are not supported. Some may work.\n  #. Animal RFID tags are not supported. They use a different frequency (125 kHz).\n  #. Hardware may be corrupted, most products are from china and sometimes the quality is really poor. Contact your seller.\n  #. Newer versions of Mifare cards like DESFire/Ultralight maybe not work according to missing authentication, see `security`_ or different `protocol`_.\n  #. Some boards bought from Chinese manufactures do not use the best components and this can affect the detection of different types of tag/card. In some of these boards, the L1 and L2 inductors do not have a high enough current so the signal generated is not enough to get Ultralight C and NTAG203 tags to work, replacing those with same inductance (2.2uH) but higher operating current inductors should make things work smoothly. Also, in some of those boards the  harmonic and matching circuit needs to be tuned, for this replace C4 and C5 with 33pf capacitors and you are all set. (Source: `Mikro Elektronika`_) \n\n\n* **My mobile phone doesn't recognize the MFRC522** or **my MFRC522 can't read data from other MFRC522**\n\n  #. Card simulation is not supported.\n  #. Communication with mobile phones is not supported.\n  #. Peer to peer communication is not supported.\n\n\n* **I can only read the card UID.**\n\n  #. Maybe the `AccessBits` have been accidentally set and now an unknown password is set. This can not be reverted.\n  #. Probably the card is encrypted. Especially official cards like public transport, university or library cards. There is *no* way to get access with this library.\n\n\n* **Where do I get more information?**\n\n  #. For general support from the community, see `Arduino Forum <https://forum.arduino.cc/>`_ or `StackOverflow <https://stackoverflow.com/questions/tagged/mifare>`_ .\n  #. Visit the `community mfrc522 wiki <https://github.com/miguelbalboa/rfid/wiki>`_ .\n  #. Read the datasheets!\n  #. Your preferred search engine.\n\n\n* **I need more features.**\n\n  #. If software: code it and make a pull request.\n  #. If hardware: buy a more expensive chip like the PN532 (supports NFC and many more, but costs about $15)\n\n\n.. _license:\nLicense\n-------\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to https://unlicense.org/\n\n\n.. _dependency:\nDependency\n----------\n\n* **Arduino.h**\n\n  * From: Arduino IDE / target specific\n  * License: (target: Arduino) GNU Lesser General Public License 2.1\n  \n* **SPI.h**\n\n  * From: Arduino IDE / target specific\n  * License: (target: Arduino) GNU Lesser General Public License 2.1\n  \n* **stdint.h**\n\n  * From: Arduino IDE / Compiler and target specific\n  * License: different\n\n\nHistory\n-------\n\nThe MFRC522 library was first created in Jan 2012 by Miguel Balboa (from\nhttp://circuitito.com) based on code by Dr. Leong (from http://B2CQSHOP.com)\nfor *\"Arduino RFID module Kit 13.56 Mhz with Tags SPI W and R By COOQRobot\"*.\n\nIt was translated into English and rewritten/refactored in the fall of 2013\nby Søren Thing Andersen (from http://access.thing.dk).\n\nIt has been extended with functionality to alter sector 0 on Chinese UID changeable MIFARE card in Oct 2014 by Tom Clement (from http://tomclement.nl).\n\nMaintained by miguelbalboa until 2016.\nMaintained by Rotzbua from 2016 until 2022.\n\n\n.. _arduino: https://arduino.cc/\n.. _ebay: https://www.ebay.com/\n.. _iso/iec 14443a: https://en.wikipedia.org/wiki/ISO/IEC_14443\n.. _iso/iec 14443-3\\:2011 part 3: \n.. _nxp mfrc522: https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf\n.. _broken: https://eprint.iacr.org/2008/166\n.. _supported by hardware: https://web.archive.org/web/20151210045625/http://www.nxp.com/documents/leaflet/939775017564.pdf\n.. _Arduino forum: https://forum.arduino.cc\n.. _stdint.h: https://en.wikibooks.org/wiki/C_Programming/C_Reference/stdint.h\n.. _Mikro Elektronika: https://forum.mikroe.com/viewtopic.php?f=147&t=64203\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.18359375,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org/>\n"
        },
        {
          "name": "changes.txt",
          "type": "blob",
          "size": 6.9736328125,
          "content": "-- Add changes to unreleased tag until we make a release.\n\nxxxxx , v1.4.12\n\n30 Dec 2023, v1.4.11\n- fix: documentation\n\n1 Nov 2021 , v1.4.10\n- fix: timeout on Non-AVR boards; feat: Use yield() in busy wait loops @greezybacon \n- fix PCD problem after selftest\n\n31 Jul 2021, v1.4.9\n- Removed example AccessControl\n- Updated docs\n\n30 Dec 2020, v1.4.8\n- Fixed wrong SPI clock speed.\n\n25 Jun 2020, v1.4.7\n- Fixed typos\n- Moved PICC memory layout to /doc\n\n21 Jan 2020, v1.4.6\n- Library in freeze mode, no new features, no new examples, just bugfixes to keep compatibility for old projects\n- Updated documentation\n- Removed deprecation warnings due code freeze\n\n12 Jun 2019, v1.4.5\n- Library in freeze mode, no new features, no new examples, just bugfixes to keep compatibility for old projects\n- Updated README\n\n31 Mar 2019, v1.4.4\n- Fixed example\n- Fixed UnbrickUidSector\n- Updated comments\n- Removed teensy from CI and PlatformIO config\n\n27 Oct 2018, v1.4.3\n- Added counterfeit detection and hint about bad boards\n- Improved hardware based reset\n\n04 Oct 2018, v1.4.2\n- Fixed keywords\n- Changed development status of library\n\n04 Oct 2018, v1.4.1\n- Replaced UINT8_MAX by UNUSED_PIN\n- Replaced default value NULL for pointer with correct nullptr\n- Added pin layout for wemos d1 mini @mmone\n- Added alternative fritzing layout for mfrc522 reader @jose1711\n- Added soft power control functions @Bill2462\n- Fixed typo in example ReadAndWrite.ino @Drachenfrucht1\n- Fixed grammar @KiddieD\n- Fixed infinite loop in example AccessControl.ino @mads256c \n- Fixed 0-index key ID equals to 0 fails in AccessControl.ino @thoaitrieu\n- Changed type boolean to bool for a more common use @Rotzbua \n- Fixed wrong var names in PICC_Select MFRC522.cpp @tuyethoa08041997\n- Fixed hang PCD_Init() on non-arduino boards @heziegl\n- Fixed possible infinite loop PCD_Reset() @psgreco\n- And many thanks to all other contributors\n\n13 Apr 2018, v1.4.0\n- Replaced UINT8_MAX by UNUSED_PIN @Rotzbua\n- Fixed hang PCD_Init() on non-arduino boards @heziegl\n- deprecate MIFARE_SetAccessBits @Rotzbua\n- IMPORTANT: v1.4.X will be last version under license \"unlicense\"\n\n22 Mar 2017, v1.3.6\n- Added deprecate and compiler warnings @Rotzbua\n\n8 Apr 2017, v1.3.5\n- Updated \"AccessControl.ino\", bugs fixed and alternate wipe button polling method without using other library @beyondszine reviewed by @omersiar \n- Updated README notice about port for esp8266 @mmmmar\n\n7 Apr 2017, v1.3.4\n- Added new example \"rfid_read_personal_data.ino\" @ryand1011\n- Updated example \"rfid_write_personal_data.ino\" code style to Arduino IDE @Rotzbua\n- Removed (temp.) Teensy from travis build script because fails @Rotzbua\n\n26 Mar 2017, v1.3.3\n- Fixed bugs in MFRC522Extended, now should work with Desfire.h from JPG-Consulting @Rotzbua\n- Fixed UINT8_MAX error @Rotzbua\n\n15 Mar 2017, v1.3.2\n- Added ESP8266 to library.properties\n\n15 Mar 2017, v1.3.1\n- Fixed compiler warning in MFRC522Extended @Rotzbua\n- Removed unused function @Rotzbua\n\n13 Mar 2017, v1.3.0\n- Warning: Source has moved to folder src!\n- Added addtional class to support ISO/IEC 14443-4 PICCs @JPG-Consulting\n- Added RATS (Request for Answer To Select) @JPG-Consulting\n- More information see https://github.com/miguelbalboa/rfid/pull/271 @JPG-Consulting\n\n13 Mar 2017, v1.2.1\n- Removed need for reset pin #275 @tkoester\n- Added SPI speed option + Various minor changes #276 @tuyethoa08041997\n- Updated documentation, travis build script and small code change @Rotzbua\n\n3 Jan 2017, v1.2.0\n- Warning: This version introduce usage of stdint.h, usage of not well defined int types are abandoned.\n           Interface has changed: e.g. long -> int32_t\n           @Rotzbua\n- Removed problematic example examples/servo_motor/servo_motor.ino @omersiar\n- Added examples/AccessControl/AccessControl.ino @omersiar\n- Fixed minor issues reported in #211 @omersiar\n- Added bad components hint to README @danielcbit\n- Fixed selftest @surr\n- Fixed auth problem with long UIDs @surr\n\n26 Aug 2016, v1.1.9\n- Warning: Only Arduino IDE version 1.6 is supported, please update your IDE to 1.6 to use this Library.\n- Added ESP8266 platform support @Rotzbua\n- Changed README.rst content to show more info @Rotzbua\n- Minor Changes to examples/ReadUidMultiReader/ReadUidMultiReader.ino example @Rotzbua\n\n11 Feb 2016, v1.1.8\n- Added examples/MinimalInterrupt/MinimalInterrupt.ino example, Interrupt example @lmmeng\n- Added .gitignore file allows the project to be more easily used as a subproject. @BenWiederhake\n- Added Added Teensy 2.0 & Tensy++ 2.0 pinouts to README.rst @jkutianski\n\n16 Jan 2016, v1.1.7\n- README.rst Spelling and Grammar Tweak @cuthbertnibbles\n- Added examples/servo_motor/servo_motor.ino example, Arduino RFID Access Control with a Servo Motor @techied\n- Added examples/RFID-Cloner/RFID-Cloner.ino Copy from rfid cards with standard authentication @stefanblommaert\n- Fix compile error at examples/RFID-Cloner/RFID-Cloner.ino, using MFRC522:::PICC_Type, @Rotzbua\n\n06 Jan 2016, v1.1.6\n- Fixed compilation error for examples/ReadNUID/ReadNUID.ino example. @Rotzbua\n\n04 Jan 2016, v1.1.5\n- Use settings functions on SPI libraries, setSPIConfig was deleted, now the library use SPI.beginTransaction() and SPI.endTransaction() @sophiekovalevsky\n- Added examples/ReadNUID/ReadNUID.ino example, showing how to read new NUID from a PICC to serial. @sophiekovalevsky\n\n03 Jan 2016, v1.1.4\n- Added Authentication with Ntag 213,215,216 returns the pACK MFRC522::PCD_NTAG216_AUTH @Gargantuanman\n- Starting to use versions http://semver.org/\n- Continuous Integration @ivankravets \n- functions return MFRC522::StatusCode and MFRC522::PICC_Type instead of generic byte @rotzbua\n- removed int-values of MFRC522::StatusCode and MFRC522::PICC_Type @rotzbua\n\n05 Dec 2015\n- recognize infineon cards correctly @mayatforest\n- added multi reader support, see example @lmmeng\n\n10 Nov 2014\n- Updated the changelog.\n- Added makefile.\n\n24 Oct 2014\n- Added PlatformIO-based manifest file.\n\n17 Jul 2014\n- Written documentation for the library.\n- Added rfid_default_keys example.\n\n11 Jun 2014\n- Updated example: ReadAndWrite.\n\n14 Apr 2014\n- Updated examples: DumpInfo, MifareClassicValueBlock, and ReadAndWrite.\n\n12 Feb 2014\n- Fixed resetPowerDownPin initial state.\n\n29 Jan 2014\n- Fixed chipSelectPin initial state.\n\n30 Nov 2013\n- Examples put in their own folders.\n- Updated the keywords.txt file.\n\n12 Nov 2013\n- Updated examples: DumpInfo, MifareClassicValueBlock, and ReadAndWrite.\n\n20 Oct 2013\n- All constants, functions and parameters are now commented in English.\n- Code refactored, most function names have changed.\n- Support ISO-14443-3 anti collision and 4/7/10 byte UIDs (cascade levels).\n- Added functions for MIFARE Classic Decrement/Increment/Restore/Transfer\n  and MIFARE Ultralight Write.\n- New examples written.\n\n19 Oct 2013\n- Renamed library from RFID to MFRC522 (RFID seemed to generic).\n- Register names changed to comply with datasheet.\n- Global defines moved into class.\n\n24 Sep 2013\n- Turn off encryption when tag is halted.\n\n27 Jan 2013\n- Added README and small TODO list.\n- Added example to show Serial on LCD display.\n\n09 Sep 2012\n- Initial commit to GitHub.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "keywords.txt",
          "type": "blob",
          "size": 5.3408203125,
          "content": "#######################################\n# Syntax Coloring Map for library MFRC522\n#######################################\n\n#######################################\n# KEYWORD1 Classes, datatypes, and C++ keywords\n#######################################\nMFRC522\tKEYWORD1\nMFRC522Extended\tKEYWORD1\nPCD_Register\tKEYWORD1\nPCD_Command\tKEYWORD1\nPCD_RxGain\tKEYWORD1\nPICC_Command\tKEYWORD1\nMIFARE_Misc\tKEYWORD1\nPICC_Type\tKEYWORD1\nStatusCode\tKEYWORD1\nTagBitRates\tKEYWORD1\nUid\tKEYWORD1\nCardInfo\tKEYWORD1\nMIFARE_Key\tKEYWORD1\nPcbBlock\tKEYWORD1\n \n#######################################\n# KEYWORD2 Methods and functions\n#######################################\n\n# Basic interface functions for communicating with the MFRC522\nPCD_WriteRegister\tKEYWORD2\nPCD_WriteRegister\tKEYWORD2\nPCD_ReadRegister\tKEYWORD2\nPCD_ReadRegister\tKEYWORD2\nsetBitMask\tKEYWORD2\nPCD_SetRegisterBitMask\tKEYWORD2\nPCD_ClearRegisterBitMask\tKEYWORD2\nPCD_CalculateCRC\tKEYWORD2\n\n# Functions for manipulating the MFRC522\nPCD_Init\tKEYWORD2\nPCD_Reset\tKEYWORD2\nPCD_AntennaOn\tKEYWORD2\nPCD_AntennaOff\tKEYWORD2\nPCD_GetAntennaGain\tKEYWORD2\nPCD_SetAntennaGain\tKEYWORD2\nPCD_PerformSelfTest\tKEYWORD2\n\n# Power control functions MFRC522\nPCD_SoftPowerDown\tKEYWORD2\nPCD_SoftPowerUp\tKEYWORD2\n\n# Functions for communicating with PICCs\nPCD_TransceiveData\tKEYWORD2\nPCD_CommunicateWithPICC\tKEYWORD2\nPICC_RequestA\tKEYWORD2\nPICC_WakeupA\tKEYWORD2\nPICC_REQA_or_WUPA\tKEYWORD2\nPICC_Select\tKEYWORD2\nPICC_HaltA\tKEYWORD2\nPICC_RATS\tKEYWORD2\nPICC_PPS\tKEYWORD2\n\n# Functions for communicating with ISO/IEC 14433-4 cards\nTCL_Transceive\tKEYWORD2\nTCL_TransceiveRBlock\tKEYWORD2\nTCL_Deselect\tKEYWORD2\n\n# Functions for communicating with MIFARE PICCs\nPCD_Authenticate\tKEYWORD2\nPCD_StopCrypto1\tKEYWORD2\nMIFARE_Read\tKEYWORD2\nMIFARE_Write\tKEYWORD2\nMIFARE_Increment\tKEYWORD2\nMIFARE_Ultralight_Write\tKEYWORD2\nMIFARE_GetValue\tKEYWORD2\nMIFARE_SetValue\tKEYWORD2\nPCD_NTAG216_AUTH\tKEYWORD2\n\n# Support functions\nPCD_MIFARE_Transceive\tKEYWORD2\nGetStatusCodeName\tKEYWORD2\nPICC_GetType\tKEYWORD2\nPICC_GetTypeName\tKEYWORD2\n\n# Support functions for debuging\nPCD_DumpVersionToSerial\tKEYWORD2\nPICC_DumpToSerial\tKEYWORD2\nPICC_DumpDetailsToSerial\tKEYWORD2\nPICC_DumpMifareClassicToSerial\tKEYWORD2\nPICC_DumpMifareClassicSectorToSerial\tKEYWORD2\nPICC_DumpMifareUltralightToSerial\tKEYWORD2\nPICC_DumpISO14443_4\tKEYWORD2\n\n# Advanced functions for MIFARE\nMIFARE_SetAccessBits\tKEYWORD2\nMIFARE_OpenUidBackdoor\tKEYWORD2\nMIFARE_SetUid\tKEYWORD2\nMIFARE_UnbrickUidSector\tKEYWORD2\n\n# Convenience functions - does not add extra functionality\nPICC_IsNewCardPresent\tKEYWORD2\nPICC_ReadCardSerial\tKEYWORD2\n\n#######################################\n# KEYWORD3 setup and loop functions, as well as the Serial keywords\n#######################################\n\n#######################################\n# LITERAL1 Constants\n#######################################\nCommandReg\tLITERAL1\nComIEnReg\tLITERAL1\nDivIEnReg\tLITERAL1\nComIrqReg\tLITERAL1\nDivIrqReg\tLITERAL1\nErrorReg\tLITERAL1\nStatus1Reg\tLITERAL1\nStatus2Reg\tLITERAL1\nFIFODataReg\tLITERAL1\nFIFOLevelReg\tLITERAL1\nWaterLevelReg\tLITERAL1\nControlReg\tLITERAL1\nBitFramingReg\tLITERAL1\nCollReg\tLITERAL1\nModeReg\tLITERAL1\nTxModeReg\tLITERAL1\nRxModeReg\tLITERAL1\nTxControlReg\tLITERAL1\nTxASKReg\tLITERAL1\nTxSelReg\tLITERAL1\nRxSelReg\tLITERAL1\nRxThresholdReg\tLITERAL1\nDemodReg\tLITERAL1\nMfTxReg\tLITERAL1\nMfRxReg\tLITERAL1\nSerialSpeedReg\tLITERAL1\nCRCResultRegH\tLITERAL1\nCRCResultRegL\tLITERAL1\nModWidthReg\tLITERAL1\nRFCfgReg\tLITERAL1\nGsNReg\tLITERAL1\nCWGsPReg\tLITERAL1\nModGsPReg\tLITERAL1\nTModeReg\tLITERAL1\nTPrescalerReg\tLITERAL1\nTReloadRegH\tLITERAL1\nTReloadRegL\tLITERAL1\nTCounterValueRegH\tLITERAL1\nTCounterValueRegL\tLITERAL1\nTestSel1Reg\tLITERAL1\nTestSel2Reg\tLITERAL1\nTestPinEnReg\tLITERAL1\nTestPinValueReg\tLITERAL1\nTestBusReg\tLITERAL1\nAutoTestReg\tLITERAL1\nVersionReg\tLITERAL1\nAnalogTestReg\tLITERAL1\nTestDAC1Reg\tLITERAL1\nTestDAC2Reg\tLITERAL1\nTestADCReg\tLITERAL1\nPCD_Idle\tLITERAL1\nPCD_Mem\tLITERAL1\nPCD_GenerateRandomID\tLITERAL1\nPCD_CalcCRC\tLITERAL1\nPCD_Transmit\tLITERAL1\nPCD_NoCmdChange\tLITERAL1\nPCD_Receive\tLITERAL1\nPCD_Transceive\tLITERAL1\nPCD_MFAuthent\tLITERAL1\nPCD_SoftReset\tLITERAL1\nRxGain_18dB\tLITERAL1\nRxGain_23dB\tLITERAL1\nRxGain_18dB_2\tLITERAL1\nRxGain_23dB_2\tLITERAL1\nRxGain_33dB\tLITERAL1\nRxGain_38dB\tLITERAL1\nRxGain_43dB\tLITERAL1\nRxGain_48dB\tLITERAL1\nRxGain_min\tLITERAL1\nRxGain_avg\tLITERAL1\nRxGain_max\tLITERAL1\nPICC_CMD_REQA\tLITERAL1\nPICC_CMD_WUPA\tLITERAL1\nPICC_CMD_CT\tLITERAL1\nPICC_CMD_SEL_CL1\tLITERAL1\nPICC_CMD_SEL_CL2\tLITERAL1\nPICC_CMD_SEL_CL3\tLITERAL1\nPICC_CMD_HLTA\tLITERAL1\nPICC_CMD_RATS\tLITERAL1\nPICC_CMD_MF_AUTH_KEY_A\tLITERAL1\nPICC_CMD_MF_AUTH_KEY_B\tLITERAL1\nPICC_CMD_MF_READ\tLITERAL1\nPICC_CMD_MF_WRITE\tLITERAL1\nPICC_CMD_MF_DECREMENT\tLITERAL1\nPICC_CMD_MF_INCREMENT\tLITERAL1\nPICC_CMD_MF_RESTORE\tLITERAL1\nPICC_CMD_MF_TRANSFER\tLITERAL1\nPICC_CMD_UL_WRITE\tLITERAL1\nMF_ACK\tLITERAL1\nMF_KEY_SIZE\tLITERAL1\nPICC_TYPE_UNKNOWN\tLITERAL1\nPICC_TYPE_ISO_14443_4\tLITERAL1\nPICC_TYPE_ISO_18092\tLITERAL1\nPICC_TYPE_MIFARE_MINI\tLITERAL1\nPICC_TYPE_MIFARE_1K\tLITERAL1\nPICC_TYPE_MIFARE_4K\tLITERAL1\nPICC_TYPE_MIFARE_UL\tLITERAL1\nPICC_TYPE_MIFARE_PLUS\tLITERAL1\nPICC_TYPE_MIFARE_DESFIRE\tLITERAL1\nPICC_TYPE_TNP3XXX\tLITERAL1\nPICC_TYPE_NOT_COMPLETE\tLITERAL1\nSTATUS_OK\tLITERAL1\nSTATUS_ERROR\tLITERAL1\nSTATUS_COLLISION\tLITERAL1\nSTATUS_TIMEOUT\tLITERAL1\nSTATUS_NO_ROOM\tLITERAL1\nSTATUS_INTERNAL_ERROR\tLITERAL1\nSTATUS_INVALID\tLITERAL1\nSTATUS_CRC_WRONG\tLITERAL1\nSTATUS_MIFARE_NACK\tLITERAL1\nFIFO_SIZE\tLITERAL1\nBITRATE_106KBITS\tLITERAL1\nBITRATE_212KBITS\tLITERAL1\nBITRATE_424KBITS\tLITERAL1\nBITRATE_848KBITS\tLITERAL1\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.458984375,
          "content": "{\n  \"name\": \"MFRC522\",\n  \"version\": \"1.4.11\",\n  \"license\": \"Unlicense\",\n  \"keywords\": \"rfid, spi\",\n  \"description\": \"Arduino RFID Library for MFRC522 (SPI). Read/Write a RFID Card or Tag using the ISO/IEC 14443A/MIFARE interface.\",\n  \"repository\":\n  {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/miguelbalboa/rfid.git\"\n  },\n  \"exclude\": \"doc\",\n  \"frameworks\": \"arduino\",\n  \"platforms\": [\"atmelavr\", \"atmelsam\", \"ststm32\", \"espressif8266\", \"espressif32\", \"samd\"]\n}\n"
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.333984375,
          "content": "name=MFRC522\nversion=1.4.11\nauthor=GithubCommunity\nmaintainer=GithubCommunity\nsentence=Arduino RFID Library for MFRC522 (SPI)\nparagraph=Read/Write a RFID Card or Tag using the ISO/IEC 14443A/MIFARE interface.\ncategory=Communication\nurl=https://github.com/miguelbalboa/rfid\narchitectures=avr,megaavr,STM32F1,teensy,esp8266,esp32,samd,atmelsam\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}