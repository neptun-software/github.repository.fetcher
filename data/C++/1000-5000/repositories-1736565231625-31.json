{
  "metadata": {
    "timestamp": 1736565231625,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NatronGitHub/Natron",
      "stars": 4776,
      "defaultBranch": "RB-2.6",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2197265625,
          "content": "BasedOnStyle: WebKit\nAlignAfterOpenBracket: Align\nAlwaysBreakAfterDefinitionReturnType: TopLevel\nWhitespaceSensitiveMacros: ['CLANG_DIAG_ON', 'CLANG_DIAG_OFF', 'GCC_DIAG_ON', 'GCC_DIAG_OFF', 'MSVC_DIAG_ON', 'MSVC_DIAG_OFF']\n\n"
        },
        {
          "name": ".git-hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.7041015625,
          "content": ".git* text export-ignore\n\n# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.py text whitespace=tab-in-indent,trail,space\n*.cpp text whitespace=tab-in-indent,trail,space\n*.hpp text whitespace=tab-in-indent,trail,space\n*.cxx text whitespace=tab-in-indent,trail,space\n*.hxx text whitespace=tab-in-indent,trail,space\n*.mm text whitespace=tab-in-indent,trail,space\n*.c text whitespace=tab-in-indent,trail,space\n*.h text whitespace=tab-in-indent,trail,space\n*.H text whitespace=tab-in-indent,trail,space\n*.cu text whitespace=tab-in-indent,trail,space\n*.java text whitespace=tab-in-indent,trail,space\n*.md text\n*.pro text whitespace=tab-in-indent,trail,space\n*.cmake text whitespace=tab-in-indent,trail,space\n*.cmakein text whitespace=tab-in-indent,trail,space\n*.in text whitespace=tab-in-indent,trail,space\nCMakeLists.txt text whitespace=tab-in-indent,trail,space\n\n*.sh            eol=lf\nPKGBUILD eol=lf\n\n# Declare files that will always have CRLF line endings on checkout.\n# VS 20xx files\n*.sln text eol=crlf\n*.vcproj text eol=crlf merge=union\n*.vcxproj text eol=crlf merge=union\n*.vcxproj.filters text eol=crlf\n# VC6 files\n*.dsw text eol=crlf\n*.dsp text eol=crlf\n*.dsptemplate text eol=crlf\n# Other 'windows-specific' files\n*.bat text eol=crlf\n*.bat.in text eol=crlf\n*.cmd text eof=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.jpeg binary\n*.exr binary\n*.ico binary\n\n*.a binary\n*.so binary\n*.dll binary\n\n*.pdf binary\n*.pbxproj text eol=lf\n*.vec binary\n*.doc binary\n\n*.S text\n\n*.xml -text\n*.yml -text\n*.patch -text\n*.diff -text\n*.pc -text"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.232421875,
          "content": "# List of git-untracked files\n# ---------------------------\n\n# General build artifacts\n\n*.h.cpp\n*.com\n*.DS_Store\n*_moc.cpp\n*_resource.rc\nmoc*.cpp\n*moc\n\n# Build directories\n\nbuild\nbuild32\nbuild64\n*build_*\nsed*\n*latex*\nDerivedData\n*.sln\n*.xcworkspace\n*xcuserdata\n*.perspectivev3\n*.pbxuser\n*Debug\n*Release\n*release\n*debug\nCache\nTestImages\nTestWrite\n.pro.user\nconfig.pri\n*.vcxproj\nInfo.plist\n*Win32\nqrc_*.cpp\n*GeneratedFiles\n\n# Emacs/Vim\n\n*.temp\n*.swp\n\n# Ignore Visual Studio temporary files, build results, and\n# files generated by popular Visual Studio add-ons.\n\n# User-specific files\n\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n*autobuild*\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vsp\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n*.o\n*.a\n*.lib\n\nMakefile\n*.app\n\n*.pro.user.*\n\n# gcov test coverage files\n*.gcda\n*.gcno\n*.gcov\nTests/Tests\nofxTestLog.txt\ntest_dot_generator0.jpg\nTests/Plugins\npch\n*.filters\n\n# Python\n*.pyc\n\nRenderer/NatronRenderer\n\n*commits-hash.sh*\n\nCrashReporterCLI/NatronRendererCrashReporter\n*repo.sh*\n*local.sh*\nOpenColorIO-Configs\nPortIndex\nPortIndex.quick\n*.7z*\n*.exe*\nallfileshas.txt\nbigobjects.txt\nbigtosmall.txt\n\n\n#Documentation/source/_group*\n#Documentation/source/_prefs.rst\n#Documentation/source/plugins\n.qmake.stash\nApp/Natron\nBreakpadClient.xcodeproj/\nDocumentation/html\nDocumentation/pdf\nEngine.xcodeproj/\nGui.xcodeproj/\nHostSupport.xcodeproj/\nNatron-bin.xcodeproj/\nNatron.xcodeproj/\nNatronCrashReporter.xcodeproj/\nNatronRenderer-bin.xcodeproj/\nNatronRenderer.xcodeproj/\nNatronRendererCrashReporter.xcodeproj/\nProject-xcode-breakpad.xcodeproj/\nProject.xcodeproj/\nPythonBin/natron-python\nRenderer/NatronRenderer\nSerialization.xcodeproj/\nTODO.txt\nTestImages\nTestWrite\nTests.xcodeproj/\nTests/Plugins\nTests/Tests\nbreakpadclient.pri\nbreakpadpro.pri\nconfig.pri\ngoogle-breakpad/\nlibs/ceres/ceres.xcodeproj/\nlibs/gflags/gflags.xcodeproj/\nlibs/glog/glog.xcodeproj/\nlibs/hoedown/hoedown.xcodeproj/\nlibs/libmv/LibMV.xcodeproj/\nlibs/libtess/libtess.xcodeproj/\nlibs/libtess/tess.xcodeproj/\nlibs/openMVG/openMVG.xcodeproj/\nlibs/qhttpserver/qhttpserver.xcodeproj/\nlibs/qhttpserver/src/qhttpserver.xcodeproj/\nlibs/yaml-cpp/yaml-cpp-natron.xcodeproj/\nnatron-python.xcodeproj/\nnatron-python.xcodeproj/\nnatron-python.xcodeproj/\nofxTestLog.txt\ntest_dot_generator0.jpg\ntools/normalize/normalize\ntools/normalize/normalize.xcodeproj/\ntools/utils/generateGLIncludes\ntools/utils/generateGLIncludes.pro.user\ntools/utils/generateGLIncludes.xcodeproj/\nGui/Resources/etc/fonts/fonts.conf\n\n# VS Code\n.vscode/\n\n\nxcshareddata/\n\n# QTCreator\n*QtCreator.*\nmoc_predefs.h\n\n# shiboken-generated files\nEngine/Qt5\nGui/Qt5"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.546875,
          "content": "[submodule \"libs/OpenFX\"]\n\tpath = libs/OpenFX\n\turl = https://github.com/NatronGitHub/openfx.git\n[submodule \"Tests/google-test\"]\n\tpath = Tests/google-test\n\turl = https://github.com/NatronGitHub/google-test.git\n[submodule \"Tests/google-mock\"]\n\tpath = Tests/google-mock\n\turl = https://github.com/NatronGitHub/google-mock\n[submodule \"libs/SequenceParsing\"]\n\tpath = libs/SequenceParsing\n\turl = https://github.com/NatronGitHub/SequenceParsing\n[submodule \"libs/google-breakpad\"]\n\tpath = libs/google-breakpad\n\turl = https://github.com/NatronGitHub/google-breakpad.git\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.7431640625,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n   configuration: Documentation/source/conf.py\n\n# If using Sphinx, optionally build your docs in additional formats such as PDF\nformats:\n   - htmlzip\n   - pdf\n   - epub\n\n# Optionally declare the Python requirements required to build your docs\npython:\n   install:\n   - requirements: Documentation/source/requirements.txt\n"
        },
        {
          "name": ".travis-coverity-scan-build.sh",
          "type": "blob",
          "size": 4.8271484375,
          "content": "#!/bin/sh\n# Modified coverity scan build script\n# Original script available at https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh\n# Additions (see corresponding sections below):\n# - Verify Coverity Scan run condition\n# - Verify Coverity Scan script test mode\n# - set TOOL_BASE to a writable directory with more than 1Gb free space\n\nset -e\n\n# Environment check\necho -e \"\\033[33;1mNote: COVERITY_SCAN_PROJECT_NAME and COVERITY_SCAN_TOKEN are available on Project Settings page on scan.coverity.com\\033[0m\"\n[ -z \"$COVERITY_SCAN_PROJECT_NAME\" ] && echo \"ERROR: COVERITY_SCAN_PROJECT_NAME must be set\" && exit 1\n[ -z \"$COVERITY_SCAN_NOTIFICATION_EMAIL\" ] && echo \"ERROR: COVERITY_SCAN_NOTIFICATION_EMAIL must be set\" && exit 1\n[ -z \"$COVERITY_SCAN_BRANCH_PATTERN\" ] && echo \"ERROR: COVERITY_SCAN_BRANCH_PATTERN must be set\" && exit 1\n[ -z \"$COVERITY_SCAN_BUILD_COMMAND\" ] && echo \"ERROR: COVERITY_SCAN_BUILD_COMMAND must be set\" && exit 1\n[ -z \"$COVERITY_SCAN_TOKEN\" ] && echo \"ERROR: COVERITY_SCAN_TOKEN must be set\" && exit 1\n\nPLATFORM=`uname`\nTOOL_ARCHIVE=/tmp/cov-analysis-${PLATFORM}.tgz\nTOOL_URL=https://scan.coverity.com/download/${PLATFORM}\n#TOOL_BASE=/tmp/coverity-scan-analysis\nTOOL_BASE=/home/travis/coverity-scan-analysis\nUPLOAD_URL=\"https://scan.coverity.com/builds\"\nSCAN_URL=\"https://scan.coverity.com\"\n\n# Verify Coverity Scan run condition\nCOVERITY_SCAN_RUN_CONDITION=${coverity_scan_run_condition:-true}\necho -ne \"\\033[33;1mTesting '${COVERITY_SCAN_RUN_CONDITION}' condition... \"\nif eval [ $COVERITY_SCAN_RUN_CONDITION ]; then\n  echo -e \"True.\\033[0m\"\nelse\n  echo -e \"False. Exit.\\033[0m\"\n  exit 1\nfi\n\n# Do not run on pull requests\nif [ \"${TRAVIS_PULL_REQUEST}\" = \"true\" ]; then\n  echo -e \"\\033[33;1mINFO: Skipping Coverity Analysis: branch is a pull request.\\033[0m\"\n  exit 0\nfi\n\n# Verify this branch should run\nIS_COVERITY_SCAN_BRANCH=`ruby -e \"puts '${TRAVIS_BRANCH}' =~ /\\\\A$COVERITY_SCAN_BRANCH_PATTERN\\\\z/ ? 1 : 0\"`\nif [ \"$IS_COVERITY_SCAN_BRANCH\" = \"1\" ]; then\n  echo -e \"\\033[33;1mCoverity Scan configured to run on branch ${TRAVIS_BRANCH}\\033[0m\"\nelse\n  echo -e \"\\033[33;1mCoverity Scan NOT configured to run on branch ${TRAVIS_BRANCH}\\033[0m\"\n  exit 1\nfi\n\n# Verify upload is permitted\nAUTH_RES=`curl -s --form project=\"$COVERITY_SCAN_PROJECT_NAME\" --form token=\"$COVERITY_SCAN_TOKEN\" $SCAN_URL/api/upload_permitted`\nif [ \"$AUTH_RES\" = \"Access denied\" ]; then\n  echo -e \"\\033[33;1mCoverity Scan API access denied. Check COVERITY_SCAN_PROJECT_NAME and COVERITY_SCAN_TOKEN.\\033[0m\"\n  exit 1\nelse\n  AUTH=`echo $AUTH_RES | ruby -e \"require 'rubygems'; require 'json'; puts JSON[STDIN.read]['upload_permitted']\"`\n  if [ \"$AUTH\" = \"true\" ]; then\n    echo -e \"\\033[33;1mCoverity Scan analysis authorized per quota.\\033[0m\"\n  else\n    WHEN=`echo $AUTH_RES | ruby -e \"require 'rubygems'; require 'json'; puts JSON[STDIN.read]['next_upload_permitted_at']\"`\n    echo -e \"\\033[33;1mCoverity Scan analysis NOT authorized until $WHEN.\\033[0m\"\n    exit 0\n  fi\nfi\n\nif [ ! -d $TOOL_BASE ]; then\n  # Download Coverity Scan Analysis Tool\n  if [ ! -e $TOOL_ARCHIVE ]; then\n    echo -e \"\\033[33;1mDownloading Coverity Scan Analysis Tool...\\033[0m\"\n    wget -nv -O $TOOL_ARCHIVE $TOOL_URL --post-data \"project=$COVERITY_SCAN_PROJECT_NAME&token=$COVERITY_SCAN_TOKEN\"\n  fi\n\n  # Extract Coverity Scan Analysis Tool\n  echo -e \"\\033[33;1mExtracting Coverity Scan Analysis Tool...\\033[0m\"\n  mkdir -p $TOOL_BASE\n  pushd $TOOL_BASE\n  tar xzf $TOOL_ARCHIVE\n  popd\nfi\n\nTOOL_DIR=`find $TOOL_BASE -type d -name 'cov-analysis*'`\nexport PATH=$TOOL_DIR/bin:$PATH\n\n# Build\necho -e \"\\033[33;1mRunning Coverity Scan Analysis Tool...\\033[0m\"\nCOV_BUILD_OPTIONS=\"\"\n#COV_BUILD_OPTIONS=\"--return-emit-failures 8 --parse-error-threshold 85\"\nRESULTS_DIR=\"cov-int\"\neval \"${COVERITY_SCAN_BUILD_COMMAND_PREPEND}\"\nCOVERITY_UNSUPPORTED=1 cov-build --dir $RESULTS_DIR $COV_BUILD_OPTIONS $COVERITY_SCAN_BUILD_COMMAND\ncov-import-scm --dir $RESULTS_DIR --scm git --log $RESULTS_DIR/scm_log.txt 2>&1\n\n# Upload results\necho -e \"\\033[33;1mTarring Coverity Scan Analysis results...\\033[0m\"\nRESULTS_ARCHIVE=analysis-results.tgz\ntar czf $RESULTS_ARCHIVE $RESULTS_DIR\nSHA=`git rev-parse --short HEAD`\n\n# Verify Coverity Scan script test mode\nif [ \"$coverity_scan_script_test_mode\" = true ]; then\n  echo -e \"\\033[33;1mCoverity Scan configured in script test mode. Exit.\\033[0m\"\n  exit 1\nfi\n\necho -e \"\\033[33;1mUploading Coverity Scan Analysis results...\\033[0m\"\nresponse=$(curl \\\n  --silent --write-out \"\\n%{http_code}\\n\" \\\n  --form project=$COVERITY_SCAN_PROJECT_NAME \\\n  --form token=$COVERITY_SCAN_TOKEN \\\n  --form email=$COVERITY_SCAN_NOTIFICATION_EMAIL \\\n  --form file=@$RESULTS_ARCHIVE \\\n  --form version=$SHA \\\n  --form description=\"Travis CI build\" \\\n  $UPLOAD_URL)\nstatus_code=$(echo \"$response\" | sed -n '$p')\nif [ \"$status_code\" != \"201\" ]; then\n  TEXT=$(echo \"$response\" | sed '$d')\n  echo -e \"\\033[33;1mCoverity Scan upload failed: $TEXT.\\033[0m\"\n  exit 1\nfi\n"
        },
        {
          "name": ".travis.yml.disabled",
          "type": "blob",
          "size": 7.4140625,
          "content": "# This is the http://travis-ci.org configuration file for Natron\nenv:\n  global:\n   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created\n   #   via the \"travis encrypt\" command using the project repo's public key\n   - secure: \"Kagza287CBDBxPlNU2HC86OWMj22SfUfNb98BzwkI/LabG4HSAe1JnzTM62GZwPJxZBRX691Adtoe43Nw/sSCdP08jHgROHXQ/FQkGw4AbgSzE08B6gSpwXJhjLuOwiuBfLXYPKnXSjD3MA6VNiVNT/KhM06Vro0J6aLyhT5d5czOUnVWKzXzW4bjI2evq27xNxukgFj75Ykwp8bnKV57cZneZVyEGxUWe9hAcIJjynS9gVI0SPkun6VqW4y9Z5TDmU4ZZd/mvq2x0o9dS1qDN1Bf0kG7nNlvcWX9FMeFBo880whiyLPG1EPx8iNopZbL5HUujLP4/v24AYKPw+YoW6aaY2wDOzCZrFyEbsq2jbtnXL8Ik8Gle3WTJZ6f0NvRwwY9vVKbsBihb7vsUqgpfBqe2p8S19nt13b/9AO2eVw/By2i1Gh5yt5rGbOMM7MMFe3jzUhl48KHoGLQb7yFlB6AT2Y7rlX0l0BeZ4qN76LglV72RTW13h4+52rVcFvcVXT9MnVafYDNCO5N5AnHzOvCKNIq872eULJ7buCs3yrlv4I7fsJyVyzqGYQoZYZ6QY1eP0srS0UaIhLXBW7AQP7yaLKg6+bRYnGHzcvekJXKRzHru91n25e0Q/LstdA1vJs7ZQvY1w3VzIhr3SMJ4zRcF2RYA/7dHAgCthwy9Q=\"\n   # Coverity run condition (avoid matrix multiple runs), need customized\n   # build script. Need an update if new matrix cases.\n   - coverity_scan_run_condition='\"$CC\" = gcc -a \"$TRAVIS_OS_NAME\" != osx'\n   # Coverity script test mode (if true no uploading, avoid reaching the quota)\n   # usual processing: false.\n   - coverity_scan_script_test_mode=false\n\nlanguage: cpp\n\npython:\n  - \"2.7\"\n\naddons:\n  apt:\n    sources:\n    # Natron requires boost >= 1.49 to compile in C++11 mode\n    # see http://stackoverflow.com/questions/11302758/error-while-copy-constructing-boostshared-ptr-using-c11\n    # we could use the ppa:boost-latest/ppa for that purpose (boost 1.55), but this is for precise only\n    # (ppa:afrank/boost offers 1.57, but is not whitelisted)\n    #- boost-latest\n    # samuel-bachmann/boost has a backport of boost 1.60.0 for trusty (not whitelisted)\n    #- sourceline \"ppa:samuel-bachmann/boost\"\n    # kubuntu-ppa/backports contains OpenCV\n    - kubuntu-backports\n    # the PPA xorg-edgers contains cairo 1.12 (required for rotoscoping)\n    # NOT WHITELISTED https://github.com/travis-ci/apt-source-whitelist/issues/181\n    # (ppa:ricotz/testing contains cairo 1.14, but only for trusty)\n    - sourceline: 'ppa:xorg-edgers/ppa'\n    # ubuntu-toolchain-r/test contains recent versions of gcc\n    - ubuntu-toolchain-r-test\n    # get a recent ffmpeg (>=2.5) for precise from ppa:archivematica/externals(2.5.1) or ppa:pavlyshko/precise(2.6.1) or ppa:spvkgn/ffmpeg-dev(2.8.6)\n    # NOT WHITELISTED\n    #- sourceline: 'ppa:spvkgn/ffmpeg-dev'\n    # this one is for xenial ffmpeg\n    - sourceline: 'ppa:jonathonf/ffmpeg-4'\n    #- kalakris-cmake\n    #- pythonxy-devel\n    packages:\n    - ca-certificates\n    #- gcc-4.9\n    #- g++-4.9\n    #- gcc-5\n    #- g++-5\n    #- gcc-6\n    #- g++-6\n    #- gcc-7\n    #- g++-7\n    - gcc-8\n    - g++-8\n    - libqt4-dev\n    - libqt4-opengl-dev\n    - libglew-dev\n    #- libboost-dev\n    #- libboost-math-dev\n    #- libboost-serialization-dev\n    #- libboost-filesystem-dev\n    #- libboost-regex-dev\n    #- libboost-thread-dev\n    #- libboost-system-dev\n    - libexpat1-dev\n    - gdb\n    - libcairo2-dev\n    - python-dev\n    - python-pyside\n    - libpyside-dev\n    - libshiboken-dev\n    # packages for building openfx-io:\n    #- libavcodec-dev\n    #- libavformat-dev\n    #- libswscale-dev\n    #- libavutil-dev\n    #- libswresample-dev\n    - libtinyxml-dev\n    - liblcms2-dev\n    - libyaml-cpp-dev\n    #- libopenexr-dev\n    #- libilmbase-dev\n    - libopenjp2-7-dev\n    - libtiff-dev\n    - libjpeg-dev\n    - libpng-dev\n    - libwebp-dev\n    - libraw-dev\n    - libfreetype6-dev\n    - libssl-dev\n  coverity_scan:\n    # customized build script URL\n    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built\n    # TRAVIS_BRANCH: name of the branch currently being built\n    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh\n    # project metadata\n    project:\n      name: $TRAVIS_REPO_SLUG\n    # Where email notification of build analysis results will be sent\n    notification_email: frederic.devernay@m4x.org\n    # Commands to prepare for build_command\n    #build_command_prepend: ./configure\n    # This command will be added as an argument to \"cov-build\" to compile\n    # the project for analysis\n    build_command: \"tools/travis/build.sh\"\n    # Pattern to match selecting branches that will run analysis\n    branch_pattern: coverity_scan\n  homebrew:\n    packages:\n    - xctool\n    - python@2\n    - boost\n    - giflib\n    - jpeg\n    - libpng\n    - libtiff\n    - libxml2\n    - openssl\n    - pcre\n    - readline\n    - sqlite\n    - expat\n    - cairo\n    - gnu-sed\n    - glew\n    - openssl\n    - ilmbase\n    - openexr\n    - freetype\n    - fontconfig\n    - ffmpeg\n    - openjpeg\n    - libraw\n    - libheif\n    - openvdb\n    update: false\n\nmatrix:\n  include:\n    - os: linux\n      dist: bionic\n      sudo: required\n      compiler: gcc\n    - os: linux\n      dist: bionic\n      sudo: required\n      compiler: clang\n    - os: osx\n      # see https://docs.travis-ci.com/user/osx-ci-environment/\n      # we use macOS 10.14 (Mojave) or 10.13 (High Sierra) to get the precompiled\n      # pyside bottles from https://github.com/cartr/homebrew-qt4\n      # see https://docs.travis-ci.com/user/reference/osx/#macos-version\n      osx_image: xcode11.3 # 10.1 for High Sierra, 11.3 for Mojave\n      compiler: clang\n  exclude:\n    - os: osx\n      compiler: gcc\n  allow_failures:\n    - os: osx # if we exceed the time limit\n  fast_finish: true\n\n\n# Travis CI has 1.5 cores per VM, take advantage of it\nbefore_install:\n  - date -u\n  - uname -a\n  - if [ ${TRAVIS_OS_NAME} = \"linux\" ]; then\n      echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca- ;\n    fi\n  - export J='-j2'\n\ninstall:\n  - . tools/travis/coverity_env.sh\n  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]];\n    then\n        exit 0;\n    fi\n  - tools/travis/install_dependencies.sh\n  - if [ ! -d \"$HOME/OpenColorIO-Configs\" ]; then\n      pushd $HOME;\n      curl -k -L https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.4.tar.gz | tar -xvzf -;\n      mv OpenColorIO-Configs-Natron-v2.4 OpenColorIO-Configs;\n      popd;\n    else\n      echo 'Using cached OpenColorIO-Configs';\n    fi\n\n# OSX build will timeout if we redirect its output\n#> install_dependencies.log 2>&1\n\ncache:\n  pip: true\n  ccache: false\n  apt: true\n  directories:\n    - $HOME/openexr\n    - $HOME/ocio\n    - $HOME/oiio\n    - $HOME/seexpr\n#    - /usr/local/Cellar\n\nscript:\n  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];\n    then\n      echo \"Don't build on coverity_scan branch.\";\n      exit 0;\n    fi\n  - tools/travis/build.sh\n\nafter_success:\n  - if [ \"$CC\" = \"gcc\" -a \"$TRAVIS_OS_NAME\" == \"linux\"  ]; then ln -s Tests/google-mock Tests/google-test .; cd Tests; gcov -lp *.gcno > /dev/null; cd ..; coveralls -n --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\\.cpp' --exclude-pattern='.*/Tests/.*\\.cpp' --exclude-pattern='.*/Tests/.*\\.h'; fi\n#  - if [ \"$CC\" = \"gcc\" -a \"$TRAVIS_OS_NAME\" == \"linux\" ]; then ln -s Tests/google-mock Tests/google-test .; coveralls --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\\.cpp' --exclude-pattern='.*/Tests/.*\\.cpp' --exclude-pattern='.*/Tests/.*\\.h' --gcov-options '\\-lp'; fi\n\nafter_failure:\n  - cat install_dependencies.log || true\n\n"
        },
        {
          "name": "App",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUGS.md",
          "type": "blob",
          "size": 0.439453125,
          "content": "Known bugs and limitations\n=========================\n\nBugs\n----\n\nHere is a list of know bugs, ordered by priority from high to low:\n\n\nLimitations\n-----------\n\n\nMissing and wanted features\n---------------------------\n\nHere is a list of non-blocking bugs / wanted features:\n\n- implement Fields and Field Rendering:\n  <http://openfx.sourceforge.net/Documentation/1.3/ofxProgrammingReference.html#ImageEffectsFieldRendering>\n\n- support Half float images\n"
        },
        {
          "name": "BreakpadClient",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 78.615234375,
          "content": "# Known Bugs\n\n- https://github.com/NatronGitHub/Natron/issues/504\n\n# History\n\n\n## Version 2.5.0\n\n### Known issues\n\n- Rendering sometimes silently stalls after X frames. #248\n- Some image formats may have issues (PCX, PSB). #602\n- MTS video files are sometimes not read correctly. #186\n\n### Changes\n\n- Use Python 3 rather than Python 2 (which is not maintained anymore). This will require very few changes to the Python code (mainly print statements), and most code can be easily adapted to be [2-3 compatible](https://python-future.org/compatible_idioms.html). #686\n- Use [QtPy](https://github.com/spyder-ide/qtpy/tree/v1.11.2)==1.11.2 rather than PySide. QtPy is an abstraction layer for PyQt5/PyQt4/PySide2/PySide (newer versions support PyQt6/PySide6).  QtPy uses the Qt5 layout (where the QtGui module has been split into QtGui and QtWidgets).  Using QtPy guarantees a higher level of forward-compatibility with future versions of Natron, which may use Qt5 or Qt6. PySide can still be imported explicitly, if required, but the resulting code will not be forward-compatible. #687\n\n\n## Version 2.4.4\n\n### Known issues\n\n- Crash when closing a project window on macOS 12+ (Qt4 only). #712\n- Rendering sometimes silently stalls after X frames. #248\n- Some image formats may have issues (PCX, PSB). #602\n- MTS video files are sometimes not read correctly. #186\n\n### Changes\n\n- Rework the right-click nodegraph menu. #836\n- Allow simple expressions in project settings (e.g., frame range). #837\n- Allow dot in writer name on the command-line. #840\n\n### Plugins\n\n- Fix issues with Transform viewer interaction and undo support. #839\n- SeNoise: Fix handling of the YRotate parameter. #805\n\n\n## Version 2.4.3\n\n### Changes\n\n- Added support for render progress in taskbar icon (Windows/macOS). #766\n- Added palette support in color selector. #754\n- Allow creating a node with the same name that was just deleted. #732\n- Natron can now keep up to 32 project backups (see Preferences/General/Save versions). #562\n- Only display the overlays for nodes that are in the viewer render path and have their properties panel maximized. Can be disabled in Preferences/Viewer. #744\n- Fix rendering from Python (by calling app.render()) when nodes use Python expressions. #560\n- Fix drawing of closed Bezier overlays. #659\n- RotoPaint does not reconnect to the viewer at each stroke by default. Added a button to the viewer interface to re-enable this behavior. #641\n\n\n## Version 2.4.2\n\n### Changes\n\n- Fix OpenFX overlay actions being executed in the wrong order. #711\n- Fix enabling node preview from Python. #710\n- Do not display the \"Loading project\" splashscreen on macOS 12+ to avoid crash due to Qt4 bug. #712\n\n### Plugins\n\n- Fix bug in Transform plugin interact. #708\n- Fix EXR reader outputting the color plane only when an OCIO transform is applied. #714\n- The OpenColorIO plugins can now use OpenColorIO 2.1.\n\n\n## Version 2.4.1\n\n### Changes\n\n- Default number of render threads is more reasonable on multi-core systems: `min(num_cores, RAM/3.5Gb)`. #554\n- Fix checkerboard drawing on macOS Catalina and later. #614\n- Fix undoing \"Reset to default\" on parameters. #630\n- Fix NodeGraph manipulation and navigation issues. #491 #627\n- Fix Retina/High-DPI display issues on macOS, Windows and Linux/X11. #635\n- Fix multi-dimensional parameter linking (bug introduced in 2.4.0 #594). #631\n- Fix bug where any argument containing an integer between commas would be interpreted as a frame range. #644\n- Python: `app.saveProject`  and `app.saveProjectAs` now do project variable substitution, as in `app.saveProjectAs(\"[Variable]/output.ntp\")`.\n- Fix ASCII curve import. #656\n- New color selection dialog for RGB and RGBA knobs. #210\n- Fix histogram smoothing (was 5 times too strong).\n- Add Python functions `guiApp.copySelectedNodes` and `guiApp.pasteNodes`. #390 #674 #675\n\n\n### Plugins\n\n- Transform, CornerPin, Position and Ramp nodes now display the motion path.\n- HueCorrect now has the ability to do hue vs. hue adjustments, with an option to change the background curve guide. #610\n- Merge: Fix behavior on most operators when A is not connected or A's RoD and B's RoD are disjoint. #647\n- Reformat: fix bugs when \"turn\" is checked with Resize Type = None or Type = Scale.\n- Write: Remove file first when overwriting. #666\n- Mirror: Fix crash. #660\n- SeNoise: Add option for colored noise.\n\n\n## Version 2.4.0\n\n### Changes\n\n- Updated documentation. #572 #566 #551 #539 #538 #537 #520 #514\n- Handle console output on Windows. #524\n- Detect user installed fonts on Windows 10. #523\n- New Windows installer. #596\n- Improvements to SequenceFileDialog. #565\n- Snap timeline alpha cursor to nearest frame. #574\n- Handle UTF-8 values in KnobTable (fixes use of project path containing Unicode). #578\n- Tabs UI adjustments. #564\n- Do not allow Python keywords as node name or scriptname. #588\n- Always serialize nodes with an expression or a link, even if they have the default value. #585\n- Support cloned group nodes or hard links between groups. #568 #579 #594 #598\n- Default keyframe interpolation method for strokes and shapes is now \"Smooth\" (was \"Linear\"). #597\n- Fix animation of Roto Beziers with non-broken tangents. #102\n- Remember properties panels state when reopening project. #168\n- Fix slow nodegraph display on macOS 11 Big Sur. #606\n\n### Plugins\n\n- ReadFFmpeg, WriteFFmpeg: upgrade to work more nicely with the FFmpeg 4 API. #148 #231 #241\n- ReadFFmpeg: add support for reading AV1 & Canopus HQ/HQX/Lossless.\n- WriteFFmpeg: add support for writing AV1 & Cineform HD.\n- Fix another bug in DenoiseSharpen that caused crash when stoping/aborting. #300\n- Fix Lin2Log to be consistent with Log2Lin. #570\n- Merge: never consider RGB as being transparent by default - this is OK for unpremultiplied compositing (After Effects) but is invalid in a premultiplied compositor such as Natron or Nuke. Users still have the option to ignore the alpha channel. #571\n- WriteOIIO: Do not add \"Color.\" to the channel names of the color plane (affects mainly OpenEXR). #583\n- Writers: when writing RGBA to format that does not support alpha, just drop alpha - don't premultiply. #582\n- RGBtoHSL: Fix bug with white and superwhite values. #512\n- Reformat: Default to project size. #533\n\n\n## Version 2.3.15\n\n- Inputs of the selected nodes are now always visible.\n- Avoid crash and issues when NatronEngine.Effect.destroy() is called. #368\n- macOS: fix version numbers in Finder information. #372\n- Fix callbacks in PyPanel and PyModalDialog. #379\n- Fix recursive Python calls and handle the Python GIL properly.\n- Fix loading of Python Toolsets, and document how Toolsets are detected.\n- Fix using Rotopaint with multiple layers. #420 #205\n- Fix loading project settings. #439\n- Fix property panels of PyPlug nodes. #449\n- Fix missing python API entry points. #485\n- Make \"Use Host Interact\" setting available from user parameters. #490\n- Fix deadlock when creating a dialog from initGui.py. #487\n\n### Plugins\n\n- Fix bugs in DenoiseSharpen that caused crashes. #300\n- Add support for chromatic aberration correction when reading RAW files. #309\n- Update CImg and G'MIC to 2.8.4 and fix several issues in GMIC plugins (which are still beta).\n- Many new GMIC plugins, including GMIC Custom Code.\n- FrameRange: New options \"Loop\" and \"Bounce\". #411\n- Update OpenImageIO to 2.1.11.0. #350\n- Fix reading multi-view EXRs. #429\n- Support for reading and writing HEIF/HEIC images. HEIC is the still-image sibling of HEVC (a.k.a. H.265), and compresses to about half the size of JPEG but with higher visual quality.\n- Text: Added SRT subtitle format support.\n- AudioCurve (audio curve generator): new plugin.\n- Fix plugin bugs (IO and CImg) with images that take more than 2GiB of memory (e.g. 12000x12000 RGBA float). #456\n- Fix \"Fill\" PyPlug: was not filling everything if the Source was larger than the project. #475\n- Shadertoy: use the preset name as a sublabel.\n- LensDistortion/IDistort/STMap: add \"Use src RoD\" option to override format.\n- Blur: fix handling of render scale when computing derivatives. #496\n- Text: fix animating font family and retiming the text output. #482 #476\n\n\n## Version 2.3.14\n\n- Error messages are not cleared anymore at each rendered frame. They can be cleared explicitly using the \"Refresh\" button in the viewer.\n- ReadSVG: Fix reading layers of SVG files. #292\n- Fix many G'MIC plugins. Changes are not backward compatible and existing graphs may need to be reworked. Note that G'MIC plugins are still beta. #295\n- LensDistortion: fix loading PFBarrel files. #296\n- Label parameters now use both columns in the parameters panel.\n\n\n## Version 2.3.13\n\n- Fix default value for file premult in ReadSVG (should be premultiplied).\n- HSV values in the viewer info lines are now computed from linear RGB. #286\n- RGBToHSV, HSVToRGB, RGBToHSL, HSLToRGB, RGBToHSI, HSIToRGB: Use linear RGB values in computation. #286\n- Tracker: fix bug where Transform tracking was wrong when using more than 1 point. #289\n\n\n## Version 2.3.12\n\n*Note*: all github issues were moved to https://github.com/NatronGitHub/Natron/issues , and issue numbers in the change log now refer to this github repository.\nIssue numbers up to version 2.3.10 refer to archived issues in https://github.com/MrKepzie/Natron/issues .\n\n- Fix font selection in the plugins that render text (Text and Polaroid from openfx-arena). #269\n- Python: add Effect.getOutputFormat() method.\n- GCC 8.1 (used for the 2.3.11 binaries) breaks the timeline GUI, revert to GCC 7.3 for Linux builds. #279\n- Disable crash reporter in official binaries (requires maintenance to get it working again), and add crash reporter code to the source tree.\n\n\n## Version 2.3.11\n\n- User Guide: Add documentation on tracking and stabilizing.\n- FrameBlend: Add Over operation, add decay parameter, and fix bugs.\n- Fix Python Pseudo-random number generators random(min,max,time,seed) and randomInt(min,max,time,seed).\n- Shadertoy: Document the process to adapt a shader from shadertoy.com to the Shadertoy plugin.\n- Support FFmpeg 4.0 in the ReadFFmpeg and WriteFFmpeg plugins.\n\n\n## Version 2.3.10\n\n- Add \"Overwrite\" checkbox to writers to avoid re-rendering the whole sequence. #1683\n- Writers do not render the whole RoD on their input anymore (this may result in a huge speed improvement on some projects).\n- Fix bug where effects could be marked as pass-through if their RoD was larger than the project format. #1578\n- Add python method setCanAutoFoldDimensions(enable) to Double2DParam and Double3DParam.\n- Fix several plugins when included in a PyPlug: ColorSuppress, HSVTool, ImageStatistics, Ramp, Shuffle, Reformat. #1749\n- Fix Matrix3x3 and Matrix5x5 GUI (y was reversed).\n\n\n## Version 2.3.9\n\n- Numerical text fields (aka SpinBoxes) are now auto-reselected when validated. #1737\n- When a node is selected, make its inputs/outputs more visible.\n- Node shape is now thinner in the node graph.\n- In the node graph, the cursor now really reflects what a mouse click would do.\n- All nodes inside a backdrop can be enabled/disabled using the \"D\" key. #1720\n- Fix the \".\" shortcut for creating a Dot in the nodegraph on non-French keyboards.\n- Only auto-connect a newly-created node to the input of the selected node if it cannot have an input itself.\n- Made more clear what the \"LUT\" tab in the project settings is for. #1744\n- Better \"hide all parameters without modifications\" behaviour. #1625\n- Only the keypad number keys should be used to nudge Bezier/tracker, regular number keys switch the viewer. #1582\n\n\n## Version 2.3.8\n\n- Fix crash when Viewer/maxNodeUiOpened=1 in the preferences.\n- Fix bug where an exported PyPlug would not have a correct Python syntax if a string had a backslash followed by newline (as may be seen in Shadertoy sources).\n- Fix behaviour of loop/bounce in the Read node when there is a time offset. #1734\n- G'MIC plugins by Tobias Fleischer are now bundled with the binary distributions (beta).\n- Fix bug where the \"&\" character was not displayed in the plugin creation menus.\n\n\n## Version 2.3.7\n\n- The viewer timeline can now display information as timecode instead of frames (see TC/TF choice next to fps below the timeline)\n- Disabled Merge nodes (and other nodes with input A and B) now always pass-thru the B input. Preferences should never affect the render results.\n- Shuffle now passes through B by default, and has a new toggle parameter \"setGBAFromR\" to disable automatically setting G B and A from R.\n- Grade: Add \"Reverse\" option to apply the inverse function. Usage: clone or copy-paste a Grade node, insert it downstream of the original node, and check \"Reverse\" in the downstream Grade.\n- Fix RunScript (the bugs were in ReadOIIO and Natron), and better document it.\n- GIF format is now read and written by ReadFFmpeg (most GIFs these days are animated).\n\n\n## Version 2.3.6\n\n- Fix bug when using PyPlugs containing Shadertoy (and possibly other plugins too). #1726 #1637\n- Fix bug when creating a group from a plugin with invisible inputs (e.g. Shadertoy).\n- Fix bug where Natron would crash when the \"clear all panels\" button is pressed. #1729\n- Fix bug where Roto and RotoPaint lifetime would change randomly. #1707\n\n### Plugins\n\n- ReadOIIO/ReadPNG: \"Image Info...\" gives a more explicit message, containing the filename and more info.\n- Fix bug in all OCIO plugins where GPU render is wrong if (un)premult is checked (disable GPU render in this case).\n\n\n## Version 2.3.5\n\n### Plugins\n\n- ReadOIIO: fix a bug where the Read nodes are not properly restored when timeOffset is used. #1711\n- ReadOIIO: add options for reading RAW files: rawUserSat, rawHighlightMode, rawHighlightRebuildLevel.\n- DenoiseSharpen: fix a bug where the plugin would not abort processing when required.\n- ColorCorrect: fix luminance computation when applying saturation. #1706\n- Reformat: add a checkbox to use the input RoD instead of the input format (useful when preceded by a crop).\n- ContactSheet/LayerContactSheet: correctly set the format when the output size is changed.\n\n\n## Version 2.3.4\n\n- Binaries distributed through Natron's web site are now built with 8-bit x264. 10-bit x264 (introduced with 2.2.6) causes too many compatibility issues. There are other codecs that support 10-bit output (especially ProRes, vc2, libopenjpeg, libvpx-vp9, and x265 on some systems). In order to get 10-bit x264, it is recommended to encode a quasi-lossless using one of these codecs, and then transcode with a ffmpeg binary capable of encoding 10-bit x264.\n- Work around a possible Qt/Linux  bug where tablet events have a negative pressure on Wacom Intuos tablet. #1697\n- Binaries: add 10-bit HEVC encoding, Cisco openh264 encoding, VidVox Hap encoding.\n\n### Plugins\n\n- Upgrade SeExpr to version 2.11.\n- Grade: add a \"Normalize\" button to automatically compute the clack and white points.\n- Matrix3x3, Matrix5x5: new plugins, apply a 3x3 or 5x5 custom filter.\n- ColorCorrect: Fix wrong render for input values outside the [0-1] range. #1703\n- ReadOIIO: Adjust Maximum Thr. (used when reading RAW camera files) should default to 0.0. #1705\n\n\n## Version 2.3.3\n\n- Fix computation of remaining time when rendering.\n- Fix loading third-party plugins on Linux. #1682\n\n### Plugins\n\n- ColorLookup: add \"Master Curve Mode\" parameter, which enable selecting different algorithms to apply the tone curve with more or less color shifting. These curve modes are inspired by [RawTherapee](http://rawpedia.rawtherapee.com/Exposure#Curve_Mode). Also add the possibility to compute and display the RGB histogram of the source input.\n- WriteFFmpeg: support 10-bit DNxHR 444 and DNxHR HQX (and fix a related FFmpeg bug).\n- Shadertoy: rework many presets so that they work better with Natron, especially the effects in the Blur, Effect, and Source categories. Most blur effects can also be modulated per-pixel using the \"Modulate\" input to get Z-dependent blur.\n- Shadertoy: new presets: Blur/Bokeh Disc, Blur/Mipmap Blur, Effect/Anaglyphic, Effect/Bloom Paint, Effect/Sawnbringer 4bit, Effect/Sharpen, Effect/CRT, Effect/Fisheye, Effect/Image Cel Shade, Effect/Kaleidoscope, Effect/Noisy Mirror, Effect/Quad Mirror, Effect/Q*Bert-ify, Effect/Stripes, Effect/Vignette, Source/Cloud, Source/Cloudy Sky, Source/Disks, Source/Fireball, Source/Flash, Source/Seascape, Source/Star Nest, Source/Voronoi\n- Shadertoy: add iChannelOffset extension.\n- LensDistortion: add cropToFormat parameter (true by default), to avoid computing areas outside of the project frame.\n\n\n## Version 2.3.2\n\n- Merge: fix bug where the alpha from the B input would be used for all consecutive merge operations, rather than updated at each operation. #1648\n\n\n## Version 2.3.1\n\n- Python: Fix the setTable() function of the PathParam class.\n- Windows: Fix a bug where most image formats would not read and write correctly.\n\n\n## Version 2.3.0\n\n- Fix lots of bugs when loading older Natron project files.\n- Internal changes: implement a new OpenFX multiplane suite.\n\n\n## Version 2.2.9\n\n- Fix a bug where the channel selector would be wrong when loading older projects (e.g. Spaceship).\n\n### Plugins\n\n- SpriteSheet: convert a sprite sheet to an animation.\n\n\n## Version 2.2.8\n\n- OpenGL interact is now always affected by transforms even if there is motion blur.\n\n### Plugins\n\n- Radial, Rectangle and generators: when the Extent is set to Size, and Reformat is not checked, Bottom Left and Size can be animated.\n- add Box filter to Transform, CornerPin, GodRays, and all Distortion nodes.\n- ContactSheet, LayerContactSheet: Make a contact sheet from several inputs, frames or layers (beta)\n\n\n## Version 2.2.7\n\n- Reduce noise on the roto shape borders #1594\n\n### Plugins\n\n- ReadOIIO: fix bug when reading EXRs with datawindow different from displaywindow.\n- (beta feature) Inpaint: New plugin. Inpaint the areas indicated by the Mask input using patch-based inpainting. Please read the plugin documentation.\n\n\n## Version 2.2.6\n\n- Multi-dimensional parameters don't automatically fold into a single dimension, except for scale and size params.\n- Binaries distributed through Natron's web site are now built with 10-bit x264 and 10/12-bit libvpx-vp9 support. That means the produced video files may be unplayable on some hardware (e.g. phones or TVs), but Natron should really be used to produce digital intermediates with the highest possible fidelity, which can then be transcoded to more suitable distribution codecs.\n- Better cache usage for Readers, ReadOIIO does not use the OIIO cache anymore (partly due to https://github.com/OpenImageIO/oiio/issues/1632).\n- Fix a bug where custom OpenFX plugins directories would be ignored #1584\n- Add a documentation chapter on importing camera data from PanoTools-based software (PTGui, PTAssembler, Hugin).\n\n### Plugins\n\n- WriteFFmpeg: the preferred pixel coding and bit depth can now be selected, which is very useful for codecs that propose multiple pixel formats (e.g. ffv1, ffvhuff, huffyuv, jpeg2000, mjpeg, mpeg2video, vc2, libopenjpeg, png, qtrle, targa, tiff, libschroedinger, libtheora, libvpx, libvpx-vp9, libx264, libx265).\n- WriteFFmpeg: Bitrate-based (CBR) encoding was removed from the following codecs in favor of quality-based (VBR) encoding, mainly because CBR should be used in 2-pass mode (using handbrake or the ffmpeg command-line tool): mpeg4, mpeg2video, mpeg1video, flv.\n- ColorCorrect: changed the Contrast formula to make adjustments more intuitive, see https://compositormathematic.wordpress.com/2013/07/06/gamma-contrast/ - this may affect existing projects that used the previously buggy Contrast parameter.\n- LensDistortion: add PanoTools/PTGui/PTAssembler/Hugin model.\n- Card3D can now import/export chan files from Natron, Nuke, 3D-Equalizer, Maya, etc., and txt files from Boujou.\n- Card3D and CornerPin: only show things that are in front of the camera. In cornerPin, point 1 is always considered to be in front.\n- Noise, Plasma: result is now reproductible (a given render always gives the same result).\n- ReadOIIO: add advanced options for reading RAW files.\n- STMap: Use the format of the Source input rather than its RoD to determine the texture size (useful when using an STMap written by LensDistortion).\n- SmoothBilateral, SmoothBilateralGuided, SmoothRollingGuidance: The Value Std Dev. was clamped by CImg to a rather high value (0.1), making the filters almost useless. Fixed.\n\n\n## Version 2.2.5\n\n- Fix undo when manipulating 2D points in the viewer interact #1576\n- Fix manipulating the interact plugin on non-retiming inputs of retiming effects (e.g. the Retime Map in Slitscan) #1577\n- Fix exporting curves to ascii (eg ColorLookup), and values for xstart, xincr and xend can now be simple expressions.\n\n### Plugins\n\n- DenoiseSharpen: the output is now the noisy source when Noise Analysis is not locked. It is easier to see where there is noise that way, and it also makes the plugin usable in Resolve (which calls render even if non-significant parameters are changed)\n- Generators now may set the output format when Extent=Size (as they do when Extent=Format or Extent=Project).\n- Rework many plugins so that they work better in DaVinci Resolve (all generators including Radial and Rectangle, CopyRectangle, DenoiseSharpen, LensDistortion, HSVTool, ImageStatistics, Position)\n- Card3D (beta): Transform and image as if it were projected on a 3D card.\n\n\n## Version 2.2.4\n\n- Write: remove Python page, add Info page\n- ReadFFmpeg: fix \"Image Info...\" button (which calls ffprobe) when file path is relative to a project variable\n- fix high-resolution application icons\n\n### Plugins\n\n- Readers and writers now only get the colorspace from the filename if it is before the extension and preceded by a delimiter\n- BilateralGuided: bug fix\n- Natron can now use plugins compiled with the DaVinci Resolve OpenFX SDK (which assumes that the host is Resolve), such as the Paul Dore plugins (see https://github.com/baldavenger/). These plugins may require CUDA runtime library to run. It can be found in the Resolve installation. On macOS, execute `cp \"/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/libcudart.dylib /Applications/Natron.app/Contents/Frameworks/libcudart.7.5.dylib`\n\n\n## Version 2.2.3\n\n- add proper quality options to WriteFFmpeg, including CRF-based encoding for libx264.\n- the online documentation for Read and Write now show the documentation of the underlying plugin.\n- fix bug in the recent files menu #1560\n- fix reading of transparent PNG #1567\n- fix clearing error message for readers/writers.\n- disable MXF writing (too many constraints, use an external transcoder)\n- fix MKV writing\n\n\n## Version 2.2.2\n\nThis is a bug-fix release\n\n- fix hue display in the viewer #1554\n- EdgeBlur now has an optional Matte input used to compute the edges #1553\n- fix reading image sequences that do not have frame number 1 in them #1556\n- better/simpler GUI and documentation for the file dialog.\n\n\n## Version 2.2.1\n\nThis is a bug-fix release.\n\n- fix a bug with the file dialog when network drives are detached on Windows\n- the \"Open Recent\" menu now shows the directory name if there are several files with the same name.\n\n### Plugins\n\n- STMap: was broken in 2.2, fix it.\n- WritePNG: fix writing 16 bit PNG\n\n\n## Version 2.2\n\n- OpenGL rendering is enabled by default for interactive editing in plugins that support it (but still disabled for background rendering)\n- Roto & RotoPaint: ellipses and circles are more accurate #1524\n- When a plugin is not available with the right major version, use the smallest major version above for better compatibility (before that change, the highest major version was returned)\n- Natron can now be launched in 32-bits mode on macOS\n- Documentation is now licensed under CC BY-SA 4.0, and external contributions are welcome\n- Organize nodes documentation\n- New project formats: HD_720, UHD_4K, 2K_DCP, 4K_DCP\n\n### Plugins\n\n- The plugins that were made available as beta features in the 2.1 releases are now considered stable:\n    - DenoiseSharpen: new wavelet-based denoising plugin\n    - EdgeBlur: Blur the image where there are edges in the alpha/matte channel.\n    - EdgeDetect: Perform edge detection by computing the image gradient magnitude.\n    - EdgeExtend: Fill a matte (i.e. a non-opaque color image with an alpha channel) by extending the edges of the matte.\n    - ErodeBlur: Erode or dilate a mask by smoothing.\n    - HueCorrect: Apply hue-dependent color adjustments using lookup curves.\n    - HueKeyer: Compute a key depending on hue value.\n    - KeyMix: Copies A to B only where Mask is non-zero.\n    - Log2Lin: Convert from/to the logarithmic space used by Cineon files.\n    - PIK: A per-pixel color difference keyer that uses a mix operation instead of a max operation to combine the non-backing screen channels.\n    - PIKColor: Generate a clean plate from each frame for keying with PIK.\n    - PLogLin: Convert between linear and log representations using the Josh Pines log conversion.\n    - Quantize: Reduce the number of color levels with posterization or dithering\n    - SeExprSimple: new simple expression plugin with one expression per channel\n    - Sharpen & Soften: new plugins.\n    - SlitScan: Per-pixel retiming.\n- SeNoise: fix bugs in the Transform parameters #1527\n- PIKColor: do not expand region of definition\n- Shadertoy: support iDate, add presets, fix CPU rendering #1526\n- Transform & CornerPin: additional \"Amount\" parameter to control the amount of transform to apply.\n- ColorLookup: fix a bug where output was always clamped to (0,1) #1533\n- Grade: fix a bug where negative values were clamped even when gamma=1 #1533\n- STMap, IDistort, LensDistortion, Transform, CornerPin: reduce supersampling to avoid artifacts\n- LensDistortion: add STMap output mode, add undistort output, add PFBarrel and 3DEqualizer distortions model, add proper region of definition support.\n- RotoMerge: a merge plugin that takes an external mask as the alpha for the A input.\n- WriteFFmpeg: DNxHD codec now supports DNxHR HQ, DNxHR SQ and DNxHR LB profiles.\n\n\n## Version 2.1.9\n\n- Read/Write: Do not automatically set parameters when changing the filename (#1492). Creating a new Reader/Writer still sets those automatically.\n- ctrl-click on a node in the nodegraph (cmd-click on Mac) now opens its control-panel (same as double-click)\n- Curves with a single keyframe can now have a slope.\n- Fix gamma=0 in the viewer\n- Fix a bug where removing all control points from ColorLookup would crash the application\n- Fix bugs in curves drawing.\n- Fix potential crashes when using KDE on Linux\n- Fix a bug where Roto strokes drawn at a different frame than the current frame would disappear\n- (macOS) Fix a bug where the interface would become very slow after a String parameter is disabled or enabled\n\n### Plugins\n\n- ColorWheel: antialiased rendering\n- Rectangle: add rounded corners\n- PIKColor: fix black rims issue #1502, rework & optimize\n- PIKColor: remove hard limits on parameters b85f558\n- Grade & Gamma: fix behaviour when gamma=0\n- Shadertoy: support iChannelResolution\n\n\n## Version 2.1.8\n\n- Fix a bug where several images with file names that contain two numbers would be be considered as a sequence even if both numbers differed.\n- Fix a bug where a disabled Merge node would pas input A if the preferences say Merge should auto-connect to B (#1484)\n- Node Graph: hints for possible links between nodes are now only active when holding the Control key (Command on macOS) (#1488)\n- Roto: The default shortcuts to nudge Control Points has been changed to the num-pad 2,4,6 and 8 keys instead of the arrow keys\nwhich were conflicting with the timeline shortcuts. (#1408)\n- Fix a bug where the output channels of the Shuffle node could forget their link or expression (#1480)\n- Fix a bug where the focus on parameter would jump randomly (#1471)\n\n### Plugins\n\n- Rectangle: antialiased rendering + remove the \"black outside\" param\n- Radial: antialiased rendering (can render an antialiased disc or ellipse when softness=0)\n- Merge: fix a bug where the \"A\" checkbox of the B input would always be turned off when an RGB clip is connected. This is now done only if the user never toggled that checkbox.\n- (beta feature) EdgeDetect: Perform edge detection by computing the image gradient magnitude.\n- (beta feature) EdgeBlur: Blur the image where there are edges in the alpha/matte channel.\n\n\n## Version 2.1.7\n\n- Fix a bug where PyPlugs would not load if the PYTHONPATH environment variable was set\n\n### Plugins\n\n- (beta feature) SlitScan: Per-pixel retiming.\n\n\n## Version 2.1.6\n\n- Fix a bug where Natron would freeze or be extremely slow when using big node graphs\n\n### Plugins\n\n- DenoiseSharpen: Use a more intuitive \"Sharpen Size\" parameter instead of \"Sharpen Radius\", and do not sharpen the noise. Add \"Denoise Amount\" parameter, which can be set to 0 to sharpen only.\n- ErodeBlur: fix the \"Crop To Format\" parameter (which did not work)\n- (beta feature) HueCorrect: Apply hue-dependent color adjustments using lookup curves.\n- (beta feature) HueKeyer: Compute a key depending on hue value.\n\n\n## Version 2.1.5\n\n- Introduce the notion of \"Format\", which is basically the area of the image to be displayed (similar to the display window in OpenEXR). Each clip has a format attached, so a project can contain images of different sizes.\n- Fix a bug where deprecated plugins would not be loaded from project file 2561778\n- macOS: clicking the dock icon now raises all windows\n- macOS: fix ColorLookUp curves parameter display\n- PyPlug: fix a bug where removing a node inside a Group would break any expression on its siblings\n- Reader: fix a bug where copy/pasting a node would display a \"Bad Image Format\" error\n- The whole user interface now uses the same font, and dialogs were cleaned up to use standard buttons\n- Roto: fix a bug where the selected tool in the viewer would not refresh properly\n- Fix a bug where Natron would not work properly when installed in a directory containing unicode characters\n- OpenEXR: fix a bug where auto-crop files would not have their origin placed correctly\n\n### Plugins\n\n- Crop: add the \"Extent\" choice, to chose either a predefined format or a custom size\n- Blur: add the \"Crop To Format\" option.\n- Reformat: if input has a format, use it to compute the reformated output.\n- NoOp: can also set the format.\n- Shuffle: re-enable the \"Output Components\" choice\"\n- Premult/UnPremult: don't try to check processed channel when rewiring the input\n- (beta feature) ErodeBlur: Erode or dilate a mask by smoothing.\n- (beta feature) KeyMix: Copies A to B only where Mask is non-zero.\n- (beta feature) PIK: A per-pixel color difference keyer that uses a mix operation instead of a max operation to combine the non-backing screen channels.\n- (beta feature) PIKColor: Generate a clean plate from each frame for keying with PIK.\n- (beta feature) Sharpen & Soften: new plugins.\n- (beta feature) EdgeExtend: Fill a matte (i.e. a non-opaque color image with an alpha channel) by extending the edges of the matte.\n\n\n## Version 2.1.4\n\n- Windows: Fix a bug where the UI would freeze for a long time when reading files over a network share\n- Python: Add ExprUtils class that adds helpers for FBM and Perlin noise (taken from Walt Disney Animation SeExpr library)\n- Tracker: fix add/remove jitter motion types\n- Fix creation of SeNoise node\n- Fix a bug where the data-window would not be read correctly with auto-crop EXR image sequences\n- Fix a bug where the group expand/fold feature would not work correctly\n\n\n## Version 2.1.3\n\n- Gui: sliders have a cleaner look with less ticks and a round handle 231c7f7\n- fix bug where the OFX plugin cache could be wrong if OpenGL was disabled 32c1532\n- fix dynamic kOfxSupportsTiles handling\n- add more properties to the \"Info\" node panel\n- the log window now becomes visible whenever a message is sent\n- Fix a bug where entering a Group node could crash Natron\n- Fix a bug where copy pasting a Group could loose expressions/links used nodes within the Group\n- Fix a bug when reading auto-crop EXR image sequences\n- Fix a bug where a project could use all the RAM available plus hit the swap when reading scan-line based multi-layered EXR files\n\n### Plugins\n\n- (beta feature) SeExprSimple: new simple expression plugin with one expression per channel\n- (beta feature) DenoiseSharpen: new wavelet-based denoising plugin\n- (beta feature) Log2Lin: Convert from/to the logarithmic space used by Cineon files.\n- (beta feature) PLogLin: Convert between linear and log representations using the Josh Pines log conversion.\n- (beta feature) Quantize: Reduce the number of color levels with posterization or dithering\n- ImageStatistics: can now extract the pixels with the maximum and minimum luminance, as well as their values\n\n\n## Version 2.1.2\n\n- Viewer: A new button can now force full-frame rendering instead of the visible portion. This may be useful to remove borders artifacts when panning/zooming during playback\n- Fix a bug where the Glow node would not work correctly\n- Windows: Fix a bug where the 32-bit version would crash on launch with AMD Graphic Cards\n- Fix a bug where the Read node would sometimes show an error dialog but everything was in fact fine\n- Fix a bug where changing the output filename in a Write node would reset encoder specific parameters\n- Tracker: when clicking \"Set Input RoD\" in the From points of the corner pin, automatically re-compute the To points over all keyframes\n- Tracker: A bug was found in the internal algorithm when tracking with a rotation/affine model. This was fixed in co-operation with Blender developers\n- Fix a bug where the .lock file of a project would not go away even if closing Natron correctly\n- Fix a bug where expressions would not work in some circumstances\n\n\n## Version 2.1.1\n\n- Fix a bug where enabling GPU rendering from the settings would not be taken into account correctly by the ShaderToy node\n- Fix a bug where panning the viewport during playback could show banding artifacts\n- Fix a bug where the Reformat node would not work properly when loading a project and then switching the Type parameter\n- Fix a crash when adding a control point to a roto shape with CTRL + ALT + LMB\n- Fix a bug where the writing of the OpenFX plug-ins loading cache was not thread-safe. Multiple Natron processes on a same node of a render farm could corrupt the cache thus failing some renders because plug-ins could not load.\n- The Dilate/Erode nodes now have the Alpha checkbox checked by default and also have a parameter to expand the bounding box\n- The Auto-Turbo mode is now also enabled when writing out on disk\n\n\n## Version 2.1.0\n\n- The point tracker was completely reworked. It now uses libmv (from Blender). It now allows tracking different motion types (translation, rotation, scaling, perspective) and can be used for anything that needs match-moving or stabilizing.\n- Readers/Writers are now all under the same Read/Write node. If 2 readers/writers can decode/encode the same format, a drop-down allows one to choose between them.\n- Python: it is now possible to pass extra properties to the createNode function to control how nodes are created, see (Python reference)[http://natron.readthedocs.io/en/master/devel/PythonReference/NatronEngine/App.html#NatronEngine.NatronEngine.App.createNode].\n- (beta feature) New documentation for Natron: Whenever pressing the \"?\" button in the properties panel of a node, Natron will open-up a page in your web-browser with documentation for this node. Natron also has a user-guide that is work in progress.\nYou may contribute to this user guide, follow (these)[http://natron.readthedocs.io/en/master/guide/writedoc.html] instructions to enrich the documentation.\n- (beta feature) Shadertoy is a new plugin that allows writing plugins using GLSL fragment shaders. It supports both GPU rendering using OpenGL and CPU rendering using Mesa.\n- (beta feature) OpenGL rendering is now supported (enable it in Preferences/GPU rendering). Tested with the Shadertoy plugin and the HitFilm Ignite plugins.\n-  ColorLookup now has a background that makes it easier to use as a color ramp.\n- (beta feature) TextFX is a new text plugin with more features than the original text node(s).\n- (beta feature) ReadCDR is a new reader plugin that supports CorelDRAW(R) documents.\n- (beta feature) ReadPDF is a new reader plugin that supports PDF documents.\n\n\n## Version 2.0.5\n\n- Viewer: The number keys now always switch input A when not shifted, and B when shifted, even on keyboards where numbers should be shifted (such as French AZERTY).\n- Viewer: Reworked the wipe modes. added Onion Skin and stack modes.\n\n\n## Version 2.0.3\n\n- Fixed a bug where some image sequences would fail to read when a first frame would be missing\n- Fixed a bug where a PyPlug containing another PyPlug would fail to load in some cases\n- Fixed a bug where the play button would not be pressed on all viewers during playback\n- Python: add a function to File parameters to reload the file\n- Fixed a bug where the gui could stop giving feedback when rendering\n- CTRL + left mouse button click can now be used on sliders to reset to their default value\n- Fixed Python call to the onProjectSave callback which would not work\n\n\n## Version 2.0.2\n\n- Expressions are now persistent: it can become invalid if a condition is not met currently to successfully run the expression, but can become valid again automatically.\n- Layers/Channels are now persistent: when copy pasting small \"graphlets\" or even creating PyPlugs, they will be remembered for convenience. An error may occur next to the corresponding parameter if the channel/layer does not exist any longer. You may right click the drop-down parameter to synchronize the menu to the actual state of the node to see the layers available.\n- Fix a bug where expressions would not be evaluated at the correct time for nodes outside of the tree currently being rendered\n- Fix a bug where the Format parameter would be reset automatically for the Reformat node\n- Fix a bug with QGroupBox stylesheet for PySide\n- Fix a bug with keyframes for Rotoshapes where some control points would not get keyframed\n- Fix a bug where a size parameter could get ignored from the project if with=1 and height=1\n- Fix a bug with PNG reading: if a sequence of PNG would contain grayscale/RGB images then it would be assumed that the format of the first image in the sequence would be the format of the whole sequence.\n- It is now possible to turn off the file dialog prompt when creating a Write node from the Preferences->General tab\n- Write nodes now default their frame range to the project range\n- Fix a bug where the Write node channels checkboxes would not be taken into account correctly\n- Python API: add app.getActiveViewer() and app.getActiveTabWidget(), see Python reference for documentation\n- Viewer: Whenever the B input is not set, set it automatically to the A input for convenience\n- Drag and Drop: It is now possible to drag&drop images to anywhere in the Natron UI, not necessarily in the Node Graph. It is also possible to drop Natron projects or Python scripts.\n- Copy/Paste: It is now possible to paste python code directly into Natron UI, which will be run in the Script Editor automatically if valid\n- Node graph: improve performances\n- Script Editor font and font size can now be customized from the Preferences-->Appearance tab\n- Fix a bug where rendering in a separate process would always fail on Windows.\n- WriteFFMPEG: fix a bug with multi-threading that was introduced with enhancements in 2.0.1 for certain codecs that do not support it\n\n\n## Version 2.0.1\n\n- Major performance improvement for ReadFFMPEG and WriteFFMPEG\n- Fix crash received from crash reporter\n- Roto: fix interaction with feather\n- Roto: It is now possible to add points to a shape by pressing CTRL+ALT+click\n- Roto: fix a bug where animating any parameter would crash Natron\n- Python: add ability to query the *active project* (i.e: the top level window) with the NatronEngine.natron.getActiveInstance() function\n- Python: fix issue where the argument of *saveProject(filename)* would be ignored\n\n\n## Version 2.0\n\n- Python: PyPlugs can now be used to create toolsets, such as Split And Join in the views menu\n- New Glow PyPlug\n- New bloom node\n- The HSVTool node now has an analysis button to set the src color\n- The file dialog performances have been greatly improved\n- It is now possible to list all available drives in the file dialog on Windows\n- New progress panel to manage renders to cancel, queue, pause or restart them\n- EXR format reading/writing speed has been greatly improved\n- ReadFFMPEG/WriteFFMPEG performances have been improved\n- WriteFFMPEG has now a better interface to display possible format/codec combination\n- The viewer now has the ability to pause updates so that no render is triggered upon any change that would modify the displayed image\n- User interface for parameters has been improved and requires less mouse clicks\n- Undo/Redo shortcuts (CTRL-Z or CMD-Z on Mac) now follow the mouse over focus indicated on the interface tabs\n- The curve editor has received major speed enhancements when manipulating thousands of keyframes\n- The dope sheet zoom is now always appropriate, even for still images\n- Fixed issues on Linux/Windows where Natron interface would not display correctly on screens with high DPI\n- Fixed issues on Windows where file paths with non ASCII characters would not be read/written correctly\n- Fixed issues on Windows where reading from/writing to a network share would not work correctly\n- Value parameters can now have Python expressions written directly in their spinbox and can be used as calculators\n- A new demo project from Francois Grassard is available at [sourceforge.net/projects/natron](https://sourceforge.net/projects/natron/files/Examples/).\n  It contains a fully-featured project demonstrating the use of a complex node-graph including usage of PyPlugs.\n\n\n## Version 2.0rc4\n\n- Write nodes now have a Frame Increment parameter which allows one to skip frames while rendering.\n- The command-line parameters and Python API have been updated in this regard (see Python documentation).\n- Fix multiple bugs when rendering a multi-layered exr\n- Linux: when crashing, Natron will now print a backtrace if launched from the Terminal. This is temporary and will be soon replaced by a cross-platform crash reports handler.\n- RotoPaint: enhancements in the rendering algorithm\n- Color, Double and Integer parameters can now have an expression entered directly in a SpinBox for convenience\n- NodeGraph: optimize for speed when the scene contains a lot of nodes and add auto-scrolling when reaching the border of the view\n\n\n## Version 2.0rc3\n\n- The Read node can now read multi-view EXR files. Decoding speed of EXR has been greatly improved.\n- The Write node can now write multi-view and multi-layered EXR files. Encoding speed of EXR has been greatly improved.\n- Viewer: The channel selected in the \"Alpha channel\" drop-down can now be overlayed on the image when using the \"Matte\" display channels\n- The RotoPaint/Roto Transform and Clone tabs now have a viewer handle overlay to help manipulating the parameters\n- DopeSheet and CureEditor: The scaling interactions with the bounding box of selected keyframes are now correct but may lead to keyframes being located at floating point times.\n- A \"P\" indicator at the bottom right of a node will indicate that a node is a pass-through. Hovering the mouse over the \"P\" will indicate from which input this node is a pass-through of.\nThe pass-through input will also be indicated with a plain arrow whereas all other inputs will have their arrow dashed.\n- Python API: it is now possible to retrieve the layers available on a node with the getAvailableLayers() function, see [Python Reference](http://natron.rtfd.org)\n\n\n## Version 2.0rc2\n\n- Python 2.7 API:\n  - Parameters expressions\n  - User-defined parameters\n  - Script editor to control the application overall\n  - User-defined python callbacks\n  - Integration of Pyside to the GUI so that the interface is extensible with new menus and windows\n  - Python API is available at http://natron.readthedocs.org\n- Nodes group to have cleaner graphs with hidden sub-nodegraphs\n- PyPlug: You can export a  group as a Python plug-in and it be re-used in any other project as a single node as you would use any other plug-in\n- SeExpr integration within a node: http://www.disneyanimation.com/technology/seexpr.html\n- New SeNoise and SeGrain nodes based on SeExpr\n- RotoPaint node with Wacom tablets support\n- DopeSheet editor: This is where you can control easily keyframes and clips in time for motion graphics purposes\n- Render statistics: Available in the Render menu, use this to debug complex compositions\n- New Text plug-in with much more controls than the previous Text node\n- New TextPango node based on the Pango library to directly input Pango Markup Language (html-like),  see https://github.com/olear/openfx-arena/wiki/Pango\n- Many new nodes, based on the ImageMagick library: ReadPSD, ReadSVG, Charcoal, Oilpaint, Sketch, Arc, Polar, Polaroid, Reflection, Roll, Swirl, Tile, Texture\n- New nodes:\n  - STMap\n  - IDistort\n  - LensDistortion\n  - TimeBlur\n  - OCIODisplay node\n  - GmicEXPR, to enter GMIC expressions\n- Rewrote entirely the WriteFFMPEG and ReadFFMPEG nodes. Most widely used codecs are supported\n- New merge operators: grain-extract, grain-merge, color, hue, luminosity\n- New gamma and gain controllers on the viewer\n- Multiple viewers can now have their projection synchronised to enhance image comparison\n- Support for multi-layered workflows for cleaner graphs\n- Better support for multi-view workflows\n- Various performance and stability enhancements across the board\n\n\n## Version 1.2.1\n\n- New GodRays and DirBlur nodes.\n- New RGBToHSI/HSIToRGB YUVToRGB/RGBToYUB YCbCrToRGB/RGBToYCbCr nodes\n- Fixed a bug where some TIFF files would not read correctly on Windows versions of Natron\n- FIxed a bug where a crash could occur with the Merge node with mix = 0\n- Fixed a bug where ReadFFMPEG would sometimes decode incorrectly files with bit depth higher than 8\n- Miscellaneous stability fixes\n\n\n## Version 1.2.0\n\n- Overlays on the viewer are now transformed by all Transform effects such as CornerPin,Transform\n- The user interface colors can now be changed in the \"Appearance\" tab of the Preferences of Natron\n- Bezier curves motion now have a constant or linear interpolation\n- The dialog that pops up when trying to merge 2 clips that do not have a matching FPS is now a bit clearer regarding possible solutions\n- Wacom support is now more intuitive and supported on all widgets that can zoom or pan.\n- New \"Image statistics\" node to analyse various significant values from an image\n- It is now possible to connect any node to a Writer node\n\n### Bug fixes\n\n- ReadFFMPEG would crash when reading video files with a videostream bitdepth > 8bit\n- ReadFFMPEG would crash when reading image sequences\n- The viewer would not redraw correctly\n- The nodegraph would not redraw correctly, hence producing a latency effect\n- Readers would not recognize some image sequences\n- Some TIFF files would not be read correctly by the ReadOIIO node\n\n### Known issues\n\n- Stereo workflows are broken and will be re-introduced with a more\n  clever approach in the next version. The only way for now is to use\n  a Switch node.\n\n\n## Version 1.1.0\n\n- Fix stability of the software as a whole. This build has been reported to be robust to several hours of work.\n- The tracker node can now be offset to track elements that go beyond the bounds of the image\n- The roto node interaction has been improved:\n- The composing of selection is now easier:\n    - A new button can now toggle on/off the click capture of the bounding box of selected points\n    - The smooth/cusp options are now applied with smaller steps and depending of the zoom factor\n    - A simple left click is required to cycle through tool buttons and a right click to open the menu\n    - A new button in the settings panel allows one to clear the animation of the selected Beziers\n    - Only the keyframes of the selected shapes are now displayed on the timeline instead of all shapes keyframes\n- CurveEditor: added a filter to display only nodes containing the filter\n- CurveEditor: double-clicking the item of a node will open the settings panel much like a double-click in the NodeGraph does\n- The interpolation submenu of the animation menu of the parameter is working again\n- A simple click on an arrow of the node graph no longer disconnects nodes to prevent mistakes, instead now, to disconnect only with a simple click it is required to hold the control modifier.\n- Playback: The behaviour when using multiple viewers is now much more logical: all viewers are kept in sync and follow the frame range of the viewer that started the playback. The frame range is now per viewer.\n- The frame range is now a property of the project: Each time a Reader node the frame range of the project is unioned with the frame range of the sequence read (unless the Lock range parameter is checked). New viewers that have their frame range untouched will use the project frame range by default.\n- New nodes: Add, Multiply, Gamma, ColorConvert, SharpenInvDiff, SharpenShock\n\n\n## Version 1.0.0\n\n- Transform effects (such as Transform, CornerPin, Dot, Switch) now concatenates: the filtering\nis now only applied by the \"bottom\" node of the transform chain. For example if 2\nTransform nodes are setup one after another, the first with a scale of 0.1 and the second\nwith a scale of 10 then only the downstream node will be rendered with a scale of 1.\n- The font of the application and its size are now customizable in the preferences, however a change to these settings requires a restart of Natron. The new default font is \"Muli\": https://www.google.com/fonts/specimen/Muli\n- We slightly adjusted how caching works in Natron which should globally make the software much faster. Previous versions of Natron had what's called an \"Agressive caching\" behaviour: every image of every node was cached in RAM, resulting in heavy memory usage and sometimes degraded performances. The new default behaviour is to cache the output of a node only if:\n    * Several outputs are connected to this node\n    * The node has a single output, but that output has its settings panel opened (Meaning the user is heavily editing the output effect and would like the input branch being in the cache)\n    * The node has its preview image enabled (in interactive session only)\n    * The node is using several images at different times to compute the result of the output (e.g. a retimer node)\n    * The parameter \"Force caching\" in the \"Node\" tab of the settings panel is checked\nAggressive caching can however make the interactivity of Natron slightly faster (when using it in GUI mode) but would not be any useful in background render mode, so make sure it is checked off when rendering on disk.\nYou can by-pass this behaviour and come-back to the original \"Aggressive caching\" solution by turning it on in the Preferences of Natron. At least 8GiB of RAM are required to use aggressive caching, 16GiB  are recommended.\n- New HSVTool node to adjust hue, saturation and brightnes, or perform color replacement.\n- New HSVToRGB & RGBToHSV nodes to convert between these 2 color-spaces\n- New Saturation node to modify the color saturation of an image.\n- New DiskCache node. This node allows one to cache a branch of the compositing tree to re-use it later on without re-computing the images. This cache is persistent on disk and is saved between 2 runs of Natron. You can configure the location and maximum size of the cache in the preferences of Natron; in the Cache tab.\n- A new progress bar will display the progression while loading a project\n- When zooming out of the node-graph, all texts on nodes / arrows will be hidden to increase performances when handling huge compositions.\n- Tracker: all tracks are now multi-threaded for better performances. Also fixed a bug where the overlay displayed while tracking wasn't matching the underlying displayed image.\n- Roto: Selected points can now be dragged from everywhere within the bounding box instead of only the cross-hair.\n- Roto: It is now possible to move a Bezier just by dragging a part of the curve where there is no control point.\n- Roto: Holding shift while dragging a scale handle of the bounding box will now scale only the half of the shape on the side of the handle\n- Improved parameters alignment and spacing in the settings panel\n- A new tab in the preferences is now dedicated to plug-ins management. You can now choose to enable/disable a plug-in. This can be seen as a blacklist of the plug-ins you don't want to use. By default most TuttleOFX nodes that are redundant with the bundled nodes will be disabled.\n- Also another per plug-in control has been added to regulate whether the a plug-in should be aware of zoom levels or not. Zoom level aware means that a plug-in will attempt to render images at lower resolution if the viewer is zoomed-out or if proxy mode is enabled. This setting is set by the plug-in internally, but some plug-ins are known to be bugged (they flag that do support zoom levels but in fact they don't).\n- A new changelog tab in the About window is now available\n- Roto: When restoring a project, the default tool will be \"Select All\" instead of \"Bezier\"\nto avoid creating new beziers by mistake\n- Timeline: when pressing the left and right arrows of the keyboard, the cursor will no longer cross the bounds of the timeline but loop over the range instead.\n- Viewer: the drop-down to select the currently visualized channels now reflects the current choice with a specific border color for each options.\n- A new Auto-turbo setting has been added: when enabled, the Turbo-mode (originally toggleable with the button on the right of the media player) will be enabled/disabled automatically when playback is started/finished. You can turn on/off this preference in the settings (NodeGraph tab) or in the right click menu of the node-graph.\n- Transform: When holding down the SHIFT modifier and controlling the translate handle on the viewer, the direction will be constrained to either the X or  Y axis.\n- Fixed a crash on windows when connecting nodes\n- Fixed a bug on windows where the properties pane would overlap the viewer if placed below it\n- Fixed a bug where the locale won't be taken into account and files with accents wouldn't be correctly displayed in the file dialog\n- Viewer: fixed a bug when the \"Auto-wipe\" preferences in the settings was disabled. The wipe would still show up automatically.\n- Fixed a bug where the extra OpenFX plug-ins search paths would be ignored\n- Backdrop: only move nodes which are initially within the backdrop, not the ones that are crossed when moving it.\n- Nodegraph: zooming is now done under the mouse cursor\n- Readers: when a file changes externally, don't reload it automatically, instead a warning is displayed on the viewer and it is up to the user to reload it with the button created specifically\nfor the occasion. The warning notification can be disabled in the preferences of Natron. The tooltip of the field with the filename now indicates the last modification date of the file.\n\n\n## Version 1.0.0rc3\n\n- The internal renderer now estimates the amount of RAM needed by a compositing tree to render out a single frame and will thus limit the number of parallel renders so that all parallel renders can fit in RAM if possible. Before this change the renderer would only take into account CPU load which would seriously slow down computers without enough RAM to support all the CPU power available.\n- Focus has been re-worked through all the interface so the focus switches correctly among the widgets when pressing Tab. Drop-downs can now get the focus so the user can\nscroll the items by pressing the up/down arrows. Checkbox can now also have focus and you can check/uncheck them by pressing the space bar. Left toolbar buttons also get the focus and you can expand them by pressing the right arrow.\n- Added possibility to move the timeline from anywhere in the interface, assuming the widget your mouse is currently hovering doesn't interpret those key-binds for another functionality.\n- Focus is now indicated by a orange border around the widget that currently owns it.\n- The node-graph navigator has been speeded-up, there was a bug where everything was rendered twice.\n- A new button in the settings panel of a node can now hide all parameters that do not have any modification.\n- It is now possible to close a settings panel by pressing the Escape key when hovering it\n- When double-clicking a backdrop node and holding down the control key, this will clear all settings panel currently opened in the properties bin, and open the panels of all the nodes within the backdrop.\n- It is now possible to zoom the range of a slider around the current position by holding certain modifiers: Hold CTRL to zoom-in x10, hold CTRL + SHIFT to zoom-in x100. This can help adjusting precisely a parameter value\n- It is now possible to extract one or more nodes from the graph by pressing CTRL + SHIFT + X or via the right click menu. This will keep the connections between all extracted nodes but remove them from the surrounding tree and shift them by 200 pixels on the right.\n- It is now possible to merge 2 nodes (with a MergeOFX node) by holding CTRL + SHIFT and moving a node close to another one. The bounding box of both nodes should be green, indicating that a merge is possible.\n- A new Info tab on each node now contains information about the format of images coming from each input and out-going from the node. This can help understand what data is really processed under the hood.\n- New shortcut to set the zoom level of the viewer to 100% (CTRL + 1)\n- New shortcut to toggle preview images for selected nodes: ALT + P\n- Added the possibility to edit node names in the node graph by pressing the key N\n- The backdrop node now has its name in the header affected by the font family and color. However the size of the name is controlled by a different parameter so the name and the content can have different font sizes.\n- Roto: when selecting points with the selection rectangle, only points that belong to selected curves will be eligible for selection, unless no curve is selected, in which case all the points are eligible.\n- Roto : when selecting points with the selection rectangle, if the SHIFT modifier is held down, it will not clear the previous selection. Also when holding down SHIFT, clicking on a selected point will remove it from the selection. Similarly, if selecting points with the selection rectangle but while holding down both SHIFT and CTRL will now allow one to keep the previous selection but remove from the selection the newly selected points.\n- Roto : the beziers animation can now be controlled in the curve editor, as well as the per-shape parameters.\n- The ColorCorrect and Grade nodes can now choose on which channels to operate on, including the alpha channel\n- The viewer info bar font has been changed to the same font of the rest of the application and a line of 1 pixel now separates the Viewer from the information.\n- The viewer refresh button will now be red when it is actively rendering (not using the cache).\n- The turbo-mode button is now next to the FPS box of the viewer’s player bar instead of being on top of the properties bin.\n- The paste/duplicate/clone nodes operations now position new nodes under the mouse cursor.\n- The D (for disabling nodes) and CTRL+F (for finding nodes) shortcuts are now available across the UI. The same thing was applied for timeline interaction (such as seek next/previous/start/end,etc…) wherever it was possible.\n- New Blender OpenColorIO-Config which is now the default one instead of nuke-default. Warning dialogs will show up if the current configuration is not the default one.\n- New OCIOLook node to apply a look to the image. This node uses the 67 looks provided by the Blender OpenColorIO config.\n- New luma Keyer node\n- New ramp node\n- New BlurGuided node using the CImg library. This is a faster bilateral blur\n- New AdjustRoD node to enlarge/shrink the region of definition (bounding box) of an image\n- A new button on the Transform node allows one to recenter the handle to the center of the input image.\n- The project can now be versioned by pressing CTRL + ALT + SHIFT + S (or by the File menu). This will save the project and increment its version, e.g.:\n  - MyProject_001.ntp\n  - MyProject_002.ntp\n  - ...\n- The Tab dialog to create quickly a node now remembers the name of the last node that was created\n- A BlurCImg node can now be created using the B key\n- The right click menu of parameters now proposes 2 options for keyframes operations such as set key, remove key or remove animation. It can operate on either 1 dimension at a time or all dimensions at the same time.\n\n### Bug fixes\n\n- The tracker node now once again works on Windows.\n- Fixed a bug where color dialogs wouldn't refresh the color until the OK button was pressed\n- Fixed a bug where the bounding box of the image wasn't correct when using motion blur of the Transform node.\n- Fixed a bug where the bounding box of roto beziers wouldn't take the feather distance into account.\n- Fixed a bug where changing the number of panels in the property bin wouldn't have any effect\n- Fixed a bug where CImg channels parameter wouldn't be saved into the project\n- The ColorLookUp node’s curve editor now properly gets keyboard focus\n\n\n## Version 1.0.0rc2\n\n- New nodes using the CImg library :\n  - Blur\n  - Dilate\n  - Erode\n  - Bilateral\n  - Noise\n  - Denoise\n  - Plasma\n  - Smooth\n  - Equalize\n  - New Clamp node\n- Re-written internal rendering engine. It now uses CPU at almost 100%. The default settings\nin the preferences are set to tune the render engine for basic usage and are optimal\nfor a station with 8 cores. Some tuning may be needed for stations with huge number of cores\n(24, 32...).\n- Here's a description of the new settings controlling the multi-threading in Natron, use it wisely:\n  - Number of render threads: This will limit the number of threads used by any rendering globally. By default this will use the number of cores of your CPU, indicated by the value 0.\n  - Number of parallel renders: New in RC2, Natron now parallelise the rendering of frames by rendering ahead during playback or rendering on disk.  By default this is adjusted automatically and synchronised with the Number of render threads parameter so that it never exceeds the CPU maximum number of cores. Setting a value different than 0, will set the number of frames that will be computed at the same time.\n  - Effect use thread-pool: New in RC2, Natron uses internally what is called a thread-pool to manage all the multi-threading and to ensure we never overload the CPU. This is a very efficient technology to avoid the system to spend to much time in scheduling threads by recycling threads. Unfortunately, some plug-ins expect threads to be fresh and new before they start rendering and using the application's thread-pool will make them unstable. In particular all plug-ins of The Foundry Furnace product seems to crash if used in a thread-pool environment. We recommend to uncheck this setting before using any of The Foundry Furnace plug-in. Natron will warn you if the setting is checked and you attempt to use any of The Foundry Furnace plug-in.\n  - Max threads usable per effect: New in RC2, this controls how many threads a single node can use to render an image. By default the value internally is set to 4 if you select 0. Beyond that value we observed degraded performance because the system spends most of its time scheduling the threads rather than doing the actual processing. You may however set the value as you wish for convenience.\n- The background renderer can now take an optional frame range in parameter with the following syntax:\n  - NatronRenderer —w MyFirstWriter 10-40 -w MySecondWriter MyProject.ntp\n  - If no frame range is specified, the whole frame range specified by the node will be rendered.\n- The setting \"Render in a separate process\" is now off by default as it seems that rendering live is always a little bit faster due to the setup time of the second process.\n- RGBLut plug-in has been renamed to ColorLookUp and now allows arbitrary input values range (instead of clamping input values to 0-1) and can now clamp output values with specific parameters (Clamp black/Clamp white). The curves can now be constrained to move either in X or Y direction by holding the control key.\n- The keyframes in the curve editor and in the ColorLookUp plug-in can now have their value set by double clicking on their text. This also applies to the derivatives.\n- Fixed the file dialog by changing radically its implementation making it faster and more reliable.\n- Added a new Find node dialog that is accessible by pressing CTRL-F in the node graph or by the right click menu\n- Natron will read correctly the pixel aspect ratio of the images and display them correctly. Due to an OpenFX limitation, if several images in a sequence don't have the same pixel aspect ratio, only the pixel aspect ratio of the first image in the sequence will be taken into account. This cannot be dynamic.\n- When reading RGB opaque images, and using them as RGBA, Natron will set the alpha channel to 0 to match what other compositing software does. In some rare cases there might be issues with premultiplication state in some filter plug-ins. In particular the unpremult parameter of the filter nodes (such as Grade) will be checked and can cause a black image. If you really do not want to have support for RGB images, you can disable RGB support in the General preferences of Natron.\n- Roto node will now output RGBA data by default. You can switch it to Alpha only when editing masks for maximum efficiency.\n- Interface clean-up: We adjusted all drop-down menus so that they look more consistent  with the rest of the interface and on Windows the menu bar has also been redesigned.\n- You can now click in the navigator window of the node graph to move the center the node graph on a position\n- MacOSX retina displays are not supported yet (icons needs to be all reshaped) hence we disabled high DPI support when Natron is used on a mac.\n- Adjusted slightly the ReadFFMPEG node to be more tolerant with files that may have failed to be read in the past.\n- Fixed a few bugs with project paths\n- The user can now simplify a project path or make it relative or absolute by right clicking any\nfilepath parameter.\n- Fixed a few bugs with the render progression report\n- Copy/Paste of a node will use an index-based copy differentiation instead of an incremental number of \"- copy\" appended to the original node name. For example: \"Blur\" \"Blur.1\" \"Blur.2\", etc...\n- The project now contains more information visible in the Infos tab of the project settings. In particular, we added the following:\n  - Original author name (the person who created the project) (read-only)\n  - Last author name (the person who last saved this project) (read-only)\n  - Creation date (read-only)\n  - Last save date (read-only)\n- Added a comments area where you can write anything the user might want to write. For example it can be used to add the license of the project, give a description of what it does, etc...\n- The viewer FPS is now properly saved into the project file.\n- Natron is now more flexible for plug-ins that do not respect entirely the OpenFX\nspecification so that more plug-ins can be used in Natron. In particular you can now\nuse the TuttleHistogramKeyer node.\n\n\n## Version 1.0.0rc1\n\n- New ResizeOIIO node to reformat footage. It internally uses the OpenImageIO library and offers numerous optimized filters. One should prefer Lanczos filter for downscaling and Blackman-harris filter for upscaling.\n- New ColorMatrix node to apply a matrix to colors\n- New TextOIIO node to render some text. The node is not finished and you currently have to set the name of a system font yourself. We will try to improve the node later on and propose more options.\n- Rework of all the alpha premultiplication state of the workflow in Natron:\n  1. All readers now have a \"Premultiplied\" choice, that is automatically set to what's found in the image file header. However some images are badly encoded and say they are not premultiplied but in fact they are and vice versa. To overcome the issue, the user can still modify the parameter if it is obviously wrong. You can assume that *readers always output alpha premultiplied images* (or opaque)!\n  2. Writers have the same parameter and work kind of the same way: It detects what's the pre-multiplication state of the input-stream and set automatically the value it has found. However, again it can be wrong, so the user is free to modify the parameter.\n  3. Readers output pixel components can now be specified. They will be set by default when loading and image, but the user can control it.\n- Writers can now choose the format to render\n- New node-graph bird view, though you cannot interact with it yet.\n- New \"turbo-mode\": when enabled nothing but the viewer will be refreshed during playback for maximum efficiency. Mainly this overcomes the issue that all parameters animation refresh can be expensive during playback.\n- New checkerboard mode for the viewer: when checked, everything transparent in the image will have a checkerboard behind. This can enable you to better appreciate transparency. You can control the color of the checkerboard and its size in Natron's preferences.\n- Project paths: The project can now have path variables that allows you to express file paths relative to a variable instead of always using absolute file paths. This is great for sharing work with others and/or moving image files safely.By default there is always the variable [Project] that will be set to the location of your project file (.ntp).\n- Project paths are to be used between brackets, e.g.:\n  - [MyPath]myImage.png\n- You can also express files in a relative manner to a variable, e.g.:\n  - [MyPath]../../Images/myImage.png\n- By default if you don't specify any project path but express the file in a relative manner, it will be understood as being relative to the [Project] path. For example, if [Project] is:\n`/Users/Me/Project/`\nThen\n`../Images/Pictures/img.png`\nwould in fact expand to: `/Users/Me/Images/Pictures/img.png`\nYou can also have some project paths depending on other paths, e.g.:\n```\n[Project] = /Users/Me/Project/\n[Scene1] = [Project]Footage/Scene1/\n[Shot1] = [Scene1]001/\n```\nIf you're using project paths, be sure to use them at the start of the file-path and no where else. For example\n`C:\\Lalala[Images]Images.png` would not be interpreted correctly.\nLastly, in the preferences of Natron there is an option in the General tab (disabled by default) to auto-fix file paths when you change the content of a project path or the variable name.\nFor example if you change\n`[Project] = /Users/Me/Project/`\nto\n`[Project] = /Users/Me/MySuperProject/`\nThen all file-paths that depended on this variable will be updated to point to the correct location of the file.\n- File-paths are now \"watched\" by Natron: When a file changes outside of Natron, for example because another software have overwritten it or modified it, Natron will be notified and will reload the images.\n- New shortcuts editor: you can now customise the entire keyboard layout for the application.\n- Caching has been improved and should now be more aware of your system capabilities. It should strive for being as close possible to what the settings in the preferences are set to. Note that it might still need some tweeking on some platforms though because we're using system-dependents information to make the Cache work.\n- You can now add control points/keyframes to curves by double-clicking on them. However, it doesn't apply for the Roto beziers.\n- File dialog speed has been increased drastically\n- ReadFFMPEG: improve stability a lot\n- Parameters links and expressions are now displayed in the nodegraph (you can disable them in the right click menu).\n- File Dialog: New preview viewer that allows you to visualise quickly what the selected image file/sequence corresponds to.\n- Saving application's layout: You can now import/export the application's layout in the Layout menu. You can also change the default layout by setting the parameter in the preferences to point to a valid natron's layout file (.nl).\n- Node presets: You can now import/export node presets. You can then re-use any configuration on any other project and share it with others.\n- The command line renderer is back! You can pass it a project filename in arguments and render with it. For the final release we will also add the possibility to set a frame range for a writer.\n- TrackerNode: more export modes: basically we added the possibility to export to a CornerPin where the \"to\" points would be linked against the tracks. We also added a stabilise mode which is in fact just a regular export to CornerPin with the \"Invert\" parameter of the CornerPin checked.\n- Undo/Redo support was added for restoring default parameters\n- The \"link to...\" dialog for parameters have been re-designed for a better user interface\n- The \"Tab\" menu to quickly create a node has been slightly adjusted: you can now type in\nanything any word , e.g. \"Blur\" and it will propose all types of Blurs.\n- Value parameters can now have their increment based on where the mouse cursor is\n- New nodes menu icons were made by Jean Christophe Levet.\n\n\n## Version 0.96\n\n- Roto can now output RGBA colors and all beziers have a blending mode. It is now easier to layer your work within the same roto node.\n- New Dot node to break connections and make cleaner graphs\n- New OCIOCDLTransform to apply an ASC Color decision list, it also supports the .ccc (Color correction collection) or .cc (Color correction) file formats.\n- New OCIOFileTransform to apply a transform from a given file. Supported formats:\n  - .3dl (flame or lustre)\n  - .ccc (color correction collection)\n  - .cc (color correction)\n  - .csp (cinespace)\n  - .lut (houdini)\n  - .itx (iridas_itx)\n  - .cube (iridas_cube)\n  - .look (iridas_look)\n  - .mga (pandora_mga)\n  - .m3d (pandora_m3d)\n  - .spi1d (spi1d)\n  - .spi3d (spi3d)\n  - .spimtx (spimtx)\n  - .cub (truelight)\n  - .vf (nukevf)\n- Natron now includes Aces 0.7.1 OpenColorIO profiles\n- Can now read multilayer/multiview images using ReadOIIO (the standard image reader plugin in Natron) for formats that support it (such as OpenEXR or Photoshop PSD). ReadOIIO now lets you select the layer/view/channel for each output component.\n- Multiple nodes can now be selected/edited in the nodegraph at the same time. Hold CTRL-A to select all nodes, CTRL-SHIFT-A to select only visible nodes in the visible portion\n- The “Tab” shortcut menu is now more intuitive and easy to use\n- New shortcuts to create basic nodes: - O : Roto - C : ColorCorrect - G : Grade - T : Transform - M : Merge\n- In addition the “L” shortcut allows you to rearrange automatically the layout of the selected nodes.\n- New Tracker node: 4 different algorithms can be used to track points. Tracks can be created and controlled directly from the Viewer. You can then export the results in a CornerPin node. (Transform export will be included later).\n- In addition for convenience you can also link the control points of the Roto splines directly to a given track. The tracker nodes accepts a mask in input: When tracking points inside a roto shape, plug that same shape as a mask of the tracker to help the tracker giving better results.\n- The cache has been greatly improved so it is more clever with the usage of the memory and can be cleared totally using the menu option.\n- The green-line on the timeline now has 2 different colours:\n- Dark green meaning that the frame is cached on the disk\n- Bright green meaning that the frame is present in memory (RAM) New tools icons in the interface (thanks to Jean Christophe Levet) Combobox (Choice) parameters now display in their tooltip the help for all the choices so it is easier to understand the parameter than to cycle through all the list 1 by 1\n- Fixed multiple bugs in the curve editor that prevented to select and move several keyframes\n- Fixed a bug where some image sequences wouldn’t be recognised correctly\n- Fixed stability of the software across the board\n- Improved the efficiency of the rendering engine across the board, making it faster and more robust to some rare configurations\n- Linux builds now offer a complete installer and maintenance tools allowing to install/uninstall/update the software easily (thanks to Ole Andre)\n- Linux 32 bit platforms are now also officially supported.\n\n\n## Version 0.95\n\n- This was shortly after 0.94 but we needed to deploy various fixes to the major bugs that were mainly impairing usability of the software on Linux distributions.\n- This is a minor patch but it makes Natron much more stable than in 0.94.\n- New setting in the preferences to allow Natron to only render once you finish editing a parameter/slider/curve\n- New right click menu for roto splines/control points\n- The RGBLut node now has a master curve and an alpha curve\n- New shift-X shortcut on nodes to quickly switch their input A and B\n- The project loader is now more flexible and will still try load a project even if it detects some incompatibilities or corrupted file.\n- Fixed a bug in the render engine which would cause a freeze of the application.\n- Fixed a bug where images from the cache wouldn't go away\n- Fixed multiple crashs on exit\n- Fixed compatibility with Qt4 on Linux (this bug was not Linux specific but only noticed on this platform).\n- Fixed a bug with the colour parameters that would not provide to the plug-in the correct values.\n- Fixed a bug in the Transform interact that would arise when the user would be zoomed in\n- Fixed a bug where the background renderer would crash\n- Improved performance in the refreshing of the graphical user interface of the parameters, it should increase the performances of Natron across the board.\n\n\n## Version 0.94\n\n- Windows users are now proposed a regular installer and double clicking .ntp projects icons will now open them within Natron.\n- New premult and unpremult nodes.\n- The cache received some enhancements, as a result of it Natron should consume less memory. This should also speed up the rendering engine as a whole. Rendering complex graphs of 4K sequences should now almost always fit in the cache size limit and be faster.\n- Nodes now have a color according to their role (Channel processing, Color processing, Filter, Merge, etc...)\n- The roto points can now be moved with the keyboard arrows by a constant size depending on the viewport scale factor.\n- The color picker on the viewer will now show pixel components according to the components present in the image being viewed.\n- Added a setting in the preferences panel allowing to change the application's name as seen by the OpenFX plug-ins. This can help loading plug-ins that wouldn't load otherwise because they restrict their usage to specific applications.\n- Invert/Transform/CornerPin/Merge nodes can now invert their mask\n- Holding control while moving a backdrop now allows one to move only the backdrop without moving the nodes within it.\n- Connecting a viewer to the selected node using the 1,2,3,4... shortcuts will now select back the viewer afterwards so that the user doesn't have to deselect the node to switch quickly between inputs.\n\n### Bug fixes\n\n- Fixed preview images rendering\n- Fixed a bug where the curves in the RGBLut plug-in would not allow one to move the control points in more than 1 direction at a time.\n- Fixed a crash that would occur when drag&dropping images within Natron. The same bug would also make Natron crash in some other cases.\n- Fixed a bug where inverting alpha channel would not work\n- Fixed bugs where timeline keyframe markers wouldn't reflect the actual keyframes\n- Fixed the cache green line on the timeline so it is more in-line with what really is in the cache.\n- Fixed a bug in the color correct node where the saturation would not be applied correctly\n- Fixed a bug in the transform/corner pin nodes that wouldn't work when proxy mode would be activated.\n- Fixed the ReadFFMPEG node as a whole, it should now work properly.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.1982421875,
          "content": "# ***** BEGIN LICENSE BLOCK *****\n# This file is part of Natron <https://natrongithub.github.io/>,\n# (C) 2018-2023 The Natron developers\n# (C) 2013-2018 INRIA and Alexandre Gauthier-Foichat\n#\n# Natron is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Natron is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>\n# ***** END LICENSE BLOCK *****\n\ncmake_minimum_required(VERSION 3.16.7)\n\nproject(Natron\n    VERSION \"2.6.0\"\n    DESCRIPTION \"Open Source Compositing Software\"\n    HOMEPAGE_URL \"https://natrongithub.github.io/\"\n    LANGUAGES CXX C\n)\n\nset(CMAKE_CXX_STANDARD 17)\n\ninclude(GNUInstallDirs)\n\noption(NATRON_QT6 \"use Qt6\" OFF)\noption(NATRON_SYSTEM_LIBS \"use system versions of dependencies instead of bundled ones\" OFF)\noption(NATRON_BUILD_TESTS \"build the Natron test suite\" ON)\n\nset(IS_DEBUG_BUILD OFF)\nif(CMAKE_BUILD_TYPE MATCHES \"^(debug|Debug|DEBUG)$\")\n    set(IS_DEBUG_BUILD ON)\n    add_definitions(-DDEBUG)\n\n    if(WIN32)\n        # Debug builds need minimal optimizations to avoid excessive link times and link errors related to Eigen.\n        add_compile_options(-O)\n    endif()\nelse()\n    add_definitions(-DQT_NO_DEBUG_OUTPUT)\nendif()\n\nif(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL \"\")\n    set(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \"Choose the type of build.\" FORCE)\n    message(STATUS \"Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified.\")\nendif()\n\nfind_package(Boost COMPONENTS headers serialization CONFIG)\nif(WIN32)\n    # Prevent looking in the registry so that the MinGW python can be found.\n    set(Python3_FIND_REGISTRY NEVER)\nendif()\nfind_package(Python3 COMPONENTS Interpreter Development)\n\nif(IS_DEBUG_BUILD AND WIN32)\n    # Explicitly setting SHIBOKEN_PYTHON_LIBRARIES variable to avoid PYTHON_DEBUG_LIBRARY-NOTFOUND\n    # link errors on Windows debug builds.\n    set(SHIBOKEN_PYTHON_LIBRARIES ${Python3_LIBRARIES})\nendif()\n\nset(QT_COMPONENTS Core Gui Network Widgets Concurrent)\nif(NATRON_QT6)\n    list(APPEND QT_COMPONENTS OpenGLWidgets)\n    find_package(Qt6 6.3 CONFIG REQUIRED COMPONENTS ${QT_COMPONENTS})\n    find_package(Shiboken6 6.3 CONFIG REQUIRED COMPONENTS libshiboken6)\n    find_package(Shiboken6Tools 6.3 CONFIG REQUIRED COMPONENTS shiboken6)\n    find_package(PySide6 6.3 CONFIG REQUIRED COMPONENTS pyside6)\n    set(QT_VERSION_MAJOR 6)\n    set(PYSIDE_VERSION_MAJOR 6)\n\n    get_target_property(PYSIDE_INCLUDE_DIRS PySide6::pyside6 INTERFACE_INCLUDE_DIRECTORIES)\n    set(QTCORE_INCLUDE_DIRS ${Qt6Core_INCLUDE_DIRS})\n    set(QTGUI_INCLUDE_DIRS ${Qt6Gui_INCLUDE_DIRS})\n    set(QTWIDGETS_INCLUDE_DIRS ${Qt6Widgets_INCLUDE_DIRS})\n\n    set(SHIBOKEN_EXE Shiboken6::shiboken6)\n    set(SHIBOKEN_LIB Shiboken6::libshiboken)\n    set(PYSIDE_LIB PySide6::pyside6)\nelse()\n    find_package(Qt5 5.15 CONFIG REQUIRED COMPONENTS ${QT_COMPONENTS})\n    find_package(Shiboken2 5.15 CONFIG REQUIRED COMPONENTS libshiboken2 shiboken2)\n\n    find_package(PySide2 5.15 CONFIG REQUIRED COMPONENTS pyside2)\n    set(QT_VERSION_MAJOR 5)\n    set(PYSIDE_VERSION_MAJOR 2)\n\n    get_target_property(PYSIDE_INCLUDE_DIRS PySide2::pyside2 INTERFACE_INCLUDE_DIRECTORIES)\n    set(QTCORE_INCLUDE_DIRS ${Qt5Core_INCLUDE_DIRS})\n    set(QTGUI_INCLUDE_DIRS ${Qt5Gui_INCLUDE_DIRS})\n    set(QTWIDGETS_INCLUDE_DIRS ${Qt5Widgets_INCLUDE_DIRS})\n\n    set(SHIBOKEN_EXE Shiboken2::shiboken2)\n    set(SHIBOKEN_LIB Shiboken2::libshiboken)\n    set(PYSIDE_LIB PySide2::pyside2)\nendif()\n\nif(IS_DEBUG_BUILD AND WIN32)\n    # Remove NDEBUG from Shiboken INTERFACE_COMPILE_DEFINITIONS so it is not inherited in debug builds.\n    get_property(SHIBOKEN_DEFS TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS)\n    list(REMOVE_ITEM SHIBOKEN_DEFS NDEBUG)\n    set_property(TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS SHIBOKEN_DEFS)\nendif()\n\n#Since in Natron and OpenFX all strings are supposed UTF-8 and that the constructor\n#for QString(const char*) assumes ASCII strings, we may run into troubles\nadd_compile_definitions(QT_NO_CAST_FROM_ASCII)\n\nif (MSVC)\n    # Allow __cplusplus to properly reflect the c++ standard version.\n    add_compile_options(/Zc:__cplusplus)\n    add_compile_definitions(__STDC_LIMIT_MACROS WIN32_LEAN_AND_MEAN _USE_MATH_DEFINES)\nelse()\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wmissing-prototypes\" )\n    add_compile_options(-Wall -Wextra -Wmissing-declarations -Wno-multichar -Winit-self -Wno-long-long\n                        -Wvla -Wdate-time -Wno-format-overflow -Wno-deprecated-copy)\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n        add_compile_options(-Wshift-overflow=2 -Wduplicated-cond -Wno-stringop-overflow)\n    endif()\nendif()\n\nif(NATRON_SYSTEM_LIBS)\n    find_package(glog)\n    find_package(Ceres)\nendif()\n\nif(UNIX AND NOT APPLE)\n    find_package(ECM NO_MODULE)\n    set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_MODULE_PATH})\n    find_package(X11 REQUIRED)\n    find_package(Wayland COMPONENTS Client Egl)\nelseif(APPLE)\n    enable_language(OBJCXX)\nelseif(WIN32)\n    enable_language(RC)\n    add_compile_definitions(WINDOWS WIN32 _UNICODE UNICODE NOMINMAX QHTTP_SERVER_STATIC)\n    add_compile_definitions(COMPILED_FROM_DSP XML_STATIC) # for expat\n    if (NOT MSVC)\n        add_compile_options(-municode)\n        if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n            add_compile_options(-mwindows -mthreads)\n        endif()\n        add_link_options(-mwindows -municode)\n        set(CMAKE_RC_COMPILER_INIT windres)\n        set(CMAKE_RC_COMPILE_OBJECT\n            \"<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>\")\n    endif()\nendif()\n\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\n\nenable_testing()\n\nadd_subdirectory(libs)\n\nadd_subdirectory(HostSupport)\n\nadd_subdirectory(Engine)\n\nadd_subdirectory(PythonBin)\n\nadd_subdirectory(Renderer)\n\nadd_subdirectory(Gui)\n\nif(NATRON_BUILD_TESTS)\n    add_subdirectory(Tests)\nendif()\n\nadd_subdirectory(App)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.294921875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [INSERT EMAIL ADDRESS]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.0693359375,
          "content": "Contributing to Natron\n======================\n\nCode contributions to Natron are always welcome. That's a big part of\nwhy it's an open source project. Please review this document to get a\nbriefing on our process.\n\nCode of Conduct\n---------------\n\nBy contributing to Natron and the open source software projects managed\nwithin the [Natron organization on GitHub](https://github.com/NatronGitHub),\nyou agree to follow the [Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/version/1/4/code-of-conduct).\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n\nBug Reports and Issue Tracking\n------------------------------\n\nWe use GitHub's issue tracking system for bugs and enhancements:\nhttps://github.com/NatronGitHub/Natron/issues\n\n**If you are merely asking a question (\"how do I...\")**, please do not file an\nissue, but instead ask the question on the [forum](https://discuss.pixls.us/c/software/natron).\n\nIf you are submitting a bug report, please be sure to note which version of\nNatron you are using, and on what platform (OS/version).\n\nPlease give an account of\n\n* what you tried\n* what happened\n* what you expected to happen instead\n\nwith enough detail that others can reproduce the problem.\n\n\nContributions Under Repository License\n--------------------------------------\n\nWhenever you make a contribution to a repository containing notice of a [license](https://github.com/NatronGitHub/Natron/blob/RB-2.4/LICENSE.txt), you license your contribution under the same terms, and you agree that you have the right to license your contribution under those terms.\n\nPull Requests and Code Review\n-----------------------------\n\nThe best way to submit changes is via GitHub Pull Request.\n\nAll code must be formally reviewed before being merged into the official repository. The protocol is like this:\n\n1. Get a GitHub account, fork NatronGitHub/Natron to create your own repository on GitHub, and then clone it to get a repository on your local machine.\n\n2. Edit, compile, and test your changes.\n\n3. Push your changes to your fork (each unrelated pull request to a separate\n\"topic branch\", please).\n\n4. Make a \"pull request\" on GitHub for your patch, use the \"master\" branch.\n\n5. If your patch will induce a major compatibility break, or has a design\ncomponent that deserves extended discussion or debate among the wider Natron\ncommunity, then it may be prudent to make a post on our [forum](https://discuss.pixls.us/c/software/natron) pointing everybody to\nthe pull request URL and discussing any issues you think are important.\n\n6. The reviewer will look over the code and critique on the \"comments\" area,\nor discuss in email/forum. Reviewers may ask for changes, explain problems they\nfound, congratulate the author on a clever solution, etc. Please don't take it hard if your\nfirst try is not accepted. It happens to all of us.\n\n7. After approval, one of the senior developers (with commit approval to the official main repository) will merge your fixes into the \"master\" branch.\n\n\nCoding Style\n------------\n\nThere are two overarching rules:\n\n1. When making changes, conform to the style and conventions of the\nsurrounding code. Do not modify spacing, indentation, or symbol names\nif there is no change to the underlying code.\n\n2. Strive for clarity, even if that means occasionally breaking the\nguidelines. Use your head and ask for advice if your common sense seems to\ndisagree with the conventions.\n\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 1.548828125,
          "content": "Version 2.x:\n-----------\n\n#Developers:\n\nFrédéric Devernay <devernay@github>\nAlexandre Gauthier-Foichat <MrKepzie@github>\nOle-André Rodlie <rodlie@github>\nAxel Airo-Farulla  <Eaknyt@github>\nYves Lefebvre <Ivanohe73@github>\nJonathan Hearn <splidje@github>\nMartin Reboredo <YakoYakoYokuYoku@github>\nAaron Colwell <acolwell@github>\n\n#Artists:\n\nJean-Christophe Levet (icons + logo + splashscreen + UI design)\n\n#Packaging:\n\nAlexandre Gauthier-Foichat <MrKepzie@github> (Linux & Windows & OSX)\nOle-André Rodlie <rodlie@github> (Linux & Windows)\nFrédéric Devernay <devernay@github> (OSX)\n\n#Testing (not everyone listed):\n\nOmar Brown <blackearth2014@github>\nOle-André Rodlie <rodlie@github>\nFrançois \"CoyHot\" Grassard <Francois-Grassard@github>\nFrancesco Paglia <fPaglia@github>\nrcspam <rcspam@github>\nJean-Christophe Levet\n\n#Documentation (not everyone listed):\n\nMarc-André Gasser <magdesign@github>\nMartin Constable\nAlexandre Bon <bonalex01dev@github>\nOmar Brown <blackearth2014@github>\n\n\nVersion 1.0:\n-----------\n\n#Developers:\n\nFrédéric Devernay <devernay@github>\nAlexandre Gauthier-Foichat <MrKepzie@github>\n\n#Artists:\n\nLaurence Boissieux (old icons + old splashscreen)\nBianca Ilaria Coniglione (icons + old logo)\nJean-Christophe Levet (icons + logo + splashscreen)\n\n#Packaging:\n\nAlexandre Gauthier-Foichat <MrKepzie@github> (Windows & OSX)\nOle Andre Rodlie <rodlie@github> (Linux)\n\n#Testing:\n\nOmar Brown <blackearth2014@github>\nOle Andre Rodlie <rodlie@github>\nPaul Geraskin <mifth@github>\nFrançois \"CoyHot\" Grassard <Francois-Grassard@github>\nFrancesco Paglia <fPaglia@github>\n"
        },
        {
          "name": "CrashReporter",
          "type": "tree",
          "content": null
        },
        {
          "name": "CrashReporterCLI",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "Global",
          "type": "tree",
          "content": null
        },
        {
          "name": "Gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "HostSupport",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL_FREEBSD.md",
          "type": "blob",
          "size": 3.2255859375,
          "content": "Instructions for installing Natron from sources on FreeBSD\n==========================================================\n\nThis file is supposed to guide you step by step to have working (compiling) version of\nNatron on FreeBSD. \n\n## Install libraries\n\nIn order to have Natron compiling, first you need to install the required libraries.\n\n```\npkg install qt5 boost-all pyside2 expat cairo pkgconf\n```\n\n### Submodules\n\nGo under Natron and type\n\n```\ngit submodule update -i --recursive\n```\n\n### Add the config.pri file\n\nYou might need to define the locations of some of the required libraries.\nThis is done by creating a `.pri` file next to the `Project.pro` that will tell the `.pro` where to find those libraries.\nThe only library to put in the `config.pri` file on unix systems is boost.\nFor all other libraries are found with PKGConfig.\n\nThen you can create the `config.pri` file next to the `Project.pro` file just in case you need to pass more configurations.\nYou can fill it with the following proposed code to point to the libraries.\nOf course you need to provide valid paths that are valid on your system.\n\n`INCLUDEPATH` is the path to the include files\n\n`LIBS` is the path to the libs\n\nThe following `config.pri` adds `boost_serialization` to the libraries, `cairo`, `expat` and `fontconfig` to pkgconfig and removes static `cairo`.\n\n```pri\nboost: LIBS += -lboost_serialization\nPKGCONFIG += expat\nPKGCONFIG += fontconfig\ncairo {\n        PKGCONFIG += cairo\n        LIBS -=  $$system(pkg-config --variable=libdir cairo)/libcairo.a\n}\n```\n\n###Download OpenColorIO-Configs\n\nIn the past, OCIO configs were a submodule, though due to the size of the repository, we have chosen instead\nto make a tarball release and let you download it [here](https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.4.tar.gz).\nPlace it at the root of Natron repository.\n\n### Build\n\nThe `<srcPath>` must be absolute and `<buildPath>` must not be a subdir of `<srcPath>`\n\n```\nmkdir <buildPath>\ncd <buildfolder>\nqmake -r CONFIG+=disable-breakpad <srcPath>/Project.pro\nmake\n```\n\nIf you want to build in DEBUG mode change the qmake call to this line:\n\n```\nqmake -r CONFIG+=debug CONFIG+=disable-breakpad <srcPath>/Project.pro\n```\n\nSome debug options are available for developers of Natron and you can see them in the `global.pri` file. To enable an option just add `CONFIG+=<option>` in the qmake call.\n\n### Nodes\n\nNatron's nodes are contained in separate repositories. To use the default nodes, you must also build the following repositories:\n\n    https://github.com/NatronGitHub/openfx-misc\n    https://github.com/NatronGitHub/openfx-io\n\nYou'll find installation instructions in the `README` of both these repositories. Both openfx-misc and openfx-io have submodules as well.\n\nPlugins can be installed in `/usr/OFX/Plugins` on FreeBSD.\nOr in a directory named \"`Plugins`\" located in the parent directory where the binary lies, e.g.:\n\n```\nbin/\n    Natron\nPlugins/\n    IO.ofx.bundle\n```\n\t\n### OpenColorIO configs\n\nNote that if you want Natron to find the OpenColorIO config files you will need to\nplace them in the appropriate location. In the repository they are located under\n`Gui/Resources/OpenColorIO-Configs`.\nYou must copy them to a directory named `../share/OpenColorIO-Configs` relative to Natron's binary.\n"
        },
        {
          "name": "INSTALL_LINUX.md",
          "type": "blob",
          "size": 17.1748046875,
          "content": "Instructions for installing Natron from sources on GNU/Linux\n============================================================\n\nThis file is supposed to guide you step by step to have working (compiling) version of Natron on GNU/Linux. Here's the gist of what you need to know:\n\n* It's recommended to use Docker for the easiest hands-off installation method - see [here](#using-docker) for more details\n* If you are on Arch Linux or Manjaro, see [this](#arch-linux) for relevant details\n* If you are on Fedora or RHEL, see [here](#fedorarhel-based) for specific instructions\n* If you are on Debian or a Debian-based system (such as Ubuntu, Linux Mint, KDE Neon, ElementaryOS etc.) see [here](#debian-based) for details\n* If you are willing to try the complete installation process, the instructions are below\n\n0. [Using Docker](#using-docker)\n1. [Dependencies](#dependencies)\n  - [Installing the full Natron SDK](#installing-the-full-natron-sdk)\n    - [Environment to use the Natron SDK](#environment-to-use-the-natron-sdk)\n  - [Manually install dependencies](#manually-install-dependencies)\n    - [Qt5](#qt-515)\n    - [Qt4](#qt-48)\n    - [Boost](#boost)\n    - [Expat](#expat)\n    - [Cairo](#cairo)\n    - [Pyside2](#pyside2)\n    - [Shiboken](#shiboken2)\n    - [Pyside](#pyside)\n    - [Shiboken](#shiboken)\n    - [QtPy](#qtpy)\n2. [Configuration](#configuration)\n    - [OpenFX](#openfx)\n    - [OpenColorIO-Configs](#download-opencolorio-configs)\n    - [config.pri](#configpri)\n    - [Nodes](#nodes)\n3. [Build](#build)\n4. [Distribution specific](#distribution-specific)\n    - [Arch Linux](#arch-linux)\n    - [Debian-based](#debian-based)\n    - [Fedora/RHEL-based](#fedorarhel-based)\n5. [Generating Python bindings](#generating-python-bindings)\n\n# Using Docker\n\nIf you have `docker` installed, the installation procedure is very simple. Simply create a directory called `builds`, and then run the following command:\n\n```bash\ndocker run -it --rm --mount src=\"$(pwd)/builds\",target=/home/builds_archive,type=bind natrongithub/natron-sdk:latest\n```\n\nDocker will automatically do the rest for you, and you should have a complete Natron binary in `./builds` (as a tgz archive).\n\n# Dependencies\n\nThe dependencies necessary to build and install Natron can either be built specifically for Natron, using the Natron SDK, or installed using packages from the Linux distribution.\n\n## Installing the full Natron SDK\n\nThe Natron SDK is used for building the official Natron binaries. The script that builds the whole SDK and installs it in the default location (`/opt/Natron-sdk`, which must be user-writable) can be exectuted like this:\n\n```\ncd tools/jenkins\ninclude/scripts/build-Linux-sdk.sh\n```\n\nIt puts build logs and the list of files installed by each package in the directory `/opt/Natron-sdk/var/log/Natron-Linux-x86_64-SDK` or `/opt/Natron-sdk/var/log/Natron-Linux-i686-SDK`.\n\nSome packages, especially Qt 4.8.7, have Natron-specific patches. Take a look at the SDK script to see which patches are applied to each packages, and what configuration options are used.\n\nThe SDK may be updated by pulling the last modifications to the script and re-executing it.\n\n### Environment to use the Natron SDK\n\nOnce the SDK is built, you should set your environment in the shell from which you execute or test Natron, to make sure that the Natron SDK is preferred over any other system library:\n\n```\n. path_to_Natron_sources/tools/utils/natron-sdk-setup-linux.sh\n```\n\nThis must be done in every shell/terminal where you intend to compile and/or run Natron.\n\n## Installing dependencies from Ubuntu\n\nThe scripts `tools/travis/install_dependencies.sh` and\n`tools/travis/build.sh` respectively install the correct dependencies\nand build Natron and the standard set of plugins on Ubuntu\n18.04 (Bionic Beaver).\nThese scripts are used to make the [Travis CI builds](https://travis-ci.org/github/NatronGitHub/Natron).\nYou can use them as a reference, but the resulting binaries are not guaranteed to be fully functional.\n\n## Installing dependencies manually\n\n### Qt 5.15\n\nFor Qt5 You'll need to install the qtbase libraries, usually you can get them from your package manager (which depends on your Linux distribution).\n\nAlternatively you can build it from source using the tarballs from [Qt download](https://download.qt.io/archive/qt/5.15/5.15.4/submodules) or the [KDE fork](https://invent.kde.org/qt/qt/qtbase/-/tree/kde/5.15).\n\n### Qt 4.8\n\nIn case you prefer to use Qt4 you'll have to build it from source as many distributions have already deprecated Qt 4, [Qt download](https://download.qt.io/archive/qt/4.8/4.8.7/) has a source archive.\n\n### Boost\n\nNatron requires `boost serialization` to compile.\nYou can download boost with your package manager.\nAlternatively you can install boost from [boost download](http://www.boost.org/users/download/)\n\n### Expat\n\nYou can download it with your package manager.\nThe package depends on your distribution.\n\n### Cairo\n\nYou can download it with your package manager.\n\n### PySide2\n\nNatron uses pyside2 for Python 3 with Qt5.\n\n### Shiboken2\n\nNatron uses shiboken2 for Python 3 with Qt5, the generator binary (`shiboken2`) and headers are required too.\n\n### PySide\n\nNatron uses pyside for Python 2 with Qt4, notice that it's deprecated in many distros.\n\n### Shiboken\n\nNatron uses shiboken for Python 2 with Qt4, notice that it's deprecated in many distros.\n\n### QtPy\n\nAbstraction layer for PyQt5/PyQt4/PySide2/PySide. Preferably you can use your distribution package manager or install it via pip\n\n```\npip install qtpy\n```\n\n# Configuration\n\n### OpenFX\n\nNatron uses the OpenFX API, before building you should make sure its submodule is up to date.\n\nFor that, go under Natron and type\n\n```\ngit submodule update -i --recursive\n```\n\n### Download OpenColorIO-Configs\n\nIn the past, OCIO configs were a submodule, though due to the size of the repository, we have chosen instead\nto make a tarball release and let you download it [here](https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.4.tar.gz).\nPlace it at the root of Natron repository.\n\n***note:*** *If it is named something like: `OpenColorIO-Configs-Natron-v2.4` rename it to `OpenColorIO-Configs`*\n\n\n```\nwget https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.4.tar.gz\ntar -xvzf Natron-v2.4.tar.gz\nmv OpenColorIO-Configs-Natron-v2.4 OpenColorIO-Configs\n```\n\n***note:*** In order to reclaim disk space, you may keep only the following subfolders : blender\\*, natron, nuke-default\n\n```\ncd OpenColorIO-Configs && rm -v !(\"blender\"|\"blender-cycles\"|\"natron\"|\"nuke-default\") -R\n```\n\n### config.pri\n\nThe `config.pri` is used to define the locations of the dependencies. It is probably the most\nconfusing part of the build process.\n\nCreate a `config.pri` file next to the `Project.pro` that will tell the .pro file\nwhere to find those libraries.\n\nYou can fill it with the following proposed code to point to the libraries.\nOf course you need to provide valid paths that are valid on your system.\n\nYou can find more examples specific to distributions below.\n\n`INCLUDEPATH` is the path to the include files.\n\n`LIBS` is the path to the libs.\n\n`PKGCONFIG` is the pkg-config.\n\nAn example configuration for a Qt4 build might be\n\n```\n----- copy and paste the following in a terminal -----\ncat > config.pri << EOF\nboost-serialization-lib: LIBS += -lboost_serialization\nboost: LIBS += -lboost_thread -lboost_system\nexpat: LIBS += -lexpat\nexpat: PKGCONFIG -= expat\npyside: PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG --prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\npyside: PKGCONFIG += pyside\npyside: INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtCore\npyside: INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtGui\nEOF\n----- end -----\n```\n\n### Nodes\n\nNatron's nodes are contained in separate repositories. To use the default nodes, you must also build the following repositories:\n\n- [NatronGitHub/openfx-misc](https://github.com/NatronGitHub/openfx-misc)\n- [NatronGitHub/openfx-io](https://github.com/NatronGitHub/openfx-io)\n\n\nYou'll find installation instructions in the README of both these repositories. Both openfx-misc and openfx-io have submodules as well.\n\nPlugins can be installed in /usr/OFX/Plugins on Linux\nOr in a directory named \"Plugins\" located in the parent directory where the binary lies, e.g.:\n\n```\nbin/\n    Natron\nPlugins/\n    IO.ofx.bundle\n```\n\n# Build\n\nTo build, go into the Natron directory and type:\n\n```\nqmake -r\nmake\n```\n\nIf everything has been installed and configured correctly, it should build without errors.\nIn case you have many versions of Qt installed qmake can generate errors, you can try for a Qt5 build\n\n```\nQT_SELECT=5 qmake -r\nmake\n```\n\nIf you want to build in DEBUG mode change the qmake call to this line:\n\n```\nqmake -r CONFIG+=debug\n```\n\nIn case for compiling with Clang:\n\n```\nqmake -r -spec linux-clang\n```\n\nSome debug options are available for developers of Natron and you can see them in the\n`global.pri` file. To enable an option just add `CONFIG+=<option>` in the `qmake` call.\n\n\n# Distribution specific\n\n## Arch Linux\n\nOn Arch Linux, there are two tested methods of compiling Natron: using the AUR or via manual compiling.\n\n### If using AUR\n\nSimply run the command below:\n\n```\nyay -S natron-compositor\n```\n\n### If compiling manually\n\nFirst, install build dependencies. You can install GCC, Expat and Boost directly from the Arch Linux official repositories, like so:\n\n```\nsudo pacman -S expat boost-libs gcc\n```\n\nYou will also need additional Boost libraries, cairo, and Qt5 (provided by PySide2). They can be installed with the following command:\n\n```\nsudo pacman -S boost cairo pyside2 python-pyqt\n```\n\nThen, clone Natron's repo:\n\n```\ngit clone https://github.com/NatronGitHub/Natron && cd Natron\n```\n\nUpdate submodules:\n\n```\ngit submodule init\ngit submodule update -i --recursive\n```\n\nAnd make a build folder:\n\n```\nmkdir build && cd build\n```\n\nAt this point, you might need the `config.pri` in case you have to pass some options to the build via the config file. On every operating system and distro this will be different, including for Arch Linux. First, make it by running this command:\n\n```\ntouch ../config.pri\n```\n\nNow, open `../config.pri` with any editor and modify it to your preference. For example you can pass options like this:\n\n```\nCONFIG += custombuild\nCONFIG += openmp\nDEFINES += QT_NO_DEBUG_OUTPUT\n```\n\nIn case of a Qt4 you should paste in these lines to the empty file. **A template `config.pri` is available [here](./build-configs/arch-linux/config.pri)**. Here are some recommended instructions to do so:\n\n```\n# These are the lines you should paste into your empty `config.pri`\nboost: LIBS += -lboost_serialization\nexpat: LIBS += -lexpat\nexpat: PKGCONFIG -= expat\ncairo {\n        PKGCONFIG += cairo\n        LIBS -=  $$system(pkg-config --variable=libdir cairo)/libcairo.a\n}\npyside {\n        PKGCONFIG -= pyside\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside-py2)\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside-py2)/QtCore\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside-py2)/QtGui\n        INCLUDEPATH += $$system(pkg-config --variable=includedir QtGui)\n        LIBS += -lpyside-python2.7\n}\nshiboken {\n        PKGCONFIG -= shiboken\n        INCLUDEPATH += $$system(pkg-config --variable=includedir shiboken-py2)\n        LIBS += -lshiboken-python2.7\n}\n```\n\nYou're now all set to compile. Use `qmake` to generate a Makefile for final compiling, like this:\n\n```\nqmake -r ../Project.pro PREFIX=/usr BUILD_USER_NAME=\"Arch Linux\" CONFIG+=custombuild CONFIG+=openmp DEFINES+=QT_NO_DEBUG_OUTPUT QMAKE_CFLAGS_RELEASE=\"${CFLAGS}\" QMAKE_CXXFLAGS_RELEASE=\"${CXXFLAGS}\" QMAKE_LFLAGS_RELEASE=\"${LDFLAGS}\"\n\n# or in case you want to use Clang\n\nqmake -r ../Project.pro -spec linux-clang PREFIX=/usr BUILD_USER_NAME=\"Arch Linux\" CONFIG+=custombuild CONFIG+=openmp DEFINES+=QT_NO_DEBUG_OUTPUT QMAKE_CFLAGS_RELEASE=\"${CFLAGS}\" QMAKE_CXXFLAGS_RELEASE=\"${CXXFLAGS}\" QMAKE_LFLAGS_RELEASE=\"${LDFLAGS}\"\n```\n\nLast, compile with `make`:\n\n```\nmake\n```\n\nThe binaries will be found in the `build/App` folder. In order to launch Natron after compiling, simply do `./App/Natron`, and you can then start using Natron!\n\n\n## Debian-based\n\nInstalling dependencies using `apt-get` or `apt` should work on\nany Debian-based distribution.\n\nFor Ubuntu 22.04 using Python 3.10 and Qt 5.15, install the required dependencies:\n\n```\nsudo apt install build-essential libboost-serialization-dev libboost-system-dev libexpat1-dev libcairo2-dev qt5-qmake qtbase5-dev python3-dev libshiboken2-dev libpyside2-dev python3-pyside2.qtwidgets python3-qtpy\n```\n\nFor Debian 12, install the following packages instead:\n\n```\nsudo apt install qtbase5-dev libboost-serialization-dev libboost-system-dev libexpat1-dev libcairo2-dev python3-dev python3-pyside2.qtcore libpyside2-dev libshiboken2-dev\n```\n\nFor most Debian/Ubuntu-based systems, install the required packages:\n\n```\nsudo apt install qt5base-dev libboost-serialization-dev libboost-system-dev libexpat1-dev libcairo2-dev python3-dev python3-pyside2 libpyside2-dev libshiboken2-dev\n```\n\nFor the Qt4 config.pri use:\n\n```\nboost-serialization-lib: LIBS += -lboost_serialization\nboost: LIBS += -lboost_thread -lboost_system\nexpat: LIBS += -lexpat\nexpat: PKGCONFIG -= expat\ncairo: PKGCONFIG -= cairo\n\npyside: PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG --prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\npyside: PKGCONFIG += pyside\npyside: INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtCore\npyside: INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtGui\n```\n\nfor Linux Mint you will need to add:\n\n```\npyside {\n        PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG --prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\n        PKGCONFIG += pyside\n        INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtCore\n        INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtGui\n}\n```\n\nGet Natron:\n\n```\ngit clone https://github.com/NatronGitHub/Natron && cd Natron\ngit submodule update -i --recursive\nwget https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.5.tar.gz\ntar xzf Natron-v2.5.tar.gz\nmv OpenColorIO-Configs-Natron-v2.5 OpenColorIO-Configs\n```\n\nBuild:\n\n```\nmkdir ../build-Natron && cd ../build-Natron\ncmake ../Natron\nmake -j8\nmake test\n```\n\n## Fedora/RHEL-based\n\nInstructions for Fedora, Red Hat Enterprise Linux and derivatives. You can use either the dnf or yum package managers\n\nOn RHEL and derivative distributions you need the EPEL repository:\n\n``` yum install epel-release ``` or ``` dnf install epel-release ```\n\nInstall required packages:\n\n```\nyum install fontconfig-devel gcc-c++ expat-devel python-pyside2-devel shiboken2-devel qt5-qtbase-devel boost-devel pixman-devel cairo-devel\n```\nor\n```\ndnf install fontconfig-devel gcc-c++ expat-devel python-pyside2-devel shiboken2-devel qt5-qtbase-devel boost-devel pixman-devel cairo-devel\n```\n\nQt4 config.pri:\n```pri\nboost-serialization-lib: LIBS += -lboost_serialization\nboost: LIBS += -lboost_thread -lboost_system\nPKGCONFIG += expat\nPKGCONFIG += fontconfig\ncairo {\n        PKGCONFIG += cairo\n        LIBS -=  $$system(pkg-config --variable=libdir cairo)/libcairo.a\n}\npyside {\n        PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG --prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\n        PKGCONFIG += pyside\n        INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtCore\n        INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)/QtGui\n}\nshiboken {\n        PKGCONFIG -= shiboken\n        INCLUDEPATH += $$system(pkg-config --variable=includedir shiboken)\n        LIBS += -lshiboken-python2.7\n}\n```\n\n# Generating Python bindings\n\nThis is not required as file generation occurs during build with Qt5 and generated files are already in the repository for Qt4. You would need to run it if you were both under Qt4 and either extend or modify the Python bindings via the\ntypesystem.xml file. See the documentation of shiboken for an explanation of the command line arguments.\n\nIf using PySide for Qt4, the command-line would be:\n\n```sh\nSDK_PREFIX=/usr # /opt/Natron-sdk if using the Natron SDK\nPYSIDE_PREFIX=/usr # /opt/Natron-sdk/qt4 if using the Natron SDK\nQT=4\nrm Engine/NatronEngine/* Gui/NatronGui/*\n\nshiboken --avoid-protected-hack --enable-pyside-extensions --include-paths=../Engine:../Global:$SDK_PREFIX/include:$PYSIDE_PREFIX/include/PySide --typesystem-paths=$PYSIDE_PREFIX/share/PySide/typesystems --output-directory=Engine/Qt${QT} Engine/Pyside_Engine_Python.h  Engine/typesystem_engine.xml\n\nshiboken --avoid-protected-hack --enable-pyside-extensions --include-paths=../Engine:../Gui:../Global:$SDK_PREFIX/include:$PYSIDE_PREFIX/include/PySide --typesystem-paths=$PYSIDE_PREFIX/share/PySide/typesystems:Engine:Shiboken --output-directory=Gui/Qt${QT} Gui/Pyside_Gui_Python.h  Gui/typesystem_natronGui.xml\n\ntools/utils/runPostShiboken.sh Engine/Qt${QT}/NatronEngine natronengine\ntools/utils/runPostShiboken.sh Gui/Qt${QT}/NatronGui natrongui\n```\n\n**Note**\nShiboken has a few glitches which needs fixing with some sed commands, run `tools/utils/runPostShiboken.sh` for Qt4 once shiboken is called.\n"
        },
        {
          "name": "INSTALL_MACOS.md",
          "type": "blob",
          "size": 27.2314453125,
          "content": "Instructions for installing Natron from sources on macOS\n=======================================================\n\nThese are step-by-step instructions to compile Natron on macOS.\n\nOS X 10.6 (a.k.a. Snow Leopard) and newer are supported when building with MacPorts, and Homebrew can be used to compile it on the latest macOS (although a few Homebrew casks have to be downgraded).\n\n## Official Natron binaries\n\nThe official Natron and plugins binaries are built using the section about MacPorts in these instructions to prepare the system, and the `launchBuildMain.sh` build script found in the `tools/jenkins` directory. The script takes care of everything, from checking out sources, to compiling and packaging.\n\nThese binaries are built on an OS X 10.9 (Mavericks) virtual machine with [Xcode 6.2](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg). Note that [Mavericks can not be downloaded anymore from the 10.14 (High Sierra) App Store](https://www.macworld.co.uk/how-to/mac-software/download-old-os-x-3629363/), so you will need to use a Mac with an older system (up to 10.13), or look for [alternatives](https://applehint.com/t/download-all-macos-x-10-4-10-14-original/376).\n\nThe build system is based on [MacPorts](https://www.macports.org) with the custom ports found in the `tools/MacPorts` directory in the sources. We are not using [Homebrew](https://brew.sh), because MacPorts is easier to customize.\n\nEverything is compiled using the latest version of [Clang](https://clang.llvm.org) rather than the version bundled with Xcode, in order to have full OpenMP support.\n\n\n## Building on a VM (Virtual Machine)\n\nNatron can be built on a virtual machine, in order to target older versions of OS X / macOS.  Due to the OS X Software License Agreement, OS X may only be virtualized on Mac hardware. The excellent blog post [OS X on OS X](https://ntk.me/2012/09/07/os-x-on-os-x/) ([archive](https://web.archive.org/web/20190520141144/https://ntk.me/2012/09/07/os-x-on-os-x/)) gives all the instructions to install an OS X virtual machine.\n\n\n## Install Dependencies\n\nIn order to have Natron compiling, first you need to install the required libraries.\n\nThere are two exclusive options: using MacPorts or using Homebrew.\n\nHomebrew is easier to set up than MacPorts, but cannot build universal binaries.\n\n### MacPorts\n\n#### Basic Setup\n\nYou need an up to date MacPorts version. Just download it and install it from <http://www.macports.org>, and execute the following commands in a terminal:\n\n```Shell\nsudo port selfupdate\nsudo port upgrade outdated\n```\n\nThen, you should add the \"ports\" provided by Natron. Edit as root the file `/opt/local/etc/macports/sources.conf` (as in `sudo nano /opt/local/etc/macports/sources.conf`) and add the following line at the beginning, with the path to the Natron sources (yes, there are three slashes after `file:`):\n\n```\nfile:///Users/your_username/path_to_sources/Natron/tools/MacPorts\n```\n\nThen, create the index file:\n\n```Shell\n(cd /Users/your_username/path_to_sources/Natron/tools/MacPorts; portindex)\n```\n\nIt is also recommended to add the  following line to `/opt/local/etc/macports/variants.conf`:\n\n```\n-x11 +no_x11 +bash_completion +no_gnome +quartz +natron\n```\n\n#### Notes for OS X 10.6 Snow Leopard\n\nOn Snow Leopard, the `+universal` variant may be added to `/opt/local/etc/macports/variants.conf`.\n\nThe libtool that comes with OS X 10.6 Snow Leopard does not work well with clang-generated binaries, so on this system you may have to substitute it with the libtool provided by MacPort's `cctools` package, using `sudo mv /usr/bin/libtool /usr/bin/libtool.orig; sudo mv /Developer/usr/bin/libtool /Developer/usr/bin/libtool.orig; sudo ln -s /opt/local/bin/libtool /usr/bin/libtool; sudo ln -s /opt/local/bin/libtool /Developer/usr/bin/libtool`\n\n#### Install Ports\n\nInstall the required packages:\n\n```Shell\nsudo port -v -N install pkgconfig -universal gsed -universal gawk -universal coreutils -universal findutils -universal\nsudo port -v -N install cmake -universal keychain -universal\nsudo port -v -N install opencolorio -quartz -python27 -python310\nsudo port -v -N install cairo -x11\nsudo port -v -N install qt4-mac boost expat\nsudo port -v -N install py27-pyside py310-sphinx py310-sphinx_rtd_theme\nsudo port select --set python python27\nsudo port select --set python2 python27\nsudo port select --set python3 python310\nsudo port select --set sphinx py310-sphinx\n```\n\nCreate the file /opt/local/lib/pkgconfig/glu.pc containing GLU\nconfiguration, for example using the following comands:\n\n```Shell\nsudo -s\ncat > /opt/local/lib/pkgconfig/glu.pc << EOF\n prefix=/usr\n exec_prefix=\\${prefix}\n libdir=\\${exec_prefix}/lib\n includedir=\\${prefix}/include\n\n\nName: glu\n Version: 2.0\n Description: glu\n Requires:\n Libs:\n Cflags: -I\\${includedir}\nEOF\n```\n\nIf you intend to build the [openfx-io](https://github.com/NatronGitHub/openfx-io) plugins too, you will need these additional packages:\n\n```Shell\nsudo port -v -N install x264\nsudo port -v -N install libvpx +highbitdepth\nsudo port -v -N install ffmpeg +gpl2 +highbitdepth +natronmini\nsudo port -v -N install libraw +gpl2\nsudo port -v -N install openexr\nsudo port -v -N install opencolorio -quartz -python27 -python310\nsudo port -v -N install openimageio +natron\nsudo port -v -N install seexpr211 seexpr\n```\n\nand for [openfx-arena](https://github.com/NatronGitHub/openfx-arena) (note that it installs a version of ImageMagick without support for many image I/O libraries):\n\n```Shell\nsudo port -v -N install librsvg -quartz\nsudo port -v -N install ImageMagick +natron -x11\nsudo port -v -N install poppler\nsudo port -v -N install librevenge\nsudo port -v -N install libcdr-0.1\nsudo port -v -N install libzip\nsudo sed -i -e s/Zstd::Zstd/zstd/ /opt/local/lib/pkgconfig/libzip.pc\nsudo port -v -N install sox\n```\n\nand for [openfx-gmic](https://github.com/NatronGitHub/openfx-gmic):\n\n```Shell\nsudo port -v -N install fftw-3\n```\n\n### Homebrew\n\nInstall Homebrew from <http://brew.sh/>\n\n#### Qt5\n\nInstall Qt5\n\n```Shell\nbrew install qt@5 pyside@2\n# compilation doesn't work with Qt6 linked)\nbrew unlink qt\n# Fix the pkg-config files\nbrew install gnu-sed\ngsed -e s@libdir=lib@libdir=\\${prefix}/lib@ -i /usr/local/opt/pyside\\@2/lib/pkgconfig/pyside2.pc\ngsed -e s@libdir=lib@libdir=\\${prefix}/lib@ -i /usr/local/opt/pyside\\@2/lib/pkgconfig/shiboken2.pc\n```\n\n#### Python2 (optional)\n\nInstall Python 2.7 (yes, we know it's deprecated).\n```Shell\nbrew uninstall python@2 || true\ncp tools/homebrew/python@2.rb $( brew --prefix )/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/python@2.rb\nbrew install -s python@2\n```\n\nDo do the following if the `homebrew.pth` file does not exist:\n\n```Shell\nmkdir -p ~/Library/Python/2.7/lib/python/site-packages\necho 'import site; site.addsitedir(\"/usr/local/lib/python2.7/site-packages\")' >> ~/Library/Python/2.7/lib/python/site-packages/homebrew.pth\nsudo ln -s ~/Library/Python/2.7/lib/python/site-packages/homebrew.pth /Library/Python/2.7/lib/python/site-packages/homebrew.pth\n```\n\n#### Qt4 (optional)\n\nQt 4 is not supported in Homebrew. Please enable the community-maintained recipe using:\n\n```Shell\nbrew tap cartr/qt4\n```\n\nOptional: Patch the qt4 recipe to fix the stack overflow issue (see [QTBUG-49607](https://bugreports.qt.io/browse/QTBUG-49607), [Homebrew issue #46307](https://github.com/Homebrew/homebrew/issues/46307), [MacPorts ticket 49793](http://trac.macports.org/ticket/49793)).\n\nPatching a Homebrew recipe is explained in the [Homebrew FAQ](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md).\n\n```Shell\nbrew edit cartr/qt4/qt@4\nbrew install cartr/qt4/qt@4 cartr/qt4/shiboken@1.2 cartr/qt4/pyside@1.2 cartr/qt4/pyside-tools@1.2\n```\n\nand before the line that starts with `head`, add the following code:\n\n```\n  patch :p0 do\n    # bugreports.qt.io may go away, use our local copy.\n    # url \"https://bugreports.qt.io/secure/attachment/52520/patch-qthread-stacksize.diff\"\n    # sha256 \"477630235eb5ee34ed04e33f156625d1724da290e7a66b745611fb49d17f1347\"\n    url \"https://raw.githubusercontent.com/NatronGitHub/Natron/ff4b3afd3a784f1517002bd82e2da441265385ad/tools/MacPorts/aqua/qt4-mac/files/patch-qthread-stacksize.diff\"\n    sha256 \"a3363ff6460fb4cb4a2a311dbc0724fc5de39d22eb6fa1ec1680d6bd28d01ee4\"\n  end\n\n  patch :p0 do\n    url \"https://raw.githubusercontent.com/NatronGitHub/Natron/ff4b3afd3a784f1517002bd82e2da441265385ad/tools/MacPorts/aqua/qt4-mac/files/patch-qt-custom-threadpool.diff\"\n    sha256 \"470c8bf6fbcf01bd15210aad961a476abc73470e201ccb4d62a7c579452de371\"\n  end\n```\n\nReinstall Qt4 from source (takes a while):\n```Shell\nbrew reinstall -s cartr/qt4/qt@4\n```\n\n#### Other dependencies\n\nInstall libraries:\n\n```Shell\nbrew install cairo expat\nbrew install gnu-sed gawk coreutils findutils\nbrew install cmake keychain sphinx-doc\n/usr/local/opt/sphinx-doc/libexec/bin/pip3 install sphinx_rtd_theme\nbrew install pyside@1.2 pyside-tools@1.2\n```\n\nIf compiling with Qt5:\n\n```Shell\nbrew install pyside@2\n```\n\n\n To install the [openfx-io](https://github.com/NatronGitHub/openfx-io) and [openfx-misc](https://github.com/NatronGitHub/openfx-misc) sets of plugin, you also need the following:\n\n```Shell\nbrew install ilmbase openexr freetype fontconfig ffmpeg\nbrew unlink openimageio || true;\nbrew unlink opencolorio || true;\nbrew unlink seexpr || true;\ncp tools/homebrew/opencolorio@1.rb $( brew --prefix )/Homebrew/Library/Taps/homebrew/homebrew-core/Formula\ncp tools/homebrew/seexpr@2.rb $( brew --prefix )/Homebrew/Library/Taps/homebrew/homebrew-core/Formula\nbrew install -s opencolorio@1\nbrew unlink qt@4\nbrew install -s seexpr@2\nbrew link qt@4\nbrew install opencolorio openimageio seexpr\n```\n\nTo install the [openfx-arena](https://github.com/NatronGitHub/openfx-arena) set of plugin, you also need the following:\n\n```Shell\nbrew install librsvg poppler librevenge libcdr libzip sox\nbrew uninstall imagemagick\nbrew install imagemagick --with-hdri --with-librsvg --with-quantum-depth-32 --with-pango\n```\n\nTo install the [openfx-gmic](https://github.com/NatronGitHub/openfx-gmic) set of plugin, you also need the following:\n\n```Shell\nbrew install fftw\n```\n\nalso set the correct value for the pkg-config path (you can also put\nthis in your .bash_profile):\n\n```Shell\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig:/usr/local/opt/cairo/lib/pkgconfig:/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/opt/curl/lib/pkgconfig\n```\n\n### Installing manually (outside of MacPorts or Homebrew) a patched Qt to avoid stack overflows\n\nThe following is not necessary if a patched Qt was already installed by the standard MacPorts or Homebrew procedures above.\n\nSee [QTBUG-49607](https://bugreports.qt.io/browse/QTBUG-49607), [Homebrew issue #46307](https://github.com/Homebrew/homebrew/issues/46307), [MacPorts ticket 49793](http://trac.macports.org/ticket/49793).\n\n```Shell\nwget https://download.qt.io/official_releases/qt/4.8/4.8.7/qt-everywhere-opensource-src-4.8.7.tar.gz\ntar zxvf qt-everywhere-opensource-src-4.8.7.tar.gz\ncd qt-everywhere-opensource-src-4.8.7\nwget https://raw.githubusercontent.com/Homebrew/patches/480b7142c4e2ae07de6028f672695eb927a34875/qt/el-capitan.patch\npatch -p1 < el-capitan.patch\nwget https://bugreports.qt.io/secure/attachment/52520/patch-qthread-stacksize.diff\npatch -p0 < patch-qthread-stacksize.diff\n```\n\nThen, configure using:\n\n```Shell\n./configure -prefix /opt/qt4 -pch -system-zlib -qt-libtiff -qt-libpng -qt-libjpeg -confirm-license -opensource -nomake demos -nomake examples -nomake docs -cocoa -fast -release\n```\n\n* On OS X >= 10.9 add `-platform unsupported/macx-clang-libc++`\n* On OS X < 10.9, to compile with clang add `-platform unsupported/macx-clang`\n* If compiling with gcc/g++, make sure that `g++ --version`refers to Apple's gcc >= 4.2 or clang >= 318.0.61\n* To use another openssl than the system (mainly for security reasons), add `-openssl-linked -I /usr/local/Cellar/openssl/1.0.2d_1/include -L /usr/local/Cellar/openssl/1.0.2d_1/lib` (where the path is changed to your openssl installation).\n\nThen, compile using:\n\n```Shell\nmake\n```\n\nAnd install (after making sure `/opt/qt4` is user-writable) using:\n\n```Shell\nmake install\n```\n\n\n## Checkout sources\n\n```Shell\ngit clone https://github.com/NatronGitHub/Natron.git\ncd Natron\n```\n\nIf you want to compile the bleeding edge version, use the master\nbranch:\n\n```Shell\ngit checkout master\n```\n\nUpdate the submodules:\n\n```Shell\ngit submodule update -i --recursive\n```\n\n### Download OpenColorIO-Configs\n\nIn the past, OCIO configs were a submodule, though due to the size of the repository, we have chosen instead\nto make a tarball release and let you download it [here](https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.5.tar.gz).\nPlace it at the root of Natron source tree:\n\n```Shell\ncurl -k -L https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.5.tar.gz | tar zxf -\nmv OpenColorIO-Configs-Natron-v2.5 OpenColorIO-Configs\n```\n\n## Building with qmake (for Qt4 and Qt5)\n\n### Add the config.pri file\n\nYou have to define the locations of the required libraries.\nThis is done by creating a .pri file that will tell the .pro where to find those libraries.\nThe only library to put in the config.pri file on unix systems is boost.\nFor all other libraries are found with PKGConfig.\n\n- create the config.pri file next to the Project.pro file.\n\nYou can fill it with the following proposed code to point to the libraries.\nOf course you need to provide valid paths that are valid on your system.\n\nINCLUDEPATH is the path to the include files\n\nLIBS is the path to the libs\n\nIf you installed libraries using MacPorts, use the following\nconfig.pri:\n\n```Shell\n# copy and paste the following in a terminal\ncp config-macports.pri config.pri\n```\n\nIf you installed libraries using Homebrew, use the following\nconfig.pri:\n\n```Shell\n# copy and paste the following in a terminal\ncp config-homebrew.pri config.pri\n```\n\nThen check at the top of the `config.pri` file that the `HOMEBREW` variable is set to the homebrew installation prefix (usually `/opt/homebrew`).\n\n### Build with Makefile\n\nYou can generate a makefile by opening a Terminal, setting the current\ndirectory to the toplevel source directory, and typing\n\n```Shell\nqmake -r\n```\n\nthen type\n\n```Shell\nmake\n```\n\nThis will create all binaries in all the subprojects folders.\n\nIf you want to build in DEBUG mode change the qmake call to this line:\n\n```Shell\nqmake -r CONFIG+=debug\n```\n\n* You can also enable logging by adding CONFIG+=log\n\n* You can also enable clang sanitizer by adding CONFIG+=sanitizer\n\n#### Building with OpenMP support using clang\n\nIt is possible to build Natron using clang (version 3.8 is required,\nversion 9.0 is recommended) with OpenMP support on\nMacPorts (or Homebrew for OS X 10.9 or later).  OpenMP brings speed improvements in the\ntracker and in CImg-based plugins.\n\nFirst, install clang 9.0. On OS X 10.9 and later with MacPorts, simply execute:\n\n```Shell\nsudo port -v install clang-9.0\n```\n\nOr with Homebrew:\n\n```Shell\nbrew install llvm\n```\n\nOn older systems, follow the procedure described in \"[https://trac.macports.org/wiki/LibcxxOnOlderSystems](Using libc++ on older system)\", and install and set clang-9.0 as the default compiler in the end. Note that we noticed clang 3.9.1 generates wrong code with `-Os` when compiling openexr (later clang versions were not checked), so it is safer to also change `default configure.optflags      {-Os}` to `default configure.optflags      {-O2}` in `/opt/local/libexec/macports/lib/port1.0/portconfigure.tcl` (type `sudo nano /opt/local/libexec/macports/lib/port1.0/portconfigure.tcl` to edit it).\n\nThe libtool that comes with OS X 10.6 does not work well with clang-generated binaries, and you may have to `sudo mv /usr/bin/libtool /usr/bin/libtool.orig; sudo mv /Developer/usr/bin/libtool /Developer/usr/bin/libtool.orig; sudo ln -s /opt/local/bin/libtool /usr/bin/libtool; sudo ln -s /opt/local/bin/libtool /Developer/usr/bin/libtool`\n\nThen, configure using the following qmake command on MacPorts:\n\n```Shell\n/opt/local/libexec/qt4/bin/qmake QMAKE_CXX='clang++-mp-9.0 -stdlib=libc++' QMAKE_CC=clang-mp-9.0 QMAKE_OBJECTIVE_CXX='clang++-mp-9.0 -stdlib=libc++' QMAKE_OBJECTIVE_CC='clang-mp-9.0 -stdlib=libc++' QMAKE_LD='clang++-mp-9.0 -stdlib=libc++' -r CONFIG+=openmp CONFIG+=enable-osmesa CONFIG+=enable-cairo\n```\n\nOr on Homebrew with Qt4/PySide from cartr/qt4:\n\n```Shell\nQT_INSTALL_PREFIX=/usr/local\nqmake=$QT_INSTALL_PREFIX/bin/qmake\nenv PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig:/usr/local/opt/cairo/lib/pkgconfig:/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig $qmake -spec macx-xcode CONFIG+=debug CONFIG+=enable-cairo CONFIG+=enable-osmesa CONFIG+=python3 CONFIG+=sdk_no_version_check CONFIG+=openmp -r\n```\n\nOr on Homebrew with Qt5/PySide2:\n\n```Shell\nQT_INSTALL_PREFIX=/usr/local/opt/qt@5\nqmake=$QT_INSTALL_PREFIX/bin/qmake\nenv PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig:/usr/local/opt/cairo/lib/pkgconfig:/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig:/usr/local/opt/qt@5/lib/pkgconfig:/usr/local/opt/pyside@2/lib/pkgconfig $qmake -spec macx-xcode CONFIG+=debug CONFIG+=enable-cairo CONFIG+=enable-osmesa CONFIG+=python3 CONFIG+=sdk_no_version_check CONFIG+=openmp -r\n```\n\nTo build the plugins, use the following command-line:\n\n```Shell\nmake CXX='clang++-mp-9.0 -stdlib=libc++' OPENMP=1\n```\n\nOr, if you have MangledOSMesa32 installed in `OSMESA_PATH` and LLVM installed in `LLVM_PATH` (MangledOSMesa32 and LLVM build script is available from [https://github.com/devernay/osmesa-install](github:devernay/osmesa-install) :\n\n```Shell\nOSMESA_PATH=/opt/osmesa\nLLVM_PATH=/opt/llvm\nmake CXX='clang++-mp-9.0 -stdlib=libc++' OPENMP=1 CXXFLAGS_MESA=\"-DHAVE_OSMESA\" LDFLAGS_MESA=\"-L${OSMESA_PATH}/lib -lMangledOSMesa32 `${LLVM_PATH}/bin/llvm-config --ldflags --libs engine mcjit mcdisassembler | tr '\\n' ' '`\" OSMESA_PATH=\"${OSMESA_PATH}\"\n```\n\n### Build on Xcode\n\nFollow the instruction of build but\nadd -spec macx-xcode to the qmake call command:\n\n```Shell\nqmake -r -spec macx-xcode\n```\n\nThen open the already provided Project-xcode.xcodeproj and compile the target \"all\"\n\n#### Compiling plugins with Xcode\n\nThe source distributions of the plugin sets `openfx-io` and\n`openfx-misc` contain Xcode projects, but these require setting a few\nglobal variables in Xcode. These variables can be used to switch\nbetween the system-installed version of a package and a custom install\n(e.g. if you need to debug something that happens in OpenImageIO).\n\nIn Xcode Preferences, select \"Locations\", then \"Source Trees\", and add the following\nvariable names/values (Xcode may need to be restarted after setting these):\n- `LOCAL`: `/usr/local` on Homebrew, `/opt/local` on MacPorts\n- `BOOST_PATH`: `$(LOCAL)/include`\n- `EXR_PATH`: `$(LOCAL)`\n- `FFMPEG_PATH`: `$(LOCAL)`\n- `OCIO_PATH`: `$(LOCAL)`\n- `OIIO_PATH`: `$(LOCAL)`\n- `OPENCV_PATH`: `$(LOCAL)`\n- `SEEXPR_PATH`: `$(LOCAL)`\n\nIt is also recommended in Xcode Preferences, select \"Locations\", then\n\"Locations\", to set the Derived Data location to be Relative, and in\nthe advanced settings to set the build location to Legacy (if not,\nbuild files are somewhere under `~/Library/Developer/Xcode`.\n\n#### Build on Xcode with openmp clang\n\nSee instructions under \"Using clang-omp with Xcode\" at the following page https://clang-omp.github.io\n\nOn Macports clang now ships with openmp by default. To install it:\n```\nsudo port install clang-9.0\n```\n\nIn your config.pri file, add the following lines and change the paths according to your installation of clang\n\n```\nopenmp {\nINCLUDEPATH += /opt/local/include/libomp\nLIBS += -L/opt/local/lib/libomp -liomp5 # may also be -lomp\n\ncc_setting.name = CC\ncc_setting.value = /opt/local/bin/clang-mp-9.0\ncxx_setting.name = CXX\ncxx_setting.value = /opt/local/bin/clang++-mp-9.0 -stdlib=libc++\nld_setting.name = LD\nld_setting.value = /opt/local/bin/clang-mp-9.0\nldplusplus_setting.name = LDPLUSPLUS\nldplusplus_setting.value = /opt/local/bin/clang++-mp-9.0 -stdlib=libc++\nQMAKE_MAC_XCODE_SETTINGS += cc_setting cxx_setting ld_setting ldplusplus_setting\nQMAKE_LFLAGS += \"-B /usr/bin\"\n}\n```\n\nThe qmake call should add CONFIG+=openmp\n\n```\nqmake -r -spec macx-xcode CONFIG+=debug CONFIG+=enable-osmesa LLVM_PATH=/opt/llvm OSMESA_PATH=/opt/osmesa CONFIG+=openmp QMAKE_CXX='clang++-mp-9.0 -stdlib=libc++' QMAKE_CC=clang-mp-9.0 QMAKE_OBJECTIVE_CXX='clang++-mp-9.0 -stdlib=libc++' QMAKE_OBJECTIVE_CC='clang-mp-9.0 -stdlib=libc++' QMAKE_LD='clang++-mp-9.0 -stdlib=libc++' -r CONFIG+=openmp CONFIG+=enable-osmesa CONFIG+=enable-cairo\n```\n\n\nThen you can just build and run using Xcode\n\n#### Xcode caveats\n\nWhenever the .pro files change, Xcode will try to launch qmake and\nprobably fail because it doesn't find the necessary binaries (qmake,\nmoc, pkg-config, python3-config, etc.). In this case, just open a\nTerminal and relaunch the above command. This will rebuild the Xcode projects.\n\nAlternatively, you can globally add the necessary directories\n(`/usr/local/bin`on Homebrew, `/opt/local/bin` on MacPorts) to you\nPATH (see <http://www.emacswiki.org/emacs/EmacsApp> for instructions).\n\nOn MacPorts, this would look like:\n\n```Shell\nlaunchctl setenv PATH /opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n## Building with cmake (Qt5 only)\n\n### On homebrew\n\n```Shell\nmkdir build\ncd build\ncmake .. -DCMAKE_PREFIX_PATH=\"/opt/homebrew/opt/expat;/opt/homebrew/opt/qt@5;/opt/homebrew/opt/pyside@2\" -DPYTHON_FRAMEWORK_LIBRARIES=/opt/homebrew/Frameworks/Python.framework/Versions/3.9/lib\nmake -j\n```\n\n## Testing\n\n```Shell\n(cd Tests && qmake -r CONFIG+=debug CONFIG+=coverage && make -j4 && ./Tests)\n```\n\n## Generating Python bindings\n\nThis is not required as file generation occurs during build with Qt5 and generated files are already in the repository for Qt4. You would need to run it if you were both under Qt4 and either extend or modify the Python bindings via the\ntypesystem.xml file. See the documentation of shiboken-2.7 for an explanation of the command line arguments.\n\nOn MacPorts with qt4-mac, py310-pyside, py310-shiboken:\n```Shell\nPYVER=3.10 # Set to the python version\nQT_VERSION_MAJOR=4\nrm Engine/Qt${QT_VERSION_MAJOR}/NatronEngine/* Gui/Qt${QT_VERSION_MAJOR}/NatronGui/*\n\nshiboken-${PYVER} --avoid-protected-hack --enable-pyside-extensions --include-paths=../Engine:../Global:/opt/local/include:/opt/local/include/PySide-${PYVER}  --typesystem-paths=/opt/local/share/PySide-${PYVER}/typesystems --output-directory=Engine/Qt${QT_VERSION_MAJOR} Engine/Pyside_Engine_Python.h  Engine/typesystem_engine.xml\n\nshiboken-${PYVER} --avoid-protected-hack --enable-pyside-extensions --include-paths=../Engine:../Gui:../Global:/opt/local/include:/opt/local/include/PySide-${PYVER}  --typesystem-paths=/opt/local/share/PySide-${PYVER}/typesystems:Engine:Shiboken --output-directory=Gui/Qt${QT_VERSION_MAJOR} Gui/Pyside_Gui_Python.h  Gui/typesystem_natronGui.xml\n\ntools/utils/runPostShiboken.sh Engine/Qt${QT_VERSION_MAJOR}/NatronEngine natronengine\ntools/utils/runPostShiboken.sh Gui/Qt${QT_VERSION_MAJOR}/NatronGui natrongui\n```\n\nBuilding Natron with Qt5 should generate the Python bindings automatically, but in case it does not,\nhere are the commands to recreate the Python bindings:\n\nOn MacPorts with qt5, py310-pyside2:\n```Shell\nPYVER=3.10 # Set to the python version\nPYTHON_HOME=$(python${PYVER}-config --prefix)\nQT_VERSION_MAJOR=5\n# Fix a missing link in the MacPorts package\n[ ! -f ${PYTHON_HOME}/lib/python${PYVER}/site-packages/shiboken2_generator/shiboken2-${PYVER} ] && sudo ln -s shiboken2 ${PYTHON_HOME}/lib/python${PYVER}/site-packages/shiboken2_generator/shiboken2-${PYVER}\n\nrm Engine/Qt${QT_VERSION_MAJOR}/NatronEngine/* Gui/Qt${QT_VERSION_MAJOR}/NatronGui/*\n# ${PYTHON_HOME}/lib/python${PYVER}/site-packages/PySide2/include\nshiboken2-${PYVER} --avoid-protected-hack --enable-pyside-extensions --include-paths=.:Engine:Global:libs/OpenFX/include:/opt/local/include:/opt/local/libexec/qt${QT_VERSION_MAJOR}/include:${PYTHON_HOME}/include/python${PYVER}:${PYTHON_HOME}/lib/python${PYVER}/site-packages/PySide2/include --typesystem-paths=${PYTHON_HOME}/lib/python${PYVER}/site-packages/PySide2/typesystems --output-directory=Engine/Qt${QT_VERSION_MAJOR} Engine/Pyside2_Engine_Python.h  Engine/typesystem_engine.xml\n\nshiboken2-${PYVER} --avoid-protected-hack --enable-pyside-extensions --include-paths=.:Engine:Global:libs/OpenFX/include:/opt/local/include:/opt/local/libexec/qt${QT_VERSION_MAJOR}/include:/opt/local/libexec/qt${QT_VERSION_MAJOR}/include/QtWidgets:${PYTHON_HOME}/include/python${PYVER}:${PYTHON_HOME}/lib/python${PYVER}/site-packages/PySide2/include --typesystem-paths=${PYTHON_HOME}/lib/python${PYVER}/site-packages/PySide2/typesystems:Engine:Shiboken --output-directory=Gui/Qt${QT_VERSION_MAJOR} Gui/Pyside2_Gui_Python.h  Gui/typesystem_natronGui.xml\n\ntools/utils/runPostShiboken2.sh Engine/Qt${QT_VERSION_MAJOR}/NatronEngine natronengine\ntools/utils/runPostShiboken2.sh Gui/Qt${QT_VERSION_MAJOR}/NatronGui natrongui\n```\n\non HomeBrew with Qt5/PySide2/Shiboken2:\n```Shell\nPYVER=3.10 # Set to the python version\nexport PATH=\"/usr/local/opt/pyside@2/bin:$PATH\"\nQT_VERSION_MAJOR=5\nrm Engine/Qt${QT_VERSION_MAJOR}/NatronEngine/* Gui/Qt${QT_VERSION_MAJOR}/NatronGui/*\n\nshiboken2 --enable-parent-ctor-heuristic --use-isnull-as-nb_nonzero --avoid-protected-hack --enable-pyside-extensions --include-paths=.:Global:Engine:libs/OpenFX/include:/usr/local/Frameworks/Python.framework/Versions/${PYVER}/include/python${PYVER}:/usr/local/include:/usr/local/opt/pyside@2/include/PySide2:/usr/local/opt/qt@${QT_VERSION_MAJOR}/include  --typesystem-paths=/usr/local/opt/pyside@2/share/PySide2/typesystems --output-directory=Engine/Qt${QT_VERSION_MAJOR} Engine/PySide2_Engine_Python.h  Engine/typesystem_engine.xml\n\nshiboken2 --enable-parent-ctor-heuristic --use-isnull-as-nb_nonzero --avoid-protected-hack --enable-pyside-extensions --include-paths=.:Global:Engine:Gui:libs/OpenFX/include:/usr/local/Frameworks/Python.framework/Versions/${PYVER}/include/python${PYVER}:/usr/local/include:/usr/local/opt/pyside@2/include/PySide2:/usr/local/opt/qt@${QT_VERSION_MAJOR}/include:/usr/local/opt/qt@5/include/QtWidgets  --typesystem-paths=/usr/local/opt/pyside@2/share/PySide2/typesystems:Engine --output-directory=Gui/Qt${QT_VERSION_MAJOR} Gui/PySide2_Gui_Python.h  Gui/typesystem_natronGui.xml\n\ntools/utils/runPostShiboken2.sh Engine/Qt${QT_VERSION_MAJOR}/NatronEngine natronengine\ntools/utils/runPostShiboken2.sh Gui/Qt${QT_VERSION_MAJOR}/NatronGui natrongui\n```\n\n**Note**\nShiboken has a few glitches which needs fixing with some sed commands, run tools/utils/runPostShiboken.sh once shiboken is called\n\n## OpenFX plugins\n\nInstructions to build the [openfx-io](https://github.com/NatronGitHub/openfx-io) and [openfx-misc](https://github.com/NatronGitHub/openfx-misc) sets of plugins can also be found in the [tools/packageOSX.sh](https://github.com/NatronGitHub/Natron/blob/master/tools/packageOSX.sh) script if you are using MacPorts, or in the .travis.yml file in their respective github repositories if you are using Homebrew ([openfx-misc/.travis.yml](https://github.com/NatronGitHub/openfx-misc/blob/master/.travis.yml), [openfx-io/.travis.yml](https://github.com/NatronGitHub/openfx-io/blob/master/.travis.yml).\n\n\nYou can install [TuttleOFX](http://www.tuttleofx.org/) using Homebrew:\n\n```Shell\nbrew tap homebrew/science homebrew/x11 homebrew/python cbenhagen/video\nbrew install tuttleofx\n```\n\n\nOr have a look at the [instructions for building on MacPorts as well as precompiled universal binaries](http://devernay.free.fr/hacks/openfx/#OSXTuttleOFX).\n"
        },
        {
          "name": "INSTALL_WINDOWS.md",
          "type": "blob",
          "size": 13.1552734375,
          "content": "Instructions for installing Natron from sources on Microsoft Windows\n====================================================================\n\n# Installing with MSYS2\n\n[MSYS2](https://sourceforge.net/projects/msys2/) is a unix-like toolchain that can be used to build Windows applications on Windows 8.1/10/11. It provides everything required by Natron and the OFX plug-ins.\n\nFollow the [SDK instructions](tools/MINGW-packages/README.md) to setup your system for building and developing Natron and/or the OFX plug-ins. The rest of this document can be ignored.\n\n### OpenFX\n\nNatron uses the OpenFX API, before building you should make sure it is up to date.\n\nFor that, go under Natron and type\n\n```\ngit submodule update -i --recursive\n```\n\n### Download OpenColorIO-Configs\n\nIn the past, OCIO configs were a submodule, though due to the size of the repository, we have chosen instead\nto make a tarball release and let you download it [here](https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.1.tar.gz).\nPlace it at the root of Natron repository.\n\n***note:*** *If it is name something like: `OpenColorIO-Configs-Natron-v2.0` rename it to `OpenColorIO-Configs`*\n\n### config.pri\n\nThe `config.pri` is used to define the locations of the dependencies. It is probably the most\nconfusing part of the build process.\n\nCreate a `config.pri` file next to the `Project.pro` that will tell the .pro file\nwhere to find those libraries.\n\nYou can fill it with the following proposed code to point to the libraries.\nOf course you need to provide valid paths that are valid on your system.\n\nYou can find more examples specific to distributions below.\n\nINCLUDEPATH is the path to the include files\n\nLIBS is the path to the libs\n\n    ----- copy and paste the following in a terminal -----\n    cat > config.pri << EOF\n    boost: LIBS += -lboost_serialization\n    expat: LIBS += -lexpat\n    expat: PKGCONFIG -= expat\n    cairo: PKGCONFIG -= cairo\n    EOF\n    ----- end -----\n\n***note:*** *the last line for cairo is only necessary if the package for cairo in your distribution\nis lower than version 1.12 (as it is on Ubuntu 12.04 LTS for example).*\n\n### Nodes\n\nNatron's nodes are contained in separate repositories. To use the default nodes, you must also build the following repositories:\n\n    https://github.com/NatronGitHub/openfx-misc\n    https://github.com/NatronGitHub/openfx-io\n\n\nYou'll find installation instructions in the README of both these repositories. Both openfx-misc and openfx-io have submodules as well.\n\nPlugins must be installed in /usr/OFX/Plugins on Linux\nOr in a directory named \"Plugins\" located in the parent directory where the binary lies, e.g.:\n\n\n    bin/\n        Natron\n    Plugins/\n        IO.ofx.bundle\n\n\n## Build\n\nTo build, go into the Natron directory and type:\n\n    qmake -r\n    make\n\nIf everything has been installed and configured correctly, it should build without errors.\n\nIf you want to build in DEBUG mode change the qmake call to this line:\n\n    qmake -r CONFIG+=debug\n\nSome debug options are available for developers of Natron and you can see them in the\nglobal.pri file. To enable an option just add `CONFIG+=<option>` in the qmake call.\n\n# Installing with Visual Studio\n\nThese instructions are outdated, and the preferred way to compile\nNatron on Windows is using MSYS2. Feel free to contribute updated\nVisual Studio instructions.\n\nRequired: Install git, best is the github app.\n\n## Install libraries\n\nIn order to have Natron compiling, first you need to install the required libraries.\nAn alternative is to download the\n[pre-compiled binaries provided by MrKepzie](https://sourceforge.net/projects/natron/files/Natron_Windows_3rdParty.zip/download)\n\nThey contain:\n* Qt 4.8.5 compiled for 64 bits as dlls. 32 bits version can be downloaded from the Qt website (see below)\n* Qt 5.3.0  compiled for 64 bits as dlls. 32 bits version can be downloaded from the Qt website (see below)\n* lib jpeg 8d/9a static MT. You should use the 9a version for OpenImageIO\n* libpng 1.2.51/ 1.6.9 static MT, you should use version 1.6.9 for OpenImageIO and cairo\n* OpenEXR 2.1 static MT\n* OpenImageIO 1.4.8 static MT release\n* libtiff 4.0.3 static MT release\n* zlib 1.2.8 static MT release\n* OpenColorIO 1.0.9 static MT release\n* cairo 1.12.4 static MT release\n* pixman 0.32.4 static MT release (64 bits only, it's easy to compile the 32 bits version yourself and it shouldn't be needed if \nyou use the provided pre-built binary of cairo.).\n\n### *Qt 5.3*\n\nYou'll need to install Qt libraries from [Qt download](http://qt-project.org/downloads). \nYou probably want Qt 5.3.0 for Windows 32-bit (VS 2010, OpenGL, 593 MB)\nNote that by default the binaries provided by Qt are 32 bits, which means you have to compile the 64 bits version yourself... or download\nthe pre-compiled binaries we provide (see above).\n\n### *boost*\n\nYou can download boost from \n(boost download)[http://www.boost.org/users/download/]\nFor now only boost serialisation is required. Follow the build instructions to compile\nboost. You'll need to build a shared | multi-threaded version of the libraries.\nPre-compiled binaries for boost are available here:\nhttp://boost.teeks99.com/\n\n### *OpenFX*\n\nAt the source tree's root, type the following command in the command prompt:\n\n\tgit submodule update -i --recursive\n\t\n(If you cloned the repository with the github app you probably don't need this command.)\n\n### *Expat*\n\nYou need to build expat in order to make OpenFX work.\nThe expat sources are located under the HostSupport folder within OpenFX.\nYou should find a .vcxproj file under\n\\libs\\OpenFX\\HostSupport\\expat-2.0.1\\lib\nOpen it with visual studio and build a static MT release version of expat.\n\nWe're done here for libraries.\n\n### *Cairo 1.14.2*\n\nYou can get the release from http://www.cairographics.org/releases/\nThen this page has a complete answer on how to compile the dependencies:\nhttp://stackoverflow.com/questions/85622/how-to-compile-cairo-for-visual-c-2008-express-edition\nThis will work successfully.\n\n### Download OpenColorIO-Configs\n\nIn the past, OCIO configs were a submodule, though due to the size of the repository, we have chosen instead\nto make a tarball release and let you download it [here](https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.1.tar.gz).\nPlace it at the root of Natron repository.\n\n\n### Add the config.pri file\n\nYou have to define the locations of the required libraries.\nThis is done by creating a .pri file that will tell the .pro where to find those libraries.\n\n- create the config.pri file next to the Project.pro file.\n\nYou can fill it with the following proposed code to point to the libraries.\nOf course you need to provide valid paths that are valid on your system.\n\n`INCLUDEPATH` is the path to the include files\n\n`LIBS` is the path to the libs\n\nHere's an example of a config.pri file that supports both 32bit and 64bit builds:\n\n```\n64bit {\n\nboost {\n        INCLUDEPATH +=  $$quote(C:\\\\boost)\n        CONFIG(release, debug|release): LIBS += -L$$quote(C:\\\\boost\\\\x64) -lboost_serialization-vc100-mt-1_57\n\t\tCONFIG(debug, debug|release):  LIBS += -L$$quote(C:\\\\boost\\\\x64) -lboost_serialization-vc100-mt-gd-1_57\n}\n\nexpat{\n    INCLUDEPATH += $$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron\\\\libs\\\\OpenFX\\\\HostSupport\\\\expat-2.0.1\\\\lib)\n    LIBS += -L$$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron\\\\libs\\\\OpenFX\\\\HostSupport\\\\expat-2.0.1\\\\x64\\\\bin\\\\Release) -llibexpatMT\n    LIBS += shell32.lib\n}\n\ncairo {\n\tINCLUDEPATH += $$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron3rdParty\\\\cairo_1.12\\\\include)\n\tLIBS += -L$$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron3rdParty\\\\cairo_1.12\\\\lib\\\\x64) -lcairo\n}\n\npython {\n\tINCLUDEPATH += $$quote(C:\\\\Python34\\\\include)\n\tLIBS += -L$$quote(C:\\\\Python34\\\\libs) -lpython3\n}\n\npyside {\n\tINCLUDEPATH += $$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide)\n\tINCLUDEPATH += $$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide\\\\QtGui)\n\tINCLUDEPATH += $$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide\\\\QtCore)\n\tINCLUDEPATH += $$quote(C:\\\\Qt\\\\4.8.6_win32\\\\include\\\\QtGui)\n\tLIBS += -L$$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide) -lpyside-python3.4\n}\n\nshiboken {\n\tINCLUDEPATH += $$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\shiboken)\n\tLIBS += -L$$quote(C:\\\\Python34\\\\Lib\\\\site-packages\\\\PySide) -lshiboken-python3.4\n}\n\n}\n\n32bit {\n\n\nboost {\n        INCLUDEPATH +=  $$quote(C:\\\\boost)\n        CONFIG(release, debug|release): LIBS += -L$$quote(C:\\\\boost\\\\win32) -lboost_serialization-vc100-mt-1_57\n\t\tCONFIG(debug, debug|release): LIBS += -L$$quote(C:\\\\boost\\\\win32) -lboost_serialization-vc100-mt-gd-1_57\n}\n\nexpat{\n    INCLUDEPATH += $$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron\\\\libs\\\\OpenFX\\\\HostSupport\\\\expat-2.0.1\\\\lib)\n    LIBS += -L$$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron\\\\libs\\\\OpenFX\\\\HostSupport\\\\expat-2.0.1\\\\win32\\\\bin\\\\Release) -llibexpatMT\n    LIBS += shell32.lib\n}\n\ncairo {\n\tINCLUDEPATH += $$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron3rdParty\\\\cairo_1.12\\\\include)\n\tLIBS += -L$$quote(C:\\\\Users\\\\lex\\\\Documents\\\\GitHub\\\\Natron3rdParty\\\\cairo_1.12\\\\lib\\\\win32) -lcairo\n}\n\npython {\n\tINCLUDEPATH += $$quote(C:\\\\Python34_win32\\\\include)\n\tLIBS += -L$$quote(C:\\\\Python34_win32\\\\libs) -lpython3\n}\n\npyside {\n\tINCLUDEPATH += $$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide)\n\tINCLUDEPATH += $$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide\\\\QtGui)\n\tINCLUDEPATH += $$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\PySide\\\\QtCore)\n\tINCLUDEPATH += $$quote(C:\\\\Qt\\\\4.8.6_win32\\\\include\\\\QtGui)\n\tLIBS += -L$$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide) -lpyside-python3.4\n}\n\nshiboken {\n\tINCLUDEPATH += $$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide\\\\include\\\\shiboken)\n\tLIBS += -L$$quote(C:\\\\Python34_win32\\\\Lib\\\\site-packages\\\\PySide) -lshiboken-python3.4\n}\n}\n```\n\n\n### *Copy the dll's over*\n\nCopy all the required dll's to the executable directory. (Next to Natron.exe)\nIf Natron launches that means you got it all right;) Otherwise windows will prompt you\nfor the missing dll's when launching Natron.\n\n### *Build*\n\n\n\tqmake -r -tp vc -spec win32-msvc2010 CONFIG+=64bit Project.pro -o Project64.sln\n\n(adjust the qmake executable path to your system or add it to the path environment variable).\n\nThe vcproj \"Natron\" might complain of missing includes or linkage errors, if so adjust\nthe settings in the Additional include directories and Additional dependencies tab of\nthe property page of the project.\n\nIf you get the following linker error:\nerror LNK2019: unresolved external symbol WinMain referenced in function __tmainCRTStartup\nOpen the Natron project property pages. Go to Configuration Properties --> Linker --> Command Line.\nIn the Additional Options, add the following: \n     /ENTRY:\"mainCRTStartup\" \n(add a white space after the previous command)\n\nIn 64 bits mode (target x64), qmake doesn't set the target machine, it leaves the default value which is x86.\nYou'll have to set it manually in the properties of the HostSupport/Gui/Engine projects, as following:\nRight click on the project, Configuration Properties,Librarian,General, Target Machine. Set it to Machinex64\n\n\t\n### Generating Python bindings\n\nThis is not required as generated files are already in the repository. You would need to run it if you were to extend or modify the Python bindings via the\ntypesystem.xml file. See the documentation of shiboken for an explanation of the command line arguments.\n\n```\nshiboken  --avoid-protected-hack --enable-pyside-extensions --include-paths=..\\Engine;..\\Global;C:\\Qt\\4.8.6_win32\\include;C:\\Python34\\Lib\\site-packages\\PySide\\include\\PySide --typesystem-paths=C:\\Python34\\Lib\\site-packages\\PySide\\typesystems --output-directory=Engine Engine\\Pyside_Engine_Python.h Engine\\typesystem_engine.xml\nshiboken  --avoid-protected-hack --enable-pyside-extensions --include-paths=..\\Engine;..\\Gui;..\\Global;C:\\Qt\\4.8.6_win32\\includeC;\\Python34\\Lib\\site-packages\\PySide\\include\\PySide  --typesystem-paths=C:\\Python34\\Lib\\site-packages\\PySide\\typesystems;Engine --output-directory=Gui Gui\\Pyside_Gui_Python.h  Gui\\typesystem_natronGui.xml\n```\n\n### 32 bits vs 64 bits builds\n\nDepending on the target architecture the dependencies are not the same. This can be achieved with the switch CONFIG+=64bit or CONFIG+=32bit\nin the qmake call. \nNote that depending on the binary of qmake you're using to generate the visual studio solution file, it will set the Qt libraries in the\nvisual studio solution file to be the ones qmake was compiled with. In other words if you use the qmake downloaded from the qt website, then\nprobably this is 32 bits (you can check it with dumpbin /HEADERS C:\\PATH\\TO\\qmake.exe , in the very first lines of the output: either x86 or x64).\n\nSo if you want to generate the 64 bits solution file with good dependencies make sure to make the qmake call with the 64 bits qmake binary\nprovided in the pre-built binaries.\n\nIn other words, if one wants to build both 32bits and 64bits version, one would call:\n\n\tC:\\PATH\\TO\\32BITS\\QT\\qmake -r -tp vc -spec win32-msvc2010 CONFIG+=32bit Project.pro -o Project32.sln\n\tC:\\PATH\\TO\\64BITS\\QT\\qmake -r -tp vc -spec win32-msvc2010 CONFIG+=64bit Project.pro -o Project64.sln\n\n### Build from the command line with MSBuild\n\n\tMSBuild Project32.sln /p:Configuration=Release;Platform=win32 /t:Natron /m\n\tMSBuild Project64.sln /p:Configuration=Release;Platform=x64 /t:Natron /m\n\n"
        },
        {
          "name": "LATEST_VERSION_README.txt",
          "type": "blob",
          "size": 0.3994140625,
          "content": "The Natron version number (eg 2.5.0) appears in:\n\n- Documentation/source/conf.py in variables version and release\n- App/App.pro in variable VERSION\n- Natron.spec in variable Version\n- Global/Macros.h in variables NATRON_VERSION_MAJOR NATRON_VERSION_MINOR NATRON_VERSION_REVISION\n- This file!\n\nDocumentation/source/index.rst also contains links to the versioned documentation on readthedocs (currently rb-2.5)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "LICENSE_SHORT.txt",
          "type": "blob",
          "size": 0.79296875,
          "content": "Natron, an open source compositing software\n(C) 2018-2023 The Natron developers\n(C) 2013-2018 INRIA and Alexandre Gauthier-Foichat\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n"
        },
        {
          "name": "Natron.rc",
          "type": "blob",
          "size": 1.064453125,
          "content": "#include <windows.h>\n#include \"Global/Macros.h\"\n\nIDI_ICON1 ICON DISCARDABLE \"Gui/Resources/Images/natronIcon256_windows.ico\"\n\nVS_VERSION_INFO VERSIONINFO\nFILEVERSION     NATRON_VERSION_MAJOR,NATRON_VERSION_MINOR,NATRON_VERSION_REVISION,0\nPRODUCTVERSION  NATRON_VERSION_MAJOR,NATRON_VERSION_MINOR,NATRON_VERSION_REVISION,0\n\n//See https://msdn.microsoft.com/en-us/library/windows/desktop/aa381049%28v=vs.85%29.aspx\nBEGIN\n    BLOCK \"StringFileInfo\"\n    BEGIN\n        BLOCK \"040904E4\"\n        BEGIN\n            VALUE \"CompanyName\",        NATRON_ORGANIZATION_NAME\n            VALUE \"FileDescription\",    NATRON_APPLICATION_NAME\n            VALUE \"FileVersion\",        NATRON_VERSION_STRING\n            VALUE \"InternalName\",       NATRON_APPLICATION_NAME\n            VALUE \"LegalCopyright\",     NATRON_COPYRIGHT\n            VALUE \"LegalTrademarks1\",   \"All rights reserved.\"\n            VALUE \"OriginalFilename\",   NATRON_APPLICATION_NAME \".exe\"\n            VALUE \"ProductName\",        NATRON_APPLICATION_NAME\n            VALUE \"ProductVersion\",     NATRON_VERSION_STRING\n        END\n    END\nEND"
        },
        {
          "name": "Natron.spec",
          "type": "blob",
          "size": 2.7109375,
          "content": "Summary: Open source compositing software\nName: Natron\n# The two actively maintained versions (that are merged into master)\nVersion21: 2.1.10\nVersion22: 2.2.10\nVersion23: 2.3.16\nVersion24: 2.4.4\nVersion25: 2.5.0\nVersion30: 3.0.0\n\n# The version for this branch of the sources\nVersion: %{version25}\n\n# The release number (must be incremented whenever changes to this file generate different binaries)\nRelease: 1%{?dist}\nLicense: GPLv2\n\nGroup: System Environment/Base\nURL: http://natrongithub.github.io\n\n# https://github.com/NatronGitHub/Natron/releases/download/%{version}/Natron-%{version}.tar.xz\nSource0: %{name}-%{version}.tar.xz\n# https://github.com/NatronGitHub/Natron/releases/download/2.1.0/Natron-OpenColorIO-Configs-2.1.0.tar.xz\nSource1: %{name}-OpenColorIO-Configs-2.1.0.tar.xz\nBuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root\n\nBuildRequires: fontconfig-devel gcc-c++ expat-devel python-pyside-devel shiboken-devel qt-devel boost-devel pixman-devel glfw-devel cairo-devel\nRequires: fontconfig qt-x11 python-pyside shiboken-libs boost-serialization pixman glfw cairo\n\n%description\nOpen source compositing software. Node-graph based. Similar in functionalities to Adobe After Effects and Nuke by The Foundry.\n\n%prep\n%setup\n%setup -T -D -a 1\n\n%build\nmv Natron-OpenColorIO-Configs-2.1.0 OpenColorIO-Configs\ncat << 'EOF' > config.pri\nboost: LIBS += -lboost_serialization\nPKGCONFIG += expat\nPKGCONFIG += fontconfig\ncairo {\n        PKGCONFIG += cairo\n        LIBS -=  $$system(pkg-config --variable=libdir cairo)/libcairo.a\n}\npyside {\n        PKGCONFIG -= pyside\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside)\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside)/QtCore\n        INCLUDEPATH += $$system(pkg-config --variable=includedir pyside)/QtGui\n        INCLUDEPATH += $$system(pkg-config --variable=includedir QtGui)\n        LIBS += -lpyside-python2.7\n}\nshiboken {\n        PKGCONFIG -= shiboken\n        INCLUDEPATH += $$system(pkg-config --variable=includedir shiboken)\n        LIBS += -lshiboken-python2.7\n}\nEOF\n\nmkdir build\ncd build\nqmake-qt4 -r ../Project.pro PREFIX=/usr CONFIG+=release DEFINES+=QT_NO_DEBUG_OUTPUT\nmake %{?_smp_mflags}\n\n%install\ncd build\nmake INSTALL_ROOT=%{buildroot} install\n\n%clean\n%{__rm} -rf %{buildroot}\n\n%post\nupdate-mime-database /usr/share/mime\nupdate-desktop-database /usr/share/applications\n\n%postun\nupdate-mime-database /usr/share/mime\nupdate-desktop-database /usr/share/applications\n\n%files\n%defattr(-,root,root,-)\n/usr/bin/Natron\n/usr/bin/NatronRenderer\n/usr/share/applications/Natron.desktop\n/usr/share/pixmaps/natronIcon256_linux.png\n/usr/share/pixmaps/natronProjectIcon_linux.png\n/usr/share/mime/packages/x-natron.xml\n/usr/share/OpenColorIO-Configs\n%doc LICENSE.txt\n\n%changelog\n"
        },
        {
          "name": "OpenColorIO-Configs-README.md",
          "type": "blob",
          "size": 0.3310546875,
          "content": "As mentionned in the INSTALL files, the default OpenColorIO\nconfiguration files must be downloaded and unpacked at the root of the\nNatron source tree, using something like:\n\n    curl -k -L https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.4.tar.gz | tar zxf -\n    mv OpenColorIO-Configs-Natron-v2.4 OpenColorIO-Configs\n"
        },
        {
          "name": "OpenColorIO-Configs.pri",
          "type": "blob",
          "size": 1.28515625,
          "content": "\nOCIO.files = \\\n$$PWD/OpenColorIO-Configs/blender \\\n$$PWD/OpenColorIO-Configs/natron \\\n$$PWD/OpenColorIO-Configs/nuke-default\n\nOCIO_extra.files = \\\n$$PWD/OpenColorIO-Configs/ChangeLog \\\n$$PWD/OpenColorIO-Configs/README \\\n$$PWD/OpenColorIO-Configs/aces_0.1.1 \\\n$$PWD/OpenColorIO-Configs/aces_0.7.1 \\\n$$PWD/OpenColorIO-Configs/blender-cycles \\\n$$PWD/OpenColorIO-Configs/spi-anim \\\n$$PWD/OpenColorIO-Configs/spi-vfx\n\n# ACES 1.0.1 also has baked luts and python files which we don't want to bundle\nOCIO_aces_101.files = \\\n$$PWD/OpenColorIO-Configs/aces_1.0.1/config.ocio \\\n$$PWD/OpenColorIO-Configs/aces_1.0.1/luts\n\n\nmacx {\n    OCIO.path = Contents/Resources/OpenColorIO-Configs\n    QMAKE_BUNDLE_DATA += OCIO\n    OCIO_extra.path = Contents/Resources/OpenColorIO-Configs\n    #QMAKE_BUNDLE_DATA += OCIO_extra\n    OCIO_aces_101.path = Contents/Resources/OpenColorIO-Configs/aces_1.0.1\n    #QMAKE_BUNDLE_DATA += OCIO_aces_101\n}\n!macx {\n    OCIO.path = $$OUT_PWD/OpenColorIO-Configs\n    unix {\n        isEmpty(PREFIX) {\n            PREFIX = /usr/local\n        }\n        OCIO.path = $${PREFIX}/share/OpenColorIO-Configs\n    }\n    INSTALLS += OCIO\n    OCIO_extra.path = $$OUT_PWD/OpenColorIO-Configs\n    #INSTALLS += OCIO_extra\n    OCIO_aces_101.path = $$OUT_PWD/OpenColorIO-Configs/aces_1.0.1\n    #INSTALLS += OCIO_aces_101\n}\n"
        },
        {
          "name": "Project-makefile.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "Project-xcode.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "Project.pro",
          "type": "blob",
          "size": 4.1552734375,
          "content": "# ***** BEGIN LICENSE BLOCK *****\n# This file is part of Natron <https://natrongithub.github.io/>,\n# (C) 2018-2023 The Natron developers\n# (C) 2013-2018 INRIA and Alexandre Gauthier\n#\n# Natron is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Natron is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>\n# ***** END LICENSE BLOCK *****\n\nTEMPLATE = subdirs\n\nCONFIG(enable-breakpad) {\n    include(breakpadpro.pri)\n}\n\nSUBDIRS += \\\n    HostSupport \\\n    gflags \\\n    glog \\\n    ceres \\\n    libmv \\\n    openMVG \\\n    qhttpserver \\\n    hoedown \\\n    libtess \\\n    Engine \\\n    Renderer \\\n    Gui \\\n    Tests \\\n    PythonBin \\\n    App\n\n# where to find the sub projects - give the folders\ngflags.subdir      = libs/gflags\nglog.subdir        = libs/glog\nceres.subdir       = libs/ceres\nlibmv.subdir       = libs/libmv\nopenMVG.subdir     = libs/openMVG\nqhttpserver.subdir = libs/qhttpserver\nhoedown.subdir     = libs/hoedown\nlibtess.subdir     = libs/libtess\n\n# what subproject depends on others\nglog.depends = gflags\nceres.depends = glog gflags\nlibmv.depends = gflags ceres\nopenMVG.depends = ceres\nEngine.depends = libmv openMVG HostSupport libtess ceres\nRenderer.depends = Engine\nGui.depends = Engine qhttpserver\nTests.depends = Gui Engine\nApp.depends = Gui Engine\n\nOTHER_FILES += \\\n    Global/Enums.h \\\n    Global/GLIncludes.h \\\n    Global/GlobalDefines.h \\\n    Global/KeySymbols.h \\\n    Global/Macros.h \\\n    Global/ProcInfo.h \\\n    Global/QtCompat.h \\\n    global.pri \\\n    config.pri\n\ninclude(global.pri)\ninclude(libs.pri)\n\nisEmpty(CONFIG_SET) {\n    message(\"You did not select a config option for the build. Defaulting to Devel. You can choose among  (snapshot | alpha | beta | RC | stable | custombuild). For custombuild you need to define the environment variable BUILD_USER_NAME. Also you can give a revision number to the version of Natron with the environment variable BUILD_NUMBER (e.g: RC1, RC2 etc...)\")\n}\n\n*-xcode {\n  # Qt 4.8.5's XCode generator has a bug and places moc_*.cpp files next to the sources instead of inside the build dir\n  # However, setting the MOC_DIR doesn't fix that (Xcode build fails)\n  # Simple rtule: don't use Xcode\n  #MOC_DIR = $$OUT_PWD\n  warning(\"Xcode generator wrongly places the moc files in the source directory. You thus cannot compile with different Qt versions using Xcode.\")\n}\n\nCONFIG(debug, debug|release){\n    message(\"Compiling in DEBUG mode.\")\n} else {\n    message(\"Compiling in RELEASE mode.\")\n}\n\naddresssanitizer {\n  *g++* | *clang* {\n    message(\"Compiling with AddressSanitizer (for gcc >= 4.8 and clang). Set the ASAN_SYMBOLIZER_PATH environment variable to point to the llvm-symbolizer binary, or make sure llvm-symbolizer in in your PATH.\")\n    message(\"For example, with Qt4 on macOS:\")\n    message(\"- with MacPorts:\")\n    message(\"  sudo port install clang-5.0\")\n    message(\"  export ASAN_SYMBOLIZER_PATH=/opt/local/bin/llvm-symbolizer-mp-5.0\")\n    message(\"  qmake QMAKE_CC=clang-mp-5.0 QMAKE_CXX='clang++-mp-5.0 -stdlib=libc++' QMAKE_LINK='clang++-mp-5.0 -stdlib=libc++' QMAKE_OBJECTIVE_CC='clang-mp-5.0 -stdlib=libc++' QMAKE_OBJECTIVE_CXX='clang++-mp-5.0 -stdlib=libc++' CONFIG+=addresssanitizer ...\")\n    message(\"- with homebrew:\")\n    message(\"  brew install llvm\")\n    message(\"  export ASAN_SYMBOLIZER_PATH=/usr/local/opt/llvm@11/bin/llvm-symbolizer\")\n    message(\"  qmake QMAKE_CC=/usr/local/opt/llvm@11/bin/clang QMAKE_CXX='/usr/local/opt/llvm@11/bin/clang++ -stdlib=libc++' QMAKE_LINK='/usr/local/opt/llvm@11/bin/clang++ -stdlib=libc++' QMAKE_OBJECTIVE_CC='/usr/local/opt/llvm@11/bin/clang -stdlib=libc++' QMAKE_OBJECTIVE_CXX='/usr/local/opt/llvm@11/bin/clang++ -stdlib=libc++' CONFIG+=addresssanitizer ...\")\n    message(\"see http://clang.llvm.org/docs/AddressSanitizer.html\")\n  }\n}\n"
        },
        {
          "name": "PythonBin",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.7939453125,
          "content": "# Natron\n\n[![GPL2 License](http://img.shields.io/:license-gpl2-blue.svg?)](https://github.com/NatronGitHub/Natron/blob/master/LICENSE.txt) [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md) [![Build Status](https://api.travis-ci.org/NatronGitHub/Natron.svg?branch=RB-2.4)](https://travis-ci.org/NatronGitHub/Natron) [![Coverage Status](https://coveralls.io/repos/NatronGitHub/Natron/badge.svg?branch=master)](https://coveralls.io/r/NatronGitHub/Natron?branch=master) [![Documentation Status](https://readthedocs.org/projects/natron/badge/?version=rb-2.4)](http://natron.readthedocs.io/en/rb-2.4/) [![Packaging status](https://repology.org/badge/tiny-repos/natron.svg)](https://repology.org/project/natron/badges) [![OpenHub](https://www.openhub.net/p/natron/widgets/project_thin_badge?format=gif&ref=Thin+badge)](https://www.openhub.net/p/Natron)\n\n---\n\nNatron is a free, open-source (GPLv2 license) video compositor, similar in functionality to Adobe After Effects, Foundry's Nuke, or Blackmagic Fusion. It is portable and cross-platform (GNU/Linux, macOS, and Microsoft Windows).\n\n- Website: https://natrongithub.github.io\n- Source code: https://github.com/NatronGitHub/Natron\n- Forum: https://discuss.pixls.us/c/software/natron\n- Discord: https://discord.gg/cpMj5p3Fv5\n- User documentation: https://natron.readthedocs.io/\n\n## Help wanted\n\nNatron is looking for developers and maintainers! You can help develop and maintain Natron if you have the following skills:\n\n- [Git](https://en.wikipedia.org/wiki/Git) and [GitHub](https://en.wikipedia.org/wiki/GitHub)\n- [C++](https://en.wikipedia.org/wiki/C%2B%2B) (Natron source is still C++98, but switching to [C++11](https://en.wikipedia.org/wiki/C%2B%2B11) or [C++14](https://en.wikipedia.org/wiki/C%2B%2B11) should be straightforward if needed)\n- [Design patterns](https://en.wikipedia.org/wiki/Software_design_pattern)\n- [Qt](https://www.qt.io/) (Natron builds with Qt4 or Qt5, but does not yet support Qt6)\n- Basic knowledge of [OpenGL](https://en.wikipedia.org/wiki/OpenGL)\n- Basic knowledge of [Python](<https://en.wikipedia.org/wiki/Python_(programming_language)>)\n\nFor more information, see the \"Contributing\" section below.\n\nIf you are willing to help, please contact the development team on the [pixls.us Natron forum](https://discuss.pixls.us/c/software/natron).\n\n## Features\n\n- 32-bit floating-point linear color processing pipeline.\n- Color management handled by [OpenColorIO](https://opencolorio.org/).\n- Dozens of video and image formats supported such as: H264, DNxHR, EXR, DPX, TIFF, JPG, PNG through [OpenImageIO](https://github.com/OpenImageIO/oiio) and [FFmpeg](https://ffmpeg.org/).\n- Support for many free, open-source, and commercial OpenFX plugins—currently almost all features of OpenFX v1.4 are supported. Those marked with (+) are included in the binary releases.\n  - [OpenFX-IO](https://github.com/NatronGitHub/openfx-io) (+)\n  - [OpenFX-Misc](https://github.com/NatronGitHub/openfx-misc) (+)\n  - [OpenFX-G'MIC](https://github.com/NatronGitHub/openfx-gmic) (+)\n  - [OpenFX-Arena](https://github.com/NatronGitHub/openfx-arena) (+)\n  - [All OFX products from RevisionFX](http://www.revisionfx.com)\n  - [Boris FX](https://borisfx.com/) OpenFX plugins, including Sapphire\n  - [Furnace by The Foundry](http://www.thefoundry.co.uk/products/furnace/)\n  - ...And many more! Please tell us if you successfully tested other commercial plugins.\n- Intuitive user interface: Natron aims not to break habits by providing an intuitive and familiar user interface. It is possible to customize and separate the graphical user interface on any number of screens. You can re-use your layouts and share your layout files (.nl).\n- Performance: In Natron, anything you do produces real-time feedback in the viewer thanks to the optimized multi-threaded rendering pipeline and support for proxy rendering (computing at a lower resolution to speed up rendering).\n- Multi-task: Natron can render multiple graphs at the same time. It can also be used as a background process in headless mode.\n- Recover easily from bugs: Natron's auto-save system detects inactivity and saves your work for yourself. Natron is also able to render frames in a separate process, meaning that any crash in the main application would not crash the ongoing render (and the other way around).\n- Project files saved in XML and easily editable by humans.\n- Fast & interactive viewer - Smooth & accurate zooming/panning even for very large image sizes (tested on 27k x 30k images).\n- Real-time playback: Natron offers real-time playback with excellent performance thanks to its RAM/Disk cache. Once a frame is rendered it can be reproduced instantly afterward, even for large image sizes.\n- Animate your visual effects: Natron offers a simple and efficient way to deal with keyframes with a very accurate and intuitive Curve Editor as well as a Dope Sheet to quickly edit your motion graphics.\n- Command-line rendering: Natron is capable of running without a GUI for batch rendering with scripts or on a render farm.\n- Rotoscoping, rotopainting, and tracking support\n- Multi-view workflow: Natron saves time by keeping all the views in the same stream. You can separate the views at any time with the OneView node.\n- Python scripting integration:\n\n  - Parameters expressions\n  - User-defined parameters\n  - Nodes groups as Python scripts\n  - Script editor to control the application overall\n  - User-defined python callbacks to respond to particular checkpoints of the internals of the software (change of a parameter, before rendering a frame, etc…)\n  - Integration of Pyside to the GUI so that the interface is extensible with new menus and windows\n\n- Multi-channel compositing: Natron can manipulate multi-layered EXR files thanks to OpenImageIO. Users can choose to work with any layer or channel on any node, new custom layers can also be created.\n\n## Requirements\n\nA machine running one of the supported operating systems (GNU/Linux, macOS, Microsoft Windows), and a 32-bits x86 or 64-bits x86-64 processor.\n\nAn OpenGL 2.0 compatible graphics card is needed to run Natron (2.1+) with hardware-accelerated rendering. Other graphics cards work with software-only rendering (see below).\n\nThe following graphics cards are supported for hardware-accelerated rendering:\n\n- Intel GMA 3150 (Linux-only)\n- Intel GMA X3xxx (Linux-only)\n- Intel GMA X4xxx (Windows 7 & Linux)\n- Intel HD (Ironlake) (Windows 7 & Linux)\n- Intel HD 2000/3000 (Sandy Bridge) (Windows 7/Linux/Mac)\n- Intel HD 4000 and greater (All platforms)\n- Nvidia GeForce 6 series and greater\n- Nvidia Quadro FX and greater\n- Nvidia Quadro NVS 285 and greater\n- ATI/AMD Radeon R300 and greater\n- ATI/AMD FireGL T2-64 and greater (FirePro)\n\nOn Windows and Linux you can enable software rendering. On Linux, enable the environment variable LIBGL_ALWAYS_SOFTWARE=1 before running Natron. On Windows, enable the legacy hardware package in the installer.\n\n## Installing\n\n### Binary distribution\n\nStandalone binary distributions of Natron are available for GNU/Linux, Windows, and macOS on [GitHub](https://github.com/NatronGitHub/Natron/releases), or from [the Natron web site](https://natrongithub.github.io/#download). These distributions contain Natron and four included sets of OpenFX plugins:\n\n- [openfx-io](https://github.com/NatronGitHub/openfx-io/)\n- [openfx-misc](https://github.com/NatronGitHub/openfx-misc)\n- [openfx-arena](https://github.com/NatronGitHub/openfx-arena)\n- [openfx-gmic](https://github.com/NatronGitHub/openfx-gmic)\n\nAlternatively, on Linux systems you can install Natron through flatpak: ``` flatpak install fr.natron.Natron ```\n\nFor each architecture / operating system, you can either download a stable release, a release candidate (if available), or one of the latest snapshots. Note that snapshots contain the latest features and bug fixes, but may be unstable.\n\n### Building and installing from source\n\nThere are instructions for building Natron and the basic plugins from source is this directory on various architectures / operating systems:\n\n- [GNU/Linux](INSTALL_LINUX.md)\n- [macOS](INSTALL_MACOS.md)\n- [FreeBSD](INSTALL_FREEBSD.md)\n- [Windows](INSTALL_WINDOWS.md)\n\nThis documentation may be slightly outdated, so do not hesitate to submit updated build instructions, especially for the various GNU/Linux distributions.\n\n### Automatic build scripts & other development tools\n\nThese can be found in [tools/README.md](tools/README.MD)\n\nThese scripts run on virtual machines running a specific operating system, setting these up is more complicated than the basic build process linked above.\n\n## Contributing\n\n### Low hanging fruits\n\nYou should start contributing to the Natron project by first picking an easy task, and then gradually taking more difficult tasks. Here are a few sample tasks, by order of difficulty (from 0 to 10):\n\n- 2: Pyplugs, Shadertoy scripts (there are still developers for these, see https://github.com/NatronGitHub/natron-plugins )\n- 4: Write an OpenFX plugin, starting from an example in [openfx-misc](https://github.com/NatronGitHub/openfx-misc) or from the [official OpenFX](https://github.com/NatronGitHub/openfx) examples, for example try to make an OpenFX plugin from a widely-used PyPlug. There are a few OFX plugin developers in the community.\n- 5: Build Natron locally (on any system)\n- 7: Compile a redistributable Natron binary (Linux is easier since we build and ship most dependencies using the build scripts)\n- 9: Fix a simple Natron bug\n- 10: Add new functionality to Natron (see issues)\n\n### Logistics\n\nWe coordinate development through the [GitHub issue tracker](https://github.com/NatronGitHub/Natron/issues).\n\nThe main development branch is called [\"master\"](https://github.com/NatronGitHub/Natron/tree/master). The stable version is on branch RB-2.5.\n\nAdditionally, each stable release supported has a branch on its own. For example, the stable release of the v1.0. and all its bug fixes should go into that branch. At some point, a version that is no longer supported will get removed from GitHub's branches and only a release tag will be available to get the source code at that point.\n\nFeel free to report bugs, discuss tasks, or pick up work there. If you want to make changes, please fork, edit, and [send us a pull request](https://github.com/NatronGitHub/Natron/pull/new/RB-2.5), preferably on the [\"RB-2.5\"](https://github.com/NatronGitHub/Natron/tree/RB-2.5) branch.\n\nThere's a `.git-hooks` directory in the root. This contains a `pre-commit` hook that verifies code styling before accepting changes. You can add this to your local repository's `.git/hooks/` directory by doing the following:\n\n```shell\ncd Natron\nmkdir .git/hooks\nln -s ../../.git-hooks/pre-commit .git/hooks/pre-commit\n```\n\nPull requests that don't match the project code style are still likely to be accepted after manually formatting and amending your changeset. The formatting tool (`astyle`) is completely automated; please try to use it.\n"
        },
        {
          "name": "README_breakpad.md",
          "type": "blob",
          "size": 1.34375,
          "content": "Breakpad is an open source crash reporting system.\n\nThe breakpad-specific parts in the Natron source code are enabled by adding CONFIG+=enable-breakpad to the qmake options.\n\nIt consists in:\n\n- `breakpadpro.pri`: breakpad-specific additions to Project.pro)\n- `breakpadclient.pri`: included by global.pri\n- `BreakpadClient`: the breakpad client library used by `CrashReporter` and `CrashReporterCLI`\n- `CrashReporter`: the crash reporter executable (GUI version, monitors crashes by `Natron`)\n- `CrashReporterCLI`: the crash reporter executable (command-line version, monitors crashes by `NatronRenderer`)\n- `libs/google-breakpad`: a submodule that points to https://github.com/NatronGitHub/google-breakpad which is a fork of https://github.com/google/breakpad \n\n\nThere are several issues with breakpad, see:\n\n- https://github.com/NatronGitHub/Natron/issues/219\n- https://github.com/NatronGitHub/Natron/issues/145\n- https://github.com/NatronGitHub/Natron/issues/143\n\nTODO:\n\n- fork https://github.com/google/breakpad\n- checkout the version from Sep 6, 2015 (https://github.com/google/breakpad/commit/2d450f312b4abf567f6fc82b6cb66d39fe64f08f, or maybe https://github.com/google/breakpad/commit/3f4d090d70c3f5fbeb9b6e646a079631f1ebf05b which is the last version on https://chromium.googlesource.com/external/google-breakpad)\n- re-apply local changes, including MinGW fixes\n- test\n"
        },
        {
          "name": "Renderer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Shiboken",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "breakpadclient.pri",
          "type": "blob",
          "size": 2.6826171875,
          "content": "DEFINES += NATRON_USE_BREAKPAD\nBREAKPAD_PATH = $$PWD/libs/google-breakpad/src\nINCLUDEPATH += $$BREAKPAD_PATH\nDEPENDPATH += $$BREAKPAD_PATH\n\n################\n# BreakpadClient\n\nstatic-breakpadclient {\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/x64/release/ -lBreakpadClient\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/x64/debug/ -lBreakpadClient\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/win32/release/ -lBreakpadClient\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/win32/debug/ -lBreakpadClient\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/release/ -lBreakpadClient\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/debug/ -lBreakpadClient\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/build/Release/ -lBreakpadClient\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../BreakpadClient/build/Debug/ -lBreakpadClient\n        else:unix: LIBS += -L$$OUT_PWD/../BreakpadClient/ -lBreakpadClient\n}\n\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/x64/release/libBreakpadClient.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/x64/debug/libBreakpadClient.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/win32/release/libBreakpadClient.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/win32/debug/libBreakpadClient.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/release/libBreakpadClient.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/debug/libBreakpadClient.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/release/BreakpadClient.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/debug/BreakpadClient.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/build/Release/libBreakpadClient.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/build/Debug/libBreakpadClient.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../BreakpadClient/libBreakpadClient.a\n}\n\n} # static-breakpadclient\n"
        },
        {
          "name": "breakpadpro.pri",
          "type": "blob",
          "size": 0.177734375,
          "content": "SUBDIRS += \\\nBreakpadClient \\\nCrashReporter \\\nCrashReporterCLI\n\n# what subproject depends on others\nCrashReporter.depends = BreakpadClient\nCrashReporterCLI.depends = BreakpadClient\n\n"
        },
        {
          "name": "build-configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "config-homebrew.pri",
          "type": "blob",
          "size": 1.9296875,
          "content": "# Edit the following if the homebrew prefix is different.\n# Older homebrew installations use /usr/local instead of /opt/homebrew\nHOMEBREW = /usr/local\n\nboost: INCLUDEPATH += $$HOMEBREW/include\nboost: LIBS += -L$$HOMEBREW/lib -lboost_serialization-mt -lboost_thread-mt -lboost_system-mt\n\nopenmp {\n  # clang 12+ is OK to build Natron, but libomp 12+ has a bug on macOS when\n  # lanching tasks from a background thread, see https://bugs.llvm.org/show_bug.cgi?id=50579\n  LIBS += -L$$HOMEBREW/opt/llvm@11/lib -lomp\n  QMAKE_CC = $$HOMEBREW/opt/llvm@11/bin/clang\n  QMAKE_CXX = $$HOMEBREW/opt/llvm@11/bin/clang++\n  # Recent clang cannot compile QtMac.mm\n  QMAKE_OBJECTIVE_CC = clang\n  QMAKE_OBJECTIVE_CXX = clang++\n  QMAKE_LINK = $$QMAKE_CXX\n  INCLUDEPATH += $HOMEBREW/include\n  cc_setting.name = CC\n  cc_setting.value = $$QMAKE_CC\n  cxx_setting.name = CXX\n  cxx_setting.value = $$QMAKE_CXX\n  # These settings are useless, unless someone finds out if there is a variable\n  # to override the Objective-C compiler.\n  objective_cc_setting.name = OBJECTIVE_CC\n  objective_cc_setting.value = $$QMAKE_OBJECTIVE_CC\n  objective_cxx_setting.name = OBJECTIVE_CXX\n  objective_cxx_setting.value = $$QMAKE_OBJECTIVE_CXX\n  ld_setting.name = LD\n  ld_setting.value = $$QMAKE_CC\n  ldxx_setting.name = LDPLUSPLUS\n  ldxx_setting.value = $$QMAKE_CXX\n  QMAKE_MAC_XCODE_SETTINGS += cc_setting cxx_setting objective_cc_setting objective_cxx_setting ld_setting ldxx_setting\n  QMAKE_FLAGS = \"-B /usr/bin\"\n\n  # clang (as of 5.0) does not yet support index-while-building functionality\n  # present in Xcode 9, and Xcode 9's clang does not yet support OpenMP\n  compiler_index_store_enable_setting.name = COMPILER_INDEX_STORE_ENABLE\n  compiler_index_store_enable_setting.value = NO\n  QMAKE_MAC_XCODE_SETTINGS += compiler_index_store_enable_setting\n\n  # Xcode 9 compiles for 10.13 by default\n#  sdkroot_setting.name = SDKROOT\n#  sdkroot_setting.value = macosx10.14\n#  QMAKE_MAC_XCODE_SETTINGS += sdkroot_setting\n}\n"
        },
        {
          "name": "config-macports.pri",
          "type": "blob",
          "size": 2.7099609375,
          "content": "boost {\n  BOOST_VERSION = 1.76\n  INCLUDEPATH += /opt/local/libexec/boost/$$BOOST_VERSION/include\n  LIBS += -L/opt/local/libexec/boost/$$BOOST_VERSION/lib -lboost_serialization-mt\n}\nequals(QT_MAJOR_VERSION, 5) {\n  shiboken:  SHIBOKEN=shiboken2-$$PYVER\n  shiboken:  INCLUDEPATH += $$PYTHON_SITE_PACKAGES/shiboken2_generator/include\n  shiboken:  LIBS += -L$$PYTHON_SITE_PACKAGES/shiboken2 -lshiboken2.cpython-$$PYVERNODOT-darwin.$${QT_MAJOR_VERSION}.$${QT_MINOR_VERSION}\n  shiboken:  QMAKE_RPATHDIR += $$PYTHON_SITE_PACKAGES/shiboken2\n  pyside:    INCLUDEPATH += $$PYTHON_SITE_PACKAGES/PySide2/include\n  pyside:    INCLUDEPATH += $$PYTHON_SITE_PACKAGES/PySide2/include/QtCore\n  pyside:    INCLUDEPATH += $$PYTHON_SITE_PACKAGES/PySide2/include/QtGui\n  pyside:    INCLUDEPATH += $$PYTHON_SITE_PACKAGES/PySide2/include/QtWidgets\n  pyside:    LIBS += -L$$PYTHON_SITE_PACKAGES/PySide2 -lpyside2.cpython-$$PYVERNODOT-darwin.$${QT_MAJOR_VERSION}.$${QT_MINOR_VERSION}\n  pyside:    QMAKE_RPATHDIR += $$PYTHON_SITE_PACKAGES/PySide2\n  pyside:    TYPESYSTEMPATH *= $$PYTHON_SITE_PACKAGES/PySide2/typesystems\n}\n\nmacx:openmp {\n  # libomp 12+ has a bug on macOS when lanching tasks from a background thread,\n  # see tools/MacPorts/lang/libomp/README.md\n  LIBS += -L/opt/local/lib  -L/opt/local/lib/libomp -liomp5\n  # clang 17 and 18 with -fopenmp links with @rpath/libc++.1.dylib instead\n  # of /usr/lib/libc++.1.dylib, so let's use clang 16 for now.\n  QMAKE_CC = /opt/local/bin/clang-mp-16\n  QMAKE_CXX = /opt/local/bin/clang++-mp-16\n  # Recent clang cannot compile QtMac.mm\n  QMAKE_OBJECTIVE_CC = clang\n  QMAKE_OBJECTIVE_CXX = clang++\n  QMAKE_LINK = $$QMAKE_CXX\n  INCLUDEPATH += /opt/local/include /opt/local/include/libomp\n  cc_setting.name = CC\n  cc_setting.value = $$QMAKE_CC\n  cxx_setting.name = CXX\n  cxx_setting.value = $$QMAKE_CXX\n  # These settings are useless, unless someone finds out if there is a variable\n  # to override the Objective-C compiler.\n  objective_cc_setting.name = OBJECTIVE_CC\n  objective_cc_setting.value = $$QMAKE_OBJECTIVE_CC\n  objective_cxx_setting.name = OBJECTIVE_CXX\n  objective_cxx_setting.value = $$QMAKE_OBJECTIVE_CXX\n  ld_setting.name = LD\n  ld_setting.value = $$QMAKE_CC\n  ldxx_setting.name = LDPLUSPLUS\n  ldxx_setting.value = $$QMAKE_CXX\n  QMAKE_MAC_XCODE_SETTINGS += cc_setting cxx_setting objective_cc_setting objective_cxx_setting ld_setting ldxx_setting\n  QMAKE_FLAGS = \"-B /usr/bin\"\n\n  # clang (as of 12.0.1) does not yet support index-while-building functionality\n  # present in Xcode 9 and later, and Xcode's clang (as of 13.0) does not yet support OpenMP\n  compiler_index_store_enable_setting.name = COMPILER_INDEX_STORE_ENABLE\n  compiler_index_store_enable_setting.value = NO\n  QMAKE_MAC_XCODE_SETTINGS += compiler_index_store_enable_setting\n}\n"
        },
        {
          "name": "global.pri",
          "type": "blob",
          "size": 23.6474609375,
          "content": "# ***** BEGIN LICENSE BLOCK *****\n# This file is part of Natron <https://natrongithub.github.io/>,\n# (C) 2018-2023 The Natron developers\n# (C) 2013-2018 INRIA and Alexandre Gauthier\n#\n# Natron is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Natron is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>\n# ***** END LICENSE BLOCK *****\n\nCONFIG += c++17\n\n# libs may modify the config (eg openmp), so it must be included before\ninclude(libs.pri)\n\nCONFIG += exceptions warn_on no_keywords\nDEFINES += OFX_EXTENSIONS_NUKE OFX_EXTENSIONS_TUTTLE OFX_EXTENSIONS_VEGAS OFX_SUPPORTS_PARAMETRIC OFX_EXTENSIONS_TUTTLE OFX_EXTENSIONS_NATRON OFX_EXTENSIONS_RESOLVE OFX_SUPPORTS_OPENGLRENDER\nDEFINES += OFX_SUPPORTS_MULTITHREAD\nDEFINES += OFX_SUPPORTS_DIALOG\n#Commented-out because many plug-in vendors do not implement it correctly\n#DEFINES += OFX_SUPPORTS_DIALOG_V1\n\n#Since in Natron and OpenFX all strings are supposed UTF-8 and that the constructor\n#for QString(const char*) assumes ASCII strings, we may run into troubles\nDEFINES += QT_NO_CAST_FROM_ASCII\n\n# To run Natron without Python functionnalities (for debug purposes)\nrun-without-python {\n    message(\"Natron will run (not build) without Python\")\n    DEFINES += NATRON_RUN_WITHOUT_PYTHON\n} else {\n    # from <https://docs.python.org/3/c-api/intro.html#include-files>:\n    # \"Since Python may define some pre-processor definitions which affect the standard headers on some systems, you must include Python.h before any standard headers are included.\"\n    CONFIG += python\n    python3 {\n      PYV=3\n      PY_PKG_SUFFIX=-embed\n      PYTHON_CONFIG_FLAGS=--embed\n    } else {\n      PYV=2\n      PY_PKG_SUFFIX=\n      PYTHON_CONFIG_FLAGS=\n    }\n    # PYVER contains just major.minor\n    PYVER=$$system(python$$PYV -c \\\"import platform; print(\\'.\\'.join(platform.python_version_tuple()[:2]))\\\")\n    PYVERNODOT=$$replace(PYVER,\\\\.,)\n    # PYTHON_VERSION contains major.minor.micro\n    PYTHON_VERSION=$$system(python$$PYV -c \\\"import platform; print(platform.python_version())\\\")\n    # PYTHON_SITE_PACKAGES contains the location of the site-packages directory\n    PYTHON_SITE_PACKAGES=$$system(python$$PYV -c \\\"import site; print(site.getsitepackages()[0])\\\")\n    # User may specify an alternate python2-config from the command-line,\n    # as in \"qmake PYTHON_CONFIG=python2.7-config\"\n    isEmpty(PYTHON_CONFIG) {\n      PYTHON_CONFIG = python$$PYV-config\n    }\n}\n\n*g++* | *clang* | *xcode* {\n#See https://bugreports.qt.io/browse/QTBUG-35776 we cannot use\n# QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO\n# QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO\n# QMAKE_OBJECTIVE_CFLAGS_RELEASE_WITH_DEBUGINFO\n# QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO\n\n    QMAKE_CFLAGS_WARN_ON += -Wall -Wextra -Wmissing-prototypes -Wmissing-declarations -Wno-multichar -Winit-self -Wno-long-long\n    QMAKE_CXXFLAGS_WARN_ON += -Wall -Wextra -Wno-multichar -Winit-self -Wno-long-long\n    *clang* | *xcode* {\n    \t# In file included from <built-in>:1:\n    \t# In file included from /usr/local/Cellar/python@2/2.7.16/Frameworks/Python.framework/Versions/2.7/include/python2.7/Python.h:88:\n    \t# /usr/local/Cellar/python@2/2.7.16/Frameworks/Python.framework/Versions/2.7/include/python2.7/unicodeobject.h:534:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]\n    \t#     register PyObject *obj,     /* Object */\n    \t#     ^~~~~~~~~\n        QMAKE_CXXFLAGS_WARN_ON += -Wno-deprecated-register\n        # Silence clang-10 warnings about deprecated copy (there are too many of these)\n        QMAKE_CXXFLAGS_WARN_ON += -Wno-deprecated-copy\n        # Do not warn about unknown warnings (including the one just above on clang <=9)\n        QMAKE_CXXFLAGS_WARNO_ON += -Wno-unknown-warning-option\n    }\n    #QMAKE_CFLAGS_WARN_ON += -pedantic\n    #QMAKE_CXXFLAGS_WARN_ON += -pedantic\n    #QMAKE_CXXFLAGS_WARN_ON += -Weffc++\n\n    CONFIG(relwithdebinfo) {\n        CONFIG += release\n        DEFINES *= NDEBUG\n        QMAKE_CXXFLAGS += -O2 -g\n        QMAKE_CXXFLAGS -= -O3\n        #Remove the -s flag passed in release mode by qmake so binaries don't get stripped\n        QMAKE_LFLAGS_RELEASE =\n    }\n    CONFIG(fast) {\n        QMAKE_CFLAGS_RELEASE += -Ofast\n        QMAKE_CFLAGS_RELEASE -= -O -O2 -O3\n        QMAKE_CXXFLAGS_RELEASE += -Ofast\n        QMAKE_CXXFLAGS_RELEASE -= -O -O2 -O3\n        QMAKE_CFLAGS_DEBUG += -Ofast\n        QMAKE_CFLAGS_DEBUG -= -O -O2 -O3\n        QMAKE_CXXFLAGS_DEBUG += -Ofast\n        QMAKE_CXXFLAGS_DEBUG -= -O -O2 -O3\n        QMAKE_CXXFLAGS -= -O -O2 -O3\n        QMAKE_CFLAGS -= -O -O2 -O3\n    }\n}\n\nwin32-g++ {\n    # on Mingw LD is extremely slow in  debug mode and can take hours. Optimizing the build seems to make it faster\n    CONFIG(debug, debug|release){\n        QMAKE_CXXFLAGS += -O -g\n    }\n}\n\nwin32-msvc* {\n    CONFIG(relwithdebinfo) {\n        CONFIG += release\n        DEFINES *= NDEBUG\n        QMAKE_CXXFLAGS_RELEASE += -Zi\n        QMAKE_LFLAGS_RELEASE += /DEBUG /OPT:REF\n    }\n}\n\nCONFIG(debug, debug|release){\n    DEFINES *= DEBUG\n} else {\n    DEFINES *= NDEBUG\n}\n\nCONFIG(enable-breakpad) {\n    include(breakpadclient.pri)\n}\n\nCONFIG(noassertions) {\n#See http://doc.qt.io/qt-4.8/debug.html\n   DEFINES *= NDEBUG QT_NO_DEBUG QT_NO_DEBUG_OUTPUT QT_NO_WARNING_OUTPUT\n}\n\nCONFIG(snapshot) {\n   message(\"Compiling an official snapshot (should only be done on the Natron build farm).\")\n   DEFINES += NATRON_CONFIG_SNAPSHOT\n   CONFIG_SET=1\n}\nCONFIG(alpha) {\n\tmessage(\"Compiling Natron in alpha version (should only be done on the Natron build farm).\")\n\tDEFINES += NATRON_CONFIG_ALPHA\n\tCONFIG_SET=1\n}\nCONFIG(beta) {\n\tmessage(\"Compiling Natron in beta version (should only be done on the Natron build farm).\")\n\tDEFINES += NATRON_CONFIG_BETA\n\tCONFIG_SET=1\n}\nCONFIG(RC) {\n\tmessage(\"Compiling Natron in release candidate version (should only be done on the Natron build farm).\")\n\tDEFINES += NATRON_CONFIG_RC\n\tCONFIG_SET=1\n}\nCONFIG(stable) {\n\tmessage(\"Compiling Natron in stable version (should only be done on the Natron build farm).\")\n\tDEFINES += NATRON_CONFIG_STABLE\n\tCONFIG_SET=1\n}\nCONFIG(custombuild) {\n\tmessage(\"Compiling Natron with a custom version for $$BUILD_USER_NAME\")\n\t#BUILD_USER_NAME should be defined reflecting the user name that should appear in Natron.\n        DEFINES += NATRON_CUSTOM_BUILD_USER_TOKEN=\\\"$$BUILD_USER_NAME\\\"\n\tCONFIG_SET=1\n}\n\nisEmpty(BUILD_NUMBER) {\n\tDEFINES += NATRON_BUILD_NUMBER=0\n} else {\n\tDEFINES += NATRON_BUILD_NUMBER=$$BUILD_NUMBER\n}\n\n# https://qt.gitorious.org/qt-creator/qt-creator/commit/b48ba2c25da4d785160df4fd0d69420b99b85152\nunix:LIBS += $$QMAKE_LIBS_DYNLOAD\n\n*g++* {\n  QMAKE_CXXFLAGS += -ftemplate-depth-1024\n  GCCVer = $$system($$QMAKE_CXX --version)\n  contains(GCCVer,[0-3]\\\\.[0-9]+.*) {\n  } else {\n    contains(GCCVer,4\\\\.7.*) {\n      QMAKE_CXXFLAGS += -Wno-c++11-extensions\n    }\n    contains(GCCVer,[5-9]\\\\.[0-9]+.*) {\n      # Eigen uses std::binder1st which is deprecated in C++11\n      QMAKE_CXXFLAGS += -Wno-deprecated-declarations\n    }\n    contains(GCCVer,[6-9]\\\\.[0-9]+.*) {\n      # older versions of boost (at least up to 1.65.1) fail to compile with:\n      # /usr/include/boost/crc.hpp:350:9: error: right operand of shift expression '(18446744073709551615 << 64)' is >= than the precision of the left operand [-fpermissive]\n      # see https://github.com/MrKepzie/Natron/issues/1659\n      # -fpermissive turns it into a warning\n      QMAKE_CXXFLAGS += -fpermissive\n\n      # clear some Eigen3 warnings\n      QMAKE_CFLAGS += -Wno-int-in-bool-context\n      QMAKE_CXXFLAGS += -Wno-int-in-bool-context\n    }\n    contains(GCCVer,[7-9]\\\\.[0-9]+.*) {\n      # clear a lot of boost warnings\n      QMAKE_CFLAGS += -Wno-expansion-to-defined\n      QMAKE_CXXFLAGS += -Wno-expansion-to-defined\n    }\n  }\n}\n\n# from https://github.com/qt/qtbase/blob/dev/mkspecs/features/qt_common.prf\n# and https://patchwork.ozlabs.org/patch/1009009/#2048261\ngcc:!intel_icc {\n    QMAKE_CXXFLAGS_WARN_ON += -Wvla\n    # GCC 5 fixed -Wmissing-field-initializers for when there are no initializers\n    lessThan(QT_GCC_MAJOR_VERSION, 5): QMAKE_CXXFLAGS_WARN_ON += -Wno-missing-field-initializers\n    # GCC 5 introduced -Wdate-time\n    greaterThan(QT_GCC_MAJOR_VERSION, 4): QMAKE_CXXFLAGS_WARN_ON += -Wdate-time\n    # GCC 6 introduced these\n    greaterThan(QT_GCC_MAJOR_VERSION, 5): QMAKE_CXXFLAGS_WARN_ON += -Wshift-overflow=2 -Wduplicated-cond\n    # GCC 7 has a lot of false positives relating to this, so disable completely\n    greaterThan(QT_GCC_MAJOR_VERSION, 6): QMAKE_CXXFLAGS_WARN_ON += -Wno-stringop-overflow\n    # GCC 9 introduced -Wformat-overflow in -Wall, but it is buggy:\n    greaterThan(QT_GCC_MAJOR_VERSION, 8): QMAKE_CXXFLAGS_WARN_ON += -Wno-format-overflow\n    # GCC 9 has a lot of false positives relating to this, so disable completely\n    greaterThan(QT_GCC_MAJOR_VERSION, 8): QMAKE_CXXFLAGS_WARN_ON += -Wno-deprecated-copy\n}\n\nopenmp {\n  QMAKE_CXXFLAGS += -fopenmp\n  QMAKE_CFLAGS += -fopenmp\n  QMAKE_LFLAGS += -fopenmp\n}\n\nmacx {\n  # Set the pbuilder version to 46, which corresponds to Xcode >= 3.x\n  # (else qmake generates an old pbproj on Snow Leopard)\n  QMAKE_PBUILDER_VERSION = 46\n\n  QMAKE_MACOSX_DEPLOYMENT_VERSION = $$split(QMAKE_MACOSX_DEPLOYMENT_TARGET, \".\")\n  QMAKE_MACOSX_DEPLOYMENT_MAJOR_VERSION = $$first(QMAKE_MACOSX_DEPLOYMENT_VERSION)\n  QMAKE_MACOSX_DEPLOYMENT_MINOR_VERSION = $$last(QMAKE_MACOSX_DEPLOYMENT_VERSION)\n  universal {\n    message(\"Compiling for universal OSX $${QMAKE_MACOSX_DEPLOYMENT_MAJOR_VERSION}.$$QMAKE_MACOSX_DEPLOYMENT_MINOR_VERSION\")\n    contains(QMAKE_MACOSX_DEPLOYMENT_MAJOR_VERSION, 10) {\n      contains(QMAKE_MACOSX_DEPLOYMENT_TARGET, 4)|contains(QMAKE_MACOSX_DEPLOYMENT_MINOR_VERSION, 5) {\n        # OSX 10.4 (Tiger) and 10.5 (Leopard) are x86/ppc\n        message(\"Compiling for universal ppc/i386\")\n        CONFIG += x86 ppc\n      }\n      contains(QMAKE_MACOSX_DEPLOYMENT_MINOR_VERSION, 6) {\n        message(\"Compiling for universal i386/x86_64\")\n        # OSX 10.6 (Snow Leopard) may run on Intel 32 or 64 bits architectures\n        CONFIG += x86 x86_64\n      }\n      # later OSX instances only run on x86_64, universal builds are useless\n      # (unless a later OSX supports ARM)\n    }\n  }\n\n  # link against the CoreFoundation framework for the StandardPaths functionality\n  LIBS += -framework CoreServices\n\n  # link against the AppKit framework for taskbar support\n  LIBS += -framework AppKit\n\n  #// Disable availability macros on macOS\n  #// because we may be using libc++ on an older macOS,\n  #// so that std::locale::numeric may be available\n  #// even on macOS < 10.9.\n  #// see _LIBCPP_AVAILABILITY_LOCALE_CATEGORY\n  #// in /opt/local/libexec/llvm-5.0/include/c++/v1/__config\n  #// and /opt/local/libexec/llvm-5.0/include/c++/v1/__locale\n  DEFINES += _LIBCPP_DISABLE_AVAILABILITY\n\n  # The ObjC API changed with Catalina, use the old one for now\n  # (there is code to use the new API, but it is untested,\n  # search for OBJC_OLD_DISPATCH_PROTOTYPES in the sources).\n  DEFINES += \"OBJC_OLD_DISPATCH_PROTOTYPES=1\"\n}\n\nmacx-clang-libc++ {\n    # in Qt 4.8.7, objective-C misses the stdlib and macos version flags\n    QMAKE_OBJECTIVE_CFLAGS += -mmacosx-version-min=$$QMAKE_MACOSX_DEPLOYMENT_TARGET\n    QMAKE_OBJECTIVE_CXXFLAGS += -stdlib=libc++ -mmacosx-version-min=$$QMAKE_MACOSX_DEPLOYMENT_TARGET\n    QMAKE_OBJECTIVE_CXXFLAGS += -std=c++17\n}\n\nmacx-clang {\n    # in Qt 4.8.7, objective-C misses the stdlib and macos version flags\n    QMAKE_OBJECTIVE_CFLAGS += -mmacosx-version-min=$$QMAKE_MACOSX_DEPLOYMENT_TARGET\n    QMAKE_OBJECTIVE_CXXFLAGS += -mmacosx-version-min=$$QMAKE_MACOSX_DEPLOYMENT_TARGET\n    QMAKE_OBJECTIVE_CXXFLAGS += -std=c++17\n}\n\nCONFIG(debug) {\n    CONFIG += nopch\n}\n\n# CONFIG+=nopch disables precompiled headers\n!nopch {\n  !macx|!universal {\n    # precompiled headers don't work with multiple archs\n    CONFIG += precompile_header\n  }\n}\n\nwin32 {\n  #ofx needs WINDOWS def\n  #microsoft compiler needs _MBCS to compile with the multi-byte character set.\n  #DEFINES += _MBCS\n  DEFINES += WINDOWS COMPILED_FROM_DSP XML_STATIC  NOMINMAX\n  DEFINES += _UNICODE UNICODE\n\n  DEFINES += QHTTP_SERVER_STATIC\n\n  #System library is required on windows to map network share names from drive letters\n  LIBS += -lmpr\n\n\n\n  # Natron requires a link to opengl32.dll and Gdi32 for offscreen rendering\n  LIBS += -lopengl32 -lGdi32\n\n  # taskbar support\n  LIBS += -lole32\n}\n\nwin32-g++ {\n    # -municode is needed for linking because it uses wmain() instead of the traditional main()\n    # https://sourceforge.net/p/mingw-w64/wiki2/Unicode%20apps/\n    QMAKE_CFLAGS += -municode\n    QMAKE_CXXFLAGS += -municode\n    QMAKE_LFLAGS += -municode\n}\n\nwin32-msvc* {\n    CONFIG(64bit){\n        message(\"Compiling for architecture x86 64 bits\")\n        Release:DESTDIR = x64/release\n        Release:OBJECTS_DIR = x64/release/.obj\n        Release:MOC_DIR = x64/release/.moc\n        Release:RCC_DIR = x64/release/.rcc\n        Release:UI_DIR = x64/release/.ui\n\n        Debug:DESTDIR = x64/debug\n        Debug:OBJECTS_DIR = x64/debug/.obj\n        Debug:MOC_DIR = x64/debug/.moc\n        Debug:RCC_DIR = x64/debug/.rcc\n        Debug:UI_DIR = x64/debug/.ui\n    } else {\n        message(\"Compiling for architecture x86 32 bits\")\n        Release:DESTDIR = win32/release\n        Release:OBJECTS_DIR = win32/release/.obj\n        Release:MOC_DIR = win32/release/.moc\n        Release:RCC_DIR = win32/release/.rcc\n        Release:UI_DIR = win32/release/.ui\n\n        Debug:DESTDIR = win32/debug\n        Debug:OBJECTS_DIR = win32/debug/.obj\n        Debug:MOC_DIR = win32/debug/.moc\n        Debug:RCC_DIR = win32/debug/.rcc\n        Debug:UI_DIR = win32/debug/.ui\n    }\n    #System library is required on windows to map network share names from drive letters\n    LIBS += mpr.lib\n}\n\n\nwin32-g++ {\n   # On MingW everything is defined with pkgconfig except boost\n    QT_CONFIG -= no-pkg-config\n    CONFIG += link_pkgconfig\n\n    expat:     PKGCONFIG += expat\n    cairo:     PKGCONFIG += cairo fontconfig\n    equals(QT_MAJOR_VERSION, 5) {\n      shiboken:  INCLUDEPATH += $$system(pkg-config --variable=includedir shiboken2)\n      PYSIDE_INCLUDEDIR = $$system(pkg-config --variable=includedir pyside2)\n      pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR\n      pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtCore\n      pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtGui\n      pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtWidgets\n      shiboken:  PKGCONFIG += shiboken2\n      pyside:    PKGCONFIG += pyside2\n    }\n    equals(QT_MAJOR_VERSION, 4) {\n      shiboken:  PKGCONFIG += shiboken-py$$PYV\n    \tpyside:    PKGCONFIG += pyside-py$$PYV\n      PYSIDE_INCLUDEDIR = $$system(pkg-config --variable=includedir pyside-py$$PYV)\n   \t  pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtCore\n      pyside:    INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtGui\n    }\n    python:    PKGCONFIG += python-$$PYVER$$PY_PKG_SUFFIX\n    boost:     LIBS += -lboost_serialization-mt\n    boost:     LIBS += -lboost_serialization-mt\n\n    #See http://stackoverflow.com/questions/16596876/object-file-has-too-many-sections\n    Debug:\tQMAKE_CXXFLAGS += -Wa,-mbig-obj\n}\n\nunix {\n     #  on Unix systems, only the \"boost\" option needs to be defined in config.pri\n     QT_CONFIG -= no-pkg-config\n     CONFIG += link_pkgconfig\n     expat:     PKGCONFIG += expat\n     # Linking cairo dynamically is OK even on Linux, where it links to X11,\n     # since we need X11 for OpenGL rendering anyway.\n     cairo:     PKGCONFIG += cairo fontconfig\n\n     # GLFW will require a link to X11 on linux and OpenGL framework on OS X\n     linux-*|freebsd-* {\n          LIBS += -lGL -lX11\n         QMAKE_LFLAGS += '-Wl,-rpath,\\'\\$$ORIGIN/../lib\\',-z,origin'\n     } else {\n         LIBS += -framework OpenGL\n     }\n     linux-* {\n         LIBS += -ldl\n     }\n\n     python {\n          #PKGCONFIG += python\n          LIBS += -L$$system($$PYTHON_CONFIG $$PYTHON_CONFIG_FLAGS --exec-prefix)/lib $$system($$PYTHON_CONFIG $$PYTHON_CONFIG_FLAGS --ldflags)\n          PYTHON_CFLAGS = $$system($$PYTHON_CONFIG $$PYTHON_CONFIG_FLAGS --includes)\n          PYTHON_INCLUDEPATH = $$find(PYTHON_CFLAGS, ^-I.*)\n          PYTHON_INCLUDEPATH ~= s/^-I(.*)/\\\\1/g\n          INCLUDEPATH *= $$PYTHON_INCLUDEPATH\n     }\n\n    equals(QT_MAJOR_VERSION, 5) {\n        system(pkg-config --exists pyside2) {\n            shiboken: PKGCONFIG += shiboken2\n            pyside:   PKGCONFIG += pyside2\n            # add QtCore to includes\n            PYSIDE_INCLUDEDIR = $$system(pkg-config --variable=includedir pyside2)\n            pyside:   INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtCore\n            pyside:   INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtGui\n            pyside:   INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtWidgets\n        }\n    }\n\n     equals(QT_MAJOR_VERSION, 4) {\n         # There may be different pyside.pc/shiboken.pc for different versions of python.\n         # pkg-config will probably give a bad answer, unless python2 is the system default.\n         # See for example tools/travis/install_dependencies.sh for a solution that works on Linux,\n         # using a custom config.pri\n         shiboken: PKGCONFIG += shiboken\n         pyside:   PKGCONFIG += pyside\n         # The following hack also works with Homebrew if pyside is installed with option --with-python3\n         macx {\n           QMAKE_LFLAGS += '-Wl,-rpath,\\'@loader_path/../Frameworks\\''\n           shiboken {\n             PKGCONFIG -= shiboken\n             PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG $$PYTHON_CONFIG_FLAGS --exec-prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\n             INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir shiboken)\n             # the sed stuff is to work around an Xcode generator bug\n             LIBS += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --libs shiboken | sed -e s/-undefined\\\\ dynamic_lookup//)\n           }\n           pyside {\n             PKGCONFIG -= pyside\n             PYSIDE_PKG_CONFIG_PATH = $$system($$PYTHON_CONFIG $$PYTHON_CONFIG_FLAGS --exec-prefix)/lib/pkgconfig:$$(PKG_CONFIG_PATH)\n             PYSIDE_INCLUDEDIR = $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --variable=includedir pyside)\n             INCLUDEPATH += $$PYSIDE_INCLUDEDIR\n             INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtCore\n             # QtGui include are needed because it looks for Qt::convertFromPlainText which is defined in\n             # qtextdocument.h in the QtGui module.\n             INCLUDEPATH += $$PYSIDE_INCLUDEDIR/QtGui\n             INCLUDEPATH += $$system(env PKG_CONFIG_PATH=$${QMAKE_LIBDIR_QT}/pkgconfig pkg-config --variable=includedir QtGui)\n             LIBS += $$system(env PKG_CONFIG_PATH=$$PYSIDE_PKG_CONFIG_PATH pkg-config --libs pyside)\n           }\n         }\n     }\n} #unix\n\n*xcode* {\n  # redefine cxx flags as qmake tends to automatically add -O2 to xcode projects\n  QMAKE_CFLAGS -= -O2\n  QMAKE_CXXFLAGS -= -O2\n  QMAKE_CXXFLAGS += -ftemplate-depth-1024\n\n  # all libraries in Natron are static, so visibility can be hidden by default.\n  symbols_hidden_by_default.name = GCC_SYMBOLS_PRIVATE_EXTERN\n  symbols_hidden_by_default.value = YES\n  QMAKE_MAC_XCODE_SETTINGS += symbols_hidden_by_default\n  QMAKE_CXXFLAGS += -std=c++17\n  enable_cxx17.name = CLANG_CXX_LANGUAGE_STANDARD\n  enable_cxx17.value = c++17\n  QMAKE_MAC_XCODE_SETTINGS += enable_cxx17\n}\n\n*clang* {\n  QMAKE_CXXFLAGS += -ftemplate-depth-1024\n  QMAKE_CXXFLAGS_WARN_ON += -Wno-c++11-extensions\n  QMAKE_CXXFLAGS += -std=c++17\n}\n\n# see http://clang.llvm.org/docs/AddressSanitizer.html and http://blog.qt.digia.com/blog/2013/04/17/using-gccs-4-8-0-address-sanitizer-with-qt/\naddresssanitizer {\n  *xcode* {\n    enable_cxx_container_overflow_check.name = CLANG_ADDRESS_SANITIZER_CONTAINER_OVERFLOW\n    enable_cxx_container_overflow_check.value = YES\n    QMAKE_MAC_XCODE_SETTINGS += enable_cxx_container_overflow_check\n  }\n  *g++* | *clang* {\n    CONFIG += debug\n    QMAKE_CFLAGS += -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -O1\n    QMAKE_CXXFLAGS += -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -O1\n    QMAKE_LFLAGS += -fsanitize=address -g\n\n    #QMAKE_LFLAGS += -fsanitize-blacklist=../asan_blacklist.ignore\n    #QMAKE_CFLAGS += -fsanitize-blacklist=../asan_blacklist.ignore\n    #QMAKE_CXXFLAGS += -fsanitize-blacklist=../asan_blacklist.ignore\n  }\n}\n\n# see http://clang.llvm.org/docs/ThreadSanitizer.html\nthreadsanitizer {\n  message(\"Compiling with ThreadSanitizer (for clang).\")\n  message(\"see http://clang.llvm.org/docs/ThreadSanitizer.html\")\n  CONFIG += debug\n  QMAKE_CFLAGS += -fsanitize=thread -O1\n  QMAKE_CFLAGS += -fsanitize=thread -O1\n  QMAKE_LFLAGS += -fsanitize=thread -g\n}\n\ncoverage {\n  QMAKE_CFLAGS += -fprofile-arcs -ftest-coverage -O0\n  QMAKE_LFLAGS += -fprofile-arcs -ftest-coverage\n  QMAKE_CLEAN += $(OBJECTS_DIR)/*.gcda $(OBJECTS_DIR)/*.gcno\n}\n\n# install targets on unix\nunix:!macx {\n    isEmpty(PREFIX) {\n        PREFIX = /usr/local\n    }\n    target.path = $${PREFIX}/bin\n    target_icons.path = $${PREFIX}/share/pixmaps\n    target_icons.files = $PWD/../Gui/Resources/Images/natronIcon256_linux.png $PWD/../Gui/Resources/Images/natronProjectIcon_linux.png\n    target_mime.path = $${PREFIX}/share/mime/packages\n    target_mime.files = $PWD/../Gui/Resources/Mime/x-natron.xml\n    target_desktop.path = $${PREFIX}/share/applications\n    target_desktop.files = $PWD/../Gui/Resources/Applications/fr.natron.Natron.desktop\n    target_appdata.path = $${PREFIX}/share/metainfo\n    target_appdata.files = $PWD/../Gui/Resources/Metainfo/fr.natron.Natron.appdata.xml\n    INSTALLS += target_icons target_mime target_desktop target_appdata\n}\n\n# GCC 8.1 (and maybe 8.2) gives a strange bug in the release builds, see https://github.com/NatronGitHub/Natron/issues/279\n# configure with CONFIG+=enforce-gcc8 to enforce building even if GCC 8.1 or 8.2 is detected\n\nenforce-gcc8 {\n  DEFINES += ENFORCE_GCC8\n}\n\n############################################\n## fontconfig directories\n## see https://github.com/NatronGitHub/Natron/blob/201c9b560d50c33f5761ba16b4a60455f909c455/Gui/Resources/etc/fonts/fonts.conf\n\nFC_DEFAULT_FONTS =\nFC_CACHEDIR =\n\n# Linux & friends\nunix:!macx {\nFC_DEFAULT_FONTS += \"<dir>/usr/share/fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/usr/X11/lib/X11/fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/usr/X11R6/lib/X11/fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/usr/share/X11/fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/usr/local/share/fonts</dir>\"\nFC_CACHEDIR += \"<dir>/var/cache/fontconfig</dir>\"\n}\n\n# macOS\nmacx {\n# Homebrew\nFC_DEFAULT_FONTS += \"<dir>/usr/local/share/fonts</dir>\"\n# XQuartz\nFC_DEFAULT_FONTS += \"<dir>/opt/X11/share/fonts</dir>\"\n# MacPorts\nFC_DEFAULT_FONTS += \"<dir>/opt/local/share/fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/System/Library/Fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/Network/Library/Fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/Library/Fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>~/Library/Fonts</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/System/Library/Assets/com_apple_MobileAsset_Font3</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/System/Library/Assets/com_apple_MobileAsset_Font4</dir>\"\nFC_DEFAULT_FONTS += \"<dir>/System/Library/Assets/com_apple_MobileAsset_Font5</dir>\"\n# There's no system-default FC_CACHEDIR on macOS\n#FC_CACHEDIR += \"<dir>/opt/X11/var/cache/fontconfig</dir> <!-- XQuartz -->\"\n}\n\n# Windows\nwin32 {\nFC_DEFAULT_FONTS += \"<dir>WINDOWSFONTDIR</dir>\"\n# Windows 10 introduced user fonts, and is the preferred (and default) place to install fonts\nFC_DEFAULT_FONTS += \"<dir>~/AppData/Local/Microsoft/Windows/Fonts</dir>\"\nFC_CACHEDIR += \"<cachedir>LOCAL_APPDATA_FONTCONFIG_CACHE</cachedir>\"\n}\n\n\n# and finally...\n!include(config.pri) {\n  error(\"System-specific config.pri file not present, please follow the installation instructions and create it.\")\n}\n"
        },
        {
          "name": "libs.pri",
          "type": "blob",
          "size": 30.7177734375,
          "content": "# ***** BEGIN LICENSE BLOCK *****\n# This file is part of Natron <https://natrongithub.github.io/>,\n# (C) 2018-2023 The Natron developers\n# (C) 2013-2018 INRIA and Alexandre Gauthier-Foichat\n#\n# Natron is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Natron is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>\n# ***** END LICENSE BLOCK *****\n\n# Use this for binaries in App.pro, Renderer.pro etc...this way\n# CONFIG += static-gui static-engine static-host-support static-breakpadclient static-ceres static-libmv\n\nlibmv-flags {\nCONFIG += ceres-flags\nINCLUDEPATH += $$PWD/libs/libmv/third_party\nINCLUDEPATH += $$PWD/libs/libmv\n}\n\nglad-flags {\n    CONFIG(debug, debug|release):   INCLUDEPATH += $$PWD/Global/gladDeb/include\n    CONFIG(release, debug|release): INCLUDEPATH += $$PWD/Global/gladRel/include\n}\n\nopenmvg-flags {\nCONFIG += ceres-flags boost\n# Make openMVG use openmp\n!macx:*g++* {\n    CONFIG += openmp\n}\nopenmp {\n    DEFINES += OPENMVG_USE_OPENMP\n}\n\nDEFINES += OPENMVG_HAVE_BOOST\n\n# Do not use any serialization in openmvg (cereal, ply, stlplus ...)\nDEFINES += OPENMVG_NO_SERIALIZATION\n\n# Use this to use OsiMskSolverInterface.cpp\n#DEFINES += OPENMVG_HAVE_MOSEK\n\nDEFINES += OPENMVG_STD_UNORDERED_MAP\nDEFINES += OPENMVG_STD_SHARED_PTR\n\nINCLUDEPATH += $$PWD/libs/openMVG/openMVG\nINCLUDEPATH += $$PWD/libs/openMVG\nINCLUDEPATH += $$PWD/libs/openMVG/dependencies/osi_clp/Clp/src\nINCLUDEPATH += $$PWD/libs/openMVG/dependencies/osi_clp/Clp/src/OsiClip\nINCLUDEPATH += $$PWD/libs/openMVG/dependencies/osi_clp/CoinUtils/src\nINCLUDEPATH += $$PWD/libs/openMVG/dependencies/osi_clp/Osi/src/Osi\nINCLUDEPATH += $$PWD/libs/flann/src/cpp\n#INCLUDEPATH += $$PWD/libs/lemon\n\n}\n\nceres-flags {\nCONFIG += glog-flags\nDEFINES += CERES_HAVE_PTHREAD CERES_NO_SUITESPARSE CERES_NO_CXSPARSE CERES_HAVE_RWLOCK\n# Comment to make ceres use a lapack library\nDEFINES += CERES_NO_LAPACK\n!macx:*g++* {\n    CONFIG += openmp\n}\nopenmp {\n    DEFINES += CERES_USE_OPENMP\n}\n#If undefined, make sure to add to sources all the files in ceres/internal/ceres/generated\nDEFINES += CERES_RESTRICT_SCHUR_SPECIALIZATION\nDEFINES += WITH_LIBMV_GUARDED_ALLOC GOOGLE_GLOG_DLL_DECL= LIBMV_NO_FAST_DETECTOR=\nDEFINES += CERES_STD_UNORDERED_MAP\nDEFINES += CERES_STD_SHARED_PTR\n\nINCLUDEPATH += $$PWD/libs/ceres/config\nINCLUDEPATH += $$PWD/libs/ceres/include\nINCLUDEPATH += $$PWD/libs/ceres/internal\nINCLUDEPATH += $$PWD/libs/Eigen3\nwin32-msvc* {\n    CONFIG(64bit) {\n        QMAKE_LFLAGS += /MACHINE:X64\n    } else {\n        QMAKE_LFLAGS += /MACHINE:X86\n    }\n}\n}\n\nglog-flags {\nCONFIG += gflags-flags\nDEFINES += GOOGLE_GLOG_DLL_DECL=\nINCLUDEPATH += $$PWD/libs/gflags\nINCLUDEPATH += $$PWD/libs/gflags/src\nINCLUDEPATH += $$PWD/libs/gflags/src/gflags\nINCLUDEPATH += $$PWD/libs/glog/src\nwin32* {\n     INCLUDEPATH += $$PWD/libs/glog/src/windows\n\n    # wingdi.h defines ERROR to be 0. When we call LOG(ERROR), it gets\n    # substituted with 0, and it expands to COMPACT_GOOGLE_LOG_0. To allow us\n    # to keep using this syntax, we define this macro to do the same thing\n    # as COMPACT_GOOGLE_LOG_ERROR.\n     DEFINES += GLOG_NO_ABBREVIATED_SEVERITIES\n}\n!win32* {\n    INCLUDEPATH += $$PWD/libs/glog/src\n}\nwin32-msvc* {\n    CONFIG(64bit) {\n        QMAKE_LFLAGS += /MACHINE:X64\n    } else {\n        QMAKE_LFLAGS += /MACHINE:X86\n    }\n}\n}\n\ngflags-flags {\nINCLUDEPATH += $$PWD/libs/gflags\nINCLUDEPATH += $$PWD/libs/gflags/src\nINCLUDEPATH += $$PWD/libs/gflags/src/gflags\n}\n\nlibtess-flags {\nINCLUDEPATH += $$PWD/libs/libtess\n}\n\n################\n# Gui\nstatic-gui {\nCONFIG += static-engine static-qhttpserver static-hoedown static-libtess\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Gui/x64/release/ -lGui\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Gui/x64/debug/ -lGui\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Gui/win32/release/ -lGui\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Gui/win32/debug/ -lGui\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Gui/release/ -lGui\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Gui/debug/ -lGui\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Gui/build/Release/ -lGui\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Gui/build/Debug/ -lGui\n        else:unix {\n            LIBS += -L$$OUT_PWD/../Gui/ -lGui\n            ## GLU is required by ViewerGL, but some versions of glew don't link it (e.g. Ubuntu 12.04)\n            #!macx: LIBS += -lGLU\n        }\n}\nINCLUDEPATH += $$PWD/Gui\nDEPENDPATH += $$OUT_PWD/../Gui\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/x64/release/libGui.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/x64/debug/libGui.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/win32/release/libGui.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/win32/debug/libGui.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/release/libGui.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/debug/libGui.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/release/Gui.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/debug/Gui.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/build/Release/libGui.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Gui/build/Debug/libGui.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../Gui/libGui.a\n}\n\n}  #static-gui\n\n################\n# Engine\n\nstatic-engine {\nCONFIG += static-libmv static-openmvg static-hoedown static-libtess\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Engine/x64/release/ -lEngine -lpsapi\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Engine/x64/debug/ -lEngine -lpsapi\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Engine/win32/release/ -lEngine -lpsapi\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Engine/win32/debug/ -lEngine -lpsapi\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Engine/release/ -lEngine -lpsapi\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Engine/debug/ -lEngine -lpsapi\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../Engine/build/Release/ -lEngine\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../Engine/build/Debug/ -lEngine\n        else:unix: LIBS += -L$$OUT_PWD/../Engine/ -lEngine\n}\n\nINCLUDEPATH += $$PWD/Engine\nDEPENDPATH += $$OUT_PWD/../Engine\nINCLUDEPATH += $$PWD/libs/SequenceParsing\nINCLUDEPATH += $$PWD/Global\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/x64/release/libEngine.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/x64/debug/libEngine.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/win32/release/libEngine.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/win32/debug/libEngine.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/release/libEngine.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/debug/libEngine.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/release/Engine.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/debug/Engine.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/build/Release/libEngine.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../Engine/build/Debug/libEngine.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../Engine/libEngine.a\n}\n} #static-engine\n\n################\n# HostSupport\n\nstatic-host-support {\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/x64/release/ -lHostSupport\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/x64/debug/ -lHostSupport\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/win32/release/ -lHostSupport\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/win32/debug/ -lHostSupport\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/release/ -lHostSupport\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/debug/ -lHostSupport\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/build/Release/ -lHostSupport\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../HostSupport/build/Debug/ -lHostSupport\n        else:unix: LIBS += -L$$OUT_PWD/../HostSupport/ -lHostSupport\n}\n\nINCLUDEPATH += $$PWD/HostSupport\nDEPENDPATH += $$OUT_PWD/../HostSupport\n#OpenFX C api includes and OpenFX c++ layer includes that are located in the submodule under /libs/OpenFX\nINCLUDEPATH += $$PWD/libs/OpenFX/include\nINCLUDEPATH += $$PWD/libs/OpenFX_extensions\nINCLUDEPATH += $$PWD/libs/OpenFX/HostSupport/include\nINCLUDEPATH += $$PWD\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/x64/release/libHostSupport.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/x64/debug/libHostSupport.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/win32/release/libHostSupport.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/win32/debug/libHostSupport.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/release/libHostSupport.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/debug/libHostSupport.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/release/HostSupport.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/debug/HostSupport.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/build/Release/libHostSupport.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/build/Debug/libHostSupport.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../HostSupport/libHostSupport.a\n}\n} #static-host-support\n\n################\n# LibMV\nstatic-libmv {\nCONFIG += static-ceres\nINCLUDEPATH += $$PWD/libs/libmv\nDEPENDPATH += $$OUT_PWD/../libs/libmv\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/x64/release/ -lLibMV\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/x64/debug/ -lLibMV\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/win32/release/ -lLibMV\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/win32/debug/ -lLibMV\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/release/ -lLibMV\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/debug/ -lLibMV\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/build/Release/ -lLibMV\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libmv/build/Debug/ -lLibMV\n        else:unix: LIBS += -L$$OUT_PWD/../libs/libmv/ -lLibMV\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/x64/release/libLibMV.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/x64/debug/libLibMV.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/win32/release/libLibMV.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/win32/debug/libLibMV.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/release/libLibMV.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/debug/libLibMV.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/release/libLibMV.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/debug/libLibMV.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/build/Release/libLibMV.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/build/Debug/libLibMV.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/libmv/libLibMV.a\n}\n\n} # static-libmv\n\n\n################\n# openMVG\nstatic-openmvg {\nCONFIG += static-ceres\nINCLUDEPATH += $$PWD/libs/openMVG\nDEPENDPATH += $$OUT_PWD/../libs/openMVG\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/x64/release/ -lopenMVG\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/x64/debug/ -lopenMVG\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/win32/release/ -lopenMVG\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/win32/debug/ -lopenMVG\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/release/ -lopenMVG\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/debug/ -lopenMVG\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/build/Release/ -lopenMVG\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/openMVG/build/Debug/ -lopenMVG\n        else:unix: LIBS += -L$$OUT_PWD/../libs/openMVG/ -lopenMVG\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/x64/release/libopenMVG.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/x64/debug/libopenMVG.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/win32/release/libopenMVG.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/win32/debug/libopenMVG.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/release/libopenMVG.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/debug/libopenMVG.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/release/libopenMVG.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/debug/libopenMVG.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/build/Release/libopenMVG.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/build/Debug/libopenMVG.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/openMVG/libopenMVG.a\n}\n\n} # static-openmvg\n\n################\n# ceres\nstatic-ceres {\nCONFIG += static-glog\n!macx:*g++* {\n    CONFIG += openmp\n}\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/x64/release/ -lceres\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/x64/debug/ -lceres\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/win32/release/ -lceres\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/win32/debug/ -lceres\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/release/ -lceres\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/debug/ -lceres\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/build/Release/ -lceres\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/ceres/build/Debug/ -lceres\n        else:unix: LIBS += -L$$OUT_PWD/../libs/ceres/ -lceres\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/x64/release/libceres.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/x64/debug/libceres.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/win32/release/libceres.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/win32/debug/libceres.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/release/libceres.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/debug/libceres.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/release/libceres.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/debug/libceres.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/build/Release/libceres.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/build/Debug/libceres.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/ceres/libceres.a\n}\n} # static-ceres {\n\n################\n# glog\nstatic-glog {\nCONFIG += static-gflags\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/x64/release/ -lglog\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/x64/debug/ -lglog\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/win32/release/ -lglog\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/win32/debug/ -lglog\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/release/ -lglog\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/debug/ -lglog\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/build/Release/ -lglog\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/glog/build/Debug/ -lglog\n        else:unix: LIBS += -L$$OUT_PWD/../libs/glog/ -lglog\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/x64/release/libglog.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/x64/debug/libglog.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/win32/release/libglog.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/win32/debug/libglog.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/release/libglog.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/debug/libglog.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/release/libglog.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/debug/libglog.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/build/Release/libglog.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/build/Debug/libglog.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/glog/libglog.a\n}\n} # static-glog {\n\n################\n# gflags\nstatic-gflags {\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/x64/release/ -lgflags\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/x64/debug/ -lgflags\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/win32/release/ -lgflags\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/win32/debug/ -lgflags\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/release/ -lgflags\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/debug/ -lgflags\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/build/Release/ -lgflags\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/gflags/build/Debug/ -lgflags\n        else:unix: LIBS += -L$$OUT_PWD/../libs/gflags/ -lgflags\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/x64/release/libgflags.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/x64/debug/libgflags.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/win32/release/libgflags.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/win32/debug/libgflags.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/release/libgflags.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/debug/libgflags.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/release/libgflags.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/debug/libgflags.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/build/Release/libgflags.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/build/Debug/libgflags.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/gflags/libgflags.a\n}\n} # static-gflags {\n\n################\n# qhttpserver\n\nstatic-qhttpserver {\n\nDEFINES += QHTTP_SERVER_STATIC\nINCLUDEPATH += $$PWD/libs/qhttpserver/src\nDEPENDPATH += $$OUT_PWD/../libs/qhttpserver/src\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/x64/release/ -lqhttpserver\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/x64/debug/ -lqhttpserver\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/win32/release/ -lqhttpserver\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/win32/debug/ -lqhttpserver\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/ -lqhttpserver\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/ -lqhttpserver\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/src/build/Release/ -lqhttpserver\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/qhttpserver/src/build/Debug/ -lqhttpserver\n        else:unix: LIBS += -L$$OUT_PWD/../libs/qhttpserver/build/ -lqhttpserver\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/x64/release/libqhttpserver.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/x64/debug/libqhttpserver.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/win32/release/libqhttpserver.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/win32/debug/libqhttpserver.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/libqhttpserver.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/libqhttpserver.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/release/libqhttpserver.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/debug/libqhttpserver.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/src/build/Release/libqhttpserver.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/src/build/Debug/libqhttpserver.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/qhttpserver/build/libqhttpserver.a\n}\n} # static-qhttpserver\n\n################\n# hoedown\n\nstatic-hoedown {\n\nINCLUDEPATH += $$PWD/libs/hoedown/src\nDEPENDPATH += $$OUT_PWD/../libs/hoedown\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/x64/release/ -lhoedown\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/x64/debug/ -lhoedown\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/win32/release/ -lhoedown\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/win32/debug/ -lhoedown\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/ -lhoedown\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/ -lhoedown\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/Release/ -lhoedown\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/hoedown/build/Debug/ -lhoedown\n        else:unix: LIBS += -L$$OUT_PWD/../libs/hoedown/build/ -lhoedown\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/x64/release/hoedown.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/x64/debug/hoedown.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/win32/release/hoedown.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/win32/debug/hoedown.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/libhoedown.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/libhoedown.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/release/libhoedown.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/debug/libhowdown.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/Release/libhoedown.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/Debug/libhoedown.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/hoedown/build/libhoedown.a\n}\n} # static-hoedown\n\n\n################\n# libtess\n\nstatic-libtess {\n\nINCLUDEPATH += $$PWD/libs/libtess\nDEPENDPATH += $$OUT_PWD/../libs/libtess\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/x64/release/ -ltess\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/x64/debug/ -ltess\n        } else {\n                CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/win32/release/ -ltess\n                CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/win32/debug/ -ltess\n        }\n} else {\n        win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/release/ -ltess\n        else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/debug/ -ltess\n        else:*-xcode:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/build/Release/ -ltess\n        else:*-xcode:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../libs/libtess/build/Debug/ -ltess\n        else:unix: LIBS += -L$$OUT_PWD/../libs/libtess/ -ltess\n}\n\nwin32-msvc*{\n        CONFIG(64bit) {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/x64/release/tess.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/x64/debug/tess.lib\n        } else {\n                CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/win32/release/tess.lib\n                CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/win32/debug/tess.lib\n        }\n} else {\n        win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/release/libtess.a\n        else:win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/debug/libtess.a\n        else:win32:!win32-g++:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/release/libtess.lib\n        else:win32:!win32-g++:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/debug/libtess.lib\n        else:*-xcode:CONFIG(release, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/build/Release/libtess.a\n        else:*-xcode:CONFIG(debug, debug|release): PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/build/Debug/libtess.a\n        else:unix: PRE_TARGETDEPS += $$OUT_PWD/../libs/libtess/libtess.a\n}\n} # static-libtess\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}