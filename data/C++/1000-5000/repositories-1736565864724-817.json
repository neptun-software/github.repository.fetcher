{
  "metadata": {
    "timestamp": 1736565864724,
    "page": 817,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Aloshi/EmulationStation",
      "stars": 2097,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3076171875,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n\n# Compiled Dynamic libraries\n*.so\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Dependency makefiles\n*.d\n\n# Compiled executable\nemulationstation\n\n# build directory\nbuild\nDebug\nRelease\nMinSizeRel\nRelWithDebInfo\n\n# CMake\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\nMakefile\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.4296875,
          "content": "cmake_minimum_required(VERSION 2.8)\n\nproject(emulationstation-all)\n\n#-------------------------------------------------------------------------------\n#add local find scripts to CMAKE path\nLIST(APPEND CMAKE_MODULE_PATH\n    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Utils\n    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Packages\n)\n\n#-------------------------------------------------------------------------------\n#set up OpenGL system variable\nset(GLSystem \"Desktop OpenGL\" CACHE STRING \"The OpenGL system to be used\")\nset_property(CACHE GLSystem PROPERTY STRINGS \"Desktop OpenGL\" \"OpenGL ES\")\n\n#-------------------------------------------------------------------------------\n#check if we're running on Raspberry Pi\nMESSAGE(\"Looking for bcm_host.h\")\nif(EXISTS \"/opt/vc/include/bcm_host.h\")\n    MESSAGE(\"bcm_host.h found\")\n    set(BCMHOST found)\n    set(GLSystem \"OpenGL ES\")\nelse()\n    MESSAGE(\"bcm_host.h not found\")\nendif()\n\n#-------------------------------------------------------------------------------\n#check if we're running on olinuxino\nMESSAGE(\"Looking for libMali.so\")\nif(EXISTS \"/usr/lib/libMali.so\")\n    MESSAGE(\"libMali.so found\")\n    set(GLSystem \"OpenGL ES\")\nelse()\n    MESSAGE(\"libMali.so not found\")\nendif()\n\n#finding necessary packages\n#-------------------------------------------------------------------------------\nif(${GLSystem} MATCHES \"Desktop OpenGL\")\n    find_package(OpenGL REQUIRED)\nelse()\n    find_package(OpenGLES REQUIRED)\nendif()\nfind_package(Freetype REQUIRED)\nfind_package(FreeImage REQUIRED)\nfind_package(SDL2 REQUIRED)\nfind_package(Boost REQUIRED COMPONENTS system filesystem date_time locale)\nfind_package(Eigen3 REQUIRED)\nfind_package(CURL REQUIRED)\n\n#add ALSA for Linux\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    find_package(ALSA REQUIRED)\nendif()\n\n#-------------------------------------------------------------------------------\n#set up compiler flags and excutable names\nif(DEFINED BCMHOST)\n    add_definitions(-D_RPI_)\nendif()\n\n#-------------------------------------------------------------------------------\n\nif(MSVC)\n    set(CMAKE_DEBUG_POSTFIX \"d\")\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\") #multi-processor compilation\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\") #multi-processor compilation\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCXX)\n    #check for G++ 4.7+\n    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE G++_VERSION)\n    if (G++_VERSION VERSION_LESS 4.7)\n            message(SEND_ERROR \"You need at least G++ 4.7 to compile EmulationStation!\")\n    endif()\n\n    #set up compiler flags for GCC\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wno-attributes -O3\") #support C++11 for std::, optimize\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O3\")  #-s = strip binary\nendif()\n\nif(${GLSystem} MATCHES \"Desktop OpenGL\")\n    add_definitions(-DUSE_OPENGL_DESKTOP)\nelse()\n    add_definitions(-DUSE_OPENGL_ES)\nendif()\n\nadd_definitions(-DEIGEN_DONT_ALIGN)\n\n#-------------------------------------------------------------------------------\n#add include directories\nset(COMMON_INCLUDE_DIRS\n    ${FREETYPE_INCLUDE_DIRS}\n    ${FreeImage_INCLUDE_DIRS}\n    ${SDL2_INCLUDE_DIR}\n    ${Boost_INCLUDE_DIRS}\n    ${EIGEN3_INCLUDE_DIR}\n    ${CURL_INCLUDE_DIR}\n    ${CMAKE_CURRENT_SOURCE_DIR}/external\n    ${CMAKE_CURRENT_SOURCE_DIR}/es-core/src\n)\n\n#add ALSA for Linux\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    LIST(APPEND COMMON_INCLUDE_DIRS\n        ${ALSA_INCLUDE_DIRS}\n    )\nendif()\n\nif(DEFINED BCMHOST)\n    LIST(APPEND COMMON_INCLUDE_DIRS\n        \"/opt/vc/include\"\n        \"/opt/vc/include/interface/vcos\"\n        \"/opt/vc/include/interface/vmcs_host/linux\"\n        \"/opt/vc/include/interface/vcos/pthreads\"\n    )\nelse()\n    if(${GLSystem} MATCHES \"Desktop OpenGL\")\n        LIST(APPEND COMMON_INCLUDE_DIRS\n            ${OPENGL_INCLUDE_DIR}\n        )\n    else()\n        LIST(APPEND COMMON_INCLUDE_DIRS\n            ${OPENGLES_INCLUDE_DIR}\n        )\n    endif()\nendif()\n\n#-------------------------------------------------------------------------------\n#define libraries and directories\nif(DEFINED BCMHOST)\n    link_directories(\n        ${Boost_LIBRARY_DIRS}\n        \"/opt/vc/lib\"\n    )\nelse()\n    link_directories(\n        ${Boost_LIBRARY_DIRS}\n    )\nendif()\n\nset(COMMON_LIBRARIES\n    ${Boost_LIBRARIES}\n    ${FREETYPE_LIBRARIES}\n    ${FreeImage_LIBRARIES}\n\t${SDL2_LIBRARY}\n    ${CURL_LIBRARIES}\n    pugixml\n    nanosvg\n)\n\n#add ALSA for Linux\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    LIST(APPEND COMMON_LIBRARIES\n        ${ALSA_LIBRARY}\n    )\nendif()\n\nif(DEFINED BCMHOST)\n    LIST(APPEND COMMON_LIBRARIES\n        bcm_host\n        EGL\n        ${OPENGLES_LIBRARIES}\n    )\nelse()\n    if(MSVC)\n        LIST(APPEND COMMON_LIBRARIES\n            winmm\n        )\n    endif()\n    if(${GLSystem} MATCHES \"Desktop OpenGL\")\n        LIST(APPEND COMMON_LIBRARIES\n            ${OPENGL_LIBRARIES}\n        )\n    else()\n        LIST(APPEND COMMON_LIBRARIES\n            EGL\n            ${OPENGLES_LIBRARIES}\n        )\n    endif()\nendif()\n\n#-------------------------------------------------------------------------------\n# set up build directories\nset(dir ${CMAKE_CURRENT_SOURCE_DIR})\nset(EXECUTABLE_OUTPUT_PATH ${dir} CACHE PATH \"Build directory\" FORCE)\nset(LIBRARY_OUTPUT_PATH ${dir} CACHE PATH \"Build directory\" FORCE)\n\n\n#-------------------------------------------------------------------------------\n# add each component\n\nadd_subdirectory(\"external\")\nadd_subdirectory(\"es-core\")\nadd_subdirectory(\"es-app\")\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 0.4404296875,
          "content": "Programming\n\tAlec \"Aloshi\" Lofquist - http://www.aloshi.com\n\nUI Art & Design\n\tNils Bonenberger\n\n\nLibraries\n=========\n\nPugiXML\n\thttp://pugixml.org/\n\nSDL 2\n\thttp://www.libsdl.org/\n\nFreeImage\n\thttp://www.freeimage.sourceforge.net\n\nFreeType\n\thttp://www.freetype.org\n\ncURL\n\thttp://curl.haxx.se/\n\nBoost\n\thttp://www.boost.org/\n\nnanosvg\n\thttps://github.com/memononen/nanosvg\n\nResources\n=========\n\nOpen Sans font\n\thttp://www.google.com/fonts/specimen/Open+Sans"
        },
        {
          "name": "DEVNOTES.md",
          "type": "blob",
          "size": 1.7919921875,
          "content": "Also known as \"Really Bad Technical Documentation\"\n\nThese are mostly notes I create as I go along, marking potential gotchas for people who might try to extend my code.\nSome day I'll try and add an overview of the code structure, what each class does, etc.\n\nDevelopment Environment\n=======================\n\nI personally launch ES in windowed mode with a smaller resolution than my monitor and with debug text enabled.\n\n`emulationstation --windowed --debug --resolution 1280 720`\n\n\nCreating a new GuiComponent\n===========================\n\nYou probably want to override:\n\n\t`bool input(InputConfig* config, Input input);`\n\t\tCheck if some input is mapped to some action with `config->isMappedTo(\"a\", input);`.\n\t\tCheck if an input is \"pressed\" with `input.value != 0` (input.value *can* be negative in the case of axes).\n\n\t`void update(int deltaTime);`\n\t\t`deltaTime` is in milliseconds.\n\n\t`void render(const Eigen::Affine3f& parentTrans);`\n\t\tYou probably want to do `Eigen::Affine3f trans = parentTrans * getTransform();` to get your final \"modelview\" matrix.\n\t\tApply the modelview matrix with `Renderer::setMatrix(const Eigen::Affine3f&)`.\n\t\tRender any children the component may have with `renderChildren(parentTrans);`.\n\n\nCreating a new GameListView Class\n=================================\n\n1. Don't allow the user to navigate to the root node's parent. If you use a stack of some sort to keep track of past cursor states this will be a natural side effect.\n\n\n\nCreating a new Component\n========================\n\nIf your component is not made up of other components, and you draw something to the screen with OpenGL, make sure:\n\n* Your vertex positions are rounded before you render (you can use round(float) in Util.h to do this).\n* Your transform matrix's translation is rounded (you can use roundMatrix(affine3f) in Util.h to do this)."
        },
        {
          "name": "GAMELISTS.md",
          "type": "blob",
          "size": 5.5341796875,
          "content": "Gamelists\n=========\n\nThe gamelist.xml file for a system defines metadata for a system's games, such as a name, image (like a screenshot or box art), description, release date, and rating.\n\nES will check three places for a gamelist.xml in the following order, using the first one it finds:\n* `[SYSTEM_PATH]/gamelist.xml`\n* `~/.emulationstation/gamelists/[SYSTEM_NAME]/gamelist.xml`\n* `/etc/emulationstation/gamelists/[SYSTEM_NAME]/gamelist.xml`\n\nAn example gamelist.xml:\n```xml\n<gameList>\n\t<game>\n\t\t<path>/home/pi/ROMs/nes/mm2.nes</path>\n\t\t<name>Mega Man 2</name>\n\t\t<desc>Mega Man 2 is a classic NES game which follows Mega Man as he murders eight robot masters in cold blood.</desc>\n\t\t<image>~/.emulationstation/downloaded_images/nes/Mega Man 2-image.png</image>\n\t</game>\n</gameList>\n```\n\nEverything is enclosed in a `<gameList>` tag.  The information for each game or folder is enclosed in a corresponding tag (`<game>` or `<folder>`).  Each piece of metadata is encoded as a string.\n\n\nReference\n=========\n\n(if you suspect this section is out of date, check out `src/MetaData.cpp`)\n\nThere are a few types of metadata:\n\n* `string` - just text.\n* `image_path` - a path to an image. This path should be either the absolute to the image, a path relative to the system games folder that starts with \"./\" (e.g. `./mm2_image.png`), or a path relative to the home directory that starts with \"~/\" (e.g. `~/.emulationstation/downloaded_images/nes/mm2-image.png`).  Images will be automatically resized by OpenGL to fit the corresponding `<image>` tag in the current theme.  Smaller images will load faster, so try to keep resolution low!\n* `float` - a floating-point decimal value (written as a string).\n* `integer` - an integer value (written as a string).\n* `datetime` - a date and, potentially, a time.  These are encoded as an ISO string, in the following format: \"%Y%m%dT%H%M%S%F%q\".  For example, the release date for Chrono Trigger is encoded as \"19950311T000000\" (no time specified).\n\nSome metadata is also marked as \"statistic\" - these are kept track of by ES and do not show up in the metadata editor.  They are shown in certain views (for example, the detailed view shows both `playcount` and `lastplayed`).\n\n#### `<game>`\n\n* `name` - string, the displayed name for the game.\n* `desc` - string, a description of the game.  Longer descriptions will automatically scroll, so don't worry about size.\n* `image` - image_path, the path to an image to display for the game (like box art or a screenshot).\n* `thumbnail` - image_path, the path to a smaller image, displayed in image lists like the grid view.  Should be small to ensure quick loading.  *Currently not used.*\n* `rating` - float, the rating for the game, expressed as a floating point number between 0 and 1.  Arbitrary values are fine (ES can display half-stars, quarter-stars, etc).\n* `releasedate` - datetime, the date the game was released.  Displayed as date only, time is ignored.\n* `developer` - string, the developer for the game.\n* `publisher` - string, the publisher for the game.\n* `genre` - string, the (primary) genre for the game.\n* `players` - integer, the number of players the game supports.\n* `playcount` - statistic, integer, the number of times this game has been played\n* `lastplayed` - statistic, datetime, the last date and time this game was played.\n\n\n#### `<folder>`\n* `name` - string, the displayed name for the folder.\n* `desc` - string, the description for the folder.\n* `image` - image_path, the path to an image to display for the folder.\n* `thumbnail` - image_path, the path to a smaller image to display for the folder.  *Currently not used.*\n\n\nThings to be Aware Of\n=====================\n\n* You can use ES's built-in [scraping](http://en.wikipedia.org/wiki/Web_scraping) tools to avoid creating a gamelist.xml by hand, as described in README.md.\n\n* ES will try to write any image paths as relative to the current system games path or relative to the current home directory if it can.  This is done to try and keep installations portable (so you can copy them between computers).\n\n* One thing to be aware of: the EmulationStation text rendering code doesn't currently support Unicode.  If I fix this in the future, it will probably use UTF-8.  For now, you'll just have to convert names and descriptions to ASCII.  Sorry!\n\n* If a value matches the default for a particular piece of metadata, ES will not write it to the gamelist.xml (for example, if `genre` isn't specified, ES won't write an empty genre tag; if `players` is 1, ES won't write a `players` tag).\n\n* A `game` can actually point to a folder/directory if the the folder has a matching extension.\n\n* `folder` metadata will only be used if a game is found inside of that folder.\n\n* ES will keep entries for games and folders that it can't find the files for.\n\n* The switch `--gamelist-only` can be used to skip automatic searching, and only display games defined in the system's gamelist.xml.\n\n* The switch `--ignore-gamelist` can be used to ignore the gamelist and force ES to use the non-detailed view.\n\n* If at least one game in a system has an image specified, ES will use the detailed view for that system (which displays metadata alongside the game list).\n\n* If you want to write your own scraper, the built-in scraping system is actually pretty extendable if you can get past the ugly function declarations and your instinctual fear of C++.  Check out `src/scrapers/GamesDBScraper.cpp` for an example (it's less than a hundred lines of actual code).  An offline scraper is also possible (though you'll have to subclass `ScraperRequest`).  I hope to write a more complete guide on how to do this in the future.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2014 Alec Lofquist\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5390625,
          "content": "EmulationStation\n================\n\nA cross-platform graphical front-end for emulators with controller navigation.\n\nProject website: http://emulationstation.org\n\n**Raspberry Pi users:**\nA cool guy named petrockblog made a script which automatically installs many emulators and ES. It also includes options for configuring your RPi and setting it up to boot directly into ES. You can find it here: https://github.com/petrockblog/RetroPie-Setup\n\nDownload\n========\n\nDownload a pre-compiled version at [emulationstation.org](http://emulationstation.org#download).\n\n\nI found a bug! I have a problem!\n================================\n\n- First, try to check the [issue list](https://github.com/Aloshi/EmulationStation/issues?state=open) for some entries that might match your problem.  Make sure to check closed issues too!\n\n- If you're running EmulationStation on a on Raspberry Pi and have problems with config file changes not taking effect, content missing after editing, etc., check if your SD card is corrupted (see issues [#78](https://github.com/Aloshi/EmulationStation/issues/78) and [#107](https://github.com/Aloshi/EmulationStation/issues/107)). You can do this with free tools like [h2testw](http://www.heise.de/download/h2testw.html) or [F3](http://oss.digirati.com.br/f3/).\n\n- Try to update to the latest version of EmulationStation using git (you might need to delete your `es_input.cfg` and `es_settings.cfg` after that to reset them to default values):\n```bash\ncd YourEmulationStationDirectory\ngit pull\ncmake .\nmake\n```\n\n- If your problem still isn't gone, the best way to report a bug is to post an issue on GitHub. Try to post the simplest steps possible to reproduce the bug. Include files you think might be related (except for ROMs, of course). If you haven't re-run ES since the crash, the log file `~/.emulationstation/es_log.txt` is also helpful.\n\nBuilding\n========\n\nEmulationStation uses some C++11 code, which means you'll need to use at least g++-4.7 on Linux, or VS2010 on Windows, to compile.\n\nEmulationStation has a few dependencies. For building, you'll need CMake, SDL2, Boost (System, Filesystem, DateTime, Locale), FreeImage, FreeType, Eigen3, and cURL.  You also should probably install the `fonts-droid` package which contains fallback fonts for Chinese/Japanese/Korean characters, but ES will still work fine without it (this package is only used at run-time).\n\n**On Debian/Ubuntu:**\nAll of this be easily installed with apt-get:\n```bash\nsudo apt-get install libsdl2-dev libboost-system-dev libboost-filesystem-dev libboost-date-time-dev libboost-locale-dev libfreeimage-dev libfreetype6-dev libeigen3-dev libcurl4-openssl-dev libasound2-dev libgl1-mesa-dev build-essential cmake fonts-droid\n```\n\nThen, generate and build the Makefile with CMake:\n```bash\ncd YourEmulationStationDirectory\ncmake .\nmake\n```\n\n**On the Raspberry Pi:**\n\nComplete Raspberry Pi build instructions at [emulationstation.org](http://emulationstation.org/gettingstarted.html#install_rpi_standalone).\n\n**On Windows:**\n\n[Boost](http://www.boost.org/users/download/) (you'll need to compile yourself or get the pre-compiled binaries)\n\n[Eigen3](http://eigen.tuxfamily.org/index.php?title=Main_Page) (header-only library)\n\n[FreeImage](http://downloads.sourceforge.net/freeimage/FreeImage3154Win32.zip)\n\n[FreeType2](http://download.savannah.gnu.org/releases/freetype/freetype-2.4.9.tar.bz2) (you'll need to compile)\n\n[SDL2](http://www.libsdl.org/release/SDL2-devel-2.0.3-VC.zip)\n\n[cURL](http://curl.haxx.se/download.html) (you'll need to compile or get the pre-compiled DLL version)\n\n(Remember to copy necessary .DLLs into the same folder as the executable: probably FreeImage.dll, freetype6.dll, SDL2.dll, libcurl.dll, and zlib1.dll. Exact list depends on if you built your libraries in \"static\" mode or not.)\n\n[CMake](http://www.cmake.org/cmake/resources/software.html) (this is used for generating the Visual Studio project)\n\n(If you don't know how to use CMake, here are some hints: run cmake-gui and point it at your EmulationStation folder.  Point the \"build\" directory somewhere - I use EmulationStation/build.  Click configure, choose \"Visual Studio [year] Project\", fill in red fields as they appear and keep clicking Configure (you may need to check \"Advanced\"), then click Generate.)\n\n\nConfiguring\n===========\n\n**~/.emulationstation/es_systems.cfg:**\nWhen first run, an example systems configuration file will be created at `~/.emulationstation/es_systems.cfg`.  `~` is `$HOME` on Linux, and `%HOMEPATH%` on Windows.  This example has some comments explaining how to write the configuration file. See the \"Writing an es_systems.cfg\" section for more information.\n\n**Keep in mind you'll have to set up your emulator separately from EmulationStation!**\n\n**~/.emulationstation/es_input.cfg:**\nWhen you first start EmulationStation, you will be prompted to configure an input device. The process is thus:\n\n1. Hold a button on the device you want to configure.  This includes the keyboard.\n\n2. Press the buttons as they appear in the list.  Some inputs can be skipped by holding any button down for a few seconds (e.g. page up/page down).\n\n3. You can review your mappings by pressing up and down, making any changes by pressing A.\n\n4. Choose \"SAVE\" to save this device and close the input configuration screen.\n\nThe new configuration will be added to the `~/.emulationstation/es_input.cfg` file.\n\n**Both new and old devices can be (re)configured at any time by pressing the Start button and choosing \"CONFIGURE INPUT\".**  From here, you may unplug the device you used to open the menu and plug in a new one, if necessary.  New devices will be appended to the existing input configuration file, so your old devices will remain configured.\n\n**If your controller stops working, you can delete the `~/.emulationstation/es_input.cfg` file to make the input configuration screen re-appear on next run.**\n\n\nYou can use `--help` or `-h` to view a list of command-line options. Briefly outlined here:\n```\n--resolution [width] [height]\t- try and force a particular resolution\n--gamelist-only\t\t- only display games defined in a gamelist.xml file.\n--ignore-gamelist\t- do not parse any gamelist.xml files.\n--draw-framerate\t- draw the framerate.\n--no-exit\t\t- do not display 'exit' in the ES menu.\n--debug\t\t\t- show the console window on Windows, do slightly more logging\n--windowed\t- run ES in a window, works best in conjunction with --resolution [w] [h].\n--vsync [1/on or 0/off]\t- turn vsync on or off (default is on).\n--scrape\t- run the interactive command-line metadata scraper.\n```\n\nAs long as ES hasn't frozen, you can always press F4 to close the application.\n\n\nWriting an es_systems.cfg\n=========================\n\nComplete configuration instructions at [emulationstation.org](http://emulationstation.org/gettingstarted.html#config).\n\nThe `es_systems.cfg` file contains the system configuration data for EmulationStation, written in XML.  This tells EmulationStation what systems you have, what platform they correspond to (for scraping), and where the games are located.\n\nES will check two places for an es_systems.cfg file, in the following order, stopping after it finds one that works:\n* `~/.emulationstation/es_systems.cfg`\n* `/etc/emulationstation/es_systems.cfg`\n\nThe order EmulationStation displays systems reflects the order you define them in.\n\n**NOTE:** A system *must* have at least one game present in its \"path\" directory, or ES will ignore it! If no valid systems are found, ES will report an error and quit!\n\nHere's an example es_systems.cfg:\n\n```xml\n<!-- This is the EmulationStation Systems configuration file.\nAll systems must be contained within the <systemList> tag.-->\n\n<systemList>\n\t<!-- Here's an example system to get you started. -->\n\t<system>\n\t\t<!-- A short name, used internally. -->\n\t\t<name>snes</name>\n\n\t\t<!-- A \"pretty\" name, displayed in the menus and such. This one is optional. -->\n\t\t<fullname>Super Nintendo Entertainment System</fullname>\n\n\t\t<!-- The path to start searching for ROMs in. '~' will be expanded to $HOME or %HOMEPATH%, depending on platform.\n\t\tAll subdirectories (and non-recursive links) will be included. -->\n\t\t<path>~/roms/snes</path>\n\n\t\t<!-- A list of extensions to search for, delimited by any of the whitespace characters (\", \\r\\n\\t\").\n\t\tYou MUST include the period at the start of the extension! It's also case sensitive. -->\n\t\t<extension>.smc .sfc .SMC .SFC</extension>\n\n\t\t<!-- The shell command executed when a game is selected. A few special tags are replaced if found in a command, like %ROM% (see below). -->\n\t\t<command>snesemulator %ROM%</command>\n\t\t<!-- This example would run the bash command \"snesemulator /home/user/roms/snes/Super\\ Mario\\ World.sfc\". -->\n\n\t\t<!-- The platform(s) to use when scraping. You can see the full list of accepted platforms in src/PlatformIds.cpp.\n\t\tIt's case sensitive, but everything is lowercase. This tag is optional.\n\t\tYou can use multiple platforms too, delimited with any of the whitespace characters (\", \\r\\n\\t\"), eg: \"genesis, megadrive\" -->\n\t\t<platform>snes</platform>\n\n\t\t<!-- The theme to load from the current theme set. See THEMES.md for more information.\n\t\tThis tag is optional; if not set, it will use the value of <name>. -->\n\t\t<theme>snes</theme>\n\t</system>\n</systemList>\n```\n\nThe following \"tags\" are replaced by ES in launch commands:\n\n`%ROM%`\t\t- Replaced with absolute path to the selected ROM, with most Bash special characters escaped with a backslash.\n\n`%BASENAME%`\t- Replaced with the \"base\" name of the path to the selected ROM. For example, a path of \"/foo/bar.rom\", this tag would be \"bar\". This tag is useful for setting up AdvanceMAME.\n\n`%ROM_RAW%`\t- Replaced with the unescaped, absolute path to the selected ROM.  If your emulator is picky about paths, you might want to use this instead of %ROM%, but enclosed in quotes.\n\nSee [SYSTEMS.md](SYSTEMS.md) for some live examples in EmulationStation.\n\ngamelist.xml\n============\n\nThe gamelist.xml file for a system defines metadata for games, such as a name, image (like a screenshot or box art), description, release date, and rating.\n\nIf at least one game in a system has an image specified, ES will use the detailed view for that system (which displays metadata alongside the game list).\n\n*You can use ES's [scraping](http://en.wikipedia.org/wiki/Web_scraping) tools to avoid creating a gamelist.xml by hand.*  There are two ways to run the scraper:\n\n* **If you want to scrape multiple games:** press start to open the menu and choose the \"SCRAPER\" option.  Adjust your settings and press \"SCRAPE NOW\".\n* **If you just want to scrape one game:** find the game on the game list in ES and press select.  Choose \"EDIT THIS GAME'S METADATA\" and then press the \"SCRAPE\" button at the bottom of the metadata editor.\n\nYou can also edit metadata within ES by using the metadata editor - just find the game you wish to edit on the gamelist, press Select, and choose \"EDIT THIS GAME'S METADATA.\"\n\nA command-line version of the scraper is also provided - just run emulationstation with `--scrape` *(currently broken)*.\n\nThe switch `--ignore-gamelist` can be used to ignore the gamelist and force ES to use the non-detailed view.\n\nIf you're writing a tool to generate or parse gamelist.xml files, you should check out [GAMELISTS.md](GAMELISTS.md) for more detailed documentation.\n\n\nThemes\n======\n\nBy default, EmulationStation looks pretty ugly. You can fix that. If you want to know more about making your own themes (or editing existing ones), read [THEMES.md](THEMES.md)!\n\nI've put some themes up for download on my EmulationStation webpage: http://aloshi.com/emulationstation#themes\n\nIf you're using RetroPie, you should already have a nice set of themes automatically installed!\n\n\n-Alec \"Aloshi\" Lofquist\nhttp://www.aloshi.com\nhttp://www.emulationstation.org\n"
        },
        {
          "name": "SYSTEMS.md",
          "type": "blob",
          "size": 6.2646484375,
          "content": "# Systems\n\nThis outlines how to add support for many different systems into EmulationStation through configuration of `es_systems.cfg`.\n\n## Nintendo Wii\n\n### [Dolphin](http://dolphin-emu.org/)\nIn Options → Configure → Interface, disable *Confirm to Stop*.\n``` xml\n<system>\n  <name>wii</name>\n  <fullname>Nintendo Wii</fullname>\n  <path>/rom/path/here</path>\n  <extension>.elf .dol .gcm .iso .wbfs .ciso .gcz .wad</extension>\n  <command>dolphin-emu -b -e %ROM%</command>\n  <platform>wii</platform>\n  <theme>wii</theme>\n</system>\n```\n\n\n## [Nintendo GameCube](https://en.wikipedia.org/wiki/GameCube)\n\n### [Dolphin](http://dolphin-emu.org/)\nIn Options → Configure → Interface, disable *Confirm to Stop*.\n``` xml\n<system>\n  <name>gc</name>\n  <fullname>Nintendo GameCube</fullname>\n  <path>/rom/path/here</path>\n  <extension>.elf .dol .gcm .iso .wbfs .ciso .gcz .wad</extension>\n  <command>dolphin-emu -b -e %ROM%</command>\n  <platform>gc</platform>\n  <theme>gc</theme>\n</system>\n```\n\n\n## Nintendo 64\n\n### [RetroArch](http://libretro.com)\nRequires a [Nintendo N64 Core](http://wiki.libretro.com/index.php?title=Nintendo_N64_Core_Compatibility), like [`libretro-mupen64plus`](http://wiki.libretro.com/index.php?title=Mupen64Plus).\n``` xml\n<system>\n  <name>n64</name>\n  <fullname>Nintendo 64</fullname>\n  <path>/path/to/roms</path>\n  <extension>.z64 .zip .n64</extension>\n  <command>retroarch --fullscreen -L /usr/lib/libretro/mupen64plus_libretro.so %ROM%</command>\n  <platform>n64</platform>\n  <theme>n64</theme>\n</system>\n```\n\n### [Mupen64Plus](https://code.google.com/p/mupen64plus/)\n``` xml\n<system>\n  <name>n64</name>\n  <fullname>Nintendo 64</fullname>\n  <path>/path/to/roms</path>\n  <extension>.z64 .zip .n64</extension>\n  <command>mupen64plus --nogui --noask --noosd --fullscreen %ROM%</command>\n  <platform>n64</platform>\n  <theme>n64</theme>\n</system>\n```\n\n\n## Nintendo Entertainment System\n\n### [RetroArch](http://libretro.com)\nRequires a [Nintendo NES Core](http://wiki.libretro.com/index.php?title=Nintendo_NES_Core_Compatibility), like [`libretro-fceumm`](http://wiki.libretro.com/index.php?title=FCEUmm).\n``` xml\n<system>\n  <name>nes</name>\n  <fullname>Nintendo Entertainment System</fullname>\n  <path>/path/to/roms</path>\n  <extension>.nes .NES .zip</extension>\n  <command>retroarch --fullscreen -L /usr/lib/libretro/fceumm_libretro.so %ROM%</command>\n  <platform>nes</platform>\n  <theme>nes</theme>\n</system>\n```\n\n### [Mednafen](http://mednafen.sourceforge.net/)\n``` xml\n<system>\n  <name>nes</name>\n  <fullname>Nintendo Entertainment System</fullname>\n  <path>/path/to/roms</path>\n  <extension>.nes .NES .zip</extension>\n  <command>mednafen -video.fs 1 %ROM%</command>\n  <platform>nes</platform>\n  <theme>nes</theme>\n</system>\n```\n\n\n## Super Nintendo Entertainment System\n\n### [ZSNES](http://zsnes.com/)\n``` xml\n<system>\n  <name>snes</name>\n  <fullname>Super Nintendo Entertainment System</fullname>\n  <path>/path/to/roms</path>\n  <extension>.smc .sfc .swc .fig .mgd .mgh .ufo .bin .gd3 .gd7 .usa .eur .jap .aus .st .bs .dx2 .048 .058 .078 .1 .a .gz .zip .jma</extension>\n  <command>zsnes -m %ROM%</command>\n  <platform>snes</platform>\n  <theme>snes</theme>\n</system>\n```\n\n### [RetroArch](http://libretro.com)\nRequires a [Nintendo SNES Core](http://wiki.libretro.com/index.php?title=Nintendo_SNES_Core_Compatibility), like [`libretro-snes9x-next`](http://wiki.libretro.com/index.php?title=SNES9x_Next).\n``` xml\n<system>\n  <name>snes</name>\n  <fullname>Super Nintendo Entertainment System</fullname>\n  <path>/path/to/roms</path>\n  <extension>.smc .sfc .fig .bin .zip</extension>\n  <command>retroarch --fullscreen -L /usr/lib/libretro/snes9x_next_libretro.so %ROM%</command>\n  <platform>snes</platform>\n  <theme>snes</theme>\n</system>\n```\n\n## Atari 2600\n\n### [Stella](http://stella.sourceforge.net/)\n``` xml\n<system>\n  <name>atari2600</name>\n  <fullname>Atari 2600</fullname>\n  <path>/path/to/roms</path>\n  <extension>.bin .zip</extension>\n  <command>stella %ROM%</command>\n  <platform>atari2600</platform>\n  <theme>atari2600</theme>\n</system>\n```\n\n## Nintendo GameBoy Advance\n\n### [Mednafen](http://mednafen.sourceforge.net/)\n``` xml\n<system>\n  <name>gba</name>\n  <fullname>Nintendo GameBoy Advance</fullname>\n  <path>/path/to/roms</path>\n  <extension>.gba .zip</extension>\n  <command>mednafen -video.fs 1 %ROM%</command>\n  <platform>gba</platform>\n  <theme>gba</theme>\n</system>\n```\n\n### [VisualBoyAdvance](http://sourceforge.net/projects/vba/)\n``` xml\n<system>\n  <name>gba</name>\n  <fullname>Nintendo GameBoy Advance</fullname>\n  <path>/path/to/roms</path>\n  <extension>.gba .zip</extension>\n  <command>VisualBoyAdvance -F %ROM%</command>\n  <platform>gba</platform>\n  <theme>gba</theme>\n</system>\n```\n\n### [RetroArch](http://libretro.com)\nRequires a [Nintendo GameBoy Advance Core](http://wiki.libretro.com/index.php?title=Nintendo_Game_Boy_Advance_Core_Compatibility), like [`libretro-vba-next`](http://wiki.libretro.com/index.php?title=VBA_Next).\n``` xml\n<system>\n  <name>gba</name>\n  <fullname>Nintendo GameBoy Advance</fullname>\n  <path>/path/to/roms</path>\n  <extension>.gba .zip</extension>\n  <command>retroarch --fullscreen -L /usr/lib/libretro/vba_next_libretro.so %ROM%</command>\n  <platform>gba</platform>\n  <theme>gba</theme>\n</system>\n```\n\n\n## [Steam](http://store.steampowered.com)\n\n1. Create a folder at `~/.emulationstation/steam`\n  ```\n  mkdir -p ~/.emulationstation/steam\n  ```\n2. Add text files for each Steam game you would like to have available through\nEmulationStation where:\n  * The file name represents the game's name\n  * The contents of the file represents the Steam application ID (found from the\n    game's Steam store page)\n\n  ```\n  cd ~/.emulationstation/steam\n  echo \"250900\" >> \"The Binding of Isaac: Rebirth.txt\"\n  ```\n\n``` xml\n<system>\n  <name>steam</name>\n  <fullname>Steam</fullname>\n  <path>~/.emulationstation/steam</path>\n  <extension>.txt</extension>\n  <command>steam steam://rungameid/$(tail %ROM%)</command>\n  <platform>pc</platform>\n  <theme>steam</theme>\n</system>\n```\n\n\n## [PlayStation Portable](http://en.wikipedia.org/wiki/PlayStation_Portable)\n\n### [PPSSPP](http://www.ppsspp.org)\n``` xml\n<system>\n  <name>psp</name>\n  <fullname>PlayStation Portable</fullname>\n  <path>/path/to/roms</path>\n  <extension>.iso</extension>\n  <command>ppsspp --fullscreen --escape-exit \"%ROM_RAW%\"</command>\n  <platform>psp</platform>\n  <theme>psp</theme>\n</system>\n```\n"
        },
        {
          "name": "THEMES.md",
          "type": "blob",
          "size": 18.9931640625,
          "content": "Themes\n======\n\nEmulationStation allows each system to have its own \"theme.\" A theme is a collection **views** that define some **elements**, each with their own **properties**.\n\nThe first place ES will check for a theme is in the system's `<path>` folder, for a theme.xml file:\n* `[SYSTEM_PATH]/theme.xml`\n\nIf that file doesn't exist, ES will try to find the theme in the current **theme set**.  Theme sets are just a collection of individual system themes arranged in the \"themes\" folder under some name.  Here's an example:\n\n```\n...\n   themes/\n      my_theme_set/\n         snes/\n            theme.xml\n            my_cool_background.jpg\n\n         nes/\n            theme.xml\n            my_other_super_cool_background.jpg\n\n         common_resources/\n            scroll_sound.wav\n\n      another_theme_set/\n         snes/\n            theme.xml\n            some_resource.svg\n```\n\nThe theme set system makes it easy for users to try different themes and allows distributions to include multiple theme options.  Users can change the currently active theme set in the \"UI Settings\" menu.  The option is only visible if at least one theme set exists.\n\nThere are two places ES can load theme sets from:\n* `[HOME]/.emulationstation/themes/[CURRENT_THEME_SET]/[SYSTEM_THEME]/theme.xml`\n* `/etc/emulationstation/themes/[CURRENT_THEME_SET]/[SYSTEM_THEME]/theme.xml`\n\n`[SYSTEM_THEME]` is the `<theme>` tag for the system, as defined in `es_systems.cfg`.  If the `<theme>` tag is not set, ES will use the system's `<name>`.\n\nIf both files happen to exist, ES will pick the first one (the one located in the home directory).\n\nAgain, the `[CURRENT_THEME_SET]` value is set in the \"UI Settings\" menu.  If it has not been set yet or the previously selected theme set is missing, the first available theme set will be used as the default.\n\nSimple Example\n==============\n\nHere is a very simple theme that changes the description text's color:\n\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<view name=\"detailed\">\n\t\t<text name=\"description\">\n\t\t\t<color>00FF00</color>\n\t\t</text>\n\t\t<image name=\"my_image\" extra=\"true\">\n\t\t\t<pos>0.5 0.5</pos>\n\t\t\t<origin>0.5 0.5</origin>\n\t\t\t<size>0.8 0.8</size>\n\t\t\t<path>./my_art/my_awesome_image.jpg</path>\n\t\t</image>\n\t</view>\n</theme>\n```\n\nHow it works\n============\n\nEverything must be inside a `<theme>` tag.\n\n**The `<formatVersion>` tag *must* be specified**.  This is the version of the theming system the theme was designed for.  The current version is 3.\n\n\n\nA *view* can be thought of as a particular \"screen\" within EmulationStation.  Views are defined like this:\n\n```xml\n<view name=\"ViewNameHere\">\n\t... define elements here ...\n</view>\n```\n\n\n\nAn *element* is a particular visual element, such as an image or a piece of text.  You can either modify an element that already exists for a particular view (as is done in the \"description\" example), like this:\n\n```xml\n\t<elementTypeHere name=\"ExistingElementNameHere\">\n\t\t... define properties here ...\n\t</elementTypeHere>\n```\n\nOr, you can create your own elements by adding `extra=\"true\"` (as is done in the \"my_image\" example) like this:\n\n```xml\n\t<elementTypeHere name=\"YourUniqueElementNameHere\" extra=\"true\">\n\t\t... define properties here ...\n\t</elementTypeHere>\n```\n\n\"Extra\" elements will be drawn in the order they are defined (so define backgrounds first!).  When they get drawn relative to the pre-existing elements depends on the view.  Make sure \"extra\" element names do not clash with existing element names!  An easy way to protect against this is to just start all your extra element names with some prefix like \"e_\".\n\n\n\n*Properties* control how a particular *element* looks - for example, its position, size, image path, etc.  The type of the property determines what kinds of values you can use.  You can read about the types below in the \"Reference\" section.  Properties are defined like this:\n\n```xml\n\t\t<propertyNameHere>ValueHere</propertyNameHere>\n```\n\n\n\n\nAdvanced Features\n=================\n\nIt is recommended that if you are writing a theme you launch EmulationStation with the `--debug` and `--windowed` switches.  This way you can read error messages without having to check the log file.  You can also reload the current gamelist view and system view with `Ctrl-R` if `--debug` is specified.\n\n### The `<include>` tag\n\nYou can include theme files within theme files, similar to `#include` in C (though the internal mechanism is different, the effect is the same).  Example:\n\n`~/.emulationstation/all_themes.xml`:\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<view name=\"detailed\">\n\t\t<text name=\"description\">\n\t\t\t<fontPath>./all_themes/myfont.ttf</fontPath>\n\t\t\t<color>00FF00</color>\n\t\t</text>\n\t</view>\n</theme>\n```\n\n`~/.emulationstation/snes/theme.xml`:\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<include>./../all_themes.xml</include>\n\t<view name=\"detailed\">\n\t\t<text name=\"description\">\n\t\t\t<color>FF0000</color>\n\t\t</text>\n\t</view>\n</theme>\n```\n\nIs equivalent to this `snes/theme.xml`:\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<view name=\"detailed\">\n\t\t<text name=\"description\">\n\t\t\t<fontPath>./all_themes/myfont.ttf</fontPath>\n\t\t\t<color>FF0000</color>\n\t\t</text>\n\t</view>\n</theme>\n```\n\nNotice that properties that were not specified got merged (`<fontPath>`) and the `snes/theme.xml` could overwrite the included files' values (`<color>`).  Also notice the included file still needed the `<formatVersion>` tag.\n\n\n\n### Theming multiple views simultaneously\n\nSometimes you want to apply the same properties to the same elements across multiple views.  The `name` attribute actually works as a list (delimited by any characters of `\\t\\r\\n ,` - that is, whitespace and commas).  So, for example, to easily apply the same header to the basic, grid, and system views:\n\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<view name=\"basic, grid, system\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header.png</path>\n\t\t</image>\n\t</view>\n\t<view name=\"detailed\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header_detailed.png</path>\n\t\t</image>\n\t</view>\n</theme>\n```\n\nThis is equivalent to:\n```xml\n<theme>\n\t<formatVersion>3</formatVersion>\n\t<view name=\"basic\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header.png</path>\n\t\t</image>\n\t</view>\n\t<view name=\"detailed\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header_detailed.png</path>\n\t\t</image>\n\t</view>\n\t<view name=\"grid\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header.png</path>\n\t\t</image>\n\t</view>\n\t<view name=\"system\">\n\t\t<image name=\"logo\">\n\t\t\t<path>./snes_art/snes_header.png</path>\n\t\t</image>\n\t</view>\n\t... and any other view that might try to look up \"logo\" ...\n</theme>\n```\n\n\n\n### Theming multiple elements simultaneously\n\nYou can theme multiple elements *of the same type* simultaneously.  The `name` attribute actually works as a list (delimited by any characters of `\\t\\r\\n ,` - that is, whitespace and commas), just like it does for views, as long as the elements have the same type.  This is useful if you want to, say, apply the same color to all the metadata labels:\n\n```xml\n<theme>\n    <formatVersion>3</formatVersion>\n    <view name=\"detailed\">\n    \t<!-- Weird spaces/newline on purpose! -->\n    \t<text name=\"md_lbl_rating, md_lbl_releasedate, md_lbl_developer, md_lbl_publisher, \n    \tmd_lbl_genre,    md_lbl_players,        md_lbl_lastplayed, md_lbl_playcount\">\n        \t<color>48474D</color>\n        </text>\n    </view>\n</theme>\n```\n\nWhich is equivalent to:\n```xml\n<theme>\n    <formatVersion>3</formatVersion>\n    <view name=\"detailed\">\n    \t<text name=\"md_lbl_rating\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_releasedate\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_developer\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_publisher\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_genre\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_players\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_lastplayed\">\n    \t\t<color>48474D</color>\n    \t</text>\n    \t<text name=\"md_lbl_playcount\">\n    \t\t<color>48474D</color>\n    \t</text>\n    </view>\n</theme>\n```\n\nJust remember, *this only works if the elements have the same type!*\n\n\nReference\n=========\n\n## Views, their elements, and themable properties:\n\n#### basic\n* `helpsystem name=\"help\"` - ALL\n\t- The help system style for this view.\n* `image name=\"background\"` - ALL\n\t- This is a background image that exists for convenience. It goes from (0, 0) to (1, 1).\n* `text name=\"logoText\"` - ALL\n\t- Displays the name of the system.  Only present if no \"logo\" image is specified.  Displayed at the top of the screen, centered by default.\n* `image name=\"logo\"` - ALL\n\t- A header image.  If a non-empty `path` is specified, `text name=\"headerText\"` will be hidden and this image will be, by default, displayed roughly in its place.\n* `textlist name=\"gamelist\"` - ALL\n\t- The gamelist.  `primaryColor` is for games, `secondaryColor` is for folders.  Centered by default.\n\n---\n\n#### detailed\n* `helpsystem name=\"help\"` - ALL\n\t- The help system style for this view.\n* `image name=\"background\"` - ALL\n\t- This is a background image that exists for convenience. It goes from (0, 0) to (1, 1).\n* `text name=\"logoText\"` - ALL\n\t- Displays the name of the system.  Only present if no \"logo\" image is specified.  Displayed at the top of the screen, centered by default.\n* `image name=\"logo\"` - ALL\n\t- A header image.  If a non-empty `path` is specified, `text name=\"headerText\"` will be hidden and this image will be, by default, displayed roughly in its place.\n* `textlist name=\"gamelist\"` - ALL\n\t- The gamelist.  `primaryColor` is for games, `secondaryColor` is for folders.  Left aligned by default.\n\n* Metadata\n\t* Labels\n\t\t* `text name=\"md_lbl_rating\"` - ALL\n\t\t* `text name=\"md_lbl_releasedate\"` - ALL\n\t\t* `text name=\"md_lbl_developer\"` - ALL\n\t\t* `text name=\"md_lbl_publisher\"` - ALL\n\t\t* `text name=\"md_lbl_genre\"` - ALL\n\t\t* `text name=\"md_lbl_players\"` - ALL\n\t\t* `text name=\"md_lbl_lastplayed\"` - ALL\n\t\t* `text name=\"md_lbl_playcount\"` - ALL\n\n\t* Values\n\t\t* All values will follow to the right of their labels if a position isn't specified.\n\n\t\t* `image name=\"md_image\"` - POSITION | SIZE\n\t\t\t- Path is the \"image\" metadata for the currently selected game.\n\t\t* `rating name=\"md_rating\"` - ALL\n\t\t\t- The \"rating\" metadata.\n\t\t* `datetime name=\"md_releasedate\"` - ALL\n\t\t\t- The \"releasedate\" metadata.\n\t\t* `text name=\"md_developer\"` - ALL\n\t\t\t- The \"developer\" metadata.\n\t\t* `text name=\"md_publisher\"` - ALL\n\t\t\t- The \"publisher\" metadata.\n\t\t* `text name=\"md_genre\"` - ALL\n\t\t\t- The \"genre\" metadata.\n\t\t* `text name=\"md_players\"` - ALL\n\t\t\t- The \"players\" metadata (number of players the game supports).\n\t\t* `datetime name=\"md_lastplayed\"` - ALL\n\t\t\t- The \"lastplayed\" metadata.  Displayed as a string representing the time relative to \"now\" (e.g. \"3 hours ago\").\n\t\t* `text name=\"md_playcount\"` - ALL\n\t\t\t- The \"playcount\" metadata (number of times the game has been played).\n\t\t* `text name=\"md_description\"` - POSITION | SIZE | FONT_PATH | FONT_SIZE | COLOR\n\t\t\t- Text is the \"desc\" metadata.  If no `pos`/`size` is specified, will move and resize to fit under the lowest label and reach to the bottom of the screen.\n\n---\n\n#### grid\n* `helpsystem name=\"help\"` - ALL\n\t- The help system style for this view.\n* `image name=\"background\"` - ALL\n\t- This is a background image that exists for convenience. It goes from (0, 0) to (1, 1).\n* `text name=\"logoText\"` - ALL\n\t- Displays the name of the system.  Only present if no \"logo\" image is specified.  Displayed at the top of the screen, centered by default.\n* `image name=\"logo\"` - ALL\n\t- A header image.  If a non-empty `path` is specified, `text name=\"headerText\"` will be hidden and this image will be, by default, displayed roughly in its place.\n\n---\n\n#### system\n* `helpsystem name=\"help\"` - ALL\n\t- The help system style for this view.\n* `image name=\"logo\"` - PATH\n\t- A logo image, to be displayed in the system logo carousel.\n* You can use extra elements (elements with `extra=\"true\"`) to add your own backgrounds, etc.  They will be displayed behind the carousel, and scroll relative to the carousel.\n\n\n## Types of properties:\n\n* NORMALIZED_PAIR - two decimals, in the range [0..1], delimited by a space.  For example, `0.25 0.5`.  Most commonly used for position (x and y coordinates) and size (width and height).\n* PATH - a path.  If the first character is a `~`, it will be expanded into the environment variable for the home path (`$HOME` for Linux or `%HOMEPATH%` for Windows).  If the first character is a `.`, it will be expanded to the theme file's directory, allowing you to specify resources relative to the theme file, like so: `./../general_art/myfont.ttf`.\n* BOOLEAN - `true`/`1` or `false`/`0`.\n* COLOR - a hexidecimal RGB or RGBA color (6 or 8 digits).  If 6 digits, will assume the alpha channel is `FF` (not transparent).\n* FLOAT - a decimal.\n* STRING - a string of text.\n\n\n## Types of elements and their properties:\n\nCommon to almost all elements is a `pos` and `size` property of the NORMALIZED_PAIR type.  They are normalized in terms of their \"parent\" object's size; 99% of the time, this is just the size of the screen.  In this case, `<pos>0 0</pos>` would correspond to the top left corner, and `<pos>1 1</pos>` the bottom right corner (a positive Y value points further down).  `pos` almost always refers to the top left corner of your element.  You *can* use numbers outside of the [0..1] range if you want to place an element partially or completely off-screen.\n\nThe order you define properties in does not matter.\nRemember, you do *not* need to specify every property!\n*Note that a view may choose to only make only certain properties on a particular element themable!*\n\n#### image\n\nCan be created as an extra.\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n\t- If only one axis is specified (and the other is zero), the other will be automatically calculated in accordance with the image's aspect ratio.\n* `maxSize` - type: NORMALIZED_PAIR.\n\t- The image will be resized as large as possible so that it fits within this size and maintains its aspect ratio.  Use this instead of `size` when you don't know what kind of image you're using so it doesn't get grossly oversized on one axis (e.g. with a game's image metadata).\n* `origin` - type: NORMALIZED_PAIR.\n\t- Where on the image `pos` refers to.  For example, an origin of `0.5 0.5` and a `pos` of `0.5 0.5` would place the image exactly in the middle of the screen.  If the \"POSITION\" and \"SIZE\" attributes are themable, \"ORIGIN\" is implied.\n* `path` - type: PATH.\n\t- Path to the image file.  Most common extensions are supported (including .jpg, .png, and unanimated .gif).\n* `tile` - type: BOOLEAN.\n\t- If true, the image will be tiled instead of stretched to fit its size.  Useful for backgrounds.\n* `color` - type: COLOR.\n\t- Multiply each pixel's color by this color. For example, an all-white image with `<color>FF0000</color>` would become completely red.  You can also control the transparency of an image with `<color>FFFFFFAA</color>` - keeping all the pixels their normal color and only affecting the alpha channel.\n\n#### text\n\nCan be created as an extra.\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n\t- Possible combinations:\n\t- `0 0` - automatically size so text fits on one line (expanding horizontally).\n\t- `w 0` - automatically wrap text so it doesn't go beyond `w` (expanding vertically).\n\t- `w h` - works like a \"text box.\"  If `h` is non-zero and `h` <= `fontSize` (implying it should be a single line of text), text that goes beyond `w` will be truncated with an elipses (...).\n* `text` - type: STRING.\n* `color` - type: COLOR.\n* `fontPath` - type: PATH.\n\t- Path to a truetype font (.ttf).\n* `fontSize` - type: FLOAT.\n\t- Size of the font as a percentage of screen height (e.g. for a value of `0.1`, the text's height would be 10% of the screen height).\n* `alignment` - type: STRING.\n\t- Valid values are \"left\", \"center\", or \"right\".  Controls alignment on the X axis.  \"center\" will also align vertically.\n* `forceUppercase` - type: BOOLEAN.  Draw text in uppercase.\n* `lineSpacing` - type: FLOAT.  Controls the space between lines (as a multiple of font height).  Default is 1.5.\n\n#### textlist\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n* `selectorColor` - type: COLOR.\n\t- Color of the \"selector bar.\"\n* `selectedColor` - type: COLOR.\n\t- Color of the highlighted entry text.\n* `primaryColor` - type: COLOR.\n\t- Primary color; what this means depends on the text list.  For example, for game lists, it is the color of a game.\n* `secondaryColor` - type: COLOR.\n\t- Secondary color; what this means depends on the text list.  For example, for game lists, it is the color of a folder.\n* `fontPath` - type: PATH.\n* `fontSize` - type: FLOAT.\n* `scrollSound` - type: PATH.\n\t- Sound that is played when the list is scrolled.\n* `alignment` - type: STRING.\n\t- Valid values are \"left\", \"center\", or \"right\".  Controls alignment on the X axis.\n* `horizontalMargin` - type: FLOAT.\n\t- Horizontal offset for text from the alignment point.  If `alignment` is \"left\", offsets the text to the right.  If `alignment` is \"right\", offsets text to the left.  No effect if `alignment` is \"center\".  Given as a percentage of the element's parent's width (same unit as `size`'s X value).\n* `forceUppercase` - type: BOOLEAN.  Draw text in uppercase.\n* `lineSpacing` - type: FLOAT.  Controls the space between lines (as a multiple of font height).  Default is 1.5.\n\n#### ninepatch\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n* `path` - type: PATH.\n\nEmulationStation borrows the concept of \"nine patches\" from Android (or \"9-Slices\"). Currently the implementation is very simple and hard-coded to only use 48x48px images (16x16px for each \"patch\"). Check the `data/resources` directory for some examples (button.png, frame.png).\n\n#### rating\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n\t- Only one value is actually used. The other value should be zero.  (e.g. specify width OR height, but not both.  This is done to maintain the aspect ratio.)\n* `filledPath` - type: PATH.\n\t- Path to the \"filled star\" image.  Image must be square (width equals height).\n* `unfilledPath` - type: PATH.\n\t- Path to the \"unfilled star\" image.  Image must be square (width equals height).\n\n#### datetime\n\n* `pos` - type: NORMALIZED_PAIR.\n* `size` - type: NORMALIZED_PAIR.\n\t- You should probably not set this.  Leave it to `fontSize`.\n* `color` - type: COLOR.\n* `fontPath` - type: PATH.\n* `fontSize` - type: FLOAT.\n* `forceUppercase` - type: BOOLEAN.  Draw text in uppercase.\n\n#### sound\n\n* `path` - type: PATH.\n\t- Path to the sound file.  Only .wav files are currently supported.\n\n#### helpsystem\n\n* `pos` - type: NORMALIZED_PAIR.  Default is \"0.012 0.9515\"\n* `textColor` - type: COLOR.  Default is 777777FF.\n* `iconColor` - type: COLOR.  Default is 777777FF.\n* `fontPath` - type: PATH.\n* `fontSize` - type: FLOAT.\n\nThe help system is a special element that displays a context-sensitive list of actions the user can take at any time.  You should try and keep the position constant throughout every screen.  Keep in mind the \"default\" settings (including position) are used whenever the user opens a menu.\n\n[*Check out the \"official\" themes for some more examples!*](http://aloshi.com/emulationstation#themes)\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "es-app",
          "type": "tree",
          "content": null
        },
        {
          "name": "es-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "opensans_license.txt",
          "type": "blob",
          "size": 0.6181640625,
          "content": "Regarding the Open Sans font (located in data/resources/ and data/converted):\n\nCopyright 2010 Steve Matteson\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        }
      ]
    }
  ]
}