{
  "metadata": {
    "timestamp": 1736565820069,
    "page": 751,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Farama-Foundation/Arcade-Learning-Environment",
      "stars": 2211,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.31640625,
          "content": "# See also https://help.github.com/en/github/using-git/configuring-git-to-handle-line-endings.\n\n# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Always normalize these file types.\n*.c text\n*.cc text\n*.cpp text\n*.cxx text\n*.h text\n*.hpp text\n*.hxx text\n*.java text\n*.txt text\n*.md text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.298828125,
          "content": "## ALE\nbuild\ndoc/examples/*Example\n\n\n# Don't save roms in repo\n*.tar.gz.b64\n*.tar.gz\n*.bin\n!tetris.bin\n\n# Auto-generated dependency files\n.deps\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.d\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# Docs\n/docs/_build/\n\n# CLion project settings and build-folders\ncmake-build-*\n.idea\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.76171875,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-symlinks\n      - id: destroyed-symlinks\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-toml\n      - id: check-ast\n      - id: check-added-large-files\n      - id: check-merge-conflict\n      - id: check-executables-have-shebangs\n      - id: check-shebang-scripts-are-executable\n      - id: detect-private-key\n      - id: debug-statements\n#  - repo: https://github.com/codespell-project/codespell\n#    rev: v2.2.6\n#    exclude: ^(src/common)|(src/emucore)|(src/environment)|(src/games)\n#    hooks:\n#      - id: codespell\n#        args:\n#          - --ignore-words-list=\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        args:\n          - '--per-file-ignores=tests/python/test_atari_env.py:F811 tests/python/test_python_interface.py:F811'\n          - --ignore=E203,W503,E741\n          - --max-complexity=30\n          - --max-line-length=456\n          - --show-source\n          - --statistics\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.0\n    hooks:\n      - id: pyupgrade\n        args: [\"--py39-plus\"]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        args: [\"--profile\", \"black\"]\n  - repo: https://github.com/python/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/pydocstyle\n    rev: 6.3.0\n    hooks:\n      - id: pydocstyle\n        exclude: ^(docs/)|setup.py\n        args:\n          - --source\n          - --explain\n          - --convention=google\n        additional_dependencies: [\"tomli\"]\n"
        },
        {
          "name": "ACKNOWLEDGMENTS.md",
          "type": "blob",
          "size": 4.14453125,
          "content": "# Acknowledgements\n\nThe Arcade Learning Environment is derived from the [Stella](https://github.com/stella-emu/stella) emulator.\n\n\n## Stella\n\n```\n===========================================================================\n\n   SSSS    tt          lll  lll\n  SS  SS   tt           ll   ll\n  SS     tttttt  eeee   ll   ll   aaaa\n   SSSS    tt   ee  ee  ll   ll      aa\n      SS   tt   eeeeee  ll   ll   aaaaa  --  \"An Atari 2600 VCS Emulator\"\n  SS  SS   tt   ee      ll   ll  aa  aa\n   SSSS     ttt  eeeee llll llll  aaaaa\n\n===========================================================================\n                  License Information and Copyright Notice\n===========================================================================\n\nCopyright (C) 1995-2012 Bradford W. Mott, Stephen Anthony and the\nStella Team\n\n===========================================================================\nThe Arcade Learning Environment\n===========================================================================\n\nCopyright (C) 2009-2012 Yavar Naddaf, Marc G. Bellemare, Joel Veness and the\nArtificial Intelligence Laboratory at the University of Alberta\n\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or any later version.\n\nYou should have received a copy of the GNU General Public License version 2\nalong with this program (License.txt); if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY. IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO\nANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY\nDERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nTHE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS\nPROVIDED ON AN \"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO\nOBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR\nMODIFICATIONS.\n```\n\n## M6502\n\n```\n===============================================================================\n\n  MM     MM  6666  555555  0000   2222\n  MMMM MMMM 66  66 55     00  00 22  22\n  MM MMM MM 66     55     00  00     22\n  MM  M  MM 66666  55555  00  00  22222  --  \"A 6502 Microprocessor Emulator\"\n  MM     MM 66  66     55 00  00 22\n  MM     MM 66  66 55  55 00  00 22\n  MM     MM  6666   5555   0000  222222\n\n===============================================================================\n                   License Information and Copyright Notice\n===============================================================================\n\nCopyright (C) 1995-2002 Bradford W. Mott <bwmott@acm.org>\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or any later version.\n\nYou should have received a copy of the GNU General Public License version 2\nalong with this program (License.txt); if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY. IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY\nPARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES\nTHEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\nTHE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN\n\"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE\nMAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n```\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.6796875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n\n## [0.10.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.10.0...v0.10.1) - 2024-10-26\n\nRevert change to requirements that `numpy < 2.0` and add support for building from source distribution, `tar.gz` (though not recommended).\n\n## [0.10.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.9.1...v0.10.0) - 2024-10-23\n\nIn v0.10, ALE now has its own dedicated website, https://ale.farama.org/ with Atari's documentation being moved from Gymnasium.\n\n### Continuous ALE\nPreviously in the original ALE interface, the actions are only joystick ActionEnum inputs.\nThen, for games that use a paddle instead of a joystick, joystick controls are mapped into discrete actions applied to paddles, ie:\n- All left actions (`LEFTDOWN`, `LEFTUP`, `LEFT...`) -> paddle left max\n- All right actions (`RIGHTDOWN`, `RIGHTUP`, `RIGHT...`) -> paddle right max\n- Up... etc.\n- Down... etc.\n\nThis results in loss of continuous action for paddles.\nThis change keeps this functionality and interface, but allows for continuous action inputs for games that allow paddle usage.\n\nTo do that, the CPP interface has been modified.\n\n_Old Discrete ALE interface_\n```cpp\nreward_t ALEInterface::act(Action action)\n```\n\n_New Mixed Discrete-Continuous ALE interface_\n```cpp\nreward_t ALEInterface::act(Action action, float paddle_strength = 1.0)\n```\n\nGames where the paddle is not used simply have the `paddle_strength` parameter ignored.\nThis mirrors the real world scenario where you have a paddle connected, but the game doesn't react to it when the paddle is turned.\nThis maintains backwards compatibility.\n\nThe Python interface has also been updated.\n\n_Old Discrete ALE Python Interface_\n```py\nale.act(action: int)\n```\n\n_New Mixed Discrete-Continuous ALE Python Interface_\n```py\nale.act(action: int, strength: float = 1.0)\n```\n\nMore specifically, when continuous action space is used within an ALE gymnasium environment, discretization happens at the Python level.\n```py\nif continuous:\n    # action is expected to be a [2,] array of floats\n    x, y = action[0] * np.cos(action[1]), action[0] * np.sin(action[1])\n    action_idx = self.map_action_idx(\n        left_center_right=(\n            -int(x < self.continuous_action_threshold)\n            + int(x > self.continuous_action_threshold)\n        ),\n        down_center_up=(\n            -int(y < self.continuous_action_threshold)\n            + int(y > self.continuous_action_threshold)\n        ),\n        fire=(action[-1] > self.continuous_action_threshold),\n    )\n    ale.act(action_idx, action[1])\n```\n\nMore specifically, [`self.map_action_idx`](https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/550/files#diff-057906329e72d689f1d4d9d9e3f80df11ffe74da581b29b3838a436e90841b5cR388-R447) is an `lru_cache`-ed function that takes the continuous action direction and maps it into an ActionEnum.\n\n### Other changes\n\nWe have moved the project main code from `src` into `src/ale` to help incorporate ALE into c++ project and in the python API, we have updated `get_keys_to_action` to work with `gymnasium.utils.play` through changing the key for no-op from `None` to the `e` key.\n\n## [0.9.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.9.0...v0.9.1) - 2024-09-01\n\nAdded support for Numpy 2.0.\n\n## [0.9.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.8.1...v0.9.0) - 2024-05-10\n\nPreviously, ALE implemented only a [Gym](https://github.com/openai/gym) based environment, however, as Gym is no longer maintained (last commit was 18 months ago). We have updated `ale-py` to use [Gymnasium](http://github.com/farama-Foundation/gymnasium) (a maintained fork of Gym) as the sole backend environment implementation. For more information on Gymnasium’s API, see their [introduction page](https://gymnasium.farama.org/main/introduction/basic_usage/).\n\n```python\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)  # this is unnecessary but prevents IDE complaining\n\nenv = gym.make(\"ALE/Pong-v5\", render_mode=\"human\")\n\nobs, info = env.reset()\nepisode_over = False\nwhile not episode_over:\n\taction = policy(obs)  # replace with actual policy\n\tobs, reward, terminated, truncated, info = env.step(action)\n\tepisode_over = terminated or truncated\nenv.close()\n```\n\nAn important change in this update is that the Atari ROMs are packaged within the PyPI installation such that users no longer require AutoROM or `ale-import-roms` for downloading or loading ROMs. This should significantly simplify installing Atari for users. For users that wish to load ROMs from an alternative folder, use the `ALE_ROM_DIR` system environment variable to specify a folder directory.\n\nImportantly, Gymnasium 1.0.0 removes a registration plugin system that ale-py utilises where atari environments would be registered behind the scene. As a result, projects will need to import `ale_py`, to register all the atari environments, before an atari environment can be created with `gymnasium.make`. For example, see below\n\n### Other changes\n- Added Python 3.12 support.\n- Replace interactive exit by sys.exit (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/498)\n- Fix C++ documentation example links(https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/501)\n- Add support for gcc 13 (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/503)\n- Unpin cmake dependency and remove wheel from build system (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/493)\n- Add missing imports for cstdint (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/486)\n- Allow installing without git (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/492)\n- Update to require `importlib-resources` for < 3.9  (https://github.com/Farama-Foundation/Arcade-Learning-Environment/pull/491)\n\n## [0.8.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.8.0...v0.8.1) - 2023-02-17\n\n### Added\n\n- Added type stubs for the native ALE Python module generated via pybind11. You'll now get type hints in your IDE.\n\n### Fixed\n\n- Fixed `render_mode` attribute on legacy Gym environment (@younik)\n- Fixed a bug which could parse invalid ROM names containing numbers, e.g., TicTacToe3D or Pitfall2\n- Changed the ROM identifier of VideoChess & VideoCube to match VideoCheckers & VideoPinball.\n  Specifically, the environment ID changed from `Videochess` -> `VideoChess` and `Videocube` -> `VideoCube`.\n  Most ROMs had the ID correctly as `video_chess.bin` and `video_cube.bin` but for those who didn't you can\n  simply run `ale-import-roms` which will automatically correct this for you.\n- Reverted back to manylinux2014 (glibc 2.17) to better support older operating systems.\n\n## [0.8.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.5...v0.8.0) - 2022-09-05\n\n### Added\n\n- Added compliance with the Gym v26 API. This includes multiple breaking changes to the Gym API. See the [Gym Release](https://github.com/openai/gym) for additional information.\n- Reworked the ROM plugin API resulting in reduced startup time when importing `ale_py.roms`.\n- Added a truncation API to the ALE interface to query whether an episode was truncated or terminated (`ale.game_over(with_truncation=true/false)` and `ale.game_truncated()`)\n- Added proper Gym truncation on max episode frames. This no longer relies on the `TimeLimit` wrapper with the new truncation API in Gym v26.\n- Added a setting for truncating on loss-of-life.\n- Added a setting for clamping rewards.\n- Added `const` keywords to attributes in `ale::ALEInterface` (#457) (@AlessioZanga).\n- Added explicit exports via `__all__` in ale-py so linting tools can better detect exports.\n- Added builds for Python 3.11.\n\n### Fixed\n\n- Moved the Gym environment entrypoint from `gym.envs.atari:AtariEnv` to `ale_py.env.gym:AtariEnv`. This resolves many issues with the namespace package but does break backwards compatability for some Gym code that relied on the entry point being prefixed with `gym.envs.atari`.\n\n## [0.7.5](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.4...v0.7.5) - 2022-04-18\n\n### Added\n\n- Added validation for Gym's frameskip values.\n- Made ROM loading more robust with module-level `__getattr__` and `__dir__`.\n- Added `py.typed` to the Python module's root directory to support type checkers.\n- Bumped SDL to v2.0.16.\n\n### Fixed\n\n- Fixed Gym render mode metadata. (@vwxyzjn)\n- Fixed Gym warnings about `seeding.hash_seed` and `random.randint`.\n- Fixed build infrastructure issues from the migration to `setuptools>=0.61`.\n\n### Removed\n\n- Removed Gym's `.render(mode='human')`. Gym now uses the `render_mode` keyword argument in the environment constructor.\n\n## [0.7.4](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.3...v0.7.4) - 2022-02-16\n\n### Added\n\n- Proper C++ namespacing for the ALE and Stella (@tuero)\n- vcpkg manifest. You can now install dependencies via `cmake`.\n- Support for the new Gym (0.22) `reset` API, i.e., the `seed` and `return_info` keyword arguments.\n- Moved cibuildwheel config from Github Actions to pyproject.toml.\n\n### Fixed\n\n- Fixed a bug with the terminal signal in ChopperCommand #434\n- Fixed warnings with `importlib-metadata` on Python < 3.9.\n- Reverted the Gym `v5` defaults to align with the post-DQN literature. That is, moving from a frameskip of 5 -> 4, and full action set -> minimal action set.\n\n## [0.7.3](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.3...v0.7.2) — 2021-11-02\n\n### Added\n\n- Environment variable `ALE_PY_ROM_DIR` which if specified will search for ROMs in `${ALE_PY_ROM_DIR}/*.bin`. (@joshgreaves)\n\n## [0.7.2](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.1...v0.7.2) — 2021-10-07\n\n### Added\n\n- Package Tetris by Colin Hughes. This ROM is made publicly available by the author. This is useful for other open-source packages to be able to unit test agaisnt the ALE. (@tfboyd)\n- Python 3.10 prebuilt wheels\n\n### Fixed\n\n- Fixed an issue with `isSupportedROM` on Windows which was causing incorrect ROM hashes.\n\n### Removed\n\n- Python 3.6 prebuilt wheels\n\n## [0.7.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.7.0...v0.7.1) — 2021-09-28\n\n### Added\n\n- Added `ale-import-roms --import-from-pkg {pkg}`\n- Use `gym.envs.atari` as a namespace package to maintain backwards compatability with the `AtariEnv` entry point.\n- The ALE now uses Gym's environment plugin system in `gym>=0.21` (https://github.com/openai/gym/pull/2383, https://github.com/openai/gym/pull/2409, https://github.com/openai/gym/pull/2411). Users no longer are required to import `ale_py` to use a `-v5` environment.\n\n### Changed\n\n- Silence unsupported ROMs warning behind `ImportError`. To view these errors you should now supply the environment variable `PYTHONWARNINGS=default::ImportWarning:ale_py.roms`.\n- Reworked ROM error messages to provide more helpful suggestions.\n- General metadata changes to the Python package.\n\n### Fixed\n\n- Add missing `std::` name qualifier when enabling SDL (@anadrome)\n- Fixed mandatory kwarg for `gym.envs.atari:AtariEnv.clone_state`.\n\n## [0.7.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.6.1...v0.7.0) — 2021-09-14\n\n### Added\n\n- Native support for OpenAI Gym\n- Native Python interface using pybind11 which results in a speedup for Python workloads as well as proper support for objects like `ALEState`\n- Python ROM management, e.g., `ale-import-roms`\n- PyPi Python wheels published as `ale-py` + we distribute SDL2 for out of the box visualization + audio support\n- `isSupportedROM(path)` to check if a ROM file is supported by the ALE\n- Added new games: Atlantis2, Backgammon, BasicMath, Blackjack, Casino, Crossbow, DarkChambers, Earthworld, Entombed, ET, FlagCapture, Hangman, HauntedHouse, HumanCannonball, Klax, MarioBros, MiniatureGolf, Othello, Pacman, Pitfall2, SpaceWar, Superman, Surround, TicTacToe3D, VideoCheckers, VideoChess, VideoCube, WordZapper (thanks @tkoppe)\n- Added (additional) mode/difficulty settings for: Lost Luggage, Turmoil, Tron Dead Discs, Pong, Mr. Do, King Kong, Frogger, Adventure (thanks @tkoppe)\n- Added `cloneState(include_rng)` which will eventually replace `cloneSystemState` (behind the scenes `cloneSystemState` is equivalent to `cloneState(include_rng=True)`).\n- Added `setRAM` which can be useful for modifying the environment, e.g., learning a causal model over RAM transitions, altering game dynamics, etc.\n\n### Changed\n\n- Rewrote SDL support using SDL2 primitives\n- SDL2 now renders every frame independent of frameskip\n- SDL2 renders at the proper ROM framerate (added benefit of audio sync support)\n- Rewrote entire CMake infrastructure which now supports vcpkg natively\n- C++ minimum version is now C++17\n- Changed all relative imports to absolute imports\n- Switched from Travis CI to Github Actions\n- Allow for paddle controller's min/max setting to be configurable\n- More robust version handling between C++ & Python distributions\n- Updated Markdown documentation to replace TeX manual\n\n### Fixed\n\n- Fixed bankswitching type for UA cartridges\n- Fixed a SwapPort bug in Surround\n- Fixed multiple bugs in handling invalid ROM files (thanks @tkoeppe)\n- Fixed initialization of TIA static data to make it thread safe (thanks @tkoeppe)\n- Fixed RNG initialization, this was one of the last barriers to making the ALE fully deterministic, we are now fully deterministic\n\n### Removed\n\n- Removed FIFO interface\n- Removed RL-GLUE support\n- Removed ALE CLI interface\n- Removed Java interface\n- Removed `ALEInterface::load()`, `ALEInterface::save()`. If you require this stack functionality it's easy to implement on your own using `ALEInterface::cloneState(include_rng)`\n- Removed os-dependent filesystem code in favour of C++17 `std::fs`\n- Removed human control mode\n- Removed old makefile build system in favour of CMake\n- Removed bspf\n- Removed unused controller types: Driving, Booster, Keyboard\n- Removed AtariVox\n- Removed Stella types (e.g., Array) in favour of STL types\n- Remove Stella debugger\n- Remove Stella CheatManager\n- Lots of code cleanups conforming to best practices (thanks @tkoeppe)\n\n## [0.6.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.6.0...v0.6.1) — 2019-11-20\n\n### Changed\n\n- Speedup of up to 30% by optimizing variable types (@qstanczyk)\n\n### Fixed\n\n- Fixed switch fall-through with Gravitar lives detection (@lespeholt)\n\n## [0.6.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.5.2...v0.6.0) — 2015-06-23\n\n### Added\n\n- Support for modes and difficulties in Atari games (@mcmachado)\n- Frame maxpooling as a post-processing option (@skylian)\n- Added support for: Turmoil, Koolaid, Tron Deadly Discs, Mr. Do, Donkey Kong, Keystone Kapers, Frogger, Sir Lancelot, Laser Gates, Lost Luggage,\n- Added MD5 list of supported ROMs\n\n### Changed\n\n- Disabled color averaging by default\n- Replaced TinyMT with C++11 random\n\n### Fixed\n\n- Fixed old color averaging scheme (PR #181)\n- Fixed minimal action set in Pong\n- Fixed termination issues in Q\\*Bert\n\n## [0.5.2](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.5.1...v0.5.2) — 2015-10-04\n\n### Added\n\n- Routines for ALEState serialization (@Jragonmiris).\n\n### Changed\n\n- Enforce flags existence (@mcmachado).\n\n### Fixed\n\n- Fix RNG issues introduced in 0.5.0.\n- Additional bug fixes.\n\n## [0.5.1](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/v0.5.0...v0.5.1) — 2015-07-07\n\n### Added\n\n- Added RNG serialization capability.\n\n### Changed\n\n- Refactored Python getScreenRGB to return unpacked RGB values (@spragunr).\n- Sets the default value of the color_averaging flag to be true. It was true by default in previous versions but was changed in 0.5.0. Reverted for backward compatibility.\n\n### Fixed\n\n- Bug fixes from ALE 0.5.0.\n\n## [0.5.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/aa433a4b401bc3e7113c494edfc90500bc4afc78...v0.5.0) — 2015-06-22\n\n### Added\n\n- Added action_repeat_stochasticity.\n- Added sound playback, visualization.\n- Added screen/sound recording ability.\n- CMake now available.\n- Incorporated Benjamin Goodrich's Python interface.\n- Added examples for shared library, Python, fifo, RL-Glue interfaces.\n- Incorporated Java agent into main repository.\n\n### Changed\n\n- Better ALEInterface.\n- Many other changes.\n\n### Fixed\n\n- Some game fixes.\n\n### Removed\n\n- Removed internal controller, now superseded by shared library interface.\n- Removed the following command-line flags: 'output_file', 'system_reset_steps', 'use_environment_distribution', 'backward_compatible_save', internal agent flags\n- The flag 'use_starting_actions' was removed and internally its value is always 'true'.\n- The flag 'disable_color_averaging' was renamed to 'color_averaging' and FALSE is its default value.\n\n## [0.4.4](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/d93189e0f00b5cb10120134ca965d8a5d3124581...aa433a4b401bc3e7113c494edfc90500bc4afc78) — 2014-04-28\n\n### Fixed\n\n- Fixed a memory issue in ALEScreen.\n\n## [0.4.3](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/b905e07ead43d07f386b35128e7eff60595e1581...d93189e0f00b5cb10120134ca965d8a5d3124581) — 2014-04-26\n\n### Fixed\n\n- Fixed issues with frame numbers not being correctly updated.\n- Fixed a bug where total reward was not properly reported under frame skipping.\n- Fixed a bug with ALEState's m_frame_number.\n\n## [0.4.2](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/ba33f16376b545462666268194e8f72df82c1a3a...b905e07ead43d07f386b35128e7eff60595e1581) — 2013-06-12\n\n### Changed\n\n- Modified StellaEnvironment save/load interface to provide additional flexibility.\n\n### Fixed\n\n- Series of bug fixes from Matthew Hausknecht and community.\n\n## [0.4.1]https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/84f9678d713695314570e0f183072f36e177a364...ba33f16376b545462666268194e8f72df82c1a3a — 2013-05-24\n\n### Added\n\n- Added frame skipping support directly in StellaEnvironment.\n\n### Changed\n\n- Reverted default number of episodes to 10.\n\n### Fixed\n\n- Fixed RL-Glue syntax from OBSERVATION to OBSERVATIONS. Thanks to Angus MacIsaac for picking this bug up.\n\n## [0.4.0](https://github.com/Farama-Foundation/Arcade-Learning-Environment/compare/5c45f643a78ef96ade23928fd6a3740172ec1e35...84f9678d713695314570e0f183072f36e177a364) — 2013-04-22\n\n### Added\n\n- RL-Glue support\n- Shared library interface\n- Simpler direct environment interfacing\n- Improved environment handling\n- Improved environment customization\n- Better documentation\n\n## 0.3.0 — 2012-07-22\n\n- Initial ALE release.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.0966796875,
          "content": "cmake_minimum_required (VERSION 3.14)\n\n# Build the C++ shared library\noption(BUILD_CPP_LIB \"Build C++ Interface\" ON)\n\n# Build the native Python bindings using pybind11\noption(BUILD_PYTHON_LIB \"Build Python Interface\" ON)\n\n# Enable SDL for screen and audio support\noption(SDL_SUPPORT \"Enable SDL support\" OFF)\n# Append VCPKG manifest feature\nif(SDL_SUPPORT)\n  list(APPEND VCPKG_MANIFEST_FEATURES \"sdl\")\nendif()\n\n# Set cmake module path\nset(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\n\n# Overlay VCPKG custom triplets\nif(NOT DEFINED VCPKG_OVERLAY_TRIPLETS)\n  set(VCPKG_OVERLAY_TRIPLETS\n      \"${CMAKE_MODULE_PATH}/custom-triplets\"\n      CACHE STRING \"\")\nendif()\n\n# Discover VCPKG default triplet\nif(DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)\n  set(VCPKG_TARGET_TRIPLET\n      \"$ENV{VCPKG_DEFAULT_TRIPLET}\"\n      CACHE STRING \"\")\nendif()\n\n# Discover VCPKG toolchain\nif (NOT DEFINED CMAKE_TOOLCHAIN_FILE)\n  # VCPKG_ROOT is what Microsoft recommends,\n  # VCPKG_INSTALLATION_ROOT is what's defined on Azure\n  if(DEFINED ENV{VCPKG_ROOT})\n    set(CMAKE_TOOLCHAIN_FILE\n        \"$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n        CACHE STRING \"\")\n  elseif(DEFINED ENV{VCPKG_INSTALLATION_ROOT})\n    set(CMAKE_TOOLCHAIN_FILE\n        \"$ENV{VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n        CACHE STRING \"\")\n  endif()\nendif()\n\n# Don't allow running cmake in root directory\nif (CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)\n  message(FATAL_ERROR [=[\n    Source and build directories cannot be the same.\n    You should probably also remove CMakeFiles/ and CMakeCache.txt.\n  ]=])\nendif()\n\ninclude(ParseVersion)\nparse_version(\"version.txt\" PREFIX ALE)\n\nproject(ale VERSION ${ALE_DEFAULT_VERSION}\n            DESCRIPTION \"The Arcade Learning Environment (ALE) - a platform for AI research.\"\n            HOMEPAGE_URL \"http://www.arcadelearningenvironment.org\"\n            LANGUAGES CXX)\n\n# Main ALE src directory\nadd_subdirectory(src/ale)\n\n# Only include tests in the main project\n# if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n#  enable_testing()\n#  add_subdirectory(tests)\n# endif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7353515625,
          "content": "# Contributing to the ALE\n\nWe welcome all forms of contributions! Please give the following a read before submitting a PR.\n\n## Pull Requests\n\n1. Fork the repo and create your branch from master.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes. e.g., `cmake --build . --config Release --target test`\n\n## Code Style\n\nIf you would like to make changes to the codebase, please adhere to the\nfollowing code style conventions.\n\nALE contains two sets of source files: Files .hxx and .cxx are part of the\nStella emulator code. Files .hpp and .cpp are original ALE code. The Stella\nfiles are not subject to our conventions, please retain their local style.\n\nThe ALE code style conventions are roughly summarised as \"clang-format with the\nfollowing settings: ReflowComments: false, PointerAlignment: Left,\nKeepEmptyLinesAtTheStartOfBlocks: false, IndentCaseLabels: true,\nAccessModifierOffset: -1\". That is:\n\n- Indent by two spaces; Egyptian braces, no extraneous newlines at the margins\n  of blocks and between top-level declarations.\n- Pointer/ref qualifiers go on the left (e.g. `void* p`).\n- Class member access modifiers are indented by _one_ space.\n- Inline comments should be separated from code by two spaces (though this is\n  not currently applied consistently).\n- There is no strict line length limit, but keep it reasonable.\n- Namespace close braces and `#endif`s should have comments.\n\nThe overall format should look reasonably \"compact\" without being crowded. Use\nblank lines generously _within_ blocks and long comments to create visual cues\nfor the segmentation of ideas.\n\n## License\n\nBy contributing, you agree that your contributions will be licensed under the GPLv2 License.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 17.4599609375,
          "content": "### GNU GENERAL PUBLIC LICENSE\n\nVersion 2, June 1991\n\n    Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n    51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n\n    Everyone is permitted to copy and distribute verbatim copies\n    of this license document, but changing it is not allowed.\n\n### Preamble\n\nThe licenses for most software are designed to take away your freedom\nto share and change it. By contrast, the GNU General Public License is\nintended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users. This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it. (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.) You can apply it to\nyour programs, too.\n\nWhen we speak of free software, we are referring to freedom, not\nprice. Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if\nyou distribute copies of the software, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have. You must make sure that they, too, receive or can get the\nsource code. And you must show them these terms so they know their\nrights.\n\nWe protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\nAlso, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware. If the software is modified by someone else and passed on,\nwe want its recipients to know that what they have is not the\noriginal, so that any problems introduced by others will not reflect\non the original authors' reputations.\n\nFinally, any free program is threatened constantly by software\npatents. We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary. To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at\nall.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n### TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n**0.** This License applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License. The\n\"Program\", below, refers to any such program or work, and a \"work\nbased on the Program\" means either the Program or any derivative work\nunder copyright law: that is to say, a work containing the Program or\na portion of it, either verbatim or with modifications and/or\ntranslated into another language. (Hereinafter, translation is\nincluded without limitation in the term \"modification\".) Each licensee\nis addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope. The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the Program\n(independent of having been made by running the Program). Whether that\nis true depends on what the Program does.\n\n**1.** You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a\nfee.\n\n**2.** You may modify your copy or copies of the Program or any\nportion of it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n\n**a)** You must cause the modified files to carry prominent notices\nstating that you changed the files and the date of any change.\n\n\n**b)** You must cause any work that you distribute or publish, that in\nwhole or in part contains or is derived from the Program or any part\nthereof, to be licensed as a whole at no charge to all third parties\nunder the terms of this License.\n\n\n**c)** If the modified program normally reads commands interactively\nwhen run, you must cause it, when started running for such interactive\nuse in the most ordinary way, to print or display an announcement\nincluding an appropriate copyright notice and a notice that there is\nno warranty (or else, saying that you provide a warranty) and that\nusers may redistribute the program under these conditions, and telling\nthe user how to view a copy of this License. (Exception: if the\nProgram itself is interactive but does not normally print such an\nannouncement, your work based on the Program is not required to print\nan announcement.)\n\nThese requirements apply to the modified work as a whole. If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works. But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n**3.** You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n\n**a)** Accompany it with the complete corresponding machine-readable\nsource code, which must be distributed under the terms of Sections 1\nand 2 above on a medium customarily used for software interchange; or,\n\n\n**b)** Accompany it with a written offer, valid for at least three\nyears, to give any third party, for a charge no more than your cost of\nphysically performing source distribution, a complete machine-readable\ncopy of the corresponding source code, to be distributed under the\nterms of Sections 1 and 2 above on a medium customarily used for\nsoftware interchange; or,\n\n\n**c)** Accompany it with the information you received as to the offer\nto distribute corresponding source code. (This alternative is allowed\nonly for noncommercial distribution and only if you received the\nprogram in object code or executable form with such an offer, in\naccord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it. For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable. However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n**4.** You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License. Any attempt otherwise\nto copy, modify, sublicense or distribute the Program is void, and\nwill automatically terminate your rights under this License. However,\nparties who have received copies, or rights, from you under this\nLicense will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n**5.** You are not required to accept this License, since you have not\nsigned it. However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works. These actions are\nprohibited by law if you do not accept this License. Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n**6.** Each time you redistribute the Program (or any work based on\nthe Program), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions. You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n**7.** If, as a consequence of a court judgment or allegation of\npatent infringement or for any other reason (not limited to patent\nissues), conditions are imposed on you (whether by court order,\nagreement or otherwise) that contradict the conditions of this\nLicense, they do not excuse you from the conditions of this License.\nIf you cannot distribute so as to satisfy simultaneously your\nobligations under this License and any other pertinent obligations,\nthen as a consequence you may not distribute the Program at all. For\nexample, if a patent license would not permit royalty-free\nredistribution of the Program by all those who receive copies directly\nor indirectly through you, then the only way you could satisfy both it\nand this License would be to refrain entirely from distribution of the\nProgram.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices. Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n**8.** If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded. In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n**9.** The Free Software Foundation may publish revised and/or new\nversions of the General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation. If the Program does not specify a\nversion number of this License, you may choose any version ever\npublished by the Free Software Foundation.\n\n**10.** If you wish to incorporate parts of the Program into other\nfree programs whose distribution conditions are different, write to\nthe author to ask for permission. For software which is copyrighted by\nthe Free Software Foundation, write to the Free Software Foundation;\nwe sometimes make exceptions for this. Our decision will be guided by\nthe two goals of preserving the free status of all derivatives of our\nfree software and of promoting the sharing and reuse of software\ngenerally.\n\n**NO WARRANTY**\n\n**11.** BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nPROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n**12.** IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nPROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n### END OF TERMS AND CONDITIONS\n\n### How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\nTo do so, attach the following notices to the program. It is safest to\nattach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    one line to give the program's name and an idea of what it does.\n    Copyright (C) yyyy  name of author\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\nAlso add information on how to contact you by electronic and paper\nmail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details\n    type `show w'.  This is free software, and you are welcome\n    to redistribute it under certain conditions; type `show c'\n    for details.\n\nThe hypothetical commands \\`show w' and \\`show c' should show the\nappropriate parts of the General Public License. Of course, the\ncommands you use may be called something other than \\`show w' and\n\\`show c'; they could even be mouse-clicks or menu items--whatever\nsuits your program.\n\nYou should also get your employer (if you work as a programmer) or\nyour school, if any, to sign a \"copyright disclaimer\" for the program,\nif necessary. Here is a sample; alter the names:\n\n    Yoyodyne, Inc., hereby disclaims all copyright\n    interest in the program `Gnomovision'\n    (which makes passes at compilers) written\n    by James Hacker.\n\n    signature of Ty Coon, 1 April 1989\n    Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program\ninto proprietary programs. If your program is a subroutine library,\nyou may consider it more useful to permit linking proprietary\napplications with the library. If this is what you want to do, use the\n[GNU Lesser General Public\nLicense](https://www.gnu.org/licenses/lgpl.html) instead of this\nLicense.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.140625,
          "content": "# MANIFEST.in\ninclude version.txt\ninclude vcpkg.json\ninclude CMakeLists.txt\nrecursive-include cmake *\ninclude scripts/*\nrecursive-include src *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3916015625,
          "content": "The Arcade Learning Environment\n<a href=\"#the-arcade-learning-environment\">\n  <img alt=\"Arcade Learning Environment\" align=\"right\" width=75 src=\"https://github.com/Farama-Foundation/Arcade-Learning-Environment/blob/master/docs/_static/img/ale.svg\" />\n</a>\n===============================\n\n[![Python](https://img.shields.io/pypi/pyversions/ale-py.svg)](https://badge.fury.io/py/ale-py)\n[![PyPI Version](https://img.shields.io/pypi/v/ale-py)](https://pypi.org/project/ale-py)\n\n**The Arcade Learning Environment (ALE) is a simple framework that allows researchers and hobbyists to develop AI agents for Atari 2600 games.**\nIt is built on top of the Atari 2600 emulator [Stella](https://stella-emu.github.io) and separates the details of emulation from agent design.\nThis [video](https://www.youtube.com/watch?v=nzUiEkasXZI) depicts over 50 games currently supported in the ALE.\n\nFor an overview of our goals for the ALE read [The Arcade Learning Environment: An Evaluation Platform for General Agents](https://jair.org/index.php/jair/article/view/10819).\nIf you use ALE in your research, we ask that you please cite this paper in reference to the environment. See the [Citing](#Citing) section for BibTeX entries.\n\nFeatures\n--------\n\n- Object-oriented framework with support to add agents and games.\n- Emulation core uncoupled from rendering and sound generation modules for fast emulation with minimal library dependencies.\n- Automatic extraction of game score and end-of-game signal for more than 100  Atari 2600 games.\n- Multi-platform code (compiled and tested under macOS, Windows, and several Linux distributions).\n- Python bindings through [pybind11](https://github.com/pybind/pybind11).\n- Native support for [Gymnasium](http://github.com/farama-Foundation/gymnasium), a maintained fork of OpenAI Gym.\n- Visualization tools.\n- Atari roms are packaged within the pip package\n\nQuick Start\n===========\n\nThe ALE currently supports three different interfaces: C++, Python, and Gymnasium.\n\nPython\n------\n\nYou simply need to install the `ale-py` package distributed via PyPI:\n\n```shell\npip install ale-py\n```\nNote: Make sure you're using an up-to-date version of `pip` or the installation may fail.\n\nYou can now import the ALE in your Python projects with providing a direct interface to Stella for interacting with games\n```python\nfrom ale_py import ALEInterface, roms\n\nale = ALEInterface()\nale.loadROM(roms.get_rom_path(\"breakout\"))\nale.reset_game()\n\nreward = ale.act(0)  # noop\nscreen_obs = ale.getScreenRGB()\n```\n\n## Gymnasium\n\nFor simplicity for installing ale-py with Gymnasium, `pip install \"gymnasium[atari]\"` shall install all necessary modules and ROMs. See Gymnasium [introductory page](https://gymnasium.farama.org/main/introduction/basic_usage/) for description of the API to interface with the environment.\n\n```py\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)  # unnecessary but helpful for IDEs\n\nenv = gym.make('ALE/Breakout-v5', render_mode=\"human\")  # remove render_mode in training\nobs, info = env.reset()\nepisode_over = False\nwhile not episode_over:\n    action = policy(obs)  # to implement - use `env.action_space.sample()` for a random policy\n    obs, reward, terminated, truncated, info = env.step(action)\n\n    episode_over = terminated or truncated\nenv.close()\n```\n\nTo run with continuous actions, you can simply modify the call to `gym.make` above with:\n```python\nenv = gym.make('ALE/Breakout-v5', continuous=True, render_mode=\"human\")\n```\n\nFor all the environments available and their description, see [gymnasium atari page](https://gymnasium.farama.org/environments/atari/).\n\nC++\n---\n\nThe following instructions will assume you have a valid C++17 compiler and [`vcpkg`](https://github.com/microsoft/vcpkg) installed.\n\nWe use CMake as a first class citizen, and you can use the ALE directly with any CMake project.\nTo compile and install the ALE you can run\n\n```sh\nmkdir build && cd build\ncmake ../ -DCMAKE_BUILD_TYPE=Release\ncmake --build . --target install\n```\n\nThere are optional flags `-DSDL_SUPPORT=ON/OFF` to toggle SDL support (i.e., `display_screen` and `sound` support; `OFF` by default), `-DBUILD_CPP_LIB=ON/OFF` to build\nthe `ale-lib` C++ target (`ON` by default), and `-DBUILD_PYTHON_LIB=ON/OFF` to build the pybind11 wrapper (`ON` by default).\n\nFinally, you can link against the ALE in your own CMake project as follows\n\n```cmake\nfind_package(ale REQUIRED)\ntarget_link_libraries(YourTarget ale::ale-lib)\n```\n\nCiting\n======\n\nIf you use the ALE in your research, we ask that you please cite the following.\n\n*M. G. Bellemare, Y. Naddaf, J. Veness and M. Bowling. The Arcade Learning Environment: An Evaluation Platform for General Agents, Journal of Artificial Intelligence Research, Volume 47, pages 253-279, 2013.*\n\nIn BibTeX format:\n\n```bibtex\n@Article{bellemare13arcade,\n    author = {{Bellemare}, M.~G. and {Naddaf}, Y. and {Veness}, J. and {Bowling}, M.},\n    title = {The Arcade Learning Environment: An Evaluation Platform for General Agents},\n    journal = {Journal of Artificial Intelligence Research},\n    year = \"2013\",\n    month = \"jun\",\n    volume = \"47\",\n    pages = \"253--279\",\n}\n```\n\nIf you use the ALE with sticky actions (flag ``repeat_action_probability``), or if\nyou use the different game flavours (mode and difficulty switches), we ask you\nthat you also cite the following:\n\n*M. C. Machado, M. G. Bellemare, E. Talvitie, J. Veness, M. J. Hausknecht, M. Bowling. Revisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents,  Journal of Artificial Intelligence Research, Volume 61, pages 523-562, 2018.*\n\nIn BibTex format:\n\n```bibtex\n@Article{machado18arcade,\n    author = {Marlos C. Machado and Marc G. Bellemare and Erik Talvitie and Joel Veness and Matthew J. Hausknecht and Michael Bowling},\n    title = {Revisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents},\n    journal = {Journal of Artificial Intelligence Research},\n    volume = {61},\n    pages = {523--562},\n    year = {2018}\n}\n```\n\nIf you use the CALE (Continuous ALE), we ask you that you also cite the following:\n\n*Jesse Farebrother and Pablo Samuel Castro.  Cale:  Continuous arcade learning environment.Ad-vances in Neural Information Processing Systems, 2024.*\n\nIn BibTex format:\n\n```bibtex\n@article{farebrother2024cale,\n  title={C{ALE}: Continuous Arcade Learning Environment},\n  author={Jesse Farebrother and Pablo Samuel Castro},\n  journal={Advances in Neural Information Processing Systems},\n  year={2024}\n}\n```\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.3212890625,
          "content": "[build-system]\nrequires = [\n    \"setuptools>=61\",\n    \"cmake>=3.22\",\n    \"ninja; sys_platform != 'win32' and platform_machine != 'arm64'\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"ale-py\"\ndescription = \"The Arcade Learning Environment (ALE) - a platform for AI research.\"\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\nlicense = {text = \"GPLv2\"}\nkeywords = [\"reinforcement-learning\", \"arcade-learning-environment\", \"atari\"]\nauthors = [\n    {name = \"Marc G. Bellemare\"},\n    {name = \"Yavar Naddaf\"},\n    {name = \"Joel Veness\"},\n    {name = \"Michael Bowling\"},\n]\nmaintainers = [\n    {name = \"Farama Foundation\", email = \"contact@farama.org\"},\n    {name = \"Jesse Farebrother\", email = \"jfarebro@cs.mcgill.ca\"},\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\ndependencies = [\n    \"numpy>1.20\",\n    \"importlib-metadata>=4.10.0; python_version < '3.10'\",\n    \"importlib-resources; python_version < '3.9'\",\n    \"typing-extensions; python_version < '3.11'\"\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\ntest = [\n    \"pytest>=7.0\",\n    \"gymnasium>=1.0.0\",\n]\n\n[project.urls]\nhomepage = \"https://github.com/Farama-Foundation/Arcade-Learning-Environment\"\ndocumentation = \"https://github.com/Farama-Foundation/Arcade-Learning-Environment/tree/master/docs\"\nchangelog = \"https://github.com/Farama-Foundation/Arcade-Learning-Environment/blob/master/CHANGELOG.md\"\n\n[tool.setuptools]\npackages = [\n    \"ale_py\",\n    \"ale_py.roms\",\n]\npackage-dir = {ale_py = \"src/ale/python\"}\npackage-data = {\"ale_py\" = [\"py.typed\", \"*.pyi\", \"**/*.pyi\"], \"ale_py.roms\" = [\"md5.json\", \"*.bin\"]}\n\n[tool.pytest.ini_options]\nminversion = \"7.0\"\naddopts = \"-ra -q --ignore vcpkg --ignore build\"\ntestpaths = [\"tests\"]\nnorecursedirs = [\"vcpkg\", \"build\"]\n\n[tool.cibuildwheel]\n# Skip 32-bit wheels, PyPy & musllinux\nskip = [\"*-win32\", \"*i686\", \"pp*\", \"*-musllinux*\"]\n\nbuild-frontend = \"build\"\n\nmanylinux-x86_64-image = \"manylinux-vcpkg:latest\"\n\n[tool.cibuildwheel.linux]\nenvironment-pass = [\"GITHUB_REF\"]\n\n# macOS x86-64\n[[tool.cibuildwheel.overrides]]\nselect = \"*-macosx_x86_64\"\nenvironment = { PIP_ONLY_BINARY = \"numpy\", VCPKG_DEFAULT_TRIPLET = \"x64-osx-mixed\", VCPKG_FEATURE_FLAGS = \"-compilertracking\", MACOSX_DEPLOYMENT_TARGET = \"10.15\" }\n\n# macOS arm64\n[[tool.cibuildwheel.overrides]]\nselect = \"*-macosx_arm64\"\nenvironment = { PIP_ONLY_BINARY = \"numpy\", VCPKG_DEFAULT_TRIPLET = \"arm64-osx-mixed\", VCPKG_FEATURE_FLAGS = \"-compilertracking\", MACOSX_DEPLOYMENT_TARGET = \"10.15\" }\n\n# Windows x64\n[[tool.cibuildwheel.overrides]]\nselect = \"*-win_amd64\"\nenvironment = { PIP_ONLY_BINARY = \"numpy\", VCPKG_DEFAULT_TRIPLET = \"x64-windows\", VCPKG_FEATURE_FLAGS = \"-compilertracking\" }\n\n# Linux x86-64 (manylinux)\n[[tool.cibuildwheel.overrides]]\nselect = \"*-manylinux_x86_64\"\nenvironment = { PIP_ONLY_BINARY = \"numpy\", VCPKG_DEFAULT_TRIPLET = \"x64-linux-mixed\", VCPKG_FEATURE_FLAGS = \"-compilertracking\" }\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.4658203125,
          "content": "\"\"\"Setup file for ALE.\"\"\"\n\nimport os\nimport re\nimport subprocess\nimport sys\n\nfrom setuptools import Extension, setup\nfrom setuptools.command.build_ext import build_ext\n\ncurrent_working_file = os.path.abspath(os.path.dirname(__file__))\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=\"\"):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    PLAT_TO_CMAKE = {\n        \"win32\": \"Win32\",\n        \"win-amd64\": \"x64\",\n        \"win-arm32\": \"ARM\",\n        \"win-arm64\": \"ARM64\",\n    }\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n\n        # required for rpath detection of libraries\n        if not extdir.endswith(os.path.sep):\n            extdir += os.path.sep\n\n        config = \"Debug\" if self.debug else \"Release\"\n\n        # CMake lets you override the generator - we need to check this.\n        # Can be set with Conda-Build, for example.\n        cmake_generator = os.environ.get(\"CMAKE_GENERATOR\", \"\")\n\n        cmake_args = [\n            f\"-DCMAKE_BUILD_TYPE={config}\",\n            f\"-DPython3_EXECUTABLE={sys.executable}\",\n            f\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}\",\n            \"-DSDL_SUPPORT=ON\",\n            \"-DSDL_DYNLOAD=ON\",\n            \"-DBUILD_CPP_LIB=OFF\",\n            \"-DBUILD_PYTHON_LIB=ON\",\n        ]\n        build_args = []\n\n        if self.compiler.compiler_type != \"msvc\":\n            # Using Ninja-build since it a) is available as a wheel and b)\n            # multithreads automatically. MSVC would require all variables be\n            # exported for Ninja to pick it up, which is a little tricky to do.\n            # Users can override the generator with CMAKE_GENERATOR in CMake\n            # 3.15+.\n            if not cmake_generator or cmake_generator == \"Ninja\":\n                try:\n                    import ninja  # noqa: F401\n\n                    ninja_executable_path = os.path.join(ninja.BIN_DIR, \"ninja\")\n                    cmake_args += [\n                        \"-GNinja\",\n                        f\"-DCMAKE_MAKE_PROGRAM:FILEPATH={ninja_executable_path}\",\n                    ]\n                except ImportError:\n                    pass\n\n        else:\n            # Single config generators are handled \"normally\"\n            single_config = any(x in cmake_generator for x in {\"NMake\", \"Ninja\"})\n\n            # CMake allows an arch-in-generator style for backward compatibility\n            contains_arch = any(x in cmake_generator for x in {\"ARM\", \"Win64\"})\n\n            # Specify the arch if using MSVC generator, but only if it doesn't\n            # contain a backward-compatibility arch spec already in the\n            # generator name.\n            if not single_config and not contains_arch:\n                cmake_args += [\"-A\", self.PLAT_TO_CMAKE[self.plat_name]]\n\n            # Multi-config generators have a different way to specify configs\n            if not single_config:\n                cmake_args += [\n                    f\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{config.upper()}={extdir}\"\n                ]\n                build_args += [\"--config\", config]\n\n        if sys.platform.startswith(\"darwin\"):\n            # Cross-compile support for macOS - respect ARCHFLAGS if set\n            archs = re.findall(r\"-arch (\\S+)\", os.environ.get(\"ARCHFLAGS\", \"\"))\n            if archs:\n                cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES={}\".format(\";\".join(archs))]\n\n        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level\n        # across all generators.\n        if \"CMAKE_BUILD_PARALLEL_LEVEL\" not in os.environ:\n            # self.parallel is a Python 3 only way to set parallel jobs by hand\n            # using -j in the build_ext call, not supported by pip or PyPA-build.\n            if hasattr(self, \"parallel\") and self.parallel:\n                build_args += [f\"-j{self.parallel}\"]\n\n        build_temp = os.path.join(self.build_temp, ext.name)\n        if not os.path.exists(build_temp):\n            os.makedirs(build_temp)\n\n        subprocess.check_call([\"cmake\", ext.sourcedir] + cmake_args, cwd=build_temp)\n        subprocess.check_call([\"cmake\", \"--build\", \".\"] + build_args, cwd=build_temp)\n\n\ndef parse_version(version_file):\n    \"\"\"Parse version from `version_file`.\n\n    If we're running on CI, i.e., CIBUILDWHEEL is set, then we'll parse\n    the version from `GITHUB_REF` using the official semver regex.\n\n    If we're not running in CI we'll append the current git SHA to the\n    version identifier.\n\n    raises AssertionError: If `${GITHUB_REF#/v/*/}` doesn't start with\n        the version specified in `version_file`.\n    \"\"\"\n    semver_regex = r\"(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)(?:-(?P<prerelease>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\"\n    semver_prog = re.compile(semver_regex)\n\n    with open(version_file) as fp:\n        version = fp.read().strip()\n        assert semver_prog.match(version) is not None\n\n    return version\n\n\nif __name__ == \"__main__\":\n    # Allow for running `pip wheel` from other directories\n    current_working_file and os.chdir(current_working_file)\n    # Most config options are in `setup.cfg`. These are the\n    # only dynamic options we need at build time.\n    setup(\n        name=\"ale-py\",\n        version=parse_version(\"version.txt\"),\n        ext_modules=[CMakeExtension(\"ale_py._ale_py\")],\n        cmdclass={\"build_ext\": CMakeBuild},\n    )\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.4716796875,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json\",\n  \"name\": \"arcade-learning-environment\",\n  \"version\": \"0.10.1\",\n  \"dependencies\": [\n    \"zlib\"\n  ],\n  \"features\": {\n    \"sdl\": {\n      \"description\": \"Enable SDL, this enables display and audio support.\",\n      \"dependencies\": [ \"sdl2\" ]\n    }\n  },\n  \"builtin-baseline\": \"9aa0d66373ce3a6868d12353d0d4960db0d4bd18\",\n  \"overrides\": [\n    { \"name\": \"sdl2\", \"version\": \"2.24.2\" }\n  ]\n}\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.10.1\n"
        }
      ]
    }
  ]
}