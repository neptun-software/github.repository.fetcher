{
  "metadata": {
    "timestamp": 1736565810701,
    "page": 739,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/swiftshader",
      "stars": 2226,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.2060546875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterClass: true\n  AfterControlStatement: true\n  AfterEnum: true\n  AfterExternBlock: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: false\n  SplitEmptyNamespace: false\n  SplitEmptyRecord: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit: 0\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"[^/]*\"'\n    Priority:        1\n  - Regex:           '^\".*/.*\"'\n    Priority:        2\n  - Regex:           '^<.*\\..*>'\n    Priority:        3\n  - Regex:           '^<[^.]*>'\n    Priority:        4\n  - Regex:           '.*'\n    Priority:        5\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseBlocks: true\nIndentCaseLabels: false\nIndentPPDirectives: AfterHash\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nRawStringFormats:\n  - Language:        TextProto\n    BasedOnStyle:    google\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: Never\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        4\nUseTab:          ForIndentation\n...\n\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 4.5126953125,
          "content": ";;; Directory Local Variables\n;;; See Info node `(emacs) Directory Variables' for more information.\n\n((c++-mode\n  (tab-width . 4)\n  (indent-tabs-mode . t)\n  (c-basic-offset . 4)\n  (show-trailing-whitespace . t)\n  (indicate-empty-lines . t)\n  (c-offsets-alist\n   (inexpr-class . +)\n   (inexpr-statement . +)\n   (lambda-intro-cont . +)\n   (inlambda . c-lineup-inexpr-block)\n   (template-args-cont c-lineup-template-args +)\n   (incomposition . +)\n   (inmodule . +)\n   (innamespace . +)\n   (inextern-lang . 0)\n   (composition-close . 0)\n   (module-close . 0)\n   (namespace-close . 0)\n   (extern-lang-close . 0)\n   (composition-open . 0)\n   (module-open . 0)\n   (namespace-open . 0)\n   (extern-lang-open . 0)\n   (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)\n   (objc-method-args-cont . c-lineup-ObjC-method-args)\n   (objc-method-intro .\n                      [0])\n   (friend . 0)\n   (cpp-define-intro c-lineup-cpp-define +)\n   (cpp-macro-cont . +)\n   (cpp-macro .\n              [0])\n   (inclass . +)\n   (stream-op . c-lineup-streamop)\n   (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)\n   (arglist-cont c-lineup-gcc-asm-reg 0)\n   (comment-intro . 0)\n   (catch-clause . 0)\n   (else-clause . 0)\n   (do-while-closure . 0)\n   (access-label . -)\n   (case-label . +)\n   (substatement . +)\n   (statement-case-intro . +)\n   (statement . 0)\n   (brace-entry-open . 0)\n   (brace-list-entry . 0)\n   (brace-list-intro . +)\n   (brace-list-close . 0)\n   (block-close . 0)\n   (block-open . 0)\n   (inher-cont . c-lineup-multi-inher)\n   (inher-intro . ++)\n   (member-init-cont . c-lineup-multi-inher)\n   (member-init-intro . ++)\n   (annotation-var-cont . +)\n   (annotation-top-cont . 0)\n   (topmost-intro . 0)\n   (knr-argdecl . 0)\n   (func-decl-cont . ++)\n   (inline-close . 0)\n   (class-close . 0)\n   (class-open . 0)\n   (defun-block-intro . +)\n   (defun-close . 0)\n   (defun-open . 0)\n   (c . c-lineup-C-comments)\n   (string . c-lineup-dont-change)\n   (topmost-intro-cont . c-lineup-topmost-intro-cont)\n   (brace-list-open . 0)\n   (inline-open . 0)\n   (arglist-close . c-lineup-arglist)\n   (arglist-intro google-c-lineup-expression-plus-4)\n   (statement-cont nil nil ++)\n   (statement-case-open . +)\n   (label . /)\n   (substatement-label . 2)\n   (substatement-open . 0)\n   (knr-argdecl-intro . +)\n   (statement-block-intro . +)))\n(c-mode\n  (tab-width . 4)\n  (indent-tabs-mode . t)\n  (c-basic-offset . 4)\n  (show-trailing-whitespace . t)\n  (indicate-empty-lines . t)\n  (c-offsets-alist\n   (inexpr-class . +)\n   (inexpr-statement . +)\n   (lambda-intro-cont . +)\n   (inlambda . c-lineup-inexpr-block)\n   (template-args-cont c-lineup-template-args +)\n   (incomposition . +)\n   (inmodule . +)\n   (innamespace . +)\n   (inextern-lang . 0)\n   (composition-close . 0)\n   (module-close . 0)\n   (namespace-close . 0)\n   (extern-lang-close . 0)\n   (composition-open . 0)\n   (module-open . 0)\n   (namespace-open . 0)\n   (extern-lang-open . 0)\n   (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)\n   (objc-method-args-cont . c-lineup-ObjC-method-args)\n   (objc-method-intro .\n                      [0])\n   (friend . 0)\n   (cpp-define-intro c-lineup-cpp-define +)\n   (cpp-macro-cont . +)\n   (cpp-macro .\n              [0])\n   (inclass . +)\n   (stream-op . c-lineup-streamop)\n   (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)\n   (arglist-cont c-lineup-gcc-asm-reg 0)\n   (comment-intro . 0)\n   (catch-clause . 0)\n   (else-clause . 0)\n   (do-while-closure . 0)\n   (access-label . -)\n   (case-label . +)\n   (substatement . +)\n   (statement-case-intro . +)\n   (statement . 0)\n   (brace-entry-open . 0)\n   (brace-list-entry . 0)\n   (brace-list-intro . +)\n   (brace-list-close . 0)\n   (block-close . 0)\n   (block-open . 0)\n   (inher-cont . c-lineup-multi-inher)\n   (inher-intro . ++)\n   (member-init-cont . c-lineup-multi-inher)\n   (member-init-intro . ++)\n   (annotation-var-cont . +)\n   (annotation-top-cont . 0)\n   (topmost-intro . 0)\n   (knr-argdecl . 0)\n   (func-decl-cont . ++)\n   (inline-close . 0)\n   (class-close . 0)\n   (class-open . 0)\n   (defun-block-intro . +)\n   (defun-close . 0)\n   (defun-open . 0)\n   (c . c-lineup-C-comments)\n   (string . c-lineup-dont-change)\n   (topmost-intro-cont . c-lineup-topmost-intro-cont)\n   (brace-list-open . 0)\n   (inline-open . 0)\n   (arglist-close . c-lineup-arglist)\n   (arglist-intro google-c-lineup-expression-plus-4)\n   (statement-cont nil nil ++)\n   (statement-case-open . +)\n   (label . /)\n   (substatement-label . 2)\n   (substatement-open . 0)\n   (knr-argdecl-intro . +)\n   (statement-block-intro . +))))\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4384765625,
          "content": "# Ignored folders #\n/cache/\n/lib/\n/obj/\n/bin/\n/out/\n.vs\n.vscode/ipch\nCMakeFiles/\n.idea/\ncmake-build-debug/\n\n# Per user vscode config files.\n.vscode/launch.json\n.vscode/settings.json\n\n# The /build/ directory is recommended for CMake build output\n!/build\n/build/*\n\n\n# Ignored files #\n*.obj\n*.lib\n*.log\n*.tlog\n*.exe\n*.ilk\n*.pdb\n*.sbr\n*.bsc\n*.dll\n*.res\n*.idb\n*.sdf\n*.suo\n*.o\n*.depend\n*.layout\n*.opensdf\n*.aps\n*.opendb\n*.db\n*~\n.*.sw*\n.sw*\nCMakeCache.txt\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.033203125,
          "content": "[submodule \"third_party/cppdap\"]\n\tpath = third_party/cppdap\n\turl = https://github.com/google/cppdap\n[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/json\"]\n\tpath = third_party/json\n\turl = https://github.com/nlohmann/json.git\n[submodule \"third_party/libbacktrace/src\"]\n\tpath = third_party/libbacktrace/src\n\turl = https://github.com/ianlancetaylor/libbacktrace.git\n[submodule \"third_party/PowerVR_Examples\"]\n\tpath = third_party/PowerVR_Examples\n\turl = https://github.com/powervr-graphics/Native_SDK.git\n[submodule \"third_party/benchmark\"]\n\tpath = third_party/benchmark\n\turl = https://github.com/google/benchmark.git\n[submodule \"third_party/glslang\"]\n\tpath = third_party/glslang\n\turl = https://github.com/KhronosGroup/glslang.git\n[submodule \"third_party/git-hooks\"]\n\tpath = third_party/git-hooks\n\turl = https://swiftshader.googlesource.com/git-hooks\n[submodule \"third_party/llvm-project\"]\n\tpath = third_party/llvm-project\n\turl = https://github.com/llvm/llvm-project.git\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 0.369140625,
          "content": "# This is the official list of SwiftShader authors for copyright purposes.\r\n# This file is distinct from the CONTRIBUTORS files.\r\n# See the latter for an explanation.\r\n# Names should be added to this file as:\r\n# Name or Organization <email address>\r\n# The email address is not required for organizations.\r\n\r\nGoogle Inc.\r\nThe ANGLE Project Authors <angleproject@googlegroups.com>"
        },
        {
          "name": "Android.bp",
          "type": "blob",
          "size": 3.4912109375,
          "content": "//\n// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\npackage {\n    default_applicable_licenses: [\"external_swiftshader_license\"],\n}\n\n// Added automatically by a large-scale-change that took the approach of\n// 'apply every license found to every target'. While this makes sure we respect\n// every license restriction, it may not be entirely correct.\n//\n// e.g. GPL in an MIT project might only apply to the contrib/ directory.\n//\n// Please consider splitting the single license below into multiple licenses,\n// taking care not to lose any license_kind information, and overriding the\n// default license using the 'licenses: [...]' property on targets as needed.\n//\n// For unused files, consider creating a 'filegroup' with \"//visibility:private\"\n// to attach the license to, and including a comment whether the files may be\n// used in the current project.\n//\n// large-scale-change filtered out the below license kinds as false-positives:\n//   SPDX-license-identifier-GPL\n//   SPDX-license-identifier-GPL-3.0\n// http://go/android-license-faq\nlicense {\n    name: \"external_swiftshader_license\",\n    visibility: [\":__subpackages__\"],\n    license_kinds: [\n        \"SPDX-license-identifier-Apache-2.0\",\n        \"SPDX-license-identifier-BSD\",\n        \"SPDX-license-identifier-MIT\",\n        \"SPDX-license-identifier-NCSA\",\n        \"legacy_unencumbered\",\n    ],\n    license_text: [\n        \"LICENSE.txt\",\n    ],\n}\n\ncc_defaults {\n    name: \"swiftshader_common\",\n\n    gnu_extensions: false,\n\n    cflags: [\n        \"-Werror\",\n        \"-Wwrite-strings\",\n    ],\n\n    cppflags: [\n        \"-Woverloaded-virtual\",\n        \"-DVK_EXPORT= \",\n    ],\n    cpp_std: \"c++17\",\n\n    arch: {\n        x86: {\n            cflags: [\n                \"-msse2\",\n            ],\n        },\n        x86_64: {\n            cflags: [\n                \"-msse2\",\n            ],\n        },\n    },\n\n    target: {\n        android: {\n            cppflags: [\n                \"-DVK_USE_PLATFORM_ANDROID_KHR\",\n            ],\n        },\n        host: {\n            cppflags: [\n                \"-fno-rtti\",\n                \"-fno-exceptions\",\n            ],\n            compile_multilib: \"64\",\n        },\n\n        // We don't need Darwin host-side builds\n        darwin: {\n            enabled: false,\n        },\n    },\n}\n\ncc_defaults {\n    name: \"swiftshader_common_release\",\n\n    defaults: [ \"swiftshader_common\" ],\n\n    cflags: [\n        \"-Os\",\n        \"-fomit-frame-pointer\",\n        \"-ffunction-sections\",\n        \"-fdata-sections\",\n    ],\n}\n\ncc_defaults {\n    name: \"swiftshader_common_debug\",\n\n    defaults: [ \"swiftshader_common\" ],\n\n    cflags: [\n        \"-O0\",\n        \"-g\",\n        \"-UNDEBUG\",\n    ],\n}\n\ncc_library_headers {\n    name: \"swiftshader_platform_headers\",\n    host_supported: true,\n    device_supported: true,\n    vendor_available: true,\n    export_include_dirs: [\"include\"],\n}\n\ncc_library_headers {\n    name: \"swiftshader_host_headers\",\n    device_supported: false,\n    host_supported: true,\n    export_include_dirs: [\"include/Android\"],\n}\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 2.4775390625,
          "content": "# Copyright 2016 The SwiftShader Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport(\"src/Reactor/reactor.gni\")\n\nconfig(\"swiftshader_config\") {\n  cflags = []\n  defines = []\n  asmflags = []\n\n  if (is_clang) {\n    cflags += [ \"-Wno-shadow\" ]\n  }\n\n  if (is_debug) {\n    if (swiftshader_startup_dialog) {\n      defines += [ \"DEBUGGER_WAIT_DIALOG\" ]\n    }\n  }\n  if (is_win) {\n    # Disable MSVC warnings about std::aligned_storage being broken before\n    # VS 2017 15.8\n    defines += [ \"_ENABLE_EXTENDED_ALIGNED_STORAGE\" ]\n\n    # Diable some MSVC warnings.\n    if (!is_clang) {\n      cflags += [\n        \"/wd4065\",  # switch statement contains 'default' but no 'case' labels\n        \"/wd4309\",  # Truncation of constant value. See PixelRoutine.cpp casts\n                    # of signed shorts.\n      ]\n    }\n  } else if (!is_debug) {\n    cflags += [ \"-Os\" ]\n  }\n\n  if (build_with_chromium) {\n    if (is_clang) {\n      if (current_cpu == \"arm64\") {\n        import(\"//build/config/arm.gni\")\n\n        if (arm_control_flow_integrity == \"standard\") {\n          cflags += [ \"-mbranch-protection=standard\" ]\n          asmflags += [ \"-mbranch-protection=standard\" ]\n        } else if (arm_control_flow_integrity == \"pac\") {\n          cflags += [ \"-mbranch-protection=pac-ret\" ]\n          asmflags += [ \"-mbranch-protection=pac-ret\" ]\n        } else {\n          assert(arm_control_flow_integrity == \"none\",\n                 \"Invalid branch protection option!\")\n        }\n      }\n    }\n  }\n}\n\ngroup(\"swiftshader\") {\n  data_deps = [\n    \"src/Vulkan:icd_file\",\n    \"src/Vulkan:swiftshader_libvulkan\",\n  ]\n}\n\nif (build_with_chromium) {\n  group(\"swiftshader_tests\") {\n    testonly = true\n\n    data_deps = [ \"tests/SystemUnitTests:swiftshader_system_unittests\" ]\n\n    if (supports_llvm) {\n      data_deps +=\n          [ \"tests/ReactorUnitTests:swiftshader_reactor_llvm_unittests\" ]\n    }\n\n    if (supports_subzero) {\n      data_deps +=\n          [ \"tests/ReactorUnitTests:swiftshader_reactor_subzero_unittests\" ]\n    }\n  }\n}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 39.1455078125,
          "content": "﻿# Copyright 2020 The SwiftShader Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.22.1)\n\nproject(SwiftShader C CXX ASM)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CXX_STANDARD_REQUIRED ON)\n# MSVC doesn't define __cplusplus by default\nif(MSVC)\n    string(APPEND CMAKE_CXX_FLAGS \" /Zc:__cplusplus\")\nendif()\n\n###########################################################\n# Detect system\n###########################################################\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    set(LINUX TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Android\")\n    set(ANDROID TRUE)\n    set(CMAKE_CXX_FLAGS \"-DANDROID_NDK_BUILD\")\nelseif(WIN32)\nelseif(APPLE)\nelseif(FUCHSIA)\n    # NOTE: Building for Fuchsia requires a Fuchsia CMake-based SDK.\n    # See https://fuchsia-review.googlesource.com/c/fuchsia/+/379673\n    find_package(FuchsiaLibraries)\nelse()\n    message(FATAL_ERROR \"Platform is not supported\")\nendif()\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm\" OR CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch\")\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(ARCH \"aarch64\")\n    else()\n        set(ARCH \"arm\")\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^mips.*\")\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(ARCH \"mips64el\")\n    else()\n        set(ARCH \"mipsel\")\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^ppc.*\")\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(ARCH \"ppc64le\")\n    else()\n        message(FATAL_ERROR \"Architecture is not supported\")\n    endif()\nelse()\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(ARCH \"x86_64\")\n    else()\n        set(ARCH \"x86\")\n    endif()\nendif()\n\n# Cross compiling on macOS. The cross compiling architecture should override\n# auto-detected system architecture settings.\nif(CMAKE_OSX_ARCHITECTURES)\n    if(CMAKE_OSX_ARCHITECTURES MATCHES \"arm64\")\n        set(ARCH \"aarch64\")\n    elseif(CMAKE_OSX_ARCHITECTURES MATCHES \"x86_64\")\n        set(ARCH \"x86_64\")\n    elseif(CMAKE_OSX_ARCHITECTURES MATCHES \"i386\")\n        set(ARCH \"x86\")\n    else()\n        message(FATAL_ERROR \"Architecture ${CMAKE_OSX_ARCHITECTURES} is not \"\n                            \"supported. Only one architecture (arm64, x86_64 \"\n                            \"or i386) could be specified at build time.\")\n    endif()\nendif()\n\n# Cross compiling with `cmake -A <arch>`.\nif(CMAKE_GENERATOR_PLATFORM)\n    if(CMAKE_GENERATOR_PLATFORM MATCHES \"^(Win32|win32|X86|x86)$\")\n        set(ARCH \"x86\")\n    elseif(CMAKE_GENERATOR_PLATFORM MATCHES \"^(Win64|win64|X64|x64)$\")\n        set(ARCH \"x86_64\")\n    elseif(CMAKE_GENERATOR_PLATFORM MATCHES \"^(ARM64|Arm64|arm64)$\")\n        set(ARCH \"aarch64\")\n    endif()\nendif()\n\nset(CMAKE_MACOSX_RPATH TRUE)\n\nif ((CMAKE_GENERATOR MATCHES \"Visual Studio\") AND (CMAKE_GENERATOR_TOOLSET STREQUAL \"\"))\n  message(WARNING \"Visual Studio generators use the x86 host compiler by \"\n                  \"default, even for 64-bit targets. This can result in linker \"\n                  \"instability and out of memory errors. To use the 64-bit \"\n                  \"host compiler, pass -Thost=x64 on the CMake command line.\")\nendif()\n\n# Use CCache if available\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n    message(STATUS \"Using ccache\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif()\n\n###########################################################\n# Install Gerrit commit hook\n###########################################################\n\nif(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git AND NOT EXISTS ${CMAKE_SOURCE_DIR}/.git/hooks/commit-msg)\n    message(WARNING \"\n        .git/hooks/commit-msg was not found.\n        Downloading from https://gerrit-review.googlesource.com/tools/hooks/commit-msg...\n    \")\n\n    file(DOWNLOAD https://gerrit-review.googlesource.com/tools/hooks/commit-msg ${CMAKE_SOURCE_DIR}/commit-msg)\n\n    file(COPY ${CMAKE_SOURCE_DIR}/commit-msg\n         DESTINATION ${CMAKE_SOURCE_DIR}/.git/hooks/\n         FILE_PERMISSIONS\n           OWNER_READ OWNER_WRITE OWNER_EXECUTE\n           GROUP_READ GROUP_WRITE GROUP_EXECUTE\n           WORLD_READ WORLD_EXECUTE)\n    file(REMOVE ${CMAKE_SOURCE_DIR}/commit-msg)\nendif()\n\n###########################################################\n# Host libraries\n###########################################################\n\nif(LINUX)\n    include(CheckSymbolExists)\n    check_symbol_exists(mallinfo malloc.h HAVE_MALLINFO)\n    check_symbol_exists(mallinfo2 malloc.h HAVE_MALLINFO2)\nendif()\n\nif(SWIFTSHADER_BUILD_WSI_DIRECTFB)\n    find_library(DIRECTFB directfb)\n    find_path(DIRECTFB_INCLUDE_DIR directfb/directfb.h)\nendif(SWIFTSHADER_BUILD_WSI_DIRECTFB)\nif(SWIFTSHADER_BUILD_WSI_D2D)\n    find_library(D2D drm)\n    find_path(D2D_INCLUDE_DIR libdrm/drm.h)\nendif(SWIFTSHADER_BUILD_WSI_D2D)\n\n###########################################################\n# Options\n###########################################################\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"The type of build: Debug Release MinSizeRel RelWithDebInfo.\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release MinSizeRel RelWithDebInfo)\nendif()\n\nfunction(option_if_not_defined name description default)\n    if(NOT DEFINED ${name})\n        option(${name} ${description} ${default})\n    endif()\nendfunction()\n\nif(LINUX)\n    option_if_not_defined(SWIFTSHADER_BUILD_WSI_XCB \"Build the XCB WSI support\" TRUE)\n    option_if_not_defined(SWIFTSHADER_BUILD_WSI_WAYLAND \"Build the Wayland WSI support\" TRUE)\n    option_if_not_defined(SWIFTSHADER_BUILD_WSI_DIRECTFB \"Build the DirectFB WSI support\" FALSE)\n    option_if_not_defined(SWIFTSHADER_BUILD_WSI_D2D \"Build the Direct-to-Display WSI support\" FALSE)\nendif()\n\noption_if_not_defined(SWIFTSHADER_BUILD_PVR \"Build the PowerVR examples\" FALSE)\noption_if_not_defined(SWIFTSHADER_BUILD_TESTS \"Build unit tests\" TRUE)\noption_if_not_defined(SWIFTSHADER_BUILD_BENCHMARKS \"Build benchmarks\" FALSE)\n\noption_if_not_defined(SWIFTSHADER_USE_GROUP_SOURCES \"Group the source files in a folder tree for Visual Studio\" TRUE)\n\noption_if_not_defined(SWIFTSHADER_MSAN \"Build with memory sanitizer\" FALSE)\noption_if_not_defined(SWIFTSHADER_ASAN \"Build with address sanitizer\" FALSE)\noption_if_not_defined(SWIFTSHADER_TSAN \"Build with thread sanitizer\" FALSE)\noption_if_not_defined(SWIFTSHADER_UBSAN \"Build with undefined behavior sanitizer\" FALSE)\noption_if_not_defined(SWIFTSHADER_EMIT_COVERAGE \"Emit code coverage information\" FALSE)\noption_if_not_defined(SWIFTSHADER_WARNINGS_AS_ERRORS \"Treat all warnings as errors\" TRUE)\noption_if_not_defined(SWIFTSHADER_DCHECK_ALWAYS_ON \"Check validation macros even in release builds\" FALSE)\noption_if_not_defined(REACTOR_EMIT_DEBUG_INFO \"Emit debug info for JIT functions\" FALSE)\noption_if_not_defined(REACTOR_EMIT_PRINT_LOCATION \"Emit printing of location info for JIT functions\" FALSE)\noption_if_not_defined(REACTOR_EMIT_ASM_FILE \"Emit asm files for JIT functions\" FALSE)\noption_if_not_defined(REACTOR_ENABLE_PRINT \"Enable RR_PRINT macros\" FALSE)\noption_if_not_defined(REACTOR_VERIFY_LLVM_IR \"Check reactor-generated LLVM IR is valid even in release builds\" FALSE)\noption_if_not_defined(SWIFTSHADER_LESS_DEBUG_INFO \"Generate less debug info to reduce file size\" FALSE)\n# option_if_not_defined(SWIFTSHADER_ENABLE_VULKAN_DEBUGGER \"Enable Vulkan debugger support\" FALSE)  # TODO(b/251802301)\noption_if_not_defined(SWIFTSHADER_ENABLE_ASTC \"Enable ASTC compressed textures support\" TRUE)  # TODO(b/150130101)\n\nif(SWIFTSHADER_ENABLE_VULKAN_DEBUGGER)\n    set(SWIFTSHADER_BUILD_CPPDAP TRUE)\nendif()\n\nset(DEFAULT_REACTOR_BACKEND \"LLVM\")\nset(REACTOR_BACKEND ${DEFAULT_REACTOR_BACKEND} CACHE STRING \"JIT compiler back-end used by Reactor\")\nset_property(CACHE REACTOR_BACKEND PROPERTY STRINGS LLVM LLVM-Submodule Subzero)\n\nset(DEFAULT_SWIFTSHADER_LLVM_VERSION \"10.0\")\nset(SWIFTSHADER_LLVM_VERSION ${DEFAULT_SWIFTSHADER_LLVM_VERSION} CACHE STRING \"LLVM version to use\")\nset_property(CACHE SWIFTSHADER_LLVM_VERSION PROPERTY STRINGS \"10.0\")\n\n# If defined, overrides the default optimization level of the current reactor backend.\n# Set to one of the rr::Optimization::Level enum values.\nset(REACTOR_DEFAULT_OPT_LEVEL \"\" CACHE STRING \"Reactor default optimization level\")\nset_property(CACHE REACTOR_DEFAULT_OPT_LEVEL PROPERTY STRINGS \"None\" \"Less\" \"Default\" \"Aggressive\")\n\nif(NOT DEFINED SWIFTSHADER_LOGGING_LEVEL)\n    set(SWIFTSHADER_LOGGING_LEVEL \"Info\" CACHE STRING \"SwiftShader logging level\")\n    set_property(CACHE SWIFTSHADER_LOGGING_LEVEL PROPERTY STRINGS \"Verbose\" \"Debug\" \"Info\" \"Warn\" \"Error\" \"Fatal\" \"Disabled\")\nendif()\n\n# LLVM disallows calling cmake . from the main LLVM dir, the reason is that\n# it builds header files that could overwrite the orignal ones. Here we\n# want to include LLVM as a subdirectory and even though it wouldn't cause\n# the problem, if cmake . is called from the main dir, the condition that\n# LLVM checkes, \"CMAKE_CURRENT_SOURCE_DIR == CMAKE_CURRENT_BINARY_DIR\" will be true. So we\n# disallow it ourselves too to. In addition if there are remining CMakeFiles\n# and CMakeCache in the directory, cmake .. from a subdirectory will still\n# try to build from the main directory so we instruct users to delete these\n# files when they get the error.\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    message(FATAL_ERROR \"In source builds are not allowed by LLVM, please create a build/ directory and build from there. You may have to delete the CMakeCache.txt file and CMakeFiles directory that are next to the CMakeLists.txt.\")\nendif()\n\nset_property(GLOBAL PROPERTY USE_FOLDERS TRUE)\n\n###########################################################\n# Directories\n###########################################################\n\nset(SWIFTSHADER_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(SOURCE_DIR ${SWIFTSHADER_DIR}/src)\nset(THIRD_PARTY_DIR ${SWIFTSHADER_DIR}/third_party)\nset(TESTS_DIR ${SWIFTSHADER_DIR}/tests)\n\n###########################################################\n# Initialize submodules\n###########################################################\n\nfunction(InitSubmodule target submodule_dir)\n    if (NOT TARGET ${target})\n        if(NOT EXISTS ${submodule_dir}/.git)\n            message(WARNING \"\n        Target ${target} from submodule ${submodule_dir} missing.\n        Running 'git submodule update --init' to download it:\n            \")\n\n            execute_process(COMMAND git -C ${SWIFTSHADER_DIR} submodule update --init ${submodule_dir})\n        endif()\n    endif()\nendfunction()\n\nif (SWIFTSHADER_BUILD_TESTS OR SWIFTSHADER_BUILD_BENCHMARKS)\n    set(BUILD_VULKAN_WRAPPER TRUE)\nendif()\n\nif (BUILD_VULKAN_WRAPPER)\n    InitSubmodule(glslang ${THIRD_PARTY_DIR}/glslang)\nendif()\n\nif (SWIFTSHADER_BUILD_TESTS)\n    InitSubmodule(gtest ${THIRD_PARTY_DIR}/googletest)\nendif()\n\nif(SWIFTSHADER_BUILD_BENCHMARKS)\n    InitSubmodule(benchmark::benchmark ${THIRD_PARTY_DIR}/benchmark)\nendif()\n\nif(REACTOR_EMIT_DEBUG_INFO)\n    InitSubmodule(libbacktrace ${THIRD_PARTY_DIR}/libbacktrace/src)\nendif()\n\nif(SWIFTSHADER_BUILD_PVR)\n    InitSubmodule(PVRCore ${THIRD_PARTY_DIR}/PowerVR_Examples)\nendif()\n\nif(SWIFTSHADER_BUILD_CPPDAP)\n    InitSubmodule(json ${THIRD_PARTY_DIR}/json)\n    InitSubmodule(cppdap ${THIRD_PARTY_DIR}/cppdap)\nendif()\n\nif(${REACTOR_BACKEND} STREQUAL \"LLVM-Submodule\")\n    InitSubmodule(llvm-submodule ${THIRD_PARTY_DIR}/llvm-project)\nendif()\n\n###########################################################\n# Convenience macros\n###########################################################\n\n# Recursively calls source_group on the files of the directory\n# so that Visual Studio has the files in a folder tree\nmacro(group_all_sources directory)\n    file(GLOB files RELATIVE ${SWIFTSHADER_DIR}/${directory} ${SWIFTSHADER_DIR}/${directory}/*)\n    foreach(file ${files})\n        if(IS_DIRECTORY ${SWIFTSHADER_DIR}/${directory}/${file})\n            group_all_sources(${directory}/${file})\n        else()\n            string(REPLACE \"/\" \"\\\\\" groupname ${directory})\n            source_group(${groupname} FILES ${SWIFTSHADER_DIR}/${directory}/${file})\n        endif()\n    endforeach()\nendmacro()\n\n# Takes target library and a directory where the export map is\n# and add the linker options so that only the API symbols are\n# exported.\nmacro(set_shared_library_export_map TARGET DIR)\n    if(MSVC)\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" /DEF:\\\"${DIR}/${TARGET}.def\\\"\")\n    elseif(APPLE)\n        # The exported symbols list only exports the API functions and\n        # hides all the others.\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"-exported_symbols_list ${DIR}/${TARGET}.exports\")\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_DEPENDS \"${DIR}/${TARGET}.exports;\")\n        # Don't allow undefined symbols, unless it's a Sanitizer build.\n        if(NOT SWIFTSHADER_MSAN AND NOT SWIFTSHADER_ASAN AND NOT SWIFTSHADER_TSAN AND NOT SWIFTSHADER_UBSAN)\n            set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,-undefined,error\")\n        endif()\n    elseif(LINUX OR FUCHSIA)\n        # NOTE: The Fuchsia linker script is needed to export the vk_icdInitializeConnectToServiceCallback\n        # entry point (a private implementation detail betwen the Fuchsia Vulkan loader and the ICD).\n        if ((FUCHSIA) AND (\"${TARGET}\" STREQUAL \"vk_swiftshader\"))\n          set(LINKER_VERSION_SCRIPT \"fuchsia_vk_swiftshader.lds\")\n        else()\n          set(LINKER_VERSION_SCRIPT \"${TARGET}.lds\")\n        endif()\n\n        # The version script only exports the API functions and\n        # hides all the others.\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--version-script=${DIR}/${LINKER_VERSION_SCRIPT}\")\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_DEPENDS \"${DIR}/${LINKER_VERSION_SCRIPT};\")\n\n        # -Bsymbolic binds symbol references to their global definitions within\n        # a shared object, thereby preventing symbol preemption.\n        set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"  -Wl,-Bsymbolic\")\n\n        if(ARCH STREQUAL \"mipsel\" OR ARCH STREQUAL \"mips64el\")\n          # MIPS supports sysv hash-style only.\n          set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--hash-style=sysv\")\n        elseif(LINUX)\n          # Both hash-style are needed, because we want both gold and\n          # GNU ld to be able to read our libraries.\n          set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--hash-style=both\")\n        endif()\n\n        if(NOT ${SWIFTSHADER_EMIT_COVERAGE})\n            # Gc sections is used in combination with each functions being\n            # in its own section, to reduce the binary size.\n            set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--gc-sections\")\n        endif()\n\n        # Don't allow undefined symbols, unless it's a Sanitizer build.\n        if(NOT SWIFTSHADER_MSAN AND NOT SWIFTSHADER_ASAN AND NOT SWIFTSHADER_TSAN AND NOT SWIFTSHADER_UBSAN)\n            set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--no-undefined\")\n        endif()\n    endif()\nendmacro()\n\nif(SWIFTSHADER_USE_GROUP_SOURCES)\n    group_all_sources(src)\nendif()\n\n###########################################################\n# Compile flags\n###########################################################\n\n# Flags for project code (non 3rd party)\nset(SWIFTSHADER_COMPILE_OPTIONS \"\")\nset(SWIFTSHADER_LINK_FLAGS \"\")\nset(SWIFTSHADER_LIBS \"\")\n\nmacro(set_cpp_flag FLAG)\n    if(${ARGC} GREATER 1)\n        set(CMAKE_CXX_FLAGS_${ARGV1} \"${CMAKE_CXX_FLAGS_${ARGV1}} ${FLAG}\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAG}\")\n    endif()\nendmacro()\n\nmacro(set_linker_flag FLAG)\n    if(${ARGC} GREATER 1)\n        set(CMAKE_EXE_LINKER_FLAGS_${ARGV1} \"${CMAKE_EXE_LINKER_FLAGS_${ARGV1}} ${FLAG}\")\n        set(CMAKE_SHARED_LINKER_FLAGS_${ARGV1} \"${CMAKE_EXE_LINKER_FLAGS_${ARGV1}} ${FLAG}\")\n    else()\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${FLAG}\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${FLAG}\")\n    endif()\nendmacro()\n\nif(MSVC)\n    set_cpp_flag(\"/MP\")\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions(-D_SCL_SECURE_NO_WARNINGS)\n    add_definitions(-D_SBCS)  # Single Byte Character Set (ASCII)\n    add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)  # Disable MSVC warnings about std::aligned_storage being broken before VS 2017 15.8\n\n    set_linker_flag(\"/DEBUG:FASTLINK\" DEBUG)\n    set_linker_flag(\"/DEBUG:FASTLINK\" RELWITHDEBINFO)\n\n    # Disable specific warnings\n    # TODO: Not all of these should be disabled, but for now, we want a warning-free msvc build. Remove these one by one\n    #       and fix the actual warnings in code.\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n        \"/wd4005\" # 'identifier' : macro redefinition\n        \"/wd4018\" # 'expression' : signed/unsigned mismatch\n        \"/wd4065\" # switch statement contains 'default' but no 'case' labels\n        \"/wd4141\" # 'modifier' : used more than once\n        \"/wd4244\" # 'conversion' conversion from 'type1' to 'type2', possible loss of data\n        \"/wd4267\" # 'var' : conversion from 'size_t' to 'type', possible loss of data\n        \"/wd4291\" # 'void X new(size_t,unsigned int,unsigned int)': no matching operator delete found; memory will not be freed if initialization throws an exception\n        \"/wd4309\" # 'conversion' : truncation of constant value\n        \"/wd4624\" # 'derived class' : destructor was implicitly defined as deleted because a base class destructor is inaccessible or deleted\n        \"/wd4800\" # 'type' : forcing value to bool 'true' or 'false' (performance warning)\n        \"/wd4838\" # conversion from 'type_1' to 'type_2' requires a narrowing conversion\n        \"/wd5030\" # attribute 'attribute' is not recognized\n        \"/wd5038\" # data member 'member1' will be initialized after data member 'member2' data member 'member' will be initialized after base class 'base_class'\n        \"/wd4146\" # unary minus operator applied to unsigned type, result still unsigned\n    )\n\n    # Treat specific warnings as errors\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n        \"/we4018\" # 'expression' : signed/unsigned mismatch\n        \"/we4062\" # enumerator 'identifier' in switch of enum 'enumeration' is not handled\n        \"/we4471\" # 'enumeration': a forward declaration of an unscoped enumeration must have an underlying type (int assumed)\n        \"/we4838\" # conversion from 'type_1' to 'type_2' requires a narrowing conversion\n        \"/we5038\" # data member 'member1' will be initialized after data member 'member2' data member 'member' will be initialized after base class 'base_class'\n        \"/we4101\" # 'identifier' : unreferenced local variable\n    )\nelse()\n    # Explicitly enable these warnings.\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n        \"-Wall\"\n        \"-Wreorder\"\n        \"-Wsign-compare\"\n        \"-Wmissing-braces\"\n    )\n\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n        if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 9)\n            list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n                \"-Wdeprecated-copy\"  # implicit copy constructor for 'X' is deprecated because of user-declared copy assignment operator.\n            )\n        endif()\n    elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n            \"-Wextra\"\n            \"-Wunreachable-code-loop-increment\"\n            \"-Wunused-lambda-capture\"\n            \"-Wstring-conversion\"\n            \"-Wextra-semi\"\n            \"-Wignored-qualifiers\"\n            \"-Wdeprecated-copy\"  # implicit copy constructor for 'X' is deprecated because of user-declared copy assignment operator.\n            # TODO(b/208256248): Avoid exit-time destructor.\n            #\"-Wexit-time-destructors\"  # declaration requires an exit-time destructor\n        )\n    endif()\n\n    if (SWIFTSHADER_EMIT_COVERAGE)\n        if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n            list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"--coverage\")\n            list(APPEND SWIFTSHADER_LIBS \"gcov\")\n        elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n            list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-fprofile-instr-generate\" \"-fcoverage-mapping\")\n            list(APPEND SWIFTSHADER_LINK_FLAGS \"-fprofile-instr-generate\" \"-fcoverage-mapping\")\n        else()\n            message(FATAL_ERROR \"Coverage generation not supported for the ${CMAKE_CXX_COMPILER_ID} toolchain\")\n        endif()\n    endif()\n\n    # Disable pedantic warnings\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n        list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n            \"-Wno-ignored-attributes\"   # ignoring attributes on template argument 'X'\n            \"-Wno-attributes\"           # 'X' attribute ignored\n            \"-Wno-strict-aliasing\"      # dereferencing type-punned pointer will break strict-aliasing rules\n            \"-Wno-comment\"              # multi-line comment\n        )\n        if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 9)\n            list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n                \"-Wno-init-list-lifetime\"  # assignment from temporary initializer_list does not extend the lifetime of the underlying array\n            )\n        endif()\n    elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        list(APPEND SWIFTSHADER_COMPILE_OPTIONS\n            \"-Wno-unneeded-internal-declaration\"  # function 'X' is not needed and will not be emitted\n            \"-Wno-unused-private-field\"           # private field 'offset' is not used - TODO: Consider enabling this once Vulkan is further implemented.\n            \"-Wno-comment\"                        # multi-line comment\n            \"-Wno-extra-semi\"                     # extra ';' after member function definition\n            \"-Wno-unused-parameter\"               # unused parameter 'X'\n\n            # Silence errors caused by unknown warnings when building with older\n            # versions of Clang. This demands checking that warnings added above\n            # are spelled correctly and work as intended!\n            \"-Wno-unknown-warning-option\"\n        )\n    endif()\n\n    if(ARCH STREQUAL \"x86\")\n        set_cpp_flag(\"-m32\")\n        set_cpp_flag(\"-msse2\")\n        set_cpp_flag(\"-mfpmath=sse\")\n        set_cpp_flag(\"-march=pentium4\")\n        set_cpp_flag(\"-mtune=generic\")\n    endif()\n    if(ARCH STREQUAL \"x86_64\")\n        set_cpp_flag(\"-m64\")\n        set_cpp_flag(\"-fPIC\")\n        set_cpp_flag(\"-march=x86-64\")\n        set_cpp_flag(\"-mtune=generic\")\n    endif()\n    if(ARCH STREQUAL \"mipsel\")\n        set_cpp_flag(\"-EL\")\n        set_cpp_flag(\"-march=mips32r2\")\n        set_cpp_flag(\"-fPIC\")\n        set_cpp_flag(\"-mhard-float\")\n        set_cpp_flag(\"-mfp32\")\n        set_cpp_flag(\"-mxgot\")\n    endif()\n    if(ARCH STREQUAL \"mips64el\")\n        set_cpp_flag(\"-EL\")\n        set_cpp_flag(\"-march=mips64r2\")\n        set_cpp_flag(\"-mabi=64\")\n        set_cpp_flag(\"-fPIC\")\n        set_cpp_flag(\"-mxgot\")\n    endif()\n\n    if(SWIFTSHADER_LESS_DEBUG_INFO)\n        # Use -g1 to be able to get stack traces\n        set_cpp_flag(\"-g -g1\" DEBUG)\n        set_cpp_flag(\"-g -g1\" RELWITHDEBINFO)\n    else()\n        # Use -g3 to have even more debug info\n        set_cpp_flag(\"-g -g3\" DEBUG)\n        set_cpp_flag(\"-g -g3\" RELWITHDEBINFO)\n    endif()\n\n    if(NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        # Treated as an unused argument with clang\n        set_cpp_flag(\"-s\" RELEASE)\n    endif()\n\n    # For distribution it is more important to be slim than super optimized\n    set_cpp_flag(\"-Os\" RELEASE)\n    set_cpp_flag(\"-Os\" RELWITHDEBINFO)\n\n    set_cpp_flag(\"-DNDEBUG\" RELEASE)\n    set_cpp_flag(\"-DNDEBUG\" RELWITHDEBINFO)\n\n    # Put each variable and function in its own section so that when linking\n    # with -gc-sections unused functions and variables are removed.\n    set_cpp_flag(\"-ffunction-sections\" RELEASE)\n    set_cpp_flag(\"-fdata-sections\" RELEASE)\n    set_cpp_flag(\"-fomit-frame-pointer\" RELEASE)\n\n    if(SWIFTSHADER_MSAN)\n        if(NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n            message(FATAL_ERROR \" \\n\"\n                    \" MemorySanitizer usage requires compiling with Clang.\")\n        endif()\n\n        if(NOT DEFINED ENV{SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH})\n            message(FATAL_ERROR \" \\n\"\n                    \" MemorySanitizer usage requires an instrumented build of libc++.\\n\"\n                    \" Set the SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH environment variable to the\\n\"\n                    \" build output path. See\\n\"\n                    \" https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo#instrumented-libc\\n\"\n                    \" for details on how to build an MSan instrumented libc++.\")\n        endif()\n\n        set_cpp_flag(\"-fsanitize=memory\")\n        set_linker_flag(\"-fsanitize=memory\")\n        set_cpp_flag(\"-stdlib=libc++\")\n        set_linker_flag(\"-L$ENV{SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH}/lib\")\n        set_cpp_flag(\"-I$ENV{SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH}/include\")\n        set_cpp_flag(\"-I$ENV{SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH}/include/c++/v1\")\n        set_linker_flag(\"-Wl,-rpath,$ENV{SWIFTSHADER_MSAN_INSTRUMENTED_LIBCXX_PATH}/lib\")\n    elseif(SWIFTSHADER_ASAN)\n        set_cpp_flag(\"-fsanitize=address\")\n        set_linker_flag(\"-fsanitize=address\")\n    elseif(SWIFTSHADER_TSAN)\n        set_cpp_flag(\"-fsanitize=thread\")\n        set_linker_flag(\"-fsanitize=thread\")\n    elseif(SWIFTSHADER_UBSAN)\n        set_cpp_flag(\"-fsanitize=undefined\")\n        set_linker_flag(\"-fsanitize=undefined\")\n    endif()\nendif()\n\nif(SWIFTSHADER_DCHECK_ALWAYS_ON)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DDCHECK_ALWAYS_ON\")\nendif()\n\nif(SWIFTSHADER_WARNINGS_AS_ERRORS)\n    if(MSVC)\n        set(WARNINGS_AS_ERRORS \"/WX\")  # Treat all warnings as errors\n    else()\n        set(WARNINGS_AS_ERRORS \"-Werror\")  # Treat all warnings as errors\n    endif()\nendif()\n\n# Enable Reactor Print() functionality in Debug/RelWithDebInfo builds or when explicitly enabled.\nif(CMAKE_BUILD_TYPE MATCHES \"Deb\")\n    set(REACTOR_ENABLE_PRINT TRUE)\nendif()\n\nif(REACTOR_EMIT_PRINT_LOCATION)\n    # This feature depends on REACTOR_EMIT_DEBUG_INFO and REACTOR_ENABLE_PRINT\n    set(REACTOR_EMIT_DEBUG_INFO TRUE)\n    set(REACTOR_ENABLE_PRINT TRUE)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DENABLE_RR_EMIT_PRINT_LOCATION\")\nendif()\n\nif(REACTOR_EMIT_ASM_FILE)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DENABLE_RR_EMIT_ASM_FILE\")\nendif()\n\nif(REACTOR_EMIT_DEBUG_INFO)\n    message(WARNING \"REACTOR_EMIT_DEBUG_INFO is enabled. This will likely affect performance.\")\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DENABLE_RR_DEBUG_INFO\")\nendif()\n\nif(REACTOR_ENABLE_PRINT)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DENABLE_RR_PRINT\")\nendif()\n\nif(REACTOR_VERIFY_LLVM_IR)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DENABLE_RR_LLVM_IR_VERIFICATION\")\nendif()\n\nif(REACTOR_DEFAULT_OPT_LEVEL)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DREACTOR_DEFAULT_OPT_LEVEL=${REACTOR_DEFAULT_OPT_LEVEL}\")\nendif()\n\nif(DEFINED SWIFTSHADER_LOGGING_LEVEL)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-DSWIFTSHADER_LOGGING_LEVEL=${SWIFTSHADER_LOGGING_LEVEL}\")\nendif()\n\nif(WIN32)\n    add_definitions(-DWINVER=0x501 -DNOMINMAX -DSTRICT)\n    set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} \"\" \"lib\")\nendif()\n\nset(USE_EXCEPTIONS\n    ${REACTOR_EMIT_DEBUG_INFO} # boost::stacktrace uses exceptions\n)\nif(NOT MSVC)\n    if (${USE_EXCEPTIONS})\n        list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-fexceptions\")\n    else()\n        list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-fno-exceptions\")\n    endif()\nendif()\nunset(USE_EXCEPTIONS)\n\n###########################################################\n# libbacktrace and boost\n###########################################################\nif(REACTOR_EMIT_DEBUG_INFO)\n    add_subdirectory(${THIRD_PARTY_DIR}/libbacktrace EXCLUDE_FROM_ALL)\n    add_subdirectory(${THIRD_PARTY_DIR}/boost EXCLUDE_FROM_ALL)\nendif()\n\n###########################################################\n# LLVM\n###########################################################\nadd_subdirectory(${THIRD_PARTY_DIR}/llvm-${SWIFTSHADER_LLVM_VERSION} EXCLUDE_FROM_ALL)\nset_target_properties(llvm PROPERTIES FOLDER \"third_party\")\n\n###########################################################\n# LLVM-Submodule\n###########################################################\nif(${REACTOR_BACKEND} STREQUAL \"LLVM-Submodule\")\n    set(LLVM_INCLUDE_TESTS FALSE)\n    set(LLVM_ENABLE_RTTI TRUE)\n    add_subdirectory(${THIRD_PARTY_DIR}/llvm-project/llvm EXCLUDE_FROM_ALL)\n    if(ARCH STREQUAL \"aarch64\")\n        llvm_map_components_to_libnames(llvm_libs orcjit aarch64asmparser aarch64codegen)\n    elseif(ARCH STREQUAL \"arm\")\n        llvm_map_components_to_libnames(llvm_libs orcjit armasmparser armcodegen)\n    elseif(ARCH MATCHES \"^mips.*\")\n        llvm_map_components_to_libnames(llvm_libs orcjit mipsasmparser mipscodegen)\n    elseif(ARCH STREQUAL \"ppc64le\")\n        llvm_map_components_to_libnames(llvm_libs orcjit powerpcasmparser powerpccodegen)\n    elseif(ARCH MATCHES \"^x86.*\")\n        llvm_map_components_to_libnames(llvm_libs orcjit x86asmparser x86codegen)\n    endif()\n    set_target_properties(${llvm_libs} PROPERTIES FOLDER \"third_party\")\nendif()\n\n###########################################################\n# Subzero\n###########################################################\nadd_subdirectory(${THIRD_PARTY_DIR}/llvm-subzero EXCLUDE_FROM_ALL)\nadd_subdirectory(${THIRD_PARTY_DIR}/subzero EXCLUDE_FROM_ALL)\nset_target_properties(llvm-subzero PROPERTIES FOLDER \"third_party\")\nset_target_properties(subzero PROPERTIES FOLDER \"third_party\")\n\n###########################################################\n# marl\n###########################################################\nset(MARL_THIRD_PARTY_DIR ${THIRD_PARTY_DIR})\nadd_subdirectory(${THIRD_PARTY_DIR}/marl)\nset_target_properties(marl PROPERTIES FOLDER \"third_party\")\n\nif(MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED)\n    list(APPEND SWIFTSHADER_COMPILE_OPTIONS \"-Wthread-safety\")\nendif()\n\n###########################################################\n# cppdap\n###########################################################\nif(SWIFTSHADER_BUILD_CPPDAP)\n    set(CPPDAP_THIRD_PARTY_DIR ${THIRD_PARTY_DIR})\n    add_subdirectory(${THIRD_PARTY_DIR}/cppdap)\nendif()\n\n###########################################################\n# astc-encoder\n###########################################################\nif(SWIFTSHADER_ENABLE_ASTC)\n    add_subdirectory(${THIRD_PARTY_DIR}/astc-encoder)\n    set_target_properties(astc-encoder PROPERTIES FOLDER \"third_party\")\nendif()\n\n###########################################################\n# gtest and gmock\n###########################################################\nif(SWIFTSHADER_BUILD_TESTS)\n    # For Win32, force gtest to match our CRT (shared)\n    set(gtest_force_shared_crt TRUE CACHE BOOL \"\" FORCE)\n    set(INSTALL_GTEST FALSE CACHE BOOL \"\" FORCE)\n    add_subdirectory(${THIRD_PARTY_DIR}/googletest EXCLUDE_FROM_ALL)\n    # gtest finds python, which picks python 2 first, if present.\n    # We need to undo this so that SPIR-V can later find python3.\n    unset(PYTHON_EXECUTABLE CACHE)\n    set_target_properties(gmock PROPERTIES FOLDER \"third_party\")\n    set_target_properties(gmock_main PROPERTIES FOLDER \"third_party\")\n    set_target_properties(gtest PROPERTIES FOLDER \"third_party\")\n    set_target_properties(gtest_main PROPERTIES FOLDER \"third_party\")\nendif()\n\n###########################################################\n# File Lists\n###########################################################\n\n###########################################################\n# Append OS specific files to lists\n###########################################################\n\nif(WIN32)\n    set(OS_LIBS odbc32 odbccp32 WS2_32 dxguid)\nelseif(LINUX)\n    set(OS_LIBS dl pthread)\n    if(SWIFTSHADER_BUILD_WSI_WAYLAND)\n        include_directories(\"${SWIFTSHADER_DIR}/include/Wayland\")\n    endif()\n    if(SWIFTSHADER_BUILD_WSI_DIRECTFB)\n        list(APPEND OS_LIBS \"${DIRECTFB}\")\n        include_directories(${DIRECTFB_INCLUDE_DIR}/directfb)\n    endif()\n    if(SWIFTSHADER_BUILD_WSI_D2D)\n        list(APPEND OS_LIBS \"${D2D}\")\n        include_directories(${D2D_INCLUDE_DIR}/libdrm)\n    endif()\nelseif(FUCHSIA)\n    set(OS_LIBS zircon)\nelseif(APPLE)\n    find_library(COCOA_FRAMEWORK Cocoa)\n    find_library(QUARTZ_FRAMEWORK Quartz)\n    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)\n    find_library(IOSURFACE_FRAMEWORK IOSurface)\n    find_library(METAL_FRAMEWORK Metal)\n    set(OS_LIBS \"${COCOA_FRAMEWORK}\" \"${QUARTZ_FRAMEWORK}\" \"${CORE_FOUNDATION_FRAMEWORK}\" \"${IOSURFACE_FRAMEWORK}\" \"${METAL_FRAMEWORK}\")\nendif()\n\n###########################################################\n# SwiftShader Targets\n###########################################################\n\nadd_subdirectory(src/Reactor) # Add ReactorSubzero and ReactorLLVM targets\n\nif(${REACTOR_BACKEND} STREQUAL \"LLVM\")\n    add_library(Reactor ALIAS ReactorLLVM)\nelseif(${REACTOR_BACKEND} STREQUAL \"LLVM-Submodule\")\n    add_library(Reactor ALIAS ReactorLLVMSubmodule)\nelseif(${REACTOR_BACKEND} STREQUAL \"Subzero\")\n    add_library(Reactor ALIAS ReactorSubzero)\nelse()\n    message(FATAL_ERROR \"REACTOR_BACKEND must be 'LLVM', 'LLVM-Submodule' or 'Subzero'\")\nendif()\n\nif (NOT TARGET SPIRV-Tools)\n    # This variable is also used by SPIRV-Tools to locate SPIRV-Headers\n    set(SPIRV-Headers_SOURCE_DIR \"${THIRD_PARTY_DIR}/SPIRV-Headers\")\n    set(SPIRV_SKIP_TESTS TRUE CACHE BOOL \"\" FORCE)\n    set(SPIRV_SKIP_EXECUTABLES TRUE CACHE BOOL \"\" FORCE)\n    set(SPIRV_WERROR FALSE CACHE BOOL \"\" FORCE)\n    add_subdirectory(${THIRD_PARTY_DIR}/SPIRV-Tools) # Add SPIRV-Tools target\nendif()\n\n# Add a vk_base interface library for shared vulkan build options.\n# TODO: Create src/Base and make this a lib target, and move stuff from\n# src/Vulkan into it that is needed by vk_pipeline, vk_device, and vk_wsi.\nadd_library(vk_base INTERFACE)\n\nif(SWIFTSHADER_ENABLE_VULKAN_DEBUGGER)\n    target_compile_definitions(vk_base INTERFACE \"ENABLE_VK_DEBUGGER\")\nendif()\n\nif(WIN32)\n    target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_WIN32_KHR\")\nelseif(LINUX)\n    if(SWIFTSHADER_BUILD_WSI_XCB)\n        target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_XCB_KHR\")\n    endif()\n    if(SWIFTSHADER_BUILD_WSI_WAYLAND)\n        target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_WAYLAND_KHR\")\n    endif()\n    if(SWIFTSHADER_BUILD_WSI_DIRECTFB)\n        if(DIRECTFB AND DIRECTFB_INCLUDE_DIR)\n            target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_DIRECTFB_EXT\")\n        endif()\n    endif(SWIFTSHADER_BUILD_WSI_DIRECTFB)\n    if(SWIFTSHADER_BUILD_WSI_D2D)\n        if(D2D)\n            target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_DISPLAY_KHR\")\n        endif()\n    endif(SWIFTSHADER_BUILD_WSI_D2D)\nelseif(APPLE)\n    target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_MACOS_MVK\")\n    target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_METAL_EXT\")\nelseif(FUCHSIA)\n    target_compile_definitions(vk_base INTERFACE \"VK_USE_PLATFORM_FUCHSIA\")\nelse()\n    message(FATAL_ERROR \"Platform does not support Vulkan yet\")\nendif()\n\nadd_subdirectory(src/System) # Add vk_system target\nadd_subdirectory(src/Pipeline) # Add vk_pipeline target\nadd_subdirectory(src/WSI) # Add vk_wsi target\nadd_subdirectory(src/Device) # Add vk_device target\nadd_subdirectory(src/Vulkan) # Add vk_swiftshader target\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND # turbo-cov is only useful for clang coverage info\n    SWIFTSHADER_EMIT_COVERAGE)\n    add_subdirectory(${TESTS_DIR}/regres/cov/turbo-cov)\nendif()\n\n###########################################################\n# Sample programs and tests\n###########################################################\n\n# TODO(b/161976310): Add support for building PowerVR on MacOS\nif(APPLE AND SWIFTSHADER_BUILD_PVR)\n    message(WARNING \"Building PowerVR examples for SwiftShader is not yet supported on Apple platforms.\")\n    set(SWIFTSHADER_BUILD_PVR FALSE)\nendif()\n\nif(SWIFTSHADER_BUILD_PVR)\n    if(UNIX AND NOT APPLE)\n        set(PVR_WINDOW_SYSTEM XCB)\n\n        # Set the RPATH of the next defined build targets to $ORIGIN,\n        # allowing them to load shared libraries from the execution directory.\n        set(CMAKE_BUILD_RPATH \"$ORIGIN\")\n    endif()\n\n    set(PVR_BUILD_EXAMPLES TRUE CACHE BOOL \"Build the PowerVR SDK Examples\" FORCE)\n    set(PVR_BUILD_VULKAN_EXAMPLES TRUE CACHE BOOL \"Build the Vulkan PowerVR SDK Examples\" FORCE)\n    add_subdirectory(${THIRD_PARTY_DIR}/PowerVR_Examples)\n\n    # Samples known to work well\n    set(PVR_VULKAN_TARGET_GOOD\n        VulkanBumpmap\n        VulkanExampleUI\n        VulkanGaussianBlur\n        VulkanGlass\n        VulkanGnomeHorde\n        VulkanHelloAPI\n        VulkanImageBasedLighting\n        VulkanIntroducingPVRUtils\n        VulkanMultiSampling\n        VulkanNavigation2D\n        VulkanParticleSystem\n        VulkanSkinning\n    )\n\n    set(PVR_VULKAN_TARGET_OTHER\n        VulkanDeferredShading\n        VulkanDeferredShadingPFX\n        VulkanGameOfLife\n        VulkanIBLMapsGenerator\n        VulkanIMGTextureFilterCubic\n        VulkanIntroducingPVRShell\n        VulkanIntroducingPVRVk\n        VulkanIntroducingUIRenderer\n        VulkanMultithreading\n        VulkanNavigation3D\n        VulkanPostProcessing\n        VulkanPVRScopeExample\n        VulkanPVRScopeRemote\n    )\n\n    set(PVR_TARGET_OTHER\n        glslang\n        glslangValidator\n        glslang-default-resource-limits\n        OSDependent\n        pugixml\n        PVRAssets\n        PVRCamera\n        PVRCore\n        PVRPfx\n        PVRShell\n        PVRUtilsVk\n        PVRVk\n        SPIRV\n        spirv-remap\n        SPVRemapper\n        uninstall\n    )\n\n    set(PVR_VULKAN_TARGET\n        ${PVR_VULKAN_TARGET_GOOD}\n        ${PVR_VULKAN_TARGET_OTHER}\n    )\n\n    foreach(pvr_target ${PVR_VULKAN_TARGET})\n        add_dependencies(${pvr_target} vk_swiftshader)\n    endforeach()\n\n    foreach(pvr_target ${PVR_VULKAN_TARGET_GOOD})\n        set_target_properties(${pvr_target} PROPERTIES FOLDER Samples)\n    endforeach()\n\n    foreach(pvr_target ${PVR_TARGET_OTHER} ${PVR_VULKAN_TARGET_OTHER})\n        set_target_properties(${pvr_target} PROPERTIES FOLDER Samples/PowerVR-Build)\n    endforeach()\nendif()\n\nif(BUILD_VULKAN_WRAPPER)\n    if (NOT TARGET glslang)\n        add_subdirectory(${THIRD_PARTY_DIR}/glslang)\n    endif()\n    add_subdirectory(${TESTS_DIR}/VulkanWrapper) # Add VulkanWrapper target\nendif()\n\nif(SWIFTSHADER_BUILD_TESTS)\n    add_subdirectory(${TESTS_DIR}/ReactorUnitTests) # Add ReactorUnitTests target\n    add_subdirectory(${TESTS_DIR}/MathUnitTests) # Add math-unittests target\n    add_subdirectory(${TESTS_DIR}/SystemUnitTests) # Add system-unittests target\nendif()\n\nif(SWIFTSHADER_BUILD_BENCHMARKS)\n    if (NOT TARGET benchmark::benchmark)\n        set(BENCHMARK_ENABLE_TESTING FALSE CACHE BOOL FALSE FORCE)\n        add_subdirectory(${THIRD_PARTY_DIR}/benchmark)\n        set_target_properties(benchmark PROPERTIES FOLDER \"third_party\")\n        set_target_properties(benchmark_main PROPERTIES FOLDER \"third_party\")\n    endif()\n\n    add_subdirectory(${TESTS_DIR}/PipelineBenchmarks) # Add PipelineBenchmarks target\n    add_subdirectory(${TESTS_DIR}/ReactorBenchmarks) # Add ReactorBenchmarks target\n    add_subdirectory(${TESTS_DIR}/SystemBenchmarks) # Add system-benchmarks target\n    add_subdirectory(${TESTS_DIR}/VulkanBenchmarks) # Add VulkanBenchmarks target\nendif()\n\nif(SWIFTSHADER_BUILD_TESTS)\n    add_subdirectory(${TESTS_DIR}/VulkanUnitTests) # Add VulkanUnitTests target\nendif()\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 1.5986328125,
          "content": "﻿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"variables\": [\n        {\n          \"name\": \"REACTOR_BACKEND\",\n          \"value\": \"Subzero\",\n          \"type\": \"STRING\"\n        }\n      ]\n    },\n    {\n      \"name\": \"x86-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ]\n    },\n    {\n      \"name\": \"x86-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ]\n    },\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ]\n    }\n  ]\n}"
        },
        {
          "name": "CONTRIBUTING.txt",
          "type": "blob",
          "size": 1.4697265625,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\r\n\r\n### Before you contribute\r\nBefore we can use your code, you must sign the\r\n[Google Individual Contributor License Agreement]\r\n(https://cla.developers.google.com/about/google-individual)\r\n(CLA), which you can do online. The CLA is necessary mainly because you own the\r\ncopyright to your changes, even after your contribution becomes part of our\r\ncodebase, so we need your permission to use and distribute your code. We also\r\nneed to be sure of various other things—for instance that you'll tell us if you\r\nknow that your code infringes on other people's patents. You don't have to sign\r\nthe CLA until after you've submitted your code for review and a member has\r\napproved it, but you must do it before we can put your code into our codebase.\r\nBefore you start working on a larger contribution, you should get in touch with\r\nus first through the issue tracker with your idea so that we can help out and\r\npossibly guide you. Coordinating up front makes it much easier to avoid\r\nfrustration later on.\r\n\r\n### Code reviews\r\nAll submissions, including submissions by project members, require review.\r\n\r\nInformation on how to sumbit changes for review is provided in README.md.\r\n\r\n### The small print\r\nContributions made by corporations are covered by a different agreement than\r\nthe one above, the\r\n[Software Grant and Corporate Contributor License Agreement]\r\n(https://cla.developers.google.com/about/google-corporate)."
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 1.4296875,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\r\n# The AUTHORS file lists the copyright holders; this file\r\n# lists people.  For example, Google employees are listed here\r\n# but not in AUTHORS, because Google holds the copyright.\r\n#\r\n# https://developers.google.com/open-source/cla/individual\r\n# https://developers.google.com/open-source/cla/corporate\r\n#\r\n# Names should be added to this file as:\r\n#     Name <email address>\r\n\r\nGoogle Inc.\r\n Nicolas Capens <capn@google.com>\r\n Alexis Hétu <sugoi@google.com>\r\n Shannon Woods <shannonwoods@google.com>\r\n Corentin Wallez <cwallez@google.com>\r\n Greg Hartman <ghartman@google.com>\r\n Ping-Hao Wu <pinghao@google.com>\r\n Maxime Grégoire <mgregoire@google.com>\r\n Veranika Liaukevich <veranika@google.com>\r\n John Bauman <jbauman@google.com>\r\n Keun Soo Yim <yim@google.com>\r\n Kelsen Liu <kelsenliu21@gmail.com>\r\n John Sheu <sheu@google.com>\r\n Philippe Hamel <hamelphi@google.com>\r\n Daniel Toyama <kenjitoyama@google.com>\r\n Meng-Lin Wu <marleymoo@google.com>\r\n Krzysztof Kosiński <krzysio@google.com>\r\n Chris Forbes <chrisforbes@google.com>\r\n Ben Clayton <bclayton@google.com>\r\n Hernan Liatis <hliatis@google.com>\r\n Logan (Tzu-hsiang) Chien <loganchien@google.com>\r\n Stephen White <senorblanco@google.com>\r\n Raymond Chiu <chiur@google.com>\r\n Shahbaz Youssefi <syoussefi@google.com>\r\n\r\nTransGaming Inc.\r\n Nicolas Capens\r\n Gavriel State\r\n Jim MacArthur\r\n Daniel Koch\r\n Luther Johnson\r\n Rob Stepinski\r\n"
        },
        {
          "name": "DIR_METADATA",
          "type": "blob",
          "size": 0.052734375,
          "content": "monorail {\n  component: \"Internals>GPU>SwiftShader\"\n}\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.2890625,
          "content": "\r\n                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n"
        },
        {
          "name": "OWNERS",
          "type": "blob",
          "size": 0.810546875,
          "content": "# This is the list of people with commit rights actively working on SwiftShader\n#\n# This list is used by Chromium and Android to make sure that one of the owners\n# in this list has approved a SwiftShader related change before landing it.\n#\n# Note that the upstream source-of-truth git repository at\n# swiftshader.googlesource.com/SwiftShader has ownership and access control\n# seperate from those controlled by this OWNERS file.\n\nsyoussefi@google.com\ngeofflang@google.com\n\nsugoi@google.com         #{LAST_RESORT_SUGGESTION}\nchrisforbes@google.com   #{LAST_RESORT_SUGGESTION}\ncwallez@google.com       #{LAST_RESORT_SUGGESTION}\namaiorano@google.com     #{LAST_RESORT_SUGGESTION}\nnatsu@google.com         #{LAST_RESORT_SUGGESTION}\nschuffelen@google.com    #{LAST_RESORT_SUGGESTION}\nbclayton@google.com      #{LAST_RESORT_SUGGESTION}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7412109375,
          "content": "# SwiftShader\r\n\r\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\r\n\r\nIntroduction\r\n------------\r\n\r\nSwiftShader[^1] is a high-performance CPU-based implementation[^2] of the Vulkan[^3] 1.3 graphics API. Its goal is to provide hardware independence for advanced 3D graphics.\r\n\r\n> NOTE: The [ANGLE](http://angleproject.org/) project can be used to achieve a layered implementation[^4] of OpenGL ES 3.1 (aka. \"SwANGLE\").\r\n\r\nBuilding\r\n--------\r\n\r\nSwiftShader libraries can be built for Windows, Linux, and macOS.\\\r\nAndroid and Chrome (OS) build environments are also supported.\r\n\r\n* **CMake**\r\n\\\r\n  [Install CMake](https://cmake.org/download/) for Linux, macOS, or Windows and use either [the GUI](https://cmake.org/runningcmake/) or run the following terminal commands:\r\n  ```\r\n  cd build\r\n  cmake ..\r\n  cmake --build . --parallel\r\n\r\n  ./vk-unittests\r\n  ```\r\n  Tip: Set the [CMAKE_BUILD_PARALLEL_LEVEL](https://cmake.org/cmake/help/latest/envvar/CMAKE_BUILD_PARALLEL_LEVEL.html) environment variable to control the level of parallelism.\r\n\r\n\r\n* **Visual Studio**\r\n\\\r\n  To build the Vulkan ICD library, use [Visual Studio 2019](https://visualstudio.microsoft.com/vs/community/) to open the project folder and wait for it to run CMake. Open the [CMake Targets View](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=vs-2019#ide-integration) in the Solution Explorer and select the vk_swiftshader project to [build](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=vs-2019#building-cmake-projects) it.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nThe SwiftShader libraries act as drop-in replacements for graphics drivers.\r\n\r\nOn Windows, most applications can be made to use SwiftShader's DLLs by placing them in the same folder as the executable. On Linux, the `LD_LIBRARY_PATH` environment variable or `-rpath` linker option can be used to direct applications to search for shared libraries in the indicated directory first.\r\n\r\nIn general, Vulkan applications look for a shared library named `vulkan-1.dll` on Windows (`vulkan-1.so` on Linux). This 'loader' library then redirects API calls to the actual Installable Client Driver (ICD). SwiftShader's ICD is named `libvk_swiftshader.dll`, but it can be renamed to `vulkan-1.dll` to be loaded directly by the application. Alternatively, you can set the `VK_ICD_FILENAMES` environment variable to the path to `vk_swiftshader_icd.json` file that is generated under the build directory (e.g. `.\\SwiftShader\\build\\Windows\\vk_swiftshader_icd.json`). To learn more about how Vulkan loading works, read the [official documentation here](https://github.com/KhronosGroup/Vulkan-Loader/blob/master/loader/LoaderAndLayerInterface.md).\r\n\r\nContributing\r\n------------\r\n\r\nSee [CONTRIBUTING.txt](CONTRIBUTING.txt) for important contributing requirements.\r\n\r\nThe canonical repository for SwiftShader is hosted at:\r\nhttps://swiftshader.googlesource.com/SwiftShader.\r\n\r\nAll changes must be reviewed and approved in the [Gerrit](https://www.gerritcodereview.com/) review tool at:\r\nhttps://swiftshader-review.googlesource.com. You must sign in to this site with a Google Account before changes can be uploaded.\r\n\r\nNext, authenticate your account here:\r\nhttps://swiftshader.googlesource.com/new-password (use the same e-mail address as the one configured as the [Git commit author](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup#_your_identity)).\r\n\r\nAll changes require a [Change-ID](https://gerrit-review.googlesource.com/Documentation/user-changeid.html) tag in the commit message. A [commit hook](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) may be used to add this tag automatically, and can be found at:\r\nhttps://gerrit-review.googlesource.com/tools/hooks/commit-msg. You can execute `git clone https://swiftshader.googlesource.com/SwiftShader` and manually place the commit hook in `SwiftShader/.git/hooks/`, or to clone the repository and install the commit hook in one go:\r\n\r\n    git clone https://swiftshader.googlesource.com/SwiftShader && (cd SwiftShader && git submodule update --init --recursive third_party/git-hooks && ./third_party/git-hooks/install_hooks.sh)\r\n\r\nOn Windows, this command line requires using the [Git Bash Shell](https://www.atlassian.com/git/tutorials/git-bash).\r\n\r\nChanges are uploaded to Gerrit by executing:\r\n\r\n    git push origin HEAD:refs/for/master\r\n\r\nWhen ready, [add](https://gerrit-review.googlesource.com/Documentation/intro-user.html#adding-reviewers) a project [owner](OWNERS) as a reviewer on your change.\r\n\r\nSome tests will automatically be run against the change. Notably, [presubmit.sh](tests/presubmit.sh) verifies the change has been formatted using [clang-format 11.0.1](tests/kokoro/gcp_ubuntu/check_style.sh). Most IDEs come with clang-format support, but may require upgrading/downgrading to the [clang-format version 11.0.0](https://github.com/llvm/llvm-project/releases/tag/llvmorg-11.0.0) *release* version (notably Chromium's buildtools has a clang-format binary which can be an in-between revision which produces different formatting results).\r\n\r\nTesting\r\n-------\r\n\r\nSwiftShader's Vulkan implementation can be tested using the [dEQP](https://github.com/KhronosGroup/VK-GL-CTS) test suite.\r\n\r\nSee [docs/dEQP.md](docs/dEQP.md) for details.\r\n\r\nThird-Party Dependencies\r\n------------------------\r\n\r\nThe [third_party](third_party/) directory contains projects which originated outside of SwiftShader:\r\n\r\n[subzero](third_party/subzero/) contains a fork of the [Subzero](https://chromium.googlesource.com/native_client/pnacl-subzero/) project. It originates from Google Chrome's (Portable) [Native Client](https://developer.chrome.com/native-client) project. The fork was made using [git-subtree](https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt) to include all of Subzero's history.\r\n\r\n[llvm-subzero](third_party/llvm-subzero/) contains a minimized set of LLVM dependencies of the Subzero project.\r\n\r\n[PowerVR_SDK](third_party/PowerVR_SDK/) contains a subset of the [PowerVR Graphics Native SDK](https://github.com/powervr-graphics/Native_SDK) for running several sample applications.\r\n\r\n[googletest](third_party/googletest/) contains the [Google Test](https://github.com/google/googletest) project, as a Git submodule. It is used for running unit tests for Chromium, and Reactor unit tests. Run `git submodule update --init` to obtain/update the code. Any contributions should be made upstream.\r\n\r\nDocumentation\r\n-------------\r\n\r\nSee [docs/Index.md](docs/Index.md).\r\n\r\nContact\r\n-------\r\n\r\nPublic mailing list: [swiftshader@googlegroups.com](https://groups.google.com/forum/#!forum/swiftshader)\r\n\r\nGeneral bug tracker:  https://g.co/swiftshaderbugs \\\r\nChrome specific bugs: https://bugs.chromium.org/p/swiftshader\r\n\r\nLicense\r\n-------\r\n\r\nThe SwiftShader project is licensed under the Apache License Version 2.0. You can find a copy of it in [LICENSE.txt](LICENSE.txt).\r\n\r\nFiles in the third_party folder are subject to their respective license.\r\n\r\nAuthors and Contributors\r\n------------------------\r\n\r\nThe legal authors for copyright purposes are listed in [AUTHORS.txt](AUTHORS.txt).\r\n\r\n[CONTRIBUTORS.txt](CONTRIBUTORS.txt) contains a list of names of individuals who have contributed to SwiftShader. If you're not on the list, but you've signed the [Google CLA](https://cla.developers.google.com/clas) and have contributed more than a formatting change, feel free to request to be added.\r\n\r\nNotes and Disclaimers\r\n---------------------\r\n\r\n[^1]: This is not an official Google product.  \r\n[^2]: Vulkan 1.3 conformance: https://www.khronos.org/conformance/adopters/conformant-products#submission_717  \r\n[^3]: Trademarks are the property of their respective owners.  \r\n[^4]: OpenGL ES 3.1 conformance: https://www.khronos.org/conformance/adopters/conformant-products/opengles#submission_906  "
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_overrides",
          "type": "tree",
          "content": null
        },
        {
          "name": "codereview.settings",
          "type": "blob",
          "size": 0.134765625,
          "content": "# This file is used by git cl to get repository specific information.\nPROJECT: swiftshader\nGERRIT_HOST: True\nGERRIT_SQUASH_UPLOADS: False\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "infra",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}