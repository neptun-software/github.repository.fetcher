{
  "metadata": {
    "timestamp": 1736565725783,
    "page": 637,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bambulab/BambuStudio",
      "stars": 2410,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "Build\nBuild.bat\n/build/\ndeps/build\nMYMETA.json\nMYMETA.yml\n_build\nblib\nxs/buildtmp\n*.o\n*.log\nMANIFEST.bak\nxs/MANIFEST.bak\nxs/assertlib*\n.init_bundle.ini\n.vs/*\nlocal-lib\n/src/TAGS\n/.vscode/\nbuild-linux/*\ndeps/build-linux/*\n**/.DS_Store\ninstall_*\nbuild_*/\nSVG\nDockerfile\nDockerBuild.sh\nDockerRun.sh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "Build\nBuild.bat\n/build/\n/build2022/\ndeps/build\nMYMETA.json\nMYMETA.yml\n_build\nblib\nxs/buildtmp\n*.o\n*.log\nMANIFEST.bak\nxs/MANIFEST.bak\nxs/assertlib*\n.init_bundle.ini\n.vs/*\nlocal-lib\n/src/TAGS\n/.vscode/\nbuild-linux/*\ndeps/build-linux/*\n**/.DS_Store\ninstall_*\nbuild_*/\nSVG\ndoc/\n**/process_full/\n**/machine_full/\n**/filament_full/\n"
        },
        {
          "name": "BambuStudio.mo",
          "type": "blob",
          "size": 243.9970703125,
          "content": null
        },
        {
          "name": "BambuStudio.sublime-project",
          "type": "blob",
          "size": 4.4990234375,
          "content": "{\n\t\"build_systems\":\n\t[\n\t\t{\n\t\t\t\"name\": \"List\",\n   \t\t\t//\"file_regex\": \" at ([^-\\\\s]*) line ([0-9]*)\",\n//   \t\t\t\"file_regex\": \" at (D\\\\:\\\\/src\\\\/Slic3r\\\\/.*?) line ([0-9]*)\",\n\t\t\t\"shell_cmd\": \"ls -l\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Run\",\n\t\t\t\"working_dir\": \"$project_path\",\n   \t\t\t\"file_regex\": \" at (.*?) line ([0-9]*)\",\n//\t\t\t\"shell_cmd\": \"chdir & perl slic3r.pl  --DataDir \\\"C:\\\\Users\\\\Public\\\\Documents\\\\Prusa3D\\\\Slic3r settings MK2\\\" --gui \\\"..\\\\Slic3r-tests\\\\gap fill torture 20 -rt.stl\\\"\"\n\t\t\t\"shell_cmd\": \"chdir & perl slic3r.pl\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"full\",\n   \t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"shell_cmd\": \"chdir & perl Build.pl\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"xs\",\n\t\t\t\"working_dir\": \"$project_path/build\",\n\t\t\t// for Visual Studio:\n  \t\t\t\"file_regex\": \"^(..[^:]*)\\\\(([0-9]+)\\\\)(.*)$\",\n  \t\t\t// For GCC:\n// \t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"shell_cmd\": \"chdir & ninja -j 6 -v\",\n\t\t\t\"env\": {\n//\t\t\t\t\"PATH\": \"C:\\\\Program Files (x86)\\\\MSBuild\\\\12.0\\\\bin\\\\amd64;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 12.0\\\\VC\\\\BIN\\\\amd64;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 12.0\\\\Common7\\\\IDE;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 12.0\\\\Common7\\\\Tools;%PATH%;c:\\\\wperl64d\\\\site\\\\bin;c:\\\\wperl64d\\\\bin\",\n//\t\t\t\t\"PERL_CPANM_HOME\": \"c:\\\\wperl64d\\\\cpanm\",\n//\t\t\t\t\"WXDIR\": \"D:\\\\src-perl\\\\wxWidgets-3.0.3-beta1\",\n//\t\t\t\t\"BOOST_DIR\": \"D:\\\\src-perl\\\\boost_1_61_0\",\n//\t\t\t\t\"BOOST_INCLUDEDIR\": \"D:\\\\src-perl\\\\boost_1_61_0\",\n//\t\t\t\t\"BOOST_LIBRARYDIR\": \"D:\\\\src-perl\\\\boost_1_61_0\\\\stage\\\\x64\\\\lib\",\n//\t\t\t\t\"SLIC3R_STATIC\": \"1\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"xs & run\",\n\t\t\t\"working_dir\": \"$project_path/build\",\n  \t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"shell_cmd\": \"chdir & ninja -j 6 & cd .. & perl slic3r.pl --gui \\\"..\\\\Slic3r-tests\\\\star3-big2.stl\\\"\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Slic3r - clean\",\n\t\t\t\"working_dir\": \"$project_path/build\",\n\t\t\t\"file_regex\": \"^(..[^:]*)(?::|\\\\()([0-9]+)(?::|\\\\))(?:([0-9]+):)?\\\\s*(.*)\",\n\t\t\t\"shell_cmd\": [\"chdir & ninja clean\"]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"run tests\",\n\t\t\t\"working_dir\": \"$project_path/build\",\n\t\t\t// for Visual Studio:\n  \t\t\t\"file_regex\": \"^(..[^:]*)\\\\(([0-9]+)\\\\)(.*)$\",\n\t\t\t\"shell_cmd\": \"chdir & ctest --verbose\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Clean & Configure\",\n\t\t\t\"working_dir\": \"$project_path\",\n\t\t\t// for Visual Studio:\n\t\t\t\"file_regex\": \"^(..[^:]*)(?::|\\\\()([0-9]+)(?::|\\\\))(?:([0-9]+):)?\\\\s*(.*)\",\n\t\t\t\"shell_cmd\": \"chdir & rmdir /S /Q build & mkdir build & cd build & cmake -G Ninja .. -DCMAKE_COLOR_MAKEFILE=OFF -DCMAKE_RULE_PROGRESS=OFF  -DCMAKE_RULE_MESSAGES=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Configure\",\n\t\t\t\"working_dir\": \"$project_path/build\",\n\t\t\t// for Visual Studio:\n\t\t\t\"file_regex\": \"^(..[^:]*)(?::|\\\\()([0-9]+)(?::|\\\\))(?:([0-9]+):)?\\\\s*(.*)\",\n\t\t\t\"shell_cmd\": \"cmake -G Ninja .. -DCMAKE_COLOR_MAKEFILE=OFF -DCMAKE_RULE_PROGRESS=OFF  -DCMAKE_RULE_MESSAGES=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo\"\n\t\t}\n\t],\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"path\": \".\",\n//\t        \"folder_exclude_patterns\": [\".svn\", \"._d\", \".metadata\", \".settings\"],\n\t        \"file_exclude_patterns\": [\"XS.c\", \"*.pch\", \"*.ilk\", \"*.js\" ]\n\t\t}\n\t],\n\n    \"settings\":\n    {\n        \"sublimegdb_workingdir\": \"${folder:${project_path:run}}\",\n  \t\t// NOTE: You MUST provide --interpreter=mi for the plugin to work\n//    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi -ex 'target localhost:2345'\",\n//    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi perl --args perl slic3r.pl\",\n//    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi perl --args slic3r.pl \",\n//    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi -e C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -s C:\\\\Strawberry\\\\perl\\\\site\\\\lib\\\\auto\\\\Slic3r\\\\XS\\\\XS.xs.dll --args perl slic3r.pl -j 1 --gui D:\\\\src\\\\Slic3r-tests\\\\star3-big.stl\",\n    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi perl.exe --args perl slic3r.pl -j 1 --gui\", //  D:\\\\src\\\\Slic3r-tests\\\\star3-big.stl\",\n//    \t\"sublimegdb_commandline\": \"D:\\\\Qt\\\\Tools\\\\mingw492_32\\\\bin\\\\gdb.exe --interpreter=mi -x slic3r.gdb\",\n//    \t\"arguments\": \"slic3r -j 1 --gui ../Slic3r-tests/star3-big.stl\",\n//\t  \t\"arguments\": \"../slic3r.pl -j 1 --gui\",\n//        \"sublimegdb_exec_cmd\": \"-exec-continue\",\n    \t\n    \t// Add \"pending breakpoints\" for symbols that are dynamically loaded from\n    \t// external shared libraries\n    \t\"debug_ext\" : true,\n    \t\"run_after_init\": false,\n    \t\"close_views\": false\n    }\n}\n"
        },
        {
          "name": "Build.PL",
          "type": "blob",
          "size": 4.1650390625,
          "content": "#!/usr/bin/perl\n\nprint \"This script is currently used for installing Perl dependenices for running\\n\";\nprint \"the libslic3r unit / integration tests through Perl prove.\\n\";\nprint \"If you don't plan to run the unit / integration tests, you don't need to\\n\";\nprint \"install these dependencies to build and run BambuSlicer.\\n\";\n\nuse strict;\nuse warnings;\n\nuse Config;\nuse File::Spec;\n\nmy %prereqs = qw(\n    Devel::CheckLib                 0\n    ExtUtils::MakeMaker             6.80\n    ExtUtils::ParseXS               3.22\n    ExtUtils::XSpp                  0\n    ExtUtils::XSpp::Cmd             0\n    ExtUtils::CppGuess              0\n    ExtUtils::Typemaps              0\n    ExtUtils::Typemaps::Basic       0\n    File::Basename                  0\n    File::Spec                      0\n    Getopt::Long                    0\n    Module::Build::WithXSpp         0.14\n    Moo                             1.003001\n    POSIX                           0\n    Scalar::Util                    0\n    Test::More                      0\n    IO::Scalar                      0\n    Time::HiRes                     0\n);\nmy %recommends = qw(\n    Class::XSAccessor               0\n    Test::Harness                   0\n);\n\nmy $sudo    = grep { $_ eq '--sudo' } @ARGV;\nmy $nolocal = grep { $_ eq '--nolocal' }  @ARGV;\n\nmy @missing_prereqs = ();\nif ($ENV{SLIC3R_NO_AUTO}) {\n    foreach my $module (sort keys %prereqs) {\n        my $version = $prereqs{$module};\n        next if eval \"use $module $version; 1\";\n        push @missing_prereqs, $module if exists $prereqs{$module};\n        print \"Missing prerequisite $module $version\\n\";\n    }\n    foreach my $module (sort keys %recommends) {\n        my $version = $recommends{$module};\n        next if eval \"use $module $version; 1\";\n        print \"Missing optional $module $version\\n\";\n    }\n} else {\n    my @try = (\n        $ENV{CPANM} // (),\n        File::Spec->catfile($Config{sitebin}, 'cpanm'),\n        File::Spec->catfile($Config{installscript}, 'cpanm'),\n    );\n    \n    my $cpanm;\n    foreach my $path (@try) {\n        if (-e $path) {  # don't use -x because it fails on Windows\n            $cpanm = $path;\n            last;\n        }\n    }\n    if (!$cpanm) {\n        if ($^O =~ /^(?:darwin|linux)$/ && system(qw(which cpanm)) == 0) {\n            $cpanm = 'cpanm';\n        }\n    }\n    die <<'EOF'\ncpanm was not found. Please install it before running this script.\n\nThere are several ways to install cpanm, try one of these:\n\n    apt-get install cpanminus\n    curl -L http://cpanmin.us | perl - --sudo App::cpanminus\n    cpan App::cpanminus\n\nIf it is installed in a non-standard location you can do:\n    \n    CPANM=/path/to/cpanm perl Build.PL\n\nEOF\n        if !$cpanm;\n    my @cpanm_args = ();\n    push @cpanm_args, \"--sudo\" if $sudo;\n\n    # install local::lib without --local-lib otherwise it's not usable afterwards\n    if (!eval \"use local::lib qw(local-lib); 1\") {\n        my $res = system $cpanm, @cpanm_args, 'local::lib';\n        warn \"Warning: local::lib is required. You might need to run the `cpanm --sudo local::lib` command in order to install it.\\n\"\n            if $res != 0;\n    }\n    \n    push @cpanm_args, ('--local-lib', 'local-lib') if ! $nolocal;\n\n    # make sure our cpanm is updated (old ones don't support the ~ syntax)\n    system $cpanm, @cpanm_args, 'App::cpanminus';\n    \n    my %modules = (%prereqs, %recommends);\n    foreach my $module (sort keys %modules) {\n        my $version = $modules{$module};\n        my @cmd = ($cpanm, @cpanm_args);\n        \n        # temporary workaround for upstream bug in test\n        push @cmd, '--notest'\n            if $module =~ /^(?:OpenGL|Test::Harness)$/;\n        \n        push @cmd, \"$module~$version\";\n\n        my $res = system @cmd;\n        if ($res != 0) {\n            if (exists $prereqs{$module}) {\n                push @missing_prereqs, $module;\n            } else {\n                printf \"Don't worry, this module is optional.\\n\";\n            }\n        }\n    }\n}\n\nprint \"\\n\";\nprint \"In the next step, you need to build the BambuStudio C++ library.\\n\";\nprint \"1) Create a build directory and change to it\\n\";\nprint \"2) run cmake .. -DCMAKE_BUILD_TYPE=Release\\n\";\nprint \"3) run make\\n\";\nprint \"4) to execute the automatic tests, run ctest --verbose\\n\";\n__END__\n"
        },
        {
          "name": "BuildLinux.sh",
          "type": "blob",
          "size": 5.349609375,
          "content": "#!/bin/bash\n\nexport ROOT=$(dirname $(readlink -f ${0}))\n\nset -e # exit on first error\n\nfunction check_available_memory_and_disk() {\n    FREE_MEM_GB=$(free -g -t | grep 'Mem' | rev | cut -d\" \" -f1 | rev)\n    MIN_MEM_GB=10\n\n    FREE_DISK_KB=$(df -k . | tail -1 | awk '{print $4}')\n    MIN_DISK_KB=$((10 * 1024 * 1024))\n\n    if [ ${FREE_MEM_GB} -le ${MIN_MEM_GB} ]; then\n        echo -e \"\\nERROR: Bambu Studio Builder requires at least ${MIN_MEM_GB}G of 'available' mem (systen has only ${FREE_MEM_GB}G available)\"\n        echo && free -h && echo\n        exit 2\n    fi\n\n    if [[ ${FREE_DISK_KB} -le ${MIN_DISK_KB} ]]; then \n        echo -e \"\\nERROR: Bambu Studio Builder requires at least $(echo $MIN_DISK_KB |awk '{ printf \"%.1fG\\n\", $1/1024/1024; }') (systen has only $(echo ${FREE_DISK_KB} | awk '{ printf \"%.1fG\\n\", $1/1024/1024; }') disk free)\"\n        echo && df -h . && echo\n        exit 1\n    fi\n}\n\nfunction usage() {\n    echo \"Usage: ./BuildLinux.sh [-1][-b][-c][-d][-i][-r][-s][-u]\"\n    echo \"   -1: limit builds to 1 core (where possible)\"\n    echo \"   -f: disable safe parallel number limit(By default, the maximum number of parallels is set to free memory/2.5)\"\n    echo \"   -b: build in debug mode\"\n    echo \"   -c: force a clean build\"\n    echo \"   -d: build deps (optional)\"\n    echo \"   -h: this help output\"\n    echo \"   -i: Generate appimage (optional)\"\n    echo \"   -r: skip ram and disk checks (low ram compiling)\"\n    echo \"   -s: build bambu-studio (optional)\"\n    echo \"   -u: update and build dependencies (optional and need sudo)\"\n    echo \"For a first use, you want to 'sudo ./BuildLinux.sh -u'\"\n    echo \"   and then './BuildLinux.sh -dsi'\"\n}\n\nunset name\nwhile getopts \":1fbcdghirsu\" opt; do\n  case ${opt} in\n    1 )\n        export CMAKE_BUILD_PARALLEL_LEVEL=1\n        ;;\n    f )\n        DISABLE_PARALLEL_LIMIT=1\n        ;;\n    b )\n        BUILD_DEBUG=\"1\"\n        ;;\n    c )\n        CLEAN_BUILD=1\n        ;;\n    d )\n        BUILD_DEPS=\"1\"\n        ;;\n    h ) usage\n        exit 0\n        ;;\n    i )\n        BUILD_IMAGE=\"1\"\n        ;;\n    r )\n\t    SKIP_RAM_CHECK=\"1\"\n\t;;\n    s )\n        BUILD_BAMBU_STUDIO=\"1\"\n        ;;\n    u )\n        UPDATE_LIB=\"1\"\n        ;;\n  esac\ndone\n\nif [ ${OPTIND} -eq 1 ]\nthen\n    usage\n    exit 0\nfi\n\nDISTRIBUTION=$(awk -F= '/^ID=/ {print $2}' /etc/os-release)\nVERSION=$(awk -F= '/^VERSION_ID=/ {print $2}' /etc/os-release)\n# treat ubuntu as debian\nif [ \"${DISTRIBUTION}\" == \"ubuntu\" ]\nthen\n    DISTRIBUTION=\"debian\"\nfi\nif [ ! -f ./linux.d/${DISTRIBUTION} ]\nthen\n    echo \"Your distribution does not appear to be currently supported by these build scripts\"\n    exit 1\nfi\nsource ./linux.d/${DISTRIBUTION}\n\necho \"FOUND_GTK3=${FOUND_GTK3}\"\nif [[ -z \"${FOUND_GTK3_DEV}\" ]]\nthen\n    echo \"Error, you must install the dependencies before.\"\n    echo \"Use option -u with sudo\"\n    exit 1\nfi\n\necho \"Changing date in version...\"\n{\n    # change date in version\n    sed -i \"s/+UNKNOWN/_$(date '+%F')/\" version.inc\n}\necho \"done\"\n\nif ! [[ -n \"${SKIP_RAM_CHECK}\" ]]\nthen\n    check_available_memory_and_disk\nfi\n\nif ! [[ -n \"${DISABLE_PARALLEL_LIMIT}\" ]]\nthen\n    FREE_MEM_GB=$(free -g -t | grep 'Mem' | rev | cut -d\" \" -f1 | rev)\n    MAX_THREADS=$((FREE_MEM_GB * 10 / 25))\n    if [ \"$MAX_THREADS\" -lt 1 ]; then\n        export CMAKE_BUILD_PARALLEL_LEVEL=1\n    else\n        export CMAKE_BUILD_PARALLEL_LEVEL=${MAX_THREADS}\n    fi\n    echo \"System free memory: ${FREE_MEM_GB} GB\"\n    echo \"Setting CMAKE_BUILD_PARALLEL_LEVEL: ${CMAKE_BUILD_PARALLEL_LEVEL}\"\nfi\n\nif [[ -n \"${BUILD_DEPS}\" ]]\nthen\n    echo \"Configuring dependencies...\"\n    BUILD_ARGS=\"-DDEP_WX_GTK3=ON\"\n    if [[ -n \"${CLEAN_BUILD}\" ]]\n    then\n        rm -fr deps/build\n    fi\n    if [ ! -d \"deps/build\" ]\n    then\n        mkdir deps/build\n    fi\n    if [[ -n \"${BUILD_DEBUG}\" ]]\n    then\n        # have to build deps with debug & release or the cmake won't find everything it needs\n        mkdir deps/build/release\n        cmake -S deps -B deps/build/release -G Ninja -DDESTDIR=\"../destdir\" ${BUILD_ARGS}\n        cmake --build deps/build/release\n        BUILD_ARGS=\"${BUILD_ARGS} -DCMAKE_BUILD_TYPE=Debug\"\n    fi\n\n    echo \"cmake -S deps -B deps/build -G Ninja ${BUILD_ARGS}\"\n    cmake -S deps -B deps/build -G Ninja ${BUILD_ARGS}\n    cmake --build deps/build\nfi\n\nif [[ -n \"${BUILD_BAMBU_STUDIO}\" ]]\nthen\n    echo \"Configuring BambuStudio...\"\n    if [[ -n \"${CLEAN_BUILD}\" ]]\n    then\n        rm -fr build\n    fi\n    BUILD_ARGS=\"\"\n    if [[ -n \"${FOUND_GTK3_DEV}\" ]]\n    then\n        BUILD_ARGS=\"-DSLIC3R_GTK=3\"\n    fi\n    if [[ -n \"${BUILD_DEBUG}\" ]]\n    then\n        BUILD_ARGS=\"${BUILD_ARGS} -DCMAKE_BUILD_TYPE=Debug -DBBL_INTERNAL_TESTING=1\"\n    else\n        BUILD_ARGS=\"${BUILD_ARGS} -DBBL_RELEASE_TO_PUBLIC=1 -DBBL_INTERNAL_TESTING=0\"\n    fi\n    echo -e \"cmake -S . -B build -G Ninja -DCMAKE_PREFIX_PATH=\"${PWD}/deps/build/destdir/usr/local\" -DSLIC3R_STATIC=1 ${BUILD_ARGS}\"\n    cmake -S . -B build -G Ninja \\\n        -DCMAKE_PREFIX_PATH=\"${PWD}/deps/build/destdir/usr/local\" \\\n        -DSLIC3R_STATIC=1 \\\n        ${BUILD_ARGS}\n    echo \"done\"\n    echo \"Building BambuStudio ...\"\n    cmake --build build --target BambuStudio\n    echo \"done\"\nfi\n\nif [[ -e ${ROOT}/build/src/BuildLinuxImage.sh ]]; then\n# Give proper permissions to script\nchmod 755 ${ROOT}/build/src/BuildLinuxImage.sh\n\necho \"[9/9] Generating Linux app...\"\n    pushd build\n        if [[ -n \"${BUILD_IMAGE}\" ]]\n        then\n            ${ROOT}/build/src/BuildLinuxImage.sh -i\n        fi\n    popd\necho \"done\"\nfi"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 29.373046875,
          "content": "cmake_minimum_required(VERSION 3.13)\nproject(BambuStudio)\n\ninclude(\"version.inc\")\ninclude(GNUInstallDirs)\ninclude(CMakeDependentOption)\n\nset(SLIC3R_RESOURCES_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/resources\")\nfile(TO_NATIVE_PATH \"${SLIC3R_RESOURCES_DIR}\" SLIC3R_RESOURCES_DIR_WIN)\n\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"No build type selected, default to Release\")\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Build type (default Release)\" FORCE)\nendif()\n\nif(DEFINED ENV{SLIC3R_STATIC})\n        set(SLIC3R_STATIC_INITIAL $ENV{SLIC3R_STATIC})\nelse()\n        if (MSVC OR MINGW OR APPLE)\n                set(SLIC3R_STATIC_INITIAL 1)\n        else()\n                set(SLIC3R_STATIC_INITIAL 0)\n        endif()\nendif()\n\noption(SLIC3R_STATIC \t\t\t\"Compile BambuStudio with static libraries (Boost, TBB, glew)\" ${SLIC3R_STATIC_INITIAL})\noption(SLIC3R_GUI    \t\t\t\"Compile BambuStudio with GUI components (OpenGL, wxWidgets)\" 1)\noption(SLIC3R_FHS               \"Assume BambuStudio is to be installed in a FHS directory structure\" 0)\noption(SLIC3R_WX_STABLE         \"Build against wxWidgets stable (3.0) as oppsed to dev (3.1) on Linux\" 0)\noption(SLIC3R_PROFILE \t\t\t\"Compile BambuStudio with an invasive Shiny profiler\" 0)\noption(SLIC3R_PCH               \"Use precompiled headers\" 1)\noption(SLIC3R_MSVC_COMPILE_PARALLEL \"Compile on Visual Studio in parallel\" 1)\noption(SLIC3R_MSVC_PDB          \"Generate PDB files on MSVC in Release mode\" 1)\noption(SLIC3R_PERL_XS           \"Compile XS Perl module and enable Perl unit and integration tests\" 0)\noption(SLIC3R_ASAN              \"Enable ASan on Clang and GCC\" 0)\n# If SLIC3R_FHS is 1 -> SLIC3R_DESKTOP_INTEGRATION is always 0, othrewise variable.\nCMAKE_DEPENDENT_OPTION(SLIC3R_DESKTOP_INTEGRATION \"Allow perfoming desktop integration during runtime\" 1 \"NOT SLIC3R_FHS\" 0)\n\nset(OPENVDB_FIND_MODULE_PATH \"\" CACHE PATH \"Path to OpenVDB installation's find modules.\")\n\nset(SLIC3R_GTK \"2\" CACHE STRING \"GTK version to use with wxWidgets on Linux\")\n\nset(IS_CROSS_COMPILE FALSE)\n\nset(FLATPAK FALSE CACHE BOOL \"Not copy FFMPEG file\")\n\n\nif (APPLE)\n    set(CMAKE_FIND_FRAMEWORK LAST)\n    set(CMAKE_FIND_APPBUNDLE LAST)\n    list(FIND CMAKE_OSX_ARCHITECTURES ${CMAKE_SYSTEM_PROCESSOR} _arch_idx)\n    if (CMAKE_OSX_ARCHITECTURES AND _arch_idx LESS 0)\n        set(IS_CROSS_COMPILE TRUE)\n    endif ()\n    if (CMAKE_MACOSX_BUNDLE)\n        set(CMAKE_INSTALL_RPATH @executable_path/../Frameworks)\n    endif()\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.15\" CACHE STRING \"Minimum OS X deployment version\" FORCE)\nelseif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    set(CMAKE_INSTALL_RPATH \"$ORIGIN\")\nendif ()\n\n# Proposal for C++ unit tests and sandboxes\noption(SLIC3R_BUILD_SANDBOXES   \"Build development sandboxes\" OFF)\noption(SLIC3R_BUILD_TESTS       \"Build unit tests\" OFF)\n\nif (IS_CROSS_COMPILE)\n    message(\"Detected cross compilation setup. Tests and encoding checks will be forcedly disabled!\")\n    set(SLIC3R_PERL_XS OFF CACHE BOOL \"\" FORCE)\n    set(SLIC3R_BUILD_TESTS OFF CACHE BOOL \"\" FORCE)\nendif ()\n\n# Print out the SLIC3R_* cache options\nget_cmake_property(_cache_vars CACHE_VARIABLES)\nlist (SORT _cache_vars)\nforeach (_cache_var ${_cache_vars})\n    if(\"${_cache_var}\" MATCHES \"^SLIC3R_\")\n        message(STATUS \"${_cache_var}: ${${_cache_var}}\")\n    endif ()\nendforeach()\n\nif (SLIC3R_GUI)\n    add_definitions(-DSLIC3R_GUI)\nendif ()\n\nif(SLIC3R_DESKTOP_INTEGRATION)\n    add_definitions(-DSLIC3R_DESKTOP_INTEGRATION)\nendif ()\n\nif (MSVC AND CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n    set(IS_CLANG_CL TRUE)\n\n    # clang-cl can interpret SYSTEM header paths if -imsvc is used\n    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX \"-imsvc\")\n\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall \\\n        -Wno-old-style-cast -Wno-reserved-id-macro -Wno-c++98-compat-pedantic\")\nelse ()\n    set(IS_CLANG_CL FALSE)\nendif ()\n\nif (MSVC)\n    if (SLIC3R_MSVC_COMPILE_PARALLEL AND NOT IS_CLANG_CL)\n           add_compile_options(/MP)\n    endif ()\n    # /bigobj (Increase Number of Sections in .Obj file)\n    # error C3859: virtual memory range for PCH exceeded; please recompile with a command line option of '-Zm90' or greater\n    # Generate symbols at every build target, even for the release.\n    add_compile_options(-bigobj -Zm520 /Zi)\n    # Disable STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17.\n    #FIXME Remove this line after eigen library adapts to the new C++17 adaptor rules.\n    add_compile_options(-D_SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING)\n    # Disable warnings on conversion from unsigned to signed (possible loss of data)\n    # C4244: 'conversion' conversion from 'type1' to 'type2', possible loss of data. An integer type is converted to a smaller integer type.\n    # C4267: The compiler detected a conversion from size_t to a smaller type.\n    add_compile_options(/wd4244 /wd4267)\nendif ()\n\n# https://github.com/SoftFever/OrcaSlicer/issues/2233\nif (${CMAKE_CXX_COMPILER_ID} STREQUAL \"AppleClang\" AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 15)\n    add_compile_definitions(BOOST_NO_CXX98_FUNCTION_BASE _HAS_AUTO_PTR_ETC=0)\nendif()\n\nif (MINGW)\n    add_compile_options(-Wa,-mbig-obj)\nendif ()\n\nif (NOT MSVC)\n    # ARMs (Raspberry PI) use an unsigned char by default. Let's make it consistent for BambuStudio on all platforms.\n    add_compile_options(-fsigned-char)\nendif ()\n\n# Display and check CMAKE_PREFIX_PATH\nmessage(STATUS \"SLIC3R_STATIC: ${SLIC3R_STATIC}\")\nif (NOT \"${CMAKE_PREFIX_PATH}\" STREQUAL \"\")\n    message(STATUS \"CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH} (from cache or command line)\")\n    set(PREFIX_PATH_CHECK ${CMAKE_PREFIX_PATH})\nelseif (NOT \"$ENV{CMAKE_PREFIX_PATH}\" STREQUAL \"\")\n    message(STATUS \"CMAKE_PREFIX_PATH: $ENV{CMAKE_PREFIX_PATH} (from environment)\")\n    set(PREFIX_PATH_CHECK $ENV{CMAKE_PREFIX_PATH})\nelse ()\n    message(STATUS \"CMAKE_PREFIX_PATH: (default)\")\nendif ()\n\nforeach (DIR ${PREFIX_PATH_CHECK})\n    if (NOT EXISTS \"${DIR}\")\n        message(WARNING \"CMAKE_PREFIX_PATH element doesn't exist: ${DIR}\")\n    endif ()\nendforeach ()\n\n# Add our own cmake module path.\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules/)\nmessage(STATUS \"PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}\")\nmessage(STATUS \"CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}\")\n\nenable_testing ()\n\n# Enable C++17 language standard.\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif(NOT WIN32)\n    # Add DEBUG flags to debug builds.\n    add_compile_options(\"$<$<CONFIG:DEBUG>:-DDEBUG>\")\nendif()\n\n# To be able to link libslic3r with the Perl XS module.\n# Once we get rid of Perl and libslic3r is linked statically, we can get rid of -fPIC\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# WIN10SDK_PATH is used to point CMake to the WIN10 SDK installation directory.\n# We pick it from environment if it is not defined in another way\nif(WIN32)\n    find_package(PkgConfig REQUIRED)\n    if(NOT DEFINED WIN10SDK_PATH)\n        if(DEFINED ENV{WIN10SDK_PATH})\n                set(WIN10SDK_PATH \"$ENV{WIN10SDK_PATH}\")\n        endif()\n    endif()\n    if(DEFINED WIN10SDK_PATH)\n        #BBS: modify win10sdk_path\n        if (EXISTS \"${WIN10SDK_PATH}/winrt/windows.graphics.printing3d.h\")\n            set(WIN10SDK_INCLUDE_PATH \"${WIN10SDK_PATH}\")\n        else()\n            message(\"WIN10SDK_PATH is invalid: ${WIN10SDK_PATH}\")\n            message(\"${WIN10SDK_PATH}/winrt/windows.graphics.printing3d.h was not found\")\n            message(\"STL fixing by the Netfabb service will not be compiled\")\n            unset(WIN10SDK_PATH)\n        endif()\n    else()\n        # Try to use the default Windows 10 SDK path.\n        set(WIN10SDK_INCLUDE_PATH \"$ENV{WindowsSdkDir}/Include/$ENV{WindowsSDKVersion}\")\n        if (NOT EXISTS \"${WIN10SDK_INCLUDE_PATH}/winrt/windows.graphics.printing3d.h\")\n            message(\"${WIN10SDK_INCLUDE_PATH}/winrt/windows.graphics.printing3d.h was not found\")\n            message(\"STL fixing by the Netfabb service will not be compiled\")\n            unset(WIN10SDK_INCLUDE_PATH)\n        endif()\n    endif()\n    if(WIN10SDK_INCLUDE_PATH)\n        message(\"Building with Win10 Netfabb STL fixing service support\")\n        add_definitions(-DHAS_WIN10SDK)\n        include_directories(\"${WIN10SDK_INCLUDE_PATH}\")\n    else()\n        message(\"Building without Win10 Netfabb STL fixing service support\")\n    endif()\nendif()\n\nif (APPLE)\n    message(\"OS X SDK Path: ${CMAKE_OSX_SYSROOT}\")\n    if (CMAKE_OSX_DEPLOYMENT_TARGET)\n        message(\"OS X Deployment Target: ${CMAKE_OSX_DEPLOYMENT_TARGET}\")\n    else ()\n        message(\"OS X Deployment Target: (default)\")\n    endif ()\nendif ()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    find_package(PkgConfig REQUIRED)\n\n    # Boost on Raspberry-Pi does not link to pthreads.\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads REQUIRED)\n\n    find_package(DBus REQUIRED)\n    include_directories(${DBUS_INCLUDE_DIRS})\nendif()\n\nif (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUXX)\n    # Adding -fext-numeric-literals to enable GCC extensions on definitions of quad float literals, which are required by Boost.\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fext-numeric-literals\" )\nendif()\n\nif (NOT MSVC AND (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\"))\n    if (NOT MINGW)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall\" )\n    endif ()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-reorder\" )\n\n    # On GCC and Clang, no return from a non-void function is a warning only. Here, we make it an error.\n    add_compile_options(-Werror=return-type)\n\n    # removes LOTS of extraneous Eigen warnings (GCC only supports it since 6.1)\n    # https://eigen.tuxfamily.org/bz/show_bug.cgi?id=1221\n    if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6.0)\n        add_compile_options(-Wno-ignored-attributes) # Tamas: Eigen include dirs are marked as SYSTEM\n    endif()\n\n    # Clang reports legacy OpenGL calls as deprecated. Turn off the warning for now\n    # to reduce the clutter, we know about this one. It should be reenabled after\n    # we finally get rid of the deprecated code.\n    if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n        add_compile_options(-Wno-deprecated-declarations)\n    endif()\n\n    #GCC generates loads of -Wunknown-pragmas when compiling igl. The fix is not easy due to a bug in gcc, see\n    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66943 or\n    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53431\n    # We will turn the warning of for GCC for now:\n    if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n        add_compile_options(-Wno-unknown-pragmas)\n    endif()\n\nendif()\n\nif (SLIC3R_ASAN)\n    # ASAN should be available on MSVC starting with Visual Studio 2019 16.9\n    # https://devblogs.microsoft.com/cppblog/address-sanitizer-for-msvc-now-generally-available/\n    add_compile_options(-fsanitize=address)\n\n    if (NOT MSVC)\n        add_compile_options(-fno-omit-frame-pointer)\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address\")\n        set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fsanitize=address\")\n    endif ()\n\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -lasan\")\n    endif ()\nendif ()\n\nif (APPLE)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Werror=partial-availability -Werror=unguarded-availability -Werror=unguarded-availability-new\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror=partial-availability -Werror=unguarded-availability -Werror=unguarded-availability-new\")\nendif ()\n\nif(MSVC)\n# 添加编译选项，忽略警告 C4305 （格式转换截断）\nadd_compile_options(/wd4305)\nendif()\n\n# Where all the bundled libraries reside?\nset(LIBDIR ${CMAKE_CURRENT_SOURCE_DIR}/src)\nset(LIBDIR_BIN ${CMAKE_CURRENT_BINARY_DIR}/src)\nmessage(STATUS \"LIBDIR: ${LIBDIR}\")\nmessage(STATUS \"LIBDIR_BIN: ${LIBDIR_BIN}\")\n\n# For the bundled boost libraries (boost::nowide)\ninclude_directories(${LIBDIR})\n# For generated header files\ninclude_directories(${LIBDIR_BIN}/platform)\n# For ligigl\ninclude_directories(${LIBDIR}/libigl)\n\nif(WIN32)\n    add_definitions(-D_USE_MATH_DEFINES -D_WIN32 -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)\n    if(MSVC)\n        # BOOST_ALL_NO_LIB: Avoid the automatic linking of Boost libraries on Windows. Rather rely on explicit linking.\n        add_definitions(-DBOOST_ALL_NO_LIB -DBOOST_USE_WINAPI_VERSION=0x601 -DBOOST_SYSTEM_USE_UTF8 )\n        # Force the source code encoding to UTF-8. See BambuStudio GH pull request #5583\n        add_compile_options(\"$<$<C_COMPILER_ID:MSVC>:/utf-8>\")\n        add_compile_options(\"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\")\n    endif(MSVC)\nendif(WIN32)\n\nadd_definitions(-DwxUSE_UNICODE -D_UNICODE -DUNICODE -DWXINTL_NO_GETTEXT_MACRO)\n\n# Disable unsafe implicit wxString to const char* / std::string and vice versa. This implicit conversion breaks the UTF-8 encoding quite often.\nadd_definitions(-DwxNO_UNSAFE_WXSTRING_CONV)\n\nif (SLIC3R_PROFILE)\n    message(\"BambuStudio will be built with a Shiny invasive profiler\")\n    add_definitions(-DSLIC3R_PROFILE)\nendif ()\n\n# Disable optimization even with debugging on.\nif (0)\n    message(STATUS \"Perl compiled without optimization. Disabling optimization for the BambuStudio build.\")\n    message(\"Old CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}\")\n    message(\"Old CMAKE_CXX_FLAGS_RELWITHDEBINFO: ${CMAKE_CXX_FLAGS_RELEASE}\")\n    message(\"Old CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS_RELEASE}\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"/MD /Od /Zi /EHsc /DWIN32 /DTBB_USE_ASSERT\")\n    set(CMAKE_C_FLAGS_RELEASE \"/MD /Od /Zi /DWIN32 /DTBB_USE_ASSERT\")\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"/MD /Od /Zi /EHsc /DWIN32 /DTBB_USE_ASSERT\")\n    set(CMAKE_C_FLAGS_RELWITHDEBINFO \"/MD /Od /Zi /DWIN32 /DTBB_USE_ASSERT\")\n    set(CMAKE_CXX_FLAGS \"/MD /Od /Zi /EHsc /DWIN32 /DTBB_USE_ASSERT\")\n    set(CMAKE_C_FLAGS \"/MD /Od /Zi /DWIN32 /DTBB_USE_ASSERT\")\nendif()\n\n# Find and configure boost\nif(SLIC3R_STATIC)\n    # Use static boost libraries.\n    set(Boost_USE_STATIC_LIBS ON)\n    # Use boost libraries linked statically to the C++ runtime.\n    # set(Boost_USE_STATIC_RUNTIME ON)\nendif()\n#set(Boost_DEBUG ON)\n# set(Boost_COMPILER \"-mgw81\")\n# boost::process was introduced first in version 1.64.0,\n# boost::beast::detail::base64 was introduced first in version 1.66.0\nset(MINIMUM_BOOST_VERSION \"1.66.0\")\nset(_boost_components \"system;filesystem;thread;log;locale;regex;chrono;atomic;date_time;iostreams\")\nfind_package(Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS ${_boost_components})\n\nadd_library(boost_libs INTERFACE)\nadd_library(boost_headeronly INTERFACE)\n\nif (APPLE)\n    # BOOST_ASIO_DISABLE_KQUEUE : prevents a Boost ASIO bug on OS X: https://svn.boost.org/trac/boost/ticket/5339\n    target_compile_definitions(boost_headeronly INTERFACE BOOST_ASIO_DISABLE_KQUEUE)\nendif()\n\nif(NOT SLIC3R_STATIC)\n    target_compile_definitions(boost_headeronly INTERFACE BOOST_LOG_DYN_LINK)\nendif()\n\nfunction(slic3r_remap_configs targets from_Cfg to_Cfg)\n    if(MSVC)\n        string(TOUPPER ${from_Cfg} from_CFG)\n\n        foreach(tgt ${targets})\n            if(TARGET ${tgt})\n                set_target_properties(${tgt} PROPERTIES MAP_IMPORTED_CONFIG_${from_CFG} ${to_Cfg})\n            endif()\n        endforeach()\n    endif()\nendfunction()\n\nif(TARGET Boost::system)\n    message(STATUS \"Boost::boost exists\")\n    target_link_libraries(boost_headeronly INTERFACE Boost::boost)\n\n    # Only from cmake 3.12\n    # list(TRANSFORM _boost_components PREPEND Boost:: OUTPUT_VARIABLE _boost_targets)\n    set(_boost_targets \"\")\n    foreach(comp ${_boost_components})\n        list(APPEND _boost_targets \"Boost::${comp}\")\n    endforeach()\n\n    target_link_libraries(boost_libs INTERFACE\n        boost_headeronly # includes the custom compile definitions as well\n        ${_boost_targets}\n        )\n    slic3r_remap_configs(\"${_boost_targets}\" RelWithDebInfo Release)\nelse()\n    target_include_directories(boost_headeronly INTERFACE ${Boost_INCLUDE_DIRS})\n    target_link_libraries(boost_libs INTERFACE boost_headeronly ${Boost_LIBRARIES})\nendif()\n\n\n\n# Find and configure intel-tbb\nif(SLIC3R_STATIC)\n    set(TBB_STATIC 1)\nendif()\nset(TBB_DEBUG 1)\nfind_package(TBB REQUIRED)\n# include_directories(${TBB_INCLUDE_DIRS})\n# add_definitions(${TBB_DEFINITIONS})\n# if(MSVC)\n#     # Suppress implicit linking of the TBB libraries by the Visual Studio compiler.\n#     add_definitions(-D__TBB_NO_IMPLICIT_LINKAGE)\n# endif()\n# The Intel TBB library will use the std::exception_ptr feature of C++11.\n# add_definitions(-DTBB_USE_CAPTURED_EXCEPTION=0)\n\nfind_package(OpenSSL REQUIRED)\nif (APPLE)\nfind_package(CURL CONFIG REQUIRED)\nelse()\nfind_package(CURL REQUIRED)\nendif()\n\nadd_library(libcurl INTERFACE)\ntarget_link_libraries(libcurl INTERFACE CURL::libcurl)\n\nfind_package(ZLIB REQUIRED)\ntarget_link_libraries(libcurl INTERFACE ZLIB::ZLIB)\n\n# Fixing curl's cmake config script bugs\nif (NOT WIN32)\n    # Required by libcurl\n    #find_package(ZLIB REQUIRED)\n    #target_link_libraries(libcurl INTERFACE ZLIB::ZLIB)\n    #find_package(Libssh2 REQUIRED)\n    #target_link_libraries(libcurl INTERFACE Libssh2::libssh2)\nelse()\n    target_link_libraries(libcurl INTERFACE crypt32)\nendif()\n\nif (SLIC3R_STATIC AND NOT SLIC3R_STATIC_EXCLUDE_CURL)\n    if (NOT APPLE)\n        # libcurl is always linked dynamically to the system libcurl on OSX.\n        # On other systems, libcurl is linked statically if SLIC3R_STATIC is set.\n        target_compile_definitions(libcurl INTERFACE CURL_STATICLIB)\n    endif()\n    if (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        # As of now, our build system produces a statically linked libcurl,\n        # which links the OpenSSL library dynamically.\n        find_package(OpenSSL REQUIRED)\n        message(\"OpenSSL include dir: ${OPENSSL_INCLUDE_DIR}\")\n        message(\"OpenSSL libraries: ${OPENSSL_LIBRARIES}\")\n        target_include_directories(libcurl INTERFACE ${OPENSSL_INCLUDE_DIR})\n        target_link_libraries(libcurl INTERFACE ${OPENSSL_LIBRARIES})\n    endif()\nendif()\n\n## OPTIONAL packages\n\n# Find eigen3 or use bundled version\nif (NOT SLIC3R_STATIC)\n    find_package(Eigen3 3.3)\nendif ()\nif (NOT EIGEN3_FOUND)\n    set(EIGEN3_FOUND 1)\n    set(EIGEN3_INCLUDE_DIR ${LIBDIR}/eigen/)\nendif ()\ninclude_directories(BEFORE SYSTEM ${EIGEN3_INCLUDE_DIR})\n\n# Find expat or use bundled version\n# Always use the system libexpat on Linux.\n\nfind_package(EXPAT)\n\nif (NOT EXPAT_FOUND)\n    add_library(expat STATIC\n        ${LIBDIR}/expat/xmlparse.c\n        ${LIBDIR}/expat/xmlrole.c\n        ${LIBDIR}/expat/xmltok.c\n    )\n    set(EXPAT_FOUND 1)\n    set(EXPAT_INCLUDE_DIRS ${LIBDIR}/expat/)\n    set(EXPAT_LIBRARIES expat)\nendif ()\n\nfind_package(PNG REQUIRED)\n\nset(OpenGL_GL_PREFERENCE \"LEGACY\")\nfind_package(OpenGL REQUIRED)\n\n# Find glew or use bundled version\nif (SLIC3R_STATIC AND NOT SLIC3R_STATIC_EXCLUDE_GLEW)\n    set(GLEW_USE_STATIC_LIBS ON)\n    set(GLEW_VERBOSE ON)\nendif()\n\nfind_package(GLEW REQUIRED)\n\nfind_package(glfw3 REQUIRED)\n\n# Find the Cereal serialization library\nfind_package(cereal REQUIRED)\n\n# l10n\nset(L10N_DIR \"${SLIC3R_RESOURCES_DIR}/i18n\")\nset(BBL_L18N_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/bbl/i18n\")\nadd_custom_target(gettext_make_pot\n    COMMAND xgettext --keyword=L --keyword=_L --keyword=_u8L --keyword=L_CONTEXT:1,2c --keyword=_L_PLURAL:1,2 --add-comments=TRN --from-code=UTF-8 --no-location --debug --boost\n        -f \"${BBL_L18N_DIR}/list.txt\"\n        -o \"${BBL_L18N_DIR}/BambuStudio.pot\"\n\tCOMMAND hintsToPot ${SLIC3R_RESOURCES_DIR} ${BBL_L18N_DIR}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    COMMENT \"Generate pot file from strings in the source tree\"\n)\nadd_custom_target(gettext_merge_po_with_pot\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    COMMENT \"Merge localization po with new generted pot file\"\n)\nfile(GLOB BBL_L10N_PO_FILES \"${BBL_L18N_DIR}/*/BambuStudio*.po\")\nforeach(po_file ${BBL_L10N_PO_FILES})\n    GET_FILENAME_COMPONENT(po_dir \"${po_file}\" DIRECTORY)\n    SET(po_new_file \"${po_dir}/BambuStudio_.po\")\n    add_custom_command(\n        TARGET gettext_merge_po_with_pot PRE_BUILD\n        COMMAND msgmerge -N -o ${po_file} ${po_file} \"${BBL_L18N_DIR}/BambuStudio.pot\"\n        DEPENDS ${po_file}\n    )\nendforeach()\nadd_custom_target(gettext_po_to_mo\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    COMMENT \"Generate localization po files (binary) from mo files (texts)\"\n)\nfile(GLOB L10N_PO_FILES \"${BBL_L18N_DIR}/*/BambuStudio*.po\")\nforeach(po_file ${BBL_L10N_PO_FILES})\n    GET_FILENAME_COMPONENT(SECOND_FOLDER_ABSOLUTE ${po_file} DIRECTORY)\n    string(REGEX REPLACE \".*/(.*)\" \"\\\\1\" po_dir \"${SECOND_FOLDER_ABSOLUTE}\" )\n    SET(mo_file \"${L10N_DIR}/${po_dir}/BambuStudio.mo\")\n    add_custom_command(\n        TARGET gettext_po_to_mo PRE_BUILD\n        COMMAND msgfmt ARGS --check-format -o ${mo_file} ${po_file}\n        #COMMAND msgfmt ARGS --check-compatibility -o ${mo_file} ${po_file}\n        DEPENDS ${po_file}\n    )\nendforeach()\n\n# copy pt-BR/BamabuStudio.mo to pt_br/\nSET(PT_BR \"${L10N_DIR}/pt-BR/BambuStudio.mo\")\nSET(PT_BR_DST \"${L10N_DIR}/pt_br/\")\nadd_custom_command(\n    TARGET gettext_po_to_mo POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PT_BR} ${PT_BR_DST}\n)\n\nfind_package(NLopt 1.4 REQUIRED)\n\n\nif(SLIC3R_STATIC)\n    set(OPENVDB_USE_STATIC_LIBS ON)\n    set(USE_BLOSC TRUE)\nendif ()\n\nfind_package(OpenVDB 5.0 COMPONENTS openvdb)\nif(OpenVDB_FOUND)\n    slic3r_remap_configs(IlmBase::Half RelWithDebInfo Release)\n    slic3r_remap_configs(Blosc::blosc RelWithDebInfo Release)\nelse ()\n    message(FATAL_ERROR \"OpenVDB could not be found with the bundled find module. \"\n                   \"You can try to specify the find module location of your \"\n                   \"OpenVDB installation with the OPENVDB_FIND_MODULE_PATH cache variable.\")\nendif ()\n\n\nset(TOP_LEVEL_PROJECT_DIR ${PROJECT_SOURCE_DIR})\nfunction(bambustudio_copy_dlls target config postfix output_dlls)\n    if (\"${CMAKE_SIZEOF_VOID_P}\" STREQUAL \"8\")\n        set(_bits 64)\n    elseif (\"${CMAKE_SIZEOF_VOID_P}\" STREQUAL \"4\")\n        set(_bits 32)\n    endif ()\n\n    get_property(_is_multi GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n    get_target_property(_alt_out_dir ${target} RUNTIME_OUTPUT_DIRECTORY)\n\n    if (_alt_out_dir)\n        set (_out_dir \"${_alt_out_dir}\")\n        message (\"set out_dir to _alt_out_dir: ${_out_dir}\")\n    elseif (_is_multi)\n        set(_out_dir \"${CMAKE_CURRENT_BINARY_DIR}/${config}\")\n        message (\"set out_dir to CMAKE_CURRENT_BINARY_DIR/config: ${_out_dir}\")\n    else ()\n        set(_out_dir \"${CMAKE_CURRENT_BINARY_DIR}\")\n        message (\"set out_dir to CMAKE_CURRENT_BINARY_DIR: ${_out_dir}\")\n    endif ()\n\n    file(COPY ${TOP_LEVEL_PROJECT_DIR}/deps/GMP/gmp/lib/win${_bits}/libgmp-10.dll\n            ${TOP_LEVEL_PROJECT_DIR}/deps/MPFR/mpfr/lib/win${_bits}/libmpfr-4.dll\n            ${TOP_LEVEL_PROJECT_DIR}/deps/WebView2/lib/win${_bits}/WebView2Loader.dll\n        DESTINATION ${_out_dir})\n\n    file(COPY ${CMAKE_PREFIX_PATH}/bin/occt/TKBO.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKBRep.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKCAF.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKCDF.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKernel.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKG2d.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKG3d.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKGeomAlgo.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKGeomBase.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKHLR.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKLCAF.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKMath.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKMesh.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKPrim.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKService.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKShHealing.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKSTEP.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKSTEP209.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKSTEPAttr.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKSTEPBase.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKTopAlgo.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKV3d.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKVCAF.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKXCAF.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKXDESTEP.dll\n            ${CMAKE_PREFIX_PATH}/bin/occt/TKXSBase.dll\n            ${CMAKE_PREFIX_PATH}/bin/freetype.dll\n            ${CMAKE_PREFIX_PATH}/bin/avcodec-61.dll\n            ${CMAKE_PREFIX_PATH}/bin/swresample-5.dll\n            ${CMAKE_PREFIX_PATH}/bin/swscale-8.dll\n            ${CMAKE_PREFIX_PATH}/bin/avutil-59.dll\n         DESTINATION ${_out_dir})\n\n    set(${output_dlls}\n        ${_out_dir}/libgmp-10.dll\n        ${_out_dir}/libmpfr-4.dll\n        ${_out_dir}/WebView2Loader.dll\n\n        ${_out_dir}/TKBO.dll\n        ${_out_dir}/TKBRep.dll\n        ${_out_dir}/TKCAF.dll\n        ${_out_dir}/TKCDF.dll\n        ${_out_dir}/TKernel.dll\n        ${_out_dir}/TKG2d.dll\n        ${_out_dir}/TKG3d.dll\n        ${_out_dir}/TKGeomAlgo.dll\n        ${_out_dir}/TKGeomBase.dll\n        ${_out_dir}/TKHLR.dll\n        ${_out_dir}/TKLCAF.dll\n        ${_out_dir}/TKMath.dll\n        ${_out_dir}/TKMesh.dll\n        ${_out_dir}/TKPrim.dll\n        ${_out_dir}/TKService.dll\n        ${_out_dir}/TKShHealing.dll\n        ${_out_dir}/TKSTEP.dll\n        ${_out_dir}/TKSTEP209.dll\n        ${_out_dir}/TKSTEPAttr.dll\n        ${_out_dir}/TKSTEPBase.dll\n        ${_out_dir}/TKTopAlgo.dll\n        ${_out_dir}/TKV3d.dll\n        ${_out_dir}/TKVCAF.dll\n        ${_out_dir}/TKXCAF.dll\n        ${_out_dir}/TKXDESTEP.dll\n        ${_out_dir}/TKXSBase.dll\n\n        ${_out_dir}/freetype.dll\n        ${_out_dir}/avcodec-61.dll\n        ${_out_dir}/swresample-5.dll\n        ${_out_dir}/swscale-8.dll\n        ${_out_dir}/avutil-59.dll\n        PARENT_SCOPE\n    )\n\nendfunction()\n\nfunction(bambustudio_copy_sos target config postfix output_sos)\n\n    set(_out_dir \"${CMAKE_CURRENT_BINARY_DIR}\")\n    message (\"set out_dir to CMAKE_CURRENT_BINARY_DIR: ${_out_dir}\")\n\n    file(COPY ${CMAKE_PREFIX_PATH}/lib/libavcodec.so\n            ${CMAKE_PREFIX_PATH}/lib/libavcodec.so.61\n            ${CMAKE_PREFIX_PATH}/lib/libavcodec.so.61.3.100\n            ${CMAKE_PREFIX_PATH}/lib/libavutil.so\n            ${CMAKE_PREFIX_PATH}/lib/libavutil.so.59\n            ${CMAKE_PREFIX_PATH}/lib/libavutil.so.59.8.100\n            ${CMAKE_PREFIX_PATH}/lib/libswscale.so\n            ${CMAKE_PREFIX_PATH}/lib/libswscale.so.8\n            ${CMAKE_PREFIX_PATH}/lib/libswscale.so.8.1.100\n            ${CMAKE_PREFIX_PATH}/lib/libswresample.so\n            ${CMAKE_PREFIX_PATH}/lib/libswresample.so.5\n            ${CMAKE_PREFIX_PATH}/lib/libswresample.so.5.1.100\n         DESTINATION ${_out_dir})\n\n    set(${output_dlls}\n        ${_out_dir}/libavcodec.so\n        ${_out_dir}/libavcodec.so.61\n        ${_out_dir}/libavcodec.so.61.3.100\n        ${_out_dir}/libavutil.so\n        ${_out_dir}/libavutil.so.59\n        ${_out_dir}/libavutil.so.59.8.100\n        ${_out_dir}/libswscale.so\n        ${_out_dir}/libswscale.so.8\n        ${_out_dir}/libswscale.so.8.1.100\n        ${_out_dir}/libswresample.so\n        ${_out_dir}/libswresample.so.5\n        ${_out_dir}/libswresample.so.5.1.100\n        PARENT_SCOPE\n    )\nendfunction()\n\n# libslic3r, BambuStudio GUI and the BambuStudio executable.\nadd_subdirectory(src)\nset_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT BambuStudio_app_gui)\n\nadd_dependencies(gettext_make_pot hintsToPot)\n\n# Perl bindings, currently only used for the unit / integration tests of libslic3r.\n# Also runs the unit / integration tests.\n#FIXME Port the tests into C++ to finally get rid of the Perl!\nif (SLIC3R_PERL_XS)\n    add_subdirectory(xs)\nendif ()\n\nif(SLIC3R_BUILD_SANDBOXES)\n    add_subdirectory(sandboxes)\nendif()\n\nif(SLIC3R_BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n\nif (NOT WIN32 AND NOT APPLE)\n    set(SLIC3R_APP_CMD \"bambu-studio\")\n    configure_file(${LIBDIR}/platform/unix/build_appimage.sh.in ${CMAKE_CURRENT_BINARY_DIR}/build_appimage.sh @ONLY)\nendif()\n\noption(BUILD_BBS_TEST_TOOLS          \"Build bbs test tools\" OFF)\nif(BUILD_BBS_TEST_TOOLS)\n    add_subdirectory(bbs_test_tools)\nendif()\n\n\n# Resources install target, configure fhs.hpp on UNIX\nif (WIN32)\n    install(DIRECTORY \"${SLIC3R_RESOURCES_DIR}/\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/resources\")\nelseif (SLIC3R_FHS)\n    # CMAKE_INSTALL_FULL_DATAROOTDIR: read-only architecture-independent data root (share)\n    set(SLIC3R_FHS_RESOURCES \"${CMAKE_INSTALL_FULL_DATAROOTDIR}/BambuStudio\")\n    install(DIRECTORY ${SLIC3R_RESOURCES_DIR}/ DESTINATION ${SLIC3R_FHS_RESOURCES}\n        PATTERN \"*/udev\" EXCLUDE\n    )\n    install(FILES src/platform/unix/BambuStudio.desktop DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)\n    foreach(SIZE 32 128 192)\n        install(FILES ${SLIC3R_RESOURCES_DIR}/images/BambuStudio_${SIZE}px.png\n            DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/${SIZE}x${SIZE}/apps RENAME BambuStudio.png\n        )\n    endforeach()\nelseif (CMAKE_MACOSX_BUNDLE)\n    install(DIRECTORY \"${SLIC3R_RESOURCES_DIR}/\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/BambuStudio.app/Contents/resources\")\nelse ()\n    install(FILES src/platform/unix/BambuStudio.desktop DESTINATION ${CMAKE_INSTALL_PREFIX}/resources/applications)\n    install(DIRECTORY \"${SLIC3R_RESOURCES_DIR}/\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/resources\")\nendif ()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND NOT FLATPAK)\n    set(LIBRARY_FILES\n    ${LIBDIR_BIN}/libavcodec.so.61\n    ${LIBDIR_BIN}/libavcodec.so.61.3.100\n    ${LIBDIR_BIN}/libavutil.so.59\n    ${LIBDIR_BIN}/libavutil.so.59.8.100\n    ${LIBDIR_BIN}/libswresample.so.5\n    ${LIBDIR_BIN}/libswresample.so.5.1.100\n    ${LIBDIR_BIN}/libswscale.so.8\n    ${LIBDIR_BIN}/libswscale.so.8.1.100\n    )\n    install(FILES ${LIBRARY_FILES} DESTINATION \"${CMAKE_INSTALL_PREFIX}/bin\")\nendif ()\n\nconfigure_file(${LIBDIR}/platform/unix/fhs.hpp.in ${LIBDIR_BIN}/platform/unix/fhs.hpp)\n"
        },
        {
          "name": "Containerfile",
          "type": "blob",
          "size": 2.625,
          "content": "# Build Bambu Slicer in a container\n#\n# Build an AppImage using rootless Podman (refer to https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md):\n# rm -rf build; podman build . -t bambu-studio-builder && podman run --rm localhost/bambu-studio-builder /bin/bash -c 'tar -c $(find build | grep ubu64.AppImage | head -1)' | tar -xv\n#\n# Troubleshooting the build container:\n# podman run -it --name bambu-studio-builder localhost/bambu-studio-builder /bin/bash\n#\n# Debugging the resulting AppImage:\n#   1) Install `gdb`\n#   2) In a terminal in the same directory as the AppImage, start it with following:\n#      echo -e \"run\\nbt\\nquit\" | gdb ./BambuStudio_ubu64.AppImage\n#   3) Find related issue using backtrace output for clues and add backtrace to it on github\n#\n# Docker alternative AppImage build syntax (use this if you can't install podman):\n# rm -rf build; docker build . --file Containerfile -t bambu-studio-builder; docker run --rm bambu-studio-builder /bin/bash -c 'tar -c $(find build | grep ubu64.AppImage | head -1)' | tar -xv\n#\n#\n# TODO: bind mount BambuStudio to inside the container instead of COPY to enable faster rebuilds during dev work.\n\nFROM docker.io/ubuntu:22.04\nLABEL maintainer \"DeftDawg <DeftDawg@gmail.com>\"\nARG BUILD_LINUX_EXTRA_ARGS=\"\"\n\n# Disable interactive package configuration\nRUN apt-get update && \\\n    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Add a deb-src\nRUN echo deb-src http://archive.ubuntu.com/ubuntu \\\n    $(cat /etc/*release | grep VERSION_CODENAME | cut -d= -f2) main universe>> /etc/apt/sources.list \n\nRUN apt-get update && apt-get install  -y \\\n    git \\\n    build-essential \\\n    autoconf pkgconf m4 \\\n    cmake extra-cmake-modules \\\n    libglu1-mesa-dev libglu1-mesa-dev \\\n    libwayland-dev libxkbcommon-dev wayland-protocols \\\n    eglexternalplatform-dev libglew-dev \\\n    libgtk-3-dev \\\n    libdbus-1-dev \\\n    libcairo2-dev \\\n    libgtk-3-dev libwebkit2gtk-4.0-dev \\\n    libsoup2.4-dev \\\n    libgstreamer1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-base1.0-dev libgstreamerd-3-dev \\\n    libosmesa6-dev \\\n    libssl3 libssl-dev libcurl4-openssl-dev libsecret-1-dev \\\n    libudev-dev \\\n    curl \\\n    wget \\\n    file \\\n    sudo\n\nCOPY ./ BambuStudio\n\nWORKDIR BambuStudio\n\n# These can run together, but we run them seperate for podman caching\n# Update System dependencies\nRUN ./BuildLinux.sh -u ${BUILD_LINUX_EXTRA_ARGS}\n\n# Build dependencies in ./deps\nRUN ./BuildLinux.sh -d ${BUILD_LINUX_EXTRA_ARGS}\n\n# Build slic3r\nRUN ./BuildLinux.sh -s ${BUILD_LINUX_EXTRA_ARGS}\n\n# Build AppImage\nENV container podman\nRUN ./BuildLinux.sh -i ${BUILD_LINUX_EXTRA_ARGS}\n"
        },
        {
          "name": "DockerBuild.sh",
          "type": "blob",
          "size": 0.490234375,
          "content": "#!/bin/bash\nPROJECT_ROOT=$(cd -P -- \"$(dirname -- \"$0\")\" && printf '%s\\n' \"$(pwd -P)\")\n\nset -x\n\n# Wishlist hint:  For developers, creating a Docker Compose \n# setup with persistent volumes for the build & deps directories\n# would speed up recompile times significantly.  For end users,\n# the simplicity of a single Docker image and a one-time compilation\n# seems better.\ndocker build -t bambustudio \\\n  --build-arg USER=$USER \\\n  --build-arg UID=$(id -u) \\\n  --build-arg GID=$(id -g) \\\n  $PROJECT_ROOT\n"
        },
        {
          "name": "DockerRun.sh",
          "type": "blob",
          "size": 1.0107421875,
          "content": "#!/bin/bash\nset -x\n# Just in case, here's some other things that might help:\n#  Force the container's hostname to be the same as your workstation\n#  -h $HOSTNAME \\\n#  If there's problems with the X display, try this\n#  -v /tmp/.X11-unix:/tmp/.X11-unix \\\ndocker run \\\n  `# Use the hosts networking.  Printer wifi and also dbus communication` \\\n  --net=host \\\n  `# Some X installs will not have permissions to talk to sockets for shared memory` \\\n  --ipc host \\\n  `# Run as your workstations username to keep permissions the same` \\\n  -u $USER \\\n  `# Bind mount your home directory into the container for loading/saving files` \\\n  -v $HOME:/home/$USER \\\n  `# Pass the X display number to the container` \\\n  -e DISPLAY=$DISPLAY \\\n  `# It seems that libGL and dbus things need privileged mode` \\\n  --privileged=true \\\n  `# Attach tty for running bambu with command line things` \\\n  -ti \\\n  `# Remove container when it is finished` \\\n  --rm \\\n  `# Pass all parameters from this script to the bambu ENTRYPOINT binary` \\\n  bambustudio $* \n  \n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.3427734375,
          "content": "FROM docker.io/ubuntu:22.04\nLABEL maintainer \"DeftDawg <DeftDawg@gmail.com>\"\n\n# Disable interactive package configuration\nRUN apt-get update && \\\n    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Add a deb-src\nRUN echo deb-src http://archive.ubuntu.com/ubuntu \\\n    $(cat /etc/*release | grep VERSION_CODENAME | cut -d= -f2) main universe>> /etc/apt/sources.list \n\nRUN apt-get update && apt-get install  -y \\\n    autoconf \\\n    build-essential \\\n    cmake \\\n    curl \\\n    eglexternalplatform-dev \\\n    extra-cmake-modules \\\n    file \\\n    git \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-libav \\\n    libcairo2-dev \\\n    libcurl4-openssl-dev \\\n    libdbus-1-dev \\\n    libglew-dev \\ \n    libglu1-mesa-dev \\\n    libglu1-mesa-dev \\\n    libgstreamer1.0-dev \\\n    libgstreamerd-3-dev \\ \n    libgstreamer-plugins-base1.0-dev \\\n    libgstreamer-plugins-good1.0-dev \\\n    libgtk-3-dev \\\n    libgtk-3-dev \\\n    libosmesa6-dev \\\n    libsecret-1-dev \\\n    libsoup2.4-dev \\\n    libssl3 \\\n    libssl-dev \\\n    libudev-dev \\\n    libwayland-dev \\\n    libwebkit2gtk-4.0-dev \\\n    libxkbcommon-dev \\\n    locales \\\n    locales-all \\\n    m4 \\\n    pkgconf \\\n    sudo \\\n    wayland-protocols \\\n    wget \n\n# Change your locale here if you want.  See the output\n# of `locale -a` to pick the correct string formatting.\nENV LC_ALL=en_US.utf8\nRUN locale-gen $LC_ALL\n\n# Set this so that Bambu Studio doesn't complain about\n# the CA cert path on every startup\nENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\n\nCOPY ./ BambuStudio\n\nWORKDIR BambuStudio\n\n# These can run together, but we run them seperate for podman caching\n# Update System dependencies\nRUN ./BuildLinux.sh -u\n\n# Build dependencies in ./deps\nRUN ./BuildLinux.sh -d\n\n# Build slic3r\nRUN ./BuildLinux.sh -s\n\n# Build AppImage\nENV container podman\nRUN ./BuildLinux.sh -i\n\n# It's easier to run Bambu Studio as the same username,\n# UID and GID as your workstation.  Since we bind mount\n# your home directory into the container, it's handy\n# to keep permissions the same.  Just in case, defaults\n# are root.\nSHELL [\"/bin/bash\", \"-l\", \"-c\"]\nARG USER=root\nARG UID=0\nARG GID=0\nRUN [[ \"$UID\" != \"0\" ]] \\\n  && groupadd -f -g $GID $USER \\\n  && useradd -u $UID -g $GID $USER\n\n# Using an entrypoint instead of CMD because the binary\n# accepts several command line arguments.\nENTRYPOINT [\"/BambuStudio/build/package/bin/bambu-studio\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7109375,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.263671875,
          "content": "![image](https://user-images.githubusercontent.com/106916061/179006347-497d24c0-9bd6-45b7-8c49-d5cc8ecfe5d7.png)\n# BambuStudio\nBambu Studio is a cutting-edge, feature-rich slicing software.  \nIt contains project-based workflows, systematically optimized slicing algorithms, and an easy-to-use graphic interface, bringing users an incredibly smooth printing experience.\n\nPrebuilt Windows, macOS 64-bit and Linux releases are available through the [github releases page](https://github.com/bambulab/BambuStudio/releases/).\n\nBambu Studio is based on [PrusaSlicer](https://github.com/prusa3d/PrusaSlicer) by Prusa Research, which is from [Slic3r](https://github.com/Slic3r/Slic3r) by Alessandro Ranellucci and the RepRap community.\n\nSee the [wiki](https://github.com/bambulab/BambuStudio/wiki) and the [documentation directory](https://github.com/bambulab/BambuStudio/tree/master/doc) for more informations.\n\n# What are Bambu Studio's main features?\nKey features are:\n- Basic slicing features & GCode viewer\n- Multiple plates management\n- Remote control & monitoring\n- Auto-arrange objects\n- Auto-orient objects\n- Hybrid/Tree/Normal support types, Customized support\n- multi-material printing and rich painting tools\n- multi-platform (Win/Mac/Linux) support\n- Global/Object/Part level slicing parameters\n\nOther major features are:\n- Advanced cooling logic controlling fan speed and dynamic print speed\n- Auto brim according to mechanical analysis\n- Support arc path(G2/G3)\n- Support STEP format\n- Assembly & explosion view\n- Flushing transition-filament into infill/object during filament change\n\n# How to compile\nFollowing platforms are currently supported to compile:\n- Windows 64-bit, [Compile Guide](https://github.com/bambulab/BambuStudio/wiki/Windows-Compile-Guide)\n- Mac 64-bit, [Compile Guide](https://github.com/bambulab/BambuStudio/wiki/Mac-Compile-Guide)\n- Linux, [Compile Guide](https://github.com/bambulab/BambuStudio/wiki/Linux-Compile-Guide)\n  - currently we only provide linux appimages on [github releases](https://github.com/bambulab/BambuStudio/releases) for Ubuntu/Fedora, and a [flathub version](https://flathub.org/apps/com.bambulab.BambuStudio) can be used for all the linux platforms\n\n# Report issue\nYou can add an issue to the [github tracker](https://github.com/bambulab/BambuStudio/issues) if **it isn't already present.**\n\n# License\nBambu Studio is licensed under the GNU Affero General Public License, version 3. Bambu Studio is based on PrusaSlicer by PrusaResearch.\n\nPrusaSlicer is licensed under the GNU Affero General Public License, version 3. PrusaSlicer is owned by Prusa Research. PrusaSlicer is originally based on Slic3r by Alessandro Ranellucci.\n\nSlic3r is licensed under the GNU Affero General Public License, version 3. Slic3r was created by Alessandro Ranellucci with the help of many other contributors.\n\nThe GNU Affero General Public License, version 3 ensures that if you use any part of this software in any way (even behind a web server), your software must be released under the same license.\n\nThe bambu networking plugin is based on non-free libraries. It is optional to the Bambu Studio and provides extended networking functionalities for users.\nBy default, after installing Bambu Studio without the networking plugin, you can initiate printing through the SD card after slicing is completed.\n\n"
        },
        {
          "name": "bbl",
          "type": "tree",
          "content": null
        },
        {
          "name": "bbs_test_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_win.bat",
          "type": "blob",
          "size": 19.1044921875,
          "content": "@setlocal disableDelayedExpansion enableExtensions\n@IF \"%PS_ECHO_ON%\" NEQ \"\" (echo on) ELSE (echo off)\n@GOTO :MAIN\n:HELP\n@ECHO.\n@ECHO Performs initial build or rebuild of the app (build) and deps (build/deps).\n@ECHO Default options are determined from build directories and system state.\n@ECHO.\n@ECHO Usage: build_win [-ARCH ^<arch^>] [-CONFIG ^<config^>] [-VERSION ^<version^>]\n@ECHO                  [-PRODUCT ^<product^>] [-DESTDIR ^<directory^>]\n@ECHO                  [-STEPS ^<all^|all-dirty^|app^|app-dirty^|deps^|deps-dirty^>]\n@ECHO                  [-RUN ^<console^|custom^|none^|viewer^|window^>]\n@ECHO.\n@ECHO  -a -ARCH      Target processor architecture\n@ECHO                Default: %PS_ARCH_HOST%\n@ECHO  -c -CONFIG    MSVC project config\n@ECHO                Default: %PS_CONFIG_DEFAULT%\n@ECHO  -v -VERSION   Major version number of MSVC installation to use for build\n@ECHO                Default: %PS_VERSION_SUPPORTED%\n@ECHO  -p -PRODUCT   Product ID of MSVC installation to use for build\n@ECHO                Default: %PS_PRODUCT_DEFAULT%\n@ECHO  -s -STEPS     Performs only the specified build steps:\n@ECHO                  all - clean and build deps and app\n@ECHO                  all-dirty - build deps and app without cleaning\n@ECHO                  app - clean and build main applications\n@ECHO                  app-dirty - build main applications without cleaning\n@ECHO                  deps - clean and build deps\n@ECHO                  deps-dirty - build deps without cleaning\n@ECHO                Default: %PS_STEPS_DEFAULT%\n@ECHO  -r -RUN       Specifies what to perform at the run step:\n@ECHO                  console - run and wait on bambu-studio-console.exe\n@ECHO                  custom - run and wait on your custom build/%PS_CUSTOM_RUN_FILE%\n@ECHO                  ide - open project in Visual Studio if not open (no wait)\n@ECHO                  none - run step does nothing\n@ECHO                  viewer - run bambu-gcodeviewer.exe (no wait)\n@ECHO                  window - run bambu-studio.exe (no wait)\n@ECHO                Default: none\n@ECHO  -d -DESTDIR   Deps destination directory\n@ECHO                Warning: Changing destdir path will not delete the old destdir.\n@ECHO                Default: %PS_DESTDIR_DEFAULT_MSG%\n@ECHO.\n@ECHO  Examples:\n@ECHO.\n@ECHO  Initial build:           build_win -d \"c:\\src\\BambuSlicer-deps\"\n@ECHO  Build post deps change:  build_win -s all\n@ECHO  App dirty build:         build_win\n@ECHO  App dirty build ^& run:   build_win -r console\n@ECHO  All clean build ^& run:   build_win -s all -r console -d \"deps\\build\\out_deps\"\n@ECHO.\nGOTO :END\n\n:MAIN\nREM Script constants\nSET START_TIME=%TIME%\nSET PS_START_DIR=%CD%\nSET PS_SOLUTION_NAME=BambuStudio\nSET PS_CHOICE_TIMEOUT=30\nSET PS_CUSTOM_RUN_FILE=custom_run.bat\nSET PS_DEPS_PATH_FILE_NAME=.DEPS_PATH.txt\nSET PS_DEPS_PATH_FILE=%~dp0deps\\build\\%PS_DEPS_PATH_FILE_NAME%\nSET PS_CONFIG_LIST=\"Debug;MinSizeRel;Release;RelWithDebInfo\"\n\nREM The officially supported toolchain version is 16 (Visual Studio 2019)\nREM TODO: Update versions after Boost gets rolled to 1.78 or later\nSET PS_VERSION_SUPPORTED=16\nSET PS_VERSION_EXCEEDED=17\nSET VSWHERE=%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe\nIF NOT EXIST \"%VSWHERE%\" SET VSWHERE=%ProgramFiles%\\Microsoft Visual Studio\\Installer\\vswhere.exe\nFOR /F \"tokens=4 USEBACKQ delims=.\" %%I IN (`\"%VSWHERE%\" -nologo -property productId`) DO SET PS_PRODUCT_DEFAULT=%%I\nIF \"%PS_PRODUCT_DEFAULT%\" EQU \"\" (\n    SET EXIT_STATUS=-1\n    @ECHO ERROR: No Visual Studio installation found. 1>&2\n    GOTO :HELP\n)\nREM Default to the latest supported version if multiple are available\nFOR /F \"tokens=1 USEBACKQ delims=.\" %%I IN (\n    `^\"\"%VSWHERE%\" -version \"[%PS_VERSION_SUPPORTED%,%PS_VERSION_EXCEEDED%)\" -latest -nologo -property catalog_buildVersion^\"`\n) DO SET PS_VERSION_SUPPORTED=%%I\n\nREM Probe build directories and system state for reasonable default arguments\npushd %~dp0\nSET PS_CONFIG=RelWithDebInfo\nSET PS_ARCH=%PROCESSOR_ARCHITECTURE:amd64=x64%\nCALL :TOLOWER PS_ARCH\nSET PS_RUN=none\nSET PS_DESTDIR=\nSET PS_VERSION=\nSET PS_PRODUCT=%PS_PRODUCT_DEFAULT%\nCALL :RESOLVE_DESTDIR_CACHE\n\nREM Set up parameters used by help menu\nSET EXIT_STATUS=0\nSET PS_CONFIG_DEFAULT=%PS_CONFIG%\nSET PS_ARCH_HOST=%PS_ARCH%\n(echo \" -help /help -h /h -? /? \")| findstr /I /C:\" %~1 \">nul && GOTO :HELP\n\nREM Parse arguments\nSET EXIT_STATUS=1\nSET PS_CURRENT_STEP=arguments\nSET PARSER_STATE=\nSET PARSER_FAIL=\nFOR %%I in (%*) DO CALL :PARSE_OPTION \"ARCH CONFIG DESTDIR STEPS RUN VERSION PRODUCT\" PARSER_STATE \"%%~I\"\nIF \"%PARSER_FAIL%\" NEQ \"\" (\n    @ECHO ERROR: Invalid switch: %PARSER_FAIL% 1>&2\n    GOTO :HELP\n)ELSE IF \"%PARSER_STATE%\" NEQ \"\" (\n    @ECHO ERROR: Missing parameter for: %PARSER_STATE% 1>&2\n    GOTO :HELP\n)\n\nREM Validate arguments\nSET PS_ASK_TO_CONTINUE=\nCALL :TOLOWER PS_ARCH\nSET PS_ARCH=%PS_ARCH:amd64=x64%\nCALL :PARSE_OPTION_VALUE %PS_CONFIG_LIST:;= % PS_CONFIG\nIF \"%PS_CONFIG%\" EQU \"\" GOTO :HELP\nREM RESOLVE_DESTDIR_CACHE must go after PS_ARCH and PS_CONFIG, but before PS STEPS\nCALL :RESOLVE_DESTDIR_CACHE\nIF \"%PS_STEPS%\" EQU \"\" SET PS_STEPS=%PS_STEPS_DEFAULT%\nCALL :PARSE_OPTION_VALUE \"all all-dirty deps-dirty deps app-dirty app app-cmake\" PS_STEPS\nIF \"%PS_STEPS%\" EQU \"\" GOTO :HELP\n(echo %PS_STEPS%)| findstr /I /C:\"dirty\">nul && SET PS_STEPS_DIRTY=1 || SET PS_STEPS_DIRTY=\nIF \"%PS_STEPS%\" EQU \"app-cmake\" SET PS_STEPS_DIRTY=1\nIF \"%PS_DESTDIR%\" EQU \"\" SET PS_DESTDIR=%PS_DESTDIR_CACHED%\nIF \"%PS_DESTDIR%\" EQU \"\" (\n    @ECHO ERROR: Parameter required: -DESTDIR 1>&2\n    GOTO :HELP\n)\nCALL :CANONICALIZE_PATH PS_DESTDIR \"%PS_START_DIR%\"\nIF \"%PS_DESTDIR%\" NEQ \"%PS_DESTDIR_CACHED%\" (\n    (echo \"all deps all-dirty deps-dirty\")| findstr /I /C:\"%PS_STEPS%\">nul || (\n        IF EXIST \"%PS_DESTDIR%\" (\n            @ECHO WARNING: DESTDIR does not match cache: 1>&2\n            @ECHO WARNING:  new: %PS_DESTDIR% 1>&2\n            @ECHO WARNING:  old: %PS_DESTDIR_CACHED% 1>&2\n            SET PS_ASK_TO_CONTINUE=1\n        ) ELSE (\n            @ECHO ERROR: Invalid parameter: DESTDIR=%PS_DESTDIR% 1>&2\n            GOTO :HELP\n        )\n    )\n)\nSET PS_DESTDIR_DEFAULT_MSG=\nCALL :PARSE_OPTION_VALUE \"console custom ide none viewer window\" PS_RUN\nIF \"%PS_RUN%\" EQU \"\" GOTO :HELP\nIF \"%PS_RUN%\" NEQ \"none\" IF \"%PS_STEPS:~0,4%\" EQU \"deps\" (\n    @ECHO ERROR: RUN=%PS_RUN% specified with STEPS=%PS_STEPS%\n    @ECHO ERROR: RUN=none is the only valid option for STEPS \"deps\" or \"deps-dirty\"\n    GOTO :HELP\n)\nIF DEFINED PS_VERSION (\n    SET /A PS_VERSION_EXCEEDED=%PS_VERSION% + 1\n) ELSE SET PS_VERSION=%PS_VERSION_SUPPORTED%\nSET MSVC_FILTER=-products Microsoft.VisualStudio.Product.%PS_PRODUCT% -version \"[%PS_VERSION%,%PS_VERSION_EXCEEDED%)\"\nFOR /F \"tokens=* USEBACKQ\" %%I IN (`^\"\"%VSWHERE%\" %MSVC_FILTER% -nologo -property installationPath^\"`) DO SET MSVC_DIR=%%I\nIF NOT EXIST \"%MSVC_DIR%\" (\n    @ECHO ERROR: Compatible Visual Studio installation not found. 1>&2\n    GOTO :HELP\n)\nREM Give the user a chance to cancel if we found something odd.\nIF \"%PS_ASK_TO_CONTINUE%\" EQU \"\" GOTO :BUILD_ENV\n@ECHO.\n@ECHO Unexpected parameters detected. Build paused for %PS_CHOICE_TIMEOUT% seconds.\nchoice /T %PS_CHOICE_TIMEOUT% /C YN /D N /M \"Continue\"\nIF %ERRORLEVEL% NEQ 1 GOTO :HELP\n\nREM Set up MSVC environment\n:BUILD_ENV\nSET EXIT_STATUS=2\nSET PS_CURRENT_STEP=environment\n@ECHO **********************************************************************\n@ECHO ** Build Config: %PS_CONFIG%\n@ECHO ** Target Arch:  %PS_ARCH%\n@ECHO ** Build Steps:  %PS_STEPS%\n@ECHO ** Run App:      %PS_RUN%\n@ECHO ** Deps path:    %PS_DESTDIR%\n@ECHO ** Using Microsoft Visual Studio installation found at:\n@ECHO **  %MSVC_DIR%\nCALL \"%MSVC_DIR%\\Common7\\Tools\\vsdevcmd.bat\" -arch=%PS_ARCH% -host_arch=%PS_ARCH_HOST% -app_platform=Desktop\nIF %ERRORLEVEL% NEQ 0 GOTO :END\nREM Need to reset the echo state after vsdevcmd.bat clobbers it.\n@IF \"%PS_ECHO_ON%\" NEQ \"\" (echo on) ELSE (echo off)\nIF \"%PS_DRY_RUN_ONLY%\" NEQ \"\" (\n    @ECHO Script terminated early because PS_DRY_RUN_ONLY is set. 1>&2\n    GOTO :END\n)\nIF /I \"%PS_STEPS:~0,3%\" EQU \"app\" GOTO :BUILD_APP\n\nREM Build deps\n:BUILD_DEPS\nSET EXIT_STATUS=3\nSET PS_CURRENT_STEP=deps\nIF \"%PS_STEPS_DIRTY%\" EQU \"\" (\n    CALL :MAKE_OR_CLEAN_DIRECTORY deps\\build \"%PS_DEPS_PATH_FILE_NAME%\" .vs\n    CALL :MAKE_OR_CLEAN_DIRECTORY \"%PS_DESTDIR%\"\n)\ncd deps\\build || GOTO :END\ncmake.exe .. -DDESTDIR=\"%PS_DESTDIR%\"\nIF %ERRORLEVEL% NEQ 0 IF \"%PS_STEPS_DIRTY%\" NEQ \"\" (\n    (del CMakeCache.txt && cmake.exe .. -DDESTDIR=\"%PS_DESTDIR%\") || GOTO :END\n) ELSE GOTO :END\n(echo %PS_DESTDIR%)> \"%PS_DEPS_PATH_FILE%\"\nmsbuild /m ALL_BUILD.vcxproj /p:Configuration=%PS_CONFIG%  /v:quiet || GOTO :END\ncd ..\\..\nIF /I \"%PS_STEPS:~0,4%\" EQU \"deps\" GOTO :RUN_APP\n\nREM Build app\n:BUILD_APP\nSET EXIT_STATUS=4\nSET PS_CURRENT_STEP=app\nIF \"%PS_STEPS_DIRTY%\" EQU \"\" CALL :MAKE_OR_CLEAN_DIRECTORY build \"%PS_CUSTOM_RUN_FILE%\" .vs\ncd build || GOTO :END\nREM Make sure we have a custom batch file skeleton for the run stage\nset PS_CUSTOM_BAT=%PS_CUSTOM_RUN_FILE%\nCALL :CANONICALIZE_PATH PS_CUSTOM_BAT\nIF NOT EXIST %PS_CUSTOM_BAT% CALL :WRITE_CUSTOM_SCRIPT_SKELETON %PS_CUSTOM_BAT%\nSET PS_PROJECT_IS_OPEN=\nFOR /F \"tokens=2 delims=,\" %%I in (\n    'tasklist /V /FI \"IMAGENAME eq devenv.exe \" /NH /FO CSV ^| find \"%PS_SOLUTION_NAME%\"'\n) do SET PS_PROJECT_IS_OPEN=%%~I\ncmake.exe .. -DCMAKE_PREFIX_PATH=\"%PS_DESTDIR%\\usr\\local\" -DCMAKE_CONFIGURATION_TYPES=%PS_CONFIG_LIST%\nIF %ERRORLEVEL% NEQ 0 IF \"%PS_STEPS_DIRTY%\" NEQ \"\" (\n    (del CMakeCache.txt && cmake.exe .. -DCMAKE_PREFIX_PATH=\"%PS_DESTDIR%\\usr\\local\" -DCMAKE_CONFIGURATION_TYPES=%PS_CONFIG_LIST%) || GOTO :END\n) ELSE GOTO :END\nREM Skip the build step if we're using the undocumented app-cmake to regenerate the full config from inside devenv\nIF \"%PS_STEPS%\" NEQ \"app-cmake\" msbuild /m ALL_BUILD.vcxproj /p:Configuration=%PS_CONFIG% /v:quiet || GOTO :END\n(echo %PS_DESTDIR%)> \"%PS_DEPS_PATH_FILE_FOR_CONFIG%\"\n\nREM Run app\n:RUN_APP\nREM All build steps complete.\nCALL :DIFF_TIME ELAPSED_TIME %START_TIME% %TIME%\nIF \"%PS_CURRENT_STEP%\" NEQ \"arguments\" (\n    @ECHO.\n    @ECHO Total Build Time Elapsed %ELAPSED_TIME%\n)\nSET EXIT_STATUS=5\nSET PS_CURRENT_STEP=run\nIF \"%PS_RUN%\" EQU \"none\" GOTO :PROLOGUE\ncd src\\%PS_CONFIG% || GOTO :END\nSET PS_PROJECT_IS_OPEN=\nFOR /F \"tokens=2 delims=,\" %%I in (\n    'tasklist /V /FI \"IMAGENAME eq devenv.exe \" /NH /FO CSV ^| find \"%PS_SOLUTION_NAME%\"'\n) do SET PS_PROJECT_IS_OPEN=%%~I\n@ECHO.\n@ECHO Running %PS_RUN% application...\n@REM icacls below is just a hack for file-not-found error handling\nIF \"%PS_RUN%\" EQU \"console\" (\n    icacls bambu-studio-console.exe >nul || GOTO :END\n    start /wait /b bambu-studio-console.exe\n) ELSE IF \"%PS_RUN%\" EQU \"window\" (\n    icacls bambu-studio.exe >nul || GOTO :END\n    start bambu-studio.exe\n) ELSE IF \"%PS_RUN%\" EQU \"viewer\" (\n    icacls bambu-gcodeviewer.exe >nul || GOTO :END\n    start bambu-gcodeviewer.exe\n) ELSE IF \"%PS_RUN%\" EQU \"custom\" (\n    icacls %PS_CUSTOM_BAT% >nul || GOTO :END\n    CALL %PS_CUSTOM_BAT%\n) ELSE IF \"%PS_RUN%\" EQU \"ide\" (\n    IF \"%PS_PROJECT_IS_OPEN%\" NEQ \"\" (\n        @ECHO WARNING: Solution is already open in Visual Studio. Skipping ide run step. 1>&2\n    ) ELSE (\n        @ECHO Preparing to run Visual Studio...\n        cd ..\\.. || GOTO :END\n        REM This hack generates a single config for MSVS, guaranteeing it gets set as the active config.\n        cmake.exe .. -DCMAKE_PREFIX_PATH=\"%PS_DESTDIR%\\usr\\local\" -DCMAKE_CONFIGURATION_TYPES=%PS_CONFIG% > nul 2> nul || GOTO :END\n        REM Now launch devenv with the single config (setting it active) and a /command switch to re-run cmake and generate the full config list\n        start devenv.exe %PS_SOLUTION_NAME%.sln /command ^\"shell /o ^^^\"%~f0^^^\" -d ^^^\"%PS_DESTDIR%^^^\" -c %PS_CONFIG% -a %PS_ARCH% -r none -s app-cmake^\"\n        REM If devenv fails to launch just directly regenerate the full config list.\n        IF %ERRORLEVEL% NEQ 0 (\n            cmake.exe .. -DCMAKE_PREFIX_PATH=\"%PS_DESTDIR%\\usr\\local\" -DCMAKE_CONFIGURATION_TYPES=%PS_CONFIG_LIST% 2> nul 1> nul || GOTO :END\n        )\n    )\n)\n\n@REM **********    DON'T ADD ANY CODE BETWEEN THESE TWO SECTIONS    **********\n@REM RUN_APP may hand off control, so let exit codes fall through to PROLOGUE.\n\n:PROLOGUE\nSET EXIT_STATUS=%ERRORLEVEL%\n:END\n@IF \"%PS_ECHO_ON%%PS_DRY_RUN_ONLY%\" NEQ \"\" (\n    @ECHO **********************************************************************\n    @ECHO ** Script Parameters:\n    @ECHO **********************************************************************\n    @SET PS_\n)\nIF \"%EXIT_STATUS%\" NEQ \"0\" (\n    IF \"%PS_CURRENT_STEP%\" NEQ \"arguments\" (\n        @ECHO.\n        @ECHO ERROR: *** Build process failed at %PS_CURRENT_STEP% step. *** 1>&2\n    )\n) ELSE (\n    @ECHO All steps completed successfully.\n)\npopd\nexit /B %EXIT_STATUS%\n\nGOTO :EOF\nREM Functions and stubs start here.\n\n:RESOLVE_DESTDIR_CACHE\n@REM Resolves all DESTDIR cache values and sets PS_STEPS_DEFAULT\n@REM Note: This just sets global variables, so it doesn't use setlocal.\nSET PS_DEPS_PATH_FILE_FOR_CONFIG=%~dp0build\\.vs\\%PS_ARCH%\\%PS_CONFIG%\\%PS_DEPS_PATH_FILE_NAME%\nmkdir \"%~dp0build\\.vs\\%PS_ARCH%\\%PS_CONFIG%\" > nul 2> nul\nREM Copy a legacy file if we don't have one in the proper location.\necho f|xcopy /D \"%~dp0build\\%PS_ARCH%\\%PS_CONFIG%\\%PS_DEPS_PATH_FILE_NAME%\" \"%PS_DEPS_PATH_FILE_FOR_CONFIG%\" > nul 2> nul\nCALL :CANONICALIZE_PATH PS_DEPS_PATH_FILE_FOR_CONFIG\nIF EXIST \"%PS_DEPS_PATH_FILE_FOR_CONFIG%\" (\n    FOR /F \"tokens=* USEBACKQ\" %%I IN (\"%PS_DEPS_PATH_FILE_FOR_CONFIG%\") DO (\n        SET PS_DESTDIR_CACHED=%%I\n        SET PS_DESTDIR_DEFAULT_MSG=%%I\n    )\n    SET PS_STEPS_DEFAULT=app-dirty\n) ELSE IF EXIST \"%PS_DEPS_PATH_FILE%\" (\n    FOR /F \"tokens=* USEBACKQ\" %%I IN (\"%PS_DEPS_PATH_FILE%\") DO (\n        SET PS_DESTDIR_CACHED=%%I\n        SET PS_DESTDIR_DEFAULT_MSG=%%I\n    )\n    SET PS_STEPS_DEFAULT=app\n) ELSE (\n    SET PS_DESTDIR_CACHED=\n    SET PS_DESTDIR_DEFAULT_MSG=Cache missing. Argument required.\n    SET PS_STEPS_DEFAULT=all\n)\nGOTO :EOF\n\n:PARSE_OPTION\n@REM Argument parser called for each argument\n@REM %1 - Valid option list\n@REM %2 - Variable name for parser state; must be unset when parsing finished\n@REM %3 - Current argument value\n@REM PARSER_FAIL will be set on an error\n@REM Note: Must avoid delayed expansion since filenames may contain ! character\nsetlocal disableDelayedExpansion\nIF \"%PARSER_FAIL%\" NEQ \"\" GOTO :EOF\nCALL SET LAST_ARG=%%%2%%\nIF \"%LAST_ARG%\" EQU \"\" (\n    CALL :PARSE_OPTION_NAME %1 %~2 %~3 1\n    SET ARG_TYPE=NAME\n) ELSE (\n    SET PS_SET_COMMAND=SET PS_%LAST_ARG%=%~3\n    SET ARG_TYPE=LAST_ARG\n    SET %~2=\n)\nCALL SET LAST_ARG=%%%2%%\nIF \"%LAST_ARG%%ARG_TYPE%\" EQU \"NAME\" SET PARSER_FAIL=%~3\n(\n    endlocal\n    SET PARSER_FAIL=%PARSER_FAIL%\n    SET %~2=%LAST_ARG%\n    %PS_SET_COMMAND%\n)\nGOTO :EOF\n\n:PARSE_OPTION_VALUE\nsetlocal disableDelayedExpansion\n@REM Parses value and verifies it is within the supplied list\n@REM %1 - Valid option list\n@REM %2 - In/out variable name; unset on error\nCALL SET NAME=%~2\nCALL SET SAVED_VALUE=%%%NAME%%%\nCALL :PARSE_OPTION_NAME %1 %NAME% -%SAVED_VALUE%\nCALL SET NEW_VALUE=%%%NAME%%%\nIF \"%NEW_VALUE%\" EQU \"\" (\n    @ECHO ERROR: Invalid parameter: %NAME:~3%=%SAVED_VALUE% 1>&2\n)\nendlocal & SET %NAME%=%NEW_VALUE%\nGOTO :EOF\n\n:PARSE_OPTION_NAME\n@REM Parses an option name\n@REM %1 - Valid option list\n@REM %2 - Out variable name; unset on error\n@REM %3 - Current argument value\n@REM %4 - Boolean indicating single character switches are valid\n@REM Note: Delayed expansion safe because ! character is invalid in option name\nsetlocal enableDelayedExpansion\nIF \"%4\" NEQ \"\" FOR %%I IN (%~1) DO @(\n    SET SHORT_NAME=%%~I\n    SET SHORT_ARG_!SHORT_NAME:~0,1!=%%~I\n)\n@SET OPTION_NAME=%~3\n@(echo %OPTION_NAME%)| findstr /R /C:\"[-/]..*\">nul || GOTO :PARSE_OPTION_NAME_FAIL\n@SET OPTION_NAME=%OPTION_NAME:~1%\nIF \"%4\" NEQ \"\" (\n    IF \"%OPTION_NAME%\" EQU \"%OPTION_NAME:~0,1%\" (\n        IF \"!SHORT_ARG_%OPTION_NAME:~0,1%!\" NEQ \"\" SET OPTION_NAME=!SHORT_ARG_%OPTION_NAME:~0,1%!\n    )\n)\n@(echo %OPTION_NAME%)| findstr /R /C:\".[ ][ ]*.\">nul && GOTO :PARSE_OPTION_NAME_FAIL\n@(echo  %~1 )| findstr /I /C:\" %OPTION_NAME% \">nul || GOTO :PARSE_OPTION_NAME_FAIL\nFOR %%I IN (%~1) DO SET OPTION_NAME=!OPTION_NAME:%%~I=%%~I!\nendlocal & SET %~2=%OPTION_NAME%\nGOTO :EOF\n:PARSE_OPTION_NAME_FAIL\nendlocal & SET %~2=\nGOTO :EOF\n\n:MAKE_OR_CLEAN_DIRECTORY\n@REM Create directory if it doesn't exist or clean it if it does\n@REM %1 - Directory path to clean or create\n@REM %* - Optional list of files/dirs to keep (in the base directory only)\nsetlocal disableDelayedExpansion\nIF NOT EXIST \"%~1\" (\n    @ECHO Creating %~1\n    mkdir \"%~1\" && (\n        endlocal\n        GOTO :EOF\n    )\n)\n@ECHO Cleaning %~1 ...\nSET KEEP_LIST=\n:MAKE_OR_CLEAN_DIRECTORY_ARG_LOOP\nIF \"%~2\" NEQ \"\" (\n    SET KEEP_LIST=%KEEP_LIST% \"%~2\"\n    SHIFT /2\n    GOTO :MAKE_OR_CLEAN_DIRECTORY_ARG_LOOP\n)\nfor /F \"usebackq delims=\" %%I in (`dir /a /b \"%~1\"`) do (\n    (echo %KEEP_LIST%)| findstr /I /L /C:\"\\\"%%I\\\"\">nul || (\n        rmdir /s /q  \"%~1\\%%I\" 2>nul ) || del /q /f \"%~1\\%%I\"\n)\nendlocal\nGOTO :EOF\n\n:TOLOWER\n@REM Converts supplied environment variable to lowercase\n@REM %1 - Input/output variable name\n@REM Note: This is slow on very long strings, but is used only on very short ones\nsetlocal disableDelayedExpansion\n@FOR %%b IN (a b c d e f g h i j k l m n o p q r s t u v w x y z) DO @CALL set %~1=%%%1:%%b=%%b%%\n@CALL SET OUTPUT=%%%~1%%\nendlocal & SET %~1=%OUTPUT%\nGOTO :EOF\n\n:CANONICALIZE_PATH\n@REM Canonicalizes the path in the supplied variable\n@REM %1 - Input/output variable containing path to canonicalize\n@REM %2 - Optional base directory\nsetlocal\nCALL :CANONICALIZE_PATH_INNER %1 %%%~1%% %2\nendlocal & SET %~1=%OUTPUT%\nGOTO :EOF\n:CANONICALIZE_PATH_INNER\nif \"%~3\" NEQ \"\" (pushd %3 || GOTO :EOF)\nSET OUTPUT=%~f2\nif \"%~3\" NEQ \"\" popd\nGOTO :EOF\n\n:DIFF_TIME\n@REM Calculates elapsed time between two timestamps (TIME environment variable format)\n@REM %1 - Output variable\n@REM %2 - Start time\n@REM %3 - End time\nsetlocal EnableDelayedExpansion\nset START_ARG=%2\nset END_ARG=%3\nset END=!END_ARG:%TIME:~8,1%=%%100)*100+1!\nset START=!START_ARG:%TIME:~8,1%=%%100)*100+1!\nset /A DIFF=((((10!END:%TIME:~2,1%=%%100)*60+1!%%100)-((((10!START:%TIME:~2,1%=%%100)*60+1!%%100), DIFF-=(DIFF^>^>31)*24*60*60*100\nset /A CC=DIFF%%100+100,DIFF/=100,SS=DIFF%%60+100,DIFF/=60,MM=DIFF%%60+100,HH=DIFF/60+100\n@endlocal & set %1=%HH:~1%%TIME:~2,1%%MM:~1%%TIME:~2,1%%SS:~1%%TIME:~8,1%%CC:~1%\n@GOTO :EOF\n\n:WRITE_CUSTOM_SCRIPT_SKELETON\n@REM Writes the following text to the supplied file\n@REM %1 - Output filename\nsetlocal\n@(\nECHO @ECHO.\nECHO @ECHO ********************************************************************************\nECHO @ECHO ** This is a custom run script skeleton.\nECHO @ECHO ********************************************************************************\nECHO @ECHO.\nECHO @ECHO ********************************************************************************\nECHO @ECHO ** The working directory is:\nECHO @ECHO ********************************************************************************\nECHO dir\nECHO @ECHO.\nECHO @ECHO ********************************************************************************\nECHO @ECHO ** The environment is:\nECHO @ECHO ********************************************************************************\nECHO set\nECHO @ECHO.\nECHO @ECHO ********************************************************************************\nECHO @ECHO ** Edit or replace this script to run custom steps after a successful build:\nECHO @ECHO ** %~1\nECHO @ECHO ********************************************************************************\nECHO @ECHO.\n) > \"%~1\"\nendlocal\nGOTO :EOF\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "localazy.json",
          "type": "blob",
          "size": 1.287109375,
          "content": "{\n\n\t\"writeKey\": \"a8151210718646444184-5b716da2c0543d32e9395b9dfe0759d748e606c831979a0ffb2122900ac18917\",\n\t\"readKey\": \"a8151210718646444184-a8f8385bc116854945c43849e2717742aa20b2fea65739e87183979aec15b26a\",\n\t\"upload\": {\n\t\t\"files\": [\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/en/BambuStudio_en.po\",\n\t\t\t\t\"lang\": \"en\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/fr/BambuStudio_fr.po\",\n\t\t\t\t\"lang\": \"fr\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/de/BambuStudio_de.po\",\n\t\t\t\t\"lang\": \"de\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/sv/BambuStudio_sv.po\",\n\t\t\t\t\"lang\": \"sv\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/es/BambuStudio_es.po\",\n\t\t\t\t\"lang\": \"es\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/nl/BambuStudio_nl.po\",\n\t\t\t\t\"lang\": \"nl\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/hu/BambuStudio_hu.po\",\n\t\t\t\t\"lang\": \"hu\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/ja/BambuStudio_it.po\",\n\t\t\t\t\"lang\": \"it\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/ja/BambuStudio_ja.po\",\n\t\t\t\t\"lang\": \"ja\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"po\",\n\t\t\t\t\"pattern\": \"bbl/i18n/ja/BambuStudio_ko.po\",\n\t\t\t\t\"lang\": \"ko\"\n\t\t\t}\n\t\t]\n\t},\n\t\"download\": {\n\t\t\"folder\": \"bbl/i18n\",\n\t\t\"includeSourceLang\" : \"true\",\n\t\t\"files\": {\n\t\t\t\"output\": \"${lang}/BambuStudio_${lang}.po\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandboxes",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "t",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.inc",
          "type": "blob",
          "size": 0.5869140625,
          "content": "# Included by CMakeLists, edited by the build script\n# (the version numbers are generated by the build script from the git current label)\n\nset(SLIC3R_APP_NAME \"BambuStudio\")\nset(SLIC3R_APP_KEY \"BambuStudio\")\n\nif(NOT DEFINED BBL_RELEASE_TO_PUBLIC)\nset(BBL_RELEASE_TO_PUBLIC \"0\")\nendif()\nif(NOT DEFINED BBL_INTERNAL_TESTING)\nset(BBL_INTERNAL_TESTING \"1\")\nendif()\n\n# The build_version should start from 50 in master branch\n\nset(SLIC3R_VERSION \"01.10.02.64\")\n\nstring(REPLACE \".\" \",\" SLIC3R_COMMA_SEPARATED_VERSION ${SLIC3R_VERSION})\nset(SLIC3R_COMMA_SEPARATED_VERSION \"${SLIC3R_COMMA_SEPARATED_VERSION}\")\n"
        },
        {
          "name": "xs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}