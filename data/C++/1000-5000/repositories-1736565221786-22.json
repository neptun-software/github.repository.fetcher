{
  "metadata": {
    "timestamp": 1736565221786,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mosra/magnum",
      "stars": 4854,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.177734375,
          "content": "[*]\ncharset = utf-8\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{css,html,yml,rb,gltf}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "/build*\n/debian\n/obj-*\npkg\n*.kdev4\n*~\n*.kate-swp\n*.pkg.tar.zst\nCMakeLists.txt.user*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0888671875,
          "content": "[submodule \"toolchains\"]\n\tpath = toolchains\n\turl = https://github.com/mosra/toolchains.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 43.458984375,
          "content": "#\n#   This file is part of Magnum.\n#\n#   Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,\n#               2020, 2021, 2022, 2023, 2024, 2025\n#             Vladimír Vondruš <mosra@centrum.cz>\n#   Copyright © 2023 Vincent Le Garrec <github@le-garrec.fr>\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a\n#   copy of this software and associated documentation files (the \"Software\"),\n#   to deal in the Software without restriction, including without limitation\n#   the rights to use, copy, modify, merge, publish, distribute, sublicense,\n#   and/or sell copies of the Software, and to permit persons to whom the\n#   Software is furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included\n#   in all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n#   DEALINGS IN THE SOFTWARE.\n#\n\n# Matches Corrade requirement, see its root CMakeLists for more information.\ncmake_minimum_required(VERSION 3.5...3.10)\n\noption(HUNTER_ENABLED \"Get dependencies (Corrade, GLFW, SDL2, ...) via Hunter\" OFF)\n# This option is meant to be passed on the very first invocation. If not done\n# then, it doesn't really make sense to enable it at a later time. (Plus the\n# Hunter support is long unmaintained here, so it doesn't make sense to show it\n# at all.)\nmark_as_advanced(HUNTER_ENABLED)\nif(HUNTER_ENABLED)\n    include(${CMAKE_CURRENT_LIST_DIR}/package/hunter/HunterInit.cmake)\nendif()\n\n# CMake 3.12+ uses the policy max version specified in\n# cmake_minimum_required(), meaning that with ...3.10, everything until CMP0071\n# gets set to NEW implicitly. We however want to keep compatibility with\n# versions before 3.12, so the NEW policies are still being hand-picked. Also\n# don't want to do a blanket cmake_policy(VERSION) because that may break\n# behavior for existing projects that rely on the OLD behavior.\n\n# Don't restrict INTERPROCEDURAL_OPTIMIZATION only for icc on Linux\nif(POLICY CMP0069)\n    cmake_policy(SET CMP0069 NEW)\nendif()\n# If CMAKE_AUTOMOC is set, all uses of corrade_add_resource() would otherwise\n# complain on 3.10 that AUTOMOC is not processing GENERATED files\nif(POLICY CMP0071)\n    cmake_policy(SET CMP0071 NEW)\nendif()\n# Allow <PackageName>_ROOT to be used on 3.12+ to point to per-package install\n# locations that find_package(PackageName) subsequently picks up\nif(POLICY CMP0074)\n    cmake_policy(SET CMP0074 NEW)\nendif()\n# Allow also <PACKAGENAME>_ROOT (i.e., uppercase), on 3.27+\nif(POLICY CMP0144)\n    cmake_policy(SET CMP0144 NEW)\nendif()\n# Prefer GLVND when finding OpenGL. If this causes problems (known to fail with\n# NVidia drivers in Debian Buster, reported on 2019-04-09), users can override\n# this by setting OpenGL_GL_PREFERENCE to LEGACY.\nif(POLICY CMP0072)\n    cmake_policy(SET CMP0072 NEW)\nendif()\n# Superprojects can use just set(MAGNUM_WITH_BLAH ON) without FORCE CACHE on\n# 3.13+\nif(POLICY CMP0077)\n    cmake_policy(SET CMP0077 NEW)\nendif()\n\nproject(Magnum CXX)\n\nif(HUNTER_ENABLED)\n    include(${CMAKE_CURRENT_LIST_DIR}/package/hunter/HunterAddPackages.cmake)\nendif()\n\n# Use folders for nice tree in Visual Studio and XCode\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/modules/\" ${CMAKE_MODULE_PATH})\n\n# Find Corrade first so we can check on the target\nfind_package(Corrade REQUIRED Utility)\n\ninclude(CMakeDependentOption)\n\n# Options that used to be unprefixed. 66 values for 67 option() and\n# cmake_dependent_option() calls, one of which is HUNTER_ENABLED that we don't\n# prefix. New options shouldn't be added to this list.\nset(_MAGNUM_DEPRECATED_UNPREFIXED_OPTIONS\n    WITH_AUDIO\n    WITH_DEBUGTOOLS\n    WITH_GL\n    WITH_MESHTOOLS\n    WITH_PRIMITIVES\n    WITH_SCENEGRAPH\n    WITH_SCENETOOLS\n    WITH_SHADERS\n    WITH_SHADERTOOLS\n    WITH_TEXT\n    WITH_TEXTURETOOLS\n    WITH_TRADE\n    WITH_VK\n    WITH_OPENGLTESTER\n    WITH_VULKANTESTER\n    WITH_ANDROIDAPPLICATION\n    WITH_EMSCRIPTENAPPLICATION\n    WITH_GLXAPPLICATION\n    WITH_GLFWAPPLICATION\n    WITH_SDL2APPLICATION\n    WITH_XEGLAPPLICATION\n    WITH_WINDOWLESSCGLAPPLICATION\n    WITH_WINDOWLESSEGLAPPLICATION\n    WITH_WINDOWLESSGLXAPPLICATION\n    WITH_WINDOWLESSIOSAPPLICATION\n    WITH_WINDOWLESSWGLAPPLICATION\n    WITH_CGLCONTEXT\n    WITH_EGLCONTEXT\n    WITH_GLXCONTEXT\n    WITH_WGLCONTEXT\n    WITH_GL_INFO\n    WITH_AL_INFO\n    WITH_VK_INFO\n    WITH_FONTCONVERTER\n    WITH_DISTANCEFIELDCONVERTER\n    WITH_IMAGECONVERTER\n    WITH_SCENECONVERTER\n    WITH_SHADERCONVERTER\n    WITH_ANYAUDIOIMPORTER\n    WITH_ANYIMAGECONVERTER\n    WITH_ANYIMAGEIMPORTER\n    WITH_ANYSCENECONVERTER\n    WITH_ANYSCENEIMPORTER\n    WITH_ANYSHADERCONVERTER\n    WITH_MAGNUMFONT\n    WITH_MAGNUMFONTCONVERTER\n    WITH_OBJIMPORTER\n    WITH_TGAIMPORTER\n    WITH_TGAIMAGECONVERTER\n    WITH_WAVAUDIOIMPORTER\n    BUILD_DEPRECATED\n    BUILD_STATIC\n    BUILD_STATIC_PIC\n    BUILD_STATIC_UNIQUE_GLOBALS\n    BUILD_PLUGINS_STATIC\n    BUILD_TESTS\n    BUILD_GL_TESTS\n    BUILD_AL_TESTS\n    BUILD_VK_TESTS\n    TARGET_GL\n    TARGET_GLES\n    TARGET_GLES2\n    TARGET_DESKTOP_GLES\n    TARGET_HEADLESS\n    TARGET_VK)\n# If during the first run (i.e., when the variable isn't in cache yet), check\n# if any of the prefixed options are already set. If so, we assume the user is\n# already switched to the prefixed options and won't accept the deprecated\n# unprefixed options for backwards compatibility. This way it's possible for\n# projects to reuse these variables for other purposes without affecting\n# Magnum in any way.\nif(NOT DEFINED _MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS)\n    set(_MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS ON CACHE INTERNAL \"\")\n    foreach(option ${_MAGNUM_DEPRECATED_UNPREFIXED_OPTIONS})\n        if(DEFINED MAGNUM_${option})\n            set(_MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS OFF CACHE INTERNAL \"\")\n            break()\n        endif()\n    endforeach()\nendif()\n\n# Magnum GL Info (currently only using GLX/CGL/EGL on *nix, WGL/EGL on Windows\n# and EGL on Emscripten)\nif(CORRADE_TARGET_UNIX OR CORRADE_TARGET_WINDOWS OR CORRADE_TARGET_EMSCRIPTEN)\n    option(MAGNUM_WITH_GL_INFO \"Build magnum-gl-info utility\" OFF)\nendif()\n\n# Desktop-only utilities. Not guaranteed to build on GLES, but showing the\n# option everywhere for simplicity.\nif(CORRADE_TARGET_UNIX OR CORRADE_TARGET_WINDOWS)\n    option(MAGNUM_WITH_FONTCONVERTER \"Build magnum-fontconverter utility\" OFF)\n    if(MAGNUM_WITH_FONTCONVERTER AND MAGNUM_BUILD_STATIC AND MAGNUM_BUILD_PLUGINS_STATIC)\n        set(MAGNUM_FONTCONVERTER_STATIC_PLUGINS \"\" CACHE STRING \"Static plugins to link to the magnum-fontconverter utility\")\n    endif()\n\n    option(MAGNUM_WITH_DISTANCEFIELDCONVERTER \"Build magnum-distancefieldconverter utility\" OFF)\n    if(MAGNUM_WITH_DISTANCEFIELDCONVERTER AND MAGNUM_BUILD_STATIC AND MAGNUM_BUILD_PLUGINS_STATIC)\n        set(MAGNUM_DISTANCEFIELDCONVERTER_STATIC_PLUGINS \"\" CACHE STRING \"Static plugins to link to the magnum-distancefieldconverter utility\")\n    endif()\nendif()\n\n# API-independent utilities\noption(MAGNUM_WITH_IMAGECONVERTER \"Build magnum-imageconverter utility\" OFF)\nif(MAGNUM_WITH_IMAGECONVERTER AND MAGNUM_BUILD_STATIC AND MAGNUM_BUILD_PLUGINS_STATIC)\n    set(MAGNUM_IMAGECONVERTER_STATIC_PLUGINS \"\" CACHE STRING \"Static plugins to link to the magnum-imageconverter utility\")\nendif()\n\noption(MAGNUM_WITH_SCENECONVERTER \"Build magnum-sceneconverter utility\" OFF)\nif(MAGNUM_WITH_SCENECONVERTER AND MAGNUM_BUILD_STATIC AND MAGNUM_BUILD_PLUGINS_STATIC)\n    set(MAGNUM_SCENECONVERTER_STATIC_PLUGINS \"\" CACHE STRING \"Static plugins to link to the magnum-sceneconverter utility\")\nendif()\n\noption(MAGNUM_WITH_SHADERCONVERTER \"Build magnum-shaderconverter utility\" OFF)\nif(MAGNUM_WITH_SHADERCONVERTER AND MAGNUM_BUILD_STATIC AND MAGNUM_BUILD_PLUGINS_STATIC)\n    set(MAGNUM_SHADERCONVERTER_STATIC_PLUGINS \"\" CACHE STRING \"Static plugins to link to the magnum-shaderconverter utility\")\nendif()\n\n# Magnum AL Info\noption(MAGNUM_WITH_AL_INFO \"Build magnum-al-info utility\" OFF)\n\n# Magnum Vk Info\noption(MAGNUM_WITH_VK_INFO \"Build magnum-vk-info utility\" OFF)\n\n# Plugins\noption(MAGNUM_WITH_ANYIMAGEIMPORTER \"Build AnyImageImporter plugin\" OFF)\noption(MAGNUM_WITH_ANYAUDIOIMPORTER \"Build AnyAudioImporter plugin\" OFF)\noption(MAGNUM_WITH_ANYIMAGECONVERTER \"Build AnyImageConverter plugin\" OFF)\noption(MAGNUM_WITH_ANYSCENECONVERTER \"Build AnySceneConverter plugin\" OFF)\noption(MAGNUM_WITH_ANYSCENEIMPORTER \"Build AnySceneImporter plugin\" OFF)\noption(MAGNUM_WITH_ANYSHADERCONVERTER \"Build AnyShaderConverter plugin\" OFF)\noption(MAGNUM_WITH_WAVAUDIOIMPORTER \"Build WavAudioImporter plugin\" OFF)\noption(MAGNUM_WITH_MAGNUMFONT \"Build MagnumFont plugin\" OFF)\noption(MAGNUM_WITH_MAGNUMFONTCONVERTER \"Build MagnumFontConverter plugin\" OFF)\noption(MAGNUM_WITH_OBJIMPORTER \"Build ObjImporter plugin\" OFF)\ncmake_dependent_option(MAGNUM_WITH_TGAIMAGECONVERTER \"Build TgaImageConverter plugin\" OFF \"NOT MAGNUM_WITH_MAGNUMFONTCONVERTER\" ON)\ncmake_dependent_option(MAGNUM_WITH_TGAIMPORTER \"Build TgaImporter plugin\" OFF \"NOT MAGNUM_WITH_MAGNUMFONT\" ON)\n\n# Parts of the library\ncmake_dependent_option(MAGNUM_WITH_AUDIO \"Build Audio library\" OFF \"NOT MAGNUM_WITH_AL_INFO;NOT MAGNUM_WITH_ANYAUDIOIMPORTER;NOT MAGNUM_WITH_WAVAUDIOIMPORTER\" ON)\noption(MAGNUM_WITH_DEBUGTOOLS \"Build DebugTools library\" ON)\ncmake_dependent_option(MAGNUM_WITH_MATERIALTOOLS \"Build MaterialTools library\" ON \"NOT MAGNUM_WITH_SCENECONVERTER\" ON)\noption(MAGNUM_WITH_PRIMITIVES \"Build Primitives library\" ON)\ncmake_dependent_option(MAGNUM_WITH_MESHTOOLS \"Build MeshTools library\" ON \"NOT MAGNUM_WITH_OBJIMPORTER;NOT MAGNUM_WITH_SCENECONVERTER;NOT MAGNUM_WITH_PRIMITIVES\" ON)\noption(MAGNUM_WITH_SCENEGRAPH \"Build SceneGraph library\" ON)\ncmake_dependent_option(MAGNUM_WITH_SCENETOOLS \"Build SceneTools library\" ON \"NOT MAGNUM_WITH_SCENECONVERTER\" ON)\noption(MAGNUM_WITH_SHADERS \"Build Shaders library\" ON)\ncmake_dependent_option(MAGNUM_WITH_SHADERTOOLS \"Build ShaderTools library\" ON \"NOT MAGNUM_WITH_SHADERCONVERTER\" ON)\ncmake_dependent_option(MAGNUM_WITH_TEXT \"Build Text library\" ON \"NOT MAGNUM_WITH_FONTCONVERTER;NOT MAGNUM_WITH_MAGNUMFONT;NOT MAGNUM_WITH_MAGNUMFONTCONVERTER\" ON)\ncmake_dependent_option(MAGNUM_WITH_TEXTURETOOLS \"Build TextureTools library\" ON \"NOT MAGNUM_WITH_TEXT;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER\" ON)\ncmake_dependent_option(MAGNUM_WITH_TRADE \"Build Trade library\" ON \"NOT MAGNUM_WITH_MATERIALTOOLS;NOT MAGNUM_WITH_MESHTOOLS;NOT MAGNUM_WITH_PRIMITIVES;NOT MAGNUM_WITH_SCENETOOLS;NOT MAGNUM_WITH_IMAGECONVERTER;NOT MAGNUM_WITH_ANYIMAGEIMPORTER;NOT MAGNUM_WITH_ANYIMAGECONVERTER;NOT MAGNUM_WITH_ANYSCENEIMPORTER;NOT MAGNUM_WITH_OBJIMPORTER;NOT MAGNUM_WITH_TGAIMAGECONVERTER;NOT MAGNUM_WITH_TGAIMPORTER\" ON)\ncmake_dependent_option(MAGNUM_WITH_GL \"Build GL library\" ON \"NOT MAGNUM_WITH_SHADERS;NOT MAGNUM_WITH_GL_INFO;NOT MAGNUM_WITH_ANDROIDAPPLICATION;NOT MAGNUM_WITH_WINDOWLESSIOSAPPLICATION;NOT MAGNUM_WITH_WINDOWLESSCGLAPPLICATION;NOT MAGNUM_WITH_WINDOWLESSGLXAPPLICATION;NOT MAGNUM_WITH_CGLCONTEXT;NOT MAGNUM_WITH_GLXAPPLICATION;NOT MAGNUM_WITH_GLXCONTEXT;NOT MAGNUM_WITH_XEGLAPPLICATION;NOT MAGNUM_WITH_WINDOWLESSWGLAPPLICATION;NOT MAGNUM_WITH_WGLCONTEXT;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER\" ON)\n\ncmake_dependent_option(MAGNUM_TARGET_GL \"Build libraries with OpenGL interoperability\" ON \"MAGNUM_WITH_GL\" OFF)\n\n# If targeting iOS, Android, Emscripten or Windows RT, implicitly enable GLES.\n# Otherwise default to desktop GL.\nif(CORRADE_TARGET_IOS OR CORRADE_TARGET_ANDROID OR CORRADE_TARGET_EMSCRIPTEN OR CORRADE_TARGET_WINDOWS_RT)\n    set(MAGNUM_TARGET_GLES ON)\nelseif(MAGNUM_WITH_GL)\n    cmake_dependent_option(MAGNUM_TARGET_GLES \"Build for OpenGL ES / WebGL\" OFF \"MAGNUM_WITH_GL\" OFF)\nendif()\n\n# If targeting Android, Emscripten or Windows RT, implicitly enable EGL.\n# Otherwise enable EGL by default only if targeting GLES and not on iOS (where\n# it's EAGL instead)\nif(CORRADE_TARGET_ANDROID OR CORRADE_TARGET_EMSCRIPTEN OR CORRADE_TARGET_WINDOWS_RT)\n    set(MAGNUM_TARGET_EGL ON)\nelse()\n    if(MAGNUM_TARGET_GLES AND NOT CORRADE_TARGET_IOS)\n        set(_MAGNUM_TARGET_EGL_DEFAULT ON)\n    else()\n        set(_MAGNUM_TARGET_EGL_DEFAULT OFF)\n    endif()\n    cmake_dependent_option(MAGNUM_TARGET_EGL \"Build for EGL instead of EAGL / CGL / GLX / WGL\" ${_MAGNUM_TARGET_EGL_DEFAULT} \"MAGNUM_WITH_GL\" OFF)\nendif()\n\ncmake_dependent_option(MAGNUM_TARGET_GLES2 \"Build for OpenGL ES 2 / WebGL 1.0\" ON \"MAGNUM_TARGET_GLES\" OFF)\n\n# Vulkan, everywhere except Emscripten\nif(NOT CORRADE_TARGET_EMSCRIPTEN)\n    cmake_dependent_option(MAGNUM_WITH_VK \"Build Vk library\" OFF \"NOT MAGNUM_WITH_VK_INFO\" ON)\n    cmake_dependent_option(MAGNUM_TARGET_VK \"Build libraries with Vulkan interoperability\" ON \"MAGNUM_WITH_VK\" OFF)\nendif()\n\n# EGL context and windowless EGL application, available everywhere. If\n# targeting EGL and not on Windows, it's implied by the CLI tools, otherwise\n# it's independent.\nif(MAGNUM_TARGET_EGL AND NOT CORRADE_TARGET_WINDOWS)\n    cmake_dependent_option(MAGNUM_WITH_WINDOWLESSEGLAPPLICATION \"Build WindowlessEglApplication library\" OFF \"NOT MAGNUM_WITH_GL_INFO;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER;NOT MAGNUM_WITH_FONTCONVERTER\" ON)\nelse()\n    # TODO when CMake 3.22 can be relied on, clean this up to use a proper\n    # condition instead\n    cmake_dependent_option(MAGNUM_WITH_WINDOWLESSEGLAPPLICATION \"Build WindowlessEglApplication library\" OFF \"ON\" OFF)\nendif()\noption(MAGNUM_WITH_EGLCONTEXT \"Build EglContext library\" OFF)\n\n# Android-specific application libraries\nif(CORRADE_TARGET_ANDROID)\n    option(MAGNUM_WITH_ANDROIDAPPLICATION \"Build AndroidApplication library\" OFF)\n\n# Emscripten-specific application libraries\nelseif(CORRADE_TARGET_EMSCRIPTEN)\n    option(MAGNUM_WITH_EMSCRIPTENAPPLICATION \"Build EmscriptenApplication library\" OFF)\n\n# iOS-specific application libraries\nelseif(CORRADE_TARGET_IOS)\n    option(MAGNUM_WITH_WINDOWLESSIOSAPPLICATION \"Build WindowlessIosApplication library\" OFF)\n\n# macOS-specific application libraries\nelseif(CORRADE_TARGET_APPLE AND NOT MAGNUM_TARGET_EGL)\n    # WindowlessCglApplication implied by the CLI tools unless targeting EGL\n    if(NOT MAGNUM_TARGET_EGL)\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSCGLAPPLICATION \"Build WindowlessCglApplication library\" OFF \"NOT MAGNUM_WITH_GL_INFO;NOT MAGNUM_WITH_FONTCONVERTER;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER\" ON)\n    else()\n        # TODO when CMake 3.22 can be relied on, clean this up to use a proper\n        # condition instead\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSCGLAPPLICATION \"Build WindowlessCglApplication library\" OFF \"ON\" OFF)\n    endif()\n    option(MAGNUM_WITH_CGLCONTEXT \"Build CglContext library\" OFF)\n\n# X11 + GLX/EGL-specific application libraries\nelseif(CORRADE_TARGET_UNIX)\n    option(MAGNUM_WITH_GLXAPPLICATION \"Build GlxApplication library\" OFF)\n    # WindowlessGlxApplication implied by the CLI tools unless targeting EGL\n    if(NOT MAGNUM_TARGET_EGL)\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSGLXAPPLICATION \"Build WindowlessGlxApplication library\" OFF \"NOT MAGNUM_WITH_GL_INFO;NOT MAGNUM_WITH_FONTCONVERTER;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER\" ON)\n    else()\n        # TODO when CMake 3.22 can be relied on, clean this up to use a proper\n        # condition instead\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSGLXAPPLICATION \"Build WindowlessGlxApplication library\" OFF \"ON\" OFF)\n    endif()\n    option(MAGNUM_WITH_GLXCONTEXT \"Build GlxContext library\" OFF)\n    option(MAGNUM_WITH_XEGLAPPLICATION \"Build XEglApplication library\" OFF)\n\n# Windows-specific application libraries\nelseif(CORRADE_TARGET_WINDOWS)\n    # WindowlessWglApplication implied by the CLI tools unless targeting EGL\n    if(NOT MAGNUM_TARGET_EGL)\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSWGLAPPLICATION \"Build WindowlessWglApplication library\" OFF \"NOT MAGNUM_WITH_GL_INFO;NOT MAGNUM_WITH_FONTCONVERTER;NOT MAGNUM_WITH_DISTANCEFIELDCONVERTER\" ON)\n    else()\n        # TODO when CMake 3.22 can be relied on, clean this up to use a proper\n        # condition instead\n        cmake_dependent_option(MAGNUM_WITH_WINDOWLESSWGLAPPLICATION \"Build WindowlessWglApplication library\" OFF \"ON\" OFF)\n    endif()\n    option(MAGNUM_WITH_WGLCONTEXT \"Build WglContext library\" OFF)\nendif()\n\n# Platform-independent (almost) application libraries\nif(NOT CORRADE_TARGET_ANDROID)\n    option(MAGNUM_WITH_SDL2APPLICATION \"Build Sdl2Application library\" OFF)\nendif()\nif(NOT CORRADE_TARGET_ANDROID AND NOT CORRADE_TARGET_IOS AND NOT CORRADE_TARGET_EMSCRIPTEN)\n    option(MAGNUM_WITH_GLFWAPPLICATION \"Build GlfwApplication library\" OFF)\nendif()\n\noption(MAGNUM_BUILD_DEPRECATED \"Include deprecated API in the build\" ON)\n\nset(MAGNUM_DEPLOY_PREFIX \".\"\n    CACHE STRING \"Prefix where to put final application executables\")\n\n# It's inconvenient to manually load all shared libs using Android / JNI,\n# similarly on Emscripten, so there default to static.\nif(CORRADE_TARGET_EMSCRIPTEN OR CORRADE_TARGET_ANDROID)\n    set(OFF_EXCEPT_ANDROID_EMSCRIPTEN ON)\nelse()\n    set(OFF_EXCEPT_ANDROID_EMSCRIPTEN OFF)\nendif()\noption(MAGNUM_BUILD_STATIC \"Build static libraries\" ${OFF_EXCEPT_ANDROID_EMSCRIPTEN})\n# Disable PIC on Emscripten by default (but still allow it to be enabled\n# explicitly if one so desires). Currently causes linker errors related to\n# __memory_base etc.: https://github.com/emscripten-core/emscripten/issues/8761\nif(CORRADE_TARGET_EMSCRIPTEN)\n    set(ON_EXCEPT_EMSCRIPTEN OFF)\nelse()\n    set(ON_EXCEPT_EMSCRIPTEN ON)\nendif()\noption(MAGNUM_BUILD_STATIC_PIC \"Build static libraries and plugins with position-independent code\" ${ON_EXCEPT_EMSCRIPTEN})\ncmake_dependent_option(MAGNUM_BUILD_STATIC_UNIQUE_GLOBALS \"Build static libraries with globals unique across shared libraries\" ${ON_EXCEPT_EMSCRIPTEN} \"MAGNUM_BUILD_STATIC\" OFF)\n# It makes no sense to build dynamic plugins if PluginManager can't load them\nif(CORRADE_PLUGINMANAGER_NO_DYNAMIC_PLUGIN_SUPPORT)\n    set(MAGNUM_BUILD_PLUGINS_STATIC ON CACHE BOOL \"Build static plugins\" FORCE)\nelse()\n    option(MAGNUM_BUILD_PLUGINS_STATIC \"Build static plugins\" OFF)\nendif()\noption(MAGNUM_BUILD_TESTS \"Build unit tests\" OFF)\ncmake_dependent_option(MAGNUM_BUILD_GL_TESTS \"Build unit tests for OpenGL code\" OFF \"MAGNUM_BUILD_TESTS;MAGNUM_TARGET_GL\" OFF)\ncmake_dependent_option(MAGNUM_BUILD_AL_TESTS \"Build unit tests for OpenAL code\" ON \"MAGNUM_BUILD_TESTS;MAGNUM_WITH_AUDIO\" OFF)\ncmake_dependent_option(MAGNUM_BUILD_VK_TESTS \"Build unit tests for Vulkan code\" OFF \"MAGNUM_BUILD_TESTS;MAGNUM_TARGET_VK\" OFF)\n\nif(CORRADE_TARGET_WINDOWS AND NOT CORRADE_TARGET_WINDOWS_RT)\n    # TODO is there some cmake_dependent_option() but for strings? I.e., to\n    #   hide this if a static build isn't enabled? I don't want to repeat the\n    #   complicated logic from inside cmake_dependent_option() just for a\n    #   single option.\n    set(MAGNUM_BUILD_STATIC_UNIQUE_GLOBALS_DLL_NAME \"\"\n        CACHE STRING \"Name of a DLL in which to search for unique globals symbols if MAGNUM_BUILD_STATIC_UNIQUE_GLOBALS is enabled\")\nendif()\n\n# OpenGLTester / VulkanTester libraries, built by default only if GL / VK tests\n# are enabled\ncmake_dependent_option(MAGNUM_WITH_OPENGLTESTER \"Build OpenGLTester library\" OFF \"NOT MAGNUM_BUILD_GL_TESTS\" ON)\ncmake_dependent_option(MAGNUM_WITH_VULKANTESTER \"Build VulkanTester library\" OFF \"NOT MAGNUM_BUILD_VK_TESTS\" ON)\n\n# Backwards compatibility for unprefixed CMake options. If the user isn't\n# explicitly using prefixed options in the first run already, accept the\n# unprefixed options, and remember this decision for subsequent runs\nif(NOT DEFINED _MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS)\n    set(_MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS ON CACHE INTERNAL \"\")\nendif()\n# If the user wasn't explicitly using prefixed options in the first run and the\n# MAGNUM_BUILD_DEPRECATED option is not currently disabled (which can get\n# changed subsequently), accept the unprefixed options and print a warning if\n# they're different from the prefixed ones.\nif(_MAGNUM_ACCEPT_DEPRECATED_UNPREFIXED_OPTIONS AND MAGNUM_BUILD_DEPRECATED)\n    # The following variables need extra care -- mirroring what's done in\n    # cmake_dependent_option(), but only the cases that enable a dependency\n    # that is off by default, not cases that hide an option from the GUI when\n    # it's needed by something else or cases that disable and hide the option\n    # from the GUI on unsupported platforms. In other words, if the original\n    # user flag setup didn't make sense before but the option dependency fixed\n    # it, it'll be broken now, but if it made sense, it should keep working.\n    #\n    # Doing this before propagating the unprefixed options to avoid a\n    # false-positive warning when e.g. MAGNUM_BUILD_STATIC_PIC is implicitly ON\n    # but BUILD_STATIC_PIC not yet.\n    if(TARGET_GLES)\n        if(NOT DEFINED TARGET_GLES2)\n            set(TARGET_GLES2 ON)\n        endif()\n    endif()\n    if(BUILD_STATIC)\n        if(NOT CORRADE_TARGET_EMSCRIPTEN AND NOT DEFINED BUILD_STATIC_PIC)\n            set(BUILD_STATIC_PIC ON)\n        endif()\n        if(NOT CORRADE_TARGET_EMSCRIPTEN AND NOT DEFINED BUILD_STATIC_UNIQUE_GLOBALS)\n            set(BUILD_STATIC_UNIQUE_GLOBALS ON)\n        endif()\n    endif()\n    if(BUILD_TESTS)\n        if(NOT DEFINED BUILD_AL_TESTS)\n            set(BUILD_AL_TESTS ON)\n        endif()\n    endif()\n    if(BUILD_GL_TESTS)\n        if(NOT DEFINED WITH_OPENGLTESTER)\n            set(WITH_OPENGLTESTER ON)\n        endif()\n    endif()\n    if(BUILD_VK_TESTS)\n        if(NOT DEFINED WITH_VULKANTESTER)\n            set(WITH_VULKANTESTER ON)\n        endif()\n    endif()\n    if(WITH_MAGNUMFONTCONVERTER)\n        if(NOT DEFINED WITH_TGAIMAGECONVERTER)\n            set(WITH_TGAIMAGECONVERTER ON)\n        endif()\n    endif()\n    if(WITH_MAGNUMFONT)\n        if(NOT DEFINED WITH_TGAIMPORTER)\n            set(WITH_TGAIMPORTER ON)\n        endif()\n    endif()\n    if(WITH_AL_INFO OR WITH_ANYAUDIOIMPORTER OR WITH_WAVAUDIOIMPORTER)\n        if(NOT DEFINED WITH_AUDIO)\n            set(WITH_AUDIO ON)\n        endif()\n    endif()\n    if(WITH_GL_INFO OR WITH_OPENGLTESTER OR WITH_DISTANCEFIELDCONVERTER)\n        if(CORRADE_TARGET_ANDROID OR CORRADE_TARGET_EMSCRIPTEN)\n            if(NOT DEFINED WITH_WINDOWLESSEGLAPPLICATION)\n                set(WITH_WINDOWLESSEGLAPPLICATION ON)\n            endif()\n        elseif(CORRADE_TARGET_IOS)\n            if(NOT DEFINED WITH_WINDOWLESSIOSAPPLICATION)\n                set(WITH_WINDOWLESSIOSAPPLICATION ON)\n            endif()\n        elseif(CORRADE_TARGET_APPLE AND NOT TARGET_GLES AND NOT CORRADE_TARGET_IOS AND NOT CORRADE_TARGET_ANDROID AND NOT CORRADE_TARGET_EMSCRIPTEN AND NOT CORRADE_TARGET_WINDOWS_RT)\n            if(NOT DEFINED WITH_WINDOWLESSCGLAPPLICATION)\n                set(WITH_WINDOWLESSCGLAPPLICATION ON)\n            endif()\n        elseif(CORRADE_TARGET_UNIX)\n            # Checking the old deprecated options here, checking\n            # MAGNUM_TARGET_EGL wouldn't make sense as that's an option the\n            # old code definitely won't use.\n            if((NOT TARGET_GLES AND NOT CORRADE_TARGET_IOS AND NOT CORRADE_TARGET_ANDROID AND NOT CORRADE_TARGET_EMSCRIPTEN AND NOT CORRADE_TARGET_WINDOWS_RT AND NOT TARGET_HEADLESS) OR TARGET_DESKTOP_GLES)\n                if(NOT DEFINED WITH_WINDOWLESSGLXAPPLICATION)\n                    set(WITH_WINDOWLESSGLXAPPLICATION ON)\n                endif()\n            else()\n                if(NOT DEFINED WITH_WINDOWLESSEGLAPPLICATION)\n                    set(WITH_WINDOWLESSEGLAPPLICATION ON)\n                endif()\n            endif()\n        elseif(CORRADE_TARGET_WINDOWS)\n            if((NOT TARGET_GLES AND NOT CORRADE_TARGET_IOS AND NOT CORRADE_TARGET_ANDROID AND NOT CORRADE_TARGET_EMSCRIPTEN AND NOT CORRADE_TARGET_WINDOWS_RT) OR TARGET_DESKTOP_GLES)\n                if(NOT DEFINED WITH_WINDOWLESSWGLAPPLICATION)\n                    set(WITH_WINDOWLESSWGLAPPLICATION ON)\n                endif()\n            else()\n                if(NOT DEFINED WITH_WINDOWLESSEGLAPPLICATION)\n                    set(WITH_WINDOWLESSEGLAPPLICATION ON)\n                endif()\n            endif()\n        endif()\n    endif()\n    if(WITH_VK_INFO OR WITH_VULKANTESTER)\n        if(NOT DEFINED WITH_VK)\n            set(WITH_VK ON)\n        endif()\n    endif()\n    if(WITH_VK)\n        if(NOT DEFINED TARGET_VK)\n            set(TARGET_VK ON)\n        endif()\n    endif()\n\n    set(_MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION )\n    foreach(option ${_MAGNUM_DEPRECATED_UNPREFIXED_OPTIONS})\n        if(DEFINED ${option})\n            # CMake has no comparison of boolean values (EQUAL returns false if\n            # comparing ON and 1 or OFF and FALSE, STREQUAL also), so we have\n            # to do it this way. Also warn only on the first encountered\n            # variable so people can fix it, reconfigure and go to the next one\n            # that warns.\n            if((${option} AND NOT MAGNUM_${option}) OR\n               (NOT ${option} AND MAGNUM_${option}) AND NOT _MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION)\n                set(_MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION ${option})\n            endif()\n            set(MAGNUM_${option} ${${option}})\n            # If variables specified on the command line don't match any\n            # options, they're kept in cache but set as UNINITIALIZED, meaning\n            # they don't appear in cmake-gui or ccmake, so there's no way to\n            # fix the warning apart from hand-enditing the CMakeCache.txt or\n            # recreating the build dir. Update their cached type to be BOOL to\n            # make them appear.\n            set(${option} ${${option}} CACHE BOOL \"Deprecated, use MAGNUM_${option} instead\" FORCE)\n        endif()\n    endforeach()\n\n    if(_MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION)\n        message(DEPRECATION \"Unprefixed options such as ${_MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION} are deprecated, use MAGNUM_${_MAGNUM_WARN_DEPRECATED_UNPREFIXED_OPTION} instead. Delete the unprefixed variable from CMake cache or set both to the same value to silence this warning.\")\n    endif()\nendif()\n\n# Handle other deprecated options. For non-deprecated builds CMake will at most\n# warn about \"variable being unused\". Done after the MAGNUM_ prefix backwards\n# compatibility above to pick up also the old names, i.e. TARGET_HEADLESS ->\n# MAGNUM_TARGET_EGL.\nif(MAGNUM_BUILD_DEPRECATED)\n    # BUILD_MULTITHREADED got moved to Corrade itself. Print a warning in case\n    # it's set but Corrade reports a different value. We can't print a warning\n    # in case it's set because that would cause false positives when both\n    # Corrade and Magnum are subprojects (and thus this option is visible to\n    # both).\n    if(DEFINED BUILD_MULTITHREADED AND ((NOT CORRADE_BUILD_MULTITHREADED AND BUILD_MULTITHREADED) OR (CORRADE_BUILD_MULTITHREADED AND NOT BUILD_MULTITHREADED)))\n        message(DEPRECATION \"BUILD_MULTITHREADED (set to ${BUILD_MULTITHREADED}) is now ignored — you need to set it when building Corrade instead (there it's ${CORRADE_BUILD_MULTITHREADED} now)\")\n    endif()\n\n    # The following two options were desktop-only, so don't handle any\n    # backwards compatibility on mobile / web platforms\n    if(NOT CORRADE_TARGET_IOS AND NOT CORRADE_TARGET_ANDROID AND NOT CORRADE_TARGET_EMSCRIPTEN AND NOT CORRADE_TARGET_WINDOWS_RT)\n        # MAGNUM_TARGET_HEADLESS is now MAGNUM_TARGET_EGL. Print a warning in\n        # case we're on desktop GL (where it was meant to be used) and the two\n        # are set to a different value, and sync them.\n        if(NOT MAGNUM_TARGET_GLES AND DEFINED MAGNUM_TARGET_HEADLESS AND ((NOT MAGNUM_TARGET_EGL AND MAGNUM_TARGET_HEADLESS) OR (MAGNUM_TARGET_EGL AND NOT MAGNUM_TARGET_HEADLESS)))\n            message(DEPRECATION \"MAGNUM_TARGET_HEADLESS is deprecated, use MAGNUM_TARGET_EGL instead\")\n            set(MAGNUM_TARGET_EGL ${MAGNUM_TARGET_HEADLESS})\n        endif()\n\n        # MAGNUM_TARGET_DESKTOP_GLES is now an inverse of MAGNUM_TARGET_EGL.\n        # Print a warning in case we're on GLES (where it was meant to be used)\n        # and the two are set to a different value, and sync them.\n        if(MAGNUM_TARGET_GLES AND DEFINED MAGNUM_TARGET_DESKTOP_GLES AND ((MAGNUM_TARGET_EGL AND MAGNUM_TARGET_DESKTOP_GLES) OR (NOT MAGNUM_TARGET_EGL AND NOT MAGNUM_TARGET_DESKTOP_GLES)))\n            message(DEPRECATION \"MAGNUM_TARGET_DESKTOP_GLES is deprecated, use MAGNUM_TARGET_EGL instead\")\n            if(MAGNUM_TARGET_DESKTOP_GLES)\n                set(MAGNUM_TARGET_EGL OFF)\n            else()\n                set(MAGNUM_TARGET_EGL ON)\n            endif()\n        endif()\n    endif()\nendif()\n\n# Check dependencies\nif(MAGNUM_WITH_GL)\n    if(NOT MAGNUM_TARGET_GLES OR (MAGNUM_TARGET_GLES AND NOT MAGNUM_TARGET_EGL AND NOT CORRADE_TARGET_IOS))\n        find_package(OpenGL REQUIRED)\n    elseif(MAGNUM_TARGET_GLES2)\n        find_package(OpenGLES2 REQUIRED)\n    else()\n        find_package(OpenGLES3 REQUIRED)\n    endif()\nelse()\n    # Especially now with the backwards compatibility for unprefixed variables\n    # it's easiest to just force-disable all this\n    set(MAGNUM_TARGET_GL OFF)\n    # These are implicitly enabled for embedded platforms, disable them all for\n    # consistency\n    set(MAGNUM_TARGET_GLES OFF)\n    set(MAGNUM_TARGET_GLES2 OFF)\n    set(MAGNUM_TARGET_EGL OFF)\nendif()\n\nif(NOT MAGNUM_WITH_VK)\n    # Especially now with the backwards compatibility for unprefixed variables\n    # it's easiest to just force-disable this\n    set(MAGNUM_TARGET_VK OFF)\nendif()\n\n# Dependent configuration variables\nif(MAGNUM_TARGET_GLES)\n    if(MAGNUM_BUILD_DEPRECATED AND NOT MAGNUM_TARGET_GLES2)\n        set(MAGNUM_TARGET_GLES3 1)\n    endif()\n    if(CORRADE_TARGET_EMSCRIPTEN)\n        set(MAGNUM_TARGET_WEBGL 1)\n    endif()\nendif()\n\n# Testing setup\nif(MAGNUM_BUILD_TESTS)\n    find_package(Corrade REQUIRED TestSuite)\n    if(CORRADE_TARGET_IOS)\n        set(CORRADE_TESTSUITE_BUNDLE_IDENTIFIER_PREFIX \"cz.mosra.magnum\")\n    endif()\n    enable_testing()\n\n    # For experimental Gradle-less Android APK creation. Only with CMake > 3.7\n    # that has builtin Android support -- Gradle uses 3.6 so this will nicely\n    # work in both cases.\n    if(CORRADE_TARGET_ANDROID AND CMAKE_ANDROID_NDK)\n        include(${PROJECT_SOURCE_DIR}/toolchains/modules/UseAndroid.cmake)\n    endif()\n\n    # If CORRADE_TESTSUITE_TEST_TARGET is set, tests aren't built by default\n    # (in the ALL target) but instead set as dependencies of a target named\n    # after the value of CORRADE_TESTSUITE_TEST_TARGET. This is a copy of\n    # what's done in corrade_add_test(), because we also build various test\n    # libraries and plugins in addition to the test executables.\n    if(CORRADE_TESTSUITE_TEST_TARGET)\n        if(NOT TARGET ${CORRADE_TESTSUITE_TEST_TARGET})\n            add_custom_target(${CORRADE_TESTSUITE_TEST_TARGET})\n        endif()\n        set(EXCLUDE_FROM_ALL_IF_TEST_TARGET EXCLUDE_FROM_ALL)\n    endif()\nendif()\n\nif(MAGNUM_WITH_OPENGLTESTER)\n    if(MAGNUM_TARGET_EGL)\n        set(MAGNUM_WITH_WINDOWLESSEGLAPPLICATION ON)\n        set(OPENGLTESTER_APPLICATION MagnumWindowlessEglApplication)\n    elseif(CORRADE_TARGET_IOS)\n        set(MAGNUM_WITH_WINDOWLESSIOSAPPLICATION ON)\n        set(OPENGLTESTER_APPLICATION MagnumWindowlessIosApplication)\n    elseif(CORRADE_TARGET_APPLE AND NOT MAGNUM_TARGET_GLES)\n        set(MAGNUM_WITH_WINDOWLESSCGLAPPLICATION ON)\n        set(OPENGLTESTER_APPLICATION MagnumWindowlessCglApplication)\n    elseif(CORRADE_TARGET_UNIX)\n        set(MAGNUM_WITH_WINDOWLESSGLXAPPLICATION ON)\n        set(OPENGLTESTER_APPLICATION MagnumWindowlessGlxApplication)\n    elseif(CORRADE_TARGET_WINDOWS)\n        set(MAGNUM_WITH_WINDOWLESSWGLAPPLICATION ON)\n        set(OPENGLTESTER_APPLICATION MagnumWindowlessWglApplication)\n    else()\n        # Assuming this gets hit only if MAGNUM_BUILD_GL_TESTS are enabled\n        message(FATAL_ERROR \"Cannot run tests for OpenGL code on this platform. Set MAGNUM_BUILD_GL_TESTS to OFF to skip building them.\")\n    endif()\nendif()\n\nif(NOT MAGNUM_BUILD_STATIC)\n    set(SHARED_OR_STATIC SHARED)\nelse()\n    set(SHARED_OR_STATIC STATIC)\nendif()\n\n# If we're in a CMake subproject, find_package(Magnum) will be looking for\n# these when targeting Emscripten, so supply their in-source location\nif(CORRADE_TARGET_EMSCRIPTEN AND NOT PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(MAGNUM_EMSCRIPTENAPPLICATION_JS ${PROJECT_SOURCE_DIR}/src/Magnum/Platform/EmscriptenApplication.js CACHE INTERNAL \"\" FORCE)\n    set(MAGNUM_WINDOWLESSEMSCRIPTENAPPLICATION_JS ${PROJECT_SOURCE_DIR}/src/Magnum/Platform/WindowlessEmscriptenApplication.js CACHE INTERNAL \"\" FORCE)\n    set(MAGNUM_WEBAPPLICATION_CSS ${PROJECT_SOURCE_DIR}/src/Magnum/Platform/WebApplication.css CACHE INTERNAL \"\" FORCE)\nendif()\n\n# Installation paths\ninclude(${CORRADE_LIB_SUFFIX_MODULE})\nset(MAGNUM_BINARY_INSTALL_DIR bin)\nset(MAGNUM_LIBRARY_INSTALL_DIR lib${LIB_SUFFIX})\nset(MAGNUM_DATA_INSTALL_DIR share/magnum)\nset(MAGNUM_CMAKE_MODULE_INSTALL_DIR share/cmake/Magnum)\nset(MAGNUM_INCLUDE_INSTALL_DIR include/Magnum)\nset(MAGNUM_EXTERNAL_INCLUDE_INSTALL_DIR include/MagnumExternal)\nset(MAGNUM_PLUGINS_INCLUDE_INSTALL_DIR include/MagnumPlugins)\nif(MAGNUM_BUILD_DEPRECATED AND MAGNUM_INCLUDE_INSTALL_PREFIX AND NOT MAGNUM_INCLUDE_INSTALL_PREFIX STREQUAL \".\")\n    message(DEPRECATION \"MAGNUM_INCLUDE_INSTALL_PREFIX is obsolete as its primary use was for old Android NDK versions. Please switch to the NDK r19+ layout instead of using this variable and recreate your build directory to get rid of this warning.\")\n    set(MAGNUM_DATA_INSTALL_DIR ${MAGNUM_INCLUDE_INSTALL_PREFIX}/${MAGNUM_DATA_INSTALL_DIR})\n    set(MAGNUM_CMAKE_MODULE_INSTALL_DIR ${MAGNUM_INCLUDE_INSTALL_PREFIX}/${MAGNUM_CMAKE_MODULE_INSTALL_DIR})\n    set(MAGNUM_INCLUDE_INSTALL_DIR ${MAGNUM_INCLUDE_INSTALL_PREFIX}/${MAGNUM_INCLUDE_INSTALL_DIR})\n    set(MAGNUM_EXTERNAL_INCLUDE_INSTALL_DIR ${MAGNUM_INCLUDE_INSTALL_PREFIX}/${MAGNUM_EXTERNAL_INCLUDE_INSTALL_DIR})\n    set(MAGNUM_PLUGINS_INCLUDE_INSTALL_DIR ${MAGNUM_INCLUDE_INSTALL_PREFIX}/${MAGNUM_PLUGINS_INCLUDE_INSTALL_DIR})\nendif()\n\n# Separate install dirs for debug and release plugins\nset(MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_BINARY_INSTALL_DIR}/magnum-d)\nset(MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_LIBRARY_INSTALL_DIR}/magnum-d)\nset(MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_BINARY_INSTALL_DIR}/magnum)\nset(MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_LIBRARY_INSTALL_DIR}/magnum)\n\nset(MAGNUM_PLUGINS_FONT_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/fonts)\nset(MAGNUM_PLUGINS_FONT_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/fonts)\nset(MAGNUM_PLUGINS_FONT_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/fonts)\nset(MAGNUM_PLUGINS_FONT_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/fonts)\nset(MAGNUM_PLUGINS_FONTCONVERTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/fontconverters)\nset(MAGNUM_PLUGINS_FONTCONVERTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/fontconverters)\nset(MAGNUM_PLUGINS_FONTCONVERTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/fontconverters)\nset(MAGNUM_PLUGINS_FONTCONVERTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/fontconverters)\nset(MAGNUM_PLUGINS_IMAGECONVERTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/imageconverters)\nset(MAGNUM_PLUGINS_IMAGECONVERTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/imageconverters)\nset(MAGNUM_PLUGINS_IMAGECONVERTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/imageconverters)\nset(MAGNUM_PLUGINS_IMAGECONVERTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/imageconverters)\nset(MAGNUM_PLUGINS_IMPORTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/importers)\nset(MAGNUM_PLUGINS_IMPORTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/importers)\nset(MAGNUM_PLUGINS_IMPORTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/importers)\nset(MAGNUM_PLUGINS_IMPORTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/importers)\nset(MAGNUM_PLUGINS_SCENECONVERTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/sceneconverters)\nset(MAGNUM_PLUGINS_SCENECONVERTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/sceneconverters)\nset(MAGNUM_PLUGINS_SCENECONVERTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/sceneconverters)\nset(MAGNUM_PLUGINS_SCENECONVERTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/sceneconverters)\nset(MAGNUM_PLUGINS_SHADERCONVERTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/shaderconverters)\nset(MAGNUM_PLUGINS_SHADERCONVERTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/shaderconverters)\nset(MAGNUM_PLUGINS_SHADERCONVERTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/shaderconverters)\nset(MAGNUM_PLUGINS_SHADERCONVERTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/shaderconverters)\nset(MAGNUM_PLUGINS_AUDIOIMPORTER_DEBUG_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR}/audioimporters)\nset(MAGNUM_PLUGINS_AUDIOIMPORTER_DEBUG_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR}/audioimporters)\nset(MAGNUM_PLUGINS_AUDIOIMPORTER_RELEASE_BINARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR}/audioimporters)\nset(MAGNUM_PLUGINS_AUDIOIMPORTER_RELEASE_LIBRARY_INSTALL_DIR ${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR}/audioimporters)\n\n# Plugin dirs based on whether we are in debug or release build, needed by some\n# command-line tools\nif(CORRADE_TARGET_WINDOWS)\n    set(MAGNUM_PLUGINS_DEBUG_DIR_INIT ${CMAKE_INSTALL_PREFIX}/${MAGNUM_PLUGINS_DEBUG_BINARY_INSTALL_DIR})\n    set(MAGNUM_PLUGINS_RELEASE_DIR_INIT ${CMAKE_INSTALL_PREFIX}/${MAGNUM_PLUGINS_RELEASE_BINARY_INSTALL_DIR})\nelse()\n    set(MAGNUM_PLUGINS_DEBUG_DIR_INIT ${CMAKE_INSTALL_PREFIX}/${MAGNUM_PLUGINS_DEBUG_LIBRARY_INSTALL_DIR})\n    set(MAGNUM_PLUGINS_RELEASE_DIR_INIT ${CMAKE_INSTALL_PREFIX}/${MAGNUM_PLUGINS_RELEASE_LIBRARY_INSTALL_DIR})\nendif()\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(MAGNUM_PLUGINS_DIR_INIT ${MAGNUM_PLUGINS_DEBUG_DIR_INIT})\nelse()\n    set(MAGNUM_PLUGINS_DIR_INIT ${MAGNUM_PLUGINS_RELEASE_DIR_INIT})\nendif()\n\n# Make these paths configurable from outside. This is *not* PATH, because CMake\n# always converts the path to an absolute location internally, making it\n# impossible to specify relative paths there. Sorry in advance for not having\n# the dir selection button in CMake GUI.\nset(MAGNUM_PLUGINS_DEBUG_DIR \"\"\n    CACHE STRING \"Base directory where to look for Magnum plugins for debug builds\")\nset(MAGNUM_PLUGINS_RELEASE_DIR \"\"\n    CACHE STRING \"Base directory where to look for Magnum plugins for release builds\")\nset(MAGNUM_PLUGINS_DIR \"\"\n    CACHE STRING \"Base directory where to look for Magnum plugins\")\n\n# Plugin directories. Set only if the above are non-empty. otherwise empty as\n# well.\nif(MAGNUM_PLUGINS_DIR)\n    set(MAGNUM_PLUGINS_SHADERCONVERTER_DIR ${MAGNUM_PLUGINS_DIR}/shaderconverters)\n    set(MAGNUM_PLUGINS_FONT_DIR ${MAGNUM_PLUGINS_DIR}/fonts)\n    set(MAGNUM_PLUGINS_FONTCONVERTER_DIR ${MAGNUM_PLUGINS_DIR}/fontconverters)\n    set(MAGNUM_PLUGINS_IMAGECONVERTER_DIR ${MAGNUM_PLUGINS_DIR}/imageconverters)\n    set(MAGNUM_PLUGINS_IMPORTER_DIR ${MAGNUM_PLUGINS_DIR}/importers)\n    set(MAGNUM_PLUGINS_SCENECONVERTER_DIR ${MAGNUM_PLUGINS_DIR}/sceneconverters)\n    set(MAGNUM_PLUGINS_AUDIOIMPORTER_DIR ${MAGNUM_PLUGINS_DIR}/audioimporters)\nendif()\nif(MAGNUM_PLUGINS_DEBUG_DIR)\n    set(MAGNUM_PLUGINS_SHADERCONVERTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/shaderconverters)\n    set(MAGNUM_PLUGINS_FONT_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/fonts)\n    set(MAGNUM_PLUGINS_FONTCONVERTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/fontconverters)\n    set(MAGNUM_PLUGINS_IMAGECONVERTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/imageconverters)\n    set(MAGNUM_PLUGINS_IMPORTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/importers)\n    set(MAGNUM_PLUGINS_FONT_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/fonts)\n    set(MAGNUM_PLUGINS_SCENECONVERTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/sceneconverters)\n    set(MAGNUM_PLUGINS_AUDIOIMPORTER_DEBUG_DIR ${MAGNUM_PLUGINS_DEBUG_DIR}/audioimporters)\nendif()\nif(MAGNUM_PLUGINS_RELEASE_DIR)\n    set(MAGNUM_PLUGINS_SHADERCONVERTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/shaderconverters)\n    set(MAGNUM_PLUGINS_FONTCONVERTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/fontconverters)\n    set(MAGNUM_PLUGINS_IMAGECONVERTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/imageconverters)\n    set(MAGNUM_PLUGINS_IMPORTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/importers)\n    set(MAGNUM_PLUGINS_SCENECONVERTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/sceneconverters)\n    set(MAGNUM_PLUGINS_AUDIOIMPORTER_RELEASE_DIR ${MAGNUM_PLUGINS_RELEASE_DIR}/audioimporters)\nendif()\n\n# Library version. MAGNUM_VERSION_YEAR/MONTH is used in\n# src/Magnum/CMakeLists.txt to generate the version.h header.\nset(MAGNUM_LIBRARY_VERSION 2.4)\nset(MAGNUM_LIBRARY_SOVERSION 2)\nset(MAGNUM_VERSION_YEAR 2020)\nset(MAGNUM_VERSION_MONTH 6)\n\n# A single output location. After a decade of saying NO THIS IS A NON-SOLUTION\n# TO A NON-PROBLEM I reconsidered my views and enabled this, because:\n#\n# - On Windows (which don't have RPATH), this makes test execution finally\n#   possible without having to install all the stuff first (including the\n#   test-only libs, which is ugh).\n# - With CMake subprojects, this makes it finally possible to use dynamic\n#   plugins directly from the build dir (again without installing anything) ---\n#   all plugins are put into the same place, so PluginManager has a single\n#   place to look into; and thanks to the dynamic libraries being there as\n#   well, this location can be automagically detected as relative to\n#   Utility::Path::libraryLocation().\n# - Thanks to the $<CONFIG> being part of the output path, you are always sure\n#   you never accidentally mix up debug/release libraries when switching\n#   CMAKE_BUILD_TYPE in an existing build dir.\n#\n# The runtime location is set to CMAKE_BINARY_DIR and not PROJECT_BINARY_DIR\n# because have one runtime location per CMake subproject would not solve much\n# either. If the user already provides CMAKE_RUNTIME_OUTPUT_DIRECTORY (even\n# empty), it's respected and nothing is being done.\n#\n# Explicitly using a generator expression to ensure plugins are added to e.g.\n# <CONFIG>/lib/magnum/importers/ instead of lib/magnum/importers/<CONFIG>. Also\n# adding this to cache, making superprojects pick that up implicitly as well,\n# without forcing them to explicitly mirror this setting.\nif(NOT DEFINED CMAKE_RUNTIME_OUTPUT_DIRECTORY AND NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY AND NOT DEFINED CMAKE_ARCHIVE_OUTPUT_DIRECTORY)\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/bin CACHE PATH \"\" FORCE)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/lib CACHE PATH \"\" FORCE)\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/lib CACHE PATH \"\" FORCE)\n    # There should be no need for the \"90% use case\" user to adjust these, so\n    # don't show them in the default view\n    mark_as_advanced(\n        CMAKE_RUNTIME_OUTPUT_DIRECTORY\n        CMAKE_LIBRARY_OUTPUT_DIRECTORY\n        CMAKE_ARCHIVE_OUTPUT_DIRECTORY)\nendif()\n\nadd_subdirectory(modules)\nadd_subdirectory(src)\n\n# Build snippets as part of testing. Unlike all other Test/ directories, this\n# one isn't added with ${EXCLUDE_FROM_ALL_IF_TEST_TARGET} because the targets\n# from there aren't referenced by CTest and thus it'd likely happen that they\n# accidentally don't get added as a dependency to that target, causing them to\n# be never built. Instead, each target there is handled separately, to minimize\n# the chance of an accident.\nif(MAGNUM_BUILD_TESTS)\n    add_subdirectory(doc/snippets)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.466796875,
          "content": "Bug reports, feature requests or code contributions are always very welcome.\nTo make things easier, here are a few tips:\n\nReporting bugs, requesting features\n-----------------------------------\n\n-   Best way to report bugs and request new features is to use GitHub\n    [Issues](https://github.com/mosra/magnum/issues), but you can contact the\n    team also any other way — see the [README](README.md) for details.\n\nCode contribution\n-----------------\n\n-   Best way to contribute is using GitHub [Pull Requests](https://github.com/mosra/magnum/pulls)\n    — fork the repository and make a pull request from a feature branch. You\n    can also send patches via e-mail or contact the team in any other way — see\n    the [README](README.md) for details.\n-   Follow the project coding guidelines. In short — try to match style of the\n    surrounding code and avoid any trailing whitespace. When in doubt, consult\n    [Coding Style](https://doc.magnum.graphics/magnum/coding-style.html)\n    guidelines.\n-   There's a [Developers Guide](https://doc.magnum.graphics/magnum/developers.html)\n    providing step-by-step checklists for almost every development aspect. It's\n    not strictly required to follow it to the point, but doing so will save the\n    maintainers a lot of time during review and merging.\n-   All your code will be released under the project license (see the\n    [COPYING](COPYING) file for details), so make sure you and your\n    collaborators (or employers) have no problems with it.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.1806640625,
          "content": "Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,\n            2020, 2021, 2022, 2023, 2024, 2025\n          Vladimír Vondruš <mosra@centrum.cz> and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 0.4033203125,
          "content": "Third-party components\n----------------------\n\nThird party components that affect public usage of the project are listed\n[in the documentation](https://doc.magnum.graphics/magnum/credits-third-party.html).\n\nContributors to Magnum\n----------------------\n\n[Detailed contributor list](https://doc.magnum.graphics/magnum/credits-contributors.html)\nis maintained in the documentation. Big thanks to everyone involved!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.396484375,
          "content": "Magnum — *Lightweight and modular C++11/C++14 graphics middleware for games and data visualization*\n\nLooking for an open-source library that gives you graphics abstraction and\nplatform independence on major desktop, mobile and web platforms? Do you want\nit to have all the convenience utilities around yet stay small, powerful and\nnot give up on flexibility? *Here it is.* And it's free to use, even for\ncommercial purposes.\n\n[![Join the chat at https://gitter.im/mosra/magnum](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mosra/magnum?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://circleci.com/gh/mosra/magnum.svg?style=shield)](https://circleci.com/gh/mosra/magnum)\n[![Build Status](https://ci.appveyor.com/api/projects/status/5b477m034cfaskse/branch/master?svg=true)](https://ci.appveyor.com/project/mosra/magnum/branch/master)\n[![Coverage Status](https://codecov.io/gh/mosra/magnum/branch/master/graph/badge.svg)](https://codecov.io/gh/mosra/magnum)\n[![Hunter Package](https://img.shields.io/badge/hunter-magnum-lightgrey.svg)](https://hunter.readthedocs.io/en/latest/packages/pkg/magnum.html)\n[![MIT License](https://img.shields.io/badge/license-MIT-green.svg)](https://opensource.org/licenses/MIT)\n\n-   Project homepage — https://magnum.graphics/\n-   Documentation — https://doc.magnum.graphics/\n-   GitHub project page — https://github.com/mosra/magnum\n\nBeauty of simplicity\n====================\n\nAmong Magnum essentials is a UTF-8-aware OS, filesystem and console\nabstraction, a feature-packed vector math library and a slim C++11 wrapper of\nOpenGL / WebGL family of APIs. Build on top of that or opt-in for more.\n\n[See all core features](https://magnum.graphics/features/)\n\nWith batteries included\n=======================\n\nShaders and primitives for fast prototyping, algorithms, debugging and\nautomatic testing, asset management, integration with popular windowing\ntoolkits and a UI library. Everything fits together but you still have a\nchoice.\n\n[List the extra features](https://magnum.graphics/features/extras/)\n\nScrews are not glued in\n=======================\n\nThere's always more than one way to do things. Enjoy the freedom of choice and\nintegrate your own asset loader, texture compressor, font format or math\nlibrary, if you feel the need. Or use any of the various plugins.\n\n[View extension points](https://magnum.graphics/features/extensions/)\n\n-------\n\n*Wondering if Magnum is a good fit for your project?* We prepared\n[a few case studies](https://magnum.graphics/is-magnum-what-i-am-looking-for/)\nto help you decide.\n\nSUPPORTED PLATFORMS\n===================\n\n-   **Linux** and embedded Linux\n-   **Windows** with MSVC, clang-cl and MinGW, **Windows RT** (Store/Phone)\n-   **macOS**, **iOS**\n-   **Android**\n-   **Web** ([asm.js](http://asmjs.org/) or [WebAssembly](http://webassembly.org/)),\n    through [Emscripten](http://kripken.github.io/emscripten-site/)\n\nGraphics APIs:\n\n-   **OpenGL** 2.1 through 4.6, core profile functionality and modern\n    extensions\n-   **OpenGL ES** 2.0, 3.0–3.2 and extensions to match desktop OpenGL\n    functionality\n-   **WebGL** 1.0, 2.0 and extensions to match desktop OpenGL functionality\n\nSee the [Build Status page](https://magnum.graphics/build-status/) for detailed\nper-platform build status.\n\nWHAT'S NEW?\n===========\n\nCurious about what was added or improved recently? Check out the\n[Changelog](https://doc.magnum.graphics/magnum/changelog.html#changelog-latest)\npage in the documentation.\n\nGETTING STARTED\n===============\n\nThe best way to get started is to read the thorough\n[download, build, install and start using Magnum](https://doc.magnum.graphics/magnum/getting-started.html)\nin your project. There is also a complete\n[building documentation](https://doc.magnum.graphics/magnum/building.html) — we\nprovide packages for many platforms, including Windows, Linux and macOS. After\nthat, there are various [tutorials and examples](https://doc.magnum.graphics/magnum/example-index.html)\nand a complete [feature guide](https://doc.magnum.graphics/magnum/features.html)\nexplaining all aspects of the library.\n\nApart from that, various Magnum functionality is available through\n[single-header libraries](https://doc.magnum.graphics/magnum/singles.html).\nJust download a file, `#include` it in your project and you're ready to go! No\nbuildsystem wrangling needed.\n\nRELATED PROJECTS\n================\n\nThe engine itself is kept as small as possible with only a few dependencies.\nAdditional functionality, often depending on external libraries, is provided in\nseparate repositories.\n\n-   **Corrade** — main Magnum dependency, a multiplatform utility library:\n    https://github.com/mosra/corrade\n-   **Magnum Bootstrap** — bootstrap projects for many use cases, helping you\n    get up and running in no time: https://github.com/mosra/magnum-bootstrap\n-   **Magnum Plugins** — various importer plugins for image, font, audio and\n    3D model formats are at https://github.com/mosra/magnum-plugins\n-   **Magnum Integration** — integration with various external math and\n    physics, get it at https://github.com/mosra/magnum-integration\n-   **Magnum Examples** — examples of engine usage, varying from simple\n    *Hello World*-like example to more advanced applications, such as viewer\n    for complex 3D models. See it at https://github.com/mosra/magnum-examples\n-   **Magnum Extras** — playground for testing new APIs, specialized stuff\n    that doesn't necessarily need to be a part of main Magnum repository or\n    mutually exclusive functionality: https://github.com/mosra/magnum-extras\n-   **Magnum Bindings** — bindings to other languages such as Python are at\n    https://github.com/mosra/magnum-bindings\n-   **Magnum Singles** — various functionality from Magnum available as\n    easy-to-integrate fast-to-compile single-header libraries:\n    https://github.com/mosra/magnum-singles\n\nOutside of the project itself, there's also a lot of community contributions\n— [check them out on the website](https://magnum.graphics/features/community/).\n\nCONTACT & SUPPORT\n=================\n\nIf you want to contribute to Magnum, if you spotted a bug, need a feature or\nhave an awesome idea, you can get a copy of the sources from GitHub and start\nright away! There is the already mentioned guide about\n[how to download and build Magnum](https://doc.magnum.graphics/magnum/building.html)\nand also a guide about [coding style and best practices](https://doc.magnum.graphics/magnum/coding-style.html)\nwhich you should follow to keep the library as consistent and maintainable as\npossible.\n\n-   Project homepage — https://magnum.graphics/\n-   Documentation — https://doc.magnum.graphics/\n-   GitHub — https://github.com/mosra/magnum and the\n    [#magnum](https://github.com/topics/magnum) topic\n-   GitLab — https://gitlab.com/mosra/magnum\n-   Gitter community chat — https://gitter.im/mosra/magnum\n-   E-mail — info@magnum.graphics\n-   Google Groups mailing list — magnum-engine@googlegroups.com ([archive](https://groups.google.com/forum/#!forum/magnum-engine))\n-   Twitter — https://twitter.com/czmosra and the\n    [#MagnumEngine](https://twitter.com/hashtag/MagnumEngine) hashtag\n\nSee also the Magnum Project [Contact & Support page](https://magnum.graphics/contact/)\nfor further information.\n\nCREDITS\n=======\n\nSee the [CREDITS.md](CREDITS.md) file for details. Big thanks to everyone\ninvolved!\n\nLICENSE\n=======\n\nMagnum is licensed under the MIT/Expat license, see the [COPYING](COPYING) file\nfor details.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchains",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}