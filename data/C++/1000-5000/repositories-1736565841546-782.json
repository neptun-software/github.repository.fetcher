{
  "metadata": {
    "timestamp": 1736565841546,
    "page": 782,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seetafaceengine/SeetaFace2",
      "stars": 2155,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0673828125,
          "content": "*.swp\r\nMakefile.Debug\r\nMakefile.Release\r\nVersion.h\r\nUpdate/Update_*.xml\r\n*.bak\r\n*~\r\n*.autosave\r\n*.qm\r\n*.user\r\ntest.xml\r\n.CCodec.h.kate-swp\r\n.kdev4/\r\n.kdev_include_paths\r\n.vs/\r\nCMakeSettings.json\r\nbuild-*/\r\nbuild/\r\nbuild_android/\r\nbuild_unix_mingw/\r\nbuild_windows_mingw/\r\nbuild_unix/\r\nbuild_windows_msvc/\r\n*.ncb\r\n.metadata/\r\n*~\r\ndebug/\r\nbin/\r\n*.class\r\n.deps/\r\nMakefile.in\r\naclocal.m4\r\nconfig.guess\r\nconfig.h\r\nconfig.h.in\r\nconfig.h.in~\r\nconfig.log\r\nconfig.status\r\nconfig.sub\r\nconfigure\r\ndepcomp\r\ninstall-sh\r\nlibtool\r\nltmain.sh\r\nmissing\r\nreachmonitor\r\nstamp-h1\r\n.deps/\r\nMakefile.in\r\naclocal.m4\r\nconfig.guess\r\nconfig.h\r\nconfig.h.in\r\nconfig.h.in~\r\nconfig.log\r\nconfig.status\r\nconfig.sub\r\nconfigure\r\ndepcomp\r\ninstall-sh\r\nlibtool\r\nltmain.sh\r\nmissing\r\nstamp-h1\r\n*.bak\r\n*.bs\r\n*.la\r\n*.lo\r\n*.ft\r\n*.ft.1\r\n*.made\r\n*.o\r\n*.obj\r\n*.old\r\n*.orig\r\n*.out\r\n*.pdb\r\n*.rej\r\n.libs/\r\nMakefile\r\n*.cdf\r\n*.cache\r\n*.obj\r\n*.ilk\r\n*.resources\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.rsp\r\n*.pgc\r\n*.pgd\r\n*.meta\r\n*.tlog\r\n*.manifest\r\n*.res\r\n*.pch\r\n*.exp\r\n*.idb\r\n*.rep\r\n*.xdc\r\n*.pdb\r\n*_manifest.rc\r\n*.bsc\r\n*.sbr\r\n*.opensdf\r\n*.sdf\r\n*.suo\r\nDebug/\r\nrelease/\r\nRelease/\r\nipch/\r\nrabbitim.kdev4\r\n*.pro.user.*\r\nDoxygen/\r\nDoxyfile\r\nandroid/local.properties\r\nandroid/gradlew.*\r\nandroid/gradle.properties\r\n*.iml\r\n\r\n# Compiled Object files\r\n*.slo\r\n*.lo\r\n*.o\r\n*.obj\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Compiled Dynamic libraries\r\n*.so\r\n*.dylib\r\n*.dll\r\n\r\n# Fortran module files\r\n*.mod\r\n\r\n# Compiled Static libraries\r\n*.lai\r\n*.la\r\n*.a\r\n*.lib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n\r\n# Platform Specifics - auto generated files\r\nPlatformSpecifics/Windows/*.rc\r\n\r\n# Visual studio - project files\r\n*.sln\r\n*.suo\r\n*.vcxproj\r\n*.vcxproj.filters\r\n*.vcxproj.user\r\n\r\n# Visual Studio - Build Results\r\n[Dd]ebug/\r\n[Rr]elease/\r\n[Mm]in[Ss]ize[Rr]el/\r\n[Rr]el[Ww]ith[Dd]eb[Ii]nfo/\r\n\r\n# Visual Studio - Browsing Database File\r\n*.sdf\r\n*.opensdf\r\n\r\n#osx xcode\r\nDerivedData/\r\n*.DS_Store\r\n*.build\r\n*.xcodeproj\r\n\r\n#CPACK related files\r\nCPackConfig-*.cmake\r\n_CPack_Packages/\r\n\r\n#packages\r\n*.tar.gz\r\n*.zip\r\n\r\nandroid/.gradle/\r\nandroid/.idea/\r\nandroid/android.iml\r\nandroid/gradle/\r\nandroid/gradlew\r\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.275390625,
          "content": "sudo: required\ndist: xenial\nlanguage: cpp\n\ncache:\n  - apt\n  - directories:\n\ncompiler:\n  - g++\n\nos:\n  - unix\n\naddons:\n  ssh_known_hosts:\n    - github.com\n    - frs.sourceforge.net\n\nenv:\n  global:\n    - SOURCE_DIR=$TRAVIS_BUILD_DIR\n    \n  matrix:\n    - BUILD_TARGERT=\"unix\" BUILD_SHARED_LIBS=ON GENERATORS=\"Unix Makefiles\"\n    - BUILD_TARGERT=\"unix\" BUILD_SHARED_LIBS=OFF GENERATORS=\"Unix Makefiles\"\n    \n    - BUILD_TARGERT=\"android\" BUILD_ARCH=\"armeabi-v7a with NEON\" ANDROID_API=android-24 GENERATORS=\"Unix Makefiles\" BUILD_SHARED_LIBS=OFF\n    - BUILD_TARGERT=\"android\" BUILD_ARCH=\"armeabi-v7a\" ANDROID_API=android-18 ANDROID_ARM_NEON=ON GENERATORS=\"Unix Makefiles\" BUILD_SHARED_LIBS=ON\n    - BUILD_TARGERT=\"android\" BUILD_ARCH=\"x86\" ANDROID_API=android-18 GENERATORS=\"Unix Makefiles\" BUILD_SHARED_LIBS=ON\n\nbefore_install:\n  - echo \"TRAVIS_OS_NAME=${TRAVIS_OS_NAME}\"\n  - sudo apt-get install -y -qq xvfb xpra\n  - sudo Xvfb :99 -ac &\n  - export DISPLAY=:99.0\n  - mkdir ${SOURCE_DIR}/Tools\n  - |\n    export VERSION=`git describe --tags`; \\\n    if [ -z \"$VERSION\" ]; then \\\n        export VERSION=`git rev-parse --short HEAD`\n    fi\n  \ninstall:\n  - cd ${SOURCE_DIR}\n  - bash ci/build-install-tools.sh > /dev/null\n\nbefore_script:\n  - cd ${SOURCE_DIR}\n\nscript:\n  - bash ${SOURCE_DIR}/ci/build.sh ${SOURCE_DIR}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.2265625,
          "content": "#\n# Author: Kang Lin<kl222@126.com>\n# Date  : 2019-08-20\n#\n\ncmake_minimum_required(VERSION 2.8)\n\nproject(SeetaFace)\n\n# Create uninstall files\nCONFIGURE_FILE(\n    \"${CMAKE_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n# Create unistall target\nADD_CUSTOM_TARGET(uninstall\n    \"${CMAKE_COMMAND}\" -P \"${CMAKE_BINARY_DIR}/cmake_uninstall.cmake\")\n\n# Set version\n# Find Git Version Patch\nIF(EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    if(NOT GIT)\n        SET(GIT $ENV{GIT})\n    endif()\n    if(NOT GIT)\n        FIND_PROGRAM(GIT NAMES git git.exe git.cmd)\n    endif()\n    IF(GIT)\n        EXECUTE_PROCESS(\n            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n            COMMAND ${GIT} describe --tags\n            OUTPUT_VARIABLE GIT_VERSION  OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n\t    if(NOT GIT_VERSION)\n            EXECUTE_PROCESS(\n                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n                COMMAND ${GIT} rev-parse --short HEAD\n                OUTPUT_VARIABLE GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE\n            )\n        endif()\n        SET(BUILD_VERSION ${GIT_VERSION})\n    ENDIF()\nENDIF()\nif(NOT BUILD_VERSION)\n    SET(BUILD_VERSION \"v2.5.5\")\nendif()\nmessage(STATUS \"== BUILD_VERSION: ${BUILD_VERSION}\")\n\nif(WIN32 OR UNIX)\n    # default used SSE2\n    if(ANDROID OR MINGW)\n\t    option(SEETA_USE_SSE2 \"Set to ON to use SSE2\" OFF)\n    else()\n\t    option(SEETA_USE_SSE2 \"Set to ON to use SSE2\" ON)\n    endif()\n    if (SEETA_USE_SSE2) \n        add_definitions(-DSEETA_USE_SSE2)\n    endif ()\n    # default not used FMA\n    option(SEETA_USE_FMA \"Set to ON to use FMA\" OFF)\n    if (SEETA_USE_FMA) \n        add_definitions(-DSEETA_USE_FMA)\n    endif ()\nendif()\n\nIF(MSVC)\n    # This option is to enable the /MP switch for Visual Studio 2005 and above compilers\n    OPTION(WIN32_USE_MP \"Set to ON to build with the /MP option (Visual Studio 2005 and above).\" ON)\n    MARK_AS_ADVANCED(WIN32_USE_MP)\n    IF(WIN32_USE_MP)\n        add_compile_options(/MP)\n    ENDIF(WIN32_USE_MP)\n    add_compile_options(/utf-8)\nENDIF(MSVC)\nIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\"\n    OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\n    add_compile_options(-std=c++0x -Wno-sign-compare -Wno-unused-parameter)\n    \n#    if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n#        add_compile_options(-g -ggdb)\n#    else()\n#        add_compile_options(-O3 -Os)\n#    endif()\n    \n#    if (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x86\")\n#        add_compile_options(-m32)\n#    elseif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x64\")\n#        add_compile_options(-m64)\n#    elseif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\")\n#        add_compile_options(-m64)\n#    endif()\n\n    if(SEETA_USE_SSE2)\n        add_compile_options(-msse2)\n    endif()\n    if(SEETA_USE_FMA)\n        add_compile_options(-mfma)\n    endif()\n\nENDIF()\n\nSET(BUILD_SHARED_LIBS ON CACHE BOOL \"Build shared libs\")\nif (BUILD_SHARED_LIBS)\n\tadd_definitions(-DBUILD_SHARED_LIBS)\n    if (CMAKE_COMPILER_IS_GNUCXX AND NOT MINGW)\n       # Just setting CMAKE_POSITION_INDEPENDENT_CODE should be enough to set\n       # -fPIC for GCC but sometimes it still doesn't get set, so make sure it\n       # does.\n       add_definitions(\"-fPIC\")\n    endif()\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\ninclude(GenerateExportHeader)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFileCXX)\ninclude(CheckFunctionExists)\n\n#CHECK_INCLUDE_FILE_CXX(\"string\" HAVE_STRING_H)\n#check_include_file(\"math.h\" HAVE_MATH_H)\n\n#check_function_exists(\"fabs\" HAVE_FABS)\n\nset(BUILD_PLATFORM \"${CMAKE_SYSTEM_NAME}\")\n\n# For debug libs and exes, add \"_d\" postfix\nif(NOT DEFINED CMAKE_DEBUG_POSTFIX)\n  set(CMAKE_DEBUG_POSTFIX \"_d\")\nendif()\n\nadd_subdirectory(SeetaNet)\noption(BUILD_DETECOTOR \"Set to ON to build detector\" ON)\nif(BUILD_DETECOTOR)\n    add_subdirectory(FaceDetector)\n    add_subdirectory(FaceTracker)\nendif(BUILD_DETECOTOR)\noption(BUILD_LANDMARKER \"Set to ON to build landmarker\" ON)\nif(BUILD_LANDMARKER)\n    add_subdirectory(FaceLandmarker)\nendif(BUILD_LANDMARKER)\noption(BUILD_RECOGNIZER \"Set to ON to build recognizer\" ON)\nif(BUILD_RECOGNIZER)\n    add_subdirectory(FaceRecognizer)\nendif(BUILD_RECOGNIZER)\noption(BUILD_ASSESSOR \"Set to ON to build quality assessor\" ON)\nif(BUILD_ASSESSOR)\n    add_subdirectory(QualityAssessor)\nendif(BUILD_ASSESSOR)\noption(BUILD_EXAMPLE \"Set to ON to build example\" ON)\nif(BUILD_EXAMPLE)\n    add_subdirectory(example)\nendif(BUILD_EXAMPLE)\n\n# Install configure file\nconfigure_file(SeetaFace.pc.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)\ninstall(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n# Install cmake configure files\ninstall(\n        FILES cmake/${PROJECT_NAME}Config.cmake\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake\"\n)\n\nmessage(STATUS \"== Build detector and tracker: ${BUILD_DETECOTOR}\")\nmessage(STATUS \"== Build landmarker: ${BUILD_LANDMARKER}\")\nmessage(STATUS \"== Build recgnizer: ${BUILD_RECOGNIZER}\")\nmessage(STATUS \"== Build quality assessor: ${BUILD_ASSESSOR}\")\nmessage(STATUS \"== Build example: ${BUILD_EXAMPLE}\")\nmessage(STATUS \"== Build shared library: ${BUILD_SHARED_LIBS}\")\nmessage(STATUS \"== CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}\")\nmessage(STATUS \"== CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\n"
        },
        {
          "name": "FaceDetector",
          "type": "tree",
          "content": null
        },
        {
          "name": "FaceLandmarker",
          "type": "tree",
          "content": null
        },
        {
          "name": "FaceRecognizer",
          "type": "tree",
          "content": null
        },
        {
          "name": "FaceTracker",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3349609375,
          "content": "Copyright (c) 2019, SeetaTech,\nInstitute of Computing Technology, Chinese Academy of Sciences, Beijing, China\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "QualityAssessor",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.583984375,
          "content": "\n# **SeetaFace2**\n\n[![License](https://img.shields.io/badge/license-BSD-blue.svg)](LICENSE)\n\n[中文](./README.md) [English](./README_en.md)\n\n## 1. 简介\n`SeetaFace2` 人脸识别引擎包括了搭建一套全自动人脸识别系统所需的三个核心模块，即：人脸检测模块 `FaceDetector`、面部关键点定位模块 `FaceLandmarker` 以及人脸特征提取与比对模块 `FaceRecognizer`。\n已经两个辅助模块 `FaceTracker` 和 `QualityAssessor` 用于人脸跟踪和质量评估。\n\n<div align=center>\n<img src=\"./asserts/pipeline.png\" width=\"580\" height=\"230\" />\n</div>\n\n`SeetaFace2` 采用标准 C++ 开发，全部模块均不依赖任何第三方库，支持 x86 架构（Windows、Linux）和 ARM 架构（Android）。SeetaFace2 支持的上层应用包括但不限于人脸门禁、无感考勤、人脸比对等。\n\n<div align=center>\n<img src=\"./asserts/grid.png\" width=\"630\" height=\"370\" />\n</div>\n\n\nSeetaFace2 是面向于人脸识别商业落地的里程碑版本，其中人脸检测模块在 FDDB 上的 100 个误检条件下可达到超过 92% 的召回率，面部关键点定位支持 5 点和 81 点定位，1 比 N 模块支持数千人规模底库的人脸识别应用。\n\n\n模块 | 方法概述 | 基础技术指标 | 典型平台速度\n-----|---------|-------------|------------\n**人脸检测** | Cascaded CNN | FDDB 上召回率达到92%（100个误检情况下）。 | 40 最小人脸<br>I7: 70FPS(1920x1080)<br>RK3399: 25FPS(640x480)\n**面部关建点定位(81点和5点)** | FEC-CNN | 平均定位误差（根据两眼中心距离归一化）<br>300-W Challenge Set 上达到 0.069。 | I7: 450FPS 和 500FPS<br>RK3399: 110FPS 和 220FPS\n**人脸特征提取与比对** | ResNet50 | 识别：通用1：N+1场景下，错误接受率1%时，<br>1000人底库，首选识别率超过98%，<br>5000人底库，首选识别率超过95%。 | I7: 8FPS<br>RK3399: 2.5FPS\n\n与 2016 年开源的 `SeetaFace 1.0` 相比，`SeetaFace2` 在速度和精度两个层面上均有数量级的提升。\n\n<table>\n    <tr>\n        <th rowspan=\"2\">版本</th>\n        <th colspan=\"2\">人脸检测</th>\n        <th colspan=\"2\">关键点定位</th>\n        <th colspan=\"2\">人脸识别</th>\n        <th rowspan=\"2\">第三方依赖</th>\n    </tr>\n    <tr>\n        <td>速度[1]</td>\n        <td>单精度[2]</td>\n        <td>速度</td>\n        <td>功能</td>\n        <td>训练数据规模</td>\n        <td>应用</td>\n    </tr>\n    <tr>\n        <th>1.0</th>\n        <td>16FPS</td>\n        <td>85%</td>\n        <td>200FPS</td>\n        <td>5点</td>\n        <td>140万张</td>\n        <td>实验室</td>\n        <td>无</td>\n    </tr>\n    <tr>\n        <th>2.0</th>\n        <td>77FPS</td>\n        <td>92%</td>\n        <td>500FPS</td>\n        <td>5/81点</td>\n        <td>3300万张</td>\n        <td>商业环境</td>\n        <td>无</td>\n    </tr>\n    <tr>\n        <th>备注</th>\n        <td colspan=\"7\">\n            [1] 640x480输入、检测40x40人脸、I7-6700。<br>\n            [2] 人脸检测的精度指100个误捡FDDB数据集的召回率。\n        </td>\n    </tr>\n</table>\n\n知人识面辩万物，开源赋能共发展。`SeetaFace2` 致力于 AI 赋能发展，和行业伙伴一起共同推进人脸识别技术的落地。\n\n\n## 2. 编译\n### 2.1 编译依赖\n+ 编译工具\n  + For linux\n    - GNU Make 工具\n    - GCC 或者 Clang 编译器\n  + For windows\n    - [MSVC](http://msdn.microsoft.com/zh-cn/vstudio) 或者 MinGW. \n  - [CMake](http://www.cmake.org/)\n+ 依赖库\n  - [可选] [OpneCV](http://opencv.org/) 仅编译例子时需要\n+ 依赖架构\n  - CPU 支持 SSE2 和 FMA [可选]（x86）或 NENO（ARM）支持\n\n### 2.2 编译参数\n  - BUILD_DETECOTOR: 是否编译人脸检测模块。ON：打开；OFF：关闭\n  - BUILD_LANDMARKER: 是否编译面部关键点定位模块。ON：打开；OFF：关闭\n  - BUILD_RECOGNIZER: 是否编译人脸特征提取与比对模块。ON：打开；OFF：关闭\n  - BUILD_EXAMPLE: 是否编译例子。ON：打开；OFF：关闭，打开需要预先安装 `OpneCV`\n  - CMAKE_INSTALL_PREFIX: 安装前缀\n  - SEETA_USE_FMA: 是否启用 `FMA` 指令。默认关闭。只有目标是`x86`架构是起作用\n  - SEETA_USE_SSE2: 是否启用 SSE2 指令。window 和 unix 默认为 ON，其它默认为 OFF。\n\n### 2.3 各平台编译\n#### 2.3.1 linux 平台编译说明\n  - 依赖\n    + opencv。仅编译例子时需要\n\n        sudo apt-get install libopencv-dev \n\n  - 编译\n\n        cd SeetaFace2\n        mkdir build\n        cd build\n        cmake .. -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLE=OFF # 如果有 OpneCV，则设置为 ON\n        cmake --build . --config Release \n\n  - 安装\n\n        cmake --build . --config Release --target install/strip\n\n  - 运行例子\n    + 把生成库的目录加入到变量 LD_LIBRARY_PATH 中\n \n            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/bin\n\n    + 拷贝模型文件到程序执行目录的 model 目录下\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            mkdir model\n            cp fd_2_00.dat pd_2_00_pts5.dat pd_2_00_pts81.dat .\n\n    + 执行 bin 目录下的程序\n      - points81\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            ./points81\n\n      - search\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            ./search\n\n#### 2.3.2 windows 平台编译说明\n  - 使用 cmake-gui.exe 工具编译。打开 cmake-gui.exe\n  - 命令行编译\n    + 把 cmake 命令所在目录加入到环境变量 PATH 中\n    + 从开始菜单打开 “VS2015开发人员命令提示”，进入命令行\n\n      - 编译\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -G\"Visual Studio 14 2015\" \\\n                  -DCMAKE_INSTALL_PREFIX=install \\\n                  -DCMAKE_BUILD_TYPE=Release \\\n                  -DBUILD_EXAMPLE=OFF # 如果有 OpneCV，则设置为 ON\n            #-G: 设置产生器。注意产生器要与你的MSVC工具配套 \n            cmake --build . --config Release \n            \n\n      - 安装\n\n            cmake --build . --config Release --target install\n\n      - 运行例子\n        + 拷贝模型文件到程序执行目录的 model 目录下\n\n                cd SeetaFace2\n                cd build\n                cd bin\n                mkdir model\n                cp fd_2_00.dat pd_2_00_pts5.dat pd_2_00_pts81.dat .\n\n        + 执行 bin 目录下的程序\n          - points81\n          - search\n\n#### 2.3.3 Android平台编译说明\n+ 安装 ndk 编译工具\n  - 从  https://developer.android.com/ndk/downloads 下载 ndk，并安装到：/home/android-ndk\n  - 设置环境变量：\n\n        export ANDROID_NDK=/home/android-ndk\n\n+ 编译\n  - 主机是 linux\n\n    - 编译\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install \\\n                  -DCMAKE_BUILD_TYPE=MinSizeRel \\\n                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n                  -DANDROID_ABI=\"armeabi-v7a with NEON\" \\\n                  -DANDROID_PLATFORM=android-24 \\\n                  -DBUILD_EXAMPLE=OFF # 如果有OpenCV，则设置为ON\n            cmake --build . --config MinSizeRel\n\n    - 安装\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n  - 主机是 windows\n    - windows控制台\n      - 编译\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=%cd%\\install ^\n                  -G\"Unix Makefiles\" ^\n                  -DCMAKE_BUILD_TYPE=MinSizeRel ^\n                  -DCMAKE_TOOLCHAIN_FILE=%ANDROID_NDK%/build/cmake/android.toolchain.cmake ^\n                  -DCMAKE_MAKE_PROGRAM=%ANDROID_NDK%/prebuilt/windows-x86_64/bin/make.exe ^\n                  -DANDROID_ABI=arm64-v8a ^\n                  -DANDROID_ARM_NEON=ON ^\n                   -DANDROID_PLATFORM=android-24 ^\n                  -DBUILD_EXAMPLE=OFF : 如果有 OpenCV，则设置为ON\n            cmake --build . --config MinSizeRel\n\n      - 安装\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n    - msys2 或 cygwin\n    \n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install \\\n                  -G\"Unix Makefiles\" \\\n                  -DCMAKE_BUILD_TYPE=MinSizeRel \\\n                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n                  -DCMAKE_MAKE_PROGRAM=${ANDROID_NDK}/prebuilt/windows-x86_64/bin/make.exe \\\n                  -DANDROID_ABI=arm64-v8a \\\n                  -DANDROID_ARM_NEON=ON \\\n                  -DANDROID_PLATFORM=android-24 \\\n                  -DBUILD_EXAMPLE=OFF # 如果有 OpenCV，则设置为ON\n            cmake --build . --config MinSizeRel\n\n       - 安装\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n  - 参数说明：https://developer.android.google.cn/ndk/guides/cmake\n    + ANDROID_ABI: 可取下列值：\n      目标 ABI。如果未指定目标 ABI，则 CMake 默认使用 armeabi-v7a。  \n      有效的目标名称为：\n      - armeabi：带软件浮点运算并基于 ARMv5TE 的 CPU。\n      - armeabi-v7a：带硬件 FPU 指令 (VFPv3_D16) 并基于 ARMv7 的设备。\n      - armeabi-v7a with NEON：与 armeabi-v7a 相同，但启用 NEON 浮点指令。这相当于设置 -DANDROID_ABI=armeabi-v7a 和 -DANDROID_ARM_NEON=ON。\n      - arm64-v8a：ARMv8 AArch64 指令集。\n      - x86：IA-32 指令集。\n      - x86_64 - 用于 x86-64 架构的指令集。\n    + ANDROID_NDK <path> 主机上安装的 NDK 根目录的绝对路径\n    + ANDROID_PLATFORM: 如需平台名称和对应 Android 系统映像的完整列表，请参阅 [Android NDK 原生 API](https://developer.android.google.cn/ndk/guides/stable_apis.html)\n    + ANDROID_ARM_MODE\n    + ANDROID_ARM_NEON\n    + ANDROID_STL: 指定 CMake 应使用的 STL。默认情况下，CMake 使用 c++_static。 \n      - c++_shared: 使用 libc++ 动态库\n      - c++_static: 使用 libc++ 静态库\n      - none: 没有 C++ 库支持\n      - system: 用系统的 STL \n\n### 2.3.4 IOS 平台编译说明\n> 以实体机为例\n\n+ 环境准备\n  - 需要 MacOS 的 PC。\n  - git 下载源代码。\n\n+ 命令行编译\n  + 使用 cmake 编译并安装项目，\n    ```\n    cd SeetaFace2\n    mkdir build\n    cd build\n    chmod +x ../ios/cmake.sh\n    ../ios/cmake.sh -DCMAKE_INSTALL_PREFIX=`pwd`/install\n    make -j4\n    make install\n    ```\n\n    执行完毕后，生成好的静态库将安装到`SeetaFace2/build/install`\n\n  + 编译模拟器版本\n    修改 cmake 指令参数 `../ios/cmake.sh -DIOS_PLATFORM=SIMULATOR64 -DPLATFORM=x64`\n\n  + 查看 `<root>/ios/cmake.sh` 和 `<root>/ios/iOS.cmake` 获取更多编译选项\n\n\n## 3. 目录结构\n\n\n    |-- SeetaFace2<br>\n        |-- documents（SDK 接口说明文档）  \n        |-- example（C++ 版本 SDK 示例代码）  \n        |-- FaceDetector（人脸检测模块）  \n        |-- FaceLandmarker（特征点定位模块）  \n        |-- FaceRecognizer（人脸特征提取和比对模块）  \n        |-- SeetaNet（前向计算框架模块）  \n\n    \n## 4. 模型下载\n- 人脸检测模块 FaceDetector 模型下载链接：  \nMD5     ：E88669E5F1301CA56162DE8AEF1FD5D5  \n百度网盘：https://pan.baidu.com/s/1Dt0M6LXeSe4a0Pjyz5ifkg 提取码：fs8r  \nDropbox : https://www.dropbox.com/s/cemt9fl48t5igfh/fd_2_00.dat?dl=0\n\n-  面部特征5点定位模块 FaceLandmarker 模型下载链接：  \nMD5     ：877A44AA6F07CB3064AD2828F50F261A  \n百度网盘：https://pan.baidu.com/s/1MqofXbmTv8MIxnZTDt3h5A 提取码：7861  \nDropbox : https://www.dropbox.com/s/noy8tien1gmw165/pd_2_00_pts5.dat?dl=0\n\n-  面部特征81点定位模块 FaceLandmarker 模型下载链接：  \nMD5     ：F3F812F01121B5A80384AF3C35211BDD  \n百度网盘：https://pan.baidu.com/s/1CCfTGaSg_JSY3cN-R1Myaw 提取码：p8mc  \nDropbox : https://www.dropbox.com/s/v41lmclaxpwow1d/pd_2_00_pts81.dat?dl=0\n\n- 人脸特征提取和比对模块 FaceRecognizer 模型下载链接：  \nMD5     ：2D637AAD8B1B7AE62154A877EC291C99  \n百度网盘：https://pan.baidu.com/s/1y2vh_BHtYftR24V4xwAVWg 提取码：pim2  \nDropbox : https://www.dropbox.com/s/6aslqcokpljha5j/fr_2_10.dat?dl=0\n\n## 5. 示例 \n### 5.1 本项目自带示例\n\n`example/search/example.cpp` 示例展示了一套简单且完整的人脸识别的流程，包括：  \n  1. 预注册图像中的人脸到人脸识别底库中（example 中默认注册了\"1.jpg\"中的人脸）；\n  2. 打开摄像头，检测摄像头画面中的人脸；3.对检测到人脸进行识别，确定所属人脸的身份。\n\n测试者如果想在底库中成功识别出自己的人脸，需要在example.cpp的底库注册列表部分添加以自己名称命名的图片(名称 + .jpg)，\n并把自己名称命名的图片文件拷贝到程序的运行目录下，重新编译 example 并运行程序，测试识别效果即可。\n\n### 5.2 已使用本项目的其它项目\n\n- FaceRecognizer: https://github.com/KangLin/FaceRecognizer\n- SeetaFace2AndroidDemo: https://github.com/xiaoxiaoazhang/SeetaFace2AndroidDemo\n\n## 6. 开发者社区\n欢迎开发者加入 SeetaFace 开发者社区，请先加 SeetaFace 小助手微信，经过审核后邀请入群。\n\n![QR](./asserts/QR.png)\n\n## 6.1 代码贡献\n欢迎开发者贡献优质代码，所有开发者代码需提交在`develop`分支。\n\n## 7. 商业合作\n想要购买 `SeetaFace` 商业版引擎以获得精度更高、速度更快的人脸识别算法或活体验证、表情识别、心率估计、姿态估计、视线追踪等更多人脸分析模块支持，请联系商务邮件 bd@seetatech.com。\n\n## 8. 开源协议\n\n`SeetaFace2` 依照 [BSD 2-Clause license](LICENSE) 开源.\n\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 14.2958984375,
          "content": "# **SeetaFace2**\n\n[![License](https://img.shields.io/badge/license-BSD-blue.svg)](LICENSE)\n\n[中文](./README.md) [English](./README_en.md)\n\n## 1 Introduction\nThe `SeetaFace2` face recognition engine includes three core modules required to build a fully automated face recognition system: face detection module `FaceDetector`, facial key positioning module `FaceLandmarker` and face feature extraction and Compare the module `FaceRecognizer`.\nThere are two additional auxiliary modules `FaceTracker` and `QualityAssessor` for face tracking and face quality assessment.\n\n<div align=center>\n<img src=\"./asserts/pipeline.png\" width=\"580\" height=\"230\" />\n</div>\n\n`SeetaFace2` is developed in standard C++. All modules do not depend on any third-party libraries and support x86 architecture (Windows, Linux) and ARM architecture (Android). The top applications supported by SeetaFace2 include, but are not limited to, face access, insensitivity, face matching, and the like.\n\n<div align=center>\n<img src=\"./asserts/grid.png\" width=\"630\" height=\"370\" />\n</div>\n\n\nSeetaFace2 is a milestone version for face recognition business. The face detection module can achieve more than 92% recall rate under 100 false detection conditions on FDDB. Face key point positioning supports 5 points and 81 points positioning. A face recognition application that supports thousands of people's base libraries than the N module.\n\n\nModules | Method Overview | Basic Specifications | Typical Platform Speed\n-----|---------|-------------|------------\n** Face Detection** | Cascaded CNN | FDDB has a recall rate of 92% (100 false detections). 40 Minimal Face <br>I7: 70FPS(1920x1080)<br>RK3399: 25FPS(640x480)\n** Facial closure point positioning (81 points and 5 points)** | FEC-CNN | Average positioning error (normalized according to the center distance between the two eyes)<br>0.069 on the 300-W Challenge Set. | I7: 450FPS and 500FPS<br>RK3399: 110FPS and 220FPS\n**Face feature extraction and comparison** | ResNet50 | Recognition: In the general 1:N+1 scenario, when the error acceptance rate is 1%, <br>1000 base library, the preferred recognition rate is over 98%,<br> The 5,000-person base library has a preferred recognition rate of over 95%. | I7: 8FPS<br>RK3399: 2.5FPS\n\nCompared to the 2016 open source `SeetaFace 1.0`, `SeetaFace2` has an order of magnitude improvement in both speed and accuracy.\n\n<table>\n    <tr>\n        <th rowspan=\"2\">Version</th>\n        <th colspan=\"2\">Face Detection</th>\n        <th colspan=\"2\">Key Point Positioning</th>\n        <th colspan=\"2\">Face Recognition</th>\n        <th rowspan=\"2\">Third-party dependencies</th>\n    </tr>\n    <tr>\n        <td>Speed ​​[1]</td>\n        <td>single precision [2]</td>\n        <td>speed</td>\n        <td>Features</td>\n        <td>Training data size</td>\n        <td>Application</td>\n    </tr>\n    <tr>\n        <th>1.0</th>\n        <td>16FPS</td>\n        <td>85%</td>\n        <td>200FPS</td>\n        <td>5 points</td>\n        <td>1.4 million sheets</td>\n        <td>Laboratory</td>\n        <td>no</td>\n    </tr>\n    <tr>\n        <th>2.0</th>\n        <td>77FPS</td>\n        <td>92%</td>\n        <td>500FPS</td>\n        <td>5/81 points</td>\n        <td>33 million sheets</td>\n        <td>Business Environment</td>\n        <td>no</td>\n    </tr>\n    <tr>\n        <th>Remarks</th>\n        <td colspan=\"7\">\n            [1] 640x480 input, detection 40x40 face, I7-6700. <br>\n            [2] The accuracy of face detection refers to the recall rate of 100 misunderstood FDDB data sets.\n        </td>\n    </tr>\n</table>\n\nKnowing people to understand everything, open source empowerment and development. `SeetaFace2` is committed to the development of AI, and together with industry partners to promote the face recognition technology.\n\n\n## 2. Compile\n### 2.1 Compiling dependencies\n+ compilation tool\n  + For linux\n    - GNU Make tool\n    - GCC or Clang compiler\n  + For windows\n    - [MSVC](http://msdn.microsoft.com/en-us/vstudio) or MinGW. \n  - [CMake](http://www.cmake.org/)\n+ dependent library\n  - [Optional] [OpneCV](http://opencv.org/) Required only when compiling examples\n+ dependency architecture\n  - CPU supports SSE2 and FMA [optinal] (x86) or NENO (ARM) support\n\n### 2.2 Compile parameter\n  - BUILD_DETECOTOR: Whether to compile the face detection module. ON: On; OFF: Off\n  - BUILD_LANDMARKER: Whether to compile the face key positioning module. ON: On; OFF: Off\n  - BUILD_RECOGNIZER: Whether to compile the face feature extraction and comparison module. ON: On; OFF: Off\n  - BUILD_EXAMPLE: Whether to compile the example. ON: On; OFF: Off, open requires pre-installation of `OpneCV`\n  - CMAKE_INSTALL_PREFIX: Installation prefix\n  - SEETA_USE_FMA: Whether use `FMA` instructions. Default off. Only works in `x86` architecture.\n  - SEETA_USE_SSE2: Whether use SSE2 instructions。window and unix default ON，other default OFF。\n  \n### 2.3 Platforms\n#### 2.3.1 linux\n  - Dependence\n    + opencv. Only need to compile the example\n\n        sudo apt-get install libopencv-dev \n\n  - Compile\n\n        cd SeetaFace2\n        mkdir build\n        cd build\n        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_EXAMPLE=OFF # Set to ON if there is OpneCV\n        cmake --build . --config Release\n        \n  - Installation\n\n        cmake --build . --config Release --target install/strip\n\n  - Run the example\n    + Add the directory of the build library to the variable LD_LIBRARY_PATH\n \n            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/bin\n\n    + Copy the model file to the model directory of the program execution directory\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            mkdir model\n            cp fd_2_00.dat pd_2_00_pts5.dat pd_2_00_pts81.dat .\n\n    + Execute the program in the bin directory\n      - points81\n\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            ./point81\n\n      - search\n\n            cd SeetaFace2\n            cd build\n            cd bin\n            ./search\n\n#### 2.3.2 windows\n  - Dependence\n    + opencv. Only need to compile the example\n  - Compile with the cmake-gui.exe tool. Open cmake-gui.exe\n  - Command line compilation\n    + Add the directory where the cmake command is located to the environment variable PATH\n    + Open \"VS2015 Developer Command Prompt\" from the Start menu to enter the command line\n\n      - Compile\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -G\"Visual Studio 14 2015\" \\\n                  -DCMAKE_INSTALL_PREFIX=install \\\n                  -DCMAKE_BUILD_TYPE=Release \\\n                  -DBUILD_EXAMPLE=OFF # Set to ON if there is OpneCV\n            #Note: -G: Generators. The generators must match the msvc compiler.\n            cmake --build . --config Release\n\n      - Installation\n\n            cmake --build . --config Release --target install\n\n      - Run the example\n        + Copy the model file to the model directory of the program execution directory\n\n                cd SeetaFace2\n                cd build\n                cd bin\n                mkdir model\n                cp fd_2_00.dat pd_2_00_pts5.dat pd_2_00_pts81.dat .\n\n        + Execute the program in the bin directory\n          - points81\n          - search\n\n#### 2.3.3 Android platform compilation instructions\n+ Install ndk\n  - Download and install to /home/android-ndk from https://developer.android.com/ndk/downloads \n  - Setting environment variables\n\n        export ANDROID_NDK=/home/android-ndk\n\n+ Complie\n  - The host is linux\n    - Compile\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake -DANDROID_ABI=\"armeabi-v7a with NEON\" -DANDROID_PLATFORM=android-18 -DBUILD_EXAMPLE=OFF # set ON if OpenCV\n            cmake --build . --config MinSizeRel\n\n    - Installation\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n  - The host is windows\n    - cmd\n      - Compile\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=%cd%\\install ^\n                  -G\"Unix Makefiles\" ^\n                  -DCMAKE_BUILD_TYPE=MinSizeRel ^\n                  -DCMAKE_TOOLCHAIN_FILE=%ANDROID_NDK%/build/cmake/android.toolchain.cmake ^\n                  -DCMAKE_MAKE_PROGRAM=%ANDROID_NDK%/prebuilt/windows-x86_64/bin/make.exe ^\n                  -DANDROID_ABI=arm64-v8a ^\n                  -DANDROID_ARM_NEON=ON ^\n                  -DANDROID_PLATFORM=android-24 ^\n                  -DBUILD_EXAMPLE=OFF : set ON if OpenCV\n            cmake --build . --config MinSizeRel\n\n      - Installation\n\n            cmake --build . --config MinSizeRel --target install/strip\n    \n    - msys2 or cygwin\n      - Compile\n\n            cd SeetaFace2\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install -G\"Unix Makefiles\" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake  -DCMAKE_MAKE_PROGRAM=${ANDROID_NDK}\\prebuilt\\windows-x86_64\\bin\\make.exe -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=ON -DBUILD_EXAMPLE=OFF # set ON if OpenCV\n            cmake --build . --config MinSizeRel\n\n      - Installation\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n  - Parameter Description: https://developer.android.google.cn/ndk/guides/cmake\n    + ANDROID_ABI: The following values can be taken:\n       Goal ABI. If the target ABI is not specified, CMake uses armeabi-v7a by default.\n       Valid ABI are:\n      - armeabi：CPU with software floating point arithmetic based on ARMv5TE\n      - armeabi-v7a：ARMv7-based device with hardware FPU instructions (VFP v3 D16)\n      - armeabi-v7a with NEON：Same as armeabi-v7a, but with NEON floating point instructions enabled. This is equivalent to setting -DANDROID_ABI=armeabi-v7a and -DANDROID_ARM_NEON=ON.\n      - arm64-v8a：ARMv8 AArch64 Instruction Set\n      - x86：IA-32 Instruction Set\n      - x86_64 - x86-64 Instruction Set\n    + ANDROID_NDK <path> The path of installed ndk in host\n    + ANDROID_PLATFORM: For a full list of platform names and corresponding Android system images, see the [Android NDK Native API] (https://developer.android.google.com/ndk/guides/stable_apis.html)\n    + ANDROID_ARM_MODE\n    + ANDROID_ARM_NEON\n    + ANDROID_STL:Specifies the STL that CMake should use. \n      - c++_shared: use libc++ shared library\n      - c++_static: use libc++ static library\n      - none: no stl\n      - system: use system STL \n\n#### 2.3.4 IOS platfrom\n> example IOS device.\n\n+ Dependence\n  - One PC within MacOS.\n  - Source code from `git`\n\n+ Command lines\n  + Use `cmake` compile and install\n    ```\n    cd SeetaFace2\n    mkdir build\n    cd build\n    chmod +x ../ios/cmake.sh\n    ../ios/cmake.sh -DCMAKE_INSTALL_PREFIX=`pwd`/install\n    make -j4\n    make install\n    ```\n\n    After all commands above succeed, libraries would install into `SeetaFace2/build/install`.\n\n  + Compile for simlulator.\n    Change `cmake` parameters like: `../ios/cmake.sh -DIOS_PLATFORM=SIMULATOR64 -DPLATFORM=x64`\n\n  + See `<root>/ios/cmake.sh` and `<root>/ios/iOS.cmake` for more compilation controls.\n\n## 3. Directory structure\n\n\n    |-- SeetaFace2  \n        |-- documents (SDK interface documentation)  \n        |-- example(C++ version SDK sample code)  \n        |-- FaceDetector  \n        |-- FaceLandmarker(Feature Point Positioning Module)  \n        |-- FaceRecognizer (Face Feature Extraction and Alignment Module)  \n        |-- SeetaNet (forward computing framework module)  \n\n    \n## 4. Model download\n- Face Detection Module FaceDetector Model Download Link:  \nMD5 : E88669E5F1301CA56162DE8AEF1FD5D5  \nBaidu network disk: https://pan.baidu.com/s/1Dt0M6LXeSe4a0Pjyz5ifkg Extraction code: fs8r  \nDropbox : https://www.dropbox.com/s/cemt9fl48t5igfh/fd_2_00.dat?dl=0\n\n- Facial feature 5-point positioning module FaceLandmarker model download link:  \nMD5: 877A44AA6F07CB3064AD2828F50F261A  \nBaidu network disk: https://pan.baidu.com/s/1MqofXbmTv8MIxnZTDt3h5A Extraction code: 7861  \nDropbox : https://www.dropbox.com/s/noy8tien1gmw165/pd_2_00_pts5.dat?dl=0\n\n- Face feature 81 point positioning module FaceLandmarker model download link:  \nMD5 : F3F812F01121B5A80384AF3C35211BDD  \nBaidu network disk: https://pan.baidu.com/s/1CCfTGaSg_JSY3cN-R1Myaw Extraction code: p8mc  \nDropbox : https://www.dropbox.com/s/v41lmclaxpwow1d/pd_2_00_pts81.dat?dl=0\n\n- Facial feature extraction and comparison module FaceRecognizer model download link:  \nMD5 : 2D637AAD8B1B7AE62154A877EC291C99  \nBaidu network disk: https://pan.baidu.com/s/1y2vh_BHtYftR24V4xwAVWg Extraction code: pim2  \nDropbox : https://www.dropbox.com/s/6aslqcokpljha5j/fr_2_10.dat?dl=0\n\n## 5. example\n### 5.1 This project comes with examples\n\nThe `example/search/example.cpp` example shows a simple and complete process for face recognition, including:  \n  1. Pre-registered images in the face-to-face recognition base library (the default registration in the example is \"1\" .jpg \"Face in the face\";\n  2. Turn on the camera to detect the face in the camera screen; 3. Identify the detected face and determine the identity of the face.\n\nIf the tester wants to successfully identify his face in the bottom library, he needs to add the image named after his own name (name + .jpg) in the bottom register registration list of example.cpp, and copy the image file named by his own name. Go to the program's running directory, recompile example and run the program to test the recognition effect.\n\n\n### 5.2 Other projects that have used this project\n\n- FaceRecognizer: https://github.com/KangLin/FaceRecognizer\n- SeetaFace2AndroidDemo: https://github.com/xiaoxiaoazhang/SeetaFace2AndroidDemo\n\n## 6. Developer Community\nDevelopers are welcome to join the SeetaFace developer community, please add SeetaFace assistant helper WeChat, after review, invite to join the group.\n\n![QR](./asserts/QR.png)\n\n## 6.1 Code Contribution\nDevelopers are welcome to contribute quality code, and all developer code needs to be submitted in the `develop` branch.\n\n## 7. Business cooperation\nIf you want to purchase the `SeetaFace` commercial version engine for more accurate and faster face recognition algorithms or more for face verification, expression recognition, heart rate estimation, attitude estimation, line-of-sight tracking, etc., please contact Business Email bd@seetatech.com.\n\n## 8. Open source agreement\n\n`SeetaFace2` is open source according to [BSD 2-Clause license] (LICENSE).\n"
        },
        {
          "name": "SeetaFace.pc.in",
          "type": "blob",
          "size": 0.279296875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${prefix}/lib\nincludedir=${prefix}/include\n\nName: SeetaFace2\nDescription: SeetaFace2\nVersion: @BUILD_VERSION@\nRequires: @SeetaFace2_LIBS@\nRequires.private: \nConflicts:\nLibs: -L${libdir}  \nLibs.private: \nCflags: -I${includedir}\n"
        },
        {
          "name": "SeetaNet",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 4.1240234375,
          "content": "#TODO: Change version\nversion: 'v0.0.1.{build}'\n\nenvironment:\n  matrix: \n  ##### msvc 2013 ########\n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 12 2013\"\n    TOOLCHAIN_VERSION: 12\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: ON\n    \n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 12 2013 Win64\"\n    TOOLCHAIN_VERSION: 12\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: ON\n\n  ##### msvc 2015 ########\n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 14 2015\"\n    TOOLCHAIN_VERSION: 14\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: ON\n\n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 14 2015 Win64\"\n    TOOLCHAIN_VERSION: 14\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: ON\n  \n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 14 2015\"\n    TOOLCHAIN_VERSION: 14\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: OFF\n\n  - BUILD_TARGERT: windows_msvc\n    GENERATORS: \"Visual Studio 14 2015 Win64\"\n    TOOLCHAIN_VERSION: 14\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: OFF\n\n  ##### msvc 2017 ########\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    GENERATORS: \"Visual Studio 15 2017\"\n    BUILD_TARGERT: windows_msvc\n    TOOLCHAIN_VERSION: 15\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: OFF\n        \n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    GENERATORS: \"Visual Studio 15 2017 Win64\"\n    BUILD_TARGERT: windows_msvc\n    TOOLCHAIN_VERSION: 15\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: OFF\n    \n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    GENERATORS: \"Visual Studio 15 2017 Win64\"\n    BUILD_TARGERT: windows_msvc\n    TOOLCHAIN_VERSION: 15\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: ON\n  \n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    GENERATORS: \"Visual Studio 15 2017 Win64\"\n    BUILD_TARGERT: windows_msvc\n    TOOLCHAIN_VERSION: 15\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: ON\n  \n  ##### mingw ########\n  - BUILD_TARGERT: windows_mingw\n    GENERATORS: \"MSYS Makefiles\"\n    TOOLCHAIN_VERSION: 492_32\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: ON\n\n  - BUILD_TARGERT: windows_mingw\n    GENERATORS: \"MSYS Makefiles\"\n    TOOLCHAIN_VERSION: 530_32\n    BUILD_ARCH: x86\n    BUILD_SHARED_LIBS: ON\n    \n  - BUILD_TARGERT: windows_mingw\n    GENERATORS: \"MSYS Makefiles\"\n    TOOLCHAIN_VERSION: 730_64\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: ON\n  \n  - BUILD_TARGERT: windows_mingw\n    GENERATORS: \"MSYS Makefiles\"\n    TOOLCHAIN_VERSION: 730_64\n    BUILD_ARCH: x64\n    BUILD_SHARED_LIBS: OFF\n    \nmatrix:\n  fast_finish: false\n\ninit:\n  - set BUILD_VERSION=%APPVEYOR_BUILD_VERSION%\n  - set varch=%BUILD_ARCH%\n  - if \"%BUILD_ARCH%\" == \"x64\" set varch=amd64\n  - if \"%BUILD_TARGERT%\" == \"windows_msvc\" if %TOOLCHAIN_VERSION% LSS 15 (call \"C:\\Program Files (x86)\\Microsoft Visual Studio %TOOLCHAIN_VERSION%.0\\VC\\vcvarsall.bat\" %varch%) else (call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %varch%)  \n  - echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%\n  - echo PROCESSOR_IDENTIFIER=%PROCESSOR_IDENTIFIER%\n  - del C:\\msys64\\usr\\bin\\link.exe\n\ninstall:\n  - C:\\msys64\\autorebase.bat\n  - if \"%BUILD_TARGERT%\" == \"windows_mingw\" set MSYSTEM=MINGW32  #设置编译系统为MINGW32\n\nbefore_build:\n  - cd %APPVEYOR_BUILD_FOLDER%\n  - git submodule update --init --recursive\n  - if \"%BUILD_TARGERT%\" == \"android\" C:\\msys64\\usr\\bin\\bash.exe %APPVEYOR_BUILD_FOLDER%\\ci\\build-install-tools-windows.sh\n\nbuild_script:\n  - cd %APPVEYOR_BUILD_FOLDER%\n  - C:\\msys64\\usr\\bin\\bash.exe %APPVEYOR_BUILD_FOLDER%\\ci\\build.sh\n\nartifacts:\n  - path: build_$(BUILD_TARGERT)\\install\n    name: SeetaFace_$(BUILD_TARGERT)$(TOOLCHAIN_VERSION)_$(BUILD_ARCH)\n    type: zip\n\ntest: off\n\n#See:https://www.appveyor.com/docs/deployment/github/\ndeploy:\n  - provider: GitHub\n    #release: Seeta$(appveyor_build_version)\n    description: 'Release Seeta $(APPVEYOR_REPO_TAG_NAME) on windows'\n    #token : https://github.com/settings/tokens\n    #password encrypt: https://ci.appveyor.com/tools/encrypt\n    auth_token:\n      secure: OiAMIB7yqZ/SGuSgTU+N5LnPW2iUZcWCaQEyqDLmR/4ySc5A7zeUxkSh580cIO7F\n    #draft: true\n    #prerelease: true\n    on:\n      BUILD_SHARED_LIBS: ON\n      appveyor_repo_tag: true        # deploy on tag push only\n"
        },
        {
          "name": "asserts",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_android.sh",
          "type": "blob",
          "size": 0.7802734375,
          "content": "#!/bin/bash\n\nif [ -n \"$1\" ]; then\n    ANDROID_NDK=$1\nfi\nif [ -z \"${ANDROID_NDK}\" ]; then\n    echo \"$0 ANDROID_NDK\"\n    exit -1\nfi\n\nif [ -z \"${ANDROID_STL}\" ]; then\n   ANDROID_STL=c++_static\nfi\n\nif [ ! -d build ]; then\n    mkdir -p build\nfi\ncd build\n\ncmake .. -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_VERBOSE_MAKEFILE=TRUE -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake -DANDROID_ABI=\"armeabi-v7a with NEON\" -DANDROID_PLATFORM=android-18 -DANDROID_STL=${ANDROID_STL} -DBUILD_EXAMPLE=OFF # 如果有OpenCV，则设置为ON\n\ncmake --build . --config MinSizeRel -- -j`cat /proc/cpuinfo |grep 'cpu cores' |wc -l`\n\ncmake --build . --config MinSizeRel --target install/strip -- -j`cat /proc/cpuinfo |grep 'cpu cores' |wc -l`\n\ncd ..\n"
        },
        {
          "name": "change.log",
          "type": "blob",
          "size": 0.2666015625,
          "content": "[2019-8-22]\n- Remove FMA instructions by default. Use `-DSEETA_USE_FMA` to enable it.\n\n[2019-8-22]\n- Support IOS compilation, see `README.md` and `ios/cmake.sh` for more details.\n\n[2019-8-21]\n- Support ARM linux compilation, by adding PLATFORM option like `-DPLARTORM=ARM`\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}