{
  "metadata": {
    "timestamp": 1736566006745,
    "page": 987,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/boringssl",
      "stars": 1871,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "third_party/googletest\nutil/bazel-example\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.2587890625,
          "content": "# Copyright 2024 The BoringSSL Authors\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n# This is a bazelrc file, documented in https://bazel.build/run/bazelrc and\n# specifies default flags when BoringSSL is the root project. It has no effect\n# on downstream projects, which define their own toolchains and configs.\n\n# See https://bazel.build/run/bazelrc#enable_platform_specific_config.\n# This expands to --config=osname which, in turn, expands to the options\n# specified below.\nbuild --enable_platform_specific_config\n\n# Enable additional checks.\nbuild --features=layering_check\nbuild --features=parse_headers\n\n# Bazel has no abstractions for setting C++ versions and expects the root\n# project to use the compiler-specific options for their toolchains. (Bazel only\n# wants the root to set the C++ version for the sake of projects like Abseil\n# whose ABI depends on the C++ version.)\nbuild:linux --cxxopt=-std=c++17\nbuild:macos --cxxopt=-std=c++17\nbuild:windows --cxxopt=/std:c++17\n\n# Our own builds should strictly build without warnings, but we don't add those\n# in targets like other flags because we can't assume all users will have clean\n# builds too.\nbuild:linux --cxxopt=-Werror\nbuild:macos --cxxopt=-Werror\n\n# Without setting a minimum macOS version, std::optional does not work.\nbuild:macos --cxxopt=-mmacosx-version-min=10.15\n\n# Without /Zc:__cplusplus, MSVC does not define the right value for\n# __cplusplus. See https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/\nbuild:windows --cxxopt=/Zc:__cplusplus\n\n# https://bazel.build/configure/best-practices#bazelrc-file\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.4.1\n"
        },
        {
          "name": ".bcr",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.61328125,
          "content": "BasedOnStyle: Google\nMaxEmptyLinesToKeep: 3\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nDerivePointerAlignment: false\nPointerAlignment: Right\n# TODO(davidben): The default for Google style is now Regroup, but the default\n# IncludeCategories does not recognize <openssl/header.h>. We should\n# reconfigure IncludeCategories to match. For now, keep it at Preserve.\nIncludeBlocks: Preserve\nInsertBraces: true\nTypenameMacros: ['LHASH_OF', 'STACK_OF']\nStatementMacros:\n  - \"DECLARE_ASN1_ALLOC_FUNCTIONS\"\n  - \"DECLARE_ASN1_ALLOC_FUNCTIONS_name\"\n  - \"DECLARE_ASN1_ENCODE_FUNCTIONS\"\n  - \"DECLARE_ASN1_ENCODE_FUNCTIONS_const\"\n  - \"DECLARE_ASN1_FUNCTIONS\"\n  - \"DECLARE_ASN1_FUNCTIONS_const\"\n  - \"DECLARE_ASN1_FUNCTIONS_fname\"\n  - \"DECLARE_ASN1_FUNCTIONS_name\"\n  - \"DECLARE_PEM_read\"\n  - \"DECLARE_PEM_read_bio\"\n  - \"DECLARE_PEM_read_fp\"\n  - \"DECLARE_PEM_rw\"\n  - \"DECLARE_PEM_rw_cb\"\n  - \"DECLARE_PEM_rw_const\"\n  - \"DECLARE_PEM_write\"\n  - \"DECLARE_PEM_write_bio\"\n  - \"DECLARE_PEM_write_bio_const\"\n  - \"DECLARE_PEM_write_cb\"\n  - \"DECLARE_PEM_write_cb_bio\"\n  - \"DECLARE_PEM_write_cb_fp\"\n  - \"DECLARE_PEM_write_const\"\n  - \"DECLARE_PEM_write_fp\"\n  - \"DECLARE_PEM_write_fp_const\"\n  - \"IMPLEMENT_ASN1_ALLOC_FUNCTIONS\"\n  - \"IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname\"\n  - \"IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname\"\n  - \"IMPLEMENT_ASN1_DUP_FUNCTION\"\n  - \"IMPLEMENT_ASN1_DUP_FUNCTION_const\"\n  - \"IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname\"\n  - \"IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS_const\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS_const_fname\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS_ENCODE_name\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS_fname\"\n  - \"IMPLEMENT_ASN1_FUNCTIONS_name\"\n  - \"IMPLEMENT_ASN1_TYPE_ex\"\n  - \"IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS\"\n  - \"IMPLEMENT_PEM_read\"\n  - \"IMPLEMENT_PEM_read_bio\"\n  - \"IMPLEMENT_PEM_read_fp\"\n  - \"IMPLEMENT_PEM_rw\"\n  - \"IMPLEMENT_PEM_rw_cb\"\n  - \"IMPLEMENT_PEM_rw_const\"\n  - \"IMPLEMENT_PEM_write\"\n  - \"IMPLEMENT_PEM_write_bio\"\n  - \"IMPLEMENT_PEM_write_bio_const\"\n  - \"IMPLEMENT_PEM_write_cb\"\n  - \"IMPLEMENT_PEM_write_cb_bio\"\n  - \"IMPLEMENT_PEM_write_cb_bio_const\"\n  - \"IMPLEMENT_PEM_write_cb_const\"\n  - \"IMPLEMENT_PEM_write_cb_fp\"\n  - \"IMPLEMENT_PEM_write_cb_fp_const\"\n  - \"IMPLEMENT_PEM_write_const\"\n  - \"IMPLEMENT_PEM_write_fp\"\n  - \"IMPLEMENT_PEM_write_fp_const\"\n  - \"ASN1_ADB_END\"\n  - \"ASN1_CHOICE_END\"\n  - \"ASN1_CHOICE_END_cb\"\n  - \"ASN1_ITEM_TEMPLATE_END\"\n  - \"ASN1_SEQUENCE_END\"\n  - \"ASN1_SEQUENCE_END_cb\"\n  - \"ASN1_SEQUENCE_END_enc\"\n  - \"ASN1_SEQUENCE_END_ref\"\n  # This isn't quite right, but it causes clang-format to do a slightly better\n  # job with this macro.\n  - \"ASN1_EX_TEMPLATE_TYPE\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6884765625,
          "content": "/bazel-*\n/build\n/build32\n/build64\n/ssl/test/runner/runner\n*.pyc\n*.swp\n*.swo\n/doc/*.html\n/doc/doc.css\n/rust/Cargo.lock\n/rust/bssl-crypto/Cargo.lock\n/rust/target\n/user.bazelrc\n\n/util/bazel-example/bazel-*\n/util/bazel-example/MODULE.bazel.lock\n\n/util/bot/android_ndk\n/util/bot/android_sdk/public\n/util/bot/cmake\n/util/bot/golang\n/util/bot/libFuzzer\n/util/bot/libcxx\n/util/bot/libcxxabi\n/util/bot/llvm-build\n/util/bot/llvm-libc\n/util/bot/nasm-win32.exe\n/util/bot/ninja\n/util/bot/perl-win32\n/util/bot/qemu-static\n/util/bot/sde-linux64\n/util/bot/sde-linux64.tar.xz\n/util/bot/sde-win32\n/util/bot/sde-win32.tar.xz\n/util/bot/win_toolchain\n/util/bot/win_toolchain.json\n\n# Ignore target under any directory.\ntarget/\n"
        },
        {
          "name": "API-CONVENTIONS.md",
          "type": "blob",
          "size": 15.4599609375,
          "content": "# BoringSSL API Conventions\n\nThis document describes conventions for BoringSSL APIs. The [style\nguide](./STYLE.md) also includes guidelines, but this document is targeted at\nboth API consumers and developers. API documentation in BoringSSL may assume\nthese conventions by default, rather than repeating them for every function.\n\n\n## Documentation\n\nAll supported public APIs are documented in the public header files, found in\n`include/openssl`. The API documentation is also available\n[online](https://commondatastorage.googleapis.com/chromium-boringssl-docs/headers.html).\n\nExperimental public APIs are found in `include/openssl/experimental`. Use of\nthese will likely be incompatible with changes in the near future as they are\nfinalized.\n\n## Forward declarations\n\nDo not write `typedef struct foo_st FOO` or try otherwise to define BoringSSL's\ntypes. Including `openssl/base.h` (or `openssl/ossl_typ.h` for consumers who\nwish to be OpenSSL-compatible) will forward-declare each type without importing\nthe rest of the library or invasive macros.\n\n\n## Error-handling\n\nMost functions in BoringSSL may fail, either due to allocation failures or input\nerrors. Functions which return an `int` typically return one on success and zero\non failure. Functions which return a pointer typically return `NULL` on failure.\nHowever, due to legacy constraints, some functions are more complex. Consult the\nAPI documentation before using a function.\n\nOn error, most functions also push errors on the error queue, an `errno`-like\nmechanism. See the documentation for\n[err.h](https://commondatastorage.googleapis.com/chromium-boringssl-docs/err.h.html)\nfor more details.\n\nAs with `errno`, callers must test the function's return value, not the error\nqueue to determine whether an operation failed. Some codepaths may not interact\nwith the error queue, and the error queue may have state from a previous failed\noperation. After checking for failure, the caller can then inspect the error\nqueue in the failure case for details.\n\nAs a notable exception, some functions in the SSL/TLS library use a multi-step\nprocess to indicate failure: First, the return value indicates whether the\noperation failed. Then, `SSL_get_error` indicates whether the failure was due to\nan error (`SSL_ERROR_SSL`) or some recoverable condition (e.g.\n`SSL_ERROR_WANT_READ`). In the former case, the caller can use the error queue\nfor more information.\n\nWhen ignoring a failed operation, it is recommended to call `ERR_clear_error` to\navoid the state interacting with future operations. Failing to do so should not\naffect the actual behavior of any functions, but may result in errors from both\noperations being mixed in error logging. We hope to\n[improve](https://bugs.chromium.org/p/boringssl/issues/detail?id=38) this\nsituation in the future.\n\nWhere possible, avoid conditioning on specific reason codes and limit usage to\nlogging. The reason codes are very fine-grained and tend to leak details of the\nlibrary's internal structure. Changes in the library often have a side effect of\nchanging the exact reason code returned.\n\n\n## Memory allocation\n\nBoringSSL allocates memory via `OPENSSL_malloc`, found in `mem.h`. Use\n`OPENSSL_free`, found in the same header file, to release it. BoringSSL\nfunctions will fail gracefully on allocation error, but it is recommended to use\na `malloc` implementation that `abort`s on failure.\n\n\n## Pointers and slices\n\nUnless otherwise specified, pointer parameters that refer to a single object,\neither as an input or output parameter, may not be `NULL`. In this case,\nBoringSSL often will not check for `NULL` before dereferencing, so passing\n`NULL` may crash or exhibit other undefined behavior. (Sometimes the function\nwill check for `NULL` anyway, for OpenSSL compatibility, but we still consider\npassing `NULL` to be a caller error.)\n\nPointer parameters may also refer to a contiguous sequence of objects, sometimes\nreferred to as a *slice*. These will typically be a pair of pointer and length\nparameters named like `plaintext` and `plaintext_len`, or `objs` and `num_objs`.\nWe prefer the former for byte buffers and the latter for sequences of other\ntypes. The documentation will usually refer to both parameters together, e.g.\n\"`EVP_DigestUpdate` hashes `len` bytes from `data`.\"\n\nParameters in C and C++ that use array syntax, such as\n`uint8_t out[SHA256_DIGEST_LENGTH]`, are really pointers. In BoringSSL's uses of\nthis syntax, the pointer must point to the specified number of values.\n\nIn other cases, the documentation will describe how the function parameters\ndetermine the slice's length. For example, a slice's length may be measured in\nunits other than element count, multiple slice parameters may share a length, or\na slice's length may be implicitly determined by other means like RSA key size.\n\nBy default, BoringSSL follows C++'s\n[slice conventions](https://davidben.net/2024/01/15/empty-slices.html)\nfor pointers. That is, unless otherwise specified, pointers for non-empty\n(non-zero length) slices must be represented by a valid pointer to that many\nobjects in memory. Pointers for empty (zero length) slices must either be `NULL`\nor point within some sequence of objects of a compatible type.\n\nWARNING: The dangling, non-null pointer used by Rust empty slices may *not* be\npassed into BoringSSL. Rust FFIs must adjust such pointers to before passing to\nBoringSSL. For example, see the `FfiSlice` abstraction in `bssl-crypto`. (We may\nrelax this if pointer arithmetic rules in C/C++ are adjusted to permit Rust's\npointers. Until then, it is impractical for a C/C++ library to act on such a\nslice representation. See\n[this document](https://davidben.net/2024/01/15/empty-slices.html) for more\ndiscussion.)\n\nIn some cases, OpenSSL compatibility requires that a function will treat `NULL`\nslice pointers differently from non-`NULL` pointers. Such behavior will be\ndescribed in documentation. For examples, see `EVP_EncryptUpdate`,\n`EVP_DigestSignFinal`, and `HMAC_Init_ex`. Callers passing potentially empty\nslices into such functions should take care that the `NULL` case is either\nunreachable or still has the desired behavior.\n\nIf a `const char *` parameter is described as a \"NUL-terminated string\" or a\n\"C string\", it must point to a sequence of `char` values containing a NUL (zero)\nvalue, which determines the length. Unless otherwise specified, the pointer may\nnot be `NULL`, matching the C standard library.\n\nFor purposes of C and C++'s\n[strict aliasing](https://en.cppreference.com/w/c/language/object#Strict_aliasing)\nrequirements, objects passed by pointers must be accessible as the specified\ntype. `uint8_t` may be assumed to be the same type as `unsigned char` and thus\nmay be the pointer type for all object types. BoringSSL does not support\nplatforms where `uint8_t` is a non-character type. However, there is no\nstrict aliasing sanitizer, very few C and C++ codebases are valid by strict\naliasing, and BoringSSL itself has some\n[known strict aliasing bugs](https://crbug.com/boringssl/444), thus we strongly\nrecommend consumers build with `-fno-strict-aliasing`.\n\nPointer parameters additionally have ownership and lifetime requirements,\ndiscussed in the section below.\n\n\n## Object initialization and cleanup\n\nBoringSSL defines a number of structs for use in its APIs. It is a C library,\nso the caller is responsible for ensuring these structs are properly\ninitialized and released. Consult the documentation for a module for the\nproper use of its types. Some general conventions are listed below.\n\n\n### Heap-allocated types\n\nSome types, such as `RSA`, are heap-allocated. All instances will be allocated\nand returned from BoringSSL's APIs. It is an error to instantiate a heap-\nallocated type on the stack or embedded within another object.\n\nHeap-allocated types may have functioned named like `RSA_new` which allocates a\nfresh blank `RSA`. Other functions may also return newly-allocated instances.\nFor example, `RSA_parse_public_key` is documented to return a newly-allocated\n`RSA` object.\n\nHeap-allocated objects must be released by the corresponding free function,\nnamed like `RSA_free`. Like C's `free` and C++'s `delete`, all free functions\ninternally check for `NULL`. It is redundant to check for `NULL` before calling.\n\nA heap-allocated type may be reference-counted. In this case, a function named\nlike `RSA_up_ref` will be available to take an additional reference count. The\nfree function must be called to decrement the reference count. It will only\nrelease resources when the final reference is released. For OpenSSL\ncompatibility, these functions return `int`, but callers may assume they always\nsuccessfully return one because reference counts use saturating arithmetic.\n\nC++ consumers are recommended to use `bssl::UniquePtr` to manage heap-allocated\nobjects. `bssl::UniquePtr<T>`, like other types, is forward-declared in\n`openssl/base.h`. Code that needs access to the free functions, such as code\nwhich destroys a `bssl::UniquePtr`, must include the corresponding module's\nheader. (This matches `std::unique_ptr`'s relationship with forward\ndeclarations.) Note, despite the name, `bssl::UniquePtr` is also used with\nreference-counted types. It owns a single reference to the object. To take an\nadditional reference, use the `bssl::UpRef` function, which will return a\nseparate `bssl::UniquePtr`.\n\n\n### Stack-allocated types\n\nOther types in BoringSSL are stack-allocated, such as `EVP_MD_CTX`. These\ntypes may be allocated on the stack or embedded within another object.\nHowever, they must still be initialized before use.\n\nEvery stack-allocated object in BoringSSL has a *zero state*, analogous to\ninitializing a pointer to `NULL`. In this state, the object may not be\ncompletely initialized, but it is safe to call cleanup functions. Entering the\nzero state cannot fail. (It is usually `memset(0)`.)\n\nThe function to enter the zero state is named like `EVP_MD_CTX_init` or\n`CBB_zero` and will always return `void`. To release resources associated with\nthe type, call the cleanup function, named like `EVP_MD_CTX_cleanup`. The\ncleanup function must be called on all codepaths, regardless of success or\nfailure. For example:\n\n    uint8_t md[EVP_MAX_MD_SIZE];\n    unsigned md_len;\n    EVP_MD_CTX ctx;\n    EVP_MD_CTX_init(&ctx);  /* Enter the zero state. */\n    int ok = EVP_DigestInit_ex(&ctx, EVP_sha256(), NULL) &&\n             EVP_DigestUpdate(&ctx, \"hello \", 6) &&\n             EVP_DigestUpdate(&ctx, \"world\", 5) &&\n             EVP_DigestFinal_ex(&ctx, md, &md_len);\n    EVP_MD_CTX_cleanup(&ctx);  /* Release |ctx|. */\n\nNote that `EVP_MD_CTX_cleanup` is called whether or not the `EVP_Digest*`\noperations succeeded. More complex C functions may use the `goto err` pattern:\n\n      int ret = 0;\n      EVP_MD_CTX ctx;\n      EVP_MD_CTX_init(&ctx);\n\n      if (!some_other_operation()) {\n        goto err;\n      }\n\n      uint8_t md[EVP_MAX_MD_SIZE];\n      unsigned md_len;\n      if (!EVP_DigestInit_ex(&ctx, EVP_sha256(), NULL) ||\n          !EVP_DigestUpdate(&ctx, \"hello \", 6) ||\n          !EVP_DigestUpdate(&ctx, \"world\", 5) ||\n          !EVP_DigestFinal_ex(&ctx, md, &md_len) {\n        goto err;\n      }\n\n      ret = 1;\n\n    err:\n      EVP_MD_CTX_cleanup(&ctx);\n      return ret;\n\nNote that, because `ctx` is set to the zero state before any failures,\n`EVP_MD_CTX_cleanup` is safe to call even if the first operation fails before\n`EVP_DigestInit_ex`. However, it would be illegal to move the `EVP_MD_CTX_init`\nbelow the `some_other_operation` call.\n\nAs a rule of thumb, enter the zero state of stack-allocated structs in the\nsame place they are declared.\n\nC++ consumers are recommended to use the wrappers named like\n`bssl::ScopedEVP_MD_CTX`, defined in the corresponding module's header. These\nwrappers are automatically initialized to the zero state and are automatically\ncleaned up.\n\n\n### Data-only types\n\nA few types, such as `SHA_CTX`, are data-only types and do not require cleanup.\nThese are usually for low-level cryptographic operations. These types may be\nused freely without special cleanup conventions.\n\n\n### Ownership and lifetime\n\nWhen working with allocated objects, it is important to think about *ownership*\nof each object, or what code is responsible for releasing it. This matches the\ncorresponding notion in higher-level languages like C++ and Rust.\n\nOwnership applies to both uniquely-owned types and reference-counted types. For\nthe latter, ownership means the code is responsible for releasing one\nreference. Note a *reference* in BoringSSL refers to an increment (and eventual\ndecrement) of an object's reference count, not `T&` in C++. Thus, to \"take a\nreference\" means to increment the reference count and take ownership of\ndecrementing it.\n\nAs BoringSSL's APIs are primarily in C, ownership and lifetime obligations are\nnot rigorously annotated in the type signatures or checked at compile-time.\nInstead, they are described in\n[API documentation](https://commondatastorage.googleapis.com/chromium-boringssl-docs/headers.html).\nThis section describes some conventions.\n\nUnless otherwise documented, functions do not take ownership of pointer\narguments. The pointer typically must remain valid for the duration of the\nfunction call. The function may internally copy information from the argument or\ntake a reference, but the caller is free to release its copy or reference at any\npoint after the call completes.\n\nA function may instead be documented to *take* or *transfer* ownership of a\npointer. The caller must own the object before the function call and, after\ntransfer, no longer owns it. As a corollary, the caller may no longer reference\nthe object without a separate guarantee on the lifetime. The function may even\nrelease the object before returning. Callers that wish to independently retain a\ntransfered object must therefore take a reference or make a copy before\ntransferring. Callers should also take note of whether the function is\ndocumented to transfer pointers unconditionally or only on success. Unlike C++\nand Rust, functions in BoringSSL typically only transfer on success.\n\nLikewise, output pointers may be owning or non-owning. Unless otherwise\ndocumented, functions output non-owning pointers. The caller is not responsible\nfor releasing the output pointer, but it must not use the pointer beyond its\nlifetime. The pointer may be released when the parent object is released or even\nsooner on state change in the parent object.\n\nIf documented to output a *newly-allocated* object or a *reference* or *copy* of\none, the caller is responsible for releasing the object when it is done.\n\nBy convention, functions named `get0` return non-owning pointers. Functions\nnamed `new` or `get1` return owning pointers. Functions named `set0` take\nownership of arguments. Functions named `set1` do not. They typically take a\nreference or make a copy internally. These names originally referred to the\neffect on a reference count, but the convention applies equally to\nnon-reference-counted types.\n\nAPI documentation may also describe more complex obligations. For instance, an\nobject may borrow a pointer for longer than the duration of a single function\ncall, in which case the caller must ensure the lifetime extends accordingly.\n\nMemory errors are one of the most common and dangerous bugs in C and C++, so\ncallers are encouraged to make use of tools such as\n[AddressSanitizer](https://clang.llvm.org/docs/AddressSanitizer.html) and\nhigher-level languages.\n\n\n## Thread safety\n\nBoringSSL is internally aware of the platform threading library and calls into\nit as needed. Consult the API documentation for the threading guarantees of\nparticular objects. In general, stateless reference-counted objects like `RSA`\nor `EVP_PKEY` which represent keys may typically be used from multiple threads\nsimultaneously, provided no thread mutates the key.\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.169921875,
          "content": "# This is the list of BoringSSL's significant contributors.\n#\n# This does not necessarily list everyone who has contributed code,\n# especially since many employees of one corporation may be contributing.\n# To see the full list of contributors, see the revision history in\n# source control.\nGoogle LLC\nBrian Smith\n\n# Additionally, much of the code in BoringSSL is derived from code in the\n# OpenSSL project. We thank the OpenSSL project’s contributors for their\n# work. Some of these contributors are listed below. For the full list of\n# these contributors, see AUTHORS.md in OpenSSL and the revision history\n# in OpenSSL’s source control.\nOpenSSL Software Services, Inc.\nOpenSSL Software Foundation, Inc.\nAndy Polyakov\nBen Laurie\nBen Kaduk\nBernd Edlinger\nBodo Möller\nDavid Benjamin\nDavid von Oheimb\nDmitry Belyavskiy (Дмитрий Белявский)\nEmilia Käsper\nEric Young\nGeoff Thorpe\nHolger Reif\nKurt Roeckx\nLutz Jänicke\nMark J. Cox\nMatt Caswell\nMatthias St. Pierre\nNicola Tuveri\nNils Larsch\nPatrick Steuer\nPaul Dale\nPaul C. Sutton\nPaul Yang\nRalf S. Engelschall\nRich Salz\nRichard Levitte\nShane Lontis\nStephen Henson\nSteve Marquess\nTim Hudson\nTomáš Mráz\nUlf Möller\nViktor Dukhovni\n"
        },
        {
          "name": "BREAKING-CHANGES.md",
          "type": "blob",
          "size": 8.806640625,
          "content": "# How to change BoringSSL's API\n\nBoringSSL has more flexibility in changing things than many other library projects because we have a reasonable idea of who our users are. Still, breaking changes require some care. We depend on tight feedback loops with our consumers so that we can learn about mistakes and fix them. For that to work, updating BoringSSL must be smooth.\n\nUltimately, the strategy for each breaking change is decided on a case-by-case basis. This document provides guidelines and techniques to help with a smooth transition.\n\n## Breakage risk\n\nTraditionally, breaking changes are defined in terms of API or ABI surface. Exposed symbols and type signatures cannot change, etc. But this is a poor approximation of the true impact. Removing an API may not a breaking change if no one is using it. Conversely, [Hyrum's Law](http://www.hyrumslaw.com/) applies. Fixing a bug may be a breaking change for some consumer which was depending on that bug.\n\nThus, we do not think about whether a change is formally a breaking change, but about the *risk* of it breaking someone.\n\nSome changes, such as internal cleanups or bug-fixes, are low risk and do not need special measures. Any problems can be handled when the affected consumer updates BoringSSL and notices.\n\nOther changes, such as removing an API, forbidding some edge case, or adjusting some behavior, are more likely to break things. To help the consumer triage any resulting failures, include some text in the commit message, prefixed by `Update-Note: `. This can include what this change may break and instructions on how to fix the issue.\n\n## Code Search\n\nThe vast majority of BoringSSL consumers are conveniently indexed in various Code Search instances. This can predict the impact of a risky change and identify code to fix ahead of time. The document &ldquo;How to Code Search&rdquo; in the (Google-only) [go/boringssl-folder](https://goto.google.com/boringssl-folder) includes notes on this.\n\n## Evaluate a change's cost\n\nIf some change has high cost (from having to fix consumers) and relatively little benefit to BoringSSL, it may not be worth the trouble. For instance, it is likely not worth removing a small compatibility function in the corner of the library that is easily dropped by the static linker.\n\nConversely, a change that leads to a major improvement to all BoringSSL consumers, at the cost of fixing one or two consumers, is typically worth it.\n\n## Fixing consumers\n\nIf code search reveals call sites that are definitely going to break, prefer to handle these before making the change. While unexpected breakage is always possible, we generally consider it the responsibility of the developer or group making a change to handle impact of that change. Teams are generally unhappy to be surprised by new migration work but happy to have migration work done for them.\n\nIn most cases, this is straightforward:\n\n1. Add the replacement API.\n2. As the replacement API enters each consuming repository, migrate callers to it.\n3. Remove the original API once all consumers have been migrated.\n\nThe removal should still include an `Update-Note` tag, in case some were missed.\n\nIn some cases, this kind of staged approach is not feasible: perhaps the same code cannot simultaneously work before and after the change, or perhaps there are too many different versions in play. For instance, [Conscrypt](https://github.com/google/conscrypt) feeds into three different repositories. The GitHub repository consumes BoringSSL's `master` branch directly. It is pushed into Android, where it consumes Android's `external/boringssl`. Yet another copy is pushed into the internal repository, where it consumes that copy of BoringSSL. As each of these Conscrypts are updated independently from their corresponding BoringSSLs, Conscrypt upstream cannot rely on a new BoringSSL API until it is present in all copies of BoringSSL its downstreams rely on.\n\nIn that case, a multi-sided change may be more appropriate:\n\n1. Upload the breaking change to Gerrit, but do not submit it yet. Increment the `BORINGSSL_API_VERSION` symbol.\n2. Update the consuming repository with `#if BORINGSSL_API_VERSION < N` preprocessor logic. Leave a comment to remove this later, linking to your BoringSSL change.\n3. When the `BORINGSSL_API_VERSION` check has propagated to relevant copies of the consuming repository, submit the BoringSSL change.\n4. When the BoringSSL change has propagated to relevant copies of BoringSSL, remove the staging logic from the consumer.\n\nFinally, in some cases, the consumer's change may be committed atomically with the BoringSSL update. This can only be done for code which only consumes one instance of BoringSSL (so the Conscrypt example above is not eligible). Check with that project's maintainer first or, better, be that project's maintainer.\n\nIf more complex changes are needed in some consumer, communicate with the relevant maintainers to plan the transition.\n\n## Fail early, fail closed\n\nWhen breaking changes do occur, they should fail as early and as detectably as possible.\n\nIdeally, problematic consumers fail to compile. Prefer to remove functions completely over leaving an always failing stub function. Sometimes this is not possible due to other consumers, particularly bindings libraries. Alternatively, if a stub function can be reasonably justified as still satisfying the API constraints, consider adding one to improve compatibility. For example, BoringSSL has many no-op stubs corresponding to OpenSSL's many initialization functions.\n\nIf some parameter now must be `NULL`, change the type to an opaque struct pointer. Consumers passing non-`NULL` pointers will then fail to compile.\n\nIf breaking the compile is not feasible, break at runtime, in the hope that consumers have some amount of test coverage. When doing so, try to fail on the common case. In particular, do not rely on consumers adequately testing or even checking for failure cases. One strategy is to bring the object into a &ldquo;poison&rdquo; state: if an illegal operation occurs, set a flag to fail all subsequent ones.\n\nIn other functions, it may be appropriate to simply call `abort()`.\n\n## Unexpected breakage\n\nWhile we try to avoid breaking things, sometimes things unexpectedly break. Depending on the impact, we may fix the consumer, make a small fix to BoringSSL, or revert the change to either try again later or revise the approach.\n\nIf we do not ultimately fix the consumer, add a test in BoringSSL to capture the unexpected API contract, so future regressions are caught quickly.\n\n## Canary changes and bake time\n\nWhen planning a large project that depends on a breaking change, prefer to make the breaking change first&mdash;before committing larger changes. Or, when changing toolchain or language requirements, add a small instance of the dependency somewhere first then wait a couple of weeks for the change to appear in consumers. This ensures that reverting the change is still feasible if necessary.\n\nWhile we rely on a tight feedback loop with our consumers, there are a few consumers which update less frequently. For extremely risky changes, such as introducing C++ to a target, it may be prudent to wait much longer.\n\n## Third-party code\n\nIn many cases, we are interested in changing behavior which came from OpenSSL. OpenSSL's API surface is huge, but only a small subset is actually used. So we can and occasionally do change these behaviors. This is more complex than changing BoringSSL-only behavior due to third-party code.\n\nWe use BoringSSL with many third-party projects that normally use OpenSSL. Generally, we consider this our burden to make this work and do not encourage external projects to depend on BoringSSL. While we can and do maintain patches for this as necessary, it has overhead and so the cost of breaking third-party code is higher.\n\nWe lean fairly strongly towards making changes to BoringSSL over patching third-party code, unless the third-party change fixes a security problem.\n\nAdditionally, changing an OpenSSL API will not only affect third-party code we use today, but also any third-party code we use in the future. Thus Code Search is less useful as an absolute predictor, and the various other considerations in this document are more important.\n\nIf the patch to support a BoringSSL change can be generally useful to the third-party project, send it upstream. For instance, it may use the APIs better, clean up code, or help support newer versions of OpenSSL. In general, we try to target compatibility with &ldquo;most&rdquo; &ldquo;well-behaved&rdquo; OpenSSL consumers.\n\nFinally, if some particular OpenSSL API or pattern is problematic to BoringSSL, it is likely problematic to OpenSSL too. Consider filing a bug with them to suggest a change, either in new code going forward or for the next API break. OpenSSL's release cycles and feedback loops are much longer than BoringSSL's, so this is usually not immediately useful, but it keeps the ecosystem moving in the right direction.\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 5.388671875,
          "content": "# Copyright 2024 The BoringSSL Authors\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nload(\n    \":gen/sources.bzl\",\n    \"bcm_internal_headers\",\n    \"bcm_sources\",\n    \"bcm_sources_asm\",\n    \"bssl_internal_headers\",\n    \"bssl_sources\",\n    \"crypto_headers\",\n    \"crypto_internal_headers\",\n    \"crypto_sources\",\n    \"crypto_sources_asm\",\n    \"crypto_test_data\",\n    \"crypto_test_sources\",\n    \"decrepit_internal_headers\",\n    \"decrepit_sources\",\n    \"decrepit_test_sources\",\n    \"pki_headers\",\n    \"pki_internal_headers\",\n    \"pki_sources\",\n    \"pki_test_data\",\n    \"pki_test_sources\",\n    \"ssl_headers\",\n    \"ssl_internal_headers\",\n    \"ssl_sources\",\n    \"ssl_test_sources\",\n    \"test_support_internal_headers\",\n    \"test_support_sources\",\n    \"test_support_sources_asm\",\n    \"urandom_test_sources\",\n)\nload(\":util/util.bzl\", \"bssl_cc_binary\", \"bssl_cc_library\", \"bssl_cc_test\")\nload(\"@rules_license//rules:license.bzl\", \"license\")\n\npackage(\n    default_applicable_licenses = [\":license\"],\n    # Disable the parse_headers feature. It does not work well in C right now.\n    # See https://github.com/bazelbuild/bazel/issues/23460 for details. When\n    # that is fixed, if enabled, we likely also need to rename some headers to\n    # .inc per\n    # https://google.github.io/styleguide/cppguide.html#Self_contained_Headers\n    features = [\"-parse_headers\"],\n)\n\nlicense(\n    name = \"license\",\n    package_name = \"BoringSSL\",\n    # TODO(crbug.com/364634028): Update this once we've aligned with OpenSSL's\n    # new license.\n    license_kinds = [\n        \"@rules_license//licenses/spdx:ISC\",\n        \"@rules_license//licenses/spdx:OpenSSL\",\n        \"@rules_license//licenses/spdx:MIT\",\n        \"@rules_license//licenses/spdx:SSLeay-standalone\",\n    ],\n    license_text = \"LICENSE\",\n)\n\nexports_files([\"LICENSE\"])\n\nbssl_cc_library(\n    name = \"crypto\",\n    srcs = bcm_sources + crypto_sources,\n    hdrs = crypto_headers,\n    asm_srcs = bcm_sources_asm + crypto_sources_asm,\n    copts = [\"-DBORINGSSL_IMPLEMENTATION\"],\n    includes = [\"include\"],\n    internal_hdrs = bcm_internal_headers + crypto_internal_headers,\n    linkopts = select({\n        \"@platforms//os:windows\": [\n            \"-defaultlib:advapi32.lib\",\n            \"-defaultlib:ws2_32.lib\",\n        ],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    visibility = [\"//visibility:public\"],\n)\n\nbssl_cc_library(\n    name = \"ssl\",\n    srcs = ssl_sources,\n    hdrs = ssl_headers,\n    copts = [\"-DBORINGSSL_IMPLEMENTATION\"],\n    internal_hdrs = ssl_internal_headers,\n    visibility = [\"//visibility:public\"],\n    deps = [\":crypto_internal\"],\n)\n\nbssl_cc_library(\n    name = \"test_support\",\n    testonly = True,\n    srcs = test_support_sources,\n    asm_srcs = test_support_sources_asm,\n    copts = [\"-DBORINGSSL_USE_BAZEL_RUNFILES\"],\n    internal_hdrs = test_support_internal_headers,\n    deps = [\n        \":crypto_internal\",\n        \"@bazel_tools//tools/cpp/runfiles\",\n        \"@googletest//:gtest\",\n    ],\n)\n\nbssl_cc_test(\n    name = \"crypto_test\",\n    size = \"large\",\n    srcs = crypto_test_sources,\n    data = crypto_test_data,\n    # crypto_test references assembly symbols directly and thus must be linked\n    # statically.\n    linkstatic = True,\n    shard_count = 32,\n    deps = [\n        \":crypto_internal\",\n        \":test_support\",\n        \"@googletest//:gtest\",\n    ],\n)\n\nbssl_cc_test(\n    name = \"urandom_test\",\n    srcs = urandom_test_sources,\n    deps = [\n        \":crypto_internal\",\n        \":test_support\",\n        \"@googletest//:gtest\",\n    ],\n)\n\nbssl_cc_test(\n    name = \"ssl_test\",\n    srcs = ssl_test_sources,\n    deps = [\n        \":crypto_internal\",\n        \":ssl_internal\",\n        \":test_support\",\n        \"@googletest//:gtest\",\n    ],\n)\n\nbssl_cc_binary(\n    name = \"bssl\",\n    srcs = bssl_sources + bssl_internal_headers,\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":crypto_internal\",\n        \":ssl_internal\",\n    ],\n)\n\n# Build, but do not export libdecrepit.\nbssl_cc_library(\n    name = \"decrepit\",\n    srcs = decrepit_sources,\n    copts = [\"-DBORINGSSL_IMPLEMENTATION\"],\n    internal_hdrs = decrepit_internal_headers,\n    deps = [\n        \":crypto_internal\",\n        \":ssl_internal\",\n    ],\n)\n\nbssl_cc_test(\n    name = \"decrepit_test\",\n    srcs = decrepit_test_sources,\n    deps = [\n        \":crypto_internal\",\n        \":decrepit\",\n        \":test_support\",\n        \"@googletest//:gtest\",\n    ],\n)\n\n# Build, but do not (yet) export libpki.\nbssl_cc_library(\n    name = \"pki\",\n    srcs = pki_sources,\n    hdrs = pki_headers,\n    copts = [\"-DBORINGSSL_IMPLEMENTATION\"],\n    internal_hdrs = pki_internal_headers,\n    deps = [\":crypto\"],\n)\n\nbssl_cc_test(\n    name = \"pki_test\",\n    srcs = pki_test_sources,\n    data = pki_test_data,\n    deps = [\n        \":crypto_internal\",\n        \":pki\",\n        \":test_support\",\n        \"@googletest//:gtest\",\n    ],\n)\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 9.3583984375,
          "content": "# Building BoringSSL\n\n## Checking out BoringSSL\n\n    git clone \"https://boringssl.googlesource.com/boringssl\"\n\n## Build Prerequisites\n\nThe standalone CMake build is primarily intended for developers. If embedding\nBoringSSL into another project with a pre-existing build system, see\n[INCORPORATING.md](./INCORPORATING.md).\n\nUnless otherwise noted, build tools must at most five years old, matching\n[Abseil guidelines](https://abseil.io/about/compatibility). If in doubt, use the\nmost recent stable version of each tool.\n\n  * [CMake](https://cmake.org/download/) 3.12 or later is required.\n\n  * Building with [Ninja](https://ninja-build.org/) instead of Make is\n    recommended, because it makes builds faster. On Windows, CMake's Visual\n    Studio generator may also work, but it not tested regularly and requires\n    recent versions of CMake for assembly support.\n\n  * On Windows only, [NASM](https://www.nasm.us/) is required. If not found\n    by CMake, it may be configured explicitly by setting\n    `CMAKE_ASM_NASM_COMPILER`.\n\n  * Compilers for C11 and C++17, or later, are required. On Windows, MSVC from\n    Visual Studio 2022 or later with Windows 10 SDK 2104 or later are\n    supported, but using the latest versions is recommended. Recent versions of\n    GCC (6.1+) and Clang should work on non-Windows platforms, and maybe on\n    Windows too.\n\n## Building\n\nUsing Ninja (note the 'N' is capitalized in the cmake invocation):\n\n    cmake -GNinja -B build\n    ninja -C build\n\nUsing Make (does not work on Windows):\n\n    cmake -B build\n    make -C build\n\nThis produces a debug build by default. Optimisation isn't enabled, and debug\nassertions are included. Pass `-DCMAKE_BUILD_TYPE=Release` to `cmake` to\nconfigure a release build:\n\n    cmake -GNinja -B build -DCMAKE_BUILD_TYPE=Release\n    ninja -C build\n\nIf you want to cross-compile then there is an example toolchain file for 32-bit\nIntel in `util/`. Wipe out the build directory, run `cmake` like this:\n\n    cmake -B build -DCMAKE_TOOLCHAIN_FILE=../util/32-bit-toolchain.cmake -GNinja\n\nIf you want to build as a shared library, pass `-DBUILD_SHARED_LIBS=1`. On\nWindows, where functions need to be tagged with `dllimport` when coming from a\nshared library, define `BORINGSSL_SHARED_LIBRARY` in any code which `#include`s\nthe BoringSSL headers.\n\nIn order to serve environments where code-size is important as well as those\nwhere performance is the overriding concern, `OPENSSL_SMALL` can be defined to\nremove some code that is especially large.\n\nSee [CMake's documentation](https://cmake.org/cmake/help/v3.4/manual/cmake-variables.7.html)\nfor other variables which may be used to configure the build.\n\nYou usually don't need to run `cmake` again after changing `CMakeLists.txt`\nfiles because the build scripts will detect changes to them and rebuild\nthemselves automatically.\n\n### Building for Android\n\nIt's possible to build BoringSSL with the Android NDK using CMake. Recent\nversions of the NDK include a CMake toolchain file which works with CMake 3.6.0\nor later. This has been tested with version r16b of the NDK.\n\nUnpack the Android NDK somewhere and export `ANDROID_NDK` to point to the\ndirectory. Then run CMake like this:\n\n    cmake -DANDROID_ABI=armeabi-v7a \\\n          -DANDROID_PLATFORM=android-19 \\\n          -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n          -GNinja -B build\n\nOnce you've run that, Ninja should produce Android-compatible binaries.  You\ncan replace `armeabi-v7a` in the above with `arm64-v8a` and use API level 21 or\nhigher to build aarch64 binaries.\n\nFor other options, see the documentation in the toolchain file.\n\nTo debug the resulting binaries on an Android device with `gdb`, run the\ncommands below. Replace `ARCH` with the architecture of the target device, e.g.\n`arm` or `arm64`.\n\n    adb push ${ANDROID_NDK}/prebuilt/android-ARCH/gdbserver/gdbserver \\\n        /data/local/tmp\n    adb forward tcp:5039 tcp:5039\n    adb shell /data/local/tmp/gdbserver :5039 /path/on/device/to/binary\n\nThen run the following in a separate shell. Replace `HOST` with the OS and\narchitecture of the host machine, e.g. `linux-x86_64`.\n\n    ${ANDROID_NDK}/prebuilt/HOST/bin/gdb\n    target remote :5039  # in gdb\n\n### Building for iOS\n\nTo build for iOS, pass `-DCMAKE_OSX_SYSROOT=iphoneos` and\n`-DCMAKE_OSX_ARCHITECTURES=ARCH` to CMake, where `ARCH` is the desired\narchitecture, matching values used in the `-arch` flag in Apple's toolchain.\n\nPassing multiple architectures for a multiple-architecture build is not\nsupported.\n\n### Building with Prefixed Symbols\n\nBoringSSL's build system has experimental support for adding a custom prefix to\nall symbols. This can be useful when linking multiple versions of BoringSSL in\nthe same project to avoid symbol conflicts. Symbol prefixing requires the most\nrecent stable version of [Go](https://go.dev/).\n\nIn order to build with prefixed symbols, the `BORINGSSL_PREFIX` CMake variable\nshould specify the prefix to add to all symbols, and the\n`BORINGSSL_PREFIX_SYMBOLS` CMake variable should specify the path to a file\nwhich contains a list of symbols which should be prefixed (one per line;\ncomments are supported with `#`). In other words, `cmake -B build\n-DBORINGSSL_PREFIX=MY_CUSTOM_PREFIX\n-DBORINGSSL_PREFIX_SYMBOLS=/path/to/symbols.txt` will configure the build to add\nthe prefix `MY_CUSTOM_PREFIX` to all of the symbols listed in\n`/path/to/symbols.txt`.\n\nIt is currently the caller's responsibility to create and maintain the list of\nsymbols to be prefixed. Alternatively, `util/read_symbols.go` reads the list of\nexported symbols from a `.a` file, and can be used in a build script to generate\nthe symbol list on the fly (by building without prefixing, using\n`read_symbols.go` to construct a symbol list, and then building again with\nprefixing).\n\nThis mechanism is under development and may change over time. Please contact the\nBoringSSL maintainers if making use of it.\n\n## Known Limitations on Windows\n\n  * CMake can generate Visual Studio projects, but the generated project files\n    don't have steps for assembling the assembly language source files, so they\n    currently cannot be used to build BoringSSL.\n\n## ARM CPU Capabilities\n\nARM, unlike Intel, does not have a userspace instruction that allows\napplications to discover the capabilities of the processor. Instead, the\ncapability information has to be provided by a combination of compile-time\ninformation and the operating system.\n\nBoringSSL determines capabilities at compile-time based on `__ARM_NEON`,\n`__ARM_FEATURE_AES`, and other preprocessor symbols defined in\n[Arm C Language Extensions (ACLE)](https://developer.arm.com/architectures/system-architectures/software-standards/acle).\nThese values are usually controlled by the `-march` flag. You can also define\nany of the following to enable the corresponding ARM feature, but using the ACLE\nsymbols via `-march` is recommended.\n\n  * `OPENSSL_STATIC_ARMCAP_NEON`\n  * `OPENSSL_STATIC_ARMCAP_AES`\n  * `OPENSSL_STATIC_ARMCAP_SHA1`\n  * `OPENSSL_STATIC_ARMCAP_SHA256`\n  * `OPENSSL_STATIC_ARMCAP_PMULL`\n\nThe resulting binary will assume all such features are always present. This can\nreduce code size, by allowing the compiler to omit fallbacks. However, if the\nfeature is not actually supported at runtime, BoringSSL will likely crash.\n\nBoringSSL will additionally query the operating system at runtime for additional\nfeatures, e.g. with `getauxval` on Linux. This allows a single binary to use\nnewer instructions when present, but still function on CPUs without them. But\nsome environments don't support runtime queries. If building for those, define\n`OPENSSL_STATIC_ARMCAP` to limit BoringSSL to compile-time capabilities. If not\ndefined, the target operating system must be known to BoringSSL.\n\n## Binary Size\n\nThe implementations of some algorithms require a trade-off between binary size\nand performance. For instance, BoringSSL's fastest P-256 implementation uses a\n148 KiB pre-computed table. To optimize instead for binary size, pass\n`-DOPENSSL_SMALL=1` to CMake or define the `OPENSSL_SMALL` preprocessor symbol.\n\n# Running Tests\n\nThere are two additional dependencies for running tests:\n\n  * The most recent stable version of [Go](https://go.dev/) is required.\n    Note Go is exempt from the five year support window. If not found by CMake,\n    the go executable may be configured explicitly by setting `GO_EXECUTABLE`.\n\n  * On x86_64 Linux, the tests have an optional\n    [libunwind](https://www.nongnu.org/libunwind/) dependency to test the\n    assembly more thoroughly.\n\nThere are two sets of tests: the C/C++ tests and the blackbox tests. For former\nare built by Ninja and can be run from the top-level directory with `go run\nutil/all_tests.go`. The latter have to be run separately by running `go test`\nfrom within `ssl/test/runner`.\n\nBoth sets of tests may also be run with `ninja -C build run_tests`, but CMake\n3.2 or later is required to avoid Ninja's output buffering.\n\n# Pre-generated Files\n\nIf modifying perlasm files, or `util/pregenerate/build.json`, you will need to\nrun `go run ./util/pregenerate` to refresh some pre-generated files. To do this,\nyou will need a recent version of Perl.\n\nOn Windows, [Active State Perl](http://www.activestate.com/activeperl/) has been\nreported to work, as has MSYS Perl.\n[Strawberry Perl](http://strawberryperl.com/) also works but it adds GCC\nto `PATH`, which can confuse some build tools when identifying the compiler\n(removing `C:\\Strawberry\\c\\bin` from `PATH` should resolve any problems).\n\nSee (gen/README.md)[./gen/README.md] for more details.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 30.3701171875,
          "content": "# Copyright 2014 The BoringSSL Authors\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\ncmake_minimum_required(VERSION 3.16)\n\n# Defer enabling C and CXX languages.\nproject(BoringSSL NONE)\n\n# Don't install BoringSSL to system directories by default; it has no stable\n# ABI. Instead, default to an \"install\" directory under the source.\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install CACHE PATH \"\" FORCE)\nendif()\n\nif(WIN32)\n  # On Windows, prefer cl over gcc if both are available. By default most of\n  # the CMake generators prefer gcc, even on Windows.\n  set(CMAKE_GENERATOR_CC cl)\nendif()\n\ninclude(cmake/go.cmake)\ninclude(cmake/paths.cmake)\ninclude(gen/sources.cmake)\n\nenable_language(C)\nenable_language(CXX)\n\ninclude(GNUInstallDirs)\n\nset(INSTALL_ENABLED 1)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND NOT CMAKE_CROSSCOMPILING)\n  find_package(PkgConfig QUIET)\n  if (PkgConfig_FOUND)\n    pkg_check_modules(LIBUNWIND libunwind-generic>=1.3.0)\n    if(LIBUNWIND_FOUND)\n      add_definitions(-DBORINGSSL_HAVE_LIBUNWIND)\n    else()\n      message(\"libunwind not found. Disabling unwind tests.\")\n    endif()\n  else()\n    message(\"pkgconfig not found. Disabling unwind tests.\")\n  endif()\nendif()\n\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_LOWER)\nif(NOT FIPS)\n  if(CMAKE_BUILD_TYPE_LOWER STREQUAL \"relwithassert\" OR\n     NOT CMAKE_BUILD_TYPE_LOWER MATCHES \"rel\")\n    add_definitions(-DBORINGSSL_DISPATCH_TEST)\n    # CMake automatically connects include_directories to the NASM\n    # command-line, but not add_definitions.\n    set(CMAKE_ASM_NASM_FLAGS \"${CMAKE_ASM_NASM_FLAGS} -DBORINGSSL_DISPATCH_TEST\")\n  endif()\nendif()\n\n# Add a RelWithAsserts build configuration. It is the same as Release, except it\n# does not define NDEBUG, so asserts run.\nforeach(VAR CMAKE_C_FLAGS CMAKE_CXX_FLAGS CMAKE_ASM_FLAGS)\n  string(REGEX REPLACE \"(^| )[/-]DNDEBUG( |$)\" \" \" \"${VAR}_RELWITHASSERTS\"\n         \"${${VAR}_RELEASE}\")\nendforeach()\n\nif(BORINGSSL_PREFIX AND BORINGSSL_PREFIX_SYMBOLS)\n  require_go()\n  add_definitions(-DBORINGSSL_PREFIX=${BORINGSSL_PREFIX})\n  # CMake automatically connects include_directories to the NASM command-line,\n  # but not add_definitions.\n  set(CMAKE_ASM_NASM_FLAGS \"${CMAKE_ASM_NASM_FLAGS} -DBORINGSSL_PREFIX=${BORINGSSL_PREFIX}\")\n\n  # Use \"symbol_prefix_include\" to store generated header files\n  include_directories(${CMAKE_CURRENT_BINARY_DIR}/symbol_prefix_include)\n  add_custom_command(\n    OUTPUT symbol_prefix_include/boringssl_prefix_symbols.h\n           symbol_prefix_include/boringssl_prefix_symbols_asm.h\n           symbol_prefix_include/boringssl_prefix_symbols_nasm.inc\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/symbol_prefix_include\n    COMMAND ${GO_EXECUTABLE} run ${CMAKE_CURRENT_SOURCE_DIR}/util/make_prefix_headers.go -out ${CMAKE_CURRENT_BINARY_DIR}/symbol_prefix_include ${BORINGSSL_PREFIX_SYMBOLS}\n    DEPENDS util/make_prefix_headers.go\n            ${BORINGSSL_PREFIX_SYMBOLS})\n\n  # add_dependencies needs a target, not a file, so we add an intermediate\n  # target.\n  add_custom_target(\n    boringssl_prefix_symbols\n    DEPENDS symbol_prefix_include/boringssl_prefix_symbols.h\n            symbol_prefix_include/boringssl_prefix_symbols_asm.h\n            symbol_prefix_include/boringssl_prefix_symbols_nasm.inc)\nelseif(BORINGSSL_PREFIX OR BORINGSSL_PREFIX_SYMBOLS)\n  message(FATAL_ERROR \"Must specify both or neither of BORINGSSL_PREFIX and BORINGSSL_PREFIX_SYMBOLS\")\nelse()\n  add_custom_target(boringssl_prefix_symbols)\nendif()\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CLANG 1)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(EMSCRIPTEN 1)\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED ON)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CLANG)\n  # Note clang-cl is odd and sets both CLANG and MSVC. We base our configuration\n  # primarily on our normal Clang one.\n  set(C_CXX_FLAGS \"-Werror -Wformat=2 -Wsign-compare -Wwrite-strings -Wvla -Wshadow -Wtype-limits -Wmissing-field-initializers\")\n  if(MSVC)\n    # clang-cl sets different default warnings than clang. It also treats -Wall\n    # as -Weverything, to match MSVC. Instead -W3 is the alias for -Wall.\n    # See http://llvm.org/viewvc/llvm-project?view=revision&revision=319116\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -W3 -Wno-unused-parameter -fmsc-version=1900\")\n  else()\n    if(EMSCRIPTEN)\n      # emscripten's emcc/clang does not accept the \"-ggdb\" flag.\n      set(C_CXX_FLAGS \"${C_CXX_FLAGS} -g\")\n    else()\n      set(C_CXX_FLAGS \"${C_CXX_FLAGS} -ggdb\")\n    endif()\n\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wall -fvisibility=hidden -fno-common\")\n  endif()\n\n  if(CLANG)\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wnewline-eof -Wextra-semi -fcolor-diagnostics\")\n  else()\n    # GCC (at least 4.8.4) has a bug where it'll find unreachable free() calls\n    # and declare that the code is trying to free a stack pointer.\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wno-free-nonheap-object\")\n  endif()\n\n  # -Wstring-concatenation was added in Clang 12.0.0, which corresponds to\n  # AppleClang 13.0.0 per the table in\n  # https://en.wikipedia.org/wiki/Xcode#Toolchain_versions\n  if((CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"12.0.0\") OR\n     (CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"13.0.0\"))\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wstring-concatenation\")\n  endif()\n\n  # Clang 12's -Wframe-larger-than reportedly does not work in clang-cl. See\n  # https://crbug.com/boringssl/709. Clang 13 includes the following fix, which\n  # may be related. Speculatively gate on Clang 13. That corresponds to\n  # AppleClang 13.1.6.\n  # https://github.com/llvm/llvm-project/commit/6aaf4fa2885600b0e31042071ad06f78218ab0f2\n  if((CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"13.0.0\") OR\n     (CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"13.1.6\"))\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wframe-larger-than=25344\")\n  endif()\n\n  # -Wctad-maybe-unsupported was added in Clang 10, which is AppleClang 12.0.0.\n  if((CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"10.0.0\") OR\n     (CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\" AND\n      CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"12.0.0\"))\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wctad-maybe-unsupported\")\n  endif()\n\n  if(CLANG OR CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL \"7.0.0\")\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wimplicit-fallthrough\")\n  endif()\n\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    set(C_CXX_FLAGS \"${C_CXX_FLAGS} -Wformat-signedness\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${C_CXX_FLAGS} -Wmissing-prototypes -Wold-style-definition -Wstrict-prototypes\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${C_CXX_FLAGS} -Wmissing-declarations -Wnon-virtual-dtor\")\n\n  # In GCC, -Wmissing-declarations is the C++ spelling of -Wmissing-prototypes\n  # and using the wrong one is an error. In Clang, -Wmissing-prototypes is the\n  # spelling for both and -Wmissing-declarations is some other warning.\n  #\n  # https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Warning-Options.html#Warning-Options\n  # https://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototypes\n  # https://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-declarations\n  if(CLANG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-prototypes\")\n  endif()\nelseif(MSVC)\n  set(MSVC_DISABLED_WARNINGS_LIST\n      \"C4100\" # 'exarg' : unreferenced formal parameter\n      \"C4127\" # conditional expression is constant\n      \"C4244\" # 'function' : conversion from 'int' to 'uint8_t',\n              # possible loss of data\n      \"C4267\" # conversion from 'size_t' to 'int', possible loss of data\n      \"C4702\" # unreachable code; MSVC's warning is too aggressive. See\n              # https://crbug.com/385161043\n      \"C4706\" # assignment within conditional expression\n      )\n  string(REPLACE \"C\" \" -wd\" MSVC_DISABLED_WARNINGS_STR\n                            ${MSVC_DISABLED_WARNINGS_LIST})\n  set(CMAKE_C_FLAGS   \"-utf-8 -W4 -WX ${MSVC_DISABLED_WARNINGS_STR}\")\n  # Without /Zc:__cplusplus, MSVC does not define the right value for\n  # __cplusplus. See https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/\n  # If this becomes too problematic for downstream code, we can look at\n  # _MSVC_LANG.\n  set(CMAKE_CXX_FLAGS \"-utf-8 -W4 -WX ${MSVC_DISABLED_WARNINGS_STR} -Zc:__cplusplus\")\nendif()\n\nif(WIN32)\n  add_definitions(-D_HAS_EXCEPTIONS=0)\n  add_definitions(-DWIN32_LEAN_AND_MEAN)\n  add_definitions(-DNOMINMAX)\n  # Allow use of fopen.\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\nendif()\n\n# pthread_rwlock_t on Linux requires a feature flag. We limit this to Linux\n# because, on Apple platforms, it instead disables APIs we use. See compat(5)\n# and sys/cdefs.h. Reportedly, FreeBSD also breaks when this is set. See\n# https://crbug.com/boringssl/471.\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_XOPEN_SOURCE=700\")\nendif()\n\nif(FUZZ)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"You need to build with Clang for fuzzing to work\")\n  endif()\n\n  if(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6.0.0\")\n    message(FATAL_ERROR \"You need Clang ≥ 6.0.0\")\n  endif()\n\n  add_definitions(-DBORINGSSL_UNSAFE_DETERMINISTIC_MODE)\n  set(RUNNER_ARGS \"-deterministic\")\n\n  if(NOT NO_FUZZER_MODE)\n    add_definitions(-DBORINGSSL_UNSAFE_FUZZER_MODE)\n    set(RUNNER_ARGS ${RUNNER_ARGS} \"-fuzzer\" \"-shim-config\" \"fuzzer_mode.json\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address,fuzzer-no-link -fsanitize-coverage=edge,indirect-calls\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address,fuzzer-no-link -fsanitize-coverage=edge,indirect-calls\")\nendif()\n\nadd_definitions(-DBORINGSSL_IMPLEMENTATION)\n\nif(BUILD_SHARED_LIBS)\n  add_definitions(-DBORINGSSL_SHARED_LIBRARY)\n  # Enable position-independent code globally. This is needed because\n  # some library targets are OBJECT libraries.\n  set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\nendif()\n\nif(MSAN)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"Cannot enable MSAN unless using Clang\")\n  endif()\n\n  if(ASAN)\n    message(FATAL_ERROR \"ASAN and MSAN are mutually exclusive\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer\")\n  set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer\")\nendif()\n\nif(ASAN)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"Cannot enable ASAN unless using Clang\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address -fsanitize-address-use-after-scope -fno-omit-frame-pointer\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize-address-use-after-scope -fno-omit-frame-pointer\")\nendif()\n\nif(CFI)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"Cannot enable CFI unless using Clang\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=cfi -fno-sanitize-trap=cfi -flto=thin\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=cfi -fno-sanitize-trap=cfi -flto=thin\")\n  # We use Chromium's copy of clang, which requires -fuse-ld=lld if building\n  # with -flto. That, in turn, can't handle -ggdb.\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld\")\n  string(REPLACE \"-ggdb\" \"-g\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  string(REPLACE \"-ggdb\" \"-g\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  # -flto causes object files to contain LLVM bitcode. Mixing those with\n  # assembly output in the same static library breaks the linker.\n  set(OPENSSL_NO_ASM \"1\")\nendif()\n\nif(TSAN)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"Cannot enable TSAN unless using Clang\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=thread\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread\")\nendif()\n\nif(UBSAN)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"Cannot enable UBSAN unless using Clang\")\n  endif()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=undefined\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined\")\n\n  if(NOT UBSAN_RECOVER)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-sanitize-recover=undefined\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-sanitize-recover=undefined\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fno-sanitize-recover=undefined\")\n  endif()\nendif()\n\nif(GCOV)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage\")\nendif()\n\nif(FIPS)\n  require_go()\n  add_definitions(-DBORINGSSL_FIPS)\n  if(FIPS_BREAK_TEST)\n    add_definitions(\"-DBORINGSSL_FIPS_BREAK_${FIPS_BREAK_TEST}=1\")\n  endif()\n  # The FIPS integrity check does not work for ASan and MSan builds.\n  if(NOT ASAN AND NOT MSAN)\n    if(BUILD_SHARED_LIBS)\n      set(FIPS_SHARED \"1\")\n    else()\n      set(FIPS_DELOCATE \"1\")\n    endif()\n  endif()\n  if(FIPS_SHARED)\n    # The Android CMake files set -ffunction-sections and -fdata-sections,\n    # which is incompatible with FIPS_SHARED.\n    set(CMAKE_C_FLAGS\n        \"${CMAKE_C_FLAGS} -fno-function-sections -fno-data-sections\")\n    set(CMAKE_CXX_FLAGS\n        \"${CMAKE_CXX_FLAGS} -fno-function-sections -fno-data-sections\")\n  endif()\nendif()\n\nif(OPENSSL_SMALL)\n  add_definitions(-DOPENSSL_SMALL)\nendif()\n\nif(CONSTANT_TIME_VALIDATION)\n  add_definitions(-DBORINGSSL_CONSTANT_TIME_VALIDATION)\nendif()\n\nif(MALLOC_FAILURE_TESTING)\n  add_definitions(-DBORINGSSL_MALLOC_FAILURE_TESTING)\nendif()\n\nif(OPENSSL_NO_ASM)\n  add_definitions(-DOPENSSL_NO_ASM)\nendif()\n\nif(FIPS_DELOCATE OR NOT OPENSSL_NO_ASM)\n  # On x86 and x86_64 Windows, we use the NASM output.\n  if(WIN32 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"AMD64|x86_64|amd64|x86|i[3-6]86\")\n    enable_language(ASM_NASM)\n    set(OPENSSL_NASM TRUE)\n    set(CMAKE_ASM_NASM_FLAGS \"${CMAKE_ASM_NASM_FLAGS} -gcv8\")\n  else()\n    enable_language(ASM)\n    if (NOT OPENSSL_NO_ASM)\n      set(OPENSSL_ASM TRUE)\n    endif()\n    # Work around https://gitlab.kitware.com/cmake/cmake/-/issues/20771 in older\n    # CMake versions.\n    if(APPLE AND CMAKE_VERSION VERSION_LESS 3.19)\n      if(CMAKE_OSX_SYSROOT)\n        set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -isysroot \\\"${CMAKE_OSX_SYSROOT}\\\"\")\n      endif()\n      foreach(arch ${CMAKE_OSX_ARCHITECTURES})\n        set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -arch ${arch}\")\n      endforeach()\n    endif()\n    if(NOT WIN32)\n      set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -Wa,--noexecstack\")\n    endif()\n    # Clang's integerated assembler does not support debug symbols.\n    if(NOT CMAKE_ASM_COMPILER_ID MATCHES \"Clang\")\n      set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -Wa,-g\")\n    endif()\n  endif()\nendif()\n\nif(OPENSSL_NO_SSE2_FOR_TESTING)\n  add_definitions(-DOPENSSL_NO_SSE2_FOR_TESTING)\nendif()\n\nif(USE_CUSTOM_LIBCXX)\n  if(NOT CLANG)\n    message(FATAL_ERROR \"USE_CUSTOM_LIBCXX only supported with Clang\")\n  endif()\n\n  # CMake does not allow installing a library without installing dependencies.\n  # If we installed libcrypto, we'd have to install our custom libc++, which\n  # does not make sense. As this is a test-only configuration, disable\n  # installing.\n  set(INSTALL_ENABLED 0)\n\n  # CMAKE_CXX_FLAGS ends up in the linker flags as well, so use\n  # add_compile_options. There does not appear to be a way to set\n  # language-specific compile-only flags.\n  add_compile_options(\"-nostdinc++\")\n  set(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -nostdlib++\")\n  include_directories(\n    SYSTEM\n    util/bot/libcxx-config\n    util/bot/libcxx/include\n    util/bot/libcxxabi/include\n  )\n\n  # This is patterned after buildtools/third_party/libc++/BUILD.gn and\n  # buildtools/third_party/libc++abi/BUILD.gn in Chromium.\n\n  file(GLOB LIBCXX_SOURCES \"util/bot/libcxx/src/*.cpp\")\n  file(GLOB LIBCXXABI_SOURCES \"util/bot/libcxxabi/src/*.cpp\")\n\n  # This file is meant for exception-less builds.\n  list(REMOVE_ITEM LIBCXXABI_SOURCES \"trunk/src/cxa_noexception.cpp\")\n  # libc++ also defines new and delete.\n  list(REMOVE_ITEM LIBCXXABI_SOURCES \"trunk/src/stdlib_new_delete.cpp\")\n  if(TSAN)\n    # ThreadSanitizer tries to intercept these symbols. Skip them to avoid\n    # symbol conflicts.\n    list(REMOVE_ITEM LIBCXXABI_SOURCES \"trunk/src/cxa_guard.cpp\")\n  endif()\n\n  add_library(libcxxabi ${LIBCXXABI_SOURCES})\n  target_compile_definitions(\n    libcxxabi PRIVATE\n    -D_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS\n  )\n\n  add_library(libcxx ${LIBCXX_SOURCES})\n  if(ASAN OR MSAN OR TSAN)\n    # Sanitizers try to intercept new and delete.\n    target_compile_definitions(\n      libcxx PRIVATE\n      -D_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS\n    )\n  endif()\n  target_compile_definitions(\n    libcxx PRIVATE\n    -D_LIBCPP_BUILDING_LIBRARY\n    -DLIBCXX_BUILDING_LIBCXXABI\n    -DLIBC_NAMESPACE=bssl_llvm_libc\n  )\n  # LLVM libc++ depends on some shared headers from LLVM libc.\n  target_include_directories(libcxx PRIVATE util/bot/llvm-libc)\n  set_target_properties(\n    libcxx libcxxabi PROPERTIES\n    COMPILE_FLAGS \"-Wno-missing-prototypes -Wno-implicit-fallthrough\"\n    # libc++ and libc++abi must be built in C++23 mode.\n    CXX_STANDARD 23\n    CXX_STANDARD_REQUIRED TRUE\n  )\n  # libc++abi depends on libc++ internal headers.\n  set_property(TARGET libcxx libcxxabi APPEND PROPERTY INCLUDE_DIRECTORIES \"${CMAKE_CURRENT_SOURCE_DIR}/util/bot/libcxx/src\")\n  target_link_libraries(libcxx libcxxabi)\nendif()\n\n# Add minimal googletest targets. The provided one has many side-effects, and\n# googletest has a very straightforward build.\nadd_library(\n  boringssl_gtest\n  third_party/googletest/googlemock/src/gmock-all.cc\n  third_party/googletest/googletest/src/gtest-all.cc\n)\nif(USE_CUSTOM_LIBCXX)\n  target_link_libraries(boringssl_gtest libcxx)\nendif()\ntarget_include_directories(\n    boringssl_gtest\n    PUBLIC\n    third_party/googletest/googlemock/include\n    third_party/googletest/googletest/include\n    PRIVATE\n    third_party/googletest/googlemock\n    third_party/googletest/googletest\n)\n\n# Declare a dummy target to build all unit tests. Test targets should inject\n# themselves as dependencies next to the target definition.\nadd_custom_target(all_tests)\n\nadd_subdirectory(ssl/test)\nadd_subdirectory(util/fipstools)\nadd_subdirectory(util/fipstools/acvp/modulewrapper)\n\nif(OPENSSL_ASM)\n  set(CRYPTO_SOURCES_ASM_USED ${CRYPTO_SOURCES_ASM})\n  set(BCM_SOURCES_ASM_USED ${BCM_SOURCES_ASM})\n  set(TEST_SUPPORT_SOURCES_ASM_USED ${TEST_SUPPORT_SOURCES_ASM})\nelseif(OPENSSL_NASM)\n  set(CRYPTO_SOURCES_ASM_USED ${CRYPTO_SOURCES_NASM})\n  set(BCM_SOURCES_ASM_USED ${BCM_SOURCES_NASM})\n  set(TEST_SUPPORT_SOURCES_ASM_USED ${TEST_SUPPORT_SOURCES_NASM})\nendif()\n\nif(FIPS_DELOCATE AND FIPS_SHARED)\n  message(FATAL_ERROR \"Can't set both delocate and shared mode for FIPS build\")\nendif()\n\n# OSS-Fuzz relies on BORINGSSL_ALLOW_CXX_RUNTIME because -fno-rtti and\n# -fsanitize=vptr are incompatible.\nset(NO_CXX_RUNTIME_FLAGS)\nif(NOT MSVC AND NOT BORINGSSL_ALLOW_CXX_RUNTIME)\n  # Without -fno-exceptions, use of std::unique_ptr emits a call to\n  # std::terminate.\n  set(NO_CXX_RUNTIME_FLAGS -fno-exceptions -fno-rtti)\nendif()\n\nif(FIPS_DELOCATE)\n  add_library(bcm_c_generated_asm STATIC ${BCM_SOURCES})\n  # The C++ code in libcrypto shouldn't depend on libstdc++.\n  target_compile_options(bcm_c_generated_asm PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${NO_CXX_RUNTIME_FLAGS}> \"-S\")\n  add_dependencies(bcm_c_generated_asm boringssl_prefix_symbols)\n  target_include_directories(bcm_c_generated_asm PRIVATE ${PROJECT_SOURCE_DIR}/include)\n  set_target_properties(bcm_c_generated_asm PROPERTIES POSITION_INDEPENDENT_CODE ON)\n  if(CLANG)\n    # Clang warns when passing both -c (from CMake) and -S.\n    target_compile_options(bcm_c_generated_asm PRIVATE \"-Wno-unused-command-line-argument\")\n  endif()\n\n  set(TARGET_FLAG \"\")\n  if(CMAKE_ASM_COMPILER_TARGET)\n    set(TARGET_FLAG \"--target=${CMAKE_ASM_COMPILER_TARGET}\")\n  endif()\n\n  go_executable(delocate boringssl.googlesource.com/boringssl/util/fipstools/delocate)\n  add_custom_command(\n    OUTPUT bcm-delocated.S\n    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/delocate\n            -a $<TARGET_FILE:bcm_c_generated_asm>\n            -o ${CMAKE_CURRENT_BINARY_DIR}/bcm-delocated.S\n            -cc ${CMAKE_ASM_COMPILER}\n            -cc-flags \"${TARGET_FLAG} ${CMAKE_ASM_FLAGS}\"\n            ${BCM_SOURCES_ASM_USED}\n            ${CRYPTO_HEADERS}\n    DEPENDS bcm_c_generated_asm\n            delocate\n            ${BCM_SOURCES_ASM_USED}\n            ${CRYPTO_HEADERS}\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n\n  add_library(bcm_hashunset STATIC bcm-delocated.S)\n  set_target_properties(bcm_hashunset PROPERTIES POSITION_INDEPENDENT_CODE ON)\n  set_target_properties(bcm_hashunset PROPERTIES LINKER_LANGUAGE C)\n\n  go_executable(inject_hash\n                boringssl.googlesource.com/boringssl/util/fipstools/inject_hash)\n  add_custom_command(\n    OUTPUT bcm.o\n    COMMAND ./inject_hash -o bcm.o -in-archive $<TARGET_FILE:bcm_hashunset>\n    DEPENDS bcm_hashunset inject_hash\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  )\n  set(CRYPTO_FIPS_OBJECTS bcm.o)\nelseif(FIPS_SHARED)\n  if(NOT BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"FIPS_SHARED set but not BUILD_SHARED_LIBS\")\n  endif()\n\n  add_library(bcm_library STATIC ${BCM_SOURCES} ${BCM_SOURCES_ASM_USED})\n  # The C++ code in libcrypto shouldn't depend on libstdc++.\n  target_compile_options(bcm_library PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${NO_CXX_RUNTIME_FLAGS}>)\n  add_dependencies(bcm_library boringssl_prefix_symbols)\n  target_include_directories(bcm_library PRIVATE ${PROJECT_SOURCE_DIR}/include)\n\n  add_custom_command(\n    OUTPUT bcm.o\n    COMMAND ${CMAKE_LINKER} -r -T ${CMAKE_CURRENT_SOURCE_DIR}/crypto/fipsmodule/fips_shared.lds -o bcm.o --whole-archive $<TARGET_FILE:bcm_library>\n    DEPENDS bcm_library crypto/fipsmodule/fips_shared.lds\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  )\n  set(CRYPTO_FIPS_OBJECTS bcm.o)\nelse()\n  add_library(fipsmodule OBJECT ${BCM_SOURCES} ${BCM_SOURCES_ASM_USED})\n  # The C++ code in libcrypto shouldn't depend on libstdc++.\n  target_compile_options(fipsmodule PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${NO_CXX_RUNTIME_FLAGS}>)\n  add_dependencies(fipsmodule boringssl_prefix_symbols)\n  target_include_directories(fipsmodule PRIVATE ${PROJECT_SOURCE_DIR}/include)\n  set(CRYPTO_FIPS_OBJECTS $<TARGET_OBJECTS:fipsmodule>)\nendif()\n\nadd_library(crypto ${CRYPTO_SOURCES} ${CRYPTO_FIPS_OBJECTS} ${CRYPTO_SOURCES_ASM_USED})\n  # The C++ code in libcrypto shouldn't depend on libstdc++.\ntarget_compile_options(crypto PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${NO_CXX_RUNTIME_FLAGS}>)\ntarget_include_directories(crypto PUBLIC\n  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:include>\n)\nset_property(TARGET crypto PROPERTY EXPORT_NAME Crypto)\n\nif(FIPS_SHARED)\n  # Rewrite libcrypto.so to inject the correct module hash value. This assumes\n  # UNIX-style library naming, but we only support FIPS mode on Linux anyway.\n  add_custom_command(\n    TARGET crypto POST_BUILD\n    COMMAND ${GO_EXECUTABLE} run\n    ${CMAKE_CURRENT_SOURCE_DIR}/util/fipstools/inject_hash/inject_hash.go\n    -o libcrypto.so -in-object libcrypto.so\n    # The DEPENDS argument to a POST_BUILD rule appears to be ignored. Thus\n    # go_executable isn't used (as it doesn't get built), but we list this\n    # dependency anyway in case it starts working in some CMake version.\n    DEPENDS util/fipstools/inject_hash/inject_hash.go\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  )\nendif()\n\nadd_dependencies(crypto boringssl_prefix_symbols)\nif(WIN32)\n  target_link_libraries(crypto ws2_32)\nendif()\n\n# CMAKE_SYSTEM_NAME is \"Generic\" for embedded OSes:\n# https://cmake.org/cmake/help/book/mastering-cmake/chapter/Cross%20Compiling%20With%20CMake.html#toolchain-files\n#\n# For now we assume embedded OSes do not have threads. Additionally, the Threads\n# package does not work with Android, but Android does not require any extra\n# parameters to link pthreads.\nif(NOT CMAKE_SYSTEM_NAME MATCHES \"^(Generic|Android)$\")\n  find_package(Threads REQUIRED)\n  target_link_libraries(crypto Threads::Threads)\nendif()\n\n# Every target depends on crypto, so we add libcxx as a dependency here to\n# simplify injecting it everywhere.\nif(USE_CUSTOM_LIBCXX)\n  target_link_libraries(crypto libcxx)\nendif()\n\nadd_library(ssl ${SSL_SOURCES})\n# Although libssl also provides headers that require an include directory, the\n# flag is already specified by libcrypto, so we omit target_include_directories\n# here.\nset_property(TARGET ssl PROPERTY EXPORT_NAME SSL)\ntarget_link_libraries(ssl crypto)\n\nadd_library(decrepit ${DECREPIT_SOURCES})\ntarget_link_libraries(decrepit crypto ssl)\n\nadd_library(test_support_lib STATIC\n            ${TEST_SUPPORT_SOURCES} ${TEST_SUPPORT_SOURCES_ASM_USED})\nif(LIBUNWIND_FOUND)\n  target_compile_options(test_support_lib PRIVATE ${LIBUNWIND_CFLAGS_OTHER})\n  target_include_directories(test_support_lib PRIVATE ${LIBUNWIND_INCLUDE_DIRS})\n  target_link_libraries(test_support_lib ${LIBUNWIND_LDFLAGS})\nendif()\nif(WIN32)\n  target_link_libraries(test_support_lib dbghelp)\nendif()\ntarget_link_libraries(test_support_lib boringssl_gtest crypto)\n\n# urandom_test is a separate binary because it needs to be able to observe the\n# PRNG initialisation, which means that it can't have other tests running before\n# it does.\nadd_executable(urandom_test ${URANDOM_TEST_SOURCES})\ntarget_link_libraries(urandom_test test_support_lib boringssl_gtest crypto)\nadd_dependencies(all_tests urandom_test)\n\nadd_executable(crypto_test ${CRYPTO_TEST_SOURCES})\ntarget_link_libraries(crypto_test test_support_lib boringssl_gtest crypto)\nadd_dependencies(all_tests crypto_test)\n\nadd_executable(ssl_test ${SSL_TEST_SOURCES})\ntarget_link_libraries(ssl_test test_support_lib boringssl_gtest ssl crypto)\nadd_dependencies(all_tests ssl_test)\nadd_executable(decrepit_test ${DECREPIT_TEST_SOURCES})\ntarget_link_libraries(decrepit_test test_support_lib boringssl_gtest\n                      decrepit crypto)\nadd_dependencies(all_tests decrepit_test)\n\nif(APPLE)\n  set(PKI_CXX_FLAGS \"-fno-aligned-new\")\nendif()\n\nadd_library(pki ${PKI_SOURCES})\ntarget_link_libraries(pki crypto)\n\nadd_executable(pki_test ${PKI_TEST_SOURCES})\ntarget_link_libraries(pki_test test_support_lib boringssl_gtest pki crypto)\nadd_dependencies(all_tests pki_test)\n\nset_target_properties(\n  pki pki_test\n  PROPERTIES\n  COMPILE_FLAGS \"${PKI_CXX_FLAGS}\")\n\nadd_executable(bssl ${BSSL_SOURCES})\ntarget_link_libraries(bssl ssl crypto)\n\n# Historically, targets were built in subdirectories. For compatibility with\n# existing tools, we, for now, copy the targets into the subdirectories. This\n# will be removed sometime in 2024.\ncopy_post_build(crypto crypto crypto_test urandom_test)\ncopy_post_build(ssl ssl ssl_test)\ncopy_post_build(decrepit decrepit decrepit_test)\ncopy_post_build(tool bssl)\n\nif(FUZZ)\n  if(LIBFUZZER_FROM_DEPS)\n    file(GLOB LIBFUZZER_SOURCES \"util/bot/libFuzzer/*.cpp\")\n    add_library(Fuzzer STATIC ${LIBFUZZER_SOURCES})\n    # libFuzzer does not pass our aggressive warnings. It also must be built\n    # without -fsanitize-coverage options or clang crashes.\n    set_target_properties(\n      Fuzzer PROPERTIES\n      COMPILE_FLAGS \"-Wno-shadow -Wno-format-nonliteral -Wno-missing-prototypes -fsanitize-coverage=0\"\n    )\n  endif()\n\n  add_subdirectory(fuzz)\nendif()\n\nif(RUST_BINDINGS)\n  find_program(BINDGEN_EXECUTABLE bindgen)\n  if(NOT BINDGEN_EXECUTABLE)\n    message(FATAL_ERROR \"Could not find bindgen but was asked to generate Rust bindings.\")\n  else()\n    add_subdirectory(rust)\n  endif()\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  set(HANDSHAKER_ARGS \"-handshaker-path\" $<TARGET_FILE:handshaker>)\nendif()\n\nif(FIPS)\n  add_custom_target(\n    acvp_tests\n    COMMAND ${GO_EXECUTABLE} build -o ${CMAKE_CURRENT_BINARY_DIR}/acvptool\n            boringssl.googlesource.com/boringssl/util/fipstools/acvp/acvptool\n    COMMAND ${GO_EXECUTABLE} build -o ${CMAKE_CURRENT_BINARY_DIR}/testmodulewrapper\n            boringssl.googlesource.com/boringssl/util/fipstools/acvp/acvptool/testmodulewrapper\n    COMMAND cd util/fipstools/acvp/acvptool/test &&\n            ${GO_EXECUTABLE} run check_expected.go\n            -tool ${CMAKE_CURRENT_BINARY_DIR}/acvptool\n            -module-wrappers modulewrapper:$<TARGET_FILE:modulewrapper>,testmodulewrapper:${CMAKE_CURRENT_BINARY_DIR}/testmodulewrapper\n            -tests tests.json\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    DEPENDS modulewrapper\n    USES_TERMINAL)\n\n  add_custom_target(\n    fips_specific_tests_if_any\n    DEPENDS acvp_tests\n  )\nelse()\n  add_custom_target(fips_specific_tests_if_any)\nendif()\n\nfile(STRINGS util/go_tests.txt GO_TESTS)\nset_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS\n             util/go_tests.txt)\n\nif(GO_EXECUTABLE)\n  add_custom_target(\n      run_tests\n      COMMAND ${CMAKE_COMMAND} -E echo \"Running Go tests\"\n      COMMAND ${GO_EXECUTABLE} test ${GO_TESTS}\n      COMMAND ${CMAKE_COMMAND} -E echo\n      COMMAND ${CMAKE_COMMAND} -E echo \"Running unit tests\"\n      COMMAND ${GO_EXECUTABLE} run util/all_tests.go -build-dir\n              ${CMAKE_CURRENT_BINARY_DIR}\n      COMMAND ${CMAKE_COMMAND} -E echo\n      COMMAND ${CMAKE_COMMAND} -E echo \"Running SSL tests\"\n      COMMAND cd ssl/test/runner &&\n              ${GO_EXECUTABLE} test -shim-path $<TARGET_FILE:bssl_shim>\n                ${HANDSHAKER_ARGS} ${RUNNER_ARGS}\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n      DEPENDS all_tests bssl_shim handshaker fips_specific_tests_if_any\n      USES_TERMINAL)\nelse()\n  add_custom_target(\n      run_tests\n      COMMAND ${CMAKE_COMMAND} -E echo \"Running tests requires Go\"\n      COMMAND ${CMAKE_COMMAND} -E false)\nendif()\n\nif(INSTALL_ENABLED)\n  install(TARGETS crypto ssl EXPORT OpenSSLTargets)\n  install(TARGETS bssl)\n  install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  install(EXPORT OpenSSLTargets\n          FILE OpenSSLTargets.cmake\n          NAMESPACE OpenSSL::\n          DESTINATION lib/cmake/OpenSSL)\n  install(FILES cmake/OpenSSLConfig.cmake DESTINATION lib/cmake/OpenSSL)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5078125,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first via email with your idea so that we can help out and possibly guide\nyou. Coordinating up front makes it much easier to avoid frustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse [Gerrit](https://boringssl-review.googlesource.com) for this purpose.\n\n#### Setup\nIf you have not done so on this machine, you will need to set up a password for\nGerrit. Sign in with a Google account, visit\n[this link](https://boringssl.googlesource.com/), and click the \"Generate\nPassword\" link in the top right. You must also have a Gerrit account associated with\nyour Google account.  To do this visit the [Gerrit review server](https://boringssl-review.googlesource.com)\nand click \"Sign in\" (top right).\nYou will also need to prepare your checkout to\n[add Change-Ids](https://gerrit-review.googlesource.com/Documentation/cmd-hook-commit-msg.html)\non commit. Run:\n\n    curl -Lo .git/hooks/commit-msg https://boringssl-review.googlesource.com/tools/hooks/commit-msg\n    chmod u+x .git/hooks/commit-msg\n\n#### Uploading changes\nTo upload a change, push it to the special `refs/for/master` target:\n\n    git push origin HEAD:refs/for/master\n\nThe output will then give you a link to the change. Add `agl@google.com`,\n`davidben@google.com`, and `bbe@google.com` as reviewers.\n\nPushing a commit with the same Change-Id as an existing change will upload a new\nversion of it. (Use the `git rebase` or `git commit --amend` commands.)\n\nFor more detailed instructions, see the\n[Gerrit User Guide](https://gerrit-review.googlesource.com/Documentation/intro-user.html).\n\n### Copyright headers\nNew files contributed directly to BoringSSL should use the following copyright\nheader, where `YEAR` is the year the file was added:\n\n    Copyright YEAR The BoringSSL Authors\n\nTo list individual contributors, we maintain an [AUTHORS](./AUTHORS) file at the\ntop level of the project. See [this documentation](https://opensource.google/documentation/reference/releasing/authors)\nfor more details. If you wish to be added, you are welcome to add yourself as\npart of your contribution, or request that we add you.\n\nWe started the AUTHORS file after the project began, and after receiving many\nvaluable contributions. To avoid being presumptuous, we did not proactively list\nall past contributors. If you previously made a contribution, you are likewise\nwelcome to send us a patch to be added, or request that we add you.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "FUZZING.md",
          "type": "blob",
          "size": 4.333984375,
          "content": "# Fuzz testing\n\nModern fuzz testers are very effective and we wish to use them to ensure that no silly bugs creep into BoringSSL.\n\nWe use Clang's [libFuzzer](http://llvm.org/docs/LibFuzzer.html) for fuzz testing and there are a number of fuzz testing functions in `fuzz/`. They are not built by default because they require that the rest of BoringSSL be built with some changes that make fuzzing much more effective, but are completely unsafe for real use.\n\nIn order to build the fuzz tests you will need at least Clang 6.0. Pass `-DFUZZ=1` on the CMake command line to enable building BoringSSL with coverage and AddressSanitizer, and to build the fuzz test binaries. You'll probably need to set the `CC` and `CXX` environment variables too, like this:\n\n```\nCC=clang CXX=clang++ cmake -GNinja -DFUZZ=1 -B build\nninja -C build\n```\n\n\nFrom the `build/` directory, you can then run the fuzzers. For example:\n\n```\n./fuzz/cert -max_len=10000 -jobs=32 -workers=32 ../fuzz/cert_corpus/\n```\n\nThe arguments to `jobs` and `workers` should be the number of cores that you wish to dedicate to fuzzing. By default, libFuzzer uses the largest test in the corpus (or 64 if empty) as the maximum test case length. The `max_len` argument overrides this.\n\nThe recommended values of `max_len` for each test are:\n\n| Test          | `max_len` value |\n|---------------|-----------------|\n| `bn_div`      | 384             |\n| `bn_mod_exp`  | 4096            |\n| `cert`        | 10000           |\n| `client`      | 20000           |\n| `pkcs8`       | 2048            |\n| `privkey`     | 2048            |\n| `server`      | 4096            |\n| `session`     | 8192            |\n| `spki`        | 1024            |\n| `read_pem`    | 512             |\n| `ssl_ctx_api` | 256             |\n\nThese were determined by rounding up the length of the largest case in the corpus.\n\nThere are directories in `fuzz/` for each of the fuzzing tests which contain seed files for fuzzing. Some of the seed files were generated manually but many of them are “interesting” results generated by the fuzzing itself. (Where “interesting” means that it triggered a previously unknown path in the code.)\n\n## Minimising the corpora\n\nWhen a large number of new seeds are available, it's a good idea to minimise the corpus so that different seeds that trigger the same code paths can be deduplicated.\n\nIn order to minimise all the corpora, build for fuzzing and run `./fuzz/minimise_corpora.sh`. Note that minimisation is, oddly, often not idempotent for unknown reasons.\n\n## Fuzzer mode\n\nWhen `-DFUZZ=1` is passed into CMake, BoringSSL builds with `BORINGSSL_UNSAFE_FUZZER_MODE` and `BORINGSSL_UNSAFE_DETERMINISTIC_MODE` defined. This modifies the library to be more friendly to fuzzers. If `BORINGSSL_UNSAFE_DETERMINISTIC_MODE` is set, BoringSSL will:\n\n* Replace `RAND_bytes` with a deterministic PRNG. Call `RAND_reset_for_fuzzing()` at the start of fuzzers which use `RAND_bytes` to reset the PRNG state.\n\n* Use a hard-coded time instead of the actual time.\n\nAdditionally, if `BORINGSSL_UNSAFE_FUZZER_MODE` is set, BoringSSL will:\n\n* Modify the TLS stack to perform all signature checks (CertificateVerify and ServerKeyExchange) and the Finished check, but always act as if the check succeeded.\n\n* Treat every cipher as the NULL cipher.\n\n* Tickets are unencrypted and the MAC check is performed but ignored.\n\n* renegotiation\\_info checks are ignored.\n\nThis is to prevent the fuzzer from getting stuck at a cryptographic invariant in the protocol.\n\n## TLS transcripts\n\nThe `client` and `server` corpora are seeded from the test suite. The test suite has a `-fuzzer` flag which mirrors the fuzzer mode changes above and a `-deterministic` flag which removes all non-determinism on the Go side. Not all tests pass, so `ssl/test/runner/fuzzer_mode.json` contains the necessary suppressions. The `run_tests` target will pass appropriate command-line flags.\n\nThere are separate corpora, `client_corpus_no_fuzzer_mode` and `server_corpus_no_fuzzer_mode`. These are transcripts for fuzzers with only `BORINGSSL_UNSAFE_DETERMINISTIC_MODE` defined. To build in this mode, pass `-DNO_FUZZER_MODE=1` into CMake. This configuration is run in the same way but without `-fuzzer` and `-shim-config` flags.\n\nIf both sets of tests pass, refresh the fuzzer corpora with `refresh_ssl_corpora.sh`:\n\n```\ncd fuzz\n./refresh_ssl_corpora.sh /path/to/fuzzer/mode/build /path/to/non/fuzzer/mode/build\n```\n"
        },
        {
          "name": "INCORPORATING.md",
          "type": "blob",
          "size": 5.90234375,
          "content": "# Incorporating BoringSSL into a project\n\n**Note**: if your target project is not a Google project then first read the\n[main README](./README.md) about the purpose of BoringSSL.\n\nIf you are porting BoringSSL to a new platform see\n[\"go/boringssl-on-new-platform\"](https://goto.corp.google.com/boringssl-on-new-platform) (Google\nInternal) for information about porting BoringSSL to a new platform for a Google\nproject.\n\n## Which branch to use\n\nBoringSSL usage typically follows a\n[\"live at head\"](https://abseil.io/about/philosophy#we-recommend-that-you-choose-to-live-at-head)\nmodel. Projects pin to whatever the current latest of BoringSSL is at the time\nof update, and regularly update it to pick up new changes.\n\nSome systems cannot consume git revisions and expect git tags. BoringSSL tags\nperiodic snapshots as \"releases\", to meet the needs of those systems. These\nversions do not represent any kind of stability or development milestone.\nBoringSSL does not branch at these releases and will not cherry-pick bugfixes to\nthem. Unless there is a technical constraint to use one of these revisions,\nprojects should simply use the latest untagged revision when updating.\n\nWhile the BoringSSL repository may contain project-specific branches, e.g.\n`chromium-2214`, those are _not_ supported release branches and must not as\nsuch. In rare cases, BoringSSL will temporarily maintain a short-lived branch on\nbehalf of a project. Most such branches are no longer updated, because the\ncorresponding project no longer needs them, and we do not create new ones to\nreplace the ones that are no longer updated. E.g., not every Chromium release\nbranch has a corresponding BoringSSL `chromium-*` branch. Even while active, the\nbranch may not contain all changes relevant to a general BoringSSL consumer.\n\n## Bazel\n\nIf you are using [Bazel](https://bazel.build) then you can use the [boringssl\nmodule](https://registry.bazel.build/modules/boringssl) in the Bazel Central\nRegistry with bzlmod. Look up the latest version and add the following to your\n`MODULE.bazel` file:\n\n    bazel_dep(name = \"boringssl\", version = \"INSERT_VERSION_HERE\")\n\nSubstitute the latest version in for `INSERT_VERSION_HERE`.\n\nBoringSSL will periodically ship snapshots to Bazel Central Registry. As with\nother dependencies, periodically keep the referenced version up-to-date.\n\n## Directory layout\n\nTypically projects create a `third_party/boringssl` directory to put\nBoringSSL-specific files into. The source code of BoringSSL itself goes into\n`third_party/boringssl/src`, either by copying or as a\n[submodule](https://git-scm.com/docs/git-submodule).\n\nIt's generally a mistake to put BoringSSL's source code into\n`third_party/boringssl` directly because custom build files need to go somewhere\nand merging these with the BoringSSL source code makes updating things more\ncomplex.\n\n## Build support\n\nBoringSSL is designed to work with many different build systems. The project\ncurrently has [CMake](https://cmake.org/) and [Bazel](https://bazel.build/)\nbuilds checked in. Other build systems, and embedders with custom build needs,\nare supported by separating the source list, maintained by BoringSSL, and the\ntop-level build logic, maintained by the embedder.\n\nSource lists for various build systems are pre-generated and live in the `gen`\ndirectory. For example, source lists for\n[GN](https://gn.googlesource.com/gn/+/master/docs/quick_start.md) live in\n[gen/sources.gni](./gen/sources.gni). There is also a generic\n[gen/sources.json](./gen/sources.json) file for projects to consume if needed.\n[util/build/build.go](./util/build/build.go) describes what the various source\nlists mean. Most projects should concatenate the `bcm` and `crypto` targets.\n\nIf you don't use any of the supported build systems, you should augment the\n[util/pregenerate](./util/pregenerate) tool to support it, or\nconsume [gen/sources.json](./gen/sources.json).\n\nHistorically, source lists were generated at update time with the\n[`util/generate_build_files.py`](./util/generate_build_files.py) script. We are\nin the process of transitioning builds to the pre-generated files, so that\nembedders do not need to run a custom script when updating BoringSSL.\n\n## Defines\n\nBoringSSL does not present a lot of configurability in order to reduce the\nnumber of configurations that need to be tested. But there are a couple of\n\\#defines that you may wish to set:\n\n`OPENSSL_NO_ASM` prevents the use of assembly code (although it's up to you to\nensure that the build system doesn't link it in if you wish to reduce binary\nsize). This will have a significant performance impact but can be useful if you\nwish to use tools like\n[AddressSanitizer](http://clang.llvm.org/docs/AddressSanitizer.html) that\ninteract poorly with assembly code.\n\n`OPENSSL_SMALL` removes some code that is especially large at some performance\ncost.\n\n## Symbols\n\nYou cannot link multiple versions of BoringSSL or OpenSSL into a single binary\nwithout dealing with symbol conflicts. If you are statically linking multiple\nversions together, there's not a lot that can be done because C doesn't have a\nmodule system.\n\nIf you are using multiple versions in a single binary, in different shared\nobjects, ensure you build BoringSSL with `-fvisibility=hidden` and do not\nexport any of BoringSSL's symbols. This will prevent any collisions with other\nverisons that may be included in other shared objects. Note that this requires\nthat all callers of BoringSSL APIs live in the same shared object as BoringSSL.\n\nIf you require that BoringSSL APIs be used across shared object boundaries,\ncontinue to build with `-fvisibility=hidden` but define\n`BORINGSSL_SHARED_LIBRARY` in both BoringSSL and consumers. BoringSSL's own\nsource files (but *not* consumers' source files) must also build with\n`BORINGSSL_IMPLEMENTATION` defined. This will export BoringSSL's public symbols\nin the resulting shared object while hiding private symbols. However note that,\nas with a static link, this precludes dynamically linking with another version\nof BoringSSL or OpenSSL.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.240234375,
          "content": "BoringSSL is a fork of OpenSSL. As such, large parts of it fall under OpenSSL\nlicensing. Files that are completely new have a Google copyright and an ISC\nlicense. This license is reproduced at the bottom of this file.\n\nContributors to BoringSSL are required to follow the CLA rules for Chromium:\nhttps://cla.developers.google.com/clas\n\nFiles in third_party/ have their own licenses, as described therein. The MIT\nlicense, for third_party/fiat, which, unlike other third_party directories, is\ncompiled into non-test libraries, is included below.\n\nThe OpenSSL toolkit stays under a dual license, i.e. both the conditions of the\nOpenSSL License and the original SSLeay license apply to the toolkit. See below\nfor the actual license texts. Actually both licenses are BSD-style Open Source\nlicenses. In case of any license issues related to OpenSSL please contact\nopenssl-core@openssl.org.\n\nThe following are Google-internal bug numbers where explicit permission from\nsome authors is recorded for use of their work. (This is purely for our own\nrecord keeping.)\n  27287199\n  27287880\n  27287883\n  263291445\n\n  OpenSSL License\n  ---------------\n\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n Original SSLeay License\n -----------------------\n\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    \"This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\"\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\n */\n\n\nISC license used for completely new code in BoringSSL:\n\n/* Copyright 2015 The BoringSSL Authors\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */\n\n\nThe code in third_party/fiat carries the MIT license:\n\nCopyright (c) 2015-2016 the fiat-crypto authors (see\nhttps://github.com/mit-plv/fiat-crypto/blob/master/AUTHORS).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nLicenses for support code\n-------------------------\n\nParts of the TLS test suite are under the Go license. This code is not included\nin BoringSSL (i.e. libcrypto and libssl) when compiled, however, so\ndistributing code linked against BoringSSL does not trigger this license:\n\nCopyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nBoringSSL uses the Chromium test infrastructure to run a continuous build,\ntrybots etc. The scripts which manage this, and the script for generating build\nmetadata, are under the Chromium license. Distributing code linked against\nBoringSSL does not trigger this license.\n\nCopyright 2015 The Chromium Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 1.7080078125,
          "content": "# Copyright 2024 The BoringSSL Authors\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n# When tagging a new periodic snapshot, bump the version here and then tag at\n# the revision where we bump the version.\nmodule(\n    name = \"boringssl\",\n    version = \"0.20241209.0\",\n    compatibility_level = 2,\n)\n\n# Periodically update the following dependencies to their latest versions\n# listed on https://registry.bazel.build/. When doing so, run\n# `bazelisk test ...` to update the hashes in MODULE.bazel.lock.\n\n# In principle, googletest is only needed for tests and could be a\n# dev_dependency. But it would then be impossible for downstream modules to run\n# BoringSSL's tests. The downstream module provides the toolchain, so we may\n# need to request they run tests when triaging issues. If\n# https://github.com/bazelbuild/bazel/issues/22187 is ever fixed, we can change\n# this.\nbazel_dep(name = \"googletest\", version = \"1.15.2\")\n\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"rules_cc\", version = \"0.1.0\")\nbazel_dep(name = \"rules_license\", version = \"1.0.0\")\n"
        },
        {
          "name": "MODULE.bazel.lock",
          "type": "blob",
          "size": 13.6640625,
          "content": "{\n  \"lockFileVersion\": 11,\n  \"registryFileHashes\": {\n    \"https://bcr.bazel.build/bazel_registry.json\": \"8a28e4aff06ee60aed2a8c281907fb8bcbf3b753c91fb5a5c57da3215d5b3497\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20210324.2/MODULE.bazel\": \"7cd0312e064fde87c8d1cd79ba06c876bd23630c83466e9500321be55c96ace2\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20211102.0/MODULE.bazel\": \"70390338f7a5106231d20620712f7cccb659cd0e9d073d1991c038eb9fc57589\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230125.1/MODULE.bazel\": \"89047429cb0207707b2dface14ba7f8df85273d484c2572755be4bab7ce9c3a0\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230802.0/MODULE.bazel\": \"d253ae36a8bd9ee3c5955384096ccb6baf16a1b1e93e858370da0a3b94f77c16\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20240116.2/MODULE.bazel\": \"73939767a4686cd9a520d16af5ab440071ed75cec1a876bf2fcfaf1f71987a16\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20240116.2/source.json\": \"750d5e29326fb59cbe61116a7b803c8a1d0a7090a9c8ed89888d188e3c473fc7\",\n    \"https://bcr.bazel.build/modules/apple_support/1.15.1/MODULE.bazel\": \"a0556fefca0b1bb2de8567b8827518f94db6a6e7e7d632b4c48dc5f865bc7c85\",\n    \"https://bcr.bazel.build/modules/apple_support/1.15.1/source.json\": \"517f2b77430084c541bc9be2db63fdcbb7102938c5f64c17ee60ffda2e5cf07b\",\n    \"https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel\": \"50341a62efbc483e8a2a6aec30994a58749bd7b885e18dd96aa8c33031e558ef\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.1.1/MODULE.bazel\": \"27b8c79ef57efe08efccbd9dd6ef70d61b4798320b8d3c134fd571f78963dbcd\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.11.0/MODULE.bazel\": \"f9382337dd5a474c3b7d334c2f83e50b6eaedc284253334cf823044a26de03e8\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.19.0/MODULE.bazel\": \"59adcdf28230d220f0067b1f435b8537dd033bfff8db21335ef9217919c7fb58\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.19.0/source.json\": \"d7bf14517c1b25b9d9c580b0f8795fceeae08a7590f507b76aace528e941375d\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.9.1/MODULE.bazel\": \"8f679097876a9b609ad1f60249c49d68bfab783dd9be012faf9d82547b14815a\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.0.3/MODULE.bazel\": \"bcb0fd896384802d1ad283b4e4eb4d718eebd8cb820b0a2c3a347fb971afd9d8\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.1.1/MODULE.bazel\": \"1add3e7d93ff2e6998f9e118022c84d163917d912f5afafb3058e3d2f1545b5e\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.2.1/MODULE.bazel\": \"f35baf9da0efe45fa3da1696ae906eea3d615ad41e2e3def4aeb4e8bc0ef9a7a\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.3.0/MODULE.bazel\": \"20228b92868bf5cfc41bda7afc8a8ba2a543201851de39d990ec957b513579c5\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.4.1/MODULE.bazel\": \"a0dcb779424be33100dcae821e9e27e4f2901d9dfd5333efe5ac6a8d7ab75e1d\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.5.0/MODULE.bazel\": \"32880f5e2945ce6a03d1fbd588e9198c0a959bb42297b2cfaf1685b7bc32e138\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.6.1/MODULE.bazel\": \"8fdee2dbaace6c252131c00e1de4b165dc65af02ea278476187765e1a617b917\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.7.1/MODULE.bazel\": \"3120d80c5861aa616222ec015332e5f8d3171e062e3e804a2a0253e1be26e59b\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.7.1/source.json\": \"f121b43eeefc7c29efbd51b83d08631e2347297c95aac9764a701f2a6a2bb953\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/MODULE.bazel\": \"2e8dd40ede9c454042645fd8d8d0cd1527966aa5c919de86661e62953cd73d84\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/source.json\": \"c9028a501d2db85793a6996205c8de120944f50a0d570438fcae0457a5f9d1f8\",\n    \"https://bcr.bazel.build/modules/google_benchmark/1.8.2/MODULE.bazel\": \"a70cf1bba851000ba93b58ae2f6d76490a9feb74192e57ab8e8ff13c34ec50cb\",\n    \"https://bcr.bazel.build/modules/googletest/1.11.0/MODULE.bazel\": \"3a83f095183f66345ca86aa13c58b59f9f94a2f81999c093d4eeaa2d262d12f4\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0.bcr.1/MODULE.bazel\": \"22c31a561553727960057361aa33bf20fb2e98584bc4fec007906e27053f80c6\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0/MODULE.bazel\": \"cfbcbf3e6eac06ef9d85900f64424708cc08687d1b527f0ef65aa7517af8118f\",\n    \"https://bcr.bazel.build/modules/googletest/1.15.2/MODULE.bazel\": \"6de1edc1d26cafb0ea1a6ab3f4d4192d91a312fd2d360b63adaa213cd00b2108\",\n    \"https://bcr.bazel.build/modules/googletest/1.15.2/source.json\": \"dbdda654dcb3a0d7a8bc5d0ac5fc7e150b58c2a986025ae5bc634bb2cb61f470\",\n    \"https://bcr.bazel.build/modules/libpfm/4.11.0/MODULE.bazel\": \"45061ff025b301940f1e30d2c16bea596c25b176c8b6b3087e92615adbd52902\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.10/MODULE.bazel\": \"8cb8efaf200bdeb2150d93e162c40f388529a25852b332cec879373771e48ed5\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.10/source.json\": \"f22828ff4cf021a6b577f1bf6341cb9dcd7965092a439f64fc1bb3b7a5ae4bd5\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.4/MODULE.bazel\": \"9b328e31ee156f53f3c416a64f8491f7eb731742655a47c9eec4703a71644aee\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.5/MODULE.bazel\": \"5733b54ea419d5eaf7997054bb55f6a1d0b5ff8aedf0176fef9eea44f3acda37\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.6/MODULE.bazel\": \"ad6eeef431dc52aefd2d77ed20a4b353f8ebf0f4ecdd26a807d2da5aa8cd0615\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.7/MODULE.bazel\": \"72fd4a0ede9ee5c021f6a8dd92b503e089f46c227ba2813ff183b71616034814\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.8/MODULE.bazel\": \"9f142c03e348f6d263719f5074b21ef3adf0b139ee4c5133e2aa35664da9eb2d\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.9/MODULE.bazel\": \"4a87a60c927b56ddd67db50c89acaa62f4ce2a1d2149ccb63ffd871d5ce29ebc\",\n    \"https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel\": \"a5a29bb89544f9b97edce05642fac225a808b5b7be74038ea3640fae2f8e66a7\",\n    \"https://bcr.bazel.build/modules/protobuf/21.7/source.json\": \"bbe500720421e582ff2d18b0802464205138c06056f443184de39fbb8187b09b\",\n    \"https://bcr.bazel.build/modules/protobuf/3.19.0/MODULE.bazel\": \"6b5fbb433f760a99a22b18b6850ed5784ef0e9928a72668b66e4d7ccd47db9b0\",\n    \"https://bcr.bazel.build/modules/protobuf/3.19.6/MODULE.bazel\": \"9233edc5e1f2ee276a60de3eaa47ac4132302ef9643238f23128fea53ea12858\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.11.1/MODULE.bazel\": \"88af1c246226d87e65be78ed49ecd1e6f5e98648558c14ce99176da041dc378e\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/MODULE.bazel\": \"e6f4c20442eaa7c90d7190d8dc539d0ab422f95c65a57cc59562170c58ae3d34\",\n    \"https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/source.json\": \"6900fdc8a9e95866b8c0d4ad4aba4d4236317b5c1cd04c502df3f0d33afed680\",\n    \"https://bcr.bazel.build/modules/re2/2023-09-01/MODULE.bazel\": \"cb3d511531b16cfc78a225a9e2136007a48cf8a677e4264baeab57fe78a80206\",\n    \"https://bcr.bazel.build/modules/re2/2024-07-02/MODULE.bazel\": \"0eadc4395959969297cbcf31a249ff457f2f1d456228c67719480205aa306daa\",\n    \"https://bcr.bazel.build/modules/re2/2024-07-02/source.json\": \"547d0111a9d4f362db32196fef805abbf3676e8d6afbe44d395d87816c1130ca\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.1/MODULE.bazel\": \"cb2aa0747f84c6c3a78dad4e2049c154f08ab9d166b1273835a8174940365647\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.2/MODULE.bazel\": \"6915987c90970493ab97393024c156ea8fb9f3bea953b2f3ec05c34f19b5695c\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.6/MODULE.bazel\": \"abf360251023dfe3efcef65ab9d56beefa8394d4176dd29529750e1c57eaa33f\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.8/MODULE.bazel\": \"964c85c82cfeb6f3855e6a07054fdb159aced38e99a5eecf7bce9d53990afa3e\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel\": \"836e76439f354b89afe6a911a7adf59a6b2518fafb174483ad78a2a2fde7b1c5\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.1.0/MODULE.bazel\": \"2fef03775b9ba995ec543868840041cc69e8bc705eb0cb6604a36eee18c87d8b\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.1.0/source.json\": \"8a4e832d75e073ab56c74dd77008cf7a81e107dec4544019eb1eefc1320d55be\",\n    \"https://bcr.bazel.build/modules/rules_foreign_cc/0.9.0/MODULE.bazel\": \"c9e8c682bf75b0e7c704166d79b599f93b72cfca5ad7477df596947891feeef6\",\n    \"https://bcr.bazel.build/modules/rules_java/4.0.0/MODULE.bazel\": \"5a78a7ae82cd1a33cef56dc578c7d2a46ed0dca12643ee45edbb8417899e6f74\",\n    \"https://bcr.bazel.build/modules/rules_java/7.6.5/MODULE.bazel\": \"481164be5e02e4cab6e77a36927683263be56b7e36fef918b458d7a8a1ebadb1\",\n    \"https://bcr.bazel.build/modules/rules_java/7.6.5/source.json\": \"a805b889531d1690e3c72a7a7e47a870d00323186a9904b36af83aa3d053ee8d\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\": \"a56b85e418c83eb1839819f0b515c431010160383306d13ec21959ac412d2fe7\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/source.json\": \"a075731e1b46bc8425098512d038d416e966ab19684a10a34f4741295642fc35\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.3/MODULE.bazel\": \"627e9ab0247f7d1e05736b59dbb1b6871373de5ad31c3011880b4133cafd4bd0\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.7/MODULE.bazel\": \"088fbeb0b6a419005b89cf93fe62d9517c0a2b8bb56af3244af65ecfe37e7d5d\",\n    \"https://bcr.bazel.build/modules/rules_license/1.0.0/MODULE.bazel\": \"a7fda60eefdf3d8c827262ba499957e4df06f659330bbe6cdbdb975b768bb65c\",\n    \"https://bcr.bazel.build/modules/rules_license/1.0.0/source.json\": \"a52c89e54cc311196e478f8382df91c15f7a2bfdf4c6cd0e2675cc2ff0b56efb\",\n    \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/MODULE.bazel\": \"df99f03fc7934a4737122518bb87e667e62d780b610910f0447665a7e2be62dc\",\n    \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/source.json\": \"c2557066e0c0342223ba592510ad3d812d4963b9024831f7f66fd0584dd8c66c\",\n    \"https://bcr.bazel.build/modules/rules_proto/4.0.0/MODULE.bazel\": \"a7a7b6ce9bee418c1a760b3d84f83a299ad6952f9903c67f19e4edd964894e06\",\n    \"https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/MODULE.bazel\": \"e8dff86b0971688790ae75528fe1813f71809b5afd57facb44dad9e8eca631b7\",\n    \"https://bcr.bazel.build/modules/rules_proto/6.0.0-rc1/MODULE.bazel\": \"1e5b502e2e1a9e825eef74476a5a1ee524a92297085015a052510b09a1a09483\",\n    \"https://bcr.bazel.build/modules/rules_proto/6.0.0-rc1/source.json\": \"8d8448e71706df7450ced227ca6b3812407ff5e2ccad74a43a9fbe79c84e34e0\",\n    \"https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel\": \"cc82bc96f2997baa545ab3ce73f196d040ffb8756fd2d66125a530031cd90e5f\",\n    \"https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel\": \"26114f0c0b5e93018c0c066d6673f1a2c3737c7e90af95eff30cfee38d0bbac7\",\n    \"https://bcr.bazel.build/modules/rules_python/0.25.0/MODULE.bazel\": \"72f1506841c920a1afec76975b35312410eea3aa7b63267436bfb1dd91d2d382\",\n    \"https://bcr.bazel.build/modules/rules_python/0.31.0/MODULE.bazel\": \"93a43dc47ee570e6ec9f5779b2e64c1476a6ce921c48cc9a1678a91dd5f8fd58\",\n    \"https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel\": \"3e036c4ad8d804a4dad897d333d8dce200d943df4827cb849840055be8d2e937\",\n    \"https://bcr.bazel.build/modules/rules_python/0.33.2/source.json\": \"e539592cd3aae4492032cecea510e46ca16eeb972271560b922cae9893944e2f\",\n    \"https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel\": \"9208ee05fd48bf09ac60ed269791cf17fb343db56c8226a720fbb1cdf467166c\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.1/MODULE.bazel\": \"1a05d92974d0c122f5ccf09291442580317cdd859f07a8655f1db9a60374f9f8\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.1/source.json\": \"a96f95e02123320aa015b956f29c00cb818fa891ef823d55148e1a362caacf29\",\n    \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/MODULE.bazel\": \"7298990c00040a0e2f121f6c32544bab27d4452f80d9ce51349b1a28f3005c43\",\n    \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/source.json\": \"f1ef7d3f9e0e26d4b23d1c39b5f5de71f584dd7d1b4ef83d9bbba6ec7a6a6459\",\n    \"https://bcr.bazel.build/modules/zlib/1.2.11/MODULE.bazel\": \"07b389abc85fdbca459b69e2ec656ae5622873af3f845e1c9d80fe179f3effa0\",\n    \"https://bcr.bazel.build/modules/zlib/1.2.12/MODULE.bazel\": \"3b1a8834ada2a883674be8cbd36ede1b6ec481477ada359cd2d3ddc562340b27\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/MODULE.bazel\": \"af322bc08976524477c79d1e45e241b6efbeb918c497e8840b8ab116802dda79\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/source.json\": \"2be409ac3c7601245958cd4fcdff4288be79ed23bd690b4b951f500d54ee6e7d\"\n  },\n  \"selectedYankedVersions\": {},\n  \"moduleExtensions\": {\n    \"@@apple_support~//crosstool:setup.bzl%apple_cc_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"ltCGFbl/LQQZXn/LEMXfKX7pGwyqNiOCHcmiQW0tmjM=\",\n        \"usagesDigest\": \"2Jj0sTGzjx2KfYRjWYbL6DZ1bi8HL2roIAGfOViiul8=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_apple_cc_toolchains\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf_toolchains\",\n            \"attributes\": {}\n          },\n          \"local_config_apple_cc\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"apple_support~\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    },\n    \"@@platforms//host:extension.bzl%host_platform\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"xelQcPZH8+tmuOHVjL9vDxMnnQNMlwj0SlvgoqBkm4U=\",\n        \"usagesDigest\": \"hgylFkgWSg0ulUwWZzEM1aIftlUnbmw2ynWLdEfHnZc=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"host_platform\": {\n            \"bzlFile\": \"@@platforms//host:extension.bzl\",\n            \"ruleClassName\": \"host_platform_repo\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": []\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "PORTING.md",
          "type": "blob",
          "size": 16.28515625,
          "content": "# Porting from OpenSSL to BoringSSL\n\nBoringSSL is an OpenSSL derivative and is mostly source-compatible, for the\nsubset of OpenSSL retained. Libraries ideally need little to no changes for\nBoringSSL support, provided they do not use removed APIs. In general, see if the\nlibrary compiles and, on failure, consult the documentation in the header files\nand see if problematic features can be removed.\n\nBoringSSL's `OPENSSL_VERSION_NUMBER` matches the OpenSSL version it targets.\nVersion checks for OpenSSL should ideally work as-is in BoringSSL. BoringSSL\nalso defines upstream's `OPENSSL_NO_*` feature macros corresponding to removed\nfeatures. If the preprocessor is needed, use these version checks or feature\nmacros where possible, especially when patching third-party projects. Such\npatches are more generally useful to OpenSSL consumers and thus more\nappropriate to send upstream.\n\nIn some cases, BoringSSL-specific code may be necessary. Use the\n`OPENSSL_IS_BORINGSSL` preprocessor macro in `#ifdef`s. However, first contact\nthe BoringSSL maintainers about the missing APIs. We will typically add\ncompatibility functions for convenience. In particular, *contact BoringSSL\nmaintainers before working around missing OpenSSL 1.1.0 accessors*. BoringSSL\nwas originally derived from OpenSSL 1.0.2 but now targets OpenSSL 1.1.0. Some\nnewer APIs may be missing but can be added on request. (Not all projects have\nbeen ported to OpenSSL 1.1.0, so BoringSSL also remains largely compatible with\nOpenSSL 1.0.2.)\n\nThe `OPENSSL_IS_BORINGSSL` macro may also be used to distinguish OpenSSL from\nBoringSSL in configure scripts. Do not use the presence or absence of particular\nsymbols to detect BoringSSL.\n\nNote: BoringSSL does *not* have a stable API or ABI. It must be updated with its\nconsumers. It is not suitable for, say, a system library in a traditional Linux\ndistribution. For instance, Chromium statically links the specific revision of\nBoringSSL it was built against. Likewise, Android's system-internal copy of\nBoringSSL is not exposed by the NDK and must not be used by third-party\napplications.\n\n\n## Major API changes\n\n### Integer types\n\nSome APIs have been converted to use `size_t` for consistency and to avoid\ninteger overflows at the API boundary. (Existing logic uses a mismash of `int`,\n`long`, and `unsigned`.)  For the most part, implicit casts mean that existing\ncode continues to compile. In some cases, this may require BoringSSL-specific\ncode, particularly to avoid compiler warnings.\n\nMost notably, the `STACK_OF(T)` types have all been converted to use `size_t`\ninstead of `int` for indices and lengths.\n\n### Reference counts and opaque types\n\nSome external consumers increment reference counts directly by calling\n`CRYPTO_add` with the corresponding `CRYPTO_LOCK_*` value. These APIs no longer\nexist in BoringSSL. Instead, code which increments reference counts should call\nthe corresponding `FOO_up_ref` function, such as `EVP_PKEY_up_ref`.\n\nBoringSSL also hides some structs which were previously exposed in OpenSSL\n1.0.2, particularly in libssl. Use the relevant accessors instead.\n\nNote that some of these APIs were added in OpenSSL 1.1.0, so projects which do\nnot yet support 1.1.0 may need additional `#ifdef`s. Projects supporting OpenSSL\n1.1.0 should not require modification.\n\n### Error codes\n\nOpenSSL's errors are extremely specific, leaking internals of the library,\nincluding even a function code for the function which emitted the error! As some\nlogic in BoringSSL has been rewritten, code which conditions on the error may\nbreak (grep for `ERR_GET_REASON` and `ERR_GET_FUNC`). This danger also exists\nwhen upgrading OpenSSL versions.\n\nWhere possible, avoid conditioning on the exact error reason. Otherwise, a\nBoringSSL `#ifdef` may be necessary. Exactly how best to resolve this issue is\nstill being determined. It's possible some new APIs will be added in the future.\n\nFunction codes have been completely removed. Remove code which conditions on\nthese as it will break with the slightest change in the library, OpenSSL or\nBoringSSL.\n\n### `*_ctrl` functions\n\nSome OpenSSL APIs are implemented with `ioctl`-style functions such as\n`SSL_ctrl` and `EVP_PKEY_CTX_ctrl`, combined with convenience macros, such as\n\n    # define SSL_CTX_set_mode(ctx,op) \\\n            SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)\n\nIn BoringSSL, these macros have been replaced with proper functions. The\nunderlying `_ctrl` functions have been removed.\n\nFor convenience, `SSL_CTRL_*` values are retained as macros to `doesnt_exist` so\nexisting code which uses them (or the wrapper macros) in `#ifdef` expressions\nwill continue to function. However, the macros themselves will not work.\n\nSwitch any `*_ctrl` callers to the macro/function versions. This works in both\nOpenSSL and BoringSSL. Note that BoringSSL's function versions will be\ntype-checked and may require more care with types. See the end of this\ndocument for a table of functions to use.\n\n### HMAC `EVP_PKEY`s\n\n`EVP_PKEY_HMAC` is removed. Use the `HMAC_*` functions in `hmac.h` instead. This\nis compatible with OpenSSL.\n\n### DSA `EVP_PKEY`s\n\n`EVP_PKEY_DSA` is deprecated. It is currently still possible to parse DER into a\nDSA `EVP_PKEY`, but signing or verifying with those objects will not work.\n\n### DES\n\nThe `DES_cblock` type has been switched from an array to a struct to avoid the\npitfalls around array types in C. Where features which require DES cannot be\ndisabled, BoringSSL-specific codepaths may be necessary.\n\n### TLS renegotiation\n\nOpenSSL enables TLS renegotiation by default and accepts renegotiation requests\nfrom the peer transparently. Renegotiation is an extremely problematic protocol\nfeature, so BoringSSL rejects peer renegotiations by default.\n\nTo enable renegotiation, call `SSL_set_renegotiate_mode` and set it to\n`ssl_renegotiate_once` or `ssl_renegotiate_freely`. Renegotiation is only\nsupported as a client in TLS and the HelloRequest must be received at a\nquiet point in the application protocol. This is sufficient to support the\ncommon use of requesting a new client certificate between an HTTP request and\nresponse in (unpipelined) HTTP/1.1.\n\nThings which do not work:\n\n* There is no support for renegotiation as a server. (Attempts by clients will\n  result in a fatal alert so that ClientHello messages cannot be used to flood\n  a server and escape higher-level limits.)\n\n* There is no support for renegotiation in DTLS.\n\n* There is no support for initiating renegotiation; `SSL_renegotiate` always\n  fails and `SSL_set_state` does nothing.\n\n* Interleaving application data with the new handshake is forbidden.\n\n* If a HelloRequest is received while `SSL_write` has unsent application data,\n  the renegotiation is rejected.\n\n* Renegotiation does not participate in session resumption. The client will\n  not offer a session on renegotiation or resume any session established by a\n  renegotiation handshake.\n\n* The server may not change its certificate in the renegotiation. This mitigates\n  the [triple handshake attack](https://mitls.org/pages/attacks/3SHAKE). Any new\n  stapled OCSP response and SCT list will be ignored. As no authentication state\n  may change, BoringSSL will not re-verify the certificate on a renegotiation.\n  Callbacks such as `SSL_CTX_set_custom_verify` will only run on the initial\n  handshake.\n\n### Lowercase hexadecimal\n\nBoringSSL's `BN_bn2hex` function uses lowercase hexadecimal digits instead of\nuppercase. Some code may require changes to avoid being sensitive to this\ndifference.\n\n### Legacy ASN.1 functions\n\nOpenSSL's ASN.1 stack uses `d2i` functions for parsing. They have the form:\n\n    RSA *d2i_RSAPrivateKey(RSA **out, const uint8_t **inp, long len);\n\nIn addition to returning the result, OpenSSL places it in `*out` if `out` is\nnot `NULL`. On input, if `*out` is not `NULL`, OpenSSL will usually (but not\nalways) reuse that object rather than allocating a new one. In BoringSSL, these\nfunctions will always allocate a new object and free the previous one.\n\nEnsure that callers do not rely on this object reuse behavior. It is\nrecommended to avoid the `out` parameter completely and always pass in `NULL`.\nIn most cases, even in OpenSSL, relying on object reuse is not safe because, on\nparse error, OpenSSL will free the reused object. Note that less error-prone\nAPIs are available for BoringSSL-specific code (see below).\n\n### Memory allocation\n\nOpenSSL provides wrappers `OPENSSL_malloc` and `OPENSSL_free` over the standard\n`malloc` and `free`. Memory allocated by OpenSSL should be released with\n`OPENSSL_free`, not the standard `free`. However, by default, they are\nimplemented directly using `malloc` and `free`, so code which mixes them up\nusually works.\n\nIn BoringSSL, these functions maintain additional book-keeping to zero memory\non `OPENSSL_free`, so any mixups must be fixed.\n\n## Optional BoringSSL-specific simplifications\n\nBoringSSL makes some changes to OpenSSL which simplify the API but remain\ncompatible with OpenSSL consumers. In general, consult the BoringSSL\ndocumentation for any functions in new BoringSSL-only code.\n\n### Return values\n\nMost OpenSSL APIs return 1 on success and either 0 or -1 on failure. BoringSSL\nhas narrowed most of these to 1 on success and 0 on failure. BoringSSL-specific\ncode may take advantage of the less error-prone APIs and use `!` to check for\nerrors.\n\n### Initialization\n\nOpenSSL has a number of different initialization functions for setting up error\nstrings and loading algorithms, etc. All of these functions still exist in\nBoringSSL for convenience, but they do nothing and are not necessary. BoringSSL\ninternally initializes itself as needed.\n\n### Threading\n\nOpenSSL provides a number of APIs to configure threading callbacks and set up\nlocks. Without initializing these, the library is not thread-safe. Configuring\nthese does nothing in BoringSSL. Instead, BoringSSL calls pthreads and the\ncorresponding Windows APIs internally and is always thread-safe where the API\nguarantees it.\n\n### ASN.1\n\nBoringSSL is in the process of deprecating OpenSSL's `d2i` and `i2d` in favor of\nnew functions using the much less error-prone `CBS` and `CBB` types.\nBoringSSL-only code should use those functions where available.\n\n\n## Replacements for `CTRL` values\n\nWhen porting code which uses `SSL_CTX_ctrl` or `SSL_ctrl`, use the replacement\nfunctions below. If a function has both `SSL_CTX` and `SSL` variants, only the\n`SSL_CTX` version is listed.\n\nNote some values correspond to multiple functions depending on the `larg`\nparameter.\n\n`CTRL` value | Replacement function(s)\n-------------|-------------------------\n`DTLS_CTRL_GET_TIMEOUT` | `DTLSv1_get_timeout`\n`DTLS_CTRL_HANDLE_TIMEOUT` | `DTLSv1_handle_timeout`\n`SSL_CTRL_CHAIN` | `SSL_CTX_set0_chain` or `SSL_CTX_set1_chain`\n`SSL_CTRL_CHAIN_CERT` | `SSL_add0_chain_cert` or `SSL_add1_chain_cert`\n`SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS` | `SSL_CTX_clear_extra_chain_certs`\n`SSL_CTRL_CLEAR_MODE` | `SSL_CTX_clear_mode`\n`SSL_CTRL_CLEAR_OPTIONS` | `SSL_CTX_clear_options`\n`SSL_CTRL_EXTRA_CHAIN_CERT` | `SSL_CTX_add_extra_chain_cert`\n`SSL_CTRL_GET_CHAIN_CERTS` | `SSL_CTX_get0_chain_certs`\n`SSL_CTRL_GET_CLIENT_CERT_TYPES` | `SSL_get0_certificate_types`\n`SSL_CTRL_GET_EXTRA_CHAIN_CERTS` | `SSL_CTX_get_extra_chain_certs` or `SSL_CTX_get_extra_chain_certs_only`\n`SSL_CTRL_GET_MAX_CERT_LIST` | `SSL_CTX_get_max_cert_list`\n`SSL_CTRL_GET_NUM_RENEGOTIATIONS` | `SSL_num_renegotiations`\n`SSL_CTRL_GET_READ_AHEAD` | `SSL_CTX_get_read_ahead`\n`SSL_CTRL_GET_RI_SUPPORT` | `SSL_get_secure_renegotiation_support`\n`SSL_CTRL_GET_SESSION_REUSED` | `SSL_session_reused`\n`SSL_CTRL_GET_SESS_CACHE_MODE` | `SSL_CTX_get_session_cache_mode`\n`SSL_CTRL_GET_SESS_CACHE_SIZE` | `SSL_CTX_sess_get_cache_size`\n`SSL_CTRL_GET_TLSEXT_TICKET_KEYS` | `SSL_CTX_get_tlsext_ticket_keys`\n`SSL_CTRL_GET_TOTAL_RENEGOTIATIONS` | `SSL_total_renegotiations`\n`SSL_CTRL_MODE` | `SSL_CTX_get_mode` or `SSL_CTX_set_mode`\n`SSL_CTRL_NEED_TMP_RSA` | `SSL_CTX_need_tmp_RSA` is equivalent, but [*do not use this function*](https://freakattack.com/). (It is a no-op in BoringSSL.)\n`SSL_CTRL_OPTIONS` | `SSL_CTX_get_options` or `SSL_CTX_set_options`\n`SSL_CTRL_SESS_NUMBER` | `SSL_CTX_sess_number`\n`SSL_CTRL_SET_CURVES` | `SSL_CTX_set1_curves`\n`SSL_CTRL_SET_ECDH_AUTO` | `SSL_CTX_set_ecdh_auto`\n`SSL_CTRL_SET_MAX_CERT_LIST` | `SSL_CTX_set_max_cert_list`\n`SSL_CTRL_SET_MAX_SEND_FRAGMENT` | `SSL_CTX_set_max_send_fragment`\n`SSL_CTRL_SET_MSG_CALLBACK` | `SSL_set_msg_callback`\n`SSL_CTRL_SET_MSG_CALLBACK_ARG` | `SSL_set_msg_callback_arg`\n`SSL_CTRL_SET_MTU` | `SSL_set_mtu`\n`SSL_CTRL_SET_READ_AHEAD` | `SSL_CTX_set_read_ahead`\n`SSL_CTRL_SET_SESS_CACHE_MODE` | `SSL_CTX_set_session_cache_mode`\n`SSL_CTRL_SET_SESS_CACHE_SIZE` | `SSL_CTX_sess_set_cache_size`\n`SSL_CTRL_SET_TLSEXT_HOSTNAME` | `SSL_set_tlsext_host_name`\n`SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG` | `SSL_CTX_set_tlsext_servername_arg`\n`SSL_CTRL_SET_TLSEXT_SERVERNAME_CB` | `SSL_CTX_set_tlsext_servername_callback`\n`SSL_CTRL_SET_TLSEXT_TICKET_KEYS` | `SSL_CTX_set_tlsext_ticket_keys`\n`SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB` | `SSL_CTX_set_tlsext_ticket_key_cb`\n`SSL_CTRL_SET_TMP_DH` | `SSL_CTX_set_tmp_dh`\n`SSL_CTRL_SET_TMP_DH_CB` | `SSL_CTX_set_tmp_dh_callback`\n`SSL_CTRL_SET_TMP_ECDH` | `SSL_CTX_set_tmp_ecdh`\n`SSL_CTRL_SET_TMP_ECDH_CB` | `SSL_CTX_set_tmp_ecdh_callback`\n`SSL_CTRL_SET_TMP_RSA` | `SSL_CTX_set_tmp_rsa` is equivalent, but [*do not use this function*](https://freakattack.com/). (It is a no-op in BoringSSL.)\n`SSL_CTRL_SET_TMP_RSA_CB` | `SSL_CTX_set_tmp_rsa_callback` is equivalent, but [*do not use this function*](https://freakattack.com/). (It is a no-op in BoringSSL.)\n\n## Significant API additions\n\nIn some places, BoringSSL has added significant APIs. Use of these APIs goes beyound “porting” and means giving up on OpenSSL compatibility.\n\nOne example of this has already been mentioned: the [CBS and CBB](https://commondatastorage.googleapis.com/chromium-boringssl-docs/bytestring.h.html) functions should be used whenever parsing or serialising data.\n\n### CRYPTO\\_BUFFER\n\nWith the standard OpenSSL APIs, when making many TLS connections, the certificate data for each connection is retained in memory in an expensive `X509` structure. Additionally, common certificates often appear in the chains for multiple connections and are needlessly duplicated in memory.\n\nA [`CRYPTO_BUFFER`](https://commondatastorage.googleapis.com/chromium-boringssl-docs/pool.h.html) is just an opaque byte string. A `CRYPTO_BUFFER_POOL` is an intern table for these buffers, i.e. it ensures that only a single copy of any given byte string is kept for each pool.\n\nThe function `TLS_with_buffers_method` returns an `SSL_METHOD` that avoids creating `X509` objects for certificates. Additionally, `SSL_CTX_set0_buffer_pool` can be used to install a pool on an `SSL_CTX` so that certificates can be deduplicated across connections and across `SSL_CTX`s.\n\nWhen using these functions, the application also needs to ensure that it doesn't call other functions that deal with `X509` or `X509_NAME` objects. For example, `SSL_get_peer_certificate` or `SSL_get_peer_cert_chain`. Doing so will trigger an assert in debug mode and will result in NULLs in release mode. Instead, call the buffer-based alternatives such as `SSL_get0_peer_certificates`. (See [ssl.h](https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html) for functions taking or returning `CRYPTO_BUFFER`.) The buffer-based alternative functions will work even when not using `TLS_with_buffers_method`, thus application code can transition gradually.\n\nIn order to use buffers, the application code also needs to implement its own certificate verification using `SSL_[CTX_]set_custom_verify`. Otherwise all connections will fail with a verification error. Auto-chaining is also disabled when using buffers.\n\nOnce those changes have been completed, the whole of the OpenSSL X.509 and ASN.1 code should be eliminated by the linker if BoringSSL is linked statically.\n\n### Asynchronous and opaque private keys\n\nOpenSSL offers the ENGINE API for implementing opaque private keys (i.e. private keys where software only has oracle access because the secrets are held in special hardware or on another machine). While the ENGINE API has been mostly removed from BoringSSL, it is still possible to support opaque keys in this way. However, when using such keys with TLS and BoringSSL, you should strongly prefer using `SSL_PRIVATE_KEY_METHOD` via `SSL[_CTX]_set_private_key_method`. This allows a handshake to be suspended while the private operation is in progress. It also supports more forms of opaque key as it exposes higher-level information about the operation to be performed.\n"
        },
        {
          "name": "PrivacyInfo.xcprivacy",
          "type": "blob",
          "size": 0.5537109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\n<!--\nThis file is for using BoringSSL in Apple ecosystems. You may have to point\nXcode at it yourself. See\nhttps://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n-->\n\n<dict>\n\t<key>NSPrivacyTracking</key>\n\t<false/>\n\t<key>NSPrivacyTrackingDomains</key>\n\t<array/>\n\t<key>NSPrivacyCollectedDataTypes</key>\n\t<array/>\n\t<key>NSPrivacyAccessedAPITypes</key>\n\t<array/>\n</dict>\n</plist>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.599609375,
          "content": "# BoringSSL\n\nBoringSSL is a fork of OpenSSL that is designed to meet Google's needs.\n\nAlthough BoringSSL is an open source project, it is not intended for general\nuse, as OpenSSL is. We don't recommend that third parties depend upon it. Doing\nso is likely to be frustrating because there are no guarantees of API or ABI\nstability.\n\nPrograms ship their own copies of BoringSSL when they use it and we update\neverything as needed when deciding to make API changes. This allows us to\nmostly avoid compromises in the name of compatibility. It works for us, but it\nmay not work for you.\n\nBoringSSL arose because Google used OpenSSL for many years in various ways and,\nover time, built up a large number of patches that were maintained while\ntracking upstream OpenSSL. As Google's product portfolio became more complex,\nmore copies of OpenSSL sprung up and the effort involved in maintaining all\nthese patches in multiple places was growing steadily.\n\nCurrently BoringSSL is the SSL library in Chrome/Chromium, Android (but it's\nnot part of the NDK) and a number of other apps/programs.\n\nProject links:\n\n  * [API documentation](https://commondatastorage.googleapis.com/chromium-boringssl-docs/headers.html)\n  * [Issue tracker](https://crbug.com/boringssl)\n    * [Filing new (public) issues](https://crbug.com/boringssl/new)\n  * [CI](https://ci.chromium.org/p/boringssl/g/main/console)\n  * [Code review](https://boringssl-review.googlesource.com)\n\nTo file a security issue, use the [Chromium process](https://www.chromium.org/Home/chromium-security/reporting-security-bugs/) and mention in the report this is for BoringSSL. You can ignore the parts of the process that are specific to Chromium/Chrome.\n\nThere are other files in this directory which might be helpful:\n\n  * [PORTING.md](./PORTING.md): how to port OpenSSL-using code to BoringSSL.\n  * [BUILDING.md](./BUILDING.md): how to build BoringSSL\n  * [INCORPORATING.md](./INCORPORATING.md): how to incorporate BoringSSL into a project.\n  * [API-CONVENTIONS.md](./API-CONVENTIONS.md): general API conventions for BoringSSL consumers and developers.\n  * [STYLE.md](./STYLE.md): rules and guidelines for coding style.\n  * include/openssl: public headers with API documentation in comments. Also [available online](https://commondatastorage.googleapis.com/chromium-boringssl-docs/headers.html).\n  * [FUZZING.md](./FUZZING.md): information about fuzzing BoringSSL.\n  * [CONTRIBUTING.md](./CONTRIBUTING.md): how to contribute to BoringSSL.\n  * [BREAKING-CHANGES.md](./BREAKING-CHANGES.md): notes on potentially-breaking changes.\n  * [SANDBOXING.md](./SANDBOXING.md): notes on using BoringSSL in a sandboxed environment.\n"
        },
        {
          "name": "SANDBOXING.md",
          "type": "blob",
          "size": 6.576171875,
          "content": "# Using BoringSSL in a Sandbox\n\nSandboxes are a valuable tool for securing applications, so BoringSSL aims to\nsupport them. However, it is difficult to make concrete API guarantees with\nsandboxes. Sandboxes remove low-level OS resources and system calls, which\nbreaks platform abstractions. A syscall-filtering sandbox may, for instance, be\nsensitive to otherwise non-breaking changes to use newer syscalls\nin either BoringSSL or the C library.\n\nSome functions in BoringSSL, such as `BIO_new_file`, inherently need OS\nresources like the filesystem. We assume that sandboxed consumers either avoid\nthose functions or make necessary resources available. Other functions like\n`RSA_sign` are purely computational, but still have some baseline OS\ndependencies.\n\nSandboxes which drop privileges partway through a process's lifetime are\nadditionally sensitive to OS resources retained across the transitions. For\ninstance, if a library function internally opened and retained a handle to the\nuser's home directory, and then the application called `chroot`, that handle\nwould be a sandbox escape.\n\nThis document attempts to describe these baseline OS dependencies and long-lived\ninternal resources. These dependencies may change over time, but we aim to\n[work with sandboxed consumers](./BREAKING-CHANGES.md) when they do. However,\neach sandbox imposes different constraints, so, above all, sandboxed consumers\nmust have ample test coverage to detect issues as they arise.\n\n## Baseline dependencies\n\nCallers must assume that any BoringSSL function may perform one of the following\noperations:\n\n### Memory allocation\n\nAny BoringSSL function may allocate memory via `malloc` and related functions.\n\n### Thread synchronization\n\nAny BoringSSL function may call into the platform's thread synchronization\nprimitives, including read/write locks and the equivalent of `pthread_once`.\nThese must succeed, or BoringSSL will abort the process. Callers, however, can\nassume that BoringSSL functions will not spawn internal threads, unless\notherwise documented.\n\nSyscall-filtering sandboxes should note that BoringSSL uses `pthread_rwlock_t`\non POSIX systems, which is less common and may not be part of other libraries'\nsyscall surface. Additionally, thread synchronization primitives usually have an\natomics-based fast path. If a sandbox blocks a necessary pthreads syscall, it\nmay not show up in testing without lock contention.\n\n### Standard error\n\nAny BoringSSL function may write to `stderr` or file descriptor\n`STDERR_FILENO` (2), either via `FILE` APIs or low-level functions like `write`.\nWrites to `stderr` may fail, but there must some file at `STDERR_FILENO` which\nwill tolerate error messages from BoringSSL. (The file descriptor must be\nallocated so calls to `open` do not accidentally open something else there.)\n\nNote some C standard library implementations also log to `stderr`, so callers\nshould ensure this regardless.\n\n### Entropy\n\nAny BoringSSL function may draw entropy from the OS. On Windows, this uses\n`RtlGenRandom` and, on POSIX systems, this uses `getrandom`, `getentropy`, or a\n`read` from a file descriptor to `/dev/urandom`. These operations must succeed\nor BoringSSL will abort the process. BoringSSL only probes for `getrandom`\nsupport once and assumes support is consistent for the lifetime of the address\nspace (and any copies made via `fork`). If a syscall-filtering sandbox is\nenabled partway through this lifetime and changes whether `getrandom` works,\nBoringSSL may abort the process. Sandboxes are recommended to allow\n`getrandom`.\n\nNote even deterministic algorithms may require OS entropy. For example,\nRSASSA-PKCS1-v1_5 is deterministic, but BoringSSL draws entropy to implement\nRSA blinding.\n\nEntropy gathering additionally has some initialization dependencies described in\nthe following section.\n\n## Initialization\n\nBoringSSL has some uncommon OS dependencies which are only used once to\ninitialize some state. Sandboxes which drop privileges after some setup work may\nuse `CRYPTO_pre_sandbox_init` to initialize this state ahead of time. Otherwise,\ncallers must assume any BoringSSL function may depend on these resources, in\naddition to the operations above.\n\n### CPU capabilities\n\nOn Linux ARM platforms, BoringSSL depends on OS APIs to query CPU capabilities.\n32-bit and 64-bit ARM both depend on the `getauxval` function. 32-bit ARM, to\nwork around bugs in older Android devices, may additionally read\n`/proc/cpuinfo`.\n\nOn 64-bit Apple ARM platforms, BoringSSL needs to query `hw.optional.*` sysctls.\n\nIf querying CPU capabilities fails, BoringSSL will still function, but may not\nperform as well.\n\n### Entropy\n\nOn Linux systems without a working `getrandom`, drawing entropy from the OS\nadditionally requires opening `/dev/urandom`. If this fails, BoringSSL will\nabort the process. BoringSSL retains the resulting file descriptor, even across\nprivilege transitions.\n\n### Fork protection\n\nOn Linux, BoringSSL allocates a page and calls `madvise` with `MADV_WIPEONFORK`\nto protect single-use state from `fork`. This operation must not crash, but if\nit fails, BoringSSL will use alternate fork-safety strategies, potentially at a\nperformance cost. If it succeeds, BoringSSL assumes `MADV_WIPEONFORK` is\nfunctional and relies on it for fork-safety. Sandboxes must not report success\nif they ignore the `MADV_WIPEONFORK` flag. As of writing, QEMU will ignore\n`madvise` calls and report success, so BoringSSL detects this by calling\n`madvise` with -1. Sandboxes must cleanly report an error instead of crashing.\n\nOnce initialized, this mechanism does not require system calls in the steady\nstate, though note the configured page will be inherited across privilege\ntransitions.\n\n## C and C++ standard library\n\nBoringSSL depends on the C and C++ standard libraries which, themselves, do not\nmake any guarantees about sandboxes. If it produces the correct answer and has\nno observable invalid side effects, it is possible, though unreasonable, for\n`memcmp` to create and close a socket.\n\nBoringSSL assumes that functions in the C and C++ library only have the platform\ndependencies which would be \"reasonable\". For instance, a function in BoringSSL\nwhich aims not to open files will still freely call any libc memory and\nstring functions.\n\nNote some C functions, such as `strerror`, may read files relating to the user's\nlocale. BoringSSL may trigger these paths and assumes the sandbox environment\nwill tolerate this. BoringSSL additionally cannot make guarantees about which\nsystem calls are used by standard library's syscall wrappers. In some cases, the\ncompiler may add dependencies. (Some C++ language features emit locking code.)\nSyscall-filtering sandboxes may need updates as these dependencies change.\n"
        },
        {
          "name": "STYLE.md",
          "type": "blob",
          "size": 8.40625,
          "content": "# BoringSSL Style Guide\n\nBoringSSL usually follows the\n[Google C++ style guide](https://google.github.io/styleguide/cppguide.html),\nThe rest of this document describes differences and clarifications on\ntop of the base guide.\n\n\n## Legacy code\n\nAs a derivative of OpenSSL, BoringSSL contains a lot of legacy code that\ndoes not follow this style guide. Particularly where public API is\nconcerned, balance consistency within a module with the benefits of a\ngiven rule. Module-wide deviations on naming should be respected while\ninteger and return value conventions take precedence over consistency.\n\nModules from OpenSSL's legacy ASN.1 and X.509 stack are retained for\ncompatibility and left largely unmodified. To ease importing patches from\nupstream, they match OpenSSL's new indentation style. For Emacs,\n`doc/openssl-c-indent.el` from OpenSSL may be helpful in this.\n\n\n## Language\n\nThe majority of the project is in C, so C++-specific rules in the\nGoogle style guide do not apply. Support for C99 features depends on\nour target platforms. Typically, Chromium's target MSVC is the most\nrestrictive.\n\nVariable declarations in the middle of a function or inside a `for` loop are\nallowed and preferred where possible. Note that the common `goto err` cleanup\npattern requires lifting some variable declarations.\n\nComments should be `// C99-style` for consistency with C++.\n\nWhen declaring pointer types, `*` should be placed next to the variable name,\nnot the type. So\n\n    uint8_t *ptr;\n\nnot\n\n    uint8_t* ptr;\n\nRather than `malloc()` and `free()`, use the wrappers `OPENSSL_malloc()`\nand `OPENSSL_free()`. Use the standard C `assert()` function freely.\n\nUse the following wrappers, found in `crypto/internal.h` instead of the\ncorresponding C standard library functions. They behave the same but avoid\nconfusing undefined behavior.\n\n* `OPENSSL_memchr`\n* `OPENSSL_memcmp`\n* `OPENSSL_memcpy`\n* `OPENSSL_memmove`\n* `OPENSSL_memset`\n\nFor new constants, prefer enums when the values are sequential and typed\nconstants for flags. If adding values to an existing set of `#define`s,\ncontinue with `#define`.\n\n\n## libssl\n\nlibssl was originally written in C but is being incrementally rewritten in\nC++11. As of writing, much of the style matches our C conventions rather than\nGoogle C++. Additionally, libssl on Linux currently may not depend on the C++\nruntime. See the C++ utilities in `ssl/internal.h` for replacements for\nproblematic C++ constructs. The `util/check_imported_libraries.go` script may be\nused with a shared library build to check if a new construct is okay.\n\nIf unsure, match surrounding code. Discrepancies between it and Google C++ style\nwill be fixed over time.\n\n\n## Formatting\n\nSingle-statement blocks are not allowed. All conditions and loops must\nuse braces:\n\n    if (foo) {\n      do_something();\n    }\n\nnot\n\n    if (foo)\n      do_something();\n\n\n## Integers\n\nPrefer using explicitly-sized integers where appropriate rather than\ngeneric C ones. For instance, to represent a byte, use `uint8_t`, not\n`unsigned char`. Likewise, represent a two-byte field as `uint16_t`, not\n`unsigned short`.\n\nSizes are represented as `size_t`.\n\nWithin a struct that is retained across the lifetime of an SSL\nconnection, if bounds of a size are known and it's easy, use a smaller\ninteger type like `uint8_t`. This is a \"free\" connection footprint\noptimization for servers. Don't make code significantly more complex for\nit, and do still check the bounds when passing in and out of the\nstruct. This narrowing should not propagate to local variables and\nfunction parameters.\n\nWhen doing arithmetic, account for overflow conditions.\n\nExcept with platform APIs, do not use `ssize_t`. MSVC lacks it, and\nprefer out-of-band error signaling for `size_t` (see Return values).\n\n\n## Naming\n\nFollow Google naming conventions in C++ files. In C files, use the\nfollowing naming conventions for consistency with existing OpenSSL and C\nstyles:\n\nDefine structs with typedef named `TYPE_NAME`. The corresponding struct\nshould be named `struct type_name_st`.\n\nName public functions as `MODULE_function_name`, unless the module\nalready uses a different naming scheme for legacy reasons. The module\nname should be a type name if the function is a method of a particular\ntype.\n\nSome types are allocated within the library while others are initialized\ninto a struct allocated by the caller, often on the stack. Name these\nfunctions `TYPE_NAME_new`/`TYPE_NAME_free` and\n`TYPE_NAME_init`/`TYPE_NAME_cleanup`, respectively. All `TYPE_NAME_free`\nfunctions must do nothing on `NULL` input.\n\nIf a variable is the length of a pointer value, it has the suffix\n`_len`. An output parameter is named `out` or has an `out_` prefix. For\ninstance, For instance:\n\n    uint8_t *out,\n    size_t *out_len,\n    const uint8_t *in,\n    size_t in_len,\n\nName public headers like `include/openssl/evp.h` with header guards like\n`OPENSSL_HEADER_EVP_H`. Name internal headers like\n`crypto/ec/internal.h` with header guards like\n`OPENSSL_HEADER_EC_INTERNAL_H`.\n\nName enums like `enum unix_hacker_t`. For instance:\n\n    enum should_free_handshake_buffer_t {\n      free_handshake_buffer,\n      dont_free_handshake_buffer,\n    };\n\n\n## Return values\n\nAs even `malloc` may fail in BoringSSL, the vast majority of functions\nwill have a failure case. Functions should return `int` with one on\nsuccess and zero on error. Do not overload the return value to both\nsignal success/failure and output an integer. For example:\n\n    OPENSSL_EXPORT int CBS_get_u16(CBS *cbs, uint16_t *out);\n\nIf a function needs more than a true/false result code, define an enum\nrather than arbitrarily assigning meaning to int values.\n\nIf a function outputs a pointer to an object on success and there are no\nother outputs, return the pointer directly and `NULL` on error.\n\n\n## Parameters\n\nWhere not constrained by legacy code, parameter order should be:\n\n1. context parameters\n2. output parameters\n3. input parameters\n\nFor example,\n\n    /* CBB_add_asn sets |*out_contents| to a |CBB| into which the contents of an\n     * ASN.1 object can be written. The |tag| argument will be used as the tag for\n     * the object. It returns one on success or zero on error. */\n    OPENSSL_EXPORT int CBB_add_asn1(CBB *cbb, CBB *out_contents, unsigned tag);\n\n\n## Documentation\n\nAll public symbols must have a documentation comment in their header\nfile. The style is based on that of Go. The first sentence begins with\nthe symbol name, optionally prefixed with \"A\" or \"An\". Apart from the\ninitial mention of symbol, references to other symbols or parameter\nnames should be surrounded by |pipes|.\n\nDocumentation should be concise but completely describe the exposed\nbehavior of the function. Pay special note to success/failure behaviors\nand caller obligations on object lifetimes. If this sacrifices\nconciseness, consider simplifying the function's behavior.\n\n    // EVP_DigestVerifyUpdate appends |len| bytes from |data| to the data which\n    // will be verified by |EVP_DigestVerifyFinal|. It returns one on success and\n    // zero otherwise.\n    OPENSSL_EXPORT int EVP_DigestVerifyUpdate(EVP_MD_CTX *ctx, const void *data,\n                                              size_t len);\n\nExplicitly mention any surprising edge cases or deviations from common\nreturn value patterns in legacy functions.\n\n    // RSA_private_encrypt encrypts |flen| bytes from |from| with the private key in\n    // |rsa| and writes the encrypted data to |to|. The |to| buffer must have at\n    // least |RSA_size| bytes of space. It returns the number of bytes written, or\n    // -1 on error. The |padding| argument must be one of the |RSA_*_PADDING|\n    // values. If in doubt, |RSA_PKCS1_PADDING| is the most common.\n    //\n    // WARNING: this function is dangerous because it breaks the usual return value\n    // convention. Use |RSA_sign_raw| instead.\n    OPENSSL_EXPORT int RSA_private_encrypt(int flen, const uint8_t *from,\n                                           uint8_t *to, RSA *rsa, int padding);\n\nDocument private functions in their `internal.h` header or, if static,\nwhere defined.\n\n\n## Build logic\n\nBoringSSL is used by many projects with many different build tools.\nReimplementing and maintaining build logic in each downstream build is\ncumbersome, so build logic should be avoided where possible. Platform-specific\nfiles should be excluded by wrapping the contents in `#ifdef`s, rather than\ncomputing platform-specific file lists. Generated source files such as perlasm\nand `err_data.c` may be used in the standalone CMake build but, for downstream\nbuilds, they should be pre-generated in `generate_build_files.py`.\n"
        },
        {
          "name": "build.json",
          "type": "blob",
          "size": 42.3759765625,
          "content": "// This file defines BoringSSL's build, expressed in terms of the input source\n// files that BoringSSL developers edit. It is a JSON file with line comments,\n// with line comments removed before parsing. It drives ./util/pregenerate which\n// converts some of those inputs (e.g. perlasm files) into pre-generated\n// outputs. This produces a more simplified build, which is then converted into\n// build files of various syntaxes.\n//\n// When modifying this file, run `go run ./util/pregenerate`. See gen/README.md\n// for more details, and util/pregenerate/build.go for the schema.\n//\n// TODO(crbug.com/boringssl/542): Moving build inputs to this file is still work\n// in progress, so this file is currently incomplete.\n{\n    \"bcm\": {\n        \"srcs\": [\n            \"crypto/fipsmodule/bcm.cc\"\n        ],\n        \"internal_hdrs\": [\n            \"crypto/fipsmodule/aes/aes.cc.inc\",\n            \"crypto/fipsmodule/aes/aes_nohw.cc.inc\",\n            \"crypto/fipsmodule/aes/key_wrap.cc.inc\",\n            \"crypto/fipsmodule/aes/mode_wrappers.cc.inc\",\n            \"crypto/fipsmodule/bn/add.cc.inc\",\n            \"crypto/fipsmodule/bn/asm/x86_64-gcc.cc.inc\",\n            \"crypto/fipsmodule/bn/bn.cc.inc\",\n            \"crypto/fipsmodule/bn/bytes.cc.inc\",\n            \"crypto/fipsmodule/bn/cmp.cc.inc\",\n            \"crypto/fipsmodule/bn/ctx.cc.inc\",\n            \"crypto/fipsmodule/bn/div.cc.inc\",\n            \"crypto/fipsmodule/bn/div_extra.cc.inc\",\n            \"crypto/fipsmodule/bn/exponentiation.cc.inc\",\n            \"crypto/fipsmodule/bn/gcd.cc.inc\",\n            \"crypto/fipsmodule/bn/gcd_extra.cc.inc\",\n            \"crypto/fipsmodule/bn/generic.cc.inc\",\n            \"crypto/fipsmodule/bn/jacobi.cc.inc\",\n            \"crypto/fipsmodule/bn/montgomery.cc.inc\",\n            \"crypto/fipsmodule/bn/montgomery_inv.cc.inc\",\n            \"crypto/fipsmodule/bn/mul.cc.inc\",\n            \"crypto/fipsmodule/bn/prime.cc.inc\",\n            \"crypto/fipsmodule/bn/random.cc.inc\",\n            \"crypto/fipsmodule/bn/rsaz_exp.cc.inc\",\n            \"crypto/fipsmodule/bn/shift.cc.inc\",\n            \"crypto/fipsmodule/bn/sqrt.cc.inc\",\n            \"crypto/fipsmodule/cipher/aead.cc.inc\",\n            \"crypto/fipsmodule/cipher/cipher.cc.inc\",\n            \"crypto/fipsmodule/cipher/e_aes.cc.inc\",\n            \"crypto/fipsmodule/cipher/e_aesccm.cc.inc\",\n            \"crypto/fipsmodule/cmac/cmac.cc.inc\",\n            \"crypto/fipsmodule/dh/check.cc.inc\",\n            \"crypto/fipsmodule/dh/dh.cc.inc\",\n            \"crypto/fipsmodule/digest/digest.cc.inc\",\n            \"crypto/fipsmodule/digest/digests.cc.inc\",\n            \"crypto/fipsmodule/digestsign/digestsign.cc.inc\",\n            \"crypto/fipsmodule/ec/ec.cc.inc\",\n            \"crypto/fipsmodule/ec/ec_key.cc.inc\",\n            \"crypto/fipsmodule/ec/ec_montgomery.cc.inc\",\n            \"crypto/fipsmodule/ec/felem.cc.inc\",\n            \"crypto/fipsmodule/ec/oct.cc.inc\",\n            \"crypto/fipsmodule/ec/p224-64.cc.inc\",\n            \"crypto/fipsmodule/ec/p256-nistz.cc.inc\",\n            \"crypto/fipsmodule/ec/p256.cc.inc\",\n            \"crypto/fipsmodule/ec/scalar.cc.inc\",\n            \"crypto/fipsmodule/ec/simple.cc.inc\",\n            \"crypto/fipsmodule/ec/simple_mul.cc.inc\",\n            \"crypto/fipsmodule/ec/util.cc.inc\",\n            \"crypto/fipsmodule/ec/wnaf.cc.inc\",\n            \"crypto/fipsmodule/ecdh/ecdh.cc.inc\",\n            \"crypto/fipsmodule/ecdsa/ecdsa.cc.inc\",\n            \"crypto/fipsmodule/hkdf/hkdf.cc.inc\",\n            \"crypto/fipsmodule/hmac/hmac.cc.inc\",\n            \"crypto/fipsmodule/keccak/keccak.cc.inc\",\n            \"crypto/fipsmodule/mldsa/mldsa.cc.inc\",\n            \"crypto/fipsmodule/mlkem/mlkem.cc.inc\",\n            \"crypto/fipsmodule/modes/cbc.cc.inc\",\n            \"crypto/fipsmodule/modes/cfb.cc.inc\",\n            \"crypto/fipsmodule/modes/ctr.cc.inc\",\n            \"crypto/fipsmodule/modes/gcm.cc.inc\",\n            \"crypto/fipsmodule/modes/gcm_nohw.cc.inc\",\n            \"crypto/fipsmodule/modes/ofb.cc.inc\",\n            \"crypto/fipsmodule/modes/polyval.cc.inc\",\n            \"crypto/fipsmodule/rand/ctrdrbg.cc.inc\",\n            \"crypto/fipsmodule/rand/rand.cc.inc\",\n            \"crypto/fipsmodule/rsa/blinding.cc.inc\",\n            \"crypto/fipsmodule/rsa/padding.cc.inc\",\n            \"crypto/fipsmodule/rsa/rsa.cc.inc\",\n            \"crypto/fipsmodule/rsa/rsa_impl.cc.inc\",\n            \"crypto/fipsmodule/self_check/fips.cc.inc\",\n            \"crypto/fipsmodule/self_check/self_check.cc.inc\",\n            \"crypto/fipsmodule/service_indicator/service_indicator.cc.inc\",\n            \"crypto/fipsmodule/sha/sha1.cc.inc\",\n            \"crypto/fipsmodule/sha/sha256.cc.inc\",\n            \"crypto/fipsmodule/sha/sha512.cc.inc\",\n            \"crypto/fipsmodule/slhdsa/fors.cc.inc\",\n            \"crypto/fipsmodule/slhdsa/merkle.cc.inc\",\n            \"crypto/fipsmodule/slhdsa/slhdsa.cc.inc\",\n            \"crypto/fipsmodule/slhdsa/thash.cc.inc\",\n            \"crypto/fipsmodule/slhdsa/wots.cc.inc\",\n            \"crypto/fipsmodule/tls/kdf.cc.inc\"\n        ],\n        \"asm\": [\n            \"third_party/fiat/asm/fiat_p256_adx_mul.S\",\n            \"third_party/fiat/asm/fiat_p256_adx_sqr.S\"\n        ],\n        \"perlasm_aarch64\": [\n            {\"src\": \"crypto/fipsmodule/aes/asm/aesv8-armx.pl\", \"dst\": \"aesv8-armv8\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/aesv8-gcm-armv8.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/armv8-mont.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/bn-armv8.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-neon-armv8.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghashv8-armx.pl\", \"dst\": \"ghashv8-armv8\"},\n            {\"src\": \"crypto/fipsmodule/ec/asm/p256_beeu-armv8-asm.pl\"},\n            {\"src\": \"crypto/fipsmodule/ec/asm/p256-armv8-asm.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha1-armv8.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-armv8.pl\", \"args\": [\"sha256\"], \"dst\": \"sha256-armv8\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-armv8.pl\", \"args\": [\"sha512\"]},\n            {\"src\": \"crypto/fipsmodule/aes/asm/vpaes-armv8.pl\"}\n        ],\n        \"perlasm_arm\": [\n            {\"src\": \"crypto/fipsmodule/aes/asm/aesv8-armx.pl\", \"dst\": \"aesv8-armv7\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/armv4-mont.pl\"},\n            {\"src\": \"crypto/fipsmodule/aes/asm/bsaes-armv7.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-armv4.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghashv8-armx.pl\", \"dst\": \"ghashv8-armv7\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha1-armv4-large.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha256-armv4.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-armv4.pl\"},\n            {\"src\": \"crypto/fipsmodule/aes/asm/vpaes-armv7.pl\"}\n        ],\n        \"perlasm_x86\": [\n            {\"src\": \"crypto/fipsmodule/aes/asm/aesni-x86.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/bn-586.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/co-586.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-ssse3-x86.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-x86.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha1-586.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha256-586.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-586.pl\"},\n            {\"src\": \"crypto/fipsmodule/aes/asm/vpaes-x86.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/x86-mont.pl\"}\n        ],\n        \"perlasm_x86_64\": [\n            {\"src\": \"crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/aes-gcm-avx10-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/aes-gcm-avx2-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/aes/asm/aesni-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-ssse3-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/modes/asm/ghash-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/ec/asm/p256_beeu-x86_64-asm.pl\"},\n            {\"src\": \"crypto/fipsmodule/ec/asm/p256-x86_64-asm.pl\"},\n            {\"src\": \"crypto/fipsmodule/rand/asm/rdrand-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/rsaz-avx2.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha1-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-x86_64.pl\", \"args\": [\"sha256\"], \"dst\": \"sha256-x86_64\"},\n            {\"src\": \"crypto/fipsmodule/sha/asm/sha512-x86_64.pl\", \"args\": [\"sha512\"]},\n            {\"src\": \"crypto/fipsmodule/aes/asm/vpaes-x86_64.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/x86_64-mont.pl\"},\n            {\"src\": \"crypto/fipsmodule/bn/asm/x86_64-mont5.pl\"}\n        ]\n    },\n    \"crypto\": {\n        \"srcs\": [\n            \"crypto/asn1/a_bitstr.cc\",\n            \"crypto/asn1/a_bool.cc\",\n            \"crypto/asn1/a_d2i_fp.cc\",\n            \"crypto/asn1/a_dup.cc\",\n            \"crypto/asn1/a_gentm.cc\",\n            \"crypto/asn1/a_i2d_fp.cc\",\n            \"crypto/asn1/a_int.cc\",\n            \"crypto/asn1/a_mbstr.cc\",\n            \"crypto/asn1/a_object.cc\",\n            \"crypto/asn1/a_octet.cc\",\n            \"crypto/asn1/a_strex.cc\",\n            \"crypto/asn1/a_strnid.cc\",\n            \"crypto/asn1/a_time.cc\",\n            \"crypto/asn1/a_type.cc\",\n            \"crypto/asn1/a_utctm.cc\",\n            \"crypto/asn1/asn1_lib.cc\",\n            \"crypto/asn1/asn1_par.cc\",\n            \"crypto/asn1/asn_pack.cc\",\n            \"crypto/asn1/f_int.cc\",\n            \"crypto/asn1/f_string.cc\",\n            \"crypto/asn1/posix_time.cc\",\n            \"crypto/asn1/tasn_dec.cc\",\n            \"crypto/asn1/tasn_enc.cc\",\n            \"crypto/asn1/tasn_fre.cc\",\n            \"crypto/asn1/tasn_new.cc\",\n            \"crypto/asn1/tasn_typ.cc\",\n            \"crypto/asn1/tasn_utl.cc\",\n            \"crypto/base64/base64.cc\",\n            \"crypto/bio/bio.cc\",\n            \"crypto/bio/bio_mem.cc\",\n            \"crypto/bio/connect.cc\",\n            \"crypto/bio/errno.cc\",\n            \"crypto/bio/fd.cc\",\n            \"crypto/bio/file.cc\",\n            \"crypto/bio/hexdump.cc\",\n            \"crypto/bio/pair.cc\",\n            \"crypto/bio/printf.cc\",\n            \"crypto/bio/socket.cc\",\n            \"crypto/bio/socket_helper.cc\",\n            \"crypto/blake2/blake2.cc\",\n            \"crypto/bn_extra/bn_asn1.cc\",\n            \"crypto/bn_extra/convert.cc\",\n            \"crypto/buf/buf.cc\",\n            \"crypto/bytestring/asn1_compat.cc\",\n            \"crypto/bytestring/ber.cc\",\n            \"crypto/bytestring/cbb.cc\",\n            \"crypto/bytestring/cbs.cc\",\n            \"crypto/bytestring/unicode.cc\",\n            \"crypto/chacha/chacha.cc\",\n            \"crypto/cipher_extra/cipher_extra.cc\",\n            \"crypto/cipher_extra/derive_key.cc\",\n            \"crypto/cipher_extra/e_aesctrhmac.cc\",\n            \"crypto/cipher_extra/e_aesgcmsiv.cc\",\n            \"crypto/cipher_extra/e_chacha20poly1305.cc\",\n            \"crypto/cipher_extra/e_des.cc\",\n            \"crypto/cipher_extra/e_null.cc\",\n            \"crypto/cipher_extra/e_rc2.cc\",\n            \"crypto/cipher_extra/e_rc4.cc\",\n            \"crypto/cipher_extra/e_tls.cc\",\n            \"crypto/cipher_extra/tls_cbc.cc\",\n            \"crypto/conf/conf.cc\",\n            \"crypto/cpu_aarch64_apple.cc\",\n            \"crypto/cpu_aarch64_fuchsia.cc\",\n            \"crypto/cpu_aarch64_linux.cc\",\n            \"crypto/cpu_aarch64_openbsd.cc\",\n            \"crypto/cpu_aarch64_sysreg.cc\",\n            \"crypto/cpu_aarch64_win.cc\",\n            \"crypto/cpu_arm_freebsd.cc\",\n            \"crypto/cpu_arm_linux.cc\",\n            \"crypto/cpu_intel.cc\",\n            \"crypto/crypto.cc\",\n            \"crypto/curve25519/curve25519.cc\",\n            \"crypto/curve25519/curve25519_64_adx.cc\",\n            \"crypto/curve25519/spake25519.cc\",\n            \"crypto/des/des.cc\",\n            \"crypto/dh_extra/dh_asn1.cc\",\n            \"crypto/dh_extra/params.cc\",\n            \"crypto/digest_extra/digest_extra.cc\",\n            \"crypto/dsa/dsa.cc\",\n            \"crypto/dsa/dsa_asn1.cc\",\n            \"crypto/ec_extra/ec_asn1.cc\",\n            \"crypto/ec_extra/ec_derive.cc\",\n            \"crypto/ec_extra/hash_to_curve.cc\",\n            \"crypto/ecdh_extra/ecdh_extra.cc\",\n            \"crypto/ecdsa_extra/ecdsa_asn1.cc\",\n            \"crypto/engine/engine.cc\",\n            \"crypto/err/err.cc\",\n            \"crypto/evp/evp.cc\",\n            \"crypto/evp/evp_asn1.cc\",\n            \"crypto/evp/evp_ctx.cc\",\n            \"crypto/evp/p_dh.cc\",\n            \"crypto/evp/p_dh_asn1.cc\",\n            \"crypto/evp/p_dsa_asn1.cc\",\n            \"crypto/evp/p_ec.cc\",\n            \"crypto/evp/p_ec_asn1.cc\",\n            \"crypto/evp/p_ed25519.cc\",\n            \"crypto/evp/p_ed25519_asn1.cc\",\n            \"crypto/evp/p_hkdf.cc\",\n            \"crypto/evp/p_rsa.cc\",\n            \"crypto/evp/p_rsa_asn1.cc\",\n            \"crypto/evp/p_x25519.cc\",\n            \"crypto/evp/p_x25519_asn1.cc\",\n            \"crypto/evp/pbkdf.cc\",\n            \"crypto/evp/print.cc\",\n            \"crypto/evp/scrypt.cc\",\n            \"crypto/evp/sign.cc\",\n            \"crypto/ex_data.cc\",\n            \"crypto/fipsmodule/fips_shared_support.cc\",\n            \"crypto/hpke/hpke.cc\",\n            \"crypto/hrss/hrss.cc\",\n            \"crypto/kyber/kyber.cc\",\n            \"crypto/lhash/lhash.cc\",\n            \"crypto/md4/md4.cc\",\n            \"crypto/md5/md5.cc\",\n            \"crypto/mem.cc\",\n            \"crypto/mldsa/mldsa.cc\",\n            \"crypto/mlkem/mlkem.cc\",\n            \"crypto/obj/obj.cc\",\n            \"crypto/obj/obj_xref.cc\",\n            \"crypto/pem/pem_all.cc\",\n            \"crypto/pem/pem_info.cc\",\n            \"crypto/pem/pem_lib.cc\",\n            \"crypto/pem/pem_oth.cc\",\n            \"crypto/pem/pem_pk8.cc\",\n            \"crypto/pem/pem_pkey.cc\",\n            \"crypto/pem/pem_x509.cc\",\n            \"crypto/pem/pem_xaux.cc\",\n            \"crypto/pkcs7/pkcs7.cc\",\n            \"crypto/pkcs7/pkcs7_x509.cc\",\n            \"crypto/pkcs8/p5_pbev2.cc\",\n            \"crypto/pkcs8/pkcs8.cc\",\n            \"crypto/pkcs8/pkcs8_x509.cc\",\n            \"crypto/poly1305/poly1305.cc\",\n            \"crypto/poly1305/poly1305_arm.cc\",\n            \"crypto/poly1305/poly1305_vec.cc\",\n            \"crypto/pool/pool.cc\",\n            \"crypto/rand_extra/deterministic.cc\",\n            \"crypto/rand_extra/fork_detect.cc\",\n            \"crypto/rand_extra/forkunsafe.cc\",\n            \"crypto/rand_extra/getentropy.cc\",\n            \"crypto/rand_extra/ios.cc\",\n            \"crypto/rand_extra/passive.cc\",\n            \"crypto/rand_extra/rand_extra.cc\",\n            \"crypto/rand_extra/trusty.cc\",\n            \"crypto/rand_extra/urandom.cc\",\n            \"crypto/rand_extra/windows.cc\",\n            \"crypto/rc4/rc4.cc\",\n            \"crypto/refcount.cc\",\n            \"crypto/rsa_extra/rsa_asn1.cc\",\n            \"crypto/rsa_extra/rsa_crypt.cc\",\n            \"crypto/rsa_extra/rsa_extra.cc\",\n            \"crypto/rsa_extra/rsa_print.cc\",\n            \"crypto/slhdsa/slhdsa.cc\",\n            \"crypto/sha/sha1.cc\",\n            \"crypto/sha/sha256.cc\",\n            \"crypto/sha/sha512.cc\",\n            \"crypto/siphash/siphash.cc\",\n            \"crypto/stack/stack.cc\",\n            \"crypto/thread.cc\",\n            \"crypto/thread_none.cc\",\n            \"crypto/thread_pthread.cc\",\n            \"crypto/thread_win.cc\",\n            \"crypto/trust_token/pmbtoken.cc\",\n            \"crypto/trust_token/trust_token.cc\",\n            \"crypto/trust_token/voprf.cc\",\n            \"crypto/x509/a_digest.cc\",\n            \"crypto/x509/a_sign.cc\",\n            \"crypto/x509/a_verify.cc\",\n            \"crypto/x509/algorithm.cc\",\n            \"crypto/x509/asn1_gen.cc\",\n            \"crypto/x509/by_dir.cc\",\n            \"crypto/x509/by_file.cc\",\n            \"crypto/x509/i2d_pr.cc\",\n            \"crypto/x509/name_print.cc\",\n            \"crypto/x509/policy.cc\",\n            \"crypto/x509/rsa_pss.cc\",\n            \"crypto/x509/t_crl.cc\",\n            \"crypto/x509/t_req.cc\",\n            \"crypto/x509/t_x509.cc\",\n            \"crypto/x509/t_x509a.cc\",\n            \"crypto/x509/v3_akey.cc\",\n            \"crypto/x509/v3_akeya.cc\",\n            \"crypto/x509/v3_alt.cc\",\n            \"crypto/x509/v3_bcons.cc\",\n            \"crypto/x509/v3_bitst.cc\",\n            \"crypto/x509/v3_conf.cc\",\n            \"crypto/x509/v3_cpols.cc\",\n            \"crypto/x509/v3_crld.cc\",\n            \"crypto/x509/v3_enum.cc\",\n            \"crypto/x509/v3_extku.cc\",\n            \"crypto/x509/v3_genn.cc\",\n            \"crypto/x509/v3_ia5.cc\",\n            \"crypto/x509/v3_info.cc\",\n            \"crypto/x509/v3_int.cc\",\n            \"crypto/x509/v3_lib.cc\",\n            \"crypto/x509/v3_ncons.cc\",\n            \"crypto/x509/v3_ocsp.cc\",\n            \"crypto/x509/v3_pcons.cc\",\n            \"crypto/x509/v3_pmaps.cc\",\n            \"crypto/x509/v3_prn.cc\",\n            \"crypto/x509/v3_purp.cc\",\n            \"crypto/x509/v3_skey.cc\",\n            \"crypto/x509/v3_utl.cc\",\n            \"crypto/x509/x509.cc\",\n            \"crypto/x509/x509_att.cc\",\n            \"crypto/x509/x509_cmp.cc\",\n            \"crypto/x509/x509_d2.cc\",\n            \"crypto/x509/x509_def.cc\",\n            \"crypto/x509/x509_ext.cc\",\n            \"crypto/x509/x509_lu.cc\",\n            \"crypto/x509/x509_obj.cc\",\n            \"crypto/x509/x509_req.cc\",\n            \"crypto/x509/x509_set.cc\",\n            \"crypto/x509/x509_trs.cc\",\n            \"crypto/x509/x509_txt.cc\",\n            \"crypto/x509/x509_v3.cc\",\n            \"crypto/x509/x509_vfy.cc\",\n            \"crypto/x509/x509_vpm.cc\",\n            \"crypto/x509/x509cset.cc\",\n            \"crypto/x509/x509name.cc\",\n            \"crypto/x509/x509rset.cc\",\n            \"crypto/x509/x509spki.cc\",\n            \"crypto/x509/x_algor.cc\",\n            \"crypto/x509/x_all.cc\",\n            \"crypto/x509/x_attrib.cc\",\n            \"crypto/x509/x_crl.cc\",\n            \"crypto/x509/x_exten.cc\",\n            \"crypto/x509/x_name.cc\",\n            \"crypto/x509/x_pubkey.cc\",\n            \"crypto/x509/x_req.cc\",\n            \"crypto/x509/x_sig.cc\",\n            \"crypto/x509/x_spki.cc\",\n            \"crypto/x509/x_val.cc\",\n            \"crypto/x509/x_x509.cc\",\n            \"crypto/x509/x_x509a.cc\"\n        ],\n        \"hdrs\": [\n            \"include/openssl/aead.h\",\n            \"include/openssl/aes.h\",\n            \"include/openssl/arm_arch.h\",\n            \"include/openssl/asm_base.h\",\n            \"include/openssl/asn1.h\",\n            \"include/openssl/asn1_mac.h\",\n            \"include/openssl/asn1t.h\",\n            \"include/openssl/base.h\",\n            \"include/openssl/base64.h\",\n            \"include/openssl/bcm_public.h\",\n            \"include/openssl/bio.h\",\n            \"include/openssl/blake2.h\",\n            \"include/openssl/blowfish.h\",\n            \"include/openssl/bn.h\",\n            \"include/openssl/buf.h\",\n            \"include/openssl/buffer.h\",\n            \"include/openssl/bytestring.h\",\n            \"include/openssl/cast.h\",\n            \"include/openssl/chacha.h\",\n            \"include/openssl/cipher.h\",\n            \"include/openssl/cmac.h\",\n            \"include/openssl/conf.h\",\n            \"include/openssl/cpu.h\",\n            \"include/openssl/crypto.h\",\n            \"include/openssl/ctrdrbg.h\",\n            \"include/openssl/curve25519.h\",\n            \"include/openssl/des.h\",\n            \"include/openssl/dh.h\",\n            \"include/openssl/digest.h\",\n            \"include/openssl/dsa.h\",\n            \"include/openssl/e_os2.h\",\n            \"include/openssl/ec.h\",\n            \"include/openssl/ec_key.h\",\n            \"include/openssl/ecdh.h\",\n            \"include/openssl/ecdsa.h\",\n            \"include/openssl/engine.h\",\n            \"include/openssl/err.h\",\n            \"include/openssl/evp.h\",\n            \"include/openssl/evp_errors.h\",\n            \"include/openssl/ex_data.h\",\n            \"include/openssl/experimental/kyber.h\",\n            \"include/openssl/hkdf.h\",\n            \"include/openssl/hmac.h\",\n            \"include/openssl/hpke.h\",\n            \"include/openssl/hrss.h\",\n            \"include/openssl/is_boringssl.h\",\n            \"include/openssl/kdf.h\",\n            \"include/openssl/lhash.h\",\n            \"include/openssl/md4.h\",\n            \"include/openssl/md5.h\",\n            \"include/openssl/mem.h\",\n            \"include/openssl/mldsa.h\",\n            \"include/openssl/mlkem.h\",\n            \"include/openssl/nid.h\",\n            \"include/openssl/obj.h\",\n            \"include/openssl/obj_mac.h\",\n            \"include/openssl/objects.h\",\n            \"include/openssl/opensslconf.h\",\n            \"include/openssl/opensslv.h\",\n            \"include/openssl/ossl_typ.h\",\n            \"include/openssl/pem.h\",\n            \"include/openssl/pkcs12.h\",\n            \"include/openssl/pkcs7.h\",\n            \"include/openssl/pkcs8.h\",\n            \"include/openssl/poly1305.h\",\n            \"include/openssl/pool.h\",\n            \"include/openssl/posix_time.h\",\n            \"include/openssl/rand.h\",\n            \"include/openssl/rc4.h\",\n            \"include/openssl/ripemd.h\",\n            \"include/openssl/rsa.h\",\n            \"include/openssl/safestack.h\",\n            \"include/openssl/service_indicator.h\",\n            \"include/openssl/sha.h\",\n            \"include/openssl/siphash.h\",\n            \"include/openssl/slhdsa.h\",\n            \"include/openssl/span.h\",\n            \"include/openssl/stack.h\",\n            \"include/openssl/target.h\",\n            \"include/openssl/thread.h\",\n            \"include/openssl/time.h\",\n            \"include/openssl/trust_token.h\",\n            \"include/openssl/type_check.h\",\n            \"include/openssl/x509.h\",\n            \"include/openssl/x509_vfy.h\",\n            \"include/openssl/x509v3.h\",\n            \"include/openssl/x509v3_errors.h\"\n        ],\n        \"internal_hdrs\": [\n            \"crypto/asn1/internal.h\",\n            \"crypto/bio/internal.h\",\n            \"crypto/bytestring/internal.h\",\n            \"crypto/chacha/internal.h\",\n            \"crypto/cipher_extra/internal.h\",\n            \"crypto/conf/internal.h\",\n            \"crypto/cpu_arm_linux.h\",\n            \"crypto/curve25519/curve25519_tables.h\",\n            \"crypto/curve25519/internal.h\",\n            \"crypto/des/internal.h\",\n            \"crypto/dsa/internal.h\",\n            \"crypto/ec_extra/internal.h\",\n            \"crypto/err/internal.h\",\n            \"crypto/evp/internal.h\",\n            \"crypto/fipsmodule/aes/internal.h\",\n            \"crypto/fipsmodule/bcm_interface.h\",\n            \"crypto/fipsmodule/bn/internal.h\",\n            \"crypto/fipsmodule/bn/rsaz_exp.h\",\n            \"crypto/fipsmodule/cipher/internal.h\",\n            \"crypto/fipsmodule/delocate.h\",\n            \"crypto/fipsmodule/dh/internal.h\",\n            \"crypto/fipsmodule/digest/internal.h\",\n            \"crypto/fipsmodule/digest/md32_common.h\",\n            \"crypto/fipsmodule/ec/builtin_curves.h\",\n            \"crypto/fipsmodule/ec/internal.h\",\n            \"crypto/fipsmodule/ec/p256-nistz-table.h\",\n            \"crypto/fipsmodule/ec/p256-nistz.h\",\n            \"crypto/fipsmodule/ec/p256_table.h\",\n            \"crypto/fipsmodule/ecdsa/internal.h\",\n            \"crypto/fipsmodule/keccak/internal.h\",\n            \"crypto/fipsmodule/modes/internal.h\",\n            \"crypto/fipsmodule/rand/internal.h\",\n            \"crypto/fipsmodule/rsa/internal.h\",\n            \"crypto/fipsmodule/service_indicator/internal.h\",\n            \"crypto/fipsmodule/sha/internal.h\",\n            \"crypto/fipsmodule/slhdsa/address.h\",\n            \"crypto/fipsmodule/slhdsa/fors.h\",\n            \"crypto/fipsmodule/slhdsa/merkle.h\",\n            \"crypto/fipsmodule/slhdsa/params.h\",\n            \"crypto/fipsmodule/slhdsa/thash.h\",\n            \"crypto/fipsmodule/slhdsa/wots.h\",\n            \"crypto/fipsmodule/tls/internal.h\",\n            \"crypto/hrss/internal.h\",\n            \"crypto/bcm_support.h\",\n            \"crypto/internal.h\",\n            \"crypto/kyber/internal.h\",\n            \"crypto/lhash/internal.h\",\n            \"crypto/md5/internal.h\",\n            \"crypto/obj/obj_dat.h\",\n            \"crypto/pem/internal.h\",\n            \"crypto/pkcs7/internal.h\",\n            \"crypto/pkcs8/internal.h\",\n            \"crypto/poly1305/internal.h\",\n            \"crypto/pool/internal.h\",\n            \"crypto/rand_extra/getrandom_fillin.h\",\n            \"crypto/rand_extra/sysrand_internal.h\",\n            \"crypto/rsa_extra/internal.h\",\n            \"crypto/trust_token/internal.h\",\n            \"crypto/x509/ext_dat.h\",\n            \"crypto/x509/internal.h\",\n            \"third_party/fiat/curve25519_32.h\",\n            \"third_party/fiat/curve25519_64.h\",\n            \"third_party/fiat/curve25519_64_adx.h\",\n            \"third_party/fiat/curve25519_64_msvc.h\",\n            \"third_party/fiat/p256_32.h\",\n            \"third_party/fiat/p256_64.h\",\n            \"third_party/fiat/p256_64_msvc.h\"\n        ],\n        \"err_data\": [\n            \"crypto/err/*.errordata\"\n        ],\n        \"asm\": [\n            \"crypto/curve25519/asm/x25519-asm-arm.S\",\n            \"crypto/hrss/asm/poly_rq_mul.S\",\n            \"crypto/poly1305/poly1305_arm_asm.S\",\n            \"third_party/fiat/asm/fiat_curve25519_adx_mul.S\",\n            \"third_party/fiat/asm/fiat_curve25519_adx_square.S\"\n        ],\n        \"perlasm_aarch64\": [\n            {\"src\": \"crypto/chacha/asm/chacha-armv8.pl\"},\n            {\"src\": \"crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl\"}\n        ],\n        \"perlasm_arm\": [\n            {\"src\": \"crypto/chacha/asm/chacha-armv4.pl\"}\n        ],\n        \"perlasm_x86\": [\n            {\"src\": \"crypto/chacha/asm/chacha-x86.pl\"},\n            {\"src\": \"crypto/md5/asm/md5-586.pl\"}\n        ],\n        \"perlasm_x86_64\": [\n            {\"src\": \"crypto/chacha/asm/chacha-x86_64.pl\"},\n            {\"src\": \"crypto/cipher_extra/asm/aes128gcmsiv-x86_64.pl\"},\n            {\"src\": \"crypto/cipher_extra/asm/chacha20_poly1305_x86_64.pl\"},\n            {\"src\": \"crypto/md5/asm/md5-x86_64.pl\"}\n        ]\n    },\n    \"pki\": {\n        \"srcs\": [\n            \"pki/cert_error_id.cc\",\n            \"pki/cert_error_params.cc\",\n            \"pki/cert_errors.cc\",\n            \"pki/cert_issuer_source_static.cc\",\n            \"pki/certificate.cc\",\n            \"pki/certificate_policies.cc\",\n            \"pki/common_cert_errors.cc\",\n            \"pki/crl.cc\",\n            \"pki/encode_values.cc\",\n            \"pki/extended_key_usage.cc\",\n            \"pki/general_names.cc\",\n            \"pki/input.cc\",\n            \"pki/ip_util.cc\",\n            \"pki/name_constraints.cc\",\n            \"pki/ocsp.cc\",\n            \"pki/ocsp_verify_result.cc\",\n            \"pki/parse_certificate.cc\",\n            \"pki/parse_name.cc\",\n            \"pki/parse_values.cc\",\n            \"pki/parsed_certificate.cc\",\n            \"pki/parser.cc\",\n            \"pki/path_builder.cc\",\n            \"pki/pem.cc\",\n            \"pki/revocation_util.cc\",\n            \"pki/signature_algorithm.cc\",\n            \"pki/simple_path_builder_delegate.cc\",\n            \"pki/string_util.cc\",\n            \"pki/trust_store.cc\",\n            \"pki/trust_store_collection.cc\",\n            \"pki/trust_store_in_memory.cc\",\n            \"pki/verify.cc\",\n            \"pki/verify_certificate_chain.cc\",\n            \"pki/verify_error.cc\",\n            \"pki/verify_name_match.cc\",\n            \"pki/verify_signed_data.cc\"\n        ],\n        \"hdrs\": [\n            \"include/openssl/pki/certificate.h\",\n            \"include/openssl/pki/signature_verify_cache.h\",\n            \"include/openssl/pki/verify.h\",\n            \"include/openssl/pki/verify_error.h\"\n        ],\n        \"internal_hdrs\": [\n            \"pki/cert_error_id.h\",\n            \"pki/cert_error_params.h\",\n            \"pki/cert_errors.h\",\n            \"pki/cert_issuer_source.h\",\n            \"pki/cert_issuer_source_static.h\",\n            // TODO(crbug.com/boringssl/542): This should be in pki_tests.\n            \"pki/cert_issuer_source_sync_unittest.h\",\n            \"pki/certificate_policies.h\",\n            \"pki/common_cert_errors.h\",\n            \"pki/crl.h\",\n            \"pki/encode_values.h\",\n            \"pki/extended_key_usage.h\",\n            \"pki/general_names.h\",\n            \"pki/input.h\",\n            \"pki/ip_util.h\",\n            \"pki/mock_signature_verify_cache.h\",\n            \"pki/name_constraints.h\",\n            \"pki/nist_pkits_unittest.h\",\n            \"pki/ocsp.h\",\n            \"pki/ocsp_revocation_status.h\",\n            \"pki/ocsp_verify_result.h\",\n            \"pki/parse_certificate.h\",\n            \"pki/parse_name.h\",\n            \"pki/parse_values.h\",\n            \"pki/parsed_certificate.h\",\n            \"pki/parser.h\",\n            \"pki/path_builder.h\",\n            \"pki/pem.h\",\n            \"pki/revocation_util.h\",\n            \"pki/signature_algorithm.h\",\n            \"pki/simple_path_builder_delegate.h\",\n            \"pki/string_util.h\",\n            // TODO(crbug.com/boringssl/542): This should be in pki_tests.\n            \"pki/test_helpers.h\",\n            // TODO(crbug.com/boringssl/542): This should be in pki_tests.\n            \"pki/testdata/nist-pkits/pkits_testcases-inl.h\",\n            \"pki/trust_store.h\",\n            \"pki/trust_store_collection.h\",\n            \"pki/trust_store_in_memory.h\",\n            \"pki/verify_certificate_chain.h\",\n            // TODO(crbug.com/boringssl/542): This should be in pki_tests.\n            \"pki/verify_certificate_chain_typed_unittest.h\",\n            \"pki/verify_name_match.h\",\n            \"pki/verify_signed_data.h\"\n        ]\n    },\n    \"ssl\": {\n        \"srcs\": [\n            \"ssl/bio_ssl.cc\",\n            \"ssl/d1_both.cc\",\n            \"ssl/d1_lib.cc\",\n            \"ssl/d1_pkt.cc\",\n            \"ssl/d1_srtp.cc\",\n            \"ssl/dtls_method.cc\",\n            \"ssl/dtls_record.cc\",\n            \"ssl/encrypted_client_hello.cc\",\n            \"ssl/extensions.cc\",\n            \"ssl/handoff.cc\",\n            \"ssl/handshake.cc\",\n            \"ssl/handshake_client.cc\",\n            \"ssl/handshake_server.cc\",\n            \"ssl/s3_both.cc\",\n            \"ssl/s3_lib.cc\",\n            \"ssl/s3_pkt.cc\",\n            \"ssl/ssl_aead_ctx.cc\",\n            \"ssl/ssl_asn1.cc\",\n            \"ssl/ssl_buffer.cc\",\n            \"ssl/ssl_cert.cc\",\n            \"ssl/ssl_cipher.cc\",\n            \"ssl/ssl_credential.cc\",\n            \"ssl/ssl_file.cc\",\n            \"ssl/ssl_key_share.cc\",\n            \"ssl/ssl_lib.cc\",\n            \"ssl/ssl_privkey.cc\",\n            \"ssl/ssl_session.cc\",\n            \"ssl/ssl_stat.cc\",\n            \"ssl/ssl_transcript.cc\",\n            \"ssl/ssl_versions.cc\",\n            \"ssl/ssl_x509.cc\",\n            \"ssl/t1_enc.cc\",\n            \"ssl/tls13_both.cc\",\n            \"ssl/tls13_client.cc\",\n            \"ssl/tls13_enc.cc\",\n            \"ssl/tls13_server.cc\",\n            \"ssl/tls_method.cc\",\n            \"ssl/tls_record.cc\"\n        ],\n        \"hdrs\": [\n            \"include/openssl/dtls1.h\",\n            \"include/openssl/srtp.h\",\n            \"include/openssl/ssl.h\",\n            \"include/openssl/ssl3.h\",\n            \"include/openssl/tls1.h\"\n        ],\n        \"internal_hdrs\": [\n            \"ssl/internal.h\"\n        ]\n    },\n    \"decrepit\": {\n        \"srcs\": [\n            \"decrepit/bio/base64_bio.cc\",\n            \"decrepit/blowfish/blowfish.cc\",\n            \"decrepit/cast/cast.cc\",\n            \"decrepit/cast/cast_tables.cc\",\n            \"decrepit/cfb/cfb.cc\",\n            \"decrepit/des/cfb64ede.cc\",\n            \"decrepit/dh/dh_decrepit.cc\",\n            \"decrepit/dsa/dsa_decrepit.cc\",\n            \"decrepit/evp/dss1.cc\",\n            \"decrepit/evp/evp_do_all.cc\",\n            \"decrepit/obj/obj_decrepit.cc\",\n            \"decrepit/rc4/rc4_decrepit.cc\",\n            \"decrepit/ripemd/ripemd.cc\",\n            \"decrepit/rsa/rsa_decrepit.cc\",\n            \"decrepit/ssl/ssl_decrepit.cc\",\n            \"decrepit/x509/x509_decrepit.cc\",\n            \"decrepit/xts/xts.cc\"\n        ],\n        \"internal_hdrs\": [\n            \"decrepit/cast/internal.h\",\n            \"decrepit/macros.h\"\n        ]\n    },\n    \"test_support\": {\n        \"srcs\": [\n            \"crypto/test/abi_test.cc\",\n            \"crypto/test/file_test.cc\",\n            \"crypto/test/file_test_gtest.cc\",\n            \"crypto/test/file_util.cc\",\n            \"crypto/test/test_data.cc\",\n            \"crypto/test/test_util.cc\",\n            \"crypto/test/wycheproof_util.cc\"\n        ],\n        \"internal_hdrs\": [\n            \"crypto/test/abi_test.h\",\n            \"crypto/test/file_test.h\",\n            \"crypto/test/file_util.h\",\n            \"crypto/test/gtest_main.h\",\n            \"crypto/test/test_data.h\",\n            \"crypto/test/test_util.h\",\n            \"crypto/test/wycheproof_util.h\",\n            // TODO(crbug.com/boringssl/542): It's a bit odd that these are in\n            // test_support. Most of it is part of bssl_shim, except that the\n            // fuzzers use some of these headers.\n            \"ssl/test/async_bio.h\",\n            \"ssl/test/fuzzer.h\",\n            \"ssl/test/fuzzer_tags.h\",\n            \"ssl/test/handshake_util.h\",\n            \"ssl/test/mock_quic_transport.h\",\n            \"ssl/test/packeted_bio.h\",\n            \"ssl/test/settings_writer.h\",\n            \"ssl/test/test_config.h\",\n            \"ssl/test/test_state.h\"\n        ],\n        \"perlasm_aarch64\": [\n            {\"src\": \"crypto/test/asm/trampoline-armv8.pl\"}\n        ],\n        \"perlasm_arm\": [\n            {\"src\": \"crypto/test/asm/trampoline-armv4.pl\"}\n        ],\n        \"perlasm_x86\": [\n            {\"src\": \"crypto/test/asm/trampoline-x86.pl\"}\n        ],\n        \"perlasm_x86_64\": [\n            {\"src\": \"crypto/test/asm/trampoline-x86_64.pl\"}\n        ]\n    },\n    \"crypto_test\": {\n        \"srcs\": [\n            \"crypto/abi_self_test.cc\",\n            \"crypto/asn1/asn1_test.cc\",\n            \"crypto/base64/base64_test.cc\",\n            \"crypto/bio/bio_test.cc\",\n            \"crypto/blake2/blake2_test.cc\",\n            \"crypto/buf/buf_test.cc\",\n            \"crypto/bytestring/bytestring_test.cc\",\n            \"crypto/chacha/chacha_test.cc\",\n            \"crypto/cipher_extra/aead_test.cc\",\n            \"crypto/cipher_extra/cipher_test.cc\",\n            \"crypto/compiler_test.cc\",\n            \"crypto/conf/conf_test.cc\",\n            \"crypto/constant_time_test.cc\",\n            \"crypto/cpu_arm_linux_test.cc\",\n            \"crypto/crypto_test.cc\",\n            \"crypto/curve25519/ed25519_test.cc\",\n            \"crypto/curve25519/spake25519_test.cc\",\n            \"crypto/curve25519/x25519_test.cc\",\n            \"crypto/dh_extra/dh_test.cc\",\n            \"crypto/digest_extra/digest_test.cc\",\n            \"crypto/dsa/dsa_test.cc\",\n            \"crypto/ecdh_extra/ecdh_test.cc\",\n            \"crypto/err/err_test.cc\",\n            \"crypto/evp/evp_extra_test.cc\",\n            \"crypto/evp/evp_test.cc\",\n            \"crypto/evp/pbkdf_test.cc\",\n            \"crypto/evp/scrypt_test.cc\",\n            \"crypto/fipsmodule/aes/aes_test.cc\",\n            \"crypto/fipsmodule/bn/bn_test.cc\",\n            \"crypto/fipsmodule/cmac/cmac_test.cc\",\n            \"crypto/fipsmodule/ec/ec_test.cc\",\n            \"crypto/fipsmodule/ec/p256-nistz_test.cc\",\n            \"crypto/fipsmodule/ec/p256_test.cc\",\n            \"crypto/fipsmodule/ecdsa/ecdsa_test.cc\",\n            \"crypto/fipsmodule/hkdf/hkdf_test.cc\",\n            \"crypto/fipsmodule/keccak/keccak_test.cc\",\n            \"crypto/fipsmodule/modes/gcm_test.cc\",\n            \"crypto/fipsmodule/rand/ctrdrbg_test.cc\",\n            \"crypto/fipsmodule/service_indicator/service_indicator_test.cc\",\n            \"crypto/fipsmodule/sha/sha_test.cc\",\n            \"crypto/hmac_extra/hmac_test.cc\",\n            \"crypto/hpke/hpke_test.cc\",\n            \"crypto/hrss/hrss_test.cc\",\n            \"crypto/impl_dispatch_test.cc\",\n            \"crypto/kyber/kyber_test.cc\",\n            \"crypto/lhash/lhash_test.cc\",\n            \"crypto/md5/md5_test.cc\",\n            \"crypto/mlkem/mlkem_test.cc\",\n            \"crypto/obj/obj_test.cc\",\n            \"crypto/pem/pem_test.cc\",\n            \"crypto/mldsa/mldsa_test.cc\",\n            \"crypto/pkcs7/pkcs7_test.cc\",\n            \"crypto/pkcs8/pkcs12_test.cc\",\n            \"crypto/pkcs8/pkcs8_test.cc\",\n            \"crypto/poly1305/poly1305_test.cc\",\n            \"crypto/pool/pool_test.cc\",\n            \"crypto/rand_extra/fork_detect_test.cc\",\n            \"crypto/rand_extra/getentropy_test.cc\",\n            \"crypto/rand_extra/rand_test.cc\",\n            \"crypto/refcount_test.cc\",\n            \"crypto/rsa_extra/rsa_test.cc\",\n            \"crypto/self_test.cc\",\n            \"crypto/siphash/siphash_test.cc\",\n            \"crypto/slhdsa/slhdsa_test.cc\",\n            \"crypto/stack/stack_test.cc\",\n            \"crypto/test/gtest_main.cc\",\n            \"crypto/thread_test.cc\",\n            \"crypto/trust_token/trust_token_test.cc\",\n            \"crypto/x509/tab_test.cc\",\n            \"crypto/x509/x509_test.cc\",\n            \"crypto/x509/x509_time_test.cc\"\n        ],\n        \"data\": [\n            \"crypto/blake2/blake2b256_tests.txt\",\n            \"crypto/cipher_extra/test/*.txt\",\n            \"crypto/cipher_extra/test/nist_cavp/*.txt\",\n            \"crypto/curve25519/ed25519_tests.txt\",\n            \"crypto/ecdh_extra/ecdh_tests.txt\",\n            \"crypto/evp/evp_tests.txt\",\n            \"crypto/evp/scrypt_tests.txt\",\n            \"crypto/fipsmodule/aes/aes_tests.txt\",\n            \"crypto/fipsmodule/bn/test/*.txt\",\n            \"crypto/fipsmodule/cmac/cavp_3des_cmac_tests.txt\",\n            \"crypto/fipsmodule/cmac/cavp_aes128_cmac_tests.txt\",\n            \"crypto/fipsmodule/cmac/cavp_aes192_cmac_tests.txt\",\n            \"crypto/fipsmodule/cmac/cavp_aes256_cmac_tests.txt\",\n            \"crypto/fipsmodule/ec/ec_scalar_base_mult_tests.txt\",\n            \"crypto/fipsmodule/ec/p256-nistz_tests.txt\",\n            \"crypto/fipsmodule/ecdsa/ecdsa_sign_tests.txt\",\n            \"crypto/fipsmodule/ecdsa/ecdsa_verify_tests.txt\",\n            \"crypto/fipsmodule/keccak/keccak_tests.txt\",\n            \"crypto/fipsmodule/rand/ctrdrbg_vectors.txt\",\n            \"crypto/hmac_extra/hmac_tests.txt\",\n            \"crypto/hpke/hpke_test_vectors.txt\",\n            \"crypto/kyber/kyber_tests.txt\",\n            \"crypto/mldsa/mldsa_nist_keygen_65_tests.txt\",\n            \"crypto/mldsa/mldsa_nist_keygen_87_tests.txt\",\n            \"crypto/mldsa/mldsa_nist_siggen_65_tests.txt\",\n            \"crypto/mldsa/mldsa_nist_siggen_87_tests.txt\",\n            \"crypto/mlkem/mlkem1024_decap_tests.txt\",\n            \"crypto/mlkem/mlkem1024_encap_tests.txt\",\n            \"crypto/mlkem/mlkem1024_keygen_tests.txt\",\n            \"crypto/mlkem/mlkem1024_nist_decap_tests.txt\",\n            \"crypto/mlkem/mlkem1024_nist_keygen_tests.txt\",\n            \"crypto/mlkem/mlkem768_decap_tests.txt\",\n            \"crypto/mlkem/mlkem768_encap_tests.txt\",\n            \"crypto/mlkem/mlkem768_keygen_tests.txt\",\n            \"crypto/mlkem/mlkem768_nist_decap_tests.txt\",\n            \"crypto/mlkem/mlkem768_nist_keygen_tests.txt\",\n            \"crypto/pkcs8/test/*.p12\",\n            \"crypto/poly1305/poly1305_tests.txt\",\n            \"crypto/siphash/siphash_tests.txt\",\n            \"crypto/slhdsa/slhdsa_keygen.txt\",\n            \"crypto/slhdsa/slhdsa_prehash.txt\",\n            \"crypto/slhdsa/slhdsa_siggen.txt\",\n            \"crypto/slhdsa/slhdsa_sigver.txt\",\n            \"crypto/x509/test/*.pem\",\n            \"third_party/wycheproof_testvectors/*.txt\"\n        ]\n    },\n    \"urandom_test\": {\n        \"srcs\": [\n            \"crypto/rand_extra/urandom_test.cc\"\n        ]\n    },\n    \"pki_test\": {\n        \"srcs\": [\n            \"crypto/test/gtest_main.cc\",\n            \"pki/cert_issuer_source_static_unittest.cc\",\n            \"pki/certificate_policies_unittest.cc\",\n            \"pki/certificate_unittest.cc\",\n            \"pki/crl_unittest.cc\",\n            \"pki/encode_values_unittest.cc\",\n            \"pki/extended_key_usage_unittest.cc\",\n            \"pki/general_names_unittest.cc\",\n            \"pki/input_unittest.cc\",\n            \"pki/ip_util_unittest.cc\",\n            \"pki/mock_signature_verify_cache.cc\",\n            \"pki/name_constraints_unittest.cc\",\n            \"pki/nist_pkits_unittest.cc\",\n            \"pki/ocsp_unittest.cc\",\n            \"pki/parse_certificate_unittest.cc\",\n            \"pki/parse_name_unittest.cc\",\n            \"pki/parse_values_unittest.cc\",\n            \"pki/parsed_certificate_unittest.cc\",\n            \"pki/parser_unittest.cc\",\n            \"pki/path_builder_pkits_unittest.cc\",\n            \"pki/path_builder_unittest.cc\",\n            \"pki/path_builder_verify_certificate_chain_unittest.cc\",\n            \"pki/pem_unittest.cc\",\n            \"pki/signature_algorithm_unittest.cc\",\n            \"pki/simple_path_builder_delegate_unittest.cc\",\n            \"pki/string_util_unittest.cc\",\n            \"pki/test_helpers.cc\",\n            \"pki/trust_store_collection_unittest.cc\",\n            \"pki/trust_store_in_memory_unittest.cc\",\n            \"pki/verify_certificate_chain_pkits_unittest.cc\",\n            \"pki/verify_certificate_chain_unittest.cc\",\n            \"pki/verify_name_match_unittest.cc\",\n            \"pki/verify_signed_data_unittest.cc\",\n            \"pki/verify_unittest.cc\"\n        ],\n        \"data\": [\n            \"pki/testdata/cert_issuer_source_static_unittest/*.pem\",\n            \"pki/testdata/certificate_policies_unittest/*.pem\",\n            \"pki/testdata/crl_unittest/*.pem\",\n            \"pki/testdata/name_constraints_unittest/*.pem\",\n            \"pki/testdata/nist-pkits/certs/*.crt\",\n            \"pki/testdata/nist-pkits/crls/*.crl\",\n            \"pki/testdata/ocsp_unittest/*.pem\",\n            \"pki/testdata/parse_certificate_unittest/*.pem\",\n            \"pki/testdata/parse_certificate_unittest/*/*.pem\",\n            \"pki/testdata/path_builder_unittest/*.pem\",\n            \"pki/testdata/path_builder_unittest/*/*.pem\",\n            \"pki/testdata/verify_certificate_chain_unittest/*/*.pem\",\n            \"pki/testdata/verify_certificate_chain_unittest/*/*.test\",\n            \"pki/testdata/verify_certificate_chain_unittest/pkits_errors/*.txt\",\n            \"pki/testdata/verify_name_match_unittest/names/*.pem\",\n            \"pki/testdata/verify_signed_data_unittest/*.pem\",\n            \"pki/testdata/verify_unittest/*.der\",\n            \"pki/testdata/verify_unittest/self-issued.pem\"\n        ]\n    },\n    \"ssl_test\": {\n        \"srcs\": [\n            \"crypto/test/gtest_main.cc\",\n            \"ssl/span_test.cc\",\n            \"ssl/ssl_c_test.c\",\n            \"ssl/ssl_internal_test.cc\",\n            \"ssl/ssl_test.cc\"\n        ]\n    },\n    \"decrepit_test\": {\n        \"srcs\": [\n            \"crypto/test/gtest_main.cc\",\n            \"decrepit/blowfish/blowfish_test.cc\",\n            \"decrepit/cast/cast_test.cc\",\n            \"decrepit/cfb/cfb_test.cc\",\n            \"decrepit/des/des_test.cc\",\n            \"decrepit/evp/evp_test.cc\",\n            \"decrepit/ripemd/ripemd_test.cc\",\n            \"decrepit/xts/xts_test.cc\"\n        ]\n    },\n    \"bssl\": {\n        \"srcs\": [\n            \"tool/args.cc\",\n            \"tool/ciphers.cc\",\n            \"tool/client.cc\",\n            \"tool/const.cc\",\n            \"tool/digest.cc\",\n            \"tool/fd.cc\",\n            \"tool/file.cc\",\n            \"tool/generate_ech.cc\",\n            \"tool/generate_ed25519.cc\",\n            \"tool/genrsa.cc\",\n            \"tool/pkcs12.cc\",\n            \"tool/rand.cc\",\n            \"tool/server.cc\",\n            \"tool/sign.cc\",\n            \"tool/speed.cc\",\n            \"tool/tool.cc\",\n            \"tool/transport_common.cc\"\n        ],\n        \"internal_hdrs\": [\n            \"tool/internal.h\",\n            \"tool/transport_common.h\"\n        ]\n    },\n    \"fuzz\": {\n        // TODO(crbug.com/42290554): Unlike the other targets, each source here\n        // is expected to be built separately. When we migrate from libFuzzer to\n        // FuzzTest, this will be moot.\n        \"srcs\": [\n            \"fuzz/*.cc\"\n        ]\n    },\n    \"rust_bssl_sys\": {\n        \"srcs\": [\n            \"rust/bssl-sys/src/*.rs\"\n        ]\n    },\n    \"rust_bssl_crypto\": {\n        \"srcs\": [\n            \"rust/bssl-crypto/src/*.rs\",\n            \"rust/bssl-crypto/src/*/*.rs\"\n        ]\n    }\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codereview.settings",
          "type": "blob",
          "size": 0.166015625,
          "content": "# This file is used by \"git cl\" to get repository specific information.\nGERRIT_HOST: True\nGERRIT_PORT: True\nCODE_REVIEW_SERVER: https://boringssl-review.googlesource.com\n"
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "decrepit",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.2919921875,
          "content": "module boringssl.googlesource.com/boringssl\n\ngo 1.23\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0\n\tfilippo.io/mlkem768 v0.0.0-20241021091500-d85de16e2039\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/net v0.27.0\n)\n\nrequire (\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/term v0.27.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.974609375,
          "content": "filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\nfilippo.io/mlkem768 v0.0.0-20241021091500-d85de16e2039 h1:I/alPPIVzEkPeQKVU7Sl5gv/sQ0IC4zgqHiACrSgUW8=\nfilippo.io/mlkem768 v0.0.0-20241021091500-d85de16e2039/go.mod h1:IkpYfciLz5fI/S4/Z0NlhR4cpv6ubCMDnIwAe0XiojA=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/net v0.27.0 h1:5K3Njcw06/l2y9vpGCSdcxWOYHOUk3dVNGDXN+FvAys=\ngolang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "infra",
          "type": "tree",
          "content": null
        },
        {
          "name": "pki",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssl",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}