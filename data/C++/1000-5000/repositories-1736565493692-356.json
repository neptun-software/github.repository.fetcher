{
  "metadata": {
    "timestamp": 1736565493692,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenXRay/xray-16",
      "stars": 3096,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1357421875,
          "content": "root = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\n\n[*.{c,h,cpp,hpp}]\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.7236328125,
          "content": "# .git-blame-ignore-revs\n\n# Reformat: xrSound\n6852d9d7cfe361217fd614426ff56d8fab031a9b\n\n# Reformat: xrServerEntities\n00c727d42bbcc473c66a118dd3500e507d2cba3c\n\n# Reformat: xrScriptEngine\nb2244e6b123d8d7f1fa2eb847ef8d656f6731684\n\n# Reformat: xrPhysics\n848c60d22d9b3f902ff8e94be8d78ab5f1f7f5d5\n\n# Reformat: xrParticles\ncad7b7c26f6f030af93d2d1be85dc03affdbeb8a\n\n# Reformat: xrNetServer\n32e8f37eb640bd6661d5766542189507f8dc9713\n\n# Reformat: xrGameSpy\n6cf79729db2fa6847c41904d30d812c177092cc9\n\n# Reformat: xrGame\ned510c65879da42ce134d989ccb95d32fa687cc1\n\n# Reformat: xrEngine\neea17cc094f99a7648b07085a558d726f4844cfc\n\n# Reformat: xrCore\nef4849190da23595f2dca1ef276f7c9f98cab740\n\n# Reformat: xrCDB\n521f85615a07c2684335b492d7e9b9938bf998d1\n\n# Reformat: xrAICore\n3dbacd39bf0b356e3c5b5aa6fb41b7822a917205\n\n# Reformat: xrD3D9-Null\nbe1a18fdc523903ef3aace3e39b76973003240b0\n\n# Reformat: utils\ne79bc5e509a63d9e27f3adb5fd35796b7652ee40\n\n# Reformat: plugins\n3d01d0a3b1a0585dc160f54ba2d6df017d998128\n\n# Reformat: Layers\n88a3f6a31518542ba956dfa817c04489f6d71350\n\n# Reformat: Include\n5f6470792b105bdd2a110751f87f88e900fb3e9e\n\n# Reformat: Common\n716dc0364691082f5055404f27cd537283be9e9a\n\n# Reformat with new clang-format config\n34ab0fbfb2dee554cc9e8ee3331efa1c248b5c63\n\n# Revert \"Reformat souce code\"\n28313d10aff692f0be5e3d93b21f3e93dc932802\n\n# Reformat source code\nc96c2e4cc9fadf29c023464ba1885e7351d68943\n\n# Reformat the sources.\n2b938eaa7b258edc038b24a74363e276b2ace262\n\n# Convert all files to UTF-8\na8fa7736faf079897b8605b3893a08b3e0f5d69f\n\n# Style: Replace tabs with 4 spaces\n3970dd95199e99fecc50e55868019cd08f21925e\n\n# Style: Remove trailing whitespaces\n331da1b22fb73224d64a09924d96d23414ef4b09\n\n# Style: Ensure files end with a new line\n2e1bd658355e94e5205aa0c1064ecf5ee7281488\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3193359375,
          "content": "# exclude all dot files except .git, appveyor and travis files\n.*\n!.git*\n!.appveyor*\n!.editorconfig\n!.vscode\n\n# exclude binaries and temporary files\n[Bb]in/\n[Bb]uild*/\n\n# User-specific files\n*.user\n*.user.props\n*.nvuser\n*.PVS-Studio.*\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# exclude doxygen output\ndoc/doxygen/html/*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.1767578125,
          "content": "[submodule \"Externals/LuaJIT\"]\n\tpath = Externals/LuaJIT\n\turl = https://github.com/OpenXRay/LuaJIT.git\n\tbranch = v2.1\n[submodule \"Externals/luabind\"]\n\tpath = Externals/luabind\n\turl = https://github.com/OpenXRay/luabind-deboostified.git\n\tbranch = xray\n[submodule \"Externals/GameSpy\"]\n\tpath = Externals/GameSpy\n\turl = https://github.com/OpenXRay/GameSpy.git\n[submodule \"Externals/AGS_SDK\"]\n\tpath = Externals/AGS_SDK\n\turl = https://github.com/GPUOpen-LibrariesAndSDKs/AGS_SDK.git\n[submodule \"Externals/zlib\"]\n\tpath = Externals/zlib\n\turl = https://github.com/madler/zlib.git\n[submodule \"Externals/BugTrap\"]\n\tpath = Externals/BugTrap\n\turl = https://github.com/OpenXRay/BugTrap.git\n[submodule \"Externals/gli\"]\n\tpath = Externals/gli\n\turl = https://github.com/g-truc/gli.git\n[submodule \"Externals/sse2neon\"]\n\tpath = Externals/sse2neon\n\turl = https://github.com/DLTcollab/sse2neon.git\n[submodule \"Externals/imgui\"]\n\tpath = Externals/imgui\n\turl = https://github.com/ocornut/imgui.git\n\tbranch = docking\n[submodule \"Externals/xrLuaFix\"]\n\tpath = Externals/xrLuaFix\n\turl = https://github.com/OpenXRay/xrLuaFix.git\n[submodule \"Externals/sse2rvv\"]\n\tpath = Externals/sse2rvv\n\turl = https://github.com/pattonkan/sse2rvv.git\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "ArchLinux",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.2021484375,
          "content": "cmake_minimum_required(VERSION 3.22)\n\nmessage(STATUS \"CMAKE_VERSION: ${CMAKE_VERSION}\")\n\ncmake_policy(SET CMP0048 NEW)\ncmake_policy(SET CMP0095 NEW)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\ninclude(utils)\ncalculate_xray_build_id(XRAY_BUILD_ID)\n\nproject(OpenXRay\n    DESCRIPTION \"OpenXRay is an improved version of the X-Ray Engine, \\\n                the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World.\"\n    VERSION 1.6.02.${XRAY_BUILD_ID}\n    HOMEPAGE_URL \"https://github.com/OpenXRay/xray-16\"\n    LANGUAGES CXX C\n)\n\nmessage(STATUS \"CMAKE_PROJECT_VERSION: ${CMAKE_PROJECT_VERSION}\")\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(CMAKE_VERBOSE_MAKEFILE \"Verbose build output\" OFF)\nmessage(STATUS \"CMAKE_VERBOSE_MAKEFILE: ${CMAKE_VERBOSE_MAKEFILE}\")\n\nif (CMAKE_VERBOSE_MAKEFILE)\n    set(CMAKE_EXECUTE_PROCESS_COMMAND_ECHO STDOUT)\nendif()\n\nif (CMAKE_VERSION VERSION_EQUAL \"3.28.2\" AND CMAKE_UNITY_BUILD)\n    # https://gitlab.kitware.com/cmake/cmake/-/issues/25650\n    message(WARNING \"In CMake 3.28.2, precompiled headers are broken when Unity build is enabled. This breaks project from compiling. \\\n                     Please, update to CMake 3.28.3 or downgrade to 3.28.1.\")\n    set(CMAKE_UNITY_BUILD OFF)\nendif()\n\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"\" FORCE)\nendif()\n\n# Redirecting the default installation path /usr/local to /usr no need to use -DCMAKE_INSTALL_PREFIX =/usr\nif (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    set(CMAKE_INSTALL_PREFIX \"/usr\")\nendif()\n\ninclude(GNUInstallDirs)\ninclude(packaging)\n\nset_git_info()\n\n# Output all libraries and executable to one folder\nset(COMPILE_OUTPUT_FOLDER \"${CMAKE_SOURCE_DIR}/bin/${CMAKE_SYSTEM_PROCESSOR}/${CMAKE_BUILD_TYPE}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${COMPILE_OUTPUT_FOLDER}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${COMPILE_OUTPUT_FOLDER}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${COMPILE_OUTPUT_FOLDER}\")\nset(CMAKE_PDB_OUTPUT_DIRECTORY \"${COMPILE_OUTPUT_FOLDER}\")\nset(CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY \"${COMPILE_OUTPUT_FOLDER}\")\n\nif (DISABLE_PORTABLE_MODE)\n    add_compile_definitions(DISABLE_PORTABLE_MODE)\nendif()\n\nset(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)\nset(CMAKE_MACOSX_RPATH TRUE)\n\nmessage(STATUS \"CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}\")\nif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm64\")\n    set(PROJECT_PLATFORM_ARM64 TRUE)\nelseif (CMAKE_SYSTEM_PROCESSOR MATCHES \"armv*\")\n    set(PROJECT_PLATFORM_ARM TRUE)\nelseif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"e2k\")\n    set(PROJECT_PLATFORM_E2K TRUE)\nelseif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64le\")\n    set(PROJECT_PLATFORM_PPC TRUE)\nendif()\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Release\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    set(MASTER_GOLD_DEFAULT_VALUE ON)\nelse()\n    set(MASTER_GOLD_DEFAULT_VALUE OFF)\nendif()\nmessage(STATUS \"CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\n\noption(MASTER_GOLD \"Build with MASTER_GOLD\" ${MASTER_GOLD_DEFAULT_VALUE})\nif (MASTER_GOLD)\n    add_compile_definitions(MASTER_GOLD)\nendif()\nmessage(STATUS \"MASTER_GOLD: ${MASTER_GOLD}\")\n\noption(STATIC_BUILD \"Use static build\" ${MASTER_GOLD})\nif (STATIC_BUILD)\n    # XXX: Uncomment only after build with XRAY_STATIC_BUILD is fixed\n    #add_compile_definitions(XRAY_STATIC_BUILD)\nendif()\nmessage(STATUS \"STATIC_BUILD: ${STATIC_BUILD}\")\n\noption(CMAKE_UNITY_BUILD \"Use unity build\" OFF)\nmessage(STATUS \"CMAKE_UNITY_BUILD: ${CMAKE_UNITY_BUILD}\")\n\nfind_program(CCACHE_FOUND ccache)\nif (CCACHE_FOUND)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    set(ENV{CCACHE_SLOPPINESS} pch_defines,time_macros)\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0 AND NOT PROJECT_PLATFORM_E2K)\n        message(FATAL_ERROR \"Building with a gcc version less than 8.0 is not supported.\")\n    elseif (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0 AND PROJECT_PLATFORM_E2K)\n        message(FATAL_ERROR \"Building with a MCST lcc version less than 1.25 is not supported.\")\n    endif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    # XXX: Remove -fdelayed-template-parsing\n    add_compile_options(\n        -fdelayed-template-parsing\n        -Wno-unused-command-line-argument\n        -Wno-inconsistent-missing-override\n    )\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND NOT XRAY_USE_DEFAULT_CXX_LIB)\n    if (NOT XRAY_CXX_LIB)\n        include(CheckCXXCompilerFlag)\n        CHECK_CXX_COMPILER_FLAG(\"-stdlib=libc++\" LIBCPP_AVAILABLE)\n        CHECK_CXX_COMPILER_FLAG(\"-stdlib=libstdc++\" LIBSTDCPP_AVAILABLE)\n\n        if (LIBCPP_AVAILABLE)\n            set(XRAY_CXX_LIB \"libc++\" CACHE STRING \"\" FORCE)\n        elseif (LIBSTDCPP_AVAILABLE)\n            set(XRAY_CXX_LIB \"libstdc++\" CACHE STRING \"\" FORCE)\n        else()\n            message(\"Neither libstdc++ nor libc++ are available. Hopefully, system has another custom stdlib?\")\n        endif()\n    endif()\n\n    if (XRAY_CXX_LIB STREQUAL \"libstdc++\")\n        add_compile_options(-stdlib=libstdc++)\n    elseif (XRAY_CXX_LIB STREQUAL \"libc++\")\n        add_compile_options(-stdlib=libc++)\n        if (CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n            add_compile_options(-lcxxrt)\n        else()\n            add_compile_options(-lc++abi)\n        endif()\n    endif()\nendif()\n\nadd_compile_options(-Wno-attributes)\nif (APPLE)\n    add_compile_options(-Wl,-undefined,error)\nelse()\n    add_compile_options(-Wl,--no-undefined)\nendif()\n\n# TODO test\noption(USE_ADDRESS_SANITIZER \"Use AddressSanitizer\" OFF)\n\nif (USE_ADDRESS_SANITIZER)\n    add_compile_options(\n        -fsanitize=address\n        -fsanitize=leak\n        -fsanitize=undefined\n        -fno-omit-frame-pointer\n        -fno-optimize-sibling-calls\n        -fno-sanitize=vptr\n    )\n\n    add_link_options(\n        $<$<CXX_COMPILER_ID:Clang>:-shared-libasan>\n    )\nendif()\n\nmessage(STATUS \"USE_ADDRESS_SANITIZER: ${USE_ADDRESS_SANITIZER}\")\n\noption(USE_LTO \"Use Link Time Optimization\" ${MASTER_GOLD})\nif (USE_LTO)\n    include(CheckIPOSupported)\n    check_ipo_supported(RESULT LTO_SUPPORTED)\n\n    if (LTO_SUPPORTED)\n        # With clang cmake only enables '-flto=thin' but we want full LTO\n        if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n            add_compile_options(-flto=full)\n        else()\n            set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)\n        endif()\n    endif()\nendif()\n\nmessage(STATUS \"USE_LTO: ${USE_LTO}\")\n\nif (PROJECT_PLATFORM_ARM)\n    add_compile_options(-mfpu=neon)\nelseif (PROJECT_PLATFORM_ARM64)\n    #add_compile_options()\nelseif (PROJECT_PLATFORM_E2K)\n    add_compile_options(-Wno-unknown-pragmas)\nelseif (PROJECT_PLATFORM_PPC)\n    add_compile_options(\n        -maltivec\n        -mabi=altivec\n    )\n    add_compile_definitions(NO_WARN_X86_INTRINSICS)\nelse()\n    add_compile_options(\n        -mfpmath=sse\n        -msse3\n    )\nendif()\n\nif (XRAY_LINKER)\n    add_link_options(-fuse-ld=${XRAY_LINKER})\nendif()\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    add_compile_definitions(\n        DEBUG\n        MIXED\n    )\n    add_compile_options(-Og)\nendif()\n\nadd_compile_definitions(\n    _MT\n    _CPPUNWIND\n)\n\nif (NOT WIN32)\n    find_package(SDL2 2.0.18 REQUIRED)\n    # Fix to support older SDL2\n    # https://github.com/OpenXRay/xray-16/issues/1595\n    if (NOT TARGET SDL2::SDL2 AND DEFINED SDL2_LIBRARIES)\n        add_library(SDL2::SDL2 UNKNOWN IMPORTED)\n        set_target_properties(\n            SDL2::SDL2 PROPERTIES\n            IMPORTED_LOCATION \"${SDL2_LIBRARIES}\"\n            INTERFACE_INCLUDE_DIRECTORIES \"${SDL2_INCLUDE_DIRS}\"\n        )\n    endif()\n    find_package(OpenAL REQUIRED)\n    find_package(JPEG)\n    find_package(Ogg REQUIRED)\n    find_package(Vorbis REQUIRED)\n    find_package(Theora REQUIRED)\n    find_package(LZO REQUIRED)\n    find_package(mimalloc NAMES mimalloc2 mimalloc2.0 mimalloc)\nendif()\n\n# Memory allocator option\nif (mimalloc_FOUND)\n    set(MEMORY_ALLOCATOR \"mimalloc\" CACHE STRING \"Use specific memory allocator (mimalloc/standard)\")\nelse()\n    set(MEMORY_ALLOCATOR \"standard\" CACHE STRING \"Use specific memory allocator (mimalloc/standard)\")\nendif()\nset_property(CACHE MEMORY_ALLOCATOR PROPERTY STRINGS \"mimalloc\" \"standard\")\n\nif (MEMORY_ALLOCATOR STREQUAL \"mimalloc\" AND NOT mimalloc_FOUND)\n    message(FATAL_ERROR \"mimalloc allocator requested but not found. Please, install mimalloc package or select standard allocator.\")\nendif()\n\nmessage(\"Using ${MEMORY_ALLOCATOR} memory allocator\")\n\noption(XRAY_USE_LUAJIT \"Use LuaJIT\" ON)\n\nadd_subdirectory(Externals)\n\nadd_compile_options(\n    -Wall\n    #-Werror\n    -Wextra\n    #-pedantic\n    -Wno-unknown-pragmas\n    -Wno-strict-aliasing\n    -Wno-parentheses\n    -Wno-unused-label\n    -Wno-unused-parameter\n    -Wno-switch\n    #-Wno-padded\n    #-Wno-c++98-compat\n    #-Wno-c++98-compat-pedantic\n    #-Wno-c++11-compat\n    #-Wno-c++11-compat-pedantic\n    #-Wno-c++14-compat\n    #-Wno-c++14-compat-pedantic\n    #-Wno-newline-eof\n    $<$<CXX_COMPILER_ID:GNU>:$<$<COMPILE_LANGUAGE:CXX>:-Wno-class-memaccess>>\n    $<$<CXX_COMPILER_ID:GNU>:$<$<COMPILE_LANGUAGE:CXX>:-Wno-interference-size>>\n)\n\nadd_subdirectory(src)\nadd_subdirectory(res)\nadd_subdirectory(misc)\n\nget_property(LIB64 GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS)\n\nif (\"${LIB64}\" STREQUAL \"TRUE\")\n    set(LIBSUFFIX 64)\nelse()\n    set(LIBSUFFIX \"\")\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.6279296875,
          "content": "It is a place to share ideas on what to implement, gather people that want to work on the engine,\nand work on the source code.\n\nIf you find a bug or have an enhancement request, file an [Issue](https://github.com/openxray/xray-16/issues).\n\nPull requests appreciated! However, the following things should be taken into consideration:\n* We want to keep the game as close as possible to the vanilla game, so instead of introducing new gameplay features,\n  consider adding non-gameplay features, fixing bugs, improving performance and code quality\n* Major changes should be discussed before implementation\n* Follow the [procedures](doc/procedure)\n"
        },
        {
          "name": "Externals",
          "type": "tree",
          "content": null
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.1298828125,
          "content": "All source code included with this distribution, unless declared otherwise,\nis commercial GSC Game World proprietary code.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither binary nor source code redistributions may be used for any\ncommercial purposes.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.9130859375,
          "content": "<div align=\"center\">\n  <p>\n    <a href=\"https://github.com/OpenXRay\">\n      <img src=\"misc/media/OpenXRayCover.png\" alt=\"Open for everyone\" />\n    </a>\n  </p>\n</div>\n\n<h1 align=\"center\">\n  OpenXRay\n</h1>\n\n**OpenXRay** is an improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World.\n\n## Goals\n1. Make it a drop-in replacement for original engine.\n    1. Aim at 99% compatibility and same behaviour, where possible.\n    2. Compile engine into a single executable file that you can just drop into `bin` folder. (see [#210](https://github.com/OpenXRay/xray-16/issues/210))\n2. Support all three games in the series: SOC/CS/COP. (see [Supported games](#supported-games) below)\n3. Fix original X-Ray Engine bugs that were polluting S.T.A.L.K.E.R. series.\n4. Introduce a solid platform for modmakers:\n    1. Add frame/render graph for those who want to add new graphics features.\n    2. Improve performance via refactoring the code, parallelizing the engine, making it multithreaded.\n    3. Add new scripting, development and debugging features.\n    4. New game SDK with new features.\n5. Clean up engine code, make it easily portable to new platforms, minimize platform-specific code.\n6. Enhance player's experience with new graphics, gameplay and other features that can be enabled optionally. (by default, we stay close to vanilla)\n\n## Main differences from original X-Ray are:\n- Support for 64-bit.\n- Support for ARM, ARM64, E2K (Elbrus 2000), PPC64LE.\n- Works on Linux, macOS, OSL (Elbrus OS).\n- New OpenGL renderer. (currently, requires OpenGL 4.1 minimum, lowering to at least OpenGL 3.3 is planned)\n- Improved performance, better FPS.\n- Original bugs fixes.\n- New features for modmakers.\n- Gamepad support. (not yet finished, but you can try already, see [#943](https://github.com/OpenXRay/xray-16/issues/943))\n- New game SDK being currently developed. (see [Game Editor](https://github.com/OpenXRay/xray-16/wiki/[EN]-Game-Editor))\n\nYou can see the detailed differences table [here](https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-Differences-from-original-X‐Ray)\n\n## Supported games\nOpenXRay is based on X-Ray 1.6.02, used in S.T.A.L.K.E.R.: Call of Pripyat, so initially it supported only this game. <br>\nCurrently, we are working on support for all three games in the series.\n|Call of Pripyat|Clear Sky|Shadow of Chernobyl|\n|---|---|---|\n|Yes|Release candidate (see [#382](https://github.com/OpenXRay/xray-16/issues/382)).<br>Minor bugs possible, but game is stable finishable.| **Not supported** yet (see [#392](https://github.com/OpenXRay/xray-16/issues/392))|\n\n## Documentation:\nMake sure to visit our [wiki](https://github.com/OpenXRay/xray-16/wiki).\n|How to|||\n|---|---|---|\n|Build and setup|[On Windows](https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-build-and-setup-on-Windows)|[On Linux](https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-build-and-setup-on-Linux)|\n|Install and play|[On Windows](https://github.com/OpenXRay/xray-16/wiki/%5BEN%5D-How-to-install-and-play)|-|\n\n## Contributing\nAll contributions are more than welcomed. There are several ways how you can contribute:\n\n### Community\n[![Discord](https://img.shields.io/discord/410170555619082240?label=Discord)](https://discord.gg/sjRMQwv)\n\nPlay and enjoy the game, [file an Issue](https://github.com/OpenXRay/xray-16/issues/new/choose) when you encounter any bugs, or you have an enhancement request.\n\nJoin us on our [Discord](https://discord.gg/sjRMQwv), subscribe to our [YouTube channel](https://www.youtube.com/OpenXRay), join our [VK group](https://vk.com/openxray), leave a comment, put a like and communicate there! <br>\nAlso you can put a star on this repository :)\n\n### Development\n[![GitHub Actions Build Status](https://github.com/OpenXRay/xray-16/actions/workflows/cibuild.yml/badge.svg)](https://github.com/OpenXRay/xray-16/actions/workflows/cibuild.yml)\n[![Contributors](https://img.shields.io/github/contributors/OpenXRay/xray-16.svg?label=Contributors)](https://github.com/OpenXRay/xray-16/graphs/contributors)\n\nJoin our efforts in making our beloved game better, send pull requests, participate in discussions and code reviews!\n\nIt is a place to share ideas on what to implement, gather people that want to work on the engine, and work on the source code. However, the following things should be taken into consideration:\n* We want to keep the game close to the vanilla, so if you want to introduce new gameplay features, make sure it is optional, and doesn't break compatibility with original game resources (i.e. everything in `gamedata` folder and `.db*`/`.xdb` archives). You also may want to add non-gameplay features, fix bugs, or improve engine performance and code quality.\n* Major changes should be discussed before implementation.\n\nTake a look at our [Issues](https://github.com/openxray/xray-16/issues) page:\n* See issues labeled as [good first issue](https://github.com/OpenXRay/xray-16/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22Good+first+issue%22) to get familiar with the engine code in practice.\n* You may also want to look at issues labeled as [help wanted](https://github.com/OpenXRay/xray-16/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22Help+wanted%22). Some of them are difficult ones, though.\n\nThe `dev` branch is the default and base branch for the project. It is used for development, and all pull requests should go there. But be aware that this branch sometimes may be broken, and we can only rarely do force pushes to this branch.\n\nBe advised that this is a community project not sanctioned by GSC Game World in any way – and they remain the copyright holders\nof all the original source code and S.T.A.L.K.E.R. franchise. However, they know about many community projects, including this, and support the S.T.A.L.K.E.R. community efforts to make the game better.\n\n### Funding\n[![Financial Contributors](https://opencollective.com/openxray/tiers/badge.svg?label=Financial%20contributors)](https://opencollective.com/openxray) [![Sponsors](https://img.shields.io/github/sponsors/openxray?color=brightgreen&label=Sponsors)](https://github.com/sponsors/OpenXRay) [![Patreon](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.patreon.com%2Fapi%2Fcampaigns%2F5950725&query=data.attributes.patron_count&suffix=%20Patrons&color=success&label=Patreon&style=flat)](https://patreon.com/openxray)\n\nYou may provide financial support for this project by donating via different ways:\n* [Boosty](https://boosty.to/openxray) – a large part of the team is located in Russia, if you have an ability to donate through Boosty, please use it, since we don't have an ability to withdraw funds from services like Patreon, etc. to our local Russian banking cards/accounts.\n* [GitHub Sponsors](https://github.com/sponsors/OpenXRay), [Patreon](https://patreon.com/openxray), [Open Collective](https://opencollective.com/openxray) – funds raised from these services will be used to support our developers outside of Russia, and also we may use them to pay for paid services on GitHub, AppVeyor, etc.\n* BTC: 363ZUoWcQe9fDvRPK9Kee2YuPdyhSFQpr2\n* ETH: 0x45a4fe8566e76946591e1eeabf190aa09b1cdb66\n* TRX: TGx7QAhTPsRcwnb4mwCtNDU7NF6kuoACpt\n* Please, contact @xottab_duty in [our Discord](discord.gg/sjRMQwv) if you would like to use another cryptocurrency.\n\nThank you for your support!\n\n## Thanks\n* [GSC Game World](https://gsc-game.com/) – for creating S.T.A.L.K.E.R. and supporting the community;\n* Loxotron – for making the engine sources available;\n* [All the OpenXRay contributors](https://github.com/OpenXRay/xray-16/graphs/contributors) – for making the project better.\n  * The first OpenXRay team (2014-2017) – for being at the origins of the project.\n    * [nitrocaster](https://github.com/nitrocaster) – original project founder.\n    * [Kaffeine](https://github.com/Kaffeine) – initial work on the Linux port, refactoring, polishing.\n    * [CrossVR](https://github.com/CrossVR) (Armada651) – creation of the OpenGL renderer, work on the build system, other project maintenance work.\n    * [andrew-boyarshin](https://github.com/andrew-boyarshin) – work on the build system.\n    * [CasualDev242](https://github.com/CasualDev242) (Swartz27) – work on renderer features.\n    * [awdavies](https://github.com/awdavies) – project maintenance work.\n  * The second OpenXRay team (2017-now) – for continuing work on the project.\n    * [Xottab_DUTY](https://github.com/Xottab-DUTY) – current project leader.\n    * [intorr](https://github.com/intorr) – work on the project quality. (memory leaks, refactoring, optimizations)\n    * [eagleivg](https://github.com/eagleivg) – main part of the work on Linux port.\n    * [q4a](https://github.com/q4a) – main part of the work on Linux port.\n    * [SkyLoader](https://github.com/SkyLoaderr) – OpenGL renderer improvements and polishing, other project work.\n    * [qweasdd136963](https://github.com/qweasdd136963) – supporting the [OXR_COC](https://github.com/qweasdd136963/OXR_CoC) project (Call of Chernobyl port to latest OpenXRay), other project work on new features, refactoring and bug fixing.\n    * JohnDoe_71Rus – our regular tester.\n    * [Chip_exe](https://github.com/007exe) – work on Linux port, maintaining AUR package, our regular tester.\n    * [a1batross](https://github.com/a1batross) – work on Linux port.\n    * [The Sin!](https://github.com/FreeZoneMods) – new features, refactoring, bug fixing polishing.\n    * [Zegeri](https://github.com/Zegeri) – work on Linux port, code quality, fixes, polishing.\n    * [drug007](https://github.com/drug007) – work on Linux port.\n    * [vTurbine](https://github.com/vTurbine) – work on renderer unification, refactoring, polishing.\n    * [Zigatun](https://github.com/Zigatun) – work on ARM port.\n    * [Masterkatze](https://github.com/Masterkatze) – work on the build system, bug fixing.\n    * [Chugunov Roman](https://github.com/ChugunovRoman) – work on [porting Call of Chernobyl to latest OpenXRay](https://github.com/ChugunovRoman/xray-16), extending functionality for modmakers.\n    * [yohjimane](https://github.com/yohjimane) – work on original game bugs fixes and new features.\n  * Other contributors:\n    * [alexgdi](https://github.com/alexgdi) – work on organizing project infrastructure, external dependencies.\n    * [NeoAnomaly](https://github.com/NeoAnomaly) – help with debug functionality on Windows.\n    * [RainbowZerg](https://github.com/RainbowZerg) – work on the renderer features, bug fixing.\n    * [FozeSt](https://github.com/FozeSt) – help with some fixes and features.\n    * [justtails](https://github.com/justtails) (mrnotbadguy) – work on gamepads support and bug fixing.\n    * [devnexen](https://github.com/devnexen) – work on FreeBSD support and portability.\n    * [vamit611](https://github.com/vamit611) – work on code quality and bug fixes.\n    * [ZeeWanderer](https://github.com/ZeeWanderer) – work on the build system.\n    * [GeorgeIvlev](https://github.com/GeorgeIvlev) – work on the build system, bug fixing.\n    * [r-a-sattarov](https://github.com/r-a-sattarov) – work on portability and E2K support.\n    * [TmLev](https://github.com/TmLev) – work on code quality and Docker support.\n    * [Plotja](https://github.com/Plotja) – work on new gameplay features, bug fixes, portability, polishing.\n    * [jjdredd](https://github.com/jjdredd) – work on various useful features.\n    * [dimhotepus](https://github.com/dimhotepus) – work on code quality.\n    * [HeapRaid](https://github.com/HeapRaid) – work on renderer cleanup, code quality, portability.\n    * [OPNA2608](https://github.com/OPNA2608) – maintaining NixOS package, work on portability.\n    * [kosumosu](https://github.com/kosumosu) – work on portability, including E2K support, and renderer features.\n    * [Graff46](https://github.com/Graff46) – work on various scripting features.\n    * [vertver](https://github.com/vertver) – work on macOS support.\n    * [Lnd-stoL](https://github.com/Lnd-stoL) – work on macOS support.\n    * [GermanAizek](https://github.com/GermanAizek) – work on code quality, finding and fixing vanilla bugs.\n    * [dasehak](https://github.com/dasehak) – work on FreeBSD support, finding and fixing vanilla bugs.\n    * [Hrust](https://github.com/Hrusteckiy) – work various features, including UI, CS/SOC support and bug fixes.\n    * [johncurley](https://github.com/johncurley) – work on EFX, bugs and portability.\n    * [v2v3v4](https://github.com/v2v3v4) – work on physics, useful help with the engine and showing sexy screenshots and videos about his X-Ray fork, but refusing to send pull requests :D\n    * [Neloreck](https://github.com/Neloreck) – work on extending Lua scripting features.\n    * [sobkas](https://github.com/sobkas) – work on code quality and bug fixing.\n    * [AMS21](https://github.com/AMS21) – work on CMake, code quality, and project standards and infrastructure.\n    * [olefirenque](https://github.com/olefirenque) – work on multithreading and code optimization.\n    * [tsmp](https://github.com/tsmp) – work on performance and code optimization.\n* Particular projects:\n  * [Oxygen](https://github.com/xrOxygen) – for being our friends and giving tips and help with new features, optimizations, bug fixes, etc.\n  * [Shoker Weapon Mod](https://github.com/ShokerStlk/xray-16-SWM) and [Shoker](https://github.com/ShokerStlk) – for contributing new features, bug fixing.\n  * [Im-Dex](https://github.com/Im-dex/xray-162) – for the work on the engine.\n  * [OGSR](https://github.com/OGSR/OGSR-Engine) – for amazing work on Shadow of Chernobyl.\n  * [Call of Chernobyl](https://github.com/revolucas/CoC-Xray) and its contributors – for useful new features, bug fixes and optimizations.\n  * Lost Alpha – for their effort on restoring the old game concept.\n  * Lost Alpha DC – for continuing work on Lost Alpha.\n* Individuals:\n  * [tamlin-mike](https://github.com/tamlin-mike) – for work on the build system.\n  * [Vincent](https://github.com/0xBADEAFFE) – for work on the Linux port.\n  * [abramcumner](https://github.com/abramcumner) – for useful fixes and additions.\n  * [Morrey](https://github.com/morrey) – for work on Clear Sky support and his Return to Clear Sky mod.\n* Companies:\n  * [CoderGears](https://www.cppdepend.com) – thanks for providing a [free Pro Licence for CppDepend](https://www.cppdepend.com/cppdependfoross), an amazing and powerful tool for C and C++. <br>\n    [![CppDepend logo](https://www.cppdepend.com/images/cppdependlogo.png)](https://www.cppdepend.com)\n  * [PVS-Studio LLC](https://pvs-studio.com/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source) – thanks for proving us a [free licence](https://pvs-studio.ru/ru/order/open-source-license/?utm_source=website&utm_medium=github&utm_campaign=open_source) for PVS-Studio, a static analyzer for C, C++, C#, and Java code.\n\nIf your work is being used in our project and you are not mentioned here or in the [contributors page](https://github.com/OpenXRay/xray-16/graphs/contributors), please, write to us and we will add you. Or send us a pull request with you added to this list ;)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.087890625,
          "content": "version: '{build}'\n\npull_requests:\n  do_not_increment_build_number: true\n\nskip_tags: true\nskip_branch_with_pr: true\n\nimage:\n- Visual Studio 2022\n\nconfiguration:\n- Debug\n- Mixed\n- Release\n- Release Master Gold\n\nplatform:\n- x64\n\nbranches:\n  except:\n    - dependabot/*\n\ncache:\n- src/packages -> **/packages.config\n\nfor:\n-\n  before_build:\n    - git submodule update --init --recursive\n    - nuget restore src\\engine.sln\n\n  build:\n    project: src/engine.sln\n    parallel: true\n    verbosity: minimal\n\n  after_build:\n    - cmd: misc/windows/xr_pack_build.cmd \"%CONFIGURATION%\" \"%PLATFORM%\"\n\n  artifacts:\n    - path: res/OpenXRay.*.7z\n      name: OpenXRay.*.7z\n    - path: res/Symbols.*.7z\n      name: Symbols.*.7z\n    - path: res/Utils.*.7z\n      name: Utils.*.7z\n\ntest: off\n\ndeploy:\n- provider: GitHub\n  tag: $(appveyor_build_version)\n  release: OpenXRay (build $(appveyor_build_version))\n  description: $(APPVEYOR_REPO_COMMIT_MESSAGE)\n  auth_token:\n    secure: kGVniXDR926BfVcA97y25BzALbijvgboBsozZzY9yc8RPz15Q4YG474h7vl14/J1\n  artifact:\n    OpenXRay.*.7z, Symbols.*.7z, Utils.*.7z\n  draft: true\n  force_update: true\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vs-chromium-project.txt",
          "type": "blob",
          "size": 0.384765625,
          "content": "[SourceExplorer.ignore]\n.git/\nbin/\nbuild/\nsrc/_CppDependOut\n*.suo\n.hash_cache.txt\n\n[SearchableFiles.include]\n*.cpp\n*.cxx\n*.cc\n*.c\n*.hpp\n*.hxx\n*.hh\n*.h\n*.inl\n\n*.hlsl\n*.glsl\n*.vs\n*.ps\n*.gs\n*.cs\n*.hs\n*.ds\n*.s\n\n*.ltx\n*.script\n*.txt\n*.md\n\n*.yml\n\n*.xml\n*.cmake\n*.natvis\n*.props\n*.vcxproj\n*.vcxproj.filters\n*.sln\n\n*.cs\n*.py\n\n*.bat\n*.cmd\n*.sh\n\n[SearchableFiles.ignore]\n*.pdb\n*.exe\n*.dll\n*.lib\n*.so\n*.o\n"
        }
      ]
    }
  ]
}