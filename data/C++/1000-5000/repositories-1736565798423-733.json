{
  "metadata": {
    "timestamp": 1736565798423,
    "page": 733,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leggedrobotics/darknet_ros",
      "stars": 2249,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0849609375,
          "content": "[submodule \"darknet\"]\n\tpath = darknet\n\turl = https://github.com/leggedrobotics/darknet\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.513671875,
          "content": "Copyright (c) 2017, Marko Bjelonic, Robotic Systems Lab, ETH Zurich\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the copyright holder nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3623046875,
          "content": "# YOLO ROS: Real-Time Object Detection for ROS\n\n## Overview\n\nThis is a ROS package developed for **object detection in camera images**. You only look once (YOLO) is a state-of-the-art, real-time object detection system. In the following ROS package you are able to use **YOLO (V3) on GPU and CPU**. The pre-trained model of the convolutional neural network is able to detect pre-trained classes including the data set from VOC and COCO, or you can also create a network with your own detection objects. For more information about YOLO, Darknet, available training data and training YOLO see the following link: [YOLO: Real-Time Object Detection](http://pjreddie.com/darknet/yolo/).\n\nThe YOLO packages have been tested under **ROS Noetic** and **Ubuntu 20.04**. Note: We also provide branches that work under **ROS Melodic**, **ROS Foxy** and **ROS2**.\n\nThis is research code, expect that it changes often and any fitness for a particular purpose is disclaimed.\n\n**Author: [Marko Bjelonic](https://www.markobjelonic.com), marko.bjelonic@mavt.ethz.ch**\n\n**Affiliation: [Robotic Systems Lab](http://www.rsl.ethz.ch/), ETH Zurich**\n\n![Darknet Ros example: Detection image](darknet_ros/doc/test_detection.png)\n![Darknet Ros example: Detection image](darknet_ros/doc/test_detection_anymal.png)\n\nBased on the [Pascal VOC](https://pjreddie.com/projects/pascal-voc-dataset-mirror/) 2012 dataset, YOLO can detect the 20 Pascal object classes:\n\n- person\n- bird, cat, cow, dog, horse, sheep\n- aeroplane, bicycle, boat, bus, car, motorbike, train\n- bottle, chair, dining table, potted plant, sofa, tv/monitor\n\nBased on the [COCO](http://cocodataset.org/#home) dataset, YOLO can detect the 80 COCO object classes:\n\n- person\n- bicycle, car, motorbike, aeroplane, bus, train, truck, boat\n- traffic light, fire hydrant, stop sign, parking meter, bench\n- cat, dog, horse, sheep, cow, elephant, bear, zebra, giraffe\n- backpack, umbrella, handbag, tie, suitcase, frisbee, skis, snowboard, sports ball, kite, baseball bat, baseball glove, skateboard, surfboard, tennis racket\n- bottle, wine glass, cup, fork, knife, spoon, bowl\n- banana, apple, sandwich, orange, broccoli, carrot, hot dog, pizza, donut, cake\n- chair, sofa, pottedplant, bed, diningtable, toilet, tvmonitor, laptop, mouse, remote, keyboard, cell phone, microwave, oven, toaster, sink, refrigerator, book, clock, vase, scissors, teddy bear, hair drier, toothbrush\n\n## Citing\n\nThe YOLO methods used in this software are described in the paper: [You Only Look Once: Unified, Real-Time Object Detection](https://arxiv.org/abs/1506.02640).\n\nIf you are using YOLO V3 for ROS, please add the following citation to your publication:\n\nM. Bjelonic\n**\"YOLO ROS: Real-Time Object Detection for ROS\"**,\nURL: https://github.com/leggedrobotics/darknet_ros, 2018.\n\n    @misc{bjelonicYolo2018,\n      author = {Marko Bjelonic},\n      title = {{YOLO ROS}: Real-Time Object Detection for {ROS}},\n      howpublished = {\\url{https://github.com/leggedrobotics/darknet_ros}},\n      year = {2016--2018},\n    }\n\n## Installation\n\n### Dependencies\n\nThis software is built on the Robotic Operating System ([ROS]), which needs to be [installed](http://wiki.ros.org) first. Additionally, YOLO for ROS depends on following software:\n\n- [OpenCV](http://opencv.org/) (computer vision library),\n- [boost](http://www.boost.org/) (c++ library),\n\n### Building\n\n[![Build Status](https://ci.leggedrobotics.com/buildStatus/icon?job=github_leggedrobotics/darknet_ros/master)](https://ci.leggedrobotics.com/job/github_leggedrobotics/job/darknet_ros/job/master/)\n\nIn order to install darknet_ros, clone the latest version using SSH (see [how to set up an SSH key](https://confluence.atlassian.com/bitbucket/set-up-an-ssh-key-728138079.html)) from this repository into your catkin workspace and compile the package using ROS.\n\n    cd catkin_workspace/src\n    git clone --recursive git@github.com:leggedrobotics/darknet_ros.git\n    cd ../\n\nTo maximize performance, make sure to build in *Release* mode. You can specify the build type by setting\n\n    catkin_make -DCMAKE_BUILD_TYPE=Release\n\nor using the [Catkin Command Line Tools](http://catkin-tools.readthedocs.io/en/latest/index.html#)\n\n    catkin build darknet_ros -DCMAKE_BUILD_TYPE=Release\n\nDarknet on the CPU is fast (approximately 1.5 seconds on an Intel Core i7-6700HQ CPU @ 2.60GHz Ã— 8) but it's like 500 times faster on GPU! You'll have to have an Nvidia GPU and you'll have to install CUDA. The CMakeLists.txt file automatically detects if you have CUDA installed or not. CUDA is a parallel computing platform and application programming interface (API) model created by Nvidia. If you do not have CUDA on your System the build process will switch to the CPU version of YOLO. If you are compiling with CUDA, you might receive the following build error:\n\n    nvcc fatal : Unsupported gpu architecture 'compute_61'.\n\nThis means that you need to check the compute capability (version) of your GPU. You can find a list of supported GPUs in CUDA here: [CUDA - WIKIPEDIA](https://en.wikipedia.org/wiki/CUDA#Supported_GPUs). Simply find the compute capability of your GPU and add it into darknet_ros/CMakeLists.txt. Simply add a similar line like\n\n    -O3 -gencode arch=compute_62,code=sm_62\n\n### Download weights\n\nThe yolo-voc.weights and tiny-yolo-voc.weights are downloaded automatically in the CMakeLists.txt file. If you need to download them again, go into the weights folder and download the two pre-trained weights from the COCO data set:\n\n    cd catkin_workspace/src/darknet_ros/darknet_ros/yolo_network_config/weights/\n    wget http://pjreddie.com/media/files/yolov2.weights\n    wget http://pjreddie.com/media/files/yolov2-tiny.weights\n\nAnd weights from the VOC data set can be found here:\n\n    wget http://pjreddie.com/media/files/yolov2-voc.weights\n    wget http://pjreddie.com/media/files/yolov2-tiny-voc.weights\n\nAnd the pre-trained weight from YOLO v3 can be found here:\n\n    wget http://pjreddie.com/media/files/yolov3-tiny.weights\n    wget http://pjreddie.com/media/files/yolov3.weights\n\nThere are more pre-trained weights from different data sets reported [here](https://pjreddie.com/darknet/yolo/).\n\n### Use your own detection objects\n\nIn order to use your own detection objects you need to provide your weights and your cfg file inside the directories:\n\n    catkin_workspace/src/darknet_ros/darknet_ros/yolo_network_config/weights/\n    catkin_workspace/src/darknet_ros/darknet_ros/yolo_network_config/cfg/\n\nIn addition, you need to create your config file for ROS where you define the names of the detection objects. You need to include it inside:\n\n    catkin_workspace/src/darknet_ros/darknet_ros/config/\n\nThen in the launch file you have to point to your new config file in the line:\n\n    <rosparam command=\"load\" ns=\"darknet_ros\" file=\"$(find darknet_ros)/config/your_config_file.yaml\"/>\n\n### Unit Tests\n\nRun the unit tests using the [Catkin Command Line Tools](http://catkin-tools.readthedocs.io/en/latest/index.html#)\n\n    catkin build darknet_ros --no-deps --verbose --catkin-make-args run_tests\n\nYou will see the image above popping up.\n\n## Basic Usage\n\nIn order to get YOLO ROS: Real-Time Object Detection for ROS to run with your robot, you will need to adapt a few parameters. It is the easiest if duplicate and adapt all the parameter files that you need to change from the `darknet_ros` package. These are specifically the parameter files in `config` and the launch file from the `launch` folder.\n\n## Nodes\n\n### Node: darknet_ros\n\nThis is the main YOLO ROS: Real-Time Object Detection for ROS node. It uses the camera measurements to detect pre-learned objects in the frames.\n\n### ROS related parameters\n\nYou can change the names and other parameters of the publishers, subscribers and actions inside `darknet_ros/config/ros.yaml`.\n\n#### Subscribed Topics\n\n* **`/camera_reading`** ([sensor_msgs/Image])\n\n    The camera measurements.\n\n#### Published Topics\n\n* **`object_detector`** ([std_msgs::Int8])\n\n    Publishes the number of detected objects.\n\n* **`bounding_boxes`** ([darknet_ros_msgs::BoundingBoxes])\n\n    Publishes an array of bounding boxes that gives information of the position and size of the bounding box in pixel coordinates.\n\n* **`detection_image`** ([sensor_msgs::Image])\n\n    Publishes an image of the detection image including the bounding boxes.\n\n#### Actions\n\n* **`camera_reading`** ([sensor_msgs::Image])\n\n    Sends an action with an image and the result is an array of bounding boxes.\n\n### Detection related parameters\n\nYou can change the parameters that are related to the detection by adding a new config file that looks similar to `darknet_ros/config/yolo.yaml`.\n\n* **`image_view/enable_opencv`** (bool)\n\n    Enable or disable the open cv view of the detection image including the bounding boxes.\n\n* **`image_view/wait_key_delay`** (int)\n\n    Wait key delay in ms of the open cv window.\n\n* **`yolo_model/config_file/name`** (string)\n\n    Name of the cfg file of the network that is used for detection. The code searches for this name inside `darknet_ros/yolo_network_config/cfg/`.\n\n* **`yolo_model/weight_file/name`** (string)\n\n    Name of the weights file of the network that is used for detection. The code searches for this name inside `darknet_ros/yolo_network_config/weights/`.\n\n* **`yolo_model/threshold/value`** (float)\n\n    Threshold of the detection algorithm. It is defined between 0 and 1.\n\n* **`yolo_model/detection_classes/names`** (array of strings)\n\n    Detection names of the network used by the cfg and weights file inside `darknet_ros/yolo_network_config/`.\n"
        },
        {
          "name": "darknet",
          "type": "commit",
          "content": null
        },
        {
          "name": "darknet_ros",
          "type": "tree",
          "content": null
        },
        {
          "name": "darknet_ros_msgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jenkins-pipeline",
          "type": "blob",
          "size": 0.0556640625,
          "content": "library 'continuous_integration_pipeline'\nciPipeline(\"\")\n"
        }
      ]
    }
  ]
}