{
  "metadata": {
    "timestamp": 1736565346124,
    "page": 170,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ROCm/HIP",
      "stars": 3826,
      "defaultBranch": "amd-staging",
      "files": [
        {
          "name": ".azuredevops",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2529296875,
          "content": "Language: Cpp\nBasedOnStyle: Google\nAlignEscapedNewlinesLeft: false\nAlignOperands: false\nColumnLimit: 100\nAlwaysBreakTemplateDeclarations: false\nDerivePointerAlignment: false\nIndentFunctionDeclarationAfterType: false\nMaxEmptyLinesToKeep: 2\nSortIncludes: false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.611328125,
          "content": "# Set the default behavior, in case people don't have core.autolf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to have LF line endings on checkout.\n*.c text eol=lf\n*.cpp text eol=lf\n*.cc text eol=lf\n*.h text eol=lf\n*.hpp text eol=lf\n*.txt text eol=lf\n\n# Define files to support auto-remove trailing white space\n# Need to run the command below, before add modified file(s) to the staging area\n# git config filter.trimspace.clean 'sed -e \"s/[[:space:]]*$//g\"'\n*.cpp filter=trimspace\n*.c filter=trimspace\n*.h filter=trimspacecpp\n*.hpp filter=trimspace\n*.md filter=trimspace\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4638671875,
          "content": ".*\n!.gitignore\n*.o\n*.exe\n*.swp\nlib\npackages\nbuild\nbin/hipInfo\nbin/hipBusBandwidth\nbin/hipDispatchLatency\nbin/hipify-clang\ntags\nsamples/0_Intro/module_api/runKernel.hip.out\nsamples/0_Intro/module_api/vcpy_isa.code\nsamples/0_Intro/module_api/vcpy_isa.hsaco\nsamples/0_Intro/module_api/vcpy_kernel.co\nsamples/0_Intro/module_api/vcpy_kernel.code\nsamples/1_Utils/hipInfo/hipInfo\nsamples/1_Utils/hipBusBandwidth/hipBusBandwidth\nsamples/1_Utils/hipDispatchLatency/hipDispatchLatency\n"
        },
        {
          "name": ".jenkins",
          "type": "tree",
          "content": null
        },
        {
          "name": ".markdownlint-cli2.yaml",
          "type": "blob",
          "size": 0.0517578125,
          "content": "ignores:\n  - RELEASE.md\n  - docs/doxygen/mainpage.md\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.9931640625,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nsphinx:\n   configuration: docs/conf.py\n\nformats: []\n\npython:\n   install:\n   - requirements: docs/sphinx/requirements.txt\n\nconda:\n   environment: docs/environment.yml # needed until ubuntu ships doxygen >= 1.9.8\n\nbuild:\n   os: ubuntu-22.04\n   tools:\n      python: \"mambaforge-22.9\" # needed until ubuntu ships doxygen >= 1.9.8\n   apt_packages:\n     - \"gfortran\" # For pre-processing fortran sources\n     - \"graphviz\" # For dot graphs in doxygen\n   jobs:\n     post_checkout:\n       - if [ -d ../clr ]; then rm -rf ../clr; fi\n       - if [ -d ../ROCR-Runtime ]; then rm -rf ../ROCR-Runtime; fi\n       - git clone --depth=1 --single-branch --branch docs/develop https://github.com/ROCm/clr.git ../clr\n       - git clone --depth=1 --single-branch --branch master       https://github.com/ROCm/ROCR-Runtime.git ../ROCR-Runtime\n     post_build:\n       - rm -rf ../clr\n       - rm -rf ../ROCR-Runtime\n"
        },
        {
          "name": ".wordlist.txt",
          "type": "blob",
          "size": 1.3798828125,
          "content": ".hip_fatbin\nALU\nALUs\nAmgX\nAPU\nAPUs\nAQL\nAXPY\nasm\nAsynchrony\nbacktrace\nBitcode\nbitcode\nbitcodes\nbuiltins\nBuiltins\nCAS\nclr\ncompilable\ncoroutines\nCtx\ncuBLASLt\ncuCtx\nCUDA's\ncuDNN\ncuModule\ndataflow\ndeallocate\ndecompositions\ndenormal\nDereferencing\ndll\nDirectX\nEIGEN\nEIGEN's\nenqueue\nenqueues\nentrypoint\nentrypoints\nenum\nenums\nembeded\nextern\nfatbin\nfatbinary\nfoundationally\nframebuffer\nfrontends\nfnuz\nFNUZ\nfp\ngedit\nGPGPU\nGROMACS\nGWS\nhardcoded\nHC\nhcBLAS\nHIP-Clang\nHIP's\nhipcc\nhipCtx\nhipexamine\nhipified\nHIPify\nhipModule\nhipModuleLaunchKernel\nhipother\nHIPRTC\nicc\nIILE\niGPU\ninlined\ninplace\ninterop\ninteroperation\ninteroperate\ninteroperation\nInterprocess\ninterprocess\nIntrinsics\nintrinsics\nIPC\nIPs\nisa\niteratively\nLapack\nlatencies\nlibc\nlibstdc\nlifecycle\nlinearizing\nLOC\nLUID\nltrace\nmakefile\nMalloc\nmalloc\nMALU\nMiB\nmemset\nmulticore\nmultigrid\nmultithreading\nmultitenant\nMALU\nNaN\nNCCL\nNDRange\nnonnegative\nNOP\nNuma\nNsight\nocp\nomnitrace\noverindex\noverindexing\noversubscription\noverutilized\nparallelizable\npixelated\npragmas\npreallocated\npreconditioners\npredefining\nprefetched\npreprocessor\nprofilers\nPTX\nPyHIP\nqueryable\nprefetching\nquad\nrepresentable\nRMW\nrocgdb\nROCm's\nrocTX\nroundtrip\nRTC\nRTTI\nrvalue\nSAXPY\nscalarizing\nsceneries\nshaders\nSIMT\nsinewave\nSOMA\nSPMV\nstructs\nSYCL\nsyntaxes\ntexel\ntexels\ntradeoffs\ntemplated\ntoolkits\ntransfering\ntypedefs\nunintuitive\nUMM\nunmap\nunmapped\nunmapping\nunregister\nupscaled\nvariadic\nvulkan\nWinGDB\nzc\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.052734375,
          "content": "* @chrispaquot @gandryey @saleelk @mangupta @rakesroy\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.78125,
          "content": "# Contributing to HIP #\n\nWe welcome contributions to the HIP project. Please follow these details to help ensure your contributions will be successfully accepted.\nIf you want to contribute to our documentation, refer to {doc}`Contribute to ROCm docs <rocm:contribute/contributing>`.\n\n## Issue Discussion ##\n\nPlease use the [GitHub Issue](https://github.com/ROCm/HIP/issues) tab to notify us of issues.\n\n* Use your best judgement for issue creation. If your issue is already listed, upvote the issue and\n  comment or post to provide additional details, such as how you reproduced this issue.\n* If you're not sure if your issue is the same, err on the side of caution and file your issue.\n  You can add a comment to include the issue number (and link) for the similar issue. If we evaluate\n  your issue as being the same as the existing issue, we'll close the duplicate.\n* If your issue doesn't exist, use the issue template to file a new issue.\n  * When filing an issue, be sure to provide as much information as possible, including script output so\n    we can collect information about your configuration. This helps reduce the time required to\n    reproduce your issue.\n  * Check your issue regularly, as we may require additional information to successfully reproduce the\n    issue.\n* You may also open an issue to ask questions to the maintainers about whether a proposed change\n  meets the acceptance criteria, or to discuss an idea pertaining to the library.\n\n## Acceptance Criteria ##\n\nHIP is a C++ Runtime API and Kernel Language that allows developers to create portable applications for AMD and NVIDIA GPUs from single source code. Contributors wishing to submit new HIP Features (ie functions, classes, types) should resemble CUDA APIs.\nDifferences or limitations of HIP APIs as compared to CUDA APIs should be clearly documented and described.\nSome guidelines are outlined below:\n\n### Add a new HIP API ###\n\n* Add a translation to the hipify-clang tool ; many examples abound.\n  * For stat tracking purposes, place the API into an appropriate stat category (\"dev\", \"mem\", \"stream\", etc).\n* Add a inlined NVIDIA implementation for the function in /hipnv/include/hip/nvidia_detail/nvidia_hip_runtime_api.h in the repository [hipother](https://github.com/ROCm/hipother).\n  * These are typically headers\n* Add an HIP definition and Doxygen comments for the function in /include/hip/hip_runtime_api.h, in the repository [hip](https://github.com/ROCm/hip).\n  * Source implementation typically go in clr/hipamd/src/hip_*.cpp in the reposotory [clr](https://github.com/ROCm/clr). The implementation involves calls to HIP runtime (ie for hipStream_t).\n\n### Run Unit Tests ###\n\nFor new features or bug fixes, it's mandatory to run associate [hip-tests](https://github.com/ROCm/hip-tests).\nPlease go to the repo and follow the steps.\n\nFor applications and benchmarks outside the hip-tests environment, developments should use a two-step development flow:\n\n* #1. Compile, link, and install HIP. See {ref}`Building the HIP runtime` notes.\n* #2. Relink the target application to include changes in HIP runtime file.\n\n## Coding Style ##\n\n* Code Indentation:\n  * Tabs should be expanded to spaces.\n  * Use 4 spaces indentation.\n* Capitalization and Naming\n  * Prefer camelCase for HIP interfaces and internal symbols.  Note HCC uses _ for separator.\n    This guideline is not yet consistently followed in HIP code * eventual compliance is aspirational.\n  * Member variables should begin with a leading \"_\".  This allows them to be easily distinguished from other variables or functions.\n\n* `{}` placement\n  * namespace should be on same line as `{` and separated by a space.\n  * Single-line if statement should still use `{/}` pair (even though C++ does not require).\n  * For functions, the opening `{` should be placed on a new line.\n  * For if/else blocks, the opening `{` is placed on same line as the if/else. Use a space to separate `{` from if/else. For example,\n\n```console\n    if (foo) {\n        doFoo()\n    } else {\n        doFooElse();\n    }\n```\n\n* Miscellaneous\n  * All references in function parameter lists should be const.\n  * \"ihip\" means internal hip structures.  These should not be exposed through the HIP API.\n  * Keyword TODO refers to a note that should be addressed in long-term.  Could be style issue, software architecture, or known bugs.\n  * FIXME refers to a short-term bug that needs to be addressed.\n\n* `HIP_INIT_API()` should be placed at the start of each top-level HIP API.  This function will make sure the HIP runtime is initialized, and also constructs an appropriate API string for tracing and CodeXL marker tracing. The arguments to HIP_INIT_API should match those of the parent function.\n* `hipExtGetLastError()` can be called as the AMD platform specific API, to return error code from last HIP API called from the active host thread. `hipGetLastError()` and `hipPeekAtLastError()` can also return the last error that was returned by any of the HIP runtime calls in the same host thread.\n* All HIP environment variables should begin with the keyword HIP_\nEnvironment variables should be long enough to describe their purpose but short enough so they can be remembered * perhaps 10-20 characters, with 3-4 parts separated by underscores.\nTo see the list of current environment variables, along with their values, set HIP_PRINT_ENV and run any hip applications on ROCm platform.\nHIPCC or other tools may support additional environment variables which should follow the above convention.\n\n## Pull Request Guidelines ##\n\nBy creating a pull request, you agree to the statements made in the code license section. Your pull request should target the default branch. Our current default branch is the develop branch, which serves as our integration branch.\n\nFollow existing best practice for writing a good Git commit message.\n\nSome tips:\n    http://chris.beams.io/posts/git-commit/\n    https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message\n\nIn particular :\n\n* Use imperative voice, ie \"Fix this bug\", \"Refactor the XYZ routine\", \"Update the doc\".\n  Not : \"Fixing the bug\", \"Fixed the bug\", \"Bug fix\", etc.\n* Subject should summarize the commit.  Do not end subject with a period.  Use a blank line\n  after the subject.\n\n### Deliverables ###\n\nHIP is an open source library. Because of this, we include the following license description at the top of every source file.\nIf you create new source files in the repository, please include this text in them as well (replacing \"xx\" with the digits for the current year):\n\n```cpp\n// Copyright (c) 20xx Advanced Micro Devices, Inc. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n```\n\n### Process ###\n\nAfter you create a PR, you can take a look at a diff of the changes you made using the PR's \"Files\" tab.\n\nPRs must pass through the checks and the code review described in the [Acceptance Criteria](#acceptance-criteria) section before they can be merged.\n\nChecks may take some time to complete. You can view their progress in the table near the bottom of the pull request page. You may also be able to use the links in the table\nto view logs associated with a check if it fails.\n\nDuring code reviews, another developer will take a look through your proposed change. If any modifications are requested (or further discussion about anything is\nneeded), they may leave a comment. You can follow up and respond to the comment, and/or create comments of your own if you have questions or ideas.\nWhen a modification request has been completed, the conversation thread about it will be marked as resolved.\n\nTo update the code in your PR (eg. in response to a code review discussion), you can simply push another commit to the branch used in your pull request.\n\n### Doxygen Editing Guidelines ###\n\n* bugs should be marked with @bugs near the code where the bug might be fixed.  The @bug message will appear in the API description and also in the\ndoxygen bug list.\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 16.2548828125,
          "content": "#!/usr/bin/env groovy\n// Copyright (c) 2017 - 2021 Advanced Micro Devices, Inc. All Rights Reserved.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Generated from snippet generator 'properties; set job properties'\nproperties([buildDiscarder(logRotator(\n    artifactDaysToKeepStr: '',\n    artifactNumToKeepStr: '',\n    daysToKeepStr: '',\n    numToKeepStr: '10')),\n    disableConcurrentBuilds(),\n    parameters([booleanParam( name: 'push_image_to_docker_hub', defaultValue: false, description: 'Push hip & hcc image to rocm docker-hub' )]),\n    [$class: 'CopyArtifactPermissionProperty', projectNames: '*']\n   ])\n\n////////////////////////////////////////////////////////////////////////\n// -- AUXILLARY HELPER FUNCTIONS\n\n////////////////////////////////////////////////////////////////////////\n// Return build number of upstream job\n@NonCPS\nint get_upstream_build_num( )\n{\n    def upstream_cause = currentBuild.rawBuild.getCause( hudson.model.Cause$UpstreamCause )\n    if( upstream_cause == null)\n      return 0\n\n    return upstream_cause.getUpstreamBuild()\n}\n\n////////////////////////////////////////////////////////////////////////\n// Return project name of upstream job\n@NonCPS\nString get_upstream_build_project( )\n{\n    def upstream_cause = currentBuild.rawBuild.getCause( hudson.model.Cause$UpstreamCause )\n    if( upstream_cause == null)\n      return null\n\n    return upstream_cause.getUpstreamProject()\n}\n\n////////////////////////////////////////////////////////////////////////\n// Construct the docker build image name\nString docker_build_image_name( )\n{\n    return \"build-ubuntu-16.04\"\n}\n\n////////////////////////////////////////////////////////////////////////\n// Construct the relative path of the build directory\nString build_directory_rel( String build_config )\n{\n  if( build_config.equalsIgnoreCase( 'release' ) )\n  {\n    return \"build/release\"\n  }\n  else\n  {\n    return \"build/debug\"\n  }\n}\n\n////////////////////////////////////////////////////////////////////////\n// Lots of images are created above; no apparent way to delete images:tags with docker global variable\ndef docker_clean_images( String org, String image_name )\n{\n  // Check if any images exist first grepping for image names\n  int docker_images = sh( script: \"docker images | grep \\\"${org}/${image_name}\\\"\", returnStatus: true )\n\n  // The script returns a 0 for success (images were found )\n  if( docker_images == 0 )\n  {\n    // Deleting images can fail, if other projects have built on top of that image and are now dependent on it.\n    // This should not be treated as a hip build failure.  This requires cleanup at a later time, possibly through\n    // another job\n    try\n    {\n      // Best attempt to run bash script to clean images\n      // deleting images based on hash seems to be more stable than through name:tag values because of <none> tags\n      sh \"docker images | grep \\\"${org}/${image_name}\\\" | awk '{print \\$1 \\\":\\\" \\$2}' | xargs docker rmi\"\n    }\n    catch( err )\n    {\n      println 'Failed to cleanup a few images; probably the images are used as a base for other images'\n      currentBuild.result = 'SUCCESS'\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////\n// -- BUILD RELATED FUNCTIONS\n\n////////////////////////////////////////////////////////////////////////\n// Checkout source code, source dependencies and update version number numbers\n// Returns a relative path to the directory where the source exists in the workspace\nString checkout_and_version( String platform )\n{\n  String source_dir_rel = \"src\"\n  String source_hip_rel = \"${source_dir_rel}/hip\"\n\n  stage(\"${platform} clone\")\n  {\n    dir( \"${source_hip_rel}\" )\n    {\n      // checkout hip\n      checkout([\n        $class: 'GitSCM',\n        branches: scm.branches,\n        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,\n        extensions: scm.extensions + [[$class: 'CleanCheckout']],\n        userRemoteConfigs: scm.userRemoteConfigs\n      ])\n    }\n  }\n\n  return source_hip_rel\n}\n\n\n////////////////////////////////////////////////////////////////////////\n// This creates the docker image that we use to build the project in\n// The docker images contains all dependencies, including OS platform, to build\ndef docker_build_image( String platform, String org, String optional_build_parm, String source_hip_rel, String from_image )\n{\n  String build_image_name = docker_build_image_name( )\n  String dockerfile_name = \"dockerfile-build-ubuntu-16.04\"\n  def build_image = null\n\n  stage(\"${platform} build image\")\n  {\n    dir(\"${source_hip_rel}\")\n    {\n      def user_uid = sh( script: 'id -u', returnStdout: true ).trim()\n\n      // Docker 17.05 introduced the ability to use ARG values in FROM statements\n      // Docker inspect failing on FROM statements with ARG https://issues.jenkins-ci.org/browse/JENKINS-44836\n      // build_image = docker.build( \"${org}/${build_image_name}:latest\", \"--pull -f docker/${dockerfile_name} --build-arg user_uid=${user_uid} --build-arg base_image=${from_image} .\" )\n\n      // JENKINS-44836 workaround by using a bash script instead of docker.build()\n      sh \"docker build -t ${org}/${build_image_name}:latest -f docker/${dockerfile_name} ${optional_build_parm} --build-arg user_uid=${user_uid} --build-arg base_image=${from_image} .\"\n      build_image = docker.image( \"${org}/${build_image_name}:latest\" )\n    }\n  }\n\n  return build_image\n}\n\n////////////////////////////////////////////////////////////////////////\n// This encapsulates the cmake configure, build and package commands\n// Leverages docker containers to encapsulate the build in a fixed environment\ndef docker_build_inside_image( def build_image, String inside_args, String platform, String optional_configure, String build_config, String source_hip_rel, String build_dir_rel )\n{\n  String source_hip_abs = pwd() + \"/\" + source_hip_rel\n\n  build_image.inside( inside_args )\n  {\n    stage(\"${platform} make ${build_config}\")\n    {\n      // The rm command needs to run as sudo because the test steps below create files owned by root\n      sh  \"\"\"#!/usr/bin/env bash\n          set -x\n          rm -rf ${build_dir_rel}\n          mkdir -p ${build_dir_rel}\n          cd ${build_dir_rel}\n          cmake -DCMAKE_BUILD_TYPE=${build_config} -DCMAKE_INSTALL_PREFIX=staging ${optional_configure} ${source_hip_abs}\n          make -j\\$(nproc)\n        \"\"\"\n    }\n\n    // Cap the maximum amount of testing, in case of hangs\n    // Excluding hipMultiThreadDevice-pyramid & hipMemoryAllocateCoherentDriver tests from automation; due to its flakiness which requires some investigation\n    timeout(time: 1, unit: 'HOURS')\n    {\n      stage(\"${platform} unit testing\")\n      {\n        sh  \"\"\"#!/usr/bin/env bash\n            set -x\n            cd ${build_dir_rel}\n            make install -j\\$(nproc)\n            make build_tests -i -j\\$(nproc)\n            ctest --output-on-failure -E \"(hipMultiThreadDevice-pyramid|hipMemoryAllocateCoherentDriver)\"\n          \"\"\"\n        // If unit tests output a junit or xunit file in the future, jenkins can parse that file\n        // to display test results on the dashboard\n        // junit \"${build_dir_rel}/*.xml\"\n      }\n    }\n\n    // Only create packages from hcc based builds\n    if( platform.toLowerCase( ).startsWith( 'rocm-' ) )\n    {\n      stage(\"${platform} packaging\")\n      {\n        sh  \"\"\"#!/usr/bin/env bash\n            set -x\n            cd ${build_dir_rel}\n            make package\n          \"\"\"\n\n        // No matter the base platform, all packages have the same name\n        // Only upload 1 set of packages, so we don't have a race condition uploading packages\n        if( platform.toLowerCase( ).startsWith( 'rocm-head' ) )\n        {\n          archiveArtifacts artifacts: \"${build_dir_rel}/*.deb\", fingerprint: true\n          archiveArtifacts artifacts: \"${build_dir_rel}/*.rpm\", fingerprint: true\n        }\n      }\n    }\n  }\n\n  return void\n}\n\n////////////////////////////////////////////////////////////////////////\n// This builds a fresh docker image FROM a clean base image, with no build dependencies included\n// Uploads the new docker image to internal artifactory\nString docker_upload_artifactory( String hcc_ver, String artifactory_org, String from_image, String source_hip_rel, String build_dir_rel )\n{\n  def hip_install_image = null\n  String image_name = \"hip-${hcc_ver}-ubuntu-16.04\"\n\n  stage( 'artifactory' )\n  {\n    println \"artifactory_org: ${artifactory_org}\"\n\n    //  We copy the docker files into the bin directory where the .deb lives so that it's a clean build everytime\n    sh \"cp -r ${source_hip_rel}/docker/* ${build_dir_rel}\"\n\n    // Docker 17.05 introduced the ability to use ARG values in FROM statements\n    // Docker inspect failing on FROM statements with ARG https://issues.jenkins-ci.org/browse/JENKINS-44836\n    // hip_install_image = docker.build( \"${artifactory_org}/${image_name}:${env.BUILD_NUMBER}\", \"--pull -f ${build_dir_rel}/dockerfile-hip-ubuntu-16.04 --build-arg base_image=${from_image} ${build_dir_rel}\" )\n\n    // JENKINS-44836 workaround by using a bash script instead of docker.build()\n    sh \"docker build -t ${artifactory_org}/${image_name} --pull -f ${build_dir_rel}/dockerfile-hip-ubuntu-16.04 --build-arg base_image=${from_image} ${build_dir_rel}\"\n    hip_install_image = docker.image( \"${artifactory_org}/${image_name}\" )\n\n    // The connection to artifactory can fail sometimes, but this should not be treated as a build fail\n    try\n    {\n      // Don't push pull requests to artifactory, these tend to accumulate over time\n      if( env.BRANCH_NAME.toLowerCase( ).startsWith( 'pr-' ) )\n      {\n        println 'Pull Request (PR-xxx) detected; NOT pushing to artifactory'\n      }\n      else\n      {\n        docker.withRegistry('http://compute-artifactory:5001', 'artifactory-cred' )\n        {\n          hip_install_image.push( \"${env.BUILD_NUMBER}\" )\n          hip_install_image.push( 'latest' )\n        }\n      }\n    }\n    catch( err )\n    {\n      currentBuild.result = 'SUCCESS'\n    }\n  }\n\n  return image_name\n}\n\n////////////////////////////////////////////////////////////////////////\n// Uploads the new docker image to the public docker-hub\ndef docker_upload_dockerhub( String local_org, String image_name, String remote_org )\n{\n  stage( 'docker-hub' )\n  {\n    // Do not treat failures to push to docker-hub as a build fail\n    try\n    {\n      sh  \"\"\"#!/usr/bin/env bash\n          set -x\n          echo inside sh\n          docker tag ${local_org}/${image_name} ${remote_org}/${image_name}\n        \"\"\"\n\n      docker_hub_image = docker.image( \"${remote_org}/${image_name}\" )\n\n      docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-cred' )\n      {\n        docker_hub_image.push( \"${env.BUILD_NUMBER}\" )\n        docker_hub_image.push( 'latest' )\n      }\n    }\n    catch( err )\n    {\n      currentBuild.result = 'SUCCESS'\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////\n// -- MAIN\n// Following this line is the start of MAIN of this Jenkinsfile\nString build_config = 'Release'\nString job_name = env.JOB_NAME.toLowerCase( )\n\n// The following launches 3 builds in parallel: rocm-head, rocm-3.3.x and cuda-10.x\nparallel rocm_3_3:\n{\n  node('hip-rocm')\n  {\n    String hcc_ver = 'rocm-3.3.x'\n    String from_image = 'ci_test_nodes/rocm-3.3.x/ubuntu-16.04:latest'\n    String inside_args = '--device=/dev/kfd --device=/dev/dri --group-add=video'\n\n    // Checkout source code, dependencies and version files\n    String source_hip_rel = checkout_and_version( hcc_ver )\n\n    // Create/reuse a docker image that represents the hip build environment\n    def hip_build_image = docker_build_image( hcc_ver, 'hip', '', source_hip_rel, from_image )\n\n    // Print system information for the log\n    hip_build_image.inside( inside_args )\n    {\n      sh  \"\"\"#!/usr/bin/env bash\n          set -x\n          /opt/rocm/bin/rocm_agent_enumerator -t ALL\n          /opt/rocm/bin/hcc --version\n        \"\"\"\n    }\n\n    // Conctruct a binary directory path based on build config\n    String build_hip_rel = build_directory_rel( build_config );\n\n    // Build hip inside of the build environment\n    docker_build_inside_image( hip_build_image, inside_args, hcc_ver, '', build_config, source_hip_rel, build_hip_rel )\n\n    // Clean docker build image\n    docker_clean_images( 'hip', docker_build_image_name( ) )\n\n    // After a successful build, upload a docker image of the results\n    /*\n    String hip_image_name = docker_upload_artifactory( hcc_ver, job_name, from_image, source_hip_rel, build_hip_rel )\n    if( params.push_image_to_docker_hub )\n    {\n      docker_upload_dockerhub( job_name, hip_image_name, 'rocm' )\n      docker_clean_images( 'rocm', hip_image_name )\n    }\n    docker_clean_images( job_name, hip_image_name )\n    */\n  }\n},\nrocm_head:\n{\n  node('hip-rocm')\n  {\n    String hcc_ver = 'rocm-head'\n    String from_image = 'ci_test_nodes/rocm-head/ubuntu-16.04:latest'\n    String inside_args = '--device=/dev/kfd --device=/dev/dri --group-add=video'\n\n    // Checkout source code, dependencies and version files\n    String source_hip_rel = checkout_and_version( hcc_ver )\n\n    // Create/reuse a docker image that represents the hip build environment\n    def hip_build_image = docker_build_image( hcc_ver, 'hip', '', source_hip_rel, from_image )\n\n    // Print system information for the log\n    hip_build_image.inside( inside_args )\n    {\n      sh  \"\"\"#!/usr/bin/env bash\n          set -x\n          /opt/rocm/bin/rocm_agent_enumerator -t ALL\n          /opt/rocm/bin/hcc --version\n        \"\"\"\n    }\n\n    // Conctruct a binary directory path based on build config\n    String build_hip_rel = build_directory_rel( build_config );\n\n    // Build hip inside of the build environment\n    docker_build_inside_image( hip_build_image, inside_args, hcc_ver, '', build_config, source_hip_rel, build_hip_rel )\n\n    // Clean docker image\n    docker_clean_images( 'hip', docker_build_image_name( ) )\n\n    // After a successful build, upload a docker image of the results\n    /*\n    String hip_image_name = docker_upload_artifactory( hcc_ver, job_name, from_image, source_hip_rel, build_hip_rel )\n    if( params.push_image_to_docker_hub )\n    {\n      docker_upload_dockerhub( job_name, hip_image_name, 'rocm' )\n      docker_clean_images( 'rocm', hip_image_name )\n    }\n    docker_clean_images( job_name, hip_image_name )\n    */\n  }\n},\ncuda_10_x:\n{\n  node('hip-cuda')\n  {\n    ////////////////////////////////////////////////////////////////////////\n    // Block of string constants customizing behavior for cuda\n    String nvcc_ver = 'cuda-10.x'\n    String from_image = 'ci_test_nodes/cuda-10.x/ubuntu-16.04:latest'\n    String inside_args = '--gpus all';\n\n    // Checkout source code, dependencies and version files\n    String source_hip_rel = checkout_and_version( nvcc_ver )\n\n    // Create/reuse a docker image that represents the hip build environment\n    def hip_build_image = docker_build_image( nvcc_ver, 'hip', '', source_hip_rel, from_image )\n\n    // Print system information for the log\n    hip_build_image.inside( inside_args )\n    {\n      sh  \"\"\"#!/usr/bin/env bash\n          set -x\n          nvidia-smi\n          nvcc --version\n        \"\"\"\n    }\n\n    // Conctruct a binary directory path based on build config\n    String build_hip_rel = build_directory_rel( build_config );\n\n    // Build hip inside of the build environment\n    docker_build_inside_image( hip_build_image, inside_args, nvcc_ver, \"-DHIP_NVCC_FLAGS=--Wno-deprecated-gpu-targets\", build_config, source_hip_rel, build_hip_rel )\n\n    // Clean docker image\n    docker_clean_images( 'hip', docker_build_image_name( ) )\n  }\n}\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0537109375,
          "content": "Copyright (c) 2008 - 2025 Advanced Micro Devices, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.880859375,
          "content": "## What is this repository for?\n\n**HIP is a C++ Runtime API and Kernel Language that allows developers to create portable applications for AMD and NVIDIA GPUs from single source code.**\n\nKey features include:\n\n* HIP is very thin and has little or no performance impact over coding directly in CUDA mode.\n* HIP allows coding in a single-source C++ programming language including features such as templates, C++11 lambdas, classes, namespaces, and more.\n* HIP allows developers to use the \"best\" development environment and tools on each target platform.\n* The [HIPIFY](https://github.com/ROCm/HIPIFY/blob/amd-staging/README.md) tools automatically convert source from CUDA to HIP.\n* Developers can specialize for the platform (CUDA or AMD) to tune for performance or handle tricky cases.\n\nNew projects can be developed directly in the portable HIP C++ language and can run on either NVIDIA or AMD platforms.  Additionally, HIP provides porting tools which make it easy to port existing CUDA codes to the HIP layer, with no loss of performance as compared to the original CUDA application.  HIP is not intended to be a drop-in replacement for CUDA, and developers should expect to do some manual coding and performance tuning work to complete the port.\n\n## DISCLAIMER\n\nThe information presented in this document is for informational purposes only and may contain technical inaccuracies, omissions, and typographical errors. The information contained herein is subject to change and may be rendered inaccurate for many reasons, including but not limited to product and roadmap changes, component and motherboard versionchanges, new model and/or product releases, product differences between differing manufacturers, software changes, BIOS flashes, firmware upgrades, or the like. Any computer system has risks of security vulnerabilities that cannot be completely prevented or mitigated.AMD assumes no obligation to update or otherwise correct or revise this information. However, AMD reserves the right to revise this information and to make changes from time to time to the content hereof without obligation of AMD to notify any person of such revisions or changes.THIS INFORMATION IS PROVIDED ‘AS IS.” AMD MAKES NO REPRESENTATIONS OR WARRANTIES WITH RESPECT TO THE CONTENTS HEREOF AND ASSUMES NO RESPONSIBILITY FOR ANY INACCURACIES, ERRORS, OR OMISSIONS THAT MAY APPEAR IN THIS INFORMATION. AMD SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR ANY PARTICULAR PURPOSE. IN NO EVENT WILL AMD BE LIABLE TO ANY PERSON FOR ANY RELIANCE, DIRECT, INDIRECT, SPECIAL, OR OTHER CONSEQUENTIAL DAMAGES ARISING FROM THE USE OF ANY INFORMATION CONTAINED HEREIN, EVEN IF AMD IS EXPRESSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. AMD, the AMD Arrow logo, and combinations thereof are trademarks of Advanced Micro Devices, Inc. Other product names used in this publication are for identification purposes only and may be trademarks of their respective companies.\n\n© 2023 Advanced Micro Devices, Inc. All Rights Reserved.\n\n## Repository branches\n\nThe HIP repository maintains several branches. The branches that are of importance are:\n\n* develop branch: This is the default branch, on which the new features are still under development and visible. While this maybe of interest to many, it should be noted that this branch and the features under development might not be stable.\n* Main branch: This is the stable branch. It is up to date with the latest release branch, for example, if the latest HIP release is rocm-4.3, main branch will be the repository based on this release.\n* Release branches. These are branches corresponding to each ROCM release, listed with release tags, such as rocm-4.2, rocm-4.3, etc.\n\n## Release tagging\n\nHIP releases are typically naming convention for each ROCM release to help differentiate them.\n\n* rocm x.yy: These are the stable releases based on the ROCM release.\n  This type of release is typically made once a month.*\n\n## More Info\n\n* [Installation](docs/install/install.rst)\n* [HIP FAQ](docs/faq.rst)\n* [HIP C++ Language Extensions](docs/reference/cpp_language_extensions.rst)\n* [HIP Porting Guide](docs/how-to/hip_porting_guide.md)\n* [HIP Porting Driver Guide](docs/how-to/hip_porting_driver_api.md)\n* [HIP Programming Guide](docs/how-to/programming_manual.md)\n* [HIP Logging](docs/how-to/logging.rst)\n* [Building HIP From Source](docs/install/build.rst)\n* [HIP Debugging](docs/how-to/debugging.rst)\n* [HIP RTC](docs/how-to/hip_rtc.md)\n* [HIP Terminology](docs/reference/terms.md) (including Rosetta Stone of GPU computing terms across CUDA/HIP/OpenCL)\n* [HIPIFY](https://github.com/ROCm/HIPIFY/blob/amd-staging/README.md)\n* Supported CUDA APIs:\n  * [Runtime API](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUDA_Runtime_API_functions_supported_by_HIP.md)\n  * [Driver API](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUDA_Driver_API_functions_supported_by_HIP.md)\n  * [cuComplex API](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/cuComplex_API_supported_by_HIP.md)\n  * [Device API](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUDA_Device_API_supported_by_HIP.md)\n  * [cuBLAS](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUBLAS_API_supported_by_ROC.md)\n  * [cuRAND](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CURAND_API_supported_by_HIP.md)\n  * [cuDNN](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUDNN_API_supported_by_HIP.md)\n  * [cuFFT](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUFFT_API_supported_by_HIP.md)\n  * [cuSPARSE](https://github.com/ROCm/HIPIFY/blob/amd-staging/docs/tables/CUSPARSE_API_supported_by_HIP.md)\n* [Developer/CONTRIBUTING Info](CONTRIBUTING.md)\n* [Release Notes](RELEASE.md)\n\n## How do I get set up?\n\nSee the [Installation](docs/install/install.rst) notes.\n\n## Simple Example\n\nThe HIP API includes functions such as hipMalloc, hipMemcpy, and hipFree.\nProgrammers familiar with CUDA will also be able to quickly learn and start coding with the HIP API.\nCompute kernels are launched with the \"hipLaunchKernelGGL\" macro call.\nHere is simple example showing a snippet of HIP API code:\n\n```cpp\nhipMalloc(&A_d, Nbytes);\nhipMalloc(&C_d, Nbytes);\n\nhipMemcpy(A_d, A_h, Nbytes, hipMemcpyHostToDevice);\n\nconst unsigned blocks = 512;\nconst unsigned threadsPerBlock = 256;\nhipLaunchKernelGGL(vector_square,   /* compute kernel*/\n                dim3(blocks), dim3(threadsPerBlock), 0/*dynamic shared*/, 0/*stream*/,     /* launch config*/\n                C_d, A_d, N);  /* arguments to the compute kernel */\n\nhipMemcpy(C_h, C_d, Nbytes, hipMemcpyDeviceToHost);\n```\n\nThe HIP kernel language defines builtins for determining grid and block coordinates, math functions, short vectors,\natomics, and timer functions.\nIt also specifies additional defines and keywords for function types, address spaces, and optimization controls (See the [HIP C++ Language Extensions](docs/reference/cpp_language_extensions.rst) for a full description).\nHere's an example of defining a simple 'vector_square' kernel.\n\n```cpp\ntemplate <typename T>\n__global__ void\nvector_square(T *C_d, const T *A_d, size_t N)\n{\n    size_t offset = (blockIdx.x * blockDim.x + threadIdx.x);\n    size_t stride = blockDim.x * gridDim.x;\n\n    for (size_t i=offset; i<N; i+=stride) {\n        C_d[i] = A_d[i] * A_d[i];\n    }\n}\n```\n\nThe HIP Runtime API code and compute kernel definition can exist in the same source file - HIP takes care of generating host and device code appropriately.\n\n## HIP Portability and Compiler Technology\n\nHIP C++ code can be compiled with either,\n\n* On the NVIDIA CUDA platform, HIP provides header file in the repository [hipother](https://github.com/ROCm/hipother) which translate from the HIP runtime APIs to CUDA runtime APIs.  The header file contains mostly inlined\n  functions and thus has very low overhead - developers coding in HIP should expect the same performance as coding in native CUDA.  The code is then\n  compiled with nvcc, the standard C++ compiler provided with the CUDA SDK.  Developers can use any tools supported by the CUDA SDK including the CUDA\n  profiler and debugger.\n* On the AMD ROCm platform, HIP provides a header and runtime library built on top of HIP-Clang compiler in the repository [Compute Language Runtime (CLR)](https://github.com/ROCm/clr).  The HIP runtime implements HIP streams, events, and memory APIs,\n  and is a object library that is linked with the application.  The source code for all headers and the library implementation is available on GitHub.\n  HIP developers on ROCm can use AMD's [ROCgdb](https://github.com/ROCm/ROCgdb) for debugging and profiling.\n\nThus HIP source code can be compiled to run on either platform.  Platform-specific features can be isolated to a specific platform using conditional compilation.  Thus HIP\nprovides source portability to either platform.   HIP provides the _hipcc_ compiler driver which will call the appropriate toolchain depending on the desired platform.\n\n## Examples and Getting Started\n\n* A sample and [blog](https://github.com/ROCm/hip-tests/tree/develop/samples/0_Intro/square) that uses any of [HIPIFY](https://github.com/ROCm/HIPIFY/blob/amd-staging/README.md) tools to convert a simple app from CUDA to HIP:\n\n  ```shell\n  cd samples/01_Intro/square\n  # follow README / blog steps to hipify the application.\n  ```\n\n* Guide to [Porting a New Cuda Project](https://rocm.docs.amd.com/projects/HIP/en/latest/how-to/hip_porting_guide.html#porting-a-new-cuda-project)\n\n## More Examples\n\nThe GitHub repository [HIP-Examples](https://github.com/ROCm/HIP-Examples) contains a hipified version of benchmark suite.\nBesides, there are more samples in Github [HIP samples](https://github.com/ROCm/hip-tests/tree/develop/samples), showing how to program with different features, build and run.\n\n## Tour of the HIP Directories\n\n* **include**:\n  * **hip_runtime_api.h** : Defines HIP runtime APIs and can be compiled with many standard Linux compilers (GCC, ICC, CLANG, etc), in either C or C++ mode.\n  * **hip_runtime.h** : Includes everything in hip_runtime_api.h PLUS hipLaunchKernelGGL and syntax for writing device kernels and device functions.  hip_runtime.h can be compiled using a standard C++ compiler but will expose a subset of the available functions.\n  * **amd_detail/**** , **nvidia_detail/**** : Implementation details for specific platforms. HIP applications should not include these files directly.\n\n* **bin**: Tools and scripts to help with hip porting\n  * **hipcc** : Compiler driver that can be used to replace nvcc in existing CUDA code. hipcc will call nvcc or HIP-Clang depending on platform and include appropriate platform-specific headers and libraries.\n  * **hipconfig** : Print HIP configuration (HIP_PATH, HIP_PLATFORM, HIP_COMPILER, HIP_RUNTIME, CXX config flags, etc.)\n\n* **docs**: Documentation - markdown and doxygen info.\n\n## Reporting an issue\n\nUse the [GitHub issue tracker](https://github.com/ROCm/HIP/issues).\nIf reporting a bug, include the output of \"hipconfig --full\" and samples/1_hipInfo/hipInfo (if possible).\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 9.6025390625,
          "content": "# Release notes\n\nWe have attempted to document known bugs and limitations - in particular the [HIP Kernel Language](docs/markdown/hip_kernel_language.md) document uses the phrase \"Under Development\", and the [HIP Runtime API issue list](https://github.com/ROCm/HIP/issues) lists known bugs. \n\n\n===================================================================================================\n\n\n## Revision History:\n\n===================================================================================================\nRelease: 1.5\nDate:\n- Support threadIdx, blockIdx, blockDim directly (no need for hipify conversions in kernels.)  HIP\n  Kernel syntax is now identical to CUDA kernel syntax - no need for extra parms or conversions.\n- Refactor launch syntax.  HIP now extracts kernels from the executable and launches them using the \n  existing module interface.  Kernels dispatch no longer flows through HCC.  Result is faster\n  kernel launches and with less resource usage (no signals required). \n- Remove requirement for manual \"serializers\" previously required when passing complex structures\n  into kernels.\n- Remove need for manual destructors\n- Provide printf in device code\n- Support for globals when using module API\n- hipify-clang now supports using newer versions of clang\n- HIP texture support equivalent to CUDA texture driver APIs\n- Updates to hipify-perl, hipify-clang and documentation\n\n\n===================================================================================================\nRelease: 1.4\nDate: 2017.10.06\n- Improvements to HIP event management\n- Added new HIP_TRACE_API options\n- Enabled device side assert support\n- Several bug fixes including hipMallocArray, hipTexture fetch\n- Support for RHEL/CentOS 7.4\n- Updates to hipify-perl, hipify-clang and documentation\n\n\n===================================================================================================\nRelease: 1.3\nDate: 2017.08.16\n- hipcc now auto-detects amdgcn arch. No need to specify the arch when building for same system.\n- HIP texture support (run-time APIs)\n- Implemented __threadfence_support\n- Improvements in HIP context management logic\n- Bug fixes in several APIs including hipDeviceGetPCIBusId, hipEventDestroy, hipMemcpy2DAsync\n- Updates to hipify-clang and documentation\n- HIP development now fully open and on GitHub. Developers should submit pull requests.\n\n\n===================================================================================================\nRelease: 1.2\nDate: 2017.06.29\n- new APIs: hipMemcpy2DAsync, hipMallocPitch, hipHostMallocCoherent, hipHostMallocNonCoherent\n- added support for building hipify-clang using clang 3.9\n- hipify-clang updates for CUDA 8.0 runtime+driver support\n- renamed hipify to hipify-perl\n- initial implementation of hipify-cmakefile\n- several documentation updates & bug fixes\n- support for abort() function in device code\n\n\n===================================================================================================\nRelease: 1.0.17102\nDate: 2017.03.07\n- Lots of improvements to hipify-clang.\n- Added HIP package config for cmake.\n- Several bug fixes and documentation updates.\n\n\n===================================================================================================\nRelease: 1.0.17066\nDate: 2017.02.11\n- Improved support for math device functions.\n- Added several half math device functions.\n- Enabled support for CUDA 8.0 in hipify-clang.\n- Lots of bug fixes and documentation updates.\n\n\n===================================================================================================\nRelease: 1.0.17015\nDate: 2017.01.06\n- Several improvements to the hipify-clang infrastructure.\n- Refactored module and function APIs.\n- HIP now defaults to linking against the shared runtime library.\n- Documentation updates.\n\n\n===================================================================================================\nRelease: 1.0.16502\nDate: 2016.12.13\n- Added several fast math and packaged math instrincs\n- Improved debug and profiler documentation\n- Support for building and linking to HIP shared library\n- Several improvements to hipify-clang\n- Several bug fixes\n\n\n===================================================================================================\nRelease: 1.0.16461\nDate: 2016.11.14\n- Significant changes to the HIP Profiling APIs. Refer to the documentation for details\n- Improvements to P2P support\n- New API: hipDeviceGetByPCIBusId\n- Several bug fixes in NV path\n- hipModuleLaunch now works for multi-dim kernels\n\n\n===================================================================================================\nRelease:1.0\nDate: 2016.11.8\n- Initial implementation for FindHIP.cmake\n- HIP library now installs as a static library by default\n- Added support for HIP context and HIP module APIs\n- Major changes to HIP signal & memory management implementation\n- Support for complex data type and math functions\n- clang-hipify is now known as hipify-clang\n- Added several new HIP samples\n- Preliminary support for new APIs: hipMemcpyToSymbol, hipDeviceGetLimit, hipRuntimeGetVersion\n- Added support for async memcpy driver API (for example hipMemcpyHtoDAsync)\n- Support for memory management device functions: malloc, free, memcpy & memset\n- Removed deprecated HIP runtime header locations. Please include \"hip/hip_runtime.h\" instead of \"hip_runtime.h\". You can use `find . -type f -exec sed -i 's:#include \"hip_runtime.h\":#include \"hip/hip_runtime.h\":g' {} +` to replace all such references\n\n\n===================================================================================================\nRelease:0.92.00\nDate: 2016.8.14\n- hipLaunchKernel supports one-dimensional grid and/or block dims, without explicit cast to dim3 type (actually in 0.90.00)\n- fp16 software support\n- Support for Hawaii dGPUs using environment variable ROCM_TARGET=hawaii\n- Support hipArray\n- Improved profiler support\n- Documentation updates\n- Improvements to clang-hipify\n\n\n===================================================================================================\nRelease:0.90.00\nDate: 2016.06.29\n- Support dynamic shared memory allocations\n- Min HCC compiler version is > 16186.\n- Expanded math functions (device and host).  Document unsupported functions.\n- hipFree with null pointer initializes runtime and returns success.\n- Improve error code reporting on nvcc.\n- Add hipPeekAtError for nvcc.\n\n\n===================================================================================================\nRelease:0.86.00\nDate: 2016.06.06\n- Add clang-hipify : clang-based hipify tool.  Improved parsing of source code, and automates \n  creation of hipLaunchParm variable.\n- Implement memory register / unregister commands (hipHostRegister, hipHostUnregister)\n- Add cross-linking support between G++ and HCC, in particular for interfaces that use\n  standard C++ libraries (ie std::vectors, std::strings).  HIPCC now uses libstdc++ by default on the HCC\n  compilation path.\n- More samples including gpu-burn, SHOC, nbody, rtm.  See [HIP-Examples](https://github.com/ROCm/HIP-Examples)\n\n\n===================================================================================================\nRelease:0.84.01\nDate: 2016.04.25\n- Refactor HIP make and install system:\n    - Move to CMake. Refer to the installation section in README.md for details.\n    - Split source into multiple modular .cpp and .h files.\n    - Create static library and link.\n    - Set HIP_PATH to install.\n- Make hipDevice and hipStream thread-safe.\n    - Preferred hipStream usage is still to create new streams for each new thread, but it works even if you don;t.\n- Improve automated platform detection: If AMD GPU is installed and detected by driver, default HIP_PLATFORM to hcc.\n- HIP_TRACE_API now prints arguments to the HIP function (in addition to name of function).\n- Deprecate hipDeviceGetProp (Replace with hipGetDeviceProp)\n- Deprecate hipMallocHost (Replace with hipHostMalloc)\n- Deprecate hipFreeHost (Replace with hipHostFree)\n- The mixbench benchmark tool for measuring operational intensity now has a HIP target, in addition to CUDA and OpenCL.  Let the comparisons begin. :)    \nSee here for more : https://github.com/ekondis/mixbench.\n\n\n===================================================================================================\nRelease:0.82.00\nDate: 2016.03.07\n- Bump minimum required HCC workweek to 16074.\n- Bump minimum required ROCK-Kernel-Driver and ROCR-Runtime to Developer Preview 2.\n- Enable multi-GPU support.\n  * Use hipSetDevice to select a device for subsequent kernel calls and memory allocations.\n  * CUDA_VISIBLE_DEVICES / HIP_VISIBLE_DEVICE environment variable selects devices visible to the runtime.\n- Support hipStreams – send sequences of copy and kernel commands to a device.\n  * Asynchronous copies supported.\n- Optimize memory copy operations.\n- Support hipPointerGetAttribute – can determine if a pointer is host or device.\n- Enable atomics to local memory.\n- Support for LC Direct-To-ISA path.\n- Improved free memory reporting.\n  * hipMemGetInfo (report full memory used in current process).\n  * hipDeviceReset (deletes all memory allocated by current process).\n\n\n===================================================================================================\nRelease:0.80.01\nDate: 2016.02.18\n- Improve reporting and support for device-side math functions.\n- Update Runtime Documentation.\n- Improve implementations of cross-lane operations (_ballot, _any, _all).\n- Provide shuffle intrinsics (performance optimization in-progress).\n- Support hipDeviceAttribute for querying \"one-shot\" device attributes, as an alternative to hipGetDeviceProperties.\n\n\n===================================================================================================\nRelease:0.80.00\nDate: 2016.01.25\n\nInitial release with GPUOpen Launch.\n\n\n\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0615234375,
          "content": "#HIP_VERSION_MAJOR\n6\n#HIP_VERSION_MINOR\n4\n#HIP_VERSION_PATCH\n0\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hip-lang-config.cmake.in",
          "type": "blob",
          "size": 5.7509765625,
          "content": "# Copyright (C) 2021 Kitware, Inc. All Rights Reserved.\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n@PACKAGE_INIT@\ninclude(CMakeFindDependencyMacro OPTIONAL RESULT_VARIABLE _CMakeFindDependencyMacro_FOUND)\nif (NOT _CMakeFindDependencyMacro_FOUND)\n  macro(find_dependency dep)\n    if (NOT ${dep}_FOUND)\n      set(cmake_fd_version)\n      if (${ARGC} GREATER 1)\n        set(cmake_fd_version ${ARGV1})\n      endif()\n      set(cmake_fd_exact_arg)\n      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION_EXACT)\n        set(cmake_fd_exact_arg EXACT)\n      endif()\n      set(cmake_fd_quiet_arg)\n      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)\n        set(cmake_fd_quiet_arg QUIET)\n      endif()\n      set(cmake_fd_required_arg)\n      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)\n        set(cmake_fd_required_arg REQUIRED)\n      endif()\n      find_package(${dep} ${cmake_fd_version}\n          ${cmake_fd_exact_arg}\n          ${cmake_fd_quiet_arg}\n          ${cmake_fd_required_arg}\n      )\n      string(TOUPPER ${dep} cmake_dep_upper)\n      if (NOT ${dep}_FOUND AND NOT ${cmake_dep_upper}_FOUND)\n        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE \"${CMAKE_FIND_PACKAGE_NAME} could not be found because dependency ${dep} could not be found.\")\n        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND False)\n        return()\n      endif()\n      set(cmake_fd_version)\n      set(cmake_fd_required_arg)\n      set(cmake_fd_quiet_arg)\n      set(cmake_fd_exact_arg)\n    endif()\n  endmacro()\nendif()\n\nset(HIP_COMPILER \"@HIP_COMPILER@\")\nset(HIP_RUNTIME \"@HIP_RUNTIME@\")\n\nif (NOT @BUILD_SHARED_LIBS@)\n  list(APPEND CMAKE_PREFIX_PATH \"${PACKAGE_PREFIX_DIR}\" \"${PACKAGE_PREFIX_DIR}/lib/llvm\")\n\n  # Setting CMAKE_SIZEOF_VOID_P is a workaround to force cmake\n  # include searching in lib64 directories for dependencies.\n  set(CMAKE_SIZEOF_VOID_P_OLD ${CMAKE_SIZEOF_VOID_P})\n  set(CMAKE_SIZEOF_VOID_P 8)\n\n  find_dependency(hsa-runtime64)\n  find_dependency(amd_comgr)\n\n  # Restore the original CMAKE_PREFIX_PATH and CMAKE_SIZEOF_VOID_P\n  # to avoid leaking the settings back to the project.\n  set(CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P_OLD})\n  list(REMOVE_AT CMAKE_PREFIX_PATH -2 -1)\nendif()\n\ninclude( \"${CMAKE_CURRENT_LIST_DIR}/hip-lang-targets.cmake\" )\n\n# Find the hip-lang config file path with symlinks resolved\n# RealPath: /opt/rocm-ver/lib/cmake/hip-lang/hip-lang-config.cmake\n# Go 4 level up to get IMPORT PREFIX\nget_filename_component(_DIR \"${CMAKE_CURRENT_LIST_FILE}\" REALPATH)\nget_filename_component(_IMPORT_PREFIX \"${_DIR}/../../../../\" ABSOLUTE)\n\n\nset_target_properties(hip-lang::device PROPERTIES\n  INTERFACE_INCLUDE_DIRECTORIES \"$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include>\"\n  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES \"$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include>\"\n)\n\nset_target_properties(hip-lang::amdhip64 PROPERTIES\n  INTERFACE_COMPILE_DEFINITIONS \"$<$<COMPILE_LANGUAGE:HIP>:__HIP_ROCclr__=1>\"\n  INTERFACE_INCLUDE_DIRECTORIES \"$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include>\"\n  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES \"$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include>\"\n)\nset_target_properties(hip-lang::device PROPERTIES\n  INTERFACE_COMPILE_DEFINITIONS \"$<$<COMPILE_LANGUAGE:HIP>:__HIP_ROCclr__=1>\"\n)\n\nset_property(TARGET hip-lang::device APPEND PROPERTY\n  INTERFACE_LINK_OPTIONS \"$<$<LINK_LANGUAGE:HIP>:--hip-link>\"\n)\n\n# Approach: Check CLANGRT LIB support for CMAKE_HIP_COMPILER\n# Use CMAKE_HIP_COMPILER option -print-libgcc-file-name --rtlib=compiler-rt\n# Note: For Linux add additional option -unwindlib=libgcc also\n# To fetch the compiler rt library file name and confirm.\n# If unsuccessful in getting clangrt using this option then\n# FATAL_ERROR message send since compiler-rt linkage dependency is mandatory.\n# If successful then --rtlib=compiler-rt (and -unwindlib=libgcc for non windows)\n# added to Target's INTERFACE_LINK_LIBRARIES property\nif (NOT WIN32)\n  set(CLANGRT_LINUX_OPTION \"-unwindlib=libgcc\")\nendif()\n\nexecute_process(\n  COMMAND ${CMAKE_HIP_COMPILER} -print-libgcc-file-name --rtlib=compiler-rt ${CLANGRT_LINUX_OPTION}\n  OUTPUT_VARIABLE CLANGRT_BUILTINS\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  RESULT_VARIABLE CLANGRT_BUILTINS_FETCH_EXIT_CODE)\n\n# Add support for __fp16 and _Float16, explicitly link with compiler-rt\nif( \"${CLANGRT_BUILTINS_FETCH_EXIT_CODE}\" STREQUAL \"0\" )\n  set_property(TARGET hip-lang::device APPEND PROPERTY\n    INTERFACE_LINK_OPTIONS $<$<LINK_LANGUAGE:HIP>:--rtlib=compiler-rt ${CLANGRT_LINUX_OPTION}>\n  )\nelse()\n  # FATAL_ERROR send if not successfull on compiler-rt linkage dependency\n  message(FATAL_ERROR\n\t\"${CMAKE_FIND_PACKAGE_NAME} Error:${CLANGRT_BUILTINS_FETCH_EXIT_CODE} - clangrt builtins lib could not be found.\")\nendif()\n\n# Approved by CMake to use this name. This is used so that HIP can\n# change the name of the target and not require any modifications in CMake\nset(_CMAKE_HIP_DEVICE_RUNTIME_TARGET \"hip-lang::device\")\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.1796875,
          "content": "#!/bin/bash\n# Copyright (c) 2017 - 2021 Advanced Micro Devices, Inc. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\necho \"install.sh has moved to HIP-AMD backend repo\"\nexit 1\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}