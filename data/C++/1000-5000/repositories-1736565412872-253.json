{
  "metadata": {
    "timestamp": 1736565412872,
    "page": 253,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zrax/pycdc",
      "stars": 3456,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "*.swp\n*.swo\n*.gcno\n*.gcda\n*.kdev4\n/.kdev4\n__pycache__\ntests-out\n"
        },
        {
          "name": "ASTNode.cpp",
          "type": "blob",
          "size": 4.6396484375,
          "content": "#include \"ASTNode.h\"\n#include \"bytecode.h\"\n\n/* ASTNodeList */\nvoid ASTNodeList::removeLast()\n{\n    list_t::iterator it = m_nodes.end();\n    --it;\n    m_nodes.erase(it);\n}\n\nvoid ASTNodeList::removeFirst()\n{\n    m_nodes.erase(m_nodes.begin());\n}\n\n\n/* ASTUnary */\nconst char* ASTUnary::op_str() const\n{\n    static const char* s_op_strings[] = {\n        \"+\", \"-\", \"~\", \"not \"\n    };\n    return s_op_strings[op()];\n}\n\n\n/* ASTBinary */\nconst char* ASTBinary::op_str() const\n{\n    static const char* s_op_strings[] = {\n        \".\", \" ** \", \" * \", \" / \", \" // \", \" % \", \" + \", \" - \",\n        \" << \", \" >> \", \" & \", \" ^ \", \" | \", \" and \", \" or \", \" @ \",\n        \" += \", \" -= \", \" *= \", \" /= \", \" %= \", \" **= \", \" <<= \",\n        \" >>= \", \" &= \", \" ^= \", \" |= \", \" //= \", \" @= \", \" <INVALID> \"\n\n    };\n    return s_op_strings[op()];\n}\n\nASTBinary::BinOp ASTBinary::from_opcode(int opcode)\n{\n    switch (opcode) {\n    case Pyc::BINARY_ADD:\n        return BIN_ADD;\n    case Pyc::BINARY_AND:\n        return BIN_AND;\n    case Pyc::BINARY_DIVIDE:\n        return BIN_DIVIDE;\n    case Pyc::BINARY_FLOOR_DIVIDE:\n        return BIN_FLOOR_DIVIDE;\n    case Pyc::BINARY_LSHIFT:\n        return BIN_LSHIFT;\n    case Pyc::BINARY_MODULO:\n        return BIN_MODULO;\n    case Pyc::BINARY_MULTIPLY:\n        return BIN_MULTIPLY;\n    case Pyc::BINARY_OR:\n        return BIN_OR;\n    case Pyc::BINARY_POWER:\n        return BIN_POWER;\n    case Pyc::BINARY_RSHIFT:\n        return BIN_RSHIFT;\n    case Pyc::BINARY_SUBTRACT:\n        return BIN_SUBTRACT;\n    case Pyc::BINARY_TRUE_DIVIDE:\n        return BIN_DIVIDE;\n    case Pyc::BINARY_XOR:\n        return BIN_XOR;\n    case Pyc::BINARY_MATRIX_MULTIPLY:\n        return BIN_MAT_MULTIPLY;\n    case Pyc::INPLACE_ADD:\n        return BIN_IP_ADD;\n    case Pyc::INPLACE_AND:\n        return BIN_IP_AND;\n    case Pyc::INPLACE_DIVIDE:\n        return BIN_IP_DIVIDE;\n    case Pyc::INPLACE_FLOOR_DIVIDE:\n        return BIN_IP_FLOOR_DIVIDE;\n    case Pyc::INPLACE_LSHIFT:\n        return BIN_IP_LSHIFT;\n    case Pyc::INPLACE_MODULO:\n        return BIN_IP_MODULO;\n    case Pyc::INPLACE_MULTIPLY:\n        return BIN_IP_MULTIPLY;\n    case Pyc::INPLACE_OR:\n        return BIN_IP_OR;\n    case Pyc::INPLACE_POWER:\n        return BIN_IP_POWER;\n    case Pyc::INPLACE_RSHIFT:\n        return BIN_IP_RSHIFT;\n    case Pyc::INPLACE_SUBTRACT:\n        return BIN_IP_SUBTRACT;\n    case Pyc::INPLACE_TRUE_DIVIDE:\n        return BIN_IP_DIVIDE;\n    case Pyc::INPLACE_XOR:\n        return BIN_IP_XOR;\n    case Pyc::INPLACE_MATRIX_MULTIPLY:\n        return BIN_IP_MAT_MULTIPLY;\n    default:\n        return BIN_INVALID;\n    }\n}\n\nASTBinary::BinOp ASTBinary::from_binary_op(int operand)\n{\n    switch (operand) {\n    case 0:\n        return BIN_ADD;\n    case 1:\n        return BIN_AND;\n    case 2:\n        return BIN_FLOOR_DIVIDE;\n    case 3:\n        return BIN_LSHIFT;\n    case 4:\n        return BIN_MAT_MULTIPLY;\n    case 5:\n        return BIN_MULTIPLY;\n    case 6:\n        return BIN_MODULO;\n    case 7:\n        return BIN_OR;\n    case 8:\n        return BIN_POWER;\n    case 9:\n        return BIN_RSHIFT;\n    case 10:\n        return BIN_SUBTRACT;\n    case 11:\n        return BIN_DIVIDE;\n    case 12:\n        return BIN_XOR;\n    case 13:\n        return BIN_IP_ADD;\n    case 14:\n        return BIN_IP_AND;\n    case 15:\n        return BIN_IP_FLOOR_DIVIDE;\n    case 16:\n        return BIN_IP_LSHIFT;\n    case 17:\n        return BIN_MAT_MULTIPLY;\n    case 18:\n        return BIN_IP_MULTIPLY;\n    case 19:\n        return BIN_IP_MODULO;\n    case 20:\n        return BIN_IP_OR;\n    case 21:\n        return BIN_IP_POWER;\n    case 22:\n        return BIN_IP_RSHIFT;\n    case 23:\n        return BIN_IP_SUBTRACT;\n    case 24:\n        return BIN_IP_DIVIDE;\n    case 25:\n        return BIN_IP_XOR;\n    default:\n        return BIN_INVALID; // Return BIN_INVALID for out-of-range operand\n    }\n}\n\n\n/* ASTCompare */\nconst char* ASTCompare::op_str() const\n{\n    static const char* s_cmp_strings[] = {\n        \" < \", \" <= \", \" == \", \" != \", \" > \", \" >= \", \" in \", \" not in \", \" is \", \" is not \",\n        \"<EXCEPTION MATCH>\", \"<BAD>\"\n    };\n    return s_cmp_strings[op()];\n}\n\n\n/* ASTKeyword */\nconst char* ASTKeyword::word_str() const\n{\n    static const char* s_word_strings[] = {\n        \"pass\", \"break\", \"continue\"\n    };\n    return s_word_strings[key()];\n}\n\n\n/* ASTBlock */\nvoid ASTBlock::removeLast()\n{\n    list_t::iterator it = m_nodes.end();\n    --it;\n    m_nodes.erase(it);\n}\n\nvoid ASTBlock::removeFirst()\n{\n    m_nodes.erase(m_nodes.begin());\n}\n\nconst char* ASTBlock::type_str() const\n{\n    static const char* s_type_strings[] = {\n        \"\", \"if\", \"else\", \"elif\", \"try\", \"CONTAINER\", \"except\",\n        \"finally\", \"while\", \"for\", \"with\", \"async for\"\n    };\n    return s_type_strings[blktype()];\n}\n"
        },
        {
          "name": "ASTNode.h",
          "type": "blob",
          "size": 19.7939453125,
          "content": "#ifndef _PYC_ASTNODE_H\n#define _PYC_ASTNODE_H\n\n#include \"pyc_module.h\"\n#include <list>\n#include <deque>\n\n/* Similar interface to PycObject, so PycRef can work on it... *\n * However, this does *NOT* mean the two are interchangeable!  */\nclass ASTNode {\npublic:\n    enum Type {\n        NODE_INVALID, NODE_NODELIST, NODE_OBJECT, NODE_UNARY, NODE_BINARY,\n        NODE_COMPARE, NODE_SLICE, NODE_STORE, NODE_RETURN, NODE_NAME,\n        NODE_DELETE, NODE_FUNCTION, NODE_CLASS, NODE_CALL, NODE_IMPORT,\n        NODE_TUPLE, NODE_LIST, NODE_SET, NODE_MAP, NODE_SUBSCR, NODE_PRINT,\n        NODE_CONVERT, NODE_KEYWORD, NODE_RAISE, NODE_EXEC, NODE_BLOCK,\n        NODE_COMPREHENSION, NODE_LOADBUILDCLASS, NODE_AWAITABLE,\n        NODE_FORMATTEDVALUE, NODE_JOINEDSTR, NODE_CONST_MAP,\n        NODE_ANNOTATED_VAR, NODE_CHAINSTORE, NODE_TERNARY,\n        NODE_KW_NAMES_MAP,\n\n        // Empty node types\n        NODE_LOCALS,\n    };\n\n    ASTNode(int type = NODE_INVALID) : m_refs(), m_type(type), m_processed() { }\n    virtual ~ASTNode() { }\n\n    int type() const { return internalGetType(this); }\n\n    bool processed() const { return m_processed; }\n    void setProcessed() { m_processed = true; }\n\nprivate:\n    int m_refs;\n    int m_type;\n    bool m_processed;\n\n    // Hack to make clang happy :(\n    static int internalGetType(const ASTNode *node)\n    {\n        return node ? node->m_type : NODE_INVALID;\n    }\n\n    static void internalAddRef(ASTNode *node)\n    {\n        if (node)\n            ++node->m_refs;\n    }\n\n    static void internalDelRef(ASTNode *node)\n    {\n        if (node && --node->m_refs == 0)\n            delete node;\n    }\n\npublic:\n    void addRef() { internalAddRef(this); }\n    void delRef() { internalDelRef(this); }\n};\n\n\nclass ASTNodeList : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> list_t;\n\n    ASTNodeList(list_t nodes)\n        : ASTNode(NODE_NODELIST), m_nodes(std::move(nodes)) { }\n\n    const list_t& nodes() const { return m_nodes; }\n    void removeFirst();\n    void removeLast();\n    void append(PycRef<ASTNode> node) { m_nodes.emplace_back(std::move(node)); }\n\nprotected:\n    ASTNodeList(list_t nodes, ASTNode::Type type)\n        : ASTNode(type), m_nodes(std::move(nodes)) { }\n\nprivate:\n    list_t m_nodes;\n};\n\n\nclass ASTChainStore : public ASTNodeList {\npublic:\n    ASTChainStore(list_t nodes, PycRef<ASTNode> src)\n        : ASTNodeList(nodes, NODE_CHAINSTORE), m_src(std::move(src)) { }\n    \n    PycRef<ASTNode> src() const { return m_src; }\n\nprivate:\n    PycRef<ASTNode> m_src;\n};\n\n\nclass ASTObject : public ASTNode {\npublic:\n    ASTObject(PycRef<PycObject> obj)\n        : ASTNode(NODE_OBJECT), m_obj(std::move(obj)) { }\n\n    PycRef<PycObject> object() const { return m_obj; }\n\nprivate:\n    PycRef<PycObject> m_obj;\n};\n\n\nclass ASTUnary : public ASTNode {\npublic:\n    enum UnOp {\n        UN_POSITIVE, UN_NEGATIVE, UN_INVERT, UN_NOT\n    };\n\n    ASTUnary(PycRef<ASTNode> operand, int op)\n        : ASTNode(NODE_UNARY), m_op(op), m_operand(std::move(operand)) { }\n\n    PycRef<ASTNode> operand() const { return m_operand; }\n    int op() const { return m_op; }\n    virtual const char* op_str() const;\n\nprotected:\n    int m_op;\n\nprivate:\n    PycRef<ASTNode> m_operand;\n};\n\n\nclass ASTBinary : public ASTNode {\npublic:\n    enum BinOp {\n        BIN_ATTR, BIN_POWER, BIN_MULTIPLY, BIN_DIVIDE, BIN_FLOOR_DIVIDE,\n        BIN_MODULO, BIN_ADD, BIN_SUBTRACT, BIN_LSHIFT, BIN_RSHIFT, BIN_AND,\n        BIN_XOR, BIN_OR, BIN_LOG_AND, BIN_LOG_OR, BIN_MAT_MULTIPLY,\n        /* Inplace operations */\n        BIN_IP_ADD, BIN_IP_SUBTRACT, BIN_IP_MULTIPLY, BIN_IP_DIVIDE,\n        BIN_IP_MODULO, BIN_IP_POWER, BIN_IP_LSHIFT, BIN_IP_RSHIFT, BIN_IP_AND,\n        BIN_IP_XOR, BIN_IP_OR, BIN_IP_FLOOR_DIVIDE, BIN_IP_MAT_MULTIPLY,\n        /* Error Case */\n        BIN_INVALID\n    };\n\n    ASTBinary(PycRef<ASTNode> left, PycRef<ASTNode> right, int op,\n              int type = NODE_BINARY)\n        : ASTNode(type), m_op(op), m_left(std::move(left)), m_right(std::move(right)) { }\n\n    PycRef<ASTNode> left() const { return m_left; }\n    PycRef<ASTNode> right() const { return m_right; }\n    int op() const { return m_op; }\n    bool is_inplace() const { return m_op >= BIN_IP_ADD; }\n    virtual const char* op_str() const;\n\n    static BinOp from_opcode(int opcode);\n    static BinOp from_binary_op(int operand);\n\nprotected:\n    int m_op;\n\nprivate:\n    PycRef<ASTNode> m_left;\n    PycRef<ASTNode> m_right;\n};\n\n\nclass ASTCompare : public ASTBinary {\npublic:\n    enum CompareOp {\n        CMP_LESS, CMP_LESS_EQUAL, CMP_EQUAL, CMP_NOT_EQUAL, CMP_GREATER,\n        CMP_GREATER_EQUAL, CMP_IN, CMP_NOT_IN, CMP_IS, CMP_IS_NOT,\n        CMP_EXCEPTION, CMP_BAD\n    };\n\n    ASTCompare(PycRef<ASTNode> left, PycRef<ASTNode> right, int op)\n        : ASTBinary(std::move(left), std::move(right), op, NODE_COMPARE) { }\n\n    const char* op_str() const override;\n};\n\n\nclass ASTSlice : public ASTBinary {\npublic:\n    enum SliceOp {\n        SLICE0, SLICE1, SLICE2, SLICE3\n    };\n\n    ASTSlice(int op, PycRef<ASTNode> left = {}, PycRef<ASTNode> right = {})\n        : ASTBinary(std::move(left), std::move(right), op, NODE_SLICE) { }\n};\n\n\nclass ASTStore : public ASTNode {\npublic:\n    ASTStore(PycRef<ASTNode> src, PycRef<ASTNode> dest)\n        : ASTNode(NODE_STORE), m_src(std::move(src)), m_dest(std::move(dest)) { }\n\n    PycRef<ASTNode> src() const { return m_src; }\n    PycRef<ASTNode> dest() const { return m_dest; }\n\nprivate:\n    PycRef<ASTNode> m_src;\n    PycRef<ASTNode> m_dest;\n};\n\n\nclass ASTReturn : public ASTNode {\npublic:\n    enum RetType {\n        RETURN, YIELD, YIELD_FROM\n    };\n\n    ASTReturn(PycRef<ASTNode> value, RetType rettype = RETURN)\n        : ASTNode(NODE_RETURN), m_value(std::move(value)), m_rettype(rettype) { }\n\n    PycRef<ASTNode> value() const { return m_value; }\n    RetType rettype() const { return m_rettype; }\n\nprivate:\n    PycRef<ASTNode> m_value;\n    RetType m_rettype;\n};\n\n\nclass ASTName : public ASTNode {\npublic:\n    ASTName(PycRef<PycString> name)\n        : ASTNode(NODE_NAME), m_name(std::move(name)) { }\n\n    PycRef<PycString> name() const { return m_name; }\n\nprivate:\n    PycRef<PycString> m_name;\n};\n\n\nclass ASTDelete : public ASTNode {\npublic:\n    ASTDelete(PycRef<ASTNode> value)\n        : ASTNode(NODE_DELETE), m_value(std::move(value)) { }\n\n    PycRef<ASTNode> value() const { return m_value; }\n\nprivate:\n    PycRef<ASTNode> m_value;\n};\n\n\nclass ASTFunction : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> defarg_t;\n\n    ASTFunction(PycRef<ASTNode> code, defarg_t defArgs, defarg_t kwDefArgs)\n        : ASTNode(NODE_FUNCTION), m_code(std::move(code)),\n          m_defargs(std::move(defArgs)), m_kwdefargs(std::move(kwDefArgs)) { }\n\n    PycRef<ASTNode> code() const { return m_code; }\n    const defarg_t& defargs() const { return m_defargs; }\n    const defarg_t& kwdefargs() const { return m_kwdefargs; }\n\nprivate:\n    PycRef<ASTNode> m_code;\n    defarg_t m_defargs;\n    defarg_t m_kwdefargs;\n};\n\n\nclass ASTClass : public ASTNode {\npublic:\n    ASTClass(PycRef<ASTNode> code, PycRef<ASTNode> bases, PycRef<ASTNode> name)\n        : ASTNode(NODE_CLASS), m_code(std::move(code)), m_bases(std::move(bases)),\n          m_name(std::move(name)) { }\n\n    PycRef<ASTNode> code() const { return m_code; }\n    PycRef<ASTNode> bases() const { return m_bases; }\n    PycRef<ASTNode> name() const { return m_name; }\n\nprivate:\n    PycRef<ASTNode> m_code;\n    PycRef<ASTNode> m_bases;\n    PycRef<ASTNode> m_name;\n};\n\n\nclass ASTCall : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> pparam_t;\n    typedef std::list<std::pair<PycRef<ASTNode>, PycRef<ASTNode>>> kwparam_t;\n\n    ASTCall(PycRef<ASTNode> func, pparam_t pparams, kwparam_t kwparams)\n        : ASTNode(NODE_CALL), m_func(std::move(func)), m_pparams(std::move(pparams)),\n          m_kwparams(std::move(kwparams)) { }\n\n    PycRef<ASTNode> func() const { return m_func; }\n    const pparam_t& pparams() const { return m_pparams; }\n    const kwparam_t& kwparams() const { return m_kwparams; }\n    PycRef<ASTNode> var() const { return m_var; }\n    PycRef<ASTNode> kw() const { return m_kw; }\n\n    bool hasVar() const { return m_var != nullptr; }\n    bool hasKW() const { return m_kw != nullptr; }\n\n    void setVar(PycRef<ASTNode> var) { m_var = std::move(var); }\n    void setKW(PycRef<ASTNode> kw) { m_kw = std::move(kw); }\n\nprivate:\n    PycRef<ASTNode> m_func;\n    pparam_t m_pparams;\n    kwparam_t m_kwparams;\n    PycRef<ASTNode> m_var;\n    PycRef<ASTNode> m_kw;\n};\n\n\nclass ASTImport : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTStore>> list_t;\n\n    ASTImport(PycRef<ASTNode> name, PycRef<ASTNode> fromlist)\n        : ASTNode(NODE_IMPORT), m_name(std::move(name)), m_fromlist(std::move(fromlist)) { }\n\n    PycRef<ASTNode> name() const { return m_name; }\n    list_t stores() const { return m_stores; }\n    void add_store(PycRef<ASTStore> store) { m_stores.emplace_back(std::move(store)); }\n\n    PycRef<ASTNode> fromlist() const { return m_fromlist; }\n\nprivate:\n    PycRef<ASTNode> m_name;\n    list_t m_stores;\n\n    PycRef<ASTNode> m_fromlist;\n};\n\n\nclass ASTTuple : public ASTNode {\npublic:\n    typedef std::vector<PycRef<ASTNode>> value_t;\n\n    ASTTuple(value_t values)\n        : ASTNode(NODE_TUPLE), m_values(std::move(values)),\n          m_requireParens(true) { }\n\n    const value_t& values() const { return m_values; }\n    void add(PycRef<ASTNode> name) { m_values.emplace_back(std::move(name)); }\n\n    void setRequireParens(bool require) { m_requireParens = require; }\n    bool requireParens() const { return m_requireParens; }\n\nprivate:\n    value_t m_values;\n    bool m_requireParens;\n};\n\n\nclass ASTList : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> value_t;\n\n    ASTList(value_t values)\n        : ASTNode(NODE_LIST), m_values(std::move(values)) { }\n\n    const value_t& values() const { return m_values; }\n\nprivate:\n    value_t m_values;\n};\n\nclass ASTSet : public ASTNode {\npublic:\n    typedef std::deque<PycRef<ASTNode>> value_t;\n\n    ASTSet(value_t values)\n        : ASTNode(NODE_SET), m_values(std::move(values)) { }\n\n    const value_t& values() const { return m_values; }\n\nprivate:\n    value_t m_values;\n};\n\nclass ASTMap : public ASTNode {\npublic:\n    typedef std::list<std::pair<PycRef<ASTNode>, PycRef<ASTNode>>> map_t;\n\n    ASTMap() : ASTNode(NODE_MAP) { }\n\n    void add(PycRef<ASTNode> key, PycRef<ASTNode> value)\n    {\n        m_values.emplace_back(std::move(key), std::move(value));\n    }\n\n    const map_t& values() const { return m_values; }\n\nprivate:\n    map_t m_values;\n};\n\nclass ASTKwNamesMap : public ASTNode {\npublic:\n    typedef std::list<std::pair<PycRef<ASTNode>, PycRef<ASTNode>>> map_t;\n\n    ASTKwNamesMap() : ASTNode(NODE_KW_NAMES_MAP) { }\n\n    void add(PycRef<ASTNode> key, PycRef<ASTNode> value)\n    {\n        m_values.emplace_back(std::move(key), std::move(value));\n    }\n\n    const map_t& values() const { return m_values; }\n\nprivate:\n    map_t m_values;\n};\n\nclass ASTConstMap : public ASTNode {\npublic:\n    typedef std::vector<PycRef<ASTNode>> values_t;\n\n    ASTConstMap(PycRef<ASTNode> keys, const values_t& values)\n        : ASTNode(NODE_CONST_MAP), m_keys(std::move(keys)), m_values(std::move(values)) { }\n\n    const PycRef<ASTNode>& keys() const { return m_keys; }\n    const values_t& values() const { return m_values; }\n\nprivate:\n    PycRef<ASTNode> m_keys;\n    values_t m_values;\n};\n\n\nclass ASTSubscr : public ASTNode {\npublic:\n    ASTSubscr(PycRef<ASTNode> name, PycRef<ASTNode> key)\n        : ASTNode(NODE_SUBSCR), m_name(std::move(name)), m_key(std::move(key)) { }\n\n    PycRef<ASTNode> name() const { return m_name; }\n    PycRef<ASTNode> key() const { return m_key; }\n\nprivate:\n    PycRef<ASTNode> m_name;\n    PycRef<ASTNode> m_key;\n};\n\n\nclass ASTPrint : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> values_t;\n\n    ASTPrint(PycRef<ASTNode> value, PycRef<ASTNode> stream = {})\n        : ASTNode(NODE_PRINT), m_stream(std::move(stream)), m_eol()\n    {\n        if (value != nullptr)\n            m_values.emplace_back(std::move(value));\n        else\n            m_eol = true;\n    }\n\n    values_t values() const { return m_values; }\n    PycRef<ASTNode> stream() const { return m_stream; }\n    bool eol() const { return m_eol; }\n\n    void add(PycRef<ASTNode> value) { m_values.emplace_back(std::move(value)); }\n    void setEol(bool eol) { m_eol = eol; }\n\nprivate:\n    values_t m_values;\n    PycRef<ASTNode> m_stream;\n    bool m_eol;\n};\n\n\nclass ASTConvert : public ASTNode {\npublic:\n    ASTConvert(PycRef<ASTNode> name)\n        : ASTNode(NODE_CONVERT), m_name(std::move(name)) { }\n\n    PycRef<ASTNode> name() const { return m_name; }\n\nprivate:\n    PycRef<ASTNode> m_name;\n};\n\n\nclass ASTKeyword : public ASTNode {\npublic:\n    enum Word {\n        KW_PASS, KW_BREAK, KW_CONTINUE\n    };\n\n    ASTKeyword(Word key) : ASTNode(NODE_KEYWORD), m_key(key) { }\n\n    Word key() const { return m_key; }\n    const char* word_str() const;\n\nprivate:\n    Word m_key;\n};\n\n\nclass ASTRaise : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> param_t;\n\n    ASTRaise(param_t params) : ASTNode(NODE_RAISE), m_params(std::move(params)) { }\n\n    const param_t& params() const { return m_params; }\n\nprivate:\n    param_t m_params;\n};\n\n\nclass ASTExec : public ASTNode {\npublic:\n    ASTExec(PycRef<ASTNode> stmt, PycRef<ASTNode> glob, PycRef<ASTNode> loc)\n        : ASTNode(NODE_EXEC), m_stmt(std::move(stmt)), m_glob(std::move(glob)),\n          m_loc(std::move(loc)) { }\n\n    PycRef<ASTNode> statement() const { return m_stmt; }\n    PycRef<ASTNode> globals() const { return m_glob; }\n    PycRef<ASTNode> locals() const { return m_loc; }\n\nprivate:\n    PycRef<ASTNode> m_stmt;\n    PycRef<ASTNode> m_glob;\n    PycRef<ASTNode> m_loc;\n};\n\n\nclass ASTBlock : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> list_t;\n\n    enum BlkType {\n        BLK_MAIN, BLK_IF, BLK_ELSE, BLK_ELIF, BLK_TRY,\n        BLK_CONTAINER, BLK_EXCEPT, BLK_FINALLY,\n        BLK_WHILE, BLK_FOR, BLK_WITH, BLK_ASYNCFOR\n    };\n\n    ASTBlock(BlkType blktype, int end = 0, int inited = 0)\n        : ASTNode(NODE_BLOCK), m_blktype(blktype), m_end(end), m_inited(inited) { }\n\n    BlkType blktype() const { return m_blktype; }\n    int end() const { return m_end; }\n    const list_t& nodes() const { return m_nodes; }\n    list_t::size_type size() const { return m_nodes.size(); }\n    void removeFirst();\n    void removeLast();\n    void append(PycRef<ASTNode> node) { m_nodes.emplace_back(std::move(node)); }\n    const char* type_str() const;\n\n    virtual int inited() const { return m_inited; }\n    virtual void init() { m_inited = 1; }\n    virtual void init(int init) { m_inited = init; }\n\n    void setEnd(int end) { m_end = end; }\n\nprivate:\n    BlkType m_blktype;\n    int m_end;\n    list_t m_nodes;\n\nprotected:\n    int m_inited;   /* Is the block's definition \"complete\" */\n};\n\n\nclass ASTCondBlock : public ASTBlock {\npublic:\n    enum InitCond {\n        UNINITED, POPPED, PRE_POPPED\n    };\n\n    ASTCondBlock(ASTBlock::BlkType blktype, int end, PycRef<ASTNode> cond,\n                 bool negative = false)\n        : ASTBlock(blktype, end), m_cond(std::move(cond)), m_negative(negative) { }\n\n    PycRef<ASTNode> cond() const { return m_cond; }\n    bool negative() const { return m_negative; }\n\nprivate:\n    PycRef<ASTNode> m_cond;\n    bool m_negative;\n};\n\n\nclass ASTIterBlock : public ASTBlock {\npublic:\n    ASTIterBlock(ASTBlock::BlkType blktype, int start, int end, PycRef<ASTNode> iter)\n        : ASTBlock(blktype, end), m_iter(std::move(iter)), m_idx(), m_comp(), m_start(start) { }\n\n    PycRef<ASTNode> iter() const { return m_iter; }\n    PycRef<ASTNode> index() const { return m_idx; }\n    PycRef<ASTNode> condition() const { return m_cond; }\n    bool isComprehension() const { return m_comp; }\n    int start() const { return m_start; }\n\n    void setIndex(PycRef<ASTNode> idx) { m_idx = std::move(idx); init(); }\n    void setCondition(PycRef<ASTNode> cond) { m_cond = std::move(cond); }\n    void setComprehension(bool comp) { m_comp = comp; }\n\nprivate:\n    PycRef<ASTNode> m_iter;\n    PycRef<ASTNode> m_idx;\n    PycRef<ASTNode> m_cond;\n    bool m_comp;\n    int m_start;\n};\n\nclass ASTContainerBlock : public ASTBlock {\npublic:\n    ASTContainerBlock(int finally, int except = 0)\n        : ASTBlock(ASTBlock::BLK_CONTAINER, 0), m_finally(finally), m_except(except) { }\n\n    bool hasFinally() const { return m_finally != 0; }\n    bool hasExcept() const { return m_except != 0; }\n    int finally() const { return m_finally; }\n    int except() const { return m_except; }\n\n    void setExcept(int except) { m_except = except; }\n\nprivate:\n    int m_finally;\n    int m_except;\n};\n\nclass ASTWithBlock : public ASTBlock {\npublic:\n    ASTWithBlock(int end)\n        : ASTBlock(ASTBlock::BLK_WITH, end) { }\n\n    PycRef<ASTNode> expr() const { return m_expr; }\n    PycRef<ASTNode> var() const { return m_var; }\n\n    void setExpr(PycRef<ASTNode> expr) { m_expr = std::move(expr); init(); }\n    void setVar(PycRef<ASTNode> var) { m_var = std::move(var); }\n\nprivate:\n    PycRef<ASTNode> m_expr;\n    PycRef<ASTNode> m_var;      // optional value\n};\n\nclass ASTComprehension : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTIterBlock>> generator_t;\n\n    ASTComprehension(PycRef<ASTNode> result)\n        : ASTNode(NODE_COMPREHENSION), m_result(std::move(result)) { }\n\n    PycRef<ASTNode> result() const { return m_result; }\n    generator_t generators() const { return m_generators; }\n\n    void addGenerator(PycRef<ASTIterBlock> gen) {\n        m_generators.emplace_front(std::move(gen));\n    }\n\nprivate:\n    PycRef<ASTNode> m_result;\n    generator_t m_generators;\n\n};\n\nclass ASTLoadBuildClass : public ASTNode {\npublic:\n    ASTLoadBuildClass(PycRef<PycObject> obj)\n        : ASTNode(NODE_LOADBUILDCLASS), m_obj(std::move(obj)) { }\n\n    PycRef<PycObject> object() const { return m_obj; }\n\nprivate:\n    PycRef<PycObject> m_obj;\n};\n\nclass ASTAwaitable : public ASTNode {\npublic:\n    ASTAwaitable(PycRef<ASTNode> expr)\n        : ASTNode(NODE_AWAITABLE), m_expr(std::move(expr)) { }\n\n    PycRef<ASTNode> expression() const { return m_expr; }\n\nprivate:\n    PycRef<ASTNode> m_expr;\n};\n\nclass ASTFormattedValue : public ASTNode {\npublic:\n    enum ConversionFlag {\n        NONE = 0,\n        STR = 1,\n        REPR = 2,\n        ASCII = 3,\n        CONVERSION_MASK = 0x03,\n\n        HAVE_FMT_SPEC = 4,\n    };\n\n    ASTFormattedValue(PycRef<ASTNode> val, ConversionFlag conversion,\n                      PycRef<ASTNode> format_spec)\n        : ASTNode(NODE_FORMATTEDVALUE),\n          m_val(std::move(val)),\n          m_conversion(conversion),\n          m_format_spec(std::move(format_spec))\n    { }\n\n    PycRef<ASTNode> val() const { return m_val; }\n    ConversionFlag conversion() const { return m_conversion; }\n    PycRef<ASTNode> format_spec() const { return m_format_spec; }\n\nprivate:\n    PycRef<ASTNode> m_val;\n    ConversionFlag m_conversion;\n    PycRef<ASTNode> m_format_spec;\n};\n\n// Same as ASTList\nclass ASTJoinedStr : public ASTNode {\npublic:\n    typedef std::list<PycRef<ASTNode>> value_t;\n\n    ASTJoinedStr(value_t values)\n        : ASTNode(NODE_JOINEDSTR), m_values(std::move(values)) { }\n\n    const value_t& values() const { return m_values; }\n\nprivate:\n    value_t m_values;\n};\n\nclass ASTAnnotatedVar : public ASTNode {\npublic:\n    ASTAnnotatedVar(PycRef<ASTNode> name, PycRef<ASTNode> type)\n        : ASTNode(NODE_ANNOTATED_VAR), m_name(std::move(name)), m_type(std::move(type)) { }\n\n    PycRef<ASTNode> name() const noexcept { return m_name; }\n    PycRef<ASTNode> annotation() const noexcept { return m_type; }\n\nprivate:\n    PycRef<ASTNode> m_name;\n    PycRef<ASTNode> m_type;\n};\n\nclass ASTTernary : public ASTNode\n{\npublic:\n    ASTTernary(PycRef<ASTNode> if_block, PycRef<ASTNode> if_expr,\n               PycRef<ASTNode> else_expr)\n        : ASTNode(NODE_TERNARY), m_if_block(std::move(if_block)),\n          m_if_expr(std::move(if_expr)), m_else_expr(std::move(else_expr)) { }\n\n    PycRef<ASTNode> if_block() const noexcept { return m_if_block; }\n    PycRef<ASTNode> if_expr() const noexcept { return m_if_expr; }\n    PycRef<ASTNode> else_expr() const noexcept { return m_else_expr; }\n\nprivate:\n    PycRef<ASTNode> m_if_block; // contains \"condition\" and \"negative\"\n    PycRef<ASTNode> m_if_expr;\n    PycRef<ASTNode> m_else_expr;\n};\n\n#endif\n"
        },
        {
          "name": "ASTree.cpp",
          "type": "blob",
          "size": 135.869140625,
          "content": "#include <cstring>\n#include <cstdint>\n#include <stdexcept>\n#include \"ASTree.h\"\n#include \"FastStack.h\"\n#include \"pyc_numeric.h\"\n#include \"bytecode.h\"\n\n// This must be a triple quote (''' or \"\"\"), to handle interpolated string literals containing the opposite quote style.\n// E.g. f'''{\"interpolated \"123' literal\"}'''    -> valid.\n// E.g. f\"\"\"{\"interpolated \"123' literal\"}\"\"\"    -> valid.\n// E.g. f'{\"interpolated \"123' literal\"}'        -> invalid, unescaped quotes in literal.\n// E.g. f'{\"interpolated \\\"123\\' literal\"}'      -> invalid, f-string expression does not allow backslash.\n// NOTE: Nested f-strings not supported.\n#define F_STRING_QUOTE \"'''\"\n\nstatic void append_to_chain_store(const PycRef<ASTNode>& chainStore,\n        PycRef<ASTNode> item, FastStack& stack, const PycRef<ASTBlock>& curblock);\n\n/* Use this to determine if an error occurred (and therefore, if we should\n * avoid cleaning the output tree) */\nstatic bool cleanBuild;\n\n/* Use this to prevent printing return keywords and newlines in lambdas. */\nstatic bool inLambda = false;\n\n/* Use this to keep track of whether we need to print out any docstring and\n * the list of global variables that we are using (such as inside a function). */\nstatic bool printDocstringAndGlobals = false;\n\n/* Use this to keep track of whether we need to print a class or module docstring */\nstatic bool printClassDocstring = true;\n\n// shortcut for all top/pop calls\nstatic PycRef<ASTNode> StackPopTop(FastStack& stack)\n{\n    const auto node(stack.top());\n    stack.pop();\n    return node;\n}\n\n/* compiler generates very, VERY similar byte code for if/else statement block and if-expression\n *  statement\n *      if a: b = 1\n *      else: b = 2\n *  expression:\n *      b = 1 if a else 2\n *  (see for instance https://stackoverflow.com/a/52202007)\n *  here, try to guess if just finished else statement is part of if-expression (ternary operator)\n *  if it is, remove statements from the block and put a ternary node on top of stack\n */\nstatic void CheckIfExpr(FastStack& stack, PycRef<ASTBlock> curblock)\n{\n    if (stack.empty())\n        return;\n    if (curblock->nodes().size() < 2)\n        return;\n    auto rit = curblock->nodes().crbegin();\n    // the last is \"else\" block, the one before should be \"if\" (could be \"for\", ...)\n    if ((*rit)->type() != ASTNode::NODE_BLOCK ||\n        (*rit).cast<ASTBlock>()->blktype() != ASTBlock::BLK_ELSE)\n        return;\n    ++rit;\n    if ((*rit)->type() != ASTNode::NODE_BLOCK ||\n        (*rit).cast<ASTBlock>()->blktype() != ASTBlock::BLK_IF)\n        return;\n    auto else_expr = StackPopTop(stack);\n    curblock->removeLast();\n    auto if_block = curblock->nodes().back();\n    auto if_expr = StackPopTop(stack);\n    curblock->removeLast();\n    stack.push(new ASTTernary(std::move(if_block), std::move(if_expr), std::move(else_expr)));\n}\n\nPycRef<ASTNode> BuildFromCode(PycRef<PycCode> code, PycModule* mod)\n{\n    PycBuffer source(code->code()->value(), code->code()->length());\n\n    FastStack stack((mod->majorVer() == 1) ? 20 : code->stackSize());\n    stackhist_t stack_hist;\n\n    std::stack<PycRef<ASTBlock> > blocks;\n    PycRef<ASTBlock> defblock = new ASTBlock(ASTBlock::BLK_MAIN);\n    defblock->init();\n    PycRef<ASTBlock> curblock = defblock;\n    blocks.push(defblock);\n\n    int opcode, operand;\n    int curpos = 0;\n    int pos = 0;\n    int unpack = 0;\n    bool else_pop = false;\n    bool need_try = false;\n    bool variable_annotations = false;\n\n    while (!source.atEof()) {\n#if defined(BLOCK_DEBUG) || defined(STACK_DEBUG)\n        fprintf(stderr, \"%-7d\", pos);\n    #ifdef STACK_DEBUG\n        fprintf(stderr, \"%-5d\", (unsigned int)stack_hist.size() + 1);\n    #endif\n    #ifdef BLOCK_DEBUG\n        for (unsigned int i = 0; i < blocks.size(); i++)\n            fprintf(stderr, \"    \");\n        fprintf(stderr, \"%s (%d)\", curblock->type_str(), curblock->end());\n    #endif\n        fprintf(stderr, \"\\n\");\n#endif\n\n        curpos = pos;\n        bc_next(source, mod, opcode, operand, pos);\n\n        if (need_try && opcode != Pyc::SETUP_EXCEPT_A) {\n            need_try = false;\n\n            /* Store the current stack for the except/finally statement(s) */\n            stack_hist.push(stack);\n            PycRef<ASTBlock> tryblock = new ASTBlock(ASTBlock::BLK_TRY, curblock->end(), true);\n            blocks.push(tryblock);\n            curblock = blocks.top();\n        } else if (else_pop\n                && opcode != Pyc::JUMP_FORWARD_A\n                && opcode != Pyc::JUMP_IF_FALSE_A\n                && opcode != Pyc::JUMP_IF_FALSE_OR_POP_A\n                && opcode != Pyc::POP_JUMP_IF_FALSE_A\n                && opcode != Pyc::POP_JUMP_FORWARD_IF_FALSE_A\n                && opcode != Pyc::JUMP_IF_TRUE_A\n                && opcode != Pyc::JUMP_IF_TRUE_OR_POP_A\n                && opcode != Pyc::POP_JUMP_IF_TRUE_A\n                && opcode != Pyc::POP_JUMP_FORWARD_IF_TRUE_A\n                && opcode != Pyc::POP_BLOCK) {\n            else_pop = false;\n\n            PycRef<ASTBlock> prev = curblock;\n            while (prev->end() < pos\n                    && prev->blktype() != ASTBlock::BLK_MAIN) {\n                if (prev->blktype() != ASTBlock::BLK_CONTAINER) {\n                    if (prev->end() == 0) {\n                        break;\n                    }\n\n                    /* We want to keep the stack the same, but we need to pop\n                     * a level off the history. */\n                    //stack = stack_hist.top();\n                    if (!stack_hist.empty())\n                        stack_hist.pop();\n                }\n                blocks.pop();\n\n                if (blocks.empty())\n                    break;\n\n                curblock = blocks.top();\n                curblock->append(prev.cast<ASTNode>());\n\n                prev = curblock;\n\n                CheckIfExpr(stack, curblock);\n            }\n        }\n\n        switch (opcode) {\n        case Pyc::BINARY_OP_A:\n            {\n                ASTBinary::BinOp op = ASTBinary::from_binary_op(operand);\n                if (op == ASTBinary::BIN_INVALID)\n                    fprintf(stderr, \"Unsupported `BINARY_OP` operand value: %d\\n\", operand);\n                PycRef<ASTNode> right = stack.top();\n                stack.pop();\n                PycRef<ASTNode> left = stack.top();\n                stack.pop();\n                stack.push(new ASTBinary(left, right, op));\n            }\n            break;\n        case Pyc::BINARY_ADD:\n        case Pyc::BINARY_AND:\n        case Pyc::BINARY_DIVIDE:\n        case Pyc::BINARY_FLOOR_DIVIDE:\n        case Pyc::BINARY_LSHIFT:\n        case Pyc::BINARY_MODULO:\n        case Pyc::BINARY_MULTIPLY:\n        case Pyc::BINARY_OR:\n        case Pyc::BINARY_POWER:\n        case Pyc::BINARY_RSHIFT:\n        case Pyc::BINARY_SUBTRACT:\n        case Pyc::BINARY_TRUE_DIVIDE:\n        case Pyc::BINARY_XOR:\n        case Pyc::BINARY_MATRIX_MULTIPLY:\n        case Pyc::INPLACE_ADD:\n        case Pyc::INPLACE_AND:\n        case Pyc::INPLACE_DIVIDE:\n        case Pyc::INPLACE_FLOOR_DIVIDE:\n        case Pyc::INPLACE_LSHIFT:\n        case Pyc::INPLACE_MODULO:\n        case Pyc::INPLACE_MULTIPLY:\n        case Pyc::INPLACE_OR:\n        case Pyc::INPLACE_POWER:\n        case Pyc::INPLACE_RSHIFT:\n        case Pyc::INPLACE_SUBTRACT:\n        case Pyc::INPLACE_TRUE_DIVIDE:\n        case Pyc::INPLACE_XOR:\n        case Pyc::INPLACE_MATRIX_MULTIPLY:\n            {\n                ASTBinary::BinOp op = ASTBinary::from_opcode(opcode);\n                if (op == ASTBinary::BIN_INVALID)\n                    throw std::runtime_error(\"Unhandled opcode from ASTBinary::from_opcode\");\n                PycRef<ASTNode> right = stack.top();\n                stack.pop();\n                PycRef<ASTNode> left = stack.top();\n                stack.pop();\n                stack.push(new ASTBinary(left, right, op));\n            }\n            break;\n        case Pyc::BINARY_SUBSCR:\n            {\n                PycRef<ASTNode> subscr = stack.top();\n                stack.pop();\n                PycRef<ASTNode> src = stack.top();\n                stack.pop();\n                stack.push(new ASTSubscr(src, subscr));\n            }\n            break;\n        case Pyc::BREAK_LOOP:\n            curblock->append(new ASTKeyword(ASTKeyword::KW_BREAK));\n            break;\n        case Pyc::BUILD_CLASS:\n            {\n                PycRef<ASTNode> class_code = stack.top();\n                stack.pop();\n                PycRef<ASTNode> bases = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n                stack.push(new ASTClass(class_code, bases, name));\n            }\n            break;\n        case Pyc::BUILD_FUNCTION:\n            {\n                PycRef<ASTNode> fun_code = stack.top();\n                stack.pop();\n                stack.push(new ASTFunction(fun_code, {}, {}));\n            }\n            break;\n        case Pyc::BUILD_LIST_A:\n            {\n                ASTList::value_t values;\n                for (int i=0; i<operand; i++) {\n                    values.push_front(stack.top());\n                    stack.pop();\n                }\n                stack.push(new ASTList(values));\n            }\n            break;\n        case Pyc::BUILD_SET_A:\n            {\n                ASTSet::value_t values;\n                for (int i=0; i<operand; i++) {\n                    values.push_front(stack.top());\n                    stack.pop();\n                }\n                stack.push(new ASTSet(values));\n            }\n            break;\n        case Pyc::BUILD_MAP_A:\n            if (mod->verCompare(3, 5) >= 0) {\n                auto map = new ASTMap;\n                for (int i=0; i<operand; ++i) {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> key = stack.top();\n                    stack.pop();\n                    map->add(key, value);\n                }\n                stack.push(map);\n            } else {\n                if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    stack.pop();\n                }\n                stack.push(new ASTMap());\n            }\n            break;\n        case Pyc::BUILD_CONST_KEY_MAP_A:\n            // Top of stack will be a tuple of keys.\n            // Values will start at TOS - 1.\n            {\n                PycRef<ASTNode> keys = stack.top();\n                stack.pop();\n\n                ASTConstMap::values_t values;\n                values.reserve(operand);\n                for (int i = 0; i < operand; ++i) {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    values.push_back(value);\n                }\n\n                stack.push(new ASTConstMap(keys, values));\n            }\n            break;\n        case Pyc::STORE_MAP:\n            {\n                PycRef<ASTNode> key = stack.top();\n                stack.pop();\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n                PycRef<ASTMap> map = stack.top().cast<ASTMap>();\n                map->add(key, value);\n            }\n            break;\n        case Pyc::BUILD_SLICE_A:\n            {\n                if (operand == 2) {\n                    PycRef<ASTNode> end = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> start = stack.top();\n                    stack.pop();\n\n                    if (start.type() == ASTNode::NODE_OBJECT\n                            && start.cast<ASTObject>()->object() == Pyc_None) {\n                        start = NULL;\n                    }\n\n                    if (end.type() == ASTNode::NODE_OBJECT\n                            && end.cast<ASTObject>()->object() == Pyc_None) {\n                        end = NULL;\n                    }\n\n                    if (start == NULL && end == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE0));\n                    } else if (start == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE2, start, end));\n                    } else if (end == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE1, start, end));\n                    } else {\n                        stack.push(new ASTSlice(ASTSlice::SLICE3, start, end));\n                    }\n                } else if (operand == 3) {\n                    PycRef<ASTNode> step = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> end = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> start = stack.top();\n                    stack.pop();\n\n                    if (start.type() == ASTNode::NODE_OBJECT\n                            && start.cast<ASTObject>()->object() == Pyc_None) {\n                        start = NULL;\n                    }\n\n                    if (end.type() == ASTNode::NODE_OBJECT\n                            && end.cast<ASTObject>()->object() == Pyc_None) {\n                        end = NULL;\n                    }\n\n                    if (step.type() == ASTNode::NODE_OBJECT\n                            && step.cast<ASTObject>()->object() == Pyc_None) {\n                        step = NULL;\n                    }\n\n                    /* We have to do this as a slice where one side is another slice */\n                    /* [[a:b]:c] */\n\n                    if (start == NULL && end == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE0));\n                    } else if (start == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE2, start, end));\n                    } else if (end == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE1, start, end));\n                    } else {\n                        stack.push(new ASTSlice(ASTSlice::SLICE3, start, end));\n                    }\n\n                    PycRef<ASTNode> lhs = stack.top();\n                    stack.pop();\n\n                    if (step == NULL) {\n                        stack.push(new ASTSlice(ASTSlice::SLICE1, lhs, step));\n                    } else {\n                        stack.push(new ASTSlice(ASTSlice::SLICE3, lhs, step));\n                    }\n                }\n            }\n            break;\n        case Pyc::BUILD_STRING_A:\n            {\n                // Nearly identical logic to BUILD_LIST\n                ASTList::value_t values;\n                for (int i = 0; i < operand; i++) {\n                    values.push_front(stack.top());\n                    stack.pop();\n                }\n                stack.push(new ASTJoinedStr(values));\n            }\n            break;\n        case Pyc::BUILD_TUPLE_A:\n            {\n                // if class is a closure code, ignore this tuple\n                PycRef<ASTNode> tos = stack.top();\n                if (tos && tos->type() == ASTNode::NODE_LOADBUILDCLASS) {\n                    break;\n                }\n\n                ASTTuple::value_t values;\n                values.resize(operand);\n                for (int i=0; i<operand; i++) {\n                    values[operand-i-1] = stack.top();\n                    stack.pop();\n                }\n                stack.push(new ASTTuple(values));\n            }\n            break;\n        case Pyc::KW_NAMES_A:\n            {\n\n                int kwparams = code->getConst(operand).cast<PycTuple>()->size();\n                ASTKwNamesMap kwparamList;\n                std::vector<PycRef<PycObject>> keys = code->getConst(operand).cast<PycSimpleSequence>()->values();\n                for (int i = 0; i < kwparams; i++) {\n                    kwparamList.add(new ASTObject(keys[kwparams - i - 1]), stack.top());\n                    stack.pop();\n                }\n                stack.push(new ASTKwNamesMap(kwparamList));\n            }\n            break;\n        case Pyc::CALL_A:\n        case Pyc::CALL_FUNCTION_A:\n        case Pyc::INSTRUMENTED_CALL_A:\n            {\n                int kwparams = (operand & 0xFF00) >> 8;\n                int pparams = (operand & 0xFF);\n                ASTCall::kwparam_t kwparamList;\n                ASTCall::pparam_t pparamList;\n\n                /* Test for the load build class function */\n                stack_hist.push(stack);\n                int basecnt = 0;\n                ASTTuple::value_t bases;\n                bases.resize(basecnt);\n                PycRef<ASTNode> TOS = stack.top();\n                int TOS_type = TOS.type();\n                // bases are NODE_NAME and NODE_BINARY at TOS\n                while (TOS_type == ASTNode::NODE_NAME || TOS_type == ASTNode::NODE_BINARY) {\n                    bases.resize(basecnt + 1);\n                    bases[basecnt] = TOS;\n                    basecnt++;\n                    stack.pop();\n                    TOS = stack.top();\n                    TOS_type = TOS.type();\n                }\n                // qualified name is PycString at TOS\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n                PycRef<ASTNode> function = stack.top();\n                stack.pop();\n                PycRef<ASTNode> loadbuild = stack.top();\n                stack.pop();\n                int loadbuild_type = loadbuild.type();\n                if (loadbuild_type == ASTNode::NODE_LOADBUILDCLASS) {\n                    PycRef<ASTNode> call = new ASTCall(function, pparamList, kwparamList);\n                    stack.push(new ASTClass(call, new ASTTuple(bases), name));\n                    stack_hist.pop();\n                    break;\n                }\n                else\n                {\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n                }\n\n                /*\n                KW_NAMES(i)\n                    Stores a reference to co_consts[consti] into an internal variable for use by CALL.\n                    co_consts[consti] must be a tuple of strings.\n                    New in version 3.11.\n                */\n                if (mod->verCompare(3, 11) >= 0) {\n                    PycRef<ASTNode> object_or_map = stack.top();\n                    if (object_or_map.type() == ASTNode::NODE_KW_NAMES_MAP) {\n                        stack.pop();\n                        PycRef<ASTKwNamesMap> kwparams_map = object_or_map.cast<ASTKwNamesMap>();\n                        for (ASTKwNamesMap::map_t::const_iterator it = kwparams_map->values().begin(); it != kwparams_map->values().end(); it++) {\n                            kwparamList.push_front(std::make_pair(it->first, it->second));\n                            pparams -= 1;\n                        }\n                    }\n                }\n                else {\n                    for (int i = 0; i < kwparams; i++) {\n                        PycRef<ASTNode> val = stack.top();\n                        stack.pop();\n                        PycRef<ASTNode> key = stack.top();\n                        stack.pop();\n                        kwparamList.push_front(std::make_pair(key, val));\n                    }\n                }\n                for (int i=0; i<pparams; i++) {\n                    PycRef<ASTNode> param = stack.top();\n                    stack.pop();\n                    if (param.type() == ASTNode::NODE_FUNCTION) {\n                        PycRef<ASTNode> fun_code = param.cast<ASTFunction>()->code();\n                        PycRef<PycCode> code_src = fun_code.cast<ASTObject>()->object().cast<PycCode>();\n                        PycRef<PycString> function_name = code_src->name();\n                        if (function_name->isEqual(\"<lambda>\")) {\n                            pparamList.push_front(param);\n                        } else {\n                            // Decorator used\n                            PycRef<ASTNode> decor_name = new ASTName(function_name);\n                            curblock->append(new ASTStore(param, decor_name));\n\n                            pparamList.push_front(decor_name);\n                        }\n                    } else {\n                        pparamList.push_front(param);\n                    }\n                }\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n                if ((opcode == Pyc::CALL_A || opcode == Pyc::INSTRUMENTED_CALL_A) &&\n                        stack.top() == nullptr) {\n                    stack.pop();\n                }\n\n                stack.push(new ASTCall(func, pparamList, kwparamList));\n            }\n            break;\n        case Pyc::CALL_FUNCTION_VAR_A:\n            {\n                PycRef<ASTNode> var = stack.top();\n                stack.pop();\n                int kwparams = (operand & 0xFF00) >> 8;\n                int pparams = (operand & 0xFF);\n                ASTCall::kwparam_t kwparamList;\n                ASTCall::pparam_t pparamList;\n                for (int i=0; i<kwparams; i++) {\n                    PycRef<ASTNode> val = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> key = stack.top();\n                    stack.pop();\n                    kwparamList.push_front(std::make_pair(key, val));\n                }\n                for (int i=0; i<pparams; i++) {\n                    pparamList.push_front(stack.top());\n                    stack.pop();\n                }\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> call = new ASTCall(func, pparamList, kwparamList);\n                call.cast<ASTCall>()->setVar(var);\n                stack.push(call);\n            }\n            break;\n        case Pyc::CALL_FUNCTION_KW_A:\n            {\n                PycRef<ASTNode> kw = stack.top();\n                stack.pop();\n                int kwparams = (operand & 0xFF00) >> 8;\n                int pparams = (operand & 0xFF);\n                ASTCall::kwparam_t kwparamList;\n                ASTCall::pparam_t pparamList;\n                for (int i=0; i<kwparams; i++) {\n                    PycRef<ASTNode> val = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> key = stack.top();\n                    stack.pop();\n                    kwparamList.push_front(std::make_pair(key, val));\n                }\n                for (int i=0; i<pparams; i++) {\n                    pparamList.push_front(stack.top());\n                    stack.pop();\n                }\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> call = new ASTCall(func, pparamList, kwparamList);\n                call.cast<ASTCall>()->setKW(kw);\n                stack.push(call);\n            }\n            break;\n        case Pyc::CALL_FUNCTION_VAR_KW_A:\n            {\n                PycRef<ASTNode> kw = stack.top();\n                stack.pop();\n                PycRef<ASTNode> var = stack.top();\n                stack.pop();\n                int kwparams = (operand & 0xFF00) >> 8;\n                int pparams = (operand & 0xFF);\n                ASTCall::kwparam_t kwparamList;\n                ASTCall::pparam_t pparamList;\n                for (int i=0; i<kwparams; i++) {\n                    PycRef<ASTNode> val = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> key = stack.top();\n                    stack.pop();\n                    kwparamList.push_front(std::make_pair(key, val));\n                }\n                for (int i=0; i<pparams; i++) {\n                    pparamList.push_front(stack.top());\n                    stack.pop();\n                }\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> call = new ASTCall(func, pparamList, kwparamList);\n                call.cast<ASTCall>()->setKW(kw);\n                call.cast<ASTCall>()->setVar(var);\n                stack.push(call);\n            }\n            break;\n        case Pyc::CALL_METHOD_A:\n            {\n                ASTCall::pparam_t pparamList;\n                for (int i = 0; i < operand; i++) {\n                    PycRef<ASTNode> param = stack.top();\n                    stack.pop();\n                    if (param.type() == ASTNode::NODE_FUNCTION) {\n                        PycRef<ASTNode> fun_code = param.cast<ASTFunction>()->code();\n                        PycRef<PycCode> code_src = fun_code.cast<ASTObject>()->object().cast<PycCode>();\n                        PycRef<PycString> function_name = code_src->name();\n                        if (function_name->isEqual(\"<lambda>\")) {\n                            pparamList.push_front(param);\n                        } else {\n                            // Decorator used\n                            PycRef<ASTNode> decor_name = new ASTName(function_name);\n                            curblock->append(new ASTStore(param, decor_name));\n\n                            pparamList.push_front(decor_name);\n                        }\n                    } else {\n                        pparamList.push_front(param);\n                    }\n                }\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n                stack.push(new ASTCall(func, pparamList, ASTCall::kwparam_t()));\n            }\n            break;\n        case Pyc::CONTINUE_LOOP_A:\n            curblock->append(new ASTKeyword(ASTKeyword::KW_CONTINUE));\n            break;\n        case Pyc::COMPARE_OP_A:\n            {\n                PycRef<ASTNode> right = stack.top();\n                stack.pop();\n                PycRef<ASTNode> left = stack.top();\n                stack.pop();\n                auto arg = operand;\n                if (mod->verCompare(3, 12) == 0)\n                    arg >>= 4; // changed under GH-100923\n                else if (mod->verCompare(3, 13) >= 0)\n                    arg >>= 5;\n                stack.push(new ASTCompare(left, right, arg));\n            }\n            break;\n        case Pyc::CONTAINS_OP_A:\n            {\n                PycRef<ASTNode> right = stack.top();\n                stack.pop();\n                PycRef<ASTNode> left = stack.top();\n                stack.pop();\n                // The operand will be 0 for 'in' and 1 for 'not in'.\n                stack.push(new ASTCompare(left, right, operand ? ASTCompare::CMP_NOT_IN : ASTCompare::CMP_IN));\n            }\n            break;\n        case Pyc::DELETE_ATTR_A:\n            {\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n                curblock->append(new ASTDelete(new ASTBinary(name, new ASTName(code->getName(operand)), ASTBinary::BIN_ATTR)));\n            }\n            break;\n        case Pyc::DELETE_GLOBAL_A:\n            code->markGlobal(code->getName(operand));\n            /* Fall through */\n        case Pyc::DELETE_NAME_A:\n            {\n                PycRef<PycString> varname = code->getName(operand);\n\n                if (varname->length() >= 2 && varname->value()[0] == '_'\n                        && varname->value()[1] == '[') {\n                    /* Don't show deletes that are a result of list comps. */\n                    break;\n                }\n\n                PycRef<ASTNode> name = new ASTName(varname);\n                curblock->append(new ASTDelete(name));\n            }\n            break;\n        case Pyc::DELETE_FAST_A:\n            {\n                PycRef<ASTNode> name;\n\n                if (mod->verCompare(1, 3) < 0)\n                    name = new ASTName(code->getName(operand));\n                else\n                    name = new ASTName(code->getLocal(operand));\n\n                if (name.cast<ASTName>()->name()->value()[0] == '_'\n                        && name.cast<ASTName>()->name()->value()[1] == '[') {\n                    /* Don't show deletes that are a result of list comps. */\n                    break;\n                }\n\n                curblock->append(new ASTDelete(name));\n            }\n            break;\n        case Pyc::DELETE_SLICE_0:\n            {\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTDelete(new ASTSubscr(name, new ASTSlice(ASTSlice::SLICE0))));\n            }\n            break;\n        case Pyc::DELETE_SLICE_1:\n            {\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTDelete(new ASTSubscr(name, new ASTSlice(ASTSlice::SLICE1, upper))));\n            }\n            break;\n        case Pyc::DELETE_SLICE_2:\n            {\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTDelete(new ASTSubscr(name, new ASTSlice(ASTSlice::SLICE2, NULL, lower))));\n            }\n            break;\n        case Pyc::DELETE_SLICE_3:\n            {\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTDelete(new ASTSubscr(name, new ASTSlice(ASTSlice::SLICE3, upper, lower))));\n            }\n            break;\n        case Pyc::DELETE_SUBSCR:\n            {\n                PycRef<ASTNode> key = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTDelete(new ASTSubscr(name, key)));\n            }\n            break;\n        case Pyc::DUP_TOP:\n            {\n                if (stack.top().type() == PycObject::TYPE_NULL) {\n                    stack.push(stack.top());\n                } else if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    auto chainstore = stack.top();\n                    stack.pop();\n                    stack.push(stack.top());\n                    stack.push(chainstore);\n                } else {\n                    stack.push(stack.top());\n                    ASTNodeList::list_t targets;\n                    stack.push(new ASTChainStore(targets, stack.top()));\n                }\n            }\n            break;\n        case Pyc::DUP_TOP_TWO:\n            {\n                PycRef<ASTNode> first = stack.top();\n                stack.pop();\n                PycRef<ASTNode> second = stack.top();\n\n                stack.push(first);\n                stack.push(second);\n                stack.push(first);\n            }\n            break;\n        case Pyc::DUP_TOPX_A:\n            {\n                std::stack<PycRef<ASTNode> > first;\n                std::stack<PycRef<ASTNode> > second;\n\n                for (int i = 0; i < operand; i++) {\n                    PycRef<ASTNode> node = stack.top();\n                    stack.pop();\n                    first.push(node);\n                    second.push(node);\n                }\n\n                while (first.size()) {\n                    stack.push(first.top());\n                    first.pop();\n                }\n\n                while (second.size()) {\n                    stack.push(second.top());\n                    second.pop();\n                }\n            }\n            break;\n        case Pyc::END_FINALLY:\n            {\n                bool isFinally = false;\n                if (curblock->blktype() == ASTBlock::BLK_FINALLY) {\n                    PycRef<ASTBlock> final = curblock;\n                    blocks.pop();\n\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n\n                    curblock = blocks.top();\n                    curblock->append(final.cast<ASTNode>());\n                    isFinally = true;\n                } else if (curblock->blktype() == ASTBlock::BLK_EXCEPT) {\n                    blocks.pop();\n                    PycRef<ASTBlock> prev = curblock;\n\n                    bool isUninitAsyncFor = false;\n                    if (blocks.top()->blktype() == ASTBlock::BLK_CONTAINER) {\n                        auto container = blocks.top();\n                        blocks.pop();\n                        auto asyncForBlock = blocks.top();\n                        isUninitAsyncFor = asyncForBlock->blktype() == ASTBlock::BLK_ASYNCFOR && !asyncForBlock->inited();\n                        if (isUninitAsyncFor) {\n                            auto tryBlock = container->nodes().front().cast<ASTBlock>();\n                            if (!tryBlock->nodes().empty() && tryBlock->blktype() == ASTBlock::BLK_TRY) {\n                                auto store = tryBlock->nodes().front().try_cast<ASTStore>();\n                                if (store) {\n                                    asyncForBlock.cast<ASTIterBlock>()->setIndex(store->dest());\n                                }\n                            }\n                            curblock = blocks.top();\n                            stack = stack_hist.top();\n                            stack_hist.pop();\n                            if (!curblock->inited())\n                                fprintf(stderr, \"Error when decompiling 'async for'.\\n\");\n                        } else {\n                            blocks.push(container);\n                        }\n                    }\n\n                    if (!isUninitAsyncFor) {\n                        if (curblock->size() != 0) {\n                            blocks.top()->append(curblock.cast<ASTNode>());\n                        }\n\n                        curblock = blocks.top();\n\n                        /* Turn it into an else statement. */\n                        if (curblock->end() != pos || curblock.cast<ASTContainerBlock>()->hasFinally()) {\n                            PycRef<ASTBlock> elseblk = new ASTBlock(ASTBlock::BLK_ELSE, prev->end());\n                            elseblk->init();\n                            blocks.push(elseblk);\n                            curblock = blocks.top();\n                        }\n                        else {\n                            stack = stack_hist.top();\n                            stack_hist.pop();\n                        }\n                    }\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER) {\n                    /* This marks the end of the except block(s). */\n                    PycRef<ASTContainerBlock> cont = curblock.cast<ASTContainerBlock>();\n                    if (!cont->hasFinally() || isFinally) {\n                        /* If there's no finally block, pop the container. */\n                        blocks.pop();\n                        curblock = blocks.top();\n                        curblock->append(cont.cast<ASTNode>());\n                    }\n                }\n            }\n            break;\n        case Pyc::EXEC_STMT:\n            {\n                if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    stack.pop();\n                }\n                PycRef<ASTNode> loc = stack.top();\n                stack.pop();\n                PycRef<ASTNode> glob = stack.top();\n                stack.pop();\n                PycRef<ASTNode> stmt = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTExec(stmt, glob, loc));\n            }\n            break;\n        case Pyc::FOR_ITER_A:\n        case Pyc::INSTRUMENTED_FOR_ITER_A:\n            {\n                PycRef<ASTNode> iter = stack.top(); // Iterable\n                stack.pop();\n                /* Pop it? Don't pop it? */\n\n                int end;\n                bool comprehension = false;\n\n                // before 3.8, there is a SETUP_LOOP instruction with block start and end position,\n                //    the operand is usually a jump to a POP_BLOCK instruction\n                // after 3.8, block extent has to be inferred implicitly; the operand is a jump to a position after the for block\n                if (mod->majorVer() == 3 && mod->minorVer() >= 8) {\n                    end = operand;\n                    if (mod->verCompare(3, 10) >= 0)\n                        end *= sizeof(uint16_t); // // BPO-27129\n                    end += pos;\n                    comprehension = strcmp(code->name()->value(), \"<listcomp>\") == 0;\n                } else {\n                    PycRef<ASTBlock> top = blocks.top();\n                    end = top->end(); // block end position from SETUP_LOOP\n                    if (top->blktype() == ASTBlock::BLK_WHILE) {\n                        blocks.pop();\n                    } else {\n                        comprehension = true;\n                    }\n                }\n\n                PycRef<ASTIterBlock> forblk = new ASTIterBlock(ASTBlock::BLK_FOR, curpos, end, iter);\n                forblk->setComprehension(comprehension);\n                blocks.push(forblk.cast<ASTBlock>());\n                curblock = blocks.top();\n\n                stack.push(NULL);\n            }\n            break;\n        case Pyc::FOR_LOOP_A:\n            {\n                PycRef<ASTNode> curidx = stack.top(); // Current index\n                stack.pop();\n                PycRef<ASTNode> iter = stack.top(); // Iterable\n                stack.pop();\n\n                bool comprehension = false;\n                PycRef<ASTBlock> top = blocks.top();\n                if (top->blktype() == ASTBlock::BLK_WHILE) {\n                    blocks.pop();\n                } else {\n                    comprehension = true;\n                }\n                PycRef<ASTIterBlock> forblk = new ASTIterBlock(ASTBlock::BLK_FOR, curpos, top->end(), iter);\n                forblk->setComprehension(comprehension);\n                blocks.push(forblk.cast<ASTBlock>());\n                curblock = blocks.top();\n\n                /* Python Docs say:\n                      \"push the sequence, the incremented counter,\n                       and the current item onto the stack.\" */\n                stack.push(iter);\n                stack.push(curidx);\n                stack.push(NULL); // We can totally hack this >_>\n            }\n            break;\n        case Pyc::GET_AITER:\n            {\n                // Logic similar to FOR_ITER_A\n                PycRef<ASTNode> iter = stack.top(); // Iterable\n                stack.pop();\n\n                PycRef<ASTBlock> top = blocks.top();\n                if (top->blktype() == ASTBlock::BLK_WHILE) {\n                    blocks.pop();\n                    PycRef<ASTIterBlock> forblk = new ASTIterBlock(ASTBlock::BLK_ASYNCFOR, curpos, top->end(), iter);\n                    blocks.push(forblk.cast<ASTBlock>());\n                    curblock = blocks.top();\n                    stack.push(nullptr);\n                } else {\n                     fprintf(stderr, \"Unsupported use of GET_AITER outside of SETUP_LOOP\\n\");\n                }\n            }\n            break;\n        case Pyc::GET_ANEXT:\n            break;\n        case Pyc::FORMAT_VALUE_A:\n            {\n                auto conversion_flag = static_cast<ASTFormattedValue::ConversionFlag>(operand);\n                PycRef<ASTNode> format_spec = nullptr;\n                if (conversion_flag & ASTFormattedValue::HAVE_FMT_SPEC) {\n                    format_spec = stack.top();\n                    stack.pop();\n                }\n                auto val = stack.top();\n                stack.pop();\n                stack.push(new ASTFormattedValue(val, conversion_flag, format_spec));\n            }\n            break;\n        case Pyc::GET_AWAITABLE:\n            {\n                PycRef<ASTNode> object = stack.top();\n                stack.pop();\n                stack.push(new ASTAwaitable(object));\n            }\n            break;\n        case Pyc::GET_ITER:\n        case Pyc::GET_YIELD_FROM_ITER:\n            /* We just entirely ignore this */\n            break;\n        case Pyc::IMPORT_NAME_A:\n            if (mod->majorVer() == 1) {\n                stack.push(new ASTImport(new ASTName(code->getName(operand)), NULL));\n            } else {\n                PycRef<ASTNode> fromlist = stack.top();\n                stack.pop();\n                if (mod->verCompare(2, 5) >= 0)\n                    stack.pop();    // Level -- we don't care\n                stack.push(new ASTImport(new ASTName(code->getName(operand)), fromlist));\n            }\n            break;\n        case Pyc::IMPORT_FROM_A:\n            stack.push(new ASTName(code->getName(operand)));\n            break;\n        case Pyc::IMPORT_STAR:\n            {\n                PycRef<ASTNode> import = stack.top();\n                stack.pop();\n                curblock->append(new ASTStore(import, NULL));\n            }\n            break;\n        case Pyc::IS_OP_A:\n            {\n                PycRef<ASTNode> right = stack.top();\n                stack.pop();\n                PycRef<ASTNode> left = stack.top();\n                stack.pop();\n                // The operand will be 0 for 'is' and 1 for 'is not'.\n                stack.push(new ASTCompare(left, right, operand ? ASTCompare::CMP_IS_NOT : ASTCompare::CMP_IS));\n            }\n            break;\n        case Pyc::JUMP_IF_FALSE_A:\n        case Pyc::JUMP_IF_TRUE_A:\n        case Pyc::JUMP_IF_FALSE_OR_POP_A:\n        case Pyc::JUMP_IF_TRUE_OR_POP_A:\n        case Pyc::POP_JUMP_IF_FALSE_A:\n        case Pyc::POP_JUMP_IF_TRUE_A:\n        case Pyc::POP_JUMP_FORWARD_IF_FALSE_A:\n        case Pyc::POP_JUMP_FORWARD_IF_TRUE_A:\n        case Pyc::INSTRUMENTED_POP_JUMP_IF_FALSE_A:\n        case Pyc::INSTRUMENTED_POP_JUMP_IF_TRUE_A:\n            {\n                PycRef<ASTNode> cond = stack.top();\n                PycRef<ASTCondBlock> ifblk;\n                int popped = ASTCondBlock::UNINITED;\n\n                if (opcode == Pyc::POP_JUMP_IF_FALSE_A\n                        || opcode == Pyc::POP_JUMP_IF_TRUE_A\n                        || opcode == Pyc::POP_JUMP_FORWARD_IF_FALSE_A\n                        || opcode == Pyc::POP_JUMP_FORWARD_IF_TRUE_A\n                        || opcode == Pyc::INSTRUMENTED_POP_JUMP_IF_FALSE_A\n                        || opcode == Pyc::INSTRUMENTED_POP_JUMP_IF_TRUE_A) {\n                    /* Pop condition before the jump */\n                    stack.pop();\n                    popped = ASTCondBlock::PRE_POPPED;\n                }\n\n                /* Store the current stack for the else statement(s) */\n                stack_hist.push(stack);\n\n                if (opcode == Pyc::JUMP_IF_FALSE_OR_POP_A\n                        || opcode == Pyc::JUMP_IF_TRUE_OR_POP_A) {\n                    /* Pop condition only if condition is met */\n                    stack.pop();\n                    popped = ASTCondBlock::POPPED;\n                }\n\n                /* \"Jump if true\" means \"Jump if not false\" */\n                bool neg = opcode == Pyc::JUMP_IF_TRUE_A\n                        || opcode == Pyc::JUMP_IF_TRUE_OR_POP_A\n                        || opcode == Pyc::POP_JUMP_IF_TRUE_A\n                        || opcode == Pyc::POP_JUMP_FORWARD_IF_TRUE_A\n                        || opcode == Pyc::INSTRUMENTED_POP_JUMP_IF_TRUE_A;\n\n                int offs = operand;\n                if (mod->verCompare(3, 10) >= 0)\n                    offs *= sizeof(uint16_t); // // BPO-27129\n                if (mod->verCompare(3, 12) >= 0\n                        || opcode == Pyc::JUMP_IF_FALSE_A\n                        || opcode == Pyc::JUMP_IF_TRUE_A\n                        || opcode == Pyc::POP_JUMP_FORWARD_IF_TRUE_A\n                        || opcode == Pyc::POP_JUMP_FORWARD_IF_FALSE_A) {\n                    /* Offset is relative in these cases */\n                    offs += pos;\n                }\n\n                if (cond.type() == ASTNode::NODE_COMPARE\n                        && cond.cast<ASTCompare>()->op() == ASTCompare::CMP_EXCEPTION) {\n                    if (curblock->blktype() == ASTBlock::BLK_EXCEPT\n                            && curblock.cast<ASTCondBlock>()->cond() == NULL) {\n                        blocks.pop();\n                        curblock = blocks.top();\n\n                        stack_hist.pop();\n                    }\n\n                    ifblk = new ASTCondBlock(ASTBlock::BLK_EXCEPT, offs, cond.cast<ASTCompare>()->right(), false);\n                } else if (curblock->blktype() == ASTBlock::BLK_ELSE\n                           && curblock->size() == 0) {\n                    /* Collapse into elif statement */\n                    blocks.pop();\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n                    ifblk = new ASTCondBlock(ASTBlock::BLK_ELIF, offs, cond, neg);\n                } else if (curblock->size() == 0 && !curblock->inited()\n                           && curblock->blktype() == ASTBlock::BLK_WHILE) {\n                    /* The condition for a while loop */\n                    PycRef<ASTBlock> top = blocks.top();\n                    blocks.pop();\n                    ifblk = new ASTCondBlock(top->blktype(), offs, cond, neg);\n\n                    /* We don't store the stack for loops! Pop it! */\n                    stack_hist.pop();\n                } else if (curblock->size() == 0 && curblock->end() <= offs\n                           && (curblock->blktype() == ASTBlock::BLK_IF\n                           || curblock->blktype() == ASTBlock::BLK_ELIF\n                           || curblock->blktype() == ASTBlock::BLK_WHILE)) {\n                    PycRef<ASTNode> newcond;\n                    PycRef<ASTCondBlock> top = curblock.cast<ASTCondBlock>();\n                    PycRef<ASTNode> cond1 = top->cond();\n                    blocks.pop();\n\n                    if (curblock->blktype() == ASTBlock::BLK_WHILE) {\n                        stack_hist.pop();\n                    } else {\n                        FastStack s_top = stack_hist.top();\n                        stack_hist.pop();\n                        stack_hist.pop();\n                        stack_hist.push(s_top);\n                    }\n\n                    if (curblock->end() == offs\n                            || (curblock->end() == curpos && !top->negative())) {\n                        /* if blah and blah */\n                        newcond = new ASTBinary(cond1, cond, ASTBinary::BIN_LOG_AND);\n                    } else {\n                        /* if blah or blah */\n                        newcond = new ASTBinary(cond1, cond, ASTBinary::BIN_LOG_OR);\n                    }\n                    ifblk = new ASTCondBlock(top->blktype(), offs, newcond, neg);\n                } else if (curblock->blktype() == ASTBlock::BLK_FOR\n                            && curblock.cast<ASTIterBlock>()->isComprehension()\n                            && mod->verCompare(2, 7) >= 0) {\n                    /* Comprehension condition */\n                    curblock.cast<ASTIterBlock>()->setCondition(cond);\n                    stack_hist.pop();\n                    // TODO: Handle older python versions, where condition\n                    // is laid out a little differently.\n                    break;\n                } else {\n                    /* Plain old if statement */\n                    ifblk = new ASTCondBlock(ASTBlock::BLK_IF, offs, cond, neg);\n                }\n\n                if (popped)\n                    ifblk->init(popped);\n\n                blocks.push(ifblk.cast<ASTBlock>());\n                curblock = blocks.top();\n            }\n            break;\n        case Pyc::JUMP_ABSOLUTE_A:\n            {\n                int offs = operand;\n                if (mod->verCompare(3, 10) >= 0)\n                    offs *= sizeof(uint16_t); // // BPO-27129\n\n                if (offs < pos) {\n                    if (curblock->blktype() == ASTBlock::BLK_FOR) {\n                        bool is_jump_to_start = offs == curblock.cast<ASTIterBlock>()->start();\n                        bool should_pop_for_block = curblock.cast<ASTIterBlock>()->isComprehension();\n                        // in v3.8, SETUP_LOOP is deprecated and for blocks aren't terminated by POP_BLOCK, so we add them here\n                        bool should_add_for_block = mod->majorVer() == 3 && mod->minorVer() >= 8 && is_jump_to_start && !curblock.cast<ASTIterBlock>()->isComprehension();\n\n                        if (should_pop_for_block || should_add_for_block) {\n                            PycRef<ASTNode> top = stack.top();\n\n                            if (top.type() == ASTNode::NODE_COMPREHENSION) {\n                                PycRef<ASTComprehension> comp = top.cast<ASTComprehension>();\n\n                                comp->addGenerator(curblock.cast<ASTIterBlock>());\n                            }\n\n                            PycRef<ASTBlock> tmp = curblock;\n                            blocks.pop();\n                            curblock = blocks.top();\n                            if (should_add_for_block) {\n                                curblock->append(tmp.cast<ASTNode>());\n                            }\n                        }\n                    } else if (curblock->blktype() == ASTBlock::BLK_ELSE) {\n                        stack = stack_hist.top();\n                        stack_hist.pop();\n\n                        blocks.pop();\n                        blocks.top()->append(curblock.cast<ASTNode>());\n                        curblock = blocks.top();\n\n                        if (curblock->blktype() == ASTBlock::BLK_CONTAINER\n                                && !curblock.cast<ASTContainerBlock>()->hasFinally()) {\n                            blocks.pop();\n                            blocks.top()->append(curblock.cast<ASTNode>());\n                            curblock = blocks.top();\n                        }\n                    } else {\n                        curblock->append(new ASTKeyword(ASTKeyword::KW_CONTINUE));\n                    }\n\n                    /* We're in a loop, this jumps back to the start */\n                    /* I think we'll just ignore this case... */\n                    break; // Bad idea? Probably!\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER) {\n                    PycRef<ASTContainerBlock> cont = curblock.cast<ASTContainerBlock>();\n                    if (cont->hasExcept() && pos < cont->except()) {\n                        PycRef<ASTBlock> except = new ASTCondBlock(ASTBlock::BLK_EXCEPT, 0, NULL, false);\n                        except->init();\n                        blocks.push(except);\n                        curblock = blocks.top();\n                    }\n                    break;\n                }\n\n                stack = stack_hist.top();\n                stack_hist.pop();\n\n                PycRef<ASTBlock> prev = curblock;\n                PycRef<ASTBlock> nil;\n                bool push = true;\n\n                do {\n                    blocks.pop();\n\n                    blocks.top()->append(prev.cast<ASTNode>());\n\n                    if (prev->blktype() == ASTBlock::BLK_IF\n                            || prev->blktype() == ASTBlock::BLK_ELIF) {\n                        if (push) {\n                            stack_hist.push(stack);\n                        }\n                        PycRef<ASTBlock> next = new ASTBlock(ASTBlock::BLK_ELSE, blocks.top()->end());\n                        if (prev->inited() == ASTCondBlock::PRE_POPPED) {\n                            next->init(ASTCondBlock::PRE_POPPED);\n                        }\n\n                        blocks.push(next.cast<ASTBlock>());\n                        prev = nil;\n                    } else if (prev->blktype() == ASTBlock::BLK_EXCEPT) {\n                        if (push) {\n                            stack_hist.push(stack);\n                        }\n                        PycRef<ASTBlock> next = new ASTCondBlock(ASTBlock::BLK_EXCEPT, blocks.top()->end(), NULL, false);\n                        next->init();\n\n                        blocks.push(next.cast<ASTBlock>());\n                        prev = nil;\n                    } else if (prev->blktype() == ASTBlock::BLK_ELSE) {\n                        /* Special case */\n                        prev = blocks.top();\n                        if (!push) {\n                            stack = stack_hist.top();\n                            stack_hist.pop();\n                        }\n                        push = false;\n                    } else {\n                        prev = nil;\n                    }\n\n                } while (prev != nil);\n\n                curblock = blocks.top();\n            }\n            break;\n        case Pyc::JUMP_FORWARD_A:\n        case Pyc::INSTRUMENTED_JUMP_FORWARD_A:\n            {\n                int offs = operand;\n                if (mod->verCompare(3, 10) >= 0)\n                    offs *= sizeof(uint16_t); // // BPO-27129\n\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER) {\n                    PycRef<ASTContainerBlock> cont = curblock.cast<ASTContainerBlock>();\n                    if (cont->hasExcept()) {\n                        stack_hist.push(stack);\n\n                        curblock->setEnd(pos+offs);\n                        PycRef<ASTBlock> except = new ASTCondBlock(ASTBlock::BLK_EXCEPT, pos+offs, NULL, false);\n                        except->init();\n                        blocks.push(except);\n                        curblock = blocks.top();\n                    }\n                    break;\n                }\n\n                if (!stack_hist.empty()) {\n                    if (stack.empty()) // if it's part of if-expression, TOS at the moment is the result of \"if\" part\n                        stack = stack_hist.top();\n                    stack_hist.pop();\n                }\n\n                PycRef<ASTBlock> prev = curblock;\n                PycRef<ASTBlock> nil;\n                bool push = true;\n\n                do {\n                    blocks.pop();\n\n                    if (!blocks.empty())\n                        blocks.top()->append(prev.cast<ASTNode>());\n\n                    if (prev->blktype() == ASTBlock::BLK_IF\n                            || prev->blktype() == ASTBlock::BLK_ELIF) {\n                        if (offs == 0) {\n                            prev = nil;\n                            continue;\n                        }\n\n                        if (push) {\n                            stack_hist.push(stack);\n                        }\n                        PycRef<ASTBlock> next = new ASTBlock(ASTBlock::BLK_ELSE, pos+offs);\n                        if (prev->inited() == ASTCondBlock::PRE_POPPED) {\n                            next->init(ASTCondBlock::PRE_POPPED);\n                        }\n\n                        blocks.push(next.cast<ASTBlock>());\n                        prev = nil;\n                    } else if (prev->blktype() == ASTBlock::BLK_EXCEPT) {\n                        if (offs == 0) {\n                            prev = nil;\n                            continue;\n                        }\n\n                        if (push) {\n                            stack_hist.push(stack);\n                        }\n                        PycRef<ASTBlock> next = new ASTCondBlock(ASTBlock::BLK_EXCEPT, pos+offs, NULL, false);\n                        next->init();\n\n                        blocks.push(next.cast<ASTBlock>());\n                        prev = nil;\n                    } else if (prev->blktype() == ASTBlock::BLK_ELSE) {\n                        /* Special case */\n                        prev = blocks.top();\n                        if (!push) {\n                            stack = stack_hist.top();\n                            stack_hist.pop();\n                        }\n                        push = false;\n\n                        if (prev->blktype() == ASTBlock::BLK_MAIN) {\n                            /* Something went out of control! */\n                            prev = nil;\n                        }\n                    } else if (prev->blktype() == ASTBlock::BLK_TRY\n                            && prev->end() < pos+offs) {\n                        /* Need to add an except/finally block */\n                        stack = stack_hist.top();\n                        stack.pop();\n\n                        if (blocks.top()->blktype() == ASTBlock::BLK_CONTAINER) {\n                            PycRef<ASTContainerBlock> cont = blocks.top().cast<ASTContainerBlock>();\n                            if (cont->hasExcept()) {\n                                if (push) {\n                                    stack_hist.push(stack);\n                                }\n\n                                PycRef<ASTBlock> except = new ASTCondBlock(ASTBlock::BLK_EXCEPT, pos+offs, NULL, false);\n                                except->init();\n                                blocks.push(except);\n                            }\n                        } else {\n                            fprintf(stderr, \"Something TERRIBLE happened!!\\n\");\n                        }\n                        prev = nil;\n                    } else {\n                        prev = nil;\n                    }\n\n                } while (prev != nil);\n\n                curblock = blocks.top();\n\n                if (curblock->blktype() == ASTBlock::BLK_EXCEPT) {\n                    curblock->setEnd(pos+offs);\n                }\n            }\n            break;\n        case Pyc::LIST_APPEND:\n        case Pyc::LIST_APPEND_A:\n            {\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> list = stack.top();\n\n\n                if (curblock->blktype() == ASTBlock::BLK_FOR\n                        && curblock.cast<ASTIterBlock>()->isComprehension()) {\n                    stack.pop();\n                    stack.push(new ASTComprehension(value));\n                } else {\n                    stack.push(new ASTSubscr(list, value)); /* Total hack */\n                }\n            }\n            break;\n        case Pyc::SET_UPDATE_A:\n            {\n                PycRef<ASTNode> rhs = stack.top();\n                stack.pop();\n                PycRef<ASTSet> lhs = stack.top().cast<ASTSet>();\n                stack.pop();\n\n                if (rhs.type() != ASTNode::NODE_OBJECT) {\n                    fprintf(stderr, \"Unsupported argument found for SET_UPDATE\\n\");\n                    break;\n                }\n\n                // I've only ever seen this be a TYPE_FROZENSET, but let's be careful...\n                PycRef<PycObject> obj = rhs.cast<ASTObject>()->object();\n                if (obj->type() != PycObject::TYPE_FROZENSET) {\n                    fprintf(stderr, \"Unsupported argument type found for SET_UPDATE\\n\");\n                    break;\n                }\n\n                ASTSet::value_t result = lhs->values();\n                for (const auto& it : obj.cast<PycSet>()->values()) {\n                    result.push_back(new ASTObject(it));\n                }\n\n                stack.push(new ASTSet(result));\n            }\n            break;\n        case Pyc::LIST_EXTEND_A:\n            {\n                PycRef<ASTNode> rhs = stack.top();\n                stack.pop();\n                PycRef<ASTList> lhs = stack.top().cast<ASTList>();\n                stack.pop();\n\n                if (rhs.type() != ASTNode::NODE_OBJECT) {\n                    fprintf(stderr, \"Unsupported argument found for LIST_EXTEND\\n\");\n                    break;\n                }\n\n                // I've only ever seen this be a SMALL_TUPLE, but let's be careful...\n                PycRef<PycObject> obj = rhs.cast<ASTObject>()->object();\n                if (obj->type() != PycObject::TYPE_TUPLE && obj->type() != PycObject::TYPE_SMALL_TUPLE) {\n                    fprintf(stderr, \"Unsupported argument type found for LIST_EXTEND\\n\");\n                    break;\n                }\n\n                ASTList::value_t result = lhs->values();\n                for (const auto& it : obj.cast<PycTuple>()->values()) {\n                    result.push_back(new ASTObject(it));\n                }\n\n                stack.push(new ASTList(result));\n            }\n            break;\n        case Pyc::LOAD_ATTR_A:\n            {\n                PycRef<ASTNode> name = stack.top();\n                if (name.type() != ASTNode::NODE_IMPORT) {\n                    stack.pop();\n\n                    if (mod->verCompare(3, 12) >= 0) {\n                        if (operand & 1) {\n                            /* Changed in version 3.12:\n                            If the low bit of name is set, then a NULL or self is pushed to the stack\n                            before the attribute or unbound method respectively. */\n                            stack.push(nullptr);\n                        }\n                        operand >>= 1;\n                    }\n\n                    stack.push(new ASTBinary(name, new ASTName(code->getName(operand)), ASTBinary::BIN_ATTR));\n                }\n            }\n            break;\n        case Pyc::LOAD_BUILD_CLASS:\n            stack.push(new ASTLoadBuildClass(new PycObject()));\n            break;\n        case Pyc::LOAD_CLOSURE_A:\n            /* Ignore this */\n            break;\n        case Pyc::LOAD_CONST_A:\n            {\n                PycRef<ASTObject> t_ob = new ASTObject(code->getConst(operand));\n\n                if ((t_ob->object().type() == PycObject::TYPE_TUPLE ||\n                        t_ob->object().type() == PycObject::TYPE_SMALL_TUPLE) &&\n                        !t_ob->object().cast<PycTuple>()->values().size()) {\n                    ASTTuple::value_t values;\n                    stack.push(new ASTTuple(values));\n                } else if (t_ob->object().type() == PycObject::TYPE_NONE) {\n                    stack.push(NULL);\n                } else {\n                    stack.push(t_ob.cast<ASTNode>());\n                }\n            }\n            break;\n        case Pyc::LOAD_DEREF_A:\n        case Pyc::LOAD_CLASSDEREF_A:\n            stack.push(new ASTName(code->getCellVar(mod, operand)));\n            break;\n        case Pyc::LOAD_FAST_A:\n            if (mod->verCompare(1, 3) < 0)\n                stack.push(new ASTName(code->getName(operand)));\n            else\n                stack.push(new ASTName(code->getLocal(operand)));\n            break;\n        case Pyc::LOAD_FAST_LOAD_FAST_A:\n            stack.push(new ASTName(code->getLocal(operand >> 4)));\n            stack.push(new ASTName(code->getLocal(operand & 0xF)));\n            break;\n        case Pyc::LOAD_GLOBAL_A:\n            if (mod->verCompare(3, 11) >= 0) {\n                // Loads the global named co_names[namei>>1] onto the stack.\n                if (operand & 1) {\n                    /* Changed in version 3.11: \n                    If the low bit of \"NAMEI\" (operand) is set, \n                    then a NULL is pushed to the stack before the global variable. */\n                    stack.push(nullptr);\n                }\n                operand >>= 1;\n            }\n            stack.push(new ASTName(code->getName(operand)));\n            break;\n        case Pyc::LOAD_LOCALS:\n            stack.push(new ASTNode(ASTNode::NODE_LOCALS));\n            break;\n        case Pyc::STORE_LOCALS:\n            stack.pop();\n            break;\n        case Pyc::LOAD_METHOD_A:\n            {\n                // Behave like LOAD_ATTR\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n                stack.push(new ASTBinary(name, new ASTName(code->getName(operand)), ASTBinary::BIN_ATTR));\n            }\n            break;\n        case Pyc::LOAD_NAME_A:\n            stack.push(new ASTName(code->getName(operand)));\n            break;\n        case Pyc::MAKE_CLOSURE_A:\n        case Pyc::MAKE_FUNCTION_A:\n            {\n                PycRef<ASTNode> fun_code = stack.top();\n                stack.pop();\n\n                /* Test for the qualified name of the function (at TOS) */\n                int tos_type = fun_code.cast<ASTObject>()->object().type();\n                if (tos_type != PycObject::TYPE_CODE &&\n                    tos_type != PycObject::TYPE_CODE2) {\n                    fun_code = stack.top();\n                    stack.pop();\n                }\n\n                ASTFunction::defarg_t defArgs, kwDefArgs;\n                const int defCount = operand & 0xFF;\n                const int kwDefCount = (operand >> 8) & 0xFF;\n                for (int i = 0; i < defCount; ++i) {\n                    defArgs.push_front(stack.top());\n                    stack.pop();\n                }\n                for (int i = 0; i < kwDefCount; ++i) {\n                    kwDefArgs.push_front(stack.top());\n                    stack.pop();\n                }\n                stack.push(new ASTFunction(fun_code, defArgs, kwDefArgs));\n            }\n            break;\n        case Pyc::NOP:\n            break;\n        case Pyc::POP_BLOCK:\n            {\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER ||\n                        curblock->blktype() == ASTBlock::BLK_FINALLY) {\n                    /* These should only be popped by an END_FINALLY */\n                    break;\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_WITH) {\n                    // This should only be popped by a WITH_CLEANUP\n                    break;\n                }\n\n                if (curblock->nodes().size() &&\n                        curblock->nodes().back().type() == ASTNode::NODE_KEYWORD) {\n                    curblock->removeLast();\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_IF\n                        || curblock->blktype() == ASTBlock::BLK_ELIF\n                        || curblock->blktype() == ASTBlock::BLK_ELSE\n                        || curblock->blktype() == ASTBlock::BLK_TRY\n                        || curblock->blktype() == ASTBlock::BLK_EXCEPT\n                        || curblock->blktype() == ASTBlock::BLK_FINALLY) {\n                    if (!stack_hist.empty()) {\n                        stack = stack_hist.top();\n                        stack_hist.pop();\n                    } else {\n                        fprintf(stderr, \"Warning: Stack history is empty, something wrong might have happened\\n\");\n                    }\n                }\n                PycRef<ASTBlock> tmp = curblock;\n                blocks.pop();\n\n                if (!blocks.empty())\n                    curblock = blocks.top();\n\n                if (!(tmp->blktype() == ASTBlock::BLK_ELSE\n                        && tmp->nodes().size() == 0)) {\n                    curblock->append(tmp.cast<ASTNode>());\n                }\n\n                if (tmp->blktype() == ASTBlock::BLK_FOR && tmp->end() >= pos) {\n                    stack_hist.push(stack);\n\n                    PycRef<ASTBlock> blkelse = new ASTBlock(ASTBlock::BLK_ELSE, tmp->end());\n                    blocks.push(blkelse);\n                    curblock = blocks.top();\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_TRY\n                        && tmp->blktype() != ASTBlock::BLK_FOR\n                        && tmp->blktype() != ASTBlock::BLK_ASYNCFOR\n                        && tmp->blktype() != ASTBlock::BLK_WHILE) {\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n\n                    tmp = curblock;\n                    blocks.pop();\n                    curblock = blocks.top();\n\n                    if (!(tmp->blktype() == ASTBlock::BLK_ELSE\n                            && tmp->nodes().size() == 0)) {\n                        curblock->append(tmp.cast<ASTNode>());\n                    }\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER) {\n                    PycRef<ASTContainerBlock> cont = curblock.cast<ASTContainerBlock>();\n\n                    if (tmp->blktype() == ASTBlock::BLK_ELSE && !cont->hasFinally()) {\n\n                        /* Pop the container */\n                        blocks.pop();\n                        curblock = blocks.top();\n                        curblock->append(cont.cast<ASTNode>());\n\n                    } else if ((tmp->blktype() == ASTBlock::BLK_ELSE && cont->hasFinally())\n                            || (tmp->blktype() == ASTBlock::BLK_TRY && !cont->hasExcept())) {\n\n                        /* Add the finally block */\n                        stack_hist.push(stack);\n\n                        PycRef<ASTBlock> final = new ASTBlock(ASTBlock::BLK_FINALLY, 0, true);\n                        blocks.push(final);\n                        curblock = blocks.top();\n                    }\n                }\n\n                if ((curblock->blktype() == ASTBlock::BLK_FOR || curblock->blktype() == ASTBlock::BLK_ASYNCFOR)\n                        && curblock->end() == pos) {\n                    blocks.pop();\n                    blocks.top()->append(curblock.cast<ASTNode>());\n                    curblock = blocks.top();\n                }\n            }\n            break;\n        case Pyc::POP_EXCEPT:\n            /* Do nothing. */\n            break;\n        case Pyc::POP_TOP:\n            {\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n                if (!curblock->inited()) {\n                    if (curblock->blktype() == ASTBlock::BLK_WITH) {\n                        curblock.cast<ASTWithBlock>()->setExpr(value);\n                    } else {\n                        curblock->init();\n                    }\n                    break;\n                } else if (value == nullptr || value->processed()) {\n                    break;\n                }\n\n                curblock->append(value);\n\n                if (curblock->blktype() == ASTBlock::BLK_FOR\n                        && curblock.cast<ASTIterBlock>()->isComprehension()) {\n                    /* This relies on some really uncertain logic...\n                     * If it's a comprehension, the only POP_TOP should be\n                     * a call to append the iter to the list.\n                     */\n                    if (value.type() == ASTNode::NODE_CALL) {\n                        auto& pparams = value.cast<ASTCall>()->pparams();\n                        if (!pparams.empty()) {\n                            PycRef<ASTNode> res = pparams.front();\n                            stack.push(new ASTComprehension(res));\n                        }\n                    }\n                }\n            }\n            break;\n        case Pyc::PRINT_ITEM:\n            {\n                PycRef<ASTPrint> printNode;\n                if (curblock->size() > 0 && curblock->nodes().back().type() == ASTNode::NODE_PRINT)\n                    printNode = curblock->nodes().back().try_cast<ASTPrint>();\n                if (printNode && printNode->stream() == nullptr && !printNode->eol())\n                    printNode->add(stack.top());\n                else\n                    curblock->append(new ASTPrint(stack.top()));\n                stack.pop();\n            }\n            break;\n        case Pyc::PRINT_ITEM_TO:\n            {\n                PycRef<ASTNode> stream = stack.top();\n                stack.pop();\n\n                PycRef<ASTPrint> printNode;\n                if (curblock->size() > 0 && curblock->nodes().back().type() == ASTNode::NODE_PRINT)\n                    printNode = curblock->nodes().back().try_cast<ASTPrint>();\n                if (printNode && printNode->stream() == stream && !printNode->eol())\n                    printNode->add(stack.top());\n                else\n                    curblock->append(new ASTPrint(stack.top(), stream));\n                stack.pop();\n                stream->setProcessed();\n            }\n            break;\n        case Pyc::PRINT_NEWLINE:\n            {\n                PycRef<ASTPrint> printNode;\n                if (curblock->size() > 0 && curblock->nodes().back().type() == ASTNode::NODE_PRINT)\n                    printNode = curblock->nodes().back().try_cast<ASTPrint>();\n                if (printNode && printNode->stream() == nullptr && !printNode->eol())\n                    printNode->setEol(true);\n                else\n                    curblock->append(new ASTPrint(nullptr));\n                stack.pop();\n            }\n            break;\n        case Pyc::PRINT_NEWLINE_TO:\n            {\n                PycRef<ASTNode> stream = stack.top();\n                stack.pop();\n\n                PycRef<ASTPrint> printNode;\n                if (curblock->size() > 0 && curblock->nodes().back().type() == ASTNode::NODE_PRINT)\n                    printNode = curblock->nodes().back().try_cast<ASTPrint>();\n                if (printNode && printNode->stream() == stream && !printNode->eol())\n                    printNode->setEol(true);\n                else\n                    curblock->append(new ASTPrint(nullptr, stream));\n                stack.pop();\n                stream->setProcessed();\n            }\n            break;\n        case Pyc::RAISE_VARARGS_A:\n            {\n                ASTRaise::param_t paramList;\n                for (int i = 0; i < operand; i++) {\n                    paramList.push_front(stack.top());\n                    stack.pop();\n                }\n                curblock->append(new ASTRaise(paramList));\n\n                if ((curblock->blktype() == ASTBlock::BLK_IF\n                        || curblock->blktype() == ASTBlock::BLK_ELSE)\n                        && stack_hist.size()\n                        && (mod->verCompare(2, 6) >= 0)) {\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n\n                    PycRef<ASTBlock> prev = curblock;\n                    blocks.pop();\n                    curblock = blocks.top();\n                    curblock->append(prev.cast<ASTNode>());\n\n                    bc_next(source, mod, opcode, operand, pos);\n                }\n            }\n            break;\n        case Pyc::RETURN_VALUE:\n        case Pyc::INSTRUMENTED_RETURN_VALUE_A:\n            {\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n                curblock->append(new ASTReturn(value));\n\n                if ((curblock->blktype() == ASTBlock::BLK_IF\n                        || curblock->blktype() == ASTBlock::BLK_ELSE)\n                        && stack_hist.size()\n                        && (mod->verCompare(2, 6) >= 0)) {\n                    stack = stack_hist.top();\n                    stack_hist.pop();\n\n                    PycRef<ASTBlock> prev = curblock;\n                    blocks.pop();\n                    curblock = blocks.top();\n                    curblock->append(prev.cast<ASTNode>());\n\n                    bc_next(source, mod, opcode, operand, pos);\n                }\n            }\n            break;\n        case Pyc::RETURN_CONST_A:\n        case Pyc::INSTRUMENTED_RETURN_CONST_A:\n            {\n                PycRef<ASTObject> value = new ASTObject(code->getConst(operand));\n                curblock->append(new ASTReturn(value.cast<ASTNode>()));\n            }\n            break;\n        case Pyc::ROT_TWO:\n            {\n                PycRef<ASTNode> one = stack.top();\n                stack.pop();\n                if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    stack.pop();\n                }\n                PycRef<ASTNode> two = stack.top();\n                stack.pop();\n\n                stack.push(one);\n                stack.push(two);\n            }\n            break;\n        case Pyc::ROT_THREE:\n            {\n                PycRef<ASTNode> one = stack.top();\n                stack.pop();\n                PycRef<ASTNode> two = stack.top();\n                stack.pop();\n                if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    stack.pop();\n                }\n                PycRef<ASTNode> three = stack.top();\n                stack.pop();\n                stack.push(one);\n                stack.push(three);\n                stack.push(two);\n            }\n            break;\n        case Pyc::ROT_FOUR:\n            {\n                PycRef<ASTNode> one = stack.top();\n                stack.pop();\n                PycRef<ASTNode> two = stack.top();\n                stack.pop();\n                PycRef<ASTNode> three = stack.top();\n                stack.pop();\n                if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                    stack.pop();\n                }\n                PycRef<ASTNode> four = stack.top();\n                stack.pop();\n                stack.push(one);\n                stack.push(four);\n                stack.push(three);\n                stack.push(two);\n            }\n            break;\n        case Pyc::SET_LINENO_A:\n            // Ignore\n            break;\n        case Pyc::SETUP_WITH_A:\n        case Pyc::WITH_EXCEPT_START:\n            {\n                PycRef<ASTBlock> withblock = new ASTWithBlock(pos+operand);\n                blocks.push(withblock);\n                curblock = blocks.top();\n            }\n            break;\n        case Pyc::WITH_CLEANUP:\n        case Pyc::WITH_CLEANUP_START:\n            {\n                // Stack top should be a None. Ignore it.\n                PycRef<ASTNode> none = stack.top();\n                stack.pop();\n\n                if (none != NULL) {\n                    fprintf(stderr, \"Something TERRIBLE happened!\\n\");\n                    break;\n                }\n\n                if (curblock->blktype() == ASTBlock::BLK_WITH\n                        && curblock->end() == curpos) {\n                    PycRef<ASTBlock> with = curblock;\n                    blocks.pop();\n                    curblock = blocks.top();\n                    curblock->append(with.cast<ASTNode>());\n                }\n                else {\n                    fprintf(stderr, \"Something TERRIBLE happened! No matching with block found for WITH_CLEANUP at %d\\n\", curpos);\n                }\n            }\n            break;\n        case Pyc::WITH_CLEANUP_FINISH:\n            /* Ignore this */\n            break;\n        case Pyc::SETUP_EXCEPT_A:\n            {\n                if (curblock->blktype() == ASTBlock::BLK_CONTAINER) {\n                    curblock.cast<ASTContainerBlock>()->setExcept(pos+operand);\n                } else {\n                    PycRef<ASTBlock> next = new ASTContainerBlock(0, pos+operand);\n                    blocks.push(next.cast<ASTBlock>());\n                }\n\n                /* Store the current stack for the except/finally statement(s) */\n                stack_hist.push(stack);\n                PycRef<ASTBlock> tryblock = new ASTBlock(ASTBlock::BLK_TRY, pos+operand, true);\n                blocks.push(tryblock.cast<ASTBlock>());\n                curblock = blocks.top();\n\n                need_try = false;\n            }\n            break;\n        case Pyc::SETUP_FINALLY_A:\n            {\n                PycRef<ASTBlock> next = new ASTContainerBlock(pos+operand);\n                blocks.push(next.cast<ASTBlock>());\n                curblock = blocks.top();\n\n                need_try = true;\n            }\n            break;\n        case Pyc::SETUP_LOOP_A:\n            {\n                PycRef<ASTBlock> next = new ASTCondBlock(ASTBlock::BLK_WHILE, pos+operand, NULL, false);\n                blocks.push(next.cast<ASTBlock>());\n                curblock = blocks.top();\n            }\n            break;\n        case Pyc::SLICE_0:\n            {\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> slice = new ASTSlice(ASTSlice::SLICE0);\n                stack.push(new ASTSubscr(name, slice));\n            }\n            break;\n        case Pyc::SLICE_1:\n            {\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> slice = new ASTSlice(ASTSlice::SLICE1, lower);\n                stack.push(new ASTSubscr(name, slice));\n            }\n            break;\n        case Pyc::SLICE_2:\n            {\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> slice = new ASTSlice(ASTSlice::SLICE2, NULL, upper);\n                stack.push(new ASTSubscr(name, slice));\n            }\n            break;\n        case Pyc::SLICE_3:\n            {\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n\n                PycRef<ASTNode> slice = new ASTSlice(ASTSlice::SLICE3, lower, upper);\n                stack.push(new ASTSubscr(name, slice));\n            }\n            break;\n        case Pyc::STORE_ATTR_A:\n            {\n                if (unpack) {\n                    PycRef<ASTNode> name = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> attr = new ASTBinary(name, new ASTName(code->getName(operand)), ASTBinary::BIN_ATTR);\n\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(attr);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n                        if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> name = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> attr = new ASTBinary(name, new ASTName(code->getName(operand)), ASTBinary::BIN_ATTR);\n                    if (value.type() == ASTNode::NODE_CHAINSTORE) {\n                        append_to_chain_store(value, attr, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(value, attr));\n                    }\n                }\n            }\n            break;\n        case Pyc::STORE_DEREF_A:\n            {\n                if (unpack) {\n                    PycRef<ASTNode> name = new ASTName(code->getCellVar(mod, operand));\n\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(name);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n\n                        if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> name = new ASTName(code->getCellVar(mod, operand));\n\n                    if (value.type() == ASTNode::NODE_CHAINSTORE) {\n                        append_to_chain_store(value, name, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(value, name));\n                    }\n                }\n            }\n            break;\n        case Pyc::STORE_FAST_A:\n            {\n                if (unpack) {\n                    PycRef<ASTNode> name;\n\n                    if (mod->verCompare(1, 3) < 0)\n                        name = new ASTName(code->getName(operand));\n                    else\n                        name = new ASTName(code->getLocal(operand));\n\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(name);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n\n                        if (curblock->blktype() == ASTBlock::BLK_FOR\n                                && !curblock->inited()) {\n                            PycRef<ASTTuple> tuple = tup.try_cast<ASTTuple>();\n                            if (tuple != NULL)\n                                tuple->setRequireParens(false);\n                            curblock.cast<ASTIterBlock>()->setIndex(tup);\n                        } else if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> name;\n\n                    if (mod->verCompare(1, 3) < 0)\n                        name = new ASTName(code->getName(operand));\n                    else\n                        name = new ASTName(code->getLocal(operand));\n\n                    if (name.cast<ASTName>()->name()->value()[0] == '_'\n                            && name.cast<ASTName>()->name()->value()[1] == '[') {\n                        /* Don't show stores of list comp append objects. */\n                        break;\n                    }\n\n                    if (curblock->blktype() == ASTBlock::BLK_FOR\n                            && !curblock->inited()) {\n                        curblock.cast<ASTIterBlock>()->setIndex(name);\n                    } else if (curblock->blktype() == ASTBlock::BLK_WITH\n                                   && !curblock->inited()) {\n                        curblock.cast<ASTWithBlock>()->setExpr(value);\n                        curblock.cast<ASTWithBlock>()->setVar(name);\n                    } else if (value.type() == ASTNode::NODE_CHAINSTORE) {\n                        append_to_chain_store(value, name, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(value, name));\n                    }\n                }\n            }\n            break;\n        case Pyc::STORE_GLOBAL_A:\n            {\n                PycRef<ASTNode> name = new ASTName(code->getName(operand));\n\n                if (unpack) {\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(name);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n\n                        if (curblock->blktype() == ASTBlock::BLK_FOR\n                                && !curblock->inited()) {\n                            PycRef<ASTTuple> tuple = tup.try_cast<ASTTuple>();\n                            if (tuple != NULL)\n                                tuple->setRequireParens(false);\n                            curblock.cast<ASTIterBlock>()->setIndex(tup);\n                        } else if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n                    if (value.type() == ASTNode::NODE_CHAINSTORE) {\n                        append_to_chain_store(value, name, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(value, name));\n                    }\n                }\n\n                /* Mark the global as used */\n                code->markGlobal(name.cast<ASTName>()->name());\n            }\n            break;\n        case Pyc::STORE_NAME_A:\n            {\n                if (unpack) {\n                    PycRef<ASTNode> name = new ASTName(code->getName(operand));\n\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(name);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n\n                        if (curblock->blktype() == ASTBlock::BLK_FOR\n                                && !curblock->inited()) {\n                            PycRef<ASTTuple> tuple = tup.try_cast<ASTTuple>();\n                            if (tuple != NULL)\n                                tuple->setRequireParens(false);\n                            curblock.cast<ASTIterBlock>()->setIndex(tup);\n                        } else if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> value = stack.top();\n                    stack.pop();\n\n                    PycRef<PycString> varname = code->getName(operand);\n                    if (varname->length() >= 2 && varname->value()[0] == '_'\n                            && varname->value()[1] == '[') {\n                        /* Don't show stores of list comp append objects. */\n                        break;\n                    }\n\n                    // Return private names back to their original name\n                    const std::string class_prefix = std::string(\"_\") + code->name()->strValue();\n                    if (varname->startsWith(class_prefix + std::string(\"__\")))\n                        varname->setValue(varname->strValue().substr(class_prefix.size()));\n\n                    PycRef<ASTNode> name = new ASTName(varname);\n\n                    if (curblock->blktype() == ASTBlock::BLK_FOR\n                            && !curblock->inited()) {\n                        curblock.cast<ASTIterBlock>()->setIndex(name);\n                    } else if (stack.top().type() == ASTNode::NODE_IMPORT) {\n                        PycRef<ASTImport> import = stack.top().cast<ASTImport>();\n\n                        import->add_store(new ASTStore(value, name));\n                    } else if (curblock->blktype() == ASTBlock::BLK_WITH\n                               && !curblock->inited()) {\n                        curblock.cast<ASTWithBlock>()->setExpr(value);\n                        curblock.cast<ASTWithBlock>()->setVar(name);\n                    } else if (value.type() == ASTNode::NODE_CHAINSTORE) {\n                        append_to_chain_store(value, name, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(value, name));\n\n                        if (value.type() == ASTNode::NODE_INVALID)\n                            break;\n                    }\n                }\n            }\n            break;\n        case Pyc::STORE_SLICE_0:\n            {\n                PycRef<ASTNode> dest = stack.top();\n                stack.pop();\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTStore(value, new ASTSubscr(dest, new ASTSlice(ASTSlice::SLICE0))));\n            }\n            break;\n        case Pyc::STORE_SLICE_1:\n            {\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> dest = stack.top();\n                stack.pop();\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTStore(value, new ASTSubscr(dest, new ASTSlice(ASTSlice::SLICE1, upper))));\n            }\n            break;\n        case Pyc::STORE_SLICE_2:\n            {\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> dest = stack.top();\n                stack.pop();\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTStore(value, new ASTSubscr(dest, new ASTSlice(ASTSlice::SLICE2, NULL, lower))));\n            }\n            break;\n        case Pyc::STORE_SLICE_3:\n            {\n                PycRef<ASTNode> lower = stack.top();\n                stack.pop();\n                PycRef<ASTNode> upper = stack.top();\n                stack.pop();\n                PycRef<ASTNode> dest = stack.top();\n                stack.pop();\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n\n                curblock->append(new ASTStore(value, new ASTSubscr(dest, new ASTSlice(ASTSlice::SLICE3, upper, lower))));\n            }\n            break;\n        case Pyc::STORE_SUBSCR:\n            {\n                if (unpack) {\n                    PycRef<ASTNode> subscr = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> dest = stack.top();\n                    stack.pop();\n\n                    PycRef<ASTNode> save = new ASTSubscr(dest, subscr);\n\n                    PycRef<ASTNode> tup = stack.top();\n                    if (tup.type() == ASTNode::NODE_TUPLE)\n                        tup.cast<ASTTuple>()->add(save);\n                    else\n                        fputs(\"Something TERRIBLE happened!\\n\", stderr);\n\n                    if (--unpack <= 0) {\n                        stack.pop();\n                        PycRef<ASTNode> seq = stack.top();\n                        stack.pop();\n                        if (seq.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(seq, tup, stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(seq, tup));\n                        }\n                    }\n                } else {\n                    PycRef<ASTNode> subscr = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> dest = stack.top();\n                    stack.pop();\n                    PycRef<ASTNode> src = stack.top();\n                    stack.pop();\n\n                    // If variable annotations are enabled, we'll need to check for them here.\n                    // Python handles a varaible annotation by setting:\n                    // __annotations__['var-name'] = type\n                    const bool found_annotated_var = (variable_annotations && dest->type() == ASTNode::Type::NODE_NAME\n                                                      && dest.cast<ASTName>()->name()->isEqual(\"__annotations__\"));\n\n                    if (found_annotated_var) {\n                        // Annotations can be done alone or as part of an assignment.\n                        // In the case of an assignment, we'll see a NODE_STORE on the stack.\n                        if (!curblock->nodes().empty() && curblock->nodes().back()->type() == ASTNode::Type::NODE_STORE) {\n                            // Replace the existing NODE_STORE with a new one that includes the annotation.\n                            PycRef<ASTStore> store = curblock->nodes().back().cast<ASTStore>();\n                            curblock->removeLast();\n                            curblock->append(new ASTStore(store->src(),\n                                                          new ASTAnnotatedVar(subscr, src)));\n                        } else {\n                            curblock->append(new ASTAnnotatedVar(subscr, src));\n                        }\n                    } else {\n                        if (dest.type() == ASTNode::NODE_MAP) {\n                            dest.cast<ASTMap>()->add(subscr, src);\n                        } else if (src.type() == ASTNode::NODE_CHAINSTORE) {\n                            append_to_chain_store(src, new ASTSubscr(dest, subscr), stack, curblock);\n                        } else {\n                            curblock->append(new ASTStore(src, new ASTSubscr(dest, subscr)));\n                        }\n                    }\n                }\n            }\n            break;\n        case Pyc::UNARY_CALL:\n            {\n                PycRef<ASTNode> func = stack.top();\n                stack.pop();\n                stack.push(new ASTCall(func, ASTCall::pparam_t(), ASTCall::kwparam_t()));\n            }\n            break;\n        case Pyc::UNARY_CONVERT:\n            {\n                PycRef<ASTNode> name = stack.top();\n                stack.pop();\n                stack.push(new ASTConvert(name));\n            }\n            break;\n        case Pyc::UNARY_INVERT:\n            {\n                PycRef<ASTNode> arg = stack.top();\n                stack.pop();\n                stack.push(new ASTUnary(arg, ASTUnary::UN_INVERT));\n            }\n            break;\n        case Pyc::UNARY_NEGATIVE:\n            {\n                PycRef<ASTNode> arg = stack.top();\n                stack.pop();\n                stack.push(new ASTUnary(arg, ASTUnary::UN_NEGATIVE));\n            }\n            break;\n        case Pyc::UNARY_NOT:\n            {\n                PycRef<ASTNode> arg = stack.top();\n                stack.pop();\n                stack.push(new ASTUnary(arg, ASTUnary::UN_NOT));\n            }\n            break;\n        case Pyc::UNARY_POSITIVE:\n            {\n                PycRef<ASTNode> arg = stack.top();\n                stack.pop();\n                stack.push(new ASTUnary(arg, ASTUnary::UN_POSITIVE));\n            }\n            break;\n        case Pyc::UNPACK_LIST_A:\n        case Pyc::UNPACK_TUPLE_A:\n        case Pyc::UNPACK_SEQUENCE_A:\n            {\n                unpack = operand;\n                if (unpack > 0) {\n                    ASTTuple::value_t vals;\n                    stack.push(new ASTTuple(vals));\n                } else {\n                    // Unpack zero values and assign it to top of stack or for loop variable.\n                    // E.g. [] = TOS / for [] in X\n                    ASTTuple::value_t vals;\n                    auto tup = new ASTTuple(vals);\n                    if (curblock->blktype() == ASTBlock::BLK_FOR\n                        && !curblock->inited()) {\n                        tup->setRequireParens(true);\n                        curblock.cast<ASTIterBlock>()->setIndex(tup);\n                    } else if (stack.top().type() == ASTNode::NODE_CHAINSTORE) {\n                        auto chainStore = stack.top();\n                        stack.pop();\n                        append_to_chain_store(chainStore, tup, stack, curblock);\n                    } else {\n                        curblock->append(new ASTStore(stack.top(), tup));\n                        stack.pop();\n                    }\n                }\n            }\n            break;\n        case Pyc::YIELD_FROM:\n            {\n                PycRef<ASTNode> dest = stack.top();\n                stack.pop();\n                // TODO: Support yielding into a non-null destination\n                PycRef<ASTNode> value = stack.top();\n                if (value) {\n                    value->setProcessed();\n                    curblock->append(new ASTReturn(value, ASTReturn::YIELD_FROM));\n                }\n            }\n            break;\n        case Pyc::YIELD_VALUE:\n        case Pyc::INSTRUMENTED_YIELD_VALUE_A:\n            {\n                PycRef<ASTNode> value = stack.top();\n                stack.pop();\n                curblock->append(new ASTReturn(value, ASTReturn::YIELD));\n            }\n            break;\n        case Pyc::SETUP_ANNOTATIONS:\n            variable_annotations = true;\n            break;\n        case Pyc::PRECALL_A:\n        case Pyc::RESUME_A:\n        case Pyc::INSTRUMENTED_RESUME_A:\n            /* We just entirely ignore this / no-op */\n            break;\n        case Pyc::CACHE:\n            /* These \"fake\" opcodes are used as placeholders for optimizing\n               certain opcodes in Python 3.11+.  Since we have no need for\n               that during disassembly/decompilation, we can just treat these\n               as no-ops. */\n            break;\n        case Pyc::PUSH_NULL:\n            stack.push(nullptr);\n            break;\n        case Pyc::GEN_START_A:\n            stack.pop();\n            break;\n        case Pyc::SWAP_A:\n            {\n                unpack = operand;\n                ASTTuple::value_t values;\n                ASTTuple::value_t next_tuple;\n                values.resize(operand);\n                for (int i = 0; i < operand; i++) {\n                    values[operand - i - 1] = stack.top();\n                    stack.pop();\n                }\n                auto tup = new ASTTuple(values);\n                tup->setRequireParens(false);\n                auto next_tup = new ASTTuple(next_tuple);\n                next_tup->setRequireParens(false);\n                stack.push(tup);\n                stack.push(next_tup);\n            }\n            break;\n        default:\n            fprintf(stderr, \"Unsupported opcode: %s (%d)\\n\", Pyc::OpcodeName(opcode), opcode);\n            cleanBuild = false;\n            return new ASTNodeList(defblock->nodes());\n        }\n\n        else_pop =  ( (curblock->blktype() == ASTBlock::BLK_ELSE)\n                      || (curblock->blktype() == ASTBlock::BLK_IF)\n                      || (curblock->blktype() == ASTBlock::BLK_ELIF) )\n                 && (curblock->end() == pos);\n    }\n\n    if (stack_hist.size()) {\n        fputs(\"Warning: Stack history is not empty!\\n\", stderr);\n\n        while (stack_hist.size()) {\n            stack_hist.pop();\n        }\n    }\n\n    if (blocks.size() > 1) {\n        fputs(\"Warning: block stack is not empty!\\n\", stderr);\n\n        while (blocks.size() > 1) {\n            PycRef<ASTBlock> tmp = blocks.top();\n            blocks.pop();\n\n            blocks.top()->append(tmp.cast<ASTNode>());\n        }\n    }\n\n    cleanBuild = true;\n    return new ASTNodeList(defblock->nodes());\n}\n\nstatic void append_to_chain_store(const PycRef<ASTNode> &chainStore,\n        PycRef<ASTNode> item, FastStack& stack, const PycRef<ASTBlock>& curblock)\n{\n    stack.pop();    // ignore identical source object.\n    chainStore.cast<ASTChainStore>()->append(item);\n    if (stack.top().type() == PycObject::TYPE_NULL) {\n        curblock->append(chainStore);\n    } else {\n        stack.push(chainStore);\n    }\n}\n\nstatic int cmp_prec(PycRef<ASTNode> parent, PycRef<ASTNode> child)\n{\n    /* Determine whether the parent has higher precedence than therefore\n       child, so we don't flood the source code with extraneous parens.\n       Else we'd have expressions like (((a + b) + c) + d) when therefore\n       equivalent, a + b + c + d would suffice. */\n\n    if (parent.type() == ASTNode::NODE_UNARY && parent.cast<ASTUnary>()->op() == ASTUnary::UN_NOT)\n        return 1;   // Always parenthesize not(x)\n    if (child.type() == ASTNode::NODE_BINARY) {\n        PycRef<ASTBinary> binChild = child.cast<ASTBinary>();\n        if (parent.type() == ASTNode::NODE_BINARY) {\n            PycRef<ASTBinary> binParent = parent.cast<ASTBinary>();\n            if (binParent->right() == child) {\n                if (binParent->op() == ASTBinary::BIN_SUBTRACT &&\n                    binChild->op() == ASTBinary::BIN_ADD)\n                    return 1;\n                else if (binParent->op() == ASTBinary::BIN_DIVIDE &&\n                         binChild->op() == ASTBinary::BIN_MULTIPLY)\n                    return 1;\n            }\n            return binChild->op() - binParent->op();\n        }\n        else if (parent.type() == ASTNode::NODE_COMPARE)\n            return (binChild->op() == ASTBinary::BIN_LOG_AND ||\n                    binChild->op() == ASTBinary::BIN_LOG_OR) ? 1 : -1;\n        else if (parent.type() == ASTNode::NODE_UNARY)\n            return (binChild->op() == ASTBinary::BIN_POWER) ? -1 : 1;\n    } else if (child.type() == ASTNode::NODE_UNARY) {\n        PycRef<ASTUnary> unChild = child.cast<ASTUnary>();\n        if (parent.type() == ASTNode::NODE_BINARY) {\n            PycRef<ASTBinary> binParent = parent.cast<ASTBinary>();\n            if (binParent->op() == ASTBinary::BIN_LOG_AND ||\n                binParent->op() == ASTBinary::BIN_LOG_OR)\n                return -1;\n            else if (unChild->op() == ASTUnary::UN_NOT)\n                return 1;\n            else if (binParent->op() == ASTBinary::BIN_POWER)\n                return 1;\n            else\n                return -1;\n        } else if (parent.type() == ASTNode::NODE_COMPARE) {\n            return (unChild->op() == ASTUnary::UN_NOT) ? 1 : -1;\n        } else if (parent.type() == ASTNode::NODE_UNARY) {\n            return unChild->op() - parent.cast<ASTUnary>()->op();\n        }\n    } else if (child.type() == ASTNode::NODE_COMPARE) {\n        PycRef<ASTCompare> cmpChild = child.cast<ASTCompare>();\n        if (parent.type() == ASTNode::NODE_BINARY)\n            return (parent.cast<ASTBinary>()->op() == ASTBinary::BIN_LOG_AND ||\n                    parent.cast<ASTBinary>()->op() == ASTBinary::BIN_LOG_OR) ? -1 : 1;\n        else if (parent.type() == ASTNode::NODE_COMPARE)\n            return cmpChild->op() - parent.cast<ASTCompare>()->op();\n        else if (parent.type() == ASTNode::NODE_UNARY)\n            return (parent.cast<ASTUnary>()->op() == ASTUnary::UN_NOT) ? -1 : 1;\n    }\n\n    /* For normal nodes, don't parenthesize anything */\n    return -1;\n}\n\nstatic void print_ordered(PycRef<ASTNode> parent, PycRef<ASTNode> child,\n                          PycModule* mod, std::ostream& pyc_output)\n{\n    if (child.type() == ASTNode::NODE_BINARY ||\n        child.type() == ASTNode::NODE_COMPARE) {\n        if (cmp_prec(parent, child) > 0) {\n            pyc_output << \"(\";\n            print_src(child, mod, pyc_output);\n            pyc_output << \")\";\n        } else {\n            print_src(child, mod, pyc_output);\n        }\n    } else if (child.type() == ASTNode::NODE_UNARY) {\n        if (cmp_prec(parent, child) > 0) {\n            pyc_output << \"(\";\n            print_src(child, mod, pyc_output);\n            pyc_output << \")\";\n        } else {\n            print_src(child, mod, pyc_output);\n        }\n    } else {\n        print_src(child, mod, pyc_output);\n    }\n}\n\nstatic void start_line(int indent, std::ostream& pyc_output)\n{\n    if (inLambda)\n        return;\n    for (int i=0; i<indent; i++)\n        pyc_output << \"    \";\n}\n\nstatic void end_line(std::ostream& pyc_output)\n{\n    if (inLambda)\n        return;\n    pyc_output << \"\\n\";\n}\n\nint cur_indent = -1;\nstatic void print_block(PycRef<ASTBlock> blk, PycModule* mod,\n                        std::ostream& pyc_output)\n{\n    ASTBlock::list_t lines = blk->nodes();\n\n    if (lines.size() == 0) {\n        PycRef<ASTNode> pass = new ASTKeyword(ASTKeyword::KW_PASS);\n        start_line(cur_indent, pyc_output);\n        print_src(pass, mod, pyc_output);\n    }\n\n    for (auto ln = lines.cbegin(); ln != lines.cend();) {\n        if ((*ln).cast<ASTNode>().type() != ASTNode::NODE_NODELIST) {\n            start_line(cur_indent, pyc_output);\n        }\n        print_src(*ln, mod, pyc_output);\n        if (++ln != lines.end()) {\n            end_line(pyc_output);\n        }\n    }\n}\n\nvoid print_formatted_value(PycRef<ASTFormattedValue> formatted_value, PycModule* mod,\n                           std::ostream& pyc_output)\n{\n    pyc_output << \"{\";\n    print_src(formatted_value->val(), mod, pyc_output);\n\n    switch (formatted_value->conversion() & ASTFormattedValue::CONVERSION_MASK) {\n    case ASTFormattedValue::NONE:\n        break;\n    case ASTFormattedValue::STR:\n        pyc_output << \"!s\";\n        break;\n    case ASTFormattedValue::REPR:\n        pyc_output << \"!r\";\n        break;\n    case ASTFormattedValue::ASCII:\n        pyc_output << \"!a\";\n        break;\n    }\n    if (formatted_value->conversion() & ASTFormattedValue::HAVE_FMT_SPEC) {\n        pyc_output << \":\" << formatted_value->format_spec().cast<ASTObject>()->object().cast<PycString>()->value();\n    }\n    pyc_output << \"}\";\n}\n\nvoid print_src(PycRef<ASTNode> node, PycModule* mod, std::ostream& pyc_output)\n{\n    if (node == NULL) {\n        pyc_output << \"None\";\n        cleanBuild = true;\n        return;\n    }\n\n    switch (node->type()) {\n    case ASTNode::NODE_BINARY:\n    case ASTNode::NODE_COMPARE:\n        {\n            PycRef<ASTBinary> bin = node.cast<ASTBinary>();\n            print_ordered(node, bin->left(), mod, pyc_output);\n            pyc_output << bin->op_str();\n            print_ordered(node, bin->right(), mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_UNARY:\n        {\n            PycRef<ASTUnary> un = node.cast<ASTUnary>();\n            pyc_output << un->op_str();\n            print_ordered(node, un->operand(), mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_CALL:\n        {\n            PycRef<ASTCall> call = node.cast<ASTCall>();\n            print_src(call->func(), mod, pyc_output);\n            pyc_output << \"(\";\n            bool first = true;\n            for (const auto& param : call->pparams()) {\n                if (!first)\n                    pyc_output << \", \";\n                print_src(param, mod, pyc_output);\n                first = false;\n            }\n            for (const auto& param : call->kwparams()) {\n                if (!first)\n                    pyc_output << \", \";\n                if (param.first.type() == ASTNode::NODE_NAME) {\n                    pyc_output << param.first.cast<ASTName>()->name()->value() << \" = \";\n                } else {\n                    PycRef<PycString> str_name = param.first.cast<ASTObject>()->object().cast<PycString>();\n                    pyc_output << str_name->value() << \" = \";\n                }\n                print_src(param.second, mod, pyc_output);\n                first = false;\n            }\n            if (call->hasVar()) {\n                if (!first)\n                    pyc_output << \", \";\n                pyc_output << \"*\";\n                print_src(call->var(), mod, pyc_output);\n                first = false;\n            }\n            if (call->hasKW()) {\n                if (!first)\n                    pyc_output << \", \";\n                pyc_output << \"**\";\n                print_src(call->kw(), mod, pyc_output);\n                first = false;\n            }\n            pyc_output << \")\";\n        }\n        break;\n    case ASTNode::NODE_DELETE:\n        {\n            pyc_output << \"del \";\n            print_src(node.cast<ASTDelete>()->value(), mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_EXEC:\n        {\n            PycRef<ASTExec> exec = node.cast<ASTExec>();\n            pyc_output << \"exec \";\n            print_src(exec->statement(), mod, pyc_output);\n\n            if (exec->globals() != NULL) {\n                pyc_output << \" in \";\n                print_src(exec->globals(), mod, pyc_output);\n\n                if (exec->locals() != NULL\n                        && exec->globals() != exec->locals()) {\n                    pyc_output << \", \";\n                    print_src(exec->locals(), mod, pyc_output);\n                }\n            }\n        }\n        break;\n    case ASTNode::NODE_FORMATTEDVALUE:\n        pyc_output << \"f\" F_STRING_QUOTE;\n        print_formatted_value(node.cast<ASTFormattedValue>(), mod, pyc_output);\n        pyc_output << F_STRING_QUOTE;\n        break;\n    case ASTNode::NODE_JOINEDSTR:\n        pyc_output << \"f\" F_STRING_QUOTE;\n        for (const auto& val : node.cast<ASTJoinedStr>()->values()) {\n            switch (val.type()) {\n            case ASTNode::NODE_FORMATTEDVALUE:\n                print_formatted_value(val.cast<ASTFormattedValue>(), mod, pyc_output);\n                break;\n            case ASTNode::NODE_OBJECT:\n                // When printing a piece of the f-string, keep the quote style consistent.\n                // This avoids problems when ''' or \"\"\" is part of the string.\n                print_const(pyc_output, val.cast<ASTObject>()->object(), mod, F_STRING_QUOTE);\n                break;\n            default:\n                fprintf(stderr, \"Unsupported node type %d in NODE_JOINEDSTR\\n\", val.type());\n            }\n        }\n        pyc_output << F_STRING_QUOTE;\n        break;\n    case ASTNode::NODE_KEYWORD:\n        pyc_output << node.cast<ASTKeyword>()->word_str();\n        break;\n    case ASTNode::NODE_LIST:\n        {\n            pyc_output << \"[\";\n            bool first = true;\n            cur_indent++;\n            for (const auto& val : node.cast<ASTList>()->values()) {\n                if (first)\n                    pyc_output << \"\\n\";\n                else\n                    pyc_output << \",\\n\";\n                start_line(cur_indent, pyc_output);\n                print_src(val, mod, pyc_output);\n                first = false;\n            }\n            cur_indent--;\n            pyc_output << \"]\";\n        }\n        break;\n    case ASTNode::NODE_SET:\n        {\n            pyc_output << \"{\";\n            bool first = true;\n            cur_indent++;\n            for (const auto& val : node.cast<ASTSet>()->values()) {\n                if (first)\n                    pyc_output << \"\\n\";\n                else\n                    pyc_output << \",\\n\";\n                start_line(cur_indent, pyc_output);\n                print_src(val, mod, pyc_output);\n                first = false;\n            }\n            cur_indent--;\n            pyc_output << \"}\";\n        }\n        break;\n    case ASTNode::NODE_COMPREHENSION:\n        {\n            PycRef<ASTComprehension> comp = node.cast<ASTComprehension>();\n\n            pyc_output << \"[ \";\n            print_src(comp->result(), mod, pyc_output);\n\n            for (const auto& gen : comp->generators()) {\n                pyc_output << \" for \";\n                print_src(gen->index(), mod, pyc_output);\n                pyc_output << \" in \";\n                print_src(gen->iter(), mod, pyc_output);\n                if (gen->condition()) {\n                    pyc_output << \" if \";\n                    print_src(gen->condition(), mod, pyc_output);\n                }\n            }\n            pyc_output << \" ]\";\n        }\n        break;\n    case ASTNode::NODE_MAP:\n        {\n            pyc_output << \"{\";\n            bool first = true;\n            cur_indent++;\n            for (const auto& val : node.cast<ASTMap>()->values()) {\n                if (first)\n                    pyc_output << \"\\n\";\n                else\n                    pyc_output << \",\\n\";\n                start_line(cur_indent, pyc_output);\n                print_src(val.first, mod, pyc_output);\n                pyc_output << \": \";\n                print_src(val.second, mod, pyc_output);\n                first = false;\n            }\n            cur_indent--;\n            pyc_output << \" }\";\n        }\n        break;\n    case ASTNode::NODE_CONST_MAP:\n        {\n            PycRef<ASTConstMap> const_map = node.cast<ASTConstMap>();\n            PycTuple::value_t keys = const_map->keys().cast<ASTObject>()->object().cast<PycTuple>()->values();\n            ASTConstMap::values_t values = const_map->values();\n\n            auto map = new ASTMap;\n            for (const auto& key : keys) {\n                // Values are pushed onto the stack in reverse order.\n                PycRef<ASTNode> value = values.back();\n                values.pop_back();\n\n                map->add(new ASTObject(key), value);\n            }\n\n            print_src(map, mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_NAME:\n        pyc_output << node.cast<ASTName>()->name()->value();\n        break;\n    case ASTNode::NODE_NODELIST:\n        {\n            cur_indent++;\n            for (const auto& ln : node.cast<ASTNodeList>()->nodes()) {\n                if (ln.cast<ASTNode>().type() != ASTNode::NODE_NODELIST) {\n                    start_line(cur_indent, pyc_output);\n                }\n                print_src(ln, mod, pyc_output);\n                end_line(pyc_output);\n            }\n            cur_indent--;\n        }\n        break;\n    case ASTNode::NODE_BLOCK:\n        {\n            PycRef<ASTBlock> blk = node.cast<ASTBlock>();\n            if (blk->blktype() == ASTBlock::BLK_ELSE && blk->size() == 0)\n                break;\n\n            if (blk->blktype() == ASTBlock::BLK_CONTAINER) {\n                end_line(pyc_output);\n                print_block(blk, mod, pyc_output);\n                end_line(pyc_output);\n                break;\n            }\n\n            pyc_output << blk->type_str();\n            if (blk->blktype() == ASTBlock::BLK_IF\n                    || blk->blktype() == ASTBlock::BLK_ELIF\n                    || blk->blktype() == ASTBlock::BLK_WHILE) {\n                if (blk.cast<ASTCondBlock>()->negative())\n                    pyc_output << \" not \";\n                else\n                    pyc_output << \" \";\n\n                print_src(blk.cast<ASTCondBlock>()->cond(), mod, pyc_output);\n            } else if (blk->blktype() == ASTBlock::BLK_FOR || blk->blktype() == ASTBlock::BLK_ASYNCFOR) {\n                pyc_output << \" \";\n                print_src(blk.cast<ASTIterBlock>()->index(), mod, pyc_output);\n                pyc_output << \" in \";\n                print_src(blk.cast<ASTIterBlock>()->iter(), mod, pyc_output);\n            } else if (blk->blktype() == ASTBlock::BLK_EXCEPT &&\n                    blk.cast<ASTCondBlock>()->cond() != NULL) {\n                pyc_output << \" \";\n                print_src(blk.cast<ASTCondBlock>()->cond(), mod, pyc_output);\n            } else if (blk->blktype() == ASTBlock::BLK_WITH) {\n                pyc_output << \" \";\n                print_src(blk.cast<ASTWithBlock>()->expr(), mod, pyc_output);\n                PycRef<ASTNode> var = blk.try_cast<ASTWithBlock>()->var();\n                if (var != NULL) {\n                    pyc_output << \" as \";\n                    print_src(var, mod, pyc_output);\n                }\n            }\n            pyc_output << \":\\n\";\n\n            cur_indent++;\n            print_block(blk, mod, pyc_output);\n            cur_indent--;\n        }\n        break;\n    case ASTNode::NODE_OBJECT:\n        {\n            PycRef<PycObject> obj = node.cast<ASTObject>()->object();\n            if (obj.type() == PycObject::TYPE_CODE) {\n                PycRef<PycCode> code = obj.cast<PycCode>();\n                decompyle(code, mod, pyc_output);\n            } else {\n                print_const(pyc_output, obj, mod);\n            }\n        }\n        break;\n    case ASTNode::NODE_PRINT:\n        {\n            pyc_output << \"print \";\n            bool first = true;\n            if (node.cast<ASTPrint>()->stream() != nullptr) {\n                pyc_output << \">>\";\n                print_src(node.cast<ASTPrint>()->stream(), mod, pyc_output);\n                first = false;\n            }\n\n            for (const auto& val : node.cast<ASTPrint>()->values()) {\n                if (!first)\n                    pyc_output << \", \";\n                print_src(val, mod, pyc_output);\n                first = false;\n            }\n            if (!node.cast<ASTPrint>()->eol())\n                pyc_output << \",\";\n        }\n        break;\n    case ASTNode::NODE_RAISE:\n        {\n            PycRef<ASTRaise> raise = node.cast<ASTRaise>();\n            pyc_output << \"raise \";\n            bool first = true;\n            for (const auto& param : raise->params()) {\n                if (!first)\n                    pyc_output << \", \";\n                print_src(param, mod, pyc_output);\n                first = false;\n            }\n        }\n        break;\n    case ASTNode::NODE_RETURN:\n        {\n            PycRef<ASTReturn> ret = node.cast<ASTReturn>();\n            PycRef<ASTNode> value = ret->value();\n            if (!inLambda) {\n                switch (ret->rettype()) {\n                case ASTReturn::RETURN:\n                    pyc_output << \"return \";\n                    break;\n                case ASTReturn::YIELD:\n                    pyc_output << \"yield \";\n                    break;\n                case ASTReturn::YIELD_FROM:\n                    if (value.type() == ASTNode::NODE_AWAITABLE) {\n                        pyc_output << \"await \";\n                        value = value.cast<ASTAwaitable>()->expression();\n                    } else {\n                        pyc_output << \"yield from \";\n                    }\n                    break;\n                }\n            }\n            print_src(value, mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_SLICE:\n        {\n            PycRef<ASTSlice> slice = node.cast<ASTSlice>();\n\n            if (slice->op() & ASTSlice::SLICE1) {\n                print_src(slice->left(), mod, pyc_output);\n            }\n            pyc_output << \":\";\n            if (slice->op() & ASTSlice::SLICE2) {\n                print_src(slice->right(), mod, pyc_output);\n            }\n        }\n        break;\n    case ASTNode::NODE_IMPORT:\n        {\n            PycRef<ASTImport> import = node.cast<ASTImport>();\n            if (import->stores().size()) {\n                ASTImport::list_t stores = import->stores();\n\n                pyc_output << \"from \";\n                if (import->name().type() == ASTNode::NODE_IMPORT)\n                    print_src(import->name().cast<ASTImport>()->name(), mod, pyc_output);\n                else\n                    print_src(import->name(), mod, pyc_output);\n                pyc_output << \" import \";\n\n                if (stores.size() == 1) {\n                    auto src = stores.front()->src();\n                    auto dest = stores.front()->dest();\n                    print_src(src, mod, pyc_output);\n\n                    if (src.cast<ASTName>()->name()->value() != dest.cast<ASTName>()->name()->value()) {\n                        pyc_output << \" as \";\n                        print_src(dest, mod, pyc_output);\n                    }\n                } else {\n                    bool first = true;\n                    for (const auto& st : stores) {\n                        if (!first)\n                            pyc_output << \", \";\n                        print_src(st->src(), mod, pyc_output);\n                        first = false;\n\n                        if (st->src().cast<ASTName>()->name()->value() != st->dest().cast<ASTName>()->name()->value()) {\n                            pyc_output << \" as \";\n                            print_src(st->dest(), mod, pyc_output);\n                        }\n                    }\n                }\n            } else {\n                pyc_output << \"import \";\n                print_src(import->name(), mod, pyc_output);\n            }\n        }\n        break;\n    case ASTNode::NODE_FUNCTION:\n        {\n            /* Actual named functions are NODE_STORE with a name */\n            pyc_output << \"(lambda \";\n            PycRef<ASTNode> code = node.cast<ASTFunction>()->code();\n            PycRef<PycCode> code_src = code.cast<ASTObject>()->object().cast<PycCode>();\n            ASTFunction::defarg_t defargs = node.cast<ASTFunction>()->defargs();\n            ASTFunction::defarg_t kwdefargs = node.cast<ASTFunction>()->kwdefargs();\n            auto da = defargs.cbegin();\n            int narg = 0;\n            for (int i=0; i<code_src->argCount(); i++) {\n                if (narg)\n                    pyc_output << \", \";\n                pyc_output << code_src->getLocal(narg++)->value();\n                if ((code_src->argCount() - i) <= (int)defargs.size()) {\n                    pyc_output << \" = \";\n                    print_src(*da++, mod, pyc_output);\n                }\n            }\n            da = kwdefargs.cbegin();\n            if (code_src->kwOnlyArgCount() != 0) {\n                pyc_output << (narg == 0 ? \"*\" : \", *\");\n                for (int i = 0; i < code_src->argCount(); i++) {\n                    pyc_output << \", \";\n                    pyc_output << code_src->getLocal(narg++)->value();\n                    if ((code_src->kwOnlyArgCount() - i) <= (int)kwdefargs.size()) {\n                        pyc_output << \" = \";\n                        print_src(*da++, mod, pyc_output);\n                    }\n                }\n            }\n            pyc_output << \": \";\n\n            inLambda = true;\n            print_src(code, mod, pyc_output);\n            inLambda = false;\n\n            pyc_output << \")\";\n        }\n        break;\n    case ASTNode::NODE_STORE:\n        {\n            PycRef<ASTNode> src = node.cast<ASTStore>()->src();\n            PycRef<ASTNode> dest = node.cast<ASTStore>()->dest();\n            if (src.type() == ASTNode::NODE_FUNCTION) {\n                PycRef<ASTNode> code = src.cast<ASTFunction>()->code();\n                PycRef<PycCode> code_src = code.cast<ASTObject>()->object().cast<PycCode>();\n                bool isLambda = false;\n\n                if (strcmp(code_src->name()->value(), \"<lambda>\") == 0) {\n                    pyc_output << \"\\n\";\n                    start_line(cur_indent, pyc_output);\n                    print_src(dest, mod, pyc_output);\n                    pyc_output << \" = lambda \";\n                    isLambda = true;\n                } else {\n                    pyc_output << \"\\n\";\n                    start_line(cur_indent, pyc_output);\n                    if (code_src->flags() & PycCode::CO_COROUTINE)\n                        pyc_output << \"async \";\n                    pyc_output << \"def \";\n                    print_src(dest, mod, pyc_output);\n                    pyc_output << \"(\";\n                }\n\n                ASTFunction::defarg_t defargs = src.cast<ASTFunction>()->defargs();\n                ASTFunction::defarg_t kwdefargs = src.cast<ASTFunction>()->kwdefargs();\n                auto da = defargs.cbegin();\n                int narg = 0;\n                for (int i = 0; i < code_src->argCount(); ++i) {\n                    if (narg)\n                        pyc_output << \", \";\n                    pyc_output << code_src->getLocal(narg++)->value();\n                    if ((code_src->argCount() - i) <= (int)defargs.size()) {\n                        pyc_output << \" = \";\n                        print_src(*da++, mod, pyc_output);\n                    }\n                }\n                da = kwdefargs.cbegin();\n                if (code_src->kwOnlyArgCount() != 0) {\n                    pyc_output << (narg == 0 ? \"*\" : \", *\");\n                    for (int i = 0; i < code_src->kwOnlyArgCount(); ++i) {\n                        pyc_output << \", \";\n                        pyc_output << code_src->getLocal(narg++)->value();\n                        if ((code_src->kwOnlyArgCount() - i) <= (int)kwdefargs.size()) {\n                            pyc_output << \" = \";\n                            print_src(*da++, mod, pyc_output);\n                        }\n                    }\n                }\n                if (code_src->flags() & PycCode::CO_VARARGS) {\n                    if (narg)\n                        pyc_output << \", \";\n                    pyc_output << \"*\" << code_src->getLocal(narg++)->value();\n                }\n                if (code_src->flags() & PycCode::CO_VARKEYWORDS) {\n                    if (narg)\n                        pyc_output << \", \";\n                    pyc_output << \"**\" << code_src->getLocal(narg++)->value();\n                }\n\n                if (isLambda) {\n                    pyc_output << \": \";\n                } else {\n                    pyc_output << \"):\\n\";\n                    printDocstringAndGlobals = true;\n                }\n\n                bool preLambda = inLambda;\n                inLambda |= isLambda;\n\n                print_src(code, mod, pyc_output);\n\n                inLambda = preLambda;\n            } else if (src.type() == ASTNode::NODE_CLASS) {\n                pyc_output << \"\\n\";\n                start_line(cur_indent, pyc_output);\n                pyc_output << \"class \";\n                print_src(dest, mod, pyc_output);\n                PycRef<ASTTuple> bases = src.cast<ASTClass>()->bases().cast<ASTTuple>();\n                if (bases->values().size() > 0) {\n                    pyc_output << \"(\";\n                    bool first = true;\n                    for (const auto& val : bases->values()) {\n                        if (!first)\n                            pyc_output << \", \";\n                        print_src(val, mod, pyc_output);\n                        first = false;\n                    }\n                    pyc_output << \"):\\n\";\n                } else {\n                    // Don't put parens if there are no base classes\n                    pyc_output << \":\\n\";\n                }\n                printClassDocstring = true;\n                PycRef<ASTNode> code = src.cast<ASTClass>()->code().cast<ASTCall>()\n                                       ->func().cast<ASTFunction>()->code();\n                print_src(code, mod, pyc_output);\n            } else if (src.type() == ASTNode::NODE_IMPORT) {\n                PycRef<ASTImport> import = src.cast<ASTImport>();\n                if (import->fromlist() != NULL) {\n                    PycRef<PycObject> fromlist = import->fromlist().cast<ASTObject>()->object();\n                    if (fromlist != Pyc_None) {\n                        pyc_output << \"from \";\n                        if (import->name().type() == ASTNode::NODE_IMPORT)\n                            print_src(import->name().cast<ASTImport>()->name(), mod, pyc_output);\n                        else\n                            print_src(import->name(), mod, pyc_output);\n                        pyc_output << \" import \";\n                        if (fromlist.type() == PycObject::TYPE_TUPLE ||\n                                fromlist.type() == PycObject::TYPE_SMALL_TUPLE) {\n                            bool first = true;\n                            for (const auto& val : fromlist.cast<PycTuple>()->values()) {\n                                if (!first)\n                                    pyc_output << \", \";\n                                pyc_output << val.cast<PycString>()->value();\n                                first = false;\n                            }\n                        } else {\n                            pyc_output << fromlist.cast<PycString>()->value();\n                        }\n                    } else {\n                        pyc_output << \"import \";\n                        print_src(import->name(), mod, pyc_output);\n                    }\n                } else {\n                    pyc_output << \"import \";\n                    PycRef<ASTNode> import_name = import->name();\n                    print_src(import_name, mod, pyc_output);\n                    if (!dest.cast<ASTName>()->name()->isEqual(import_name.cast<ASTName>()->name().cast<PycObject>())) {\n                        pyc_output << \" as \";\n                        print_src(dest, mod, pyc_output);\n                    }\n                }\n            } else if (src.type() == ASTNode::NODE_BINARY\n                    && src.cast<ASTBinary>()->is_inplace()) {\n                print_src(src, mod, pyc_output);\n            } else {\n                print_src(dest, mod, pyc_output);\n                pyc_output << \" = \";\n                print_src(src, mod, pyc_output);\n            }\n        }\n        break;\n    case ASTNode::NODE_CHAINSTORE:\n        {\n            for (auto& dest : node.cast<ASTChainStore>()->nodes()) {\n                print_src(dest, mod, pyc_output);\n                pyc_output << \" = \";\n            }\n            print_src(node.cast<ASTChainStore>()->src(), mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_SUBSCR:\n        {\n            print_src(node.cast<ASTSubscr>()->name(), mod, pyc_output);\n            pyc_output << \"[\";\n            print_src(node.cast<ASTSubscr>()->key(), mod, pyc_output);\n            pyc_output << \"]\";\n        }\n        break;\n    case ASTNode::NODE_CONVERT:\n        {\n            pyc_output << \"`\";\n            print_src(node.cast<ASTConvert>()->name(), mod, pyc_output);\n            pyc_output << \"`\";\n        }\n        break;\n    case ASTNode::NODE_TUPLE:\n        {\n            PycRef<ASTTuple> tuple = node.cast<ASTTuple>();\n            ASTTuple::value_t values = tuple->values();\n            if (tuple->requireParens())\n                pyc_output << \"(\";\n            bool first = true;\n            for (const auto& val : values) {\n                if (!first)\n                    pyc_output << \", \";\n                print_src(val, mod, pyc_output);\n                first = false;\n            }\n            if (values.size() == 1)\n                pyc_output << ',';\n            if (tuple->requireParens())\n                pyc_output << ')';\n        }\n        break;\n    case ASTNode::NODE_ANNOTATED_VAR:\n        {\n            PycRef<ASTAnnotatedVar> annotated_var = node.cast<ASTAnnotatedVar>();\n            PycRef<ASTObject> name = annotated_var->name().cast<ASTObject>();\n            PycRef<ASTNode> annotation = annotated_var->annotation();\n\n            pyc_output << name->object().cast<PycString>()->value();\n            pyc_output << \": \";\n            print_src(annotation, mod, pyc_output);\n        }\n        break;\n    case ASTNode::NODE_TERNARY:\n        {\n            /* parenthesis might be needed\n             * \n             * when if-expr is part of numerical expression, ternary has the LOWEST precedence\n             *     print(a + b if False else c)\n             * output is c, not a+c (a+b is calculated first)\n             * \n             * but, let's not add parenthesis - to keep the source as close to original as possible in most cases\n             */\n            PycRef<ASTTernary> ternary = node.cast<ASTTernary>();\n            //pyc_output << \"(\";\n            print_src(ternary->if_expr(), mod, pyc_output);\n            const auto if_block = ternary->if_block().cast<ASTCondBlock>();\n            pyc_output << \" if \";\n            if (if_block->negative())\n                pyc_output << \"not \";\n            print_src(if_block->cond(), mod, pyc_output);\n            pyc_output << \" else \";\n            print_src(ternary->else_expr(), mod, pyc_output);\n            //pyc_output << \")\";\n        }\n        break;\n    default:\n        pyc_output << \"<NODE:\" << node->type() << \">\";\n        fprintf(stderr, \"Unsupported Node type: %d\\n\", node->type());\n        cleanBuild = false;\n        return;\n    }\n\n    cleanBuild = true;\n}\n\nbool print_docstring(PycRef<PycObject> obj, int indent, PycModule* mod,\n                     std::ostream& pyc_output)\n{\n    // docstrings are translated from the bytecode __doc__ = 'string' to simply '''string'''\n    auto doc = obj.try_cast<PycString>();\n    if (doc != nullptr) {\n        start_line(indent, pyc_output);\n        doc->print(pyc_output, mod, true);\n        pyc_output << \"\\n\";\n        return true;\n    }\n    return false;\n}\n\nvoid decompyle(PycRef<PycCode> code, PycModule* mod, std::ostream& pyc_output)\n{\n    PycRef<ASTNode> source = BuildFromCode(code, mod);\n\n    PycRef<ASTNodeList> clean = source.cast<ASTNodeList>();\n    if (cleanBuild) {\n        // The Python compiler adds some stuff that we don't really care\n        // about, and would add extra code for re-compilation anyway.\n        // We strip these lines out here, and then add a \"pass\" statement\n        // if the cleaned up code is empty\n        if (clean->nodes().front().type() == ASTNode::NODE_STORE) {\n            PycRef<ASTStore> store = clean->nodes().front().cast<ASTStore>();\n            if (store->src().type() == ASTNode::NODE_NAME\n                    && store->dest().type() == ASTNode::NODE_NAME) {\n                PycRef<ASTName> src = store->src().cast<ASTName>();\n                PycRef<ASTName> dest = store->dest().cast<ASTName>();\n                if (src->name()->isEqual(\"__name__\")\n                        && dest->name()->isEqual(\"__module__\")) {\n                    // __module__ = __name__\n                    // Automatically added by Python 2.2.1 and later\n                    clean->removeFirst();\n                }\n            }\n        }\n        if (clean->nodes().front().type() == ASTNode::NODE_STORE) {\n            PycRef<ASTStore> store = clean->nodes().front().cast<ASTStore>();\n            if (store->src().type() == ASTNode::NODE_OBJECT\n                    && store->dest().type() == ASTNode::NODE_NAME) {\n                PycRef<ASTObject> src = store->src().cast<ASTObject>();\n                PycRef<PycString> srcString = src->object().try_cast<PycString>();\n                PycRef<ASTName> dest = store->dest().cast<ASTName>();\n                if (dest->name()->isEqual(\"__qualname__\")) {\n                    // __qualname__ = '<Class Name>'\n                    // Automatically added by Python 3.3 and later\n                    clean->removeFirst();\n                }\n            }\n        }\n\n        // Class and module docstrings may only appear at the beginning of their source\n        if (printClassDocstring && clean->nodes().front().type() == ASTNode::NODE_STORE) {\n            PycRef<ASTStore> store = clean->nodes().front().cast<ASTStore>();\n            if (store->dest().type() == ASTNode::NODE_NAME &&\n                    store->dest().cast<ASTName>()->name()->isEqual(\"__doc__\") &&\n                    store->src().type() == ASTNode::NODE_OBJECT) {\n                if (print_docstring(store->src().cast<ASTObject>()->object(),\n                        cur_indent + (code->name()->isEqual(\"<module>\") ? 0 : 1), mod, pyc_output))\n                    clean->removeFirst();\n            }\n        }\n        if (clean->nodes().back().type() == ASTNode::NODE_RETURN) {\n            PycRef<ASTReturn> ret = clean->nodes().back().cast<ASTReturn>();\n\n            PycRef<ASTObject> retObj = ret->value().try_cast<ASTObject>();\n            if (ret->value() == NULL || ret->value().type() == ASTNode::NODE_LOCALS ||\n                    (retObj && retObj->object().type() == PycObject::TYPE_NONE)) {\n                clean->removeLast();  // Always an extraneous return statement\n            }\n        }\n    }\n    if (printClassDocstring)\n        printClassDocstring = false;\n    // This is outside the clean check so a source block will always\n    // be compilable, even if decompylation failed.\n    if (clean->nodes().size() == 0 && !code.isIdent(mod->code()))\n        clean->append(new ASTKeyword(ASTKeyword::KW_PASS));\n\n    bool part1clean = cleanBuild;\n\n    if (printDocstringAndGlobals) {\n        if (code->consts()->size())\n            print_docstring(code->getConst(0), cur_indent + 1, mod, pyc_output);\n\n        PycCode::globals_t globs = code->getGlobals();\n        if (globs.size()) {\n            start_line(cur_indent + 1, pyc_output);\n            pyc_output << \"global \";\n            bool first = true;\n            for (const auto& glob : globs) {\n                if (!first)\n                    pyc_output << \", \";\n                pyc_output << glob->value();\n                first = false;\n            }\n            pyc_output << \"\\n\";\n        }\n        printDocstringAndGlobals = false;\n    }\n\n    print_src(source, mod, pyc_output);\n\n    if (!cleanBuild || !part1clean) {\n        start_line(cur_indent, pyc_output);\n        pyc_output << \"# WARNING: Decompyle incomplete\\n\";\n    }\n}\n"
        },
        {
          "name": "ASTree.h",
          "type": "blob",
          "size": 0.2978515625,
          "content": "#ifndef _PYC_ASTREE_H\n#define _PYC_ASTREE_H\n\n#include \"ASTNode.h\"\n\nPycRef<ASTNode> BuildFromCode(PycRef<PycCode> code, PycModule* mod);\nvoid print_src(PycRef<ASTNode> node, PycModule* mod, std::ostream& pyc_output);\n\nvoid decompyle(PycRef<PycCode> code, PycModule* mod, std::ostream& pyc_output);\n\n#endif\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.1259765625,
          "content": "cmake_minimum_required(VERSION 3.12)\nproject(pycdc)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Debug options.\noption(ENABLE_BLOCK_DEBUG \"Enable block debugging\" OFF)\noption(ENABLE_STACK_DEBUG \"Enable stack debugging\" OFF)\n\n# Turn debug defs on if they're enabled.\nif (ENABLE_BLOCK_DEBUG)\n    add_definitions(-DBLOCK_DEBUG)\nendif()\nif (ENABLE_STACK_DEBUG)\n    add_definitions(-DSTACK_DEBUG)\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCXX OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    set(CMAKE_CXX_FLAGS \"-Wall -Wextra -Wno-error=shadow -Werror ${CMAKE_CXX_FLAGS}\")\nelseif(MSVC)\n    set(CMAKE_CXX_FLAGS \"/WX ${CMAKE_CXX_FLAGS}\")\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\nendif()\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\n\nadd_library(pycxx STATIC\n    bytecode.cpp\n    data.cpp\n    pyc_code.cpp\n    pyc_module.cpp\n    pyc_numeric.cpp\n    pyc_object.cpp\n    pyc_sequence.cpp\n    pyc_string.cpp\n    bytes/python_1_0.cpp\n    bytes/python_1_1.cpp\n    bytes/python_1_3.cpp\n    bytes/python_1_4.cpp\n    bytes/python_1_5.cpp\n    bytes/python_1_6.cpp\n    bytes/python_2_0.cpp\n    bytes/python_2_1.cpp\n    bytes/python_2_2.cpp\n    bytes/python_2_3.cpp\n    bytes/python_2_4.cpp\n    bytes/python_2_5.cpp\n    bytes/python_2_6.cpp\n    bytes/python_2_7.cpp\n    bytes/python_3_0.cpp\n    bytes/python_3_1.cpp\n    bytes/python_3_2.cpp\n    bytes/python_3_3.cpp\n    bytes/python_3_4.cpp\n    bytes/python_3_5.cpp\n    bytes/python_3_6.cpp\n    bytes/python_3_7.cpp\n    bytes/python_3_8.cpp\n    bytes/python_3_9.cpp\n    bytes/python_3_10.cpp\n    bytes/python_3_11.cpp\n    bytes/python_3_12.cpp\n    bytes/python_3_13.cpp\n)\n\nadd_executable(pycdas pycdas.cpp)\ntarget_link_libraries(pycdas pycxx)\n\ninstall(TARGETS pycdas\n    RUNTIME DESTINATION bin)\n\nadd_executable(pycdc pycdc.cpp ASTree.cpp ASTNode.cpp)\ntarget_link_libraries(pycdc pycxx)\n\ninstall(TARGETS pycdc\n    RUNTIME DESTINATION bin)\n\nfind_package(Python3 3.6 COMPONENTS Interpreter)\nif(Python3_FOUND)\n    add_custom_target(check\n        COMMAND \"${Python3_EXECUTABLE}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/run_tests.py\"\n        WORKING_DIRECTORY \"$<TARGET_FILE_DIR:pycdc>\")\n    add_dependencies(check pycdc)\nendif()\n"
        },
        {
          "name": "FastStack.h",
          "type": "blob",
          "size": 1.0087890625,
          "content": "#ifndef _PYC_FASTSTACK_H\n#define _PYC_FASTSTACK_H\n\n#include \"ASTNode.h\"\n#include <stack>\n\nclass FastStack {\npublic:\n    FastStack(int size) : m_ptr(-1) { m_stack.resize(size); }\n\n    FastStack(const FastStack& copy)\n        : m_stack(copy.m_stack), m_ptr(copy.m_ptr) { }\n\n    FastStack& operator=(const FastStack& copy)\n    {\n        m_stack = copy.m_stack;\n        m_ptr = copy.m_ptr;\n        return *this;\n    }\n\n    void push(PycRef<ASTNode> node)\n    {\n        if (static_cast<int>(m_stack.size()) == m_ptr + 1)\n            m_stack.emplace_back(nullptr);\n\n        m_stack[++m_ptr] = std::move(node);\n    }\n\n    void pop()\n    {\n        if (m_ptr > -1)\n            m_stack[m_ptr--] = nullptr;\n    }\n\n    PycRef<ASTNode> top() const\n    {\n        if (m_ptr > -1)\n            return m_stack[m_ptr];\n        else\n            return nullptr;\n    }\n\n    bool empty() const\n    {\n        return m_ptr == -1;\n    }\n\nprivate:\n    std::vector<PycRef<ASTNode>> m_stack;\n    int m_ptr;\n};\n\ntypedef std::stack<FastStack> stackhist_t;\n\n#endif\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 2.0791015625,
          "content": "# Decompyle++ \n***A Python Byte-code Disassembler/Decompiler***\n\nDecompyle++ aims to translate compiled Python byte-code back into valid\nand human-readable Python source code. While other projects have achieved\nthis with varied success, Decompyle++ is unique in that it seeks to\nsupport byte-code from any version of Python.\n\nDecompyle++ includes both a byte-code disassembler (pycdas) and a \ndecompiler (pycdc).\n\nAs the name implies, Decompyle++ is written in C++.\nIf you wish to contribute, please fork us on github at \nhttps://github.com/zrax/pycdc\n\n## Building Decompyle++\n* Generate a project or makefile with [CMake](http://www.cmake.org) (See CMake's documentation for details)\n  * The following options can be passed to CMake to control debug features:\n\n    | Option | Description |\n    | --- | --- |\n    | `-DCMAKE_BUILD_TYPE=Debug` | Produce debugging symbols |\n    | `-DENABLE_BLOCK_DEBUG=ON` | Enable block debugging output |\n    | `-DENABLE_STACK_DEBUG=ON` | Enable stack debugging output |\n\n* Build the generated project or makefile\n  * For projects (e.g. MSVC), open the generated project file and build it\n  * For makefiles, just run `make`\n  * To run tests (on \\*nix or MSYS), run `make check JOBS=4` (optional\n    `FILTER=xxxx` to run only certain tests)\n\n## Usage\n**To run pycdas**, the PYC Disassembler:\n`./pycdas [PATH TO PYC FILE]`\nThe byte-code disassembly is printed to stdout.\n\n**To run pycdc**, the PYC Decompiler: \n`./pycdc [PATH TO PYC FILE]`\nThe decompiled Python source is printed to stdout.\nAny errors are printed to stderr.\n\n**Marshalled code objects**:\nBoth tools support Python marshalled code objects, as output from `marshal.dumps(compile(...))`.\n\nTo use this feature, specify `-c -v <version>` on the command line - the version must be specified as the objects themselves do not contain version metadata.\n\n## Authors, Licence, Credits\nDecompyle++ is the work of Michael Hansen and Darryl Pogue.\n\nAdditional contributions from:\n* charlietang98\n* Kunal Parmar\n* Olivier Iffrig\n* Zlodiy\n\nIt is released under the terms of the GNU General Public License, version 3;\nSee LICENSE file for details.\n"
        },
        {
          "name": "bytecode.cpp",
          "type": "blob",
          "size": 22.7861328125,
          "content": "#include \"pyc_numeric.h\"\n#include \"bytecode.h\"\n#include <stdexcept>\n#include <cstdint>\n#include <cmath>\n\n#ifdef _MSC_VER\n#define snprintf _snprintf\n#endif\n\n#define DECLARE_PYTHON(maj, min) \\\n    extern int python_##maj##_##min##_map(int);\n\nDECLARE_PYTHON(1, 0)\nDECLARE_PYTHON(1, 1)\nDECLARE_PYTHON(1, 3)\nDECLARE_PYTHON(1, 4)\nDECLARE_PYTHON(1, 5)\nDECLARE_PYTHON(1, 6)\nDECLARE_PYTHON(2, 0)\nDECLARE_PYTHON(2, 1)\nDECLARE_PYTHON(2, 2)\nDECLARE_PYTHON(2, 3)\nDECLARE_PYTHON(2, 4)\nDECLARE_PYTHON(2, 5)\nDECLARE_PYTHON(2, 6)\nDECLARE_PYTHON(2, 7)\nDECLARE_PYTHON(3, 0)\nDECLARE_PYTHON(3, 1)\nDECLARE_PYTHON(3, 2)\nDECLARE_PYTHON(3, 3)\nDECLARE_PYTHON(3, 4)\nDECLARE_PYTHON(3, 5)\nDECLARE_PYTHON(3, 6)\nDECLARE_PYTHON(3, 7)\nDECLARE_PYTHON(3, 8)\nDECLARE_PYTHON(3, 9)\nDECLARE_PYTHON(3, 10)\nDECLARE_PYTHON(3, 11)\nDECLARE_PYTHON(3, 12)\nDECLARE_PYTHON(3, 13)\n\nconst char* Pyc::OpcodeName(int opcode)\n{\n    static const char* opcode_names[] = {\n        #define OPCODE(x) #x,\n        #define OPCODE_A_FIRST(x) #x,\n        #define OPCODE_A(x) #x,\n        #include \"bytecode_ops.inl\"\n        #undef OPCODE_A\n        #undef OPCODE_A_FIRST\n        #undef OPCODE\n    };\n\n#if __cplusplus >= 201103L\n    static_assert(sizeof(opcode_names) / sizeof(opcode_names[0]) == PYC_LAST_OPCODE,\n                  \"Pyc::OpcodeName opcode_names not in sync with opcode enum\");\n#endif\n\n    if (opcode < 0)\n        return \"<INVALID>\";\n\n    if (opcode < PYC_LAST_OPCODE)\n        return opcode_names[opcode];\n\n    static char badcode[16];\n    snprintf(badcode, sizeof(badcode), \"<%d>\", opcode);\n    return badcode;\n};\n\nint Pyc::ByteToOpcode(int maj, int min, int opcode)\n{\n    switch (maj) {\n    case 1:\n        switch (min) {\n        case 0: return python_1_0_map(opcode);\n        case 1: return python_1_1_map(opcode);\n        case 3: return python_1_3_map(opcode);\n        case 4: return python_1_4_map(opcode);\n        case 5: return python_1_5_map(opcode);\n        case 6: return python_1_6_map(opcode);\n        }\n        break;\n    case 2:\n        switch (min) {\n        case 0: return python_2_0_map(opcode);\n        case 1: return python_2_1_map(opcode);\n        case 2: return python_2_2_map(opcode);\n        case 3: return python_2_3_map(opcode);\n        case 4: return python_2_4_map(opcode);\n        case 5: return python_2_5_map(opcode);\n        case 6: return python_2_6_map(opcode);\n        case 7: return python_2_7_map(opcode);\n        }\n        break;\n    case 3:\n        switch (min) {\n        case 0: return python_3_0_map(opcode);\n        case 1: return python_3_1_map(opcode);\n        case 2: return python_3_2_map(opcode);\n        case 3: return python_3_3_map(opcode);\n        case 4: return python_3_4_map(opcode);\n        case 5: return python_3_5_map(opcode);\n        case 6: return python_3_6_map(opcode);\n        case 7: return python_3_7_map(opcode);\n        case 8: return python_3_8_map(opcode);\n        case 9: return python_3_9_map(opcode);\n        case 10: return python_3_10_map(opcode);\n        case 11: return python_3_11_map(opcode);\n        case 12: return python_3_12_map(opcode);\n        case 13: return python_3_13_map(opcode);\n        }\n        break;\n    }\n    return PYC_INVALID_OPCODE;\n}\n\nvoid print_const(std::ostream& pyc_output, PycRef<PycObject> obj, PycModule* mod,\n                 const char* parent_f_string_quote)\n{\n    if (obj == NULL) {\n        pyc_output << \"<NULL>\";\n        return;\n    }\n\n    switch (obj->type()) {\n    case PycObject::TYPE_STRING:\n    case PycObject::TYPE_UNICODE:\n    case PycObject::TYPE_INTERNED:\n    case PycObject::TYPE_ASCII:\n    case PycObject::TYPE_ASCII_INTERNED:\n    case PycObject::TYPE_SHORT_ASCII:\n    case PycObject::TYPE_SHORT_ASCII_INTERNED:\n        obj.cast<PycString>()->print(pyc_output, mod, false, parent_f_string_quote);\n        break;\n    case PycObject::TYPE_TUPLE:\n    case PycObject::TYPE_SMALL_TUPLE:\n        {\n            pyc_output << \"(\";\n            PycTuple::value_t values = obj.cast<PycTuple>()->values();\n            auto it = values.cbegin();\n            if (it != values.cend()) {\n                print_const(pyc_output, *it, mod);\n                while (++it != values.cend()) {\n                    pyc_output << \", \";\n                    print_const(pyc_output, *it, mod);\n                }\n            }\n            if (values.size() == 1)\n                pyc_output << \",)\";\n            else\n                pyc_output << \")\";\n        }\n        break;\n    case PycObject::TYPE_LIST:\n        {\n            pyc_output << \"[\";\n            PycList::value_t values = obj.cast<PycList>()->values();\n            auto it = values.cbegin();\n            if (it != values.cend()) {\n                print_const(pyc_output, *it, mod);\n                while (++it != values.cend()) {\n                    pyc_output << \", \";\n                    print_const(pyc_output, *it, mod);\n                }\n            }\n            pyc_output << \"]\";\n        }\n        break;\n    case PycObject::TYPE_DICT:\n        {\n            pyc_output << \"{\";\n            PycDict::value_t values = obj.cast<PycDict>()->values();\n            auto it = values.cbegin();\n            if (it != values.cend()) {\n                print_const(pyc_output, std::get<0>(*it), mod);\n                pyc_output << \": \";\n                print_const(pyc_output, std::get<1>(*it), mod);\n                while (++it != values.cend()) {\n                    pyc_output << \", \";\n                    print_const(pyc_output, std::get<0>(*it), mod);\n                    pyc_output << \": \";\n                    print_const(pyc_output, std::get<1>(*it), mod);\n                }\n            }\n            pyc_output << \"}\";\n        }\n        break;\n    case PycObject::TYPE_SET:\n        {\n            pyc_output << \"{\";\n            PycSet::value_t values = obj.cast<PycSet>()->values();\n            auto it = values.cbegin();\n            if (it != values.cend()) {\n                print_const(pyc_output, *it, mod);\n                while (++it != values.cend()) {\n                    pyc_output << \", \";\n                    print_const(pyc_output, *it, mod);\n                }\n            }\n            pyc_output << \"}\";\n        }\n        break;\n    case PycObject::TYPE_FROZENSET:\n        {\n            pyc_output << \"frozenset({\";\n            PycSet::value_t values = obj.cast<PycSet>()->values();\n            auto it = values.cbegin();\n            if (it != values.cend()) {\n                print_const(pyc_output, *it, mod);\n                while (++it != values.cend()) {\n                    pyc_output << \", \";\n                    print_const(pyc_output, *it, mod);\n                }\n            }\n            pyc_output << \"})\";\n        }\n        break;\n    case PycObject::TYPE_NONE:\n        pyc_output << \"None\";\n        break;\n    case PycObject::TYPE_TRUE:\n        pyc_output << \"True\";\n        break;\n    case PycObject::TYPE_FALSE:\n        pyc_output << \"False\";\n        break;\n    case PycObject::TYPE_ELLIPSIS:\n        pyc_output << \"...\";\n        break;\n    case PycObject::TYPE_INT:\n        formatted_print(pyc_output, \"%d\", obj.cast<PycInt>()->value());\n        break;\n    case PycObject::TYPE_LONG:\n        formatted_print(pyc_output, \"%s\", obj.cast<PycLong>()->repr(mod).c_str());\n        break;\n    case PycObject::TYPE_FLOAT:\n        formatted_print(pyc_output, \"%s\", obj.cast<PycFloat>()->value());\n        break;\n    case PycObject::TYPE_COMPLEX:\n        formatted_print(pyc_output, \"(%s+%sj)\", obj.cast<PycComplex>()->value(),\n                                        obj.cast<PycComplex>()->imag());\n        break;\n    case PycObject::TYPE_BINARY_FLOAT:\n        {\n            // Wrap any nan/inf values in float('').\n            double value = obj.cast<PycCFloat>()->value();\n            bool is_negative = std::signbit(value);\n            if (std::isnan(value)) {\n                if (is_negative) {\n                    pyc_output << \"float('-nan')\";\n                } else {\n                    pyc_output << \"float('nan')\";\n                }\n            } else if (std::isinf(value)) {\n                if (is_negative) {\n                    pyc_output << \"float('-inf')\";\n                } else {\n                    pyc_output << \"float('inf')\";\n                }\n            } else {\n                formatted_print(pyc_output, \"%g\", value);\n            }\n        }\n        break;\n    case PycObject::TYPE_BINARY_COMPLEX:\n        formatted_print(pyc_output, \"(%g+%gj)\", obj.cast<PycCComplex>()->value(),\n                                        obj.cast<PycCComplex>()->imag());\n        break;\n    case PycObject::TYPE_CODE:\n    case PycObject::TYPE_CODE2:\n        pyc_output << \"<CODE> \" << obj.cast<PycCode>()->name()->value();\n        break;\n    default:\n        formatted_print(pyc_output, \"<TYPE: %d>\\n\", obj->type());\n    }\n}\n\nvoid bc_next(PycBuffer& source, PycModule* mod, int& opcode, int& operand, int& pos)\n{\n    opcode = Pyc::ByteToOpcode(mod->majorVer(), mod->minorVer(), source.getByte());\n    if (mod->verCompare(3, 6) >= 0) {\n        operand = source.getByte();\n        pos += 2;\n        if (opcode == Pyc::EXTENDED_ARG_A) {\n            opcode = Pyc::ByteToOpcode(mod->majorVer(), mod->minorVer(), source.getByte());\n            operand = (operand << 8) | source.getByte();\n            pos += 2;\n        }\n    } else {\n        operand = 0;\n        pos += 1;\n        if (opcode == Pyc::EXTENDED_ARG_A) {\n            operand = source.get16() << 16;\n            opcode = Pyc::ByteToOpcode(mod->majorVer(), mod->minorVer(), source.getByte());\n            pos += 3;\n        }\n        if (opcode >= Pyc::PYC_HAVE_ARG) {\n            operand |= source.get16();\n            pos += 2;\n        }\n    }\n}\n\nvoid bc_disasm(std::ostream& pyc_output, PycRef<PycCode> code, PycModule* mod,\n               int indent, unsigned flags)\n{\n    static const char *cmp_strings[] = {\n        \"<\", \"<=\", \"==\", \"!=\", \">\", \">=\", \"in\", \"not in\", \"is\", \"is not\",\n        \"<EXCEPTION MATCH>\", \"<BAD>\"\n    };\n    static const size_t cmp_strings_len = sizeof(cmp_strings) / sizeof(cmp_strings[0]);\n\n    static const char *binop_strings[] = {\n        \"+\", \"&\", \"//\", \"<<\", \"@\", \"*\", \"%\", \"|\", \"**\", \">>\", \"-\", \"/\", \"^\",\n        \"+=\", \"&=\", \"//=\", \"<<=\", \"@=\", \"*=\", \"%=\", \"|=\", \"**=\", \">>=\", \"-=\", \"/=\", \"^=\",\n    };\n    static const size_t binop_strings_len = sizeof(binop_strings) / sizeof(binop_strings[0]);\n\n    static const char *intrinsic1_names[] = {\n        \"INTRINSIC_1_INVALID\", \"INTRINSIC_PRINT\", \"INTRINSIC_IMPORT_STAR\",\n        \"INTRINSIC_STOPITERATION_ERROR\", \"INTRINSIC_ASYNC_GEN_WRAP\",\n        \"INTRINSIC_UNARY_POSITIVE\", \"INTRINSIC_LIST_TO_TUPLE\", \"INTRINSIC_TYPEVAR\",\n        \"INTRINSIC_PARAMSPEC\", \"INTRINSIC_TYPEVARTUPLE\",\n        \"INTRINSIC_SUBSCRIPT_GENERIC\", \"INTRINSIC_TYPEALIAS\",\n    };\n    static const size_t intrinsic1_names_len = sizeof(intrinsic1_names) / sizeof(intrinsic1_names[0]);\n\n    static const char *intrinsic2_names[] = {\n        \"INTRINSIC_2_INVALID\", \"INTRINSIC_PREP_RERAISE_STAR\",\n        \"INTRINSIC_TYPEVAR_WITH_BOUND\", \"INTRINSIC_TYPEVAR_WITH_CONSTRAINTS\",\n        \"INTRINSIC_SET_FUNCTION_TYPE_PARAMS\", \"INTRINSIC_SET_TYPEPARAM_DEFAULT\",\n    };\n    static const size_t intrinsic2_names_len = sizeof(intrinsic2_names) / sizeof(intrinsic2_names[0]);\n\n    static const char *format_value_names[] = {\n        \"FVC_NONE\", \"FVC_STR\", \"FVC_REPR\", \"FVC_ASCII\",\n    };\n    static const size_t format_value_names_len = sizeof(format_value_names) / sizeof(format_value_names[0]);\n\n    PycBuffer source(code->code()->value(), code->code()->length());\n\n    int opcode, operand;\n    int pos = 0;\n    while (!source.atEof()) {\n        int start_pos = pos;\n        bc_next(source, mod, opcode, operand, pos);\n        if (opcode == Pyc::CACHE && (flags & Pyc::DISASM_SHOW_CACHES) == 0)\n            continue;\n\n        for (int i=0; i<indent; i++)\n            pyc_output << \"    \";\n        formatted_print(pyc_output, \"%-7d %-30s  \", start_pos, Pyc::OpcodeName(opcode));\n\n        if (opcode >= Pyc::PYC_HAVE_ARG) {\n            switch (opcode) {\n            case Pyc::LOAD_CONST_A:\n            case Pyc::RESERVE_FAST_A:\n            case Pyc::KW_NAMES_A:\n            case Pyc::RETURN_CONST_A:\n            case Pyc::INSTRUMENTED_RETURN_CONST_A:\n                try {\n                    auto constParam = code->getConst(operand);\n                    formatted_print(pyc_output, \"%d: \", operand);\n                    print_const(pyc_output, constParam, mod);\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::LOAD_GLOBAL_A:\n                try {\n                    // Special case for Python 3.11+\n                    if (mod->verCompare(3, 11) >= 0) {\n                        if (operand & 1)\n                            formatted_print(pyc_output, \"%d: NULL + %s\", operand, code->getName(operand >> 1)->value());\n                        else\n                            formatted_print(pyc_output, \"%d: %s\", operand, code->getName(operand >> 1)->value());\n                    } else {\n                        formatted_print(pyc_output, \"%d: %s\", operand, code->getName(operand)->value());\n                    }\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::DELETE_ATTR_A:\n            case Pyc::DELETE_GLOBAL_A:\n            case Pyc::DELETE_NAME_A:\n            case Pyc::IMPORT_FROM_A:\n            case Pyc::IMPORT_NAME_A:\n            case Pyc::LOAD_ATTR_A:\n            case Pyc::LOAD_LOCAL_A:\n            case Pyc::LOAD_NAME_A:\n            case Pyc::STORE_ATTR_A:\n            case Pyc::STORE_GLOBAL_A:\n            case Pyc::STORE_NAME_A:\n            case Pyc::STORE_ANNOTATION_A:\n            case Pyc::LOAD_METHOD_A:\n            case Pyc::LOAD_FROM_DICT_OR_GLOBALS_A:\n                try {\n                    auto arg = operand;\n                    if (opcode == Pyc::LOAD_ATTR_A && mod->verCompare(3, 12) >= 0)\n                        arg >>= 1;\n                    formatted_print(pyc_output, \"%d: %s\", operand, code->getName(arg)->value());\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::LOAD_SUPER_ATTR_A:\n            case Pyc::INSTRUMENTED_LOAD_SUPER_ATTR_A:\n                try {\n                    formatted_print(pyc_output, \"%d: %s\", operand, code->getName(operand >> 2)->value());\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::DELETE_FAST_A:\n            case Pyc::LOAD_FAST_A:\n            case Pyc::STORE_FAST_A:\n            case Pyc::LOAD_FAST_CHECK_A:\n            case Pyc::LOAD_FAST_AND_CLEAR_A:\n                try {\n                    formatted_print(pyc_output, \"%d: %s\", operand, code->getLocal(operand)->value());\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::LOAD_FAST_LOAD_FAST_A:\n            case Pyc::STORE_FAST_LOAD_FAST_A:\n            case Pyc::STORE_FAST_STORE_FAST_A:\n                try {\n                    formatted_print(pyc_output, \"%d: %s, %s\", operand,\n                                    code->getLocal(operand >> 4)->value(),\n                                    code->getLocal(operand & 0xF)->value());\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::LOAD_CLOSURE_A:\n            case Pyc::LOAD_DEREF_A:\n            case Pyc::STORE_DEREF_A:\n            case Pyc::DELETE_DEREF_A:\n            case Pyc::MAKE_CELL_A:\n            case Pyc::CALL_FINALLY_A:\n            case Pyc::LOAD_FROM_DICT_OR_DEREF_A:\n                try {\n                    formatted_print(pyc_output, \"%d: %s\", operand, code->getCellVar(mod, operand)->value());\n                } catch (const std::out_of_range &) {\n                    formatted_print(pyc_output, \"%d <INVALID>\", operand);\n                }\n                break;\n            case Pyc::JUMP_FORWARD_A:\n            case Pyc::JUMP_IF_FALSE_A:\n            case Pyc::JUMP_IF_TRUE_A:\n            case Pyc::SETUP_LOOP_A:\n            case Pyc::SETUP_FINALLY_A:\n            case Pyc::SETUP_EXCEPT_A:\n            case Pyc::FOR_LOOP_A:\n            case Pyc::FOR_ITER_A:\n            case Pyc::SETUP_WITH_A:\n            case Pyc::SETUP_ASYNC_WITH_A:\n            case Pyc::POP_JUMP_FORWARD_IF_FALSE_A:\n            case Pyc::POP_JUMP_FORWARD_IF_TRUE_A:\n            case Pyc::SEND_A:\n            case Pyc::POP_JUMP_FORWARD_IF_NOT_NONE_A:\n            case Pyc::POP_JUMP_FORWARD_IF_NONE_A:\n            case Pyc::POP_JUMP_IF_NOT_NONE_A:\n            case Pyc::POP_JUMP_IF_NONE_A:\n            case Pyc::INSTRUMENTED_POP_JUMP_IF_NOT_NONE_A:\n            case Pyc::INSTRUMENTED_POP_JUMP_IF_NONE_A:\n            case Pyc::INSTRUMENTED_JUMP_FORWARD_A:\n            case Pyc::INSTRUMENTED_FOR_ITER_A:\n            case Pyc::INSTRUMENTED_POP_JUMP_IF_FALSE_A:\n            case Pyc::INSTRUMENTED_POP_JUMP_IF_TRUE_A:\n                {\n                    int offs = operand;\n                    if (mod->verCompare(3, 10) >= 0)\n                        offs *= sizeof(uint16_t); // BPO-27129\n                    formatted_print(pyc_output, \"%d (to %d)\", operand, pos+offs);\n                }\n                break;\n            case Pyc::JUMP_BACKWARD_NO_INTERRUPT_A:\n            case Pyc::JUMP_BACKWARD_A:\n            case Pyc::POP_JUMP_BACKWARD_IF_NOT_NONE_A:\n            case Pyc::POP_JUMP_BACKWARD_IF_NONE_A:\n            case Pyc::POP_JUMP_BACKWARD_IF_FALSE_A:\n            case Pyc::POP_JUMP_BACKWARD_IF_TRUE_A:\n            case Pyc::INSTRUMENTED_JUMP_BACKWARD_A:\n                {\n                    // BACKWARD jumps were only introduced in Python 3.11\n                    int offs = operand * sizeof(uint16_t); // BPO-27129\n                    formatted_print(pyc_output, \"%d (to %d)\", operand, pos-offs);\n                }\n                break;\n            case Pyc::POP_JUMP_IF_FALSE_A:\n            case Pyc::POP_JUMP_IF_TRUE_A:\n            case Pyc::JUMP_IF_FALSE_OR_POP_A:\n            case Pyc::JUMP_IF_TRUE_OR_POP_A:\n            case Pyc::JUMP_ABSOLUTE_A:\n            case Pyc::JUMP_IF_NOT_EXC_MATCH_A:\n                if (mod->verCompare(3, 12) >= 0) {\n                    // These are now relative as well\n                    int offs = operand * sizeof(uint16_t);\n                    formatted_print(pyc_output, \"%d (to %d)\", operand, pos+offs);\n                } else if (mod->verCompare(3, 10) >= 0) {\n                    // BPO-27129\n                    formatted_print(pyc_output, \"%d (to %d)\", operand,\n                                    int(operand * sizeof(uint16_t)));\n                } else {\n                    formatted_print(pyc_output, \"%d\", operand);\n                }\n                break;\n            case Pyc::COMPARE_OP_A:\n                {\n                    auto arg = operand;\n                    if (mod->verCompare(3, 12) == 0)\n                        arg >>= 4; // changed under GH-100923\n                    else if (mod->verCompare(3, 13) >= 0)\n                        arg >>= 5;\n                    if (static_cast<size_t>(arg) < cmp_strings_len)\n                        formatted_print(pyc_output, \"%d (%s)\", operand, cmp_strings[arg]);\n                    else\n                        formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                }\n                break;\n            case Pyc::BINARY_OP_A:\n                if (static_cast<size_t>(operand) < binop_strings_len)\n                    formatted_print(pyc_output, \"%d (%s)\", operand, binop_strings[operand]);\n                else\n                    formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                break;\n            case Pyc::IS_OP_A:\n                formatted_print(pyc_output, \"%d (%s)\", operand, (operand == 0) ? \"is\"\n                                                      : (operand == 1) ? \"is not\"\n                                                      : \"UNKNOWN\");\n                break;\n            case Pyc::CONTAINS_OP_A:\n                formatted_print(pyc_output, \"%d (%s)\", operand, (operand == 0) ? \"in\"\n                                                      : (operand == 1) ? \"not in\"\n                                                      : \"UNKNOWN\");\n                break;\n            case Pyc::CALL_INTRINSIC_1_A:\n                if (static_cast<size_t>(operand) < intrinsic1_names_len)\n                    formatted_print(pyc_output, \"%d (%s)\", operand, intrinsic1_names[operand]);\n                else\n                    formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                break;\n            case Pyc::CALL_INTRINSIC_2_A:\n                if (static_cast<size_t>(operand) < intrinsic2_names_len)\n                    formatted_print(pyc_output, \"%d (%s)\", operand, intrinsic2_names[operand]);\n                else\n                    formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                break;\n            case Pyc::FORMAT_VALUE_A:\n                {\n                    auto conv = static_cast<size_t>(operand & 0x03);\n                    const char *flag = (operand & 0x04) ? \" | FVS_HAVE_SPEC\" : \"\";\n                    if (conv < format_value_names_len) {\n                        formatted_print(pyc_output, \"%d (%s%s)\", operand,\n                                        format_value_names[conv], flag);\n                    } else {\n                        formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                    }\n                }\n                break;\n            case Pyc::CONVERT_VALUE_A:\n                if (static_cast<size_t>(operand) < format_value_names_len)\n                    formatted_print(pyc_output, \"%d (%s)\", operand, format_value_names[operand]);\n                else\n                    formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                break;\n            case Pyc::SET_FUNCTION_ATTRIBUTE_A:\n                // This looks like a bitmask, but CPython treats it as an exclusive lookup...\n                switch (operand) {\n                case 0x01:\n                    formatted_print(pyc_output, \"%d (MAKE_FUNCTION_DEFAULTS)\", operand);\n                    break;\n                case 0x02:\n                    formatted_print(pyc_output, \"%d (MAKE_FUNCTION_KWDEFAULTS)\", operand);\n                    break;\n                case 0x04:\n                    formatted_print(pyc_output, \"%d (MAKE_FUNCTION_ANNOTATIONS)\", operand);\n                    break;\n                case 0x08:\n                    formatted_print(pyc_output, \"%d (MAKE_FUNCTION_CLOSURE)\", operand);\n                    break;\n                default:\n                    formatted_print(pyc_output, \"%d (UNKNOWN)\", operand);\n                    break;\n                }\n                break;\n            default:\n                formatted_print(pyc_output, \"%d\", operand);\n                break;\n            }\n        }\n        pyc_output << \"\\n\";\n    }\n}\n"
        },
        {
          "name": "bytecode.h",
          "type": "blob",
          "size": 0.880859375,
          "content": "#include \"pyc_code.h\"\n#include \"pyc_module.h\"\n#include \"data.h\"\n\nnamespace Pyc {\n\nenum Opcode {\n    #define OPCODE(x) x,\n    #define OPCODE_A_FIRST(x) PYC_HAVE_ARG, x##_A = PYC_HAVE_ARG,\n    #define OPCODE_A(x) x##_A,\n    #include \"bytecode_ops.inl\"\n    #undef OPCODE_A\n    #undef OPCODE_A_FIRST\n    #undef OPCODE\n\n    PYC_LAST_OPCODE,\n    PYC_INVALID_OPCODE = -1,\n};\n\nenum DisassemblyFlags {\n    DISASM_PYCODE_VERBOSE = 0x1,\n    DISASM_SHOW_CACHES = 0x2,\n};\n\nconst char* OpcodeName(int opcode);\nint ByteToOpcode(int maj, int min, int opcode);\n\n}\n\nvoid print_const(std::ostream& pyc_output, PycRef<PycObject> obj, PycModule* mod,\n                 const char* parent_f_string_quote = nullptr);\nvoid bc_next(PycBuffer& source, PycModule* mod, int& opcode, int& operand, int& pos);\nvoid bc_disasm(std::ostream& pyc_output, PycRef<PycCode> code, PycModule* mod,\n               int indent, unsigned flags);\n"
        },
        {
          "name": "bytecode_ops.inl",
          "type": "blob",
          "size": 20.779296875,
          "content": "/* No parameter word */\nOPCODE(STOP_CODE)                       // Python 1.0 - 3.2\nOPCODE(POP_TOP)                         // Python 1.0 ->\nOPCODE(ROT_TWO)                         // Python 1.0 - 3.10\nOPCODE(ROT_THREE)                       // Python 1.0 - 3.10\nOPCODE(DUP_TOP)                         // Python 1.0 - 3.10\nOPCODE(DUP_TOP_TWO)                     // Python 3.2 - 3.10\nOPCODE(UNARY_POSITIVE)                  // Python 1.0 - 3.11\nOPCODE(UNARY_NEGATIVE)                  // Python 1.0 ->\nOPCODE(UNARY_NOT)                       // Python 1.0 ->\nOPCODE(UNARY_CONVERT)                   // Python 1.0 - 2.7\nOPCODE(UNARY_CALL)                      // Python 1.0 - 1.2\nOPCODE(UNARY_INVERT)                    // Python 1.0 ->\nOPCODE(BINARY_POWER)                    // Python 1.4 - 3.10\nOPCODE(BINARY_MULTIPLY)                 // Python 1.0 - 3.10\nOPCODE(BINARY_DIVIDE)                   // Python 1.0 - 2.7\nOPCODE(BINARY_MODULO)                   // Python 1.0 - 3.10\nOPCODE(BINARY_ADD)                      // Python 1.0 - 3.10\nOPCODE(BINARY_SUBTRACT)                 // Python 1.0 - 3.10\nOPCODE(BINARY_SUBSCR)                   // Python 1.0 ->\nOPCODE(BINARY_CALL)                     // Python 1.0 - 1.2\nOPCODE(SLICE_0)                         // Python 1.0 - 2.7\nOPCODE(SLICE_1)                         // Python 1.0 - 2.7\nOPCODE(SLICE_2)                         // Python 1.0 - 2.7\nOPCODE(SLICE_3)                         // Python 1.0 - 2.7\nOPCODE(STORE_SLICE_0)                   // Python 1.0 - 2.7\nOPCODE(STORE_SLICE_1)                   // Python 1.0 - 2.7\nOPCODE(STORE_SLICE_2)                   // Python 1.0 - 2.7\nOPCODE(STORE_SLICE_3)                   // Python 1.0 - 2.7\nOPCODE(DELETE_SLICE_0)                  // Python 1.0 - 2.7\nOPCODE(DELETE_SLICE_1)                  // Python 1.0 - 2.7\nOPCODE(DELETE_SLICE_2)                  // Python 1.0 - 2.7\nOPCODE(DELETE_SLICE_3)                  // Python 1.0 - 2.7\nOPCODE(STORE_SUBSCR)                    // Python 1.0 ->\nOPCODE(DELETE_SUBSCR)                   // Python 1.0 ->\nOPCODE(BINARY_LSHIFT)                   // Python 1.0 - 3.10\nOPCODE(BINARY_RSHIFT)                   // Python 1.0 - 3.10\nOPCODE(BINARY_AND)                      // Python 1.0 - 3.10\nOPCODE(BINARY_XOR)                      // Python 1.0 - 3.10\nOPCODE(BINARY_OR)                       // Python 1.0 - 3.10\nOPCODE(PRINT_EXPR)                      // Python 1.0 - 3.11\nOPCODE(PRINT_ITEM)                      // Python 1.0 - 2.7\nOPCODE(PRINT_NEWLINE)                   // Python 1.0 - 2.7\nOPCODE(BREAK_LOOP)                      // Python 1.0 - 3.7\nOPCODE(RAISE_EXCEPTION)                 // Python 1.0 - 1.2\nOPCODE(LOAD_LOCALS)                     // Python 1.0 - 2.7, 3.12 ->\nOPCODE(RETURN_VALUE)                    // Python 1.0 ->\nOPCODE(LOAD_GLOBALS)                    // Python 1.0 - 1.2\nOPCODE(EXEC_STMT)                       // Python 1.0 - 2.7\nOPCODE(BUILD_FUNCTION)                  // Python 1.0 - 1.2\nOPCODE(POP_BLOCK)                       // Python 1.0 - 3.10\nOPCODE(END_FINALLY)                     // Python 1.0 - 3.8\nOPCODE(BUILD_CLASS)                     // Python 1.0 - 2.7\nOPCODE(ROT_FOUR)                        // Python 2.0 - 3.1, 3.8 - 3.10\nOPCODE(NOP)                             // Python 2.4 ->\nOPCODE(LIST_APPEND)                     // Python 2.4 - 2.6, 3.0\nOPCODE(BINARY_FLOOR_DIVIDE)             // Python 2.2 - 3.10\nOPCODE(BINARY_TRUE_DIVIDE)              // Python 2.2 - 3.10\nOPCODE(INPLACE_FLOOR_DIVIDE)            // Python 2.2 - 3.10\nOPCODE(INPLACE_TRUE_DIVIDE)             // Python 2.2 - 3.10\nOPCODE(GET_LEN)                         // Python 3.10 ->\nOPCODE(MATCH_MAPPING)                   // Python 3.10 ->\nOPCODE(MATCH_SEQUENCE)                  // Python 3.10 ->\nOPCODE(MATCH_KEYS)                      // Python 3.10 ->\nOPCODE(COPY_DICT_WITHOUT_KEYS)          // Python 3.10\nOPCODE(STORE_MAP)                       // Python 2.6 - 3.4\nOPCODE(INPLACE_ADD)                     // Python 2.0 - 3.10\nOPCODE(INPLACE_SUBTRACT)                // Python 2.0 - 3.10\nOPCODE(INPLACE_MULTIPLY)                // Python 2.0 - 3.10\nOPCODE(INPLACE_DIVIDE)                  // Python 2.0 - 2.7\nOPCODE(INPLACE_MODULO)                  // Python 2.0 - 3.10\nOPCODE(INPLACE_POWER)                   // Python 2.0 - 3.10\nOPCODE(GET_ITER)                        // Python 2.2 ->\nOPCODE(PRINT_ITEM_TO)                   // Python 2.0 - 2.7\nOPCODE(PRINT_NEWLINE_TO)                // Python 2.0 - 2.7\nOPCODE(INPLACE_LSHIFT)                  // Python 2.0 - 3.10\nOPCODE(INPLACE_RSHIFT)                  // Python 2.0 - 3.10\nOPCODE(INPLACE_AND)                     // Python 2.0 - 3.10\nOPCODE(INPLACE_XOR)                     // Python 2.0 - 3.10\nOPCODE(INPLACE_OR)                      // Python 2.0 - 3.10\nOPCODE(WITH_CLEANUP)                    // Python 2.5 - 3.4\nOPCODE(WITH_CLEANUP_START)              // Python 3.5 - 3.8\nOPCODE(WITH_CLEANUP_FINISH)             // Python 3.5 - 3.8\nOPCODE(IMPORT_STAR)                     // Python 2.0 - 3.11\nOPCODE(SETUP_ANNOTATIONS)               // Python 3.6 ->\nOPCODE(YIELD_VALUE)                     // Python 2.2 - 3.11\nOPCODE(LOAD_BUILD_CLASS)                // Python 3.0 ->\nOPCODE(STORE_LOCALS)                    // Python 3.0 - 3.3\nOPCODE(POP_EXCEPT)                      // Python 3.0 ->\nOPCODE(SET_ADD)                         // Python 3.0\nOPCODE(YIELD_FROM)                      // Python 3.3 - 3.10\nOPCODE(BINARY_MATRIX_MULTIPLY)          // Python 3.5 - 3.10\nOPCODE(INPLACE_MATRIX_MULTIPLY)         // Python 3.5 - 3.10\nOPCODE(GET_AITER)                       // Python 3.5 ->\nOPCODE(GET_ANEXT)                       // Python 3.5 ->\nOPCODE(BEFORE_ASYNC_WITH)               // Python 3.5 ->\nOPCODE(GET_YIELD_FROM_ITER)             // Python 3.5 ->\nOPCODE(GET_AWAITABLE)                   // Python 3.5 - 3.10\nOPCODE(BEGIN_FINALLY)                   // Python 3.8\nOPCODE(END_ASYNC_FOR)                   // Python 3.8 ->\nOPCODE(RERAISE)                         // Python 3.9\nOPCODE(WITH_EXCEPT_START)               // Python 3.9 ->\nOPCODE(LOAD_ASSERTION_ERROR)            // Python 3.9 ->\nOPCODE(LIST_TO_TUPLE)                   // Python 3.9 - 3.11\nOPCODE(CACHE)                           // Python 3.11 ->\nOPCODE(PUSH_NULL)                       // Python 3.11 ->\nOPCODE(PUSH_EXC_INFO)                   // Python 3.11 ->\nOPCODE(CHECK_EXC_MATCH)                 // Python 3.11 ->\nOPCODE(CHECK_EG_MATCH)                  // Python 3.11 ->\nOPCODE(BEFORE_WITH)                     // Python 3.11 ->\nOPCODE(RETURN_GENERATOR)                // Python 3.11 ->\nOPCODE(ASYNC_GEN_WRAP)                  // Python 3.11\nOPCODE(PREP_RERAISE_STAR)               // Python 3.11\nOPCODE(INTERPRETER_EXIT)                // Python 3.12 ->\nOPCODE(END_FOR)                         // Python 3.12 ->\nOPCODE(END_SEND)                        // Python 3.12 ->\nOPCODE(RESERVED)                        // Python 3.12 ->\nOPCODE(BINARY_SLICE)                    // Python 3.12 ->\nOPCODE(STORE_SLICE)                     // Python 3.12 ->\nOPCODE(CLEANUP_THROW)                   // Python 3.12 ->\nOPCODE(EXIT_INIT_CHECK)                 // Python 3.13 ->\nOPCODE(FORMAT_SIMPLE)                   // Python 3.13 ->\nOPCODE(FORMAT_WITH_SPEC)                // Python 3.13 ->\nOPCODE(MAKE_FUNCTION)                   // Python 3.13 ->\nOPCODE(TO_BOOL)                         // Python 3.13 ->\n\n/* Has parameter word */\nOPCODE_A_FIRST(STORE_NAME)              // Python 1.0 ->                names[A]\nOPCODE_A(DELETE_NAME)                   // Python 1.0 ->                names[A]\nOPCODE_A(UNPACK_TUPLE)                  // Python 1.0 - 1.6             A=count\nOPCODE_A(UNPACK_LIST)                   // Python 1.0 - 1.6             A=count\nOPCODE_A(UNPACK_ARG)                    // Python 1.0 - 1.4             A=count\nOPCODE_A(STORE_ATTR)                    // Python 1.0 ->                names[A]\nOPCODE_A(DELETE_ATTR)                   // Python 1.0 ->                names[A]\nOPCODE_A(STORE_GLOBAL)                  // Python 1.0 ->                names[A]\nOPCODE_A(DELETE_GLOBAL)                 // Python 1.0 ->                names[A]\nOPCODE_A(ROT_N)                         // Python 3.10                  A=count\nOPCODE_A(UNPACK_VARARG)                 // Python 1.0 - 1.4             A=count\nOPCODE_A(LOAD_CONST)                    // Python 1.0 ->                consts[A]\nOPCODE_A(LOAD_NAME)                     // Python 1.0 ->                names[A]\nOPCODE_A(BUILD_TUPLE)                   // Python 1.0 ->                A=size\nOPCODE_A(BUILD_LIST)                    // Python 1.0 ->                A=size\nOPCODE_A(BUILD_MAP)                     // Python 1.0 ->                A=size\nOPCODE_A(LOAD_ATTR)                     // Python 1.0 - 3.11            names[A]\n                                        // Python 3.12 ->               A=(names[A<<1])+(flag)\nOPCODE_A(COMPARE_OP)                    // Python 1.0 - 3.11            cmp_ops[A]\n                                        // Python 3.12                  A=(cmp_ops[A<<4])+(flags)\n                                        // Python 3.13 ->               A=(cmp_ops[A<<5])+(flags)\nOPCODE_A(IMPORT_NAME)                   // Python 1.0 ->                names[A]\nOPCODE_A(IMPORT_FROM)                   // Python 1.0 ->                names[A]\nOPCODE_A(ACCESS_MODE)                   // Python 1.0 - 1.4             names[A]\nOPCODE_A(JUMP_FORWARD)                  // Python 1.0 ->                rel jmp +A\nOPCODE_A(JUMP_IF_FALSE)                 // Python 1.0 - 2.6, 3.0        rel jmp +A\nOPCODE_A(JUMP_IF_TRUE)                  // Python 1.0 - 2.6, 3.0        rel jmp +A\nOPCODE_A(JUMP_ABSOLUTE)                 // Python 1.0 - 3.10            abs jmp A\nOPCODE_A(FOR_LOOP)                      // Python 1.0 - 2.2             rel jmp +A\nOPCODE_A(LOAD_LOCAL)                    // Python 1.0 - 1.4             names[A]\nOPCODE_A(LOAD_GLOBAL)                   // Python 1.0 - 3.10            names[A]\n                                        // Python 3.11 ->               A=(names[A<<1])+(flag)\nOPCODE_A(SET_FUNC_ARGS)                 // Python 1.1 - 1.4             A=count\nOPCODE_A(SETUP_LOOP)                    // Python 1.0 - 3.7             rel jmp +A\nOPCODE_A(SETUP_EXCEPT)                  // Python 1.0 - 3.7             rel jmp +A\nOPCODE_A(SETUP_FINALLY)                 // Python 1.0 - 3.10            rel jmp +A\nOPCODE_A(RESERVE_FAST)                  // Python 1.0 - 1.2             A=count\nOPCODE_A(LOAD_FAST)                     // Python 1.0 ->                locals[A]\nOPCODE_A(STORE_FAST)                    // Python 1.0 ->                locals[A]\nOPCODE_A(DELETE_FAST)                   // Python 1.0 ->                locals[A]\nOPCODE_A(GEN_START)                     // Python 3.10                  ???\nOPCODE_A(SET_LINENO)                    // Python 1.0 - 2.2             A=line\nOPCODE_A(STORE_ANNOTATION)              // Python 3.6                   names[A]\nOPCODE_A(RAISE_VARARGS)                 // Python 1.3 ->                A=count\nOPCODE_A(CALL_FUNCTION)                 // Python 1.3 - 3.5             A=(#args)+(#kwargs<<8)\n                                        // Python 3.6 - 3.10            A=#args\nOPCODE_A(MAKE_FUNCTION)                 // Python 1.3 - 2.7             A=#defaults\n                                        // Python 3.0 - 3.5             A=(#defaults)+(#kwdefaults<<8)+(#annotations<<16)\n                                        // Python 3.6 - 3.12            A=flags\nOPCODE_A(BUILD_SLICE)                   // Python 1.4 ->                A=count\nOPCODE_A(CALL_FUNCTION_VAR)             // Python 1.6 - 3.5             A=(#args)+(#kwargs<<8)\nOPCODE_A(CALL_FUNCTION_KW)              // Python 1.6 - 3.5             A=(#args)+(#kwargs<<8)\n                                        // Python 3.6 - 3.10            A=#args\nOPCODE_A(CALL_FUNCTION_VAR_KW)          // Python 1.6 - 3.5             A=(#args)+(#kwargs<<8)\nOPCODE_A(CALL_FUNCTION_EX)              // Python 3.6 ->                A=flags\nOPCODE_A(UNPACK_SEQUENCE)               // Python 2.0 ->                A=count\nOPCODE_A(FOR_ITER)                      // Python 2.0 ->                rel jmp +A\nOPCODE_A(DUP_TOPX)                      // Python 2.0 - 3.1             A=count\nOPCODE_A(BUILD_SET)                     // Python 2.7 ->                A=size\nOPCODE_A(JUMP_IF_FALSE_OR_POP)          // Python 2.7, 3.1 - 3.11       abs jmp A\nOPCODE_A(JUMP_IF_TRUE_OR_POP)           // Python 2.7, 3.1 - 3.11       abs jmp A\nOPCODE_A(POP_JUMP_IF_FALSE)             // Python 2.7, 3.1 - 3.10       abs jmp A\n                                        // Python 3.12 ->               rel jmp +A\nOPCODE_A(POP_JUMP_IF_TRUE)              // Python 2.7, 3.1 - 3.10       abs jmp A\n                                        // Python 3.12 ->               rel jmp +A\nOPCODE_A(CONTINUE_LOOP)                 // Python 2.1 - 3.7             abs jmp A\nOPCODE_A(MAKE_CLOSURE)                  // Python 2.1 - 2.7             A=#defaults\n                                        // Python 3.0 - 3.5             A=(#defaults)+(#kwdefaults<<8)+(#annotations<<16)\nOPCODE_A(LOAD_CLOSURE)                  // Python 2.1 ->                freevars[A]\nOPCODE_A(LOAD_DEREF)                    // Python 2.1 ->                freevars[A]\nOPCODE_A(STORE_DEREF)                   // Python 2.1 ->                freevars[A]\nOPCODE_A(DELETE_DEREF)                  // Python 3.2 ->                freevars[A]\nOPCODE_A(EXTENDED_ARG)                  // Python 2.0 ->                A=extended_arg\nOPCODE_A(SETUP_WITH)                    // Python 2.7, 3.2 - 3.10       rel jmp +A\nOPCODE_A(SET_ADD)                       // Python 2.7, 3.1 ->           stack[A]\nOPCODE_A(MAP_ADD)                       // Python 2.7, 3.1 ->           stack[A]\nOPCODE_A(UNPACK_EX)                     // Python 3.0 ->                A=(before)+(after<<8)\nOPCODE_A(LIST_APPEND)                   // Python 2.7, 3.1 ->           stack[A]\nOPCODE_A(LOAD_CLASSDEREF)               // Python 3.4 - 3.10            (cellvars+freevars)[A]\n                                        // Python 3.11                  localsplusnames[A]\nOPCODE_A(MATCH_CLASS)                   // Python 3.10 ->               A=#args\nOPCODE_A(BUILD_LIST_UNPACK)             // Python 3.5 - 3.8             A=count\nOPCODE_A(BUILD_MAP_UNPACK)              // Python 3.5 - 3.8             A=count\nOPCODE_A(BUILD_MAP_UNPACK_WITH_CALL)    // Python 3.5                   A=(count)+(fnloc<<8)\n                                        // Python 3.6 - 3.8             A=count\nOPCODE_A(BUILD_TUPLE_UNPACK)            // Python 3.5 - 3.8             A=count\nOPCODE_A(BUILD_SET_UNPACK)              // Python 3.5 - 3.8             A=count\nOPCODE_A(SETUP_ASYNC_WITH)              // Python 3.5 - 3.10            rel jmp +A\nOPCODE_A(FORMAT_VALUE)                  // Python 3.6 - 3.12            A=(conversion_type&0x3)+(flags)\nOPCODE_A(BUILD_CONST_KEY_MAP)           // Python 3.6 ->                A=count\nOPCODE_A(BUILD_STRING)                  // Python 3.6 ->                A=count\nOPCODE_A(BUILD_TUPLE_UNPACK_WITH_CALL)  // Python 3.6 - 3.8             A=count\nOPCODE_A(LOAD_METHOD)                   // Python 3.7 - 3.11            names[A]\nOPCODE_A(CALL_METHOD)                   // Python 3.7 - 3.10            A=#args\nOPCODE_A(CALL_FINALLY)                  // Python 3.8                   rel jmp +A\nOPCODE_A(POP_FINALLY)                   // Python 3.8                   A=flags\nOPCODE_A(IS_OP)                         // Python 3.9 ->                A=inverted\nOPCODE_A(CONTAINS_OP)                   // Python 3.9 ->                A=inverted\nOPCODE_A(RERAISE)                       // Python 3.10 ->               A=count\nOPCODE_A(JUMP_IF_NOT_EXC_MATCH)         // Python 3.9 - 3.10            abs jmp A\nOPCODE_A(LIST_EXTEND)                   // Python 3.9 ->                stack[A]\nOPCODE_A(SET_UPDATE)                    // Python 3.9 ->                stack[A]\nOPCODE_A(DICT_MERGE)                    // Python 3.9 ->                stack[A]\nOPCODE_A(DICT_UPDATE)                   // Python 3.9 ->                stack[A]\nOPCODE_A(SWAP)                          // Python 3.11 ->               stack[A]\nOPCODE_A(POP_JUMP_FORWARD_IF_FALSE)     // Python 3.11                  rel jmp +A\nOPCODE_A(POP_JUMP_FORWARD_IF_TRUE)      // Python 3.11                  rel jmp +A\nOPCODE_A(COPY)                          // Python 3.11 ->               stack[A]\nOPCODE_A(BINARY_OP)                     // Python 3.11 ->               bin_ops[A]\nOPCODE_A(SEND)                          // Python 3.11 ->               rel jmp +A\nOPCODE_A(POP_JUMP_FORWARD_IF_NOT_NONE)  // Python 3.11                  rel jmp +A\nOPCODE_A(POP_JUMP_FORWARD_IF_NONE)      // Python 3.11                  rel jmp +A\nOPCODE_A(GET_AWAITABLE)                 // Python 3.11 ->               A=awaitable_type\nOPCODE_A(JUMP_BACKWARD_NO_INTERRUPT)    // Python 3.11 ->               rel jmp -A\nOPCODE_A(MAKE_CELL)                     // Python 3.11 ->               locals[A]\nOPCODE_A(JUMP_BACKWARD)                 // Python 3.11 ->               rel jmp -A\nOPCODE_A(COPY_FREE_VARS)                // Python 3.11 ->               A=count\nOPCODE_A(RESUME)                        // Python 3.11 ->               ???\nOPCODE_A(PRECALL)                       // Python 3.11                  A=#args\nOPCODE_A(CALL)                          // Python 3.11 ->               A=#args\nOPCODE_A(KW_NAMES)                      // Python 3.11 - 3.12           consts[A]\nOPCODE_A(POP_JUMP_BACKWARD_IF_NOT_NONE) // Python 3.11                  jmp rel -A\nOPCODE_A(POP_JUMP_BACKWARD_IF_NONE)     // Python 3.11                  jmp rel -A\nOPCODE_A(POP_JUMP_BACKWARD_IF_FALSE)    // Python 3.11                  jmp rel -A\nOPCODE_A(POP_JUMP_BACKWARD_IF_TRUE)     // Python 3.11                  jmp rel -A\nOPCODE_A(RETURN_CONST)                  // Python 3.12 ->               consts[A]\nOPCODE_A(LOAD_FAST_CHECK)               // Python 3.12 ->               locals[A]\nOPCODE_A(POP_JUMP_IF_NOT_NONE)          // Python 3.12 ->               rel jmp +A\nOPCODE_A(POP_JUMP_IF_NONE)              // Python 3.12 ->               rel jmp +A\nOPCODE_A(LOAD_SUPER_ATTR)               // Python 3.12 ->               A=(flags&0x3)+names[A<<2]\nOPCODE_A(LOAD_FAST_AND_CLEAR)           // Python 3.12 ->               locals[A]\nOPCODE_A(YIELD_VALUE)                   // Python 3.12                  A=stack_depth (ignored)\n                                        // Python 3.13 ->               A=type\nOPCODE_A(CALL_INTRINSIC_1)              // Python 3.12 ->               intrinsics_1[A]\nOPCODE_A(CALL_INTRINSIC_2)              // Python 3.12 ->               intrinsics_2[A]\nOPCODE_A(LOAD_FROM_DICT_OR_GLOBALS)     // Python 3.12 ->               names[A]\nOPCODE_A(LOAD_FROM_DICT_OR_DEREF)       // Python 3.12 ->               localsplusnames[A]\nOPCODE_A(CALL_KW)                       // Python 3.13 ->               A=#args\nOPCODE_A(CONVERT_VALUE)                 // Python 3.13 ->               A=conversion_type\nOPCODE_A(ENTER_EXECUTOR)                // Python 3.13 ->               executors[A&0xff]\nOPCODE_A(LOAD_FAST_LOAD_FAST)           // Python 3.13 ->               A=locals[A<<4]+locals[A&0xf]\nOPCODE_A(SET_FUNCTION_ATTRIBUTE)        // Python 3.13 ->               A=attribute_type\nOPCODE_A(STORE_FAST_LOAD_FAST)          // Python 3.13 ->               A=locals[A<<4]+locals[A&0xf]\nOPCODE_A(STORE_FAST_STORE_FAST)         // Python 3.13 ->               A=locals[A<<4]+locals[A&0xf]\n\n/* Instrumented opcodes */\nOPCODE_A(INSTRUMENTED_LOAD_SUPER_ATTR)      // Python 3.12 ->           (see LOAD_SUPER_ATTR)\nOPCODE_A(INSTRUMENTED_POP_JUMP_IF_NONE)     // Python 3.12 ->           (see POP_JUMP_IF_NONE)\nOPCODE_A(INSTRUMENTED_POP_JUMP_IF_NOT_NONE) // Python 3.12 ->           (see POP_JUMP_IF_NOT_NONE)\nOPCODE_A(INSTRUMENTED_RESUME)               // Python 3.12 ->           (see RESUME)\nOPCODE_A(INSTRUMENTED_CALL)                 // Python 3.12 ->           (see CALL)\nOPCODE_A(INSTRUMENTED_RETURN_VALUE)         // Python 3.12 ->           (see RETURN_VALUE)\nOPCODE_A(INSTRUMENTED_YIELD_VALUE)          // Python 3.12 ->           (see YIELD_VALUE)\nOPCODE_A(INSTRUMENTED_CALL_FUNCTION_EX)     // Python 3.12 ->           (see CALL_FUNCTION_EX)\nOPCODE_A(INSTRUMENTED_JUMP_FORWARD)         // Python 3.12 ->           (see JUMP_FORWARD)\nOPCODE_A(INSTRUMENTED_JUMP_BACKWARD)        // Python 3.12 ->           (see JUMP_BACKWARD)\nOPCODE_A(INSTRUMENTED_RETURN_CONST)         // Python 3.12 ->           (see RETURN_CONST)\nOPCODE_A(INSTRUMENTED_FOR_ITER)             // Python 3.12 ->           (see FOR_ITER)\nOPCODE_A(INSTRUMENTED_POP_JUMP_IF_FALSE)    // Python 3.12 ->           (see POP_JUMP_IF_FALSE)\nOPCODE_A(INSTRUMENTED_POP_JUMP_IF_TRUE)     // Python 3.12 ->           (see POP_JUMP_IF_TRUE)\nOPCODE_A(INSTRUMENTED_END_FOR)              // Python 3.12 ->           (see END_FOR)\nOPCODE_A(INSTRUMENTED_END_SEND)             // Python 3.12 ->           (see END_SEND)\nOPCODE_A(INSTRUMENTED_INSTRUCTION)          // Python 3.12 ->           A=(unused)\nOPCODE_A(INSTRUMENTED_LINE)                 // Python 3.12 ->           ???\nOPCODE_A(INSTRUMENTED_CALL_KW)              // Python 3.13 ->           (see CALL_KW)\n"
        },
        {
          "name": "bytes",
          "type": "tree",
          "content": null
        },
        {
          "name": "data.cpp",
          "type": "blob",
          "size": 2.419921875,
          "content": "#include \"data.h\"\n#include <cstring>\n#include <cstdarg>\n#include <vector>\n\n/* PycData */\nint PycData::get16()\n{\n    /* Ensure endianness */\n    int result = getByte() & 0xFF;\n    result |= (getByte() & 0xFF) << 8;\n    return result;\n}\n\nint PycData::get32()\n{\n    /* Ensure endianness */\n    int result = getByte() & 0xFF;\n    result |= (getByte() & 0xFF) <<  8;\n    result |= (getByte() & 0xFF) << 16;\n    result |= (getByte() & 0xFF) << 24;\n    return result;\n}\n\nPyc_INT64 PycData::get64()\n{\n    /* Ensure endianness */\n    Pyc_INT64 result = (Pyc_INT64)(getByte() & 0xFF);\n    result |= (Pyc_INT64)(getByte() & 0xFF) <<  8;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 16;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 24;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 32;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 40;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 48;\n    result |= (Pyc_INT64)(getByte() & 0xFF) << 56;\n    return result;\n}\n\n\n/* PycFile */\nPycFile::PycFile(const char* filename)\n{\n    m_stream = fopen(filename, \"rb\");\n}\n\nbool PycFile::atEof() const\n{\n    int ch = fgetc(m_stream);\n    ungetc(ch, m_stream);\n    return (ch == EOF);\n}\n\nint PycFile::getByte()\n{\n    int ch = fgetc(m_stream);\n    if (ch == EOF)\n        ungetc(ch, m_stream);\n    return ch;\n}\n\nint PycFile::getBuffer(int bytes, void* buffer)\n{\n    return (int)fread(buffer, 1, bytes, m_stream);\n}\n\n\n/* PycBuffer */\nint PycBuffer::getByte()\n{\n    if (atEof())\n        return EOF;\n    int ch = (int)(*(m_buffer + m_pos));\n    ++m_pos;\n    return ch & 0xFF;   // Make sure it's just a byte!\n}\n\nint PycBuffer::getBuffer(int bytes, void* buffer)\n{\n    if (m_pos + bytes > m_size)\n        bytes = m_size - m_pos;\n    if (bytes != 0)\n        memcpy(buffer, (m_buffer + m_pos), bytes);\n    m_pos += bytes;\n    return bytes;\n}\n\nint formatted_print(std::ostream& stream, const char* format, ...)\n{\n    va_list args;\n    va_start(args, format);\n    int result = formatted_printv(stream, format, args);\n    va_end(args);\n    return result;\n}\n\nint formatted_printv(std::ostream& stream, const char* format, va_list args)\n{\n    va_list saved_args;\n    va_copy(saved_args, args);\n    int len = std::vsnprintf(nullptr, 0, format, args);\n    if (len < 0)\n        return len;\n    std::vector<char> vec(static_cast<size_t>(len) + 1);\n    int written = std::vsnprintf(&vec[0], vec.size(), format, saved_args);\n    va_end(saved_args);\n\n    if (written >= 0)\n        stream << &vec[0];\n    return written;\n}\n"
        },
        {
          "name": "data.h",
          "type": "blob",
          "size": 1.3759765625,
          "content": "#ifndef _PYC_FILE_H\n#define _PYC_FILE_H\n\n#include <cstdio>\n#include <ostream>\n\n#ifdef WIN32\ntypedef __int64 Pyc_INT64;\n#else\ntypedef long long Pyc_INT64;\n#endif\n\nclass PycData {\npublic:\n    PycData() { }\n    virtual ~PycData() { }\n\n    virtual bool isOpen() const = 0;\n    virtual bool atEof() const = 0;\n\n    virtual int getByte() = 0;\n    virtual int getBuffer(int bytes, void* buffer) = 0;\n    int get16();\n    int get32();\n    Pyc_INT64 get64();\n};\n\nclass PycFile : public PycData {\npublic:\n    PycFile(const char* filename);\n    ~PycFile() { if (m_stream) fclose(m_stream); }\n\n    bool isOpen() const override { return (m_stream != 0); }\n    bool atEof() const override;\n\n    int getByte() override;\n    int getBuffer(int bytes, void* buffer) override;\n\nprivate:\n    FILE* m_stream;\n};\n\nclass PycBuffer : public PycData {\npublic:\n    PycBuffer(const void* buffer, int size)\n        : m_buffer((const unsigned char*)buffer), m_size(size), m_pos(0) { }\n    ~PycBuffer() { }\n\n    bool isOpen() const override { return (m_buffer != 0); }\n    bool atEof() const override { return (m_pos == m_size); }\n\n    int getByte() override;\n    int getBuffer(int bytes, void* buffer) override;\n\nprivate:\n    const unsigned char* m_buffer;\n    int m_size, m_pos;\n};\n\nint formatted_print(std::ostream& stream, const char* format, ...);\nint formatted_printv(std::ostream& stream, const char* format, va_list args);\n\n#endif\n"
        },
        {
          "name": "pyc_code.cpp",
          "type": "blob",
          "size": 4.8681640625,
          "content": "#include \"pyc_code.h\"\n#include \"pyc_module.h\"\n#include \"data.h\"\n\n/* == Marshal structure for Code object ==\n                1.0     1.3     1.5     2.1     2.3     3.0     3.8     3.11\nargcount                short   short   short   long    long    long    long\nposonlyargc                                                     long    long\nkwonlyargc                                              long    long    long\nnlocals                 short   short   short   long    long    long\nstacksize                       short   short   long    long    long    long\nflags                   short   short   short   long    long    long    long\ncode            Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj\nconsts          Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj\nnames           Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj\nvarnames                Obj     Obj     Obj     Obj     Obj     Obj\nfreevars                                Obj     Obj     Obj     Obj\ncellvars                                Obj     Obj     Obj     Obj\nlocals+names                                                            Obj\nlocals+kinds                                                            Obj\nfilename        Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj\nname            Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj\nqualname                                                                Obj\nfirstline                       short   short   long    long    long    long\nlntable                         Obj     Obj     Obj     Obj     Obj     Obj\nexceptiontable                                                          Obj\n*/\n\nvoid PycCode::load(PycData* stream, PycModule* mod)\n{\n    if (mod->verCompare(1, 3) >= 0 && mod->verCompare(2, 3) < 0)\n        m_argCount = stream->get16();\n    else if (mod->verCompare(2, 3) >= 0)\n        m_argCount = stream->get32();\n\n    if (mod->verCompare(3, 8) >= 0)\n        m_posOnlyArgCount = stream->get32();\n    else\n        m_posOnlyArgCount = 0;\n\n    if (mod->majorVer() >= 3)\n        m_kwOnlyArgCount = stream->get32();\n    else\n        m_kwOnlyArgCount = 0;\n\n    if (mod->verCompare(1, 3) >= 0 && mod->verCompare(2, 3) < 0)\n        m_numLocals = stream->get16();\n    else if (mod->verCompare(2, 3) >= 0 && mod->verCompare(3, 11) < 0)\n        m_numLocals = stream->get32();\n    else\n        m_numLocals = 0;\n\n    if (mod->verCompare(1, 5) >= 0 && mod->verCompare(2, 3) < 0)\n        m_stackSize = stream->get16();\n    else if (mod->verCompare(2, 3) >= 0)\n        m_stackSize = stream->get32();\n    else\n        m_stackSize = 0;\n\n    if (mod->verCompare(1, 3) >= 0 && mod->verCompare(2, 3) < 0)\n        m_flags = stream->get16();\n    else if (mod->verCompare(2, 3) >= 0)\n        m_flags = stream->get32();\n    else\n        m_flags = 0;\n\n    if (mod->verCompare(3, 8) < 0) {\n        // Remap flags to new values introduced in 3.8\n        if (m_flags & 0xF0000000)\n            throw std::runtime_error(\"Cannot remap unexpected flags\");\n        m_flags = (m_flags & 0xFFFF) | ((m_flags & 0xFFF0000) << 4);\n    }\n\n    m_code = LoadObject(stream, mod).cast<PycString>();\n    m_consts = LoadObject(stream, mod).cast<PycSequence>();\n    m_names = LoadObject(stream, mod).cast<PycSequence>();\n\n    if (mod->verCompare(1, 3) >= 0)\n        m_localNames = LoadObject(stream, mod).cast<PycSequence>();\n    else\n        m_localNames = new PycTuple;\n\n    if (mod->verCompare(3, 11) >= 0)\n        m_localKinds = LoadObject(stream, mod).cast<PycString>();\n    else\n        m_localKinds = new PycString;\n\n    if (mod->verCompare(2, 1) >= 0 && mod->verCompare(3, 11) < 0)\n        m_freeVars = LoadObject(stream, mod).cast<PycSequence>();\n    else\n        m_freeVars = new PycTuple;\n\n    if (mod->verCompare(2, 1) >= 0 && mod->verCompare(3, 11) < 0)\n        m_cellVars = LoadObject(stream, mod).cast<PycSequence>();\n    else\n        m_cellVars = new PycTuple;\n\n    m_fileName = LoadObject(stream, mod).cast<PycString>();\n    m_name = LoadObject(stream, mod).cast<PycString>();\n\n    if (mod->verCompare(3, 11) >= 0)\n        m_qualName = LoadObject(stream, mod).cast<PycString>();\n    else\n        m_qualName = new PycString;\n\n    if (mod->verCompare(1, 5) >= 0 && mod->verCompare(2, 3) < 0)\n        m_firstLine = stream->get16();\n    else if (mod->verCompare(2, 3) >= 0)\n        m_firstLine = stream->get32();\n\n    if (mod->verCompare(1, 5) >= 0)\n        m_lnTable = LoadObject(stream, mod).cast<PycString>();\n    else\n        m_lnTable = new PycString;\n\n    if (mod->verCompare(3, 11) >= 0)\n        m_exceptTable = LoadObject(stream, mod).cast<PycString>();\n    else\n        m_exceptTable = new PycString;\n}\n\nPycRef<PycString> PycCode::getCellVar(PycModule* mod, int idx) const\n{\n    if (mod->verCompare(3, 11) >= 0)\n        return getLocal(idx);\n\n    return (idx >= m_cellVars->size())\n        ? m_freeVars->get(idx - m_cellVars->size()).cast<PycString>()\n        : m_cellVars->get(idx).cast<PycString>();\n}\n"
        },
        {
          "name": "pyc_code.h",
          "type": "blob",
          "size": 4.3134765625,
          "content": "#ifndef _PYC_CODE_H\n#define _PYC_CODE_H\n\n#include \"pyc_sequence.h\"\n#include \"pyc_string.h\"\n#include <vector>\n\nclass PycData;\nclass PycModule;\n\nclass PycCode : public PycObject {\npublic:\n    typedef std::vector<PycRef<PycString>> globals_t;\n    enum CodeFlags {\n        CO_OPTIMIZED = 0x1,                                 // 1.3 ->\n        CO_NEWLOCALS = 0x2,                                 // 1.3 ->\n        CO_VARARGS = 0x4,                                   // 1.3 ->\n        CO_VARKEYWORDS = 0x8,                               // 1.3 ->\n        CO_NESTED = 0x10,                                   // 2.1 ->\n        CO_GENERATOR = 0x20,                                // 2.2 ->\n        CO_NOFREE = 0x40,                                   // 2.3 ->\n        CO_COROUTINE = 0x80,                                // 3.5 ->\n        CO_ITERABLE_COROUTINE = 0x100,                      // 3.5 ->\n        CO_ASYNC_GENERATOR = 0x200,                         // 3.6 ->\n        CO_GENERATOR_ALLOWED = 0x1000,                      // 2.3 only\n\n        // The FUTURE flags are shifted left 4 bits starting from Python 3.8\n        // Older versions are automatically mapped to the new values in load()\n        CO_FUTURE_DIVISION = 0x20000,                       // 2.3 - 2.7, 3.1 ->\n        CO_FUTURE_ABSOLUTE_IMPORT = 0x40000,                // 2.5 - 2.7, 3.1 ->\n        CO_FUTURE_WITH_STATEMENT = 0x80000,                 // 2.5 - 2.7, 3.1 ->\n        CO_FUTURE_PRINT_FUNCTION = 0x100000,                // 2.6 - 2.7, 3.1 ->\n        CO_FUTURE_UNICODE_LITERALS = 0x200000,              // 2.6 - 2.7, 3.1 ->\n        CO_FUTURE_BARRY_AS_BDFL = 0x400000,                 // 3.1 ->\n        CO_FUTURE_GENERATOR_STOP = 0x800000,                // 3.5 ->\n        CO_FUTURE_ANNOTATIONS = 0x1000000,                  // 3.7 ->\n        CO_NO_MONITORING_EVENTS = 0x2000000,                // 3.13 ->\n    };\n\n    PycCode(int type = TYPE_CODE)\n        : PycObject(type), m_argCount(), m_posOnlyArgCount(), m_kwOnlyArgCount(),\n          m_numLocals(), m_stackSize(), m_flags(), m_firstLine() { }\n\n    void load(PycData* stream, PycModule* mod) override;\n\n    int argCount() const { return m_argCount; }\n    int posOnlyArgCount() const { return m_posOnlyArgCount; }\n    int kwOnlyArgCount() const { return m_kwOnlyArgCount; }\n    int numLocals() const { return m_numLocals; }\n    int stackSize() const { return m_stackSize; }\n    int flags() const { return m_flags; }\n    PycRef<PycString> code() const { return m_code; }\n    PycRef<PycSequence> consts() const { return m_consts; }\n    PycRef<PycSequence> names() const { return m_names; }\n    PycRef<PycSequence> localNames() const { return m_localNames; }\n    PycRef<PycString> localKinds() const { return m_localKinds; }\n    PycRef<PycSequence> freeVars() const { return m_freeVars; }\n    PycRef<PycSequence> cellVars() const { return m_cellVars; }\n    PycRef<PycString> fileName() const { return m_fileName; }\n    PycRef<PycString> name() const { return m_name; }\n    PycRef<PycString> qualName() const { return m_qualName; }\n    int firstLine() const { return m_firstLine; }\n    PycRef<PycString> lnTable() const { return m_lnTable; }\n    PycRef<PycString> exceptTable() const { return m_exceptTable; }\n\n    PycRef<PycObject> getConst(int idx) const\n    {\n        return m_consts->get(idx);\n    }\n\n    PycRef<PycString> getName(int idx) const\n    {\n        return m_names->get(idx).cast<PycString>();\n    }\n\n    PycRef<PycString> getLocal(int idx) const\n    {\n        return m_localNames->get(idx).cast<PycString>();\n    }\n\n    PycRef<PycString> getCellVar(PycModule* mod, int idx) const;\n\n    const globals_t& getGlobals() const { return m_globalsUsed; }\n\n    void markGlobal(PycRef<PycString> varname)\n    {\n        m_globalsUsed.emplace_back(std::move(varname));\n    }\n\nprivate:\n    int m_argCount, m_posOnlyArgCount, m_kwOnlyArgCount, m_numLocals;\n    int m_stackSize, m_flags;\n    PycRef<PycString> m_code;\n    PycRef<PycSequence> m_consts;\n    PycRef<PycSequence> m_names;\n    PycRef<PycSequence> m_localNames;\n    PycRef<PycString> m_localKinds;\n    PycRef<PycSequence> m_freeVars;\n    PycRef<PycSequence> m_cellVars;\n    PycRef<PycString> m_fileName;\n    PycRef<PycString> m_name;\n    PycRef<PycString> m_qualName;\n    int m_firstLine;\n    PycRef<PycString> m_lnTable;\n    PycRef<PycString> m_exceptTable;\n    globals_t m_globalsUsed; /* Global vars used in this code */\n};\n\n#endif\n"
        },
        {
          "name": "pyc_module.cpp",
          "type": "blob",
          "size": 5.384765625,
          "content": "#include \"pyc_module.h\"\n#include \"data.h\"\n#include <stdexcept>\n\nvoid PycModule::setVersion(unsigned int magic)\n{\n    // Default for versions that don't support unicode selection\n    m_unicode = false;\n\n    switch (magic) {\n    case MAGIC_1_0:\n        m_maj = 1;\n        m_min = 0;\n        break;\n    case MAGIC_1_1:\n        m_maj = 1;\n        m_min = 1;\n        break;\n    case MAGIC_1_3:\n        m_maj = 1;\n        m_min = 3;\n        break;\n    case MAGIC_1_4:\n        m_maj = 1;\n        m_min = 4;\n        break;\n    case MAGIC_1_5:\n        m_maj = 1;\n        m_min = 5;\n        break;\n\n    /* Starting with 1.6, Python adds +1 for unicode mode (-U) */\n    case MAGIC_1_6+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_1_6:\n        m_maj = 1;\n        m_min = 6;\n        break;\n    case MAGIC_2_0+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_0:\n        m_maj = 2;\n        m_min = 0;\n        break;\n    case MAGIC_2_1+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_1:\n        m_maj = 2;\n        m_min = 1;\n        break;\n    case MAGIC_2_2+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_2:\n        m_maj = 2;\n        m_min = 2;\n        break;\n    case MAGIC_2_3+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_3:\n        m_maj = 2;\n        m_min = 3;\n        break;\n    case MAGIC_2_4+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_4:\n        m_maj = 2;\n        m_min = 4;\n        break;\n    case MAGIC_2_5+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_5:\n        m_maj = 2;\n        m_min = 5;\n        break;\n    case MAGIC_2_6+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_6:\n        m_maj = 2;\n        m_min = 6;\n        break;\n    case MAGIC_2_7+1:\n        m_unicode = true;\n        /* Fall through */\n    case MAGIC_2_7:\n        m_maj = 2;\n        m_min = 7;\n        break;\n\n    /* 3.0 and above are always unicode */\n    case MAGIC_3_0+1:\n        m_maj = 3;\n        m_min = 0;\n        m_unicode = true;\n        break;\n    case MAGIC_3_1+1:\n        m_maj = 3;\n        m_min = 1;\n        m_unicode = true;\n        break;\n\n    /* 3.2 stops using the unicode increment */\n    case MAGIC_3_2:\n        m_maj = 3;\n        m_min = 2;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_3:\n        m_maj = 3;\n        m_min = 3;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_4:\n        m_maj = 3;\n        m_min = 4;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_5:\n        /* fall through */\n\n    case MAGIC_3_5_3:\n        m_maj = 3;\n        m_min = 5;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_6:\n        m_maj = 3;\n        m_min = 6;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_7:\n        m_maj = 3;\n        m_min = 7;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_8:\n        m_maj = 3;\n        m_min = 8;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_9:\n        m_maj = 3;\n        m_min = 9;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_10:\n        m_maj = 3;\n        m_min = 10;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_11:\n        m_maj = 3;\n        m_min = 11;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_12:\n        m_maj = 3;\n        m_min = 12;\n        m_unicode = true;\n        break;\n\n    case MAGIC_3_13:\n        m_maj = 3;\n        m_min = 13;\n        m_unicode = true;\n        break;\n\n    /* Bad Magic detected */\n    default:\n        m_maj = -1;\n        m_min = -1;\n    }\n}\n\nbool PycModule::isSupportedVersion(int major, int minor)\n{\n    switch (major) {\n    case 1:\n        return (minor >= 0 && minor <= 6);\n    case 2:\n        return (minor >= 0 && minor <= 7);\n    case 3:\n        return (minor >= 0 && minor <= 12);\n    default:\n        return false;\n    }\n}\n\nvoid PycModule::loadFromFile(const char* filename)\n{\n    PycFile in(filename);\n    if (!in.isOpen()) {\n        fprintf(stderr, \"Error opening file %s\\n\", filename);\n        return;\n    }\n    setVersion(in.get32());\n    if (!isValid()) {\n        fputs(\"Bad MAGIC!\\n\", stderr);\n        return;\n    }\n\n    int flags = 0;\n    if (verCompare(3, 7) >= 0)\n        flags = in.get32();\n\n    if (flags & 0x1) {\n        // Optional checksum added in Python 3.7\n        in.get32();\n        in.get32();\n    } else {\n        in.get32(); // Timestamp -- who cares?\n\n        if (verCompare(3, 3) >= 0)\n            in.get32(); // Size parameter added in Python 3.3\n    }\n\n    m_code = LoadObject(&in, this).cast<PycCode>();\n}\n\nvoid PycModule::loadFromMarshalledFile(const char* filename, int major, int minor)\n{\n    PycFile in (filename);\n    if (!in.isOpen()) {\n        fprintf(stderr, \"Error opening file %s\\n\", filename);\n        return;\n    }\n    if (!isSupportedVersion(major, minor)) {\n        fprintf(stderr, \"Unsupported version %d.%d\\n\", major, minor);\n        return;\n    }\n    m_maj = major;\n    m_min = minor;\n    m_unicode = (major >= 3);\n    m_code = LoadObject(&in, this).cast<PycCode>();\n}\n\nPycRef<PycString> PycModule::getIntern(int ref) const\n{\n    if (ref < 0 || (size_t)ref >= m_interns.size())\n        throw std::out_of_range(\"Intern index out of range\");\n    return m_interns[(size_t)ref];\n}\n\nPycRef<PycObject> PycModule::getRef(int ref) const\n{\n    if (ref < 0 || (size_t)ref >= m_refs.size())\n        throw std::out_of_range(\"Ref index out of range\");\n    return m_refs[(size_t)ref];\n}\n"
        },
        {
          "name": "pyc_module.h",
          "type": "blob",
          "size": 2.341796875,
          "content": "#ifndef _PYC_MODULE_H\n#define _PYC_MODULE_H\n\n#include \"pyc_code.h\"\n#include <vector>\n\nenum PycMagic {\n    MAGIC_1_0 = 0x00999902,\n    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */\n    MAGIC_1_3 = 0x0A0D2E89,\n    MAGIC_1_4 = 0x0A0D1704,\n    MAGIC_1_5 = 0x0A0D4E99,\n    MAGIC_1_6 = 0x0A0DC4FC,\n\n    MAGIC_2_0 = 0x0A0DC687,\n    MAGIC_2_1 = 0x0A0DEB2A,\n    MAGIC_2_2 = 0x0A0DED2D,\n    MAGIC_2_3 = 0x0A0DF23B,\n    MAGIC_2_4 = 0x0A0DF26D,\n    MAGIC_2_5 = 0x0A0DF2B3,\n    MAGIC_2_6 = 0x0A0DF2D1,\n    MAGIC_2_7 = 0x0A0DF303,\n\n    MAGIC_3_0 = 0x0A0D0C3A,\n    MAGIC_3_1 = 0x0A0D0C4E,\n    MAGIC_3_2 = 0x0A0D0C6C,\n    MAGIC_3_3 = 0x0A0D0C9E,\n    MAGIC_3_4 = 0x0A0D0CEE,\n    MAGIC_3_5 = 0x0A0D0D16,\n    MAGIC_3_5_3 = 0x0A0D0D17,\n    MAGIC_3_6 = 0x0A0D0D33,\n    MAGIC_3_7 = 0x0A0D0D42,\n    MAGIC_3_8 = 0x0A0D0D55,\n    MAGIC_3_9 = 0x0A0D0D61,\n    MAGIC_3_10 = 0x0A0D0D6F,\n    MAGIC_3_11 = 0x0A0D0DA7,\n    MAGIC_3_12 = 0x0A0D0DCB,\n    MAGIC_3_13 = 0x0A0D0DF3,\n\n    INVALID = 0,\n};\n\nclass PycModule {\npublic:\n    PycModule() : m_maj(-1), m_min(-1), m_unicode(false) { }\n\n    void loadFromFile(const char* filename);\n    void loadFromMarshalledFile(const char *filename, int major, int minor);\n    bool isValid() const { return (m_maj >= 0) && (m_min >= 0); }\n\n    int majorVer() const { return m_maj; }\n    int minorVer() const { return m_min; }\n\n    int verCompare(int maj, int min) const\n    {\n        if (m_maj == maj)\n            return m_min - min;\n        return m_maj - maj;\n    }\n\n    bool isUnicode() const { return m_unicode; }\n\n    bool strIsUnicode() const\n    {\n        return (m_maj >= 3) || (m_code->flags() & PycCode::CO_FUTURE_UNICODE_LITERALS) != 0;\n    }\n\n    bool internIsBytes() const\n    {\n        return (m_maj < 3) && (m_code->flags() & PycCode::CO_FUTURE_UNICODE_LITERALS) != 0;\n    }\n\n    PycRef<PycCode> code() const { return m_code; }\n\n    void intern(PycRef<PycString> str) { m_interns.emplace_back(std::move(str)); }\n    PycRef<PycString> getIntern(int ref) const;\n\n    void refObject(PycRef<PycObject> obj) { m_refs.emplace_back(std::move(obj)); }\n    PycRef<PycObject> getRef(int ref) const;\n\n    static bool isSupportedVersion(int major, int minor);\n\nprivate:\n    void setVersion(unsigned int magic);\n\nprivate:\n    int m_maj, m_min;\n    bool m_unicode;\n\n    PycRef<PycCode> m_code;\n    std::vector<PycRef<PycString>> m_interns;\n    std::vector<PycRef<PycObject>> m_refs;\n};\n\n#endif\n"
        },
        {
          "name": "pyc_numeric.cpp",
          "type": "blob",
          "size": 3.720703125,
          "content": "#include \"pyc_numeric.h\"\n#include \"pyc_module.h\"\n#include \"data.h\"\n#include <cstring>\n\n#ifdef _MSC_VER\n#define snprintf sprintf_s\n#endif\n\n/* PycInt */\nvoid PycInt::load(PycData* stream, PycModule*)\n{\n    m_value = stream->get32();\n}\n\n\n/* PycLong */\nvoid PycLong::load(PycData* stream, PycModule*)\n{\n    if (type() == TYPE_INT64) {\n        m_value.reserve(4);\n        int lo = stream->get32();\n        int hi = stream->get32();\n        m_value.push_back((lo      ) & 0xFFFF);\n        m_value.push_back((lo >> 16) & 0xFFFF);\n        m_value.push_back((hi      ) & 0xFFFF);\n        m_value.push_back((hi >> 16) & 0xFFFF);\n        m_size = (hi & 0x80000000) != 0 ? -4 : 4;\n    } else {\n        m_size = stream->get32();\n        int actualSize = m_size >= 0 ? m_size : -m_size;\n        m_value.reserve(actualSize);\n        for (int i=0; i<actualSize; i++)\n            m_value.push_back(stream->get16());\n    }\n}\n\nbool PycLong::isEqual(PycRef<PycObject> obj) const\n{\n    if (type() != obj.type())\n        return false;\n\n    PycRef<PycLong> longObj = obj.cast<PycLong>();\n    if (m_size != longObj->m_size)\n        return false;\n    auto it1 = m_value.cbegin();\n    auto it2 = longObj->m_value.cbegin();\n    while (it1 != m_value.cend()) {\n        if (*it1 != *it2)\n            return false;\n        ++it1, ++it2;\n    }\n    return true;\n}\n\nstd::string PycLong::repr(PycModule* mod) const\n{\n    // Longs are printed as hex, since it's easier (and faster) to convert\n    // arbitrary-length integers to a power of two than an arbitrary base\n\n    if (m_size == 0)\n        return (mod->verCompare(3, 0) >= 0) ? \"0x0\" : \"0x0L\";\n\n    // Realign to 32 bits, since Python uses only 15\n    std::vector<unsigned> bits;\n    bits.reserve((m_value.size() + 1) / 2);\n    int shift = 0, temp = 0;\n    for (auto bit : m_value) {\n        temp |= unsigned(bit & 0xFFFF) << shift;\n        shift += 15;\n        if (shift >= 32) {\n            bits.push_back(temp);\n            shift -= 32;\n            temp = unsigned(bit & 0xFFFF) >> (15 - shift);\n        }\n    }\n    if (temp)\n        bits.push_back(temp);\n\n    std::string accum;\n    accum.resize(3 + (bits.size() * 8) + 2);\n    char* aptr = &accum[0];\n\n    if (m_size < 0)\n        *aptr++ = '-';\n    *aptr++ = '0';\n    *aptr++ = 'x';\n\n    auto iter = bits.crbegin();\n    aptr += snprintf(aptr, 9, \"%X\", *iter++);\n    while (iter != bits.rend())\n        aptr += snprintf(aptr, 9, \"%08X\", *iter++);\n    if (mod->verCompare(3, 0) < 0)\n        *aptr++ = 'L';\n    *aptr = 0;\n    return accum;\n}\n\n\n/* PycFloat */\nvoid PycFloat::load(PycData* stream, PycModule*)\n{\n    int len = stream->getByte();\n    if (len < 0)\n        throw std::bad_alloc();\n\n    m_value.resize(len);\n    if (len > 0)\n        stream->getBuffer(len, &m_value.front());\n}\n\nbool PycFloat::isEqual(PycRef<PycObject> obj) const\n{\n    if (type() != obj.type())\n        return false;\n\n    PycRef<PycFloat> floatObj = obj.cast<PycFloat>();\n    return m_value == floatObj->m_value;\n}\n\n\n/* PycComplex */\nvoid PycComplex::load(PycData* stream, PycModule* mod)\n{\n    PycFloat::load(stream, mod);\n\n    int len = stream->getByte();\n    if (len < 0)\n        throw std::bad_alloc();\n\n    m_imag.resize(len);\n    if (len > 0)\n        stream->getBuffer(len, &m_imag.front());\n}\n\nbool PycComplex::isEqual(PycRef<PycObject> obj) const\n{\n    if (!PycFloat::isEqual(obj))\n        return false;\n\n    PycRef<PycComplex> floatObj = obj.cast<PycComplex>();\n    return m_imag == floatObj->m_imag;\n}\n\n\n/* PycCFloat */\nvoid PycCFloat::load(PycData* stream, PycModule*)\n{\n    Pyc_INT64 bits = stream->get64();\n    memcpy(&m_value, &bits, sizeof(bits));\n}\n\n\n/* PycCComplex */\nvoid PycCComplex::load(PycData* stream, PycModule* mod)\n{\n    PycCFloat::load(stream, mod);\n    Pyc_INT64 bits = stream->get64();\n    memcpy(&m_imag, &bits, sizeof(bits));\n}\n"
        },
        {
          "name": "pyc_numeric.h",
          "type": "blob",
          "size": 2.58203125,
          "content": "#ifndef _PYC_NUMERIC_H\n#define _PYC_NUMERIC_H\n\n#include \"pyc_object.h\"\n#include \"data.h\"\n#include <vector>\n#include <string>\n\nclass PycInt : public PycObject {\npublic:\n    PycInt(int value = 0, int type = TYPE_INT)\n        : PycObject(type), m_value(value) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override\n    {\n        return (type() == obj.type()) &&\n               (m_value == obj.cast<PycInt>()->m_value);\n    }\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    int value() const { return m_value; }\n\nprivate:\n    int m_value;\n};\n\nclass PycLong : public PycObject {\npublic:\n    PycLong(int type = TYPE_LONG)\n        : PycObject(type), m_size(0) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    int size() const { return m_size; }\n    const std::vector<int>& value() const { return m_value; }\n\n    std::string repr(PycModule* mod) const;\n\nprivate:\n    int m_size;\n    std::vector<int> m_value;\n};\n\nclass PycFloat : public PycObject {\npublic:\n    PycFloat(int type = TYPE_FLOAT)\n        : PycObject(type) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    const char* value() const { return m_value.c_str(); }\n\nprivate:\n    std::string m_value;  // Floats are stored as strings\n};\n\nclass PycComplex : public PycFloat {\npublic:\n    PycComplex(int type = TYPE_COMPLEX)\n        : PycFloat(type) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    const char* imag() const { return m_imag.c_str(); }\n\nprivate:\n    std::string m_imag;\n};\n\nclass PycCFloat : public PycObject {\npublic:\n    PycCFloat(int type = TYPE_BINARY_FLOAT)\n        : PycObject(type), m_value(0.0) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override\n    {\n        return (type() == obj.type()) &&\n               (m_value == obj.cast<PycCFloat>()->m_value);\n    }\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    double value() const { return m_value; }\n\nprivate:\n    double m_value;\n};\n\nclass PycCComplex : public PycCFloat {\npublic:\n    PycCComplex(int type = TYPE_BINARY_COMPLEX)\n        : PycCFloat(type), m_imag(0.0) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override\n    {\n        return (PycCFloat::isEqual(obj)) &&\n               (m_imag == obj.cast<PycCComplex>()->m_imag);\n    }\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    double imag() const { return m_imag; }\n\nprivate:\n    double m_imag;\n};\n\n#endif\n"
        },
        {
          "name": "pyc_object.cpp",
          "type": "blob",
          "size": 2.6640625,
          "content": "#include \"pyc_object.h\"\n#include \"pyc_module.h\"\n#include \"pyc_numeric.h\"\n#include \"pyc_code.h\"\n#include \"data.h\"\n#include <cstdio>\n\nPycRef<PycObject> Pyc_None = new PycObject(PycObject::TYPE_NONE);\nPycRef<PycObject> Pyc_Ellipsis = new PycObject(PycObject::TYPE_ELLIPSIS);\nPycRef<PycObject> Pyc_StopIteration = new PycObject(PycObject::TYPE_STOPITER);\nPycRef<PycObject> Pyc_False = new PycObject(PycObject::TYPE_FALSE);\nPycRef<PycObject> Pyc_True = new PycObject(PycObject::TYPE_TRUE);\n\nPycRef<PycObject> CreateObject(int type)\n{\n    switch (type) {\n    case PycObject::TYPE_NULL:\n        return NULL;\n    case PycObject::TYPE_NONE:\n        return Pyc_None;\n    case PycObject::TYPE_FALSE:\n        return Pyc_False;\n    case PycObject::TYPE_TRUE:\n        return Pyc_True;\n    case PycObject::TYPE_STOPITER:\n        return Pyc_StopIteration;\n    case PycObject::TYPE_ELLIPSIS:\n        return Pyc_Ellipsis;\n    case PycObject::TYPE_INT:\n        return new PycInt(type);\n    case PycObject::TYPE_INT64:\n        return new PycLong(type);\n    case PycObject::TYPE_FLOAT:\n        return new PycFloat(type);\n    case PycObject::TYPE_BINARY_FLOAT:\n        return new PycCFloat(type);\n    case PycObject::TYPE_COMPLEX:\n        return new PycComplex(type);\n    case PycObject::TYPE_BINARY_COMPLEX:\n        return new PycCComplex(type);\n    case PycObject::TYPE_LONG:\n        return new PycLong(type);\n    case PycObject::TYPE_STRING:\n    case PycObject::TYPE_INTERNED:\n    case PycObject::TYPE_STRINGREF:\n    case PycObject::TYPE_UNICODE:\n    case PycObject::TYPE_ASCII:\n    case PycObject::TYPE_ASCII_INTERNED:\n    case PycObject::TYPE_SHORT_ASCII:\n    case PycObject::TYPE_SHORT_ASCII_INTERNED:\n        return new PycString(type);\n    case PycObject::TYPE_TUPLE:\n    case PycObject::TYPE_SMALL_TUPLE:\n        return new PycTuple(type);\n    case PycObject::TYPE_LIST:\n        return new PycList(type);\n    case PycObject::TYPE_DICT:\n        return new PycDict(type);\n    case PycObject::TYPE_CODE:\n    case PycObject::TYPE_CODE2:\n        return new PycCode(type);\n    case PycObject::TYPE_SET:\n    case PycObject::TYPE_FROZENSET:\n        return new PycSet(type);\n    default:\n        fprintf(stderr, \"CreateObject: Got unsupported type 0x%X\\n\", type);\n        return NULL;\n    }\n}\n\nPycRef<PycObject> LoadObject(PycData* stream, PycModule* mod)\n{\n    int type = stream->getByte();\n    PycRef<PycObject> obj;\n\n    if (type == PycObject::TYPE_OBREF) {\n        int index = stream->get32();\n        obj = mod->getRef(index);\n    } else {\n        obj = CreateObject(type & 0x7F);\n        if (obj != NULL) {\n            if (type & 0x80)\n                mod->refObject(obj);\n            obj->load(stream, mod);\n        }\n    }\n\n    return obj;\n}\n"
        },
        {
          "name": "pyc_object.h",
          "type": "blob",
          "size": 4.828125,
          "content": "#ifndef _PYC_OBJECT_H\n#define _PYC_OBJECT_H\n\n#include <typeinfo>\n\ntemplate <class _Obj>\nclass PycRef {\npublic:\n    PycRef() noexcept : m_obj() { }\n\n    PycRef(_Obj* obj) noexcept : m_obj(obj)\n    {\n        if (m_obj)\n            m_obj->addRef();\n    }\n\n    PycRef(const PycRef<_Obj>& obj) noexcept : m_obj(obj.m_obj)\n    {\n        if (m_obj)\n            m_obj->addRef();\n    }\n\n    PycRef(PycRef<_Obj>&& obj) noexcept : m_obj(obj.m_obj)\n    {\n        obj.m_obj = nullptr;\n    }\n\n    ~PycRef()\n    {\n        if (m_obj)\n            m_obj->delRef();\n    }\n\n    PycRef<_Obj>& operator=(_Obj* obj)\n    {\n        if (obj)\n            obj->addRef();\n        if (m_obj)\n            m_obj->delRef();\n        m_obj = obj;\n        return *this;\n    }\n\n    PycRef<_Obj>& operator=(const PycRef<_Obj>& obj)\n    {\n        if (obj.m_obj)\n            obj.m_obj->addRef();\n        if (m_obj)\n            m_obj->delRef();\n        m_obj = obj.m_obj;\n        return *this;\n    }\n\n    PycRef<_Obj>& operator=(PycRef<_Obj>&& obj) noexcept\n    {\n        m_obj = obj.m_obj;\n        obj.m_obj = nullptr;\n        return *this;\n    }\n\n    bool operator==(_Obj* obj) const { return m_obj == obj; }\n    bool operator==(const PycRef<_Obj>& obj) const { return m_obj == obj.m_obj; }\n    bool operator!=(_Obj* obj) const { return m_obj != obj; }\n    bool operator!=(const PycRef<_Obj>& obj) const { return m_obj != obj.m_obj; }\n\n    _Obj& operator*() const { return *m_obj; }\n    _Obj* operator->() const { return m_obj; }\n    operator _Obj*() const { return m_obj; }\n\n    inline int type() const;\n\n    template <class _Cast>\n    PycRef<_Cast> try_cast() const { return dynamic_cast<_Cast*>(m_obj); }\n\n    template <class _Cast>\n    PycRef<_Cast> cast() const\n    {\n        _Cast* result = dynamic_cast<_Cast*>(m_obj);\n        if (!result)\n            throw std::bad_cast();\n        return result;\n    }\n\n    bool isIdent(const _Obj* obj) const { return m_obj == obj; }\n\nprivate:\n    _Obj* m_obj;\n};\n\n\nclass PycData;\nclass PycModule;\n\n/* Please only hold PycObjects inside PycRefs! */\nclass PycObject {\npublic:\n    enum Type {\n        // From the Python Marshallers\n        TYPE_NULL = '0',                    // Python 1.0 ->\n        TYPE_NONE = 'N',                    // Python 1.0 ->\n        TYPE_FALSE = 'F',                   // Python 2.3 ->\n        TYPE_TRUE = 'T',                    // Python 2.3 ->\n        TYPE_STOPITER = 'S',                // Python 2.2 ->\n        TYPE_ELLIPSIS = '.',                // Python 1.4 ->\n        TYPE_INT = 'i',                     // Python 1.0 ->\n        TYPE_INT64 = 'I',                   // Python 1.5 - 3.3\n        TYPE_FLOAT = 'f',                   // Python 1.0 ->\n        TYPE_BINARY_FLOAT = 'g',            // Python 2.5 ->\n        TYPE_COMPLEX = 'x',                 // Python 1.4 ->\n        TYPE_BINARY_COMPLEX = 'y',          // Python 2.5 ->\n        TYPE_LONG = 'l',                    // Python 1.0 ->\n        TYPE_STRING = 's',                  // Python 1.0 ->\n        TYPE_INTERNED = 't',                // Python 2.4 - 2.7, 3.4 ->\n        TYPE_STRINGREF = 'R',               // Python 2.4 - 2.7\n        TYPE_OBREF = 'r',                   // Python 3.4 ->\n        TYPE_TUPLE = '(',                   // Python 1.0 ->\n        TYPE_LIST = '[',                    // Python 1.0 ->\n        TYPE_DICT = '{',                    // Python 1.0 ->\n        TYPE_CODE = 'c',                    // Python 1.3 ->\n        TYPE_CODE2 = 'C',                   // Python 1.0 - 1.2\n        TYPE_UNICODE = 'u',                 // Python 1.6 ->\n        TYPE_UNKNOWN = '?',                 // Python 1.0 ->\n        TYPE_SET = '<',                     // Python 2.5 ->\n        TYPE_FROZENSET = '>',               // Python 2.5 ->\n        TYPE_ASCII = 'a',                   // Python 3.4 ->\n        TYPE_ASCII_INTERNED = 'A',          // Python 3.4 ->\n        TYPE_SMALL_TUPLE = ')',             // Python 3.4 ->\n        TYPE_SHORT_ASCII = 'z',             // Python 3.4 ->\n        TYPE_SHORT_ASCII_INTERNED = 'Z',    // Python 3.4 ->\n    };\n\n    PycObject(int type = TYPE_UNKNOWN) : m_refs(0), m_type(type) { }\n    virtual ~PycObject() { }\n\n    int type() const { return m_type; }\n\n    virtual bool isEqual(PycRef<PycObject> obj) const\n    {\n        return obj.isIdent(this);\n    }\n\n    virtual void load(PycData*, PycModule*) { }\n\nprivate:\n    int m_refs;\n\nprotected:\n    int m_type;\n\npublic:\n    void addRef() { ++m_refs; }\n    void delRef() { if (--m_refs == 0) delete this; }\n};\n\ntemplate <class _Obj>\nint PycRef<_Obj>::type() const\n{\n    return m_obj ? m_obj->type() : PycObject::TYPE_NULL;\n}\n\nPycRef<PycObject> CreateObject(int type);\nPycRef<PycObject> LoadObject(PycData* stream, PycModule* mod);\n\n/* Static Singleton objects */\nextern PycRef<PycObject> Pyc_None;\nextern PycRef<PycObject> Pyc_Ellipsis;\nextern PycRef<PycObject> Pyc_StopIteration;\nextern PycRef<PycObject> Pyc_False;\nextern PycRef<PycObject> Pyc_True;\n\n#endif\n"
        },
        {
          "name": "pyc_sequence.cpp",
          "type": "blob",
          "size": 1.916015625,
          "content": "#include \"pyc_sequence.h\"\n#include \"pyc_module.h\"\n#include \"data.h\"\n#include <stdexcept>\n\n/* PycSimpleSequence */\nvoid PycSimpleSequence::load(PycData* stream, PycModule* mod)\n{\n    m_size = stream->get32();\n    m_values.reserve(m_size);\n    for (int i=0; i<m_size; i++)\n        m_values.push_back(LoadObject(stream, mod));\n}\n\nbool PycSimpleSequence::isEqual(PycRef<PycObject> obj) const\n{\n    if (type() != obj.type())\n        return false;\n\n    PycRef<PycSimpleSequence> seqObj = obj.cast<PycSimpleSequence>();\n    if (m_size != seqObj->m_size)\n        return false;\n    auto it1 = m_values.cbegin();\n    auto it2 = seqObj->m_values.cbegin();\n    while (it1 != m_values.cend()) {\n        if (!(*it1)->isEqual(*it2))\n            return false;\n        ++it1, ++it2;\n    }\n    return true;\n}\n\n\n/* PycTuple */\nvoid PycTuple::load(PycData* stream, PycModule* mod)\n{\n    if (type() == TYPE_SMALL_TUPLE)\n        m_size = stream->getByte();\n    else\n        m_size = stream->get32();\n\n    m_values.resize(m_size);\n    for (int i=0; i<m_size; i++)\n        m_values[i] = LoadObject(stream, mod);\n}\n\n\n/* PycDict */\nvoid PycDict::load(PycData* stream, PycModule* mod)\n{\n    PycRef<PycObject> key, val;\n    for (;;) {\n        key = LoadObject(stream, mod);\n        if (key == NULL)\n            break;\n        val = LoadObject(stream, mod);\n        m_values.emplace_back(std::make_tuple(key, val));\n    }\n}\n\nbool PycDict::isEqual(PycRef<PycObject> obj) const\n{\n    if (type() != obj.type())\n        return false;\n\n    PycRef<PycDict> dictObj = obj.cast<PycDict>();\n    if (m_values.size() != dictObj->m_values.size())\n        return false;\n\n    auto it1 = m_values.cbegin();\n    auto it2 = dictObj->m_values.cbegin();\n    while (it1 != m_values.cend()) {\n        if (!std::get<0>(*it1)->isEqual(std::get<0>(*it2)))\n            return false;\n        if (!std::get<1>(*it1)->isEqual(std::get<1>(*it2)))\n            return false;\n        ++it1, ++it2;\n    }\n    return true;\n}\n"
        },
        {
          "name": "pyc_sequence.h",
          "type": "blob",
          "size": 1.7705078125,
          "content": "#ifndef _PYC_SEQUENCE_H\n#define _PYC_SEQUENCE_H\n\n#include \"pyc_object.h\"\n#include <tuple>\n#include <vector>\n\nclass PycSequence : public PycObject {\npublic:\n    PycSequence(int type) : PycObject(type), m_size(0) { }\n\n    int size() const { return m_size; }\n    virtual PycRef<PycObject> get(int idx) const = 0;\n\nprotected:\n    int m_size;\n};\n\nclass PycSimpleSequence : public PycSequence {\npublic:\n    typedef std::vector<PycRef<PycObject>> value_t;\n\n    PycSimpleSequence(int type) : PycSequence(type) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    const value_t& values() const { return m_values; }\n    PycRef<PycObject> get(int idx) const override { return m_values.at(idx); }\n\nprotected:\n    value_t m_values;\n};\n\nclass PycTuple : public PycSimpleSequence {\npublic:\n    typedef PycSimpleSequence::value_t value_t;\n    PycTuple(int type = TYPE_TUPLE) : PycSimpleSequence(type) { }\n\n    void load(class PycData* stream, class PycModule* mod) override;\n};\n\nclass PycList : public PycSimpleSequence {\npublic:\n    typedef PycSimpleSequence::value_t value_t;\n    PycList(int type = TYPE_LIST) : PycSimpleSequence(type) { }\n};\n\nclass PycSet : public PycSimpleSequence {\npublic:\n    typedef PycSimpleSequence::value_t value_t;\n    PycSet(int type = TYPE_SET) : PycSimpleSequence(type) { }\n};\n\nclass PycDict : public PycObject {\npublic:\n    typedef std::tuple<PycRef<PycObject>, PycRef<PycObject>> item_t;\n    typedef std::vector<item_t> value_t;\n\n    PycDict(int type = TYPE_DICT) : PycObject(type) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    const value_t& values() const { return m_values; }\n\nprivate:\n    value_t m_values;\n};\n\n#endif\n"
        },
        {
          "name": "pyc_string.cpp",
          "type": "blob",
          "size": 4.5458984375,
          "content": "#include \"pyc_string.h\"\n#include \"pyc_module.h\"\n#include \"data.h\"\n#include <stdexcept>\n\nstatic bool check_ascii(const std::string& data)\n{\n    auto cp = reinterpret_cast<const unsigned char*>(data.c_str());\n    while (*cp) {\n        if (*cp & 0x80)\n            return false;\n        ++cp;\n    }\n    return true;\n}\n\n/* PycString */\nvoid PycString::load(PycData* stream, PycModule* mod)\n{\n    if (type() == TYPE_STRINGREF) {\n        PycRef<PycString> str = mod->getIntern(stream->get32());\n        m_type = str->m_type;\n        m_value = str->m_value;\n    } else {\n        int length;\n        if (type() == TYPE_SHORT_ASCII || type() == TYPE_SHORT_ASCII_INTERNED)\n            length = stream->getByte();\n        else\n            length = stream->get32();\n\n        if (length < 0)\n            throw std::bad_alloc();\n\n        m_value.resize(length);\n        if (length) {\n            stream->getBuffer(length, &m_value.front());\n            if (type() == TYPE_ASCII || type() == TYPE_ASCII_INTERNED ||\n                    type() == TYPE_SHORT_ASCII || type() == TYPE_SHORT_ASCII_INTERNED) {\n                if (!check_ascii(m_value))\n                    throw std::runtime_error(\"Invalid bytes in ASCII string\");\n            }\n        }\n\n        if (type() == TYPE_INTERNED || type() == TYPE_ASCII_INTERNED ||\n                type() == TYPE_SHORT_ASCII_INTERNED)\n            mod->intern(this);\n    }\n}\n\nbool PycString::isEqual(PycRef<PycObject> obj) const\n{\n    if (type() != obj.type())\n        return false;\n\n    PycRef<PycString> strObj = obj.cast<PycString>();\n    return isEqual(strObj->m_value);\n}\n\nvoid PycString::print(std::ostream &pyc_output, PycModule* mod, bool triple,\n                      const char* parent_f_string_quote)\n{\n    char prefix = 0;\n    switch (type()) {\n    case TYPE_STRING:\n        prefix = mod->strIsUnicode() ? 'b' : 0;\n        break;\n    case PycObject::TYPE_UNICODE:\n        prefix = mod->strIsUnicode() ? 0 : 'u';\n        break;\n    case PycObject::TYPE_INTERNED:\n        prefix = mod->internIsBytes() ? 'b' : 0;\n        break;\n    case PycObject::TYPE_ASCII:\n    case PycObject::TYPE_ASCII_INTERNED:\n    case PycObject::TYPE_SHORT_ASCII:\n    case PycObject::TYPE_SHORT_ASCII_INTERNED:\n        // These types don't exist until Python 3.4\n        prefix = 0;\n        break;\n    default:\n        throw std::runtime_error(\"Invalid string type\");\n    }\n\n    if (prefix != 0)\n        pyc_output << prefix;\n\n    if (m_value.empty()) {\n        pyc_output << \"''\";\n        return;\n    }\n\n    // Determine preferred quote style (Emulate Python's method)\n    bool useQuotes = false;\n    if (!parent_f_string_quote) {\n        for (char ch : m_value) {\n            if (ch == '\\'') {\n                useQuotes = true;\n            } else if (ch == '\"') {\n                useQuotes = false;\n                break;\n            }\n        }\n    } else {\n        useQuotes = parent_f_string_quote[0] == '\"';\n    }\n\n    // Output the string\n    if (!parent_f_string_quote) {\n        if (triple)\n            pyc_output << (useQuotes ? R\"(\"\"\")\" : \"'''\");\n        else\n            pyc_output << (useQuotes ? '\"' : '\\'');\n    }\n    for (char ch : m_value) {\n        if (static_cast<unsigned char>(ch) < 0x20 || ch == 0x7F) {\n            if (ch == '\\r') {\n                pyc_output << \"\\\\r\";\n            } else if (ch == '\\n') {\n                if (triple)\n                    pyc_output << '\\n';\n                else\n                    pyc_output << \"\\\\n\";\n            } else if (ch == '\\t') {\n                pyc_output << \"\\\\t\";\n            } else {\n                formatted_print(pyc_output, \"\\\\x%02x\", (ch & 0xFF));\n            }\n        } else if (static_cast<unsigned char>(ch) >= 0x80) {\n            if (type() == TYPE_UNICODE) {\n                // Unicode stored as UTF-8...  Let the stream interpret it\n                pyc_output << ch;\n            } else {\n                formatted_print(pyc_output, \"\\\\x%02x\", (ch & 0xFF));\n            }\n        } else {\n            if (!useQuotes && ch == '\\'')\n                pyc_output << R\"(\\')\";\n            else if (useQuotes && ch == '\"')\n                pyc_output << R\"(\\\")\";\n            else if (ch == '\\\\')\n                pyc_output << R\"(\\\\)\";\n            else if (parent_f_string_quote && ch == '{')\n                pyc_output << \"{{\";\n            else if (parent_f_string_quote && ch == '}')\n                pyc_output << \"}}\";\n            else\n                pyc_output << ch;\n        }\n    }\n    if (!parent_f_string_quote) {\n        if (triple)\n            pyc_output << (useQuotes ? R\"(\"\"\")\" : \"'''\");\n        else\n            pyc_output << (useQuotes ? '\"' : '\\'');\n    }\n}\n"
        },
        {
          "name": "pyc_string.h",
          "type": "blob",
          "size": 0.958984375,
          "content": "#ifndef _PYC_STRING_H\n#define _PYC_STRING_H\n\n#include \"pyc_object.h\"\n#include \"data.h\"\n#include <cstdio>\n#include <string>\n\nclass PycString : public PycObject {\npublic:\n    PycString(int type = TYPE_STRING)\n        : PycObject(type) { }\n\n    bool isEqual(PycRef<PycObject> obj) const override;\n    bool isEqual(const std::string& str) const { return m_value == str; }\n\n    bool startsWith(const std::string& str) const\n    {\n        return m_value.substr(0, str.size()) == str;\n    }\n\n    void load(class PycData* stream, class PycModule* mod) override;\n\n    int length() const { return (int)m_value.size(); }\n    const char* value() const { return m_value.c_str(); }\n    const std::string &strValue() const { return m_value; }\n\n    void setValue(std::string str) { m_value = std::move(str); }\n\n    void print(std::ostream& stream, class PycModule* mod, bool triple = false,\n               const char* parent_f_string_quote = nullptr);\n\nprivate:\n    std::string m_value;\n};\n\n#endif\n"
        },
        {
          "name": "pycdas.cpp",
          "type": "blob",
          "size": 13.513671875,
          "content": "#include <cstdio>\n#include <cstring>\n#include <cstdarg>\n#include <string>\n#include <iostream>\n#include <fstream>\n#include \"pyc_module.h\"\n#include \"pyc_numeric.h\"\n#include \"bytecode.h\"\n\n#ifdef WIN32\n#  define PATHSEP '\\\\'\n#else\n#  define PATHSEP '/'\n#endif\n\nstatic const char* flag_names[] = {\n    \"CO_OPTIMIZED\", \"CO_NEWLOCALS\", \"CO_VARARGS\", \"CO_VARKEYWORDS\",\n    \"CO_NESTED\", \"CO_GENERATOR\", \"CO_NOFREE\", \"CO_COROUTINE\",\n    \"CO_ITERABLE_COROUTINE\", \"CO_ASYNC_GENERATOR\", \"<0x400>\", \"<0x800>\",\n    \"CO_GENERATOR_ALLOWED\", \"<0x2000>\", \"<0x4000>\", \"<0x8000>\",\n    \"<0x10000>\", \"CO_FUTURE_DIVISION\", \"CO_FUTURE_ABSOLUTE_IMPORT\", \"CO_FUTURE_WITH_STATEMENT\",\n    \"CO_FUTURE_PRINT_FUNCTION\", \"CO_FUTURE_UNICODE_LITERALS\", \"CO_FUTURE_BARRY_AS_BDFL\",\n            \"CO_FUTURE_GENERATOR_STOP\",\n    \"CO_FUTURE_ANNOTATIONS\", \"CO_NO_MONITORING_EVENTS\", \"<0x4000000>\", \"<0x8000000>\",\n    \"<0x10000000>\", \"<0x20000000>\", \"<0x40000000>\", \"<0x80000000>\"\n};\n\nstatic void print_coflags(unsigned long flags, std::ostream& pyc_output)\n{\n    if (flags == 0) {\n        pyc_output << \"\\n\";\n        return;\n    }\n\n    pyc_output << \" (\";\n    unsigned long f = 1;\n    int k = 0;\n    while (k < 32) {\n        if ((flags & f) != 0) {\n            flags &= ~f;\n            if (flags == 0)\n                pyc_output << flag_names[k];\n            else\n                pyc_output << flag_names[k] << \" | \";\n        }\n        ++k;\n        f <<= 1;\n    }\n    pyc_output << \")\\n\";\n}\n\nstatic void iputs(std::ostream& pyc_output, int indent, const char* text)\n{\n    for (int i=0; i<indent; i++)\n        pyc_output << \"    \";\n    pyc_output << text;\n}\n\nstatic void ivprintf(std::ostream& pyc_output, int indent, const char* fmt,\n                     va_list varargs)\n{\n    for (int i=0; i<indent; i++)\n        pyc_output << \"    \";\n    formatted_printv(pyc_output, fmt, varargs);\n}\n\nstatic void iprintf(std::ostream& pyc_output, int indent, const char* fmt, ...)\n{\n    va_list varargs;\n    va_start(varargs, fmt);\n    ivprintf(pyc_output, indent, fmt, varargs);\n    va_end(varargs);\n}\n\nvoid output_object(PycRef<PycObject> obj, PycModule* mod, int indent,\n                   unsigned flags, std::ostream& pyc_output)\n{\n    if (obj == NULL) {\n        iputs(pyc_output, indent, \"<NULL>\");\n        return;\n    }\n\n    switch (obj->type()) {\n    case PycObject::TYPE_CODE:\n    case PycObject::TYPE_CODE2:\n        {\n            PycRef<PycCode> codeObj = obj.cast<PycCode>();\n            iputs(pyc_output, indent, \"[Code]\\n\");\n            iprintf(pyc_output, indent + 1, \"File Name: %s\\n\", codeObj->fileName()->value());\n            iprintf(pyc_output, indent + 1, \"Object Name: %s\\n\", codeObj->name()->value());\n            if (mod->verCompare(3, 11) >= 0)\n                iprintf(pyc_output, indent + 1, \"Qualified Name: %s\\n\", codeObj->qualName()->value());\n            iprintf(pyc_output, indent + 1, \"Arg Count: %d\\n\", codeObj->argCount());\n            if (mod->verCompare(3, 8) >= 0)\n                iprintf(pyc_output, indent + 1, \"Pos Only Arg Count: %d\\n\", codeObj->posOnlyArgCount());\n            if (mod->majorVer() >= 3)\n                iprintf(pyc_output, indent + 1, \"KW Only Arg Count: %d\\n\", codeObj->kwOnlyArgCount());\n            if (mod->verCompare(3, 11) < 0)\n                iprintf(pyc_output, indent + 1, \"Locals: %d\\n\", codeObj->numLocals());\n            if (mod->verCompare(1, 5) >= 0)\n                iprintf(pyc_output, indent + 1, \"Stack Size: %d\\n\", codeObj->stackSize());\n            if (mod->verCompare(1, 3) >= 0) {\n                unsigned int orig_flags = codeObj->flags();\n                if (mod->verCompare(3, 8) < 0) {\n                    // Remap flags back to the value stored in the PyCode object\n                    orig_flags = (orig_flags & 0xFFFF) | ((orig_flags & 0xFFF00000) >> 4);\n                }\n                iprintf(pyc_output, indent + 1, \"Flags: 0x%08X\", orig_flags);\n                print_coflags(codeObj->flags(), pyc_output);\n            }\n\n            iputs(pyc_output, indent + 1, \"[Names]\\n\");\n            for (int i=0; i<codeObj->names()->size(); i++)\n                output_object(codeObj->names()->get(i), mod, indent + 2, flags, pyc_output);\n\n            if (mod->verCompare(1, 3) >= 0) {\n                if (mod->verCompare(3, 11) >= 0)\n                    iputs(pyc_output, indent + 1, \"[Locals+Names]\\n\");\n                else\n                    iputs(pyc_output, indent + 1, \"[Var Names]\\n\");\n                for (int i=0; i<codeObj->localNames()->size(); i++)\n                    output_object(codeObj->localNames()->get(i), mod, indent + 2, flags, pyc_output);\n            }\n\n            if (mod->verCompare(3, 11) >= 0 && (flags & Pyc::DISASM_PYCODE_VERBOSE) != 0) {\n                iputs(pyc_output, indent + 1, \"[Locals+Kinds]\\n\");\n                output_object(codeObj->localKinds().cast<PycObject>(), mod, indent + 2, flags, pyc_output);\n            }\n\n            if (mod->verCompare(2, 1) >= 0 && mod->verCompare(3, 11) < 0) {\n                iputs(pyc_output, indent + 1, \"[Free Vars]\\n\");\n                for (int i=0; i<codeObj->freeVars()->size(); i++)\n                    output_object(codeObj->freeVars()->get(i), mod, indent + 2, flags, pyc_output);\n\n                iputs(pyc_output, indent + 1, \"[Cell Vars]\\n\");\n                for (int i=0; i<codeObj->cellVars()->size(); i++)\n                    output_object(codeObj->cellVars()->get(i), mod, indent + 2, flags, pyc_output);\n            }\n\n            iputs(pyc_output, indent + 1, \"[Constants]\\n\");\n            for (int i=0; i<codeObj->consts()->size(); i++)\n                output_object(codeObj->consts()->get(i), mod, indent + 2, flags, pyc_output);\n\n            iputs(pyc_output, indent + 1, \"[Disassembly]\\n\");\n            bc_disasm(pyc_output, codeObj, mod, indent + 2, flags);\n\n            if (mod->verCompare(1, 5) >= 0 && (flags & Pyc::DISASM_PYCODE_VERBOSE) != 0) {\n                iprintf(pyc_output, indent + 1, \"First Line: %d\\n\", codeObj->firstLine());\n                iputs(pyc_output, indent + 1, \"[Line Number Table]\\n\");\n                output_object(codeObj->lnTable().cast<PycObject>(), mod, indent + 2, flags, pyc_output);\n            }\n\n            if (mod->verCompare(3, 11) >= 0 && (flags & Pyc::DISASM_PYCODE_VERBOSE) != 0) {\n                iputs(pyc_output, indent + 1, \"[Exception Table]\\n\");\n                output_object(codeObj->exceptTable().cast<PycObject>(), mod, indent + 2, flags, pyc_output);\n            }\n        }\n        break;\n    case PycObject::TYPE_STRING:\n    case PycObject::TYPE_UNICODE:\n    case PycObject::TYPE_INTERNED:\n    case PycObject::TYPE_ASCII:\n    case PycObject::TYPE_ASCII_INTERNED:\n    case PycObject::TYPE_SHORT_ASCII:\n    case PycObject::TYPE_SHORT_ASCII_INTERNED:\n        iputs(pyc_output, indent, \"\");\n        obj.cast<PycString>()->print(pyc_output, mod);\n        pyc_output << \"\\n\";\n        break;\n    case PycObject::TYPE_TUPLE:\n    case PycObject::TYPE_SMALL_TUPLE:\n        {\n            iputs(pyc_output, indent, \"(\\n\");\n            for (const auto& val : obj.cast<PycTuple>()->values())\n                output_object(val, mod, indent + 1, flags, pyc_output);\n            iputs(pyc_output, indent, \")\\n\");\n        }\n        break;\n    case PycObject::TYPE_LIST:\n        {\n            iputs(pyc_output, indent, \"[\\n\");\n            for (const auto& val : obj.cast<PycList>()->values())\n                output_object(val, mod, indent + 1, flags, pyc_output);\n            iputs(pyc_output, indent, \"]\\n\");\n        }\n        break;\n    case PycObject::TYPE_DICT:\n        {\n            iputs(pyc_output, indent, \"{\\n\");\n            for (const auto& val : obj.cast<PycDict>()->values()) {\n                output_object(std::get<0>(val), mod, indent + 1, flags, pyc_output);\n                output_object(std::get<1>(val), mod, indent + 2, flags, pyc_output);\n            }\n            iputs(pyc_output, indent, \"}\\n\");\n        }\n        break;\n    case PycObject::TYPE_SET:\n        {\n            iputs(pyc_output, indent, \"{\\n\");\n            for (const auto& val : obj.cast<PycSet>()->values())\n                output_object(val, mod, indent + 1, flags, pyc_output);\n            iputs(pyc_output, indent, \"}\\n\");\n        }\n        break;\n    case PycObject::TYPE_FROZENSET:\n        {\n            iputs(pyc_output, indent, \"frozenset({\\n\");\n            for (const auto& val : obj.cast<PycSet>()->values())\n                output_object(val, mod, indent + 1, flags, pyc_output);\n            iputs(pyc_output, indent, \"})\\n\");\n        }\n        break;\n    case PycObject::TYPE_NONE:\n        iputs(pyc_output, indent, \"None\\n\");\n        break;\n    case PycObject::TYPE_FALSE:\n        iputs(pyc_output, indent, \"False\\n\");\n        break;\n    case PycObject::TYPE_TRUE:\n        iputs(pyc_output, indent, \"True\\n\");\n        break;\n    case PycObject::TYPE_ELLIPSIS:\n        iputs(pyc_output, indent, \"...\\n\");\n        break;\n    case PycObject::TYPE_INT:\n        iprintf(pyc_output, indent, \"%d\\n\", obj.cast<PycInt>()->value());\n        break;\n    case PycObject::TYPE_LONG:\n        iprintf(pyc_output, indent, \"%s\\n\", obj.cast<PycLong>()->repr(mod).c_str());\n        break;\n    case PycObject::TYPE_FLOAT:\n        iprintf(pyc_output, indent, \"%s\\n\", obj.cast<PycFloat>()->value());\n        break;\n    case PycObject::TYPE_COMPLEX:\n        iprintf(pyc_output, indent, \"(%s+%sj)\\n\", obj.cast<PycComplex>()->value(),\n                                      obj.cast<PycComplex>()->imag());\n        break;\n    case PycObject::TYPE_BINARY_FLOAT:\n        iprintf(pyc_output, indent, \"%g\\n\", obj.cast<PycCFloat>()->value());\n        break;\n    case PycObject::TYPE_BINARY_COMPLEX:\n        iprintf(pyc_output, indent, \"(%g+%gj)\\n\", obj.cast<PycCComplex>()->value(),\n                                      obj.cast<PycCComplex>()->imag());\n        break;\n    default:\n        iprintf(pyc_output, indent, \"<TYPE: %d>\\n\", obj->type());\n    }\n}\n\nint main(int argc, char* argv[])\n{\n    const char* infile = nullptr;\n    bool marshalled = false;\n    const char* version = nullptr;\n    unsigned disasm_flags = 0;\n    std::ostream* pyc_output = &std::cout;\n    std::ofstream out_file;\n\n    for (int arg = 1; arg < argc; ++arg) {\n        if (strcmp(argv[arg], \"-o\") == 0) {\n            if (arg + 1 < argc) {\n                const char* filename = argv[++arg];\n                out_file.open(filename, std::ios_base::out);\n                if (out_file.fail()) {\n                    fprintf(stderr, \"Error opening file '%s' for writing\\n\",\n                            filename);\n                    return 1;\n                }\n                pyc_output = &out_file;\n            } else {\n                fputs(\"Option '-o' requires a filename\\n\", stderr);\n                return 1;\n            }\n        } else if (strcmp(argv[arg], \"-c\") == 0) {\n            marshalled = true;\n        } else if (strcmp(argv[arg], \"-v\") == 0) {\n            if (arg + 1 < argc) {\n                version = argv[++arg];\n            } else {\n                fputs(\"Option '-v' requires a version\\n\", stderr);\n                return 1;\n            }\n        } else if (strcmp(argv[arg], \"--pycode-extra\") == 0) {\n            disasm_flags |= Pyc::DISASM_PYCODE_VERBOSE;\n        } else if (strcmp(argv[arg], \"--show-caches\") == 0) {\n            disasm_flags |= Pyc::DISASM_SHOW_CACHES;\n        } else if (strcmp(argv[arg], \"--help\") == 0 || strcmp(argv[arg], \"-h\") == 0) {\n            fprintf(stderr, \"Usage:  %s [options] input.pyc\\n\\n\", argv[0]);\n            fputs(\"Options:\\n\", stderr);\n            fputs(\"  -o <filename>  Write output to <filename> (default: stdout)\\n\", stderr);\n            fputs(\"  -c             Specify loading a compiled code object. Requires the version to be set\\n\", stderr);\n            fputs(\"  -v <x.y>       Specify a Python version for loading a compiled code object\\n\", stderr);\n            fputs(\"  --pycode-extra Show extra fields in PyCode object dumps\\n\", stderr);\n            fputs(\"  --show-caches  Don't suprress CACHE instructions in Python 3.11+ disassembly\\n\", stderr);\n            fputs(\"  --help         Show this help text and then exit\\n\", stderr);\n            return 0;\n        } else if (argv[arg][0] == '-') {\n            fprintf(stderr, \"Error: Unrecognized argument %s\\n\", argv[arg]);\n            return 1;\n        } else {\n            infile = argv[arg];\n        }\n    }\n\n    if (!infile) {\n        fputs(\"No input file specified\\n\", stderr);\n        return 1;\n    }\n\n    PycModule mod;\n    if (!marshalled) {\n        try {\n            mod.loadFromFile(infile);\n        } catch (std::exception &ex) {\n            fprintf(stderr, \"Error disassembling %s: %s\\n\", infile, ex.what());\n            return 1;\n        }\n    } else {\n        if (!version) {\n            fputs(\"Opening raw code objects requires a version to be specified\\n\", stderr);\n            return 1;\n        }\n        std::string s(version);\n        auto dot = s.find('.');\n        if (dot == std::string::npos || dot == s.size()-1) {\n            fputs(\"Unable to parse version string (use the format x.y)\\n\", stderr);\n            return 1;\n        }\n        int major = std::stoi(s.substr(0, dot));\n        int minor = std::stoi(s.substr(dot+1, s.size()));\n        mod.loadFromMarshalledFile(infile, major, minor);\n    }\n    const char* dispname = strrchr(infile, PATHSEP);\n    dispname = (dispname == NULL) ? infile : dispname + 1;\n    formatted_print(*pyc_output, \"%s (Python %d.%d%s)\\n\", dispname,\n                    mod.majorVer(), mod.minorVer(),\n                    (mod.majorVer() < 3 && mod.isUnicode()) ? \" -U\" : \"\");\n    try {\n        output_object(mod.code().try_cast<PycObject>(), &mod, 0, disasm_flags,\n                      *pyc_output);\n    } catch (std::exception& ex) {\n        fprintf(stderr, \"Error disassembling %s: %s\\n\", infile, ex.what());\n        return 1;\n    }\n\n    return 0;\n}\n"
        },
        {
          "name": "pycdc.cpp",
          "type": "blob",
          "size": 3.5263671875,
          "content": "#include <cstring>\n#include <fstream>\n#include <iostream>\n#include \"ASTree.h\"\n\n#ifdef WIN32\n#  define PATHSEP '\\\\'\n#else\n#  define PATHSEP '/'\n#endif\n\nint main(int argc, char* argv[])\n{\n    const char* infile = nullptr;\n    bool marshalled = false;\n    const char* version = nullptr;\n    std::ostream* pyc_output = &std::cout;\n    std::ofstream out_file;\n\n    for (int arg = 1; arg < argc; ++arg) {\n        if (strcmp(argv[arg], \"-o\") == 0) {\n            if (arg + 1 < argc) {\n                const char* filename = argv[++arg];\n                out_file.open(filename, std::ios_base::out);\n                if (out_file.fail()) {\n                    fprintf(stderr, \"Error opening file '%s' for writing\\n\",\n                            filename);\n                    return 1;\n                }\n                pyc_output = &out_file;\n            } else {\n                fputs(\"Option '-o' requires a filename\\n\", stderr);\n                return 1;\n            }\n        } else if (strcmp(argv[arg], \"-c\") == 0) {\n            marshalled = true;\n        } else if (strcmp(argv[arg], \"-v\") == 0) {\n            if (arg + 1 < argc) {\n                version = argv[++arg];\n            } else {\n                fputs(\"Option '-v' requires a version\\n\", stderr);\n                return 1;\n            }\n        } else if (strcmp(argv[arg], \"--help\") == 0 || strcmp(argv[arg], \"-h\") == 0) {\n            fprintf(stderr, \"Usage:  %s [options] input.pyc\\n\\n\", argv[0]);\n            fputs(\"Options:\\n\", stderr);\n            fputs(\"  -o <filename>  Write output to <filename> (default: stdout)\\n\", stderr);\n            fputs(\"  -c             Specify loading a compiled code object. Requires the version to be set\\n\", stderr);\n            fputs(\"  -v <x.y>       Specify a Python version for loading a compiled code object\\n\", stderr);\n            fputs(\"  --help         Show this help text and then exit\\n\", stderr);\n            return 0;\n        } else {\n            infile = argv[arg];\n        }\n    }\n\n    if (!infile) {\n        fputs(\"No input file specified\\n\", stderr);\n        return 1;\n    }\n\n    PycModule mod;\n    if (!marshalled) {\n        try {\n            mod.loadFromFile(infile);\n        } catch (std::exception& ex) {\n            fprintf(stderr, \"Error loading file %s: %s\\n\", infile, ex.what());\n            return 1;\n        }\n    } else {\n        if (!version) {\n            fputs(\"Opening raw code objects requires a version to be specified\\n\", stderr);\n            return 1;\n        }\n        std::string s(version);\n        auto dot = s.find('.');\n        if (dot == std::string::npos || dot == s.size()-1) {\n            fputs(\"Unable to parse version string (use the format x.y)\\n\", stderr);\n            return 1;\n        }\n        int major = std::stoi(s.substr(0, dot));\n        int minor = std::stoi(s.substr(dot+1, s.size()));\n        mod.loadFromMarshalledFile(infile, major, minor);\n    }\n\n    if (!mod.isValid()) {\n        fprintf(stderr, \"Could not load file %s\\n\", infile);\n        return 1;\n    }\n    const char* dispname = strrchr(infile, PATHSEP);\n    dispname = (dispname == NULL) ? infile : dispname + 1;\n    *pyc_output << \"# Source Generated with Decompyle++\\n\";\n    formatted_print(*pyc_output, \"# File: %s (Python %d.%d%s)\\n\\n\", dispname,\n                    mod.majorVer(), mod.minorVer(),\n                    (mod.majorVer() < 3 && mod.isUnicode()) ? \" Unicode\" : \"\");\n    try {\n        decompyle(mod.code(), &mod, *pyc_output);\n    } catch (std::exception& ex) {\n        fprintf(stderr, \"Error decompyling %s: %s\\n\", infile, ex.what());\n        return 1;\n    }\n\n    return 0;\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}