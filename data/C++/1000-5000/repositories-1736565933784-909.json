{
  "metadata": {
    "timestamp": 1736565933784,
    "page": 909,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dmlc/decord",
      "stars": 1966,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# Custom ignored\n.vscode\nbuild/*\ndocs/_build\n.DS_Store\n__pycache__\n*.pyc\n.ipynb_checkpoints\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\npython/build/\npython/*egg-info/\npython/dist/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1884765625,
          "content": "[submodule \"3rdparty/dmlc-core\"]\n\tpath = 3rdparty/dmlc-core\n\turl = https://github.com/dmlc/dmlc-core\n[submodule \"3rdparty/dlpack\"]\n\tpath = 3rdparty/dlpack\n\turl = https://github.com/dmlc/dlpack\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.5478515625,
          "content": "cmake_minimum_required(VERSION 3.8.2)\nproject(decord C CXX)\n\n# Utility functions\ninclude(cmake/util/Util.cmake)\ninclude(cmake/util/FindFFmpeg.cmake)\ninclude(cmake/util/FindCUDA.cmake)\n# include(cmake/util/FindCUDAArchFlags.cmake)\n\nif(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\n  include(${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\nelse()\n  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n    include(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n  endif()\nendif()\n\n# NOTE: do not modify this file to change option values.\n# You can create a config.cmake at build folder\n# and add set(OPTION VALUE) to override these build options.\n# Alernatively, use cmake -DOPTION=VALUE through command-line.\ndecord_option(USE_CUDA \"Build with CUDA\" OFF)\ndecord_option(USE_MSVC_MT \"Build with MT\" OFF)\n\n# Project\nif(USE_CUDA)\nproject(decord C CXX CUDA)\nendif(USE_CUDA)\n\n# include directories\ninclude_directories(\"include\")\ninclude_directories(\"3rdparty/dlpack/include\")\ninclude_directories(\"3rdparty/dmlc-core/include\")\n\n# initial variables\nset(DECORD_LINKER_LIBS \"\")\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\ncmake_policy(SET CMP0042 NEW)\n\n# Generic compilation options\nif(MSVC)\n  add_definitions(-DWIN32_LEAN_AND_MEAN)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  add_definitions(-D_SCL_SECURE_NO_WARNINGS)\n  add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)\n  add_definitions(-DHalide_SHARED)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /bigobj\")\n  if(USE_MSVC_MT)\n    foreach(flag_var\n        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n      if(${flag_var} MATCHES \"/MD\")\n        string(REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n      endif(${flag_var} MATCHES \"/MD\")\n    endforeach(flag_var)\n  endif()\nelse(MSVC)\n  include(CheckCXXCompilerFlag)\n  check_cxx_compiler_flag(\"-std=c++11\"    SUPPORT_CXX11)\n  #set(CMAKE_CUDA_FLAGS \"-std=c++11 ${CMAKE_CUDA_FLAGS}\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -rdynamic\")\n  if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n    message(STATUS \"Build in Debug mode\")\n    set(CMAKE_C_FLAGS \"-O0 -g -Wall -fPIC ${CMAKE_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"-O0 -g -Wall -fPIC -std=c++11 ${CMAKE_CXX_FLAGS}\")\n  else()\n    set(CMAKE_C_FLAGS \"-O2 -Wall -fPIC -fvisibility=hidden ${CMAKE_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"-O0 -g -Wall -fPIC -std=c++11 ${CMAKE_CXX_FLAGS}\")\n  endif ()\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n    set(CMAKE_CXX_FLAGS \"-Wno-unknown-pragmas ${CMAKE_CXX_FLAGS}\")\n  endif()\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\" AND\n      CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)\n    set(CMAKE_CXX_FLAGS \"-faligned-new ${CMAKE_CXX_FLAGS}\")\n  endif()\nendif(MSVC)\n\n# add source group\nFILE(GLOB_RECURSE GROUP_SOURCE \"src/*.cc\" \"src/*.cu\")\nFILE(GLOB_RECURSE GROUP_INCLUDE \"src/*.h\" \"include/*.h\")\nassign_source_group(\"Source\" ${GROUP_SOURCE})\nassign_source_group(\"Include\" ${GROUP_INCLUDE})\n\n# Source file lists\nfile(GLOB DECORD_CORE_SRCS src/*.cc src/runtime/*.cc src/video/*.cc src/sampler/*.cc src/audio/*.cc src/av_wrapper/*.cc)\n\n# Module rules\ninclude(cmake/modules/FFmpeg.cmake)\ninclude(cmake/modules/CUDA.cmake)\n\n# Targets\n\nadd_library(decord SHARED ${DECORD_CORE_SRCS} ${DECORD_FFMPEG_SRCS} ${NVDEC_SRCS} ${RUNTIME_CUDA_SRCS} ${NVDEC_CUDA_SRCS})\n\n# target_compile_features(decord PUBLIC cxx_std_11)\n\ntarget_link_libraries(decord ${DECORD_LINKER_LIBS} ${DECORD_RUNTIME_LINKER_LIBS})\nset_property(TARGET decord PROPERTY CUDA_STANDARD 11)\n\n# More target definitions\nif(MSVC)\n  target_compile_definitions(decord PRIVATE -DDECORD_EXPORTS)\nendif()\n\n# Tests\nset(TEST_EXECS \"\")\nfile(GLOB_RECURSE TEST_SRCS tests/cpp/*.cc)\nfind_library(GTEST_LIB gtest \"$ENV{GTEST_LIB}\")\n\nif(GTEST_LIB)\n  foreach(__srcpath ${TEST_SRCS})\n    get_filename_component(__srcname ${__srcpath} NAME)\n    string(REPLACE \".cc\" \"\" __execname ${__srcname})\n    add_executable(${__execname} ${__srcpath})\n    list(APPEND TEST_EXECS ${__execname})\n    if (MSVC)\n      set(GTEST_ADD_LIBS \"\")\n    else(MSVC)\n      set(GTEST_ADD_LIBS pthread dl)\n    endif(MSVC)\n    target_link_libraries(${__execname}\n        decord ${GTEST_LIB} ${GTEST_ADD_LIBS})\n    set_target_properties(${__execname} PROPERTIES EXCLUDE_FROM_ALL 1)\n    set_target_properties(${__execname} PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)\n  endforeach()\n  add_custom_target(cpptest DEPENDS ${TEST_EXECS})\n  list(LENGTH TEST_EXECS NUM_TESTS)\n  message(STATUS \"Build with: \" ${NUM_TESTS}  \" tests\")\nendif()\n\n# Installation rules\ninstall(TARGETS decord DESTINATION lib${LIB_SUFFIX})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.7587890625,
          "content": "# Decord\n\n![CI Build](https://github.com/dmlc/decord/workflows/C/C++%20CI/badge.svg?branch=master)\n![Release Build](https://github.com/dmlc/decord/workflows/Publish%20to%20PYPI/badge.svg?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/decord.svg)](https://pypi.python.org/pypi/decord)\n[![Downloads](http://pepy.tech/badge/decord)](http://pepy.tech/project/decord)\n\n![symbol](docs/symbol.png)\n\n`Decord` is a reverse procedure of `Record`. It provides convenient video slicing methods based on a thin wrapper on top of hardware accelerated video decoders, e.g.\n\n-   FFMPEG/LibAV(Done)\n-   Nvidia Codecs(Done)\n-   Intel Codecs\n\n`Decord` was designed to handle awkward video shuffling experience in order to provide smooth experiences similar to random image loader for deep learning.\n\n`Decord` is also able to decode audio from both video and audio files. One can slice video and audio together to get a synchronized result; hence providing a one-stop solution for both video and audio decoding.\n\nTable of contents\n=================\n\n- [Benchmark](#preliminary-benchmark)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Bridge for Deep Learning frameworks](#bridges-for-deep-learning-frameworks)\n\n## Preliminary benchmark\n\nDecord is good at handling random access patterns, which is rather common during neural network training.\n\n![Speed up](https://user-images.githubusercontent.com/3307514/71223638-7199f300-2289-11ea-9e16-104038f94a55.png)\n\n## Installation\n\n### Install via pip\n\nSimply use\n\n```bash\npip install decord\n```\n\nSupported platforms:\n\n- [x] Linux\n- [x] Mac OS >= 10.12, python>=3.5\n- [x] Windows\n\n**Note that only CPU versions are provided with PYPI now. Please build from source to enable GPU acclerator.**\n\n\n### Install from source\n\n#### Linux\n\nInstall the system packages for building the shared library, for Debian/Ubuntu users, run:\n\n```bash\n# official PPA comes with ffmpeg 2.8, which lacks tons of features, we use ffmpeg 4.0 here\nsudo add-apt-repository ppa:jonathonf/ffmpeg-4 # for ubuntu20.04 official PPA is already version 4.2, you may skip this step\nsudo apt-get update\nsudo apt-get install -y build-essential python3-dev python3-setuptools make cmake\nsudo apt-get install -y ffmpeg libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev\n# note: make sure you have cmake 3.8 or later, you can install from cmake official website if it's too old\n```\n\nClone the repo recursively(important)\n\n```bash\ngit clone --recursive https://github.com/dmlc/decord\n```\n\nBuild the shared library in source root directory:\n\n```bash\ncd decord\nmkdir build && cd build\ncmake .. -DUSE_CUDA=0 -DCMAKE_BUILD_TYPE=Release\nmake\n```\n\nyou can specify `-DUSE_CUDA=ON` or `-DUSE_CUDA=/path/to/cuda` or `-DUSE_CUDA=ON` `-DCMAKE_CUDA_COMPILER=/path/to/cuda/nvcc` to enable NVDEC hardware accelerated decoding:\n\n```bash\ncmake .. -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release\n```\n\nNote that if you encountered the an issue with `libnvcuvid.so` (e.g., see [#102](https://github.com/dmlc/decord/issues/102)), it's probably due to the missing link for\n`libnvcuvid.so`, you can manually find it (`ldconfig -p | grep libnvcuvid`) and link the library to `CUDA_TOOLKIT_ROOT_DIR\\lib64` to allow `decord` smoothly detect and link the correct library.\n\nTo specify a customized FFMPEG library path, use `-DFFMPEG_DIR=/path/to/ffmpeg\".\n\nInstall python bindings:\n\n```bash\ncd ../python\n# option 1: add python path to $PYTHONPATH, you will need to install numpy separately\npwd=$PWD\necho \"PYTHONPATH=$PYTHONPATH:$pwd\" >> ~/.bashrc\nsource ~/.bashrc\n# option 2: install with setuptools\npython3 setup.py install --user\n```\n\n#### Mac OS\n\nInstallation on macOS is similar to Linux. But macOS users need to install building tools like clang, GNU Make, cmake first.\n\nTools like clang and GNU Make are packaged in _Command Line Tools_ for macOS. To install:\n\n```bash\nxcode-select --install\n```\n\nTo install other needed packages like cmake, we recommend first installing Homebrew, which is a popular package manager for macOS. Detailed instructions can be found on its [homepage](https://brew.sh/).\n\nAfter installation of Homebrew, install cmake and ffmpeg by:\n\n```bash\nbrew install cmake ffmpeg\n# note: make sure you have cmake 3.8 or later, you can install from cmake official website if it's too old\n```\n\nClone the repo recursively(important)\n\n```bash\ngit clone --recursive https://github.com/dmlc/decord\n```\n\nThen go to root directory build shared library:\n\n```bash\ncd decord\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake\n```\n\nInstall python bindings:\n\n```bash\ncd ../python\n# option 1: add python path to $PYTHONPATH, you will need to install numpy separately\npwd=$PWD\necho \"PYTHONPATH=$PYTHONPATH:$pwd\" >> ~/.bash_profile\nsource ~/.bash_profile\n# option 2: install with setuptools\npython3 setup.py install --user\n```\n\n#### Windows\n\nFor windows, you will need CMake and Visual Studio for C++ compilation.\n\n-   First, install `git`, `cmake`, `ffmpeg` and `python`. You can use [Chocolatey](https://chocolatey.org/) to manage packages similar to Linux/Mac OS.\n-   Second, install [`Visual Studio 2017 Community`](https://visualstudio.microsoft.com/), this my take some time.\n\nWhen dependencies are ready, open command line prompt:\n\n```bash\ncd your-workspace\ngit clone --recursive https://github.com/dmlc/decord\ncd decord\nmkdir build\ncd build\ncmake -DCMAKE_CXX_FLAGS=\"/DDECORD_EXPORTS\" -DCMAKE_CONFIGURATION_TYPES=\"Release\" -G \"Visual Studio 15 2017 Win64\" ..\n# open `decord.sln` and build project\n```\n\n## Usage\n\nDecord provides minimal API set for bootstraping. You can also check out jupyter notebook [examples](examples/).\n\n### VideoReader\n\nVideoReader is used to access frames directly from video files.\n\n```python\nfrom decord import VideoReader\nfrom decord import cpu, gpu\n\nvr = VideoReader('examples/flipping_a_pancake.mkv', ctx=cpu(0))\n# a file like object works as well, for in-memory decoding\nwith open('examples/flipping_a_pancake.mkv', 'rb') as f:\n  vr = VideoReader(f, ctx=cpu(0))\nprint('video frames:', len(vr))\n# 1. the simplest way is to directly access frames\nfor i in range(len(vr)):\n    # the video reader will handle seeking and skipping in the most efficient manner\n    frame = vr[i]\n    print(frame.shape)\n\n# To get multiple frames at once, use get_batch\n# this is the efficient way to obtain a long list of frames\nframes = vr.get_batch([1, 3, 5, 7, 9])\nprint(frames.shape)\n# (5, 240, 320, 3)\n# duplicate frame indices will be accepted and handled internally to avoid duplicate decoding\nframes2 = vr.get_batch([1, 2, 3, 2, 3, 4, 3, 4, 5]).asnumpy()\nprint(frames2.shape)\n# (9, 240, 320, 3)\n\n# 2. you can do cv2 style reading as well\n# skip 100 frames\nvr.skip_frames(100)\n# seek to start\nvr.seek(0)\nbatch = vr.next()\nprint('frame shape:', batch.shape)\nprint('numpy frames:', batch.asnumpy())\n\n```\n\n### VideoLoader\n\nVideoLoader is designed for training deep learning models with tons of video files.\nIt provides smart video shuffle techniques in order to provide high random access performance (We know that seeking in video is super slow and redundant).\nThe optimizations are underlying in the C++ code, which are invisible to user.\n\n```python\nfrom decord import VideoLoader\nfrom decord import cpu, gpu\n\nvl = VideoLoader(['1.mp4', '2.avi', '3.mpeg'], ctx=[cpu(0)], shape=(2, 320, 240, 3), interval=1, skip=5, shuffle=1)\nprint('Total batches:', len(vl))\n\nfor batch in vl:\n    print(batch[0].shape)\n```\n\nShuffling video can be tricky, thus we provide various modes:\n\n```python\nshuffle = -1  # smart shuffle mode, based on video properties, (not implemented yet)\nshuffle = 0  # all sequential, no seeking, following initial filename order\nshuffle = 1  # random filename order, no random access for each video, very efficient\nshuffle = 2  # random order\nshuffle = 3  # random frame access in each video only\n```\n\n### AudioReader\n\nAudioReader is used to access samples directly from both video(if there's an audio track) and audio files.\n\n```python\nfrom decord import AudioReader\nfrom decord import cpu, gpu\n\n# You can specify the desired sample rate and channel layout\n# For channels there are two options: default to the original layout or mono\nar = AudioReader('example.mp3', ctx=cpu(0), sample_rate=44100, mono=False)\nprint('Shape of audio samples: ', ar.shape())\n# To access the audio samples\nprint('The first sample: ', ar[0])\nprint('The first five samples: ', ar[0:5])\nprint('Get a batch of samples: ', ar.get_batch([1,3,5]))\n```\n\n### AVReader\n\nAVReader is a wraper for both AudioReader and VideoReader. It enables you to slice the video and audio simultaneously.\n\n```python\nfrom decord import AVReader\nfrom decord import cpu, gpu\n\nav = AVReader('example.mov', ctx=cpu(0))\n# To access both the video frames and corresponding audio samples\naudio, video = av[0:20]\n# Each element in audio will be a batch of samples corresponding to a frame of video\nprint('Frame #: ', len(audio))\nprint('Shape of the audio samples of the first frame: ', audio[0].shape)\nprint('Shape of the first frame: ', video.asnumpy()[0].shape)\n# Similarly, to get a batch\naudio2, video2 = av.get_batch([1,3,5])\n```\n\n\n\n## Bridges for deep learning frameworks:\n\nIt's important to have a bridge from decord to popular deep learning frameworks for training/inference\n\n-   Apache MXNet (Done)\n-   Pytorch (Done)\n-   TensorFlow (Done)\n\nUsing bridges for deep learning frameworks are simple, for example, one can set the default tensor output to `mxnet.ndarray`:\n\n```python\nimport decord\nvr = decord.VideoReader('examples/flipping_a_pancake.mkv')\nprint('native output:', type(vr[0]), vr[0].shape)\n# native output: <class 'decord.ndarray.NDArray'>, (240, 426, 3)\n# you only need to set the output type once\ndecord.bridge.set_bridge('mxnet')\nprint(type(vr[0], vr[0].shape))\n# <class 'mxnet.ndarray.ndarray.NDArray'> (240, 426, 3)\n# or pytorch and tensorflow(>=2.2.0)\ndecord.bridge.set_bridge('torch')\ndecord.bridge.set_bridge('tensorflow')\n# or back to decord native format\ndecord.bridge.set_bridge('native')\n```\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpu.Dockerfile",
          "type": "blob",
          "size": 1.2431640625,
          "content": "FROM nvcr.io/nvidia/cuda:11.2.0-cudnn8-devel-ubuntu20.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get -y update && apt-get install -y \\\n    software-properties-common \\\n    build-essential \\\n    checkinstall \\\n    cmake \\\n    make \\\n    pkg-config \\\n    yasm \\\n    git \\\n    vim \\\n    curl \\\n    wget \\\n    sudo \\\n    apt-transport-https \\\n    libcanberra-gtk-module \\\n    libcanberra-gtk3-module \\\n    dbus-x11 \\\n    iputils-ping \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools\n\n# some image/media dependencies\nRUN apt-get -y update && apt-get install -y \\\n    libjpeg8-dev \\\n    libpng-dev \\\n    libtiff5-dev \\\n    libtiff-dev \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libswscale-dev \\\n    libdc1394-22-dev \\\n    libxine2-dev \\\n    libavfilter-dev  \\\n    libavutil-dev\n\nRUN apt-get -y update && apt-get install -y ffmpeg  \n\nRUN apt-get clean && rm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/* && apt-get -y autoremove\n\nENV NVIDIA_DRIVER_CAPABILITIES=all\nRUN ln -s /usr/lib/x86_64-linux-gnu/libnvcuvid.so.1 /usr/local/cuda/lib64/libnvcuvid.so\nRUN git clone --recursive https://github.com/dmlc/decord\nRUN cd decord && mkdir build && cd build && cmake .. -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release && make -j2 && cd ../python && python3 setup.py install\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}