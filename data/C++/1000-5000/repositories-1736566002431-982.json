{
  "metadata": {
    "timestamp": 1736566002431,
    "page": 982,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "odygrd/quill",
      "stars": 1876,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.3076171875,
          "content": "AccessModifierOffset: -2\nAlignConsecutiveDeclarations: None\nAlignOperands: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackParameters: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nColumnLimit: 100\nCommentPragmas: ''\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: false\nIndentPPDirectives: BeforeHash\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Left\nSpaceBeforeAssignmentOperators: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nCpp11BracedListStyle: true\nStandard: c++20\nTabWidth: 2\nUseTab: Never\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.060546875,
          "content": "ignore:\n  - \"examples\"\n  - \"include/quill/bundled\"\n  - \"test\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1572265625,
          "content": "# Project exclude paths\n/cmake-build-debug/\n/.vs\n/out/build/x64-Debug\n/CMakeSettings.json\n/out/build/x64-Release\n/out/build/Mingw64-Debug\n/out/build/x64-Debug-2\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.556640625,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n  - requirements: docs/requirements.txt"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.6044921875,
          "content": "package(default_visibility = [\"//visibility:public\"])\n\nlicenses([\"notice\"])  # MIT\n\ncc_library(\n    name = \"quill\",\n    hdrs = glob([\"include/**/*.h\"]),\n    copts = select({\n        \"@rules_cc//cc/compiler:gcc\": [\"Wno-gnu-zero-variadic-macro-arguments\"],\n        \"@rules_cc//cc/compiler:clang\": [\"Wno-gnu-zero-variadic-macro-arguments\"],\n        \"//conditions:default\": [],\n    }),\n    includes = [\"include\"],\n    linkopts = select({\n        \"@platforms//os:windows\": [],\n        \"@platforms//os:linux\": [\n            \"-lpthread\",\n            \"-lrt\",\n        ],\n        \"//conditions:default\": [\"-lpthread\"],\n    }),\n)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 91.8154296875,
          "content": "- [v7.5.0](#v750)\n- [v7.4.0](#v740)\n- [v7.3.0](#v730)\n- [v7.2.2](#v722)\n- [v7.2.1](#v721)\n- [v7.2.0](#v720)\n- [v7.1.0](#v710)\n- [v7.0.0](#v700)\n- [v6.1.2](#v612)\n- [v6.1.1](#v611)\n- [v6.1.0](#v610)\n- [v6.0.0](#v600)\n- [v5.1.0](#v510)\n- [v5.0.0](#v500)\n- [v4.5.0](#v450)\n- [v4.4.1](#v441)\n- [v4.4.0](#v440)\n- [v4.3.0](#v430)\n- [v4.2.1](#v421)\n- [v4.2.0](#v420)\n- [v4.1.0](#v410)\n- [v4.0.0](#v400)\n- [v3.9.0](#v390)\n- [v3.8.0](#v380)\n- [v3.7.0](#v370)\n- [v3.6.0](#v360)\n- [v3.5.1](#v351)\n- [v3.5.0](#v350)\n- [v3.4.1](#v341)\n- [v3.4.0](#v340)\n- [v3.3.1](#v331)\n- [v3.3.0](#v330)\n- [v3.2.0](#v320)\n- [v3.1.0](#v310)\n- [v3.0.2](#v302)\n- [v3.0.1](#v301)\n- [v3.0.0](#v300)\n- [v2.9.2](#v292)\n- [v2.9.1](#v291)\n- [v2.9.0](#v290)\n- [v2.8.0](#v280)\n- [v2.7.0](#v270)\n- [v2.6.0](#v260)\n- [v2.5.1](#v251)\n- [v2.5.0](#v250)\n- [v2.4.2](#v242)\n- [v2.4.1](#v241)\n- [v2.4.0](#v240)\n- [v2.3.4](#v234)\n- [v2.3.3](#v233)\n- [v2.3.2](#v232)\n- [v2.3.1](#v231)\n- [v2.3.0](#v230)\n- [v2.2.0](#v220)\n- [v2.1.0](#v210)\n- [v2.0.2](#v202)\n- [v2.0.1](#v201)\n- [v2.0.0](#v200)\n- [v1.7.3](#v173)\n- [v1.7.2](#v172)\n- [v1.7.1](#v171)\n- [v1.7.0](#v170)\n- [v1.6.3](#v163)\n- [v1.6.2](#v162)\n- [v1.6.1](#v161)\n- [v1.6.0](#v160)\n- [v1.5.2](#v152)\n- [v1.5.1](#v151)\n- [v1.5.0](#v150)\n- [v1.4.1](#v141)\n- [v1.4.0](#v140)\n- [v1.3.3](#v133)\n- [v1.3.2](#v132)\n- [v1.3.1](#v131)\n- [v1.3.0](#v130)\n- [v1.2.3](#v123)\n- [v1.2.2](#v122)\n- [v1.2.1](#v121)\n- [v1.2.0](#v120)\n- [v1.1.0](#v110)\n- [v1.0.0](#v100)\n\n## TBD\n\n- Suppress `-Wredundant-decls` warning in GCC builds.\n- Avoid adding `-Wno-gnu-zero-variadic-macro-arguments` for GCC in CMake.\n\n## v7.5.0\n\n- In previous versions, logging on Windows automatically included `windows.h` in all components. The frontend will no\n  longer include `windows.h`. By following the recommended usage example\n  provided [here](https://github.com/odygrd/quill/blob/master/examples/recommended_usage/recommended_usage.cpp) as\n  guidance, you can create a wrapper library around Quill for the backend, allowing you to\n  log on Windows without including `windows.h` in the frontend or main\n  program. ([#618](https://github.com/odygrd/quill/issues/618))\n\n- The `LOG_LEVEL_LIMIT` time-based rate-limiting macros now log the count of how many times a message would be logged\n  when throttled. For example, a log message may appear as `A log message with number 123 (21x)` to indicate that the\n  message would have been logged 21 times. ([#616](https://github.com/odygrd/quill/issues/616))\n\n- New macros `LOG_LEVEL_LIMIT_EVERY_N` have been added, allowing for count-based rate limiting and giving developers\n  greater control over logging frequency. ([#616](https://github.com/odygrd/quill/issues/616))\n\n- Renamed `PACKED` used in `libfmt` to `QUILLPACKED` to avoid naming\n  collisions. ([#620](https://github.com/odygrd/quill/issues/620))\n\n- The `set_thread_name` function has been fixed to provide accurate error reporting, ensuring that the correct error\n  message is displayed in the event of a failure.\n\n## v7.4.0\n\n- Fixed a build issue when compiling with `-fno-rtti`. This ensures compatibility with projects that disable\n  `RTTI`. ([#604](https://github.com/odygrd/quill/issues/604))\n- Fixed an incorrectly triggered assertion in debug builds when `BackendOptions::log_timestamp_ordering_grace_period` is\n  set to 0. ([#605](https://github.com/odygrd/quill/issues/605))\n- Fixed a compile-time error in `CsvWriter` that occurred when passing a custom `FrontendOptions` type as a template\n  parameter. ([#609](https://github.com/odygrd/quill/issues/609))\n- Added accessors to `Logger` for sinks, user clock source, clock source type, and pattern formatter options that can be\n  used to create another `Logger` with similar configuration.\n- Added `ConsoleColours::ColourMode` to `ConsoleSink`, allowing colors to be explicitly forced or conditionally enabled\n  based on the environment. Previously, colors were only conditionally\n  enabled. ([#611](https://github.com/odygrd/quill/issues/611)).\n\n  For example:\n  ```cpp\n    quill::Frontend::create_or_get_sink<quill::ConsoleSink>(\n      \"sink_id_1\", quill::ConsoleColours::ColourMode::Automatic);\n\n## v7.3.0\n\n- Added the option to explicitly specify the `Logger` used by the built-in `SignalHandler` for logging errors during\n  application crashes. ([#590](https://github.com/odygrd/quill/issues/590))\n- Prevented error logs from the `SignalHandler` from being output to CSV files when a `CsvWriter` is in\n  use. ([#588](https://github.com/odygrd/quill/issues/588))\n- Introduced `SignalHandlerOptions` to simplify and unify the API. `Backend::start_with_signal_handler` is now\n  deprecated, replaced by a new `Backend::start` overload that accepts `SignalHandlerOptions` for enabling signal\n  handling.\n- Added a new `create_or_get_logger` overload that accepts a `std::vector<std::shared_ptr<Sink>>`, improving flexibility\n  by allowing a variable number of sinks to be passed at runtime when creating a logger.\n- Added a new overload to `create_or_get_logger` to create a logger that inherits configuration options from a specified\n  logger. ([#596](https://github.com/odygrd/quill/issues/596))\n- Implemented a workaround to resolve false positive warnings from `clang-tidy` on Windows.\n\n## v7.2.2\n\n- Fixed race condition during DLL unload by ensuring safe cleanup of `ThreadContext` when\n  calling `flush_log()` ([#586](https://github.com/odygrd/quill/issues/586))\n\n## v7.2.1\n\n- Fixed an unused variable warning treated as an error on MSVC.\n\n## v7.2.0\n\n**Bug Fixes:**\n\n- Fixed compile error in `BackendTscClock` ([#577](https://github.com/odygrd/quill/issues/577))\n- Added a missing header include in `TriviallyCopyableCodec.h`. ([#560](https://github.com/odygrd/quill/issues/560))\n- Fixed incorrect log level short codes introduced in v7 after adding the new log level `NOTICE`. Using\n  `%(log_level_short_code)` in the pattern formatter could incorrectly map `LOG_ERROR` to `\"C\"` and LOG_WARNING\n  to `\"E\"`. ([#564](https://github.com/odygrd/quill/issues/564))\n- Fixed an overflow issue when logging more than `uint32_t::max()` bytes in a single log message. For example,\n  attempting to log `std::string s(std::numeric_limits<uint32_t>::max(), 'a');` would previously cause a crash.\n\n**Improvements:**\n\n- Optimised dynamic log level handling and size calculation for fundamental types, `std::string` and `std::\n  string_view` on the hot path.\n- Several enhancements to the backend worker thread, resulting in an overall 10% backend throughput increase.\n  Key optimizations include the simplification of `TransitEventBuffer`, reducing the memory footprint of `TransitEvent`,\n  introducing support for custom buffer sizes in file streams and tuning `transit_events_soft_limit`\n  and `transit_events_hard_limit` default values\n- Improved readability of queue allocation notification messages. Capacities are now displayed in KiB,\n  e.g.,\n  `20:59:25 Quill INFO: Allocated a new SPSC queue with a capacity of 1024 KB (previously 512 KB) from thread 31158`.\n\n**New Features:**\n\n- Introduced support for custom buffer sizes in file streams for `FileSink` and `RotatingFileSink`. Buffer size is\n  now configurable via `FileSinkConfig::set_write_buffer_size(size_value)` with a default of 64 KB.\n- Added an optional `fsync` interval to control the minimum time between consecutive `fsync` calls, reducing disk wear\n  from frequent fsync operations. This option is only applicable when `fsync` is\n  enabled. ([#557](https://github.com/odygrd/quill/issues/557))\n- Implemented support for appending a custom timestamp format to log filenames via `StartCustomTimestampFormat`.\n  Example usage:\n  ```cpp\n  auto file_sink = quill::Frontend::create_or_get_sink<quill::FileSink>(\"logfile.log\", []()\n  {\n    quill::FileSinkConfig cfg;\n    cfg.set_filename_append_option(quill::FilenameAppendOption::StartCustomTimestampFormat, \"%m%d\");\n    return cfg;\n  }());\n  ```\n  This will create a log file named `logfile0919.log`, where `0919` represents the month and day.\n- When using `%(named_args)` in the pattern formatter or logging in JSON format, extra\n  arguments without key names are now included in JSON output with keys corresponding to their positional indexes.\n  This allows additional details to be included in the JSON while keeping the log message clean. For\n  example ([#563](https://github.com/odygrd/quill/discussions/563)):\n  ```cpp\n  LOG_INFO(hybrid_logger, \"Operation {name} completed with code {code}\", \"Update\", 123, \"Data synced successfully\");\n  ```\n  This will output:\n  ```\n  Operation Update completed with code 123\n  ```\n  And the corresponding JSON will be:\n  ```\n  {\"timestamp\":\"1726582319816776867\",\"file_name\":\"json_file_logging.cpp\",\"line\":\"71\",\"thread_id\":\"25462\",\"logger\":\"hybrid_logger\",\"log_level\":\"INFO\",\"message\":\"Operation {name} completed with code {code}\",\"name\":\"Update\",\"code\":\"123\",\"_2\":\"Data synced successfully\"}\n  ```\n\n## v7.1.0\n\n- Fixed crash when using `QueueType::BoundedDropping` or `QueueType::UnboundedDropping` after a message\n  drops. ([#553](https://github.com/odygrd/quill/issues/553))\n- Improved performance of `ForwardList` decoding.\n- Corrected reported dropped message count; previously, log flush attempts were incorrectly included.\n- Removed leftover files after running some unit tests.\n- Stabilized regression tests.\n- Suppressed false-positive `-Wstringop-overflow` warnings (e.g., with GCC 13).\n- Fixed MinGW build and added MinGW builds to GitHub Actions.\n\n## v7.0.0\n\n- Simplified the log tags API. The `Tags` class has been removed. You now pass a `char const*` directly to the macros.\n  Additionally, macros previously named `WITH_TAGS` have been renamed to `_TAGS`. For example, `LOG_INFO_WITH_TAGS` is\n  now `LOG_INFO_TAGS`.\n- Renamed `backend_cpu_affinity` to `cpu_affinity` in `BackendOptions` to improve consistency.\n- Simplified project structure by removing the extra quill directory and made minor CMake improvements; `include/quill`\n  is now directly in the root.\n- Added support for `std::string` with custom allocator. ([#524](https://github.com/odygrd/quill/issues/524))\n- Added a new log level `NOTICE`, for capturing significant events that aren't errors or warnings. It fits\n  between `INFO` and `WARNING` for logging important runtime events that require\n  attention. ([#526](https://github.com/odygrd/quill/pull/526))\n- Enhanced static assert error message for unsupported codecs, providing clearer guidance for STL and user-defined\n  types.\n- Improved frontend performance by caching the `ThreadContext` pointer in `Logger` class to avoid repeated function\n  calls. On Linux, this is now further optimised with `__thread` for thread-local storage, while other platforms still\n  use `thread_local`.\n- Minor performance enhancement in the frontend by replacing `std::vector<size_t>` with an `InlinedVector<uint32_t, 12>`\n  for caching sizes (e.g. string arguments).\n- Fixed order of evaluation for `Codec::pair<T1,T2>::compute_encoded_size()` to prevent side effects observed on MSVC\n- Introduced the `add_metadata_to_multi_line_logs` option in `PatternFormatter`. This option, now enabled by default,\n  appends metadata such as timestamps and log levels to every line of multiline log entries, ensuring consistent log\n  output. To restore the previous behavior, set this option to false when creating a `Logger`\n  using `Frontend::create_or_get_logger(...)`. Note that this option is ignored when logging JSON using named arguments\n  in the format message. ([#534](https://github.com/odygrd/quill/pull/534))\n- `JSON` sinks now automatically remove any `\\n` characters from format messages, ensuring the emission of valid `JSON`\n  messages even when `\\n` is present in the format.\n- Replaced `static` variables with `static constexpr` in the `ConsoleColours` class.\n- Fixed compiler errors in a few rarely used macros. Added a comprehensive test for all macros to prevent similar issues\n  in the future.\n- Expanded terminal list for color detection in console applications on Linux\n- Fixed an issue where `char*` and `char[]` types could be incorrectly selected by the Codec template in `Array.h`\n- The library no longer defines `__STDC_WANT_LIB_EXT1__`, as the bounds-checking functions from the extensions are no\n  longer needed.\n- `StringFromTime` constructor no longer relies on the system's current time, improving performance in simulations where\n  timestamps differ from system time. ([#541](https://github.com/odygrd/quill/issues/541))\n- The `Frontend::create_or_get_logger(...)` function now accepts a `PatternFormatterOptions` parameter, simplifying the\n  API. This is a breaking change. To migrate quickly, wrap the existing formatting parameters in a\n  `PatternFormatterOptions` object.\n\n  **Before:**\n  ```c++\n    quill::Logger* logger =\n      quill::Frontend::create_or_get_logger(\"root\", std::move(file_sink),\n                                            \"%(time) [%(thread_id)] %(short_source_location:<28) \"\n                                            \"LOG_%(log_level:<9) %(logger:<12) %(message)\",\n                                            \"%H:%M:%S.%Qns\", quill::Timezone::GmtTime);\n  ```\n\n  **After:**\n\n  ```c++\n    quill::Logger* logger =\n      quill::Frontend::create_or_get_logger(\"root\", std::move(file_sink), quill::PatternFormatterOptions {\n                                            \"%(time) [%(thread_id)] %(short_source_location:<28) \"\n                                            \"LOG_%(log_level:<9) %(logger:<12) %(message)\",\n                                            \"%H:%M:%S.%Qns\", quill::Timezone::GmtTime});\n  ```\n\n## v6.1.2\n\n- Fix pkg-config file on windows\n\n## v6.1.1\n\n- Fix pkg-config file\n\n## v6.1.0\n\n- Fix various compiler warnings\n- Minor serialisation improvements in `Array.h` and `Chrono.h`\n- Introduced `Backend::acquire_manual_backend_worker()` as an advanced feature, enabling users to manage the backend\n  worker on a custom thread. This feature is intended for advanced use cases where greater control over threading is\n  required. ([#519](https://github.com/odygrd/quill/issues/519))\n- Add new `CsvWriter` utility class for asynchronous CSV file writing. For example:\n  ```c++\n  #include \"quill/Backend.h\"\n  #include \"quill/core/FrontendOptions.h\"\n  #include \"quill/CsvWriter.h\"\n  \n  struct OrderCsvSchema\n  {\n    static constexpr char const* header = \"order_id,symbol,quantity,price,side\";\n    static constexpr char const* format = \"{},{},{},{:.2f},{}\";\n  };\n  \n  int main()\n  {\n    quill::BackendOptions backend_options;\n    quill::Backend::start(backend_options);\n    \n    quill::CsvWriter<OrderCsvSchema, quill::FrontendOptions> csv_writer {\"orders.csv\"};\n    csv_writer.append_row(13212123, \"AAPL\", 100, 210.32321, \"BUY\");\n    csv_writer.append_row(132121123, \"META\", 300, 478.32321, \"SELL\");\n    csv_writer.append_row(13212123, \"AAPL\", 120, 210.42321, \"BUY\");\n  }\n  ```\n\n## v6.0.0\n\n- Added a [Cheat Sheet](https://quillcpp.readthedocs.io/en/latest/cheat_sheet.html) to help users get the most out of\n  the logging library\n\n- Removed `ArgSizeCalculator<>`, `Encoder<>`, and `Decoder<>` classes. These have been consolidated into a\n  single `Codec` class. Users who wish to pass user-defined objects should now specialize this single `Codec` class\n  instead of managing three separate classes. For guidance, please refer to the updated advanced example\n\n- Added `TriviallyCopyableCodec.h` to facilitate serialization for trivially copyable user-defined types. For example\n\n  ```c++\n    struct TCStruct\n    {\n      int a;\n      double b;\n      char c[12];\n      \n      friend std::ostream& operator<<(std::ostream& os, TCStruct const& arg)\n      {\n        os << \"a: \" << arg.a << \", b: \" << arg.b << \", c: \" << arg.c;\n        return os;\n      }\n    };\n    \n    template <>\n    struct fmtquill::formatter<TCStruct> : fmtquill::ostream_formatter\n    {\n    };\n    \n    template <>\n    struct quill::Codec<TCStruct> : quill::TriviallyCopyableTypeCodec<TCStruct>\n    {\n    };\n    \n    int main()\n    {\n      // init code ...\n      \n      TCStruct tc;\n      tc.a = 123;\n      tc.b = 321;\n      tc.c[0] = '\\0';\n      LOG_INFO(logger, \"{}\", tc);\n    }\n  ```\n\n- Added support for passing arithmetic or enum c style arrays when `std/Array.h` is included. For example\n\n  ```c++\n    #include \"quill/std/Array.h\"\n  \n    int a[6] = {123, 456};\n    LOG_INFO(logger, \"a {}\", a);\n  ```\n\n- Added support for `void const*` formatting. For example\n\n  ```c++\n      int a = 123;\n      int* b = &a;\n      LOG_INFO(logger, \"{}\", fmt::ptr(b));\n  ```\n\n- Added support for formatting `std::chrono::time_point` and `std::chrono::duration` with the inclusion\n  of `quill/std/Chrono.h`\n\n   ```c++\n   #include \"quill/std/Chrono.h\"\n  \n   std::chrono::system_clock::time_point now = std::chrono::system_clock::now();\n   LOG_INFO(logger, \"time is {}\", now);\n   ```\n\n- Removed unused method from `ConsoleSink`\n\n## v5.1.0\n\n- Fix unit tests on FreeBSD ([#496](https://github.com/odygrd/quill/issues/496))\n- Resolved unused variable warning on MSVC.\n- Updated CMake to avoid adding `-fno-exceptions` to the entire target\n  when `QUILL_NO_EXCEPTIONS=ON` ([#499](https://github.com/odygrd/quill/issues/499))\n- Fix an issue where timestamps were incorrectly calculated when using `quill::Timezone::LocalTime`. This bug affected\n  timezones that did not have an exact hour difference from UTC, leading to incorrect timestamp\n  calculations. ([#498](https://github.com/odygrd/quill/issues/498))\n- The newline character `\\n` is now considered printable by default and will no longer be sanitized. Users can now\n  include new lines in their logs directly. In versions `4.4.1` and earlier, `\\n` was not sanitized, and this behavior\n  is restored in this update, eliminating the need for a custom `check_printable_char` function in `BackendOptions`.\n- On Windows, when colors are enabled in `ConsoleSink`, `GetConsoleScreenBufferInfo` may fail in the debug console.\n  Previously, this would result in an error being displayed but no logs being written. This issue is now resolved: the\n  error is reported once, and logs will be written to the console without colors.\n- Improved performance of `StringFromTime` and `TimestampFormatter` used by the backend worker thread.\n- Replaced `std::mutex` with a spinlock, resulting in minor performance improvement for backend worker. This change\n  also avoids including `<mutex>` in the frontend, particularly when following the\n  [recommended_usage](https://github.com/odygrd/quill/blob/master/examples/recommended_usage/recommended_usage.cpp)\n  example\n- Update bundled `libfmt` to `11.0.2`\n\n## v5.0.0\n\n- Fix build failure on Windows Arm64 ([#485](https://github.com/odygrd/quill/issues/485))\n- Previously, wide string support was included in `Codec.h`. Wide string functionality has now been moved to a separate\n  header file, `WideStrings.h`. On Windows, logging wide strings now requires the inclusion\n  of `quill/std/WideStrings.h`.\n- Added `QUILL_IMMEDIATE_FLUSH` preprocessor variable. This variable can be defined before including `LogMacros.h` or\n  passed as a compiler flag. When `QUILL_IMMEDIATE_FLUSH` is defined, the library will flush the log on each log\n  statement. This causes the caller thread to wait for the log to be processed and written to the log file by the\n  backend thread before continuing, significantly impacting performance. This feature is useful for debugging the\n  application when synchronized logs are required. ([#488](https://github.com/odygrd/quill/issues/488))\n- Introduced `log_level_descriptions` and `log_level_short_codes` in `BackendOptions` to allow customization\n  of `LogLevel` descriptions and short codes, replacing previously hardcoded values. This enhancement enables users to\n  define their own descriptions and short codes for each log level. For instance, instead of displaying `LOG_WARNING`,\n  it can now be configured to show `LOG_WARN`. ([#489](https://github.com/odygrd/quill/issues/489))\n\n    ```c++  \n    quill::BackendOptions backend_options;\n    backend_options.log_level_descriptions[static_cast<uint32_t>(quill::LogLevel::Warning)] = \"WARN\";\n    quill::Backend::start(backend_options);\n    ```\n\n- Introduced `LOGV_LEVEL`, `LOGV_LEVEL_LIMIT`, and `LOGV_LEVEL_WITH_TAGS` macros. These new macros simplify logging by\n  automatically printing variable names and values without explicitly specifying each variable name or using `{}`\n  placeholders in the format string. Each macro can handle up to 26 arguments. The format string is concatenated at\n  compile time, there is no runtime overhead for using these macros. For example:\n\n  ```c++\n    int a = 123;\n    double b = 3.17;\n    LOGV_INFO(logger, \"A message with two variables\", a, b)\n  ```\n  outputs `A message with two variables [a: 123, b: 3.17]`\n\n- Introduced `LOGJ_LEVEL`, `LOGJ_LEVEL_LIMIT`, and `LOGJ_LEVEL_WITH_TAGS` macros. These new macros simplify JSON logging\n  by automatically embedding the name of each passed variable as a named argument in the format string. Each macro can\n  handle up to 26 arguments. The format string is concatenated at compile time, there is no runtime overhead for using\n  these macros. For example:\n\n  ```c++\n    int var_a = 123;\n    std::string var_b = \"test\";\n    LOGJ_INFO(logger, \"A json message\", var_a, var_b);\n  ```\n  outputs `{\"log_level\":\"INFO\",\"message\":\"A json message {var_a}, {var_b}\",\"var_a\":\"123\",\"var_b\":\"test\"}`\n\n- Enhanced the `filter` function to also receive the formatted `log_message` alongside the log_statement, enabling the\n  comparison and filtering of `log_message` while disregarding elements like timestamps from the\n  full `log_statement`. ([#493](https://github.com/odygrd/quill/issues/493))\n\n- Renamed `log_message` to `log_statement` and `should_log_message` to `should_log_statement` in `Logger`\n- Replaced `%(log_level_id)` with `%(log_level_short_code)` in the `PatternFormatter`.\n\n- Fix a `CMakeLists` error for old `CMake` versions prior\n  to `3.19`. ([#491](https://github.com/odygrd/quill/issues/491))\n\n## v4.5.0\n\n- The backend now automatically sanitizes non-printable characters in log messages by converting them to\n  their hexadecimal representation. This feature ensures logs contain only safe, readable characters. You can customize\n  or disable this feature through the backend options by modifying the `check_printable_char` callback\n  in `BackendOptions`.\n\n  ```c++  \n  std::function<bool(char c)> check_printable_char = [](char c) { return c >= ' ' && c <= '~'; };\n  ```\n\n- Added `StringRef`, a utility for passing string arguments by reference without copying. Suitable for string literals\n  or immutable strings with a guaranteed persistent lifetime. For example\n\n  ```c++  \n  #include \"quill/StringRef.h\"\n  \n  static constexpr std::string_view sv {\"string_view\"};\n  LOG_INFO(logger, \"{} {}\", quill::utility::StringRef{sv}, quill::utility::StringRef{\"string_literal\"});\n  ```\n\n- Renamed `write_log_message` to `write_log` in `Sink`. The formatted `log_message` and `process_id` are now also\n  provided. This enhancement supports use cases where the formatted `log_statement` passed to the `Sink` can be ignored\n  and overwritten with a custom format, allowing a single `Logger` to output different formats to various Sinks.\n  ([#476](https://github.com/odygrd/quill/issues/476))\n\n- Fixed a bug in JSON logging where previously cached named arguments could erroneously append to subsequent log\n  statements. ([#482](https://github.com/odygrd/quill/issues/482))\n\n## v4.4.1\n\n- Fixed multiple definitions of `quill::detail::get_error_message` ([#469](https://github.com/odygrd/quill/issues/469))\n- Fixed an issue causing a `SIGABRT` when creating directories with a symlink folder path using GCC versions 8 or\n  9 ([#468](https://github.com/odygrd/quill/issues/468))\n- Added an assertion to prevent the use of custom `FrontendOptions` together with\n  default `FrontendOptions` ([#453](https://github.com/odygrd/quill/issues/453))\n\n## v4.4.0\n\n- Introduced `log_timestamp_ordering_grace_period parameter`, replacing `enable_strict_log_timestamp_order` in\n  `BackendOptions`. Enables strict timestamp ordering with configurable grace period.\n- Fixed an issue where symbols were not properly exported with hidden visibility when compiling as a shared\n  library. ([#463](https://github.com/odygrd/quill/issues/463))\n- Move version info into quill namespace ([#465](https://github.com/odygrd/quill/issues/465))\n- Upstreamed `Meson` build integration. See details [here](https://github.com/odygrd/quill?tab=readme-ov-file#meson)\n- Upstreamed `Bazel` build integration. See details [here](https://github.com/odygrd/quill?tab=readme-ov-file#bazel)\n\n## v4.3.0\n\n- Refactored `BacktraceStorage` to simplify the code.\n- Fixed multiple definitions of `on_alarm` in `SignalHandler.h`\n- Fixed a bug in the backend thread where `flush()` and `run_periodic_tasks()` were skipped for certain sinks. All sinks\n  are now correctly processed.\n\n## v4.2.1\n\n- Added `-Wno-gnu-zero-variadic-macro-arguments` as an interface compiler flag in CMake\n\n## v4.2.0\n\n- Fixed the compile-time exclusion of log levels. Renamed the `QUILL_COMPILE_OUT_LOG_LEVEL` preprocessor\n  flag to `QUILL_COMPILE_ACTIVE_LOG_LEVEL`.\n- Fixed build error when `UnboundedDropping` queue is used.\n- Fixed a bug introduced in `v4.1.0`, which resulted in messages being logged out of order when\n  the `transit_events_soft_limit` was reached. Additionally, this issue affected the behavior of `flush_log()`,\n  prematurely unblocking the thread before all messages were flushed.\n- Fixed `-Wno-unused-parameter` and `-Wdocumentation` warnings.\n- Improved backend worker `_exit()` functionality and reduced code duplication in other areas of the backend worker\n  code.\n- Added `signal_handler_timeout_seconds` parameter, which controls the timeout duration for the signal handler. Only\n  available on Linux platforms.\n- Added `sleep_duration_ns` parameter to the `flush_log(...)` function. This parameter specifies the duration in\n  nanoseconds to sleep between retries between checks for the flush completion and when a blocking queue is used,\n  and it is full. The default sleep duration is 100 nanoseconds, but users can now customize this duration according to\n  their needs. If a zero sleep duration is passed, the thread might yield instead.\n- Removed uses of `std::this_thread::sleep_for(...)`, `std::string`, `std::vector` in the signal handler when waiting\n  for\n  the log to be flushed.\n\n## v4.1.0\n\n- Following the transition from a compiled to a header-only library, the `target_compile_options` previously applied to\n  the compiled library were mistakenly propagated to all programs linking against the header-only library.\n  This issue is now fixed by removing those flags and explicitly adding them to tests and examples. As a result,\n  executable targets no longer inherit flags from the library.\n- Removed unnecessary template specializations and merged their logic into the primary template\n  for `ArgSizeCalculator`, `Encoder`, and `Decoder` using if constexpr.\n- Eliminated `<functional>` header dependency in the frontend\n- Replaced `%(structured_keys)` with `%(named_args)` in the `PatternFormatter`. This change now appends the\n  entire key-value pair of named args to the message, not just the names.\n- Relocated certain classes to the `detail` namespace\n- Replaced `sprintf` with `snprintf` to fix macOS warning.\n- Reviewed and removed gcc cold attribute from a few functions.\n- Minor backend thread optimisations when logging c style strings or char arrays\n- Improved backend thread variable and function names and fixed a bug for an edge case when the transit event hard limit\n  is reached\n\n## v4.0.0\n\nThis version represents a major revamp of the library, aiming to simplify and modernize it, resulting in the removal\nof a few features. Please read through the changes carefully before upgrading, as it is not backwards compatible with\nprevious versions and some effort will be required to migrate.\n\nI understand that these changes may inconvenience some existing users. However, they have been made with good\nintentions, aiming to improve and refine the logging library. This involved significant effort and dedication.\n\nBug fixes and releases for `v3` will continue to be supported under the `v3.x.x` branch.\n\n#### Comparison\n\n- This version significantly improves compile times. Taking a look at some compiler profiling for a `Release` build with\n  clang 15, we can see the difference. Below are the two compiler flamegraphs for building the `recommended_usage`\n  example from the new version and the `wrapper_lib` example from the previous version.\n\nThe below flamegraph shows the difference in included headers between the two versions\n\n| Version |                                                          Compiler FlameGraph                                                           |\n|---------|:--------------------------------------------------------------------------------------------------------------------------------------:|\n| v4.0.0  | ![quill_v4_compiler_profile.speedscope.png](https://github.com/odygrd/quill/blob/master/docs/quill_v4_compiler_profile.speedscope.png) |\n| v3.8.0  | ![quill_v3_compiler_profile.speedscope.png](https://github.com/odygrd/quill/blob/master/docs/quill_v3_compiler_profile.speedscope.png) |\n\nA new compiler benchmark has been introduced. A Python script generates 2000 distinct log statements with various\narguments. You can find the\nbenchmark [here](https://github.com/odygrd/quill/blob/master/benchmarks/compile_time/compile_time_bench.cpp).\nCompilation now takes only about 30 seconds, whereas the previous version required over 4 minutes.\n\n| Version |                                                         Compiler FlameGraph                                                          |\n|---------|:------------------------------------------------------------------------------------------------------------------------------------:|\n| v4.0.0  |  ![quill_v4_compiler_bench.speedscope.png](https://github.com/odygrd/quill/blob/master/docs/quill_v4_compiler_bench.speedscope.png)  |\n| v3.8.0  | ![quill_v3_compiler_bench.speedscope.png](https://github.com/odygrd/quill/blob/master/docs/quill_v4_compiler_profile.speedscope.png) |\n\n- Minor increase in backend thread throughput compared to the previous version.\n\n| Version |                                 Backend Throughput                                 |\n|---------|:----------------------------------------------------------------------------------:|\n| v4.0.0  | 4.56 million msgs/sec average, total time elapsed: 876 ms for 4000000 log messages |\n| v3.8.0  | 4.39 million msgs/sec average, total time elapsed: 910 ms for 4000000 log messages |\n\n- Significant boost in hot path latency when logging complex types such as `std::vector`.\n  The performance remains consistent when logging only primitive types or strings in both versions. Refer\n  [here](https://github.com/odygrd/quill?tab=readme-ov-file#performance) for updated and detailed benchmarks.\n\n#### Changes\n\n- **Improved compile times**\n\nThe library has been restructured to minimize the number of required headers. Refactoring efforts have focused on\ndecoupling the frontend from the backend, resulting in reduced dependencies. Accessing the frontend logging functions\nnow does not demand inclusion of any backend logic components.\n\n     \"quill/Backend.h\" - It can be included once to start the backend logging thread, typically in main.cpp \n                         or in a wrapper library.\n     \n     \"quill/Frontend.h\"` - Used to create or obtain a `Logger*` or a `Sink`. It can be included in limited \n                           files, since an obtained `Logger*` has pointer stability and can be passed around.\n     \n     \"quill/Logger.h\", \"quill/LogMacros.h\" - These two files are the only ones needed for logging and will have \n                                             to be included in every file that requires logging functionality.\n\n- **Backend formatting for user-defined and standard library types**\n\nOne of the significant changes lies in the support for formatting both user-defined and standard library types.\nPreviously, the backend thread handled the formatting of these types sent by the frontend. It involved making a copy for\nany object passed to the `LOG_` macros as an argument using the copy constructor of a complex type instead of directly\nserializing the data to the SPSC queue. While this method facilitated logging copy-constructible user-defined types with\nease, it also posed numerous challenges for asynchronous logging:\n\n- Error-Prone Asynchronous Logging: Copying and formatting user-defined types on the backend thread in an\n  asynchronous logging setup could lead to errors. Previous versions attempted to address this issue with type\n  trait checks, which incurred additional template instantiations and compile times.\n- Uncertainty in Type Verification: It is challenging to confidently verify types, as some trivially copiable\n  types, such as `struct A { int* m; }`, could still lead to issues due to potential modifications by the user\n  before formatting.\n- Hidden Performance Penalties: Logging non-trivially copiable types could introduce hidden cache coherence\n  performance penalties due to memory allocations and deallocations across threads. For instance,\n  consider `std::vector<int>` passed as a log argument. The vector is emplaced into the SPSC queue by the frontend,\n  invoking the copy constructor dynamically allocating memory as the only members copied to SPSC queue\n  are `size`, `capacity`, and `data*`. The backend thread reads the object, formats it, and then invokes the destructor,\n  which in turn synchronizes the\n  freed memory back to the frontend.\n\nAdditionally, after years of professional use and based on experience, it has been observed that user-defined types\nare often logged during program initialization, with fewer occurrences on the hot path where mostly built-in types are\nlogged. In such scenarios, the overhead of string formatting on the frontend during initialization is not an issue.\n\nIn this new version, the use of the copy constructor for emplacing objects in the queue has been abandoned. Only POD\ntypes are copied, ensuring that only raw, tangible data is handled without any underlying pointers pointing to other\nmemory locations. The only exception to this are the pointers to `Metadata`, `LoggerBase` and `DecodeFunction`\nthat are passed internally for each log message. Log arguments sent from the frontend must undergo\nserialization beforehand. While this approach resolves the above issues, it does introduce more complexity when\ndealing with user-defined or standard library types.\n\nBuilt-in types and strings are logged by default, with the formatting being offloaded to the backend. Additionally,\nthere is built-in support for most standard library types, which can also be directly passed to the logger by\nincluding the relevant header from `quill/std`.\n\nThe recommendation for user-defined types is to format them into strings before passing them to the `LOG_` macros using\nyour preferred method. You can find an example of\nthis [here](https://github.com/odygrd/quill/blob/master/examples/user_defined_types_logging.cpp).\n\nIt's also possible to extend the library by providing template specializations to serialize the user-defined types\nand offload their formatting to the backend. However, this approach should only be pursued if you cannot tolerate the\nformatting overhead in that part of your program. For further guidance, refer\nto [this example](https://github.com/odygrd/quill/blob/master/examples/advanced/advanced.cpp).\n\n- **Header-Only library**\n\nThe library is now header-only. This change simplifies exporting the library as a C++ module in the future. See\n[here](https://github.com/odygrd/quill/blob/master/examples/recommended_usage/recommended_usage.cpp) on how to build a\nwrapper static library which includes the backend and will minimise the compile times.\n\n- **Preprocessor flags moved to template parameters**\n\nMost preprocessor flags have been moved to template parameters, with only a few remaining as `CMake` options. This\nchange simplifies exporting the library as a C++ module in the future.\n\n- **Renamed Handlers to Sinks**\n\nTo enhance clarity, handlers have been renamed to sinks.\n\n- **PatternFormatter moved to Logger**\n\nThe `PatternFormatter` has been relocated from `Sink` to `Logger`, enabling a logger object to log in a specific\nformat. This allows for different formats within the same output file, a feature not previously possible.\n\n- **Split Configuration**\n\nThe configuration settings have been divided into `FrontendOptions` and `BackendOptions`.\n\n- **Refactoring of backend classes**\n\n`MacroMetadata` and many backend classes have undergone refactoring, resulting in reduced memory requirements.\n\n- **Improved wide strings handling on Windows**\n\nThe library now offers significant performance enhancements for handling wide strings on Windows platforms.\nIt's important to note that only wide strings containing ASCII characters are supported. Previously, wide strings were\nconverted to narrow strings at the frontend, impacting the critical path of the application.\nWith this update, the underlying wide char buffer is copied and the conversion to UTF-8 encoding is deferred to\nthe backend logging thread. Additionally, this update adds support for logging STL containers consisting of\nwide strings\n\n- **Default logger removal**\n\nThe default logger, along with the configuration inheritance feature during logger creation, has been removed. Now, when\ncreating a new logger instance, configurations such as the `Sink` and log pattern format must be explicitly specified\neach time. This simplifies the codebase.\n\n- **Global logger removal**\n\nThe static global logger* variable that was initialised during `quill::start()` used to obtain the default logger has\nbeen removed. It is possible to add this on the user side. If you require a global logger you can have a look\nat [this example](https://github.com/odygrd/quill/blob/master/examples/recommended_usage/recommended_usage.cpp)\n\n- **Removal of printf style formatting support**\n\nThe support for `printf` style formatting has been removed due to its limited usage and the increased complexity. Users\nrequiring this feature should stay on `v3.x.x` versions to maintain compatibility.\n\n- **Removal of external libfmt usage**\n\nThe option to build the library with external `libfmt` has been removed. It becomes difficult to maintain and backwards\nsupport previous versions of `libfmt`. Instead, `libfmt` is now an internal component of the library, accessible under\nthe namespace `fmtquill`. You can use the bundled version of `fmtquill` by including the necessary headers from\n`quill/bundled/fmt`. Alternatively, you have the freedom to integrate your own version. Since `libfmt` is encapsulated\nwithin a distinct namespace, there are no conflicts even if you link your own `libfmt` alongside the logging library.\n\n#### Migration Guidance\n\n- Revise include files to accommodate the removal of `Quill.h`\n- Update the code that starts the backend thread and the logger/sink creation. You can refer to any of the\n  updated examples, such as [this one](https://github.com/odygrd/quill/blob/master/examples/file_logging.cpp)\n- When logging statements involving user-defined types, make sure these types are formatted into strings using\n  your preferred method. Refer to\n  [this link](https://github.com/odygrd/quill/blob/master/examples/user_defined_types_logging.cpp) for guidance.\n  Alternatively, if you prefer delaying the conversion to strings until the backend thread and only passing a\n  binary copy of the user-defined type on the hot path, you can provide the necessary class template\n  specializations for each user-defined type. See an example\n  [here](https://github.com/odygrd/quill/blob/master/examples/advanced/user_quill_codec.h)\n\n## v3.9.0\n\n- Fix bug in `ConsoleHandler` when dynamic log level is used ([#421](https://github.com/odygrd/quill/pull/421))\n- Fix bug in `TransitEvent` when dynamic log level is used ([#427](https://github.com/odygrd/quill/pull/427))\n- Fix build error for Intel compiler classic ([#414](https://github.com/odygrd/quill/pull/414))\n- Added `JsonConsoleHandler` ([#413](https://github.com/odygrd/quill/issues/413))\n- Fix fold expression argument evaluation. This bug could occur when logging c style strings\n\n## v3.8.0\n\n- Refactored `MacroMetadata` class to reduce its size.\n- Renamed some attributes in the `PatternFormatter` class for clarity. If you are using a custom format pattern, update\n  the attribute names in your code to match the new names.\n- Improved accuracy of log statement timestamps. Previously, the timestamp was taken after checking if the queue had\n  enough space to push the message, which could make it less accurate. Additionally, in the case of a blocking queue,\n  the timestamp could be later in time. Now, the timestamp is taken and stored right after the log statement is issued,\n  before checking for the queue size.\n- Reduced template instantiations during logging operations on the hot path. Fold expressions are now used for\n  encoding/decoding arguments, minimizing template recursion overhead.\n- Removed compile-time format checks due to their significant impact on template instantiations, especially considering\n  that only a few cases are invalid. For instance, while `fmt::format(\"{}\", 1, 2)` is considered valid,\n  `fmt::format(\"{} {}\", 1)` is deemed invalid. In cases where an invalid format string is detected, the backend worker\n  thread catches the generated exception and logs an error.\n- The throughput of the backend worker thread has been improved by approximately 5%. This enhancement is reflected in\n  the new throughput value of 4.20 million msgs/sec, compared to the previous throughput of 3.98 million msgs/sec.\n- Detect `tmux` as colour terminal. ([#410](https://github.com/odygrd/quill/issues/410))\n\n## v3.7.0\n\n- Fixed crash triggered by insufficient space in the queue upon invocation\n  of ``flush()``. ([#398](https://github.com/odygrd/quill/pull/398))\n- Fixed windows clang-cl build error. ([#400](https://github.com/odygrd/quill/pull/400))\n- Fixed compilation errors encountered on FreeBSD and extended ``get_thread_id()`` support to various other BSD\n  operating systems. ([#401](https://github.com/odygrd/quill/pull/401))\n- Fix open_file in the FileHandler to also create the parent path before opening the\n  file. ([#395](https://github.com/odygrd/quill/issues/395))\n- Enhance logic for backend thread's flush() invocation; it now triggers only if the handler has previously written\n  data. ([#395](https://github.com/odygrd/quill/issues/395))\n- Address an uncaught exception in the backend thread that could occur when a user manually removes the log file from\n  the terminal while the logger is running. ([#395](https://github.com/odygrd/quill/issues/395))\n- Ensure that after a logger is removed, there are no subsequent calls to the Handler's flush() or run_loop(), provided\n  the Handler is not shared. ([#395](https://github.com/odygrd/quill/issues/395))\n- Ignore the virtual destructor missing warning for the `CustomTags`\n  class. ([#402](https://github.com/odygrd/quill/pull/402))\n- Update bundled `libfmt` to `v10.2.1`\n\n## v3.6.0\n\n- Fixed `QUILL_LOGGER_CALL_NOFN_LIMIT` macros. ([#381](https://github.com/odygrd/quill/pull/381))\n- Resolved a bug that caused reading destructed arguments when structured logging format was used.\n- Modified member access from `private` to `protected` in `ConsoleHandler` for potential inheritance purposes.\n- Eliminated redundant whitespaces within `JsonFileHandler`.\n- Fixed `JsonFileHandler` to notify the file event notifier before log message writes.\n- Implemented a new attribute called `%(structured_keys)` within the `PatternFormatter` to facilitate the inclusion\n  of keys in messages when using structured log formatting. This addition is useful for instances where logging occurs\n  in both JSON and regular log formats, enabling the display of keys within the regular log-formatted messages.\n  See\n  updated [example_json_structured_log.cpp](https://github.com/odygrd/quill/blob/master/examples/example_json_structured_log.cpp)\n\n## v3.5.1\n\n- Resolved issue with accessing the `name()` method within the `Logger`\n  class. ([#378](https://github.com/odygrd/quill/pull/378))\n- Fixed a compilation error in `SignalHandler` specific to Windows when `QUILL_DISABLE_NON_PREFIXED_MACROS` is\n  defined. ([#380](https://github.com/odygrd/quill/pull/380))\n\n## v3.5.0\n\n- Fixed `LOG_TRACE_CFORMAT` macros.\n- Added support for compile-time custom tags in `quill::MacroMetadata` to enhance message filtering and incorporate\n  static information. New log macros suffixed with `_WITH_TAGS` introduced for this feature.\n  Additionally, `%(custom_tags)` parameter added\n  to `PatternFormatter`. ([#349](https://github.com/odygrd/quill/issues/349))\n  See [example_custom_tags.cpp](https://github.com/odygrd/quill/blob/master/examples/example_custom_tags.cpp)\n- Improvements to reduce compilation time\n\n## v3.4.1\n\n- Reduce backend worker unnecessary allocation. ([#368](https://github.com/odygrd/quill/issues/368))\n- Adjusted handling for empty `std::string_view` instances, addressing an issue where logging empty strings triggered an\n  unintended `memcpy` with zero size and a nullptr, leading to address sanitizer warnings.\n- Fix clang build error when using `-DQUILL_NO_EXCEPTIONS:BOOL=ON`. ([#357](https://github.com/odygrd/quill/issues/357))\n\n## v3.4.0\n\n- Resolved `bad_variant_access` error occurring when using Quill as a pre-compiled library with a distinct queue\n  type. ([#276](https://github.com/odygrd/quill/pull/276))\n\n- Resolved a bug in `RotatingFileHandler` associated with logfiles located outside the working directory,\n  specifically when used with open_mode `a`. ([#340](https://github.com/odygrd/quill/pull/340))\n\n- Added a `name()` method to the Logger class which provides the logger\n  name. ([#345](https://github.com/odygrd/quill/pull/345))\n\n- Fixed library and include paths in the pkg-config configuration. ([#352](https://github.com/odygrd/quill/pull/352))\n\n- Move `get_root_logger()` definition from cpp to the header file ([#348](https://github.com/odygrd/quill/issues/348))\n\n- Introduced support for logging character arrays. You can now log character arrays, even when they don't contain a\n  null-terminating character.\n  Additionally, character arrays with null characters in the middle are supported, and the logger will\n  capture the content until the null character is encountered. ([#353](https://github.com/odygrd/quill/pull/353))\n\n  For example\n\n  ```c++\n      union\n    {\n      char no_0[2];\n      char mid_0[6]{'1', '2', '3', '4', '\\0', 6};\n    } char_arrays;\n\n    // only output \"12\" even if there's no '\\0' at the end\n    LOG_INFO(logger, R\"(This is a log info example for char array without '\\0': {})\", char_arrays.no_0);\n\n    // output \"1234\" until the '\\0'\n    LOG_INFO(logger, R\"(This is a log info example for char array with '\\0' in middle: {})\",\n             char_arrays.mid_0);\n  ```\n\n- Minor improvements in the bounded queue and throughput. ([#362](https://github.com/odygrd/quill/pull/362))\n\n  Previous: 2.21 million msgs/sec average, total time elapsed: 1809 ms for 4000000 log messages.\n\n  New:      2.24 million msgs/sec average, total time elapsed: 1787 ms for 4000000 log messages.\n\n- Disable `fmt::join(data, \"\")` at compile time. ([#356](https://github.com/odygrd/quill/issues/356))\n- Fix compile error in Apple Clang 12. ([#360](https://github.com/odygrd/quill/issues/360))\n- Add guards for redefined preprocessor variables.\n- Fix `uint64_t` to `time_t` implicit conversion error in Clang 18.\n- Update bundled `libfmt` to `v10.1.1`\n\n## v3.3.1\n\n- Fixed `RotatingFileHandler` to prevent accidental removal of non-log files when using open mode `w`\n  and `set_remove_old_files(true)`\n\n## v3.3.0\n\n- Added a `quill::get_handler(handler_name)` function that allows easy lookup of an existing `Handler` by name. This\n  function proves helpful when you want to retrieve a handler and pass it to a new logger.\n\n- Fix build failure of Intel Compiler Classic. ([#332](https://github.com/odygrd/quill/pull/332))\n\n- Introduced `QUILL_BLOCKING_QUEUE_RETRY_INTERVAL_NS` option for user-configurable retry interval in the blocking queue.\n  Default value is 800 nanoseconds. ([#330](https://github.com/odygrd/quill/pull/330))\n\n- Improved backend thread handling. Now verifies that all producer SPSC queues are empty before entering `sleep`.\n\n- Fixed a race condition and potential crash in `quill::remove_logger(Logger*)` when called without\n  prior `quill::flush()`.\n\n- Added protection to prevent removal of the root logger with `quill::remove_logger(Logger*)`.\n\n- Improved exception handling on the backend thread when calling `fmt::format()`.\n\n  While compile-time checks ensure that the format string and arguments match, runtime errors can still occur.\n  Previously, such exceptions would affect and drop subsequent log records. Now, exceptions are caught and logged\n  in the log file and reported via the backend thread notification handler (default is `cerr`).\n\n  For example, if a dynamic precision is used (`LOG_INFO(logger, \"Support for floats {:.{}f}\", 1.23456, 3.321312)`),\n  the log file will show the following error message:\n\n  ```\n  LOG_INFO root [format: \"Support for floats {:.{}f}\", error: \"precision is not integer\"]\n  ```\n\n  Additionally, an error message will be printed to `cerr`\n\n  ```\n  Quill ERROR: [format: \"Support for floats {:.{}f}\", error: \"precision is not integer\"]\n  ```\n\n- Fixed a bug in timestamp formatting that occasionally displayed an hour component of 0 as\n  24. ([#329](https://github.com/odygrd/quill/pull/329))\n\n- Added support for specifying a runtime log level, allowing dynamic log level configuration at runtime.\n  The new runtime log level feature provides flexibility when needed, with a minor overhead cost.\n  It is recommended to continue using the existing static log level macros for optimal\n  performance. ([#321](https://github.com/odygrd/quill/pull/321))\n\n  For example\n\n  ```c++\n    std::array<quill::LogLevel, 4> const runtime_log_levels = {quill::LogLevel::Debug,\n                                                               quill::LogLevel::Info,\n                                                               quill::LogLevel::Warning,\n                                                               quill::LogLevel::Error};\n  \n    for (auto const& log_level : runtime_log_levels)\n    {\n      LOG_DYNAMIC(logger, log_level, \"Runtime {} {}\", \"log\", \"level\");\n    }\n  ```\n\n- Added support for printf-style formatting with `_CFORMAT` macros. These macros use the `printf` format string syntax,\n  simplifying the migration of legacy codebases using `printf` statements.\n\n  For example\n\n  ```c++\n    std::array<uint32_t, 4> arr = {1, 2, 3, 4};\n    LOG_INFO(logger, \"This is a log info example using fmt format {}\", arr);\n    \n    LOG_INFO_CFORMAT(logger, \"printf style %s supported %d %f\", \"also\", 5, 2.32);\n  ```\n\n- Added a `metadata()` member function to the `TransitEvent` class. It provides access to the `Metadata` object\n  associated with the log record, simplifying syntax for retrieving log record metadata in custom Handlers.\n\n  For example\n\n  ```c++\n  void CustomHandler::write(fmt_buffer_t const& formatted_log_message, quill::TransitEvent const& log_event)\n  {\n    MacroMetadata const macro_metadata = log_event.metadata();\n  }\n  ```\n\n- Simplified file handler configuration. Now, instead of passing multiple arguments to the constructor,\n  you only need to provide a single `FileHandlerConfig` object. This change makes creating file handlers objects\n  much easier and more flexible.\n\n  For example\n\n  ```c++\n  quill::FileHandlerConfig file_handler_cfg;\n  file_handler_cfg.set_open_mode('w');\n  file_handler_cfg.set_append_to_filename(quill::FilenameAppend::StartDateTime);\n  \n  std::shared_ptr<quill::Handler> file_handler = quill::file_handler(\"application.log\", file_handler_cfg);\n  quill::Logger* logger_foo = quill::create_logger(\"my_logger\", std::move(file_handler));\n  \n  LOG_INFO(my_logger, \"Hello from {}\", \"application\");\n  ```\n\n- Combined the functionalities of `RotatingFileHandler` (rotating based on file size) and `TimeRotatingFileHandler`\n  (rotating on a time interval) into a single, more versatile `RotatingFileHandler`. Users can now conveniently rotate\n  logs based on both file size and time intervals simultaneously. The updated `RotatingFileHandler` offers a variety of\n  customization options for improved flexibility. For more information on available configurations,\n  refer to the `RotatingFileHandlerConfig` documentation.\n\n  For example\n\n  ```c++\n    // Create a rotating file handler which rotates daily at 18:30 or when the file size reaches 2GB\n  std::shared_ptr<quill::Handler> file_handler =\n    quill::rotating_file_handler(filename,\n                                 []()\n                                 {\n                                   quill::RotatingFileHandlerConfig cfg;\n                                   cfg.set_rotation_time_daily(\"18:30\");\n                                   cfg.set_rotation_max_file_size(2'000'000'000);\n                                   return cfg;\n                                 }());\n\n  // Create a logger using this handler\n  quill::Logger* logger_bar = quill::create_logger(\"daily_logger\", std::move(file_handler));\n  ```\n\n- Improved compatibility with older versions of external `libfmt`. Quill now compiles for all versions\n  of `libfmt >= 8.0.0`.\n\n## v3.2.0\n\n- Addition of std::is_trivially_copyable<T> to default copy loggable\n  types. ([#318](https://github.com/odygrd/quill/pull/318))\n- By default, the static library now builds with '-fPIC' to generate position-independent code.\n  To disable this feature, you can use the CMake option 'QUILL_DISABLE_POSITION_INDEPENDENT_CODE'.\n- The `LOG_<LEVEL>_LIMIT` macros now support using `std::chrono` duration types for specifying the log interval.\n  Instead of providing a raw number, you can use:\n\n  ```c++\n      LOG_INFO_LIMIT(std::chrono::milliseconds {100} , quill::get_logger(), \"log message\");\n  ```\n\n## v3.1.0\n\n- It is now possible to set a minimum logging interval for specific logs. For example:\n\n  ```c++\n    for (uint64_t i = 0; i < 10; ++i)\n    {\n      LOG_INFO_LIMIT(2000, default_logger, \"log in a loop with limit 1 message every 2000 micros for i {}\", i);\n      std::this_thread::sleep_for(std::chrono::microseconds{1000});\n    }\n  ```\n\n- `quill::utility::to_string()` now uses `fmt::to_string()`\n\n- Quill now utilizes a custom namespace (`fmtquill`) for the bundled fmt library. This enables smooth integration with\n  your own external fmt library, even if it's a different version.\n\n## v3.0.2\n\n- Add missing header on clang when `QUILL_X86ARCH` is defined.\n\n## v3.0.1\n\n- Enhanced the reported message for reallocation of the unbounded queue to include the thread id.\n\n## v3.0.0\n\n- The previous unbounded queue constantly reallocated memory, risking system memory exhaustion, especially when handling\n  intensive logging from multiple threads. Starting from `v3.0.0`, the default behavior has been improved to limit\n  the queue capacity to 2 GB. When this limit is reached, the queue blocks the hot thread instead of further\n  reallocation.\n  To modify the default behavior, there is no need to recompile the `quill` library. Recompile your application\n  with one of the following header-only flags.\n\n  ```shell\n  # Previous behavior in v2.*.*: Reallocates new queues indefinitely when max capacity is reached\n  -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_USE_UNBOUNDED_NO_MAX_LIMIT_QUEUE\"\n  \n  # Default behavior in v3.*.*: Starts small, reallocates up to 2GB, then hot thread blocks\n  -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_USE_UNBOUNDED_BLOCKING_QUEUE\"\n  \n  # Starts small, reallocates up to 2GB, then hot thread drops log messages\n  -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_USE_UNBOUNDED_DROPPING_QUEUE\"\n  \n  # Fixed queue size, no reallocations, hot thread drops log messages\n  -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_USE_BOUNDED_QUEUE\"         \n  \n  # Fixed queue size, no reallocations, hot thread blocks\n  -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_USE_BOUNDED_BLOCKING_QUEUE\"\n  ```\n\n- Added support for huge pages on Linux. Enabling this feature allows bounded or unbounded queues to utilize huge pages,\n  resulting in optimised memory allocation.\n\n  ```c++\n    quill::Config cfg;\n    cfg.enable_huge_pages_hot_path = true;\n    \n    quill::configure(cfg);\n    quill::start();\n  ```\n\n- Added support for logging `std::optional`, which is also now supported in `libfmt` `v10.0.0`.\n\n  ```c++\n    LOG_INFO(default_logger, \"some optionals [{}, {}]\", std::optional<std::string>{},\n             std::optional<std::string>{\"hello\"});\n  ```\n\n- Introduced a new function `run_loop` in the `Handler` base class, which allows users to override and execute periodic\n  tasks. This enhancement provides users with the flexibility to perform various actions at regular intervals,\n  such as batch committing data to a database.\n- In scenarios where a hot thread is blocked and unable to push messages to the queue in blocking mode, this situation\n  will now be reported through the `backend_thread_notifications_handler` to the standard error stream `cerr`.\n\n## v2.9.2\n\n- Fix increased compile times due to `x86intrin` headers. ([#298](https://github.com/odygrd/quill/pull/298))\n- Fix compile error when using `QUILL_X86ARCH` on windows.\n- Fix bugs when quill is build as a shared library on windows. ([#302](https://github.com/odygrd/quill/pull/302))\n\n## v2.9.1\n\n- Removed `CMAKE_INSTALL_RPATH` from cmake. ([#284](https://github.com/odygrd/quill/pull/284))\n- Fix compile warning on Apple M1. ([#291](https://github.com/odygrd/quill/pull/291))\n- Update bundled `libfmt` to `v10.0.0`\n- Fix for `CMAKE_MODULE_PATH` ([#295](https://github.com/odygrd/quill/pull/295))\n- Fixed a bug in `TimeRotatingFileHandler` when `quill::FilenameAppend::None` is\n  used. ([#296](https://github.com/odygrd/quill/pull/296))\n- Fixed `TimeRotatingFileHandler` and `RotatingFileHandler` to work when `/dev/null` is used as a\n  filename ([#297](https://github.com/odygrd/quill/pull/297))\n- Added `NullHandler` that can be used to discard the logs. For example:\n\n  ```c++\n  int main()\n  {\n    quill::start();\n    \n    std::shared_ptr<quill::Handler> file_handler =\n      quill::null_handler();\n  \n    quill::Logger* logger_bar = quill::create_logger(\"nullhandler\", std::move(file_handler));\n  \n    for (uint32_t i = 0; i < 150; ++i)\n    {\n      LOG_INFO(logger_bar, \"Hello\");\n    }\n  ```\n\n## v2.9.0\n\n**Fixes**\n\n- Fixed a bug in TimeRotatingFileHandler. ([#287](https://github.com/odygrd/quill/pull/287))\n\n**Improvements**\n\n- Renamed `backend_thread_error_handler` to `backend_thread_notifications_handler` in `Config.h`. Previously this\n  handler was used only to report errors from the backend worker thread to the user. This callback will also now report\n  info messages to the user.\n- Report unbounded spsc queue reallocation via\n  the `backend_thread_notifications_handler`. ([#286](https://github.com/odygrd/quill/pull/286))\n- Report bounded spsc queue dropped messages via the `backend_thread_notifications_handler`.\n\n## v2.8.0\n\n**Breaking Changes**\n(see `improvements` section for more details)\n\n- If you were previously compiling with `-DQUILL_USE_BOUNDED_QUEUE` or `QUILL_X86ARCH` you should now pass the\n  flag to you target as it is not propagated by CMake anymore.\n- There is a change in the API in `Quill.h` instead of `quill::Handler*` you should now use\n  `std::shared_ptr< quill::Handler >` and also move it to the created logger.\n\n**Improvements**\n\n- Add `append_to_filename` parameter when creating `quill::time_rotating_file_handler`\n  and `quill::rotating_file_handler`\n- Fix `Handlers` failing to find the file when the working directory of the application is changed in\n  runtime. ([#247](https://github.com/odygrd/quill/pull/247))\n- When the given output directory of a log file passed to a `Handler` does not exist, it will now get automatically\n  created.\n- Support Windows 10 LTSB 2016, 1607 and Server 2016. ([#251](https://github.com/odygrd/quill/pull/251))\n- Add back `backend_thread_sleep_duration` in `Config.h` ([#256](https://github.com/odygrd/quill/pull/256))\n- For `quill::rotating_file_handler(...)` and  `quill::time_rotating_file_handler(...)` the `backup_count` argument is\n  now default to `std::numeric_limits<std::uint32_t>::max()`\n- When the logging file is deleted from the command line while the logger is still using it, then a new file will be\n  reopened for writing.\n- Added `quill::Clock` which enables taking and converting TSC timestamps to system clock timestamps.\n  When `TimestampClockType::Tsc` is used as the default clock type in `Config.h` this class\n  can also be used to generate timestamps that are in sync with the timestamps in the log\n  file. ([#264](https://github.com/odygrd/quill/pull/264))\n- Both `Unbounded` and `Bounded` queue modes can now be used without having to recompile `quill` library. This is still\n  not a runtime option, you still need to recompile your target and pass `QUILL_USE_BOUNDED_QUEUE` as a flag.\n  See [example_bounded_queue_message_dropping.cpp](https://github.com/odygrd/quill/blob/master/examples/example_bounded_queue_message_dropping.cpp)\n- Added `QUILL_USE_BOUNDED_BLOCKING_QUEUE` option that makes possible to use a bounded queue which blocks the hot\n  thread rather than dropping messages ([#270](https://github.com/odygrd/quill/pull/270))\n  See [example_bounded_queue_blocking.cpp](https://github.com/odygrd/quill/blob/master/examples/example_bounded_queue_blocking.cpp)\n- Renamed `backend_thread_max_transit_events` to `backend_thread_transit_events_soft_limit` in\n  Config.h ([#270](https://github.com/odygrd/quill/pull/270))\n- Added `backend_thread_transit_events_hard_limit` in Config.h ([#270](https://github.com/odygrd/quill/pull/270))\n- Added `backend_thread_use_transit_buffer` in Config.h ([#270](https://github.com/odygrd/quill/pull/270))\n- CMake: `QUILL_X86ARCH` and `QUILL_USE_BOUNDED_QUEUE` options have been removed. The users can decide on enabling these\n  options on their side and quill doesn't need to be recompiled as a library. For example :\n  ```cmake\n     target_compile_definitions(<target> PUBLIC QUILL_X86ARCH QUILL_USE_BOUNDED_QUEUE)\n  ```\n- Added `quill::remove_logger(Logger* logger)` in `Quill.h`. This makes it possible to remove a logger in a thread safe\n  way. When a logger is removed any associated `FileHandlers` with that logger will also be removed and the files will\n  also be closed as long as they are not being used by another logger. The logger is asynchronously removed by the\n  logging\n  thread after all the messages are written. To achieve this the API had to change to return a\n  `std::shared_ptr< quill::Handler >` instead of `quill::Handler*`. See\n  [example_file_callbacks.cpp](https://github.com/odygrd/quill/blob/master/examples/example_file_callbacks.cpp)\n- Added `quill::wake_up_logging_thread()` in `Quill.h`. This thread safe function can be used to wake up the backend\n  logging thread on demand. ([#280](https://github.com/odygrd/quill/pull/280))\n- Round up queue capacity to the nearest power of 2. ([#282](https://github.com/odygrd/quill/pull/282))\n\n## v2.7.0\n\n**Fixes**\n\n- Remove references to build directory path from the compiled library's\n  symbols. ([#221](https://github.com/odygrd/quill/pull/221))\n- Fix when compiled as shared library with hidden visibility. ([#222](https://github.com/odygrd/quill/pull/222))\n- Fix equal timestamp log messages appearing out of order. ([#223](https://github.com/odygrd/quill/pull/223))\n- Reduce padding in some structs.\n- Fix 'rename_file' throwing an exception while being marked\n  as `noexcept`. ([#230](https://github.com/odygrd/quill/pull/230))\n- Fix crash with `std::bad_alloc` and compiler warnings in\n  gcc `7.3.1`. ([#235](https://github.com/odygrd/quill/pull/235))\n- The additional compiler definitions will now be propagated to the parent targets when enabling options in\n  CMake. ([#235](https://github.com/odygrd/quill/pull/235))\n\n**Improvements**\n\n- Improved performance and throughput of the backend logging thread by approximately ~25%\n- Add missing `quill::json_file_handler(...)` that creates a `JsonFileHandler` in `Quill.h`.\n- Simplified and refactored the logic in `BoundedQueue`.\n- Added the option `do_fsync` which also calls `fsync()` during the handler flush to all file handlers.\n- Replace `backend_thread_sleep_duration` with `backend_thread_yield` in `Config.h`\n- Remove trailing spaces in log levels strings. ([#237](https://github.com/odygrd/quill/pull/237))\n- The default log pattern has changed\n  to `\"%(ascii_time) [%(thread)] %(fileline:<28) LOG_%(level_name:<9) %(logger_name:<12) %(message)\")`\n- Added file event notifiers, to get callbacks from quill before/after log file has been opened or\n  closed. ([#193](https://github.com/odygrd/quill/pull/193))\n  This is useful for cleanup procedures or for adding something to the start/end of the log files.\n  for example\n\n  ```c++\n  int main()\n  {\n    quill::start();\n  \n    quill::FileEventNotifier fen;\n  \n    fen.before_open = [](quill::fs::path const& filename)\n    { std::cout << \"before opening \" << filename << std::endl; };\n  \n    fen.after_open = [](quill::fs::path const& filename, FILE* f)\n    { std::cout << \"after opening \" << filename << std::endl; };\n  \n    fen.before_close = [](quill::fs::path const& filename, FILE* f)\n    { std::cout << \"before closing \" << filename << std::endl; };\n  \n    fen.after_close = [](quill::fs::path const& filename)\n    { std::cout << \"after closing \" << filename << std::endl; };\n  \n    quill::Handler* file_handler =\n      quill::file_handler(\"myfile.log\", \"w\", quill::FilenameAppend::None, std::move(fen));\n  \n    quill::Logger* mylogger = quill::create_logger(\"mylogger\", file_handler);\n  \n    LOG_INFO(mylogger, \"Hello world\");\n  }\n  ```\n\n- Added `QUILL_X86ARCH` in `Tweakme.h`. When enabled it will attempt to minimize the cache pollution on x86 cpus that\n  support the instructions `_mm_prefetch `, `_mm_clflush` and `_mm_clflushopt`.\n\n  To compile when this flag is enabled you should also pass `-march` to the compiler which is required,\n  you can set this to your oldest cpu architecture among your systems.\n\n  To enable this option, `DQUILL_X86ARCH` must always be defined in quill library and also in your executable,\n  for example\n\n  ```shell\n  cmake -DCMAKE_CXX_FLAGS:STRING=\"-DQUILL_X86ARCH -march=native\"\n  ```\n\n- Added `quill:get_root_logger()` which gives quick access to the root logger object and can be used directly in the hot\n  path.\n  This gives applications that only wish to use the root logger the convenience of not having to store and\n  pass `Logger*` objects anymore.\n  for example quill existing log macros can be overwritten to not require a `Logger*` anymore\n\n  ```c++\n  #define MY_LOG_INFO(fmt, ...) QUILL_LOG_INFO(quill::get_root_logger(), fmt, ##__VA_ARGS__)\n  ``````\n\n- Added `QUILL_ROOT_LOGGER_ONLY` in `Tweakme.h`. Define ths if you only plan to use the single `root` logger object,\n  When this is defined it will replace the LOG_ macros with the equivalent LOG_ macros but without the need of\n  passing `Logger*` objects anymore.\n  for example\n\n  ```c++\n  #define QUILL_ROOT_LOGGER_ONLY\n  #include \"quill/Quill.h\"\n  \n  int main()\n  {\n    quill::start();\n  \n    // because we defined QUILL_ROOT_LOGGER_ONLY we do not have to pass a logger* anymore, the root logger is always used\n    LOG_INFO(\"Hello {}\", \"world\");\n    LOG_ERROR(\"This is a log error example {}\", 7);\n  }\n  ```\n\n## v2.6.0\n\n**Fixes**\n\n- Fix filepath on Windows when MinGW is used. ([#212](https://github.com/odygrd/quill/pull/212))\n\n**Improvements**\n\n- Removed the creation of `static Metadata` objects during initialisation time.\n- `#define QUILL_QUEUE_CAPACITY` has been removed.\n- Added Config option `default_queue_capacity` that can be used to specify the initial capacity of the queue.\n- When Unbounded queue is used the newly allocated queue will now have enough space to fit any\n  object. ([#215](https://github.com/odygrd/quill/pull/215))\n\n## v2.5.1\n\n**Improvements**\n\n- Reduced the allocations performed by the backend worker thread as the same objects are now being reused rather than\n  destroyed.\n\n**Summary of changes since v2.3.2**\n\nIn version `2.3.2` when multiple threads performed heavy logging, the backend logging thread incorrectly gave\npriority to the logs of the same threads. That made logs from the remaining threads to appear much later or sometimes\nnever in the log files.\n\nThere was a series of fixes and releases to address this.\n\nBelow is the summary of the changes from `v2.3.2`\n\n- Previously when multiple threads were logging, the backend logging thread would first try to read the log messages of\n  the same thread until its queue was completely empty before reading the log messages of the next thread.\n  When one of the threads was logging a lot, it could result in only displaying the log of that thread, hiding the\n  logs of the other threads. This has now been fixed and all log messages from all threads are read fairly.\n\n- Optimise the backend logging thread to read all log messages from each queue. Ensure all queues\n  from all active threads are fairly read.\n\n- `fmt::basic_memory_buffer` buffer stack size has been reduced. The backend thread shows better performance with\n  a reduced stack size. This also reduces the risk of a stack overflow when too many log messages are cached.lllllllllll\n\n- Reduced the allocations performed by the backend worker thread as the same objects are now being reused rather than\n  destroyed.\n\n- Added a config option `backend_thread_strict_log_timestamp_order`. This option enables an extra timestamp\n  check on the backend logging thread when each message is popped from the queues. It prevents a rare\n  situation where log messages from different threads could appear in the log file in the wrong order. This flag\n  is now enabled by default.\n\n- Added a config option `backend_thread_empty_all_queues_before_exit`. This option makes the backend logging thread\n  to wait until all the queues are empty before exiting. This ensures no log messages are lost when the application\n  exists. This flag is now enabled by default.\n\n## v2.5.0\n\n**Improvements**\n\n- Performance improvements for the backend logging thread\n\n## v2.4.2\n\n**Fixes**\n\n- Fixes an assertion that was triggered in debug mode due to changes in v2.4.1\n\n## v2.4.1\n\n**Improvements**\n\n- Previously the backend worker thread would read all the log messages from the queue but not read the log messages when\n  the buffer had wrapped around. It will now read all the messages.\n- Removed the `min_available_bytes` cache from the SPSC queue as an optimisation. It is not needed anymore as we now\n  read all messages at once instead of reading message by message.\n\n## v2.4.0\n\n**Improvements**\n\n- Added a config option `backend_thread_strict_log_timestamp_order`. This option enables an extra timestamp\n  check on the backend logging thread when each message is popped from the queues. It prevents a rare\n  situation where log messages from different threads could appear in the log file in the wrong order. This flag\n  is now enabled by default.\n\n- Added a config option `backend_thread_empty_all_queues_before_exit`. This option makes the backend logging thread\n  to wait until all the queues are empty before exiting. This ensures no log messages are lost when the application\n  exists. This flag is now enabled by default.\n\n## v2.3.4\n\n**Improvements**\n\n- Optimise the backend logging thread to read multiple log messages from the same queue, but still fairly read each\n  queue from all active threads.\n\n## v2.3.3\n\n**Fixes**\n\n- Previously when multiple threads were logging, Quill backend logging thread would first try reading the log messages\n  of\n  one thread until the queue was completely empty before reading the log messages of the next thread.\n  When one of the threads was logging a lot, it could result in only displaying the log of that thread, hiding the\n  logs of the other threads. This has now been fixed and all log messages from all threads are read fairly.\n\n## v2.3.2\n\n**Fixes**\n\n- Fix code not compiling with treat warnings as errors set on\n  Windows. ([#198](https://github.com/odygrd/quill/pull/198))\n\n## v2.3.1\n\n**Fixes**\n\n- Optimise logging queue cache alignment of variables. It seems that v2.3.0 made the hot path slower by ~5 ns per\n  message. This has been fixed in this version and the performance is now the same as in the previous versions.\n\n## v2.3.0\n\n**Improvements**\n\n- Cache the available bytes for reading in the logging queue. This is meant to offer some minor performance\n  improvement to the backend logging thread. [#185](https://github.com/odygrd/quill/issues/185)\n\n- Fixed static code analysis and clang '-Wdocumentation' warnings.\n\n- The `Handler.h` API has changed in this version to support structured logs. If you have implemented your own custom\n  `Handler` you will have to change it to follow the new API.\n\n- This version adds support for writing structured logs. Structured logs provide easier search through events.\n  Structured logging is automatically enabled when named arguments are provided to the format string. Structured logs\n  are only supported by the new `quill::JsonFileHandler` handler. The already existing `FileHandler` and\n  `ConsoleHandler` are compatible with named arguments, but they will ignore them and output the log in its\n  original format, as defined by the pattern formatter.\n  Structured logs are not supported for wide characters at the moment.\n  See [example_json_structured_log.cpp](https://github.com/odygrd/quill/blob/master/examples/example_json_structured_log.cpp)\n\nFor example :\n\n```c++\n  quill::start();\n\n  quill::Handler* json_handler =\n    quill::create_handler<quill::JsonFileHandler>(\"json_output.log\", \"w\");\n\n  // create another logger tha logs e.g. to stdout and to the json file at the same time\n  quill::Logger* logger = quill::create_logger(\"dual_logger\", {quill::stdout_handler(), json_handler});\n  for (int i = 2; i < 4; ++i)\n  {\n    LOG_INFO(logger, \"{method} to {endpoint} took {elapsed} ms\", \"POST\", \"http://\", 10 * i);\n  }\n```\n\n1) Will write to stdout (stdout_handler) :\n\n````\n23:37:19.850432433 [11811] example_json_structured_log.cpp:39 LOG_INFO      dual_logger  - POST to http:// took 20 ms\n23:37:19.850440154 [11811] example_json_structured_log.cpp:39 LOG_INFO      dual_logger  - POST to http:// took 30 ms\n````\n\n2) Will produce a JSON file (json_handler) :\n\n```\n{ \"timestamp\": \"23:37:19.850432433\", \"file\": \"example_json_structured_log.cpp\", \"line\": \"39\", \"thread_id\": \"11811\", \"logger\": \"dual_logger\", \"level\": \"Info\", \"message\": \"{method} to {endpoint} took {elapsed} ms\", \"method\": \"POST\", \"endpoint\": \"http://\", \"elapsed\": \"20\" }\n{ \"timestamp\": \"23:37:19.850440154\", \"file\": \"example_json_structured_log.cpp\", \"line\": \"39\", \"thread_id\": \"11811\", \"logger\": \"dual_logger\", \"level\": \"Info\", \"message\": \"{method} to {endpoint} took {elapsed} ms\", \"method\": \"POST\", \"endpoint\": \"http://\", \"elapsed\": \"30\" }\n```\n\n## v2.2.0\n\n**Improvements**\n\n- Previously storing the default root logger by calling `quill::get_logger()` followed by `quill::configure(cfg)`\n  would invalidate the pointer to the default root logger returned by the former function. This has now been fixed and\n  the obtained `Logger*` pointer is still valid.\n- Disable `fmt::streamed()`. ([#189](https://github.com/odygrd/quill/issues/189))\n- Update bundled fmt to 9.1.0\n- `logger->should_log(level)` is removed. A compile time check was added to `logger->should_log<level>()`\n  . ([#187](https://github.com/odygrd/quill/issues/187))\n\n## v2.1.0\n\n**Improvements**\n\nThis version includes breaking changes to the API. Those changes are related to how quill is configured,\nbefore calling `quill::start()` to start the backend thread.\n\nCheck the updated [examples](https://github.com/odygrd/quill/blob/master/examples).\n\n[Config.h](https://github.com/odygrd/quill/blob/master/quill/include/quill/Config.h) - contains runtime configuration\noptions\n\n[TweakMe.h](https://github.com/odygrd/quill/blob/master/quill/include/quill/TweakMe.h) - contains compile time\nconfiguration\n\nFor example `quill::set_default_logger_handler(...)` has been removed. To set a default filehandler :\n\n```cpp\n  // create a handler\n  quill::Handler* file_handler = quill::file_handler(\"test.log\", \"w\");\n\n  file_handler->set_pattern(\n    \"%(ascii_time) [%(thread)] %(fileline:<28) %(level_name) %(logger_name:<12) - %(message)\",\n    \"%Y-%m-%d %H:%M:%S.%Qms\", quill::Timezone::GmtTime);\n\n  // set the handler as the default handler for any newly created logger in the config\n  quill::Config cfg;\n  cfg.default_handlers.emplace_back(file_handler);\n\n  // configure must always be called prior to `start()`\n  quill::configure(cfg);\n  quill::start();\n```\n\n- Removed some API functions from `Quill.h` that were previously used for configuration. Instead, `quill::Config` object\n  has to be created. For example `quill::config::set_backend_thread_cpu_affinity(1);` has been removed and instead the\n  following code is needed :\n\n```cpp\n  quill::Config cfg;\n  cfg.backend_thread_cpu_affinity = 1;\n  quill::configure(cfg);\n```\n\n- `QUILL_CHRONO_CLOCK` has been moved from `TweakMe.h` to `Config.h`. It is now possible to switch between `rdtsc`\n  and `system`\n  clocks without re-compiling.\n  See [example_trivial_system_clock.cpp](https://github.com/odygrd/quill/blob/master/examples/example_trivial_system_clock.cpp)\n- `QUILL_RDTSC_RESYNC_INTERVAL` has been moved from `TweakMe.h` to `Config.h`.\n- It is now possible to log user timestamps rather than the system's. This feature is useful for time simulations.\n  See [example_custom_clock.cpp](https://github.com/odygrd/quill/blob/master/examples/example_custom_clock.cpp)\n  and [example_custom_clock_advanced.cpp](https://github.com/odygrd/quill/blob/master/examples/example_custom_clock_advanced.cpp)\n- Previously the logger names were limited to a maximum of 22 characters. This limitation has been removed.\n- Added support for gcc 7.5.0. ([#178](https://github.com/odygrd/quill/issues/178))\n- Updated bundled fmt to 9.0.0\n\n## v2.0.2\n\n**Fixes**\n\n- Fix crash when a `std::string` containing null-terminated characters is passed to the\n  logger. ([#176](https://github.com/odygrd/quill/issues/176))\n\n## v2.0.1\n\n**Improvements**\n\n- Add a flag to RotatingFileHandler to disable removing the old files when `w` mode is used.\n\n## v2.0.0\n\nFrom version `v2` and onwards only c++17 is supported.\n\nThis version is a major refactor.\n\n**Fixes**\n\n- RotatingFileHandler will now correctly rotate the files when append mode is\n  used ([#123](https://github.com/odygrd/quill/issues/123))\n\n**Improvements**\n\n- Reduced and simplified codebase.\n- Improved backend worker thread performance.\n- `QUILL_DUAL_QUEUE_MODE` has been removed. A single queue now handles every case.\n- `QUILL_STRING` has been removed. That macro is no longer required when passing a format string to the\n  PatternFormatter.\n\n**Differences**\n\n- `v1.7` compiles with c++14, `v2` only compiles for c++17.\n- `v1.7` on Windows supports wide character logging, `v2` has limited wide character support such as logging `wchar_t`\n  , `std::wstring`, `std::wstring_view`. For example, logging `std::vector<std::wstring>` is not supported.\n- `v1.7` on Windows requires the filepath used for the handlers as a wide strings, `v2` supports only filenames as\n  narrow strings.\n\n## v1.7.3\n\n**Improvements/Fixes**\n\n- Fix crash on windows when a long wstring (>500 chars) is logged ([#173](https://github.com/odygrd/quill/issues/173))\n- Fix compiler error when trying to compile with\n  -DQUILL_DISABLE_NON_PREFIXED_MACROS ([#174](https://github.com/odygrd/quill/issues/174))\n- Fix a compile warning in clang ([#175](https://github.com/odygrd/quill/issues/175))\n\n## v1.7.2\n\n**Improvements/Fixes**\n\n- Fix compile error when C++20 is used on windows ([#162](https://github.com/odygrd/quill/issues/162))\n\n## v1.7.1\n\n**Improvements/Fixes**\n\n- Fix support for wide characters on Windows ([#168](https://github.com/odygrd/quill/issues/168))\n- Fix compilation error when `Quill::Logger*` is stored as a class member in templated classes\n- Add `FilenameAppend::DateTime` as an option when creating a file handler\n\n## v1.7.0\n\n**New Features**\n\n- Add a new function `quill::get_all_loggers()` that returns all the existing\n  loggers. ([#114](https://github.com/odygrd/quill/issues/114))\n- Add `%(level_id)` to pattern formatter. ([#136](https://github.com/odygrd/quill/issues/136))\n- Users can now specialise `copy_loggable<T>` to mark user defined types as safe to\n  copy. ([#132](https://github.com/odygrd/quill/issues/132))\n\n**Improvements/Fixes**\n\n- Fix initializations for C++17.\n- Fix compiler warning in `check_format()` function.\n- Replace `QUILL_DUAL_QUEUE_MODE` with `QUILL_DISABLE_DUAL_QUEUE_MODE`.\n- Update bundled fmt to 8.1.1\n- Minor performance and accuracy improvements to rdtsc clock used by the backend thread.\n- Fix compile error when C++20 is used. ([#162](https://github.com/odygrd/quill/issues/162))\n- Fix `get_page_size()` to only call sysconf once. ([#160](https://github.com/odygrd/quill/issues/160))\n- Fix incorrect timestamps in the log file when the system clock is\n  updated. ([#127](https://github.com/odygrd/quill/issues/127))\n- Previously if `quill:start(true)` was called more than once in the application, the signal handlers would get\n  initialised again. Now any subsequent calls to `quill:start(true)` will now have no effect\n  ([#167](https://github.com/odygrd/quill/issues/167))\n- Previously when the max limit of rotated files in `RotatingFileHandler` was reached, quill would stop rotating and\n  instead keep logging everything into the last log file. Now when the maximum limit of files is reached,\n  quill will now keep rotating by replacing the oldest logs. ([#157](https://github.com/odygrd/quill/issues/157))\n- Improve the backend logging thread responsiveness when variables are logged in loops without any delay\n  from multiple threads. ([#116](https://github.com/odygrd/quill/issues/116))\n- Fix some undefined behaviour issues reported via the AddressSantizer on the backend logging\n  thread. ([#166](https://github.com/odygrd/quill/issues/166))\n\n## v1.6.3\n\n**Improvements/Fixes**\n\n- Add support for `%(thread_name)` in PatternFormatter. ([#97](https://github.com/odygrd/quill/issues/97))\n- Add missing header needed for recent versions of fmt. ([#95](https://github.com/odygrd/quill/issues/95))\n- Force flush all active handlers on application exit.\n- Update bundled fmt to 8.0.1\n\n## v1.6.2\n\n**Fixes**\n\n- Fix WIN32 compilation error when `NOMINMAX` is already defined.\n- Fix `string` to `wstring` MinGW conversion. ([#92](https://github.com/odygrd/quill/issues/92))\n- Log enums via the main queue. ([#90](https://github.com/odygrd/quill/issues/90))\n- Fix windows compiler error when `min/max` macros are defined. ([#94](https://github.com/odygrd/quill/issues/94))\n\n## v1.6.1\n\n**Improvements/Fixes**\n\n- Fix windows C++20 build. ([#83](https://github.com/odygrd/quill/issues/83))\n- Fix ARM build on windows.\n- Fix `example_backtrace` and minor bug when destructing with empty backtrace.\n\n## v1.6.0\n\n**New Features**\n\n- Dual queue mode offering even lower latencies on hot paths.\n  See [Dual Queue Mode](https://github.com/odygrd/quill/wiki/9.-Dual-Queue-Mode).\n- Added a signal handler for linux and windows. The signal handler flushes the log when the app crashes or\n  exits. ([#1](https://github.com/odygrd/quill/issues/1))\n- Added support for custom handlers. ([#75](https://github.com/odygrd/quill/issues/75))\n- Quill now compiles and runs on Cygwin.\n\n**Improvements/Fixes**\n\n- The queue from the caller to the backend worker thread has been reworked. The new queue generates slightly better\n  assembly than the previous one. Quill does no longer depend on mapping the same region of physical memory twice.\n- Replaced an assertion check that could trigger incorrectly. ([#68](https://github.com/odygrd/quill/issues/68))\n- Fixed build on `ARM_ARCH < 6`. ([#78](https://github.com/odygrd/quill/issues/78))\n- Fixed compile errors when `QUILL_NOEXCEPTIONS`, `CMAKE_CXX_STANDARD 20`, `QUILL_USE_BOUNDED_QUEUE` are set.\n- The unit tests have been moved to a separate binary with their own `main()`. This increased build times when building\n  the tests, but the failures are now easier to debug on different CI platforms and the tests can also run faster in\n  parallel.\n- Fixed minor compiler warnings on windows.\n- Upgraded bundled libfmt to `7.1.3`\n\n**Note**\n\n- If a custom queue capacity is defined using `#define QUILL_QUEUE_CAPACITY` after `1.6.0` the whole library needs to be\n  recompiled.\n\n## v1.5.2\n\n- Removed the use of `fmt::format()` in `FileUtilities.cpp` as a workaround to the link errors in fmt v7. Use the header\n  only version of libfmt when external libfmt is defiend is no longer required.\n\n## v1.5.1\n\n- When QUILL_FMT_EXTERNAL is defined, `quill` will use the header only version of `libfmt`. This is a workaround to the\n  link errors after libftm v7\n\n## v1.5.0\n\n- Upgraded bundled libfmt to `7.1.2`\n- Added `Filters`. The filter class can be used for filtering log records. Filters can be added to handler instances.\n  See [example_filters.cpp](https://github.com/odygrd/quill/blob/master/examples/example_filters.cpp)\n- It is now possible to set the log level severity on the handler objects.\n  See [example_filters.cpp](https://github.com/odygrd/quill/blob/master/examples/example_handler_log_levels.cpp) ([#49](https://github.com/odygrd/quill/issues/49))\n- Timestamp formatting optimisation for the backend worker thread.\n- Free list allocator optimisation for the backend worker thread.\n- Fixed PatternFormatter ignoring a portion of the pattern was ignored, when no format specifiers were\n  present. ([#56](https://github.com/odygrd/quill/issues/56))\n- When `%(function_name)` is used in PatternFormatter the namespace delimiter is replaced from `::` to `.` (Windows\n  only). ([#61](https://github.com/odygrd/quill/issues/61))\n- Arguments passed to the logger are no longer being evaluated when the log statement is not\n  logged. ([#67](https://github.com/odygrd/quill/issues/67))\n- PatternFormatter enhancement. It is now possible to pass [{fmt} string syntax](https://fmt.dev/latest/syntax.html)\n  to `QUILL_STRING`. The default PatternFormatter string has been changed\n  to: `\"%(ascii_time) [%(thread)] %(fileline:<28) LOG_%(level_name) %(logger_name:<12) - %(message)\"`. This results to\n  the following log being properly aligned despite the different lengths of each filename and logger name.\n\n```\n22:31:07.995438465 [2666041] file1.h:11                   LOG_INFO      logger1      - Log from file.\n22:31:07.995445699 [2666041] long_file2.h:11              LOG_INFO      logger_fl2   - Log from other file.\n22:31:07.995457144 [2666041] a_longer_file_3.hpp:11       LOG_INFO      logger_fl2_l - Log from other file.\n22:31:07.995462471 [2666041] example_trivial.cpp:30       LOG_TRACE_L3  root         - This is a log trace l3 example 1\n```\n\n## v1.4.1\n\n- Do not force `quill` to always build as `static` library in cmake.\n- Minor fix when `quill` is compiled with no exceptions.\n- Add the option to disable the non prefixed macro definitions if `QUILL_DISABLE_NON_PREFIXED_MACROS` is\n  defined. ([#40](https://github.com/odygrd/quill/issues/40))\n\n## v1.4.0\n\n- Added support for printing colour codes in the terminal.\n  See [ConsoleHandler](https://github.com/odygrd/quill/wiki/2.-Handlers#consolehandler)\n- RotatingFileHandler improvements and minor change in API.\n  See [RotatingFileHandler](https://github.com/odygrd/quill/wiki/2.-Handlers#rotatingfilehandler)\n- DailyFileHandler is removed and replaced by TimeRotatingFileHandler.\n  See [TimeRotatingFileHandler](https://github.com/odygrd/quill/wiki/2.-Handlers#timerotatingfilehandler)\n- Added backtrace logging. Log messages can be stored in a buffer and flushed later on demand.\n  See [Backtrace Logging](https://github.com/odygrd/quill/wiki/6.-Backtrace-Logging)\n- Added bundled `doctest` `2.4.0`\n- Migrated all tests from `gtest` to `doctest`.\n- Upgraded bundled libfmt to `7.0.3`\n\n## v1.3.3\n\n- Upgraded bundled libfmt to `7.0.2`\n- Fixed compile error with libfmt versions > `7.0.0`\n\n## v1.3.2\n\n- Add a CMake option `QUILL_USE_BOUNDED_QUEUE` for bounded queue.\n- Fixed a clang 10 warning\n- Fixed MinGw build\n\n## v1.3.1\n\n- Minor CMake fixes when `QUILL_FMT_EXTERNAL` option is used.\n\n## v1.3.0\n\n**New Features**\n\n- Added option `QUILL_NO_EXCEPTIONS` to disable exceptions, std::abort() is called instead of an\n  exception. ([#16](https://github.com/odygrd/quill/issues/16))\n- Exceptions thrown in the backend worker thread, will now call a user provided error handler callback to handle the\n  error. ([#21](https://github.com/odygrd/quill/issues/21))\n- Compile time checks for unsafe to copy user defined types. Non trivial user defined types must be explicitly tagged as\n  safe to copy with the use of `QUILL_COPY_LOGGABLE;`. Otherwise they have to be formatted and passed as a string to the\n  logger by the user. The old unsafe mode is still usable\n  by `#define QUILL_MODE_UNSAFE` ([#20](https://github.com/odygrd/quill/issues/20))\n- Added `QUILL_USE_BOUNDED_QUEUE`. In this mode no new queues get allocated but instead log messages get lost. Number of\n  lost messages is reported to stderr.\n- Minor hot path optimisation. The pointer to the metadata for each log message is no logger copied to the queue but\n  passed as a template argument instead.\n- Added a latency benchmark, easily extendable for any logger\n\n**Improvements/Fixes**\n\n- `QUILL_RDTSC_CLOCK` option is replaced by `QUILL_CHRONO_CLOCK` which is by OFF by default.\n- Improve compiler error message when trying to log a non copy constructible user defined type\n- Fix buffer reallocation bug on TimestampFormatter. In previous versions any timestamp format set to 'set_pattern'\n  expanding to a string longer than 32 bytes would cause a crash. ([#24](https://github.com/odygrd/quill/issues/24))\n- The backend logging thread will now copy all messages from the SPSC queue to a local priority queue. This keeps the\n  SPSC less empty avoiding a potential allocation on the hot path.\n- `std::string_view` is now promoted to `std::string` to take a deep copy\n- The queue capacity has been moved from `config` to `Tweakme.h`.\n- Multiple formats patterns support for `stdout` and `stderr` handlers.\n  See [example_stdout_multiple_formatters.cpp](https://github.com/odygrd/quill/blob/master/examples/example_custom_formatter.cpp)\n- `quill::start()` will now block until the backend worker has started.\n- Upgraded bundled libfmt to `6.2.1`\n\n## v1.2.3\n\n- CMake changes to support package installation in conan.\n\n## v1.2.2\n\n- Support for `arm/arm64`. ([#19](https://github.com/odygrd/quill/issues/19))\n- Add a cmake option `QUILL_ENABLE_INSTALL` to enable cpack.\n\n## v1.2.1\n\n- Improved `QUILL_RDTSC_CLOCK` tweak option. It is now possible to switch between using `rdtsc` or `std::chrono` clock\n  without having to recompile quill as library.\n\n## v1.2.0\n\n- Linking and including an external version of `fmt` is now supported. See `TweakMe.h`\n- Fixed compiler warnings when using clang's `-Wdocumentation`. ([#12](https://github.com/odygrd/quill/issues/12))\n- Fixed a bug that wouldn't report a compile-time error for invalid format\n  strings. ([#13](https://github.com/odygrd/quill/issues/13))\n- Added process ID to Formatter. ([#14](https://github.com/odygrd/quill/issues/14))\n- Enhanced timestamp formatting. The `timestamp_format` string passed\n  in `handler->set_pattern(format_pattern, timestamp_format, timezone)` now accepts three additional specifiers `%Qms`\n  , `%Qus`, `%Qus` that can be used to format the fractional seconds.\n  See [here](https://github.com/odygrd/quill/wiki/3.-Formatters). ([#15](https://github.com/odygrd/quill/issues/15))\n\n## v1.1.0\n\n- Daily file handler. The file handler rollover every 24 hours\n- Rotating file handler. The file handler will rollover based on the size of the file\n- MinGW compatibility\n- Added a CMake option `QUILL_VERBOSE_MAKEFILE`. Building Quill as a master project now defaults to non verbose makefile\n  output unless `-DQUILL_VERBOSE_MAKEFILE=ON` is passed to CMake. ([#6](https://github.com/odygrd/quill/issues/6))\n- Flush policy improvement. Previously Quill backend worker thread would never `flush`. This made watching the live log\n  of the application harder because the user has to wait for the operating system to flush or `quill::flush()` had to be\n  called on the caller threads. This has now been fixed, when the backend thread worker has no more log messages to\n  process it will automatically `flush`. ([#8](https://github.com/odygrd/quill/issues/8))\n- The log level names have been changed from `\"LOG_INFO\"`, `\"LOG_DEBUG\"`, etc to `\"INFO\"`, `\"DEBUG\"`, etc .. The default\n  formatter string is now using `\"LOG_\"%(level_name)` instead of `%(level_name)` therefore there is now change in the\n  behaviour. This change gives a lot of more flexibility to users who prefer to see e.g. `INFO` instead of `LOG_INFO` in\n  the logs. ([#7](https://github.com/odygrd/quill/issues/7))\n- An option has been added to append the date to the filename when using a\n  FileHandler `quill::file_handler(filename, mode, FilenameAppend);`. ([#7](https://github.com/odygrd/quill/issues/7))\n- It is now possible to specify the timezone of each handler timestamp. A new parameter is added\n  to `file_handler->set_pattern(...)`. See `PatternFormatter::Timezone`\n  . ([#7](https://github.com/odygrd/quill/issues/7))\n- Rename `emit` as it can conflict with Qt macros. ([#4](https://github.com/odygrd/quill/issues/4))\n- Upgraded `libfmt` to `6.2.0`.\n\n## v1.0.0\n\n- Initial release.\n- Using `libfmt` to `6.1.2`.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 16.1279296875,
          "content": "cmake_minimum_required(VERSION 3.8)\nproject(quill)\n\n#-------------------------------------------------------------------------------------------------------\n# Options\n#-------------------------------------------------------------------------------------------------------\n\noption(QUILL_NO_EXCEPTIONS \"Enable this option to build without exception handling support.\" OFF)\n\noption(QUILL_NO_THREAD_NAME_SUPPORT \"Enable this option to disable features that require thread name retrieval, ensuring compatibility with older Windows versions (e.g., Windows Server 2012/2016) and Android.\" OFF)\n\noption(QUILL_X86ARCH \"Enable x86-specific optimizations for cache coherence using _mm_prefetch, _mm_clflush, and _mm_clflushopt instructions. Ensure the target architecture must also be specified with -march=\\\"...\\\" when enabling this option.\" OFF)\n\noption(QUILL_DISABLE_NON_PREFIXED_MACROS \"Enable this option to disable non-prefixed `LOG_*` macros, keeping only the `QUILL_LOG_*` macros to avoid conflicts with other logging libraries.\" OFF)\n\noption(QUILL_BUILD_EXAMPLES \"Enable this option to build and install the examples. Set this to ON to include example projects in the build process and have them installed after configuring with CMake.\" OFF)\n\noption(QUILL_BUILD_TESTS \"Enable this option to build the test suite.\" OFF)\n\noption(QUILL_ENABLE_EXTENSIVE_TESTS \"Enable extensive tests that may require more resources and are not suitable for hosted CI runners.\" OFF)\n\noption(QUILL_BUILD_BENCHMARKS \"Enable this option to build the benchmarks.\" OFF)\n\noption(QUILL_SANITIZE_ADDRESS \"Enable AddressSanitizer (ASan) for memory error detection in tests.\" OFF)\n\noption(QUILL_SANITIZE_THREAD \"Enable ThreadSanitizer (TSan) for detecting thread-related issues in tests. Note: Using this option with non-Clang compilers may produce false positives.\" OFF)\n\noption(QUILL_CODE_COVERAGE \"Enable code coverage analysis during the build.\" OFF)\n\noption(QUILL_USE_VALGRIND \"Use Valgrind as the default memory checking tool in CTest. Valgrind must be installed.\" OFF)\n\noption(QUILL_ENABLE_INSTALL \"Enable the CMake install target when Quill is not the master project.\" OFF)\n\noption(QUILL_DOCS_GEN \"Generate documentation during the build process.\" OFF)\n\n#-------------------------------------------------------------------------------------------------------\n# Use newer policies if possible, up to most recent tested version of CMake.\n#-------------------------------------------------------------------------------------------------------\ncmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})\n\n#-------------------------------------------------------------------------------------------------------\n# Determine if quill is built as a subproject (using add_subdirectory) or if it is the master project.\n#-------------------------------------------------------------------------------------------------------\nset(QUILL_MASTER_PROJECT FALSE CACHE BOOL \"Master Project\" FORCE)\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(QUILL_MASTER_PROJECT TRUE CACHE BOOL \"Master Project\" FORCE)\nendif ()\n\n#-------------------------------------------------------------------------------------------------------\n# Custom cmake functions\n#-------------------------------------------------------------------------------------------------------\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\ninclude(QuillUtils)\n\n#-------------------------------------------------------------------------------------------------------\n# Resolve version\n#-------------------------------------------------------------------------------------------------------\nquill_extract_version()\nproject(quill VERSION ${QUILL_VERSION} LANGUAGES CXX)\n\n#-------------------------------------------------------------------------------------------------------\n# Set default build to release\n#-------------------------------------------------------------------------------------------------------\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nendif ()\n\n#---------------------------------------------------------------------------------------\n# Compiler config\n#---------------------------------------------------------------------------------------\nif (NOT CMAKE_CXX_STANDARD)\n    # If CMAKE_CXX_STANDARD is not set, configure it to 17 by default\n    set(CMAKE_CXX_STANDARD 17)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nelseif (CMAKE_CXX_STANDARD LESS 17)\n    # If CMAKE_CXX_STANDARD is set but less than 17, issue a fatal error\n    message(FATAL_ERROR \"Quill requires at least C++17. Please set CMAKE_CXX_STANDARD to 17 or higher.\")\nendif ()\n\n#-------------------------------------------------------------------------------------------------------\n# Required Packages\n#-------------------------------------------------------------------------------------------------------\nfind_package(Threads REQUIRED)\n\nif (QUILL_BUILD_TESTS)\n    enable_testing()\n\n    if (QUILL_USE_VALGRIND)\n        # find valgrind\n        find_program(MEMORYCHECK_COMMAND NAMES valgrind)\n        if (NOT MEMORYCHECK_COMMAND)\n            message(WARNING \"Valgrind not found\")\n        endif ()\n\n        # set valgrind params\n        set(MEMORYCHECK_COMMAND_OPTIONS \"--tool=memcheck --leak-check=full --leak-resolution=med --show-leak-kinds=all --track-origins=yes --vgdb=no --fair-sched=yes\")\n\n        # add memcheck test action to ctest\n        include(CTest)\n    endif ()\nendif ()\n\n# Error out if QUILL_ENABLE_EXTENSIVE_TESTS is ON but QUILL_BUILD_TESTS is OFF\nif (QUILL_ENABLE_EXTENSIVE_TESTS AND NOT QUILL_BUILD_TESTS)\n    message(FATAL_ERROR \"QUILL_ENABLE_EXTENSIVE_TESTS requires QUILL_BUILD_TESTS to be enabled. Please enable QUILL_BUILD_TESTS.\")\nendif ()\n\n#-------------------------------------------------------------------------------------------------------\n# Log Info\n#-------------------------------------------------------------------------------------------------------\nif (QUILL_MASTER_PROJECT)\n    option(QUILL_VERBOSE_MAKEFILE \"Enable verbose output for makefiles when Quill is the master project. This provides detailed information about the build process.\" OFF)\n    message(STATUS \"CMAKE_BUILD_TYPE: \" ${CMAKE_BUILD_TYPE})\n    message(STATUS \"QUILL_VERSION: ${QUILL_VERSION}\")\nendif ()\n\nmessage(STATUS \"QUILL_NO_EXCEPTIONS: \" ${QUILL_NO_EXCEPTIONS})\nmessage(STATUS \"QUILL_NO_THREAD_NAME_SUPPORT: \" ${QUILL_NO_THREAD_NAME_SUPPORT})\nmessage(STATUS \"QUILL_X86ARCH: \" ${QUILL_X86ARCH})\nmessage(STATUS \"QUILL_DISABLE_NON_PREFIXED_MACROS: \" ${QUILL_DISABLE_NON_PREFIXED_MACROS})\nmessage(STATUS \"QUILL_ENABLE_INSTALL: \" ${QUILL_ENABLE_INSTALL})\n\n#---------------------------------------------------------------------------------------\n# Verbose make file option\n#---------------------------------------------------------------------------------------\nif (QUILL_VERBOSE_MAKEFILE)\n    set(CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL \"Verbose output\" FORCE)\nendif ()\n\n# address sanitizer flags\nif (QUILL_SANITIZE_ADDRESS)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address,undefined -fno-omit-frame-pointer -g\")\nendif ()\n\n# thread sanitizer flags\nif (QUILL_SANITIZE_THREAD)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -g\")\nendif ()\n\n# Append extra options for coverage\nif (QUILL_CODE_COVERAGE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -fno-omit-frame-pointer -g -fprofile-arcs -ftest-coverage\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -ftest-coverage\")\nendif ()\n\nif (QUILL_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif ()\n\nif (QUILL_BUILD_BENCHMARKS)\n    add_subdirectory(benchmarks)\nendif ()\n\nif (QUILL_BUILD_TESTS AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/test)\n    add_subdirectory(test)\nendif ()\n\n# library name\nset(TARGET_NAME quill)\n\n# header files\nset(HEADER_FILES\n        include/quill/backend/BackendManager.h\n        include/quill/backend/BackendOptions.h\n        include/quill/backend/BackendWorker.h\n        include/quill/backend/BacktraceStorage.h\n        include/quill/backend/ManualBackendWorker.h\n        include/quill/backend/PatternFormatter.h\n        include/quill/backend/RdtscClock.h\n        include/quill/backend/SignalHandler.h\n        include/quill/backend/StringFromTime.h\n        include/quill/backend/ThreadUtilities.h\n        include/quill/backend/TimestampFormatter.h\n        include/quill/backend/TransitEvent.h\n        include/quill/backend/TransitEventBuffer.h\n        include/quill/backend/BackendUtilities.h\n\n        include/quill/bundled/fmt/args.h\n        include/quill/bundled/fmt/base.h\n        include/quill/bundled/fmt/chrono.h\n        include/quill/bundled/fmt/color.h\n        include/quill/bundled/fmt/compile.h\n        include/quill/bundled/fmt/format.h\n        include/quill/bundled/fmt/format-inl.h\n        include/quill/bundled/fmt/os.h\n        include/quill/bundled/fmt/ostream.h\n        include/quill/bundled/fmt/printf.h\n        include/quill/bundled/fmt/ranges.h\n        include/quill/bundled/fmt/std.h\n        include/quill/bundled/fmt/xchar.h\n\n        include/quill/core/Attributes.h\n        include/quill/core/BoundedSPSCQueue.h\n        include/quill/core/Common.h\n        include/quill/core/DynamicFormatArgStore.h\n        include/quill/core/Codec.h\n        include/quill/core/Filesystem.h\n        include/quill/core/FrontendOptions.h\n        include/quill/core/InlinedVector.h\n        include/quill/core/LoggerBase.h\n        include/quill/core/LoggerManager.h\n        include/quill/core/LogLevel.h\n        include/quill/core/MacroMetadata.h\n        include/quill/core/MathUtilities.h\n        include/quill/core/PatternFormatterOptions.h\n        include/quill/core/QuillError.h\n        include/quill/core/Rdtsc.h\n        include/quill/core/SinkManager.h\n        include/quill/core/Spinlock.h\n        include/quill/core/ThreadContextManager.h\n        include/quill/core/TimeUtilities.h\n        include/quill/core/UnboundedSPSCQueue.h\n        include/quill/backend/Utf8Conv.h\n\n        include/quill/filters/Filter.h\n\n        include/quill/sinks/ConsoleSink.h\n        include/quill/sinks/FileSink.h\n        include/quill/sinks/JsonConsoleSink.h\n        include/quill/sinks/JsonFileSink.h\n        include/quill/sinks/NullSink.h\n        include/quill/sinks/RotatingFileSink.h\n        include/quill/sinks/Sink.h\n        include/quill/sinks/StreamSink.h\n\n        include/quill/std/Array.h\n        include/quill/std/Chrono.h\n        include/quill/std/Deque.h\n        include/quill/std/FilesystemPath.h\n        include/quill/std/ForwardList.h\n        include/quill/std/List.h\n        include/quill/std/Map.h\n        include/quill/std/Optional.h\n        include/quill/std/Pair.h\n        include/quill/std/Set.h\n        include/quill/std/Tuple.h\n        include/quill/std/UnorderedMap.h\n        include/quill/std/UnorderedSet.h\n        include/quill/std/Vector.h\n        include/quill/std/WideString.h\n\n        include/quill/Backend.h\n        include/quill/BackendTscClock.h\n        include/quill/CsvWriter.h\n        include/quill/Frontend.h\n        include/quill/Logger.h\n        include/quill/LogMacros.h\n        include/quill/StringRef.h\n        include/quill/TriviallyCopyableCodec.h\n        include/quill/UserClockSource.h\n        include/quill/Utility.h\n)\n\n# Add as a library\nadd_library(${TARGET_NAME} INTERFACE)\nadd_library(${TARGET_NAME}::${TARGET_NAME} ALIAS ${TARGET_NAME})\n\nif (QUILL_NO_EXCEPTIONS)\n    target_compile_definitions(${TARGET_NAME} PUBLIC INTERFACE -DQUILL_NO_EXCEPTIONS)\nendif ()\n\nif (QUILL_NO_THREAD_NAME_SUPPORT)\n    target_compile_definitions(${TARGET_NAME} PUBLIC INTERFACE -DQUILL_NO_THREAD_NAME_SUPPORT)\nendif ()\n\nif (QUILL_X86ARCH)\n    target_compile_definitions(${TARGET_NAME} PUBLIC INTERFACE -DQUILL_X86ARCH)\nendif ()\n\nif (QUILL_DISABLE_NON_PREFIXED_MACROS)\n    target_compile_definitions(${TARGET_NAME} PUBLIC INTERFACE -DQUILL_DISABLE_NON_PREFIXED_MACROS)\nendif ()\n\nif (CMAKE_VERSION VERSION_GREATER_EQUAL 3.19)\n    # cmake prior to 3.19 does not support target_sources for interface libraries\n    target_sources(${TARGET_NAME} PRIVATE ${HEADER_FILES})\nendif ()\n\n# Link dependencies\ntarget_link_libraries(${TARGET_NAME} PUBLIC INTERFACE Threads::Threads)\n\nif (MINGW)\n    # strftime requires this when using MinGw to correctly format the time ..\n    target_link_libraries(${TARGET_NAME} PUBLIC INTERFACE ucrtbase)\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)\n    target_link_libraries(${TARGET_NAME} PUBLIC INTERFACE stdc++fs)\nendif ()\n\n# Add include directories for this library\ntarget_include_directories(${TARGET_NAME}\n        INTERFACE\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:include>)\n\n# Compiler options\ntarget_compile_options(${TARGET_NAME} INTERFACE\n        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>>:-Wno-gnu-zero-variadic-macro-arguments>)\n\n# Install\nif (QUILL_MASTER_PROJECT OR QUILL_ENABLE_INSTALL)\n    # ---- Install ---- #\n    include(GNUInstallDirs)\n    include(CMakePackageConfigHelpers)\n\n    set(version_config ${PROJECT_BINARY_DIR}/quill-config-version.cmake)\n    set(project_config ${PROJECT_BINARY_DIR}/quill-config.cmake)\n    set(pkgconfig ${PROJECT_BINARY_DIR}/quill.pc)\n    set(targets_export_name quill-targets)\n\n    set(QUILL_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/quill CACHE STRING\n            \"Installation directory for cmake files, relative to ${CMAKE_INSTALL_PREFIX}.\")\n\n    set(QUILL_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING\n            \"Installation directory for libraries, relative to ${CMAKE_INSTALL_PREFIX}.\")\n\n    set(QUILL_INC_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE STRING\n            \"Installation directory for include files, relative to ${CMAKE_INSTALL_PREFIX}.\")\n\n    set(QUILL_PKGCONFIG_DIR ${CMAKE_INSTALL_PREFIX}/pkgconfig CACHE PATH\n            \"Installation directory for pkgconfig (.pc) files, relative to ${CMAKE_INSTALL_PREFIX}.\")\n\n    if (WIN32)\n        set(QUILL_PTHREAD_LIBS \"\")\n    else ()\n        set(QUILL_PTHREAD_LIBS \"-lpthread\")\n    endif ()\n\n    # Generate pkgconfig\n    configure_file(\n            \"${CMAKE_CURRENT_LIST_DIR}/cmake/quill.pc.in\"\n            \"${pkgconfig}\"\n            @ONLY)\n\n    # Copy pkgconfig\n    install(FILES \"${pkgconfig}\" DESTINATION \"${QUILL_PKGCONFIG_DIR}\")\n\n    # Generate the version, config and target files into the build directory.\n    write_basic_package_version_file(\n            ${version_config}\n            VERSION ${QUILL_VERSION}\n            COMPATIBILITY AnyNewerVersion)\n\n    configure_package_config_file(\n            ${CMAKE_CURRENT_LIST_DIR}/cmake/quill-config.cmake.in\n            ${project_config}\n            INSTALL_DESTINATION ${QUILL_CMAKE_DIR})\n\n    # Install version, config files\n    install(FILES ${project_config} ${version_config}\n            DESTINATION ${QUILL_CMAKE_DIR})\n\n    # Install the headers\n    install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/include/quill DESTINATION ${QUILL_INC_DIR})\n\n    # Install the library\n    install(TARGETS ${TARGET_NAME} EXPORT ${targets_export_name}\n            LIBRARY DESTINATION ${QUILL_LIB_DIR}\n            ARCHIVE DESTINATION ${QUILL_LIB_DIR}\n            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    # Export the library\n    install(EXPORT ${targets_export_name} DESTINATION ${QUILL_CMAKE_DIR}\n            NAMESPACE quill::)\n\n    # ---- Packaging ---- #\n    set(CPACK_GENERATOR ZIP)\n    set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)\n    set(CPACK_INSTALL_CMAKE_PROJECTS \"${CMAKE_BINARY_DIR}\" \"${PROJECT_NAME}\" ALL .)\n    set(CPACK_PROJECT_URL \"https://github.com/odygrd/quill\")\n    set(CPACK_PACKAGE_VENDOR \"Odysseas Georgoudis\")\n    set(CPACK_PACKAGE_CONTACT \"Odysseas Odysseas <odygrd@hotmail.com>\")\n    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Asynchronous Low Latency C++ Logging Library\")\n    set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n    set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n    set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\n    set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})\n    set(CPACK_PACKAGE_RELOCATABLE ON)\n    set(CPACK_RPM_PACKAGE_LICENSE \"MIT\")\n    set(CPACK_RPM_PACKAGE_GROUP \"System Environment/Libraries\")\n    set(CPACK_RPM_PACKAGE_URL ${CPACK_PROJECT_URL})\n    set(CPACK_RPM_PACKAGE_DESCRIPTION \"Asynchronous Low Latency C++ Logging Library\")\n    include(CPack)\nendif ()\n\nif (QUILL_DOCS_GEN)\n    add_subdirectory(docs)\nendif ()"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "MIT License\n\nCopyright (c) 2020 - present, Odysseas Georgoudis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.1767578125,
          "content": "module(\n    name = \"quill\",\n    version = \"7.5.0\",\n    compatibility_level = 1,\n)\n\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"rules_cc\", version = \"0.1.0\")\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.2763671875,
          "content": "<div align=\"center\">\n  <br>\n  <img src=\"docs/logo.png\" alt=\"logo\" width=\"200\" height=\"auto\" />\n  <h1>Quill</h1>\n\n  <p><b>Asynchronous Low Latency C++ Logging Library</b></p>\n\n  <div>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Alinux\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/linux.yml?branch=master&label=linux&logo=linux&style=flat-square\" alt=\"linux-ci\" />\n    </a>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Amacos\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/macos.yml?branch=master&label=macos&logo=apple&logoColor=white&style=flat-square\" alt=\"macos-ci\" />\n    </a>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Awindows\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/windows.yml?branch=master&label=windows&logo=windows&logoColor=blue&style=flat-square\" alt=\"windows-ci\" />\n    </a>\n  </div>\n\n  <div>\n    <a href=\"https://codecov.io/gh/odygrd/quill\">\n      <img src=\"https://img.shields.io/codecov/c/gh/odygrd/quill/master.svg?logo=codecov&style=flat-square\" alt=\"Codecov\" />\n    </a>\n    <a href=\"https://app.codacy.com/gh/odygrd/quill/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade\">\n      <img src=\"https://img.shields.io/codacy/grade/cd387bc34658475d98bff84db3ad5287?logo=codacy&style=flat-square\" alt=\"Codacy\" />\n    </a>\n    <a href=\"https://www.codefactor.io/repository/github/odygrd/quill\">\n      <img src=\"https://img.shields.io/codefactor/grade/github/odygrd/quill?logo=codefactor&style=flat-square\" alt=\"CodeFactor\" />\n     </a>\n  </div>\n\n  <div>\n    <a href=\"https://opensource.org/licenses/MIT\">\n      <img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"license\" />\n    </a>\n    <a href=\"https://en.wikipedia.org/wiki/C%2B%2B17\">\n      <img src=\"https://img.shields.io/badge/language-C%2B%2B17-red.svg?style=flat-square\" alt=\"language\" />\n    </a>\n  </div>\n\n<h4>\n    <a href=\"https://quillcpp.readthedocs.io\" title=\"Explore the full documentation\">📚 Documentation</a>\n  <span> · </span>\n    <a href=\"https://quillcpp.readthedocs.io/en/latest/cheat_sheet.html\" title=\"Quick reference for common tasks\">⚡ Cheat Sheet</a>\n  <span> · </span>\n    <a href=\"https://github.com/odygrd/quill/issues/new?assignees=&labels=&projects=&template=bug-report.md&title=\" title=\"Report a bug or issue\">🐛 Report Bug</a>\n  <span> · </span>\n    <a href=\"https://github.com/odygrd/quill/issues/new?assignees=&labels=&projects=&template=feature_request.md&title=\">💡 Request Feature</a>\n  </h4>\n\n<div align=\"center\"><img src=\"docs/quill_demo.gif\" width=\"75%\" ></div>\n\n</div>\n\n## 🧭 Table of Contents\n\n- [Introduction](#-introduction)\n- [Quick Start](#-quick-start)\n- [Features](#-features)\n- [Performance](#-performance)\n- [Usage](#-usage)\n- [Design](#-design)\n- [Caveats](#-caveats)\n- [License](#-license)\n\n## ✨ Introduction\n\nQuill is a high-performance asynchronous logging library. It is particularly suited for performance-critical\napplications where every microsecond counts.\n\n- **Performance-Focused**: Quill consistently outperforms many popular logging libraries.\n- **Feature-Rich**: Packed with advanced features to meet diverse logging needs.\n- **Battle-Tested**: Proven in demanding production environments.\n- **Extensive Documentation**: Comprehensive guides and examples available.\n- **Community-Driven**: Open to contributions, feedback, and feature requests.\n\nTry it on [Compiler Explorer](https://godbolt.org/z/zEsxsxcoq)\n\n## ⏩ Quick Start\n\nGetting started is easy and straightforward. Follow these steps to integrate the library into your project:\n\n### Installation\n\nYou can install Quill using the package manager of your choice:\n\n| Package Manager |              Installation Command              |\n|:---------------:|:----------------------------------------------:|\n|      vcpkg      |             `vcpkg install quill`              |\n|      Conan      |             `conan install quill`              |\n|    Homebrew     |              `brew install quill`              |\n|  Meson WrapDB   |           `meson wrap install quill`           |\n|      Conda      |      `conda install -c conda-forge quill`      |\n|     Bzlmod      | `bazel_dep(name = \"quill\", version = \"x.y.z\")` |\n|      xmake      |             `xrepo install quill`              |\n|       nix       |            `nix-shell -p quill-log`            |\n\n### Setup\n\nOnce installed, you can start using Quill with the following code:\n\n```c++\n#include \"quill/Backend.h\"\n#include \"quill/Frontend.h\"\n#include \"quill/LogMacros.h\"\n#include \"quill/Logger.h\"\n#include \"quill/sinks/ConsoleSink.h\"\n#include <string_view>\n\nint main()\n{\n  quill::Backend::start();\n\n  quill::Logger* logger = quill::Frontend::create_or_get_logger(\n    \"root\", quill::Frontend::create_or_get_sink<quill::ConsoleSink>(\"sink_id_1\"));\n\n  LOG_INFO(logger, \"Hello from {}!\", std::string_view{\"Quill\"});\n}\n```\n\n## 🎯 Features\n\n- **High-Performance**: Ultra-low latency performance. View [Benchmarks](http://github.com/odygrd/quill#performance)\n- **Asynchronous Processing**: Background thread handles formatting and I/O, keeping your main thread responsive.\n- **Minimal Header Includes**:\n    - **Frontend**: Only `Logger.h` and `LogMacros.h` needed for logging. Lightweight with minimal dependencies.\n    - **Backend**: Single `.cpp` file inclusion. No backend code injection into other translation units.\n- **Compile-Time Optimization**: Eliminate specific log levels at compile time.\n- **Custom Formatters**: Define your own log output patterns.\n  See [Formatters](https://quillcpp.readthedocs.io/en/latest/formatters.html).\n- **Timestamp-Ordered Logs**: Simplify debugging of multithreaded applications with chronologically ordered logs.\n- **Flexible Timestamps**: Support for `rdtsc`, `chrono`, or `custom clocks` - ideal for simulations and more.\n- **Backtrace Logging**: Store messages in a ring buffer for on-demand display.\n  See [Backtrace Logging](https://quillcpp.readthedocs.io/en/latest/backtrace_logging.html)\n- **Multiple Output Sinks**: Console (with color), files (with rotation), JSON, ability to create custom sinks and more.\n- **Log Filtering**: Process only relevant messages.\n  See [Filters](https://quillcpp.readthedocs.io/en/latest/filters.html).\n- **JSON Logging**: Structured log output.\n  See [JSON Logging](https://quillcpp.readthedocs.io/en/latest/json_logging.html)\n- **Configurable Queue Modes**: `bounded/unbounded` and `blocking/dropping` options with monitoring on dropped messages,\n  queue reallocations, and blocked hot threads.\n- **Crash Handling**: Built-in signal handler for log preservation during crashes.\n- **Huge Pages Support (Linux)**: Leverage huge pages on the hot path for optimized performance.\n- **Wide Character Support (Windows)**: Compatible with ASCII-encoded wide strings and STL containers consisting of wide\n  strings.\n- **Exception-Free Option**: Configurable builds with or without exception handling.\n- **Clean Codebase**: Maintained to high standards, warning-free even at strict levels.\n- **Type-Safe API**: Built on [{fmt}](http://github.com/fmtlib/fmt) library.\n\n## 🚀 Performance\n\n### System Configuration\n\n- **OS:** Linux RHEL 9.4\n- **CPU:** Intel Core i5-12600 (12th Gen) @ 4.8 GHz\n- **Compiler:** GCC 13.1\n- **Benchmark-Tuned System:** The system is specifically tuned for benchmarking.\n\n- **Command Line Parameters:**\n  ```shell\n  $ cat /proc/cmdline\n  BOOT_IMAGE=(hd0,gpt2)/vmlinuz-5.14.0-427.13.1.el9_4.x86_64 root=/dev/mapper/rhel-root ro crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet nohz=on nohz_full=1-5 rcu_nocbs=1-5 isolcpus=1-5 mitigations=off transparent_hugepage=never intel_pstate=disable nosoftlockup irqaffinity=0 processor.max_cstate=1 nosoftirqd sched_tick_offload=0 spec_store_bypass_disable=off spectre_v2=off iommu=pt\n  ```\n\nYou can find the benchmark code on the [logger_benchmarks](http://github.com/odygrd/logger_benchmarks) repository.\n\n### Latency\n\nThe results presented in the tables below are measured in `nanoseconds (ns)`.\n\nThe tables are sorted by the 95th percentile\n\n#### Logging Numbers\n\n`LOG_INFO(logger, \"Logging int: {}, int: {}, double: {}\", i, j, d)`.\n\n##### 1 Thread Logging\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  7   |  8   |  8   |  9   |  9   |   11   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  9   |  9   |  10  |  10  |  12  |   13   |\n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  10  |  10  |  10  |  10  |  12  |   14   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  13  |  14  |  16  |  17  |  19  |   25   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  21  |  21  |  22  |  22  |  56  |   93   |\n| [XTR](https://github.com/choll/xtr)                            |  7   |  7   |  29  |  30  |  33  |   53   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  26  |  28  |  31  |  32  |  35  |   49   |\n| [BqLog](https://github.com/Tencent/BqLog)                      |  29  |  29  |  30  |  49  |  56  |   71   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        |  83  |  96  | 117  | 125  | 152  |  197   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 143  | 147  | 152  | 158  | 165  |  177   |\n| [g3log](http://github.com/KjellKod/g3log)                      | 1161 | 1259 | 1329 | 1419 | 1602 |  1827  |\n\n![numbers_1_thread_logging.webp](docs%2Fcharts%2Fnumbers_1_thread_logging.webp)\n\n##### 4 Threads Logging Simultaneously\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  8   |  9   |  9   |  10  |  11  |   13   |\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  8   |  9   |  10  |  10  |  12  |   14   |\n| [XTR](https://github.com/choll/xtr)                            |  7   |  8   |  9   |  11  |  31  |   38   | \n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  10  |  11  |  11  |  12  |  13  |   15   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  15  |  17  |  20  |  23  |  27  |   32   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  21  |  22  |  22  |  23  |  62  |  100   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  19  |  23  |  26  |  28  |  34  |   55   |\n| [BqLog](https://github.com/Tencent/BqLog)                      |  31  |  33  |  34  |  55  |  61  |   73   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        |  58  |  90  | 123  | 131  | 168  |  242   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 210  | 243  | 288  | 313  | 382  |  694   |\n| [g3log](http://github.com/KjellKod/g3log)                      | 1271 | 1337 | 1396 | 1437 | 1614 |  1899  |\n\n![numbers_4_thread_logging.webp](docs%2Fcharts%2Fnumbers_4_thread_logging.webp)\n\n#### Logging Large Strings\n\nLogging `std::string` over 35 characters to prevent the short string optimization.\n\n`LOG_INFO(logger, \"Logging int: {}, int: {}, string: {}\", i, j, large_string)`.\n\n##### 1 Thread Logging\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  11  |  13  |  13  |  14  |  15  |   16   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  11  |  12  |  13  |  14  |  15  |   17   |\n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  14  |  15  |  16  |  17  |  18  |   19   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  22  |  23  |  24  |  25  |  61  |  100   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  15  |  17  |  21  |  27  |  33  |   39   |\n| [XTR](https://github.com/choll/xtr)                            |  8   |  9   |  29  |  31  |  35  |   54   |\n| [BqLog](https://github.com/Tencent/BqLog)                      |  29  |  30  |  31  |  51  |  60  |   71   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  91  | 107  | 115  | 118  | 124  |  135   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        |  86  |  97  | 119  | 128  | 159  |  268   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 120  | 124  | 128  | 132  | 141  |  151   |\n| [g3log](http://github.com/KjellKod/g3log)                      | 881  | 956  | 1018 | 1089 | 1264 |  1494  |\n\n![large_strings_1_thread_logging.webp](docs%2Fcharts%2Flarge_strings_1_thread_logging.webp)\n\n##### 4 Threads Logging Simultaneously\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [XTR](https://github.com/choll/xtr)                            |  9   |  11  |  13  |  14  |  32  |   40   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  11  |  12  |  13  |  14  |  16  |   19   |\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  13  |  14  |  15  |  16  |  17  |   19   |\n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  15  |  16  |  17  |  18  |  19  |   21   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  23  |  25  |  27  |  28  |  65  |  105   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  16  |  20  |  32  |  38  |  44  |   51   |\n| [BqLog](https://github.com/Tencent/BqLog)                      |  32  |  33  |  35  |  56  |  64  |   76   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  79  |  94  | 104  | 107  | 114  |  132   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        |  85  |  93  | 125  | 133  | 168  |  237   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 178  | 218  | 261  | 281  | 381  |  651   |\n| [g3log](http://github.com/KjellKod/g3log)                      | 992  | 1055 | 1121 | 1178 | 1360 |  1600  |\n\n![large_strings_4_thread_logging.webp](docs%2Fcharts%2Flarge_strings_4_thread_logging.webp)\n\n#### Logging Complex Types\n\nLogging `std::vector<std::string>` containing 16 large strings, each ranging from 50 to 60 characters.\n\nNote: some of the previous loggers do not support passing a `std::vector` as an argument.\n\n`LOG_INFO(logger, \"Logging int: {}, int: {}, vector: {}\", i, j, v)`.\n\n##### 1 Thread Logging\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  48  |  50  |  53  |  55  |  58  |   62   |\n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  54  |  56  |  57  |  58  |  61  |   66   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  68  |  69  |  72  |  74  |  79  |  281   |\n| [XTR](https://github.com/choll/xtr)                            | 284  | 294  | 340  | 346  | 356  |  575   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     | 711  | 730  | 754  | 770  | 804  |  834   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 6191 | 6261 | 6330 | 6386 | 6633 |  7320  |\n\n![vector_1_thread_logging.webp](docs%2Fcharts%2Fvector_1_thread_logging.webp)\n\n##### 4 Threads Logging Simultaneously\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill Bounded Dropping Queue](http://github.com/odygrd/quill) |  50  |  52  |  54  |  56  |  60  |   82   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  70  |  72  |  75  |  79  |  88  |  286   |\n| [Quill Unbounded Queue](http://github.com/odygrd/quill)        |  97  | 107  | 116  | 122  | 135  |  148   |\n| [XTR](https://github.com/choll/xtr)                            | 512  | 711  | 761  | 791  | 865  |  945   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     | 780  | 804  | 823  | 835  | 860  |  896   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 6469 | 6549 | 6641 | 6735 | 7631 |  9430  |\n\n![vector_4_thread_logging.webp](docs%2Fcharts%2Fvector_4_thread_logging.webp)\n\nThe benchmark methodology involves logging 20 messages in a loop, calculating and storing the average latency for those\n20 messages, then waiting around ~2 milliseconds, and repeating this process for a specified number of iterations.\n\n_In the `Quill Bounded Dropping` benchmarks, the dropping queue size is set to `262,144` bytes, which is double the\ndefault size of `131,072` bytes._\n\n### Throughput\n\nThroughput is measured by calculating the maximum number of log messages the backend logging thread can write to a log\nfile per second.\n\nThe tests were run on the same system used for the latency benchmarks.\n\nAlthough Quill’s primary focus is not on maximizing throughput, it efficiently manages log messages across multiple\nthreads. Benchmarking throughput of asynchronous logging libraries presents certain challenges. Some libraries may drop\nlog messages, leading to smaller-than-expected log files, while others only provide asynchronous flushing, making it\ndifficult to verify when the backend thread has fully processed all messages.\n\nFor comparison, we benchmark against other asynchronous logging libraries that offer guaranteed logging with a\nflush-and-wait mechanism.\n\nNote that `MS BinLog` writes log data to a binary file, which requires offline formatting with an additional\nprogram—this makes it an unfair comparison, but it is included for reference.\n\nSimilarly, `BqLog (binary log)` uses the compressed binary log appender, and its log files are not human-readable unless\nprocessed offline. However, it is included for reference. The other version of `BqLog` is using a text appender and\nproduces human-readable log files.\n\nIn the same way, `Platformlab Nanolog` also outputs binary logs and is expected to deliver high throughput. However, for\nreasons unexplained, the benchmark runs significantly slower (10x longer) than the other libraries, so it is excluded\nfrom the table.\n\nLogging 4 million times the message `\"Iteration: {} int: {} double: {}\"`\n\n| Library                                                           | million msg/second | elapsed time |\n|-------------------------------------------------------------------|:------------------:|:------------:|\n| [MS BinLog (binary log)](http://github.com/Morgan-Stanley/binlog) |       63.80        |    62 ms     |\n| [BqLog (binary log)](https://github.com/Tencent/BqLog)            |       15.92        |    251 ms    |\n| [Quill](http://github.com/odygrd/quill)                           |        5.70        |    701 ms    |\n| [BqLog](https://github.com/Tencent/BqLog)                         |        4.93        |    811 ms    |\n| [spdlog](http://github.com/gabime/spdlog)                         |        3.54        |   1128 ms    |\n| [fmtlog](http://github.com/MengRao/fmtlog)                        |        2.90        |   1378 ms    |\n| [Reckless](http://github.com/mattiasflodin/reckless)              |        2.72        |   1471 ms    |\n| [XTR](https://github.com/choll/xtr)                               |        2.61        |   1534 ms    |\n\n![throughput_chart.webp](docs%2Fcharts%2Fthroughput_chart.webp)\n\n### Compilation Time\n\nCompile times are measured using `clang 15` and for `Release` build.\n\nBelow, you can find the additional headers that the library will include when you need to log, following\nthe [recommended_usage](https://github.com/odygrd/quill/blob/master/examples/recommended_usage/recommended_usage.cpp)\nexample\n\n![quill_v5_1_compiler_profile.speedscope.png](docs%2Fquill_v5_1_compiler_profile.speedscope.png)\n\nThere is also a compile-time benchmark measuring the compilation time of 2000 auto-generated log statements with\nvarious arguments. You can find\nit [here](https://github.com/odygrd/quill/blob/master/benchmarks/compile_time/compile_time_bench.cpp). It takes\napproximately 30 seconds to compile.\n\n![quill_v5_1_compiler_bench.speedscope.png](docs%2Fquill_v5_1_compiler_bench.speedscope.png)\n\n### Verdict\n\nQuill excels in hot path latency benchmarks and supports high throughput, offering a rich set of features that outshines\nother logging libraries.\n\nThe human-readable log files facilitate easier debugging and analysis. While initially larger, they compress\nefficiently, with the size difference between human-readable and binary logs becoming minimal once zipped.\n\nFor example, for the same amount of messages:\n\n```\nms_binlog_backend_total_time.blog (binary log): 177 MB\nms_binlog_backend_total_time.zip (zipped binary log): 35 MB\n```\n\n```\nquill_backend_total_time.log (human-readable log): 448 MB\nquill_backend_total_time.zip (zipped human-readable log): 47 MB\n```\n\nIf Quill were not available, MS BinLog would be a strong alternative. It delivers great latency on the hot path and\ngenerates smaller binary log files. However, the binary logs necessitate offline processing with additional tools, which\ncan be less convenient.\n\n## 🧩 Usage\n\n```c++\n#include \"quill/Backend.h\"\n#include \"quill/Frontend.h\"\n#include \"quill/LogMacros.h\"\n#include \"quill/Logger.h\"\n#include \"quill/sinks/ConsoleSink.h\"\n#include \"quill/std/Array.h\"\n\n#include <string>\n#include <utility>\n\nint main()\n{\n  // Backend  \n  quill::BackendOptions backend_options;\n  quill::Backend::start(backend_options);\n\n  // Frontend\n  auto console_sink = quill::Frontend::create_or_get_sink<quill::ConsoleSink>(\"sink_id_1\");\n  quill::Logger* logger = quill::Frontend::create_or_get_logger(\"root\", std::move(console_sink));\n\n  // Change the LogLevel to print everything\n  logger->set_log_level(quill::LogLevel::TraceL3);\n\n  // A log message with number 123\n  int a = 123;\n  std::string l = \"log\";\n  LOG_INFO(logger, \"A {} message with number {}\", l, a);\n\n  // libfmt formatting language is supported 3.14e+00\n  double pi = 3.141592653589793;\n  LOG_INFO(logger, \"libfmt formatting language is supported {:.2e}\", pi);\n\n  // Logging STD types is supported [1, 2, 3]\n  std::array<int, 3> arr = {1, 2, 3};\n  LOG_INFO(logger, \"Logging STD types is supported {}\", arr);\n\n  // Logging STD types is supported [arr: [1, 2, 3]]\n  LOGV_INFO(logger, \"Logging STD types is supported\", arr);\n\n  // A message with two variables [a: 123, b: 3.17]\n  double b = 3.17;\n  LOGV_INFO(logger, \"A message with two variables\", a, b);\n\n  for (uint32_t i = 0; i < 10; ++i)\n  {\n    // Will only log the message once per second\n    LOG_INFO_LIMIT(std::chrono::seconds{1}, logger, \"A {} message with number {}\", l, a);\n    LOGV_INFO_LIMIT(std::chrono::seconds{1}, logger, \"A message with two variables\", a, b);\n  }\n\n  LOG_TRACE_L3(logger, \"Support for floats {:03.2f}\", 1.23456);\n  LOG_TRACE_L2(logger, \"Positional arguments are {1} {0} \", \"too\", \"supported\");\n  LOG_TRACE_L1(logger, \"{:>30}\", std::string_view {\"right aligned\"});\n  LOG_DEBUG(logger, \"Debugging foo {}\", 1234);\n  LOG_INFO(logger, \"Welcome to Quill!\");\n  LOG_WARNING(logger, \"A warning message.\");\n  LOG_ERROR(logger, \"An error message. error code {}\", 123);\n  LOG_CRITICAL(logger, \"A critical error.\");\n}\n```\n\n### Output\n\n![example_output.png](docs%2Fexample_output.png)\n\n### External CMake\n\n#### Building and Installing Quill\n\nTo get started with Quill, clone the repository and install it using CMake:\n\n```bash\ngit clone http://github.com/odygrd/quill.git\nmkdir cmake_build\ncd cmake_build\ncmake ..\nmake install\n```\n\n- **Custom Installation**: Specify a custom directory with `-DCMAKE_INSTALL_PREFIX=/path/to/install/dir`.\n- **Build Examples**: Include examples with `-DQUILL_BUILD_EXAMPLES=ON`.\n\nNext, add Quill to your project using `find_package()`:\n\n```cmake\nfind_package(quill REQUIRED)\ntarget_link_libraries(your_target PUBLIC quill::quill)\n```\n\n#### Sample Directory Structure\n\nOrganize your project directory like this:\n\n```\nmy_project/\n├── CMakeLists.txt\n├── main.cpp\n```\n\n#### Sample CMakeLists.txt\n\nHere’s a sample `CMakeLists.txt` to get you started:\n\n```cmake\n# If Quill is in a non-standard directory, specify its path.\nset(CMAKE_PREFIX_PATH /path/to/quill)\n\n# Find and link the Quill library.\nfind_package(quill REQUIRED)\nadd_executable(example main.cpp)\ntarget_link_libraries(example PUBLIC quill::quill)\n```\n\n### Embedded CMake\n\nFor a more integrated approach, embed Quill directly into your project:\n\n#### Sample Directory Structure\n\n```\nmy_project/\n├── quill/            # Quill repo folder\n├── CMakeLists.txt\n├── main.cpp\n```\n\n#### Sample CMakeLists.txt\n\nUse this `CMakeLists.txt` to include Quill directly:\n\n```cmake\ncmake_minimum_required(VERSION 3.1.0)\nproject(my_project)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nadd_subdirectory(quill)\nadd_executable(my_project main.cpp)\ntarget_link_libraries(my_project PUBLIC quill::quill)\n```\n\n### Android NDK\n\nBuilding Quill for Android? Add this flag during configuration:\n\n```bash\n-DQUILL_NO_THREAD_NAME_SUPPORT:BOOL=ON\n```\n\n### Meson\n\n#### Using WrapDB\n\nEasily integrate Quill with Meson’s `wrapdb`:\n\n```bash\nmeson wrap install quill\n```\n\n#### Manual Integration\n\nCopy the repository contents to your `subprojects` directory and add the following to your `meson.build`:\n\n```meson\nquill = subproject('quill')\nquill_dep = quill.get_variable('quill_dep')\nmy_build_target = executable('name', 'main.cpp', dependencies : [quill_dep], install : true)\n```\n\n### Bazel\n\n#### Using Blzmod\n\nQuill is available on `BLZMOD` for easy integration.\n\n#### Manual Integration\n\nFor manual setup, add Quill to your `BUILD.bazel` file like this:\n\n```bazel\ncc_binary(name = \"app\", srcs = [\"main.cpp\"], deps = [\"//quill_path:quill\"])\n```\n\n## 📐 Design\n\n### Frontend (caller-thread)\n\nWhen invoking a `LOG_` macro:\n\n1. Creates a static constexpr metadata object to store `Metadata` such as the format string and source location.\n\n2. Pushes the data SPSC lock-free queue. For each log message, the following variables are pushed\n\n| Variable   |                                                  Description                                                   |\n|------------|:--------------------------------------------------------------------------------------------------------------:|\n| timestamp  |                                               Current timestamp                                                |\n| Metadata*  |                                        Pointer to metadata information                                         |\n| Logger*    |                                         Pointer to the logger instance                                         |\n| DecodeFunc | A pointer to a templated function containing all the log message argument types, used for decoding the message |\n| Args...    |           A serialized binary copy of each log message argument that was passed to the `LOG_` macro            |\n\n### Backend\n\nConsumes each message from the SPSC queue, retrieves all the necessary information and then formats the message.\nSubsequently, forwards the log message to all Sinks associated with the Logger.\n\n![design.jpg](docs%2Fdesign.jpg)\n\n## 🚨 Caveats\n\nQuill may not work well with `fork()` since it spawns a background thread and `fork()` doesn't work well with\nmultithreading.\n\nIf your application uses `fork()` and you want to log in the child processes as well, you should call `quill::start()`\nafter the `fork()` call. Additionally, you should ensure that you write to different files in the parent and child\nprocesses to avoid conflicts.\n\nFor example :\n\n```c++\n#include \"quill/Backend.h\"\n#include \"quill/Frontend.h\"\n#include \"quill/LogMacros.h\"\n#include \"quill/Logger.h\"\n#include \"quill/sinks/FileSink.h\"\n\nint main()\n{\n  // DO NOT CALL THIS BEFORE FORK\n  // quill::Backend::start();\n\n  if (fork() == 0)\n  {\n    quill::Backend::start();\n        \n    // Get or create a handler to the file - Write to a different file\n    auto file_sink = quill::Frontend::create_or_get_sink<quill::FileSink>(\n      \"child.log\");\n    \n    quill::Logger* logger = quill::Frontend::create_or_get_logger(\"root\", std::move(file_sink));\n\n    QUILL_LOG_INFO(logger, \"Hello from Child {}\", 123);\n  }\n  else\n  {\n    quill::Backend::start();\n          \n    // Get or create a handler to the file - Write to a different file\n    auto file_sink = quill::Frontend::create_or_get_sink<quill::FileSink>(\n      \"parent.log\");\n    \n    quill::Logger* logger = quill::Frontend::create_or_get_logger(\"root\", std::move(file_sink));\n    \n    QUILL_LOG_INFO(logger, \"Hello from Parent {}\", 123);\n  }\n}\n```\n\n## 📝 License\n\nQuill is licensed under the [MIT License](http://opensource.org/licenses/MIT)\n\nQuill depends on third party libraries with separate copyright notices and license terms.\nYour use of the source code for these subcomponents is subject to the terms and conditions of the following licenses.\n\n- ([MIT License](http://opensource.org/licenses/MIT)) [{fmt}](http://github.com/fmtlib/fmt/blob/master/LICENSE.rst)\n- ([MIT License](http://opensource.org/licenses/MIT)) [doctest](http://github.com/onqtam/doctest/blob/master/LICENSE.txt)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.7265625,
          "content": "project('quill', 'cpp', version : '7.5.0', default_options : ['warning_level=3', 'cpp_std=c++17'])\n\ninc_dirs = include_directories('include')\n\ninterface_compile_args = meson.get_compiler('cpp').get_supported_arguments('-Wno-gnu-zero-variadic-macro-arguments')\n\nquill_dep = declare_dependency(include_directories : inc_dirs,\n                               dependencies : [dependency('threads')],\n                               compile_args : interface_compile_args)\n\ninstall_subdir('include/quill', install_dir : get_option('includedir'), install_tag : 'devel')\n\npkg_mod = import('pkgconfig')\npkg_mod.generate(\n    name : 'quill',\n    filebase : 'quill',\n    description : 'Asynchronous Low Latency C++ Logging Library',\n    subdirs : 'quill'\n)\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}