{
  "metadata": {
    "timestamp": 1736565736530,
    "page": 651,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ivansafrin/Polycode",
      "stars": 2383,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.7021484375,
          "content": "*.dll\n*.exe\n*.o\n*.lo\n*.a\n*.la\n*.dylib\n*.so\n*.pyc\n*.pbxuser\n*.mode1v3\n*.swp\n*.ipch\n*.sdf\n*.suo\n*.filters\n*.tlog\n*.obj\n*.res\n*.log\n*.pdb\n*.idb\n*.ilk\n*.lastbuildstate\n*.lib\n*.manifest\n*.exp\n*.zip\n*.swo\n*.swm\n*.swn\n*.opensdf\n*.user.*\n*.xcuserstate\n*.xcworkspace\n*.xcuserdata\n*.xcuserdatad\n*.orig\n*.tag\nUserInterfaceState.*\nPlayer/Build/Mac OS X/Polycode Player.xcodeproj/project.xcworkspace/xcuserdata/ivansafrin.xcuserdatad/UserInterfaceState.xcuserstate\n\n.substance\n\n/Bindings/Contents/LUA/API/Polycode/*.lua\n!/Bindings/Contents/LUA/API/Polycode/EventDispatcher.lua\n/Bindings/Contents/LUA/API/Polycode.lua\n/Bindings/Contents/LUA/API/api.pak\n/Bindings/Contents/LUA/Include/*.h\n/Bindings/Contents/LUA/Source/*.cpp\t\n/Bindings/Contents/LUA/Source\n\n/Modules/Bindings/2DPhysics/API/Physics2D.pak\n/Modules/Bindings/3DPhysics/API/Physics3D.pak\n/Modules/Bindings/UI/API/UI.pak\n\n/Modules/Bindings/2DPhysics/API/Physics2D/*.lua\n/Modules/Bindings/2DPhysics/API/Physics2D.lua\n/Modules/Bindings/2DPhysics/Include/*.h\n/Modules/Bindings/2DPhysics/Source/*.cpp\n\n/Modules/Bindings/3DPhysics/API/Physics3D/*.lua\n/Modules/Bindings/3DPhysics/API/Physics3D.lua\n/Modules/Bindings/3DPhysics/Include/*.h\n/Modules/Bindings/3DPhysics/Source/*.cpp\n\n/Modules/Bindings/UI/API/UI/*.lua\n/Modules/Bindings/UI/API/UI.lua\n/Modules/Bindings/UI/Include/*.h\n/Modules/Bindings/UI/Source/*.cpp\n\n/Player/Build\n/Standalone/Build\n\n/Dependencies/Build\n/Dependencies/Downloads\n/Dependencies/Local/libstem_gamepad/Build\n\n/IDE/Contents/Resources/Standalone\n\n/IDE/Build/Windows/*\n!/IDE/Build/Windows/main.cpp\n!/IDE/Build/Windows/Polycode.props\n!/IDE/Build/Windows/Polycode.sln\n!/IDE/Build/Windows/Polycode.vcxproj\n!/IDE/Build/Windows/Polycode.vcxproj.filters\n!/IDE/Build/Windows/Polycode.vcxproj.user\n!/IDE/Build/Windows/Polycode.rc\n!/IDE/Build/Windows/resource.h\n\n/IDE/Build/Windows2013/*\n!/IDE/Build/Windows2013/main.cpp\n!/IDE/Build/Windows2013/Polycode.props\n!/IDE/Build/Windows2013/Polycode.sln\n!/IDE/Build/Windows2013/Polycode.vcxproj\n!/IDE/Build/Windows2013/Polycode.vcxproj.filters\n!/IDE/Build/Windows2013/Polycode.vcxproj.user\n!/IDE/Build/Windows2013/Polycode.rc\n!/IDE/Build/Windows2013/resource.h\n\n/IDE/Build/Linux/Build\n\n/Core/Build/Mac\\ OS\\ X/build\n/IDE/Build/Mac\\ OS\\ X/build\n/Modules/Build/Mac\\ OS\\ X/build\n/Tools/Build/Mac\\ OS\\ X/build\n/Bindings/Build/Mac\\ OS\\ X/build\n/Core/Dependencies\n/Modules/Dependencies\n/IDE/Dependencies\n/Tools/Dependencies/assimp\n/Bindings/Dependencies\n/IDE/Mac\\ OS\\ X\n/qtcreator-build\nDebug\nRelease\n/Build\n/Documentation/Doxygen/output/standalone/Polycode\n/Documentation/Doxygen/output/standalone/Core\n/Documentation/Doxygen/output/standalone/Physics2D\n/Documentation/Doxygen/output/standalone/Physics3D\n/Documentation/Doxygen/output/standalone/Networking\n/Documentation/Doxygen/output/standalone/PolycodeUI\n\n/Documentation/Doxygen/output/web/Polycode\n/Documentation/Doxygen/output/web/Core\n/Documentation/Doxygen/output/web/Physics2D\n/Documentation/Doxygen/output/web/Physics3D\n/Documentation/Doxygen/output/web/Networking\n/Documentation/Doxygen/html\n/Documentation/Doxygen/latex\n\n/Tools/Build/Linux/polybuild*\n/Tools/Build/Linux/polyimport*\n\n# OS generated files #\n######################\n.DS_Store?\n.DS_Store\nehthumbs.db\nThumbs.db\n\nCore/Build/Mac OS X/PolyCore.xcodeproj/project.xcworkspace/xcuserdata/ivansafrin.xcuserdatad/UserInterfaceState.xcuserstate\n\nPlayer/Build/Mac OS X/Polycode Player.xcodeproj/project.xcworkspace/xcuserdata/ivansafrin.xcuserdatad/UserInterfaceState.xcuserstate\n\nPlayer/Build/Mac OS X/Polycode Player.xcodeproj/project.xcworkspace/xcuserdata/ivansafrin.xcuserdatad/UserInterfaceState.xcuserstate\n\n/Documentation/Lua/xml/*.xml\n\n/Documentation/Lua/site_html\n/Documentation/Lua/html/*\n!/Documentation/Lua/html/css\n!/Documentation/Lua/html/images\n!/Documentation/Lua/html/js\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0810546875,
          "content": "language: cpp\n\nsudo: required\n\ninstall: ./setup-travis.sh\n\nscript: ./BuildLinux.sh\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 8.685546875,
          "content": "# Building Polycode and dependencies #\r\n\r\nPolycode uses a CMake build generator for automatically downloading and\r\nbuilding required 3rd party packages and Polycode itself. Polycode is\r\nsetup for preferring custom static libraries over system ones, so \r\nplease use the dependency build system even if you have all of the\r\ndependencies installed on your computer.\r\n\r\nThe first dependency is CMake. It can be downloaded from \r\nhttp://cmake.org/cmake/resources/software.html or installed using apt\r\nor rpm on most Linux distributions. CMake 2.8.8 or greater is now required.\r\n\r\nWhen Polycode and its Dependencies are built, they will be available\r\nin the Release/YourArchitecture folder under the main source tree in \r\na structure that should mimic the main binary release.\r\n\r\nIf you wish to build a 32-bit version on a 64-bit machine in OS X, pass\r\n-DCMAKE_OSX_ARCHITECTURES=i386 as an argument to cmake\r\n\r\n## Building dependencies ##\r\n\r\nPolycode depends on a number of third party packages that are not\r\nincluded in the Polycode source tree:\r\n\r\n* [Lua](http://www.lua.org/)\r\n* [Freetype](http://www.freetype.org/)\r\n* [zlib](http://www.zlib.net/)\r\n* [libpng](http://www.libpng.org/pub/png/libpng.html)\r\n* [PhysicsFS](http://icculus.org/physfs/)\r\n* [Ogg Vorbis](http://www.vorbis.com/)\r\n* [OpenAL](http://www.openal.org/)\r\n* [SDL](http://www.libsdl.org/)\r\n* [Box2D](http://www.box2d.org/)\r\n* [Bullet Physics](http://bulletphysics.org/)\r\n* [Assimp](http://assimp.sourceforge.net/)\r\n\r\nThe CMake dependency build system will download and install static\r\nversion of these libraries into the Polycode source tree. It will NOT\r\nattempt to install any of these packages into your system.\r\n\r\nAll dependenices will be installed into the Polycode source tree under\r\n    Release/<Platform>/Framework/\r\n\r\nInstructions describe using CMake on the command line, you\r\nmay prefer to use the CMake GUI if unfamiliar with CMake.\r\n\r\n\r\n### Mac OS X and Xcode ###\r\n\r\nNOTE: If you are using the new Xcode that is downloaded from the AppStore\r\nand cmake complains about not finding Xcode in /Developer, you have to run this\r\ncommand to update the Xcode path:\r\nsudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer\r\n\r\nTo generate an Xcode project for building Polycode dependencies, perform\r\nthe following steps in the Polycode directory from a terminal:\r\n\r\n    cd Dependencies\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G Xcode ..\r\n    \r\nThis generates a PolycodeDependencies Xcode project in the Build \r\ndirectory. Building this project in Xcode will download, build and \r\ninstall the dependencies (make sure you build the ALL_BUILD target).\r\nNote that you need to build both Debug and\r\nRelease in Xcode \r\n\r\nNote: Release is \"Build for Archiving\" in Xcode4.\r\n\r\n### Windows and Visual Studio ###\r\n\r\nTo generate a Microsoft Visual Studio (any version) project for building\r\nPolycode dependencies, perform the following steps in the Polycode \r\ndirectory from a command prompt (for VS2010):\r\n\r\n    cd Dependencies\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G \"Visual Studio 10\" ..\r\n    \r\nThis generates a PolycodeDependencies.sln in the Build directory. \r\nBuilding the ALL_BUILD project in the solution in Visual Studio will download, build and \r\ninstall the dependencies. Note that you need to build both Debug and\r\nRelease.\r\n\r\nYou will also need to manually build the \"glext\" and \"wglext\" projects.\r\n\r\n### Unix Makefiles ###\r\n\r\nTo generate and build Debug and Release builds with Unix Makefiles \r\nperform the following steps in the Polycode directory from a terminal:\r\n\r\n    mkdir -p Dependencies/Build/Debug\r\n    cd Dependencies/Build/Debug\r\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug ../..\r\n    make\r\n    mkdir ../Release\r\n    cd ../Release\r\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../..\r\n    make\r\n    \r\n## Building Polycode ##\r\n\r\n### Notes ###\r\n\r\nThe Polycode CMake build will look for dependencies installed as\r\nstatic libraries in the Release folder by the above\r\ndependency build step. It will not use system level versions\r\nof these libraries, even if you have them installed. The only exception to\r\nthis is SDL (1.2) for the Linux build, which you must manually install on\r\nthe system level.\r\n\r\nIf you want to build documentation, you must have Doxygen installed \r\nand in your run path. You can get Doxygen from http://www.doxygen.org\r\nor install it using a package manager. \r\n\r\n### Mac OS X and Xcode ###\r\n\r\nTo generate an Xcode project for building Polycode, perform the\r\nfollowing steps in the Polycode directory from a terminal:\r\n\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G Xcode ..\r\n\r\nThis generates a Polycode Xcode project in the Build directory.\r\n\r\nBuild the \"ALL_BUILD\" target in this project in both Debug and Release\r\nand then build the \"install\" target, also in Debug and Release. This\r\nwill install Polycode into the Release/Darwin/Framework directory,\r\nwhich should mirror the binary download from the website and contain\r\ntemplates and examples that will build out of the box.\r\n\r\n### Windows and Visual Studio ###\r\n\r\nTo generate a Microsoft Visual Studio project for building Polycode, \r\nperform the following steps in the Polycode directory from a \r\ncommand prompt:\r\n\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G \"Visual Studio 10\" ..\r\n    \r\nBuild the \"ALL_BUILD\" target in this project in both Debug and Release\r\nand then build the \"install\" target, also in Debug and Release. This\r\nwill install Polycode into the Release/Windows/Framework directory,\r\nwhich should mirror the binary download from the website and contain\r\ntemplates and examples that will build out of the box.\r\n\r\n### Linux ###\r\n\r\nTo generate and build Debug and Release builds with Unix Makefiles \r\nperform the following steps in the Polycode directory from a terminal:\r\n\r\nNOTE: You need to install SDL 1.2 development libraries on your system\r\nbefore doing this as they are not automatically installed by the \r\nDependencies project above. You can get SDL from http://www.libsdl.org \r\nor using the package manager of your distribution.\r\n\r\n    mkdir -p Build/Debug\r\n    cd Build/Debug\r\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug ../..\r\n    make\r\n    make install\r\n    mkdir ../Release\r\n    cd ../Release\r\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../..\r\n    make\r\n    make install\r\n\r\nThis will install Polycode into the Release/Linux/Framework directory,\r\nwhich should mirror the binary download from the website and contain\r\ntemplates and examples that will build out of the box.\r\n\r\n## Building Polycode Lua ##\r\n\r\nNote: To build a complete distribution of the standalone Lua tools\r\nas it appears in the binary release, you will need to build it on all\r\nsupported platforms and copy the module libraries and deployment\r\ntemplates from all three into the folder. If you do not have access\r\nto all the supported platforms, you will not be able to build a complete\r\ndistribution!\r\n\r\nTo build Polycode Lua, you need to build the bindings and the player,\r\nwhich are disabled by default. To do this, you need to add a couple\r\nof variables to the cmake commands above. To build the bindings, you\r\nneed a python installation with the PLY python module. You can get\r\nthe PLY module at http://www.dabeaz.com/ply/\r\n\r\nNote: You will need python 2 for this step. If you have python 3 installed,\r\npass -DPYTHON_EXECUTABLE=/usr/bin/python2 or whatever the full path to\r\nthe python2 executable is on your system.\r\n\r\nTo enable the bindings and the player, add the following options to the\r\ncmake command. Otherwise, the steps are exactly the same as the regular \r\nPolycode build for your system.\r\n\r\n    -DPOLYCODE_BUILD_BINDINGS=ON -DPOLYCODE_BUILD_PLAYER=ON\r\n\r\nNote: You need to build the \"PolycodeLua\" target before you build the \"install\" target.\r\n\r\nAfter building the install build or running 'make install', perform the\r\nfollowing commands in the Polycode source root:\r\n\r\n### Mac and Linux ###\r\n\r\n    cd Standalone\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G \"Unix Makefiles\" ..\r\n    make install\r\n\r\nThis will create a Release/YourArchitecture/Standalone folder with the\r\nsame structure as the binary Polycode Lua release.\r\n\r\n### Windows ###\r\n    \r\n    cd Standalone\r\n    mkdir Build\r\n    cd Build\r\n    cmake -G \"Visual Studio 10\" ..\r\n\r\nThis will create a Standalone.sln solution in the Build directory. Build the\r\n\"install\" target of this solution. \r\n\r\nThis will create a Release/Windows/Standalone folder with the\r\nsame structure as the binary Polycode Lua release.\r\n\r\n### Final steps ###\r\n\r\nSince the standalone Lua distribution is supposed to compile packages for\r\nall platforms, you need to do this build step on all of the platforms and\r\nmerge the Standalone/Modules and Standalone/Publish folders with the one\r\nyou just built.\r\n\r\n## TODO ##\r\n\r\nIt would be good to create a CMake build template for people to create\r\nnew Polycode applications with.\r\n\r\n"
        },
        {
          "name": "Bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "BuildLinux.sh",
          "type": "blob",
          "size": 0.734375,
          "content": "#!/bin/bash\n# ~/bin/build-polycode\n\nmkdir -p Dependencies/Build/Debug Dependencies/Build/Release Build/Debug Build/Release Standalone/Build\ncd Dependencies/Build/Debug\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug ../..\nmake\ncd ../Release\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../..\nmake\ncd ../../../Build/Debug\ncmake -G \"Unix Makefiles\" -DPOLYCODE_BUILD_BINDINGS=ON -DPOLYCODE_BUILD_PLAYER=ON -DCMAKE_BUILD_TYPE=Debug -DPYTHON_EXECUTABLE=/usr/bin/python2 ../..\nmake\nmake install\ncd ../Release\ncmake -G \"Unix Makefiles\" -DPOLYCODE_BUILD_BINDINGS=ON -DPOLYCODE_BUILD_PLAYER=ON -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=/usr/bin/python2 ../..\nmake\nmake install\ncd ../../Standalone/Build\ncmake -G \"Unix Makefiles\" ..\nmake install\n"
        },
        {
          "name": "BuildMac.sh",
          "type": "blob",
          "size": 2.302734375,
          "content": "#!/bin/sh\n#\n# A complete build script for Polycode on Mac OS X\n# Author: Mark Austin <ganthore@gmail.com>\n#\n# Make sure you have the following libraries and tools installed prior to running a build\n# Xcode\n# py-ply\n# pkgconfig\n# cmake\n#\n# With macports you can easily install most of the needed libs with the following command:\n# sudo port install py-ply pkgconfig cmake\n#\n\n# Note: Building with macports versions will require changing your python version to the macports version\n# so that the lua binding build\n# sudo port select python python27\n\n#\n# Start\n#\n\n#\n# Validate that the build command exited cleanly\n#\nfunction validate(){\n\tif [ $? -eq 0 ]; then\n\t    echo \"[INFO] Build command executed successfully.\"\n\telse\n\t    echo \"[ERROR] One of the build commands failed!\"\n\t\texit 1\n\tfi\n}\n\nfunction cleanup(){\n\t# Do not remove this by default since it takes a while to download stuff\n\t# if [ -d Dependencies/Build ]; then\n\t# \trm -fr Dependencies/Build\n\t# \techo \"[INFO] Removed previous Dependencies/Build folder.\"\n\t# fi\n\n\tif [ -d Build ]; then\n\t\trm -fr Build\n\t\techo \"[INFO] Removed previous Build folder.\"\n\tfi\n\n\tif [ -d Standalone/Build ]; then\n\t\trm -fr Standalone/Build\n\t\techo \"[INFO] Removed previous Standalone/Build folder.\"\n\tfi\n}\n\n#\n# Cleanup\n#\ncleanup\n\n#\n# Build debug and release static dependencies\n#\nmkdir -p Dependencies/Build\ncd Dependencies/Build\ncmake -G Xcode ..\nvalidate\nxcodebuild -target ALL_BUILD -configuration Debug\nvalidate\nxcodebuild -target ALL_BUILD -configuration Release\nvalidate\ncd ../../\n\n#\n# Build polycode player and bindings\n#\nmkdir -p Build\ncd Build\ncmake -G Xcode .. -DPOLYCODE_BUILD_BINDINGS=1 -DPOLYCODE_BUILD_PLAYER=1\nvalidate\nxcodebuild -DPOLYCODE_BUILD_BINDINGS=1 -DPOLYCODE_BUILD_PLAYER=1 -target ALL_BUILD -configuration Debug\nvalidate\nxcodebuild -target PolycodeLua -configuration Debug\nvalidate\nxcodebuild -target install -configuration Debug\nvalidate\nxcodebuild -DPOLYCODE_BUILD_BINDINGS=1 -DPOLYCODE_BUILD_PLAYER=1 -target ALL_BUILD -configuration Release\nvalidate\nxcodebuild -target PolycodeLua -configuration Release\nvalidate\nxcodebuild -target install -configuration Release\nvalidate\ncd ../\n\n#\n# Build standalone\n#\nmkdir -p Standalone/Build\ncd Standalone/Build\ncmake -G \"Unix Makefiles\" ..\nvalidate\nmake install\nvalidate\ncd ../../\n\n#\n# Build IDE\n#\ncd IDE/Build/Mac\\ OS\\ X/\nxcodebuild\nvalidate\n\n#\n# End\n#\nexit 0\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.3193359375,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)\n\nPROJECT(Polycode)\n\n\nIF(NOT CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n      \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"\n      FORCE)\n    MESSAGE(\"No CMAKE_BUILD_TYPE specified, defaulting to ${CMAKE_BUILD_TYPE}\")\nENDIF(NOT CMAKE_BUILD_TYPE)\n\n#IF(APPLE OR WIN32)\n#    SET(build_player OFF)\n#ELSE()\n#    SET(build_player OFF)\n#ENDIF()\n\nIF(NUMBER_IS_SINGLE)\n\tadd_definitions(-DPOLYCODE_NUMBER_IS_SINGLE)\n\tMESSAGE(\"USING SINGLE PRECISION NUMBERS\")\nENDIF()\n\n# Options for what components to build\n#OPTION(POLYCODE_BUILD_SHARED \"Build Polycode shared libraries\" OFF)\n#OPTION(POLYCODE_BUILD_STATIC \"Build Polycode static libraries\" ON)\nOPTION(POLYCODE_BUILD_BINDINGS \"Build Polycode Lua bindings\" OFF)\nOPTION(POLYCODE_BUILD_MODULES \"Build Polycode modules\" ON)\nOPTION(POLYCODE_BUILD_PLAYER \"Build Polycode standalone player\" OFF)\nOPTION(POLYCODE_BUILD_TOOLS \"Build Polycode tools\" ON)\nOPTION(POLYCODE_BUILD_DOCS \"Build Polycode documentation\" ON)\n\nOPTION(POLYCODE_INSTALL_FRAMEWORK \"Install Polycode Core, Modules and Tools\" ON)\nOPTION(POLYCODE_INSTALL_PLAYER \"Install Polycode Player\" ${POLYCODE_BUILD_PLAYER})\nOPTION(POLYCODE_INSTALL_TEMPLATE \"Install Template project\" ON)\nOPTION(POLYCODE_INSTALL_DOCS ${POLYCODE_BUILD_DOCS})\n\n# Some non-standard CMake modules\nSET(CMAKE_MODULE_PATH ${Polycode_SOURCE_DIR}/CMake)\n\nIF(NOT POLYCODE_RELEASE_DIR)\n    SET(POLYCODE_RELEASE_DIR ${Polycode_SOURCE_DIR}/Release/${CMAKE_SYSTEM_NAME})\n    MESSAGE(\"No POLYCODE_RELEASE_DIR specified, to ${POLYCODE_RELEASE_DIR}\") \nENDIF(NOT POLYCODE_RELEASE_DIR)\n\nSET(CMAKE_INSTALL_PREFIX ${POLYCODE_RELEASE_DIR}/Framework/)\n\n# set default externals install location\nSET(CMAKE_PREFIX_PATH \n    ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies\n    ${POLYCODE_RELEASE_DIR}/Framework/Modules/Dependencies\n    ${POLYCODE_RELEASE_DIR}/Framework/Tools/Dependencies)\n\n# Process subdirectories\nADD_SUBDIRECTORY(\"Core/Contents\")\nADD_SUBDIRECTORY(\"Assets\")\nADD_SUBDIRECTORY(\"Documentation\")\n\nIF(POLYCODE_BUILD_BINDINGS)\n    ADD_SUBDIRECTORY(Documentation/Lua/scripts)\n    ADD_SUBDIRECTORY(Bindings)\nENDIF(POLYCODE_BUILD_BINDINGS)\n\nIF(POLYCODE_BUILD_MODULES)\n    ADD_SUBDIRECTORY(Modules/Contents)\n    IF(POLYCODE_BUILD_BINDINGS)\n        ADD_SUBDIRECTORY(Modules/Bindings)\n    ENDIF(POLYCODE_BUILD_BINDINGS)\nENDIF(POLYCODE_BUILD_MODULES)\n\nIF(POLYCODE_BUILD_PLAYER)\n    ADD_SUBDIRECTORY(Player/Contents)\nENDIF(POLYCODE_BUILD_PLAYER)\n\nIF(POLYCODE_BUILD_TOOLS)\n    ADD_SUBDIRECTORY(Tools/Contents)\nENDIF(POLYCODE_BUILD_TOOLS)\n\nINSTALL(FILES LICENSE.txt\n        DESTINATION ./)\n\nINSTALL(DIRECTORY ${Polycode_SOURCE_DIR}/Examples/C++/Build/${CMAKE_SYSTEM_NAME} DESTINATION Examples)\nINSTALL(DIRECTORY ${Polycode_SOURCE_DIR}/Examples/C++/Contents DESTINATION Examples/${CMAKE_SYSTEM_NAME})\nINSTALL(DIRECTORY ${Polycode_SOURCE_DIR}/Examples/C++/Resources DESTINATION Examples/${CMAKE_SYSTEM_NAME})\n\nINSTALL(DIRECTORY ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies DESTINATION Core)\nINSTALL(DIRECTORY ${POLYCODE_RELEASE_DIR}/Framework/Modules/Dependencies DESTINATION Modules)\n\nSET(CPACK_PACKAGE_VERSION_MAJOR \"0\")\nSET(CPACK_PACKAGE_VERSION_MINOR \"8\")\nSET(CPACK_PACKAGE_VERSION_PATCH \"2\")\n\nIF(WIN32)\n\tSET(CPACK_GENERATOR \"ZIP\")\nELSE(WIN32)\n\tSET(CPACK_GENERATOR \"TGZ\")\nENDIF(WIN32)\n\nINCLUDE(CPack)\n\n# Install assets and dependencies\n"
        },
        {
          "name": "Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "IDE",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.048828125,
          "content": "Copyright (C) 2014 by Ivan Safrin, Polycode Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "Modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "Player",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.9033203125,
          "content": "[![Build Status](https://travis-ci.org/ivansafrin/Polycode.svg?branch=master)](https://travis-ci.org/ivansafrin/Polycode)\n\nPolycode is a cross-platform framework for creative code. You can use it as a C++ API or as a standalone scripting language to get easy and simple access to accelerated 2D and 3D graphics, hardware shaders, sound and network programming, physics engines and more.\n\nThe core Polycode API is written in C++ and can be used to create portable native applications.\n\nOn top of the core C++ API, Polycode offers a Lua-based scripting system with its own set of compilation tools. The Lua API mirrors the C++ API and can be used to easily create prototypes and even publish complete applications to multiple platforms without compiling C++.\n\nPolycode is available under the MIT license and was designed and developed by Ivan Safrin.\n\nPlease see BUILD.md for instructions on how to build Polycode from source.\n"
        },
        {
          "name": "Standalone",
          "type": "tree",
          "content": null
        },
        {
          "name": "Toolchain-mingw32.cmake",
          "type": "blob",
          "size": 1.0595703125,
          "content": "# the name of the target operating system\nSET(CMAKE_SYSTEM_NAME Windows)\n\n# which compilers to use for C and C++\nSET(CMAKE_C_COMPILER i486-mingw32-gcc)\nSET(CMAKE_CXX_COMPILER i486-mingw32-g++)\nSET(CMAKE_RC_COMPILER i486-mingw32-windres)\n\n# here is the target environment located, please replace /path/to/Polycode with the absolute path to your polycode installation\nSET(POLYCODE_DIRECTORY \"/path/to/Polycode\")\nSET(CMAKE_FIND_ROOT_PATH  /usr/i486-mingw32; ${POLYCODE_DIRECTORY}/Release/Windows/Framework/Core/Dependencies; ${POLYCODE_DIRECTORY}/Release/Windows/Framework/Tools/Dependencies; /home/cib/projects/Polycode/Release/Windows/Framework/Modules/Dependencies; )\n\n# adjust the default behaviour of the FIND_XXX() commands:\n# search headers and libraries in the target environment, search \n# programs in the host environment\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n# Paste the below into the relevant cmake files.\n#set(CMAKE_CXX_FLAGS \"-D_WINDOWS -D_MINGW -D_WIN32 -DWIN32 -D__MINGW__\")\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup-travis.sh",
          "type": "blob",
          "size": 0.4228515625,
          "content": "#/bin/sh -f\n \n# things to do for travis-ci in the before_install section\n \nif ( test \"`uname -s`\" = \"Darwin\" )\nthen\n  #cmake v2.8.12 is installed on the Mac workers now\n  #brew update\n  #brew install cmake\n  echo\nelse\n  #install a newer cmake since at this time Travis only has version 2.8.7\n  echo \"yes\" | sudo add-apt-repository ppa:kalakris/cmake\n  sudo apt-get update -qq\n  sudo apt-get install cmake libsdl1.2-dev python-ply\nfi\n"
        }
      ]
    }
  ]
}