{
  "metadata": {
    "timestamp": 1736565279675,
    "page": 91,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cppla/ServerStatus",
      "stars": 4336,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "default.sublime-workspace\n\n# pycharm\n.idea\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9267578125,
          "content": "# The Dockerfile for build localhost source, not git repo\nFROM debian:buster AS builder\n\nLABEL maintainer=\"cppla <https://cpp.la>\"\n\nRUN apt-get update -y && apt-get -y install gcc g++ make libcurl4-openssl-dev\n\nCOPY . .\n\nWORKDIR /server\n\nRUN make -j\nRUN pwd && ls -a\n\n# glibc env run\nFROM nginx:latest\n\nRUN mkdir -p /ServerStatus/server/ && ln -sf /dev/null /var/log/nginx/access.log && ln -sf /dev/null /var/log/nginx/error.log\n\nCOPY --from=builder server /ServerStatus/server/\nCOPY --from=builder web /usr/share/nginx/html/\n\n# china time \nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nEXPOSE 80 35601\nHEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl --fail http://localhost:80 || bash -c 'kill -s 15 -1 && (sleep 10; kill -s 9 -1)'\nCMD [\"sh\", \"-c\", \"/etc/init.d/nginx start && /ServerStatus/server/sergate --config=/ServerStatus/server/config.json --web-dir=/usr/share/nginx/html\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "MIT License\n\nCopyright (c) 2018 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.880859375,
          "content": "# ServerStatus中文版：   \n\n* ServerStatus中文版是一个酷炫高逼格的云探针、云监控、服务器云监控、多服务器探针~。\n* 在线演示：https://tz.cloudcpp.com    \n\n[![Python Support](https://img.shields.io/badge/python-3.6%2B%20-blue.svg)](https://github.com/cppla/ServerStatus)\n[![C++ Compiler](http://img.shields.io/badge/C++-GNU-blue.svg?style=flat&logo=cplusplus)](https://github.com/cppla/ServerStatus)\n[![License](https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square)](https://github.com/cppla/ServerStatus)\n[![Version](https://img.shields.io/badge/Version-Build%201.1.5-red)](https://github.com/cppla/ServerStatus)\n\n![Latest Host Version](https://dl.cpp.la/Archive/serverstatus_1.1.5.png)\n\n`Watchdog触发式告警，interval只是为了防止频繁收到报警信息造成的骚扰，并不是探测间隔。值得注意的是，Exprtk库默认使用窄字符类型，中文等Unicode字符无法解析计算，等待修复。 `    \n\n# 目录：\n\n* clients       \t客户端文件\n* server       \t \t服务端文件  \n* web           \t网站文件\n\n* server/config.json\t探针配置文件                                \n* web/json      \t探针月流量        \n\n# 部署：\n\n【服务端】：\n```bash\n\n`Docker`:     \n\nwget --no-check-certificate -qO ~/serverstatus-config.json https://raw.githubusercontent.com/cppla/ServerStatus/master/server/config.json && mkdir ~/serverstatus-monthtraffic    \ndocker run -d --restart=always --name=serverstatus -v ~/serverstatus-config.json:/ServerStatus/server/config.json -v ~/serverstatus-monthtraffic:/usr/share/nginx/html/json -p 80:80 -p 35601:35601 cppla/serverstatus:latest     \n\n`Docker-compose(推荐)`: docker-compose up -d\n```\n\n【客户端】：\n```bash\nwget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py' && nohup python3 client-linux.py SERVER={$SERVER} USER={$USER} PASSWORD={$PASSWORD} >/dev/null 2>&1 &\n\neg:\nwget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py' && nohup python3 client-linux.py SERVER=45.79.67.132 USER=s04  >/dev/null 2>&1 &\n```\n\n# 主题：            \n\n* layui：https://github.com/zeyudada/StatusServerLayui ，预览：https://sslt.8zyw.cn            \n<img src=https://dl.cpp.la/Archive/serverstatus_layui.png width=200 height=100 />\n\n* light：https://github.com/orilights/ServerStatus-Theme-Light ，预览：https://tz.cloudcpp.com/index3.html    \n<img src=https://dl.cpp.la/Archive/serverstatus_light.png width=200 height=100 />  \n\n\n# 手动安装教程：     \n   \n**【服务端配置】**           \n          \n#### 一、生成服务端程序              \n```\n`Debian/Ubuntu`: apt-get -y install gcc g++ make libcurl4-openssl-dev\n`Centos/Redhat`: yum -y install gcc gcc-c++ make libcurl-devel\n\ncd ServerStatus/server && make\n./sergate\n```\n如果没错误提示，OK，ctrl+c关闭；如果有错误提示，检查35601端口是否被占用    \n\n#### 二、修改配置文件         \n```diff\n! watchdog rule 可以为任何已知字段的表达式。注意Exprtk库默认使用窄字符类型，中文等Unicode字符无法解析计算，等待修复       \n! watchdog interval 最小通知间隔\n! watchdog callback 可自定义为Post方法的URL，告警内容将拼接其后并发起回调    \n\n! Telegram: https://api.telegram.org/bot你自己的密钥/sendMessage?parse_mode=HTML&disable_web_page_preview=true&chat_id=你自己的标识&text=\n! Server酱: https://sctapi.ftqq.com/你自己的密钥.send?title=ServerStatus&desp=\n! PushDeer: https://api2.pushdeer.com/message/push?pushkey=你自己的密钥&text=\n! HttpBasicAuth: https://用户名:密码@你自己的域名/api/push?message=\n```\n\n```\n{\n        \"servers\":\n\t[\n\t\t{\n\t\t\t\"username\": \"s01\",\n\t\t\t\"name\": \"vps-1\",\n\t\t\t\"type\": \"kvm\",\n\t\t\t\"host\": \"chengdu\",\n\t\t\t\"location\": \"🇨🇳\",\n\t\t\t\"password\": \"USER_DEFAULT_PASSWORD\",\n\t\t\t\"monthstart\": 1\n\t\t}\n\t],\n\t\"monitors\": [\n\t\t{\n\t\t\t\"name\": \"监测网站，默认为一天在线率\",\n\t\t\t\"host\": \"https://www.baidu.com\",\n\t\t\t\"interval\": 1200,\n\t\t\t\"type\": \"https\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"监测tcp服务端口\",\n\t\t\t\"host\": \"1.1.1.1:80\",\n\t\t\t\"interval\": 1200,\n\t\t\t\"type\": \"tcp\"\n\t\t}\n\t],\n\t\"watchdog\":\n\t[\n\t        {\n\t\t\t\"name\": \"服务器负载高监控，排除内存大于32G物理机，同时排除node1机器\",\n\t\t\t\"rule\": \"cpu>90&load_1>4&memory_total<33554432&name!='node1'\",\n\t\t\t\"interval\": 600,\n\t\t\t\"callback\": \"https://yourSMSurl\"\n\t\t},\n\t\t{\n                        \"name\": \"服务器内存使用率过高监控，排除小于1G的机器\",\n                        \"rule\": \"(memory_used/memory_total)*100>90&memory_total>1048576\",\n                        \"interval\": 600,\n                        \"callback\": \"https://yourSMSurl\"\n                },\n                {\n                        \"name\": \"服务器宕机告警\",\n                        \"rule\": \"online4=0&online6=0\",\n                        \"interval\": 600,\n                        \"callback\": \"https://yourSMSurl\"\n                },\n\t\t{\n                        \"name\": \"DDOS和CC攻击监控，限制甲骨文机器\",\n                        \"rule\": \"tcp_count>600&type='Oracle'\",\n                        \"interval\": 300,\n                        \"callback\": \"https://yourSMSurl\"\n                },\n\t\t{\n\t\t\t\"name\": \"服务器月出口流量999GB告警\",\n\t\t\t\"rule\": \"(network_out-last_network_out)/1024/1024/1024>999\",\n\t\t\t\"interval\": 3600,\n\t\t\t\"callback\": \"https://yourSMSurl\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"阿里云服务器流量18GB告警,限制username为乌兰察布\",\n\t\t\t\"rule\": \"(network_out-last_network_out)/1024/1024/1024>18&(username='wlcb1'|username='wlcb2'|username='wlcb3'|username='wlcb4')\",\n\t\t\t\"interval\": 3600,\n\t\t\t\"callback\": \"https://yourSMSurl\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"重要线路丢包率过高检查\",\n\t\t\t\"rule\": \"(ping_10010>10|ping_189>10|ping_10086>10)&(host='sgp'|host='qqhk'|host='hk-21-x'|host='hk-31-x')\",\n\t\t\t\"interval\": 600,\n\t\t\t\"callback\": \"https://yourSMSurl\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"你可以组合任何已知字段的表达式\",\n\t\t\t\"rule\": \"(hdd_used/hdd_total)*100>95\",\n\t\t\t\"interval\": 1800,\n\t\t\t\"callback\": \"https://yourSMSurl\"\n\t\t}\n\t]\n}       \n```\n\n#### 三、拷贝ServerStatus/status到你的网站目录        \n例如：\n```\nsudo cp -r ServerStatus/web/* /home/wwwroot/default\n```\n\n#### 四、运行服务端：             \nweb-dir参数为上一步设置的网站根目录，务必修改成自己网站的路径   \n```\n./sergate --config=config.json --web-dir=/home/wwwroot/default   \n```\n\n**【客户端配置】**    \n\n客户端有两个版本，client-linux为普通linux，client-psutil为跨平台版，普通版不成功，换成跨平台版即可。        \n\n#### 一、client-linux版配置：       \n1、vim client-linux.py, 修改SERVER地址，username帐号， password密码        \n2、python3 client-linux.py 运行即可。      \n\n#### 二、client-psutil版配置:                \n1、安装psutil跨平台依赖库       \n```\n`Debian/Ubuntu`: apt -y install python3-pip && pip3 install psutil    \n`Centos/Redhat`: yum -y install python3-pip gcc python3-devel && pip3 install psutil      \n`Windows`: https://pypi.org/project/psutil/    \n```\n2、vim client-psutil.py, 修改SERVER地址，username帐号， password密码       \n3、python3 client-psutil.py 运行即可。    \n\n服务器和客户端自行加入开机启动，或进程守护，或后台方式运行。 例如： nohup python3 client-linux.py &    \n\n`extra scene (run web/ssview.py)`\n![Shell View](https://dl.cpp.la/Archive/serverstatus-shell.png?version=2023)\n\n\n# Make Better        \n\n* BotoX：https://github.com/BotoX/ServerStatus\n* mojeda: https://github.com/mojeda \n* mojeda's ServerStatus: https://github.com/mojeda/ServerStatus\n* BlueVM's project: http://www.lowendtalk.com/discussion/comment/169690#Comment_169690\n\n# Jetbrains    \n\n<a href=\"https://www.jetbrains.com/?from=ServerStatus\"><img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_square.png\" width=\"100px\"></a>\n"
        },
        {
          "name": "clients",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.6787109375,
          "content": "version: \"3\"\nservices:\n  serverstatus:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: serverstatus_server\n    healthcheck:\n      test: curl --fail http://localhost:80 || bash -c 'kill -s 15 -1 && (sleep 10; kill -s 9 -1)'\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    container_name: serverstatus\n    restart: unless-stopped\n    networks:\n      serverstatus-network:\n        ipv4_address: 172.23.0.2\n    volumes:\n      - ./server/config.json:/ServerStatus/server/config.json \n      - ./web/json:/usr/share/nginx/html/json\n    ports:\n      - 35601:35601\n      - 8080:80\n\nnetworks:\n  serverstatus-network:\n    ipam:\n      config:\n        - subnet: 172.23.0.0/24\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "status.sh",
          "type": "blob",
          "size": 40.783203125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\nsh_ver=\"1.0.0\"\n\nfilepath=$(\n  cd \"$(dirname \"$0\")\" || exit\n  pwd\n)\nfile_1=$(echo -e \"${filepath}\" | awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/ServerStatus\"\nweb_file=\"/usr/local/ServerStatus/web\"\nserver_file=\"/usr/local/ServerStatus/server\"\nserver_conf=\"/usr/local/ServerStatus/server/config.json\"\nserver_conf_1=\"/usr/local/ServerStatus/server/config.conf\"\nplugin_file=\"/usr/local/ServerStatus/plugin\"\nclient_file=\"/usr/local/ServerStatus/clients\"\nservice=\"/usr/lib/systemd/system\"\njq_file=\"${file}/jq\"\n[[ ! -e ${jq_file} ]] && jq_file=\"/usr/bin/jq\"\n\ngithub_prefix=\"https://raw.githubusercontent.com/cppla/ServerStatus/master\"\n\nNAME=\"ServerStatus\"\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys() {\n  if [[ -f /etc/redhat-release ]]; then\n    release=\"centos\"\n  elif grep -q -E -i \"debian|ubuntu\" /etc/issue; then\n    release=\"debian\"\n  elif grep -q -E -i \"centonetstat -tunlps|red hat|redhat\" /etc/issue; then\n    release=\"centos\"\n  elif grep -q -E -i \"Arch|Manjaro\" /etc/issue; then\n    release=\"archlinux\"\n  elif grep -q -E -i \"debian|ubuntu\" /proc/version; then\n    release=\"debian\"\n  elif grep -q -E -i \"centos|red hat|redhat\" /proc/version; then\n    release=\"centos\"\n  else\n    echo -e \"ServerStatus 暂不支持该Linux发行版\"\n  fi\n  bit=$(uname -m)\n}\n\ncheck_installed_server_status() {\n  [[ ! -e \"${server_file}/sergate\" ]] && echo -e \"${Error} $NAME 服务端没有安装，请检查 !\" && exit 1\n}\n\ncheck_installed_client_status() {\n  [[ ! -e \"${client_file}/client-linux.py\" ]] && echo -e \"${Error} $NAME 客户端没有安装，请检查 !\" && exit 1\n}\n\nDownload_Server_Status_server() {\n  cd \"/tmp\" || exit 1\n  wget -N --no-check-certificate https://github.com/cppla/ServerStatus/archive/refs/heads/master.zip\n    [[ ! -e \"master.zip\" ]] && echo -e \"${Error} ServerStatus 服务端下载失败 !\" && exit 1\n  unzip master.zip\n  rm -rf master.zip\n  [[ ! -d \"/tmp/ServerStatus-master\" ]] && echo -e \"${Error} ServerStatus 服务端解压失败 !\" && exit 1\n  cd \"/tmp/ServerStatus-master/server\" || exit 1\n  make\n  [[ ! -e \"sergate\" ]] && echo -e \"${Error} ServerStatus 服务端编译失败 !\" && cd \"${file_1}\" && rm -rf \"/tmp//ServerStatus-master\" && exit 1\n  cd \"${file_1}\" || exit 1\n  mkdir -p \"${server_file}\"\n  mv \"/tmp/ServerStatus-master/server\" \"${file}\"\n  mv \"/tmp/ServerStatus-master/web\" \"${file}\"\n  mv \"/tmp/ServerStatus-master/plugin\" \"${file}\"\n  rm -rf \"/tmp/ServerStatus-master\"\n  if [[ ! -e \"${server_file}/sergate\" ]]; then\n    echo -e \"${Error} ServerStatus 服务端移动重命名失败 !\"\n    [[ -e \"${server_file}/sergate1\" ]] && mv \"${server_file}/sergate1\" \"${server_file}/sergate\"\n    exit 1\n  else\n    [[ -e \"${server_file}/sergate1\" ]] && rm -rf \"${server_file}/sergate1\"\n  fi\n}\n\nDownload_Server_Status_client() {\nmkdir -p \"${client_file}\"\nwget -N --no-check-certificate \"${github_prefix}/clients/client-linux.py\"  -P \"${client_file}\"\n}\n\nDownload_Server_Status_Service() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  local service_note=\"服务端\"\n  [[ ${mode} == \"client\" ]] && service_note=\"客户端\"\n    wget --no-check-certificate \"${github_prefix}/service/status-${mode}.service\" -O \"${service}/status-${mode}.service\" ||\n      {\n        echo -e \"${Error} $NAME ${service_note}服务管理脚本下载失败 !\"\n        exit 1\n      }\n    systemctl enable \"status-${mode}.service\"\n  echo -e \"${Info} $NAME ${service_note}服务管理脚本下载完成 !\"\n}\n\nService_Server_Status_server() {\n  Download_Server_Status_Service \"server\"\n}\n\nService_Server_Status_client() {\n  Download_Server_Status_Service \"client\"\n}\n\nInstallation_dependency() {\n  mode=$1\n  if [[ ${release} == \"centos\" ]]; then\n    yum makecache\n    yum -y install unzip\n    yum -y install python3 >/dev/null 2>&1 || yum -y install python\n    [[ ${mode} == \"server\" ]] && yum -y groupinstall \"Development Tools\"\n  elif [[ ${release} == \"debian\" ]]; then\n    apt -y update\n    apt -y install unzip\n    apt -y install python3 >/dev/null 2>&1 || apt -y install python\n    [[ ${mode} == \"server\" ]] && apt -y install build-essential\n  elif [[ ${release} == \"archlinux\" ]]; then\n    pacman -Sy python python-pip unzip --noconfirm\n    [[ ${mode} == \"server\" ]] && pacman -Sy base-devel --noconfirm\n  fi\n  [[ ! -e /usr/bin/python ]] && ln -s /usr/bin/python3 /usr/bin/python\n}\n\nWrite_server_config() {\n  cat >${server_conf} <<-EOF\n{\n    \"servers\": [\n        {\n            \"username\": \"s01\",\n            \"password\": \"password\",\n            \"name\": \"vps-1\",\n            \"type\": \"KVM\",\n            \"host\": \"azure\",\n            \"location\": \"Hong Kong\",\n            \"monthstart\": 1\n        }\n    ]\n}     \nEOF\n}\n\nWrite_server_config_conf() {\n  cat >${server_conf_1} <<-EOF\nPORT = ${server_port_s}\nEOF\n}\n\nRead_config_client() {\n  client_text=\"$(sed 's/\\\"//g;s/,//g;s/ //g' \"${client_file}/client-linux.py\") \"\n  client_server=\"$(echo -e \"${client_text}\" | grep \"SERVER=\" | awk -F \"=\" '{print $2;exit}')\"\n  client_port=\"$(echo -e \"${client_text}\" | grep \"PORT=\" | awk -F \"=\" '{print $2;exit}')\"\n  client_user=\"$(echo -e \"${client_text}\" | grep \"USER=\" | awk -F \"=\" '{print $2;exit}')\"\n  client_password=\"$(echo -e \"${client_text}\" | grep \"PASSWORD=\" | awk -F \"=\" '{print $2;exit}')\"\n}\n\nRead_config_server() {\n  if [[ ! -e \"${server_conf_1}\" ]]; then\n    server_port_s=\"35601\"\n    Write_server_config_conf\n    server_port=\"35601\"\n  else\n    server_port=\"$(grep \"PORT = \" ${server_conf_1} | awk '{print $3}')\"\n  fi\n}\n\nSet_server() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 $NAME 服务端中网站要设置的 域名[server]\n默认为本机IP为域名，例如输入: toyoo.pw ，如果要使用本机IP，请留空直接回车\"\n    read -erp \"(默认: 本机IP):\" server_s\n    [[ -z \"$server_s\" ]] && server_s=\"\"\n  else\n    echo -e \"请输入 $NAME 服务端的 IP/域名[server]，请注意，如果你的域名使用了CDN，请直接填写IP\"\n    read -erp \"(默认: 127.0.0.1):\" server_s\n    [[ -z \"$server_s\" ]] && server_s=\"127.0.0.1\"\n  fi\n\n  echo && echo \"\t================================================\"\n  echo -e \"\tIP/域名[server]: ${Red_background_prefix} ${server_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_server_http_port() {\n  while true; do\n    echo -e \"请输入 $NAME 服务端中网站要设置的 域名/IP的端口[1-65535]（如果是域名的话，一般用 80 端口）\"\n    read -erp \"(默认: 8888):\" server_http_port_s\n    [[ -z \"$server_http_port_s\" ]] && server_http_port_s=\"8888\"\n    if [[ \"$server_http_port_s\" =~ ^[0-9]*$ ]]; then\n      if [[ ${server_http_port_s} -ge 1 ]] && [[ ${server_http_port_s} -le 65535 ]]; then\n        echo && echo \"\t================================================\"\n        echo -e \"\t端口: ${Red_background_prefix} ${server_http_port_s} ${Font_color_suffix}\"\n        echo \"\t================================================\" && echo\n        break\n      else\n        echo \"输入错误, 请输入正确的端口。\"\n      fi\n    else\n      echo \"输入错误, 请输入正确的端口。\"\n    fi\n  done\n}\n\nSet_server_port() {\n  while true; do\n    echo -e \"请输入 $NAME 服务端监听的端口[1-65535]（用于服务端接收客户端消息的端口，客户端要填写这个端口）\"\n    read -erp \"(默认: 35601):\" server_port_s\n    [[ -z \"$server_port_s\" ]] && server_port_s=\"35601\"\n    if [[ \"$server_port_s\" =~ ^[0-9]*$ ]]; then\n      if [[ ${server_port_s} -ge 1 ]] && [[ ${server_port_s} -le 65535 ]]; then\n        echo && echo \"\t================================================\"\n        echo -e \"\t端口: ${Red_background_prefix} ${server_port_s} ${Font_color_suffix}\"\n        echo \"\t================================================\" && echo\n        break\n      else\n        echo \"输入错误, 请输入正确的端口。\"\n      fi\n    else\n      echo \"输入错误, 请输入正确的端口。\"\n    fi\n  done\n}\n\nSet_username() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 $NAME 服务端要设置的用户名[username]（字母/数字，不可与其他账号重复）\"\n  else\n    echo -e \"请输入 $NAME 服务端中对应配置的用户名[username]（字母/数字，不可与其他账号重复）\"\n  fi\n  read -erp \"(默认: 取消):\" username_s\n  [[ -z \"$username_s\" ]] && echo \"已取消...\" && exit 0\n  echo && echo \"\t================================================\"\n  echo -e \"\t账号[username]: ${Red_background_prefix} ${username_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_password() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 $NAME 服务端要设置的密码[password]（字母/数字，可重复）\"\n  else\n    echo -e \"请输入 $NAME 服务端中对应配置的密码[password]（字母/数字）\"\n  fi\n  read -erp \"(默认: serverstatus):\" password_s\n  [[ -z \"$password_s\" ]] && password_s=\"serverstatus\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t密码[password]: ${Red_background_prefix} ${password_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_name() {\n  echo -e \"请输入 $NAME 服务端要设置的节点名称[name]（支持中文，前提是你的系统和SSH工具支持中文输入，仅仅是个名字）\"\n  read -erp \"(默认: Server 01):\" name_s\n  [[ -z \"$name_s\" ]] && name_s=\"Server 01\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t节点名称[name]: ${Red_background_prefix} ${name_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_type() {\n  echo -e \"请输入 $NAME 服务端要设置的节点虚拟化类型[type]（例如 OpenVZ / KVM）\"\n  read -erp \"(默认: KVM):\" type_s\n  [[ -z \"$type_s\" ]] && type_s=\"KVM\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t虚拟化类型[type]: ${Red_background_prefix} ${type_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_location() {\n  echo -e \"请输入 $NAME 服务端要设置的节点位置[location]（支持中文，前提是你的系统和SSH工具支持中文输入）\"\n  read -erp \"(默认: Hong Kong):\" location_s\n  [[ -z \"$location_s\" ]] && location_s=\"Hong Kong\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t节点位置[location]: ${Red_background_prefix} ${location_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_monthstart() {\n  echo -e \"请输入 $NAME 服务端要设置的节点月重置流量日[monthstart]（每月流量归零的日期（1~28），默认为1（即每月1日））\"\n  read -erp \"(默认: 1):\" monthstart_s\n  [[ -z \"$monthstart_s\" ]] && monthstart_s=\"1\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t月流量重置日[monthstart]: ${Red_background_prefix} ${monthstart_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\n\nSet_config_server() {\n  Set_username \"server\"\n  Set_password \"server\"\n  Set_name\n  Set_type\n  Set_location\n  Set_monthstart\n}\n\nSet_config_client() {\n  Set_server \"client\"\n  Set_server_port\n  Set_username \"client\"\n  Set_password \"client\"\n}\n\nSet_ServerStatus_server() {\n  check_installed_server_status\n  echo && echo -e \" 你要做什么？\n\n ${Green_font_prefix} 1.${Font_color_suffix} 添加 节点配置\n ${Green_font_prefix} 2.${Font_color_suffix} 删除 节点配置\n————————\n ${Green_font_prefix} 3.${Font_color_suffix} 修改 节点配置 - 节点用户名\n ${Green_font_prefix} 4.${Font_color_suffix} 修改 节点配置 - 节点密码\n ${Green_font_prefix} 5.${Font_color_suffix} 修改 节点配置 - 节点名称\n ${Green_font_prefix} 6.${Font_color_suffix} 修改 节点配置 - 节点虚拟化\n ${Green_font_prefix} 7.${Font_color_suffix} 修改 节点配置 - 节点位置\n ${Green_font_prefix} 8.${Font_color_suffix} 修改 节点配置 - 月流量重置日\n ${Green_font_prefix} 9.${Font_color_suffix} 修改 节点配置 - 全部参数\n————————\n ${Green_font_prefix}10.${Font_color_suffix} 修改 服务端监听端口\" && echo\n  read -erp \"(默认: 取消):\" server_num\n  [[ -z \"${server_num}\" ]] && echo \"已取消...\" && exit 1\n  if [[ ${server_num} == \"1\" ]]; then\n    Add_ServerStatus_server\n  elif [[ ${server_num} == \"2\" ]]; then\n    Del_ServerStatus_server\n  elif [[ ${server_num} == \"3\" ]]; then\n    Modify_ServerStatus_server_username\n  elif [[ ${server_num} == \"4\" ]]; then\n    Modify_ServerStatus_server_password\n  elif [[ ${server_num} == \"5\" ]]; then\n    Modify_ServerStatus_server_name\n  elif [[ ${server_num} == \"6\" ]]; then\n    Modify_ServerStatus_server_type\n  elif [[ ${server_num} == \"7\" ]]; then\n    Modify_ServerStatus_server_location\n  elif [[ ${server_num} == \"8\" ]]; then\n    Modify_ServerStatus_server_monthstart  \n  elif [[ ${server_num} == \"9\" ]]; then\n    Modify_ServerStatus_server_all\n  elif [[ ${server_num} == \"10\" ]]; then\n    Read_config_server\n    Set_server_port\n    Write_server_config_conf\n  else\n    echo -e \"${Error} 请输入正确的数字[1-10]\" && exit 1\n  fi\n  Restart_ServerStatus_server\n}\n\nList_ServerStatus_server() {\n  conf_text=$(${jq_file} '.servers' ${server_conf} | ${jq_file} \".[]|.username\" | sed 's/\\\"//g')\n  conf_text_total=$(echo -e \"${conf_text}\" | wc -l)\n  [[ ${conf_text_total} == \"0\" ]] && echo -e \"${Error} 没有发现 一个节点配置，请检查 !\" && exit 1\n  conf_text_total_a=$((conf_text_total - 1))\n  conf_list_all=\"\"\n  for ((integer = 0; integer <= conf_text_total_a; integer++)); do\n    now_text=$(${jq_file} '.servers' ${server_conf} | ${jq_file} \".[${integer}]\" | sed 's/\\\"//g;s/,$//g' | sed '$d;1d')\n    now_text_username=$(echo -e \"${now_text}\" | grep \"username\" | awk -F \": \" '{print $2}')\n    now_text_password=$(echo -e \"${now_text}\" | grep \"password\" | awk -F \": \" '{print $2}')\n    now_text_name=$(echo -e \"${now_text}\" | grep \"name\" | grep -v \"username\" | awk -F \": \" '{print $2}')\n    now_text_type=$(echo -e \"${now_text}\" | grep \"type\" | awk -F \": \" '{print $2}')\n    now_text_location=$(echo -e \"${now_text}\" | grep \"location\" | awk -F \": \" '{print $2}')\n    now_text_monthstart=$(echo -e \"${now_text}\" | grep \"monthstart\" | awk -F \": \" '{print $2}')\n    if [[ ${now_text_disabled} == \"false\" ]]; then\n      now_text_disabled_status=\"${Green_font_prefix}启用${Font_color_suffix}\"\n    else\n      now_text_disabled_status=\"${Red_font_prefix}禁用${Font_color_suffix}\"\n    fi\n    conf_list_all=${conf_list_all}\"用户名: ${Green_font_prefix}${now_text_username}${Font_color_suffix} 密码: ${Green_font_prefix}${now_text_password}${Font_color_suffix} 节点名: ${Green_font_prefix}${now_text_name}${Font_color_suffix} 虚拟化: ${Green_font_prefix}${now_text_type}${Font_color_suffix} 位置: ${Green_font_prefix}${now_text_location}${Font_color_suffix} 月流量重置日: ${Green_font_prefix}${now_text_monthstart}${Font_color_suffix}\\n\"\n  done\n  echo && echo -e \"节点总数 ${Green_font_prefix}${conf_text_total}${Font_color_suffix}\"\n  echo -e \"${conf_list_all}\"\n}\n\nAdd_ServerStatus_server() {\n  Set_config_server\n  Set_username_ch=$(grep '\"username\": \"'\"${username_s}\"'\"' ${server_conf})\n  [[ -n \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n  sed -i '3i\\        },' ${server_conf}\n  sed -i '3i\\            \"monthstart\": '\"${monthstart_s}\"'' ${server_conf}\n  sed -i '3i\\            \"location\": \"'\"${location_s}\"'\",' ${server_conf}\n  sed -i '3i\\            \"host\": \"'\"None\"'\",' ${server_conf}\n  sed -i '3i\\            \"type\": \"'\"${type_s}\"'\",' ${server_conf}\n  sed -i '3i\\            \"name\": \"'\"${name_s}\"'\",' ${server_conf}\n  sed -i '3i\\            \"password\": \"'\"${password_s}\"'\",' ${server_conf}\n  sed -i '3i\\            \"username\": \"'\"${username_s}\"'\",' ${server_conf}\n  sed -i '3i\\        {' ${server_conf}\n  echo -e \"${Info} 添加节点成功 ${Green_font_prefix}[ 节点名称: ${name_s}, 节点用户名: ${username_s}, 节点密码: ${password_s} ]${Font_color_suffix} !\"\n}\n\nDel_ServerStatus_server() {\n  List_ServerStatus_server\n  [[ \"${conf_text_total}\" == \"1\" ]] && echo -e \"${Error} 节点配置仅剩 1个，不能删除 !\" && exit 1\n  echo -e \"请输入要删除的节点用户名\"\n  read -erp \"(默认: 取消):\" del_server_username\n  [[ -z \"${del_server_username}\" ]] && echo -e \"已取消...\" && exit 1\n  del_username=$(cat -n ${server_conf} | grep '\"username\": \"'\"${del_server_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${del_username} ]]; then\n    del_username_min=$((del_username - 1))\n    del_username_max=$((del_username + 7))\n    del_username_max_text=$(sed -n \"${del_username_max}p\" ${server_conf})\n    del_username_max_text_last=${del_username_max_text:((${#del_username_max_text} - 1))}\n    if [[ ${del_username_max_text_last} != \",\" ]]; then\n      del_list_num=$((del_username_min - 1))\n      sed -i \"${del_list_num}s/,$//g\" ${server_conf}\n    fi\n    sed -i \"${del_username_min},${del_username_max}d\" ${server_conf}\n    echo -e \"${Info} 节点删除成功 ${Green_font_prefix}[ 节点用户名: ${del_server_username} ]${Font_color_suffix} \"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_username() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_username\n    Set_username_ch=$(grep '\"username\": \"'\"${username_s}\"'\"' ${server_conf})\n    [[ -n \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n    sed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点用户名: ${manually_username}, 新节点用户名: ${username_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_password() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_password\n    Set_password_num_a=$((Set_username_num + 1))\n    Set_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点密码: ${Set_password_num_text}, 新节点密码: ${password_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_name() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_name\n    Set_name_num_a=$((Set_username_num + 2))\n    Set_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点名称: ${Set_name_num_a_text}, 新节点名称: ${name_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_type() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_type\n    Set_type_num_a=$((Set_username_num + 3))\n    Set_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点虚拟化: ${Set_type_num_a_text}, 新节点虚拟化: ${type_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_location() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_location\n    Set_location_num_a=$((Set_username_num + 5))\n    Set_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点位置: ${Set_location_num_a_text}, 新节点位置: ${location_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_monthstart() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_monthstart\n    Set_monthstart_num_a=$((Set_username_num + 6))\n    Set_monthstart_num_text=$(sed -n \"${Set_monthstart_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_monthstart_num_a}\"'s/\"monthstart\": '\"${Set_monthstart_num_text}\"'/\"monthstart\": '\"${monthstart_s}\"'/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原月流量重置日: ${Set_monthstart_num_text}, 新月流量重置日: ${monthstart_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_all() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_username\n    Set_password\n    Set_name\n    Set_type\n    Set_location\n    Set_monthstart\n    sed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n    Set_password_num_a=$((Set_username_num + 1))\n    Set_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n    Set_name_num_a=$((Set_username_num + 2))\n    Set_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n    Set_type_num_a=$((Set_username_num + 3))\n    Set_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n    Set_location_num_a=$((Set_username_num + 5))\n    Set_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n    Set_monthstart_num_a=$((Set_username_num + 6))\n    Set_monthstart_num_a_text=$(sed -n \"${Set_monthstart_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_monthstart_num_a}\"'s/\"monthstart\": '\"${Set_monthstart_num_a_text}\"'/\"monthstart\": '\"${monthstart_s}\"'/g' ${server_conf}\n    echo -e \"${Info} 修改成功。\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nModify_ServerStatus_server_disabled() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_disabled_num_a=$((Set_username_num + 6))\n    Set_disabled_num_a_text=$(sed -n \"${Set_disabled_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    if [[ ${Set_disabled_num_a_text} == \"false\" ]]; then\n      disabled_s=\"true\"\n    else\n      disabled_s=\"false\"\n    fi\n    sed -i \"${Set_disabled_num_a}\"'s/\"disabled\": '\"${Set_disabled_num_a_text}\"'/\"disabled\": '\"${disabled_s}\"'/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原禁用状态: ${Set_disabled_num_a_text}, 新禁用状态: ${disabled_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\n\nSet_ServerStatus_client() {\n  check_installed_client_status\n  Set_config_client\n  Read_config_client\n  Modify_config_client\n  Restart_ServerStatus_client\n}\n\nModify_config_client() {\n  sed -i '0,/SERVER = \"'\"${client_server}\"'\"/s//SERVER = \"'\"${server_s}\"'\"/' \"${client_file}/client-linux.py\"\n  sed -i '0,/PORT = ${client_port}/s//PORT = ${server_port_s}/' \"${client_file}/client-linux.py\"\n  sed -i '0,/USER = \"'\"${client_user}\"'\"/s//USER = \"'\"${username_s}\"'\"/' \"${client_file}/client-linux.py\"\n  sed -i '0,/PASSWORD = \"'\"${client_password}\"'\"/s//PASSWORD = \"'\"${password_s}\"'\"/' \"${client_file}/client-linux.py\"\n}\n\nInstall_jq() {\n  [[ ${mirror_num} == 2 ]] && {\n    github_link=\"https://hub.fastgit.org\"\n    raw_link=\"https://raw.fastgit.org\"\n  } || {\n    github_link=\"https://github.com\"\n    raw_link=\"https://raw.githubusercontent.com\"\n  }\n  if [[ ! -e ${jq_file} ]]; then\n    if [[ ${bit} == \"x86_64\" ]]; then\n      jq_file=\"${file}/jq\"\n      wget --no-check-certificate \"${github_link}/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -O ${jq_file}\n    elif [[ ${bit} == \"i386\" ]]; then\n      jq_file=\"${file}/jq\"\n      wget --no-check-certificate \"${github_link}/stedolan/jq/releases/download/jq-1.5/jq-linux32\" -O ${jq_file}\n    else\n      # ARM fallback to package manager\n      [[ ${release} == \"archlinux\" ]] && pacman -Sy jq --noconfirm\n      [[ ${release} == \"centos\" ]] && yum -y install jq\n      [[ ${release} == \"debian\" ]] && apt -y install jq\n      jq_file=\"/usr/bin/jq\"\n    fi\n    [[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 下载失败，请检查 !\" && exit 1\n    chmod +x ${jq_file}\n    echo -e \"${Info} JQ解析器 安装完成，继续...\"\n  else\n    echo -e \"${Info} JQ解析器 已安装，继续...\"\n  fi\n}\n\nInstall_caddy() {\n  echo\n  echo -e \"${Info} 是否由脚本自动配置HTTP服务(服务端的在线监控网站)，如果选择 N，则请在其他HTTP服务中配置网站根目录为：${Green_font_prefix}${web_file}${Font_color_suffix} [Y/n]\"\n  read -erp \"(默认: Y 自动部署):\" caddy_yn\n  [[ -z \"$caddy_yn\" ]] && caddy_yn=\"y\"\n  if [[ \"${caddy_yn}\" == [Yy] ]]; then\n    caddy_file=\"/etc/caddy/Caddyfile\" # Where is the default Caddyfile specified in Archlinux?\n    [[ ! -e /usr/bin/caddy ]] && {\n      if [[ ${release} == \"debian\" ]]; then\n        apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\n        curl -1sLf \"https://dl.cloudsmith.io/public/caddy/stable/gpg.key\" | tee /etc/apt/trusted.gpg.d/caddy-stable.asc\n        curl -1sLf \"https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\" | tee /etc/apt/sources.list.d/caddy-stable.list\n        apt update && apt install caddy\n      elif [[ ${release} == \"centos\" ]]; then\n        yum install yum-plugin-copr -y\n        yum copr enable @caddy/caddy -y\n        yum install caddy -y\n      elif [[ ${release} == \"archlinux\" ]]; then\n        pacman -Sy caddy --noconfirm\n      fi\n      [[ ! -e \"/usr/bin/caddy\" ]] && echo -e \"${Error} Caddy安装失败，请手动部署，Web网页文件位置：${web_file}\" && exit 1\n      systemctl enable caddy\n      echo \"\" >${caddy_file}\n    }\n    Set_server \"server\"\n    Set_server_http_port\n    cat >>${caddy_file} <<-EOF\nhttp://${server_s}:${server_http_port_s} {\n  root * ${web_file}\n  encode gzip\n  file_server\n}\nEOF\n    systemctl restart caddy\n  else\n    echo -e \"${Info} 跳过 HTTP服务部署，请手动部署，Web网页文件位置：${web_file} ，如果位置改变，请注意修改服务脚本文件 /etc/init.d/status-server 中的 WEB_BIN 变量 !\"\n  fi\n}\n\nInstall_ServerStatus_server() {\n  [[ -e \"${server_file}/sergate\" ]] && echo -e \"${Error} 检测到 $NAME 服务端已安装 !\" && exit 1\n  Set_server_port\n  echo -e \"${Info} 开始安装/配置 依赖...\"\n  Installation_dependency \"server\"\n  Install_caddy\n  echo -e \"${Info} 开始下载/安装...\"\n  Download_Server_Status_server\nInstall_jq\n  echo -e \"${Info} 开始下载/安装 服务脚本...\"\n  Service_Server_Status_server\n  echo -e \"${Info} 开始写入 配置文件...\"\n  Write_server_config\n  Write_server_config_conf\n  echo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n  Start_ServerStatus_server\n}\n\nInstall_ServerStatus_client() {\n  [[ -e \"${client_file}/client-linux.py\" ]] && echo -e \"${Error} 检测到 $NAME 客户端已安装 !\" && exit 1\n  check_sys\n  echo -e \"${Info} 开始设置 用户配置...\"\n  Set_config_client\n  echo -e \"${Info} 开始安装/配置 依赖...\"\n  Installation_dependency \"client\"\n  echo -e \"${Info} 开始下载/安装...\"\n  Download_Server_Status_client\n  echo -e \"${Info} 开始下载/安装 服务脚本...\"\n  Service_Server_Status_client\n  echo -e \"${Info} 开始写入 配置...\"\n  Read_config_client\n  Modify_config_client\n  echo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n  Start_ServerStatus_client\n}\n\nUpdate_ServerStatus_server() {\n  check_installed_server_status\n  Download_Server_Status_server\n  rm -rf /etc/init.d/status-server\n  Service_Server_Status_server\n  Start_ServerStatus_server\n}\n\nUpdate_ServerStatus_client() {\n  check_installed_client_status\n  systemctl stop status-client\n  client_text=\"$(sed 's/\\\"//g;s/,//g;s/ //g' \"${client_file}/client-linux.py\")\"\n  server_s=\"$(echo -e \"${client_text}\" | grep \"SERVER=\" | awk -F \"=\" '{print $2;exit}')\"\n  server_port_s=\"$(echo -e \"${client_text}\" | grep \"PORT=\" | awk -F \"=\" '{print $2;exit}')\"\n  username_s=\"$(echo -e \"${client_text}\" | grep \"USER=\" | awk -F \"=\" '{print $2;exit}')\"\n  password_s=\"$(echo -e \"${client_text}\" | grep \"PASSWORD=\" | awk -F \"=\" '{print $2;exit}')\"\n  Download_Server_Status_client\n  Read_config_client\n  Modify_config_client\n  rm -rf  ${service}/status-client.service\n  Service_Server_Status_client\n  Start_ServerStatus_client\n}\n\nStart_ServerStatus_server() {\n  port=\"$(grep \"m_Port = \" ${server_file}/src/main.cpp | awk '{print $3}' | sed '{s/;$//}')\"\n  check_installed_server_status\n  systemctl -q is-active status-server && echo -e \"${Error} $NAME 正在运行，请检查 !\" && exit 1\n  systemctl start status-server\n\t\tif (systemctl -q is-active status-server) then\n\t\t\techo -e \"${Info} $NAME 服务端启动成功[监听端口：${port}] !\"\n\t\telse\n\t\t\techo -e \"${Error} $NAME 服务端启动失败 !\"\n\t\tfi\n}\n\nStop_ServerStatus_server() {\n  check_installed_server_status\nif (systemctl -q is-active status-server)\n  then\n  systemctl stop status-server \n else  \n echo -e \"${Error} $NAME 没有运行，请检查 !\" && exit 1\nfi\n\t\tif (systemctl -q is-active status-server) then\n\t\t\techo -e \"${Error} $NAME 服务端停止失败 !\"\n\t\telse\n\t\t\techo -e \"${Info} $NAME 服务端停止成功 !\"\n\t\tfi\n}\n\nRestart_ServerStatus_server() {\n  check_installed_server_status\n  systemctl restart status-server\nif (systemctl -q is-active status-server)\n     then\n     echo -e \"${Info} $NAME 服务端重启成功 !\"\nelse\n     echo -e \"${Error} $NAME 服务端重启失败 !\" && exit 1\nfi\n}\n\nUninstall_ServerStatus_server() {\n  check_installed_server_status\n  echo \"确定要卸载 $NAME 服务端(如果同时安装了客户端，则只会删除服务端) ? [y/N]\"\n  echo\n  read -erp \"(默认: n):\" unyn\n  [[ -z ${unyn} ]] && unyn=\"n\"\n  if [[ ${unyn} == [Yy] ]]; then\n    systemctl stop status-server\n    systemctl disable status-server\n    rm ${service}/status-server.service -f\n    if [[ -e \"${client_file}/client-linux.py\" ]]; then\n      rm -rf \"${server_file}\"\n      rm -rf \"${web_file}\"\n      rm -rf \"${plugin_file}\"\n    else\n      rm -rf \"${file}\"\n    fi\n    if [[ -e \"/usr/bin/caddy\" ]]; then\n      systemctl stop caddy\n      systemctl disable caddy\n      [[ ${release} == \"debian\" ]] && apt purge -y caddy\n      [[ ${release} == \"centos\" ]] && yum -y remove caddy\n      [[ ${release} == \"archlinux\" ]] && pacman -R caddy --noconfirm\n    fi\n    systemctl daemon-reload\n    systemctl reset-failed\n    echo && echo \"ServerStatus 卸载完成 !\" && echo\n  else\n    echo && echo \"卸载已取消...\" && echo\n  fi\n}\n\nStart_ServerStatus_client() {\n  check_installed_client_status\nif (systemctl -q is-active status-client) then\n    echo -e \"${Error} $NAME 客户端正在运行，请检查 !\" && exit 1\nfi\n   systemctl start status-client\n   if (systemctl -q is-active status-client)\n     then\n       echo -e \"${Info} $NAME 客户端启动成功 !\"\n   else\n       echo -e \"${Error} $NAME 客户端启动失败 !\"\n   fi\n}\n\nStop_ServerStatus_client() {\n  check_installed_client_status\nif (systemctl -q is-active status-client) then\n  systemctl stop status-client\n    if (systemctl -q is-active status-client) then\n       echo -e \"${Error}} $NAME 停止失败 !\"\n      else\n       echo -e \"${Info} $NAME 停止成功 !\"\n    fi\nelse\n    echo -e \"${Error} $NAME 没有运行，请检查 !\" && exit 1\nfi\n}\n\nRestart_ServerStatus_client() {\n  systemctl restart status-client\nif (systemctl -q is-active status-client) then\n     echo -e \"${Info} $NAME 重启成功 !\"\nelse\n     echo -e \"${Error} $NAME 重启失败 !\" && exit 1\nfi\n}\n\nUninstall_ServerStatus_client() {\n  check_installed_client_status\n  echo \"确定要卸载 $NAME 客户端(如果同时安装了服务端，则只会删除客户端) ? [y/N]\"\n  echo\n  read -erp \"(默认: n):\" unyn\n  [[ -z ${unyn} ]] && unyn=\"n\"\n  if [[ ${unyn} == [Yy] ]]; then\n    systemctl stop status-client\n    systemctl disable status-client\n    rm ${service}/status-client.service -f\n    systemctl daemon-reload\n    systemctl reset-failed\n    rm -rf \"${client_file}\"\n    echo && echo \"ServerStatus 卸载完成 !\" && echo\n  else\n    echo && echo \"卸载已取消...\" && echo\n  fi\n}\n\nView_ServerStatus_client() {\n  check_installed_client_status\n  Read_config_client\n  clear && echo \"————————————————————\" && echo\n  echo -e \"  $NAME 客户端配置信息：\n\n  IP \\t: ${Green_font_prefix}${client_server}${Font_color_suffix}\n  端口 \\t: ${Green_font_prefix}${client_port}${Font_color_suffix}\n  账号 \\t: ${Green_font_prefix}${client_user}${Font_color_suffix}\n  密码 \\t: ${Green_font_prefix}${client_password}${Font_color_suffix}\n\n————————————————————\"\n}\n\nView_client_Log() {\n    journalctl -u status-client.service --no-pager -f\n    if [[ $# == 0 ]]; then\n        before_show_menu\n    fi\n}\n\nView_server_Log() {\n    journalctl -u status-server.service --no-pager -f\n    if [[ $# == 0 ]]; then\n        before_show_menu\n    fi\n}\n\nUpdate_Shell() {\n  sh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"${github_prefix}/status.sh\" | grep 'sh_ver=\"' | awk -F \"=\" '{print $NF}' | sed 's/\\\"//g' | head -1)\n  [[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n  if  [[ -e \"${service}/status-client.service\" ]]; then\n    rm -rf ${service}/status-client.service\n    Service_Server_Status_client\n  fi\n  if  [[ -e \"${service}/status-server.service\" ]]; then\n    rm -rf ${service}/status-server.service\n    Service_Server_Status_server\n  fi\n  wget -N --no-check-certificate \"${github_prefix}/status.sh\"\n  echo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\n\nmenu_client() {\n  echo && echo -e \"  $NAME 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n\n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 客户端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 客户端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 客户端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 客户端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 客户端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 客户端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 客户端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 客户端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 客户端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 服务端菜单\" && echo\n  if [[ -e \"${client_file}/client-linux.py\" ]]; then\n    if (systemctl -q is-active status-client); then\n      echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n    else\n      echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n    fi\n    else\n      echo -e \" 当前状态: 客户端 ${Red_font_prefix}未安装${Font_color_suffix}\"\n  fi\n  echo\n  read -erp \" 请输入数字 [0-10]:\" num\n  case \"$num\" in\n  0)\n    Update_Shell\n    ;;\n  1)\n    Install_ServerStatus_client\n    ;;\n  2)\n    Update_ServerStatus_client\n    ;;\n  3)\n    Uninstall_ServerStatus_client\n    ;;\n  4)\n    Start_ServerStatus_client\n    ;;\n  5)\n    Stop_ServerStatus_client\n    ;;\n  6)\n    Restart_ServerStatus_client\n    ;;\n  7)\n    Set_ServerStatus_client\n    ;;\n  8)\n    View_ServerStatus_client\n    ;;\n  9)\n    View_client_Log\n    ;;\n  10)\n    menu_server\n    ;;\n  *)\n    echo \"请输入正确数字 [0-10]\"\n    ;;\n  esac\n}\nmenu_server() {\n  echo && echo -e \"  $NAME 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n\n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 服务端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 服务端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 服务端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 服务端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 服务端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 服务端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 服务端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 服务端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 服务端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 客户端菜单\" && echo\n  if [[ -e \"${server_file}/sergate\" ]]; then\n    if (systemctl -q is-active status-server) then\n      echo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n    else\n      echo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n    fi\n  else\n    echo -e \" 当前状态: 服务端 ${Red_font_prefix}未安装${Font_color_suffix}\"\n  fi\n  echo\n  read -erp \" 请输入数字 [0-10]:\" num\n  case \"$num\" in\n  0)\n    Update_Shell\n    ;;\n  1)\n    Install_ServerStatus_server\n    ;;\n  2)\n    Update_ServerStatus_server\n    ;;\n  3)\n    Uninstall_ServerStatus_server\n    ;;\n  4)\n    Start_ServerStatus_server\n    ;;\n  5)\n    Stop_ServerStatus_server\n    ;;\n  6)\n    Restart_ServerStatus_server\n    ;;\n  7)\n    Set_ServerStatus_server\n    ;;\n  8)\n    List_ServerStatus_server\n    ;;\n  9)\n    View_server_Log\n    ;;\n  10)\n    menu_client\n    ;;\n  *)\n    echo \"请输入正确数字 [0-10]\"\n    ;;\n  esac\n}\n\ncheck_sys\naction=$1\nif [[ -n $action ]]; then\n  if [[ $action == \"s\" ]]; then\n    menu_server\n  elif [[ $action == \"c\" ]]; then\n    menu_client\n  fi\nelse\n  menu_client\nfi\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}