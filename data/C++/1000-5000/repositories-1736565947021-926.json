{
  "metadata": {
    "timestamp": 1736565947021,
    "page": 926,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BrunoLevy/geogram",
      "stars": 1943,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.287109375,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Build folders\nbuild/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.6728515625,
          "content": "[submodule \"src/lib/geogram/third_party/amgcl\"]\n\tpath = src/lib/geogram/third_party/amgcl\n\turl = https://github.com/ddemidov/amgcl.git\n[submodule \"src/lib/third_party/glfw\"]\n\tpath = src/lib/third_party/glfw\n\turl = https://github.com/glfw/glfw.git\n[submodule \"src/lib/geogram_gfx/third_party/imgui\"]\n\tpath = src/lib/geogram_gfx/third_party/imgui\n\turl = https://github.com/ocornut/imgui.git\n\tbranch = docking\n[submodule \"src/lib/geogram/third_party/libMeshb\"]\n\tpath = src/lib/geogram/third_party/libMeshb\n\turl = https://github.com/LoicMarechal/libMeshb.git\n[submodule \"src/lib/geogram/third_party/rply\"]\n\tpath = src/lib/geogram/third_party/rply\n\turl = https://github.com/diegonehab/rply.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.8193359375,
          "content": "##############################################################################\n# Geogram/Vorpaline root CMakeList\n##############################################################################\n\ncmake_minimum_required(VERSION 3.5)\ncmake_policy(SET CMP0048 NEW)\n\n\n##############################################################################\nset(VORPALINE_VERSION_RC TRUE)\nset(VORPALINE_VERSION_MAJOR 1)\nset(VORPALINE_VERSION_MINOR 9)\nset(VORPALINE_VERSION_PATCH 3)\n\nset(VORPALINE_VERSION_PLAIN ${VORPALINE_VERSION_MAJOR}.${VORPALINE_VERSION_MINOR}.${VORPALINE_VERSION_PATCH})\nif(VORPALINE_VERSION_RC)\nset(VORPALINE_VERSION ${VORPALINE_VERSION_PLAIN}-rc)\nelse()\nset(VORPALINE_VERSION ${VORPALINE_VERSION_PLAIN})\nendif()\n##############################################################################\n\n# Note: geogram.cmake defines GEOGRAM_WITH_VORPALINE\n# that we could have used instead,\n# but geogram.cmake needs to be included after the project()\n# command, since project() resets CFLAGS and CXXFLAGS.\n\nif(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/lib/vorpalib)\nproject(Vorpaline VERSION \"${VORPALINE_VERSION_PLAIN}\")\nelse()\nproject(Geogram VERSION \"${VORPALINE_VERSION_PLAIN}\")\nendif()\n\n# Optional modules\n# (can be overriden in CMakeOptions.txt)\n\n# Set GEOGRAM_SUB_BUILD if Geogram sources included in buildtree, then\n# VORPALINE_PLATFORM can be set directly in parent CMakeLists.txt\nif(NOT GEOGRAM_SUB_BUILD)\noption(GEOGRAM_WITH_GRAPHICS \"Viewers and geogram_gfx library\" ON)\noption(GEOGRAM_WITH_LEGACY_NUMERICS \"Legacy numerical libraries\" ON)\noption(GEOGRAM_WITH_HLBFGS \"Non-linear solver (Yang Liu's HLBFGS)\" ON)\noption(GEOGRAM_WITH_TETGEN \"Tetrahedral mesher (Hang Si's TetGen)\" ON)\noption(GEOGRAM_WITH_TRIANGLE \"Triangle mesher (Jonathan Shewchuk's triangle)\" ON)\noption(GEOGRAM_WITH_LUA \"Built-in LUA interpreter\" ON)\noption(GEOGRAM_LIB_ONLY \"Libraries only (no example programs/no viewer)\" OFF)\noption(GEOGRAM_WITH_FPG \"Predicate generator (Sylvain Pion's FPG)\" OFF)\noption(GEOGRAM_USE_SYSTEM_GLFW3 \"Use the version of GLFW3 installed in the system if found\" OFF)\noption(GEOGRAM_WITH_GARGANTUA \"64-bit indices\" OFF)\noption(GEOGRAM_WITH_TBB \"Use TBB for multi-threading\" OFF)\ninclude(cmake/geo_detect_platform.cmake)\nendif()\n\nif(GEOGRAM_WITH_TBB AND NOT TARGET TBB::tbb)\ninclude(cmake/onetbb.cmake)\nendif()\n\ninclude(cmake/geogram.cmake)\n\n# Override default CMAKE_INSTALL_DOCDIR: Use doc instead of CMake default DATAROOTDIR/doc/PROJECT_NAME\nset(CMAKE_INSTALL_DOCDIR doc CACHE PATH \"Documentation root\")\n\n# Set remaining CMAKE_INSTALL_...DIR variables\ninclude(GNUInstallDirs)\n\n# Install destinations for pkg-config and CMake files\nset(GEOGRAM_INSTALL_PKGCONFIG_DIR ${CMAKE_INSTALL_LIBDIR}/pkgconfig CACHE PATH \"pkg-config file install destination\")\nset(GEOGRAM_INSTALL_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/modules CACHE PATH \"CMake file install destination\")\n\n\nset(VORPALINE_INCLUDE_SUBPATH geogram${VORPALINE_VERSION_MAJOR})\n\n# Determine the current Build-OS (Build-platform without the compiler info)\nstring(REGEX REPLACE \"-[^-]+$\" \"\" VORPALINE_OS ${VORPALINE_PLATFORM})\n\n# Determine the current build date\nstring(TIMESTAMP VORPALINE_BUILD_DATE \"%Y-%m-%d %H:%M:%S\")\nstring(TIMESTAMP YEAR \"%Y\")\n\n# Determine the current build number\n# This is set by Jenkins in environment variable BUILD_NUMBER\nset(VORPALINE_BUILD_NUMBER $ENV{BUILD_NUMBER})\n\nif(GEOGRAM_WITH_GARGANTUA)\nadd_definitions(-DGARGANTUA)\nendif()\n\n\n##############################################################################\n# Get SVN revision info\n\nif(GEOGRAM_WITH_VORPALINE)\n##  set(VORPALINE_SVN_REVISION ${Vorpaline_WC_REVISION})\nendif()\n\n##############################################################################\n# RPATH (where executables find the .so / DLLs)\n# - Enables RPATH support for MACOSX\n# - Makes RPATH of dynamic libraries and executable point to the directory\n#   where libraries are installed.\n\nif(VORPALINE_BUILD_DYNAMIC)\nset(CMAKE_MACOSX_RPATH 1)\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\nendif()\n\nset(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\n# uninstall target\n# Needs to be created before add_subdirectory() because GLFw has\n# also an uninstall target that will be inhibited if there is\n# already one (Geogram's one needs to be first)\n\nconfigure_file(\n\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n\"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\nIMMEDIATE @ONLY)\n\nadd_custom_target(uninstall\nCOMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n\n##############################################################################\n# Geogram/Vorpaline sources\n\nadd_subdirectory(src/lib/geogram)\nif(GEOGRAM_WITH_VORPALINE)\nadd_subdirectory(src/lib/vorpalib)\nendif()\n\nadd_subdirectory(src/lib/third_party)\n\nif(GEOGRAM_WITH_GRAPHICS)\nadd_subdirectory(src/lib/geogram_gfx)\nendif()\n\nif(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/lib/exploragram)\nif(GEOGRAM_WITH_EXPLORAGRAM)\nadd_subdirectory(src/lib/exploragram)\nendif()\nendif()\n\nif(NOT GEOGRAM_LIB_ONLY)\nadd_subdirectory(src/bin)\nadd_subdirectory(src/tests)\nadd_subdirectory(src/examples)\nadd_subdirectory(tests)\nendif()\n\nadd_subdirectory(doc)\n\n##############################################################################\n# Cleanup from previous builds\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/doc/LICENSE.txt)\n\n\n##############################################################################\n# Geogram installation\n\n\n# FindGeogram.cmake\n\ninstall(FILES cmake/FindGeogram.cmake DESTINATION ${GEOGRAM_INSTALL_CMAKE_DIR} COMPONENT devkit)\n\n# Configure CPack\n\nset(CPACK_PACKAGE_NAME ${CMAKE_PROJECT_NAME})\nset(CPACK_SYSTEM_NAME ${VORPALINE_OS})\nset(CPACK_PACKAGE_VENDOR \"INRIA - ALICE\")\n\n\nif(${GEOGRAM_WITH_VORPALINE})\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A flexible mesh generator\")\nelse()\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"fast, simple and easy-to-use primitives for geometric programming\")\nendif()\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${VORPALINE_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${VORPALINE_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${VORPALINE_VERSION_PATCH})\nset(CPACK_PACKAGE_VERSION ${VORPALINE_VERSION})\nset(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})\nset(CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY true)\n\nif(CPACK_GENERATOR STREQUAL \"DEB\")\nset(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\nset(CPACK_PACKAGE_CONTACT Bruno.Levy@inria.fr)\n# set(CPACK_PACKAGE_DEPENDS \"libglfw3 (>= 3.2-1), libc6 (>= 2.22-11), libstdc++ (>= 6.1.1-4)\")\n#   TODO: use objdump -p | grep NEEDED to automate...\n#   or GET_PROPERTY(result GLOBAL ENABLED_FEATURES)  (successful FIND_PACKAGE())\nendif()\n\nif(NOT DEFINED CPACK_GENERATOR)\nif(WIN32)\nset(CPACK_GENERATOR ZIP)\nelse()\nset(CPACK_GENERATOR TGZ)\nendif()\nendif()\n\n# Enable component-based packaging for archive generators (TGZ, ZIP)\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\n\nset(CPACK_COMPONENTS_ALL runtime devkit devkit-full doc-devkit doc-devkit-full)\nset(CPACK_COMPONENTS_GROUPING \"IGNORE\")\n\nset(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME \"Vorpaline Application\")\nset(CPACK_COMPONENT_RUNTIME_GROUP \"Runtime\")\n\nset(CPACK_COMPONENT_DEVKIT_DISPLAY_NAME \"Vorpaline Developer Kit\")\nset(CPACK_COMPONENT_DEVKIT_GROUP \"Development\")\n\nset(CPACK_COMPONENT_DEVKIT-FULL_DISPLAY_NAME \"Vorpaline Full Developer Kit\")\nset(CPACK_COMPONENT_DEVKIT-FULL_GROUP \"Development\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT_DISPLAY_NAME \"Vorpaline API Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT_GROUP \"Documentation\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT-FULL_DISPLAY_NAME \"Vorpaline Full Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT-FULL_GROUP \"Documentation\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT-INTERNAL_DISPLAY_NAME \"Vorpaline Internal Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT-INTERNAL_GROUP \"Documentation\")\n\n# Copy the helper script to build individual packages to the binary directory\nconfigure_file(\ntools/make_package.pl.in\nmake_package.pl\n@ONLY\n)\n\n# This must always be last!\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5908203125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2000-2022 Inria\nAll rights reserved.\n \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n \n* Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n* Neither the name of Inria nor the names of its\ncontributors may be used to endorse or promote products derived from this\nsoftware without specific prior written permission.\n  \nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n \nContact: Bruno Levy\n \n   https://www.inria.fr/fr/bruno-levy\n \n   Inria,\n   Domaine de Voluceau,\n   78150 Le Chesnay - Rocquencourt\n   FRANCE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9296875,
          "content": "# geogram\n\n[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![Release](https://github.com/BrunoLevy/geogram/actions/workflows/make_release.yml/badge.svg)](https://github.com/BrunoLevy/geogram/actions/workflows/make_release.yml)\n[![Emscripten](https://github.com/BrunoLevy/geogram/actions/workflows/emscripten.yml/badge.svg)](https://github.com/BrunoLevy/geogram/actions/workflows/emscripten.yml)\n[![Doxygen](https://github.com/BrunoLevy/geogram/actions/workflows/doxygen.yml/badge.svg)](https://github.com/BrunoLevy/geogram/actions/workflows/doxygen.yml)\n\n[![Continuous](https://github.com/BrunoLevy/geogram/actions/workflows/continuous.yml/badge.svg)](https://github.com/BrunoLevy/geogram/actions/workflows/continuous.yml)\n[![Continuous](https://custom-icon-badges.demolab.com/badge/CI-Continuous-lightblue?logo=tasklist&logoColor=white)](https://brunolevy.github.io/geogram/reports/smoke/)\n\n[![Nightly](https://github.com/BrunoLevy/geogram/actions/workflows/nightly.yml/badge.svg)](https://github.com/BrunoLevy/geogram/actions/workflows/nightly.yml)\n[![Nightly](https://custom-icon-badges.demolab.com/badge/CI-Nightly-lightblue?logo=tasklist&logoColor=white)](https://brunolevy.github.io/geogram/reports/nightly/)\n\n\n\n![](https://github.com/BrunoLevy/geogram/wiki/geogram_banner_2024_3.png)\n\n\nGeogram is a programming library with geometric algorithms. It has\ngeometry-processing functionalities:\n- [surface reconstruction](https://github.com/BrunoLevy/geogram/wiki/Reconstruction)\n- [remeshing](https://github.com/BrunoLevy/geogram/wiki/Remeshing)\n- [parameterization and texturing](https://github.com/BrunoLevy/geogram/wiki/Texturing)\n- [Intersections and Boolean operations](https://github.com/BrunoLevy/geogram/wiki/BooleanOps)\n- [Constructive Solid Geometry](https://github.com/BrunoLevy/geogram/wiki/CSG)\n\nIt also has lower-level algorithm:\n- [Exact numbers / exact predicates](https://github.com/BrunoLevy/geogram/wiki/Exact)\n- [Delaunay triangulations in 2D](https://github.com/BrunoLevy/geogram/wiki/Delaunay2D)\n  and highly efficient parallel [Delaunay triangulations in 3D](https://github.com/BrunoLevy/geogram/wiki/Delaunay3D)\n- Memory efficient surfacic/volumetric/hybrid [mesh data structure](https://github.com/BrunoLevy/geogram/wiki/Mesh)\n- Efficient [geometric search data structures](https://github.com/BrunoLevy/geogram/wiki/Raytrace) for\n  intersection and raytracing (AABBs, KdTrees, ...)\n- [Spectral mesh processing](https://github.com/BrunoLevy/geogram/wiki/ManifoldHarmonics)\n- [Linear solver on CPU and GPU](https://github.com/BrunoLevy/geogram/wiki/OpenNL)\n\nGeogram received the [Symposium on Geometry Processing Software Award](http://awards.geometryprocessing.org/)\nin 2023.\n\nGeogram contains the main results in Geometry Processing from the former\nALICE Inria project, that is, more than 30 research articles published\nin ACM SIGGRAPH, ACM Transactions on Graphics, Symposium on Geometry \nProcessing and Eurographics. It was supported by two grants from the\nEuropean Research Council (ERC): GOODSHAPE and VORPALINE.\n\nLinks\n-----\n  - [Documentation, how to compile, tutorials....](https://github.com/BrunoLevy/geogram/wiki)\n  - [Programmer's reference manuals...](https://brunolevy.github.io/geogram/)  \n  - [Releases](https://github.com/BrunoLevy/geogram/releases)\n  - [Projects with geogram](https://github.com/BrunoLevy/geogram/wiki/Publications)\n  - [Graphite](https://github.com/BrunoLevy/GraphiteThree), an experimental 3D modeler built around geogram.\n  - [Geogram in-browser demos](https://github.com/BrunoLevy/geogram/wiki/compiling_Emscripten#examples)\n    (How is it possible ? _more on this [here](https://github.com/BrunoLevy/geogram/wiki/compiling_Emscripten)_)\n  - [Data](https://github.com/BrunoLevy/GraphiteThree/wiki/Data)\n\nHow does it compare to other geometry-processing libraries ?\n------------------------------------------------------------\n\nSee [FAQ](https://github.com/BrunoLevy/geogram/wiki/FAQ)\n\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.bat",
          "type": "blob",
          "size": 1.4814453125,
          "content": "@ECHO OFF\r\nSETLOCAL ENABLEDELAYEDEXPANSION\r\n\r\nREM ---------------------------------------------------------------- \r\nREM Check for options: [ --build_name_suffix suffix ]\r\nREM ----------------------------------------------------------------\r\nset buildNameSuffix=\"\"\r\nif \"%1\" ==  \"--build_name_suffix\" (\r\n   set buildNameSuffix=%2\r\n   SHIFT & SHIFT\r\n)\r\n\r\nECHO Configuring Geogram build\r\n\r\nREM ----------------------------------------------------------------\r\nREM Create build directory and run cmake\r\nREM ----------------------------------------------------------------\r\n\r\nECHO Starting CMake...\r\nECHO  (NOTE: it may complain about missing VULKAN, you can safely ignore)\r\n\r\nif not exist \"build\\Windows%buildNameSuffix%\" (\r\n   mkdir \"build\\Windows%buildNameSuffix%\"\r\n)\r\n\r\ncd build\\Windows%buildNameSuffix%\r\n\r\n\"%ProgramFiles%\\cmake\\bin\\cmake.exe\" ..\\.. ^\r\n -DVORPALINE_PLATFORM:STRING=Win-vs-generic \r\n\r\n\r\nREM -----------------------------------------------------------------\r\nREM Wait for user keypress to keep DOS box open\r\nREM -----------------------------------------------------------------\r\n\r\nECHO ----------------------------------------------------------------\r\n\r\nif exist \"Geogram.sln\" (\r\n   ECHO Geogram build is configured\r\n   ECHO Visual Studio solution is in GraphiteThree\\build\\Windows%buildNameSuffix%\\Geogram.sln\r\n) else (\r\n   ECHO ERROR: could not generate Visual Studio solution\r\n)\r\n\r\nECHO ----------------------------------------------------------------\r\n\r\nREM set /p DUMMY=Hit ENTER to continue...\r\n\r\n"
        },
        {
          "name": "configure.sh",
          "type": "blob",
          "size": 4.701171875,
          "content": "#!/bin/sh\n\n# This file for Linux users, \n# launches CMake and creates configuration for\n# Release and Debug modes.\n\n\n\n# Parse command line arguments\n\ncmake_options=\nbuild_name_suffix=\nwhile [ -n \"$1\" ]; do\n    case \"$1\" in\n        --debug)\n            cmake_options=\"$cmake_options --trace\"\n            shift\n            ;;\n        --with-*=*)\n            cmake_option=`echo \"$1\" | sed 's/--with-\\([^=]*\\)=\\(.*\\)$/-DVORPALINE_WITH_\\U\\1\\E:STRING=\"\\2\"/'`\n            cmake_options=\"$cmake_options $cmake_option\"\n\t    echo '==============================>' $cmake_option\n            shift\n            ;;\n\n        --with-*)\n            cmake_option=`echo \"$1\" | sed 's/--with-\\(.*\\)$/-DVORPALINE_WITH_\\U\\1:BOOL=TRUE/'`\n            cmake_options=\"$cmake_options $cmake_option\"\n            shift\n            ;;\n\n        --show-platform)\n\t    SHOW_PLATFORM=1\n\t    shift\n\t    ;;\n\n        --help-platforms)\n            echo \"Supported platforms:\"\n            for i in `find cmake/platforms/* -type d`\n            do\n                if [ $i != \"xxxcmake/platforms\" ]\n                then\n                    echo \"*\" `basename $i`\n                fi\n            done\n            exit\n            ;;\n        --build_name_suffix=*)\n            build_name_suffix=`echo \"$1\" | sed 's/--build_name_suffix=\\(.*\\)$/\\1/'`\n            shift\n            ;; \n            \n        --help)\n            cat <<END\nNAME\n    configure.sh\n\nSYNOPSIS\n    Prepares the build environment for Geogram/Vorpaline.\n    \n    - For Unix builds, the script creates 2 build trees for Debug and Release\n    build in a 'build' sub directory under the project root.\n\n    - For Windows builds, the script creates a single build tree that supports\n    all cmake build types (Debug, Release, RelWithDebInfo, MinSizeRel)\n    build in a 'build' sub directory under the project root.\n\nUSAGE\n    configure.sh [options] build-platform\n\nOPTIONS\n\n    --help\n        Prints this page.\n\n    --with-gcov\n        Builds the project for coverage analysis with gcov    \n\n    --with-gprof\n        Builds the project for performance analysis with gprof\n\n    --with-asan\n        Builds the project with Google's AddressSanitizer (dynamic builds only)\n        See: http://code.google.com/p/address-sanitizer/\n\n    --with-tsan\n        Builds the project with Google's ThreadSanitizer (dynamic builds only)\n        See: https://code.google.com/p/thread-sanitizer/\n\n    --with-ddt=ddt-root-dir\n        Builds the project for memory analysis with Allinea's DDT installed in\n        the specified directory: ddt-root-dir\n\n    --build_name_suffix=suffix-dir\n        Add a suffix to define the build directory\n\nPLATFORM\n    Build platforms supported by Geogram/Vorpaline: use configure.sh --help-platforms\nEND\n            exit\n            ;;\n            \n        -*)\n            echo \"Error: unrecognized option: $1\"\n            return 1\n            ;;\n        *)\n            break;\n            ;;\n    esac\ndone\n\n# Check the current OS\n\nos=\"$1\"\nif [ -z \"$os\" ]; then\n    os=`uname -a`\n    case \"$os\" in\n        Linux*x86_64*)\n            os=Linux64-gcc-dynamic\n            ;;\n        Linux*amd64*)\n            os=Linux64-gcc-dynamic\n            ;;\n        Linux*i586*|Linux*i686*)\n            os=Linux32-gcc-dynamic\n            ;;\n        Linux*aarch64*)\n            os=Linux64-gcc-aarch64\n            ;;\n        Linux*riscv64*)\n            os=Linux64-nonx86-gcc-dynamic\n            ;;\n        Darwin*)\n            os=Darwin-clang-dynamic\n            ;;\n        *)\n            echo \"Error: OS not supported: $os\"\n            exit 1\n            ;;\n    esac\nfi\n\nif [ $SHOW_PLATFORM ]\nthen\n   echo $os\n   exit 1\nfi\n\necho\necho ============= Checking for CMake ============\necho\n\nif (cmake --version); then\n    echo \"Found CMake\"\n    echo\nelse\n    echo \"Error: CMake not found, please install it (see http://www.cmake.org/)\"\n    exit 1\nfi\n\n\n#  Import plaform specific environment\n\nif [ ! -f cmake/platforms/$os/setvars.sh ]\nthen\n    echo $os: no such platform\n    exit 1\nfi\n\n. cmake/platforms/$os/setvars.sh || exit 1\n\n# Generate the Makefiles\n\nfor config in Release Debug; do\n   platform=$os-$config\n   echo\n   echo ============= Creating makefiles for $platform ============\n   echo\n\n   build_dir=build/$platform$build_name_suffix\n   mkdir -p $build_dir\n   (cd $build_dir; cmake -DCMAKE_BUILD_TYPE:STRING=$config -DVORPALINE_PLATFORM:STRING=$os $cmake_options ../../)\ndone\n\necho\necho ============== Geogram build configured ==================\necho\n\ncat << EOF\nTo build geogram:\n  - go to build/$os-Release$build_name_suffix or build/$os-Debug$build_name_suffix\n  - run 'make' or 'cmake --build .'\n\nNote: local configuration can be specified in CMakeOptions.txt\n(see CMakeOptions.txt.sample for an example)\nYou'll need to re-run configure.sh if you create or modify CMakeOptions.txt\n\nEOF\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}