{
  "metadata": {
    "timestamp": 1736565626573,
    "page": 509,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Errichto/youtube",
      "stars": 2677,
      "defaultBranch": "master",
      "files": [
        {
          "name": "AOC-2020",
          "type": "tree",
          "content": null
        },
        {
          "name": "AOC-2024",
          "type": "tree",
          "content": null
        },
        {
          "name": "GCJ",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2020 Errichto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "POI",
          "type": "tree",
          "content": null
        },
        {
          "name": "PSUT-coding-marathon",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.0439453125,
          "content": "# youtube\ncodes for my streams and YT videos\n"
        },
        {
          "name": "and-reachability",
          "type": "tree",
          "content": null
        },
        {
          "name": "atcoder-dp",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeforces",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "hashcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "hashcode_2020_final_round.pdf",
          "type": "blob",
          "size": 279.1318359375,
          "content": null
        },
        {
          "name": "isolation",
          "type": "tree",
          "content": null
        },
        {
          "name": "lca.cpp",
          "type": "blob",
          "size": 1.2568359375,
          "content": "// video https://youtu.be/dOAxrhAUIhA\n// problem https://www.spoj.com/problems/LCASQ/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAX_N = 10000;\nconst int LOG = 14;\nvector<int> children[MAX_N];\nint up[MAX_N][LOG]; // up[v][j] is 2^j-th ancestor of v\nint depth[MAX_N];\n\nvoid dfs(int a) {\n\tfor(int b : children[a]) {\n\t\tdepth[b] = depth[a] + 1;\n\t\tup[b][0] = a; // a is parent of b\n\t\tfor(int j = 1; j < LOG; j++) {\n\t\t\tup[b][j] = up[up[b][j-1]][j-1];\n\t\t}\n\t\tdfs(b);\n\t}\n}\n\nint get_lca(int a, int b) { // O(log(N))\n\tif(depth[a] < depth[b]) {\n\t\tswap(a, b);\n\t}\n\t// 1) Get same depth.\n\tint k = depth[a] - depth[b];\n\tfor(int j = LOG - 1; j >= 0; j--) {\n\t\tif(k & (1 << j)) {\n\t\t\ta = up[a][j]; // parent of a\n\t\t}\n\t}\n\t// 2) if b was ancestor of a then now a==b\n\tif(a == b) {\n\t\treturn a;\n\t}\n\t// 3) move both a and b with powers of two\n\tfor(int j = LOG - 1; j >= 0; j--) {\n\t\tif(up[a][j] != up[b][j]) {\n\t\t\ta = up[a][j];\n\t\t\tb = up[b][j];\n\t\t}\n\t}\n\treturn up[a][0];\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int v = 0; v < n; ++v) {\n\t\t// read children of v\n\t\tint cnt;\n\t\tcin >> cnt;\n\t\tfor(int i = 0; i < cnt; i++) {\n\t\t\tint c;\n\t\t\tcin >> c;\n\t\t\tchildren[v].push_back(c);\n\t\t}\n\t}\n\tdfs(0);\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++) {\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tcout << get_lca(a, b) << \"\\n\";\n\t}\n}\n"
        },
        {
          "name": "lectures",
          "type": "tree",
          "content": null
        },
        {
          "name": "leetcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "matrix-exponentiation",
          "type": "tree",
          "content": null
        },
        {
          "name": "painting-the-fence",
          "type": "tree",
          "content": null
        },
        {
          "name": "pairs",
          "type": "tree",
          "content": null
        },
        {
          "name": "partition-into-permutations",
          "type": "tree",
          "content": null
        },
        {
          "name": "reply_code_warsaw_kodziaki.cpp",
          "type": "blob",
          "size": 8.1455078125,
          "content": "#include \"bits/stdc++.h\"\nusing namespace std;\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\nusing ll = long long;\n\nint H, W, count_clients, count_offices;\nconst int nax = 1005;\nchar grid[nax][nax];\nint cost[nax][nax];\nint id_client[nax][nax];\nint odl[155][nax][nax];\n\nconst ll BIG_INF = 1e18L + 5;\nconst int INF = 1e9 + 5;\n//~ void bfs(int row, int col,\n\nstruct Client {\n  int row, col, reward;\n  void read(int _id) {\n    scanf(\"%d%d%d\", &col, &row, &reward);\n    id_client[row][col] = _id;\n  }\n};\n\nstruct Office {\n  int row, col;\n  \n};\n\n\n\n\n\n// Marek\nconstexpr int inf = INF;\nint DajKoszt(char c) {\n  switch (c) {\n    case '#': return inf;\n    case '~': return 800;\n    case '*': return 200;\n    case '+': return 150;\n    case 'X': return 120;\n    case '_': return 100;\n    case 'H': return 70;\n    case 'T': return 50;\n    default:\n      debug() << imie(c) imie(int(c));\n      assert(false);\n  }\n}\nconst int dx[4] = {-1, 1, 0, 0};\nconst int dy[4] = {0, 0, -1, 1};\nvoid LiczOdleglosci() {\n  auto LiczOd = [&](int indeks, int r_, int c_) -> void {\n    vector<vector<pair<int, int>>> dist(1000);\n    auto Daj = [&](int x) -> vector<pair<int, int>>& {\n      if ((int) dist.size() <= x) {\n        //debug() << imie(x);\n        dist.resize(x + 1);\n      }\n      return dist[x];\n    };\n    for (int r = 0; r < H; r++) {\n      for (int c = 0; c < W; c++) {\n        odl[indeks][r][c] = inf;\n      }\n    }\n    vector<vector<bool>> juz(H, vector<bool>(W, false));\n    Daj(0).emplace_back(r_, c_);\n    for (int o = 0; o < (int) dist.size(); o++) {\n      for (int i = 0; i < (int) dist[o].size(); i++) {\n        const int r = dist[o][i].first;\n        const int c = dist[o][i].second;\n        const int noo = o + DajKoszt(grid[r][c]);\n        if (juz[r][c]) continue;\n        juz[r][c] = true;\n        odl[indeks][r][c] = o;\n        for (int j = 0; j < 4; j++) {\n          const int rr = r + dx[j];\n          const int cc = c + dy[j];\n          if (0 <= rr and rr < H and 0 <= cc and cc < W) {\n            if (!juz[rr][cc] and grid[rr][cc] != '#') {\n              Daj(noo).emplace_back(rr, cc);\n            }\n          }\n        }\n      }\n    }\n  };\n  for (int r = 0; r < H; r++) {\n    for (int c = 0; c < W; c++) {\n      if (id_client[r][c] >= 0) {\n        debug() << imie(r) imie(c) imie(id_client[r][c]);\n        LiczOd(id_client[r][c], r, c);\n      }\n    }\n  }\n}\nstring Odzyskaj(int r, int c, int r2, int c2) { // office, client\n  static constexpr char kier[4] = {'U', 'D', 'L', 'R'};\n  const int id = id_client[r2][c2];\n  //debug() << imie(r) imie(c) imie(r2) imie(c2) imie(id);\n  assert(id >= 0);\n  assert(odl[id][r][c] < inf);\n  string res;\n  int koszt = 0;\n  while (r != r2 or c != c2) {\n    int rrr = -1;\n    int ccc = -1;\n    int ooo = inf;\n    char znak = '\\0';\n    for (int i = 0; i < 4; i++) {\n      const int rr = r + dx[i];\n      const int cc = c + dy[i];\n      if (0 <= rr and rr < H and 0 <= cc and cc < W) {\n        //debug() << imie(rr) imie(cc) imie(odl[id][rr][cc]);\n        const int oo = odl[id][rr][cc] + DajKoszt(grid[rr][cc]);\n        if (ooo > oo) {\n          ooo = oo;\n          rrr = rr;\n          ccc = cc;\n          znak = kier[i];\n        }\n      }\n    }\n    //debug() << imie(rrr) imie(ccc) imie(ooo) imie(znak);\n    assert(rrr != -1);\n    r = rrr;\n    c = ccc;\n    koszt += DajKoszt(grid[r][c]);\n    res.push_back(znak);\n  }\n  //debug() << imie(koszt);\n  return res;\n}\n\n\n\n\n\n\n\n\nint main() {\n  scanf(\"%d%d%d%d\", &W, &H, &count_clients, &count_offices);\n  vector<Client> clients(count_clients);\n  for(int row = 0; row < H; ++row) {\n    for(int col = 0; col < W; ++col) {\n      id_client[row][col] = -1;\n    }\n  }\n  for(int i = 0; i < count_clients; ++i) {\n    clients[i].read(i);\n  }\n  for(int row = 0; row < H; ++row) {\n    scanf(\"%s\", grid[row]);\n  }\n  LiczOdleglosci();\n  //~ vector<Office> offices;\n  //~ for(int row = 0; row < H; ++row) {\n    //~ for(int col = 0; col < W; ++col) {\n      //~ if(grid[row][col] != '#' && id_client[row][col] != -1 && (int) offices.size() < count_offices) {\n        //~ offices.push_back(Office{row, col});\n      //~ }\n    //~ }\n  //~ }\n  \n  vector<int> now_best_distance(count_clients, INF);\n  vector<vector<bool>> is_office(H, vector<bool>(W));\n  vector<pair<int,int>> offices;\n  \n  auto find_best_office = [&]() {\n    pair<ll, pair<int,int>> best = make_pair(-1LL, make_pair(-1, -1));\n    for(int row = 0; row < H; ++row) {\n      for(int col = 0; col < W; ++col) {\n        if(id_client[row][col] == -1 && !is_office[row][col] && grid[row][col] != '#') {\n          ll would = 0;\n          for(int c = 0; c < count_clients; ++c) {\n            if(odl[c][row][col] != inf) {\n              int reward = clients[c].reward;\n              if(reward >= odl[c][row][col] || odl[c][row][col] < now_best_distance[c]) {\n                would += reward - odl[c][row][col];\n                if(reward < now_best_distance[c]) {\n                  would -= reward - now_best_distance[c];\n                }\n              }\n            }\n          }\n          best = max(best, make_pair(would, make_pair(row, col)));\n        }\n      }\n    }\n    pair<int,int> off = best.second;\n    //~ static bool started = false;\n    //~ if(!started) {\n      //~ assert(id_client[10][970] != -1);\n      //~ off = {10, 971};\n      //~ started = true;\n    //~ }\n    int row = off.first;\n    int col = off.second;\n    assert(row != -1);\n    assert(!is_office[row][col]);\n    is_office[row][col] = true;\n    for(int c = 0; c < count_clients; ++c) {\n      if(odl[c][row][col] != inf) {\n        now_best_distance[c] = min(now_best_distance[c], odl[c][row][col]);\n      }\n    }\n    return make_pair(row, col);\n  };\n  \n  for(int rep = 0; rep < count_offices; ++rep) {\n    pair<int,int> off = find_best_office();\n    offices.push_back(off);\n  }\n  for(int c = 0; c < count_clients; ++c) {\n    assert(now_best_distance[c] != INF);\n  }\n  \n  for(int rep : {1, 2, 3, 4, 3, 2, 1}) {\n    for(int whom = 0; whom < (int) offices.size() - rep; ++whom) {\n      for(int i = whom; i < whom + rep; ++i) {\n        is_office[offices[i].first][offices[i].second] = false;\n      }\n      for(int& x : now_best_distance) {\n        x = INF;\n      }\n      for(int i = whom; i < whom + rep; ++i) {\n        for(int c = 0; c < count_clients; ++c) {\n          for(int o = 0; o < (int) offices.size(); ++o) {\n            if(!(whom <= o && o < whom + rep)) {\n              now_best_distance[c] = min(now_best_distance[c], odl[c][offices[o].first][offices[o].second]);\n            }\n          }\n        }\n        pair<int,int> off = find_best_office();\n        is_office[off.first][off.second] = true;\n        offices[i] = off;\n      }\n    }\n  }\n  \n  for(int& x : now_best_distance) {\n    x = INF;\n  }\n  for(int c = 0; c < count_clients; ++c) {\n    for(pair<int,int> off : offices) {\n      now_best_distance[c] = min(now_best_distance[c], odl[c][off.first][off.second]);\n    }\n  }\n  for(int c = 0; c < count_clients; ++c) {\n    assert(now_best_distance[c] != INF);\n  }\n  \n  long long answer = 0;\n  \n  for(pair<int,int> off : offices) {\n    for(int c = 0; c < count_clients; ++c) {\n      int tmp = odl[c][off.first][off.second];\n      if(clients[c].reward >= tmp || tmp == now_best_distance[c]) {\n        printf(\"%d %d \", off.second, off.first);\n        string s = Odzyskaj(off.first, off.second, clients[c].row, clients[c].col);\n        answer += clients[c].reward - odl[c][off.first][off.second];\n        printf(\"%s\\n\", s.c_str());\n        now_best_distance[c] = -1; // fake value, not to force something again\n      }\n    }\n  }\n  \n  cerr << \"wynik bez bonusu = \" << answer << endl;\n}\n"
        },
        {
          "name": "rmq_sparse_table.cpp",
          "type": "blob",
          "size": 0.88671875,
          "content": "// video https://youtu.be/0jWeUdxrGm4\n// problem https://www.spoj.com/problems/RMQSQ/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAX_N = 100'005;\nconst int LOG = 17;\nint a[MAX_N];\nint m[MAX_N][LOG]; // m[i][j] is minimum among a[i..i+2^j-1]\nint bin_log[MAX_N];\n\nint query(int L, int R) { // O(1)\n\tint length = R - L + 1;\n\tint k = bin_log[length];\n\treturn min(m[L][k], m[R-(1<<k)+1][k]);\n}\n\nint main() {\n\t// 1) read input\n\tint n;\n\tcin >> n;\n\tbin_log[1] = 0;\n\tfor(int i = 2; i <= n; i++) {\n\t\tbin_log[i] = bin_log[i/2]+1;\n\t}\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> a[i];\n\t\tm[i][0] = a[i];\n\t}\n\t// 2) preprocessing, O(N*log(N))\n\tfor(int k = 1; k < LOG; k++) {\n\t\tfor(int i = 0; i + (1 << k) - 1 < n; i++) {\n\t\t\tm[i][k] = min(m[i][k-1], m[i+(1<<(k-1))][k-1]);\n\t\t}\n\t}\n\t// 3) answer queries\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++) {\n\t\tint L, R;\n\t\tcin >> L >> R;\n\t\tcout << query(L, R) << \"\\n\";\n\t}\n}\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "two-arrays-and-sum-of-functions",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}