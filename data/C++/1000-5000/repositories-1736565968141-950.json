{
  "metadata": {
    "timestamp": 1736565968141,
    "page": 950,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AcademySoftwareFoundation/MaterialX",
      "stars": 1909,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.505859375,
          "content": "AllowShortBlocksOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortLambdasOnASingleLine: false\nAlwaysBreakTemplateDeclarations: No\nBreakBeforeBraces: Allman\nBreakConstructorInitializers: AfterColon\nBreakConstructorInitializersBeforeComma: true\nColumnLimit: 0\nCpp11BracedListStyle: false\nIndentCaseLabels: true\nIndentPPDirectives: BeforeHash\nIndentWidth: 4\nLambdaBodyIndentation: OuterScope\nPointerAlignment: Left\nSortIncludes: false\nSpaceAfterCStyleCast: true\nSpaceInEmptyBlock: true\nUseTab: Never\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "build\ndist\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.447265625,
          "content": "[submodule \"source/MaterialXView/NanoGUI\"]\n\tpath = source/MaterialXView/NanoGUI\n\turl = https://github.com/mitsuba-renderer/nanogui\n[submodule \"source/MaterialXGraphEditor/External/ImGui\"]\n\tpath = source/MaterialXGraphEditor/External/ImGui\n\turl = https://github.com/ocornut/imgui\n[submodule \"source/MaterialXGraphEditor/External/ImGuiNodeEditor\"]\n\tpath = source/MaterialXGraphEditor/External/ImGuiNodeEditor\n\turl = https://github.com/thedmd/imgui-node-editor\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 50.76171875,
          "content": "# Change Log\n\n## [1.39.2] - Release Candidate\n\n### Added\n- Added support for the [Chiang Hair BSDF](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1968), with initial implementations in hardware shading languages and MDL.\n- Added support for the [Disney Principled](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2004) shading model, implemented as a language-independent graph.\n- Added support for [generic color ramps](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1884), using a graph-based ramp node with ten control points.\n- Added support for [Worley noise with solid cells](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2119), opening up new artistic options for metal flake shaders.\n- Added support for [data library referencing](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2054), enabling improved performance in shader generation.\n- Added support for [custom structure types](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1831) in MaterialX.\n- Added support for [functional equivalence](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2003) tests between MaterialX elements.\n- Added support for [geompropvalueuniform nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2092), improving functional parity between MaterialX and USD.\n- Added support for [transmission effects](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2027) in the translation graph from Standard Surface to glTF PBR.\n- Added support for [coated emission](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2087) in the translation graph from Standard Surface to UsdPreviewSurface.\n- Added support for [Apple framework builds](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2020).\n- Added support for [MDL 1.9](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2102) in shader generation.\n- Added support for [viewdirection space](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2036) in hardware shading languages.\n- Added support for [image downsampling](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2159) in MaterialXRender.\n- Added support for [image difference statistics](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2160) in render tests.\n- Added a [combined version define](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2031) to MaterialX C++.\n- Added a [release signing workflow](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2009) to GitHub Actions.\n- Added documentation for [keyboard shortcuts](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2026) in the MaterialX Viewer.\n\n### Changed\n- Improved the performance of [graph traversal](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2023) by skipping edges that have already been visited.\n- Reduced duplication between the [MSL and GLSL implementations](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2068) of nodes.\n- Updated the [UsdPreviewSurface shading model](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2084) to v2.6, maintaining the visual interpretation of existing assets.\n- Raised the [minimum OSL version](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2144) to v1.12.6 in OSL shader generation.\n\n### Fixed\n- Fixed [unintentional camera orbiting](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2032) in the render view of the MaterialX Graph Editor.\n- Fixed [banding artifacts](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1977) in the MaterialX Viewer on MacOS.\n- Fixed the handling of [missing scenes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2124) in the MaterialX Web Viewer.\n- Fixed an edge case for [node pasting](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2145) in the MaterialX Graph Editor.\n- Fixed the implementation of [texture filtering](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2158) in OSL shader generation.\n- Fixed the implementation of the [heighttonormal node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2165) in OSL shader generation.\n- Fixed a call to the [anisotropic_vdf closure](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2016) in OSL shader generation.\n\n### Removed\n- Removed support for the [legacy OSL closures](https://github.com/AcademySoftwareFoundation/MaterialX/pull/2121), focusing exclusively on the MaterialX-synchronized closures in OSL 1.12 and beyond.\n\n## [1.39.1] - 2024-09-03\n\n### Added\n- Added initial shader translation graphs between [Standard Surface](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1934) and [OpenPBR Surface](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1949).\n- Added initial support for [code generation hints](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1954).\n\n### Changed\n- Raised the minimum CMake version to [CMake 3.24](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1929).\n- Moved feature proposals from the main specification to a new [MaterialX Proposals](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1953) document.\n- Updated the open definitions of the [MaterialX Lama nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1955) to improve alignment with RenderMan.\n\n### Fixed\n- Fixed errors in the [installation steps](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1923) for CMake builds.\n- Fixed the computation of [Fresnel transmission](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1962) in GLSL.\n- Fixed an implementation of the [combine2 node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1975) in MDL.\n- Fixed transposed matrices in color transforms for the [displayp3 space](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1960).\n- Fixed edge cases in the version upgrade process for [swizzle](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1945) [nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1957).\n- Fixed a crash in the Graph Editor when [renaming a node graph](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1930).\n- Fixed the exporting of [PugiXML symbols](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1944) in MaterialXFormat.\n\n### Removed\n- Removed an extra installation of the [resources folder](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1927) in MaterialXGenShader.\n\n## [1.39.0] - 2024-07-05\n\n### Added\n- Added support for the [OpenPBR Surface](https://academysoftwarefoundation.github.io/OpenPBR/) shading model, including the [MaterialX definition](https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/bxdf/open_pbr_surface.mtlx) and [example materials](https://github.com/AcademySoftwareFoundation/MaterialX/tree/main/resources/Materials/Examples/OpenPbr) for OpenPBR Surface v1.1.\n- Added support for [Hoffman-Schlick Fresnel](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1727), [Zeltner sheen](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1880), and [energy-compensated Oren-Nayar diffuse](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1822), with initial implementations in hardware shading languages.\n- Added support for the [LamaGeneralizedSchlick and LamaIridescence](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1897) nodes, with definitions provided as MaterialX graphs.\n- Added support for integer-type [add, subtract](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1777), and [conditional](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1786) nodes.\n- Added support for matrix-type [switch](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1779) and [conditional](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1780) nodes.\n- Added support for additional [convert node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1905) input and output types.\n- Added support for [monolithic builds](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1725) of MaterialX.\n- Added support for the [full set of shader generators](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1771) in JavaScript.\n- Added support for [frame timing](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1739) in the MaterialX Viewer.\n- Added a [uiScale option](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1586) for adjusting DPI in the Graph Editor.\n- Added an example script to [generate a MaterialX document](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1746) from a folder of textures.\n- Added unit tests for [core utilities](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1768) and [ESSL shader generation](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1781).\n- Added support for [Python 3.12](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1802) in Python wheel generation.\n- Added [GCC 14](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1913) and [Clang 18](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1820) builds to GitHub Actions CI.\n\n### Changed\n- Raised the minimum C++ version for MaterialX builds to [C++17](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1712).\n- Updated the [PyBind11 library](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1839) to version 2.12.0, enabling support for recent compilers and CMake versions.\n- Improved the expression of [thin-film layering](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1413) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Improved the generality of the [normalmap node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1911) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Extended the [switch node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1660) to ten inputs in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Renamed the inputs of the [atan2 node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1659) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Changed the type of [subsurface_bsdf radius](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1834) from vector3 to color3 in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Renamed the [normalmap nodedef](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1677) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Improved the support for [double-sided materials](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1866) in MaterialX 1.39.\n- Optimized [Fresnel](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1732) [computations](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1733) in [GLSL](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1736), improving the performance of physically based shading in real-time renders.\n- Applied [lossless optimization](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1738) to PNG and JPG textures in the MaterialX repository.\n\n### Fixed\n- Fixed default values for the [creatematrix node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1788).\n- Fixed an issue with [keyboard input focus](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1596) in the Graph Editor.\n\n### Removed\n- Removed the [swizzle node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1793) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Removed the [channels attribute](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1804) in MaterialX 1.39, with automatic upgrade logic for legacy documents.\n- Removed the unimplemented [arrayappend node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1707) in MaterialX 1.39.\n\n## [1.38.10] - 2024-04-12\n\n### Added\n- Added support for [environment light intensity](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1737) in generated GLSL shaders.\n\n### Changed\n- Removed an [extra suffix](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1744) from element names in texture baking.\n\n### Fixed\n- Moved environment prefilter functions to their [referencing GLSL files](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1748), addressing shader compilation errors in USD.\n- Enabled color and unit transforms on [root nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1757) in shader generation, addressing missing color transforms in USD.\n- Updated [document caches](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1753) to store elements in declaration order, addressing compiler-dependent behavior in nodedef lookups.\n- Switched to [framework linkage](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1752) for OpenGL libraries on MacOS, addressing build issues in downstream projects.\n- Switched to [legacy OpenGL libraries](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1766) for Python wheels on Linux, addressing missing OpenGL functionality in Python wheels.\n- Added a [missing vertex data prefix](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1762) in Vulkan GLSL shader generation.\n\n## [1.38.9] - 2024-02-26\n\n### Added\n- Added an initial NPR (non-photorealistic rendering) data library to MaterialX, supporting the [View Direction](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1631), [Facing Ratio](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1671), and [Gooch Shading](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1674) nodes.\n- Added new nodes to the standard data library, including [Reflect](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1690), [Refract](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1698), [Safe Power](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1689), [Create Matrix](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1553), and [Round](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1678).\n- Added support for the generation of [pre-filtered environment maps](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1420) in MaterialX GLSL and MSL.\n- Added support for [geometry drag & drop](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1663), [frame capture](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1636), [UI ranges](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1623) and [enumerated values](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1632) in the MaterialX Web Viewer.\n- Added [floating popups](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1565) for hovered pins in the MaterialX Graph Editor.\n- Added [UI ranges](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1646) to the 'useSpecularWorkflow' and 'normal' inputs of the UsdPreviewSurface shading model.\n- Added [versioning rules](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1664) for the MaterialX API and data libraries to the developer guide.\n- Added initial C++ [fuzz tests](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1605) and [coverage tests](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1548) to GitHub Actions CI.\n- Added [GCC 13, Clang 15](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1602), and [Python 3.12](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1588) builds to GitHub Actions CI.\n\n### Changed\n- Enabled the [new OSL closures](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1702) by default in shader generation, with the MATERIALX_OSL_LEGACY_CLOSURES flag used to request legacy closures.\n- Updated the MaterialX Web Viewer to [three.js r152](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1615).\n- Switched to a more efficient representation of [HDR images](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1616) in the MaterialX Web Viewer.\n- Improved the logic for [connecting pins](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1569) in the MaterialX Graph Editor.\n- Improved the handling of [filename inputs](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1547) in OSL shader generation.\n- Reduced the size of the MaterialX data libraries, improving the use of [graph definitions](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1653) and merging [duplicate implementations](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1642).\n- Raised the minimum CMake version to [CMake 3.16](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1607).\n- Updated the C++ unit test library to [Catch 2.13.10](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1566).\n\n### Fixed\n- Fixed the attenuation of [coated emission](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1534) in the Standard Surface shading model.\n- Fixed the implementation of the [overlay node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1539) in shader generation.\n- Fixed an edge case for [type pointer comparisons](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1665) in shader generation.\n- Fixed an edge case for [transform nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1560) in GLSL and MSL shader generation.\n- Fixed the implementation of [mx_hsvtorgb](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1584) in MDL shader generation.\n- Fixed [orphaned links](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1667) when deleting nodes in the MaterialX Graph Editor.\n- Fixed [scroll wheel interactions](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1578) across windows of the MaterialX Graph Editor.\n- Fixed the generation of unused [imgui.ini files](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1570) in the MaterialX Graph Editor.\n- Fixed a dependency on [module import order](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1595) in MaterialX Python.\n- Fixed an [off-by-one index check](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1582) in Element::setChildIndex.\n- Fixed a [missing null check](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1601) in Graph::propertyEditor.\n- Fixed cases where [absolute paths](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1603) were stored in MaterialXConfig.cmake.\n\n## [1.38.8] - 2023-09-08\n\n### Added\n- Added a broad set of new pattern nodes to MaterialX, including [Circle, Hexagon, Cloverleaf, Line, Grid, Crosshatch](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1411), [Checkerboard](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1328), [Random Color, Random Float](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1330), [Triangle Wave](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1334), [Integer Floor, Integer Ceiling](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1362), and [Distance](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1333).\n- Added support for [MaterialX builds on iOS](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1435).\n- Added support for [drag-and-drop import](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1482) of MaterialX files in the [Web Viewer](https://academysoftwarefoundation.github.io/MaterialX/).\n- Added generation of [MaterialX Python wheels](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1317) in GitHub Actions, enabling the distribution of MaterialX Python packages through PyPI.\n- Added support for the [lin_displayp3 and srgb_displayp3](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1368) colorspaces in shader generation.\n- Added support for the [blackbody PBR node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1367) in shader generation.\n- Added support for [displacement](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1396) in MDL generation.\n- Added [blend](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1350) and [up-axis](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1489) controls to the triplanar projection node.\n- Added version details to [shared libraries](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1447) on Windows.\n- Added a [MacOS 13](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1375) build to GitHub Actions.\n\n### Changed\n- Raised the minimum C++ version for MaterialX builds to [C++14](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1340).\n- Upgraded the [PyBind11 library](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1343) to version 2.10.4, raising the minimum Python version to 3.6, and enabling support for Python versions 3.11 and beyond.\n- Improved the performance and convergence of [GGX importance sampling](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1390) in GLSL generation, leveraging insights from the HPG 2023 paper by Jonathan Dupuy and Anis Benyoub.\n- Improved [property panel display](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1346) in the MaterialX Graph Editor.\n- Improved [node spacing](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1476) in the MaterialX Graph Editor.\n- Improved the robustness of [MaterialX unit tests](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1370) with respect to the current working directory.\n- Simplified the handling of [default colors](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1452) in GLSL generation, removing dynamic branches on texture size.\n- Simplified the definitions of the [default color transforms](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1352), implementing them as language-independent MaterialX graphs.\n- Simplified the interface of [ShaderGenerator::emitFunctionCall](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1344), marking its original interface as deprecated.\n- Marked legacy interfaces for [findRenderableElements and findRenderableMaterialNodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1340) as deprecated, making their usage visible to clients as compiler warnings.\n- Moved the MaterialX specification to [public Markdown files in GitHub](https://github.com/AcademySoftwareFoundation/MaterialX/tree/main/documents/Specification), enabling direct contributions from the community.\n\n### Fixed\n- Fixed brightness artifacts in the [triplanar projection node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1350).\n- Aligned default values for [conductor_bsdf](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1379) with the MaterialX specification.\n- Fixed [volume mixing](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1395) in MDL generation.\n- Fixed a bug to improve [shader generation determinism](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1376).\n- Fixed a bug to improve the [consistency of auto layout](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1389) in the MaterialX Graph Editor.\n- Fixed a bug to enable [multi-output connection edits](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1506) in the MaterialX Graph Editor.\n- Fixed a bug in [dot node optimizations](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1522) for shader generation.\n\n## [1.38.7] - 2023-04-21\n\n### Added\n- Added the [MaterialX Graph Editor](https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/documents/DeveloperGuide/GraphEditor.md), an example application for visualizing, creating, and editing MaterialX graphs.\n- Added support for the [Metal Shading Language](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1258) in MaterialX shader generation and rendering.\n- Added support for the [generalized_schlick_edf node](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1262), enabling the expression of coated emissive surfaces.\n- Added support for the [adobergb and lin_adobergb](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1118) color spaces in shader generation.\n- Added uisoftmin and uisoftmax attributes to [mix nodes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1168) and [IOR inputs](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1151).\n- Added support for [authored bitangent vectors](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1156) in GLSL, selected by the hwImplicitBitangents generator option.\n- Added a [tangent input](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1157) to the glTF PBR shading model.\n- Added a [Clang Format](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1174) step to GitHub Actions builds.\n- Added support for [Xcode 14](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1326).\n\n### Changed\n- Included the [standard data libraries](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1237) in MaterialX Python packages.\n- Improved the [support library](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1184) and [node implementations](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1185) for OSL generation.\n- Updated MDL shader generation to support [MDL 1.7](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1273).\n- Improved the handling of [functional graphs](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1243) in MDL generation.\n- Upgraded the [NanoGUI version](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1195) in the viewer to support Apple M1 builds.\n- Upgraded the [Catch library](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1310) to version 2.13.9.\n\n### Fixed\n- Fixed logic for [tangent basis orthogonalization](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1177) in generated GLSL.\n- Fixed logic for [metallic F90](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1187) and an [opacity edge case](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1186) in UsdPreviewSurface.\n- Fixed parsing of [inline source code variables](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1191) in node implementations.\n\n## [1.38.6] - 2022-11-04\n\n### Added\n- Added new [Unified Noise](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1087), [Color Correct](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1086), and [Bump](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1085) nodes, providing artistic interfaces over the standard procedural, adjustment, and geometric primitives.\n- Added shader generation support for the [MaterialX closures in OSL](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/releases/tag/v1.12.6.2), selected by a new [CMake build option](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1039).\n- Added a shader translation graph from [Autodesk Standard Surface to glTF PBR](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1064).\n- Added support for the [transmission_extra_roughness](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1079) input in the Standard Surface shading model.\n- Added support for the [iridescence](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1055) inputs in the glTF PBR shading model.\n- Added support for the [subsurface_bsdf](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1053) node in MDL.\n- Added an [operationorder](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1027) input to the 'place2d' node.\n- Extended the [mix](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1077) node to support multi-channel interpolators.\n- Extended the [flattenSubgraphs](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1101) method to handle a broader range of graph structures.\n\n### Changed\n- Improved the alignment of the [UsdPreviewSurface shading graph](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1082) with reference implementations.\n- Improved the accuracy of the [thin-film BSDF](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1055) implementation in GLSL.\n- Improved code generation for the [mix](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1104) node of 'surfaceshader' type.\n- Removed [add and multiply](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1089) nodes for 'surfaceshader', 'volumeshader', and 'displacementshader' types.\n- Refactored and extended the [Advanced Options](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1093) panel in MaterialXView.\n\n### Fixed\n- Fixed the implementation of the [screen](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1111) compositing node in GLSL, OSL, and MDL.\n- Fixed parent/child precedence in the [getGeometryBindings](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1113) function.\n- Fixed [OpenGL errors](https://github.com/AcademySoftwareFoundation/MaterialX/pull/1126) when unbinding geometry in MaterialXView on MacOS.\n\n## [1.38.5] - 2022-07-09\n\n### Added\n- Added a [refraction approximation](https://github.com/AcademySoftwareFoundation/MaterialX/pull/918) for transmissive surfaces in GLSL, selected by the hwTransmissionRenderMethod generator option.\n- Added support for generalized Schlick transmission in GLSL and OSL.\n- Added support for code generation from material nodes.\n- Added a specialization of GlslShaderGenerator for Vulkan GLSL generation.\n- Added the [Chess Set](https://github.com/AcademySoftwareFoundation/MaterialX/pull/982) example from the [Karma: A Beautiful Game](https://www.sidefx.com/tutorials/karma-a-beautiful-game/) tutorial.  Contributed to the MaterialX project by SideFX, original artwork by Moeen and Mujtaba Sayed.\n- Added static and dynamic analysis tests to GitHub Actions builds.\n- Added support for GCC 12, Clang 13, and Clang 14.\n\n### Changed\n- Switched to [relative shader includes](https://github.com/AcademySoftwareFoundation/MaterialX/pull/926) within the MaterialX data libraries, enabling custom folder names in distributions.\n- Improved and extended the sample [Web Viewer](https://academysoftwarefoundation.github.io/MaterialX/).\n\n### Fixed\n- Fixed math for normalizing normal and tangent vectors in GLSL.\n- Fixed math for transforming a vector4 by a matrix in OSL.\n- Fixed compatibility of OSL Worley noise with OSL 1.9.10.\n- Fixed layering of thin-film effects in the Standard Surface shading model.\n- Fixed input default values in the glTF PBR shading model.\n\n## [1.38.4] - 2022-04-06\n\n### Added\n- Added [JavaScript bindings](https://github.com/AcademySoftwareFoundation/MaterialX/tree/main/javascript) for MaterialXCore, MaterialXFormat, and MaterialXGenGlsl.\n- Added a sample [Web Viewer](https://academysoftwarefoundation.github.io/MaterialX/), built and deployed through GitHub Actions.\n- Added a MaterialX graph for the [glTF PBR](libraries/bxdf/gltf_pbr.mtlx) shading model.\n- Added new 'worleynoise2d' and 'worleynoise3d' nodes, with implementations in GLSL, OSL, and MDL.\n- Added new 'surface_unlit' node, with implementations in GLSL, OSL, and MDL.\n- Added support for the glTF geometry format in MaterialXRender and MaterialXView.\n\n### Changed\n- Moved the MaterialX project to the [Academy Software Foundation GitHub](https://github.com/AcademySoftwareFoundation/MaterialX).\n- Removed hardcoded references to \"libraries\" in calls to GenContext::registerSourceCodeSearchPath.  (See Developer Notes below for additional details.)\n- Improved the accuracy of mx_ggx_dir_albedo_analytic and mx_fresnel_conductor in GLSL.\n- Updated the PyBind11 library to version 2.9.0.\n\n### Fixed\n- Aligned GLSL and MDL implementations of 'fractal3d' with OSL.\n- Fixed MDL implementations of 'sheen_bsdf' and 'thin_film_bsdf'.\n- Fixed an error in code generation from multi-output node graphs.\n\n### Developer Notes\n- This release removes hardcoded references to \"libraries\" in calls to GenContext::registerSourceCodeSearchPath within the MaterialX codebase.  Applications with their own custom code generators should make the same change, removing hardcoded references to \"libraries\" in calls to GenContext::registerSourceCodeSearchPath.  See pull request [877](https://github.com/AcademySoftwareFoundation/MaterialX/pull/877) for coding details.\n\n## [1.38.3] - 2021-12-14\n\n### Added\n- Added an inheritance structure for versions of Autodesk Standard Surface.\n- Added versioning and customization support to MaterialX namespaces in C++.\n- Added preprocessor definitions for the API version to MaterialXCore.\n- Added color transform methods to the Image class.\n- Added an initial ClangFormat file for the MaterialX codebase.\n- Added initial support for FreeBSD.\n- Added support for Xcode 13.\n\n### Changed\n- Refactored BSDF handling in shader generation, allowing for more flexible and efficient vertical layering.\n- Optimized GLSL implementations for GGX specular, moving common computations to tangent space.\n- Refactored the TextureBaker API for clarity and flexibility.\n- Merged the ViewHandler and viewer camera into a new Camera class in MaterialXRender.\n- Updated CMake configuration generation logic, adding handling for shared library builds.\n- Updated the PyBind11 library to version 2.7.1\n\n### Fixed\n- Fixed a performance regression in MaterialXView for multi-UDIM assets.\n- Fixed a bug that caused shader inputs to be skipped in createUIPropertyGroups.\n- Fixed the value of transmission roughness in UsdPreviewSurface.\n- Fixed Vulkan compatibility for generated GLSL code.\n\n## [1.38.2] - 2021-10-07\n\n### Added\n- Added an initial shader translation graph from Autodesk Standard Surface to UsdPreviewSurface.\n- Added example script translateshader.py with validation in GitHub Actions.\n- Added support for filename templates in texture baking.\n- Added graph definitions for the MaterialX Lama node set.\n- Added UI properties to the interface of UsdPreviewSurface.\n- Added an initial ESSL shader generator.\n- Added support for GCC 11.\n\n### Changed\n- Improved the accuracy of directional albedo computations for GGX specular and Imageworks sheen.\n- Updated default color space names to follow ACES 1.2 conventions (e.g. g22_rec709), while maintaining compatibility with legacy names (e.g. gamma22).\n\n### Fixed\n- Fixed the default value of the roughness input of UsdPreviewSurface.\n- Fixed the assignment of channel names in EXR files written through OpenImageIO.\n\n## [1.38.1] - 2021-06-18\n\n### Added\n- Added support for shared library builds on Windows.\n- Added support for 16-bit unsigned integer images in MaterialXRender.\n- Added support for compound nodegraphs with user interfaces in shader and UI generation.\n- Added headers for newly proposed MaterialX closures in OSL.\n- Added a shader translation command to the viewer, assigned to the 'T' hotkey.\n\n### Changed\n- Improved the memory efficiency of texture baking operations.\n- Improved the compatibility of generated MDL code with Omniverse.\n- Refactored image resolution logic into new methods ImageHandler\\:\\:getReferencedImages and MaterialX\\:\\:getMaxDimensions.\n- Moved the viewer hotkey for GLSL code generation from 'S' to 'G' for consistency with other languages.\n\n### Fixed\n- Fixed the Color3.asTuple and Color4.asTuple methods in Python\n\n## [1.38.0] - 2021-03-02\n\nUpdated the MaterialX library to the v1.38 specification.  See the [v1.38 changelist](http://www.materialx.org/assets/MaterialX.v1.38.Changelist.pdf) for full details.\n\n### Added\n- Added support for the generalized 'layer' node in Physically Based Shading.\n- Added user controls for texture baking and wedge rendering in the [MaterialX Viewer](https://github.com/materialx/MaterialX/blob/main/documents/DeveloperGuide/Viewer.md).\n- Added support for Nvidia's Material Definition Language (MDL) in MaterialX code generation.\n- Added support for inline source code in Implementation elements.\n- Added support for TargetDef elements.\n- Added viewer rendering to cloud-based tests in GitHub Actions.\n- Added support for Xcode 12.\n\n### Changed\n- Updated the set of standard nodes to match the v1.38 specification, including significant improvements to the [Physically Based Shading](http://www.materialx.org/assets/MaterialX.v1.38.PBRSpec.pdf) nodes.\n- Replaced specialized Material elements with material nodes, allowing more flexible material definitions and more consistent traversal.\n- Unified the Input and Parameter element classes, simplifying the MaterialX API and client code.\n- Updated the MaterialX viewer to use native classes for GLSL rendering and camera controls, opening the door to additional render frameworks in the future.\n- Updated the prefiltered path for specular environment rendering in GLSL, providing a closer match with the Filtered Importance Sampling path.\n- Updated the definition of Autodesk Standard Surface to version 1.0.1.\n- Updated the definition of UsdPreviewSurface to version 2.3.\n- Renamed the default branch from master to main.\n\n### Removed\n- Removed support for the 'complex_ior', 'backfacing', 'viewdirection' and 'fresnel' nodes in Physically Based Shading.\n- Removed support for the Color2 type.\n\n## [1.37.4] - 2020-12-18\n\n### Added\n- Added software rendering tests for MaterialXRenderGlsl to GitHub Actions.\n\n### Changed\n- Improved the robustness of context management in MaterialXRenderGlsl.\n\n### Fixed\n- Added a missing VAO binding to GlslRenderer\\:\\:drawScreenSpaceQuad.\n\n## [1.37.3] - 2020-11-24\n\n### Added\n- Added Render Transparency and Render Double-Sided options to the Advanced Settings panel of the viewer.\n- Added viewer support for partially-transparent mesh partitions.\n- Added a subsurface scattering approximation to MaterialX GLSL.\n- Added a CMake option for building shared libraries on Linux and MacOS.\n- Added support for the latest OpenImageIO interface.\n\n### Changed\n- Improved the robustness of texture baking and shader translation.\n- Unified the handling of missing images in generated GLSL.\n- Moved CI builds from Travis and Appveyor to GitHub Actions.\n\n### Fixed\n- Fixed a bug in code generation for custom BSDF/EDF graphs.\n- Fixed rendering of single-channel textures in MaterialXRenderGlsl.\n\n## [1.37.2] - 2020-09-06\n\n### Added\n- Added support for texture baking from Python, including new example script [baketextures.py](python/Scripts/baketextures.py).\n- Added support for texture baking of materials with multiple UDIMs.\n- Added support for floating-point render targets in ShaderRenderer and its subclasses, allowing for HDR texture baking.\n- Added support for displacement shaders in generated OSL.\n- Added the ShaderTranslator class, laying the groundwork for support of shader translation graphs.\n- Added Python bindings for the Image class.\n\n### Fixed\n- Fixed the alignment of environment backgrounds in the viewer.\n\n### Removed\n- Removed the CopyOptions class, making it the default behavior of Document\\:\\:importLibrary to skip conflicting elements.\n\n## [1.37.1] - 2020-06-04\n\n### Added\n- Added command-line options for mesh, light, and camera transforms to the viewer.\n- Added command-line options for screen dimensions and background color to the viewer.\n- Added a Light Rotation slider to the Advanced Settings panel of the viewer.\n- Added utility methods Backdrop\\:\\:setContainsElements and Backdrop\\:\\:getContainsElements.\n- Added backwards compatibility for OpenImageIO 1.x.\n- Added support for GCC 10.\n\n### Changed\n- Improved energy conservation and preservation computations in generated GLSL.\n- Upgraded Smith masking-shadowing to height-correlated form in generated GLSL.\n- Improved the robustness of tangent frame computations in MaterialXRender.\n- Renamed Backdrop\\:\\:setContains and getContains to Backdrop\\:\\:setContainsString and getContainsString for consistency.\n\n### Fixed\n- Fixed the GLSL implementation of Burley diffuse for punctual lights.\n- Fixed the upgrade path for compare nodes in v1.36 documents.\n\n## [1.37.0] - 2020-03-20\n\nUpdated the MaterialX library to the v1.37 specification.  See the [v1.37 changelist](http://www.materialx.org/assets/MaterialX.v1.37REV2.Changelist.pdf) for full details.\n\n### Added\n- Added a Shadow Map option to the viewer, supported by shadowing functionality in GLSL code generation.\n- Added support for the 'uisoftmin', 'uisoftmax', and 'uistep' attributes, updating Autodesk Standard Surface to leverage these features.\n- Added support for LookGroup elements.\n- Added support for Clang 9.\n\n### Changed\n- Updated the set of standard nodes to match the v1.37 specification.\n- Unified the rules for NodeDef outputs, with all NodeDefs defining their output set through Output child elements rather than 'type' attributes.\n- Replaced GeomAttr elements with GeomProp elements.\n- Replaced backdrop nodes with Backdrop elements.\n- Aligned Matrix33 and Matrix44 with the row-vector convention, for improved consistency with Imath, USD, and other libraries.\n- Updated the stb_image library to version 2.23.\n\n## [1.36.5] - 2020-01-11\n\n### Added\n- Added a Load Environment option to the viewer, allowing arbitrary latitude-longitude HDR environments to be loaded at run-time.\n- Added an initial TextureBaker class, supporting baking of procedural content to textures.\n- Added initial support for units, including the MaterialX\\:\\:Unit, MaterialX\\:\\:UnitDef, and MaterialX\\:\\:UnitTypeDef classes.\n- Added support for unit conversion in shader code generation.\n- Added support for Visual Studio 2019.\n\n### Changed\n- Updated Autodesk Standard Surface to the latest interface and graph.\n- Updated the PyBind11 library to version 2.4.3.\n\n## [1.36.4] - 2019-09-26\n\n### Added\n- Added a Save Material option to the viewer.\n- Added property accessors to PropertyAssign and PropertySetAssign\n- Added Python bindings for TypeDesc and array-type Values.\n- Added Python functions getTypeString, getValueString, and createValueFromStrings.\n- Added support for GCC 9 and Clang 8.\n\n### Changed\n- Updated the interface of readFromXmlFile and writeToXmlFile to support FilePath and FileSearchPath arguments.\n- Extended Python bindings for FilePath and FileSearchPath.\n\n### Removed\n- Deprecated Python functions typeToName, valueToString, and stringToValue.\n- Removed deprecated Python functions objectToString and stringToObject.\n\n### Fixed\n- Fixed the OSL implementation of roughness_dual.\n\n## [1.36.3] - 2019-08-02\n\nMerged shader code generation and physically-based shading nodes from Autodesk's ShaderX extensions.  Added a default MaterialX viewer based on GLSL shader generation.\n\n### Added\n- Added the MaterialXGenShader library, supporting shader code generation in GLSL and OSL.\n- Added the MaterialXRender library, providing helper functionality for rendering MaterialX content.\n- Added the MaterialXView library, providing a default MaterialX viewer.\n- Added the physically-based shading node library (libraries/pbrlib).\n- Added a root-level 'cmake' folder, including a standard FindMaterialX module.\n- Added a root-level 'resources' folder, including example materials and meshes.\n- Added documents for the 1.37 specification.\n\n### Changed\n- Moved the MaterialX data libraries from 'documents/Libraries' to 'libraries'.\n- Updated MaterialX node definitions to the 1.37 specification.\n- Updated the PyBind11 library to version 2.2.4.\n\n### Removed\n- Removed customizations of PyBind11 to support Python 2.6.  Only Python versions 2.7 and 3.x are now supported.\n\n## [1.36.2] - 2019-03-05\n\n### Added\n- Added support for 'nodedef' attributes on MaterialX\\:\\:Node, integrating this usage into GraphElement\\:\\:addNodeInstance.\n- Added the MaterialX\\:\\:GeomPropDef class for geometric input declarations.\n- Added the Document\\:\\:getGeomAttrValue method.\n- Added the ValueElement\\:\\:getResolvedValue method.\n- Added support for the MATERIALX_SEARCH_PATH environment variable.\n- Added support for GCC 8 and Clang 7.\n\n### Changed\n- Added callbacks Observer\\:\\:onCopyContent and Observer\\:\\:onClearContent, and removed callback Observer::onInitialize.\n- Moved the standard document library to the 'documents/Libraries/stdlib' folder.\n\n## [1.36.1] - 2018-12-18\n\n### Added\n- Added support for interface tokens, including the MaterialX\\:\\:BindToken class and '[TOKEN]' syntax in filenames.\n- Added support for Clang 6.\n\n### Changed\n- Updated geometry token syntax from '%TOKEN' to '\\<TOKEN\\>'.\n- Replaced readXIncludes boolean with a readXIncludeFunction callback in the XmlReadOptions structure.\n- Combined individual options into an XmlWriteOptions argument for the XML write functions.\n- Extended functionality of the vector and matrix classes.\n- Updated the PyBind11 library to version 2.2.3.\n- Updated the PugiXML library to version 1.9.\n\n### Fixed\n- Fixed graph implementations of range, extract, tiledimage, and ramp4 nodes.\n\n## [1.36.0] - 2018-07-23\n\nUpdated the MaterialX library to the v1.36 specification.  See the [v1.36 changelist](http://www.materialx.org/assets/MaterialX.v1.36.Changelist.pdf) for full details.\n\n### Added\n- Added support for Element namespaces.\n- Added support for NodeDef inheritance.\n- Added support for root-level node elements.\n- Added support for inheritance attributes on MaterialX\\:\\:Material and MaterialX\\:\\:Look.\n- Added support for include and exclude attributes on MaterialX\\:\\:Collection.\n- Added the MaterialX\\:\\:Token class for string substitutions.\n- Added the MaterialX\\:\\:Variant, MaterialX\\:\\:VariantSet, and MaterialX\\:\\:VariantAssign classes.\n- Added the MaterialX\\:\\:GeomPath class for geometry name comparisons.\n- Added the Collection\\:\\:matchesGeomString method, for testing matches between collections and geometries.\n- Added the Material\\:\\:getGeometryBindings method, for finding the bindings of a material to specific geometries.\n\n### Removed\n- Removed the MaterialX\\:\\:MaterialInherit and MaterialX\\:\\:LookInherit classes.\n- Removed the MaterialX\\:\\:CollectionAdd and MaterialX\\:\\:CollectionRemove classes.\n- Removed the MaterialX\\:\\:Override class and support for public names.\n- Removed the 'channels' attribute from MaterialX\\:\\:InterfaceElement.\n- Removed the Material::getReferencingMaterialAssigns method (deprecated in Python).\n\n## [1.35.5] - 2018-05-07\n\n### Added\n- Added material inheritance support to graph traversal and the high-level Material API.\n- Added Material methods getActiveShaderRefs and getActiveOverrides.\n- Added PropertySet methods setPropertyValue and getPropertyValue.\n- Added Element methods setInheritsFrom, getInheritsFrom, traverseInheritance, hasInheritanceCycle, and getDescendant.\n- Added function templates MaterialX\\:\\:fromValueString and MaterialX\\:\\:toValueString.\n- Added math functionality to the vector and matrix classes.\n- Added support for Visual Studio 2017, GCC 7, and Clang 5.\n\n### Changed\n- Renamed Matrix3x3 to Matrix33 and Matrix4x4 to Matrix44.\n- Renamed VectorN\\:\\:length to VectorN\\:\\:numElements.\n- Updated the PyBind11 library to version 2.2.1.\n\n## [1.35.4] - 2017-12-18\n\n### Added\n- Added high-level Material API, including getPrimaryShaderParameters, getPrimaryShaderInputs, getBoundGeomStrings, and getBoundGeomCollections.\n- Added methods ValueElement\\:\\:getBoundValue and ValueElement\\:\\:getDefaultValue.\n- Added support for multi-output nodes.\n- Added support for TypeDef members.\n- Added StringResolver class, for applying substring modifiers to data values.\n- Added example interfaces for the Disney BRDF, Disney BSDF, and alSurface shaders.\n\n### Changed\n- Renamed method Material\\:\\:getReferencedShaderDefs to Material\\:\\:getShaderNodeDefs.\n- Renamed method ShaderRef\\:\\:getReferencedShaderDef to ShaderRef\\:\\:getNodeDef.\n- Renamed method Node\\:\\:getReferencedNodeDef to Node\\:\\:getNodeDef.\n- Added a 'string' suffix to all accessors for 'node', 'nodedef', and 'collection' strings.\n- Combined individual booleans into an XmlReadOptions argument for the XML read functions.\n\n### Removed\n- Removed method Document\\:\\:applyStringSubstitutions (deprecated in Python).\n- Removed method InterfaceElement\\:\\:getParameterValueString (deprecated in Python).\n\n## [1.35.3] - 2017-10-11\n\n### Added\n- Added support for Python 3.\n- Added support for standard TypeDef attributes.\n- Added support for values of type 'stringarray'.\n- Added method Element\\:\\:setName.\n- Extended Python bindings for Document, NodeGraph, MaterialAssign, and Collection.\n\n### Changed\n- Modified NodeGraph\\:\\:topologicalSort to return elements in a more intuitive top-down order, with upstream elements preceding downstream elements.\n- Removed special cases for string return values in MaterialX Python, with all strings now returned as 'unicode' in Python 2 and 'str' in Python 3.\n- Updated OSL reference implementations.\n\n### Fixed\n- Fixed handling of empty names in Element\\:\\:addChildOfCategory.\n- Fixed an edge case in Document\\:\\:upgradeVersion.\n\n## [1.35.2] - 2017-07-03\n\n### Added\n- Added OSL source files for the standard nodes.\n- Added example document 'PostShaderComposite.mtlx'.\n- Added method MaterialX\\:\\:prependXInclude.\n\n### Changed\n- Argument 'writeXIncludes' defaults to true in MaterialX\\:\\:writeToXmlStream and MaterialX\\:\\:writeToXmlString.\n\n### Fixed\n- Fixed handling of BindInput elements with missing connections.\n\n## [1.35.1] - 2017-06-23\n\n### Added\n- Added a 'viewercollection' attribute to MaterialX\\:\\:Visibility.\n- Added Python support for visibility and source URI methods.\n\n### Changed\n- Changed naming convention from 'ColorSpace' to 'ColorManagement' in Document methods.\n- Split library document 'mx_stdlib.mtlx' into 'mx_stdlib_defs.mtlx' and 'mx_stdlib_osl_impl.mtlx'.\n\n## [1.35.0] - 2017-06-20\n\nUpdated the MaterialX library to the v1.35 specification.  See the [v1.35 changelist](http://www.materialx.org/assets/MaterialX.v1.35.Changelist.pdf) for full details.\n\n### Added\n- Added the MaterialX\\:\\:Visibility class.\n- Added 'file', 'function', and 'language' attributes to MaterialX\\:\\:Implementation.\n- Added 'node' and 'nodedef' attributes to MaterialX\\:\\:ShaderRef.  In v1.35, these attributes define which NodeDef is referenced by a ShaderRef.\n- Added a 'material' attribute to MaterialX\\:\\:MaterialAssign.  In v1.35, this attribute defines which Material is referenced by a MaterialAssign.\n\n### Changed\n- Removed the MaterialX\\:\\:LightAssign and MaterialX\\:\\:Light classes.  In v1.35, this functionality is now handled by the MaterialX\\:\\:Visibility class.\n- Removed the 'default' attribute from MaterialX\\:\\:ValueElement.  In v1.35, this functionality is now handled by the 'value' attribute.\n- Replaced the 'matrix' type with 'matrix33' and 'matrix44', and replaced the MaterialX\\:\\:Matrix16 class with MaterialX\\:\\:Matrix3x3 and MaterialX\\:\\:Matrix4x4.\n- Renamed Material\\:\\:getMaterialAssigns to Material\\:\\:getReferencingMaterialAssigns.\n- Changed the argument type for MaterialAssign\\:\\:setExclusive and MaterialAssign\\:\\:getExclusive to boolean.\n\n## [1.34.4] - 2017-06-09\n\n### Added\n- Added support for graph-based implementations of nodes.\n- Added support for subtree/subgraph pruning in traversals.\n- Added NodeGraph\\:\\:topologicalSort and MaterialX\\:\\:printGraphDot methods.\n- Added a File module to MaterialXFormat and MaterialXTest.\n\n### Changed\n- Extended NodeGraph::flattenSubgraphs to support subgraph recursion.\n- Added a searchPath argument to MaterialX\\:\\:readFromXmlFile.\n\n### Fixed\n- Fixed an issue where connecting elements were not returned in graph traversal edges.\n\n## [1.34.3] - 2017-05-16\n\n### Added\n- Added support for document validation, including the Document\\:\\:validate and Element\\:\\:validate methods.\n- Added helper methods ValueElement\\:\\:getResolvedValueString and Element\\:\\:getNamePath.\n- Added standard library document.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 25.7255859375,
          "content": "# MaterialX Version\nset(MATERIALX_MAJOR_VERSION 1)\nset(MATERIALX_MINOR_VERSION 39)\nset(MATERIALX_BUILD_VERSION 2)\nset(MATERIALX_LIBRARY_VERSION ${MATERIALX_MAJOR_VERSION}.${MATERIALX_MINOR_VERSION}.${MATERIALX_BUILD_VERSION})\n\n# Cmake setup\ncmake_minimum_required(VERSION 3.24)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\nset(CMAKE_MACOSX_RPATH ON)\nenable_testing()\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# JavaScript setup \noption(MATERIALX_BUILD_JS \"Build the MaterialX JavaScript package from C++ bindings. Requires the emscripten environment.\" OFF)\nset(MATERIALX_EMSDK_PATH \"\" CACHE PATH \"Path to EMSDK (e.g. 'D:/Projects/emsdk').\")\nif (MATERIALX_BUILD_JS)\n    if (EXISTS \"${MATERIALX_EMSDK_PATH}\")\n        set(EMSDK_PATH ${MATERIALX_EMSDK_PATH})\n    elseif (EXISTS $ENV{EMSDK})\n        set(EMSDK_PATH $ENV{EMSDK})\n    endif()\n    if (EMSDK_PATH)\n        set(CMAKE_TOOLCHAIN_FILE \"${EMSDK_PATH}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\")\n    else()\n        message(\"The EMSDK path was not supplied, disabling MATERIALX_BUILD_JS\")\n        set(MATERIALX_BUILD_JS OFF)\n    endif()\nendif()\n\nproject(MaterialX VERSION ${MATERIALX_LIBRARY_VERSION})\n\noption(MATERIALX_BUILD_PYTHON \"Build the MaterialX Python package from C++ bindings. Requires Python 3.6 or greater.\" OFF)\noption(MATERIALX_BUILD_VIEWER \"Build the MaterialX Viewer.\" OFF)\noption(MATERIALX_BUILD_GRAPH_EDITOR \"Build the MaterialX Graph Editor.\" OFF)\noption(MATERIALX_BUILD_DOCS \"Create HTML documentation using Doxygen. Requires that Doxygen be installed.\" OFF)\n\noption(MATERIALX_BUILD_GEN_GLSL \"Build the GLSL shader generator back-end.\" ON)\noption(MATERIALX_BUILD_GEN_OSL \"Build the OSL shader generator back-end.\" ON)\noption(MATERIALX_BUILD_GEN_MDL \"Build the MDL shader generator back-end.\" ON)\noption(MATERIALX_BUILD_GEN_MSL \"Build the MSL shader generator back-end.\" ON)\noption(MATERIALX_BUILD_RENDER \"Build the MaterialX Render modules.\" ON)\noption(MATERIALX_BUILD_RENDER_PLATFORMS \"Build platform-specific render modules for each shader generator.\" ON)\noption(MATERIALX_BUILD_OIIO \"Build OpenImageIO support for MaterialXRender.\" OFF)\noption(MATERIALX_BUILD_TESTS \"Build unit tests.\" OFF)\noption(MATERIALX_BUILD_BENCHMARK_TESTS \"Build benchmark tests.\" OFF)\n\noption(MATERIALX_BUILD_SHARED_LIBS \"Build MaterialX libraries as shared rather than static.\" OFF)\noption(MATERIALX_BUILD_MONOLITHIC \"Build a single monolithic MaterialX library.\" OFF)\noption(MATERIALX_BUILD_USE_CCACHE \"Enable the use of ccache to speed up build time, if present.\" ON)\noption(MATERIALX_PYTHON_LTO \"Enable link-time optimizations for MaterialX Python.\" ON)\noption(MATERIALX_INSTALL_PYTHON \"Install the MaterialX Python package as a third-party library when the install target is built.\" ON)\noption(MATERIALX_INSTALL_RESOURCES \"Install the resources folder when building render modules.\" ON)\noption(MATERIALX_TEST_RENDER \"Run rendering tests for MaterialX Render module. GPU required for graphics validation.\" ON)\noption(MATERIALX_WARNINGS_AS_ERRORS \"Interpret all compiler warnings as errors.\" OFF)\noption(MATERIALX_COVERAGE_ANALYSIS \"Build MaterialX libraries with coverage analysis on supporting platforms.\" OFF)\noption(MATERIALX_DYNAMIC_ANALYSIS \"Build MaterialX libraries with dynamic analysis on supporting platforms.\" OFF)\n\noption(MATERIALX_BUILD_IOS \"Build MaterialX for iOS. (Deprecated. Set CMAKE_SYSTEM_NAME instead)\" OFF)\noption(MATERIALX_BUILD_APPLE_FRAMEWORK \"Build MaterialX as an Apple Framework\" ${__build_apple_framework})\nif (MATERIALX_BUILD_IOS)\n    MESSAGE(WARNING \"The MATERIALX_BUILD_IOS is deprecated. Set the CMAKE_SYSTEM_NAME to the platform instead\")\n    set(CMAKE_SYSTEM_NAME iOS)\nendif()\n\n# Apple ecosystem cross-compilation\n# https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-ios-tvos-visionos-or-watchos\nset(MATERIALX_BUILD_APPLE_EMBEDDED OFF)\nset(__build_apple_framework OFF)\nif (CMAKE_SYSTEM_NAME MATCHES \"iOS\" OR CMAKE_SYSTEM_NAME MATCHES \"tvOS\" OR CMAKE_SYSTEM_NAME MATCHES \"visionOS\" OR CMAKE_SYSTEM_NAME MATCHES \"watchOS\")\n    set(MATERIALX_BUILD_APPLE_EMBEDDED ON)\n    set(__build_apple_framework ${MATERIALX_BUILD_SHARED_LIBS})\n    # TARGET_OS_IPHONE refers to all IPHONE derived platforms\n    # https://chaosinmotion.com/2021/08/02/things-to-remember-compiler-conditionals-for-macos-ios-etc/\n    add_definitions(-DTARGET_OS_IPHONE=1)\n    set(MATERIALX_BUILD_MONOLITHIC ON)\n    set(MATERIALX_BUILD_PYTHON OFF)\n    set(MATERIALX_BUILD_VIEWER OFF)\n    set(MATERIALX_BUILD_GRAPH_EDITOR OFF)\n    set(MATERIALX_BUILD_GEN_GLSL OFF)\n    set(MATERIALX_BUILD_GEN_OSL OFF)\n    set(MATERIALX_BUILD_GEN_MDL OFF)\n    set(MATERIALX_BUILD_TESTS OFF)\nendif()\n\n# Apple framework handling\nif(APPLE)\n    set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"-\" CACHE STRING \"The Codesigning identity needed to sign compiled objects\")\nendif()\nif (MATERIALX_BUILD_APPLE_FRAMEWORK)\n    add_definitions(-DBUILD_APPLE_FRAMEWORK)\n    set(MATERIALX_BUILD_MONOLITHIC ON)\n    set(MATERIALX_BUILD_PYTHON OFF)\n    set(MATERIALX_BUILD_VIEWER OFF)\n    set(MATERIALX_BUILD_GRAPH_EDITOR OFF)\n    set(MATERIALX_BUILD_TESTS OFF)\n    set(MATERIALX_BUILD_SHARED_LIBS ON)\nendif()\n\nif (MATERIALX_BUILD_JS)\n    set(MATERIALX_BUILD_RENDER OFF)\n    set(MATERIALX_BUILD_TESTS OFF)\nendif()\n\nif(MATERIALX_BUILD_GEN_MSL)\n    # All hardware shading languages currently depend on the GLSL shader generator.\n    set(MATERIALX_BUILD_GEN_GLSL ON)\nendif()\n\nset(MATERIALX_PYTHON_VERSION \"\" CACHE STRING\n    \"Python version to be used in building the MaterialX Python package (e.g. '3.9').\")\nset(MATERIALX_PYTHON_EXECUTABLE \"\" CACHE FILEPATH\n    \"Python executable to be used in building the MaterialX Python package (e.g. 'C:/Python39/python.exe').\")\nset(MATERIALX_PYTHON_OCIO_DIR \"\" CACHE PATH\n    \"Path to a folder containing the default OCIO configuration to be packaged with MaterialX Python (e.g. 'D:/Projects/OpenColorIO-Configs/aces_1.0.3').\")\nset(MATERIALX_PYTHON_PYBIND11_DIR \"\" CACHE PATH\n    \"Path to a folder containing the PyBind11 source to be used in building MaterialX Python.\")\n\nset(MATERIALX_OIIO_DIR \"\" CACHE PATH \"Path to the root folder of the OpenImageIO installation.\")\n\n# Settings to define installation layout\nset(MATERIALX_INSTALL_INCLUDE_PATH \"include\" CACHE STRING \"Install header include path (e.g. 'inc', 'include').\")\nset(MATERIALX_INSTALL_LIB_PATH \"lib\" CACHE STRING \"Install lib path (e.g. 'libs', 'lib').\")\nset(MATERIALX_INSTALL_STDLIB_PATH \"libraries\" CACHE STRING \"Install path for mtlx std libs (e.g. 'libraries').\")\n\n# Helpers for OSL validation\nset(MATERIALX_OSL_BINARY_OSLC \"\" CACHE FILEPATH \"Full path to the OSL compiler binary.\")\nset(MATERIALX_OSL_BINARY_TESTRENDER \"\" CACHE FILEPATH \"Full path to the OSL test render binary.\")\nset(MATERIALX_OSL_INCLUDE_PATH \"\" CACHE PATH \"Full path to OSL shader includes (e.g. 'stdosl.h').\")\n\nset(MATERIALX_PYTHON_FOLDER_NAME \"python/MaterialX\" CACHE INTERNAL \"Folder name to user for installing the Python library.\")\n\nif(SKBUILD)\n    set(MATERIALX_PYTHON_FOLDER_NAME \"MaterialX\")\nendif()\n\n# Helpers for MDL validation\nif (MATERIALX_BUILD_GEN_MDL)\n    set(MATERIALX_MDLC_EXECUTABLE \"\" CACHE FILEPATH \"Full path to the mdlc binary.\")\n    set(MATERIALX_MDL_RENDER_EXECUTABLE \"\" CACHE FILEPATH \"Full path to the mdl renderer binary.\")\n    set(MATERIALX_MDL_RENDER_ARGUMENTS \"\" CACHE STRING \"Custom arguments for renderer.\")\n    set(MATERIALX_MDL_MODULE_PATHS \"\" CACHE FILEPATH \"Comma separated list of MDL module paths.\")\n    set(MATERIALX_INSTALL_MDL_MODULE_PATH ${MATERIALX_INSTALL_STDLIB_PATH} CACHE FILEPATH \"Install path for mdl module.\")\nendif()\n\n# Namespace\nset(MATERIALX_NAMESPACE_SUFFIX \"\" CACHE STRING \"Add a suffix to the main MaterialX C++ namespace: Options include dev, staging, <YOURFACILITY> etc.\")\nif(MATERIALX_NAMESPACE_SUFFIX STREQUAL \"\")\n    set(MATERIALX_NAMESPACE \"MaterialX_v${MATERIALX_MAJOR_VERSION}_${MATERIALX_MINOR_VERSION}_${MATERIALX_BUILD_VERSION}\")\nelse()\n    set(MATERIALX_NAMESPACE \"MaterialX_${MATERIALX_NAMESPACE_SUFFIX}_v${MATERIALX_MAJOR_VERSION}_${MATERIALX_MINOR_VERSION}_${MATERIALX_BUILD_VERSION}\")\nendif()\nmessage(STATUS \"Setting namespace to '${MATERIALX_NAMESPACE}'\")\n\n# Library name custom suffix\n# This helps an application that needs to ship a dynamic library MaterialX ensure\n# that it has a unique name that won't conflict with one elsewhere on the system.\nset (MATERIALX_LIBNAME_SUFFIX \"\" CACHE STRING \"Specify a suffix to all libraries that are built\")\n\nmark_as_advanced(MATERIALX_BUILD_DOCS)\nmark_as_advanced(MATERIALX_BUILD_GEN_GLSL)\nmark_as_advanced(MATERIALX_BUILD_GEN_OSL)\nmark_as_advanced(MATERIALX_BUILD_GEN_MDL)\nmark_as_advanced(MATERIALX_BUILD_GEN_MSL)\nmark_as_advanced(MATERIALX_BUILD_RENDER)\nmark_as_advanced(MATERIALX_BUILD_RENDER_PLATFORMS)\nmark_as_advanced(MATERIALX_BUILD_OIIO)\nmark_as_advanced(MATERIALX_BUILD_BENCHMARK_TESTS)\nmark_as_advanced(MATERIALX_BUILD_SHARED_LIBS)\nmark_as_advanced(MATERIALX_BUILD_MONOLITHIC)\nmark_as_advanced(MATERIALX_BUILD_USE_CCACHE)\nmark_as_advanced(MATERIALX_NAMESPACE_SUFFIX)\nmark_as_advanced(MATERIALX_LIBNAME_SUFFIX)\nmark_as_advanced(MATERIALX_PYTHON_LTO)\nmark_as_advanced(MATERIALX_INSTALL_PYTHON)\nmark_as_advanced(MATERIALX_INSTALL_RESOURCES)\nmark_as_advanced(MATERIALX_TEST_RENDER)\nmark_as_advanced(MATERIALX_WARNINGS_AS_ERRORS)\nmark_as_advanced(MATERIALX_COVERAGE_ANALYSIS)\nmark_as_advanced(MATERIALX_DYNAMIC_ANALYSIS)\nmark_as_advanced(MATERIALX_PYTHON_VERSION)\nmark_as_advanced(MATERIALX_PYTHON_EXECUTABLE)\nmark_as_advanced(MATERIALX_PYTHON_OCIO_DIR)\nmark_as_advanced(MATERIALX_PYTHON_PYBIND11_DIR)\nmark_as_advanced(MATERIALX_OIIO_DIR)\nmark_as_advanced(MATERIALX_OSL_BINARY_OSLC)\nmark_as_advanced(MATERIALX_OSL_BINARY_TESTRENDER)\nmark_as_advanced(MATERIALX_OSL_INCLUDE_PATH)\nmark_as_advanced(MATERIALX_INSTALL_INCLUDE_PATH)\nmark_as_advanced(MATERIALX_INSTALL_LIB_PATH)\nmark_as_advanced(MATERIALX_INSTALL_STDLIB_PATH)\nmark_as_advanced(MATERIALX_BUILD_JS)\nmark_as_advanced(MATERIALX_EMSDK_PATH)\nmark_as_advanced(MATERIALX_BUILD_IOS)\nmark_as_advanced(MATERIALX_BUILD_APPLE_FRAMEWORK)\nif (MATERIALX_BUILD_GEN_MDL)\n    mark_as_advanced(MATERIALX_MDLC_EXECUTABLE)\n    mark_as_advanced(MATERIALX_MDL_RENDER_EXECUTABLE)\n    mark_as_advanced(MATERIALX_MDL_RENDER_ARGUMENTS)\n    mark_as_advanced(MATERIALX_MDL_MODULE_PATHS)\n    mark_as_advanced(MATERIALX_INSTALL_MDL_MODULE_PATH)\nendif()\n\nif (MATERIALX_BUILD_USE_CCACHE)\n    # Setup CCache for C/C++ compilation\n    find_program(CCACHE_PROGRAM ccache)\n    if(CCACHE_PROGRAM)\n        set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\n        set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\n    endif()\nendif()\n\n# Attempt to configure OSL testing if it can be found by cmake.\n# This will not override any explicitly provided oslc and testrender\nif(MATERIALX_BUILD_RENDER AND MATERIALX_BUILD_GEN_OSL AND MATERIALX_BUILD_TESTS)\n    # We currently only need the actual OSL binaries if we're running tests with Render and GenOSL enabled.\n    find_package(OSL QUIET)\n    if(OSL_FOUND)\n        if(NOT MATERIALX_OSL_BINARY_OSLC)\n            set(MATERIALX_OSL_BINARY_OSLC $<TARGET_FILE:OSL::oslc>)\n        endif()\n        if(NOT MATERIALX_OSL_BINARY_TESTRENDER)\n            # currently OSL does not export a cmake target for testrender, but once that's added this can be simplified.\n            set(MATERIALX_OSL_BINARY_TESTRENDER $<TARGET_FILE_DIR:OSL::oslc>/testrender)\n        endif()\n        # NOTE : we do not derive a value for MATERIALX_OSL_INCLUDE_PATH here, as a a cmake installed OSL package\n        # should have the shader includes in the expected location.\n    endif()\nendif()\n\n# Add global definitions\nif(MATERIALX_BUILD_OIIO)\n    add_definitions(-DMATERIALX_BUILD_OIIO)\nendif()\nif(MATERIALX_TEST_RENDER)\n    add_definitions(-DMATERIALX_TEST_RENDER)\nendif()\nif (MATERIALX_BUILD_BENCHMARK_TESTS)\n    add_definitions(-DMATERIALX_BUILD_BENCHMARK_TESTS)\nendif()\n\nif (MATERIALX_BUILD_GEN_MDL)\n    add_definitions(-DMATERIALX_MDLC_EXECUTABLE=\\\"${MATERIALX_MDLC_EXECUTABLE}\\\")\n    add_definitions(-DMATERIALX_MDL_RENDER_EXECUTABLE=\\\"${MATERIALX_MDL_RENDER_EXECUTABLE}\\\")\n    add_definitions(-DMATERIALX_MDL_RENDER_ARGUMENTS=\\\"${MATERIALX_MDL_RENDER_ARGUMENTS}\\\")\n    add_definitions(-DMATERIALX_MDL_MODULE_PATHS=\\\"${MATERIALX_MDL_MODULE_PATHS}\\\")\n    add_definitions(-DMATERIALX_INSTALL_MDL_MODULE_PATH=\\\"${MATERIALX_INSTALL_MDL_MODULE_PATH}\\\")\nendif()\n\n# Adjust the default installation path\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    set(CMAKE_INSTALL_PREFIX \"${CMAKE_BINARY_DIR}/installed\" CACHE PATH \"Default install path\" FORCE)\nendif()\n\n# Set the installation path for shared libraries\nif(APPLE)\n    set(RPATH_RELATIVE_SYMBOL \"@loader_path\")\nelse()\n    set(RPATH_RELATIVE_SYMBOL \"$ORIGIN\")\nendif()\n\n# The following include relative RPATHS, allowing shared libraries to be relocated, as well as\n# absolute RPATHS for backwards compatibility.\n\n# For linking to libraries in the same dir - ie, things in \"MATX/lib\" to each other\nset(MATERIALX_SAME_DIR_RPATH \"${RPATH_RELATIVE_SYMBOL};${CMAKE_INSTALL_PREFIX}/${MATERIALX_INSTALL_LIB_PATH}\")\n# For linking to libraries where source is one directory deep, ie: \"MATX/bin/../lib\"\nset(MATERIALX_UP_ONE_RPATH \"${RPATH_RELATIVE_SYMBOL}/../${MATERIALX_INSTALL_LIB_PATH};${MATERIALX_SAME_DIR_RPATH}\")\n# For linking to libraries where source is two directories deep, ie: \"MATX/python/MaterialX/../../lib\"\nset(MATERIALX_UP_TWO_RPATH \"${RPATH_RELATIVE_SYMBOL}/../../${MATERIALX_INSTALL_LIB_PATH};${MATERIALX_SAME_DIR_RPATH}\")\nif(SKBUILD)\n    # When building the Python wheels, we don't want to set any RPATH because\n    # we want to wheel to be self-contained. We don't want any interference from\n    # external paths.\n    set(MATERIALX_UP_TWO_RPATH \"${RPATH_RELATIVE_SYMBOL}\")\nendif()\n\n# Adjust compiler settings\nif(MSVC)\n    add_compile_options(/MP)\n    if(MATERIALX_BUILD_MONOLITHIC)\n        add_compile_options(/bigobj)\n    endif()\n    if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n        string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    else()\n        add_compile_options(/W4)\n    endif()\n    if(MATERIALX_WARNINGS_AS_ERRORS)\n        add_compile_options(/WX)\n    endif()\nelse()\n    add_compile_options(-Wall -Wno-missing-braces)\n    if(MATERIALX_WARNINGS_AS_ERRORS)\n        add_compile_options(-Werror)\n    endif()\n    if(MATERIALX_COVERAGE_ANALYSIS)\n        add_compile_options(--coverage -O0)\n        add_link_options(--coverage)\n    endif()\n    if(MATERIALX_DYNAMIC_ANALYSIS)\n        set(DYNAMIC_ANALYSIS_OPTIONS -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all)\n        add_compile_options(${DYNAMIC_ANALYSIS_OPTIONS})\n        add_link_options(${DYNAMIC_ANALYSIS_OPTIONS})\n    endif()\n    if(MATERIALX_BUILD_JS)\n        add_compile_options(-fexceptions)\n    endif()\nendif()\n\n# Shared functions\nfunction(assign_source_group prefix)\n    foreach(_source IN ITEMS ${ARGN})\n        if(IS_ABSOLUTE \"${_source}\")\n            file(RELATIVE_PATH _source_rel \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${_source}\")\n        else()\n            set(_source_rel \"${_source}\")\n        endif()\n        get_filename_component(_source_path \"${_source_rel}\" PATH)\n        string(REPLACE \"/\" \"\\\\\" _source_path_msvc \"${_source_path}\")\n        source_group(\"${prefix}\\\\${_source_path_msvc}\" FILES \"${_source}\")\n    endforeach()\nendfunction(assign_source_group)\n\nfunction(mx_add_library MATERIALX_MODULE_NAME)\n    set(options ADD_OBJECTIVE_C_CODE)\n    set(oneValueArgs EXPORT_DEFINE)\n    set(multiValueArgs\n            SOURCE_FILES\n            HEADER_FILES\n            INLINED_FILES\n            MTLX_MODULES)\n    cmake_parse_arguments(args\n            \"${options}\"\n            \"${oneValueArgs}\"\n            \"${multiValueArgs}\"\n            ${ARGN})\n\n    if (APPLE AND args_ADD_OBJECTIVE_C_CODE)\n        file(GLOB_RECURSE materialx_source_oc \"${CMAKE_CURRENT_SOURCE_DIR}/*.m*\")\n        set_source_files_properties(${materialx_source_oc} PROPERTIES\n                COMPILE_FLAGS \"-x objective-c++\")\n        set(args_SOURCE_FILES ${args_SOURCE_FILES} ${materialx_source_oc})\n    endif()\n\n    assign_source_group(\"Source Files\" ${args_SOURCE_FILES})\n    assign_source_group(\"Source Files\" ${args_INLINED_FILES})\n    assign_source_group(\"Header Files\" ${args_HEADER_FILES})\n\n    if (NOT MATERIALX_BUILD_MONOLITHIC)\n        set(TARGET_NAME ${MATERIALX_MODULE_NAME})\n        add_library(${TARGET_NAME})\n\n        # Create version resource\n        if(MATERIALX_BUILD_SHARED_LIBS AND MSVC)\n            configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/MaterialXVersion.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc)\n            target_sources(${TARGET_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/version.rc)\n        endif()\n\n        target_link_libraries(${TARGET_NAME}\n            PUBLIC\n                ${args_MTLX_MODULES}\n                ${CMAKE_DL_LIBS})\n\n        target_include_directories(${TARGET_NAME}\n                PUBLIC\n                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../>\n                $<INSTALL_INTERFACE:${MATERIALX_INSTALL_INCLUDE_PATH}>\n                PRIVATE\n                ${EXTERNAL_INCLUDE_DIRS})\n\n        set_target_properties(\n                ${TARGET_NAME} PROPERTIES\n                OUTPUT_NAME ${MATERIALX_MODULE_NAME}${MATERIALX_LIBNAME_SUFFIX}\n                COMPILE_FLAGS \"${EXTERNAL_COMPILE_FLAGS}\"\n                LINK_FLAGS \"${EXTERNAL_LINK_FLAGS}\"\n                INSTALL_RPATH \"${MATERIALX_SAME_DIR_RPATH}\"\n                VERSION \"${MATERIALX_LIBRARY_VERSION}\"\n                SOVERSION \"${MATERIALX_MAJOR_VERSION}\")\n    else()\n        set(TARGET_NAME ${MATERIALX_MONOLITHIC_TARGET})\n\n        add_library(${MATERIALX_MODULE_NAME} ALIAS ${MATERIALX_MONOLITHIC_TARGET})\n\n        # Store the aliased MaterialX modules name to create cmake export aliases later.\n        set_property(GLOBAL APPEND PROPERTY MATERIALX_MODULES ${MATERIALX_MODULE_NAME})\n    endif()\n\n    set_target_properties(${TARGET_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)\n    set_target_properties(${TARGET_NAME} PROPERTIES CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            ${args_SOURCE_FILES}\n        PUBLIC\n            FILE_SET\n                mxHeaders\n            TYPE\n                HEADERS\n            BASE_DIRS\n                ${CMAKE_CURRENT_SOURCE_DIR}/..\n                ${CMAKE_CURRENT_BINARY_DIR}/..\n            FILES\n                ${args_HEADER_FILES}\n                ${args_INLINED_FILES})\n\n    target_include_directories(${TARGET_NAME} PUBLIC\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../>)\n\n    target_compile_definitions(${TARGET_NAME} PRIVATE \"-D${args_EXPORT_DEFINE}\")\n\n    if(NOT SKBUILD)\n        if(NOT MATERIALX_BUILD_MONOLITHIC)\n            install(TARGETS ${MATERIALX_MODULE_NAME}\n                    EXPORT MaterialX\n                    ARCHIVE DESTINATION ${MATERIALX_INSTALL_LIB_PATH}\n                    LIBRARY DESTINATION ${MATERIALX_INSTALL_LIB_PATH}\n                    RUNTIME DESTINATION bin\n                    FILE_SET mxHeaders)\n        endif()\n\n        install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${MATERIALX_MODULE_NAME}.pdb\"\n                DESTINATION \"${MATERIALX_INSTALL_LIB_PATH}/\" OPTIONAL)\n    endif()\n\n    # pass TARGET_NAME back to call site - so caller can modify the build target\n    set(TARGET_NAME ${TARGET_NAME} PARENT_SCOPE)\nendfunction()\n\n# Propagate shared library setting to NanoGUI:\nif(MATERIALX_BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS \"ON\")\nelse()\n    set(BUILD_SHARED_LIBS \"OFF\")\nendif()\n\n# Build a monolithic target - needs to be added before the other build targets that may be included.\nif (MATERIALX_BUILD_MONOLITHIC)\n    set(MATERIALX_MONOLITHIC_TARGET MaterialX)\n    add_subdirectory(source)\nendif()\n\n# Add core subdirectories\nadd_subdirectory(source/MaterialXCore)\nadd_subdirectory(source/MaterialXFormat)\n\n# Add shader generation subdirectories\nadd_subdirectory(source/MaterialXGenShader)\nif(MATERIALX_BUILD_GEN_GLSL OR MATERIALX_BUILD_GEN_OSL OR MATERIALX_BUILD_GEN_MDL OR MATERIALX_BUILD_GEN_MSL)\n    if (MATERIALX_BUILD_GEN_GLSL)\n        add_definitions(-DMATERIALX_BUILD_GEN_GLSL)\n        add_subdirectory(source/MaterialXGenGlsl)\n    endif()\n    if (MATERIALX_BUILD_GEN_OSL)\n        add_definitions(-DMATERIALX_BUILD_GEN_OSL)\n        add_subdirectory(source/MaterialXGenOsl)\n    endif()\n    if (MATERIALX_BUILD_GEN_MDL)\n        add_definitions(-DMATERIALX_BUILD_GEN_MDL)\n        add_subdirectory(source/MaterialXGenMdl)\n    endif()\n    if (MATERIALX_BUILD_GEN_MSL)\n        add_definitions(-DMATERIALX_BUILD_GEN_MSL)\n        add_subdirectory(source/MaterialXGenMsl)\n    endif()\n    add_subdirectory(libraries)\nendif()\n\n# Add rendering and viewer subdirectories\nif(MATERIALX_BUILD_RENDER)\n    add_subdirectory(source/MaterialXRender)\n    if(MATERIALX_BUILD_RENDER_PLATFORMS)\n        set(MATERIALX_BUILD_RENDER_HW OFF)\n        if(MATERIALX_BUILD_GEN_GLSL AND NOT MATERIALX_BUILD_APPLE_EMBEDDED)\n            set(MATERIALX_BUILD_RENDER_HW ON)\n            add_subdirectory(source/MaterialXRenderGlsl)\n        endif()\n        if(MATERIALX_BUILD_GEN_MSL AND APPLE)\n            set(MATERIALX_BUILD_RENDER_HW ON)\n            add_subdirectory(source/MaterialXRenderMsl)\n        endif()\n        if(MATERIALX_BUILD_RENDER_HW)\n            add_subdirectory(source/MaterialXRenderHw)\n        endif()\n        if(MATERIALX_BUILD_GEN_OSL)\n            add_subdirectory(source/MaterialXRenderOsl)\n        endif()\n    endif()\n    if(MATERIALX_BUILD_VIEWER)\n        add_subdirectory(source/MaterialXView)\n    endif()\n    if(MATERIALX_BUILD_GRAPH_EDITOR)\n        add_subdirectory(source/MaterialXGraphEditor)\n    endif()\n    if(MATERIALX_INSTALL_RESOURCES AND NOT SKBUILD)\n        add_subdirectory(resources)\n    endif()\nendif()\n\n# Add test subdirectory\nif(MATERIALX_BUILD_TESTS)\n    add_subdirectory(source/MaterialXTest)\nendif()\n\n# Add Python subdirectories\nif(MATERIALX_BUILD_PYTHON)\n    add_subdirectory(source/PyMaterialX)\n    add_subdirectory(python)\nendif()\n\nif(MATERIALX_BUILD_DOCS)\n    add_subdirectory(documents)\nendif()\n\nif(MATERIALX_BUILD_JS)\n    add_subdirectory(source/JsMaterialX)\nendif()\n\nif (MATERIALX_BUILD_MONOLITHIC)\n    # MaterialX monolithic build target needs to be installed after any other included\n    # modules to ensure the correct files are in mxHeaders\n    if(NOT SKBUILD)\n        install(TARGETS ${MATERIALX_MONOLITHIC_TARGET}\n                EXPORT MaterialX\n                ARCHIVE DESTINATION ${MATERIALX_INSTALL_LIB_PATH}\n                LIBRARY DESTINATION ${MATERIALX_INSTALL_LIB_PATH}\n                RUNTIME DESTINATION bin\n                FILE_SET mxHeaders)\n\n        # Note : we don't install the headers etc. here, and rely on each separate modules CMakeLists.txt\n        # to do that installation, thus we respect the build options configuration, and only install\n        # the headers for the modules we've built in to the monolithic build.\n\n        # Finally do the framework build if requested\n        # This uses a zsh script since zsh is guaranteed to exist on systems\n        if(MATERIALX_BUILD_APPLE_FRAMEWORK)\n            # Conform cmake formats to zsh expected formats\n            set(__embedded_build \"false\")\n            if (MATERIALX_BUILD_APPLE_EMBEDDED)\n                set(__embedded_build \"true\")\n            endif()\n\n            # Install the Info.plist and shell script\n            math(EXPR CFBUNDLEVERSION \"${MATERIALX_MAJOR_VERSION} * 10000 + ${MATERIALX_MINOR_VERSION} * 100 + ${MATERIALX_BUILD_VERSION}\")\n            configure_file(cmake/modules/Info.plist.in \"${PROJECT_BINARY_DIR}/Info.plist\" @ONLY)\n            configure_file(cmake/modules/AppleFrameworkBuild.zsh.in \"${PROJECT_BINARY_DIR}/AppleFrameworkBuild.zsh\" @ONLY)\n\n            # Run the shell script for the primary configuration\n            install(CODE \"execute_process(COMMAND zsh ${PROJECT_BINARY_DIR}/AppleFrameworkBuild.zsh )\")\n        endif()\n    endif()\nendif()\n\nif(MATERIALX_BUILD_VIEWER)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT MaterialXView)\nelseif(MATERIALX_BUILD_GRAPH_EDITOR)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT MaterialXGraphEditor)\nelseif(MATERIALX_BUILD_TESTS)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT MaterialXTest)\nendif()\n\n# Install root-level documents\nif(NOT SKBUILD)\n    install(FILES LICENSE CHANGELOG.md README.md THIRD-PARTY.md\n            DESTINATION .)\n\n    set(MATERIALX_GEN_CONFIG_PATH \"${MATERIALX_INSTALL_LIB_PATH}/cmake/${CMAKE_PROJECT_NAME}\")\n\n    include(CMakePackageConfigHelpers)\n\n    if (MATERIALX_BUILD_MONOLITHIC)\n        # export aliases for the MaterialX modules built in this monolithic build to be\n        # less disruptive to downstream probjects.\n        get_property(MATERIALX_MODULES GLOBAL PROPERTY MATERIALX_MODULES)\n        set(EXPORT_ALIASES \"# Aliased targets for the the monolithic build\\n\")\n        foreach (MODULE ${MATERIALX_MODULES})\n            string(APPEND EXPORT_ALIASES \"add_library(${MODULE} ALIAS MaterialX)\\n\")\n        endforeach ()\n\n        if (NOT MATERIALX_MODULES)\n            message(FATAL_ERROR \"Building MaterialX as a monolithic library, but did not find any libraries to alias.\")\n        endif()\n    endif()\n\n    configure_package_config_file(cmake/modules/MaterialXConfig.cmake.in\n                                ${CMAKE_BINARY_DIR}/cmake/${CMAKE_PROJECT_NAME}Config.cmake\n                                INSTALL_DESTINATION \"${MATERIALX_GEN_CONFIG_PATH}\"\n                                PATH_VARS CMAKE_INSTALL_PREFIX CMAKE_PROJECT_NAME)\n    write_basic_package_version_file(${CMAKE_BINARY_DIR}/cmake/${CMAKE_PROJECT_NAME}ConfigVersion.cmake\n                                    VERSION ${MATERIALX_LIBRARY_VERSION}\n                                    COMPATIBILITY AnyNewerVersion)\n\n    # Install the auto-generated CMake configuration files:\n\n    install(EXPORT MaterialX\n            DESTINATION \"${MATERIALX_GEN_CONFIG_PATH}\"\n            FILE ${CMAKE_PROJECT_NAME}Targets.cmake)\n\n    install(FILES \"${CMAKE_BINARY_DIR}/cmake/${CMAKE_PROJECT_NAME}ConfigVersion.cmake\"\n            \"${CMAKE_BINARY_DIR}/cmake/${CMAKE_PROJECT_NAME}Config.cmake\"\n            DESTINATION \"${MATERIALX_GEN_CONFIG_PATH}\")\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.4814453125,
          "content": "# Contributing to MaterialX\n\nThank you for your interest in contributing to MaterialX! This document\nexplains our contribution process and procedures.\n\n## Community and Discussion\n\nThere are two primary ways to connect with the MaterialX community:\n\n- The MaterialX channel of the\n[Academy Software Foundation Slack](http://academysoftwarefdn.slack.com/).\nThis platform is appropriate for general questions, feature requests, and\ndiscussion of the MaterialX project as a whole.\nYou can request an invitation to join the Academy Software Foundation Slack\nat https://www.aswf.io/get-involved/.\n- The [Issues](https://github.com/AcademySoftwareFoundation/MaterialX/issues)\npanel of the MaterialX GitHub, which is used both to track bugs and to discuss\nfeature requests.\n\n### How to Ask for Help\n\nIf you have trouble installing, building, or using the library, but there's\nnot yet reason to suspect you've encountered a genuine bug, start by posting\na question to the MaterialX channel of the\n[Academy Software Foundation Slack](http://academysoftwarefdn.slack.com/).\nThis is the place for questions such has \"How do I...\".\n\n### How to Report a Bug\n\nMaterialX uses\n[GitHub Issues](https://github.com/AcademySoftwareFoundation/MaterialX/issues)\nfor reporting and tracking bugs, enhancements, and feature requests.\n\nIf you are submitting a bug report, please be sure to note which version of\nMaterialX you are using, on what platform (OS/version, which compiler you used,\nand any special build flags or other unusual environmental issues). Please\ngive a specific account of the following, with enough detail that others can\nreproduce the problem:\n\n- What you tried.\n- What happened.\n- What you expected to happen instead.\n\n### How to Report a Security Vulnerability\n\nIf you think you've found a potential vulnerability in MaterialX, please refer\nto [SECURITY.md](SECURITY.md) to responsibly disclose it.\n\n### How to Contribute a Bug Fix or Change\n\nTo contribute code to the project, you'll need:\n\n- Basic knowledge of Git.\n- A fork of the MaterialX repository on GitHub.\n- An understanding of the project's development workflow.\n- Legal authorization, that is, you need to have signed a contributor\n  License Agreement. See below for details.\n\n## Legal Requirements\n\nMaterialX is a project of the Academy Software Foundation and follows the\nopen source software best practice policies of the Linux Foundation.\n\n### License\n\nMaterialX is licensed under the [Apache 2.0](LICENSE.md) license.\nContributions to the project should abide by that standard license.\n\n### Contributor License Agreements\n\nTo contribute to MaterialX, you must sign a Contributor License Agreement\nthrough the *EasyCLA* system, which is integrated with GitHub as a pull\nrequest check.\n\nPrior to submitting a pull request, you can sign the form through\n[this link](https://contributor.easycla.lfx.linuxfoundation.org/#/cla/project/68fa91fe-51fe-41ac-a21d-e0a0bf688a53/user/564e571e-12d7-4857-abd4-898939accdd7).\nIf you submit a pull request before the form is signed, the EasyCLA check\nwill fail with a red *NOT COVERED* message, and you'll have another\nopportunity to sign the form through the provided link.\n\n- If you are an individual writing the code on your own time and you're sure\nyou are the sole owner of any intellectual property you contribute, you can\nsign the CLA as an Individual Contributor.\n- If you are writing the code as part of your job, or if your employer\nretains ownership to intellectual property you create, then your company's\nlegal affairs representatives should sign a Corporate Contributor License\nAgreement.  If your company already has a signed CCLA on file, ask your\nlocal CLA manager to add you to your company's approved list.\n\nThe MaterialX CLAs are the standard forms used by Linux Foundation projects\nand [recommended by the ASWF TAC](https://github.com/AcademySoftwareFoundation/tac/blob/main/process/contributing.md#contributor-license-agreement-cla).\n\n## Development Workflow\n\n### Git Basics\n\nWorking with MaterialX requires a basic understanding of Git and GitHub\nterminology. If you’re unfamiliar with these concepts, please look at the\n[GitHub Glossary](https://help.github.com/articles/github-glossary/) or\nbrowse [GitHub Help](https://help.github.com/).\n\nTo contribute, you need a GitHub account. This is needed in order to push\nchanges to the upstream repository, via a pull request.\n\nYou will also need [Git](https://git-scm.com/doc) or a Git client such\nas [Git Fork](https://git-fork.com/) or\n[GitHub Desktop](https://desktop.github.com/download/) installed\non your local development machine.\n\n### Repository Structure and Commit Policy\n\nDevelopment work in the MaterialX project is usually done directly\non the `main` branch. This branch represents the cutting edge of the\nproject and the majority of new work is proposed, tested, reviewed,\nand merged there.\n\nAfter sufficient work is done on the `main` branch and the MaterialX\nleadership determines that a release is due, they will mark a release with\nthe current version tag and increment the development version for future\nwork. This basic repository structure keeps maintenance low, while remaining\nsimple to understand.\n\nThe `main` branch may include untested features and is not generally stable\nenough for release. To retrieve a stable version of the source code, use any\nof the \n[official releases](https://github.com/AcademySoftwareFoundation/MaterialX/releases)\nof the project.\n\n### Use the Fork, Luke.\n\nIn a typical workflow, you should *fork* the MaterialX repository to\nyour account. This creates a copy of the repository under your user\nnamespace and serves as the “home base” for your development branches,\nfrom which you will submit *pull requests* to the upstream\nrepository to be merged.\n\nOnce your Git environment is operational, the next step is to locally\n*clone* your forked MaterialX repository, and add a *remote*\npointing to the upstream MaterialX repository. These topics are\ncovered in the GitHub documentation\n[Cloning a repository](https://help.github.com/articles/cloning-a-repository/)\nand\n[Configuring a remote for a fork](https://help.github.com/articles/configuring-a-remote-for-a-fork/).\n\n### Pull Requests\n\nContributions should be submitted as GitHub pull requests. See\n[Creating a pull request](https://help.github.com/articles/creating-a-pull-request/)\nif you're unfamiliar with this concept. \n\nThe development cycle for a code change should follow this protocol:\n\n1. Create a topic branch in your local repository, assigning the branch a\nbrief name that describes the feature or fix that you're working on.\n2. Make changes, compile, and test thoroughly. Code style should match existing\nstyle and conventions, and changes should be focused on the topic the pull\nrequest will be addressing. Make unrelated changes in a separate topic branch\nwith a separate pull request.\n3. Push commits to your fork.\n4. Create a GitHub pull request from your topic branch.\n5. Pull requests will be reviewed by project maintainers and contributors,\nwho may discuss, offer constructive feedback, request changes, or approve\nthe work.\n6. Upon receiving the required number of approvals (as outlined in\n[Required Approvals](#code-review-and-required-approvals)), a maintainer\nmay merge changes into the `main` branch.\n\n### Code Review and Required Approvals\n\nModifications of the contents of the MaterialX repository are made on a\ncollaborative basis. Anyone with a GitHub account may propose a modification\nvia pull request and it will be considered by the project maintainers.\n\nPull requests must meet a minimum number of maintainer approvals prior to\nbeing merged. Rather than having a hard rule for all PRs, the requirement\nis based on the complexity and risk of the proposed changes, factoring in\nthe length of time the PR has been open to discussion. The following\nguidelines outline the project's established approval rules for merging:\n\n- Minor changes that don't modify current behaviors or are straightforward\nfixes to existing features can be approved and merged by a single maintainer\nof the repository.\n- Moderate changes that modify current behaviors or introduce new features\nshould be approved by *two* maintainers before merging. Unless the change is\nan emergency fix, the author should give the community at least 48 hours to\nreview the proposed change.\n- Major new features and core design decisions should be discussed at length\nin the ASWF Slack or in TSC meetings before any PR is submitted, in order to\nsolicit feedback, build consensus, and alert all stakeholders to be on the\nlookout for the eventual PR when it appears.\n\n### Coding Conventions\n\nThe coding style of the MaterialX project is defined by a\n[clang-format](.clang-format) file in the repository, which is supported by\nClang versions 13 and newer.\n\nWhen adding new source files to the repository, use the provided clang-format\nfile to automatically align the code to MaterialX conventions. When modifying\nexisting code, follow the surrounding formatting conventions so that new or\nmodified code blends in with the current code.\n\n### Unit Tests\n\nEach MaterialX module has a companion folder within the\n[MaterialXTest](source/MaterialXTest) module, containing a set of unit tests\nthat validate its functionality. When contributing new code to MaterialX, make\nsure to include appropriate unit tests in MaterialXTest to validate the\nexpected behavior of the new code.\n\nThe MaterialX test suite can be run locally via MaterialXTest before submitting\na pull request. Upon receiving a pull request, the GitHub CI process will\nautomatically run MaterialXTest across all platforms, and a successful result\nis required before merging a change.\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 5.5693359375,
          "content": "# MaterialX Project Governance\n\nMaterialX is a project of the\n[Academy Software Foundation](https://www.aswf.io/) and relies on the ASWF\ngovernance policies, supported by the Linux Foundation.\n\nThe MaterialX project maintains a Technical Steering Committee (TSC), which\nhas final authority over the project.  As defined in the project charter,\nTSC responsibilities include, but are not limited to:\n\n- Discussions, seeking consensus, and where necessary, voting on technical\n  matters relating to MaterialX that affect multiple projects.\n- Maintainance and administration of the MaterialX GitHub repository.\n- Coordinating technical direction of the project.\n- Coordinatng marketing, events, and communications regarding MaterialX.\n\nWithin the TSC there are two key subgroups: **Voting Members**, who take on\nformal responsibiities for maintaining the MaterialX project and vote when\ndecisions are required; and **Stakeholders**, who represent specific teams and\ncompanies in the industry and speak on their behalf in MaterialX discussions.\n\n### Voting Members\n\nThese committee members are responsible for contributing actively to the\nMaterialX project, whether it's in the form of developing code, improving the\nspecification and documentation, reviewing pull requests on GitHub, or\nassisting teams with their MaterialX integrations.  Although we expect most\ndecisions to be unanimous across the MaterialX TSC, for decisions where a\nformal vote is required, a majority of voting members is required to move\nforward with a change.\n\nWithin the voting members of the TSC are two elected leadership roles.  Any\nvoting TSC member can express interest in serving in a role, or nominate\nanother member to serve.  There are no term limits, and one person may hold\nmultiple roles simultaneously.  Should a TSC member resign from a leadership\nrole before their term is complete, a successor shall be elected through the\nstandard nomination and voting process to complete the remainder of the term.\nThe leadership roles are:\n\n- **Chair**: This position acts as the project manager, organizing meetings and\nproviding oversight to project administration.\n- **TAC Representative**: This position represents the MaterialX project in meetings\nof the Technical Advisory Council of the ASWF.\n\nThe current Voting Members of the MaterialX TSC are:\n\n- Jonathan Stone - Lucasfilm ADG **(Chair and TAC Representative)**\n- Doug Smythe - Industrial Light & Magic\n- Niklas Harrysson - Lumiere Software\n- Orn Gunnarsson - Autodesk\n- Andréa Machizaud - Adobe\n\n### Stakeholders\n\nThese committee members represent teams or companies that are closely aligned\nwith the MaterialX project, and have a strong interest in how it evolves going\nforward.  Stakeholders speak on behalf of their team or company in MaterialX\ndiscussions, providing the breadth of perspectives that is required to guide\nthe project.  Most new committee members start in this category, and it\ndoesn't require a commitment on their part to contribute to or maintain the\nMaterialX project, though they are encouraged to do so.\n\nThe current Stakeholders of the MaterialX TSC are:\n\n- Henrik Edstrom - Autodesk\n- Fran González García - Pixar RenderMan\n- Ole Gulbrandsen - Sony Pictures Imageworks\n- Rafal Jaroszkiewicz - SideFX\n- Lee Kerley - Apple\n- Lutz Kettner - NVIDIA\n- Chris Kulla - Epic Games\n- Bernard Kwok - Khronos Group\n- André Mazzone - ILM\n- Magnus Pettersson - IKEA\n\n### TSC Nomination and Succession\n\nAny proposal for additional members of the TSC may be submitted by reaching\nout to a current TSC member on Slack or raising the issue at a TSC meeting.\nNew TSC members are accepted or rejected by majority vote of the TSC.\n\nIf a TSC member is for an extended period not regularly participating or\nperforming the responsibilities expected of TSC members, the TSC may by\nmajority vote request an alternate TSC member be submitted by that\norganization, or remove the inactive member from the TSC.\n\nA member of the TSC may nominate a successor in the event that such member\ndecides to leave the TSC, and the TSC shall confirm or reject such nomination\nby a vote.  In the event that the departing member's nomination for successor\nis rejected by vote of the TSC, the departing member shall be entitled to\ncontinue nominating successors until one such successor is confirmed by vote\nof the TSC.  If the departing member fails or is unable to nominate a\nsuccessor, the TSC may nominate one on the departing member's behalf.\n\nVoting TSC membership is presumed to be retained by the individual even if\nthey change employers.  The TSC may take action to ensure that organizational\nstakeholder representation not become severely disproportionate, for example by\nurging an organization that loses its sole TSC representative to nominate a\nnew member, or to limit the total number of members from any one organization\nif too many members all move to the same organization.\n\n### TSC Meetings\n\nAll meetings of the TSC are intended to be open to the public, except where\nthere is a reasonable need for privacy.  The TSC meets regularly in a video\nconference call, at a cadence deemed appropriate by the TSC.  The TSC Chair\nmoderates the meeting, or appoints another TSC member to moderate in his or\nher absence.  Scheduling and connection details may be found in the public\n[ASWF Meeting Calendar](https://www.aswf.io/meeting-calendar/).\n\nPrior to each TSC meeting, the meeting chair will share the agenda with\nthe TSC members and broader community on the MaterialX channel of the ASWF\nSlack.  TSC members can also add items to this agenda before the start of\neach meeting.  The meeting chair is responsible for ensuring that minutes\nare taken and posted on Slack.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.919921875,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXLogo.png\" height=\"170\" />\n</p>\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/LICENSE)\n[![Version](https://img.shields.io/github/v/release/AcademySoftwareFoundation/MaterialX)](https://github.com/AcademySoftwareFoundation/MaterialX/releases/latest)\n[![Build Status](https://github.com/AcademySoftwareFoundation/MaterialX/workflows/main/badge.svg)](https://github.com/AcademySoftwareFoundation/MaterialX/actions)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/6025/badge)](https://bestpractices.coreinfrastructure.org/projects/6025)\n\n## Introduction\n\nMaterialX is an open standard for representing rich material and look-development content in computer graphics, enabling its platform-independent description and exchange across applications and renderers.  Launched at [Industrial Light & Magic](https://www.ilm.com/) in 2012, MaterialX has been a key technology in their feature films and real-time experiences since _Star Wars: The Force Awakens_ and _Millennium Falcon: Smugglers Run_.  The project was released as open source in 2017, with companies including Sony Pictures Imageworks, Pixar, Autodesk, Adobe, and SideFX contributing to its ongoing development.  In 2021, MaterialX became the seventh hosted project of the [Academy Software Foundation](https://www.aswf.io/).\n\n## Quick Start for Developers\n\n- Download the latest version of the [CMake](https://cmake.org/) build system.\n- Point CMake to the root of the MaterialX library and generate C++ projects for your platform and compiler.\n- Select the `MATERIALX_BUILD_PYTHON` option to build Python bindings.\n- Select the `MATERIALX_BUILD_VIEWER` option to build the MaterialX viewer.\n\n## Supported Platforms\n\nThe MaterialX codebase requires a compiler with support for C++17, and can be built with any of the following:\n\n- Microsoft Visual Studio 2017 or newer\n- GCC 8 or newer\n- Clang 5 or newer\n\nThe Python bindings for MaterialX are based on [PyBind11](https://github.com/pybind/pybind11), and support Python versions 3.6 and greater.\n\n## MaterialX Viewer\n\nThe [MaterialX Viewer](documents/DeveloperGuide/Viewer.md) leverages shader generation to build GLSL shaders from MaterialX graphs, rendering the results using the NanoGUI framework.\n\n**Figure 1:** Procedural and uniform materials in the MaterialX viewer\n<p float=\"left\">\n  <img title=\"Standard Surface Marble material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_Marble.png\"\n       width=\"24%\" />\n  <img title=\"Standard Surface Copper material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_Copper.png\"\n       width=\"24%\" />\n  <img title=\"Standard Surface Plastic material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_Plastic.png\"\n       width=\"24%\" />\n  <img title=\"Standard Surface Carpaint material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_Carpaint.png\"\n       width=\"24%\" />\n</p>\n\n**Figure 2:** Textured, color-space-managed materials in the MaterialX viewer\n<p float=\"left\">\n  <img title=\"Standard Surface Tiled Brass material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_TiledBrass.png\"\n       width=\"49%\" />\n  <img title=\"Standard Surface Tiled Wood material\"\n       src=\"https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/MaterialXView_TiledWood.png\"\n       width=\"49%\" />\n</p>\n\n## Open Chess Set\n\nThe Open Chess Set is an open reference asset, consisting of a [MaterialX file](resources/Materials/Examples/StandardSurface/standard_surface_chess_set.mtlx) in the Standard Surface shading model and a [geometry file](resources/Geometry) in the glTF format.  It was authored by Moeen Sayed and Mujtaba Sayed, and was contributed to the MaterialX project by Side Effects.\n\n**Figure 3:** The Open Chess Set, rendered in Arnold for Maya\n![The Open Chess Set rendered in Arnold for Maya](https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/OpenChessSet_Arnold_01.png)\n\n**Figure 4:** The Open Chess Set, rendered in Karma XPU for Houdini\n![The Open Chess Set rendered in Karma XPU for Houdini](https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/documents/Images/OpenChessSet_Karma_01.png)\n\n## Pre-Built Binaries\n\nThe following packages contain pre-built binaries for the latest release, including the MaterialX viewer, Python libraries, and example assets:\n\n- [Microsoft Windows (Visual Studio 2022, Python 3.12)](https://github.com/AcademySoftwareFoundation/MaterialX/releases/latest/download/MaterialX_Windows_VS2022_x64_Python312.zip)\n- [MacOS (Xcode 15, Python 3.12)](https://github.com/AcademySoftwareFoundation/MaterialX/releases/latest/download/MaterialX_MacOS_Xcode_15_Python312.zip)\n- [Linux (GCC 14, Python 3.12)](https://github.com/AcademySoftwareFoundation/MaterialX/releases/latest/download/MaterialX_Linux_GCC_14_Python312.zip)\n\n## Additional Resources\n\n- The [Developer Guide](http://www.materialx.org/docs/api/index.html) contains a developer-oriented overview of MaterialX with API documentation.\n- The [Python Scripts](python/Scripts) folder contains standalone examples of MaterialX Python code.\n- The [JavaScript](javascript) folder contains details on building JavaScript bindings for MaterialX.\n- Presentations at [ASWF Open Source Days](https://materialx.org/assets/ASWF_OSD2024_MaterialX_Final.pdf) and the [SIGGRAPH Physically Based Shading Course](https://blog.selfshadow.com/publications/s2020-shading-course/#materialx) provide details on the roadmap for MaterialX development.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.54296875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you think you've found a potential vulnerability in MaterialX, please report\nit by emailing <materialx-tsc-private@lists.aswf.io>.  Only Technical Steering\nCommittee members and Academy Software Foundation project management have\naccess to these messages.  Include detailed steps to reproduce the issue, and\nany other information that could aid an investigation.  Our policy is to\nrespond to vulnerability reports within 14 days.\n\n## Outstanding Security Issues\n\nNone\n\n## Addressed Security Issues\n\nNone\n"
        },
        {
          "name": "THIRD-PARTY.md",
          "type": "blob",
          "size": 18.7353515625,
          "content": "# Third-Party Project Licenses\n\nThis section documents the licenses of third-party projects that have been imported or incorporated into MaterialX.  All of these are compatible with the [main license](LICENSE) under which the MaterialX project is open-sourced.  Let us know if you notice any errors or omissions and we'd be happy to address them.\n\n### [PyBind11](https://pybind11.readthedocs.io/en/latest/)\n```\nCopyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nPlease also refer to the file .github/CONTRIBUTING.md, which clarifies licensing of\nexternal contributions to this project including patches, pull requests, etc.\n```\n\n### [NanoGUI](https://nanogui.readthedocs.io/en/latest/)\n```\nCopyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n```\n\n### [OpenShadingLanguage](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage)\n```\nCopyright (c) 2009-present Contributors to the Open Shading Language project.\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n### [OpenImageIO](https://openimageio.readthedocs.io/en/latest/)\n```\nCopyright (c) 2008-present by Contributors to the OpenImageIO project.\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n### [Dear ImGui](https://github.com/ocornut/imgui)\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014-2022 Omar Cornut\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n### [ImGui NodeEditor](https://github.com/thedmd/imgui-node-editor)\n```\nMIT License\n\nCopyright (c) 2019 Michał Cichoń\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n### [TinyObjLoader](https://github.com/tinyobjloader/tinyobjloader)\n```\nThe MIT License (MIT)\n\nCopyright (c) 2012-2019 Syoyo Fujita and many contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n### [Cgltf](https://github.com/jkuhlmann/cgltf)\n```\nCopyright (c) 2018-2021 Johannes Kuhlmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n### [StbImage](https://github.com/nothings/stb)\n```\nMIT License\n\nCopyright (c) 2017 Sean Barrett\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n### [PugiXML](https://pugixml.org/)\n```\nMIT License\n\nCopyright (c) 2006-2022 Arseny Kapoulkine\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n```\n\n### [Glad](https://github.com/Dav1dde/glad)\n```\nThe MIT License (MIT)\n\nCopyright (c) 2013-2022 David Herberth\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n### [Glfw](https://www.glfw.org/)\n```\nCopyright (c) 2002-2006 Marcus Geelnard\n\nCopyright (c) 2006-2019 Camilla Löwy\n\nThis software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\nThe origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\n\nAltered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n\nThis notice may not be removed or altered from any source distribution.\n```\n\n### [Catch](https://github.com/catchorg)\n```\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n### [AmbientCG Assets](https://ambientcg.com/)\n```\nAll ambientCG assets are provided under the Creative Commons CC0 1.0 Universal License.\n\nThe Creative Commons CC0 license gives you near limitless freedom to use the materials, models and other assets:\n \n\"You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission.\"\n```\n\n### [Poly Haven Assets](https://polyhaven.com/)\n```\nOur assets are all licensed as CC0, which is effectively Public Domain even in jurisdictions that do not support the Public Domain.\n\nIn other words:\n- You can use our assets for any purpose, including commercial work.\n- You do not need to give credit or attribution when using them (although it is appreciated).\n- You can redistribute them, share them around, include them when sharing your own work, or even in a product you sell.\n```\n\n# Third-Party Software and Services\n\nThe MaterialX project also uses the following software and services that are provided free of charge to open-source projects:\n\n- [CMake](https://cmake.org/) for cross-platform builds\n- [GitHub Actions](https://github.com/features/actions) for continuous integration\n- [PVS-Studio](https://pvs-studio.com) and [Cppcheck](https://cppcheck.sourceforge.io/) for static analysis\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.28125,
          "content": "[build-system]\n# Use a fixed version because we use an experimental feature\n# (a custom plugin) and for now that functionality has\n# no compatibility promises.\nrequires = [\"scikit-build-core==0.4.4\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"MaterialX\"\ndynamic = [\"version\"]\n\nauthors = [\n  { name=\"Contributors to the MaterialX project\", email=\"materialx-discussion@lists.aswf.io\" },\n]\nreadme = \"README.md\"\nrequires-python = \">=3.6\"\n\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: OS Independent\",\n]\n\n[project.urls]\n\"Homepage\" = \"https://materialx.org\"\n\"Source\" = \"https://github.com/AcademySoftwareFoundation/MaterialX\"\n\"Bug Tracker\" = \"https://github.com/AcademySoftwareFoundation/MaterialX/issues\"\n\n[project.scripts]\nbaketextures = \"MaterialX._scripts.baketextures:main\"\ngenerateshader = \"MaterialX._scripts.generateshader:main\"\ngenmdl = \"MaterialX._scripts.genmdl:main\"\nmxdoc = \"MaterialX._scripts.mxdoc:main\"\nmxupdate = \"MaterialX._scripts.mxupdate:main\"\nmxvalidate = \"MaterialX._scripts.mxvalidate:main\"\ntranslateshader = \"MaterialX._scripts.translateshader:main\"\nwritenodegraphs = \"MaterialX._scripts.writenodegraphs:main\"\n\n[tool.scikit-build]\ncmake.minimum-version = \"3.18\"\ncmake.verbose = false\ncmake.build-type = \"Release\"\n\n# Enable experimental features if any are available\n# In this case we need custom local plugin to get\n# the project version from cmake.\nexperimental = true\nmetadata.version.provider = \"mtx_skbuild_plugin\"\nmetadata.version.provider-path = \"./python\"\n\n# Uncoment when developing locally to enable inplace builds.\n# build-dir = \"build/\"\n\nlogging.level = \"DEBUG\"\n\n# Since the python package doesn't live in a standard directory\n# in the source (i.e ./src or ./), we need to manually specify\n# where the package is.\nwheel.packages = [\"python/MaterialX\"]\n\nsdist.exclude = [\n    \"/build\",\n    \"/dist\",\n    \"/resources\",\n    \"/javascript\",\n    \"/documents\",\n    \"/.github\",\n    \"MANIFEST.in\"\n]\n\n[tool.scikit-build.cmake.define]\nMATERIALX_BUILD_SHARED_LIBS = 'OFF' # Be explicit\nMATERIALX_BUILD_PYTHON = 'ON'\nMATERIALX_TEST_RENDER = 'OFF'\nMATERIALX_WARNINGS_AS_ERRORS = 'ON'\nMATERIALX_BUILD_TESTS = 'OFF'\n# TODO: How could we harmonize this variable with SKBUILD?\nMATERIALX_INSTALL_PYTHON = 'OFF'\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}