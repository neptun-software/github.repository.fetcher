{
  "metadata": {
    "timestamp": 1736565650728,
    "page": 541,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stan-dev/stan",
      "stars": 2622,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.86328125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit: 80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9169921875,
          "content": "# /\n/demo\n/models\n/test\n/*.dSYM\n/bin\n\n# other binary\n*.o\n*.exe\n\n# /doc/\n/doc/api\n/doc/*.pdf\n/doc/*.txt\n\n# temporary latex files\n*.idx\n*.ilg\n*.ind\n*.fdb_latexmk\n*.fls\n\n# temporary emacs files\n*~\n\\#*#\n\n# temporary vim files\n*.swp\n\n# depedencies files\n*.d\n*.hpp.d.*\n.Rproj.user\nstan.Rproj\n.kdev4/\nstan.kdev4\n.Rapp.history\n\n# tests: compiled models\n/src/test/test-models/*.hpp\n/src/test/test-models/*/*.hpp\n/src/test/test-models/*/*/*.hpp\n/src/test/test-models/*/*/*/*.hpp\n/src/test/test-models/*/*/*/*/*.hpp\n/src/test/test-models/*/*/*/*/*/*.hpp\n/src/test/test-models/*/*/*/*/*/*/*.hpp\n!/src/test/test-models/**/*.stan\n!/src/test/test-models/**/.gitignore\n\n# tests: generated agrad tests\n/src/test/prob/*/*_generated_*_test.cpp\n\n# For the Mac\n*.DS_Store\n\n# local make include\n/make/local\n\n*.gch\n\n#clang-tidy fixes yaml\n.clang-fixes.log\n\n# Visual Studio Settings\n.vscode/*\n\n# clangd compiler database\ncompile_commands.json\n\n# gdb\n.gdb_history\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.091796875,
          "content": "[submodule \"lib/stan_math\"]\n\tpath = lib/stan_math\n\turl = https://github.com/stan-dev/math.git\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 23.4189453125,
          "content": "@Library('StanUtils')\nimport org.stan.Utils\n\ndef utils = new org.stan.Utils()\ndef skipRemainingStages = false\ndef skipOpenCL = false\n\ndef setupCXX(failOnError = true, CXX = CXX, String stanc3_bin_url = \"nightly\") {\n    errorStr = failOnError ? \"-Werror \" : \"\"\n    stanc3_bin_url_str = stanc3_bin_url != \"nightly\" ? \"\\nSTANC3_TEST_BIN_URL=${stanc3_bin_url}\\n\" : \"\"\n    writeFile(file: \"make/local\", text: \"CXX=${CXX} -Wno-inconsistent-missing-override ${errorStr}${stanc3_bin_url_str}\")\n}\n\ndef runTests(String testPath, Boolean separateMakeStep=true) {\n    if (separateMakeStep) {\n        sh \"python3 runTests.py -j${PARALLEL} ${testPath} --make-only\"\n    }\n    try { sh \"python3 runTests.py -j${PARALLEL} ${testPath}\" }\n    finally { junit 'test/**/*.xml' }\n}\n\ndef runTestsWin(String testPath, Boolean separateMakeStep=true) {\n    withEnv(['PATH+TBB=./lib/stan_math/lib/tbb']) {\n       if (separateMakeStep) {\n           bat \"\"\"\n            SET \\\"PATH=C:\\\\Users\\\\jenkins\\\\Anaconda3;%PATH%\\\"\n            SET \\\"PATH=${env.RTOOLS40_HOME};%PATH%\\\"\n            SET \\\"PATH=${env.RTOOLS40_HOME}\\\\usr\\\\bin;${LLVM7}\\\\bin;%PATH%\\\" //\n            SET \\\"PATH=${env.RTOOLS40_HOME}\\\\mingw64\\\\bin;%PATH%\\\"\n            SET \\\"PATH=C:\\\\PROGRA~1\\\\R\\\\R-4.1.2\\\\bin;%PATH%\\\"\n            SET \\\"PATH=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin;%PATH%\\\"\n            SET \\\"MPI_HOME=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin\\\"\n            python runTests.py -j${PARALLEL} ${testPath} --make-only\n           \"\"\"\n       }\n       try {\n            bat \"\"\"\n                SET \\\"PATH=C:\\\\Users\\\\jenkins\\\\Anaconda3;%PATH%\\\"\n                SET \\\"PATH=${env.RTOOLS40_HOME};%PATH%\\\"\n                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\usr\\\\bin;${LLVM7}\\\\bin;%PATH%\\\" //\n                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\mingw64\\\\bin;%PATH%\\\"\n                SET \\\"PATH=C:\\\\PROGRA~1\\\\R\\\\R-4.1.2\\\\bin;%PATH%\\\"\n                SET \\\"PATH=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin;%PATH%\\\"\n                SET \\\"MPI_HOME=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin\\\"\n                python runTests.py -j${PARALLEL} ${testPath}\n            \"\"\"\n       }\n       finally { junit 'test/**/*.xml' }\n    }\n}\n\ndef deleteDirWin() {\n    bat \"attrib -r -s /s /d\"\n    deleteDir()\n}\n\nString stanc3_bin_url() { params.stanc3_bin_url ?: \"nightly\" }\nString cmdstan_pr() { params.cmdstan_pr ?: \"downstream_tests\" }\nString stan_pr() {\n    if (env.BRANCH_NAME == 'downstream_tests') {\n        ''\n    } else if (env.BRANCH_NAME == 'downstream_hotfix') {\n        'master'\n    } else {\n        env.BRANCH_NAME\n    }\n}\nString integration_tests_flags() {\n    if (params.compile_all_model) {\n        '--no-ignore-models '\n    } else {\n        ''\n    }\n}\n\ndef isBranch(String b) { env.BRANCH_NAME == b }\nBoolean isPR() { env.CHANGE_URL != null }\nString fork() { env.CHANGE_FORK ?: \"stan-dev\" }\nString branchName() { isPR() ? env.CHANGE_BRANCH :env.BRANCH_NAME }\n\npipeline {\n    agent none\n    parameters {\n        string(defaultValue: '', name: 'math_pr', description: \"Leave blank \"\n                + \"unless testing against a specific math repo pull request, \"\n                + \"e.g. PR-640.\")\n        string(defaultValue: 'downstream_tests', name: 'cmdstan_pr',\n          description: 'PR to test CmdStan upstream against e.g. PR-630')\n        string(defaultValue: 'nightly', name: 'stanc3_bin_url',\n          description: 'Custom stanc3 binary url')\n        booleanParam(defaultValue: false, name: 'run_tests_all_os', description: 'Run unit and integration tests on all OS.')\n        booleanParam(defaultValue: false, name: 'compile_all_models', description: 'Run integration tests on the full test model suite.')\n    }\n    options {\n        skipDefaultCheckout()\n        preserveStashes(buildCount: 7)\n        parallelsAlwaysFailFast()\n        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '30'))\n        disableConcurrentBuilds(abortPrevious: env.BRANCH_NAME != \"downstream_tests\" && env.BRANCH_NAME != \"downstream_hotfix\")\n    }\n    environment {\n        GCC = 'g++'\n        PARALLEL = 4\n        MAC_CXX = 'clang++'\n        LINUX_CXX = 'clang++-6.0'\n        WIN_CXX = 'g++'\n        GIT_AUTHOR_NAME = 'Stan Jenkins'\n        GIT_AUTHOR_EMAIL = 'mc.stanislaw@gmail.com'\n        GIT_COMMITTER_NAME = 'Stan Jenkins'\n        GIT_COMMITTER_EMAIL = 'mc.stanislaw@gmail.com'\n        OPENCL_DEVICE_ID_CPU = 0\n        OPENCL_DEVICE_ID_GPU = 0\n        OPENCL_PLATFORM_ID = 1\n        OPENCL_PLATFORM_ID_CPU = 0\n        OPENCL_PLATFORM_ID_GPU = 0\n    }\n    stages {\n        stage(\"Clang-format\") {\n            agent {\n                docker {\n                    image 'stanorg/ci:gpu'\n                    label 'linux'\n                }\n            }\n            steps {\n                retry(3) { checkout scm }\n                withCredentials([usernamePassword(credentialsId: 'a630aebc-6861-4e69-b497-fd7f496ec46b',\n                    usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {\n                    sh \"\"\"#!/bin/bash\n                        set -x\n                        git checkout -b ${branchName()}\n                        clang-format --version\n                        find src -name '*.hpp' -o -name '*.cpp' | xargs -n20 -P${PARALLEL} clang-format -i\n                        if [[ `git diff` != \"\" ]]; then\n                            git config user.email \"mc.stanislaw@gmail.com\"\n                            git config user.name \"Stan Jenkins\"\n                            git add src\n                            git commit -m \"[Jenkins] auto-formatting by `clang-format --version`\"\n                            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${fork()}/stan.git ${branchName()}\n                            echo \"Exiting build because clang-format found changes.\"\n                            echo \"Those changes are now found on stan-dev/stan under branch ${branchName()}\"\n                            echo \"Please 'git pull' before continuing to develop.\"\n                            exit 1\n                        fi\n                    \"\"\"\n                }\n            }\n            post {\n                always { deleteDir() }\n                failure {\n                    script {\n                        emailext (\n                            subject: \"[StanJenkins] Autoformattted: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\",\n                            body: \"Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' \" +\n                                \"has been autoformatted and the changes committed \" +\n                                \"to your branch, if permissions allowed.\" +\n                                \"Please pull these changes before continuing.\" +\n                                \"\\n\\n\" +\n                                \"See https://github.com/stan-dev/stan/wiki/Coding-Style-and-Idioms\" +\n                                \" for setting up the autoformatter locally.\\n\"+\n                            \"(Check console output at ${env.BUILD_URL})\",\n                            recipientProviders: [[$class: 'RequesterRecipientProvider']],\n                            to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n                        )\n                    }\n                }\n            }\n        }\n        stage('Linting & Doc checks') {\n            agent {\n                docker {\n                    image 'stanorg/ci:gpu'\n                    label 'linux'\n                }\n            }\n            steps {\n                script {\n                    retry(3) { checkout scm }\n                    sh \"\"\"\n                       make math-revert\n                       make clean-all\n                       git clean -xffd\n                    \"\"\"\n                    utils.checkout_pr(\"math\", \"lib/stan_math\", params.math_pr)\n                    stash 'StanSetup'\n                    setupCXX(true, LINUX_CXX)\n                    parallel(\n                        CppLint: { sh \"make cpplint\" },\n                        API_docs: { sh 'make doxygen' },\n                    )\n                }\n            }\n            post {\n                always {\n                    recordIssues(\n                        id: \"lint_doc_checks\",\n                        name: \"Linting & Doc checks\",\n                        enabledForFailure: true,\n                        aggregatingResults : true,\n                        tools: [\n                            cppLint(id: \"cpplint\", name: \"Linting & Doc checks@CPPLINT\")\n                        ],\n                        qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],\n                        healthy: 10, unhealthy: 100, minimumSeverity: 'HIGH'\n                    )\n                    deleteDir()\n                }\n            }\n        }\n        stage('Verify changes') {\n            agent {\n                docker {\n                    image 'stanorg/ci:gpu'\n                    label 'linux'\n                }\n            }\n            steps {\n                script {\n\n                    retry(3) { checkout scm }\n                    sh 'git clean -xffd'\n\n                    // These paths will be passed to git diff\n                    // If there are changes to them, CI/CD will continue else skip\n                    def paths = ['make', 'src/stan', 'src/test', 'Jenkinsfile', 'makefile', 'runTests.py',\n                        'lib/stan_math/stan', 'lib/stan_math/make', 'lib/stan_math/lib', 'lib/stan_math/test',\n                        'lib/stan_math/runTests.py', 'lib/stan_math/runChecks.py', 'lib/stan_math/makefile',\n                        'lib/stan_math/Jenkinsfile', 'lib/stan_math/.clang-format'\n                    ].join(\" \")\n\n                    skipRemainingStages = utils.verifyChanges(paths)\n\n                    def openCLPaths = ['src/stan/model/indexing'].join(\" \")\n                    skipOpenCL = utils.verifyChanges(openCLPaths)\n                }\n            }\n            post {\n                always {\n                    deleteDir()\n                }\n            }\n        }\n        stage('Unit tests') {\n            when {\n                expression {\n                    !skipRemainingStages\n                }\n            }\n            parallel {\n                stage('Windows Headers & Unit') {\n                    agent { label 'windows' }\n                    when {\n                        expression {\n                            !skipRemainingStages\n                        }\n                    }\n                    steps {\n                        deleteDirWin()\n                            unstash 'StanSetup'\n                            bat \"\"\"\n                                SET \\\"PATH=${env.RTOOLS40_HOME};%PATH%\\\"\n                                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\usr\\\\bin;${LLVM7}\\\\bin;%PATH%\\\" //\n                                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\mingw64\\\\bin;%PATH%\\\"\n                                SET \\\"PATH=C:\\\\PROGRA~1\\\\R\\\\R-4.1.2\\\\bin;%PATH%\\\"\n                                SET \\\"PATH=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin;%PATH%\\\"\n                                SET \\\"MPI_HOME=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin\\\"\n                                make.exe -f lib/stan_math/make/standalone math-libs\n                                make.exe -j${PARALLEL} test-headers\n                            \"\"\"\n                            setupCXX(false, WIN_CXX, stanc3_bin_url())\n                            runTestsWin(\"src/test/unit\")\n                    }\n                    post { always { deleteDirWin() } }\n                }\n                stage('Linux Unit') {\n                    agent {\n                        docker {\n                            image 'stanorg/ci:gpu'\n                            label 'linux'\n                            args '--pull always --gpus 1'\n                        }\n                    }\n                    steps {\n                        unstash 'StanSetup'\n                        setupCXX(true, LINUX_CXX, stanc3_bin_url())\n                        sh \"\"\"\n                            echo STAN_OPENCL=true > make/local\n                            echo OPENCL_PLATFORM_ID=${OPENCL_PLATFORM_ID_GPU} >> make/local\n                            echo OPENCL_DEVICE_ID=${OPENCL_DEVICE_ID_GPU} >> make/local\n                        \"\"\"\n                        sh \"\"\"\n                            make -j${PARALLEL} test-headers\n                        \"\"\"\n                        runTests(\"src/test/unit\")\n                    }\n                    post { always { deleteDir() } }\n                }\n                stage('Mac Unit') {\n                agent { label 'osx' }\n                    when {\n                        expression {\n                            ( env.BRANCH_NAME == \"develop\" ||\n                            env.BRANCH_NAME == \"master\" ||\n                            params.run_tests_all_os ) &&\n                            !skipRemainingStages\n                        }\n                    }\n                    steps {\n                        unstash 'StanSetup'\n                        setupCXX(false, MAC_CXX, stanc3_bin_url())\n                        runTests(\"src/test/unit\")\n                    }\n                    post { always { deleteDir() } }\n                }\n            }\n        }\n        stage('Integration') {\n            when {\n                expression {\n                    !skipRemainingStages\n                }\n            }\n            parallel {\n                stage('Integration Linux') {\n                    agent {\n                        docker {\n                            image 'stanorg/ci:gpu'\n                            label 'linux'\n                        }\n                    }\n                    steps {\n                        sh \"\"\"\n                            git clone --recursive https://github.com/stan-dev/performance-tests-cmdstan\n                            git clone https://github.com/stan-dev/stanc3/ performance-tests-cmdstan/stanc3\n                        \"\"\"\n                        script {\n                            if (params.cmdstan_pr != 'downstream_tests') {\n                                if(params.cmdstan_pr.contains(\"PR-\")){\n                                    pr_number = params.cmdstan_pr.split(\"-\")[1]\n                                    sh \"\"\"\n                                        cd performance-tests-cmdstan/cmdstan\n                                        git fetch origin pull/${pr_number}/head:pr/${pr_number}\n                                        git checkout pr/${pr_number}\n                                    \"\"\"\n                                }else{\n                                    sh \"\"\"\n                                        cd performance-tests-cmdstan/cmdstan\n                                        git checkout develop && git pull && git checkout ${params.cmdstan_pr}\n                                    \"\"\"\n                                }\n                            }\n                            if (params.stanc3_bin_url != 'nightly') {\n                                sh \"\"\"\n                                    cd performance-tests-cmdstan/cmdstan\n                                    echo 'STANC3_TEST_BIN_URL=${params.stanc3_bin_url}' >> make/local\n                                \"\"\"\n                            }\n                        }\n                        dir('performance-tests-cmdstan/cmdstan/stan'){\n                            unstash 'StanSetup'\n                            script {\n                                if (params.stanc3_bin_url != 'nightly') {\n                                    sh \"\"\"\n                                        echo 'STANC3_TEST_BIN_URL=${params.stanc3_bin_url}' >> make/local\n                                    \"\"\"\n                                }\n                            }\n                        }\n                        sh \"\"\"\n                            cd performance-tests-cmdstan/cmdstan\n                            echo 'O=0' >> make/local\n                            echo 'CXX=${LINUX_CXX}' >> make/local\n                            make clean-all\n                            make -j${PARALLEL} build\n                            cd ..\n                            python3 ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 stanc3/test/integration/good\n                            python3 ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 example-models\n                        \"\"\"\n                        sh \"\"\"\n                            cd performance-tests-cmdstan/cmdstan/stan\n                            python3 ./runTests.py src/test/integration/compile_standalone_functions_test.cpp\n                            python3 ./runTests.py src/test/integration/standalone_functions_test.cpp\n                            python3 ./runTests.py src/test/integration/multiple_translation_units_test.cpp\n                        \"\"\"\n                    }\n                    post { always { deleteDir() } }\n                }\n                stage('Integration Mac') {\n                    agent { label 'osx' }\n                    when {\n                        expression {\n                            ( env.BRANCH_NAME == \"develop\" ||\n                            env.BRANCH_NAME == \"master\" ||\n                            params.run_tests_all_os ) &&\n                            !skipRemainingStages\n                        }\n                    }\n                    steps {\n                        sh \"\"\"\n                            git clone --recursive https://github.com/stan-dev/performance-tests-cmdstan\n                        \"\"\"\n                        dir('performance-tests-cmdstan/cmdstan/stan'){\n                            unstash 'StanSetup'\n                        }\n                        sh \"\"\"\n                            cd performance-tests-cmdstan/cmdstan\n                            echo 'O=0' >> make/local\n                            echo 'CXX=${MAC_CXX}' >> make/local\n                            make clean-all\n                            make -j${PARALLEL} build\n                            cd ..\n                            python3 ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 stanc3/test/integration/good\n                            python3 ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 example-models\n                        \"\"\"\n                        sh \"\"\"\n                            cd performance-tests-cmdstan/cmdstan/stan\n                            python3 ./runTests.py src/test/integration/compile_standalone_functions_test.cpp\n                            python3 ./runTests.py src/test/integration/standalone_functions_test.cpp\n                            python3 ./runTests.py src/test/integration/multiple_translation_units_test.cpp\n                        \"\"\"\n                    }\n                    post { always { deleteDir() } }\n                }\n                stage('Integration Windows') {\n                    agent { label 'windows' }\n                    when {\n                        expression {\n                            !skipRemainingStages\n                        }\n                    }\n                    steps {\n                        deleteDirWin()\n                        bat \"\"\"\n                            git clone --recursive https://github.com/stan-dev/performance-tests-cmdstan\n                        \"\"\"\n                        dir('performance-tests-cmdstan/cmdstan/stan'){\n                            unstash 'StanSetup'\n                        }\n                        writeFile(file: \"performance-tests-cmdstan/cmdstan/make/local\", text: \"CXX=${WIN_CXX}\\nPRECOMPILED_HEADERS=true\")\n                        withEnv([\"PATH+TBB=${WORKSPACE}\\\\performance-tests-cmdstan\\\\cmdstan\\\\stan\\\\lib\\\\stan_math\\\\lib\\\\tbb\"]) {\n\n                            bat \"\"\"\n                                SET \\\"PATH=C:\\\\Users\\\\jenkins\\\\Anaconda3;%PATH%\\\"\n                                SET \\\"PATH=${env.RTOOLS40_HOME};%PATH%\\\"\n                                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\usr\\\\bin;${LLVM7}\\\\bin;%PATH%\\\" //\n                                SET \\\"PATH=${env.RTOOLS40_HOME}\\\\mingw64\\\\bin;%PATH%\\\"\n                                SET \\\"PATH=C:\\\\PROGRA~1\\\\R\\\\R-4.1.2\\\\bin;%PATH%\\\"\n                                SET \\\"PATH=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin;%PATH%\\\"\n                                SET \\\"MPI_HOME=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin\\\"\n                                cd performance-tests-cmdstan/cmdstan\n                                make.exe -j${PARALLEL} build\n                                cd ..\n                                python ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 stanc3/test/integration/good\n                                python ./runPerformanceTests.py -j${PARALLEL} ${integration_tests_flags()}--runs=0 example-models\n                            \"\"\"\n                        }\n                        bat \"\"\"\n                            SET \\\"PATH=C:\\\\Users\\\\jenkins\\\\Anaconda3;%PATH%\\\"\n                            SET \\\"PATH=${env.RTOOLS40_HOME};%PATH%\\\"\n                            SET \\\"PATH=${env.RTOOLS40_HOME}\\\\usr\\\\bin;${LLVM7}\\\\bin;%PATH%\\\" //\n                            SET \\\"PATH=${env.RTOOLS40_HOME}\\\\mingw64\\\\bin;%PATH%\\\"\n                            SET \\\"PATH=C:\\\\PROGRA~1\\\\R\\\\R-4.1.2\\\\bin;%PATH%\\\"\n                            SET \\\"PATH=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin;%PATH%\\\"\n                            SET \\\"MPI_HOME=C:\\\\PROGRA~1\\\\Microsoft^ MPI\\\\Bin\\\"\n                            cd performance-tests-cmdstan/cmdstan/stan\n                            python ./runTests.py src/test/integration/compile_standalone_functions_test.cpp\n                            python ./runTests.py src/test/integration/standalone_functions_test.cpp\n                            python ./runTests.py src/test/integration/multiple_translation_units_test.cpp\n                        \"\"\"\n                    }\n                    post { always { deleteDirWin() } }\n                }\n            }\n        }\n        stage('Upstream CmdStan tests') {\n            when {\n                    expression {\n                        ( env.BRANCH_NAME ==~ /PR-\\d+/ ||\n                        env.BRANCH_NAME == \"downstream_tests\" ||\n                        env.BRANCH_NAME == \"downstream_hotfix\" ) &&\n                        !skipRemainingStages\n                    }\n                }\n            steps {\n                build(job: \"Stan/CmdStan/${cmdstan_pr()}\",\n                      parameters: [\n                        string(name: 'stan_pr', value: stan_pr()),\n                        string(name: 'math_pr', value: params.math_pr),\n                        string(name: 'stanc3_bin_url', value: stanc3_bin_url())\n                      ])\n            }\n        }\n\n    }\n    // Below lines are commented to avoid spamming emails during migration/debug\n    post {\n        always {\n            node(\"linux\") {\n                recordIssues(\n                    id: \"pipeline\",\n                    name: \"Entire pipeline results\",\n                    enabledForFailure: true,\n                    aggregatingResults : false,\n                    filters: [\n                        excludeFile('lib/.*')\n                    ],\n                    tools: [\n                        gcc4(id: \"pipeline_gcc4\", name: \"GNU C Compiler\"),\n                        clang(id: \"pipeline_clang\", name: \"LLVM/Clang\")\n                    ],\n                    qualityGates: [[threshold: 30, type: 'TOTAL', unstable: true]],\n                    healthy: 10, unhealthy: 100, minimumSeverity: 'HIGH'\n                )\n            }\n        }\n        success {\n            script {\n                utils.updateUpstream(env,'cmdstan')\n                utils.mailBuildResults(\"SUCCESSFUL\")\n            }\n        }\n        unstable { script { utils.mailBuildResults(\"UNSTABLE\", \"stan-buildbot@googlegroups.com\") } }\n        failure { script { utils.mailBuildResults(\"FAILURE\", \"stan-buildbot@googlegroups.com\") } }\n    }\n}\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.494140625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2011--2020, Stan Developers and their Assignees\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9443359375,
          "content": "<a href=\"http://mc-stan.org\">\n<img src=\"https://raw.githubusercontent.com/stan-dev/logos/master/logo.png\" width=200 alt=\"Stan Logo\"/>\n</a>\n\n<b>Stan</b> is a C++ package providing\n\n* full Bayesian inference using the No-U-Turn sampler (NUTS), a variant of Hamiltonian Monte Carlo (HMC),\n* approximate Bayesian inference using automatic differentiation variational inference (ADVI), and\n* penalized maximum likelihood estimation (MLE) using L-BFGS optimization.\n\nIt is built on top of the [Stan Math library](https://github.com/stan-dev/math), which provides\n\n* a full first- and higher-order automatic differentiation library based on C++ template overloads, and\n* a supporting fully-templated matrix, linear algebra, and probability special function library.\n\nThere are interfaces available in R, Python, MATLAB, Julia, Stata, Mathematica, and for the command line.\n\n[![DOI](https://zenodo.org/badge/19868/stan-dev/stan.svg)](https://zenodo.org/badge/latestdoi/19868/stan-dev/stan)\n\nHome Page\n---------\nStan's home page, with links to everything you'll need to use Stan is:\n\n[http://mc-stan.org/](http://mc-stan.org/)\n\nInterfaces\n----------\nThere are separate repositories in the stan-dev GitHub organization for the interfaces, higher-level libraries and lower-level libraries.  \n\nSource Repository\n-----------------\nStan's source-code repository is hosted here on GitHub.\n\nLicensing\n---------\nThe Stan math library, core Stan code, and CmdStan are licensed under new BSD. RStan and PyStan are licensed under GPLv3, with other interfaces having other open-source licenses.\n\nNote that the Stan math library depends on the Intel TBB library which is licensed under the Apache 2.0 license. This dependency implies an additional restriction as compared to the new BSD lincense alone. The Apache 2.0 license is incompatible with GPL-2 licensed code if distributed as a unitary binary. You may refer to the Licensing page on the [Stan wiki](https://github.com/stan-dev/stan/wiki/Stan-Licensing).\n"
        },
        {
          "name": "RELEASE-NOTES.txt",
          "type": "blob",
          "size": 68.947265625,
          "content": "STAN C++ RELEASE NOTES\n======================================================================\n\nNote: these are the release notes for the stan-dev/stan repository.\nFurther changes may arise at the interface level (stan-dev/{rstan,\npystan, cmdstan}) and math library level (stan-dev/math).\n\nv2.36.0 (10 December 2024)\n======================================================================\n\n - Added de/serialization for the `stochastic_row_matrix` and `stochastic_column_matrix` types. (#3298, #3304)\n - Added de/serialization for the `sum_to_zero_vector` type. (#3308)\n - Relaxed restrictions on HMC to allow running when a model has no parameters. (#3071, #3303)\n - Updated `rvalue()` functions that use `multi_index` to return an Eigen expression of multi indexing instead of eagerly creating a new matrix from the indices. (#3250)\n - Improved error messages when user-specified initializations fail. (#3291)\n - Fixed progress output formatting being inconsistent for the non-adaptive samplers. (#3296)\n - Improved parsing of Stan CSV files to allow for getting MCMC sample from fixed_param and samples with saved warmup draws and to be able to correctly get ADVI sample. (#3311)\n - Improved parsing of Stan CSV files when they contain nan or infinite values. (#3318)\n - Added a new `stan::mcmc::chainset` object, exposing split-Rhat, split-ESS and Monte Carlo standard error diagnostics. This replaces the `chains<>` object. (#3312, #3313)\n - Fixed a header include order issue that caused compilation with `-DSTAN_MODEL_FVAR_VAR` to fail for certain models. (#3294)\n - Removed support for adding makefile variables in `~/.config/stan/make.local`. Use the `make/local` file in the Stan directory instead. (#3295)\n\nv2.35.0 (3 June 2024)\n======================================================================\n\n - The algorithms no longer catch `std::exception` unconditionally. The Math library uses `std::domain_error` for recoverable errors, and these are the ones which are caught. (#3259)\n - Allow laplace sampling without evaluating `log_prob` for each draw. (#3261)\n - Allow laplace sampling to save the Hessian as a diagnostic output. (#3261)\n - Stan's RNG usages now uses a type definition `stan::rng_t` rather than hard coding a specific Boost RNG. (#3263)\n - Switched the pRNG used by default in the services and tests to be `boost::mixmax`. Note that this means seeds from previous versions will lead to different numerical results in this version. (#3264)\n - Add a new ranked R-hat diagnostic from [Vehtari](https://arxiv.org/abs/1903.08008). (#3266)\n - Fixed an issue where Pathfinder would sometimes return more draws than requested. (#3279)\n\nv2.34.1 (23 January 2024)\n======================================================================\n\n- Fixed a Windows-specific issue with std::regex in JSON file validation (#3251)\n- Added a missing include of `cstdint` (#3255)\n\nv2.34.0 (16 January 2024)\n======================================================================\n\n - Resolved an issue in Pathfinder's multithreading which lead to non-reproducible results (#3239)\n - Improved the human-readability of the output of the JSON writer class (#3227)\n - Resolved various compiler warnings (#3228, #3234)\n - Added hooks to adaptive sampler methods to write adapted metric to JSON file. (#3230, #3248)\n - Changed bfgs and lbfgs's error messaging behavior so that the message is not split between stderr and stdout but is entirely sent to stderr. (#3238)\n - Fixed a bug in the stan opencl assign tests (#3219)\n - Updated PSIS to not add back the max and return the unnormalized resample ratios for stability (#3243)\n - Fixed an issue where trying to compute the potential scale reduction factor on an empty set of draws would lead to a crash (#3246)\n - Added flags to the Pathfinder service functions for turning off resampling and the calculation of the lp for the approximate draws. (#3249)\n\nv2.33.0 (5 September 2023)\n======================================================================\n\n- Added Pathfinder and Multi-pathfinder to the service APIs. (#3123, #3205)\n- Added the `unconstrain_array` method to the model base class as the inverse of `write_array`. (#3179, #3211)\n- Support Tuple indices in Stan CSV Header Reader. (#3190)\n- Add callback writer to output JSON data for diagnostics. (#3191, #3202)\n- Replace use of `boost::lexical_cast` with `std::strol`, etc, and remove spurious header includes. (#3206)\n- Fixed several typos in documentation. (#3210)\n- Added multi chain service functions for hmc nuts for adapatation and nonadaption for the unit e, diag, and dense metrics. (#3212)\n- Made the service functions consistently catch exceptions and favor return codes. (#3214)\n- Added a hard copy of the event vector for OpenCL before making a copy to go from a tbb concurrent vector to a standard vector. (#3217)\n- Added missing size checks to vectors of Eigen types. (#3218)\n- Remove deprecated syntax from remaining tests. (#3220)\n\nv2.32.2 (15 May 2023)\n======================================================================\n\n- Fixed handling of zero-sized parameters in standalone generated quantities.\n\nv2.32.1 (2 May 2023)\n======================================================================\n\n- Fix an issue where the output of Laplace sampling was inconsistent with other outputs and could lead to invalid CSV headers (#3184)\n\nv2.32.0 (20 April 2023)\n======================================================================\n\n- Extended `get_dims` and `get_param_names` in model_base with flags for whether to include transformed parameters and generated quantities. (#3139)\n- Fixed an issue where initialization would still retry many times even if a fixed initialization was provided. (#3139)\n- Cleaned up newlines in Laplace service logging. (#3153)\n- make: use SUNDIALS_TARGETS instead of LIBSUNDIALS. (#3162)\n- Updated JSON var context to handle nested structures (tuples). (#3165)\n- Always discard at least 1 entry in new RNGs. (#3168)\n- Relaxed requirements for 0-sized data objects in JSON. (#3170)\n- Deleted unused io/cmd_line.hpp. (#3172)\n- Standalone GQ: Output NaNs when exception is caught. (#3173)\n- Cleaned up dimension and name logic in random_var_context. (#3174)\n- Removed old/unused IO code. (#3177)\n- Made deserializer's map members const. (#3178)\n\nv2.31.0 (21 November 2022)\n======================================================================\n- RapidJSON library is now a part of Stan (previously part of CmdStan) (#3143)\n- Added a #define flag flag to enable nested autodiff in model_base class (#3144)\n- Set up the service function so interfaces can offer Laplace approximation. (#3148)\n\nv2.30.0 (1 July 2022)\n======================================================================\n- Added `const noexcept` modifiers to the three accessors related to step-size (nominal, current, and jitter). (3124)\n- Removed unused variable `num_params`. (#3126)\n- Code cleanup - consistent set of includes for the set of services in stan/services/sample. (#3111)\n\nv2.29.2 (25 March 2022)\n======================================================================\n\n- Fixed bug with selecting matrix rows with `matrix[x:x, ]`.\n- Updated Math submodule to 4.3.2\n\nv2.29.1 (2 March 2022)\n======================================================================\n\n- Updated Stan Math to 4.3.1.\n- Fixed a bug with assigning var matrix types, only surfaces when using stanc3 optimization (`--O1` or up).\n\nv2.29.0 (14 February 2022)\n======================================================================\n\n - Fixed assign and lvalue to return empty array with negative indexing and prevent assigning containers not matching in size. (#3095)\n - Refactored the integration tests to use the Stan model from the stanc3 repository.\n - Upgraded Stan Math to 4.3.0.\n\nv2.28.2 (22 November 2021)\n======================================================================\n\n - Fixed a performance regression caused by using the diagnostic writer even when diagnostics were not requested.\n\nv2.28.1 (21 October 2021)\n======================================================================\n\n - Updated to Stan Math 4.2.1\n\nv2.28.0 (5 October 2021)\n======================================================================\n\n - Now using Eigen nullaryExpression for indexing with multi_index so these indexing functions propagate expressions, potentially reducing the number of times memory needs to be accessed. (#3046)\n - Fixes `àssign()` for `var<Matrix>`. (#3049)\n - Allowed intake of complex numbers. (#3056)\n - Marged rethrow_located as [[noreturn]]. (#3059)\n\nv2.27.0 (2 June 2021)\n======================================================================\n\n- Refactored indexing functions (renaming, replaces indexing structure in favor of variadic arguments). (#3011)\n- Added the serializer and deserializer classes for reading/writing constraints in the generated C++ easier. (#3013, #3018, #3019, #3024, #3036)\n- Removed unuse template keyword to fix for clang 12+. (#3026)\n- Added more robust detection of improper posteriors by checking that metric does not overflow during adaptation. (#3030)\n\nv2.26.1 (17 February 2021)\n======================================================================\n\n- Updated Math to v4.0.1\n\nv.2.26.0 (26 January 2021)\n======================================================================\n\n- Improved performance for assigning to slices of matrices and vectors and vector-style indexing (#2962, #2964, #2965, #2973).\n- Improved error messages on range checks. (#2978)\n- Allowed Stan CSV files to have first column be any Stan variable name, not just \"lp__\".\n- Removed .eval() in rvalue() where applicable. (#2974)\n- Allowed reader to accept Eigen vector and use Eigen Map to access inputs. (#2955)\n- Allowed functions in reader to output a `var_value<Eigen::Matrix<T, R, C>>`.\n- Added assignment to `var_value<Eigen::Matrix<T, R, C>>`.\n- Added rvalue overloads for `var_value<Eigen::Matrix<T, R, C>>`.\n\nv.2.25.0 (26 October 2020)\n======================================================================\n\n- added a const accessor to _z in base_hmc.hpp\n- bugfixed validate_dims in array_var_context\n- cleaned up includes of Eigen\n\nv.2.24.0 (28 July 2020)\n======================================================================\n\n- `std::chrono` is now used for all timing purposes\n- fixed a bug with generated quantities for vectors of length 1\n- added `recover_memory` for normal exit of `log_prob_grad`\n- replaced the use of `boost::` functions/metaprograms in favor of `std::` where applicable\n\nv.2.23.0 (22 April 2020)\n======================================================================\n\n- updated Stan Math to 3.2\n- `rvalue` and `assign` now accept generic Eigen expressions\n\nv.2.22.0 (24 January 2020)\n======================================================================\n\nNew Features\n------------\n\n- validate_dims in stan::io::var_context vas made a virtual function which allows its implementation for JSON data which is needed to accepts arrays where any dimension is size 0\n- replaced Eigen vectors of strings with std::vector<std::string>\n- replaced stan::math::domain_error with throw_domain_error\n- added const noexcept accessors to the stepsize adaptation class which allows developers to query the adaptation parameters in contexts where it's natural to have a const sampler (logging, serialization, ...)\n\nv.2.21.0 (18 October 2019)\n======================================================================\n\nNew Features\n------------\n- Add Intel TBB (#2769)\n- Add automated maintanence and cleanup via clang-tools to makefile (#2805)\n- Use Welford's algorithm for Variance Estimates in src/stan/analyze (#2819)\n- Adds additional no-u-turn checks across subtrees to avoid missing u-turns for approximately iid normal models (#2800)\n- Add gp kernels to language (#2739)\n- Update rhat and ess (#2794)\n\nBug Fixes\n---------\n- Fix const logic and size check (#2822)\n- Add ifdef for R new_model (#2798)\n- Add g_ to name of g vector name in ps_point (#2832)\n\nv.2.20.0 (18 July 2019)\n======================================================================\n\nNew Features\n------------\n- Update effective sample size calculations, with a small change to the autocovariance function, to use split chains (#2774)\n- Add stan::model::model_base base class and and stan::model::model_crtp static adapter class for constructing models. (#2785)\n- Allow ts and t0 to be parameters, complete ode_test, and extend the integrate_ode_* stan models (#2791)\n- Add the GP covariance functions to the language (primitives of some popular materns, a dot product, and the periodic) (#2758)\n- Update Eigen includes to allow compilation with new plugin methods (#2754)\n- Add gp kernels to language (#2739)\n\nBug Fixes\n---------\n- Multi-unit compilation of base_xhmc.hpp. (#2775)\n- Declaring a size zero simplex in a Stan program will halt the program. (#2773)\n\nOther\n-----\n- Defer to Eigen's copy constructor now for assignment ( faster matrix assign ) (#2784)\n- Rethrow_located also takes in a string to specify the location. (#2770)\n- Faster indexing (#2766)\n- Fixed generator so that matrix indexing uses most efficient access strategy (#2749)\n\nv.2.19.1 (18 Apr 2019)\n======================================================================\n\nThis is a release out of cycle to address a performance bug in v.2.19 (stan-dev/stan#2748)\n\nBug Fixes\n--------------------------------------------------\n* #2749 - Fixed generator so that matrix indexing uses most efficient access strategy - generated code should call stan::math::get_base1() on matrix using 5-arg function which specifies matrix row, column.\n\n\nv.2.19.0 (20 March 2019)\n======================================================================\nStan now comes with GPU support for certain functions; see the Math library\nrelease notes for more details: https://github.com/stan-dev/math/releases/tag/v2.19.0\nThe manual is now online in HTML format! \n\nNew Features\n--------------------------------------------------\n* #2618 - Add a new Variational Inference diagnostic \n* #2627 - 1d integrator\n* #2725 - standalone generated quantities\n* #2717, #2669 - offset/multiplier transformations for easier non-centering, etc\n* #2652 - Allow CSV reader to read max_depth from CmdStan CSV file\n* #2620 - expose beta_proportion distribution, cdf, rng functions\n* #2635 - allow paths to be passed to stanc\n* #2441 - Add specialized functions for GLMs\n* #2358 - enchanced include syntax\n* #2575 - Analysis API for computing effective sample size\n* #2467 - expose bernoulli logit rng\n\nBug Fixes\n--------------------------------------------------\n* #2730 - make read_stan_csv more robust; affects CmdStan.\n* #2714 - fix bug in generated code for strange constraint expressions\n* #2704 - fix json nan and inf handling\n* #2677 - fix copying for compound assignments\n* #2672 - fix sampling from multivariate normal specified by precision matrix\n* #2643 - fix segfault in optimizing an exponential model\n* #2636 - fix return of generated quantities when client only asked for params\n* #2614 - fix \"unknown variable\" messages for function calls on LHS\n* #2609 - use the word \"info\" instead of \"warning\" for many messages\n\nv.2.18.1 (24 December 2018)\n======================================================================\nBugfix release - major bug in threading where certain thread count and\njob size combinations could result in incorrect output. See\nhttps://discourse.mc-stan.org/t/bug-in-map-rect-with-threading-in-stan-2-18-0/7056\nfor more details.\n\nBug Fixes\n--------------------------------------------------\n* Fix threading batch size bug (stan-dev/math#1075)\n\nv2.18.0 (13 July 2018)\n======================================================================\nThis is our first release with parallelism (threading and MPI)!\n\nNew Features\n--------------------------------------------------\n* New functions from Math library:\n  - map_rect\n  - multi_normal_rng\n  - multi_normal_cholesky_rng\n  - multi_student_t_rng\n  - many vectorized RNGs\n    - multi_normal_rng\n    - multi_normal_cholesky_rng\n    - multi_student_t_rng\n    - bernoulli_rng\n    - beta_binomial_rng\n    - binomial_rng\n    - neg_binomial_2_rng\n    - neg_binomial_2_log_rng\n    - neg_binomial_rng\n    - poisson_rng\n    - poisson_log_rng\n    - uniform_rng\n    - von_mises_rng\n  - qr_thin_Q\n  - qr_thin_R\n  - matrix_exp_multiply\n  - scale_matrix_exp_multiply\n  - integrate_ode_adams\n  - log_mix\n  - std_normal\n  - ordered_logistic_log\n  - ordered_probit_log\n\n* Manual now available in HTML (#2558)\n* other vectorized RNGs (#2467)\n* Easier-to-use algebra_solver\n* Changes to effective sample size calculation (#2451)\n* Foreach loops (#2438)\n* Standalone generated quantities (#2434)\n* Allow users to qualify function parameters as data (#2430)\n\nBug Fixes\n--------------------------------------------------\n* Better error messages (#2508, #2554)\n* Fixes the behavior in mcmc_writer so that when there's an exception thrown in the model's generated quantities block, it writes out the parameter values and NaN for any generated quantity (#2571)\n* Allow initialization of a Stan program to continue when there's a violation of constraints in transformed parameters (#2570)\n* Fixed `+=` #(2482)\n* rising_factorial and falling_factorial type checking (#2413)\n* have parser check return type of integrate_ode_bdf functional (#2411)\n* increase precision in output of ELBO values (#2406)\n* ternary op fixes (#2101)\n\n\nv2.17.1 (11 December 2017)\n======================================================================\nThis is a bugfix release fixing a performance regression in the math repo. See\nhttps://github.com/stan-dev/math/issues/667 for more details.\n\nv2.17.0 (05 September 2017)\n======================================================================\n\nBug Fixes\n--------------------------------------------------\n* Call the correct unconstrain function for covariance matrices from writer\n  method (#2386)\n* Better error messages (#2280, #2359)\n* Deal better with 0-length simplexes (#2365)\n* undefined behavior with uninitialized bool (#2344)\n\nNew User-Facing Features\n--------------------------------------------------\n* append_array function (#481)\n* \"data\" type prefix qualifier for function arguments (#2369, #2376)\n* new algebraic solver (#2380, #2300, #2339)\n* standalone functions (#2310)\n\nNew Internal Features\n--------------------------------------------------\n* C++11 support (#2364)\n* Boost 1.64.0\n* Inline many functions to allow use in multiple translation units (#2082)\n\nDocumentation\n--------------------------------------------------\n* Updates to the Gaussian Processes chapter in the manual (#2372)\n\n\nv2.16.0 (15 June 2017)\n======================================================================\n\nBug Fixes\n--------------------------------------------------\n* Fix typo in cumulative_sum definition (#2288)\n* Check input/output streams and give better errors when files are not found (#2227)\n* Flush print outputs even in the face of a reject (#2311)\n\nNew User-Facing Features\n--------------------------------------------------\n* New categorical_logit_rng function (#517)\n* New include mechanism for including stan code from other files (#2224)\n* New mechanism for compiling standalone Stan functions (#2267)\n\nNew Internal Features\n--------------------------------------------------\n* New logging framework (#512)\n* Resolve hessian() to call O(N) reverse-mode version (#2321)\n* Change model to take in int seed for RNG instead of full RNG object (#2241)\n\nDocumentation\n--------------------------------------------------\n* Updates to the Gaussian Processes chapter in the manual (#2240)\n* User manual updates for this release (#2265)\n\n\nv2.15.0 (14 April 2017)\n======================================================================\n\nNew Team Members\n--------------------------------------------------\n* Sean Talts (Columbia University) -- Stan and Math libraries\n* Imad Ali (Columbia University) -- Bayesian Statistician\n\nBug Fixes\n--------------------------------------------------\n* Added runtime checks for container variable dimensions (#1194)\n* Fixed compiler errors for certain variants of nuts_classic (#2268)\n* Fixed compound declaration definition in local blocks (#2145)\n\nNew User-Facing Features\n--------------------------------------------------\n* Row-vector and matrix expressions (#1489)\n* Better warning message for windowed adaptation (#2064)\n* Stan language - model block is optional in a Stan program (#1427)\n\nNew Internal Features\n--------------------------------------------------\n* Code cleanup for parser grammars (#2223)\n* Exposed new function signatures for to_matrix (#1452)\n* Remove initial state from the calculation of the average Metropolis acceptance probability (#2182)\n* Refactor stan/lang/generator.hpp (#2204)\n* Add informational message to `std::domain_error` exception (#2203)\n* Tweaked windowed adaptation warning to be more readable (#2064)\n\nDocumentation\n--------------------------------------------------\n* User manual updates for this release (#2122)\n\nv2.14.0 (26 December 2016)\n======================================================================\n\nBug Fixes\n--------------------------------------------------\n* NUTS sampler broken (#2179)\n* seralization issues with RStan v2.13.1 (#2179)\n* printing result of a void function parses, but doesnt' compile (#2168)\n* compound declare/define not working for all types (#2163)\n\nOther\n--------------------------------------------------\n* Update Stan Math Library to v2.14.0\n* make use of const references consistent (#2186)\n\n\nv2.13.1 (3 December 2016)\n======================================================================\n\nBug Fixes\n--------------------------------------------------\n* fixed compound declare and define (#2156, #2153, #2146)\n\n\nv2.13.0 (25 November 2016)\n======================================================================\n\nNew Team Members\n--------------------------------------------------\n* Thel Seraphim (Columbia University) -- Stan and Math libraries\n* Vincent Picaud (CEA, France) -- MathematicaStan\n\nBug Fixes\n--------------------------------------------------\n* generated code for lower truncation fixed for discrete variables (#2054)\n* typo in error messages for RNGs only allowed in transformed data\n  block (#2124)\n* variables ending in _lpdf are now allowed (#2123)\n* cov_exp_quad() not compiling in C++ (#2113)\n* conditional operator in functions not compiling in C++ (#2101)\n* off-by-one error in error message for integrate_ode_bdf() fixed (#2073)\n\nNew User-Facing Features\n--------------------------------------------------\n* vectorization of unary functions (#2119, #2037)\n* bernoulli_logit_rng() added to language (#2084)\n* Jacobian warning now suggests `target +=` (#2066)\n* matrix_exp() function now available (#2043)\n* compound declaration / definition statements (#1951)\n\nNew Internal Features\n--------------------------------------------------\n* user-defined functions can be declared and not defined (#2068)\n\nDocumentation\n--------------------------------------------------\n* manaul reorganization (#1599)\n* line too long (#2121)\n* added integer % operator documentation (#2065)\n* lots more (#2051)\n\n\nv2.12.0 (6 September 2016)\n======================================================================\n\nNew Team Members\n--------------------------------------------------\n* Charles Margossian (Metrum Research Group, LLC) -- diff eq models\n\nKnown, outstanding bugs\n--------------------------------------------------\n* Normalization for lower truncated discrete distributions is off\n  by one (#2054)\n\nBug Fixes\n--------------------------------------------------\n* updated the math library to deal with g++6 errors\n  (math#348, math#345, math#327)\n* fixed issue with 1:0 indexing in array slicing producing\n  huge size (#1960)\n* allow variables to be named the same as unary functions\n  (#1459)\n* distributions without cumulative distribution functions are now\n  prevented from being used in truncation (#2052)\n* allow user-defined lpdf functions to be used in `target += `\n  expressions (#1944)\n* fixed duplicate function warning message (#1946)\n* fixed ternary operator generating C++ code that doesn't compile\n  (#2044)\n\n\nNew User-Facing Features\n--------------------------------------------------\n* added mdivide_left_spd() and mdivide_right_spd() to the language\n  (#2016)\n* added cov_exp_quad() to the language (#1957)\n* added break and continue statements to the language (#1756)\n* added append_row() and append_col() to the language (#1347)\n* updated error message for missing `|` when using probability functions\n  (#2003)\n* updated parser/warning errors for new syntax (#1940)\n\nNew Internal Features\n--------------------------------------------------\n* updated Travis CI config (#2033)\n* fixed segfault in lang test with g++-5.4 (#2030)\n* `make clean-all` cleans CVODES binaries (#2012)\n\nv2.11.0 (27 July 2016)\n======================================================================\n\nBug Fixes\n--------------------------------------------------\n* fixed sampling bug introduced in v2.10.0 (#1979)\n* fixed compilation issue under clang++3.8 for rethrow_located and\n  ios_base::failure (#1937)\n* print() now prints when there is a rejection/exception in the model\n  block (#1936)\n* integer division by zero throws exception (#1974, math#321)\n\n\nv2.10.0 (15 June 2016)\n======================================================================\n\nNew Team Members\n--------------------------------------------------\n* Aki Vehtari (Aalto Uni) --- GPs, LOO, statistical modeling,\n  MATLAB\n* Rayleigh Lei (U. Michigan) --- vectorizing functions\n* Sebastian Weber (Novartis) --- diff eq models\n\nNew User-Facing Features\n--------------------------------------------------\n* introduction of = for assignment; deprecating <- (#1819)\n* _lpdf, _lpmf, _lcdf, _lccdf and vertical bar notation\n  for probability mass, density, and cumulative distribution\n  functions; update user-defined function syntax;\n  deprecate older forms (#1811)\n* target += lp to replace increment_log_prob(lp); target() to rpelace\n  log_prob() function;  remove lp__ variable access (#1800)\n* conditional (ternary) operator (#1125)\n* stiff diff eq solver CVODES from Sundials\n* add control parameters (tolerance, max iteraitons) to ODE solvers\n* rename ODE solvers based on algorithm, integrate_ode_rk45\n  for existing non-stiff Runge-Kutta solver and integrate_ode_bdf\n  for the stiff backward differentiation form;  deprecate\n  the unmarked integrate_ode function (#1886)\n* limiting diff eq iterations in solvers (Boost/CVODES)\n* unit_vector as parameter (#1713) [it never worked in the past]\n* rename multiply_log and log_binomial_coefficient\n  to lmultiply and lchoose (also part of #1811)\n* incomplete beta function as inc_beta (#1540)\n\nNew Internal Features\n--------------------------------------------------\n* exhaustive HMC (XHMC)\n* multinomial variant of NUTS (#1846)\n* simplified NUTS criterion (#1852)\n* uniform static HMC (#1849)\n* Riemannian HMC with SoftAbs (#304)\n* refactor semantic actions to header/implementation (#1795)\n* writer callback interface for algorithms (#1739)\n* error writer callbacks (#1836)\n* cleaner HMC diagnostic ouptut (#1790)\n* pull-request template on GitHub (#1794)\n* remove unused filename argument in parser (#1752)\n* remove unused lp_no_jacobian function (now controlled with\n  template params)\n* writer callback interface for HMC (#1680)\n\nBug Fixes\n--------------------------------------------------\n* index slicing not compiling for matrices (#1754, #1810)\n* parsing too eager for reserved words (#1077)\n* CSV reader whitespace sensitivity (#1907)\n* delayed reject multinomial NUTS (#1906)\n* PYTHON2 variable for cpplint (#1912)\n* size zero vectors, row vectors, matrices (#1909)\n* overflowing transition probs in multinomial NUTS (#1904)\n* all the manual bug fixes (#1431, #1709, #1734, #1753,\n  #1826, #1874, #1879, #1890)\n* compiler fix for vector /. real to compile (#1883)\n* terminate infinite loops in optimization (#1896)\n* ADVI argument config failure (#1731)\n* double struct creation removed for forward-declaration\n  of user-defined functions bug (#1079)\n* clarify deprecation of <- is only in Stan, not R (#1819)\n* memory leaking with command getting in way of debug (#1293)\n* makefile dependencies for stanc (#1682)\n* remove NaN init for integers in place of min (negative)\n  value (#1766)\n* namespace pollution from log_mix removed (#1707)\n* message buffering reduced in ADVI\n* add pstream to user-defined CDFs supporting truncation (#1628)\n* initialization failure message clarification (#1736)\n\nv2.9.0 (3 Dec 2015)\n======================================================================\nNew Team Members\n--------------------------------------------------\n* Krzysztof Sakrejda, adding functions in Stan Math and Stan\n\nNew Features\n--------------------------------------------------\n* General R-like indexing for arrays and vectors! (#1057)\n* Automatic differentation paper: http://arxiv.org/abs/1509.07164\n* Changed unit_vector transformation (#1720)\n* Automatically detect bitness for Windows 32-bit (#1614)\n* Better adaptation for ADVI (#1550, #1559, #1587, #1591, #1593, #1710)\n\nBug Fixes\n--------------------------------------------------\n* Allows unit_vector to be used in parameters block (#1720)\n* Fixed NaN bug in ADVI (#1610)\n\nMaintenance\n--------------------------------------------------\n* Reduced Cpplint warnings to 0! (#1651, #1656, #1701)\n* Better ADVI output (#1588)\n* Updated logo for doxygen (#1631)\n* Refactoring the use of output streams (#1602, 1653, #1662,\n  #1670, #1676, #1696, #1601)\n* Moved src/stan/services files and namespaces (#1616)\n* Updated clang++ compiler options for Mac OS X (#1668)\n* Additional testing on Travis CI (#1708)\n* Removed unused python script (#1611)\n* Updated makefile (#1618, #1655, #1659)\n\nManual\n--------------------------------------------------\n* Improved Wiener distribution documentation (#1576)\n* Corrected bugs and typos (#1617)\n* Thanks to Julain King, Ashley Ford, Evelyn Mitchell,\n  José Rojas Echenique, Miguel de Val-Borro, Bruno Jacobs,\n  Ryan Batt, David Manheim\n\n\nv2.8.0 (8 Sep 2015)\n======================================================================\nNew Team Members\n--------------------------------------------------\n* Dustin Tran, helps make variational inference a reality\n\nNew Features\n--------------------------------------------------\n* Inverse CDF for normal distribution (#1157)\n* Compiler error messages are friendlier\n  - operator[] (#1517)\n  - assignment (#1543, stan-dev/math#146)\n* Sparse matrix by dense vector multiplication (#1565)\n\nBug Fixes\n--------------------------------------------------\n* Disallow user-defiend function overloading (#1547)\n* Better behaved beta cdf (#1561, stan-dev/math#124)\n\nManual\n--------------------------------------------------\n* Corrected all known bug reports and typos; details in\n  issues #1526, #1548, #1577\n* Thanks to @jonathan-g (Github handle), Damjan Vukcevic,\n  Daniel Chen, Guido Biele, Takahiro Kubo, Andy Choi\n\n\nv2.7.0 (9 July 2015)\n======================================================================\n\nNew Team Members\n--------------------------------------------------\n* Alp Kucukelbir, who brings you variational inference\n* Robert L. Grant, who brings you the StataStan interface\n\nMajor New Feature\n--------------------------------------------------\n* Black-box variational inference, mean field and full\n  rank (#1505)\n\nNew Features\n--------------------------------------------------\n* Line numbers reported for runtime errors (#1195)\n* Wiener first passage time density (#765) (thanks to\n  Michael Schvartsman)\n* Partial initialization (#1069)\n* NegBinomial2 RNG (#1471) and PoissonLog RNG (#1458) and extended\n  range for Dirichlet RNG (#1474) and fixed Poisson RNG for older\n  Mac compilers (#1472)\n* Error messages now use operator notation (#1401)\n* More specific error messages for illegal assignments (#1100)\n* More specific error messages for illegal sampling statement\n  signatures (#1425)\n* Extended range on ibeta derivatives with wide impact on CDFs (#1426)\n* Display initialization error messages (#1403)\n* Works with Intel compilers and GCC 4.4 (#1506, #1514, #1519)\n\nBug Fixes\n--------------------------------------------------\n* Allow functions ending in _lp to call functions ending in _lp (#1500)\n* Update warnings to catch uses of illegal sampling functions like\n  CDFs and updated declared signatures (#1152)\n* Disallow constraints on local variables (#1295)\n* Allow min() and max() in variable declaration bounds and remove\n  unnecessary use of math.h and top-level :: namespace (#1436)\n* Updated exponential lower bound check (#1179)\n* Extended sum to work with zero size arrays (#1443)\n* Positive definiteness checks fixed (were > 1e-8, now > 0) (#1386)\n\nCode Reorganization and Back End Upgrades\n--------------------------------------------------\n* New static constants (#469, #765)\n* Added major/minor/patch versions as properties (#1383)\n* Pulled all math-like functionality into stan::math namespace\n* Pulled the Stan Math Library out into its own repository (#1520)\n* Included in Stan C++ repository as submodule\n* Removed final usage of std::cout and std::cerr (#699) and\n  updated tests for null streams (#1239)\n* Removed over 1000 CppLint warnings\n* Remove model write CSV methods (#445)\n* Reduced generality of operators in fvar (#1198)\n* Removed folder-level includes due to order issues (part of Math\n  reorg) and include math.hpp include (#1438)\n* Updated to Boost 1.58 (#1457)\n* Travis continuous integration for Linux (#607)\n* Add grad() method to math::var for autodiff to encapsulate math::vari\n* Added finite diff functionals for testing (#1271)\n* More configurable distribution unit tests (#1268)\n* Clean up directory-level includes (#1511)\n* Removed all lint from new math lib and add cpplint to build lib\n  (#1412)\n* Split out derivative functionals (#1389)\n\n\nManual and Dcoumentation\n--------------------------------------------------\n* New Logo in Manual; remove old logos (#1023)\n* Corrected all known bug reports and typos; details in\n  issues #1420, #1508, #1496\n* Thanks to Sunil Nandihalli, Andy Choi, Sebastian Weber,\n  Heraa Hu, @jonathan-g (GitHub handle), M. B. Joseph, Damjan\n  Vukcevic, @tosh1ki (GitHub handle), Juan S. Casallas\n* Fix some parsing issues for index (#1498)\n* Added chapter on variational inference\n* Added strangely unrelated regressions and multivariate probit\n  examples\n* Discussion from Ben Goodrich about reject() and sampling\n* Start to reorganize code with fast examples first, then\n  explanations\n* Added CONTRIBUTING.md file (#1408)\n\n\n\nv2.6.3 (17 March 2015)\n======================================================================\n\nBug Fixes\n----------------------------------------\n* removed extra semicolons in code; they are techinically a C++11\n  extension [#1379]\n* removed use of variable length array; this is a C99 feature\n  [#1381]\n\nFeatures\n----------------------------------------\n* error messages in initialization during sampling get printed out\n  to the message stream [#1326]\n\nTest Enhancements\n----------------------------------------\n* added tests for is_vector_like [#1360]\n\n\nv2.6.2 (14 March 2015)\n======================================================================\n\nBug Fixes\n----------------------------------------\n* fixed append_row and append_col to return the corect types [#1297]\n* documentation fix: fixed generation of stan-functions.txt [#1327]\n* changed constructor of stan::agrad::var so it can compile without\n  C++11 [#1337, 1364]\n* fixed bug in matrix double-indexing [#1342]\n* fixed calculation of derivative in normal_cdf_log, normal_ccdf_log\n  [#1357]\n\nAPI Enhancements\n----------------------------------------\n* refactored math / autodiff library [#1222, #1349, #1353]\n* fixed capitalization in tests [#1355]\n* updated Eigen to 3.2.4 [#1173]\n\n\n\nv2.6.1 (3 March 2015)\n======================================================================\n\nLanguage Enhancements\n----------------------------------------\n* improved warning messages from the parser [#1244]\n\nAPI/Build/Test Enhancements\n----------------------------------------\n* the C++ API now throws 3 types of exceptions [#685]\n* parts of the C++ API were rearranged (gm, common) [#942]\n* replace promote_args\n* allow reading from a local makefile outside of the code repository [#1277]\n* added gradient of hessian functional in C++ [#1272]\n* supressed printing of adjoints when printing stan::agrad::var [#330]\n* removed some cpplint warnings [#1282]\n* removed doxygen warnings [#1290]\n* reimplemented fmix and fmax [#1311]\n\nBug Fixes\n----------------------------------------\n* allow nested indexes to compile with integrate_ode [#1317]\n\nDocumentation\n----------------------------------------\n* fixed typos in MCMC sampling\n\n\n\nv2.6.0 (5 February 2015)\n======================================================================\n\nNew Features\n----------------------------------------\n* log_mix function for binary mixtures [half of #970]\n* neg_binomial_2 CDF function [#1129]\n\nLanguage Enhancements\n----------------------------------------\n* allow local-variable integers to be treated as constants,\n  allowing, among other things, more general ODE functions [#1131]\n* initialize transformed data and generated quantities the\n  same way as transformed parameters [#1099]\n* libstan.a removed and model compilation is 100% header-only [#1095]\n* check for infinite/nan inits from boundary initializations\n  with warning [#537]\n\nAPI/Build/Test Enhancements\n----------------------------------------\n* removed extra variables being generated by validation [#1248]\n* generalize OperandsAndPartials to second order [#676]\n* rationalize error handling, using const char* args for efficiency [#1234]\n* upgrade to Boost version 1.55 library [#1206]\n* generate .hpp instead of .cpp for models [#803]\n* value_of_rec recursive metaprogram to pull values out of higher-order\n  autodiff structures; removes order dependency on fwd/rev includes\n  [#1232]\n* tests now run more efficiently with Python script [#1110]\n* add performance tests to continuous integration to perform\n  end-to-end regression testing on speed [#708, #1245]\n* manual index parser for tool automation in interfaces (such as\n  auto-complete suggestions) and emacs mode\n* refactor log determinant and fix return type cast in vector arena\n  alloc  [#1187]\n* update makefile dependencies for auto-generated cpp test files [#1108]\n* move test models into clearly labeled directories (good/bad) [#1016]\n* removing policies from math error checking [#1122]\n* remove usage of Boost's formatting (which can cause runtime\n  errors like printf) [#1103]\n* rearrange directory structure of err_handling [#1102]\n* clean up math includes to proper location in source tree [#778]\n* remove Windows newline and write script to catch in future [#1233]\n* remove extra copy of Eigen (3.2.0), leaving just Eigen 3.2.2 [#1206]\n* remove example-models dependency from Git [#1105]\n\n\nBug Fixes\n----------------------------------------\n* allow identifiers with prefixes matching keywords [#1177]\n* allow functions to be used in variable declaration constriants [#1151]\n* fix segfault resulting from multivariate normal in optimizer (root\n  cause wasn't in optimizer, but in autodiff nesting cleanup) [#1200]\n* fixed return type in language and C++ for append_row of two\n  column vectors and append_col of two row vectors [#1241]\n* fixed derivative error for pareto_type_2_log() [#1223]\n* remove unused models from stan distribution (they're now in\n  the stan-dev/example-models repo on GitHub) [#1249]\n* squash compiler warnings and fix windows tests (mostly\n  signed vs. unsigned, as usual) [#1257]\n* fix memory leak in ODE solver [#1160]\n* fix overflow in gamma_p function to throw instead [#674]\n* make sure multiply_lower_tri_self_transpose returns a symmetric\n  matrix [#1121]\n* fix overflow in Poisson RNG to throw instead [#1053]\n\n\nDocumentation\n----------------------------------------\n* manual updated for 2.6 [#1081]\n  - new chapter on software process (thanks to Sebastian Weber\n    and Tony Rossini for help)\n  - new chapter on sparse and ragged arrays\n  - pointers to Julia and MATLAB interfaces (yay!)\n  - vectorization of CDFs described\n  - fix priors on IRT models\n  - added discussion of multiple change points\n  - remove range-contstrained scale priors\n  - clarified fixed parameter call\n  - remove references to \"std::vector\" in favor of \"array\"\n  - corrected signs for lasso and ridge and discuss truncated gradient\n    and absolute zero results\n  - extended discussion of Gaussian process priors (thanks\n    to Aki Vehtari, Jon Zelner, and Herra Huu)\n  - remove bogus paths to models and replace with pointers to\n    example-models repo\n  - clarified Wishart/inverse Wishart parameterizations w.r.t. BDA3\n  - fixed exp_mod_normal definition\n  - fix student-t reparameterization\n  - fix hurdle distribution definition\n\nThanks!\n----------------------------------------\nThanks to all the users who contributed code and doc corrections\nand comments: Alex Zvoleff, Juan Sebastián Casallas, Gökçen\nEraslan, seldomworks [GitHub handle], Avraham Adler, Sebastian\nWeber, Amos Waterland, David Hallvig, Howard Zail, Andre Pfeuffer,\nBobby Jacob, Cody Ross, Krzysztof Sakrejda, Andrew Ellis, John Sutton\n\n\nv2.5.0 (20 October 2014)\n======================================================================\n\nNew Features\n----------------------------------------\n* ordinary differential equation solver, implemented by coupling\n  the user-specified system with its sensitivities (#771)\n* add reject() statement for user-defined rejections/exceptions (#458)\n* new num_elements() functions that applies to all containers (#1026)\n* added is_nan() and is_inf() function (#592)\n* nested reverse-mode autodiff, primarily for ode solver (#1031)\n* added get_lp() function to remove any need for bar lp__  (#470)\n* new functions append_col() and append_row() like cbind and rbind\n  in R (#787)\n* added modulus function in a way tht is consistent with integer\n  division across platforms (#577)\n* exposed pareto_type_2_rng (#580)\n* added Frechet distribution and multi_gp_cholesky distribution\n  (thanks to Alexey Stukalov for both)\n\nEnhancements\n----------------------------------------\n* removed Eigen code insertion for numeric traits and replaced\n  with order-independent metaprogram (#1065)\n* cleaned up error messages to provide clearer error context\n  and more informative messages (#640)\n* extensive tests for higher order autodiff in densities (#823)\n* added context factory\n* deprecated lkj_cov density (#865)\n* trying again with informational/rejection message (#223)\n* more code moved from interfaces into Stan common libraries,\n  including a var_context factory for configuration\n* moved example models to own repo (stan-dev/example-models) and\n  included as submodule for stan-dev/stan (#314)\n* added per-iteration interrupt handler to BFGS optimizer (#768)\n* worked around unused function warnings from gcc (#796)\n* fixed error messages in vector to array conversion (#579, thanks\n  Kevin S. Van Horn)\n* fixed gp-fit.stan example to be as efficient as manual\n  version (#782)\n* update to Eigen version 3.2.2 (#1087)\n\nBuilds\n----------------------------------------\n* pull out testing into Python script for developers to simplify\n  makes\n* libstan dependencies handled properly and regenerate\n  dependencies, including working around bug in GNU\n  make 3.8.1 (#1058, #1061, #1062)\n\nBug Fixes\n----------------------------------------\n* deal with covariant return structure in functions (allows\n  data-only variables to alternate with parameter version);  involved\n  adding new traits metaprograms promote_scalar and\n  promote_scalar_type (#849)\n* fixed error message on check_nonzero_size (#1066)\n* fix arg config printing after random seed generation (#1049)\n* logical conjunction and disjunction operators short circuit (#593)\n* clean up parser bug preventing variables starting with reserved\n  names (#866)\n* fma() function calls underlying platform fma (#667)\n* remove upper bound on number of function arguments (#867)\n* cleaned up code to remove compiler warnings (#1034)\n* share likely() and unlikely() macros to avoid redundancy warnings (#1002)\n* complete review of function library for NaN behavior and consistency\n  of calls for double and autodiff values, with extensive\n  documentation and extensive new unit tests for this and other,\n  ehances NaN testing in built-in test functions (several dozen issues\n  in the #800 to #902 range)\n* fixing Eigen assert bugs with NO_DEBUG in tests (#904)\n* fix to makefile to allow builds in g++ 4.4 (thanks to Ewan Dunbar)\n* fix precedence of exponentiation in language (#835)\n* allow size zero inputs in data and initialization (#683)\n\nDocumentation\n----------------------------------------\n* new chapter on differential equation solver\n* new sections on default priors for regression coefficients and\n  scales, including hierarchical and multivariate based on\n  full Cholesky parameterization\n* new part on algorithms, which chapters on HMC/NUTS, optimization,\nand diagnostics\n* new chapter on models with latent discrete parameters\n* using latexmk through make for LaTeX compilation\n* changed page numbers to beg contiguous throughout so page numbers\n  match PDF viewer page number\n* all user-supplied corrections applied from next-manual issue\n* section on identifiability with priors, including discussion of K-1\n  parameterization of softmax and IRT\n* new section on convergence monitoring\n* extensive corrections from Andrew Gelman on regression models\n  and notation\n* added discussion of hurdle model in zero inflation section\n* update built-in function doc to clarify several behaviors (#1025)\n\n\nv2.4.0 (20 July 2014)\n======================================================================\n\nNew Features\n------------\n* L-BFGS optimization (now the default)\n* completed higher-order autodiff (added all probability functions,\n  matrix functions, and matrix operators);  tested up to 3rd order\n* enhanced effective range of normal_cdf to prevent underflow/overflow\n* added von Mises RNG\n* added ability to use scalars in all element-wise operations\n* allow matrix division for mixing scalars and matrices\n* vectorization of outcome variates in multivariate normal with efficiency boosts\n* generalization of multivariate normal to allow rwo vectors as means\n  and\n\nReorganization\n--------------\n* move bin/print and bin/stanc to CmdStan;  no longer generating main\n  when compiling model from Stan C++\n\nNew Developer\n-------------\n* Added Jeffrey Arnold as core Stan developer\n\nBug Fixes\n---------\n* modified error messages so that they're all 1-indexed instead of 0-indexed\n* fixed double print out of times in commands\n* const added to iterators to allow VS2008 compiles\n* fix boundary conditions on ordered tests\n* fix for pow as ^ syntax to catch illegal use of vectors (which\n  aren't supported)\n* allow zero-length inputs to multi_normal and multi_student_t\n  with appropriate log prob (i.e., 0)\n* fixed bug in inverse-Wishart RNG to match MCMCPack results\n  with slightly asymmetric inputs\n* fixed problem with compiling user-defined function twice\n* fixed problem with int-only parameters for user-defined functions\n* fixed NaN init problems for user-defined functions\n* added check that user variable doesn't conflict with user function + doc\n* disallow void argument types in user-defined functions\n\nCode Cleanup and Efficiency Improvements\n----------------------------------------\n* removed main() from models generated from C++ Stan (they are\n  now available only in CmdStan); removed no_main command options\n* reserve vector sizes for saving for sample recorder\n* removing many instances of std::cout from API (more still to go)\n* removed non-functional Nesterov optimization option\n* optimization code refactoring for testing ease\n* better constant handling in von Mises distribution\n* removed tabs from all source files\n* massive re-org of testing to remove redundant files and allow\n  traits-based specializations, plus fixed for 1-indexing\n\nTesting\n-------\n* added tests for log_softmax, multiply_lower_tri_self_transpose, tcrossprod\n* break out function signature tests into individual files, add many\n  more\n* enhanced cholesky factor tests for round trip transforms and\n  derivatives\n* extensive unit testing added for optimization\n* remove use of std::cout in all tests\n\nExample Models\n--------------\n* lots of cleanup in links and models in ARM examples\n* added BUGS litter example with more stable priors than in the\n  BUGS version (the original model doesn't fit well in BUGS as is,\n  either)\n\nDocumentation\n-------------\n* add infix operators to manual\n* categorical_logit sampling statement\n* Cholesky factor with unit diagonal transform example\n* example of using linear regression for prediction/forecasting with\n  notes\n* clarified some relations of naive Bayes to clustering\n  vs. classification and relation to non-identifiability\n* new advice on multivariate priors for quad_form_diag\n* fix typo in multiply_lower_self_transpose (thanks to Alexey Stukalov)\n* fix formatting of reserved names in manual\n* fixed typo and clarified effective sample size doc\n\n\nv2.3.0 (18 June 2014)\n======================================================================\n\nWe had a record number of user-submitted patches this go around.\nThanks to everyone!\n\nNew Features\n------------\n* user-defined function definitions added to Stan language\n* a^b syntax for pow(a,b)  (thanks to Mitzi Morris)\n* reshaping functions: to_matrix(), to_vector(), to_row_vector(),\n  to_array_1d(), to_array_2d()\n* matrix operations: quad_form_sym() (x' *Sigma * x), QR decompositions\n  qr_Q(), qr_R()\n* densities: Gaussian processes multi_gp_log(), multi_gp(),\n  and alternative negative binomial parameterization neg_binomial_2()\n* random number generator: multi_normal_cholesky_rng()\n* sorting: sort_indices_*() for returning indexes in sorted order by\n  value\n* added JSON parser to C++ (not exposed through interfaces yet; thanks\n  to Mitzi Morris)\n* many fixes to I/O for data and inits to check consistency and\n  report errors\n* removed some uses of std::cout where they don't belong\n* updated parser for C++11 compatibility (thanks to Rob Goedman)\n\nNew Developer\n--------------\n* added Marco Inacio as core developer\n\nOptimizations\n-------------\n* turned off Eigen asserts\n* efficiency improvements to posterior analysis print\n\nDocumentation\n-------------\n* Clarified licensing policy for individual code contributions\n* Huge numbers of fixes to the documentation, including many\n  user-contributed patches (thanks!), fixes to parallelization in\n  CmdStan, Windows install instructions, boundaries for Dirichlet and\n  Beta, removed suggestion to use floor and ceiling as indices,\n  vectorized many models, clarified that && doesn't short circuit,\n  clarified von Mises normalization, updated censoring doc (thanks\n  to Alexey Stukalov), negative binomial doc enhanced, new references,\n  new discussion of hierarchical models referencing Betancourt and\n  Girolami paper,\n* Avraham Adler was particularly useful in pointing out and fixing\n  documentation errors\n\nBug Fixes\n------------\n* fixed bug in lkj density\n* fixed bug in Jacobian for corr_matrix data type\n* fix cholesky_cov_matrix test code to allow use as parameter\n* fixed poisson_rng, neg_binomial_rng\n* allow binary operations (e.g., < and >) within range constraints\n* support MS Visual Studio 2008\n* fixed memory leaks in categorical sampling statement, categorical_log\n  function, and softmax functions\n* removed many compiler warnings\n* numerous bug fixes to arithmetic test code conditions and messages,\n  including calls from\n* fixed model crashes when no parameter specified\n* fixed template name conflicts for some compiler bugs (thanks Kevin\n  S. Van Horn)\n\nCode Reorganizations & Updates\n------------------------------\n* CmdStan is now in its own repository on GitHub: stan-dev/cmdstan\n* consolidate and simplify error handling across modules\n* pulled functionality from CmdStan command class and PyStan and RStan\n  into Stan C++\n* generalized some interfaces to allow std::vector as well as Eigen\n  for compatibility\n* generalize some I/O CSV writer capabilities\n* optimization output text cleaned up\n* integer overflow during I/O now raises informative error messages\n* const correctness for chains (thanks Kevin S. Van Horn)\n\n\nv2.2.0 (14 February 2014)\n======================================================================\nBug Fixes\n-------------\n* increment_log_prob is now vectorized and compiles with vector arguments\n* multinomial random number generator used the wrong size for the return value\n* fixed memory leaks in auto-diff implementation\n* variables can start with the prefix 'inf'\n* fixed parameter output order for arrays when using optimization\n\nFeatures\n-------------\n* suppress command line output with refresh <= 0\n* added 1 to treedepth to match usual definition of treedepth\n* added distance, squared_distance, diag_pre_multiply, diag_pre_multiply to Stan modeling lnaguage\n* added a 'fixed_param' sampler for use with the generated quantities block\n\n\n\n\nv2.0.1 (24 October 2013)\n======================================================================\n\nBug Fixes\n----------------------------------\n* fixed multi_normal distribution's gradient calculations\n* fixed diagnose mode from the command line to work for matrices\n* typos in the manual\n\n\n\nv2.0.0 (16 October 2013)\n======================================================================\n\nThis list is incomplete.  The 2.0.0 update is a huge fix, and this\nlist just represents what was clearly called out in pull requests.\n\nEnhancements\n----------------------------------\n* all new hierarchical command-line interface\n* compiler flags to build with Xcode 5 (which has too-small template-depth)\n* BFGS optimization\n* print variable name when initialization fails\n* reserved function names (breaks backward compatibility)\n* deprecate direct use of lp__ in favor of increment_log_prob()\n* unfolded softmax for more efficiency, optimized and vectorized categorical\n* new Cholesky factor data type\n* upgraded to Boost 1.54 and Eigen 3.2.0\n* added flag to suppress Jacobian adjustment in log prob (for\n  optimizers)\n* added Rayleigh distribution\n* added Bessel (and modified Bessel) functions of first and second\n  kind\n* added Pochhammer functions (rising/falling factorials)\n* completed vectorization of univariate distributions\n* trapped use of \".\" in variable names and print error\n* moved RStan into its own subproject\n* rewrote writer interface for samples\n* added delete method to chainables to allow exceptions in\n  constructors\n* added sort and rank functions\n* improved doc and coding for GP example models\n* shuffle function signature tests for test speed\n* new gradient functionality for memory allocation and cleaning\n  and to reduce code duplication\n\nBug Fixes\n----------------------------------\n* remove function signatures from undocumented functions\n* fixed broken abs(real) signature;  deprecated abs(real) in favor\n  of fabs(real)\n* error checking for dirichlet\n* fix bin/print to be row major\n* suppress warnings for unused variables; cleanup truly unused ones\n* fixed pow() boundary conditions with negative base, fractional\nexponent\n* fix model tests and error codes\n* fix command-line return codes to be more compliant\n* fix build parameter names to be more compliant with conventions\n* fix integer vs. real problems in some RNGs\n* fix print so that it prints expression values, not just names\n* fix Newton optimization backtrack to eventually terminate with\n  failure rather than looping infinitely\n* fix CSV output from command for matrices (was transposed)\n* fixes to allow Stan to build under Cygwin\n* fix double indexing on LHS of assignment\n* fix nested expression prints to allow indexed array sizes in\n  declarations\n* fix parameterization of gamma RNG\n* reserved model's class name as variable\n* added vector size test in assignment\n* fixed mixture examples\n* fixed rep_vector to work with integer value\n* fixed parser error message\n* fixed use of Boost NaN tests\n* initialze local variables to NaN to prevent segfaults if used\n  before defined\n* remove unused includes from model header\n* fix signed/unsigned warnings in tests and code\n* validate that init=0 is valid starting value and raise error if not\n* fix diag_pre_multiply loop bound\n\n\nDoc\n---------------------------------\n* made all user-suggested cleanups and changes to doc\n* new basic programming section\n* new chapter for new command line\n\n\n\nv1.3.0 (12 April 2013)\n======================================================================\n\nEnhancements\n----------------------------------\n\nModeling Language\n* forward sampling (random draws from distributions)\n  in generated quantities\n* added broadcast (repetition) functions for initializing\n  matrices, vectors, and arrays\n* better error messages in parser\n* additional distributions:\n    + exp_mod_normal\n    + gumbel\n    + skew_normal\n* additional functions:\n    + mdivide_right_spd\n    + mdivide_left_spd\n    + owenst\n    + columns_dot_product\n    + rows_dot_product\n* broadcast (repetition) functions for vectors, arrays, matrices\n    + rep_arrray\n    + rep_matrix\n    + rep_row_vector\n    + rep_vector\n\nCommand-Line\n* added option to display autocorrelations in the command-line program\n  to print output\n* changed default point estimation routine from the command line to\n  use Nesterov's accelerated gradient method, added option for point\n  estimation with Newton's method\n\nRStan\n* added method as.mcmc.list()\n* compatibility with R 3.0.0\n\nC++/Internal\n* refactored math/agrad libs in C++ to separate files/includes,\n  remove redundant code, more unit tests for existing code\n* added chainable_alloc class for caching solver results\n* generalized VectorView with seq_view\n* templated out generated code for efficient double-only operation\n  on model log probs w/o gradients\n\nDoc\n* additions to user's guide w. sample models\n    + stochastic volatility example with source, optimized source,\n      simulation\n    + time series, moving average, standardization for linear\n      regression, hidden Markov models, with examples\n* manual's index is now hyperlinked\n* added additional acknowledgements to manual\n* added full description of differences between sampling\n  statement and lp__\n* fixed general normal mixture model example\n\nTesting\n* split unit tests from distribution tests\n\nBug Fixes\n----------------------------------\n* fixed derivative in multi_normal_prec distribution function\n* double-based log_prob functions return the same value as var-based\n  log_prob_grad functions\n* calls to lgamma are now using boost's lgamma function\n* patched transform to work with Eigen 3.2 beta\n* all probability distribution functions and cumulative distribution\n  functions behave properly with 0 length vector arguments\n* fixed error in definition of hypergeometric pmf\n* fixed arguments to nesterov optimization ctor in command\n* fixed issue with initialization matrices being read improperly\n* Use fabs() instead of abs() in unit_vector_constrain.\n* typos in the manual\n* rstan:\n  + fixed crash in R when index is out of bounds using set_cppo(\"fast\")\n  + io_context fix skipping len=0\n  + fix the typo in manual (dims -> dim)\n  + add require(inline) to fix the problem with loading sysdata.rda\n\n\nv1.2.0 (6 March 2013)\n======================================================================\n\nEnhancements\n----------------------------------\n* full mass matrix estimation during warmup\n* expose model log_prob and gradient functions in RStan for use\n  in other packages (such as optimizers)\n* command-line program to display output from multiple chains\n  with parameter-by-parameter mean, se, sd, quantiles, and R-hat\n* probability function speed improvements with vectorization\n* created Stan contributed repositories for user-contributed\n  and experimental features (first entry is an emacs mode)\n* modified makefiles so targets are the same under Windows,\n  Linux, and Mac\n\nNew Functions\n----------------------------------\n* most of the cumulative distribution functions (see the documentation\n  index for the full list of supported functions)\n* added monitor() function in RStan\n\nBug Fixes\n----------------------------------\n* disabled Boost asserts in parser to quiet R's warnings\n* enabled prints in generated quantities block\n* various documentation patches\n* fixed memory leak in matrix operations leading to leaks in\n  multivariate probability function use\n* wrapped call to gradient log prob to catch unexpected exceptions\n* fixed matrix resize issue on Windows that caused models to fail\n  at optimization levels above 0\n* fixed bug in print preventing hyphens or grave accents from\n  priting\n* fixed issue preventing matrix rows from being assigned on the\n  left side of an assignment statement\n* clearer error messages on matrix and other function arguments\n\n\nv1.1.1 (5 February 2013)\n======================================================================\n\nBug Fixes\n----------------------------------\n* fixed bug in comparison operators, which swapped operator< with\n  operator<= and swapped operator> with operator>= semantics\n* auto-initialize all variables to prevent segfaults\n* atan2 gradient propagation fixed\n* fixed off-by-one in NUTS treedepth bound so NUTS goes\n  at most to specified tree depth rather than specified depth + 1\n* various compiler compatibility and minor consistency issues\n* fixed bug in metaprogram preventing lower/upper bound constraints\n  on matrices\n* fixed print error for number of kept samples\n* fixed floating point literal precision issue in code generation\n* fixed bug in bernoulli_log for boundary chance of success\n  theta=0 or theta=1\n* many doc patches (mostly due to user comments -- thanks!)\n* replace boost sign() to avoid compiler conflicts\n* trapping mismatched dimension assignments in arrays,\n  matrices, and vectors\n\nEnhancements\n----------------------------------\n* user's guide chapters w. sample models\n    + gaussian processes\n    + measurement error and meta-analysis\n    + clustering (soft k-means, LDA, naive Bayes)\n    + ARCH, GARCH model section in regression chapter\n* sample models\n    + hidden Markov models (HMMs)\n    + non-negative matrix factorization (NNMF)\n* speed improvements to multivariate models and matrix solvers\n    + mdivide_left, mdivide_left_tri_low, mdivide_right,\n      mdivide_right_tri_low\n    + determinant, log determinant\n    + inverse\n* much more extensive probability tests\n* unstacked vari for multivariate auto-diff unfolding\n* faster multiply self transpose / columns_dot_self\n* cleaned up error messages for size mismatches in accessors\n* simplified vector view expression template parameterization\n* cleaned up many --pedantic compiler warnings\n\nNew Functions\n----------------------------------\n* log absolute determinant, with optimized gradients\n* probability functions\n    + multivariate normal, precision parameterization\n* model timing and n_eff output in CSV for all test models\n* ongoing vectorizations and reparameterizations\n  of probability functions\n* faster Phi_approx computing an approximate cumulative unit\n  normal density\n* added dims() function to extract dimensions of arrays of scalars,\n  vectors, and matrices\n* added size()  function to extract the number of elements in an array\n\n\nv1.1.0  (17 Dec 2012)\n======================================================================\n-- Backward Compatibility Issue\n   * Categorical distribution recoded to match documentation;  it\n     now has support {1,...,K} rather than {0,...,K-1}.\n   * (RStan) change default value of permuted flag from FALSE to TRUE for\n     Stan fit S4 extract() method\n-- New Features\n   * Conditional (if-then-else) statements\n   * While statements\n-- New Functions\n   * generalized multiply_lower_tri_self_transpose() to non-square\n     matrices\n   * special functions: log_inv_logit(), log1m_inv_logit()\n   * matrix special functions: cumulative_sum()\n   * probability functions: poisson_log_log() for log-rate\n     parameterized Poisson\n   * matrix functions: block(), diag_pre_multiply(), diag_post_multiply()\n   * comparison operators (<, >, <=, >=, ==, !=)\n   * boolean operators (!, ||, &&)\n   * allow +/- inf values in variable declaration constraints\n-- RStan Improvements\n   * get_posterior_mean() method for Stan fit objects\n   * replaced RcppEigen dependency with include of Eigen source\n   * added read_stan_csv() to create Stan fit object from CSV files of\n     the form written to disk by the command-line version of Stan\n   * as.data.frame() S3 method for Stan fit objects\n-- Bug Fixes\n   * fixed bug in NUTS diagonal resulting in too small step sizes\n   * fixed bug introduced in 1.0.3 that hid line and column number\n     bug reporting\n   * added checks that data dimensions match as well as sizes\n   * removed non-symmetric versions of eigenvalues() and eigenvectors()\n   * testing identifiers are not reserved words in C++/Stan\n   * trapping/reporting locations of errors in data and init reads\n   * improvements in dump data format reader for more R compatibility\n     and more generality\n   * fix bug in bernoulli logit distro tail density\n-- Code Improvements\n   * templated out matrix libs to reduce code duplication\n   * vectorized auto-dif for tcrossprod() and crossprod()\n   * optimizations in Wishart\n   * vectorization with efficiency improvements in probability distributions\n-- Libraries Updated\n   * Eigen version 3.1.1 replaced with version 3.1.2\n   * Boost version 1.51.0 replaced with version 1.52.0\n-- Manual Improvements\n   * New chapter on univariate and multivariate variable transforms\n   * Many consistency improvements and typo corrections\n   * Information on running command line in parallel from shell\n\n\n\nv 1.0.3 Release Notes (25 Oct 2012)\n======================================================================\nStan Bug Fixes:\n -- error output in stanc now directed to standard error\n -- catching all exceptions thrown in stanc to prevent core dumps\n -- parser now accepts variable names starting with \"int\" and \"real\"\n    in first assignment after declaration\n -- now catching unknown truncation cdfs and vectorizations in stanc\n -- (hopefully) less scary message for domain error rejects\n -- removed use of assert(); replaced with exceptions where\n    appropriate\n -- fixed boundary condition on reporting max init retry failures\n -- fixed initialization errors in tests that failed on some platforms\n -- improved error checking for matrix size args to prevent segfaults\n -- fixed boundary condition on bounded transform to allow\n    beta(0.8,0.8) samples near 0 or 1\nStan New Features:\n -- mdivide_left_tri_low, mdivide_right_tri_low functions\n -- all univariate continuous densities vectorized\n -- better error checking for transforms\n -- new error return type in stanc for invalid arguments\n -- lower and upper bounds for vectors, row vectors, and matrices\n -- command parameter refresh <= 0 turns off iteration reporting\n -- int divisions produce warnings in stanc\n -- errors caused by invalid transformed parameters include var name\n -- various efficiency improvements and error handling for boundary\n    conditions and special cases of probability functions\n -- simplified matrix code with heavier use of templating\nStan Manual Additions:\n -- example of defining new distribution with parameters\n -- diff report vs. previous versions\n -- updated for range constraints on vector, row vector, matrix\n -- updated Eigen licensing information (now MPL, was LGPL)\n -- fixed alpha ordering issue in function index due to bolding\nRStan Bug Fixes:\n -- bug of setting parameter epsilon_pm wrongly for NUTS\n -- fixed seed reset so results match Stan\nRStan New Features:\n -- return empty stanfit object upon error such as incorrect data\n    input, wrong argument specification, etc. Previously, it will\n    stop. The empty stanfit includes the compiled model, so it can be\n    reused.\n -- add function stan_demo() to run examples included in Stan.\n -- add function sflist2stanfit() to merge a list of stanfit objects\n    into one, to facilitate user-level parallelism.\n -- add S3 method as.matrix, as.array, is.array, dim,\n    dimnames for stanfit objects.\n -- specify seed using string of digits in addition to numbers\n -- turn off refresh if value <= 0\n\n\nV 1.0.2 Release Notes (28 Sep 2012)\n----------------------------------------------------------------------\nBug Fixes:\n  -- check ranges for LHS of assignment to prevent seg faults\n  -- added matrix size and shape tests to avoid seg faults\n  -- changed matrix to throw domain_error rather than illegal_argument\n  -- removed template variable names from distribution error msgs\n  -- indexing fixed for arrays of matrix/vector/row_vector\n  -- fixed sd() and variance() to return 0.0 for sequences of size 1\n  -- fixed void return type in auto_covariance\n  -- patch truncation to return -inf for variates out of range\n  -- upgraded BUGS ring model to use constraints plus tan2()\nNew Features:\n  -- print statements\n  -- multiply_lower_tri_self_transpose function\n  -- vectorized several probability functions (see the manual)\nManual Additions:\n  -- programming guide: IRT models\n  -- new appendix: style guide\n  -- new appendix: migrating from Stan\n  -- new index: function and distribution index\n\n\nv1.0.1\n----------------------------------------------------------------------\nPatch release.\n\n\nv1.0.0\n----------------------------------------------------------------------\nFirst release.\n\n\n\n\n\n\nSync between RStan and Stan Command-line\n========================================\n\nTop-Level Command\nCmd:    stan/gm/command.hpp\nRStan:  rstan/rstan/inst/include/rstan/stan_fit.hpp\n        rstan/rstan/inst/include/rstan/stan_args.hpp\n        rstan/rstan/R/rstan.R\n\nlibstan.a\nCmd:    any XXX.cpp file added to makefile\nRStan:  rstan/rstan/src/YYY__XXX.cpp\n\n\nstanc translator\nCmd:    stan/command/stanc.cpp\nR:      rstan/rstan/src/stanc.cpp\n\n\noutput analysis\nCmd:    stan/mcmc/chains.hpp\nR:      rstan/rstan/src/chains.cpp\n\nvar_context impl\nCmd:\nR: rstan/rstan/inst/include/rstan/io/rlist_ref_var_context.hpp\n\nmakefiles\nCmd:    add .cpp files, makefile,  make/make*\nR:      rstan/rstan/src/Makefile{,.win}\n\n\nboost/eigen version\nCmd:    lib/boost_x.xx.x/, lib/eigen_x.x.x, etc.\nR:      rstan/rstan/src/Makefile{,.win}\n        rstan/rstan/R/options.R\n\nauthor list\nCmd:   web/mc-stan.org/development-team.html\nR:     rstan/rstan/DESCRIPTION\n       rstan/rstan/man/rstan.Rd\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 4.96875,
          "content": "##\n# Stan\n# -----------------\n#\n# To customize your build, set make variables in make/local\n\n\n## 'help' is the default make target.\nhelp:\n\n-include make/local                       # user-defined variables\n\nMATH ?= lib/stan_math/\nRAPIDJSON ?= lib/rapidjson_1.1.0/\n\n-include $(MATH)make/compiler_flags\n-include $(MATH)make/dependencies\n-include $(MATH)make/libraries\ninclude make/doxygen                      # doxygen\ninclude make/cpplint                      # cpplint\ninclude make/tests                        # tests\ninclude make/clang-tidy\n\nINC_FIRST = -I $(if $(STAN),$(STAN)/src,src) -I ./src/ -I $(RAPIDJSON)\n\n.PHONY: help\nhelp:\n\t@echo '--------------------------------------------------------------------------------'\n\t@echo 'Note: testing of Stan is typically done with the `runTests.py` python script.'\n\t@echo '  See https://github.com/stan-dev/stan/wiki/Testing-Stan-using-Gnu-Make-and-Python'\n\t@echo '  for more detail on testing.'\n\t@echo ''\n\t@echo 'Stan makefile:'\n\t@$(MAKE) print-compiler-flags\n\t@echo ''\n\t@echo 'Common targets:'\n\t@echo '  Documentation:'\n\t@echo '  - doxygen        : Builds the API documentation. The documentation is located'\n\t@echo '                     doc/api/'\n\t@echo '                     (requires doxygen installation)'\n\t@echo '  Submodule:'\n\t@echo '  - math-revert    : Reverts the Stan Math Library git submodule to the hash'\n\t@echo '                     recorded in the Stan library'\n\t@echo '  - math-update    : Updates the Stan Math Library git submodule branch,'\n\t@echo '                     e.g. if the Math branch is `develop`, it will fetch the'\n\t@echo '                     the latest version of `develop`'\n\t@echo '  - math-update/<branch-name> : Updates the Stan Math Library git submodule to'\n\t@echo '                     the branch specified'\n\t@echo ''\n\t@echo 'Tests:'\n\t@echo ''\n\t@echo '  Unit tests are built through make by specifying the executable as the target'\n\t@echo '  to make. For a test in src/test/*_test.cpp, the executable is test/*$(EXE).'\n\t@echo ''\n\t@echo '  Header tests'\n\t@echo '  - test-headers  : tests all source headers to ensure they are compilable and'\n\t@echo '                     include enough header files.'\n\t@echo ''\n\t@echo '  To run a single header test, add \"-test\" to the end of the file name.'\n\t@echo '  Example: make src/stan/math/constants.hpp-test'\n\t@echo ''\n\t@echo '  Cpplint'\n\t@echo '  - cpplint       : runs cpplint.py on source files. requires python 2.7.'\n\t@echo '                    cpplint is called using the CPPLINT variable:'\n\t@echo '                      CPPLINT = $(CPPLINT)'\n\t@echo '                    To set the version of python 2, set the PYTHON2 variable:'\n\t@echo '                      PYTHON2 = $(PYTHON2)'\n\t@echo ''\n\t@echo ' Clang Tidy'\n\t@echo ' - clang-tidy     : runs the clang-tidy makefile over the test suite.'\n\t@echo '                    Options:'\n\t@echo '                     files: (Optional) regex for file names to include in the check'\n\t@echo '                      Default runs all the tests in unit'\n\t@echo '                     tidy_checks: (Optional) A set of checks'\n\t@echo '                      Default runs a hand picked selection of tests'\n\t@echo ''\n\t@echo '     Example: This runs clang-tidy over all the multiply tests in prim'\n\t@echo ''\n\t@echo '     make clang-tidy files=*prim*multiply*'\n\t@echo ''\n\t@echo ' - clang-tidy-fix : same as above but runs with the -fix flag.'\n\t@echo '                    For automated fixes, outputs a yaml named'\n\t@echo '                    .clang-fixes.yml'\n\t@echo ''\n\t@echo ' Clang Format'\n\t@echo ' - clang-format     : runs clang-format over all the .hpp and .cpp files.'\n\t@echo '                      in src.'\n\t@echo ''\n\t@echo 'Clean:'\n\t@echo '  - clean         : Basic clean. Leaves doc and compiled libraries intact.'\n\t@echo '  - clean-deps    : Removes dependency files for tests. If tests stop building,'\n\t@echo '                    run this target.'\n\t@echo '  - clean-all     : Cleans up all of Stan.'\n\t@echo ''\n\t@echo '--------------------------------------------------------------------------------'\n\n##\n# Clean up.\n##\nMODEL_SPECS := $(call findfiles,src/test,*.stan)\n.PHONY: clean clean-demo clean-dox clean-models clean-all clean-deps\nclean:\n\t$(RM) $(call findfiles,src,*.dSYM) $(call findfiles,src,*.d.*)\n\t$(RM) $(wildcard $(MODEL_SPECS:%.stan=%.hpp))\n\t$(RM) $(wildcard $(MODEL_SPECS:%.stan=%$(EXE)))\n\t$(RM) $(wildcard $(MODEL_SPECS:%.stan=%.o))\n\t$(RM) $(wildcard $(MODEL_SPECS:%.stan=%.d))\n\nclean-dox:\n\t$(RM) -r doc/api\n\nclean-deps:\n\t@echo '  removing dependency files'\n\t$(RM) $(call findfiles,./,*.d)\n\nclean-all: clean clean-dox clean-deps clean-libraries\n\t$(RM) -r test bin\n\t@echo '  removing .o files'\n\t$(RM) $(call findfiles,src/,*.o)\n\n##\n# Submodule related tasks\n##\n.PHONY: math-revert\nmath-revert:\n\tgit submodule update --init --recursive\n\n.PHONY: math-update\nmath-update:\n\tgit submodule init\n\tgit submodule update --recursive\n\nmath-update/%: math-update\n\tcd $(MATH) && git fetch --all && git checkout $* && git pull\n\n##\n# Debug target that allows you to print a variable\n##\nprint-%  : ; @echo $* = $($*)\n"
        },
        {
          "name": "runTests.py",
          "type": "blob",
          "size": 4.6025390625,
          "content": "#!/usr/bin/python\n\nfrom __future__ import print_function\nfrom argparse import ArgumentParser, RawTextHelpFormatter\nimport os\nimport os.path\nimport platform\nimport re\nimport subprocess\nimport sys\nimport time\nimport glob\n\nwinsfx = \".exe\"\ntestsfx = \"_test.cpp\"\n\n\ndef processCLIArgs():\n    \"\"\"\n    Define and process the command line interface to the runTests.py script.\n    \"\"\"\n    cli_description = \"Generate and run stan math library tests.\"\n    cli_epilog = \"See more information at: https://github.com/stan-dev/stan\"\n\n    parser = ArgumentParser(\n        description=cli_description,\n        epilog=cli_epilog,\n        formatter_class=RawTextHelpFormatter,\n    )\n\n    # Now define all the rules of the command line args and opts\n    parser.add_argument(\n        \"-j\", metavar=\"N\", type=int, default=1, help=\"number of cores for make to use\"\n    )\n\n    tests_help_msg = \"The path(s) to the test case(s) to run.\\n\"\n    tests_help_msg += \"Example: 'src/test/unit', 'src/test/integration', and/or\\n\"\n    tests_help_msg += \"         'src/test/unit/version_test'\"\n    parser.add_argument(\"tests\", nargs=\"+\", type=str, help=tests_help_msg)\n    parser.add_argument(\n        \"-m\",\n        \"--make-only\",\n        dest=\"make_only\",\n        action=\"store_true\",\n        help=\"Don't run tests, just try to make them.\",\n    )\n    # And parse the command line against those rules\n    return parser.parse_args()\n\n\ndef stopErr(msg, returncode):\n    \"\"\"Report an error message to stderr and exit with a given code.\"\"\"\n    sys.stderr.write(\"%s\\n\" % msg)\n    sys.stderr.write(\"exit now (%s)\\n\" % time.strftime(\"%x %X %Z\"))\n    sys.exit(returncode)\n\n\ndef isWin():\n    return platform.system().lower().startswith(\n        \"windows\"\n    ) or os.name.lower().startswith(\"windows\")\n\n\nbatchSize = 24 if isWin() else 200\n\n\ndef mungeName(name):\n    \"\"\"Set up the makefile target name\"\"\"\n    if name.startswith(\"src\") or name.startswith(\"./src\"):\n        name = name.replace(\"src/\", \"\", 1)\n    if name.endswith(testsfx):\n        name = name.replace(testsfx, \"_test\")\n        if isWin():\n            name += winsfx\n            name = name.replace(\"\\\\\", \"/\")\n    return name\n\n\ndef doCommand(command, exit_on_failure=True):\n    \"\"\"Run command as a shell command and report/exit on errors.\"\"\"\n    print(\"------------------------------------------------------------\")\n    print(\"%s\" % command)\n    p1 = subprocess.Popen(command, shell=True)\n    p1.wait()\n    if exit_on_failure and (not (p1.returncode is None) and not (p1.returncode == 0)):\n        stopErr(\"%s failed\" % command, p1.returncode)\n\n\ndef modelDependencies(tests):\n    dependencies = []\n    for filepath in tests:\n        filepath = \"src/\" + filepath + \".cpp\"\n        if os.path.isfile(filepath) and filepath.endswith(testsfx):\n            with open(filepath) as file:\n                test_file_content = file.read()\n                # look for TEST() and TEST_F()\n                matches = re.findall(\n                    r\"#include <test/test-models/.*hpp>\", test_file_content\n                )\n                for x in matches:\n                    x = x.replace(\"#include <\", \"\").replace(\">\", \"\")\n                    dependencies.append(x)\n    return dependencies\n\n\ndef makeTest(name, j):\n    \"\"\"Run the make command for a given single test.\"\"\"\n    doCommand(\"make -j%d %s\" % (j or 1, name))\n\n\ndef runTest(name):\n    executable = mungeName(name).replace(\"/\", os.sep)\n    xml = mungeName(name).replace(winsfx, \"\")\n    command = '%s --gtest_output=\"xml:%s.xml\"' % (executable, xml)\n    doCommand(command)\n\ndef files_in_folder(folder):\n    \"\"\"Returns a list of files in the folder and all\n    its subfolders recursively. The folder can be\n    written with wildcards as with the Unix find command.\n    \"\"\"\n    files = []\n    for f in glob.glob(folder):\n        if os.path.isdir(f):\n            files.extend(files_in_folder(f + os.sep + \"**\"))\n        else:\n            files.append(f)\n    return files\n\ndef findTests(base_path):\n    files = []\n    for test_path in base_path:\n        files.extend(files_in_folder(test_path))\n    tests = [f for f in files if f.endswith(testsfx)]\n    return list(map(mungeName, tests))\n\ndef batched(tests):\n    return [tests[i : i + batchSize] for i in range(0, len(tests), batchSize)]\n\n\ndef main():\n    inputs = processCLIArgs()\n\n    tests = findTests(inputs.tests)\n    if not tests:\n        stopErr(\"No matching tests found.\", -1)\n\n    for batch in batched(tests):\n        modelHpp = modelDependencies(batch)\n        if len(modelHpp) > 0:\n            makeTest(\" \".join(modelHpp), inputs.j)\n        makeTest(\" \".join(batch), inputs.j)\n\n    if not inputs.make_only:\n        for t in tests:\n            runTest(t)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}