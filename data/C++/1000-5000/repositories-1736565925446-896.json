{
  "metadata": {
    "timestamp": 1736565925446,
    "page": 896,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MRPT/mrpt",
      "stars": 1983,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 5.96875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignArrayOfStructures: Right\nAlignConsecutiveMacros: Consecutive\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: Allman\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: AfterColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: AfterColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nQualifierAlignment: Leave\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nPackConstructorInitializers: NextLine\nBasedOnStyle:    ''\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nAllowAllConstructorInitializersOnNextLine: true\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentRequires:  false\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPenaltyIndentedWhitespace: 0\nPointerAlignment: Left\nPPIndentWidth:   -1\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n      - ParseTestProto\n      - ParsePartialTestProto\n    CanonicalDelimiter: pb\n    BasedOnStyle:    google\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSortIncludes:    CaseSensitive\nSortJavaStaticImport: Before\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  BeforeNonEmptyParentheses: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nBitFieldColonSpacing: Both\nStandard:        Auto\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        2\nUseCRLF:         false\nUseTab:          Never\nWhitespaceSensitiveMacros:\n  - STRINGIZE\n  - PP_STRINGIZE\n  - BOOST_PP_STRINGIZE\n  - NS_SWIFT_NAME\n  - CF_SWIFT_NAME\n...\n\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.095703125,
          "content": "coverage:\n  ignore:\n    - tests/*\n    - samples/*\n    - apps/*\n    - **/3rdparty\n    - 3rdparty/*\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0625,
          "content": "root = true\n\n[*.{cpp,h,hpp}]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03515625,
          "content": "tests/sample_text_file.txt  eol=lf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6044921875,
          "content": "*~\nbuild*\ninstall*\n*.layout\nCMakeFiles/\nCMakeLists.txt.user*\nSOURCE_DATE_EPOCH\n*.backup\n\nshare/mrpt/config_files/rawlog-grabber/*.rawlog\n\n# OSX\n*.DS_Store\n.Spotlight-V100\n\n# Vim-related files\nSession.vim\n.projections.json\ncompile_commands.json\n.mypy_cache/\ntags\n\n# common results directories\ngraphslam_results/\n\n#visual studio\n.vs/*\n.vscode\n\n# doxygen files\ndoc/source/dox_mrpt.tag\ndoc/source/xml-dir/\ndoc/html/\ndoc/source/class_*\ndoc/source/enum_*\ndoc/source/namespace_*\ndoc/source/group_*\ndoc/source/struct_*\ndoc/source/page_*\ndoc/source/union_*\ndoc/source/global.rst\ndoc/source/doxygen-index.rst\n.cmake\ndoc/venv\n.pc\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.8349609375,
          "content": "[submodule \"3rdparty/nanogui\"]\n\tpath = 3rdparty/nanogui\n\turl = https://github.com/MRPT/nanogui.git\n[submodule \"3rdparty/libfreenect\"]\n\tpath = 3rdparty/libfreenect\n\turl = https://github.com/OpenKinect/libfreenect.git\n[submodule \"3rdparty/googletest\"]\n\tpath = 3rdparty/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"3rdparty/rplidar_sdk\"]\n\tpath = 3rdparty/rplidar_sdk\n\turl = https://github.com/MRPT/rplidar_sdk.git\n[submodule \"3rdparty/zlib\"]\n\tpath = 3rdparty/zlib\n\turl = https://github.com/madler/zlib.git\n[submodule \"3rdparty/simpleini\"]\n\tpath = 3rdparty/simpleini\n\turl = https://github.com/brofield/simpleini.git\n[submodule \"3rdparty/nanoflann\"]\n\tpath = 3rdparty/nanoflann\n\turl = https://github.com/jlblancoc/nanoflann.git\n[submodule \"3rdparty/libfyaml\"]\n\tpath = 3rdparty/libfyaml\n\turl = https://github.com/pantoniou/libfyaml.git\n"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.2138671875,
          "content": "FROM mrpt/mrpt-build-env:full-focal\n\n# Install custom tools, runtimes, etc.\n# For example \"bastet\", a command-line tetris clone:\n# RUN brew install bastet\n#\n# More information: https://www.gitpod.io/docs/config-docker/\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.1123046875,
          "content": "image:\n  file: .gitpod.Dockerfile\n\nvscode:\n  extensions:\n    - ms-vscode.cmake-tools@1.5.3:QI2POGDzx7mhyCmZyf/3vg=="
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.703125,
          "content": "extraction:\n  exclude:\n    - 3rdparty\n    - apps\n  cpp:\n    prepare:\n      packages:\n      - \"build-essential\"\n      - \"pkg-config\"\n      - \"cmake\"\n      - \"libwxgtk3.0-dev\"\n      - \"libwxgtk3.0-gtk3-dev\"\n      - \"libopencv-dev\"\n      - \"libeigen3-dev\"\n      - \"libgtest-dev\"\n      - \"libftdi1-dev\"\n      - \"freeglut3-dev\"\n      - \"zlib1g-dev\"\n      - \"libusb-1.0-0-dev\"\n      - \"libudev-dev\"\n      - \"libfreenect-dev\"\n      - \"libdc1394-22-dev\"\n      - \"libavformat-dev\"\n      - \"libswscale-dev\"\n      - \"libassimp-dev\"\n      - \"libjpeg-dev\"\n      - \"libsuitesparse-dev\"\n      - \"libpcap-dev\"\n      - \"liboctomap-dev\"\n      - \"libglfw3-dev\"\n    configure:\n      command: \"cmake -S . -B . -DMRPT_BUILD_APPLICATIONS=OFF\"\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 7.57421875,
          "content": "This file contains the list of people involved in the development\nof MRPT along its history. If you feel someone is missing, please\nfork and pull-request.\n\nAn online, dynamic list of git commit authors can be reached at:\n  https://github.com/MRPT/mrpt/graphs/contributors\n\nMRPT was born in 2004 at MAPIR lab in the University of Málaga and has been\nunder continuous development by many developers and contributors since then.\n\nThe following list is roughly sorted in reverse chronological order. See also\nthe GitHub contributors page (https://github.com/MRPT/mrpt/graphs/contributors).\n\n* Jose-Luis Blanco-Claraco. Main developer.  https://www.ual.es/~jlblanco/  https://github.com/jlblancoc\n\n* Hunter (2016-) https://github.com/jolting\n  - Tons of changes towards porting code to C++14 for MRPT 2.0\n  - Add-ons to 2D range scan observations.\n  - Code clean ups.\n  - Multiple bug fixes.\n\n* Nikos Koukis, National Technical University of Athens, Greece (2016-) - https://github.com/bergercookie\n  - Support for executing graphSLAM in graphslam lib/ + Corresponding\n  \tgraphslam-engine application (GSoC 2016)\n  - Initial version of MRPT logging module - COutputLogger\n  - Introduction of the clang-format files, scripts, etc.\n\n* Jesus Briales (University of Malaga, 2014-2018)  https://github.com/jbriales\n  - Fixes in mrpt::hwdrivers::CImageGrabber_dc1394\n  - MRPT to Matlab (MEX) wrappers.\n\n* Mariano Jaimez Tarifa, University of Malaga (2012-2018) https://github.com/MarianoJT88\n  - Several improvements and bug fixes in the mrpt-reactivenav library.\n  - Development in octomap classes.\n  - Some improvements and bug fixes in the mrpt-opengl library.\n  - Visual Odometry based on depth images (mrpt::vision::CDifodo) and 2 applications to use it: DifOdometry-Camera and DifOdometry-Datasets\n  - Examples to manage an RGB-D camera with openNI2\n\n* Eduardo Fernandez Moral , University of Malaga (2013-2014), INRIA Sophia-Antipolis (2014-). https://github.com/EduFdez\n  - OpenNI2 classes: COpenNI2Sensor,\n  - The new library: mrpt-pbmap\n  - Driver for Rovio mobile robot with webcam.\n  - Some other functions.\n\n* Javier G. Monroy, University of Malaga (2013-). https://github.com/JGMonroy\n  - Driver for Rovio mobile robot with webcam.\n  - New algorithms in gas maps.\n\n* Chandra Mangipudi, University of Minnesota (2016) - https://github.com/mangi020\n  - The PnP module in mrpt::vision  (GSoC 2016)\n\n* Nikolaus Demmel, Robert Bosch Start-up GmbH (2016)\n  - Additions to python bindings.\n\n* Robert Schattschneider, University of Canterbury (2012)\n  - Patches for bug fixes, serialization of templates.\n\n* Jurica Stanojkovic (IMGTEC, 2014)\n  - Testing and patches for MIPS* architectures.\n\n* Randolph Voorhies, University of Southern California (2014)\n  - Fixes for OS X.\n\n* Yuya Ochiai, (Aichi, Japan) (2014)\n  - Fixes for OS X.\n\n* Kenzaburo Miyawaki (Osaka Institute of Technology, 2014)\n  - Refactoring of OpenNI2 classes in mrpt::hwdrivers\n\n* Francisco-Angel Moreno-Dueñas (2010-). http://www.isa.uma.es/famoreno\n  - Maintainer of vision-related classes (mrpt::vision namespace in libmrpt-core).\n  - Visual odometry for stereo images.\n  - Work in CLandmarksMap for efficiency of visual SLAM.\n  - Many image-related functions.\n  - Many functions in mrpt::topography\n  - mrpt::hwdrivers::CCANBusReader and related classes\n  - mrpt::poses::CPose3DRotVec\n  - mrpt::hwdrivers::CDUO3DCamera for DUO3D cameras\n\n* Emilio Sanjurjo Maroño, LIM, University of Coruña (2013)\n  - Fixed orientation of ENU axes for Geodetic coordinate conversions in mrpt::topography.\n\n* Antonio J. Ortiz de Galisteo, University of Malaga (2007).\n  - Addition of many mathematical functions.\n  - More matrix operations.\n  - Quaternion support.\n  - Mono SLAM classes and the MonoSLAM demo (the first version).\n  - Some classes for hardware interfaces (Sonars, robotic head)\n  - Additions to the graphics renderer CMRPTCanvas.\n  - The first version of the ro-localization application.\n\n* Pablo Moreno Olalla, University of Malaga.\n  - Tons of new code and optimizations in mrpt::math\n  - Work on laser scanner simulation in 3D scenes.\n  - Tons of geometry-related functions and lightweight geometry data types.\n  - Many new classes in mrpt::opengl\n\n* José Raul Ruiz Sarmiento, University of Malaga.\n  - Maintainer of the library mrpt-detectors.\n  - Generic \"detector classes\" (CDetectableObject, CObjectDetection, ...).\n  - Work on PTU unit integration with Hokuyo laser scanner and 3D point clouds.\n  - Some classes: mrpt::hwdrivers::CPtuDperception, mrpt::utils::md5, and more.\n  - Website documentation.\n\n* Emil Khatib, University of Malaga (2011-2012)\n  - A few new classes to handle WiFi-signal strength receivers and build\n     maps out of such observations: mrpt::slam::CObservationWirelessPower,\n     mrpt::hwdrivers::CWirelessPower and mrpt::slam::CWirelessPowerGridMap2D.\n  - Classes for RFID observations and sensors: mrpt::slam::CObservationRFID,\n     mrpt::hwdrivers::CImpinjRFID.\n  - Interface to PID sensor: mrpt::hwdrivers::CRaePID\n\n* Vicente Arevalo Espejo, University of Malaga.\n  - The application camera-calib.\n  - Some classes: mrpt::opengl::CSetOfTexturedTriangles, etc..\n  - Some minor changes in: SceneViewer3D and RawlogViewer applications.\n  - Some image-related functions.\n\n* Adrien Barral - Robopec (France).\n  - Driver for SICK LMS100 via ethernet (mrpt::hwdrivers::CLMS100eth)\n  - Driver for Phidget interface boards (see mrpt::hwdrivers::CPhidgetInterfaceKitProximitySensors)\n  - Driver for KVH DSP-3000 Laser Gyro (see mrpt::hwdrivers::CGyroKVHDSP3000)\n\n* Paul Newman, Mobile Robotics Group, University of Oxford.\n  - The Levenberg-Marquardt algorithm implemented in slam::CICP.\n\n* M.A. Amiri Atashgah (MAAA), University of Sharif Technology, Tehran, Iran.\n  - Rewrite of a very old version of \"mono-slam\" to adapt it to MRPT 0.7.0.\n\n* Philipp Robbel, Massachusetts Institute of Technology, USA.\n  - New CRangeObservation for 3D point clouds.\n  - Many hacks and optimizations in different parts of MRPT.\n\n* Cipriano Galindo Andrades. University of Malaga.\n  - New functionality in HMT maps.\n  - Website documentation.\n\n* mrhemali\n  - SWIG wrappers (Python) for MRPT.\n  - Fixes to build without freeglut, some bug fixes, ...\n\n* Cyril Gerber\n  - Support for Videre stereo camera class: mrpt::hwdrivers::CStereoGrabber_SVS\n\n* Zoltan Gaal\n  - The RANSAC and genetic model fitter: mrpt::math::ModelSearch\n  - Different improvements and bug fixes.\n\n* Jan Girlich, University of Hamburg.\n  - Added mrpt::hwdrivers::CIbeoLuxETH\n\n*  Kasra Khosoussi (K.N.Toosi University, Iran)\n  - Patches to improve the JCBB data association implementation.\n\n* Alisa Chukaeva (LisGein), Moscow Technological University (2017)\n  - The application robot-map-gui.\n\n* Raghavender Sahdev, York University, Canada (GSoC 2017) https://github.com/raghavendersahdev\n  - The application benchmarking-image-features\n  - added files in the mrpt/libs/vision (detectors: AKAZE, LSD line detectors; descriptors: LATCH, BLD)\n\n* Aliben - (Github: https://github.com/alibenD).\n  - Driver for SICK TIM561/55x/56x via ethernet (mrpt::hwdrivers::CSICKTim561Eth)\n  - A testing sample for SICK TIM55x/TIM56x series\n\n* David Serret\n  - Small changes in Velodyne drivers\n\n* Edward Rosten\n  - Part of his libCVD (Free BSD) has been used in libs/opengl/src/gltext.cpp\n\n* Miguel Castillón, University of Girona (2022). https://miguelcastillon.github.io/ - https://github.com/miguelcastillon\n  - Added covariance mapping to se3 for GTSAM\n  - Added correct displacement covariance calculation between two poses with cross-correlation\n\nSeveral bug reports have been provided from MRPT users world-wide. We kindly thank all of\nthem for this valuable feedback, and they are usually mentioned in changelogs.\n"
        },
        {
          "name": "CATKIN_IGNORE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 30.296875,
          "content": "﻿# ----------------------------------------------------------------------------\n# Root CMake file for the MRPT libraries and applications\n#\n#  Run with \"cmake .\" at the root directory to build the makefiles for\n#   the MRPT C++ library, the samples, and the applications. Some scripts\n#   for generating the documentation, etc. are also updated.\n#\n#  For compiling instructions for all compilers and platforms, see\n#   https://docs.mrpt.org/reference/latest/compiling.html\n#\n#  2007-2023, Jose Luis Blanco <jlblanco@ual.es>\n# ----------------------------------------------------------------------------\n\n# -------------------------\n#        Setup CMake\n# -------------------------\n# Minimum version required for:\n# - target_compile_features() => 3.8.0\n# - cmakemodules/ECMFindModuleHelpers.cmake:112  => 3.16.0  (Available in Ubuntu >=20.04)\ncmake_minimum_required(VERSION 3.16.0)\n\nif (POLICY CMP0048) # cmake warns if loaded from a min-3.x-required parent dir:\n  cmake_policy(SET CMP0048 NEW)\nendif()\nif (POLICY CMP0075) # CheckIncludeFile: Yes, we will set \"CMAKE_REQUIRED_LIBRARIES\".\n\tcmake_policy(SET CMP0075 NEW)\nendif()\nif (POLICY CMP0135)  # The DOWNLOAD_EXTRACT_TIMESTAMP option was not given\n\tcmake_policy(SET CMP0135 NEW)\nendif()\n\n# Tell CMake we'll use both C & C++ for use in its tests/flags.\nproject(MRPT LANGUAGES C CXX)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n\tset(default_build_type \"Release\")\n\tmessage(STATUS \"Setting build type to '${default_build_type}' as none was specified.\")\n\tset(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE\n\t\tSTRING \"Choose the type of build.\" FORCE)\nendif()\n# Set the possible values of build type for cmake-gui\nif (DEFINED CACHE{CMAKE_BUILD_TYPE})\n\tset_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n\t\t\"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"Coverage\" \"SanitizeAddress\" \"SanitizeThread\")\nendif()\n\n\nif ((NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/nanogui/include\")\n    OR (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/rplidar_sdk/sdk/src\")\n   )\n  message(FATAL_ERROR \"git submodules missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by calling:\\n  git submodule update --init --recursive\\n\")\nendif()\n\n# Display timing information for each compiler instance on screen\noption(CMAKE_TIMING_VERBOSE \"Enable the display of timing information for each compiler instance.\" OFF)\nmark_as_advanced(CMAKE_TIMING_VERBOSE)\n\n# Enable verbose timing display?\nif(CMAKE_TIMING_VERBOSE AND UNIX)\n  set_property(GLOBAL PROPERTY RULE_MESSAGES OFF)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CMAKE_CURRENT_SOURCE_DIR}/cmakemodules/custom_output.sh\")\nendif()\n\n# Detect wordsize:\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)  # Size in bytes!\n\tset(CMAKE_MRPT_WORD_SIZE 64)\nelse()\n\tset(CMAKE_MRPT_WORD_SIZE 32)\nendif()\n\ninclude(cmakemodules/script_version_number.cmake REQUIRED)\t#  Loads MRPT version number\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmakemodules\") # Directory for CMake scripts\n\n# -------------------------\n#            CodeCov\n# -------------------------\nenable_testing()\nfind_package(codecov)\n# -------------------------\n\noption(MRPT_ALLOW_LGPLV3 \"Allows MRPT to use LGPLV3 code (mrpt-vision-lgpl)\" \"OFF\")\n\noption(MRPT_EXCEPTIONS_WITH_CALL_STACK \"Report callstack upon exceptions\" \"ON\")\nset(MRPT_EXCEPTIONS_CALL_STACK_MAX_DEPTH \"50\" CACHE STRING \"Maximum number of stack levels to show upon exceptions.\")\nmark_as_advanced(MRPT_EXCEPTIONS_CALL_STACK_MAX_DEPTH)\n\n# The root directory for all MRPT libraries/modules:\nset(MRPT_LIBS_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}/libs\" CACHE INTERNAL \"\")  # This emulates global vars\n\n# ----- Useful macros ------\ninclude(cmakemodules/UtilsMacros.cmake REQUIRED)\ninclude(cmakemodules/DebugMacros.cmake REQUIRED)\ninclude(cmakemodules/FilterFileLists.cmake REQUIRED)\ninclude(cmakemodules/DeclareMRPTLib.cmake REQUIRED)\ninclude(cmakemodules/DeclareMEXLib.cmake REQUIRED)\ninclude(cmakemodules/DeclareAppDependencies.cmake REQUIRED)\ninclude(cmakemodules/script_detect_unix_arch.cmake REQUIRED) # Detect machine architecture, on UNIX\n# --------------------------\n\n# Avoid the need for DLL export/import macros in Windows:\nif (WIN32)\n\tset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS  ON)\nendif()\n\n# ------------------------------------------\n# We want libraries to be named \"libXXX\"\n#  in all compilers, and \"-dbg\" for debug\n# ------------------------------------------\nif(MSVC)\n\tset(MRPT_LIB_PREFIX \"lib\")  # Libs are: \"libXXX\"\nendif()\nset(CMAKE_DEBUG_POSTFIX  \"-dbg\")\n\n# In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release:\nif (${CMAKE_GENERATOR} MATCHES \".*Makefiles\")\n    if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n        set(CMAKE_BUILD_TYPE Release)\n    endif()\nendif()\n\n# ----------------------------------------------------------------------------\n# \t\tCHECK FOR SYSTEM LIBRARIES, OPTIONS, ETC..\n# ----------------------------------------------------------------------------\n\n# Build static or dynamic libs?\n# ===================================================\n# Default: dynamic libraries (except if building to JavaScript code)\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n\tset(_def_value OFF)\nelse()\n\tset(_def_value ON)\nendif()\nset(BUILD_SHARED_LIBS ${_def_value} CACHE BOOL \"Build shared libraries (.dll/.so) instead of static ones (.lib/.a)\")\nunset(_def_value)\n\nif(BUILD_SHARED_LIBS)\n\tset(CMAKE_MRPT_BUILD_SHARED_LIB \"#define MRPT_BUILT_AS_DLL\")\n\tset(CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF 1)\nelse()\n\tset(CMAKE_MRPT_BUILD_SHARED_LIB \"/* #define MRPT_BUILT_AS_DLL */\")\n\tset(CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF 0)\nendif()\n\n# Only for emscripten: build executables as .html demo pages:\n# =============================================================\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n\tset(CMAKE_EXECUTABLE_SUFFIX \".html\")\nendif()\n\n# Only for Unix: use pkg-config to find libraries\n# ===================================================\ninclude(FindPkgConfig OPTIONAL)\n\n# Group projects in \"folders\"\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nset_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMakeTargets\")\n\n# Build the RoboPeak Lidar library?\nset(DEFAULT_BUILD_ROBOPEAK_LIDAR ON) # Default: Yes\nif ((${CMAKE_MRPT_KERNEL} MATCHES \"GNU\") # It doesnt build in hurd\n    OR APPLE # and macos\n    OR (\"$ENV{DEB_TARGET_ARCH_CPU}\" STREQUAL \"ppc64\")   # fails: termios2\n    OR (\"$ENV{DEB_TARGET_ARCH_CPU}\" STREQUAL \"ppc64el\") # fails: termios2\n    OR (\"$ENV{DEB_TARGET_ARCH_CPU}\" STREQUAL \"powerpc\") # fails: termios2\n    OR MINGW\n    )\n\tset(DEFAULT_BUILD_ROBOPEAK_LIDAR OFF)\nendif()\n# Decl option:\nset(MRPT_WITH_ROBOPEAK_LIDAR ${DEFAULT_BUILD_ROBOPEAK_LIDAR} CACHE BOOL \"Build an embedded version of RoboPeak LIDAR SDK (interface to low-cost lidar)\")\nif(MRPT_WITH_ROBOPEAK_LIDAR)\n\tset(CMAKE_MRPT_HAS_ROBOPEAK_LIDAR 1)\nelse()\n\tset(CMAKE_MRPT_HAS_ROBOPEAK_LIDAR 0)\nendif()\n\n#-----------------------------------\n#  Build with MRPT-MEX compatibility?\n#-----------------------------------\nset(MRPT_WITH_MATLAB_WRAPPER OFF CACHE BOOL \"Build with compatibility options for MEX wrapper?.\")\n\n# GCC only:\n# ===================================================\nif(CMAKE_COMPILER_IS_GNUCXX)\n\t# Enable libstdc++ parallel mode?\n\tset(MRPT_ENABLE_LIBSTD_PARALLEL_MODE OFF CACHE BOOL \"Enable parallel mode in libstdc++ (requires GCC 4.2.2+)\")\nendif()\n\n# Enable precompiled headers:\n# ===================================================\nif (MSVC)\n\tset(default_use_precomp ON)\nelse()\n\t# JLBC 28th Dec 2017: It seems cotire does not work well with imported -I\n\t# directories via target_include_directories(... PUBLIC/INTERFACE ...)\n\tset(default_use_precomp OFF)\nendif()\nset(MRPT_ENABLE_PRECOMPILED_HDRS ${default_use_precomp} CACHE BOOL \"Enable precompiled headers\")\nmark_as_advanced(MRPT_ENABLE_PRECOMPILED_HDRS)\n\n# MRPT_TRY_START/END blocks\n# ===================================================\nset(MRPT_HAS_STACKED_EXCEPTIONS ON CACHE BOOL \"Enable MRPT_TRY_START/END blocks (disable it for speed up).\")\n\n# ASSERT_ blocks\nset(MRPT_HAS_ASSERT ON CACHE BOOL \"Enable ASSERT_ statements (disable it for speed up).\")\n\n# \"Classic\" function & headers detection:\ninclude(cmakemodules/script_detect_functions_headers.cmake REQUIRED)\n\n# MSVC only:\n# ===================================================\nif(MSVC)\n\t# Enable Parallel compilation?\n\tset(COMPILE_IN_PARALLEL ON CACHE BOOL \"Enable parallel compilation in Visual Studio\")\nendif()\n\n# ----------------------------------------------------------------------------\n#   Uninstall target, for \"make uninstall\"\n# Must be invoked *before* other embedded projects so MRPT's target \"uninstall\" exists first\n# ----------------------------------------------------------------------------\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/parse-files/cmake_uninstall.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n  IMMEDIATE @ONLY)\n\nadd_custom_target(uninstall\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\n\nset_target_properties(uninstall PROPERTIES FOLDER \"CMakeTargets\")\n\n# See docs for CMake FindThreads()\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads) # Defines imported target Threads::Threads\n\n# ccache:\nif(NOT MSVC AND NOT XCODE_VERSION)\n    option(MRPT_BUILD_WITH_CCACHE \"Use ccache compiler cache\" ON)\n    find_program(CCACHE_FOUND ccache)\n\tmark_as_advanced(CCACHE_FOUND)\n    if(CCACHE_FOUND)\n        if(MRPT_BUILD_WITH_CCACHE)\n            set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n            set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n        else()\n            set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"\")\n            set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK \"\")\n        endif()\n    endif()\nendif()\n\n# Leave these includes here before ROS to prevent the warning:\n#   cmakemodules/ECMFindModuleHelpers.cmake:112 (message):\n#   Your project should require at least CMake 3.16.0 to use FindEGL.cmake\n#\ninclude(cmakemodules/script_gl_glut.cmake REQUIRED)     # Check for the GL,GLUT libraries\ninclude(cmakemodules/script_jsoncpp.cmake REQUIRED)     # Check for jsoncpp\n\n# ----------------------------------------------------------------------------\n# ROS\n# ----------------------------------------------------------------------------\ninclude(cmakemodules/script_ros.cmake REQUIRED)        # Check for ROS1 / ROS2\n\n# Abort from ROS scripts? (special case for the build farm)\nif (MRPT_ABORT_CMAKE_SCRIPT)\n\treturn()\nendif()\n\n# ----------------------------------------------------------------------------\n# Other sub-scripts:\n# ----------------------------------------------------------------------------\ninclude(cmakemodules/script_assimp.cmake REQUIRED)      # Check for system assimp lib (3D models)\ninclude(cmakemodules/script_bfd.cmake REQUIRED)      # BFD library for debug symbols for stack backtraces\ninclude(cmakemodules/script_clang_tidy.cmake REQUIRED)  # Clang tidy\ninclude(cmakemodules/script_eigen.cmake REQUIRED)       # Eigen3\ninclude(cmakemodules/script_ffmpeg.cmake REQUIRED)      # Check for ffmpeg C libraries: libavcodec, libavutil, libavformat, libswscale\ninclude(cmakemodules/script_flycapture2.cmake REQUIRED) # Check for PointGreyResearch (PGR) FlyCapture2 library\ninclude(cmakemodules/script_ftdi.cmake REQUIRED)        # Check for the FTDI headers (Linux only, in win32 we use built-in header & dynamic DLL load):\ninclude(cmakemodules/script_gcc_clang_id.cmake REQUIRED) # Helper variables\ninclude(cmakemodules/script_gridmap_options.cmake REQUIRED) # Gridmap options\ninclude(cmakemodules/script_gtest.cmake REQUIRED)       # Unit testing lib\ninclude(cmakemodules/script_inotify.cmake REQUIRED)     # Check for the sys/inotify headers (Linux only, in win32 we use the equivalent API for file system monitoring):\ninclude(cmakemodules/script_isense.cmake REQUIRED)      # Support for INTERSENSE Sensors\ninclude(cmakemodules/script_iwyu.cmake REQUIRED)        # Include-what-you-use\ninclude(cmakemodules/script_jpeg.cmake REQUIRED)        # Check for jpeg\ninclude(cmakemodules/script_kinect.cmake REQUIRED)      # Kinect support in a set of different ways\ninclude(cmakemodules/script_libdc1394.cmake REQUIRED)   # Check for libdc1394-2\ninclude(cmakemodules/script_libfyaml.cmake REQUIRED)    # Defines embedded version of libfyaml\ninclude(cmakemodules/script_liblas.cmake REQUIRED)      # Check for the LAS LiDAR format library\ninclude(cmakemodules/script_libtclap.cmake REQUIRED)    # Check for system libtclap\ninclude(cmakemodules/script_matlab.cmake REQUIRED)      # Support for Matlab MEX functions generation\ninclude(cmakemodules/script_mynteye.cmake REQUIRED)     # Support for MYNT EYE cameras\ninclude(cmakemodules/script_nanogui.cmake REQUIRED)     # Check for nanogui\ninclude(cmakemodules/script_nanoflann.cmake REQUIRED)   # Check for nanoflann\ninclude(cmakemodules/script_national_instruments.cmake REQUIRED)  # NI C library\ninclude(cmakemodules/script_nite2.cmake REQUIRED)       # Check for NITE2 library\ninclude(cmakemodules/script_octomap.cmake REQUIRED)     # Check for the octomap library\ninclude(cmakemodules/script_opencv.cmake REQUIRED)      # Check for the OpenCV libraries (via pkg-config, CMake, with different options)\ninclude(cmakemodules/script_openni2.cmake REQUIRED)     # Check for the OpenNI2 library\ninclude(cmakemodules/script_pcap.cmake REQUIRED)        # Check for the libpcap library\ninclude(cmakemodules/script_phidget.cmake REQUIRED)     # Support for phidget Interface Kit with proximity sensor device :\ninclude(cmakemodules/script_python_bindings.cmake REQUIRED)     # Support for python\ninclude(cmakemodules/script_qt.cmake REQUIRED)          # Check for wxWidgets + GL\ninclude(cmakemodules/script_SIMD.cmake REQUIRED)        # SSE2/SSE3/... optimization options\ninclude(cmakemodules/script_simpleini.cmake REQUIRED)   # SimpleINI lib\ninclude(cmakemodules/script_suitesparse.cmake REQUIRED) # SuiteSparse libs\ninclude(cmakemodules/script_swissrange.cmake REQUIRED)  # Support for SWISSRANGE 3D camera:\ninclude(cmakemodules/script_tbb.cmake REQUIRED)         # TBB\ninclude(cmakemodules/script_tinyxml2.cmake REQUIRED)    # tinyxml2 lib\ninclude(cmakemodules/script_triclops.cmake REQUIRED)    # Check for PointGreyResearch (PGR) Triclops library\ninclude(cmakemodules/script_videre_svs.cmake REQUIRED)  # Support for Videre Design stereo camera:\ninclude(cmakemodules/script_wxwidgets.cmake REQUIRED)   # Check for wxWidgets + GL\ninclude(cmakemodules/script_xsens.cmake REQUIRED)       # XSens Motion trackers / IMU drivers\ninclude(cmakemodules/script_zlib.cmake REQUIRED)        # Check for zlib\n\ninclude(cmakemodules/process_emscripten_embedded_files.cmake REQUIRED)\n\n\n# ---------------------------------------------------------------------------\n#\t\t\tOPTIONS\n#The options for the user when using \"cmakesetup\" or \"ccmake\":\n# ---------------------------------------------------------------------------\noption(MRPT_ALWAYS_CHECKS_DEBUG \"Additional checks even in Release\" \"OFF\")\nmark_as_advanced(FORCE MRPT_ALWAYS_CHECKS_DEBUG)\noption(MRPT_ALWAYS_CHECKS_DEBUG_MATRICES \"Additional checks even in Release (Only in matrix classes)\" \"OFF\")\nmark_as_advanced(FORCE MRPT_ALWAYS_CHECKS_DEBUG_MATRICES)\n\n# Include Asian fonts in CMRPTCanvas ?\nset( MRPT_HAS_ASIAN_FONTS ON CACHE BOOL \"Enable Asian fonts in CMRPTCanvas (increases library size).\")\n\ninclude(cmakemodules/script_declare_defines.cmake REQUIRED)  # Transform the variables MRPT_XXX=\"ON/OFF\" to CMAKE_MRPT_XXX=\"1/0\"\n\n# ---------------------------------------------------------------------------\n# The C++ include & link directories:\n# ---------------------------------------------------------------------------\n# Add user supplied extra options (optimization, etc...)\nset(USER_EXTRA_CPP_FLAGS \"\" CACHE STRING \"Put extra compiler options here if desired\")\n\n# Should be set to true for development\nset( MRPT_WARNINGS_ARE_ERRORS OFF CACHE BOOL \"Treat warnings as errors\")\nmark_as_advanced(MRPT_WARNINGS_ARE_ERRORS)\n\n# Whole program optimization?\nset( MRPT_WHOLE_PROGRAM_OPTIMIZATION OFF CACHE BOOL \"Flags for whole program optimization.\")\nmark_as_advanced(MRPT_WHOLE_PROGRAM_OPTIMIZATION)\n\n# Enable profiling?\nset(MRPT_ENABLE_PROFILING OFF CACHE BOOL \"Enable profiling (add -g -pg in GCC/CLANG, /PROFILE in Visual C++)\")\n\nif(MSVC)\n\tadd_compile_options(/W3)\n\tadd_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n\tadd_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n\tadd_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)\n\n\tlink_directories(\"${CMAKE_BINARY_DIR}/lib\")  # Required to find libraries\n\n\tif (NOT BUILD_SHARED_LIBS)\n\t\t# static libs in Win: don't optimize out the initializers for class auto registration:\n\t\tset(CMAKE_SHARED_LINKER_FLAGS_RELEASE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /OPT:NOREF\")\n\t\tset(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL \"${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL} /OPT:NOREF\")\n\t\tset(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /OPT:NOREF\")\n\tendif()\n\n\tset( BUILD_WITH_DEBUG_INFO ON CACHE BOOL \"Include debug info in binaries\")\n\tmark_as_advanced(BUILD_WITH_DEBUG_INFO)\n\tif(BUILD_WITH_DEBUG_INFO)\n\t\tset(CMAKE_EXE_LINKER_FLAGS_DEBUG \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} /DEBUG \")\n\t\tset(CMAKE_MODULE_LINKER_FLAGS_DEBUG \"${CMAKE_MODULE_LINKER_FLAGS_DEBUG} /DEBUG \")\n\tendif()\n\n\t# Whole program optimization\n\tif(MRPT_WHOLE_PROGRAM_OPTIMIZATION)\n\t\tadd_compile_options(/GL)\n\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /LTCG \")\n\t\tset(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /LTCG \")\n\t\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /LTCG \")\n\tendif()\n\n\t# Remove unreferenced functions: function level linking\n\tadd_compile_options(/Gy)\n\n\t# Profiling?\n\tif(MRPT_ENABLE_PROFILING)\n\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /PROFILE \")\n\t\tset(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /PROFILE \")\n\tendif()\nendif()\n\n# GNU GCC options ================================\nif(CMAKE_COMPILER_IS_GNUCXX)\n\t# Since MRPT 2.0 (March 2018) we need gcc-7.{1,2} due to compiler bugs in older versions:\n\tif (NOT \"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER \"7.0\")\n\t\tmessage(FATAL_ERROR \"MRPT requires gcc-7 or above. Please, see instructions for upgrading in: https://github.com/MRPT/mrpt/blob/master/README.md#32-build-from-sources\")\n\tendif()\n\n\t# Wall & pedantic?\n\tset(MRPT_BUILD_GCC_PEDANTIC_DEFAULT \"OFF\")\n\tset(MRPT_BUILD_GCC_PEDANTIC ${MRPT_BUILD_GCC_PEDANTIC_DEFAULT} CACHE BOOL \"Enable pedantic error detection (with GCC only)\")\n\tmark_as_advanced(MRPT_BUILD_GCC_PEDANTIC)\n\n\t# High level of warnings.\n\t# The -Wno-long-long is required in 64bit systems when including sytem headers.\n\t# The -Wno-variadic-macros was needed for Eigen3, StdVector.h\n\tadd_compile_options(-Wall  -Wno-long-long -Wno-variadic-macros -Wshadow)\n\tadd_compile_options(-Wreturn-local-addr   -Werror=return-local-addr)\n\tadd_compile_options(-Wno-psabi)\n\tadd_compile_options(\"$<$<COMPILE_LANGUAGE:C>:-Werror=implicit-function-declaration>\")\n\n\t# Workaround: Eigen <3.4 produces *tons* of warnings in GCC >=6. See http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1221\n\tif (NOT ${CMAKE_CXX_COMPILER_VERSION} LESS \"6.0\" AND \"${MRPT_EIGEN_VERSION}\" VERSION_LESS \"3.4\")\n\t\tadd_compile_options(-Wno-ignored-attributes -Wno-int-in-bool-context)\n\tendif()\n\n\tif(NOT APPLE)\n\t\t# This causes the option \"-Wnowrite-strings\" to be set on gcc-4.9 on OS X\n\t\tadd_compile_options(-Wno-write-strings)\n\tendif()\n\n\t# Use \"modern\" C99 ! ;-)\n\tstring(APPEND CMAKE_C_FLAGS \" -std=c99\")\n\n\tif(MRPT_BUILD_GCC_PEDANTIC)\n\t\t# Only for C++ sources:\n\t\tstring(APPEND CMAKE_CXX_FLAGS \" -pedantic\")\n\n\t\t# No need to be pendantic in old C files, most of them from 3rd parties anyway...\n \t\t#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pedantic\")\n\tendif()\n\n\t# Parallel stdlibc++?\n\tif(MRPT_ENABLE_LIBSTD_PARALLEL_MODE)\n\t\tadd_compile_options(-fopenmp)\n\t\tadd_definitions(-D_GLIBCXX_PARALLEL)\n\tendif()\n\n\t# BUILD_TYPE: Coverage\n\tset(CMAKE_CXX_FLAGS_COVERAGE \"${CMAKE_CXX_FLAGS_DEBUG} --coverage -fno-inline -fno-inline-small-functions -fno-default-inline\")\n\tset(CMAKE_EXE_LINKER_FLAGS_COVERAGE \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_COVERAGE \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage\")\n\n\t# BUILD_TYPE: SanitizeAddress\n\tset(CMAKE_CXX_FLAGS_SANITIZEADDRESS \"-fsanitize=address  -fsanitize=leak -g\")\n\tset(CMAKE_EXE_LINKER_FLAGS_SANITIZEADDRESS \"-fsanitize=address  -fsanitize=leak\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_SANITIZEADDRESS \"-fsanitize=address  -fsanitize=leak\")\n\n\t# BUILD_TYPE: SanitizeThread\n\tset(CMAKE_CXX_FLAGS_SANITIZETHREAD \"-fsanitize=thread -g\")\n\tset(CMAKE_EXE_LINKER_FLAGS_SANITIZETHREAD \"-fsanitize=thread\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_SANITIZETHREAD \"-fsanitize=thread\")\nendif()\n\n# CLang options ================================\nif (MRPT_COMPILER_IS_CLANG)\n\tadd_definitions(-D__STRICT_ANSI__) # fixes errors like \"support for type '__float128' is not yet implemented\"\n\n\t# High level of warnings.\n\t# no-unused-private-field: clang seems to complain in templates without reason.\n\tadd_compile_options(-Wall -Wabi -Wno-unused-private-field -Wshadow-all)\n\tadd_compile_options(-Wreturn-stack-address   -Werror=return-stack-address)\n\n\t# Use \"modern\" C99 ! ;-)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c99\")\n\n\tif(NOT APPLE AND NOT (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\"))\n\t\t# From: https://stackoverflow.com/a/16788372/1631514\n\t\t# I would use the native library for each OS i.e. libstdc++ on GNU/Linux and libc++ on Mac OS X.\n\t\t# libc++ is not 100% complete on GNU/Linux, and there's no real advantage to using it when libstdc++\n\t\t# is more complete. Also, if you want to link to any other libraries written in C++ they will almost certainly have been built with libstdc++ so you'll need to link with that too to use them.\n\t\t# Use the libstdc++ lib vs. libc++, to avoid some build errors in MacOS\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libstdc++\")\n\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libstdc++\")\n\t\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libstdc++\")\n\tendif()\nendif()\n\n# Shared options between GCC and CLANG:\n# ======================================\nif (MRPT_COMPILER_IS_GCC_OR_CLANG)\n\t# Even more warnings:\n\tadd_compile_options(-Wreturn-type         -Werror=return-type)\n\tadd_compile_options(-Wformat              -Werror=format-security)\n\n#\tadd_compile_options(-Wfloat-conversion    -Werror=float-conversion)\n\n\tadd_compile_options(-Wextra -Wtype-limits -Wcast-align -Wparentheses)\n\tadd_compile_options(-Wno-unused-parameter)\n\n\tif(MRPT_WARNINGS_ARE_ERRORS)\n\t\tadd_compile_options(-Werror)\n\tendif()\n\n\tif(CMAKE_BUILD_TYPE MATCHES \"Debug\")\n\t\tadd_compile_options(-g)\n\t\tadd_definitions( -D_DEBUG)\n\t\tadd_definitions( -DDEBUG)\n\tendif()\n\n\t# Profiling?\n\tif(MRPT_ENABLE_PROFILING)\n\t\tadd_compile_options(-pg -g)\n\telseif()\n\t\t# Remove unreferenced functions: function level linking\n\t\t# Remove unreferenced functions: function level linking\n\t\tif(NOT APPLE)\n\t\t\tadd_compile_options(-ffunction-sections)\n\t\tendif()\n\tendif()\n\n\t# Whole program optimization\n\tif(MRPT_WHOLE_PROGRAM_OPTIMIZATION)\n\t\tadd_compile_options(--combine)\n\t\tset(MRPT_EXES_CXX_FLAGS \"${MRPT_EXES_CXX_FLAGS} -fwhole-program --combine\")\n\tendif()\n\n    if (NOT CMAKE_CROSSCOMPILING)\n    \t# \"-march=native\" generates code optimized for the detected current processor.\n    \tset(MRPT_OPTIMIZE_NATIVE OFF CACHE BOOL \"GCC/clang optimizations for current processor (-march=native)\")\n    \t# \"-mtune=native\" generates code optimized for the detected current processor.\n    \tset(MRPT_TUNE_NATIVE ON CACHE BOOL \"GCC/clang tune for current processor (-mtune=native)\")\n\n\t\t# If enabled, and NOT in an arch that doesn't support the flag:\n    \tif(MRPT_TUNE_NATIVE AND\n\t\t\t(NOT \"${CMAKE_MRPT_ARCH}\" STREQUAL \"riscv64\") AND\n\t\t\t(NOT \"${CMAKE_MRPT_ARCH}\" STREQUAL \"parisc64\") AND # hppa\n\t\t\t(NOT \"${CMAKE_MRPT_ARCH}\" STREQUAL \"parisc\") # hppa\n\t\t)\n    \t\tadd_compile_options(-mtune=native)\n    \tendif()\n\n    \tif(MRPT_OPTIMIZE_NATIVE)\n    \t\tif (\"${CMAKE_MRPT_ARCH}\" MATCHES \"ppc64.*\")\n    \t\t\t# Special case: PowerPC does not have match=native:\n    \t\t\tadd_compile_options(-mcpu=native -mtune=native)\n    \t\telse()\n    \t\t\t# amd64, arm64, etc.\n    \t\t\tadd_compile_options(-march=native)\n    \t\tendif()\n    \tendif()\n    endif()\n\n\t# Was: add_compile_options(-mfpmath=sse)\n\t# No need to add this flag: it's enabled by default in 64bit builds.\n\n\t# SSE2? add flag to entire codebase:\n\tif (CMAKE_MRPT_HAS_SSE2)\n\t\tadd_compile_options(-msse2)\n\tendif()\n\n\t# SSE3 and above: only add flags to files with the proper suffix:\n\nendif ()\n\n# Add user supplied extra options (optimization, etc...)\n# ==========================================================\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${USER_EXTRA_CPP_FLAGS}\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${USER_EXTRA_CPP_FLAGS}\")\n\n# Some tricks for MSVC:\nif(MSVC)\n\tstring(REGEX REPLACE \"/EHsc\" \"/EHa\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /GS-\")\n\n\tif (COMPILE_IN_PARALLEL)\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")  # Multi-CPU parallel compilation (Suggested by  robert.schattschneide)\n\tendif ()\n\n\t# For MSVC to avoid the C1128 error about too large object files:\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /bigobj\")\n\nendif()\n\nif($ENV{VERBOSE})\n\tmessage(STATUS \"Final CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}\")\n\tmessage(STATUS \"Final CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}\")\n\tmessage(STATUS \"Final CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}\")\nendif()\n\n# Save libs and executables in the same place\nset( LIBRARY_OUTPUT_PATH ${MRPT_BINARY_DIR}/lib CACHE PATH \"Output directory for libraries\" )\nset( EXECUTABLE_OUTPUT_PATH ${MRPT_BINARY_DIR}/bin CACHE PATH \"Output directory for applications\" )\nset( MEX_LIBRARY_OUTPUT_PATH ${MRPT_BINARY_DIR}/mex/+mrpt CACHE PATH \"Output directory for mex functions\" )\nset( MEX_EXECUTABLE_OUTPUT_PATH ${MRPT_BINARY_DIR}/mex/test CACHE PATH \"Output directory for executable mexs\" )\n\n\n# This will become a list with all libraries to be built, and their\n#  dependencies stored in \"mrpt-${name}_LIB_DEPS\"\nset(ALL_MRPT_LIBS \"\" CACHE INTERNAL \"\")  # This emulates global vars\n\nif (NOT MSVC AND MRPT_ENABLE_PRECOMPILED_HDRS)\n\tinclude(cmakemodules/cotire.cmake REQUIRED) # COmpiler TIme REducer helper for PCH\n\tset_directory_properties(PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE) # Disable unity targets\nendif()\n\n# Detect Eigen Alignment to make MRPT compatible.\n# EIGEN_MAX_ALIGN_BYTES & EIGEN_MAX_STATIC_ALIGN_BYTES with selected compiler flags\n# ------------------------------------------------\n# DISABLED! Just go for the safer side: align=32 bytes\n#\tget_directory_property(mrpt_root_dir_COMPILE_OPTIONS COMPILE_OPTIONS)\n#try_run(RUN_EIGEN_RETVAL BUILD_EIGEN_SUCCESS\n#\t${CMAKE_BINARY_DIR}\n#\tSOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/parse-files/eigen_detect_alignment.cpp\"\n#\tCOMPILE_DEFINITIONS \"\"\n#\tCMAKE_FLAGS\n#\t-DINCLUDE_DIRECTORIES:STRING=${MRPT_EIGEN_INCLUDE_DIR}\n#\t-DCMAKE_CXX_FLAGS:STRING=\"${CMAKE_CXX_FLAGS} ${mrpt_root_dir_COMPILE_OPTIONS}\"\n#\tOUTPUT_VARIABLE EIGEN_TEST_OUT)\n#if (BUILD_EIGEN_SUCCESS AND (RUN_EIGEN_RETVAL EQUAL 0))\n#\tstring(REGEX MATCH \"EIGEN_MAX_ALIGN_BYTES[ ]+[0-9]+\" EIGEN_MAX_ALIGN_BYTES \"${EIGEN_TEST_OUT}\")\n#\tstring(REGEX MATCH \"[0-9]+\" EIGEN_MAX_ALIGN_BYTES \"${EIGEN_MAX_ALIGN_BYTES}\")\n#\tstring(REGEX MATCH \"EIGEN_MAX_STATIC_ALIGN_BYTES[ ]+[0-9]+\" EIGEN_MAX_STATIC_ALIGN_BYTES \"${EIGEN_TEST_OUT}\")\n#\tstring(REGEX MATCH \"[0-9]+\" EIGEN_MAX_STATIC_ALIGN_BYTES \"${EIGEN_MAX_STATIC_ALIGN_BYTES}\")\n#else()\n#message(STATUS \"Test Eigen build failed, falling back to default alignment (BUILD_EIGEN_SUCCESS=${BUILD_EIGEN_SUCCESS} RUN_EIGEN_RETVAL=${RUN_EIGEN_RETVAL} BUILD_EIGEN_OUT=${EIGEN_TEST_OUT})\")\nif (MRPT_ARCH_INTEL_COMPATIBLE)\n    set(EIGEN_MAX_ALIGN_BYTES 32)\n    set(EIGEN_MAX_STATIC_ALIGN_BYTES 32)\nelse()\n    # for aarch64, etc.\n    set(EIGEN_MAX_ALIGN_BYTES 16)\n    set(EIGEN_MAX_STATIC_ALIGN_BYTES 16)\nendif()\n#endif()\n\ninclude(cmakemodules/script_create_config_h.cmake REQUIRED)   # Build config.h\ninclude(cmakemodules/script_create_version_h.cmake REQUIRED)  # Build version.h\n\nadd_custom_target(all_mrpt_libs ALL) # all_mrpt_libs: target to build all mrpt-* modules\n\n# ----------------------------------------------------------------------------\n#      \t\t\t\t\tPROCESS SUBDIRECTORIES:\n# ----------------------------------------------------------------------------\nadd_subdirectory(3rdparty)   # The third-party libraries\nadd_subdirectory(libs)        # The MRPT C++ libraries\n\n# Build pymrpt after defining the libs above\nif(CMAKE_MRPT_HAS_PYTHON_BINDINGS)\nadd_subdirectory(python)\nendif()\n\nset(MRPT_BUILD_APPLICATIONS ON CACHE BOOL \"If you only want the MRPT libraries, disable this.\")\nif(MRPT_BUILD_APPLICATIONS)\n\tadd_subdirectory(apps)    # The applications:\nendif()\n\nif(MRPT_WITH_MATLAB_WRAPPER)\n    add_subdirectory(mex/apps)# The MEX applications\nendif()\n\n# Generate .h to locate MRPT sources:\nconfigure_file(\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/parse-files/mrpt_paths_config.h.in\"\n\t\"${MRPT_CONFIG_FILE_INCLUDE_DIR}/mrpt/mrpt_paths_config.h\"\n\t)\n\n# Documentation targets (must be AFTER \"apps\" because it uses the aux program \"mrpt-perfdata2html\")\nadd_subdirectory(doc)\n\n#   UNIT TESTS:\n# ----------------------------------------------------------------------------\nif (((DEFINED BUILD_TESTING) AND (NOT BUILD_TESTING)) OR (DEFINED ENV{ROS_DISTRO}))\n\t# We are in a ROS environment: disable tests by default to reduce build time in ROS build farms.\n\tset(_def_value OFF)\nelse()\n\t# Regular case:\n\tset(_def_value ON)\nendif()\nset(MRPT_BUILD_TESTING ${_def_value} CACHE BOOL \"Build MRPT tests\")\nif(MRPT_BUILD_TESTING)\n\tadd_subdirectory(tests)  # Build my tests\nendif()\nunset(_def_value )\n\n# Prepare CPack params for building binary packages (has to be after the apps/)\ninclude(cmakemodules/script_setup_cpack.cmake REQUIRED)\n\n# ----------------------------------------------------------------------------\n#  Hide some variables to the user, just show the important variables:\n# ----------------------------------------------------------------------------\nmark_as_advanced(FORCE\n\tCMAKE_BACKWARDS_COMPATIBILITY\n\twxWidgets_CONFIGURATION\n\twxWidgets_LIB_DIR\n\twxWidgets_USE_REL_AND_DBG\n\twxWidgets_wxrc_EXECUTABLE\n)\n\n# Write MRPT-version file (the global one, each mrpt-xxxx also has its own):\nconfigure_file(\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/parse-files/mrpt-config.cmake\"\n\t\"${CMAKE_BINARY_DIR}/mrpt-config.cmake\"\n\tCOPYONLY)\nwrite_basic_package_version_file(\n\t\"${CMAKE_BINARY_DIR}/mrpt-config-version.cmake\"\n\tVERSION ${CMAKE_MRPT_FULL_VERSION}\n\tCOMPATIBILITY AnyNewerVersion\n)\n\n# Build list of files to install, packages, etc.\ninclude(cmakemodules/script_install_commands.cmake REQUIRED)\n\n\n# Summary\ninclude(cmakemodules/script_show_final_summary.cmake REQUIRED)\n\n#-----------------------------------\n# The examples\n# *Note*: This must be AFTER the generation of the mrpt-xxx-config.cmake files\n#-----------------------------------\nadd_definitions(-DMRPT_OPENCV_SRC_DIR=\"${MRPT_OPENCV_SRC_DIR}\")\nadd_subdirectory(samples)\n\n# evaluate coverage\ncoverage_evaluate()\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 1.9990234375,
          "content": "{\n  // See https://go.microsoft.com//fwlink//?linkid=834763 for more information about this file.\n  \"configurations\": [\n    {\n      \"name\": \"x86-Debug\",\n      \"generator\": \"Visual Studio 15 2017\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DMRPT_EIGEN_USE_EMBEDDED_VERSION=ON\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x86-Release\",\n      \"generator\": \"Visual Studio 15 2017\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DMRPT_EIGEN_USE_EMBEDDED_VERSION=ON\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Visual Studio 15 2017  Win64\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DMRPT_EIGEN_USE_EMBEDDED_VERSION=ON\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Visual Studio 15 2017 Win64\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DMRPT_EIGEN_USE_EMBEDDED_VERSION=ON\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    }\n  ]\n}"
        },
        {
          "name": "COLCON_IGNORE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "COLCON_IGNORE.README",
          "type": "blob",
          "size": 0.2060546875,
          "content": "Since 2024-Jul, MRPT is no longer built as a monolithic ROS package. Instead,\nplease, clone the new repository: \n\n   https://github.com/MRPT/mrpt-ros\n\nwhich leads to generating finer-grained MRPT ROS packages.\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.509765625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2005-2024, Individual contributors, see AUTHORS file\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.890625,
          "content": "\n<h1 align=\"center\">The MRPT project</h1>\n\n<a href=\"https://github.com/MRPT/mrpt/actions/workflows/build-linux.yml\"><img src=\"https://github.com/MRPT/mrpt/actions/workflows/build-linux.yml/badge.svg\" /></a>\n<a href=\"https://github.com/MRPT/mrpt/actions/workflows/build-macos.yml\"><img src=\"https://github.com/MRPT/mrpt/actions/workflows/build-macos.yml/badge.svg\" /></a>\n<a href=\"https://github.com/MRPT/mrpt/actions/workflows/build-windows.yml\"><img src=\"https://github.com/MRPT/mrpt/actions/workflows/build-windows.yml/badge.svg\" /></a>\n<a href=\"https://ci.appveyor.com/project/jlblancoc/mrpt\" alt=\"AppVeyor:msvc\"><img src=\"https://ci.appveyor.com/api/projects/status/yjs4lpj02f6a1ylg/branch/develop?svg=true\" /></a> \n<a href=\"https://codecov.io/gh/MRPT/mrpt\" alt=\"codecov\"><img src=\"https://codecov.io/gh/MRPT/mrpt/branch/develop/graph/badge.svg\" /></a>\n[![CI Check clang-format](https://github.com/MRPT/mrpt/actions/workflows/check-clang-format.yml/badge.svg)](https://github.com/MRPT/mrpt/actions/workflows/check-clang-format.yml)\n\n<a href=\"https://github.com/MRPT/mrpt/releases\" alt=\"Releases\"><img src=\"https://img.shields.io/github/release/MRPT/mrpt.svg\" /></a>\n<a href='https://github.com/MRPT/mrpt/releases/tag/Windows-nightly-builds'><img src='https://img.shields.io/badge/Windows-Installer-orange?logo=Windows'></a>\n<a href=\"https://zenodo.org/doi/10.5281/zenodo.10595286\"><img src=\"https://zenodo.org/badge/13708826.svg\" alt=\"DOI\"></a>\n\n## 1. Introduction\n<img align=\"right\" src=\"https://mrpt.github.io/imgs/mrpt-videos-mix2.gif\">\n\nMobile Robot Programming Toolkit (MRPT) provides C++ libraries aimed at researchers\nin mobile robotics and computer vision. Libraries include [SLAM solutions](https://www.mrpt.org/List_of_SLAM_algorithms), [2D and 3D spatial transformations](https://www.mrpt.org/tutorials/programming/maths-and-geometry/2d_3d_geometry/), [SE(2)/SE(3) Lie groups](https://ingmec.ual.es/~jlblanco/papers/jlblanco2010geometry3D_techrep.pdf),\n[probability density functions (pdfs)](https://docs.mrpt.org/reference/latest/class_mrpt_math_CProbabilityDensityFunction.html) over points, landmarks, poses and maps,\nBayesian inference ([Kalman filters](https://www.mrpt.org/Kalman_Filters), [particle filters](https://www.mrpt.org/tutorials/programming/statistics-and-bayes-filtering/particle_filters/)), [image processing](https://www.mrpt.org/tutorials/programming/images-image-processing-camera-models/), [obstacle avoidance](https://www.mrpt.org/Obstacle_avoidance), [etc](https://docs.mrpt.org/reference/latest/modules.html).\nMRPT also provides GUI apps for [camera calibration](https://docs.mrpt.org/reference/latest/app_camera-calib.html), [dataset inspection](https://docs.mrpt.org/reference/latest/app_RawLogViewer.html),\nand [much more](https://docs.mrpt.org/reference/latest/applications.html).\n\n## 2. Resources\n  * Download the latest unstable code with: `git clone https://github.com/MRPT/mrpt.git --recursive`\n  * Ask questions at [stackoverflow](https://stackoverflow.com/search?q=mrpt) (use the tag `mrpt`)\n  * [Main project website](https://www.mrpt.org/), including [sources and Windows installer downloads](https://www.mrpt.org/download-mrpt/)\n  * [C++ API reference](https://docs.mrpt.org/reference/)\n  * [ROS packages](https://docs.mrpt.org/reference/latest/wrappers.html#mrpt-ros-packages)\n  * [Bindings documentation](https://github.com/MRPT/mrpt/wiki) (Python, Matlab)\n  * Source code for [dozens of examples](https://docs.mrpt.org/reference/latest/examples.html)\n  * Example configuration files for  MRPT applications can be found at:\n     [MRPT/share/mrpt/config_files](https://github.com/MRPT/mrpt/tree/master/share/mrpt/config_files)\n  * Some sample datasets are stored in:\n     [MRPT/share/mrpt/datasets](https://github.com/MRPT/mrpt/tree/master/share/mrpt/datasets).\n    A more complete dataset repository is [available online](https://www.mrpt.org/robotics_datasets).\n  * [How to contribute](https://github.com/MRPT/mrpt/blob/master/.github/CONTRIBUTING.md) with your code for new feaures, bug fixes, etc.\n  * MRPT is used in the [MOLA modular SLAM framework](https://github.com/MOLAorg/mola/).\n\n## 3. Install\n\n### 3.1. Ubuntu/Debian\n\nInstall simply with `sudo apt install libmrpt-dev mrpt-apps`, but check first what MRPT version exists in your [Ubuntu](https://packages.ubuntu.com/search?keywords=mrpt&searchon=sourcenames) or [Debian](https://qa.debian.org/madison.php?package=mrpt) ([tracker](https://tracker.debian.org/pkg/mrpt)) distribution.\n\nIf you want a more recent version, check out [this PPA](https://launchpad.net/~joseluisblancoc/+archive/ubuntu/mrpt) for nightly builds from the `develop` branch, or [this one](https://launchpad.net/~joseluisblancoc/+archive/ubuntu/mrpt-stable) for stable releases.\n\n        sudo add-apt-repository ppa:joseluisblancoc/mrpt   # develop branch\n        #sudo add-apt-repository ppa:joseluisblancoc/mrpt-stable   # master (stable releases) branch\n        sudo apt install libmrpt-dev mrpt-apps\n\nSupported distributions:\n  * Ubuntu 18.04 LTS (Bionic), Ubuntu 20.04 LTS (Focal), or newer.\n\n### 3.2. Build from sources\n\nSee [build documentation](https://docs.mrpt.org/reference/latest/compiling.html) ([source](doc/source/compiling.rst)).\n\n### 3.3. Windows precompiled versions\n\nExecutables (`.exe`s and `.dll`s) and development libraries (`.h`s and `.lib`s) included:\n\n[Nightly built Windows installer](https://github.com/MRPT/mrpt/releases/tag/Windows-nightly-builds)\n\n### 3.4. As a ROS package\n\nMRPT is also shipped as ROS packages.\n\nFor ROS 1:\n```bash\n# (ROS 1 only!)\nsudo apt install ros-$ROS_DISTRO-mrpt2\n```\n\nFor ROS 2, see instructions and available versions: https://github.com/MRPT/mrpt_ros\n\n\n## 4. License\nMRPT is released under the [new BSD license](http://www.mrpt.org/License/).\n\n\n**Contributors**\n\n<a href=\"https://github.com/MRPT/mrpt/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=MRPT/mrpt\" />\n</a>\n\n## 5. Versions in repositories\n\n![Repology](https://repology.org/badge/vertical-allrepos/mrpt.svg)\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 4.634765625,
          "content": "# version format\nversion: 2.14.8-{branch}-build{build}\n\nos: Visual Studio 2019\n\nclone_folder: c:\\projects\\mrpt\n\nplatform: x64\nconfiguration: Release\n\nenvironment:\n  CTEST_OUTPUT_ON_FAILURE: 1\n  VERBOSE: 1 # for MRPT cmake scripts to show more info\n\nbuild_script:\n  # NSIS: install required script for Windows binary packages:\n  - cd c:\\projects\\mrpt\n  - copy cmakemodules\\registerExtension.nsh \"C:\\Program Files (x86)\\NSIS\\Include\\\"\n  - cd c:\\projects\\mrpt\\build\\\n  # Build debug libraries\n#  - cmake --build . --config Debug --target all_mrpt_libs\n  # re-call CMake to detect the debug libs and all them to the install package:\n#  - cmake .\n  # Do unit tests:\n  - cmake --build . --config Release --target test_legacy\n  # All seem OK. Build all.\n#  - cmake --build . --config Release\n  # Build package:\n  - cmake --build . --config Release --target PACKAGE\n  # Rename package:\n  - cd c:\\projects\\mrpt\n  - cmd: IF NOT DEFINED APPVEYOR_REPO_TAG_NAME SET PKG_NAME=branch-%APPVEYOR_REPO_BRANCH%\n  - cmd: IF DEFINED APPVEYOR_REPO_TAG_NAME SET PKG_NAME=release-%APPVEYOR_REPO_TAG_NAME%\n  - cmd: IF EXIST c:\\projects\\mrpt\\build\\MRPT*.exe move c:\\projects\\mrpt\\build\\MRPT*.exe c:\\projects\\mrpt\\mrpt-%PKG_NAME%.exe\n  - dir\n\ninstall:\n  # ====== Install OpenCV\n  - choco upgrade chocolatey\n  - choco install opencv -y\n  - tree c:\\tools\\opencv\\build /F\n  - set OPENCVDIR=C:\\tools\\opencv\\build\\\n  # This variable is parsed by MRPT/cmakemodules/script_opencv.cmake:\n  - set OPENCV_DLLS_TO_INSTALL_DIRS=%OPENCVDIR%bin;%OPENCVDIR%x64\\vc16\\bin\n  - set PATH=%PATH%;%OPENCVDIR%\\bin;%OPENCVDIR%\\x64\\vc16\\bin\n  # ====== Install wxWidgets\n  - cd c:\\\n  - ps: Start-FileDownload 'https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_vc14x_x64_Dev.7z'\n  - ps: Start-FileDownload 'https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3-headers.7z'\n  - ps: Start-FileDownload 'https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_vc14x_x64_ReleaseDLL.7z'\n  - 7z x wxMSW-3.1.3_vc14x_x64_Dev.7z -oc:\\wxWidgets -aoa\n  - 7z x wxWidgets-3.1.3-headers.7z -oc:\\wxWidgets -aoa\n  - 7z x wxMSW-3.1.3_vc14x_x64_ReleaseDLL.7z -oc:\\wxWidgets -aoa\n  - set WXWIDGETSDIR=C:\\wxWidgets\n  - set WXWIDGETSLIBDIR=%WXWIDGETSDIR%\\lib\\vc14x_x64_dll\\\n  - set PATH=%PATH%;%WXWIDGETSLIBDIR%\n  # ====== Qt\n  - set QTDIR=C:\\Qt\\5.14.1\\msvc2017_64\n  - set PATH=%PATH%;%QTDIR%\\bin\n  # ====== NSIS for packaging\n  - choco install nsis\n  # ====== show final PATH\n  - PATH\n\nbefore_build:\n  - cd c:\\projects\\mrpt\n  - git submodule update --init --recursive\n  - mkdir build\n  # AppVeyor has a 90 minutes limit: disable some parts.\n  - cmake -S. -Bbuild -G \"Visual Studio 16 2019\" \\\n    -DMRPT_EIGEN_USE_EMBEDDED_VERSION=ON -DMRPT_BUILD_ASSIMP=OFF \\\n    -DOpenCV_DIR=%OPENCVDIR% -DwxWidgets_ROOT_DIR=%WXWIDGETSDIR% -DwxWidgets_LIB_DIR=%WXWIDGETSLIBDIR% \\\n    -DBUILD_APP_DifOdometry-Camera=OFF -DBUILD_APP_DifOdometry-Datasets=OFF \\\n    -DBUILD_APP_benchmarking-image-features=OFF \\\n    -DBUILD_APP_carmen2rawlog=OFF \\\n    -DBUILD_APP_carmen2simplemap=OFF \\\n    -DBUILD_APP_map-partition=OFF \\\n    -DBUILD_APP_rosbag2rawlog=OFF \\\n    -DBUILD_APP_simul-landmarks=OFF \\\n    -DBUILD_APP_simul-beacons=OFF \\\n    -DBUILD_APP_simul-gridmap=OFF \\\n    -DBUILD_APP_kinect-3d-slam=OFF \\\n    -DBUILD_APP_mrpt-performance=OFF \\\n    -DBUILD_APP_yaml2ini=OFF \\\n    -DBUILD_APP_ini2yaml=OFF \\\n    -DMRPT_WITH_KINECT=OFF\non_failure:\n  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n\n#---------------------------------#\n#      artifacts configuration    #\n#---------------------------------#\nartifacts:\n  - path: 'mrpt*.exe'\n\n#---------------------------------#\n#     deployment configuration    #\n#---------------------------------#\ndeploy:\n  - provider: GitHub\n    release: \"Release of v$(APPVEYOR_REPO_TAG_NAME) [Windows binaries]\"\n    description: 'Windows binary releases (nightly builds) from AppVeyor.'\n    auth_token:\n      secure: vUzG+a7umHCzqv0eUNXZS/dczNSMiJ37Ivuv50aIPXhYQenlxUiua+Merj/pjCmy\n    artifact: /.*\\.exe/\n    draft: false\n    prerelease: false\n    on:\n      APPVEYOR_REPO_TAG: true        # deploy on tag push only\n  - provider: GitHub\n    release: \"Windows nightly builds\"\n    description: '**Build timestamp: %APPVEYOR_REPO_COMMIT_TIMESTAMP%**\\nWindows binary releases (develop) from AppVeyor CI.\\nAPPVEYOR_BUILD_VERSION=%APPVEYOR_BUILD_VERSION%\\nGit commit: %APPVEYOR_REPO_COMMIT% %APPVEYOR_REPO_COMMIT_MESSAGE%'\n    auth_token:\n      secure: vUzG+a7umHCzqv0eUNXZS/dczNSMiJ37Ivuv50aIPXhYQenlxUiua+Merj/pjCmy\n    artifact: /.*\\.exe/\n    draft: false\n    prerelease: false\n    force_update: true\n    on:\n      branch: develop\n"
        },
        {
          "name": "cmakemodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mex",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "parse-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "python-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version_prefix.txt",
          "type": "blob",
          "size": 0.4794921875,
          "content": "2.14.8\n# IMPORTANT: This file is parsed by CMake, don't add any comment to\n# the first line.\n# This file is used in both Windows and Linux scripts to automatically\n# include MRPT version in C++ headers, documentation files, and makefiles.\n# Its first line must be three-part version number, e.g. 0.1.2\n#\n# IMPORTANT: Whenever this version gets bumped, also remember to update it in:\n# - appveyor.yml  => For Windows binary builds.\n# - doc/source/doxygen-docs/changelog.md  => The changelog.\n"
        }
      ]
    }
  ]
}