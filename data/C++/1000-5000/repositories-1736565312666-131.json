{
  "metadata": {
    "timestamp": 1736565312666,
    "page": 131,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "idealvin/coost",
      "stars": 4054,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": ".xmake\nbuild\nlib\nconfig.h\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.9560546875,
          "content": "cmake_minimum_required(VERSION 3.12)\n\nif(POLICY CMP0090)\n    cmake_policy(SET CMP0090 NEW)\nendif()\n\nproject(coost VERSION 3.0.0)\n\nif(MSVC)\n    enable_language(C CXX ASM_MASM)\nelse()\n    enable_language(C CXX ASM)\nendif()\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\nif(MSVC)\n    add_compile_options(/fp:fast /EHsc)\n    add_link_options(/SAFESEH:NO)\n    if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n        string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4\")\n    endif()\nelse()\n    add_compile_options(-Wall -O2 -g -Wno-sign-compare -Wno-strict-aliasing)\n    if(APPLE)\n        add_compile_options(-fno-pie)\n    endif()\nendif()\n\n\n# build with openssl 1.1.0+\noption(WITH_OPENSSL \"build with openssl\" OFF)\n\n# build with libcurl (openssl & zlib also required)\noption(WITH_LIBCURL \"build with libcurl\" OFF)\n\n# build with libbacktrace\noption(WITH_BACKTRACE \"build with libbacktrace\" OFF)\n\n# build with -fPIC\noption(FPIC \"build with -fPIC\" OFF)\n\n# build all projects (libco, gen, test, unitest)\noption(BUILD_ALL \"Build all projects\" OFF)\n\noption(DISABLE_HOOK \"disable hooks for system APIs\" OFF)\n\n# specify the value of L1 cache line size, 64 by default\nset(CACHE_LINE_SIZE \"64\" CACHE STRING \"set value of L1 cache line size\")\n\n# vs runtime, use MT\nif(MSVC)\n    option(STATIC_VS_CRT \"use /MT or /MTd\" OFF)\n\n    if(STATIC_VS_CRT)\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT\")\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd\")\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n    endif()\nendif()\n\nadd_subdirectory(src)\n\nif(BUILD_ALL)\n    enable_testing()\n    add_subdirectory(gen)\n    add_subdirectory(unitest)\n    add_subdirectory(test)\nendif()\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.6708984375,
          "content": "ARG BASE_IMAGE=ubuntu:18.04\nFROM ${BASE_IMAGE}\nLABEL maintainer=\"qixuxiang<qixuxiang@outlook.com>\"\nWORKDIR /home/co/\nRUN mv /etc/apt/sources.list /etc/apt/sources.list_bk\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN apt-get -y update && apt-get -y upgrade < /dev/null\nRUN apt-get install -y --no-install-recommends ca-certificates -y build-essential curl wget unzip git rsync dh-autoreconf pkg-config libtool libtool-bin libcurl4-openssl-dev zlib1g-dev openssl libssl-dev cmake gcc-7 g++-7\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.763671875,
          "content": "MIT License\n\nCopyright (c) 2019-2023 Alvin Yih <idealvin@qq.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n-------------------------------------------------------------------------------\nCoost includes code from the following projects, which have their own licenses:\n\n- [co/context](https://github.com/idealvin/coost/tree/master/src/co/context) [Apache-2.0] [Boost] (See [tbox](https://github.com/tboox/tbox/blob/master/LICENSE.md) by [ruki](https://github.com/waruqi))\n\n- [hash/crc16*](https://github.com/idealvin/coost/tree/master/src/hash) [BSD-3-Clause] (See [redis](https://github.com/antirez/redis/blob/unstable/COPYING) by [Salvatore Sanfilippo](https://github.com/antirez))\n\n- [hash/md5*](https://github.com/idealvin/coost/tree/master/src/hash) [public domain] (Written by Alexander Peslyak)\n\n- [hash/sha256*](https://github.com/idealvin/coost/tree/master/src/hash) [public domain] (from 7Zip by Igor Pavlov)\n\n- [hash/murmur_hash*](https://github.com/idealvin/coost/tree/master/src/hash) [public domain] [MIT for business purposes] (Written by Austin Appleby)\n\n- [dtoa_milo](https://github.com/idealvin/coost/blob/master/include/co/__/dtoa_milo.h) [MIT] (See [dtoa-benchmark](https://github.com/miloyip/dtoa-benchmark/blob/master/license.txt) by [Milo Yip](https://github.com/miloyip))\n\n- [StackWalker](https://github.com/idealvin/coost/tree/master/src/log) [BSD-2-Clause] (See [StackWalker](https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE) by [Jochen Kalmbach](https://github.com/JochenKalmbach))\n\n- [detours](https://github.com/idealvin/coost/tree/master/src/co/detours) [MIT] (See [Detours](https://github.com/microsoft/Detours/blob/master/LICENSE.md) by Microsoft)\n\n- [fishhook](https://github.com/facebook/fishhook) [BSD-3-Clause] (See [fishhook](https://github.com/facebook/fishhook/blob/main/LICENSE) by Facebook)\n"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 0.2861328125,
          "content": "#!/bin/bash\n\nif [[ \"$OSTYPE\" == \"msys\" ]]; then \n    echo \"don't run this on windows..\"\n    exit 0\nfi\n\ncd \"$(dirname \"$0\")\"\n\nsrc=`ls include/co/*.h include/co/*/*.h */*.cc */*/*.{h,cc,cpp} */*/*/*.{h,cc,cpp}`\n\nfor x in $src\ndo\n    if [ -f $x ]; then\n        sed -i 's/[ ]*$//g' $x\n    fi\ndone\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "makevsprj.sh",
          "type": "blob",
          "size": 0.0751953125,
          "content": "#!/bin/bash\nmkdir -p vs\nxmake project -k vs2019 -a \"x64,x86\" -m \"release\" vs\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 16.2587890625,
          "content": "# Coost\r\n\r\nEnglish | [简体中文](readme_cn.md)\r\n\r\n[![Linux Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/linux.yml?branch=master&logo=linux)](https://github.com/idealvin/coost/actions?query=workflow%3ALinux)\r\n[![Windows Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/win.yml?branch=master&logo=windows)](https://github.com/idealvin/coost/actions?query=workflow%3AWindows)\r\n[![Mac Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/macos.yml?branch=master&logo=apple)](https://github.com/idealvin/coost/actions?query=workflow%3AmacOS)\r\n[![Release](https://img.shields.io/github/release/idealvin/coost.svg)](https://github.com/idealvin/coost/releases)\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n**[A tiny boost library in C++11.](https://github.com/idealvin/coost)**\r\n\r\n\r\n\r\n## 0. Introduction\r\n\r\n**[coost](https://github.com/idealvin/coost)** is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.\r\n\r\nCoost, **co** for short, is like [boost](https://www.boost.org/), but more lightweight, **the static library built on linux or mac is only about 1MB in size**. However, it still provides enough powerful features:\r\n\r\n<table>\r\n<tr><td width=33% valign=top>\r\n\r\n- Command line and config file parser (flag)\r\n- **High performance log library (log)**\r\n- Unit testing framework\r\n- Bechmark testing framework\r\n- **go-style coroutine**\r\n- Coroutine-based network library\r\n- **JSON RPC framework**\r\n\r\n</td><td width=34% valign=top>\r\n\r\n- Atomic operation (atomic)\r\n- **Efficient stream (fastream)**\r\n- Efficient string (fastring)\r\n- String utility (str)\r\n- Time library (time)\r\n- Thread library (thread)\r\n- Timed Task Scheduler\r\n\r\n</td><td valign=top>\r\n\r\n- **God-oriented programming**\r\n- Efficient JSON library\r\n- Hash library\r\n- Path library\r\n- File utilities (fs)\r\n- System operations (os)\r\n- **Fast memory allocator**\r\n \r\n</td></tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n## 1. Sponsor\r\n\r\nCoost needs your help. If you are using it or like it, you may consider becoming a sponsor. Thank you very much!\r\n\r\n- [Github Sponsors](https://github.com/sponsors/idealvin)\r\n- [A cup of coffee](https://coostdocs.github.io/en/about/sponsor/)\r\n\r\n\r\n\r\n\r\n## 2. Documents\r\n\r\n- English: [github](https://coostdocs.github.io/en/about/co/) | [gitee](https://coostdocs.gitee.io/en/about/co/)\r\n- 简体中文: [github](https://coostdocs.github.io/cn/about/co/) | [gitee](https://coostdocs.gitee.io/cn/about/co/)\r\n\r\n\r\n\r\n\r\n## 3. Core features\r\n\r\n\r\n### 3.0 God-oriented programming\r\n\r\n[co/god.h](https://github.com/idealvin/coost/blob/master/include/co/god.h) provides some features based on templates.\r\n\r\n```cpp\r\n#include \"co/god.h\"\r\n\r\nvoid f() {\r\n    god::bless_no_bugs();\r\n    god::is_same<T, int, bool>(); // T is int or bool?\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.1 flag\r\n\r\n**[flag](https://coostdocs.github.io/en/co/flag/)** is a command line and config file parser. It is similar to gflags, but more powerful:\r\n- Support parameters from both command-line and config file.\r\n- Support automatic generation of the config file.\r\n- Support flag aliases.\r\n- Flag of integer type, the value can take a unit `k,m,g,t,p`.\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/cout.h\"\r\n\r\nDEF_bool(x, false, \"x\");\r\nDEF_bool(y, true, \"y\");\r\nDEF_bool(debug, false, \"dbg\", d);\r\nDEF_uint32(u, 0, \"xxx\");\r\nDEF_string(s, \"\", \"xx\");\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    cout << \"x: \" << FLG_x << '\\n';\r\n    cout << \"y: \" << FLG_y << '\\n';\r\n    cout << \"debug: \" << FLG_debug << '\\n';\r\n    cout << \"u: \" << FLG_u << '\\n';\r\n    cout << FLG_s << \"|\" << FLG_s.size() << '\\n';\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above example, the macros start with `DEF_` define 4 flags. Each flag corresponds to a global variable, whose name is `FLG_` plus the flag name. The flag `debug` has an alias `d`. After building, the above code can run as follow:\r\n\r\n```sh\r\n./xx                  # Run with default configs\r\n./xx -x -s good       # x -> true, s -> \"good\"\r\n./xx -debug           # debug -> true\r\n./xx -xd              # x -> true, debug -> true\r\n./xx -u 8k            # u -> 8192\r\n\r\n./xx -mkconf          # Automatically generate a config file: xx.conf\r\n./xx xx.conf          # run with a config file\r\n./xx -conf xx.conf    # Same as above\r\n```\r\n\r\n\r\n\r\n### 3.2 log\r\n\r\n**[log](https://coostdocs.github.io/en/co/log/)** is a high-performance log library, some components in coost use it to print logs.\r\n\r\nlog supports two types of logs: one is level log, which is divided into 5 levels: debug, info, warning, error and fatal, **printing a fatal log will terminate the program**; the other is topic log, logs are grouped by topic, and logs of different topics are written to different files.\r\n\r\n```cpp\r\n#include \"co/log.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    TLOG(\"xx\") << \"s\" << 23; // topic log\r\n    DLOG << \"hello \" << 23;  // debug\r\n    LOG << \"hello \" << 23;   // info\r\n    WLOG << \"hello \" << 23;  // warning\r\n    ELOG << \"hello \" << 23;  // error\r\n    FLOG << \"hello \" << 23;  // fatal\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nco/log also provides a series of `CHECK` macros, which is an enhanced version of `assert`, and they will not be cleared in debug mode.\r\n\r\n```cpp\r\nvoid* p = malloc(32);\r\nCHECK(p != NULL) << \"malloc failed..\";\r\nCHECK_NE(p, NULL) << \"malloc failed..\";\r\n```\r\n\r\nlog is very fast, the following are some test results:\r\n\r\n| platform | glog | co/log | speedup |\r\n| ------ | ------ | ------ | ------ |\r\n| win2012 HHD | 1.6MB/s | 180MB/s | 112.5 |\r\n| win10 SSD | 3.7MB/s | 560MB/s | 151.3 |\r\n| mac SSD | 17MB/s | 450MB/s | 26.4 |\r\n| linux SSD | 54MB/s | 1023MB/s | 18.9 |\r\n\r\nThe above is the write speed of co/log and glog (single thread, 1 million logs). It can be seen that co/log is nearly two orders of magnitude faster than glog.\r\n\r\n| threads | linux co/log | linux spdlog | win co/log | win spdlog | speedup |\r\n| ------ | ------ | ------ | ------ | ------ | ------ |\r\n| 1 | 0.087235 | 2.076172 | 0.117704 | 0.461156 | 23.8/3.9 |\r\n| 2 | 0.183160 | 3.729386 | 0.158122 | 0.511769 | 20.3/3.2 |\r\n| 4 | 0.206712 | 4.764238 | 0.316607 | 0.743227 | 23.0/2.3 |\r\n| 8 | 0.302088 | 3.963644 | 0.406025 | 1.417387 | 13.1/3.5 |\r\n\r\nThe above is the time of [printing 1 million logs with 1, 2, 4, and 8 threads](https://github.com/idealvin/coost/tree/benchmark), in seconds. Speedup is the performance improvement of co/log compared to spdlog on linux and windows platforms.\r\n\r\n\r\n\r\n### 3.3 unitest\r\n\r\n[unitest](https://coostdocs.github.io/en/co/unitest/) is a simple and easy-to-use unit test framework. Many components in coost use it to write unit test code, which guarantees the stability of coost.\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n#include \"co/os.h\"\r\n\r\nDEF_test(os) {\r\n    DEF_case(homedir) {\r\n        EXPECT_NE(os::homedir(), \"\");\r\n    }\r\n\r\n    DEF_case(cpunum) {\r\n        EXPECT_GT(os::cpunum(), 0);\r\n    }\r\n}\r\n \r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    unitest::run_tests();\r\n    return 0;\r\n}\r\n```\r\n\r\nThe above is a simple example. The `DEF_test` macro defines a test unit, which is actually a function (a method in a class). The `DEF_case` macro defines test cases, and each test case is actually a code block.\r\n\r\nThe directory [unitest](https://github.com/idealvin/coost/tree/master/unitest) contains the unit test code in coost. Users can run unitest with the following commands:\r\n\r\n```sh\r\nxmake r unitest      # Run all test cases\r\nxmake r unitest -os  # Run test cases in the os unit\r\n```\r\n\r\n\r\n\r\n### 3.4 JSON\r\n\r\nIn coost v3.0, **[Json](https://github.com/idealvin/coost/blob/master/include/co/json.h)** provides **fluent APIs**, which is more convenient to use.\r\n\r\n```cpp\r\n// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\r\nco::Json x = {\r\n    { \"a\", 23 },\r\n    { \"b\", false },\r\n    { \"s\", \"123\" },\r\n    { \"v\", {1,2,3} },\r\n    { \"o\", {\r\n        {\"xx\", 0}\r\n    }},\r\n};\r\n\r\n// equal to x\r\nco::Json y = Json()\r\n    .add_member(\"a\", 23)\r\n    .add_member(\"b\", false)\r\n    .add_member(\"s\", \"123\")\r\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\r\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\r\n\r\nx.get(\"a\").as_int();       // 23\r\nx.get(\"s\").as_string();    // \"123\"\r\nx.get(\"s\").as_int();       // 123, string -> int\r\nx.get(\"v\", 0).as_int();    // 1\r\nx.get(\"v\", 2).as_int();    // 3\r\nx.get(\"o\", \"xx\").as_int(); // 0\r\n\r\nx[\"a\"] == 23;          // true\r\nx[\"s\"] == \"123\";       // true\r\nx.get(\"o\", \"xx\") != 0; // false\r\n```\r\n\r\n| os | co/json stringify | co/json parse | rapidjson stringify | rapidjson parse | speedup |\r\n| ------ | ------ | ------ | ------ | ------ | ------ |\r\n| win | 569 | 924 | 2089 | 2495 | 3.6/2.7 |\r\n| mac | 783 | 1097 | 1289 | 1658 | 1.6/1.5 |\r\n| linux | 468 | 764 | 1359 | 1070 | 2.9/1.4 |\r\n\r\nThe above is the average time of stringifying and parsing minimized [twitter.json](https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json), in microseconds (us), speedup is the performance improvement of co/json compared to rapidjson.\r\n\r\n\r\n\r\n### 3.5 Coroutine\r\n\r\ncoost has implemented a [go-style](https://github.com/golang/go) coroutine, which has the following features:\r\n\r\n- Support multi-thread scheduling, the default number of threads is the number of system CPU cores.\r\n- Shared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low.\r\n- There is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).\r\n- Support coroutine synchronization events, coroutine locks, channels, and waitgroups.\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    co::wait_group wg;\r\n    wg.add(2);\r\n\r\n    go([wg](){\r\n        LOG << \"hello world\";\r\n        wg.done();\r\n    });\r\n\r\n    go([wg](){\r\n        LOG << \"hello again\";\r\n        wg.done();\r\n    });\r\n\r\n    wg.wait();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above code, the coroutines created by `go()` will be distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:\r\n\r\n```cpp\r\n// run f1 and f2 in the same scheduler\r\nauto s = co::next_sched();\r\ns->go(f1);\r\ns->go(f2);\r\n\r\n// run f in all schedulers\r\nfor (auto& s : co::scheds()) {\r\n    s->go(f);\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.6 network programming\r\n\r\ncoost provides a coroutine-based network programming framework:\r\n\r\n- **[coroutineized socket API](https://coostdocs.github.io/en/co/net/sock/)**, similar in form to the system socket API, users familiar with socket programming can easily write high-performance network programs in a synchronous manner.\r\n- [TCP](https://coostdocs.github.io/en/co/net/tcp/), [HTTP](https://coostdocs.github.io/en/co/net/http/), [RPC](https://coostdocs.github.io/en/co/net/rpc/) and other high-level network programming components, compatible with IPv6, also support SSL, it is more convenient to use than socket API.\r\n\r\n\r\n**RPC server**\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n#include \"co/rpc.h\"\r\n#include \"co/time.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    rpc::Server()\r\n        .add_service(new xx::HelloWorldImpl)\r\n        .start(\"127.0.0.1\", 7788, \"/xx\");\r\n\r\n    for (;;) sleep::sec(80000);\r\n    return 0;\r\n}\r\n```\r\n\r\n`rpc::Server` also supports HTTP protocol, you may use the POST method to call the RPC service:\r\n\r\n```sh\r\ncurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\r\n```\r\n\r\n\r\n**Static web server**\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/http.h\"\r\n\r\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    so::easy(FLG_d.c_str()); // mum never have to worry again\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n**HTTP server**\r\n\r\n```cpp\r\nvoid cb(const http::Req& req, http::Res& res) {\r\n    if (req.is_method_get()) {\r\n        if (req.url() == \"/hello\") {\r\n            res.set_status(200);\r\n            res.set_body(\"hello world\");\r\n        } else {\r\n            res.set_status(404);\r\n        }\r\n    } else {\r\n        res.set_status(405); // method not allowed\r\n    }\r\n}\r\n\r\n// http\r\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\r\n\r\n// https\r\nhttp::Server().on_req(cb).start(\r\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\r\n);\r\n```\r\n\r\n\r\n**HTTP client**\r\n\r\n```cpp\r\nvoid f() {\r\n    http::Client c(\"https://github.com\");\r\n\r\n    c.get(\"/\");\r\n    LOG << \"response code: \"<< c.status();\r\n    LOG << \"body size: \"<< c.body().size();\r\n    LOG << \"Content-Length: \"<< c.header(\"Content-Length\");\r\n    LOG << c.header();\r\n\r\n    c.post(\"/hello\", \"data xxx\");\r\n    LOG << \"response code: \"<< c.status();\r\n}\r\n\r\ngo(f);\r\n```\r\n\r\n\r\n\r\n\r\n## 4. Code composition\r\n\r\n- [include](https://github.com/idealvin/coost/tree/master/include)\r\n\r\n  Header files of coost.\r\n\r\n- [src](https://github.com/idealvin/coost/tree/master/src)\r\n\r\n  Source files of coost, built as libco.\r\n\r\n- [test](https://github.com/idealvin/coost/tree/master/test)\r\n\r\n  Test code, each `.cc` file will be compiled into a separate test program.\r\n\r\n- [unitest](https://github.com/idealvin/coost/tree/master/unitest)\r\n\r\n  Unit test code, each `.cc` file corresponds to a different test unit, and all code will be compiled into a single test program.\r\n\r\n- [gen](https://github.com/idealvin/coost/tree/master/gen)\r\n\r\n  A code generator for the RPC framework.\r\n\r\n\r\n\r\n\r\n## 5. Building\r\n\r\n### 5.1 Compilers required\r\n\r\nTo build coost, you need a compiler that supports C++11:\r\n\r\n- Linux: [gcc 4.8+](https://gcc.gnu.org/projects/cxx-status.html#cxx11)\r\n- Mac: [clang 3.3+](https://clang.llvm.org/cxx_status.html)\r\n- Windows: [vs2015+](https://visualstudio.microsoft.com/)\r\n\r\n\r\n### 5.2 Build with xmake\r\n\r\ncoost recommends using [xmake](https://github.com/xmake-io/xmake) as the build tool.\r\n\r\n\r\n#### 5.2.1 Quick start\r\n\r\n```sh\r\n# All commands are executed in the root directory of coost (the same below)\r\nxmake      # build libco by default\r\nxmake -a   # build all projects (libco, gen, test, unitest)\r\n```\r\n\r\n\r\n#### 5.2.2 Build shared library\r\n\r\n```sh\r\nxmake f -k shared\r\nxmake -v\r\n```\r\n\r\n#### 5.2.3 Build with mingw\r\n\r\n```sh\r\nxmake f -p mingw\r\nxmake -v\r\n```\r\n\r\n\r\n#### 5.2.4 Enable HTTP/SSL features\r\n\r\n```sh\r\nxmake f --with_libcurl=true --with_openssl=true\r\nxmake -v\r\n```\r\n\r\n\r\n#### 5.2.5 Install libco\r\n\r\n```sh\r\n# Install header files and libco by default.\r\nxmake install -o pkg         # package related files to the pkg directory\r\nxmake i -o pkg               # the same as above\r\nxmake install -o /usr/local  # install to the /usr/local directory\r\n```\r\n\r\n\r\n#### 5.2.6 Install libco from xrepo\r\n\r\n```sh\r\nxrepo install -f \"openssl=true,libcurl=true\" coost\r\n```\r\n\r\n\r\n\r\n### 5.3 Build with cmake\r\n\r\n[izhengfan](https://github.com/izhengfan) helped to provide cmake support, [SpaceIm](https://github.com/SpaceIm) improved it and made it perfect.\r\n\r\n\r\n#### 5.3.1 Build libco\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake ..\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.2 Build all projects\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake .. -DBUILD_ALL=ON\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.3 Enable HTTP/SSL features\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake .. -DWITH_LIBCURL=ON -DWITH_OPENSSL=ON\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.4 Build shared library\r\n\r\n```sh\r\ncmake .. -DBUILD_SHARED_LIBS=ON\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.5 Find coost in Cmake\r\n\r\n```cmake\r\nfind_package(coost REQUIRED CONFIG)\r\ntarget_link_libraries(userTarget coost::co)\r\n```\r\n\r\n\r\n#### 5.3.6 vcpkg & conan\r\n\r\n```sh\r\nvcpkg install coost:x64-windows\r\n\r\n# HTTP & SSL support\r\nvcpkg install coost[libcurl,openssl]:x64-windows\r\n\r\nconan install coost\r\n```\r\n\r\n\r\n\r\n\r\n## 6. License\r\n\r\nThe MIT license. coost contains codes from some other projects, which have their own licenses, see details in [LICENSE.md](https://github.com/idealvin/coost/blob/master/LICENSE.md).\r\n\r\n\r\n\r\n\r\n## 7. Special thanks\r\n\r\n- The code of [co/context](https://github.com/idealvin/coost/tree/master/src/co/context) is from [tbox](https://github.com/tboox/tbox) by [ruki](https://github.com/waruqi), special thanks!\r\n- The early English documents of co are translated by [Leedehai](https://github.com/Leedehai) and [daidai21](https://github.com/daidai21), special thanks!\r\n- [ruki](https://github.com/waruqi) has helped to improve the xmake building scripts, thanks in particular!\r\n- [izhengfan](https://github.com/izhengfan) provided cmake building scripts, thank you very much!\r\n- [SpaceIm](https://github.com/SpaceIm) has improved the cmake building scripts, and provided support for `find_package`. Really great help, thank you!\r\n"
        },
        {
          "name": "readme_cn.md",
          "type": "blob",
          "size": 16.1552734375,
          "content": "# coost\r\n\r\n[English](readme.md) | 简体中文\r\n[![Linux Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/linux.yml?branch=master&logo=linux)](https://github.com/idealvin/coost/actions?query=workflow%3ALinux)\r\n[![Windows Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/win.yml?branch=master&logo=windows)](https://github.com/idealvin/coost/actions?query=workflow%3AWindows)\r\n[![Mac Build](https://img.shields.io/github/actions/workflow/status/idealvin/coost/macos.yml?branch=master&logo=apple)](https://github.com/idealvin/coost/actions?query=workflow%3AmacOS)\r\n[![Release](https://img.shields.io/github/release/idealvin/coost.svg)](https://github.com/idealvin/coost/releases)\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n\r\n**[A tiny boost library in C++11.](https://github.com/idealvin/coost)**\r\n\r\n\r\n\r\n## 0. coost 简介\r\n\r\n**[coost](https://github.com/idealvin/coost)** 是一个**兼具性能与易用性**的跨平台 C++ 基础库，其目标是打造一把 C++ 开发神器，让 C++ 编程变得简单、轻松、愉快。\r\n\r\ncoost 简称为 co，曾被称为小型 [boost](https://www.boost.org/) 库，与 boost 相比，coost 小而精美，在 **linux 与 mac 上编译出来的静态库仅 1M 左右大小**，却包含了不少强大的功能：\r\n\r\n<table>\r\n<tr><td width=33% valign=top>\r\n\r\n- 命令行与配置文件解析(flag)\r\n- **高性能日志库(log)**\r\n- 单元测试框架\r\n- 基准测试框架\r\n- **go-style 协程**\r\n- 基于协程的网络编程框架\r\n- **基于 JSON 的 RPC 框架**\r\n\r\n</td><td width=34% valign=top>\r\n\r\n- 原子操作(atomic)\r\n- **高效字符流(fastream)**\r\n- 高效字符串(fastring)\r\n- 字符串操作(str)\r\n- 时间库(time)\r\n- 线程库(thread)\r\n- 定时任务调度器\r\n\r\n</td><td valign=top>\r\n\r\n- **面向玄学编程**\r\n- 高效 JSON 库\r\n- hash 库\r\n- path 库\r\n- 文件系统操作(fs)\r\n- 系统操作(os)\r\n- **高性能内存分配器**\r\n\r\n</td></tr>\r\n</table>\r\n\r\n\r\n## 1. 赞助\r\n\r\ncoost 的发展离不开大家的帮助，如果您在使用或者喜欢 coost，可以考虑赞助本项目，非常感谢。\r\n\r\n- [Github Sponsors](https://github.com/sponsors/idealvin)\r\n- [给作者来杯咖啡](https://coostdocs.gitee.io/cn/about/sponsor/)\r\n\r\n\r\n\r\n\r\n## 2. 参考文档\r\n\r\n- 简体中文: [github](https://coostdocs.github.io/cn/about/co/) | [gitee](https://coostdocs.gitee.io/cn/about/co/)\r\n- English: [github](https://coostdocs.github.io/en/about/co/) | [gitee](https://coostdocs.gitee.io/en/about/co/)\r\n\r\n\r\n\r\n\r\n## 3. 核心组件\r\n\r\n\r\n### 3.0 面向玄学编程\r\n\r\n[co/god.h](https://github.com/idealvin/coost/blob/master/include/co/god.h) 提供模板相关的一些功能。模板用到深处有点玄，有些 C++ 程序员称之为面向玄学编程。\r\n\r\n```cpp\r\n#include \"co/god.h\"\r\n\r\nvoid f() {\r\n    god::bless_no_bugs();\r\n    god::is_same<T, int, bool>(); // T is int or bool?\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.1 flag\r\n\r\n**[flag](https://coostdocs.github.io/cn/co/flag/)** 是一个命令行参数与配置文件解析库，用法与 gflags 类似，但功能更加强大：\r\n- 支持从命令行、配置文件传入参数。\r\n- 支持自动生成配置文件。\r\n- 支持 flag 别名。\r\n- 整数类型的 flag，值可以带单位 `k,m,g,t,p`，不分大小写。\r\n\r\n```cpp\r\n// xx.cc\r\n#include \"co/flag.h\"\r\n#include \"co/cout.h\"\r\n\r\nDEF_bool(x, false, \"x\");\r\nDEF_bool(y, true, \"y\");\r\nDEF_bool(debug, false, \"dbg\", d);\r\nDEF_uint32(u, 0, \"xxx\");\r\nDEF_string(s, \"\", \"xx\");\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    cout << \"x: \" << FLG_x << '\\n';\r\n    cout << \"y: \" << FLG_y << '\\n';\r\n    cout << \"debug: \" << FLG_debug << '\\n';\r\n    cout << \"u: \" << FLG_u << '\\n';\r\n    cout << FLG_s << \"|\" << FLG_s.size() << '\\n';\r\n    return 0;\r\n}\r\n```\r\n\r\n上述代码中 `DEF_` 开头的宏定义了 4 个 flag，每个 flag 对应一个全局变量，变量名是 `FLG_` 加 flag 名，其中 flag `debug` 还有一个别名 `d`。上述代码编译后，可以按如下方式运行：\r\n\r\n```sh\r\n./xx                  # 按默认配置运行\r\n./xx -x -s good       # x -> true, s -> \"good\"\r\n./xx -debug           # debug -> true\r\n./xx -xd              # x -> true, debug -> true\r\n./xx -u 8k            # u -> 8192, 整数可带单位(k,m,g,t,p), 不分大小写\r\n\r\n./xx -mkconf          # 自动生成配置文件 xx.conf\r\n./xx xx.conf          # 从配置文件传入参数\r\n./xx -conf xx.conf    # 与上同\r\n```\r\n\r\n\r\n\r\n### 3.2 log\r\n\r\n**[log](https://coostdocs.github.io/cn/co/log/)** 是一个高性能日志组件，coost 中的一些组件用它打印日志。\r\n\r\nlog 支持两种类型的日志：一种是 level log，分为 debug, info, warning, error, fatal 5 个级别，**打印 fatal 级别的日志会终止程序的运行**；另一种是 topic log，日志按 topic 分类，不同 topic 的日志写入不同的文件。\r\n\r\n```cpp\r\n#include \"co/log.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    TLOG(\"xx\") << \"s\" << 23; // topic log\r\n    DLOG << \"hello \" << 23;  // debug\r\n    LOG << \"hello \" << 23;   // info\r\n    WLOG << \"hello \" << 23;  // warning\r\n    ELOG << \"hello \" << 23;  // error\r\n    FLOG << \"hello \" << 23;  // fatal\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nlog 还提供了一系列 `CHECK` 宏，可以视为加强版的 `assert`，它们在 debug 模式下也不会被清除。CHECK 断言失败时，log 会打印函数调用栈信息，然后终止程序的运行。\r\n\r\n```cpp\r\nvoid* p = malloc(32);\r\nCHECK(p != NULL) << \"malloc failed..\";\r\nCHECK_NE(p, NULL) << \"malloc failed..\";\r\n```\r\n\r\nlog 速度非常快，下面是一些测试结果：\r\n\r\n| platform | glog | co/log | speedup |\r\n| ------ | ------ | ------ | ------ |\r\n| win2012 HHD | 1.6MB/s | 180MB/s | 112.5 |\r\n| win10 SSD | 3.7MB/s | 560MB/s | 151.3 |\r\n| mac SSD | 17MB/s | 450MB/s | 26.4 |\r\n| linux SSD | 54MB/s | 1023MB/s | 18.9 |\r\n\r\n上表是 co/log 与 glog 在单线程连续打印 100 万条日志时测得的写速度对比，可以看到 co/log 比 glog 快了近两个数量级。\r\n\r\n| threads | linux co/log | linux spdlog | win co/log | win spdlog | speedup |\r\n| ------ | ------ | ------ | ------ | ------ | ------ |\r\n| 1 | 0.087235 | 2.076172 | 0.117704 | 0.461156 | 23.8/3.9 |\r\n| 2 | 0.183160 | 3.729386 | 0.158122 | 0.511769 | 20.3/3.2 |\r\n| 4 | 0.206712 | 4.764238 | 0.316607 | 0.743227 | 23.0/2.3 |\r\n| 8 | 0.302088 | 3.963644 | 0.406025 | 1.417387 | 13.1/3.5 |\r\n\r\n上表是分别[用 1、2、4、8 个线程打印 100 万条日志](https://github.com/idealvin/coost/tree/benchmark)的耗时，单位为秒，speedup 是 co/log 在 linux、windows 平台相对于 spdlog 的性能提升倍数。\r\n\r\n\r\n\r\n### 3.3 unitest\r\n\r\n**[unitest](https://coostdocs.github.io/cn/co/unitest/)** 是一个简单易用的单元测试框架，coost 中的很多组件用它写单元测试代码，为 coost 的稳定性提供了重要保障。\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n#include \"co/os.h\"\r\n\r\nDEF_test(os) {\r\n    DEF_case(homedir) {\r\n        EXPECT_NE(os::homedir(), \"\");\r\n    }\r\n\r\n    DEF_case(cpunum) {\r\n        EXPECT_GT(os::cpunum(), 0);\r\n    }\r\n}\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    unitest::run_tests();\r\n    return 0;\r\n}\r\n```\r\n\r\n上面是一个简单的例子，`DEF_test` 宏定义了一个测试单元，实际上就是一个函数(类中的方法)。`DEF_case` 宏定义了测试用例，每个测试用例实际上就是一个代码块。\r\n\r\n[unitest](https://github.com/idealvin/coost/tree/master/unitest) 目录下面是 coost 中的单元测试代码，编译后可执行下述命令运行：\r\n\r\n```sh\r\nxmake r unitest      # 运行所有单元测试用例\r\nxmake r unitest -os  # 仅运行 os 单元中的测试用例\r\n```\r\n\r\n\r\n\r\n### 3.4 JSON\r\n\r\ncoost v3.0 中，**[Json](https://github.com/idealvin/coost/blob/master/include/co/json.h)** 采用**流畅(fluent)接口设计**，用起来更加方便。\r\n\r\n```cpp\r\n// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\r\nco::Json x = {\r\n    { \"a\", 23 },\r\n    { \"b\", false },\r\n    { \"s\", \"123\" },\r\n    { \"v\", {1,2,3} },\r\n    { \"o\", {\r\n        {\"xx\", 0}\r\n    }},\r\n};\r\n\r\n// equal to x\r\nco::Json y = Json()\r\n    .add_member(\"a\", 23)\r\n    .add_member(\"b\", false)\r\n    .add_member(\"s\", \"123\")\r\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\r\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\r\n\r\nx.get(\"a\").as_int();       // 23\r\nx.get(\"s\").as_string();    // \"123\"\r\nx.get(\"s\").as_int();       // 123, string -> int\r\nx.get(\"v\", 0).as_int();    // 1\r\nx.get(\"v\", 2).as_int();    // 3\r\nx.get(\"o\", \"xx\").as_int(); // 0\r\n\r\nx[\"a\"] == 23;          // true\r\nx[\"s\"] == \"123\";       // true\r\nx.get(\"o\", \"xx\") != 0; // false\r\n```\r\n\r\n下面是 co/json 与 rapidjson 的性能对比：\r\n\r\n| os | co/json stringify | co/json parse | rapidjson stringify | rapidjson parse | speedup |\r\n| ------ | ------ | ------ | ------ | ------ | ------ |\r\n| win | 569 | 924 | 2089 | 2495 | 3.6/2.7 |\r\n| mac | 783 | 1097 | 1289 | 1658 | 1.6/1.5 |\r\n| linux | 468 | 764 | 1359 | 1070 | 2.9/1.4 |\r\n\r\n上表是将 [twitter.json](https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json) 最小化后测得的 stringify 及 parse 的平均耗时，单位为微秒(us)，speedup 是 co/json 在 stringify、parse 方面相对于 rapidjson 的性能提升倍数。\r\n\r\n\r\n\r\n### 3.5 协程\r\n\r\ncoost 实现了类似 golang 中 goroutine 的协程机制，它有如下特性：\r\n\r\n- 支持多线程调度，默认线程数为系统 CPU 核数。\r\n- 共享栈，同一线程中的协程共用若干个栈(大小默认为 1MB)，内存占用低。\r\n- 各协程之间为平级关系，可以在任何地方(包括在协程中)创建新的协程。\r\n- 支持协程同步事件、协程锁、channel、waitgroup 等协程同步机制。\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    co::wait_group wg;\r\n    wg.add(2);\r\n\r\n    go([wg](){\r\n        LOG << \"hello world\";\r\n        wg.done();\r\n    });\r\n\r\n    go([wg](){\r\n        LOG << \"hello again\";\r\n        wg.done();\r\n    });\r\n\r\n    wg.wait();\r\n    return 0;\r\n}\r\n```\r\n\r\n上面的代码中，`go()` 创建的协程会分配到不同的调度线程中。用户也可以自行控制协程的调度：\r\n\r\n```cpp\r\n// run f1 and f2 in the same scheduler\r\nauto s = co::next_sched();\r\ns->go(f1);\r\ns->go(f2);\r\n\r\n// run f in all schedulers\r\nfor (auto& s : co::scheds()) {\r\n    s->go(f);\r\n}\r\n```\r\n\r\n\r\n\r\n### 3.6 网络编程\r\n\r\ncoost 提供了一套基于协程的网络编程框架:\r\n\r\n- **[协程化的 socket API](https://coostdocs.github.io/cn/co/net/sock/)**，形式上与系统 socket API 类似，熟悉 socket 编程的用户，可以轻松的用同步的方式写出高性能的网络程序。\r\n- [TCP](https://coostdocs.github.io/cn/co/net/tcp/)、[HTTP](https://coostdocs.github.io/cn/co/net/http/)、[RPC](https://coostdocs.github.io/cn/co/net/rpc/) 等高层网络编程组件，兼容 IPv6，同时支持 SSL，用起来比 socket API 更方便。\r\n\r\n\r\n**RPC server**\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n#include \"co/rpc.h\"\r\n#include \"co/time.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n\r\n    rpc::Server()\r\n        .add_service(new xx::HelloWorldImpl)\r\n        .start(\"127.0.0.1\", 7788, \"/xx\");\r\n\r\n    for (;;) sleep::sec(80000);\r\n    return 0;\r\n}\r\n```\r\n\r\nrpc::Server 同时支持 HTTP 协议，可以用 HTTP 的 POST 方法调用 RPC 服务：\r\n\r\n```sh\r\ncurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\r\n```\r\n\r\n\r\n**静态 web server**\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/http.h\"\r\n\r\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\r\n\r\nint main(int argc, char** argv) {\r\n    flag::parse(argc, argv);\r\n    so::easy(FLG_d.c_str()); // mum never have to worry again\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n**HTTP server**\r\n\r\n```cpp\r\nvoid cb(const http::Req& req, http::Res& res) {\r\n    if (req.is_method_get()) {\r\n        if (req.url() == \"/hello\") {\r\n            res.set_status(200);\r\n            res.set_body(\"hello world\");\r\n        } else {\r\n            res.set_status(404);\r\n        }\r\n    } else {\r\n        res.set_status(405); // method not allowed\r\n    }\r\n}\r\n\r\n// http\r\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\r\n\r\n// https\r\nhttp::Server().on_req(cb).start(\r\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\r\n);\r\n```\r\n\r\n\r\n**HTTP client**\r\n\r\n```cpp\r\nvoid f() {\r\n    http::Client c(\"https://github.com\");\r\n\r\n    c.get(\"/\");\r\n    LOG << \"response code: \"<< c.status();\r\n    LOG << \"body size: \"<< c.body().size();\r\n    LOG << \"Content-Length: \"<< c.header(\"Content-Length\");\r\n    LOG << c.header();\r\n\r\n    c.post(\"/hello\", \"data xxx\");\r\n    LOG << \"response code: \"<< c.status();\r\n}\r\n\r\ngo(f);\r\n```\r\n\r\n\r\n\r\n\r\n## 4. 代码构成\r\n\r\n- [include](https://github.com/idealvin/coost/tree/master/include)  \r\n\r\n  coost 的头文件。\r\n\r\n- [src](https://github.com/idealvin/coost/tree/master/src)  \r\n\r\n  coost 的源代码，编译生成 libco。\r\n\r\n- [test](https://github.com/idealvin/coost/tree/master/test)  \r\n\r\n  测试代码，每个 `.cc` 文件都会编译成一个单独的测试程序。\r\n\r\n- [unitest](https://github.com/idealvin/coost/tree/master/unitest)  \r\n\r\n  单元测试代码，每个 `.cc` 文件对应不同的测试单元，所有代码都会编译到单个测试程序中。\r\n\r\n- [gen](https://github.com/idealvin/coost/tree/master/gen)  \r\n\r\n  代码生成工具。\r\n\r\n\r\n\r\n\r\n## 5. 构建\r\n\r\n### 5.1 编译器要求\r\n\r\n编译 coost 需要编译器支持 C++11：\r\n\r\n- Linux: [gcc 4.8+](https://gcc.gnu.org/projects/cxx-status.html#cxx11)\r\n- Mac: [clang 3.3+](https://clang.llvm.org/cxx_status.html)\r\n- Windows: [vs2015+](https://visualstudio.microsoft.com/)\r\n\r\n\r\n### 5.2 用 xmake 构建\r\n\r\ncoost 推荐使用 [xmake](https://github.com/xmake-io/xmake) 作为构建工具。\r\n\r\n\r\n#### 5.2.1 快速上手\r\n\r\n```sh\r\n# 所有命令都在 coost 根目录执行，后面不再说明\r\nxmake       # 默认构建 libco\r\nxmake -a    # 构建所有项目 (libco, gen, test, unitest)\r\n```\r\n\r\n\r\n#### 5.2.2 构建动态库\r\n\r\n```sh\r\nxmake f -k shared\r\nxmake -v\r\n```\r\n\r\n\r\n#### 5.2.3 基于 mingw 构建\r\n\r\n```sh\r\nxmake f -p mingw\r\nxmake -v\r\n```\r\n\r\n\r\n#### 5.2.4 启用 HTTP/SSL 特性\r\n\r\n```sh\r\nxmake f --with_libcurl=true --with_openssl=true\r\nxmake -v\r\n```\r\n\r\n\r\n#### 5.2.5 安装 libco\r\n\r\n```sh\r\nxmake install -o pkg          # 打包安装到 pkg 目录\r\nxmake i -o pkg                # 同上\r\nxmake install -o /usr/local   # 安装到 /usr/local 目录\r\n```\r\n\r\n\r\n#### 5.2.6 从 xrepo 安装 libco\r\n\r\n```sh\r\nxrepo install -f \"openssl=true,libcurl=true\" coost\r\n```\r\n\r\n\r\n\r\n### 5.3 用 cmake 构建\r\n\r\n[izhengfan](https://github.com/izhengfan) 帮忙提供了 cmake 支持，[SpaceIm](https://github.com/SpaceIm) 进一步完善了 cmake 脚本。\r\n\r\n\r\n#### 5.3.1 构建 libco\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake ..\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.2 构建所有项目\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake .. -DBUILD_ALL=ON -DCMAKE_INSTALL_PREFIX=/usr/local\r\nmake -j8\r\nmake install\r\n```\r\n\r\n\r\n#### 5.3.3 启用 HTTP/SSL 特性\r\n\r\n```sh\r\nmkdir build && cd build\r\ncmake .. -DWITH_LIBCURL=ON -DWITH_OPENSSL=ON\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.4 构建动态库\r\n\r\n```sh\r\ncmake .. -DBUILD_SHARED_LIBS=ON\r\nmake -j8\r\n```\r\n\r\n\r\n#### 5.3.5 cmake 中查找 coost 包\r\n\r\n```cmake\r\nfind_package(coost REQUIRED CONFIG)\r\ntarget_link_libraries(userTarget coost::co)\r\n```\r\n\r\n\r\n#### 5.3.6 vcpkg & conan\r\n\r\n```sh\r\nvcpkg install coost:x64-windows\r\n\r\n# 启用 HTTP & SSL\r\nvcpkg install coost[libcurl,openssl]:x64-windows\r\n\r\nconan install coost\r\n```\r\n\r\n\r\n\r\n\r\n## 6. License\r\n\r\nThe MIT license. coost 包含了一些其他项目的代码，可能使用了不同的 License，详情见 [LICENSE.md](https://github.com/idealvin/coost/blob/master/LICENSE.md)。\r\n\r\n\r\n\r\n\r\n## 7. 特别致谢\r\n\r\n- [context](https://github.com/idealvin/coost/tree/master/src/co/context) 的相关代码取自 [ruki](https://github.com/waruqi) 的 [tbox](https://github.com/tboox/tbox)，特别表示感谢！\r\n- [Leedehai](https://github.com/Leedehai) 与 [daidai21](https://github.com/daidai21) 早期帮忙将 coost 的中文参考文档翻译成英文，特别表示感谢！\r\n- [ruki](https://github.com/waruqi) 帮忙改进了 xmake 构建脚本，特别表示感谢！\r\n- [izhengfan](https://github.com/izhengfan) 提供了 cmake 构建脚本，特别表示感谢！\r\n- [SpaceIm](https://github.com/SpaceIm) 完善了 cmake 构建脚本，提供了 `find_package` 的支持，特别表示感谢！\r\n\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "unitest",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmake.lua",
          "type": "blob",
          "size": 2.560546875,
          "content": "-- plat\r\nset_config(\"plat\", os.host())\r\n\r\n-- project\r\nset_project(\"co\")\r\n\r\n-- set xmake minimum version\r\nset_xmakever(\"2.3.1\")\r\n\r\n-- set common flags\r\nset_languages(\"c++11\")\r\nset_warnings(\"all\")     -- -Wall\r\n--set_symbols(\"debug\")    -- dbg symbols\r\n--add_rules(\"mode.debug\", \"mode.release\")\r\n\r\n\r\nif is_plat(\"windows\") then\r\n    set_optimize(\"fastest\")  -- faster: -O2  fastest: -Ox  none: -O0\r\n    add_cxflags(\"/EHsc\")\r\n    add_ldflags(\"/SAFESEH:NO\")\r\n    if is_mode(\"debug\") then\r\n        set_runtimes(\"MTd\")\r\n    else\r\n        set_runtimes(\"MT\")\r\n    end\r\nelseif is_plat(\"mingw\") then\r\n    add_ldflags(\"-static-libgcc -static-libstdc++ -Wl,-Bstatic -lstdc++ -lwinpthread -Wl,-Bdynamic\", {force = true})\r\n    set_optimize(\"faster\")\r\nelse\r\n    --set_optimize(\"none\")   -- faster: -O2  fastest: -O3  none: -O0\r\n    set_optimize(\"faster\")   -- faster: -O2  fastest: -O3  none: -O0\r\n    --add_cxflags(\"-Wno-narrowing\", \"-Wno-sign-compare\", \"-Wno-strict-aliasing\")\r\n    if is_plat(\"macosx\", \"iphoneos\") then\r\n        add_cxflags(\"-fno-pie\")\r\n    end\r\nend\r\n\r\n\r\n-- build with openssl 1.1.0+\r\noption(\"with_openssl\")\r\n    set_default(false)\r\n    set_showmenu(true)\r\n    set_description(\"build with openssl, 1.1.0+ required\")\r\noption_end()\r\n\r\n-- build with libcurl (openssl, zlib also required)\r\noption(\"with_libcurl\")\r\n    set_default(false)\r\n    set_showmenu(true)\r\n    set_description(\"build with libcurl, required by http::Client\")\r\noption_end()\r\n\r\noption(\"with_backtrace\")\r\n    set_default(false)\r\n    set_showmenu(true)\r\n    set_description(\"build with libbacktrace, for stack trace on linux/mac\")\r\noption_end()\r\n\r\n-- build with -fPIC\r\noption(\"fpic\")\r\n    set_default(false)\r\n    set_showmenu(true)\r\n    set_description(\"build with -fPIC\")\r\n    add_cxflags(\"-fPIC\")\r\noption_end()\r\n\r\noption(\"disable_hook\")\r\n    set_default(false)\r\n    set_showmenu(true)\r\n    set_description(\"disable system API hook\")\r\noption_end()\r\n\r\noption(\"cache_line_size\")\r\n    set_default(\"64\")\r\n    set_showmenu(true)\r\n    set_description(\"set value of L1 cache line size\")\r\noption_end()\r\n\r\nif has_config(\"with_libcurl\") then\r\n    add_requires(\"openssl >=1.1.0\")\r\n    add_requires(\"libcurl\", {configs = {openssl = true, zlib = true}})\r\nelseif has_config(\"with_openssl\") then\r\n    add_requires(\"openssl >=1.1.0\")\r\nend \r\n\r\nif has_config(\"with_backtrace\") then\r\n    add_requires(\"libbacktrace\")\r\nend\r\n\r\n\r\n-- include dir\r\nadd_includedirs(\"include\")\r\n\r\n-- install header files\r\nadd_installfiles(\"(include/**)\", {prefixdir = \"\"})\r\nadd_installfiles(\"*.md\", {prefixdir = \"include/co\"})\r\n\r\n-- include sub-projects\r\nincludes(\"src\", \"gen\", \"test\", \"unitest\")\r\n"
        }
      ]
    }
  ]
}