{
  "metadata": {
    "timestamp": 1736565950136,
    "page": 930,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "unrealcv/unrealcv",
      "stars": 1940,
      "defaultBranch": "5.2",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6318359375,
          "content": "# Ignore all files by default\n*\n# Allow folder to enable recursive file discovery\n!*/\n\n# Ignore binary folders produced by UE4\nBinaries/\nIntermediate/\nPlugins/\n\n# Ignore documents generated by doxygen\ndoxygen/\n\n# Ignore model_zoo binaries\nUE4Binaries/\n\n# Recursively ignore some cache folders\n**/.cache/\n**/__pycache__/\n**/.tox/\n**/.DS_Store\n**/.ipynb_checkpoints/\n**/.idea/\n.vscode/\n\n# Ignore binary folders produced by sphinx and doxygen\ndocs/_build/\ndocs/doxygen/\n\n# Files to track\n!.gitignore\n!.gitattributes\n!LICENSE\n!*.py\n*.pyc\n!*.cpp\n!*.h\n!*.rst\n!*.md\n!*.json\n!*.ini\n!*.uplugin\n!*.bat\n# !*.ipynb  Add ipython notebook and png, jpg by force\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.302734375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.8\"\n  jobs:\n    post_checkout:\n      # Download and uncompress the binary\n      # https://git-lfs.github.com/\n      - wget https://github.com/git-lfs/git-lfs/releases/download/v3.1.4/git-lfs-linux-amd64-v3.1.4.tar.gz\n      - tar xvfz git-lfs-linux-amd64-v3.1.4.tar.gz\n      # Modify LFS config paths to point where git-lfs binary was downloaded\n      - git config filter.lfs.process \"`pwd`/git-lfs filter-process\"\n      - git config filter.lfs.smudge  \"`pwd`/git-lfs smudge -- %f\"\n      - git config filter.lfs.clean \"`pwd`/git-lfs clean -- %f\"\n      # Make LFS available in current repository\n      - ./git-lfs install\n      # Download content from remote\n      - ./git-lfs fetch\n      # Make local files to have the real content on them\n      - ./git-lfs checkout\n\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt"
        },
        {
          "name": "Config",
          "type": "tree",
          "content": null
        },
        {
          "name": "Content",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2016 Weichao Qiu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7314453125,
          "content": "# UnrealCV\n\n[![Join the chat at https://gitter.im/unrealcv/unrealcv](https://badges.gitter.im/unrealcv/unrealcv.svg)](https://gitter.im/unrealcv/unrealcv?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Docs Status](https://readthedocs.org/projects/unrealcv/badge/?version=latest\n)](http://docs.unrealcv.org)\n\n<!-- [![Build Status](https://travis-ci.org/unrealcv/unrealcv.svg?branch=master)](https://travis-ci.org/unrealcv/unrealcv) -->\n\nUnrealCV is a project to help computer vision researchers build virtual worlds using Unreal Engine (UE). It extends UE with a plugin by providing:\n\n1. A set of UnrealCV commands to interact with the virtual world.\n2. Communication between UE and an external program, such as Caffe.\n\nUnrealCV can be used in two ways. The first one is using a compiled game binary with UnrealCV embedded. This is as simple as running a game, no knowledge of Unreal Engine is required. The second is installing the UnrealCV plugin into Unreal Engine and using the editor to build a new virtual world.\n\n\nPlease read [Tutorial: Getting Started](http://unrealcv.github.io/tutorial/getting_started.html) to learn using UnrealCV.\n\n<center>\n<img src=\"http://unrealcv.github.io/images/homepage_teaser.png\" alt=\"annotation\"/>\nImages generated from the technical demo <a href=\"http://docs.unrealcv.org/en/master/reference/model_zoo.html#realisticrendering\">RealisticRendering</a><br>\n</center>\n\n## New Features\n - Call any Blueprint function from Python by `vbp [obj_name] [func_name] [arg1] [arg2] ...` command.\n - Support RPC communication between Server and Client in Linux, higher FPS and more reliable.\n - A set of new commands for camera control and object manipulation, please refer to [command system](https://docs.unrealcv.org/en/latest/reference/commands.html) for more details.\n\n## How to install UnrealCV\nTo install the UnrealCV Server, you need:\n1. Download the source code and place it on the ``Plugin`` folder of a C++ UE project.\n2. launch the C++ project with Visual Studio 2019, UnrealCV will be compiled at the same time.\n3. To check the success installation of UnrealCV, you can run ``vget /unrealcv/status`` in the console (Press **`** to display the console).\n\nTo install the UnrealCV Client, just run:\n``pip install unrealcv``\n\n## Citation\n\nIf you found this project useful, please consider citing our paper\n\n```bibtex\n@article{qiu2017unrealcv,\n  Author = {Weichao Qiu, Fangwei Zhong, Yi Zhang, Siyuan Qiao,Zihao Xiao, Tae Soo Kim, Yizhou Wang, Alan Yuille},\n  Journal = {ACM Multimedia Open Source Software Competition},\n  Title = {UnrealCV: Virtual Worlds for Computer Vision},\n  Year = {2017}\n}\n```\n\n## Contact\nIf you have any suggestion or interested in using UnrealCV, please [contact us](http://unrealcv.github.io/contact.html).\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnrealCV.uplugin",
          "type": "blob",
          "size": 0.673828125,
          "content": "{\n    \"FileVersion\" : 3,\n    \"Version\" : 5,\n    \"VersionName\": \"1.0.1\", \n    \"FriendlyName\": \"Unreal CV\",\n    \"Description\": \"UnrealCV is a plugin to connect computer vision algorithm and the games built by Unreal Engine\",\n    \"Category\" : \"Science\",\n    \"CreatedBy\": \"Weichao Qiu\",\n    \"CreatedByURL\": \"http://unrealcv.org\",\n    \"DocsURL\" : \"http://docs.unrealcv.org\",\n    \"MarketplaceURL\" : \"\",\n    \"SupportURL\" : \"\",\n    \"EnabledByDefault\" : true,\n    \"CanContainContent\": true,\n    \"IsBetaVersion\" : true,\n    \"Installed\" : true,\n    \"Modules\" :\n    [\n        {\n            \"Name\": \"UnrealCV\",\n            \"Type\" : \"Runtime\",\n            \"LoadingPhase\" : \"PreDefault\"\n        }\n    ]\n}\n"
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 1.923828125,
          "content": "# Build script of unrealcv, supports win, linux and mac.\n# Weichao Qiu @ 2017\n# Use python build.py to build the plugin\nimport argparse\nfrom unrealcv.automation import UE4Automation\nimport os\n\ndef main():\n    # Parse arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'descriptor_file',\n        default='UnrealCV.uplugin',\n        nargs='?',\n        help='The uplugin file to build'\n    )\n    parser.add_argument(\n        '--install',\n        action='store_true'\n    )\n    parser.add_argument(\n        '--output',\n        help='Output folder for this script'\n    )\n    parser.add_argument(\n        '--UE4',\n        help='Specify the engine path. If left empty, default installation locations will be used'\n    )\n    parser.add_argument(\n        '--overwrite',\n        type=bool,\n        help='Whether to overwrite the compiled binary'\n    )\n\n    args = parser.parse_args()\n    need_install = args.install\n\n    ue4 = UE4Automation(args.UE4)\n\n    if args.output:\n        output_folder = args.output\n    else:\n        output_folder = None\n\n    # Build the plugin\n    descriptor_file = args.descriptor_file\n    abs_descriptor_file = os.path.abspath(descriptor_file)\n    if descriptor_file.endswith('.uplugin'):\n        if not output_folder:\n            output_folder = 'Plugins/UnrealCV'\n        abs_output_folder = os.path.abspath(output_folder)\n\n        ue4.build_plugin(abs_descriptor_file, abs_output_folder, args.overwrite)\n\n        # Install the plugin if requested\n        if need_install:\n            ue4.install(plugin_folder = abs_output_folder, overwrite = True)\n\n    elif descriptor_file.endswith('.uproject'):\n        project_name = os.path.basename(descriptor_file).split('.')[0]\n        if not output_folder:\n            output_folder = 'UE4Binaries/%s' % project_name\n        abs_output_folder = os.path.abspath(output_folder)\n\n        ue4.package(abs_descriptor_file, abs_output_folder)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dodo.py",
          "type": "blob",
          "size": 1.755859375,
          "content": "# Weichao Qiu @ 2018\n# Utility commands to make unrealcv development easier\n\nimport os\nue4_root = '/home/qiuwch/UE419' # The configuration only for my machine\nuat_script = os.path.join(ue4_root, '/Engine/Build/BatchFiles/RunUAT.sh')\n\ndef task_cleanup():\n    cmd = 'rm -rf Binaries/ Intermediate/'\n    return {\n        'actions': [cmd],\n        'verbosity': 2,\n    }\n\ndef task_docs():\n    # Use less code to achieve the same tasks\n    sphinx = 'sphinx-build -n -b html ./docs/ ./docs/output/ -j 16'\n    doxygen = 'doxygen ./docs/Doxyfile'\n    \n    preview = 'xdg-open ./docs/output/index.html'\n    preview = 'xdg-open ./docs/doxygen/html/index.html'\n    actions = [doxygen, sphinx]\n\n    return {\n        'actions': actions,\n        'verbosity': 2,\n    }\n\ndef task_build():\n    # Build plugin\n    abs_plugin_file = os.path.abspath('./UnrealCV.uplugin')\n    # Avoid generating to current folder, otherwise the binary built by the editor might conflict\n    abs_output_folder = os.path.abspath('/tmp/unrealcv_binary')\n    cmd = os.path.join(uat_script, 'BuildPlugin -plugin={abs_plugin_file} \\\n    -package={abs_output_folder} -rocket -targetplatforms=Linux -compile'.format(**locals()))\n\n    return {'actions': actions, 'verbosity': 2}\n\ndef task_package():\n    # The RunUAT script needs to take in absolute path\n    # Mainly used to check whether the package is successful\n    abs_uproject_file = os.path.abspath('../CarAct.uproject')\n    abs_output_folder = os.path.abspath('/tmp/CarAct_binary')\n    cmd = os.path.join(uat_script, 'BuildCookRun -project={abs_uproject_file} \\\n    -archivedirectory={abs_output_folder} \\\n    -platform=Linux -clientconfig=Development \\\n    -noP4 -stage -pak -archive -cook -build'.format(**locals()))\n    actions = [cmd]\n\n    return {'actions': actions, 'verbosity': 2}"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2197265625,
          "content": "[tox]\nenvlist = py27,py35,py36\nskipsdist = True\n\n[testenv]\ndeps =\n\t--editable=file:///{toxinidir}/client/python\n\tnumpy\n\tPillow\n\t; matplotlib\n\timageio\n\ncommands = python examples/commands_demo.py --output tox_output_{envname}\n"
        }
      ]
    }
  ]
}