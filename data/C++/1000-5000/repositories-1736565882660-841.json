{
  "metadata": {
    "timestamp": 1736565882660,
    "page": 841,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KomputeProject/kompute",
      "stars": 2057,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ccls",
          "type": "blob",
          "size": 0.4228515625,
          "content": "\n%clang\n\n-fdeclspec\n-fms-extensions\n-Wall\n-Wextra\n-std=c++17\n\n%h -x\n%h c++-header\n\n-DDEBUG=1\n-DKOMPUTE_INCLUDE_FOR_SYNTAX\n\n-I/usr/include/python3.6/\n-I./python/pybind11/include/\n\n-I./build/_deps/vulkan_header-src/include/\n-I./build/_deps/spdlog-src/include/\n-I./build/_deps/googletest-src/googletest/include/\n-I./build/_deps/fmt-src/include/\n\n-I./src/include/\n-I./build/src/shaders/glsl/\n-I./build/test/shaders/glsl/\n-I./test/utils/\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0478515625,
          "content": "ï»¿---\nBasedOnStyle: Mozilla\nIndentWidth: 4\n\n...\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "build/*\nexamples/*\ndocker-builders/\nswiftshader/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.4736328125,
          "content": "# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Python\n__pycache__\n*.pyc\ndist/\nkp.egg-info/\n\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\n\n# TAgs\ntags\ntags.*\n\n# Visual Studio 2015 user specific files\n.vs/\n\n# Visual Studio 2015 database file\n*.VC.db\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n*.ipa\n\n# These project files can be generated by the engine\n*.xcodeproj\n*.xcworkspace\n*.sln\n*.suo\n*.opensdf\n*.sdf\n*.VC.db\n*.VC.opendb\n\n# Precompiled Assets\nSourceArt/**/*.png\nSourceArt/**/*.tga\n\n# Binary Files\nBinaries/*\nPlugins/*/Binaries/*\n\n# Builds\nBuild/*\n\n# Whitelist PakBlacklist-<BuildConfiguration>.txt files\n!Build/*/\nBuild/*/**\n!Build/*/PakBlacklist*.txt\n\n# Don't ignore icon files in Build\n!Build/**/*.ico\n\n# Built data for maps\n*_BuiltData.uasset\n\n# Configuration files generated by the Editor\nSaved/*\n\n# Compiled source files for the engine to use\nIntermediate/*\nPlugins/*/Intermediate/*\n\n# Cache files for the editor to use\nDerivedDataCache/*\n\n# Starter Content Ignored\n\nContent/StarterContent/*\n\n# VSCode Files\n/.vscode/*\nBuildingEscape.code-workspace\ncompile_commands.json\n.clangd/\n.cache/\n\n# CLion/IDEA files\n.idea/\n\n# Project files\nbin/\nexternal/boost/\ntmp/\n\n# CMake\nbuild/\nrelease/\n\n# Kompute #\n###################\nswiftshader/\nvk_swiftshader_icd.json\ntmp_kp_shader.comp.spv\ntmp_kp_shader.comp\n\n# Shaders\ntest/shaders/glsl/*.hpp\ncompiled_shaders_include/\n\n# Docs\n_build/\n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.2822265625,
          "content": "# Changelog\n\n## [v0.8.1](https://github.com/KomputeProject/kompute/tree/v0.8.1)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.8.0...v0.8.1)\n\n**Closed issues:**\n\n- Discord link in README and docs is broken [\\#276](https://github.com/KomputeProject/kompute/issues/276)\n- Website examples typo's and 6500 XT unknown GPU [\\#275](https://github.com/KomputeProject/kompute/issues/275)\n- \\[Question\\] How to disable all log ? [\\#274](https://github.com/KomputeProject/kompute/issues/274)\n- full diagram 404 [\\#271](https://github.com/KomputeProject/kompute/issues/271)\n- Error when enabling `KOMPUTE\\_ENABLE\\_SPDLOG` [\\#268](https://github.com/KomputeProject/kompute/issues/268)\n- Add KOMPUTE\\_LOG\\_ACTIVE\\_LEVEL instead of current SPDLOG\\_ACTIVE\\_LEVEL [\\#267](https://github.com/KomputeProject/kompute/issues/267)\n- Update/Fix Android project [\\#264](https://github.com/KomputeProject/kompute/issues/264)\n- Update compileSource function in examples/docs to correct one [\\#261](https://github.com/KomputeProject/kompute/issues/261)\n- Technically can Kompute be modified to support data visualization? [\\#260](https://github.com/KomputeProject/kompute/issues/260)\n- Data-transfer for Integrated GPU [\\#258](https://github.com/KomputeProject/kompute/issues/258)\n- Python \"getting started\" example fails [\\#252](https://github.com/KomputeProject/kompute/issues/252)\n- Python example in README doesn't work [\\#248](https://github.com/KomputeProject/kompute/issues/248)\n- Running Android app [\\#234](https://github.com/KomputeProject/kompute/issues/234)\n\n**Merged pull requests:**\n\n- Added active log level definitions for kompute [\\#280](https://github.com/KomputeProject/kompute/pull/280) ([axsaucedo](https://github.com/axsaucedo))\n- Fix TestDestroy.TestDestroyTensorSingle [\\#279](https://github.com/KomputeProject/kompute/pull/279) ([ScheissSchiesser](https://github.com/ScheissSchiesser))\n- Updated discord link [\\#277](https://github.com/KomputeProject/kompute/pull/277) ([axsaucedo](https://github.com/axsaucedo))\n- style\\(src/Algorithm\\): fix typo [\\#273](https://github.com/KomputeProject/kompute/pull/273) ([tpoisonooo](https://github.com/tpoisonooo))\n- Fix Android Example confirmed with blog post steps [\\#266](https://github.com/KomputeProject/kompute/pull/266) ([axsaucedo](https://github.com/axsaucedo))\n- Adding Governance with TSC charter [\\#263](https://github.com/KomputeProject/kompute/pull/263) ([axsaucedo](https://github.com/axsaucedo))\n- Updating array\\_mutiplication example to work correctly [\\#262](https://github.com/KomputeProject/kompute/pull/262) ([axsaucedo](https://github.com/axsaucedo))\n- Updated formatting [\\#257](https://github.com/KomputeProject/kompute/pull/257) ([axsaucedo](https://github.com/axsaucedo))\n- Fix first two python examples in the docs [\\#256](https://github.com/KomputeProject/kompute/pull/256) ([lopuhin](https://github.com/lopuhin))\n- Remove nonexisting \"single\\_include\" from INSTALL\\_INTERFACE [\\#254](https://github.com/KomputeProject/kompute/pull/254) ([ItsBasi](https://github.com/ItsBasi))\n- Added community page [\\#253](https://github.com/KomputeProject/kompute/pull/253) ([axsaucedo](https://github.com/axsaucedo))\n- Updated readme to reflect shader utils [\\#249](https://github.com/KomputeProject/kompute/pull/249) ([axsaucedo](https://github.com/axsaucedo))\n- Avoid using pointers to temporary copies of desired extensions. [\\#247](https://github.com/KomputeProject/kompute/pull/247) ([ItsBasi](https://github.com/ItsBasi))\n\n## [v0.8.0](https://github.com/KomputeProject/kompute/tree/v0.8.0) (2021-09-16)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.7.0...v0.8.0)\n\n**Closed issues:**\n\n- An unset KOMPUTE\\_ENV\\_DEBUG\\_LAYERS leads KP\\_LOG\\_DEBUG to pass envLayerNamesVal==nullptr along to fmt, which rejects that due to \"string pointer is null\". [\\#245](https://github.com/KomputeProject/kompute/issues/245)\n- Extend utils shader helpers in test for windows [\\#240](https://github.com/KomputeProject/kompute/issues/240)\n- Python segfaults after import kp [\\#230](https://github.com/KomputeProject/kompute/issues/230)\n- Simple and extended python examples do not work \\(v 0.7.0\\) [\\#228](https://github.com/KomputeProject/kompute/issues/228)\n- Python macOS issue \\(ImportError: dlopen\\(...\\): no suitable image found. Did find: ...: mach-o, but wrong architecture\\)  [\\#223](https://github.com/KomputeProject/kompute/issues/223)\n- Python macOS issue \\(Symbol not found: \\_\\_PyThreadState\\_Current ... Expected in: flat namespace\\) [\\#221](https://github.com/KomputeProject/kompute/issues/221)\n- Finalise Migration of Kompute into Linux Foundation [\\#216](https://github.com/KomputeProject/kompute/issues/216)\n- CMake Error: Imported target \"kompute::kompute\" includes non-existent path \"/usr/local/single\\_include\" [\\#212](https://github.com/KomputeProject/kompute/issues/212)\n- Incompatibality inroduced with \\#168 on Vulkan 1.1.x  [\\#209](https://github.com/KomputeProject/kompute/issues/209)\n- external  libraries [\\#201](https://github.com/KomputeProject/kompute/issues/201)\n- Starting slack group or discord for alternative / faster version of asking questions [\\#198](https://github.com/KomputeProject/kompute/issues/198)\n- Test SingleSequenceRecord is not thread safe and fails in AMD card [\\#196](https://github.com/KomputeProject/kompute/issues/196)\n- Update Kompute headers to reference the glslang headers for install vs build interfaces [\\#193](https://github.com/KomputeProject/kompute/issues/193)\n- Integrate with GLSLang find\\_package file when issue is resolved in the glslang repo [\\#191](https://github.com/KomputeProject/kompute/issues/191)\n- Release 0.7.0 [\\#187](https://github.com/KomputeProject/kompute/issues/187)\n- Get number of available devices [\\#185](https://github.com/KomputeProject/kompute/issues/185)\n- Deep Learning Convolutional Neural Network \\(CNN\\) example implementation [\\#162](https://github.com/KomputeProject/kompute/issues/162)\n- Create example compiling and running in raspberry pi with Mesa Vulkan drivers [\\#131](https://github.com/KomputeProject/kompute/issues/131)\n- Add support for VK\\_EXT\\_debug\\_utils labels [\\#110](https://github.com/KomputeProject/kompute/issues/110)\n\n**Merged pull requests:**\n\n- Fix for null debug log causing exception in fmt lib [\\#246](https://github.com/KomputeProject/kompute/pull/246) ([axsaucedo](https://github.com/axsaucedo))\n- 0.8.0 Release  [\\#244](https://github.com/KomputeProject/kompute/pull/244) ([axsaucedo](https://github.com/axsaucedo))\n- Adding support for different types for spec and push consts [\\#242](https://github.com/KomputeProject/kompute/pull/242) ([axsaucedo](https://github.com/axsaucedo))\n- Extend shader helper functions in tests to support windows  [\\#241](https://github.com/KomputeProject/kompute/pull/241) ([axsaucedo](https://github.com/axsaucedo))\n- Increase test cov across codebase [\\#239](https://github.com/KomputeProject/kompute/pull/239) ([axsaucedo](https://github.com/axsaucedo))\n- Updated collab link for C++ notebook [\\#237](https://github.com/KomputeProject/kompute/pull/237) ([axsaucedo](https://github.com/axsaucedo))\n- Updating repo licenses and links [\\#236](https://github.com/KomputeProject/kompute/pull/236) ([axsaucedo](https://github.com/axsaucedo))\n- Removing GLSLang as core dependency [\\#235](https://github.com/KomputeProject/kompute/pull/235) ([axsaucedo](https://github.com/axsaucedo))\n- Matrix multiplication example showcasing iterative improvements in performance [\\#233](https://github.com/KomputeProject/kompute/pull/233) ([Corentin-pro](https://github.com/Corentin-pro))\n- Fixed typo in CMakeLists.txt \\(ANDOID =\\> ANDROID\\) [\\#232](https://github.com/KomputeProject/kompute/pull/232) ([Corentin-pro](https://github.com/Corentin-pro))\n- Set kp\\_debug, kp\\_info, kp\\_warning and kp\\_error to py::none\\(\\) when the program terminates. [\\#231](https://github.com/KomputeProject/kompute/pull/231) ([thinking-tower](https://github.com/thinking-tower))\n- VGG7 Python example [\\#227](https://github.com/KomputeProject/kompute/pull/227) ([20kdc](https://github.com/20kdc))\n- Add documentation for CMake flags [\\#224](https://github.com/KomputeProject/kompute/pull/224) ([thinking-tower](https://github.com/thinking-tower))\n- Set PYTHON\\_INCLUDE\\_DIR and PYTHON\\_LIBRARY during installation [\\#222](https://github.com/KomputeProject/kompute/pull/222) ([thinking-tower](https://github.com/thinking-tower))\n- Removing xxd.exe binary and add instructions to build [\\#220](https://github.com/KomputeProject/kompute/pull/220) ([axsaucedo](https://github.com/axsaucedo))\n- \\[PYTHON\\] Ensure numpy array increments refcount of tensor to keep valid  [\\#219](https://github.com/KomputeProject/kompute/pull/219) ([axsaucedo](https://github.com/axsaucedo))\n- Added destroy for manager [\\#218](https://github.com/KomputeProject/kompute/pull/218) ([axsaucedo](https://github.com/axsaucedo))\n- Revert \"Fixed the issue that caused CMake to look for non-existent path after being installed\" [\\#217](https://github.com/KomputeProject/kompute/pull/217) ([axsaucedo](https://github.com/axsaucedo))\n- Fixed the issue that caused CMake to look for non-existent path after being installed [\\#213](https://github.com/KomputeProject/kompute/pull/213) ([unexploredtest](https://github.com/unexploredtest))\n- omitted .data\\(\\) because it is incompatible with vulkan 1.1.x [\\#211](https://github.com/KomputeProject/kompute/pull/211) ([unexploredtest](https://github.com/unexploredtest))\n- vkEnumeratePhysicalDevices\\(\\*\\(this-\\>mInstance\\) ... doesn't work on Linux i386 [\\#208](https://github.com/KomputeProject/kompute/pull/208) ([unexploredtest](https://github.com/unexploredtest))\n- Raises an error when having no/exceeding vulkan device's limit [\\#207](https://github.com/KomputeProject/kompute/pull/207) ([unexploredtest](https://github.com/unexploredtest))\n- Updated README and fixed a syntax error on C++'s example [\\#206](https://github.com/KomputeProject/kompute/pull/206) ([unexploredtest](https://github.com/unexploredtest))\n- removed the extra comma after KOMPUTE\\_OPT\\_REPO\\_SUBMODULE\\_BUILD [\\#205](https://github.com/KomputeProject/kompute/pull/205) ([unexploredtest](https://github.com/unexploredtest))\n- Extending list\\_devices test for multiple devices [\\#204](https://github.com/KomputeProject/kompute/pull/204) ([axsaucedo](https://github.com/axsaucedo))\n- Fix \\#include \\<SPIRV/GlslangToSpv.h\\> [\\#200](https://github.com/KomputeProject/kompute/pull/200) ([unexploredtest](https://github.com/unexploredtest))\n- Added memory barrier on test [\\#199](https://github.com/KomputeProject/kompute/pull/199) ([axsaucedo](https://github.com/axsaucedo))\n- Add function to list physical devices [\\#195](https://github.com/KomputeProject/kompute/pull/195) ([axsaucedo](https://github.com/axsaucedo))\n- v0.7.0 release [\\#189](https://github.com/KomputeProject/kompute/pull/189) ([axsaucedo](https://github.com/axsaucedo))\n- Add instructions for running on Pi4 [\\#180](https://github.com/KomputeProject/kompute/pull/180) ([hpgmiskin](https://github.com/hpgmiskin))\n\n## [v0.7.0](https://github.com/KomputeProject/kompute/tree/v0.7.0) (2021-03-14)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.6.0...v0.7.0)\n\n**Implemented enhancements:**\n\n- Extend non-spdlog print functions to use std::format [\\#158](https://github.com/KomputeProject/kompute/issues/158)\n- Add code coverage reports with codecov [\\#145](https://github.com/KomputeProject/kompute/issues/145)\n- Explore removing `std::vector mData;` completely from Tensor in favour of always storing data in hostVisible buffer memory \\(TBC\\) [\\#144](https://github.com/KomputeProject/kompute/issues/144)\n- Update all examples to match breaking changes in 0.7.0 [\\#141](https://github.com/KomputeProject/kompute/issues/141)\n- Avoid copy when returning python numpy / array [\\#139](https://github.com/KomputeProject/kompute/issues/139)\n- Cover all Python & C++ tests in CI  [\\#121](https://github.com/KomputeProject/kompute/issues/121)\n- Add C++ Test for Simple Work Groups Example [\\#117](https://github.com/KomputeProject/kompute/issues/117)\n- Expose push constants in OpAlgo [\\#54](https://github.com/KomputeProject/kompute/issues/54)\n- Expose ability to create barriers in OpTensor operations [\\#45](https://github.com/KomputeProject/kompute/issues/45)\n- Create delete function in manager to free / destroy sequence [\\#36](https://github.com/KomputeProject/kompute/issues/36)\n- Make specialisation data extensible [\\#12](https://github.com/KomputeProject/kompute/issues/12)\n- Support multiple types for Kompute Tensors [\\#2](https://github.com/KomputeProject/kompute/issues/2)\n- Added re-record sequence functionality and updated docs [\\#171](https://github.com/KomputeProject/kompute/pull/171) ([axsaucedo](https://github.com/axsaucedo))\n- Extend non-spdlog print functions to use fmt::format / fmt::print [\\#159](https://github.com/KomputeProject/kompute/pull/159) ([axsaucedo](https://github.com/axsaucedo))\n- Added support for custom SpecializedConstants and removed KomputeWorkgroup class [\\#151](https://github.com/KomputeProject/kompute/pull/151) ([axsaucedo](https://github.com/axsaucedo))\n- Added destroy functions for tensors and sequences \\(named and object\\) [\\#146](https://github.com/KomputeProject/kompute/pull/146) ([axsaucedo](https://github.com/axsaucedo))\n\n**Fixed bugs:**\n\n- push\\_constant not working in my case? [\\#168](https://github.com/KomputeProject/kompute/issues/168)\n- DescriptorPool set is not being freed [\\#155](https://github.com/KomputeProject/kompute/issues/155)\n- Updated memory barriers to include staging buffers [\\#182](https://github.com/KomputeProject/kompute/pull/182) ([axsaucedo](https://github.com/axsaucedo))\n- Adds push const ranges in pipelinelayout to fix \\#168 [\\#174](https://github.com/KomputeProject/kompute/pull/174) ([axsaucedo](https://github.com/axsaucedo))\n- Added destructor for staging tensors [\\#134](https://github.com/KomputeProject/kompute/pull/134) ([axsaucedo](https://github.com/axsaucedo))\n\n**Closed issues:**\n\n- Add ability to specify whether to build shared or static dependencies as well as option for Kompute lib [\\#190](https://github.com/KomputeProject/kompute/issues/190)\n- Update memory barriers to align with tensor staging/primary memory revamp [\\#181](https://github.com/KomputeProject/kompute/issues/181)\n- Move shader defaultResource inside kp::Shader class [\\#175](https://github.com/KomputeProject/kompute/issues/175)\n- Reach at least 90% code coverage on tests [\\#170](https://github.com/KomputeProject/kompute/issues/170)\n- Add functionality to re-record sequence as now it's possible to update the underlying algorithm [\\#169](https://github.com/KomputeProject/kompute/issues/169)\n- Use numpy arrays as default return value [\\#166](https://github.com/KomputeProject/kompute/issues/166)\n- Update all shared\\_ptr value passes to be by ref or const ref [\\#161](https://github.com/KomputeProject/kompute/issues/161)\n- Amend memory hierarchy for kp::Operations so they can be created separately [\\#160](https://github.com/KomputeProject/kompute/issues/160)\n- Customise theme of documentation [\\#156](https://github.com/KomputeProject/kompute/issues/156)\n- Remove KomputeWorkgroup class in favour of std::array\\<uint32\\_t, 3\\> [\\#152](https://github.com/KomputeProject/kompute/issues/152)\n- Passing raw GLSL string to Shader Module depricated so remove this method from supported approach [\\#150](https://github.com/KomputeProject/kompute/issues/150)\n- Add python backwards compatibility for eval\\_tensor\\_create\\_def [\\#147](https://github.com/KomputeProject/kompute/issues/147)\n- Document breaking changes for 0.7.0 [\\#140](https://github.com/KomputeProject/kompute/issues/140)\n- Tensor memory management and memory hierarchy redesign [\\#136](https://github.com/KomputeProject/kompute/issues/136)\n- Staging tensor GPU memory is not freed as part of OpCreateTensor removal [\\#133](https://github.com/KomputeProject/kompute/issues/133)\n- eStorage Tensors are currently unusable as OpTensorCreate calls mapDataIntoHostMemory [\\#132](https://github.com/KomputeProject/kompute/issues/132)\n- 0.6.0 Release [\\#126](https://github.com/KomputeProject/kompute/issues/126)\n- java.lang.UnsatisfiedLinkError: dlopen failed: library \"libkompute-jni.so\" not found [\\#125](https://github.com/KomputeProject/kompute/issues/125)\n- Initial exploration: Include explicit GLSL to SPIRV compilation [\\#107](https://github.com/KomputeProject/kompute/issues/107)\n- Add support for push constants [\\#106](https://github.com/KomputeProject/kompute/issues/106)\n\n**Merged pull requests:**\n\n- Resolve moving all functions from tensor HPP to CPP [\\#186](https://github.com/KomputeProject/kompute/pull/186) ([axsaucedo](https://github.com/axsaucedo))\n- Device Properties [\\#184](https://github.com/KomputeProject/kompute/pull/184) ([alexander-g](https://github.com/alexander-g))\n- Too many warnings [\\#183](https://github.com/KomputeProject/kompute/pull/183) ([alexander-g](https://github.com/alexander-g))\n- Add support for bool, double, int32, uint32 and float32 on Tensors via TensorT [\\#177](https://github.com/KomputeProject/kompute/pull/177) ([axsaucedo](https://github.com/axsaucedo))\n- Support for Timestamping [\\#176](https://github.com/KomputeProject/kompute/pull/176) ([alexander-g](https://github.com/alexander-g))\n- Test for ShaderResources [\\#165](https://github.com/KomputeProject/kompute/pull/165) ([unexploredtest](https://github.com/unexploredtest))\n- Amend memory hierarchy to enable for push constants and functional interface for more flexible operations [\\#164](https://github.com/KomputeProject/kompute/pull/164) ([axsaucedo](https://github.com/axsaucedo))\n- made changes for include paths for complete installation [\\#163](https://github.com/KomputeProject/kompute/pull/163) ([unexploredtest](https://github.com/unexploredtest))\n- Added dark mode on docs [\\#157](https://github.com/KomputeProject/kompute/pull/157) ([axsaucedo](https://github.com/axsaucedo))\n- Glslang implementation for online shader compilation [\\#154](https://github.com/KomputeProject/kompute/pull/154) ([axsaucedo](https://github.com/axsaucedo))\n- Adding test code coverage using gcov and lcov [\\#149](https://github.com/KomputeProject/kompute/pull/149) ([axsaucedo](https://github.com/axsaucedo))\n- Added temporary backwards compatibility for eval\\_tensor\\_create\\_def function [\\#148](https://github.com/KomputeProject/kompute/pull/148) ([axsaucedo](https://github.com/axsaucedo))\n- Amend memory ownership hierarchy to have Tensor owned by Manager instead of OpCreateTensor / OpBase [\\#138](https://github.com/KomputeProject/kompute/pull/138) ([axsaucedo](https://github.com/axsaucedo))\n- Removed Staging Tensors in favour of having two buffer & memory in a Tensor to minimise data transfer [\\#137](https://github.com/KomputeProject/kompute/pull/137) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.6.0](https://github.com/KomputeProject/kompute/tree/v0.6.0) (2021-01-31)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.5.1...v0.6.0)\n\n**Implemented enhancements:**\n\n- Add simple test for Python `log\\_level` function [\\#120](https://github.com/KomputeProject/kompute/issues/120)\n- Add further numpy support [\\#104](https://github.com/KomputeProject/kompute/issues/104)\n- SWIG syntax error - change order of keywords. [\\#94](https://github.com/KomputeProject/kompute/issues/94)\n- Create mocks to isolate unit tests for components [\\#8](https://github.com/KomputeProject/kompute/issues/8)\n- Disallowing zero sized tensors [\\#129](https://github.com/KomputeProject/kompute/pull/129) ([alexander-g](https://github.com/alexander-g))\n- Added further tests to CI and provide Dockerimage with builds to swiftshader [\\#119](https://github.com/KomputeProject/kompute/pull/119) ([axsaucedo](https://github.com/axsaucedo))\n- Workgroups for Python [\\#116](https://github.com/KomputeProject/kompute/pull/116) ([alexander-g](https://github.com/alexander-g))\n- Ubuntu CI [\\#115](https://github.com/KomputeProject/kompute/pull/115) ([alexander-g](https://github.com/alexander-g))\n- Faster set\\_data\\(\\) [\\#109](https://github.com/KomputeProject/kompute/pull/109) ([alexander-g](https://github.com/alexander-g))\n- String parameter for eval\\_algo\\_str methods in Python [\\#105](https://github.com/KomputeProject/kompute/pull/105) ([alexander-g](https://github.com/alexander-g))\n- Added numpy\\(\\) method [\\#103](https://github.com/KomputeProject/kompute/pull/103) ([alexander-g](https://github.com/alexander-g))\n\n**Fixed bugs:**\n\n- \\[PYTHON\\] Support string parameter instead of list for eval\\_algo\\_data when passing raw shader as string [\\#93](https://github.com/KomputeProject/kompute/issues/93)\n- \\[PYTHON\\] Fix log\\_level on the python implementation \\(using pybind's logging functions\\) [\\#92](https://github.com/KomputeProject/kompute/issues/92)\n\n**Closed issues:**\n\n- Add documentation for custom operations [\\#128](https://github.com/KomputeProject/kompute/issues/128)\n- Numpy Array Support and Work Group Configuration in Python Kompute [\\#124](https://github.com/KomputeProject/kompute/issues/124)\n- Remove references to spdlog in python module [\\#122](https://github.com/KomputeProject/kompute/issues/122)\n- Setup automated CI testing for PRs using GitHub actions [\\#114](https://github.com/KomputeProject/kompute/issues/114)\n- Python example type error \\(pyshader\\). [\\#111](https://github.com/KomputeProject/kompute/issues/111)\n- Update all references to operations to not use template [\\#101](https://github.com/KomputeProject/kompute/issues/101)\n- Getting a undefined reference error while creating a Kompute Manager [\\#100](https://github.com/KomputeProject/kompute/issues/100)\n\n**Merged pull requests:**\n\n- 122 remove spdlog references in python [\\#123](https://github.com/KomputeProject/kompute/pull/123) ([axsaucedo](https://github.com/axsaucedo))\n- Native logging for Python [\\#118](https://github.com/KomputeProject/kompute/pull/118) ([alexander-g](https://github.com/alexander-g))\n- Fixes for the c++ Simple and Extended examples in readme [\\#108](https://github.com/KomputeProject/kompute/pull/108) ([unexploredtest](https://github.com/unexploredtest))\n- Fix building shaders on native linux [\\#102](https://github.com/KomputeProject/kompute/pull/102) ([unexploredtest](https://github.com/unexploredtest))\n\n## [v0.5.1](https://github.com/KomputeProject/kompute/tree/v0.5.1) (2020-11-12)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.5.0...v0.5.1)\n\n**Implemented enhancements:**\n\n- Remove the template params from OpAlgoBase for dispatch layout [\\#57](https://github.com/KomputeProject/kompute/issues/57)\n- Enable layout to be configured dynamically within shaders [\\#26](https://github.com/KomputeProject/kompute/issues/26)\n- replaced \"static unsigned const\" to \"static const unsigned\" to avoid SWIG parsing error. [\\#95](https://github.com/KomputeProject/kompute/pull/95) ([0x0f0f0f](https://github.com/0x0f0f0f))\n\n**Closed issues:**\n\n- Support for MoltenVK? [\\#96](https://github.com/KomputeProject/kompute/issues/96)\n- Update all examples to use spir-v bytes by default [\\#86](https://github.com/KomputeProject/kompute/issues/86)\n\n**Merged pull requests:**\n\n- Python extensions for end to end example [\\#97](https://github.com/KomputeProject/kompute/pull/97) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.5.0](https://github.com/KomputeProject/kompute/tree/v0.5.0) (2020-11-08)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.4.1...v0.5.0)\n\n**Implemented enhancements:**\n\n- Adding Python package for Kompute [\\#87](https://github.com/KomputeProject/kompute/issues/87)\n- Python shader extension [\\#91](https://github.com/KomputeProject/kompute/pull/91) ([axsaucedo](https://github.com/axsaucedo))\n- Added python bindings with kp as python module  [\\#88](https://github.com/KomputeProject/kompute/pull/88) ([axsaucedo](https://github.com/axsaucedo))\n\n**Closed issues:**\n\n- Examples segfault \\(Linux / mesa / amdgpu\\) [\\#84](https://github.com/KomputeProject/kompute/issues/84)\n- Kompute support for newer Vulkan HPP headers [\\#81](https://github.com/KomputeProject/kompute/issues/81)\n\n## [v0.4.1](https://github.com/KomputeProject/kompute/tree/v0.4.1) (2020-11-01)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.4.0...v0.4.1)\n\n**Implemented enhancements:**\n\n- Upgrade build to support VulkanHPP 1.2.154 \\< 1.2.158 [\\#82](https://github.com/KomputeProject/kompute/issues/82)\n- Add Android example for Kompute [\\#23](https://github.com/KomputeProject/kompute/issues/23)\n- Enhanced python build [\\#89](https://github.com/KomputeProject/kompute/pull/89) ([axsaucedo](https://github.com/axsaucedo))\n- Fix compatibility for Vulkan HPP 1.2.155 and above [\\#83](https://github.com/KomputeProject/kompute/pull/83) ([axsaucedo](https://github.com/axsaucedo))\n- codespell spelling fixes [\\#80](https://github.com/KomputeProject/kompute/pull/80) ([pH5](https://github.com/pH5))\n\n**Closed issues:**\n\n- Android example throws runtime error.  [\\#77](https://github.com/KomputeProject/kompute/issues/77)\n- Document the utilities to convert shaders into C++ header files [\\#53](https://github.com/KomputeProject/kompute/issues/53)\n- Document the three types of memory ownership in classes - never, optional and always [\\#31](https://github.com/KomputeProject/kompute/issues/31)\n\n**Merged pull requests:**\n\n- Add link to official Vulkan website to download the SDK [\\#79](https://github.com/KomputeProject/kompute/pull/79) ([DonaldWhyte](https://github.com/DonaldWhyte))\n- 77 Fix end to end examples by creating tensors on separate sequence [\\#78](https://github.com/KomputeProject/kompute/pull/78) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.4.0](https://github.com/KomputeProject/kompute/tree/v0.4.0) (2020-10-18)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.3.2...v0.4.0)\n\n**Implemented enhancements:**\n\n- Error compiling on ubuntu 20.04 [\\#67](https://github.com/KomputeProject/kompute/issues/67)\n- Add explicit multi-threading interfaces to ensure correctness when running in parallel [\\#51](https://github.com/KomputeProject/kompute/issues/51)\n\n**Fixed bugs:**\n\n- Ensure sequences are cleared when begin is run [\\#74](https://github.com/KomputeProject/kompute/issues/74)\n\n**Merged pull requests:**\n\n- 74 Fixing manager default sequence creation [\\#75](https://github.com/KomputeProject/kompute/pull/75) ([axsaucedo](https://github.com/axsaucedo))\n- Adding Asynchronous Processing Capabilities with Multiple Queue Support [\\#73](https://github.com/KomputeProject/kompute/pull/73) ([axsaucedo](https://github.com/axsaucedo))\n- Fix README typo [\\#71](https://github.com/KomputeProject/kompute/pull/71) ([nihui](https://github.com/nihui))\n\n## [v0.3.2](https://github.com/KomputeProject/kompute/tree/v0.3.2) (2020-10-04)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.3.1...v0.3.2)\n\n**Implemented enhancements:**\n\n- Fix compiler errors on compilers other than msvc [\\#66](https://github.com/KomputeProject/kompute/pull/66) ([Dudecake](https://github.com/Dudecake))\n\n**Fixed bugs:**\n\n- Fix bug in OpAlgoRhsLhs [\\#61](https://github.com/KomputeProject/kompute/issues/61)\n\n**Closed issues:**\n\n- Change c++ to 14 from 17 for support with older frameworks [\\#59](https://github.com/KomputeProject/kompute/issues/59)\n\n**Merged pull requests:**\n\n- Updated readme and single kompute for 0.3.2 [\\#69](https://github.com/KomputeProject/kompute/pull/69) ([axsaucedo](https://github.com/axsaucedo))\n- Added android example and upgraded build configurations [\\#68](https://github.com/KomputeProject/kompute/pull/68) ([axsaucedo](https://github.com/axsaucedo))\n- Added readme to explain high level explanation for Godot example [\\#65](https://github.com/KomputeProject/kompute/pull/65) ([axsaucedo](https://github.com/axsaucedo))\n- Removing vulkan dependencies in examples [\\#64](https://github.com/KomputeProject/kompute/pull/64) ([axsaucedo](https://github.com/axsaucedo))\n- Updated godot example to use logistic regression usecase [\\#63](https://github.com/KomputeProject/kompute/pull/63) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.3.1](https://github.com/KomputeProject/kompute/tree/v0.3.1) (2020-09-20)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.3.0...v0.3.1)\n\n**Implemented enhancements:**\n\n- Add example of how vulkan kompute can be used for ML in Godot Game Engine [\\#60](https://github.com/KomputeProject/kompute/issues/60)\n\n**Merged pull requests:**\n\n- Adding godot example [\\#62](https://github.com/KomputeProject/kompute/pull/62) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.3.0](https://github.com/KomputeProject/kompute/tree/v0.3.0) (2020-09-19)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/0.3.0...v0.3.0)\n\n**Implemented enhancements:**\n\n- Make Kompute installable locally to work with examples [\\#58](https://github.com/KomputeProject/kompute/issues/58)\n- Remove ability to copy output parameters from OpAlgoBase now that there's OpTensorSync [\\#56](https://github.com/KomputeProject/kompute/issues/56)\n\n## [0.3.0](https://github.com/KomputeProject/kompute/tree/0.3.0) (2020-09-13)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.2.0...0.3.0)\n\n**Implemented enhancements:**\n\n- Add tests and documentation for loops passing data to/from device [\\#50](https://github.com/KomputeProject/kompute/issues/50)\n- Add preSubmit function to OpBase to account for multiple eval commands in parallel [\\#47](https://github.com/KomputeProject/kompute/issues/47)\n- Remove vulkan commandbuffer from Tensor [\\#42](https://github.com/KomputeProject/kompute/issues/42)\n- Provide further granularity on handling staging tensors [\\#40](https://github.com/KomputeProject/kompute/issues/40)\n- Create operation to copy data from local to device memory with staging [\\#39](https://github.com/KomputeProject/kompute/issues/39)\n- Add more advanced ML implementations \\(starting with LR, then DL, etc\\) [\\#19](https://github.com/KomputeProject/kompute/issues/19)\n\n**Fixed bugs:**\n\n- OpCreateTensor doesn't map data into GPU with OpCreateTensor for host tensors [\\#43](https://github.com/KomputeProject/kompute/issues/43)\n\n## [v0.2.0](https://github.com/KomputeProject/kompute/tree/v0.2.0) (2020-09-05)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/v0.1.0...v0.2.0)\n\n**Implemented enhancements:**\n\n- Migrate to GTest  [\\#37](https://github.com/KomputeProject/kompute/issues/37)\n- Move all todos in the code into github issues [\\#33](https://github.com/KomputeProject/kompute/issues/33)\n- Remove spdlog as a required dependency [\\#30](https://github.com/KomputeProject/kompute/issues/30)\n- Improve access to tensor underlying data for speed and ease of access [\\#18](https://github.com/KomputeProject/kompute/issues/18)\n- Enable for compute shaders to be provided in raw form [\\#17](https://github.com/KomputeProject/kompute/issues/17)\n- Enable OpCreateTensor for more than 1 tensor  [\\#13](https://github.com/KomputeProject/kompute/issues/13)\n- Add specialisation data to algorithm with default tensor size [\\#11](https://github.com/KomputeProject/kompute/issues/11)\n- Add documentation with Doxygen and Sphinx [\\#9](https://github.com/KomputeProject/kompute/issues/9)\n\n**Fixed bugs:**\n\n- Diagnose memory profiling to ensure there are no memory leaks on objects created  \\[CPU\\] [\\#15](https://github.com/KomputeProject/kompute/issues/15)\n\n**Merged pull requests:**\n\n- Migrating to gtest [\\#38](https://github.com/KomputeProject/kompute/pull/38) ([axsaucedo](https://github.com/axsaucedo))\n\n## [v0.1.0](https://github.com/KomputeProject/kompute/tree/v0.1.0) (2020-08-28)\n\n[Full Changelog](https://github.com/KomputeProject/kompute/compare/2879d3d274967e87087d567bcc659804b1707d0a...v0.1.0)\n\n\n\n\\* *This Changelog was automatically generated by [github_changelog_generator](https://github.com/github-changelog-generator/github-changelog-generator)*\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.3388671875,
          "content": "# SPDX-License-Identifier: Apache-2.0\n\ncmake_minimum_required(VERSION 3.20)\nproject(kompute VERSION 0.9.0 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 14)\n\n# Only change the folder behavior if kompute is not a subproject\nif(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n    set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMake\")\n    set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)\n    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)\nendif()\n\n# Avoid the dll boilerplate code for windows\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}\")\n\nset(KOMPUTE_LIBRARIES kompute CACHE INTERNAL \"\")\n\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n    set(kompute_opt_install_default_val ON)\nelse ()\n    set(kompute_opt_install_default_val OFF)\nendif ()\n\n# ####################################################\n# Options\n# ####################################################\nmacro(kompute_option OPTION_NAME OPTION_TEXT OPTION_DEFAULT)\n    option(${OPTION_NAME} ${OPTION_TEXT} ${OPTION_DEFAULT})\n\n    if(DEFINED ENV{${OPTION_NAME}})\n        # Allow overriding the option through an environment variable\n        set(${OPTION_NAME} $ENV{${OPTION_NAME}})\n    endif()\n\n    if(${OPTION_NAME})\n        add_definitions(-D${OPTION_NAME})\n    endif()\n\n    message(STATUS \"  ${OPTION_NAME}: ${${OPTION_NAME}}\")\nendmacro()\n\nmacro(kompute_log_level OPTION_NAME OPTION_TEXT OPTION_DEFAULT)\n    set(${OPTION_NAME} ${OPTION_DEFAULT} CACHE STRING ${OPTION_TEXT})\n    set_property(CACHE ${OPTION_NAME} PROPERTY STRINGS \"Trace\" \"Debug\" \"Info\" \"Warn\" \"Error\" \"Critical\" \"Default\" \"Off\")\n\n    if(DEFINED ENV{${OPTION_NAME}})\n        # Allow setting the option through an environment variable\n        set(${OPTION_NAME} $ENV{${OPTION_NAME}})\n    endif()\n\n    if(${OPTION_NAME})\n        add_definitions(-D${OPTION_NAME})\n    endif()\n\n    # Allow disabling logging completely and prevent linking against it:\n    if(${KOMPUTE_OPT_LOG_LEVEL} STREQUAL \"Off\")\n        set(${OPTION_NAME}_DISABLED ON)\n        add_compile_definitions(${OPTION_NAME}_DISABLED=1)\n    endif()\n\n    message(STATUS \"  ${OPTION_NAME}: ${${OPTION_NAME}}\")\nendmacro()\n\nmacro(kompute_option_string OPTION_NAME OPTION_TEXT OPTION_DEFAULT)\n    set(${OPTION_NAME} ${OPTION_DEFAULT} CACHE STRING ${OPTION_TEXT})\n\n    if(DEFINED ENV{${OPTION_NAME}})\n        # Allow setting the option through an environment variable\n        set(${OPTION_NAME} $ENV{${OPTION_NAME}})\n    endif()\n\n    if(${OPTION_NAME})\n        add_definitions(-D${OPTION_NAME})\n    endif()\n\n    message(STATUS \"  ${OPTION_NAME}: ${${OPTION_NAME}}\")\nendmacro()\n\nmessage(STATUS \"General purpose GPU compute framework built on Vulkan\")\nmessage(STATUS \"=======================================================\")\n\n# Enable or disable targets\nkompute_option(KOMPUTE_OPT_BUILD_TESTS \"Enable if you want to build tests.\" OFF)\nkompute_option(KOMPUTE_OPT_ENABLE_BENCHMARK \"Enable if you want to build and enable benchmark.\" OFF)\nkompute_option(KOMPUTE_OPT_CODE_COVERAGE \"Enable if you want code coverage.\" OFF)\nkompute_option(KOMPUTE_OPT_BUILD_DOCS \"Enable if you want to build documentation.\" OFF)\nkompute_option(KOMPUTE_OPT_INSTALL \"Enable if you want to enable installation.\" ${kompute_opt_install_default_val})\n\n# Build options\nkompute_option(KOMPUTE_OPT_BUILD_PYTHON \"Enable if you want to build python bindings.\" OFF)\nkompute_log_level(KOMPUTE_OPT_LOG_LEVEL \"Internally we use Spdlog or fmt for logging, depending on the value of 'KOMPUTE_OPT_USE_SPDLOG'. The log level used can be changed here. Possible values: 'Trace', 'Debug', 'Info', 'Warn', 'Error', 'Critical', 'Off', 'Default'. If set to 'Off' logging will be deactivated completely. If set to 'Default', the log level will be set to 'Info' for release builds and 'Debug' else.\" \"Default\")\nkompute_option(KOMPUTE_OPT_USE_SPDLOG \"If enabled, logging via KP_LOG_<DEBUG, INFO, etc...> will happen through Spdlog instead of plan fmt.\" OFF)\nkompute_option(KOMPUTE_OPT_ANDROID_BUILD \"Enable android compilation flags required.\" OFF)\nkompute_option(KOMPUTE_OPT_DISABLE_VK_DEBUG_LAYERS \"Explicitly disable debug layers even on debug.\" OFF)\nkompute_option(KOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK \"Whether to check if your driver supports the Vulkan Header version you are linking against. This might be useful in case you build shared on a different system than you run later.\" OFF)\nkompute_option(KOMPUTE_OPT_BUILD_SHADERS \"Rebuilds all compute shaders during compilation and does not use the already precompiled versions. Requires glslangValidator to be installed on your system.\" OFF)\n\n# External components\nkompute_option(KOMPUTE_OPT_USE_BUILT_IN_SPDLOG \"Use the built-in version of Spdlog. Requires 'KOMPUTE_OPT_USE_SPDLOG' to be set to ON in order to have any effect.\" ON)\nkompute_option(KOMPUTE_OPT_SPDLOG_ASYNC_MODE \"If spdlog is enabled this allows for selecting whether the default logger setup creates sync or async logger\" OFF)\nkompute_option(KOMPUTE_OPT_USE_BUILT_IN_FMT \"Use the built-in version of fmt.\" ON)\nkompute_option(KOMPUTE_OPT_USE_BUILT_IN_GOOGLE_TEST \"Use the built-in version of GoogleTest.\" ON)\nkompute_option(KOMPUTE_OPT_USE_BUILT_IN_PYBIND11 \"Use the built-in version of pybind11.\" ON)\nkompute_option(KOMPUTE_OPT_USE_BUILT_IN_VULKAN_HEADER \"Use the built-in version of Vulkan Headers. This could be helpful in case your system Vulkan Headers are too new for your driver. If you set this to OFF, please make sure your system Vulkan Headers are supported by your driver.\" ON)\nkompute_option_string(KOMPUTE_OPT_BUILT_IN_VULKAN_HEADER_TAG \"The git tag used for the built-in Vulkan Headers when 'KOMPUTE_OPT_USE_BUILT_IN_VULKAN_HEADER' is enabled. A list of tags can be found here: https://github.com/KhronosGroup/Vulkan-Headers/tags\" \"v1.3.231\")\nmessage(STATUS \"=======================================================\")\n\n# ####################################################\n# Deprecated Options\n# ####################################################\ninclude(cmake/deprecation_warnings.cmake)\n\n# ####################################################\n# Dependencies\n# ####################################################\ninclude(cmake/vulkan_shader_compiler.cmake)\ninclude(cmake/check_vulkan_version.cmake)\ninclude(FetchContent)\n\n# Set -fPIC so that ../lib/kp.cpython-310-x86_64-linux-gnu.so links correctly\nif(KOMPUTE_OPT_BUILD_PYTHON)\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\n# Vulkan Header\n# We don't import Vulkan library if Android build as it is built dynamically\n# Otherwise it is expected that the Vulkan SDK and dependencies are installed\n# Has to happen AFTER using the build-in Vulkan headers to prevent multiple targets with the name Vulkan::Headers\nif(KOMPUTE_OPT_ANDROID_BUILD)\n    add_library(vulkanAndroid INTERFACE)\n    set(VULKAN_INCLUDE_DIR ${ANDROID_NDK}/sources/third_party/vulkan/src/include)\n    target_sources(vulkanAndroid INTERFACE ${VULKAN_INCLUDE_DIR}/vulkan/vulkan.hpp)\n    target_include_directories(vulkanAndroid INTERFACE ${VULKAN_INCLUDE_DIR})\n\n    target_compile_definitions(vulkanAndroid INTERFACE VK_NO_PROTOTYPES=1)\n    target_compile_definitions(vulkanAndroid INTERFACE VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)\nelse()\n    if(KOMPUTE_OPT_USE_BUILT_IN_VULKAN_HEADER)\n        FetchContent_Declare(vulkan_header GIT_REPOSITORY https://github.com/KhronosGroup/Vulkan-Headers.git\n            GIT_TAG ${KOMPUTE_OPT_BUILT_IN_VULKAN_HEADER_TAG}\n            GIT_SHALLOW 1) # Source: https://github.com/KhronosGroup/Vulkan-Headers/tags\n        FetchContent_MakeAvailable(vulkan_header)\n\n        if(NOT KOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK)\n            # Ensure the driver supports this Vulkan version\n            check_vulkan_version(INCLUDE_DIR \"${vulkan_header_SOURCE_DIR}/include\")\n        endif()\n    endif()\n\n    find_package(Vulkan REQUIRED)\n\n    if(Vulkan_FOUND AND NOT TARGET Vulkan::Headers)\n        add_library(Vulkan::Headers INTERFACE IMPORTED)\n        set_target_properties(Vulkan::Headers PROPERTIES\n            INTERFACE_INCLUDE_DIRECTORIES \"${Vulkan_INCLUDE_DIRS}\")\n    endif()\n\n    if(NOT KOMPUTE_OPT_USE_BUILT_IN_VULKAN_HEADER AND NOT KOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK)\n        # Ensure the driver supports this Vulkan version\n        check_vulkan_version(INCLUDE_DIR ${Vulkan_INCLUDE_DIR})\n    endif()\nendif()\n\n# Spdlog\nif(KOMPUTE_OPT_USE_SPDLOG)\n    add_compile_definitions(KOMPUTE_OPT_USE_SPDLOG=1)\n\n    if(KOMPUTE_OPT_USE_BUILT_IN_SPDLOG)\n        set(SPDLOG_INSTALL ${KOMPUTE_OPT_INSTALL})\n        set(SPDLOG_BUILD_SHARED ${BUILD_SHARED_LIBS})\n\n        FetchContent_Declare(spdlog GIT_REPOSITORY https://github.com/gabime/spdlog.git\n            GIT_TAG v1.10.0\n            GIT_SHALLOW 1) # Source: https://github.com/gabime/spdlog/releases\n        FetchContent_MakeAvailable(spdlog)\n    else()\n        find_package(spdlog REQUIRED)\n    endif()\nendif()\n\n# fmt\nif(KOMPUTE_OPT_USE_BUILT_IN_FMT)\n    set(FMT_INSTALL ${KOMPUTE_OPT_INSTALL})\n    FetchContent_Declare(fmt GIT_REPOSITORY https://github.com/fmtlib/fmt.git\n        GIT_TAG 11.0.0\n        GIT_SHALLOW 1) # Source: https://github.com/fmtlib/fmt/releases\n    FetchContent_MakeAvailable(fmt)\nelse()\n    find_package(fmt REQUIRED)\nendif()\n\n# GoogleTest\nif(KOMPUTE_OPT_BUILD_TESTS OR KOMPUTE_OPT_ENABLE_BENCHMARK)\n    if(KOMPUTE_OPT_USE_BUILT_IN_GOOGLE_TEST)\n        FetchContent_Declare(googletest GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.11.0) # Source: https://github.com/google/googletest/releases\n\n        # Use a shared C runtime in case we build shared\n        set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n        FetchContent_MakeAvailable(googletest)\n\n        add_library(gtest_int INTERFACE)\n        target_link_libraries(gtest_int INTERFACE gtest)\n        target_include_directories(gtest_int INTERFACE ${googletest_SOURCE_DIR}/include)\n\n        add_library(GTest::GTest ALIAS gtest_int)\n\n        # Group under the \"tests/gtest\" project folder in IDEs such as Visual Studio.\n        set_property(TARGET gtest PROPERTY FOLDER \"tests/gtest\")\n        set_property(TARGET gtest_main PROPERTY FOLDER \"tests/gtest\")\n    else()\n        find_package(GTest CONFIG REQUIRED)\n    endif()\nendif()\n\n# pybind11\nif(KOMPUTE_OPT_BUILD_PYTHON)\n    if(KOMPUTE_OPT_USE_BUILT_IN_PYBIND11)\n        FetchContent_Declare(pybind GIT_REPOSITORY https://github.com/pybind/pybind11.git\n            GIT_TAG v2.9.2\n            GIT_SHALLOW 1) # Source: https://github.com/pybind/pybind11/releases\n        FetchContent_MakeAvailable(pybind)\n    else()\n        find_package(pybind11 REQUIRED)\n    endif()\n\n    find_package(PythonLibs REQUIRED)\nendif()\n\n# ####################################################\n# Preprocessor Macros\n# ####################################################\nif(KOMPUTE_OPT_ANDROID_BUILD)\n    add_compile_definitions(VK_USE_PLATFORM_ANDROID_KHR=1)\nendif()\n\nif(KOMPUTE_OPT_BUILD_PYTHON)\n    add_compile_definitions(KOMPUTE_BUILD_PYTHON=1)\nendif()\n\nif(KOMPUTE_OPT_DISABLE_VK_DEBUG_LAYERS)\n    add_compile_definitions(KOMPUTE_DISABLE_VK_DEBUG_LAYERS=1)\nendif()\n\n# ####################################################\n# Misc Options\n# ####################################################\nif(KOMPUTE_OPT_INSTALL)\n    # Enable install parameters for glslang (overrides parameters passed)\n    # When install is enabled the glslang libraries become shared\n    set(ENABLE_GLSLANG_INSTALL ON CACHE BOOL \"Enables install of glslang\" FORCE)\nendif()\n\nif(MSVC)\n    # MSVC is true when the compiler is msvc(cl) or clang-cl, both receive msvc-like commandline flags\nelse()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror\")\nendif()\n\n# If glslang is cloned, then SPIRV/GlslangToSpv.h will be used instead of glslang/SPIRV/GlslangToSpv.h\n# As after installation, SPIRV/ header files will be found in glslang/SPIRV/ , more info in #193\nif(KOMPUTE_OPT_REPO_SUBMODULE_BUILD)\n    add_definitions(-DUSE_EXTERNAL_GLSLANG)\nendif()\n\n# Allow scripts to call main kompute Makefile\nfunction(kompute_make KOMPUTE_MAKE_TARGET)\n    add_custom_target(${KOMPUTE_MAKE_TARGET}\n        COMMAND make -C ${PROJECT_SOURCE_DIR} ${KOMPUTE_MAKE_TARGET})\nendfunction()\n\nadd_subdirectory(src)\n\nif(KOMPUTE_OPT_BUILD_TESTS OR KOMPUTE_OPT_ENABLE_BENCHMARK)\n    enable_testing()\nendif()\n\nif(KOMPUTE_OPT_BUILD_TESTS)\n    add_subdirectory(test)\nendif()\n\nif(KOMPUTE_OPT_ENABLE_BENCHMARK)\n    add_subdirectory(benchmark)\nendif()\n\nif(KOMPUTE_OPT_CODE_COVERAGE)\n    if(NOT UNIX)\n        message(FATAL_ERROR \"KOMPUTE_OPT_CODE_COVERAGE can only be enabled in unix based systems due to limitation on gcov.\")\n    endif()\n\n    include(cmake/code_coverage.cmake)\nendif()\n\nif(KOMPUTE_OPT_BUILD_DOCS)\n    set(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/config\" ${CMAKE_MODULE_PATH})\n    add_subdirectory(docs)\nendif()\n\nif(KOMPUTE_OPT_BUILD_PYTHON)\n    add_subdirectory(python)\nendif()\n\nif(KOMPUTE_OPT_INSTALL)\n    # Many other targets may be exported to komputeTargets in subdirs, so install the export in the last\n    # Generates komputeTargets.cmake, which is required by komputeConfig.cmake in a find_package call.\n    install(EXPORT komputeTargets\n        FILE komputeTargets.cmake\n        NAMESPACE kompute::\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/kompute)\n\n    # Copy CMake files needed to `vulkan_compile_shader`\n    install(FILES\n        cmake/vulkan_shader_compiler.cmake\n        cmake/bin_file_to_header.cmake\n        cmake/bin2h.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/kompute)\nendif()\n\n\ninclude(cmake/set_package_info.cmake)\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0107421875,
          "content": "kompute.cc\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 8.5458984375,
          "content": "Kompute follows [Linux Foundation's Code of Conduct](https://lfprojects.org/policies/code-of-conduct/).\n\n# Introduction \n\nThe purposes of LF Projects, LLC (âLF Projectsâ) are to:\n\n    support the collaborative development, availability and adoption of open source software, hardware and networking and other technologies and the collaborative development, availability and adoption of open protocols and standards (individually and collectively, âOpen Technologyâ);\n    host various projects pursuing the development of Open Technology and other technical assets, materials and processes (each such project, which itself may include any number of projects, a âProjectâ);\n    provide enablement and support to Projects to assist their development activities; and\n    undertake such other lawful activity as permitted by law and as consistent with the mission, purpose and tax status of LFP, Inc., a Delaware non-profit non-stock corporation and the sole member of LF Projects.\n\nLF Projects hosts communities where participants choose to work together, and in that process experience differences in language, location, nationality, and experience. In such a diverse environment, misunderstandings and disagreements happen, which in most cases can be resolved informally. In rare cases, however, behavior can intimidate, harass, or otherwise disrupt one or more people in the community, which LF Projects will not tolerate.\n\nA Code of Conduct (âCodeâ) is useful to define accepted and acceptable behaviors and to promote high standards of professional practice. It also provides a benchmark for self-evaluation and acts as a vehicle for better identity of the organization.\n\nLF Projects is a Delaware series limited liability company.  Projects of LF Projects are formed as separate series of LF Projects (each, a âSeriesâ).  References to âProjectsâ within this Policy include the applicable Series for each Project.\n\nThis Code applies to any participant of any Project â including without limitation developers, participants in meetings, teleconferences, mailing lists, conferences or functions, and contributors. Note that this Code complements rather than replaces legal rights and obligations pertaining to any particular situation.  In addition, with the approval of LF Projects, Projects are free to adopt their own code of conduct in place of the Code.\n\n## Statement of Intent\n\nLF Projects is committed to maintain a positive, professional work environment. This commitment calls for workplaces where participants at all levels behave according to the rules of the following code. A foundational concept of this code is that we all share responsibility for our work environment.\n\n## Code\n\n    Treat each other with respect, professionalism, fairness, and sensitivity to our many differences and strengths, including in situations of high pressure and urgency.\n    Never harass or bully anyone verbally, physically or sexually.\n    Never discriminate on the basis of personal characteristics or group membership.\n    Communicate constructively and avoid demeaning or insulting behavior or language.\n    Seek, accept, and offer objective work criticism, and acknowledge properly the contributions of others.\n    Be honest about your own qualifications, and about any circumstances that might lead to conflicts of interest.\n    Respect the privacy of others and the confidentiality of data you access.\n    With respect to cultural differences, be conservative in what you do and liberal in what you accept from others, but not to the point of accepting disrespectful, unprofessional or unfair or unwelcome behavior or advances.\n    Promote the rules of this Code and take action (especially if you are in a leadership position) to bring the discussion back to a more civil level whenever inappropriate behaviors are observed.\n    Stay on topic: Make sure that you are posting to the correct channel and avoid off-topic discussions. Remember when you update an issue or respond to an email you are potentially sending to a large number of people.\n    Step down considerately: participants in every project come and go, and LF Projects is no different. When you leave or disengage from the project, in whole or in part, we ask that you do so in a way that minimizes disruption to the project. This means you should tell people you are leaving and take the proper steps to ensure that others can pick up where you left off. \n\n# Glossary\n\n## Demeaning behavior\n\nis acting in a way that reduces another personâs dignity, sense of self-worth or respect within the community.\n\n## Discrimination\n\nis the prejudicial treatment of an individual based on criteria such as: physical appearance, race, ethnic origin, genetic differences, national or social origin, name, religion, gender, sexual orientation, family or health situation, pregnancy, disability, age, education, wealth, domicile, political view, morals, employment, or union activity.\n\n## Insulting behavior\n\nis treating another person with scorn or disrespect.\n\n## Acknowledgement\n\nis a record of the origin(s) and author(s) of a contribution.\n\n## Harassment\n\nis any conduct, verbal or physical, that has the intent or effect of interfering with an individual, or that creates an intimidating, hostile, or offensive environment.\n\n## Leadership position\n\nincludes group Chairs, project maintainers, staff members, and Board members.\n\n## Participant\n\nincludes the following persons:\n\n    Developers\n    Representatives of corporate participants\n    Anyone from the Public partaking in the LF Projects work environment (e.g. contribute code, comment on our code or specs, email us, attend our conferences, functions, etc)\n\n## Respect\n\nis the genuine consideration you have for someone (if only because of their status as participant in LF Projects, like yourself), and that you show by treating them in a polite and kind way.\n\n## Sexual harassment\n\nincludes visual displays of degrading sexual images, sexually suggestive conduct, offensive remarks of a sexual nature, requests for sexual favors, unwelcome physical contact, and sexual assault.\n\n## Unwelcome behavior\n\nHard to define? Some questions to ask yourself are:\n\n    how would I feel if I were in the position of the recipient?\n    would my spouse, parent, child, sibling or friend like to be treated this way?\n    would I like an account of my behavior published in the organizationâs newsletter?\n    could my behavior offend or hurt other members of the work group?\n    could someone misinterpret my behavior as intentionally harmful or harassing?\n    would I treat my boss or a person I admire at work like that ?\n\nSummary: if you are unsure whether something might be welcome or unwelcome, donât do it.\n\n## Unwelcome sexual advance\n\nincludes requests for sexual favors, and other verbal or physical conduct of a sexual nature, where:\n\n    submission to such conduct is made either explicitly or implicitly a term or condition of an individualâs employment,\n    submission to or rejection of such conduct by an individual is used as a basis for employment decisions affecting the individual,\n    such conduct has the purpose or effect of unreasonably interfering with an individualâs work performance or creating an intimidating hostile or offensive working environment.\n\n## Workplace Bullying\n\nis a tendency of individuals or groups to use persistent aggressive or unreasonable behavior (e.g. verbal or written abuse, offensive conduct or any interference which undermines or impedes work) against a co-worker or any professional relations.\n\n## Work Environment\n\nis the set of all available means of collaboration, including, but not limited to messages to mailing lists, private correspondence, Web pages, chat channels, phone and video teleconferences, and any kind of face-to-face meetings or discussions.\n\n## Incident Procedure\n\nTo report incidents or to appeal reports of incidents, send email to the Manager of LF Projects, Mike Dolan (manager@lfprojects.org). Please include any available relevant information, including links to any publicly accessible material relating to the matter. Every effort will be taken to ensure a safe and collegial environment in which to collaborate on matters relating to the Project. In order to protect the community, the Project reserves the right to take appropriate action, potentially including the removal of an individual from any and all participation in the project. The Project will work towards an equitable resolution in the event of a misunderstanding.\n\n## Credits\n\nThis code is based on the W3Câs Code of Ethics and Professional Conduct with some additions from the Cloud Foundryâs Code of Conduct and the Hyperledger Project Code of Conduct.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8720703125,
          "content": "# Contributing \n\nThank you for looking to contributed to Kompute. We welcome contributions of any type including:\n\n- Reporting a bug\n- Adding tests\n- Submitting a fix\n- Proposing new features\n\n## We Develop with Github\n\nWe use github to host code, to track issues and feature requests, as well as accept pull requests.\n\n## We Use [Github Flow](https://guides.github.com/introduction/flow/index.html), So All Code Changes Happen Through Pull Requests\n\nPull requests are the best way to propose changes to the codebase (we use [Github Flow](https://guides.github.com/introduction/flow/index.html)). We actively welcome your pull requests:\n\n1. Fork the repo and create your branch from `master`.\n2. Add tests to maintain and/or increase code coverage.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. Issue that pull request!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1474609375,
          "content": "FROM nvidia/vulkan:1.1.121\n\nRUN apt update -y\nRUN apt install g++ -y\n\nRUN mkdir /workspace\nWORKDIR /workspace\n\nCOPY . /workspace\n\nRUN make build_linux\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 0.8671875,
          "content": "## Governance of the Kompute\n\nKompute is an Open Source project within the [LF AI & Data Foundation](https://lfaidata.foundation/).\n\n### Technical Steering Committee\n\nKompute development is governed by the Kompute Technical Steering Committee (TSC). The TSC consists of voting and\nnon-voting members, in addition to a chairman responsible for running TSC meetings, setting the meeting agenda, and\ncalling votes on proposals.\n\nCurrent chairperson of the Kompute TSC:\n* [Alejandro Saucedo](https://github.com/axsaucedo/) - The Institute for Ethical AI & Machine Learning\n\nCurrent voting members of the Kompute TSC:\n* [Alejandro Saucedo](https://github.com/axsaucedo/) - The Institute for Ethical AI & Machine Learning\n* [Donald Whyte](https://github.com/DonaldWhyte) - Donsoft Limited\n\nNon-voting members of the TSC (\"maintainers\") take part in the standing TSC meetings and mailing lists.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1123046875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2021 The Institute for Ethical AI & Machine Learning\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1767578125,
          "content": "include CMakeLists.txt\ninclude LICENSE\nrecursive-include src *\nrecursive-include python *\nrecursive-include single_include *\nrecursive-include external *\nrecursive-include cmake *\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.2841796875,
          "content": "# This makefile is optimized to be run from WSL and to interact with the \n# Windows host as there are limitations when building GPU programs. This\n# makefile contains the commands for interacting with the visual studio\n# build via command line for faster iterations, as the intention is to \n# support other editors (optimised for vim). There are also commands that\n# support the builds for linux-native compilations and these are the commands\n# starting with mk_.\n\nVERSION := $(shell cat ./VERSION)\n\nVCPKG_WIN_PATH ?= \"C:\\\\Users\\\\axsau\\\\Programming\\\\lib\\\\vcpkg\\\\scripts\\\\buildsystems\\\\vcpkg.cmake\"\nVCPKG_UNIX_PATH ?= \"/c/Users/axsau/Programming/lib/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n\n# These are the tests that don't work with swiftshader but can be run directly with vulkan\nFILTER_TESTS ?= \"-TestAsyncOperations.TestManagerParallelExecution:TestSequence.SequenceTimestamps:TestPushConstants.TestConstantsDouble\"\n\nifeq ($(OS),Windows_NT)     # is Windows_NT on XP, 2000, 7, Vista, 10...\n\tCMAKE_BIN ?= \"C:\\Program Files\\CMake\\bin\\cmake.exe\"\n\tSCMP_BIN=\"C:\\\\VulkanSDK\\\\1.2.141.2\\\\Bin32\\\\glslangValidator.exe\"\n\tMSBUILD_BIN ?= \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\MSBuild\\\\Current\\\\Bin\\\\MSBuild.exe\"\nelse\n\tCLANG_FORMAT_BIN ?= \"/home/alejandro/Programming/lib/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang-format\"\n\tCMAKE_BIN ?= \"/c/Program Files/CMake/bin/cmake.exe\"\n\tMSBUILD_BIN ?= \"/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe\"\n\t# Choosing the binary based on whether it's on WSL or linux-native\n\tKERNEL := $(shell uname -r)\n\tIS_WSL := $(shell (if [[ \"$(KERNEL)\" =~ Microsoft$  ]]; then echo '0'; fi))\n\tifeq ($(IS_WSL),0)\n\t\tSCMP_BIN ?= \"/c/VulkanSDK/1.2.141.2/Bin32/glslangValidator.exe\"\n\telse\n\t\tSCMP_BIN ?= \"/usr/bin/glslangValidator\"\n\tendif\nendif\n\n\n####### Main Target Rules #######\n\npush_docs_to_ghpages:\n\tGIT_DEPLOY_DIR=\"build/docs/sphinx/\" \\\n\t\tGIT_DEPLOY_BRANCH=\"gh-pages\" \\\n\t\tGIT_DEPLOY_REPO=\"origin\" \\\n\t\t\t./scripts/push_folder_to_branch.sh\n\n####### CMAKE quickstart commands #######\n\nclean_cmake:\n\trm -rf build/\n\n####### Visual studio build shortcut commands #######\n\nMK_BUILD_TYPE ?= \"Release\"\nMK_INSTALL_PATH ?= \"build/src/CMakeFiles/Export/\" # Set to \"\" if prefer default\nMK_CMAKE_EXTRA_FLAGS ?= \"\"\nMK_KOMPUTE_EXTRA_CXX_FLAGS ?= \"\"\n\nmk_cmake:\n\tcmake \\\n\t\t-Bbuild \\\n\t\t-DCMAKE_CXX_FLAGS=$(MK_KOMPUTE_EXTRA_CXX_FLAGS) \\\n\t\t-DCMAKE_BUILD_TYPE=$(MK_BUILD_TYPE) \\\n\t\t-DCMAKE_INSTALL_PREFIX=$(MK_INSTALL_PATH) \\\n\t\t-DKOMPUTE_OPT_INSTALL=ON \\\n\t\t-DKOMPUTE_OPT_BUILD_TESTS=ON \\\n\t\t-DKOMPUTE_OPT_ENABLE_BENCHMARK=ON \\\n\t\t-DKOMPUTE_OPT_BUILT_IN_VULKAN_HEADER_TAG=\"v1.3.275\" \\\n\t\t-DKOMPUTE_OPT_BUILD_DOCS=ON \\\n\t\t-DKOMPUTE_OPT_CODE_COVERAGE=ON \\\n\t\t-DKOMPUTE_OPT_USE_SPDLOG=1 \\\n\t\t-DKOMPUTE_OPT_LOG_LEVEL=Debug \\\n\t\t-DKOMPUTE_OPT_DISABLE_VK_DEBUG_LAYERS=ON \\\n\t\t-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n\t\t-DKOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK=ON \\\n\t\t$(MK_CMAKE_EXTRA_FLAGS) \\\n\t\t-G \"Unix Makefiles\"\n\nmk_build_all:\n\tcmake --build build/. --parallel\n\nmk_build_docs:\n\tcmake --build build/. --target gendocsall --parallel\n\nmk_build_kompute:\n\tcmake --build build/. --target kompute --parallel\n\nmk_build_tests:\n\tcmake --build build/. --target kompute_tests --parallel\n\nmk_build_benchmark:\n\tcmake --build build/. --target kompute_benchmark --parallel\n\nmk_run_docs: mk_build_docs mk_run_docs_only\n\nmk_run_docs_only:\n\t(cd build/docs/sphinx && python -m http.server)\n\n# An alternative would be: ctest -vv --test-dir build/.\n# But this is not possible since we need to filter specific tests, not complete executables, which is not possible with ctest.\n# https://gitlab.kitware.com/cmake/cmake/-/issues/13168 \nmk_run_tests: mk_build_tests\n\t./build/bin/kompute_tests --gtest_filter=$(FILTER_TESTS)\n\nmk_run_benchmark: mk_build_benchmark\n\t./build/bin/kompute_benchmark --gtest_filter=$(FILTER_TESTS)\n\nmk_build_swiftshader_library:\n\tgit clone https://github.com/google/swiftshader || echo \"Assuming already cloned\"\n\t# GCC 8 or above is required otherwise error on \"filesystem\" lib will appear\n\tCC=\"/usr/bin/gcc-8\" CXX=\"/usr/bin/g++-8\" cmake swiftshader/. -Bswiftshader/build/\n\tcmake --build swiftshader/build/. --parallel\n\nmk_run_tests_cpu: export VK_ICD_FILENAMES=$(PWD)/swiftshader/build/vk_swiftshader_icd.json\nmk_run_tests_cpu: mk_build_swiftshader_library mk_build_tests mk_run_tests_cpu_only\n\n\n####### Visual studio build shortcut commands #######\n\nVS_BUILD_TYPE ?= \"Debug\"\n# Run with multiprocessin / parallel build by default\nVS_CMAKE_EXTRA_FLAGS ?= \"\"\nVS_KOMPUTE_EXTRA_CXX_FLAGS ?= \"\"\nVS_INSTALL_PATH ?= \"build/src/CMakeFiles/Export/\" # Set to \"\" if prefer default\n\nvs_cmake:\n\t$(CMAKE_BIN) \\\n\t\t-Bbuild \\\n\t\t$(VS_CMAKE_EXTRA_FLAGS) \\\n\t\t-DCMAKE_TOOLCHAIN_FILE=$(VCPKG_WIN_PATH) \\\n\t\t-DCMAKE_CXX_FLAGS=$(VS_KOMPUTE_EXTRA_CXX_FLAGS) \\\n\t\t-DCMAKE_INSTALL_PREFIX=$(VS_INSTALL_PATH) \\\n\t\t-DKOMPUTE_OPT_INSTALL=ON \\\n\t\t-DKOMPUTE_OPT_BUILD_TESTS=ON \\\n\t\t-DKOMPUTE_OPT_BUILD_SHADERS=ON \\\n\t\t-DKOMPUTE_OPT_CODE_COVERAGE=OFF \\\n\t\t-DKOMPUTE_OPT_BUILD_DOCS=OFF \\\n\t\t-G \"Visual Studio 16 2019\" \\\n\t\t-DCMAKE_BUILD_TYPE=$(VS_BUILD_TYPE)\n\nvs_build_all:\n\tcmake --build build/. --parallel\n\nvs_build_docs:\n\tcmake --build build/. --target gendocsall --parallel\n\nvs_install_kompute:\n\tcmake --build build/. --target install --parallel\n\nvs_build_kompute:\n\tcmake --build build/. --target kompute --parallel\n\nvs_build_tests:\n\tcmake --build build/. --target kompute_tests --parallel\n\nvs_run_docs: vs_build_docs\n\t(cd build/docs/sphinx && python2.7 -m SimpleHTTPServer)\n\nvs_run_tests: vs_build_tests\n\t./build/test/$(VS_BUILD_TYPE)/bin/kompute_tests.exe --gtest_filter=$(FILTER_TESTS)\n\n\n#### PYTHONG ####\n\ntest_python:\n\tpython3 -m pytest -s --log-cli-level=DEBUG -v python/test/\n\n####### Run CI Commands #######\n\n# This command uses act to replicate github action\n# https://github.com/nektos/act\nrun_ci:\n\tact\n\n####### General project commands #######\n\ngenerate_python_docstrings:\n\tpython -m pybind11_mkdoc \\\n\t\t-o python/src/docstrings.hpp \\\n\t\tkompute/Kompute.hpp \\\n\t\t-Iexternal/fmt/include/ \\\n\t\t-Iexternal/spdlog/include/ \\\n\t\t-Iexternal/glslang/ \\\n\t\t-I/usr/include/c++/7.5.0/\n\ninstall_python_reqs:\n\tpython3 -m pip install -r scripts/requirements.txt\n\ninstall_lcov:\n\tsudo apt install lcov -y\n\nbuild_shaders:\n\tpython3 scripts/convert_shaders.py \\\n\t\t--shader-path shaders/glsl \\\n\t\t--shader-binary $(SCMP_BIN) \\\n\t\t--header-path src/include/kompute/shaders/ \\\n\t\t-v\n\tpython3 scripts/convert_shaders.py \\\n\t\t--shader-path test/shaders/glsl \\\n\t\t--shader-binary $(SCMP_BIN) \\\n\t\t--header-path test/compiled_shaders_include/kompute_test/shaders/ \\\n\t\t-v\n\nbuild_single_header:\n\tquom \\\n\t\t--include_directory \\\n\t\t\"src/include/\" \\\n\t\t\"single_include/AggregateHeaders.cpp\" \\\n\t\t\"single_include/kompute/Kompute.hpp\"\n\nwin_build_xxd:\n\tcd external/bin/ && gcc.exe -o xxd.exe xxd.c -DCYGWIN\n\nformat:\n\tfor val in \"examples single_include src test\" ; do \\\n    \tfind $$val -depth -iname *.h -or -iname *.c -or -iname *.hpp -or -iname *.cpp | grep -v \"shaders\" | xargs $(CLANG_FORMAT_BIN) -style=file -i; \\\n\tdone\n\nstatic_scan:\n\tcppcheck --project=build/compile_commands.json -iexternal/\n\nbuild_changelog:\n\tdocker run --rm -it -v \"$(PWD)\":/usr/local/src/your-app -e CHANGELOG_GITHUB_TOKEN=${CHANGELOG_GITHUB_TOKEN} ferrarimarco/github-changelog-generator:1.15.2 -u KomputeProject -p kompute\n\tchmod 664 CHANGELOG.md # (Read+Write, Read+Write, Read)\n\tsed -i -e 's/\\(HEAD\\|Unreleased\\)/v${VERSION}/g' CHANGELOG.md # Replacing unreleased version with latest tag\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.62109375,
          "content": "\n![GitHub](https://img.shields.io/badge/Version-0.7.0-green.svg)\n![GitHub](https://img.shields.io/badge/C++-14â20-purple.svg)\n![GitHub](https://img.shields.io/badge/Build-cmake-red.svg)\n![GitHub](https://img.shields.io/badge/Python-3.7â3.9-blue.svg)\n![GitHub](https://img.shields.io/badge/License-Apache-black.svg)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4834/badge)](https://bestpractices.coreinfrastructure.org/projects/4834)\n\n<table>\n<tr>\n\n<td width=\"20%\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/kompute.jpg\">\n</td>\n\n<td>\n\n<h1>Kompute</h1>\n<h3>The general purpose GPU compute framework for cross vendor graphics cards (AMD, Qualcomm, NVIDIA & friends)</h3>\n\n</td>\n\n</tr>\n</table>\n\n<h4>Blazing fast, mobile-enabled, asynchronous, and optimized for advanced GPU acceleration usecases.</h4>\n\nð¬ [Join the Discord & Community Calls](https://kompute.cc/overview/community.html) ð [Documentation](https://kompute.cc) ð» [Blog Post](https://medium.com/@AxSaucedo/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a) â¨ [Examples](#more-examples) ð¾\n\n<hr>\n\n##### Kompute is backed by the Linux Foundation as a <a href=\"https://lfaidata.foundation/blog/2021/08/26/kompute-joins-lf-ai-data-as-new-sandbox-project/\">hosted project</a> by the LF AI & Data Foundation.\n\n<table>\n<tr>\n<td>\n<a href=\"https://www.linuxfoundation.org/projects/\">\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b5/Linux_Foundation_logo.png\">\n</a>\n</td>\n<td>\n<a href=\"https://lfaidata.foundation/projects/\">\n<img src=\"https://raw.githubusercontent.com/lfai/artwork/main/lfaidata-assets/lfaidata/horizontal/color/lfaidata-horizontal-color.png\">\n</a>\n</td>\n</tr>\n</table>\n\n\n## Principles & Features\n\n* [Flexible Python module](#your-first-kompute-python) with [C++ SDK](#your-first-kompute-c) for optimizations\n* [Asynchronous & parallel processing](#asynchronous-and-parallel-operations) support through GPU family queues\n* [Mobile enabled](#mobile-enabled) with examples via Android NDK across several architectures\n* BYOV: [Bring-your-own-Vulkan design](#motivations) to play nice with existing Vulkan applications\n* Explicit relationships for GPU and host [memory ownership and memory management](https://kompute.cc/overview/memory-management.html)\n* Robust codebase with [90% unit test code coverage](https://kompute.cc/codecov/)\n* Advanced use-cases on [machine learning ð¤](https://towardsdatascience.com/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a), [mobile development ð±](https://towardsdatascience.com/gpu-accelerated-machine-learning-in-your-mobile-applications-using-the-android-ndk-vulkan-kompute-1e9da37b7617) and [game development ð®](https://towardsdatascience.com/supercharging-game-development-with-gpu-accelerated-ml-using-vulkan-kompute-the-godot-game-engine-4e75a84ea9f0).\n* Active community with [monthly calls, discord chat and more](https://kompute.cc/overview/community.html)\n\n![](https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/komputer-logos.gif)\n\n## Projects using Kompute â¤ï¸  ð¤\n\n* [GPT4ALL](https://github.com/nomic-ai/gpt4all) ![](https://img.shields.io/github/stars/nomic-ai/gpt4all.svg?style=social) - An ecosystem of open-source on-edge large language models that run locally on your CPU and nearly any GPU.\n* [llama.cpp](https://github.com/ggerganov/llama.cpp) ![](https://img.shields.io/github/stars/ggerganov/llama.cpp.svg?style=social) - Port of Facebook's LLaMA model in C/C++.\n* [tpoisonooo/how-to-optimize-gemm](https://github.com/tpoisonooo/how-to-optimize-gemm) ![](https://img.shields.io/github/stars/tpoisonooo/how-to-optimize-gemm.svg?style=social) - row-major matmul optimization.\n* [vkJAX](https://github.com/alexander-g/vkJAX) ![](https://img.shields.io/github/stars/alexander-g/vkJAX.svg?style=social) - JAX interpreter for Vulkan.\n\n## Getting Started\n\nBelow you can find a GPU multiplication example using the C++ and Python Kompute interfaces.\n\nYou can [join the Discord](https://discord.gg/MaH5Jv5zwv) for questions / discussion, open a [github issue](https://github.com/KomputeProject/kompute/issues/new), or read [the documentation](https://kompute.cc/).\n\n### Your First Kompute (C++)\n\nThe C++ interface provides low level access to the native components of Kompute, enabling for [advanced optimizations](https://kompute.cc/overview/async-parallel.html) as well as [extension of components](https://kompute.cc/overview/reference.html).\n\n```c++\n\nvoid kompute(const std::string& shader) {\n\n    // 1. Create Kompute Manager with default settings (device 0, first queue and no extensions)\n    kp::Manager mgr; \n\n    // 2. Create and initialise Kompute Tensors through manager\n\n    // Default tensor constructor simplifies creation of float values\n    auto tensorInA = mgr.tensor({ 2., 2., 2. });\n    auto tensorInB = mgr.tensor({ 1., 2., 3. });\n    // Explicit type constructor supports uint32, int32, double, float and bool\n    auto tensorOutA = mgr.tensorT<uint32_t>({ 0, 0, 0 });\n    auto tensorOutB = mgr.tensorT<uint32_t>({ 0, 0, 0 });\n\n    std::vector<std::shared_ptr<kp::Memory>> params = {tensorInA, tensorInB, tensorOutA, tensorOutB};\n\n    // 3. Create algorithm based on shader (supports buffers & push/spec constants)\n    kp::Workgroup workgroup({3, 1, 1});\n    std::vector<float> specConsts({ 2 });\n    std::vector<float> pushConstsA({ 2.0 });\n    std::vector<float> pushConstsB({ 3.0 });\n\n    auto algorithm = mgr.algorithm(params,\n                                   // See documentation shader section for compileSource\n                                   compileSource(shader),\n                                   workgroup,\n                                   specConsts,\n                                   pushConstsA);\n\n    // 4. Run operation synchronously using sequence\n    mgr.sequence()\n        ->record<kp::OpSyncDevice>(params)\n        ->record<kp::OpAlgoDispatch>(algorithm) // Binds default push consts\n        ->eval() // Evaluates the two recorded operations\n        ->record<kp::OpAlgoDispatch>(algorithm, pushConstsB) // Overrides push consts\n        ->eval(); // Evaluates only last recorded operation\n\n    // 5. Sync results from the GPU asynchronously\n    auto sq = mgr.sequence();\n    sq->evalAsync<kp::OpSyncLocal>(params);\n\n    // ... Do other work asynchronously whilst GPU finishes\n\n    sq->evalAwait();\n\n    // Prints the first output which is: { 4, 8, 12 }\n    for (const float& elem : tensorOutA->vector()) std::cout << elem << \"  \";\n    // Prints the second output which is: { 10, 10, 10 }\n    for (const float& elem : tensorOutB->vector()) std::cout << elem << \"  \";\n\n} // Manages / releases all CPU and GPU memory resources\n\nint main() {\n\n    // Define a raw string shader (or use the Kompute tools to compile to SPIRV / C++ header\n    // files). This shader shows some of the main components including constants, buffers, etc\n    std::string shader = (R\"(\n        #version 450\n\n        layout (local_size_x = 1) in;\n\n        // The input tensors bind index is relative to index in parameter passed\n        layout(set = 0, binding = 0) buffer buf_in_a { float in_a[]; };\n        layout(set = 0, binding = 1) buffer buf_in_b { float in_b[]; };\n        layout(set = 0, binding = 2) buffer buf_out_a { uint out_a[]; };\n        layout(set = 0, binding = 3) buffer buf_out_b { uint out_b[]; };\n\n        // Kompute supports push constants updated on dispatch\n        layout(push_constant) uniform PushConstants {\n            float val;\n        } push_const;\n\n        // Kompute also supports spec constants on initalization\n        layout(constant_id = 0) const float const_one = 0;\n\n        void main() {\n            uint index = gl_GlobalInvocationID.x;\n            out_a[index] += uint( in_a[index] * in_b[index] );\n            out_b[index] += uint( const_one * push_const.val );\n        }\n    )\");\n\n    // Run the function declared above with our raw string shader\n    kompute(shader);\n}\n\n```\n\n### Your First Kompute (Python)\n\nThe [Python package](https://kompute.cc/overview/python-package.html) provides a [high level interactive interface](https://kompute.cc/overview/python-reference.html) that enables for experimentation whilst ensuring high performance and fast development workflows.\n\n```python\n\nfrom .utils import compile_source # using util function from python/test/utils\n\ndef kompute(shader):\n    # 1. Create Kompute Manager with default settings (device 0, first queue and no extensions)\n    mgr = kp.Manager()\n\n    # 2. Create and initialise Kompute Tensors through manager\n\n    # Default tensor constructor simplifies creation of float values\n    tensor_in_a = mgr.tensor([2, 2, 2])\n    tensor_in_b = mgr.tensor([1, 2, 3])\n    # Explicit type constructor supports uint32, int32, double, float and bool\n    tensor_out_a = mgr.tensor_t(np.array([0, 0, 0], dtype=np.uint32))\n    tensor_out_b = mgr.tensor_t(np.array([0, 0, 0], dtype=np.uint32))\n    assert(t_data.data_type() == kp.DataTypes.uint)\n\n    params = [tensor_in_a, tensor_in_b, tensor_out_a, tensor_out_b]\n\n    # 3. Create algorithm based on shader (supports buffers & push/spec constants)\n    workgroup = (3, 1, 1)\n    spec_consts = [2]\n    push_consts_a = [2]\n    push_consts_b = [3]\n\n    # See documentation shader section for compile_source\n    spirv = compile_source(shader)\n\n    algo = mgr.algorithm(params, spirv, workgroup, spec_consts, push_consts_a)\n\n    # 4. Run operation synchronously using sequence\n    (mgr.sequence()\n        .record(kp.OpTensorSyncDevice(params))\n        .record(kp.OpAlgoDispatch(algo)) # Binds default push consts provided\n        .eval() # evaluates the two recorded ops\n        .record(kp.OpAlgoDispatch(algo, push_consts_b)) # Overrides push consts\n        .eval()) # evaluates only the last recorded op\n\n    # 5. Sync results from the GPU asynchronously\n    sq = mgr.sequence()\n    sq.eval_async(kp.OpTensorSyncLocal(params))\n\n    # ... Do other work asynchronously whilst GPU finishes\n\n    sq.eval_await()\n\n    # Prints the first output which is: { 4, 8, 12 }\n    print(tensor_out_a)\n    # Prints the first output which is: { 10, 10, 10 }\n    print(tensor_out_b)\n\nif __name__ == \"__main__\":\n\n    # Define a raw string shader (or use the Kompute tools to compile to SPIRV / C++ header\n    # files). This shader shows some of the main components including constants, buffers, etc\n    shader = \"\"\"\n        #version 450\n\n        layout (local_size_x = 1) in;\n\n        // The input tensors bind index is relative to index in parameter passed\n        layout(set = 0, binding = 0) buffer buf_in_a { float in_a[]; };\n        layout(set = 0, binding = 1) buffer buf_in_b { float in_b[]; };\n        layout(set = 0, binding = 2) buffer buf_out_a { uint out_a[]; };\n        layout(set = 0, binding = 3) buffer buf_out_b { uint out_b[]; };\n\n        // Kompute supports push constants updated on dispatch\n        layout(push_constant) uniform PushConstants {\n            float val;\n        } push_const;\n\n        // Kompute also supports spec constants on initalization\n        layout(constant_id = 0) const float const_one = 0;\n\n        void main() {\n            uint index = gl_GlobalInvocationID.x;\n            out_a[index] += uint( in_a[index] * in_b[index] );\n            out_b[index] += uint( const_one * push_const.val );\n        }\n    \"\"\"\n\n    kompute(shader)\n\n```\n\n### Interactive Notebooks & Hands on Videos\n\nYou are able to try out the interactive Colab Notebooks which allow you to use a free GPU. The available examples are the Python and C++ examples below:\n\n<table>\n<tr>\n\n<td width=\"50%\">\n<h5>Try the interactive <a href=\"https://colab.research.google.com/drive/1l3hNSq2AcJ5j2E3YIw__jKy5n6M615GP?usp=sharing\">C++ Colab</a> from <a href=\"https://towardsdatascience.com/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a\">Blog Post</a></h5>\n</td>\n\n<td>\n<h5>Try the interactive <a href=\"https://colab.research.google.com/drive/15uQ7qMZuOyk8JcXF-3SB2R5yNFW21I4P\">Python Colab</a> from <a href=\"https://towardsdatascience.com/beyond-cuda-gpu-accelerated-python-for-machine-learning-in-cross-vendor-graphics-cards-made-simple-6cc828a45cc3\">Blog Post</a></h5>\n</td>\n\n</tr>\n<tr>\n\n<td width=\"50%\">\n<a href=\"https://colab.research.google.com/drive/1l3hNSq2AcJ5j2E3YIw__jKy5n6M615GP?authuser=1#scrollTo=1BipBsO-fQRD\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/binder-cpp.jpg\">\n</a>\n</td>\n\n<td>\n<a href=\"https://colab.research.google.com/drive/15uQ7qMZuOyk8JcXF-3SB2R5yNFW21I4P\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/binder-python.jpg\">\n</a>\n</td>\n\n</tr>\n</table>\n\n\nYou can also check out the two following talks presented at the FOSDEM 2021 conference. \n\nBoth videos have timestamps which will allow you to skip to the most relevant section for you - the intro & motivations for both is almost the same so you can skip to the more specific content.\n\n<table>\n<tr>\n\n<td width=\"50%\">\n<h5>Watch the video for <a href=\"https://www.youtube.com/watch?v=Xz4fiQNmGSA\">C++ Enthusiasts</a> </h5>\n</td>\n\n<td>\n<h5>Watch the video for <a href=\"https://www.youtube.com/watch?v=AJRyZ09IUdg\">Python & Machine Learning</a> Enthusiasts</h5>\n</td>\n\n</tr>\n<tr>\n\n<td width=\"50%\">\n<a href=\"https://www.youtube.com/watch?v=Xz4fiQNmGSA\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/kompute-cpp-video.png\">\n</a>\n</td>\n\n<td>\n<a href=\"https://www.youtube.com/watch?v=AJRyZ09IUdg\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/kompute-python-video.png\">\n</a>\n</td>\n\n</tr>\n</table>\n\n\n## Architectural Overview\n\nThe core architecture of Kompute includes the following:\n* [Kompute Manager](https://kompute.cc/overview/reference.html#manager) - Base orchestrator which creates and manages device and child components\n* [Kompute Sequence](https://kompute.cc/overview/reference.html#sequence) - Container of operations that can be sent to GPU as batch\n* [Kompute Operation (Base)](https://kompute.cc/overview/reference.html#algorithm) - Base class from which all operations inherit\n* [Kompute Tensor](https://kompute.cc/overview/reference.html#tensor) - Tensor structured data used in GPU operations\n* [Kompute Algorithm](https://kompute.cc/overview/reference.html#algorithm) - Abstraction for (shader) logic executed in the GPU\n\nTo see a full breakdown you can read further in the [C++ Class Reference](https://kompute.cc/overview/reference.html).\n\n<table>\n<th>\nFull Architecture\n</th>\n<th>\nSimplified Kompute Components\n</th>\n<tr>\n<td width=30%>\n\n\n<img width=\"100%\" src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/kompute-vulkan-architecture.jpg\">\n\n<br>\n<br>\n(very tiny, check the <a href=\"https://ethicalml.github.io/vulkan-kompute/overview/reference.html\">full reference diagram in docs for details</a>)\n<br>\n<br>\n\n<img width=\"100%\" src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/suspicious.jfif\">\n\n</td>\n<td>\n<img width=\"100%\" src=\"https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/kompute-architecture.jpg\">\n</td>\n</tr>\n</table>\n\n\n## Asynchronous and Parallel Operations\n\nKompute provides flexibility to run operations in an asynrchonous way through vk::Fences. Furthermore, Kompute enables for explicit allocation of queues, which allow for parallel execution of operations across queue families.\n\nThe image below provides an intuition on how Kompute Sequences can be allocated to different queues to enable parallel execution based on hardware. You can see the [hands on example](https://kompute.cc/overview/advanced-examples.html#parallel-operations), as well as the [detailed documentation page](https://kompute.cc/overview/async-parallel.html) describing how it would work using an NVIDIA 1650 as an example. \n\n![](https://raw.githubusercontent.com/KomputeProject/kompute/master/docs/images/queue-allocation.jpg)\n\n## Mobile Enabled\n\nKompute has been optimized to work in mobile environments. The [build system](#build-overview) enables for dynamic loading of the Vulkan shared library for Android environments, together with a working [Android NDK wrapper](https://github.com/KomputeProject/kompute/tree/master/vk_ndk_wrapper_include) for the CPP headers.\n\n<table>\n<tr>\n\n<td width=\"70%\">\n<p>\nFor a full deep dive you can read the blog post \"<a href=\"https://towardsdatascience.com/gpu-accelerated-machine-learning-in-your-mobile-applications-using-the-android-ndk-vulkan-kompute-1e9da37b7617\">Supercharging your Mobile Apps with On-Device GPU Accelerated Machine Learning</a>\". \n\nYou can also access the <a href=\"https://github.com/KomputeProject/kompute/tree/v0.4.0/examples/android/android-simple\">end-to-end example code</a> in the repository, which can be run using android studio.\n\n</p>\n\n\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/android-example/docs/images/android-editor.jpg\">\n\n</td>\n\n\n<td width=\"30%\">\n<img src=\"https://raw.githubusercontent.com/KomputeProject/kompute/android-example/docs/images/android-kompute.jpg\">\n</td>\n\n</tr>\n</table>\n\n## More examples\n\n### Simple examples\n\n* [Simple multiplication example](https://kompute.cc/overview/advanced-examples.html#simple-shader-example)\n* [Record batch commands with a Kompute Sequence](https://kompute.cc/overview/advanced-examples.html#record-batch-commands)\n* [Run Asynchronous Operations](https://kompute.cc/overview/advanced-examples.html#asynchronous-operations)\n* [Run Parallel Operations Across Multiple GPU Queues](https://kompute.cc/overview/advanced-examples.html#parallel-operations)\n* [Create your custom Kompute Operations](https://kompute.cc/overview/advanced-examples.html#your-custom-kompute-operation)\n* [Implementing logistic regression from scratch](https://kompute.cc/overview/advanced-examples.html#logistic-regression-example)\n\n### End-to-end examples\n\n* [Machine Learning Logistic Regression Implementation](https://towardsdatascience.com/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a)\n* [Parallelizing GPU-intensive Workloads via Multi-Queue Operations](https://towardsdatascience.com/parallelizing-heavy-gpu-workloads-via-multi-queue-operations-50a38b15a1dc)\n* [Android NDK Mobile Kompute ML Application](https://towardsdatascience.com/gpu-accelerated-machine-learning-in-your-mobile-applications-using-the-android-ndk-vulkan-kompute-1e9da37b7617)\n* [Game Development Kompute ML in Godot Engine](https://towardsdatascience.com/supercharging-game-development-with-gpu-accelerated-ml-using-vulkan-kompute-the-godot-game-engine-4e75a84ea9f0)\n\n## Python Package\n\nBesides the C++ core SDK you can also use the Python package of Kompute, which exposes the same core functionality, and supports interoperability with Python objects like Lists, Numpy Arrays, etc.\n\nThe only dependencies are Python 3.5+ and Cmake 3.4.1+. You can install Kompute from the [Python pypi package](https://pypi.org/project/kp/) using the following command.\n\n```\npip install kp\n```\n\nYou can also install from master branch using:\n\n```\npip install git+git://github.com/KomputeProject/kompute.git@master\n```\n\nFor further details you can read the [Python Package documentation](https://kompute.cc/overview/python-package.html) or the [Python Class Reference documentation](https://kompute.cc/overview/python-reference.html).\n\n## C++ Build Overview\n\nThe build system provided uses `cmake`, which allows for cross platform builds.\n\nThe top level `Makefile` provides a set of optimized configurations for development as well as the docker image build, but you can start a build with the following command:\n\n```\n   cmake -Bbuild\n```\n\nYou also are able to add Kompute in your repo with `add_subdirectory` - the [Android example CMakeLists.txt file](https://github.com/KomputeProject/kompute/blob/7c8c0eeba2cdc098349fcd999102bb2cca1bf711/examples/android/android-simple/app/src/main/cpp/CMakeLists.txt#L3) shows how this would be done.\n\nFor a more advanced overview of the build configuration check out the [Build System Deep Dive](https://kompute.cc/overview/build-system.html) documentation.\n\n## Kompute Development\n\nWe appreciate PRs and Issues. If you want to contribute try checking the \"Good first issue\" tag, but even using Kompute and reporting issues is a great contribution!\n\n### Contributing\n\n#### Dev Dependencies\n\n* Testing\n    + GTest\n* Documentation\n    + Doxygen (with Dot)\n    + Sphynx\n\n#### Development\n\n* Follows Mozilla C++ Style Guide https://www-archive.mozilla.org/hacking/mozilla-style-guide.html\n    + Uses post-commit hook to run the linter, you can set it up so it runs the linter before commit\n    + All dependencies are defined in vcpkg.json \n* Uses cmake as build system, and provides a top level makefile with recommended command\n* Uses xxd (or xxd.exe windows 64bit port) to convert shader spirv to header files\n* Uses doxygen and sphinx for documentation and autodocs\n* Uses vcpkg for finding the dependencies, it's the recommended set up to retrieve the libraries\n\nIf you want to run with debug layers you can add them with the `KOMPUTE_ENV_DEBUG_LAYERS` parameter as:\n\n```\nexport KOMPUTE_ENV_DEBUG_LAYERS=\"VK_LAYER_LUNARG_api_dump\"\n```\n\n##### Updating documentation\n\nTo update the documentation you will need to:\n* Run the gendoxygen target in the build system\n* Run the gensphynx target in the build-system \n* Push to github pages with `make push_docs_to_ghpages`\n\n##### Running tests\n\nRunning the unit tests has been significantly simplified for contributors.\n\nThe tests run on CPU, and can be triggered using the ACT command line interface (https://github.com/nektos/act) - once you install the command line (And start the Docker daemon) you just have to type:\n\n```\n$ act\n\n[Python Tests/python-tests] ð  Start image=axsauze/kompute-builder:0.2\n[C++ Tests/cpp-tests      ] ð  Start image=axsauze/kompute-builder:0.2\n[C++ Tests/cpp-tests      ]   ð³  docker run image=axsauze/kompute-builder:0.2 entrypoint=[\"/usr/bin/tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Tests/python-tests]   ð³  docker run image=axsauze/kompute-builder:0.2 entrypoint=[\"/usr/bin/tail\" \"-f\" \"/dev/null\"] cmd=[]\n...\n```\n\nThe repository contains unit tests for the C++ and Python code, and can be found under the `test/` and `python/test` folder.\n\nThe tests are currently run through the CI using Github Actions. It uses the images found in `docker-builders/`.\n\nIn order to minimise hardware requirements the tests can run without a GPU, directly in the CPU using [Swiftshader](https://github.com/google/swiftshader).\n\nFor more information on how the CI and tests are setup, you can go to the [CI, Docker and Tests Section](https://kompute.cc/overview/ci-tests.html) in the documentation.\n\n## Motivations\n\nThis project started after seeing that a lot of new and renowned ML & DL projects like Pytorch, Tensorflow, Alibaba DNN, Tencent NCNN - among others - have either integrated or are looking to integrate the Vulkan SDK to add mobile (and cross-vendor) GPU support.\n\nThe Vulkan SDK offers a great low level interface that enables for highly specialized optimizations - however it comes at a cost of highly verbose code which requires 500-2000 lines of code to even begin writing application code. This has resulted in each of these projects having to implement the same baseline to abstract the non-compute related features of the Vulkan SDK. This large amount of non-standardised boiler-plate can result in limited knowledge transfer, higher chance of unique framework implementation bugs being introduced, etc.\n\nWe are currently developing Kompute not to hide the Vulkan SDK interface (as it's incredibly well designed) but to augment it with a direct focus on the Vulkan SDK's GPU computing capabilities. [This article](https://towardsdatascience.com/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a) provides a high level overview of the motivations of Kompute, together with a set of hands on examples that introduce both GPU computing as well as the core Kompute architecture.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.490234375,
          "content": "# Security Policy\n\nThis document provides an overview of the security policy of Kompute.\n\nKompute aims to follow the two following policies:\n\n* Keep dependencies up to date\n* Identify and address common vulnerabilities and exposures \n\n## Reporting a Vulnerability\n\nIf you identify a vulnerability the best way to report it is by sending an email to the team via a@ethical.institute. The discussion can then take place there on next steps (ie updating library, reaching out to 3rd party projects, etc).\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.9.0\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-builders",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "kompute-config.cmake",
          "type": "blob",
          "size": 1.14453125,
          "content": "# General purpose GPU compute framework built on Vulkan to\n# support 1000s of cross vendor graphics cards\n# (AMD, Qualcomm, NVIDIA & friends). Blazing fast, mobile-enabled,\n# asynchronous and optimized for advanced GPU data processing use cases.\n# Backed by the Linux Foundation. \n#\n# Finding this module will define the following variables:\n#  KOMPUTE_FOUND - True if the core library has been found\n#  KOMPUTE_LIBRARIES - Path to the core library archive\n#  KOMPUTE_INCLUDE_DIRS - Path to the include directories. Gives access\n#                     to kompute.h, as a single include which must be included in every\n#                     file that uses this interface. Else it also points to the\n#                     directory for individual includes.\n\nfind_path(KOMPUTE_INCLUDE_DIR\n          NAMES kompute.h)\n\nfind_library(KOMPUTE_LIBRARY\n             NAMES kompute\n             HINTS ${KOMPUTE_LIBRARY_ROOT})\n\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(KOMPUTE REQUIRED_VARS KOMPUTE_LIBRARY KOMPUTE_INCLUDE_DIR)\n\nif(KOMPUTE_FOUND)\n    set(KOMPUTE_LIBRARIES ${KOMPUTE_LIBRARY})\n    set(KOMPUTE_INCLUDE_DIRS ${KOMPUTE_INCLUDE_DIR})\nendif()\n"
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 0.0322265625,
          "content": "[TYPECHECK]\ngenerated-members=sh\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.5283203125,
          "content": "import os\nimport re\nimport platform\nimport sys\nimport sysconfig\nimport subprocess\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\ncurr_dir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(curr_dir, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    def run(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError(\"CMake must be installed to build the following extensions: \" +\n                               \", \".join(e.name for e in self.extensions))\n\n        cmake_version = LooseVersion(re.search(r'version\\s*([\\d.]+)', out.decode()).group(1))\n        if cmake_version < '3.15':\n            raise RuntimeError(\"CMake >= 3.15 is required\")\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n        # required for auto-detection of auxiliary \"native\" libs\n        if not extdir.endswith(os.path.sep):\n            extdir += os.path.sep\n\n        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n                      '-DKOMPUTE_OPT_BUILD_PYTHON=ON',\n                      '-DKOMPUTE_OPT_LOG_LEVEL=Off',\n                      '-DKOMPUTE_OPT_USE_SPDLOG=Off',\n                      '-DKOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK=ON'\n                      '-DPYTHON_EXECUTABLE=' + sys.executable,\n                      '-DPYTHON_INCLUDE_DIR=' + sysconfig.get_path('include'),\n                      '-DPYTHON_LIBRARY=' + sysconfig.get_path('stdlib'),\n        ]\n\n        cfg = 'Debug' if self.debug else 'Release'\n        build_args = ['--config', cfg]\n\n        env = os.environ.copy()\n        oldCxxFlags = env.get('CXXFLAGS', '')\n        env['CXXFLAGS'] = f'{oldCxxFlags} -DVERSION_INFO=\\\\\"{self.distribution.get_version()}\\\\\"'\n\n        if platform.system() == \"Windows\":\n            cmake_args += [f'-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}']\n            if sys.maxsize > 2**32:\n                cmake_args += ['-A', 'x64']\n            build_args += ['--', '/m']\n        else:\n            env['CXXFLAGS'] += ' -fPIC'\n            cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]\n            build_args += ['--', '-j']\n            # Optional environment variable to limit the number of parallel jobs for GitHub actions to reduce RAM usage\n            if 'KOMPUTE_PYTHON_NUM_PARALLEL_THREADS' in env:\n                build_args += env['KOMPUTE_PYTHON_NUM_PARALLEL_THREADS']\n\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n\n        subprocess.check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n        subprocess.check_call(['cmake', '--build', '.'] + build_args, cwd=self.build_temp)\n\nsetup(\n    name='kp',\n    version='0.9.0',\n    author='Alejandro Saucedo',\n    description='Kompute: Blazing fast, mobile-enabled, asynchronous, and optimized for advanced GPU processing usecases.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    ext_modules=[CMakeExtension('kp')],\n    install_requires=[\n        \"numpy<2.0.0\"\n    ],\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n    include_package_data=True,\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json.opt",
          "type": "blob",
          "size": 0.1337890625,
          "content": "{\n  \"name\": \"example\",\n  \"version-string\": \"0.9.0\",\n  \"dependencies\": [\n    \"fmt\",\n    \"spdlog\",\n    \"vulkan-headers\",\n    \"gtest\"\n  ]\n}\n"
        }
      ]
    }
  ]
}