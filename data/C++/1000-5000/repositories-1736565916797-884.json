{
  "metadata": {
    "timestamp": 1736565916797,
    "page": 884,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/phxrpc",
      "stars": 1996,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1142578125,
          "content": "*.o\n*.a\n*.pb.*\n*_dispatcher.*\n!base_dispatcher.*\n*_stub.*\n*_service.*\n*_tool.*\n*_main\nthird_party/*\nsbin/*\nsample/*\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.103515625,
          "content": "[submodule \"third_party/protobuf\"]\n\tpath = third_party/protobuf\n\turl = https://github.com/google/protobuf\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.193359375,
          "content": "# Ubuntu 14.04 Trusty support\nsudo: required\ndist: trusty\n\nlanguage: cpp\ncompiler: g++\ngit:\n    submodules: false\nscript:\n    - ./build.sh\nnotifications:\n    email: true\nbranches:\n  only:\n  - /.*/\n\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.216796875,
          "content": "# Names should be added to this file like so:\r\n# Name or Organization <email address>\r\n\r\nTencent Inc.\r\n\r\nSifan Liu <stephenliu@tencent.com>\r\nHaochuan Cui <lynncui@tencent.com>\r\nDuokai Huang <mariohuang@tencent.com>\r\n\r\n\r\n\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.6044921875,
          "content": "Tencent is pleased to support the open source community by making \nPhxRPC available.  \n\nSee the AUTHORS file for names of contributors.\n\nCopyright (C) 2016 THL A29 Limited, a Tencent company.  \nAll rights reserved.\nIf you have downloaded a copy of the PhxRPC binary from Tencent, \nplease note that the PhxRPC binary is licensed under \nthe BSD 3-Clause License.\nIf you have downloaded a copy of the PhxRPC source code from \nTencent, please note that PhxRPC source code is licensed under \nthe BSD 3-Clause License, except for the third-party components \nlisted below which are subject to different license terms.  Your \nintegration of PhxRPC into your own projects may require \ncompliance with the BSD 3-Clause License, as well as the other \nlicenses applicable to the third-party components included within \nPhxRPC.\n\nA copy of the BSD 3-Clause License is included in this file.\nOther dependencies and licenses:\n\nOpen Source Software Licensed under the BSD 3-Clause License:\n--------------------------------------------------------------------\n1. protobuf  3.0.0-beta-1\nCopyright 2014, Google Inc.  \nAll rights reserved.\n\nTerms of the BSD 3-Clause License:\n--------------------------------------------------------------------\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions \nare met:\n\n1\tRedistributions of source code must retain the above copyright \nnotice, this list of conditions and the following disclaimer.\n\n2\tRedistributions in binary form must reproduce the above copyright \nnotice, this list of conditions and the following disclaimer in the \ndocumentation and/or other materials provided with the distribution.\n\n3\tNeither the name of [copyright holder] nor the names of its \ncontributors may be used to endorse or promote products derived from \nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS \nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE \nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, \nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT \nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6884765625,
          "content": "version = 0.8.0\n\nall:\n\t@( cd phxrpc; make )\n\t@( cd codegen; make )\n\t@( cd sample; test -f Makefile || ./regen.sh; make )\n\nboost:\n\t@( cd plugin_boost; make )\n\ndist: clean phxrpc-$(version).src.tar.gz\n\nphxrpc-$(version).src.tar.gz:\n\t@find . -type f | grep -v CVS | grep -v .svn | grep -v third_party | sed s:^./:phxrpc-$(version)/: > MANIFEST\n\t@(cd ..; ln -s phxrpc phxrpc-$(version))\n\t(cd ..; tar cvf - `cat phxrpc/MANIFEST` | gzip > phxrpc/phxrpc-$(version).src.tar.gz)\n\t@(cd ..; rm phxrpc-$(version))\n\nclean:\n\t@( rm -rf lib/*; )\n\t@( cd phxrpc; make clean )\n\t@( cd codegen; make clean )\n\t@( cd sample; test -f Makefile && make clean )\n\t@( cd plugin_boost; make clean )\n\t@( cd plugin_darwin; make clean )\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.685546875,
          "content": "<img align=\"right\" src=\"http://mmbiz.qpic.cn/mmbiz/UqFrHRLeCAkOcYOjaX3oxIxWicXVJY0ODsbAyPybxk4DkPAaibgdm7trm1MNiatqJYRpF034J7PlfwCz33mbNUkew/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1\" hspace=\"15\" width=\"150px\" style=\"float: right\">\n\n**PhxRPC是微信后台团队推出的一个非常简洁小巧的RPC框架，编译生成的库只有450K。**\n\n作者： Sifan Liu, Haochuan Cui 和 Duokai Huang\n\n联系我们：phxteam@tencent.com\n\n想了解更多, 以及更详细的编译手册，请进入[中文WIKI](https://github.com/Tencent/phxrpc/wiki)，和扫描右侧二维码关注我们的公众号\n\nPhxRPC[![Build Status](https://travis-ci.org/Tencent/phxrpc.png)](https://travis-ci.org/Tencent/phxrpc)\n\n## 总览\n\n- 使用Protobuf作为IDL用于描述RPC接口以及通信数据结构。\n- 基于Protobuf文件自动生成Client以及Server接口，用于Client的构建，以及Server的实现。\n- 半同步半异步模式，采用独立多IO线程，通过Epoll管理请求的接入以及读写，工作线程采用固定线程池。IO线程与工作线程通过内存队列进行交互。\n- 支持协程Worker，可配置多个线程，每个线程多个协程。\n- 提供完善的过载保护，无需配置阈值，支持动态自适应拒绝请求。\n- 提供简易的Client/Server配置读入方式。\n- 基于lambda函数实现并发访问Server，可以非常方便地实现Google提出的 [Backup Requests](http://static.googleusercontent.com/media/research.google.com/zh-CN//people/jeff/Berkeley-Latency-Mar2012.pdf) 模式。\n\n## 局限\n\n- 不支持多进程模式。\n\n## 性能\n\n>使用Sample目录下的Search RPC C/S进行Echo RPC调用的压测，相当于Worker空转情况。\n\n### 运行环境\n\nCPU：24 x Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz\n内存：32 GB\n网卡：千兆网卡\nClient/Server机器之间PING值： 0.05ms\n请求写入并发：1000个线程\n业务数据大小：除去HTTP协议部分20b\nWorker线程数：20\n\n### 性能测试结果(qps)\n\n#### 短连接\n\n| ucontext类型/IO线程 | 1 | 3 | 8 | 20 |\n| ----- | ---- | ---- | ---- | ---- |\n| system  | 41k | 85k | 90k   | 92k |\n| boost | 45k | 95k | 95k | 95k |\n\n#### 长连接\n\n| ucontext类型/IO线程 | 1 | 3 | 8 | 20 |\n| ----- | ---- | ----- | --- | --- |\n| system  | 55k | 160k   | 360k | 500k |\n| boost | 62k | 175k | 410k | 500k |\n\n## 如何编译\n\n### Protobuf准备\n\nPhxRPC必须依赖的第三方库只有Protobuf。在编译前，在`third_party`目录放置好`protobuf`目录，或者通过软链的形式。\n\n### boost优化\n\nPhxRPC在ServerIO以及Client并发连接管理上使用了ucontext，而boost的ucontext实现要比system默认的更为高效，推荐使用boost。如果需要使用boost的话需要在third_party目录放置好boost目录，或者通过软链的形式。\n\n### 编译环境\n\n- Linux\n- GCC-4.8及以上版本\n- boost 1.56及以上版本（可选）\n\n### 编译安装方法\n\n进入PhxRPC根目录。\n\n```sh\nmake (默认是-O2编译，如需编译debug版，执行 make debug=y)\nmake boost (可选，编译PhxRPC的boost优化插件，编译之前先准备好boost库)\n```\n\n## 如何使用\n\n### 编写proto文件\n\n下面是sample目录下的proto文件样例。\n\n```c++\nsyntax = \"proto3\";\npackage search;\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/protobuf/empty.proto\";\nimport \"phxrpc/phxrpc.proto\";\n\nenum SiteType {\n    BLOG = 0;\n    NEWS = 1;\n    VIDEO = 2;\n    UNKNOWN = 3;\n}\n\nmessage Site {\n    string url = 1;\n    string title = 2;\n    SiteType type = 3;\n    tring summary = 4;\n}\n\nmessage SearchRequest {\n    string query = 1;\n}\n\nmessage SearchResult {\n    repeated Site sites = 1;\n}\n\nservice Search {\n    rpc Search(SearchRequest) returns (SearchResult) {\n        option(phxrpc.CmdID) = 1;\n        option(phxrpc.OptString) = \"q:\";\n        option(phxrpc.Usage) = \"-q <query>\";\n    }\n    rpc Notify(google.protobuf.StringValue) returns (google.protobuf.Empty) {\n        option(phxrpc.CmdID) = 2;\n        option(phxrpc.OptString) = \"m:\";\n        option(phxrpc.Usage) = \"-m <msg>\";\n    }\n}\n\n```\n\n### 生成代码\n\n```bash\n(PhxRPC根目录)/codegen/phxrpc_pb2server -I (PhxRPC根目录) -I (Protobuf include目录) -f (proto文件路径) -d (生成代码放置路径)\n\n# sample\n../codegen/phxrpc_pb2server -I ../ -I ../third_party/protobuf/include -f search.proto -d .\n../codegen/phxrpc_pb2server -I ../ -I ../third_party/protobuf/include -f search.proto -d . -u\n```\n\n两种生成模式，区别在于`-u`参数。\n\n第一种生成默认的线程池worker模型。\n\n第二种`-u`参数指定生成uthread worker模型，也就是工作线程池里面每个线程里面运行着多个协程。\n\n调用完工具后，在生成代码放置目录下执行`make`，即可生成全部的RPC相关代码。\n\n### 选择是否启用Boost优化\n\n打开生成代码放置目录下的`Makefile`文件。\n\n```bash\n# choose to use boost for network\n#LDFLAGS := $(PLUGIN_BOOST_LDFLAGS) $(LDFLAGS)\n```\n\n可以看到以上两行，取消注释掉第二行，重新`make clean && make`即可开启Boost对PhxRPC的优化。开启前记得编译好PhxRPC的Boost插件。\n\n### 补充自己的代码\n\n#### Server(xxx_service_impl.cpp)\n\n```c++\nint SearchServiceImpl::PHXEcho(const google::protobuf::StringValue &req,\n        google::protobuf::StringValue *resp) {\n    resp->set_value(req.value());\n    return 0;\n}\n\nint SearchServiceImpl::Search(const search::SearchRequest &req,\n        search::SearchResult *resp) {\n    // 这里补充这个RPC调用的Server端代码\n    return -1;\n}\n\nint SearchServiceImpl::Notify(const google::protobuf::StringValue &req,\n        google::protobuf::Empty *resp) {\n    // 这里补充这个RPC调用的Server端代码\n    return -1;\n}\n```\n\n#### Client (xxx_client.cpp)\n\n```c++\n// 这个是默认生成的代码，可自行修改，或利用我们提供的stub API自定义封装Client\n\nint SearchClient::PHXEcho(const google::protobuf::StringValue &req,\n        google::protobuf::StringValue *resp) {\n    const phxrpc::Endpoint_t *ep = global_searchclient_config_.GetRandom();\n\n    if (ep != nullptr) {\n        phxrpc::BlockTcpStream socket;\n        bool open_ret = phxrpc::PhxrpcTcpUtils::Open(&socket, ep->ip, ep->port,\n                    global_searchclient_config_.GetConnectTimeoutMS(), nullptr, 0,\n                    *(global_searchclient_monitor_.get()));\n        if (open_ret) {\n            socket.SetTimeout(global_searchclient_config_.GetSocketTimeoutMS());\n\n            SearchStub stub(socket, *(global_searchclient_monitor_.get()));\n            return stub.PHXEcho(req, resp);\n        }\n    }\n\n    return -1;\n}\n```\n\n#### UThread Client (xxx_client_uthread.cpp)\n\n```c++\n// 这个是默认生成的代码，可自行修改，或利用我们提供的stub API自定义封装Client\n// UThread Client只能在采用PhxRPC uthread worker模型的server中调用。\n// UThread Client构造函数需要传入UThreadEpollScheduler*类型参数，\n// 这个参数来源可以在xxx_service_impl.h的私有变量中获得。\n\nint SearchClientUThread::PHXEcho(const google::protobuf::StringValue &req,\n        google::protobuf::StringValue *resp) {\n    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();\n\n    if (uthread_scheduler_ != nullptr && ep != nullptr) {\n        phxrpc::UThreadTcpStream socket;\n        bool open_ret = phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, &socket, ep->ip, ep->port,\n                    global_searchclientuthread_config_.GetConnectTimeoutMS(),\n                    *(global_searchclientuthread_monitor_.get()));\n        if (open_ret) {\n            socket.SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());\n\n            SearchStub stub(socket, *(global_searchclientuthread_monitor_.get()));\n            return stub.PHXEcho(req, resp);\n        }\n    }\n\n    return -1;\n}\n```\n\n#### Client并发调用样例\n\n```c++\nint SearchClient::PHXBatchEcho(const google::protobuf::StringValue &req,\n        google::protobuf::StringValue *resp) {\n    int ret = -1;\n    size_t echo_server_count = 2;\n    uthread_begin;\n    for (size_t i = 0; i < echo_server_count; i++) {\n        uthread_t [=, &uthread_s, &ret](void *) {\n            const phxrpc::Endpoint_t *ep = global_searchclient_config_.GetByIndex(i);\n            if (ep != nullptr) {\n                phxrpc::UThreadTcpStream socket;\n                if(phxrpc::PhxrpcTcpUtils::Open(&uthread_s, &socket, ep->ip, ep->port,\n                            global_searchclient_config_.GetConnectTimeoutMS(),\n                            *(global_searchclient_monitor_.get()))) {\n                    socket.SetTimeout(global_searchclient_config_.GetSocketTimeoutMS());\n                    SearchStub stub(socket, *(global_searchclient_monitor_.get()));\n                    int this_ret = stub.PHXEcho(req, resp);\n                    if (this_ret == 0) {\n                        ret = this_ret;\n                        uthread_s.Close();\n                    }\n                }\n            }\n        };\n    }\n    uthread_end;\n    return ret;\n}\n```\n\n`uthread_begin`, `uthread_end`, `uthread_s`, `uthread_t`这几个关键字是PhxRPC自定义的宏，分别表示协程的准备、结束，协程调度器以及协程的创建。\n\n上面的代码实现了Google提出的 [Backup Requests](http://static.googleusercontent.com/media/research.google.com/zh-CN//people/jeff/Berkeley-Latency-Mar2012.pdf) 模式。实现的功能是分别对两个Server同时发起Echo调用，当有一个Server响应的时候，则整个函数结束。在这段代码里面，我们提供了一种异步IO的同步写法，并给予了一些方便使用的宏定义。首先使用`uthread_begin`进行准备，然后使用`uthread_t`以lambda的形式创建一个协程，而在任意一个协程里面都可使用我们PhxRPC生成的Client API进行RPC调用，并可使用`uthread_s`随时结束所有RPC调用。最后的`uthread_end`真正通过协程调度发起这些lambda内的RPC调用，并等待结束。\n\n当然你可以借用这4个宏定义，以同步代码的写法，进行更自定义的并发访问。\n\n#### Server配置说明 (xxx_server.conf)\n\n```ini\n[Server]\nBindIP = 127.0.0.1              // Server IP\nPort = 16161                    // Server Port\nMaxThreads = 16                 // Worker 线程数\nWorkerUThreadCount = 50         // 每个线程开启的协程数，采用-u生成的Server必须配置这一项\nWorkerUThreadStackSize = 65536  // UThread worker的栈大小\nIOThreadCount = 3               // IO线程数，针对业务请自行调节\nPackageName = search            // Server 名字，用于自行实现的监控统计上报\nMaxConnections = 800000         // 最大并发连接数\nMaxQueueLength = 20480          // IO队列最大长度\nFastRejectThresholdMS = 20      // 快速拒绝自适应调节阀值，建议保持默认20ms，不做修改\n\n[ServerTimeout]\nSocketTimeoutMS = 5000          // Server读写超时，Worker处理超时\n```\n\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.671875,
          "content": "\nset -e  # exit immediately on error\nset -x  # display all commands\n\nmkdir -p third_party\n\ncd third_party;\n\nif [ ! -f protobuf/bin/protoc ]; then\n\tif [ ! -f protobuf-cpp-3.0.0.tar.gz ]; then\n\t\twget https://github.com/google/protobuf/releases/download/v3.0.0/protobuf-cpp-3.0.0.tar.gz\n\tfi\n\n\ttar zxvf protobuf-cpp-3.0.0.tar.gz\n\tcd protobuf-3.0.0\n\n\t./configure --prefix=`pwd`/../protobuf\n\tmake -j2\n\tmake install\n\n\tcd ../\nfi\n\n\nif [ ! -d boost ]; then\n\tif [ ! -f boost_1_58_0.tar.gz ]; then\n\t\twget https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz\n\tfi\n\n\ttar zxvf boost_1_58_0.tar.gz\n  mv boost_1_58_0 boost\n  export BOOST_ROOT=`pwd`/boost\nfi\n\n\ncd ..\n\nmake\n\nexit $?\n"
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "phxrpc.mk",
          "type": "blob",
          "size": 1.2333984375,
          "content": "#--------------------------------------------------------------------\n\n#debug = y\n\nwhere-am-i = $(abspath $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST)))\n\n#$(warning $(dir $(call where-am-i)))\n\nPHXRPC_ROOT = $(dir $(call where-am-i))\n\nOS := $(shell uname)\n\nPROTOBUF_ROOT = $(PHXRPC_ROOT)/third_party/protobuf\nBOOST_ROOT = $(PHXRPC_ROOT)/third_party/boost\n\nPLUGIN_BOOST_LDFLAGS = -Wl,--whole-archive -L$(PHXRPC_ROOT)/lib/ -lphxrpc_plugin_boost \\\n\t\t-Wl,--no-whole-archive -L$(BOOST_ROOT)/lib/ -lboost_context\n\n#--------------------------------------------------------------------\n\nifeq ($(debug), y)\n# (1) Debug\n\tOPT = -g2\nelse\n# (2) Production\n\tOPT = -O2\nendif\n\nCC = gcc\nAR = ar cru\n\nSOFLAGS = -shared -Wl,-h,$@\nLINKER = $(CC)\nLINT = lint -c\nRM = /bin/rm -f\n\nCFLAGS = -std=c++11 -Wall -D_REENTRANT -D_GNU_SOURCE -D_XOPEN_SOURCE -fPIC -m64 $(OPT) \\\n\t\t-I$(PROTOBUF_ROOT)/include \\\n\t\t-I$(PHXRPC_ROOT)\n\nLDFLAGS = -L$(PROTOBUF_ROOT)/lib/ $(PROTOBUF_ROOT)/lib/libprotobuf.a \\\n\t\t-lstdc++ -lpthread -lm\n\nPBFLAGS = -I $(PROTOBUF_ROOT)/include -I $(PHXRPC_ROOT)\n\n#--------------------------------------------------------------------\n\n# make rule\n%.o : %.c\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n%.o : %.cc\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n%.o : %.cpp\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n"
        },
        {
          "name": "phxrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin_boost",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin_darwin",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}