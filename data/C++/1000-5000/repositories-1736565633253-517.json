{
  "metadata": {
    "timestamp": 1736565633253,
    "page": 517,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "halpz/re3",
      "stars": 2661,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.736328125,
          "content": "---\nAllowShortBlocksOnASingleLine: 'true'\nAllowShortCaseLabelsOnASingleLine: 'true'\nAllowShortIfStatementsOnASingleLine: 'true'\nAllowShortLoopsOnASingleLine: 'true'\nAlwaysBreakAfterReturnType: TopLevel\nAccessModifierOffset: -8\nBreakBeforeBraces: Linux\nColumnLimit: 160\nIndentCaseLabels: 'false'\nIndentWidth: '8'\nLanguage: Cpp\nPointerAlignment: Right\nSpaceAfterCStyleCast: 'false'\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeCtorInitializerColon: 'true'\nSpaceBeforeInheritanceColon: 'true'\nSpaceBeforeParens: Never\nSpaceInEmptyParentheses: 'false'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInContainerLiterals: 'false'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nTabWidth: '8'\nUseTab: ForIndentation\n\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.048828125,
          "content": "sdk/* linguist-vendored\nvendor/* linguist-vendored"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.0263671875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Bb]uild/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\nvendor/glew-2.1.0/\nvendor/glfw-3.3.2.bin.WIN32/\nvendor/glfw-3.3.2.bin.WIN64/\n\nsdk/\n\ncodewarrior/re3.mcp\ncodewarrior/re3_Data/\ncodewarrior/Release/\ncodewarrior/Debug/\n\nsrc/extras/GitSHA1.cpp"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4130859375,
          "content": "[submodule \"vendor/ogg\"]\n\tpath = vendor/ogg\n\turl = https://github.com/xiph/ogg.git\n\tbranch = master\n[submodule \"vendor/opus\"]\n\tpath = vendor/opus\n\turl = https://github.com/xiph/opus.git\n\tbranch = master\n[submodule \"vendor/opusfile\"]\n\tpath = vendor/opusfile\n\turl = https://github.com/xiph/opusfile.git\n\tbranch = master\n[submodule \"vendor/librw\"]\n\tpath = vendor/librw\n\turl = https://github.com/aap/librw.git\n\tbranch = master\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.2138671875,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nset(EXECUTABLE re3)\nset(PROJECT RE3)\n\nproject(${EXECUTABLE} C CXX)\nset(${PROJECT}_AUTHOR \"${PROJECT} Team\")\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\n\ninclude(GetGitRevisionDescription)\nget_git_head_revision(GIT_REFSPEC GIT_SHA1 \"ALLOW_LOOKING_ABOVE_CMAKE_SOURCE_DIR\")\nmessage(STATUS \"Building ${CMAKE_PROJECT_NAME} GIT SHA1: ${GIT_SHA1}\")\n\nif(NINTENDO_SWITCH)\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/nx\")\n    include(NXFunctions)\nendif()\n\nif(NOT COMMAND re3_platform_target)\n    function(re3_platform_target)\n    endfunction()\nendif()\n\nif(WIN32)\n    set(${PROJECT}_AUDIOS \"OAL\" \"MSS\")\nelse()\n    set(${PROJECT}_AUDIOS \"OAL\")\nendif()\n\nset(${PROJECT}_AUDIO \"OAL\" CACHE STRING \"Audio\")\n\noption(${PROJECT}_INSTALL \"Enable installation of ${EXECUTABLE} + gamefiles\" OFF)\noption(${PROJECT}_WITH_OPUS \"Build ${EXECUTABLE} with opus support\" OFF)\noption(${PROJECT}_WITH_LIBSNDFILE \"Build ${EXECUTABLE} with libsndfile (instead of internal decoder)\" OFF)\n\nset_property(CACHE ${PROJECT}_AUDIO PROPERTY STRINGS ${${PROJECT}_AUDIOS})\nmessage(STATUS \"${PROJECT}_AUDIO = ${${PROJECT}_AUDIO} (choices=${${PROJECT}_AUDIOS})\")\nset(\"${PROJECT}_AUDIO_${${PROJECT}_AUDIO}\" ON)\nif(NOT ${PROJECT}_AUDIO IN_LIST ${PROJECT}_AUDIOS)\n    message(FATAL_ERROR \"Illegal ${PROJECT}_AUDIO=${${PROJECT}_AUDIO}\")\nendif()\n\noption(${PROJECT}_VENDORED_LIBRW \"Use vendored librw\" ON)\nif(${PROJECT}_VENDORED_LIBRW)\n    add_subdirectory(vendor/librw)\nelse()\n    find_package(librw REQUIRED)\nendif()\nadd_subdirectory(src)\n\nif(${PROJECT}_INSTALL)\n    install(DIRECTORY gamefiles/ DESTINATION \".\")\n    if(LIBRW_PLATFORM_NULL)\n        set(platform \"-null\")\n    elseif(LIBRW_PLATFORM_PS2)\n        set(platform \"-ps2\")\n    elseif(LIBRW_PLATFORM_GL3)\n        if(LIBRW_GL3_GFXLIB STREQUAL \"GLFW\")\n            set(platform \"-gl3-glfw\")\n        else()\n            set(platform \"-gl3-sdl2\")\n        endif()\n    elseif(LIBRW_PLATFORM_D3D9)\n        set(platform \"-d3d9\")\n    endif()\n    if(${PROJECT}_AUDIO_OAL)\n        set(audio \"-oal\")\n    elseif(${PROJECT}_AUDIO_MSS)\n        set(audio \"-mss\")\n    endif()\n    if(${PROJECT}_WITH_OPUS)\n        set(audio \"${audio}-opus\")\n    endif()\n    if(NOT LIBRW_PLATFORM_PS2)\n        if(WIN32)\n            set(os \"-win\")\n        elseif(APPLE)\n            set(os \"-apple\")\n        elseif(UNIX)\n            set(os \"-linux\")\n        elseif(NINTENDO_SWITCH)\n            set(os \"-switch\")\n        else()\n            set(compiler \"-UNK\")\n            message(WARNING \"Unknown os. Created cpack package will be wrong. (override using cpack -P)\")\n        endif()\n    endif()\n\n    set(CPACK_PACKAGE_NAME \"${PROJECT_NAME}${platform}${audio}${os}${compiler}\")\n    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"GTA III reversed\")\n    set(CPACK_PACKAGE_VENDOR \"GTAModding\")\n    # FIXME: missing license (https://github.com/GTAmodding/re3/issues/794)\n    # set(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n    # set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n    set(CPACK_PACKAGE_INSTALL_DIRECTORY \"${CPACK_PACKAGE_NAME}\")\n    set(CPACK_SOURCE_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}\")\n    set(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}\")\n    set(CPACK_GENERATOR \"ZIP\")\n    include(CPack)\nendif()\n"
        },
        {
          "name": "CODING_STYLE.md",
          "type": "blob",
          "size": 2.400390625,
          "content": "# Coding style\n\nI started writing in [Plan 9 style](http://man.cat-v.org/plan_9/6/style),\nbut realize that this is not the most popular style, so I'm willing to compromise.\nTry not to deviate too much so the code will look similar across the whole project.\n\nTo give examples, these two styles (or anything in between) are fine:\n\n```\ntype\nfunctionname(args)\n{\n\tif(a == b){\n\t\ts1;\n\t\ts2;\n\t}else{\n\t\ts3;\n\t\ts4;\n\t}\n\tif(x != y)\n\t\ts5;\n}\n\ntype functionname(args)\n{\n\tif (a == b) {\n\t\ts1;\n\t\ts2;\n\t} else {\n\t\ts3;\n\t\ts4;\n\t}\n\tif (x != y)\n\t\ts5;\n}\n```\n\nThis one (or anything more extreme) is heavily discouraged:\n\n```\ntype functionname ( args )\n{\n  if ( a == b )\n  {\n    s1;\n    s2;\n  }\n  else\n  {\n    s3;\n    s4;\n  }\n  if ( x != y )\n  {\n    s5;\n  }\n}\n```\n\ni.e. \n\n* Put the brace on the same line as control statements\n\n* Put the brace on the next line after function definitions and structs/classes\n\n* Put an `else` on the same line with the braces\n\n* Don't put braces around single statements\n\n* Put the function return type on a separate line\n\n* Indent with TABS\n\nAs for the less cosmetic choices, here are some guidelines how the code should look:\n\n* Don't use magic numbers where the original source code would have had an enum or similar.\nEven if you don't know the exact meaning it's better to call something `FOOBAR_TYPE_4` than just `4`,\nsince `4` will be used in other places and you can't easily see where else the enum value is used.\n\n* Don't just copy paste code from IDA, make it look nice\n\n* Use the right types. In particular:\n\n    * don't use types like `__int16`, we have `int16` for that\n\n    * don't use `unsigned`, we have typedefs for that\n\n    * don't use `char` for anything but actual characters, use `int8`, `uint8` or `bool`\n\n    * don't even think about using win32 types (`BYTE`, `WORD`, &c.) unless you're writing win32 specific code\n\n    * declare pointers like `int *ptr;`, not `int* ptr;`\n\n* As for variable names, the original gta source code was not written in a uniform style,\nbut here are some observations:\n\n    * many variables employ a form of hungarian notation, i.e.:\n\n    * `m_` may be used for class member variables (mostly those that are considered private)\n\n    * `ms_` for (mostly private) static members\n\n    * `f` is a float, `i` or `n` is an integer, `b` is a boolean, `a` is an array\n\n    * do *not* use `dw` for `DWORD` or so, we're not programming win32\n\n* Generally, try to make the code look as if R* could have written it\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.365234375,
          "content": "<img src=\"https://github.com/halpz/re3/blob/master/res/images/logo_1024.png?raw=true\" alt=\"re3 logo\" width=\"200\">\n\n[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2FGTAmodding%2Fre3%2Fbadge%3Fref%3Dmaster&style=flat)](https://actions-badge.atrox.dev/GTAmodding/re3/goto?ref=master)\n<a href=\"https://discord.gg/RFNbjsUMGg\"><img src=\"https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&longCache=true&style=flat\" /></a>\n\n## Intro\n\nIn this repository you'll find the fully reversed source code for GTA III ([master](https://github.com/halpz/re3/tree/master/) branch) and GTA VC ([miami](https://github.com/halpz/re3/tree/miami/) branch).\n\nIt has been tested and works on Windows, Linux, MacOS and FreeBSD, on x86, amd64, arm and arm64.\\\nRendering is handled either by original RenderWare (D3D8)\nor the reimplementation [librw](https://github.com/aap/librw) (D3D9, OpenGL 2.1 or above, OpenGL ES 2.0 or above).\\\nAudio is done with MSS (using dlls from original GTA) or OpenAL.\n\nThe project has also been ported to the [Nintendo Switch](https://github.com/AGraber/re3-nx/),\n[Playstation Vita](https://github.com/Rinnegatamante/re3) and\n[Nintendo Wii U](https://github.com/GaryOderNichts/re3-wiiu/).\n\nWe cannot build for PS2 or Xbox yet. If you're interested in doing so, get in touch with us.\n\n## Installation\n\n- re3 requires PC game assets to work, so you **must** own [a copy of GTA III](https://store.steampowered.com/app/12100/Grand_Theft_Auto_III/).\n- Build re3 or download the latest build:\n  - [Windows D3D9 MSS 32bit](https://nightly.link/GTAmodding/re3/workflows/re3_msvc_x86/master/re3_Release_win-x86-librw_d3d9-mss.zip)\n  - [Windows D3D9 64bit](https://nightly.link/GTAmodding/re3/workflows/re3_msvc_amd64/master/re3_Release_win-amd64-librw_d3d9-oal.zip)\n  - [Windows OpenGL 64bit](https://nightly.link/GTAmodding/re3/workflows/re3_msvc_amd64/master/re3_Release_win-amd64-librw_gl3_glfw-oal.zip)\n  - [Linux 64bit](https://nightly.link/GTAmodding/re3/workflows/build-cmake-conan/master/ubuntu-18.04-gl3.zip)\n  - [MacOS 64bit x86-64](https://nightly.link/GTAmodding/re3/workflows/build-cmake-conan/master/macos-latest-gl3.zip)\n- Extract the downloaded zip over your GTA 3 directory and run re3. The zip includes the binary, updated and additional gamefiles and in case of OpenAL the required dlls.\n\n## Screenshots\n\n![re3 2021-02-11 22-57-03-23](https://user-images.githubusercontent.com/1521437/107704085-fbdabd00-6cbc-11eb-8406-8951a80ccb16.png)\n![re3 2021-02-11 22-43-44-98](https://user-images.githubusercontent.com/1521437/107703339-cbdeea00-6cbb-11eb-8f0b-07daa105d470.png)\n![re3 2021-02-11 22-46-33-76](https://user-images.githubusercontent.com/1521437/107703343-cd101700-6cbb-11eb-9ccd-012cb90524b7.png)\n![re3 2021-02-11 22-50-29-54](https://user-images.githubusercontent.com/1521437/107703348-d00b0780-6cbb-11eb-8afd-054249c2b95e.png)\n\n## Improvements\n\nWe have implemented a number of changes and improvements to the original game.\nThey can be configured in `core/config.h`.\nSome of them can be toggled at runtime, some cannot.\n\n* Fixed a lot of smaller and bigger bugs\n* User files (saves and settings) stored in GTA root directory\n* Settings stored in re3.ini file instead of gta3.set\n* Debug menu to do and change various things (Ctrl-M to open)\n* Debug camera (Ctrl-B to toggle)\n* Rotatable camera\n* XInput controller support (Windows)\n* No loading screens between islands (\"map memory usage\" in menu)\n* Skinned ped support (models from Xbox or Mobile)\n* Rendering\n  * Widescreen support (properly scaled HUD, Menu and FOV)\n  * PS2 MatFX (vehicle reflections)\n  * PS2 alpha test (better rendering of transparency)\n  * PS2 particles\n  * Xbox vehicle rendering\n  * Xbox world lightmap rendering (needs Xbox map)\n  * Xbox ped rim light\n  * Xbox screen rain droplets\n  * More customizable colourfilter\n* Menu\n  * Map\n  * More options\n  * Controller configuration menu\n  * ...\n* Can load DFFs and TXDs from other platforms, possibly with a performance penalty\n* ...\n\n## To-Do\n\nThe following things would be nice to have/do:\n\n* Fix physics for high FPS\n* Improve performance on lower end devices, especially the OpenGL layer on the Raspberry Pi (if you have experience with this, please get in touch)\n* Compare code with PS2 code (tedious, no good decompiler)\n* [PS2 port](https://web.archive.org/web/20210217192931/https://github.com/GTAmodding/re3/wiki/PS2-port)\n* Xbox port (not quite as important)\n* reverse remaining unused/debug functions\n* compare CodeWarrior build with original binary for more accurate code (very tedious)\n\n## Modding\n\nAsset modifications (models, texture, handling, script, ...) should work the same way as with original GTA for the most part.\n\nCLEO scripts work with [CLEO Redux](https://github.com/cleolibrary/CLEO-Redux).\n\nMods that make changes to the code (dll/asi, limit adjusters) will *not* work.\nSome things these mods do are already implemented in re3 (much of SkyGFX, GInput, SilentPatch, Widescreen fix),\nothers can easily be achieved (increasing limis, see `config.h`),\nothers will simply have to be rewritten and integrated into the code directly.\nSorry for the inconvenience.\n\n## Building from Source  \n\nWhen using premake, you may want to point GTA_III_RE_DIR environment variable to GTA3 root folder if you want the executable to be moved there via post-build script.\n\nClone the repository with `git clone --recursive https://github.com/halpz/re3.git`. Then `cd re3` into the cloned repository.\n\n<details><summary>Linux Premake</summary>\n\nFor Linux using premake, proceed: [Building on Linux](https://web.archive.org/web/20210217192751/https://github.com/GTAmodding/re3/wiki/Building-on-Linux)\n\n</details>\n\n<details><summary>Linux Conan</summary>\n\nInstall python and conan, and then run build.\n```\nconan export vendor/librw librw/master@\nmkdir build\ncd build\nconan install .. re3/master@ -if build -o re3:audio=openal -o librw:platform=gl3 -o librw:gl3_gfxlib=glfw --build missing -s re3:build_type=RelWithDebInfo -s librw:build_type=RelWithDebInfo\nconan build .. -if build -bf build -pf package\n```\n</details>\n\n<details><summary>MacOS Premake</summary>\n\nFor MacOS using premake, proceed: [Building on MacOS](https://web.archive.org/web/20210717004757/https://github.com/GTAmodding/re3/wiki/Building-on-MacOS)\n\n</details>\n\n<details><summary>FreeBSD</summary>\n\nFor FreeBSD using premake, proceed: [Building on FreeBSD](https://web.archive.org/web/20210217192740/https://github.com/GTAmodding/re3/wiki/Building-on-FreeBSD)\n\n</details>\n\n<details><summary>Windows</summary>\n\nAssuming you have Visual Studio 2015/2017/2019:\n- Run one of the `premake-vsXXXX.cmd` variants on root folder.\n- Open build/re3.sln with Visual Studio and compile the solution.\n\nMicrosoft recently discontinued its downloads of the DX9 SDK. You can download an archived version here: https://archive.org/details/dxsdk_jun10\n\n**If you choose OpenAL on Windows** You must read [Running OpenAL build on Windows](https://web.archive.org/web/20210217192855/https://github.com/GTAmodding/re3/wiki/Running-OpenAL-build-on-Windows).\n</details>\n\n> :information_source: premake has an `--with-lto` option if you want the project to be compiled with Link Time Optimization.\n\n> :information_source: There are various settings in [config.h](https://github.com/halpz/re3/tree/master/src/core/config.h), you may want to take a look there.\n\n> :information_source: re3 uses completely homebrew RenderWare-replacement rendering engine; [librw](https://github.com/aap/librw/). librw comes as submodule of re3, but you also can use LIBRW enviorenment variable to specify path to your own librw.\n\nIf you feel the need, you can also use CodeWarrior 7 to compile re3 using the supplied codewarrior/re3.mcp project - this requires the original RW33 libraries, and the DX8 SDK. The build is unstable compared to the MSVC builds though, and is mostly meant to serve as a reference.\n\n## Contributing\nAs long as it's not linux/cross-platform skeleton/compatibility layer, all of the code on the repo that's not behind a preprocessor condition(like FIX_BUGS) are **completely** reversed code from original binaries.  \n\nWe **don't** accept custom codes, as long as it's not wrapped via preprocessor conditions, or it's linux/cross-platform skeleton/compatibility layer.\n\nWe accept only these kinds of PRs;\n\n- A new feature that exists in at least one of the GTAs (if it wasn't in III/VC then it doesn't have to be decompilation)  \n- Game, UI or UX bug fixes (if it's a fix to original code, it should be behind FIX_BUGS)\n- Platform-specific and/or unused code that's not been reversed yet\n- Makes reversed code more understandable/accurate, as in \"which code would produce this assembly\".\n- A new cross-platform skeleton/compatibility layer, or improvements to them\n- Translation fixes, for languages original game supported\n- Code that increase maintainability  \n\nWe have a [Coding Style](https://github.com/halpz/re3/blob/master/CODING_STYLE.md) document that isn't followed or enforced very well.\n\nDo not use features from C++11 or later.\n\n\n## History\n\nre3 was started sometime in the spring of 2018,\ninitially as a way to test reversed collision and physics code\ninside the game.\nThis was done by replacing single functions of the game\nwith their reversed counterparts using a dll.\n\nAfter a bit of work the project lay dormant for about a year\nand was picked up again and pushed to github in May 2019.\nAt the time I (aap) had reversed around 10k lines of code and estimated\nthe final game to have around 200-250k.\nOthers quickly joined the effort (Fire_Head, shfil, erorcun and Nick007J\nin time order, and Serge a bit later) and we made very quick progress\nthroughout the summer of 2019\nafter which the pace slowed down a bit.\n\nDue to everyone staying home during the start of the Corona pandemic\neverybody had a lot of time to work on re3 again and\nwe finally got a standalone exe in April 2020 (around 180k lines by then).\n\nAfter the initial excitement and fixing and polishing the code further,\nreVC was started in early May 2020 by starting from re3 code,\nnot by starting from scratch replacing functions with a dll.\nAfter a few months of mostly steady progress we considered reVC\nfinished in December.\n\nSince then we have started reLCS, which is currently work in progress.\n\n\n## License\n\nWe don't feel like we're in a position to give this code a license.\\\nThe code should only be used for educational, documentation and modding purposes.\\\nWe do not encourage piracy or commercial use.\\\nPlease keep derivate work open source and give proper credit.\n"
        },
        {
          "name": "autoconf",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codewarrior",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 5.2666015625,
          "content": "from conans import ConanFile, CMake, tools\nfrom conans.errors import ConanException, ConanInvalidConfiguration\nimport os\nimport shutil\nimport textwrap\n\n\nclass Re3Conan(ConanFile):\n    name = \"re3\"\n    version = \"master\"\n    license = \"???\"  # FIXME: https://github.com/GTAmodding/re3/issues/794\n    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n    generators = \"cmake\", \"cmake_find_package\"\n    options = {\n        \"audio\": [\"openal\", \"miles\"],\n        \"with_libsndfile\": [True, False],\n        \"with_opus\": [True, False],\n    }\n    default_options = {\n        \"audio\": \"openal\",\n        \"with_libsndfile\": False,\n        \"with_opus\": False,\n        # \"libsndfile:with_external_libs\": False,\n        # \"mpg123:flexible_resampling\": False,\n        # \"mpg123:network\": False,\n        # \"mpg123:icy\": False,\n        # \"mpg123:id3v2\": False,\n        # \"mpg123:ieeefloat\": False,\n        # \"mpg123:layer1\": False,\n        # \"mpg123:layer2\": False,\n        # \"mpg123:layer3\": False,\n        # \"mpg123:moreinfo\": False,\n        # \"sdl2:vulkan\": False,\n        # \"sdl2:opengl\": True,\n        # \"sdl2:sdl2main\": True,\n    }\n    no_copy_source = True\n\n    @property\n    def _os_is_playstation2(self):\n        try:\n            return self.settings.os == \"Playstation2\"\n        except ConanException:\n            return False\n\n    def configure(self):\n        if self.options.audio != \"openal\":\n            self.options.with_libsndfile = False\n\n    def requirements(self):\n        self.requires(\"librw/{}\".format(self.version))\n        self.requires(\"mpg123/1.26.4\")\n        if self.options.audio == \"openal\":\n            self.requires(\"openal/1.21.0\")\n        elif self.options.audio == \"miles\":\n            self.requires(\"miles-sdk/{}\".format(self.version))\n        if self.options.with_libsndfile:\n            self.requires(\"libsndfile/1.0.30\")\n        if self.options.with_opus:\n            self.requires(\"opusfile/0.12\")\n\n    def export_sources(self):\n        for d in (\"cmake\", \"gamefiles\", \"src\"):\n            shutil.copytree(src=d, dst=os.path.join(self.export_sources_folder, d))\n        self.copy(\"CMakeLists.txt\")\n\n    def validate(self):\n        if self.options[\"librw\"].platform == \"gl3\" and self.options[\"librw\"].gl3_gfxlib != \"glfw\":\n            raise ConanInvalidConfiguration(\"Only `glfw` is supported as gl3_gfxlib.\")\n        #if not self.options.with_opus:\n        #    if not self.options[\"libsndfile\"].with_external_libs:\n        #        raise ConanInvalidConfiguration(\"re3 with opus support requires a libsndfile built with external libs (=ogg/flac/opus/vorbis)\")\n\n    @property\n    def _re3_audio(self):\n        return {\n            \"miles\": \"MSS\",\n            \"openal\": \"OAL\",\n        }[str(self.options.audio)]\n\n    def build(self):\n        if self.source_folder == self.build_folder:\n            raise Exception(\"cannot build with source_folder == build_folder\")\n        try:\n            os.unlink(os.path.join(self.install_folder, \"Findlibrw.cmake\"))\n            tools.save(\"FindOpenAL.cmake\",\n                       textwrap.dedent(\n                           \"\"\"\n                           set(OPENAL_FOUND ON)\n                           set(OPENAL_INCLUDE_DIR ${OpenAL_INCLUDE_DIRS})\n                           set(OPENAL_LIBRARY ${OpenAL_LIBRARIES})\n                           set(OPENAL_DEFINITIONS ${OpenAL_DEFINITIONS})\n                           \"\"\"), append=True)\n            if self.options[\"librw\"].platform == \"gl3\" and self.options[\"librw\"].gl3_gfxlib == \"glfw\":\n                tools.save(\"Findglfw3.cmake\",\n                           textwrap.dedent(\n                               \"\"\"\n                               if(NOT TARGET glfw)\n                                 message(STATUS \"Creating glfw TARGET\")\n                                 add_library(glfw INTERFACE IMPORTED)\n                                 set_target_properties(glfw PROPERTIES\n                                    INTERFACE_LINK_LIBRARIES CONAN_PKG::glfw)\n                               endif()\n                               \"\"\"), append=True)\n            tools.save(\"CMakeLists.txt\",\n                       textwrap.dedent(\n                           \"\"\"\n                           cmake_minimum_required(VERSION 3.0)\n                           project(cmake_wrapper)\n    \n                           include(\"{}/conanbuildinfo.cmake\")\n                           conan_basic_setup(TARGETS NO_OUTPUT_DIRS)\n    \n                           add_subdirectory(\"{}\" re3)\n                           \"\"\").format(self.install_folder.replace(\"\\\\\", \"/\"),\n                                       self.source_folder.replace(\"\\\\\", \"/\")))\n        except FileNotFoundError:\n            pass\n        cmake = CMake(self)\n        cmake.definitions[\"RE3_AUDIO\"] = self._re3_audio\n        cmake.definitions[\"RE3_WITH_OPUS\"] = self.options.with_opus\n        cmake.definitions[\"RE3_INSTALL\"] = True\n        cmake.definitions[\"RE3_VENDORED_LIBRW\"] = False\n        env = {}\n        if self._os_is_playstation2:\n            cmake.definitions[\"CMAKE_TOOLCHAIN_FILE\"] = self.deps_user_info[\"ps2dev-cmaketoolchain\"].cmake_toolchain_file\n            env[\"PS2SDK\"] = self.deps_cpp_info[\"ps2dev-ps2sdk\"].rootpath\n\n        with tools.environment_append(env):\n            cmake.configure(source_folder=self.build_folder)\n        cmake.build()\n\n    def package(self):\n        cmake = CMake(self)\n        cmake.install()\n"
        },
        {
          "name": "gamefiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "premake-vs2015.cmd",
          "type": "blob",
          "size": 0.0283203125,
          "content": "premake5 vs2015 --with-librw\n"
        },
        {
          "name": "premake-vs2017.cmd",
          "type": "blob",
          "size": 0.0283203125,
          "content": "premake5 vs2017 --with-librw\n"
        },
        {
          "name": "premake-vs2019.cmd",
          "type": "blob",
          "size": 0.0283203125,
          "content": "premake5 vs2019 --with-librw\n"
        },
        {
          "name": "premake5.exe",
          "type": "blob",
          "size": 1363,
          "content": null
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 13.1279296875,
          "content": "newoption {\r\n\ttrigger     = \"glfwdir64\",\r\n\tvalue       = \"PATH\",\r\n\tdescription = \"Directory of glfw\",\r\n\tdefault     = \"vendor/glfw-3.3.2.bin.WIN64\",\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"glfwdir32\",\r\n\tvalue       = \"PATH\",\r\n\tdescription = \"Directory of glfw\",\r\n\tdefault     = \"vendor/glfw-3.3.2.bin.WIN32\",\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"with-asan\",\r\n\tdescription = \"Build with address sanitizer\"\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"with-librw\",\r\n\tdescription = \"Build and use librw from this solution\"\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"with-opus\",\r\n\tdescription = \"Build with opus\"\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"with-lto\",\r\n\tdescription = \"Build with link time optimization\"\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"no-git-hash\",\r\n\tdescription = \"Don't print git commit hash into binary\"\r\n}\r\n\r\nnewoption {\r\n\ttrigger     = \"no-full-paths\",\r\n\tdescription = \"Don't print full paths into binary\"\r\n}\r\n\r\nrequire(\"autoconf\")\r\n\r\nif(_OPTIONS[\"with-librw\"]) then\r\n\tLibrw = \"vendor/librw\"\r\nelse\r\n\tLibrw = os.getenv(\"LIBRW\") or \"vendor/librw\"\r\nend\r\n\r\nfunction getsys(a)\r\n\tif a == 'windows' then\r\n\t\treturn 'win'\r\n\tend\r\n\treturn a\r\nend\r\n\r\nfunction getarch(a)\r\n\tif a == 'x86_64' then\r\n\t\treturn 'amd64'\r\n\telseif a == 'ARM' then\r\n\t\treturn 'arm'\r\n\telseif a == 'ARM64' then\r\n\t\treturn 'arm64'\r\n\tend\r\n\treturn a\r\nend\r\n\r\nworkspace \"re3\"\r\n\tlanguage \"C++\"\r\n\tconfigurations { \"Debug\", \"Release\" }\r\n\tstartproject \"re3\"\r\n\tlocation \"build\"\r\n\tsymbols \"Full\"\r\n\tstaticruntime \"off\"\r\n\r\n\tif _OPTIONS[\"with-asan\"] then\r\n\t\tbuildoptions { \"-fsanitize=address -g3 -fno-omit-frame-pointer\" }\r\n\t\tlinkoptions { \"-fsanitize=address\" }\r\n\tend\r\n\r\n\tfilter { \"system:windows\" }\r\n\t\tconfigurations { \"Vanilla\" }\r\n\t\tplatforms {\r\n\t\t\t\"win-x86-RW33_d3d8-mss\",\r\n\t\t\t\"win-x86-librw_d3d9-mss\",\r\n\t\t\t\"win-x86-librw_gl3_glfw-mss\",\r\n\t\t\t\"win-x86-RW33_d3d8-oal\",\r\n\t\t\t\"win-x86-librw_d3d9-oal\",\r\n\t\t\t\"win-x86-librw_gl3_glfw-oal\",\r\n\t\t\t\"win-amd64-librw_d3d9-oal\",\r\n\t\t\t\"win-amd64-librw_gl3_glfw-oal\",\r\n\t\t}\r\n\r\n\tfilter { \"system:linux\" }\r\n\t\tplatforms {\r\n\t\t\t\"linux-x86-librw_gl3_glfw-oal\",\r\n\t\t\t\"linux-amd64-librw_gl3_glfw-oal\",\r\n\t\t\t\"linux-arm-librw_gl3_glfw-oal\",\r\n\t\t\t\"linux-arm64-librw_gl3_glfw-oal\",\r\n\t\t}\r\n\r\n\tfilter { \"system:bsd\" }\r\n\t\tplatforms {\r\n\t\t\t\"bsd-x86-librw_gl3_glfw-oal\",\r\n\t\t\t\"bsd-amd64-librw_gl3_glfw-oal\",\r\n\t\t\t\"bsd-arm-librw_gl3_glfw-oal\",\r\n\t\t\t\"bsd-arm64-librw_gl3_glfw-oal\"\r\n\t\t}\r\n\r\n\tfilter { \"system:macosx\" }\r\n\t\tplatforms {\r\n\t\t\t\"macosx-arm64-librw_gl3_glfw-oal\",\r\n\t\t\t\"macosx-amd64-librw_gl3_glfw-oal\",\r\n\t\t}\r\n\r\n\tfilter \"configurations:Debug\"\r\n\t\tdefines { \"DEBUG\" }\r\n\r\n\tfilter \"configurations:not Debug\"\r\n\t\tdefines { \"NDEBUG\" }\r\n\t\toptimize \"Speed\"\r\n\t\tif(_OPTIONS[\"with-lto\"]) then\r\n\t\t\tflags { \"LinkTimeOptimization\" }\r\n\t\tend\r\n\r\n\tfilter { \"platforms:win*\" }\r\n\t\tsystem \"windows\"\r\n\r\n\tfilter { \"platforms:linux*\" }\r\n\t\tsystem \"linux\"\r\n\r\n\tfilter { \"platforms:bsd*\" }\r\n\t\tsystem \"bsd\"\r\n\r\n\tfilter { \"platforms:macosx*\" }\r\n\t\tsystem \"macosx\"\r\n\r\n\tfilter { \"platforms:*x86*\" }\r\n\t\tarchitecture \"x86\"\r\n\r\n\tfilter { \"platforms:*amd64*\" }\r\n\t\tarchitecture \"amd64\"\r\n\r\n\tfilter { \"platforms:*arm*\" }\r\n\t\tarchitecture \"ARM\"\r\n\r\n\tfilter { \"platforms:macosx-arm64-*\", \"files:**.cpp\"}\r\n\t\tbuildoptions { \"-target\", \"arm64-apple-macos11\", \"-std=gnu++14\" }\r\n\r\n\tfilter { \"platforms:macosx-arm64-*\", \"files:**.c\"}\r\n\t\tbuildoptions { \"-target\", \"arm64-apple-macos11\" }\r\n\r\n\tfilter { \"platforms:macosx-amd64-*\", \"files:**.cpp\"}\r\n\t\tbuildoptions { \"-target\", \"x86_64-apple-macos10.12\", \"-std=gnu++14\" }\r\n\r\n\tfilter { \"platforms:macosx-amd64-*\", \"files:**.c\"}\r\n\t\tbuildoptions { \"-target\", \"x86_64-apple-macos10.12\" }\r\n\r\n\tfilter { \"platforms:*librw_d3d9*\" }\r\n\t\tdefines { \"RW_D3D9\" }\r\n\t\tif(not _OPTIONS[\"with-librw\"]) then\r\n\t\t\tlibdirs { path.join(Librw, \"lib/win-%{getarch(cfg.architecture)}-d3d9/%{cfg.buildcfg}\") }\r\n\t\tend\r\n\r\n\tfilter \"platforms:*librw_gl3_glfw*\"\r\n\t\tdefines { \"RW_GL3\" }\r\n\t\tif(not _OPTIONS[\"with-librw\"]) then\r\n\t\t\tlibdirs { path.join(Librw, \"lib/%{getsys(cfg.system)}-%{getarch(cfg.architecture)}-gl3/%{cfg.buildcfg}\") }\r\n\t\tend\r\n\r\n\tfilter \"platforms:*x86-librw_gl3_glfw*\"\r\n\t\tincludedirs { path.join(_OPTIONS[\"glfwdir32\"], \"include\") }\r\n\r\n\tfilter \"platforms:*amd64-librw_gl3_glfw*\"\r\n\t\tincludedirs { path.join(_OPTIONS[\"glfwdir64\"], \"include\") }\r\n\r\n\tfilter  {}\r\n\r\n    function setpaths (gamepath, exepath)\r\n       if (gamepath) then\r\n          postbuildcommands {\r\n             '{COPYFILE} \"%{cfg.buildtarget.abspath}\" \"' .. gamepath .. '%{cfg.buildtarget.name}\"'\r\n          }\r\n          debugdir (gamepath)\r\n          if (exepath) then\r\n\t\t\t -- Used VS variable $(TargetFileName) because it doesn't accept premake tokens. Does debugcommand even work outside VS??\r\n             debugcommand (gamepath .. \"$(TargetFileName)\")\r\n             dir, file = exepath:match'(.*/)(.*)'\r\n             debugdir (gamepath .. (dir or \"\"))\r\n          end\r\n       end\r\n    end\r\n\r\nif(_OPTIONS[\"with-librw\"]) then\r\nproject \"librw\"\r\n\tkind \"StaticLib\"\r\n\ttargetname \"rw\"\r\n\ttargetdir(path.join(Librw, \"lib/%{cfg.platform}/%{cfg.buildcfg}\"))\r\n\tfiles { path.join(Librw, \"src/*.*\") }\r\n\tfiles { path.join(Librw, \"src/*/*.*\") }\r\n\tfiles { path.join(Librw, \"src/gl/*/*.*\") }\r\n\r\n\tfilter { \"platforms:*x86*\" }\r\n\t\tarchitecture \"x86\"\r\n\r\n\tfilter { \"platforms:*amd64*\" }\r\n\t\tarchitecture \"amd64\"\r\n\r\n\tfilter \"platforms:win*\"\r\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\", \"_CRT_NONSTDC_NO_DEPRECATE\" }\r\n\t\tstaticruntime \"on\"\r\n\t\tbuildoptions { \"/Zc:sizedDealloc-\" }\r\n\r\n\tfilter \"platforms:bsd*\"\r\n\t\tincludedirs { \"/usr/local/include\" }\r\n\t\tlibdirs { \"/usr/local/lib\" }\r\n\r\n\t-- Support MacPorts and Homebrew\r\n\tfilter \"platforms:macosx-arm64-*\"\r\n\t\tincludedirs { \"/opt/local/include\" }\r\n\t\tincludedirs {\"/opt/homebrew/include\" }\r\n\t\tlibdirs { \"/opt/local/lib\" }\r\n\t\tlibdirs { \"/opt/homebrew/lib\" }\r\n\t\t\r\n\tfilter \"platforms:macosx-amd64-*\"\r\n\t\tincludedirs { \"/opt/local/include\" }\r\n\t\tincludedirs {\"/usr/local/include\" }\r\n\t\tlibdirs { \"/opt/local/lib\" }\r\n\t\tlibdirs { \"/usr/local/lib\" }\r\n\t\t\r\n\tfilter \"platforms:*gl3_glfw*\"\r\n\t\tstaticruntime \"off\"\r\n\r\n\tfilter \"platforms:*RW33*\"\r\n\t\tflags { \"ExcludeFromBuild\" }\r\n\tfilter  {}\r\nend\r\n\r\nlocal function addSrcFiles( prefix )\r\n\treturn prefix .. \"/*cpp\", prefix .. \"/*.h\", prefix .. \"/*.c\", prefix .. \"/*.ico\", prefix .. \"/*.rc\"\r\nend\r\n\r\nproject \"re3\"\r\n\tkind \"WindowedApp\"\r\n\ttargetname \"re3\"\r\n\ttargetdir \"bin/%{cfg.platform}/%{cfg.buildcfg}\"\r\n\r\n\tif(_OPTIONS[\"with-librw\"]) then\r\n\t\tdependson \"librw\"\r\n\tend\r\n\r\n\tfiles { addSrcFiles(\"src\") }\r\n\tfiles { addSrcFiles(\"src/animation\") }\r\n\tfiles { addSrcFiles(\"src/audio\") }\r\n\tfiles { addSrcFiles(\"src/audio/eax\") }\r\n\tfiles { addSrcFiles(\"src/audio/oal\") }\r\n\tfiles { addSrcFiles(\"src/buildings\") }\r\n\tfiles { addSrcFiles(\"src/collision\") }\r\n\tfiles { addSrcFiles(\"src/control\") }\r\n\tfiles { addSrcFiles(\"src/core\") }\r\n\tfiles { addSrcFiles(\"src/entities\") }\r\n\tfiles { addSrcFiles(\"src/math\") }\r\n\tfiles { addSrcFiles(\"src/modelinfo\") }\r\n\tfiles { addSrcFiles(\"src/objects\") }\r\n\tfiles { addSrcFiles(\"src/peds\") }\r\n\tfiles { addSrcFiles(\"src/renderer\") }\r\n\tfiles { addSrcFiles(\"src/rw\") }\r\n\tfiles { addSrcFiles(\"src/save\") }\r\n\tfiles { addSrcFiles(\"src/skel\") }\r\n\tfiles { addSrcFiles(\"src/skel/glfw\") }\r\n\tfiles { addSrcFiles(\"src/text\") }\r\n\tfiles { addSrcFiles(\"src/vehicles\") }\r\n\tfiles { addSrcFiles(\"src/weapons\") }\r\n\tfiles { addSrcFiles(\"src/extras\") }\r\n\tif(not _OPTIONS[\"no-git-hash\"]) then\r\n\t\tfiles { \"src/extras/GitSHA1.cpp\" } -- this won't be in repo in first build\r\n\telse\r\n\t\tremovefiles { \"src/extras/GitSHA1.cpp\" } -- but it will be everytime after\r\n\tend\r\n\r\n\tincludedirs { \"src\" }\r\n\tincludedirs { \"src/animation\" }\r\n\tincludedirs { \"src/audio\" }\r\n\tincludedirs { \"src/audio/eax\" }\r\n\tincludedirs { \"src/audio/oal\" }\r\n\tincludedirs { \"src/buildings\" }\r\n\tincludedirs { \"src/collision\" }\r\n\tincludedirs { \"src/control\" }\r\n\tincludedirs { \"src/core\" }\r\n\tincludedirs { \"src/entities\" }\r\n\tincludedirs { \"src/math\" }\r\n\tincludedirs { \"src/modelinfo\" }\r\n\tincludedirs { \"src/objects\" }\r\n\tincludedirs { \"src/peds\" }\r\n\tincludedirs { \"src/renderer\" }\r\n\tincludedirs { \"src/rw\" }\r\n\tincludedirs { \"src/save/\" }\r\n\tincludedirs { \"src/skel/\" }\r\n\tincludedirs { \"src/skel/glfw\" }\r\n\tincludedirs { \"src/text\" }\r\n\tincludedirs { \"src/vehicles\" }\r\n\tincludedirs { \"src/weapons\" }\r\n\tincludedirs { \"src/extras\" }\r\n\r\n\tif(not _OPTIONS[\"no-git-hash\"]) then\r\n\t\tdefines { \"USE_OUR_VERSIONING\" }\r\n\tend\r\n\r\n\tif _OPTIONS[\"with-opus\"] then\r\n\t\tincludedirs { \"vendor/ogg/include\" }\r\n\t\tincludedirs { \"vendor/opus/include\" }\r\n\t\tincludedirs { \"vendor/opusfile/include\" }\r\n\tend\r\n\r\n\tfilter \"configurations:Vanilla\"\r\n\t\tdefines { \"VANILLA_DEFINES\" }\r\n\r\n\tfilter \"platforms:*mss\"\r\n\t\tdefines { \"AUDIO_MSS\" }\r\n\t\tincludedirs { \"vendor/milessdk/include\" }\r\n\t\tlibdirs { \"vendor/milessdk/lib\" }\r\n\r\n\tif _OPTIONS[\"with-opus\"] then\r\n\t\tfilter \"platforms:win*\"\r\n\t\t\tlibdirs { \"vendor/ogg/win32/VS2015/Win32/%{cfg.buildcfg}\" }\r\n\t\t\tlibdirs { \"vendor/opus/win32/VS2015/Win32/%{cfg.buildcfg}\" }\r\n\t\t\tlibdirs { \"vendor/opusfile/win32/VS2015/Win32/Release-NoHTTP\" }\r\n\t\tfilter {}\r\n\t\tdefines { \"AUDIO_OPUS\" }\r\n\tend\r\n\r\n\tfilter \"platforms:*oal\"\r\n\t\tdefines { \"AUDIO_OAL\" }\r\n\r\n\tfilter {}\r\n\tif(os.getenv(\"GTA_III_RE_DIR\")) then\r\n\t\tsetpaths(os.getenv(\"GTA_III_RE_DIR\") .. \"/\", \"%(cfg.buildtarget.name)\")\r\n\tend\r\n\r\n\tfilter \"platforms:win*\"\r\n\t\tfiles { addSrcFiles(\"src/skel/win\") }\r\n\t\tincludedirs { \"src/skel/win\" }\r\n\t\tbuildoptions { \"/Zc:sizedDealloc-\" }\r\n\t\tlinkoptions \"/SAFESEH:NO\"\r\n\t\tcharacterset (\"MBCS\")\r\n\t\ttargetextension \".exe\"\r\n\t\tif(_OPTIONS[\"no-full-paths\"]) then\r\n\t\t\tusefullpaths \"off\"\r\n\t\t\tlinkoptions \"/PDBALTPATH:%_PDB%\"\r\n\t\tend\r\n\t\tif(_OPTIONS[\"with-librw\"]) then\r\n\t\t\t-- external librw is dynamic\r\n\t\t\tstaticruntime \"on\"\r\n\t\tend\r\n\t\tif(not _OPTIONS[\"no-git-hash\"]) then\r\n\t\t\tprebuildcommands { '\"%{prj.location}..\\\\printHash.bat\" \"%{prj.location}..\\\\src\\\\extras\\\\GitSHA1.cpp\"' }\r\n\t\tend\r\n\r\n\tfilter \"platforms:not win*\"\r\n\t\tif(not _OPTIONS[\"no-git-hash\"]) then\r\n\t\t\tprebuildcommands { '\"%{prj.location}/../printHash.sh\" \"%{prj.location}/../src/extras/GitSHA1.cpp\"' }\r\n\t\tend\r\n\r\n\tfilter \"platforms:win*glfw*\"\r\n\t\tstaticruntime \"off\"\r\n\t\t\r\n\tfilter \"platforms:*glfw*\"\r\n\t\tpremake.modules.autoconf.parameters = \"-lglfw -lX11\"\r\n\t\tautoconfigure {\r\n\t\t\t-- iterates all configs and runs on them\r\n\t\t\t[\"dontWrite\"] = function (cfg)\r\n\t\t\t\tcheck_symbol_exists(cfg, \"haveX11\", \"glfwGetX11Display\", { \"X11/Xlib.h\", \"X11/XKBlib.h\", \"GLFW/glfw3.h\", \"GLFW/glfw3native.h\" }, \"GLFW_EXPOSE_NATIVE_X11\")\r\n\t\t\t\tif cfg.autoconf[\"haveX11\"] ~= nil and cfg.autoconf[\"haveX11\"] == 1 then\r\n\t\t\t\t\ttable.insert(cfg.links, \"X11\")\r\n\t\t\t\t\ttable.insert(cfg.defines, \"GET_KEYBOARD_INPUT_FROM_X11\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t}\r\n\r\n\tfilter \"platforms:win*oal\"\r\n\t\tincludedirs { \"vendor/openal-soft/include\" }\r\n\t\tincludedirs { \"vendor/libsndfile/include\" }\r\n\t\tincludedirs { \"vendor/mpg123/include\" }\r\n\r\n\tfilter \"platforms:win-x86*oal\"\r\n\t\tlibdirs { \"vendor/mpg123/lib/Win32\" }\r\n\t\tlibdirs { \"vendor/libsndfile/lib/Win32\" }\r\n\t\tlibdirs { \"vendor/openal-soft/libs/Win32\" }\r\n\r\n\tfilter \"platforms:win-amd64*oal\"\r\n\t\tlibdirs { \"vendor/mpg123/lib/Win64\" }\r\n\t\tlibdirs { \"vendor/libsndfile/lib/Win64\" }\r\n\t\tlibdirs { \"vendor/openal-soft/libs/Win64\" }\r\n\r\n\tfilter \"platforms:linux*oal\"\r\n\t\tlinks { \"openal\", \"mpg123\", \"sndfile\", \"pthread\" }\r\n\t\t\r\n\tfilter \"platforms:bsd*oal\"\r\n\t\tlinks { \"openal\", \"mpg123\", \"sndfile\", \"pthread\" }\r\n\r\n\tfilter \"platforms:macosx*oal\"\r\n\t\tlinks { \"openal\", \"mpg123\", \"sndfile\", \"pthread\" }\r\n\t\t\r\n\tfilter \"platforms:macosx-arm64-*oal\"\r\n\t\tincludedirs { \"/opt/homebrew/opt/openal-soft/include\" }\r\n\t\tlibdirs { \"/opt/homebrew/opt/openal-soft/lib\" }\r\n\t\t\r\n\tfilter \"platforms:macosx-amd64-*oal\"\r\n\t\tincludedirs { \"/usr/local/opt/openal-soft/include\" }\r\n\t\tlibdirs { \"/usr/local/opt/openal-soft/lib\" }\r\n\r\n\tif _OPTIONS[\"with-opus\"] then\r\n\t\tfilter {}\r\n\t\tlinks { \"libogg\" }\r\n\t\tlinks { \"opus\" }\r\n\t\tlinks { \"opusfile\" }\r\n\tend\r\n\r\n\tfilter \"platforms:*RW33*\"\r\n\t\tincludedirs { \"sdk/rwsdk/include/d3d8\" }\r\n\t\tlibdirs { \"sdk/rwsdk/lib/d3d8/release\" }\r\n\t\tlinks { \"rwcore\", \"rpworld\", \"rpmatfx\", \"rpskin\", \"rphanim\", \"rtbmp\", \"rtquat\", \"rtcharse\", \"rpanisot\" }\r\n\t\tdefines { \"RWLIBS\" }\r\n\t\tlinkoptions \"/SECTION:_rwcseg,ER!W /MERGE:_rwcseg=.text\"\r\n\r\n\tfilter \"platforms:*librw*\"\r\n\t\tdefines { \"LIBRW\" }\r\n\t\tfiles { addSrcFiles(\"src/fakerw\") }\r\n\t\tincludedirs { \"src/fakerw\" }\r\n\t\tincludedirs { Librw }\r\n\t\tif(_OPTIONS[\"with-librw\"]) then\r\n\t\t\tlibdirs { \"vendor/librw/lib/%{cfg.platform}/%{cfg.buildcfg}\" }\r\n\t\tend\r\n\t\tlinks { \"rw\" }\r\n\r\n\tfilter \"platforms:*d3d9*\"\r\n\t\tdefines { \"USE_D3D9\" }\r\n\t\tlinks { \"d3d9\" }\r\n\r\n\tfilter \"platforms:*x86*d3d*\"\r\n\t\tincludedirs { \"sdk/dx8sdk/include\" }\r\n\t\tlibdirs { \"sdk/dx8sdk/lib\" }\r\n\r\n\tfilter \"platforms:win-x86*gl3_glfw*\"\r\n\t\tlibdirs { path.join(_OPTIONS[\"glfwdir32\"], \"lib-\" .. string.gsub(_ACTION or '', \"vs\", \"vc\")) }\r\n\t\tlinks { \"opengl32\", \"glfw3\" }\r\n\r\n\tfilter \"platforms:win-amd64*gl3_glfw*\"\r\n\t\tlibdirs { path.join(_OPTIONS[\"glfwdir64\"], \"lib-\" .. string.gsub(_ACTION or '', \"vs\", \"vc\")) }\r\n\t\tlinks { \"opengl32\", \"glfw3\" }\r\n\r\n\tfilter \"platforms:linux*gl3_glfw*\"\r\n\t\tlinks { \"GL\", \"glfw\" }\r\n\r\n\tfilter \"platforms:bsd*gl3_glfw*\"\r\n\t\tlinks { \"GL\", \"glfw\", \"sysinfo\" }\r\n\t\tincludedirs { \"/usr/local/include\" }\r\n\t\tlibdirs { \"/usr/local/lib\" }\r\n\r\n\tfilter \"platforms:macosx-arm64-*gl3_glfw*\"\r\n\t\tlinks { \"glfw\" }\r\n\t\tlinkoptions { \"-framework OpenGL\" }\r\n\t\tincludedirs { \"/opt/local/include\" }\r\n\t\tincludedirs {\"/opt/homebrew/include\" }\r\n\t\tlibdirs { \"/opt/local/lib\" }\r\n\t\tlibdirs { \"/opt/homebrew/lib\" }\r\n\t\t\r\n\tfilter \"platforms:macosx-amd64-*gl3_glfw*\"\r\n\t\tlinks { \"glfw\" }\r\n\t\tlinkoptions { \"-framework OpenGL\" }\r\n\t\tincludedirs { \"/opt/local/include\" }\r\n\t\tincludedirs {\"/usr/local/include\" }\r\n\t\tlibdirs { \"/opt/local/lib\" }\r\n\t\tlibdirs { \"/usr/local/lib\" }\r\n"
        },
        {
          "name": "premake5Linux",
          "type": "blob",
          "size": 1987.609375,
          "content": null
        },
        {
          "name": "printHash.bat",
          "type": "blob",
          "size": 0.4951171875,
          "content": "@echo off\n\nREM creates version.h with HEAD commit hash\nREM params: $1=full path to output file (usually points version.h)\n\nsetlocal enableextensions enabledelayedexpansion\n\ncd /d \"%~dp0\"\n\nbreak> %1\n\n<nul set /p=^\"#define GIT_SHA1 ^\"^\"> %1\n\nwhere git\nif \"%errorlevel%\" == \"0\" ( goto :havegit ) else ( goto :writeending )\n\n:havegit\nfor /f %%v in ('git rev-parse --short HEAD') do set version=%%v\n<nul set /p=\"%version%\" >> %1\n\n:writeending\n\necho ^\" >> %1\necho const char* g_GIT_SHA1 = GIT_SHA1; >> %1\n\nEXIT /B"
        },
        {
          "name": "printHash.sh",
          "type": "blob",
          "size": 0.341796875,
          "content": "#!/usr/bin/env sh\nif [ -z \"${1}\" ]\n then\n  printf \"%s\\n\" \"Input the path to the file for writing the commit hash to.\"\n else\n  printf \"%s\" \"#define GIT_SHA1 \\\"\" > $1\n\n  if (command -v \"git\" >/dev/null) then\n   git rev-parse --short HEAD | tr -d '\\n' >> $1\n  fi\n\n  printf \"%s\\n\" \"\\\"\" >> $1\n  printf \"%s\\n\" \"const char* g_GIT_SHA1 = GIT_SHA1;\" >> $1\nfi\n"
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}