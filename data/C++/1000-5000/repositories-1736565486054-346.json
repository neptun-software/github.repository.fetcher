{
  "metadata": {
    "timestamp": 1736565486054,
    "page": 346,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kitt-AI/snowboy",
      "stars": 3134,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3251953125,
          "content": "/lib/libsnowboy-detect.a\nsnowboy-detect-swig.cc\nsnowboydetect.py\nSnowboy.pm\n.DS_Store\n\n*.dylib\n*.pyc\n*.o\n*.so\n*.swp\n*.swo\n\n/examples/C/pa_stable_v19_20140130.tgz\n/examples/C/pa_stable_v190600_20161030.tgz\n/examples/C/portaudio\n/examples/C/demo\n/examples/C++/pa_stable_v19_20140130.tgz\n/examples/C++/pa_stable_v190600_20161030.tgz\n/examples/C++/portaudio\n/examples/C++/demo\n/examples/C++/demo2\n/examples/Java/Demo.class\n/examples/Perl/data/\n/examples/iOS/Obj-C/Pods/Pods.xcodeproj/xcuserdata/\n/examples/iOS/Obj-C/SnowboyTest.xcodeproj/project.xcworkspace/xcuserdata/\n/examples/iOS/Obj-C/SnowboyTest.xcodeproj/xcuserdata/\n/examples/iOS/Obj-C/SnowboyTest.xcworkspace/xcuserdata/\n/examples/iOS/Swift3/SnowboyTest.xcodeproj/project.xcworkspace/xcuserdata/\n/examples/iOS/Swift3/SnowboyTest.xcodeproj/xcuserdata/\n\n/swig/Android/OpenBLAS-0.2.18.tar.gz\n/swig/Android/android-ndk-r11c-darwin-x86_64.zip\n/swig/Android/android-ndk-r14b-darwin-x86_64.zip\n/swig/Android/android-ndk-r11c-linux-x86_64.zip\n/swig/Android/OpenBLAS-Android/\n/swig/Android/OpenBLAS-Android-ARM32/\n/swig/Android/android-ndk-r11c/\n/swig/Android/android-ndk-r14b/\n/swig/Android/ndk_install/\n/swig/Android/ndk_install_32bit/\n/swig/Android/java/\n/swig/Android/jniLibs/\n/swig/Java/java/\n/swig/Java/jniLibs/\n\n/build\n/node_modules\n/lib/node/binding\n/lib/node/index.js\n\n/dist\n**/snowboy.egg-info\n/.idea\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.2158203125,
          "content": "/lib/libsnowboy-detect.a\nsnowboy-detect-swig.cc\nsnowboydetect.py\n.DS_Store\n\n*.pyc\n*.o\n*.so\n\n/examples/C++/*\n/examples/Python/*\n\n/swig/Android/*\n/swig/Python/*\n\n/build\n/node_modules\n\n/lib/node/*.ts\n\n.npmignore\n.travis.yml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.9931640625,
          "content": "language: cpp\n\n# Cache node dependencies\ncache:\n  directories:\n    - node_modules\n\n# Ubuntu 14.04 Trusty support\nsudo: required\ndist: trusty\n\naddons:\n  apt:\n    sources:\n    # add PPAs with more up-to-date toolchains\n    - ubuntu-toolchain-r-test\n    - llvm-toolchain-precise-3.9\n    packages:\n    # install toolchains\n    - libmagic-dev\n    - libatlas-base-dev\n    - gcc-5\n    - g++-5\n    - clang-3.8\n\nos:\n- linux\n- osx\n\nenv:\n  global:\n    - secure: Hpft/SbwPrjQbHq+3DeJ8aMCpg2uW4z9MY4XaPPA5FQ80QkUdFMqALRvdBhXf/hm6bEZVLbIMXxqCImL5C4nx1SMUmsL6w/FbJjnamYEopk2MKCPZHKtZOdxsbdUwpL30WRH85DQ0KbcG9LatEr+qLwf9adRQrozhh5zhoRXzjuH8nxS/GRkYuZgTt4wxNt7xYnCVlARS9/V15OeOGcRWw/Q/r++ipINz8ylGqUnTGImZrDZ2nhlOkBSNzrPA7NhCSw1OiGvZpg4zVj/gDkSkPNFn4oDFr1nNDqg0EPFGVXDDI0KA7dpw2DhrJk1z8HgXw8PorPGP0mLnDl4i811KkCz6g6y+ETC6k1VtdB2jss0MCnD9HtxM0RS62yls6Bm5aMhoFjryOHgLHNrjiHfW2/lki421K6QlGp3a2ONkRk9zHiti3uTdtbxlz0kcu7Z8FT045lHNZX0B6QpPiLi2sy7H/dItqAGdWuY0lrGrddX1PpxCckBAZLO8/VEGGGkLQtzbxEXgF+EW0HJxURvUYUF2VCy+kaq86KrFzvSKS/evW/vj7Sq2rNbOCtnIy/rvIKAXU0bbR/1imuEiiMhKdiZku+jRfZZmpjKHoydba9SsHpuNGnR/sH40AIHv7Lv6q+z3mEI+X1YaOVAAlLYWExuHLLbWYjng2gEBIHwmuU=\n    - secure: RNZDzRXBhS98DMpa0QIKQjL8Nl7Pbo6cYtPyaMjEgF2nv+W+gwhcyDDRUE4psJm26Qkz3AZNfLx/kGKPhhAjBpuGFreCbAFy3uDfbDdcn2K68E+yRSdBAoTIKlxVPpQR11hfPHiAs+3s4BIwLGnuwJSK3JMisboji4ceaxVQpdo0ZcJnNKykN2zabUl+8BW8SYQ8cYp/DLg+wSeqq7eplyYD7zoT/GGnSNylkrRsJxB5zlrRQC/ngUfK7AuxhkfQ14dsdWkkrx0RyVFul5VAc85qAbrtJvLZs2Cu/J3ohNzcRZG7m8+U4diHuIlBFx0ezL3hVBfXkOf74dP8+OnL3rAr/1n+dczl5/5mQqlSsy8UAtUtfdAtd+wRNRy5d+er1YuJBWOGs2SXInjNViEY1Phgs6bY/Lu3wiIxDJH0TORan6ZVSje2/vi7aegRoiqHNrs4m2JuQDCPXu53HKh22+nWgRLLXFT2oBN3FdCz3xj04t+LyT+P5uq9q0jXxKc1nlNpvF3nDzhIuJKcfgBRNm9Wt1vz04xzSRgZEFGMTRWkYTdV+0ZVeqEQjEPo4fRNJ6PT1Tem8VqIoHEKGivGkwiAZ6FhQ/TNkVD7tv5Vhq7eK3ZPXDRakuBsLJ5Nc9QnLCpoEqbuIYqjr8ODKV2HSjS16VaGPbvtYPWzhGKU9C4=\n  matrix:\n    - NODE_VERSION=\"4.0.0\"\n    - NODE_VERSION=\"5.0.0\"\n    - NODE_VERSION=\"6.0.0\"\n    - NODE_VERSION=\"7.0.0\"\n    - NODE_VERSION=\"8.0.0\"\n    - NODE_VERSION=\"9.0.0\"\n\nbefore_install:\n# use the correct version of node\n- rm -rf ~/.nvm/ && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm\n- source ~/.nvm/nvm.sh\n- nvm install $NODE_VERSION\n- nvm use $NODE_VERSION\n# get commit message\n- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\\n')\n# put local node-pre-gyp on PATH\n- export PATH=./node_modules/.bin/:$PATH\n# put global node-gyp and nan on PATH\n- npm install node-gyp -g\n# install aws-sdk so it is available for publishing\n- npm install aws-sdk nan typescript @types/node\n# figure out if we should publish or republish\n- PUBLISH_BINARY=false\n- REPUBLISH_BINARY=false\n# if we are building a tag then publish\n# - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;\n# or if we put [publish binary] in the commit message\n- if test \"${COMMIT_MESSAGE#*'[publish binary]'}\" != \"$COMMIT_MESSAGE\"; then PUBLISH_BINARY=true; fi;\n# alternativly we can [republish binary] which will replace any existing binary\n- if test \"${COMMIT_MESSAGE#*'[republish binary]'}\" != \"$COMMIT_MESSAGE\"; then PUBLISH_BINARY=true && REPUBLISH_BINARY=true; fi;\ninstall:\n# ensure source install works\n- npm install --build-from-source\n# test our module\n- node lib/node/index.js\n\nbefore_script:\n# if publishing, do it\n- if [[ $REPUBLISH_BINARY == true ]]; then node-pre-gyp package unpublish; fi;\n- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi;\n# cleanup\n- node-pre-gyp clean\n- node-gyp clean\n\nscript:\n# if publishing, test installing from remote\n- INSTALL_RESULT=0\n- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;\n# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line\n- if [[ $INSTALL_RESULT != 0 ]]; then echo \"returned $INSTALL_RESULT\";node-pre-gyp unpublish;false; fi\n# If success then we arrive here so lets clean up\n- node-pre-gyp clean\n\nafter_success:\n# if success then query and display all published binaries\n- node-pre-gyp info\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.310546875,
          "content": "THIS LICENSE GOVERNS THE SOURCE CODE, THE LIBRARIES, THE RESOURCE FILES, AS WELL\nAS THE HOTWORD MODEL snowboy/resources/snowboy.umdl PROVIDED IN THIS REPOSITORY.\nALL OTHER HOTWORD MODELS ARE GOVERNED BY THEIR OWN LICENSES.\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2509765625,
          "content": "recursive-include include *\nrecursive-include lib *\nrecursive-include swig/Python *\nrecursive-include resources *\ninclude README.md\n\nexclude *.txt\nexclude *.pyc\nglobal-exclude .DS_Store _snowboydetect.so\nprune resources/alexa\nprune lib/ios\nprune lib/android"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.14453125,
          "content": "*Dear KITT.AI users,*\n\n*We are writing this update to let you know that we plan to shut down all KITT.AI products (Snowboy, NLU and Chatflow) by Dec. 31st, 2020.*\n\n*we launched our first product Snowboy in 2016, and then NLU and Chatflow later that year. Since then, we have served more than 85,000 developers, worldwide, accross all our products. It has been 4 extraordinary years in our life, and we appreciate the opportunity to be able to serve the community.*\n\n*The field of artificial intelligence is moving rapidly. As much as we like our products, we still see that they are getting outdated and are becoming difficult to maintain. All official websites/APIs for our products will be taken down by Dec. 31st, 2020. Our github repositories will remain open, but only community support will be available from this point beyond.*\n\n*Thank you all, and goodbye!*\n\n*The KITT.AI Team  \nMar. 18th, 2020*\n\n# Snowboy Hotword Detection\n\nby [KITT.AI](http://kitt.ai).\n\n[Home Page](https://snowboy.kitt.ai)\n\n[Full Documentation](http://docs.kitt.ai/snowboy) and [FAQ](http://docs.kitt.ai/snowboy#faq)\n\n[Discussion Group](https://groups.google.com/a/kitt.ai/forum/#!forum/snowboy-discussion) (or send email to snowboy-discussion@kitt.ai)\n\n[Commercial application FAQ](README_commercial.md)\n\nVersion: 1.3.0 (2/19/2018)\n\n## Alexa support\n\nSnowboy now brings hands-free experience to the [Alexa AVS sample app](https://github.com/alexa/avs-device-sdk/wiki/Raspberry-Pi-Quick-Start-Guide-with-Script) on Raspberry Pi! See more info below regarding the performance and how you can use other hotword models. The following instructions currently support AVS sdk Version 1.12.1.\n\n**Performance**\n\nThe performance of hotword detection usually depends on the actual environment, e.g., is it used with a quality microphone, is it used on the street, in a kitchen, or is there any background noise, etc. So we feel it is best for the users to evaluate it in their real environment. For the evaluation purpose, we have prepared an Android app which can be installed and run out of box: [SnowboyAlexaDemo.apk](https://github.com/Kitt-AI/snowboy/raw/master/resources/alexa/SnowboyAlexaDemo.apk) (please uninstall any previous versions first if you have installed this app before). \n\n**Kittai KWD Engine**\n\n* Set up [Alexa AVS sample app](https://github.com/alexa/avs-device-sdk/wiki/Raspberry-Pi-Quick-Start-Guide-with-Script) following the official AVS instructions\n\n* Apply patch to replace the Sensory KWD engine with Kittai engine\n```\n# Copy the patch file to the root directory of Alexa AVS sample app. Please replace $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you\n# cloned the Alexa AVS sample app repository, and replace $SNOWBOY_ROOT_PATH with the actual path where you clone the Snowboy repository\ncd $ALEXA_AVS_SAMPLE_APP_PATH\ncp $SNOWBOY_PATH/resource/alexa/alexa-avs-sample-app/avs-kittai.patch ./\n\n# Apply the patch, this will modify the scripts setup.sh and pi.sh\npatch < avs-kittai.patch\n```\n\n* Re-compile the avs-device-sdk and sample app\n```\nsudo bash setup.sh config.json\n```\n\n* Run the sample app\n```\nsudo bash startsample.sh\n```\n\nHere is a [demo video](https://www.youtube.com/watch?v=wiLEr6TeE58) for how to use Snowboy hotword engine in Alexa Voice Service.\n\n**Personal model**\n\n* Create your personal hotword model through our [website](https://snowboy.kitt.ai) or [hotword API](https://snowboy.kitt.ai/api/v1/train/)\n\n\n* Put your personal model in [snowboy/resources](https://github.com/Kitt-AI/snowboy/tree/master/resources)\n```\n# Please put YOUR_PERSONAL_MODEL.pmdl in $ALEXA_AVS_SAMPLE_APP_PATH/third-party/snowboy/resources,\n# and $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you put the Alexa AVS sample app repository.\n\ncp YOUR_PERSONAL_MODEL.pmdl $ALEXA_AVS_SAMPLE_APP_PATH/third-party/snowboy/resources/\n\n```\n\n* Replace the model name 'alexa.umdl' with your personal model name, update `KITT_AI_SENSITIVITY`, set `KITT_AI_APPLY_FRONT_END_PROCESSING` to `false` in the [Alexa AVS sample app code](https://github.com/alexa/avs-device-sdk/blob/master/KWD/KWDProvider/src/KeywordDetectorProvider.cpp) and re-compile\n```\n# Modify $ALEXA_AVS_SAMPLE_APP_PATH/avs-device-sdk/blob/master/KWD/KWDProvider/src/KeywordDetectorProvider.cpp:\n#     Replace the model name 'alexa.umdl' with your personal model name 'YOUR_PERSONAL_MODEL.pmdl' at line 52\n#     Update `KITT_AI_SENSITIVITY` at line 26\n#     Set `KITT_AI_APPLY_FRONT_END_PROCESSING` to `false` at line 32\nsudo bash setup.sh config.json\n```\n\n* Run the wake word agent with engine set to `kitt_ai`!\n\nHere is a [demo video](https://www.youtube.com/watch?v=9Bj8kdfwG7I) for how to use a personal model in Alexa Voice Service.\n\n**Universal model**\n\n* Put your personal model in [snowboy/resources](https://github.com/Kitt-AI/snowboy/tree/master/resources)\n```\n# Please put YOUR_UNIVERSAL_MODEL.umdl in $ALEXA_AVS_SAMPLE_APP_PATH/third-party/snowboy/resources,\n# and $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you put the Alexa AVS sample app repository.\n\ncp YOUR_UNIVERSAL_MODEL.umdl $ALEXA_AVS_SAMPLE_APP_PATH/third-party/snowboy/resources/\n\n```\n\n* Replace the model name 'alexa.umdl' with your universal model name, update `KITT_AI_SENSITIVITY` in the [Alexa AVS sample app code](https://github.com/alexa/avs-device-sdk/blob/master/KWD/KWDProvider/src/KeywordDetectorProvider.cpp) and re-compile\n```\n# Modify $ALEXA_AVS_SAMPLE_APP_PATH/avs-device-sdk/blob/master/KWD/KWDProvider/src/KeywordDetectorProvider.cpp:\n#     Replace the model name 'alexa.umdl' with your universal model name 'YOUR_UNIVERSAL_MODEL.umdl' at line 52\n#     Update `KITT_AI_SENSITIVITY` at line 26\nsudo bash setup.sh config.json\n```\n\n* Run the wake word agent with engine set to `kitt_ai`!\n\n\n## Hotword as a Service\n\nSnowboy now offers **Hotword as a Service** through the ``https://snowboy.kitt.ai/api/v1/train/``\nendpoint. Check out the [Full Documentation](http://docs.kitt.ai/snowboy) and example [Python/Bash script](examples/REST_API) (other language contributions are very welcome).\n\nAs a quick start, ``POST`` to https://snowboy.kitt.ai/api/v1/train:\n\n\t{\n\t    \"name\": \"a word\",\n\t    \"language\": \"en\",\n\t    \"age_group\": \"10_19\",\n\t    \"gender\": \"F\",\n\t    \"microphone\": \"mic type\",\n\t    \"token\": \"<your auth token>\",\n\t    \"voice_samples\": [\n\t        {wave: \"<base64 encoded wave data>\"},\n\t        {wave: \"<base64 encoded wave data>\"},\n\t        {wave: \"<base64 encoded wave data>\"}\n\t    ]\n\t}\n\nthen you'll get a trained personal model in return!\n\n## Introduction\n\nSnowboy is a customizable hotword detection engine for you to create your own\nhotword like \"OK Google\" or \"Alexa\". It is powered by deep neural networks and\nhas the following properties:\n\n* **highly customizable**: you can freely define your own magic phrase here –\nlet it be “open sesame”, “garage door open”, or “hello dreamhouse”, you name it.\n\n* **always listening** but protects your privacy: Snowboy does not use Internet\nand does *not* stream your voice to the cloud.\n\n* light-weight and **embedded**: it even runs on a Raspberry Pi and consumes\nless than 10% CPU on the weakest Pi (single-core 700MHz ARMv6).\n\n* Apache licensed!\n\nCurrently Snowboy supports (look into the [lib](lib) folder):\n\n* all versions of Raspberry Pi (with Raspbian based on Debian Jessie 8.0)\n* 64bit Mac OS X\n* 64bit Ubuntu 14.04\n* iOS\n* Android\n* ARM64 (aarch64, Ubuntu 16.04)\n\nIt ships in the form of a **C++ library** with language-dependent wrappers\ngenerated by SWIG. We welcome wrappers for new languages -- feel free to send a\npull request!\n\nCurrently we have built wrappers for:\n\n* C/C++\n* Java/Android\n* Go (thanks to @brentnd and @deadprogram)\n* Node (thanks to @evancohen and @nekuz0r)\n* Perl (thanks to @iboguslavsky)\n* Python2/Python3\n* iOS/Swift3 (thanks to @grimlockrocks)\n* iOS/Object-C (thanks to @patrickjquinn)\n\nIf you want support on other hardware/OS, please send your request to\n[snowboy@kitt.ai](mailto:snowboy.kitt.ai)\n\nNote: **Snowboy does not support Windows** yet. Please build Snowboy on *nix platforms.\n\n## Pricing for Snowboy models\n\nHackers: free\n\n* Personal use\n* Community support\n\nBusiness: please contact us at [snowboy@kitt.ai](mailto:snowboy@kitt.ai)\n\n* Personal use\n* Commercial license\n* Technical support\n\n## Pretrained universal models\n\nWe provide pretrained universal models for testing purpose. When you test those\nmodels, bear in mind that they may not be optimized for your specific device or\nenvironment.\n\nHere is the list of the models, and the parameters that you have to use for them:\n\n* **resources/alexa/alexa-avs-sample-app/alexa.umdl**: Universal model for the hotword \"Alexa\" optimized for [Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app). Set SetSensitivity to 0.6, and set ApplyFrontend to true. This is so far the best \"Alexa\" model we released publicly, when ApplyFrontend is set to true.\n* **resources/models/snowboy.umdl**: Universal model for the hotword \"Snowboy\". Set SetSensitivity to 0.5 and ApplyFrontend to false.\n* **resources/models/jarvis.umdl**: Universal model for the hotword \"Jarvis\" (https://snowboy.kitt.ai/hotword/29). It has two different models for the hotword Jarvis, so you have to use two sensitivites. Set sensitivities to \"0.8,0.80\" and ApplyFrontend to true.\n* **resources/models/smart_mirror.umdl**: Universal model for the hotword \"Smart Mirror\" (https://snowboy.kitt.ai/hotword/47). Set sensitivity to Sensitivity to 0.5, and ApplyFrontend to false.\n* **resources/models/subex.umdl**: Universal model for the hotword \"Subex\" (https://snowboy.kitt.ai/hotword/22014). Set sensitivity to Sensitivity to 0.5, and ApplyFrontend to true.\n* **resources/models/neoya.umdl**: Universal model for the hotword \"Neo ya\" (https://snowboy.kitt.ai/hotword/22171). It has two different models for the hotword \"Neo ya\", so you have to use two sensitivites. Set sensitivities to \"0.7,0.7\", and ApplyFrontend to true.\n* **resources/models/hey_extreme.umdl**: Universal model for the hotword \"Hey Extreme\" (https://snowboy.kitt.ai/hotword/15428). Set sensitivity to Sensitivity to 0.6, and ApplyFrontend to true.\n* **resources/models/computer.umdl**: Universal model for the hotword \"Computer\" (https://snowboy.kitt.ai/hotword/46). Set sensitivity to Sensitivity to 0.6, and ApplyFrontend to true.\n* **resources/models/view_glass.umdl**: Universal model for the hotword \"View Glass\" (https://snowboy.kitt.ai/hotword/7868). Set Sensitivity to 0.7, and ApplyFrontend to true.\n\n## Precompiled node module\n\nSnowboy is available in the form of a native node module precompiled for:\n64 bit Ubuntu, MacOS X, and the Raspberry Pi (Raspbian 8.0+). For quick\ninstallation run:\n\n    npm install --save snowboy\n\nFor sample usage see the `examples/Node` folder. You may have to install\ndependencies like `fs`, `wav` or `node-record-lpcm16` depending on which script\nyou use.\n\n## Precompiled Binaries with Python Demo\n* 64 bit Ubuntu [14.04](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/ubuntu1404-x86_64-1.3.0.tar.bz2)\n* [MacOS X](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/osx-x86_64-1.3.0.tar.bz2)\n* Raspberry Pi with Raspbian 8.0, all versions\n  ([1/2/3/Zero](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/rpi-arm-raspbian-8.0-1.3.0.tar.bz2))\n  \nIf you want to compile a version against your own environment/language, read on.\n\n## Dependencies\n\nTo run the demo you will likely need the following, depending on which demo you\nuse and what platform you are working with:\n\n* SoX (audio conversion)\n* PortAudio or PyAudio (audio capturing)\n* SWIG 3.0.10 or above (compiling Snowboy for different languages/platforms)\n* ATLAS or OpenBLAS (matrix computation)\n\nYou can also find the exact commands you need to install the dependencies on\nMac OS X, Ubuntu or Raspberry Pi below.\n\n### Mac OS X\n\n`brew` install `swig`, `sox`, `portaudio` and its Python binding `pyaudio`:\n\n    brew install swig portaudio sox\n    pip install pyaudio\n\nIf you don't have Homebrew installed, please download it [here](http://brew.sh/). If you don't have `pip`, you can install it [here](https://pip.pypa.io/en/stable/installing/).\n\nMake sure that you can record audio with your microphone:\n\n    rec t.wav\n\n### Ubuntu/Raspberry Pi/Pine64/Nvidia Jetson TX1/Nvidia Jetson TX2\n\nFirst `apt-get` install `sox`, `portaudio` and its Python binding `pyaudio`:\n\n    sudo apt-get install python-pyaudio python3-pyaudio sox\n    pip install pyaudio\n    \nCompile a supported swig version (3.0.10 or above)\n\n    wget http://downloads.sourceforge.net/swig/swig-3.0.10.tar.gz\n    sudo apt-get install libpcre3 libpcre3-dev\n    ./configure --prefix=/usr                  \\\n            --without-clisp                    \\\n            --without-maximum-compile-warnings &&\n    make\n    make install &&\n    install -v -m755 -d /usr/share/doc/swig-3.0.10 &&\n    cp -v -R Doc/* /usr/share/doc/swig-3.0.10\n    \nThen install the `atlas` matrix computing library:\n\n    sudo apt-get install libatlas-base-dev\n    \nMake sure that you can record audio with your microphone:\n\n    rec t.wav\n        \nIf you need extra setup on your audio (especially on a Raspberry Pi), please see the [full documentation](http://docs.kitt.ai/snowboy).\n\n## Compile a Node addon\nCompiling a node addon for Linux and the Raspberry Pi requires the installation of the following dependencies:\n\n    sudo apt-get install libmagic-dev libatlas-base-dev\n\nThen to compile the addon run the following from the root of the snowboy repository:\n\n    npm install\n    ./node_modules/node-pre-gyp/bin/node-pre-gyp clean configure build\n\n## Compile a Java Wrapper\n\n    # Make sure you have JDK installed.\n    cd swig/Java\n    make\n\nSWIG will generate a directory called `java` which contains converted Java wrappers and a directory called `jniLibs` which contains the JNI library.\n\nTo run the Java example script:\n\n    cd examples/Java\n    make run\n\n## Compile a Python Wrapper\n\n    cd swig/Python\n    make\n\nSWIG will generate a `_snowboydetect.so` file and a simple (but hard-to-read) python wrapper `snowboydetect.py`. We have provided a higher level python wrapper `snowboydecoder.py` on top of that.\n    \nFeel free to adapt the `Makefile` in `swig/Python` to your own system's setting if you cannot `make` it.\n\n## Compile a GO Wrapper\n\n\tcd examples/Go\n\tgo get github.com/Kitt-AI/snowboy/swig/Go\n\tgo build -o snowboy main.go\n\t./snowboy ../../resources/snowboy.umdl ../../resources/snowboy.wav\n\t\nExpected Output:\n\n```\nSnowboy detecting keyword in ../../resources/snowboy.wav\nSnowboy detected keyword  1\n```\n\nFor more, please read `examples/Go/readme.md`.\n\n## Compile a Perl Wrapper\n\n    cd swig/Perl\n    make\n\nThe Perl examples include training personal hotword using the KITT.AI RESTful APIs, adding Google Speech API after the hotword detection, etc. To run the examples, do the following\n\n    cd examples/Perl\n\n    # Install cpanm, if you don't already have it.\n    curl -L https://cpanmin.us | perl - --sudo App::cpanminus\n\n    # Install the dependencies. Note, on Linux you will have to install the\n    # PortAudio package first, using e.g.:\n    # apt-get install portaudio19-dev\n    sudo cpanm --installdeps .\n\n    # Run the unit test.\n    ./snowboy_unit_test.pl\n\n    # Run the personal model training example.\n    ./snowboy_RESTful_train.pl <API_TOKEN> <Hotword> <Language>\n\n    # Run the Snowboy Google Speech API example. By default it uses the Snowboy\n    # universal hotword.\n    ./snowboy_googlevoice.pl <Google_API_Key> [Hotword_Model]\n\n\n## Compile an iOS Wrapper\n\nUsing Snowboy library in Objective-C does not really require a wrapper. It is basically the same as using C++ library in Objective-C. We have compiled a \"fat\" static library for iOS devices, see the library here `lib/ios/libsnowboy-detect.a`.\n\nTo initialize Snowboy detector in Objective-C:\n\n    snowboy::SnowboyDetect* snowboyDetector = new snowboy::SnowboyDetect(\n        std::string([[[NSBundle mainBundle]pathForResource:@\"common\" ofType:@\"res\"] UTF8String]),\n        std::string([[[NSBundle mainBundle]pathForResource:@\"snowboy\" ofType:@\"umdl\"] UTF8String]));\n    snowboyDetector->SetSensitivity(\"0.45\");        // Sensitivity for each hotword\n    snowboyDetector->SetAudioGain(2.0);             // Audio gain for detection\n\nTo run hotword detection in Objective-C:\n\n    int result = snowboyDetector->RunDetection(buffer[0], bufferSize);  // buffer[0] is a float array\n\nYou may want to play with the frequency of the calls to `RunDetection()`, which controls the CPU usage and the detection latency.\n\nThanks to @patrickjquinn and @grimlockrocks, we now have examples of using Snowboy in both Objective-C and Swift3. Check out the examples at `examples/iOS/`, and the screenshots below!\n\n<img src=https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/Obj-C_Demo_02172017.png alt=\"Obj-C Example\" width=300 /> <img src=https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/Swift3_Demo_02172017.png alt=\"Swift3 Example\" width=300 />\n\n\n## Compile an Android Wrapper\n\nFull README and tutorial is in [Android README](examples/Android/README.md) and here's a screenshot:\n\n<img src=\"https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/SnowboyAlexaDemo-Andriod.jpeg\" alt=\"Android Alexa Demo\" width=300 />\n\nWe have prepared an Android app which can be installed and run out of box: [SnowboyAlexaDemo.apk](https://github.com/Kitt-AI/snowboy/raw/master/resources/alexa/SnowboyAlexaDemo.apk) (please uninstall any previous one first if you installed this app before).\n\n## Quick Start for Python Demo\n\nGo to the `examples/Python` folder and open your python console:\n\n    In [1]: import snowboydecoder\n    \n    In [2]: def detected_callback():\n       ....:     print \"hotword detected\"\n       ....:\n    \n    In [3]: detector = snowboydecoder.HotwordDetector(\"resources/snowboy.umdl\", sensitivity=0.5, audio_gain=1)\n    \n    In [4]: detector.start(detected_callback)\n    \nThen speak \"snowboy\" to your microphone to see whetheer Snowboy detects you.\n\nThe `snowboy.umdl` file is a \"universal\" model that detect different people speaking \"snowboy\". If you want other hotwords, please go to [snowboy.kitt.ai](https://snowboy.kitt.ai) to record, train and downloand your own personal model (a `.pmdl` file).\n\nWhen `sensitiviy` is higher, the hotword gets more easily triggered. But you might get more false alarms.\n\n`audio_gain` controls whether to increase (>1) or decrease (<1) input volume.\n\nTwo demo files `demo.py` and `demo2.py` are provided to show more usages.\n\nNote: if you see the following error:\n\n    TypeError: __init__() got an unexpected keyword argument 'model_str'\n    \nYou are probably using an old version of SWIG. Please upgrade. We have tested with SWIG version 3.0.7 and 3.0.8.\n\n## Advanced Usages & Demos\n\nSee [Full Documentation](http://docs.kitt.ai/snowboy).\n\n## Change Log\n\n**v1.3.0, 2/19/2018**\n\n* Added Frontend processing for all platforms\n* Added `resources/models/smart_mirror.umdl` for https://snowboy.kitt.ai/hotword/47\n* Added `resources/models/jarvis.umdl` for https://snowboy.kitt.ai/hotword/29\n* Added README for Chinese\n* Cleaned up the supported platforms\n* Re-structured the model path\n\n**v1.2.0, 3/25/2017**\n\n* Added better Alexa model for [Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)\n* New decoder that works well for short hotwords like Alexa\n\n**v1.1.1, 3/24/2017**\n\n* Added Android demo\n* Added iOS demos\n* Added Samsung Artik support\n* Added Go support\n* Added Intel Edison support\n* Added Pine64 support\n* Added Perl Support\n* Added a more robust \"Alexa\" model (umdl)\n* Offering Hotword as a Service through ``/api/v1/train`` endpoint.\n* Decoder is not changed.\n\n**v1.1.0, 9/20/2016**\n\n* Added library for Node.\n* Added support for Python3.\n* Added universal model `alexa.umdl`\n* Updated universal model `snowboy.umdl` so that it works in noisy environment.\n\n**v1.0.4, 7/13/2016**\n\n* Updated universal `snowboy.umdl` model to make it more robust.\n* Various improvements to speed up the detection.\n* Bug fixes.\n\n**v1.0.3, 6/4/2016**\n\n* Updated universal `snowboy.umdl` model to make it more robust in non-speech environment.\n* Fixed bug when using float as input data.\n* Added library support for Android ARMV7 architecture.\n* Added library for iOS.\n\n**v1.0.2, 5/24/2016**\n\n* Updated universal `snowboy.umdl` model\n* added C++ examples, docs will come in next release.\n\n**v1.0.1, 5/16/2016**\n\n* VAD now returns -2 on silence, -1 on error, 0 on voice and >0 on triggered models\n* added static library for Raspberry Pi in case people want to compile themselves instead of using the binary version\n\n**v1.0.0, 5/10/2016**\n\n* initial release\n"
        },
        {
          "name": "README_ZH_CN.md",
          "type": "blob",
          "size": 17.611328125,
          "content": "# Snowboy 唤醒词检测\n\n[KITT.AI](http://kitt.ai)出品。\n\n[Home Page](https://snowboy.kitt.ai)\n\n[Full Documentation](http://docs.kitt.ai/snowboy) 和 [FAQ](http://docs.kitt.ai/snowboy#faq)\n\n[Discussion Group](https://groups.google.com/a/kitt.ai/forum/#!forum/snowboy-discussion) (或者发送邮件给 snowboy-discussion@kitt.ai)\n\n（因为我们每天都会收到很多消息，从2016年9月开始建立了讨论组。请在这里发送一般性的讨论。关于错误，请使用Github问题标签。）\n\n版本：1.3.0（2/19/2018）\n\n## Alexa支持\n\nSnowboy现在为运行在Raspberry Pi上的[Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)提供了hands-free的体验！有关性能以及如何使用其他唤醒词模型，请参阅下面的信息。\n\n**性能**\n\n唤醒检测的性能通常依赖于实际的环境，例如，它是否与高质量麦克风一起使用，是否在街道上，在厨房中，是否有背景噪音等等. 所以对于性能，我们觉得最好是在使用者真实的环境中进行评估。为了方便评估，我们准备了一个可以直接安装训醒的Android应用程序：[SnowboyAlexaDemo.apk](https://github.com/Kitt-AI/snowboy/raw/master/resources/alexa/SnowboyAlexaDemo.apk) (如果您之前安装了此应用程序，请先卸载它) 。\n\n**个人模型**\n\n* 用以下方式创建您的个人模型：[website](https://snowboy.kitt.ai) 或者 [hotword API](https://snowboy.kitt.ai/api/v1/train/)\n* 将[Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)（安装后）的唤醒词模型替换为您的个人模型\n\n```\n# Please replace YOUR_PERSONAL_MODEL.pmdl with the personal model you just\n# created, and $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you\n# cloned the Alexa AVS sample app repository.\ncp YOUR_PERSONAL_MODEL.pmdl $ALEXA_AVS_SAMPLE_APP_PATH/samples/wakeWordAgent/ext/resources/alexa.umdl\n```\n\n* 在[Alexa AVS sample app code](https://github.com/alexa/alexa-avs-sample-app/blob/master/samples/wakeWordAgent/src/KittAiSnowboyWakeWordEngine.cpp)中设置 `APPLY_FRONTEND` 为 `false`，更新 `SENSITIVITY`，并重新编译\n\n```\n# Please replace $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you\n# cloned the Alexa AVS sample app repository.\ncd $ALEXA_AVS_SAMPLE_APP_PATH/samples/wakeWordAgent/src/\n\n# Modify KittAiSnowboyWakeWordEngine.cpp and update SENSITIVITY at line 28.\n# Modify KittAiSnowboyWakeWordEngine.cpp and set APPLY_FRONTEND to false at\n# line 30.\nmake\n```\n\n* 运行程序，并且把唤醒词引擎设置为`kitt_ai`\n\n\n**通用模型**\n\n* 将[Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)（安装后）的唤醒词模型替换为您的通用模型\n\n```\n# Please replace YOUR_UNIVERSAL_MODEL.umdl with the personal model you just\n# created, and $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you\n# cloned the Alexa AVS sample app repository.\ncp YOUR_UNIVERSAL_MODEL.umdl $ALEXA_AVS_SAMPLE_APP_PATH/samples/wakeWordAgent/ext/resources/alexa.umdl\n```\n\n* 在[Alexa AVS sample app code](https://github.com/alexa/alexa-avs-sample-app/blob/master/samples/wakeWordAgent/src/KittAiSnowboyWakeWordEngine.cpp) 中更新 `SENSITIVITY`, 并重新编译\n\n```\n# Please replace $ALEXA_AVS_SAMPLE_APP_PATH with the actual path where you\n# cloned the Alexa AVS sample app repository.\ncd $ALEXA_AVS_SAMPLE_APP_PATH/samples/wakeWordAgent/src/\n\n# Modify KittAiSnowboyWakeWordEngine.cpp and update SENSITIVITY at line 28.\nmake\n```\n\n* 运行程序，并且把唤醒词引擎设置为`kitt_ai`\n\n\n## 个人唤醒词训练服务\n\nSnowboy现在通过 `https://snowboy.kitt.ai/api/v1/train/` 端口提供 **个人唤醒词训练服务**, 请查看[Full Documentation](http://docs.kitt.ai/snowboy)和示例[Python/Bash script](examples/REST_API)（非常欢迎贡献其他的语言)。\n\n简单来说，`POST` 下面代码到https://snowboy.kitt.ai/api/v1/train：\n\n        {\n            \"name\": \"a word\",\n            \"language\": \"en\",\n            \"age_group\": \"10_19\",\n            \"gender\": \"F\",\n            \"microphone\": \"mic type\",\n            \"token\": \"<your auth token>\",\n            \"voice_samples\": [\n                {wave: \"<base64 encoded wave data>\"},\n                {wave: \"<base64 encoded wave data>\"},\n                {wave: \"<base64 encoded wave data>\"}\n            ]\n        }\n\n然后您会获得一个训练好的个人模型！\n\n\n## 介绍\n\nSnowboy是一款可定制的唤醒词检测引擎，可为您创建像 \"OK Google\" 或 \"Alexa\" 这样的唤醒词。Snowboy基于神经网络，具有以下特性：\n\n* **高度可定制**：您可以自由定义自己的唤醒词 - \n比如说“open sesame”，“garage door open”或 “hello dreamhouse”等等。\n\n* **总是在监听** 但保护您的个人隐私：Snowboy不使用互联网，不会将您的声音传输到云端。\n\n* **轻量级和嵌入式的**：它可以轻松在Raspberry Pi上运行，甚至在最弱的Pi（单核700MHz ARMv6）上，Snowboy占用的CPU也少于10%。\n\n* Apache授权!\n\n目前Snowboy支持（查看lib文件夹）：\n\n* 所有版本的Raspberry Pi（Raspbian基于Debian Jessie 8.0）\n* 64位Mac OS X\n* 64位Ubuntu 14.04\n* iOS\n* Android\n* ARM64（aarch64，Ubuntu 16.04)\n\nSnowboy底层库由C++写成，通过swig被封装成能在多种操作系统和语言上使用的软件库。我们欢迎新语言的封装，请随时发送你们的Pull Request！\n\n目前我们已经现实封装的有:\n\n* C/C++\n* Java / Android\n* Go（thanks to @brentnd and @deadprogram）\n* Node（thanks to @evancohen和@ nekuz0r）\n* Perl（thanks to @iboguslavsky）\n* Python2/Python3\n* iOS / Swift3（thanks to @grimlockrocks）\n* iOS / Object-C（thanks to @patrickjquinn）\n\n如果您想要支持其他硬件或操作系统，请将您的请求发送至[snowboy@kitt.ai](mailto:snowboy.kitt.ai)\n\n注意：**Snowboy还不支持Windows** 。请在 *nix平台上编译Snowboy。\n\n## Snowboy模型的定价\n\n黑客：免费\n\n* 个人使用\n* 社区支持\n\n商业：请通过[snowboy@kitt.ai](mailto:snowboy@kitt.ai)与我们联系\n\n* 个人使用\n* 商业许可证\n* 技术支持\n\n## 预训练的通用模型\n\n为了测试方便，我们提供一些事先训练好的通用模型。当您测试那些模型时，请记住他们可能没有为您的特定设备或环境进行过优化。\n\n以下是模型列表和您必须使用的参数：\n\n* **resources/alexa/alexa-avs-sample-app/alexa.umdl**：这个是为[Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)优化过的唤醒词为“Alexa”的通用模型，将`SetSensitivity`设置为`0.6`，并将`ApplyFrontend`设置为true。当`ApplyFrontend`设置为`true`时，这是迄今为止我们公开发布的最好的“Alexa”的模型。\n* **resources/models/snowboy.umdl**：唤醒词为“snowboy”的通用模型。将`SetSensitivity`设置为`0.5`，`ApplyFrontend`设置为`false`。\n* **resources/models/jarvis.umdl**: 唤醒词为“Jarvis” (https://snowboy.kitt.ai/hotword/29) 的通用模型，其中包含了对应于“Jarvis”的两个唤醒词模型，所以需要设置两个`sensitivity`。将`SetSensitivity`设置为`0.8,0.8`，`ApplyFrontend`设置为`true`。\n* **resources/models/smart_mirror.umdl**: 唤醒词为“Smart Mirror” (https://snowboy.kitt.ai/hotword/47) 的通用模型。将`SetSensitivity`设置为`0.5`，`ApplyFrontend`设置为`false`。\n* **resources/models/subex.umdl**: 唤醒词为“Subex”(https://snowboy.kitt.ai/hotword/22014) 的通用模型。将`SetSensitivity`设置为`0.5`，`ApplyFrontend`设置为`true`。\n* **resources/models/neoya.umdl**: 唤醒词为“Neo ya”(https://snowboy.kitt.ai/hotword/22171) 的通用模型。其中包含了对应于“Neo ya”的两个>唤醒词模型，所以需要设置两个`sensitivity`。将`SetSensitivity`设置为`0.7,0.7`，`ApplyFrontend`设置为`true`。\n* **resources/models/hey_extreme.umdl**: 唤醒词为“Hey Extreme” (https://snowboy.kitt.ai/hotword/15428)的通用模型。将`SetSensitivity`设置为`0.6`，`ApplyFrontend`设置为`true`。\n* **resources/models/computer.umdl**: 唤醒词为“Computer” (https://snowboy.kitt.ai/hotword/46) 的通用模型。将`SetSensitivity`设置为`0.6`，`ApplyFrontend`设置为`true`。\n* **resources/models/view_glass.umdl**: 唤醒词为“View Glass” (https://snowboy.kitt.ai/hotword/7868) 的通用模型。将`SetSensitivity`设置为`0.7`，`ApplyFrontend`设置为`true`。\n\n## 预编译node模块\n\nSnowboy为一下平台编译了node模块：64位Ubuntu，MacOS X和Raspberry Pi（Raspbian 8.0+）。快速安装运行：\n\n    npm install --save snowboy\n\n有关示例用法，请参阅examples/Node文件夹。根据您使用的脚本，可能需要安装依赖关系库例如fs，wav或node-record-lpcm16。\n\n## 预编译Python Demo的二进制文件\n* 64 bit Ubuntu [12.04](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/ubuntu1204-x86_64-1.2.0.tar.bz2)\n  / [14.04](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/ubuntu1404-x86_64-1.3.0.tar.bz2)\n* [MacOS X](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/osx-x86_64-1.3.0.tar.bz2)\n* Raspberry Pi with Raspbian 8.0, all versions\n  ([1/2/3/Zero](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/rpi-arm-raspbian-8.0-1.3.0.tar.bz2))\n* Pine64 (Debian Jessie 8.5 (3.10.102)), Nvidia Jetson TX1 and Nvidia Jetson TX2 ([download](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/pine64-debian-jessie-1.2.0.tar.bz2))\n* Intel Edison (Ubilinux based on Debian Wheezy 7.8) ([download](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/edison-ubilinux-1.2.0.tar.bz2))\n\n如果您要根据自己的环境/语言编译版本，请继续阅读。\n\n## 依赖\n\n要运行demo，您可能需要以下内容，具体取决于您使用的示例和您正在使用的平台：\n\n* SoX（音频转换）\n* PortAudio或PyAudio（音频录音）\n* SWIG 3.0.10或以上（针对不同语言/平台编译Snowboy）\n* ATLAS或OpenBLAS（矩阵计算）\n\n在下面您还可以找到在Mac OS X，Ubuntu或Raspberry Pi上安装依赖关系所需的确切命令。\n\n### Mac OS X\n\n`brew` 安装 `swig`，`sox`，`portaudio` 和绑定了 `pyaudio`的Python：\n\n    brew install swig portaudio sox\n    pip install pyaudio\n\n如果您没有安装Homebrew，请在这里[here](http://brew.sh/)下载。如果没有pip，可以在这里[here](https://pip.pypa.io/en/stable/installing/)安装。\n\n确保您可以用麦克风录制音频：\n\n    rec t.wav\n\n### Ubuntu / Raspberry Pi / Pine64 / Nvidia Jetson TX1 / Nvidia Jetson TX2\n\n首先 `apt-get` 安装 `swig`，`sox`，`portaudio`和绑定了 `pyaudio` 的 Python：\n\n    sudo apt-get install swig3.0 python-pyaudio python3-pyaudio sox\n    pip install pyaudio\n\n然后安装 `atlas` 矩阵计算库：\n\n    sudo apt-get install libatlas-base-dev\n\n确保您可以用麦克风录制音频：\n\n    rec t.wav\n\n如果您需要额外设置您的音频（特别是Raspberry Pi），请参阅[full documentation](http://docs.kitt.ai/snowboy)。\n\n## 编译Node插件\n\n为Linux和Raspberry Pi编译node插件需要安装以下依赖项:\n\n    sudo apt-get install libmagic-dev libatlas-base-dev\n\n然后编译插件，从snowboy代码库的根目录运行以下内容：\n\n    npm install\n    ./node_modules/node-pre-gyp/bin/node-pre-gyp clean configure build\n\n## 编译Java Wrapper\n\n    # Make sure you have JDK installed.\n    cd swig/Java\n    make\n\nSWIG将生成一个包含转换成Java封装的`java`目录和一个包含JNI库的`jniLibs`目录。\n\n运行Java示例脚本：\n\n    cd examples/Java\n    make run\n\n## 编译Python Wrapper\n\n    cd swig/Python\n    make\n\nSWIG将生成一个_snowboydetect.so文件和一个简单（但难以阅读）的python 封装snowboydetect.py。我们已经提供了一个更容易读懂的python封装snowboydecoder.py。\n\n如果不能make，请适配`swig/Python`中的Makefile到您自己的系统设置。\n\n## 编译GO Warpper\n\n      cd examples/Go\n      go get github.com/Kitt-AI/snowboy/swig/Go\n      go build -o snowboy main.go\n      ./snowboy ../../resources/snowboy.umdl ../../resources/snowboy.wav\n\n期望输出：\n\n    Snowboy detecting keyword in ../../resources/snowboy.wav\n    Snowboy detected keyword  1\n\n\n更多细节，请阅读 'examples/Go/readme.md'。\n\n## 编译Perl wrapper\n\n    cd swig/Perl\n    make\n\nPerl示例包括使用KITT.AI RESTful API训练个人唤醒词，在检测到唤醒之后添加Google Speech API等。要运行示例，请执行以下操作\n\n    cd examples/Perl\n\n    # Install cpanm, if you don't already have it.\n    curl -L https://cpanmin.us | perl - --sudo App::cpanminus\n\n    # Install the dependencies. Note, on Linux you will have to install the\n    # PortAudio package first, using e.g.:\n    # apt-get install portaudio19-dev\n    sudo cpanm --installdeps .\n\n    # Run the unit test.\n    ./snowboy_unit_test.pl\n\n    # Run the personal model training example.\n    ./snowboy_RESTful_train.pl <API_TOKEN> <Hotword> <Language>\n\n    # Run the Snowboy Google Speech API example. By default it uses the Snowboy\n    # universal hotword.\n    ./snowboy_googlevoice.pl <Google_API_Key> [Hotword_Model]\n\n## 编译iOS wrapper\n\n在Objective-C中使用Snowboy库不需要封装. 它与Objective-C中使用C++库基本相同. 我们为iOS设备编写了一个 \"fat\" 静态库，请参阅这里的库`lib/ios/libsnowboy-detect.a`。\n\n在Objective-C中初始化Snowboy检测器：\n\n    snowboy::SnowboyDetect* snowboyDetector = new snowboy::SnowboyDetect(\n        std::string([[[NSBundle mainBundle]pathForResource:@\"common\" ofType:@\"res\"] UTF8String]),\n        std::string([[[NSBundle mainBundle]pathForResource:@\"snowboy\" ofType:@\"umdl\"] UTF8String]));\n    snowboyDetector->SetSensitivity(\"0.45\");        // Sensitivity for each hotword\n    snowboyDetector->SetAudioGain(2.0);             // Audio gain for detection\n\n在Objective-C中运行唤醒词检测：\n\n    int result = snowboyDetector->RunDetection(buffer[0], bufferSize);  // buffer[0] is a float array\n\n您可能需要按照一定的频率调用RunDetection()，从而控制CPU使用率和检测延迟。\n\n感谢@patrickjquinn和@grimlockrocks，我们现在有了在Objective-C和Swift3中使用Snowboy的例子。看看下面的例子`examples/iOS/`和下面的截图！\n\n<img src=https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/Obj-C_Demo_02172017.png alt=\"Obj-C Example\" width=300 /> <img src=https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/Swift3_Demo_02172017.png alt=\"Swift3 Example\" width=300 />\n\n# 编译Android Wrapper\n\n完整的README和教程在[Android README](examples/Android/README.md)，这里是一个截图：\n\n<img src=\"https://s3-us-west-2.amazonaws.com/kittai-cdn/Snowboy/SnowboyAlexaDemo-Andriod.jpeg\" alt=\"Android Alexa Demo\" width=300 />\n\n我们准备了一个可以安装并运行的Android应用程序：[SnowboyAlexaDemo.apk](https://github.com/Kitt-AI/snowboy/raw/master/resources/alexa/SnowboyAlexaDemo.apk)（如果您之前安装了此应用程序，请先卸载它们)。\n\n## Python demo快速入门\n\n进入 `examples/Python` 文件夹并打开你的python控制台：\n\n    In [1]: import snowboydecoder\n\n    In [2]: def detected_callback():\n       ....:     print \"hotword detected\"\n       ....:\n\n    In [3]: detector = snowboydecoder.HotwordDetector(\"resources/snowboy.umdl\", sensitivity=0.5, audio_gain=1)\n\n    In [4]: detector.start(detected_callback)\n\n然后对你的麦克风说\"snowboy\"，看看是否Snowboy检测到你。\n\n这个 `snowboy.umdl` 文件是一个 \"通用\" 模型，可以检测不同的人说 \"snowboy\" 。 如果你想要其他的唤醒词，请去[snowboy.kitt.ai](https://snowboy.kitt.ai)录音，训练和下载你自己的个人模型(一个.pmdl文件)。\n\n当 `sensitiviy` 设置越高，唤醒越容易触发。但是你也可能会收到更多的误唤醒。\n\n`audio_gain` 控制是否增加（> 1）或降低（<1）输入音量。\n\n我们提供了两个演示文件 `demo.py`, `demo2.py` 以显示更多的用法。\n\n注意：如果您看到以下错误：\n\n    TypeError: __init__() got an unexpected keyword argument 'model_str'\n\n您可能正在使用旧版本的SWIG. 请升级SWIG。我们已经测试过SWIG 3.0.7和3.0.8。\n\n## 高级用法与演示\n\n请参阅[Full Documentation](http://docs.kitt.ai/snowboy)。\n\n## 更改日志\n\n**v1.3.0, 2/19/2018**\n\n* 添加前端处理到所有平台\n* 添加`resources/models/smart_mirror.umdl` 给 https://snowboy.kitt.ai/hotword/47\n* 添加`resources/models/jarvis.umdl` 给 https://snowboy.kitt.ai/hotword/29\n* 添加中文文档\n* 清理支持的平台\n* 重新定义了模型路径\n\n**v1.2.0, 3/25/2017**\n\n* 为[Alexa AVS sample app](https://github.com/alexa/alexa-avs-sample-app)添加更好的Alexa模型\n* 新的解码器，适用于像Alexa这样的简短的词条\n\n**v1.1.1, 3/24/2017**\n\n* 添加Android演示\n* 添加了iOS演示\n* 增加了三星Artik支持\n* 添加Go支持\n* 增加了英特尔爱迪生支持\n* 增加了Pine64的支持\n* 增加了Perl支持\n* 添加了更强大的“Alexa”模型（umdl）\n* 通过/api/v1/train终端提供Hotword即服务。\n* 解码器没有改变\n\n**v1.1.0, 9/20/2016**\n\n* 添加了Node的库\n* 增加了对Python3的支持\n* 增加了通用模型 alexa.umdl\n* 更新通用模型snowboy.umdl，使其在嘈杂的环境中工作\n\n**v1.0.4, 7/13/2016**\n\n* 更新通用snowboy.umdl模型，使其更加健壮\n* 各种改进加快检测\n* Bug修复\n\n**v1.0.3, 6/4/2016**\n\n* 更新的通用snowboy.umdl模型，使其在非语音环境中更加强大\n* 修正使用float作为输入数据时的错误\n* 为Android ARMV7架构增加了库支持\n* 为iOS添加了库\n\n**v1.0.2, 5/24/2016**\n\n* 更新通用snowboy.umdl模型\n* 添加C ++示例，文档将在下一个版本中\n\n**v1.0.1, 5/16/2016**\n\n* VAD现在返回-2为静音，-1为错误，0为语音，大于0为触发了唤醒\n* 添加了Raspberry Pi的静态库，以防人们想自己编译而不是使用二进制版本\n\n**v1.0.0, 5/10/2016**\n\n* 初始版本\n"
        },
        {
          "name": "README_commercial.md",
          "type": "blob",
          "size": 7.2265625,
          "content": "# Common Questions for a Commercial Application\n\nYou are looking for a way to put Snowboy in a commercial application. We have compiled a large collection of common questions from our customers all over the world in various industries. \n\n\n## Universal models (paid) vs. personal models (free)\n\nPersonal models:\n\n* are the models you downloaded from https://snowboy.kitt.ai or using our `/train` SaaS API.\n* are good for quick demos\n* are built with only 3 voice samples\n* are not noise robust and you'll get a lot of false alarms in real environment\n* only work on your own voice or a very similar voice, thus is speaker dependent\n* are free\n\nUniversal models:\n\n* are built using a lot more voice samples (at least thousands)\n* take effort to collect those voice samples\n* take a lot of GPU time to train\n* are more robust against noise\n* are mostly speaker independent (with challenges on children's voice and accents)\n* cannot be built by yourself using the web interface or the SaaS API\n* cost you money\n\n### FAQ for universal & personal models\n\nQ: **If I record multiple times on snowboy.kitt.ai, can I improve the personal models?**  \nA: No. Personal models only take 3 voice samples to build. Each time you record new voices, the previous samples are overwritten and not used in your current model. \n\n\nQ: **How can I get a universal model for free?**  \nA: The *one and only* way: Ask 500 people to log in to snowboy.kitt.ai, contribute their voice samples to a particular hotword, then ask us to build a universal model for that hotword.\n\nQ: **Can I use your API to collect voices from 500 people and increment the sample counter from snowboy.kitt.ai?**  \nA: No. The [SaaS](https://github.com/kitt-ai/snowboy#hotword-as-a-service) API is separate from the website.\n\nQ: **How long does it take to get a universal model?**  \nA: Usually a month.\n\n## Licensing\n\n\n### Explain your license again?\n\nEverything on Snowboy's GitHub repo is Apache licensed, including various sample applications and wrapper codes, though the Snowboy library is binary code compiled against different platforms. \n\nWith that said, if you built an application from https://github.com/kitt-ai/snowboy or personal models downloaded from https://snowboy.kitt.ai, you don't need to pay a penny.\n\nIf you want to use a universal model with your own customized hotword, you'll need an **evaluation license** and a **commercial license**.\n\n### Evaluation license\n\nEach hotword is different. When you train a universal model with your own hotword, nobody can guarantee that it works on your system without any flaws. Thus you'll need to get an evaluation license first to test whether your universal model works for you.\n\nAn evaluation license:\n\n* gives you a 90 day window to evaluate the universal model we build for you\n* costs you money\n\n**Warning: an evaluation license will expire after 90 days. Make sure you don't use the model with evaluation license in production systems.** Get a commercial license from us for your production system.\n\n#### Evaluation license FAQ\n\nQ: **How much does it cost?**  \nA: A few thousand dollars.\n\nQ: **Can I get a discount as a {startup, student, NGO}?**  \nA: No. Our pricing is already at least half of what others charge.\n\nQ: **How can you make sure your universal model works for me?**  \nA: We simply can't. However we have a few sample universal models from our GitHub [repo](https://github.com/Kitt-AI/snowboy/tree/master/resources), including \"alexa.umdl\", \"snowboy.umdl\", and \"smart_mirror.umdl\". The \"alexa.umdl\" model is enhanced with a lot more data and is not a typical case. So pay attention to test \"snowboy.umdl\" and \"smart_mirror.umdl\". They offer similar performance to your model.\n\n\n### Commercial license\n\nAfter evaluation, if you feel want to go with Snowboy, you'll need a commercial license to deploy it. We usually charge a flat fee per unit of hardware you sell.\n\n#### Commercial license FAQ\n\nQ: **Is it a one-time license or subscription-based license?**  \nA: It's a perpetual license for each device. Since the Snowboy library runs *offline* on your device, you can run it forever without worrying about any broken and dependent web services.\n\nQ: **What's your pricing structure?**  \nA: We have tiered pricing depending on your volume. We charge less if you sell more.\n\nQ: **Can you give me one example?**  \nA: For instance, if your product is a talking robot with a $300 price tag, and you sell at least 100,000 units per year, we'll probably charge you $1 per unit once you go over 100,000 units. If your product is a smart speaker with a $30 price tag, we won't charge you $1, but you'll have to sell a lot more to make the business sense to us.\n\nQ: **I plan to sell 1000 units a year, can I license your software for $1 per unit?**  \nA: No. In that way we only make $1000 a year, which is not worth the amount of time we put on your hotword.\n\nQ: **I make a cellphone app, not a hardware product, what's the pricing structure?**  \nA: Depends on how you generate revenue. For instance, if your app is priced at $1.99, we'll collect cents per paid user, assuming you have a large user base. If you only have 2000 paid users, we'll make a revenue of less than a hundred dollars and it won't make sense to us.\n\n\n### What's the process of getting a license?\n\n1. Make sure Snowboy can run on your system\n2. Reach out to us with your hotword name, commercial application, and target market\n3. Discuss with us about **commercial license** fee to make sure our pricing fits your budget\n4. Sign an evaluation contract, pay 50% of invoice\n5. We'll train a universal model for you and give you an **evaluation license** of 90 days\n6. Test the model and discuss how we can improve it\n7. If you decide to go with it, get a commercial license from us\n\n## General Questions\n\n### What language does Snowboy support?\n\nWe support North American English and Chinese the best. We can deal with a bit of Indian accents as well. For other languages, we'll need to first listen to your hotword (please send us a few .wav voice samples) before we can engage.\n\n### How many voice samples do you need?\n\nUsually 1500 voice samples from 500 people to get started. The more the better. If your hotword is in English, we can collect the voice samples for you. Otherwise you'll need to collect it yourself and send to us.\n\n### What's the format on voice samples?\n\n16000Hz sample rate, 16 bit integer, mono channel, .wav files.\n\n### Does Snowboy do: AEC, VAD, Noise Suppression, Beam Forming?\n\nSnowboy has a weak support for VAD and noise suppression, as we found some customers would use Snowboy without a microphone array. Snowboy is not a audio frontend processing toolkit thus does not support AEC and beam forming.\n\nIf your application wants to support far-field speech, i.e., verbal communication at least 3 feet away, you'll need a microphone array to enhance incoming speech and reduce noise. Please do not reply on Snowboy to do everything.\n\n### Can you compile Snowboy for my platform?\n\nIf your platform is not listed [here](https://github.com/Kitt-AI/snowboy/tree/master/lib), and you want to get a commercial license from us, please contact us with your toolchain, hardware chip, RAM, OS, GCC/G++ version. Depending on the effort, we might charge an NRE fee for cross compiling.\n\n### Contact\n\nIf this document doesn't cover what's needed, feel free to reach out to us at snowboy@kitt.ai"
        },
        {
          "name": "binding.gyp",
          "type": "blob",
          "size": 2.3779296875,
          "content": "{\n    'targets': [{\n        'target_name': 'snowboy',\n        'sources': [\n            'swig/Node/snowboy.cc'\n        ],\n        'conditions': [\n            ['OS==\"mac\"', {\n                'link_settings': {\n                    'libraries': [\n                        '<(module_root_dir)/lib/osx/libsnowboy-detect.a',\n                    ]\n                }\n            }],\n            ['OS==\"linux\" and target_arch==\"x64\"', {\n                'link_settings': {\n                    'ldflags': [\n                        '-Wl,--no-as-needed',\n                    ],\n                    'libraries': [\n                        '<(module_root_dir)/lib/ubuntu64/libsnowboy-detect.a',\n                    ]\n                }\n            }],\n            ['OS==\"linux\" and target_arch==\"arm\"', {\n                'link_settings': {\n                    'ldflags': [\n                        '-Wl,--no-as-needed',\n                    ],\n                    'libraries': [\n                        '<(module_root_dir)/lib/rpi/libsnowboy-detect.a',\n                    ]\n                }\n            }],\n            ['OS==\"linux\" and target_arch==\"arm64\"', {\n                'link_settings': {\n                    'ldflags': [\n                        '-Wl,--no-as-needed',\n                    ],\n                    'libraries': [\n                        '<(module_root_dir)/lib/aarch64-ubuntu1604/libsnowboy-detect.a',\n                    ]\n                }\n            }]\n        ],\n        'cflags': [\n            '-std=c++11',\n            '-fexceptions',\n            '-Wall',\n            '-D_GLIBCXX_USE_CXX11_ABI=0'\n        ],\n        'cflags!': [\n            '-fno-exceptions'\n        ],\n        'cflags_cc!': [\n            '-fno-exceptions'\n        ],\n        'include_dirs': [\n            \"<!(node -e \\\"require('nan')\\\")\",\n            \"<!(pwd)/include\"\n        ],\n        'libraries': [\n            '-lcblas'\n        ],\n        'xcode_settings': {\n            'MACOSX_DEPLOYMENT_TARGET': '10.11',\n            \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",\n            'OTHER_CFLAGS': [\n                '-std=c++11',\n                '-stdlib=libc++'\n            ]\n        }\n    },\n    {\n      \"target_name\": \"action_after_build\",\n      \"type\": \"none\",\n      \"dependencies\": [ \"<(module_name)\" ],\n      \"copies\": [\n        {\n          \"files\": [ \"<(PRODUCT_DIR)/<(module_name).node\" ],\n          \"destination\": \"<(module_path)\"\n        }\n      ]\n    }]\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.205078125,
          "content": "{\n  \"name\": \"snowboy\",\n  \"version\": \"1.3.1\",\n  \"description\": \"Snowboy is a customizable hotword detection engine\",\n  \"main\": \"lib/node/index.js\",\n  \"typings\": \"lib/node/index.d.ts\",\n  \"binary\": {\n    \"module_name\": \"snowboy\",\n    \"module_path\": \"./lib/node/binding/{configuration}/{node_abi}-{platform}-{arch}/\",\n    \"remote_path\": \"./{module_name}/v{version}/{configuration}/\",\n    \"package_name\": \"{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz\",\n    \"host\": \"https://snowboy-release-node.s3-us-west-2.amazonaws.com\"\n  },\n  \"scripts\": {\n    \"install\": \"node-pre-gyp install --fallback-to-build\",\n    \"test\": \"node index.js\",\n    \"prepublish\": \"tsc --listFiles\"\n  },\n  \"author\": \"KITT.AI <snowboy@kitt.ai>\",\n  \"contributors\": [\n    \"Leandre Gohy <leandre.gohy@hexeo.be>\",\n    \"Evan Cohen <evanbtcohen@gmail.com>\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Kitt-AI/snowboy.git\"\n  },\n  \"gypfile\": true,\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"node-pre-gyp\": \"^0.6.30\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^6.0.38\",\n    \"aws-sdk\": \"2.x\",\n    \"nan\": \"^2.4.0\",\n    \"typescript\": \"^2.0.2\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Kitt-AI/snowboy/issues\"\n  }\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.771484375,
          "content": "import os\nimport sys\nfrom setuptools import setup, find_packages\nfrom distutils.command.build import build\nfrom distutils.dir_util import copy_tree\nfrom subprocess import call\n\n\npy_dir = 'Python' if sys.version_info[0] < 3 else 'Python3'\n\nclass SnowboyBuild(build):\n\n    def run(self):\n\n        cmd = ['make']\n        swig_dir = os.path.join('swig', py_dir)\n        def compile():\n            call(cmd, cwd=swig_dir)\n\n        self.execute(compile, [], 'Compiling snowboy...')\n\n        # copy generated .so to build folder\n        self.mkpath(self.build_lib)\n        snowboy_build_lib = os.path.join(self.build_lib, 'snowboy')\n        self.mkpath(snowboy_build_lib)\n        target_file = os.path.join(swig_dir, '_snowboydetect.so')\n        if not self.dry_run:\n            self.copy_file(target_file,\n                           snowboy_build_lib)\n\n            # copy resources too since it is a symlink\n            resources_dir = 'resources'\n            resources_dir_on_build = os.path.join(snowboy_build_lib,\n                                                  'resources')\n            copy_tree(resources_dir, resources_dir_on_build)\n\n        build.run(self)\n\n\nsetup(\n    name='snowboy',\n    version='1.3.0',\n    description='Snowboy is a customizable hotword detection engine',\n    maintainer='KITT.AI',\n    maintainer_email='snowboy@kitt.ai',\n    license='Apache-2.0',\n    url='https://snowboy.kitt.ai',\n    packages=find_packages(os.path.join('examples', py_dir)),\n    package_dir={'snowboy': os.path.join('examples', py_dir)},\n    py_modules=['snowboy.snowboydecoder', 'snowboy.snowboydetect'],\n    package_data={'snowboy': ['resources/*']},\n    zip_safe=False,\n    long_description=\"\",\n    classifiers=[],\n    install_requires=[\n        'PyAudio',\n    ],\n    cmdclass={\n        'build': SnowboyBuild\n    }\n)\n"
        },
        {
          "name": "swig",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.8837890625,
          "content": "{\n    \"compilerOptions\": {\n        \"target\": \"es6\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"node\",\n        \"isolatedModules\": false,\n        \"jsx\": \"react\",\n        \"experimentalDecorators\": false,\n        \"emitDecoratorMetadata\": false,\n        \"declaration\": true,\n        \"noImplicitAny\": true,\n        \"noImplicitUseStrict\": false,\n        \"noFallthroughCasesInSwitch\": true,\n        \"noImplicitReturns\": true,\n        \"removeComments\": true,\n        \"noLib\": false,\n        \"preserveConstEnums\": true,\n        \"suppressImplicitAnyIndexErrors\": true\n    },\n    \"files\": [\n      \"lib/node/index.ts\",\n      \"lib/node/node-pre-gyp.d.ts\",\n      \"lib/node/SnowboyDetectNative.d.ts\",\n      \"node_modules/@types/node/index.d.ts\"\n    ],\n    \"exclude\": [\n      \"node_modules\"\n    ],\n    \"compileOnSave\": true,\n    \"buildOnSave\": false,\n    \"atom\": {\n        \"rewriteTsconfig\": false\n    }\n}\n"
        }
      ]
    }
  ]
}