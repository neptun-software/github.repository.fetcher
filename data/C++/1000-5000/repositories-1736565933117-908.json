{
  "metadata": {
    "timestamp": 1736565933117,
    "page": 908,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "InteractiveComputerGraphics/PositionBasedDynamics",
      "stars": 1966,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "lib/\nbin/\n!bin/*.bat"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.0029296875,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: doc/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#    - pdf\n#    - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n   install:\n   - requirements: doc/requirements.txt"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.806640625,
          "content": "################################################################################\n# general CMake and project setup\n################################################################################\ncmake_minimum_required(VERSION 3.1)\n\nproject(PositionBasedDynamics)\n\nset(PROJECT_PATH ${PROJECT_SOURCE_DIR})\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n\tadd_compile_options(-idirafter${PROJECT_SOURCE_DIR})\nelse()\n\tinclude_directories(${PROJECT_SOURCE_DIR})\nendif()\n\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/CMake\" ${CMAKE_MODULE_PATH})\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\ninclude(${PROJECT_PATH}/CMake/Common.cmake)\n\nif (NOT WIN32)\n\tmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\nendif()\n\nif (DEFINED PBD_EXTERNALINSTALLDIR)\n\tset(ExternalInstallDir \"${PBD_EXTERNALINSTALLDIR}\" CACHE INTERNAL \"External install directory\")\t\nelse()\n\tset(ExternalInstallDir \"${PROJECT_BINARY_DIR}\" CACHE INTERNAL \"External install directory\")\t\nendif()\t\n\ninclude(ExternalProject)\n\n## Eigen3 is used by most of the libraries that follow\nfind_package(Eigen3 REQUIRED)\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -idirafter${EIGEN3_INCLUDE_DIR}\")\nendif()\n\nset(EXT_CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE})\nif (NOT ${CMAKE_BUILD_TYPE} STREQUAL \"Debug\")\n\tset(EXT_CMAKE_BUILD_TYPE \"Release\")\nendif()\n\n## Discregrid\nif ((DEFINED Discregrid_INCLUDE_DIR) AND (DEFINED Discregrid_DEBUG_LIB) AND (DEFINED Discregrid_LIB))\n\tmessage(STATUS \"Using ${Discregrid_INCLUDE_DIR}\")\n\tset(Discregrid_LIBRARIES optimized ${Discregrid_LIB} debug ${Discregrid_DEBUG_LIB})\nelse()\n\tExternalProject_Add(\n\t   Ext_Discregrid\n\t   PREFIX \"${CMAKE_BINARY_DIR}/extern/Discregrid\"\n\t   GIT_REPOSITORY https://github.com/InteractiveComputerGraphics/Discregrid.git\n\t   GIT_TAG \"4c27e1cc88be828c6ac5b8a05759ac7e01cf79e9\"\n\t   INSTALL_DIR ${ExternalInstallDir}/Discregrid\n\t   CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=${EXT_CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX:PATH=${ExternalInstallDir}/Discregrid\n\t   -DBUILD_CMD_EXECUTABLE:BOOL=0 -DEIGEN3_INCLUDE_DIR:PATH=${EIGEN3_INCLUDE_DIR} -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\n\t) \n\tExternalProject_Get_Property(Ext_Discregrid INSTALL_DIR)\n\tset(Discregrid_INCLUDE_DIR ${INSTALL_DIR}/include)\n\tset(Discregrid_LIBRARIES optimized ${INSTALL_DIR}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}Discregrid${CMAKE_STATIC_LIBRARY_SUFFIX} \n\t\t\t\t\t\t\t debug ${INSTALL_DIR}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}Discregrid_d${CMAKE_STATIC_LIBRARY_SUFFIX})\n\tunset(INSTALL_DIR)\n\tmessage(STATUS \"Building ${Discregrid_INCLUDE_DIR}\")\nendif()\n\nif (DEFINED GenericParameters_INCLUDE_DIR)\n\tmessage(STATUS \"Using ${GenericParameters_INCLUDE_DIR}\")\nelse()\n\t## GenericParameters\n\tExternalProject_Add(\n\t   Ext_GenericParameters\n\t   PREFIX \"${ExternalInstallDir}/GenericParameters\"\n\t   GIT_REPOSITORY https://github.com/InteractiveComputerGraphics/GenericParameters.git\n\t   GIT_TAG \"a4e2744eea526270cfe38b826440d09f66473316\"\n\t   INSTALL_DIR ${ExternalInstallDir}/GenericParameters\n\t   CMAKE_ARGS -DCMAKE_BUILD_TYPE=${EXT_CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX:PATH=${ExternalInstallDir}/GenericParameters -DGENERICPARAMETERS_NO_TESTS:BOOL=1\t\t\n\t) \n\tExternalProject_Get_Property(Ext_GenericParameters INSTALL_DIR)\n\tset(GenericParameters_INCLUDE_DIR ${INSTALL_DIR}/include)\n\tunset(INSTALL_DIR)\nendif()\n\nadd_subdirectory(PositionBasedDynamics)\nadd_subdirectory(Simulation)\nadd_subdirectory(Utils)\nif (NOT PBD_LIBS_ONLY)\n\tinclude(DataCopyTargets)\n\tadd_subdirectory(extern/glfw)\n\tadd_subdirectory(extern/imgui)\n\tadd_subdirectory(extern/md5)\n\tadd_subdirectory(Demos)\n\tif (USE_PYTHON_BINDINGS)\n\t\tadd_subdirectory(extern/pybind)\n\t\tadd_subdirectory(pyPBD)\n\tendif ()\nendif()\n\n\ninstall(DIRECTORY ./Common\nDESTINATION include\nFILES_MATCHING PATTERN \"*.h\")\n\ninstall(DIRECTORY ./data\nDESTINATION include\nFILES_MATCHING PATTERN \"*.glsl\")\n\ninstall(DIRECTORY ./Demos/Visualization\nDESTINATION include\nFILES_MATCHING PATTERN \"*.h\")\n\n"
        },
        {
          "name": "Changelog.txt",
          "type": "blob",
          "size": 4.53125,
          "content": "2.2.1\t\n\t- bugfix in XPBD FEM code\n\t- updated GenericParameters\n\t- fixed meshes\n\n2.2.0\n\t- removed AntTweakBar GUI\n\t- added imgui \n\t- added PLY export\n\t- added documentation of scene file format\n\n2.1.5\n\t- updated pybind11\n\t- cleanup mesh loading code\n\t- added support of PLY files\n\n2.1.4 \n\t- cleanup some code\n\t- glfw fps limit\n\n2.1.3\n\t- fixed compilation on macOS thanks to Robin Rademacher\n\n2.1.2\t\n\t- updated Python examples\n\t- added documentation files\n\t- moved build directory for lib files\n\t- fixed encoding of some source files\n\t- updated numpy version\n\n2.1.1\n\t- fixed Python interface for function addFace\n\n2.1.0\n\t- added XPBD FEM constraint for deformable solids\n\t- updated to Eigen 3.4.0\n\n2.0.1\n\t- extended and modified Python interface\n\t- more Python examples\n\t- bugfixes\n\t\n2.0.0\n\t- added Python binding\n\t- cleaned up demos\n\t- added XPBD distance constraint\n\t- added XPBD isometric bending constraint\n\t- added XPBD volume constraint\n\t- added glfw \n\t- removed freeglut and glew\n\t- added flat shading\n\n1.8.0\n\t- added OBJ export\n\t- added substepping\n\t- updated GenericParameters\n\t- bufixes\n\t- fixed several compiler warnings\n\t- removed MiniBall dependency\n\t- update to Eigen 3.3.7\n\t\n1.7.0\n\t- added DamperJoint\n\t- improved implementation of SliderJoint\n\t- improved implementation of TargetPositionMotorSliderJoint\n\t- improved implementation of TargetVelocityMotorSliderJoint\n\t- improved implementation of HingeJoint\n\t- improved implementation of TargetAngleMotorHingeJoint\n\t- improved implementation of TargetVelocityMotorHingeJoint\n\t- use XPBD to implement an implicit spring\n\t- added distance joint for rigid bodies\n\t- small optimizations\n\t- fixed single precision build\n\t- cleanup code\n\t- using GenericParameters\n\t- Crispin Deul added the implementation of his paper Deul, Kugelstadt, Weiler, Bender, \"Direct Position-Based Solver for Stiff Rods\", Computer Graphics Forum 2018 and a corresponding demo\n\n1.6.0\n\t- added collision detection for arbitrary meshes based on cubic signed distance fields\n\t- added DiscreGrid library as external project to generate cubic signed distance fields\n\t- added possibility to define motor target sequences in scene files\n\t- added implementation of the paper Kugelstadt, Schoemer, \"Position and Orientation Based Cosserat Rods\", SCA 2016 and a corresponding demo\n\t- update to Eigen 3.3.4\n\t\n1.5.1\n\t- added Timing class\n\t- removed Boost dependency\n\t- update to Eigen 3.2.9\n\t- added support for x86 compilation (thanks to Josef Kohout)\n\t- added implementation of \"Position-Based Elastic Rods\" paper and a corresponding demo\n\t- fixed some problems with VS2015\n\n1.5.0\n\t- added SceneGenerator.py to generate new scenarios easily by simple Python scripting\n\t- added scene loader demo\n\t- added scene loader based on json \n\t- added collision demos\n\t- added collision detection based on distance functions\n\t- added collision handling for rigid and deformable bodies\n\t- high resolution visualization mesh can be attached to a deformable body\n\t- added support for Mac OS X\n\t- added shader support\n\t- added automatic computation of inertia tensor for arbitrary triangle meshes\n\t- added bunny model to chain demo\n\t- added visualization mesh to rigid body\n\t- added OBJ file loader\n\t- update to Eigen 3.2.7\n\t- added target velocity motor slider joint\n\t- added target position motor slider joint\n\t- added slider joint\n\t- extended JointDemo\n\n1.4.0\n\t- extended JointDemo\n\t- added TargetVelocityMotorHingeJoint\n\t- added TargetAngleMotorHingeJoint\n\t- made function names consistent\n\t- fixed initialization of hinge joint coordinate system\n\t- parallelized unified solver using graph coloring\n\t- implemented unified solver for rigid bodies and deformable solids \n\t- added documentation for generic constraints\n\t- added generic constraint demo\n\t- added generic constraint\n\t- added coupling demo\n\t- added ball joint which links a rigid body and a particle\n\t- added universal joint\n\t- improved hinge joint\n\t- added documentation for position based fluids\n\n1.3.0\n\t- added some documentation\n\t- cleaned up project \n\t- added new Joint demo\n\t- added HingeJoint\n\t- added BallOnLineJoint\n\t- separated deformable, fluid and rigid body dynamics in different classes\n\t- cleaned up interface\n\t- added doxygen files\n\t- update to Eigen 3.2.5\n\t- resolve compiler errors in Visual Studio 2010\n\n1.2.0\n\t- added rigid body demo\n\t- added balljoint constraint\n\t- fixed WIN32 issues\n\t- cleanup\n\t- Ubuntu fix\n\n1.1.0\n\n \t- added second order velocity update\n \t- fixed build for Linux\n\t- added AntTweakBar sources\n\t- added second order velocity update\n\t- added density constraint (position based fluids)\n\t- added fluid demo\n\n1.0.0\n\n\t- Initial release"
        },
        {
          "name": "Common",
          "type": "tree",
          "content": null
        },
        {
          "name": "Demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-present, PositionBasedDynamics contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0244140625,
          "content": "recursive-include data *\n"
        },
        {
          "name": "PositionBasedDynamics",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.86328125,
          "content": "# PositionBasedDynamics\n\n<p align=center><img src=\"https://github.com/InteractiveComputerGraphics/PositionBasedDynamics/workflows/build-linux/badge.svg\">&nbsp;&nbsp; <img src=\"https://github.com/InteractiveComputerGraphics/PositionBasedDynamics/workflows/build-windows/badge.svg\">&nbsp;&nbsp; <a href='https://positionbaseddynamics.readthedocs.io/en/latest/?badge=latest'><img src='https://readthedocs.org/projects/positionbaseddynamics/badge/?version=latest' alt='Documentation Status' /></a></p>\n\nThis library supports the physically-based simulation of mechanical effects. In the last years position-based simulation methods have become popular in the graphics community. In contrast to classical simulation approaches these methods compute the position changes in each simulation step directly, based on the solution of a quasi-static problem. Therefore, position-based approaches are fast, stable and controllable which make them well-suited for use in interactive environments. However, these methods are generally not as accurate as force-based methods but still provide visual plausibility. Hence, the main application areas of position-based simulation are virtual reality, computer games and special effects in movies and commercials.\n\nThe PositionBasedDynamics library allows the position-based handling of many types of constraints in a physically-based simulation. The library uses [CMake](http://www.cmake.org/), [Eigen](http://eigen.tuxfamily.org/), [json](https://github.com/nlohmann/json/), [pybind](https://github.com/pybind/pybind11), [glfw](https://www.glfw.org/), [hapPLY](https://github.com/nmwsharp/happly) and [imgui](https://github.com/ocornut/imgui) (only for the demos). All external dependencies are included. \n\nFurthermore we use our own library:\n- [Discregrid](https://github.com/InteractiveComputerGraphics/Discregrid/) to generate cubic signed distance fields for the collision detection\n\n\n**Author**: [Jan Bender](http://www.interactive-graphics.de), **License**: MIT\n\n## News\n\n* We added a Python interface: [pyPBD](https://pypi.org/project/pyPBD/)\n* Our new [paper](https://animation.rwth-aachen.de/publication/0557/) about a Direct Position-Based Solver for Stiff Rods uses the PositionBasedDynamics library. You can watch the video  [here](https://www.youtube.com/watch?v=EFH9xt4omls).\n* PBD now has a collision detection based on cubic signed distance fields\n* SPlisHSPlasH is our new open-source fluid simulator which uses the PositionBasedDynamics library to handle rigid-fluid coupling. It can be downloaded here:\n[https://github.com/InteractiveComputerGraphics/SPlisHSPlasH](https://github.com/InteractiveComputerGraphics/SPlisHSPlasH)\n* Our new [paper](http://interactive-graphics.de/index.php/research/98-hierarchical-hp-adaptive-signed-distance-fields) about adaptive signed distance fields uses the PositionBasedDynamics library. You can watch the video  [here](https://www.youtube.com/watch?v=x_Iq2yM4FcA).\n\n## Documentation\n\nThe documentation can be found here: \n\n* [Documentation](https://positionbaseddynamics.readthedocs.io)\n\n## Forum\n\nOn our [GitHub discussions](https://github.com/InteractiveComputerGraphics/PositionBasedDynamics/discussions) page you can ask questions, discuss about simulation topics, and share ideas.\n\n## Build Instructions\n\nThis project is based on [CMake](https://cmake.org/). Simply generate project, Makefiles, etc. using [CMake](https://cmake.org/) and compile the project with the compiler of your choice. The code was tested with the following configurations:\n- Windows 10 64-bit, CMake 3.9.5, Visual Studio 2019\n- Debian 9 64-bit, CMake 3.12.3, GCC 6.3.0.\n\nNote: Please use a 64-bit target on a 64-bit operating system. 32-bit builds on a 64-bit OS are not supported.\n\n## Python Installation Instruction\n\nFor Windows and Linux targets there exists prebuilt python wheel files which can be installed using\n\n```\npip install pypbd\n```\n\nThese are available for different Python Versions. See also here: [pyPBD](https://pypi.org/project/pyPBD/).\nIf you do not meet these conditions please refer to the build instructions and to the python binding \n[Getting started guide](https://positionbaseddynamics.readthedocs.io/en/latest/py_getting_started.html).\n\n## Latest Important Changes\n\n* GUI is now based on [imgui](https://github.com/ocornut/imgui)\n* added support of PLY files\n* added Python binding\n* added some XPBD constraints\n* added OBJ export\n* added substepping\n* added DamperJoint\n* improved implementation of slider and hinge joints/motors\n* Crispin Deul added the implementation of his paper Deul, Kugelstadt, Weiler, Bender, \"Direct Position-Based Solver for Stiff Rods\", Computer Graphics Forum 2018 and a corresponding demo\n* added collision detection for arbitrary meshes based on cubic signed distance fields\n* added implementation of the paper Kugelstadt, Schoemer, \"Position and Orientation Based Cosserat Rods\", SCA 2016\n* removed Boost dependency\n* added SceneGenerator.py to generate new scenarios easily by simple Python scripting\n* added scene loader based on json \n* added collision detection based on distance functions\n* added collision handling for rigid and deformable bodies\n* high resolution visualization mesh can be attached to a deformable body\n* added support for Mac OS X\n* added automatic computation of inertia tensor for arbitrary triangle meshes\n* added OBJ file loader\n* parallelized unified solver using graph coloring\n* implemented unified solver for rigid bodies and deformable solids \n\n\n\n## Features\n\n* Physically-based simulation with (eXtended) position-based constraint handling.\n* Simple interface\n* Demos \n* Library is free even for commercial applications.\n* Collision detection based on cubic signed distance fields\n* Library supports many constraints: \n\t- Elastic rods:\n\t\t- bend-twist constraint\n\t\t- stretch-shear constraint\n\t\t- Cosserat constraint\n\t- Deformable solids:\t\t\n\t\t- point-point distance constraint (PBD & XPBD)\n\t\t- point-edge distance constraint\n\t\t- point-triangle distance constraint\n\t\t- edge-edge distance constraint\n\t\t- dihedral bending constraint\n\t\t- isometric bending constraint (PBD & XPBD)\n\t\t- volume constraint (PBD & XPBD)\n\t\t- shape matching\n\t\t- FEM-based PBD (2D & 3D)\n\t\t- strain-based dynamics (2D & 3D)\n\t- Fluids:\n\t\t- position-based fluids \n\t- Rigid bodies:\n\t\t- contact constraints\n\t\t- ball joint\n\t\t- ball-on-line-joint\n\t\t- hinge joint\n\t\t- target angle motor hinge joint\n\t\t- target velocity motor hinge joint\n\t\t- universal joint\n\t\t- slider joint\n\t\t- target position motor slider joint\n\t\t- target velocity motor slider joint\n\t\t- ball joint between rigid body and particle\n\t\t- distance joint\n\t\t- damper joint\n\t\t- implicit spring\n\t- Generic constraints\n\n## Videos\n\nThe following videos were generated using the PositionBasedDynamics library:\n\n*Hierarchical hp-Adaptive Signed Distance Fields* | *Direct Position-Based Solver for Stiff Rods*\n:---:|:---:\n[![Video](https://img.youtube.com/vi/x_Iq2yM4FcA/0.jpg)](https://www.youtube.com/watch?v=x_Iq2yM4FcA) | [![Video](https://img.youtube.com/vi/EFH9xt4omls/0.jpg)](https://www.youtube.com/watch?v=EFH9xt4omls)\n\n\n## Screenshots\n\n|![](https://raw.githubusercontent.com/InteractiveComputerGraphics/PositionBasedDynamics/master/doc/images/PBD1.jpg)|![](https://raw.githubusercontent.com/InteractiveComputerGraphics/PositionBasedDynamics/master/doc/images/PBD2.jpg)|\n|--|--|\n\n## References\n\n* J. Bender, M. Müller and M. Macklin, \"Position-Based Simulation Methods in Computer Graphics\", In Tutorial Proceedings of Eurographics, 2015\n* J. Bender, D. Koschier, P. Charrier and D. Weber, \"\"Position-based simulation of continuous materials\", Computers & Graphics 44, 2014\n* J. Bender, M. Müller, M. A. Otaduy, M. Teschner and M. Macklin, \"A Survey on Position-Based Simulation Methods in Computer Graphics\", Computer Graphics Forum 33, 6, 2014\n* C. Deul, T. Kugelstadt, M. Weiler, J. Bender, \"Direct Position-Based Solver for Stiff Rods\", Computer Graphics Forum, 2018\n* C. Deul, P. Charrier and J. Bender, \"Position-Based Rigid Body Dynamics\", Computer Animation and Virtual Worlds, 2014\n* D. Koschier, C. Deul, M. Brand and J. Bender, \"An hp-Adaptive Discretization Algorithm for Signed Distance Field Generation\", IEEE Transactions on Visualization and Computer Graphics 23, 2017\n* M. Macklin, M. Müller, N. Chentanez and T.Y. Kim, \"Unified particle physics for real-time applications\", ACM Trans. Graph. 33, 4, 2014\n* M. Müller, N. Chentanez, T.Y. Kim, M. Macklin, \"Strain based dynamics\", In Proceedings of the 2014 ACM\nSIGGRAPH/Eurographics Symposium on Computer Animation, 2014\n* J. Bender, D. Weber and R. Diziol, \"Fast and stable cloth simulation based on multi-resolution shape matching\", Computers & Graphics 37, 8, 2013\n* R. Diziol, J. Bender and D. Bayer, \"Robust Real-Time Deformation of Incompressible Surface Meshes\", In Proceedings of ACM SIGGRAPH / EUROGRAPHICS Symposium on Computer Animation (SCA), 2011\n* M. Müller and N. Chentanez, \"Solid simulation with oriented particles\", ACM Trans. Graph. 30, 4, 2011\n* M. Müller, \"Hierarchical Position Based Dynamics\", In VRIPHYS 08: Fifth Workshop in Virtual Reality Interactions and Physical Simulations, 2008 \n* M. Müller, B. Heidelberger, M. Hennix and J. Ratcliff, \"Position based dynamics\", Journal of Visual Communication and Image Representation 18, 2, 2007\n* M. Müller, B. Heidelberger, M. Teschner and M. Gross, \"Meshless deformations based on shape matching\", ACM Trans. Graph. 24, 3, 2005\n* M. Macklin and M. Müller, \"Position based fluids\", ACM Trans. Graph. 32, 4, 2013\n* Dan Koschier, Crispin Deul and Jan Bender, \"Hierarchical hp-Adaptive Signed Distance Fields\", In Proceedings of ACM SIGGRAPH / EUROGRAPHICS Symposium on Computer Animation (SCA), 2016\n* Tassilo Kugelstadt, Elmar Schoemer, \"Position and Orientation Based Cosserat Rods\", In Proceedings of ACM SIGGRAPH / EUROGRAPHICS Symposium on Computer Animation (SCA), 2016\n* M. Macklin, M. Müller and N. Chentanez, \"XPBD: Position-based Simulation of Compliant Constrained Dynamics\", Proceedings of the 9th International Conference on Motion in Games (MIG), 2016\n\n\n\n"
        },
        {
          "name": "Simulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyPBD",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0634765625,
          "content": "[bdist_wheel]\ndist-dir = build/dist\n\n[egg_info]\negg_base = build/"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.9873046875,
          "content": "import os\nimport re\nimport sys\nimport platform\nimport subprocess\nimport multiprocessing as mp\nimport argparse\n\nfrom setuptools import setup, Extension, find_packages\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\n# Extract cmake arguments\nparser = argparse.ArgumentParser(add_help=False)\nparser.add_argument(\"-D\", action='append', dest='cmake',\n                    help=\"CMake Options\")\nparser.add_argument(\"--manylinux-build\", action='store_true', dest='manylinux_build')\nargs, other_args = parser.parse_known_args(sys.argv)\ncmake_clargs = args.cmake\nsys.argv = other_args\n\n# Project binding name\nname = \"pyPBD\"\ninternal_name = \"pypbd\"\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    def run(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError(\"CMake must be installed to build the following extensions: \" +\n                               \", \".join(e.name for e in self.extensions))\n\n        if platform.system() == \"Windows\":\n            cmake_version = LooseVersion(re.search(r'version\\s*([\\d.]+)', out.decode()).group(1))\n            if cmake_version < '3.1.0':\n                raise RuntimeError(\"CMake >= 3.1.0 is required on Windows\")\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n        bin_dir_windows = os.path.join(os.path.abspath(self.build_temp), \"bin\")\n        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n                      '-DPYTHON_EXECUTABLE=' + sys.executable]\n\n        cfg = 'Debug' if self.debug else 'Release'\n        build_args = ['--config', cfg]\n\n        # Add cmake command line arguments\n        if cmake_clargs is not None:\n            cmake_args += ['-D{}'.format(arg) for arg in cmake_clargs]\n\n        if platform.system() == \"Windows\":\n            cmake_args += ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir),\n                           '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=' + bin_dir_windows,\n                           '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), bin_dir_windows)]\n            if sys.maxsize > 2**32:\n                cmake_args += ['-A', 'x64']\n            build_args += ['--', '/m']\n        else:\n            cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]\n            build_args += ['--', '-j{}'.format(mp.cpu_count())]\n\n        env = os.environ.copy()\n        env['CXXFLAGS'] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(env.get('CXXFLAGS', ''),\n                                                              self.distribution.get_version())\n\n        # Add position independent code flags if using gcc on linux probably\n        if platform.system() == \"Linux\":\n            cmake_args += ['-DCMAKE_CXX_FLAGS=-fPIC', '-DCMAKE_C_FLAGS=-fPIC']\n\n            # Using relative rpath messes up repairing the wheel file. The relative rpath is only necessary when\n            # building locally from source\n            if not args.manylinux_build:\n                cmake_args += ['-DCMAKE_INSTALL_RPATH={}'.format(\"$ORIGIN\"),\n                               '-DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON',\n                               '-DCMAKE_INSTALL_RPATH_USE_LINK_PATH:BOOL=OFF']\n\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n\n        if not args.manylinux_build:\n            subprocess.check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n            subprocess.check_call(['cmake', '--build', '.', '--target', internal_name] + build_args, cwd=self.build_temp)\n        else:\n            subprocess.check_call(['cmake3', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n            subprocess.check_call(['cmake3', '--build', '.', '--target', internal_name] + build_args, cwd=self.build_temp)\n\n\n# Get Readme text for long description\ncur_dir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(cur_dir, \"README.md\"), 'r') as f:\n    long_description = f.read()\n\t\n# read version\t\nf = open(\"version.txt\", \"r\")\npbd_version = f.readline().strip()\nf.close() \n\n# create build directory\nif not os.path.isdir('build'):\n    os.mkdir('build')\n\nsetup(\n    name=name,\n    version=pbd_version,\n    author='Interactive Computer Graphics',\n    author_email='',\n    description='PBD Project Python Bindings',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/InteractiveComputerGraphics/PositionBasedDynamics',\n    license=\"MIT\",\n    keywords=\"simulation rigid-bodies rigid-body-dynamics position-based-dynamics deformable-solids\",\n    ext_modules=[CMakeExtension(name)],\n    cmdclass=dict(build_ext=CMakeBuild),\n    packages=find_packages(),\n    zip_safe=False,\n    install_requires=['numpy', 'pygame', 'pyopengl']\n)\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0048828125,
          "content": "2.2.1"
        }
      ]
    }
  ]
}