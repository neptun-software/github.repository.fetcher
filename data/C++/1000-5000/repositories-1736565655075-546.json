{
  "metadata": {
    "timestamp": 1736565655075,
    "page": 546,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/wil",
      "stars": 2614,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.1669921875,
          "content": "ï»¿---\r\nLanguage: Cpp\r\n# BasedOnStyle: LLVM\r\n\r\nAccessModifierOffset: -4\r\nAlignAfterOpenBracket: AlwaysBreak\r\nAlignConsecutiveAssignments: false\r\nAlignEscapedNewlines: DontAlign\r\nAlignOperands: true\r\nAlignTrailingComments: true\r\nAllowAllParametersOfDeclarationOnNextLine: true\r\nAllowShortBlocksOnASingleLine: false\r\nAllowShortCaseLabelsOnASingleLine: false\r\nAllowShortFunctionsOnASingleLine: None\r\nAllowShortIfStatementsOnASingleLine: false\r\nAllowShortLambdasOnASingleLine: Empty\r\nAllowShortLoopsOnASingleLine: false\r\nAlwaysBreakAfterDefinitionReturnType: None\r\nAlwaysBreakAfterReturnType: None\r\nAlwaysBreakBeforeMultilineStrings: true\r\nAlwaysBreakTemplateDeclarations: true\r\nBinPackArguments: false\r\nBinPackParameters: false\r\nBraceWrapping:\r\n  AfterCaseLabel: true\r\n  AfterClass: true\r\n  AfterControlStatement: true\r\n  AfterEnum: true\r\n  AfterFunction: true\r\n  AfterNamespace: true\r\n  AfterStruct: true\r\n  AfterUnion: true\r\n  AfterExternBlock: true\r\n  BeforeCatch: true\r\n  BeforeElse: true\r\n  SplitEmptyFunction: true\r\n  SplitEmptyRecord: true\r\n  SplitEmptyNamespace: true\r\nBreakBeforeBinaryOperators: None\r\nBreakBeforeBraces: Custom\r\nBreakBeforeTernaryOperators: true\r\nBreakConstructorInitializers: AfterColon\r\nBreakStringLiterals: false\r\nColumnLimit: 130\r\nCommentPragmas: '^ IWYU pragma:'\r\nCompactNamespaces: true\r\nConstructorInitializerAllOnOneLineOrOnePerLine: true\r\nConstructorInitializerIndentWidth: 4\r\nContinuationIndentWidth: 4\r\nCpp11BracedListStyle: true\r\nDerivePointerAlignment: false\r\nDisableFormat: false\r\nFixNamespaceComments: true\r\nForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ]\r\nIncludeBlocks: Regroup\r\nIndentCaseLabels: false\r\nIncludeCategories:\r\n  - Regex: '^\"(stdafx.h|pch.h|precomp.h)\"$'\r\n    Priority: -1\r\nIndentWidth: 4\r\nIndentWrappedFunctionNames: false\r\nKeepEmptyLinesAtTheStartOfBlocks: true\r\nMacroBlockBegin: '^BEGIN_COM_MAP$|^BEGIN_CONNECTION_POINT_MAP$|^BEGIN_HELPER_NODEMAP$|^BEGIN_MODULE$|^BEGIN_MSG_MAP$|^BEGIN_OBJECT_MAP$|^BEGIN_TEST_CLASS$|^BEGIN_TEST_METHOD$|^BEGIN_TEST_METHOD_PROPERTIES$'\r\nMacroBlockEnd: '^END_COM_MAP$|^END_CONNECTION_POINT_MAP$|^END_HELPER_NODEMAP$|^END_MODULE$|^END_MSG_MAP$|^END_OBJECT_MAP$|^END_TEST_CLASS$|^END_TEST_METHOD$|^END_TEST_METHOD_PROPERTIES$'\r\nMaxEmptyLinesToKeep: 1\r\nNamespaceIndentation: Inner\r\nObjCBlockIndentWidth: 2\r\nObjCSpaceAfterProperty: false\r\nObjCSpaceBeforeProtocolList: true\r\nPenaltyBreakBeforeFirstCallParameter: 19\r\nPenaltyBreakComment: 300\r\nPenaltyBreakFirstLessLess: 120\r\nPenaltyBreakString: 2000\r\nPenaltyExcessCharacter: 2\r\nPenaltyReturnTypeOnItsOwnLine: 1000\r\nPointerAlignment: Left\r\nSortIncludes: false\r\nSpaceAfterCStyleCast: false\r\nSpaceBeforeAssignmentOperators: true\r\nSpaceBeforeParens: ControlStatements\r\nSpaceInEmptyParentheses: false\r\nSpacesBeforeTrailingComments: 1\r\nSpacesInAngles: Never\r\nSpacesInContainerLiterals: true\r\nSpacesInCStyleCastParentheses: false\r\nSpacesInParentheses: false\r\nSpacesInSquareBrackets: false\r\nStandard: Latest\r\nTabWidth: 4\r\nUseTab: Never\r\n\r\nAttributeMacros: [\r\n  CALLBACK,\r\n]\r\n\r\nStatementMacros: [\r\n  _Acquires_exclusive_lock_,\r\n  _Acquires_lock_,\r\n  _Acquires_nonreentrant_lock_,\r\n  _Acquires_shared_lock_,\r\n  _Analysis_assume_smart_lock_acquired_,\r\n  _Analysis_assume_smart_lock_released_,\r\n  _Create_lock_level_,\r\n  _Detaches_lock_,\r\n  _Function_class_,\r\n  _Global_cancel_spin_lock_,\r\n  _Global_critical_region_,\r\n  _Global_interlock_,\r\n  _Global_priority_region_,\r\n  _Has_lock_kind_,\r\n  _Has_lock_level_,\r\n  _IRQL_always_function_max_,\r\n  _IRQL_always_function_min_,\r\n  _IRQL_raises_,\r\n  _IRQL_requires_,\r\n  _IRQL_requires_max_,\r\n  _IRQL_requires_min_,\r\n  _IRQL_requires_same_,\r\n  _IRQL_restores_,\r\n  _IRQL_restores_global_,\r\n  _IRQL_saves_,\r\n  _IRQL_saves_global_,\r\n  _Lock_level_order_,\r\n  _Moves_lock_,\r\n  _Must_inspect_result_,\r\n  _No_competing_thread_,\r\n  _Post_same_lock_,\r\n  _Post_writable_byte_size_,\r\n  _Pre_satisfies_,\r\n  _Releases_exclusive_lock_,\r\n  _Releases_lock_,\r\n  _Releases_nonreentrant_lock_,\r\n  _Releases_shared_lock_,\r\n  _Replaces_lock_,\r\n  _Requires_exclusive_lock_held_,\r\n  _Requires_lock_held_,\r\n  _Requires_lock_not_held_,\r\n  _Requires_no_locks_held_,\r\n  _Requires_shared_lock_held_,\r\n  _Ret_maybenull_,\r\n  _Ret_range_,\r\n  _Struct_size_bytes_,\r\n  _Success_,\r\n  _Swaps_locks_,\r\n  _Use_decl_annotations_,\r\n  _When_,\r\n\r\n  DECLARE_ORDINAL_MAP,\r\n  DECLARE_PROCNAME_MAP,\r\n  DEFINE_ORDINAL_ENTRIES,\r\n  DEFINE_ORDINAL_ENTRIES_ALTNAME,\r\n  DEFINE_ORDINAL_ENTRIES_APISET,\r\n  DEFINE_ORDINAL_MAP,\r\n  DEFINE_PROCNAME_ENTRIES,\r\n  DEFINE_PROCNAME_ENTRIES_ALTNAME,\r\n  DEFINE_PROCNAME_ENTRIES_APISET,\r\n  DEFINE_PROCNAME_MAP,\r\n  DLOENTRY,\r\n  DLOENTRY_APISET,\r\n  DLPENTRY,\r\n  DLPENTRY_APISET,\r\n\r\n  RpcEndExcept,\r\n\r\n  ActivatableClass,\r\n  ActivatableClassWithFactory,\r\n  ActivatableClassWithFactoryEx,\r\n  ActivatableStaticOnlyFactory,\r\n  ActivatableStaticOnlyFactoryEx,\r\n  CoCreatableClass,\r\n  CoCreatableClassWithFactory,\r\n  CoCreatableClassWithFactoryEx,\r\n\r\n  # Additional definitions for the WIL repo\r\n  _Translates_NTSTATUS_to_HRESULT_,\r\n  _Translates_Win32_to_HRESULT_,\r\n  _Translates_last_error_to_HRESULT_,\r\n\r\n  TEST_CASE,\r\n  SECTION,\r\n]\r\n\r\nTypenameMacros: [\r\n  IFACEMETHOD,\r\n  STDMETHOD,\r\n  STDAPI_,\r\n]\r\n\r\n# Additional definitions for the WIL repo\r\nWhitespaceSensitiveMacros: [\r\n  __WI_CLANG_DISABLE_WARNING,\r\n]\r\n\r\n# TODO: Only supported by clang-format version 17+\r\n# Macros:\r\n# - WI_NOEXCEPT=noexcept\r\n# - __R_FN_PARAMS_FULL=int x\r\n# - RESULT_NORETURN=[[noreturn]]\r\n---\r\nLanguage: CSharp\r\nAlignAfterOpenBracket: AlwaysBreak\r\nAllowShortBlocksOnASingleLine: false\r\nAllowShortCaseLabelsOnASingleLine: false\r\nAllowShortFunctionsOnASingleLine: None\r\nAllowShortIfStatementsOnASingleLine: false\r\nAllowShortLoopsOnASingleLine: false\r\nBraceWrapping:\r\n  AfterCaseLabel: true\r\n  AfterClass: true\r\n  AfterControlStatement: true\r\n  AfterEnum: true\r\n  AfterFunction: true\r\n  AfterNamespace: true\r\n  AfterStruct: true\r\n  BeforeCatch: true\r\n  BeforeElse: true\r\n  SplitEmptyFunction: true\r\n  SplitEmptyRecord: true\r\n  SplitEmptyNamespace: true\r\nBreakBeforeBraces: Custom\r\nColumnLimit: 130\r\nDerivePointerAlignment: false\r\nIndentWidth: 4\r\nPenaltyBreakBeforeFirstCallParameter: 19\r\nPenaltyBreakComment: 300\r\nPenaltyBreakFirstLessLess: 120\r\nPenaltyBreakString: 2000\r\nPenaltyExcessCharacter: 2\r\nPenaltyReturnTypeOnItsOwnLine: 1000\r\nPointerAlignment: Left\r\nTabWidth: 4\r\nUseTab: Never\r\n...\r\n\r\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0595703125,
          "content": "# Disable CRLF-mapping for all files in the depot.\r\n* -text\r\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.5166015625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Visual Studio Code directory\n.vscode/\n\n# CMake/Build output\nbuild/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.5,
          "content": "cmake_minimum_required(VERSION 3.15)\r\nproject(WIL)\r\n\r\ninclude(GNUInstallDirs)\r\n\r\n# Set by build server to speed up build/reduce file/object size\r\noption(FAST_BUILD \"Sets options to speed up build/reduce obj/executable size\" OFF)\r\noption(WIL_BUILD_PACKAGING \"Sets option to build the packaging, default on\" ON)\r\noption(WIL_BUILD_TESTS \"Sets option to build the unit tests, default on\" ON)\r\n\r\nif (NOT DEFINED WIL_BUILD_VERSION)\r\n    set(WIL_BUILD_VERSION \"0.0.0\")\r\nendif()\r\n\r\nif (NOT DEFINED CPPWINRT_VERSION)\r\n    set(CPPWINRT_VERSION \"2.0.240405.15\")\r\nendif()\r\n\r\n# Detect the Windows SDK version. If we're using the Visual Studio generator, this will be provided for us. Otherwise\r\n# we'll need to assume that this value comes from the command line (e.g. through the VS command prompt)\r\nif (DEFINED CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)\r\n    set(WIL_WINDOWS_SDK_VERSION ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION})\r\nelse()\r\n    # This has a trailing backslash for whatever reason...\r\n    string(REGEX REPLACE \"\\\\\\\\$\" \"\" WIL_WINDOWS_SDK_VERSION \"$ENV{WindowsSDKVersion}\")\r\nendif()\r\n\r\nif (${WIL_BUILD_PACKAGING})\r\n    add_subdirectory(packaging)\r\nendif()\r\n\r\nif (${WIL_BUILD_TESTS})\r\n    add_subdirectory(docs)\r\n    add_subdirectory(tests)\r\n\r\n    # Custom target for running clang-format\r\n    add_custom_target(format\r\n        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\r\n        COMMAND scripts/run-clang-format.cmd)\r\nendif()\r\n\r\n# Gather headers into an interface library.\r\nfile(GLOB_RECURSE HEADER_FILES \"${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME}/*.h\")\r\nadd_library(${PROJECT_NAME} INTERFACE)\r\nadd_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})\r\n\r\n# The interface's include directory.\r\ntarget_include_directories(${PROJECT_NAME} INTERFACE\r\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\r\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\r\n)\r\n\r\n# Include the .natvis files\r\nif (MSVC)\r\n    target_sources(${PROJECT_NAME} INTERFACE\r\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/natvis/wil.natvis>\")\r\nendif()\r\n\r\n# Install Package Configuration\r\nstring(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)\r\ninstall(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME_LOWER}_targets)\r\ninstall(EXPORT ${PROJECT_NAME_LOWER}_targets\r\n    NAMESPACE ${PROJECT_NAME}::\r\n    FILE ${PROJECT_NAME_LOWER}Config.cmake\r\n    DESTINATION \"${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}\"\r\n)\r\n\r\n# Install the headers at a standard cmake location.\r\ninstall(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/include/wil\" DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.328125,
          "content": "This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.134765625,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.7177734375,
          "content": "# Windows Implementation Libraries (WIL)\n\n[![Build Status](https://dev.azure.com/msft-wil/Windows%20Implementation%20Library/_apis/build/status/Microsoft.wil?branchName=master)](https://dev.azure.com/msft-wil/Windows%20Implementation%20Library/_build/latest?definitionId=1&branchName=master)\n\nThe Windows Implementation Libraries (WIL) is a header-only C++ library created to make life easier\nfor developers on Windows through readable type-safe C++ interfaces for common Windows coding patterns.\n\nSome things that WIL includes to whet your appetite:\n\n- [`include/wil/resource.h`](include/wil/resource.h)\n  ([documentation](https://github.com/Microsoft/wil/wiki/RAII-resource-wrappers)):\n  Smart pointers and auto-releasing resource wrappers to let you manage Windows\n  API HANDLEs, HWNDs, and other resources and resource handles with\n  [RAII](https://en.cppreference.com/w/cpp/language/raii) semantics.\n- [`include/wil/win32_helpers.h`](include/wil/win32_helpers.h)\n  ([documentation](https://github.com/microsoft/wil/wiki/Win32-helpers)): Wrappers for API functions\n  that save you the work of manually specifying buffer sizes, calling a function twice\n  to get the needed buffer size and then allocate and pass the right-size buffer,\n  casting or converting between types, and so on.\n- [`include/wil/registry.h`](include/wil/registry.h) ([documentation](https://github.com/microsoft/wil/wiki/Registry-Helpers)): Type-safe functions to read from, write to,\n  and watch the registry. Also, registry watchers that can call a lambda function or a callback function\n  you provide whenever a certain tree within the Windows registry changes.\n- [`include/wil/result.h`](include/wil/result.h)\n  ([documentation](https://github.com/Microsoft/wil/wiki/Error-handling-helpers)):\n  Preprocessor macros to help you check for errors from Windows API functions,\n  in many of the myriad ways those errors are reported, and surface them as\n  error codes or C++ exceptions in your code.\n- [`include/wil/Tracelogging.h`](include/wil/Tracelogging.h): This file contains the convenience macros\n  that enable developers define and log telemetry. These macros use\n  [`TraceLogging API`](https://docs.microsoft.com/en-us/windows/win32/tracelogging/trace-logging-portal)\n  to log data. This data can be viewed in tools such as\n  [`Windows Performance Analyzer`](https://docs.microsoft.com/en-us/windows-hardware/test/wpt/windows-performance-analyzer).\n\nWIL can be used by C++ code that uses C++ exceptions as well as code that uses returned\nerror codes to report errors. All of WIL can be used from user-space Windows code,\nand some (such as the RAII resource wrappers) can even be used in kernel mode.\n\n# Documentation\n\nThis project is documented in [its GitHub wiki](https://github.com/Microsoft/wil/wiki). Feel free to contribute to it!\n\n# Consuming WIL\nWIL follows the \"live at head\" philosophy, so you should feel free to consume WIL directly from the GitHub repo however you please: as a GIT submodule, symbolic link, download and copy files, etc. and update to the latest version at your own cadence. Alternatively, WIL is available using a few package managers, mentioned below. These packages will be updated periodically, likely to average around once or twice per month.\n\n## Consuming WIL via NuGet\nWIL is available on nuget.org under the name [Microsoft.Windows.ImplementationLibrary](https://www.nuget.org/packages/Microsoft.Windows.ImplementationLibrary/). This package includes the header files under the [include](include) directory as well as a [.targets](packaging/nuget/Microsoft.Windows.ImplementationLibrary.targets) file.\n\n## Consuming WIL via vcpkg\nWIL is also available using [vcpkg](https://github.com/microsoft/vcpkg) under the name [wil](https://github.com/microsoft/vcpkg/blob/master/ports/wil/portfile.cmake). Instructions for installing packages can be found in the [vcpkg GitHub docs](https://github.com/microsoft/vcpkg/blob/master/docs/examples/installing-and-using-packages.md). In general, once vcpkg is set up on the system, you can run:\n```cmd\nC:\\vcpkg> vcpkg install wil:x86-windows\nC:\\vcpkg> vcpkg install wil:x64-windows\n```\nNote that even though WIL is a header-only library, you still need to install the package for all architectures/platforms you wish to use it with. Otherwise, WIL won't be added to the include path for the missing architectures/platforms. Execute `vcpkg help triplet` for a list of available options.\n\n# Building/Testing\n\n## Prerequisites\n\nTo get started contributing to WIL, first make sure that you have:\n\n* The latest version of [Visual Studio](https://visualstudio.microsoft.com/downloads/) or Build Tools for Visual Studio with the latest MSVC C++ build tools and Address Sanitizer components included.\n* The most recent [Windows SDK](https://developer.microsoft.com/windows/downloads/windows-sdk)\n* [Nuget](https://www.nuget.org/downloads) downloaded and added to `PATH`\n  * (`winget install nuget`; see [Install NuGet client tools](https://learn.microsoft.com/nuget/install-nuget-client-tools))\n* [vcpkg](https://vcpkg.io) available on your system.\nFollow their [getting started](https://vcpkg.io/en/getting-started) guide to get set up.\nYou'll need to provide the path to vcpkg when initializing with CMake by passing `-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake`.\nNote that if you use the `init.cmd` script (mentioned below), this path can be specified or auto-detected if you:\n  1. Manually specify the path to the root of your vcpkg clone via the `-p` or `--vcpkg` argument,\n  1. Have the `VCPKG_ROOT` environment variable set to the root of your vcpkg clone.\n  You can use the `setx` command to have this variable persist across shell sessions,\n  1. Have the path to the root of your vcpkg clone added to your `PATH` (i.e. the path to `vcpkg.exe`), or\n  1. If your vcpkg clone is located at the root of the same drive as your WIL clone (e.g. `C:\\vcpkg` if your WIL clone is on the `C:` drive)\n\nIf you are doing any non-trivial work, also be sure to have:\n\n* A recent version of [Clang](http://releases.llvm.org/download.html)\n  * (`winget install -i llvm.llvm` and select `Add LLVM to the system path for all users`)\n\n## Initial configuration\n\nOnce everything is installed (you'll need to restart Terminal if you updated `PATH` and don't have [this 2023 fix](https://github.com/microsoft/terminal/pull/14999)), open a VS native command window (e.g. `x64 Native Tools Command Prompt for VS 2022` \\[_not_ `Developer Command Prompt for VS2022`]).\n\n* If you are familiar with CMake you can get started building normally.\n* Otherwise, or if you prefer to skip all of the boilerplate, you can use the `init.cmd` script in the [scripts](scripts) directory.\nFor example:\n  ```cmd\n  C:\\wil> scripts\\init.cmd -c clang -g ninja -b debug\n  ```\n  You can execute `init.cmd --help` for a summary of available options.\n  The `scripts/init_all.cmd` script will run the `init.cmd` script for all combinations of Clang/MSVC and Debug/RelWithDebInfo.\n  Note that for either script, projects will only be generated for the architecture of the current VS command window.\n\nTo set up Visual Studio with IntelliSense, see below.\nIf you used the `init.cmd` script, the corresponding build output directory should contain a `compile_commands.json` file that describes the commands used to compile each input file.\nSome editors such as Visual Studio Code can be configured to use this file to provide better auto-complete, tooltips, etc.\nVisual Studio Code, in particular should auto-detect the presence of this file and prompt you to use it for better IntelliSense.\nIf you are not auto-prompted, this can be manually configured in the workspace's C/C++ properties under the property name `compileCommands`.\n\n### Visual Studio setup\n\nTo generate a Visual Studio solution with IntelliSense:\n```cmd\nC:\\wil> scripts\\init.cmd -c msvc -g msbuild\n```\n\nThat will create a `.sln` file in the corresponding `build/` subdirectory (e.g. `build/msvc64debug`).\nYou can open this solution in Visual Studio to develop and build, or you can invoke MSBuild directly.\n\n> **Important!** When using MSVC as the generator, the build type (`-b` argument to `init.cmd`) is mostly ignored by Visual Studio (since you can change the build type in the IDE), however this selection may still have an impact on project generation due to logic in the CMake files.\n\nYou can also get decent IntelliSense just by opening the repo directory in Visual Studio; VS should auto-detect CMake. You'll have to compile and run tests in a terminal window, though.\n\n## Inner loop\n\nThe scripts use a common directory pattern of `build/$(compiler)$(arch)$(type)` for the build output root. E.g. `build/clang64debug` when using Clang as the compiler, x64 as the architecture, and Debug as the build type. It is this directory where you will want to build from.\n\nFor example, if you initialized using the command above (`scripts\\init.cmd -c clang -g ninja -b debug`), you can build the tests like so:\n```cmd\nC:\\wil\\build\\clang64debug> ninja\n```\nOr, if you want to only build a single test (e.g. for improved compile times):\n```cmd\nC:\\wil\\build\\clang64debug> ninja witest.noexcept\n```\n\nThe output is a number of test executables. If you used the initialization script(s) mentioned above, or if you followed\nthe same directory naming convention of those scripts, you can use the [runtests.cmd](scripts/runtests.cmd) script,\nwhich will execute any test executables that have been built, erroring out - and preserving the exit code - if any test\nfails. Note that MSBuild will modify the output directory names, so this script is only compatible with using Ninja as the\ngenerator.\n\n## Build everything\n\nIf you are at the tail end of of a change, you can execute the following to get a wide range of coverage:\n```cmd\nC:\\wil> scripts\\init_all.cmd\nC:\\wil> scripts\\build_all.cmd\nC:\\wil> scripts\\runtests.cmd\n```\nNote that this will only test for the architecture that corresponds to the command window you opened. You will want to\nrepeat this process for the other architecture (e.g. by using the `x86 Native Tools Command Prompt for VS 2022` in addition to `x64`).\n\n## Formatting\n\nThis project has adopted `clang-format` as the tool for formatting our code.\nPlease note that the `.clang-format` at the root of the repo is a copy from the internal Windows repo with few additions.\nIn general, please do not modify it.\nIf you find that a macro is causing bad formatting of code, you can add that macro to one of the corresponding arrays in the `.clang-format` file (e.g. `AttributeMacros`, etc.), format the code, and submit a PR.\n\n> _NOTE: Different versions of `clang-format` may format the same code differently.\nIn an attempt to maintain consistency between changes, we've standardized on using the version of `clang-format` that ships with the latest version of Visual Studio.\nIf you have LLVM installed and added to your `PATH`, the version of `clang-format` that gets picked up by default may not be the one we expect.\nIf you leverage the formatting scripts we have provided in the `scripts` directory, these should automatically pick up the proper version provided you are using a Visual Studio command window._\n\nBefore submitting a PR to the WIL repo we ask that you first run `clang-format` on your changes.\nThere is a CI check in place that will fail the build for your PR if you have not run `clang-format`.\nThere are a few different ways to format your code:\n\n### 1. Formatting with `git clang-format`\n\n> **Important!** Git integration with `clang-format` is only available through the LLVM distribution.\nYou can install LLVM through their [GibHub releases page](https://github.com/llvm/llvm-project/releases), via `winget install llvm.llvm`, or through the package manager of your choice.\n\n> **Important!** The use of `git clang-format` additionally requires Python to be installed and available on your `PATH`.\n\nThe simplest way to format just your changes is to use `clang-format`'s `git` integration.\nYou have the option to do this continuously as you make changes, or at the very end when you're ready to submit a PR.\nTo format code continuously as you make changes, you run `git clang-format` after staging your changes.\nFor example:\n```cmd\nC:\\wil> git add *\nC:\\wil> git clang-format --style file\n```\nAt this point, the formatted changes will be unstaged.\nYou can review them, stage them, and then commit.\nPlease note that this will use whichever version of `clang-format` is configured to run with this command.\nYou can pass `--binary <path>` to specify the path to `clang-format.exe` you would like the command to use.\n\nIf you'd like to format changes at the end of development, you can run `git clang-format` against a specific commit/label.\nThe simplest is to run against `upstream/master` or `origin/master` depending on whether or not you are developing in a fork.\nPlease note that you likely want to sync/merge with the master branch prior to doing this step.\nYou can leverage the `format-changes.cmd` script we provide, which will use the version of `clang-format` that ships with Visual Studio:\n```cmd\nC:\\wil> git fetch upstream\nC:\\wil> git merge upstream/master\nC:\\wil> scripts\\format-changes.cmd upstream/master\n```\n\n### 2. Formatting with `clang-format`\n\n> **Important!** The path to `clang-format.exe` is not added to `PATH` automatically, even when using a Visual Studio command window.\nThe LLVM installer has the option to add itself to the system or user `PATH` if you'd like.\nIf you would like the path to the version of `clang-format` that ships with Visual Studio added to your path, you will need to do so manually.\nOtherwise, the `run-clang-format.cmd` script mentioned below (or, equivalently, building the `format` target) will manually invoke the `clang-format.exe` under your Visual Studio install path.\n\nAn alternative, and generally easier option, is to run `clang-format` either on all source files or on all source files you've modified.\nNote, however, that depending on how `clang-format` is invoked, the version used may not be the one that ships with Visual Studio.\nSome tools such as Visual Studio Code allow you to specify the path to the version of `clang-format` that you wish to use when formatting code, however this is not always the case.\nThe `run-clang-format.cmd` script we provide will ensure that the version of `clang-format` used is the version that shipped with your Visual Studio install:\n```cmd\nC:\\wil> scripts\\run-clang-format.cmd\n```\nAdditionally, we've added a build target that will invoke this script, named `format`:\n```cmd\nC:\\wil\\build\\clang64debug> ninja format\n```\nPlease note that this all assumes that your Visual Studio installation is up to date.\nIf it's out of date, code unrelated to your changes may get formatted unexpectedly.\nIf that's the case, you may need to manually revert some modifications that are unrelated to your changes.\n\n> _NOTE: Occasionally, Visual Studio will update without us knowing and the version installed for you may be newer than the version installed the last time we ran the format all script. If that's the case, please let us know so that we can re-format the code._\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "ThirdPartyNotices.txt",
          "type": "blob",
          "size": 4.1484375,
          "content": "THIRD PARTY SOFTWARE NOTICES AND INFORMATION\r\nDo Not Translate or Localize\r\n\r\nThis software incorporates material from third parties. Microsoft makes certain open source code available at http://3rdpartysource.microsoft.com, or you may send a check or money order for US $5.00, including the product name, the open source component name, and version number, to:\r\n\r\nSource Code Compliance Team\r\nMicrosoft Corporation\r\nOne Microsoft Way\r\nRedmond, WA 98052\r\nUSA\r\n\r\nNotwithstanding any other terms, you may reverse engineer this software to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License.\r\n\r\nLibc++\r\n\r\nCopyright (c) 2009-2014 by the contributors listed in CREDITS.TXT\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\nCatch2\r\n\r\nBoost Software License - Version 1.0 - August 17th, 2003\r\n\r\nPermission is hereby granted, free of charge, to any person or organization\r\nobtaining a copy of the software and accompanying documentation covered by\r\nthis license (the \"Software\") to use, reproduce, display, distribute,\r\nexecute, and transmit the Software, and to prepare derivative works of the\r\nSoftware, and to permit third-parties to whom the Software is furnished to\r\ndo so, all subject to the following:\r\n\r\nThe copyright notices in the Software and this entire statement, including\r\nthe above license grant, this restriction and the following disclaimer,\r\nmust be included in all copies of the Software, in whole or in part, and\r\nall derivative works of the Software, unless such copies or derivative\r\nworks are solely in the form of machine-executable object code generated by\r\na source language processor.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\r\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\r\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\nDEALINGS IN THE SOFTWARE.\r\n\r\nDetours\r\n\r\nCopyright (c) Microsoft Corporation.\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "natvis",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg-configuration.json",
          "type": "blob",
          "size": 0.1806640625,
          "content": "{\n  \"registries\": [\n    {\n      \"kind\": \"artifact\",\n      \"location\": \"https://github.com/microsoft/vcpkg-ce-catalog/archive/refs/heads/main.zip\",\n      \"name\": \"microsoft\"\n    }\n  ]\n}\n"
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.119140625,
          "content": "{\n  \"dependencies\": [\n    \"detours\",\n    \"catch2\"\n  ],\n  \"builtin-baseline\": \"64e15f6669480b2d2bff1e5e815c571a8213421e\"\n}\n"
        }
      ]
    }
  ]
}