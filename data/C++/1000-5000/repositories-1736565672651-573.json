{
  "metadata": {
    "timestamp": 1736565672651,
    "page": 573,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "STEllAR-GROUP/hpx",
      "stars": 2556,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.7021484375,
          "content": "# Copyright (c) 2016 Thomas Heller\n# Copyright (c) 2016-2018 Hartmut Kaiser\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n# This .clang-format file is a suggested configuration file for formatting\n# source code for the HPX project.\n#\n# Here are a couple of guidelines of how to use this file.\n#\n# - You should use this file for creating an initial formatting for new files.\n#\n# - Please separate edits which are pure formatting into isolated commits\n#   keeping those distinct from edits changing any of the code.\n#\n# - Please do _not_ configure your editor to automatically format the source\n#   file while saving edits to disk\n# - Please do _not_ reformat a full source file without dire need.\n\n# PLEASE NOTE: This file requires clang-format V11.0\n\n---\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n    AfterCaseLabel: true\n    AfterClass: true\n    AfterControlStatement: true\n    AfterEnum: true\n    AfterFunction: true\n    AfterNamespace: false\n    AfterStruct: true\n    AfterUnion: true\n    BeforeCatch: true\n    BeforeElse: true\n    IndentBraces: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: true\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: true\nBreakStringLiterals: true\nColumnLimit: 80\nCommentPragmas: \"///\"\nCompactNamespaces: true\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\n#ExperimentalAutoDetectBinPacking: true # Do weird reformatting\nFixNamespaceComments: true\n# ForEachMacros: ['']\nIncludeCategories:\n  - Regex:           '^<hpx/config\\.hpp>'\n    Priority:        1\n  - Regex:           '^<hpx/config/.*\\.hpp>'\n    Priority:        2\n  - Regex:           '^<hpx/.*/config\\.hpp>'\n    Priority:        3\n  - Regex:           '^<hpx/.*/config/defines\\.hpp>'\n    Priority:        4\n  - Regex:           '^<hpx/.*\\.hpp>'\n    Priority:        5\n  - Regex:           '^<hpx/parallel/.*\\.hpp>'\n    Priority:        6\n  - Regex:           '^<.*'\n    Priority:        7\n  - Regex:           '.*'\n    Priority:        8\n# IncludeIsMainRegex: ''\nIndentCaseLabels: false\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nLanguage: Cpp\n# MacroBlockBegin: ''\n# MacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments: false\nSortIncludes:    true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 4\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp11\nTabWidth: 4\nUseTab: Never\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.916015625,
          "content": "# Copyright (c) 2019 Thomas Heller\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\nChecks: >\n    -*,\n    bugprone-*,\n    -bugprone-assert-side-effect,\n    -bugprone-exception-escape,\n    -bugprone-forward-declaration-namespace,\n    -bugprone-macro-parentheses,\n    -bugprone-branch-clone,\n    modernize-use-nullptr,\n    misc-assert-side-effect\n    misc-dangling-handle\n    misc-forwarding-reference-overload\n    misc-move-constructor-init\n    misc-move-forwarding-reference\n    misc-multiple-statement-macro\n    misc-non-copyable-objects\n    misc-use-after-move\n    misc-virtual-near-miss\nWarningsAsErrors: '*'\nHeaderFilterRegex: '.*hpx.*'\nCheckOptions:\n  - key: bugprone-assert-side-effect.CheckFunctionCalls\n    value: 1\n  - key: bugprone-assert-side-effect.AssertMacros\n    value: 'HPX_ASSERT'\n"
        },
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 29.3701171875,
          "content": "# Copyright (c) 2020-2023 Hartmut Kaiser\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n# This cmake-format configuration file is a suggested configuration file for\n# formatting CMake files for the HPX project.\n\n# PLEASE NOTE: This file has been created and tested with cmake-format V0.6.10\n\n# -----------------------------\n# Options affecting formatting.\n# -----------------------------\nwith section(\"format\"):\n\n  # If true, separate function names from parentheses with a space\n  separate_fn_name_with_space = False\n\n  # Format command names consistently as 'lower' or 'upper' case\n  command_case = u'lower'\n\n  # If the statement spelling length (including space and parenthesis) is\n  # larger\n  # than the tab width by more than this amount, then force reject un-nested\n  # layouts.\n  max_prefix_chars = 10\n\n  # If the trailing parenthesis must be 'dangled' on its own line, then align\n  # it\n  # to this reference: `prefix`: the start of the statement, `prefix-indent`:\n  # the start of the statement, plus one indentation level, `child`: align to\n  # the column of the arguments\n  dangle_align = u'prefix'\n\n  # If an argument group contains more than this many sub-groups (parg or kwarg\n  # groups) then force it to a vertical layout.\n  max_subgroups_hwrap = 2\n\n  # If the statement spelling length (including space and parenthesis) is\n  # smaller than this amount, then force reject nested layouts.\n  min_prefix_chars = 4\n\n  # If a positional argument group contains more than this many arguments, then\n  # force it to a vertical layout.\n  max_pargs_hwrap = 6\n\n  # If a candidate layout is wrapped horizontally but it exceeds this many\n  # lines, then reject the layout.\n  max_lines_hwrap = 2\n\n  # If true, the parsers may infer whether or not an argument list is sortable\n  # (without annotation).\n  autosort = False\n\n  # What style line endings to use in the output.\n  line_ending = u'auto'\n\n  # How wide to allow formatted cmake files\n  line_width = 80\n\n  # If a statement is wrapped to more than one line, than dangle the closing\n  # parenthesis on its own line.\n  dangle_parens = True\n\n  # How many spaces to tab for indent\n  tab_size = 2\n\n  # A list of command names which should always be wrapped\n  always_wrap = []\n\n  # If true, separate flow control names from their parentheses with a space\n  separate_ctrl_name_with_space = False\n\n  # If a cmdline positional group consumes more than this many lines without\n  # nesting, then invalidate the layout (and nest)\n  max_rows_cmdline = 2\n\n  # By default, if cmake-format cannot successfully fit everything into the\n  # desired linewidth it will apply the last, most aggressive attempt that it\n  # made.  If this flag is True, however, cmake-format will print error, exit\n  # with non-zero status code, and write-out nothing\n  require_valid_layout = False\n\n  # Format keywords consistently as 'lower' or 'upper' case\n  keyword_case = u'unchanged'\n\n  # If true, the argument lists which are known to be sortable will be sorted\n  # lexicographicall\n  enable_sort = True\n\n  # A dictionary mapping layout nodes to a list of wrap decisions.  See the\n  # documentation for more information.\n  layout_passes = {}\n\n# ------------------------------------------------\n# Options affecting comment reflow and formatting.\n# ------------------------------------------------\nwith section(\"markup\"):\n\n  # If comment markup is enabled, don't reflow any comment block which matches\n  # this (regex) pattern.  Default is `None` (disabled).\n  literal_comment_pattern = None\n\n  # If a comment line starts with at least this many consecutive hash\n  # characters, then don't lstrip() them off.  This allows for lazy hash rulers\n  # where the first hash char is not separated by space\n  hashruler_min_length = 10\n\n  # Regular expression to match preformat fences in comments default=\n  # ``r'^\\s*([`~]{3}[`~]*)(.*)$'``\n  fence_pattern = u'^\\\\s*([`~]{3}[`~]*)(.*)$'\n\n  # If true, then insert a space between the first hash char and remaining hash\n  # chars in a hash ruler, and normalize its length to fill the column\n  canonicalize_hashrulers = True\n\n  # If a comment line matches starts with this pattern then it is explicitly a\n  # trailing comment for the preceding argument.  Default is '#<'\n  explicit_trailing_pattern = u'#<'\n\n  # If comment markup is enabled, don't reflow the first comment block in each\n  # listfile.  Use this to preserve formatting of your copyright/license\n  # statements.\n  first_comment_is_literal = True\n\n  # enable comment markup parsing and reflow\n  enable_markup = True\n\n  # Regular expression to match rulers in comments default=\n  # ``r'^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$'``\n  ruler_pattern = u'^\\\\s*[^\\\\w\\\\s]{3}.*[^\\\\w\\\\s]{3}$'\n\n  # What character to use as punctuation after numerals in an enumerated list\n  enum_char = u'.'\n\n  # What character to use for bulleted lists\n  bullet_char = u'*'\n\n# ----------------------------\n# Options affecting the linter\n# ----------------------------\nwith section(\"lint\"):\n\n  # regular expression pattern describing valid function names\n  function_pattern = u'[0-9a-z_]+'\n\n  # regular expression pattern describing valid names for function/macro\n  # arguments and loop variables.\n  argument_var_pattern = u'[a-z][a-z0-9_]+'\n\n  # a list of lint codes to disable\n  disabled_codes = []\n\n  # Require at least this many newlines between statements\n  min_statement_spacing = 1\n\n  # regular expression pattern describing valid macro names\n  macro_pattern = u'[0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for public directory\n  # variables\n  public_var_pattern = u'[A-Z][0-9A-Z_]+'\n  max_statements = 50\n\n  # In the heuristic for C0201, how many conditionals to match within a loop in\n  # before considering the loop a parser.\n  max_conditionals_custom_parser = 2\n\n  # regular expression pattern describing valid names for variables with global\n  # (cache) scope\n  global_var_pattern = u'[A-Z][0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for keywords used in\n  # functions or macros\n  keyword_pattern = u'[A-Z][0-9A-Z_]+'\n  max_arguments = 5\n\n  # regular expression pattern describing valid names for privatedirectory\n  # variables\n  private_var_pattern = u'_[0-9a-z_]+'\n  max_localvars = 15\n  max_branches = 12\n\n  # regular expression pattern describing valid names for variables with local\n  # scope\n  local_var_pattern = u'[a-z][a-z0-9_]+'\n\n  # Require no more than this many newlines between statements\n  max_statement_spacing = 2\n\n  # regular expression pattern describing valid names for variables with global\n  # scope (but internal semantic)\n  internal_var_pattern = u'_[A-Z][0-9A-Z_]+'\n  max_returns = 6\n\n# -------------------------------------\n# Miscellaneous configurations options.\n# -------------------------------------\nwith section(\"misc\"):\n\n  # A dictionary containing any per-command configuration overrides.  Currently\n  # only `command_case` is supported.\n  per_command = { }\n\n# ----------------------------------\n# Options affecting listfile parsing\n# ----------------------------------\nwith section(\"parse\"):\n\n  # Specify structure for custom cmake functions\n  # (the body of this structure was generated using\n  #     'cmake-genparsers -f python cmake/HPX*.cmake'\n  #\n  additional_commands = {\n   'add_hpx_compile_test': { 'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '2+'}},\n    'add_hpx_compile_test_target_dependencies': {\n                              'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '2+'}},\n    'add_hpx_component': { 'kwargs': { 'AUXILIARY': '+',\n                                       'COMPILE_FLAGS': '+',\n                                       'COMPONENT_DEPENDENCIES': '+',\n                                       'DEPENDENCIES': '+',\n                                       'FOLDER': 1,\n                                       'HEADERS': '+',\n                                       'HEADER_GLOB': 1,\n                                       'HEADER_ROOT': 1,\n                                       'INI': 1,\n                                       'INSTALL_SUFFIX': 1,\n                                       'INSTALL_COMPONENT': 1,\n                                       'LANGUAGE': 1,\n                                       'LINK_FLAGS': '+',\n                                       'OUTPUT_SUFFIX': 1,\n                                       'SOURCES': '+',\n                                       'SOURCE_GLOB': 1,\n                                       'SOURCE_ROOT': 1},\n                           'pargs': { 'flags': ['EXCLUDE_FROM_ALL',\n                                                 'INSTALL_HEADERS',\n                                                 'INTERNAL_FLAGS',\n                                                 'NOEXPORT',\n                                                 'AUTOGLOB',\n                                                 'STATIC',\n                                                 'PLUGIN',\n                                                 'PREPEND_SOURCE_ROOT',\n                                                 'PREPEND_HEADER_ROOT',\n                                                 'UNITY_BUILD'],\n                                      'nargs': '1+'}},\n    'add_hpx_config_test': { 'kwargs': { 'ARGS': '+',\n                                         'CMAKECXXFEATURE': 1,\n                                         'COMPILE_DEFINITIONS': '+',\n                                         'DEFINITIONS': '+',\n                                         'INCLUDE_DIRECTORIES': '+',\n                                         'LIBRARIES': '+',\n                                         'LINK_DIRECTORIES': '+',\n                                         'REQUIRED': '+',\n                                         'ROOT': 1,\n                                         'SOURCE': 1},\n                             'pargs': { 'flags': ['FILE', 'EXECUTE'],\n                                        'nargs': '1+'}},\n    'add_hpx_example_target_dependencies': { 'kwargs': {},\n                                             'pargs': { 'flags': ['DEPS_ONLY'],\n                                                        'nargs': '2+'}},\n    'add_hpx_example_test': {'pargs': {'nargs': 2}},\n    'add_hpx_executable': { 'kwargs': { 'AUXILIARY': '+',\n                                        'COMPILE_FLAGS': '+',\n                                        'COMPONENT_DEPENDENCIES': '+',\n                                        'DEPENDENCIES': '+',\n                                        'FOLDER': 1,\n                                        'HEADERS': '+',\n                                        'HEADER_GLOB': 1,\n                                        'HEADER_ROOT': 1,\n                                        'HPX_PREFIX': 1,\n                                        'INI': 1,\n                                        'INSTALL_SUFFIX': 1,\n                                        'LANGUAGE': 1,\n                                        'LINK_FLAGS': '+',\n                                        'OUTPUT_SUFFIX': 1,\n                                        'SOURCES': '+',\n                                        'SOURCE_GLOB': 1,\n                                        'SOURCE_ROOT': 1},\n                            'pargs': { 'flags': ['EXCLUDE_FROM_ALL',\n                                                  'EXCLUDE_FROM_DEFAULT_BUILD',\n                                                  'AUTOGLOB',\n                                                  'INTERNAL_FLAGS',\n                                                  'NOLIBS',\n                                                  'NOHPX_INIT'],\n                                       'nargs': '1+'}},\n    'add_hpx_header_tests': { 'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'EXCLUDE': '+',\n                                          'EXCLUDE_FROM_ALL': '+',\n                                          'HEADERS': '+',\n                                          'HEADER_ROOT': 1},\n                              'pargs': {'flags': ['NOLIBS'], 'nargs': '1+'}},\n    'add_hpx_headers_compile_test': {\n                              'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '2+'}},\n    'add_hpx_library': { 'kwargs': { 'AUXILIARY': '+',\n                                     'COMPILER_FLAGS': '+',\n                                     'COMPONENT_DEPENDENCIES': '+',\n                                     'DEPENDENCIES': '+',\n                                     'FOLDER': 1,\n                                     'HEADERS': '+',\n                                     'HEADER_GLOB': 1,\n                                     'HEADER_ROOT': 1,\n                                     'INSTALL_SUFFIX': 1,\n                                     'LINK_FLAGS': '+',\n                                     'OUTPUT_SUFFIX': 1,\n                                     'SOURCES': '+',\n                                     'SOURCE_GLOB': 1,\n                                     'SOURCE_ROOT': 1},\n                         'pargs': { 'flags': ['EXCLUDE_FROM_ALL',\n                                               'INSTALL_HEADERS',\n                                               'INTERNAL_FLAGS',\n                                               'NOLIBS',\n                                               'NOEXPORT',\n                                               'AUTOGLOB',\n                                               'STATIC',\n                                               'PLUGIN',\n                                               'NONAMEPREFIX',\n                                               'PREPEND_SOURCE_ROOT',\n                                               'PREPEND_HEADER_ROOT',\n                                               'UNITY_BUILD'],\n                                    'nargs': '1+'}},\n    'add_hpx_library_headers': { 'kwargs': {'EXCLUDE': '+', 'GLOBS': '+'},\n                                 'pargs': {'flags': ['APPEND'], 'nargs': '2+'}},\n    'add_hpx_library_headers_noglob': { 'kwargs': { 'EXCLUDE': '+',\n                                                    'HEADERS': '+'},\n                                        'pargs': { 'flags': ['APPEND'],\n                                                   'nargs': '1+'}},\n    'add_hpx_library_sources': { 'kwargs': {'EXCLUDE': '+', 'GLOBS': '+'},\n                                 'pargs': {'flags': ['APPEND'], 'nargs': '2+'}},\n    'add_hpx_library_sources_noglob': { 'kwargs': { 'EXCLUDE': '+',\n                                                    'SOURCES': '+'},\n                                        'pargs': { 'flags': ['APPEND'],\n                                                   'nargs': '1+'}},\n    'add_hpx_module': { 'kwargs': { 'CMAKE_SUBDIRS': '+',\n                                    'COMPAT_HEADERS': '+',\n                                    'GENERATED_HEADERS': '+',\n                                    'DEPENDENCIES': '+',\n                                    'EXCLUDE_FROM_GLOBAL_HEADER': '+',\n                                    'ADD_TO_GLOBAL_HEADER': '+',\n                                    'GLOBAL_HEADER_GEN': 1,\n                                    'HEADERS': '+',\n                                    'OBJECTS': '+',\n                                    'MODULE_DEPENDENCIES': '+',\n                                    'SOURCES': '+'},\n                        'pargs': { 'flags': ['CUDA',\n                                             'CONFIG_FILES',\n                                             'NO_CONFIG_IN_GENERATED_HEADERS'],\n                                   'nargs': '1+'}},\n    'add_hpx_performance_test': {'pargs': {'nargs': 2}},\n    'add_hpx_pseudo_dependencies': {'pargs': {'nargs': 0}},\n    'add_hpx_pseudo_dependencies_no_shortening': {'pargs': {'nargs': 0}},\n    'add_hpx_pseudo_target': {'pargs': {'nargs': 0}},\n    'add_hpx_regression_compile_test': {\n                              'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '2+'}},\n    'add_hpx_regression_test': { 'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                             'DEPENDENCIES': '+',\n                                             'FOLDER': 1,\n                                             'SOURCES': '+',\n                                             'SOURCE_ROOT': 1,\n                                             'ARGS': '+',\n                                             'EXECUTABLE': 1,\n                                             'PSEUDO_DEPS_NAME': 1,\n                                             'LOCALITIES': 1,\n                                             'PARCELPORTS': '+',\n                                             'THREADS_PER_LOCALITY': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED',\n                                                   'NOLIBS',\n                                                   'RUN_SERIAL',\n                                                   'NO_PARCELPORT_TCP',\n                                                   'NO_PARCELPORT_LCI',\n                                                   'NO_PARCELPORT_MPI',\n                                                   'NO_PARCELPORT_GASNET'],\n                                         'nargs': '2+'}},\n    'add_hpx_source_group': { 'kwargs': { 'CLASS': 1,\n                                          'NAME': 1,\n                                          'ROOT': 1,\n                                          'TARGETS': '+'},\n                              'pargs': {'flags': [], 'nargs': '*'}},\n    'add_hpx_test': { 'kwargs': { 'ARGS': '+',\n                                  'EXECUTABLE': 1,\n                                  'LOCALITIES': 1,\n                                  'PARCELPORTS': '+',\n                                  'THREADS_PER_LOCALITY': 1},\n                      'pargs': {'flags': ['FAILURE_EXPECTED',\n                                          'RUN_SERIAL',\n                                          'NO_PARCELPORT_TCP',\n                                          'NO_PARCELPORT_LCI',\n                                          'NO_PARCELPORT_MPI'],\n                                'nargs': '2+'}},\n    'add_hpx_test_target_dependencies': { 'kwargs': {'PSEUDO_DEPS_NAME': 1},\n                                          'pargs': {'flags': [], 'nargs': '2+'}},\n    'add_hpx_unit_compile_test': {\n                              'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '2+'}},\n    'add_hpx_unit_test': { 'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1,\n                                          'ARGS': '+',\n                                          'EXECUTABLE': 1,\n                                          'PSEUDO_DEPS_NAME': 1,\n                                          'LOCALITIES': 1,\n                                          'PARCELPORTS': '+',\n                                          'THREADS_PER_LOCALITY': 1},\n                           'pargs': { 'flags': ['FAILURE_EXPECTED',\n                                                'NOLIBS',\n                                                'RUN_SERIAL',\n                                                'NO_PARCELPORT_TCP',\n                                                'NO_PARCELPORT_LCI',\n                                                'NO_PARCELPORT_MPI'],\n                                      'nargs': '2+'}},\n    'add_parcelport': { 'kwargs': { 'COMPILE_FLAGS': '+',\n                                    'DEPENDENCIES': '+',\n                                    'FOLDER': 1,\n                                    'HEADERS': '+',\n                                    'INCLUDE_DIRS': '+',\n                                    'LINK_FLAGS': '+',\n                                    'SOURCES': '+'},\n                        'pargs': {'flags': ['STATIC', 'EXPORT'], 'nargs': '1+'}},\n    'add_test_and_deps_compile_test': {\n                              'kwargs': { 'COMPONENT_DEPENDENCIES': '+',\n                                          'DEPENDENCIES': '+',\n                                          'FOLDER': 1,\n                                          'SOURCES': '+',\n                                          'SOURCE_ROOT': 1},\n                              'pargs': { 'flags': ['FAILURE_EXPECTED', 'NOLIBS'],\n                                         'nargs': '3+'}},\n    'add_test_and_deps_test': {'pargs': {'nargs': 3}},\n    'create_configuration_summary': {'pargs': {'nargs': 2}},\n    'create_symbolic_link': {'pargs': {'nargs': 2}},\n    'get_target_property': {'pargs': {'nargs': 3}},\n    'hpx_add_compile_flag': {'pargs': {'nargs': 0}},\n    'hpx_add_compile_flag_if_available': { 'kwargs': { 'CONFIGURATIONS': '+',\n                                                       'LANGUAGES': '+',\n                                                       'NAME': 1},\n                                           'pargs': {'flags': [], 'nargs': '1+'}},\n    'hpx_add_config_cond_define': {'pargs': {'nargs': 1}},\n    'hpx_add_config_define': {'pargs': {'nargs': 1}},\n    'hpx_add_config_define_namespace': { 'kwargs': { 'DEFINE': 1,\n                                                     'NAMESPACE': 1,\n                                                     'VALUE': '+'},\n                                         'pargs': {'flags': [], 'nargs': '*'}},\n    'hpx_add_link_flag': { 'kwargs': {'CONFIGURATIONS': '+', 'TARGETS': '+'},\n                           'pargs': {'flags': [], 'nargs': '1+'}},\n    'hpx_add_link_flag_if_available': { 'kwargs': {'NAME': 1, 'TARGETS': '+'},\n                                        'pargs': {'flags': [], 'nargs': '1+'}},\n    'hpx_add_target_compile_definition': { 'kwargs': {'CONFIGURATIONS': '+'},\n                                           'pargs': { 'flags': ['PUBLIC'],\n                                                      'nargs': '1+'}},\n    'hpx_add_target_compile_option': { 'kwargs': { 'CONFIGURATIONS': '+',\n                                                   'LANGUAGES': '+'},\n                                       'pargs': { 'flags': ['PUBLIC'],\n                                                  'nargs': '1+'}},\n    'hpx_add_target_compile_option_if_available': { 'kwargs': { 'CONFIGURATIONS': '+',\n                                                                'LANGUAGES': '+',\n                                                                'NAME': 1},\n                                                    'pargs': { 'flags': ['PUBLIC'],\n                                                               'nargs': '1+'}},\n    'hpx_append_property': {'pargs': {'nargs': 2}},\n    'hpx_check_for_builtin_integer_pack': {'pargs': {'nargs': 0}},\n    'hpx_check_for_builtin_make_integer_seq': {'pargs': {'nargs': 0}},\n    'hpx_check_for_builtin_type_pack_element': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx11_std_atomic': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx11_std_atomic_128bit': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx11_std_quick_exit': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx11_std_shared_ptr_lwg3018': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx17_aligned_new': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx17_filesystem': {'pargs': {'nargs': 0}},\n    'hpx_check_for_cxx17_hardware_destructive_interference_size': { 'pargs': { 'nargs': 0}},\n    'hpx_check_for_libfun_std_experimental_optional': {'pargs': {'nargs': 0}},\n    'hpx_check_for_mm_prefetch': {'pargs': {'nargs': 0}},\n    'hpx_check_for_stable_inplace_merge': {'pargs': {'nargs': 0}},\n    'hpx_check_for_unistd_h': {'pargs': {'nargs': 0}},\n    'hpx_collect_usage_requirements': { 'kwargs': {'EXCLUDE': '+'},\n                                        'pargs': {'flags': [], 'nargs': '10+'}},\n    'hpx_config_loglevel': {'pargs': {'nargs': 2}},\n    'hpx_construct_cflag_list': {'pargs': {'nargs': 6}},\n    'hpx_construct_library_list': {'pargs': {'nargs': 3}},\n    'hpx_cpuid': {'pargs': {'nargs': 2}},\n    'hpx_debug': {'pargs': {'nargs': 0}},\n    'hpx_error': {'pargs': {'nargs': 0}},\n    'hpx_export_modules_targets': {'pargs': {'nargs': 0}},\n    'hpx_export_targets': {'pargs': {'nargs': 0}},\n    'hpx_force_out_of_tree_build': {'pargs': {'nargs': 1}},\n    'hpx_generate_pkgconfig_from_target': { 'kwargs': {'EXCLUDE': '+'},\n                                            'pargs': { 'flags': [],\n                                                       'nargs': '3+'}},\n    'hpx_handle_component_dependencies': {'pargs': {'nargs': 1}},\n    'hpx_include': {'pargs': {'nargs': 0}},\n    'hpx_info': {'pargs': {'nargs': 0}},\n    'hpx_message': {'pargs': {'nargs': 1}},\n    'hpx_option': { 'kwargs': {'CATEGORY': 1, 'MODULE': 1, 'STRINGS': '+'},\n                    'pargs': {'flags': ['ADVANCED'], 'nargs': '4+'}},\n    'hpx_perform_cxx_feature_tests': {'pargs': {'nargs': 0}},\n    'hpx_print_list': {'pargs': {'nargs': 3}},\n    'hpx_remove_link_flag': { 'kwargs': {'CONFIGURATIONS': '+', 'TARGETS': '+'},\n                              'pargs': {'flags': [], 'nargs': '1+'}},\n    'hpx_remove_target_compile_option': { 'kwargs': {'CONFIGURATIONS': '+'},\n                                          'pargs': { 'flags': ['PUBLIC'],\n                                                     'nargs': '1+'}},\n    'hpx_sanitize_usage_requirements': {'pargs': {'nargs': 2}},\n    'hpx_set_cmake_policy': {'pargs': {'nargs': 2}},\n    'hpx_set_lib_name': {'pargs': {'nargs': 2}},\n    'hpx_set_option': { 'kwargs': {'HELPSTRING': 1, 'TYPE': 1, 'VALUE': 1},\n                        'pargs': {'flags': ['FORCE'], 'nargs': '1+'}},\n    'hpx_setup_target': { 'kwargs': { 'COMPILE_FLAGS': '+',\n                                      'COMPONENT_DEPENDENCIES': '+',\n                                      'DEPENDENCIES': '+',\n                                      'FOLDER': 1,\n                                      'HEADER_ROOT': 1,\n                                      'HPX_PREFIX': 1,\n                                      'INSTALL_FLAGS': '+',\n                                      'INSTALL_PDB': '+',\n                                      'LINK_FLAGS': '+',\n                                      'NAME': 1,\n                                      'SOVERSION': 1,\n                                      'TYPE': 1,\n                                      'VERSION': 1},\n                          'pargs': { 'flags': ['EXPORT',\n                                                'INSTALL',\n                                                'INSTALL_HEADERS',\n                                                'INTERNAL_FLAGS',\n                                                'NOLIBS',\n                                                'PLUGIN',\n                                                'NONAMEPREFIX',\n                                                'NOTLLKEYWORD'],\n                                     'nargs': '1+'}},\n    'hpx_source_to_doxygen': { 'kwargs': { 'DEPENDENCIES': '+',\n                                           'DOXYGEN_ARGS': '+'},\n                               'pargs': {'flags': [], 'nargs': '1+'}},\n    'hpx_warn': {'pargs': {'nargs': 0}},\n    'hpx_setup_mpi': {'pargs': {'nargs': 0}},\n    'shorten_hpx_pseudo_target': {'pargs': {'nargs': 2}},\n    'write_config_defines_file': { 'kwargs': { 'FILENAME': 1,\n                                               'NAMESPACE': 1,\n                                               'TEMPLATE': 1},\n                                   'pargs': {'flags': [], 'nargs': '*'}}\n  }\n\n  # Specify property tags.\n  proptags = []\n\n  # Specify variable tags.\n  vartags = []\n\n# -------------------------------\n# Options affecting file encoding\n# -------------------------------\nwith section(\"encode\"):\n\n  # If true, emit the unicode byte-order mark (BOM) at the start of the file\n  emit_byteorder_mark = False\n\n  # Specify the encoding of the input file.  Defaults to utf-8\n  input_encoding = u'utf-8'\n\n  # Specify the encoding of the output file.  Defaults to utf-8.  Note that\n  # cmake\n  # only claims to support utf-8 so be careful when using anything else\n  output_encoding = u'utf-8'\n\n"
        },
        {
          "name": ".codacy.yml",
          "type": "blob",
          "size": 0.0458984375,
          "content": "---\nexclude_paths:\n  - \"tools/perftests_ci/**\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4111328125,
          "content": "; Copyright (c) 2013 Hartmut Kaiser\n;\n; SPDX-License-Identifier: BSL-1.0\n; Distributed under the Boost Software License, Version 1.0. (See accompanying\n; file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n; Download plugins for your favorite editor at editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\ncharset = latin1\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.919921875,
          "content": "# Copyright (c) 2012 Bryce Adelstein-Lelbach\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n# Boost Subversion auto-props adapted for git\n\n# Defaults\n* text=auto\n\n# Script formats\n*.bat             text\n*.bsh             text\n*.cgi             text\n*.cmd             text\n*.js              text\n*.php             text\n*.pl              text\n*.pm              text\n*.py              text\n*.sh              text eol=lf\n*.cmake           text\nCMakeLists.txt    text \nMakefile*         text eol=lf \nconfigure         text eol=lf\n\n# Image formats\n*.bmp         binary \n*.gif         binary \n*.ico         binary \n*.jpeg        binary \n*.jpg         binary \n*.png         binary \n*.tif         binary \n*.tiff        binary \n*.svg         text \n\n# Archive formats\n*.tar         binary\n*.gz          binary\n*.tgz         binary \n*.bz2         binary\n*.tbz         binary\n*.tbz2        binary\n*.tb2         binary\n*.zip         binary\n*.7z          binary\n\n# Data formats\n*.pdf         binary\n*.avi         binary\n*.doc         binary\n*.dsp         text eol=crlf\n*.dsw         text eol=crlf\n*.eps         binary\n*.mov         binary\n*.mp3         binary\n*.mpeg        binary\n*.mpg         binary\n*.ppt         binary\n*.ps          binary\n*.psd         binary\n*.swf         binary\n*.rdf         text\n*.rss         text\n*.rtf         text\n*.sln         text\n*.vcproj      text\n*.vsprops     text\n*.wav         binary \n\n# Text formats\n*.tex             text\n*.sty             text\n*.cls             text\n*.bib             text\n.htaccess         text\n*.bbk             text\n*.css             text\n*.dtd             text\n*.htm             text\n*.html            text\n*.ini             text\n*.log             text\n*.mak             text\n*.qbk             text\n*.rst             text\n*.sql             text\n*.txt             text\n*.xhtml           text\n*.xml             text\n*.dbk             text\n*.docbook         text\n*.xsd             text\n*.xsl             text\n*.xslt            text\n*.xul             text\n*.yml             text\nboost-no-inspect  text\nCHANGES           text\nCOPYING           text\nINSTALL           text\nREADME            text\nTODO              text\n\n# Source code formats\n*.py          text\n*.c           text\n*.h           text\n*.c++         text\n*.cpp         text\n*.cxx         text\n*.cc          text\n*.C           text\n*.h++         text\n*.hpp         text\n*.hxx         text\n*.hh          text\n*.H           text\n*.ipp         text\n*.tpp         text\n*.f           text\n*.F           text\n*.f77         text\n*.F77         text\n*.f90         text\n*.F90         text\n*.for         text\n*.For         text\n*.FOR         text\n*.f95         text\n*.F95         text\n*.fpp         text\n*.jam         text\nJamfile       text\nJamroot       text\nJamfile.v2    text\nJamrules      text\n*.java        text\n*.glsl        text\n*.cl          text\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# Copyright (c) 2012 Bryce Adelstein-Lelbach\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n*.pyc\n/build\n.DS_Store\n.gitignore\n.ptp-sync-folder\n/Dockerfile\n/.dockerignore\n.ycm_extra_conf.py\n/apex\npackages\n.vscode\n.ccls-cache\n.clangd\n/out\n.vs\n.idea\ncmake-build*\n/.cache"
        },
        {
          "name": ".jenkins",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 2.40625,
          "content": "# Copyright (c) 2021 Patrick Diehl\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n# YAML 1.2\n# Metadata for citation of this software according to the CFF format (https://citation-file-format.github.io/)\ncff-version: 1.2.0\nmessage: If you use this software, please cite it using these metadata.\ntitle: 'STEllAR-GROUP/hpx: HPX V1.10.0: The C++ Standards Library for Parallelism and\n  Concurrency'\ndoi: 10.5281/zenodo.5185328\nauthors:\n- given-names: Hartmut\n  family-names: Kaiser\n- given-names: Mikael\n  family-names: Simberg\n- given-names: Bryce\n  family-names: Adelstein Lelbach\n  affiliation: NVIDIA\n- given-names: Thomas\n  family-names: Heller\n- given-names: Agustin\n  family-names: Berge\n- given-names: John\n  family-names: Biddiscombe\n  affiliation: CSCS\n- given-names: Auriane\n  family-names: Reverdell\n- given-names: Anton\n  family-names: Bikineev\n  affiliation: stellar-group\n- given-names: Grant\n  family-names: Mercer\n- given-names: Andreas\n  family-names: Schaefer\n- given-names: Kevin\n  family-names: Huck\n  affiliation: University of Oregon\n- given-names: Adrian\n  family-names: Lemoine\n  affiliation: AMD\n- given-names: Taeguk\n  family-names: Kwon\n  affiliation: '@devsisters'\n- given-names: Jeroen\n  family-names: Habraken\n  affiliation: Pure Storage\n- given-names: Matthew\n  family-names: Anderson\n- given-names: Steven\n  family-names: Brandt\n  name-particle: R.\n- given-names: Marcin\n  family-names: Copik\n  affiliation: ETH Zuerich\n- given-names: Srinivas\n  family-names:  Yadav\n- given-names: Martin\n  family-names: Stumpf\n- given-names: Daniel\n  family-names: Bourgeois\n- given-names: Akhil\n  family-names: Nair\n- given-names: Denis\n  family-names: Blank\n  affiliation: Technical University of Munich\n- given-names: Giannis\n  family-names: Gonidelis\n- given-names: Rebecca\n  family-names: Stobaugh\n- given-names: Nikunj\n  family-names: Gupta\n- given-names: Shoshana\n  family-names: Jakobovits\n  affiliation: CSCS\n- given-names: Vinay\n  family-names: Amatya\n- given-names: Lars\n  family-names: Viklund\n- given-names: Patrick\n  family-names: Diehl\n  affiliation: Center of Computation and Technology, LSU\n- given-names: Zahra\n  family-names: Khatami\n  affiliation: Louisiana State University\nversion: 1.10.0\ndate-released: 2023-10-12\nrepository-code: https://github.com/STEllAR-GROUP/hpx\nlicense: BSL-1.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 84.84375,
          "content": "# Copyright (c)      2020 Mikael Simberg\n# Copyright (c) 2007-2024 Hartmut Kaiser\n# Copyright (c) 2011-2014 Thomas Heller\n# Copyright (c)      2024 Isidoros Tsaousis-Seiras\n# Copyright (c) 2007-2008 Chirag Dekate\n# Copyright (c)      2011 Bryce Lelbach\n# Copyright (c)      2011 Vinay C Amatya\n# Copyright (c)      2013 Jeroen Habraken\n# Copyright (c) 2014-2016 Andreas Schaefer\n# Copyright (c) 2017      Abhimanyu Rawat\n# Copyright (c) 2017      Google\n# Copyright (c) 2017      Taeguk Kwon\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\ncmake_minimum_required(VERSION 3.18 FATAL_ERROR)\n\n# Overrides must go before the project() statement, otherwise they are ignored.\n\n# ##############################################################################\n# C++ overrides\n# ##############################################################################\nset(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/HPX_CXXOverrides.cmake\"\n)\n\n# ##############################################################################\n# Build type (needs to be handled before project command below)\n# ##############################################################################\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE\n      \"Release\"\n      CACHE\n        STRING\n        \"Configuration type (one of Debug, RelWithDebInfo, Release, MinSizeRel)\"\n        FORCE\n  )\nendif()\n\n# ##############################################################################\n# project metadata\n# ##############################################################################\nproject(HPX CXX)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# ##############################################################################\n# Special handling for building tests/examples against a previously installed\n# version of HPX\n# ##############################################################################\nif(HPX_WITH_INSTALLED_VERSION)\n  include(cmake/installed_hpx.cmake)\n  return()\nendif()\n\n# ##############################################################################\nstring(TIMESTAMP HPX_COPYRIGHT_YEAR \"%Y\")\n\n# ##############################################################################\n# Build all of HPX\n# ##############################################################################\nset(HPX_VERSION_MAJOR 1)\nset(HPX_VERSION_MINOR 11)\nset(HPX_VERSION_SUBMINOR 0)\nset(HPX_VERSION_DATE 20240529)\nset(HPX_VERSION_TAG \"-trunk\")\n\nset(HPX_VERSION\n    \"${HPX_VERSION_MAJOR}.${HPX_VERSION_MINOR}.${HPX_VERSION_SUBMINOR}\"\n)\nset(HPX_VERSION_FULL\n    \"${HPX_VERSION_MAJOR}.${HPX_VERSION_MINOR}.${HPX_VERSION_SUBMINOR}${HPX_VERSION_TAG}\"\n)\n\nset(HPX_LIBRARY_VERSION \"${HPX_VERSION}\")\nset(HPX_SOVERSION ${HPX_VERSION_MAJOR})\nset(HPX_PACKAGE_NAME HPX)\n# To keep track of the hpx_root when other subprojects are declared\nset(HPX_SOURCE_DIR \"${PROJECT_SOURCE_DIR}\")\nset(HPX_BINARY_DIR \"${PROJECT_BINARY_DIR}\")\n\n# ##############################################################################\n# CMake configuration\n# ##############################################################################\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/cmake\")\n\ninclude(GNUInstallDirs)\ninclude(HPX_Utils)\n\n# explicitly set certain policies\ncmake_policy(VERSION 3.18)\nhpx_set_cmake_policy(CMP0042 NEW)\nhpx_set_cmake_policy(CMP0060 NEW)\nhpx_set_cmake_policy(CMP0074 NEW)\nhpx_set_cmake_policy(CMP0167 OLD)\n\n# We save the passed compiler flag to a special variable. This is needed for our\n# build system unit tests. Some flags might influence the created symbols\n# (_GLIBCXX_DEBUG, I look at you)\nset(CMAKE_CXX_FLAGS_SAFE ${CMAKE_CXX_FLAGS})\ninclude(HPX_CheckCXXStandard)\n\ninclude(CheckCXXCompilerFlag)\ninclude(CMakeDependentOption)\n\n# include additional macro definitions\ninclude(HPX_AddConfigTest)\ninclude(HPX_AddDefinitions)\ninclude(HPX_CreateSymbolicLink)\n\nhpx_force_out_of_tree_build(\n  \"This project requires an out-of-source-tree build. See README.rst. Clean your CMake cache and CMakeFiles if this message persists.\"\n)\n\nif(NOT HPX_CMAKE_LOGLEVEL)\n  set(HPX_CMAKE_LOGLEVEL \"WARN\")\nendif()\n\n# print initial diagnostics\nhpx_info(\"CMake version: ${CMAKE_VERSION}, generator: ${CMAKE_GENERATOR}\")\nhpx_info(\"HPX version: ${HPX_VERSION}\")\n\n# ##############################################################################\n# reset cached variables that need to be re-filled\nunset(HPX_COMPONENTS CACHE)\nunset(HPX_EXPORT_TARGETS CACHE)\nunset(HPX_EXPORT_INTERNAL_TARGETS CACHE)\nunset(HPX_ENABLED_MODULES CACHE)\nunset(HPX_CORE_ENABLED_MODULES CACHE)\nunset(HPX_FULL_ENABLED_MODULES CACHE)\nunset(HPX_STATIC_PARCELPORT_PLUGINS CACHE)\n\n# ##############################################################################\n# Set up dummy compiler flags targets\n# ##############################################################################\ninclude(HPX_CompilerFlagsTargets)\n\n# ##############################################################################\n# Setup platform for which HPX should be compiled for.\n#\ninclude(HPX_SetPlatform)\nif(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n  unset(HPX_LIBRARY_VERSION)\n  unset(HPX_SOVERSION)\nendif()\n\nif(MSVC)\n  hpx_option(\n    HPX_WITH_VS_STARTUP_PROJECT STRING\n    \"Define the startup project for the HPX solution (default: ALL_BUILD).\"\n    \"ALL_BUILD\" ADVANCED\n  )\n  if(HPX_WITH_VS_STARTUP_PROJECT)\n    set(VS_STARTUP_PROJECT ${HPX_WITH_VS_STARTUP_PROJECT})\n  endif()\nendif()\n\n# ##############################################################################\n# Disable check for compiler compatibility by default\nhpx_option(\n  HPX_WITH_IGNORE_COMPILER_COMPATIBILITY BOOL\n  \"Ignore compiler incompatibility in dependent projects (default: ON).\" ON\n  ADVANCED\n)\n\n# ##############################################################################\n# Set our build options cache variables which are customizable by users\n#\n\nhpx_option(\n  HPX_WITH_DEPRECATION_WARNINGS BOOL\n  \"Enable warnings for deprecated facilities (default: ON).\" ON ADVANCED\n)\n\nif(HPX_WITH_DEPRECATION_WARNINGS)\n  # enable deprecation warnings globally\n  hpx_add_config_cond_define(HPX_HAVE_DEPRECATION_WARNINGS 1)\nendif()\n\n# Generic build options\nset(DEFAULT_MALLOC \"system\")\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n  set(DEFAULT_MALLOC \"tcmalloc\")\nendif()\n\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n  set(HPX_WITH_STACKOVERFLOW_DETECTION_DEFAULT OFF)\n  string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UC)\n  if(\"${CMAKE_BUILD_TYPE_UC}\" STREQUAL \"DEBUG\")\n    set(HPX_WITH_STACKOVERFLOW_DETECTION_DEFAULT ON)\n  endif()\n  hpx_option(\n    HPX_WITH_STACKOVERFLOW_DETECTION\n    BOOL\n    \"Enable stackoverflow detection for HPX threads/coroutines (default: OFF, debug: ON).\"\n    ${HPX_WITH_STACKOVERFLOW_DETECTION_DEFAULT}\n    ADVANCED\n  )\n  if(HPX_WITH_STACKOVERFLOW_DETECTION)\n    hpx_add_config_define(HPX_HAVE_STACKOVERFLOW_DETECTION)\n  endif()\nendif()\n\nhpx_option(\n  HPX_WITH_MALLOC\n  STRING\n  \"Define which allocator should be linked in. Options are: system, tcmalloc, jemalloc, mimalloc, tbbmalloc, and custom (default is: tcmalloc)\"\n  ${DEFAULT_MALLOC}\n  STRINGS \"system;tcmalloc;jemalloc;mimalloc;tbbmalloc;custom\"\n)\n\n# On some systems jemalloc requires an explicit prefix for the API functions\n# (i.e. 'malloc' is called 'je_malloc', etc.)\nif(${HPX_WITH_MALLOC} STREQUAL \"jemalloc\")\n  if(MSVC)\n    set(HPX_WITH_JEMALLOC_PREFIX_DEFAULT \"je_\")\n  else()\n    set(HPX_WITH_JEMALLOC_PREFIX_DEFAULT \"<none>\")\n  endif()\n  hpx_option(\n    HPX_WITH_JEMALLOC_PREFIX STRING\n    \"Optional naming prefix for jemalloc API functions\"\n    ${HPX_WITH_JEMALLOC_PREFIX_DEFAULT} ADVANCED\n  )\nendif()\n\n# Logging configuration\nhpx_option(\n  HPX_WITH_LOGGING BOOL \"Build HPX with logging enabled (default: ON).\" ON\n  ADVANCED\n)\nif(HPX_WITH_LOGGING)\n  hpx_add_config_define(HPX_HAVE_LOGGING)\nendif()\n\nhpx_option(\n  HPX_WITH_FAULT_TOLERANCE\n  BOOL\n  \"Build HPX to tolerate failures of nodes, i.e. ignore errors in active communication channels (default: OFF)\"\n  OFF\n  ADVANCED\n)\nif(HPX_WITH_FAULT_TOLERANCE)\n  hpx_add_config_define(HPX_HAVE_FAULT_TOLERANCE)\nendif()\n\n# Compiler related build options\nhpx_option(\n  HPX_WITH_GCC_VERSION_CHECK BOOL\n  \"Don't ignore version reported by gcc (default: ON)\" ON ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_COMPILER_WARNINGS BOOL \"Enable compiler warnings (default: ON)\" ON\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_COMPILER_WARNINGS_AS_ERRORS BOOL\n  \"Turn compiler warnings into errors (default: OFF)\" OFF ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_EXECUTABLE_PREFIX STRING\n  \"Executable prefix (default none), 'hpx_' useful for system install.\" \"\"\n  CATEGORY \"Build Targets\"\n)\n\nhpx_option(\n  HPX_WITH_DOCUMENTATION BOOL \"Build the HPX documentation (default OFF).\" OFF\n  CATEGORY \"Build Targets\"\n)\n\nif(HPX_WITH_DOCUMENTATION)\n  set(valid_output_formats html singlehtml latexpdf man)\n  hpx_option(\n    HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS\n    STRING\n    \"List of documentation output formats to generate. Valid options are ${valid_output_formats}. Multiple values can be separated with semicolons. (default html).\"\n    \"html\"\n    CATEGORY \"Build Targets\"\n  )\n\n  foreach(output_format ${HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS})\n    if(NOT ${output_format} IN_LIST valid_output_formats)\n      hpx_error(\n        \"${output_format} is not a valid value for HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS. Valid output format are: ${valid_output_formats}.\"\n      )\n    endif()\n  endforeach()\nendif()\n\nif(WIN32)\n  set(HPX_WITH_PSEUDO_DEPENDENCIES\n      OFF\n      CACHE INTERNAL \"\" FORCE\n  )\nelse()\n  set(HPX_WITH_PSEUDO_DEPENDENCIES\n      ON\n      CACHE INTERNAL \"\" FORCE\n  )\nendif()\n\nhpx_option(\n  HPX_WITH_UNITY_BUILD BOOL\n  \"Enable unity build for certain build targets (default OFF)\" OFF ADVANCED\n)\nif(HPX_WITH_UNITY_BUILD)\n  set(HPX_WITH_UNITY_BUILD_OPTION UNITY_BUILD)\nendif()\n\nhpx_option(\n  HPX_WITH_PRECOMPILED_HEADERS\n  BOOL\n  \"Enable precompiled headers for certain build targets (experimental) (default OFF)\"\n  OFF\n  ADVANCED\n)\nif(HPX_WITH_PRECOMPILED_HEADERS)\n  set(HPX_WITH_PRECOMPILED_HEADERS_INTERNAL ON)\n  # Only create the targets here. They will be set up later once all modules are\n  # known.\n  add_library(hpx_precompiled_headers OBJECT libs/src/dummy.cpp)\n  add_executable(hpx_exe_precompiled_headers libs/src/dummy.cpp)\n\n  set_target_properties(hpx_precompiled_headers PROPERTIES FOLDER \"Core\")\n  set_target_properties(hpx_exe_precompiled_headers PROPERTIES FOLDER \"Core\")\nendif()\n\n# ##############################################################################\n# Dynamic hpx_main\n# ##############################################################################\n\nset(HPX_WITH_DYNAMIC_HPX_MAIN_DEFAULT OFF)\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\" OR APPLE)\n  set(HPX_WITH_DYNAMIC_HPX_MAIN_DEFAULT ON)\nendif()\n\nhpx_option(\n  HPX_WITH_DYNAMIC_HPX_MAIN\n  BOOL\n  \"Enable dynamic overload of system ``main()`` (Linux and Apple only, default: ON)\"\n  ${HPX_WITH_DYNAMIC_HPX_MAIN_DEFAULT}\n  ADVANCED\n)\nif(HPX_WITH_DYNAMIC_HPX_MAIN)\n  if(NOT HPX_WITH_DYNAMIC_HPX_MAIN_DEFAULT)\n    hpx_error(\n      \"HPX_WITH_DYNAMIC_HPX_MAIN was set to ON, but the option is only available on Linux and Apple (this is \\\"${CMAKE_SYSTEM_NAME}\\\").\"\n    )\n  endif()\n  hpx_add_config_define(HPX_HAVE_DYNAMIC_HPX_MAIN)\nendif()\n\n# ##############################################################################\n# Some platforms do not support dynamic linking. Enable this to link all\n# libraries statically. This also changes some of the internals of HPX related\n# to how components are loaded.\n# ##############################################################################\nhpx_option(\n  HPX_WITH_STATIC_LINKING BOOL\n  \"Compile HPX statically linked libraries (Default: OFF)\" OFF ADVANCED\n)\nif(HPX_WITH_STATIC_LINKING)\n  hpx_add_config_define(HPX_HAVE_STATIC_LINKING)\n  set(hpx_library_link_mode STATIC)\n  set(BUILD_SHARED_LIBS OFF)\n  set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n\n  if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    hpx_option(\n      HPX_WITH_STATIC_EXE_LINKING BOOL\n      \"Compile HPX statically linked executables (Default: OFF)\" OFF ADVANCED\n    )\n\n    if(HPX_WITH_STATIC_EXE_LINKING)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n    endif()\n  endif()\nelse()\n  set(hpx_library_link_mode SHARED)\nendif()\n\n# ##############################################################################\n# The cmake Ninja generator runs out of memory if the modules are being built as\n# OBJECT libraries. In this case the fallback is to build whole-archive STATIC\n# libraries.\nset(HPX_WITH_MODULES_AS_STATIC_LIBRARIES_DEFAULT OFF)\nif(\"${CMAKE_GENERATOR}\" STREQUAL \"Ninja\")\n  set(HPX_WITH_MODULES_AS_STATIC_LIBRARIES_DEFAULT ON)\nendif()\n\nhpx_option(\n  HPX_WITH_MODULES_AS_STATIC_LIBRARIES\n  BOOL\n  \"Compile HPX modules as STATIC (whole-archive) libraries instead of OBJECT\\\n  libraries (Default: ${HPX_WITH_MODULES_AS_STATIC_LIBRARIES_DEFAULT})\"\n  ${HPX_WITH_MODULES_AS_STATIC_LIBRARIES_DEFAULT}\n  ADVANCED\n)\n\nif(HPX_WITH_MODULES_AS_STATIC_LIBRARIES)\n  hpx_info(\"Building modules as STATIC (whole-archive) libraries\")\nelse()\n  hpx_info(\"Building modules as OBJECT libraries\")\nendif()\n\n# ##############################################################################\nhpx_option(\n  HPX_WITH_EXAMPLES BOOL \"Build the HPX examples (default ON)\" ON\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS BOOL \"Build the HPX tests (default ON)\" ON\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_BENCHMARKS BOOL \"Build HPX benchmark tests (default: ON)\" ON\n  ADVANCED CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_REGRESSIONS BOOL \"Build HPX regression tests (default: ON)\" ON\n  ADVANCED CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_UNIT BOOL \"Build HPX unit tests (default: ON)\" ON ADVANCED\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_HEADERS BOOL \"Build HPX header tests (default: OFF)\" OFF\n  ADVANCED CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_EXTERNAL_BUILD BOOL\n  \"Build external cmake build tests (default: ON)\" ON ADVANCED\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TESTS_EXAMPLES BOOL \"Add HPX examples as tests (default: ON)\" ON\n  ADVANCED CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_TOOLS BOOL \"Build HPX tools (default: OFF)\" OFF ADVANCED\n  CATEGORY \"Build Targets\"\n)\n\nhpx_option(\n  HPX_WITH_COMPILE_ONLY_TESTS BOOL\n  \"Create build system support for compile time only HPX tests (default ON)\" ON\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_FAIL_COMPILE_TESTS BOOL\n  \"Create build system support for fail compile HPX tests (default ON)\" ON\n  CATEGORY \"Build Targets\"\n)\nhpx_option(\n  HPX_WITH_PARALLEL_LINK_JOBS\n  STRING\n  \"Number of Parallel link jobs while building hpx (only for Ninja as generator) (default 2)\"\n  \"2\"\n  CATEGORY \"Build Targets\"\n)\n\nif(CMAKE_GENERATOR MATCHES \"Ninja\")\n  if(NOT HPX_WITH_PARALLEL_LINK_JOBS)\n    set(HPX_WITH_PARALLEL_LINK_JOBS \"2\")\n  endif()\n  if(HPX_WITH_PARALLEL_LINK_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY JOB_POOLS\n                             link_job_pool=${HPX_WITH_PARALLEL_LINK_JOBS}\n    )\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\n  endif()\nelseif(HPX_WITH_PARALLEL_LINK_JOBS)\n  hpx_warn(\"Job pooling is only available with Ninja generators.\")\nendif()\n\n# disable all tests if HPX_WITH_TESTS=OFF\nif(NOT HPX_WITH_TESTS)\n  hpx_set_option(\n    HPX_WITH_TESTS_BENCHMARKS\n    VALUE OFF\n    FORCE\n  )\n  hpx_set_option(\n    HPX_WITH_TESTS_REGRESSIONS\n    VALUE OFF\n    FORCE\n  )\n  hpx_set_option(\n    HPX_WITH_TESTS_UNIT\n    VALUE OFF\n    FORCE\n  )\n  hpx_set_option(\n    HPX_WITH_TESTS_HEADERS\n    VALUE OFF\n    FORCE\n  )\n  hpx_set_option(\n    HPX_WITH_TESTS_EXTERNAL_BUILD\n    VALUE OFF\n    FORCE\n  )\n  hpx_set_option(\n    HPX_WITH_TESTS_EXAMPLES\n    VALUE OFF\n    FORCE\n  )\nendif()\n\nhpx_option(\n  HPX_WITH_DISTRIBUTED_RUNTIME\n  BOOL\n  \"Enable the distributed runtime (default: ON). Turning off the distributed runtime completely disallows the creation and use of components and actions. Turning this option off is experimental!\"\n  ON\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\nif(HPX_WITH_DISTRIBUTED_RUNTIME)\n  hpx_add_config_define(HPX_HAVE_DISTRIBUTED_RUNTIME)\nendif()\n\n# Enable IO-counters on linux systems only\nset(HPX_WITH_IO_COUNTERS_DEFAULT OFF)\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\" AND HPX_WITH_DISTRIBUTED_RUNTIME)\n  set(HPX_WITH_IO_COUNTERS_DEFAULT ON)\nendif()\n\nhpx_option(\n  HPX_WITH_IO_COUNTERS BOOL\n  \"Enable IO counters (default: ${HPX_WITH_IO_COUNTERS_DEFAULT})\"\n  ${HPX_WITH_IO_COUNTERS_DEFAULT} ADVANCED CATEGORY \"Build Targets\"\n)\nif(HPX_WITH_IO_COUNTERS AND HPX_WITH_DISTRIBUTED_RUNTIME)\n  if(NOT \"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    hpx_error(\n      \"HPX_WITH_IO_COUNTERS was set to ON, but IO counters are only available on Linux (this is \\\"${CMAKE_SYSTEM_NAME}\\\")\"\n    )\n  endif()\n  hpx_add_config_define(HPX_HAVE_IO_COUNTERS)\nendif()\n\nset(HPX_FULL_RPATH_DEFAULT ON)\nif(APPLE OR WIN32)\n  set(HPX_FULL_RPATH_DEFAULT OFF)\nendif()\nhpx_option(\n  HPX_WITH_FULL_RPATH\n  BOOL\n  \"Build and link HPX libraries and executables with full RPATHs (default: ${HPX_FULL_RPATH_DEFAULT})\"\n  ${HPX_FULL_RPATH_DEFAULT}\n  ADVANCED\n)\n\n# ##############################################################################\n# HPX CUDA configuration\n# ##############################################################################\nset(CUDA_OPTION_STRING \"Enable support for CUDA (default: OFF)\")\nset(HIP_OPTION_STRING \"Enable compilation with HIPCC (default: OFF)\")\nhpx_option(HPX_WITH_CUDA BOOL \"${CUDA_OPTION_STRING}\" OFF ADVANCED)\n\n# No need for the user to specify the option explicitly\nhpx_option(HPX_WITH_HIP BOOL \"${HIP_OPTION_STRING}\" OFF ADVANCED)\nif(\"${CMAKE_CXX_COMPILER}\" MATCHES \"hipcc$\")\n  set(HPX_WITH_HIP\n      ON\n      CACHE BOOL \"${HIP_OPTION_STRING}\" FORCE\n  )\nendif()\n\nif(HPX_WITH_CUDA AND HPX_WITH_HIP)\n  hpx_error(\n    \"HPX_WITH_CUDA=ON and HPX_WITH_HIP=ON. Only one of them can be on at the same time.\\\n Note: HPX_WITH_HIP is automatically enabled when compiling with hipcc.\"\n  )\nendif()\n\n# ## HPX STDEXEC configuration ##\n\nhpx_option(\n  HPX_WITH_STDEXEC BOOL\n  \"Use STDEXEC executors instead of native HPX.(default: OFF)\" OFF\n  CATEGORY \"Executor\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_FETCH_STDEXEC BOOL \"Use FetchContent to fetch STDEXEC.(default: ON)\"\n  ON\n  CATEGORY \"Executor\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_STDEXEC_TAG STRING \"STDEXEC repository tag or branch\" \"main\"\n  CATEGORY \"Executor\"\n)\n\n# ##############################################################################\n# HPX SYCL configuration\n# ##############################################################################\nset(SYCL_OPTION_STRING \"Enable support for Sycl (default: OFF)\")\nhpx_option(HPX_WITH_SYCL BOOL \"${SYCL_OPTION_STRING}\" OFF ADVANCED)\nset(SYCL_OPTION_STRING\n    \"Sycl compile flags for selecting specific targets (default: empty)\"\n)\nhpx_option(HPX_WITH_SYCL_FLAGS STRING \"${SYCL_OPTION_STRING}\" \"\" ADVANCED)\nset(HIPSYCL_OPTION_STRING \"Use hipsycl cmake integration (default: OFF)\")\nhpx_option(HPX_WITH_HIPSYCL BOOL \"${HIPSYCL_OPTION_STRING}\" OFF ADVANCED)\n\n# ##############################################################################\n# pkgconfig file generation\n# ##############################################################################\nset(HPX_WITH_PKGCONFIG_DEFAULT ON)\nif(APPLE\n   OR MSVC\n   OR HPX_WITH_CUDA\n   OR HPX_WITH_HIP\n   OR HPX_WITH_PARCELPORT_LCI\n)\n  set(HPX_WITH_PKGCONFIG_DEFAULT OFF)\nendif()\n\nhpx_option(\n  HPX_WITH_PKGCONFIG\n  BOOL\n  \"Enable generation of pkgconfig files (default: ON on Linux without CUDA/HIP, otherwise OFF)\"\n  ${HPX_WITH_PKGCONFIG_DEFAULT}\n  ADVANCED\n)\n\n# ##############################################################################\n# Threadlevel Nice option\n# ##############################################################################\nhpx_option(\n  HPX_WITH_NICE_THREADLEVEL\n  BOOL\n  \"Set HPX worker threads to have high NICE level (may impact performance) (default: OFF)\"\n  OFF\n  ADVANCED\n)\nif(HPX_WITH_NICE_THREADLEVEL)\n  hpx_info(\"Nice threadlevel is enabled.\")\n  hpx_add_config_define(HPX_HAVE_NICE_THREADLEVEL)\nelse()\n  hpx_info(\"Nice threadlevel is disabled.\")\nendif()\n\n# ##############################################################################\n# Utility configuration\n# ##############################################################################\nset(HPX_HIDDEN_VISIBILITY_DEFAULT ON)\nif(CMAKE_COMPILER_IS_GNUCXX)\n  if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n    set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\n  endif()\nendif()\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n  set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\nendif()\nif(APPLE)\n  set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\nendif()\n\nhpx_option(\n  HPX_WITH_HIDDEN_VISIBILITY\n  BOOL\n  \"Use -fvisibility=hidden for builds on platforms which support it (default ${HPX_HIDDEN_VISIBILITY_DEFAULT})\"\n  ${HPX_HIDDEN_VISIBILITY_DEFAULT}\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION\n  BOOL\n  \"Use automatic serialization registration for actions and functions. This affects compatibility between HPX applications compiled with different compilers (default ON)\"\n  ON\n  ADVANCED\n)\nif(HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION)\n  hpx_add_config_define(HPX_HAVE_AUTOMATIC_SERIALIZATION_REGISTRATION)\nendif()\n\nhpx_option(\n  HPX_WITH_ZERO_COPY_SERIALIZATION_THRESHOLD\n  STRING\n  \"The threshold in bytes to when perform zero copy optimizations (default: 8192)\"\n  \"8192\"\n  ADVANCED\n)\nhpx_add_config_define(\n  HPX_ZERO_COPY_SERIALIZATION_THRESHOLD\n  ${HPX_WITH_ZERO_COPY_SERIALIZATION_THRESHOLD}\n)\n\nhpx_option(\n  HPX_WITH_DISABLED_SIGNAL_EXCEPTION_HANDLERS\n  BOOL\n  \"Disables the mechanism that produces debug output for caught signals and unhandled exceptions (default: OFF)\"\n  OFF\n  ADVANCED\n)\nif(HPX_WITH_DISABLED_SIGNAL_EXCEPTION_HANDLERS)\n  hpx_add_config_define(HPX_HAVE_DISABLED_SIGNAL_EXCEPTION_HANDLERS)\nendif()\n\n# Thread Manager related build options\n\nset(HPX_MAX_CPU_COUNT_DEFAULT \"\")\nhpx_option(\n  HPX_WITH_MAX_CPU_COUNT\n  STRING\n  \"HPX applications will not use more that this number of OS-Threads (empty string means dynamic) (default: \\\"${HPX_MAX_CPU_COUNT_DEFAULT}\\\")\"\n  \"${HPX_MAX_CPU_COUNT_DEFAULT}\"\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\nif(HPX_WITH_MAX_CPU_COUNT)\n  hpx_add_config_define(HPX_HAVE_MAX_CPU_COUNT ${HPX_WITH_MAX_CPU_COUNT})\nendif()\nif((NOT HPX_WITH_MAX_CPU_COUNT) OR (HPX_WITH_MAX_CPU_COUNT GREATER 64))\n  hpx_add_config_define(HPX_HAVE_MORE_THAN_64_THREADS)\nendif()\n\nset(HPX_MAX_NUMA_DOMAIN_COUNT_DEFAULT \"8\")\nhpx_option(\n  HPX_WITH_MAX_NUMA_DOMAIN_COUNT\n  STRING\n  \"HPX applications will not run on machines with more NUMA domains (default: ${HPX_MAX_NUMA_DOMAIN_COUNT_DEFAULT})\"\n  ${HPX_MAX_NUMA_DOMAIN_COUNT_DEFAULT}\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\nhpx_add_config_define(\n  HPX_HAVE_MAX_NUMA_DOMAIN_COUNT ${HPX_WITH_MAX_NUMA_DOMAIN_COUNT}\n)\n\nhpx_option(\n  HPX_WITH_THREAD_STACK_MMAP BOOL\n  \"Use mmap for stack allocation on appropriate platforms\" ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF BOOL\n  \"HPX scheduler threads do exponential backoff on idle queues (default: ON)\" ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_STACKTRACES BOOL \"Attach backtraces to HPX exceptions (default: ON)\"\n  ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION BOOL\n  \"Enable thread stack back trace being captured on suspension (default: OFF)\"\n  OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\n# We create a target to contain libraries like rt, dl etc. in order to remove\n# global variables\nadd_library(hpx_base_libraries INTERFACE)\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n  target_link_libraries(hpx_base_libraries INTERFACE imf svml irng intlc)\nendif()\n\nif(HPX_WITH_STACKTRACES OR HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION)\n  hpx_info(\"Stack traces are enabled.\")\n  hpx_add_config_define(HPX_HAVE_STACKTRACES)\n  if(WIN32)\n    target_link_libraries(hpx_base_libraries INTERFACE dbghelp)\n  endif()\n\n  hpx_option(\n    HPX_WITH_THREAD_BACKTRACE_DEPTH STRING\n    \"Thread stack back trace depth being captured (default: 20)\" \"20\"\n    CATEGORY \"Thread Manager\"\n    ADVANCED\n  )\n  hpx_add_config_define(\n    HPX_HAVE_THREAD_BACKTRACE_DEPTH ${HPX_WITH_THREAD_BACKTRACE_DEPTH}\n  )\n\n  if((\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n     AND (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\"\n          OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  )\n\n    # This option is OFF by default as we have seen random segfaults out in the\n    # wild if this is enabled.\n    hpx_option(\n      HPX_WITH_STACKTRACES_STATIC_SYMBOLS BOOL\n      \"Thread stack back trace will resolve static symbols (default: OFF)\" OFF\n      CATEGORY \"Thread Manager\"\n      ADVANCED\n    )\n    hpx_add_config_define(\n      HPX_HAVE_STACKTRACES_STATIC_SYMBOLS\n      ${HPX_WITH_STACKTRACES_STATIC_SYMBOLS}\n    )\n\n    # Demangling can segfault in certain configurations.\n    hpx_option(\n      HPX_WITH_STACKTRACES_DEMANGLE_SYMBOLS BOOL\n      \"Thread stack back trace symbols will be demangled (default: ON)\" ON\n      CATEGORY \"Thread Manager\"\n      ADVANCED\n    )\n    if(HPX_WITH_STACKTRACES_DEMANGLE_SYMBOLS)\n      hpx_add_config_define(HPX_HAVE_STACKTRACES_DEMANGLE_SYMBOLS)\n    endif()\n  endif()\nendif()\n\nif(HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION)\n  hpx_add_config_define(HPX_HAVE_THREAD_BACKTRACE_ON_SUSPENSION)\n\n  hpx_option(\n    HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION BOOL\n    \"Enable thread stack back trace being captured on suspension (default: OFF)\"\n    OFF\n    CATEGORY \"Thread Manager\"\n    ADVANCED\n  )\n  if(HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION)\n    hpx_add_config_define(HPX_HAVE_THREAD_FULLBACKTRACE_ON_SUSPENSION)\n  endif()\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_TARGET_ADDRESS BOOL\n  \"Enable storing target address in thread for NUMA awareness (default: OFF)\"\n  OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_TARGET_ADDRESS)\n  hpx_add_config_define(HPX_HAVE_THREAD_TARGET_ADDRESS)\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_QUEUE_WAITTIME BOOL\n  \"Enable collecting queue wait times for threads (default: OFF)\" OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_QUEUE_WAITTIME)\n  hpx_add_config_define(HPX_HAVE_THREAD_QUEUE_WAITTIME)\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_IDLE_RATES\n  BOOL\n  \"Enable measuring the percentage of overhead times spent in the scheduler (default: OFF)\"\n  OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES BOOL\n  \"Enable measuring thread creation and cleanup times (default: OFF)\" OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_IDLE_RATES)\n  hpx_add_config_define(HPX_HAVE_THREAD_IDLE_RATES)\n  if(HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES)\n    hpx_add_config_define(HPX_HAVE_THREAD_CREATION_AND_CLEANUP_RATES)\n  endif()\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_CUMULATIVE_COUNTS\n  BOOL\n  \"Enable keeping track of cumulative thread counts in the schedulers (default: ON)\"\n  ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_CUMULATIVE_COUNTS)\n  hpx_add_config_define(HPX_HAVE_THREAD_CUMULATIVE_COUNTS)\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_STEALING_COUNTS\n  BOOL\n  \"Enable keeping track of counts of thread stealing incidents in the schedulers (default: OFF)\"\n  OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_STEALING_COUNTS)\n  hpx_add_config_define(HPX_HAVE_THREAD_STEALING_COUNTS)\nendif()\n\nhpx_option(\n  HPX_WITH_COROUTINE_COUNTERS BOOL\n  \"Enable keeping track of coroutine creation and rebind counts (default: OFF)\"\n  OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\nif(HPX_WITH_COROUTINE_COUNTERS)\n  hpx_add_config_define(HPX_HAVE_COROUTINE_COUNTERS)\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_LOCAL_STORAGE BOOL\n  \"Enable thread local storage for all HPX threads (default: OFF)\" OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_THREAD_LOCAL_STORAGE)\n  hpx_add_config_define(HPX_HAVE_THREAD_LOCAL_STORAGE)\nendif()\n\nhpx_option(\n  HPX_WITH_SCHEDULER_LOCAL_STORAGE BOOL\n  \"Enable scheduler local storage for all HPX schedulers (default: OFF)\" OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_SCHEDULER_LOCAL_STORAGE)\n  hpx_add_config_define(HPX_HAVE_SCHEDULER_LOCAL_STORAGE)\nendif()\n\nset(HPX_WITH_WORK_REQUESTING_SCHEDULERS_DEFAULT ON)\nif(APPLE)\n  set(HPX_WITH_WORK_REQUESTING_SCHEDULERS_DEFAULT OFF)\nendif()\n\nhpx_option(\n  HPX_WITH_WORK_REQUESTING_SCHEDULERS\n  BOOL\n  \"Enable work requesting scheduler (default: ${HPX_WITH_WORK_REQUESTING_SCHEDULERS_DEFAULT})\"\n  ${HPX_WITH_WORK_REQUESTING_SCHEDULERS_DEFAULT}\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_WORK_REQUESTING_SCHEDULERS)\n  hpx_add_config_define(HPX_HAVE_WORK_REQUESTING_SCHEDULERS)\nendif()\n\nhpx_option(\n  HPX_WITH_SPINLOCK_POOL_NUM STRING\n  \"Number of elements a spinlock pool manages (default: 128)\" 128\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nhpx_add_config_define(HPX_HAVE_SPINLOCK_POOL_NUM ${HPX_WITH_SPINLOCK_POOL_NUM})\n\nhpx_option(\n  HPX_WITH_SPINLOCK_DEADLOCK_DETECTION BOOL\n  \"Enable spinlock deadlock detection (default: OFF)\" OFF\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\n\nif(HPX_WITH_SPINLOCK_DEADLOCK_DETECTION)\n  hpx_add_config_define(HPX_HAVE_SPINLOCK_DEADLOCK_DETECTION)\nendif()\n\n# Profiling related build options\nhpx_option(\n  HPX_WITH_APEX BOOL \"Enable APEX instrumentation support.\" OFF\n  CATEGORY \"Profiling\"\n)\n\nhpx_option(\n  HPX_WITH_FETCH_APEX\n  BOOL\n  \"Use FetchContent to fetch APEX. By default an installed APEX will be used. (default: OFF)\"\n  OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\nif(HPX_WITH_APEX)\n  hpx_add_config_define(HPX_HAVE_APEX) # tell HPX that we use APEX\n  hpx_option(\n    HPX_WITH_APEX_NO_UPDATE BOOL\n    \"Do not update code from remote APEX repository.\" OFF CATEGORY \"Profiling\"\n  )\n  hpx_option(\n    HPX_WITH_APEX_TAG STRING \"APEX repository tag or branch\" \"v2.6.5\"\n    CATEGORY \"Profiling\"\n  )\nendif()\n\nhpx_option(\n  HPX_WITH_FETCH_BOOST\n  BOOL\n  \"Use FetchContent to fetch Boost. By default an installed Boost will be used. (default: OFF)\"\n  OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\n# Options for automatically fetching Asio\nhpx_option(\n  HPX_WITH_FETCH_ASIO\n  BOOL\n  \"Use FetchContent to fetch Asio. By default an installed Asio will be used. (default: OFF)\"\n  OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\nset(HPX_WITH_ASIO_TAG_DEFAULT \"asio-1-21-0\")\nif(HPX_WITH_HIP)\n  # newer versions of Asio currently fail when compiled with HIPCC\n  set(HPX_WITH_ASIO_TAG_DEFAULT \"asio-1-16-0\")\nendif()\nhpx_option(\n  HPX_WITH_ASIO_TAG STRING \"Asio repository tag or branch\"\n  ${HPX_WITH_ASIO_TAG_DEFAULT}\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\n# Option for automatically fetching Hwloc\nhpx_option(\n  HPX_WITH_FETCH_HWLOC\n  BOOL\n  \"Use FetchContent to fetch Hwloc. By default an installed Hwloc will be used. (default: OFF)\"\n  OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_NANOBENCH\n  BOOL\n  \"Use Nanobench for performance tests. Nanobench will be fetched using FetchContent (default: OFF)\"\n  OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\n\n# cmake-format: off\n# LibCDS option\n# NOTE: The libcds option is disabled for the 1.5.0 release as it is not ready\n# for public consumption yet.\n# hpx_option(\n#   HPX_WITH_LIBCDS BOOL \"Enable LibCDS support (experimental).\" OFF\n#   CATEGORY \"Thread Manager\" ADVANCED\n# )\n# if(HPX_WITH_LIBCDS)\n#   hpx_option(\n#     HPX_WITH_LIBCDS_GIT_REPOSITORY STRING\n#     \"Define the LibCDS git repository to use.\"\n#     https://github.com/STEllAR-GROUP/libcds CATEGORY \"Thread Manager\" ADVANCED\n#   )\n#   hpx_option(\n#     HPX_WITH_LIBCDS_GIT_TAG STRING \"Define the LibCDS git tag to use.\" hpx-1.5\n#     CATEGORY \"Thread Manager\" ADVANCED\n#   )\n#   include(HPX_SetupLibCDS)\n#   if(NOT libcds_POPULATED)\n#     hpx_error(\"HPX_WITH_LIBCDS was set to ON, but HPX failed to fetch LibCDS\")\n#   endif()\n#   hpx_add_config_define(HPX_HAVE_LIBCDS) # tell HPX that we use LibCDS\n# endif()\n# cmake-format: on\n\nhpx_option(\n  HPX_WITH_PAPI BOOL \"Enable the PAPI based performance counter.\" OFF\n  CATEGORY \"Profiling\"\n)\nif(HPX_WITH_PAPI)\n  if(NOT HPX_WITH_DISTRIBUTED_RUNTIME)\n    hpx_error(\n      \"HPX_WITH_PAPI was set to ON, but PAPI cannot currently be used with HPX_WITH_DISTRIBUTED_RUNTIME=OFF\"\n    )\n  endif()\n  if(NOT \"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    hpx_error(\n      \"HPX_WITH_PAPI was set to ON, but PAPI can only be used on Linux (this is ${CMAKE_SYSTEM_NAME})\"\n    )\n  endif()\n  hpx_add_config_define(HPX_HAVE_PAPI)\nendif()\n\nhpx_option(\n  HPX_WITH_ITTNOTIFY BOOL \"Enable Amplifier (ITT) instrumentation support.\" OFF\n  CATEGORY \"Profiling\"\n)\n\n# Experimental settings\nhpx_option(\n  HPX_WITH_IO_POOL\n  BOOL\n  \"Disable internal IO thread pool, do not change if not absolutely necessary (default: ON)\"\n  ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\nif(HPX_WITH_IO_POOL)\n  hpx_add_config_define(HPX_HAVE_IO_POOL)\nendif()\n\nhpx_option(\n  HPX_WITH_TIMER_POOL\n  BOOL\n  \"Disable internal timer thread pool, do not change if not absolutely necessary (default: ON)\"\n  ON\n  CATEGORY \"Thread Manager\"\n  ADVANCED\n)\nif(HPX_WITH_TIMER_POOL)\n  hpx_add_config_define(HPX_HAVE_TIMER_POOL)\nendif()\n\n# AGAS related build options\nhpx_option(\n  HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES BOOL\n  \"Enable dumps of the AGAS refcnt tables to logs (default: OFF)\" OFF\n  CATEGORY \"AGAS\"\n  ADVANCED\n)\nif(HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES)\n  hpx_add_config_define(HPX_HAVE_AGAS_DUMP_REFCNT_ENTRIES)\nendif()\n\n# Should networking be supported?\nhpx_option(\n  HPX_WITH_NETWORKING BOOL\n  \"Enable support for networking and multi-node runs (default: ON)\" ON\n  CATEGORY \"Parcelport\"\n)\n\nif(HPX_WITH_NETWORKING AND NOT HPX_WITH_DISTRIBUTED_RUNTIME)\n  hpx_error(\"HPX_WITH_NETWORKING=ON requires HPX_WITH_DISTRIBUTED_RUNTIME=ON\")\nendif()\n\nif(HPX_WITH_APEX AND NOT HPX_WITH_DISTRIBUTED_RUNTIME)\n  hpx_error(\"HPX_WITH_DISTRIBUTED_RUNTIME=OFF requires HPX_WITH_APEX=OFF\")\nendif()\n\nif(HPX_WITH_NETWORKING)\n  hpx_add_config_define(HPX_HAVE_NETWORKING)\n\n  # Parcelport related build options\n  set(_parcel_profiling_default OFF)\n  if(HPX_WITH_APEX)\n    set(_parcel_profiling_default ON)\n  endif()\n\n  hpx_option(\n    HPX_WITH_PARCEL_PROFILING BOOL \"Enable profiling data for parcels\"\n    ${_parcel_profiling_default}\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n\n  if(HPX_WITH_PARCEL_PROFILING)\n    hpx_add_config_define(HPX_HAVE_PARCEL_PROFILING)\n  endif()\n\n  # Parcelport related build options and #define in global defines.hpp\n  hpx_option(\n    HPX_WITH_PARCELPORT_LIBFABRIC\n    BOOL\n    \"Enable the libfabric based parcelport. This is currently an experimental feature\"\n    OFF\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n  if(HPX_WITH_PARCELPORT_LIBFABRIC)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_LIBFABRIC)\n  endif()\n\n  hpx_option(\n    HPX_WITH_PARCELPORT_MPI BOOL \"Enable the MPI based parcelport.\" OFF\n    CATEGORY \"Parcelport\"\n  )\n  if(HPX_WITH_PARCELPORT_MPI)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_MPI)\n  endif()\n\n  # we have to decide here whether we want to have MPI futures\n  hpx_option(\n    HPX_WITH_ASYNC_MPI\n    BOOL\n    \"Enable support for returning futures from MPI asynchronous calls (default: ON if networking+MPI already enabled)\"\n    ${HPX_WITH_PARCELPORT_MPI}\n    CATEGORY \"MPI\"\n  )\n\n  hpx_option(\n    HPX_WITH_PARCELPORT_LCI BOOL \"Enable the LCI based parcelport.\" OFF\n    CATEGORY \"Parcelport\"\n  )\n  if(HPX_WITH_PARCELPORT_LCI)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_LCI)\n  endif()\n  # Options for automatically fetching LCI\n  hpx_option(\n    HPX_WITH_FETCH_LCI\n    BOOL\n    \"Use FetchContent to fetch LCI. By default an installed LCI will be used. (default: OFF)\"\n    OFF\n    CATEGORY \"Build Targets\"\n    ADVANCED\n  )\n  hpx_option(\n    HPX_WITH_LCI_TAG STRING \"LCI repository tag or branch\" \"v1.7.7\"\n    CATEGORY \"Build Targets\"\n    ADVANCED\n  )\n  hpx_option(\n    HPX_WITH_PARCELPORT_LCI_LOG STRING\n    \"Enable the LCI-parcelport-specific logger\" OFF\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n  if(HPX_WITH_PARCELPORT_LCI_LOG)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_LCI_LOG)\n  endif()\n  hpx_option(\n    HPX_WITH_PARCELPORT_LCI_PCOUNTER STRING\n    \"Enable the LCI-parcelport-specific performance counter\" OFF\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n  if(HPX_WITH_PARCELPORT_LCI_PCOUNTER)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_LCI_PCOUNTER)\n  endif()\n\n  hpx_option(\n    HPX_WITH_PARCELPORT_GASNET BOOL \"Enable the GASNET based parcelport.\" OFF\n    CATEGORY \"Parcelport\"\n  )\n  hpx_option(\n    HPX_WITH_FETCH_GASNET\n    BOOL\n    \"Use FetchContent to fetch GASNET. By default an installed GASNET will be used. (default: OFF).\"\n    OFF\n    CATEGORY \"Build Targets\"\n    ADVANCED\n  )\n  if(HPX_WITH_PARCELPORT_GASNET)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_GASNET)\n    hpx_option(\n      HPX_WITH_PARCELPORT_GASNET_CONDUIT STRING\n      \"Define which conduit to use for the gasnet parcelport\" \"udp\"\n      STRINGS \"smp;udp;mpi;ofi;ucx\"\n    )\n  endif()\n\n  hpx_option(\n    HPX_WITH_PARCELPORT_TCP BOOL \"Enable the TCP based parcelport.\" ON\n    CATEGORY \"Parcelport\"\n  )\n  if(HPX_WITH_PARCELPORT_TCP)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_TCP)\n  endif()\n  hpx_option(\n    HPX_WITH_PARCELPORT_COUNTERS BOOL\n    \"Enable performance counters reporting parcelport statistics.\" OFF\n    CATEGORY \"Parcelport\"\n  )\n  if(HPX_WITH_PARCELPORT_COUNTERS)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_COUNTERS)\n  endif()\n  hpx_option(\n    HPX_WITH_PARCELPORT_ACTION_COUNTERS\n    BOOL\n    \"Enable performance counters reporting parcelport statistics on a per-action basis.\"\n    OFF\n    CATEGORY \"Parcelport\"\n  )\n  if(HPX_WITH_PARCELPORT_ACTION_COUNTERS)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_ACTION_COUNTERS)\n  endif()\n  if(HPX_WITH_NANOBENCH)\n    hpx_add_config_define(HPX_HAVE_NANOBENCH)\n    include(HPX_SetupNanobench)\n  endif()\nelse(HPX_WITH_NETWORKING)\n  # if networking is off,  then allow the option of using our asynchronous MPI\n  # features\n  hpx_option(\n    HPX_WITH_ASYNC_MPI\n    BOOL\n    \"Enable support for returning futures from MPI asynchronous calls (default: ON if networking+MPI already enabled)\"\n    OFF\n    CATEGORY \"MPI\"\n  )\nendif(HPX_WITH_NETWORKING)\n\nif((HPX_WITH_NETWORKING AND HPX_WITH_PARCELPORT_MPI)\n   OR HPX_WITH_ASYNC_MPI\n   OR (\"${HPX_WITH_PARCELPORT_GASNET_CONDUIT}\" STREQUAL \"mpi\")\n)\n  # mpi parcelport settings\n  hpx_option(\n    HPX_WITH_PARCELPORT_MPI_ENV\n    STRING\n    \"List of environment variables checked to detect MPI (default: MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE;PMIX_RANK;PALS_NODEID).\"\n    \"MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE;PMIX_RANK;PALS_NODEID\"\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n\n  # This list is to detect whether we run inside an mpi environment. If one of\n  # those environment variables is set, the MPI parcelport is enabled by\n  # default. PMI_RANK: Intel MPI and MVAPICH2 OMPI_COMM_WORLD_SIZE: OpenMPI\n  # starting at version 1.3\n  if(HPX_WITH_PARCELPORT_MPI_ENV)\n    string(REPLACE \";\" \",\" hpx_parcelport_mpi_env_\n                   \"${HPX_WITH_PARCELPORT_MPI_ENV}\"\n    )\n    hpx_add_config_define(\n      HPX_HAVE_PARCELPORT_MPI_ENV \"\\\"${hpx_parcelport_mpi_env_}\\\"\"\n    )\n  endif()\n\n  hpx_option(\n    HPX_WITH_PARCELPORT_MPI_MULTITHREADED BOOL\n    \"Turn on MPI multithreading support (default: ON).\" ON\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n  if(HPX_WITH_PARCELPORT_MPI_MULTITHREADED)\n    hpx_add_config_define(HPX_HAVE_PARCELPORT_MPI_MULTITHREADED)\n  endif()\n\n  if(MSVC)\n    # FIXME: add OpenMPI specific flag here for now as the\n    # hpx_add_compile_flag() below does not add the extra options to the top\n    # level directory\n    hpx_add_config_define(OMPI_IMPORTS)\n  endif()\nendif()\n\nif(HPX_WITH_NETWORKING AND HPX_WITH_PARCELPORT_LCI)\n  # lci parcelport settings\n  hpx_option(\n    HPX_WITH_PARCELPORT_LCI_ENV\n    STRING\n    \"List of environment variables checked to detect LCI (default: MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE;PMIX_RANK;PALS_NODEID).\"\n    \"MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE;PMIX_RANK;PALS_NODEID\"\n    CATEGORY \"Parcelport\"\n    ADVANCED\n  )\n\n  # This list is to detect whether we run inside an lci environment. If one of\n  # those environment variables is set, the LCI parcelport is enabled by\n  # default. PMI_RANK: Intel MPI and MVAPICH2 OMPI_COMM_WORLD_SIZE: OpenMPI\n  # starting at version 1.3\n  if(HPX_WITH_PARCELPORT_LCI_ENV)\n    string(REPLACE \";\" \",\" hpx_parcelport_lci_env_\n                   \"${HPX_WITH_PARCELPORT_LCI_ENV}\"\n    )\n    hpx_add_config_define(\n      HPX_HAVE_PARCELPORT_LCI_ENV \"\\\"${hpx_parcelport_lci_env_}\\\"\"\n    )\n  endif()\nendif()\n\n# External libraries/frameworks used by some of the examples and benchmarks\nhpx_option(\n  HPX_WITH_EXAMPLES_OPENMP BOOL\n  \"Enable examples requiring OpenMP support (default: OFF).\" OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\nif(HPX_WITH_EXAMPLES_OPENMP)\n  find_package(OpenMP REQUIRED)\nendif()\nhpx_option(\n  HPX_WITH_EXAMPLES_TBB BOOL\n  \"Enable examples requiring TBB support (default: OFF).\" OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\nif(HPX_WITH_EXAMPLES_TBB)\n  find_package(TBB)\n  if(NOT Tbb_FOUND)\n    set(HPX_WITH_EXAMPLES_TBB OFF)\n  endif()\nendif()\nhpx_option(\n  HPX_WITH_EXAMPLES_QTHREADS BOOL\n  \"Enable examples requiring QThreads support (default: OFF).\" OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\nif(HPX_WITH_EXAMPLES_QTHREADS)\n  find_package(QThreads)\n  if(NOT Qthreads_FOUND)\n    set(HPX_WITH_EXAMPLES_QTHREADS OFF)\n  endif()\nendif()\n\nhpx_option(\n  HPX_WITH_EXAMPLES_HDF5 BOOL\n  \"Enable examples requiring HDF5 support (default: OFF).\" OFF\n  CATEGORY \"Build Targets\"\n  ADVANCED\n)\nif(HPX_WITH_EXAMPLES_HDF5)\n  find_package(HDF5 COMPONENTS CXX)\n  if(NOT Hdf5_FOUND)\n    set(HPX_WITH_EXAMPLES_HDF5 OFF)\n  endif()\nendif()\n\n# Disabling the Qt example on BG/Q as GUIs don't make sense there anyways\nif(NOT \"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n  hpx_option(\n    HPX_WITH_EXAMPLES_QT4 BOOL\n    \"Enable examples requiring Qt4 support (default: OFF).\" OFF\n    CATEGORY \"Build Targets\"\n    ADVANCED\n  )\n  if(HPX_WITH_EXAMPLES_QT4)\n    find_package(Qt4)\n    if(NOT Qt4_FOUND)\n      set(HPX_WITH_EXAMPLES_QT4 OFF)\n    endif()\n  endif()\nendif()\n\n# Debugging related build options\nhpx_option(\n  HPX_WITH_VALGRIND BOOL \"Enable Valgrind instrumentation support.\" OFF\n  CATEGORY \"Debugging\"\n)\n\nhpx_option(\n  HPX_WITH_SANITIZERS BOOL \"Configure with sanitizer instrumentation support.\"\n  OFF CATEGORY \"Debugging\"\n)\n\nhpx_option(\n  HPX_WITH_VERIFY_LOCKS BOOL\n  \"Enable lock verification code (default: OFF, enabled in debug builds)\" OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\nhpx_option(\n  HPX_WITH_VERIFY_LOCKS_BACKTRACE\n  BOOL\n  \"Enable thread stack back trace being captured on lock registration (to be used in combination with HPX_WITH_VERIFY_LOCKS=ON, default: OFF)\"\n  OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\nhpx_option(\n  HPX_WITH_THREAD_DEBUG_INFO\n  BOOL\n  \"Enable thread debugging information (default: OFF, implicitly enabled in debug builds)\"\n  OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\nhpx_option(\n  HPX_WITH_THREAD_GUARD_PAGE BOOL \"Enable thread guard page (default: ON)\" ON\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nif(HPX_WITH_VERIFY_LOCKS)\n  hpx_add_config_define(HPX_HAVE_VERIFY_LOCKS)\n  if(HPX_WITH_VERIFY_LOCKS_BACKTRACE)\n    hpx_add_config_define(HPX_HAVE_VERIFY_LOCKS_BACKTRACE)\n  endif()\nendif()\n\n# Additional debug support\nif(NOT WIN32 AND HPX_WITH_THREAD_GUARD_PAGE)\n  hpx_add_config_define(HPX_HAVE_THREAD_GUARD_PAGE)\nendif()\n\nif(NOT WIN32 AND HPX_WITH_THREAD_STACK_MMAP)\n  hpx_add_config_define(HPX_HAVE_THREAD_STACK_MMAP)\nendif()\n\nif(HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF)\n  hpx_add_config_define(HPX_HAVE_THREAD_MANAGER_IDLE_BACKOFF)\nendif()\n\nhpx_option(\n  HPX_WITH_THREAD_DESCRIPTION_FULL BOOL\n  \"Use function address for thread description (default: OFF)\" OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_ATTACH_DEBUGGER_ON_TEST_FAILURE BOOL\n  \"Break the debugger if a test has failed  (default: OFF)\" OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\nif(HPX_WITH_ATTACH_DEBUGGER_ON_TEST_FAILURE)\n  hpx_add_config_define(HPX_HAVE_ATTACH_DEBUGGER_ON_TEST_FAILURE)\nendif()\n\nhpx_option(\n  HPX_WITH_TESTS_DEBUG_LOG BOOL\n  \"Turn on debug logs (--hpx:debug-hpx-log) for tests (default: OFF)\" OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_TESTS_DEBUG_LOG_DESTINATION STRING\n  \"Destination for test debug logs (default: cout)\" \"cout\"\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_TESTS_COMMAND_LINE STRING\n  \"Add given command line options to all tests run\" \"\"\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_TESTS_MAX_THREADS_PER_LOCALITY\n  STRING\n  \"Maximum number of threads to use for tests (default: 0, use the number of threads specified by the test)\"\n  0\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\nhpx_option(\n  HPX_WITH_PARALLEL_TESTS_BIND_NONE\n  BOOL\n  \"Pass --hpx:bind=none to tests that may run in parallel (cmake -j flag) (default: OFF)\"\n  OFF\n  CATEGORY \"Debugging\"\n  ADVANCED\n)\n\n# If APEX is defined, the action timers need thread debug info.\nif(HPX_WITH_APEX)\n  hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION)\n  if(HPX_WITH_THREAD_DESCRIPTION_FULL)\n    hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION_FULL)\n  endif()\nendif()\n\nif(HPX_WITH_THREAD_DEBUG_INFO)\n  hpx_add_config_define(HPX_HAVE_THREAD_TARGET_ADDRESS)\n  hpx_add_config_define(HPX_HAVE_THREAD_PARENT_REFERENCE)\n  hpx_add_config_define(HPX_HAVE_THREAD_PHASE_INFORMATION)\n  hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION)\n  if(HPX_WITH_THREAD_DESCRIPTION_FULL)\n    hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION_FULL)\n  endif()\n  hpx_add_config_define(HPX_HAVE_THREAD_MINIMAL_DEADLOCK_DETECTION)\nendif()\n\n# run hpx_main on all localities by default (will be removed after V1.11.0)\nhpx_option(\n  HPX_WITH_RUN_MAIN_EVERYWHERE\n  BOOL\n  \"Run hpx_main by default on all localities (default: OFF, deprecated, will be removed).\"\n  OFF\n  ADVANCED\n)\nif(HPX_WITH_RUN_MAIN_EVERYWHERE)\n  hpx_info(\"Note: the configuration parameter HPX_WITH_RUN_MAIN_EVERYWHERE is\\n\"\n           \"     deprecated and will be removed in the future.\"\n  )\n  hpx_add_config_define(HPX_HAVE_RUN_MAIN_EVERYWHERE)\nendif()\n\nif(HPX_WITH_NETWORKING)\n  # Options for our plugins\n  hpx_option(\n    HPX_WITH_COMPRESSION_BZIP2 BOOL\n    \"Enable bzip2 compression for parcel data (default: OFF).\" OFF ADVANCED\n  )\n  hpx_option(\n    HPX_WITH_COMPRESSION_SNAPPY BOOL\n    \"Enable snappy compression for parcel data (default: OFF).\" OFF ADVANCED\n  )\n  hpx_option(\n    HPX_WITH_COMPRESSION_ZLIB BOOL\n    \"Enable zlib compression for parcel data (default: OFF).\" OFF ADVANCED\n  )\n\n  # Parcel coalescing is used by the main HPX library, enable it always\n  hpx_option(\n    HPX_WITH_PARCEL_COALESCING BOOL\n    \"Enable the parcel coalescing plugin (default: ON).\" ON ADVANCED\n  )\n  if(HPX_WITH_PARCEL_COALESCING)\n    hpx_add_config_define(HPX_HAVE_PARCEL_COALESCING)\n    # Adaptive parcel coalescing related metrics counters are enabled only if\n    # both parcel coalescing plugin and thread idle rate counters are enabled.\n    if(HPX_WITH_THREAD_IDLE_RATES)\n      hpx_option(\n        HPX_WITH_BACKGROUND_THREAD_COUNTERS\n        BOOL\n        \"Enable performance counters related to adaptive parcel coalescing (default: OFF).\"\n        OFF\n        ADVANCED\n      )\n      if(HPX_WITH_BACKGROUND_THREAD_COUNTERS)\n        hpx_add_config_define(HPX_HAVE_BACKGROUND_THREAD_COUNTERS)\n      endif()\n    endif()\n  endif()\nendif()\n\n# Developer tools\nhpx_option(\n  HPX_WITH_VIM_YCM BOOL\n  \"Generate HPX completion file for VIM YouCompleteMe plugin\" OFF ADVANCED\n)\n\n# ##############################################################################\n# Backwards compatibility options (edit for each release)\n\n# BADBAD: This enables an overload of swap which is necessary to work around the\n# problems caused by zip_iterator not being a real random access iterator.\n# Dereferencing zip_iterator does not yield a true reference but only a\n# temporary tuple holding true references.\n#\n# A real fix for this problem is proposed in PR0022R0\n# (http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0022r0.html)\n#\nhpx_option(\n  HPX_WITH_TUPLE_RVALUE_SWAP\n  BOOL\n  \"Enable swapping of rvalue tuples (needed for parallel::sort_by_key, default: ON).\"\n  ON\n  CATEGORY \"Utility\"\n  ADVANCED\n)\nif(HPX_WITH_TUPLE_RVALUE_SWAP)\n  hpx_add_config_define(HPX_HAVE_TUPLE_RVALUE_SWAP)\nendif()\n\n# ##############################################################################\n# Special diagnostic flags, do not enable by default, only if needed\nhpx_option(\n  HPX_WITH_CHECK_MODULE_DEPENDENCIES\n  BOOL\n  \"Verify that no modules are cross-referenced from a different module category \\\n  (default: OFF)\"\n  OFF\n  ADVANCED\n)\n\n# Check for compiler compatibility\n#\n\n# Check if the selected compiler versions are supposed to work with our codebase\nif(CMAKE_COMPILER_IS_GNUCXX AND HPX_WITH_GCC_VERSION_CHECK)\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)\n    hpx_error(\n      \"GCC 7.0 or higher is required. Specify HPX_WITH_GCC_VERSION_CHECK=OFF to ignore this error.\"\n    )\n  endif()\nendif()\n\nif(MSVC)\n  if(MSVC_VERSION LESS 1900)\n    hpx_error(\"MSVC x64 2015 or higher is required.\")\n  elseif(NOT CMAKE_CL_64)\n    hpx_warn(\n      \"MSVC (32Bit) will compile but will fail running larger applications because of limitations in the Windows OS.\"\n    )\n  endif()\nendif()\n\n# Setup platform specific compiler options and check for compatible compilers\nif(\"${HPX_PLATFORM_UC}\" STREQUAL \"NATIVE\")\n  hpx_info(\"Compiling with the native toolset\")\nelseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n  hpx_info(\"Compiling for Android devices\")\nelseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"XEONPHI\")\n  hpx_info(\"Compiling for Intel Xeon Phi devices\")\n  if(NOT (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\"))\n    hpx_error(\"HPX on the MIC can only be compiled with the Intel compiler.\")\n  endif()\nelseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n  if(NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    hpx_error(\"HPX on the BG/Q can only be compiled with bgclang\")\n  endif()\n  hpx_info(\"Compiling for BlueGene/Q\")\nendif()\n\n# ##############################################################################\n# Some special handling of the compilation is need on build infrastructure for\n# generating packages for target architecture, see issue #3575\n\nhpx_option(\n  HPX_WITH_BUILD_BINARY_PACKAGE\n  BOOL\n  \"Build HPX on the build infrastructure on any LINUX distribution (default: OFF).\"\n  OFF\n  ADVANCED\n)\n\n# ##############################################################################\n# C++ feature tests\n# ##############################################################################\n\n# Sometimes we need to be able to explicitly disable supporting the\n# [[no_unique_address]] attribute. This may be of use when mixing compilers, for\n# instance.\nhpx_option(\n  HPX_WITH_SUPPORT_NO_UNIQUE_ADDRESS_ATTRIBUTE BOOL\n  \"Enable the use of the [[no_unique_address]] attribute (default: ON)\" ON\n  ADVANCED\n)\n\n# Need to include the CUDA setup before the config test to enable the CUDA\n# language\ninclude(HPX_SetupCUDA)\ninclude(HPX_PerformCxxFeatureTests)\nhpx_perform_cxx_feature_tests()\n\ninclude(TargetArch)\ntarget_architecture(__target_arch)\n\ninclude(CacheLineSize)\ncache_line_size(__cache_line_size)\n\n# ##############################################################################\n# Set configuration option to use Boost.Context or not. This depends on the\n# platform.\nset(__use_generic_coroutine_context OFF)\nif(APPLE)\n  set(__use_generic_coroutine_context ON)\nendif()\nif(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n  set(__use_generic_coroutine_context ON)\nendif()\n# If compiling for riscv64 or arm64, automatically bake in Boost.Context\nif(${__target_arch} STREQUAL \"riscv64\" OR ${__target_arch} STREQUAL \"arm64\")\n  set(__use_generic_coroutine_context ON)\nendif()\n\nhpx_option(\n  HPX_WITH_GENERIC_CONTEXT_COROUTINES\n  BOOL\n  \"Use Boost.Context as the underlying coroutines context switch implementation.\"\n  ${__use_generic_coroutine_context}\n  ADVANCED\n)\n\n# ##############################################################################\n# check for miscellaneous things\n# ##############################################################################\n\nhpx_check_for_mm_prefetch(DEFINITIONS HPX_HAVE_MM_PREFETCH)\n\nhpx_check_for_pthread_setname_np(DEFINITIONS HPX_WITH_PTHREAD_SETNAME_NP)\n\nhpx_check_for_stable_inplace_merge(DEFINITIONS HPX_HAVE_STABLE_INPLACE_MERGE)\n\nif(NOT HPX_WITH_STABLE_INPLACE_MERGE)\n  hpx_warn(\n    \"The standard library you are using (libc++ version < 6) does not have a stable inplace_merge implementation.\"\n  )\nendif()\n\n# ##############################################################################\n# HPX datapar configuration\n# ##############################################################################\ninclude(HPX_SetupDatapar)\n\n# ##############################################################################\n# Check for misc system headers\n# ##############################################################################\n\nhpx_check_for_unistd_h(DEFINITIONS HPX_HAVE_UNISTD_H)\n\nif(NOT WIN32)\n  # ############################################################################\n  # Macro definitions for system headers\n  # ############################################################################\n  add_definitions(-D_GNU_SOURCE)\n\n  # ############################################################################\n  # System libraries\n  # ############################################################################\n  if(NOT MSVC)\n    if(HPX_CXX11_STD_ATOMIC_LIBRARIES)\n      target_link_libraries(\n        hpx_base_libraries INTERFACE ${HPX_CXX11_STD_ATOMIC_LIBRARIES}\n      )\n    endif()\n  endif()\n\n  if(HPX_HAVE_LIBSUPCPP)\n    target_link_libraries(hpx_base_libraries INTERFACE supc++)\n  endif()\n\n  if(NOT ${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n    target_link_libraries(hpx_base_libraries INTERFACE dl)\n  endif()\n\n  if(NOT APPLE AND NOT (\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\"))\n    target_link_libraries(hpx_base_libraries INTERFACE rt)\n  endif()\n\n  if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n    target_link_libraries(hpx_base_libraries INTERFACE log)\n  endif()\n\n  if(APPLE)\n    hpx_add_compile_flag_if_available(-ftemplate-depth=256)\n  endif()\nendif()\n\nif(WIN32)\n  if(MSVC)\n    hpx_add_target_compile_option(-Ox PUBLIC CONFIGURATIONS Release)\n\n    # even VS2017 has an ICE when compiling with -Ob2\n    hpx_add_target_compile_option(-Ob1 PUBLIC CONFIGURATIONS Release)\n\n    # VS2012 and above has a special flag for improving the debug experience by\n    # adding more symbol information to the build (-d2Zi)\n    hpx_add_target_compile_option(-d2Zi+ PUBLIC CONFIGURATIONS RelWithDebInfo)\n\n    # VS2013 and above know how to do link time constant data segment folding\n    # VS2013 update 2 and above know how to remove debug information for\n    # non-referenced functions and data (-Zc:inline)\n    hpx_add_target_compile_option(-Zc:inline PUBLIC)\n    hpx_add_target_compile_option(\n      -Gw PUBLIC CONFIGURATIONS Release RelWithDebInfo MinSizeRel\n    )\n    hpx_add_target_compile_option(-Zo PUBLIC CONFIGURATIONS RelWithDebInfo)\n    if(\"${HPX_WITH_DATAPAR_BACKEND}\" STREQUAL \"VC\")\n      hpx_add_target_compile_option(-std:c++latest PUBLIC)\n      hpx_add_config_cond_define(_HAS_AUTO_PTR_ETC 1)\n    endif()\n\n    # Exceptions\n    hpx_add_target_compile_option(-EHsc)\n    if(MSVC_VERSION GREATER_EQUAL 1900)\n      if(NOT (${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\"\n              AND \"x${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"xMSVC\")\n      )\n        # assume conforming (throwing) operator new implementations\n        hpx_add_target_compile_option(-Zc:throwingNew PUBLIC)\n      endif()\n\n      # enable faster linking (requires VS2015 Update1) disabled for now as this\n      # flag crashes debugger hpx_remove_link_flag(/debug CONFIGURATIONS Debug)\n      # hpx_add_link_flag(/debug:fastlink CONFIGURATIONS Debug)\n\n      # Update 2 requires to set _ENABLE_ATOMIC_ALIGNMENT_FIX for it to compile\n      # atomics\n      hpx_add_config_cond_define(_ENABLE_ATOMIC_ALIGNMENT_FIX)\n\n      # Update 3 allows to flag rvalue misuses and enforces strict string const-\n      # qualification conformance\n      hpx_add_target_compile_option(-Zc:rvalueCast PUBLIC)\n      hpx_add_target_compile_option(-Zc:strictStrings PUBLIC)\n\n      # Update 8 requires to set _ENABLE_EXTENDED_ALIGNED_STORAGE for it to\n      # compile atomics\n      hpx_add_config_cond_define(_ENABLE_EXTENDED_ALIGNED_STORAGE)\n\n      # Make sure that __cplusplus is properly defined\n      hpx_add_target_compile_option(-Zc:__cplusplus PUBLIC)\n\n      # Silence C++17 deprecation warnings\n      hpx_add_config_cond_define(_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)\n\n      # Silence C++20 deprecation warnings\n      hpx_add_config_cond_define(_SILENCE_ALL_CXX20_DEPRECATION_WARNINGS)\n\n      # Silence C++23 deprecation warnings\n      hpx_add_config_cond_define(_SILENCE_ALL_CXX23_DEPRECATION_WARNINGS)\n\n      # ASan is available in Visual Studion starting V16.8\n      if((MSVC_VERSION GREATER_EQUAL 1928) AND HPX_WITH_SANITIZERS)\n        hpx_add_target_compile_option(\n          -fsanitize=address PUBLIC CONFIGURATIONS RelWithDebInfo Debug\n        )\n      endif()\n    endif()\n\n    # Runtime type information\n    hpx_add_target_compile_option(-GR PUBLIC)\n    # Multiprocessor build\n    hpx_add_target_compile_option(-MP PUBLIC)\n    # Increase the maximum size of object file sections\n    hpx_add_target_compile_option(-bigobj PUBLIC)\n  elseif(MINGW)\n    if(HPX_CXX11_STD_ATOMIC_LIBRARIES)\n      target_link_libraries(\n        hpx_base_libraries INTERFACE ${HPX_CXX11_STD_ATOMIC_LIBRARIES}\n      )\n    endif()\n  endif()\n\n  target_link_libraries(hpx_base_libraries INTERFACE psapi shlwapi)\n\n  # ############################################################################\n  # Macro definitions for system headers\n  # ############################################################################\n  add_definitions(-D_WINDOWS)\n  add_definitions(-D_WIN32)\n  hpx_add_config_cond_define(_WIN32_WINNT 0x0602)\n  hpx_add_config_cond_define(_SCL_SECURE_NO_WARNINGS)\n  hpx_add_config_cond_define(_CRT_SECURE_NO_WARNINGS)\n  hpx_add_config_cond_define(_SCL_SECURE_NO_DEPRECATE)\n  hpx_add_config_cond_define(_CRT_SECURE_NO_DEPRECATE)\n  hpx_add_config_cond_define(_CRT_NONSTDC_NO_WARNINGS)\n  hpx_add_config_cond_define(_WINSOCK_DEPRECATED_NO_WARNINGS)\n  hpx_add_config_cond_define(_CRT_NON_CONFORMING_SWPRINTFS)\n  hpx_add_config_cond_define(_SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING)\n\n  # ############################################################################\n  # Boost\n  # ############################################################################\n\n  hpx_add_config_cond_define(BOOST_USE_WINDOWS_H)\n  if(NOT CMAKE_CL_64)\n    hpx_add_config_cond_define(BOOST_NO_ALIGNMENT)\n  endif()\n  if(NOT HPX_WITH_GENERIC_CONTEXT_COROUTINES)\n    hpx_add_config_define(HPX_HAVE_FIBER_BASED_COROUTINES)\n  endif()\n  hpx_add_config_cond_define(PSAPI_VERSION 1)\nendif()\n\n# Configure Warnings\nif(HPX_WITH_COMPILER_WARNINGS)\n  if(MSVC) # Adding special warning settings for the MSVC compiler ...\n    hpx_add_compile_flag(-W3)\n\n    # MSVC2012/2013 are overeager to report 'qualifier applied to function type\n    # has no meaning; ignored'\n    hpx_add_compile_flag(-wd4180)\n\n    # Boost.Lockfree triggers 'warning C4307: '+' : integral constant overflow'\n    # which is benign\n    hpx_add_compile_flag(-wd4307)\n\n    # object allocated on the heap may not be aligned\n    hpx_add_compile_flag(-wd4316)\n\n    # max symbol length exceeded\n    hpx_add_compile_flag(-wd4503)\n\n    # 'int': forcing value to bool 'true' or 'false' (performance warning)\n    hpx_add_compile_flag(-wd4800)\n\n    # vcpkg enables the /utf-8 option which causes (benign) warnings in the\n    # Spirit headers: The file contains a character starting at offset ... that\n    # is illegal in the current source character set\n    hpx_add_compile_flag(-wd4828)\n\n    if(HPX_WITH_CXX_STANDARD LESS 20)\n      # support for attribute 'msvc::no_unique_address' in C++17 and earlier is\n      # a vendor extension\n      hpx_add_compile_flag(-wd4848)\n    endif()\n\n    if(\"${HPX_WITH_DATAPAR_BACKEND}\" STREQUAL \"VC\")\n      # unary minus operator applied to unsigned type, result still unsigned\n      hpx_add_compile_flag(-wd4146)\n\n      # '<=': signed/unsigned mismatch\n      hpx_add_compile_flag(-wd4018)\n\n      # 'return': conversion from 'short' to 'Vc_1::schar', possible loss of\n      # data\n      hpx_add_compile_flag(-wd4244)\n    endif()\n\n  else() # Trial and error approach for any other compiler ...\n    hpx_add_compile_flag_if_available(-Wall)\n    hpx_add_compile_flag_if_available(-Wno-strict-aliasing)\n    hpx_add_compile_flag_if_available(-Wno-sign-promo)\n    hpx_add_compile_flag_if_available(-Wno-attributes)\n    hpx_add_compile_flag_if_available(-Wno-cast-align)\n\n    if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n      hpx_add_compile_flag_if_available(-Wno-use-after-free)\n      if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER_EQUAL \"12.1\")\n        # gcc V12.1 and above complain about possible ABI incompatibilities\n        # caused by the use of std::destructive_interference_size\n        hpx_add_compile_flag_if_available(-Wno-interference-size)\n      endif()\n      if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER_EQUAL \"13.0\")\n        # gcc V13.x is overeager to report dangling references where there are\n        # none\n        hpx_add_compile_flag_if_available(-Wextra)\n        hpx_add_compile_flag_if_available(-Wpedantic)\n        hpx_add_compile_flag_if_available(-Wno-self-move)\n      endif()\n    else()\n      hpx_add_compile_flag_if_available(-Wextra)\n      hpx_add_compile_flag_if_available(-Wpedantic)\n    endif()\n\n    # We do not in general guarantee ABI compatibility between C++ standards, so\n    # we ignore this warning\n    hpx_add_compile_flag_if_available(-Wno-noexcept-type)\n\n    # Be extra strict about format checks Boost.Logging is built on fprintf,\n    # sadly\n    hpx_add_compile_flag_if_available(-Wformat=2)\n    hpx_add_compile_flag_if_available(-Wno-format-nonliteral)\n\n    # Self initialization is dangerous\n    hpx_add_compile_flag_if_available(-Winit-self)\n\n    # For portability\n    hpx_add_compile_flag_if_available(-Wdouble-promotion)\n\n    # Warn about casting that violates qualifiers or alignment\n    hpx_add_compile_flag_if_available(-Wcast-qual)\n    if(NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n      # Clang is overeager in reporting cast alignment problems in Boost\n      hpx_add_compile_flag_if_available(-Wcast-align)\n    endif()\n\n    # False positive when build with Vc and Clang\n    if(NOT ((\"${HPX_WITH_DATAPAR_BACKEND}\" STREQUAL \"VC\")\n            AND \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    )\n      hpx_add_compile_flag_if_available(-Werror=trampolines)\n    endif()\n    hpx_add_compile_flag_if_available(-Werror=parentheses)\n    hpx_add_compile_flag_if_available(-Werror=reorder)\n    hpx_add_compile_flag_if_available(-Werror=return-type)\n    hpx_add_compile_flag_if_available(-Werror=sequence-point)\n    hpx_add_compile_flag_if_available(-Werror=uninitialized)\n    hpx_add_compile_flag_if_available(-Werror=format)\n    hpx_add_compile_flag_if_available(-Werror=missing-braces)\n    hpx_add_compile_flag_if_available(-Werror=sign-compare)\n  endif()\nendif()\n\n# Configure compiler warnings as errors\nif(HPX_WITH_COMPILER_WARNINGS_AS_ERRORS)\n  if(MSVC)\n    hpx_add_compile_flag(-WX)\n  else()\n    hpx_add_compile_flag_if_available(-Werror)\n  endif()\nendif()\n\n# Diagnostics\nif(MSVC)\n  # Display full paths in diagnostics\n  hpx_add_compile_flag(-FC)\n\n  # compile all of HPX in non-permissive mode\n  hpx_add_target_compile_option(-permissive- PUBLIC)\n  if(CMAKE_CL_64)\n    set(__target_arch \"x86_64\")\n  else()\n    set(__target_arch \"x86\")\n  endif()\n  hpx_info(\"Architecture detected: ${__target_arch}\")\nelse()\n  # Show the flags that toggle each warning\n  hpx_add_compile_flag_if_available(-fdiagnostics-show-option)\n\n  # VLAs are a GNU extensions that we forbid as they are not supported on MSVC\n  hpx_add_compile_flag_if_available(-Werror=vla)\n  # No return statement in a non-void function can lead to garbage return values\n  # in GCC.\n  hpx_add_compile_flag_if_available(-Werror=return-type)\n\n  # We get false positives all over the place with this.\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    hpx_add_compile_flag_if_available(-Wno-unused-but-set-parameter)\n    hpx_add_compile_flag_if_available(-Wno-unused-but-set-variable)\n    # Uninitialized variables are bad, earlier compilers issue spurious warnings\n    hpx_add_compile_flag_if_available(-Werror=uninitialized)\n    hpx_add_compile_flag_if_available(-Wno-unused-local-typedefs)\n    # -Werror=maybe-uninitialized leads to false positives.\n    hpx_add_compile_flag_if_available(-Wno-maybe-uninitialized)\n  endif()\n\n  # False positive when building with Vc and Clang\n  if(NOT ((\"${HPX_WITH_DATAPAR_BACKEND}\" STREQUAL \"VC\")\n          AND \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n  )\n    # Silence warning about __sync_fetch_and_nand changing semantics\n    hpx_add_compile_flag_if_available(-Wno-sync-nand)\n  endif()\n\n  # Silence warnings about deleting polymorphic objects with non-virtual dtors.\n  # These come from within Boost.\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    hpx_add_compile_flag_if_available(-Wno-delete-non-virtual-dtor)\n  endif()\n\n  # Check if our libraries have unresolved symbols if(NOT APPLE AND NOT\n  # HPX_WITH_APEX)\n  if(NOT APPLE\n     AND NOT WIN32\n     AND NOT HPX_WITH_SANITIZERS\n  )\n    hpx_add_link_flag_if_available(\n      -Wl,-z,defs TARGETS SHARED_LIBRARY EXECUTABLE\n    )\n  endif()\n  if(WIN32)\n    target_link_libraries(hpx_base_libraries INTERFACE psapi WS2_32 mswsock)\n  endif()\n\n  if(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n    hpx_add_compile_flag_if_available(-Wno-deprecated-register)\n  endif()\n\n  if(HPX_WITH_HIDDEN_VISIBILITY)\n    hpx_add_compile_flag_if_available(-fvisibility=hidden)\n    hpx_add_link_flag_if_available(\n      -fvisibility=hidden TARGETS SHARED_LIBRARY EXECUTABLE\n    )\n    hpx_add_config_define(HPX_HAVE_ELF_HIDDEN_VISIBILITY)\n  endif()\n\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    hpx_add_compile_flag_if_available(-Wno-cast-align)\n  endif()\n\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n    # Disable the following warnings: #1170: invalid redeclaration of nested\n    # class\n    hpx_add_compile_flag_if_available(-wd1170)\n    # #858: type qualifier on return type is meaningless\n    hpx_add_compile_flag_if_available(-wd858)\n    # #1098: the qualifier on this friend declaration is ignored\n    hpx_add_compile_flag_if_available(-wd1098)\n    # #488: template parameter not used in declaring the parameter type\n    hpx_add_compile_flag_if_available(-wd488)\n    # #2203: cast discards qualifiers from target type (needed for mvapich2 mpi\n    # header)\n    hpx_add_compile_flag_if_available(-wd2203)\n    # #2536: cannot specify explicit initializer for arrays\n    hpx_add_compile_flag_if_available(-wd2536)\n    # #1286: invalid attribute\n    hpx_add_compile_flag_if_available(-wd1286)\n  endif()\n\n  set(__has_timestamp_support OFF)\n\n  if(\"${__target_arch}\" STREQUAL \"i386\"\n     OR \"${__target_arch}\" STREQUAL \"ix86\"\n     OR \"${__target_arch}\" STREQUAL \"x86_64\"\n     OR \"${__target_arch}\" STREQUAL \"ia64\"\n  )\n\n    # rdtsc is an x86 instruction that reads the value of a CPU time stamp\n    # counter. rdtscp is an extension to rdtsc. The difference is that rdtscp is\n    # a serializing instruction.\n    hpx_cpuid(\"rdtsc\" HPX_WITH_RDTSC DEFINITIONS HPX_HAVE_RDTSC)\n\n    # One can not assume if RDTSCP is available on the hardware of the build\n    # infrastructure, that it will be available on all potential target\n    # hardware, see Issue  #3575\n    if(NOT ${HPX_WITH_BUILD_BINARY_PACKAGE})\n\n      # XeonPhi's do not support RDTSCP\n      if(NOT (\"${HPX_PLATFORM_UC}\" STREQUAL \"XEONPHI\"))\n        hpx_cpuid(\"rdtscp\" HPX_WITH_RDTSCP DEFINITIONS HPX_HAVE_RDTSCP)\n      endif()\n\n    endif()\n    if(HPX_WITH_RDTSC OR HPX_WITH_RDTSCP)\n      set(__has_timestamp_support ON)\n    endif()\n  elseif(\n    \"${__target_arch}\" STREQUAL \"arm\"\n    OR \"${__target_arch}\" STREQUAL \"armv5\"\n    OR \"${__target_arch}\" STREQUAL \"armv6\"\n    OR \"${__target_arch}\" STREQUAL \"armv7\"\n    OR \"${__target_arch}\" STREQUAL \"arm64\"\n  )\n    set(__has_timestamp_support ON)\n  elseif(\"${__target_arch}\" STREQUAL \"ppc\" OR \"${__target_arch}\" STREQUAL\n                                              \"ppc64\"\n  )\n    set(__has_timestamp_support ON)\n  elseif(\"${__target_arch}\" STREQUAL \"riscv64\")\n    set(__has_timestamp_support ON)\n  elseif(\"${__target_arch}\" STREQUAL \"bgq\")\n    set(__has_timestamp_support ON)\n  elseif(\"${__target_arch}\" STREQUAL \"s390x\")\n    set(__has_timestamp_support ON)\n  endif()\n\n  hpx_info(\"Architecture detected: ${__target_arch}\")\n  if(NOT __has_timestamp_support)\n    hpx_warn(\n      \"No timestamp support is available; some performance counters may report incorrect results\"\n    )\n  endif()\nendif()\nhpx_info(\"Cacheline size detected: ${__cache_line_size}\")\n\n# store target architecture for later use\nset(HPX_WITH_TARGET_ARCHITECTURE\n    ${__target_arch}\n    CACHE INTERNAL \"\" FORCE\n)\n\n# Compatibility with using Boost.FileSystem, introduced in V1.4.0\nset(__filesystem_compatibility_default ON)\nif(HPX_WITH_CXX17_FILESYSTEM)\n  set(__filesystem_compatibility_default OFF)\nendif()\nhpx_option(\n  HPX_FILESYSTEM_WITH_BOOST_FILESYSTEM_COMPATIBILITY\n  BOOL\n  \"Enable Boost.FileSystem compatibility. (default: ${__filesystem_compatibility_default})\"\n  ${__filesystem_compatibility_default}\n  ADVANCED\n  CATEGORY \"Modules\"\n)\n\n# Compatibility with using Boost.Iterator traversal tags, introduced in V1.7.0\nhpx_option(\n  HPX_ITERATOR_SUPPORT_WITH_BOOST_ITERATOR_TRAVERSAL_TAG_COMPATIBILITY BOOL\n  \"Enable Boost.Iterator traversal tag compatibility. (default: OFF)\" OFF\n  ADVANCED CATEGORY \"Modules\"\n)\nif(HPX_ITERATOR_SUPPORT_WITH_BOOST_ITERATOR_TRAVERSAL_TAG_COMPATIBILITY)\n  hpx_add_config_define_namespace(\n    DEFINE HPX_ITERATOR_SUPPORT_HAVE_BOOST_ITERATOR_TRAVERSAL_TAG_COMPATIBILITY\n    NAMESPACE ITERATOR_SUPPORT\n  )\nendif()\n\n# ##############################################################################\n# Find Our dependencies: These are all dependencies needed to build the core\n# library. Dependencies that are only needed by plugins, examples or tests\n# should be found separately in the appropriate subdirectory.\n\ninclude(HPX_SetupThreads)\n\n# Setup our required Boost libraries.\ninclude(HPX_SetupBoost)\ninclude(HPX_SetupBoostFilesystem)\ninclude(HPX_SetupBoostIostreams)\n\n# Set up standalone Asio\ninclude(HPX_SetupAsio)\n\n# Find all allocators which are currently supported.\ninclude(HPX_SetupAllocator)\ninclude(HPX_SetupHwloc)\n\n# reset external source lists\nadd_hpx_library_sources_noglob(hpx_external)\nadd_hpx_library_headers_noglob(hpx_external)\n\n# Setup plugins (set here cause if we include it inside plugins, it will not be\n# defined in src/CMakeLists.txt where we call add_static_parcelports)\ninclude(HPX_SetupMPI) # must come before APEX\nif((HPX_WITH_NETWORKING AND HPX_WITH_PARCELPORT_MPI)\n   OR HPX_WITH_ASYNC_MPI\n   OR (\"${HPX_WITH_PARCELPORT_GASNET_CONDUIT}\" STREQUAL \"mpi\")\n)\n  hpx_setup_mpi()\nendif()\nif(HPX_WITH_NETWORKING AND HPX_WITH_PARCELPORT_LCI)\n  include(HPX_SetupLCI)\n  hpx_setup_lci()\nendif()\nif(HPX_WITH_NETWORKING AND HPX_WITH_PARCELPORT_GASNET)\n  include(HPX_SetupGasnet)\n  hpx_setup_gasnet()\nendif()\n\n# Setup packages and subprojects\ninclude(HPX_SetupSYCL)\ninclude(HPX_SetupHIP)\ninclude(HPX_SetupApex)\ninclude(HPX_SetupPapi)\ninclude(HPX_SetupValgrind)\nif(HPX_WITH_CUDA OR HPX_WITH_HIP)\n  hpx_add_config_define(HPX_HAVE_GPU_SUPPORT)\nendif()\n\n# Setup NVIDIA's stdexec if requested\ninclude(HPX_SetupStdexec)\n\nif(HPX_WITH_SANITIZERS)\n  hpx_add_config_define(HPX_HAVE_SANITIZERS)\nendif()\n\nif(HPX_WITH_VIM_YCM)\n  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nendif()\n\n# ##############################################################################\n# Check Build Options based on the found dependencies. We also check for errors\n# with incompatible options with the currently selected platform.\n#\n\nif(HPX_WITH_GENERIC_CONTEXT_COROUTINES)\n  # Check if we can use generic coroutine contexts without any problems\n  if(NOT Boost_CONTEXT_FOUND)\n    hpx_error(\n      \"The usage of Boost.Context was selected but Boost.Context was not found.\"\n    )\n  endif()\n  hpx_add_config_define(HPX_HAVE_GENERIC_CONTEXT_COROUTINES)\nendif()\n\n# ##############################################################################\n\n# ##############################################################################\n# HPX_PREFIX The prefix is the default search path for HPX plugins\n# ##############################################################################\nif(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n  set(HPX_PREFIX \"lib\")\n  set(HPX_BUILD_PREFIX \"lib\")\nelse()\n  set(HPX_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n  set(HPX_BUILD_PREFIX \"${PROJECT_BINARY_DIR}\")\nendif()\n\n# Note: on windows systems the ':' will be converted to a ';' at runtime\nhpx_add_config_cond_define(\n  HPX_DEFAULT_COMPONENT_PATH_SUFFIXES\n  \"\\\"/${CMAKE_INSTALL_LIBDIR}/hpx:/${CMAKE_INSTALL_BINDIR}/hpx:/lib/hpx:/bin/hpx\\\"\"\n)\n\n# ##############################################################################\n# search path configuration\n# ##############################################################################\nif(HPX_WITH_FULL_RPATH)\n  include(HPX_SetFullRPATH)\nendif()\n\n# ##############################################################################\n# Git commit detection\n# ##############################################################################\ninclude(HPX_GitCommit)\nhpx_add_config_define(HPX_HAVE_GIT_COMMIT \"\\\"${HPX_WITH_GIT_COMMIT}\\\"\")\n\nhpx_include(SetOutputPaths)\n\n# ##############################################################################\n# Fixing git tag, if necessary\nhpx_debug(\"HPX_WITH_GIT_TAG: \" ${HPX_WITH_GIT_TAG})\nhpx_debug(\"HPX_WITH_GIT_BRANCH: \" ${HPX_WITH_GIT_BRANCH})\n\nif(HPX_WITH_GIT_BRANCH AND ((NOT HPX_WITH_GIT_TAG) OR \"${HPX_WITH_GIT_TAG}x\"\n                                                      STREQUAL \"x\")\n)\n  string(REGEX MATCH \"^release-[0-9]+.[0-9]+.X$\" matched ${HPX_WITH_GIT_BRANCH})\n  if(matched)\n    set(HPX_WITH_GIT_TAG \"v${HPX_VERSION_FULL}\")\n    hpx_info(\"Setting HPX_WITH_GIT_TAG to: \" \"${HPX_WITH_GIT_TAG}\")\n  endif()\nendif()\n\n# ##############################################################################\n# Add custom targets for tests\n# ##############################################################################\nif(HPX_WITH_TESTS)\n  add_hpx_pseudo_target(tests)\n  if(HPX_WITH_TESTS_UNIT)\n    add_hpx_pseudo_target(tests.unit)\n    add_hpx_pseudo_dependencies(tests tests.unit)\n  endif()\n  if(HPX_WITH_TESTS_REGRESSIONS)\n    add_hpx_pseudo_target(tests.regressions)\n    add_hpx_pseudo_dependencies(tests tests.regressions)\n  endif()\n  if(HPX_WITH_TESTS_BENCHMARKS)\n    add_hpx_pseudo_target(tests.performance)\n    add_hpx_pseudo_dependencies(tests tests.performance)\n  endif()\n  if(HPX_WITH_TESTS_HEADERS)\n    add_hpx_pseudo_target(tests.headers)\n    add_hpx_pseudo_dependencies(tests tests.headers)\n  endif()\n  if(HPX_WITH_EXAMPLES AND HPX_WITH_TESTS_EXAMPLES)\n    add_hpx_pseudo_target(tests.examples)\n    add_hpx_pseudo_dependencies(tests tests.examples)\n  endif()\n\n  enable_testing()\n  include(CTest)\nendif()\n\nif(HPX_WITH_EXAMPLES)\n  add_hpx_pseudo_target(examples)\nendif()\n\n# ##############################################################################\n# Debug library postfix\n# ##############################################################################\nset(CMAKE_DEBUG_POSTFIX \"d\")\nset(HPX_DEBUG_POSTFIX \"d\")\n\nif(HPX_WITH_DISTRIBUTED_RUNTIME)\n  if(HPX_WITH_COMPRESSION_BZIP2)\n    hpx_add_config_define(HPX_HAVE_COMPRESSION_BZIP2)\n  endif()\n  if(HPX_WITH_COMPRESSION_SNAPPY)\n    hpx_add_config_define(HPX_HAVE_COMPRESSION_SNAPPY)\n  endif()\n  if(HPX_WITH_COMPRESSION_ZLIB)\n    hpx_add_config_define(HPX_HAVE_COMPRESSION_ZLIB)\n  endif()\nendif()\n\n# ##############################################################################\n# Add core dependency\n# ##############################################################################\nadd_hpx_pseudo_target(core)\n\n# ##############################################################################\n# Add libraries\n# ##############################################################################\n# collect names of static parcelports\nset(HPX_STATIC_PARCELPORT_PLUGINS\n    \"\"\n    CACHE INTERNAL \"\" FORCE\n)\nadd_subdirectory(libs)\n\n# ##############################################################################\n# Configure parcelports\n# ##############################################################################\ninclude(HPX_ParcelPorts)\n\n# ##############################################################################\n# Add static init and wrap library\n# ##############################################################################\nadd_subdirectory(init)\nadd_subdirectory(wrap)\n\n# ##############################################################################\n# Documentation toolchain (Sphinx, Doxygen, Breathe)\n# ##############################################################################\nhpx_include(Documentation)\n\n# ##############################################################################\n# Add core configuration\n# ##############################################################################\n\n# ##############################################################################\n# Add components\n# ##############################################################################\nadd_subdirectory(components)\n\n# ##############################################################################\n# Tests\n# ##############################################################################\nif(POLICY CMP0148)\n  find_package(Python COMPONENTS Interpreter)\n  if(NOT Python_FOUND)\n    hpx_warn(\n      \"A python interpreter could not be found. The test suite can not be run automatically.\"\n    )\n  endif()\n\nelse()\n  find_package(PythonInterp)\n  if(NOT PYTHONINTERP_FOUND)\n    hpx_warn(\n      \"A python interpreter could not be found. The test suite can not be run automatically.\"\n    )\n  else()\n    set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})\n  endif()\nendif()\n\nif(HPX_WITH_TESTS)\n  # pseudo_target added above\n  add_subdirectory(tests)\nendif()\n\n# ##############################################################################\n# Target specification\n# ##############################################################################\nif(HPX_WITH_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(HPX_WITH_DOCUMENTATION)\n  add_subdirectory(docs)\nendif()\n\n# this must come after docs as it creates a dependency on the target git_docs\nif(HPX_WITH_TOOLS OR HPX_WITH_TESTS_BENCHMARKS)\n  add_hpx_pseudo_target(tools)\n  add_subdirectory(tools)\nendif()\n\n# Configure hpxrun.py\nif(PYTHONINTERP_FOUND OR Python_FOUND)\n  configure_file(\n    \"${PROJECT_SOURCE_DIR}/cmake/templates/hpxrun.py.in\"\n    \"${PROJECT_BINARY_DIR}/bin/hpxrun.py\" @ONLY\n  )\nendif()\n\n# Set up precompiled headers\nif(HPX_WITH_PRECOMPILED_HEADERS)\n  set(system_precompiled_headers\n      <algorithm>\n      <array>\n      <atomic>\n      <bitset>\n      <cassert>\n      <cctype>\n      <cerrno>\n      <chrono>\n      <climits>\n      <cmath>\n      <complex>\n      <condition_variable>\n      <cstddef>\n      <cstdint>\n      <cstdio>\n      <cstdlib>\n      <cstring>\n      <ctime>\n      <deque>\n      <exception>\n      <execution>\n      <forward_list>\n      <fstream>\n      <functional>\n      <iomanip>\n      <ios>\n      <iosfwd>\n      <iostream>\n      <iterator>\n      <limits>\n      <list>\n      <locale>\n      <map>\n      <memory>\n      <mutex>\n      <new>\n      <numeric>\n      <ostream>\n      <random>\n      <regex>\n      <set>\n      <shared_mutex>\n      <sstream>\n      <stack>\n      <stdexcept>\n      <string>\n      <string_view>\n      <system_error>\n      <thread>\n      <tuple>\n      <type_traits>\n      <typeinfo>\n      <unordered_map>\n      <unordered_set>\n      <utility>\n      <variant>\n      <vector>\n      <hwloc.h>\n      <asio/basic_waitable_timer.hpp>\n      <asio/io_context.hpp>\n      <asio/ip/tcp.hpp>\n      <boost/config.hpp>\n      <boost/fusion/include/vector.hpp>\n      <boost/optional.hpp>\n      <boost/spirit/home/x3.hpp>\n  )\n\n  if(HPX_WITH_NANOBENCH)\n    set(system_precompiled_headers ${system_precompiled_headers} <nanobench.h>)\n  endif()\n\n  if(HPX_WITH_CXX17_FILESYSTEM)\n    list(APPEND system_precompiled_headers <filesystem>)\n  endif()\n\n  set(system_precompiled_headers_dependencies\n      hpx_dependencies_boost hpx_private_flags hpx_public_flags Asio::asio\n  )\n\n  target_link_libraries(\n    hpx_precompiled_headers\n    PRIVATE hpx_public_flags hpx_private_flags hpx_base_libraries\n            ${system_precompiled_headers_dependencies}\n  )\n  target_precompile_headers(\n    hpx_precompiled_headers PRIVATE ${system_precompiled_headers}\n  )\n\n  # Headers that should be precompiled for things depending on HPX (executables,\n  # libraries).\n  set(hpx_precompiled_headers_modules ${HPX_ENABLED_MODULES})\n  # The init_runtime modules cannot be precompiled because they use macros that\n  # can depend on the application (HPX_PREFIX and HPX_APPLICATION_NAME_DEFAULT).\n  list(REMOVE_ITEM hpx_precompiled_headers_modules init_runtime\n       init_runtime_local\n  )\n  # config, version, and the include modules don't have hpx/module headers.\n  list(REMOVE_ITEM hpx_precompiled_headers_modules config include include_local\n       version\n  )\n  list(TRANSFORM hpx_precompiled_headers_modules PREPEND \"<hpx/modules/\")\n  list(TRANSFORM hpx_precompiled_headers_modules APPEND \".hpp>\")\n\n  # We do not link to HPX::hpx as it will set HPX_APPLICATION_NAME_DEFAULT and\n  # HPX_PREFIX to values that don't match those used in tests. We instead set\n  # them manually here.\n  target_link_libraries(hpx_exe_precompiled_headers PRIVATE hpx_full)\n  target_compile_definitions(\n    hpx_exe_precompiled_headers PRIVATE \"HPX_PREFIX=\\\"${HPX_BUILD_PREFIX}\\\"\"\n                                        \"HPX_APPLICATION_EXPORTS\"\n  )\n  target_precompile_headers(\n    hpx_exe_precompiled_headers PRIVATE ${hpx_precompiled_headers_modules}\n  )\nendif()\n\n# ##############################################################################\n# installation instructions\n# ##############################################################################\nif(PYTHONINTERP_FOUND OR Python_FOUND)\n  install(\n    FILES \"${PROJECT_BINARY_DIR}/bin/hpxrun.py\"\n    DESTINATION ${CMAKE_INSTALL_BINDIR}\n    COMPONENT runtime\n    PERMISSIONS\n      OWNER_READ\n      OWNER_WRITE\n      OWNER_EXECUTE\n      GROUP_READ\n      GROUP_EXECUTE\n      WORLD_READ\n      WORLD_EXECUTE\n  )\nendif()\n\ninstall(\n  # install all hpx header files\n  DIRECTORY hpx/\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/hpx\n  COMPONENT core\n  FILES_MATCHING\n  PATTERN \"*.hpp\"\n  PATTERN \".git\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  PATTERN \"CTestFiles\" EXCLUDE\n)\n\n# Install all HPX header that have been configured using various cmake options\ninstall(\n  DIRECTORY \"${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/hpx/\"\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/hpx\n  COMPONENT core\n  FILES_MATCHING\n  PATTERN \"*.hpp\"\n  PATTERN \".git\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  PATTERN \"CTestFiles\" EXCLUDE\n)\n\ninstall(\n  # Install all HPX cmake utility files\n  DIRECTORY cmake/\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${HPX_PACKAGE_NAME}\n  COMPONENT core\n  PATTERN \"templates\" EXCLUDE\n  PATTERN \"packaging\" EXCLUDE\n  PATTERN \".git\" EXCLUDE\n)\n\ninstall(\n  FILES \"${PROJECT_SOURCE_DIR}/LICENSE_1_0.txt\"\n  DESTINATION ${CMAKE_INSTALL_DATADIR}/hpx\n  COMPONENT license\n)\n\nif(HPX_WITH_DOCUMENTATION)\n  install(\n    FILES \"${PROJECT_SOURCE_DIR}/docs/index.html\"\n    DESTINATION ${CMAKE_INSTALL_DATADIR}/hpx/\n    COMPONENT docs\n  )\n\n  if(\"html\" IN_LIST HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS)\n    install(\n      DIRECTORY \"${PROJECT_BINARY_DIR}/share/hpx/docs/html/\"\n      DESTINATION ${CMAKE_INSTALL_DATADIR}/hpx/docs/html\n      COMPONENT docs\n      PATTERN \"*.buildinfo\" EXCLUDE\n    )\n  endif()\n\n  if(\"singlehtml\" IN_LIST HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS)\n    install(\n      DIRECTORY \"${PROJECT_BINARY_DIR}/share/hpx/docs/singlehtml/\"\n      DESTINATION ${CMAKE_INSTALL_DATADIR}/hpx/docs/singlehtml\n      COMPONENT docs\n      PATTERN \"*.buildinfo\" EXCLUDE\n    )\n  endif()\n\n  if(\"latexpdf\" IN_LIST HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS)\n    install(\n      FILES \"${PROJECT_BINARY_DIR}/share/hpx/docs/latexpdf/latex/HPX.pdf\"\n      DESTINATION ${CMAKE_INSTALL_DATADIR}/hpx/docs/pdf/\n      COMPONENT docs\n      OPTIONAL\n    )\n  endif()\n\n  if(\"man\" IN_LIST HPX_WITH_DOCUMENTATION_OUTPUT_FORMATS)\n    install(\n      FILES \"${PROJECT_BINARY_DIR}/share/hpx/docs/man/hpx.1\"\n      DESTINATION ${CMAKE_INSTALL_MANDIR}/\n      COMPONENT docs\n    )\n  endif()\nendif()\n\nif(HPX_WITH_VIM_YCM)\n  set(build_dir_file ${PROJECT_BINARY_DIR}/.ycm_extra_conf.py)\n  set(source_dir_file ${PROJECT_SOURCE_DIR}/.ycm_extra_conf.py)\n  configure_file(\n    ${PROJECT_SOURCE_DIR}/tools/vim/.ycm_extra_conf.py ${build_dir_file} @ONLY\n  )\n  add_custom_target(\n    configure_ycm\n    COMMAND ${CMAKE_COMMAND} -E copy ${build_dir_file} ${source_dir_file}\n    COMMENT \"Copying YCM config file to source directory\"\n    VERBATIM\n  )\n  hpx_info(\n    \"VIM YouCompleteMe: run 'make configure_ycm' to copy config file to source directory and enable support in YCM. To enable automatic loading of configure file, add to your .vimrc option: \\\"let g:ycm_extra_conf_globlist = ['${PROJECT_SOURCE_DIR}/*']\\\"\"\n  )\nendif()\n\n# ##############################################################################\n# Add rpm packaging\n\nhpx_option(\n  HPX_WITH_RPM BOOL \"Enable or disable the generation of rpm packages\" OFF\n  ADVANCED\n)\n\nif(HPX_WITH_RPM)\n  add_subdirectory(cmake/packaging/rpm)\nendif()\n\n# ##############################################################################\n# print overall configuration summary\ninclude(HPX_PrintSummary)\ncreate_configuration_summary(\"Configuration summary:\\n--\" \"hpx\")\n\ninclude(HPX_ExportTargets)\n\n# Modules can't link to this if not exported\ninstall(\n  TARGETS hpx_base_libraries\n  EXPORT HPXInternalTargets\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT hpx_base_libraries\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT hpx_base_libraries\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT hpx_base_libraries\n)\nhpx_export_internal_targets(hpx_base_libraries)\n\n# ##############################################################################\n# store cache vars and their values in order for them to be forwarded to the\n# projects (needs to be before the HPX_GeneratePackage call)\ninclude(HPX_ForwardCacheVariables)\n\n# ##############################################################################\n# External build system support (FindHPX.cmake and pkg-config).\ninclude(HPX_GeneratePackage)\n\nmessage(\"\")\nmessage(\"HPX will be installed to ${CMAKE_INSTALL_PREFIX}\")\nmessage(\"\")\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.953125,
          "content": "# Copyright (c) 2014 Thomas Heller\n# Copyright (c) 2024 Hartmut Kaiser\n#\n# SPDX-License-Identifier: BSL-1.0\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n#\n# This file should be placed in the root directory of your project. Then modify\n# the CMakeLists.txt file in the root directory of your project to incorporate\n# the testing dashboard.\n# The following are required to uses Dart and the dashboard\n#    ENABLE_TESTING()\n#    INCLUDE(CTest)\n#\nset(CTEST_PROJECT_NAME \"HPX\")\nset(CTEST_NIGHTLY_START_TIME \"00:00:00 GMT\")\n\nif(CMAKE_VERSION VERSION_GREATER 3.14)\n  set(CTEST_SUBMIT_URL\n      \"https://cdash.rostam.cct.lsu.edu//submit.php?project=${CTEST_PROJECT_NAME}\"\n  )\nelse()\n  set(CTEST_DROP_METHOD \"https\")\n  set(CTEST_DROP_SITE \"cdash.rostam.cct.lsu.edu\")\n  set(CTEST_DROP_LOCATION \"/submit.php?project=${CTEST_PROJECT_NAME}\")\nendif()\n\nset(CTEST_DROP_SITE_CDASH TRUE)\n"
        },
        {
          "name": "LICENSE_1_0.txt",
          "type": "blob",
          "size": 1.306640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.9130859375,
          "content": "..\n    Copyright (c) 2007-2022 Louisiana State University\n\n    SPDX-License-Identifier: BSL-1.0\n    Distributed under the Boost Software License, Version 1.0. (See accompanying\n    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n|circleci_status| |codacy_quality| |codacy_coverage| |OpenSSF| |CFF| |JOSS| |zenodo_doi|\n\nDocumentation: `latest\n<https://hpx-docs.stellar-group.org/latest/html/index.html>`_,\n`development (master)\n<https://hpx-docs.stellar-group.org/branches/master/html/index.html>`_\n\n|hpx_logo|\n\n------\n\nHPX is a C++ Standard Library for Concurrency and Parallelism. It implements all\nof the corresponding facilities as defined by the C++ Standard. Additionally, in\nHPX we implement functionalities proposed as part of the ongoing C++\nstandardization process. We also extend the C++ Standard APIs to the distributed\ncase.\n\nThe goal of HPX is to create a high quality, freely available, open source\nimplementation of a new programming model for conventional systems, such as\nclassic Linux based Beowulf clusters or multi-socket highly parallel SMP nodes.\nAt the same time, we want to have a very modular and well designed runtime\nsystem architecture which would allow us to port our implementation onto new\ncomputer system architectures. We want to use real-world applications to drive\nthe development of the runtime system, coining out required functionalities and\nconverging onto a stable API which will provide a smooth migration path for\ndevelopers.\n\nThe API exposed by HPX is not only modeled after the interfaces defined by the\nC++11/14/17/20 ISO standard, it also adheres to the programming guidelines used\nby the Boost collection of C++ libraries. We aim to improve the scalability of\ntoday's applications and to expose new levels of parallelism which are necessary\nto take advantage of the exascale systems of the future.\n\nWhat's so special about HPX?\n============================\n\n* HPX exposes a uniform, standards-oriented API for ease of programming parallel\n  and distributed applications.\n* It enables programmers to write fully asynchronous code using hundreds of\n  millions of threads.\n* HPX provides unified syntax and semantics for local and remote operations.\n* HPX makes concurrency manageable with dataflow and future based\n  synchronization.\n* It implements a rich set of runtime services supporting a broad range of use\n  cases.\n* HPX exposes a uniform, flexible, and extendable performance counter framework\n  which can enable runtime adaptivity\n* It is designed to solve problems conventionally considered to be\n  scaling-impaired.\n* HPX has been designed and developed for systems of any scale, from hand-held\n  devices to very large scale systems.\n* It is the first fully functional implementation of the ParalleX execution\n  model.\n* HPX is published under a liberal open-source license and has an open, active,\n  and thriving developer community.\n\nGovernance\n==========\n\nThe HPX project is a meritocratic, consensus-based community project. Anyone\nwith an interest in the project can join the community, contribute to the\nproject design and participate in the decision making process.\n`This document <http://hpx.stellar-group.org/documents/governance/>`_ describes\nhow that participation takes place and how to set about earning merit within\nthe project community.\n\nDocumentation\n=============\n\nIf you plan to use HPX we suggest to start with the latest released version\nwhich can be downloaded `here <https://github.com/STEllAR-GROUP/hpx/releases/>`_.\n\nTo quickly get started with HPX on most Linux distributions you can read the\nquick start guide `here\n<https://hpx-docs.stellar-group.org/latest/html/quickstart.html>`_.\nDetailed instructions on building and installing HPX on various platforms can be\nfound `here\n<https://hpx-docs.stellar-group.org/latest/html/manual/building_hpx.html>`_.\nThe full documentation for the latest release of HPX can always be found `here\n<https://hpx-docs.stellar-group.org/latest/html/index.html>`_.\n\nIf you would like to work with the cutting edge version of this repository\n(``master`` branch) the documentation can be found `here\n<https://hpx-docs.stellar-group.org/branches/master/html/index.html>`_.\nWe strongly recommend that you follow the current health status of the master\nbranch by looking at our `continuous integration results website\n<https://cdash.rostam.cct.lsu.edu/index.php?project=HPX>`_. While we try to keep the\nmaster branch stable and usable, sometimes new bugs trick their way into the\ncode base. The `CircleCI <https://circleci.com/gh/STEllAR-GROUP/hpx>`_\ncontinuous integration service additionally tracks the current build status for\nthe master branch: |circleci_status|.\n\nWe use `Codacy <https://www.codacy.com/>`_ to assess the code quality of this\nproject: |codacy_quality|. For our coverage analysis, we also rely on\nCodacy to present the results: |codacy_coverage|.\n\nIf you can't find what you are looking for in the documentation or you suspect\nyou've found a bug in HPX we very much encourage and appreciate any issue\nreports through the `issue tracker for this Github project\n<https://github.com/STEllAR-GROUP/hpx/issues>`_.\n\nIf you have any questions feel free to ask it over at `StackOverflow\n<https://stackoverflow.com>`_ and tag the question with `hpx\n<https://stackoverflow.com/questions/tagged/hpx>`_.\n\nFor a full list of support options please see our `Support page\n<https://github.com/STEllAR-GROUP/hpx/blob/master/.github/SUPPORT.md>`_.\n\nCode of conduct\n===============\n\nWe have adopted a `code of conduct\n<https://github.com/STEllAR-GROUP/hpx/blob/master/.github/CODE_OF_CONDUCT.md>`_\nfor this project. Please refer to this document if you would like to know more\nabout the expectations for members of our community, with regard to how they\nwill behave toward each other.\n\nPlease find the project's gpg key, which is used to sign HPX releases\n`here\n<https://pgp.mit.edu/pks/lookup?op=get&search=0xE18AE35E86BB194F>`_.\n\nCiting\n======\n\nIn publications, please use our paper in The Journal of Open Source\nSoftware as the main citation for HPX: |JOSS|. For referring\nto the latest release of HPX please use: |zenodo_doi|.\n\nAcknowledgements\n================\n\nWe have used a free open-source license of `PVS-Studio, a static analyzer for C++ code\n<https://pvs-studio.com/en/pvs-studio/?utm_source=github&utm_medium=organic&utm_campaign=open_source>`_\nto check our code base.\n\nPast and current funding and support for HPX is listed `here\n<https://hpx.stellar-group.org/funding-acknowledgements>`_\n\n.. |circleci_status| image:: https://circleci.com/gh/STEllAR-GROUP/hpx/tree/master.svg?style=svg\n     :target: https://circleci.com/gh/STEllAR-GROUP/hpx/tree/master\n     :alt: HPX master branch build status\n\n.. |zenodo_doi| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.598202.svg\n     :target: https://doi.org/10.5281/zenodo.598202\n     :alt: Latest software release of HPX\n\n.. |codacy_quality| image:: https://app.codacy.com/project/badge/Grade/0b8cd5a874914edaba67ce3bb711e688\n     :target: https://app.codacy.com/gh/STEllAR-GROUP/hpx/dashboard\n     :alt: HPX Code Quality Assessment\n\n.. |codacy_coverage| image:: https://app.codacy.com/project/badge/Coverage/0b8cd5a874914edaba67ce3bb711e688    \n     :target: https://app.codacy.com/gh/STEllAR-GROUP/hpx/coverage/dashboard\n     :alt: HPX coverage report\n\n.. |JOSS| image:: https://joss.theoj.org/papers/022e5917b95517dff20cd3742ab95eca/status.svg\n    :target: https://joss.theoj.org/papers/022e5917b95517dff20cd3742ab95eca\n    :alt: JOSS Paper about HPX\n\n.. |CFF| image:: https://github.com/STEllAR-GROUP/hpx/actions/workflows/cff-validator.yml/badge.svg\n    :target: https://github.com/STEllAR-GROUP/hpx/actions/workflows/cff-validator.yml\n    :alt: Citations file for HPX\n\n.. |OpenSSF| image:: https://bestpractices.coreinfrastructure.org/projects/6093/badge\n    :target: https://bestpractices.coreinfrastructure.org/projects/6093\n    :alt: OpenSSF Best Practices\n\n.. |hpx_logo| image:: http://hpx.stellar-group.org/files/hpx_logo_white.png\n    :target: http://hpx.stellar-group.org/\n    :alt: HPX Logo\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hpx.spdx",
          "type": "blob",
          "size": 0.20703125,
          "content": "SPDXVersion: SPDX-2.1\nDataLicense: CC0-1.0\nPackageName: HPX\nPackageOriginator: The STE||AR Group (https://stellar-group.org/)\nPackageHomePage: https://github.com/STEllAR-GROUP/hpx\nPackageLicenseDeclared: BSL-1.0\n"
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrap",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}