{
  "metadata": {
    "timestamp": 1736565268841,
    "page": 77,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dfranx/SHADERed",
      "stars": 4427,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.0009765625,
          "content": "---\nBasedOnStyle:  WebKit\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\n# AlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\n# BreakBeforeBinaryOperators: All\nBreakBeforeBraces: WebKit\n# BreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\n# BreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\n# BreakAfterJavaFieldAnnotations: false\n# BreakStringLiterals: true\nColumnLimit:     0\n# CommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\n# ExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\n# ForEachMacros:   \n#  - foreach\n#  - Q_FOREACH\n#  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '\".*\"'\n    Priority:        1\n  - Regex:           '^<.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*'\n    Priority:        3\n# IncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\n# ObjCBlockIndentWidth: 4\n# ObjCSpaceAfterProperty: true\n# ObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\n# ReflowComments:  true\n# SortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Always\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.880859375,
          "content": "# IDE directories\n.vs/\n.vscode/\n\n# Generated build system files\nCMakeFiles/\nCMakeCache.txt\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\n*.vcxproj.*\nVSProject\nvsproject32\nMakefile\nlibs/**/*.cmake\nSPIRV-Tools-linkConfig.cmake\nSPIRV-Tools-optConfig.cmake\nSPIRV-Tools-reduceConfig.cmake\nSPIRV-ToolsConfig.cmake\n\n# Generated files\nlibs/**/*.tcl\n/include\n\n# Compiled binaries\n./Debug*\n./Release*\n*.a\n*.exe\n*.dll\n*.ilk\n*.pdb\nbin/SHADERed\nbin/SHADERed.exe\nbin/plugins/*\nbin/Debug\nbin/Release\nlib\n\n# Local application settings\nsettings.ini\nbin/data/plugin_settings.ini\nbin/data/preload.dat\nbin/data/workspace.dat\nbin/data/snippets.xml\nbin/data/bookmarks.dat\nbin/data/filedialog.dat\n\n# Temprorary folder for downloading online shaders\nbin/temp\n\n# Autoupdate information\nbin/current_version.txt\nbin/info.dat\n\n# Logs\nbin/log.txt\n\n# Ignore out-of-source build directory.\nbuild/\n\n# MacOS\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.8525390625,
          "content": "\n[submodule \"libs/pugixml\"]\n\tpath = libs/pugixml\n\turl = https://github.com/zeux/pugixml\n[submodule \"libs/ImGuiColorTextEdit\"]\n\tpath = libs/ImGuiColorTextEdit\n\turl = https://github.com/dfranx/ImGuiColorTextEdit\n[submodule \"libs/imgui\"]\n\tpath = libs/imgui\n\turl = https://github.com/dfranx/imgui.git\n\tbranch = docking\n[submodule \"libs/glslang\"]\n\tpath = libs/glslang\n\turl = https://github.com/KhronosGroup/glslang\n\tignore = dirty\n[submodule \"libs/assimp\"]\n\tpath = libs/assimp\n\turl = https://github.com/dfranx/assimp.git\n[submodule \"libs/SPIRV-VM\"]\n\tpath = libs/SPIRV-VM\n\turl = https://github.com/dfranx/SPIRV-VM.git\n\tignore = dirty\n[submodule \"libs/ShaderExpressionParser\"]\n\tpath = libs/ShaderExpressionParser\n\turl = https://github.com/dfranx/ShaderExpressionParser\n[submodule \"libs/SpvGenTwo\"]\n\tpath = libs/SpvGenTwo\n\turl = https://github.com/dfranx/SpvGenTwo\n\tignore = dirty\n"
        },
        {
          "name": "CHANGELOG.txt",
          "type": "blob",
          "size": 26.8974609375,
          "content": "[v1.5.6]\n+ display error messages on the preview window when in DAP mode\n+ fix a bug that causeed the debugger to crash\n+ fix downloading SpearNode through the \"Browse online\" window\n\n[v1.5.5]\n+ add IPlugin3\n+ fix gizmo 3D model\n+ fix \"Save as GLSL/HLSL\" when a plugin shader editor is used\n+ fix a bug where cached plugin shader editor information sometimes wouldn't be cleared\n+ fix a bug that would cause SHADERed to crash when pausing the preview with a plugin shader editor open\n\n[v1.5.4]\n+ add \"Save as HLSL\" option & --convert flag can now convert GLSL -> HLSL\n+ add ability to step into included files while debugging\n+ add vertex buffer instancing\n+ add ability to copy error messages\n+ add --generatecmake | -gcm command line argument\n+ add more empty space to the \"Objects\" window so it's easier to right click\n+ fix a bug that would cause SHADERed to crash when trying to view texture properties\n+ fix a bug that would cause compute shaders not to run when rendering a sequence to image files\n+ fix a bug where 3D textures wouldn't be properly bound to a shader debugger\n+ fix a bug where sometimes the debugger wouldn't work properly with if statements\n+ fix loading volume .dds textures\n+ fix autocomplete for geometry shaders\n+ fix a bug that would cause shaders to be output in wrong directory when converting project into C++\n+ fix debug outline in the \"Preview\" window when using lines_adjacency\n+ fix a bug that caused SHADERed to crash when a non-project shader file is open in a text editor and there are error messages\n+ fix a bug that occured when debugging a project that uses 3D models\n+ fix a bug that caused SHADERed to crash when debugging geometry shaders\n+ fix a bug that caused the debugger not to work if the compiler doesn't output function with the name \"main\"\n\n[v1.5.3]\n+ add Debug Adapter Protocol\n+ fix a bug that would sometimes cause SHADERed to concat two absolute paths\n+ fix a bug where \"Function Stack\" window would display wrong line numbers while debugging HLSL\n\n[v1.5.2]\n+ fix a critical bug that would cause SHADERed to not store proper texture paths in project files\n+ fix a bug that would cause SHADERed to crash on creating cubemaps\n+ fix a bug that caused the geometry shader file dialog to be unresponsive\n+ fix a bug that would crash SHADERed when a project file is referencing an texture that doesn't exist\n\n[v1.5.1]\n+ add tessellation control shader debugger\n+ add --convert command\n+ remove BUILD_IMMEDIATE_MODE (immediate mode now works on all systems)\n+ fix immediate mode when using HLSL's cbuffer variables\n+ fix a bug that would sometimes cause SHADERed to print unhelpful error messages\n+ fix a bug in immediate mode that would cause it to crash\n+ fix a bug where --disassemble command would output wrong IDs\n+ fix a bug in text editor that would sometimes highlight wrong code folding collapse/expand sections\n+ fix a bug where search in \"Browse online\" wouldn't work when searching for themes & plugins\n+ fix a bug that doesn't let you close the frame analysis window\n+ fix a bug that caused the frame analysis window to stay open after loading another project\n+ remove SFML\n\n[v1.5]\n+ add \"Frame analysis\" window\n+ add the ability to detect undefined behavior in shaders\n+ add global/frame breakpoints\n+ add the ability to see variable's value throughout the whole frame\n+ add SPIR-V instruction heatmap\n+ add \"Profiler\" window - measure shader execution time\n+ add color histogram\n+ add pixel history\n+ add \"Focus mode\"\n+ add support for .dds textures\n+ add Texture3D object\n+ add preview for Image3D objects\n+ add --disassemble command\n\n[v1.4.4]\n+ add tessellation shaders\n+ add new file dialog\n+ add code folding\n+ add the ability to CTRL+Click on keywords, functions, headers... etc in the text editor\n+ add \"Highlight brackets\" option to text editor\n+ add PickPosition variable\n+ add VertexShaderPosition variable\n+ add darkened render texture as background to GeometryOutputUI\n+ add the ability to open a shader file by drag and dropping it into the window\n+ fix a bug where gizmo and bounding box would still render even when preview is paused\n\n[v1.4.3]\n+ add geometry shader debugger\n+ add \"Auto\" window\n+ add \"Save as GLSL\" option\n+ add \"Language\" dropdown to \"Create Item\" when creating a shader pass\n+ add --compile and related commands\n+ add function declaration tooltips\n+ add scrollbar markers for changed lines\n+ add the ability to temporarily disable breakpoint condition\n+ add \"Editor.DuplicateLine\" shortcut\n+ add \"Editor.CommentLines\" and \"Editor.UncommentLines\" shortcuts\n+ add BufferFloat and BufferInt to input layout manager\n+ add link to the blog post in the \"Changelog\" window\n+ autocomplete now suggest object members after typing '.'\n+ highlight SPIR-V code that corresponds to the line on which the shader debugger is currently located\n+ list Rust and C++ shaders in 'Browse online' window if corresponding plugins are installed\n+ creating a new project doesn't require a save location anymore\n+ when creating a render texture the ratio size will now be used by default\n+ remove \"Clear\" button in pixel inspect window\n+ \"Properties\" window will now open (if it was closed) when opening the object's/item's properties\n+ fix a bug that would sometimes crash SHADERed when pasting code\n+ fix a bug that would cause SHADERed to crash when opening a newly created VertexBuffer item in the properties window\n+ fix a bug that caused SHADERed to crash when deleting a input layout item\n+ fix a bug that caused \"Create item\" window not to create shader files sometimes\n+ fix a crash that happened when deleting last expression in the \"Watch\" window\n+ fix \"Auto indent on paste\" feature\n+ fix \"Topology\" dropdown in the properties (it was impossible to render a point list)\n+ fix double click, CTRL+Backspace & CTRL+Delete shortcuts in the text editor\n+ fix a bug that would cause the \"Use geometry shader\" flag to be completely ignored in \"Create item\" window\n+ fix a bug that caused SHADERed to crash when plugin tried to add a message without a \"group\"\n+ fix a bug that would sometimes cause SHADERed to store configs and downloads on non user owned folders on Linux\n\n[v1.4.2]\n+ add \"Save SPIR-V binary\" option\n+ add the ability to drag and drop objects on pipeline items\n+ add --version | -v command line argument\n+ add --render | -r, --renderwidth | -rw, --renderheight | -rh, --rendertime | -rt, etc... commands\n+ add threading to \"Browse online\" window so that it doesn't block SHADERed\n+ add OS support check for plugins in \"Browse online\" window\n+ improve Pixel Inspect window's UI\n+ improve message written after installing plugin through \"Browse online\" window\n+ improve logging\n+ reset file dialog search query after opening a directory\n+ right clicking on the path button in file dialog will open path textbox\n+ text editor's \"Find\" feature is now case insensitive\n+ unpin the variable after applying system value to it\n+ fix binding textures to HLSL shaders in the debugger\n+ fix pipeline item drag and drop\n+ fix \"Check for plugin updates on startup\" option\n+ fix undo bug that happens after autocomplete\n+ fix SPIR-V syntax highlighting on stats page\n+ fix text editor scrolling\n+ fix GLSL include directive\n+ fix converting from SPIR-V to GLSL when multiple stages are in the same file\n+ fix a bug that wouldnt let user open a project that used plugins through terminal\n\n[v1.4.1]\n+ add compute shader debugger\n+ add \"Vector watch\" window\n+ add the ability to speed up the first person camera's movement by holding SHIFT key\n+ add the ability to paste full file path in the file dialog\n+ switch from Dear ImGui's 'Columns API' to 'Tables API' in \"Watches\" & \"Breakpoints\" window\n+ fix a bug that would cause SHADERed to crash when using immediate mode while debugging vertex shaders\n+ fix a bug that would cause SHADERed to crash if shader has a function with a texture as an argument\n+ fix a bug that would keep the debugger running after \"Save As\"\n+ fix a bug that wouldn't add a project to recents after \"Save As\"\n\n[v1.4]\n+ web version of SHADERed: https://shadered.org\n+ add 'Browse online' window -> install plugins, themes & shaders through the application\n+ add \"Check for plugin updates on startup\" option\n+ add File -> Open Recent\n+ hardware mouse cursors\n+ fix \"Save As\" for projects that use textures\n+ fix render state saving\n+ fix text editor windows not being resizable\n+ fix file dialog search\n+ fix Gray theme's comments\n\n[v1.3.6]\n+ [DEBUGGER] add immediate window\n+ [DEBUGGER] add watches\n+ [DEBUGGER] add conditional breakpoints\n+ [DEBUGGER] add a feature that executes expressions on hover\n+ [DEBUGGER] add color preview for vec3 and vec4 variables\n+ add code snippets (located in Options)\n+ add a feature that allows exporting images, textures & render textures to an image file\n+ add ability to disable compute pass\n+ add ability to update image's content from a loaded texture\n+ add markers to text editor's scrollbar\n+ add \"Auto indent on paste\" option\n+ add IsSavingToFile system variable\n+ add custom file dialogs\n+ add ability to add multiple textures to project at once\n+ add KeyboardTexture description in Help -> Information\n+ implement IPlugin2\n+ redesign \"Output\" window\n+ fix text editor's \"Find and replace\" feature\n+ fix a bug that would crash SHADERed when using multiple compute shaders\n+ fix a bug that would crash SHADERed when deleting a buffer\n+ fix a bug that would crash SHADERed when setting FPS limit to 0 while the FPS limit is applied to whole application\n+ fix a bug that would add textures to Shader Pass' variables when using \"auto variables\" feature\n+ fix a bug that caused SHADERed not to apply 'system value' if a variable previously used a function\n+ fix cubemaps\n+ fix cubemap example\n+ fix a bug that would incorrectly report an error when exporting project to a C++ file\n+ fix a bug that would add some themes two times to the theme list in options\n+ fix a bug that wouldn't sync breakpoint's state when toggling it through the \"Breakpoints\" window\n+ remove \"Create shader file\" menu item\n+ rename \"Active autocomplete\" option to \"Continuous autocomplete\"\n\n[v1.3.5]\n+ plugin API v1\n+ add a feature that automatically detects and adds uniforms to variable manager\n+ add \"Active autocomplete\" option\n+ add user defined functions, variables & structures to text editor's autocomplete\n+ add KeyboardTexture object\n+ add BreakpointDisabled, UserFunction, UserType, UniformVariable, GlobalVariable, LocalVariable, FunctionArgument entries to TextEditor's theme\n+ add \"Syntax highlighting\" option\n+ add SHADERED_WEB, SHADERED_DESKTOP & SHADERED_VERSION preprocessor definitions to shaders\n+ add Preview.ToggleCursorVisibility, Preview.ToggleMouseLock & Preview.ToggleTimePause shortcuts\n+ add more information to the \"Stats\" page\n+ add ability to reload texture objects\n+ plugins are backward and forward compatible\n+ plugins can implement their own shader language & editor\n+ improve the \"auto recompile\" feature\n+ fix text editor's ui scaling\n+ fix HLSL geometry shaders\n+ fix a bug that caused SHADERed to crash when deleting render textures\n+ fix a bug that sometimes caused SHADERed to crash when deleting shader pass item\n+ fix a bug that caused deleted plugins to stay in the \"Not loaded\" list in options\n+ fix a bug that allowed user to create objects without a name\n+ fix a bug that caused SHADERed to crash when debugging a shader that uses some image functions\n+ fix cubemap saving\n+ fix text editor's \"Save changes\" popup\n+ fix \"Autocomplete\" option\n+ fix \"Brace completion\"\n+ fix mouse wrapping\n+ rename \"Recompile shader every 200ms\" to \"Recompile shader on content change\"\n+ rename \"Smart predictions\" to \"Autocomplete\"\n\n[v1.3.4]\n+ replace ShaderDebugger with SPIRV-VM (introduces significant improvements to the SHADERed's debugger)\n+ add pixel outline to debugger's overlay\n+ add debugger overlay to render texture's preview\n+ add Stats page (currently only shows SPIR-V)\n+ add \"Auto fetch\" option\n+ add \"Primitive outline\" & \"Pixel outline\" options\n+ add a feature that automatically creates shader files when creating a shader pass\n+ add line numbers in the \"Function stack\" window\n+ add statusbar to render texture's preview\n+ add new templates (QuadHLSL and QuadGLSL)\n+ primitive's outline is now shown even after zooming in when paused and debugging\n+ changing properties in Save Preview -> Advanced should now accordingly update the preview window\n+ use glslang for error messages\n+ use more powerful GPU by default (NvOptimusEnablement & AmdPowerXpressRequestHighPerformance)\n+ double clicking on an object in the \"Objects\" window now opens its preview\n+ make it possible to pick pixels on the render texture's preview window\n+ show pixel coordinates in \"Pixel Inspect\" window\n+ update text editor's light theme (better current line and \"selection\" colors)\n+ reset zoom on project load\n+ pause music & audio shader when preview is paused\n+ [DEBUGGER] now works with buffers, 3D textures and cubemaps\n+ [DEBUGGER] now works with VertexBuffer items\n+ [DEBUGGER] add support for derivative functions\n+ remove \"Immediate\" window, \"Watches\" & conditional breakpoints\n+ fix a bug where buffer objects couldn't be bound to vertex/pixel shaders\n+ fix (render) texture's preview alignment\n+ fix (render) texture's preview magnifier\n+ fix gizmo\n+ fix VertexBuffer picking + bounding box\n+ fix 3D model picking\n+ fix \"Step Out\" (it's now possible to use \"Step In\" multiple times on the same line)\n+ fix a bug that caused breakpoints to duplicate when a new line is added\n+ fix a bug that caused SHADERed to change current time after a render to file even if user didn't change it\n+ fix a bug that caused SHADERed to crash when deleting a texture that's open in properties\n+ fix a bug that caused magnifier not to zoom sometimes\n+ fix a bug that made it possible to open preview for the same object several times\n+ fix a bug that caused debugger to produce wrong numbers when it is rendered to the same render texture multiple times in the project\n+ fix a bug that caused buffer to stay bound to compute pass even after it has been unbound\n+ fix buffer's \"load data from 3D model\"\n+ fix text editor's UI when user horizontally scrolls\n+ fix a bug that would apply user's custom render states to the magnifier UI\n+ fix TextEditor::EnsureCursorVisible()\n\n[v1.3.3]\n+ add VertexBuffer\n+ add command line arguments\n+ add an option to pause buffer preview\n+ add an option to load buffer data from texture, 3D models and regular files\n+ add horizontal scrolling with mouse cursor while selecting text\n+ add SHIFT + left click to select text\n+ add color preview to vec3 and vec4 shader variables\n+ line numbers & breakpoints in text editor should now be \"pinned\" to the left side\n+ fix a bug that unfocused text editor on AltGr key press\n+ fix a bug that caused SHADERed to crash when parsing error messages\n+ fix a bug that caused SHADERed to crash when using ObjectProperty variables\n+ fix a bug that caused SHADERed to crash when a font file didn't exist\n+ fix a bug that caused SHADERed sometimes to crash after pressing \"Change Variables\" button\n+ fix a bug that caused variable values to get mixed up sometimes\n+ fix a bug that caused preview window to sometimes go blank when using an external text editor\n+ fix a bug that caused \"Save As\" file dialog to open twice when saving templates\n+ fix a bug caused by deleting variables used in the \"Change Variables\" popup\n+ fix gizmo\n+ fix file dialogs\n+ fix fps limit options\n+ fix line highlighting in the text editor\n+ fix plane and circle normals\n\n[v1.3.2]\n+ add texture properties\n+ add shader variables that point to pipeline item properties\n+ add a splash screen\n+ add \"Changelog\" popup which shows up on startup after an update\n+ add \"Show tips on startup\" option\n+ add \"This will unassign Shortcut.ID\" popup when changing shortcuts\n+ fix ScreenQuad position and size on other RTs\n+ fix a bug that caused SHADERed to crash when clicking on shader variable function list combobox\n\n[v1.3.1]\n+ add confirmation dialog when deleting a shader pass item\n+ add CTRL + scroll to change text editor font size\n+ fix font resizing/changing\n+ fix a bug where caret would move multiple characters after pressing backspace\n+ fix picking with SHIFT + A\n+ fix picking scaled 3D models\n+ fix a bug where SHADERed would sometimes block on exit on Linux\n+ fix UI scaling\n+ DPI awareness\n+ moving items up/down now counts as a project modification\n+ resizing render textures now counts as a project modification\n+ remove MatrixShadow and MatrixReflect\n\n[v1.3]\n+ add shader debugger\n+ add plugin API\n+ add MSAA\n+ add option for supersampling when rendering to an image file\n+ add support for #include keyword\n+ add \"Export -> as C++ project\" option\n+ add ability to load projects by drag and dropping them\n+ add search in Options -> Shortcuts\n+ add \"Pause preview on startup\" option\n+ add \"Show function description tooltips\" option\n+ change default font & theme\n+ change how MouseButton works\n+ change how paused state works\n+ clicking on \"Reset time\" when paused will now rerender everything\n+ fix zoom reset using double click when paused\n+ fix a bug where SHADERed would think it's minimized on startup (and slow down the whole program)\n+ fix copy and pasting '\\t'\n+ fix deleting '\\t'\n+ various fixes\n\n[v1.2.4]\n+ add drag & drop to PipelineUI\n+ add ability to \"hide/deactivate\" certain shader pass\n+ fix TextEditor shortcut system (**please update your shortcuts.kb file**)\n+ fix Home/End in TextEditor\n+ fix gizmo interaction when preview is zoomed in\n+ fix Find tool's highlighting\n+ fix pause functionality\n+ scroll to Find tool's selection\n+ Editor.Replace is now bound to CTRL+H (instead of SHIFT+H)\n\n[v1.2.3]\n+ add 3D textures\n+ add audio shaders (HLSL/GLSL synthesized audio)\n+ add ability to have multiple cameras / camera snapshots\n+ add ability to change variable type after variable has been created\n+ add a window where all system variables are listed\n+ add magnifier tool to texture/image preview window\n+ add find and replace feature in the text editor\n+ add right click context menu in the text editor\n+ add Editor.FindNext shortcut\n+ add feature that automatically adds variables on shader pass creation\n+ add support for HLSL types in the buffer format\n+ add ability to change warning, message and error text colors in the theme files\n+ add ability to use sprintf format specifiers in filenames when exporting image sequence\n+ fix copy and paste\n+ fix matrix variable exporting & importing\n+ fix a bug where openning Sobel -> Edge -> Sobel examples would break the renderer\n+ fix RT default size\n+ fix bounding box color\n+ fix a bug where SHADERed would recompile file two times after clicking \"Compile\" button\n+ fix texture loading\n+ fix \"GeometryShader\" & \"VulkanSimple\" example\n+ fix a bug where \"Outline\" example wouldn't work after Edge/Sobel examples\n+ fix ObjectPreviewUI::Close()\n+ fix a crash on openning \"cubemap\" example\n+ improve image sequence export speed\n+ any form of project saving should also now save all shader code modifications\n+ shader code modifications now also count as project modifications (now you will get \"Are you sure\" message box on exit)\n+ recompile shader pass after we change it's shader path\n+ close code editors after a shader pass has been deleted\n+ prevent various crashes (loading wrong 3D model file, wrong project file, compute shaders not supported, etc...)\n+ color compute shader labels light/dark green (can be changed)\n+ improve CTRL+F\n+ internal changes\n\n[v1.2.2]\n+ rework image objects (you can choose how to bind them & removed Read & Write flags) - **some old projects with compute shaders may not work**\n+ add support for Vulkan GLSL\n+ add input layout manager\n+ add CTRL+F in code editor\n+ add tangent, bitangent and color vertex attributes\n+ add ability to export your shader to an image sequence\n+ add support for drag & drop\n+ add resource manager\n+ add project change detection & \"Are you sure?\" message box\n+ add \"Hide menu bar in performance mode\" option\n+ add glslang error messages when preprocessing fails\n+ add CamerPosition3 and CameraDirection3 variables\n+ fix a bug which would crash whole app after deleting last variable in the list\n+ fix a bug where variable name was wrongly limited to 16chars when being created\n+ fix a bug where SHADERed would use absolute paths even if project and shader file were on the same drive\n+ fix file \"Compile\" option so that it only recompiles the correct shader pass\n+ fix \"Recompile on file change\" so that it only recompiles correct shaders\n+ fix non resizable columns\n+ fix a bug where SHADERed would sometimes crash on exit\n+ fix a bug where no actual error messages show up with the auto recompile on HLSL and Vulkan GLSL shaders\n+ fix \"Edge\" example\n+ fix for two vertical scrollbars in CodeEditorUI\n+ fix for loading textures with improper size\n+ fix ScreenQuadNDC rendering in GLSL projects\n+ save \"performance mode\" state on exit\n+ increase variable name length from 32 to 256\n+ color the \"Name:\" label red when user tries to use already existing item name\n\n[v1.2.1]\n+ fix ctrl + backspace / ctrl + delete\n+ fix ctrl + shift selecting\n+ fix \"Insert spaces on tab press\" option\n+ fix \"Show horizontal scrollbar\" option\n+ fix text editor error message color on light theme (& add ErrorMessage property to editor themes)\n+ fix various transcompiler crashes\n+ fix a crash that occurs when fetching texel data from a texture without a sampler in a HLSL shader\n+ fix a bug where text editor would append \\n at the end of file\n+ fix crash when using RWTexture2D\n+ fix crash on HLSL function calls with no arguments\n+ write item type in the Properties\n+ minor UI polishing\n\n[v1.2]\n+ add compute shaders\n+ add empty image object\n+ fix loading files from different drives on Windows\n+ fix saving info about item opened in PropertyUI\n+ fix \"Show error list window when build finishes with an error\" option\n+ temprorary fix for crash on float3(), float4(), etc...\n\n[v1.1.5]\n+ add auto recompile option (compile shaders every 200ms)\n+ add option to disable/enable window's alpha channel\n+ add \"Show whitespace\" option\n+ add ScreenQuadNDC\n+ add the ability to set CodeUI.Save and Project.Save to same shortcut\n+ add option to stream logs to log.txt\n+ fix some TextEditor bugs\n\n[v1.1.4]\n+ add option to reset time\n+ add CTRL+ALT+MWheel to zoom in/out\n+ add cubemap preview\n+ add object preview window\n+ add buffer objects\n+ add instancing\n+ add automatic update checks\n+ add option to modify system variables when rendering to image\n+ fix zoom area dragging\n+ fix zoom selection bounds\n+ fix picking when zoomed in\n+ fix gizmo, bounding box & zoom area performance\n+ fix a bug where SHADERed would crash with multiple 3D models\n\n[v1.1.3]\n+ add icon font\n+ add tool bar\n+ add zoom in/out functionality\n+ add zoom controls (ALT + LEFT drag to select the zoom area, ALT + RIGHT drag to move the zoom area, ALT + DBL CLICK reset zoom)\n+ add format property to render textures\n+ add ability to pause and increase time by 100ms (or hold CTRL to increase just by 1 frame)\n+ add Mouse and MouseButton system variables\n+ fix float4/int4/bool4 variables\n+ fix last frame flag for GeometryTransform\n+ fix a bug where bounding box wouldn't show if gizmo is turned off\n- disable last frame flag for ViewportSize\n\n[v1.1.2]\n+ add Pointer function (variables can now be pointers to other variables)\n+ add shader macros\n+ add FrameIndex system variable\n+ add shader variable flags (invert matrices, use last frame values, etc...)\n+ add option to disable RT clear\n+ fix clear color parsing\n+ fix a bug where SHADERed would crash when adding a shader pass through CreateItemUI\n\n[v1.1.1]\n+ fix a bug when multiple textures are bound but some are not used\n+ fix GLSL shaders (specify location)\n\n[v1.1.0]\n+ port from DirectX to OpenGL & SDL (works on linux now)\n+ add CMakeLists.txt\n+ use assimp - supports more 3D model file formats\n+ link glslang and SPIRV-Cross (rather than using external processes)\n+ only one variable manager for all stages (variable names now matter though)\n+ write actual error messages in the Output window\n+ add line number and shader type (source) in the Output Window\n+ support single key shortcuts (example: press F to go into Performance mode)\n+ KeyboardShortcuts doesnt listen to repeated events anymore\n+ merge DepthStencilState, RasterizerState, BlendState into one state called RenderState\n+ HLSL to GLSL transcompiler\n+ cubemaps now require path to 6 separate textures\n+ append version to project files (+ backwards compatibility)\n+ implement version #2 of SHADERed project files\n+ SHIFT+drag gizmo for faster dragging\n+ slow down the application when minimized\n+ add \"Apply the FPS limit to the whole application\" option\n+ add \"Limit application to 60FPS when it is not focused\" option\n+ limit rotation value between [0, 360] in PropertyUI\n+ duplicated object now appears in PropertyUI if \"PropertyPick\" option is turned on\n+ IsPicked variable now works with multiple items selected\n+ prompt user to save project when user tries to save changes to a shader file in a template\n+ prompt user to save project when user tries to open template shaders in an external editor\n+ add an actual logger -> outputs high amount of stuff in log.txt\n+ fix mouse cursor capture when rotating camera\n+ fix bounding boxes for other geometry types\n+ fix for \"app wont gain focus when clicking on anything but the titlebar\"\n+ fix a bug where the app would crash if when set as a default app for \".sprj\" files\n+ fix a bug where gizmo wont move with the selected object when the object is moved using PropertyUI\n+ fix a bug where user couldnt write {} (and other characters using alt and ctrl) in the text editor\n+ fix a bug where user could pick a render state item by double clicking it in PipelineUI\n+ fix a bug where two items could exist with names \"Box\", \"BoX\", etc...\n+ fix a bug where where SHADERed wouldnt check for file updates on a recently added geometry shader\n- remove FXAA\n- remove stats page\n- remove input layout manager\n- remove glslangValidator.exe & SPIRVCross.exe\n\n[v1.0.3]\n+ add ability to duplicate selected items\n+ add shift+click to select multiple items\n+ add bounding box\n+ add option to open shaders in an external text editor\n+ add a more flexible GLSL file extension system\n+ add mute button for audio files\n+ add context menu in ObjectListUI and PipelineUI\n+ add \"collapsed\" attribute to shader passes in the project file\n+ add a wheel UI when rotating an object using GizmoObject\n+ add option to snap transformations with gizmo\n+ add minor changes to UI design in Options\n+ add CTRL+click shortcut to delete the shortcut in the options\n+ add DPI scale text in the options\n+ add wrapped text in popup windows\n+ show degrees (rather than radians) in PropertyUI for OBJModel and Geometry\n+ fix gizmo (different model for scale and rotation transforms, change color on hover, etc...)\n+ fix item picking\n+ fix an error that occurs when loading audio file on a PC with no audio output device\n+ fix PipelineManager::Has -> it was possible to have two or more items with the same name\n\n[v1.0.2]\n+ add ability to load audio files\n+ add DPI awareness\n+ fix for \"VSync not being applied on startup\"\n\n[v1.0.1]\n+ add more editor shortcuts to the options\n+ add an option to automatically recompile shader on file change \n+ add performance mode (hide everything except preview window)\n+ add FXAA\n+ add \"Open project directory\" option\n+ add ability to switch what left and right click do\n+ fix TextEditor ctrl+backspace/delete\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.3515625,
          "content": "cmake_minimum_required(VERSION 3.1)\nset(CMAKE_CXX_STANDARD 17)\nproject(SHADERed)\n\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\n# source code\nset(SOURCES\n\tmain.cpp\n\tsrc/SHADERed/UI/UIHelper.cpp\n\n# connectors\n\tsrc/SHADERed/EditorEngine.cpp\n\tsrc/SHADERed/GUIManager.cpp\n\tsrc/SHADERed/InterfaceManager.cpp\n\n# objects:\n\tsrc/SHADERed/Objects/Export/ExportCPP.cpp\n\tsrc/SHADERed/Objects/Debug/ExpressionCompiler.cpp\n\tsrc/SHADERed/Objects/ArcBallCamera.cpp\n\tsrc/SHADERed/Objects/AudioAnalyzer.cpp\n\tsrc/SHADERed/Objects/AudioShaderStream.cpp\n\tsrc/SHADERed/Objects/CameraSnapshots.cpp\n\tsrc/SHADERed/Objects/CommandLineOptionParser.cpp\n\tsrc/SHADERed/Objects/DefaultState.cpp\n\tsrc/SHADERed/Objects/DebugInformation.cpp\n\tsrc/SHADERed/Objects/DebugAdapterProtocol.cpp\n\tsrc/SHADERed/Objects/FirstPersonCamera.cpp\n\tsrc/SHADERed/Objects/FunctionVariableManager.cpp\n\tsrc/SHADERed/Objects/FrameAnalysis.cpp\n\tsrc/SHADERed/Objects/GizmoObject.cpp\n\tsrc/SHADERed/Objects/ShaderCompiler.cpp\n\tsrc/SHADERed/Objects/KeyboardShortcuts.cpp\n\tsrc/SHADERed/Objects/Logger.cpp\n\tsrc/SHADERed/Objects/InputLayout.cpp\n\tsrc/SHADERed/Objects/MessageStack.cpp\n\tsrc/SHADERed/Objects/Names.cpp\n\tsrc/SHADERed/Objects/ObjectManager.cpp\n\tsrc/SHADERed/Objects/PipelineManager.cpp\n\tsrc/SHADERed/Objects/ProjectParser.cpp\n\tsrc/SHADERed/Objects/RenderEngine.cpp\n\tsrc/SHADERed/Objects/Settings.cpp\n\tsrc/SHADERed/Objects/ShaderVariableContainer.cpp\n\tsrc/SHADERed/Objects/SPIRVParser.cpp\n\tsrc/SHADERed/Objects/SystemVariableManager.cpp\n\tsrc/SHADERed/Objects/ThemeContainer.cpp\n\tsrc/SHADERed/Objects/PluginManager.cpp\n\tsrc/SHADERed/Objects/WebAPI.cpp\n\n# UI Tools\n\tsrc/SHADERed/UI/Tools/CubemapPreview.cpp\n\tsrc/SHADERed/UI/Tools/Magnifier.cpp\n\tsrc/SHADERed/UI/Tools/StatsPage.cpp\n\tsrc/SHADERed/UI/Tools/VariableValueEdit.cpp\n\tsrc/SHADERed/UI/Tools/DebuggerOutline.cpp\n\tsrc/SHADERed/UI/Tools/NotificationSystem.cpp\n\tsrc/SHADERed/UI/Tools/Texture3DPreview.cpp\n\n# UI Debug\n\tsrc/SHADERed/UI/Debug/AutoUI.cpp\n\tsrc/SHADERed/UI/Debug/BreakpointListUI.cpp\n\tsrc/SHADERed/UI/Debug/FunctionStackUI.cpp\n\tsrc/SHADERed/UI/Debug/GeometryOutputUI.cpp\n\tsrc/SHADERed/UI/Debug/TessellationControlOutputUI.cpp\n\tsrc/SHADERed/UI/Debug/ImmediateUI.cpp\n\tsrc/SHADERed/UI/Debug/ValuesUI.cpp\n\tsrc/SHADERed/UI/Debug/WatchUI.cpp\n\tsrc/SHADERed/UI/Debug/VectorWatchUI.cpp\n\n# UI\n\tsrc/SHADERed/UI/BrowseOnlineUI.cpp\n\tsrc/SHADERed/UI/CodeEditorUI.cpp\n\tsrc/SHADERed/UI/CreateItemUI.cpp\n\tsrc/SHADERed/UI/MessageOutputUI.cpp\n\tsrc/SHADERed/UI/ObjectListUI.cpp\n\tsrc/SHADERed/UI/ObjectPreviewUI.cpp\n\tsrc/SHADERed/UI/OptionsUI.cpp\n\tsrc/SHADERed/UI/PinnedUI.cpp\n\tsrc/SHADERed/UI/PipelineUI.cpp\n\tsrc/SHADERed/UI/PixelInspectUI.cpp\n\tsrc/SHADERed/UI/PreviewUI.cpp\n\tsrc/SHADERed/UI/PropertyUI.cpp\n\tsrc/SHADERed/UI/FrameAnalysisUI.cpp\n\tsrc/SHADERed/UI/ProfilerUI.cpp\n\n# engine:\n\tsrc/SHADERed/Engine/AudioPlayer.cpp\n\tsrc/SHADERed/Engine/Timer.cpp\n\tsrc/SHADERed/Engine/Model.cpp\n\tsrc/SHADERed/Engine/GLUtils.cpp\n\tsrc/SHADERed/Engine/GeometryFactory.cpp\n\tsrc/SHADERed/Engine/Ray.cpp\n\n# libraries:\n\tlibs/ImGuiColorTextEdit/TextEditor.cpp\n\tlibs/imgui/imgui_draw.cpp\n\tlibs/imgui/imgui_widgets.cpp\n\tlibs/imgui/imgui.cpp\n\tlibs/imgui/examples/imgui_impl_opengl3.cpp\n\tlibs/imgui/examples/imgui_impl_sdl.cpp\n\tlibs/SPIRVCross/spirv_cfg.cpp\n\tlibs/SPIRVCross/spirv_cross.cpp\n\tlibs/SPIRVCross/spirv_cross_util.cpp\n\tlibs/SPIRVCross/spirv_cross_parsed_ir.cpp\n\tlibs/SPIRVCross/spirv_glsl.cpp\n\tlibs/SPIRVCross/spirv_hlsl.cpp\n\tlibs/SPIRVCross/spirv_parser.cpp\n\tlibs/pugixml/src/pugixml.cpp\n\tlibs/ShaderExpressionParser/Parser.cpp\n\tlibs/ShaderExpressionParser/Tokenizer.cpp\n\tlibs/misc/ImFileDialog.cpp\n\tlibs/misc/dds.c\n)\n\n# add header files\nfile(GLOB SHADERED_HEADERS \n\t\tsrc/SHADERed/*.h\n\t\tsrc/SHADERed/Engine/*.h\n\t\tsrc/SHADERed/Objects/*.h\n\t\tsrc/SHADERed/Objects/Debug/*.h\n\t\tsrc/SHADERed/Objects/Export/*.h\n\t\tsrc/SHADERed/Objects/PluginAPI/*.h \n\t\tsrc/SHADERed/UI/*.h\n\t\tsrc/SHADERed/UI/Tools/*.h\n\t\tsrc/SHADERed/UI/Debug/*.h\n)\n\nif(WIN32)\n\tset(SOURCES\n\t\t\"${SOURCES}\"\n\t\tresource.rc\n\t)\nendif()\n\n# cmake toolchain\nif(CMAKE_TOOLCHAIN_FILE)\n    include(${CMAKE_TOOLCHAIN_FILE})\nendif(CMAKE_TOOLCHAIN_FILE)\n\n# pkg\nif (UNIX)\n  find_package(PkgConfig REQUIRED)\nendif()\n\n# sdl2\nif(WIN32 OR APPLE OR NOT ${USE_PKG_CHECK_SDL})\n  find_package(SDL2 REQUIRED)\nelse()\n  pkg_check_modules(SDL2 REQUIRED sdl2)\nendif()\n\n# opengl\nset(OpenGL_GL_PREFERENCE GLVND CACHE STRING \"Linux only: if GLVND, use the vendor-neutral GL libraries (default). If LEGACY, use the legacy ones (might be necessary to have working optirun/primusrun)\")\nset_property(CACHE OpenGL_GL_PREFERENCE PROPERTY STRINGS GLVND LEGACY)\nfind_package(OpenGL REQUIRED)\n\n# glew\nfind_package(GLEW REQUIRED)\n\n# glm\nfind_package(GLM REQUIRED)\n\n# SpvGenTwo\nadd_subdirectory(libs/SpvGenTwo)\n\n# assimp\nset(BUILD_SHARED_LIBS OFF CACHE BOOL \"Static lib\" FORCE)\nset(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL \"Assimp's tools\" FORCE)\nset(ASSIMP_BUILD_TESTS OFF CACHE BOOL \"Build tests\" FORCE)\nset(ASSIMP_WERROR OFF CACHE BOOL \"Warnings as errors\" FORCE)\nadd_subdirectory(libs/assimp)\n\n# glslang\nset(ENABLE_SPVREMAPPER OFF CACHE BOOL \"Enables building of SPVRemapper\" FORCE)\nset(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL \"Builds glslangValidator and spirv-remap\" FORCE)\nadd_subdirectory(libs/glslang)\n\n# SPIRV-VM\nadd_subdirectory(libs/SPIRV-VM)\n\n# cppdap\nset(CPPDAP_DIR libs/cppdap)\nset(CPPDAP_THIRD_PARTY_DIR libs)\nset(CPPDAP_JSON_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/json)\nadd_subdirectory(${CPPDAP_DIR})\n\n# Native macOS frameworks\nif (APPLE)\n\t# Link Homebrew library path for Mojave and up\n\t# See: https://stackoverflow.com/questions/54068035/linking-not-working-in-homebrews-cmake-since-mojave\n\tlink_directories(/usr/local/lib)\n\tset (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -framework AppKit -framework AudioToolbox -framework AudioUnit -framework Carbon -framework Cocoa -framework CoreAudio -framework CoreVideo -framework ForceFeedback -framework IOKit -framework OpenGL -framework CoreServices -framework Security\")\n\tset (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -framework AppKit -framework AudioToolbox -framework AudioUnit -framework Carbon -framework Cocoa -framework CoreAudio -framework CoreVideo -framework ForceFeedback -framework IOKit -framework OpenGL -framework CoreServices -framework Security\")\nendif()\n\n# create executable\nadd_executable(SHADERed ${SOURCES} ${SHADERED_HEADERS})\n\n# properties\nset_target_properties(SHADERed PROPERTIES\n    CXX_STANDARD 17\n    CXX_STANDARD_REQUIRED YES\n)\n\n# include directories\ntarget_include_directories(SHADERed PRIVATE ${SDL2_INCLUDE_DIRS} ${GLM_INCLUDE_DIRS} ${GLEW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIRS} ${ASSIMP_INCLUDE_DIR})\ntarget_include_directories(SHADERed PRIVATE src libs libs/glslang libs/SPIRV-VM/inc)\nif (NOT WIN32)\n\ttarget_include_directories(SHADERed PRIVATE ${GTK_INCLUDE_DIRS})\nendif()\n\n# link libraries\ntarget_link_libraries(SHADERed ${OPENGL_LIBRARIES} ${GLM_LIBRARY_DIRS} glslang SPIRV SPIRVVM assimp::assimp SpvGenTwoLib SpvGenTwoCommon cppdap)\n\nif(WIN32)\n\t# link specific win32 libraries\n\ttarget_link_libraries(SHADERed GLEW::GLEW SDL2::SDL2 SDL2::SDL2main)\n\nelseif(UNIX AND NOT APPLE)\n\t# link linux libraries\n\ttarget_link_libraries(SHADERed ${GLEW_LIBRARIES} ${SDL2_LIBRARIES} ${GTK_LIBRARIES} ${CMAKE_DL_LIBS})\n\n\tif (NOT DONT_LINK_FILESYSTEM)\n\t\ttarget_link_libraries(SHADERed stdc++fs pthread m dl)\n\tendif()\nelseif(APPLE)\n\ttarget_link_libraries(SHADERed GLEW::GLEW ${SDL2_LIBRARIES} ${GTK_LIBRARIES} ${CMAKE_DL_LIBS})\nendif()\n\nif (NOT MSVC)\n\ttarget_compile_options(SHADERed PRIVATE -Wno-narrowing)\nendif()\n\nset(BINARY_INST_DESTINATION \"bin\")\nset(RESOURCE_INST_DESTINATION \"share/shadered\")\ninstall(PROGRAMS bin/SHADERed DESTINATION \"${BINARY_INST_DESTINATION}\" RENAME shadered)\ninstall(DIRECTORY bin/data bin/templates bin/themes bin/plugins DESTINATION \"${RESOURCE_INST_DESTINATION}\")\n\nif (UNIX AND NOT APPLE)\n\t# install XDG desktop file and icon on Linux/BSD\n\tinstall(FILES Misc/Linux/org.shadered.SHADERed.desktop DESTINATION \"share/applications\" RENAME shadered.desktop)\n\tinstall(FILES Misc/Icon/icon.svg DESTINATION \"share/pixmaps\" RENAME shadered.svg)\n\tinstall(FILES bin/icon_32x32.png DESTINATION \"share/icons/hicolor/32x32/apps\" RENAME shadered.png)\n\tinstall(FILES bin/icon_64x64.png DESTINATION \"share/icons/hicolor/64x64/apps\" RENAME shadered.png)\n\tinstall(FILES bin/icon_128x128.png DESTINATION \"share/icons/hicolor/128x128/apps\" RENAME shadered.png)\n\tinstall(FILES bin/icon_256x256.png DESTINATION \"share/icons/hicolor/256x256/apps\" RENAME shadered.png)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 - 2021 dfranx\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7568359375,
          "content": "# SHADERed\n\nSHADERed is a lightweight tool for writing and debugging shaders. It is easy to use,\nopen source, cross-platform (runs on Windows, Linux & [Web](https://shadered.org/template)).\n\n<img src=\"https://shadered.org/assets/img/header.png\"/>\n\n#### Table of Contents\n* [Features](#features)\n* [Sponsors](#sponsors)\n* [Supporters](#supporters)\n* [Binaries](#binaries)\n* [Building](#building)\n* [Tutorials](#tutorials)\n* [Screenshots](#screenshots)\n* [Dependencies](#dependencies)\n* [License](#license)\n\n## Features\n\n### Shader debugger\nShader debugger lets you easily find bugs in your shader code. It is simple to use - you just need to pause\nthe preview and select the pixel that you want to debug. After starting the debugger,\nyou will be able to:\n* step through your shader code line by line\n* run immediate expressions\n* add watches\n* place (conditional) breakpoints\n* see list of all variables and their values\n* hover over expressions and see their value\n\n![Debugging a shader](./Misc/Screenshots/debugger.gif)\n\nWith SHADERed, you can debug vertex, geometry, tessellation control, pixel and compute shaders.\n\nThanks to SHADERed, you can now also debug shaders in Visual Studio Code with an extension. Read more about this in the blog post: [https://shadered.org/blog?id=9](https://shadered.org/blog?id=9).\n\n### Frame analyzer\nBesides debugging your shader line-by-line, SHADERed also lets you find bugs and errors visually.\nAfter you run the frame analyzer, you will be able to:\n* detect undefined behavior\n* see variable's value throughout the whole frame\n* global breakpoints (color a pixel that meets a certain condition)\n* SPIR-V instruction heatmap\n\n![Analyzing a frame](./Misc/Screenshots/UndefinedBehavior.png)\n\n### Compute & geometry shaders\nYou are not limited to vertex and pixel shaders. SHADERed also supports compute & geometry\nshaders. You can create advanced animations and effects with these two shader stages:\n\n![Compute shaders and buffers](./Misc/Screenshots/computesh.gif)\n\n\n### Plugin API\nYou can develop custom SHADERed plugins and upload them to [SHADERed store](https://shadered.org/addons) so that they can be installed through SHADERed.\n\nTo see the plugin API's potential, check out these plugins:\n* [GodotShaders](https://shadered.org/plugin?id=godotshaders) - adds support for Godot's canvas shaders\n* [ShadertoyImporter](https://shadered.org/plugin?id=shadertoyimport) - import ShaderToy projects\n* [GIFCapture](https://shadered.org/plugin?id=gifcapture) - adds the ability to capture GIFs\n* [Slang](https://shadered.org/plugin?id=slang) - adds support for Slang shader language\n* [Rust](https://shadered.org/plugin?id=Rust) - adds the ability to write shaders in Rust\n* [C++](https://shadered.org/plugin?id=CPP) - adds the ability to write shaders in C++\n* [Terminal](https://shadered.org/plugin?id=Terminal) - open terminal windows in SHADERed\n\n### See changes instantly\nSHADERed can compile your shaders while you write the code.\nThis way you can see your changes instantly.\nSHADERed also works nicely with external text editors (such as VS Code) - it will recompile the shaders that were modified by some external program.\n\n![Instant preview as you write your shader](./Misc/Screenshots/instantresult.gif)\n\n### Other features\nSHADERed has lots of features that let you achieve effects like in no other shader editor. Features are also being added rapidly. Here are some of the feature:\n* render states (blending, stencil test, depth test, etc...)\n* import 3D models\n* built-in 3D geometry objects\n* import 2D texture, 3D textures, cubemaps\n* import audio files (build awesome music visualizers)\n* render textures (easily build G-Buffer)\n* buffers\n* instancing\n* profiling\n* multi-camera system\n* audio shaders (generate music on GPU)\n* custom variables & powerful variable system\n* zooming in on the preview window\n* exporting image sequence\n* code autocompletion designed for shader code\n* ... and so much more!\n\n## Sponsors\n[<img height=\"90\" src=\"bin/data/sponsors/Embark-black.png\">](https://embark-studios.com/)\n\n[<img width=\"150\" src=\"https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/PNG/DO_Logo_Vertical_Blue.png\">](https://www.digitalocean.com/?utm_medium=opensource&utm_source=SHADERed)\n\n## Supporters\n**Supporter(s):**\n  * [Hugo Locurcio](https://hugo.pro)\n  * [Vladimir Alyamkin](https://alyamkin.com/)\n  * [Wogos Media](http://theWogos.com/)\n  * [Snow Developments](https://snow.llc)\n  * [Adad Morales](https://www.moralesfx.com/)\n  * [Liam Don](https://twitter.com/liamdon)\n  * [Chris Sprance](https://csprance.com)\n  * Andrew Kerr\n\nIf you like SHADERed and would like to support the development, check out Patreon: [<img width=\"120\" src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\">](https://www.patreon.com/dfranx)\n\nMy e-mail address for businesses (or if you just want to contact me):\n**contact at shadered dot org**\n\n## Binaries\nYou can download precompiled binaries through the [Releases](https://github.com/dfranx/SHADERed/releases) page or via [SHADERed's website](https://shadered.org/).\n\n### Install using Scoop (Windows)\n\nOn Windows, you can use [Scoop](https://scoop.sh) to install SHADERed:\n\n```text\nscoop bucket add extras\nscoop install shadered\n```\n\n### Install using Flatpak (Linux)\n\nSHADERed is available on\n[Flathub](https://flathub.org/apps/details/org.shadered.SHADERed). After setting\nup Flatpak, you can install it by entering the following commands in a terminal:\n\n```text\nflatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\nflatpak install --user flathub org.shadered.SHADERed -y\n```\n\nNote that the Flatpak version runs in a sandbox and some features may not work\ncorrectly yet. Please report Flatpak-specific issues\n[here](https://github.com/flathub/org.shadered.SHADERed/issues).\n\n## Building\nFirst clone the project & submodules:\n```\ngit clone https://github.com/dfranx/SHADERed.git\ncd SHADERed\ngit submodule update --init\n```\n\n### Linux\nInstall all the libraries that are needed:\n```\n# Ubuntu\nsudo apt install libsdl2-dev libglew-dev libglm-dev libgtk-3-dev\n# Fedora\nsudo dnf install glm-devel glew-devel SDL2-devel gtk3-devel\n```\n\nBuild:\n```\ncmake .\nmake\n```\n\nIf you would like to perform an out-of-source build, do the following:\n```\nmkdir build\ncd build\ncmake ..\nmake\n```\n\nRun:\n```\n./bin/SHADERed\n```\n\n### macOS\n**NOTE: macOS is not officially supported by me + some features are not implemented for macOS**\n\nInstall all the libraries that are needed:\n\n```sh\nbrew install sdl2 glew glm\n```\n\nBuild:\n\n```sh\nmkdir build\ncd build\ncmake ../\nmake -j8\n```\n\n> **Note:** If you're building on a macOS version prior to 10.15 (Catalina) you may need to update Xcode and create a symlink for the SDK:\n> \n> ```\n> ln -s \"$(xcrun --sdk macosx --show-sdk-path)\" \"$(xcrun --sdk macosx --show-sdk-platform-path)/Developer/SDKs/MacOSX10.15.sdk\"\n> ```\n\nRun:\n```\n./bin/SHADERed\n```\n\n### Windows\n1. Install SDL2, GLEW & GLM through your favourite package manager (I recommend vcpkg)\n2. Run cmake-gui and set CMAKE_TOOLCHAIN_FILE variable\n3. Press Configure and then Generate if no errors occured\n4. Open the .sln and build the project!\n\n## Tutorials\nDon't know how or where to start? The debugger is confusing? Want to create your own\nshader or custom SHADERed theme? Visit [the official documentation](https://shadered.org/docs/index.html)\nto see detailed steps on how to do these things.\nOr you can watch the video tutorials on [YouTube](https://www.youtube.com/watch?v=vuJLpnL73As&list=PLK0EO-cKorzRAEfwHoJFiIldiyiyDR3-2).\n\n## Screenshots\n![](./Misc/Screenshots/screen1.jpg)\n    <em>Shader made by <a href=\"https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\">The Art Of Code</a></em>\n\n![](https://user-images.githubusercontent.com/3957610/64245795-e54b0680-cf0b-11e9-8799-ea7ace785190.png)\n\nSend your own screenshots [here](https://github.com/dfranx/SHADERed/issues/8)!\n\n## Dependencies\nThis project uses:\n - [assimp/assimp](https://github.com/assimp/assimp)\n - [KhronosGroup/glslang](https://github.com/KhronosGroup/glslang)\n - [ocornut/imgui](https://github.com/ocornut/imgui/tree/docking) (docking + tables branch)\n - [juliettef/imgui_markdown](https://github.com/juliettef/imgui_markdown)\n - [BalazsJako/ImGuiColorTextEdit](https://github.com/BalazsJako/ImGuiColorTextEdit)\n - [benhoyt/inih](https://github.com/benhoyt/inih)\n - [zeux/pugixml](https://github.com/zeux/pugixml)\n - [dfranx/ShaderExpressionParser](https://github.com/dfranx/ShaderExpressionParser)\n - [KhronosGroup/SPIRV-Cross](https://github.com/KhronosGroup/SPIRV-Cross)\n - [dfranx/SPIRV-VM](https://github.com/dfranx/SPIRV-VM)\n - [rAzoR8/SpvGenTwo](https://github.com/rAzoR8/SpvGenTwo)\n - [nothings/stb](https://github.com/nothings/stb)\n - [dfranx/ImFileDialog](https://github.com/dfranx/ImFileDialog)\n - [dfranx/dds](https://github.com/dfranx/dds)\n\n## LICENSE\nSHADERed is licensed under MIT license. See [LICENSE](./LICENSE) for more details.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon.ico",
          "type": "blob",
          "size": 120.158203125,
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 14.8173828125,
          "content": "#ifdef _WIN32\n#include <windows.h>\n#endif\n\n#include <SDL2/SDL.h>\n#include <SHADERed/EditorEngine.h>\n#include <SHADERed/Objects/CommandLineOptionParser.h>\n#include <SHADERed/Objects/ShaderCompiler.h>\n#include <SHADERed/Objects/Logger.h>\n#include <SHADERed/Objects/Settings.h>\n#include <SHADERed/Objects/Export/ExportCPP.h>\n#include <glslang/Public/ShaderLang.h>\n\n#include <chrono>\n#include <filesystem>\n#include <fstream>\n#include <thread>\n#include <string>\n\n#include <misc/stb_image.h>\n#include <misc/stb_image_write.h>\n\n#if defined(__linux__) || defined(__unix__)\n#include <libgen.h>\n#include <unistd.h>\n#endif\n\n#if defined(_WIN32)\nextern \"C\" {\n\t__declspec(dllexport) DWORD NvOptimusEnablement = 0x00000001;\n\t__declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;\n}\n#endif\n\n#if defined(NDEBUG) && defined(_WIN32)\n#pragma comment(linker, \"/SUBSYSTEM:windows /ENTRY:mainCRTStartup\")\n#endif\n\n// SDL defines main\n#undef main\n\nvoid SetIcon(SDL_Window* wnd);\nvoid SetDpiAware();\n\nint main(int argc, char* argv[])\n{\n\tsrand(time(NULL));\n\t\n\tstd::error_code fsError;\n\tstd::filesystem::path cmdDir = std::filesystem::current_path();\n\n\tif (argc > 0) {\n\t\tif (std::filesystem::exists(std::filesystem::path(argv[0]).parent_path())) {\n\t\t\tstd::filesystem::current_path(std::filesystem::path(argv[0]).parent_path(), fsError);\n\n\t\t\ted::Logger::Get().Log(\"Setting current_path to \" + std::filesystem::current_path().generic_string());\n\t\t}\n\t}\n\n\t// start glslang process\n\tbool glslangInit = glslang::InitializeProcess();\n\ted::Logger::Get().Log(\"Initializing glslang...\");\n\n\tif (glslangInit)\n\t\ted::Logger::Get().Log(\"Finished glslang initialization\");\n\telse\n\t\ted::Logger::Get().Log(\"Failed to initialize glslang\", true);\n\n\ted::CommandLineOptionParser coptsParser;\n\tcoptsParser.Parse(cmdDir, argc - 1, argv + 1);\n\tcoptsParser.Execute();\n\n\tif (!coptsParser.LaunchUI)\n\t\treturn 0;\n\n#if defined(__linux__) || defined(__unix__)\n\tbool linuxUseHomeDir = false;\n\n\t// currently the only supported argument is a path to set the working directory... dont do this check if user wants to explicitly set the working directory,\n\t// TODO: if more arguments get added, use different methods to check if working directory is being set explicitly\n\t{\n\t\tchar result[PATH_MAX + 1];\n\t\tssize_t readlinkRes = readlink(\"/proc/self/exe\", result, PATH_MAX);\n\t\tstd::string exePath = \"\";\n\t\tif (readlinkRes > 0) {\n\t\t\tresult[readlinkRes] = '\\0';\n\t\t\texePath = std::string(dirname(result));\n\t\t}\n\t\t\n\t\tstd::vector<std::string> toCheck = {\n\t\t\t\"/../share/SHADERed\",\n\t\t\t\"/../share/shadered\"\n\t\t\t// TODO: maybe more paths here?\n\t\t};\n\n\t\tfor (const auto& wrkpath : toCheck) {\n\t\t\tif (std::filesystem::exists(exePath + wrkpath, fsError)) {\n\t\t\t\tlinuxUseHomeDir = true;\n\t\t\t\tstd::filesystem::current_path(exePath + wrkpath, fsError);\n\t\t\t\ted::Logger::Get().Log(\"Setting current_path to \" + std::filesystem::current_path().generic_string());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (access(exePath.c_str(), W_OK) != 0) \n\t\t\tlinuxUseHomeDir = true;\t\t\n\t}\n\n\tif (linuxUseHomeDir) {\n\t\tconst char *homedir = getenv(\"XDG_DATA_HOME\");\n\t\tstd::string homedirSuffix = \"\";\n\t\tif (homedir == NULL) {\n\t\t\thomedir = getenv(\"HOME\");\n\t\t\thomedirSuffix = \"/.local/share\";\n\t\t}\n\t\t\n\t\tif (homedir != NULL) {\n\t\t\ted::Settings::Instance().LinuxHomeDirectory = std::string(homedir) + homedirSuffix + \"/shadered/\";\n\n\t\t\tif (!std::filesystem::exists(ed::Settings::Instance().LinuxHomeDirectory, fsError))\n\t\t\t\tstd::filesystem::create_directory(ed::Settings::Instance().LinuxHomeDirectory, fsError);\n\t\t\tif (!std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"data\"), fsError))\n\t\t\t\tstd::filesystem::create_directory(ed::Settings::Instance().ConvertPath(\"data\"), fsError);\n\t\t\tif (!std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"themes\"), fsError))\n\t\t\t\tstd::filesystem::create_directory(ed::Settings::Instance().ConvertPath(\"themes\"), fsError);\n\t\t\tif (!std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"plugins\"), fsError))\n\t\t\t\tstd::filesystem::create_directory(ed::Settings::Instance().ConvertPath(\"plugins\"), fsError);\n\t\t}\n\t}\n#endif\n\n\t// create data directory on startup\n\tif (!std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"data/\"), fsError))\n\t\tstd::filesystem::create_directory(ed::Settings::Instance().ConvertPath(\"data/\"), fsError);\n\n\t// create temp directory\n\tif (!std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"temp/\"), fsError))\n\t\tstd::filesystem::create_directory(ed::Settings::Instance().ConvertPath(\"temp/\"), fsError);\n\n\t// delete log.txt on startup\n\tif (std::filesystem::exists(ed::Settings::Instance().ConvertPath(\"log.txt\"), fsError))\n\t\tstd::filesystem::remove(ed::Settings::Instance().ConvertPath(\"log.txt\"), fsError);\n\n\t// set stb_image flags\n\tstbi_flip_vertically_on_write(1);\n\tstbi_set_flip_vertically_on_load(1);\n\n\t// init sdl2\n\tif (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER | SDL_INIT_AUDIO) < 0) {\n\t\ted::Logger::Get().Log(\"Failed to initialize SDL2\", true);\n\t\ted::Logger::Get().Save();\n\t\treturn 0;\n\t} else\n\t\ted::Logger::Get().Log(\"Initialized SDL2\");\n\n\t// load window size\n\tstd::string preloadDatPath = \"data/preload.dat\";\n\tif (!ed::Settings::Instance().LinuxHomeDirectory.empty() && std::filesystem::exists(ed::Settings::Instance().LinuxHomeDirectory + preloadDatPath, fsError))\n\t\tpreloadDatPath = ed::Settings::Instance().ConvertPath(preloadDatPath);\n\tshort wndWidth = 800, wndHeight = 600, wndPosX = -1, wndPosY = -1;\n\tbool fullscreen = false, maximized = false, perfMode = false;\n\tstd::ifstream preload(preloadDatPath);\n\tif (preload.is_open()) {\n\t\ted::Logger::Get().Log(\"Loading window information from data/preload.dat\");\n\n\t\tpreload.read(reinterpret_cast<char*>(&wndWidth), 2);\n\t\tpreload.read(reinterpret_cast<char*>(&wndHeight), 2);\n\t\tpreload.read(reinterpret_cast<char*>(&wndPosX), 2);\n\t\tpreload.read(reinterpret_cast<char*>(&wndPosY), 2);\n\t\tfullscreen = preload.get();\n\t\tmaximized = preload.get();\n\t\tif (preload.peek() != EOF)\n\t\t\tperfMode = preload.get();\n\t\tpreload.close();\n\n\t\t// clamp to desktop size\n\t\tSDL_DisplayMode desk;\n\t\tSDL_GetCurrentDisplayMode(0, &desk);\n\t\tif (wndWidth > desk.w)\n\t\t\twndWidth = desk.w;\n\t\tif (wndHeight > desk.h)\n\t\t\twndHeight = desk.h;\n\t} else {\n\t\ted::Logger::Get().Log(\"File data/preload.dat doesnt exist\", true);\n\t\ted::Logger::Get().Log(\"Deleting data/workspace.dat\", true);\n\n\t\tstd::filesystem::remove(\"./data/workspace.dat\", fsError);\n\t}\n\n\t// apply parsed CL options\n\tif (coptsParser.MinimalMode)\n\t\tmaximized = false;\n\tif (coptsParser.WindowWidth > 0)\n\t\twndWidth = coptsParser.WindowWidth;\n\tif (coptsParser.WindowHeight > 0)\n\t\twndHeight = coptsParser.WindowHeight;\n\tperfMode = perfMode || coptsParser.PerformanceMode;\n\tfullscreen = fullscreen || coptsParser.Fullscreen;\n\tmaximized = maximized || coptsParser.Maximized;\n\n\tSDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);\n\tSDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);\n\tSDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);\n\tSDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); // double buffering\n\n\tUint32 windowFlags = SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE | SDL_WINDOW_ALLOW_HIGHDPI;\n\n\tbool run = true; // should we enter the infinite loop?\n\t// make the window invisible if only rendering to a file\n\tif (coptsParser.Render || coptsParser.ConvertCPP) {\n\t\twindowFlags = SDL_WINDOW_OPENGL | SDL_WINDOW_HIDDEN;\n\t\tmaximized = false;\n\t\tfullscreen = false;\n\t\trun = false;\n\t}\n\n\t// open window\n\tSDL_Window* wnd = SDL_CreateWindow(\"SHADERed\", (wndPosX == -1) ? SDL_WINDOWPOS_CENTERED : wndPosX, (wndPosY == -1) ? SDL_WINDOWPOS_CENTERED : wndPosY, wndWidth, wndHeight, windowFlags);\n\tSetDpiAware();\n\tSDL_SetWindowMinimumSize(wnd, 200, 200);\n\n\tif (maximized)\n\t\tSDL_MaximizeWindow(wnd);\n\tif (fullscreen)\n\t\tSDL_SetWindowFullscreen(wnd, SDL_WINDOW_FULLSCREEN_DESKTOP);\n\n\t// get GL context\n\tSDL_GLContext glContext = SDL_GL_CreateContext(wnd);\n\tSDL_GL_MakeCurrent(wnd, glContext);\n\tglEnable(GL_DEPTH_TEST);\n\tglEnable(GL_STENCIL_TEST);\n\n\t// init glew\n\tglewExperimental = true;\n\tif (glewInit() != GLEW_OK) {\n\t\ted::Logger::Get().Log(\"Failed to initialize GLEW\", true);\n\t\ted::Logger::Get().Save();\n\t\treturn 0;\n\t} else\n\t\ted::Logger::Get().Log(\"Initialized GLEW\");\n\n\t// create engine\n\ted::EditorEngine engine(wnd, &glContext);\n\ted::Logger::Get().Log(\"Creating EditorEngine...\");\n\tengine.Create();\n\ted::Logger::Get().Log(\"Created EditorEngine\");\n\tengine.Interface().Run = run;\n\n\t// set window icon:\n\tSetIcon(wnd);\n\n\tengine.UI().SetCommandLineOptions(coptsParser);\n\tengine.UI().SetPerformanceMode(perfMode);\n\tengine.Interface().Renderer.AllowComputeShaders(GLEW_ARB_compute_shader);\n\tengine.Interface().Renderer.AllowTessellationShaders(GLEW_ARB_tessellation_shader);\n\n\t// check for filesystem errors\n\tif (fsError)\n\t\ted::Logger::Get().Log(\"A filesystem error has occured: \" + fsError.message(), true);\n\n\t// loop through all OpenGL errors\n\tGLenum oglError;\n\twhile ((oglError = glGetError()) != GL_NO_ERROR)\n\t\ted::Logger::Get().Log(\"GL error: \" + std::to_string(oglError), true);\n\n\t// convert .sprj -> cmake/c++\n\tif (coptsParser.ConvertCPP) {\n\t\tengine.UI().Open(coptsParser.ProjectFile);\n\t\ted::ExportCPP::Export(&engine.Interface(), coptsParser.CMakePath, true, true, \"ShaderProject\", true, true, true);\n\t\t// return 0;\n\t}\n\n\t// render to file\n\tif (coptsParser.Render) {\n\t\tengine.UI().Open(coptsParser.ProjectFile);\n\t\tprintf(\"Rendering to file...\\n\");\n\t\tengine.UI().SavePreviewToFile();\n\t}\n\n\t// start the DAP server\n\tif (coptsParser.StartDAPServer)\n\t\tengine.Interface().DAP.Initialize();\n\n\t// timer for time delta\n\ted::eng::Timer timer;\n\tSDL_Event event;\n\tbool minimized = false;\n\tbool hasFocus = true;\n\twhile (engine.Interface().Run) {\n\t\twhile (SDL_PollEvent(&event)) {\n\t\t\tif (event.type == SDL_QUIT) {\n\t\t\t\tbool cont = true;\n\t\t\t\tif (engine.Interface().Parser.IsProjectModified()) {\n\t\t\t\t\tint btnID = engine.UI().AreYouSure();\n\t\t\t\t\tif (btnID == 2)\n\t\t\t\t\t\tcont = false;\n\t\t\t\t}\n\n\t\t\t\tif (cont) {\n\t\t\t\t\tengine.Interface().Run = false;\n\t\t\t\t\ted::Logger::Get().Log(\"Received SDL_QUIT event -> quitting\");\n\t\t\t\t}\n\t\t\t} else if (event.type == SDL_WINDOWEVENT) {\n\t\t\t\tif (event.window.event == SDL_WINDOWEVENT_MOVED || event.window.event == SDL_WINDOWEVENT_MAXIMIZED || event.window.event == SDL_WINDOWEVENT_RESIZED) {\n\t\t\t\t\tUint32 wndFlags = SDL_GetWindowFlags(wnd);\n\n\t\t\t\t\tmaximized = wndFlags & SDL_WINDOW_MAXIMIZED;\n\t\t\t\t\tfullscreen = wndFlags & SDL_WINDOW_FULLSCREEN_DESKTOP;\n\t\t\t\t\tminimized = false;\n\n\t\t\t\t\t// cache window size and position\n\t\t\t\t\tif (!maximized) {\n\t\t\t\t\t\tint tempX = 0, tempY = 0;\n\t\t\t\t\t\tSDL_GetWindowPosition(wnd, &tempX, &tempY);\n\t\t\t\t\t\twndPosX = tempX;\n\t\t\t\t\t\twndPosY = tempY;\n\n\t\t\t\t\t\tSDL_GetWindowSize(wnd, &tempX, &tempY);\n\t\t\t\t\t\twndWidth = tempX;\n\t\t\t\t\t\twndHeight = tempY;\n\t\t\t\t\t}\n\t\t\t\t} else if (event.window.event == SDL_WINDOWEVENT_MINIMIZED)\n\t\t\t\t\tminimized = true;\n\t\t\t\telse if (event.window.event == SDL_WINDOWEVENT_FOCUS_LOST)\n\t\t\t\t\thasFocus = false;\n\t\t\t\telse if (event.window.event == SDL_WINDOWEVENT_FOCUS_GAINED)\n\t\t\t\t\thasFocus = true;\n\t\t\t}\n#if defined(_WIN32)\n\t\t\telse if (event.type == SDL_SYSWMEVENT) {\n\t\t\t\t// this doesn't work - it seems that SDL doesn't forward WM_DPICHANGED message\n\t\t\t\tif (event.syswm.type == WM_DPICHANGED && ed::Settings::Instance().General.AutoScale) {\n\t\t\t\t\tfloat dpi = 0.0f;\n\t\t\t\t\tint wndDisplayIndex = SDL_GetWindowDisplayIndex(wnd);\n\t\t\t\t\tSDL_GetDisplayDPI(wndDisplayIndex, &dpi, NULL, NULL);\n\n\t\t\t\t\tif (dpi <= 0.0f) dpi = 1.0f;\n\n\t\t\t\t\ted::Settings::Instance().TempScale = dpi / 96.0f;\n\t\t\t\t\ted::Logger::Get().Log(\"Updating DPI to \" + std::to_string(dpi / 96.0f));\n\t\t\t\t}\n\t\t\t}\n#endif\n\t\t\tengine.OnEvent(event);\n\t\t}\n\n\t\tif (!engine.Interface().Run) break;\n\n\t\tfloat delta = timer.Restart();\n\t\tengine.Update(delta);\n\n\t\tglBindFramebuffer(GL_FRAMEBUFFER, 0);\n\t\tglClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);\n\n\t\tengine.Render();\n\t\tSDL_GL_SwapWindow(wnd);\n\n\t\tif (minimized && delta * 1000 < 33)\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(33 - (int)(delta * 1000)));\n\t\telse if (!hasFocus && ed::Settings::Instance().Preview.LostFocusLimitFPS && delta * 1000 < 16)\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(16 - (int)(delta * 1000)));\n\t}\n\n\tengine.UI().Destroy();\n\n\t// union for converting short to bytes\n\tunion {\n\t\tshort size;\n\t\tchar data[2];\n\t} converter;\n\n\t// save window size\n\tpreloadDatPath = ed::Settings::Instance().ConvertPath(\"data/preload.dat\");\n\tif (!coptsParser.Render && !coptsParser.ConvertCPP) {\n\t\ted::Logger::Get().Log(\"Saving window information\");\n\n\t\tstd::ofstream save(preloadDatPath);\n\t\tconverter.size = wndWidth; // write window width\n\t\tsave.write(converter.data, 2);\n\t\tconverter.size = wndHeight; // write window height\n\t\tsave.write(converter.data, 2);\n\t\tconverter.size = wndPosX; // write window position x\n\t\tsave.write(converter.data, 2);\n\t\tconverter.size = wndPosY; // write window position y\n\t\tsave.write(converter.data, 2);\n\t\tsave.put(fullscreen);\n\t\tsave.put(maximized);\n\t\tsave.put(engine.UI().IsPerformanceMode());\n\t\tsave.write(converter.data, 2);\n\t\tsave.close();\n\t}\n\n\t// close and free the memory\n\tengine.Destroy();\n\n\t// sdl2\n\tSDL_GL_DeleteContext(glContext);\n\tSDL_DestroyWindow(wnd);\n\tSDL_Quit();\n\n\ted::Logger::Get().Log(\"Destroyed EditorEngine and SDL2\");\n\n\ted::Logger::Get().Save();\n\n\treturn 0;\n}\n\nvoid SetIcon(SDL_Window* wnd)\n{\n\tfloat dpi = 0.0f;\n\tint wndDisplayIndex = SDL_GetWindowDisplayIndex(wnd);\n\tSDL_GetDisplayDPI(wndDisplayIndex, &dpi, NULL, NULL);\n\tdpi /= 96.0f;\n\n\tif (dpi <= 0.0f) dpi = 1.0f;\n\n\tstbi_set_flip_vertically_on_load(0);\n\n\tint req_format = STBI_rgb_alpha;\n\tint width, height, orig_format;\n\tunsigned char* data = stbi_load(dpi == 1.0f ? \"./icon_64x64.png\" : \"./icon_256x256.png\", &width, &height, &orig_format, req_format);\n\tif (data == NULL) {\n\t\ted::Logger::Get().Log(\"Failed to set window icon\", true);\n\t\treturn;\n\t}\n\n\tint depth, pitch;\n\tUint32 pixel_format;\n\tif (req_format == STBI_rgb) {\n\t\tdepth = 24;\n\t\tpitch = 3 * width; // 3 bytes per pixel * pixels per row\n\t\tpixel_format = SDL_PIXELFORMAT_RGB24;\n\t} else { // STBI_rgb_alpha (RGBA)\n\t\tdepth = 32;\n\t\tpitch = 4 * width;\n\t\tpixel_format = SDL_PIXELFORMAT_RGBA32;\n\t}\n\n\tSDL_Surface* surf = SDL_CreateRGBSurfaceWithFormatFrom((void*)data, width, height,\n\t\tdepth, pitch, pixel_format);\n\n\tif (surf == NULL) {\n\t\ted::Logger::Get().Log(\"Failed to create icon SDL_Surface\", true);\n\t\tstbi_image_free(data);\n\t\treturn;\n\t}\n\n\tSDL_SetWindowIcon(wnd, surf);\n\n\tSDL_FreeSurface(surf);\n\tstbi_image_free(data);\n\n\tstbi_set_flip_vertically_on_load(1);\n}\nvoid SetDpiAware()\n{\n#if defined(_WIN32)\n\tenum DpiAwareness {\n\t\tUnaware,\n\t\tSystem,\n\t\tPerMonitor\n\t};\n\ttypedef HRESULT(WINAPI * SetProcessDpiAwarenessFn)(DpiAwareness);\n\ttypedef BOOL(WINAPI * SetProcessDPIAwareFn)(void);\n\n\tHINSTANCE lib = LoadLibraryA(\"Shcore.dll\");\n\n\tif (lib) {\n\t\tSetProcessDpiAwarenessFn setProcessDpiAwareness = (SetProcessDpiAwarenessFn)GetProcAddress(lib, \"SetProcessDpiAwareness\");\n\t\tif (setProcessDpiAwareness)\n\t\t\tsetProcessDpiAwareness(DpiAwareness::PerMonitor);\n\t} else {\n\t\tlib = LoadLibraryA(\"user32.dll\");\n\t\tif (lib) {\n\t\t\tSetProcessDPIAwareFn setProcessDPIAware = (SetProcessDPIAwareFn)GetProcAddress(lib, \"SetProcessDPIAware\");\n\n\t\t\tif (setProcessDPIAware)\n\t\t\t\tsetProcessDPIAware();\n\t\t}\n\t}\n\n\tif (lib)\n\t\tFreeLibrary(lib);\n#endif\n}\n"
        },
        {
          "name": "resource.rc",
          "type": "blob",
          "size": 0.126953125,
          "content": "﻿IDI_ICON1               ICON                    \"icon.ico\"\r\n\r\n\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}