{
  "metadata": {
    "timestamp": 1736566433083,
    "page": 32,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dmlc/xgboost",
      "stars": 26470,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 5.6279296875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveMacros: None\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nQualifierAlignment: Leave\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nPackConstructorInitializers: NextLine\nBasedOnStyle:    ''\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nAllowAllConstructorInitializersOnNextLine: true\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentRequires:  false\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPenaltyIndentedWhitespace: 0\nPointerAlignment: Left\nPPIndentWidth:   -1\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n      - ParseTestProto\n      - ParsePartialTestProto\n    CanonicalDelimiter: pb\n    BasedOnStyle:    google\nReferenceAlignment: Pointer\nReflowComments:  true\nShortNamespaceLines: 1\nSortIncludes:    CaseSensitive\nSortJavaStaticImport: Before\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nBitFieldColonSpacing: Both\nStandard:        Auto\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseCRLF:         false\nUseTab:          Never\nWhitespaceSensitiveMacros:\n  - STRINGIZE\n  - PP_STRINGIZE\n  - BOOST_PP_STRINGIZE\n  - NS_SWIFT_NAME\n  - CF_SWIFT_NAME\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.9521484375,
          "content": "Checks: 'modernize-*,-modernize-use-nodiscard,-modernize-concat-nested-namespaces,-modernize-make-*,-modernize-use-auto,-modernize-raw-string-literal,-modernize-avoid-c-arrays,-modernize-use-trailing-return-type,google-*,-google-default-arguments,-clang-diagnostic-#pragma-messages,readability-identifier-naming'\nCheckOptions:\n  - { key: readability-identifier-naming.ClassCase,                 value: CamelCase  }\n  - { key: readability-identifier-naming.StructCase,                value: CamelCase  }\n  - { key: readability-identifier-naming.TypeAliasCase,             value: CamelCase  }\n  - { key: readability-identifier-naming.TypedefCase,               value: CamelCase  }\n  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: CamelCase  }\n  - { key: readability-identifier-naming.MemberCase,                value: lower_case }\n  - { key: readability-identifier-naming.PrivateMemberSuffix,       value: '_'        }\n  - { key: readability-identifier-naming.ProtectedMemberSuffix,     value: '_'        }\n  - { key: readability-identifier-naming.EnumCase,                  value: CamelCase  }\n  - { key: readability-identifier-naming.EnumConstant,              value: CamelCase  }\n  - { key: readability-identifier-naming.EnumConstantPrefix,        value: k          }\n  - { key: readability-identifier-naming.GlobalConstantCase,        value: CamelCase  }\n  - { key: readability-identifier-naming.GlobalConstantPrefix,      value: k          }\n  - { key: readability-identifier-naming.StaticConstantCase,        value: CamelCase  }\n  - { key: readability-identifier-naming.StaticConstantPrefix,      value: k          }\n  - { key: readability-identifier-naming.ConstexprVariableCase,     value: CamelCase  }\n  - { key: readability-identifier-naming.ConstexprVariablePrefix,   value: k          }\n  - { key: readability-identifier-naming.FunctionCase,              value: CamelCase  }\n  - { key: readability-identifier-naming.NamespaceCase,             value: lower_case }\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1376953125,
          "content": "root = true\n\n[*]\ncharset=utf-8\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\n\n[*.py]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2626953125,
          "content": "* text=auto\n\n*.c   text eol=lf\n*.h   text eol=lf\n*.cc  text eol=lf\n*.cuh text eol=lf\n*.cu  text eol=lf\n*.py  text eol=lf\n*.txt text eol=lf\n*.R   text eol=lf\n*.scala text eol=lf\n*.java  text eol=lf\n\n*.sh text eol=lf\n\n*.rst text eol=lf\n*.md  text eol=lf\n*.csv text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6806640625,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.page\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.page\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*~\n*.Rcheck\n*.rds\n*.tar.gz\n*conf\n*buffer\n*.model\n*pyc\n*.train\n*.test\n*.tar\n*group\n*rar\n*vali\n*sdf\nRelease\n*exe\n*exp\nipch\n*.filters\n*.user\n*log\nrmm_log.txt\nDebug\n*suo\n.Rhistory\n*.dll\n*i386\n*x64\n*dump\n*save\n*csv\n.Rproj.user\n*.cpage.col\n*.cpage\n*.Rproj\n./xgboost.mpi\n./xgboost.mock\n*.bak\n#.Rbuildignore\nR-package.Rproj\nR-package/build/*\n*.cache*\n.mypy_cache/\ndoxygen\n\n# java\njava/xgboost4j/target\njava/xgboost4j/tmp\njava/xgboost4j-demo/target\njava/xgboost4j-demo/data/\njava/xgboost4j-demo/tmp/\njava/xgboost4j-demo/model/\nnb-configuration*\n\n# Eclipse\n.project\n.cproject\n.classpath\n.pydevproject\n.settings/\n/build\n/build-gpu\n/xgboost\n*.data\nbuild_plugin\nrecommonmark/\ntags\nTAGS\n*.class\ntarget\n*.swp\n\n# cpp tests and gcov generated files\n*.gcov\n*.gcda\n*.gcno\n*.ubj\nbuild_tests\n/tests/cpp/xgboost_test\n\n.DS_Store\nlib/\n\n# spark\nmetastore_db\n\n/include/xgboost/build_config.h\n\n# files from R-package source install\n**/config.status\nR-package/config.h\nR-package/src/Makevars\n*.lib\n\n# Visual Studio\n.vs/\nCMakeSettings.json\n*.ilk\n*.pdb\n\n# IntelliJ/CLion\n.idea\n*.iml\n/cmake-build-debug/\n\n# GDB\n.gdb_history\n\n# Python joblib.Memory used in pytest.\ncachedir/\n\n# Files from local Dask work\ndask-worker-space/\n\n# Jupyter notebook checkpoints\n.ipynb_checkpoints/\n\n# credentials and key material\nconfig\ncredentials\ncredentials.csv\n*.env\n*.pem\n*.pub\n*.rdp\n*_rsa\n\n# Visual Studio code + extensions\n.vscode\n.metals\n.bloop\n\n# python tests\n*.bin\ndemo/**/*.txt\n*.dmatrix\n.hypothesis\n__MACOSX/\nmodel*.json\n/tests/python/models/models/\n\n# R tests\n*.htm\n*.html\n*.libsvm\n*.rds\nRplots.pdf\n*.zip\n\n# nsys\n*.nsys-rep\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1904296875,
          "content": "[submodule \"dmlc-core\"]\n\tpath = dmlc-core\n\turl = https://github.com/dmlc/dmlc-core\n\tbranch = main\n[submodule \"gputreeshap\"]\n\tpath = gputreeshap\n\turl = https://github.com/rapidsai/gputreeshap.git\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.6923828125,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nsubmodules:\n  include: all\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n  apt_packages:\n    - graphviz\n    - cmake\n    - g++\n    - doxygen\n    - ninja-build\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n   configuration: doc/conf.py\n\n# If using Sphinx, optionally build your docs in additional formats such as PDF\nformats:\n   - pdf\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n   - requirements: doc/requirements.txt\n"
        },
        {
          "name": "CITATION",
          "type": "blob",
          "size": 0.6044921875,
          "content": "@inproceedings{Chen:2016:XST:2939672.2939785,\n author = {Chen, Tianqi and Guestrin, Carlos},\n title = {{XGBoost}: A Scalable Tree Boosting System},\n booktitle = {Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},\n series = {KDD '16},\n year = {2016},\n isbn = {978-1-4503-4232-2},\n location = {San Francisco, California, USA},\n pages = {785--794},\n numpages = {10},\n url = {http://doi.acm.org/10.1145/2939672.2939785},\n doi = {10.1145/2939672.2939785},\n acmid = {2939785},\n publisher = {ACM},\n address = {New York, NY, USA},\n keywords = {large-scale machine learning},\n}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.0400390625,
          "content": "cmake_minimum_required(VERSION 3.18 FATAL_ERROR)\n\nif(PLUGIN_SYCL)\n  string(REPLACE \" -isystem ${CONDA_PREFIX}/include\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\nendif()\n\nproject(xgboost LANGUAGES CXX C VERSION 3.0.0)\ninclude(cmake/Utils.cmake)\nlist(APPEND CMAKE_MODULE_PATH \"${xgboost_SOURCE_DIR}/cmake/modules\")\n\n# These policies are already set from 3.18 but we still need to set the policy\n# default variables here for lower minimum versions in the submodules\nset(CMAKE_POLICY_DEFAULT_CMP0063 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0076 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0079 NEW)\n\nmessage(STATUS \"CMake version ${CMAKE_VERSION}\")\n\n# Check compiler versions\n# Use recent compilers to ensure that std::filesystem is available\nif(MSVC)\n  if(MSVC_VERSION LESS 1920)\n    message(FATAL_ERROR \"Need Visual Studio 2019 or newer to build XGBoost\")\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"8.1\")\n    message(FATAL_ERROR \"Need GCC 8.1 or newer to build XGBoost\")\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"11.0\")\n    message(FATAL_ERROR \"Need Xcode 11.0 (AppleClang 11.0) or newer to build XGBoost\")\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"9.0\")\n    message(FATAL_ERROR \"Need Clang 9.0 or newer to build XGBoost\")\n  endif()\nendif()\n\ninclude(${xgboost_SOURCE_DIR}/cmake/PrefetchIntrinsics.cmake)\nfind_prefetch_intrinsics()\ninclude(${xgboost_SOURCE_DIR}/cmake/Version.cmake)\nwrite_version()\nset_default_configuration_release()\n\n#-- Options\ninclude(CMakeDependentOption)\n\n## User options\noption(BUILD_C_DOC \"Build documentation for C APIs using Doxygen.\" OFF)\noption(USE_OPENMP \"Build with OpenMP support.\" ON)\noption(BUILD_STATIC_LIB \"Build static library\" OFF)\noption(BUILD_DEPRECATED_CLI \"Build the deprecated command line interface\" OFF)\noption(FORCE_SHARED_CRT \"Build with dynamic CRT on Windows (/MD)\" OFF)\n## Bindings\noption(JVM_BINDINGS \"Build JVM bindings\" OFF)\noption(R_LIB \"Build shared library for R package\" OFF)\n## Dev\noption(USE_DEBUG_OUTPUT \"Dump internal training results like gradients and predictions to stdout.\nShould only be used for debugging.\" OFF)\noption(FORCE_COLORED_OUTPUT \"Force colored output from compilers, useful when ninja is used instead of make.\" OFF)\noption(ENABLE_ALL_WARNINGS \"Enable all compiler warnings. Only effective for GCC/Clang\" OFF)\noption(LOG_CAPI_INVOCATION \"Log all C API invocations for debugging\" OFF)\noption(GOOGLE_TEST \"Build google tests\" OFF)\noption(USE_DMLC_GTEST \"Use google tests bundled with dmlc-core submodule\" OFF)\noption(USE_DEVICE_DEBUG \"Generate CUDA device debug info.\" OFF)\noption(USE_NVTX \"Build with cuda profiling annotations. Developers only.\" OFF)\nset(NVTX_HEADER_DIR \"\" CACHE PATH \"Path to the stand-alone nvtx header\")\noption(HIDE_CXX_SYMBOLS \"Build shared library and hide all C++ symbols\" OFF)\noption(KEEP_BUILD_ARTIFACTS_IN_BINARY_DIR \"Output build artifacts in CMake binary dir\" OFF)\n## CUDA\noption(USE_CUDA  \"Build with GPU acceleration\" OFF)\noption(USE_NCCL  \"Build with NCCL to enable distributed GPU support.\" OFF)\n# This is specifically designed for PyPI binary release and should be disabled for most of the cases.\noption(USE_DLOPEN_NCCL \"Whether to load nccl dynamically.\" OFF)\noption(BUILD_WITH_SHARED_NCCL \"Build with shared NCCL library.\" OFF)\n\nif(USE_CUDA)\n  if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES AND NOT DEFINED ENV{CUDAARCHS})\n    set(GPU_COMPUTE_VER \"\" CACHE STRING\n      \"Semicolon separated list of compute versions to be built against, e.g. '35;61'\")\n  else()\n    # Clear any cached values from previous runs\n    unset(GPU_COMPUTE_VER)\n    unset(GPU_COMPUTE_VER CACHE)\n  endif()\nendif()\n\n# CUDA device LTO was introduced in CMake v3.25 and requires host LTO to also be enabled but can still\n# be explicitly disabled allowing for LTO on host only, host and device, or neither, but device-only LTO\n# is not a supproted configuration\ncmake_dependent_option(USE_CUDA_LTO\n  \"Enable link-time optimization for CUDA device code\"\n  \"${CMAKE_INTERPROCEDURAL_OPTIMIZATION}\"\n  \"CMAKE_VERSION VERSION_GREATER_EQUAL 3.25;USE_CUDA;CMAKE_INTERPROCEDURAL_OPTIMIZATION\"\n  OFF)\n## Sanitizers\noption(USE_SANITIZER \"Use santizer flags\" OFF)\noption(SANITIZER_PATH \"Path to sanitizes.\")\nset(ENABLED_SANITIZERS \"address\" \"leak\" CACHE STRING\n  \"Semicolon separated list of sanitizer names. E.g 'address;leak'. Supported sanitizers are\naddress, leak, undefined and thread.\")\n## Plugins\noption(PLUGIN_RMM \"Build with RAPIDS Memory Manager (RMM)\" OFF)\noption(PLUGIN_FEDERATED \"Build with Federated Learning\" OFF)\n## TODO: 1. Add check if DPC++ compiler is used for building\noption(PLUGIN_SYCL \"SYCL plugin\" OFF)\noption(ADD_PKGCONFIG \"Add xgboost.pc into system.\" ON)\n\n#-- Checks for building XGBoost\nif(USE_DEBUG_OUTPUT AND (NOT (CMAKE_BUILD_TYPE MATCHES Debug)))\n  message(SEND_ERROR \"Do not enable `USE_DEBUG_OUTPUT' with release build.\")\nendif()\nif(USE_NCCL AND NOT (USE_CUDA))\n  message(SEND_ERROR \"`USE_NCCL` must be enabled with `USE_CUDA` flag.\")\nendif()\nif(USE_DEVICE_DEBUG AND NOT (USE_CUDA))\n  message(SEND_ERROR \"`USE_DEVICE_DEBUG` must be enabled with `USE_CUDA` flag.\")\nendif()\nif(BUILD_WITH_SHARED_NCCL AND (NOT USE_NCCL))\n  message(SEND_ERROR \"Build XGBoost with -DUSE_NCCL=ON to enable BUILD_WITH_SHARED_NCCL.\")\nendif()\nif(USE_DLOPEN_NCCL AND (NOT USE_NCCL))\n  message(SEND_ERROR \"Build XGBoost with -DUSE_NCCL=ON to enable USE_DLOPEN_NCCL.\")\nendif()\nif(USE_DLOPEN_NCCL AND (NOT (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")))\n  message(SEND_ERROR \"`USE_DLOPEN_NCCL` supports only Linux at the moment.\")\nendif()\nif(JVM_BINDINGS AND R_LIB)\n  message(SEND_ERROR \"`R_LIB' is not compatible with `JVM_BINDINGS' as they both have customized configurations.\")\nendif()\nif(R_LIB AND GOOGLE_TEST)\n  message(\n    WARNING\n    \"Some C++ tests will fail with `R_LIB` enabled, as R package redirects some functions to R runtime implementation.\"\n  )\nendif()\nif(PLUGIN_RMM AND NOT (USE_CUDA))\n  message(SEND_ERROR \"`PLUGIN_RMM` must be enabled with `USE_CUDA` flag.\")\nendif()\nif(PLUGIN_RMM AND NOT ((CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\") OR (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")))\n  message(SEND_ERROR \"`PLUGIN_RMM` must be used with GCC or Clang compiler.\")\nendif()\nif(PLUGIN_RMM AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Linux\"))\n  message(SEND_ERROR \"`PLUGIN_RMM` must be used with Linux.\")\nendif()\nif(ENABLE_ALL_WARNINGS)\n  if((NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\") AND (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\"))\n    message(SEND_ERROR \"ENABLE_ALL_WARNINGS is only available for Clang and GCC.\")\n  endif()\nendif()\nif(BUILD_STATIC_LIB AND (R_LIB OR JVM_BINDINGS))\n  message(SEND_ERROR \"Cannot build a static library libxgboost.a when R or JVM packages are enabled.\")\nendif()\nif(PLUGIN_FEDERATED)\n  if(CMAKE_CROSSCOMPILING)\n    message(SEND_ERROR \"Cannot cross compile with federated learning support\")\n  endif()\n  if(BUILD_STATIC_LIB)\n    message(SEND_ERROR \"Cannot build static lib with federated learning support\")\n  endif()\n  if(R_LIB OR JVM_BINDINGS)\n    message(SEND_ERROR \"Cannot enable federated learning support when R or JVM packages are enabled.\")\n  endif()\n  if(WIN32)\n    message(SEND_ERROR \"Federated learning not supported for Windows platform\")\n  endif()\nendif()\n\n#-- Removed options\nif(USE_AVX)\n  message(SEND_ERROR  \"The option `USE_AVX` is deprecated as experimental AVX features have been removed from XGBoost.\")\nendif()\nif(PLUGIN_LZ4)\n  message(SEND_ERROR  \"The option `PLUGIN_LZ4` is removed from XGBoost.\")\nendif()\nif(RABIT_BUILD_MPI)\n  message(SEND_ERROR \"The option `RABIT_BUILD_MPI` has been removed from XGBoost.\")\nendif()\nif(USE_S3)\n  message(SEND_ERROR \"The option `USE_S3` has been removed from XGBoost\")\nendif()\nif(USE_AZURE)\n  message(SEND_ERROR \"The option `USE_AZURE` has been removed from XGBoost\")\nendif()\nif(USE_HDFS)\n  message(SEND_ERROR \"The option `USE_HDFS` has been removed from XGBoost\")\nendif()\nif(PLUGIN_DENSE_PARSER)\n  message(SEND_ERROR \"The option `PLUGIN_DENSE_PARSER` has been removed from XGBoost.\")\nendif()\n\n#-- Sanitizer\nif(USE_SANITIZER)\n  include(cmake/Sanitizer.cmake)\n  enable_sanitizers(\"${ENABLED_SANITIZERS}\")\nendif()\n\nif(USE_CUDA)\n  set(USE_OPENMP ON CACHE BOOL \"CUDA requires OpenMP\" FORCE)\n  # `export CXX=' is ignored by CMake CUDA.\n  if(NOT DEFINED CMAKE_CUDA_HOST_COMPILER AND NOT DEFINED ENV{CUDAHOSTCXX})\n    set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER} CACHE FILEPATH\n      \"The compiler executable to use when compiling host code for CUDA or HIP language files.\")\n    mark_as_advanced(CMAKE_CUDA_HOST_COMPILER)\n    message(STATUS \"Configured CUDA host compiler: ${CMAKE_CUDA_HOST_COMPILER}\")\n  endif()\n\n  if(NOT DEFINED CMAKE_CUDA_RUNTIME_LIBRARY)\n    set(CMAKE_CUDA_RUNTIME_LIBRARY Static)\n  endif()\n\n  enable_language(CUDA)\n  if(${CMAKE_CUDA_COMPILER_VERSION} VERSION_LESS 11.0)\n    message(FATAL_ERROR \"CUDA version must be at least 11.0!\")\n  endif()\n  if(DEFINED GPU_COMPUTE_VER)\n    compute_cmake_cuda_archs(\"${GPU_COMPUTE_VER}\")\n  endif()\n\n  find_package(CUDAToolkit REQUIRED)\n  find_package(CCCL CONFIG)\n  if(CCCL_FOUND)\n    message(STATUS \"Standalone CCCL found.\")\n  else()\n    message(STATUS \"Standalone CCCL not found. Attempting to use CCCL from CUDA Toolkit...\")\n    find_package(CCCL CONFIG\n      HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)\n    if(NOT CCCL_FOUND)\n      message(STATUS \"Could not locate CCCL from CUDA Toolkit. Using Thrust and CUB from CUDA Toolkit...\")\n      find_package(libcudacxx CONFIG REQUIRED\n        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)\n      find_package(CUB CONFIG REQUIRED\n        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)\n      find_package(Thrust CONFIG REQUIRED\n        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)\n      thrust_create_target(Thrust HOST CPP DEVICE CUDA)\n      add_library(CCCL::CCCL INTERFACE IMPORTED GLOBAL)\n      target_link_libraries(CCCL::CCCL INTERFACE libcudacxx::libcudacxx CUB::CUB Thrust)\n    endif()\n  endif()\n  # Define guard macros to prevent windows.h from conflicting with winsock2.h\n  if(WIN32)\n    target_compile_definitions(CCCL::CCCL INTERFACE NOMINMAX WIN32_LEAN_AND_MEAN _WINSOCKAPI_)\n  endif()\nendif()\n\nif(FORCE_COLORED_OUTPUT AND (CMAKE_GENERATOR STREQUAL \"Ninja\") AND\n    ((CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\") OR\n      (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")))\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color=always\")\nendif()\n\nfind_package(Threads REQUIRED)\n\n# -- OpenMP\ninclude(cmake/FindOpenMPMacOS.cmake)\nif(USE_OPENMP)\n  if(APPLE)\n    find_openmp_macos()\n  else()\n    find_package(OpenMP REQUIRED)\n  endif()\nendif()\n\n# Add for IBM i\nif(${CMAKE_SYSTEM_NAME} MATCHES \"OS400\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n  set(CMAKE_CXX_ARCHIVE_CREATE \"<CMAKE_AR> -X64 qc <TARGET> <OBJECTS>\")\nendif()\n\nif(USE_NCCL)\n  find_package(Nccl REQUIRED)\nendif()\n\nif(MSVC)\n  if(FORCE_SHARED_CRT)\n    message(STATUS \"XGBoost: Using dynamically linked MSVC runtime...\")\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL\")\n  else()\n    message(STATUS \"XGBoost: Using statically linked MSVC runtime...\")\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  endif()\nendif()\n\n# dmlc-core\nset(DMLC_FORCE_SHARED_CRT ${FORCE_SHARED_CRT})\nadd_subdirectory(${xgboost_SOURCE_DIR}/dmlc-core)\n\nif(MSVC)\n  if(TARGET dmlc_unit_tests)\n    target_compile_options(\n        dmlc_unit_tests PRIVATE\n        -D_CRT_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE\n    )\n  endif()\nendif()\n\n# core xgboost\nadd_subdirectory(${xgboost_SOURCE_DIR}/src)\ntarget_link_libraries(objxgboost PUBLIC dmlc)\n\n# Link -lstdc++fs for GCC 8.x\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"9.0\")\n  target_link_libraries(objxgboost PUBLIC stdc++fs)\nendif()\n\n# Exports some R specific definitions and objects\nif(R_LIB)\n  add_subdirectory(${xgboost_SOURCE_DIR}/R-package)\nendif()\n\n# This creates its own shared library `xgboost4j'.\nif(JVM_BINDINGS)\n  add_subdirectory(${xgboost_SOURCE_DIR}/jvm-packages)\nendif()\n\n# Plugin\nadd_subdirectory(${xgboost_SOURCE_DIR}/plugin)\n\nif(PLUGIN_RMM)\n  find_package(rmm REQUIRED)\n\n  # Patch the rmm targets so they reference the static cudart\n  # Remove this patch once RMM stops specifying cudart requirement\n  # (since RMM is a header-only library, it should not specify cudart in its CMake config)\n  get_target_property(rmm_link_libs rmm::rmm INTERFACE_LINK_LIBRARIES)\n  list(REMOVE_ITEM rmm_link_libs CUDA::cudart)\n  list(APPEND rmm_link_libs CUDA::cudart_static)\n  set_target_properties(rmm::rmm PROPERTIES INTERFACE_LINK_LIBRARIES \"${rmm_link_libs}\")\n  get_target_property(rmm_link_libs rmm::rmm INTERFACE_LINK_LIBRARIES)\nendif()\n\nif(PLUGIN_SYCL)\n  set(CMAKE_CXX_LINK_EXECUTABLE\n      \"icpx <FLAGS> <CMAKE_CXX_LINK_FLAGS> -qopenmp <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>\")\n  set(CMAKE_CXX_CREATE_SHARED_LIBRARY\n      \"icpx <CMAKE_SHARED_LIBRARY_CXX_FLAGS> -qopenmp <LANGUAGE_COMPILE_FLAGS> \\\n      <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG>,<TARGET_SONAME> \\\n      -o <TARGET> <OBJECTS> <LINK_LIBRARIES>\")\nendif()\n\n#-- library\nif(BUILD_STATIC_LIB)\n  add_library(xgboost STATIC)\nelse()\n  add_library(xgboost SHARED)\nendif()\ntarget_link_libraries(xgboost PRIVATE objxgboost)\ntarget_include_directories(xgboost\n  INTERFACE\n  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>)\n#-- End shared library\n\n#-- CLI for xgboost\nif(BUILD_DEPRECATED_CLI)\n  add_executable(runxgboost ${xgboost_SOURCE_DIR}/src/cli_main.cc)\n  target_link_libraries(runxgboost PRIVATE objxgboost)\n  target_include_directories(runxgboost\n    PRIVATE\n    ${xgboost_SOURCE_DIR}/include\n    ${xgboost_SOURCE_DIR}/dmlc-core/include\n  )\n  set_target_properties(runxgboost PROPERTIES OUTPUT_NAME xgboost)\n  xgboost_target_properties(runxgboost)\n  xgboost_target_link_libraries(runxgboost)\n  xgboost_target_defs(runxgboost)\n\n  if(KEEP_BUILD_ARTIFACTS_IN_BINARY_DIR)\n    set_output_directory(runxgboost ${xgboost_BINARY_DIR})\n  else()\n    set_output_directory(runxgboost ${xgboost_SOURCE_DIR})\n  endif()\nendif()\n#-- End CLI for xgboost\n\n# Common setup for all targets\nforeach(target xgboost objxgboost dmlc)\n  xgboost_target_properties(${target})\n  xgboost_target_link_libraries(${target})\n  xgboost_target_defs(${target})\nendforeach()\n\nif(JVM_BINDINGS)\n  xgboost_target_properties(xgboost4j)\n  xgboost_target_link_libraries(xgboost4j)\n  xgboost_target_defs(xgboost4j)\nendif()\n\nif(USE_OPENMP AND APPLE)\n  patch_openmp_path_macos(xgboost libxgboost)\nendif()\n\nif(KEEP_BUILD_ARTIFACTS_IN_BINARY_DIR)\n  set_output_directory(xgboost ${xgboost_BINARY_DIR}/lib)\nelse()\n  set_output_directory(xgboost ${xgboost_SOURCE_DIR}/lib)\nendif()\n\n# Ensure these two targets do not build simultaneously, as they produce outputs with conflicting names\nif(BUILD_DEPRECATED_CLI)\n  add_dependencies(xgboost runxgboost)\nendif()\n\n#-- Installing XGBoost\nif(R_LIB)\n  include(cmake/RPackageInstallTargetSetup.cmake)\n  set_target_properties(xgboost PROPERTIES PREFIX \"\")\n  if(APPLE)\n    set_target_properties(xgboost PROPERTIES SUFFIX \".so\")\n  endif()\n  setup_rpackage_install_target(xgboost \"${CMAKE_CURRENT_BINARY_DIR}/R-package-install\")\n  set(CMAKE_INSTALL_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/dummy_inst\")\nendif()\nif(MINGW)\n  set_target_properties(xgboost PROPERTIES PREFIX \"\")\nendif()\n\nif(BUILD_C_DOC)\n  include(cmake/Doc.cmake)\n  run_doxygen()\nendif()\n\ninclude(CPack)\n\ninclude(GNUInstallDirs)\n# Install all headers.  Please note that currently the C++ headers does not form an \"API\".\ninstall(DIRECTORY ${xgboost_SOURCE_DIR}/include/xgboost\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n# Install libraries. If `xgboost` is a static lib, specify `objxgboost` also, to avoid the\n# following error:\n#\n#  > install(EXPORT ...) includes target \"xgboost\" which requires target \"objxgboost\" that is not\n#  > in any export set.\n#\n# https://github.com/dmlc/xgboost/issues/6085\nif(BUILD_STATIC_LIB)\n  if(BUILD_DEPRECATED_CLI)\n    set(INSTALL_TARGETS xgboost runxgboost objxgboost dmlc)\n  else()\n    set(INSTALL_TARGETS xgboost objxgboost dmlc)\n  endif()\nelse()\n  if(BUILD_DEPRECATED_CLI)\n    set(INSTALL_TARGETS xgboost runxgboost)\n  else()\n    set(INSTALL_TARGETS xgboost)\n  endif()\nendif()\n\ninstall(TARGETS ${INSTALL_TARGETS}\n  EXPORT XGBoostTargets\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  INCLUDES DESTINATION ${LIBLEGACY_INCLUDE_DIRS})\ninstall(EXPORT XGBoostTargets\n  FILE XGBoostTargets.cmake\n  NAMESPACE xgboost::\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/xgboost)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n  ${CMAKE_CURRENT_LIST_DIR}/cmake/xgboost-config.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/xgboost-config.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/xgboost)\nwrite_basic_package_version_file(\n  ${CMAKE_BINARY_DIR}/cmake/xgboost-config-version.cmake\n  VERSION ${XGBOOST_VERSION}\n  COMPATIBILITY AnyNewerVersion)\ninstall(\n  FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/xgboost-config.cmake\n  ${CMAKE_BINARY_DIR}/cmake/xgboost-config-version.cmake\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/xgboost)\n\n#-- Test\nif(GOOGLE_TEST)\n  enable_testing()\n  # Unittests.\n  add_executable(testxgboost)\n  target_link_libraries(testxgboost PRIVATE objxgboost)\n  xgboost_target_properties(testxgboost)\n  xgboost_target_link_libraries(testxgboost)\n  xgboost_target_defs(testxgboost)\n\n  add_subdirectory(${xgboost_SOURCE_DIR}/tests/cpp)\n\n  add_test(\n    NAME TestXGBoostLib\n    COMMAND testxgboost\n    WORKING_DIRECTORY ${xgboost_BINARY_DIR})\n  # CLI tests\n  configure_file(\n    ${xgboost_SOURCE_DIR}/tests/cli/machine.conf.in\n    ${xgboost_BINARY_DIR}/tests/cli/machine.conf\n    @ONLY\n    NEWLINE_STYLE UNIX)\n  if(BUILD_DEPRECATED_CLI)\n    add_test(\n      NAME TestXGBoostCLI\n      COMMAND runxgboost ${xgboost_BINARY_DIR}/tests/cli/machine.conf\n      WORKING_DIRECTORY ${xgboost_BINARY_DIR})\n    set_tests_properties(TestXGBoostCLI\n      PROPERTIES\n      PASS_REGULAR_EXPRESSION \".*test-rmse:0.087.*\")\n  endif()\nendif()\n\n# Add xgboost.pc\nif(ADD_PKGCONFIG)\n  configure_file(${xgboost_SOURCE_DIR}/cmake/xgboost.pc.in ${xgboost_BINARY_DIR}/xgboost.pc @ONLY)\n\n  install(\n    FILES ${xgboost_BINARY_DIR}/xgboost.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 6.22265625,
          "content": "Contributors of DMLC/XGBoost\n============================\nXGBoost has been developed and used by a group of active community. Everyone is more than welcomed to is a great way to make the project better and more accessible to more users.\n\nProject Management Committee(PMC) \n----------\nThe Project Management Committee(PMC) consists group of active committers that moderate the discussion, manage the project release, and proposes new committer/PMC members. \n\n* [Tianqi Chen](https://github.com/tqchen), University of Washington\n  - Tianqi is a Ph.D. student working on large-scale machine learning. He is the creator of the project.\n* [Michael Benesty](https://github.com/pommedeterresautee)\n  - Michael is a lawyer and data scientist in France. He is the creator of XGBoost interactive analysis module in R.\n* [Yuan Tang](https://github.com/terrytangyuan), Red Hat\n  - Yuan is a principal software engineer at Red Hat. He contributed mostly in R and Python packages.\n* [Nan Zhu](https://github.com/CodingCat), Uber\n  - Nan is a software engineer in Uber. He contributed mostly in JVM packages.\n* [Jiaming Yuan](https://github.com/trivialfis)\n  - Jiaming contributed to the GPU algorithms. He has also introduced new abstractions to improve the quality of the C++ codebase.\n* [Hyunsu Cho](http://hyunsu-cho.io/), NVIDIA\n  - Hyunsu is the maintainer of the XGBoost Python package. He also manages the Jenkins continuous integration system (https://xgboost-ci.net/). He is the initial author of the CPU 'hist' updater.\n* [Rory Mitchell](https://github.com/RAMitchell), University of Waikato\n  - Rory is a Ph.D. student at University of Waikato. He is the original creator of the GPU training algorithms. He improved the CMake build system and continuous integration. \n* [Hongliang Liu](https://github.com/phunterlau)\n\n\nCommitters\n----------\nCommitters are people who have made substantial contribution to the project and granted write access to the project.\n\n* [Tong He](https://github.com/hetong007), Amazon AI\n  - Tong is an applied scientist in Amazon AI. He is the maintainer of XGBoost R package.\n* [Vadim Khotilovich](https://github.com/khotilov)\n  - Vadim contributes many improvements in R and core packages.\n* [Bing Xu](https://github.com/antinucleon)\n  - Bing is the original creator of XGBoost Python package and currently the maintainer of [XGBoost.jl](https://github.com/antinucleon/XGBoost.jl).\n* [Sergei Lebedev](https://github.com/superbobry), Criteo\n  - Sergei is a software engineer in Criteo. He contributed mostly in JVM packages.\n* [Scott Lundberg](http://scottlundberg.com/), University of Washington\n  - Scott is a Ph.D. student at University of Washington. He is the creator of SHAP, a unified approach to explain the output of machine learning models such as decision tree ensembles. He also helps maintain the XGBoost Julia package.\n* [Egor Smirnov](https://github.com/SmirnovEgorRu), Intel\n  - Egor has led a major effort to improve the performance of XGBoost on multi-core CPUs.\n\n\nBecome a Committer\n------------------\nXGBoost is a open source project and we are actively looking for new committers who are willing to help maintaining and lead the project.\nCommitters comes from contributors who:\n* Made substantial contribution to the project.\n* Willing to spent time on maintaining and lead the project.\n\nNew committers will be proposed by current committer members, with support from more than two of current committers.\n\nList of Contributors\n--------------------\n* [Full List of Contributors](https://github.com/dmlc/xgboost/graphs/contributors)\n  - To contributors: please add your name to the list when you submit a patch to the project:)\n* [Kailong Chen](https://github.com/kalenhaha)\n  - Kailong is an early contributor of XGBoost, he is creator of ranking objectives in XGBoost.\n* [Skipper Seabold](https://github.com/jseabold)\n  - Skipper is the major contributor to the scikit-learn module of XGBoost.\n* [Zygmunt Zając](https://github.com/zygmuntz)\n  - Zygmunt is the master behind the early stopping feature frequently used by Kagglers.\n* [Ajinkya Kale](https://github.com/ajkl)\n* [Boliang Chen](https://github.com/cblsjtu)\n* [Yangqing Men](https://github.com/yanqingmen)\n  - Yangqing is the creator of XGBoost java package.\n* [Engpeng Yao](https://github.com/yepyao)\n* [Giulio](https://github.com/giuliohome)\n  - Giulio is the creator of Windows project of XGBoost\n* [Jamie Hall](https://github.com/nerdcha)\n  - Jamie is the initial creator of XGBoost scikit-learn module.\n* [Yen-Ying Lee](https://github.com/white1033)\n* [Masaaki Horikoshi](https://github.com/sinhrks)\n  - Masaaki is the initial creator of XGBoost Python plotting module.\n* [daiyl0320](https://github.com/daiyl0320)\n  - daiyl0320 contributed patch to XGBoost distributed version more robust, and scales stably on TB scale datasets.\n* [Huayi Zhang](https://github.com/irachex)\n* [Johan Manders](https://github.com/johanmanders)\n* [yoori](https://github.com/yoori)\n* [Mathias Müller](https://github.com/far0n)\n* [Sam Thomson](https://github.com/sammthomson)\n* [ganesh-krishnan](https://github.com/ganesh-krishnan)\n* [Damien Carol](https://github.com/damiencarol)\n* [Alex Bain](https://github.com/convexquad)\n* [Baltazar Bieniek](https://github.com/bbieniek)\n* [Adam Pocock](https://github.com/Craigacp)\n* [Gideon Whitehead](https://github.com/gaw89)\n* [Yi-Lin Juang](https://github.com/frankyjuang)\n* [Andrew Hannigan](https://github.com/andrewhannigan)\n* [Andy Adinets](https://github.com/canonizer)\n* [Henry Gouk](https://github.com/henrygouk)\n* [Pierre de Sahb](https://github.com/pdesahb)\n* [liuliang01](https://github.com/liuliang01)\n  - liuliang01 added support for the qid column for LIBSVM input format. This makes ranking task easier in distributed setting.\n* [Andrew Thia](https://github.com/BlueTea88)\n  - Andrew Thia implemented feature interaction constraints\n* [Wei Tian](https://github.com/weitian)\n* [Chen Qin](https://github.com/chenqin)\n* [Sam Wilkinson](https://samwilkinson.io)\n* [Matthew Jones](https://github.com/mt-jones)\n* [Jiaxiang Li](https://github.com/JiaxiangBU)\n* [Bryan Woods](https://github.com/bryan-woods)\n  - Bryan added support for cross-validation for the ranking objective\n* [Haoda Fu](https://github.com/fuhaoda)\n* [Evan Kepner](https://github.com/EvanKepner)\n  - Evan Kepner added support for os.PathLike file paths in Python\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0830078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2019 by Contributors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 205.3427734375,
          "content": "XGBoost Change Log\n==================\n\n**Starting from 2.1.0, release note is recorded in the documentation.**\n\nThis file records the changes in xgboost library in reverse chronological order.\n\n## 2.0.0 (2023 Aug 16)\n\nWe are excited to announce the release of XGBoost 2.0. This note will begin by covering some overall changes and then highlight specific updates to the package.\n\n### Initial work on multi-target trees with vector-leaf outputs\nWe have been working on vector-leaf tree models for multi-target regression, multi-label classification, and multi-class classification in version 2.0. Previously, XGBoost would build a separate model for each target. However, with this new feature that's still being developed, XGBoost can build one tree for all targets. The feature has multiple benefits and trade-offs compared to the existing approach. It can help prevent overfitting, produce smaller models, and build trees that consider the correlation between targets. In addition, users can combine vector leaf and scalar leaf trees during a training session using a callback. Please note that the feature is still a working in progress, and many parts are not yet available. See #9043 for the current status. Related PRs: (#8538, #8697, #8902, #8884, #8895, #8898, #8612, #8652, #8698, #8908, #8928, #8968, #8616, #8922, #8890, #8872, #8889, #9509) Please note that, only the `hist` (default) tree method on CPU can be used for building vector leaf trees at the moment.\n\n### New `device` parameter.\n\nA new `device` parameter is set to replace the existing `gpu_id`, `gpu_hist`, `gpu_predictor`, `cpu_predictor`, `gpu_coord_descent`, and the PySpark specific parameter `use_gpu`. Onward, users need only the `device` parameter to select which device to run along with the ordinal of the device. For more information, please see our document page (https://xgboost.readthedocs.io/en/stable/parameter.html#general-parameters) . For example, with  `device=\"cuda\", tree_method=\"hist\"`, XGBoost will run the `hist` tree method on GPU. (#9363, #8528, #8604, #9354, #9274, #9243, #8896, #9129, #9362, #9402, #9385, #9398, #9390, #9386, #9412, #9507, #9536). The old behavior of ``gpu_hist``  is preserved but deprecated. In addition, the `predictor` parameter is removed.\n\n\n### `hist` is now the default tree method\nStarting from 2.0, the `hist` tree method will be the default. In previous versions, XGBoost chooses `approx` or `exact` depending on the input data and training environment. The new default can help XGBoost train models more efficiently and consistently. (#9320, #9353)\n\n### GPU-based approx tree method\nThere's initial support for using the `approx` tree method on GPU. The performance of the `approx` is not yet well optimized but is feature complete except for the JVM packages. It can be accessed through the use of the parameter combination `device=\"cuda\", tree_method=\"approx\"`. (#9414, #9399, #9478). Please note that the Scala-based Spark interface is not yet supported.\n\n### Optimize and bound the size of the histogram on CPU, to control memory footprint\n\nXGBoost has a new parameter `max_cached_hist_node` for users to limit the CPU cache size for histograms. It can help prevent XGBoost from caching histograms too aggressively. Without the cache, performance is likely to decrease. However, the size of the cache grows exponentially with the depth of the tree. The limit can be crucial when growing deep trees. In most cases, users need not configure this parameter as it does not affect the model's accuracy. (#9455, #9441, #9440, #9427, #9400).\n\nAlong with the cache limit, XGBoost also reduces the memory usage of the `hist` and `approx` tree method on distributed systems by cutting the size of the cache by half. (#9433)\n\n### Improved external memory support\nThere is some exciting development around external memory support in XGBoost. It's still an experimental feature, but the performance has been significantly improved with the default `hist` tree method. We replaced the old file IO logic with memory map. In addition to performance, we have reduced CPU memory usage and added extensive documentation. Beginning from 2.0.0, we encourage users to try it with the `hist` tree method when the memory saving by `QuantileDMatrix` is not sufficient. (#9361, #9317, #9282, #9315, #8457)\n\n### Learning to rank\nWe created a brand-new implementation for the learning-to-rank task. With the latest version, XGBoost gained a set of new features for ranking task including:\n\n- A new parameter `lambdarank_pair_method` for choosing the pair construction strategy.\n- A new parameter `lambdarank_num_pair_per_sample` for controlling the number of samples for each group.\n- An experimental implementation of unbiased learning-to-rank, which can be accessed using the `lambdarank_unbiased` parameter.\n- Support for custom gain function with `NDCG` using the `ndcg_exp_gain` parameter.\n- Deterministic GPU computation for all objectives and metrics.\n- `NDCG` is now the default objective function.\n- Improved performance of metrics using caches.\n- Support scikit-learn utilities for `XGBRanker`.\n- Extensive documentation on how learning-to-rank works with XGBoost.\n\nFor more information, please see the [tutorial](https://xgboost.readthedocs.io/en/latest/tutorials/learning_to_rank.html). Related PRs: (#8771, #8692, #8783, #8789, #8790, #8859, #8887, #8893, #8906, #8931, #9075, #9015, #9381, #9336, #8822, #9222, #8984, #8785, #8786, #8768)\n\n### Automatically estimated intercept\n\nIn the previous version, `base_score` was a constant that could be set as a training parameter. In the new version, XGBoost can automatically estimate this parameter based on input labels for optimal accuracy. (#8539, #8498, #8272, #8793, #8607)\n\n### Quantile regression\nThe XGBoost algorithm now supports quantile regression, which involves minimizing the quantile loss (also called \"pinball loss\"). Furthermore, XGBoost allows for training with multiple target quantiles simultaneously with one tree per quantile. (#8775, #8761, #8760, #8758, #8750)\n\n### L1 and Quantile regression now supports learning rate\nBoth objectives use adaptive trees due to the lack of proper Hessian values. In the new version, XGBoost can scale the leaf value with the learning rate accordingly. (#8866)\n\n### Export cut value\n\nUsing the Python or the C package, users can export the quantile values (not to be confused with quantile regression) used for the `hist` tree method. (#9356)\n\n### column-based split and federated learning\nWe made progress on column-based split for federated learning. In 2.0, both `approx`, `hist`, and `hist` with vector leaf can work with column-based data split, along with support for vertical federated learning. Work on GPU support is still on-going, stay tuned. (#8576, #8468, #8442, #8847, #8811, #8985, #8623, #8568, #8828, #8932, #9081, #9102, #9103, #9124, #9120, #9367, #9370, #9343, #9171, #9346, #9270, #9244, #8494, #8434, #8742, #8804, #8710, #8676, #9020, #9002, #9058, #9037, #9018, #9295, #9006, #9300, #8765, #9365, #9060)\n\n### PySpark\nAfter the initial introduction of the PySpark interface, it has gained some new features and optimizations in 2.0.\n\n- GPU-based prediction. (#9292, #9542)\n- Optimization for data initialization by avoiding the stack operation. (#9088)\n- Support predict feature contribution. (#8633)\n- Python typing support. (#9156, #9172, #9079, #8375)\n- `use_gpu` is deprecated. The `device` parameter is preferred.\n- Update eval_metric validation to support list of strings (#8826)\n- Improved logs for training (#9449)\n- Maintenance, including refactoring and document updates (#8324, #8465, #8605, #9202, #9460, #9302, #8385, #8630, #8525, #8496)\n- Fix for GPU setup. (#9495)\n\n### Other General New Features\nHere's a list of new features that don't have their own section and yet are general to all language bindings.\n\n- Use array interface for CSC matrix. This helps XGBoost to use a consistent number of threads and align the interface of the CSC matrix with other interfaces. In addition, memory usage is likely to decrease with CSC input thanks to on-the-fly type conversion. (#8672)\n- CUDA compute 90 is now part of the default build.. (#9397)\n\n### Other General Optimization\nThese optimizations are general to all language bindings. For language-specific optimization, please visit the corresponding sections.\n\n- Performance for input with `array_interface` on CPU (like `numpy`) is significantly improved. (#9090)\n- Some optimization with CUDA for data initialization. (#9199, #9209, #9144)\n- Use the latest thrust policy to prevent synchronizing GPU devices. (#9212)\n- XGBoost now uses a per-thread CUDA stream, which prevents synchronization with other streams. (#9416, #9396, #9413)\n\n### Notable breaking change\n\nOther than the aforementioned change with the `device` parameter, here's a list of breaking changes affecting all packages.\n\n- Users must specify the format for text input (#9077). However, we suggest using third-party data structures such as `numpy.ndarray` instead of relying on text inputs. See https://github.com/dmlc/xgboost/issues/9472 for more info.\n\n### Notable bug fixes\n\nSome noteworthy bug fixes that are not related to specific language bindings are listed in this section.\n\n- Some language environments use a different thread to perform garbage collection, which breaks the thread-local cache used in XGBoost. XGBoost 2.0 implements a new thread-safe cache using a light weight lock to replace the thread-local cache. (#8851)\n- Fix model IO by clearing the prediction cache. (#8904)\n- `inf` is checked during data construction. (#8911)\n- Preserve order of saved updaters configuration. Usually, this is not an issue unless the `updater` parameter is used instead of the `tree_method` parameter (#9355)\n- Fix GPU memory allocation issue with categorical splits. (#9529)\n- Handle escape sequence like `\\t\\n` in feature names for JSON model dump. (#9474)\n- Normalize file path for model IO and text input. This handles short paths on Windows and paths that contain `~` on Unix (#9463). In addition, all path inputs are required to be encoded in UTF-8 (#9448, #9443)\n- Fix integer overflow on H100. (#9380)\n- Fix weighted sketching on GPU with categorical features. (#9341)\n- Fix metric serialization. The bug might cause some of the metrics to be dropped during evaluation. (#9405)\n- Fixes compilation errors on MSVC x86 targets (#8823)\n- Pick up the dmlc-core fix for the CSV parser. (#8897)\n\n\n### Documentation\nAside from documents for new features, we have many smaller updates to improve user experience, from troubleshooting guides to typo fixes.\n\n- Explain CPU/GPU interop. (#8450)\n- Guide to troubleshoot NCCL errors. (#8943, #9206)\n- Add a note for rabit port selection. (#8879)\n- How to build the docs using conda (#9276)\n- Explain how to obtain reproducible results on distributed systems. (#8903)\n\n* Fixes and small updates to document and demonstration scripts. (#8626, #8436, #8995, #8907, #8923, #8926, #9358, #9232, #9201, #9469, #9462, #9458, #8543, #8597, #8401, #8784, #9213, #9098, #9008, #9223, #9333, #9434, #9435, #9415, #8773, #8752, #9291, #9549)\n\n### Python package\n* New Features and Improvements\n- Support primitive types of pyarrow-backed pandas dataframe. (#8653)\n- Warning messages emitted by XGBoost are now emitted using Python warnings. (#9387)\n- User can now format the value printed near the bars on the `plot_importance` plot (#8540)\n- XGBoost has improved half-type support (float16) with pandas, cupy, and cuDF. With GPU input, the handling is through CUDA `__half` type, and no data copy is made. (#8487, #9207, #8481)\n- Support `Series` and Python primitive types in `inplace_predict` and `QuantileDMatrix` (#8547, #8542)\n- Support all pandas' nullable integer types. (#8480)\n- Custom metric with the scikit-learn interface now supports `sample_weight`. (#8706)\n- Enable Installation of Python Package with System lib in a Virtual Environment (#9349)\n- Raise if expected workers are not alive in `xgboost.dask.train` (#9421)\n\n* Optimization\n- Cache transformed data in `QuantileDMatrix` for efficiency. (#8666, #9445)\n- Take datatable as row-major input. (#8472)\n- Remove unnecessary conversions between data structures (#8546)\n\n* Adopt modern Python packaging conventions (PEP 517, PEP 518, PEP 621)\n-  XGBoost adopted the modern Python packaging conventions. The old setup script `setup.py` is now replaced with the new configuration file `pyproject.toml`. Along with this, XGBoost now supports Python 3.11. (#9021, #9112, #9114, #9115) Consult the latest documentation for the updated instructions to build and install XGBoost.\n\n* Fixes\n- `DataIter` now accepts only keyword arguments. (#9431)\n- Fix empty DMatrix with categorical features. (#8739)\n- Convert ``DaskXGBClassifier.classes_`` to an array (#8452)\n- Define `best_iteration` only if early stopping is used to be consistent with documented behavior. (#9403)\n- Make feature validation immutable. (#9388)\n\n* Breaking changes\n- Discussed in the new `device` parameter section,  the `predictor` parameter is now removed. (#9129)\n- Remove support for single-string feature info. Feature type and names should be a sequence of strings (#9401)\n- Remove parameters in the `save_model` call for the scikit-learn interface. (#8963)\n- Remove the `ntree_limit` in the python package. This has been deprecated in previous versions. (#8345)\n\n* Maintenance including formatting and refactoring along with type hints.\n- More consistent use of `black` and `isort` for code formatting (#8420, #8748, #8867)\n- Improved type support. Most of the type changes happen in the PySpark module; here, we list the remaining changes. (#8444, #8617, #9197, #9005)\n- Set `enable_categorical` to True in predict. (#8592)\n- Some refactoring and updates for tests (#8395, #8372, #8557, #8379, #8702, #9459, #9316, #8446, #8695, #8409, #8993, #9480)\n\n* Documentation\n- Add introduction and notes for the sklearn interface. (#8948)\n- Demo for using dask for hyper-parameter optimization. (#8891)\n- Document all supported Python input types. (#8643)\n- Other documentation updates (#8944, #9304)\n\n### R package\n- Use the new data consumption interface for CSR and CSC. This provides better control for the number of threads and improves performance. (#8455, #8673)\n- Accept multiple evaluation metrics during training. (#8657)\n- Fix integer inputs with `NA`. (#9522)\n- Some refactoring for the R package (#8545, #8430, #8614, #8624, #8613, #9457, #8689, #8563, #9461, #8647, #8564, #8565, #8736, #8610, #8609, #8599, #8704, #9456, #9450, #9476, #9477, #9481). Special thanks to @jameslamb.\n- Document updates (#8886, #9323, #9437, #8998)\n\n### JVM packages\nFollowing are changes specific to various JVM-based packages.\n\n- Stop using Rabit in prediction (#9054)\n- Set feature_names and feature_types in jvm-packages. This is to prepare support for categorical features (#9364)\n- Scala 2.13 support. (#9099)\n- Change training stage from `ResultStage` to `ShuffleMapStage` (#9423)\n- Automatically set the max/min direction for the best score during early stopping. (#9404)\n* Revised support for `flink` (#9046)\n\n* Breaking changes\n- Scala-based tracker is removed. (#9078, #9045)\n- Change `DeviceQuantileDmatrix` into `QuantileDMatrix` (#8461)\n\n* Maintenance (#9253, #9166, #9395, #9389, #9224, #9233, #9351, #9479)\n\n* CI bot PRs\nWe employed GitHub dependent bot to help us keep the dependencies up-to-date for JVM packages. With the help from the bot, we have cleared up all the dependencies that are lagging behind (#8501, #8507).\n\nHere's a list of dependency update PRs including those made by dependent bots (#8456, #8560, #8571, #8561, #8562, #8600, #8594, #8524, #8509, #8548, #8549, #8533, #8521, #8534, #8532, #8516, #8503, #8531, #8530, #8518, #8512, #8515, #8517, #8506, #8504, #8502, #8629, #8815, #8813, #8814, #8877, #8876, #8875, #8874, #8873, #9049, #9070, #9073, #9039, #9083, #8917, #8952, #8980, #8973, #8962, #9252, #9208, #9131, #9136, #9219, #9160, #9158, #9163, #9184, #9192, #9265, #9268, #8882, #8837, #8662, #8661, #8390, #9056, #8508, #8925, #8920, #9149, #9230, #9097, #8648, #9203, #8593).\n\n### Maintenance\nMaintenance work includes refactoring, fixing small issues that don't affect end users. (#9256, #8627, #8756, #8735, #8966, #8864, #8747, #8892, #9057, #8921, #8949, #8941, #8942, #9108, #9125, #9155, #9153, #9176, #9447, #9444, #9436, #9438, #9430, #9200, #9210, #9055, #9014, #9004, #8999, #9154, #9148, #9283, #9246, #8888, #8900, #8871, #8861, #8858, #8791, #8807, #8751, #8703, #8696, #8693, #8677, #8686, #8665, #8660, #8386, #8371, #8410, #8578, #8574, #8483, #8443, #8454, #8733)\n\n### CI\n- Build pip wheel with RMM support (#9383)\n- Other CI updates including updating dependencies and work on the CI infrastructure. (#9464, #9428, #8767, #9394, #9278, #9214, #9234, #9205, #9034, #9104, #8878, #9294, #8625, #8806, #8741, #8707, #8381, #8382, #8388, #8402, #8397, #8445, #8602, #8628, #8583, #8460, #9544)\n\n## 1.7.6 (2023 Jun 16)\n\nThis is a patch release for bug fixes. The CRAN package for the R binding is kept at 1.7.5.\n\n### Bug Fixes\n* Fix distributed training with mixed dense and sparse partitions. (#9272)\n* Fix monotone constraints on CPU with large trees. (#9122)\n* [spark] Make the spark model have the same UID as its estimator (#9022)\n* Optimize prediction with `QuantileDMatrix`. (#9096)\n\n### Document\n* Improve doxygen (#8959)\n* Update the cuDF pip index URL. (#9106)\n\n### Maintenance\n* Fix tests with pandas 2.0. (#9014)\n\n## 1.7.5 (2023 Mar 30)\nThis is a patch release for bug fixes.\n\n* C++ requirement is updated to C++-17, along with which, CUDA 11.8 is used as the default CTK. (#8860, #8855, #8853)\n* Fix import for pyspark ranker. (#8692)\n* Fix Windows binary wheel to be compatible with Poetry (#8991)\n* Fix GPU hist with column sampling. (#8850)\n* Make sure iterative DMatrix is properly initialized. (#8997)\n* [R] Update link in document. (#8998)\n\n## 1.7.4 (2023 Feb 16)\nThis is a patch release for bug fixes.\n\n* [R] Fix OpenMP detection on macOS. (#8684)\n* [Python] Make sure input numpy array is aligned. (#8690)\n* Fix feature interaction with column sampling in gpu_hist evaluator. (#8754)\n* Fix GPU L1 error. (#8749)\n* [PySpark] Fix feature types param (#8772)\n* Fix ranking with quantile dmatrix and group weight. (#8762)\n\n## 1.7.3 (2023 Jan 6)\nThis is a patch release for bug fixes.\n\n* [Breaking] XGBoost Sklearn estimator method `get_params` no longer returns internally configured values. (#8634)\n* Fix linalg iterator, which may crash the L1 error. (#8603)\n* Fix loading pickled GPU model with a CPU-only XGBoost build. (#8632)\n* Fix inference with unseen categories with categorical features. (#8591, #8602)\n* CI fixes. (#8620, #8631, #8579)\n\n## v1.7.2 (2022 Dec 8)\nThis is a patch release for bug fixes.\n\n* Work with newer thrust and libcudacxx (#8432)\n* Support null value in CUDA array interface namespace. (#8486)\n* Use `getsockname` instead of `SO_DOMAIN` on AIX. (#8437)\n* [pyspark] Make QDM optional based on a cuDF check (#8471)\n* [pyspark] sort qid for SparkRanker. (#8497)\n* [dask] Properly await async method client.wait_for_workers. (#8558)\n\n* [R] Fix CRAN test notes. (#8428)\n\n* [doc] Fix outdated document [skip ci]. (#8527)\n* [CI] Fix github action mismatched glibcxx. (#8551)\n\n## v1.7.1 (2022 Nov 3)\nThis is a patch release to incorporate the following hotfix:\n\n* Add back xgboost.rabit for backwards compatibility (#8411)\n\n\n## v1.7.0 (2022 Oct 20)\n\nWe are excited to announce the feature packed XGBoost 1.7 release. The release note will walk through some of the major new features first, then make a summary for other improvements and language-binding-specific changes.\n\n### PySpark\n\nXGBoost 1.7 features initial support for PySpark integration. The new interface is adapted from the existing PySpark XGBoost interface developed by databricks with additional features like `QuantileDMatrix` and the rapidsai plugin (GPU pipeline) support. The new Spark XGBoost Python estimators not only benefit from PySpark ml facilities for powerful distributed computing but also enjoy the rest of the Python ecosystem. Users can define a custom objective, callbacks, and metrics in Python and use them with this interface on distributed clusters. The support is labeled as experimental with more features to come in future releases. For a brief introduction please visit the tutorial on XGBoost's [document page](https://xgboost.readthedocs.io/en/latest/tutorials/spark_estimator.html). (#8355, #8344, #8335, #8284, #8271, #8283, #8250, #8231, #8219, #8245, #8217, #8200, #8173, #8172, #8145, #8117, #8131, #8088, #8082, #8085, #8066, #8068, #8067, #8020, #8385)\n\nDue to its initial support status, the new interface has some limitations; categorical features and multi-output models are not yet supported.\n\n### Development of categorical data support\nMore progress on the experimental support for categorical features. In 1.7, XGBoost can handle missing values in categorical features and features a new parameter `max_cat_threshold`, which limits the number of categories that can be used in the split evaluation. The parameter is enabled when the partitioning algorithm is used and helps prevent over-fitting. Also, the sklearn interface can now accept the `feature_types` parameter to use data types other than dataframe for categorical features. (#8280, #7821, #8285, #8080, #7948, #7858, #7853, #8212, #7957, #7937, #7934)\n\n\n###  Experimental support for federated learning and new communication collective\n\nAn exciting addition to XGBoost is the experimental federated learning support. The federated learning is implemented with a gRPC federated server that aggregates allreduce calls, and federated clients that train on local data and use existing tree methods (approx, hist, gpu_hist). Currently, this only supports horizontal federated learning (samples are split across participants, and each participant has all the features and labels). Future plans include vertical federated learning (features split across participants), and stronger privacy guarantees with homomorphic encryption and differential privacy. See [Demo with NVFlare integration](demo/nvflare/README.md) for example usage with nvflare.\n\nAs part of the work, XGBoost 1.7 has replaced the old rabit module with the new collective module as the network communication interface with added support for runtime backend selection. In previous versions, the backend is defined at compile time and can not be changed once built. In this new release, users can choose between `rabit` and `federated.` (#8029, #8351, #8350, #8342, #8340, #8325, #8279, #8181, #8027, #7958, #7831, #7879, #8257, #8316, #8242, #8057, #8203, #8038, #7965, #7930, #7911)\n\nThe feature is available in the public PyPI binary package for testing.\n\n### Quantile DMatrix\nBefore 1.7, XGBoost has an internal data structure called `DeviceQuantileDMatrix` (and its distributed version). We now extend its support to CPU and renamed it to `QuantileDMatrix`. This data structure is used for optimizing memory usage for the `hist` and `gpu_hist` tree methods. The new feature helps reduce CPU memory usage significantly, especially for dense data. The new `QuantileDMatrix` can be initialized from both CPU and GPU data, and regardless of where the data comes from, the constructed instance can be used by both the CPU algorithm and GPU algorithm including training and prediction (with some overhead of conversion if the device of data and training algorithm doesn't match). Also, a new parameter `ref` is added to `QuantileDMatrix`, which can be used to construct validation/test datasets. Lastly, it's set as default in the scikit-learn interface when a supported tree method is specified by users. (#7889, #7923, #8136, #8215, #8284, #8268, #8220, #8346, #8327, #8130, #8116, #8103, #8094, #8086, #7898, #8060, #8019, #8045, #7901, #7912, #7922)\n\n### Mean absolute error\nThe mean absolute error is a new member of the collection of objectives in XGBoost. It's noteworthy since MAE has zero hessian value, which is unusual to XGBoost as XGBoost relies on Newton optimization. Without valid Hessian values, the convergence speed can be slow. As part of the support for MAE, we added line searches into the XGBoost training algorithm to overcome the difficulty of training without valid Hessian values. In the future, we will extend the line search to other objectives where it's appropriate for faster convergence speed. (#8343, #8107, #7812, #8380)\n\n### XGBoost on Browser\nWith the help of the [pyodide](https://github.com/pyodide/pyodide) project, you can now run XGBoost on browsers. (#7954, #8369)\n\n### Experimental IPv6 Support for Dask\n\nWith the growing adaption of the new internet protocol, XGBoost joined the club. In the latest release, the Dask interface can be used on IPv6 clusters, see XGBoost's Dask tutorial for details. (#8225, #8234)\n\n### Optimizations\nWe have new optimizations for both the `hist` and `gpu_hist` tree methods to make XGBoost's training even more efficient.\n\n* Hist\nHist now supports optional by-column histogram build, which is automatically configured based on various conditions of input data. This helps the XGBoost CPU hist algorithm to scale better with different shapes of training datasets. (#8233, #8259). Also, the build histogram kernel now can better utilize CPU registers (#8218)\n\n* GPU Hist\nGPU hist performance is significantly improved for wide datasets. GPU hist now supports batched node build, which reduces kernel latency and increases throughput. The improvement is particularly significant when growing deep trees with the default ``depthwise`` policy. (#7919, #8073, #8051, #8118, #7867, #7964, #8026)\n\n### Breaking Changes\nBreaking changes made in the 1.7 release are summarized below.\n- The  `grow_local_histmaker`  updater is removed. This updater is rarely used in practice and has no test. We decided to remove it and focus have XGBoot focus on other more efficient algorithms. (#7992, #8091)\n- Single precision histogram is removed due to its lack of accuracy caused by significant floating point error. In some cases the error can be difficult to detect due to log-scale operations, which makes the parameter dangerous to use. (#7892, #7828)\n- Deprecated CUDA architectures are no longer supported in the release binaries. (#7774)\n- As part of the federated learning development, the `rabit` module is replaced with the new `collective` module. It's a drop-in replacement with added runtime backend selection, see the federated learning section for more details (#8257)\n\n### General new features and improvements\nBefore diving into package-specific changes, some general new features other than those listed at the beginning are summarized here.\n* Users of `DMatrix` and `QuantileDMatrix` can get the data from XGBoost. In previous versions, only getters for meta info like labels are available. The new method is available in Python (`DMatrix::get_data`) and C. (#8269, #8323)\n* In previous versions, the GPU histogram tree method may generate phantom gradient for missing values due to floating point error. We fixed such an error in this release and XGBoost is much better equated to handle floating point errors when training on GPU. (#8274, #8246)\n* Parameter validation is no longer experimental. (#8206)\n* C pointer parameters and JSON parameters are vigorously checked. (#8254, #8254)\n* Improved handling of JSON model input. (#7953, #7918)\n* Support IBM i OS (#7920, #8178)\n\n### Fixes\nSome noteworthy bug fixes that are not related to specific language binding are listed in this section.\n* Rename misspelled config parameter for pseudo-Huber (#7904)\n* Fix feature weights with nested column sampling. (#8100)\n* Fix loading DMatrix binary in distributed env. (#8149)\n* Force auc.cc to be statically linked for unusual compiler platforms. (#8039)\n* New logic for detecting libomp on macos (#8384).\n\n### Python Package\n* Python 3.8 is now the minimum required Python version. (#8071)\n* More progress on type hint support. Except for the new PySpark interface, the XGBoost module is fully typed. (#7742, #7945, #8302, #7914, #8052)\n* XGBoost now validates the feature names in `inplace_predict`, which also affects the predict function in scikit-learn estimators as it uses `inplace_predict` internally. (#8359)\n* Users can now get the data from `DMatrix` using `DMatrix::get_data` or `QuantileDMatrix::get_data`.\n* Show `libxgboost.so` path in build info. (#7893)\n* Raise import error when using the sklearn module while scikit-learn is missing. (#8049)\n* Use `config_context` in the sklearn interface. (#8141)\n* Validate features for inplace prediction. (#8359)\n* Pandas dataframe handling is refactored to reduce data fragmentation. (#7843)\n* Support more pandas nullable types (#8262)\n* Remove pyarrow workaround. (#7884)\n\n* Binary wheel size\nWe aim to enable as many features as possible in XGBoost's default binary distribution on PyPI (package installed with pip), but there's a upper limit on the size of the binary wheel. In 1.7, XGBoost reduces the size of the wheel by pruning unused CUDA architectures. (#8179, #8152, #8150)\n\n* Fixes\n  Some noteworthy fixes are listed here:\n  - Fix the Dask interface with the latest cupy. (#8210)\n  - Check cuDF lazily to avoid potential errors with cuda-python. (#8084)\n* Fix potential error in DMatrix constructor on 32-bit platform. (#8369)\n\n* Maintenance work\n  - Linter script is moved from dmlc-core to XGBoost with added support for formatting, mypy, and parallel run, along with some fixes (#7967, #8101, #8216)\n  - We now require the use of `isort` and `black` for selected files. (#8137, #8096)\n  - Code cleanups. (#7827)\n  - Deprecate `use_label_encoder` in XGBClassifier. The label encoder has already been deprecated and removed in the previous version. These changes only affect the indicator parameter (#7822)\n  - Remove the use of distutils. (#7770)\n  - Refactor and fixes for tests (#8077, #8064, #8078, #8076, #8013, #8010, #8244, #7833)\n\n* Documents\n  - [dask] Fix potential error in demo. (#8079)\n  - Improved documentation for the ranker. (#8356, #8347)\n  - Indicate lack of py-xgboost-gpu on Windows (#8127)\n  - Clarification for feature importance. (#8151)\n  - Simplify Python getting started example (#8153)\n\n### R Package\nWe summarize improvements for the R package briefly here:\n* Feature info including names and types are now passed to DMatrix in preparation for categorical feature support. (#804)\n* XGBoost 1.7 can now gracefully load old R models from RDS for better compatibility with 3-party tuning libraries (#7864)\n* The R package now can be built with parallel compilation, along with fixes for warnings in CRAN tests. (#8330)\n* Emit error early if DiagrammeR is missing (#8037)\n* Fix R package Windows build. (#8065)\n\n### JVM Packages\nThe consistency between JVM packages and other language bindings is greatly improved in 1.7, improvements range from model serialization format to the default value of hyper-parameters.\n\n* Java package now supports feature names and feature types for DMatrix in preparation for categorical feature support. (#7966)\n* Models trained by the JVM packages can now be safely used with other language bindings. (#7896, #7907)\n* Users can specify the model format when saving models with a stream. (#7940, #7955)\n* The default value for training parameters is now sourced from XGBoost directly, which helps JVM packages be consistent with other packages. (#7938)\n* Set the correct objective if the user doesn't explicitly set it (#7781)\n* Auto-detection of MUSL is replaced by system properties (#7921)\n* Improved error message for launching tracker. (#7952, #7968)\n* Fix a race condition in parameter configuration. (#8025)\n* [Breaking] ` timeoutRequestWorkers` is now removed. With the support for barrier mode, this parameter is no longer needed. (#7839)\n* Dependencies updates. (#7791, #8157, #7801, #8240)\n\n### Documents\n- Document for the C interface is greatly improved and is now displayed at the [sphinx document page](https://xgboost.readthedocs.io/en/latest/c.html). Thanks to the breathe project, you can view the C API just like the Python API. (#8300)\n- We now avoid having XGBoost internal text parser in demos and recommend users use dedicated libraries for loading data whenever it's feasible. (#7753)\n- Python survival training demos are now displayed at [sphinx gallery](https://xgboost.readthedocs.io/en/latest/python/survival-examples/index.html). (#8328)\n- Some typos, links, format, and grammar fixes. (#7800, #7832, #7861, #8099, #8163, #8166, #8229, #8028, #8214, #7777, #7905, #8270, #8309, d70e59fef, #7806)\n- Updated winning solution under readme.md (#7862)\n- New security policy. (#8360)\n- GPU document is overhauled as we consider CUDA support to be feature-complete. (#8378)\n\n### Maintenance\n* Code refactoring and cleanups. (#7850, #7826, #7910, #8332, #8204)\n* Reduce compiler warnings. (#7768, #7916, #8046, #8059, #7974, #8031, #8022)\n* Compiler workarounds. (#8211, #8314, #8226, #8093)\n* Dependencies update. (#8001, #7876, #7973, #8298, #7816)\n* Remove warnings emitted in previous versions. (#7815)\n* Small fixes occurred during development. (#8008)\n\n### CI and Tests\n* We overhauled the CI infrastructure to reduce the CI cost and lift the maintenance burdens. Jenkins is replaced with buildkite for better automation, with which, finer control of test runs is implemented to reduce overall cost. Also, we refactored some of the existing tests to reduce their runtime, drooped the size of docker images, and removed multi-GPU C++ tests. Lastly, `pytest-timeout` is added as an optional dependency for running Python tests to keep the test time in check. (#7772, #8291, #8286, #8276, #8306, #8287, #8243, #8313, #8235, #8288, #8303, #8142, #8092, #8333, #8312, #8348)\n* New documents for how to reproduce the CI environment (#7971, #8297)\n* Improved automation for JVM release. (#7882)\n* GitHub Action security-related updates. (#8263, #8267, #8360)\n* Other fixes and maintenance work. (#8154, #7848, #8069, #7943)\n* Small updates and fixes to GitHub action pipelines. (#8364, #8321, #8241, #7950, #8011)\n\n## v1.6.1 (2022 May 9)\nThis is a patch release for bug fixes and Spark barrier mode support. The R package is unchanged.\n\n### Experimental support for categorical data\n- Fix segfault when the number of samples is smaller than the number of categories. (https://github.com/dmlc/xgboost/pull/7853)\n- Enable partition-based split for all model types. (https://github.com/dmlc/xgboost/pull/7857)\n\n### JVM packages\nWe replaced the old parallelism tracker with spark barrier mode to improve the robustness of the JVM package and fix the GPU training pipeline.\n- Fix GPU training pipeline quantile synchronization. (#7823, #7834)\n- Use barrier model in spark package. (https://github.com/dmlc/xgboost/pull/7836, https://github.com/dmlc/xgboost/pull/7840, https://github.com/dmlc/xgboost/pull/7845, https://github.com/dmlc/xgboost/pull/7846)\n- Fix shared object loading on some platforms. (https://github.com/dmlc/xgboost/pull/7844)\n\n## v1.6.0 (2022 Apr 16)\n\nAfter a long period of development, XGBoost v1.6.0 is packed with many new features and\nimprovements. We summarize them in the following sections starting with an introduction to\nsome major new features, then moving on to language binding specific changes including new\nfeatures and notable bug fixes for that binding.\n\n### Development of categorical data support\nThis version of XGBoost features new improvements and full coverage of experimental\ncategorical data support in Python and C package with tree model.  Both `hist`, `approx`\nand `gpu_hist` now support training with categorical data.  Also, partition-based\ncategorical split is introduced in this release. This split type is first available in\nLightGBM in the context of gradient boosting. The previous XGBoost release supported one-hot split where the splitting criteria is of form `x \\in {c}`, i.e. the categorical feature `x` is tested against a single candidate. The new release allows for more expressive conditions: `x \\in S` where the categorical feature `x` is tested against multiple candidates. Moreover, it is now possible to use any tree algorithms (`hist`, `approx`, `gpu_hist`) when creating categorical splits. For more\ninformation, please see our tutorial on [categorical\ndata](https://xgboost.readthedocs.io/en/latest/tutorials/categorical.html), along with\nexamples linked on that page. (#7380, #7708, #7695, #7330, #7307, #7322, #7705,\n#7652, #7592, #7666, #7576, #7569, #7529, #7575, #7393, #7465, #7385, #7371, #7745, #7810)\n\nIn the future, we will continue to improve categorical data support with new features and\noptimizations. Also, we are looking forward to bringing the feature beyond Python binding,\ncontributions and feedback are welcomed! Lastly, as a result of experimental status, the\nbehavior might be subject to change, especially the default value of related\nhyper-parameters.\n\n### Experimental support for multi-output model\n\nXGBoost 1.6 features initial support for the multi-output model, which includes\nmulti-output regression and multi-label classification. Along with this, the XGBoost\nclassifier has proper support for base margin without to need for the user to flatten the\ninput. In this initial support, XGBoost builds one model for each target similar to the\nsklearn meta estimator, for more details, please see our [quick\nintroduction](https://xgboost.readthedocs.io/en/latest/tutorials/multioutput.html).\n\n(#7365, #7736, #7607, #7574, #7521, #7514, #7456, #7453, #7455, #7434, #7429, #7405, #7381)\n\n### External memory support\nExternal memory support for both approx and hist tree method is considered feature\ncomplete in XGBoost 1.6.  Building upon the iterator-based interface introduced in the\nprevious version, now both `hist` and `approx` iterates over each batch of data during\ntraining and prediction.  In previous versions, `hist` concatenates all the batches into\nan internal representation, which is removed in this version.  As a result, users can\nexpect higher scalability in terms of data size but might experience lower performance due\nto disk IO. (#7531, #7320, #7638, #7372)\n\n### Rewritten approx\n\nThe `approx` tree method is rewritten based on the existing `hist` tree method. The\nrewrite closes the feature gap between `approx` and `hist` and improves the performance.\nNow the behavior of `approx` should be more aligned with `hist` and `gpu_hist`. Here is a\nlist of user-visible changes:\n\n- Supports both `max_leaves` and `max_depth`.\n- Supports `grow_policy`.\n- Supports monotonic constraint.\n- Supports feature weights.\n- Use `max_bin` to replace `sketch_eps`.\n- Supports categorical data.\n- Faster performance for many of the datasets.\n- Improved performance and robustness for distributed training.\n- Supports prediction cache.\n- Significantly better performance for external memory when `depthwise` policy is used.\n\n### New serialization format\nBased on the existing JSON serialization format, we introduce UBJSON support as a more\nefficient alternative. Both formats will be available in the future and we plan to\ngradually [phase out](https://github.com/dmlc/xgboost/issues/7547) support for the old\nbinary model format.  Users can opt to use the different formats in the serialization\nfunction by providing the file extension `json` or `ubj`. Also, the `save_raw` function in\nall supported languages bindings gains a new parameter for exporting the model in different\nformats, available options are `json`, `ubj`, and `deprecated`, see document for the\nlanguage binding you are using for details. Lastly, the default internal serialization\nformat is set to UBJSON, which affects Python pickle and R RDS. (#7572, #7570, #7358,\n#7571, #7556, #7549, #7416)\n\n### General new features and improvements\nAside from the major new features mentioned above, some others are summarized here:\n\n* Users can now access the build information of XGBoost binary in Python and C\n  interface. (#7399, #7553)\n* Auto-configuration of `seed_per_iteration` is removed, now distributed training should\n  generate closer results to single node training when sampling is used. (#7009)\n* A new parameter `huber_slope` is introduced for the `Pseudo-Huber` objective.\n* During source build, XGBoost can choose cub in the system path automatically. (#7579)\n* XGBoost now honors the CPU counts from CFS, which is usually set in docker\n  environments. (#7654, #7704)\n* The metric `aucpr` is rewritten for better performance and GPU support. (#7297, #7368)\n* Metric calculation is now performed in double precision. (#7364)\n* XGBoost no longer mutates the global OpenMP thread limit. (#7537, #7519, #7608, #7590,\n  #7589, #7588, #7687)\n* The default behavior of `max_leave` and `max_depth` is now unified (#7302, #7551).\n* CUDA fat binary is now compressed. (#7601)\n* Deterministic result for evaluation metric and linear model. In previous versions of\n  XGBoost, evaluation results might differ slightly for each run due to parallel reduction\n  for floating-point values, which is now addressed. (#7362, #7303, #7316, #7349)\n* XGBoost now uses double for GPU Hist node sum, which improves the accuracy of\n  `gpu_hist`. (#7507)\n\n### Performance improvements\nMost of the performance improvements are integrated into other refactors during feature\ndevelopments. The `approx` should see significant performance gain for many datasets as\nmentioned in the previous section, while the `hist` tree method also enjoys improved\nperformance with the removal of the internal `pruner` along with some other\nrefactoring. Lastly, `gpu_hist` no longer synchronizes the device during training. (#7737)\n\n### General bug fixes\nThis section lists bug fixes that are not specific to any language binding.\n* The `num_parallel_tree` is now a model parameter instead of a training hyper-parameter,\n  which fixes model IO with random forest. (#7751)\n* Fixes in CMake script for exporting configuration. (#7730)\n* XGBoost can now handle unsorted sparse input. This includes text file formats like\n  libsvm and scipy sparse matrix where column index might not be sorted. (#7731)\n* Fix tree param feature type, this affects inputs with the number of columns greater than\n  the maximum value of int32. (#7565)\n* Fix external memory with gpu_hist and subsampling. (#7481)\n* Check the number of trees in inplace predict, this avoids a potential segfault when an\n  incorrect value for `iteration_range` is provided. (#7409)\n* Fix non-stable result in cox regression (#7756)\n\n### Changes in the Python package\nOther than the changes in Dask, the XGBoost Python package gained some new features and\nimprovements along with small bug fixes.\n\n* Python 3.7 is required as the lowest Python version. (#7682)\n* Pre-built binary wheel for Apple Silicon. (#7621, #7612, #7747) Apple Silicon users will\n  now be able to run `pip install xgboost` to install XGBoost.\n* MacOS users no longer need to install `libomp` from Homebrew, as the XGBoost wheel now\n  bundles `libomp.dylib` library.\n* There are new parameters for users to specify the custom metric with new\n  behavior. XGBoost can now output transformed prediction values when a custom objective is\n  not supplied.  See our explanation in the\n  [tutorial](https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html#reverse-link-function)\n  for details.\n* For the sklearn interface, following the estimator guideline from scikit-learn, all\n  parameters in `fit` that are not related to input data are moved into the constructor\n  and can be set by `set_params`. (#6751, #7420, #7375, #7369)\n* Apache arrow format is now supported, which can bring better performance to users'\n  pipeline (#7512)\n* Pandas nullable types are now supported (#7760)\n* A new function `get_group` is introduced for `DMatrix` to allow users to get the group\n  information in the custom objective function. (#7564)\n* More training parameters are exposed in the sklearn interface instead of relying on the\n  `**kwargs`. (#7629)\n* A new attribute `feature_names_in_` is defined for all sklearn estimators like\n  `XGBRegressor` to follow the convention of sklearn. (#7526)\n* More work on Python type hint. (#7432, #7348, #7338, #7513, #7707)\n* Support the latest pandas Index type. (#7595)\n* Fix for Feature shape mismatch error on s390x platform (#7715)\n* Fix using feature names for constraints with multiple groups (#7711)\n* We clarified the behavior of the callback function when it contains mutable\n  states. (#7685)\n* Lastly, there are some code cleanups and maintenance work. (#7585, #7426, #7634, #7665,\n  #7667, #7377, #7360, #7498, #7438, #7667, #7752, #7749, #7751)\n\n### Changes in the Dask interface\n* Dask module now supports user-supplied host IP and port address of scheduler node.\n  Please see [introduction](https://xgboost.readthedocs.io/en/latest/tutorials/dask.html#troubleshooting) and\n  [API document](https://xgboost.readthedocs.io/en/latest/python/python_api.html#optional-dask-configuration)\n  for reference. (#7645, #7581)\n* Internal `DMatrix` construction in dask now honers thread configuration. (#7337)\n* A fix for `nthread` configuration using the Dask sklearn interface. (#7633)\n* The Dask interface can now handle empty partitions.  An empty partition is different\n  from an empty worker, the latter refers to the case when a worker has no partition of an\n  input dataset, while the former refers to some partitions on a worker that has zero\n  sizes. (#7644, #7510)\n* Scipy sparse matrix is supported as Dask array partition. (#7457)\n* Dask interface is no longer considered experimental. (#7509)\n\n### Changes in the R package\nThis section summarizes the new features, improvements, and bug fixes to the R package.\n\n* `load.raw` can optionally construct a booster as return. (#7686)\n* Fix parsing decision stump, which affects both transforming text representation to data\n  table and plotting. (#7689)\n* Implement feature weights. (#7660)\n* Some improvements for complying the CRAN release policy. (#7672, #7661, #7763)\n* Support CSR data for predictions (#7615)\n* Document update (#7263, #7606)\n* New maintainer for the CRAN package (#7691, #7649)\n* Handle non-standard installation of toolchain on macos (#7759)\n\n### Changes in JVM-packages\nSome new features for JVM-packages are introduced for a more integrated GPU pipeline and\nbetter compatibility with musl-based Linux. Aside from this, we have a few notable bug\nfixes.\n\n* User can specify the tracker IP address for training, which helps running XGBoost on\n  restricted network environments. (#7808)\n* Add support for detecting musl-based Linux (#7624)\n* Add `DeviceQuantileDMatrix` to Scala binding (#7459)\n* Add Rapids plugin support, now more of the JVM pipeline can be accelerated by RAPIDS (#7491, #7779, #7793, #7806)\n* The setters for CPU and GPU are more aligned (#7692, #7798)\n* Control logging for early stopping (#7326)\n* Do not repartition when nWorker = 1 (#7676)\n* Fix the prediction issue for `multi:softmax` (#7694)\n* Fix for serialization of custom objective and eval (#7274)\n* Update documentation about Python tracker (#7396)\n* Remove jackson from dependency, which fixes CVE-2020-36518. (#7791)\n* Some refactoring to the training pipeline for better compatibility between CPU and\n  GPU. (#7440, #7401, #7789, #7784)\n* Maintenance work. (#7550, #7335, #7641, #7523, #6792, #4676)\n\n### Deprecation\nOther than the changes in the Python package and serialization, we removed some deprecated\nfeatures in previous releases. Also, as mentioned in the previous section, we plan to\nphase out the old binary format in future releases.\n\n* Remove old warning in 1.3 (#7279)\n* Remove label encoder deprecated in 1.3. (#7357)\n* Remove old callback deprecated in 1.3. (#7280)\n* Pre-built binary will no longer support deprecated CUDA architectures including sm35 and\n  sm50. Users can continue to use these platforms with source build. (#7767)\n\n### Documentation\nThis section lists some of the general changes to XGBoost's document, for language binding\nspecific change please visit related sections.\n\n* Document is overhauled to use the new RTD theme, along with integration of Python\n  examples using Sphinx gallery. Also, we replaced most of the hard-coded URLs with sphinx\n  references. (#7347, #7346, #7468, #7522, #7530)\n* Small update along with fixes for broken links, typos, etc. (#7684, #7324, #7334, #7655,\n  #7628, #7623, #7487, #7532, #7500, #7341, #7648, #7311)\n* Update document for GPU. [skip ci] (#7403)\n* Document the status of RTD hosting. (#7353)\n* Update document for building from source. (#7664)\n* Add note about CRAN release [skip ci] (#7395)\n\n### Maintenance\nThis is a summary of maintenance work that is not specific to any language binding.\n\n* Add CMake option to use /MD runtime (#7277)\n* Add clang-format configuration. (#7383)\n* Code cleanups (#7539, #7536, #7466, #7499, #7533, #7735, #7722, #7668, #7304, #7293,\n  #7321, #7356, #7345, #7387, #7577, #7548, #7469, #7680, #7433, #7398)\n* Improved tests with better coverage and latest dependency (#7573, #7446, #7650, #7520,\n  #7373, #7723, #7611, #7771)\n* Improved automation of the release process. (#7278, #7332, #7470)\n* Compiler workarounds (#7673)\n* Change shebang used in CLI demo. (#7389)\n* Update affiliation (#7289)\n\n### CI\nSome fixes and update to XGBoost's CI infrastructure. (#7739, #7701, #7382, #7662, #7646,\n#7582, #7407, #7417, #7475, #7474, #7479, #7472, #7626)\n\n\n## v1.5.0 (2021 Oct 11)\n\nThis release comes with many exciting new features and optimizations, along with some bug\nfixes.  We will describe the experimental categorical data support and the external memory\ninterface independently. Package-specific new features will be listed in respective\nsections.\n\n### Development on categorical data support\nIn version 1.3, XGBoost introduced an experimental feature for handling categorical data\nnatively, without one-hot encoding. XGBoost can fit categorical splits in decision\ntrees. (Currently, the generated splits will be of form `x \\in {v}`, where the input is\ncompared to a single category value. A future version of XGBoost will generate splits that\ncompare the input against a list of multiple category values.)\n\nMost of the other features, including prediction, SHAP value computation, feature\nimportance, and model plotting were revised to natively handle categorical splits.  Also,\nall Python interfaces including native interface with and without quantized `DMatrix`,\nscikit-learn interface, and Dask interface now accept categorical data with a wide range\nof data structures support including numpy/cupy array and cuDF/pandas/modin dataframe.  In\npractice, the following are required for enabling categorical data support during\ntraining:\n\n  - Use Python package.\n  - Use `gpu_hist` to train the model.\n  - Use JSON model file format for saving the model.\n\nOnce the model is trained, it can be used with most of the features that are available on\nthe Python package.  For a quick introduction, see\nhttps://xgboost.readthedocs.io/en/latest/tutorials/categorical.html\n\nRelated PRs: (#7011, #7001, #7042, #7041, #7047, #7043, #7036, #7054, #7053, #7065, #7213, #7228, #7220, #7221, #7231, #7306)\n\n* Next steps\n\n\t- Revise the CPU training algorithm to handle categorical data natively and generate categorical splits\n\t- Extend the CPU and GPU algorithms to generate categorical splits of form `x \\in S`\n\twhere the input is compared with multiple category values.  split. (#7081)\n\n### External memory\nThis release features a brand-new interface and implementation for external memory (also\nknown as out-of-core training).  (#6901, #7064, #7088, #7089, #7087, #7092, #7070,\n#7216). The new implementation leverages the data iterator interface, which is currently\nused to create `DeviceQuantileDMatrix`. For a quick introduction, see\nhttps://xgboost.readthedocs.io/en/latest/tutorials/external_memory.html#data-iterator\n. During the development of this new interface, `lz4` compression is removed. (#7076).\nPlease note that external memory support is still experimental and not ready for\nproduction use yet.  All future development will focus on this new interface and users are\nadvised to migrate. (You are using the old interface if you are using a URL suffix to use\nexternal memory.)\n\n### New features in Python package\n* Support numpy array interface and all numeric types from numpy in `DMatrix`\n  construction and `inplace_predict` (#6998, #7003).  Now XGBoost no longer makes data\n  copy when input is numpy array view.\n* The early stopping callback in Python has a new `min_delta` parameter to control the\n  stopping behavior (#7137)\n* Python package now supports calculating feature scores for the linear model, which is\n  also available on R package. (#7048)\n* Python interface now supports configuring constraints using feature names instead of\n  feature indices.\n* Typehint support for more Python code including scikit-learn interface and rabit\n  module. (#6799, #7240)\n* Add tutorial for XGBoost-Ray (#6884)\n\n### New features in R package\n* In 1.4 we have a new prediction function in the C API which is used by the Python\n  package.  This release revises the R package to use the new prediction function as well.\n  A new parameter `iteration_range` for the predict function is available, which can be\n  used for specifying the range of trees for running prediction. (#6819, #7126)\n* R package now supports the `nthread` parameter in `DMatrix` construction. (#7127)\n\n### New features in JVM packages\n* Support GPU dataframe and `DeviceQuantileDMatrix` (#7195).  Constructing `DMatrix`\n  with GPU data structures and the interface for quantized `DMatrix` were first\n  introduced in the Python package and are now available in the xgboost4j package.\n* JVM packages now support saving and getting early stopping attributes. (#7095) Here is a\n  quick [example](https://github.com/dmlc/xgboost/jvm-packages/xgboost4j-example/src/main/java/ml/dmlc/xgboost4j/java/example/EarlyStopping.java \"example\") in JAVA (#7252).\n\n### General new features\n* We now have a pre-built binary package for R on Windows with GPU support. (#7185)\n* CUDA compute capability 86 is now part of the default CMake build configuration with\n  newly added support for CUDA 11.4. (#7131, #7182, #7254)\n* XGBoost can be compiled using system CUB provided by CUDA 11.x installation. (#7232)\n\n### Optimizations\nThe performance for both `hist` and `gpu_hist` has been significantly improved in 1.5\nwith the following optimizations:\n* GPU multi-class model training now supports prediction cache. (#6860)\n* GPU histogram building is sped up and the overall training time is 2-3 times faster on\n  large datasets (#7180, #7198).  In addition, we removed the parameter `deterministic_histogram` and now\n  the GPU algorithm is always deterministic.\n* CPU hist has an optimized procedure for data sampling (#6922)\n* More performance optimization in regression and binary classification objectives on\n  CPU (#7206)\n* Tree model dump is now performed in parallel (#7040)\n\n### Breaking changes\n* `n_gpus` was deprecated in 1.0 release and is now removed.\n* Feature grouping in CPU hist tree method is removed, which was disabled long\n  ago. (#7018)\n* C API for Quantile DMatrix is changed to be consistent with the new external memory\n  implementation. (#7082)\n\n### Notable general bug fixes\n* XGBoost no long changes global CUDA device ordinal when `gpu_id` is specified (#6891,\n  #6987)\n* Fix `gamma` negative likelihood evaluation metric. (#7275)\n* Fix integer value of `verbose_eal` for `xgboost.cv` function in Python. (#7291)\n* Remove extra sync in CPU hist for dense data, which can lead to incorrect tree node\n  statistics. (#7120, #7128)\n* Fix a bug in GPU hist when data size is larger than `UINT32_MAX` with missing\n  values. (#7026)\n* Fix a thread safety issue in prediction with the `softmax` objective. (#7104)\n* Fix a thread safety issue in CPU SHAP value computation. (#7050) Please note that all\n  prediction functions in Python are thread-safe.\n* Fix model slicing. (#7149, #7078)\n* Workaround a bug in old GCC which can lead to segfault during construction of\n  DMatrix. (#7161)\n* Fix histogram truncation in GPU hist, which can lead to slightly-off results. (#7181)\n* Fix loading GPU linear model pickle files on CPU-only machine. (#7154)\n* Check input value is duplicated when CPU quantile queue is full (#7091)\n* Fix parameter loading with training continuation. (#7121)\n* Fix CMake interface for exposing C library by specifying dependencies. (#7099)\n* Callback and early stopping are explicitly disabled for the scikit-learn interface\n  random forest estimator. (#7236)\n* Fix compilation error on x86 (32-bit machine) (#6964)\n* Fix CPU memory usage with extremely sparse datasets (#7255)\n* Fix a bug in GPU multi-class AUC implementation with weighted data (#7300)\n\n### Python package\nOther than the items mentioned in the previous sections, there are some Python-specific\nimprovements.\n* Change development release postfix to `dev` (#6988)\n* Fix early stopping behavior with MAPE metric (#7061)\n* Fixed incorrect feature mismatch error message (#6949)\n* Add predictor to skl constructor. (#7000, #7159)\n* Re-enable feature validation in predict proba. (#7177)\n* scikit learn interface regression estimator now can pass the scikit-learn estimator\n  check and is fully compatible with scikit-learn utilities.  `__sklearn_is_fitted__` is\n  implemented as part of the changes (#7130, #7230)\n* Conform the latest pylint. (#7071, #7241)\n* Support latest panda range index in DMatrix construction. (#7074)\n* Fix DMatrix construction from pandas series. (#7243)\n* Fix typo and grammatical mistake in error message (#7134)\n* [dask] disable work stealing explicitly for training tasks (#6794)\n* [dask] Set dataframe index in predict. (#6944)\n* [dask] Fix prediction on df with latest dask. (#6969)\n* [dask] Fix dask predict on `DaskDMatrix` with `iteration_range`. (#7005)\n* [dask] Disallow importing non-dask estimators from xgboost.dask (#7133)\n\n### R package\nImprovements other than new features on R package:\n* Optimization for updating R handles in-place (#6903)\n* Removed the magrittr dependency. (#6855, #6906, #6928)\n* The R package now hides all C++ symbols to avoid conflicts. (#7245)\n* Other maintenance including code cleanups, document updates. (#6863, #6915, #6930, #6966, #6967)\n\n### JVM packages\nImprovements other than new features on JVM packages:\n* Constructors with implicit missing value are deprecated due to confusing behaviors. (#7225)\n* Reduce scala-compiler, scalatest dependency scopes (#6730)\n* Making the Java library loader emit helpful error messages on missing dependencies. (#6926)\n* JVM packages now use the Python tracker in XGBoost instead of dmlc.  The one in XGBoost\n  is shared between JVM packages and Python Dask and enjoys better maintenance (#7132)\n* Fix \"key not found: train\" error (#6842)\n* Fix model loading from stream (#7067)\n\n### General document improvements\n* Overhaul the installation documents. (#6877)\n* A few demos are added for AFT with dask (#6853), callback with dask (#6995), inference\n  in C (#7151), `process_type`. (#7135)\n* Fix PDF format of document. (#7143)\n* Clarify the behavior of `use_rmm`. (#6808)\n* Clarify prediction function. (#6813)\n* Improve tutorial on feature interactions (#7219)\n* Add small example for dask sklearn interface. (#6970)\n* Update Python intro.  (#7235)\n* Some fixes/updates (#6810, #6856, #6935, #6948, #6976, #7084, #7097, #7170, #7173, #7174, #7226, #6979, #6809, #6796, #6979)\n\n### Maintenance\n* Some refactoring around CPU hist, which lead to better performance but are listed under general maintenance tasks:\n  - Extract evaluate splits from CPU hist. (#7079)\n  - Merge lossgude and depthwise strategies for CPU hist (#7007)\n  - Simplify sparse and dense CPU hist kernels (#7029)\n  - Extract histogram builder from CPU Hist. (#7152)\n\n* Others\n  - Fix `gpu_id` with custom objective. (#7015)\n  - Fix typos in AUC. (#6795)\n  - Use constexpr in `dh::CopyIf`. (#6828)\n  - Update dmlc-core. (#6862)\n  - Bump version to 1.5.0 snapshot in master. (#6875)\n  - Relax shotgun test. (#6900)\n  - Guard against index error in prediction. (#6982)\n  - Hide symbols in CI build + hide symbols for C and CUDA (#6798)\n  - Persist data in dask test. (#7077)\n  - Fix typo in arguments of PartitionBuilder::Init (#7113)\n  - Fix typo in src/common/hist.cc BuildHistKernel (#7116)\n  - Use upstream URI in distributed quantile tests. (#7129)\n  - Include cpack (#7160)\n  - Remove synchronization in monitor. (#7164)\n  - Remove unused code. (#7175)\n  - Fix building on CUDA 11.0. (#7187)\n  - Better error message for `ncclUnhandledCudaError`. (#7190)\n  - Add noexcept to JSON objects. (#7205)\n  - Improve wording for warning (#7248)\n  - Fix typo in release script. [skip ci] (#7238)\n  - Relax shotgun test. (#6918)\n  - Relax test for decision stump in distributed environment. (#6919)\n  -\t[dask] speed up tests (#7020)\n\n### CI\n* [CI] Rotate access keys for uploading MacOS artifacts from Travis CI (#7253)\n* Reduce Travis environment setup time. (#6912)\n* Restore R cache on github action. (#6985)\n* [CI] Remove stray build artifact to avoid error in artifact packaging (#6994)\n* [CI] Move appveyor tests to action (#6986)\n* Remove appveyor badge. [skip ci] (#7035)\n* [CI] Configure RAPIDS, dask, modin (#7033)\n* Test on s390x. (#7038)\n* [CI] Upgrade to CMake 3.14 (#7060)\n* [CI] Update R cache. (#7102)\n* [CI] Pin libomp to 11.1.0  (#7107)\n* [CI] Upgrade build image to CentOS 7 + GCC 8; require CUDA 10.1 and later (#7141)\n* [dask] Work around segfault in prediction. (#7112)\n* [dask] Remove the workaround for segfault. (#7146)\n* [CI] Fix hanging Python setup in Windows CI (#7186)\n* [CI] Clean up in beginning of each task in Win CI (#7189)\n* Fix travis. (#7237)\n\n### Acknowledgement\n* **Contributors**: Adam Pocock (@Craigacp), Jeff H (@JeffHCross), Johan Hansson (@JohanWork), Jose Manuel Llorens (@JoseLlorensRipolles), Benjamin Szőke (@Livius90), @ReeceGoding, @ShvetsKS, Robert Zabel (@ZabelTech), Ali (@ali5h), Andrew Ziem (@az0), Andy Adinets (@canonizer), @david-cortes, Daniel Saxton (@dsaxton), Emil Sadek (@esadek), @farfarawayzyt, Gil Forsyth (@gforsyth), @giladmaya, @graue70, Philip Hyunsu Cho (@hcho3), James Lamb (@jameslamb), José Morales (@jmoralez), Kai Fricke (@krfricke), Christian Lorentzen (@lorentzenchr), Mads R. B. Kristensen (@madsbk), Anton Kostin (@masguit42), Martin Petříček (@mpetricek-corp), @naveenkb, Taewoo Kim (@oOTWK), Viktor Szathmáry (@phraktle), Robert Maynard (@robertmaynard), TP Boudreau (@tpboudreau), Jiaming Yuan (@trivialfis), Paul Taylor (@trxcllnt), @vslaykovsky, Bobby Wang (@wbo4958),\n* **Reviewers**: Nan Zhu (@CodingCat), Adam Pocock (@Craigacp), Jose Manuel Llorens (@JoseLlorensRipolles), Kodi Arfer (@Kodiologist), Benjamin Szőke (@Livius90), Mark Guryanov (@MarkGuryanov), Rory Mitchell (@RAMitchell), @ReeceGoding, @ShvetsKS, Egor Smirnov (@SmirnovEgorRu), Andrew Ziem (@az0), @candalfigomoro, Andy Adinets (@canonizer), Dante Gama Dessavre (@dantegd), @david-cortes, Daniel Saxton (@dsaxton), @farfarawayzyt, Gil Forsyth (@gforsyth), Harutaka Kawamura (@harupy), Philip Hyunsu Cho (@hcho3), @jakirkham, James Lamb (@jameslamb), José Morales (@jmoralez), James Bourbeau (@jrbourbeau), Christian Lorentzen (@lorentzenchr), Martin Petříček (@mpetricek-corp), Nikolay Petrov (@napetrov), @naveenkb, Viktor Szathmáry (@phraktle), Robin Teuwens (@rteuwens), Yuan Tang (@terrytangyuan), TP Boudreau (@tpboudreau), Jiaming Yuan (@trivialfis), @vkuzmin-uber, Bobby Wang (@wbo4958), William Hicks (@wphicks)\n\n\n## v1.4.2 (2021.05.13)\nThis is a patch release for Python package with following fixes:\n\n* Handle the latest version of cupy.ndarray in inplace_predict. (#6933)\n* Ensure output array from predict_leaf is (n_samples, ) when there's only 1 tree. 1.4.0 outputs (n_samples, 1). (#6889)\n* Fix empty dataset handling with multi-class AUC. (#6947)\n* Handle object type from pandas in inplace_predict. (#6927)\n\n\n## v1.4.1 (2021.04.20)\nThis is a bug fix release.\n\n* Fix GPU implementation of AUC on some large datasets. (#6866)\n\n## v1.4.0 (2021.04.12)\n\n### Introduction of pre-built binary package for R, with GPU support\nStarting with release 1.4.0, users now have the option of installing `{xgboost}` without\nhaving to build it from the source. This is particularly advantageous for users who want\nto take advantage of the GPU algorithm (`gpu_hist`), as previously they'd have to build\n`{xgboost}` from the source using CMake and NVCC. Now installing `{xgboost}` with GPU\nsupport is as easy as: `R CMD INSTALL ./xgboost_r_gpu_linux.tar.gz`. (#6827)\n\nSee the instructions at https://xgboost.readthedocs.io/en/latest/build.html\n\n### Improvements on prediction functions\nXGBoost has many prediction types including shap value computation and inplace prediction.\nIn 1.4 we overhauled the underlying prediction functions for C API and Python API with an\nunified interface. (#6777, #6693, #6653, #6662, #6648, #6668, #6804)\n* Starting with 1.4, sklearn interface prediction will use inplace predict by default when\n  input data is supported.\n* Users can use inplace predict with `dart` booster and enable GPU acceleration just\n  like `gbtree`.\n* Also all prediction functions with tree models are now thread-safe.  Inplace predict is\n  improved with `base_margin` support.\n* A new set of C predict functions are exposed in the public interface.\n* A user-visible change is a newly added parameter called `strict_shape`.  See\n  https://xgboost.readthedocs.io/en/latest/prediction.html for more details.\n\n\n### Improvement on Dask interface\n* Starting with 1.4, the Dask interface is considered to be feature-complete, which means\n  all of the models found in the single node Python interface are now supported in Dask,\n  including but not limited to ranking and random forest.  Also, the prediction function\n  is significantly faster and supports shap value computation.\n  - Most of the parameters found in single node sklearn interface are supported by\n    Dask interface. (#6471, #6591)\n  - Implements learning to rank.  On the Dask interface, we use the newly added support of\n    query ID to enable group structure. (#6576)\n  - The Dask interface has Python type hints support. (#6519)\n  - All models can be safely pickled. (#6651)\n  - Random forest estimators are now supported. (#6602)\n  - Shap value computation is now supported. (#6575, #6645, #6614)\n  - Evaluation result is printed on the scheduler process. (#6609)\n  - `DaskDMatrix` (and device quantile dmatrix) now accepts all meta-information. (#6601)\n\n* Prediction optimization.  We enhanced and speeded up the prediction function for the\n  Dask interface.  See the latest Dask tutorial page in our document for an overview of\n  how you can optimize it even further. (#6650, #6645, #6648, #6668)\n\n* Bug fixes\n  - If you are using the latest Dask and distributed where `distributed.MultiLock` is\n    present, XGBoost supports training multiple models on the same cluster in\n    parallel. (#6743)\n  - A bug fix for when using `dask.client` to launch async task, XGBoost might use a\n    different client object internally. (#6722)\n\n* Other improvements on documents, blogs, tutorials, and demos. (#6389, #6366, #6687,\n  #6699, #6532, #6501)\n\n### Python package\nWith changes from Dask and general improvement on prediction, we have made some\nenhancements on the general Python interface and IO for booster information.  Starting\nfrom 1.4, booster feature names and types can be saved into the JSON model.  Also some\nmodel attributes like `best_iteration`, `best_score` are restored upon model load.  On\nsklearn interface, some attributes are now implemented as Python object property with\nbetter documents.\n\n* Breaking change: All `data` parameters in prediction functions are renamed to `X`\n  for better compliance to sklearn estimator interface guidelines.\n* Breaking change: XGBoost used to generate some pseudo feature names with `DMatrix`\n  when inputs like `np.ndarray` don't have column names.  The procedure is removed to\n  avoid conflict with other inputs. (#6605)\n* Early stopping with training continuation is now supported. (#6506)\n* Optional import for Dask and cuDF are now lazy. (#6522)\n* As mentioned in the prediction improvement summary, the sklearn interface uses inplace\n  prediction whenever possible. (#6718)\n* Booster information like feature names and feature types are now saved into the JSON\n  model file. (#6605)\n* All `DMatrix` interfaces including `DeviceQuantileDMatrix` and counterparts in Dask\n  interface (as mentioned in the Dask changes summary) now accept all the meta-information\n  like `group` and `qid` in their constructor for better consistency. (#6601)\n* Booster attributes are restored upon model load so users don't have to call `attr`\n  manually. (#6593)\n* On sklearn interface, all models accept `base_margin` for evaluation datasets. (#6591)\n* Improvements over the setup script including smaller sdist size and faster installation\n  if the C++ library is already built (#6611, #6694, #6565).\n\n* Bug fixes for Python package:\n  - Don't validate feature when number of rows is 0. (#6472)\n  - Move metric configuration into booster. (#6504)\n  - Calling XGBModel.fit() should clear the Booster by default (#6562)\n  - Support `_estimator_type`. (#6582)\n  - [dask, sklearn] Fix predict proba. (#6566, #6817)\n  - Restore unknown data support. (#6595)\n  - Fix learning rate scheduler with cv. (#6720)\n  - Fixes small typo in sklearn documentation (#6717)\n  - [python-package] Fix class Booster: feature_types = None (#6705)\n  - Fix divide by 0 in feature importance when no split is found. (#6676)\n\n\n### JVM package\n* [jvm-packages] fix early stopping doesn't work even without custom_eval setting (#6738)\n* fix potential TaskFailedListener's callback won't be called (#6612)\n* [jvm] Add ability to load booster direct from byte array (#6655)\n* [jvm-packages] JVM library loader extensions (#6630)\n\n### R package\n* R documentation: Make construction of DMatrix consistent.\n* Fix R documentation for xgb.train. (#6764)\n\n### ROC-AUC\nWe re-implemented the ROC-AUC metric in XGBoost.  The new implementation supports\nmulti-class classification and has better support for learning to rank tasks that are not\nbinary.  Also, it has a better-defined average on distributed environments with additional\nhandling for invalid datasets. (#6749, #6747, #6797)\n\n### Global configuration.\nStarting from 1.4, XGBoost's Python, R and C interfaces support a new global configuration\nmodel where users can specify some global parameters.  Currently, supported parameters are\n`verbosity` and `use_rmm`.  The latter is experimental, see rmm plugin demo and\nrelated README file for details. (#6414, #6656)\n\n### Other New features.\n* Better handling for input data types that support `__array_interface__`.  For some\n  data types including GPU inputs and `scipy.sparse.csr_matrix`, XGBoost employs\n  `__array_interface__` for processing the underlying data.  Starting from 1.4, XGBoost\n  can accept arbitrary array strides (which means column-major is supported) without\n  making data copies, potentially reducing a significant amount of memory consumption.\n  Also version 3 of `__cuda_array_interface__` is now supported.  (#6776, #6765, #6459,\n  #6675)\n* Improved parameter validation, now feeding XGBoost with parameters that contain\n  whitespace will trigger an error. (#6769)\n* For Python and R packages, file paths containing the home indicator `~` are supported.\n* As mentioned in the Python changes summary, the JSON model can now save feature\n  information of the trained booster.  The JSON schema is updated accordingly. (#6605)\n* Development of categorical data support is continued.  Newly added weighted data support\n  and `dart` booster support. (#6508, #6693)\n* As mentioned in Dask change summary, ranking now supports the `qid` parameter for\n  query groups. (#6576)\n* `DMatrix.slice` can now consume a numpy array. (#6368)\n\n### Other breaking changes\n* Aside from the feature name generation, there are 2 breaking changes:\n  - Drop saving binary format for memory snapshot. (#6513, #6640)\n  - Change default evaluation metric for binary:logitraw objective to logloss (#6647)\n\n### CPU Optimization\n* Aside from the general changes on predict function, some optimizations are applied on\n  CPU implementation. (#6683, #6550, #6696, #6700)\n* Also performance for sampling initialization in `hist` is improved. (#6410)\n\n### Notable fixes in the core library\nThese fixes do not reside in particular language bindings:\n* Fixes for gamma regression.  This includes checking for invalid input values, fixes for\n  gamma deviance metric, and better floating point guard for gamma negative log-likelihood\n  metric. (#6778, #6537, #6761)\n* Random forest with `gpu_hist` might generate low accuracy in previous versions. (#6755)\n* Fix a bug in GPU sketching when data size exceeds limit of 32-bit integer. (#6826)\n* Memory consumption fix for row-major adapters (#6779)\n* Don't estimate sketch batch size when rmm is used. (#6807) (#6830)\n* Fix in-place predict with missing value. (#6787)\n* Re-introduce double buffer in UpdatePosition, to fix perf regression in gpu_hist (#6757)\n* Pass correct split_type to GPU predictor (#6491)\n* Fix DMatrix feature names/types IO. (#6507)\n* Use view for `SparsePage` exclusively to avoid some data access races. (#6590)\n* Check for invalid data. (#6742)\n* Fix relocatable include in CMakeList (#6734) (#6737)\n* Fix DMatrix slice with feature types. (#6689)\n\n### Other deprecation notices:\n\n* This release will be the last release to support CUDA 10.0. (#6642)\n\n* Starting in the next release, the Python package will require Pip 19.3+ due to the use\n  of manylinux2014 tag. Also, CentOS 6, RHEL 6 and other old distributions will not be\n  supported.\n\n### Known issue:\n\nMacOS build of the JVM packages doesn't support multi-threading out of the box. To enable\nmulti-threading with JVM packages, MacOS users will need to build the JVM packages from\nthe source. See https://xgboost.readthedocs.io/en/latest/jvm/index.html#installation-from-source\n\n\n### Doc\n* Dedicated page for `tree_method` parameter is added. (#6564, #6633)\n* [doc] Add FLAML as a fast tuning tool for XGBoost  (#6770)\n* Add document for tests directory. [skip ci] (#6760)\n* Fix doc string of config.py to use correct `versionadded` (#6458)\n* Update demo for prediction. (#6789)\n* [Doc] Document that AUCPR is for binary classification/ranking (#5899)\n* Update the C API comments (#6457)\n* Fix document. [skip ci] (#6669)\n\n### Maintenance: Testing, continuous integration\n* Use CPU input for test_boost_from_prediction. (#6818)\n* [CI] Upload xgboost4j.dll to S3 (#6781)\n* Update dmlc-core submodule (#6745)\n* [CI] Use manylinux2010_x86_64 container to vendor libgomp (#6485)\n* Add conda-forge badge (#6502)\n* Fix merge conflict. (#6512)\n* [CI] Split up main.yml, add mypy. (#6515)\n* [Breaking] Upgrade cuDF and RMM to 0.18 nightlies; require RMM 0.18+ for RMM plugin (#6510)\n* \"featue_map\" typo changed to  \"feature_map\" (#6540)\n* Add script for generating release tarball. (#6544)\n* Add credentials to .gitignore (#6559)\n* Remove warnings in tests. (#6554)\n* Update dmlc-core submodule and conform to new API (#6431)\n* Suppress hypothesis health check for dask client. (#6589)\n* Fix pylint. (#6714)\n* [CI] Clear R package cache (#6746)\n* Exclude dmlc test on github action. (#6625)\n* Tests for regression metrics with weights. (#6729)\n* Add helper script and doc for releasing pip package. (#6613)\n* Support pylint 2.7.0 (#6726)\n* Remove R cache in github action. (#6695)\n* [CI] Do not mix up stashed executable built for ARM and x86_64 platforms (#6646)\n* [CI] Add ARM64 test to Jenkins pipeline (#6643)\n* Disable s390x and arm64 tests on travis for now. (#6641)\n* Move sdist test to action. (#6635)\n* [dask] Rework base margin test. (#6627)\n\n\n### Maintenance: Refactor code for legibility and maintainability\n* Improve OpenMP exception handling (#6680)\n* Improve string view to reduce string allocation. (#6644)\n* Simplify Span checks. (#6685)\n* Use generic dispatching routine for array interface. (#6672)\n\n\n## v1.3.0 (2020.12.08)\n\n### XGBoost4J-Spark: Exceptions should cancel jobs gracefully instead of killing SparkContext (#6019).\n* By default, exceptions in XGBoost4J-Spark causes the whole SparkContext to shut down, necessitating the restart of the Spark cluster. This behavior is often a major inconvenience.\n* Starting from 1.3.0 release, XGBoost adds a new parameter `killSparkContextOnWorkerFailure` to optionally prevent killing SparkContext. If this parameter is set, exceptions will gracefully cancel training jobs instead of killing SparkContext.\n\n### GPUTreeSHAP: GPU acceleration of the TreeSHAP algorithm (#6038, #6064, #6087, #6099, #6163, #6281, #6332)\n* [SHAP (SHapley Additive exPlanations)](https://github.com/slundberg/shap) is a game theoretic approach to explain predictions of machine learning models. It computes feature importance scores for individual examples, establishing how each feature influences a particular prediction. TreeSHAP is an optimized SHAP algorithm specifically designed for decision tree ensembles.\n* Starting with 1.3.0 release, it is now possible to leverage CUDA-capable GPUs to accelerate the TreeSHAP algorithm. Check out [the demo notebook](https://github.com/dmlc/xgboost/blob/master/demo/gpu_acceleration/shap.ipynb).\n* The CUDA implementation of the TreeSHAP algorithm is hosted at [rapidsai/GPUTreeSHAP](https://github.com/rapidsai/gputreeshap). XGBoost imports it as a Git submodule.\n\n### New style Python callback API (#6199, #6270, #6320, #6348, #6376, #6399, #6441)\n* The XGBoost Python package now offers a re-designed callback API. The new callback API lets you design various extensions of training in idomatic Python. In addition, the new callback API allows you to use early stopping with the native Dask API (`xgboost.dask`). Check out [the tutorial](https://xgboost.readthedocs.io/en/release_1.3.0/python/callbacks.html) and [the demo](https://github.com/dmlc/xgboost/blob/master/demo/guide-python/callbacks.py).\n\n### Enable the use of `DeviceQuantileDMatrix` / `DaskDeviceQuantileDMatrix` with large data (#6201, #6229, #6234).\n* `DeviceQuantileDMatrix` can achieve memory saving by avoiding extra copies of the training data, and the saving is bigger for large data. Unfortunately, large data with more than 2^31 elements was triggering integer overflow bugs in CUB and Thrust. Tracking issue: #6228.\n* This release contains a series of work-arounds to allow the use of `DeviceQuantileDMatrix` with large data:\n  - Loop over `copy_if` (#6201)\n  - Loop over `thrust::reduce` (#6229)\n  - Implement the inclusive scan algorithm in-house, to handle large offsets (#6234)\n\n### Support slicing of tree models (#6302)\n* Accessing the best iteration of a model after the application of early stopping used to be error-prone, need to manually pass the `ntree_limit` argument to the `predict()` function.\n* Now we provide a simple interface to slice tree models by specifying a range of boosting rounds. The tree ensemble can be split into multiple sub-ensembles via the slicing interface. Check out [an example](https://xgboost.readthedocs.io/en/release_1.3.0/python/model.html).\n* In addition, the early stopping callback now supports `save_best` option. When enabled, XGBoost will save (persist) the model at the best boosting round and discard the trees that were fit subsequent to the best round.\n\n### Weighted subsampling of features (columns) (#5962)\n* It is now possible to sample features (columns) via weighted subsampling, in which features with higher weights are more likely to be selected in the sample. Weighted subsampling allows you to encode domain knowledge by emphasizing a particular set of features in the choice of tree splits. In addition, you can prevent particular features from being used in any splits, by assigning them zero weights.\n* Check out [the demo](https://github.com/dmlc/xgboost/blob/master/demo/guide-python/feature_weights.py).\n\n### Improved integration with Dask\n* Support reverse-proxy environment such as Google Kubernetes Engine (#6343, #6475)\n* An XGBoost training job will no longer use all available workers. Instead, it will only use the workers that contain input data (#6343).\n* The new callback API works well with the Dask training API.\n* The `predict()` and `fit()` function of `DaskXGBClassifier` and `DaskXGBRegressor` now accept a base margin (#6155).\n* Support more meta data in the Dask API (#6130, #6132, #6333).\n* Allow passing extra keyword arguments as `kwargs` in `predict()` (#6117)\n* Fix typo in dask interface: `sample_weights` -> `sample_weight` (#6240)\n* Allow empty data matrix in AFT survival, as Dask may produce empty partitions (#6379)\n* Speed up prediction by overlapping prediction jobs in all workers (#6412)\n\n### Experimental support for direct splits with categorical features (#6028, #6128, #6137, #6140, #6164, #6165, #6166, #6179, #6194, #6219)\n* Currently, XGBoost requires users to one-hot-encode categorical variables. This has adverse performance implications, as the creation of many dummy variables results into higher memory consumption and may require fitting deeper trees to achieve equivalent model accuracy.\n* The 1.3.0 release of XGBoost contains an experimental support for direct handling of categorical variables in test nodes. Each test node will have the condition of form `feature_value \\in match_set`, where the `match_set` on the right hand side contains one or more matching categories. The matching categories in `match_set` represent the condition for traversing to the right child node. Currently, XGBoost will only generate categorical splits with only a single matching category (\"one-vs-rest split\"). In a future release, we plan to remove this restriction and produce splits with multiple matching categories in `match_set`.\n* The categorical split requires the use of JSON model serialization. The legacy binary serialization method cannot be used to save (persist) models with categorical splits.\n* Note. This feature is currently highly experimental. Use it at your own risk. See the detailed list of limitations at [#5949](https://github.com/dmlc/xgboost/pull/5949).\n\n### Experimental plugin for RAPIDS Memory Manager (#5873, #6131, #6146, #6150, #6182)\n* RAPIDS Memory Manager library ([rapidsai/rmm](https://github.com/rapidsai/rmm)) provides a collection of efficient memory allocators for NVIDIA GPUs. It is now possible to use XGBoost with memory allocators provided by RMM, by enabling the RMM integration plugin. With this plugin, XGBoost is now able to share a common GPU memory pool with other applications using RMM, such as the RAPIDS data science packages.\n* See [the demo](https://github.com/dmlc/xgboost/blob/master/demo/rmm_plugin/README.md) for a working example, as well as directions for building XGBoost with the RMM plugin.\n* The plugin will be soon considered non-experimental, once #6297 is resolved.\n\n### Experimental plugin for oneAPI programming model (#5825)\n* oneAPI is a programming interface developed by Intel aimed at providing one programming model for many types of hardware such as CPU, GPU, FGPA and other hardware accelerators.\n* XGBoost now includes an experimental plugin for using oneAPI for the predictor and objective functions. The plugin is hosted in the directory `plugin/updater_oneapi`.\n* Roadmap: #5442\n\n### Pickling the XGBoost model will now trigger JSON serialization (#6027)\n* The pickle will now contain the JSON string representation of the XGBoost model, as well as related configuration.\n\n### Performance improvements\n* Various performance improvement on multi-core CPUs\n  - Optimize DMatrix build time by up to 3.7x. (#5877)\n  - CPU predict performance improvement, by up to 3.6x. (#6127)\n  - Optimize CPU sketch allreduce for sparse data (#6009)\n  - Thread local memory allocation for BuildHist, leading to speedup up to 1.7x. (#6358)\n  - Disable hyperthreading for DMatrix creation (#6386). This speeds up DMatrix creation by up to 2x.\n  - Simple fix for static shedule in predict (#6357)\n* Unify thread configuration, to make it easy to utilize all CPU cores (#6186)\n* [jvm-packages] Clean the way deterministic paritioning is computed (#6033)\n* Speed up JSON serialization by implementing an intrusive pointer class (#6129). It leads to 1.5x-2x performance boost.\n\n### API additions\n* [R] Add SHAP summary plot using ggplot2 (#5882)\n* Modin DataFrame can now be used as input (#6055)\n* [jvm-packages] Add `getNumFeature` method (#6075)\n* Add MAPE metric (#6119)\n* Implement GPU predict leaf. (#6187)\n* Enable cuDF/cuPy inputs in `XGBClassifier` (#6269)\n* Document tree method for feature weights. (#6312)\n* Add `fail_on_invalid_gpu_id` parameter, which will cause XGBoost to terminate upon seeing an invalid value of `gpu_id` (#6342)\n\n### Breaking: the default evaluation metric for classification is changed to `logloss` / `mlogloss` (#6183)\n* The default metric used to be accuracy, and it is not statistically consistent to perform early stopping with the accuracy metric when we are really optimizing the log loss for the `binary:logistic` objective.\n* For statistical consistency, the default metric for classification has been changed to `logloss`. Users may choose to preserve the old behavior by explicitly specifying `eval_metric`.\n\n### Breaking: `skmaker` is now removed (#5971)\n* The `skmaker` updater has not been documented nor tested.\n\n### Breaking: the JSON model format no longer stores the leaf child count (#6094).\n* The leaf child count field has been deprecated and is not used anywhere in the XGBoost codebase.\n\n### Breaking: XGBoost now requires MacOS 10.14 (Mojave) and later.\n* Homebrew has dropped support for MacOS 10.13 (High Sierra), so we are not able to install the OpenMP runtime (`libomp`) from Homebrew on MacOS 10.13. Please use MacOS 10.14 (Mojave) or later.\n\n### Deprecation notices\n* The use of `LabelEncoder` in `XGBClassifier` is now deprecated and will be removed in the next minor release (#6269). The deprecation is necessary to support multiple types of inputs, such as cuDF data frames or cuPy arrays.\n* The use of certain positional arguments in the Python interface is deprecated (#6365). Users will use deprecation warnings for the use of position arguments for certain function parameters. New code should use keyword arguments as much as possible. We have not yet decided when we will fully require the use of keyword arguments.\n\n### Bug-fixes\n* On big-endian arch, swap the byte order in the binary serializer to enable loading models that were produced by a little-endian machine (#5813).\n* [jvm-packages] Fix deterministic partitioning with dataset containing Double.NaN (#5996)\n* Limit tree depth for GPU hist to 31 to prevent integer overflow (#6045)\n* [jvm-packages] Set `maxBins` to 256 to align with the default value in the C++ code (#6066)\n* [R] Fix CRAN check (#6077)\n* Add back support for `scipy.sparse.coo_matrix` (#6162)\n* Handle duplicated values in sketching. (#6178)\n* Catch all standard exceptions in C API. (#6220)\n* Fix linear GPU input (#6255)\n* Fix inplace prediction interval. (#6259)\n* [R] allow `xgb.plot.importance()` calls to fill a grid (#6294)\n* Lazy import dask libraries. (#6309)\n* Deterministic data partitioning for external memory (#6317)\n* Avoid resetting seed for every configuration. (#6349)\n* Fix label errors in graph visualization (#6369)\n* [jvm-packages] fix potential unit test suites aborted issue due to race condition (#6373)\n* [R] Fix warnings from `R check --as-cran` (#6374)\n* [R] Fix a crash that occurs with noLD R (#6378)\n* [R] Do not convert continuous labels to factors (#6380)\n* [R] remove uses of `exists()` (#6387)\n* Propagate parameters to the underlying `Booster` handle from `XGBClassifier.set_param` / `XGBRegressor.set_param`. (#6416)\n* [R] Fix R package installation via CMake (#6423)\n* Enforce row-major order in cuPy array (#6459)\n* Fix filtering callable objects in the parameters passed to the scikit-learn API. (#6466)\n\n### Maintenance: Testing, continuous integration, build system\n* [CI] Improve JVM test in GitHub Actions (#5930)\n* Refactor plotting test so that it can run independently (#6040)\n* [CI] Cancel builds on subsequent pushes (#6011)\n* Fix Dask Pytest fixture (#6024)\n* [CI] Migrate linters to GitHub Actions (#6035)\n* [CI] Remove win2016 JVM test from GitHub Actions (#6042)\n* Fix CMake build with `BUILD_STATIC_LIB` option (#6090)\n* Don't link imported target in CMake (#6093)\n* Work around a compiler bug in MacOS AppleClang 11 (#6103)\n* [CI] Fix CTest by running it in a correct directory (#6104)\n* [R] Check warnings explicitly for model compatibility tests (#6114)\n* [jvm-packages] add xgboost4j-gpu/xgboost4j-spark-gpu module to facilitate release (#6136)\n* [CI] Time GPU tests. (#6141)\n* [R] remove warning in configure.ac (#6152)\n* [CI] Upgrade cuDF and RMM to 0.16 nightlies; upgrade to Ubuntu 18.04 (#6157)\n* [CI] Test C API demo (#6159)\n* Option for generating device debug info. (#6168)\n* Update `.gitignore` (#6175, #6193, #6346)\n* Hide C++ symbols from dmlc-core (#6188)\n* [CI] Added arm64 job in Travis-CI (#6200)\n* [CI] Fix Docker build for CUDA 11 (#6202)\n* [CI] Move non-OpenMP gtest to GitHub Actions (#6210)\n* [jvm-packages] Fix up build for xgboost4j-gpu, xgboost4j-spark-gpu (#6216)\n* Add more tests for categorical data support (#6219)\n* [dask] Test for data initializaton. (#6226)\n* Bump junit from 4.11 to 4.13.1 in /jvm-packages/xgboost4j (#6230)\n* Bump junit from 4.11 to 4.13.1 in /jvm-packages/xgboost4j-gpu (#6233)\n* [CI] Reduce testing load with RMM (#6249)\n* [CI] Build a Python wheel for aarch64 platform (#6253)\n* [CI] Time the CPU tests on Jenkins. (#6257)\n* [CI] Skip Dask tests on ARM. (#6267)\n* Fix a typo in `is_arm()` in testing.py (#6271)\n* [CI] replace `egrep` with `grep -E` (#6287)\n* Support unity build. (#6295)\n* [CI] Mark flaky tests as XFAIL (#6299)\n* [CI] Use separate Docker cache for each CUDA version (#6305)\n* Added `USE_NCCL_LIB_PATH` option to enable user to set `NCCL_LIBRARY` during build  (#6310)\n* Fix flaky data initialization test. (#6318)\n* Add a badge for GitHub Actions (#6321)\n* Optional `find_package` for sanitizers. (#6329)\n* Use pytest conventions consistently in Python tests (#6337)\n* Fix missing space in warning message (#6340)\n* Update `custom_metric_obj.rst` (#6367)\n* [CI] Run R check with `--as-cran` flag on GitHub Actions (#6371)\n* [CI] Remove R check from Jenkins (#6372)\n* Mark GPU external memory test as XFAIL. (#6381)\n* [CI] Add noLD R test (#6382)\n* Fix MPI build. (#6403)\n* [CI] Upgrade to MacOS Mojave image (#6406)\n* Fix flaky sparse page dmatrix test. (#6417)\n* [CI] Upgrade cuDF and RMM to 0.17 nightlies (#6434)\n* [CI] Fix CentOS 6 Docker images (#6467)\n* [CI] Vendor libgomp in the manylinux Python wheel (#6461)\n* [CI] Hot fix for libgomp vendoring (#6482)\n\n### Maintenance: Clean up and merge the Rabit submodule (#6023, #6095, #6096, #6105, #6110, #6262, #6275, #6290)\n* The Rabit submodule is now maintained as part of the XGBoost codebase.\n* Tests for Rabit are now part of the test suites of XGBoost.\n* Rabit can now be built on the Windows platform.\n* We made various code re-formatting for the C++ code with clang-tidy.\n* Public headers of XGBoost no longer depend on Rabit headers.\n* Unused CMake targets for Rabit were removed.\n* Single-point model recovery has been dropped and removed from Rabit, simplifying the Rabit code greatly. The single-point model recovery feature has not been adequately maintained over the years.\n* We removed the parts of Rabit that were not useful for XGBoost.\n\n### Maintenance: Refactor code for legibility and maintainability\n* Unify CPU hist sketching (#5880)\n* [R] fix uses of 1:length(x) and other small things (#5992)\n* Unify evaluation functions. (#6037)\n* Make binary bin search reusable. (#6058)\n* Unify set index data. (#6062)\n* [R] Remove `stringi` dependency (#6109)\n* Merge extract cuts into QuantileContainer. (#6125)\n* Reduce C++ compiler warnings (#6197, #6198, #6213, #6286, #6325)\n* Cleanup Python code. (#6223)\n* Small cleanup to evaluator. (#6400)\n\n### Usability Improvements, Documentation\n* [jvm-packages] add example to handle missing value other than 0 (#5677)\n* Add DMatrix usage examples to the C API demo (#5854)\n* List `DaskDeviceQuantileDMatrix` in the doc. (#5975)\n* Update Python custom objective demo. (#5981)\n* Update the JSON model schema to document more objective functions. (#5982)\n* [Python] Fix warning when `missing` field is not used. (#5969)\n* Fix typo in tracker logging (#5994)\n* Move a warning about empty dataset, so that it's shown for all objectives and metrics (#5998)\n* Fix the instructions for installing the nightly build. (#6004)\n* [Doc] Add dtreeviz as a showcase example of integration with 3rd-party software (#6013)\n* [jvm-packages] [doc] Update install doc for JVM packages (#6051)\n* Fix typo in `xgboost.callback.early_stop` docstring (#6071)\n* Add cache suffix to the files used in the external memory demo. (#6088)\n* [Doc] Document the parameter `kill_spark_context_on_worker_failure` (#6097)\n* Fix link to the demo for custom objectives (#6100)\n* Update Dask doc. (#6108)\n* Validate weights are positive values. (#6115)\n* Document the updated CMake version requirement. (#6123)\n* Add demo for `DaskDeviceQuantileDMatrix`. (#6156)\n* Cosmetic fixes in `faq.rst` (#6161)\n* Fix error message. (#6176)\n* [Doc] Add list of winning solutions in data science competitions using XGBoost (#6177)\n* Fix a comment in demo to use correct reference (#6190)\n* Update the list of winning solutions using XGBoost (#6192)\n* Consistent style for build status badge (#6203)\n* [Doc] Add info on GPU compiler (#6204)\n* Update the list of winning solutions (#6222, #6254)\n* Add link to XGBoost's Twitter handle (#6244)\n* Fix minor typos in XGBClassifier methods' docstrings (#6247)\n* Add sponsors link to FUNDING.yml (#6252)\n* Group CLI demo into subdirectory. (#6258)\n* Reduce warning messages from `gbtree`. (#6273)\n* Create a tutorial for using the C API in a C/C++ application (#6285)\n* Update plugin instructions for CMake build (#6289)\n* [doc] make Dask distributed example copy-pastable (#6345)\n* [Python] Add option to use `libxgboost.so` from the system path (#6362)\n* Fixed few grammatical mistakes in doc (#6393)\n* Fix broken link in CLI doc (#6396)\n* Improve documentation for the Dask API (#6413)\n* Revise misleading exception information: no such param of `allow_non_zero_missing` (#6418)\n* Fix CLI ranking demo. (#6439)\n* Fix broken links. (#6455)\n\n### Acknowledgement\n**Contributors**: Nan Zhu (@CodingCat), @FelixYBW, Jack Dunn (@JackDunnNZ), Jean Lescut-Muller (@JeanLescut),  Boris Feld (@Lothiraldan), Nikhil Choudhary (@Nikhil1O1), Rory Mitchell (@RAMitchell), @ShvetsKS, Anthony D'Amato (@Totoketchup), @Wittty-Panda, neko (@akiyamaneko), Alexander Gugel (@alexanderGugel), @dependabot[bot], DIVYA CHAUHAN (@divya661), Daniel Steinberg (@dstein64), Akira Funahashi (@funasoul), Philip Hyunsu Cho (@hcho3), Tong He (@hetong007), Hristo Iliev (@hiliev), Honza Sterba (@honzasterba), @hzy001, Igor Moura (@igormp), @jameskrach, James Lamb (@jameslamb), Naveed Ahmed Saleem Janvekar (@janvekarnaveed), Kyle Nicholson (@kylejn27), lacrosse91 (@lacrosse91), Christian Lorentzen (@lorentzenchr), Manikya Bardhan (@manikyabard), @nabokovas, John Quitto-Graham (@nvidia-johnq), @odidev, Qi Zhang (@qzhang90), Sergio Gavilán (@sgavil), Tanuja Kirthi Doddapaneni (@tanuja3), Cuong Duong (@tcuongd), Yuan Tang (@terrytangyuan), Jiaming Yuan (@trivialfis), vcarpani (@vcarpani), Vladislav Epifanov (@vepifanov), Vitalie Spinu (@vspinu), Bobby Wang (@wbo4958), Zeno Gantner (@zenogantner), zhang_jf (@zuston)\n\n**Reviewers**: Nan Zhu (@CodingCat), John Zedlewski (@JohnZed), Rory Mitchell (@RAMitchell), @ShvetsKS, Egor Smirnov (@SmirnovEgorRu), Anthony D'Amato (@Totoketchup), @Wittty-Panda, Alexander Gugel (@alexanderGugel), Codecov Comments Bot (@codecov-commenter), Codecov (@codecov-io), DIVYA CHAUHAN (@divya661), Devin Robison (@drobison00), Geoffrey Blake (@geoffreyblake), Mark Harris (@harrism), Philip Hyunsu Cho (@hcho3), Honza Sterba (@honzasterba), Igor Moura (@igormp), @jakirkham, @jameskrach, James Lamb (@jameslamb), Janakarajan Natarajan (@janaknat), Jake Hemstad (@jrhemstad), Keith Kraus (@kkraus14), Kyle Nicholson (@kylejn27), Christian Lorentzen (@lorentzenchr), Michael Mayer (@mayer79), Nikolay Petrov (@napetrov), @odidev, PSEUDOTENSOR / Jonathan McKinney (@pseudotensor), Qi Zhang (@qzhang90), Sergio Gavilán (@sgavil), Scott Lundberg (@slundberg), Cuong Duong (@tcuongd), Yuan Tang (@terrytangyuan), Jiaming Yuan (@trivialfis), vcarpani (@vcarpani), Vladislav Epifanov (@vepifanov), Vincent Nijs (@vnijs), Vitalie Spinu (@vspinu), Bobby Wang (@wbo4958), William Hicks (@wphicks)\n\n## v1.2.0 (2020.08.22)\n\n### XGBoost4J-Spark now supports the GPU algorithm (#5171)\n* Now XGBoost4J-Spark is able to leverage NVIDIA GPU hardware to speed up training.\n* There is on-going work for accelerating the rest of the data pipeline with NVIDIA GPUs (#5950, #5972).\n\n### XGBoost now supports CUDA 11 (#5808)\n* It is now possible to build XGBoost with CUDA 11. Note that we do not yet distribute pre-built binaries built with CUDA 11; all current distributions use CUDA 10.0.\n\n### Better guidance for persisting XGBoost models in an R environment (#5940, #5964)\n* Users are strongly encouraged to use `xgb.save()` and `xgb.save.raw()` instead of `saveRDS()`. This is so that the persisted models can be accessed with future releases of XGBoost.\n* The previous release (1.1.0) had problems loading models that were saved with `saveRDS()`. This release adds a compatibility layer to restore access to the old RDS files. Note that this is meant to be a temporary measure; users are advised to stop using `saveRDS()` and migrate to `xgb.save()` and `xgb.save.raw()`.\n\n### New objectives and metrics\n* The pseudo-Huber loss `reg:pseudohubererror` is added (#5647). The corresponding metric is `mphe`. Right now, the slope is hard-coded to 1.\n* The Accelerated Failure Time objective for survival analysis (`survival:aft`) is now accelerated on GPUs (#5714, #5716). The survival metrics `aft-nloglik` and `interval-regression-accuracy` are also accelerated on GPUs.\n\n### Improved integration with scikit-learn\n* Added `n_features_in_` attribute to the scikit-learn interface to store the number of features used (#5780). This is useful for integrating with some scikit-learn features such as `StackingClassifier`.  See [this link](https://scikit-learn-enhancement-proposals.readthedocs.io/en/latest/slep010/proposal.html) for more details.\n* `XGBoostError` now inherits `ValueError`, which conforms scikit-learn's exception requirement (#5696).\n\n### Improved integration with Dask\n* The XGBoost Dask API now exposes an asynchronous interface (#5862). See [the document](https://xgboost.readthedocs.io/en/latest/tutorials/dask.html#working-with-asyncio) for details.\n* Zero-copy ingestion of GPU arrays via `DaskDeviceQuantileDMatrix` (#5623, #5799, #5800, #5803, #5837, #5874, #5901): Previously, the Dask interface had to make 2 data copies: one for concatenating the Dask partition/block into a single block and another for internal representation. To save memory, we introduce `DaskDeviceQuantileDMatrix`. As long as Dask partitions are resident in the GPU memory, `DaskDeviceQuantileDMatrix` is able to ingest them directly without making copies. This matrix type wraps `DeviceQuantileDMatrix`.\n* The prediction function now returns GPU Series type if the input is from Dask-cuDF (#5710). This is to preserve the input data type.\n\n### Robust handling of external data types (#5689, #5893)\n- As we support more and more external data types, the handling logic has proliferated all over the code base and became hard to keep track. It also became unclear how missing values and threads are handled. We refactored the Python package code to collect all data handling logic to a central location, and now we have an explicit list of of all supported data types.\n\n### Improvements in GPU-side data matrix (`DeviceQuantileDMatrix`)\n* The GPU-side data matrix now implements its own quantile sketching logic, so that data don't have to be transported back to the main memory (#5700, #5747, #5760, #5846, #5870, #5898). The GK sketching algorithm is also now better documented.\n  - Now we can load extremely sparse dataset like URL, although performance is still sub-optimal.\n* The GPU-side data matrix now exposes an iterative interface (#5783), so that users are able to construct a matrix from a data iterator. See the [Python demo](https://github.com/dmlc/xgboost/blob/release_1.2.0/demo/guide-python/data_iterator.py).\n\n### New language binding: Swift (#5728)\n* Visit https://github.com/kongzii/SwiftXGBoost for more details.\n\n### Robust model serialization with JSON (#5772, #5804, #5831, #5857, #5934)\n* We continue efforts from the 1.0.0 release to adopt JSON as the format to save and load models robustly.\n* JSON model IO is significantly faster and produces smaller model files.\n* Round-trip reproducibility is guaranteed, via the introduction of an efficient float-to-string conversion algorithm known as [the Ryū algorithm](https://dl.acm.org/doi/10.1145/3192366.3192369). The conversion is locale-independent, producing consistent numeric representation regardless of the locale setting of the user's machine.\n* We fixed an issue in loading large JSON files to memory.\n* It is now possible to load a JSON file from a remote source such as S3.\n\n### Performance improvements\n* CPU hist tree method optimization\n  - Skip missing lookup in hist row partitioning if data is dense. (#5644)\n  - Specialize training procedures for CPU hist tree method on distributed environment. (#5557)\n  - Add single point histogram for CPU hist.  Previously gradient histogram for CPU hist is hard coded to be 64 bit, now users can specify the parameter `single_precision_histogram` to use 32 bit histogram instead for faster training performance. (#5624, #5811)\n* GPU hist tree method optimization\n  - Removed some unnecessary synchronizations and better memory allocation pattern. (#5707)\n  - Optimize GPU Hist for wide dataset.  Previously for wide dataset the atomic operation is performed on global memory, now it can run on shared memory for faster histogram building. But there's a known small regression on GeForce cards with dense data. (#5795, #5926, #5948, #5631)\n\n### API additions\n* Support passing fmap to importance plot (#5719). Now importance plot can show actual names of features instead of default ones.\n* Support 64bit seed. (#5643)\n* A new C API `XGBoosterGetNumFeature` is added for getting number of features in booster (#5856).\n* Feature names and feature types are now stored in C++ core and saved in binary DMatrix (#5858).\n\n### Breaking: The `predict()` method of `DaskXGBClassifier` now produces class predictions (#5986). Use `predict_proba()` to obtain probability predictions.\n* Previously, `DaskXGBClassifier.predict()` produced probability predictions. This is inconsistent with the behavior of other scikit-learn classifiers, where `predict()` returns class predictions. We make a breaking change in 1.2.0 release so that `DaskXGBClassifier.predict()` now correctly produces class predictions and thus behave like other scikit-learn classifiers. Furthermore, we introduce the `predict_proba()` method for obtaining probability predictions, again to be in line with other scikit-learn classifiers.\n\n### Breaking: Custom evaluation metric now receives raw prediction (#5954)\n* Previously, the custom evaluation metric received a transformed prediction result when used with a classifier. Now the custom metric will receive a raw (untransformed) prediction and will need to transform the prediction itself.  See [demo/guide-python/custom\\_softmax.py](https://github.com/dmlc/xgboost/blob/release_1.2.0/demo/guide-python/custom_softmax.py) for an example.\n* This change is to make the custom metric behave consistently with the custom objective, which already receives raw prediction (#5564).\n\n### Breaking: XGBoost4J-Spark now requires Spark 3.0 and Scala 2.12 (#5836, #5890)\n* Starting with version 3.0, Spark can manage GPU resources and allocate them among executors.\n* Spark 3.0 dropped support for Scala 2.11 and now only supports Scala 2.12. Thus, XGBoost4J-Spark also only supports Scala 2.12.\n\n### Breaking: XGBoost Python package now requires Python 3.6 and later (#5715)\n* Python 3.6 has many useful features such as f-strings.\n\n### Breaking: XGBoost now adopts the C++14 standard (#5664)\n* Make sure to use a sufficiently modern C++ compiler that supports C++14, such as Visual Studio 2017, GCC 5.0+, and Clang 3.4+.\n\n### Bug-fixes\n* Fix a data race in the prediction function (#5853). As a byproduct, the prediction function now uses a thread-local data store and became thread-safe.\n* Restore capability to run prediction when the test input has fewer features than the training data (#5955). This capability is necessary to support predicting with LIBSVM inputs. The previous release (1.1) had broken this capability, so we restore it in this version with better tests.\n* Fix OpenMP build with CMake for R package, to support CMake 3.13 (#5895).\n* Fix Windows 2016 build (#5902, #5918).\n* Fix edge cases in scikit-learn interface with Pandas input by disabling feature validation. (#5953)\n* [R] Enable weighted learning to rank (#5945)\n* [R] Fix early stopping with custom objective (#5923)\n* Fix NDK Build (#5886)\n* Add missing explicit template specializations for greater portability (#5921)\n* Handle empty rows in data iterators correctly (#5929). This bug affects file loader and JVM data frames.\n* Fix `IsDense` (#5702)\n* [jvm-packages] Fix wrong method name `setAllowZeroForMissingValue` (#5740)\n* Fix shape inference for Dask predict (#5989)\n\n### Usability Improvements, Documentation\n* [Doc] Document that CUDA 10.0 is required (#5872)\n* Refactored command line interface (CLI). Now CLI is able to handle user errors and output basic document. (#5574)\n* Better error handling in Python: use `raise from` syntax to preserve full stacktrace (#5787).\n* The JSON model dump now has a formal schema (#5660, #5818). The benefit is to prevent `dump_model()` function from breaking. See [this document](https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html#difference-between-saving-model-and-dumping-model) to understand the difference between saving and dumping models.\n* Add a reference to the GPU external memory paper (#5684)\n* Document more objective parameters in the R package (#5682)\n* Document the existence of pre-built binary wheels for MacOS (#5711)\n* Remove `max.depth` in the R gblinear example. (#5753)\n* Added conda environment file for building docs (#5773)\n* Mention dask blog post in the doc, which introduces using Dask with GPU and some internal workings. (#5789)\n* Fix rendering of Markdown docs (#5821)\n* Document new objectives and metrics available on GPUs (#5909)\n* Better message when no GPU is found. (#5594)\n* Remove the use of `silent` parameter from R demos. (#5675)\n* Don't use masked array in array interface. (#5730)\n* Update affiliation of @terrytangyuan: Ant Financial -> Ant Group (#5827)\n* Move dask tutorial closer other distributed tutorials (#5613)\n* Update XGBoost + Dask overview documentation (#5961)\n* Show `n_estimators` in the docstring of the scikit-learn interface (#6041)\n* Fix a type in a doctring of the scikit-learn interface (#5980)\n\n### Maintenance: testing, continuous integration, build system\n* [CI] Remove CUDA 9.0 from CI (#5674, #5745)\n* Require CUDA 10.0+ in CMake build (#5718)\n* [R] Remove dependency on gendef for Visual Studio builds (fixes #5608) (#5764). This enables building XGBoost with GPU support with R 4.x.\n* [R-package] Reduce duplication in configure.ac (#5693)\n* Bump com.esotericsoftware to 4.0.2 (#5690)\n* Migrate some tests from AppVeyor to GitHub Actions to speed up the tests. (#5911, #5917, #5919, #5922, #5928)\n* Reduce cost of the Jenkins CI server (#5884, #5904, #5892). We now enforce a daily budget via an automated monitor. We also dramatically reduced the workload for the Windows platform, since the cloud VM cost is vastly greater for Windows.\n* [R] Set up automated R linter (#5944)\n* [R] replace uses of T and F with TRUE and FALSE (#5778)\n* Update Docker container 'CPU' (#5956)\n* Simplify CMake build with modern CMake techniques (#5871)\n* Use `hypothesis` package for testing (#5759, #5835, #5849).\n* Define `_CRT_SECURE_NO_WARNINGS` to remove unneeded warnings in MSVC (#5434)\n* Run all Python demos in CI, to ensure that they don't break (#5651)\n* Enhance nvtx support (#5636). Now we can use unified timer between CPU and GPU. Also CMake is able to find nvtx automatically.\n* Speed up python test. (#5752)\n* Add helper for generating batches of data. (#5756)\n* Add c-api-demo to .gitignore (#5855)\n* Add option to enable all compiler warnings in GCC/Clang (#5897)\n* Make Python model compatibility test runnable locally (#5941)\n* Add cupy to Windows CI (#5797)\n* [CI] Fix cuDF install; merge 'gpu' and 'cudf' test suite (#5814)\n* Update rabit submodule (#5680, #5876)\n* Force colored output for Ninja build. (#5959)\n* [CI] Assign larger /dev/shm to NCCL (#5966)\n* Add missing Pytest marks to AsyncIO unit test (#5968)\n* [CI] Use latest cuDF and dask-cudf (#6048)\n* Add CMake flag to log C API invocations, to aid debugging (#5925)\n* Fix a unit test on CLI, to handle RC versions (#6050)\n* [CI] Use mgpu machine to run gpu hist unit tests (#6050)\n* [CI] Build GPU-enabled JAR artifact and deploy to xgboost-maven-repo (#6050)\n\n### Maintenance: Refactor code for legibility and maintainability\n* Remove dead code in DMatrix initialization. (#5635)\n* Catch dmlc error by ref. (#5678)\n* Refactor the `gpu_hist` split evaluation in preparation for batched nodes enumeration. (#5610)\n* Remove column major specialization. (#5755)\n* Remove unused imports in Python (#5776)\n* Avoid including `c_api.h` in header files. (#5782)\n* Remove unweighted GK quantile, which is unused. (#5816)\n* Add Python binding for rabit ops. (#5743)\n* Implement `Empty` method for host device vector. (#5781)\n* Remove print (#5867)\n* Enforce tree order in JSON (#5974)\n\n### Acknowledgement\n**Contributors**: Nan Zhu (@CodingCat), @LionOrCatThatIsTheQuestion, Dmitry Mottl (@Mottl), Rory Mitchell (@RAMitchell), @ShvetsKS, Alex Wozniakowski (@a-wozniakowski), Alexander Gugel (@alexanderGugel), @anttisaukko, @boxdot, Andy Adinets (@canonizer), Ram Rachum (@cool-RR), Elliot Hershberg (@elliothershberg), Jason E. Aten, Ph.D. (@glycerine), Philip Hyunsu Cho (@hcho3), @jameskrach, James Lamb (@jameslamb), James Bourbeau (@jrbourbeau), Peter Jung (@kongzii), Lorenz Walthert (@lorenzwalthert), Oleksandr Kuvshynov (@okuvshynov), Rong Ou (@rongou), Shaochen Shi (@shishaochen), Yuan Tang (@terrytangyuan), Jiaming Yuan (@trivialfis), Bobby Wang (@wbo4958), Zhang Zhang (@zhangzhang10)\n\n**Reviewers**: Nan Zhu (@CodingCat), @LionOrCatThatIsTheQuestion, Hao Yang (@QuantHao), Rory Mitchell (@RAMitchell), @ShvetsKS, Egor Smirnov (@SmirnovEgorRu), Alex Wozniakowski (@a-wozniakowski), Amit Kumar (@aktech), Avinash Barnwal (@avinashbarnwal), @boxdot, Andy Adinets (@canonizer), Chandra Shekhar Reddy (@chandrureddy), Ram Rachum (@cool-RR), Cristiano Goncalves (@cristianogoncalves), Elliot Hershberg (@elliothershberg), Jason E. Aten, Ph.D. (@glycerine), Philip Hyunsu Cho (@hcho3), Tong He (@hetong007), James Lamb (@jameslamb), James Bourbeau (@jrbourbeau), Lee Drake (@leedrake5), DougM (@mengdong), Oleksandr Kuvshynov (@okuvshynov), RongOu (@rongou), Shaochen Shi (@shishaochen), Xu Xiao (@sperlingxx), Yuan Tang (@terrytangyuan), Theodore Vasiloudis (@thvasilo), Jiaming Yuan (@trivialfis), Bobby Wang (@wbo4958), Zhang Zhang (@zhangzhang10)\n\n## v1.1.1 (2020.06.06)\nThis patch release applies the following patches to 1.1.0 release:\n\n* CPU performance improvement in the PyPI wheels (#5720)\n* Fix loading old model (#5724)\n* Install pkg-config file (#5744)\n\n## v1.1.0 (2020.05.17)\n\n### Better performance on multi-core CPUs (#5244, #5334, #5522)\n* Poor performance scaling of the `hist` algorithm for multi-core CPUs has been under investigation (#3810). #5244 concludes the ongoing effort to improve performance scaling on multi-CPUs, in particular Intel CPUs. Roadmap: #5104\n* #5334 makes steps toward reducing memory consumption for the `hist` tree method on CPU.\n* #5522 optimizes random number generation for data sampling.\n\n### Deterministic GPU algorithm for regression and classification (#5361)\n* GPU algorithm for regression and classification tasks is now deterministic.\n* Roadmap: #5023. Currently only single-GPU training is deterministic. Distributed training with multiple GPUs is not yet deterministic.\n\n### Improve external memory support on GPUs (#5093, #5365)\n* Starting from 1.0.0 release, we added support for external memory on GPUs to enable training with larger datasets. Gradient-based sampling (#5093) speeds up the external memory algorithm by intelligently sampling a subset of the training data to copy into the GPU memory. [Learn more about out-of-core GPU gradient boosting.](https://arxiv.org/abs/2005.09148)\n* GPU-side data sketching now works with data from external memory (#5365).\n\n### Parameter validation: detection of unused or incorrect parameters (#5477, #5569, #5508)\n* Mis-spelled training parameter is a common user mistake. In previous versions of XGBoost, mis-spelled parameters were silently ignored. Starting with 1.0.0 release, XGBoost will produce a warning message if there is any unused training parameters. The 1.1.0 release makes parameter validation available to the scikit-learn interface (#5477) and the R binding (#5569).\n\n### Thread-safe, in-place prediction method (#5389, #5512)\n* Previously, the prediction method was not thread-safe (#5339). This release adds a new API function `inplace_predict()` that is thread-safe. It is now possible to serve concurrent requests for prediction using a shared model object.\n* It is now possible to compute prediction in-place for selected data formats (`numpy.ndarray` / `scipy.sparse.csr_matrix` / `cupy.ndarray` / `cudf.DataFrame` / `pd.DataFrame`) without creating a `DMatrix` object.\n\n### Addition of Accelerated Failure Time objective for survival analysis (#4763, #5473, #5486, #5552, #5553)\n* Survival analysis (regression) models the time it takes for an event of interest to occur. The target label is potentially censored, i.e. the label is a range rather than a single number. We added a new objective `survival:aft` to support survival analysis. Also added is the new API to specify the ranged labels. Check out [the tutorial](https://xgboost.readthedocs.io/en/release_1.1.0/tutorials/aft_survival_analysis.html) and the [demos](https://github.com/dmlc/xgboost/tree/release_1.1.0/demo/aft_survival).\n* GPU support is work in progress (#5714).\n\n### Improved installation experience on Mac OSX (#5597, #5602, #5606, #5701)\n* It only takes two commands to install the XGBoost Python package: `brew install libomp` followed by `pip install xgboost`. The installed XGBoost will use all CPU cores. Even better, starting with this release, we distribute pre-compiled binary wheels targeting Mac OSX. Now the install command `pip install xgboost` finishes instantly, as it no longer compiles the C++ source of XGBoost. The last three Mac versions (High Sierra, Mojave, Catalina) are supported.\n* R package: the 1.1.0 release fixes the error `Initializing libomp.dylib, but found libomp.dylib already initialized` (#5701)\n\n### Ranking metrics are now accelerated on GPUs (#5380, #5387, #5398)\n\n### GPU-side data matrix to ingest data directly from other GPU libraries (#5420, #5465)\n* Previously, data on GPU memory had to be copied back to the main memory before it could be used by XGBoost. Starting with 1.1.0 release, XGBoost provides a dedicated interface (`DeviceQuantileDMatrix`) so that it can ingest data from GPU memory directly. The result is that XGBoost interoperates better with GPU-accelerated data science libraries, such as cuDF, cuPy, and PyTorch.\n* Set device in device dmatrix. (#5596)\n\n### Robust model serialization with JSON (#5123, #5217)\n* We continue efforts from the 1.0.0 release to adopt JSON as the format to save and load models robustly. Refer to the release note for 1.0.0 to learn more.\n* It is now possible to store internal configuration of the trained model (`Booster`) object in R as a JSON string (#5123, #5217).\n\n### Improved integration with Dask\n* Pass through `verbose` parameter for dask fit (#5413)\n* Use `DMLC_TASK_ID`. (#5415)\n* Order the prediction result. (#5416)\n* Honor `nthreads` from dask worker. (#5414)\n* Enable grid searching with scikit-learn. (#5417)\n* Check non-equal when setting threads. (#5421)\n* Accept other inputs for prediction. (#5428)\n* Fix missing value for scikit-learn interface. (#5435)\n\n### XGBoost4J-Spark: Check number of columns in the data iterator (#5202, #5303)\n* Before, the native layer in XGBoost did not know the number of columns (features) ahead of time and had to guess the number of columns by counting the feature index when ingesting data. This method has a failure more in distributed setting: if the training data is highly sparse, some features may be completely missing in one or more worker partitions. Thus, one or more workers may deduce an incorrect data shape, leading to crashes or silently wrong models.\n* Enforce correct data shape by passing the number of columns explicitly from the JVM layer into the native layer.\n\n### Major refactoring of the `DMatrix` class\n* Continued from 1.0.0 release.\n* Remove update prediction cache from predictors. (#5312)\n* Predict on Ellpack. (#5327)\n* Partial rewrite EllpackPage (#5352)\n* Use ellpack for prediction only when sparsepage doesn't exist. (#5504)\n* RFC: #4354, Roadmap: #5143\n\n### Breaking: XGBoost Python package now requires Pip 19.0 and higher (#5589)\n* Your Linux machine may have an old version of Pip and may attempt to install a source package, leading to long installation time. This is because we are now using `manylinux2010` tag in the binary wheel release. Ensure you have Pip 19.0 or newer by running `python3 -m pip -V` to check the version. Upgrade Pip with command\n```\npython3 -m pip install --upgrade pip\n```\nUpgrading to latest pip allows us to depend on newer versions of system libraries. [TensorFlow](https://www.tensorflow.org/install/pip) also requires Pip 19.0+.\n\n### Breaking: GPU algorithm now requires CUDA 10.0 and higher (#5649)\n* CUDA 10.0 is necessary to make the GPU algorithm deterministic (#5361).\n\n### Breaking: `silent` parameter is now removed (#5476)\n* Please use `verbosity` instead.\n\n### Breaking: Set `output_margin` to True for custom objectives (#5564)\n* Now both R and Python interface custom objectives get un-transformed (raw) prediction outputs.\n\n### Breaking: `Makefile` is now removed. We use CMake exclusively to build XGBoost (#5513)\n* Exception: the R package uses Autotools, as the CRAN ecosystem did not yet adopt CMake widely.\n\n### Breaking: `distcol` updater is now removed (#5507)\n* The `distcol` updater has been long broken, and currently we lack resources to implement a working implementation from scratch.\n\n### Deprecation notices\n* **Python 3.5**. This release is the last release to support Python 3.5. The following release (1.2.0) will require Python 3.6.\n* **Scala 2.11**. Currently XGBoost4J supports Scala 2.11. However, if a future release of XGBoost adopts Spark 3, it will not support Scala 2.11, as Spark 3 requires Scala 2.12+. We do not yet know which XGBoost release will adopt Spark 3.\n\n### Known limitations\n* (Python package) When early stopping is activated with `early_stopping_rounds` at training time, the prediction method (`xgb.predict()`) behaves in a surprising way. If XGBoost runs for M rounds and chooses iteration N (N < M) as the best iteration, then the prediction method will use M trees by default. To use the best iteration (N trees), users will need to manually take the best iteration field `bst.best_iteration` and pass it as the `ntree_limit` argument to `xgb.predict()`. See #5209 and #4052 for additional context.\n* GPU ranking objective is currently not deterministic (#5561).\n* When training parameter `reg_lambda` is set to zero, some leaf nodes may be assigned a NaN value. (See [discussion](https://discuss.xgboost.ai/t/still-getting-unexplained-nans-new-replication-code/1383/9).) For now, please set `reg_lambda` to a nonzero value.\n\n### Community and Governance\n* The XGBoost Project Management Committee (PMC) is pleased to announce a new committer: Egor Smirnov (@SmirnovEgorRu). He has led a major initiative to improve the performance of XGBoost on multi-core CPUs.\n\n### Bug-fixes\n* Improved compatibility with scikit-learn (#5255, #5505, #5538)\n* Remove f-string, since it's not supported by Python 3.5 (#5330). Note that Python 3.5 support is deprecated and schedule to be dropped in the upcoming release (1.2.0).\n* Fix the pruner so that it doesn't prune the same branch twice (#5335)\n* Enforce only major version in JSON model schema (#5336). Any major revision of the model schema would bump up the major version.\n* Fix a small typo in sklearn.py that broke multiple eval metrics (#5341)\n* Restore loading model from a memory buffer (#5360)\n* Define lazy isinstance for Python compat (#5364)\n* [R] fixed uses of `class()` (#5426)\n* Force compressed buffer to be 4 bytes aligned, to keep cuda-memcheck happy (#5441)\n* Remove warning for calling host function (`std::max`) on a GPU device (#5453)\n* Fix uninitialized value bug in xgboost callback (#5463)\n* Fix model dump in CLI (#5485)\n* Fix out-of-bound array access in `WQSummary::SetPrune()` (#5493)\n* Ensure that configured `dmlc/build_config.h` is picked up by Rabit and XGBoost, to fix build on Alpine (#5514)\n* Fix a misspelled method, made in a git merge (#5509)\n* Fix a bug in binary model serialization (#5532)\n* Fix CLI model IO (#5535)\n* Don't use `uint` for threads (#5542)\n* Fix R interaction constraints to handle more than 100000 features (#5543)\n* [jvm-packages] XGBoost Spark should deal with NaN when parsing evaluation output (#5546)\n* GPU-side data sketching is now aware of query groups in learning-to-rank data (#5551)\n* Fix DMatrix slicing for newly added fields (#5552)\n* Fix configuration status with loading binary model (#5562)\n* Fix build when OpenMP is disabled (#5566)\n* R compatibility patches (#5577, #5600)\n* gpu\\_hist performance fixes (#5558)\n* Don't set seed on CLI interface (#5563)\n* [R] When serializing model, preserve model attributes related to early stopping (#5573)\n* Avoid rabit calls in learner configuration (#5581)\n* Hide C++ symbols in libxgboost.so when building Python wheel (#5590). This fixes apache/incubator-tvm#4953.\n* Fix compilation on Mac OSX High Sierra (10.13) (#5597)\n* Fix build on big endian CPUs (#5617)\n* Resolve crash due to use of `vector<bool>::iterator` (#5642)\n* Validation JSON model dump using JSON schema (#5660)\n\n### Performance improvements\n* Wide dataset quantile performance improvement (#5306)\n* Reduce memory usage of GPU-side data sketching (#5407)\n* Reduce span check overhead (#5464)\n* Serialise booster after training to free up GPU memory (#5484)\n* Use the maximum amount of GPU shared memory available to speed up the histogram kernel (#5491)\n* Use non-synchronising scan in Thrust (#5560)\n* Use `cudaDeviceGetAttribute()` instead of `cudaGetDeviceProperties()` for speed (#5570)\n\n### API changes\n* Support importing data from a Pandas SparseArray (#5431)\n* `HostDeviceVector` (vector shared between CPU and GPU memory) now exposes `HostSpan` interface, to enable access on the CPU side with bound check (#5459)\n* Accept other gradient types for `SplitEntry` (#5467)\n\n### Usability Improvements, Documentation\n* Add `JVM_CHECK_CALL` to prevent C++ exceptions from leaking into the JVM layer (#5199)\n* Updated Windows build docs (#5283)\n* Update affiliation of @hcho3 (#5292)\n* Display Sponsor button, link to OpenCollective (#5325)\n* Update docs for GPU external memory (#5332)\n* Add link to GPU documentation (#5437)\n* Small updates to GPU documentation (#5483)\n* Edits on tutorial for XGBoost job on Kubernetes (#5487)\n* Add reference to GPU external memory (#5490)\n* Fix typos (#5346, #5371, #5384, #5399, #5482, #5515)\n* Update Python doc (#5517)\n* Add Neptune and Optuna to list of examples (#5528)\n* Raise error if the number of data weights doesn't match the number of data sets (#5540)\n* Add a note about GPU ranking (#5572)\n* Clarify meaning of `training` parameter in the C API function `XGBoosterPredict()` (#5604)\n* Better error handling for situations where existing trees cannot be modified (#5406, #5418). This feature is enabled when `process_type` is set to `update`.\n\n### Maintenance: testing, continuous integration, build system\n* Add C++ test coverage for data sketching (#5251)\n* Ignore gdb\\_history (#5257)\n* Rewrite setup.py. (#5271, #5280)\n* Use `scikit-learn` in extra dependencies (#5310)\n* Add CMake option to build static library (#5397)\n* [R] changed FindLibR to take advantage of CMake cache (#5427)\n* [R] fixed inconsistency in R -e calls in FindLibR.cmake (#5438)\n* Refactor tests with data generator (#5439)\n* Resolve failing Travis CI (#5445)\n* Update dmlc-core. (#5466)\n* [CI] Use clang-tidy 10 (#5469)\n* De-duplicate code for checking maximum number of nodes (#5497)\n* [CI] Use Ubuntu 18.04 LTS in JVM CI, because 19.04 is EOL (#5537)\n* [jvm-packages] [CI] Create a Maven repository to host SNAPSHOT JARs (#5533)\n* [jvm-packages] [CI] Publish XGBoost4J JARs with Scala 2.11 and 2.12 (#5539)\n* [CI] Use Vault repository to re-gain access to devtoolset-4 (#5589)\n\n### Maintenance: Refactor code for legibility and maintainability\n* Move prediction cache to Learner (#5220, #5302)\n* Remove SimpleCSRSource (#5315)\n* Refactor SparsePageSource, delete cache files after use (#5321)\n* Remove unnecessary DMatrix methods (#5324)\n* Split up `LearnerImpl` (#5350)\n* Move segment sorter to common (#5378)\n* Move thread local entry into Learner (#5396)\n* Split up test helpers header (#5455)\n* Requires setting leaf stat when expanding tree (#5501)\n* Purge device\\_helpers.cuh (#5534)\n* Use thrust functions instead of custom functions (#5544)\n\n### Acknowledgement\n**Contributors**: Nan Zhu (@CodingCat), Rory Mitchell (@RAMitchell), @ShvetsKS, Egor Smirnov (@SmirnovEgorRu), Andrew Kane (@ankane), Avinash Barnwal (@avinashbarnwal), Bart Broere (@bartbroere), Andy Adinets (@canonizer), Chen Qin (@chenqin), Daiki Katsuragawa (@daikikatsuragawa), David Díaz Vico (@daviddiazvico), Darius Kharazi (@dkharazi), Darby Payne (@dpayne), Jason E. Aten, Ph.D. (@glycerine), Philip Hyunsu Cho (@hcho3), James Lamb (@jameslamb), Jan Borchmann (@jborchma), Kamil A. Kaczmarek (@kamil-kaczmarek), Melissa Kohl (@mjkohl32), Nicolas Scozzaro (@nscozzaro), Paul Kaefer (@paulkaefer), Rong Ou (@rongou), Samrat Pandiri (@samratp), Sriram Chandramouli (@sriramch), Yuan Tang (@terrytangyuan), Jiaming Yuan (@trivialfis), Liang-Chi Hsieh (@viirya), Bobby Wang (@wbo4958), Zhang Zhang (@zhangzhang10),\n\n**Reviewers**: Nan Zhu (@CodingCat), @LeZhengThu, Rory Mitchell (@RAMitchell), @ShvetsKS, Egor Smirnov (@SmirnovEgorRu), Steve Bronder (@SteveBronder), Nikita Titov (@StrikerRUS), Andrew Kane (@ankane), Avinash Barnwal (@avinashbarnwal), @brydag, Andy Adinets (@canonizer), Chandra Shekhar Reddy (@chandrureddy), Chen Qin (@chenqin), Codecov (@codecov-io), David Díaz Vico (@daviddiazvico), Darby Payne (@dpayne), Jason E. Aten, Ph.D. (@glycerine), Philip Hyunsu Cho (@hcho3), James Lamb (@jameslamb), @johnny-cat, Mu Li (@mli), Mate Soos (@msoos), @rnyak, Rong Ou (@rongou), Sriram Chandramouli (@sriramch), Toby Dylan Hocking (@tdhock), Yuan Tang (@terrytangyuan), Oleksandr Pryimak (@trams), Jiaming Yuan (@trivialfis), Liang-Chi Hsieh (@viirya), Bobby Wang (@wbo4958),\n\n## v1.0.2 (2020.03.03)\nThis patch release applies the following patches to 1.0.0 release:\n\n* Fix a small typo in sklearn.py that broke multiple eval metrics (#5341)\n* Restore loading model from buffer (#5360)\n* Use type name for data type check (#5364)\n\n## v1.0.1 (2020.02.21)\nThis release is identical to the 1.0.0 release, except that it fixes a small bug that rendered 1.0.0 incompatible with Python 3.5. See #5328.\n\n## v1.0.0 (2020.02.19)\nThis release marks a major milestone for the XGBoost project.\n\n### Apache-style governance, contribution policy, and semantic versioning (#4646, #4659)\n* Starting with 1.0.0 release, the XGBoost Project is adopting Apache-style governance. The full community guideline is [available in the doc website](https://xgboost.readthedocs.io/en/release_1.0.0/contrib/community.html). Note that we now have Project Management Committee (PMC) who would steward the project on the long-term basis. The PMC is also entrusted to run and fund the project's continuous integration (CI) infrastructure (https://xgboost-ci.net).\n* We also adopt the [semantic versioning](https://semver.org/). See [our release versioning policy](https://xgboost.readthedocs.io/en/release_1.0.0/contrib/release.html).\n\n### Better performance scaling for multi-core CPUs (#4502, #4529, #4716, #4851, #5008, #5107, #5138, #5156)\n* Poor performance scaling of the `hist` algorithm for multi-core CPUs has been under investigation (#3810). Previous effort #4529 was replaced with a series of pull requests (#5107, #5138, #5156) aimed at achieving the same performance benefits while keeping the C++ codebase legible. The latest performance benchmark results show [up to 5x speedup on Intel CPUs with many cores](https://github.com/dmlc/xgboost/pull/5156#issuecomment-580024413). Note: #5244, which concludes the effort, will become part of the upcoming release 1.1.0.\n\n### Improved installation experience on Mac OSX (#4672, #5074, #5080, #5146, #5240)\n* It used to be quite complicated to install XGBoost on Mac OSX. XGBoost uses OpenMP to distribute work among multiple CPU cores, and Mac's default C++ compiler (Apple Clang) does not come with OpenMP. Existing work-around (using another C++ compiler) was complex and prone to fail with cryptic diagnosis (#4933, #4949, #4969).\n* Now it only takes two commands to install XGBoost: `brew install libomp` followed by `pip install xgboost`. The installed XGBoost will use all CPU cores.\n* Even better, XGBoost is now available from Homebrew: `brew install xgboost`. See Homebrew/homebrew-core#50467.\n* Previously, if you installed the XGBoost R package using the command `install.packages('xgboost')`, it could only use a single CPU core and you would experience slow training performance. With 1.0.0 release, the R package will use all CPU cores out of box.\n\n### Distributed XGBoost now available on Kubernetes (#4621, #4939)\n* Check out the [tutorial for setting up distributed XGBoost on a Kubernetes cluster](https://xgboost.readthedocs.io/en/release_1.0.0/tutorials/kubernetes.html).\n\n### Ruby binding for XGBoost (#4856)\n\n### New Native Dask interface for multi-GPU and multi-node scaling (#4473, #4507, #4617, #4819, #4907, #4914, #4941, #4942, #4951, #4973, #5048, #5077, #5144, #5270)\n* XGBoost now integrates seamlessly with [Dask](https://dask.org/), a lightweight distributed framework for data processing. Together with the first-class support for cuDF data frames (see below), it is now easier than ever to create end-to-end data pipeline running on one or more NVIDIA GPUs.\n* Multi-GPU training with Dask is now up to 20% faster than the previous release (#4914, #4951).\n\n### First-class support for cuDF data frames and cuPy arrays (#4737, #4745, #4794, #4850, #4891, #4902, #4918, #4927, #4928, #5053, #5189, #5194, #5206, #5219, #5225)\n* [cuDF](https://github.com/rapidsai/cudf) is a data frame library for loading and processing tabular data on NVIDIA GPUs. It provides a Pandas-like API.\n* [cuPy](https://github.com/cupy/cupy) implements a NumPy-compatible multi-dimensional array on NVIDIA GPUs.\n* Now users can keep the data on the GPU memory throughout the end-to-end data pipeline, obviating the need for copying data between the main memory and GPU memory.\n* XGBoost can accept any data structure that exposes `__array_interface__` signature, opening way to support other columar formats that are compatible with Apache Arrow.\n\n### [Feature interaction constraint](https://xgboost.readthedocs.io/en/release_1.0.0/tutorials/feature_interaction_constraint.html) is now available with `approx` and `gpu_hist` algorithms (#4534, #4587, #4596, #5034).\n\n### Learning to rank is now GPU accelerated (#4873, #5004, #5129)\n* Supported ranking objectives: NDGC, Map, Pairwise.\n* [Up to 2x improved training performance on GPUs](https://devblogs.nvidia.com/learning-to-rank-with-xgboost-and-gpu/).\n\n### Enable `gamma` parameter for GPU training (#4874, #4953)\n* The `gamma` parameter specifies the minimum loss reduction required to add a new split in a tree. A larger value for `gamma` has the effect of pre-pruning the tree, by making harder to add splits.\n\n### External memory for GPU training (#4486, #4526, #4747, #4833, #4879, #5014)\n* It is now possible to use NVIDIA GPUs even when the size of training data exceeds the available GPU memory. Note that the external memory support for GPU is still experimental. #5093 will further improve performance and will become part of the upcoming release 1.1.0.\n* RFC for enabling external memory with GPU algorithms: #4357\n\n### Improve Scikit-Learn interface (#4558, #4842, #4929, #5049, #5151, #5130, #5227)\n* Many users of XGBoost enjoy the convenience and breadth of Scikit-Learn ecosystem. In this release, we revise the Scikit-Learn API of XGBoost (`XGBRegressor`, `XGBClassifier`, and `XGBRanker`) to achieve feature parity with the traditional XGBoost interface (`xgboost.train()`).\n* Insert check to validate data shapes.\n* Produce an error message if `eval_set` is not a tuple. An error message is better than silently crashing.\n* Allow using `numpy.RandomState` object.\n* Add `n_jobs` as an alias of `nthread`.\n* Roadmap: #5152\n\n### XGBoost4J-Spark: Redesigning checkpointing mechanism\n* RFC is available at #4786\n* Clean up checkpoint file after a successful training job (#4754): The current implementation in XGBoost4J-Spark does not clean up the checkpoint file after a successful training job. If the user runs another job with the same checkpointing directory, she will get a wrong model because the second job will re-use the checkpoint file left over from the first job. To prevent this scenario, we propose to always clean up the checkpoint file after every successful training job.\n* Avoid Multiple Jobs for Checkpointing (#5082): The current method for checkpoint is to collect the booster produced at the last iteration of each checkpoint internal to Driver and persist it in HDFS. The major issue with this approach is that it needs to re-perform the data preparation for training if the user did not choose to cache the training dataset. To avoid re-performing data prep, we build external-memory checkpointing in the XGBoost4J layer as well.\n* Enable deterministic repartitioning when checkpoint is enabled (#4807): Distributed algorithm for gradient boosting assumes a fixed partition of the training data between multiple iterations. In previous versions, there was no guarantee that data partition would stay the same, especially when a worker goes down and some data had to recovered from previous checkpoint. In this release, we make data partition deterministic by using the data hash value of each data row in computing the partition.\n\n### XGBoost4J-Spark: handle errors thrown by the native code (#4560)\n* All core logic of XGBoost is written in C++, so XGBoost4J-Spark internally uses the C++ code via Java Native Interface (JNI). #4560 adds a proper error handling for any errors or exceptions arising from the C++ code, so that the XGBoost Spark application can be torn down in an orderly fashion.\n\n### XGBoost4J-Spark: Refine method to count the number of alive cores  (#4858)\n* The `SparkParallelismTracker` class ensures that sufficient number of executor cores are alive. To that end, it is important to query the number of alive cores reliably.\n\n### XGBoost4J: Add `BigDenseMatrix` to store more than `Integer.MAX_VALUE` elements (#4383)\n\n### Robust model serialization with JSON (#4632, #4708, #4739, #4868, #4936, #4945, #4974, #5086, #5087, #5089, #5091, #5094, #5110, #5111, #5112, #5120, #5137, #5218, #5222, #5236, #5245, #5248, #5281)\n* In this release, we introduce an experimental support of using [JSON](https://www.json.org/json-en.html) for serializing (saving/loading) XGBoost models and related hyperparameters for training. We would like to eventually replace the old binary format with JSON, since it is an open format and parsers are available in many programming languages and platforms. See [the documentation for model I/O using JSON](https://xgboost.readthedocs.io/en/release_1.0.0/tutorials/saving_model.html). #3980 explains why JSON was chosen over other alternatives.\n* To maximize interoperability and compatibility of the serialized models, we now split serialization into two parts (#4855):\n  1. Model, e.g. decision trees and strictly related metadata like `num_features`.\n  2. Internal configuration, consisting of training parameters and other configurable parameters. For example, `max_delta_step`, `tree_method`, `objective`, `predictor`, `gpu_id`.\n\n  Previously, users often ran into issues where the model file produced by one machine could not load or run on another machine. For example, models trained using a machine with an NVIDIA GPU could not run on another machine without a GPU (#5291, #5234). The reason is that the old binary format saved some internal configuration that were not universally applicable to all machines, e.g. `predictor='gpu_predictor'`.\n\n  Now, model saving function (`Booster.save_model()` in Python) will save only the model, without internal configuration. This will guarantee that your model file would be used anywhere. Internal configuration will be serialized in limited circumstances such as:\n  * Multiple nodes in a distributed system exchange model details over the network.\n  * Model checkpointing, to recover from possible crashes.\n\n  This work proved to be useful for parameter validation as well (see below).\n* Starting with 1.0.0 release, we will use semantic versioning to indicate whether the model produced by one version of XGBoost would be compatible with another version of XGBoost. Any change in the major version indicates a breaking change in the serialization format.\n* We now provide a robust method to save and load scikit-learn related attributes (#5245). Previously, we used Python pickle to save Python attributes related to `XGBClassifier`, `XGBRegressor`, and `XGBRanker` objects. The attributes are necessary to properly interact with scikit-learn. See #4639 for more details. The use of pickling hampered interoperability, as a pickle from one machine may not necessarily work on another machine. Starting with this release, we use an alternative method to serialize the scikit-learn related attributes. The use of Python pickle is now discouraged (#5236, #5281).\n\n### Parameter validation: detection of unused or incorrect parameters (#4553, #4577, #4738, #4801, #4961, #5101, #5157, #5167, #5256)\n* Mis-spelled training parameter is a common user mistake. In previous versions of XGBoost, mis-spelled parameters were silently ignored. Starting with 1.0.0 release, XGBoost will produce a warning message if there is any unused training parameters. Currently, parameter validation is available to R users and Python XGBoost API users. We are working to extend its support to scikit-learn users.\n* Configuration steps now have well-defined semantics (#4542, #4738), so we know exactly where and how the internal configurable parameters are changed.\n* The user can now use `save_config()` function to inspect all (used) training parameters. This is helpful for debugging model performance.\n\n### Allow individual workers to recover from faults (#4808, #4966)\n* Status quo: if a worker fails, all workers are shut down and restarted, and learning resumes from the last checkpoint. This involves requesting resources from the scheduler (e.g. Spark) and shuffling all the data again from scratch. Both of these operations can be quite costly and block training for extended periods of time, especially if the training data is big and the number of worker nodes is in the hundreds.\n* The proposed solution is to recover the single node that failed, instead of shutting down all workers. The rest of the clusters wait until the single failed worker is bootstrapped and catches up with the rest.\n* See roadmap at #4753. Note that this is work in progress. In particular, the feature is not yet available from XGBoost4J-Spark.\n\n### Accurate prediction for DART models\n* Use DART tree weights when computing SHAPs (#5050)\n* Don't drop trees during DART prediction by default (#5115)\n* Fix DART prediction in R (#5204)\n\n### Make external memory more robust\n* Fix issues with training with external memory on cpu (#4487)\n* Fix crash with approx tree method on cpu (#4510)\n* Fix external memory race in `exact` (#4980). Note: `dmlc::ThreadedIter` is not actually thread-safe. We would like to re-design it in the long term.\n\n### Major refactoring of the `DMatrix` class (#4686, #4744, #4748, #5044, #5092, #5108, #5188, #5198)\n* Goal 1: improve performance and reduce memory consumption. Right now, if the user trains a model with a NumPy array as training data, the array gets copies 2-3 times before training begins. We'd like to reduce duplication of the data matrix.\n* Goal 2: Expose a common interface to external data, unify the way DMatrix objects are constructed and simplify the process of adding new external data sources. This work is essential for ingesting cuPy arrays.\n* Goal 3: Handle missing values consistently.\n* RFC: #4354, Roadmap: #5143\n* This work is also relevant to external memory support on GPUs.\n\n### Breaking: XGBoost Python package now requires Python 3.5 or newer (#5021, #5274)\n* Python 3.4 has reached its end-of-life on March 16, 2019, so we now require Python 3.5 or newer.\n\n### Breaking: GPU algorithm now requires CUDA 9.0 and higher (#4527, #4580)\n\n### Breaking: `n_gpus` parameter removed; multi-GPU training now requires a distributed framework (#4579, #4749, #4773, #4810, #4867, #4908)\n* #4531 proposed removing support for single-process multi-GPU training. Contributors would focus on multi-GPU support through distributed frameworks such as Dask and Spark, where the framework would be expected to assign a worker process for each GPU independently. By delegating GPU management and data movement to the distributed framework, we can greatly simplify the core XGBoost codebase, make multi-GPU training more robust, and reduce burden for future development.\n\n### Breaking: Some deprecated features have been removed\n* ``gpu_exact`` training method (#4527, #4742, #4777). Use ``gpu_hist`` instead.\n* ``learning_rates`` parameter in Python (#5155). Use the callback API instead.\n* ``num_roots`` (#5059, #5165), since the current training code always uses a single root node.\n* GPU-specific objectives (#4690), such as `gpu:reg:linear`. Use objectives without `gpu:` prefix; GPU will be used automatically if your machine has one.\n\n### Breaking: the C API function `XGBoosterPredict()` now asks for an extra parameter `training`.\n\n### Breaking: We now use CMake exclusively to build XGBoost. `Makefile` is being sunset.\n* Exception: the R package uses Autotools, as the CRAN ecosystem did not yet adopt CMake widely.\n\n### Performance improvements\n* Smarter choice of histogram construction for distributed `gpu_hist` (#4519)\n* Optimizations for quantization on device (#4572)\n* Introduce caching memory allocator to avoid latency associated with GPU memory allocation (#4554, #4615)\n* Optimize the initialization stage of the CPU `hist` algorithm for sparse datasets (#4625)\n* Prevent unnecessary data copies from GPU memory to the host (#4795)\n* Improve operation efficiency for single prediction (#5016)\n* Group builder modified for incremental building, to speed up building large `DMatrix` (#5098)\n\n### Bug-fixes\n* Eliminate `FutureWarning: Series.base is deprecated` (#4337)\n* Ensure pandas DataFrame column names are treated as strings in type error message (#4481)\n* [jvm-packages] Add back `reg:linear` for scala, as it is only deprecated and not meant to be removed yet (#4490)\n* Fix library loading for Cygwin users (#4499)\n* Fix prediction from loaded pickle (#4516)\n* Enforce exclusion between `pred_interactions=True` and `pred_interactions=True` (#4522)\n* Do not return dangling reference to local `std::string` (#4543)\n* Set the appropriate device before freeing device memory (#4566)\n* Mark `SparsePageDmatrix` destructor default. (#4568)\n* Choose the appropriate tree method only when the tree method is 'auto' (#4571)\n* Fix `benchmark_tree.py` (#4593)\n* [jvm-packages] Fix silly bug in feature scoring (#4604)\n* Fix GPU predictor when the test data matrix has different number of features than the training data matrix used to train the model (#4613)\n* Fix external memory for get column batches. (#4622)\n* [R] Use built-in label when xgb.DMatrix is given to xgb.cv() (#4631)\n* Fix early stopping in the Python package (#4638)\n* Fix AUC error in distributed mode caused by imbalanced dataset (#4645, #4798)\n* [jvm-packages] Expose `setMissing` method in `XGBoostClassificationModel` / `XGBoostRegressionModel` (#4643)\n* Remove initializing stringstream reference. (#4788)\n* [R] `xgb.get.handle` now checks all class listed of `object` (#4800)\n* Do not use `gpu_predictor` unless data comes from GPU (#4836)\n* Fix data loading (#4862)\n* Workaround `isnan` across different environments. (#4883)\n* [jvm-packages] Handle Long-type parameter (#4885)\n* Don't `set_params` at the end of `set_state` (#4947). Ensure that the model does not change after pickling and unpickling multiple times.\n* C++ exceptions should not crash OpenMP loops (#4960)\n* Fix `usegpu` flag in DART. (#4984)\n* Run training with empty `DMatrix` (#4990, #5159)\n* Ensure that no two processes can use the same GPU (#4990)\n* Fix repeated split and 0 cover nodes (#5010)\n* Reset histogram hit counter between multiple data batches (#5035)\n* Fix `feature_name` crated from int64index dataframe. (#5081)\n* Don't use 0 for \"fresh leaf\" (#5084)\n* Throw error when user attempts to use multi-GPU training and XGBoost has not been compiled with NCCL (#5170)\n* Fix metric name loading (#5122)\n* Quick fix for memory leak in CPU `hist` algorithm (#5153)\n* Fix wrapping GPU ID and prevent data copying (#5160)\n* Fix signature of Span constructor (#5166)\n* Lazy initialization of device vector, so that XGBoost compiled with CUDA can run on a machine without any GPU (#5173)\n* Model loading should not change system locale (#5314)\n* Distributed training jobs would sometimes hang; revert Rabit to fix this regression (dmlc/rabit#132, #5237)\n\n### API changes\n* Add support for cross-validation using query ID (#4474)\n* Enable feature importance property for DART model (#4525)\n* Add `rmsle` metric and `reg:squaredlogerror` objective (#4541)\n* All objective and evaluation metrics are now exposed to JVM packages (#4560)\n* `dump_model()` and `get_dump()` now support exporting in GraphViz language (#4602)\n* Support metrics `ndcg-` and `map-` (#4635)\n* [jvm-packages] Allow chaining prediction (transform) in XGBoost4J-Spark (#4667)\n* [jvm-packages] Add option to bypass missing value check in the Spark layer (#4805). Only use this option if you know what you are doing.\n* [jvm-packages] Add public group getter (#4838)\n* `XGDMatrixSetGroup` C API is now deprecated (#4864). Use `XGDMatrixSetUIntInfo` instead.\n* [R] Added new `train_folds` parameter to `xgb.cv()` (#5114)\n* Ingest meta information from Pandas DataFrame, such as data weights (#5216)\n\n### Maintenance: Refactor code for legibility and maintainability\n* De-duplicate GPU parameters (#4454)\n* Simplify INI-style config reader using C++11 STL (#4478, #4521)\n* Refactor histogram building code for `gpu_hist` (#4528)\n* Overload device memory allocator, to enable instrumentation for compiling memory usage statistics (#4532)\n* Refactor out row partitioning logic from `gpu_hist` (#4554)\n* Remove an unused variable (#4588)\n* Implement tree model dump with code generator, to de-duplicate code for generating dumps in 3 different formats (#4602)\n* Remove `RowSet` class which is no longer being used (#4697)\n* Remove some unused functions as reported by cppcheck (#4743)\n* Mimic CUDA assert output in Span check (#4762)\n* [jvm-packages] Refactor `XGBoost.scala` to put all params processing in one place (#4815)\n* Add some comments for GPU row partitioner (#4832)\n* Span: use `size_t' for index_type,  add `front' and `back'. (#4935)\n* Remove dead code in `exact` algorithm (#5034, #5105)\n* Unify integer types used for row and column indices (#5034)\n* Extract feature interaction constraint from `SplitEvaluator` class. (#5034)\n* [Breaking] De-duplicate paramters and docstrings in the constructors of Scikit-Learn models (#5130)\n* Remove benchmark code from GPU tests (#5141)\n* Clean up Python 2 compatibility code. (#5161)\n* Extensible binary serialization format for `DMatrix::MetaInfo` (#5187). This will be useful for implementing censored labels for survival analysis applications.\n* Cleanup clang-tidy warnings. (#5247)\n\n### Maintenance: testing, continuous integration, build system\n* Use `yaml.safe_load` instead of `yaml.load`. (#4537)\n* Ensure GCC is at least 5.x (#4538)\n* Remove all mention of `reg:linear` from tests (#4544)\n* [jvm-packages] Upgrade to Scala 2.12 (#4574)\n* [jvm-packages] Update kryo dependency to 2.22 (#4575)\n* [CI] Specify account ID when logging into ECR Docker registry (#4584)\n* Use Sphinx 2.1+ to compile documentation (#4609)\n* Make Pandas optional for running Python unit tests (#4620)\n* Fix spark tests on machines with many cores (#4634)\n* [jvm-packages] Update local dev build process (#4640)\n* Add optional dependencies to setup.py (#4655)\n* [jvm-packages] Fix maven warnings (#4664)\n* Remove extraneous files from the R package, to comply with CRAN policy (#4699)\n* Remove VC-2013 support, since it is not C++11 compliant (#4701)\n* [CI] Fix broken installation of Pandas (#4704, #4722)\n* [jvm-packages] Clean up temporary files afer running tests (#4706)\n* Specify version macro in CMake. (#4730)\n* Include dmlc-tracker into XGBoost Python package (#4731)\n* [CI] Use long key ID for Ubuntu repository fingerprints. (#4783)\n* Remove plugin, CUDA related code in automake & autoconf files (#4789)\n* Skip related tests when scikit-learn is not installed. (#4791)\n* Ignore vscode and clion files (#4866)\n* Use bundled Google Test by default (#4900)\n* [CI] Raise timeout threshold in Jenkins (#4938)\n* Copy CMake parameter from dmlc-core. (#4948)\n* Set correct file permission. (#4964)\n* [CI] Update lint configuration to support latest pylint convention (#4971)\n* [CI] Upload nightly builds to S3 (#4976, #4979)\n* Add asan.so.5 to cmake script. (#4999)\n* [CI] Fix Travis tests. (#5062)\n* [CI] Locate vcomp140.dll from System32 directory (#5078)\n* Implement training observer to dump internal states of objects (#5088). This will be useful for debugging.\n* Fix visual studio output library directories (#5119)\n* [jvm-packages] Comply with scala style convention + fix broken unit test (#5134)\n* [CI] Repair download URL for Maven 3.6.1 (#5139)\n* Don't use modernize-use-trailing-return-type in clang-tidy. (#5169)\n* Explicitly use UTF-8 codepage when using MSVC (#5197)\n* Add CMake option to run Undefined Behavior Sanitizer (UBSan) (#5211)\n* Make some GPU tests deterministic (#5229)\n* [R] Robust endian detection in CRAN xgboost build (#5232)\n* Support FreeBSD (#5233)\n* Make `pip install xgboost*.tar.gz` work by fixing build-python.sh (#5241)\n* Fix compilation error due to 64-bit integer narrowing to `size_t` (#5250)\n* Remove use of `std::cout` from R package, to comply with CRAN policy (#5261)\n* Update DMLC-Core submodule (#4674, #4688, #4726, #4924)\n* Update Rabit submodule (#4560, #4667, #4718, #4808, #4966, #5237)\n\n### Usability Improvements, Documentation\n* Add Random Forest API to Python API doc (#4500)\n* Fix Python demo and doc. (#4545)\n* Remove doc about not supporting CUDA 10.1 (#4578)\n* Address some sphinx warnings and errors, add doc for building doc. (#4589)\n* Add instruction to run formatting checks locally (#4591)\n* Fix docstring for `XGBModel.predict()` (#4592)\n* Doc and demo for customized metric and objective (#4598, #4608)\n* Add to documentation how to run tests locally (#4610)\n* Empty evaluation list in early stopping should produce meaningful error message (#4633)\n* Fixed year to 2019 in conf.py, helpers.h and LICENSE (#4661)\n* Minor updates to links and grammar (#4673)\n* Remove `silent` in doc (#4689)\n* Remove old Python trouble shooting doc (#4729)\n* Add `os.PathLike` support for file paths to DMatrix and Booster Python classes (#4757)\n* Update XGBoost4J-Spark doc (#4804)\n* Regular formatting for evaluation metrics (#4803)\n* [jvm-packages] Refine documentation for handling missing values in XGBoost4J-Spark (#4805)\n* Monitor for distributed environment (#4829). This is useful for identifying performance bottleneck.\n* Add check for length of weights and produce a good error message (#4872)\n* Fix DMatrix doc (#4884)\n* Export C++ headers in CMake installation (#4897)\n* Update license year in README.md to 2019 (#4940)\n* Fix incorrectly displayed Note in the doc (#4943)\n* Follow PEP 257 Docstring Conventions (#4959)\n* Document minimum version required for Google Test (#5001)\n* Add better error message for invalid feature names (#5024)\n* Some guidelines on device memory usage (#5038)\n* [doc] Some notes for external memory. (#5065)\n* Update document for `tree_method` (#5106)\n* Update demo for ranking. (#5154)\n* Add new lines for Spark XGBoost missing values section (#5180)\n* Fix simple typo: utilty -> utility (#5182)\n* Update R doc by roxygen2 (#5201)\n* [R] Direct user to use `set.seed()` instead of setting `seed` parameter (#5125)\n* Add Optuna badge to `README.md` (#5208)\n* Fix compilation error in `c-api-demo.c` (#5215)\n\n### Acknowledgement\n**Contributors**: Nan Zhu (@CodingCat), Crissman Loomis (@Crissman), Cyprien Ricque (@Cyprien-Ricque), Evan Kepner (@EvanKepner), K.O. (@Hi-king), KaiJin Ji (@KerryJi), Peter Badida (@KeyWeeUsr), Kodi Arfer (@Kodiologist), Rory Mitchell (@RAMitchell), Egor Smirnov (@SmirnovEgorRu), Jacob Kim (@TheJacobKim), Vibhu Jawa (@VibhuJawa), Marcos (@astrowonk), Andy Adinets (@canonizer), Chen Qin (@chenqin), Christopher Cowden (@cowden), @cpfarrell, @david-cortes, Liangcai Li (@firestarman), @fuhaoda, Philip Hyunsu Cho (@hcho3), @here-nagini, Tong He (@hetong007), Michal Kurka (@michalkurka), Honza Sterba (@honzasterba), @iblumin, @koertkuipers, mattn (@mattn), Mingjie Tang (@merlintang), OrdoAbChao (@mglowacki100), Matthew Jones (@mt-jones), mitama (@nigimitama), Nathan Moore (@nmoorenz), Daniel Stahl (@phillyfan1138), Michaël Benesty (@pommedeterresautee), Rong Ou (@rongou), Sebastian (@sfahnens), Xu Xiao (@sperlingxx), @sriramch, Sean Owen (@srowen), Stephanie Yang (@stpyang), Yuan Tang (@terrytangyuan), Mathew Wicks (@thesuperzapper), Tim Gates (@timgates42), TinkleG (@tinkle1129), Oleksandr Pryimak (@trams), Jiaming Yuan (@trivialfis), Matvey Turkov (@turk0v), Bobby Wang (@wbo4958), yage (@yage99), @yellowdolphin\n\n**Reviewers**: Nan Zhu (@CodingCat), Crissman Loomis (@Crissman), Cyprien Ricque (@Cyprien-Ricque), Evan Kepner (@EvanKepner), John Zedlewski (@JohnZed), KOLANICH (@KOLANICH), KaiJin Ji (@KerryJi), Kodi Arfer (@Kodiologist), Rory Mitchell (@RAMitchell), Egor Smirnov (@SmirnovEgorRu), Nikita Titov (@StrikerRUS), Jacob Kim (@TheJacobKim), Vibhu Jawa (@VibhuJawa), Andrew Kane (@ankane), Arno Candel (@arnocandel), Marcos (@astrowonk), Bryan Woods (@bryan-woods), Andy Adinets (@canonizer), Chen Qin (@chenqin), Thomas Franke (@coding-komek), Peter  (@codingforfun), @cpfarrell, Joshua Patterson (@datametrician), @fuhaoda, Philip Hyunsu Cho (@hcho3), Tong He (@hetong007), Honza Sterba (@honzasterba), @iblumin, @jakirkham, Vadim Khotilovich (@khotilov), Keith Kraus (@kkraus14), @koertkuipers, @melonki, Mingjie Tang (@merlintang), OrdoAbChao (@mglowacki100), Daniel Mahler (@mhlr), Matthew Rocklin (@mrocklin), Matthew Jones (@mt-jones), Michaël Benesty (@pommedeterresautee), PSEUDOTENSOR / Jonathan McKinney (@pseudotensor), Rong Ou (@rongou), Vladimir (@sh1ng), Scott Lundberg (@slundberg), Xu Xiao (@sperlingxx), @sriramch, Pasha Stetsenko (@st-pasha), Stephanie Yang (@stpyang), Yuan Tang (@terrytangyuan), Mathew Wicks (@thesuperzapper), Theodore Vasiloudis (@thvasilo), TinkleG (@tinkle1129), Oleksandr Pryimak (@trams), Jiaming Yuan (@trivialfis), Bobby Wang (@wbo4958), yage (@yage99), @yellowdolphin, Yin Lou (@yinlou)\n\n## v0.90 (2019.05.18)\n\n### XGBoost Python package drops Python 2.x (#4379, #4381)\nPython 2.x is reaching its end-of-life at the end of this year. [Many scientific Python packages are now moving to drop Python 2.x](https://python3statement.github.io/).\n\n### XGBoost4J-Spark now requires Spark 2.4.x (#4377)\n* Spark 2.3 is reaching its end-of-life soon. See discussion at #4389.\n* **Consistent handling of missing values** (#4309, #4349, #4411): Many users had reported issue with inconsistent predictions between XGBoost4J-Spark and the Python XGBoost package. The issue was caused by Spark mis-handling non-zero missing values (NaN, -1, 999 etc). We now alert the user whenever Spark doesn't handle missing values correctly (#4309, #4349). See [the tutorial for dealing with missing values in XGBoost4J-Spark](https://xgboost.readthedocs.io/en/release_0.90/jvm/xgboost4j_spark_tutorial.html#dealing-with-missing-values). This fix also depends on the availability of Spark 2.4.x.\n\n### Roadmap: better performance scaling for multi-core CPUs (#4310)\n* Poor performance scaling of the `hist` algorithm for multi-core CPUs has been under investigation (#3810). #4310 optimizes quantile sketches and other pre-processing tasks. Special thanks to @SmirnovEgorRu.\n\n### Roadmap: Harden distributed training (#4250)\n* Make distributed training in XGBoost more robust by hardening [Rabit](https://github.com/dmlc/rabit), which implements [the AllReduce primitive](https://en.wikipedia.org/wiki/Reduce_%28parallel_pattern%29). In particular, improve test coverage on mechanisms for fault tolerance and recovery. Special thanks to @chenqin.\n\n### New feature: Multi-class metric functions for GPUs (#4368)\n* Metrics for multi-class classification have been ported to GPU: `merror`, `mlogloss`. Special thanks to @trivialfis.\n* With supported metrics, XGBoost will select the correct devices based on your system and `n_gpus` parameter.\n\n### New feature: Scikit-learn-like random forest API (#4148, #4255, #4258)\n* XGBoost Python package now offers `XGBRFClassifier` and `XGBRFRegressor` API to train random forests. See [the tutorial](https://xgboost.readthedocs.io/en/release_0.90/tutorials/rf.html). Special thanks to @canonizer\n\n### New feature: use external memory in GPU predictor (#4284, #4396, #4438, #4457)\n* It is now possible to make predictions on GPU when the input is read from external memory. This is useful when you want to make predictions with big dataset that does not fit into the GPU memory. Special thanks to @rongou, @canonizer, @sriramch.\n\n  ```python\n  dtest = xgboost.DMatrix('test_data.libsvm#dtest.cache')\n  bst.set_param('predictor', 'gpu_predictor')\n  bst.predict(dtest)\n  ```\n\n* Coming soon: GPU training (`gpu_hist`) with external memory\n\n### New feature: XGBoost can now handle comments in LIBSVM files (#4430)\n* Special thanks to @trivialfis and @hcho3\n\n### New feature: Embed XGBoost in your C/C++ applications using CMake (#4323, #4333, #4453)\n* It is now easier than ever to embed XGBoost in your C/C++ applications. In your CMakeLists.txt, add `xgboost::xgboost` as a linked library:\n\n  ```cmake\n  find_package(xgboost REQUIRED)\n  add_executable(api-demo c-api-demo.c)\n  target_link_libraries(api-demo xgboost::xgboost)\n  ```\n\n  [XGBoost C API documentation is available.](https://xgboost.readthedocs.io/en/release_0.90/dev) Special thanks to @trivialfis\n\n### Performance improvements\n* Use feature interaction constraints to narrow split search space (#4341, #4428)\n* Additional optimizations for `gpu_hist` (#4248, #4283)\n* Reduce OpenMP thread launches in `gpu_hist` (#4343)\n* Additional optimizations for multi-node multi-GPU random forests. (#4238)\n* Allocate unique prediction buffer for each input matrix, to avoid re-sizing GPU array (#4275)\n* Remove various synchronisations from CUDA API calls (#4205)\n* XGBoost4J-Spark\n  - Allow the user to control whether to cache partitioned training data, to potentially reduce execution time (#4268)\n\n### Bug-fixes\n* Fix node reuse in `hist` (#4404)\n* Fix GPU histogram allocation (#4347)\n* Fix matrix attributes not sliced (#4311)\n* Revise AUC and AUCPR metrics now work with weighted ranking task (#4216, #4436)\n* Fix timer invocation for InitDataOnce() in `gpu_hist` (#4206)\n* Fix R-devel errors (#4251)\n* Make gradient update in GPU linear updater thread-safe (#4259)\n* Prevent out-of-range access in column matrix (#4231)\n* Don't store DMatrix handle in Python object until it's initialized, to improve exception safety (#4317)\n* XGBoost4J-Spark\n  - Fix non-deterministic order within a zipped partition on prediction (#4388)\n  - Remove race condition on tracker shutdown (#4224)\n  - Allow set the parameter `maxLeaves`. (#4226)\n  - Allow partial evaluation of dataframe before prediction (#4407)\n  - Automatically set `maximize_evaluation_metrics` if not explicitly given (#4446)\n\n### API changes\n* Deprecate `reg:linear` in favor of `reg:squarederror`. (#4267, #4427)\n* Add attribute getter and setter to the Booster object in XGBoost4J (#4336)\n\n### Maintenance: Refactor C++ code for legibility and maintainability\n* Fix clang-tidy warnings. (#4149)\n* Remove deprecated C APIs. (#4266)\n* Use Monitor class to time functions in `hist`. (#4273)\n* Retire DVec class in favour of c++20 style span for device memory. (#4293)\n* Improve HostDeviceVector exception safety (#4301)\n\n### Maintenance: testing, continuous integration, build system\n* **Major refactor of CMakeLists.txt** (#4323, #4333, #4453): adopt modern CMake and export XGBoost as a target\n* **Major improvement in Jenkins CI pipeline** (#4234)\n  - Migrate all Linux tests to Jenkins (#4401)\n  - Builds and tests are now de-coupled, to test an artifact against multiple versions of CUDA, JDK, and other dependencies (#4401)\n  - Add Windows GPU to Jenkins CI pipeline (#4463, #4469)\n* Support CUDA 10.1 (#4223, #4232, #4265, #4468)\n* Python wheels are now built with CUDA 9.0, so that JIT is not required on Volta architecture (#4459)\n* Integrate with NVTX CUDA profiler (#4205)\n* Add a test for cpu predictor using external memory (#4308)\n* Refactor tests to get rid of duplication (#4358)\n* Remove test dependency on `craigcitro/r-travis`, since it's deprecated (#4353)\n* Add files from local R build to `.gitignore` (#4346)\n* Make XGBoost4J compatible with Java 9+ by revising NativeLibLoader (#4351)\n* Jenkins build for CUDA 10.0 (#4281)\n* Remove remaining `silent` and `debug_verbose` in Python tests (#4299)\n* Use all cores to build XGBoost4J lib on linux (#4304)\n* Upgrade Jenkins Linux build environment to GCC 5.3.1, CMake 3.6.0 (#4306)\n* Make CMakeLists.txt compatible with CMake 3.3 (#4420)\n* Add OpenMP option in CMakeLists.txt (#4339)\n* Get rid of a few trivial compiler warnings (#4312)\n* Add external Docker build cache, to speed up builds on Jenkins CI (#4331, #4334, #4458)\n* Fix Windows tests (#4403)\n* Fix a broken python test (#4395)\n* Use a fixed seed to split data in XGBoost4J-Spark tests, for reproducibility (#4417)\n* Add additional Python tests to test training under constraints (#4426)\n* Enable building with shared NCCL. (#4447)\n\n### Usability Improvements, Documentation\n* Document limitation of one-split-at-a-time Greedy tree learning heuristic (#4233)\n* Update build doc: PyPI wheel now support multi-GPU (#4219)\n* Fix docs for `num_parallel_tree` (#4221)\n* Fix document about `colsample_by*` parameter (#4340)\n* Make the train and test input with same colnames. (#4329)\n* Update R contribute link. (#4236)\n* Fix travis R tests (#4277)\n* Log version number in crash log in XGBoost4J-Spark (#4271, #4303)\n* Allow supression of Rabit output in Booster::train in XGBoost4J (#4262)\n* Add tutorial on handling missing values in XGBoost4J-Spark (#4425)\n* Fix typos (#4345, #4393, #4432, #4435)\n* Added language classifier in setup.py (#4327)\n* Added Travis CI badge (#4344)\n* Add BentoML to use case section (#4400)\n* Remove subtly sexist remark (#4418)\n* Add R vignette about parsing JSON dumps (#4439)\n\n### Acknowledgement\n**Contributors**: Nan Zhu (@CodingCat), Adam Pocock (@Craigacp), Daniel Hen (@Daniel8hen), Jiaxiang Li (@JiaxiangBU), Rory Mitchell (@RAMitchell), Egor Smirnov (@SmirnovEgorRu), Andy Adinets (@canonizer), Jonas (@elcombato), Harry Braviner (@harrybraviner), Philip Hyunsu Cho (@hcho3), Tong He (@hetong007), James Lamb (@jameslamb), Jean-Francois Zinque (@jeffzi), Yang Yang (@jokerkeny), Mayank Suman (@mayanksuman), jess (@monkeywithacupcake), Hajime Morrita (@omo), Ravi Kalia (@project-delphi), @ras44, Rong Ou (@rongou), Shaochen Shi (@shishaochen), Xu Xiao (@sperlingxx), @sriramch, Jiaming Yuan (@trivialfis), Christopher Suchanek (@wsuchy), Bozhao (@yubozhao)\n\n**Reviewers**: Nan Zhu (@CodingCat), Adam Pocock (@Craigacp), Daniel Hen (@Daniel8hen), Jiaxiang Li (@JiaxiangBU), Laurae (@Laurae2), Rory Mitchell (@RAMitchell), Egor Smirnov (@SmirnovEgorRu), @alois-bissuel, Andy Adinets (@canonizer), Chen Qin (@chenqin), Harry Braviner (@harrybraviner), Philip Hyunsu Cho (@hcho3), Tong He (@hetong007), @jakirkham, James Lamb (@jameslamb), Julien Schueller (@jschueller), Mayank Suman (@mayanksuman), Hajime Morrita (@omo), Rong Ou (@rongou), Sara Robinson (@sararob), Shaochen Shi (@shishaochen), Xu Xiao (@sperlingxx), @sriramch, Sean Owen (@srowen), Sergei Lebedev (@superbobry), Yuan (Terry) Tang (@terrytangyuan), Theodore Vasiloudis (@thvasilo), Matthew Tovbin (@tovbinm), Jiaming Yuan (@trivialfis), Xin Yin (@xydrolase)\n\n## v0.82 (2019.03.03)\nThis release is packed with many new features and bug fixes.\n\n### Roadmap: better performance scaling for multi-core CPUs (#3957)\n* Poor performance scaling of the `hist` algorithm for multi-core CPUs has been under investigation (#3810). #3957 marks an important step toward better performance scaling, by using software pre-fetching and replacing STL vectors with C-style arrays. Special thanks to @Laurae2 and @SmirnovEgorRu.\n* See #3810 for latest progress on this roadmap.\n\n### New feature: Distributed Fast Histogram Algorithm (`hist`) (#4011, #4102, #4140, #4128)\n* It is now possible to run the `hist` algorithm in distributed setting. Special thanks to @CodingCat. The benefits include:\n  1. Faster local computation via feature binning\n  2. Support for monotonic constraints and feature interaction constraints\n  3. Simpler codebase than `approx`, allowing for future improvement\n* Depth-wise tree growing is now performed in a separate code path, so that cross-node syncronization is performed only once per level.\n\n### New feature: Multi-Node, Multi-GPU training (#4095)\n* Distributed training is now able to utilize clusters equipped with NVIDIA GPUs. In particular, the rabit AllReduce layer will communicate GPU device information. Special thanks to @mt-jones, @RAMitchell, @rongou, @trivialfis, @canonizer, and @jeffdk.\n* Resource management systems will be able to assign a rank for each GPU in the cluster.\n* In Dask, users will be able to construct a collection of XGBoost processes over an inhomogeneous device cluster (i.e. workers with different number and/or kinds of GPUs).\n\n### New feature: Multiple validation datasets in XGBoost4J-Spark (#3904, #3910)\n* You can now track the performance of the model during training with multiple evaluation datasets. By specifying `eval_sets` or call `setEvalSets` over a `XGBoostClassifier` or `XGBoostRegressor`, you can pass in multiple evaluation datasets typed as a `Map` from `String` to `DataFrame`. Special thanks to @CodingCat.\n* See the usage of multiple validation datasets [here](https://github.com/dmlc/xgboost/blob/0c1d5f1120c0a159f2567b267f0ec4ffadee00d0/jvm-packages/xgboost4j-example/src/main/scala/ml/dmlc/xgboost4j/scala/example/spark/SparkTraining.scala#L66-L78)\n\n### New feature: Additional metric functions for GPUs (#3952)\n* Element-wise metrics have been ported to GPU: `rmse`, `mae`, `logloss`, `poisson-nloglik`, `gamma-deviance`, `gamma-nloglik`, `error`, `tweedie-nloglik`. Special thanks to @trivialfis and @RAMitchell.\n* With supported metrics, XGBoost will select the correct devices based on your system and `n_gpus` parameter.\n\n### New feature: Column sampling at individual nodes (splits) (#3971)\n* Columns (features) can now be sampled at individual tree nodes, in addition to per-tree and per-level sampling. To enable per-node sampling, set `colsample_bynode` parameter, which represents the fraction of columns sampled at each node. This parameter is set to 1.0 by default (i.e. no sampling per node). Special thanks to @canonizer.\n* The `colsample_bynode` parameter works cumulatively with other `colsample_by*` parameters: for example, `{'colsample_bynode':0.5, 'colsample_bytree':0.5}` with 100 columns will give 25 features to choose from at each split.\n\n### Major API change: consistent logging level via `verbosity` (#3982, #4002, #4138)\n* XGBoost now allows fine-grained control over logging. You can set `verbosity` to 0 (silent), 1 (warning), 2 (info), and 3 (debug). This is useful for controlling the amount of logging outputs. Special thanks to @trivialfis.\n* Parameters `silent` and `debug_verbose` are now deprecated.\n* Note: Sometimes XGBoost tries to change configurations based on heuristics, which is displayed as warning message.  If there's unexpected behaviour, please try to increase value of verbosity.\n\n### Major bug fix: external memory (#4040, #4193)\n* Clarify object ownership in multi-threaded prefetcher, to avoid memory error.\n* Correctly merge two column batches (which uses [CSC layout](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))).\n* Add unit tests for external memory.\n* Special thanks to @trivialfis and @hcho3.\n\n### Major bug fix: early stopping fixed in XGBoost4J and XGBoost4J-Spark (#3928, #4176)\n* Early stopping in XGBoost4J and XGBoost4J-Spark is now consistent with its counterpart in the Python package. Training stops if the current iteration is `earlyStoppingSteps` away from the best iteration. If there are multiple evaluation sets, only the last one is used to determinate early stop.\n* See the updated documentation [here](https://xgboost.readthedocs.io/en/release_0.82/jvm/xgboost4j_spark_tutorial.html#early-stopping)\n* Special thanks to @CodingCat, @yanboliang, and @mingyang.\n\n### Major bug fix: infrequent features should not crash distributed training (#4045)\n* For infrequently occuring features, some partitions may not get any instance. This scenario used to crash distributed training due to mal-formed ranges. The problem has now been fixed.\n* In practice, one-hot-encoded categorical variables tend to produce rare features, particularly when the cardinality is high.\n* Special thanks to @CodingCat.\n\n### Performance improvements\n* Faster, more space-efficient radix sorting in `gpu_hist` (#3895)\n* Subtraction trick in histogram calculation in `gpu_hist` (#3945)\n* More performant re-partition in XGBoost4J-Spark (#4049)\n\n### Bug-fixes\n* Fix semantics of `gpu_id` when running multiple XGBoost processes on a multi-GPU machine (#3851)\n* Fix page storage path for external memory on Windows (#3869)\n* Fix configuration setup so that DART utilizes GPU (#4024)\n* Eliminate NAN values from SHAP prediction (#3943)\n* Prevent empty quantile sketches in `hist` (#4155)\n* Enable running objectives with 0 GPU (#3878)\n* Parameters are no longer dependent on system locale (#3891, #3907)\n* Use consistent data type in the GPU coordinate descent code (#3917)\n* Remove undefined behavior in the CLI config parser on the ARM platform (#3976)\n* Initialize counters in GPU AllReduce (#3987)\n* Prevent deadlocks in GPU AllReduce (#4113)\n* Load correct values from sliced NumPy arrays (#4147, #4165)\n* Fix incorrect GPU device selection (#4161)\n* Make feature binning logic in `hist` aware of query groups when running a ranking task (#4115). For ranking task, query groups are weighted, not individual instances.\n* Generate correct C++ exception type for `LOG(FATAL)` macro (#4159)\n* Python package\n  - Python package should run on system without `PATH` environment variable (#3845)\n  - Fix `coef_` and `intercept_` signature to be compatible with `sklearn.RFECV` (#3873)\n  - Use UTF-8 encoding in Python package README, to support non-English locale (#3867)\n  - Add AUC-PR to list of metrics to maximize for early stopping (#3936)\n  - Allow loading pickles without `self.booster` attribute, for backward compatibility (#3938, #3944)\n  - White-list DART for feature importances (#4073)\n  - Update usage of [h2oai/datatable](https://github.com/h2oai/datatable) (#4123)\n* XGBoost4J-Spark\n  - Address scalability issue in prediction (#4033)\n  - Enforce the use of per-group weights for ranking task (#4118)\n  - Fix vector size of `rawPredictionCol` in `XGBoostClassificationModel` (#3932)\n  - More robust error handling in Spark tracker (#4046, #4108)\n  - Fix return type of `setEvalSets` (#4105)\n  - Return correct value of `getMaxLeaves` (#4114)\n\n### API changes\n* Add experimental parameter `single_precision_histogram` to use single-precision histograms for the `gpu_hist` algorithm (#3965)\n* Python package\n  - Add option to select type of feature importances in the scikit-learn inferface (#3876)\n  - Add `trees_to_df()` method to dump decision trees as Pandas data frame (#4153)\n  - Add options to control node shapes in the GraphViz plotting function (#3859)\n  - Add `xgb_model` option to `XGBClassifier`, to load previously saved model (#4092)\n  - Passing lists into `DMatrix` is now deprecated (#3970)\n* XGBoost4J\n  - Support multiple feature importance features (#3801)\n\n### Maintenance: Refactor C++ code for legibility and maintainability\n* Refactor `hist` algorithm code and add unit tests (#3836)\n* Minor refactoring of split evaluator in `gpu_hist` (#3889)\n* Removed unused leaf vector field in the tree model (#3989)\n* Simplify the tree representation by combining `TreeModel` and `RegTree` classes (#3995)\n* Simplify and harden tree expansion code (#4008, #4015)\n* De-duplicate parameter classes in the linear model algorithms (#4013)\n* Robust handling of ranges with C++20 span in `gpu_exact` and `gpu_coord_descent` (#4020, #4029)\n* Simplify tree training code (#3825). Also use Span class for robust handling of ranges.\n\n### Maintenance: testing, continuous integration, build system\n* Disallow `std::regex` since it's not supported by GCC 4.8.x (#3870)\n* Add multi-GPU tests for coordinate descent algorithm for linear models (#3893, #3974)\n* Enforce naming style in Python lint (#3896)\n* Refactor Python tests (#3897, #3901): Use pytest exclusively, display full trace upon failure\n* Address `DeprecationWarning` when using Python collections (#3909)\n* Use correct group for maven site plugin (#3937)\n* Jenkins CI is now using on-demand EC2 instances exclusively, due to unreliability of Spot instances (#3948)\n* Better GPU performance logging (#3945)\n* Fix GPU tests on machines with only 1 GPU (#4053)\n* Eliminate CRAN check warnings and notes (#3988)\n* Add unit tests for tree serialization (#3989)\n* Add unit tests for tree fitting functions in `hist` (#4155)\n* Add a unit test for `gpu_exact` algorithm (#4020)\n* Correct JVM CMake GPU flag (#4071)\n* Fix failing Travis CI on Mac (#4086)\n* Speed up Jenkins by not compiling CMake (#4099)\n* Analyze C++ and CUDA code using clang-tidy, as part of Jenkins CI pipeline (#4034)\n* Fix broken R test: Install Homebrew GCC (#4142)\n* Check for empty datasets in GPU unit tests (#4151)\n* Fix Windows compilation (#4139)\n* Comply with latest convention of cpplint (#4157)\n* Fix a unit test in `gpu_hist` (#4158)\n* Speed up data generation in Python tests (#4164)\n\n### Usability Improvements\n* Add link to [InfoWorld 2019 Technology of the Year Award](https://www.infoworld.com/article/3336072/application-development/infoworlds-2019-technology-of-the-year-award-winners.html) (#4116)\n* Remove outdated AWS YARN tutorial (#3885)\n* Document current limitation in number of features (#3886)\n* Remove unnecessary warning when `gblinear` is selected (#3888)\n* Document limitation of CSV parser: header not supported (#3934)\n* Log training parameters in XGBoost4J-Spark (#4091)\n* Clarify early stopping behavior in the scikit-learn interface (#3967)\n* Clarify behavior of `max_depth` parameter (#4078)\n* Revise Python docstrings for ranking task (#4121). In particular, weights must be per-group in learning-to-rank setting.\n* Document parameter `num_parallel_tree` (#4022)\n* Add Jenkins status badge (#4090)\n* Warn users against using internal functions of `Booster` object (#4066)\n* Reformat `benchmark_tree.py` to comply with Python style convention (#4126)\n* Clarify a comment in `objectiveTrait` (#4174)\n* Fix typos and broken links in documentation (#3890, #3872, #3902, #3919, #3975, #4027, #4156, #4167)\n\n### Acknowledgement\n**Contributors** (in no particular order): Jiaming Yuan (@trivialfis), Hyunsu Cho (@hcho3), Nan Zhu (@CodingCat), Rory Mitchell (@RAMitchell), Yanbo Liang (@yanboliang), Andy Adinets (@canonizer), Tong He (@hetong007), Yuan Tang (@terrytangyuan)\n\n**First-time Contributors** (in no particular order): Jelle Zijlstra (@JelleZijlstra), Jiacheng Xu (@jiachengxu), @ajing, Kashif Rasul (@kashif), @theycallhimavi, Joey Gao (@pjgao), Prabakaran Kumaresshan (@nixphix), Huafeng Wang (@huafengw), @lyxthe, Sam Wilkinson (@scwilkinson), Tatsuhito Kato (@stabacov), Shayak Banerjee (@shayakbanerjee), Kodi Arfer (@Kodiologist), @KyleLi1985, Egor Smirnov (@SmirnovEgorRu), @tmitanitky, Pasha Stetsenko (@st-pasha), Kenichi Nagahara (@keni-chi), Abhai Kollara Dilip (@abhaikollara), Patrick Ford (@pford221), @hshujuan, Matthew Jones (@mt-jones), Thejaswi Rao (@teju85), Adam November (@anovember)\n\n**First-time Reviewers** (in no particular order): Mingyang Hu (@mingyang), Theodore Vasiloudis (@thvasilo), Jakub Troszok (@troszok), Rong Ou (@rongou), @Denisevi4, Matthew Jones (@mt-jones), Jeff Kaplan (@jeffdk)\n\n## v0.81 (2018.11.04)\n### New feature: feature interaction constraints\n* Users are now able to control which features (independent variables) are allowed to interact by specifying feature interaction constraints (#3466).\n* [Tutorial](https://xgboost.readthedocs.io/en/release_0.81/tutorials/feature_interaction_constraint.html) is available, as well as [R](https://github.com/dmlc/xgboost/blob/9254c58e4dfff6a59dc0829a2ceb02e45ed17cd0/R-package/demo/interaction_constraints.R) and [Python](https://github.com/dmlc/xgboost/blob/9254c58e4dfff6a59dc0829a2ceb02e45ed17cd0/tests/python/test_interaction_constraints.py) examples.\n\n### New feature: learning to rank using scikit-learn interface\n* Learning to rank task is now available for the scikit-learn interface of the Python package (#3560, #3848). It is now possible to integrate the XGBoost ranking model into the scikit-learn learning pipeline.\n* Examples of using `XGBRanker` class is found at [demo/rank/rank_sklearn.py](https://github.com/dmlc/xgboost/blob/24a268a2e3cb17302db3d72da8f04016b7d352d9/demo/rank/rank_sklearn.py).\n\n### New feature: R interface for SHAP interactions\n* SHAP (SHapley Additive exPlanations) is a unified approach to explain the output of any machine learning model. Previously, this feature was only available from the Python package; now it is available from the R package as well (#3636).\n\n### New feature: GPU predictor now use multiple GPUs to predict\n* GPU predictor is now able to utilize multiple GPUs at once to accelerate prediction (#3738)\n\n### New feature: Scale distributed XGBoost to large-scale clusters\n* Fix OS file descriptor limit assertion error on large cluster (#3835, dmlc/rabit#73) by replacing `select()` based AllReduce/Broadcast with `poll()` based implementation.\n* Mitigate tracker \"thundering herd\" issue on large cluster. Add exponential backoff retry when workers connect to tracker.\n* With this change, we were able to scale to 1.5k executors on a 12 billion row dataset after some tweaks here and there.\n\n### New feature: Additional objective functions for GPUs\n* New objective functions ported to GPU: `hinge`, `multi:softmax`, `multi:softprob`, `count:poisson`, `reg:gamma`, `\"reg:tweedie`.\n* With supported objectives, XGBoost will select the correct devices based on your system and `n_gpus` parameter.\n\n### Major bug fix: learning to rank with XGBoost4J-Spark\n* Previously, `repartitionForData` would shuffle data and lose ordering necessary for ranking task.\n* To fix this issue, data points within each RDD partition is explicitly group by their group (query session) IDs (#3654). Also handle empty RDD partition carefully (#3750).\n\n### Major bug fix: early stopping fixed in XGBoost4J-Spark\n* Earlier implementation of early stopping had incorrect semantics and didn't let users to specify direction for optimizing (maximize / minimize)\n* A parameter `maximize_evaluation_metrics` is defined so as to tell whether a metric should be maximized or minimized as part of early stopping criteria (#3808). Also early stopping now has correct semantics.\n\n### API changes\n* Column sampling by level (`colsample_bylevel`) is now functional for `hist` algorithm (#3635, #3862)\n* GPU tag `gpu:` for regression objectives are now deprecated. XGBoost will select the correct devices automatically (#3643)\n* Add `disable_default_eval_metric` parameter to disable default metric (#3606)\n* Experimental AVX support for gradient computation is removed (#3752)\n* XGBoost4J-Spark\n  - Add `rank:ndcg` and `rank:map` to supported objectives (#3697)\n* Python package\n  - Add `callbacks` argument to `fit()` function of sciki-learn API (#3682)\n  - Add `XGBRanker` to scikit-learn interface (#3560, #3848)\n  - Add `validate_features` argument to `predict()` function of scikit-learn API (#3653)\n  - Allow scikit-learn grid search over parameters specified as keyword arguments (#3791)\n  - Add `coef_` and `intercept_` as properties of scikit-learn wrapper (#3855). Some scikit-learn functions expect these properties.\n\n### Performance improvements\n* Address very high GPU memory usage for large data (#3635)\n* Fix performance regression within `EvaluateSplits()` of `gpu_hist` algorithm. (#3680)\n\n### Bug-fixes\n* Fix a problem in GPU quantile sketch with tiny instance weights. (#3628)\n* Fix copy constructor for `HostDeviceVectorImpl` to prevent dangling pointers (#3657)\n* Fix a bug in partitioned file loading (#3673)\n* Fixed an uninitialized pointer in `gpu_hist` (#3703)\n* Reshared data among GPUs when number of GPUs is changed (#3721)\n* Add back `max_delta_step` to split evaluation (#3668)\n* Do not round up integer thresholds for integer features in JSON dump (#3717)\n* Use `dmlc::TemporaryDirectory` to handle temporaries in cross-platform way (#3783)\n* Fix accuracy problem with `gpu_hist` when `min_child_weight` and `lambda` are set to 0 (#3793)\n* Make sure that `tree_method` parameter is recognized and not silently ignored (#3849)\n* XGBoost4J-Spark\n  - Make sure `thresholds` are considered when executing `predict()` method (#3577)\n  - Avoid losing precision when computing probabilities by converting to `Double` early (#3576)\n  - `getTreeLimit()` should return `Int` (#3602)\n  - Fix checkpoint serialization on HDFS (#3614)\n  - Throw `ControlThrowable` instead of `InterruptedException` so that it is properly re-thrown (#3632)\n  - Remove extraneous output to stdout (#3665)\n  - Allow specification of task type for custom objectives and evaluations (#3646)\n  - Fix distributed updater check (#3739)\n  - Fix issue when spark job execution thread cannot return before we execute `first()` (#3758)\n* Python package\n  - Fix accessing `DMatrix.handle` before it is set (#3599)\n  - `XGBClassifier.predict()` should return margin scores when `output_margin` is set to true (#3651)\n  - Early stopping callback should maximize metric of form `NDCG@n-` (#3685)\n  - Preserve feature names when slicing `DMatrix` (#3766)\n* R package\n  - Replace `nround` with `nrounds` to match actual parameter (#3592)\n  - Amend `xgb.createFolds` to handle classes of a single element (#3630)\n  - Fix buggy random generator and make `colsample_bytree` functional (#3781)\n\n### Maintenance: testing, continuous integration, build system\n* Add sanitizers tests to Travis CI (#3557)\n* Add NumPy, Matplotlib, Graphviz as requirements for doc build (#3669)\n* Comply with CRAN submission policy (#3660, #3728)\n* Remove copy-paste error in JVM test suite (#3692)\n* Disable flaky tests in `R-package/tests/testthat/test_update.R` (#3723)\n* Make Python tests compatible with scikit-learn 0.20 release (#3731)\n* Separate out restricted and unrestricted tasks, so that pull requests don't build downloadable artifacts (#3736)\n* Add multi-GPU unit test environment (#3741)\n* Allow plug-ins to be built by CMake (#3752)\n* Test wheel compatibility on CPU containers for pull requests (#3762)\n* Fix broken doc build due to Matplotlib 3.0 release (#3764)\n* Produce `xgboost.so` for XGBoost-R on Mac OSX, so that `make install` works (#3767)\n* Retry Jenkins CI tests up to 3 times to improve reliability (#3769, #3769, #3775, #3776, #3777)\n* Add basic unit tests for `gpu_hist` algorithm (#3785)\n* Fix Python environment for distributed unit tests (#3806)\n* Test wheels on CUDA 10.0 container for compatibility (#3838)\n* Fix JVM doc build (#3853)\n\n### Maintenance: Refactor C++ code for legibility and maintainability\n* Merge generic device helper functions into `GPUSet` class (#3626)\n* Re-factor column sampling logic into `ColumnSampler` class (#3635, #3637)\n* Replace `std::vector` with `HostDeviceVector` in `MetaInfo` and `SparsePage` (#3446)\n* Simplify `DMatrix` class (#3395)\n* De-duplicate CPU/GPU code using `Transform` class (#3643, #3751)\n* Remove obsoleted `QuantileHistMaker` class (#3761)\n* Remove obsoleted `NoConstraint` class (#3792)\n\n### Other Features\n* C++20-compliant Span class for safe pointer indexing (#3548, #3588)\n* Add helper functions to manipulate multiple GPU devices (#3693)\n* XGBoost4J-Spark\n  - Allow specifying host ip from the `xgboost-tracker.properties file` (#3833). This comes in handy when `hosts` files doesn't correctly define localhost.\n\n### Usability Improvements\n* Add reference to GitHub repository in `pom.xml` of JVM packages (#3589)\n* Add R demo of multi-class classification (#3695)\n* Document JSON dump functionality (#3600, #3603)\n* Document CUDA requirement and lack of external memory for GPU algorithms (#3624)\n* Document LambdaMART objectives, both pairwise and listwise (#3672)\n* Document `aucpr` evaluation metric (#3687)\n* Document gblinear parameters: `feature_selector` and `top_k` (#3780)\n* Add instructions for using MinGW-built XGBoost with Python. (#3774)\n* Removed nonexistent parameter `use_buffer` from documentation (#3610)\n* Update Python API doc to include all classes and members (#3619, #3682)\n* Fix typos and broken links in documentation (#3618, #3640, #3676, #3713, #3759, #3784, #3843, #3852)\n* Binary classification demo should produce LIBSVM with 0-based indexing (#3652)\n* Process data once for Python and CLI examples of learning to rank (#3666)\n* Include full text of Apache 2.0 license in the repository (#3698)\n* Save predictor parameters in model file (#3856)\n* JVM packages\n  - Let users specify feature names when calling `getModelDump` and `getFeatureScore` (#3733)\n  - Warn the user about the lack of over-the-wire encryption (#3667)\n  - Fix errors in examples (#3719)\n  - Document choice of trackers (#3831)\n  - Document that vanilla Apache Spark is required (#3854)\n* Python package\n  - Document that custom objective can't contain colon (:) (#3601)\n  - Show a better error message for failed library loading (#3690)\n  - Document that feature importance is unavailable for non-tree learners (#3765)\n  - Document behavior of `get_fscore()` for zero-importance features (#3763)\n  - Recommend pickling as the way to save `XGBClassifier` / `XGBRegressor` / `XGBRanker` (#3829)\n* R package\n  - Enlarge variable importance plot to make it more visible (#3820)\n\n### BREAKING CHANGES\n* External memory page files have changed, breaking backwards compatibility for temporary storage used during external memory training. This only affects external memory users upgrading their xgboost version - we recommend clearing all `*.page` files before resuming training. Model serialization is unaffected.\n\n### Known issues\n* Quantile sketcher fails to produce any quantile for some edge cases (#2943)\n* The `hist` algorithm leaks memory when used with learning rate decay callback (#3579)\n* Using custom evaluation function together with early stopping causes assertion failure in XGBoost4J-Spark (#3595)\n* Early stopping doesn't work with `gblinear` learner (#3789)\n* Label and weight vectors are not reshared upon the change in number of GPUs (#3794). To get around this issue, delete the `DMatrix` object and re-load.\n* The `DMatrix` Python objects are initialized with incorrect values when given array slices (#3841)\n* The `gpu_id` parameter is broken and not yet properly supported (#3850)\n\n### Acknowledgement\n**Contributors** (in no particular order): Hyunsu Cho (@hcho3), Jiaming Yuan (@trivialfis), Nan Zhu (@CodingCat), Rory Mitchell (@RAMitchell), Andy Adinets (@canonizer), Vadim Khotilovich (@khotilov), Sergei Lebedev (@superbobry)\n\n**First-time Contributors** (in no particular order): Matthew Tovbin (@tovbinm), Jakob Richter (@jakob-r), Grace Lam (@grace-lam), Grant W Schneider (@grantschneider), Andrew Thia (@BlueTea88), Sergei Chipiga (@schipiga), Joseph Bradley (@jkbradley), Chen Qin (@chenqin), Jerry Lin (@linjer), Dmitriy Rybalko (@rdtft), Michael Mui (@mmui), Takahiro Kojima (@515hikaru), Bruce Zhao (@BruceZhaoR), Wei Tian (@weitian), Saumya Bhatnagar (@Sam1301), Juzer Shakir (@JuzerShakir), Zhao Hang (@cleghom), Jonathan Friedman (@jontonsoup), Bruno Tremblay (@meztez), Boris Filippov (@frenzykryger), @Shiki-H, @mrgutkun, @gorogm, @htgeis, @jakehoare, @zengxy, @KOLANICH\n\n**First-time Reviewers** (in no particular order): Nikita Titov (@StrikerRUS), Xiangrui Meng (@mengxr), Nirmal Borah (@Nirmal-Neel)\n\n\n## v0.80 (2018.08.13)\n* **JVM packages received a major upgrade**: To consolidate the APIs and improve the user experience, we refactored the design of XGBoost4J-Spark in a significant manner. (#3387)\n  - Consolidated APIs: It is now much easier to integrate XGBoost models into a Spark ML pipeline. Users can control behaviors like output leaf prediction results by setting corresponding column names. Training is now more consistent with other Estimators in Spark MLLIB: there is now one single method `fit()` to train decision trees.\n  - Better user experience: we refactored the parameters relevant modules in XGBoost4J-Spark to provide both camel-case (Spark ML style) and underscore (XGBoost style) parameters\n  - A brand-new tutorial is [available](https://xgboost.readthedocs.io/en/release_0.80/jvm/xgboost4j_spark_tutorial.html) for XGBoost4J-Spark.\n  - Latest API documentation is now hosted at https://xgboost.readthedocs.io/.\n* XGBoost documentation now keeps track of multiple versions:\n  - Latest master: https://xgboost.readthedocs.io/en/latest\n  - 0.80 stable: https://xgboost.readthedocs.io/en/release_0.80\n  - 0.72 stable: https://xgboost.readthedocs.io/en/release_0.72\n* Support for per-group weights in ranking objective (#3379)\n* Fix inaccurate decimal parsing (#3546)\n* New functionality\n  - Query ID column support in LIBSVM data files (#2749). This is convenient for performing ranking task in distributed setting.\n  - Hinge loss for binary classification (`binary:hinge`) (#3477)\n  - Ability to specify delimiter and instance weight column for CSV files (#3546)\n  - Ability to use 1-based indexing instead of 0-based (#3546)\n* GPU support\n  - Quantile sketch, binning, and index compression are now performed on GPU, eliminating PCIe transfer for 'gpu_hist' algorithm (#3319, #3393)\n  - Upgrade to NCCL2 for multi-GPU training (#3404).\n  - Use shared memory atomics for faster training (#3384).\n  - Dynamically allocate GPU memory, to prevent large allocations for deep trees (#3519)\n  - Fix memory copy bug for large files (#3472)\n* Python package\n  - Importing data from Python datatable (#3272)\n  - Pre-built binary wheels available for 64-bit Linux and Windows (#3424, #3443)\n  - Add new importance measures 'total_gain', 'total_cover' (#3498)\n  - Sklearn API now supports saving and loading models (#3192)\n  - Arbitrary cross validation fold indices (#3353)\n  - `predict()` function in Sklearn API uses `best_ntree_limit` if available, to make early stopping easier to use (#3445)\n  - Informational messages are now directed to Python's `print()` rather than standard output (#3438). This way, messages appear inside Jupyter notebooks.\n* R package\n  - Oracle Solaris support, per CRAN policy (#3372)\n* JVM packages\n  - Single-instance prediction (#3464)\n  - Pre-built JARs are now available from Maven Central (#3401)\n  - Add NULL pointer check (#3021)\n  - Consider `spark.task.cpus` when controlling parallelism (#3530)\n  - Handle missing values in prediction (#3529)\n  - Eliminate outputs of `System.out` (#3572)\n* Refactored C++ DMatrix class for simplicity and de-duplication (#3301)\n* Refactored C++ histogram facilities (#3564)\n* Refactored constraints / regularization mechanism for split finding (#3335, #3429). Users may specify an elastic net (L2 + L1 regularization) on leaf weights as well as monotonic constraints on test nodes. The refactor will be useful for a future addition of feature interaction constraints.\n* Statically link `libstdc++` for MinGW32 (#3430)\n* Enable loading from `group`, `base_margin` and `weight` (see [here](http://xgboost.readthedocs.io/en/latest/tutorials/input_format.html#auxiliary-files-for-additional-information)) for Python, R, and JVM packages (#3431)\n* Fix model saving for `count:possion` so that `max_delta_step` doesn't get truncated (#3515)\n* Fix loading of sparse CSC matrix (#3553)\n* Fix incorrect handling of `base_score` parameter for Tweedie regression (#3295)\n\n## v0.72.1 (2018.07.08)\nThis version is only applicable for the Python package. The content is identical to that of v0.72.\n\n## v0.72 (2018.06.01)\n* Starting with this release, we plan to make a new release every two months. See #3252 for more details.\n* Fix a pathological behavior (near-zero second-order gradients) in multiclass objective (#3304)\n* Tree dumps now use high precision in storing floating-point values (#3298)\n* Submodules `rabit` and `dmlc-core` have been brought up to date, bringing bug fixes (#3330, #3221).\n* GPU support\n  - Continuous integration tests for GPU code (#3294, #3309)\n  - GPU accelerated coordinate descent algorithm (#3178)\n  - Abstract 1D vector class now works with multiple GPUs (#3287)\n  - Generate PTX code for most recent architecture (#3316)\n  - Fix a memory bug on NVIDIA K80 cards (#3293)\n  - Address performance instability for single-GPU, multi-core machines (#3324)\n* Python package\n  - FreeBSD support (#3247)\n  - Validation of feature names in `Booster.predict()` is now optional (#3323)\n* Updated Sklearn API\n  - Validation sets now support instance weights (#2354)\n  - `XGBClassifier.predict_proba()` should not support `output_margin` option. (#3343) See BREAKING CHANGES below.\n* R package:\n  - Better handling of NULL in `print.xgb.Booster()` (#3338)\n  - Comply with CRAN policy by removing compiler warning suppression (#3329)\n  - Updated CRAN submission\n* JVM packages\n  - JVM packages will now use the same versioning scheme as other packages (#3253)\n  - Update Spark to 2.3 (#3254)\n  - Add scripts to cross-build and deploy artifacts (#3276, #3307)\n  - Fix a compilation error for Scala 2.10 (#3332)\n* BREAKING CHANGES\n  - `XGBClassifier.predict_proba()` no longer accepts parameter `output_margin`. The parameter makes no sense for `predict_proba()` because the method is to predict class probabilities, not raw margin scores.\n\n## v0.71 (2018.04.11)\n* This is a minor release, mainly motivated by issues concerning `pip install`, e.g. #2426, #3189, #3118, and #3194.\n  With this release, users of Linux and MacOS will be able to run `pip install` for the most part.\n* Refactored linear booster class (`gblinear`), so as to support multiple coordinate descent updaters (#3103, #3134). See BREAKING CHANGES below.\n* Fix slow training for multiclass classification with high number of classes (#3109)\n* Fix a corner case in approximate quantile sketch (#3167). Applicable for 'hist' and 'gpu_hist' algorithms\n* Fix memory leak in DMatrix (#3182)\n* New functionality\n  - Better linear booster class (#3103, #3134)\n  - Pairwise SHAP interaction effects (#3043)\n  - Cox loss (#3043)\n  - AUC-PR metric for ranking task (#3172)\n  - Monotonic constraints for 'hist' algorithm (#3085)\n* GPU support\n    - Create an abstract 1D vector class that moves data seamlessly between the main and GPU memory (#2935, #3116, #3068). This eliminates unnecessary PCIe data transfer during training time.\n  - Fix minor bugs (#3051, #3217)\n  - Fix compatibility error for CUDA 9.1 (#3218)\n* Python package:\n  - Correctly handle parameter `verbose_eval=0` (#3115)\n* R package:\n  - Eliminate segmentation fault on 32-bit Windows platform (#2994)\n* JVM packages\n  - Fix a memory bug involving double-freeing Booster objects (#3005, #3011)\n  - Handle empty partition in predict (#3014)\n  - Update docs and unify terminology (#3024)\n  - Delete cache files after job finishes (#3022)\n  - Compatibility fixes for latest Spark versions (#3062, #3093)\n* BREAKING CHANGES: Updated linear modelling algorithms. In particular L1/L2 regularisation penalties are now normalised to number of training examples. This makes the implementation consistent with sklearn/glmnet. L2 regularisation has also been removed from the intercept. To produce linear models with the old regularisation behaviour, the alpha/lambda regularisation parameters can be manually scaled by dividing them by the number of training examples.\n\n## v0.7 (2017.12.30)\n* **This version represents a major change from the last release (v0.6), which was released one year and half ago.**\n* Updated Sklearn API\n  - Add compatibility layer for scikit-learn v0.18: `sklearn.cross_validation` now deprecated\n  - Updated to allow use of all XGBoost parameters via `**kwargs`.\n  - Updated `nthread` to `n_jobs` and `seed` to `random_state` (as per Sklearn convention); `nthread` and `seed` are now marked as deprecated\n  - Updated to allow choice of Booster (`gbtree`, `gblinear`, or `dart`)\n  - `XGBRegressor` now supports instance weights (specify `sample_weight` parameter)\n  - Pass `n_jobs` parameter to the `DMatrix` constructor\n  - Add `xgb_model` parameter to `fit` method, to allow continuation of training\n* Refactored gbm to allow more friendly cache strategy\n  - Specialized some prediction routine\n* Robust `DMatrix` construction from a sparse matrix\n* Faster construction of `DMatrix` from 2D NumPy matrices: elide copies, use of multiple threads\n* Automatically remove nan from input data when it is sparse.\n  - This can solve some of user reported problem of istart != hist.size\n* Fix the single-instance prediction function to obtain correct predictions\n* Minor fixes\n  - Thread local variable is upgraded so it is automatically freed at thread exit.\n  - Fix saving and loading `count::poisson` models\n  - Fix CalcDCG to use base-2 logarithm\n  - Messages are now written to stderr instead of stdout\n  - Keep built-in evaluations while using customized evaluation functions\n  - Use `bst_float` consistently to minimize type conversion\n  - Copy the base margin when slicing `DMatrix`\n  - Evaluation metrics are now saved to the model file\n  - Use `int32_t` explicitly when serializing version\n  - In distributed training, synchronize the number of features after loading a data matrix.\n* Migrate to C++11\n  - The current master version now requires C++11 enabled compiled(g++4.8 or higher)\n* Predictor interface was factored out (in a manner similar to the updater interface).\n* Makefile support for Solaris and ARM\n* Test code coverage using Codecov\n* Add CPP tests\n* Add `Dockerfile` and `Jenkinsfile` to support continuous integration for GPU code\n* New functionality\n  - Ability to adjust tree model's statistics to a new dataset without changing tree structures.\n  - Ability to extract feature contributions from individual predictions, as described in [here](http://blog.datadive.net/interpreting-random-forests/) and [here](https://arxiv.org/abs/1706.06060).\n  - Faster, histogram-based tree algorithm (`tree_method='hist'`) .\n  - GPU/CUDA accelerated tree algorithms (`tree_method='gpu_hist'` or `'gpu_exact'`), including the GPU-based predictor.\n  - Monotonic constraints: when other features are fixed, force the prediction to be monotonic increasing with respect to a certain specified feature.\n  - Faster gradient calculation using AVX SIMD\n  - Ability to export models in JSON format\n  - Support for Tweedie regression\n  - Additional dropout options for DART: binomial+1, epsilon\n  - Ability to update an existing model in-place: this is useful for many applications, such as determining feature importance\n* Python package:\n  - New parameters:\n    - `learning_rates` in `cv()`\n    - `shuffle` in `mknfold()`\n    - `max_features` and `show_values` in `plot_importance()`\n    - `sample_weight` in `XGBRegressor.fit()`\n  - Support binary wheel builds\n  - Fix `MultiIndex` detection to support Pandas 0.21.0 and higher\n  - Support metrics and evaluation sets whose names contain `-`\n  - Support feature maps when plotting trees\n  - Compatibility fix for Python 2.6\n  - Call `print_evaluation` callback at last iteration\n  - Use appropriate integer types when calling native code, to prevent truncation and memory error\n  - Fix shared library loading on Mac OS X\n* R package:\n  - New parameters:\n    - `silent` in `xgb.DMatrix()`\n    - `use_int_id` in `xgb.model.dt.tree()`\n    - `predcontrib` in `predict()`\n    - `monotone_constraints` in `xgb.train()`\n  - Default value of the `save_period` parameter in `xgboost()` changed to NULL (consistent with `xgb.train()`).\n  - It's possible to custom-build the R package with GPU acceleration support.\n  - Enable JVM build for Mac OS X and Windows\n  - Integration with AppVeyor CI\n  - Improved safety for garbage collection\n  - Store numeric attributes with higher precision\n  - Easier installation for devel version\n  - Improved `xgb.plot.tree()`\n  - Various minor fixes to improve user experience and robustness\n  - Register native code to pass CRAN check\n  - Updated CRAN submission\n* JVM packages\n  - Add Spark pipeline persistence API\n  - Fix data persistence: loss evaluation on test data had wrongly used caches for training data.\n  - Clean external cache after training\n  - Implement early stopping\n  - Enable training of multiple models by distinguishing stage IDs\n  - Better Spark integration: support RDD / dataframe / dataset, integrate with Spark ML package\n  - XGBoost4j now supports ranking task\n  - Support training with missing data\n  - Refactor JVM package to separate regression and classification models to be consistent with other machine learning libraries\n  - Support XGBoost4j compilation on Windows\n  - Parameter tuning tool\n  - Publish source code for XGBoost4j to maven local repo\n  - Scala implementation of the Rabit tracker (drop-in replacement for the Java implementation)\n  - Better exception handling for the Rabit tracker\n  - Persist `num_class`, number of classes (for classification task)\n  - `XGBoostModel` now holds `BoosterParams`\n  - libxgboost4j is now part of CMake build\n  - Release `DMatrix` when no longer needed, to conserve memory\n  - Expose `baseMargin`, to allow initialization of boosting with predictions from an external model\n  - Support instance weights\n  - Use `SparkParallelismTracker` to prevent jobs from hanging forever\n  - Expose train-time evaluation metrics via `XGBoostModel.summary`\n  - Option to specify `host-ip` explicitly in the Rabit tracker\n* Documentation\n  - Better math notation for gradient boosting\n  - Updated build instructions for Mac OS X\n  - Template for GitHub issues\n  - Add `CITATION` file for citing XGBoost in scientific writing\n  - Fix dropdown menu in xgboost.readthedocs.io\n  - Document `updater_seq` parameter\n  - Style fixes for Python documentation\n  - Links to additional examples and tutorials\n  - Clarify installation requirements\n* Changes that break backward compatibility\n  - [#1519](https://github.com/dmlc/xgboost/pull/1519) XGBoost-spark no longer contains APIs for DMatrix; use the public booster interface instead.\n  - [#2476](https://github.com/dmlc/xgboost/pull/2476) `XGBoostModel.predict()` now has a different signature\n\n\n## v0.6 (2016.07.29)\n* Version 0.5 is skipped due to major improvements in the core\n* Major refactor of core library.\n  - Goal: more flexible and modular code as a portable library.\n  - Switch to use of c++11 standard code.\n  - Random number generator defaults to ```std::mt19937```.\n  - Share the data loading pipeline and logging module from dmlc-core.\n  - Enable registry pattern to allow optionally plugin of objective, metric, tree constructor, data loader.\n    - Future plugin modules can be put into xgboost/plugin and register back to the library.\n  - Remove most of the raw pointers to smart ptrs, for RAII safety.\n* Add official option to approximate algorithm `tree_method` to parameter.\n  - Change default behavior to switch to prefer faster algorithm.\n  - User will get a message when approximate algorithm is chosen.\n* Change library name to libxgboost.so\n* Backward compatiblity\n  - The binary buffer file is not backward compatible with previous version.\n  - The model file is backward compatible on 64 bit platforms.\n* The model file is compatible between 64/32 bit platforms(not yet tested).\n* External memory version and other advanced features will be exposed to R library as well on linux.\n  - Previously some of the features are blocked due to C++11 and threading limits.\n  - The windows version is still blocked due to Rtools do not support ```std::thread```.\n* rabit and dmlc-core are maintained through git submodule\n  - Anyone can open PR to update these dependencies now.\n* Improvements\n  - Rabit and xgboost libs are not thread-safe and use thread local PRNGs\n  - This could fix some of the previous problem which runs xgboost on multiple threads.\n* JVM Package\n  - Enable xgboost4j for java and scala\n  - XGBoost distributed now runs on Flink and Spark.\n* Support model attributes listing for meta data.\n  - https://github.com/dmlc/xgboost/pull/1198\n  - https://github.com/dmlc/xgboost/pull/1166\n* Support callback API\n  - https://github.com/dmlc/xgboost/issues/892\n  - https://github.com/dmlc/xgboost/pull/1211\n  - https://github.com/dmlc/xgboost/pull/1264\n* Support new booster DART(dropout in tree boosting)\n  - https://github.com/dmlc/xgboost/pull/1220\n* Add CMake build system\n  - https://github.com/dmlc/xgboost/pull/1314\n\n## v0.47 (2016.01.14)\n\n* Changes in R library\n  - fixed possible problem of poisson regression.\n  - switched from 0 to NA for missing values.\n  - exposed access to additional model parameters.\n* Changes in Python library\n  - throws exception instead of crash terminal when a parameter error happens.\n  - has importance plot and tree plot functions.\n  - accepts different learning rates for each boosting round.\n  - allows model training continuation from previously saved model.\n  - allows early stopping in CV.\n  - allows feval to return a list of tuples.\n  - allows eval_metric to handle additional format.\n  - improved compatibility in sklearn module.\n  - additional parameters added for sklearn wrapper.\n  - added pip installation functionality.\n  - supports more Pandas DataFrame dtypes.\n  - added best_ntree_limit attribute, in addition to best_score and best_iteration.\n* Java api is ready for use\n* Added more test cases and continuous integration to make each build more robust.\n\n## v0.4 (2015.05.11)\n\n* Distributed version of xgboost that runs on YARN, scales to billions of examples\n* Direct save/load data and model from/to S3 and HDFS\n* Feature importance visualization in R module, by Michael Benesty\n* Predict leaf index\n* Poisson regression for counts data\n* Early stopping option in training\n* Native save load support in R and python\n  - xgboost models now can be saved using save/load in R\n  - xgboost python model is now pickable\n* sklearn wrapper is supported in python module\n* Experimental External memory version\n\n\n## v0.3 (2014.09.07)\n\n* Faster tree construction module\n  - Allows subsample columns during tree construction via ```bst:col_samplebytree=ratio```\n* Support for boosting from initial predictions\n* Experimental version of LambdaRank\n* Linear booster is now parallelized, using parallel coordinated descent.\n* Add [Code Guide](src/README.md) for customizing objective function and evaluation\n* Add R module\n\n\n## v0.2x (2014.05.20)\n\n* Python module\n* Weighted samples instances\n* Initial version of pairwise rank\n\n\n## v0.1 (2014.03.26)\n\n* Initial release\n"
        },
        {
          "name": "R-package",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.248046875,
          "content": "<img src=\"https://xgboost.ai/images/logo/xgboost-logo-trimmed.png\" width=200/> eXtreme Gradient Boosting\n===========\n\n[![Build Status](https://badge.buildkite.com/aca47f40a32735c00a8550540c5eeff6a4c1d246a580cae9b0.svg?branch=master)](https://buildkite.com/xgboost/xgboost-ci)\n[![XGBoost-CI](https://github.com/dmlc/xgboost/workflows/XGBoost-CI/badge.svg?branch=master)](https://github.com/dmlc/xgboost/actions)\n[![Documentation Status](https://readthedocs.org/projects/xgboost/badge/?version=latest)](https://xgboost.readthedocs.org)\n[![GitHub license](https://dmlc.github.io/img/apache2.svg)](./LICENSE)\n[![CRAN Status Badge](https://www.r-pkg.org/badges/version/xgboost)](https://cran.r-project.org/web/packages/xgboost)\n[![PyPI version](https://badge.fury.io/py/xgboost.svg)](https://pypi.python.org/pypi/xgboost/)\n[![Conda version](https://img.shields.io/conda/vn/conda-forge/py-xgboost.svg)](https://anaconda.org/conda-forge/py-xgboost)\n[![Optuna](https://img.shields.io/badge/Optuna-integrated-blue)](https://optuna.org)\n[![Twitter](https://img.shields.io/badge/@XGBoostProject--_.svg?style=social&logo=twitter)](https://twitter.com/XGBoostProject)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/dmlc/xgboost/badge)](https://api.securityscorecards.dev/projects/github.com/dmlc/xgboost)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/comet-ml/comet-examples/blob/master/integrations/model-training/xgboost/notebooks/how_to_use_comet_with_xgboost_tutorial.ipynb)\n\n[Community](https://xgboost.ai/community) |\n[Documentation](https://xgboost.readthedocs.org) |\n[Resources](demo/README.md) |\n[Contributors](CONTRIBUTORS.md) |\n[Release Notes](https://xgboost.readthedocs.io/en/latest/changes/index.html)\n\nXGBoost is an optimized distributed gradient boosting library designed to be highly ***efficient***, ***flexible*** and ***portable***.\nIt implements machine learning algorithms under the [Gradient Boosting](https://en.wikipedia.org/wiki/Gradient_boosting) framework.\nXGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way.\nThe same code runs on major distributed environment (Kubernetes, Hadoop, SGE, Dask, Spark, PySpark) and can solve problems beyond billions of examples.\n\nLicense\n-------\n© Contributors, 2021. Licensed under an [Apache-2](https://github.com/dmlc/xgboost/blob/master/LICENSE) license.\n\nContribute to XGBoost\n---------------------\nXGBoost has been developed and used by a group of active community members. Your help is very valuable to make the package better for everyone.\nCheckout the [Community Page](https://xgboost.ai/community).\n\nReference\n---------\n- Tianqi Chen and Carlos Guestrin. [XGBoost: A Scalable Tree Boosting System](https://arxiv.org/abs/1603.02754). In 22nd SIGKDD Conference on Knowledge Discovery and Data Mining, 2016\n- XGBoost originates from research project at University of Washington.\n\nSponsors\n--------\nBecome a sponsor and get a logo here. See details at [Sponsoring the XGBoost Project](https://xgboost.ai/sponsors). The funds are used to defray the cost of continuous integration and testing infrastructure (https://xgboost-ci.net).\n\n## Open Source Collective sponsors\n[![Backers on Open Collective](https://opencollective.com/xgboost/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/xgboost/sponsors/badge.svg)](#sponsors)\n\n### Sponsors\n[[Become a sponsor](https://opencollective.com/xgboost#sponsor)]\n\n<a href=\"https://www.nvidia.com/en-us/\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/xgboost-ai/xgboost-ai.github.io/master/images/sponsors/nvidia.jpg\" alt=\"NVIDIA\" width=\"72\" height=\"72\"></a>\n<a href=\"https://www.intel.com/\" target=\"_blank\"><img src=\"https://images.opencollective.com/intel-corporation/2fa85c1/logo/256.png\" width=\"72\" height=\"72\"></a>\n<a href=\"https://www.comet.com/site/?utm_source=xgboost&utm_medium=github&utm_content=readme\" target=\"_blank\"><img src=\"https://cdn.comet.ml/img/notebook_logo.png\" height=\"72\"></a>\n\n### Backers\n[[Become a backer](https://opencollective.com/xgboost#backer)]\n\n<a href=\"https://opencollective.com/xgboost#backers\" target=\"_blank\"><img src=\"https://opencollective.com/xgboost/backers.svg?width=890\"></a>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# Security Policy\n\n## Supported Versions\n\n<!-- Use this section to tell people about which versions of your project are\ncurrently being supported with security updates. -->\nSecurity updates are applied only to the most recent release.\n\n## Reporting a Vulnerability\n\n<!-- Use this section to tell people how to report a vulnerability.\n\nTell them where to go, how often they can expect to get an update on a\nreported vulnerability, what to expect if the vulnerability is accepted or\ndeclined, etc. -->\n\nTo report a security issue, please email\n[security@xgboost-ci.net](mailto:security@xgboost-ci.net)\nwith a description of the issue, the steps you took to create the issue,\naffected versions, and, if known, mitigations for the issue.\n\nAll support will be made on the best effort base, so please indicate the \"urgency level\" of the vulnerability as Critical, High, Medium or Low.\n"
        },
        {
          "name": "amalgamation",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "dmlc-core",
          "type": "commit",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gputreeshap",
          "type": "commit",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "jvm-packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ops",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "python-package",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}