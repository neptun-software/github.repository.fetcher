{
  "metadata": {
    "timestamp": 1736566420949,
    "page": 18,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SerenityOS/serenity",
      "stars": 30937,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.7744140625,
          "content": "---\nAlignEscapedNewlines: Left\nAlignTrailingComments:\n    Kind: Always\n    OverEmptyLines: 0\nBasedOnStyle: WebKit\nBraceWrapping:\n    AfterFunction: true\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: true\nBreakConstructorInitializers: BeforeComma\nIndentPPDirectives: AfterHash\nIndentRequiresClause: false\nInsertNewlineAtEOF: true\nLineEnding: LF\nNamespaceIndentation: None\nQualifierAlignment: Right\nRemoveSemicolon: true\nRequiresClausePosition: WithFollowing\nRequiresExpressionIndentation: OuterScope\nSpaceAfterTemplateKeyword: false\n\n---\nLanguage: ObjC\nBinPackParameters: false\nBraceWrapping:\n    AfterObjCDeclaration: true\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\n\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.8359375,
          "content": "---\n# Globally Disabled checks:\n#\n# bugprone-easily-swappable-parameters: This warning is loud with no clear advice on how to fix the potential problem\n# FIXME: bugprone-macro-parentheses: Enable with clang-tidy-14 when NOLINTBEGIN/NOLINTEND are available for code generating macros\n# bugprone-reserved-identifier: LibC headers that show up in the header filter are part of \"the implementation\"\n#   cert-dcl37-c: Alias for bugprone-reserved-identifier\n#   cert-dcl51-cpp: Alias for bugprone-reserved-identifier\n# cert-dcl21-cpp: No reference to this rule exists on Carnegie Mellon's SEI CERT C++ Confluence. And the suggestion is unusual\n# misc-no-recursion: The project uses recursive algorithms in several places.\n# misc-include-cleaner: This check is nice for cleanliness, but is very very noisy\n# FIXME: misc-non-private-member-variables-in-classes: Audit uses of protected member variables to see if they really need to be protected\n# performance-noexcept-move-constructor: The project does not use exceptions, so there are no such optimizations available\n# performance-no-int-to-ptr: This rule flags every pointer to integer cast, which gets quite noisy. Should only be enabled on a case-by-case basis\n# readability-braces-around-statements: Redundant braces around single-line conditions is against project style\n# readability-function-cognitive-complexity: Most regular contributors seem to turn this one off anyway. Violations are hard to fix as well\n# readability-magic-numbers: This check is very noisy in the codebase, especially in AK.\n# readability-named-parameter: We frequently omit parameter names to work around -Wunused-parameter\n# FIXME: readability-uppercase-literal-suffix: Enable this check, the rationale is solid but the findings are numerous\n#\nChecks: >\n  -*,\n  bugprone-*,\n  cert-*,\n  clang-analyzer-*,\n  concurrency-*,\n  misc-*,\n  performance-*,\n  portability-*,\n  readability-*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-macro-parentheses,\n  -bugprone-reserved-identifier,-cert-dcl37-c,-cert-dcl51-cpp,\n  -cert-dcl21-cpp,\n  -misc-include-cleaner,\n  -misc-no-recursion,\n  -misc-non-private-member-variables-in-classes,\n  -misc-use-anonymous-namespace,\n  -performance-noexcept-move-constructor,\n  -performance-no-int-to-ptr,\n  -readability-braces-around-statements,\n  -readability-function-cognitive-complexity,\n  -readability-identifier-length,\n  -readability-magic-numbers,\n  -readability-named-parameter,\n  -readability-uppercase-literal-suffix,\n  -readability-use-anyofallof,\nWarningsAsErrors: ''\nHeaderFilterRegex: 'AK|Userland|Kernel|Tests'\nFormatStyle: none\nCheckOptions:\n  - key: bugprone-dangling-handle.HandleClasses\n    value: 'AK::StringView;AK::Span'\n  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value: true\n  - key: readability-implicit-bool-conversion.AllowPointerConditions\n    value: true\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1123046875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ncharset = utf-8\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.314453125,
          "content": "# Set the default behavior to always use LF file endings\n* text=auto eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.bmp binary\n*.dds binary\n*.gif binary\n*.jpg binary\n*.pbm binary\n*.pgm binary\n*.png binary\n*.ppm binary\n\n# Prevent port patches from being normalized\n/Ports/**/patches/* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8095703125,
          "content": "*.swo\n*.swp\n*.config\n*.creator\n*.creator.user\n*.creator.user.*\n*.files\n*.includes\n*.cflags\n*.cxxflags\n*.autosave\nMeta/Lagom/build\nBuild\nToolchain/Tarballs\nToolchain/Build\nToolchain/Local\n.vscode\n.ccls-cache\ncompile_commands.json\n.cache\n.clang_complete\n.clangd\n.idea/\ncmake-build-debug/\noutput/\nrun-local.sh\nsync-local.sh\n.vim/\n.exrc\n.helix/\n\n# Gradle/AndroidStudio\n.gradle/\n.cxx/\nlocal.properties\n# We can't build from cmd.exe anyway\ngradlew.bat\n\nUserland/Libraries/LibWasm/Tests/Fixtures/SpecTests\nUserland/Libraries/LibWasm/Tests/Spec\n\nTests/LibWeb/WPT/wpt\nTests/LibWeb/WPT/metadata\nTests/LibWeb/WPT/MANIFEST.json\n\n# Ensure that all files in /Base can be tracked, even if they match one of the above rules\n!/Base/**\n\n# Keep last to ensure .DS_Store is never tracked, even if otherwise allowed by any exception above.\n.DS_Store\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 0.1767578125,
          "content": "buildconfig = \"//Meta/gn/build/BUILDCONFIG.gn\"\nexec_script_whitelist = []\nexport_compile_commands = [ \":*\" ]\nscript_executable = \"python3\"\nsecondary_source = \"//Meta/gn/secondary/\"\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.8193359375,
          "content": "Ali Mohammad Pur <mpfard@serenityos.org> <ali.mpfard@gmail.com>\n<mpfard@serenityos.org> <Ali.mpfard@gmail.com>\nBrian Gianforcaro <bgianf@serenityos.org> <b.gianfo@gmail.com>\n<gbeutner@serenityos.org> <gunnar@beutner.name>\nMax Wipfli <max.wipfli@serenityos.org> <mail@maxwipfli.ch>\nSam Atkins <sam@ladybird.org> <atkinssj@gmail.com>\n<sam@ladybird.org> <github@samatkins.co.uk>\n<sam@ladybird.org> <atkinssj@serenityos.org>\nKarol Kosek <krkk@serenityos.org> <krkk@krkk.ct8.pl>\ndavidot <davidot@serenityos.org> <david.tuin@gmail.com>\nTobias Christiansen <tobyase@serenityos.org> <tobi@tobyase.de>\nkleines Filmr√∂llchen <filmroellchen@serenityos.org> <malu.bertsch@gmail.com>\n<filmroellchen@serenityos.org> <28656157+kleinesfilmroellchen@users.noreply.github.com>\nLenny Maiorani <lenny@serenityos.org> <lenny@colorado.edu>\nKenneth Myhra <kennethmyhra@serenityos.org> <kennethmyhra@gmail.com>\nnetworkException <networkexception@serenityos.org> <git@nwex.de>\nnetworkException <networkexception@serenityos.org> <github@nwex.de>\nThomas Voss <mail@thomasvoss.com> <thomasvoss@live.com>\n<kling@serenityos.org> <awesomekling@gmail.com>\n<kling@serenityos.org> <ankl@hms.se>\nLiav A <liavalb@gmail.com> <51659396+supercomputer7@users.noreply.github.com>\n<akaster@serenityos.org> <andrewdkaster@gmail.com>\n<idan.horowitz@gmail.com> <idan.horowitz@ibm.com>\nHendiadyoin1 <leon.a@serenityos.org> <37629766+Hendiadyoin1@users.noreply.github.com>\n<leon.a@serenityos.org> <leon2002.la@gmail.com>\nJesse Buhagiar <jooster669@gmail.com> <jesse.buhagiar@student.rmit.edu.au>\nLuke Wilde <lukew@serenityos.org> <luke.wilde@live.co.uk>\n<bugaevc@serenityos.org> <bugaevc@gmail.com>\n<s.unverwerth@serenityos.org> <s.unverwerth@gmx.de>\nMatthew Olsson <matthewcolsson@gmail.com>\n<shannon@serenityos.org> <shannon.ml.booth@gmail.com>\nUlveon <git_commit@ulveon.net> <neurology_tibia679@8alias.com>\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.701171875,
          "content": "repos:\n  - repo: local\n    hooks:\n      - id: meta-lint-ci\n        name: Running Meta/lint-ci.sh to ensure changes will pass linting on CI\n        entry: bash Meta/lint-ci.sh\n        args: [ --no-ports ]\n        stages: [ pre-commit ]\n        language: system\n\n      - id: meta-lint-ports\n        name: Running Meta/lint-ports.py to ensure changes will pass linting on CI\n        entry: Meta/lint-ports.py\n        pass_filenames: false\n        files: ^Ports/\n        stages: [ pre-commit ]\n        language: system\n\n      - id: meta-lint-commit\n        name: Lint commit message to ensure it will pass the commit linting on CI\n        entry: Meta/lint-commit.sh\n        stages: [ commit-msg ]\n        language: system\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.748046875,
          "content": "# Automatically regenerated Markdown files based on git patches.\nToolchain/Patches\nPorts/*/patches\n\nBase/home/anon/Source/js\nUserland/Libraries/LibJS/Tests/invalid-lhs-in-assignment.js\nUserland/Libraries/LibJS/Tests/unicode-identifier-escape.js\nUserland/Libraries/LibJS/Tests/modules/failing.mjs\n# FIXME: Uses regex flags which cause a syntax error in prettier.\nUserland/Libraries/LibJS/Tests/builtins/RegExp/RegExp.prototype.flags.js\n\n# FIXME: Remove once prettier is updated to support using declarations.\nUserland/Libraries/LibJS/Tests/builtins/DisposableStack/DisposableStack.prototype.@@dispose.js\nUserland/Libraries/LibJS/Tests/modules/top-level-dispose.mjs\nUserland/Libraries/LibJS/Tests/using-declaration.js\nUserland/Libraries/LibJS/Tests/using-for-loops.js\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.26953125,
          "content": "{\n    \"arrowParens\": \"avoid\",\n    \"bracketSpacing\": true,\n    \"endOfLine\": \"lf\",\n    \"insertPragma\": false,\n    \"printWidth\": 100,\n    \"quoteProps\": \"as-needed\",\n    \"semi\": true,\n    \"singleQuote\": false,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"es5\",\n    \"useTabs\": false\n}\n"
        },
        {
          "name": ".ycm_extra_conf.py",
          "type": "blob",
          "size": 4.1728515625,
          "content": "# Based on the example .ycm_extra_conf.py from YouCompleteMe, adapted\n# for SerenityOS.\n#\n# This file is NOT licensed under the GPLv3, which is the license for the rest\n# of YouCompleteMe.\n#\n# Here's the license text for this file:\n#\n# This is free and unencumbered software released into the public domain.\n#\n# Anyone is free to copy, modify, publish, use, compile, sell, or\n# distribute this software, either in source code form or as a compiled\n# binary, for any purpose, commercial or non-commercial, and by any\n# means.\n#\n# In jurisdictions that recognize copyright laws, the author or authors\n# of this software dedicate any and all copyright interest in the\n# software to the public domain. We make this dedication for the benefit\n# of the public at large and to the detriment of our heirs and\n# successors. We intend this dedication to be an overt act of\n# relinquishment in perpetuity of all present and future rights to this\n# software under copyright law.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n# OTHER DEALINGS IN THE SOFTWARE.\n#\n# For more information, please refer to <http://unlicense.org/>\n\nimport os\nimport subprocess\nimport ycm_core\n\nDIR_OF_THIS_SCRIPT = os.path.abspath(os.path.dirname(__file__))\nSOURCE_EXTENSIONS = ['.cpp', '.c']\n\ngcc_path = None\nfor serenity_arch in ['x86_64', 'aarch64']:\n    candidate_gcc_path = os.path.join(\n        DIR_OF_THIS_SCRIPT, 'Toolchain',\n        'Local', serenity_arch, 'bin', f'{serenity_arch}-pc-serenity-gcc'\n    )\n    if os.path.isfile(candidate_gcc_path):\n        gcc_path = candidate_gcc_path\n        break\n\nserenity_flags = [\n    '-D__serenity__',\n    '-D__unix__'\n]\n\nif gcc_path:\n    gcc_output = subprocess.check_output(\n      [gcc_path, '-E', '-Wp,-v', '-'],\n      stdin=subprocess.DEVNULL, stderr=subprocess.STDOUT\n    ).rstrip().decode('utf8').split(\"\\n\")\n\n    for line in gcc_output:\n        if not line.startswith(' '):\n            continue\n        include_path = line.lstrip()\n        if '/../Build/' in include_path:\n            continue\n        serenity_flags.extend(('-isystem', include_path))\n\ndatabase = ycm_core.CompilationDatabase(os.path.join(DIR_OF_THIS_SCRIPT, f'Build/{serenity_arch}'))\n\n\ndef is_header_file(filename):\n    extension = os.path.splitext(filename)[1]\n    return extension in ['.h', '.hxx', '.hpp', '.hh']\n\n\ndef find_corresponding_source_file(filename):\n    if is_header_file(filename):\n        basename = os.path.splitext(filename)[0]\n        for extension in SOURCE_EXTENSIONS:\n            replacement_file = basename + extension\n            if os.path.exists(replacement_file):\n                return replacement_file\n    return filename\n\n\ndef startswith_any(string, prefixes):\n    for prefix in prefixes:\n        if string.startswith(prefix):\n            return True\n    return False\n\n\ndef Settings(**kwargs):\n    if kwargs['language'] != 'cfamily':\n        return {}\n    # If the file is a header, try to find the corresponding source file and\n    # retrieve its flags from the compilation database if using one. This is\n    # necessary since compilation databases don't have entries for header files.\n    # In addition, use this source file as the translation unit. This makes it\n    # possible to jump from a declaration in the header file to its definition\n    # in the corresponding source file.\n    filename = find_corresponding_source_file(kwargs['filename'])\n\n    compilation_info = database.GetCompilationInfoForFile(filename)\n    if not compilation_info.compiler_flags_:\n        return {}\n\n    ignored_flags = [\n        '--sysroot',\n        '-fzero-call-used-regs=used-gpr',\n    ]\n\n    final_flags = [flag for flag in compilation_info.compiler_flags_ if not startswith_any(flag, ignored_flags)]\n    final_flags.extend(serenity_flags)\n\n    return {\n        'flags': final_flags,\n        'include_paths_relative_to_dir': DIR_OF_THIS_SCRIPT,\n        'override_filename': filename\n    }\n"
        },
        {
          "name": "AK",
          "type": "tree",
          "content": null
        },
        {
          "name": "Base",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.8349609375,
          "content": "cmake_minimum_required(VERSION 3.25)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/Meta/CMake\")\n\nproject(SerenityOS C CXX ASM)\n\nif(NOT \"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  message(FATAL_ERROR\n    \": Don't use CMAKE_BUILD_TYPE when building serenity.\\n\"\n    \"The default build type is optimized with debug info and asserts enabled,\\n\"\n    \"and that's all there is.\")\nendif()\n\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"SerenityOS\")\n    message(FATAL_ERROR \"System name is not SerenityOS, this is unsupported.\\n\"\n            \"Please re-read the BuildInstructions documentation, and use the superbuild configuration\\n\")\nendif()\n\n# Check for toolchain mismatch, user might need to rebuild toolchain\nset(GCC_VERSION \"13.2.0\")\nset(LLVM_VERSION \"19.1.0\")\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(EXPECTED_COMPILER_VERSION \"${GCC_VERSION}\")\nelse()\n    set(EXPECTED_COMPILER_VERSION \"${LLVM_VERSION}\")\nendif()\nif (NOT CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL \"${EXPECTED_COMPILER_VERSION}\")\n    message(FATAL_ERROR \"${CMAKE_CXX_COMPILER_ID} version (${CMAKE_CXX_COMPILER_VERSION}) does not match \"\n            \"expected compiler version (${EXPECTED_COMPILER_VERSION}).\\n\"\n            \"Please rebuild the ${CMAKE_CXX_COMPILER_ID} Toolchain\\n\")\nendif()\n\nset(CMAKE_INSTALL_MESSAGE NEVER)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(NOT COMMAND serenity_option)\n    macro(serenity_option)\n        set(${ARGV})\n    endmacro()\nendif()\ninclude(serenity_options NO_POLICY_SCOPE)\n\ninclude(setup_ccache)\n\nif (NOT HACKSTUDIO_BUILD)\n\n    include(check_for_dependencies)\n\n    # Host tools, required to generate files for the build\n    find_package(Lagom CONFIG REQUIRED)\nendif()\n\n# Meta target to run all code-gen steps in the build.\nadd_custom_target(all_generated)\n\nadd_custom_target(run\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"${SerenityOS_SOURCE_DIR}/Meta/run.sh\"\n    USES_TERMINAL\n)\n\n# This can currently only be implemented by ordered commands\n# as cmake doesn't support inter dependency ordering, and we\n# would like to avoid inject dependencies on the existing\n# custom commands to allow people to run commands adhoc with\n# out forcing re-builds when they might not want them.\nadd_custom_target(setup-and-run\n    COMMAND ${CMAKE_MAKE_PROGRAM} install\n    COMMAND ${CMAKE_MAKE_PROGRAM} qemu-image\n    COMMAND ${CMAKE_MAKE_PROGRAM} run\n    USES_TERMINAL\n)\n\nadd_custom_target(qemu-image\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"LLVM_VERSION=${CMAKE_CXX_COMPILER_VERSION}\" \"${SerenityOS_SOURCE_DIR}/Meta/build-image-qemu.sh\"\n    BYPRODUCTS \"${CMAKE_BINARY_DIR}/_disk_image\"\n    USES_TERMINAL\n)\nadd_custom_target(grub-image\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"LLVM_VERSION=${CMAKE_CXX_COMPILER_VERSION}\" \"${SerenityOS_SOURCE_DIR}/Meta/build-image-grub.sh\"\n    BYPRODUCTS ${CMAKE_BINARY_DIR}/grub_disk_image\n    USES_TERMINAL\n)\nadd_custom_target(limine-image\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"LLVM_VERSION=${CMAKE_CXX_COMPILER_VERSION}\" \"${SerenityOS_SOURCE_DIR}/Meta/build-image-limine.sh\"\n    BYPRODUCTS ${CMAKE_BINARY_DIR}/limine_disk_image\n    USES_TERMINAL\n)\nadd_custom_target(extlinux-image\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"LLVM_VERSION=${CMAKE_CXX_COMPILER_VERSION}\" \"${SerenityOS_SOURCE_DIR}/Meta/build-image-extlinux.sh\"\n    BYPRODUCTS \"${CMAKE_BINARY_DIR}/extlinux_disk_image\"\n    USES_TERMINAL\n)\nadd_custom_target(install-native-partition\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"LLVM_VERSION=${CMAKE_CXX_COMPILER_VERSION}\" \"${SerenityOS_SOURCE_DIR}/Meta/build-native-partition.sh\"\n    USES_TERMINAL\n)\n\nadd_custom_target(lint-shell-scripts\n    COMMAND \"${SerenityOS_SOURCE_DIR}/Meta/lint-shell-scripts.sh\"\n    USES_TERMINAL\n)\nadd_custom_target(check-style\n    COMMAND \"${SerenityOS_SOURCE_DIR}/Meta/check-style.sh\"\n    USES_TERMINAL\n)\n\nadd_custom_target(install-ports\n    COMMAND \"${CMAKE_COMMAND}\" -E env \"SERENITY_SOURCE_DIR=${SerenityOS_SOURCE_DIR}\" \"SERENITY_ARCH=${SERENITY_ARCH}\" \"SERENITY_TOOLCHAIN=${CMAKE_CXX_COMPILER_ID}\" \"${SerenityOS_SOURCE_DIR}/Meta/install-ports-tree.sh\"\n    USES_TERMINAL\n)\n\nif (NOT HACKSTUDIO_BUILD)\n\n    add_custom_target(configure-components\n        COMMAND \"$<TARGET_FILE:Lagom::ConfigureComponents>\"\n        USES_TERMINAL\n    )\n    add_dependencies(configure-components Lagom::ConfigureComponents)\n\nendif()\n\nif (ENABLE_ALL_DEBUG_FACILITIES)\n    set(ENABLE_ALL_THE_DEBUG_MACROS ON)\n    set(ENABLE_EXTRA_KERNEL_DEBUG_SYMBOLS ON)\n\n    # Immediately finds violations during boot, shouldn't be discoverable\n    # by people who aren't working on fixing issues. Use this check to make\n    # sure this code continues to build instead of all_debug_macros to avoid\n    # people filing bugs.\n    set(KMALLOC_VERIFY_NO_SPINLOCK_HELD ON)\n\n    # Enables KCOV API and injects kernel coverage instrumentation via\n    # -fsanitize-coverage=trace-pc. Mostly here to ensure that the CI catches\n    # commits breaking this flag.\n    set(ENABLE_KERNEL_COVERAGE_COLLECTION ON)\nendif()\n\nif (ENABLE_ALL_THE_DEBUG_MACROS)\n    include(all_the_debug_macros)\nendif(ENABLE_ALL_THE_DEBUG_MACROS)\n\nset(CMAKE_STAGING_PREFIX \"${CMAKE_BINARY_DIR}/Root\")\nset(CMAKE_INSTALL_PREFIX \"${CMAKE_BINARY_DIR}/Root\")\nset(CMAKE_INSTALL_DATAROOTDIR res)\nset(CMAKE_INSTALL_INCLUDEDIR usr/include)\nset(CMAKE_INSTALL_LIBDIR usr/lib)\n\nconfigure_file(AK/Debug.h.in AK/Debug.h @ONLY)\nconfigure_file(Kernel/Debug.h.in Kernel/Debug.h @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/AK/Debug.h\" DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/AK\")\n\n# We disable it completely because it makes cmake very spammy.\n# This will need to be revisited when the Loader supports RPATH/RUN_PATH.\nset(CMAKE_SKIP_RPATH TRUE)\n\ninclude(serenity_compile_options)\n\nadd_link_options(LINKER:-z,text)\nadd_link_options(LINKER:--no-allow-shlib-undefined)\n\nadd_compile_definitions(SANITIZE_PTRS)\n\nif (ENABLE_COMPILETIME_FORMAT_CHECK)\n    add_compile_definitions(ENABLE_COMPILETIME_FORMAT_CHECK)\nendif()\n\nif(\"${SERENITY_ARCH}\" STREQUAL \"aarch64\")\n    # FIXME: re-enable this warning\n    add_compile_options(-Wno-type-limits)\nendif()\n\nadd_link_options(-Wno-unused-command-line-argument)\n\ninclude_directories(.)\ninclude_directories(Userland/Libraries)\ninclude_directories(Userland/Libraries/LibCrypt)\ninclude_directories(Userland/Libraries/LibSystem)\ninclude_directories(Userland/Services)\ninclude_directories(Userland)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/Userland/Services)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/Userland/Libraries)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/Userland)\n\ninclude(jakt)\n\noption(BUILD_EVERYTHING \"Build all optional components\" ON)\n\ninclude(utils)\ninclude(flac_spec_tests)\ninclude(download_raspberry_pi_dtb)\n\nserenity_component(\n    Tests\n    RECOMMENDED\n)\n\nif (HACKSTUDIO_BUILD)\n    include_directories(/usr/include/Userland/Services)\n    include(${HACKSTUDIO_BUILD_CMAKE_FILE})\n    return()\nendif()\n\nadd_library(GenericClangPlugin INTERFACE)\nadd_library(JSClangPlugin INTERFACE)\nif (ENABLE_CLANG_PLUGINS AND CMAKE_CXX_COMPILER_ID MATCHES \"Clang$\")\n    target_link_libraries(GenericClangPlugin INTERFACE Lagom::GenericClangPlugin)\n    target_link_libraries(JSClangPlugin INTERFACE Lagom::JSClangPlugin)\nendif()\n\nadd_subdirectory(AK)\nadd_subdirectory(Kernel)\n\n# FIXME: vptr sanitizing requires.. intense ABI wrangling of std::type_info\n#        And would be better served by porting ubsan_type_hash_itanium.cpp from compiler-rt\nif (ENABLE_UNDEFINED_SANITIZER)\n    add_compile_options(-fsanitize=undefined -fno-sanitize=vptr)\n    add_link_options(-fsanitize=undefined -fno-sanitize=vptr)\n\n    if (UNDEFINED_BEHAVIOR_IS_FATAL)\n        add_compile_options(-fno-sanitize-recover=undefined)\n    endif()\nendif()\n\nif (ENABLE_MOLD_LINKER)\n    add_link_options(-fuse-ld=mold)\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang$\" OR ENABLE_MOLD_LINKER)\n    add_link_options(LINKER:--pack-dyn-relocs=relr)\nelseif(\"${SERENITY_ARCH}\" STREQUAL \"x86_64\")\n    # The BFD linker only supports RELR relocations on x86 and POWER.\n    add_link_options(LINKER:-z,pack-relative-relocs)\nendif()\n\nadd_subdirectory(Userland)\nadd_subdirectory(Tests)\n\nif (ENABLE_COMPILETIME_HEADER_CHECK)\n    add_subdirectory(Meta/HeaderCheck)\nendif()\n\nexport_components(\"${CMAKE_BINARY_DIR}/components.ini\")\n\n# it seems like cmake cannot uncompress *.gz files... only ZIP/tar.gz.\n# Lets download the uncompressed versions.\n# https://gitlab.kitware.com/cmake/cmake/-/issues/23054\n\nset(PCI_IDS_FILE pci.ids)\nset(PCI_IDS_URL \"https://pci-ids.ucw.cz/v2.2/${PCI_IDS_FILE}\")\nset(PCI_IDS_DOWNLOAD_PATH \"${SERENITY_CACHE_DIR}/${PCI_IDS_FILE}\")\nset(PCI_IDS_INSTALL_PATH \"${CMAKE_STAGING_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR}\")\n\nif (ENABLE_PCI_IDS_DOWNLOAD AND NOT EXISTS \"${PCI_IDS_INSTALL_PATH}/${PCI_IDS_FILE}\")\n    download_file(\"${PCI_IDS_URL}\" \"${PCI_IDS_DOWNLOAD_PATH}\")\n    install(FILES \"${PCI_IDS_DOWNLOAD_PATH}\" DESTINATION \"${PCI_IDS_INSTALL_PATH}\")\nendif()\n\nset(USB_IDS_FILE usb.ids)\nset(USB_IDS_URL \"http://www.linux-usb.org/${USB_IDS_FILE}\")\nset(USB_IDS_DOWNLOAD_PATH \"${SERENITY_CACHE_DIR}/${USB_IDS_FILE}\")\nset(USB_IDS_INSTALL_PATH \"${CMAKE_STAGING_PREFIX}/${CMAKE_INSTALL_DATAROOTDIR}\")\n\nif (ENABLE_USB_IDS_DOWNLOAD AND NOT EXISTS \"${USB_IDS_INSTALL_PATH}/${USB_IDS_FILE}\")\n    download_file(\"${USB_IDS_URL}\" \"${USB_IDS_DOWNLOAD_PATH}\")\n    install(FILES \"${USB_IDS_DOWNLOAD_PATH}\" DESTINATION \"${USB_IDS_INSTALL_PATH}\")\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.4755859375,
          "content": "# Contributing to SerenityOS\n\nWhen contributing to SerenityOS, make sure that the changes you wish to make are in line with the project direction. If you are not sure about this, open an issue first, so we can discuss it.\n\n**For your first couple of PRs, start with something small to get familiar with the project and its development processes. Please do not start by adding a new application, library or other large component.**\n\nEveryone is welcome to work on the project, and while we have lots of fun, it's a serious kind of fun. :^)\n\n## Communication\n\nJoin our Discord server: [SerenityOS Discord](https://discord.gg/serenityos)\n\n## Issue policy\n\nUnlike many other software projects, SerenityOS is not concerned with gaining the largest possible userbase. Its target audience is its own developers. As such, we have limited interest in feature requests from non-contributors.\n\nThat said, please do file any bugs you find, keeping the following in mind:\n\n-   One issue per bug. Putting multiple things in the same issue makes both discussion and completion unnecessarily complicated.\n-   No build issues (or other support requests). If the GitHub Actions CI build succeeds, the build problem is most likely on your side. Work it out locally, or ask in the `#build-problems` channel on Discord.\n-   Don't comment on issues just to add a joke or irrelevant commentary. Hundreds of people get notified about comments so let's keep them relevant.\n-   For bare metal issues, please include the complete debug log from the serial console and what you tried to do to solve the issue before opening the issue. Don't forget to add the hardware model of your machine and relevant details about it, to help us diagnose what the problem is.\n\n## Human language policy\n\nIn SerenityOS, we treat human language as seriously as we do programming language.\n\nThe following applies to all user-facing strings, code, comments, and commit messages:\n\n-   The official project language is American English with ISO 8601 dates and metric units.\n-   Use proper spelling, grammar, and punctuation.\n-   Write in an authoritative and technical tone.\n\nEveryone is encouraged to make use of tooling (spell checkers, etc) to make this easier.\n\n## Testing policy\n\nWhen possible, please include tests when fixing bugs or adding new features.\n\n## Code submission policy\n\nNobody is perfect, and sometimes we mess things up. That said, here are some good dos & don'ts to try and stick to:\n\n**Do:**\n\n-   Write in idiomatic SerenityOS C++23, using the `AK` containers in all code.\n-   Conform to the project coding style found in [CodingStyle.md](https://github.com/SerenityOS/serenity/blob/master/Documentation/CodingStyle.md). Use `clang-format` (version 18 or later) to automatically format C++ files. See [AdvancedBuildInstructions.md](https://github.com/SerenityOS/serenity/blob/master/Documentation/AdvancedBuildInstructions.md#clang-format-updates) for instructions on how to get an up-to-date version if your OS distribution does not ship clang-format-18.\n-   Choose expressive variable, function and class names. Make it as obvious as possible what the code is doing.\n-   Split your changes into separate, atomic commits (i.e. A commit per feature or fix, where the build, tests and the system are all functioning).\n-   Make sure your commits are rebased on the master branch.\n-   Wrap your commit messages at 72 characters.\n-   The first line of the commit message is the subject line, and must have the format \"Category: Brief description of what's being changed\". The category should be the name of a library, application, service, utility, etc.\n    -   Examples: `LibAudio`, `HackStudio`, `Base`, `Kernel`, `ConfigServer`, `cat`\n    -   Don't use a category like \"`Userland`\" or \"`Utilities`\", except for generic changes that affect a large portion of code within these directories.\n    -   Don't use specific component names, e.g. C++ class names, as the category either - mention them in the summary instead. E.g. `LibGUI: Brief description of what's being changed in FooWidget` rather than `FooWidget: Brief description of what's being changed`\n    -   Several categories may be combined with `+`, e.g. `LibJS+LibWeb+Browser: ...`\n-   Write the commit message subject line in the imperative mood (\"Foo: Change the way dates work\", not \"Foo: Changed the way dates work\").\n-   Write your commit messages in proper English, with care and punctuation.\n-   Amend your existing commits when adding changes after a review, where relevant.\n-   Mark each review comment as \"resolved\" after pushing a fix with the requested changes.\n-   Add your personal copyright line to files when making substantive changes. (Optional but encouraged!)\n-   Check the spelling of your code, comments and commit messages.\n-   If you have images that go along with your code, run `optipng -strip all` on them to optimize and strip away useless metadata - this can reduce file size from multiple kilobytes to a couple hundred bytes.\n\n**Don't:**\n\n-   Submit code that's incompatible with the project licence (2-clause BSD.)\n-   Touch anything outside the stated scope of the PR.\n-   Iterate excessively on your design across multiple commits.\n-   Use weasel-words like \"refactor\" or \"fix\" to avoid explaining what's being changed.\n-   End commit message subject lines with a period.\n-   Include commented-out code.\n-   Write in C. (Instead, take advantage of C++'s amenities, and don't limit yourself to the standard C library.)\n-   Attempt large architectural changes until you are familiar with the system and have worked on it for a while.\n-   Engage in excessive \"feng shui programming\" by moving code around without quantifiable benefit.\n-   Add jokes or other \"funny\" things to user-facing parts of the system.\n\n## Pull Request Q&A\n\n### I've submitted a PR and it passes CI. When can I expect to get some review feedback?\n\nWhile unadvertised PRs may get randomly merged by curious maintainers, you will have a much smoother time if you engage with the community on Discord.\n\n### If my PR isn't getting attention, how long should I wait before pinging one of the project maintainers?\n\nPing them right away if it's something urgent! If it's less urgent, advertise your PR on Discord (`#code-review`) and ask if someone could review it.\n\n### Who are the project maintainers?\n\n-   [@ADKaster](https://github.com/ADKaster)\n-   [@alimpfard](https://github.com/alimpfard)\n-   [@AtkinsSJ](https://github.com/AtkinsSJ)\n-   [@BertalanD](https://github.com/BertalanD)\n-   [@GMTA](https://github.com/gmta)\n-   [@kalenikaliaksandr](https://github.com/kalenikaliaksandr)\n-   [@Lubrsi](https://github.com/Lubrsi)\n-   [@nico](https://github.com/nico)\n-   [@spholz](https://github.com/spholz)\n-   [@tcl3](https://github.com/tcl3)\n-   [@timschumi](https://github.com/timschumi)\n-   [@trflynn89](https://github.com/trflynn89)\n\nMaintainership is by invitation only and does not correlate with any particular metric.\n\n### Is there a policy for branches/PRs that haven't been touched in X days? Should they be closed?\n\nYes, we have a \"stalebot\" that will mark untouched PRs as \"stale\" after 21 days, and close them after another 7 days if nothing happens.\n\n### Are there specific people to reach out to for different subsystems (e.g. Kernel, Browser, GUI, etc)?\n\nIn theory, the best person to speak with is whoever wrote most code adjacent to what you're working on. In practice, asking in one of the development channels on Discord is usually easier/better, since that allows many people to join the discussion.\n\n### Is Discord the place to ask for review help, or is Github preferred?\n\nIt's definitely better to ask on Discord. Due to the volume of GitHub notifications, many of us turn them off and rely on Discord for learning about review requests.\n\n## Commit Hooks\n\nThe repository contains a file called `.pre-commit-config.yaml` that defines several 'commit hooks' that can be run automatically just before and after creating a new commit. These hooks lint your commit message, and the changes it contains to ensure they will pass the automated CI for pull requests.\nTo enable these hooks firstly follow the installation instructions available at https://pre-commit.com/#install and then enable one or both of the following hooks:\n\n-   pre-commit hook - Runs Meta/lint-ci.sh and Meta/lint-ports.py to ensure changes to the code will pass linting:\n    ```console\n    pre-commit install\n    ```\n-   post-commit hook - Lints the commit message to ensure it will pass the commit linting:\n    ```console\n    pre-commit install --hook-type commit-msg\n    ```\n\n## On abandoned pull requests\n\nSometimes good PRs get abandoned by the author for one reason or another. If the PR is fundamentally good, but the author is not responding to requests, the PR may be manually integrated with minor changes to code and commit messages.\n\nTo make this easier, we do appreciate it if folks enable the \"Allow edits from maintainers\" flag on their pull requests.\n\n## On ideologically motivated changes\n\nSerenity's goal is to enable collaboration between as many groups as _reasonably_ possible, and we welcome contributions that make the project more accessisble to people.\n\nHowever, Serenity is intended to be a purely technical exercise, in the sense of it not being meant to invoke any sociopolitical change. We explicitly try to avoid drama or getting involved in \"external\" culture wars, and can reject changes that we feel to be sensitive.\n\nFor instance, we can reject changes promoting dogwhistles, religious beliefs‚Äîwhich are unambiguously off-topic‚Äîor real-world political candidates.\n\nWe may miss the mark sometimes, but we encourage good-faith dialogue over anger.\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3095703125,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2018-2024, the SerenityOS developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Ladybird",
          "type": "tree",
          "content": null
        },
        {
          "name": "Meta",
          "type": "tree",
          "content": null
        },
        {
          "name": "Ports",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.8232421875,
          "content": "# SerenityOS\n\nGraphical Unix-like operating system for 64-bit x86, Arm, and RISC-V computers.\n\n[![GitHub Actions Status](https://github.com/SerenityOS/serenity/workflows/Build,%20lint,%20and%20test/badge.svg)](https://github.com/SerenityOS/serenity/actions?query=workflow%3A\"Build%2C%20lint%2C%20and%20test\")\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/serenity.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:serenity)\n[![Discord](https://img.shields.io/discord/830522505605283862.svg?logo=discord&logoColor=white&logoWidth=20&labelColor=7289DA&label=Discord&color=17cf48)](https://discord.gg/serenityos)\n\n[FAQ](Documentation/FAQ.md) | [Documentation](#how-do-i-read-the-documentation) | [Build Instructions](#how-do-i-build-and-run-this)\n\n## About\n\nSerenityOS is a love letter to '90s user interfaces with a custom Unix-like core. It flatters with sincerity by stealing beautiful ideas from various other systems.\n\nRoughly speaking, the goal is a marriage between the aesthetic of late-1990s productivity software and the power-user accessibility of late-2000s \\*nix. This is a system by us, for us, based on the things we like.\n\nYou can watch videos of the system being developed on YouTube:\n\n-   [Andreas Kling's channel](https://youtube.com/andreaskling)\n-   [Linus Groh's channel](https://youtube.com/linusgroh)\n-   [kleines Filmr√∂llchen's channel](https://www.youtube.com/c/kleinesfilmroellchen)\n\n## Screenshot\n\n![Screenshot as of c03b788.png](Meta/Screenshots/screenshot-c03b788.png)\n\n## Features\n\n-   Modern 64-bit kernel with pre-emptive multi-threading\n-   [Browser](Userland/Applications/Browser/) with JavaScript, WebAssembly, and more (check the spec compliance for [JS](https://serenityos.github.io/libjs-website/test262/), [CSS](https://css.tobyase.de/), and [Wasm](https://serenityos.github.io/libjs-website/wasm/))\n-   Security features (hardware protections, limited userland capabilities, W^X memory, `pledge` & `unveil`, (K)ASLR, OOM-resistance, web-content isolation, state-of-the-art TLS algorithms, ...)\n-   [System services](Userland/Services/) (WindowServer, LoginServer, AudioServer, WebServer, RequestServer, CrashServer, ...) and modern IPC\n-   Good POSIX compatibility ([LibC](Userland/Libraries/LibC/), Shell, syscalls, signals, pseudoterminals, filesystem notifications, standard Unix [utilities](Userland/Utilities/), ...)\n-   POSIX-like virtual file systems (/proc, /dev, /sys, /tmp, ...) and ext2 file system\n-   Network stack and applications with support for IPv4, TCP, UDP; DNS, HTTP, Gemini, IMAP, NTP\n-   Profiling, debugging and other development tools (Kernel-supported profiling, CrashReporter, interactive GUI playground, HexEditor, HackStudio IDE for C++ and more)\n-   [Libraries](Userland/Libraries/) for everything from cryptography to OpenGL, audio, JavaScript, GUI, playing chess, ...\n-   Support for many common and uncommon file formats (PNG, JPEG, GIF, MP3, WAV, FLAC, ZIP, TAR, PDF, QOI, Gemini, ...)\n-   Unified style and design philosophy, flexible theming system, [custom (bitmap and vector) fonts](https://fonts.serenityos.net/font-family)\n-   [Games](Userland/Games/) (Solitaire, Minesweeper, 2048, chess, Conway's Game of Life, ...) and [demos](Userland/Demos/) (CatDog, Starfield, Eyes, mandelbrot set, WidgetGallery, ...)\n-   Every-day GUI programs and utilities (Spreadsheet with JavaScript, TextEditor, Terminal, PixelPaint, various multimedia viewers and players, Mail, Assistant, Calculator, ...)\n\n... and all of the above are right in this repository, no extra dependencies, built from-scratch by us :^)\n\nAdditionally, there are [over three hundred ports of popular open-source software](Ports/AvailablePorts.md), including games, compilers, Unix tools, multimedia apps and more.\n\n## How do I read the documentation?\n\nMan pages are available online at [man.serenityos.org](https://man.serenityos.org). These pages are generated from the Markdown source files in [`Base/usr/share/man`](https://github.com/SerenityOS/serenity/tree/master/Base/usr/share/man) and updated automatically.\n\nWhen running SerenityOS you can use `man` for the terminal interface, or `help` for the GUI.\n\nCode-related documentation can be found in the [documentation](Documentation/) folder.\n\n## How do I build and run this?\n\nSee the [SerenityOS build instructions](https://github.com/SerenityOS/serenity/blob/master/Documentation/BuildInstructions.md) or the [Ladybird build instructions](Documentation/BuildInstructionsLadybird.md).\n\nThe build system supports a cross-compilation build of SerenityOS from Linux, macOS, Windows (with WSL2) and many other \\*Nixes.\nThe default build system commands will launch a QEMU instance running the OS with hardware or software virtualization\nenabled as supported.\n\nLadybird runs on the same platforms that can be the host for a cross build of SerenityOS and on SerenityOS itself.\n\n## Get in touch and participate!\n\nJoin our Discord server: [SerenityOS Discord](https://discord.gg/serenityos)\n\nBefore opening an issue, please see the [issue policy](https://github.com/SerenityOS/serenity/blob/master/CONTRIBUTING.md#issue-policy).\n\nA general guide for contributing can be found in [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\n## Authors\n\n-   **Andreas Kling** - [awesomekling](https://twitter.com/awesomekling) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/awesomekling)\n-   **Robin Burchell** - [rburchell](https://github.com/rburchell)\n-   **Conrad Pankoff** - [deoxxa](https://github.com/deoxxa)\n-   **Sergey Bugaev** - [bugaevc](https://github.com/bugaevc)\n-   **Liav A** - [supercomputer7](https://github.com/supercomputer7)\n-   **Linus Groh** - [linusg](https://github.com/linusg) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/linusg)\n-   **Ali Mohammad Pur** - [alimpfard](https://github.com/alimpfard)\n-   **Shannon Booth** - [shannonbooth](https://github.com/shannonbooth)\n-   **H√ºseyin ASLIT√úRK** - [asliturk](https://github.com/asliturk)\n-   **Matthew Olsson** - [mattco98](https://github.com/mattco98)\n-   **Nico Weber** - [nico](https://github.com/nico)\n-   **Brian Gianforcaro** - [bgianfo](https://github.com/bgianfo)\n-   **Ben Wiederhake** - [BenWiederhake](https://github.com/BenWiederhake)\n-   **Tom** - [tomuta](https://github.com/tomuta)\n-   **Paul Scharnofske** - [asynts](https://github.com/asynts)\n-   **Itamar Shenhar** - [itamar8910](https://github.com/itamar8910)\n-   **Luke Wilde** - [Lubrsi](https://github.com/Lubrsi)\n-   **Brendan Coles** - [bcoles](https://github.com/bcoles)\n-   **Andrew Kaster** - [ADKaster](https://github.com/ADKaster) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/ADKaster)\n-   **thankyouverycool** - [thankyouverycool](https://github.com/thankyouverycool)\n-   **Idan Horowitz** - [IdanHo](https://github.com/IdanHo)\n-   **Gunnar Beutner** - [gunnarbeutner](https://github.com/gunnarbeutner)\n-   **Tim Flynn** - [trflynn89](https://github.com/trflynn89)\n-   **Jean-Baptiste Boric** - [boricj](https://github.com/boricj)\n-   **Stephan Unverwerth** - [sunverwerth](https://github.com/sunverwerth)\n-   **Max Wipfli** - [MaxWipfli](https://github.com/MaxWipfli)\n-   **Daniel Bertalan** - [BertalanD](https://github.com/BertalanD)\n-   **Jelle Raaijmakers** - [GMTA](https://github.com/GMTA)\n-   **Sam Atkins** - [AtkinsSJ](https://github.com/AtkinsSJ) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/AtkinsSJ)\n-   **Tobias Christiansen** - [TobyAsE](https://github.com/TobyAsE)\n-   **Lenny Maiorani** - [ldm5180](https://github.com/ldm5180)\n-   **sin-ack** - [sin-ack](https://github.com/sin-ack)\n-   **Jesse Buhagiar** - [Quaker762](https://github.com/Quaker762)\n-   **Peter Elliott** - [Petelliott](https://github.com/Petelliott)\n-   **Karol Kosek** - [krkk](https://github.com/krkk)\n-   **Mustafa Quraish** - [mustafaquraish](https://github.com/mustafaquraish)\n-   **David Tuin** - [davidot](https://github.com/davidot)\n-   **Leon Albrecht** - [Hendiadyoin1](https://github.com/Hendiadyoin1)\n-   **Tim Schumacher** - [timschumi](https://github.com/timschumi)\n-   **Marcus Nilsson** - [metmo](https://github.com/metmo)\n-   **Gegga Thor** - [Xexxa](https://github.com/Xexxa) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/Xexxa)\n-   **kleines Filmr√∂llchen** - [kleinesfilmroellchen](https://github.com/kleinesfilmroellchen) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/kleinesfilmroellchen)\n-   **Kenneth Myhra** - [kennethmyhra](https://github.com/kennethmyhra)\n-   **Maciej** - [sppmacd](https://github.com/sppmacd)\n-   **Sahan Fernando** - [ccapitalK](https://github.com/ccapitalK)\n-   **Benjamin Maxwell** - [MacDue](https://github.com/MacDue)\n-   **Dennis Esternon** - [djwisdom](https://github.com/djwisdom) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/djwisdom)\n-   **frhun** - [frhun](https://github.com/frhun)\n-   **networkException** - [networkException](https://github.com/networkException) [![GitHub Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/networkException)\n-   **Brandon Jordan** - [electrikmilk](https://github.com/electrikmilk)\n-   **Lucas Chollet** - [LucasChollet](https://github.com/LucasChollet)\n-   **Timon Kruiper** - [FireFox317](https://github.com/FireFox317)\n-   **Martin Falisse** - [martinfalisse](https://github.com/martinfalisse)\n-   **Gregory Bertilson** - [Zaggy1024](https://github.com/Zaggy1024)\n-   **Erik Wouters** - [EWouters](https://github.com/EWouters)\n-   **Rodrigo Tobar** - [rtobar](https://github.com/rtobar)\n-   **Alexander Kalenik** - [kalenikaliaksandr](https://github.com/kalenikaliaksandr)\n-   **Tim Ledbetter** - [tcl3](https://github.com/tcl3)\n-   **Steffen T. Larssen** - [stelar7](https://github.com/stelar7)\n-   **Andi Gallo** - [axgallo](https://github.com/axgallo)\n-   **Simon Wanner** - [skyrising](https://github.com/skyrising)\n-   **FalseHonesty** - [FalseHonesty](https://github.com/FalseHonesty)\n-   **Bastiaan van der Plaat** - [bplaat](https://github.com/bplaat)\n-   **Dan Klishch** - [DanShaders](https://github.com/DanShaders)\n-   **Julian Offenh√§user** - [janso3](https://github.com/janso3)\n-   **S√∂nke Holz** - [spholz](https://github.com/spholz)\n-   **implicitfield** - [implicitfield](https://github.com/implicitfield)\n\nAnd many more! [See here](https://github.com/SerenityOS/serenity/graphs/contributors) for a full contributor list. The people listed above have landed more than 100 commits in the project. :^)\n\n## License\n\nSerenityOS is licensed under a 2-clause BSD license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5,
          "content": "# Security Policy\n\nSerenityOS is a hobby operating system developed by volunteers. It is unreleased software still in early development, and so bugs and vulnerabilities can be safely disclosed publicly. If you find an issue, we would prefer if you report it as a [GitHub issue](https://github.com/SerenityOS/serenity/issues/new). If your issue was found using a fuzzer, please check [oss-fuzz](https://bugs.chromium.org/p/oss-fuzz/issues/list?q=label:Proj-serenity) first to see if it has already been recorded.\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Toolchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "Userland",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4443359375,
          "content": "{\n  \"nodes\": {\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1726463316,\n        \"narHash\": \"sha256-gI9kkaH0ZjakJOKrdjaI/VbaMEo9qBbSUl93DnU7f4c=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"99dc8785f6a0adac95f5e2ab05cc2e1bf666d172\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"utils\": \"utils\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.5234375,
          "content": "{\n  description = \"Serenity\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs =\n    {\n      self,\n      nixpkgs,\n      utils,\n    }:\n    utils.lib.eachDefaultSystem (\n      system:\n      let\n        pkgs = import nixpkgs { inherit system; };\n      in\n      {\n        devShells.default = import ./Toolchain { inherit pkgs; };\n        devShells.ladybird = import ./Ladybird { inherit pkgs; };\n        formatter = pkgs.nixfmt-rfc-style;\n      }\n    );\n}\n"
        }
      ]
    }
  ]
}