{
  "metadata": {
    "timestamp": 1736566420158,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheAlgorithms/C-Plus-Plus",
      "stars": 31070,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.38671875,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -3\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: true\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n    SortPriority:    0\n  - Regex:           '^<.*'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: true\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        Auto\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseCRLF:         false\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.8544921875,
          "content": "---\nChecks:          '-*,google-*,clang-analyzer-*,-clang-analyzer-security.insecureAPI.*,cppcoreguidelines-*,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-pro-bounds-*,openmp-*,performance-*,portability-*,modernize-*,-modernize-use-trailing-*'\nWarningsAsErrors: '*,-google-readability-*,-google-explicit-constructor,-modernize-*,modernize-avoid-c-arrays,-performance-move-const-arg,-performance-noexcept-move-constructor,-performance-unnecessary-value-param,-cppcoreguidelines-init-variables,-cppcoreguidelines-pro-*,-cppcoreguidelines-owning-memory,-clang-analyzer-cplusplus.Move'\nHeaderFilterRegex: ''\nAnalyzeTemporaryDtors: false\nFormatStyle:     '{ BasedOnStyle: Google, UseTab: Never, IndentWidth: 4, TabWidth: 4, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: true, ColumnLimit: 80, AccessModifierOffset: -3, AlignConsecutiveMacros: true }'\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3251953125,
          "content": ".DS_Store\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\na.out\n*.out\n*.app\n\n# Cache\n.cache/\n\n# Build\nbuild/\ngit_diff.txt\n"
        },
        {
          "name": ".gitpod.dockerfile",
          "type": "blob",
          "size": 0.2294921875,
          "content": "FROM gitpod/workspace-full-vnc\n\nRUN sudo apt-get update \\\n   && sudo apt-get install -y \\\n   doxygen \\\n   graphviz \\\n   ninja-build \\\n   freeglut3 \\\n   freeglut3-dev \\\n   && pip install cpplint \\\n   && sudo rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.3466796875,
          "content": "image:\n  file: .gitpod.dockerfile\n\ngithub:\n  prebuilds:\n    addBadge: true\n    addComment: false\n    addCheck: false\n    master: true\n    branches: true\n    pullRequestsFromForks: true\n\nvscode:\n  extensions:\n  # - ms-vscode.cpptools\n    - twxs.cmake\n    - ms-vscode.cmake-tools\n    - mhutchie.git-graph\n    - notskm.clang-tidy\n    - mitaki28.vscode-clang\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.208984375,
          "content": "cmake_minimum_required(VERSION 3.22)\nproject(TheAlgorithms/C++\n    LANGUAGES CXX\n    VERSION 1.0.0\n    DESCRIPTION \"Set of algorithms implemented in C++.\"\n)\n\n# C++ standard\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Additional warnings and errors\nif(MSVC)\n    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)\n    add_compile_options(/W4 /permissive-)\nelse()\n    add_compile_options(-Wall -Wextra -Wno-register -Werror=vla)\nendif()\n\noption(USE_OPENMP \"flag to use OpenMP for multithreading\" ON)\nif(USE_OPENMP)\n    find_package(OpenMP 3.0 COMPONENTS CXX)\n    if (OpenMP_CXX_FOUND)\n        message(STATUS \"Building with OpenMP Multithreading.\")\n    else()\n        message(STATUS \"No OpenMP found, no multithreading.\")\n    endif()\nendif()\n    \nadd_subdirectory(math)\nadd_subdirectory(others)\nadd_subdirectory(search)\nadd_subdirectory(ciphers)\nadd_subdirectory(hashing)\nadd_subdirectory(strings)\nadd_subdirectory(sorting)\nadd_subdirectory(geometry)\nadd_subdirectory(graphics)\nadd_subdirectory(probability)\nadd_subdirectory(backtracking)\nadd_subdirectory(bit_manipulation)\nadd_subdirectory(dynamic_programming)\nadd_subdirectory(greedy_algorithms)\nadd_subdirectory(range_queries)\nadd_subdirectory(operations_on_datastructures)\nadd_subdirectory(data_structures)\nadd_subdirectory(machine_learning)\nadd_subdirectory(numerical_methods)\nadd_subdirectory(graph)\nadd_subdirectory(divide_and_conquer)\nadd_subdirectory(games)\nadd_subdirectory(cpu_scheduling_algorithms)\nadd_subdirectory(physics)\n\ncmake_policy(SET CMP0054 NEW)\ncmake_policy(SET CMP0057 NEW)\n\nfind_package(Doxygen OPTIONAL_COMPONENTS dot dia)\nif(DOXYGEN_FOUND)  \n    if(MSVC)\n        set(DOXYGEN_CPP_CLI_SUPPORT YES)\n    endif()\n\n    if(Doxygen_dot_FOUND)\n        set(DOXYGEN_HAVE_DOT YES)\n    endif()\n    \n    if(OPENMP_FOUND)\n        set(DOXYGEN_PREDEFINED \"_OPENMP=1\")\n    endif()\n    \n    if(GLUT_FOUND)\n        set(DOXYGEN_PREDEFINED ${DOXYGEN_PREDEFINED} \"GLUT_FOUND=1\")\n    endif()\n\n    doxygen_add_docs(\n        doc\n        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n        COMMENT \"Generate documentation\"\n        CONFIG_FILE ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile\n    )\nendif()\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\ninclude(CPack)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3603515625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhello@the-algorithms.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.7119140625,
          "content": "# CONTRIBUTION GUIDELINES\n\n## Before contributing\n\nWelcome to [TheAlgorithms/C-Plus-Plus](https://github.com/TheAlgorithms/C-Plus-Plus)! Before submitting pull requests, please make sure that you have **read the whole guidelines**. If you have any doubts about this contribution guide, please open [an issue](https://github.com/TheAlgorithms/C-Plus-Plus/issues/new/choose) or ask on our [Discord server](https://the-algorithms.com/discord/), and clearly state your concerns.\n\n## Contributing\n\n### Maintainer/reviewer\n\n**Please check the [reviewer code](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/REVIEWER_CODE.md) file for maintainers and reviewers.**\n\n### Contributor\n\nBeing a contributor at The Algorithms, we request you to follow the points mentioned below:\n\n- You did your own work.\n  - No plagiarism is allowed. Any plagiarized work will not be merged.\n- Your work will be distributed under the [MIT License](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/LICENSE) once your pull request has been merged.\n- Please follow the repository guidelines and standards mentioned below.\n\n**New implementation** New implementations are welcome!\n\nYou can add new algorithms or data structures that are **not present in the repository** or that can **improve** the old implementations (**documentation**, **improving test cases**, removing bugs, or in any other reasonable sense)\n\n**Issues** Please avoid opening issues asking to be \"assigned” to a particular algorithm. This merely creates unnecessary noise for maintainers. Instead, please submit your implementation in a pull request, and it will be evaluated by project maintainers.\n\n### Making Changes\n\n#### Code\n\n- Please use the directory structure of the repository.\n- Make sure the file extensions are `*.hpp`, `*.h` or `*.cpp`.\n- Don't use **`bits/stdc++.h`** because this is quite Linux-specific and slows down the compilation process.\n- Organize your code using **`struct`**, **`class`**, and/or **`namespace`** keywords.\n- If an implementation of the algorithm already exists, please refer to the [file-name section below](#file-name-guidelines).\n- You can suggest reasonable changes to existing algorithms.\n- Strictly use snake_case (underscore_separated) in filenames.\n- If you have added or modified code, please make sure the code compiles before submitting.\n- Our automated testing runs [**CMake**](https://cmake.org/) on all the pull requests, so please be sure that your code passes before submitting.\n- Please conform to [Doxygen](https://www.doxygen.nl/manual/docblocks.html) standards and document the code as much as possible. This not only facilitates the readers but also generates the correct info on the website.\n- **Be consistent in the use of these guidelines.**\n\n#### Documentation\n\n- Make sure you put useful comments in your code. Do not comment on obvious things.\n- Please avoid creating new directories if at all possible. Try to fit your work into the existing directory structure. If you want to create a new directory, then please check if a similar category has been recently suggested or created by other pull requests.\n- If you have modified/added documentation, please ensure that your language is concise and must not contain grammatical errors.\n- Do not update [`README.md`](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/README.md) along with other changes. First, create an issue and then link to that issue in your pull request to suggest specific changes required to [`README.md`](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/README.md).\n- The repository follows [Doxygen](https://www.doxygen.nl/manual/docblocks.html) standards and auto-generates the [repository website](https://thealgorithms.github.io/C-Plus-Plus). Please ensure the code is documented in this structure. A sample implementation is given below.\n\n#### Test\n\n- Make sure to add examples and test cases in your `main()` function.\n- If you find an algorithm or document without tests, please feel free to create a pull request or issue describing suggested changes.\n- Please try to add one or more `test()` functions that will invoke the algorithm implementation on random test data with the expected output. Use the `assert()` function to confirm that the tests will pass. Requires including the `cassert` library.\n- Test cases should fully verify that your program works as expected. Rather than asking the user for input, it's best to make sure the given output is the correct output.\n\n##### Self-test examples\n\n1. [Quick sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/quick_sort.cpp#L137) testing (complex).\n\n```cpp\n// Let's make sure the array of numbers is ordered after calling the function.\nstd::vector<uint64_t> arr = {5, 3, 8, 12, 14, 16, 28, 96, 2, 5977};\nstd::vector<uint64_t> arr_sorted = sorting::quick_sort::quick_sort(\n    arr, 0, int(std::end(arr) - std::begin(arr)) - 1);\n\nassert(std::is_sorted(std::begin(arr_sorted), std::end(arr_sorted)));\n```\n\n2. [Subset Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/backtracking/subset_sum.cpp#L58) testing (medium).\n\n```cpp\nstd::vector<int32_t> array1 = {-7, -3, -2, 5, 8};  // input array\nassert(backtracking::subset_sum::number_of_subsets(0, array1) ==\n    2);  // first argument in subset_sum function is the required sum and\n         // second is the input array\n```\n\n3. Small C++ program that showcases and explains the use of tests.\n\n```cpp\n#include <iostream>  /// for IO operations\n#include <vector>    /// for std::vector\n#include <cassert>   /// for assert\n\n/**\n * @brief Verifies if the given array\n * contains the given number on it.\n * @tparam T the type of array (e.g., `int`, `float`, etc.)\n * @param arr the array to be used for checking\n * @param number the number to check if it's inside the array\n * @return false if the number was NOT found in the array\n * @return true if the number WAS found in the array\n */\ntemplate <typename T>\nbool is_number_on_array(const std::vector<T> &arr, const int &number) {\n    for (int i = 0; i < sizeof(arr) / sizeof(int); i++) {\n        if (arr[i] == number) {\n            return true;\n        }\n        else {\n            // Number not in the current index, keep searching.\n        }\n    }\n\n    return false;\n}\n\n/**\n * @brief Self-test implementations\n * @returns void\n */\nstatic void tests() {\n    std::vector<int> arr = { 9, 14, 21, 98, 67 };\n\n    assert(is_number_on_array(arr, 9) == true);\n    assert(is_number_on_array(arr, 4) == false);\n    assert(is_number_on_array(arr, 98) == true);\n    assert(is_number_on_array(arr, 512) == false);\n\n    std::cout << \"All tests have successfully passed!\\n\";\n}\n\n/**\n * @brief Main function\n * @returns 0 on exit\n */\nint main() {\n    tests(); // run self-test implementations\n    return 0;\n}\n```\n\n#### Typical structure of a program\n\n```cpp\n/**\n * @file\n * @brief Add one-line description here. Should contain a Wikipedia\n * link or another source explaining the algorithm/implementation.\n * @details\n * This is a multi-line\n * description containing links, references,\n * math equations, etc.\n * @author [Name](https://github.com/handle)\n * @see related_file.cpp, another_file.cpp\n */\n\n#include <cassert>   /// for assert\n#include             /// for `some function here`\n\n/**\n * @namespace\n * @brief <namespace description>\n */\nnamespace name {\n\n/**\n * @brief Class documentation\n */\nclass class_name {\n private:\n    int variable;   ///< short info of this variable\n    char *message;  ///< short info\n\n public:\n    // other members should be also documented as below\n}\n\n/**\n * @brief Function documentation\n * @tparam T this is a one-line info about T\n * @param param1 on-line info about param1\n * @param param2 on-line info about param2\n * @returns `true` if ...\n * @returns `false` if ...\n */\ntemplate<class T>\nbool func(int param1, T param2) {\n    // function statements here\n    if (/*something bad*/) {\n        return false;\n    }\n\n    return true;\n}\n}  // namespace name\n\n/**\n * @brief Self-test implementations\n * @returns void\n */\nstatic void test() {\n    /* descriptions of the following test */\n    assert(func(...) == ...); // this ensures that the algorithm works as expected\n\n    // can have multiple checks\n\n    // this lets the user know that the tests have passed\n    std::cout << \"All tests have successfully passed!\\n\";\n}\n\n/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */\nint main(int argc, char *argv[]) {\n    test();  // run self-test implementations\n    // code here\n    return 0;\n}\n```\n\n#### File Name guidelines\n\n- Use lowercase words with ``\"_\"`` as a separator\n- For instance\n\n```markdown\nMyNewCppClass.CPP       is incorrect\nmy_new_cpp_class.cpp    is correct format\n```\n\n- It will be used to dynamically create a directory of files and implementation.\n- File name validation will run on Docker to ensure validity.\n- If an implementation of the algorithm already exists and your version is different from that implemented, please use incremental numeric digit as a suffix. For example: if `median_search.cpp` already exists in the `search` folder, and you are contributing a new implementation, the filename should be `median_search2.cpp`. For a third implementation, `median_search3.cpp`, and so on.\n\n#### Directory guidelines\n\n- We recommend adding files to existing directories as much as possible.\n- Use lowercase words with ``\"_\"`` as separator ( no spaces or ```\"-\"``` allowed )\n- For instance\n\n```markdown\nSomeNew Fancy-Category          is incorrect\nsome_new_fancy_category         is correct\n```\n\n- Filepaths will be used to dynamically create a directory of our algorithms.\n- Filepath validation will run on GitHub Actions to ensure compliance.\n\n##### Integrating CMake in a new directory\n\nIn case a new directory is 100% required, `CMakeLists.txt` file in the root directory needs to be updated, and a new `CMakeLists.txt` file needs to be created within the new directory.\n\nAn example of how your new `CMakeLists.txt` file should look like. Note that if there are any extra libraries/setup required, you must include that in this file as well.\n\n```cmake\n# If necessary, use the RELATIVE flag, otherwise each source file may be listed\n# with full pathname. The RELATIVE flag makes it easier to extract an executable's name\n# automatically.\n\nfile( GLOB APP_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp )\nforeach( testsourcefile ${APP_SOURCES} )\n    string( REPLACE \".cpp\" \"\" testname ${testsourcefile} ) # File type. Example: `.cpp`\n    add_executable( ${testname} ${testsourcefile} )\n\n    set_target_properties(${testname} PROPERTIES LINKER_LANGUAGE CXX)\n    if(OpenMP_CXX_FOUND)\n        target_link_libraries(${testname} OpenMP::OpenMP_CXX)\n    endif()\n    install(TARGETS ${testname} DESTINATION \"bin/<foldername>\") # Folder name. Do NOT include `<>`\n\nendforeach( testsourcefile ${APP_SOURCES} )\n```\n\nThe `CMakeLists.txt` file in the root directory should be updated to include the new directory.\\\nInclude your new directory after the last subdirectory. Example:\n\n```cmake\n...\nadd_subdirectory(divide_and_conquer)\nadd_subdirectory(<foldername>)\n```\n\n#### Commit Guidelines\n\n- It is recommended to keep your changes grouped logically within individual commits. Maintainers find it easier to understand changes that are logically spilled across multiple commits. Try to modify just one or two files in the same directory. Pull requests that span multiple directories are often rejected.\n\n```bash\ngit add file_xyz.cpp\ngit commit -m \"your message\"\n```\n\nExamples of commit messages with semantic prefixes:\n\n```markdown\nfix: xyz algorithm bug\nfeat: add xyx algorithm, class xyz\ntest: add test for xyz algorithm\ndocs: add comments and explanation to xyz algorithm/improve contributing guidelines\nchore: update Gitpod badge\n```\n\nCommon prefixes:\n\n- fix: A bug fix\n- feat: A new feature\n- docs: Documentation changes\n- test: Correct existing tests or add new ones\n- chore: Miscellaneous changes that do not match any of the above.\n\n### Pull Requests\n\n- Checkout our [pull request template](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/.github/pull_request_template.md)\n\n#### Building Locally\n\nBefore submitting a pull request,\n build the code locally or using the convenient [![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/TheAlgorithms/C-Plus-Plus) service.\n\n```bash\ncmake -B build -S .\n```\n\n#### Static Code Analyzer\n\nWe use [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/) as a static code analyzer with a configuration in [`.clang-tidy`](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/.clang-tidy).\n\n```bash\nclang-tidy --fix --quiet -p build subfolder/file_to_check.cpp --\n```\n\n#### Code Formatter\n\n[`clang-format`](https://clang.llvm.org/docs/ClangFormat.html) is used for code formatting.\n\n- Installation (only needs to be installed once.)\n  - Mac (using home-brew): `brew install clang-format`\n  - Mac (using macports): `sudo port install clang-10 +analyzer`\n  - Windows (MSYS2 64-bit): `pacman -S mingw-w64-x86_64-clang-tools-extra`\n  - Linux (Debian): `sudo apt-get install clang-format-10 clang-tidy-10`\n- Running (all platforms): `clang-format -i -style=\"file\" my_file.cpp`\n\n#### GitHub Actions\n\n- Enable GitHub Actions on your fork of the repository.\nAfter enabling, it will execute `clang-tidy` and `clang-format` after every push (not a commit).\n  - Click on the tab \"Actions\", then click on the big green button to enable it.\n\n![GitHub Actions](https://user-images.githubusercontent.com/51391473/94609466-6e925100-0264-11eb-9d6f-3706190eab2b.png)\n\n- The result can create another commit if the actions made any changes on your behalf.\n- Hence, it is better to wait and check the results of GitHub Actions after every push.\n- Run `git pull` in your local clone if these actions made many changes to avoid merge conflicts.\n\nMost importantly,\n\n- Happy coding!\n"
        },
        {
          "name": "CodingGuidelines.md",
          "type": "blob",
          "size": 0.40625,
          "content": "# Code style convention  \n\nPlease orient on this guide before you sent a pull request.  \n\n---\n\n## User-interface  \n\nPlease write a simple user interface for your programs. Not a blinking cursor!  \nWhat does the program do?  \nWhat want the program an user informations?  \n\n---\n\n## Code style conventions  \n\nSee [here](https://users.ece.cmu.edu/~eno/coding/CppCodingStandard.html)  \nDon't push all code in one line!  \n"
        },
        {
          "name": "DIRECTORY.md",
          "type": "blob",
          "size": 41.1201171875,
          "content": "\n## Backtracking\n  * [Generate Parentheses](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/generate_parentheses.cpp)\n  * [Graph Coloring](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/graph_coloring.cpp)\n  * [Knight Tour](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/knight_tour.cpp)\n  * [Magic Sequence](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/magic_sequence.cpp)\n  * [Minimax](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/minimax.cpp)\n  * [N Queens](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/n_queens.cpp)\n  * [N Queens All Solution Optimised](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/n_queens_all_solution_optimised.cpp)\n  * [Nqueen Print All Solutions](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/nqueen_print_all_solutions.cpp)\n  * [Rat Maze](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/rat_maze.cpp)\n  * [Subarray Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/subarray_sum.cpp)\n  * [Subset Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/subset_sum.cpp)\n  * [Sudoku Solver](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/sudoku_solver.cpp)\n  * [Wildcard Matching](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/backtracking/wildcard_matching.cpp)\n\n## Bit Manipulation\n  * [Count Bits Flip](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/count_bits_flip.cpp)\n  * [Count Of Set Bits](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/count_of_set_bits.cpp)\n  * [Count Of Trailing Ciphers In Factorial N](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/count_of_trailing_ciphers_in_factorial_n.cpp)\n  * [Find Non Repeating Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/find_non_repeating_number.cpp)\n  * [Gray Code](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/gray_code.cpp)\n  * [Hamming Distance](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/hamming_distance.cpp)\n  * [Next Higher Number With Same Number Of Set Bits](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/next_higher_number_with_same_number_of_set_bits.cpp)\n  * [Power Of 2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/power_of_2.cpp)\n  * [Set Kth Bit](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/set_kth_bit.cpp)\n  * [Travelling Salesman Using Bit Manipulation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/bit_manipulation/travelling_salesman_using_bit_manipulation.cpp)\n\n## Ciphers\n  * [A1Z26 Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/a1z26_cipher.cpp)\n  * [Atbash Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/atbash_cipher.cpp)\n  * [Base64 Encoding](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/base64_encoding.cpp)\n  * [Caesar Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/caesar_cipher.cpp)\n  * [Elliptic Curve Key Exchange](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/elliptic_curve_key_exchange.cpp)\n  * [Hill Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/hill_cipher.cpp)\n  * [Morse Code](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/morse_code.cpp)\n  * [Uint128 T](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/uint128_t.hpp)\n  * [Uint256 T](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/uint256_t.hpp)\n  * [Vigenere Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/vigenere_cipher.cpp)\n  * [Xor Cipher](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/ciphers/xor_cipher.cpp)\n\n## Cpu Scheduling Algorithms\n  * [Fcfs Scheduling](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/cpu_scheduling_algorithms/fcfs_scheduling.cpp)\n  * [Non Preemptive Sjf Scheduling](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/cpu_scheduling_algorithms/non_preemptive_sjf_scheduling.cpp)\n\n## Data Structures\n  * [Avltree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/avltree.cpp)\n  * [Binary Search Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/binary_search_tree.cpp)\n  * [Binary Search Tree2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/binary_search_tree2.cpp)\n  * [Binaryheap](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/binaryheap.cpp)\n  * [Bloom Filter](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/bloom_filter.cpp)\n  * [Circular Queue Using Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/circular_queue_using_linked_list.cpp)\n  * Cll\n    * [Cll](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/cll/cll.cpp)\n    * [Cll](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/cll/cll.h)\n    * [Main Cll](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/cll/main_cll.cpp)\n  * [Disjoint Set](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/disjoint_set.cpp)\n  * [Doubly Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/doubly_linked_list.cpp)\n  * [Dsu Path Compression](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/dsu_path_compression.cpp)\n  * [Dsu Union Rank](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/dsu_union_rank.cpp)\n  * [Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/linked_list.cpp)\n  * [Linkedlist Implentation Usingarray](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/linkedlist_implentation_usingarray.cpp)\n  * [List Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/list_array.cpp)\n  * [Morrisinorder](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/morrisinorder.cpp)\n  * [Node](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/node.hpp)\n  * [Queue](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue.hpp)\n  * [Queue Using Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue_using_array.cpp)\n  * [Queue Using Array2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue_using_array2.cpp)\n  * [Queue Using Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue_using_linked_list.cpp)\n  * [Queue Using Linkedlist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue_using_linkedlist.cpp)\n  * [Queue Using Two Stacks](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/queue_using_two_stacks.cpp)\n  * [Rb Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/rb_tree.cpp)\n  * [Reverse A Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/reverse_a_linked_list.cpp)\n  * [Segment Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/segment_tree.cpp)\n  * [Skip List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/skip_list.cpp)\n  * [Sparse Table](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/sparse_table.cpp)\n  * [Stack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/stack.hpp)\n  * [Stack Using Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/stack_using_array.cpp)\n  * [Stack Using Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/stack_using_linked_list.cpp)\n  * [Stack Using Queue](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/stack_using_queue.cpp)\n  * [Test Queue](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/test_queue.cpp)\n  * [Test Stack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/test_stack.cpp)\n  * [Test Stack Students](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/test_stack_students.cpp)\n  * [Treap](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/treap.cpp)\n  * [Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/tree.cpp)\n  * [Tree 234](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/tree_234.cpp)\n  * [Trie Modern](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/trie_modern.cpp)\n  * [Trie Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/trie_tree.cpp)\n  * [Trie Using Hashmap](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/data_structures/trie_using_hashmap.cpp)\n\n## Divide And Conquer\n  * [Karatsuba Algorithm For Fast Multiplication](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/divide_and_conquer/karatsuba_algorithm_for_fast_multiplication.cpp)\n  * [Strassen Matrix Multiplication](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/divide_and_conquer/strassen_matrix_multiplication.cpp)\n\n## Dynamic Programming\n  * [0 1 Knapsack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/0_1_knapsack.cpp)\n  * [Abbreviation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/abbreviation.cpp)\n  * [Armstrong Number Templated](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/armstrong_number_templated.cpp)\n  * [Bellman Ford](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/bellman_ford.cpp)\n  * [Catalan Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/catalan_numbers.cpp)\n  * [Coin Change](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/coin_change.cpp)\n  * [Coin Change Topdown](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/coin_change_topdown.cpp)\n  * [Cut Rod](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/cut_rod.cpp)\n  * [Edit Distance](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/edit_distance.cpp)\n  * [Egg Dropping Puzzle](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/egg_dropping_puzzle.cpp)\n  * [Fibonacci Bottom Up](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/fibonacci_bottom_up.cpp)\n  * [Floyd Warshall](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/floyd_warshall.cpp)\n  * [House Robber](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/house_robber.cpp)\n  * [Kadane](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/kadane.cpp)\n  * [Longest Common String](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/longest_common_string.cpp)\n  * [Longest Common Subsequence](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/longest_common_subsequence.cpp)\n  * [Longest Increasing Subsequence](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/longest_increasing_subsequence.cpp)\n  * [Longest Increasing Subsequence Nlogn](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/longest_increasing_subsequence_nlogn.cpp)\n  * [Longest Palindromic Subsequence](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/longest_palindromic_subsequence.cpp)\n  * [Matrix Chain Multiplication](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/matrix_chain_multiplication.cpp)\n  * [Maximum Circular Subarray](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/maximum_circular_subarray.cpp)\n  * [Minimum Edit Distance](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/minimum_edit_distance.cpp)\n  * [Palindrome Partitioning](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/palindrome_partitioning.cpp)\n  * [Partition Problem](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/partition_problem.cpp)\n  * [Searching Of Element In Dynamic Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/searching_of_element_in_dynamic_array.cpp)\n  * [Shortest Common Supersequence](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/shortest_common_supersequence.cpp)\n  * [Subset Sum Dynamic](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/subset_sum_dynamic.cpp)\n  * [Trapped Rainwater](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/trapped_rainwater.cpp)\n  * [Tree Height](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/tree_height.cpp)\n  * [Unbounded 0 1 Knapsack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/unbounded_0_1_knapsack.cpp)\n  * [Word Break](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/dynamic_programming/word_break.cpp)\n\n## Games\n  * [Memory Game](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/games/memory_game.cpp)\n\n## Geometry\n  * [Graham Scan Algorithm](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/geometry/graham_scan_algorithm.cpp)\n  * [Graham Scan Functions](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/geometry/graham_scan_functions.hpp)\n  * [Jarvis Algorithm](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/geometry/jarvis_algorithm.cpp)\n  * [Line Segment Intersection](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/geometry/line_segment_intersection.cpp)\n\n## Graph\n  * [Bidirectional Dijkstra](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/bidirectional_dijkstra.cpp)\n  * [Breadth First Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/breadth_first_search.cpp)\n  * [Bridge Finding With Tarjan Algorithm](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/bridge_finding_with_tarjan_algorithm.cpp)\n  * [Connected Components](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/connected_components.cpp)\n  * [Connected Components With Dsu](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/connected_components_with_dsu.cpp)\n  * [Cycle Check Directed Graph](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/cycle_check_directed_graph.cpp)\n  * [Depth First Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/depth_first_search.cpp)\n  * [Depth First Search With Stack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/depth_first_search_with_stack.cpp)\n  * [Dijkstra](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/dijkstra.cpp)\n  * [Hamiltons Cycle](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/hamiltons_cycle.cpp)\n  * [Hopcroft Karp](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/hopcroft_karp.cpp)\n  * [Is Graph Bipartite](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/is_graph_bipartite.cpp)\n  * [Is Graph Bipartite2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/is_graph_bipartite2.cpp)\n  * [Kosaraju](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/kosaraju.cpp)\n  * [Kruskal](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/kruskal.cpp)\n  * [Lowest Common Ancestor](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/lowest_common_ancestor.cpp)\n  * [Max Flow With Ford Fulkerson And Edmond Karp Algo](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/max_flow_with_ford_fulkerson_and_edmond_karp_algo.cpp)\n  * [Prim](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/prim.cpp)\n  * [Topological Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/topological_sort.cpp)\n  * [Topological Sort By Kahns Algo](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/topological_sort_by_kahns_algo.cpp)\n  * [Travelling Salesman Problem](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graph/travelling_salesman_problem.cpp)\n\n## Graphics\n  * [Spirograph](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/graphics/spirograph.cpp)\n\n## Greedy Algorithms\n  * [Binary Addition](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/binary_addition.cpp)\n  * [Boruvkas Minimum Spanning Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/boruvkas_minimum_spanning_tree.cpp)\n  * [Digit Separation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/digit_separation.cpp)\n  * [Dijkstra Greedy](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/dijkstra_greedy.cpp)\n  * [Gale Shapley](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/gale_shapley.cpp)\n  * [Huffman](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/huffman.cpp)\n  * [Jump Game](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/jump_game.cpp)\n  * [Knapsack](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/knapsack.cpp)\n  * [Kruskals Minimum Spanning Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/kruskals_minimum_spanning_tree.cpp)\n  * [Prims Minimum Spanning Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/greedy_algorithms/prims_minimum_spanning_tree.cpp)\n\n## Hashing\n  * [Chaining](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/chaining.cpp)\n  * [Double Hash Hash Table](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/double_hash_hash_table.cpp)\n  * [Linear Probing Hash Table](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/linear_probing_hash_table.cpp)\n  * [Md5](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/md5.cpp)\n  * [Quadratic Probing Hash Table](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/quadratic_probing_hash_table.cpp)\n  * [Sha1](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/sha1.cpp)\n  * [Sha256](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/hashing/sha256.cpp)\n\n## Machine Learning\n  * [A Star Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/a_star_search.cpp)\n  * [Adaline Learning](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/adaline_learning.cpp)\n  * [K Nearest Neighbors](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/k_nearest_neighbors.cpp)\n  * [Kohonen Som Topology](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/kohonen_som_topology.cpp)\n  * [Kohonen Som Trace](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/kohonen_som_trace.cpp)\n  * [Neural Network](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/neural_network.cpp)\n  * [Ordinary Least Squares Regressor](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/ordinary_least_squares_regressor.cpp)\n  * [Vector Ops](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/machine_learning/vector_ops.hpp)\n\n## Math\n  * [Aliquot Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/aliquot_sum.cpp)\n  * [Approximate Pi](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/approximate_pi.cpp)\n  * [Area](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/area.cpp)\n  * [Armstrong Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/armstrong_number.cpp)\n  * [Binary Exponent](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/binary_exponent.cpp)\n  * [Binomial Calculate](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/binomial_calculate.cpp)\n  * [Check Amicable Pair](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/check_amicable_pair.cpp)\n  * [Check Factorial](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/check_factorial.cpp)\n  * [Check Prime](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/check_prime.cpp)\n  * [Complex Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/complex_numbers.cpp)\n  * [Double Factorial](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/double_factorial.cpp)\n  * [Eratosthenes](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/eratosthenes.cpp)\n  * [Eulers Totient Function](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/eulers_totient_function.cpp)\n  * [Extended Euclid Algorithm](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/extended_euclid_algorithm.cpp)\n  * [Factorial](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/factorial.cpp)\n  * [Fast Power](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fast_power.cpp)\n  * [Fibonacci](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fibonacci.cpp)\n  * [Fibonacci Fast](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fibonacci_fast.cpp)\n  * [Fibonacci Large](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fibonacci_large.cpp)\n  * [Fibonacci Matrix Exponentiation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fibonacci_matrix_exponentiation.cpp)\n  * [Fibonacci Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/fibonacci_sum.cpp)\n  * [Finding Number Of Digits In A Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/finding_number_of_digits_in_a_number.cpp)\n  * [Gcd Iterative Euclidean](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/gcd_iterative_euclidean.cpp)\n  * [Gcd Of N Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/gcd_of_n_numbers.cpp)\n  * [Gcd Recursive Euclidean](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/gcd_recursive_euclidean.cpp)\n  * [Integral Approximation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/integral_approximation.cpp)\n  * [Integral Approximation2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/integral_approximation2.cpp)\n  * [Inv Sqrt](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/inv_sqrt.cpp)\n  * [Iterative Factorial](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/iterative_factorial.cpp)\n  * [Large Factorial](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/large_factorial.cpp)\n  * [Large Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/large_number.h)\n  * [Largest Power](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/largest_power.cpp)\n  * [Lcm Sum](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/lcm_sum.cpp)\n  * [Least Common Multiple](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/least_common_multiple.cpp)\n  * [Linear Recurrence Matrix](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/linear_recurrence_matrix.cpp)\n  * [Magic Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/magic_number.cpp)\n  * [Miller Rabin](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/miller_rabin.cpp)\n  * [Modular Division](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/modular_division.cpp)\n  * [Modular Exponentiation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/modular_exponentiation.cpp)\n  * [Modular Inverse Fermat Little Theorem](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/modular_inverse_fermat_little_theorem.cpp)\n  * [Modular Inverse Simple](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/modular_inverse_simple.cpp)\n  * [N Bonacci](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/n_bonacci.cpp)\n  * [N Choose R](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/n_choose_r.cpp)\n  * [Ncr Modulo P](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/ncr_modulo_p.cpp)\n  * [Number Of Positive Divisors](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/number_of_positive_divisors.cpp)\n  * [Perimeter](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/perimeter.cpp)\n  * [Power For Huge Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/power_for_huge_numbers.cpp)\n  * [Power Of Two](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/power_of_two.cpp)\n  * [Prime Factorization](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/prime_factorization.cpp)\n  * [Prime Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/prime_numbers.cpp)\n  * [Primes Up To Billion](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/primes_up_to_billion.cpp)\n  * [Quadratic Equations Complex Numbers](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/quadratic_equations_complex_numbers.cpp)\n  * [Realtime Stats](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/realtime_stats.cpp)\n  * [Sieve Of Eratosthenes](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/sieve_of_eratosthenes.cpp)\n  * [Sqrt Double](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/sqrt_double.cpp)\n  * [String Fibonacci](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/string_fibonacci.cpp)\n  * [Sum Of Binomial Coefficient](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/sum_of_binomial_coefficient.cpp)\n  * [Sum Of Digits](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/sum_of_digits.cpp)\n  * [Vector Cross Product](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/vector_cross_product.cpp)\n  * [Volume](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/math/volume.cpp)\n\n## Numerical Methods\n  * [Babylonian Method](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/babylonian_method.cpp)\n  * [Bisection Method](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/bisection_method.cpp)\n  * [Brent Method Extrema](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/brent_method_extrema.cpp)\n  * [Composite Simpson Rule](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/composite_simpson_rule.cpp)\n  * [Durand Kerner Roots](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/durand_kerner_roots.cpp)\n  * [False Position](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/false_position.cpp)\n  * [Fast Fourier Transform](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/fast_fourier_transform.cpp)\n  * [Gaussian Elimination](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/gaussian_elimination.cpp)\n  * [Golden Search Extrema](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/golden_search_extrema.cpp)\n  * [Gram Schmidt](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/gram_schmidt.cpp)\n  * [Inverse Fast Fourier Transform](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/inverse_fast_fourier_transform.cpp)\n  * [Lu Decompose](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/lu_decompose.cpp)\n  * [Lu Decomposition](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/lu_decomposition.h)\n  * [Midpoint Integral Method](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/midpoint_integral_method.cpp)\n  * [Newton Raphson Method](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/newton_raphson_method.cpp)\n  * [Ode Forward Euler](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/ode_forward_euler.cpp)\n  * [Ode Midpoint Euler](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/ode_midpoint_euler.cpp)\n  * [Ode Semi Implicit Euler](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/ode_semi_implicit_euler.cpp)\n  * [Qr Decompose](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/qr_decompose.h)\n  * [Qr Decomposition](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/qr_decomposition.cpp)\n  * [Qr Eigen Values](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/qr_eigen_values.cpp)\n  * [Rungekutta](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/rungekutta.cpp)\n  * [Successive Approximation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/numerical_methods/successive_approximation.cpp)\n\n## Operations On Datastructures\n  * [Array Left Rotation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/array_left_rotation.cpp)\n  * [Array Right Rotation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/array_right_rotation.cpp)\n  * [Circular Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/circular_linked_list.cpp)\n  * [Circular Queue Using Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/circular_queue_using_array.cpp)\n  * [Get Size Of Linked List](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/get_size_of_linked_list.cpp)\n  * [Inorder Successor Of Bst](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/inorder_successor_of_bst.cpp)\n  * [Intersection Of Two Arrays](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/intersection_of_two_arrays.cpp)\n  * [Reverse A Linked List Using Recusion](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/reverse_a_linked_list_using_recusion.cpp)\n  * [Reverse Binary Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/reverse_binary_tree.cpp)\n  * [Selectionsortlinkedlist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/selectionsortlinkedlist.cpp)\n  * [Trie Multiple Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/trie_multiple_search.cpp)\n  * [Union Of Two Arrays](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/operations_on_datastructures/union_of_two_arrays.cpp)\n\n## Others\n  * [Buzz Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/buzz_number.cpp)\n  * [Decimal To Binary](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/decimal_to_binary.cpp)\n  * [Decimal To Hexadecimal](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/decimal_to_hexadecimal.cpp)\n  * [Decimal To Roman Numeral](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/decimal_to_roman_numeral.cpp)\n  * [Easter](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/easter.cpp)\n  * [Fast Integer Input](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/fast_integer_input.cpp)\n  * [Happy Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/happy_number.cpp)\n  * [Iterative Tree Traversals](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/iterative_tree_traversals.cpp)\n  * [Kadanes3](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/kadanes3.cpp)\n  * [Kelvin To Celsius](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/kelvin_to_celsius.cpp)\n  * [Lfu Cache](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/lfu_cache.cpp)\n  * [Longest Substring Without Repeating Characters](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/longest_substring_without_repeating_characters.cpp)\n  * [Lru Cache](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/lru_cache.cpp)\n  * [Lru Cache2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/lru_cache2.cpp)\n  * [Matrix Exponentiation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/matrix_exponentiation.cpp)\n  * [Palindrome Of Number](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/palindrome_of_number.cpp)\n  * [Paranthesis Matching](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/paranthesis_matching.cpp)\n  * [Pascal Triangle](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/pascal_triangle.cpp)\n  * [Postfix Evaluation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/postfix_evaluation.cpp)\n  * [Primality Test](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/primality_test.cpp)\n  * [Recursive Tree Traversal](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/recursive_tree_traversal.cpp)\n  * [Smallest Circle](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/smallest_circle.cpp)\n  * [Sparse Matrix](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/sparse_matrix.cpp)\n  * [Spiral Print](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/spiral_print.cpp)\n  * [Stairs Pattern](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/stairs_pattern.cpp)\n  * [Tower Of Hanoi](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/tower_of_hanoi.cpp)\n  * [Vector Important Functions](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/others/vector_important_functions.cpp)\n\n## Physics\n  * [Ground To Ground Projectile Motion](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/physics/ground_to_ground_projectile_motion.cpp)\n\n## Probability\n  * [Addition Rule](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/addition_rule.cpp)\n  * [Bayes Theorem](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/bayes_theorem.cpp)\n  * [Binomial Dist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/binomial_dist.cpp)\n  * [Exponential Dist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/exponential_dist.cpp)\n  * [Geometric Dist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/geometric_dist.cpp)\n  * [Poisson Dist](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/poisson_dist.cpp)\n  * [Windowed Median](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/probability/windowed_median.cpp)\n\n## Range Queries\n  * [Fenwick Tree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/fenwick_tree.cpp)\n  * [Heavy Light Decomposition](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/heavy_light_decomposition.cpp)\n  * [Mo](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/mo.cpp)\n  * [Persistent Seg Tree Lazy Prop](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/persistent_seg_tree_lazy_prop.cpp)\n  * [Prefix Sum Array](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/prefix_sum_array.cpp)\n  * [Segtree](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/segtree.cpp)\n  * [Sparse Table Range Queries](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/range_queries/sparse_table_range_queries.cpp)\n\n## Search\n  * [Binary Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/binary_search.cpp)\n  * [Exponential Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/exponential_search.cpp)\n  * [Fibonacci Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/fibonacci_search.cpp)\n  * [Floyd Cycle Detection Algo](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/floyd_cycle_detection_algo.cpp)\n  * [Hash Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/hash_search.cpp)\n  * [Interpolation Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/interpolation_search.cpp)\n  * [Interpolation Search2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/interpolation_search2.cpp)\n  * [Jump Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/jump_search.cpp)\n  * [Linear Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/linear_search.cpp)\n  * [Longest Increasing Subsequence Using Binary Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/longest_increasing_subsequence_using_binary_search.cpp)\n  * [Median Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/median_search.cpp)\n  * [Median Search2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/median_search2.cpp)\n  * [Saddleback Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/saddleback_search.cpp)\n  * [Sublist Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/sublist_search.cpp)\n  * [Ternary Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/ternary_search.cpp)\n  * [Text Search](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/search/text_search.cpp)\n\n## Sorting\n  * [Bead Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/bead_sort.cpp)\n  * [Binary Insertion Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/binary_insertion_sort.cpp)\n  * [Bitonic Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/bitonic_sort.cpp)\n  * [Bogo Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/bogo_sort.cpp)\n  * [Bubble Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/bubble_sort.cpp)\n  * [Bucket Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/bucket_sort.cpp)\n  * [Cocktail Selection Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/cocktail_selection_sort.cpp)\n  * [Comb Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/comb_sort.cpp)\n  * [Count Inversions](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/count_inversions.cpp)\n  * [Counting Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/counting_sort.cpp)\n  * [Counting Sort String](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/counting_sort_string.cpp)\n  * [Cycle Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/cycle_sort.cpp)\n  * [Dnf Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/dnf_sort.cpp)\n  * [Gnome Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/gnome_sort.cpp)\n  * [Heap Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/heap_sort.cpp)\n  * [Insertion Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/insertion_sort.cpp)\n  * [Insertion Sort Recursive](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/insertion_sort_recursive.cpp)\n  * [Library Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/library_sort.cpp)\n  * [Merge Insertion Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/merge_insertion_sort.cpp)\n  * [Merge Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/merge_sort.cpp)\n  * [Non Recursive Merge Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/non_recursive_merge_sort.cpp)\n  * [Numeric String Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/numeric_string_sort.cpp)\n  * [Odd Even Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/odd_even_sort.cpp)\n  * [Pancake Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/pancake_sort.cpp)\n  * [Pigeonhole Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/pigeonhole_sort.cpp)\n  * [Quick Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/quick_sort.cpp)\n  * [Quick Sort 3](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/quick_sort_3.cpp)\n  * [Quick Sort Iterative](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/quick_sort_iterative.cpp)\n  * [Radix Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/radix_sort.cpp)\n  * [Radix Sort2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/radix_sort2.cpp)\n  * [Random Pivot Quick Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/random_pivot_quick_sort.cpp)\n  * [Recursive Bubble Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/recursive_bubble_sort.cpp)\n  * [Selection Sort Iterative](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/selection_sort_iterative.cpp)\n  * [Selection Sort Recursive](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/selection_sort_recursive.cpp)\n  * [Shell Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/shell_sort.cpp)\n  * [Shell Sort2](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/shell_sort2.cpp)\n  * [Slow Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/slow_sort.cpp)\n  * [Stooge Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/stooge_sort.cpp)\n  * [Strand Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/strand_sort.cpp)\n  * [Swap Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/swap_sort.cpp)\n  * [Tim Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/tim_sort.cpp)\n  * [Wave Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/wave_sort.cpp)\n  * [Wiggle Sort](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/sorting/wiggle_sort.cpp)\n\n## Strings\n  * [Boyer Moore](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/boyer_moore.cpp)\n  * [Brute Force String Searching](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/brute_force_string_searching.cpp)\n  * [Duval](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/duval.cpp)\n  * [Horspool](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/horspool.cpp)\n  * [Knuth Morris Pratt](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/knuth_morris_pratt.cpp)\n  * [Manacher Algorithm](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/manacher_algorithm.cpp)\n  * [Rabin Karp](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/rabin_karp.cpp)\n  * [Z Function](https://github.com/TheAlgorithms/C-Plus-Plus/blob/HEAD/strings/z_function.cpp)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "The MIT License\nCopyright (c) 2016-2024 TheAlgorithms and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4345703125,
          "content": "# The Algorithms - C++ # {#mainpage}\n<!-- the suffix in the above line is required for doxygen to consider this as the index page of the generated documentation site -->\n\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/TheAlgorithms/C-Plus-Plus)\n[![CodeQL CI](https://github.com/TheAlgorithms/C-Plus-Plus/actions/workflows/codeql.yml/badge.svg)](https://github.com/TheAlgorithms/C-Plus-Plus/actions/workflows/codeql.yml)\n[![Gitter chat](https://img.shields.io/badge/Chat-Gitter-ff69b4.svg?label=Chat&logo=gitter&style=flat-square)](https://gitter.im/TheAlgorithms)\n[![contributions welcome](https://img.shields.io/static/v1.svg?label=Contributions&message=Welcome&color=0059b3&style=flat-square)](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/CONTRIBUTING.md)\n![GitHub repo size](https://img.shields.io/github/repo-size/TheAlgorithms/C-Plus-Plus?color=red&style=flat-square)\n[![Doxygen CI](https://github.com/TheAlgorithms/C-Plus-Plus/workflows/Doxygen%20CI/badge.svg)](https://TheAlgorithms.github.io/C-Plus-Plus)\n[![Awesome CI](https://github.com/TheAlgorithms/C-Plus-Plus/workflows/Awesome%20CI%20Workflow/badge.svg)](https://github.com/TheAlgorithms/C-Plus-Plus/actions?query=workflow%3A%22Awesome+CI+Workflow%22)\n[![Income](https://img.shields.io/liberapay/receives/TheAlgorithms.svg?logo=liberapay)](https://liberapay.com/TheAlgorithms)\n[![Discord chat](https://img.shields.io/discord/808045925556682782.svg?logo=discord&colorB=5865F2)](https://the-algorithms.com/discord/)\n[![Donate](https://liberapay.com/assets/widgets/donate.svg)](https://liberapay.com/TheAlgorithms/donate)\n\n## Overview\n\nThis repository is a collection of open-source implementation of a variety of algorithms implemented in C++ and licensed under [MIT License](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/LICENSE). These algorithms span a variety of topics from computer science, mathematics and statistics, data science, machine learning, engineering, etc.. The implementations and the associated documentation are meant to provide a learning resource for educators and students. Hence, one may find more than one implementation for the same objective but using a different algorithm strategies and optimizations.\n\n## Features\n\n* The repository provides implementations of various algorithms in one of the most fundamental general purpose languages - [C++](https://en.wikipedia.org/wiki/C%2B%2B).\n* Well documented source code with detailed explanations provide a valuable resource for educators and students alike.\n* Each source code is atomic using [STL classes](https://en.wikipedia.org/wiki/Standard_Template_Library) and _no external libraries_ are required for their compilation and execution. Thus, the fundamentals of the algorithms can be studied in much depth.\n* Source codes are [compiled and tested](https://github.com/TheAlgorithms/C-Plus-Plus/actions?query=workflow%3A%22Awesome+CI+Workflow%22) for every commit on the latest versions of three major operating systems viz., Windows, MacOS, and Ubuntu (Linux) using MSVC 19 2022, AppleClang 14.0.0, and GNU 11.3.0 respectively. \n* Strict adherence to [C++17](https://en.wikipedia.org/wiki/C%2B%2B17) standard ensures portability of code to embedded systems as well like [ESP32](https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-guides/cplusplus.html#c-language-standard), [ARM Cortex](https://developer.arm.com/documentation/101458/2404/Standards-support/Supported-C-C---standards-in-Arm-C-C---Compiler), etc. with little to no changes.\n* Self-checks within programs ensure correct implementations with confidence.\n* Modular implementations and OpenSource licensing enable the functions to be utilized conveniently in other applications.\n\n## Documentation\n\n[Online Documentation](https://TheAlgorithms.github.io/C-Plus-Plus) is generated from the repository source codes directly. The documentation contains all resources including source code snippets, details on execution of the programs, diagrammatic representation of program flow, and links to external resources where necessary. The documentation also introduces interactive source code with links to documentation for C++ STL library functions used.\nClick on [Files menu](https://TheAlgorithms.github.io/C-Plus-Plus/files.html) to see the list of all the files documented with the code.\n\n[Documentation of Algorithms in C++](https://thealgorithms.github.io/C-Plus-Plus) by [The Algorithms Contributors](https://github.com/TheAlgorithms/C-Plus-Plus/graphs/contributors) is licensed under [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)<br/>\n<a href=\"https://creativecommons.org/licenses/by-sa/4.0\"><img alt=\"Creative Commons License\" style=\"height:22px!important;margin-left: 3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg\" /><img  alt=\"Credit must be given to the creator\" style=\"height:22px!important;margin-left: 3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg\" /><img alt=\"Adaptations must be shared under the same terms\" style=\"height:22px!important;margin-left: 3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg\" /></a>\n\n## Contributions\n\nAs a community developed and maintained repository, we welcome new un-plagiarized quality contributions. Please read our [Contribution Guidelines](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/CONTRIBUTING.md).\n"
        },
        {
          "name": "REVIEWER_CODE.md",
          "type": "blob",
          "size": 2.166015625,
          "content": "# Guidelines for reviewers and maintainers\n\nFollowing are some guidelines for contributors who are providing reviews to the pull-requests.\n\n1. On any given pull-request, there only one reviewer should be active at a time. Once the reviewer is done, others may add short comments or any further reviews as needed. Again, one at a time.\n2. Assigning reviewers should be avoided unless the pull-request is for a particular task the reviewer is more proficient in.\n3. Any contributor who has had their code merged into the repo can provide with reviews as they have gone through the repo standards at least once before. The reviewer will be on a first-come-first serve basis.\n4. Most repositories have a check-list in the description for pull-requests. Many times, the contributors are not following them and simply remove the checklist or checkthem without taking the time to review the checklist items. These contributors are almost always copying the code from somewhere. These should be pointed out politely and reviews should be blocked until the contributor updates the basic code structure per the checklist and the repo standards.\n5. The reviewers should label every pull-request appropriately - including \"invalid\" as the case may be.\n6. Some pull-requests have existing duplicate code or duplicate pull-requests or sometimes, a novice might create a new pull-request for every new commit. This is a daunting task but one of the responsibility of a reviewer.\n7. Discourage creating branches on the repo but rather fork the repo to the respective userspace and contribute from that fork.\n8. Some repos - C & C++ - have collaboration with GitPod wherein the code and the contribution can be executed and tested online with relative simplicity. It also contains tools necessary to perform debug and CI checks without installing any tools. Encourage contributors to utilize the feature. Reviewers can test the contributed algorithms online without worrying about forks and branches.\n9. There should not be any hurry to merge pull-requests. Since the repos are educational, better to get the contributions right even if it takes a bit longer to review. Encourage patience and develop debugging skills of contributors.\n"
        },
        {
          "name": "backtracking",
          "type": "tree",
          "content": null
        },
        {
          "name": "bit_manipulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "ciphers",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpu_scheduling_algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_structures",
          "type": "tree",
          "content": null
        },
        {
          "name": "divide_and_conquer",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "dynamic_programming",
          "type": "tree",
          "content": null
        },
        {
          "name": "games",
          "type": "tree",
          "content": null
        },
        {
          "name": "geometry",
          "type": "tree",
          "content": null
        },
        {
          "name": "graph",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphics",
          "type": "tree",
          "content": null
        },
        {
          "name": "greedy_algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "hashing",
          "type": "tree",
          "content": null
        },
        {
          "name": "machine_learning",
          "type": "tree",
          "content": null
        },
        {
          "name": "math",
          "type": "tree",
          "content": null
        },
        {
          "name": "numerical_methods",
          "type": "tree",
          "content": null
        },
        {
          "name": "operations_on_datastructures",
          "type": "tree",
          "content": null
        },
        {
          "name": "others",
          "type": "tree",
          "content": null
        },
        {
          "name": "physics",
          "type": "tree",
          "content": null
        },
        {
          "name": "probability",
          "type": "tree",
          "content": null
        },
        {
          "name": "range_queries",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "search",
          "type": "tree",
          "content": null
        },
        {
          "name": "sorting",
          "type": "tree",
          "content": null
        },
        {
          "name": "strings",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}