{
  "metadata": {
    "timestamp": 1736566421484,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aseprite/aseprite",
      "stars": 30248,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 5.9775390625,
          "content": "---\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: Left\nAlignConsecutiveAssignments:\n  AcrossComments: false\n  AcrossEmptyLines: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: false\n  PadOperators: true\nAlignConsecutiveBitFields:\n  AcrossComments: false\n  AcrossEmptyLines: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: false\n  PadOperators: true\nAlignConsecutiveDeclarations:\n  AcrossComments: false\n  AcrossEmptyLines: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: false\n  PadOperators: true\nAlignConsecutiveMacros:\n  AcrossComments: false\n  AcrossEmptyLines: true\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: true\n  PadOperators: true\nAlignConsecutiveShortCaseStatements:\n  AcrossComments: true\n  AcrossEmptyLines: true\n  AlignCaseArrows: true\n  AlignCaseColons: false\n  Enabled: true\nAlignConsecutiveTableGenCondOperatorColons:\n  AcrossComments: false\n  AcrossEmptyLines: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: false\n  PadOperators: false\nAlignConsecutiveTableGenDefinitionColons:\n  AcrossComments: false\n  AcrossEmptyLines: false\n  AlignCompound: false\n  AlignFunctionPointers: false\n  Enabled: false\n  PadOperators: false\nAlignEscapedNewlines: Right\nAlignOperands: Align\nAlignTrailingComments:\n  Kind: Always\n  OverEmptyLines: 0\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowBreakBeforeNoexceptSpecifier: Never\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseExpressionOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortCompoundRequirementOnASingleLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: InlineOnly\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nBinPackArguments: false\nBinPackParameters: false\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: false\n  AfterControlStatement: Never\n  AfterEnum: false\n  AfterExternBlock: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  BeforeCatch: true\n  BeforeElse: true\n  BeforeLambdaBody: false\n  BeforeWhile: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakAdjacentStringLiterals: true\nBreakAfterAttributes: Leave\nBreakAfterReturnType: None\nBreakArrays: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Custom\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: BeforeComma\nBreakFunctionDefinitionParameters: false\nBreakInheritanceList: AfterComma\nBreakStringLiterals: false\nBreakTemplateDeclarations: Yes\nColumnLimit: 100\nCompactNamespaces: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat: false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nIncludeBlocks: Preserve\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: BeforeHash\nIndentRequiresClause: false\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nInsertBraces: false\nInsertNewlineAtEOF: false\nInsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary: 0\n  BinaryMinDigits: 0\n  Decimal: 0\n  DecimalMinDigits: 0\n  Hex: 0\n  HexMinDigits: 0\nKeepEmptyLines:\n  AtEndOfFile: false\n  AtStartOfBlock: false\n  AtStartOfFile: true\nLambdaBodyIndentation: Signature\nLineEnding: LF\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMainIncludeChar: Quote\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: CurrentLine\nPenaltyBreakAssignment: 50\nPenaltyBreakBeforeFirstCallParameter: 2\nPenaltyBreakComment: 30\nPenaltyBreakFirstLessLess: 12\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakScopeResolution: 500\nPenaltyBreakString: 100\nPenaltyBreakTemplateDeclaration: 1\nPenaltyExcessCharacter: 100\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nPPIndentWidth: -1\nQualifierAlignment: Left\nReferenceAlignment: Pointer\nReflowComments: true\nRemoveBracesLLVM: false\nRemoveParentheses: Leave\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSkipMacroDefinitionBody: false\nSortIncludes: CaseSensitive\nSortUsingDeclarations: LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeJsonColon: false\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros: true\n  AfterOverloadedOperator: false\n  AfterPlacementOperator: true\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: Never\nSpacesInContainerLiterals: false\nSpacesInLineCommentPrefix:\n  Minimum: 1\n  Maximum: -1\nSpacesInParens: Never\nSpacesInParensOptions:\n  ExceptDoubleParentheses: false\n  InCStyleCasts: false\n  InConditionalStatements: false\n  InEmptyParentheses: false\n  Other: false\nSpacesInSquareBrackets: false\nStandard: c++17\nTabWidth: 8\nUseTab: Never\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.96875,
          "content": "#\n# Disabled or configured checks:\n#\n# bugprone-easily-swappable-parameters: We have a lot of functions\n# with (int, int) or (string, string) so it does't make sense to enable\n# this option.\n#\n# readability-braces-around-statements: We use a lot of:\n#   if (cond)\n#     stmt;\n#   else\n#     stmt;\n# and there is no way to allow this with this check.\n#\n# readability-function-cognitive-complexity: We have this disabled\n# temporarily, but it'd be nice to enable this with a high threshold\n# in the future.\n#\n# readability-identifier-length: We use a lot of short names like x,\n# y, w, h so we prefer to remove this.\n#\n# readability-magic-numbers: We use a lot of magic numbers like 8, 16,\n#  24 for masks like 0xFF00, etc.\n#\n# readability-isolate-declaration: We use multiple declarations\n# several times (e.g. int x, y, etc.)\n#\n# readability-uppercase-literal-suffix: We use a lot of 0.0f, but in a\n# future we might enable this.\n#\n# readability-named-parameter: We prefer misc-unused-parameters to\n# remove a parameter name that is not used.\n#\n# misc-use-anonymous-namespace: We use anonymous namespaces or static\n# functions indifferently.\n#\n# misc-non-private-member-variables-in-classes: We use structs with\n# all public members in some cases.\n#\n---\nChecks: >\n  -*,\n  bugprone-*,\n  clang-analyzer-*,\n  concurrency-*,\n  misc-*,\n  performance-*,\n  portability-*,\n  readability-*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-narrowing-conversions,\n  -misc-include-cleaner,\n  -misc-use-anonymous-namespace,\n  -readability-braces-around-statements,\n  -readability-function-cognitive-complexity,\n  -readability-identifier-length,\n  -readability-isolate-declaration,\n  -readability-magic-numbers,\n  -readability-named-parameter,\n  -readability-uppercase-literal-suffix\nWarningsAsErrors: ''\nCheckOptions:\n  - key: readability-implicit-bool-conversion.AllowPointerConditions\n    value: true\n  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value: true\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4541015625,
          "content": "root = true\n\n# Enable this in the future (we have to apply this change to all files\n# in one commit first).\n#[*]\n#end_of_line = lf\n#insert_final_newline = true\n\n[*.cpp]\nindent_style = space\nindent_size = 2\n\n[{CMakeLists.txt,*.cmake}]\nindent_size = 2\nindent_style = space\n\n[*.lua]\nindent_style = space\nindent_size = 2\n\n[*.md]\nindent_style = space\n\n[*.sh]\nindent_style = space\nindent_size = 4\ntab_width = 8\n\n[*.xml]\nindent_style = space\nindent_size = 2\ntab_width = 8\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.158203125,
          "content": "# clang-format all files in main branch\nb2e4f78b693fac5b31bd4bbadb395fdd8ed007c2\n# clang-format all files in beta branch\n09538f9a1aa247919ac19992db173050e173a860\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1328125,
          "content": "*.a\n*.o\n*.lib\n*.obj\n*.pdb\n*.dll\n*.ilk\n*.suo\n*.exe\n*.exe.manifest\n*.log\n*.res\n.DS_Store\n.vs\ntests/_test*\nbuild\n.build\nCMakeSettings.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.73828125,
          "content": "[submodule \"third_party/pixman\"]\n\tpath = third_party/pixman\n\turl = https://github.com/aseprite/pixman.git\n[submodule \"third_party/simpleini\"]\n\tpath = third_party/simpleini\n\turl = https://github.com/aseprite/simpleini.git\n[submodule \"third_party/libwebp\"]\n\tpath = third_party/libwebp\n\turl = https://github.com/aseprite/libwebp.git\n[submodule \"src/flic\"]\n\tpath = src/flic\n\turl = https://github.com/aseprite/flic.git\n[submodule \"third_party/freetype2\"]\n\tpath = third_party/freetype2\n\turl = https://github.com/aseprite/freetype2.git\n\tignore = dirty\n[submodule \"third_party/zlib\"]\n\tpath = third_party/zlib\n\turl = https://github.com/aseprite/zlib.git\n\tignore = dirty\n[submodule \"third_party/libpng\"]\n\tpath = third_party/libpng\n\turl = https://github.com/aseprite/libpng.git\n[submodule \"src/observable\"]\n\tpath = src/observable\n\turl = https://github.com/aseprite/observable.git\n[submodule \"src/undo\"]\n\tpath = src/undo\n\turl = https://github.com/aseprite/undo.git\n[submodule \"laf\"]\n\tpath = laf\n\turl = https://github.com/aseprite/laf.git\n[submodule \"third_party/cmark\"]\n\tpath = third_party/cmark\n\turl = https://github.com/aseprite/cmark.git\n[submodule \"third_party/harfbuzz\"]\n\tpath = third_party/harfbuzz\n\turl = https://github.com/aseprite/harfbuzz.git\n[submodule \"third_party/libarchive\"]\n\tpath = third_party/libarchive\n\turl = https://github.com/aseprite/libarchive.git\n[submodule \"third_party/json11\"]\n\tpath = third_party/json11\n\turl = https://github.com/aseprite/json11.git\n[submodule \"third_party/benchmark\"]\n\tpath = third_party/benchmark\n\turl = https://github.com/aseprite/benchmark.git\n[submodule \"third_party/giflib\"]\n\tpath = third_party/giflib\n\turl = https://github.com/aseprite/giflib.git\n[submodule \"third_party/fmt\"]\n\tpath = third_party/fmt\n\turl = https://github.com/aseprite/fmt.git\n[submodule \"third_party/tinyexpr\"]\n\tpath = third_party/tinyexpr\n\turl = https://github.com/aseprite/tinyexpr.git\n[submodule \"third_party/lua\"]\n\tpath = third_party/lua\n\turl = https://github.com/aseprite/lua\n[submodule \"src/tga\"]\n\tpath = src/tga\n\turl = https://github.com/aseprite/tga.git\n[submodule \"third_party/curl\"]\n\tpath = third_party/curl\n\turl = https://github.com/aseprite/curl.git\n[submodule \"third_party/IXWebSocket\"]\n\tpath = third_party/IXWebSocket\n\turl = https://github.com/aseprite/IXWebSocket.git\n[submodule \"third_party/cityhash\"]\n\tpath = third_party/cityhash\n\turl = https://github.com/aseprite/cityhash.git\n[submodule \"src/psd\"]\n\tpath = src/psd\n\turl = https://github.com/aseprite/psd.git\n[submodule \"third_party/qoi\"]\n\tpath = third_party/qoi\n\turl = https://github.com/aseprite/qoi.git\n[submodule \"third_party/tinyxml2\"]\n\tpath = third_party/tinyxml2\n\turl = https://github.com/aseprite/tinyxml2.git\n[submodule \"third_party/TinyEXIF\"]\n\tpath = third_party/TinyEXIF\n\turl = https://github.com/aseprite/TinyEXIF.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.0537109375,
          "content": "exclude: 'third_party/.*|laf/.*'\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: mixed-line-ending\n        args: [ --fix=lf ]\n        exclude: '.*\\.cmd$|.*\\.ps1$'\n      - id: mixed-line-ending\n        args: [ --fix=crlf ]\n        files: '.*\\.cmd$|.*\\.ps1$'\n\n  - repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.5.5\n    hooks:\n      - id: remove-tabs\n        args: [--whitespaces-count, '8']\n        exclude: '.*\\.gpl$|\\.gitmodules'\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v19.1.5\n    hooks:\n      - id: clang-format\n        files: \\.(c|h|cpp|hpp|cc|hh|cxx|hxx|m|mm)$\n        types_or: [text]\n\n  - repo: https://github.com/pocc/pre-commit-hooks\n    rev: v1.3.5\n    hooks:\n      - id: clang-tidy\n        files: \\.(c|h|cpp|hpp|cc|hh|cxx|hxx)$\n        args: [--fix, --quiet, --use-color]\n        types_or: [text]\n        additional_dependencies: [clang-tidy==19.1.0]\n        require_serial: true\n        stages: [manual]\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.9736328125,
          "content": "# Aseprite\n# Copyright (C) 2018-2024  Igara Studio S.A.\n# Copyright (C) 2001-2018  David Capello\n\ncmake_minimum_required(VERSION 3.16)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF) # We use -std=c++17 instead of -std=gnu++17 in macOS\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n      \"Choose the type of build, options are:\n        None Debug Release RelWithDebInfo Profile.\"\n      FORCE)\nendif()\n\nset(CMAKE_USER_MAKE_RULES_OVERRIDE ${CMAKE_CURRENT_SOURCE_DIR}/laf/cmake/c_flag_overrides.cmake)\nset(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/laf/cmake/cxx_flag_overrides.cmake)\n\n# Aseprite project\nproject(aseprite C CXX)\n\n# Check repository status\nif(NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/laf/CMakeLists.txt\" OR\n   NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/laf/clip/CMakeLists.txt\")\n  message(FATAL_ERROR\n    \"Your Aseprite repository looks incomplete. Please read the following \"\n    \"instructions carefully:\"\n    \"\\n\"\n    \"1) If you have downloaded Aseprite source using the \"\n    \"\\\"Code > Download ZIP\\\" button from GitHub, you will not be able to \"\n    \"compile Aseprite. You need to get the code with other methods (continue \"\n    \"reading).\"\n    \"\\n\"\n    \"2) You can correctly clone the GitHub repository with the \"\n    \"\\\"--recursive\\\" argument:\"\n    \"\\n\"\n    \"  git clone --recursive https://github.com/aseprite/aseprite.git\"\n    \"\\n\"\n    \"3) If you have already cloned the repository and see this message, \"\n    \"you still need to initialize submodules running the following command:\"\n    \"\\n\"\n    \"  git submodule update --init --recursive\"\n    \"\\n\"\n    \"4) Or if you want to download the full source code in a .zip file, \"\n    \"go to the releases page and get the latest \\\"Aseprite-v1.x-Source.zip\\\":\"\n    \"\\n\"\n    \"  https://github.com/aseprite/aseprite/releases\"\n    \"\\n\"\n    \"More information in the building instructions:\"\n    \"\\n\"\n    \"  https://github.com/aseprite/aseprite/blob/main/INSTALL.md#get-the-source-code\")\nendif()\n\n# This is required for KDE/Qt destop integration, which sets\n# BUILD_SHARED_LIBS to TRUE by default\nset(BUILD_SHARED_LIBS off)\n\nenable_testing()\n\n######################################################################\n# Options (these can be specified in cmake command line or modifying\n# CMakeCache.txt)\n\noption(USE_SHARED_CMARK   \"Use your installed copy of cmark\" off)\noption(USE_SHARED_CURL    \"Use your installed copy of curl\" off)\noption(USE_SHARED_GIFLIB  \"Use your installed copy of giflib\" off)\noption(USE_SHARED_JPEGLIB \"Use your installed copy of jpeglib\" off)\noption(USE_SHARED_ZLIB    \"Use your installed copy of zlib\" off)\noption(USE_SHARED_LIBPNG  \"Use your installed copy of libpng\" off)\noption(USE_SHARED_TINYEXIF \"Use your installed copy of TinyEXIF\" off)\noption(USE_SHARED_TINYXML \"Use your installed copy of tinyxml\" off)\noption(USE_SHARED_PIXMAN  \"Use your installed copy of pixman\" off)\noption(USE_SHARED_FREETYPE \"Use shared FreeType library\" off)\noption(USE_SHARED_HARFBUZZ \"Use shared HarfBuzz library\" off)\noption(ENABLE_ASEPRITE_EXE \"Compile main Aseprite executable\" on)\noption(ENABLE_MEMLEAK      \"Enable memory-leaks detector (only for developers)\" off)\noption(ENABLE_NEWS         \"Enable the news in Home tab\" on)\noption(ENABLE_UPDATER      \"Enable automatic check for updates\" on)\noption(ENABLE_SCRIPTING    \"Compile with scripting support\" on)\noption(ENABLE_WEBSOCKET    \"Compile with websocket support\" on)\noption(ENABLE_TESTS        \"Compile unit tests\" off)\noption(ENABLE_BENCHMARKS   \"Compile benchmarks\" off)\noption(ENABLE_TRIAL_MODE   \"Compile the trial version\" off)\noption(ENABLE_DRM          \"Compile the DRM-enabled version (e.g. for automatic updates)\" off)\noption(ENABLE_STEAM        \"Compile with Steam library\" off)\noption(ENABLE_DEVMODE      \"Compile vesion for developers\" off)\noption(ENABLE_I18N_STRINGS \"Clone i18n strings repo (https://github.com/aseprite/strings) to bin/data/strings.git\" off)\noption(FULLSCREEN_PLATFORM \"Enable fullscreen by default\" off)\noption(ENABLE_CLANG_TIDY   \"Enable static analysis\" off)\noption(ENABLE_CCACHE       \"Use CCache to improve recompilation speed (optional)\" on)\noption(ENABLE_SENTRY       \"Use Sentry SDK to report crashes\" off)\noption(ENABLE_WEBP         \"Enable support to load/save .webp files\" on)\noption(ENABLE_PSD          \"Enable experimental support for .psd files\" off)\noption(ENABLE_DESKTOP_INTEGRATION  \"Enable desktop integration modules\" off)\noption(ENABLE_QT_THUMBNAILER       \"Enable kde5/qt5 thumnailer\" off)\nset(CUSTOM_WEBSITE_URL \"\" CACHE STRING \"Enable custom local webserver to check updates\")\n\nif(ENABLE_SENTRY)\n  set(SENTRY_DIR \"\" CACHE STRING \"Sentry native location\")\n  set(SENTRY_DSN \"\" CACHE STRING \"Sentry Data Source Name URL\")\n  set(SENTRY_ENV \"development\" CACHE STRING \"Sentry environment (production, testing, development, etc.)\")\nendif()\n\nif(ENABLE_NEWS OR ENABLE_UPDATER OR ENABLE_DRM)\n  set(REQUIRE_CURL ON)\nelse()\n  set(REQUIRE_CURL OFF)\nendif()\n\n# SSL/TLS support\nif(REQUIRE_CURL AND NOT USE_SHARED_CURL)\n  # Disable OpenSSL (use native libraries only)\n  set(CMAKE_USE_OPENSSL OFF CACHE BOOL \"Use OpenSSL code. Experimental\")\n  set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL \"Use libSSH2\")\n\n  if(WIN32)\n    set(CMAKE_USE_SCHANNEL ON CACHE BOOL \"enable Windows native SSL/TLS\")\n  elseif(APPLE)\n    set(CMAKE_USE_SECTRANSP ON CACHE BOOL \"enable Apple OS native SSL/TLS\")\n  else()\n    # TODO Linux?\n  endif()\nendif()\n\n# By default we'll try to use Skia back-end\nif(NOT LAF_BACKEND)\n  set(LAF_BACKEND \"skia\")\nendif()\n\nif(ENABLE_DRM AND NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/drm/CMakeLists.txt)\n  message(FATAL_ERROR \"Your Aseprite repository is incomplete, clone the drm repository\")\nendif()\n\n######################################################################\n# Profile build type\n\nlist(APPEND CMAKE_BUILD_TYPES Profile)\nmark_as_advanced(\n    CMAKE_C_FLAGS_PROFILE\n    CMAKE_CXX_FLAGS_PROFILE\n    CMAKE_EXE_LINKER_FLAGS_PROFILE)\n\nif(CMAKE_COMPILER_IS_GNUCC)\n    set(CMAKE_C_FLAGS_PROFILE \"-pg\"\n        CACHE STRING \"Profiling C flags\")\n    set(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_C_FLAGS_PROFILE}\"\n        CACHE STRING \"Profiling C++ flags\")\n    set(CMAKE_EXE_LINKER_FLAGS_PROFILE \"-pg\"\n        CACHE STRING \"Profiling linker flags\")\nendif()\n\nif(MSVC)\n    set(CMAKE_C_FLAGS_PROFILE \"/MT /Zi /Ox /Gd\"\n        CACHE STRING \"Profiling C flags\")\n    set(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_C_FLAGS_PROFILE}\"\n        CACHE STRING \"Profiling C++ flags\")\n    set(CMAKE_EXE_LINKER_FLAGS_PROFILE \"/PROFILE /DEBUG\"\n        CACHE STRING \"Profiling linker flags\")\nendif()\n\n######################################################################\n# Directories\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n# We need to specify the output for each configuration to make it work\n# on Visual Studio solutions.\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_PROFILE \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_PROFILE \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_PROFILE \"${CMAKE_BINARY_DIR}/bin\")\n\nset(SOURCE_DATA_DIR     ${CMAKE_CURRENT_SOURCE_DIR}/data)\nset(CMARK_DIR           ${CMAKE_CURRENT_SOURCE_DIR}/third_party/cmark)\nset(CURL_DIR            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/curl)\nset(GIFLIB_DIR          ${CMAKE_CURRENT_SOURCE_DIR}/third_party/giflib)\nset(LIBJPEG_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/third_party/jpeg)\nset(LIBPNG_DIR          ${CMAKE_CURRENT_SOURCE_DIR}/third_party/libpng)\nset(LIBWEBP_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/third_party/libwebp)\nset(PIXMAN_DIR          ${CMAKE_CURRENT_SOURCE_DIR}/third_party/pixman)\nset(FREETYPE_DIR        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/freetype2)\nset(HARFBUZZ_DIR        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/harfbuzz)\nset(SIMPLEINI_DIR       ${CMAKE_CURRENT_SOURCE_DIR}/third_party/simpleini)\nset(TINYEXIF_DIR        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/TinyEXIF)\nset(TINYXML_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/third_party/tinyxml2)\nset(ZLIB_DIR            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zlib)\n\n# Search in the \"cmake\" directory for additional CMake modules.\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\nif(ENABLE_CCACHE)\n  find_package(CCache)\n  if(CCache_FOUND)\n    # Use e.g. \"ccache clang++\" instead of \"clang++\"\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCache_EXECUTABLE}\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK    \"${CCache_EXECUTABLE}\")\n  endif()\nendif()\n# Put libraries into \"lib\".\nset(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)\n\n######################################################################\n# Common definitions to compile all sources (app code and third party)\n\n# Debug C/C++ flags\nif(CMAKE_BUILD_TYPE STREQUAL Debug)\n  add_definitions(-DDEBUGMODE -D_DEBUG)\nelse()\n  add_definitions(-DNDEBUG)\nendif()\n\nif(NOT USE_SHARED_CURL)\n  set(CURL_STATICLIB ON BOOL)\nendif()\n\n# zlib\nif(USE_SHARED_ZLIB)\n  find_package(ZLIB REQUIRED)\nelse()\n  set(ZLIB_FOUND ON)\n  set(ZLIB_LIBRARY zlibstatic)\n  set(ZLIB_LIBRARIES ${ZLIB_LIBRARY})\n  set(ZLIB_INCLUDE_DIRS\n    ${ZLIB_DIR}\n    ${CMAKE_CURRENT_BINARY_DIR}/third_party/zlib) # Zlib generated zconf.h file\n  set(ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_DIRS} CACHE PATH \"\")\nendif()\ninclude_directories(${ZLIB_INCLUDE_DIRS})\n\n# libpng\nif(USE_SHARED_LIBPNG)\n  find_package(PNG REQUIRED)\n  add_definitions(${PNG_DEFINITIONS})\nelse()\n  set(PNG_FOUND ON)\n  set(PNG_LIBRARY png_static)\n  set(PNG_LIBRARIES ${PNG_LIBRARY})\n  set(PNG_INCLUDE_DIRS\n    ${LIBPNG_DIR}\n    ${CMAKE_CURRENT_BINARY_DIR}/third_party/libpng) # Libpng generated pnglibconf.h file\n  set(PNG_INCLUDE_DIR ${PNG_INCLUDE_DIRS} CACHE PATH \"\")\n  set(PNG_PNG_INCLUDE_DIR ${PNG_INCLUDE_DIRS} CACHE PATH \"\")\nendif()\ninclude_directories(${PNG_INCLUDE_DIRS})\nadd_definitions(-DPNG_NO_MMX_CODE) # Do not use MMX optimizations in PNG code\n\n# tinyxml2\nif(USE_SHARED_TINYXML)\n  find_library(TINYXML_LIBRARY NAMES tinyxml2)\n  find_path(TINYXML_INCLUDE_DIR NAMES tinyxml2.h)\nelse()\n  set(TINYXML_LIBRARY tinyxml2)\n  set(TINYXML_INCLUDE_DIR ${TINYXML_DIR})\nendif()\ninclude_directories(${TINYXML_INCLUDE_DIR})\n\n# TinyEXIF\nif(USE_SHARED_TINYEXIF)\n  find_library(TINYEXIF_LIBRARY NAMES TinyEXIF)\n  find_path(TINYEXIF_INCLUDE_DIR NAMES TinyEXIF.h)\nelse()\n  set(TINYEXIF_LIBRARY TinyEXIFstatic)\n  set(TINYEXIF_INCLUDE_DIR ${TINYEXIF_DIR})\nendif()\ninclude_directories(${TINYEXIF_INCLUDE_DIR})\n\n# pixman\nif(USE_SHARED_PIXMAN)\n  find_library(PIXMAN_LIBRARY NAMES pixman pixman-1)\n  find_path(PIXMAN_INCLUDE_DIR NAMES pixman.h PATH_SUFFIXES pixman-1)\nelse()\n  set(PIXMAN_LIBRARY pixman)\n  set(PIXMAN_INCLUDE_DIR\n    ${PIXMAN_DIR}/pixman\n    ${CMAKE_BINARY_DIR}) # For pixman-version.h\nendif()\ninclude_directories(${PIXMAN_INCLUDE_DIR})\n\n# freetype\nif(USE_SHARED_FREETYPE)\n  find_package(Freetype REQUIRED)\nelseif(NOT LAF_BACKEND STREQUAL \"skia\")\n  set(FREETYPE_FOUND ON)\n  set(FREETYPE_LIBRARY freetype)\n  set(FREETYPE_LIBRARIES ${FREETYPE_LIBRARY})\n  set(FREETYPE_INCLUDE_DIRS ${FREETYPE_DIR}/include)\nendif()\n\n# harfbuzz\nif(USE_SHARED_HARFBUZZ)\n  find_package(HarfBuzz)\nelseif(NOT LAF_BACKEND STREQUAL \"skia\")\n  set(HARFBUZZ_FOUND ON)\n  set(HARFBUZZ_LIBRARIES harfbuzz)\n  set(HARFBUZZ_INCLUDE_DIRS ${HARFBUZZ_DIR}/src)\nendif()\n\nif(USE_SHARED_GIFLIB)\n  find_package(GIF REQUIRED)\nelse()\n  set(GIF_LIBRARY giflib)\n  set(GIF_LIBRARIES ${GIF_LIBRARY})\n  set(GIF_INCLUDE_DIR ${GIFLIB_DIR})\n  set(GIF_INCLUDE_DIRS ${GIF_INCLUDE_DIR})\nendif()\ninclude_directories(${GIF_INCLUDE_DIRS})\n\nif(USE_SHARED_JPEGLIB)\n  find_package(JPEG REQUIRED)\nelse()\n  set(JPEG_FOUND ON)\n  set(JPEG_INCLUDE_DIR ${LIBJPEG_DIR})\n  set(JPEG_LIBRARY jpeg CACHE FILEPATH \"\")\n  set(JPEG_LIBRARIES ${JPEG_LIBRARY})\n  set(JPEG_INCLUDE_DIRS ${JPEG_INCLUDE_DIR})\nendif()\ninclude_directories(${JPEG_INCLUDE_DIRS})\n\nif(USE_SHARED_CMARK)\n  find_library(CMARK_LIBRARIES NAMES cmark)\n  find_path(CMARK_INCLUDE_DIRS NAMES cmark.h)\nelse()\n  add_definitions(-DCMARK_STATIC_DEFINE)\n  set(CMARK_LIBRARIES cmark)\nendif()\n\nif(REQUIRE_CURL)\n  if(USE_SHARED_CURL)\n    find_package(CURL REQUIRED)\n  else()\n    set(CURL_FOUND 1)\n    set(CURL_LIBRARY libcurl)\n    set(CURL_LIBRARIES libcurl)\n    set(CURL_INCLUDE_DIRS ${CURL_DIR}/include)\n  endif()\n  include_directories(${CURL_INCLUDE_DIRS})\nendif()\n\n# simpleini\ninclude_directories(${SIMPLEINI_DIR})\n\n# Third parties\nadd_subdirectory(third_party)\n\nif(ENABLE_MEMLEAK)\n  add_definitions(-DLAF_MEMLEAK)\nendif()\n\nset(LAF_WITH_TESTS ${ENABLE_TESTS} CACHE BOOL \"Enable LAF tests\")\nset(UNDO_TESTS     ${ENABLE_TESTS} CACHE BOOL \"Enable undo tests\")\n\nif(ENABLE_DRM)\n  add_subdirectory(drm)\nendif()\nadd_subdirectory(laf)\n\n# libwebp\nif(ENABLE_WEBP)\n  # Use libwebp from Skia\n  if(LAF_BACKEND STREQUAL \"skia\")\n    find_library(WEBP_LIBRARIES webp\n      NAMES libwebp # required for Windows\n      PATHS \"${SKIA_LIBRARY_DIR}\" NO_DEFAULT_PATH)\n    set(WEBP_INCLUDE_DIR \"${SKIA_DIR}/third_party/externals/libwebp/src\")\n    if(WEBP_LIBRARIES)\n      set(WEBP_FOUND ON)\n    else()\n      set(WEBP_FOUND OFF)\n    endif()\n  else()\n    set(WEBP_FOUND ON)\n    set(WEBP_LIBRARIES webp webpdemux libwebpmux)\n    set(WEBP_INCLUDE_DIR ${LIBWEBP_DIR}/src)\n  endif()\nendif()\nmessage(STATUS \"aseprite libwebp: ${WEBP_LIBRARIES}\")\n\n# LAF libraries + Aseprite are compiled with config.h\ntarget_include_directories(laf-base PUBLIC src)\ntarget_compile_definitions(laf-base PUBLIC HAVE_CONFIG_H)\n\nadd_subdirectory(src)\n\n######################################################################\n# Using clang-tidy with cmake.\n# Based on http://mariobadr.com/using-clang-tidy-with-cmake-36.html\n\nif(ENABLE_CLANG_TIDY)\n  find_program(CLANG_TIDY_EXE\n    NAMES \"clang-tidy\"\n    DOC \"Path to clang-tidy executable\")\n  if(NOT CLANG_TIDY_EXE)\n    message(STATUS \"clang-tidy not found.\")\n  else()\n    message(STATUS \"clang-tidy found: ${CLANG_TIDY_EXE}\")\n    set(DO_CLANG_TIDY \"${CLANG_TIDY_EXE}\")\n  endif()\n\n  if(CLANG_TIDY_EXE)\n    set_target_properties(app-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(aseprite PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(cfg-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(clip PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(dio-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(doc-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(filters-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(fixmath-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(flic-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(gen PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(laf-base PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(laf-ft PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(laf-gfx PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(laf-os PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(net-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(obs PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(render-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(ui-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(undo PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n    set_target_properties(updater-lib PROPERTIES CXX_CLANG_TIDY \"${DO_CLANG_TIDY}\")\n  endif()\nendif()\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0087890625,
          "content": "* @dacap\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.9345703125,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0, available at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.1689453125,
          "content": "# Code of Conduct\n\nWe have a [code of conduct](CODE_OF_CONDUCT.md) that we all must\nfollow. Be polite to everyone. If you are not in your best day, take a\ndeep breath and try again.\n\n# New Issues\n\nBefore you submit an issue:\n\n* Search in the current\n  [list of issues](https://github.com/aseprite/aseprite/issues),\n  [bug reports](https://community.aseprite.org/c/bugs), or\n  [feature requests](https://community.aseprite.org/c/features).\n* If the issue already exists, add a :+1: or a :heart:, and you can\n  click the `Subscribe` or `Watching` button to get notifications\n  via email.\n\n# Compilation problems\n\nBefore you submit an issue or a post about a **compilation problem**,\ncheck the following items:\n\n* See how to get the source code correctly in the [INSTALL](INSTALL.md) guide.\n* Check if you are using the latest repository clone.\n* Remember that we use submodules, so you need to initialize and update them.\n* Search in the [GitHub issues about compilation](https://github.com/aseprite/aseprite/issues?q=is%3Aissue+label%3Acompilation)\n  if someone else had the same problem.\n* Remember that might be some [pull requests](https://github.com/aseprite/aseprite/pulls)\n  being reviewed to fix your same issue.\n\nIf you have a compilation problem, you can ask in the\n[Development category](https://community.aseprite.org/c/development)\nin the [Community site](https://community.aseprite.org/) for help\nor create a [new GitHub issue](https://github.com/aseprite/aseprite/issues/new).\n\n# Contributing\n\nOne of the easiest ways to contribute is writing articles, [Steam\nreviews](https://steamcommunity.com/app/431730/reviews/), blog posts,\nrecording video tutorials, creating pixel art in social media with\n[#aseprite](https://twitter.com/search?q=%23aseprite), or showing your\nlove to Aseprite, e.g. naming Aseprite in your website and linking it\nto https://www.aseprite.org/, following [@aseprite](https://twitter.com/aseprite),\nor [buying an extra Aseprite copy to your friends](https://www.aseprite.org/download/).\n\nOther ways to contribute require direct contact with us. For example:\n\n* [Writing documentation](https://github.com/aseprite/docs).\n* Making art (and fan art) with Aseprite and for Aseprite (logos, skins, mockups).\n* Sending patches for features or bug fixes.\n* Reviewing issues in the [issue tracker](https://github.com/aseprite/aseprite/issues)\n  and making comments.\n* Helping other users in the [Community](https://community.aseprite.org/) site.\n\n## Documentation\n\nYou can start seeing the\n[documentation](https://www.aseprite.org/docs/), and\n[contact us](mailto:support@aseprite.org) if you want to help\nwriting documentation or recording [tutorials](https://www.aseprite.org/docs/tutorial/).\n\nIf you are going to write some docs, we recommend you to take\nscreenshots or record a GIF animations to showcase the feature your\nare documenting or the steps to follow:\n\n* As screen recording software, on Windows you can generate GIF files\n  using [LICEcap](http://www.cockos.com/licecap/).\n* PNG/GIF images can be uploaded in the same docs repository\n  [with a pull request](https://github.com/aseprite/docs/pulls)\n\n## Reviewing Issues\n\nYou can [review issues](https://github.com/aseprite/aseprite/issues),\nmake comments, or create\nnew [features](https://community.aseprite.org/c/features),\n[bug reports](https://community.aseprite.org/c/bugs), etc. You are\nencouraged to create mockups for any issue you see and attach them.\n\n## Pre-commit hooks\n\nWe use [pre-commit](https://pre-commit.com/) as way to set up hooks, you can install it with:\n\n```\npip install pre-commit\npre-commit install\n```\n\nIf you need to run it manually, use `pre-commit run`.\n\nTo run `clang-tidy`, you can use `pre-commit run --hook-stage manual clang-tidy`.\nMake sure to check the suggestions and to not apply them arbitrarily, since some might not be 100% applicable to what you're doing.\n\n## Code submission policy\n\nWe have some rules for the changes and commits that are contributed:\n\n* First of all you will need to sign our\n  [Contributor License Agreement](https://github.com/igarastudio/cla) (CLA)\n  to submit your code.\n* Split your changes in the most atomic commits possible: one commit\n  for feature, or fix.\n* Rebase your commits to the `main` branch (or `beta` if you are\n  targeting the beta version).\n* Wrap your commit messages at 72 characters.\n* The first line of the commit message is the subject line.\n* Write the subject line in the imperative mood, e.g. \"Fix something\",\n  not \"Fixed something\".\n* For platform-specific commits start the subject line using\n  `[win]`, `[osx]`, or `[x11]` prefixes.\n* For CLI related commits you can use the `[cli]` prefix in the\n  subject line.\n* For Lua scripting related commits can use the `[lua]` prefix in\n  the subject line.\n* Check the spelling of your code, comments and commit messages.\n* Follow our [coding style guide](docs/CODING_STYLE.md). We're using\n  some C++17 features, targeting macOS 10.9 mainly as the oldest\n  platform (and the one limiting us to newer C++ standards),\n\nYou can also take a look at the [src/README.md](https://github.com/aseprite/aseprite/tree/main/src/#aseprite-source-code)\nguide which contains some information about how the code is structured.\n\n## Pull Request (PR) Assignee\n\nIn case you are a developer or contributor with write or triage access\nto the repository:\n\n1. The PR assignee is the one that is working on the PR right now.\n2. After a PR is sent, you (can) assign the PR to some other developer\n   that will act as a reviewer.\n   * Or if there is no assignee and the PR is not a draft, some\n     developer will take it for review sooner or later.\n3. That developer will review the PR (or reassign the PR).\n4. When the review process is done, the reviewer will merge the PR or\n   reassign the PR to you if it needs some changes.\n5. When you have applied the requested changes, you can reassign the\n   PR to the last reviewer.\n6. If a PR is labeled with some \"needs *something*\" label, it means\n   that the PR will not merged as it is, and *something* is required\n   to continue.\n\nWith this workflow you can find the PRs assigned to you to\nreview/continue working in: https://github.com/pulls/assigned\n\n# Community\n\nYou can use the [Development category](https://community.aseprite.org/c/development)\nto ask questions about the code, how to compile, etc.\nIf you want to start working on something\n([issue](https://github.com/aseprite/aseprite/issues),\n[bug](https://community.aseprite.org/c/bugs),\nor [feature](https://community.aseprite.org/c/features)),\npost a comment asking if somebody is already working on that,\nin that way you can avoid starting programming in something that is already\ndone for the next release or which someone else is working on.\n\n# Future\n\nIf you want to contribute a new feature, I highly recommend trying to\ncontribute a couple of pull requests to fix some bugs first. After\nthat you can check what are the features we're planning for the\nfuture:\n\n* Our [roadmap](http://www.aseprite.org/roadmap/) and our [planning](https://github.com/orgs/aseprite/projects/10).\n* The most liked [issues on GitHub](https://github.com/aseprite/aseprite/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc).\n* [Features on the forum](https://community.aseprite.org/c/features/7/l/latest?order=votes) with the most votes.\n"
        },
        {
          "name": "EULA.txt",
          "type": "blob",
          "size": 5.1884765625,
          "content": "END-USER LICENSE AGREEMENT FOR ASEPRITE\n\nIMPORTANT: PLEASE READ THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT CAREFULLY BEFORE CONTINUING WITH THIS PROGRAM INSTALL.\n\nThis End-User License Agreement (\"EULA\") is a legal agreement between you (either an individual or a single entity) and Igara Studio S.A. (hereinafter referred to as \"Licensor\"), for the software product(s) identified above which may include associated software components, media, printed materials, and \"online\" or electronic documentation (\"SOFTWARE PRODUCT\"). By installing, copying, or otherwise using the SOFTWARE PRODUCT, you agree to be bound by the terms of this EULA. This license agreement represents the entire agreement concerning the program between You and the Licensor, and it supersedes any prior proposal, representation, or understanding between the parties. If you do not agree to the terms of this EULA, do not install or use the SOFTWARE PRODUCT.\n\nThe SOFTWARE PRODUCT is protected by copyright laws and international copyright treaties, as well as other intellectual property laws and treaties. The SOFTWARE PRODUCT is licensed, not sold.\n\n1. GRANT OF LICENSE.\nThe SOFTWARE PRODUCT is licensed as follows:\n(a) Installation and Use.\nThe Licensor grants you the right to install and use copies of the SOFTWARE PRODUCT on your computer running a validly licensed copy of the operating system for which the SOFTWARE PRODUCT was designed.\n(b) Backup Copies.\nYou may also make copies of the SOFTWARE PRODUCT as may be necessary for backup and archival purposes.\n\n2. DESCRIPTION OF OTHER RIGHTS AND LIMITATIONS.\n(a) Maintenance of Copyright Notices.\nYou must not remove or alter any copyright notices on any and all copies of the SOFTWARE PRODUCT.\n(b) Distribution.\nYou may not distribute copies of the SOFTWARE PRODUCT to third parties. Evaluation versions available for download from the Licensor's websites may be freely distributed.\n(c) Prohibition on Reverse Engineering, Decompilation, and Disassembly.\nYou may not reverse engineer, decompile, or disassemble the SOFTWARE PRODUCT, except and only to the extent that such activity is expressly permitted by applicable law notwithstanding this limitation.\n(d) Rental.\nYou may not rent, lease, or lend the SOFTWARE PRODUCT.\n(e) Support Services.\nThe Licensor may provide you with support services related to the SOFTWARE PRODUCT (\"Support Services\"). Any supplemental software code provided to you as part of the Support Services shall be considered part of the SOFTWARE PRODUCT and subject to the terms and conditions of this EULA.\n(f) Compliance with Applicable Laws.\nYou must comply with all applicable laws regarding use of the SOFTWARE PRODUCT.\n(g) Source code.\nYou may only compile and modify the source code of the SOFTWARE PRODUCT for your own personal purpose or to propose a contribution to the SOFTWARE PRODUCT.\n\n3. TERMINATION\nWithout prejudice to any other rights, the Licensor may terminate this EULA if you fail to comply with the terms and conditions of this EULA. In such event, you must destroy all copies of the SOFTWARE PRODUCT in your possession.\n\n4. COPYRIGHT\nAll title, including but not limited to copyrights, in and to the SOFTWARE PRODUCT and any copies thereof are owned by the Licensor or its suppliers. All title and intellectual property rights in and to the content which may be accessed through use of the SOFTWARE PRODUCT is the property of the respective content owner and may be protected by applicable copyright or other intellectual property laws and treaties. This EULA grants you no rights to use such content. All rights not expressly granted are reserved by the Licensor.\n\n5. NO WARRANTIES\nThe Licensor expressly disclaims any warranty for the SOFTWARE PRODUCT. The SOFTWARE PRODUCT is provided 'As Is' without any express or implied warranty of any kind, including but not limited to any warranties of merchantability, noninfringement, or fitness of a particular purpose. The Licensor does not warrant or assume responsibility for the accuracy or completeness of any information, text, graphics, links or other items contained within the SOFTWARE PRODUCT. The Licensor makes no warranties respecting any harm that may be caused by the transmission of a computer virus, worm, time bomb, logic bomb, or other such computer program. The Licensor further expressly disclaims any warranty or representation to Authorized Users or to any third party.\n\n6. LIMITATION OF LIABILITY\nIn no event shall the Licensor be liable for any damages (including, without limitation, lost profits, business interruption, or lost information) rising out of 'Authorized Users' use of or inability to use the SOFTWARE PRODUCT, even if the Licensor has been advised of the possibility of such damages. In no event will the Licensor be liable for loss of data or for indirect, special, incidental, consequential (including lost profit), or other damages based in contract, tort or otherwise. The Licensor shall have no liability with respect to the content of the SOFTWARE PRODUCT or any part thereof, including but not limited to errors or omissions contained therein, libel, infringements of rights of publicity, privacy, trademark rights, business interruption, personal injury, loss of privacy, moral rights or the disclosure of confidential information.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 9.2109375,
          "content": "# Table of contents\n\n* [Platforms](#platforms)\n* [Get the source code](#get-the-source-code)\n* [Dependencies](#dependencies)\n  * [Windows dependencies](#windows-dependencies)\n  * [macOS dependencies](#macos-dependencies)\n  * [Linux dependencies](#linux-dependencies)\n* [Compiling](#compiling)\n  * [Windows details](#windows-details)\n    * [MinGW](#mingw)\n  * [macOS details](#macos-details)\n    * [Issues with Retina displays](#issues-with-retina-displays)\n  * [Linux details](#linux-details)\n* [Using shared third party libraries](#using-shared-third-party-libraries)\n\n# Platforms\n\nYou should be able to compile Aseprite successfully on the following\nplatforms:\n\n* Windows 11 + [Visual Studio Community 2022 + Windows 10.0 SDK (the latest version available)](https://imgur.com/a/7zs51IT) (we don't support [MinGW](#mingw))\n* macOS 13.0.1 Ventura + Xcode 14.1 + macOS 11.3 SDK (older version might work)\n* Linux Ubuntu Bionic 18.04 + clang 10.0\n\n# Get the source code\n\nYou can get the source code downloading a `Aseprite-v1.x-Source.zip`\nfile from the latest Aseprite release (*in that case please follow the\ncompilation instructions inside the `.zip` file*):\n\nhttps://github.com/aseprite/aseprite/releases\n\nOr you can clone the repository and all its submodules using the\nfollowing command:\n\n    git clone --recursive https://github.com/aseprite/aseprite.git\n\nTo update an existing clone you can use the following commands:\n\n    cd aseprite\n    git pull\n    git submodule update --init --recursive\n\nYou can use [Git for Windows](https://git-for-windows.github.io/) to\nclone the repository on Windows.\n\n# Dependencies\n\nTo compile Aseprite you will need:\n\n* The latest version of [CMake](https://cmake.org) (3.16 or greater)\n* [Ninja](https://ninja-build.org) build system\n* And a compiled version of the `aseprite-m102` branch of\n  the [Skia library](https://github.com/aseprite/skia#readme).\n  There are [pre-built packages available](https://github.com/aseprite/skia/releases).\n  You can get some extra information in\n  the [*laf* dependencies](https://github.com/aseprite/laf#dependencies) page.\n\n## Windows dependencies\n\n* Windows 10/11 (we don't support cross-compiling)\n* [Visual Studio Community 2022](https://visualstudio.microsoft.com/downloads/) (we don't support [MinGW](#mingw))\n* The [Desktop development with C++ item + Windows 10.0.18362.0 SDK](https://imgur.com/a/7zs51IT)\n  from the Visual Studio installer\n\n## macOS dependencies\n\nOn macOS you will need macOS 11.3 SDK and Xcode 13.1 (older versions\nmight work).\n\n## Linux dependencies\n\nYou will need the following dependencies on Ubuntu/Debian:\n\n    sudo apt-get install -y g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev\n\nOr use clang-10 packages (or newer) in case that clang in your distribution is older than clang 10.0:\n\n    sudo apt-get install -y clang-10 libc++-10-dev libc++abi-10-dev\n\nOn Fedora:\n\n    sudo dnf install -y gcc-c++ clang libcxx-devel cmake ninja-build libX11-devel libXcursor-devel libXi-devel mesa-libGL-devel fontconfig-devel\n\nOn Arch:\n\n    sudo pacman -S gcc clang libc++ cmake ninja libx11 libxcursor mesa-libgl fontconfig libwebp\n\nOn SUSE:\n\n    sudo zypper install gcc-c++ clang libc++-devel libc++abi-devel cmake ninja libX11-devel libXcursor-devel libXi-devel Mesa-libGL-devel fontconfig-devel\n\n# Compiling\n\n1. [Get Aseprite code](#get-the-source-code), put it in a folder like\n   `C:\\aseprite`, and create a `build` directory inside to leave all\n   the files that are result of the compilation process (`.exe`,\n   `.lib`, `.obj`, `.a`, `.o`, etc).\n\n        cd C:\\aseprite\n        mkdir build\n\n   In this way, if you want to start with a fresh copy of Aseprite\n   source code, you can remove the `build` directory and start again.\n\n2. Enter in the new directory and execute `cmake`:\n\n        cd C:\\aseprite\\build\n        cmake -G Ninja -DLAF_BACKEND=skia ..\n\n   Here `cmake` needs different options depending on your\n   platform. You must check the details for\n   [Windows](#windows-details), [macOS](#macos-details), and\n   [Linux](#linux-details). Some `cmake` options can be modified using tools like\n   [`ccmake`](https://cmake.org/cmake/help/latest/manual/ccmake.1.html)\n   or [`cmake-gui`](https://cmake.org/cmake/help/latest/manual/cmake-gui.1.html).\n\n3. After you have executed and configured `cmake`, you have to compile\n   the project:\n\n        cd C:\\aseprite\\build\n        ninja aseprite\n\n4. When `ninja` finishes the compilation, you can find the executable\n   inside `C:\\aseprite\\build\\bin\\aseprite.exe`.\n\n## Windows details\n\nOpen a command prompt window with the VS 2022 tools. For this you can\nsearch for `x64 Native Tools Command Prompt for VS 2022` in the Start\nmenu, or open a `cmd.exe` terminal and run:\n\n    call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat\" -arch=x64\n\nThe command above is required while using the 64-bit version of\nSkia. When compiling with the 32-bit version, it is possible to open a\n[developer command prompt](https://docs.microsoft.com/en-us/dotnet/framework/tools/developer-command-prompt-for-vs)\ninstead.\n\nAnd then\n\n    cd aseprite\n    mkdir build\n    cd build\n    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLAF_BACKEND=skia -DSKIA_DIR=C:\\deps\\skia -DSKIA_LIBRARY_DIR=C:\\deps\\skia\\out\\Release-x64 -DSKIA_LIBRARY=C:\\deps\\skia\\out\\Release-x64\\skia.lib -G Ninja ..\n    ninja aseprite\n\nIn this case, `C:\\deps\\skia` is the directory where Skia was compiled\nor uncompressed.\n\n### MinGW\n\nWe don't support MinGW compiler and it might bring some problems into\nthe compilation process. If you see that the detected C++ compiler by\ncmake is `C:\\MinGW\\bin\\c++.exe` or something similar, you have to get\nrid of MinGW path (`C:\\MinGW\\bin`) from the `PATH` environment\nvariable and run cmake again from scratch, so the Visual Studio C++\ncompiler (`cl.exe`) is used instead.\n\nYou can define the `CMAKE_IGNORE_PATH` variable when running cmake for\nthe first time in case that you don't know or don't want to modify the\n`PATH` variable, e.g.:\n\n    cmake -DCMAKE_IGNORE_PATH=C:\\MinGW\\bin ...\n\nMore information in [issue #2449](https://github.com/aseprite/aseprite/issues/2449)\n\n## macOS details\n\nRun `cmake` with the following parameters and then `ninja`:\n\n    cd aseprite\n    mkdir build\n    cd build\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n      -DCMAKE_OSX_ARCHITECTURES=x86_64 \\\n      -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \\\n      -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk \\\n      -DLAF_BACKEND=skia \\\n      -DSKIA_DIR=$HOME/deps/skia \\\n      -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \\\n      -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia.a \\\n      -G Ninja \\\n      ..\n    ninja aseprite\n\nIn this case, `$HOME/deps/skia` is the directory where Skia was\ncompiled or downloaded.  Make sure that `CMAKE_OSX_SYSROOT` is\npointing to the correct SDK directory (in this case\n`/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk`),\nbut it could be different in your Mac.\n\n### Apple Silicon\n\nIf you running macOS on an ARM64/AArch64/Apple Silicon Mac (e.g. M1),\nyou can compile a native ARM64 version of Aseprite following similar\nsteps as above but when we call `cmake`, we have some differences:\n\n    cd aseprite\n    mkdir build\n    cd build\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n      -DCMAKE_OSX_ARCHITECTURES=arm64 \\\n      -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \\\n      -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk \\\n      -DLAF_BACKEND=skia \\\n      -DSKIA_DIR=$HOME/deps/skia \\\n      -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-arm64 \\\n      -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-arm64/libskia.a \\\n      -DPNG_ARM_NEON:STRING=on \\\n      -G Ninja \\\n      ..\n    ninja aseprite\n\n### Issues with Retina displays\n\nIf you have a Retina display, check the following issue:\n\n  https://github.com/aseprite/aseprite/issues/589\n\n## Linux details\n\nYou need to use clang and libc++ to compile Aseprite:\n\n    cd aseprite\n    mkdir build\n    cd build\n    export CC=clang\n    export CXX=clang++\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n      -DCMAKE_CXX_FLAGS:STRING=-stdlib=libc++ \\\n      -DCMAKE_EXE_LINKER_FLAGS:STRING=-stdlib=libc++ \\\n      -DLAF_BACKEND=skia \\\n      -DSKIA_DIR=$HOME/deps/skia \\\n      -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \\\n      -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia.a \\\n      -G Ninja \\\n      ..\n    ninja aseprite\n\nIn this case, `$HOME/deps/skia` is the directory where Skia was\ncompiled or uncompressed.\n\n### GCC compiler\n\nIn case that you are using the pre-compiled Skia version, you must use\nthe clang compiler and libc++ to compile Aseprite. Only if you compile\nSkia with GCC, you will be able to compile Aseprite with GCC, and this\nis not recommended as you will have a performance penalty doing so.\n\n# Using shared third party libraries\n\nIf you don't want to use the embedded code of third party libraries\n(i.e. to use your installed versions), you can disable static linking\nconfiguring each `USE_SHARED_` option.\n\nAfter running `cmake -G`, you can edit `build/CMakeCache.txt` file,\nand enable the `USE_SHARED_` flag (set its value to `ON`) of the\nlibrary that you want to be linked dynamically.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4365234375,
          "content": "# Aseprite\n\n[![build](https://github.com/aseprite/aseprite/actions/workflows/build.yml/badge.svg)](https://github.com/aseprite/aseprite/actions/workflows/build.yml)\n[![Translation Status](https://hosted.weblate.org/widget/aseprite/aseprite/svg-badge.svg)](https://hosted.weblate.org/engage/aseprite/)\n[![Discourse Community](https://img.shields.io/badge/discourse-community-brightgreen.svg?style=flat)](https://community.aseprite.org/)\n[![Discord Server](https://discordapp.com/api/guilds/324979738533822464/embed.png)](https://discord.gg/Yb2CeX8)\n\n## Introduction\n\n**Aseprite** is a program to create animated sprites. Its main features are:\n\n* Sprites are composed of [layers &amp; frames](https://www.aseprite.org/docs/timeline/) as separated concepts.\n* Support for [color profiles](https://www.aseprite.org/docs/color-profile/) and different [color modes](https://www.aseprite.org/docs/color-mode/): RGBA, Indexed (palettes up to 256 colors), Grayscale.\n* [Animation facilities](https://www.aseprite.org/docs/animation/), with real-time [preview](https://www.aseprite.org/docs/preview-window/) and [onion skinning](https://www.aseprite.org/docs/onion-skinning/).\n* [Export/import](https://www.aseprite.org/docs/exporting/) animations to/from [sprite sheets](https://www.aseprite.org/docs/sprite-sheet/), GIF files, or sequence of PNG files (and FLC, FLI, JPG, BMP, PCX, TGA).\n* [Multiple editors](https://www.aseprite.org/docs/workspace/#drag-and-drop-tabs) support.\n* [Layer groups](https://imgur.com/x3OKkGj) for organizing your work, and [reference layers](https://twitter.com/aseprite/status/806889204601016325) for rotoscoping.\n* Pixel-art specific tools like [Pixel Perfect freehand mode](https://imgur.com/0fdlNau), [Shading ink](https://www.aseprite.org/docs/shading/), [Custom Brushes](https://twitter.com/aseprite/status/1196883990080344067), [Outlines](https://twitter.com/aseprite/status/1126548469865431041), [Wide Pixels](https://imgur.com/1yZKUcs), etc.\n* Other special drawing tools like [Pressure sensitivity](https://twitter.com/aseprite/status/1253770784708886533), [Symmetry Tool](https://twitter.com/aseprite/status/659709226747625472), [Stroke and Fill](https://imgur.com/7JZQ81o) selection, [Gradients](https://twitter.com/aseprite/status/1126549217856622597).\n* [Tiled mode](https://youtu.be/G_JeWBaxQIg) useful to draw patterns and textures.\n* [Transform multiple frames/layers](https://twitter.com/aseprite/status/1170007034651172866) at the same time.\n* [Lua scripting capabilities](https://www.aseprite.org/docs/scripting/).\n* [CLI - Command Line Interface](https://www.aseprite.org/docs/cli/) to automatize tasks.\n* [Quick Reference / Cheat Sheet](https://www.aseprite.org/quickref/) keyboard shortcuts ([customizable keys](https://imgur.com/rvAUxyF) and [mouse wheel](https://imgur.com/oNqFqVb)).\n* [Reopen closed files](https://twitter.com/aseprite/status/1202641475256881153) and [recover data](https://www.aseprite.org/docs/data-recovery/) in case of crash.\n* Undo/Redo for every operation and support for [non-linear undo](https://imgur.com/9I42fZK).\n* [More features &amp; tips](https://twitter.com/aseprite/status/1124442198651678720)\n\n## Issues\n\nThere is a list of\n[Known Issues](https://github.com/aseprite/aseprite/issues) (things\nto be fixed or that aren't yet implemented).\n\nIf you found a bug or have a new idea/feature for the program,\n[you can report them](https://github.com/aseprite/aseprite/issues/new).\n\n## Support\n\nYou can ask for help in:\n\n* [Aseprite Community](https://community.aseprite.org/)\n* [Aseprite Discord Server](https://discord.gg/Yb2CeX8)\n* Official support: [support@aseprite.org](mailto:support@aseprite.org)\n* Social networks and community-driven places:\n  [Twitter](https://twitter.com/aseprite/),\n  [Facebook](https://facebook.com/aseprite/),\n  [YouTube](https://www.youtube.com/user/aseprite),\n  [Instagram](https://www.instagram.com/aseprite/).\n\n## Authors\n\nAseprite is being developed by [Igara Studio](https://igara.com/):\n\n* [David Capello](https://davidcapello.com/)\n* [Gaspar Capello](https://github.com/Gasparoken)\n* [Martín Capello](https://github.com/martincapello)\n\n## Credits\n\nThe default Aseprite theme was introduced in v0.8, created by:\n\n* [Ilija Melentijevic](https://ilkke.net/)\n\nA modified dark version of this theme introduced in v1.3-beta1 was created by:\n\n* [Nicolas Desilets](https://twitter.com/MapleGecko)\n* [David Capello](https://twitter.com/davidcapello)\n\nAseprite includes color palettes created by:\n\n* [Richard \"DawnBringer\" Fhager](http://pixeljoint.com/p/23821.htm), [16 colors](http://pixeljoint.com/forum/forum_posts.asp?TID=12795),  [32 colors](http://pixeljoint.com/forum/forum_posts.asp?TID=16247).\n* [Arne Niklas Jansson](http://androidarts.com/), [16 colors](http://androidarts.com/palette/16pal.htm), [32 colors](http://wayofthepixel.net/index.php?topic=15824.msg144494).\n* [ENDESGA Studios](https://twitter.com/ENDESGA), [EDG16 and EDG32](https://forums.tigsource.com/index.php?topic=46126.msg1279124#msg1279124), and [other palettes](https://twitter.com/ENDESGA/status/865812366931353600).\n* [Hyohnoo Games](https://twitter.com/Hyohnoo), [mail24](https://twitter.com/Hyohnoo/status/797472587974639616) palette.\n* [Davit Masia](https://twitter.com/DavitMasia), [matriax8c](https://twitter.com/DavitMasia/status/834862452164612096) palette.\n* [Javier Guerrero](https://twitter.com/Xavier_Gd), [nyx8](https://twitter.com/Xavier_Gd/status/868519467864686594) palette.\n* [Adigun A. Polack](https://twitter.com/adigunpolack), [AAP-64](http://pixeljoint.com/pixelart/119466.htm), [AAP-Splendor128](http://pixeljoint.com/pixelart/120714.htm), [SimpleJPC-16](http://pixeljoint.com/pixelart/119844.htm), and [AAP-Micro12](http://pixeljoint.com/pixelart/121151.htm) palette.\n* [PineTreePizza](https://twitter.com/PineTreePizza), [Rosy-42](https://twitter.com/PineTreePizza/status/1006536191955623938) palette.\n\nIt tries to replicate some pixel-art algorithms:\n\n* [RotSprite](http://forums.sonicretro.org/index.php?showtopic=8848&st=15&p=159754&#entry159754) by Xenowhirl.\n* [Pixel perfect drawing algorithm](https://deepnight.net/blog/tools/pixel-perfect-drawing/) by [Sébastien Bénard](https://twitter.com/deepnightfr) and [Carduus](https://twitter.com/CarduusHimself/status/420554200737935361).\n\nThanks to [third-party open source projects](docs/LICENSES.md), to\n[contributors](https://www.aseprite.org/contributors/), and all the\npeople who have contributed ideas, patches, bugs report, feature\nrequests, donations, and help us to develop Aseprite.\n\n## License\n\nThis program is distributed under three different licenses:\n\n1. Source code and official releases/binaries are distributed under\n   our [End-User License Agreement for Aseprite (EULA)](EULA.txt). Please check\n   that there are [modules/libraries in the source code](src/README.md) that\n   are distributed under the MIT license\n   (e.g. [laf](https://github.com/aseprite/laf),\n   [clip](https://github.com/aseprite/clip),\n   [undo](https://github.com/aseprite/undo),\n   [observable](https://github.com/aseprite/observable),\n   [ui](src/ui), etc.).\n2. You can request a special\n   [educational license](https://www.aseprite.org/faq/#is-there-an-educational-license)\n   in case you are a teacher in an educational institution and want to\n   use Aseprite in your classroom (in-situ).\n3. Steam releases are distributed under the terms of the\n   [Steam Subscriber Agreement](http://store.steampowered.com/subscriber_agreement/).\n\nYou can get more information about Aseprite license in the\n[FAQ](https://www.aseprite.org/faq/#licensing-&-commercial).\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.4453125,
          "content": "@echo off\r\n\r\nrem If cl.exe is not available, we try to run the vcvars64.bat\r\nwhere cl.exe >nul 2>nul\r\nif %errorlevel%==1 (\r\n   @call \"%ProgramFiles%\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\r\n)\r\n\r\nrem Add an extra path element which will be invalidated by Git Bash.\r\nrem In this way we avoid invalidating the PATH location where cl.exe is.\r\nset PATH=.;%PATH%\r\n\r\npowershell -ExecutionPolicy Bypass -File .\\build.ps1 %*\r\npause\r\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.462890625,
          "content": "if (Test-Path \"$env:ProgramFiles\\Git\\bin\") {\r\n    $env:Path = \"$env:ProgramFiles\\Git\\bin;$env:ProgramFiles\\Git\\mingw64\\bin\" + $env:Path\r\n}\r\nelseif (Test-Path \"$env:ProgramFiles(x86)\\Git\\bin\") {\r\n    $env:Path = \"$env:ProgramFiles(x86)\\Git\\bin;$env:ProgramFiles(x86)\\Git\\mingw64\\bin;\" + $env:Path\r\n}\r\n\r\ntry {\r\n    sh.exe build.sh $args\r\n}\r\ncatch {\r\n    echo \"bash.exe doesn't found\"\r\n    echo \"`r`nInstall Git Bash from:\"\r\n    echo \"`r`n  https://gitforwindows.org/`r`n\"\r\n}\r\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 15.791015625,
          "content": "#! /bin/bash\n#\n# This is a script to help users and developers to build Aseprite.\n# Usage:\n#\n#   ./build.sh\n#   ./build.sh --reset\n#   ./build.sh --auto [--norun]\n#\n# If you run this script without parameters, you will be able to\n# follows the instructions and a configuration will be stored in a\n# \".build\" directory.\n#\n# Options:\n#\n#   --reset   Deletes the configuration and you can start over\n#   --auto    Tries to build the default user configuration (release mode)\n#   --norun   Doesn't auto-run when using --auto\n#\n\necho \"======================= BUILD ASEPRITE HELPER ========================\"\n\n# Check that we are running the script from the Aseprite clone directory.\npwd=$(pwd)\nif [[ ! -f \"$pwd/EULA.txt\" || ! -f \"$pwd/.gitmodules\" ]] ; then\n    echo \"\"\n    echo \"Run build script from the Aseprite directory\"\n    exit 1\nfi\n\n# Use \"./build.sh --reset\" to reset all the configuration (deletes\n# .build directory).\nif [ \"$1\" == \"--reset\" ] ; then\n    echo \"\"\n    echo \"Resetting $pwd/.build directory\"\n    if [ -f \"$pwd/.build/builds_dir\" ] ; then rm $pwd/.build/builds_dir ; fi\n    if [ -f \"$pwd/.build/log\" ] ; then rm $pwd/.build/log ; fi\n    if [ -f \"$pwd/.build/main_skia_dir\" ] ; then rm $pwd/.build/main_skia_dir ; fi\n    if [ -f \"$pwd/.build/beta_skia_dir\" ] ; then rm $pwd/.build/beta_skia_dir ; fi\n    if [ -f \"$pwd/.build/userkind\" ] ; then rm $pwd/.build/userkind ; fi\n    if [ -d \"$pwd/.build\" ] ; then rmdir $pwd/.build ; fi\n    echo \"Done\"\n    exit 0\nfi\n\n# Use \"./build.sh --auto\" to build the user configuration without\n# questions (downloading Skia/release mode).\nauto=\nif [ \"$1\" == \"--auto\" ] ; then\n    shift\n    auto=1\nfi\nnorun=\nif [ \"$1\" == \"--norun\" ] ; then\n    shift\n    norun=1\nfi\n\n# Platform.\nif [[ \"$(uname)\" =~ \"MINGW32\" ]] || [[ \"$(uname)\" =~ \"MINGW64\" ]] || [[ \"$(uname)\" =~ \"MSYS_NT-10.0\" ]] ; then\n    is_win=1\n    cpu=x64\n\n    if ! cl.exe >/dev/null 2>/dev/null ; then\n        echo \"\"\n        echo \"MSVC compiler (cl.exe) not found in PATH\"\n        echo \"\"\n        echo \"  PATH=$PATH\"\n        echo \"\"\n        exit 1\n    fi\nelif [[ \"$(uname)\" == \"Linux\" ]] ; then\n    is_linux=1\n    cpu=x64\nelif [[ \"$(uname)\" =~ \"Darwin\" ]] ; then\n    is_macos=1\n    if [[ $(uname -m) == \"arm64\" ]]; then\n        cpu=arm64\n    else\n        cpu=x64\n    fi\nfi\n\n# Check utilities.\nif ! cmake --version >/dev/null ; then\n    echo \"\"\n    echo \"cmake utility is not available. You can get cmake from:\"\n    echo \"\"\n    echo \"  https://cmake.org/download/\"\n    echo \"\"\n    exit 1\nfi\nif ! ninja --version >/dev/null ; then\n    echo \"\"\n    echo \"ninja utility is not available. You can get ninja from:\"\n    echo \"\"\n    echo \"  https://github.com/ninja-build/ninja/releases\"\n    echo \"\"\n    exit 1\nfi\n\n# Check that all submodules are checked out.\nrun_submodule_update=\nfor module in $(cat \"$pwd/.gitmodules\" | \\\n                    grep '^\\[submodule' | \\\n                    sed -e 's/^\\[.*\\\"\\(.*\\)\\\"\\]/\\1/') \\\n              $(cat \"$pwd/laf/.gitmodules\" | \\\n                    grep '^\\[submodule' | \\\n                    sed -e 's/^\\[.*\\\"\\(.*\\)\\\"\\]/laf\\/\\1/') ; do\n    if [[ ! -f \"$module/CMakeLists.txt\" &&\n          ! -f \"$module/Makefile\" &&\n          ! -f \"$module/makefile\" &&\n          ! -f \"$module/Makefile.am\" ]] ; then\n        echo \"\"\n        echo \"Module $module doesn't exist.\"\n        if [ $auto ] ; then\n            run_submodule_update=1\n            break\n        else\n            echo \"Run:\"\n            echo \"\"\n            echo \"  git submodule update --init --recursive\"\n            echo \"\"\n            exit 1\n        fi\n    fi\ndone\nif [ $run_submodule_update ] ; then\n    echo \"Running:\"\n    echo \"\"\n    echo \"  git submodule update --init --recursive\"\n    echo \"\"\n    if ! git submodule update --init --recursive ; then\n        echo \"Failed, try again\"\n        exit 1\n    fi\n    echo \"Done\"\nfi\n\n# Create the directory to store the configuration.\nif [ ! -d \"$pwd/.build\" ] ; then\n    mkdir \"$pwd/.build\"\nfi\n\n# Kind of user (User or Developer).\n# For users we simplify the process (no multiple builds), for\n# developers we have more options (debug mode, etc.).\nif [ ! -f \"$pwd/.build/userkind\" ] ; then\n    if [ $auto ] ; then\n        echo \"user\" > $pwd/.build/userkind\n    else\n        echo \"\"\n        echo \"Select what kind of user you are (press U or D keys):\"\n        echo \"\"\n        echo \"  [U]ser: give a try to Aseprite\"\n        echo \"  [D]eveloper: develop/modify Aseprite\"\n        echo \"\"\n        read -sN 1 -p \"[U/D]? \"\n        echo \"\"\n        if [[ \"$REPLY\" == \"d\" || \"$REPLY\" == \"D\" ]] ; then\n            echo \"developer\" > $pwd/.build/userkind\n        elif [[ \"$REPLY\" == \"u\" || \"$REPLY\" == \"U\" ]] ; then\n            echo \"user\" > $pwd/.build/userkind\n        else\n            echo \"Use U or D keys to select kind of user/build process\"\n            exit 1\n        fi\n    fi\nfi\n\nuserkind=$(echo -n $(cat $pwd/.build/userkind))\nif [ \"$userkind\" == \"developer\" ] ; then\n    echo \"======================= BUILDING FOR DEVELOPER =======================\"\nelse\n    echo \"========================= BUILDING FOR USER ==========================\"\nfi\n\n# Get the builds_dir location.\nif [ ! -f \"$pwd/.build/builds_dir\" ] ; then\n    if [ \"$userkind\" == \"developer\" ] ; then\n        # The \"builds\" folder is a place where all possible combination/builds\n        # will be stored. If the ASEPRITE_BUILD environment variable is\n        # defined, that's the directory, in other case for a regular \"user\"\n        # the folder will be this same directory where Aseprite was cloned.\n        if [[ \"$ASEPRITE_BUILD\" != \"\" ]] ; then\n            if [ $is_win ] ; then\n                builds_dir=$(cygpath \"$ASEPRITE_BUILD\")\n            else\n                builds_dir=\"$ASEPRITE_BUILD\"\n            fi\n\n            if [ -d \"$builds_dir\" ] ; then\n                echo \"\"\n                echo \"Using ASEPRITE_BUILD environment variable for builds directory.\"\n            else\n                if ! mkdir \"$builds_dir\" ; then\n                    echo \"\"\n                    echo \"The ASEPRITE_BUILD is defined but we weren't able to create the directory:\"\n                    echo \"\"\n                    echo \"  ASEPRITE_BUILD=$builds_dir\"\n                    echo \"\"\n                    echo \"To solve this issue delete the ASEPRITE_BUILD variable or point it to a valid path.\"\n                    exit 1\n                fi\n            fi\n        else\n            # Default location for developers\n            builds_dir=$HOME/builds\n\n            echo \"\"\n            echo \"Select a folder where to leave all builds:\"\n            echo \"  builds_dir/\"\n            echo \"    release-x64/...\"\n            echo \"    debug-x64/...\"\n            echo \"\"\n            echo \"builds_dir [$builds_dir]? \"\n            read builds_dir_read\n            if [ \"$builds_dir_read\" != \"\" ] ; then\n                builds_dir=\"$builds_dir_read\"\n            fi\n        fi\n    else\n        # Default location for users\n        builds_dir=\"$pwd\"\n\n        echo \"\"\n        echo \"We'll build Aseprite in $builds_dir/build directory\"\n    fi\n    echo \"$builds_dir\" > \"$pwd/.build/builds_dir\"\nfi\n# Overwrite $builds_dir variable from the config content.\nbuilds_dir=\"$(echo -n $(cat $pwd/.build/builds_dir))\"\n\n# List all builds.\nbuilds_list=\"$(mktemp)\"\nn=1\nfor file in $(ls $builds_dir/*/CMakeCache.txt 2>/dev/null | sort) ; do\n    if cat \"$file\" | grep -q \"CMAKE_PROJECT_NAME:STATIC=aseprite\" ; then\n        if [ $n -eq 1 ] ; then\n            echo \"-- AVAILABLE BUILDS --\"\n        fi\n        echo \"$file\" >> $builds_list\n        echo \"$n. $file\"\n        n=$(($n+1))\n    fi\ndone\n\n# New build configuration.\nbuild_type=RelWithDebInfo\n\n# No builds, so this is the first build.\nif [[ $n -eq 1 ]] ; then\n    echo \"-- FIRST BUILD --\"\n    if [ \"$userkind\" == \"developer\" ] ; then\n        active_build_dir=\"$builds_dir/aseprite-release\"\n    else\n        active_build_dir=\"$builds_dir/build\"\n    fi\n    echo \"First build directory: $active_build_dir\"\nelse\n    echo \"N. New build (N key)\"\n    echo \"U. Update Visual Studio/Windows Kit/macOS SDK version (U key)\"\n    read -p \"Select an option or number to build? \" build_n\n\n    # New build\n    if [[ \"$build_n\" == \"n\" || \"$build_n\" == \"N\" ]] ; then\n        read -p \"Select build type [RELEASE/debug]? \"\n        if [[ \"${REPLY,,}\" == \"debug\" ]] ; then\n            build_type=Debug\n            new_build_name=aseprite-debug\n        else\n            build_type=RelWithDebInfo\n            new_build_name=aseprite-release\n        fi\n\n        read -p \"Select a name [$new_build_name]? \"\n        if [[ \"$REPLY\" != \"\" ]] ; then\n            new_build_name=$REPLY\n        fi\n        active_build_dir=\"$builds_dir/$new_build_name\"\n\n    # Update SDK\n    elif [[ \"$build_n\" == \"u\" || \"$build_n\" == \"U\" ]] ; then\n        echo \"Update SDK dirs...\"\n        if [ $is_win ] ; then\n            newclver=$(echo $VCToolsInstallDir | sed -e 's_^.*\\\\\\([0-9\\.]*\\)\\\\$_\\1_')\n\n            function update_file {\n                file=$1\n                echo \"--- Updating $file ---\" | tee -a \"$pwd/.build/log\"\n                mv \"$file\" \"$file-old\"\n                cat \"$file-old\" | sed -e 's_^\\(.*/VC/Tools/MSVC/\\)\\([0-9\\.]*\\)\\(.*$\\)_\\1'$newclver'\\3_' > \"$file\"\n                diff -w -u3 \"$file-old\" \"$file\" >> \"$pwd/.build/log\"\n                echo \"--- End $file ---\" >> \"$pwd/.build/log\"\n            }\n\n            echo \"New VC version: $newclver\"\n            for file in $(cat $builds_list) ; do\n                build_dir=$(dirname $file)\n                echo \"--- Updating $build_dir ---\"\n                update_file \"$file\"\n                for other_file in \"$build_dir/CMakeFiles/rules.ninja\" \\\n                                  \"$build_dir\"/CMakeFiles/*/*.cmake \\\n                                  \"$build_dir/third_party/libpng/scripts/genout.cmake\" ; do\n                    update_file \"$other_file\"\n                done\n            done\n        fi\n        echo \"Done\"\n        exit\n\n    else # Build the selected dir\n        n=1\n        for file in $(cat $builds_list) ; do\n            if [ \"$n\" == \"$build_n\" ] ; then\n                active_build_dir=$(dirname $file)\n                build_type=$(cat $active_build_dir/CMakeCache.txt | grep CMAKE_BUILD_TYPE | cut -d \"=\" -f2)\n                break\n            fi\n            n=$(($n+1))\n        done\n    fi\nfi\n\nif [ \"$active_build_dir\" == \"\" ] ; then\n    echo \"No build selected\"\n    exit 1\nfi\n\nif [ -f \"$active_build_dir/CMakeCache.txt\" ] ; then\n    source_dir=$(cat $active_build_dir/CMakeCache.txt | grep aseprite_SOURCE_DIR | cut -d \"=\" -f2)\nelse\n    source_dir=\"$pwd\"\nfi\nbranch_name=$(git --git-dir=\"$source_dir/.git\" rev-parse --abbrev-ref HEAD)\n\nif [[ \"$branch_name\" == \"main\" || \"$branch_name\" == \"beta\" ]] ; then\n    base_branch_name=\"$branch_name\"\nelse\n    # Get the origin (or first remote) name\n    remote=$(git --git-dir=\"$source_dir/.git\" remote | grep origin)\n    if [ \"$remote\" == \"\" ] ; then\n        remote=$(git --git-dir=\"$source_dir/.git\" remote | head -n1)\n    fi\n\n    if git --git-dir=\"$source_dir/.git\" branch --contains \"$remote/beta\" | grep -q \"^\\* $branch_name\\$\" ; then\n        base_branch_name=beta\n    elif git --git-dir=\"$source_dir/.git\" branch --contains \"$remote/main\" | grep -q \"^\\* $branch_name\\$\" ; then\n        base_branch_name=main\n    else\n        echo \"\"\n        echo \"Error: Branch $branch_name looks like doesn't belong to main or beta\"\n        echo \"\"\n        exit 1\n    fi\nfi\n\necho \"=========================== CONFIGURATION ============================\"\necho \"Build type: $build_type\"\necho \"Build dir: \\\"$active_build_dir\\\"\"\necho \"Source dir: \\\"$source_dir\\\"\"\nif [ \"$branch_name\" != \"$base_branch_name\" ] ; then\n    echo \"Branch name: $base_branch_name > $branch_name\"\nelse\n    echo \"Branch name: $base_branch_name\"\nfi\n\n# Required Skia for the base branch.\nif [ \"$base_branch_name\" == \"beta\" ] ; then\n    skia_tag=m124-08a5439a6b\n    file_skia_dir=beta_skia_dir\n    possible_skia_dir_name=skia-m124\nelse\n    skia_tag=m102-861e4743af\n    file_skia_dir=main_skia_dir\n    possible_skia_dir_name=skia\nfi\n\n# Check Skia dependency.\nif [ ! -f \"$pwd/.build/$file_skia_dir\" ] ; then\n    # Try \"C:/deps/skia\" or \"$HOME/deps/skia\"\n    if [[ $is_win ]] ; then\n        skia_dir=\"C:/deps/$possible_skia_dir_name\"\n    else\n        skia_dir=\"$HOME/deps/$possible_skia_dir_name\"\n    fi\n\n    if [ ! -d \"$skia_dir\" ] ; then\n        echo \"\"\n        echo \"Skia directory wasn't found.\"\n        echo \"\"\n\n        echo \"Select Skia directory to create [$skia_dir]? \"\n        if [ ! $auto ] ; then\n            read skia_dir_read\n            if [ \"$skia_dir_read\" != \"\" ] ; then\n                skia_dir=\"$skia_dir_read\"\n            fi\n        fi\n        mkdir -p $skia_dir || exit 1\n    fi\n    echo $skia_dir > \"$pwd/.build/$file_skia_dir\"\nfi\nskia_dir=$(echo -n $(cat $pwd/.build/$file_skia_dir))\nif [ ! -d \"$skia_dir\" ] ; then\n    mkdir \"$skia_dir\"\nfi\n\n# Only on Windows we need the Debug version of Skia to compile the\n# Debug version of Aseprite.\nif [[ $is_win && \"$build_type\" == \"Debug\" ]] ; then\n    skia_library_dir=\"$skia_dir/out/Debug-x64\"\nelse\n    skia_library_dir=\"$skia_dir/out/Release-$cpu\"\nfi\n\n# If the library directory is not available, we can try to download\n# the pre-built package.\nif [ ! -d \"$skia_library_dir\" ] ; then\n    echo \"\"\n    echo \"Skia library wasn't found.\"\n    echo \"\"\n    if [ ! $auto ] ; then\n        read -sN 1 -p \"Download pre-compiled Skia automatically [Y/n]? \"\n    fi\n    if [[ $auto || \"$REPLY\" == \"\" || \"$REPLY\" == \"y\" || \"$REPLY\" == \"Y\" ]] ; then\n        if [[ $is_win && \"$build_type\" == \"Debug\" ]] ; then\n            skia_build=Debug\n        else\n            skia_build=Release\n        fi\n\n        if [ $is_win ] ; then\n            skia_file=Skia-Windows-$skia_build-$cpu.zip\n        elif [ $is_macos ] ; then\n            skia_file=Skia-macOS-$skia_build-$cpu.zip\n        else\n            skia_file=Skia-Linux-$skia_build-$cpu-libstdc++.zip\n        fi\n        skia_url=https://github.com/aseprite/skia/releases/download/$skia_tag/$skia_file\n        if [ ! -f \"$skia_dir/$skia_file\" ] ; then\n            curl -L -o \"$skia_dir/$skia_file\" \"$skia_url\"\n        fi\n        if [ ! -d \"$skia_library_dir\" ] ; then\n            unzip -n -d \"$skia_dir\" \"$skia_dir/$skia_file\"\n        fi\n    else\n        echo \"Please follow these instructions to compile Skia manually:\"\n        echo \"\"\n        echo \"  https://github.com/aseprite/skia?tab=readme-ov-file#skia-for-aseprite-and-laf\"\n        echo \"\"\n        exit 1\n    fi\nfi\necho \"================================ SKIA ================================\"\necho \"Skia directory: \\\"$skia_dir\\\"\"\necho \"Skia library directory: \\\"$skia_library_dir\\\"\"\nif [ ! -d \"$skia_library_dir\" ] ; then\n    echo \"  But the Skia library directory wasn't found.\"\n    exit 1\nfi\n\n# Building\necho \"=============================== CMAKE ================================\"\nif [ ! -f \"$active_build_dir/ninja.build\" ] ; then\n    echo \"\"\n    echo \"We are going to run cmake and then build the project.\"\n    echo \"This will take some minutes.\"\n    echo \"\"\n    if [ ! $auto ] ; then\n        read -sN 1 -p \"Press any key to continue. \"\n    fi\n\n    if [ $is_macos ] ; then\n        osx_deployment_target=\"-DCMAKE_OSX_DEPLOYMENT_TARGET=11.0\"\n    else\n        osx_deployment_target=\n    fi\n\n    echo \"Configuring Aseprite...\"\n    if ! cmake -B \"$active_build_dir\" -S \"$source_dir\" -G Ninja \\\n         -DCMAKE_BUILD_TYPE=$build_type \\\n         $osx_deployment_target \\\n         -DLAF_BACKEND=skia \\\n         -DSKIA_DIR=\"$skia_dir\" \\\n         -DSKIA_LIBRARY_DIR=\"$skia_library_dir\" | \\\n            tee -a \"$pwd/.build/log\" ; then\n        echo \"Error running cmake.\"\n        exit 1\n    fi\nfi\necho \"============================== BUILDING ==============================\"\nif ! cmake --build \"$active_build_dir\" -- aseprite | tee -a \"$pwd/.build/log\" ; then\n    echo \"Error building Aseprite.\"\n    exit 1\nfi\n\necho \"================================ DONE ================================\"\nif [ $is_win ] ; then exe=.exe ; else exe= ; fi\necho \"Run Aseprite with the following command:\"\necho \"\"\necho \"  $active_build_dir/bin/aseprite$exe\"\necho \"\"\n\n# Run Aseprite in --auto mode\nif [[ $auto && ! $norun ]] ; then\n    $active_build_dir/bin/aseprite$exe\nfi\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "laf",
          "type": "commit",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}