{
  "metadata": {
    "timestamp": 1736566435323,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emscripten-core/emscripten",
      "stars": 26027,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.5078125,
          "content": "---\nLanguage: Cpp\nBasedOnStyle: LLVM\nPointerAlignment: Left\nIndentCaseLabels: true\nContinuationIndentWidth: 2\nConstructorInitializerIndentWidth: 2\nSpaceAfterTemplateKeyword: false\nBinPackArguments: false\nBinPackParameters: false\nWhitespaceSensitiveMacros: ['EM_ASM', 'EM_JS', 'EM_ASM_INT', 'EM_ASM_DOUBLE', 'EM_ASM_PTR', 'MAIN_THREAD_EM_ASM', 'MAIN_THREAD_EM_ASM_INT', 'MAIN_THREAD_EM_ASM_DOUBLE', 'MAIN_THREAD_EM_ASM_DOUBLE', 'MAIN_THREAD_ASYNC_EM_ASM']\n---\nLanguage: JavaScript\nBasedOnStyle: LLVM\nColumnLimit: 100\n---\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.234375,
          "content": "# https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{js,py}]\ncharset = utf-8\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.8603515625,
          "content": "# This file contains a list of commits that are not likely what you\n# are looking for in a blame, such as mass reformatting or renaming.\n# You can set this file as a default ignore file for blame by running\n# the following command.\n#\n# $ git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Remove tabs and fix formatting in test/sse/.  NFC (#18245)\n3cd47cff5da467ae7ca2a29490d8b04af897023f\n\n# [embind docs] Reformat and cleanup whitespace.\n9b1a5910c4f31cff4949541a42ac956ba45e4701\n\n# [NFC] WasmFS: Run clang-format (#19995)\n2384d4e16f5309a642481387edb3774913fab382\n\n# Don't indent code inside C++ namespace in embind.h. NFC (#14098)\n752f66a7434386b4a8ed6e0e6babdafc23d78047\n\n# Remove indentation from C++ namespaces in embind code. NFC (#16400)\n5dbf740fd2064c89bc1112897f960a49caa7b6d1\n\n# Fix indentation in embind code. NFC (#17447)\n14c106a0a8cbc539d6efe4a4e7b4ee7bbb73a0a6\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.41796875,
          "content": "# These files are minified JS which treat as binary avoid then showing up in\n# the output of `git grep` or `git diff`\ntools/crunch-worker.js -diff\nthird_party/lzma.js/lzma-decoder.js -diff\nthird_party/lzma.js/lzma-full.js -diff\ntest/other/test_emsize.js -diff\nsrc/emscripten-source-map.min.js -diff\ntest/* linguist-vendored\nthird_party/* linguist-vendored\nsystem/ linguist-vendored\n\nAUTHORS merge=union\nChangeLog.md merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5390625,
          "content": "# Config file\n.emscripten\n.emscripten_backup\n\n# Emsdk generated version info\n.emsdk_version\n\n# vim/emacs temporary/backup files\n*~\n*.swp\n\n# Compiled python files\n*.pyc\n\n# Default emscripten cache\n/cache\n\n# Ignore only the root node_modules, but not any further down the path\n/node_modules/\n\n# Python coverage tool output\n.coverage\n.coverage.*\ntools/coverage/\nhtmlcov/\ncoverage.xml\n\n.DS_Store\n\n# Test output\n/out/\n\n# All the ps1 files are generated by bootstrap...\n*.ps1\n# ...except the templates.\n!/tools/run_python.ps1\n!/tools/run_python_compiler.ps1\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.400390625,
          "content": "[submodule \"test/third_party/posixtestsuite\"]\n\tpath = test/third_party/posixtestsuite\n\turl = https://github.com/emscripten-core/posixtestsuite\n[submodule \"test/third_party/googletest\"]\n\tpath = test/third_party/googletest\n\turl = https://github.com/google/googletest\n[submodule \"test/third_party/wasi-test-suite\"]\n\tpath = test/third_party/wasi-test-suite\n\turl = https://github.com/khronosproject/wasi-test-suite\n"
        },
        {
          "name": ".prettierrc.yml",
          "type": "blob",
          "size": 0.0546875,
          "content": "singleQuote: true\nbracketSpacing: false\nprintWidth: 100\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.0458984375,
          "content": "[style]\nbased_on_style = pep8\nindent_width = 2\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 28.2548828125,
          "content": "Contributors to Emscripten may optionally add themselves to this list of\nauthors if they choose to do so. This is optional because the git history is\ngood enough for that purpose, and in fact most projects do not maintain such a\nmanual list.\n\nWhile the file is not necessary, to preserve the history of the project we are\nnot removing it.\n\n(Authors keep copyright of their contributions, of course; they just grant\na license to everyone to use it as detailed in LICENSE.)\n\n* Alon Zakai <alonzakai@gmail.com> (copyright owned by Mozilla Foundation)\n* Tim Dawborn <tim.dawborn@gmail.com>\n* Max Shawabkeh <max99x@gmail.com>\n* Sigmund Vik <sigmund_vik@yahoo.com>\n* Jeff Terrace <jterrace@gmail.com>\n* Benoit Tremblay <trembl.ben@gmail.com>\n* Andreas Bergmeier <abergmeier@gmx.net>\n* Ben Schwartz <bens@alum.mit.edu>\n* David Claughton <dave@eclecticdave.com>\n* David Yip <yipdw@member.fsf.org>\n* Julien Hamaide <julien.hamaide@gmail.com>\n* Ehsan Akhgari <ehsan.akhgari@gmail.com> (copyright owned by Mozilla Foundation)\n* Adrian Taylor <adrian@macrobug.com>\n* Richard Assar <richard.assar@gmail.com>\n* Nathan Hammond <emscripten@nathanhammond.com>\n* Behdad Esfahbod <behdad@behdad.org>\n* David Benjamin <davidben@mit.edu>\n* Pierre Renaux <pierre@talansoft.com>\n* Brian Anderson <banderson@mozilla.com>\n* Jon Bardin <diclophis@gmail.com>\n* Jukka Jylänki <jujjyl@gmail.com>\n* Aleksander Guryanov <caiiiycuk@gmail.com>\n* Chad Austin <chad@chadaustin.me> (copyright owned by IMVU)\n* nandhp <nandhp@gmail.com>\n* YeZhongWen <linghuye2.0@gmail.com>\n* Xingxing Pan <forandom@gmail.com>\n* Justin Kerk <dopefishjustin@gmail.com>\n* Andrea Bedini <andrea.bedini@gmail.com>\n* James Pike <totoro.friend@chilon.net>\n* Mokhtar Naamani <mokhtar.naamani@gmail.com>\n* Benjamin Stover <benjamin.stover@gmail.com>\n* Riccardo Magliocchetti <riccardo.magliocchetti@gmail.com>\n* Janus Troelsen <janus.troelsen@stud.tu-darmstadt.de>\n* Lars Schneider <lars.schneider@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Joel Martin <github@martintribe.org>\n* Manuel Wellmann <manuel.wellmann@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Xuejie Xiao <xxuejie@gmail.com>\n* Dominic Wong <dom@slowbunyip.org>\n* Alan Kligman <alan.kligman@gmail.com> (copyright owned by Mozilla Foundation)\n* Anthony Liot <wolfviking0@yahoo.com>\n* Michael Riss <Michael.Riss@gmx.de>\n* Jasper St. Pierre <jstpierre@mecheye.net>\n* Manuel Schölling <manuel.schoelling@gmx.de>\n* Bruce Mitchener, Jr. <bruce.mitchener@gmail.com>\n* Michael Bishop <mbtyke@gmail.com>\n* Roger Braun <roger@rogerbraun.net>\n* Vladimir Vukicevic <vladimir@pobox.com> (copyright owned by Mozilla Foundation)\n* Lorant Pinter <lorant.pinter@prezi.com>\n* Tobias Doerffel <tobias.doerffel@gmail.com>\n* Martin von Gagern <martin@von-gagern.net>\n* Ting-Yuan Huang <thuang@mozilla.com>\n* Joshua Granick <jgranick@blackberry.com>\n* Felix H. Dahlke <fhd@ubercode.de>\n* Éloi Rivard <azmeuk@gmail.com>\n* Alexander Gladysh <ag@logiceditor.com>\n* Arlo Breault <arlolra@gmail.com>\n* Jacob Lee <artdent@gmail.com> (copyright owned by Google, Inc.)\n* Joe Lee <jlee@imvu.com> (copyright owned by IMVU)\n* Andy Friesen <andy@imvu.com> (copyright owned by IMVU)\n* Bill Welden <bwelden@imvu.com> (copyright owned by IMVU)\n* Michael Ey <mey@imvu.com> (copyright owned by IMVU)\n* Llorens Marti Garcia <lgarcia@imvu.com> (copyright owned by IMVU)\n* Jinsuck Kim <jkim@imvu.com> (copyright owned by IMVU)\n* Todd Lee <tlee@imvu.com> (copyright owned by IMVU)\n* Anthony Pesch <inolen@gmail.com>\n* Robert Bragg <robert.bragg@intel.com> (copyright owned by Intel Corporation)\n* Sylvestre Ledru <sylvestre@debian.org>\n* Tom Fairfield <fairfield@cs.xu.edu>\n* Anthony J. Thibault <ajt@hyperlogic.org>\n* John Allwine <jallwine86@gmail.com>\n* Martin Gerhardy <martin.gerhardy@gmail.com>\n* James Gregory <jgregory@zynga.com> (copyright owned by Zynga, Inc.)\n* Dan Gohman <sunfish@google.com> (copyright owned by Google, Inc.)\n* Jeff Gilbert <jgilbert@mozilla.com> (copyright owned by Mozilla Foundation)\n* Frits Talbot <frits@metapathy.com>\n* Onno Jongbloed <hey@onnoj.net>\n* Jez Ng <me@jezng.com>\n* Marc Feeley <mfeeley@mozilla.com> (copyright owned by Mozilla Foundation)\n* Ludovic Perrine <jazzzz@gmail.com>\n* David Barksdale <david.barksdale@adcedosolutions.com>\n* Manfred Manik Nerurkar <nerurkar*at*made-apps.biz> (copyright owned by MADE, GmbH)\n* Joseph Gentle <me@josephg.com>\n* Douglas T. Crosher <dtc-moz@scieneer.com> (copyright owned by Mozilla Foundation)\n* Douglas T. Crosher <info@jsstats.com> (copyright owned by Scieneer Pty Ltd.)\n* Soeren Balko <soeren.balko@gmail.com> (copyright owned by Clipchamp Pty Ltd.)\n* Ryan Kelly (ryan@rfk.id.au)\n* Michael Lelli <toadking@toadking.com>\n* Yu Kobayashi <yukoba@accelart.jp>\n* Pin Zhang <zhangpin04@gmail.com>\n* Nick Bray <ncbray@chromium.org> (copyright owned by Google, Inc.)\n* Aidan Hobson Sayers <aidanhs@cantab.net>\n* Charlie Birks <admin@daftgames.net>\n* Ranger Harke <ranger.harke@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Tobias Vrinssen <tobias@vrinssen.de>\n* Patrick R. Martin <patrick.martin.r@gmail.com>\n* Richard Quirk <richard.quirk@gmail.com>\n* Marcos Scriven <marcos@scriven.org>\n* Antoine Lambert <antoine.lambert33@gmail.com>\n* Daniel Aquino <mr.danielaquino@gmail.com>\n* Remi Papillie <remi.papillie@gmail.com>\n* Fraser Adams <fraser.adams@blueyonder.co.uk>\n* Michael Tirado <icetooth333@gmail.com>\n* Ben Noordhuis <info@bnoordhuis.nl>\n* Bob Roberts <bobroberts177@gmail.com>\n* John Vilk <jvilk@cs.umass.edu>\n* Daniel Baulig <dbaulig@fb.com> (copyright owned by Facebook, Inc.)\n* Lu Wang <coolwanglu@gmail.com>\n* Heidi Pan <heidi.pan@intel.com> (copyright owned by Intel)\n* Vasilis Kalintiris <ehostunreach@gmail.com>\n* Adam C. Clifton <adam@hulkamaniac.com>\n* Volo Zyko <volo.zyko@gmail.com>\n* Andre Weissflog <floooh@gmail.com>\n* Alexandre Perrot <alexandre.perrot@gmail.com>\n* Emerson José Silveira da Costa <emerson.costa@gmail.com>\n* Jari Vetoniemi <mailroxas@gmail.com>\n* Sindre Sorhus <sindresorhus@gmail.com>\n* James S Urquhart <jamesu@gmail.com>\n* Boris Gjenero <boris.gjenero@gmail.com>\n* jonas echterhoff <jonas@unity3d.com>\n* Sami Vaarala <sami.vaarala@iki.fi>\n* Jack A. Arrington <jack@epicpineapple.com>\n* Richard Janicek <r@janicek.co>\n* Joel Croteau <jcroteau@gmail.com>\n* Haneef Mubarak <haneef503@gmail.com>\n* Nicolas Peri <nicox@shivaengine.com> (copyright owned by ShiVa Technologies, SAS)\n* Bernhard Fey <e-male@web.de>\n* Dave Nicponski <dave.nicponski@gmail.com>\n* Jonathan Jarri <noxalus@gmail.com>\n* Daniele Di Proietto <daniele.di.proietto@gmail.com>\n* Dan Dascalescu <dNOSPAMdascalescu@gmail.com>\n* Thomas Borsos <thomasborsos@gmail.com>\n* Ori Avtalion <ori@avtalion.name>\n* Guillaume Blanc <guillaumeblanc.sc@gmail.com>\n* Usagi Ito <usagi@WonderRabbitProject.net>\n* Camilo Polymeris <cpolymeris@gmail.com>\n* Markus Henschel <markus.henschel@yager.de>\n* Ophir Lojkine <ophir.lojkine@eleves.ec-nantes.fr>\n* Ryan Sturgell <ryan.sturgell@gmail.com> (copyright owned by Google, Inc.)\n* Jason Green <jason@transgaming.com> (copyright owned by TransGaming, Inc.)\n* Ningxin Hu <ningxin.hu@intel.com> (copyright owned by Intel)\n* Nicolas Guillemot <nlguillemot@gmail.com>\n* Sathyanarayanan Gunasekaran <gsathya.ceg@gmail.com> (copyright owned by Mozilla Foundation)\n* Nikolay Vorobyov <nik.vorobyov@gmail.com>\n* Jonas Platte <mail@jonasplatte.de>\n* Sebastien Ronsse <sronsse@gmail.com>\n* Glenn R. Wichman <gwichman@zynga.com>\n* Hamish Willee <hamishwillee@gmail.com> (copyright owned by Mozilla Foundation)\n* Sylvain Chevalier <sylvain.chevalier@gmail.com>\n* Nathan Ross <nross.se@gmail.com>\n* Zachary Pomerantz <zmp@umich.edu>\n* Boris Tsarev <boristsarev@gmail.com>\n* Mark Logan <mark@artillery.com> (copyright owned by Artillery Games, Inc.)\n* Коренберг Марк <socketpair@gmail.com>\n* Gauthier Billot <gogoprog@gmail.com>\n* Árpád Goretity <h2co3@h2co3.org>\n* Nicholas Wilson <nicholas@nicholaswilson.me.uk>\n* Aaron Mandle <aaronmandle@gmail.com>\n* Bailey Hayes <Bailey.Hayes@sas.com> (copyright owned by SAS Institute Inc.)\n* Paul Holland <pholland@adobe.com>\n* James Long <longster@gmail.com>\n* David Anderson <danderson@mozilla.com> (copyright owned by Mozilla Foundation)\n* Eric Rannaud <e@nanocritical.com> (copyright owned by Nanocritical Corp.)\n* William Furr <wfurr@google.com> (copyright owned by Google, Inc.)\n* Dan Glastonbury <dglastonbury@mozilla.com> (copyright owned by Mozilla Foundation)\n* Warren Seine <warren.seine@aerys.in> (copyright owned by Aerys SAS)\n* Petr Babicka <babcca@gmail.com>\n* Akira Takahashi <faithandbrave@gmail.com>\n* Victor Costan <costan@gmail.com>\n* Pepijn Van Eeckhoudt <pepijn.vaneeckhoudt@luciad.com> (copyright owned by Luciad NV)\n* Stevie Trujillo <stevie.trujillo@gmail.com>\n* Edward Rudd <urkle@outoforder.cc>\n* Rene Eichhorn <rene.eichhorn1@gmail.com>\n* Nick Desaulniers <nick@mozilla.com> (copyright owned by Mozilla Foundation)\n* Luke Wagner <luke@mozilla.com> (copyright owned by Mozilla Foundation)\n* Matt McCormick <matt.mccormick@kitware.com>\n* Thaddée Tyl <thaddee.tyl@gmail.com>\n* Philipp Wiesemann <philipp.wiesemann@arcor.de>\n* Jan Jongboom <janjongboom@gmail.com> (copyright owned by Telenor Digital AS)\n* Tiago Quelhas <tiagoq@gmail.com>\n* Reinier de Blois <rddeblois@gmail.com>\n* Yuichi Nishiwaki <yuichi.nishiwaki@gmail.com>\n* Jérôme Bernard <jerome.bernard@ercom.fr> (copyright owned by Ercom)\n* Chanhwi Choi <ccwpc@hanmail.net>\n* Fábio Santos <fabiosantosart@gmail.com>\n* Thibaut Despoulain <thibaut@artillery.com> (copyright owned by Artillery Games, Inc.)\n* Wei Tjong Yao <weitjong@gmail.com>\n* Tim Guan-tin Chien <timdream@gmail.com>\n* Krzysztof Jakubowski <nadult@fastmail.fm>\n* Vladimír Vondruš <mosra@centrum.cz>\n* Brion Vibber <brion@pobox.com>\n* Philip Lafleur <sendsbeak@gmail.com>\n* Javier Meseguer de Paz <j.meseguer@gmail.com>\n* Michael A. Balazs <michael.balazs@gmail.com>\n* Andreas Blixt <me@blixt.nyc>\n* Haofeng Zhang <h.z@duke.edu>\n* Cody Welsh <codyw@protonmail.com>\n* Hoong Ern Ng <hoongern@gmail.com>\n* Kagami Hiiragi <kagami@genshiken.org>\n* Jan Bölsche <jan@lagomorph.de>\n* Sebastian Matthes <sebastianmatthes@outlook.com> (copyright owned by Volkswagen AG)\n* Robert Goulet <robert.goulet@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Juha Järvi <befunge@gmail.com>\n* Louis Lagrange <lagrange.louis@gmail.com>\n* Ying-Ruei Liang <thumbd03803@gmail.com>\n* Stuart Geipel <lapimlu@gmail.com>\n* Yeonjun Lim <yjroot@gmail.com>\n* Andrew Karpushin <reven86@gmail.com>\n* Felix Zimmermann <fzimmermann89@gmail.com>\n* Sven-Hendrik Haase <svenstaro@gmail.com>\n* Simon Sandström <simon@nikanor.nu>\n* Khaled Sami <k.sami.mohammed@gmail.com>\n* Omar El-Mohandes <omar.elmohandes90@gmail.com>\n* Florian Rival <florian.rival@gmail.com>\n* Mark Achée <mark@achee.com>\n* Piotr Paczkowski <kontakt@trzeci.eu>\n* Braden MacDonald <braden@bradenmacdonald.com>\n* Kevin Cheung <kevin.cheung@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Josh Peterson <petersonjm1@gmail.com>\n* eska <eska@eska.me>\n* Nate Burr <nate.oo@gmail.com>\n* Paul \"TBBle\" Hampson <Paul.Hampson@Pobox.com>\n* Andreas Plesch <andreasplesch@gmail.com>\n* Brian Armstrong <brian.armstrong.ece+github@gmail.com>\n* Vincenzo Chianese <vincenz.chianese@icloud.com>\n* Noam T.Cohen <noam@ecb.co.il>\n* Nick Shin <nick.shin@gmail.com>\n* Gregg Tavares <github@greggman.com>\n* Tanner Rogalsky <tanner@tannerrogalsky.com>\n* Richard Cook <rcook@tableau.com> (copyright owned by Tableau Software, Inc.)\n* Arnab Choudhury <achoudhury@tableau.com> (copyright owned by Tableau Software, Inc.)\n* Charles Vaughn <cvaughn@tableau.com> (copyright owned by Tableau Software, Inc.)\n* Pierre Krieger <pierre.krieger1708@gmail.com>\n* Jakob Stoklund Olesen <stoklund@2pi.dk>\n* Jérémy Anger <angerj.dev@gmail.com>\n* Derek Schuff <dschuff@chromium.org> (copyright owned by Google, Inc.)\n* Ashley Sommer <flubba86@gmail.com>\n* Dave Fletcher <graveyhead@gmail.com>\n* Lars-Magnus Skog <ralphtheninja@riseup.net>\n* Pieter Vantorre <pietervantorre@gmail.com>\n* Maher Sallam <maher@sallam.me>\n* Andrey Burov <burik666@gmail.com>\n* Holland Schutte <hgschutte1@gmail.com>\n* Kerby Geffrard <kerby.geffrard@gmail.com>\n* cynecx <me@cynecx.net>\n* Chris Gibson <cgibson@mrvoxel.com>\n* Harald Reingruber <code*at*h-reingruber.at>\n* Aiden Koss <madd0131@umn.edu>\n* Dustin VanLerberghe <good_ol_dv@hotmail.com>\n* Philip Bielby <pmb45-github@srcf.ucam.org> (copyright owned by Jagex Ltd.)\n* Régis Fénéon <regis.feneon@gmail.com>\n* Dominic Chen <d.c.ddcc@gmail.com> (copyright owned by Google, Inc.)\n* Junji Hashimoto <junji.hashimoto@gmail.com>\n* Heejin Ahn <aheejin@gmail.com> (copyright owned by Google, Inc.)\n* Andras Kucsma <andras.kucsma@gmail.com>\n* Mateusz Borycki <mateuszborycki@gmail.com>\n* Franklin Ta <fta2012@gmail.com>\n* Jacob Gravelle <jgravelle@google.com> (copyright owned by Google, Inc.)\n* Kagami Sascha Rosylight <saschanaz@outlook.com>\n* Benny Jacobs <benny@gmx.it>\n* Ray Brown <code@liquibits.com>\n* Christopher Serr <christopher.serr@gmail.com>\n* Aaron Ruß <aaron.russ@dfki.de> (copyright owned by DFKI GmbH)\n* Vilibald Wanča <vilibald@wvi.cz>\n* Alex Hixon <alex@alexhixon.com>\n* Vladimir Davidovich <thy.ringo@gmail.com>\n* Yuriy Levchenko <irov13@mail.ru>\n* Dmitry Tolmachov <dmitolm@gmail.com>\n* Dylan McKay <me@dylanmckay.io>\n* Christophe Gragnic <cgragnic@netc.fr>\n* Murphy McCauley <murphy.mccauley@gmail.com>\n* Anatoly Trosinenko <anatoly.trosinenko@gmail.com>\n* Brad Grantham <grantham@plunk.org>\n* Sam Clegg <sbc@chromium.org> (copyright owned by Google, Inc.)\n* Joshua Lind <joshualind007@hotmail.com>\n* Hiroaki GOTO as \"GORRY\" <gorry@hauN.org>\n* Mikhail Kremnyov <mkremnyov@gmail.com> (copyright owned by XCDS International)\n* Tasuku SUENAGA a.k.a. gunyarakun <tasuku-s-github@titech.ac>\n* Vitorio Miguel Prieto Cilia <vdrbandeiras@gmail.com>\n* Evan Wallace <evan.exe@gmail.com>\n* Henning Pohl <henning@still-hidden.de>\n* Tim Neumann <mail@timnn.me>\n* Ondrej Stava <ondrej.stava@gmail.com> (copyright owned by Google, Inc.)\n* Jakub Jirutka <jakub@jirutka.cz>\n* Loo Rong Jie <loorongjie@gmail.com>\n* Jean-François Geyelin <jfgeyelin@gmail.com>\n* Matthew Collins <thethinkofdeath@gmail.com>\n* Satoshi N. M <snmatsutake@yahoo.co.jp>\n* Ryan Speets <ryan@speets.ca>\n* Fumiya Chiba <fumiya.chiba@nifty.com>\n* Ryan C. Gordon <icculus@icculus.org>\n* Inseok Lee <dlunch@gmail.com>\n* Yair Levinson (copyright owned by Autodesk, Inc.)\n* Matjaž Drolc <mdrolc@gmail.com>\n* James Swift <james@3dengineer.com> (copyright owned by PSPDFKit GmbH)\n* Ryan Lester <ryan@cyph.com> (copyright owned by Cyph, Inc.)\n* Nikolay Zapolnov <zapolnov@gmail.com>\n* Nazar Mokrynskyi <nazar@mokrynskyi.com>\n* Yury Delendik <ydelendik@mozilla.com> (copyright owned by Mozilla Foundation)\n* Kenneth Perry <thothonegan@gmail.com>\n* Jim Mussared <jim.mussared@gmail.com>\n* Dirk Vanden Boer <dirk.vdb@gmail.com>\n* Mitchell Foley <mitchfoley@google.com> (copyright owned by Google, Inc.)\n* Oleksandr Chekhovskyi <oleksandr.chekhovskyi@gmail.com>\n* Michael Siebert <michael.siebert2k@gmail.com>\n* Jonathan Hale <squareys@googlemail.com>\n* Etienne Brateau <etienne.brateau@gmail.com>\n* Zhiming Wang <zmwangx@gmail.com>\n* Jameson Ernst <jameson@jpernst.com>\n* Yoan Lecoq <yoanlecoq.io@gmail.com>\n* Jiajie Hu <jiajie.hu@intel.com> (copyright owned by Intel Corporation)\n* Kamil Klimek <naresh@tlen.pl>\n* José Carlos Pujol <josecpujol(at)gmail.com>\n* Dannii Willis <curiousdannii@gmail.com>\n* Erik Dubbelboer <erik@dubbelboer.com>\n* Sergey Tsatsulin <tsatsulin@gmail.com>\n* varkor <github@varkor.com>\n* Stuart Knightley <website@stuartk.com>\n* Amadeus Guo <gliheng@foxmail.com>\n* Nathan Froyd <froydnj@gmail.com> (copyright owned by Mozilla Foundation)\n* Daniel Wirtz <dcode@dcode.io>\n* Kibeom Kim <kk1674@nyu.edu>\n* Marcel Klammer <m.klammer@tastenkunst.com>\n* Axel Forsman <axelsfor@gmail.com>\n* Ebrahim Byagowi <ebrahim@gnu.org>\n* Thorsten Möller <thorsten.moeller@sbi.ch>\n* Michael Droettboom <mdroettboom@mozilla.com>\n* Nicolas Bouquet <hgy01@hieroglyphe.net>\n* Miguel Saldivar <miguel.saldivar22@hotmail.com>\n* Gert Van Hoey <gert.vanhoey@gmail.com>\n* Valtteri Heikkilä <rnd@nic.fi>\n* Daniel McNab <daniel.mcnab6+emcc(at)gmail.com>\n* Tyler Limkemann <tslimkemann42 gmail.com>\n* Ben Smith <binji@google.com> (copyright owned by Google, Inc.)\n* Sylvain Beucler <beuc@beuc.net>\n* Patrik Weiskircher <patrik@weiskircher.name>\n* Tobias Widlund <widlundtobias(at)gmail.com>\n* Rob Fors <mail@robfors.com>\n* Mike Frysinger <vapier@chromium.org> (copyright owned by Google, Inc.)\n* Sébasiten Crozet <developer@crozet.re>\n* Andrey Nagikh <andrey@nagih.ru>\n* Dzmitry Malyshau <dmalyshau@mozilla.com> (copyright owned by Mozilla Foundation)\n* Bjorn Swenson <tie.372@gmail.com>\n* Ryhor Spivak <grisha@rusteddreams.net>\n* Jan Schär <jscissr@gmail.com>\n* Ryhor Spivak <grisha@rusteddreams.net>\n* Alexander Bich <quyse0@gmail.com>\n* Ashleigh Thomas <ashleighbcthomas@gmail.com>\n* Veniamin Petrenko <bjpbjpbjp10@gmail.com>\n* Ian Henderson <ian@ianhenderson.org>\n* Siim Kallas <siimkallas@gmail.com>\n* Carl Woffenden <cwoffenden@gmail.com> (copyright owned by Numfum GmbH)\n* Patrick Berger <patrick.berger@xmail.net> (copyright owned by Compusoft Group)\n* Alexander Frank Lehmann <alexander.frank.lehmann@compusoftgroup.com> (copyright owned by Compusoft Group)\n* Tommy Nguyen <tn0502@gmail.com>\n* Thomas Schander <info@thomasschander.com> (copyright owned by Enscape GmbH)\n* Benjamin S. Rodgers <acdimalev@gmail.com>\n* Paul Shapiro <paul@mymonero.com>\n* Elmo Todurov <elmo.todurov@eesti.ee>\n* Zoltán Žarkov <zeko@freecivweb.org>\n* Roman Yurchak <rth.yurchak@pm.me>\n* Hampton Maxwell <me@hamptonmaxwell.com>\n* Eric Fiselier <ericwf@google.com> (copyright owned by Google, Inc.)\n* Sirapop Wongstapornpat <sirapop.wongstapornpat@student.oulu.fi>\n* Matt Kane <m@mk.gg>\n* Altan Özlü <altanozlu7@gmail.com>\n* Mary S <ipadlover8322@gmail.com>\n* Martin Birks <mbirks@gmail.com>\n* Kirill Smelkov <kirr@nexedi.com> (copyright owned by Nexedi)\n* Lutz Hören <laitch383@gmail.com>\n* Pedro K Custodio <git@pedrokcustodio.com>\n* Nicolas Allemand <contact@nicolasallemand.com>\n* Gabriel Cuvillier <contact@gabrielcuvillier.pro>\n* Thomas Lively <tlively@google.com> (copyright owned by Google, Inc.)\n* Brandon Surmanski <b.surmanski@gmail.com>\n* Rian Hunter <rian@alum.mit.edu>\n* Kai Ninomiya <kainino@chromium.org> (copyright owned by Google, Inc.)\n* Mickaël Schoentgen <contact@tiger-222.fr>\n* Renaud Leroy <capitnflam@gmail.com>\n* Florian Stellbrink <florian@stellbr.ink>\n* Shane Peelar <lookatyouhacker@gmail.com>\n* Alessandro Pignotti <alessandro@leaningtech.com>\n* Zheng Tao Lee <zhengtao.lee@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Martina Kraus <kraus.martina.m@googlemail.com>\n* Jacob Adelgren <jake@eevo.com>\n* Ingvar Stepanyan <me@rreverser.com>\n* Ben Trapani <ben.trapani1995@gmail.com> (copyright owned by Microsoft, Inc.)\n* Tim Lander <tim57282＠hotmail.com>\n* Jacob Greenfield <jacob@jacobgreenfield.me>\n* Joseph Kogut <joseph.kogut@gmail.com>\n* Yi Zhang <milizhang@gmail.com>\n* Marc Abramowitz <msabramo@gmail.com>\n* Daniel Ruf <daniel@daniel-ruf.de>\n* Timothy Trindle <titrindl@microsoft.com> (copyright owned by Microsoft, Inc.)\n* Matthew Andres Moreno <m.more500@gmail.com>\n* Eric Mandel <eric@cfa.harvard.edu>\n* Anthony Catel <paraboul@gmail.com>\n* Simon Cooper <simon.d.cooper@hotmail.co.uk>\n* Amir Rasouli <arasouli91@gmail.com>\n* Nico Weber <thakis@chromium.org>\n* Bas Doorn <code@keyn.app> (copyright owned by Keyn B.V.)\n* Adam Bujalski <a.bujalski@samsung.com> (copyright owned by Samsung Electronics)\n* Guanzhong Chen <gzchen@google.com> (copyright owned by Google, Inc.)\n* Denis Serebro <densilver3000@gmail.com>\n* Lucas Ramage <ramage.lucas@protonmail.com>\n* Andy Wingo <wingo@igalia.com> (copyright owned by Igalia)\n* Philipp Gloor <philipp.gloor@pdf-tools.com> (copyright owned by PDF Tools AG)\n* Jasmine Minter <jasmine@minteronline.com> (copyright owned by Clipchamp Pty Ltd.)\n* Ferris Kwaijtaal <ferrispc@hotmail.com>\n* Konstantin Podsvirov <konstantin@podsvirov.pro>\n* Eduardo Bart <edub4rt@gmail.com>\n* Zoltan Varga <vargaz@gmail.com> (copyright owned by Microsoft, Inc.)\n* Fernando Serboncini <fserb@google.com>\n* Christian Clauss <cclauss@me.com> (copyright owned by IBM)\n* Henry Kleynhans <hkleynhans@bloomberg.net> (copyright owned by Bloomberg L.P.)\n* FUJI Goro <g.psy.va@gmail.com>\n* Egor Suvorov <esuvorov@think-cell.com> (copyright owned by think-cell Software GmbH)\n* James Kuszmaul <jabukuszmaul@gmail.com>\n* Wei Mingzhi <whistler_wmz@users.sourceforge.net>\n* Sergey karchevsky <sergey.ext@gmail.com>\n* Ajay Patel <patel.ajay285@gmail.com>\n* Adrien Devresse <adev@adev.name>\n* Petr Penzin <petr.penzin@intel.com> (copyright owned by Intel Corporation)\n* Tayeb Al Karim <tay@google.com> (copyright owned by Google, Inc.)\n* Andrei Alexeyev <akari@taisei-project.org>\n* Cesar Guirao Robles <cesar@no2.es>\n* Ricky Claven <ricksterhd123@gmail.com>\n* Mehdi Sabwat <mehdisabwat@gmail.com>\n* MinganMuon <mingan-muon@outlook.com>\n* Jonathan Feinberg <feinberg@google.com>\n* Osman Turan <osman@osmanturan.com>\n* Jaikanth J <jaikanthjay46@gmail.com>\n* Gernot Lassnig <gernot.lassnig@gmail.com>\n* Christian Boos <cboos@bct-technology.com>\n* Erik Scholz <greenNO@SPAMg-s.xyz>\n* Michael de Lang <kingoipo@gmail.com>\n* Gergely Nagy <ngg@tresorit.com>\n* Jan Habermann <jan@habermann.io>\n* John Granström <granstrom.john@gmail.com>\n* Clemens Backes <clemensb@google.com> (copyright owned by Google, Inc.)\n* Tibor Klajnscek <tiborkl@numfum.com>\n* Benjamin Golinvaux <benjamin@golinvaux.com>\n* Peter Salomonsen <pjsalomonsen@gmail.com>\n* Niklas Fiekas <niklas.fiekas@backscattering.de>\n* Martín Lucas Golini <spartanj@gmail.com>\n* Bumsik Kim <k.bumsik@gmail.com>\n* Corentin Wallez <cwallez@chromium.org> (copyright owned by Google, Inc.)\n* Austin Eng <enga@chromium.org> (copyright owned by Google, Inc.)\n* Hugo Amiard <hugo.amiard@laposte.net>\n* Diego Casorran <dcasorran@gmail.com>\n* sssooonnnggg <sssooonnnggg111@gmail.com>\n* Guillaume Racicot <gufideg@gmail.com>\n* SK Min <oranke@gmail.com>\n* Fabio Alessandrelli <fabio.alessandrelli@gmail.com>\n* Kirill Gavrilov <kirill@sview.ru>\n* Karl Semich <0xloem@gmail.com>\n* Louis DeScioli <descioli@google.com> (copyright owned by Google, LLC)\n* Kleis Auke Wolthuizen <info@kleisauke.nl>\n* Michael Potthoff <michael@potthoff.eu>\n* Abigail Bunyan <abigail@bold.claims> (copyright owned by Microsoft Corporation)\n* David García Paredes <davidgparedes@gmail.com>\n* Dan Field <dfield@gmail.com> (copyright owned by Google, Inc.)\n* Mike Swierczek <mike@swierczek.io>\n* Vasily <just.one.man@yandex.ru>\n* Jānis Rūcis <parasti@gmail.com>\n* rssqian <rssqian@gmail.com>\n* Shachar Langbeheim <nihohit@gmail.com>\n* Laurin Agostini <thevolut@gmail.com>\n* David Carlier <devnexen@gmail.com>\n* Paul Du <du.paul136@gmail.com> (copyright owned by ARSKAN)\n* Piotr Doan <doanpiotr@gmail.com>\n* Stuart Schechter <stuart.schechter@gmail.com>\n* Brett Paterson <brett@fmod.com>\n* Robert Aboukhalil <robert.aboukhalil@gmail.com>\n* Jonathan Poelen <jonathan.poelen@gmail.com>\n* Ashley Hauck <github@khyperia.com>\n* Junyue Cao <junyuecao@gmail.com>\n* Elías Serrano <feserr3@gmail.com>\n* Philip Pfaffe <pfaffe@google.com> (copyright owned by Google, LLC)\n* Troy Tae <tjy970721@gmail.com>\n* Sky Wang <sky-wang@qq.com>\n* popomen <nz_nuaa@163.com>\n* Artyom Lebedev <vagran.ast@gmail.com>\n* Sebastián Gurin (cancerberoSgx) <sebastigurin@gmail.com>\n* Benedikt Meurer <bmeurer@google.com> (copyright owned by Google, LLC)\n* Jiulong Wang <jiulongw@gmail.com>\n* pudinha <rogi@skylittlesystem.org>\n* Nicholas Phillips <nwp2@illinois.edu>\n* Colin Guyon <colin.guyon@insimo.fr> (copyright owned by InSimo, SAS)\n* Mathias Westerdahl <mwesterdahl76@gmail.com>\n* Philip Rideout <prideout@google.com> (copyright owned by Google, LLC)\n* Shrek Shao (shrekshao@google.com) (copyright owned by Google, LLC)\n* Arran Ireland <ion92@protonmail.com>\n* Jia Yuan Lo <jylo06g@gmail.com>\n* Philip Lassen <philiplassen@gmail.com>\n* Antoine du Hamel <duhamelantoine1995@gmail.com>\n* Alexander Köplinger <alex.koeplinger@outlook.com> (copyright owned by Microsoft, Inc.)\n* Kenneth Pouncey <kepounce@microsoft.com> (copyright owned by Microsoft, Inc.)\n* Mitchell Hwang <mihw@microsoft.com> (copyright owned by Microsoft, Inc.)\n* Sean Maher <seanptmaher@gmail.com> (copyright owned by Google, LLC)\n* Paul Peny <pmpp.pub@gmail.com>\n* Prashanth Nethi <prashant@adobe.com>\n* Max Weisel <max@maxweisel.com>\n* Georg Rottensteiner <georg@georg-rottensteiner.de>\n* Tristan Griffin <tristan.griffin@hcl.com> (Copyright owned by HCL)\n* Julien Jorge <julien.jorge@gmx.fr>\n* Benjamin Lee <bnllee@ucdavis.edu>\n* Attila Oláh <atl@google.com> (copyright owned by Google, LLC)\n* Marat Dukhan <maratek@google.com> (copyright owned by Google, LLC)\n* Raphael Siegel <siegel.raphael@gmail.com>\n* Stephan Reiter <reste@google.com> (copyright owned by Google, LLC)\n* kamenokonyokonyoko <kamenokonokotan@gmail.com>\n* Lectem <lectem@gmail.com>\n* Henrik Algestam <henrik@algestam.se>\n* Rocco Musolino <roccomusolino92@gmail.com>\n* Pawel Czarnecki <pawel@8thwall.com> (copyright owned by 8th Wall, Inc.)\n* Dhairya Bahl < dhairyabahl5@gmail.com >\n* Sam Gao <gaoshan274@gmail.com>\n* Sebastian Mayr <me@sam.st>\n* Vladimir Gamalyan <vladimir.gamalyan@gmail.com>\n* Jean-Sébastien Nadeau <mundusnine@gmail.com> (copyright owned by Foundry Interactive Inc.)\n* Wouter van Oortmerssen <wvo@google.com> (copyright owned by Google, LLC)\n* Alexey Sokolov <sokolov@google.com> (copyright owned by Google, LLC)\n* Lukas Rieger <rieger@progress-psd.com>\n* Ivan Romanovski <ivan.romanovski@gmail.com>\n* Max Brunsfeld <maxbrunsfeld@gmail.com>\n* Basil Fierz <basil.fierz@hotmail.com>\n* Rod Hyde <rod@badlydrawngames.com>\n* Aleksey Kliger <aleksey@lambdageek.org> (copyright owned by Microsoft, Inc.)\n* Nicolas Ollinger <nopid@free.fr>\n* Michael R. Crusoe <crusoe@debian.org>\n* Dexter Chua <dec41@srcf.net>\n* Thomas Ballinger <thomasballinger@gmail.com>\n* Mehdi Sadeghi <mehdi@mehdix.org>\n* Amin Yahyaabadi <aminyahyaabadi74@gmail.com>\n* Adam Leskis <leskis@gmail.com>\n* Raffaele Pertile <raffarti@zoho.com>\n* Patric Stout <github@truebrain.nl>\n* Jinoh Kang <jinoh.kang.kr@gmail.com>\n* Jorge Prendes <jorge.prendes@gmail.com>\n* Alexey Shamrin <shamrin@gmail.com>\n* Wirtos <wirtos.new@gmail.com>\n* Ben den Hollander <bdenhollander@dynascape.com> (copyright owned by DynaScape Software Inc.)\n* Akul Penugonda <akulvp@gmail.com>\n* Jan Wolff <contact@jancc.de>\n* Pawel Czarnecki <pawel@8thwall.com> (copyright owned by 8th Wall, Inc.)\n* Camil Staps <info@camilstaps.nl>\n* Michael Kircher <michael.kircher.github@gmail.com>\n* Sharad Saxena <sharad.saxena@autodesk.com> (copyright owned by Autodesk, Inc.)\n* Vasili Skurydzin <vasili.skurydzin@ibm.com>\n* Jakub Nowakowski <jn925+emcc@o2.pl>\n* Michael Taylor <mitaylor@adobe.com>\n* Andrew Brown <andrew.brown@intel.com> (copyright owned by Intel Corporation)\n* Benjamin Puzycki <bpuzycki@umich.edu>\n* Marco Buono <marcobuono@invisionapp.com> (copyright owned by InVisionApp, Inc.)\n* Philip Gossweiler <philip.gossweiler@outlook.com>\n* Rafael Brune <mail@rbrune.de>\n* Aleksi Sapon <aleksi.sapon@faro.com> (copyright owned by FARO Technologies, Inc.)\n* Radek Doulik <radek.doulik@gmail.com> (copyright owned by Microsoft, Inc.)\n* Érico Porto <ericoporto2008@gmail.com>\n* Albert Vaca Cintora <albertvaka@gmail.com>\n* Zhi An Ng <zhin@google.com> (copyright owned by Google, Inc.)\n* Ian Jackson <ijackson@chiark.greenend.org.uk>\n* Brian Gontowski <brian@gontowski.com>\n* Bobbie Chen <bobbie.chen75@gmail.com>\n* Nicholas Hollander <nhollander98@gmail.com>\n* Camillo Lugaresi <camillol@google.com> (copyright owned by Google LLC)\n* Chris Craig <emscripten@goldwave.com>\n* Le Yao <le.yao@intel.com> (copyright owned by Intel Corporation)\n* José Cadete <crudelios@gmail.com>\n* Cynthia K. Rey <cynthia@cynthia.dev>\n* Andrew Shaitorov <andrew.shaitorov@gmail.com>\n* on-keyday <rokenboo47803@gmail.com>\n* Matthew Balch <matt5sean3@gmail.com>\n* James Price <jrprice@google.com> (copyright owned by Google, Inc.)\n* Nathan Rugg <nmrugg@gmail.com> (copyright owned by Chess.com, LLC)\n* Alexander O'Mara <me@alexomara.com>\n* Kamaron Peterson <kamaron.peterson@gmail.com>\n* Márton Marczell <mmarczell.graphisoft@gmail.com> (copyright owned by GRAPHISOFT SE)\n* Alexander Vestin <alex.vestin@gmail.com>\n* Xiaobing Yang <yangxiaobing@jwzg.com>\n* Alexandra Cherdantseva <neluhus.vagus@gmail.com>\n* Michael Schmuki <michael@schmuki.io>\n* Skye Gibney <skyejgibney@gmail.com>\n* Piotr Wierciński <laminowany@gmail.com>\n* 郑苏波 (Super Zheng) <superzheng@tencent.com>\n* James Hu <jameshu2022@gmail.com>\n* Jerry Zhuang <jerry.zhuang@jwzg.com>\n* Taisei Kon <kinsei0916@gmail.com>\n* YAMAMOTO Takashi <yamamoto@midokura.com>\n* Artur Gatin <agatin@teladochealth.com> (copyright owned by Teladoc Health, Inc.)\n* Christian Lloyd <clloyd@teladochealth.com> (copyright owned by Teladoc Health, Inc.)\n* Sean Morris <sean@seanmorr.is>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.177734375,
          "content": "Contributing\n============\n\nSee our site for information about contributing to Emscripten:\n\n[Contribution section on site](https://emscripten.org/docs/contributing/contributing.html)\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 306.087890625,
          "content": "This document describes changes between tagged Emscripten SDK versions.\n\nNote that version numbers do not necessarily reflect the amount of changes\nbetween versions. A version number reflects a release that is known to pass all\ntests, and versions may be tagged more or less frequently at different times.\n\nnNote that there is *no* ABI compatibility guarantee between versions - the ABI\nmay change, so that we can keep improving and optimizing it. The compiler will\nautomatically invalidate system caches when the version number updates, so that\nlibc etc. are rebuilt for you. You should also rebuild object files and\nlibraries in your project when you upgrade emscripten.\n\nNot all changes are documented here. In particular, new features, user-oriented\nfixes, options, command-line parameters, breaking ABI changes, deprecations,\nsignificant internal modifications and optimizations etc. generally deserve a\nmention. To examine the full set of changes between versions, you can use git\nto browse the changes between the tags.\n\nSee docs/process.md for more on how version tagging works.\n\n4.0.0 (in development)\n----------------------\n- Emscripten version was bumped to 4.0.0. Happy new year, happy new major\n  version!  While version has a few interesting changes, there is nothing huge\n  that makes it different from any other release. (#19053)\n- `-sWASM_LEAGCY_EXCEPTIONS` option is added. (#23365) If true, it will emit\n  instructions for the legacy Wasm exception handling proposal\n  (https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/legacy/Exceptions.md),\n  and if false, the new standardized exception handling proposal\n  (https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md).\n  This option defaults to true, given that major web browsers do not support the\n  new proposal by default yet. This option replaces the existing\n  `-sWASM_EXNREF`, whose meaning was the opposite.\n- compiler-rt, libcxx, libcxxabi, and libunwind were updated to LLVM 19.1.6.\n  (#22937, #22994, and #23294)\n- The default Safari version targeted by Emscripten has been raised from 14.1\n  to 15.0 (the `MIN_SAFARI_VERSION` setting) (#23312). This has several effects:\n  - The Wasm nontrapping-fptoint feature is enabled by default. Clang will\n    generate nontrapping (saturating) float-to-int conversion instructions for\n    C typecasts. This should have no effect on programs that do not have\n    undefined behavior but if the casted floating-point value is outside the range\n    of the target integer type, the result will be a number of the max or min value\n    instead of a trap. This also results in a small code size improvement because\n    of details of the LLVM IR semantics. This feature can be disabled in clang with\n    the `-mno-nontrapping-fptoint` flag. (#23007)\n  - The `WASM_BIGINT` feature is enabled by default. This has the effect that\n    Wasm i64 values are passed and returned between Wasm and JS as BigInt values\n    rather than being split by Binaryen into pairs of Numbers. (#22993)\n  - The `BULK_MEMORY` feature is enabled by default. `memory.copy` and\n    `memory.fill` instructions are used in the implementation of C `memcpy` and\n    `memset`, and Clang may generate them elsewhere (#22873). It can be\n    disabled with the `-mno-bulk-memory -mno-bulk-memory-opt` flags.\n- When using `-sMODULARIZE` we now assert if the factory function is called with\n  the JS `new` keyword.  e.g. `a = new Module()` rather than `b = Module()`.\n  This paves the way for marking the function as `async` which does not allow\n  `new` to be used.  This usage of `new` here was never documented and is\n  considered an antipattern. (#23210)\n- `PATH.basename()` no longer calls `PATH.normalize()`, so that\n  `PATH.basename(\"a/.\")` returns `\".\"` instead of `\"a\"` and\n  `PATH.basename(\"a/b/..\")` returns `\"..\"` instead of `\"a\"`. This is in line with\n  the behaviour of both node and coreutils, and is already the case when using\n  NODERAWFS\". (#23180)\n- The factory function exposed in `-sMODULARIZE` mode is now marked as `async`\n  when `WASM_ASYNC_COMPILATION` is enabled (the default). This allows us to use\n  `await` during module creation.  One side effect of this is that code in\n  `--post-js` files will now be delayed until after module creation and after\n  `main` runs.  This matches the existing behaviour when using sync instantation\n  (`-sWASM_ASYNC_COMPILATION=0`) but is an observable difference. (#23157)\n- The `POLYFILL_OLD_MATH_FUNCTIONS` setting was removed.  The browser versions\n  that require these polyfills are no longer supported by emscripten so the\n  polyfills should never be needed. (#23262)\n- JavaScript libraries can now be specified via `-lfoo.js`.  This works like the\n  existing `--js-library` flag but will search the library path (all paths\n  specified with `-L`) for `libfoo.js`. (#23338)\n- The `mallinfo` struct members are now defined as `size_t` which makes them\n  compatible with larger memories, and is also how linux defines them. (#23368)\n- Emscripten now uses the debug version of malloc (i.e. assertions enabled)\n  when linking in debug mode (`-O0` and/or `-sASSERTIONS`).  This means that\n  things like double-free will be detected in these builds.  Previously this was\n  only true with `-sASSERTIONS=2`. (#23330)\n\n3.1.74 - 12/14/24\n-----------------\n- The file system was updated to independently track atime, mtime and ctime\n  instead of using the same time for all three. (#22998)\n- Emscripten-generated code will now use async/await internally when loading\n  the Wasm module.  This will be lowered away by babel when targeting older\n  browsers. (#23068)\n- Due to the discontinued support for invalid specializations of\n  `std::basic_string` (https://github.com/llvm/llvm-project/pull/72694), the\n  support for `std::basic_string<unsigned char>` was removed from embind.\n  (#23070)\n- The minimum supported versions of browser engines that we support were updated\n  to versions that support Promise, Fetch and Object.asign APIs, allowing the \n  polyfills for these to be removed.  Chrome 32 -> 45, Firefox 34 -> 40, Safari\n  9.0 -> 10.1.  These browser engines version are all over 8 years old now.\n  (#23077, #23118)\n\n3.1.73 - 11/28/24\n-----------------\n- libunwind was updated to LLVM 19.1.4. (#22934)\n- mimalloc was updated to 2.1.7. (#21548)\n\n3.1.72 - 11/19/24\n-----------------\n- The `MEMORY64` setting is no longer experimental. At time of writing all\n  browsers still require a flag to run the resulting binaries but that should\n  change in the coming months since the proposal is now at stage 4. (#22864)\n- GLFW: Fixed regression introduced in 3.1.51. CSS scaling is now available\n  again. Note that CSS scaling is disabled in HiDPI mode. (#22847, #22900)\n\n3.1.71 - 11/04/24\n-----------------\n- SDL2 port updated to 2.30.9. (#22830)\n- LLVM's `-Wnontrivial-memaccess` warning has been updated to also warn about\n  passing non-trivially-copyable destination parameter to `memcpy`,\n  `memset` and similar functions for which it is a documented undefined\n  behavior (#22798). See https://github.com/llvm/llvm-project/pull/111434\n- The automatic fallback to `$HOME/.emscripten_cache` when the emscripten\n  directory is read-only was removed.  This automatic behaviour could cause\n  confusion.  Anyone who really wants to use `$HOME/.emscripten_cache` can\n  still do so either via an environment variable (`EMCC_CACHE`) or via a config\n  file setting `CACHE`.\n- The standalone `file_packager.py` tool now outputs modern JS (specifically it\n  includes nullish assignment).  If you use this output directly and you want\n  to support older browsers you may need to transpile it.  If you use\n  `file_packager` via emcc the output will be transpiled as part of the emcc\n  output. (#22805)\n\n3.1.70 - 10/25/24\n-----------------\n- Improvements to Audio Worklet support (#22731, #22681)\n- Small improvements to embind (#22734)\n  \n3.1.69 - 10/12/24\n-----------------\n- The usage of `EM_BOOL` in the emscripten API has been replaced with C/C++\n  bool.  This change should not be observable since `EM_BOOL` has been\n  equivalent to `bool` since #22157. (#22155)\n- Fix regression introduced in 3.1.67 (#22557) which broke webgpu / int64\n  integration. (#22689)\n- SDL2 port updated from 2.28.4 to 2.30.8. (#22697)\n- embind no longer exports any library functions by default.  Previously we\n  would export getInheritedInstanceCount, getLiveInheritedInstances,\n  flushPendingDeletes and setDelayFunction.  If you need these library function\n  exprted they can be added to `EXPORTED_RUNTIME_METHODS`. (#22705)\n\n3.1.68 - 09/30/24\n-----------------\n- Added support for compiling 256-bit wide AVX intrinsics, emulated on top\n  of 128-bit Wasm SIMD instruction set. (#22430). Pass `-msimd128 -mavx` to\n  enable targeting AVX.\n- Pthread-based programs no longer generates `.worker.js` file.  This file was\n  made redundant back in 3.1.58 and now is completely removed. (#22598)\n- The freetype port was updated from v2.6 to v2.13.3. (#22585)\n- The number of arguments passed to Embind function calls is now only verified\n  with ASSERTIONS enabled. (#22591)\n- Optional arguments can now be omitted from Embind function calls. (#22591)\n- Recent changes to Binaryen included in this version significantly improve\n  the speed at which the post-link optimizations run for some large programs.\n\n3.1.67 - 09/17/24\n-----------------\n- Add option `nonnull<ret_val>()` to Embind to omit `| null` from TS definitions\n  for functions that return pointers.\n\n3.1.66 - 09/10/24\n-----------------\n- The behaviour of the `pthread_kill` function was fixed to match the spec\n  and will now run the designated handler on the target thread. (#22467)\n- Added support for WebGL extensions EXT_clip_control, EXT_depth_clamp,\n  EXT_polygon_offset_clamp and WEBGL_polygon_mode (#20841)\n- New `emscripten_console_trace` and `emscripten_dbg_backtrace` APIs we were\n  added to `console.h`.  The former simply maps directly to `console.trace`.\n  The latter uses `dbg()` so it writes directly to stderr under node (better for\n  multi-threaded apps).\n\n3.1.65 - 08/22/24\n-----------------\n- A new `--emit-minification-map` command line flag was added, which can be used\n  to emit a minifiction map in the case that import/export minification is\n  performed (this happens at higher optimization levels). (#22428)\n- Remove `Module['quit']` handling.  This could be used to override the internal\n  method for shutting down the program, but it was neither documented nor\n  tested.  Programs that want to intercept the shutting down of a program can\n  use `Module['onExit']`. (#22371)\n- The `NODEJS_CATCH_EXIT` setting is now disabled by default.  This setting\n  is only useful under very specific circumstances, and has some downsides, so\n  disabling it by default makes sense. (#22257)\n- Add WebP (`.webp`) decoding support in file preloading. (#22282)\n\n3.1.64 - 07/22/24\n-----------------------\n- Updated the SCons tool to not require the `EMSCRIPTEN_ROOT` environment\n  variable, in which case it will assume that SCons will find the binaries in\n  (its) `PATH`.\n- Updated `emscons` to apply the `EMSCRIPTEN_ROOT`, `EMSCONS_PKG_CONFIG_LIBDIR`\n  and `EMSCONS_PKG_CONFIG_PATH` environment variables. The SCons tool will use\n  last two to set up `PKG_CONFIG_LIBDIR` and `PKG_CONFIG_PATH` respectively.\n\n3.1.63 - 07/12/24\n-----------------\n- Fix html5 input event bug that was introduced in 3.1.62. (#22201)\n- Fix webpack + pthreads bug that was introduced in 3.1.60. (#22165)\n\n3.1.62 - 07/02/24\n-----------------\n- The `EM_BOOL` type changed from `int/u32` to `bool/u8`.  This changes the\n  layout and size of some structs in the emscripten API. (#22157)\n- The `EMSCRIPTEN_FETCH_WAITABLE` flag along with the `emscripten_fetch_wait`\n  API were marked a deprecated.  These feature have not functions for several\n  years now. (#22138)\n- The internal `read_` function was removed.  We now just use `readBinary` or\n  `readAsync`. (#22080)\n- reference-types feature is now enabled by default in Emscripten, due to the\n  upstream LLVM change (https://github.com/llvm/llvm-project/pull/93261).\n- Emscripten now uses `strftime` from musl rather than using a custom\n  JavaScript implementation. (#21379)\n- Embind now supports return value policies for properties.\n\n3.1.61 - 05/31/24\n-----------------\n- The internal `readAsync` function now returns a promise rather than accepting\n  callback arguments.\n- The JSPI feature now uses the updated browser API for JSPI (available in\n  Chrome v126+). To support older versions of Chrome use Emscripten version\n  3.1.60 or earlier.\n- IDBFS mount has gained a new option { autoPersist: true }, which if passed,\n  changes the semantics of the IDBFS mount to automatically persist any changes\n  made to the filesystem. (#21938)\n\n3.1.60 - 05/20/24\n-----------------\n- Under nodefs, symbolic links to files outside of mount locations no longer work.\n  This reverts the previous behaviour added in #3277. (#21805)\n- The `EXPORTED_FUNCTIONS` list can now include JS library symbols even if they\n  have not been otherwise included (e.g. via `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`).\n  (#21867)\n- Due to the upstream LLVM changes\n  (https://github.com/llvm/llvm-project/pull/80923 and\n  https://github.com/llvm/llvm-project/pull/90792), multivalue feature is now\n  enabled by default in Emscripten. This only enables the language features and\n  does not turn on the multivalue ABI.\n- Embind now supports return value policies to better define object lifetimes.\n  See https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#object-ownership for more information.\n\n3.1.59 - 04/30/24\n-----------------\n- Fix the location of the dummy `.worker.js` file that is now generated as part\n  of pthread builds so that is generated alongside the main JavaScript file.\n  See #21701. ()\n- `-sASYNCIFY=2` is setting now deprecated, use `-sJSPI` instead.\n\n3.1.58 - 04/23/24\n-----------------\n- The `-sMAIN_MODULE=1` mode no longer exports all the main module symbols on\n  `Module` object.  This saves a huge about of generated JS code due the fact\n  that `-sMAIN_MODULE=1` includes *all* native symbols in your program as well\n  is from the standard library.  The generated JS code for a simple program\n  in this mode is reduced from from 3.3mb to 0.5mb.  The current implementation\n  of this feature requires wasm-ld to be on the program twice which could have a\n  noticeable effect on link times. (#21785)\n- In `-sMODULARIZE` mode, the argument passed into the module constructor is\n  no longer mutated in place.  The expectation is that the module instance will\n  be available via the constructor return value.  Attempting to access methods\n  on the object passed *into* the constructor will now abort. (#21775)\n- Enable use of `::` to escape port option separator (#21710)\n- In multi-threaded builds `--extern-pre-js` and `--extern-post-js` code is\n  now only run on the main thread, and not on each of the workers. (#21750)\n- Fix crash when throwing exceptions in dynamically linked int64 functions (#21759)\n- Multi-threaded builds no depend on a separate `.worker.js` file.  This saves\n  on code size and network requests.  In order to make this change go smoothly,\n  without breaking build systems that expect a `worker.js`, emscripten will\n  generate an empty `.worker.js` to give folks time to transition their\n  deployment scripts.  In `-sSTRICT` mode, this empty file will not be\n  generated. (#21701)\n\n3.1.57 - 04/10/24\n-----------------\n- libcxx, libcxxabi, libunwind, and compiler-rt were updated to LLVM 18.1.2.\n  (#21607, #21638, and #21663)\n- musl libc updated from v1.2.4 to v1.2.5. (#21598)\n- In `MODULARIZE` mode we no longer export the module ready promise as `ready`.\n  This was previously exposed on the Module for historical reasons even though\n  in `MODULARIZE` mode the only way to get access to the module is to wait on\n  the promise returned from the factory function. (#21564)\n- JS library code is now executed in its own context/scope, which limits how\n  much of the compiler internals are accessible. If there are build time JS\n  symbols that you are depending on, but that were not added to this scope,\n  please file a bug and we can add more to this scope. (#21542)\n- The JS functions for manipulating the native/shadow stack\n  (`stackSave`/`stackRestore`/`stackAlloc`) are now just regular JS library\n  function and as such are only included if you explicitly depend on them.  If\n  you use these functions in your JS code you will need to depend on them via\n  either:\n  - The `EM_JS_DEPS` macro for `EM_ASM`/`EM_JS` code.\n  - The `__deps` attribute for JS library functions\n  - The `-sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE` flag for `--pre-js`/`--post-js`\n    code\n  (#21555)\n- TypeScript definitions for Wasm exports, runtime exports, and embind bindings\n  can now be generated with `--emit-tsd`. The option `--embind-emit-tsd` has been\n  deprecated, use `--emit-tsd` instead.\n- Added the `ASYNCIFY_PROPAGATE_ADD` setting, to control whether the `ASYNCIFY_ADD`\n  list propagates or not. By default this is enabled; as a result you may see larger\n  ASYNCIFY builds as more of the function tree may be instrumented than you were\n  previously manually specifying in `ASYNCIFY_ADD`. To stop propagation you can\n  specify functions in the `ASYNCIFY_REMOVE` list, or to return to the previous\n  behaviour, disable this setting (set `-sNO_ASYNCIFY_PROPAGATE_ADD`.) (#21672)\n- ports changes:\n  - Fixed transitive link dependencies (#21602)\n  - Enable use of options in ports dependencies (#21629)\n\n3.1.56 - 03/14/24\n-----------------\n- emscripten will now generate an `unused-command-line-argument` warning if\n  a `-s` setting is specified more than once on the command line with\n  conflicting values.  In this case the first setting is ignored. (#21464)\n\n3.1.55 - 03/01/24\n-----------------\n- Update sdl2-mixer port from 2.6.0 to 2.8.0\n- In `STRICT` mode the `HEAPXX` symbols (such as `HEAP8` and `HEAP32`) are now\n  only exported on demand.  This means that they must be added to\n  `EXPORTED_RUNTIME_METHODS` for them to appear on the `Module` object.  For\n  now, this only effects users of `STRICT` mode. (#21439)\n- Emscripten no longer supports `--memory-init-file` (i.e. extracting static\n  data into an external .mem file).  This feature was only available under\n  wasm2js (`-sWASM=0`) anyway so this change will only affect users of this\n  setting. (#21217)\n- `INITIAL_HEAP` setting is introduced to control the amount of initial\n  memory available for dynamic allocation without capping it. If you are\n  using `INITIAL_MEMORY`, consider switching to `INITIAL_HEAP`. Note that\n  it is currently not supported in all configurations (#21071).\n\n3.1.54 - 02/15/24\n-----------------\n- SDL2 port updated from v2.24.2 to v2.26.0. (#21337)\n- The `DEMANGLE_SUPPORT` setting and the associated `demangle` function are\n  now deprecated since Wasm stack traces always contain demangled symbols these\n  days. (#21346)\n- The type of `EMSCRIPTEN_WEBGL_CONTEXT_HANDLE` was changed to unsigned and\n  the only valid error returned from `emscripten_webgl_create_context` is\n  now zero.  This allows `EMSCRIPTEN_WEBGL_CONTEXT_HANDLE` to hold a pointer\n  to memory even in 2GB+ mode.  Since `emscripten_webgl_create_context` never\n  returns anything except zero for its errors today this change should not\n  require any action. (#21268)\n- Added `--use-port` option to `emcc`.  This option allows ports to be enabled\n  by name and is designed to replace all existing `-sUSE_XXX` settings for\n  ports. You can use `--show-ports` to get the list of available ports that\n  can be used with this new option. (#21214)\n- `--pre-js` and `--post-js` files can now opt into being run through the JS\n  preprocessor. This change was originally landed in  #18525, but it got\n  reverted in #19006.  Now it requires explicit opt-in by adding `#preprocess` to\n  the top of the JS file.  This is useful as it allows things like `{{{\n  POINTER_SIZE }}}` and `{{{ makeGetValue(..) }}}` to be used in pre/post JS\n  files, just like they can be in JS library files. (#21227)\n- Added concept of contrib ports which are ports contributed by the wider \n  community and supported on a \"best effort\" basis. See \n  `tools/ports/contrib/README.md` for details.A first contrib port is \n  available via `--use-port=contrib.glfw3`: an emscripten port of glfw written \n  in C++ with many features like support for multiple windows. (#21244 and \n  #21276)\n- Added concept of external ports which live outside emscripten and are\n  loaded on demand using the syntax `--use-port=/path/to/my_port.py` (#21316)\n- `embuilder` can now build ports with options as well as external ports using\n  the same syntax introduced with `--use-port`\n  (ex: `embuilder sdl2_image:formats=png,jpg`) (#21345) \n- Allow comments in response files. Any line starting with `#` is now ignored.\n  This is useful when listing exported symbols. (#21330)\n\n3.1.53 - 01/29/24\n-----------------\n- The llvm version that emscripten uses was updated to 19.0.0 trunk. (#21165)\n\n3.1.52 - 01/19/24\n-----------------\n- The core stack manipulation functions (`stackSave`, `stackRestore`,\n  `stackAlloc`) are no longer exported by default.  Users of these function\n  now need to depend on them explicitly (either via `__deps` attributes or via\n  `-sEXPORTED_FUNCTIONS`). (#21075)\n- Building with `pthreads+EXPORT_ES6` will now emit the worker file as\n  `NAME.worker.mjs` rather than `.js`. This is a necessary breaking change to\n  resolve other `pthreads+EXPORT_ES6` issues in Node.js (because Node.js is\n  affected by the suffix in some cases). (#21041)\n- Include paths added by ports (e.g. `-sUSE_SDL=2`) now use `-isystem` rather\n  then `-I`.  This means that files in user-specified include directories will\n  now take precedence over port includes. (#21014)\n- Certain settings that only apply when generating JavaScript output will now\n  trigger a warning if used when generating only Wasm.\n- Fix bug where `main` was mistakenly included in debug builds but not in\n  release builds. (#20971)\n- Remove JAVA from the list of `.emscripten` config file settings.  In the\n  past we used this to run the java version of closure compiler.  If there are\n  folks who prefer to use the java version of closure compiler for some reason\n  it should be possible by adding `--platform=java` to `--closure-args` or\n  `EMCC_CLOSURE_ARGS` but emscripten will no longer do this automatically.\n  (#20919)\n- The WORKAROUND_OLD_WEBGL_UNIFORM_UPLOAD_IGNORED_OFFSET_BUG setting was\n  removed.  This was a workaround from 2018 (#7459) that should no longer be\n  needed. (#20925)\n- The `--default-obj-ext` command line flag was removed. (#20917)\n- emcc will now treat `.bc` files as source files.  These means that will get\n  compiled by clang before being passed to the linker.  This matches the\n  behaviour of clang. (#20922)\n- Emscripten now only supports browsers going back to certain versions. The\n  current set of minimum versions are: Chrome 32, Firefox 34, Safari 9.\n  Attempting to targets version older this using, for example\n  `MIN_CHROME_VERSION` will now result in build-time error.  All of these\n  browser versions are at least 8 years old now so the hope is that nobody\n  is intending to target them today.  (#20924)\n- C++ objects passed into embind's val via constructors, methods, and call\n  function will not be automatically destroyed after the function call. This\n  makes the behavior consistent for invocations. \n- The `SUPPORT_ERRNO` setting is now deprecated as it only controlled setting\n  errno from JS library functions and emscripten no longer requires this.\n  (#21074)\n\n3.1.51 - 12/13/23\n-----------------\n- Support for explicitly targeting the legacy Internet Explorer or EdgeHTML\n  (edge version prior to the chromium-based edge) browsers via\n  `-sMIN_EDGE_VERSION/-sMIN_IE_VERSION` was removed. (#20881)\n- Emscripten is now more strict about handling unsupported shared library\n  inputs.  For example, under the old behaviour if a system shared library\n  such as `/usr/lib/libz.so` was passed to emscripten it would silently re-write\n  this to `-lz`, which would then search this a libz in its own sysroot.  Now\n  this file is passed though the linker like any other input file and you will\n  see an `unknown file type` error from the linker (just like you would with the\n  native clang or gcc toolchains). (#20886)\n- Support for explicitly targeting the legacy EdgeHTML browser (edge version\n  prior to the chromium-based edge) via `-sMIN_EDGE_VERSION` was removed.\n  Using `-sLEGACY_VM_SUPPORT` should still work if anyone still wanted to target\n  this or any other legacy browser.\n- Breaking change: Using the `*glGetProcAddress()` family of functions now\n  requires passing a linker flag -sGL_ENABLE_GET_PROC_ADDRESS. This prevents\n  ports of native GL renderers from later accidentally attempting to activate\n  \"dormant\" features if web browser implementations gain new WebGL extensions in\n  the future, which `*glGetProcAddress()` is not able to support. (#20802)\n- Added Hi DPI support to GLFW. When enabled, GLFW automatically accounts for\n  the `devicePixelRatio` browser property and changes the size of the canvas\n  accordingly (including dynamically if the canvas is moved from a 4K screen to\n  a 2K screen and vice-versa). `glfwGetFramebufferSize` now properly returns the\n  canvas size in pixels, while `glfwGetWindowSize` returns the canvas size is\n  screen size. By default, this feature is disabled. You can enable it before\n  creating a window by calling `glfwWindowHint(GLFW_SCALE_TO_MONITOR,\n  GLFW_TRUE)`. You can also dynamically change it after the window has been\n  created by calling `glfwSetWindowAttrib(window, GLFW_SCALE_TO_MONITOR,\n  GLFW_TRUE)`. (#20584)\n- Transpilation to support older environments/browsers is now performed by babel\n  rather than closure compiler.  This means that folks targeting older browsers\n  (e.g. `-sLEGACY_VM_SUPPORT`) do not need to ensure their code is closure\n  compliant. (#20879)\n\n3.1.50 - 11/29/23\n-----------------\n- Add a port of mimalloc, a fast and scalable multithreaded allocator. To use\n  it, build with `-sMALLOC=mimalloc`. (#20651)\n- When compiling, Emscripten will now invoke `clang` or `clang++` depending only\n  on whether `emcc` or `em++` was run.  Previously it would determine which to\n  run based on individual file extensions.  One side effect of this is that you\n  may now see a clang warning when building `.c` source files using `em++`:\n  `warning: treating 'c' input as 'c++' when in C++ mode`.  This also means that\n  the `DEFAULT_TO_CXX` setting now only applies when linking and not when\n  compiling. (#20712)\n- JavaScript library code can now use the full range of ES6 features and we rely\n  on closure compiler to transpile for ES5 when targeting older browsers.\n  For those that would rather perform transpilation separately outside of\n  emscripten you can use the `-sPOLYFILL=0` setting. (#20700)\n- libcxx, libcxxabi, libunwind, and compiler-rt were updated to LLVM 17.0.4.\n  (#20705, #20707, and #20708)\n- Remove `BENCHMARK` setting. That has not been used by the benchmark suite for\n  some time now (at least not by default), and is much less useful these days\n  given lazy compilation in VMs (which makes it impossible to truly benchmark\n  execution separately from compilation, which `BENCHMARK` hoped to do).\n- Update GLFW handling of touch events to avoid sending duplicate mousedown and\n  and mouseup events. Maps touchmove to mousemove events for a single primary\n  touch. (#20805)\n\n3.1.49 - 11/14/23\n-----------------\n- Many MEMORY64 fixes for browser and graphics APIs (#20678)\n- The `glfwSetWindowSize` function no longer switches to fullscreen when the\n  width/height provided as parameters match the screen size. This behavior\n  now matches the behavior of SDL and glut. In order to switch to fullscreen,\n  the client code should invoke `Module.requestFullscreen(...)` from a user \n  triggered event otherwise the browser raises an error. (#20600)\n\n3.1.48 - 11/05/23\n-----------------\n- The JS `assert` function is no longer available in release builds when\n  `-sSTRICT` is used.  This should only affect users with custom JS library code\n  which doesn't use `#if ASSERTIONS` guards around their `assert` calls.  This\n  behaviour matches that of `MINIMAL_RUNTIME`. (#20592)\n- The minimum version of node required run the compiler was updated from\n  10.19 to 16.20.  This does not effect the node requirements of the generated\n  JavaScript code. (#20551)\n- A new top-level `bootstrap` script was added.  This script is for emscripten\n  developers and helps take a care of post-checkout tasks such as `npm install`.\n  If this script needs to be run (e.g. because package.json was changed, emcc\n  will exit with an error. (#19736)\n- If exceptions are disabled, using `new` together with `std::nothrow` no\n  longer aborts if the allocation fails. Instead `nullptr` is returned now.\n  This does not change the behavior of regular usage of `new`.\n- Default `MIN_CHROME_VERSION` was increased from 75 to 85 and default\n  `MIN_FIREFOX_VERSION` was increased from 68 to 79 to allow Emscripten\n  to use some ES2021 features for smaller JavaScript code size. (#20549)\n- Emscripten now generates PowerShell wrappers for its CLIs. This allows to\n  sidestep some of the issues with legacy cmd.exe, but developers must\n  explicitly opt-in to running PowerShell scripts in system settings or\n  via the `Set-ExecutionPolicy` command. (#20416)\n- `emscripten::val` now supports C++20 `co_await` operator for JavaScript\n  `Promise`s. (#20420)\n\n3.1.47 - 10/09/23\n-----------------\n- The boost-headers port was updated to v1.83.0.\n- The `noExitRuntime` global is now a JS library symbol that will only be\n  included as needed.  User of `noExitRuntime` will now need to declare a\n  dependency on it.  It will get implicitly included if `noExitRuntime` is part\n  of `INCOMING_MODULE_JS_API.` (which it is by default), or it can be added to\n  either `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE` or `noExitRuntime`. (#20336)\n- The egl, html5, sdl and webgpu libraries now support basic functionality with\n  `-sMEMORY64`. (#20276)\n- Value types in `emscripten/html5.h` that correspond the WebIDL `long` type are\n  now represented as `int` rather than `long` types so that they are 32-bit wide\n  on both wasm32 and wasm64.  (#20290)\n- `EM_JS` and `EM_ASM` that are present in side module now have their syntax\n  validated at build time. (#20258)\n- `MAIN_THREAD_EM_ASM_PTR` macro added for code that returns a pointer.  This\n  mirrors the existing `EM_ASM_PTR`. (#20261)\n- Emscripten now implements default POSIX signal handlers. These can\n  terminate or abort the program in response to `raise` cals. (#20257)\n- `emscripten::val` now prevents accidental access to the underlying JavaScript\n  value from threads other than its owner. This already didn't work correctly\n  in majority of cases, but now it will throw a clear assertion failure. (#20344)\n- `emscripten::val` can now be iterated over with a C++ range-based for loop.\n  (#20364)\n\n3.1.46 - 09/15/23\n-----------------\n- The `wasmTable` global is now a JS library function that will only be included\n  as needed.  Code that references `wasmTable` will no need to declare a\n  dependency on it.  It can also be explicitly included using\n  `-sEXPORTED_RUNTIME_METHODS=wasmTable`.\n- libunwind updated to LLVM 16.0.6. (#20088)\n- The `--minify=0` command line flag will now preserve comments as well as\n  whitespace.  This means the resulting output can then be run though closure\n  compiler or some other tool that gives comments semantic meaning. (#20121)\n- `-sSTRICT` now implies `-sINCOMING_MODULE_JS_API=[]` which is generally good\n  for code size.  If you `-sSTRICT` you now need to be explicit about the\n  incoming module APIs you are supplying.  Users who supply symbols on the\n  incoming module but forget to include them in `-sINCOMING_MODULE_JS_API`\n  will see an error in debug builds so this change will not generate any\n  silent failures.\n- JS library decorators such as `__deps` and `__async` are now type checked so\n  that errors are not silently ignored.\n- The `USE_GLFW` settings now defaults to 0 rather than 2.  This matches other\n  other settings such as `USE_SDL` that default to 0 these days and also matches\n  the existing behaviour for `MINIMAL_RUNTIME` and `STRICT` mode.\n  If you use GLFW you now need to explicitly opt into it using `-sUSE_GLFW` or\n  `-lglfw`. (#19939)\n- A new settings `TABLE_BASE` was introduced that can be used to place static\n  function addresses (table slots) at a certain offset.  This defaults to 1\n  which is the previously fixed value. (#20149)\n- Clang's error detection of unused variables `-Wunused-variable` improved,\n  which may require changes in user code (see #20169).\n\n3.1.45 - 08/23/23\n-----------------\n- The function used to add symbols the JS library has been renamed from\n  `mergeInto`, to the more specific `addToLibrary`.  This new function does not\n  require the passing of `LibraryManager.library` as a first argument.  The old\n  `mergeInto` continues to exist for backwards compat.\n- The `--log_html` option was removed from `emrun`.  This option was already not\n  working with python3.8 or above so we hope is safe to say that nobody was\n  relying on it.\n\n3.1.44 - 07/25/23\n-----------------\n- musl libc updated from v1.2.3 to v1.2.4. (#19812)\n- The `EM_LOG_FUNC_PARAMS` flag to `emscripten_log`/`emscripten_get_callstack`\n  has been deprecated and no longer has any effect.  It was based on a\n  long-deprecated JS API. (#19820)\n- The internal `read_` and `readAsync` functions no longer handle data URIs.\n  (Higher-level functions are expected to handle that themselves, before calling.)\n  This only effects builds that use `-sSINGLE_FILE` or `--memory-init-file`.\n  (#19792)\n- The `asm` property of the Module object (which held the raw exports of the\n  wasm module) has been removed.  Internally, this is now accessed via the\n  `wasmExports` global. If necessary, it is possible to export `wasmExports`\n  on the Module object using `-sEXPORTED_RUNTIME_METHODS=wasmExports`. (#19816)\n- Embind now supports generating TypeScript definition files using the\n  `--embind-emit-tsd <filename>` option.\n\n3.1.43 - 07/10/23\n-----------------\n- Handling i64 arguments and return values in JS functions is now much simpler\n  with the new `__i53abi` decorator.  When this is set to true, i64 values are\n  automatically converted to JS numbers (i53) at the JS boundary.  Parameters\n  outside of the i53 will show up as NaN in the JS code (#19711)\n- EM_JS functions are now supported in side modules (#19705)\n\n3.1.42 - 06/22/23\n-----------------\n- The default minimum Node version of Emscripten output was bumped from 10.19 to\n  16.0. To run the output JS in an older version of node, you can use e.g.\n  `-sMIN_NODE_VERSION=101900` which will apply the previous minimum version of\n  10.19.0. (#19192).\n- The log message that emcc will sometime print (for example when auto-building\n  system libraries) can now be completely suppressed by running with\n  `EMCC_LOGGING=0`.\n- Runtime dynamic linking symbols such as dlopen and dlsym will no longer cause\n  a linker error when building without `-sMAIN_MODULE`.  Instead stub functions\n  will be included that fail at runtime.  This matches the behaviour of other\n  libc functions that we don't implement.  For those that prefer to get a linker\n  error we have the `-sALLOW_UNIMPLEMENTED_SYSCALLS` settings. (#19527)\n- The `modifyFunction` helper in `parseTools.js` was renamed to\n  `modifyJSFunction` and its callback function no longer takes the name of the\n  function being modified.  The name is not relevant for JS library functions\n  and can be safely ignored.\n- JS library functions can now be implemented using ES6 arrow notation, which\n  can save to a few bytes on JS code size. (#19539)\n\n3.1.41 - 06/06/23\n-----------------\n- A new setting (`CHECK_NULL_WRITES`) was added to disabled the checking of\n  address zero that is normally done when `STACK_OVERFLOW_CHECK` is enabled.\n  (#19487)\n- compiler-rt updated to LLVM 16. (#19506)\n- libcxx and libcxxabi updated to LLVM 16. (#)\n\n3.1.40 - 05/30/23\n-----------------\n- The `_emscripten_out()`, `_emscripten_err()` and `_emscripten_dbg()` functions\n  declared in `emscripten/console.h` no longer have the underscore prefix and\n  are now documented. (#19445)\n\n3.1.39 - 05/18/23\n-----------------\n- The JS `err()` function will now bind to `console.error` by default rather\n  than `console.warning`.  For debugging/tracing/logging we recommend the\n  `dbg()` function instead. (#19326)\n- The `WASM2C` options has been removed. All known users are using upstream wabt\n  these days anyhow.\n\n3.1.38 - 05/10/23\n-----------------\n- The `dladdr` function will now always return an error rather than filling in\n  dummy values. (#19319)\n- The restriction preventing the use of dynamic linking in combination with\n  `-sDYNAMIC_EXECUTION=0` was removed.  This restriction was being enforced\n  unnecessarily since dynamic linking has not depended on `eval()` for a while\n  now.\n- Remove extra code for falling back to long-deprecated BlobBuilder browser API\n  when Blob constructor is missing.  This was a fix for an issue that has long\n  been fixed. (#19277)\n\n3.1.37 - 04/26/23\n-----------------\n- The `EM_PYTHON_MULTIPROCESSING` environment variable no longer has any effect.\n  This was added a temporary fallback but should no longer be needed. (#19224)\n- The old reverse dependency system based on `tools/deps_info.py` has been\n  removed and the existing `__deps` entries in JS library files can now be used\n  to express JS-to-native dependencies.  As well being more precise, and\n  extensible via user-supplied JS libraries, this also speeds up link times\n  since we no longer need scan linker inputs using `llvm-nm`.  It also\n  completely removes the need for the `REVERSE_DEPS` settings which has now\n  been deprecated. (#18905)\n- Bump the default minimum Firefox version from 65 to 68 (#19191).\n- Background pthreads no longer prevent a Node.js app from exiting. (#19073)\n\n3.1.36 - 04/16/23\n-----------------\n- The `USES_DYNAMIC_ALLOC` setting has been deprecated.  You can get the same\n  effect from `-sMALLOC=none`. (#19164)\n\n3.1.35 - 04/03/23\n-----------------\n- The following JavaScript runtime functions were converted to JavaScript\n  library functions:\n   - UTF8ArrayToString\n   - UTF8ToString\n   - stringToUTF8Array\n   - stringToUTF8\n   - lengthBytesUTF8\n  \n  If you use any of these functions in your JS code you will now need to include\n  them explicitly in one of the following ways:\n   - Add them to a `__deps` entry in your JS library file (with leading $)\n   - Add them to `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE` (with leading $)\n   - Add them to `EXPORTED_FUNCTIONS` (without leading $)\n   - Set `-sLEGACY_RUNTIME` to include all of them at once.\n- `FS.loadFilesFromDB` and `FS.saveFilesToDB` were removed.  We think it's\n  unlikely there were any users of these functions since there is now a separate\n  IDBFS filesystem for folks that want persistence. (#19049)\n- `allocateUTF8` and `allocateUTF8OnStack` library function moved to\n  `library_legacy.js`.  Prefer the more accurately named `stringToNewUTF8` and\n  `stringToUTF8OnStack`. (#19089)\n- `SDL_image` port was updated to version 2.6.0.\n- `-z` arguments are now passed directly to wasm-ld without the need for the\n  `-Wl,` prefix.  This matches the behaviour of both clang and gcc. (#18956)\n- Reverted #18525 which runs the JS pre-processor over files passed via\n  --pre-js and --post-js.  It turned out this change caused issue for several\n  folks who had JS files with lines that start with `#` so can't be run through\n  the pre-processor.  If folks want to re-enable this we can looks into ways to\n  make it conditional/optional.\n- The `{{{ cDefine('name') }}}` helper macro can now be simplified to just `{{{\n  cDefs.name }}}`.\n\n3.1.34 - 03/14/23\n-----------------\n- Fix for using `EM_JS` functions defined in other object files.  This was a bug\n  that was introduced when `LLD_REPORT_UNDEFINED` was enabled by default back in\n  3.1.28. (#18928)\n- The preferred way to enable pthreads is now to just use the standard `-pthread`\n  flag.  The `-sUSE_PTHREADS` setting still works but is marked as legacy and\n  will generate a warning in `-sSTRICT` mode.\n- When targeting node, and using `-sMODULARIZE`, we no longer internally catch\n  unhandled promise rejections or exit status code. That is to say the,\n  `NODEJS_CATCH_REJECTION` and `NODEJS_CATCH_EXIT` are no longer compatible\n  with `-sMODULARIZE`.   \n\n3.1.33 - 03/08/23\n-----------------\n- Initial support for C++20 modules.  We have added a very simple test in form\n  of `other.test_cpp_module`. (#18915)\n- Removed `sys/sysctl.h` compatibility header.  We don't implement the function\n  it defines. (#18863)\n- Update SDL2_ttf port to 2.20.2 (#18804)\n- Update glfw header to 3.3.8 (#18826)\n- The `LLD_REPORT_UNDEFINED` setting has been removed.  It's now essentially\n  always enabled. (#18342)\n- Added `-sEXPORT_KEEPALIVE` to export symbols. When using\n  `MINIMAL_RUNTIME`, the option will be **disabled** by default.\n  This option simply exports the symbols on the module object, i.e.,\n  `Module['X'] = X;`\n- The WasmFS OPFS backend is now faster in browsers that implement\n  [`Atomics.waitAsync`](https://caniuse.com/mdn-javascript_builtins_atomics_waitasync).\n  (#18861)\n- The `emscripten_proxy_async_with_callback` API was replaced with a simpler\n  `emscripten_proxy_callback` API that takes a second callback to be called if\n  the worker thread dies before completing the proxied work.  \n\n3.1.32 - 02/17/23\n-----------------\n- Added new linker option `-sEXCEPTION_STACK_TRACES` which will display a stack\n  trace when an uncaught exception occurs. This defaults to true when\n  `ASSERTIONS` is enabled. This option is mainly for the users who want only\n  exceptions' stack traces without turning `ASSERTIONS` on. (#18642 and #18535)\n- `SUPPORT_LONGJMP`'s default value now depends on the exception mode. If Wasm\n  EH (`-fwasm-exception`) is used, it defaults to `wasm`, and if Emscripten EH\n  (`-sDISABLE_EXCEPTION_CATCHING=0`) is used or no exception support is used, it\n  defaults to `emscripten`. Previously it always defaulted to `emscripten`, so\n  when a user specified `-fwasm-exceptions`, it resulted in Wasm EH + Emscripten\n  SjLj, the combination we do not intend to support for the long term.\n- Added support for Wasm-based AudioWorklets for realtime audio processing\n  (#16449)\n- Synchronous proxying functions in emscripten/proxying.h now return errors\n  instead of hanging forever when the worker thread dies before the proxied work\n  is finished.\n\n3.1.31 - 01/26/23\n-----------------\n- Symbols that were previously exported from native code, but only for internal\n  reasons, are no longer exported on the `Module` object by default.  For\n  example, previously if you were using `Module._malloc` but not explicitly\n  including `_malloc` in `EXPORTED_FUNCTIONS`, it might have been exported\n  anyway due to internal use of `malloc` within the JS library code. (#18564)\n- The `STACK_SIZE`, `STACK_ALIGN`, `POINTER_SIZE`, and `ASSERTIONS` JavaScript\n  globals were removed by default.  In debug builds a clear error is shown if\n  you try to use these. (#18503)\n- --pre-js and --post-js files are now fed through the JS preprocessor, just\n  like JS library files and the core runtime JS files.  This means they can\n  now contain #if/#else/#endif blocks and {{{ }}} macro blocks. (#18525)\n- `-sEXPORT_ALL` can now be used to export symbols on the `Module` object\n  when used with `-sMINIMAL_RUNTIME` and `-sMODULARIZE` together. (#17911)\n- The llvm version that emscripten uses was updated to 17.0.0 trunk.\n\n3.1.30 - 01/11/23\n-----------------\n- The default pthread stack size will now be set to match `-sSTACK_SIZE` by\n  default.  Set `DEFAULT_PTHREAD_STACK_SIZE` explicitly to override this.\n  (#18479)\n- The `buffer` JavaScript variable was removed.  This underlying buffer is\n  still accessible via `wasmMemory.buffer` or `HEAPXX.buffer`.  In debug builds,\n  a clear error is shown if you try to use it.  (#18454)\n- The SDLv1 header directory is no longer added to the include path by default.\n  This means if you include SDL headers without the explicit version in them\n  (e.g. `SDL_events.h`) you will now need to add `-sUSE_SDL` explicitly at\n  compile time.  If you include the SDL headers with the directory name included\n  (e.g. `SDL/SDL_events.h`) you will not be affected by this change. (#18443)\n- Significant improvements were made (in the version of LLVM associated with\n  this emsdk release) to the quality of DWARF debug info when building in\n  optimized mode. See https://reviews.llvm.org/D140373. Using the -O1 flag is\n  recommended if a program is too large or slow to debug with -O0 (although\n  -O0 is still better for debugging when feasible).\n\n3.1.29 - 01/03/23\n-----------------\n- Fixed bug in `PROXY_TO_PTHREAD` whereby certain async operations on the main\n  thread would cause the whole program to exit, even when the proxied main\n  function was still running. (#18372)\n- Added `Module.pthreadPoolReady` promise for the `PTHREAD_POOL_DELAY_LOAD`\n  mode that allows to safely join spawned threads. (#18281)\n- PThreads can now be safely spawned on-demand in Node.js even without a PThread\n  pool (`PTHREAD_POOL_SIZE`) or proxying (`PROXY_TO_PTHREAD`) options. (#18305)\n\n3.1.28 - 12/08/22\n-----------------\n- `LLD_REPORT_UNDEFINED` is now enabled by default.  This makes undefined symbol\n  errors more precise by including the name of the object that references the\n  undefined symbol. The old behaviour (of allowing all undefined symbols at\n  wasm-ld time and reporting them later when processing JS library files) is\n  still available using `-sLLD_REPORT_UNDEFINED=0`. (#16003)\n- musl libc updated from v1.2.2 to v1.2.3. (#18270)\n- The default emscripten config file no longer contains `EMSCRIPTEN_ROOT`.  This\n  setting has long been completely ignored by emscripten itself. For\n  applications that wish to know where emscripten is installed looking for\n  `emcc` in the `PATH` has long been the recommended method (i.e. `which emcc`).\n  (#18279)\n- More accurate synchronisation of `emscripten_get_now` clocks between main\n  thread and pthreads.\n  This also changes the absolute value returned by the function, but it shouldn't\n  affect correct usages as the function has always returned different values on\n  different platforms, and is clearly documented as \"only meaningful in\n  comparison to other calls to this function\". (#18267)\n- Emscripten will now search your PATH for binaryen, llvm, and node if the\n  corresponding config file settings (`BINARYEN_ROOT`, `LLVM_ROOT`, `NODE_JS`)\n  are not set.  Allows emscripten to run with an empty config file given the\n  right tools in the PATH. (#18289)\n\n3.1.27 - 11/29/22\n-----------------\n- Add support for `-sEXPORT_ES6`/`*.mjs` on Node.js. (#17915)\n- Idle workers in a PThread pool no longer prevent Node.js app from exiting. (#18227)\n- The default `STACK_SIZE` was reduced from 5MB to 64KB.  Projects that use more\n  than 64Kb of stack will now need specify `-sSTACK_SIZE` at link time.  For\n  example, `-sSTACK_SIZE=5MB` can be used to restore the previous behaviour.\n  To aid in debugging, as of #18154, we now also place the stack first in memory\n  in debug builds so that overflows will be immediately detected, and result in\n  runtime errors.  This change brings emscripten into line with `wasm-ld` and\n  wasi-sdk defaults, and also reduces memory usage by default.  In general,\n  WebAssembly stack usage should be lower than on other platforms since a lot of\n  state normally stored on the stack is hidden within the runtime and does not\n  occupy linear memory at all.  The default for `DEFAULT_PTHREAD_STACK_SIZE` was\n  also reduced from 2MB to 64KB to match.\n- Improved error messages for writing custom JS libraries. (#18266)\n- EM_ASM code is now supported in side modules (#18228)\n\n3.1.26 - 11/17/22\n-----------------\n- Inline with the recent changes to llvm and binaryen, emscripten will now, by\n  default, enable the sign-extension and mutable-globals WebAssembly proposals.\n  In order to do so the default minimum safari version (`MIN_SAFARI_VERSION`)\n  was updated from 12.0 to 14.1, and support for the old EdgeHTML engine\n  (`MIN_EDGE_VERSION`) was removed by default.  If you want to continue to\n  support these older engines you can use these settings\n  (`-sMIN_SAFARI_VERSION=120000` and/or `-sMIN_EDGE_VERSION=44`) to revert to\n  the previous defaults, which will result in the new proposals being disabled.\n  Note that in order to avoid support for the sign-extension emscripten uses\n  a binaryen pass, so targeting older browsers requires the running of wasm-opt\n  and is therefore incompatible with `ERROR_ON_WASM_CHANGES_AFTER_LINK` (i.e.\n  fast linking). (#17690)\n- Added `--reproduce` command line flag (or equivalently `EMCC_REPRODUCE`\n  environment variable).  This options specifies the name of a tar file into\n  which emscripten will copy all of the input files along with a response file\n  that will allow the command to be replicated.  This can be useful for sharing\n  reproduction cases with others (inspired by the lld option of the same name).\n  (#18160)\n- In non-optimizing builds emscripten will now place the stack first in memory,\n  before global data.  This is to get more accurate stack overflow errors (since\n  overflow will trap rather corrupting global data first).  This should not\n  be a user-visible change (unless your program does something very odd such\n  depending on the specific location of stack data in memory). (#18154)\n\n3.1.25 - 11/08/22\n-----------------\n- The `TOTAL_STACK` setting was renamed to `STACK_SIZE`.  The old name will\n  continue to work as an alias. (#18128)\n- Exporting `print`/`printErr` via `-sEXPORTED_RUNTIME_METHODS` is deprecated in\n  favor of `out`/`err`.  The former symbols are supposed to be used with\n  `-sINCOMING_MODULE_JS_API` instead. (#17955)\n- aio.h was removed from the sysroot.  Emscripten doesn't support any of the\n  functions in this header.\n- Clang's function pointer cast warnings (enabled with `-Wcast-function-type`)\n  are now stricter. This warning is intended to help with CFI errors but also\n  helps wasm builds since wasm traps on such type mismatches in indirect calls.\n  We recommend that users enable it to prevent such errors (which can be hard to\n  debug otherwise). The older (less strict) behavior is also still possible with\n  `-Wcast-function-type -Wno-cast-function-type-strict` (or\n  `-Wno-error=cast-function-type-strict` if you want the warnings to be visible\n  but not errors). See https://reviews.llvm.org/D134831\n- libcxx and libcxxabi updated to LLVM 15. (#18113)\n\n3.1.24 - 10/11/22\n-----------------\n- In Wasm exception mode (`-fwasm-exceptions`), when `ASSERTIONS` is enabled,\n  uncaught exceptions will display stack traces and what() message. (#17979 and\n  #18003)\n- It is now possible to specify indirect dependencies on JS library functions\n  directly in C/C++ source code.  For example, in the case of a EM_JS or EM_ASM\n  JavaScript function that depends on a JS library function.  See the\n  `EM_JS_DEPS` macro in the `em_macros.h` header.  Adding dependencies in this\n  way avoids the need to specify them on the command line with\n  `-sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE`. (#17854)\n\n3.1.23 - 09/23/22\n-----------------\n- The `__EMSCRIPTEN_major__/minor__/tiny__` macros are no longer defined on the\n  command line but require `<emscripten.h/>` (or just `<emscripten/version.h>`\n  to be included. (#17883)\n- Linking of bitcode files using `emcc -r` + `-flto` is no longer supported.\n  `emcc -r` will now always use lld to link to an object file.  This matches the\n  behavior of upstream llvm where bitcode linking using lld does not exist.\n  The recommend way to combine bitcode input is to use library files (`ar`\n  archives).  See #13492 for more details.\n\n3.1.22 - 09/19/22\n-----------------\n- compiler-rt updated to LLVM 15. (#17802)\n- Using `-Oz` or `-Os` will no longer pass `-fno-inline-functions` to clang and\n  instead rely on clang's normal inline heuristics for these optimization\n  levels.  `-fno-inline-functions` can be passed explicitly if needed.\n- C++17 is now the default version of the C++ standard used by the compiler.\n  This is due to an upstream change in llvm.  Use `-std=c++14` (or technically\n  `-std=gnu++14`) to revert to the previous default.\n- Closure warnings are now controlled via the standard `-Wclosure` warning flags\n  rather than via a specific/custom `CLOSURE_WARNINGS` setting.  The old\n  setting continues to work but will issue a deprecation warning.\n  If you link with `-Werror` but you don't want closure warnings to be errors\n  you can add `-Wno-error=closure` or `-Wno-closure`.\n\n3.1.21 - 09/09/2022\n-------------------\n- Update SDL2 port to 2.24.0 (#17748)\n- The `LEGACY_RUNTIME` setting is no longer enabled by default.  If you use any\n  of these legacy runtime functions (except in library code with explicit\n  dependencies) then you would need to set `LEGACY_RUNTIME` on the command line\n  or add the ones you need to `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`:\n   - addFunction\n   - removeFunction\n   - allocate\n   - AsciiToString\n   - stringToAscii\n   - UTF16ToString\n   - stringToUTF16\n   - lengthBytesUTF16\n   - UTF32ToString\n   - stringToUTF32\n   - lengthBytesUTF32\n   - allocateUTF8\n   - allocateUTF8OnStack\n   - writeStringToMemory\n   - writeArrayToMemory\n   - writeAsciiToMemory\n   - intArrayFromString\n   - intArrayToString\n   - warnOnce\n   - ccall\n   - cwrap\n  Although this is technically a breaking change for those who use these\n  functions, there are assertion in debug builds that catch such usages and\n  direct towards how to fix the issue.\n\n3.1.20 - 08/24/2022\n-------------------\n- The `getTempRet0`/`setTempRet0` helper functions are now implemented directly\n  in WebAssembly, rather than supplied by the JS host.  This simplifies the\n  wasm/JS interface.  These function are no longer exported in all cases.  If\n  your code directly calls these functions from JS, you can add them to\n  `-sEXPORTED_RUNTIME_METHODS`.\n- Several linux-specific headers were removed from the emscripten sysroot. None\n  of the functionality in these headers was ever supported by emscripten. For\n  example `sys/soundcard.h` and `sys/ptrace.h`. (#17704)\n\n3.1.19 - 08/17/2022\n-------------------\n- Old method of metadata extraction via wasm-emscripten-finalize removed\n  in favor of local python code. (#16529)\n\n3.1.18 - 08/01/2022\n-------------------\n- The tests/ directory was renamed to just test/ to match other project close\n  emscripten (llvm, wabt, binaryen).  This should not effect any users of\n  emscripten, only developers. (#17502)\n- The llvm version that emscripten uses was updated to 16.0.0 (#17534)\n- worker.js now propagates unhandled promise rejections to the main thread the\n  same way it propagates uncaught exceptions.\n\n3.1.17 - 07/22/2022\n-------------------\n- Add support for dynamic linking with Asyncify. (#15893)\n- A source map file and DWARF info in the wasm can now be emitted at the same if\n  the user gives the both options: `-g -gsource-map`. (#17484)\n- The `align` argument to the makeGetValue/makeSetValue JS library macros was\n  removed (and replaced with an assert) as it had no uses internally and was\n  removed (and replaced with an assert) as it had now uses internally and was\n  untested.\n- Removed unused `calledMain` global variable from the JS runtime.  Folks who\n  want to know when main is done can use `Module[postRun]`.\n\n3.1.16 - 07/14/2022\n-------------------\n- Warnings generated by the JS compiler (compiler.js) are now propagated back\n  to the emcc compiler driver which means that `-Werror` builds will now fail\n  in the presence of JS compiler warnings.  As usual `-Wno-js-compiler` and\n  `-Wno-error=js-compiler)` can be used to control these warnings. (#17365)\n- When JS library functions are included as part of `EXPORTED_RUNTIME_METHODS`\n  it is no longer necessary to also add them to\n  `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`.  This change allows us to transition\n  runtime functions to JS library functions without the need to folks to add\n  `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`. (#17369)\n- The following function, which were previously part of the default runtime, are\n  now JS library functions:\n   - addFunction\n   - removeFunction\n   - allocate\n   - AsciiToString\n   - stringToAscii\n   - UTF16ToString\n   - stringToUTF16\n   - lengthBytesUTF16\n   - UTF32ToString\n   - stringToUTF32\n   - lengthBytesUTF32\n   - allocateUTF8\n   - allocateUTF8OnStack\n   - writeStringToMemory\n   - writeArrayToMemory\n   - writeAsciiToMemory\n   - intArrayFromString\n   - intArrayToString\n   - warnOnce\n   - ccall\n   - cwrap\n  However, they all still available by default due to a new setting called\n  `LEGACY_RUNTIME` which is enabled by default.  When `LEGACY_RUNTIME` is\n  disabled (which it may be in the future) these symbols would only be included\n  if there were explicitly exported via `EXPORTED_RUNTIME_METHODS` or added to\n  `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`.  `LEGACY_RUNTIME` is disabled by default\n  in `STRICT` mode so this change only effects users of `STRICT` mode. (#17370,\n  #17403)\n- The `run` runtime function is no longer exported by default.  It can be added\n  to `EXPORTED_RUNTIME_METHODS` if needed.\n- The getWasmTableEntry/setWasmTableEntry library function are no longer\n  included by default.  Add them to `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE` or\n  `EXPORTED_RUNTIME_METHODS` if you want to use them outside of JS library code.\n- The type of `time_t` was restored 64-bit after being converted to 32-bit in\n  3.1.11. (#17401)\n\n3.1.15 - 07/01/2022\n-------------------\n- The JS library helper function `hasExportedFunction` has been replaced with\n  `hasExportedSymbol`, which takes an unmangled (no leading underscore) symbol\n  name.\n- Post-link metadata extraction switched from wasm-emscripten-finalize\n  (binaryen) to python code within emscripten.  This change should have no\n  semantic effect, but can temporarily be reverted by setting\n  `EMCC_READ_METADATA=binaryen` in the environment. (#17337)\n- Added a shim for `BigInt64Array` so `-sWASM_BIGINT` can be used in Safari\n  v14. (#17103)\n\n3.1.14 - 06/20/2022\n-------------------\n- emcc now accepts `-print-file-name` and reports the correct library paths in\n  `-print-search-dirs`.\n- `tools/file_packager` no longer generates (or requires) any \"pre-js\" code when\n  running in `--embed-file` mode.  Instead the embedded files are loaded at\n  static constructor time.\n- Emscripten now knows what minimum browser versions the `WASM_BIGINT` feature\n  requires and will automatically set the defaults accordingly. (#17163)\n- Embind now supports binding to functions specified as `noexcept`. (#17140)\n- Weak undefined symbols fixed in dynamic linking. (#17164)\n- Internally, the name of `main` function now gets mangled (by clang) in the\n  same way as with other wasm targets.  This means that within the wasm module\n  the name of the main function can now be `__main_argc_argv`, but, since we\n  still export this to JS as `_main`, this should not be a user-visible change.\n- Use of pkg-config from cmake not longer causes the C++ include path to be\n  broken. (#17137)\n- `emscripten_runtime_keeplive_push()` and `emscripten_runtime_keeplive_push()`\n  are now exposed to native code and can be used to keep the runtime alive\n  without immediately unwinding the event loop (as\n  `emscripten_exit_with_live_runtime()` does). (#17160)\n- The file packager option `--use-preload-cache` now only invalidates the\n  cache if the data contents has changed. (#16807)\n\n3.1.13 - 06/02/2022\n-------------------\n- xlocale.h compatibility header was restored after being removed in 3.1.12.\n\n3.1.12 - 05/25/2022\n-------------------\n- Fix crash, introduced in 3.1.11, which occurred when using pointer types\n  (types ending in `*`) with getValue/setValue library functions. (#17028)\n- Fix possible deadlock in multi-threaded builds that use EXIT_RUNTIME=0 with\n  ASSERTIONS enabled. This was introduced in 3.1.3 as part of #16130. (#17044)\n\n3.1.11 - 05/21/2022\n-------------------\n- The return value of `emscripten_get_compiler_setting` was changed from `int`\n  to `long` so that it is compatible with `MEMORY64`.  The return value of this\n  function sometimes contains a pointer value so `int` is not sufficiently\n  wide under `wasm64`. (#16938)\n- The `EM_BUILD_VERBOSE` environment variable only effects test code these days\n  and therefore was renamed to `EMTEST_BUILD_VERBOSE`. (#16904)\n- compiler-rt updated to LLVM 14. (#16991)\n- libc++ updated to LLVM 14. (#17000)\n- libc++abi updated to LLVM 14. (#16993)\n\n3.1.10 - 05/02/2022\n-------------------\n- Bug fixes\n\n3.1.9 - 04/21/2022\n------------------\n- The `-sSHELL_FILE` setting, which (unlike the --shell-file command line\n  options) we believe was never tested or externally used, has been removed.\n  (#16589)\n- A warning is now issued when passing C++-only settings such\n  `-sEXCEPTION_CATCHING_ALLOWED` when not linking as C++. (#16609)\n- Introduce a new [proxying\n  API](https://emscripten.org/docs/api_reference/proxying.h.html) for proxying\n  work between threads.\n\n3.1.8 - 03/24/2022\n------------------\n- Command line settings (`-s`) are now type checked.  For example, passing a\n  string to a boolean setting will now generate an error (e.g.\n  `-sEXIT_RUNTIME=foo`).  Previously, the value of `foo` would have have been\n  interpreted as non-zero and accepted as valid. (#16539)\n- A warning (limited-postlink-optimizations) was added that gets shown when\n  binaryen optimizations are limited due to DWARF information being requested.\n  Several binaryen passed are not compatible with the preservation of DWARF\n  information. (#16428)\n- Use normalized mouse wheel delta for GLFW 3 in `library_glfw.js`. This changes\n  the vertical scroll amount for GLFW 3. (#16480)\n- The emsdk binaries for macOS now require macOS 10.14 Mojave (or above).\n  Prior versions of emsdk could run on 10.11 (or above), but supporting those\n  older versions recently became harder.\n- The SDL_mixer library can be configured to support MIDIs by passing \"mid\"\n  to the SDL2_MIXER_FORMATS setting. It uses Timidity, and you must provide\n  your own instrument sound files and mount them at \"/etc/timidity\". (#16556)\n\n3.1.7 - 03/07/2022\n-------------------\n- Remove unmaintained ASMFS filesystem backend and associated `-sASMFS`\n  settings.  The new wasmfs filesystem is far enough along that it seems clear\n  that ASMFS will not need to be revived.\n- Fix deadlock in `munmap` that was introduced in 3.1.5.  The deadlock would\n  occur in multi-threaded programs when a partial unmap was requested (which\n  emscripten does not support). (#16413)\n- Added new compiler+linker option -sSHARED_MEMORY=1, which enables targeting\n  a shared WebAssembly.Memory. (#16419)\n- Added new API \"Wasm Workers\", which is an alternative to pthreads for building\n  multithreaded applications, enabled via -sWASM_WORKERS=1 (#12833)\n\n3.1.6 - 02/24/2022\n------------------\n- Remove support for deprecated `EMMAKEN_COMPILER`, `EMMAKEN_CFLAGS`, and\n  `EMMAKEN_NO_SDK`  environment variables.  These are all legacy and redundant\n  in the face of other settings/flags:\n   - `EMMAKEN_COMPILER` -> `LLVM_ROOT` in the config settings\n   - `EMMAKEN_CFLAGS` -> `EMCC_CFLAGS`\n   - `EMMAKEN_NO_SDK` -> standard `-nostdlib` and `-nostdinc` flags\n- emscripten will no longer automatically create a config file if it can't\n  find one in the configured location.  Instead, it will error out and point the\n  user to the `--generate-config` option, in case that is what they want.\n  (#13962)\n\n3.1.5 - 02/17/2022\n------------------\n- Emscripten no longer uses the `allocate()` runtime function.  For backwards\n  compatibility with external JS code we still include this function by default\n  but it will no longer be included in `-sSTRICT` mode.  Usages of this function\n  are generally best replaced with `_malloc`, `stackAlloc` or `allocateUTF8`.\n\n3.1.4 - 02/14/2022\n------------------\n- Due to an llvm change (https://reviews.llvm.org/D118573) some clang flags\n  that did not previously have any effect are now honored (e.g.\n  `-fnew-alignment` and `-fshort-wchar`).\n- llvm dependency updated to 15.0.0 to match upstream. (#16178)\n- The `__EMSCRIPTEN_major__`, `__EMSCRIPTEN_minor__` and `__EMSCRIPTEN_tiny__`\n  macros are now available via the `emscripten/version.h` header file.  For the\n  time being, unless you enable `-sSTRICT`, these are still also defined\n  directly on the command line.  If you use these macros please make sure you\n  include `emscripten/version.h` (or `emscripten.h` which indirectly includes\n  it). (#16147)\n\n3.1.3 - 01/31/2022\n------------------\n- The file packager now supports embedding files directly into wasm memory and\n  `emcc` now uses this mode when the `--embed-file` option is used.  If you\n  use `file_packager` directly it is recommended that you switch to the new mode\n  by adding `--obj-output` to the command line. (#16050)\n- The `--bind` flag used to enable embind has been deprecated in favor of\n  `-lembind`.  The semantics have not changed and the old flag continues to\n  work. (#16087)\n- New setjmp/longjmp support using Wasm EH instructions is added, which is\n  faster and reduces code size. You need a browser that supports Wasm EH spec to\n  use it. The new SjLj support is enabled by `-sSUPPORT_LONGJMP=wasm`. This can\n  be used with Wasm exception support (`-fwasm-exceptions`), but not with\n  Emscripten exception support (`-fexceptions` or\n  `-sDISABLE_EXCEPTION_CATCHING=0`). When using Wasm EH with Wasm SjLj, there is\n  one restriction that you cannot directly call `setjmp` within a `catch`\n  clause. (Calling another function that calls `setjmp` is fine.)\n  (#14976 and #16072)\n\n3.1.2 - 01/20/2022\n------------------\n- A new setting, `POLYFILL`, was added which is on by default but can be disabled\n  (via `-sNO_POLYFILL`) to prevent emscripten from outputting needed polyfills.\n  For default browser targets, no polyfills are needed so this option only has\n  meaning when targeting older browsers.\n- `EVAL_CTORS` has been rewritten and improved. The main differences from before\n  are that it is much more capable (it can now eval parts of functions and not\n  just all or nothing, and it can eval more wasm constructs like globals). It is\n  no longer run by default, so to use it you should build with `-s EVAL_CTORS`.\n  See `settings.js` for more details. (#16011)\n- `wasmX` test suites that are defined in `test_core.py` have been renamed to\n  `coreX` to better reflect where they are defined.  The old suite names such\n  as `wasm2` will continue to work for now as aliases.\n\n3.1.1 - 01/08/2022\n------------------\n- Happy new year!\n- Updated SDL 2 port to upstream version 2.0.18 (from a patched 2.0.10). This\n  includes all downstream patches and many upstream changes.\n- libc++ library updated to llvm-13. (#15901)\n- libc++-abi library updated to llvm-13. (#15904)\n- compiler-rt library updated to llvm-13. (#15906)\n- Added new internal/debugging related environment variable\n  EM_FORCE_RESPONSE_FILES that can be set to 0 to force disable the use of\n  response files, and to 1 to force enable response files. If not set,\n  response files will be used if command lines are long (> 8192 chars). (#15973)\n\n3.1.0 - 12/22/2021\n------------------\n- Emscripten in starting to use ES6 features in its core libraries (at last!).\n  For most users targeting the default set of browsers this is a code size win.\n  For projects targeting older browsers (e.g. `-sMIN_CHROME_VERSION=10`),\n  emscripten will now run closure compiler in `WHITESPACE_ONLY` mode in order to\n  transpile any ES6 down to ES5.  When this automatic transpilation is performed\n  we generate a warning which can be disabled (using `-Wno-transpile`) or by\n  explicitly opting in-to or out-of closure using `--closure=1` or\n  `--closure=0`. (#15763).\n\n3.0.1 - 12/17/2021\n------------------\n- Deprecate `EMMAKEN_CFLAGS` is favor of `EMCC_CFLAGS`.\n- Fixed an issue where user provided --js-library directives would not be\n  processed as the last item after all system provided JS libraries have been\n  added to the build. This fix enables overriding WebGL 2 symbols from user JS\n  libraries.\n\n3.0.0 - 11/22/2021\n------------------\n- A set of internally-unused functions were removed from `parseTools.js`.  While\n  emscripten no longer needs any of these functions, there is slim chance that\n  some external JS library is depending on them.  Please file issues if any such\n  library code is found.  The removed/unused functions are:\n   `removePointing`, `pointingLevels`, `removeAllPointing`, `isVoidType`,\n   `isStructPointerType`, `isArrayType`, `isStructType`, `isVectorType`,\n   `isStructuralType` `getStructuralTypeParts`, `getStructuralTypePartBits`,\n   `isFunctionDef`, `isPossiblyFunctionType`, `isFunctionType`, `getReturnType`,\n   `splitTokenList`, `_IntToHex`, `IEEEUnHex`, `Compiletime.isPointerType`,\n   `Compiletime.isStructType`, `Compiletime.INT_TYPES`, `isType`.\n- The example `shell.html` and `shell_minimal.html` templates no longer override\n  `printErr` on the module object.  This means error message from emscripten and\n  stderr from the application will go to the default location of `console.warn`\n  rather than `console.error`.  This only effects application that use the\n  example shell html files.\n- The version of musl libc used by emscripten was upgraded from v1.1.15 to\n  v1.2.2.  There could be some minor size regressions (or gains) due to changes\n  in upstream musl code but we don't expect anything major.  Since this is a\n  fairly substantial change (at least internally) we are bumping the major\n  version of Emscripten to 3. (#13006)\n- Added support for specifying the text encoding to be used in response filenames\n  by passing the encoding as a file suffix (e.g. \"a.rsp.utf-8\" or \"a.rsp.cp1252\").\n  If not specified, the encoding is autodetected as either UTF-8 or Python\n  default \"locale.getpreferredencoding()\". (#15406, #15292, #15426)\n\n2.0.34 - 11/04/2021\n-------------------\n- Symbols marked as visibility hidden are no longer exported from C/C++\n  code when building with `SIDE_MODULE`, `MAIN_MODULE` or `LINKABLE`.  If you\n  need to export a hidden symbol you can still do so by adding it to\n  EXPORTED_FUNCTIONS.\n\n2.0.33 - 11/01/2021\n-------------------\n- Bug fixes\n\n2.0.32 - 10/19/2021\n-------------------\n- Internal-only library functions can now be marked as `__internal: true` in JS\n  system libraries.  Such symbols should not be used by external libraries and\n  are subject to change.  As of now we generate warning when external libraries\n  depend on the these symbols.\n- Stub functions from `library_syscall.js` and `library.js` were replaced with\n  native code stubs (See `system/lib/libc/emscripten_syscall_stubs.c`).  This\n  should be better for wasm module portability as well as code size.  As part\n  of this change the return value of `popen` was fixed to return NULL rather\n  than -1 and the `getpwnam` family of functions were changed to return an\n  error rather than throw a JavaScript exception (this behaviour matches what\n  the other stub functions do).  As before, the `ALLOW_UNIMPLEMENTED_SYSCALLS`\n  setting controls whether of not these stubs get included at link time, and\n  `STRICT` disables this setting.\n- Emscripten will now warn when linker-only flags are specified in\n  compile-only (`-c`) mode.  Just like with clang itself, this warning can be\n  disabled using the flag: `-Wno-unused-command-line-argument`.\n- Internal symbol names for musl syscalls changed from number-based (e.g.\n  `__syscall22`) to name-based (e.g. `__syscall_open`).  This should not be\n  a visible change except for folks trying to intercept/implement syscalls\n  in native code (#15202).\n- Fixed launcher batch script issues on Windows, and added two env. vars\n  EM_WORKAROUND_PYTHON_BUG_34780 and EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG that\n  can be enabled to work around a Windows Python issue\n  https://bugs.python.org/issue34780 , and a Windows 7 exit code issue (#15146)\n- Support a new CMake property `EMSCRIPTEN_SYSTEM_PROCESSOR` which can be used\n  to override the default value of `CMAKE_SYSTEM_PROCESSOR` set by the\n  toolchain file.\n- Remove support for the `EMIT_EMSCRIPTEN_METADATA` setting.  This setting has\n  been deprecated for some time now and we don't know of any remaining reasons to\n  keep it around.\n- Add JavaScript API `Emval.{toHandle, toValue}` as well as a C++ method\n  `val::as_handle()` to allow passing values between the `val` class and\n  `EM_JS`/ `EM_ASM` JavaScript snippets. (#15279)\n- Added SAFE_HEAP=2 option which tests safe heap behavior for wasm-only builds\n  (allowing unaligned memory accesses, which would not work in Wasm2JS but in\n   wasm would be correct but potentially slow).\n\n2.0.31 - 10/01/2021\n-------------------\n- Bug fixes\n\n2.0.30 - 09/14/2021\n-------------------\n- Bug fixes\n\n2.0.29 - 08/26/2021\n-------------------\n- Bug fixes\n\n2.0.28 - 08/23/2021\n-------------------\n- Added some support for signal handling libc functions (raise, kill,\n  sigaction, sigpending, etc).  We still don't have a way to deliver signals from\n  the outside but these at least now work for sending signals to the current\n  thread (JS context) (#14883).\n- Remove the workaround used in emcmake and emmake that removed directories\n  with sh.exe from PATH on Windows when MinGW Makefiles generator was used.\n  This was needed with CMake versions older than 3.17.0. If you get an error\n  \"sh.exe was found in your PATH\" on Windows, you can either update to CMake\n  3.17.0 or newer, or remove the offending directory from your PATH. See\n  https://github.com/Kitware/CMake/commit/82ddcf0db1d220564145122c3cce25d25ee0e254\n  for more information. (#14930)\n\n2.0.27 - 08/12/2021\n-------------------\n- Added `EM_ASYNC_JS` macro - similar to `EM_JS`, but allows using `await`\n  inside the JS block and automatically integrates with Asyncify without\n  the need for listing the declared function in `ASYNCIFY_IMPORTS` (#9709).\n- Errors that occur on pthreads (e.g. uncaught exception) will now get re-thrown\n  on the main thread rather than simply being logged (#13666).\n\n2.0.26 - 07/26/2021\n-------------------\n- When building ports with the `embuilder` tool some of the names of the\n  libraries have changed (they now match the filenames in the `tools/ports/`\n  directory). For example `sdl-image` is now `sdl_image` (#14737).\n- Undefined data symbols (in static executables) are no longer silently ignored\n  at link time.  The previous behaviour (which was to silently give all\n  undefined data symbols address zero, which could lead to bugs)\n  can be enabled by passing either `-Wl,--allow-undefined` or\n  `-Wl,--unresolved-symbols=ignore-all`.\n- The alignment of `long double`, which is a 128-bit floating-point value\n  implemented in software, is reduced from 16 to 8. The lower alignment allows\n  `max_align_t` to properly match the alignment we use for malloc, which is 8\n  (raising malloc's alignment to achieve correctness the other way would come\n  with a performance regression). (#10072)\n- The `alignMemory` function is now a library function and therefore not\n  included by default.  Debug builds will automatically abort if you try\n  to use this function without including it.  The normal library `__deps`\n  mechanism can be used to include it, or can be added to\n  `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`.\n- dlopen can now load libraries at runtime from the web without preloading\n  or embedding.  This features relies on `ASYNCIFY` to suspend execution until\n  the library is loaded and then continue on as if dlopen was blocking.  For\n  users who don't want to use `ASYNCIFY` (which has a size and runtime cost)\n  there is a async (callback-based) version of the dlopen API available as\n  `emscripten_dlopen()` declared in `emscropten/emscripten.h`.  See\n  `docs/api_reference/emscripten.h.rst` (or the online version) for more\n  details.\n- Constructors, functions and methods bound with Embind can now be `await`ed.\n  When Asyncify is used somewhere in the callstack, previously Embind would\n  return `0` / `null` / `false` / instance with a NULL pointer, making it\n  impossible to wait for the function to actually finish and retrieve its\n  result. Now in those cases it will return a `Promise` instead that will\n  resolve with the function's return value upon completion. (#11890)\n\n2.0.25 - 06/30/2021\n-------------------\n- Support for the 'shell' environment is now disabled by default.  Running under\n  `d8`, `js`, or `jsc` is not something that most emscripten users ever want to\n  do, so including the support code is, more often than not, unnecessary.  Users\n  who want shell support can enable it by including 'shell' in `-s ENVIRONMENT`\n  (#14535).\n- A new setting called `ALLOW_UNIMPLEMENTED_SYSCALLS` was added.  This setting\n  is enabled by default but, if disabled, will generate link-time errors if\n  a program references an unimplemented syscall.  This setting is disabled\n  by default in `STRICT` mode.\n- By default (unless `EXIT_RUNTIME=1` is specified) emscripten programs running\n  under node will no longer call `process.exit()` on `exit()`.  Instead they\n  will simply unwind the stack and return to the event loop, much like they do\n  on the web.  In many cases the node process will then exit naturally if there\n  is nothing keeping the event loop going.\n  Note for users of node + pthreads: Because of the way that threads are\n  implemented under node multi-threaded programs now require `EXIT_RUNTIME=1`\n  (or call `emscripten_force_exit`) in order to actually bring down the process.\n- Drop support for node versions older than v5.10.0.  We now assume the\n  existence of `Buffer.from` which was added in v5.10.0.  If it turns out\n  there is still a need to support these older node versions we can\n  add a polyfil under LEGACY_VM_SUPPORT (#14447).\n\n2.0.24 - 06/10/2021\n-------------------\n- Support `--preload-file` in Node.js. (#11785)\n- System libraries are now passed to the linker internally via `-lfoo` rather\n  than using their full path.  This is in line with how gcc and clang pass system\n  libraries to the linker.  This should not effect any builds unless a project a\n  happens to have, for example, a file called `libc.a` in one of its library\n  paths.  This would have the effect of overriding the system library (as it\n  would with gcc or clang) (#14342).\n- CMake projects (those that either use emcmake or use Emscripten.cmake\n  directly) are new configured to install (by default) directly into the\n  emscripten sysroot.  This means that running `cmake --install` (or running the\n  install target, via `make install` for example) will install resources into\n  the sysroot such that they can later be found and used by `find_path`,\n  `find_file`, `find_package`, etc.  Previously the default was to attempt to\n  install into the host system (e.g `/usr/local`) which is almost always not\n  desirable.  Folks that were previously using `CMAKE_INSTALL_PREFIX` to build\n  their own secondary sysroot may be able to simplify their build system by\n  removing this completely and relying on the new default.\n- Reinstated the warning on linker-only `-s` settings passed when not linking\n  (i.e. when compiling with `-c`).  As before this can be disabled with\n  `-Wno-unused-command-line-argument` (#14182).\n- Standalone wasm mode no longer does extra binaryen work during link. It used\n  to remove unneeded imports, in hopes of avoiding nonstandard imports that\n  could prevent running in WASI VMs, but that has not been needed any more. A\n  minor side effect you might see from this is a larger wasm size in standalone\n  mode when not optimizing (but optimized builds are unaffected). (#14338)\n- You can now explicitly request that an environment variable remain unset by\n  setting its value in `ENV` to `undefined`. This is useful for variables, such\n  as `LANG`, for which Emscripten normally provides a default value.\n\n2.0.23 - 05/26/2021\n-------------------\n- libcxxabi updated to llvm-12. (#14288)\n- libcxx updated to llvm-12. (#14249)\n- compiler-rt updated to llvm-12. (#14280)\n\n2.0.22 - 05/25/2021\n-------------------\n- Fix a crash bug that was present in 2.0.21 with the use of `-g`.  See\n  https://reviews.llvm.org/D102999.\n- wasm-ld will now perform string tail merging in debug string sections as well\n  as regular data sections.   This behaviour can be be disabled with `-Wl,-O0`.\n  This should significantly reduce the size of dwarf debug information in the\n  wasm binary.\n- The experimental SPLIT_MODULE setting now expects the secondary module to be\n  named `<module>.deferred.wasm` instead of `<module>.wasm.deferred`.\n- sendfile.h header removed from musl. (#14248)\n\n2.0.21: 05/18/2021\n------------------\n- Options such as EXPORTED_FUNCTIONS that can take a response file containing\n  list of symbols can now use a simple one-symbol-per-line format.  This new\n  format is much simpler and doesn't require commas between symbols, opening\n  or closing braces, or any kind of escaping for special characters.\n- The WebAssembly linker (`wasm-ld`) now performs string tail merging on any\n  static string data in your program.   This has long been part of the native\n  ELF linker and should not be observable in well-behaved programs.  This\n  behavior can be disabled by passing `-Wl,-O0`.\n- The functions `fork`, `vfork`, `posix_spawn` and `system` now fail with\n  the errno value `ENOSYS` (52) rather than `EAGAIN` (6).  This is more\n  correct, since they will never work and attempting to retry won't help.\n- `EXPORT_ES6` will now emit static URLs for main WebAssembly file as well\n  as for helper Worker used by `-pthread` that can be statically detected\n  by modern bundlers at build time. In particular, you no longer have to set\n  `Module.locateFile` hook and `Module.mainScriptUrlOrBlob` settings -\n  both bundlers and browsers should pick up the required files automatically.\n  Note: this doesn't yet cover other use-cases that emit external files,\n  such as dynamic linking, `--proxy-to-worker`, external memory etc. (#14135)\n- `EXPORT_ES6` can now be used in combination with `-o [filename].html`. (#14165)\n- `EXPORT_ES6` no longer requires setting custom `EXPORT_NAME` too. (#14139)\n- New diagnostics allow Emscripten to issue warnings when using Intel SIMD\n  intrinsics (from xmmintrin.h) which have slow emulations rather than fast\n  WebAssembly equivalents. To enable them, define WASM_SIMD_COMPAT_SLOW\n  in the preprocessor (#14152)\n\n2.0.20: 05/04/2021\n------------------\n- This ChangeLog and the `emscripten-version.txt` file that is checked into\n  the repository now reflect the next, upcoming, release once a release is\n  made.  Previously they would continue to reflect the old release until after\n  we decide to cut the release.  Switching to this method allow for a slightly\n  simpler release process that also allows us to tag a version that contains\n  the correct version information.\n- The version string reported by `-v`/`--version` now includes a `-git` suffix\n  (e.g. `2.0.19-git`) when running from git checkout (to help distinguish\n  unreleased git versions from official releases) (#14092).\n- Temporarily back out new `-Wunused-command-line-argument` warnings introduced\n  in 2.0.19.\n\n2.0.19: 05/04/2021\n------------------\n- Emscripten will now warn when linker-only `-s` settings are specified in\n  compile-only (`-c`) mode.  Just like with clang itself, this warning can be\n  disabled using the flag: `-Wno-unused-command-line-argument`.\n- When building with `-s MAIN_MODULE` emscripten will now error on undefined\n  symbol by default.  This matches the behvious of clang/gcc/msvc.  This\n  requires that your side modules be present on the command line.  If you do not\n  specify your side modules on the command line (either directly or via\n  `RUNTIME_LINKED_LIBS`) you may need to add `-s WARN_ON_UNDEFINED_SYMBOLS=0` to\n  avoid errors about symbol that are missing at link time (but present in your\n  side modules provided at runtime).  We hope that this case is not common and\n  most users are building with side modules listed on the command line (#14060).\n- The `RUNTIME_LINKED_LIBS` setting is now deprecated.  It's better to simply\n  list dynamic library dependencies directly on the command line.\n\n2.0.18: 04/23/2021\n------------------\n- The `makeBigInt` function was removed from the emscripten runtime since it\n  had no internal users.\n- Restored support for --cache command line flag to configure location of the\n  Emscripten cache root directory.\n- `EXTRA_EXPORTED_RUNTIME_METHODS` is deprecated in favor of just using\n  `EXPORTED_RUNTIME_METHODS`.\n- When building with `MAIN_MODULE=2` the linker will now automatically include\n  any symbols required by side modules found on the command line.  This means\n  that for many users of `MAIN_MODULE=2` it should no longer be necessary to\n  list explicit `EXPORTED_FUNCTIONS`.  Also, users of `MAIN_MODULE=1` with\n  dynamic linking (not dlopen) who list all side modules on the command line,\n  should be able to switch to `MAIN_MODULE=2` and get a reduction in code size.\n- When building with `MAIN_MODULE` it is now possible to warn or error on\n  undefined symbols assuming all the side modules are passed at link time.  This\n  means that for many projects it should now be possible to enable\n  `ERROR_ON_UNDEFINED_SYMBOLS` along with `MAIN_MODULE`.\n\n2.0.17: 04/10/2021\n------------------\n- Use of closure compiler (`--closure`) is now supported when using dynamic\n  linking (building with `-s MAIN_MODULE`) (#13880)\n- Specifying `EM_CONFIG` inline (python code in the environment variable itself)\n  is no longer supported (#13855).  This has been long deprecated but finally\n  completely removed.\n- Deprecate `-g4`, which is a little confusing as it does not do more than `-g3`\n  but instead emits source maps instead of DWARF. `-g4` will now warn. A new\n  flag `-gsource-map` enables source maps without warning.\n- In order to behave more like clang and gcc, emscripten no longer\n  supports some nonstandard methods of library lookup (that worked\n  unintentionally and were untested and not documented):\n    1. Linking with `-llibc` rather than `-lc` will no longer work.\n    2. Linking a library called `foo.a` via `-lfoo` will no longer work.\n       (libraries found via `-l` have to start with `lib`)\n- Use LLVM's new pass manager by default, as LLVM does. This changes a bunch of\n  things about how LLVM optimizes and inlines, so it may cause noticeable\n  changes in compile times, code size, and speed, either for better or for\n  worse. You can use the old pass manager (until LLVM removes it) by passing\n  `-flegacy-pass-manager` (and `-Wl,--lto-legacy-pass-manager` when doing LTO)\n  (note however that neither workaround affects the building of system\n  libraries, unless you modify emscripten or build them manually). (#13427)\n- Removed use of Python multiprocessing library because of stability issues.\n  Added a new environment variable `EM_PYTHON_MULTIPROCESSING=1` that can be set\n  to revert back to using Python multiprocessing, in case there are reports of\n  regressions (that variable is intended to be temporary). (#13493)\n- Binaryen now always inlines single-use functions. This should reduce code size\n  and improve performance. If you prefer the old default, you can get that with\n  `-sBINARYEN_EXTRA_PASSES=--one-caller-inline-max-function-size=1` (#13744).\n- Fix generating of symbol files with `--emit-symbol-map` for JS targets.\n  When `-s WASM=2` is used. Two symbols are generated:\n    - `[name].js.symbols` - storing Wasm mapping\n    - `[name].wasm.js.symbols` - storing JS mapping\n  In other cases a single `[name].js.symbols` file is created.\n\n2.0.16: 03/25/2021\n------------------\n- Lists that are passed on the command line can now skip the opening an closing\n  braces, allowing for simpler, more readable settings.  e.g.\n    `-s EXPORTED_FUNCTIONS=foo,bar`\n- Remove/deprecate no longer used `--llvm-opts` command line option.  Any\n  arguments not processed by emcc will be passed through to clang directly\n  these days.\n- Values returned from `sysconf` now more closely match the definitions found in\n  header files and in upstream musl (#13713).\n- `DISABLE_EXCEPTION_CATCHING=2` is now deprecated since it can be inferred from\n  the presence of the `EXCEPTION_CATCHING_ALLOWED` list.  This makes\n  `DISABLE_EXCEPTION_CATCHING` a simple binary option (0 or 1) which defaults to\n  0 which will be set to 1 internally if `EXCEPTION_CATCHING_ALLOWED` list is\n  specified.\n- Values returned from `pathconf` now match the definitions found in header files\n  and/or upstream musl:\n    _PC_LINK_MAX 3200 -> 8\n    _PC_SYNC_IO -1 -> 1\n    _PC_REC_INCR_XFER_SIZE -1 -> 4096\n    _PC_REC_MAX_XFER_SIZE -1 -> 4096\n    _PC_SYMLINK_MAX -1 -> 255\n- Added support for wrapping emcc and em++ via ccache: install Emscripten port\n  of ccache via emsdk, or from https://github.com/juj/ccache/tree/emscripten,\n  and run explicitly with \"ccache emcc ...\" after installing, or automatically\n  just with \"emcc ...\" after activating ccache via emsdk (#13498).\n- Added support to use a custom set of substitution characters . # and ? to\n  ease passing arrays of C symbols on the command line to ASYNCIFY_* settings.\n  (#13477)\n- In MINIMAL_RUNTIME build mode, errno support will now be disabled by default\n  due to the code size that it adds. (MINIMAL_RUNTIME=1 implies SUPPORT_ERRNO=0\n  by default) Pass -s SUPPORT_ERRNO=1 to enable errno support if necessary.\n- Using EM_ASM and EM_JS in a side module will now result in an error (since\n  this is not implemented yet).  This could effect users were previously\n  inadvertently including (but not actually using) EM_ASM or EM_JS functions in\n  side modules (#13649).\n- Remove dependency on Uglify by finishing the rewrite of passes to acorn\n (#13636, #13621).\n- Primary development branch switched from `master` to `main`.\n\n2.0.15: 03/05/2021\n------------------\n- Calls to `newlocale` (and `new std::locale` in C++) with arbitrary names will\n  now succeed.  This is the behaviour of musl libc which emscripten had\n  previously inadvertently disabled.\n- System libraries are now compiled with debug info (`-g`).  This doesn't\n  affect release builds (builds without `-g`) but allows DWARF debugging of\n  types defined in system libraries such as C++ STL types (#13078).\n- uname machine field is now either wasm32 or wasm64 instead of x86-JS (#13440)\n- Several pthreads exit-related fixes (#12985) (#10524).\n- Fix IDBFS syncing with existing directories (#13574).\n- Add libmodplug port and allow mod files to be played in SDL2 (#13478).\n- `emscripten_GetProcAddress` is now part of `libGL`. Normally the change is not\n  noticeable, unless you build in `STRICT` mode and do not already have `-lGL`\n  to link in that library. If not, add `-lGL`. (#13524)\n\n2.0.14: 02/14/2021\n------------------\n- Add new setting: `REVERSE_DEPS`. This can be used to control how emscripten\n  decides which reverse dependencies to include.  See `settings.js` for more\n  information.  The default setting ('auto') is the traditional way emscripten\n  has worked in the past so there should be no change unless this options is\n  actually used.  This option partially replaces the `EMCC_ONLY_FORCED_STDLIBS`\n  environment variable which (among other things) essentially had the effect of\n  setting `REVERSE_DEPS` to be 'all'.\n- Clang now performs loop unrolling when targeting WebAssembly at -O2 and\n  higher. It can be disabled using `-fno-unroll-loops`.\n\n2.0.13: 01/19/2021\n------------------\n- Remove unused `Browser.safeSetInterval` and `Browser.safeCallback`.  These\n  had no callers in emscripten itself or any testing.  If there are users of\n  these functions we could re-enable them with some testing.\n- Fix race condition when running many emcc processes after clearing the cache.\n  The processes would race to run the sanity checks and could interfere with\n  each other (#13299).\n- Emscripten now builds a complete sysroot inside the EM_CACHE directory.\n  This includes the system headers which get copied into place there rather\n  than adding a sequence of extra include directories.\n- Added support for -s MALLOC=emmalloc when -s MAXIMUM_MEMORY is more than 2GB.\n  (#13258)\n- Add back support for calling the legacy dynCall_sig() API to invoke function\n  pointers to wasm functions from JavaScript. Pass -s DYNCALLS=1\n  to include that functionality in the build. This fixes a regression that\n  started in Aug 31st 2020 (Emscripten 2.0.2) in #12059. Also implement\n  support for dynCall() in MINIMAL_RUNTIME builds. (#13296)\n- `SDL2_ttf` now uses upstream compiled with `TTF_USE_HARFBUZ` flag.\n- The system for linking native libraries on demand (based on the symbols\n  present in input object files) has been removed.  Libraries such as libgl,\n  libal, and libhtml5 are now included on the link line by default unless\n  `-s AUTO_NATIVE_LIBRARIES=0` is used.  This should not effect most builds\n  in any way since wasm-ld ignores unreferenced library files.  Only users\n  of the `--whole-archive` linker flag (which is used when `MAIN_MODULE=1` is\n  set) should be effected.\n\n2.0.12: 01/09/2021\n------------------\n- `emscripten/vr.h` and other remnants of WebVR support removed. (#13210, which\n  is a followup to #10460)\n- Stop overriding CMake default flags based on build type. This will\n  result in builds that are more like CMake does on other platforms. You\n  may notice that `RelWithDebInfo` will now include debug info (it did not\n  before, which appears to have been an error), and that `Release` will\n  use `-O3` instead of `-O2` (which is a better choice anyhow). (#13083)\n\n2.0.11: 12/17/2020\n------------------\n- `emcc -v` no longer forces the running the sanity checks.  Sanity checks\n  are always run on first use or can be forced with `--check` or by setting\n  `EMCC_DEBUG` is set in the environment.\n- An upstream LLVM regression with global initializer linking has been fixed\n  (#13038).\n- Remove a racy unneeded assertion about async dynamic linking (#13060).\n\n2.0.10: 12/04/2020\n------------------\n- Fix handling of exit() in pthreads. (#12933)\n- Added support for C11 thread API. (#9243)\n- The WebAssembly memory used by emscripten programs is now, by default, created\n  in the wasm file and exported to JavaScript.  Previously we could create the\n  memory in JavaScript and import it into the wasm file.  The new\n  `IMPORTED_MEMORY` setting can be used to revert to the old behaviour.\n  Breaking change: This new setting is required if you provide a runtime\n  value for `wasmMemory` or `INITIAL_MEMORY` on the Module object.\n- Internally, emscripten now uses the `--sysroot` argument to point clang at\n  it headers.  This should not effect most projects but has a minor effect the\n  order of the system include paths: The root include path\n  (`<emscritpen_root>/system/include`) is now always last in the include path.\n- Fix JS pthreads proxying + WASM_BIGINT (#12935)\n- Optimize makeDynCall to use dynCall_xx function directly where needed (#12741)\n\n2.0.9: 11/16/2020\n-----------------\n- dlopen, in conformace with the spec, now checks that one of either RTDL_LAZY\n  or RTDL_NOW flags ar set.  Previously, it was possible set nether of these\n  without generating an error.\n- Allow `-lSDL2_mixer` to just work. (Others like `-lSDL2` always worked, but\n  for `SDL2_mixer` things were broken because we build multiple variations of\n  that library.) That link flag is now the same as `-s USE_SDL2_MIXER=2`.\n- Stack state is no longer stored in JavaScript.  The following variables have\n  been replaced with native functions in `<emscripten/stack.h>`:\n  - STACK_BASE\n  - STACK_MAX\n  - STACKTOP\n  - TOTAL_STACK\n- The ABI used for importing symbol by address in dynamic linking (MAIN_MODULE +\n  SIDE_MODULE) is now the same as the ABI used by llvm and wasm-ld.  That is,\n  symbol addresses are imported from the 'GOT.mem' and 'GOT.func' pseudo\n  modules.  As one side effect of this change it is now required that JavaScript\n  functions that are imported by address are now required to have a `__sig`\n  specified in the library JavaScript file.\n- `MODULARIZE` + `WASM_ASYNC_COMPILATION=0`, that is, modularize mode but with\n  async compilation turned off, so that startup is synchronous, now returns the\n  Module object from the factory function (as it would not make sense to return\n  a Promise without async startup). See #12647\n- Added experimental support for using emscripten as a post link tool.  In this\n  case the input to emscripten is a single wasm file (for example the output of\n  `wasm-ld`).  When emcc is run with `--post-link` it will take a wasm file as\n  input that perform all the normal post link steps such as finalizing and\n  optimizing the wasm file and generating the JavaScript and/or html that will\n  run it.\n- Added emulation support and a build time warning for calling Wasm function\n  pointers from JS library files via the old syntax\n        {{{ makeDynCall('sig') }}} (ptr, arg1, arg2);\n  that was broken on Aug 31st 2020 (Emscripten 2.0.2). A build warning will now\n  be emitted if the old signature is used. Convert to using the new signature\n        {{{ makeDynCall('sig', 'ptr') }}} (arg1, arg2);\n  instead.\n\n2.0.8: 10/24/2020\n-----------------\n- `-s ASSERTIONS=2` now implies `-s STACK_OVERFLOW_CHECK=2`. Previously only\n  `-s ASSERTIONS=1` implied `-s STACK_OVERFLOW_CHECK=1`.\n- Dynamic linking (MAIN_MODULE + SIDE_MODULE) now produces wasm binaries that\n  depend on mutable globals.  Specifically the stack pointer global is mutable\n  and shared between the modules. This is an ABI change for dynamic linking.\n  (#12536)\n- emcc now accepts `--arg=foo` as well as `--arg foo`.  For example\n  `--js-library=file.js`.\n- Reject promises returned from the factory function created by using the\n  MODULARIZE build option if initialization of the module instance fails\n  (#12396).\n- emrun: Passing command line flags (arguments that start with `-`) to the\n  program bring run now requires a `--` on the command line to signal the\n  end of `emrun` arguments. e.g:\n    `emrun filename.html -- --arg-for-page`\n  This is standard behaviour for command line parsing and simplifies the\n  emrun logic.\n\n2.0.7: 10/13/2020\n-----------------\n- Don't run Binaryen postprocessing for Emscripten EH/SjLj. This lets us avoid\n  running `wasm-emscripten-finalize` just for C++ exceptions or longjmp. This\n  is an ABI change. (#12399)\n- Run `SAFE_HEAP` on user JS code using a new Acorn pass, increasing the\n  coverage of those tests to all JS in the output (#12450).\n- `EM_LOG_DEMANGLE` is now deprecated.  Function names shown in wasm backtraces\n  are never mangled (they are either missing or demangled already) so demangled\n  is not possible anymore.\n- In STRICT mode we no longer link in C++ mode by default.  This means if you\n  are building a C++ program in STRICT mode you need to link via `em++` rather\n  than `emcc`.  This matches the behaviour of gcc and clang.\n- IDBFS now persists files whenever their timestamp changes; previously it acted\n  on sync only if the timestamp increased and ignored the file changes otherwise.\n- When `-s SUPPORT_LONGJMP=0` is passed to disable longjmp, do not run the LLVM\n  wasm backend path that handles longjmp. Before this only affected linking, and\n  now the flag gives you the ability to affect codegen at compile time too. This\n  is necessary if one does not want any invokes generated for longjmp at all.\n  (#12394)\n\n2.0.6: 10/02/2020\n-----------------\n- Add new `COMPILER_WRAPPER` settings (with corresponding `EM_COMPILER_WRAPPER`\n  environment variable.  This replaces the existing `EMMAKEN_COMPILER`\n  environment variable which is deprecated, but still works for the time being.\n  The main differences is that `EM_COMPILER_WRAPPER` only wraps the configured\n  version of clang rather than replacing it.\n- ASAN_SHADOW_SIZE is deprecated. When using AddressSanitizer, the correct\n  amount of shadow memory will now be calculated automatically.\n\n2.0.5: 09/28/2020\n-----------------\n- Fix a rare pthreads + exceptions/longjmp race condition (#12056).\n- Add `WEBGL_multi_draw_instanced_base_vertex_base_instance` bindings (#12282).\n- Fix a rare pthreads main thread deadlock (that worsened in 2.0.2, but existed\n  before). (#12318)\n- The WebAssembly table is now created and exported by the generated wasm\n  module rather then constructed by the JS glue code.  This is an implementation\n  detail that should not affect most users, but reduces code size. (#12296)\n- Add `getentropy` in `sys/random.h`, and use that from libc++'s\n  `random_device`. This is more efficient, see #12240.\n- Fixed `ABORT_ON_WASM_EXCEPTIONS` to work with the recent dynCall changes where\n  functions can be called via the WASM table directly, bypassing WASM exports\n  (#12269).\n- Add `ASYNCIFY_ADVISE` to output which functions have been instrumented for\n  Asyncify mode, and why they need to be handled. (#12146)\n\n2.0.4: 09/16/2020\n-----------------\n- First release with Bazel support.\n- Stop including `malloc` and `free` by default. If you need access to them from\n  JS, you must export them manually using\n  `-s EXPORTED_FUNCTIONS=['_malloc', ..]`.\n- Stop running Binaryen optimizations in `-O1`. This makes `-O1` builds a little\n  larger but they compile a lot faster, which makes more sense in a \"compromise\"\n  build (in between `-O0` and higher optimization levels suitable for release\n  builds). (#12178)\n- Add `ERROR_ON_WASM_CHANGES_AFTER_LINK` option that errors if we need to do\n  any work in `wasm-emscripten-finalize` or `wasm-opt` after linking. This\n  can verify the link is maximally fast and also does no DWARF rewriting.\n  (#12173)\n\n2.0.3: 09/10/2020\n-----------------\n- Breaking changes to calling Wasm function pointers from JavaScript:\n  1. It is no longer possible to directly call dynCall_sig(funcPtr, param) to\n    call a function pointer from JavaScript code. As a result, JavaScript code\n    outside all JS libraries (pre-js/post-js/EM_ASM/EM_JS/external JS code) can no\n    longer call a function pointer via static signature matching dynCall_sig, but\n    must instead use the dynamic binding function\n\n       dynCall(sig, ptr, args);\n\n    This carries a significant performance overhead. The function dynCall is not\n    available in -s MINIMAL_RUNTIME=1 builds.\n  2. old syntax for calling a Wasm function pointer from a JS library file used\n     to be\n\n      {{{ makeDynCall('sig') }}} (ptr, arg1, arg2);\n\n    This syntax will no longer work, and until Emscripten <2.0.9 causes\n    a runtime error TypeError: WebAssembly.Table.get(): Argument 0 must be\n    convertible to a valid number.\n\n    New syntax for calling Wasm function pointers from JS library files is\n\n      {{{ makeDynCall('sig', 'ptr') }}} (arg1, arg2);\n\n  See PR #12059 for details.\n- The native optimizer and the corresponding config setting\n  (`EMSCRIPTEN_NATIVE_OPTIMIZER`) have been removed (it was only relevant to\n  asmjs/fastcomp backend).\n- Remove `ALLOC_DYNAMIC` and deprecate `dynamicAlloc`. (#12057, which also\n  removes the internal `DYNAMICTOP_PTR` API.)\n- Add `ABORT_ON_WASM_EXCEPTIONS` which will abort when an unhandled WASM exception\n  is encountered. This makes the Emscripten program behave more like a native\n  program where the OS would terminate the process and no further code can be\n  executed when an unhandled exception (e.g. out-of-bounds memory access) happens.\n  Once the program aborts any exported function calls will fail with a \"program\n  has already aborted\" exception to prevent calls into code with a potentially\n  corrupted program state.\n- Use `__indirect_function_table` as the import name for the table, which is\n  what LLVM does.\n- Remove `BINARYEN_SCRIPTS` setting.\n- The default output format is now executable JavaScript.  Previously we would\n  default to output objecting files unless, for example, the output name ended\n  in `.js`.  This is contrary to behaviour of clang and gcc.  Now emscripten\n  will always produce and executable unless the `-c`, `-r` or `-shared` flags\n  are given.  This is true even when the name of the output file ends in `.o`.\n  e.g, `emcc foo.c -o foo.o` will produce a JavaScript file called `foo.o`.\n  This might surprise some users (although it matches the behavior of existing\n  toolchains) so we now produce a warning in this case.\n\n2.0.2: 09/02/2020\n-----------------\n- Simplify Fetch C API error handling: we used to check if the error code was\n  0 and switch that to 404, but that only really helps `file://` URLs, which\n  are not very useful for testing anyhow for other reasons (like not working\n  in chrome), and it made things more complex. The behavior has been changed\n  to be simpler and just leave the browser's error code as it is.\n- Enable `--no-heap-copy` file packager option by default, and remove the old\n  default behavior entirely. That is the behavior we should have had from the\n  beginning as it is more memory-efficient. (#12027)\n- `--no-entry` is now required in `STANDALONE_WASM` mode when building a reactor\n  (application without a main function).  Previously exporting a list of\n  functions that didn't include `_main` would imply this.  Now the list of\n  `EXPORTED_FUNCTIONS` is not relevant in the deciding the type of application\n  to build. (#12020)\n- Allow polymorphic types to be used without RTTI when using embind. (#10914)\n- Do not remove `__original_main` using `--inline-main`. We used to do this\n  so that it didn't show up in stack traces (which could be confusing because\n  it is added by the linker - it's not in the source code). But this has had\n  several downsides, so we are stopping that now. This does not affect program\n  behavior, unless you look at the wasm internals. However, one noticeable\n  effect is that if you use `ASYNCIFY_ADD` or `ASYNCIFY_ONLY` then you may need\n  to add `__original_main` to there (since you are doing manual fine-tuning of\n  the list of functions, which depends on the wasm's internals). Note that this\n  should not matter in `-O2+` anyhow as normal inlining generally removes\n  `__original_main`. (#11995)\n\n2.0.1: 08/21/2020\n-----------------\n- Change the default value of `STACK_OVERFLOW_CHECK` in builds with `ASSERTIONS`\n  from 2 to 1. This means that plain debug builds (`-O0`, which enables\n  `ASSERTIONS`) do not have the most expensive stack checks on by default. You\n  can still add them with `-s STACK_OVERFLOW_CHECK=2`.\n- Remove the `RESERVED_FUNCTION_POINTERS` setting, which is no longer needed as\n  we have `ALLOW_TABLE_GROWTH`. The old option allowed a fixed number of\n  functions to be added to the table, while the new one allows an unlimited\n  number. (We needed the old option for fastcomp, which could not support\n  growth.) The old setting is mapped to the new one, so that building with\n  `-s RESERVED_FUNCTION_POINTERS=K` for any `K > 0` will simply turn on\n  table growth. The only noticeable effect of this is that you will be able to\n  add an unlimited amount of functions and not just `K`.\n\n2.0.0: 08/10/2020\n-----------------\n- First release that only supports the new upstream wasm backend (which has been\n  the default for a long time) and no longer supports the old fastcomp backend.\n  (#11319)\n- Python2 is no longer supported by Emscripten.  Emsdk now includes a bundled\n  copy of Python3 on both macOS and Windows.  This means that only non-emsdk\n  users and linux users should be affected by this change.\n- Store exceptions metadata in wasm memory instead of JS. This makes exception\n  handling almost 100% thread-safe. (#11518)\n\n1.40.1: 08/01/2020\n------------------\n- Last release that still has optional support for the old fastcomp backend.\n  The new upstream backend, which has been the default for a long time, will\n  be the only one supported from 2.0.0 and onward (#11319).\n- Fix the WebGL2 regression in 1.40.0 due to #11738 (#11780).\n- If input files don't have a known extension assume they are object files\n  (linker inputs) rather then source files.  This matches gcc/clang behaviour.\n  See #10560.\n\n1.40.0: 07/30/2020\n------------------\n- This release contains a WebGL2 regression due to #11738.\n- The `EM_CONFIG` environment variable and `--em-config` command line option no\n  longer support a literal python string. Instead the name of a config file is\n  required. Since all config file settings are individually override-able using\n  `EM_FOO` this should be enough.\n- Running emscripten under python2 is now deprecated.  It will show up as a\n  warning (which can be disabled with `-Wno-deprecated`).  Please update to\n  python3 as we hope to remove support completely in the next release.\n\n1.39.20: 07/20/2020\n-------------------\n- Remove the `--save-bc` command line option.  This was specific to fastcomp,\n  which is deprecated, and for debugging purposes we already have `EMCC_DEBUG`\n  which saves all intermediate files.\n- It is now an error if a function listed in the `EXPORTED_FUNCTIONS` list is\n  missing from the build (can be disabled via `-Wno-undefined`)\n  (ERROR_ON_UNDEFINED_SYMBOLS and WARN_ON_UNDEFINED_SYMBOLS no longer apply\n  to these symbols which are explicly exported).\n- Support for pthreads with wasm2js (`WASM=0`; #11505).\n- Rename `emscripten/math.h` to `emscripten/em_math.h` because if a user adds\n  `emscripten/` as an include path with `-I`, that can override libc math.h,\n  which leads to very confusing errors.\n\n1.39.19: 07/07/2020\n-------------------\n- In standalone mode make `main` mandatory by default (#11536). To build a\n  library (\"reactor\"), use `--no-entry`. The compiler will suggest that if\n  `main` is not present.\n- Automatically resume AudioContexts on user input in SDL and OpenAL (#10843).\n- Asyncify now does liveness analysis to find which locals to save\n  (Binaryen#2890).\n- Settings on the command line no longer require a space between the `-s` and\n  the name of the setting.   For example, `-sEXPORT_ALL` is now equivalent to\n  `-s EXPORT_ALL`.\n- Rename `EXCEPTION_CATCHING_WHITELIST` to `EXCEPTION_CATCHING_ALLOWED`. The\n  functionality is unchanged, and the old name will be allowed as an alias\n  for a few releases to give users time to migrate.\n- Add support for the new add-list in Asyncify and update existing list names\n  following the updates in Binaryen, so that now we have `ASYNCIFY_ADD` to\n  add a function, `ASYNCIFY_REMOVE` to remove one (previously this was\n  called `ASYNCIFY_BLACKLIST`), and `ASYNCIFY_ONLY` to set a list of the\n  only functions to instrument and no others (previously this was called\n  `ASYNCIFY_WHITELIST`). The updated lists also handle indirect calls properly,\n  so that if you use `ASYNCIFY_IGNORE_INDIRECT` and then add (using either the\n  add-list or the only-list) all the functions that are on the stack when\n  pausing, then things will work (for more, see\n  https://github.com/WebAssembly/binaryen/pull/2913).\n\n1.39.18: 06/12/2020\n-------------------\n- Disable `LIBCXX_ABI_OPTIMIZED_FUNCTION` which is an ABI change in libc++\n  (changing the layout of the `std::function` object) (#11403).\n- New `WASM2C` option that integrates with wabt's wasm2c tool in order to\n  compile everything into a single C file (#11213).\n\n1.39.17: 06/05/2020\n-------------------\n- Use Promise polyfill for MODULARIZE when supporting legacy browsers. (#11320)\n- Fix minification of wasm2js output when using --emit-symbol-map. (#11279)\n- On first use, emscripten creates a sample config file.  This config file\n  is now created in the emscripten directory by default.  The traditional\n  `~/.emscripten` config file in the `$HOME` directory is still supported and\n  the sample config will still be written there in the case that the emscripten\n  root is read-only.\n- The default location for downloaded ports is now a directory called \"ports\"\n  within the cache directory.  In practice these means by default they live\n  in `cache/ports` inside the emscripten source directory.  This can be\n  controlled by setting the location of the cache directory, or for even more\n  fine grained control the `EM_PORTS` environment variable and the `PORTS`\n  config setting can be used.\n- Added support for compiling SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE 4.2 and\n  128-bit wide AVX intrinsics, emulated on top of Wasm SIMD instruction set.\n  (#11193, #11243, #11290, #11327). Pass -msimd128 -msse<version> to enable\n  targeting SSE.\n- Removed obsolete SIMD.js support (-s SIMD=1). Use -msimd128 to target Wasm\n  SIMD. (#11180)\n- Add warning about fastcomp deprecation (can be disabled via `-Wno-fastcomp`).\n- The mmap method of JavaScript filesystem drivers (based on library_fs.js) no\n  longer takes a target memory.  It's safer/cleaner/smaller to assume the target\n  is the global memory buffer.\n- Remove emterpreter and `EMTERPRETIFY` settings.  Emterpreter has largely\n  been replaced by asyncify and is fastcomp only so due for removing in\n  the near future anyway.\n- Upgrade various musl string functions to 1.2 to fix aliasing issues. (#11215)\n\n1.39.16: 05/15/2020\n-------------------\n- Add Math C API for direct access to JavaScript Math object (#11151).\n- Address Sanitizer support now includes JavaScript as well, that is, memory\n  access of HEAP\\* arrays is checked by ASan. That allows errors to be found if\n  JS glue code does something wrong like forget to shift a pointer. To use this,\n  just build with ASan normally, `-fsanitize=address` at link (#11147).\n- Fix embind string conversions in multithreaded builds (#10844).\n- `ALLOW_MEMORY_GROWTH` used to silently disable `ABORTING_MALLOC`. It now\n  just changes the default, which means you can pass `-s ABORTING_MALLOC=1` to\n  override the default, which was not possible before. (If you pass the flag\n  and don't want that behavior, stop passing the flag.) (#11131)\n- Change the factory function created by using the `MODULARIZE` build option to\n  return a Promise instead of the module instance. That is, beforehand\n\n        Module()\n\n  would return an instance (which was perhaps not ready yet if startup was\n  async). In the new model, that returns a Promise which you can do `.then` or\n  `await` on to get notified when the instance is ready, and the callback\n  receives the instance. Note that both before and after this change\n  doing `Module()` creates and runs an instance, so the only change is\n  the return value from that call.\n  This fixes some long-standing bugs with that option which have been reported\n  multiple times, but is a breaking change - sorry about that. To reduce the\n  risk of confusing breakage, in a build with `ASSERTIONS` we will show a clear\n  warning on common errors. For more, see detailed examples for the current\n  usage in `src/settings.js` on `MODULARIZE`. (#10697)\n- A new `PRINTF_LONG_DOUBLE` option allows printf to print long doubles at full\n  float128 precision. (#11130)\n- `emscripten_async_queue_on_thread` has been renamed to\n  `emscripten_dispatch_to_thread` which no longer implies that it is async -\n  the operation is in fact only async if it is sent to another thread, while it\n  is sync if on the same one. A new `emscripten_dispatch_to_thread_async`\n  function is added which is always async.\n- The emscripten cache now lives in a directory called `cache` at the root\n  of the emscripten tree by default.  The `CACHE` config setting and the\n  `EM_CACHE` environment variable can be used to override this (#11126).\n- Honor `CACHE` setting in config file as an alternative to `EM_CACHE`\n  environment variable.\n- Remove `--cache` command line arg.  The `CACHE` config setting and the\n  `EM_CACHE` environment variable can be used to control this.\n- Compiling to a file with no suffix will now generate an executable (JS) rather\n  than an object file.  This means simple cases like `emcc -o foo foo.c` do the\n  expected thing and generate an executable.\n- System libraries such as libc and libc++ are now included by default at\n  link time rather than selectively included based on the symbols used in the\n  input object files.  For small programs that don't use any system libraries\n  this might result in slightly slower link times with the old fastcomp\n  backend.  In order to exclude these libraries build with `-nostdlib` and/or\n  `-nostdlib++`.\n\n1.39.15: 05/06/2020\n-------------------\n- Add `--extern-pre-js` and `--extern-post-js` emcc flags. Files provided there\n  are prepended/appended to the final JavaScript output, *after* all other\n  work has been done, including optimization, optional `MODULARIZE`-ation,\n  instrumentation like `SAFE_HEAP`, etc. They are the same as prepending/\n  appending those files after `emcc` finishes running, and are just a convenient\n  way to do that. (For comparison, `--pre-js` and `--post-js` optimize that code\n  together with everything else, keep it in the same scope if running\n  `MODULARIZE`, etc.).\n- Stop defining `FE_INEXACT` and other floating point exception macros in libc,\n  since we don't support them. That also prevents musl from including code using\n  pragmas that don't make sense for wasm. Ifdef out other uses of those pragmas\n  as well, as tip of tree LLVM now fails to compile them on wasm. (#11087)\n- Update libcxx and libcxxabi to LLVM 10 release branch (#11038).\n- Remove `BINARYEN_PASSES` setting (#11057). We still have\n  `BINARYEN_EXTRA_PASSES` (the removed setting completely overrides the set\n  of passes from the command line, which doesn't make much sense as some of\n  them are mandatory like setting the sbrk ptr).\n- Remove `MODULARIZE_INSTANCE` build option (#11037). This was a seldom used\n  option that was complicating the logic for `MODULARIZE`. Module instances can\n  be created by using `MODULARIZE` and calling the factory function explicitly.\n  See the new `--extern-post-js` option added in this release, which can help\n  code that used `MODULARIZE_INSTANCE` (you can add an extern post js which\n  does `Module = Module();` for example).\n\n1.39.14: 05/01/2020\n-------------------\n- Update SDL2 to latest in ports, which has recently been updated to include\n  upstream 2.0.10.\n- Add warning on use of `EMTERPRETIFY` which is soon to be removed.\n- Emscripten can now compile assembly files in llvm's .s/.S file format.\n- Remove test-only environment variable handling for `EMCC_LEAVE_INPUTS_RAW`.\n  The two uses cases in our test code were covered by the `-nostdlib` option.\n- Remove untested `CONFIGURE_CC`.  This could be used to override the underlying\n  compiler used in emcc/em++ but only during configure tests.  There are other\n  ways to control/fake the detected configure features that don't require such\n  monkey patching. For example setting defaults via a site file:\n  https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Site-Defaults.html\n- Remove undocumented and untested config settings: `COMPILER_OPTS`.  This was\n  a global setting in the emscripten config file that would inject extra\n  compiler options.\n- Allow spaces in a path to Python interpreter when running emscripten from Unix\n  shell (#11005).\n- Support atexit() in standalone mode (#10995). This also fixes stdio stream\n  flushing on exit in that mode.\n\nv1.39.13: 04/17/2020\n--------------------\n- Support for WebAssembly BigInt integration with a new `WASM_BIGINT` flag. With\n  that the VM will use a JS BigInt for a wasm i64, avoiding the need for JS\n  legalization. See #10860.\n- Add another value for ENVIRONMENT named 'webview' - it is a companion\n  option for 'web' and enables some additional compatibility checks\n  so that generated code works both in normal web and in a webview like Cordova.\n  See #10846\n\nv1.39.12: 04/09/2020\n--------------------\n- Pass linker flags directly to wasm-ld by default.  We still filter out certain\n  flags explicitly.  If there are other flags that it would be useful for us\n  to ignore we can add them to the list of ignored flags.\n- Optionally support 2GB+ heap sizes. To do this we make the JS code have unsigned\n  pointers (we need all 32 bits in them now), which can slightly increase code\n  size (>>> instead of >>). This only happens when the heap size may be over\n  2GB, which you must opt into explicitly, by setting `MAXIMUM_MEMORY` to a\n  higher value (i.e. by default you do not get support for 2GB+ heaps).\n  See #10601\n- `--llvm-lto` flag is now ignored when using the upstream llvm backend.\n  With the upstream backend LTO is controlled via `-flto`.\n- Require format string for emscripten_log.\n- Program entry points without extensions are now shell scripts rather than\n  python programs. See #10729.  This means that `python emcc` no longer works.\n  However `emcc`, `emcc.py` and `python emcc.py` all continue to work.\n  The reason for this change is that `#!/usr/bin/env python` is no longer\n  portable since the python symlink was dropped from Ubuntu 20.04.\n- New EM_IMPORT macro to mark C/C++ symbols as imported from outside the module\n  (i.e. imported from JS).  Currently we still default to assuming that *all*\n  undefined symbols can come from JS, but in the future we hope to mark such\n  symbols explicitly to allow the linker to report on genuinely undefined\n  symbols.\n- Dynamic linking optimizations: Stop emitting unnecessary `fp$` and `g$`\n  accessors in main modules, possible in Binaryen thanks to ensuring function\n  table indexes are unique (#10741).\n- New `JS_MATH` option to use `Math.*` in JS instead of compiled musl (#10821).\n- Pass `Module` to Module callback functions like `Module.preRun` (#10777).\n- Support not having ports, for packagers of emscripten that don't want\n  them (#10810).\n- Rename syscalls to have meaningful names (#10750).\n\nv1.39.11: 03/20/2020\n--------------------\n- The default c++ version is no longer fixed at c++03.  We now fall back to\n  clang's default which is currently c++14.\n- Remove arc4random function form library.js.  This is a BSD-only library\n  function.  Anyone requiring BSD compat should be able to use something like\n  https://libbsd.freedesktop.org/.\n- Change the meaning of `ASYNCIFY_IMPORTS`: it now contains only new imports\n  you add, and does not need to contain the list of default system imports like\n  `emscripten_sleep`. There is no harm in providing them, though, so this\n  is not a breaking change.\n- Enable DWARF support: When compiling with `-g`, normal DWARF emitting happens,\n  and when linking with `-g` we preserve that and update it. This is a change\n  from before, where we assumed DWARF was unneeded and did not emit it, so this\n  can increase the size of debug builds (i.e. builds compiling and/or linking\n  with -g). This change is necessary for full debugging support, that is, to\n  be able to build with `-g` and use a debugger. Before this change only the\n  `-gforce_dwarf` flag enabled DWARF; that flag is now removed. If you want\n  the old behavior, build your object files with `-gline-tables-only` (that will\n  only add line table info, which is just enough for things like source maps and\n  does not include full debug info). For more info and background see #10325.\n- Remove hacks from `memset` handling, in particular, in the wasm backend,\n  completely remove the JS version of memset from the JS library and from\n  `DEFAULT_LIBRARY_FUNCS_TO_INCLUDE`. The regular C version will be linked in\n  from compiler_rt normally. A noticeable difference you may see is that\n  a JS library cannot add a `__dep` to `memset` - deps only work for JS\n  library functions, but now we only have the regular C version. If you hit that\n  issue, just add `_memset` to `EXPORTED_FUNCTIONS` (or adjust\n  `deps_info.json`).\n- Minimal runtime code size optimizations, see #10725, #10724, #10663.\n- wasm2js fix for a long-existing but very rare correctness bug, see #10682.\n- Use atomics in musl lock/unlock in pthreads builds, which may fix very rare\n  pthreads + stdio issues (none have been reported though). See #10670.\n\nv1.39.10: 03/09/2020\n--------------------\n- Fix a SIMD regression in 1.39.9 (#10658).\n- Fix `emscripten_atomic_exchange_u8,16,32,64` (#10657).\n- Switch bzip2 to an emscripten-ports mirror.\n\nv1.39.9: 03/05/2020\n-------------------\n- Add support for -Wall, -Werror, -w, -Wno-error=, -Werror=, for controlling\n  internal emscripten errors. The behavior of these flags matches the gcc/clang\n  counterparts.\n- Rename `TOTAL_MEMORY` to `INITIAL_MEMORY` and `WASM_MEM_MAX` to `MAXIMUM_MEMORY`,\n  which are more accurate and match wasm conventions. The old names are still\n  supported as aliases.\n- Updated of libc++abi and libc++ to llvm 9.0.0 (#10510)\n- Refactor syscall interface: Syscalls are no longer variadic (except those\n  that are inherently such as open) and no longer take the syscall number as\n  arg0.  This should be invisible to most users but will effect any external\n  projects that try to implement/emulate the emscripten syscall interface.\n  See #10474\n- Removed src/library_vr.js, as it was outdated and nonfunctional, and the WebVR\n  specification has been obsoleted in favor of the upcoming WebXR specification.\n  (#10460)\n- Deprecate `WASM_OBJECT_FILES` setting.  There are many standard ways to enable\n  bitcode objects (-flto, -flto=full, -flto=thin, -emit-llvm).\n- Removed EmscriptenWebGLContextAttributes::preferLowPowerToHighPerformance\n  option that has become unsupported by WebGL. Access\n  EmscriptenWebGLContextAttributes::powerPreference instead. (#10505)\n- When implementing forwarding function aliases in JS libraries, either the\n  alias or the target function must contain a signature annotation. (#10550)\n- Add a check in Asyncify builds with `ASSERTIONS` that we do not have\n  compiled code on the stack when starting to rewind, which is dangerous.\n- Implement libc system() for node.js (#10547).\n- Standalone mode improvements, time (#10530, #10536), sysconf (#10535),\n  getpagesize (#10533), _Exit (#10534)\n- Fix many closure compiler warnings (e.g. #10525).\n- Avoid unnecessary syscall proxying (#10511).\n- Added new link time command line option -jsDfoo=val to allow specifying\n  custom preprocessor options to JS library files. (#10624, #10580)\n\nv1.39.8: 02/14/2020\n-------------------\n- Add LLD_REPORT_UNDEFINED option that should allow for more detailed\n  diagnostics when symbols are undefined at link time.  This currently has\n  some limitations and is not enabled by default. For example, EM_JS symbols\n  are reported as undefined at link time, as are `__invoke_*` functions.\n- wasm2js optimizations. See binaryen#2623.\n- WebGPU Compute fixes. Simple examples now work. See #10367.\n- Many DWARF debug info fixes. Emitting of DWARF is correct as far as we know,\n  including when optimizing (a few passes are disabled for now, but almost all\n  work). We still only generate it behind the `-gforce_dwarf` flag for now,\n  though (but that should be removed soon).\n\nv1.39.7: 02/03/2020\n-------------------\n- The checked-in copy of the Closure compiler was removed in favor of getting it\n  from npm.  This means that developers now need to run `npm install` after\n  checking out emscripten if they want to use closure (--closure).  emsdk users\n  are not effected because emsdk runs this as a post install step (#9989).\n- Added support for specifying JSDoc minification annotations for Closure in\n  JS library, pre and post files. See\n  https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler\n  (#10272)\n- Add new Fibers API for context switching, that supersedes the old coroutine\n  API that only ran on fastcomp. See #9859\n- Added new linker option -s WASM=2 which produces a dual Wasm+JS build, which\n  falls back to using a JavaScript version if WebAssembly is not supported in\n  target browser/shell. (#10118)\n- Added new linker option -s CLOSURE_WARNINGS=quiet|warn|error that allows aborting\n  the build if the Closure compiler produced any warnings.\n\nv1.39.6: 01/15/2020\n-------------------\n- Development has switched from the \"incoming\" branch to \"master\".\n- Added new system header <emscripten/heap.h>, which enables querying information\n  about the current WebAssembly heap state.\n- Reduced default geometric memory overgrowth rate from a very generous 2x factor\n  to a more memory conserving +20% factor, and capped maximum reservation to 96MB\n  at most.\n- Added options MEMORY_GROWTH_GEOMETRIC_STEP and MEMORY_GROWTH_GEOMETRIC_CAP\n  to allow customizing the heap growth rates.\n- Renamed MEMORY_GROWTH_STEP option to MEMORY_GROWTH_LINEAR_STEP option.\n- Added new linker option -s HTML5_SUPPORT_DEFERRING_USER_SENSITIVE_REQUESTS=0\n  (default enabled) to allow disabling support for deferred fullscreen mode and\n  pointer lock requests for applications that do not need deferring support.\n\nv1.39.5: 12/20/2019\n-------------------\n- Added support for streaming Wasm compilation in MINIMAL_RUNTIME (off by default)\n- All ports now install their headers into a shared directory under\n  `EM_CACHE`.  This should not really be a user visible change although one\n  side effect is that once a given port is built, its headers are then\n  universally accessible, just like the library is universally available as\n  `-l<name>`.\n- Removed `timestamp` field from mouse, wheel, devicemotion and\n  deviceorientation events. The presence of a `timestamp` on these events was\n  slightly arbitrary, and populating this field caused a small profileable\n  overhead that all users might not care about. It is easy to get a timestamp of\n  an event by calling `emscripten_get_now()` or `emscripten_performance_now()`\n  inside the event handler function of any event.\n- Add fine-grained options for specific legacy browser support,\n  `MIN_FIREFOX_VERSION`, `MIN_SAFARI_VERSION`, `MIN_IE_VERSION`,\n  `MIN_EDGE_VERSION`, `MIN_CHROME_VERSION`. The existing `LEGACY_VM_SUPPORT`\n  option sets all of them to 0, that is, maximal backwards compatibility.\n  Note that going forward, we will use these settings in more places, so if\n  you do need very old legacy browser support, you may need to set either\n  `LEGACY_VM_SUPPORT` or the fine-grained options. For more details see #9937\n- Default `DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR` to 1. See #9895.\n  With this change the old deprecated HTML5 API event target lookup behavior is\n  disabled. There is no \"Module.canvas\" object, no magic \"null\" default handling,\n  and DOM element 'target' parameters are taken to refer to CSS selectors, instead\n  of referring to DOM IDs. For more information see:\n  <https://groups.google.com/forum/#!msg/emscripten-discuss/xScZ_LRIByk/_gEy67utDgAJ>\n- WASI API updated from `wasi_unstable` to `wasi_snapshot_preview1`. This\n  is mostly an implementation detail, but if you use `STANDALONE_WASM` it means\n  that the output of emscripten now requires a runtime with\n  `wasi_snapshot_preview1` support.\n- `SAFE_STACK` has been removed, as it overlaps with `STACK_OVERFLOW_CHECK`.\n   Replace `SAFE_STACK=1` with `STACK_OVERFLOW_CHECK=2` (note the value is 2).\n   This also has the effect of enabling stack checking on upstream builds when\n   `ASSERTIONS` are enabled (as assertions enable `STACK_OVERFLOW_CHECK=2`).\n\nv1.39.4: 12/03/2019\n-------------------\n- Remove deprecated `requestFullScreen` method from `library_browser.js`, please\n  use `requestFullscreen` (without the capital S).\n- Remove deprecated `requestFullScreen` and `cancelFullScreen` from `library_glut.js`\n- Remove deprecated `requestFullScreen` and `cancelFullScreen`from `library_glfw.js`\n- Fix SDL2_mixer support for ogg vorbis. See #9849\n- Various source maps fixes, see #9926 #9882 #9837 #9814\n\nv1.39.3: 11/14/2019\n------------------\n\nv1.39.2: 11/06/2019\n------------------\n - Archives with missing indexes will now have ranlib run on them automatically\n   at link time.  This avoids linker errors when using GNU ar to build archive\n   files.\n - `ERROR_ON_MISSING_LIBRARIES` now also applies to internal symbols that start\n   with `emscripten_`.  Prior to this change such missing symbols would result\n   in a runtime error, now they are reported at compile time.\n - Pthread blocking on the main thread will now warn in the console. If\n   `ALLOW_BLOCKING_ON_MAIN_THREAD` is unset then the warning is an error.\n - Add `pthread_tryjoin_np`, which is a POSIX API similar to `pthread_join`\n   but without blocking.\n - New function `emscripten_has_asyncify()`.\n - Add support for pthreads in Node.js, using Node Workers. See #9745\n\nv1.39.1: 10/30/2019\n-------------------\n - Only MEMFS is included by default, others (NODEFS, IDBFS, WORKERFS, PROXYFS)\n   must be linked in explicitly, using `-lnodefs.js`, `-lidbfs.js`',\n   `-lworkerfs.js`, `-lproxyfs.js`. See #9645\n\nv1.39.0: 10/18/2019\n-------------------\n - The emsdk defaults to the upstream backend (instead of fastcomp) from this\n   release onward (but both backends are still fully supported). See\n   https://emscripten.org/docs/compiling/WebAssembly.html#backends\n - Add support for overriding `.emscripten` config variables using environment\n   variables.  Any config variable `FOO` can be overridden by `EM_FOO` in the\n   environment.\n - `-Werror` now also turns warnings in the python driver code into errors.\n - Internal settings have moved from `settings.js` to `settings_internal.js`.\n   These are settings that are for internal use only and are not set-able from\n   the command line.  If we misclassified any of these please open a bug.\n - `STANDALONE_WASM` mode now supports setting up argv via wasi APIs.\n - `STANDALONE_WASM` mode now supports running static constructors in `_start`.\n\nv1.38.48: 10/11/2019\n--------------------\n - Add support for `MAIN_THREAD_EM_ASM` in wasm backend. #9560\n - Add ability to disable FETCH worker in Fastcomp backend via\n   `USE_FETCH_WORKER=0`.  This is useful for people who use FETCH, but don't\n   perform any synchronous fetches on the main thread. #9567\n - Remove `EMCONFIGURE_JS`. Since #6269 we have set it to \"2\" which means never\n   use native, always use JS.\n\nv1.38.47: 10/02/2019\n--------------------\n - Add support for FETCH API in WASM backend. This doesn't support FETCH in the\n   main thread (`USE_FETCH_WORKER=0` is enforced). #9490\n - Redefine errno values to be consistent with wasi. This will let us avoid\n   needing to convert the values back and forth as we use more wasi APIs.\n   This is an ABI change, which should not be noticeable from user code\n   unless you use errno defines (like EAGAIN) *and* keep around binaries\n   compiled with an older version that you link against. In that case, you\n   should rebuild them. See #9545.\n - Removed build option `-s ONLY_MY_CODE` as we now have much better solutions\n   for that, like building to a wasm object file or using `STANDALONE_WASM`\n   etc. (see\n   https://github.com/emscripten-core/emscripten/wiki/WebAssembly-Standalone).\n - Emscripten now supports the config file (.emscripten) being placed in the\n   emscripten directory rather that the current user's home directory.\n   See #9543\n\nv1.38.46: 09/25/2019\n--------------------\n - Rename libpthreads to libpthread to match its normal name on other platforms.\n   This change should be completely internal to emscripten.\n - Remove redundant `COMPILER_ENGINE` and `JS_ENGINE` options.  We only support\n   node as the compiler engine so just use a single `NODE_JS` option for that.\n - Module.abort is no longer exported by default. It can be exported in the normal\n   way using `EXTRA_EXPORTED_RUNTIME_METHODS`, and as with other such changes in\n   the past, forgetting to export it will show a clear error in `ASSERTIONS` mode.\n - Remove `EMITTING_JS` flag, and replace it with `STANDALONE_WASM`. That flag indicates\n   that we want the wasm to be as standalone as possible. We may still emit JS in\n   that case, but the JS would just be a convenient way to run the wasm on the Web\n   or in Node.js.\n - `ASYNCIFY_BLACKLIST` and `ASYNCIFY_WHITELIST` now support simple '\\*' wildcard matching\n\nv1.38.45: 09/12/2019\n--------------------\n\nv1.38.44: 09/11/2019\n--------------------\n - Remove Binaryen from the ports system. This means that emscripten will\n   no longer automatically build Binaryen from source. Instead, either use\n   the emsdk (binaries are provided automatically, just like for LLVM), or\n   build it yourself and point `BINARYEN_ROOT` in .emscripten to it. See #9409\n\nv1.38.43: 08/30/2019\n---------------------\n - noExitRuntime is no longer a property on the Module object. Use `noExitRuntime`\n   instead of `Module.noExitRuntime`.\n\nv1.38.42: 08/19/2019\n--------------------\n - Add support for [address sanitizer](https://clang.llvm.org/docs/AddressSanitizer.html)\n   and standalone [leak sanitizer](https://clang.llvm.org/docs/LeakSanitizer.html)\n   with multiple threads. (#9060, #9076)\n - Remove `ERROR_ON_MISSING_LIBRARIES` setting (it's always on now)\n - Remove the ability to use Python operators in flags that support KB/MB/GB/TB\n   suffixes, e.g. `TOTAL_MEMORY`. This means that `-s TOTAL_MEMORY=1024*1024`\n   will no longer work. This is done because the mechanism may result in\n   execution of arbitrary code via command line flags.\n\nv1.38.41: 08/07/2019\n--------------------\n - Remove fastcomp's implementation of Asyncify. This has been deprecated for\n   a long time, since we added Emterpreter-Async, and now we have a new Asyncify\n   implementation in the upstream wasm backend. It is recommended to upgrade to\n   the upstream backend and use Asyncify there if you need it. (If you do still\n   need the older version, you can use 1.38.40.)\n - Drop ExitStatus from inheriting from Error(), as that could capture the whole\n   global scope, preventing temporary variables at page startup from being garbage\n   collected. (#9108)\n - `__builtin_return_address` now requires `-s USE_OFFSET_CONVERTER=1` to work. (#9073)\n - emrun now uses HTTP/1.1 instead of HTTP/1.0.\n - `callMain` is no longer exported by default on Module, to allow better JS\n   minification. You must add it to `EXTRA_EXPORTED_RUNTIME_METHODS` if you want\n   to call it on Module. (In assertions builds, an error with an explanation is\n   shown.)\n - Allow expressions with side effects as `EM_ASM`'s arguments and prohibit\n   non-arithmetic arguments (e.g. pointers, functions, arrays, objects). (#9054)\n - `emcc` on Windows now uses native newline byte sequence to get a line to\n   print for parse error reporting. (#9088)\n - Internal API update: one can now specialize embind's (un)marshalling for a\n   group of types via SFINAE, instead of a single type. (#9089)\n - Options passed on the `Module` object during startup, like `Module.arguments`,\n   are now copied to a local (in order to avoid writing `Module.*` everywhere,\n   which wastes space). You can still provide them as always, but you can't\n   modify `Module.arguments` and other things *after* startup (which is now\n   after we've finished processing them). In a build with assertions enabled you\n   will get an error if you access those properties after startup. (#9072)\n\nv1.38.40: 07/24/2019\n--------------------\n - LLVM backend pthread builds no longer use external memory initialization\n   files, replacing them with passive data segments.\n - LLVM backend now supports thread local storage via the C extension `__thread`\n   and the C11/C++11 keyword `thread_local`. (#8976)\n - Internal API change: Move read, readAsync, readBinary, setWindowTitle from\n   the Module object to normal JS variables. If you use those internal APIs,\n   you must change `Module.readAsync()/Module['readAsync']()` to `readAsync()`.\n   Note that read is also renamed to `read_` (since \"`read`\" is an API call in\n   the SpiderMonkey shell). In builds with ASSERTIONS, an error message is\n   shown about the API change. This change allows better JS minification\n   (the names read, readAsync etc. can be minified, and if the variables are\n   not used they can be removed entirely). Defining these APIs on Module\n   (which was never documented or intended, but happened to work) is also\n   no longer allowed (but you can override `read_` etc. from JS).\n\nv1.38.39: 07/16/2019\n--------------------\n - Add support for [address sanitizer](https://clang.llvm.org/docs/AddressSanitizer.html). (#8884)\n   - Currently, only supports one thread without dynamic linking.\n - Rename Bysyncify (the name used during development) to Asyncify. This keeps\n   the name consistent with the old ASYNCIFY flag, no need for a new one, as\n   they basically do the same thing.\n\nv1.38.38: 07/08/2019\n--------------------\n - Add support for standalone [leak sanitizer](https://clang.llvm.org/docs/LeakSanitizer.html). (#8711)\n\nv1.38.37: 06/26/2019\n--------------------\n - Set ENV['LANG'] following the user's preferred language (HTTP Accept-Language / navigator.languages[0])\n - `emscripten_run_script_string` now returns C `NULL` instead of the string `null`\n   or `undefined` when the result of the `eval` is JavaScript `null` or `undefined`.\n - Add a new system for managing system libraries. (#8780)\n   This may require minor changes when performing certain operations:\n     - When using `embuilder.py` to build a specific library, the name may have\n       changed: for consistency, all library names are prefixed with lib now.\n     - `embuilder.py` now only builds the requested library, and not its dependencies\n       and certain system libraries that are always built. For example, running\n       `embuilder.py build libc` no longer builds `libcompiler_rt` if it hasn't be built.\n     - When using `EMCC_FORCE_STDLIBS` with a list of libraries, you must now use\n       the simplified names, for example, `libmalloc` and `libpthreads` instead of\n       `libdlmalloc` or `libpthreads_stub`. These names will link in the correct\n       version of the library: if the build is configured to use `emmalloc`, `libmalloc`\n       will mean `libemmalloc`, and if thread support is disabled, `libpthreads` will\n       mean `libpthreads_stub`. This allows you to say `libmalloc` or `libpthreads` without\n       worrying about which implementation is supposed to be used, and avoid duplicate\n       symbols if you used the wrong implementation.\n - LLVM wasm backend pthreads fixes, see #8811, #8718\n\nv1.38.36: 06/15/2019\n--------------------\n\nv1.38.35: 06/13/2019\n--------------------\n - Include some [waterfall fixes](https://github.com/WebAssembly/waterfall/pull/541)\n   for the emsdk builds on linux regarding libtinfo.\n - NOTE: due to a CI failure, builds for mac and windows were not generated.\n\nv1.38.34: 06/01/2019\n--------------------\n - Add support for [undefined behavior sanitizer](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html).\n    - This allows `emcc -fsanitize=undefined` to work. (#8651)\n    - The minimal runtime (`-fsanitize-minimal-runtime`) also works. (#8617)\n\nv1.38.33: 05/23/2019\n--------------------\n - First release to use the new chromium build infrastructure\n   https://groups.google.com/forum/#!msg/emscripten-discuss/WhDtqVyW_Ak/8DfDnfk0BgAJ\n - Add `emscripten_return_address` which implements the functionality of\n   gcc/clang's `__builtin_return_address`. (#8617)\n\nv1.38.32: SKIPPED\n-----------------\n - The transition from the old to the new CI occurred around here. To avoid\n   ambiguity while both CIs were still generating builds, we just tagged a new\n   one (1.38.33) on the new CI and skipped 1.38.32.\n - The transition also moves all builds and downloads away from the old\n   mozilla-games infrastructure to the new chromium ones. As a result all links\n   to *mozilla-games* URLs will not work (these were never documented, but could\n   be seen from the internals of the emsdk; the new emsdk uses the proper new\n   URLs, so you can either use the sdk normally or find the URLs from there).\n\nv1.38.31: 04/24/2019\n--------------------\n - Change `ino_t/off_t` to 64-bits. (#8467)\n - Add port for bzip2 library (`libbz2.a`). (#8349)\n - Add port for libjpeg library. (#8361)\n - Enable `ERROR_ON_MISSING_LIBRARIES` by default (#8461)\n\nv1.38.30: 03/21/2019\n--------------------\n - Remove Module.buffer which was exported by default unnecessarily. This was an\n   undocumented internal detail, but in theory, code may have relied on it.\n   (#8277)\n\nv1.38.29: 03/11/2019\n--------------------\n\nv1.38.28: 02/22/2019\n--------------------\n - Option `-s EMTERPRETIFY_WHITELIST` now accepts shell-style wildcards;\n   this allows matching static functions with conflicting names that\n   the linker distinguishes by appending a random suffix.\n - Normalize mouse wheel delta in `library_browser.js`. This changes the scroll\n   amount in SDL, GLFW, and GLUT. (#7968)\n\nv1.38.27: 02/10/2019\n--------------------\n - Change how `EMCC_LOCAL_PORTS` works, to be more usable. See #7963\n - Remove deprecated Pointer_stringify (use UTF8ToString instead). See #8011\n - Added a new option `-s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1` that\n   changes the lookup semantics of DOM elements in html5.h event handler\n   callbacks and WebGL context creation. The new behavior is to use CSS selector\n   strings to look up DOM elements over the old behavior, which was somewhat\n   ad hoc constructed rules around default Emscripten uses. The old behavior\n   will be deprecated and removed in the future. Build with -s ASSERTIONS=1\n   to get diagnostics messages related to this transition.\n - Breaking change with -s USE_PTHREADS=1 + -s FETCH=1: When building with\n   -o a.html, the generated worker script is now named \"a.fetch.js\" according\n   to the base name of the specified output, instead of having a fixed name\n   \"fetch-worker.js\".\n\nv1.38.26: 02/04/2019\n--------------------\n - Fix some pthreads proxying deadlocks. See #7865\n\nv1.38.25: 01/18/2019\n--------------------\n - Move kripken/emscripten,emscripten-fastcomp,emscripten-fastcomp-clang to\n   emscripten-core/\\*\n\nv1.38.24: 01/17/2019\n--------------------\n - Perform JS static allocations at compile time (#7850)\n\nv1.38.23: 01/10/2019\n--------------------\n - Remove BINARYEN_METHOD: no more support for interpret modes, and if you want\n   non-wasm, use WASM=0.\n - Support specifying multiple possible ENVIRONMENTs (#7809)\n\nv1.38.22: 01/08/2019\n--------------------\n - Add Regal port. See #7674\n - System libraries have been renamed to include the `lib` prefix.  If you use\n   `EMCC_FORCE_STDLIBS` or `EMCC_ONLY_FORCED_STDLIBS` to select system libraries\n   you may need to add the `lib` prefix.\n - Rename `pthread-main.js` to `NAME.worker.js`, where `NAME` is the main\n   name of your application, that is, if you emit `program.js` then you'll get\n   `program.worker.js` (this allows more than one to exist in the same\n   directory, etc.).\n - Dynamic linker has been taught to handle library -> library dependencies.\n\nv1.38.21: 11/30/2018\n--------------------\n - fastcomp: Remove `runPostSets` function and replace with normal static\n   constructor function. See #7579\n\nv1.38.20: 11/20/2018\n--------------------\n - Remove SPLIT_MEMORY option.\n - Move getTempRet0/setTempRet0 to be JS library functions rather than\n   auto-generated by fastcomp.\n - Change `strptime()`'s handling of the \"%c\" to match that of `strftime()`.\n   This is a breaking change for code which depends on the old definition of\n   \"%c\".\n\nv1.38.19: 11/15/2018\n--------------------\n\nv1.38.18: 11/08/2018\n--------------------\n - Wasm dynamic linking: Rename `tableBase/memoryBase` to\n   `__table_base/__memory_base` (#7467)\n\nv1.38.17: 11/07/2018\n--------------------\n - Minify wasm import and export names. This decreases JS and wasm size by\n   minifying the identifiers where JS calls into wasm or vice versa, which\n   are not minifiable by closure or other JS-only tools. This happens in\n   -O3, -Os and above. See #7431\n\nv1.38.16: 11/02/2018\n--------------------\n - Breaking change: Do not automatically set EXPORT_ALL for MAIN_MODULES or\n   SIDE_MODULES. This means that you must explicitly export things that will\n   be called from outside (normally, on EXPORTED_FUNCTIONS), or\n   you can manually enable EXPORT_ALL yourself (which returns to the exact\n   same behavior as before). This change brings us in line with more standard\n   dynamic linking, and will match what the LLVM wasm backend will have.\n   See #7312.\n - Invalid -s flags on the command line are now treated as errors.\n - Remove BUILD_AS_SHARED_LIBRARY setting.\n\nv1.38.15: 10/25/2018\n--------------------\n\nv1.38.14: 10/22/2018\n--------------------\n - Errors are now reported when functions listed in EXPORTED_FUNCTIONS are not\n   defined. This can be disabled via ERROR_ON_UNDEFINED_SYMBOLS=0. See #7311.\n\nv1.38.13: 10/10/2018\n--------------------\n - Support `-s NO_X=1` as an alias for `-s X=0` and vice versa, which\n   simplifies current settings with `NO_`-prefixed names. See #7151.\n - Various `EMULATED_FUNCTION_POINTER` improvements. See #7108, #7128.\n - `ERROR_ON_UNDEFINED_SYMBOLS` is now the default.  See #7196\n\nv1.38.12: 09/03/2018\n--------------------\n - Update SDL2 to 2.0.7. See #7016.\n - Optionally build using native object files (wasm backend only).\n   For now this is behind a new option flag: `-s WASM_OBJECT_FILES=1`.\n   See #6875.\n\nv1.38.11: 08/02/2018\n--------------------\n - Support for loading wasm files in the same dir as the JS file, using\n   node.js/Web-specific techniques as applicable. See #5368 and followups.\n - Add an API for async side module compilation in wasm. See #6663.\n - Remove builtin Crunch support. See #6827.\n\nv1.38.10: 07/23/2018\n--------------------\n - Change the type of `size_t` and friends from int to long. This may have\n   noticeable effects if you depend on the name mangling of a function that uses\n   `size_t` (like in `EXPORTED_FUNCTIONS`), and you must rebuild source files to\n   bitcode (so your bitcode is in sync with the system libraries after they are\n   rebuilt with this change). Otherwise this should not have any noticeable\n   effects for users. See #5916.\n\nv1.38.9: 07/22/2018\n-------------------\n - Fix `Module.locateFile` to resolve relative paths to *.wasm, *.mem and other\n   files relatively to the main JavaScript file rather than the current working\n   directory (see #5368).\n   - Add second argument `prefix` to `Module.locateFile` function that contains\n     the path to the JavaScript file where files are loaded from by default.\n   - Remove `Module.*PrefixURL` APIs (use `Module.locateFile` instead).\n\nv1.38.8: 07/06/2018\n-------------------\n - Fix a regression in 1.38.7 with binaryen no longer bundling binaryen.js\n   (which emscripten doesn't need, that's just for handwritten JS users, but\n   emscripten did check for its presence).\n\nv1.38.7: 07/06/2018\n-------------------\n - Correctness fix for stack handling in `invoke_*()s`. This may add noticeable\n   overhead to programs using C++ exceptions and (less likely) setjmp/longjmp -\n   please report any issues. See #6666 #6702\n - Deprecate Module.ENVIRONMENT: Now that we have a compile-time option to set\n   the environment, also having a runtime one on Module is complexity that we\n   are better off without. When Module.ENVIRONMENT is used with ASSERTIONS it\n   will show an error to direct users to the new option (-s ENVIRONMENT=web , or\n   node, etc., at compile time).\n - Breaking change: Do not export print/printErr by default. Similar to other\n   similar changes (like getValue/setValue). We now use out() and err()\n   functions in JS to print to stdout/stderr respectively. See #6756.\n\nv1.38.6: 06/13/2018\n-------------------\n\nv1.38.5: 06/04/2018\n-------------------\n - Update libc++ to 6.0, bringing c++17 support (std::byte etc.)\n\nv1.38.4: 05/29/2018\n-------------------\n - Fix asm.js validation regression from 1.38.2.\n\nv1.38.3: 05/25/2018\n-------------------\n - Upgrade to LLVM 6.0.1.\n\nv1.38.2: 05/25/2018\n--------------------\n - Add ENVIRONMENT option to specify at compile time we only need JS to support\n   one runtime environment (e.g., just the web). When emitting HTML, set that to\n   web so we emit web code only. #6565\n - Regression in asm.js validation due to cttz optimization #6547\n\nv1.38.1: 05/17/2018\n-------------------\n - Remove special-case support for `src/struct_info.compiled.json`: Make it a\n   normal cached thing like system libraries, not something checked into the\n   source tree.\n - Breaking change: Emit WebAssembly by default. Only the default is changed -\n   we of course still support asm.js, and will for a very long time. But\n   changing the default makes sense as the recommended output for most use cases\n   should be WebAssembly, given it has shipped in all major browsers and\n   platforms and is more efficient than asm.js. Build with `-s WASM=0` to\n   disable wasm and use asm.js if you want that (or use `-s\n   LEGACY_VM_SUPPORT=1`, which emits output that can run in older browsers,\n   which includes a bunch of polyfills as well as disables wasm). (#6419)\n\nv1.38.0: 05/09/2018\n-------------------\n\nv1.37.40: 05/07/2018\n--------------------\n - Fix regression in 1.37.39 on  -s X=@file  parsing (see #6497, #6436)\n\nv1.37.39: 05/01/2018\n--------------------\n - Regression: Parsing of `-s X=@file`  broke if the file contains a newline\n   (see #6436; fixed in 1.37.40)\n\nv1.37.38: 04/23/2018\n--------------------\n - Breaking change: Simplify exception handling, disabling it by default.\n   Previously it was disabled by default in -O1 and above and enabled in -O0,\n   which could be confusing. You may notice this change if you need exceptions\n   and only run in -O0 (since if you test in -O1 or above, you'd see you need to\n   enable exceptions manually), in which case you will receive an error at\n   runtime saying that exceptions are disabled by default and that you should\n   build with `-s DISABLE_EXCEPTION_CATCHING=0` to enable them.\n - Fix regression in 1.37.37 on configure scripts on MacOS (see #6456)\n\nv1.37.37: 04/13/2018\n--------------------\n - Regression: configure scripts on MacOS may be broken (see #6456; fixed in 1.37.38)\n\nv1.37.36: 03/13/2018\n--------------------\n\nv1.37.35: 02/23/2018\n--------------------\n - MALLOC option, allowing picking between dlmalloc (previous allocator and\n   still the default) and emmalloc, a new allocator which is smaller and\n   simpler.\n - Binaryen update that should fix all known determinism bugs.\n\nv1.37.34: 02/16/2018\n--------------------\n - `addFunction` is now supported on LLVM wasm backend, but when being used on\n   the wasm backend, you need to provide an additional second argument, a Wasm\n   function signature string. Each character within a signature string\n   represents a type. The first character represents the return type of a\n   function, and remaining characters are for parameter types.\n    - 'v': void type\n    - 'i': 32-bit integer type\n    - 'j': 64-bit integer type (currently does not exist in JavaScript)\n    - 'f': 32-bit float type\n    - 'd': 64-bit float type\n   For asm.js and asm2wasm you can provide the optional second argument, but it\n   isn't needed. For that reason this isn't a breaking change, however,\n   providing the second argument is recommended so that code is portable across\n   all backends and modes.\n\nv1.37.33: 02/02/2018\n--------------------\n\nv1.37.32: 01/31/2018\n--------------------\n\nv1.37.31: 01/31/2018\n--------------------\n - LLVM and clang updates from upstream (5.0svn, close 5.0 release).\n\nv1.37.30: 01/31/2018\n--------------------\n\nv1.37.29: 01/24/2018\n--------------------\n\nv1.37.28: 01/08/2018\n--------------------\n - Breaking change: Don't export the `ALLOC_*` numeric constants by default. As\n   with previous changes, a warning will be shown in `-O0` and when `ASSERTIONS`\n   are on if they are used.\n - Breaking change: Don't export FS methods by default. As with previous\n   changes, a warning will be shown in `-O0` and when `ASSERTIONS` are on, which\n   will suggest either exporting the specific methods you need, or using\n   `FORCE_FILESYSTEM` which will auto export all the main filesystem methods.\n   Aside from using FS methods yourself, you may notice this change when using a\n   file package created standalone, that is, by running the file packager\n   directly and then loading it at run time (as opposed to telling `emcc` to\n   package the files for you, in which case it would be aware of them at compile\n   time); you should build with `FORCE_FILESYSTEM` to ensure filesystem support\n   for that case.\n\nv1.37.27: 12/24/2017\n--------------------\n - Breaking change: Remove the `Runtime` object, and move all the useful methods\n   from it to simple top-level functions. Any usage of `Runtime.func` should be\n   changed to `func`.\n\nv1.37.26: 12/20/2017\n--------------------\n - Breaking change: Change `NO_EXIT_RUNTIME` to 1 by default. This means that by\n   default we don't include code to shut down the runtime, flush stdio streams,\n   run atexits, etc., which is better for code size. When `ASSERTIONS` is on, we\n   warn at runtime if there is text buffered in the streams that should be\n   flushed, or atexits are used.\n - Meta-DCE for JS+wasm: remove unused code between JS+wasm more aggressively.\n   This should not break valid code, but may break code that depended on unused\n   code being kept around (like using a function from outside the emitted JS\n   without exporting it - only exported things are guaranteed to be kept alive\n   through optimization).\n\nv1.37.24: 12/13/2017\n--------------------\n - Breaking change: Similar to the getValue/setValue change from before (and\n   with the same `ASSERTIONS` warnings to help users), do not export the\n   following runtime methods by default: ccall, cwrap, allocate,\n   Pointer_stringify, AsciiToString, stringToAscii, UTF8ArrayToString,\n   UTF8ToString, stringToUTF8Array, stringToUTF8, lengthBytesUTF8, stackTrace,\n   addOnPreRun, addOnInit, addOnPreMain, addOnExit, addOnPostRun,\n   intArrayFromString, intArrayToString, writeStringToMemory,\n   writeArrayToMemory, writeAsciiToMemory.\n\nv1.37.23: 12/4/2017\n-------------------\n - Breaking change: Do not polyfill Math.{clz32, fround, imul, trunc} by\n   default. A new `LEGACY_VM_SUPPORT` option enables support for legacy\n   browsers. In `ASSERTIONS` mode, a warning is shown if a polyfill was needed,\n   suggesting using that option.\n - Breaking change: Do not export getValue/setValue runtime methods by default.\n   You can still use them by calling them directly in code optimized with the\n   main file (pre-js, post-js, js libraries; if the optimizer sees they are\n   used, it preserves them), but if you try to use them on `Module` then you\n   must export them by adding them to `EXTRA_EXPORTED_RUNTIME_METHODS`. In `-O0`\n   or when `ASSERTIONS` is on, a run-time error message explains that, if they\n   are attempted to be used incorrectly.\n\nv1.37.17: 7/25/2017\n------------------\n - Updated to libc++'s \"v2\" ABI, which provides better alignment for string data\n   and other improvements. This is an ABI-incompatible change, so bitcode files\n   from previous versions will not be compatible.\n\nv1.37.13: 5/26/2017\n-------------------\n - Improved Android support for emrun.\n - Duplicate function elimination fixes (#5186)\n - Fix problem with embinding derived classes (#5193)\n - Fix CMake compiler detection when EMCC_SKIP_SANITY_CHECK=1 is used. (#5145)\n - Implemented GLFW Joystick API (#5175)\n - Fixed a bug with emcc --clear-ports command (#5248)\n - Updated Binaryen to version 33.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.12...1.37.13\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.12: 5/1/2017\n------------------\n - Added emscripten-legalize-javascript-ffi option to LLVM to allow disabling JS FFI mangling\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.11...1.37.12\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.11...1.37.12\n    - Emscripten-Clang: no changes.\n\nv1.37.11: 5/1/2017\n------------------\n - Added missing SIGSTKSZ define after musl 1.1.15 update (#5149)\n - Fix emscripten_get_mouse_status (#5152)\n - Fix `_mm_set_epi64x()` function (#5103)\n - Fix issue with number of gamepads connected at initial page load (#5169, #5170)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.10...1.37.11\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.10...1.37.11\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.37.10...1.37.11\n\nv1.37.10: 4/20/2017\n-------------------\n - Added stub for pthread_setcancelstate for singlethreaded runs.\n - Fixed an outlining bug on function returns (#5080)\n - Implemented new parallel test runner architecture (#5074)\n - Added Cocos2D to Emscripten ports. (-s USE_COCOS2D=1)\n - Updated Binaryen to version 32, which migrates Emscripten to use the new\n   WebAssembly Names section. This is a forwards and backwards breaking change\n   with respect to reading debug symbol names in Wasm callstacks. Use of the new\n   Names section format first shipped in Emscripten 1.37.10, Binaryen version\n   32, Firefox 55, Firefox Nightly 2017-05-18 and Chrome 59; earlier versions\n   still used the old format. For more information, see\n   https://github.com/WebAssembly/design/pull/984 and\n   https://github.com/WebAssembly/binaryen/pull/933.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.9...1.37.10\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.9...1.37.10\n    - Emscripten-Clang: no changes.\n\nv1.37.9: 3/23/2017\n------------------\n - Added new build feature -s GL_PREINITIALIZED_CONTEXT=1 which allows pages to\n   manually precreate the GL context they use for customization purposes.\n - Added a custom callback hook Module.instantiateWasm() which allows user shell\n   HTML file to manually perform Wasm instantiation for preloading and progress\n   bar purposes.\n - Added a custom callback hook Module.getPreloadedPackage() to file preloader\n   code to allow user shell HTML file to manually download .data files for\n   preloading and progress bar purposes.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.8...1.37.9\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.8...1.37.9\n    - Emscripten-Clang: no changes.\n\nv1.37.8: 3/17/2017\n------------------\n - Fixed a bug with robust_list initialization on pthreads build mode.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.7...1.37.8\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.7: 3/15/2017\n------------------\n - Updated to LLVM 4.0.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.6...1.37.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.6...1.37.7\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.37.6...1.37.7\n\nv1.37.6: 3/15/2017\n------------------\n - Implemented readdir() function for WORKERFS.\n - Fixed bugs with Fetch API (#4995, #5027)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.5...1.37.6\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.5: 3/13/2017\n------------------\n - Updated musl to version 1.1.15 from earlier version 1.0.5.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.4...1.37.5\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.4: 3/13/2017\n------------------\n - Fixed glGetUniformLocation() to work according to spec with named uniform blocks.\n - Fixed WebAssembly Memory.grow() to work.\n - Switched to 16KB page size from earlier 64KB.\n - Optimize alBufferData() operation.\n - Fixed a resource lookup issue with multiple OpenAL audio contexts.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.3...1.37.4\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.3: 2/16/2017\n------------------\n - Updated Binaryen to version 0x01. First official stable WebAssembly support version. (#4953)\n - Optimized memcpy and memset with unrolling and SIMD, when available.\n - Improved Emscripten toolchain profiler to track more hot code.\n - Added new linker flag -s WEBGL2_BACKWARDS_COMPATIBILITY_EMULATION=1 to allow\n   simultaneously targeting WebGL 1 and WebGL 2.\n - Optimize Emscripten use of multiprocessing pools.\n - More WebGL 2 garbage free optimizations.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.2...1.37.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.2...1.37.3\n    - Emscripten-Clang: no changes.\n\nv1.37.2: 1/31/2017\n------------------\n - Fixed a build error with boolean SIMD types.\n - Improved WebAssembly support, update Binaryen to version 22.\n - Update GL, GLES, GLES2 and GLES3 headers to latest upstream Khronos versions.\n - Implement support for new garbage free WebGL 2 API entrypoints which improve\n   performance and reduce animation related stuttering.\n - Fixed a bug where -s USE_PTHREADS builds would not have correct heap size if\n   -s TOTAL_MEMORY is not being used.\n - Fixed array type issue that prevented glTexImage3D() and glTexSubImage3D()\n   from working.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.1...1.37.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.37.1...1.37.2\n    - Emscripten-Clang: no changes.\n\nv1.37.1: 12/26/2016\n-------------------\n - Implemented new Fetch API for flexible multithreaded XHR and IndexedDB\n   access.\n - Implemented initial version of new ASMFS filesystem for multithreaded\n   filesystem operation.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.37.0...1.37.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.37.0: 12/23/2016\n-------------------\n - Added support for LLVM sin&cos intrinsics.\n - Fix GLFW mouse button mappings (#4317, #4659)\n - Add support for --emit-symbol-map to wasm\n - Fixed handling of an invalid path in chdir (#4749)\n - Added new EMSCRIPTEN_STRICT mode, which can be enabled to opt in to removing\n   support for deprecated behavior.\n - Remove references to Web Audio .setVelocity() function, which has been\n   removed from the spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.14...1.37.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.14...1.37.0\n    - Emscripten-Clang: no changes.\n\nv1.36.14: 11/3/2016\n-------------------\n - Added support to emscripten_async_wget() for relative paths.\n - Fixed FS.mkdirTree('/') to work.\n - Updated SDL 2 port to version 12.\n - Added more missing pthreads stubs.\n - Normalize system header includes to use the preferred form #include\n   <emscripten/foo.h> to avoid polluting header include namespaces.\n - Fixed a bug where transitioning to fullscreen could cause a stack overflow in GLFW.\n - Added new system CMake option\n   -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=ON to choose if static\n   libraries should be LLVM bitcode instead of .a files.\n - Improved SIMD support to be more correct to the spec.\n - Updated Binaryen to version 18. (#4674)\n - Fixed dlopen with RTLD_GLOBAL parameter.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.13...1.36.14\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.13: 10/21/2016\n--------------------\n - Pass optimization settings to asm2wasm.\n - Fix to exporting emscripten_builtin_malloc() and emscripten_builtin_free()\n   when heap is split to multiple parts.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.12...1.36.13\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.12: 10/20/2016\n--------------------\n - Improved Emscripten toolchain profiler with more data. (#4566)\n - Export dlmalloc() and dlfree() as emscripten_builtin_malloc() and\n   emscripten_builtin_free() to allow user applications to hook into memory\n   allocation (#4603)\n - Improved asm.js -s USE_PTHREADS=2 build mode compatibility when\n   multithreading is not supported.\n - Improved WebGL support with closure compiler (#4619)\n - Improved Bianaryen WebAssembly support\n - Added support for GL_disjoint_timer_query extension (#4575)\n - Improved Emscripten compiler detection with CMake (#4129, #4314, #4318)\n - Added support for int64 in wasm.\n - Optimize small constant length memcpys in wasm.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.11...1.36.12\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.11...1.36.12\n    - Emscripten-Clang: no changes.\n\nv1.36.11: 9/24/2016\n-------------------\n - Added new runtime functions\n   emscripten_sync/async/waitable_run_in_main_runtime_thread() for proxying\n   calls with pthreads (#4569)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.10...1.36.11\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.10: 9/24/2016\n-------------------\n - Improved compiler logging print messages on first run experience. (#4501)\n - Fixed log printing in glFlushMappedBufferRange() and glGetInfoLog()\n   functions. (#4521)\n - Added setjmp/longjmp handling for wasm.\n - Improved support for --proxy-to-worker build mode.\n - Improved GLES3 support for glGet() features that WebGL2 does not have. (#4514)\n - Added support for implementation defined glReadPixels() format.\n - Improved WebGL 2 support with closure compiler. (#4554)\n - Implemented support for nanosleep() when building in pthreads mode (#4578)\n - Added support for  llvm_ceil_f64 and llvm_floor_f64 intrinsics.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.9...1.36.10\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.9...1.36.10\n    - Emscripten-Clang: no changes.\n\nv1.36.9: 8/24/2016\n------------------\n - Fixed glGet for GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING to work. (#1330)\n - Move the DYNAMICTOP variable from JS global scope to inside the heap so that\n   the value is shared to multithreaded applications. This removes the global\n   runtime variable DYNAMICTOP in favor of a new variable DYNAMICTOP_PTR.\n   (#4391, #4496)\n - Implemented brk() system function.\n - Fixed --output-eol to work with --proxy-to-worker mode.\n - Improved reported error message when execution fails to stack overflow.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.8...1.36.9\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.8...1.36.9\n    - Emscripten-Clang: no changes.\n\nv1.36.8: 8/20/2016\n------------------\n - Fixed a memory leak in ctor_evaller.py on Windows (#4446)\n - Migrate to requiring CMake 3.4.3 as the minimum version for Emscripten CMake\n   build integration support.\n - Fixed an issue that prevented -s INLINING_LIMIT from working (#4471)\n - Fixed a bug with Building.llvm_nm interpretation of defined symbols (#4488)\n - Add support for DISABLE_EXCEPTION_CATCHING and EXCEPTION_CATCHING_WHITELIST\n   options for wasm.\n - Added new emprofile.py script which can be used to profile toolchain wide\n   performance. (#4491)\n - Added new linker flag --output-eol, which specifies what kind of line\n   endings to generate to the output files. (#4492)\n - Fixed a Windows bug where aborting execution with Ctrl-C might hang\n   Emscripten to an infinite loop instead. (#4494)\n - Implement support for touch events to GLUT (#4493)\n - Deprecated unsafe function writeStringToMemory() from src/preamble.js. Using\n   stringToUTF8() is recommended instead. (#4497)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.7...1.36.8\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.7: 8/8/2016\n-----------------\n - Updated to latest upstream LLVM 3.9.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.6...1.36.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.6...1.36.7\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.36.6...1.36.7\n\nv1.36.6: 8/8/2016\n-----------------\n - Fixed wheelDelta for MSIE (#4316)\n - Fixed inconsistencies in fullscreen API signatures (#4310, #4318, #4379)\n - Changed the behavior of Emscripten WebGL createContext() to not forcibly set\n   CSS style on created canvases, but let page customize the style themselves\n   (#3406, #4194 and #4350, #4355)\n - Adjusted the reported GL_VERSION field to adapt to the OpenGL ES\n   specifications (#4345)\n - Added support for GLES3 GL_MAJOR/MINOR_VERSION fields. (#4368)\n - Improved -s USE_PTHREADS=1 and --proxy-to-worker linker options to be\n   mutually compatible. (#4372)\n - Improved IDBFS to not fail on Safari where IndexedDB support is spotty\n   (#4371)\n - Improved SIMD.js support when using Closure minifier. (#4374)\n - Improved glGetString to be able to read fields from WEBGL_debug_renderer_info\n   extension. (#4381)\n - Fixed an issue with glFramebufferTextureLayer() not working correctly.\n - Fixed a bug with std::uncaught_exception() support (#4392)\n - Implemented a multiprocess lock to access the Emscripten cache. (#3850)\n - Implemented support for the pointerlockerror event in HTML5 API (#4373)\n - Report WebGL GLSL version number in GL_SHADING_LANGUAGE_VERSION string (#4365)\n - Optimized llvm_ctpop_i32() and conversion of strings from C to JS side\n   (#4402, #4403)\n - Added support for the OffscreenCanvas proposal, and transferring canvases to\n   offscreen in pthreads build mode, linker flag -s OFFSCREENCANVAS_SUPPORT=0/1\n   (#4412)\n - Fixed an issue after updating to new LLVM version that response files passed\n   to llvm-link must have forward slashes (#4434)\n - Fixed a memory leak in relooper in LLVM.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.5...1.36.6\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.5...1.36.6\n    - Emscripten-Clang: no changes.\n\nv1.36.5: 5/24/2016\n------------------\n - Added support for passing custom messages when running in web worker.\n - Improved fp128 support when targeting WebAssembly.\n - Updated cpuprofiler.js to support tracing time spent in WebGL functions.\n - Fixed an issue with glFenceSync() function call signature (#4260, #4339)\n - Added missing zero argument version of emscripten_sync_run_in_main_thread().\n - Improves support for targeting pthreads when using Closure minifier (#4348).\n - Fixed an issue where pthreads enabled code did not correctly validate as asm.js\n - Fixed an issue with incorrect SIMD.js related imports (#4341)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.4...1.36.5\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.4...1.36.5\n    - Emscripten-Clang: no changes.\n\nv1.36.4: 5/9/2016\n-----------------\n - Added EM_TRUE and EM_FALSE #defines to html5.h.\n - Fixed an issue with GLFW window and framebuffer size callbacks.\n - Added support for more missing WebGL 2 texture formats (#4277)\n - Added support for source files with no extension.\n - Updated emrun.py to latest version, adds support to precompressed content and\n   running as just a web server without launching a browser.\n - Updated experimental WebAssembly support to generate 0xb version code.\n - Automatically build Binaryen when needed.\n - Updated libc++ to SVN revision 268153. (#4288)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.3...1.36.4\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.3: 4/27/2016\n------------------\n - Fixed a deadlock bug with pthreads support.\n - Remove sources from temporary garbage being generated in OpenAL code (#4275)\n - Added support for calling alert() from pthreads code.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.2...1.36.3\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.36.2: 4/22/2016\n------------------\n - Improve support for targeting WebAssembly with Binaryen.\n - Improve support for LLVM's WebAssembly backend (EMCC_WASM_BACKEND=1\n   environment variable).\n - Separate out emscripten cache structure to asmjs and wasm directories.\n - Fix a bug where Emscripten would spawn too many unused python subprocesses (#4158)\n - Optimize Emscripten for large asm.js projects.\n - Added sdl2_net to Emscripten ports.\n - Updated to latest version of the SIMD polyfill (#4165)\n - Fixed an issue with missing texture formats support in GLES 3 (#4176)\n - Added a new WebAssembly linker option -s BINARYEN_IMPRECISE=1 (default=0)\n   which mutes potential traps from WebAssembly int div/rem by zero and\n   float-to-int conversions.\n - Added support for EXT_color_buffer_float extension.\n - Fixed behavior of SSE shift operations (#4165).\n - Fixed a bug where ctor_evaller.py (-Oz builds) would hang on Windows.\n - Fixed a bug where emscripten_set_main_loop() with EM_TIMING_SETTIMEOUT would\n   incorrectly compute the delta times (#4200, #4208)\n - Update pthreads support to latest proposed spec version. (#4212, #4220)\n - Fixed an unresolved symbol linker error in embind (#4225)\n - Fix file_packager.py --use-preload-cache option to also work on Safari and\n   iOS (#2977, #4253)\n - Added new file packager option --indexedDB-name to allow specifying the\n   database name to use for the cache (#4219)\n - Added DWARF style debugging information.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.1...1.36.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.1...1.36.2\n    - Emscripten-Clang: no changes.\n\nv1.36.1: 3/8/2016\n-----------------\n - Fixed glfwSetWindowSizeCallback to conform to GLFW2 API.\n - Update OpenAL sources only when the browser window is visible to avoid\n   occasional stuttering static glitches when the page tab is hidden. (#4107)\n - Implemented LLVM math intrinsics powi, trunc and floor.\n - Added support for SDL_GL_ALPHA_SIZE in GL context initialization. (#4125)\n - Added no-op stubs for several pthread functions when building without\n   pthreads enabled (#4130)\n - Optimize glUniform*fv and glVertexAttrib*fv functions to generate less\n   garbage and perform much faster (#4128)\n - Added new EVAL_CTORS optimization pass which evaluates global data\n   initializer constructors at link time, which would improve startup time and\n   reduce code size of these ctors.\n - Implemented support for OpenAL AL_PITCH option.\n - Implemented new build options -s STACK_OVERFLOW_CHECK=0/1/2 which adds\n   runtime stack overrun checks. 0: disabled, 1: minimal, between each frame, 2:\n   at each explicit JS side stack allocation call to allocate().\n - Fixed an issue with -s SPLIT_MEMORY mode where an unsigned 32-bit memory\n   access would come out as signed. (#4150)\n - Fixed asm.js validation in call handlers to `llvm_powi_f*`.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.36.0...1.36.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.36.0...1.36.1\n    - Emscripten-Clang: no changes.\n\nv1.36.0: 2/23/2016\n------------------\n - Fixed an OpenAL bug where OpenAL sources would not respect global volume setting.\n - Fixed an issue where alGetListenerf() with AL_GAIN would not return the\n   correct value. (#4091)\n - Fixed an issue where setting alListenerf() with AL_GAIN would not set the\n   correct value. (#4092)\n - Implemented new JS optimizer \"Duplicate Function Elimination\" pass which\n   collapses identical functions to save code size.\n - Implemented the `_Exit()` function.\n - Added support for SSE3 and SSSE3 intrinsics (#4099) and partially for SSE 4.1\n   intrinsics (#4030, #4101)\n - Added support for -include-pch flag (#4086)\n - Fixed a regex syntax in ccall on Chrome Canary (#4111)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.23...1.36.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.23...1.36.0\n    - Emscripten-Clang: no changes.\n\nv1.35.23: 2/9/2016\n------------------\n - Provide $NM environment variable to point to llvm-nm when running\n   emconfigure, which helps e.g. libjansson to build (#4036)\n - Fixed glGetString(GL_SHADING_LANGUAGE_VERSION) to return appropriate result\n   depending on if running on WebGL1 vs WebGL2, instead of hardcoding the result\n   (#4040)\n - Fixed a regression with CMake try_run() possibly failing, caused by the\n   addition of CMAKE_CROSSCOMPILING_EMULATOR in v1.32.3.\n - Fixed CMake to work in the case when NODE_JS is an array containing\n   parameters to be passed to Node.js. (#4045)\n - Fixed a memory issue that caused the Emscripten memory initializer file\n   (.mem.js) to be unnecessarily retained in memory during runtime (#4044)\n - Added support for complex valued mul and div ops.\n - Added new option \"Module.environment\" which allows overriding the runtime ENVIRONMENT_IS_WEB/ENVIRONMENT_IS_WORKER/ENVIRONMENT_IS_NODE/ENVIRONMENT_IS_SHELL fields.\n - Fixed an issue with SAFE_HEAP methods in async mode (#4046)\n - Fixed WebSocket constructor to work in web worker environment (#3849)\n - Fixed a potential issue with some browsers reporting gamepad axis values outside \\[-1, 1\\] (#3602)\n - Changed libcxxabi to be linked in last, so that it does not override weakly\n   linked methods in libcxx (#4053)\n - Implemented new JSDCE code optimization pass which removes at JS link stage\n   dead code that is not referenced anywhere (in addition to LLVM doing this for\n   C++ link stage).\n - Fixed a Windows issue where embedding memory initializer as a string in JS\n   code might cause corrupted output. (#3854)\n - Fixed an issue when spaces are present in directory names in response files\n   (#4062)\n - Fixed a build issue when using --tracing and -s ALLOW_MEMORY_GROWTH=1\n   simultaneously (#4064)\n - Greatly updated Emscripten support for SIMD.js intrinsics (non-SSE or NEON)\n - Fixed an issue where compiler would not generate a link error when JS library\n   function depended on a nonexisting symbol. (#4077)\n - Removed UTF16 and UTF32 marshalling code from being exported by default.\n - Removed the -s NO_BROWSER linker option and automated the detection of when\n   that option is needed.\n - Removed the JS implemented C++ symbol name demangler, now always depend on\n   the libcxxabi compiled one.\n - Fixed an issue where Emscripten linker would redundantly generate missing\n   function stubs for some functions that do exist.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.22...1.35.23\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.22...1.35.23\n    - Emscripten-Clang: no changes.\n\nv1.35.22: 1/13/2016\n-------------------\n - Updated to latest upstream LLVM trunk as of January 13th.\n - Bumped up the required LLVM version from LLVM 3.8 to LLVM 3.9.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.21...1.35.22\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.21...1.35.22\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.21...1.35.22\n\nv1.35.21: 1/13/2016\n-------------------\n - Improved support for handling GLFW2 keycodes.\n - Improved emranlib, system/bin/sdl-config and system/bin/sdl2-config to be\n   executable in both python2 and python3.\n - Fixed build flags -s AGGRESSIVE_VARIABLE_ELIMINATION=1 and -s USE_PTHREADS=2\n   to correctly work when run on a browser that does not support pthreads.\n - Fixed a build issue that caused sequences of \\r\\r\\n to be emitted on Windows.\n - Fixed an issue that prevented building LLVM on Visual Studio 2015\n   (emscripten-fastcomp-clang #7)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.20...1.35.21\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.20...1.35.21\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.20...1.35.21\n\nv1.35.20: 1/10/2016\n-------------------\n - Fixed -s USE_PTHREADS compilation mode to account that SharedArrayBuffer\n   specification no longer allows futex waiting on the main thread. (#4024)\n - Added new python2 vs python3 compatibility wrappers for emcmake, emconfigure, emmake and emar.\n - Fixed atomicrmw i64 codegen (#4025)\n - Optimized codegen to simplify \"x != 0\" to just \"x\" when output is a boolean.\n - Fixed a compiler crash when generating atomics code in debug builds of LLVM.\n - Fixed a compiler crash when generating SIMD.js code that utilizes\n   non-canonical length vectors (e.g. <float x 3>)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.19...1.35.20\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.19...1.35.20\n    - Emscripten-Clang: no changes.\n\nv1.35.19: 1/7/2016\n------------------\n - Updated to latest upstream LLVM trunk as of January 7th.\n - Full list of changes:\n    - Emscripten: no changes.\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.18...1.35.19\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.18...1.35.19\n\nv1.35.18: 1/7/2016\n------------------\n - Implemented getpeername() and fixed issues with handling getsockname() (#3997)\n - Fixed an issue with daylight saving time in mktime() (#4001)\n - Optimized pthreads code to avoid unnecessary FFI transitions (#3504)\n - Fixed issues with strftime() (#3993)\n - Deprecated memory growth support in asm.js.\n - Implemented llvm_bitreverse_i32() (#3976)\n - Fixed missing include header that affected building relooper on some compilers.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.17...1.35.18\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.17...1.35.18\n    - Emscripten-Clang: no changes.\n\nv1.35.17: 1/4/2016\n------------------\n - Updated to latest upstream LLVM trunk as of January 4th.\n - Full list of changes:\n    - Emscripten: no changes.\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.16...1.35.17\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.16...1.35.17\n\nv1.35.16: 1/4/2016\n------------------\n - Improved support for -s USE_PTHREADS=2 build mode and added support for Atomics.exchange().\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.15...1.35.16\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.15...1.35.16\n    - Emscripten-Clang: no changes.\n\nv1.35.15: 1/4/2016\n------------------\n - Fixed an error with glClearbufferfv not working. (#3961)\n - Improved file packager code so that file:// URLs work in Chrome too (#3965)\n - Fixed issues with the --memoryprofiler UI.\n - Fixed a Windows issue when generating system libraries in cache (#3939)\n - Fixed a regression from v1.35.13 where GLES2 compilation would not work when\n   -s USE_PTHREADS=1 was passed.\n - Added support for WebIDL arrays as input parameters to WebIDL binder.\n - Updated build support when using the LLVM wasm backend.\n - Added new linker option --threadprofiler which generates a threads dashboard\n   on the generated page for threads status overview. (#3971)\n - Improved backwards compatibility of building on GCC 4.3 - 4.6.\n - Fixed an asm.js validation issue when building against updated SIMD.js specification. (#3986)\n - Improved Rust support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.14...1.35.15\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.14...1.35.15\n    - Emscripten-Clang: no changes.\n\nv1.35.14: 12/15/2015\n--------------------\n - Updated to latest upstream LLVM trunk as of December 15th.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.13...1.35.14\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.13...1.35.14\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.13...1.35.14\n\nv1.35.13: 12/15/2015\n--------------------\n - Updated -s USE_PTHREADS code generation to reflect that the `SharedInt*Array`\n   hierarchy no longer exists in the SharedArrayBuffer spec.\n - Removed references to Atomic.fence() which no longer is part of the\n   SharedArrayBuffer specification.\n - Fixed an issue where JS code minifiers might generate bad code for cwrap\n   (#3945)\n - Updated compiler to issue a warning when --separate-asm is being used and\n   output suffix is .js.\n - Added new build option -s ONLY_MY_CODE which aims to eliminate most of the\n   Emscripten runtime and generate a very minimal compiler output.\n - Added new build option -s WASM_BACKEND=0/1 which controls whether to utilize\n   the upstream LLVM wasm emitting codegen backend.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.12...1.35.13\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.12...1.35.13\n    - Emscripten-Clang: no changes.\n\nv1.35.12: 11/28/2015\n--------------------\n - Update to latest upstream LLVM trunk as of November 28th.\n - Fix Emscripten to handle new style format outputted by llvm-nm.\n - Added new build option BINARYEN_METHOD to allow choosing which wasm\n   generation method to use.\n - Updates to Binaryen support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.11...1.35.12\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.11...1.35.12\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.11...1.35.12\n\nv1.35.11: 11/27/2015\n--------------------\n - Updated atomics test to stress 64-bit atomics better (#3892)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.10...1.35.11\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.10...1.35.11\n    - Emscripten-Clang: no changes.\n\nv1.35.10: 11/25/2015\n--------------------\n - Integration with Binaryen.\n - Add a performance warning when multiple FS.syncfs() calls are in flight simultaneously.\n - Correctly pass GLFW_REPEAT when sending key press repeats.\n - Improved filesystem performance when building in multithreaded mode (#3923)\n - Improve error detection when data file fails to load.\n - Clarified that -s NO_DYNAMIC_EXECUTION=1 and -s RELOCATABLE=1 build modes are mutually exclusive.\n - Added new build option -s NO_DYNAMIC_EXECUTION=2 which demotes eval() errors\n   to warnings at runtime, useful for iterating fixes in a codebase for multiple\n   eval()s  (#3930)\n - Added support to Module.locateFile(filename) to locate the pthread-main.js file (#3500)\n - Changed -s USE_PTHREADS=2 and -s PRECISE_F32=2 to imply --separate-asm\n   instead of requiring it, to be backwards compatible (#3829, #3933)\n - Fixed bad codegen for some 64-bit atomics (#3892, #3936)\n - When emitting NaN canonicalization warning, also print the location in code\n   where it occurs.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.9...1.35.10\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.9...1.35.10\n    - Emscripten-Clang: no changes.\n\nv1.35.9: 11/12/2015\n-------------------\n - Implement glfwSetInputMode when mode is GLFW_CURSOR and value is GLFW_CURSOR_NORMAL|GLFW_CURSOR_DISABLED\n - Add explicit abort() when dlopen() is called without linking support\n - Make emcc explicitly reinvoke itself from python2 if called from python3.\n - Optimize memory initializer to omit zero-initialized values (#3907)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.8...1.35.9\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.8...1.35.9\n    - Emscripten-Clang: no changes.\n\nv1.35.8: 11/10/2015\n-------------------\n - Removed obsoleted EXPORTED_GLOBALS build option.\n - Export filesystem as global object 'FS' in Emscripten runtime.\n - Fixed realpath() function on directories.\n - Fixed round() and roundf() to work when building without -s PRECISE_F32=1 and\n   optimize these to be faster (#3876)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.7...1.35.8\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.35.7: 11/4/2015\n------------------\n - Updated to latest upstream LLVM trunk version as of November 4th.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.6...1.35.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.6...1.35.7\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.6...1.35.7\n\nv1.35.6: 11/4/2015\n------------------\n - This tag was created for technical purposes, and has no changes compared to\n   v1.35.6.\n\nv1.35.5: 11/4/2015\n------------------\n - Removed Content-Length and Connection: close headers in POST requests.\n - Migrate to using the native C++11-implemented optimizer by default.\n - Fixed call to `glDrawBuffers(0, *);` (#3890)\n - Fixed lazy file system to work with closure (#3842)\n - Fixed gzip compression with lazy file system (#3837)\n - Added no-op gracefully failing stubs for process spawn functions (#3819)\n - Clarified error message that memory growth is not supported with shared modules (#3893)\n - Initial work on wasm support in optimizer\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.4...1.35.5\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.35.4: 10/26/2015\n-------------------\n - Move to legalization in the JS backend.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.3...1.35.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.3...1.35.4\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.3...1.35.4\n\nv1.35.3: 10/26/2015\n-------------------\n - Ignore O_CLOEXEC on NODEFS (#3862)\n - Improved --js-library support in CMake by treating these as libraries (#3840)\n - Still support -Wno-warn-absolute-paths (#3833)\n - Add support to zext <4 x i1> to <4x i32>\n - Emit emscripten versions of llvm and clang in clang --version\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.2...1.35.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.2...1.35.3\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.2...1.35.3\n\nv1.35.2: 10/20/2015\n-------------------\n - Rebase against upstream LLVM \"google/stable\" branch, bringing us to LLVM 3.8.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.1...1.35.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.35.1...1.35.2\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.35.1...1.35.2\n\nv1.35.1: 10/20/2015\n-------------------\n - Fixed a bug where passing -s option to LLVM would not work.\n - Work around a WebAudio bug on WebKit \"pauseWebAudio failed: TypeError: Not\n   enough arguments\" (#3861)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.35.0...1.35.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.35.0: 10/19/2015\n-------------------\n - Fixed out of memory abort message.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.12...1.35.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.34.12: 10/13/2015\n--------------------\n - Added new experimental build option -s SPLIT_MEMORY=1, which splits up the\n   Emscripten HEAP to multiple smaller slabs.\n - Added SDL2_ttf to Emscripten ports.\n - Added support for building GLES3 code to target WebGL 2. (#3757, #3782)\n - Fixed certain glUniform*() functions to work properly when called in\n   conjunction with -s USE_PTHREADS=1.\n - Fixed support for -l, -L and -I command line parameters to accept a space\n   between the path, i.e. \"-l SDL\". (#3777)\n - Fixed SSE2 support in optimized builds.\n - Changed the default behavior of warning when absolute paths are passed to -I\n   to be silent. To enable the absolute paths warning, pass\n   \"-Wwarn-absolute-paths\" flag to emcc.\n - Added new linker option -s ABORTING_MALLOC=0 that can be used to make\n   malloc() return 0 on failed allocation (Current default is to abort execution\n   of the page on OOM) (#3822)\n - Removed the default behavior of automatically decoding all preloaded assets on page startup (#3785)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.11...1.34.12\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.11...1.34.12\n    - Emscripten-Clang: no changes.\n\nv1.34.11: 9/29/2015\n-------------------\n - Fixed asm.js validation on autovectorized output\n - Fix an issue with printing to iostream in global ctors (#3824)\n - Added support for LLVM pow intrinsics with integer exponent.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.10...1.34.11\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.10...1.34.11\n    - Emscripten-Clang: no changes.\n\nv1.34.10: 9/25/2015\n-------------------\n - Added wasm compressor/decompressor polyfill (#3766)\n - Added support for sRGB texture formats.\n - Removed the deprecated --compression option.\n - Fixed an issue with asm.js validation for pthreads being broken since v1.34.7 (#3719)\n - Added built-in cpu performance profiler, which is enabled with linker flag --cpuprofiler. (#3781)\n - Added build-in memory usage profiler, which is enabled with linker flag --memoryprofiler. (#3781)\n - Fixed multiple arities per EM_ASM block (#3804)\n - Fixed issues with SSE2 an NaN bit patterns. (emscripten-fastcomp #116)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.9...1.34.10\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.9...1.34.10\n    - Emscripten-Clang: no changes.\n\nv1.34.9: 9/18/2015\n------------------\n - Fixed an issue with --llvm-lto 3 builds (#3765)\n - Optimized LZ4 compression\n - Fixed a bug where glfwCreateWindow would return success even on failure\n   (#3764)\n - Greatly optimized the -s SAFE_HEAP=1 linker flag option by executing the heap\n   checks in asm.js side instead.\n - Fixed the return value of EM_ASM_DOUBLE (#3770)\n - Implemented getsockname syscall (#3769)\n - Don't warn on unresolved symbols when LINKABLE is specified.\n - Fixed various issues with SSE2 compilation in optimized builds.\n - Fixed a breakage with -s USE_PTHREADS=2 (#3774)\n - Added support for GL_HALF_FLOAT in WebGL 2. (#3790)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.8...1.34.9\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.8...1.34.9\n    - Emscripten-Clang: no changes.\n\nv1.34.8: 9/9/2015\n-----------------\n - Fixed a race condition at worker startup (#3741)\n - Update emrun to latest, which improves unit test run automation with emrun.\n - Added support for LZ4 compressing file packages, used with the -s LZ4=1 linker flag. (#3754)\n - Fixed noisy build warning on \"unexpected number of arguments in call to strtold\" (#3760)\n - Added new linker flag --separate-asm that splits the asm.js module and the\n   handwritten JS functions to separate files.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.7...1.34.8\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.34.7: 9/5/2015\n-----------------\n - Fixed uses of `i64*` in side modules.\n - Improved GL support when proxying, and fake WebAudio calls when proxying.\n - Added new main loop timing mode EM_TIMING_SETIMMEDIATE for rendering with\n   vsync disabled (#3717)\n - Updated emrun to latest version, adds --safe_firefox_profile option to run\n   emrun pages in clean isolated environment.\n - Implemented glGetStringi() method for WebGL2/GLES3. (#3472, #3725)\n - Automatically emit loading code for EMTERPRETIFY_FILE if emitting html.\n - Added new build option -s USE_PTHREADS=2 for running pthreads-enabled pages\n   in browsers that do not support SharedArrayBuffer.\n - Added support for building SSE2 intrinsics based code (emmintrin.h), when\n   -msse2 is passed to the build.\n - Added exports for getting FS objects by their name (#3690)\n - Updated LLVM to latest upstream PNaCl version (Clang 3.7, July 29th).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.6...1.34.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.6...1.34.7\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.34.6...1.34.7\n\nv1.34.6: 8/20/2015\n------------------\n - Added new build option -s EMULATED_FUNCTION_POINTERS=2.\n - Fixed a bug with calling functions pointers that take float as parameter\n   across dynamic modules.\n - Improved dynamic linking support with -s LINKABLE=1.\n - Added new build option -s MAIN_MODULE=2.\n - Cleaned up a few redundant linker warnings (#3702, #3704)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.5...1.34.6\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.5...1.34.6\n    - Emscripten-Clang: no changes.\n\nv1.34.5: 8/18/2015\n------------------\n - Added Bullet physics, ogg and vorbis to emscripten-ports.\n - Added FreeType 2.6 to emscripten-ports.\n - Fixed CMake handling when building OpenCV.\n - Fixed and issue with exceptions being thrown in empty glBegin()-glEnd()\n   blocks (#3693)\n - Improved function pointer handling between dynamically linked modules\n - Fixed some OpenAL alGetSource get calls (#3669)\n - Fixed issues with building the optimizer on 32-bit Windows (#3673)\n - Increased optimizer stack size on Windows to 10MB (#3679)\n - Added support for passing multiple input files to opt, to speed up\n   optimization and linking in opt.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.4...1.34.5\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.4...1.34.5\n    - Emscripten-Clang: no changes.\n\nv1.34.4: 8/4/2015\n-----------------\n - Add special handling support for /dev/null as an input file (#3552)\n - Added basic printf support in NO_FILESYSTEM mode (#3627)\n - Update WebVR support to the latest specification, and add support for\n   retrieving device names\n - Improved --proxy-to-worker build mode with proxying (#3568, #3623)\n - Generalized EXPORT_FS_METHODS to EXPORT_RUNTIME_METHODS\n - Added node externs for closure\n - Fixed a memory allocation bug in pthreads code (#3636)\n - Cleaned up some debug assertion messages behind #ifdef ASSERTIONS (#3639)\n - Fixed umask syscall (#3637)\n - Fixed double alignment issue with formatStrind and emscripten_log (#3647)\n - Added new EXTRA_EXPORTED_RUNTIME_METHODS build option\n - Updated emrun to latest version\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.3...1.34.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.3...1.34.4\n    - Emscripten-Clang: no changes.\n\nv1.34.3: 7/15/2015\n------------------\n - Move libc to musl+syscalls\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.2...1.34.3\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.34.2: 7/14/2015\n------------------\n - Upgrade to new SIMD.js polyfill version and improved SIMD support.\n - Improved WebGL support in --proxy-to-worker mode (#3569)\n - Removed warning on unimplemented JS library functions\n - Fix WebGL 2 support with closure compiler\n - Fixed an issue with WebRTC support (#3574)\n - Fixed emcc to return a correct error process exit code when invoked with no input files\n - Fixed a compiler problem where global data might not get aligned correctly for SIMD.\n - Fixed a LLVM backend problem which caused recursive stack behavior when\n   linking large codebases, which was seen to cause a stack overflow crash on\n   Windows.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.1...1.34.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.34.1...1.34.2\n    - Emscripten-Clang: no changes.\n\nv1.34.1: 6/18/2015\n------------------\n - Fixed an issue with resize canvas not working with GLFW.\n - Fixed handling of empty else blocks.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.34.0...1.34.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.34.0: 6/16/2015\n------------------\n - Fixed an issue when generating .a files from object files that reside on\n   separate drives on Windows (#3525).\n - Added a missing dependency for GLFW (#3530).\n - Removed the Emterpreter YIELDLIST option.\n - Added support for enabling memory growth before the runtime is ready.\n - Added a new feature to store the memory initializer in a string literal\n   inside the generated .js file.\n - Fixed a code miscompilation issue with a constexpr in fcmp.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.33.2...1.34.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.33.2...1.34.0\n    - Emscripten-Clang: no changes.\n\nv1.33.2: 6/9/2015\n-----------------\n - Added support for OpenAL Extension AL_EXT_float32 (#3492).\n - Added support for handling command line flags -M and -MM (#3518).\n - Fixed a code miscompilation issue with missing ';' character (#3520).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.33.1...1.33.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.33.1...1.33.2\n    - Emscripten-Clang: no changes.\n\nv1.33.1: 6/3/2015\n-----------------\n - Added support for multithreading with the POSIX threads API (pthreads), used\n   when compiling and linking with the -s USE_PTHREADS=1 flag (#3266).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.33.0...1.33.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.33.0...1.33.1\n    - Emscripten-Clang: no changes.\n\nv1.33.0: 5/29/2015\n------------------\n - Fix an issue with writing to /dev/null (#3454).\n - Added a hash to objects inside .a files to support to linking duplicate\n   symbol names inside .a files (#2142).\n - Provide extensions ANGLE_instanced_arrays and EXT_draw_buffers as aliases to\n   the WebGL ones.\n - Fixed LLVM/Clang to build again on Windows after previous LLVM upgrade.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.32.4...1.33.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.32.4...1.33.0\n    - Emscripten-Clang: no changes.\n\nv1.32.4: 5/16/2015\n------------------\n - Update LLVM and Clang to PNaCl's current 3.7 merge point (April 17 2015)\n - Added libpng to Emscripten-ports.\n - Added intrinsic llvm_fabs_f32.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.32.3...1.32.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.32.3...1.32.4\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.32.3...1.32.4\n\nv1.32.3: 5/15/2015\n------------------\n - Improved dynamic linking support.\n - Added new option to file_packager.py to store metadata externally.\n - Improved CMake support with CMAKE_CROSSCOMPILING_EMULATOR (#3447).\n - Added support for `sysconf(_SC_PHYS_PAGES)` (#3405, 3442).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.32.2...1.32.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.32.2...1.32.3\n    - Emscripten-Clang: no changes.\n\nv1.32.2: 5/8/2015\n-----------------\n - Removed a (name+num)+num -> name+newnum optimization, which caused heavy\n   performance regressions in Firefox when the intermediate computation wraps\n   around the address space (#3438).\n - Improved dynamic linking support.\n - Improved emterpreter when doing dynamic linking.\n - Fixed an issue with source maps debug info containing zeroes as line numbers.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.32.1...1.32.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.32.1...1.32.2\n    - Emscripten-Clang: no changes.\n\nv1.32.1: 5/2/2015\n-----------------\n - Removed old deprecated options -s INIT_HEAP, MICRO_OPTS, CLOSURE_ANNOTATIONS,\n   INLINE_LIBRARY_FUNCS, SHOW_LABELS, COMPILER_ASSERTIONS and\n   COMPILER_FASTPATHS.\n - Added support for dynamic linking and dlopen().\n - Fixed a compilation issue that affected -O2 builds and higher (#3430).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.32.0...1.32.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.32.0...1.32.1\n    - Emscripten-Clang: no changes.\n\nv1.32.0: 4/28/2015\n------------------\n - Compile .i files properly as C and not C++ (#3365).\n - Removed old deprecated options -s PRECISE_I32_MUL, CORRECT_ROUNDINGS,\n   CORRECT_OVERFLOWS, CORRECT_SIGNS, CHECK_HEAP_ALIGN, SAFE_HEAP_LINES,\n   SAFE_HEAP >= 2, ASM_HEAP_LOG, SAFE_DYNCALLS, LABEL_DEBUG, RUNTIME_TYPE_INFO\n   and EXECUTION_TIMEOUT, since these don't apply to fastcomp, which is now the\n   only enabled compilation mode.\n - Preliminary work towards supporting dynamic linking and dlopen().\n - Fixed an issue where emrun stripped some characters at output (#3394).\n - Fixed alignment issues with varargs.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.31.3...1.32.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.31.3...1.32.0\n    - Emscripten-Clang: no changes.\n\nv1.31.3: 4/22/2015\n------------------\n - Improved support for -E command line option (#3365).\n - Removed the old optimizeShifts optimization pass that was not valid for\n   asm.js code.\n - Fixed an issue when simultaneously using EMULATE_FUNCTION_POINTER_CASTS and\n   EMULATED_FUNCTION_POINTERS.\n - Fixed an issue with -s PRECISE_I64_MATH=2 not working (#3374).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.31.2...1.31.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.31.2...1.31.3\n    - Emscripten-Clang: no changes.\n\nv1.31.2: 4/20/2015\n------------------\n - Added support for file suffixes .i and .ii (#3365).\n - Fixed an issue with embind and wide strings (#3299).\n - Removed more traces of the old non-fastcomp compiler code.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.31.1...1.31.2\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.31.1: 4/17/2015\n------------------\n - Added support for unicode characters in EM_ASM() blocks (#3348).\n - Removed the pointer masking feature as experimental and unsupported.\n - Fixed an issue where exit() did not terminate execution of Emterpreter (#3360).\n - Removed traces of the old non-fastcomp compiler code.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.31.0...1.31.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.31.0...1.31.1\n    - Emscripten-Clang: no changes.\n\nv1.31.0: 4/14/2015\n------------------\n - Remove references to unsupported EMCC_FAST_COMPILER mode, fastcomp is always enabled (#3347).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.6...1.31.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.6...1.31.0\n    - Emscripten-Clang: no changes.\n\nv1.30.6: 4/14/2015\n------------------\n - Removed support for the deprecated jcache functionality (#3313).\n - Added support to emscripten_GetProcAddress() to fetch symbols with the ANGLE\n   suffix (#3304, #3315).\n - Added immintrin.h header file to include all SSE support.\n - Added an async option to ccall (#3307).\n - Stopped from using 0 as a valid source ID for OpenAL (#3303).\n - When project has disabled exception catching, build an exceptions-disabled\n   version of libcxx.\n - Split libcxx into two parts to optimize code size for projects that only need\n   small amount of libcxx (#2545, #3308).\n - Avoid fprintf usage in emscripten_GetProcAddress() to allow using it with -s\n   NO_FILESYSTEM=1 (#3327).\n - Removed old deprecated functionalities USE_TYPED_ARRAYS, FHEAP, GC emulation\n   and non-asmjs-emscripten ABI.\n - Don't refer to prefixed GL extensions when creating a GL context (#3324).\n - Removed support code for x86_fp80 type (#3341).\n - Optimize EM_ASM() calls even more (#2596).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.5...1.30.6\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.5...1.30.6\n    - Emscripten-Clang: no changes.\n\nv1.30.5: 4/7/2015\n-----------------\n - Fixed WebIDL operation when closure is enabled after the previous EM_ASM()\n   optimizations.\n - Optimized jsCall() to handle variadic cases of number of arguments faster\n   (#3290, #3305).\n - Removed support for the getwd() function (#1115, #3309).\n - Fixed a problem with -s IGNORED_FUNCTIONS and -s DEAD_FUNCTIONS not working\n   as expected (#3239).\n - Fixed an issue with -s EMTERPRETIFY_ASYNC=1 and emscripten_sleep() not\n   working (#3307).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.4...1.30.5\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.4...1.30.5\n    - Emscripten-Clang: no changes.\n\nv1.30.4: 4/3/2015\n-----------------\n - Optimized the performance and security of EM_ASM() blocks by avoiding the use\n   of eval() (#2596).\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.3...1.30.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.3...1.30.4\n    - Emscripten-Clang: no changes.\n\nv1.30.3: 4/3/2015\n-----------------\n - Improved error handling in library_idbstore.js.\n - Fixed an asm.js validation issue with EMULATE_FUNCTION_POINTER_CASTS=1 feature (#3300).\n - Fixed Clang build by adding missing nacltransforms project after latest\n   LLVM/Clang upstream merge.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.2...1.30.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.2...1.30.3\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.30.2...1.30.3\n\nv1.30.2: 4/1/2015\n-----------------\n - Added support to writing to mmap()ed memory by implementing msync() (#3269).\n - Updated SDL2 port to version 7.\n - Exported new singleton function Module.createContext() for creating a GL\n   context from SDL2.\n - Added support for asm.js/Emscripten arch in Clang.\n - Finished LLVM 3.6 upgrade merge.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.1...1.30.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.1...1.30.2\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.30.1...1.30.2\n\nv1.30.1: 3/24/2015\n------------------\n - Upgraded LLVM+Clang from version 3.5 to version 3.6.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.30.0...1.30.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.30.0...1.30.1\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.30.0...1.30.1\n\nv1.30.0: 3/24/2015\n------------------\n - Fixed a bug where html5.h API would not remove event handlers on request.\n - Fixed a regression issue that broke building on Windows when attempting to\n   invoke tools/gen_struct_info.py.\n - Improved memory growth feature to better handle growing to large memory sizes\n   between 1GB and 2GB (#3253).\n - Fixed issues with emrun with terminating target browser process, managing\n   lingering sockets and command line quote handling.\n - Fixed a bug where unsigned integer return values in embind could be returned\n   as signed (#3249).\n - Improved handling of lost GL contexts.\n - Changed malloc to be fallible (return null on failure) when memory growth is\n   enabled (#3253).\n - Fixed a bug with WebIDL not being able to handle enums (#3258).\n - Updated POINTER_MASKING feature to behave as a boolean rather than a mask\n   (#3240).\n - Improved \"emcmake cmake\" on Windows to automatically remove from path any\n   entries that contain sh.exe in them, which is not supported by CMake.\n - Fixed an issue with symlink handling in readlink (#3277).\n - Updated SDL2 port to version 6.\n - Removed the obsolete FAST_MEMORY build option.\n - Added reciprocalApproximation and reciprocalSqrtApproximation SIMD intrinsics.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.12...1.30.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.12...1.30.0\n    - Emscripten-Clang: no changes.\n\nv1.29.12: 3/15/2015\n-------------------\n - Fix a bug where SDL_malloc and SDL_free were not available. (#3247)\n - Fix various issues with emrun usage. (#3234)\n - Fixed an off-by-one memory access in native optimizer.\n - Improve emterpreter support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.11...1.29.12\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.29.11: 3/11/2015\n-------------------\n - Remove the requirement to pass -s PRECISE_F32=1 manually when building with\n   SIMD support.\n - Fix a temp directory leak that could leave behind empty directories in the\n   temp directory after build (#706)\n - Improve support for growable Emscripten heap in asm.js mode.\n - Added a warning message when generating huge asset bundles with file packager.\n - Fixed a bug where emscripten_get_gamepad_status might throw a JS exception if\n   called after a gamepad was disconnected.\n - Improve emterpreter sleep support.\n - Optimize code generation when multiple consecutive bitshifts are present.\n - Optimize redundant stack save and restores, and memcpy/memsets.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.10...1.29.11\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.10...1.29.11\n    - Emscripten-Clang: no changes.\n\nv1.29.10: 2/19/2015\n-------------------\n - Add a warning message when generating code that has a very large number of\n   variables, which optimization flags could remove.\n - Improve support for SIMD casts and special loads.\n - Fix the process return code when using EMCONFIGURE_JS=1.\n - Improved the error message in abort().\n - Fix main loop handling during emterpreter sync save/load.\n - Handle emscripten_async_call and friends during sleep, by pausing all\n   `safeSet*()` operations.\n - Add support for Google WTF when building with --tracing.\n - Improve emterpreter stability with fuzzing.\n - Add an option to load the memory initializer file from a typed array (#3187)\n - Remove linker warning message when linking to -lm, since Emscripten includes\n   musl that implements the math libraries built-in.\n - Add support for SDL_WM_SetCaption(), which calls to Module['setWindowTitle'],\n   or if not present, sets the web page title. (#3192)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.9...1.29.10\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.9...1.29.10\n    - Emscripten-Clang: no changes.\n\nv1.29.9: 2/9/2015\n-------------------\n - Documented FORCE_ALIGNED_MEMORY to be no longer supported.\n - Fixes issues with native optimizer handling of \"if () else {}\" statements.\n   (#3129)\n - Improved cross-browser support for EMSCRIPTEN_FULLSCREEN_FILTERING_NEAREST.\n   (#3165)\n - Added new linker option --profiling-funcs, which generates output that is\n   otherwise minified, except that function names are kept intact, for use in\n   profilers and getting descriptive call stacks.\n - The Module object is no longer written in global scope. (#3167)\n - Added new `emscripten_idb_*` API. (#3169)\n - Added new function emscripten_wget_data().\n - Add support for GL_RED with GLES3/WebGL2. (#3176)\n - Added basic WebVR support. (#3177)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.8...1.29.9\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.29.8: 1/31/2015\n-------------------\n - Fix a temp file leak with emterpreter. (#3156)\n - Fix a typo that broke glBlitFramebuffer. (#3159)\n - Added scandir() and alphasort() from musl. (#3161)\n - Add a warning if multiple .a files with same basename are being linked\n   together. (#2619)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.7...1.29.8\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.7...1.29.8\n    - Emscripten-Clang: no changes.\n\nv1.29.7: 1/28/2015\n-------------------\n - Fixed an issue with backwards compatibility in emscripten-ports. (#3144)\n - Warn on duplicate entries in archives. (#2619)\n - Removed the MAX_SETJMPS limitation to improve setjmp/longjpmp support.\n   (#3151)\n - Improve the native optimizer to not emit empty if clauses in some cases.\n   (#3154)\n - Optimize Math.clz32, Math.min, NaN, and inf handling in asm.js.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.6...1.29.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.6...1.29.7\n    - Emscripten-Clang: no changes.\n\nv1.29.6: 1/23/2015\n-------------------\n - Fixed an issue where calling `glGen*()` when the GL context was lost might\n   throw a JS exception, instead a GL_INVALID_OPERATION is now recorded.\n - Improve label handling in native optimizer.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.5...1.29.6\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.29.5: 1/23/2015\n-------------------\n - Enable compiling source files with the extension \".c++\".\n - Enable versioning of the emscripten ports so that older Emscripten versions\n   can keep using older versions of the ports (#3144)\n - Added a whitelist option to emterpreter, a linker flag of form -s\n   EMTERPRETIFY_WHITELIST=[\"symbol1\",\"symbol2\"]. (#3129)\n - Improved emscripten_get_pointerlock_status() to always fill the output\n   structure even when pointer lock is not supported.\n - Added an environment variable EMCC_NO_OPT_SORT=0/1 option to configure\n   whether the generated output should have the functions sorted by length,\n   useful for debugging.\n - Added new tool tools/merge_pair.py which allows bisecting differences between\n   two output files to find discrepancies.\n - Improved parsing in cashew.\n - Improved output message from emconfigure and emmake when inputs are unexpected.\n - Added built-in asm handler for LLVM fabs operation.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.4...1.29.5\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.4...1.29.5\n    - Emscripten-Clang: no changes.\n\nv1.29.4: 1/21/2015\n-------------------\n - Added new C <-> JS string marshalling functions asciiToString(),\n   stringToAscii(), UTF8ToString(), stringToUTF8() that can be used to copy\n   strings across the JS and C boundaries. (#2363)\n - Added new functions lengthBytesUTF8(), lengthBytesUTF16() and\n   lengthBytesUTF32() to allow computing the byte lengths of strings in\n   different encodings. (#2363)\n - Upgraded SDL2 port to version 4.\n - Add support for saving the emterpreter stack when there are functions\n   returning a value on the stack (#3129)\n - Notice async state in emterpreter trampolines (#3129)\n - Optimize SDL1 pixel copying to the screen.\n - Fixed an issue with emterpreter parsing. (#3141)\n - Fixed an issue with native optimizer and -s PPRECISE_F32=1.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.3...1.29.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.3...1.29.4\n    - Emscripten-Clang: no changes.\n\nv1.29.3: 1/16/2015\n-------------------\n - Fixed a bug with OpenGL context initialization enableExtensionsByDefault. (#3135)\n - Fixed an issue with nested if parsing in native optimizer.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.2...1.29.3\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.29.2: 1/16/2015\n-------------------\n - Fixed an issue with embind compilation in LLVM 3.5.\n - Fixed an issue with SDL audio queueing stability, which would queue audio too\n   eagerly and cause stutter in some applications (#3122, #3124)\n - Enabled native JS optimizer to be built automatically on Windows, requires\n   VS2012 or VS2013.\n - Improve error message to reflect the fact that DLOPEN_SUPPORT is currently\n   not available (#2365)\n - Improve SIMD load and store support.\n - Upgraded SDL2 port to version 3.\n - Fix a bug with native JS optimizer and braces in nested ifs.\n - Improved emterpreter support.\n - Fixed LLVM 3.5 to build with Visual Studio on Windows (emscripten-fastcomp #61)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.1...1.29.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.1...1.29.2\n    - Emscripten-Clang: no changes.\n\nv1.29.1: 1/7/2015\n-------------------\n - Migrated to upstream PNaCl LLVM+Clang 3.5 from the previous 3.4.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.29.0...1.29.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.29.0...1.29.1\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.29.0...1.29.1\n\nv1.29.0: 1/7/2015\n-------------------\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.28.3...1.29.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.28.3...1.29.0\n    - Emscripten-Clang: no changes.\n\nv1.28.3: 1/4/2015\n-------------------\n - embuilder.py tool\n - Many fixes for native optimizer on Windows\n - Perform LLVM LTO in a separate invocation of opt, so that it does not mix\n   with legalization and other stuff we do at link time\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.28.2...1.28.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.28.2...1.28.3\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.28.2...1.28.3\n\nv1.28.2: 12/17/2014\n-------------------\n - Enable native optimizer by default\n - Disable slow2asm legacy testing (asm.js mode in pre-fastcomp)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.28.1...1.28.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.28.1...1.28.2\n    - Emscripten-Clang: no changes.\n\nv1.28.1: 12/15/2014\n-------------------\n - Use a lot more MUSL math functions\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.28.0...1.28.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.28.0...1.28.1\n    - Emscripten-Clang: no changes.\n\nv1.28.0: 12/12/2014\n-------------------\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.27.2...1.28.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.27.2...1.28.0\n    - Emscripten-Clang: no changes.\n\nv1.27.2: 12/10/2014\n-------------------\n - Added more complete support for SSE1 SIMD intrinsics API. (#2792)\n - Fixed an issue with glTexImage2D on GL_LUMINANCE + GL_FLOAT textures. (#3039)\n - Use the cashew asm.js parser in native optimizer.\n - Fixed issues with IE when running closure minified pages. (#3012)\n - Enabled asm.js validation for SIMD compilation.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.27.1...1.27.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.27.1...1.27.2\n    - Emscripten-Clang: no changes.\n\nv1.27.1: 11/20/2014\n-------------------\n - Migrated to upstream PNaCl LLVM+Clang 3.4 from the previous 3.3.\n - Added a FindOpenGL.cmake to support find_package() for OpenGL in CMake scripts.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.27.0...1.27.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.27.0...1.27.1\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.27.0...1.27.1\n\nv1.27.0: 11/20/2014\n-------------------\n - Added new work in progress option -s NATIVE_OPTIMIZER=1 that migrates\n   optimizer code from JS to C++ for better performance.\n - Fixed an embind issue when compiling with closure (#2974)\n - Fixed an embind issue with unique_ptr (#2979)\n - Fixed a bug with new GL context initialization in proxy to worker mode.\n - Fixed an issue where GL context event handlers would leak after a GL context\n   has been freed.\n - Optimized embind operation in Chrome by avoiding using Function.prototype.bind().\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.26.1...1.27.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.26.1...1.27.0\n    - Emscripten-Clang: no changes.\n\nv1.26.1: 11/7/2014\n------------------\n - Fixed emscripten::val handle for special js values (#2930)\n - Implemented SDL 1.2 SDL_SetClipRect / SDL_GetClipRect (#2931)\n - Added support for building zlib from Emscripten Ports with linker flag -s USE_ZLIB=1.\n - Improved experimental GLES3 support.\n - Fixed issues with llseek (#2945)\n - Enable using emscripten_get_now() in web workers (#2953)\n - Added stricter input data validation in GL code.\n - Added new HTML5 C API for managing fullscreen mode transitions to resolve\n   cross-browser issue #2556 (#2975)\n - Fixed an issue with using structs in va_args (#2923)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.26.0...1.26.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.26.0...1.26.1\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.26.0...1.26.1\n\nv1.26.0: 10/29/2014\n-------------------\n - Fixed an issue where emar would forward --em-config to llvm-ar (#2886)\n - Added a new \"emterpreter\" feature that allows running Emscripten compiled\n   code in interpreted form until asm.js compilation is ready (-s\n   EMTERPRETIFY=1).\n    - For more information, see\n      https://groups.google.com/d/msg/emscripten-discuss/vhaPL9kULxk/_eD2G06eucwJ\n - Added new \"Emscripten Ports\" architecture that enables building SDL2 with -s\n   USE_SDL=2 command line flag.\n - Added support for SDL 1.2 SDL_CreateRGBSurfaceFrom() function.\n - Improved experimental SIMD support.\n - Use only minimum necessary digits to print floating point literals in\n   generated JS code for smaller code output.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.25.2...1.26.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.25.2...1.26.0\n    - Emscripten-Clang: no changes.\n\nv1.25.2: 10/16/2014\n-------------------\n - Fixed a bug in tmpfile() function not allocating the mode argument correctly.\n - Fixed a bug with handling empty files in IDBFS (#2845)\n - Added an implementation of the utimes() function (#2845)\n - Added experimental WebGL 2.0 support with the linker flag -s USE_WEBGL2=1.\n   (#2873)\n - Fixed a UnboundTypeError occurring in embind (#2875)\n - Fixed an error \"IndexSizeError: Index or size is negative or greater than the\n   allowed amount\" being thrown by Emscripten SDL 1.2 surface blit code. (#2879)\n - Fixed a JS minifier issue that generated \"x--y from x - -y\" (#2869)\n - Added a new emcc command line flag \"--cache <dir>\" to control the location of\n   the Emscripten cache directory (#2816)\n - Implemented SDL_ConvertSurface() and added support for SDL_SRCALPHA in\n   SDL_SetAlpha (#2871)\n - Fixed issues with the GL library handling of invalid input values.\n - Optimized SDL copyIndexedColorData function (#2890)\n - Implemented GLES3 emulation for glMapBufferRange() for upcoming WebGL 2\n   support, using the -s FULL_ES3=1 linker option.\n - Fixed a bug where setting up and cancelling the main loop multiple times\n   would stack up the main loop to be called too frequently (#2839)\n - Introduced a new API emscripten_set_main_loop_timing() for managing the\n   Emscripten main loop calling frequency (#2839)\n - Added new optimization flags SDL.discardOnLock and SDL.opaqueFrontBuffer to\n   Emscripten SDL 1.2 SDL_LockSurface() and SDL_UnlockSurface() (#2870)\n - Fixed a bug with glfwGetProcAddress().\n - Added option to customize GLOBAL_BASE (the starting address of global\n   variables in the Emscripten HEAP).\n - Added the ability to register mouseover and mouseout events from the HTML5\n   API.\n - Improved experimental SIMD support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.25.1...1.25.2\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.25.1: 10/1/2014\n------------------\n - Updated heap resize support code when -s ALLOW_MEMORY_GROWTH=1 is defined.\n - Updated libc++ to new version from upstream svn revision 218372, 2014-09-24.\n - Fixed a bug where building on Windows might generate output JS files with\n   incorrect syntax (emscripten-fastcomp #52)\n - Improved experimental SIMD support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.25.0...1.25.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.25.0...1.25.1\n    - Emscripten-Clang: no changes.\n\n\nv1.25.0: 9/30/2014\n------------------\n - Fixed a warning message with -s EXPORTED_FUNCTIONS.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.24.1...1.25.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.24.1: 9/27/2014\n------------------\n - Fixed issues with the tmpnam and tmpfile functions (#2797, 2798)\n - Fixed CMake package find code to not search any system directories, because\n   Emscripten is a cross-compiler.\n - Improved support for the proposed solution for heap resizing.\n - Fixed an issue where one could not run a main loop without having first a GL\n   context created when -s FULL_ES2 or -s LEGACY_GL_EMULATION were set.\n - For compatibility, Emscripten will no longer warn about missing library files\n   for -lGL, -lGLU and -lglut libraries, since Emscripten provides the\n   implementation for these without having to explicitly link to anything.\n - Added support for readonly (const) attributes and automatically call\n   Pointer_stringify on DOMStrings in WebIDL.\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Added support for GLFW 3.0.\n - Added new Emscripten HTML 5 functions emscripten_set_mouseenter_callback()\n   and emscripten_set_mouseleave_callback().\n - Emscripten now recognizes an environment variable\n   EMCC_JSOPT_BLACKLIST=a,b,c,d which can be used to force-disable Emscripten to\n   skip running specific JS optimization passes. This is intended as a debugging\n   aid to help zoom in on JS optimizer bugs when compiling with -O1 and greater.\n   (#2819)\n - Fixed a bug where Module['TOTAL_STACK'] was ignored (#2837).\n - Improved SIMD support for the experimental Ecmascript SIMD spec. Preliminary asm.js validation.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.24.0...1.24.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.24.0...1.24.1\n    - Emscripten-Clang: no changes.\n\nv1.24.0: 9/16/2014\n------------------\n - Renamed the earlier Module.locateFilePackage() to Module.locateFile() added\n   in v1.22.2 to better reflect its extended usage.\n - Improved exceptions support with exception_ptr.\n - Fixed a bug where restoring files from IDBFS would not preserve their file modes.\n - Fixed and issue where one could not pass a null pointer to strftime() function.\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.5...1.24.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.23.5...1.24.0\n    - Emscripten-Clang: no changes.\n\nv1.23.5: 9/12/2014\n------------------\n - Added new functions emscripten_get_device_pixel_ratio(),\n   emscripten_set_canvas_css_size() and emscripten_get_canvas_css_size() which\n   allow handling High DPI options from C code.\n - Fixed bugs with timzone-related functions in the JS-implemented C standard\n   library.\n - Implemented clock_gettime(CLOCK_MONOTONIC) and added a new function\n   emscripten_get_now_is_monotonic() to query whether the JS-provided timer is\n   monotonic or not.\n - Fixed an issue where the user could not pass --llvm-opts=xxx when also\n   specifying --llvm-lto=2.\n - Renamed the linker option -profiling to --profiling for consistency. The old\n   form is still supported.\n - Formalized the set of valid characters to be used in files passed to the\n   file_packager.py (#2765).\n - Implemented SDL function SDL_BlitScaled.\n - Fixed a bug with right modifier keys in SDL.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.4...1.23.5\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.23.4: 9/7/2014\n------------------\n - Implemented new targetX and targetY fields for native HTML5 mouse and touch\n   events (#2751)\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.3...1.23.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.23.3...1.23.4\n    - Emscripten-Clang: no changes.\n\nv1.23.3: 9/7/2014\n------------------\n - Removed the scons-tools SCons build system as unused.\n - Fixed an issue where applications could not handle WebGL context creation\n   failures gracefully.\n - Fixed a bug where the stringToC function in ccall/cwrap might not allocate\n   enough space to hold unicode strings.\n - Removed CMake from attempting to link to library -ldl when building projects,\n   by unsetting CMAKE_DL_LIBS.\n - Fixed a bug where write_sockaddr might return undefined data in its output\n   structure.\n - Added a new _experimental_ -s POINTER_MASKING=1 linker option that might help\n   JS VMs to optimize asm.js code.\n - Added first version of a memory tracing API to profile memory usage in\n   Emscripten applications.\n - Added functions glob and globfree from musl regex library.\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.2...1.23.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.23.2...1.23.3\n    - Emscripten-Clang: no changes.\n\nv1.23.2: 9/2/2014\n------------------\n - Adjusted the process and group ids reported by the stub library functions to\n   be closer to native unix values.\n - Set stack to be aligned to 16 bytes. (#2721)\n - Fixed a compiler error \"unresolved symbol:\n   __cxa_decrement_exception_refcount\" (#2715)\n - Added a new warning message that instructs that building .so, .dll and .dylib\n   files is not actually supported, and is faked for compatibility reasons for\n   existing build chains. (#2562)\n - Fixed problems with SDL mouse scrolling (#2643)\n - Implemented OpenAL function alSourceRewind.\n - Removed several old header files from the Emscripten repository that had been\n   included for emulation purposes (zlib.h, png.h, tiff.h, tiffio.h), but their\n   implementation is not included.\n - Work around an issue in d8 with binary file reading that broke e.g. printf\n   when running in d8. (#2731)\n - Rigidified the semantics of Module.preRun and Module.postRun: These must\n   always be JS arrays, single functions are not allowed (#2729)\n - Improved compiler warning diagnostics when generating output that will not\n   validate as asm.js (#2737)\n - Updated to latest emrun version to enable support for passing arguments with\n   hyphens to the program. (#2742)\n - Added Bessel math functions of the first kind  (j0, j1, jn) from musl.\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.1...1.23.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.23.1...1.23.2\n    - Emscripten-Clang: no changes.\n\nv1.23.1: 8/26/2014\n------------------\n - Add support for the Chrome variant of the Gamepad API.\n - Updates to SIMD.js support.\n - Implemented glutSetCursor function.\n - Added new link-time options -s NO_FILESYSTEM=1 and -s NO_BROWSER=1 to enable\n   reducing output file sizes when those functionalities are not necessary.\n - Added a new option --closure 2 to allow running closure even on the asm.js output.\n - Fixed a regression bug that broke the use of\n   emscripten_set_socket_error_callback() in emscripten.h\n - Removed the support for old discontinued Mozilla Audio Data API in src/library_sdl.js.\n - Removed the support for using Web Audio ScriptProcessorNode to stream audio.\n - Improved SDL audio streaming by using the main rAF() callback instead of a\n   separate setTimeout() callback to schedule the audio data.\n - Deprecated compiling without typed arrays support.\n - Migrated to using musl PRNG functions. Fixes reported bugs about the quality of randomness (#2341)\n - Improved SIMD support for the experimental Ecmascript SIMD spec.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.23.0...1.23.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.23.0...1.23.1\n    - Emscripten-Clang: no changes.\n\nv1.23.0: 8/21/2014\n------------------\n - Added support for array attributes in WebIDL bindings.\n - Allow cloning pointers that are scheduled for deletion in embind, and add\n   support for null in embind_repr().\n - Fixed possible issues with rounding and flooring operations.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.22.2...1.23.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.22.2: 8/19/2014\n------------------\n - Adds stack overflow checks when building with the link flag -s ASSERTIONS=1.\n - Fix an issue where EM_ASM was not usable with closure when closure removed\n   the Module object (#2639)\n - The locale \"POSIX\" is now recognized (#2636)\n - Fixed a problem with embind on IE11.\n - Added OpenAL functions alSource3i, alListener3f, alGetEnumValue and\n   alSpeedOfSound and also recognize ALC_MAX_AUXILIARY_SENDS.\n - Fixed an issue where emcc would create .o files in the current directory when\n   compiling multiple code files simultaneously (#2644)\n - The -s PROXY_TO_WORKER1= option now looks for a GET option \"?noProxy\" in the\n   page URL to select at startup time whether proxying should be on or off.\n - Added new functions emscripten_yield, emscripten_coroutine_create and\n   emscripten_coroutine_next which implement coroutines when building with the\n   -s ASYNCIFY=1 option.\n - Optimized the size of intermediate generated .o files by omitting LLVM debug\n   info from them when not needed. (#2657)\n - Fixed WebSocket connection URLs to allow a port number in them, e.g.\n   \"server:port/addr\" (2610)\n - Added support for void* to the WebIDL binder, via the identifier VoidPtr.\n - Optimize emcc to not copy bitcode files around redundantly.\n - Fix stat() to correctly return ENOTDIR when expected (#2669).\n - Fixed issues with nested exception catching (#1714).\n - Increased the minimum size of the Emscripten HEAP to 64k instead of a previous 4k.\n - The {{{ cDefine('name') }}} macros now raise a compile-time error if the\n   define name is not found, instead of hiding the error message inside the\n   compiled output (#2672)\n - Fixed an issue where --emrun parameter was not compatible with the -s\n   PROXY_TO_WORKER=1 option.\n - Improved WebGL support when compiling with the PROXY_TO_WORKER=1 option.\n - Fixed a regression issue with the handling of running dtors of classes that\n   use virtual inheritance. (#2682)\n - Added an option Module.locateFilePackage() as a means to customize where data\n   files are found in relative to the running page (#2680). NOTE: This parameter\n   was later renamed to Module.locateFile() instead in release 1.24.0.\n - Fixed a bug where OpenAL sources would not properly delete.\n - Fixed a bug with upstream libc++ on std::map, std::multimap and\n   std::unordered_map self-assignment\n   (http://llvm.org/bugs/show_bug.cgi?id=18735)\n - Allow using __asm__ __volatile__(\"\": : :\"memory\") as a compile-time\n   reordering barrier (#2647)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.22.1...1.22.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.22.1...1.22.2\n    - Emscripten-Clang: no changes.\n\nv1.22.1: 8/7/2014\n------------------\n - Added support for prefixing functions with '$' in JS libraries, in order to\n   cause them not be prefixed with '_' when compiling.\n - Improved WebIDL compiler to support enums.\n - Fixed a bug with emscripten_force_exit() that would throw an exception (#2629).\n - Fixed setlocale() when setting a bad locale. (#2630)\n - Fixed a compiler miscompilation bug when optimizing loops. (#2626)\n - Fixed an issue with rethrowing an exception (#2627)\n - Fixed a bug where malloc()ing from JS code would leak memory if the C/C++\n   side does not use malloc() (#2621)\n - Removed an unnecessary assert() in glReadPixels, and improved it to support\n   more texture pixel types.\n - Fixed a bug with std::locale accepting unknown locale names (#2636)\n - Added support for WebIDL binder to work with Closure (#2620)\n - Added no-op SDL IMG_Quit() and TTF_Quit() symbols.\n - Migrated to building libcxx and libcxxapi with -Oz optimization flags.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.22.0...1.22.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.22.0: 8/5/2014\n------------------\n - Added support to emrun to dump files to the local filesystem for debugging\n   purposes.\n - Implemented emscripten_wget in ASYNCIFY mode.\n - Improved extension catching support (#2616)\n - Fixed .a link groups to also work when linking to bitcode. (#2568)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.10...1.22.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.21.10...1.22.0\n    - Emscripten-Clang: no changes.\n\nv1.21.10: 7/29/2014\n-------------------\n - Fixed a Windows-specific issue where the generated output files might contain\n   line endings of form \\r\\r\\n. This caused browser debuggers to get confused\n   with line numbers. (#2133)\n - Improved the node.js workaround introduced in v1.21.8.\n - Implemented new HTML5 API for direct WebGL context creation, emscripten_webgl_*().\n - Fixed a bug when loading in node.js and loaded by another module (#2586)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.9...1.21.10\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.9: 7/28/2014\n------------------\n - Fixed issues with exception catching. (#2531)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.8...1.21.9\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.8: 7/28/2014\n------------------\n - Fixed an issue when using --embed-file to embed very large files.\n - Worked around a Windows node.js bug where the compiler output might get cut\n   off when the compilation ends in an error.\n   (https://github.com/joyent/node/issues/1669)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.7...1.21.8\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.21.7...1.21.8\n    - Emscripten-Clang: no changes.\n\nv1.21.7: 7/25/2014\n------------------\n - Added new environment variable EMCC_ONLY_FORCED_STDLIBS which can be used to\n   restrict to only linking to the chosen set of Emscripten-provided libraries.\n   (See also EMCC_FORCE_STDLIBS)\n - Adjusted argv[0] and environment variables USER, HOME, LANG and _ to report a\n   more convenient set of default values. (#2565)\n - Fixed an issue where the application could not use environ without also\n   referring to getenv() (#2557)\n - Fixed an issue with IDBFS running in web workers.\n - Print out an error if IDBFS is used without IDB support.\n - Fixed calling Runtime.getFuncWrapper() when -s ALIASING_FUNCTION_POINTERS=1 (#2010)\n - Fixed an issue where deleting files during directory iteration would produce\n   incorrect iteration results (#2528)\n - Fixed support for strftime with %z and %Z (#2570)\n - Fixed a bug with truncate() throwing an exception (#2572)\n - Improved the linker to generate warning messages if user specifies -s X=Y\n   linker flags that do not exist (#2579)\n - Fixed an issue with creating read-only files (#2573)\n - Added first implementation for the ASYNCIFY option, which splits up\n   synchronous blocking loops to asynchronous execution. For more information on\n   this approach, see https://github.com/emscripten-core/emscripten/wiki/Asyncify\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.6...1.21.7\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.21.6...1.21.7\n    - Emscripten-Clang: no changes.\n\nv1.21.6: 7/22/2014\n------------------\n - Separated OpenAL AL and ALC errors to properly separate fields.\n - When using EGL to initialize a GL context, initialize a stencil buffer to the\n   context as well, since proper EGL context choosing is not yet implemented.\n - Added new linker flag -s DEMANGLE_SUPPORT to choose whether to compile the\n   application with libcxxabi-provided demangling support ___cxa_demangle().\n - Fixed a problem where calling stat() on a nonexisting file in the runtime VFS\n   would result in an exception being thrown. (#2552)\n - When using the -v flag, no longer retain intermediate compilation files. To\n   preserve the intermediate files, set the EMCC_DEBUG=1 environment variable.\n   (#2538)\n - Added a new HTML setting Module.memoryInitializerPrefixURL which specifies a\n   prefix for where the memory initializer file .mem.js should be loaded from\n   (#2542)\n - Implemented eglReleaseThread to work according to spec.\n - Implemented a new function emscripten_force_exit() which immediately shuts\n   down the C runtime.\n - Fixed a bug with exception handling that resulted in an error unresolved\n   symbol: _ZTISt13bad_exception (#2560)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.5...1.21.6\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.5: 7/21/2014\n------------------\n - Added support for glDrawBuffers with the WEBGL_draw_buffers extension.\n - Added stub implementation for eglReleaseThread.\n - Fixed a bug where passing -E to emcc used the system include headers instead\n   of the built-in ones. (#2534)\n - Fixed the stacktrace() function to work on MSIE as well.\n - Removed the zlib.h header file from system include directory, since\n   Emscripten does not provide an implementation of zlib built-in.\n - Added support for __cxa_bad_typeid (#2547)\n - Fixed an internal compiler crash with a certain pattern involving optimized\n   builds and int64_t (#2539)\n - Fixed an issue with -s EXCEPTION_CATCHING_WHITELIST handling where an\n   extension that was a substring of another might get erroneously handled.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.4...1.21.5\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.21.4...1.21.5\n    - Emscripten-Clang: no changes.\n\nv1.21.4: 7/17/2014\n------------------\n - Implemented the getsockopt() function.\n - Added new event callback functions emscripten_set_socket_xx_callback() that\n   allow listening to WebSocket events in an asynchronous manner.\n - Greatly improved CMake support, now various forms of configure-time test\n   builds are supported, and the default extension is set to \".js\"\n - Prohibit the virtual filesystem from creating files with name '.' or '..' at\n   runtime.\n - Have runtime mkdir() function call normalize the path to be created before\n   creation.\n - Fixed an issue with omitting the third parameter in cwrap() call (#2511).\n - Fixed an issue where mouse event handling would throw an exception if the\n   page did not contain a canvas object.\n - Fixed a GL initialization problem when user has extended Array with custom\n   functions (#2514)\n - Added new compiler defines __EMSCRIPTEN_major__, __EMSCRIPTEN_minor__ and\n   __EMSCRIPTEN_tiny__ which communicate the compiler version major.minor.tiny\n   to compiled applications (#2343)\n - Fixed a bug where emrun did not properly capture the exit code when exit\n   runtime via not calling exit().\n - Fixed an error message when symlinkin invalid filenams at runtime.\n - Fixed a bug in EGL context creation that parsed the input context creation\n   parameters with wrong terminator.\n - Improved ffdb.py to be smarter when to attempt port forwarding to connect to\n   a FFOS device DevTools port.\n - Implemented strsignal() function (#2532)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.3...1.21.4\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.3: 7/10/2014\n------------------\n - Added implementations for SDL function SDL_AudioQuit and SDL_VideoQuit.\n - Fix an issue with the optimizeShifts optimization enabled in previous version.\n - Fixed the -s RELOOPER command line parameter to work.\n - Fixed a bug where building the system libc might result in a compiler deadlock\n   on Windows.\n - Removed emcc from trying to link in .dll files as static libraries on\n   Windows.\n - Added support for GL_HALF_FLOAT_OES.\n - Fixed a bug where emcmake did not work on Windows.\n - Use multithreaded compilation to build libc.\n - Fixed an issue where the GL interop library could throw an exception in an\n   error condition, instead of raising a GL error.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.2...1.21.3\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.2: 7/5/2014\n------------------\n - Improved the checks that detect that code is run only while the runtime is\n   initialized.\n - The memory initializer file (.mem.js) is now emitted by default when\n   compiling with at least -O2 optimization level.\n - Fixed a performance issue where built-in math functions (Math.sqrt, etc.)\n   took a slightly slower path (#2484).\n - Added support for the ffs libc function.\n - Re-enabled optimizeShifts optimization when not compiling for asm.js (#2481)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.1...1.21.2\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.1: 7/3/2014\n------------------\n - Fixed an issue where wrong python interpreter could get invoked on Windows\n   when both native and cygwin python were installed.\n - Updated musl from version 0.9.13 to version 1.0.3.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.21.0...1.21.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.21.0: 7/2/2014\n------------------\n - Enable memory init files (.mem) by default in optimized builds (-O2+), as if\n   --memory-init-file 1  is specified. This makes the default behavior on\n   optimized builds emit smaller and faster-to-load code, but does require that\n   you ship both a .js and a .mem file (if you prefer not to, can use\n   --memory-init-file 1  ).\n - Implemented new SDL 1.2 functions SDL_GetRGB, SDL_GetRGBA and SDL_putenv.\n - Added support for /dev/random, /dev/urandom and C++11 std::random_device,\n   which will use cryptographically secure random api if available. (#2447)\n - Added support for CMake find_path() directive.\n - Added support for std::unique_ptr in embind.\n - Improved Windows support for ffdb.py.\n - Implemented the clip_rect structure for created SDL surfaces.\n - Fixed a regression with SDL touch events (#2466)\n - Added support for C++11 std::thread::hardware_concurrency which backs to\n   navigator.hardwareConcurrency. See\n   http://wiki.whatwg.org/wiki/Navigator_HW_Concurrency (#2456)\n - Optimized embind code generation with constexprs.\n - Enabled the use of Runtime.add&removeFunction when closure minification is\n   active (#2446)\n - Implemented support for accessing WebGL when building via the proxy to worker\n   architecture.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.20.0...1.21.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.20.0: 6/13/2014\n------------------\n - Optimize in-memory virtual filesystem performance when serialized to an IndexedDB.\n - Fixed memcpy regression with ta0 and ta1 modes.\n - Fixed an issue with line numbers being messed up when generating source maps (#2410)\n - Fixed an ffdb logging bug that could cause it to drop messages if they were\n   being received too fast. Added support getting memory and system descriptions\n   with ffdb.\n - Added a new extension to SDL \"emscripten_SDL_SetEventHandler()\" which enabled\n   application to perform SDL event handling inside a JS event handler to\n   overcome browser security restrictions. (#2417)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.19.2...1.20.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.19.2: 6/9/2014\n------------------\n - Updated CMake support for response file handling.\n - Fixed issues with glfwGetProcAddress and glfwSetWindowSizeCallback.\n - Fixed an issue with regexes that caused issues on IE11 runtime (#2400)\n - Added a new functions emscripten_get_preloaded_image_data() and\n   emscripten_get_preloaded_image_data_from_FILE() to obtain pixel data of\n   preloaded images.\n - Greatly improved ffdb capabilities to operate a FFOS device.\n - Fixed a Windows-specific bug where the user temp directory was littered with\n   temporary .rsp files that did not get cleaned up.\n - Improved SIMD support.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.19.1...1.19.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.19.1...1.19.2\n    - Emscripten-Clang: no changes.\n\nv1.19.1: 6/3/2014\n------------------\n - Migrate to using musl sscanf and sprintf and the family that writes to\n   memory, and not directly to the filesystem.\n - Improve the error messages from -s SAFE_HEAP_ACCESS=1 runtime checks.\n - Added new linker flag -s NO_DYNAMIC_EXECUTION=1 which removes the use of\n   eval() and new Function() in the generated output. For more information, see\n   \"Eval and related functions are disabled\" in\n   https://developer.chrome.com/extensions/contentSecurityPolicy .\n - Fixed a compiler issue when very large double constants are present. (#2392)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.19.0...1.19.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.19.0: 5/29/2014\n------------------\n - Added an error message to signal that linkable modules are not supported in fastcomp.\n - Fixed a miscompilation issue that resulted in an error \"SyntaxError: invalid\n   increment operand\" and a statement +(+0) being generated (#2314)\n - Make optimized compiler output smaller by running the shell code through\n   uglify when not using closure.\n - Fixed a crash in SDL audio loading code introduced in v1.18.3\n - Fixed an issue where glTex(Sub)Image2D might throw an exception on error,\n   instead of setting glGetError().\n - Added new typedefs emscripten_align1_short, emscripten_align{1/2}_int,\n   emscripten_align{1/2}_float and emscripten_align{1/2/4}_double to ease\n   signaling the compiler that unaligned data is present. (#2378)\n - Fixed an embind issue with refcount tracking on smart pointers.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.18.4...1.19.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.18.4...1.19.0\n    - Emscripten-Clang: no changes.\n\nv1.18.4: 5/27/2014\n------------------\n - Fixed error message on unsupported linking options (#2365)\n - Updated embind to latest version from IMVU upstream.\n - Fixed an issue where source maps did not load properly in Firefox.\n - Added a more descriptive error message to fastcomp when MAX_SETJMPS limit is\n   violated. (#2379)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.18.3...1.18.4\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.18.3...1.18.4\n    - Emscripten-Clang: no changes.\n\nv1.18.3: 5/21/2014\n------------------\n - Added support to emcc command line for \"archive groups\": -Wl,--start-group\n   and -Wl,--end-group\n - Greatly optimized ccall and cwrap implementations.\n - Added new support for SDL_Mix backend to use WebAudio to play back audio clips.\n - Fixed a registerizeHarder issue with elimination of conditional expressions.\n - Migrated single-character standard C functions (islower, tolower, and the\n   family) to use musl implementations.\n - Updated relooper to not optimize out breaks if it causes excessive nesting.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.18.2...1.18.3\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.18.2...1.18.3\n    - Emscripten-Clang: no changes.\n\nv1.18.2: 5/19/2014\n------------------\n - Fixed a problem which blocked user applications from handling WebGL context\n   loss events themselves.\n - Added a new HTML5 api function emscripten_is_webgl_context_lost() which\n   allows polling for context loss in addition to receiving events.\n - Improved async wget progress events to work better across browsers.\n - Improved WebIDL binder support.\n - Added new typeof() function to emscripten::val.\n - Added support for SDL window events SDL_WINDOWEVENT_FOCUS_GAINED,\n   SDL_WINDOWEVENT_FOCUS_LOST, SDL_WINDOWEVENT_SHOWN, SDL_WINDOWEVENT_HIDDEN.\n - Fixed a compiler miscompilation on unsigned i1 bitcasts (#2350)\n - Fixed a compiler bug where doubles in varargs might not get 8-byte aligned (#2358)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.18.1...1.18.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.18.1...1.18.2\n    - Emscripten-Clang: no changes.\n\nv1.18.1: 5/12/2014\n------------------\n - Fixed an issue where the mouse wheel scroll did not work with SDL.\n - Fixed an issue with emscripten_async_wget, which undesirably expected that\n   the string pointer passed to it stayed alive for the duration of the\n   operation (#2349)\n - Emscripten now issues a warning message when the EXPORTED_FUNCTIONS list\n   contains invalid symbol names (#2338)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.18.0...1.18.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.18.0: 5/10/2014\n------------------\n - Enable support for low-level C<->JS interop to marshall 64 bit integers from\n   C to JS.\n - Fixed an issue that caused some programs to immediately run out of memory\n   \"(cannot enlarge memory arrays)\" at startup. (#2334)\n - Fixed a crash issue with generated touch events that didn't correspond to a real touch.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.17.0...1.18.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.17.0...1.18.0\n    - Emscripten-Clang: no changes.\n\nv1.17.0: 5/6/2014\n------------------\n - Enabled asm.js compilation and -s PRECISE_F32 support when using embind.\n - Improved relooper to emit switches in many-entried blocks.\n - Fixed a GLFW bug where mouse wheel direction was reversed.\n - Fixed glfwGetKey to work even when no callback is registered with\n   glfwGetKeyCallback (#1320)\n - Added a new tool 'webidl_binder' that generates C <-> JS interop code from\n   WebIDL descriptions.\n - Fix emscripten compilation to work on pages that don't contain a HTML canvas.\n - Added a new error message to default shell when an uncaught exception is thrown.\n - Improved error diagnostics reported by -s SAFE_HEAP=1.\n - Added support for registering callbacks hook to VFS file open, write, move,\n   close and delete.\n - Added embind support to std::basic_string<unsigned char>\n - By default, the C runtime will no longer exit after returning from main()\n   when safeSetTimeout() or safeSetInterval() is used.\n - Fixed an issue with sscanf formatting (#2322)\n - Fixed an issue where precompiled headers were given a wrong output filename (#2320)\n - Enabled registerizeHarder optimization pass to work when outlining is enabled.\n - Fixed an issue with strptime month handling (#2324)\n - Added an initial implementation of a new tool 'ffdb' which can be used to\n   operate a Firefox OS phone from the command line.\n - Fixed a compiler crash on assertion failure '!contains(BranchesOut, Target)'\n   (emscripten-fastcomp #32)\n - Added a new ABI to Clang that targets Emscripten specifically. Stop aligning\n   member functions to save some space in the function table array.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.16.0...1.17.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.16.0...1.17.0\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.16.0...1.17.0\n\nv1.16.0: 4/16/2014\n------------------\n - Removed browser warnings message in VFS library about replacing __proto__ performance issue.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.15.1...1.16.0\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.15.1...1.16.0\n\nv1.15.1: 4/15/2014\n------------------\n - Added support for SDL2 touch api.\n - Added new user-controllable emdind-related define #define\n   EMSCRIPTEN_HAS_UNBOUND_TYPE_NAMES, which allows optimizing embind for minimal\n   size when std::type_info is not needed.\n - Fixed issues with CMake support where CMAKE_AR and CMAKE_RANLIB were not\n   accessible from CMakeLists.txt files.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.15.0...1.15.1\n    - Emscripten-LLVM: no changes.\n    - Emscripten-Clang: no changes.\n\nv1.15.0: 4/11/2014\n------------------\n - Fix outlining feature for functions that return a double (#2278)\n - Added support for C++11 atomic constructs (#2273)\n - Adjusted stdout and stderr stream behavior in the default shell.html to\n   always print out to both web page text log box, and the browser console.\n - Fixed an issue with loop variable optimization.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.14.1...1.15.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.14.1...1.15.0\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.14.1...1.15.0\n\nv1.14.1: 4/8/2014\n------------------\n - Added new command line utility 'emcmake', which can be used to call\n   emconfigure for cmake.\n - Added a new emcc command line parameter '--valid-abspath', which allows\n   selectively suppressing warning messages that occur when using absolute path\n   names in include and link directories.\n - Added a new emcc linker command line parameter '--emit-symbol-map', which\n   will save a map file between minified global names and the original function\n   names.\n - Fixed an issue with --default-object-ext not always working properly.\n - Added optimizations to eliminate redundant loop variables and redundant\n   self-assignments.\n - Migrated several libc functions to use compiled code from musl instead of\n   handwritten JS implementations.\n - Improved embind support.\n - Renamed the EM_ASM_() macro to the form EM_ASM_ARGS().\n - Fixed mouse button ordering issue in glfw.\n - Fixed an issue when creating a path name that ends in a slash (#2258, #2263)\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.14.0...1.14.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.14.0...1.14.1\n    - Emscripten-Clang: no changes.\n\nv1.14.0: 3/25/2014\n------------------\n - Added new emcc linker command line option '-profiling', which defaults JS\n   code generation options suited for benchmarking and profiling purposes.\n - Implemented the EGL function eglWaitGL().\n - Fixed an issue with the HTML5 API that caused the HTML5 event listener unregistration to fail.\n - Fixed issues with numpad keys in SDL support library.\n - Added a new JS optimizer pass 'simplifyIfs', which is run when -s\n   SIMPLIFY_IFS=1 link flag is set and -g is not specified. This pass merges\n   multiple nested if()s together into single comparisons, where possible.\n - Removed false positive messages on missing internal \"emscripten_xxx\" symbols at link stage.\n - Updated to latest relooper version.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.13.2...1.14.0\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.13.2...1.14.0\n    - Emscripten-Clang: no changes.\n\nv1.13.2: 3/15/2014\n------------------\n - Fixed issues with SDL audio on Safari.\n - Fixed issues with HTML5 API mouse scroll events on Safari.\n - Fixed issues with HTML5 fullscreen requests in IE11.\n - Enabled support for emscripten_get_callstack on IE10+.\n - Fixed issues with Closure symbol minification.\n - Further improved em_asm()-related error messages.\n - Updated to latest relooper version.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.13.1...1.13.2\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.13.1...1.13.2\n    - Emscripten-Clang: no changes.\n\nv1.13.1: 3/10/2014\n------------------\n - Disallow C implicit function declarations by making it an error instead of a\n   warning by default. These will not work with Emscripten, due to strict\n   Emscripten signature requirements when calling function pointers (#2175).\n - Allow transitioning to full screen from SDL as a response to mouse press\n   events.\n - Fixed a bug in previous 1.13.0 release that broke fullscreen transitioning\n   from working.\n - Fixed emscripten/html5.h to be used in C source files.\n - Fix an issue where extraneous system libraries would get included in the\n   generated output (#2191).\n - Added a new function emscripten_async_wget2_data() that allows reading from\n   an XMLHTTPRequest directly into memory while supporting advanced features.\n - Fixed esc key code in GLFW.\n - Added new emscripten_debugger() intrinsic function, which calls into JS\n   \"debugger;\" statement to break into a JS debugger.\n - Fixed varargs function call alignment of doubles to 8 bytes.\n - Switched to using default function local stack alignment to 16 bytes to be SIMD-friendly.\n - Improved error messages when user code has a syntax error in em_asm() statements.\n - Switched to using a new custom LLVM datalayout format for Emscripten. See\n   https://github.com/emscripten-core/emscripten-fastcomp/commit/65405351ba0b32a8658c65940e0b65ceb2601ad4\n - Optimized function local stack space to use fewer temporary JS variables.\n - Full list of changes:\n    - Emscripten: https://github.com/emscripten-core/emscripten/compare/1.13.0...1.13.1\n    - Emscripten-LLVM: https://github.com/emscripten-core/emscripten-fastcomp/compare/1.13.0...1.13.1\n    - Emscripten-Clang: https://github.com/emscripten-core/emscripten-fastcomp-clang/compare/1.13.0...1.13.1\n\nv1.13.0: 3/3/2014\n------------------\n - Fixed the deprecated source mapping syntax warning.\n - Fixed a buffer overflow issue in emscripten_get_callstack (#2171).\n - Added support for -Os (optimize for size) and -Oz (aggressively optimize for\n   size) arguments to emcc.\n - Fixed a typo that broko the call signature of glCompressedTexSubImage2D()\n   function (#2173).\n - Added new browser fullscreen resize logic that always retains aspect ratio\n   and adds support for IE11.\n - Improve debug messaging with bad function pointer calls when -s ASSERTIONS=2\n   is set.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.12.3...1.13.0\n\nv1.12.3: 2/27/2014\n------------------\n - Fixed alcOpenDevice on Safari.\n - Improved the warning message on missing symbols to not show false positives (#2154).\n - Improved EmscriptenFullscreenChangeEvent HTML5 API structure to return\n   information about HTML element and screen sizes for convenience.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.12.2...1.12.3\n\nv1.12.2: 2/25/2014\n------------------\n - Added better warning message if Emscripten, LLVM and Clang versions don't match.\n - Introduced the asmjs-unknown-emscripten target triple that allows\n   specializing LLVM codegen for Emscripten purposes.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.12.1...1.12.2\n\nv1.12.1: 2/25/2014\n------------------\n - TURNED ON FASTCOMP BY DEFAULT. This means that you will need to migrate to\n   fastcomp-clang build. Either use an Emscripten SDK distribution, or to build\n   manually, see\n   http://kripken.github.io/emscripten-site/docs/building_from_source/LLVM-Backend.html\n   for info.\n - Migrate to requiring Clang 3.3 instead of Clang 3.2. The fastcomp-clang\n   repository by Emscripten is based on Clang 3.3.\n - Deprecated old Emscripten libgc implementation.\n - asm.js will now be always enabled, even in -O0 builds in fastcomp.\n - Remove support for -s RUNTIME_TYPE_INFO, which is unsupported in fastcomp.\n - Added a new \"powered by Emscripten\" logo.\n - Updated default shell.html graphical layout.\n - Added new macro EM_ASM_, which allows sending values to JS without returning anything.\n - Deprecated the jcache compiler option. It should not be needed anymore.\n - Added support for fetching callstack column information in Firefox 30 in emscripten_get_callstack.\n - Fix issues with missing exceptions-related symbols in fastcomp.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.12.0...1.12.1\n\nv1.12.0: 2/22/2014\n------------------\n - Improved the runtime abort error message when calling an invalid function\n   pointer if compiled with -s ASSERTIONS=1 and 2. This allows the developer to\n   better deduce errors with bad function pointers or function pointers casted\n   and invoked via a wrong signature.\n - Added a new api function emscripten_set_main_loop_arg, which allows passing a\n   userData pointer that will be carried via the function call, useful for\n   object-oriented encapsulation purposes (#2114).\n - Fixed CMake MinSizeRel configuration type to actually optimize for minimal size with -Os.\n - Added support for GLES2 VAO extension OES_vertex_array_object for browsers that support it.\n - Fix issues with emscripten/html5.f when compiled with the SAFE_HEAP option.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.11.1...1.12.0\n\nv1.11.1: 2/19/2014\n------------------\n - Improved eglSwapBuffers to be spec-conformant.\n - Fixed an issue with asm.js validation and va_args (#2120).\n - Fixed asm.js validation issues found with fuzzing.\n - Added new link-time compiler flag -s RETAIN_COMPILER_SETTINGS=1, which\n   enables a runtime API for querying which Emscripten settings were used to\n   compile the file.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.11.0...1.11.1\n\nv1.11.0: 2/14/2014\n------------------\n - Implemented some new SDL library functions.\n - Renamed standard file descriptors to have handles 0, 1 and 2 rather than 1, 2\n   and 3 to coincide with unix numbering.\n - Improved embind support with smart pointers and mixins.\n - Improved the registerization -O3 optimization pass around switch-case constructs.\n - Upper-case files with suffix .C are now also recognized (#2109).\n - Fixed an issue with glGetTexParameter (#2112).\n - Improved exceptions support in fastcomp.\n - Added new linker option -s NO_EXIT_RUNTIME=1, which can be used to set a\n   default value for the Module[\"noExitRuntime\"] parameter at compile-time.\n - Improved SDL audio buffer queueing when the sample rate matches the native\n   web audio graph sample rate.\n - Added an optimization that removes redundant Math.frounds in -O3.\n - Improved the default shell.html file.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.10.4...1.11.0\n\nv1.10.4: 2/10/2014\n------------------\n - Added support for legacy GL emulation in fastcomp.\n - Deprecated the --split-js compiler option. This is not supported in fastcomp.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.10.3...1.10.4\n\nv1.10.3: 2/9/2014\n------------------\n - Work on supporting GL/EGL GetProcAddress.\n - Fixed issues with shared lib linking support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.10.2...1.10.3\n\nv1.10.2: 2/7/2014\n------------------\n - Added basic FS unmount support.\n - Improved screen orientation lock API to return a success code.\n - Added PRECISE_F32 support to fastcomp.\n - Fixed issues in fastcomp related to special floating point literal\n   serialization.\n - Improved SDL audio buffer queueing.\n - Added new link-time option -s WARN_UNALIGNED=1 to fastcomp to report compiler\n   warnings about generated unaligned memory accesses, which can hurt\n   performance.\n - Optimized libc strcmp and memcmp with the implementations from musl libc.\n - Optimized libc memcpy and memset to back to native code for large buffer sizes.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.10.1...1.10.2\n\nv1.10.1: 1/31/2014\n------------------\n - Improve srand() and rand() to be seedable and use a Linear Congruential\n   Generator (LCG) for the rng generation for performance.\n - Improved OpenAL library support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.10.0...1.10.1\n\nv1.10.0: 1/29/2014\n------------------\n - Improved C++ exception handling.\n - Improved OpenAL library support.\n - Fixed an issue where loading side modules could try to allocate from sealed\n   heap (#2060).\n - Fixed safe heap issues (2068).\n - Added new EM_ASM variants that return a value but do not receive any inputs\n   (#2070).\n - Add support for simultaneously using setjmp and C++ exceptions in fastcomp.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.5...1.10.0\n\nv1.9.5: 1/25/2014\n------------------\n - Added a spinner logo to default html shell.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.4...1.9.5\n\nv1.9.4: 1/24/2014\n------------------\n - Add support for Ninja and Eclipse+Ninja builds with Emscripten+CMake.\n - Fixed regressions with GL emulation.\n - Added support for #if !X in .js library preprocessor.\n - Make the syntax EM_ASM(\"code\"); not silently fail. Note that the proper form\n   is EM_ASM(code); without double-quotes.\n - Optimize generated code size by minifying loop labels as well.\n - Revised the -O3 optimization level to mean \"safe, but very slow optimizations\n   on top of -O2\", instead of the old meaning \"unsafe optimizations\". Using -O3\n   will now only do safe optimizations, but can be very slow compared to -O2.\n - Implemented a new registerization optimization pass that does extra variable\n   elimination in -O3 and later to reduce the number of local variables in\n   functions.\n - Implemented a new emscripten/html5.h interface that exposes common HTML5 APIs\n   directly to C code without having to handwrite JS wrappers.\n - Improved error messages reported on user-written .js libraries containing\n   syntax errors (#2033).\n - Fixed glBufferData() function call signature with null data pointer.\n - Added new option Module['filePackagePrefixURL'] that allows customizing the\n   URL where the VFS package is loaded from.\n - Implemented glGetTexEnviv and glGetTexEnvfv in GL emulation mode.\n - Optimized the size of large memory initializer sections.\n - Fixed issues with the safe heap compilation option.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.3...1.9.4\n\nv1.9.3: 1/17/2014\n------------------\n - re-merge split blocks in multiples\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.2...1.9.3\n\nv1.9.2: 1/16/2014\n------------------\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.1...1.9.2\n\nv1.9.1: 1/16/2014\n------------------\n - Optimize desktop GL fixed function pipeline emulation texture load\n   instruction counts when GL_COMBINE is used.\n - fix Math_floor coercion in unrecommended codegen modes\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.9.0...1.9.1\n\nv1.9.0: 1/16/2014\n------------------\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.14...1.9.0\n\nv1.8.14: 1/15/2014\n------------------\n - add musl fputws and fix vswprintf.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.13...1.8.14\n\nv1.8.13: 1/15/2014\n------------------\n - remove musl use of fwritex\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.12...1.8.13\n\nv1.8.12: 1/15/2014\n------------------\n - Added new GLEW 1.10.0 emulation support.\n - Fixed an issue where the runtime could start more than once when run in a\n   browser (#1992)\n - Fix a regression in wprintf.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.11...1.8.12\n\nv1.8.11: 1/15/2014\n------------------\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.10...1.8.11\n\nv1.8.10: 1/14/2014\n------------------\n - Update libc implementation from musl libc.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.9...1.8.10\n\nv1.8.9: 1/14/2014\n------------------\n - add fputwc, which enables wprintf.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.8...1.8.9\n\nv1.8.8: 1/14/2014\n------------------\n - Update to latest libcxx and libcxxabi libraries.\n - Fix handling of floating point negative zero (#1898)\n - Fixed a memory leak in relooper in previous release.\n - Fixed an issue in previous release with VBO handling in GL optimizations.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.7...1.8.8\n\nv1.8.7: 1/13/2014\n------------------\n - Added support to numpad keycodes in glut support library.\n - Fix SIMD support with fastcomp.\n - Fixed a compiler error 'ran out of names' that could occur with too many\n   minified symbol names.\n - Work around webkit imul bug https://bugs.webkit.org/show_bug.cgi?id=126345\n   (#1991)\n - Optimized desktop GL fixed function pipeline emulation path for better\n   performance.\n - Added support for exceptions when building with fastcomp.\n - Fix and issue where the run() function could be called multiple times at\n   startup (#1992)\n - Removed a relooper limitation with fixed buffer size.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.6...1.8.7\n\nv1.8.6: 1/8/2014\n------------------\n - Added support for the libuuid library, see http://linux.die.net/man/3/libuuid.\n - Fixed .js file preprocessor to preprocess recursively (#1984).\n - Fixed a compiler codegen issue related to overflow arithmetic (#1975)\n - Added new link-time optimization flag -s AGGRESSIVE_VARIABLE_ELIMINATION=1\n   that enables the aggressiveVariableElimination js optimizer pass, which tries\n   to remove temporary variables in generated JS code at the expense of code\n   size.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.5...1.8.6\n\nv1.8.5: 1/7/2014\n------------------\n - Fixed compiler issues when used with LLVM 3.4.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.4...1.8.5\n\nv1.8.4: 1/6/2014\n------------------\n - Added support to Return and Backspace keys to glut\n - Fixed compiler issues when used with LLVM 3.4.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.3...1.8.4\n\nv1.8.3: 1/5/2014\n------------------\n - Improved SDL and page scroll pos handling support for IE10 and IE11.\n - Optimized SDL_UnlockSurface performance.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.2...1.8.3\n\nv1.8.2: 1/4/2014\n------------------\n - Fixed glGetFramebufferAttachmentParameteriv and an issue with glGetXXX when\n   the returned value was null.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.1...1.8.2\n\nv1.8.1: 1/3/2014\n------------------\n - Added support for WebGL hardware instancing extension.\n - Improved fastcomp native LLVM backend support.\n - Added support for #include filename.js to JS libraries.\n - Deprecated --compression emcc command line parameter that manually compressed\n   output JS files, due to performance issues. Instead, it is best to rely on\n   the web server to serve compressed JS files.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.8.0...1.8.1\n\nv1.8.0: 12/28/2013\n------------------\n - Fix two issues with function outliner and relooper.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.9...1.8.0\n\nv1.7.9: 12/27/2013\n------------------\n - Added new command line parameter --em-config that allows specifying a custom\n   location for the .emscripten configuration file.\n - Reintroduced relaxed asm.js heap sizes, which no longer need to be power of\n   2, but a multiple of 16MB is sufficient.\n - Added emrun command line tool that allows launching .html pages from command\n   line on desktop and Android as if they were native applications. See\n   https://groups.google.com/forum/#!topic/emscripten-discuss/t2juu3q1H8E . Adds\n   --emrun compiler link flag.\n - Began initial work on the \"fastcomp\" compiler toolchain, a rewrite of the\n   previous JS LLVM AST parsing and codegen via a native LLVM backend.\n - Added --exclude-file command line flag to emcc and a matching --exclude\n   command line flag to file packager, which allows specifying files and\n   directories that should be excluded while packaging a VFS data blob.\n - Improved GLES2 and EGL support libraries to be more spec-conformant.\n - Optimized legacy GL emulation code path. Added new GL_FFP_ONLY optimization\n   path to fixed function pipeline emulation.\n - Added new core functions emscripten_log() and emscripten_get_callstack() that\n   allow printing out log messages with demangled and source-mapped callstack\n   information.\n - Improved BSD Sockets support. Implemented getprotobyname() for BSD Sockets library.\n - Fixed issues with simd support.\n - Various bugfixes: #1573, #1846, #1886, #1908, #1918, #1930, #1931, #1942, #1948, ..\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.8...1.7.9\n\nv1.7.8: 11/19/2013\n------------------\n - Fixed an issue with -MMD compilation parameter.\n - Added EM_ASM_INT() and EM_ASM_DOUBLE() macros. For more information, read\n   https://groups.google.com/forum/#!topic/emscripten-discuss/BFGTJPCgO6Y .\n - Fixed --split parameter to also work on Windows.\n - Fixed issues with BSD sockets accept() call.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.7...1.7.8\n\nv1.7.7: 11/16/2013\n------------------\n - Improve SDL audio buffer queue timing support.\n - Improved default precision of clock_gettime even when not using CLOCK_REALTIME.\n - Optimize and fix issues with LLVM IR processing.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.6...1.7.7\n\nv1.7.6: 11/15/2013\n------------------\n - Added regex implementation from musl libc.\n - The command line parameter -s DEAD_FUNCTIONS=[] can now be used to explicitly\n   kill functions coming from built-in library_xx.js.\n - Improved EGL support and GLES2 spec conformance.\n - Reverted -s TOTAL_MEMORY=x to require pow2 values, instead of the relaxed\n   'multiples of 16MB'. This is because the relaxed rule is released only in\n   Firefox 26 which is currently in Beta and ships on the week of December 10th\n   (currently in Beta). As of writing, current stable Firefox 25 does not yet\n   support these.\n - Adjusted the default linker behavior to warn about all missing symbols,\n   instead of silently ignoring them. Use -s WARN_ON_UNDEFINED_SYMBOLS=0 to\n   suppress these warnings if necessary.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.5...1.7.6\n\nv1.7.5: 11/13/2013\n------------------\n - Fix issues with the built-in C++ function name demangler.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.4...1.7.5\n\nv1.7.4: 11/12/2013\n------------------\n - Fixed issues with BSD sockets code and SDL joystick implementation.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.3...1.7.4\n\nv1.7.3: 11/12/2013\n------------------\n - Added support for generating single-precision floating point instructions.\n    - For more information, read\n      https://blog.mozilla.org/javascript/2013/11/07/efficient-float32-arithmetic-in-javascript/\n - Made GLES2 support library more spec-conformant by throwing fewer exceptions\n   on errors. Be sure to build with -s GL_ASSERTIONS=1, remember to use\n   glGetError() and check the browser console to best detect WebGL rendering\n   errors.\n - Converted return value of emscripten_get_now() from float to double, to not\n   lose precision in the function call.\n - Added support for joysticks in SDL via the Gamepad API\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.2...1.7.3\n\nv1.7.2: 11/9/2013\n------------------\n - The compiler now always generates a .js file that contains the generated\n   source code even when compiling to a .html file.\n    - Read https://groups.google.com/forum/#!topic/emscripten-discuss/EuHMwqdSsEs\n - Implemented depth+stencil buffer choosing behavior in GLUT, SDL and GLFW.\n - Fixed memory leaks generated by glGetString and eglGetString.\n - Greatly optimized startup times when virtual filesystems with a large amount\n   of files in them.\n - Added some support for SIMD generated by LLVM.\n - Fixed some mappings with SDL keyboard codes.\n - Added a new command line parameter --no-heap-copy to compiler and file\n   packager that can be used to optimize VFS memory usage at startup.\n - Updated libcxx to revision 194185, 2013-11-07.\n - Improvements to various library support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.1...1.7.2\n\nv1.7.1: 10/24/2013\n------------------\n - Remove old call to Runtime.warn in file packager code\n - Fix bug with parsing of empty types.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.7.0...1.7.1\n\nv1.7.0: 10/23/2013\n------------------\n - Adds mouse wheel events support in GLUT library.\n - Adds support for a new link parameter -s CASE_INSENSITIVE_VFS=1 to enable\n   Emscripten virtual filesystem to search files ignoring case.\n - *Numerous* optimizations in both compilation and runtime stages.\n - Remove unnecessary whitespace, compact postSets function, and other\n   optimizations in compilation output to save on generated file size.\n - Fixes float parsing from negative zero.\n - Removes the -s EMIT_GENERATED_FUNCTIONS link parameter as unneeded.\n - Fixes an issue where updating subranges of GL uniform arrays was not\n   possible.\n - asm.js heap size (-s TOTAL_MEMORY=x) no longer needs to be a power of 2. As a\n   relaxed rule, choosing any multiple of 16MB is now possible.\n - O1 optimization no longer runs the 'simplifyExpressions' optimization pass.\n   This is to improve build iteration times when using -O1. Use -O2 to run that\n   pass.\n - EM_ASM() can now be used even when compiling to asm.js.\n - All currently specified non-debugging-related WebGL 1 extensions are now\n   enabled by default on startup, no need to ctx.getExtension() manually to\n   enable them.\n - Improve readability of uncaught JavaScript exceptions that are thrown all the\n   way up to the web console by printing out the stack trace of where the throw\n   occurred.\n - Fix an issue when renaming a directory to a subdirectory.\n - Several compiler stability fixes.\n - Adds a JavaScript implementation of cxa_demangle function for demangling call\n   stack traces at runtime for easier debugging.\n - GL context MSAA antialiasing is now DISABLED by default, to make the GL\n   behavior consistent with desktop usage.\n - Added support to SDL, GLUT and GLFW libraries to specify MSAA on/off at startup.\n - Implemented glColor4ubv in GL emulation mode.\n - Fix an issue with LLVM keyword __attribute__ ((__constructor__)) (#1155).\n - Fix an issue with va_args and -s UNALIGNED_MEMORY=1 (#1705).\n - Add initial support code for LLVM SIMD constructs and a JavaScript SIMD\n   polyfill implementation from\n   https://github.com/johnmccutchan/ecmascript_simd/ .\n - Fixed support for node.js native filesystem API NODEFS on Windows.\n - Optimize application startup times of Emscripten-compiled programs by\n   enabling the virtual filesystem XHR and asm.js compilation to proceed in\n   parallel when opening a page.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.6.4...1.7.0\n\nv1.6.4: 9/30/2013\n------------------\n - Implements a new preprocessor tool for preparsing C struct definitions\n   (#1554), useful for Emscripten support library implementors.\n - Fix parsing issue with sscanf (#1668).\n - Improved the responsiveness of compiler print output on Windows.\n - Improved compilation times at link stage.\n - Added support for new \"NODEFS\" filesystem that directly accesses files on the\n   native filesystem. Only usable with node.js when compiling to JS.\n - Added support for new IDBFS filesystem for accessing files in IndexedDB storage (#1601.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.6.3...1.6.4\n\nv1.6.3: 9/26/2013\n------------------\n - Emscripten CMake toolchain now generates archive files with .a suffix when\n   project target type is static library, instead of generatic .bc files\n   (#1648).\n - Adds iconv library from the musl project to implement wide functions in C\n   library (#1670).\n - Full list of changes:\n   https://github.com/emscripten-core/emscripten/compare/1.6.2...1.6.3\n\nv1.6.2: 9/25/2013\n------------------\n - Added support for dprintf() function (#1250).\n - Fixes several compiler stability issues (#1637, #1166, #1661, #1651 and more).\n - Enables support for WEBGL_depth_texture.\n - Adds support for new link flag -s GL_ASSERTIONS=1 which can be used to add\n   extra validation layer to the Emscripten GL library to catch code issues.\n - Adds support to Web Audio API in SDL audio backend so that SDL audio now\n   works in Chrome and new Opera as well.\n - Fixes an alpha blending issue with SDL_SetAlpha.\n - Implemented locale-related code in C library.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.6.1...1.6.2\n\nv1.6.1: 9/22/2013\n------------------\n - Several optimizations to compiler link stage.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.6.0...1.6.1\n\nv1.6.0: 9/21/2013\n------------------\n - Enable support for %[] pattern in scanf.\n - Added dependency tracking support to linked .js files in CMake toolchain.\n - The hex prefix 0x is now properly handled in sscanf (#1632).\n - Simplify internal compiler operations by removing the internal framework.js.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.9...1.6.0\n\nv1.5.9: 9/15/2013\n------------------\n - Add support for SDL_Delay in web workers.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.8...1.5.9\n\nv1.5.8: 9/14/2013\n------------------\n - Add support for the GCC -E compiler flag.\n - Update Emscripten libc headers to musl-0.9.13.\n - Added new utility function emscripten_async_load_script() to asynchronously\n   load a new .js script URL.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.7...1.5.8\n\nv1.5.7: 8/30/2013\n------------------\n - The script tag in default shell.html is now marked 'async', which enables\n   loading the JS script code asynchronously in Firefox without making the main\n   thread unresponsive.\n - Implemented new utility function emscripten_get_canvas_size() which returns\n   the current Module <canvas> element size in pixels.\n - Optimize code size in compiled side modules.\n - Optimize startup memory usage by avoiding unnecessary copying of VFS data at\n   startup.\n - Add support for SDL_WM_ToggleFullScreen().\n - Add support for emscripten_get_now() when running in SpiderMonkey shell.\n - Added new environment variable EM_BUILD_VERBOSE=0,1,2,3 to set an extra\n   compiler output verbosity level for debugging.\n - Added better support for dlopen() to simulate dynamic library loading in\n   JavaScript.\n - Improved support for BSD sockets and networking.\n - Added new SOCKFS filesystem, which reads files via a network connection.\n - Avoid issues with long command line limitations in CMake toolchain by using\n   response files.\n - Fix issues with client-side vertex data rendering in GL emulation mode.\n - Improved precision of clock_gettime().\n - Improve function outlining support.\n - Added support for using NMake generator with CMake toolchain.\n - Improved support for flexible arrays in structs (#1602).\n - Added ability to marshal UTF16 and UTF32 strings between C++ <-> JS code.\n - Added a new commandline tool validate_asms.py to help automating asm.js\n   validation testing.\n - Improved stability with inline asm() syntax.\n - Updated libc headers to new version.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.6...1.5.7\n\nv1.5.6: 8/17/2013\n------------------\n - Improved BSD sockets support.\n - Added touch events support to GLUT library.\n - Added new --js-opts=0/1 command line option to control whether JS optimizer\n   is run or not.\n - Improved OpenAL support.\n - Added new command line tool tools/find_bigvars.py which can be used on an\n   output file to detect large functions and needs for outlining.\n - Merged link flags -s FORCE_GL_EMULATION and -s DISABLE_GL_EMULATION to a\n   single opt-in flag -s LEGACY_GL_EMULATION=0/1 to control whether GL emulation\n   is active.\n - Improved SDL input support.\n - Several stability-related compiler fixes.\n - Fixed source mapping generation support on Windows.\n - Added back the EMSCRIPTEN_KEEPALIVE attribute qualifier to help prevent\n   inlining and to retain symbols in output without dead code elimination\n   occurring.\n - Fix issues when marshalling UTF8 strings between C<->JS.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.5...1.5.6\n\nv1.5.5: 8/9/2013\n------------------\n - Update libcxx to revision 187959, 2013-08-08.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.4...1.5.5\n\nv1.5.4: 8/9/2013\n------------------\n - Fixed multiple issues with C stdlib support.\n - Fix audio buffer queueing issues with OpenAL.\n - Improved BSD sockets support.\n - Added a new compile+link time command line option -Wno-warn-absolute-paths to\n   hide the emscripten compiler warning when absolute paths are passed into the\n   compiler.\n - Added new link flag -s STB_IMAGE=0/1 and integrate it to SDL image loading to\n   enable synchronous image loading support with SDL.\n - Several improvements on function outlining support.\n - Fix issues with GLES2 interop support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.3...1.5.4\n\nv1.5.3: 6/28/2013\n------------------\n - Added new optimization level --llvm-lto 3 to run even more aggressive LTO\n   optimizations.\n - Improve optimizations for libc and other libraries.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.2...1.5.3\n\nv1.5.2: 6/27/2013\n------------------\n - Added support for generating source maps along the built application when -g\n   is specified. This lets the browser show original .cpp sources when\n   debugging.\n - GLUT and SDL improvements.\n - Added new link option -g<level> where level=0-4, which allows controlling\n   various levels of debuggability added to the output.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.1...1.5.2\n\nv1.5.1: 6/22/2013\n------------------\n - File packager now skips all directories and files starting with '.', and hidden files on Windows.\n - Fix issues with strnlen, memmove, LDBL_ constants, va_args, float.h, and others.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.5.0...1.5.1\n\nv1.5.0: 6/17/2013\n------------------\n - Several compiler optimizations.\n - Improve SDL key events support.\n - Increase debug logging when specifying emcc -v.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.9...1.5.0\n\nv1.4.9: 6/8/2013\n------------------\n - Several compiler optimizations.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.8...1.4.9\n\nv1.4.8: 6/6/2013\n------------------\n - Add support for webrtc-based sockets.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.7...1.4.8\n\nv1.4.7: 6/2/2013\n------------------\n - Remove more unneeded break and continue statements in relooper.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.6...1.4.7\n\nv1.4.6: 6/2/2013\n------------------\n - Improve relooper code.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.5...1.4.6\n\nv1.4.5: 6/1/2013\n------------------\n - Improve relooper code.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.4...1.4.5\n\nv1.4.4: 6/1/2013\n------------------\n - Add support for symlinks in source files.\n - Fix various issues with SDL.\n - Added -s FORCE_ALIGNED_MEMORY=0/1 link time flag to control whether all loads\n   and stores are assumed to be aligned.\n - Fix file packager to work with closure.\n - Major improvements to embind support, and optimizations.\n - Improve GL emulation.\n - Optimize VFS usage.\n - Allow emscripten to compile .m and .mm files.\n - Added new syntax --preload-file src@dst to file packager command line to\n   allow placing source files to custom destinations in the FS.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.3...1.4.4\n\nv1.4.3: 5/8/2013\n------------------\n - Fix issue with strcat.\n - Major embind improvements.\n - Switch to le32-unknown-nacl LLVM target triple as default build option\n   instead of the old i386-pc-linux-gnu target triple.\n - Improve compiler logging behavior.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.2...1.4.3\n\nv1.4.2: 5/3/2013\n------------------\n - Fix issues with le32-unknown-nacl LLVM target triple.\n - Add some GLEW support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.4.1...1.4.2\n\nv1.4.1: 4/28/2013\n------------------\n - Implement support for le32-unknown-nacl LLVM target triple.\n - Added new cmdline option -s ERROR_ON_UNDEFINED_SYMBOLS=0/1 to give\n   compile-time error on undefined symbols at link time. Default off.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.8...1.4.1\n\nv1.3.8: 4/29/2013\n------------------\n - Improved 64-bit integer ops codegen.\n - Added Indexed DB support to vfs.\n - Improve warning message on dangerous function pointer casts when compiling in\n   asm.js mode.\n - Added --use-preload-cache command line option to emcc, to be used with the\n   file packager.\n - Fixes to libcextra.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.7...1.3.8\n\nv1.3.7: 4/24/2013\n------------------\n - Merge IMVU implementation of embind to emscripten trunk. Embind allows\n   high-level C++ <-> JS types interop.\n - Enable asm.js compilation in -O1 and higher by default. Fix issues when\n   compiling to asm.js.\n - Improve libc support with Emscripten with the musl libc headers.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.6...1.3.7\n\nv1.3.6: 4/2/2013\n------------------\n - Fix hang issue with strtof.\n - Update libcxx to upstream r178253 from March 29, 2013.\n - Fix issues with GL emulation.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.5...1.3.6\n\nv1.3.5: 3/25/2013\n------------------\n - Get exceptions working as they did before.\n - Remove symbol removing hack.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.4...1.3.5\n\nv1.3.4: 3/24/2013\n------------------\n - Update to new libcxx and libcxxabi versions from upstream.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.3...1.3.4\n\nv1.3.3: 3/23/2013\n------------------\n - Remove unneeded check from relooper.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.2...1.3.3\n\nv1.3.2: 3/22/2013\n------------------\n - Fix issues with fgets.\n - Add support for non-fullscreen pointer lock.\n - Improve OpenAL support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.1...1.3.2\n\nv1.3.1: 3/19/2013\n------------------\n - Improve SDL audio and mixer support.\n - Add GLES2 emulation features when -s FULL_ES2=1 is specified.\n - Add support for OpenAL.\n - Add new -s OPENAL_DEBUG=0/1 link command line option.\n - Fixed an issue with mouse coordinate being offset with canvas.\n - Removed -s UTF_STRING_SUPPORT=0 parameter, this is now always on.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.3.0...1.3.1\n\nv1.3.0: 3/11/2013\n------------------\n - Improve GLES2 emulation with -s FULL_ES2=1.\n - Deprecated -s USE_TYPED_ARRAYS=1 and -s QUANTUM_SIZE=1.\n - Implement a minifier infrastructure when compiling for asm.js.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.9...1.3.0\n\nv1.2.9: 3/7/2013\n------------------\n - Improved canvas behavior when transitioning between fullscreen.\n - Added support for getopt().\n - Fixed several libc issues.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.8...1.2.9\n\nv1.2.8: 3/6/2013\n------------------\n - Remove unnecessary recursion in relooper RemoveUnneededFlows.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.7...1.2.8\n\nv1.2.7: 3/6/2013\n------------------\n - Added SDL_Mixer support.\n - Implemented stubs for several Unix and threading-related functions.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.6...1.2.7\n\nv1.2.6: 3/5/2013\n------------------\n - Relooper updates.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.5...1.2.6\n\nv1.2.5: 3/5/2013\n------------------\n - Greatly improve GL emulation support.\n - Handle %c in sscanf.\n - Improve compilation times by optimizing parallel execution in the linker.\n - Improve several compiler stability issues detected from fuzzing tests.\n - Implemented emscripten_jcache_printf.\n - Allow running emscripten.py outside emcc itself.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.4...1.2.5\n\nv1.2.4: 2/2/2013\n------------------\n - Work on adding support for asm.js compilation.\n - Improve EGL support.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.3...1.2.4\n\nv1.2.3: 1/9/2013\n------------------\n - Work on adding support for asm.js compilation.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.2...1.2.3\n\nv1.2.2: 1/8/2013\n------------------\n - Work on adding support for asm.js compilation.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.1...1.2.2\n\nv1.2.1: 1/8/2013\n------------------\n - Improvements to GLUT, SDL and BSD sockets headers.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.2.0...1.2.1\n\nv1.2.0: 1/1/2013\n------------------\n - Work on adding support for asm.js compilation.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.1.0...1.2.0\n\nv1.1.0: 12/12/2012\n------------------\n - Fix several issues with Windows support.\n - Added a standalone toolchain for CMake.\n - Added emscripten_run_script_string().\n - Optimize compilation times via threading.\n - Update to requiring Clang 3.2. Older versions may no longer work.\n - Several improvements to emscripten library support headers.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.0.1a...1.1.0\n\nv1.0.1a: 11/11/2012\n------------------\n - Add relooper code to repository.\n - Full list of changes: https://github.com/emscripten-core/emscripten/compare/1.0.1...1.0.1a\n\nv1.0.1: 11/11/2012\n------------------\n - First commit that introduced versioning to the Emscripten compiler.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.9736328125,
          "content": "Emscripten is available under 2 licenses, the MIT license and the\nUniversity of Illinois/NCSA Open Source License.\n\nBoth are permissive open source licenses, with little if any\npractical difference between them.\n\nThe reason for offering both is that (1) the MIT license is\nwell-known, while (2) the University of Illinois/NCSA Open Source\nLicense allows Emscripten's code to be integrated upstream into\nLLVM, which uses that license, should the opportunity arise.\n\nThe full text of both licenses follows.\n\n==============================================================================\n\nCopyright (c) 2010-2014 Emscripten authors, see AUTHORS file.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n==============================================================================\n\nCopyright (c) 2010-2014 Emscripten authors, see AUTHORS file.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal with the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\n    Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimers.\n\n    Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following disclaimers\n    in the documentation and/or other materials provided with the\n    distribution.\n\n    Neither the names of Mozilla,\n    nor the names of its contributors may be used to endorse\n    or promote products derived from this Software without specific prior\n    written permission. \n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR\nANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n==============================================================================\n\nThis program uses portions of Node.js source code located in src/library_path.js,\nin accordance with the terms of the MIT license. Node's license follows:\n\n    \"\"\"\n        Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n        Permission is hereby granted, free of charge, to any person obtaining a copy\n        of this software and associated documentation files (the \"Software\"), to\n        deal in the Software without restriction, including without limitation the\n        rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n        sell copies of the Software, and to permit persons to whom the Software is\n        furnished to do so, subject to the following conditions:\n\n        The above copyright notice and this permission notice shall be included in\n        all copies or substantial portions of the Software.\n\n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n        FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n        IN THE SOFTWARE.\n    \"\"\"\n\nThe musl libc project is bundled in this repo, and it has the MIT license, see\nsystem/lib/libc/musl/COPYRIGHT\n\nThe third_party/ subdirectory contains code with other licenses. None of it is\nused by default, but certain options use it (e.g., the optional closure compiler\nflag will run closure compiler from third_party/).\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.55859375,
          "content": "VERSION = $(shell cat emscripten-version.txt | sed s/\\\"//g)\nDESTDIR ?= ../emscripten-$(VERSION)\nDISTFILE = emscripten-$(VERSION).tar.bz2\n\ndist: $(DISTFILE)\n\ninstall:\n\t@rm -rf $(DESTDIR)\n\t./tools/install.py $(DESTDIR)\n\tnpm install --omit=dev --prefix $(DESTDIR)\n\n# Create an distributable archive of emscripten suitable for use\n# by end users. This archive excludes node_modules as it can include native\n# modules which can't be safely pre-packaged.\n$(DISTFILE): install\n\ttar cf $@ --exclude=node_modules -C `dirname $(DESTDIR)` `basename $(DESTDIR)`\n\n.PHONY: dist install\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2705078125,
          "content": "![emscripten logo](media/switch_logo.png)\n\nMain project page: <https://emscripten.org>\n\nGitHub CI status: [![CircleCI](https://circleci.com/gh/emscripten-core/emscripten.svg?style=svg)](https://circleci.com/gh/emscripten-core/emscripten/tree/main)\n\nChromium builder status: [emscripten-releases](https://ci.chromium.org/p/emscripten-releases)\n\nOverview\n--------\n\nEmscripten compiles C and C++ to [WebAssembly](https://webassembly.org/) using\n[LLVM](https://en.wikipedia.org/wiki/LLVM) and\n[Binaryen](https://github.com/WebAssembly/binaryen/). Emscripten output can run\non the Web, in Node.js, and in\n[wasm runtimes](https://v8.dev/blog/emscripten-standalone-wasm#running-in-wasm-runtimes).\n\nEmscripten provides Web support for popular portable APIs such as OpenGL and\nSDL2, allowing complex graphical native applications to be ported, such as\nthe [Unity game engine](https://docs.unity3d.com/Manual/webgl-gettingstarted.html)\nand [Google Earth](https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html).\nIt can probably port your codebase, too!\n\nWhile Emscripten mostly focuses on compiling C and C++ using\n[Clang](https://clang.llvm.org/), it can be integrated with other LLVM-using\ncompilers (for example, Rust has Emscripten integration, with the\n`wasm32-unknown-emscripten` and `asmjs-unknown-emscripten` targets).\n\nLicense\n-------\n\nEmscripten is available under 2 licenses, the MIT license and the\nUniversity of Illinois/NCSA Open Source License.\n\nBoth are permissive open source licenses, with little if any\npractical difference between them.\n\nThe reason for offering both is that (1) the MIT license is\nwell-known and suitable for a compiler toolchain, while\n(2) LLVM's original license, the University of Illinois/NCSA Open Source\nLicense, was also offered to allow Emscripten's code to be integrated\nupstream into LLVM. The second reason became less important after\nEmscripten switched to the LLVM wasm backend, at which point there\nisn't any code we expect to move back and forth between the projects;\nalso, LLVM relicensed to Apache 2.0 + exceptions meanwhile. In practice you\ncan just consider Emscripten as MIT licensed (which allows\nyou to do pretty much anything you want with a compiler, including\ncommercial and non-commercial use).\n\nSee `LICENSE` for the full content of the licenses.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.697265625,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives us time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nPlease submit the report as a [security bug on the Chromium tracker](https://bugs.chromium.org/p/chromium/issues/entry?template=Security%20Bug).\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n- Make it clear that it's an Emscripten bug.\n\nWe ask that you give us 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "bootstrap.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "bootstrap.py",
          "type": "blob",
          "size": 2.8798828125,
          "content": "#!/usr/bin/env python3\n\"\"\"Bootstrap script for emscripten developers / git users.\n\nAfter checking out emscripten there are certain steps that need to be\ntaken before it can be used.  This script enumerates and automates\nthese steps and is able to run just the steps that are needed based\non the timestamps of various input files (kind of like a dumb version\nof a Makefile).\n\"\"\"\nimport argparse\nimport os\nimport shutil\nimport sys\n\n__rootdir__ = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0, __rootdir__)\n\nSTAMP_DIR = os.path.join(__rootdir__, 'out')\n\nfrom tools import shared, utils\n\nactions = [\n  ('npm packages', ['package.json'], [shutil.which('npm'), 'ci']),\n  ('create entry points', [\n     'tools/maint/create_entry_points.py',\n     'tools/maint/run_python.bat',\n     'tools/maint/run_python.sh',\n     'tools/maint/run_python.ps1',\n   ],\n   [sys.executable, 'tools/maint/create_entry_points.py']),\n  ('git submodules', ['test/third_party/posixtestsuite/'], [shutil.which('git'), 'submodule', 'update', '--init']),\n]\n\n\ndef get_stamp_file(action_name):\n  return os.path.join(STAMP_DIR, action_name.replace(' ', '_') + '.stamp')\n\n\ndef check_deps(name, deps):\n  stamp_file = get_stamp_file(name)\n  if not os.path.exists(stamp_file):\n    return False\n  for dep in deps:\n    dep = utils.path_from_root(dep)\n    if os.path.getmtime(dep) > os.path.getmtime(stamp_file):\n      return False\n  return True\n\n\ndef check():\n  for name, deps, _ in actions:\n    if not check_deps(name, deps):\n      utils.exit_with_error(f'emscripten setup is not complete (\"{name}\" is out-of-date). Run `bootstrap` to update')\n\n\ndef main(args):\n  parser = argparse.ArgumentParser(description=__doc__)\n  parser.add_argument('-v', '--verbose', action='store_true', help='verbose', default=False)\n  parser.add_argument('-n', '--dry-run', action='store_true', help='dry run', default=False)\n  parser.add_argument('-i', '--install-post-checkout', action='store_true', help='install post checkout script', default=False)\n  args = parser.parse_args()\n\n  if args.install_post_checkout:\n    if not os.path.exists(utils.path_from_root('.git')):\n      print('--install-post-checkout requires git checkout')\n      return 1\n\n    src = utils.path_from_root('tools/maint/post-checkout')\n    dst = utils.path_from_root('.git/hooks')\n    if not os.path.exists(dst):\n      os.mkdir(dst)\n    shutil.copy(src, dst)\n    return 0\n\n  for name, deps, cmd in actions:\n    if check_deps(name, deps):\n      print('Up-to-date: %s' % name)\n      continue\n    print('Out-of-date: %s' % name)\n    stamp_file = get_stamp_file(name)\n    if args.dry_run:\n      print(' (skipping: dry run) -> %s' % ' '.join(cmd))\n      continue\n    print(' -> %s' % ' '.join(cmd))\n    shared.run_process(cmd, cwd=utils.path_from_root())\n    utils.safe_ensure_dirs(STAMP_DIR)\n    utils.write_file(stamp_file, 'Timestamp file created by bootstrap.py')\n  return 0\n\n\nif __name__ == '__main__':\n  main(sys.argv[1:])\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "em++",
          "type": "blob",
          "size": 1.0400390625,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python_compiler.sh` and\n# then run `tools/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nif [ -z \"$_EMCC_CCACHE\" ]; then\n  exec \"$PYTHON\" -E \"$0.py\" \"$@\"\nelse\n  unset _EMCC_CCACHE\n  exec ccache \"$0\" \"$@\"\nfi\n"
        },
        {
          "name": "em++.bat",
          "type": "blob",
          "size": 3.41796875,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python_compiler.bat` and\n:: then run `tools/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: If _EMCC_CCACHE is not set, do a regular invocation of the python compiler driver.\n:: Otherwise remove the ccache env. var, and then reinvoke this script with ccache enabled.\n@if \"%_EMCC_CCACHE%\"==\"\" (\n  set CMD=\"%EM_PY%\" -E \"%MYDIR%%~n0.py\"\n) else (\n  set _EMCC_CCACHE=\n  set CMD=ccache \"%MYDIR%%~n0.bat\"\n)\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@%CMD% %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@%CMD% %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@%CMD% %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@%CMD% %*\n"
        },
        {
          "name": "em++.py",
          "type": "blob",
          "size": 0.494140625,
          "content": "#!/usr/bin/env python3\n# Copyright 2011 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\nimport sys\nimport emcc\nfrom tools import shared\n\nshared.run_via_emxx = True\n\nif __name__ == '__main__':\n  try:\n    sys.exit(emcc.main(sys.argv))\n  except KeyboardInterrupt:\n    emcc.logger.debug('KeyboardInterrupt')\n    sys.exit(1)\n"
        },
        {
          "name": "em-config",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "em-config.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "em-config.py",
          "type": "blob",
          "size": 0.9033203125,
          "content": "#!/usr/bin/env python3\n# Copyright 2012 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"This is a helper tool which is designed to make it possible\nfor other apps to read emscripten's configuration variables\nin a unified way.  Usage:\n\n  em-config VAR_NAME\n\nThis tool prints the value of the variable to stdout if one\nis found, or exits with 1 if the variable does not exist.\n\"\"\"\n\nimport sys\nimport re\nfrom tools import config\n\n\ndef main():\n  if len(sys.argv) != 2 or \\\n    not re.match(r\"^[\\w\\W_][\\w\\W_\\d]*$\", sys.argv[1]) or \\\n    not hasattr(config, sys.argv[1]):\n    print('Usage: em-config VAR_NAME', file=sys.stderr)\n    sys.exit(1)\n\n  print(getattr(config, sys.argv[1]))\n  return 0\n\n\nif __name__ == '__main__':\n  sys.exit(main())\n"
        },
        {
          "name": "emar",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emar.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emar.py",
          "type": "blob",
          "size": 0.3955078125,
          "content": "#!/usr/bin/env python3\n# Copyright 2016 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"Wrapper script around `llvm-ar`.\n\"\"\"\n\nimport sys\nfrom tools import shared\n\nshared.exec_process([shared.LLVM_AR] + sys.argv[1:])\n"
        },
        {
          "name": "embuilder",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "embuilder.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "embuilder.py",
          "type": "blob",
          "size": 9.328125,
          "content": "#!/usr/bin/env python3\n# Copyright 2014 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"Tool to manage building of system libraries and ports.\n\nIn general emcc will build them automatically on demand, so you do not\nstrictly need to use this tool, but it gives you more control over the\nprocess (in particular, if emcc does this automatically, and you are\nrunning multiple build commands in parallel, confusion can occur).\n\"\"\"\n\nimport argparse\nimport fnmatch\nimport logging\nimport sys\nimport time\nfrom contextlib import contextmanager\n\nfrom tools import cache\nfrom tools import shared\nfrom tools import system_libs\nfrom tools import ports\nfrom tools import utils\nfrom tools.settings import settings\nfrom tools.system_libs import USE_NINJA\n\n\n# Minimal subset of targets used by CI systems to build enough to be useful\nMINIMAL_TASKS = [\n    'libcompiler_rt',\n    'libcompiler_rt-wasm-sjlj',\n    'libcompiler_rt-ww',\n    'libc',\n    'libc-debug',\n    'libc-ww-debug',\n    'libc_optz',\n    'libc_optz-debug',\n    'libc++abi',\n    'libc++abi-except',\n    'libc++abi-noexcept',\n    'libc++abi-debug',\n    'libc++abi-debug-except',\n    'libc++abi-debug-noexcept',\n    'libc++abi-debug-ww-noexcept',\n    'libc++',\n    'libc++-except',\n    'libc++-noexcept',\n    'libc++-ww-noexcept',\n    'libal',\n    'libdlmalloc',\n    'libdlmalloc-tracing',\n    'libdlmalloc-debug',\n    'libdlmalloc-ww',\n    'libdlmalloc-ww-debug',\n    'libembind',\n    'libembind-rtti',\n    'libemmalloc',\n    'libemmalloc-debug',\n    'libemmalloc-memvalidate',\n    'libemmalloc-verbose',\n    'libemmalloc-memvalidate-verbose',\n    'libmimalloc',\n    'libmimalloc-mt',\n    'libGL',\n    'libGL-getprocaddr',\n    'libGL-emu-getprocaddr',\n    'libGL-emu-webgl2-ofb-getprocaddr',\n    'libGL-webgl2-ofb-getprocaddr',\n    'libGL-ww-getprocaddr',\n    'libhtml5',\n    'libsockets',\n    'libsockets-ww',\n    'libstubs',\n    'libstubs-debug',\n    'libstandalonewasm-nocatch',\n    'crt1',\n    'crt1_proxy_main',\n    'crtbegin',\n    'libunwind-except',\n    'libnoexit',\n    'sqlite3',\n    'sqlite3-mt',\n    'libwebgpu',\n    'libwebgpu_cpp',\n]\n\n# Additional tasks on top of MINIMAL_TASKS that are necessary for PIC testing on\n# CI (which has slightly more tests than other modes that want to use MINIMAL)\nMINIMAL_PIC_TASKS = MINIMAL_TASKS + [\n    'libcompiler_rt-mt',\n    'libc-mt',\n    'libc-mt-debug',\n    'libc_optz-mt',\n    'libc_optz-mt-debug',\n    'libc++abi-mt',\n    'libc++abi-mt-noexcept',\n    'libc++abi-debug-mt',\n    'libc++abi-debug-mt-noexcept',\n    'libc++-mt',\n    'libc++-mt-noexcept',\n    'libdlmalloc-mt',\n    'libdlmalloc-mt-debug',\n    'libGL-emu',\n    'libGL-emu-webgl2-getprocaddr',\n    'libGL-mt-getprocaddr',\n    'libGL-mt-emu',\n    'libGL-mt-emu-webgl2-getprocaddr',\n    'libGL-mt-emu-webgl2-ofb-getprocaddr',\n    'libsockets_proxy',\n    'libsockets-mt',\n    'crtbegin',\n    'libsanitizer_common_rt',\n    'libubsan_rt',\n    'libwasm_workers-debug-stub',\n    'libfetch',\n    'libfetch-mt',\n    'libwasmfs',\n    'libwasmfs-debug',\n    'libwasmfs_no_fs',\n    'giflib',\n]\n\nPORTS = sorted(list(ports.ports_by_name.keys()) + list(ports.port_variants.keys()))\n\ntemp_files = shared.get_temp_files()\nlogger = logging.getLogger('embuilder')\nlegacy_prefixes = {\n  'libgl': 'libGL',\n}\n\n\ndef get_help():\n  all_tasks = get_all_tasks()\n  all_tasks.sort()\n  return '''\nAvailable targets:\n\n  build / clear\n        %s\n\nIssuing 'embuilder build ALL' causes each task to be built.\n''' % '\\n        '.join(all_tasks)\n\n\n@contextmanager\ndef get_port_variant(name):\n  if name in ports.port_variants:\n    name, extra_settings = ports.port_variants[name]\n    old_settings = settings.dict().copy()\n    for key, value in extra_settings.items():\n      setattr(settings, key, value)\n  else:\n    old_settings = None\n\n  yield name\n\n  if old_settings:\n    settings.dict().update(old_settings)\n\n\ndef clear_port(port_name):\n  with get_port_variant(port_name) as port_name:\n    ports.clear_port(port_name, settings)\n\n\ndef build_port(port_name):\n  with get_port_variant(port_name) as port_name:\n    ports.build_port(port_name, settings)\n\n\ndef get_system_tasks():\n  system_libraries = system_libs.Library.get_all_variations()\n  system_tasks = list(system_libraries.keys())\n  return system_libraries, system_tasks\n\n\ndef get_all_tasks():\n  return get_system_tasks()[1] + PORTS\n\n\ndef handle_port_error(target, message):\n  utils.exit_with_error(f'error building port `{target}` | {message}')\n\n\ndef main():\n  all_build_start_time = time.time()\n\n  parser = argparse.ArgumentParser(description=__doc__,\n                                   formatter_class=argparse.RawDescriptionHelpFormatter,\n                                   epilog=get_help())\n  parser.add_argument('--lto', action='store_const', const='full', help='build bitcode object for LTO')\n  parser.add_argument('--lto=thin', dest='lto', action='store_const', const='thin', help='build bitcode object for ThinLTO')\n  parser.add_argument('--pic', action='store_true',\n                      help='build relocatable objects for suitable for dynamic linking')\n  parser.add_argument('--force', action='store_true',\n                      help='force rebuild of target (by removing it first)')\n  parser.add_argument('--verbose', action='store_true',\n                      help='show build commands')\n  parser.add_argument('--wasm64', action='store_true',\n                      help='use wasm64 architecture')\n  parser.add_argument('operation', choices=['build', 'clear', 'rebuild'])\n  parser.add_argument('targets', nargs='*', help='see below')\n  args = parser.parse_args()\n\n  if args.operation != 'rebuild' and len(args.targets) == 0:\n    shared.exit_with_error('no build targets specified')\n\n  if args.operation == 'rebuild' and not USE_NINJA:\n    shared.exit_with_error('\"rebuild\" operation is only valid when using Ninja')\n\n  # process flags\n\n  # Check sanity so that if settings file has changed, the cache is cleared here.\n  # Otherwise, the cache will clear in an emcc process, which is invoked while building\n  # a system library into the cache, causing trouble.\n  cache.setup()\n  shared.check_sanity()\n\n  if args.lto:\n    settings.LTO = args.lto\n\n  if args.verbose:\n    shared.PRINT_SUBPROCS = True\n\n  if args.pic:\n    settings.RELOCATABLE = 1\n\n  if args.wasm64:\n    settings.MEMORY64 = 2\n    MINIMAL_TASKS[:] = [t for t in MINIMAL_TASKS if 'emmalloc' not in t]\n\n  do_build = args.operation == 'build'\n  do_clear = args.operation == 'clear'\n  if args.force:\n    do_clear = True\n\n  system_libraries, system_tasks = get_system_tasks()\n\n  # process tasks\n  auto_tasks = False\n  task_targets = dict.fromkeys(args.targets) # use dict to keep targets order\n\n  # substitute\n  predefined_tasks = {\n    'SYSTEM': system_tasks,\n    'USER': PORTS,\n    'MINIMAL': MINIMAL_TASKS,\n    'MINIMAL_PIC': MINIMAL_PIC_TASKS,\n    'ALL': system_tasks + PORTS,\n  }\n  for name, tasks in predefined_tasks.items():\n    if name in task_targets:\n      task_targets[name] = tasks\n      auto_tasks = True\n\n  # flatten tasks\n  tasks = []\n  for name, targets in task_targets.items():\n    if targets is None:\n      # Use target name as task\n      if '*' in name:\n        tasks.extend(fnmatch.filter(get_all_tasks(), name))\n      else:\n        tasks.append(name)\n    else:\n      # There are some ports that we don't want to build as part\n      # of ALL since the are not well tested or widely used:\n      if 'cocos2d' in targets:\n        targets.remove('cocos2d')\n\n      # Use targets from predefined_tasks\n      tasks.extend(targets)\n\n  if auto_tasks:\n    print('Building targets: %s' % ' '.join(tasks))\n\n  for what in tasks:\n    for old, new in legacy_prefixes.items():\n      if what.startswith(old):\n        what = what.replace(old, new)\n    if do_build:\n      logger.info('building ' + what)\n    else:\n      logger.info('clearing ' + what)\n    start_time = time.time()\n    if what in system_libraries:\n      library = system_libraries[what]\n      if do_clear:\n        library.erase()\n      if do_build:\n        if USE_NINJA:\n          library.generate()\n        else:\n          library.build()\n    elif what == 'sysroot':\n      if do_clear:\n        cache.erase_file('sysroot_install.stamp')\n      if do_build:\n        system_libs.ensure_sysroot()\n    elif what in PORTS:\n      if do_clear:\n        clear_port(what)\n      if do_build:\n        build_port(what)\n    elif ':' in what or what.endswith('.py'):\n      name = ports.handle_use_port_arg(settings, what, lambda message: handle_port_error(what, message))\n      if do_clear:\n        clear_port(name)\n      if do_build:\n        build_port(name)\n    else:\n      logger.error('unfamiliar build target: ' + what)\n      return 1\n\n    time_taken = time.time() - start_time\n    logger.info('...success. Took %s(%.2fs)' % (('%02d:%02d mins ' % (time_taken // 60, time_taken % 60) if time_taken >= 60 else ''), time_taken))\n\n  if USE_NINJA and args.operation != 'clear':\n    system_libs.build_deferred()\n\n  if len(tasks) > 1 or USE_NINJA:\n    all_build_time_taken = time.time() - all_build_start_time\n    logger.info('Built %d targets in %s(%.2fs)' % (len(tasks), ('%02d:%02d mins ' % (all_build_time_taken // 60, all_build_time_taken % 60) if all_build_time_taken >= 60 else ''), all_build_time_taken))\n\n  return 0\n\n\nif __name__ == '__main__':\n  try:\n    sys.exit(main())\n  except KeyboardInterrupt:\n    logger.warning(\"KeyboardInterrupt\")\n    sys.exit(1)\n"
        },
        {
          "name": "emcc",
          "type": "blob",
          "size": 1.0400390625,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python_compiler.sh` and\n# then run `tools/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nif [ -z \"$_EMCC_CCACHE\" ]; then\n  exec \"$PYTHON\" -E \"$0.py\" \"$@\"\nelse\n  unset _EMCC_CCACHE\n  exec ccache \"$0\" \"$@\"\nfi\n"
        },
        {
          "name": "emcc.bat",
          "type": "blob",
          "size": 3.41796875,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python_compiler.bat` and\n:: then run `tools/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: If _EMCC_CCACHE is not set, do a regular invocation of the python compiler driver.\n:: Otherwise remove the ccache env. var, and then reinvoke this script with ccache enabled.\n@if \"%_EMCC_CCACHE%\"==\"\" (\n  set CMD=\"%EM_PY%\" -E \"%MYDIR%%~n0.py\"\n) else (\n  set _EMCC_CCACHE=\n  set CMD=ccache \"%MYDIR%%~n0.bat\"\n)\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@%CMD% %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@%CMD% %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@%CMD% %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@%CMD% %*\n"
        },
        {
          "name": "emcc.py",
          "type": "blob",
          "size": 62.181640625,
          "content": "#!/usr/bin/env python3\n# Copyright 2011 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"emcc - compiler helper script\n=============================\n\nemcc is a drop-in replacement for a compiler like gcc or clang.\n\nSee  emcc --help  for details.\n\nemcc can be influenced by a few environment variables:\n\n  EMCC_DEBUG - \"1\" will log out useful information during compilation, as well as\n               save each compiler step as an emcc-* file in the temp dir\n               (by default /tmp/emscripten_temp). \"2\" will save additional emcc-*\n               steps, that would normally not be separately produced (so this\n               slows down compilation).\n\"\"\"\n\nfrom tools.toolchain_profiler import ToolchainProfiler\n\nimport json\nimport logging\nimport os\nimport re\nimport shlex\nimport shutil\nimport sys\nimport time\nimport tarfile\nfrom enum import Enum, auto, unique\nfrom subprocess import PIPE\n\n\nfrom tools import shared, system_libs, utils, ports\nfrom tools import colored_logger, diagnostics, building\nfrom tools.shared import unsuffixed, unsuffixed_basename, get_file_suffix\nfrom tools.shared import run_process, exit_with_error, DEBUG\nfrom tools.shared import in_temp, OFormat\nfrom tools.shared import DYNAMICLIB_ENDINGS\nfrom tools.response_file import substitute_response_files\nfrom tools import config\nfrom tools import cache\nfrom tools.settings import default_setting, user_settings, settings, MEM_SIZE_SETTINGS, COMPILE_TIME_SETTINGS\nfrom tools.utils import read_file, removeprefix\nfrom tools import feature_matrix\n\nlogger = logging.getLogger('emcc')\n\n# In git checkouts of emscripten `bootstrap.py` exists to run post-checkout\n# steps.  In packaged versions (e.g. emsdk) this file does not exist (because\n# it is excluded in tools/install.py) and these steps are assumed to have been\n# run already.\nif os.path.exists(utils.path_from_root('.git')) and os.path.exists(utils.path_from_root('bootstrap.py')):\n  import bootstrap\n  bootstrap.check()\n\n# endings = dot + a suffix, compare against result of shared.suffix()\nC_ENDINGS = ['.c', '.i']\nCXX_ENDINGS = ['.cppm', '.pcm', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.C', '.CC', '.C++', '.ii']\nOBJC_ENDINGS = ['.m', '.mi']\nPREPROCESSED_ENDINGS = ['.i', '.ii']\nOBJCXX_ENDINGS = ['.mm', '.mii']\nSPECIAL_ENDINGLESS_FILENAMES = [os.devnull]\nC_ENDINGS += SPECIAL_ENDINGLESS_FILENAMES # consider the special endingless filenames like /dev/null to be C\n\nSOURCE_ENDINGS = C_ENDINGS + CXX_ENDINGS + OBJC_ENDINGS + OBJCXX_ENDINGS + ['.bc', '.ll', '.S']\nASSEMBLY_ENDINGS = ['.s']\nHEADER_ENDINGS = ['.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH']\n\n# These symbol names are allowed in INCOMING_MODULE_JS_API but are not part of the\n# default set.\nEXTRA_INCOMING_JS_API = [\n  'fetchSettings'\n]\n\nSIMD_INTEL_FEATURE_TOWER = ['-msse', '-msse2', '-msse3', '-mssse3', '-msse4.1', '-msse4.2', '-msse4', '-mavx']\nSIMD_NEON_FLAGS = ['-mfpu=neon']\nLINK_ONLY_FLAGS = {\n    '--bind', '--closure', '--cpuprofiler', '--embed-file',\n    '--emit-symbol-map', '--emrun', '--exclude-file', '--extern-post-js',\n    '--extern-pre-js', '--ignore-dynamic-linking', '--js-library',\n    '--js-transform', '--oformat', '--output_eol',\n    '--post-js', '--pre-js', '--preload-file', '--profiling-funcs',\n    '--proxy-to-worker', '--shell-file', '--source-map-base',\n    '--threadprofiler', '--use-preload-plugins'\n}\nCLANG_FLAGS_WITH_ARGS = {\n    '-MT', '-MF', '-MJ', '-MQ', '-D', '-U', '-o', '-x',\n    '-Xpreprocessor', '-include', '-imacros', '-idirafter',\n    '-iprefix', '-iwithprefix', '-iwithprefixbefore',\n    '-isysroot', '-imultilib', '-A', '-isystem', '-iquote',\n    '-install_name', '-compatibility_version', '-mllvm',\n    '-current_version', '-I', '-L', '-include-pch',\n    '-undefined', '-target', '-Xlinker', '-Xclang', '-z'\n}\n\n\n@unique\nclass Mode(Enum):\n  PREPROCESS_ONLY = auto()\n  PCH = auto()\n  COMPILE_ONLY = auto()\n  POST_LINK_ONLY = auto()\n  COMPILE_AND_LINK = auto()\n\n\nclass EmccState:\n  def __init__(self, args):\n    self.mode = Mode.COMPILE_AND_LINK\n    # Using tuple here to prevent accidental mutation\n    self.orig_args = tuple(args)\n    self.has_dash_c = False\n    self.has_dash_E = False\n    self.has_dash_S = False\n    # List of link options paired with their position on the command line [(i, option), ...].\n    self.link_flags = []\n    self.lib_dirs = []\n\n  def has_link_flag(self, f):\n    return f in [x for _, x in self.link_flags]\n\n  def add_link_flag(self, i, flag):\n    if flag.startswith('-L'):\n      self.lib_dirs.append(flag[2:])\n    # Link flags should be adding in strictly ascending order\n    assert not self.link_flags or i > self.link_flags[-1][0], self.link_flags\n    self.link_flags.append((i, flag))\n\n  def append_link_flag(self, flag):\n    if self.link_flags:\n      index = self.link_flags[-1][0] + 1\n    else:\n      index = 1\n    self.add_link_flag(index, flag)\n\n\nclass EmccOptions:\n  def __init__(self):\n    self.target = ''\n    self.output_file = None\n    self.no_minify = False\n    self.post_link = False\n    self.save_temps = False\n    self.executable = False\n    self.compiler_wrapper = None\n    self.oformat = None\n    self.requested_debug = ''\n    self.emit_symbol_map = False\n    self.use_closure_compiler = None\n    self.closure_args = []\n    self.js_transform = None\n    self.pre_js = [] # before all js\n    self.post_js = [] # after all js\n    self.extern_pre_js = [] # before all js, external to optimized code\n    self.extern_post_js = [] # after all js, external to optimized code\n    self.preload_files = []\n    self.embed_files = []\n    self.exclude_files = []\n    self.ignore_dynamic_linking = False\n    self.shell_path = None\n    self.source_map_base = ''\n    self.emit_tsd = ''\n    self.embind_emit_tsd = ''\n    self.emrun = False\n    self.cpu_profiler = False\n    self.memory_profiler = False\n    self.use_preload_cache = False\n    self.use_preload_plugins = False\n    self.valid_abspaths = []\n    # Specifies the line ending format to use for all generated text files.\n    # Defaults to using the native EOL on each platform (\\r\\n on Windows, \\n on\n    # Linux & MacOS)\n    self.output_eol = os.linesep\n    self.no_entry = False\n    self.shared = False\n    self.relocatable = False\n    self.reproduce = None\n\n\ndef create_reproduce_file(name, args):\n  def make_relative(filename):\n    filename = os.path.normpath(os.path.abspath(filename))\n    filename = os.path.splitdrive(filename)[1]\n    filename = filename[1:]\n    return filename\n\n  root = unsuffixed_basename(name)\n  with tarfile.open(name, 'w') as reproduce_file:\n    reproduce_file.add(shared.path_from_root('emscripten-version.txt'), os.path.join(root, 'version.txt'))\n\n    with shared.get_temp_files().get_file(suffix='.tar') as rsp_name:\n      with open(rsp_name, 'w') as rsp:\n        ignore_next = False\n        output_arg = None\n\n        for arg in args:\n          ignore = ignore_next\n          ignore_next = False\n          if arg.startswith('--reproduce='):\n            continue\n\n          if len(arg) > 2 and arg.startswith('-o'):\n            rsp.write('-o\\n')\n            arg = arg[3:]\n            output_arg = True\n            ignore = True\n\n          if output_arg:\n            # If -o path contains directories, \"emcc @response.txt\" will likely\n            # fail because the archive we are creating doesn't contain empty\n            # directories for the output path (-o doesn't create directories).\n            # Strip directories to prevent the issue.\n            arg = os.path.basename(arg)\n            output_arg = False\n\n          if not arg.startswith('-') and not ignore:\n            relpath = make_relative(arg)\n            rsp.write(relpath + '\\n')\n            reproduce_file.add(arg, os.path.join(root, relpath))\n          else:\n            rsp.write(arg + '\\n')\n\n          if ignore:\n            continue\n\n          if arg in CLANG_FLAGS_WITH_ARGS:\n            ignore_next = True\n\n          if arg == '-o':\n            output_arg = True\n\n      reproduce_file.add(rsp_name, os.path.join(root, 'response.txt'))\n\n\ndef expand_byte_size_suffixes(value):\n  \"\"\"Given a string with KB/MB size suffixes, such as \"32MB\", computes how\n  many bytes that is and returns it as an integer.\n  \"\"\"\n  value = value.strip()\n  match = re.match(r'^(\\d+)\\s*([kmgt]?b)?$', value, re.I)\n  if not match:\n    exit_with_error(\"invalid byte size `%s`.  Valid suffixes are: kb, mb, gb, tb\" % value)\n  value, suffix = match.groups()\n  value = int(value)\n  if suffix:\n    size_suffixes = {suffix: 1024 ** i for i, suffix in enumerate(['b', 'kb', 'mb', 'gb', 'tb'])}\n    value *= size_suffixes[suffix.lower()]\n  return value\n\n\ndef apply_user_settings():\n  \"\"\"Take a map of users settings {NAME: VALUE} and apply them to the global\n  settings object.\n  \"\"\"\n\n  # Stash a copy of all available incoming APIs before the user can potentially override it\n  settings.ALL_INCOMING_MODULE_JS_API = settings.INCOMING_MODULE_JS_API + EXTRA_INCOMING_JS_API\n\n  for key, value in user_settings.items():\n    if key in settings.internal_settings:\n      exit_with_error('%s is an internal setting and cannot be set from command line', key)\n\n    # map legacy settings which have aliases to the new names\n    # but keep the original key so errors are correctly reported via the `setattr` below\n    user_key = key\n    if key in settings.legacy_settings and key in settings.alt_names:\n      key = settings.alt_names[key]\n\n    # In those settings fields that represent amount of memory, translate suffixes to multiples of 1024.\n    if key in MEM_SIZE_SETTINGS:\n      value = str(expand_byte_size_suffixes(value))\n\n    filename = None\n    if value and value[0] == '@':\n      filename = removeprefix(value, '@')\n      if not os.path.isfile(filename):\n        exit_with_error('%s: file not found parsing argument: %s=%s' % (filename, key, value))\n      value = read_file(filename).strip()\n    else:\n      value = value.replace('\\\\', '\\\\\\\\')\n\n    expected_type = settings.types.get(key)\n\n    if filename and expected_type == list and value.strip()[0] != '[':\n      # Prefer simpler one-line-per value parser\n      value = parse_symbol_list_file(value)\n    else:\n      try:\n        value = parse_value(value, expected_type)\n      except Exception as e:\n        exit_with_error(f'error parsing \"-s\" setting \"{key}={value}\": {e}')\n\n    setattr(settings, user_key, value)\n\n    if key == 'EXPORTED_FUNCTIONS':\n      # used for warnings in emscripten.py\n      settings.USER_EXPORTS = settings.EXPORTED_FUNCTIONS.copy()\n\n    # TODO(sbc): Remove this legacy way.\n    if key == 'WASM_OBJECT_FILES':\n      settings.LTO = 0 if value else 'full'\n\n    if key == 'JSPI':\n      settings.ASYNCIFY = 2\n    if key == 'JSPI_IMPORTS':\n      settings.ASYNCIFY_IMPORTS = value\n    if key == 'JSPI_EXPORTS':\n      settings.ASYNCIFY_EXPORTS = value\n\n\ndef cxx_to_c_compiler(cxx):\n  # Convert C++ compiler name into C compiler name\n  dirname, basename = os.path.split(cxx)\n  basename = basename.replace('clang++', 'clang').replace('g++', 'gcc').replace('em++', 'emcc')\n  return os.path.join(dirname, basename)\n\n\ndef is_dash_s_for_emcc(args, i):\n  # -s OPT=VALUE or -s OPT or -sOPT are all interpreted as emscripten flags.\n  # -s by itself is a linker option (alias for --strip-all)\n  if args[i] == '-s':\n    if len(args) <= i + 1:\n      return False\n    arg = args[i + 1]\n  else:\n    arg = removeprefix(args[i], '-s')\n  arg = arg.split('=')[0]\n  return arg.isidentifier() and arg.isupper()\n\n\ndef parse_s_args(args):\n  settings_changes = []\n  for i in range(len(args)):\n    if args[i].startswith('-s'):\n      if is_dash_s_for_emcc(args, i):\n        if args[i] == '-s':\n          key = args[i + 1]\n          args[i + 1] = ''\n        else:\n          key = removeprefix(args[i], '-s')\n        args[i] = ''\n\n        # If not = is specified default to 1\n        if '=' not in key:\n          key += '=1'\n\n        # Special handling of browser version targets. A version -1 means that the specific version\n        # is not supported at all. Replace those with INT32_MAX to make it possible to compare e.g.\n        # #if MIN_FIREFOX_VERSION < 68\n        if re.match(r'MIN_.*_VERSION(=.*)?', key):\n          try:\n            if int(key.split('=')[1]) < 0:\n              key = key.split('=')[0] + '=0x7FFFFFFF'\n          except Exception:\n            pass\n\n        settings_changes.append(key)\n\n  newargs = [a for a in args if a]\n  return (settings_changes, newargs)\n\n\ndef get_target_flags():\n  return ['-target', shared.get_llvm_target()]\n\n\ndef get_clang_flags(user_args):\n  flags = get_target_flags()\n\n  # if exception catching is disabled, we can prevent that code from being\n  # generated in the frontend\n  if settings.DISABLE_EXCEPTION_CATCHING and not settings.WASM_EXCEPTIONS:\n    flags.append('-fignore-exceptions')\n\n  if settings.INLINING_LIMIT:\n    flags.append('-fno-inline-functions')\n\n  if settings.PTHREADS:\n    if '-pthread' not in user_args:\n      flags.append('-pthread')\n  elif settings.SHARED_MEMORY:\n    if '-matomics' not in user_args:\n      flags.append('-matomics')\n    if '-mbulk-memory' not in user_args:\n      flags.append('-mbulk-memory')\n\n  if settings.RELOCATABLE and '-fPIC' not in user_args:\n    flags.append('-fPIC')\n\n  if settings.RELOCATABLE or settings.LINKABLE or '-fPIC' in user_args:\n    if not any(a.startswith('-fvisibility') for a in user_args):\n      # For relocatable code we default to visibility=default in emscripten even\n      # though the upstream backend defaults visibility=hidden.  This matches the\n      # expectations of C/C++ code in the wild which expects undecorated symbols\n      # to be exported to other DSO's by default.\n      flags.append('-fvisibility=default')\n\n  if settings.LTO:\n    if not any(a.startswith('-flto') for a in user_args):\n      flags.append('-flto=' + settings.LTO)\n    # setjmp/longjmp handling using Wasm EH\n    # For non-LTO, '-mllvm -wasm-enable-eh' added in\n    # building.llvm_backend_args() sets this feature in clang. But in LTO, the\n    # argument is added to wasm-ld instead, so clang needs to know that EH is\n    # enabled so that it can be added to the attributes in LLVM IR.\n    if settings.SUPPORT_LONGJMP == 'wasm':\n      flags.append('-mexception-handling')\n\n  else:\n    # In LTO mode these args get passed instead at link time when the backend runs.\n    for a in building.llvm_backend_args():\n      flags += ['-mllvm', a]\n\n  return flags\n\n\ncflags = None\n\n\ndef get_cflags(user_args, is_cxx):\n  global cflags\n  if cflags:\n    return cflags\n\n  # Flags we pass to the compiler when building C/C++ code\n  # We add these to the user's flags (newargs), but not when building .s or .S assembly files\n  cflags = get_clang_flags(user_args)\n  cflags.append('--sysroot=' + cache.get_sysroot(absolute=True))\n\n  if settings.EMSCRIPTEN_TRACING:\n    cflags.append('-D__EMSCRIPTEN_TRACING__=1')\n\n  if settings.SHARED_MEMORY:\n    cflags.append('-D__EMSCRIPTEN_SHARED_MEMORY__=1')\n\n  if settings.WASM_WORKERS:\n    cflags.append('-D__EMSCRIPTEN_WASM_WORKERS__=1')\n\n  if not settings.STRICT:\n    # The preprocessor define EMSCRIPTEN is deprecated. Don't pass it to code\n    # in strict mode. Code should use the define __EMSCRIPTEN__ instead.\n    cflags.append('-DEMSCRIPTEN')\n\n  # Changes to default clang behavior\n\n  # Implicit functions can cause horribly confusing function pointer type errors, see #2175\n  # If your codebase really needs them - very unrecommended! - you can disable the error with\n  #   -Wno-error=implicit-function-declaration\n  # or disable even a warning about it with\n  #   -Wno-implicit-function-declaration\n  # This is already an error in C++ so we don't need to inject extra flags.\n  if not is_cxx:\n    cflags += ['-Werror=implicit-function-declaration']\n\n  ports.add_cflags(cflags, settings)\n\n  def array_contains_any_of(hay, needles):\n    for n in needles:\n      if n in hay:\n        return True\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER) or array_contains_any_of(user_args, SIMD_NEON_FLAGS):\n    if '-msimd128' not in user_args and '-mrelaxed-simd' not in user_args:\n      exit_with_error('passing any of ' + ', '.join(SIMD_INTEL_FEATURE_TOWER + SIMD_NEON_FLAGS) + ' flags also requires passing -msimd128 (or -mrelaxed-simd)!')\n    cflags += ['-D__SSE__=1']\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[1:]):\n    cflags += ['-D__SSE2__=1']\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[2:]):\n    cflags += ['-D__SSE3__=1']\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[3:]):\n    cflags += ['-D__SSSE3__=1']\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[4:]):\n    cflags += ['-D__SSE4_1__=1']\n\n  # Handle both -msse4.2 and its alias -msse4.\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[5:]):\n    cflags += ['-D__SSE4_2__=1']\n\n  if array_contains_any_of(user_args, SIMD_INTEL_FEATURE_TOWER[7:]):\n    cflags += ['-D__AVX__=1']\n\n  if array_contains_any_of(user_args, SIMD_NEON_FLAGS):\n    cflags += ['-D__ARM_NEON__=1']\n\n  if '-nostdinc' not in user_args:\n    if not settings.USE_SDL:\n      cflags += ['-Xclang', '-iwithsysroot' + os.path.join('/include', 'fakesdl')]\n    cflags += ['-Xclang', '-iwithsysroot' + os.path.join('/include', 'compat')]\n\n  return cflags\n\n\ndef get_library_basename(filename):\n  \"\"\"Similar to get_file_suffix this strips off all numeric suffixes and then\n  then final non-numeric one.  For example for 'libz.so.1.2.8' returns 'libz'\"\"\"\n  filename = os.path.basename(filename)\n  while filename:\n    filename, suffix = os.path.splitext(filename)\n    # Keep stipping suffixes until we strip a non-numeric one.\n    if not suffix[1:].isdigit():\n      return filename\n\n\n#\n# Main run() function\n#\ndef run(args):\n  if shared.run_via_emxx:\n    clang = shared.CLANG_CXX\n  else:\n    clang = shared.CLANG_CC\n\n  # Special case the handling of `-v` because it has a special/different meaning\n  # when used with no other arguments.  In particular, we must handle this early\n  # on, before we inject EMCC_CFLAGS.  This is because tools like cmake and\n  # autoconf will run `emcc -v` to determine the compiler version and we don't\n  # want that to break for users of EMCC_CFLAGS.\n  if len(args) == 2 and args[1] == '-v':\n    # autoconf likes to see 'GNU' in the output to enable shared object support\n    print(version_string(), file=sys.stderr)\n    return shared.check_call([clang, '-v'] + get_target_flags(), check=False).returncode\n\n  # Additional compiler flags that we treat as if they were passed to us on the\n  # commandline\n  EMCC_CFLAGS = os.environ.get('EMCC_CFLAGS')\n  if EMCC_CFLAGS:\n    args += shlex.split(EMCC_CFLAGS)\n\n  if DEBUG:\n    logger.warning(f'invocation: {shared.shlex_join(args)} (in {os.getcwd()})')\n\n  # Strip args[0] (program name)\n  args = args[1:]\n\n  # Handle some global flags\n\n  # read response files very early on\n  try:\n    args = substitute_response_files(args)\n  except IOError as e:\n    exit_with_error(e)\n\n  if '--help' in args:\n    # Documentation for emcc and its options must be updated in:\n    #    site/source/docs/tools_reference/emcc.rst\n    # This then gets built (via: `make -C site text`) to:\n    #    site/build/text/docs/tools_reference/emcc.txt\n    # This then needs to be copied to its final home in docs/emcc.txt from where\n    # we read it here.  We have CI rules that ensure its always up-to-date.\n    print(read_file(utils.path_from_root('docs/emcc.txt')))\n\n    print('''\n------------------------------------------------------------------\n\nemcc: supported targets: llvm bitcode, WebAssembly, NOT elf\n(autoconf likes to see elf above to enable shared object support)\n''')\n    return 0\n\n  ## Process argument and setup the compiler\n  state = EmccState(args)\n  options, newargs = phase_parse_arguments(state)\n\n  if not shared.SKIP_SUBPROCS:\n    shared.check_sanity()\n\n  if '--version' in args:\n    print(version_string())\n    print('''\\\nCopyright (C) 2014 the Emscripten authors (see AUTHORS.txt)\nThis is free and open source software under the MIT license.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n''')\n    return 0\n\n  if '-dumpversion' in args: # gcc's doc states \"Print the compiler version [...] and don't do anything else.\"\n    print(utils.EMSCRIPTEN_VERSION)\n    return 0\n\n  if '--cflags' in args:\n    # fake running the command, to see the full args we pass to clang\n    args = [x for x in args if x != '--cflags']\n    with shared.get_temp_files().get_file(suffix='.o') as temp_target:\n      input_file = 'hello_world.c'\n      compiler = shared.EMCC\n      if shared.run_via_emxx:\n        compiler = shared.EMXX\n      cmd = [compiler, utils.path_from_root('test', input_file), '-v', '-c', '-o', temp_target] + args\n      proc = run_process(cmd, stderr=PIPE, check=False)\n      if proc.returncode != 0:\n        print(proc.stderr)\n        exit_with_error('error getting cflags')\n      lines = [x for x in proc.stderr.splitlines() if clang in x and input_file in x]\n      if not lines:\n        exit_with_error(f'unable to parse output of `{cmd}`:\\n{proc.stderr}')\n      parts = shlex.split(lines[0].replace('\\\\', '\\\\\\\\'))\n      parts = [x for x in parts if x not in ['-c', '-o', '-v', '-emit-llvm'] and input_file not in x and temp_target not in x]\n      print(shared.shlex_join(parts[1:]))\n    return 0\n\n  if 'EMMAKEN_NO_SDK' in os.environ:\n    exit_with_error('EMMAKEN_NO_SDK is no longer supported.  The standard -nostdlib and -nostdinc flags should be used instead')\n\n  if 'EMMAKEN_COMPILER' in os.environ:\n    exit_with_error('`EMMAKEN_COMPILER` is no longer supported.\\n' +\n                    'Please use the `LLVM_ROOT` and/or `COMPILER_WRAPPER` config settings instead')\n\n  if 'EMMAKEN_CFLAGS' in os.environ:\n    exit_with_error('`EMMAKEN_CFLAGS` is no longer supported, please use `EMCC_CFLAGS` instead')\n\n  if 'EMCC_REPRODUCE' in os.environ:\n    options.reproduce = os.environ['EMCC_REPRODUCE']\n\n  # For internal consistency, ensure we don't attempt or read or write any link time\n  # settings until we reach the linking phase.\n  settings.limit_settings(COMPILE_TIME_SETTINGS)\n\n  newargs, input_files = phase_setup(options, state, newargs)\n\n  if '-dumpmachine' in newargs or '-print-target-triple' in newargs or '--print-target-triple' in newargs:\n    print(shared.get_llvm_target())\n    return 0\n\n  if '-print-search-dirs' in newargs or '--print-search-dirs' in newargs:\n    print(f'programs: ={config.LLVM_ROOT}')\n    print(f'libraries: ={cache.get_lib_dir(absolute=True)}')\n    return 0\n\n  if '-print-resource-dir' in newargs:\n    shared.check_call([clang] + newargs)\n    return 0\n\n  if '-print-libgcc-file-name' in newargs or '--print-libgcc-file-name' in newargs:\n    settings.limit_settings(None)\n    compiler_rt = system_libs.Library.get_usable_variations()['libcompiler_rt']\n    print(compiler_rt.get_path(absolute=True))\n    return 0\n\n  print_file_name = [a for a in newargs if a.startswith('-print-file-name=') or a.startswith('--print-file-name=')]\n  if print_file_name:\n    libname = print_file_name[-1].split('=')[1]\n    system_libpath = cache.get_lib_dir(absolute=True)\n    fullpath = os.path.join(system_libpath, libname)\n    if os.path.isfile(fullpath):\n      print(fullpath)\n    else:\n      print(libname)\n    return 0\n\n  if options.reproduce:\n    create_reproduce_file(options.reproduce, args)\n\n  if state.mode == Mode.POST_LINK_ONLY:\n    if len(input_files) != 1:\n      exit_with_error('--post-link requires a single input file')\n    # Delay import of link.py to avoid processing this file when only compiling\n    from tools import link\n    link.run_post_link(input_files[0][1], options, state)\n    return 0\n\n  ## Compile source code to object files\n  linker_inputs = phase_compile_inputs(options, state, newargs, input_files)\n\n  if state.mode == Mode.COMPILE_AND_LINK:\n    # Delay import of link.py to avoid processing this file when only compiling\n    from tools import link\n    return link.run(linker_inputs, options, state)\n  else:\n    logger.debug('stopping after compile phase')\n    return 0\n\n\ndef normalize_boolean_setting(name, value):\n  # boolean NO_X settings are aliases for X\n  # (note that *non*-boolean setting values have special meanings,\n  # and we can't just flip them, so leave them as-is to be\n  # handled in a special way later)\n  if name.startswith('NO_') and value in ('0', '1'):\n    name = removeprefix(name, 'NO_')\n    value = str(1 - int(value))\n  return name, value\n\n\n@ToolchainProfiler.profile_block('parse arguments')\ndef phase_parse_arguments(state):\n  \"\"\"The first phase of the compiler.  Parse command line argument and\n  populate settings.\n  \"\"\"\n  newargs = list(state.orig_args)\n\n  # Scan and strip emscripten specific cmdline warning flags.\n  # This needs to run before other cmdline flags have been parsed, so that\n  # warnings are properly printed during arg parse.\n  newargs = diagnostics.capture_warnings(newargs)\n\n  if not diagnostics.is_enabled('deprecated'):\n    settings.WARN_DEPRECATED = 0\n\n  for i in range(len(newargs)):\n    if newargs[i] in ('-l', '-L', '-I', '-z', '--js-library'):\n      # Scan for flags that can be written as either one or two arguments\n      # and normalize them to the single argument form.\n      if newargs[i] == '--js-library':\n        newargs[i] += '='\n      newargs[i] += newargs[i + 1]\n      newargs[i + 1] = ''\n\n  options, settings_changes, user_js_defines, newargs = parse_args(newargs)\n\n  if options.post_link or options.oformat == OFormat.BARE:\n    diagnostics.warning('experimental', '--oformat=bare/--post-link are experimental and subject to change.')\n\n  explicit_settings_changes, newargs = parse_s_args(newargs)\n  settings_changes += explicit_settings_changes\n\n  for s in settings_changes:\n    key, value = s.split('=', 1)\n    key, value = normalize_boolean_setting(key, value)\n    user_settings[key] = value\n\n  # STRICT is used when applying settings so it needs to be applied first before\n  # calling `apply_user_settings`.\n  strict_cmdline = user_settings.get('STRICT')\n  if strict_cmdline:\n    settings.STRICT = int(strict_cmdline)\n\n  # Apply user -jsD settings\n  for s in user_js_defines:\n    settings[s[0]] = s[1]\n\n  # Apply -s settings in newargs here (after optimization levels, so they can override them)\n  apply_user_settings()\n\n  return options, newargs\n\n\n@ToolchainProfiler.profile_block('setup')\ndef phase_setup(options, state, newargs):\n  \"\"\"Second phase: configure and setup the compiler based on the specified settings and arguments.\n  \"\"\"\n\n  if settings.RUNTIME_LINKED_LIBS:\n    newargs += settings.RUNTIME_LINKED_LIBS\n\n  # Find input files\n\n  # These three arrays are used to store arguments of different types for\n  # type-specific processing. In order to shuffle the arguments back together\n  # after processing, all of these arrays hold tuples (original_index, value).\n  # Note that the index part of the tuple can have a fractional part for input\n  # arguments that expand into multiple processed arguments, as in -Wl,-f1,-f2.\n  input_files = []\n\n  # find input files with a simple heuristic. we should really analyze\n  # based on a full understanding of gcc params, right now we just assume that\n  # what is left contains no more |-x OPT| things\n  skip = False\n  has_header_inputs = False\n  for i in range(len(newargs)):\n    if skip:\n      skip = False\n      continue\n\n    arg = newargs[i]\n    if arg in CLANG_FLAGS_WITH_ARGS:\n      skip = True\n\n    if not arg.startswith('-'):\n      # we already removed -o <target>, so all these should be inputs\n      newargs[i] = ''\n      # os.devnul should always be reported as existing but there is bug in windows\n      # python before 3.8:\n      # https://bugs.python.org/issue1311\n      if not os.path.exists(arg) and arg != os.devnull:\n        exit_with_error('%s: No such file or directory (\"%s\" was expected to be an input file, based on the commandline arguments provided)', arg, arg)\n      file_suffix = get_file_suffix(arg)\n      if file_suffix in HEADER_ENDINGS:\n        has_header_inputs = True\n      input_files.append((i, arg))\n    elif arg.startswith('-L'):\n      state.add_link_flag(i, arg)\n    elif arg.startswith('-l'):\n      state.add_link_flag(i, arg)\n    elif arg == '-z':\n      state.add_link_flag(i, newargs[i])\n      state.add_link_flag(i + 1, newargs[i + 1])\n    elif arg.startswith('-z'):\n      state.add_link_flag(i, newargs[i])\n    elif arg.startswith('--js-library='):\n      state.add_link_flag(i, newargs[i])\n    elif arg.startswith('-Wl,'):\n      # Multiple comma separated link flags can be specified. Create fake\n      # fractional indices for these: -Wl,a,b,c,d at index 4 becomes:\n      # (4, a), (4.25, b), (4.5, c), (4.75, d)\n      link_flags_to_add = arg.split(',')[1:]\n      for flag_index, flag in enumerate(link_flags_to_add):\n        state.add_link_flag(i + float(flag_index) / len(link_flags_to_add), flag)\n    elif arg == '-Xlinker':\n      state.add_link_flag(i + 1, newargs[i + 1])\n    elif arg == '-s':\n      state.add_link_flag(i, newargs[i])\n    elif arg == '-':\n      input_files.append((i, arg))\n      newargs[i] = ''\n\n  newargs = [a for a in newargs if a]\n\n  # SSEx is implemented on top of SIMD128 instruction set, but do not pass SSE flags to LLVM\n  # so it won't think about generating native x86 SSE code.\n  newargs = [x for x in newargs if x not in SIMD_INTEL_FEATURE_TOWER and x not in SIMD_NEON_FLAGS]\n\n  state.has_dash_c = '-c' in newargs or '--precompile' in newargs\n  state.has_dash_S = '-S' in newargs\n  state.has_dash_E = '-E' in newargs\n\n  if options.post_link:\n    state.mode = Mode.POST_LINK_ONLY\n  elif state.has_dash_E or '-M' in newargs or '-MM' in newargs or '-fsyntax-only' in newargs:\n    state.mode = Mode.PREPROCESS_ONLY\n  elif has_header_inputs:\n    state.mode = Mode.PCH\n  elif state.has_dash_c or state.has_dash_S:\n    state.mode = Mode.COMPILE_ONLY\n\n  if state.mode in (Mode.COMPILE_ONLY, Mode.PREPROCESS_ONLY):\n    for key in user_settings:\n      if key not in COMPILE_TIME_SETTINGS:\n        diagnostics.warning(\n            'unused-command-line-argument',\n            \"linker setting ignored during compilation: '%s'\" % key)\n    for arg in state.orig_args:\n      if arg in LINK_ONLY_FLAGS:\n        diagnostics.warning(\n            'unused-command-line-argument',\n            \"linker flag ignored during compilation: '%s'\" % arg)\n\n  if settings.MAIN_MODULE or settings.SIDE_MODULE:\n    settings.RELOCATABLE = 1\n\n  if 'USE_PTHREADS' in user_settings:\n    settings.PTHREADS = settings.USE_PTHREADS\n\n  # Pthreads and Wasm Workers require targeting shared Wasm memory (SAB).\n  if settings.PTHREADS or settings.WASM_WORKERS:\n    settings.SHARED_MEMORY = 1\n\n  if settings.SHARED_MEMORY:\n    settings.BULK_MEMORY = 1\n\n  if 'DISABLE_EXCEPTION_CATCHING' in user_settings and 'EXCEPTION_CATCHING_ALLOWED' in user_settings:\n    # If we get here then the user specified both DISABLE_EXCEPTION_CATCHING and EXCEPTION_CATCHING_ALLOWED\n    # on the command line.  This is no longer valid so report either an error or a warning (for\n    # backwards compat with the old `DISABLE_EXCEPTION_CATCHING=2`\n    if user_settings['DISABLE_EXCEPTION_CATCHING'] in ('0', '2'):\n      diagnostics.warning('deprecated', 'DISABLE_EXCEPTION_CATCHING=X is no longer needed when specifying EXCEPTION_CATCHING_ALLOWED')\n    else:\n      exit_with_error('DISABLE_EXCEPTION_CATCHING and EXCEPTION_CATCHING_ALLOWED are mutually exclusive')\n\n  if settings.EXCEPTION_CATCHING_ALLOWED:\n    settings.DISABLE_EXCEPTION_CATCHING = 0\n\n  if settings.WASM_EXCEPTIONS:\n    if user_settings.get('DISABLE_EXCEPTION_CATCHING') == '0':\n      exit_with_error('DISABLE_EXCEPTION_CATCHING=0 is not compatible with -fwasm-exceptions')\n    if user_settings.get('DISABLE_EXCEPTION_THROWING') == '0':\n      exit_with_error('DISABLE_EXCEPTION_THROWING=0 is not compatible with -fwasm-exceptions')\n    # -fwasm-exceptions takes care of enabling them, so users aren't supposed to\n    # pass them explicitly, regardless of their values\n    if 'DISABLE_EXCEPTION_CATCHING' in user_settings or 'DISABLE_EXCEPTION_THROWING' in user_settings:\n      diagnostics.warning('emcc', 'you no longer need to pass DISABLE_EXCEPTION_CATCHING or DISABLE_EXCEPTION_THROWING when using Wasm exceptions')\n    settings.DISABLE_EXCEPTION_CATCHING = 1\n    settings.DISABLE_EXCEPTION_THROWING = 1\n\n    if user_settings.get('ASYNCIFY') == '1':\n      diagnostics.warning('emcc', 'ASYNCIFY=1 is not compatible with -fwasm-exceptions. Parts of the program that mix ASYNCIFY and exceptions will not compile.')\n\n    if user_settings.get('SUPPORT_LONGJMP') == 'emscripten':\n      exit_with_error('SUPPORT_LONGJMP=emscripten is not compatible with -fwasm-exceptions')\n\n  if settings.DISABLE_EXCEPTION_THROWING and not settings.DISABLE_EXCEPTION_CATCHING:\n    exit_with_error(\"DISABLE_EXCEPTION_THROWING was set (probably from -fno-exceptions) but is not compatible with enabling exception catching (DISABLE_EXCEPTION_CATCHING=0). If you don't want exceptions, set DISABLE_EXCEPTION_CATCHING to 1; if you do want exceptions, don't link with -fno-exceptions\")\n\n  if options.target.startswith('wasm64'):\n    default_setting('MEMORY64', 1)\n\n  if settings.MEMORY64 and options.target.startswith('wasm32'):\n    exit_with_error('wasm32 target is not compatible with -sMEMORY64')\n\n  # Wasm SjLj cannot be used with Emscripten EH\n  if settings.SUPPORT_LONGJMP == 'wasm':\n    # DISABLE_EXCEPTION_THROWING is 0 by default for Emscripten EH throwing, but\n    # Wasm SjLj cannot be used with Emscripten EH. We error out if\n    # DISABLE_EXCEPTION_THROWING=0 is explicitly requested by the user;\n    # otherwise we disable it here.\n    if user_settings.get('DISABLE_EXCEPTION_THROWING') == '0':\n      exit_with_error('SUPPORT_LONGJMP=wasm cannot be used with DISABLE_EXCEPTION_THROWING=0')\n    # We error out for DISABLE_EXCEPTION_CATCHING=0, because it is 1 by default\n    # and this can be 0 only if the user specifies so.\n    if user_settings.get('DISABLE_EXCEPTION_CATCHING') == '0':\n      exit_with_error('SUPPORT_LONGJMP=wasm cannot be used with DISABLE_EXCEPTION_CATCHING=0')\n    default_setting('DISABLE_EXCEPTION_THROWING', 1)\n\n  # SUPPORT_LONGJMP=1 means the default SjLj handling mechanism, which is 'wasm'\n  # if Wasm EH is used and 'emscripten' otherwise.\n  if settings.SUPPORT_LONGJMP == 1:\n    if settings.WASM_EXCEPTIONS:\n      settings.SUPPORT_LONGJMP = 'wasm'\n    else:\n      settings.SUPPORT_LONGJMP = 'emscripten'\n\n  # SDL2 requires eglGetProcAddress() to work.\n  # NOTE: if SDL2 is updated to not rely on eglGetProcAddress(), this can be removed\n  if settings.USE_SDL == 2 or settings.USE_SDL_MIXER == 2 or settings.USE_SDL_GFX == 2:\n    default_setting('GL_ENABLE_GET_PROC_ADDRESS', 1)\n\n  return (newargs, input_files)\n\n\ndef get_clang_output_extension(state):\n  if '-emit-llvm' in state.orig_args:\n    if state.has_dash_S:\n      return '.ll'\n    else:\n      return '.bc'\n\n  if state.has_dash_S:\n    return '.s'\n  else:\n    return '.o'\n\n\ndef filter_out_link_flags(args):\n  rtn = []\n\n  def is_link_flag(flag):\n    if flag in ('-nostdlib', '-nostartfiles', '-nolibc', '-nodefaultlibs', '-s'):\n      return True\n    return flag.startswith(('-l', '-L', '-Wl,', '-z', '--js-library'))\n\n  skip = False\n  for arg in args:\n    if skip:\n      skip = False\n      continue\n    if is_link_flag(arg):\n      continue\n    if arg == '-Xlinker':\n      skip = True\n      continue\n    rtn.append(arg)\n  return rtn\n\n\n@ToolchainProfiler.profile_block('compile inputs')\ndef phase_compile_inputs(options, state, newargs, input_files):\n  if shared.run_via_emxx:\n    compiler = [shared.CLANG_CXX]\n  else:\n    compiler = [shared.CLANG_CC]\n\n  if config.COMPILER_WRAPPER:\n    logger.debug('using compiler wrapper: %s', config.COMPILER_WRAPPER)\n    compiler.insert(0, config.COMPILER_WRAPPER)\n\n  compile_args = newargs\n  system_libs.ensure_sysroot()\n\n  def get_language_mode(args):\n    return_next = False\n    for item in args:\n      if return_next:\n        return item\n      if item == '-x':\n        return_next = True\n        continue\n      if item.startswith('-x'):\n        return removeprefix(item, '-x')\n    return ''\n\n  language_mode = get_language_mode(newargs)\n  use_cxx = 'c++' in language_mode or shared.run_via_emxx\n\n  def get_clang_command():\n    return compiler + get_cflags(state.orig_args, use_cxx) + compile_args\n\n  def get_clang_command_preprocessed():\n    return compiler + get_clang_flags(state.orig_args) + compile_args\n\n  def get_clang_command_asm():\n    return compiler + get_target_flags() + compile_args\n\n  # preprocessor-only (-E) support\n  if state.mode == Mode.PREPROCESS_ONLY:\n    inputs = [i[1] for i in input_files]\n    cmd = get_clang_command() + inputs\n    if options.output_file:\n      cmd += ['-o', options.output_file]\n    # Do not compile, but just output the result from preprocessing stage or\n    # output the dependency rule. Warning: clang and gcc behave differently\n    # with -MF! (clang seems to not recognize it)\n    logger.debug(('just preprocessor ' if state.has_dash_E else 'just dependencies: ') + ' '.join(cmd))\n    shared.exec_process(cmd)\n    assert False, 'exec_process does not return'\n\n  # Precompiled headers support\n  if state.mode == Mode.PCH:\n    inputs = [i[1] for i in input_files]\n    for header in inputs:\n      if shared.suffix(header) not in HEADER_ENDINGS:\n        exit_with_error(f'cannot mix precompiled headers with non-header inputs: {inputs} : {header}')\n    cmd = get_clang_command() + inputs\n    if options.output_file:\n      cmd += ['-o', options.output_file]\n    logger.debug(f\"running (for precompiled headers): {cmd[0]} {' '.join(cmd[1:])}\")\n    shared.exec_process(cmd)\n    assert False, 'exec_process does not return'\n\n  if state.mode == Mode.COMPILE_ONLY:\n    inputs = [i[1] for i in input_files]\n    if all(get_file_suffix(i) in ASSEMBLY_ENDINGS for i in inputs):\n      cmd = get_clang_command_asm() + inputs\n    else:\n      cmd = get_clang_command() + inputs\n    if options.output_file:\n      cmd += ['-o', options.output_file]\n      if get_file_suffix(options.output_file) == '.bc' and not settings.LTO and '-emit-llvm' not in state.orig_args:\n        diagnostics.warning('emcc', '.bc output file suffix used without -flto or -emit-llvm.  Consider using .o extension since emcc will output an object file, not a bitcode file')\n    shared.exec_process(cmd)\n    assert False, 'exec_process does not return'\n\n  # In COMPILE_AND_LINK we need to compile source files too, but we also need to\n  # filter out the link flags\n  assert state.mode == Mode.COMPILE_AND_LINK\n  assert not state.has_dash_c\n  compile_args = filter_out_link_flags(compile_args)\n  linker_inputs = []\n  seen_names = {}\n\n  def uniquename(name):\n    if name not in seen_names:\n      seen_names[name] = str(len(seen_names))\n    return unsuffixed(name) + '_' + seen_names[name] + shared.suffix(name)\n\n  def get_object_filename(input_file):\n    return in_temp(shared.replace_suffix(uniquename(input_file), '.o'))\n\n  def compile_source_file(i, input_file):\n    logger.debug(f'compiling source file: {input_file}')\n    output_file = get_object_filename(input_file)\n    linker_inputs.append((i, output_file))\n    if get_file_suffix(input_file) in ASSEMBLY_ENDINGS:\n      cmd = get_clang_command_asm()\n    elif get_file_suffix(input_file) in PREPROCESSED_ENDINGS:\n      cmd = get_clang_command_preprocessed()\n    else:\n      cmd = get_clang_command()\n      if get_file_suffix(input_file) in ['.pcm']:\n        cmd = [c for c in cmd if not c.startswith('-fprebuilt-module-path=')]\n    cmd += ['-c', input_file, '-o', output_file]\n    if state.mode == Mode.COMPILE_AND_LINK and '-gsplit-dwarf' in newargs:\n      # When running in COMPILE_AND_LINK mode we compile to temporary location\n      # but we want the `.dwo` file to be generated in the current working directory,\n      # like it is under clang.  We could avoid this hack if we use the clang driver\n      # to generate the temporary files, but that would also involve using the clang\n      # driver to perform linking which would be big change.\n      cmd += ['-Xclang', '-split-dwarf-file', '-Xclang', unsuffixed_basename(input_file) + '.dwo']\n      cmd += ['-Xclang', '-split-dwarf-output', '-Xclang', unsuffixed_basename(input_file) + '.dwo']\n    shared.check_call(cmd)\n    if not shared.SKIP_SUBPROCS:\n      assert os.path.exists(output_file)\n      if options.save_temps:\n        shutil.copyfile(output_file, shared.unsuffixed_basename(input_file) + '.o')\n\n  # First, generate LLVM bitcode. For each input file, we get base.o with bitcode\n  for i, input_file in input_files:\n    file_suffix = get_file_suffix(input_file)\n    if file_suffix in SOURCE_ENDINGS + ASSEMBLY_ENDINGS or (state.has_dash_c and file_suffix == '.bc'):\n      compile_source_file(i, input_file)\n    elif file_suffix in DYNAMICLIB_ENDINGS:\n      logger.debug(f'using shared library: {input_file}')\n      linker_inputs.append((i, input_file))\n    elif building.is_ar(input_file):\n      logger.debug(f'using static library: {input_file}')\n      linker_inputs.append((i, input_file))\n    elif language_mode:\n      compile_source_file(i, input_file)\n    elif input_file == '-':\n      exit_with_error('-E or -x required when input is from standard input')\n    else:\n      # Default to assuming the inputs are object files and pass them to the linker\n      logger.debug(f'using object file: {input_file}')\n      linker_inputs.append((i, input_file))\n\n  return linker_inputs\n\n\ndef version_string():\n  # if the emscripten folder is not a git repo, don't run git show - that can\n  # look up and find the revision in a parent directory that is a git repo\n  revision_suffix = ''\n  if os.path.exists(utils.path_from_root('.git')):\n    git_rev = run_process(\n      ['git', 'rev-parse', 'HEAD'],\n      stdout=PIPE, stderr=PIPE, cwd=utils.path_from_root()).stdout.strip()\n    revision_suffix = ' (%s)' % git_rev\n  elif os.path.exists(utils.path_from_root('emscripten-revision.txt')):\n    rev = read_file(utils.path_from_root('emscripten-revision.txt')).strip()\n    revision_suffix = ' (%s)' % rev\n  return f'emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) {utils.EMSCRIPTEN_VERSION}{revision_suffix}'\n\n\ndef parse_args(newargs):  # noqa: C901, PLR0912, PLR0915\n  \"\"\"Future modifications should consider refactoring to reduce complexity.\n\n  * The McCabe cyclomatiic complexity is currently 117 vs 10 recommended.\n  * There are currently 115 branches vs 12 recommended.\n  * There are currently 302 statements vs 50 recommended.\n\n  To revalidate these numbers, run `ruff check --select=C901,PLR091`.\n  \"\"\"\n  options = EmccOptions()\n  settings_changes = []\n  user_js_defines = []\n  should_exit = False\n  skip = False\n\n  for i in range(len(newargs)):\n    if skip:\n      skip = False\n      continue\n\n    # Support legacy '--bind' flag, by mapping to `-lembind` which now\n    # has the same effect\n    if newargs[i] == '--bind':\n      newargs[i] = '-lembind'\n\n    arg = newargs[i]\n    arg_value = None\n\n    def check_flag(value):\n      # Check for and consume a flag\n      if arg == value:\n        newargs[i] = ''\n        return True\n      return False\n\n    def check_arg(name):\n      nonlocal arg_value\n      if arg.startswith(name) and '=' in arg:\n        arg_value = arg.split('=', 1)[1]\n        newargs[i] = ''\n        return True\n      if arg == name:\n        if len(newargs) <= i + 1:\n          exit_with_error(\"option '%s' requires an argument\" % arg)\n        arg_value = newargs[i + 1]\n        newargs[i] = ''\n        newargs[i + 1] = ''\n        return True\n      return False\n\n    def consume_arg():\n      nonlocal arg_value\n      assert arg_value is not None\n      rtn = arg_value\n      arg_value = None\n      return rtn\n\n    def consume_arg_file():\n      name = consume_arg()\n      if not os.path.isfile(name):\n        exit_with_error(\"'%s': file not found: '%s'\" % (arg, name))\n      return name\n\n    if arg.startswith('-O'):\n      # Let -O default to -O2, which is what gcc does.\n      requested_level = removeprefix(arg, '-O') or '2'\n      if requested_level == 's':\n        requested_level = 2\n        settings.SHRINK_LEVEL = 1\n      elif requested_level == 'z':\n        requested_level = 2\n        settings.SHRINK_LEVEL = 2\n      elif requested_level == 'g':\n        requested_level = 1\n        settings.SHRINK_LEVEL = 0\n        settings.DEBUG_LEVEL = max(settings.DEBUG_LEVEL, 1)\n      elif requested_level == 'fast':\n        # TODO(https://github.com/emscripten-core/emscripten/issues/21497):\n        # If we ever map `-ffast-math` to `wasm-opt --fast-math` then\n        # then we should enable that too here.\n        requested_level = 3\n        settings.SHRINK_LEVEL = 0\n      else:\n        settings.SHRINK_LEVEL = 0\n      settings.OPT_LEVEL = validate_arg_level(requested_level, 3, 'invalid optimization level: ' + arg, clamp=True)\n    elif check_arg('--js-opts'):\n      logger.warning('--js-opts ignored when using llvm backend')\n      consume_arg()\n    elif check_arg('--llvm-opts'):\n      diagnostics.warning('deprecated', '--llvm-opts is deprecated.  All non-emcc args are passed through to clang.')\n    elif arg.startswith('-flto'):\n      if '=' in arg:\n        settings.LTO = arg.split('=')[1]\n      else:\n        settings.LTO = 'full'\n    elif arg == \"-fno-lto\":\n      settings.LTO = 0\n    elif arg == \"--save-temps\":\n      options.save_temps = True\n    elif check_arg('--llvm-lto'):\n      logger.warning('--llvm-lto ignored when using llvm backend')\n      consume_arg()\n    elif check_arg('--closure-args'):\n      args = consume_arg()\n      options.closure_args += shlex.split(args)\n    elif check_arg('--closure'):\n      options.use_closure_compiler = int(consume_arg())\n    elif check_arg('--js-transform'):\n      options.js_transform = consume_arg()\n    elif check_arg('--reproduce'):\n      options.reproduce = consume_arg()\n    elif check_arg('--pre-js'):\n      options.pre_js.append(consume_arg_file())\n    elif check_arg('--post-js'):\n      options.post_js.append(consume_arg_file())\n    elif check_arg('--extern-pre-js'):\n      options.extern_pre_js.append(consume_arg_file())\n    elif check_arg('--extern-post-js'):\n      options.extern_post_js.append(consume_arg_file())\n    elif check_arg('--compiler-wrapper'):\n      config.COMPILER_WRAPPER = consume_arg()\n    elif check_flag('--post-link'):\n      options.post_link = True\n    elif check_arg('--oformat'):\n      formats = [f.lower() for f in OFormat.__members__]\n      fmt = consume_arg()\n      if fmt not in formats:\n        exit_with_error('invalid output format: `%s` (must be one of %s)' % (fmt, formats))\n      options.oformat = getattr(OFormat, fmt.upper())\n    elif check_arg('--minify'):\n      arg = consume_arg()\n      if arg != '0':\n        exit_with_error('0 is the only supported option for --minify; 1 has been deprecated')\n      options.no_minify = True\n    elif arg.startswith('-g'):\n      options.requested_debug = arg\n      requested_level = removeprefix(arg, '-g') or '3'\n      if is_int(requested_level):\n        # the -gX value is the debug level (-g1, -g2, etc.)\n        settings.DEBUG_LEVEL = validate_arg_level(requested_level, 4, 'invalid debug level: ' + arg)\n        if settings.DEBUG_LEVEL == 0:\n          # Set these explicitly so -g0 overrides previous -g on the cmdline\n          settings.GENERATE_DWARF = 0\n          settings.GENERATE_SOURCE_MAP = 0\n          settings.EMIT_NAME_SECTION = 0\n        elif settings.DEBUG_LEVEL > 1:\n          settings.EMIT_NAME_SECTION = 1\n        # if we don't need to preserve LLVM debug info, do not keep this flag\n        # for clang\n        if settings.DEBUG_LEVEL < 3:\n          newargs[i] = '-g0'\n        else:\n          # for 3+, report -g3 to clang as -g4 etc. are not accepted\n          newargs[i] = '-g3'\n          if settings.DEBUG_LEVEL == 3:\n            settings.GENERATE_DWARF = 1\n          if settings.DEBUG_LEVEL == 4:\n            settings.GENERATE_SOURCE_MAP = 1\n            diagnostics.warning('deprecated', 'please replace -g4 with -gsource-map')\n      else:\n        if requested_level.startswith('force_dwarf'):\n          exit_with_error('gforce_dwarf was a temporary option and is no longer necessary (use -g)')\n        elif requested_level.startswith('separate-dwarf'):\n          # emit full DWARF but also emit it in a file on the side\n          newargs[i] = '-g'\n          # if a file is provided, use that; otherwise use the default location\n          # (note that we do not know the default location until all args have\n          # been parsed, so just note True for now).\n          if requested_level != 'separate-dwarf':\n            if not requested_level.startswith('separate-dwarf=') or requested_level.count('=') != 1:\n              exit_with_error('invalid -gseparate-dwarf=FILENAME notation')\n            settings.SEPARATE_DWARF = requested_level.split('=')[1]\n          else:\n            settings.SEPARATE_DWARF = True\n          settings.GENERATE_DWARF = 1\n        elif requested_level == 'source-map':\n          settings.GENERATE_SOURCE_MAP = 1\n          settings.EMIT_NAME_SECTION = 1\n          newargs[i] = '-g'\n        else:\n          # Other non-integer levels (e.g. -gline-tables-only or -gdwarf-5) are\n          # usually clang flags that emit DWARF. So we pass them through to\n          # clang and make the emscripten code treat it like any other DWARF.\n          settings.GENERATE_DWARF = 1\n          settings.EMIT_NAME_SECTION = 1\n        # In all cases set the emscripten debug level to 3 so that we do not\n        # strip during link (during compile, this does not make a difference).\n        settings.DEBUG_LEVEL = 3\n    elif check_flag('-profiling') or check_flag('--profiling'):\n      settings.DEBUG_LEVEL = max(settings.DEBUG_LEVEL, 2)\n      settings.EMIT_NAME_SECTION = 1\n    elif check_flag('-profiling-funcs') or check_flag('--profiling-funcs'):\n      settings.EMIT_NAME_SECTION = 1\n    elif newargs[i] == '--tracing' or newargs[i] == '--memoryprofiler':\n      if newargs[i] == '--memoryprofiler':\n        options.memory_profiler = True\n      newargs[i] = ''\n      settings_changes.append('EMSCRIPTEN_TRACING=1')\n      settings.JS_LIBRARIES.append('library_trace.js')\n    elif check_flag('--emit-symbol-map'):\n      options.emit_symbol_map = True\n      settings.EMIT_SYMBOL_MAP = 1\n    elif check_arg('--emit-minification-map'):\n      settings.MINIFICATION_MAP = consume_arg()\n    elif check_arg('--embed-file'):\n      options.embed_files.append(consume_arg())\n    elif check_arg('--preload-file'):\n      options.preload_files.append(consume_arg())\n    elif check_arg('--exclude-file'):\n      options.exclude_files.append(consume_arg())\n    elif check_flag('--use-preload-cache'):\n      options.use_preload_cache = True\n    elif check_flag('--no-heap-copy'):\n      diagnostics.warning('legacy-settings', 'ignoring legacy flag --no-heap-copy (that is the only mode supported now)')\n    elif check_flag('--use-preload-plugins'):\n      options.use_preload_plugins = True\n    elif check_flag('--ignore-dynamic-linking'):\n      options.ignore_dynamic_linking = True\n    elif arg == '-v':\n      shared.PRINT_SUBPROCS = True\n    elif arg == '-###':\n      shared.SKIP_SUBPROCS = True\n    elif check_arg('--shell-file'):\n      options.shell_path = consume_arg_file()\n    elif check_arg('--source-map-base'):\n      options.source_map_base = consume_arg()\n    elif check_arg('--embind-emit-tsd'):\n      diagnostics.warning('deprecated', '--embind-emit-tsd is deprecated.  Use --emit-tsd instead.')\n      options.emit_tsd = consume_arg()\n    elif check_arg('--emit-tsd'):\n      options.emit_tsd = consume_arg()\n    elif check_flag('--no-entry'):\n      options.no_entry = True\n    elif check_flag('--remove-duplicates'):\n      diagnostics.warning('legacy-settings', '--remove-duplicates is deprecated as it is no longer needed. If you cannot link without it, file a bug with a testcase')\n    elif check_flag('--jcache'):\n      logger.error('jcache is no longer supported')\n    elif check_arg('--cache'):\n      config.CACHE = os.path.abspath(consume_arg())\n      cache.setup()\n      # Ensure child processes share the same cache (e.g. when using emcc to compiler system\n      # libraries)\n      os.environ['EM_CACHE'] = config.CACHE\n    elif check_flag('--clear-cache'):\n      logger.info('clearing cache as requested by --clear-cache: `%s`', cache.cachedir)\n      cache.erase()\n      shared.perform_sanity_checks() # this is a good time for a sanity check\n      should_exit = True\n    elif check_flag('--clear-ports'):\n      logger.info('clearing ports and cache as requested by --clear-ports')\n      ports.clear()\n      cache.erase()\n      shared.perform_sanity_checks() # this is a good time for a sanity check\n      should_exit = True\n    elif check_flag('--check'):\n      print(version_string(), file=sys.stderr)\n      shared.check_sanity(force=True)\n      should_exit = True\n    elif check_flag('--show-ports'):\n      ports.show_ports()\n      should_exit = True\n    elif check_arg('--memory-init-file'):\n      exit_with_error('--memory-init-file is no longer supported')\n    elif check_flag('--proxy-to-worker'):\n      settings_changes.append('PROXY_TO_WORKER=1')\n    elif check_arg('--valid-abspath'):\n      options.valid_abspaths.append(consume_arg())\n    elif check_flag('--separate-asm'):\n      exit_with_error('cannot --separate-asm with the wasm backend, since not emitting asm.js')\n    elif arg.startswith(('-I', '-L')):\n      path_name = arg[2:]\n      if os.path.isabs(path_name) and not is_valid_abspath(options, path_name):\n        # Of course an absolute path to a non-system-specific library or header\n        # is fine, and you can ignore this warning. The danger are system headers\n        # that are e.g. x86 specific and non-portable. The emscripten bundled\n        # headers are modified to be portable, local system ones are generally not.\n        diagnostics.warning(\n            'absolute-paths', f'-I or -L of an absolute path \"{arg}\" '\n            'encountered. If this is to a local system header/library, it may '\n            'cause problems (local system files make sense for compiling natively '\n            'on your system, but not necessarily to JavaScript).')\n    elif check_flag('--emrun'):\n      options.emrun = True\n    elif check_flag('--cpuprofiler'):\n      options.cpu_profiler = True\n    elif check_flag('--threadprofiler'):\n      settings_changes.append('PTHREADS_PROFILING=1')\n    elif arg == '-fno-exceptions':\n      settings.DISABLE_EXCEPTION_CATCHING = 1\n      settings.DISABLE_EXCEPTION_THROWING = 1\n      settings.WASM_EXCEPTIONS = 0\n    elif arg == '-mbulk-memory':\n      settings.BULK_MEMORY = 1\n      feature_matrix.enable_feature(feature_matrix.Feature.BULK_MEMORY,\n                                    '-mbulk-memory',\n                                    override=True)\n    elif arg == '-mno-bulk-memory':\n      settings.BULK_MEMORY = 0\n      feature_matrix.disable_feature(feature_matrix.Feature.BULK_MEMORY)\n    elif arg == '-msign-ext':\n      feature_matrix.enable_feature(feature_matrix.Feature.SIGN_EXT,\n                                    '-msign-ext',\n                                    override=True)\n    elif arg == '-mno-sign-ext':\n      feature_matrix.disable_feature(feature_matrix.Feature.SIGN_EXT)\n    elif arg == '-mnontrappting-fptoint':\n      feature_matrix.enable_feature(feature_matrix.Feature.NON_TRAPPING_FPTOINT,\n                                    '-mnontrapping-fptoint',\n                                    override=True)\n    elif arg == '-mno-nontrapping-fptoint':\n      feature_matrix.disable_feature(feature_matrix.Feature.NON_TRAPPING_FPTOINT)\n    elif arg == '-fexceptions':\n      # TODO Currently -fexceptions only means Emscripten EH. Switch to wasm\n      # exception handling by default when -fexceptions is given when wasm\n      # exception handling becomes stable.\n      settings.DISABLE_EXCEPTION_THROWING = 0\n      settings.DISABLE_EXCEPTION_CATCHING = 0\n    elif arg == '-fwasm-exceptions':\n      settings.WASM_EXCEPTIONS = 1\n    elif arg == '-fignore-exceptions':\n      settings.DISABLE_EXCEPTION_CATCHING = 1\n    elif check_arg('--default-obj-ext'):\n      exit_with_error('--default-obj-ext is no longer supported by emcc')\n    elif arg.startswith('-fsanitize=cfi'):\n      exit_with_error('emscripten does not currently support -fsanitize=cfi')\n    elif check_arg('--output_eol'):\n      style = consume_arg()\n      if style.lower() == 'windows':\n        options.output_eol = '\\r\\n'\n      elif style.lower() == 'linux':\n        options.output_eol = '\\n'\n      else:\n        exit_with_error(f'Invalid value \"{style}\" to --output_eol!')\n    # Record PTHREADS setting because it controls whether --shared-memory is passed to lld\n    elif arg == '-pthread':\n      settings.PTHREADS = 1\n      # Also set the legacy setting name, in case use JS code depends on it.\n      settings.USE_PTHREADS = 1\n    elif arg == '-no-pthread':\n      settings.PTHREADS = 0\n      # Also set the legacy setting name, in case use JS code depends on it.\n      settings.USE_PTHREADS = 0\n    elif arg == '-pthreads':\n      exit_with_error('unrecognized command-line option `-pthreads`; did you mean `-pthread`?')\n    elif arg in ('-fno-diagnostics-color', '-fdiagnostics-color=never'):\n      colored_logger.disable()\n      diagnostics.color_enabled = False\n    elif arg == '-fno-rtti':\n      settings.USE_RTTI = 0\n    elif arg == '-frtti':\n      settings.USE_RTTI = 1\n    elif arg.startswith('-jsD'):\n      key = removeprefix(arg, '-jsD')\n      if '=' in key:\n        key, value = key.split('=')\n      else:\n        value = '1'\n      if key in settings.keys():\n        exit_with_error(f'{arg}: cannot change built-in settings values with a -jsD directive. Pass -s{key}={value} instead!')\n      user_js_defines += [(key, value)]\n      newargs[i] = ''\n    elif check_flag('-shared'):\n      options.shared = True\n    elif check_flag('-r'):\n      options.relocatable = True\n    elif check_arg('-o'):\n      options.output_file = consume_arg()\n    elif arg.startswith('-o'):\n      options.output_file = removeprefix(arg, '-o')\n      newargs[i] = ''\n    elif check_arg('-target') or check_arg('--target'):\n      options.target = consume_arg()\n      if options.target not in ('wasm32', 'wasm64', 'wasm64-unknown-emscripten', 'wasm32-unknown-emscripten'):\n        exit_with_error(f'unsupported target: {options.target} (emcc only supports wasm64-unknown-emscripten and wasm32-unknown-emscripten)')\n    elif check_arg('--use-port'):\n      ports.handle_use_port_arg(settings, consume_arg())\n    elif arg == '-mllvm':\n      # Ignore the next argument rather than trying to parse it.  This is needed\n      # because llvm args could, for example, start with `-o` and we don't want\n      # to confuse that with a normal `-o` flag.\n      skip = True\n\n  if should_exit:\n    sys.exit(0)\n\n  newargs = [a for a in newargs if a]\n  return options, settings_changes, user_js_defines, newargs\n\n\ndef is_valid_abspath(options, path_name):\n  # Any path that is underneath the emscripten repository root must be ok.\n  if utils.normalize_path(path_name).startswith(utils.normalize_path(utils.path_from_root())):\n    return True\n\n  def in_directory(root, child):\n    # make both path absolute\n    root = os.path.realpath(root)\n    child = os.path.realpath(child)\n\n    # return true, if the common prefix of both is equal to directory\n    # e.g. /a/b/c/d.rst and directory is /a/b, the common prefix is /a/b\n    return os.path.commonprefix([root, child]) == root\n\n  for valid_abspath in options.valid_abspaths:\n    if in_directory(valid_abspath, path_name):\n      return True\n  return False\n\n\ndef parse_symbol_list_file(contents):\n  \"\"\"Parse contents of one-symbol-per-line response file.  This format can by used\n  with, for example, -sEXPORTED_FUNCTIONS=@filename and avoids the need for any\n  kind of quoting or escaping.\n  \"\"\"\n  values = contents.splitlines()\n  return [v.strip() for v in values if not v.startswith('#')]\n\n\ndef parse_value(text, expected_type):\n  # Note that using response files can introduce whitespace, if the file\n  # has a newline at the end. For that reason, we rstrip() in relevant\n  # places here.\n  def parse_string_value(text):\n    first = text[0]\n    if first == \"'\" or first == '\"':\n      text = text.rstrip()\n      if text[-1] != text[0] or len(text) < 2:\n         raise ValueError(f'unclosed quoted string. expected final character to be \"{text[0]}\" and length to be greater than 1 in \"{text[0]}\"')\n      return text[1:-1]\n    return text\n\n  def parse_string_list_members(text):\n    sep = ','\n    values = text.split(sep)\n    result = []\n    index = 0\n    while True:\n      current = values[index].lstrip() # Cannot safely rstrip for cases like: \"HERE-> ,\"\n      if not len(current):\n        raise ValueError('empty value in string list')\n      first = current[0]\n      if not (first == \"'\" or first == '\"'):\n        result.append(current.rstrip())\n      else:\n        start = index\n        while True: # Continue until closing quote found\n          if index >= len(values):\n            raise ValueError(f\"unclosed quoted string. expected final character to be '{first}' in '{values[start]}'\")\n          new = values[index].rstrip()\n          if new and new[-1] == first:\n            if start == index:\n              result.append(current.rstrip()[1:-1])\n            else:\n              result.append((current + sep + new)[1:-1])\n            break\n          else:\n            current += sep + values[index]\n            index += 1\n\n      index += 1\n      if index >= len(values):\n        break\n    return result\n\n  def parse_string_list(text):\n    text = text.rstrip()\n    if text and text[0] == '[':\n      if text[-1] != ']':\n        raise ValueError('unterminated string list. expected final character to be \"]\"')\n      text = text[1:-1]\n    if text.strip() == \"\":\n      return []\n    return parse_string_list_members(text)\n\n  if expected_type == list or (text and text[0] == '['):\n    # if json parsing fails, we fall back to our own parser, which can handle a few\n    # simpler syntaxes\n    try:\n      parsed = json.loads(text)\n    except ValueError:\n      return parse_string_list(text)\n\n    # if we succeeded in parsing as json, check some properties of it before returning\n    if type(parsed) not in (str, list):\n      raise ValueError(f'settings must be strings or lists (not ${type(parsed)})')\n    if type(parsed) is list:\n      for elem in parsed:\n        if type(elem) is not str:\n          raise ValueError(f'list members in settings must be strings (not ${type(elem)})')\n\n    return parsed\n\n  if expected_type == float:\n    try:\n      return float(text)\n    except ValueError:\n      pass\n\n  try:\n    if text.startswith('0x'):\n      base = 16\n    else:\n      base = 10\n    return int(text, base)\n  except ValueError:\n    return parse_string_value(text)\n\n\ndef validate_arg_level(level_string, max_level, err_msg, clamp=False):\n  try:\n    level = int(level_string)\n  except ValueError:\n    exit_with_error(err_msg)\n  if clamp:\n    if level > max_level:\n      logger.warning(\"optimization level '-O\" + level_string + \"' is not supported; using '-O\" + str(max_level) + \"' instead\")\n      level = max_level\n  if not 0 <= level <= max_level:\n    exit_with_error(err_msg)\n  return level\n\n\ndef is_int(s):\n  try:\n    int(s)\n    return True\n  except ValueError:\n    return False\n\n\n@ToolchainProfiler.profile()\ndef main(args):\n  start_time = time.time()\n  ret = run(args)\n  logger.debug('total time: %.2f seconds', (time.time() - start_time))\n  return ret\n\n\nif __name__ == '__main__':\n  try:\n    sys.exit(main(sys.argv))\n  except KeyboardInterrupt:\n    logger.debug('KeyboardInterrupt')\n    sys.exit(1)\n"
        },
        {
          "name": "emcmake",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emcmake.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emcmake.py",
          "type": "blob",
          "size": 2.265625,
          "content": "#!/usr/bin/env python3\n# Copyright 2016 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\nimport os\nimport shutil\nimport sys\nfrom tools import shared\nfrom tools import config\nfrom tools import utils\nfrom subprocess import CalledProcessError\n\n\n#\n# Main run() function\n#\ndef run():\n  if len(sys.argv) < 2 or sys.argv[1] in ('--version', '--help'):\n    print('''\\\nemcmake is a helper for cmake, setting various environment\nvariables so that emcc etc. are used. Typical usage:\n\n  emcmake cmake [FLAGS]\n''', file=sys.stderr)\n    return 1\n\n  args = sys.argv[1:]\n\n  def has_substr(args, substr):\n    return any(substr in s for s in args)\n\n  # Append the Emscripten toolchain file if the user didn't specify one.\n  if not has_substr(args, '-DCMAKE_TOOLCHAIN_FILE') and 'CMAKE_TOOLCHAIN_FILE' not in os.environ:\n    args.append('-DCMAKE_TOOLCHAIN_FILE=' + utils.path_from_root('cmake/Modules/Platform/Emscripten.cmake'))\n\n  if not has_substr(args, '-DCMAKE_CROSSCOMPILING_EMULATOR'):\n    node_js = [config.NODE_JS[0]]\n    # In order to allow cmake to run code built with pthreads we need to pass\n    # some extra flags to node.\n    node_js += shared.node_pthread_flags(config.NODE_JS)\n    node_js = ';'.join(node_js)\n    # See https://github.com/emscripten-core/emscripten/issues/15522\n    args.append(f'-DCMAKE_CROSSCOMPILING_EMULATOR={node_js}')\n\n  # On Windows specify MinGW Makefiles or ninja if we have them and no other\n  # toolchain was specified, to keep CMake from pulling in a native Visual\n  # Studio, or Unix Makefiles.\n  if utils.WINDOWS and not any(arg.startswith('-G') for arg in args):\n    if shutil.which('mingw32-make'):\n      args += ['-G', 'MinGW Makefiles']\n    elif shutil.which('ninja'):\n      args += ['-G', 'Ninja']\n    else:\n      print('emcmake: no compatible cmake generator found; Please install ninja or mingw32-make, or specify a generator explicitly using -G', file=sys.stderr)\n      return 1\n\n  print('configure: ' + shared.shlex_join(args), file=sys.stderr)\n  try:\n    shared.check_call(args)\n    return 0\n  except CalledProcessError as e:\n    return e.returncode\n\n\nif __name__ == '__main__':\n  sys.exit(run())\n"
        },
        {
          "name": "emconfigure",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emconfigure.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emconfigure.py",
          "type": "blob",
          "size": 1.7373046875,
          "content": "#!/usr/bin/env python3\n# Copyright 2016 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"This is a helper script. It runs ./configure (or cmake,\netc.) for you, setting the environment variables to use\nemcc and so forth. Usage:\n\n  emconfigure ./configure [FLAGS]\n\nYou can also use this for cmake and other configure-like\nstages. What happens is that all compilations done during\nthis command are to native code, not JS, so that configure\ntests will work properly.\n\"\"\"\n\nimport sys\nfrom tools import building\nfrom tools import shared\nfrom subprocess import CalledProcessError\n\n\n#\n# Main run() function\n#\ndef run():\n  if len(sys.argv) < 2 or sys.argv[1] in ('--version', '--help'):\n    print('''\\\nemconfigure is a helper for configure, setting various environment\nvariables so that emcc etc. are used. Typical usage:\n\n  emconfigure ./configure [FLAGS]\n\n(but you can run any command instead of configure)''', file=sys.stderr)\n    return 1\n\n  args = sys.argv[1:]\n\n  if 'cmake' in args:\n    print('error: use `emcmake` rather then `emconfigure` for cmake projects', file=sys.stderr)\n    return 1\n\n  env = building.get_building_env()\n  # When we configure via a ./configure script, don't do config-time\n  # compilation with emcc, but instead do builds natively with Clang. This\n  # is a heuristic emulation that may or may not work.\n  env['EMMAKEN_JUST_CONFIGURE'] = '1'\n  print('configure: ' + shared.shlex_join(args), file=sys.stderr)\n  try:\n    shared.check_call(args, env=env)\n    return 0\n  except CalledProcessError as e:\n    return e.returncode\n\n\nif __name__ == '__main__':\n  sys.exit(run())\n"
        },
        {
          "name": "emdump",
          "type": "blob",
          "size": 0.9755859375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$(dirname $0)/tools/emdump.py\" \"$@\"\n"
        },
        {
          "name": "emdump.bat",
          "type": "blob",
          "size": 3.2509765625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (tools\\emdump.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to tools\\emdump.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdump.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdump.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdump.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdump.py\" %*\n"
        },
        {
          "name": "emdwp",
          "type": "blob",
          "size": 0.974609375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$(dirname $0)/tools/emdwp.py\" \"$@\"\n"
        },
        {
          "name": "emdwp.bat",
          "type": "blob",
          "size": 3.2451171875,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (tools\\emdwp.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to tools\\emdwp.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdwp.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdwp.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdwp.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emdwp.py\" %*\n"
        },
        {
          "name": "emmake",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emmake.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emmake.py",
          "type": "blob",
          "size": 1.94921875,
          "content": "#!/usr/bin/env python3\n# Copyright 2016 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"This is a helper script. It runs make for you, setting\nthe environment variables to use emcc and so forth. Usage:\n\n  emmake make [FLAGS]\n\nNote that if you ran configure with emconfigure, then\nthe environment variables have already been detected\nand set. This script is useful if you have no configure\nstep, and your Makefile uses the environment vars\ndirectly.\n\nThe difference between this and emconfigure is that\nemconfigure runs compilation into native code, so\nthat configure tests pass. emmake uses Emscripten to\ngenerate JavaScript.\n\"\"\"\n\nimport shutil\nimport sys\nfrom tools import building\nfrom tools import shared\nfrom tools import utils\nfrom subprocess import CalledProcessError\n\n\n#\n# Main run() function\n#\ndef run():\n  if len(sys.argv) < 2 or sys.argv[1] in ('--version', '--help'):\n    print('''\\\nemmake is a helper for make, setting various environment\nvariables so that emcc etc. are used. Typical usage:\n\n  emmake make [FLAGS]\n\n(but you can run any command instead of make)''', file=sys.stderr)\n    return 1\n\n  args = sys.argv[1:]\n  env = building.get_building_env()\n\n  # On Windows prefer building with mingw32-make instead of make, if it exists.\n  if utils.WINDOWS:\n    if args[0] == 'make':\n      mingw32_make = shutil.which('mingw32-make')\n      if mingw32_make:\n        args[0] = mingw32_make\n\n  # On Windows, run the execution through shell to get PATH expansion and\n  # executable extension lookup, e.g. 'sdl2-config' will match with\n  # 'sdl2-config.bat' in PATH.\n  print('make: ' + ' '.join(args), file=sys.stderr)\n  try:\n    shared.check_call(args, shell=utils.WINDOWS, env=env)\n    return 0\n  except CalledProcessError as e:\n    return e.returncode\n\n\nif __name__ == '__main__':\n  sys.exit(run())\n"
        },
        {
          "name": "emnm",
          "type": "blob",
          "size": 0.9736328125,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$(dirname $0)/tools/emnm.py\" \"$@\"\n"
        },
        {
          "name": "emnm.bat",
          "type": "blob",
          "size": 3.2392578125,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (tools\\emnm.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to tools\\emnm.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emnm.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emnm.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emnm.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emnm.py\" %*\n"
        },
        {
          "name": "emprofile",
          "type": "blob",
          "size": 0.978515625,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$(dirname $0)/tools/emprofile.py\" \"$@\"\n"
        },
        {
          "name": "emprofile.bat",
          "type": "blob",
          "size": 3.2685546875,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (tools\\emprofile.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to tools\\emprofile.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emprofile.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emprofile.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emprofile.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%tools\\emprofile.py\" %*\n"
        },
        {
          "name": "emranlib",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emranlib.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emranlib.py",
          "type": "blob",
          "size": 0.4951171875,
          "content": "#!/usr/bin/env python3\n# Copyright 2019 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"emranlib - ranlib helper script\n\nThis script acts as a frontend replacement for ranlib, and simply invokes\nllvm-ranlib internally.\n\"\"\"\n\nimport sys\nfrom tools import shared\n\nshared.exec_process([shared.LLVM_RANLIB] + sys.argv[1:])\n"
        },
        {
          "name": "emrun",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emrun.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emrun.py",
          "type": "blob",
          "size": 77.421875,
          "content": "#!/usr/bin/env python3\n# Copyright 2017 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"emrun: Implements machinery that allows running a .html page as if it was a\nstandard executable file.\n\nUsage: emrun <options> filename.html <args to program>\n\nSee emrun --help for more information\n\"\"\"\n\n# N.B. Do not introduce external dependencies to this file. It is often used\n# standalone outside Emscripten directory tree.\nimport argparse\nimport atexit\nimport json\nimport os\nimport platform\nimport re\nimport shlex\nimport shutil\nimport socket\nimport stat\nimport struct\nimport subprocess\nimport sys\nimport tempfile\nimport threading\nimport time\nfrom operator import itemgetter\n\nif sys.version_info.major == 2:\n  import SocketServer as socketserver\n  from BaseHTTPServer import HTTPServer\n  from SimpleHTTPServer import SimpleHTTPRequestHandler\n  from urllib import unquote\n  from urlparse import urlsplit\nelse:\n  import socketserver\n  from http.server import HTTPServer, SimpleHTTPRequestHandler\n  from urllib.parse import unquote, urlsplit\n\n# Populated from cmdline params\nemrun_options = None\n\n# Represents the process object handle to the browser we opened to run the html\n# page.\nbrowser_process = None\n\nprevious_browser_processes = None\ncurrent_browser_processes = None\n\nnavigation_has_occurred = False\n\n# Stores the browser executable that was run with --browser= parameter.\nbrowser_exe = None\n\n# If we have routed browser output to file with --log-stdout and/or\n# --log-stderr, these track the handles.\nbrowser_stdout_handle = sys.stdout\nbrowser_stderr_handle = sys.stderr\n\n# This flag tracks whether the html page has sent any stdout messages back to\n# us.  Used to detect whether we might have gotten detached from the browser\n# process we spawned, in which case we are not able to detect when user closes\n# the browser with the close button.\nhave_received_messages = False\n\n# At startup print a warning message once if user did not build with --emrun.\nemrun_not_enabled_nag_printed = False\n\n# Stores the exit() code of the html page when/if it quits.\npage_exit_code = None\n\n# If this is set to a non-empty string, all processes by this name will be\n# killed at exit.  This is used to clean up after browsers that spawn\n# subprocesses to handle the actual browser launch. For example opera has a\n# launcher.exe that runs the actual opera browser.  So killing browser_process\n# would just kill launcher.exe and not the opera\n# browser itself.\nprocessname_killed_atexit = \"\"\n\n# Using \"0.0.0.0\" means \"all interfaces\", which should allow connecting to this\n# server via LAN addresses. Using \"localhost\" should allow only connecting from\n# local computer.\ndefault_webserver_hostname = '0.0.0.0'\n\n# If user does not specify a --port parameter, this port is used to launch the\n# server.\ndefault_webserver_port = 6931\n\n# Location of Android Debug Bridge executable\nADB = None\n\n# Host OS detection to autolocate browsers and other OS-specific support needs.\nWINDOWS = False\nLINUX = False\nMACOS = False\nif os.name == 'nt':\n  WINDOWS = True\n  import winreg\nelif platform.system() == 'Linux':\n  LINUX = True\nelif platform.mac_ver()[0] != '':\n  MACOS = True\n  import plistlib\n\n# If you are running on an OS that is not any of these, must add explicit support for it.\nif not WINDOWS and not LINUX and not MACOS:\n  raise Exception(\"Unknown OS!\")\n\n\n# Returns wallclock time in seconds.\ndef tick():\n  # Would like to return time.clock() since it's apparently better for\n  # precision, but it is broken on macOS 10.10 and Python 2.7.8.\n  return time.time()\n\n\n# Absolute wallclock time in seconds specifying when the previous HTTP stdout\n# message from the page was received.\nlast_message_time = tick()\n\n# Absolute wallclock time in seconds telling when we launched emrun.\npage_start_time = tick()\n\n# Stores the time of most recent http page serve.\npage_last_served_time = None\n\n\n# HTTP requests are handled from separate threads - synchronize them to avoid race conditions\nhttp_mutex = threading.RLock()\n\n\ndef logi(msg):\n  \"\"\"Prints a log message to 'info' stdout channel. Always printed.\n  \"\"\"\n  global last_message_time\n  with http_mutex:\n    sys.stdout.write(msg + '\\n')\n    sys.stdout.flush()\n    last_message_time = tick()\n\n\ndef logv(msg):\n  \"\"\"Prints a verbose log message to stdout channel.\n  Only shown if run with --verbose.\n  \"\"\"\n  global last_message_time\n  if emrun_options.verbose:\n    with http_mutex:\n      sys.stdout.write(msg + '\\n')\n      sys.stdout.flush()\n      last_message_time = tick()\n\n\ndef loge(msg):\n  \"\"\"Prints an error message to stderr channel.\n  \"\"\"\n  global last_message_time\n  with http_mutex:\n    sys.stderr.write(msg + '\\n')\n    sys.stderr.flush()\n    last_message_time = tick()\n\n\ndef format_eol(msg):\n  if WINDOWS:\n    msg = msg.replace('\\r\\n', '\\n').replace('\\n', '\\r\\n')\n  return msg\n\n\ndef browser_logi(msg):\n  \"\"\"Prints a message to the browser stdout output stream.\n  \"\"\"\n  global last_message_time\n  msg = format_eol(msg)\n  browser_stdout_handle.write(msg + '\\n')\n  browser_stdout_handle.flush()\n  last_message_time = tick()\n\n\ndef browser_loge(msg):\n  \"\"\"Prints a message to the browser stderr output stream.\n  \"\"\"\n  global last_message_time\n  msg = format_eol(msg)\n  browser_stderr_handle.write(msg + '\\n')\n  browser_stderr_handle.flush()\n  last_message_time = tick()\n\n\ndef unquote_u(source):\n  \"\"\"Unquotes a unicode string.\n  (translates ascii-encoded utf string back to utf)\n  \"\"\"\n  result = unquote(source)\n  if '%u' in result:\n    result = result.replace('%u', '\\\\u').decode('unicode_escape')\n  return result\n\n\ntemp_firefox_profile_dir = None\n\n\ndef delete_emrun_safe_firefox_profile():\n  \"\"\"Deletes the temporary created Firefox profile (if one exists)\"\"\"\n  global temp_firefox_profile_dir\n  if temp_firefox_profile_dir is not None:\n    logv('remove_tree(\"' + temp_firefox_profile_dir + '\")')\n    remove_tree(temp_firefox_profile_dir)\n    temp_firefox_profile_dir = None\n\n\n# Firefox has a lot of default behavior that makes it unsuitable for\n# automated/unattended run.\n# This function creates a temporary profile directory that customized Firefox\n# with various flags that enable automated runs.\ndef create_emrun_safe_firefox_profile():\n  global temp_firefox_profile_dir\n  temp_firefox_profile_dir = tempfile.mkdtemp(prefix='temp_emrun_firefox_profile_')\n  with open(os.path.join(temp_firefox_profile_dir, 'prefs.js'), 'w') as f:\n    f.write('''\n// Lift the default max 20 workers limit to something higher to avoid hangs when page needs to spawn a lot of threads.\nuser_pref(\"dom.workers.maxPerDomain\", 100);\n// Always allow opening popups\nuser_pref(\"browser.popups.showPopupBlocker\", false);\nuser_pref(\"dom.disable_open_during_load\", false);\n// Don't ask user if they want to set Firefox as the default system browser\nuser_pref(\"browser.shell.checkDefaultBrowser\", false);\nuser_pref(\"browser.shell.skipDefaultBrowserCheck\", true);\n// If automated runs crash, don't resume old tabs on the next run or show safe mode dialogs or anything else extra.\nuser_pref(\"browser.sessionstore.resume_from_crash\", false);\nuser_pref(\"services.sync.prefs.sync.browser.sessionstore.restore_on_demand\", false);\nuser_pref(\"browser.sessionstore.restore_on_demand\", false);\nuser_pref(\"browser.sessionstore.max_resumed_crashes\", -1);\nuser_pref(\"toolkit.startup.max_resumed_crashes\", -1);\n// Don't show the slow script dialog popup\nuser_pref(\"dom.max_script_run_time\", 0);\nuser_pref(\"dom.max_chrome_script_run_time\", 0);\n// Don't open a home page at startup\nuser_pref(\"startup.homepage_override_url\", \"about:blank\");\nuser_pref(\"startup.homepage_welcome_url\", \"about:blank\");\nuser_pref(\"browser.startup.homepage\", \"about:blank\");\n// Don't try to perform browser (auto)update on the background\nuser_pref(\"app.update.auto\", false);\nuser_pref(\"app.update.enabled\", false);\nuser_pref(\"app.update.silent\", false);\nuser_pref(\"app.update.mode\", 0);\nuser_pref(\"app.update.service.enabled\", false);\n// Don't check compatibility with add-ons, or (auto)update them\nuser_pref(\"extensions.lastAppVersion\", '');\nuser_pref(\"plugins.hide_infobar_for_outdated_plugin\", true);\nuser_pref(\"plugins.update.url\", '');\n// Disable health reporter\nuser_pref(\"datareporting.healthreport.service.enabled\", false);\n// Disable crash reporter\nuser_pref(\"toolkit.crashreporter.enabled\", false);\n// Don't show WhatsNew on first run after every update\nuser_pref(\"browser.startup.homepage_override.mstone\",\"ignore\");\n// Don't show 'know your rights' and a bunch of other nag windows at startup\nuser_pref(\"browser.rights.3.shown\", true);\nuser_pref('devtools.devedition.promo.shown', true);\nuser_pref('extensions.shownSelectionUI', true);\nuser_pref('browser.newtabpage.introShown', true);\nuser_pref('browser.download.panel.shown', true);\nuser_pref('browser.customizemode.tip0.shown', true);\nuser_pref(\"browser.toolbarbuttons.introduced.pocket-button\", true);\n// Don't ask the user if they want to close the browser when there are multiple tabs.\nuser_pref(\"browser.tabs.warnOnClose\", false);\n// Allow the launched script window to close itself, so that we don't need to kill the browser process in order to move on.\nuser_pref(\"dom.allow_scripts_to_close_windows\", true);\n// Set various update timers to a large value in the future in order to not\n// trigger a large mass of update HTTP traffic on each Firefox run on the clean profile.\n// 2147483647 seconds since Unix epoch is sometime in the year 2038, and this is the max integer accepted by Firefox.\nuser_pref(\"app.update.lastUpdateTime.addon-background-update-timer\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.background-update-timer\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.blocklist-background-update-timer\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.browser-cleanup-thumbnails\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.experiments-update-timer\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.search-engine-update-timer\", 2147483647);\nuser_pref(\"app.update.lastUpdateTime.xpi-signature-verification\", 2147483647);\nuser_pref(\"extensions.getAddons.cache.lastUpdate\", 2147483647);\nuser_pref(\"media.gmp-eme-adobe.lastUpdate\", 2147483647);\nuser_pref(\"media.gmp-gmpopenh264.lastUpdate\", 2147483647);\nuser_pref(\"datareporting.healthreport.nextDataSubmissionTime\", \"2147483647000\");\n// Sending Firefox Health Report Telemetry data is not desirable, since these are automated runs.\nuser_pref(\"datareporting.healthreport.uploadEnabled\", false);\nuser_pref(\"datareporting.healthreport.service.enabled\", false);\nuser_pref(\"datareporting.healthreport.service.firstRun\", false);\nuser_pref(\"toolkit.telemetry.enabled\", false);\nuser_pref(\"toolkit.telemetry.unified\", false);\nuser_pref(\"datareporting.policy.dataSubmissionEnabled\", false);\nuser_pref(\"datareporting.policy.dataSubmissionPolicyBypassNotification\", true);\n// Allow window.dump() to print directly to console\nuser_pref(\"browser.dom.window.dump.enabled\", true);\n// Disable background add-ons related update & information check pings\nuser_pref(\"extensions.update.enabled\", false);\nuser_pref(\"extensions.getAddons.cache.enabled\", false);\n// Enable wasm\nuser_pref(\"javascript.options.wasm\", true);\n// Enable SharedArrayBuffer (this profile is for a testing environment, so Spectre/Meltdown don't apply)\nuser_pref(\"javascript.options.shared_memory\", true);\n''')\n    if emrun_options.private_browsing:\n      f.write('''\n// Start in private browsing mode to not cache anything to disk (everything will be wiped anyway after this run)\nuser_pref(\"browser.privatebrowsing.autostart\", true);\n      ''')\n  logv('create_emrun_safe_firefox_profile: Created new Firefox profile \"' + temp_firefox_profile_dir + '\"')\n  return temp_firefox_profile_dir\n\n\ndef is_browser_process_alive():\n  \"\"\"Returns whether the browser page we spawned is still running.\n  (note, not perfect atm, in case we are running in detached mode)\n  \"\"\"\n  # If navigation to the web page has not yet occurred, we behave as if the\n  # browser has not yet even loaded the page, and treat it as if the browser\n  # is running (as it is just starting up)\n  if not navigation_has_occurred:\n    return True\n\n  if browser_process and browser_process.poll() is None:\n    return True\n\n  if current_browser_processes:\n    try:\n      import psutil\n      for p in current_browser_processes:\n        if psutil.pid_exists(p['pid']):\n          return True\n      return False\n    except Exception:\n      # Fail gracefully if psutil not available\n      logv('psutil is not available, emrun may not be able to accurately track whether the browser process is alive or not')\n\n  # We do not have a track of the browser process ID that we spawned.\n  # Make an assumption that the browser process is open as long until\n  # the C program calls exit().\n  return page_exit_code is None\n\n\ndef kill_browser_process():\n  \"\"\"Kills browser_process and processname_killed_atexit. Also removes the\n  temporary Firefox profile that was created, if one exists.\n  \"\"\"\n  global browser_process, processname_killed_atexit, current_browser_processes\n  if browser_process and browser_process.poll() is None:\n    try:\n      logv('Terminating browser process pid=' + str(browser_process.pid) + '..')\n      browser_process.kill()\n    except Exception as e:\n      logv('Failed with error ' + str(e) + '!')\n\n    browser_process = None\n    # We have a hold of the target browser process explicitly, no need to resort to killall,\n    # so clear that record out.\n    processname_killed_atexit = ''\n\n  if current_browser_processes:\n    for pid in current_browser_processes:\n      try:\n        logv('Terminating browser process pid=' + str(pid['pid']) + '..')\n        os.kill(pid['pid'], 9)\n      except Exception as e:\n        logv('Failed with error ' + str(e) + '!')\n\n    current_browser_processes = None\n    # We have a hold of the target browser process explicitly, no need to resort to killall,\n    # so clear that record out.\n    processname_killed_atexit = ''\n\n  if len(processname_killed_atexit):\n    if emrun_options.android:\n      logv(\"Terminating Android app '\" + processname_killed_atexit + \"'.\")\n      subprocess.call([ADB, 'shell', 'am', 'force-stop', processname_killed_atexit])\n    else:\n      logv(\"Terminating all processes that have string '\" + processname_killed_atexit + \"' in their name.\")\n      if WINDOWS:\n        process_image = processname_killed_atexit if '.exe' in processname_killed_atexit else (processname_killed_atexit + '.exe')\n        process = subprocess.Popen(['taskkill', '/F', '/IM', process_image, '/T'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        process.communicate()\n      else:\n        try:\n          subprocess.call(['pkill', processname_killed_atexit])\n        except OSError:\n          try:\n            subprocess.call(['killall', processname_killed_atexit])\n          except OSError:\n            loge('Both commands pkill and killall failed to clean up the spawned browser process. Perhaps neither of these utilities is available on your system?')\n      delete_emrun_safe_firefox_profile()\n    # Clear the process name to represent that the browser is now dead.\n    processname_killed_atexit = ''\n\n  delete_emrun_safe_firefox_profile()\n\n\n# Heuristic that attempts to search for the browser process IDs that emrun spawned.\n# This depends on the assumption that no other browser process IDs have been spawned\n# during the short time perioed between the time that emrun started, and the browser\n# process navigated to the page.\n# This heuristic is needed because all modern browsers are multiprocess systems -\n# starting a browser process from command line generally launches just a \"stub\" spawner\n# process that immediately exits.\ndef detect_browser_processes():\n  if not browser_exe:\n    return # Running with --no-browser, we are not binding to a spawned browser.\n\n  global current_browser_processes\n  logv('First navigation occurred. Identifying currently running browser processes')\n  running_browser_processes = list_processes_by_name(browser_exe)\n\n  def pid_existed(pid):\n    for proc in previous_browser_processes:\n      if proc['pid'] == pid:\n        return True\n    return False\n\n  for p in running_browser_processes:\n    logv('Detected running browser process id: ' + str(p['pid']) + ', existed already at emrun startup? ' + str(pid_existed(p['pid'])))\n\n  current_browser_processes = [p for p in running_browser_processes if not pid_existed(p['pid'])]\n\n  if len(current_browser_processes) == 0:\n    logv('Was unable to detect the browser process that was spawned by emrun. This may occur if the target page was opened in a tab on a browser process that already existed before emrun started up.')\n\n\n# Our custom HTTP web server that will server the target page to run via .html.\n# This is used so that we can load the page via a http:// URL instead of a\n# file:// URL, since those wouldn't work too well unless user allowed XHR\n# without CORS rules.  Also, the target page will route its stdout and stderr\n# back to here via HTTP requests.\nclass HTTPWebServer(socketserver.ThreadingMixIn, HTTPServer):\n  \"\"\"Log messaging arriving via HTTP can come in out of sequence. Implement a\n  sequencing mechanism to enforce ordered transmission.\"\"\"\n  expected_http_seq_num = 1\n  # Stores messages that have arrived out of order, pending for a send as soon\n  # as the missing message arrives.  Kept in sorted order, first element is the\n  # oldest message received.\n  http_message_queue = []\n\n  def handle_incoming_message(self, seq_num, log, data):\n    global have_received_messages\n    with http_mutex:\n      have_received_messages = True\n\n      if seq_num == -1:\n        # Message arrived without a sequence number? Just log immediately\n        log(data)\n      elif seq_num == self.expected_http_seq_num:\n        log(data)\n        self.expected_http_seq_num += 1\n        self.print_messages_due()\n      elif seq_num < self.expected_http_seq_num:\n        log(data)\n      else:\n        self.http_message_queue += [(seq_num, data, log)]\n        self.http_message_queue.sort(key=itemgetter(0))\n        if len(self.http_message_queue) > 16:\n          self.print_next_message()\n\n  # If it's been too long since we we got a message, prints out the oldest\n  # queued message, ignoring the proper order.  This ensures that if any\n  # messages are actually lost, that the message queue will be orderly flushed.\n  def print_timed_out_messages(self):\n    global last_message_time\n    with http_mutex:\n      now = tick()\n      max_message_queue_time = 5\n      if len(self.http_message_queue) and now - last_message_time > max_message_queue_time:\n        self.print_next_message()\n\n  # Skips to printing the next message in queue now, independent of whether\n  # there was missed messages in the sequence numbering.\n  def print_next_message(self):\n    with http_mutex:\n      if len(self.http_message_queue):\n        self.expected_http_seq_num = self.http_message_queue[0][0]\n        self.print_messages_due()\n\n  # Completely flushes all out-of-order messages in the queue.\n  def print_all_messages(self):\n    with http_mutex:\n      while len(self.http_message_queue):\n        self.print_next_message()\n\n  # Prints any messages that are now due after we logged some other previous\n  # messages.\n  def print_messages_due(self):\n    with http_mutex:\n      while len(self.http_message_queue):\n        msg = self.http_message_queue[0]\n        if msg[0] == self.expected_http_seq_num:\n          msg[2](msg[1])\n          self.expected_http_seq_num += 1\n          self.http_message_queue.pop(0)\n        else:\n          return\n\n  def serve_forever(self, timeout=0.5):\n    global page_exit_code, emrun_not_enabled_nag_printed\n    self.is_running = True\n    self.timeout = timeout\n    logi('Now listening at http://%s/' % ':'.join(map(str, self.socket.getsockname())))\n    logv(\"Entering web server loop.\")\n    while self.is_running:\n      now = tick()\n      # Did user close browser?\n      if emrun_options.run_browser and not is_browser_process_alive():\n        logv(\"Shutting down because browser is no longer alive\")\n        delete_emrun_safe_firefox_profile()\n        if not emrun_options.serve_after_close:\n          logv(\"Browser process has shut down, quitting web server.\")\n          self.is_running = False\n\n      # Serve HTTP\n      self.handle_request()\n      # Process message log queue\n      self.print_timed_out_messages()\n\n      # If web page was silent for too long without printing anything, kill process.\n      time_since_message = now - last_message_time\n      if emrun_options.silence_timeout != 0 and time_since_message > emrun_options.silence_timeout:\n        self.shutdown()\n        logi('No activity in ' + str(emrun_options.silence_timeout) + ' seconds. Quitting web server with return code ' + str(emrun_options.timeout_returncode) + '. (--silence-timeout option)')\n        page_exit_code = emrun_options.timeout_returncode\n        emrun_options.kill_exit = True\n\n      # If the page has been running too long as a whole, kill process.\n      time_since_start = now - page_start_time\n      if emrun_options.timeout != 0 and time_since_start > emrun_options.timeout:\n        self.shutdown()\n        logi('Page has not finished in ' + str(emrun_options.timeout) + ' seconds. Quitting web server with return code ' + str(emrun_options.timeout_returncode) + '. (--timeout option)')\n        emrun_options.kill_exit = True\n        page_exit_code = emrun_options.timeout_returncode\n\n      # If we detect that the page is not running with emrun enabled, print a warning message.\n      if not emrun_not_enabled_nag_printed and page_last_served_time is not None:\n        time_since_page_serve = now - page_last_served_time\n        if not have_received_messages and time_since_page_serve > 10:\n          logv('The html page you are running is not emrun-capable. Stdout, stderr and exit(returncode) capture will not work. Recompile the application with the --emrun linker flag to enable this, or pass --no-emrun-detect to emrun to hide this check.')\n          emrun_not_enabled_nag_printed = True\n\n    # Clean up at quit, print any leftover messages in queue.\n    self.print_all_messages()\n    logv(\"Web server loop done.\")\n\n  def handle_error(self, request, client_address):\n    err = sys.exc_info()[1].args[0]\n    # Filter out the useless '[Errno 10054] An existing connection was forcibly\n    # closed by the remote host' errors that occur when we forcibly kill the\n    # client.\n    if err != 10054:\n      socketserver.BaseServer.handle_error(self, request, client_address)\n\n  def shutdown(self):\n    self.is_running = False\n    self.print_all_messages()\n    return 1\n\n\n# Processes HTTP request back to the browser.\nclass HTTPHandler(SimpleHTTPRequestHandler):\n  def send_head(self):\n    self.protocol_version = 'HTTP/1.1'\n    global page_last_served_time\n    path = self.translate_path(self.path)\n    f = None\n\n    # A browser has navigated to this page - check which PID got spawned for\n    # the browser\n    global navigation_has_occurred\n    if not navigation_has_occurred and current_browser_processes is None:\n      detect_browser_processes()\n\n    navigation_has_occurred = True\n\n    if os.path.isdir(path):\n      if not self.path.endswith('/'):\n        self.send_response(301)\n        self.send_header(\"Location\", self.path + \"/\")\n        self.end_headers()\n        return None\n      for index in \"index.html\", \"index.htm\":\n        index = os.path.join(path, index)\n        if os.path.isfile(index):\n          path = index\n          break\n      else:\n        # Manually implement directory listing support.\n        return self.list_directory(path)\n\n    try:\n      f = open(path, 'rb')\n    except IOError:\n      self.send_error(404, \"File not found: \" + path)\n      return None\n\n    self.send_response(200)\n    guess_file_type = path\n    # All files of type x.gz are served as gzip-compressed, which means the\n    # browser will transparently decode the file before passing the\n    # uncompressed bytes to the JS page.\n    # Note: In a slightly silly manner, detect files ending with \"gz\" and not\n    # \".gz\", since both Unity and UE4 generate multiple files with .jsgz,\n    # .datagz, .memgz, .symbolsgz suffixes and so on, so everything goes.\n    # Note 2: If the JS application would like to receive the actual bits of a\n    # gzipped file, instead of having the browser decompress it immediately,\n    # then it can't use the suffix .gz when using emrun.\n    # To work around, one can use the suffix .gzip instead.\n    if path.lower().endswith('gz'):\n      self.send_header('Content-Encoding', 'gzip')\n      logv('Serving ' + path + ' as gzip-compressed.')\n      guess_file_type = guess_file_type[:-2]\n      if guess_file_type.endswith('.'):\n        guess_file_type = guess_file_type[:-1]\n    elif path.lower().endswith('br'):\n      self.send_header('Content-Encoding', 'br')\n      logv('Serving ' + path + ' as brotli-compressed.')\n      guess_file_type = guess_file_type[:-2]\n      if guess_file_type.endswith('.'):\n        guess_file_type = guess_file_type[:-1]\n\n    ctype = self.guess_type(guess_file_type)\n    if guess_file_type.lower().endswith('.wasm'):\n      ctype = 'application/wasm'\n    if guess_file_type.lower().endswith('.js'):\n      ctype = 'application/javascript'\n    self.send_header('Content-type', ctype)\n    fs = os.fstat(f.fileno())\n    self.send_header(\"Content-Length\", str(fs.st_size))\n    self.send_header(\"Last-Modified\", self.date_time_string(fs.st_mtime))\n    self.send_header('Cache-Control', 'no-cache, must-revalidate')\n    self.send_header('Connection', 'close')\n    self.send_header('Expires', '-1')\n    self.send_header('Access-Control-Allow-Origin', '*')\n    self.send_header('Cross-Origin-Opener-Policy', 'same-origin')\n    self.send_header('Cross-Origin-Embedder-Policy', 'require-corp')\n    self.send_header('Cross-Origin-Resource-Policy', 'cross-origin')\n    self.end_headers()\n    page_last_served_time = tick()\n    return f\n\n  def log_request(self, code):\n    # Filter out 200 OK messages to remove noise.\n    if code != 200:\n      SimpleHTTPRequestHandler.log_request(self, code)\n\n  def log_message(self, format, *args):\n    msg = '%s - - [%s] %s\\n' % (self.address_string(), self.log_date_time_string(), format % args)\n    # Filter out 404 messages on favicon.ico not being found to remove noise.\n    if 'favicon.ico' not in msg:\n      sys.stderr.write(msg)\n\n  def do_POST(self):\n    self.protocol_version = 'HTTP/1.1'\n    global page_exit_code, have_received_messages\n\n    (_, _, path, query, _) = urlsplit(self.path)\n    logv('POST: \"' + self.path + '\" (path: \"' + path + '\", query: \"' + query + '\")')\n    if query.startswith('file='):\n      # Binary file dump/upload handling. Requests to\n      # \"stdio.html?file=filename\" will write binary data to the given file.\n      data = self.rfile.read(int(self.headers['Content-Length']))\n      filename = unquote_u(query[len('file='):])\n      filename = os.path.join(emrun_options.dump_out_directory, os.path.normpath(filename))\n      try:\n        os.makedirs(os.path.dirname(filename))\n      except OSError:\n        pass\n      with open(filename, 'wb') as fh:\n        fh.write(data)\n      logi('Wrote ' + str(len(data)) + ' bytes to file \"' + filename + '\".')\n      have_received_messages = True\n    elif path == '/system_info':\n      system_info = json.loads(get_system_info(format_json=True))\n      try:\n        browser_info = json.loads(get_browser_info(browser_exe, format_json=True))\n      except ValueError:\n        browser_info = ''\n      data = {'system': system_info, 'browser': browser_info}\n      self.send_response(200)\n      self.send_header('Content-type', 'application/json')\n      self.send_header('Cache-Control', 'no-cache, must-revalidate')\n      self.send_header('Connection', 'close')\n      self.send_header('Expires', '-1')\n      self.end_headers()\n      self.wfile.write(json.dumps(data))\n      return\n    else:\n      data = self.rfile.read(int(self.headers['Content-Length']))\n      if str is not bytes and isinstance(data, bytes):\n        data = data.decode('utf-8')\n      data = data.replace(\"+\", \" \")\n      data = unquote_u(data)\n\n      if data == '^pageload^': # Browser is just notifying that it has successfully launched the page.\n        have_received_messages = True\n      elif data.startswith('^exit^'):\n        if not emrun_options.serve_after_exit:\n          page_exit_code = int(data[6:])\n          logv('Web page has quit with a call to exit() with return code ' + str(page_exit_code) + '. Shutting down web server. Pass --serve-after-exit to keep serving even after the page terminates with exit().')\n          # Set server socket to nonblocking on shutdown to avoid sporadic deadlocks\n          self.server.socket.setblocking(False)\n          self.server.shutdown()\n          return\n      else:\n        # The user page sent a message with POST. Parse the message and log it to stdout/stderr.\n        is_stdout = False\n        is_stderr = False\n        seq_num = -1\n        # The html shell is expected to send messages of form ^out^(number)^(message) or ^err^(number)^(message).\n        if data.startswith('^err^'):\n          is_stderr = True\n        elif data.startswith('^out^'):\n          is_stdout = True\n        if is_stderr or is_stdout:\n          try:\n            i = data.index('^', 5)\n            seq_num = int(data[5:i])\n            data = data[i + 1:]\n          except ValueError:\n            pass\n\n        log = browser_loge if is_stderr else browser_logi\n        self.server.handle_incoming_message(seq_num, log, data)\n\n    self.send_response(200)\n    self.send_header('Content-type', 'text/plain')\n    self.send_header('Cache-Control', 'no-cache, must-revalidate')\n    self.send_header('Connection', 'close')\n    self.send_header('Expires', '-1')\n    self.end_headers()\n    self.wfile.write(b'OK')\n\n\n# Returns stdout by running command with universal_newlines=True\ndef check_output(cmd, universal_newlines=True, *args, **kwargs):\n  if hasattr(subprocess, \"run\"):\n    return subprocess.run(cmd, universal_newlines=universal_newlines, stdout=subprocess.PIPE, check=True, *args, **kwargs).stdout\n  else:\n    # check_output is considered as an old API so prefer subprocess.run if possible\n    return subprocess.check_output(cmd, universal_newlines=universal_newlines, *args, **kwargs)\n\n\n# From http://stackoverflow.com/questions/4842448/getting-processor-information-in-python\n# Returns a string with something like \"AMD64, Intel(R) Core(TM) i5-2557M CPU @\n# 1.70GHz, Intel64 Family 6 Model 42 Stepping 7, GenuineIntel\"\ndef get_cpu_info():\n  physical_cores = 1\n  logical_cores = 1\n  frequency = 0\n  try:\n    if WINDOWS:\n      from win32com.client import GetObject\n      root_winmgmts = GetObject('winmgmts:root\\\\cimv2')\n      cpus = root_winmgmts.ExecQuery('Select * from Win32_Processor')\n      cpu_name = cpus[0].Name + ', ' + platform.processor()\n      physical_cores = int(check_output(['wmic', 'cpu', 'get', 'NumberOfCores']).split('\\n')[1].strip())\n      logical_cores = int(check_output(['wmic', 'cpu', 'get', 'NumberOfLogicalProcessors']).split('\\n')[1].strip())\n      frequency = int(check_output(['wmic', 'cpu', 'get', 'MaxClockSpeed']).split('\\n')[1].strip())\n    elif MACOS:\n      cpu_name = check_output(['sysctl', '-n', 'machdep.cpu.brand_string']).strip()\n      physical_cores = int(check_output(['sysctl', '-n', 'machdep.cpu.core_count']).strip())\n      logical_cores = int(check_output(['sysctl', '-n', 'machdep.cpu.thread_count']).strip())\n      frequency = int(check_output(['sysctl', '-n', 'hw.cpufrequency']).strip()) // 1000000\n    elif LINUX:\n      all_info = check_output(['cat', '/proc/cpuinfo']).strip()\n      for line in all_info.split(\"\\n\"):\n        if 'model name' in line:\n          cpu_name = re.sub('.*model name.*:', '', line, count=1).strip()\n      lscpu = check_output(['lscpu'])\n      frequency = int(float(re.search('CPU MHz: (.*)', lscpu).group(1).strip()) + 0.5)\n      sockets = int(re.search(r'Socket\\(s\\): (.*)', lscpu).group(1).strip())\n      physical_cores = sockets * int(re.search(r'Core\\(s\\) per socket: (.*)', lscpu).group(1).strip())\n      logical_cores = physical_cores * int(re.search(r'Thread\\(s\\) per core: (.*)', lscpu).group(1).strip())\n  except Exception as e:\n    import traceback\n    loge(traceback.format_exc())\n    return {'model': 'Unknown (\"' + str(e) + '\")',\n            'physicalCores': 1,\n            'logicalCores': 1,\n            'frequency': 0\n            }\n\n  return {'model': platform.machine() + ', ' + cpu_name,\n          'physicalCores': physical_cores,\n          'logicalCores': logical_cores,\n          'frequency': frequency\n          }\n\n\ndef get_android_cpu_infoline():\n  lines = check_output([ADB, 'shell', 'cat', '/proc/cpuinfo']).split('\\n')\n  processor = ''\n  hardware = ''\n  for line in lines:\n    if line.startswith('Processor'):\n      processor = line[line.find(':') + 1:].strip()\n    elif line.startswith('Hardware'):\n      hardware = line[line.find(':') + 1:].strip()\n\n  freq = int(check_output([ADB, 'shell', 'cat', '/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq']).strip()) // 1000\n  return 'CPU: ' + processor + ', ' + hardware + ' @ ' + str(freq) + ' MHz'\n\n\ndef win_get_gpu_info():\n  gpus = []\n\n  def find_gpu_model(model):\n    for gpu in gpus:\n      if gpu['model'] == model:\n        return gpu\n    return None\n\n  for i in range(0, 16):\n    try:\n      hHardwareReg = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'HARDWARE')\n      hDeviceMapReg = winreg.OpenKey(hHardwareReg, 'DEVICEMAP')\n      hVideoReg = winreg.OpenKey(hDeviceMapReg, 'VIDEO')\n      VideoCardString = winreg.QueryValueEx(hVideoReg, '\\\\Device\\\\Video' + str(i))[0]\n      # Get Rid of Registry/Machine from the string\n      VideoCardStringSplit = VideoCardString.split('\\\\')\n      ClearnVideoCardString = \"\\\\\".join(VideoCardStringSplit[3:])\n      # Go up one level for detailed\n      # VideoCardStringRoot = \"\\\\\".join(VideoCardStringSplit[3:len(VideoCardStringSplit)-1])\n\n      # Get the graphics card information\n      hVideoCardReg = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, ClearnVideoCardString)\n      try:\n        VideoCardDescription = winreg.QueryValueEx(hVideoCardReg, 'Device Description')[0]\n      except WindowsError:\n        VideoCardDescription = winreg.QueryValueEx(hVideoCardReg, 'DriverDesc')[0]\n\n      try:\n        driverVersion = winreg.QueryValueEx(hVideoCardReg, 'DriverVersion')[0]\n        VideoCardDescription += ', driver version ' + driverVersion\n      except WindowsError:\n        pass\n\n      try:\n        driverDate = winreg.QueryValueEx(hVideoCardReg, 'DriverDate')[0]\n        VideoCardDescription += ' (' + driverDate + ')'\n      except WindowsError:\n        pass\n\n      VideoCardMemorySize = winreg.QueryValueEx(hVideoCardReg, 'HardwareInformation.MemorySize')[0]\n      try:\n        vram = struct.unpack('l', bytes(VideoCardMemorySize))[0]\n      except struct.error:\n        vram = int(VideoCardMemorySize)\n      if not find_gpu_model(VideoCardDescription):\n        gpus += [{'model': VideoCardDescription, 'ram': vram}]\n    except WindowsError:\n      pass\n  return gpus\n\n\ndef linux_get_gpu_info():\n  glinfo = ''\n  try:\n    glxinfo = check_output('glxinfo')\n    for line in glxinfo.split(\"\\n\"):\n      if \"OpenGL vendor string:\" in line:\n        gl_vendor = line[len(\"OpenGL vendor string:\"):].strip()\n      if \"OpenGL version string:\" in line:\n        gl_version = line[len(\"OpenGL version string:\"):].strip()\n      if \"OpenGL renderer string:\" in line:\n        gl_renderer = line[len(\"OpenGL renderer string:\"):].strip()\n    glinfo = gl_vendor + ' ' + gl_renderer + ', GL version ' + gl_version\n  except Exception as e:\n    logv(e)\n\n  adapterinfo = ''\n  try:\n    vgainfo = check_output(['lshw', '-C', 'display'], stderr=subprocess.PIPE)\n    vendor = re.search(\"vendor: (.*)\", vgainfo).group(1).strip()\n    product = re.search(\"product: (.*)\", vgainfo).group(1).strip()\n    description = re.search(\"description: (.*)\", vgainfo).group(1).strip()\n    clock = re.search(\"clock: (.*)\", vgainfo).group(1).strip()\n    adapterinfo = vendor + ' ' + product + ', ' + description + ' (' + clock + ')'\n  except Exception as e:\n    logv(e)\n\n  ram = 0\n  try:\n    vgainfo = check_output('lspci -v -s $(lspci | grep VGA | cut -d \" \" -f 1)', shell=True, stderr=subprocess.PIPE)\n    ram = int(re.search(r\"\\[size=([0-9]*)M\\]\", vgainfo).group(1)) * 1024 * 1024\n  except Exception as e:\n    logv(e)\n\n  model = (adapterinfo + ' ' + glinfo).strip()\n  if not model:\n    model = 'Unknown'\n  return [{'model': model, 'ram': ram}]\n\n\ndef macos_get_gpu_info():\n  gpus = []\n  try:\n    info = check_output(['system_profiler', 'SPDisplaysDataType'])\n    info = info.split(\"Chipset Model:\")[1:]\n    for gpu in info:\n      model_name = gpu.split('\\n')[0].strip()\n      bus = re.search(\"Bus: (.*)\", gpu).group(1).strip()\n      memory = int(re.search(\"VRAM (.*?): (.*) MB\", gpu).group(2).strip())\n      gpus += [{'model': model_name + ' (' + bus + ')', 'ram': memory * 1024 * 1024}]\n    return gpus\n  except Exception:\n    pass\n\n\ndef get_gpu_info():\n  if WINDOWS:\n    return win_get_gpu_info()\n  elif LINUX:\n    return linux_get_gpu_info()\n  elif MACOS:\n    return macos_get_gpu_info()\n  else:\n    return []\n\n\ndef get_executable_version(filename):\n  try:\n    if WINDOWS:\n      import win32api\n      info = win32api.GetFileVersionInfo(filename, \"\\\\\")\n      ms = info['FileVersionMS']\n      ls = info['FileVersionLS']\n      version = win32api.HIWORD(ms), win32api.LOWORD(ms), win32api.HIWORD(ls), win32api.LOWORD(ls)\n      return '.'.join(map(str, version))\n    elif MACOS:\n      plistfile = filename[0:filename.find('MacOS')] + 'Info.plist'\n      info = plistlib.readPlist(plistfile)\n      # Data in Info.plists is a bit odd, this check combo gives best information on each browser.\n      if 'firefox' in filename.lower():\n        return info['CFBundleShortVersionString']\n      if 'opera' in filename.lower():\n        return info['CFBundleVersion']\n      else:\n        return info['CFBundleShortVersionString']\n    elif LINUX:\n      if 'firefox' in filename.lower():\n        version = check_output([filename, '-v'])\n        version = version.replace('Mozilla Firefox ', '')\n        return version.strip()\n      else:\n        return \"\"\n  except Exception as e:\n    logv(e)\n    return \"\"\n\n\ndef get_browser_build_date(filename):\n  try:\n    if MACOS:\n      plistfile = filename[0:filename.find('MacOS')] + 'Info.plist'\n      info = plistlib.readPlist(plistfile)\n      # Data in Info.plists is a bit odd, this check combo gives best information on each browser.\n      if 'firefox' in filename.lower():\n        return '20' + '-'.join(map((lambda x: x.zfill(2)), info['CFBundleVersion'][2:].split('.')))\n  except Exception as e:\n    logv(e)\n\n  # No exact information about the build date, so take the last modified date of the file.\n  # This is not right, but assuming that one installed the browser shortly after the update was\n  # available, it's shooting close.\n  try:\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(os.path.getmtime(filename)))\n  except Exception as e:\n    logv(e)\n    return '(unknown)'\n\n\ndef get_browser_info(filename, format_json):\n  if format_json:\n    return json.dumps({\n      'name': browser_display_name(filename),\n      'version': get_executable_version(filename),\n      'buildDate': get_browser_build_date(filename)\n    }, indent=2)\n  else:\n    return 'Browser: ' + browser_display_name(filename) + ' ' + get_executable_version(filename) + ', build ' + get_browser_build_date(filename)\n\n\n# http://stackoverflow.com/questions/580924/python-windows-file-version-attribute\ndef win_get_file_properties(fname):\n  propNames = ('Comments', 'InternalName', 'ProductName',\n               'CompanyName', 'LegalCopyright', 'ProductVersion',\n               'FileDescription', 'LegalTrademarks', 'PrivateBuild',\n               'FileVersion', 'OriginalFilename', 'SpecialBuild')\n\n  props = {'FixedFileInfo': None, 'StringFileInfo': None, 'FileVersion': None}\n\n  import win32api\n  # backslash as parm returns dictionary of numeric info corresponding to VS_FIXEDFILEINFO struct\n  fixedInfo = win32api.GetFileVersionInfo(fname, '\\\\')\n  props['FixedFileInfo'] = fixedInfo\n  props['FileVersion'] = \"%d.%d.%d.%d\" % (fixedInfo['FileVersionMS'] / 65536,\n                                          fixedInfo['FileVersionMS'] % 65536,\n                                          fixedInfo['FileVersionLS'] / 65536,\n                                          fixedInfo['FileVersionLS'] % 65536)\n\n  # \\VarFileInfo\\Translation returns list of available (language, codepage)\n  # pairs that can be used to retrieve string info. We are using only the first pair.\n  lang, codepage = win32api.GetFileVersionInfo(fname, '\\\\VarFileInfo\\\\Translation')[0]\n\n  # any other must be of the form \\StringfileInfo\\%04X%04X\\parm_name, middle\n  # two are language/codepage pair returned from above\n\n  strInfo = {}\n  for propName in propNames:\n    strInfoPath = u'\\\\StringFileInfo\\\\%04X%04X\\\\%s' % (lang, codepage, propName)\n    ## print str_info\n    strInfo[propName] = win32api.GetFileVersionInfo(fname, strInfoPath)\n\n  props['StringFileInfo'] = strInfo\n\n  return props\n\n\ndef get_computer_model():\n  try:\n    if MACOS:\n      try:\n        with open(os.path.join(os.getenv(\"HOME\"), '.emrun.hwmodel.cached'), 'r') as f:\n          model = f.read()\n          return model\n      except IOError:\n        pass\n\n      try:\n        # http://apple.stackexchange.com/questions/98080/can-a-macs-model-year-be-determined-via-terminal-command\n        serial = check_output(['system_profiler', 'SPHardwareDataType'])\n        serial = re.search(\"Serial Number (.*): (.*)\", serial)\n        serial = serial.group(2).strip()[-4:]\n        cmd = ['curl', '-s', 'http://support-sp.apple.com/sp/product?cc=' + serial]\n        logv(str(cmd))\n        model = check_output(cmd)\n        model = re.search('<configCode>(.*)</configCode>', model)\n        model = model.group(1).strip()\n        with open(os.path.join(os.getenv(\"HOME\"), '.emrun.hwmodel.cached'), 'w') as fh:\n          fh.write(model) # Cache the hardware model to disk\n        return model\n      except Exception:\n        hwmodel = check_output(['sysctl', 'hw.model'])\n        hwmodel = re.search('hw.model: (.*)', hwmodel).group(1).strip()\n        return hwmodel\n    elif WINDOWS:\n      manufacturer = check_output(['wmic', 'baseboard', 'get', 'manufacturer']).split('\\n')[1].strip()\n      version = check_output(['wmic', 'baseboard', 'get', 'version']).split('\\n')[1].strip()\n      product = check_output(['wmic', 'baseboard', 'get', 'product']).split('\\n')[1].strip()\n      if 'Apple' in manufacturer:\n        return manufacturer + ' ' + version + ', ' + product\n      else:\n        return manufacturer + ' ' + product + ', ' + version\n    elif LINUX:\n      board_vendor = check_output(['cat', '/sys/devices/virtual/dmi/id/board_vendor']).strip()\n      board_name = check_output(['cat', '/sys/devices/virtual/dmi/id/board_name']).strip()\n      board_version = check_output(['cat', '/sys/devices/virtual/dmi/id/board_version']).strip()\n\n      bios_vendor = check_output(['cat', '/sys/devices/virtual/dmi/id/bios_vendor']).strip()\n      bios_version = check_output(['cat', '/sys/devices/virtual/dmi/id/bios_version']).strip()\n      bios_date = check_output(['cat', '/sys/devices/virtual/dmi/id/bios_date']).strip()\n      return board_vendor + ' ' + board_name + ' ' + board_version + ', ' + bios_vendor + ' ' + bios_version + ' (' + bios_date + ')'\n  except Exception as e:\n    logv(str(e))\n  return 'Generic'\n\n\ndef get_os_version():\n  bitness = ' (64bit)' if platform.machine() in ['AMD64', 'x86_64'] else ' (32bit)'\n  try:\n    if WINDOWS:\n      versionHandle = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\")\n      productName = winreg.QueryValueEx(versionHandle, \"ProductName\")\n\n      version = ''\n      try:\n        version = ' ' + check_output(['wmic', 'os', 'get', 'version']).split('\\n')[1].strip()\n      except Exception:\n        pass\n      return productName[0] + version + bitness\n    elif MACOS:\n      return 'macOS ' + platform.mac_ver()[0] + bitness\n    elif LINUX:\n      kernel_version = check_output(['uname', '-r']).strip()\n      return ' '.join(platform.linux_distribution()) + ', linux kernel ' + kernel_version + ' ' + platform.architecture()[0] + bitness\n  except Exception:\n    return 'Unknown OS'\n\n\ndef get_system_memory():\n  try:\n    if LINUX or emrun_options.android:\n      if emrun_options.android:\n        lines = check_output([ADB, 'shell', 'cat', '/proc/meminfo']).split('\\n')\n      else:\n        mem = open('/proc/meminfo', 'r')\n        lines = mem.readlines()\n        mem.close()\n      for i in lines:\n        sline = i.split()\n        if str(sline[0]) == 'MemTotal:':\n          return int(sline[1]) * 1024\n    elif WINDOWS:\n      import win32api\n      return win32api.GlobalMemoryStatusEx()['TotalPhys']\n    elif MACOS:\n      return int(check_output(['sysctl', '-n', 'hw.memsize']).strip())\n  except Exception:\n    return -1\n\n\n# Finds the given executable 'program' in PATH. Operates like the Unix tool 'which'.\ndef which(program):\n  def is_exe(fpath):\n    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n\n  fpath, fname = os.path.split(program)\n  if fpath:\n    if is_exe(program):\n      return program\n  else:\n    for path in os.environ[\"PATH\"].split(os.pathsep):\n      path = path.strip('\"')\n      exe_file = os.path.join(path, program)\n      if is_exe(exe_file):\n        return exe_file\n\n      if WINDOWS and '.' not in fname:\n        if is_exe(exe_file + '.exe'):\n          return exe_file + '.exe'\n        if is_exe(exe_file + '.cmd'):\n          return exe_file + '.cmd'\n        if is_exe(exe_file + '.bat'):\n          return exe_file + '.bat'\n\n  return None\n\n\ndef win_get_default_browser():\n  # Look in the registry for the default system browser on Windows without relying on\n  # 'start %1' since that method has an issue, see comment below.\n  try:\n    with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Classes\\http\\shell\\open\\command\") as key:\n      cmd = winreg.QueryValue(key, None)\n      if cmd:\n        parts = shlex.split(cmd)\n        if len(parts):\n          return [parts[0]]\n  except WindowsError:\n    logv(\"Unable to find default browser key in Windows registry. Trying fallback.\")\n\n  # Fall back to 'start \"\" %1', which we have to treat as if user passed --serve-forever, since\n  # for some reason, we are not able to detect when the browser closes when this is passed.\n  #\n  # If the first argument to 'start' is quoted, then 'start' will create a new cmd.exe window with\n  # that quoted string as the title. If the URL contained spaces, it would be quoted by subprocess,\n  # and if we did 'start %1', it would create a new cmd.exe window with the URL as title instead of\n  # actually launching the browser. Therefore, we must pass a dummy quoted first argument for start\n  # to interpret as the title. For this purpose, we use the empty string, which will be quoted\n  # as \"\". See #9253 for details.\n  return ['cmd', '/C', 'start', '']\n\n\ndef find_browser(name):\n  if WINDOWS and name == 'start':\n    return win_get_default_browser()\n  if MACOS and name == 'open':\n    return [name]\n\n  if os.path.isfile(os.path.abspath(name)):\n    return [name]\n  if os.path.isfile(os.path.abspath(name) + '.exe'):\n    return [os.path.abspath(name) + '.exe']\n  if os.path.isfile(os.path.abspath(name) + '.cmd'):\n    return [os.path.abspath(name) + '.cmd']\n  if os.path.isfile(os.path.abspath(name) + '.bat'):\n    return [os.path.abspath(name) + '.bat']\n\n  path_lookup = which(name)\n  if path_lookup is not None:\n    return [path_lookup]\n\n  browser_locations = []\n  if MACOS:\n    # Note: by default Firefox beta installs as 'Firefox.app', you must manually rename it to\n    # FirefoxBeta.app after installation.\n    browser_locations = [('firefox', '/Applications/Firefox.app/Contents/MacOS/firefox'),\n                         ('firefox_beta', '/Applications/FirefoxBeta.app/Contents/MacOS/firefox'),\n                         ('firefox_aurora', '/Applications/FirefoxAurora.app/Contents/MacOS/firefox'),\n                         ('firefox_nightly', '/Applications/FirefoxNightly.app/Contents/MacOS/firefox'),\n                         ('safari', '/Applications/Safari.app/Contents/MacOS/Safari'),\n                         ('opera', '/Applications/Opera.app/Contents/MacOS/Opera'),\n                         ('chrome', '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'),\n                         ('chrome_canary', '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary')]\n  elif WINDOWS:\n    pf_locations = ['ProgramFiles(x86)', 'ProgramFiles', 'ProgramW6432', 'LOCALAPPDATA']\n\n    for pf_env in pf_locations:\n      if pf_env not in os.environ:\n        continue\n      program_files = os.environ[pf_env] if WINDOWS else ''\n\n      browser_locations += [('chrome', os.path.join(program_files, 'Google/Chrome/Application/chrome.exe')),\n                            ('chrome_canary', os.path.expanduser(\"~/AppData/Local/Google/Chrome SxS/Application/chrome.exe\")),\n                            ('firefox_nightly', os.path.join(program_files, 'Nightly/firefox.exe')),\n                            ('firefox_aurora', os.path.join(program_files, 'Aurora/firefox.exe')),\n                            ('firefox_beta', os.path.join(program_files, 'Beta/firefox.exe')),\n                            ('firefox_beta', os.path.join(program_files, 'FirefoxBeta/firefox.exe')),\n                            ('firefox_beta', os.path.join(program_files, 'Firefox Beta/firefox.exe')),\n                            ('firefox', os.path.join(program_files, 'Mozilla Firefox/firefox.exe')),\n                            ('iexplore', os.path.join(program_files, 'Internet Explorer/iexplore.exe')),\n                            ('opera', os.path.join(program_files, 'Opera/launcher.exe'))]\n\n  elif LINUX:\n    browser_locations = [('firefox', os.path.expanduser('~/firefox/firefox')),\n                         ('firefox_beta', os.path.expanduser('~/firefox_beta/firefox')),\n                         ('firefox_aurora', os.path.expanduser('~/firefox_aurora/firefox')),\n                         ('firefox_nightly', os.path.expanduser('~/firefox_nightly/firefox')),\n                         ('chrome', which('google-chrome-stable')),\n                         ('chrome', which('google-chrome'))]\n\n  for alias, browser_exe in browser_locations:\n    if name == alias:\n      if browser_exe is not None and os.path.isfile(browser_exe):\n        return [browser_exe]\n\n  return None # Could not find the browser\n\n\ndef get_android_model():\n  manufacturer = check_output([ADB, 'shell', 'getprop', 'ro.product.manufacturer']).strip()\n  brand = check_output([ADB, 'shell', 'getprop', 'ro.product.brand']).strip()\n  model = check_output([ADB, 'shell', 'getprop', 'ro.product.model']).strip()\n  board = check_output([ADB, 'shell', 'getprop', 'ro.product.board']).strip()\n  device = check_output([ADB, 'shell', 'getprop', 'ro.product.device']).strip()\n  name = check_output([ADB, 'shell', 'getprop', 'ro.product.name']).strip()\n  return manufacturer + ' ' + brand + ' ' + model + ' ' + board + ' ' + device + ' ' + name\n\n\ndef get_android_os_version():\n  ver = check_output([ADB, 'shell', 'getprop', 'ro.build.version.release']).strip()\n  apiLevel = check_output([ADB, 'shell', 'getprop', 'ro.build.version.sdk']).strip()\n  if not apiLevel:\n    apiLevel = check_output([ADB, 'shell', 'getprop', 'ro.build.version.sdk_int']).strip()\n\n  os = ''\n  if ver:\n    os += 'Android ' + ver + ' '\n  if apiLevel:\n    os += 'SDK API Level ' + apiLevel + ' '\n  os += check_output([ADB, 'shell', 'getprop', 'ro.build.description']).strip()\n  return os\n\n\ndef list_android_browsers():\n  apps = check_output([ADB, 'shell', 'pm', 'list', 'packages', '-f']).replace('\\r\\n', '\\n')\n  browsers = []\n  for line in apps.split('\\n'):\n    line = line.strip()\n    if line.endswith('=org.mozilla.firefox'):\n      browsers += ['firefox']\n    if line.endswith('=org.mozilla.firefox_beta'):\n      browsers += ['firefox_beta']\n    if line.endswith('=org.mozilla.fennec_aurora'):\n      browsers += ['firefox_aurora']\n    if line.endswith('=org.mozilla.fennec'):\n      browsers += ['firefox_nightly']\n    if line.endswith('=com.android.chrome'):\n      browsers += ['chrome']\n    if line.endswith('=com.chrome.beta'):\n      browsers += ['chrome_beta']\n    if line.endswith('=com.chrome.dev'):\n      browsers += ['chrome_dev']\n    if line.endswith('=com.chrome.canary'):\n      browsers += ['chrome_canary']\n    if line.endswith('=com.opera.browser'):\n      browsers += ['opera']\n    if line.endswith('=com.opera.mini.android'):\n      browsers += ['opera_mini']\n    if line.endswith('=mobi.mgeek.TunnyBrowser'):\n      browsers += ['dolphin']\n\n  browsers.sort()\n  logi('emrun has automatically found the following browsers on the connected Android device:')\n  for browser in browsers:\n    logi('  - ' + browser)\n\n\ndef list_pc_browsers():\n  browsers = ['firefox', 'firefox_beta', 'firefox_aurora', 'firefox_nightly', 'chrome', 'chrome_canary', 'iexplore', 'safari', 'opera']\n  logi('emrun has automatically found the following browsers in the default install locations on the system:')\n  logi('')\n  for browser in browsers:\n    browser_exe = find_browser(browser)\n    if type(browser_exe) is list:\n      browser_exe = browser_exe[0]\n    if browser_exe:\n      logi('  - ' + browser + ': ' + browser_display_name(browser_exe) + ' ' + get_executable_version(browser_exe))\n  logi('')\n  logi('You can pass the --browser <id> option to launch with the given browser above.')\n  logi('Even if your browser was not detected, you can use --browser /path/to/browser/executable to launch with that browser.')\n\n\ndef browser_display_name(browser):\n  b = browser.lower()\n  if 'iexplore' in b:\n    return 'Microsoft Internet Explorer'\n  if 'chrome' in b:\n    return 'Google Chrome'\n  if 'firefox' in b:\n    # Try to identify firefox flavor explicitly, to help show issues where emrun would launch the wrong browser.\n    try:\n      product_name = win_get_file_properties(browser)['StringFileInfo']['ProductName'] if WINDOWS else 'firefox'\n      if product_name.lower() != 'firefox':\n        return 'Mozilla Firefox ' + product_name\n    except Exception:\n      pass\n    return 'Mozilla Firefox'\n  if 'opera' in b:\n    return 'Opera'\n  if 'safari' in b:\n    return 'Apple Safari'\n  return browser\n\n\ndef subprocess_env():\n  e = os.environ.copy()\n  # https://bugzilla.mozilla.org/show_bug.cgi?id=745154\n  e['MOZ_DISABLE_AUTO_SAFE_MODE'] = '1'\n  e['MOZ_DISABLE_SAFE_MODE_KEY'] = '1' # https://bugzilla.mozilla.org/show_bug.cgi?id=653410#c9\n  e['JIT_OPTION_asmJSAtomicsEnable'] = 'true' # https://bugzilla.mozilla.org/show_bug.cgi?id=1299359#c0\n  return e\n\n\n# Removes a directory tree even if it was readonly, and doesn't throw exception on failure.\ndef remove_tree(d):\n  os.chmod(d, stat.S_IWRITE)\n  try:\n    def remove_readonly_and_try_again(func, path, _exc_info):\n      if not (os.stat(path).st_mode & stat.S_IWRITE):\n        os.chmod(path, stat.S_IWRITE)\n        func(path)\n      else:\n        raise\n    shutil.rmtree(d, onerror=remove_readonly_and_try_again)\n  except Exception:\n    pass\n\n\ndef get_system_info(format_json):\n  if emrun_options.android:\n    if format_json:\n      return json.dumps({'model': get_android_model(),\n                         'os': get_android_os_version(),\n                         'ram': get_system_memory(),\n                         'cpu': get_android_cpu_infoline()\n                         }, indent=2)\n    else:\n      info = 'Model: ' + get_android_model() + '\\n'\n      info += 'OS: ' + get_android_os_version() + ' with ' + str(get_system_memory() // 1024 // 1024) + ' MB of System RAM\\n'\n      info += 'CPU: ' + get_android_cpu_infoline() + '\\n'\n      return info.strip()\n  else:\n    try:\n      with open(os.path.expanduser('~/.emrun.generated.guid')) as fh:\n        unique_system_id = fh.read().strip()\n    except Exception:\n      import uuid\n      unique_system_id = str(uuid.uuid4())\n      try:\n        open(os.path.expanduser('~/.emrun.generated.guid'), 'w').write(unique_system_id)\n      except Exception as e:\n        logv(e)\n\n    if format_json:\n      return json.dumps({'name': socket.gethostname(),\n                         'model': get_computer_model(),\n                         'os': get_os_version(),\n                         'ram': get_system_memory(),\n                         'cpu': get_cpu_info(),\n                         'gpu': get_gpu_info(),\n                         'uuid': unique_system_id}, indent=2)\n    else:\n      cpu = get_cpu_info()\n      gpus = get_gpu_info()\n      info = 'Computer name: ' + socket.gethostname() + '\\n' # http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script\n      info += 'Model: ' + get_computer_model() + '\\n'\n      info += 'OS: ' + get_os_version() + ' with ' + str(get_system_memory() // 1024 // 1024) + ' MB of System RAM\\n'\n      info += 'CPU: ' + cpu['model'] + ', ' + str(cpu['frequency']) + ' MHz, ' + str(cpu['physicalCores']) + ' physical cores, ' + str(cpu['logicalCores']) + ' logical cores\\n'\n      if len(gpus) == 1:\n        info += 'GPU: ' + gpus[0]['model'] + ' with ' + str(gpus[0]['ram'] // 1024 // 1024) + \" MB of VRAM\\n\"\n      elif len(gpus) > 1:\n        for i in range(0, len(gpus)):\n          info += 'GPU' + str(i) + \": \" + gpus[i]['model'] + ' with ' + str(gpus[i]['ram'] // 1024 // 1024) + ' MBs of VRAM\\n'\n      info += 'UUID: ' + unique_system_id\n      return info.strip()\n\n\n# Be resilient to quotes and whitespace\ndef unwrap(s):\n  s = s.strip()\n  if (s.startswith('\"') and s.endswith('\"')) or (s.startswith(\"'\") and s.endswith(\"'\")):\n    s = s[1:-1].strip()\n  return s\n\n\ndef list_processes_by_name(exe_full_path):\n  pids = []\n  try:\n    import psutil\n    for proc in psutil.process_iter():\n      try:\n        pinfo = proc.as_dict(attrs=['pid', 'name', 'exe'])\n        if pinfo['exe'].lower().replace('\\\\', '/') == exe_full_path.lower().replace('\\\\', '/'):\n          pids.append(pinfo)\n      except Exception:\n        # Fail gracefully if unable to iterate over a specific process\n        pass\n  except Exception:\n    # Fail gracefully if psutil not available\n    logv('import psutil failed, unable to detect browser processes')\n    pass\n\n  logv('Searching for processes by full path name \"' + exe_full_path + '\".. found ' + str(len(pids)) + ' entries')\n\n  return pids\n\n\nusage_str = \"\"\"\\\nemrun [emrun_options] filename.html -- [html_cmdline_options]\n\n   where emrun_options specifies command line options for emrun itself, whereas\n   html_cmdline_options specifies startup arguments to the program.\n\nIf you are seeing \"unrecognized arguments\" when trying to pass\narguments to your page, remember to add `--` between arguments\nto emrun itself and arguments to your page.\n\"\"\"\n\n\ndef parse_args(args):\n  parser = argparse.ArgumentParser(usage=usage_str)\n\n  parser.add_argument('--kill-start', action='store_true',\n                      help='If true, any previously running instances of '\n                           'the target browser are killed before starting.')\n\n  parser.add_argument('--kill-exit', action='store_true',\n                      help='If true, the spawned browser process is forcibly '\n                           'killed when it calls exit(). Note: Using this '\n                           'option may require explicitly passing the option '\n                           '--browser=/path/to/browser, to avoid emrun being '\n                           'detached from the browser process it spawns.')\n\n  parser.add_argument('--no-server', dest='run_server', action='store_false',\n                      default=True,\n                      help='If specified, a HTTP web server is not launched '\n                           'to host the page to run.')\n\n  parser.add_argument('--no-browser', dest='run_browser', action='store_false',\n                      default=True,\n                      help='If specified, emrun will not launch a web browser '\n                           'to run the page.')\n\n  parser.add_argument('--no-emrun-detect', action='store_true',\n                      help='If specified, skips printing the warning message '\n                           'if html page is detected to not have been built '\n                           'with --emrun linker flag.')\n\n  parser.add_argument('--serve-after-close', action='store_true',\n                      help='If true, serves the web page even after the '\n                           'application quits by user closing the web page.')\n\n  parser.add_argument('--serve-after-exit', action='store_true',\n                      help='If true, serves the web page even after the '\n                           'application quits by a call to exit().')\n\n  parser.add_argument('--serve-root',\n                      help='If set, specifies the root path that the emrun '\n                           'web server serves. If not specified, the directory '\n                           'where the target .html page lives in is served.')\n\n  parser.add_argument('--verbose', action='store_true',\n                      help='Enable verbose logging from emrun internal operation.')\n\n  parser.add_argument('--hostname', default=default_webserver_hostname,\n                      help='Specifies the hostname the server runs in.')\n\n  parser.add_argument('--port', default=default_webserver_port, type=int,\n                      help='Specifies the port the server runs in.')\n\n  parser.add_argument('--log-stdout',\n                      help='Specifies a log filename where the browser process '\n                           'stdout data will be appended to.')\n\n  parser.add_argument('--log-stderr',\n                      help='Specifies a log filename where the browser process stderr data will be appended to.')\n\n  parser.add_argument('--silence-timeout', type=int, default=0,\n                      help='If no activity is received in this many seconds, '\n                           'the browser process is assumed to be hung, and the web '\n                           'server is shut down and the target browser killed.  '\n                           'Disabled by default.')\n\n  parser.add_argument('--timeout', type=int, default=0,\n                      help='If the browser process does not quit or the page '\n                           'exit() in this many seconds, the browser is assumed '\n                           'to be hung, and the web server is shut down and the '\n                           'target browser killed. Disabled by default.')\n\n  parser.add_argument('--timeout-returncode', type=int, default=99999,\n                      help='Sets the exit code that emrun reports back to '\n                           'caller in the case that a page timeout occurs. '\n                           'Default: 99999.')\n\n  parser.add_argument('--list-browsers', action='store_true',\n                      help='Prints out all detected browser that emrun is able '\n                           'to use with the --browser command and exits.')\n\n  parser.add_argument('--browser',\n                      help='Specifies the browser executable to run the web page in.')\n\n  parser.add_argument('--browser-args', default='',\n                      help='Specifies the arguments to the browser executable.')\n\n  parser.add_argument('--android', action='store_true',\n                      help='Launches the page in a browser of an Android '\n                           'device connected to an USB on the local system. (via adb)')\n\n  parser.add_argument('--android-tunnel', action='store_true',\n                      help='Expose the port directly to the Android device '\n                           'and connect to it as localhost, establishing '\n                           'cross origin isolation. Implies --android. A '\n                           'reverse socket connection is created by adb '\n                           'reverse, and remains after emrun terminates (it '\n                           'can be removed by adb reverse --remove).')\n\n  parser.add_argument('--system-info', action='store_true',\n                      help='Prints information about the current system at startup.')\n\n  parser.add_argument('--browser-info', action='store_true',\n                      help='Prints information about the target browser to launch at startup.')\n\n  parser.add_argument('--json', action='store_true',\n                      help='If specified, --system-info and --browser-info are '\n                           'outputted in JSON format.')\n\n  parser.add_argument('--safe-firefox-profile', action='store_true',\n                      help='If true, the browser is launched into a new clean '\n                           'Firefox profile that is suitable for unattended '\n                           'automated runs. (If target browser != Firefox, '\n                           'this parameter is ignored)')\n\n  parser.add_argument('--private-browsing', action='store_true',\n                      help='If specified, opens browser in private/incognito mode.')\n\n  parser.add_argument('--dump-out-directory', default='dump_out', type=str,\n                      help='If specified, overrides the directory for dump files using emrun_file_dump method.')\n\n  parser.add_argument('serve', nargs='?', default='')\n\n  parser.add_argument('cmdlineparams', nargs='*')\n\n  # Support legacy argument names with `_` in them (but don't\n  # advertize these in the --help message).\n  for i, a in enumerate(args):\n    if a == '--':\n      break\n    if a.startswith('--') and '_' in a:\n      # Only replace '_' in that argument name, not that its value\n      parts = a.split('=')\n      parts[0] = parts[0].replace('_', '-')\n      args[i] = '='.join(parts)\n\n  return parser.parse_args(args)\n\n\ndef run(args):  # noqa: C901, PLR0912, PLR0915\n  \"\"\"Future modifications should consider refactoring to reduce complexity.\n\n  * The McCabe cyclomatiic complexity is currently 74 vs 10 recommended.\n  * There are currently 86 branches vs 12 recommended.\n  * There are currently 202 statements vs 50 recommended.\n\n  To revalidate these numbers, run `ruff check --select=C901,PLR091`.\n  \"\"\"\n  global browser_process, browser_exe, processname_killed_atexit, emrun_options, emrun_not_enabled_nag_printed\n\n  options = emrun_options = parse_args(args)\n\n  if options.android_tunnel:\n    options.android = True\n\n  if options.android:\n    global ADB\n    ADB = which('adb')\n    if not ADB:\n      loge(\"Could not find the adb tool. Install Android SDK and add the directory of adb to PATH.\")\n      return 1\n\n  if not options.browser and not options.android:\n    if WINDOWS:\n      options.browser = 'start'\n    elif LINUX:\n      options.browser = which('xdg-open')\n      if not options.browser:\n        options.browser = 'firefox'\n    elif MACOS:\n      options.browser = 'open'\n\n  if options.list_browsers:\n    if options.android:\n      list_android_browsers()\n    else:\n      list_pc_browsers()\n    return\n\n  if not options.serve and (options.system_info or options.browser_info):\n    # Don't run if only --system-info or --browser-info was passed.\n    options.run_server = options.run_browser = False\n\n  if not options.serve and (options.run_server or options.run_browser):\n    logi(usage_str)\n    logi('')\n    logi('Type emrun --help for a detailed list of available options.')\n    return\n\n  if options.serve:\n    file_to_serve = options.serve\n  else:\n    file_to_serve = '.'\n  file_to_serve_is_url = file_to_serve.startswith('file://') or file_to_serve.startswith('http://') or file_to_serve.startswith('https://')\n\n  if options.serve_root:\n    serve_dir = os.path.abspath(options.serve_root)\n  else:\n    if file_to_serve == '.' or file_to_serve_is_url:\n      serve_dir = os.path.abspath('.')\n    else:\n      if file_to_serve.endswith('/') or file_to_serve.endswith('\\\\') or os.path.isdir(file_to_serve):\n        serve_dir = file_to_serve\n      else:\n        serve_dir = os.path.dirname(os.path.abspath(file_to_serve))\n  if file_to_serve_is_url:\n    url = file_to_serve\n  else:\n    url = os.path.relpath(os.path.abspath(file_to_serve), serve_dir)\n\n  os.chdir(serve_dir)\n  if options.run_server:\n    if options.run_browser:\n      logv('Web server root directory: ' + os.path.abspath('.'))\n    else:\n      logi('Web server root directory: ' + os.path.abspath('.'))\n    logv('Starting web server: http://%s:%i/' % (options.hostname, options.port))\n    httpd = HTTPWebServer((options.hostname, options.port), HTTPHandler)\n    # to support binding to port zero we must allow the server to open to socket then retrieve the final port number\n    options.port = httpd.socket.getsockname()[1]\n\n  if not file_to_serve_is_url:\n    if len(options.cmdlineparams):\n      url += '?' + '&'.join(options.cmdlineparams)\n    if options.android_tunnel:\n      hostname = 'localhost'\n    elif options.android:\n      hostname = socket.gethostbyname(socket.gethostname())\n    else:\n      hostname = options.hostname\n    # create url for browser after opening the server so we have the final port number in case we are binding to port 0\n    url = 'http://' + hostname + ':' + str(options.port) + '/' + url\n\n  if options.android:\n    if options.run_browser or options.browser_info:\n      if not options.browser:\n        loge(\"Running on Android requires that you explicitly specify the browser to run with --browser <id>. Run emrun --android --list-browsers to obtain a list of installed browsers you can use.\")\n        return 1\n      elif options.browser == 'firefox':\n        browser_app = 'org.mozilla.firefox/org.mozilla.gecko.BrowserApp'\n      elif options.browser == 'firefox_nightly' or options.browser == 'fenix':\n        browser_app = 'org.mozilla.fenix/org.mozilla.gecko.BrowserApp'\n      elif options.browser == 'chrome':\n        browser_app = 'com.android.chrome/com.google.android.apps.chrome.Main'\n      elif options.browser == 'chrome_beta':\n        browser_app = 'com.chrome.beta/com.google.android.apps.chrome.Main'\n      elif options.browser == 'chrome_dev':\n        browser_app = 'com.chrome.dev/com.google.android.apps.chrome.Main'\n      elif options.browser == 'chrome_canary':\n        browser_app = 'com.chrome.canary/com.google.android.apps.chrome.Main'\n      elif '.' in options.browser and '/' in options.browser:\n        # Browser command line contains both '.' and '/', so it looks like a string of form 'package/activity', use that\n        # as the browser.\n        browser_app = options.browser\n      else:\n        loge(\"Don't know how to launch browser \" + options.browser + ' on Android!')\n        return 1\n      # To add support for a new Android browser in the list above:\n      # 1. Install the browser to Android phone, connect it via adb to PC.\n      # 2. Type 'adb shell pm list packages -f' to locate the package name of that application.\n      # 3. Type 'adb pull <packagename>.apk' to copy the apk of that application to PC.\n      # 4. Type 'aapt d xmltree <packagename>.apk AndroidManifest.xml > manifest.txt' to extract the manifest from the package.\n      # 5. Locate the name of the main activity for the browser in manifest.txt and add an entry to above list in form 'appname/mainactivityname'\n\n      if options.android_tunnel:\n        subprocess.check_call([ADB, 'reverse', 'tcp:' + str(options.port), 'tcp:' + str(options.port)])\n\n      url = url.replace('&', '\\\\&')\n      browser = [ADB, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-n', browser_app, '-d', url]\n      processname_killed_atexit = browser_app[:browser_app.find('/')]\n  else: # Launching a web page on local system.\n    if options.browser:\n      options.browser = unwrap(options.browser)\n\n    if options.run_browser or options.browser_info:\n      browser = find_browser(str(options.browser))\n      if not browser:\n        loge('Unable to find browser \"' + str(options.browser) + '\"! Check the correctness of the passed --browser=xxx parameter!')\n        return 1\n      browser_exe = browser[0]\n      browser_args = shlex.split(unwrap(options.browser_args))\n\n      if MACOS and ('safari' in browser_exe.lower() or browser_exe == 'open'):\n        # Safari has a bug that a command line 'Safari http://page.com' does\n        # not launch that page, but instead launches 'file:///http://page.com'.\n        # To remedy this, must use the open -a command to run Safari, but\n        # unfortunately this will end up spawning Safari process detached from\n        # emrun.\n        browser = ['open', '-a', 'Safari'] + (browser[1:] if len(browser) > 1 else [])\n        browser_exe = '/Applications/Safari.app/Contents/MacOS/Safari'\n        processname_killed_atexit = 'Safari'\n      elif 'chrome' in browser_exe.lower():\n        processname_killed_atexit = 'chrome'\n        browser_args += ['--enable-nacl', '--enable-pnacl', '--disable-restore-session-state', '--enable-webgl',\n                         '--no-default-browser-check', '--no-first-run', '--allow-file-access-from-files', '--password-store=basic']\n        if options.private_browsing:\n          browser_args += ['--incognito']\n    #    if not options.run_server:\n    #      browser_args += ['--disable-web-security']\n      elif 'firefox' in browser_exe.lower():\n        processname_killed_atexit = 'firefox'\n      elif 'iexplore' in browser_exe.lower():\n        processname_killed_atexit = 'iexplore'\n        if options.private_browsing:\n          browser_args += ['-private']\n      elif 'opera' in browser_exe.lower():\n        processname_killed_atexit = 'opera'\n\n      # In Windows cmdline, & character delimits multiple commands, so must\n      # use ^ to escape them.\n      if browser_exe == 'cmd':\n        url = url.replace('&', '^&')\n      url = url.replace('0.0.0.0', 'localhost')\n      browser += browser_args + [url]\n\n  if options.kill_start:\n    pname = processname_killed_atexit\n    kill_browser_process()\n    processname_killed_atexit = pname\n\n  # Copy the profile over to Android.\n  if options.android and options.safe_firefox_profile:\n    profile_dir = create_emrun_safe_firefox_profile()\n\n    def run(cmd):\n      logi(str(cmd))\n      subprocess.check_call(cmd)\n\n    try:\n      run(['adb', 'shell', 'rm', '-rf', '/mnt/sdcard/safe_firefox_profile'])\n      run(['adb', 'shell', 'mkdir', '/mnt/sdcard/safe_firefox_profile'])\n      run(['adb', 'push', os.path.join(profile_dir, 'prefs.js'), '/mnt/sdcard/safe_firefox_profile/prefs.js'])\n    except Exception as e:\n      loge('Creating Firefox profile prefs.js file to internal storage in /mnt/sdcard failed with error ' + str(e) + '!')\n      loge('Try running without --safe-firefox-profile flag if unattended execution mode is not important, or')\n      loge('enable rooted debugging on the Android device to allow adb to write files to /mnt/sdcard.')\n    browser += ['--es', 'args', '\"--profile /mnt/sdcard/safe_firefox_profile\"']\n\n  # Create temporary Firefox profile to run the page with. This is important to\n  # run after kill_browser_process()/kill_start op above, since that cleans up\n  # the temporary profile if one exists.\n  if processname_killed_atexit == 'firefox' and options.safe_firefox_profile and options.run_browser and not options.android:\n    profile_dir = create_emrun_safe_firefox_profile()\n\n    browser += ['-no-remote', '--profile', profile_dir.replace('\\\\', '/')]\n\n  if options.system_info:\n    logi('Time of run: ' + time.strftime(\"%x %X\"))\n    logi(get_system_info(format_json=options.json))\n\n  if options.browser_info:\n    if options.android:\n      if options.json:\n        logi(json.dumps({'browser': 'Android ' + browser_app}, indent=2))\n      else:\n        logi('Browser: Android ' + browser_app)\n    else:\n      logi(get_browser_info(browser_exe, format_json=options.json))\n\n  # Suppress run warning if requested.\n  if options.no_emrun_detect:\n    emrun_not_enabled_nag_printed = True\n\n  if options.log_stdout:\n    global browser_stdout_handle\n    browser_stdout_handle = open(options.log_stdout, 'a')\n  if options.log_stderr:\n    global browser_stderr_handle\n    if options.log_stderr == options.log_stdout:\n      browser_stderr_handle = browser_stdout_handle\n    else:\n      browser_stderr_handle = open(options.log_stderr, 'a')\n  if options.run_browser:\n    logv(\"Starting browser: %s\" % ' '.join(browser))\n    # if browser[0] == 'cmd':\n    #   Workaround an issue where passing 'cmd /C start' is not able to detect\n    #   when the user closes the page.\n    #   serve_forever = True\n    if browser_exe:\n      global previous_browser_processes\n      logv(browser_exe)\n      previous_browser_processes = list_processes_by_name(browser_exe)\n      for p in previous_browser_processes:\n        logv('Before spawning web browser, found a running ' + os.path.basename(browser_exe) + ' browser process id: ' + str(p['pid']))\n    browser_process = subprocess.Popen(browser, env=subprocess_env())\n    logv('Launched browser process with pid=' + str(browser_process.pid))\n    if options.kill_exit:\n      atexit.register(kill_browser_process)\n    # For Android automation, we execute adb, so this process does not\n    # represent a browser and no point killing it.\n    if options.android:\n      browser_process = None\n\n  if browser_process:\n    premature_quit_code = browser_process.poll()\n    if premature_quit_code is not None:\n      options.serve_after_close = True\n      logv('Warning: emrun got immediately detached from the target browser process (the process quit with exit code ' + str(premature_quit_code) + '). Cannot detect when user closes the browser. Behaving as if --serve-after-close was passed in.')\n      if not options.browser:\n        logv('Try passing the --browser=/path/to/browser option to avoid this from occurring. See https://github.com/emscripten-core/emscripten/issues/3234 for more discussion.')\n\n  if options.run_server:\n    try:\n      httpd.serve_forever()\n    except KeyboardInterrupt:\n      pass\n    httpd.server_close()\n\n    logv('Closed web server.')\n\n  if options.run_browser:\n    if options.kill_exit:\n      kill_browser_process()\n    else:\n      if is_browser_process_alive():\n        logv('Not terminating browser process, pass --kill-exit to terminate the browser when it calls exit().')\n      # If we have created a temporary Firefox profile, we would really really\n      # like to wait until the browser closes, or otherwise we'll just have to\n      # litter temp files and keep the temporary profile alive. It is possible\n      # here that the browser is cooperatively shutting down, but has not yet\n      # had time to do so, so wait for a short while.\n      if temp_firefox_profile_dir is not None:\n        time.sleep(3)\n\n    if not is_browser_process_alive():\n      # Browser is no longer running, make sure to clean up the temp Firefox\n      # profile, if we created one.\n      delete_emrun_safe_firefox_profile()\n\n  return page_exit_code\n\n\ndef main(args):\n  returncode = run(args)\n  logv('emrun quitting with process exit code ' + str(returncode))\n  if temp_firefox_profile_dir is not None:\n    logi('Warning: Had to leave behind a temporary Firefox profile directory ' + temp_firefox_profile_dir + ' because --safe-firefox-profile was set and the browser did not quit before emrun did.')\n  return returncode\n\n\nif __name__ == '__main__':\n  sys.exit(main(sys.argv[1:]))\n"
        },
        {
          "name": "emscons",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emscons.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emscons.py",
          "type": "blob",
          "size": 0.771484375,
          "content": "#!/usr/bin/env python3\n\"\"\"Wrapping the scons invocation, EMSCRIPTEN_TOOL_PATH is set in the process\nenvironment, and can be used to locate the emscripten SCons Tool.\n\nExample:\n\n# Load emscripten Tool\nmy_env = Environment(tools=['emscripten'], toolpath=[os.environ['EMSCRIPTEN_TOOL_PATH']])\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\nfrom tools import building, utils\n\ntool_path = utils.path_from_root('tools/scons/site_scons/site_tools/emscripten')\nbuilding_env = building.get_building_env()\n\nenv = os.environ.copy()\nenv['EMSCRIPTEN_TOOL_PATH'] = tool_path\nenv['EMSCRIPTEN_ROOT'] = utils.path_from_root()\nenv['EMSCONS_PKG_CONFIG_LIBDIR'] = building_env['PKG_CONFIG_LIBDIR']\nenv['EMSCONS_PKG_CONFIG_PATH'] = building_env['PKG_CONFIG_PATH']\n\nsys.exit(subprocess.call(sys.argv[1:], env=env))\n"
        },
        {
          "name": "emscripten-version.txt",
          "type": "blob",
          "size": 0.009765625,
          "content": "4.0.0-git\n"
        },
        {
          "name": "emsize",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emsize.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emsize.py",
          "type": "blob",
          "size": 2.490234375,
          "content": "#!/usr/bin/env python3\n# Copyright 2019 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"Size helper script\n\nThis script acts as a frontend replacement for `size` that supports combining\nJS and wasm output from emscripten.\nThe traditional size utility reports the size of each section in a binary\nand the total. This replacement adds another pseudo-section, \"JS\" which\nshows the size of the JavaScript loader file.\n\nCurrently there are many limitations; basically this tool is enough to\nbe used by the LLVM testsuite runner code to analyze size output.\n\nCurrently this tool only supports sysv output format (it accepts but ignores\nany '-format' argument). It does not accept any other arguments aside from the\ninput file, which is expected to be a JS file. The wasm file is expected to be\nin the same directory, and have the same basename with a '.wasm' extension.\n\"\"\"\n\nimport argparse\nimport os\nimport subprocess\nimport sys\n\nfrom tools import shared\n\nLLVM_SIZE = os.path.expanduser(shared.build_llvm_tool_path(shared.exe_suffix('llvm-size')))\n\n\ndef error(text):\n  print(text, file=sys.stderr, flush=True)\n  return 1\n\n\ndef parse_args(argv):\n  parser = argparse.ArgumentParser(description=__doc__)\n  parser.add_argument('-format', '--format')\n  parser.add_argument('file')\n  args = parser.parse_args(argv)\n  return args.file\n\n\ndef print_sizes(js_file):\n  if not os.path.isfile(js_file):\n    return error('Input JS file %s not foune' % js_file)\n  if not js_file.endswith('.js'):\n    return error('Input file %s does not have a JS extension' % js_file)\n\n  basename = js_file[:-3]\n\n  # Find the JS file size\n  st = os.stat(js_file)\n  js_size = st.st_size\n\n  # Find the rest of the sizes\n  wasm_file = basename + '.wasm'\n  if not os.path.isfile(wasm_file):\n    return error('Wasm file %s not found' % wasm_file)\n\n  sizes = shared.check_call([LLVM_SIZE, '--format=sysv', wasm_file],\n                            stdout=subprocess.PIPE).stdout\n  # llvm-size may emit some number of blank lines (after the total), ignore them\n  lines = [line for line in sizes.splitlines() if line]\n\n  # Last line is the total. Add the JS size.\n  total = int(lines[-1].split()[-1])\n  total += js_size\n\n  for line in lines[:-1]:\n    print(line)\n\n  print('JS\\t\\t%s\\t0' % js_size)\n  print('Total\\t\\t%s' % total)\n\n\nif __name__ == '__main__':\n  sys.exit(print_sizes(parse_args(sys.argv[1:])))\n"
        },
        {
          "name": "emstrip",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emstrip.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emstrip.py",
          "type": "blob",
          "size": 0.4013671875,
          "content": "#!/usr/bin/env python3\n# Copyright 2022 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n\n\"\"\"Wrapper script around `llvm-strip`.\n\"\"\"\n\nimport sys\nfrom tools import shared\n\nshared.exec_process([shared.LLVM_STRIP] + sys.argv[1:])\n"
        },
        {
          "name": "emsymbolizer",
          "type": "blob",
          "size": 0.9521484375,
          "content": "#!/bin/sh\n# Copyright 2020 The Emscripten Authors.  All rights reserved.\n# Emscripten is available under two separate licenses, the MIT license and the\n# University of Illinois/NCSA Open Source License.  Both these licenses can be\n# found in the LICENSE file.\n#\n# Entry point for running python scripts on UNIX systems.\n#\n# Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n#\n# To make modifications to this file, edit `tools/run_python.sh` and then run\n# `tools/maint/create_entry_points.py`\n\n# $PYTHON -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n# of cpython used in cross compilation via setup.py.\nunset _PYTHON_SYSCONFIGDATA_NAME\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$EMSDK_PYTHON\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python3 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  PYTHON=$(command -v python 2> /dev/null)\nfi\n\nif [ -z \"$PYTHON\" ]; then\n  echo 'unable to find python in $PATH'\n  exit 1\nfi\n\nexec \"$PYTHON\" -E \"$0.py\" \"$@\"\n"
        },
        {
          "name": "emsymbolizer.bat",
          "type": "blob",
          "size": 3.2041015625,
          "content": ":: Entry point for running python scripts on windows systems.\n::\n:: Automatically generated by `create_entry_points.py`; DO NOT EDIT.\n::\n:: To make modifications to this file, edit `tools/run_python.bat` and then run\n:: `tools/maint/create_entry_points.py`\n\n:: N.b. In Windows .bat scripts, the ':' character cannot appear inside any if () blocks,\n:: or there will be a parsing error.\n\n:: All env. vars specified in this file are to be local only to this script.\n@setlocal\n:: -E will not ignore _PYTHON_SYSCONFIGDATA_NAME an internal\n:: of cpython used in cross compilation via setup.py.\n@set _PYTHON_SYSCONFIGDATA_NAME=\n@set EM_PY=%EMSDK_PYTHON%\n@if \"%EM_PY%\"==\"\" (\n  set EM_PY=python\n)\n\n:: Work around Windows bug https://github.com/microsoft/terminal/issues/15212 : If this\n:: script is invoked via enclosing the invocation in quotes via PATH lookup, then %~f0 and\n:: %~dp0 expansions will not work.\n:: So first try if %~dp0 might work, and if not, manually look up this script from PATH.\n@if exist \"%~f0\" (\n  set MYDIR=%~dp0\n  goto FOUND_MYDIR\n)\n@for %%I in (%~n0.bat) do (\n  @if exist %%~$PATH:I (\n    set MYDIR=%%~dp$PATH:I\n  ) else (\n    echo Fatal Error! Due to a Windows bug, we are unable to locate the path to %~n0.bat.\n    echo To help this issue, try removing unnecessary quotes in the invocation of emcc,\n    echo or add Emscripten directory to PATH.\n    echo See github.com/microsoft/terminal/issues/15212 and\n    echo github.com/emscripten-core/emscripten/issues/19207 for more details.\n  )\n)\n:FOUND_MYDIR\n\n:: Python Windows bug https://bugs.python.org/issue34780: If this script was invoked via a\n:: shared stdin handle from the parent process, and that parent process stdin handle is in\n:: a certain state, running python.exe might hang here. To work around this, if\n:: EM_WORKAROUND_PYTHON_BUG_34780 is defined, invoke python with '< NUL' stdin to avoid\n:: sharing the parent's stdin handle to it, avoiding the hang.\n\n:: On Windows 7, the compiler batch scripts are observed to exit with a non-zero errorlevel,\n:: even when the python executable above did succeed and quit with errorlevel 0 above.\n:: On Windows 8 and newer, this issue has not been observed. It is possible that this\n:: issue is related to the above python bug, but this has not been conclusively confirmed,\n:: so using a separate env. var EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG to enable the known\n:: workaround this issue, which is to explicitly quit the calling process with the previous\n:: errorlevel from the above command.\n\n:: Also must use goto to jump to the command dispatch, since we cannot invoke emcc from\n:: inside a if() block, because if a cmdline param would contain a char '(' or ')', that\n:: would throw off the parsing of the cmdline arg.\n@if \"%EM_WORKAROUND_PYTHON_BUG_34780%\"==\"\" (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto NORMAL\n  ) else (\n    goto NORMAL_EXIT\n  )\n) else (\n  @if \"%EM_WORKAROUND_WIN7_BAD_ERRORLEVEL_BUG%\"==\"\" (\n    goto MUTE_STDIN\n  ) else (\n    goto MUTE_STDIN_EXIT\n  )\n)\n\n:NORMAL_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n@exit %ERRORLEVEL%\n\n:MUTE_STDIN\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit /b %ERRORLEVEL%\n\n:MUTE_STDIN_EXIT\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %* < NUL\n@exit %ERRORLEVEL%\n\n:NORMAL\n@\"%EM_PY%\" -E \"%MYDIR%%~n0.py\" %*\n"
        },
        {
          "name": "emsymbolizer.py",
          "type": "blob",
          "size": 8.451171875,
          "content": "#!/usr/bin/env python3\n\n# This is a utility for looking up the symbol names and/or file+line numbers\n# of code addresses. There are several possible sources of this information,\n# with varying granularity (listed here in approximate preference order).\n\n# If the wasm has DWARF info, llvm-symbolizer can show the symbol, file, and\n# line/column number, potentially including inlining.\n# If the wasm has separate DWARF info, do the above with the side file\n# If there is a source map, we can parse it to get file and line number.\n# If there is an emscripten symbol map, we can use that to get the symbol name\n# If there is a name section or symbol table, llvm-symbolizer can show the\n#  symbol name.\n# Separate DWARF and emscripten symbol maps are not supported yet.\n\nimport argparse\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nfrom tools import shared\nfrom tools import webassembly\n\nLLVM_SYMBOLIZER = os.path.expanduser(\n    shared.build_llvm_tool_path(shared.exe_suffix('llvm-symbolizer')))\n\n\nclass Error(BaseException):\n  pass\n\n\n# Class to treat location info in a uniform way across information sources.\nclass LocationInfo(object):\n  def __init__(self, source=None, line=0, column=0, func=None):\n    self.source = source\n    self.line = line\n    self.column = column\n    self.func = func\n\n  def print(self):\n    source = self.source if self.source else '??'\n    func = self.func if self.func else '??'\n    print(f'{func}\\n{source}:{self.line}:{self.column}')\n\n\ndef get_codesec_offset(module):\n  sec = module.get_section(webassembly.SecType.CODE)\n  if not sec:\n    raise Error(f'No code section found in {module.filename}')\n  return sec.offset\n\n\ndef has_debug_line_section(module):\n  return module.get_custom_section('.debug_line') is not None\n\n\ndef has_name_section(module):\n  return module.get_custom_section('name') is not None\n\n\ndef has_linking_section(module):\n  return module.get_custom_section('linking') is not None\n\n\ndef symbolize_address_symbolizer(module, address, is_dwarf):\n  if is_dwarf:\n    vma_adjust = get_codesec_offset(module)\n  else:\n    vma_adjust = 0\n  cmd = [LLVM_SYMBOLIZER, '-e', module.filename, f'--adjust-vma={vma_adjust}',\n         str(address)]\n  out = shared.run_process(cmd, stdout=subprocess.PIPE).stdout.strip()\n  out_lines = out.splitlines()\n\n  # Source location regex, e.g., /abc/def.c:3:5\n  SOURCE_LOC_RE = re.compile(r'(.+):(\\d+):(\\d+)$')\n  # llvm-symbolizer prints two lines per location. The first line contains a\n  # function name, and the second contains a source location like\n  # '/abc/def.c:3:5'. If the function or source info is not available, it will\n  # be printed as '??', in which case we store None. If the line and column info\n  # is not available, they will be printed as 0, which we store as is.\n  for i in range(0, len(out_lines), 2):\n    func, loc_str = out_lines[i], out_lines[i + 1]\n    m = SOURCE_LOC_RE.match(loc_str)\n    source, line, column = m.group(1), m.group(2), m.group(3)\n    if func == '??':\n      func = None\n    if source == '??':\n      source = None\n    LocationInfo(source, line, column, func).print()\n\n\ndef get_sourceMappingURL_section(module):\n  for sec in module.sections():\n    if sec.name == \"sourceMappingURL\":\n      return sec\n  return None\n\n\nclass WasmSourceMap(object):\n  class Location(object):\n    def __init__(self, source=None, line=0, column=0, func=None):\n      self.source = source\n      self.line = line\n      self.column = column\n      self.func = func\n\n  def __init__(self):\n    self.version = None\n    self.sources = []\n    self.mappings = {}\n    self.offsets = []\n\n  def parse(self, filename):\n    with open(filename) as f:\n      source_map_json = json.loads(f.read())\n      if shared.DEBUG:\n        print(source_map_json)\n\n    self.version = source_map_json['version']\n    self.sources = source_map_json['sources']\n\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    vlq_map = {c: i for i, c in enumerate(chars)}\n\n    def decodeVLQ(string):\n      result = []\n      shift = 0\n      value = 0\n      for c in string:\n        try:\n          integer = vlq_map[c]\n        except ValueError:\n          raise Error(f'Invalid character ({c}) in VLQ')\n        value += (integer & 31) << shift\n        if integer & 32:\n          shift += 5\n        else:\n          negate = value & 1\n          value >>= 1\n          result.append(-value if negate else value)\n          value = shift = 0\n      return result\n\n    offset = 0\n    src = 0\n    line = 1\n    col = 1\n    for segment in source_map_json['mappings'].split(','):\n      data = decodeVLQ(segment)\n      info = []\n\n      offset += data[0]\n      if len(data) >= 2:\n        src += data[1]\n        info.append(src)\n      if len(data) >= 3:\n        line += data[2]\n        info.append(line)\n      if len(data) >= 4:\n        col += data[3]\n        info.append(col)\n      # TODO: see if we need the name, which is the next field (data[4])\n\n      self.mappings[offset] = WasmSourceMap.Location(*info)\n      self.offsets.append(offset)\n    self.offsets.sort()\n\n  def find_offset(self, offset):\n    # Find the largest mapped offset <= the search offset\n    lo = 0\n    hi = len(self.offsets)\n\n    while lo < hi:\n      mid = (lo + hi) // 2\n      if self.offsets[mid] > offset:\n        hi = mid\n      else:\n        lo = mid + 1\n    return self.offsets[lo - 1]\n\n  def lookup(self, offset):\n    nearest = self.find_offset(offset)\n    assert nearest in self.mappings, 'Sourcemap has an offset with no mapping'\n    info = self.mappings[nearest]\n    return LocationInfo(\n        self.sources[info.source] if info.source is not None else None,\n        info.line,\n        info.column\n      )\n\n\ndef symbolize_address_sourcemap(module, address, force_file):\n  URL = force_file\n  if not URL:\n    # If a sourcemap file is not forced, read it from the wasm module\n    section = get_sourceMappingURL_section(module)\n    assert section\n    module.seek(section.offset)\n    assert module.read_string() == 'sourceMappingURL'\n    # TODO: support stripping/replacing a prefix from the URL\n    URL = module.read_string()\n\n  if shared.DEBUG:\n    print(f'Source Mapping URL: {URL}')\n  sm = WasmSourceMap()\n  sm.parse(URL)\n  if shared.DEBUG:\n    csoff = get_codesec_offset(module)\n    print(sm.mappings)\n    # Print with section offsets to easily compare against dwarf\n    for k, v in sm.mappings.items():\n      print(f'{k-csoff:x}: {v}')\n  sm.lookup(address).print()\n\n\ndef main(args):\n  with webassembly.Module(args.wasm_file) as module:\n    base = 16 if args.address.lower().startswith('0x') else 10\n    address = int(args.address, base)\n\n    if args.addrtype == 'code':\n      address += get_codesec_offset(module)\n\n    if ((has_debug_line_section(module) and not args.source) or\n       'dwarf' in args.source):\n      symbolize_address_symbolizer(module, address, is_dwarf=True)\n    elif ((get_sourceMappingURL_section(module) and not args.source) or\n          'sourcemap' in args.source):\n      symbolize_address_sourcemap(module, address, args.file)\n    elif ((has_name_section(module) and not args.source) or\n          'names' in args.source):\n      symbolize_address_symbolizer(module, address, is_dwarf=False)\n    elif ((has_linking_section(module) and not args.source) or\n          'symtab' in args.source):\n      symbolize_address_symbolizer(module, address, is_dwarf=False)\n    else:\n      raise Error('No .debug_line or sourceMappingURL section found in '\n                  f'{module.filename}.'\n                  \" I don't know how to symbolize this file yet\")\n\n\ndef get_args():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-s', '--source', choices=['dwarf', 'sourcemap',\n                                                 'names', 'symtab'],\n                      help='Force debug info source type', default=())\n  parser.add_argument('-f', '--file', action='store',\n                      help='Force debug info source file')\n  parser.add_argument('-t', '--addrtype', choices=['code', 'file'],\n                      default='file',\n                      help='Address type (code section or file offset)')\n  parser.add_argument('-v', '--verbose', action='store_true',\n                      help='Print verbose info for debugging this script')\n  parser.add_argument('wasm_file', help='Wasm file')\n  parser.add_argument('address', help='Address to lookup')\n  args = parser.parse_args()\n  if args.verbose:\n    shared.PRINT_SUBPROCS = 1\n    shared.DEBUG = True\n  return args\n\n\nif __name__ == '__main__':\n  try:\n    rv = main(get_args())\n  except (Error, webassembly.InvalidWasmError, OSError) as e:\n    print(f'{sys.argv[0]}: {str(e)}', file=sys.stderr)\n    rv = 1\n  sys.exit(rv)\n"
        },
        {
          "name": "eslint.config.mjs",
          "type": "blob",
          "size": 2.03515625,
          "content": "import globals from 'globals';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport js from '@eslint/js';\nimport { FlatCompat } from '@eslint/eslintrc';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n  allConfig: js.configs.all\n});\n\nexport default [{\n  ignores: [\n    '**/out/',\n    '**/site/',\n    '**/cache/',\n    '**/third_party/',\n    '**/test/',\n    'src/polyfill/',\n    'src/library*.js',\n    'src/runtime_*.js',\n    'src/shell*.js',\n    'src/preamble*.js',\n    'src/postamble*.js',\n    'src/closure-externs/',\n    'src/embind/',\n    'src/emrun_postjs.js',\n    'src/wasm_worker.js',\n    'src/audio_worklet.js',\n    'src/wasm2js.js',\n    'src/webGLClient.js',\n    'src/webGLWorker.js',\n    'src/*_shell_read.js',\n    'src/wasm_offset_converter.js',\n    'src/threadprofiler.js',\n    'src/cpuprofiler.js',\n    'src/memoryprofiler.js',\n    'src/gl-matrix.js',\n    'src/headless.js',\n    'src/headlessCanvas.js',\n    'src/emscripten-source-map.min.js',\n    'src/source_map_support.js',\n    'src/Fetch.js',\n    'src/settings.js',\n    'src/settings_internal.js',\n    'src/arrayUtils.js',\n    'src/deterministic.js',\n    'src/base64Decode.js',\n    'src/proxyWorker.js',\n    'src/proxyClient.js',\n    'src/IDBStore.js',\n    'src/URIUtils.js',\n    'tools/experimental',\n  ],\n}, ...compat.extends('prettier'), {\n  languageOptions: {\n    globals: {\n      ...globals.browser,\n      ...globals.node,\n    },\n\n    ecmaVersion: 13,\n    sourceType: 'module',\n  },\n\n  rules: {\n    'max-len': 'off',\n    'no-multi-spaces': 'off',\n    'require-jsdoc': 'off',\n    'arrow-body-style': ['error', 'as-needed'],\n    'space-infix-ops': 'error',\n\n    quotes: ['error', 'single', {\n      avoidEscape: true,\n    }],\n  },\n}, {\n  files: ['**/*.mjs'],\n\n  rules: {\n    'no-unused-vars': ['error', {\n      vars: 'all',\n      args: 'none',\n      ignoreRestSiblings: false,\n      destructuredArrayIgnorePattern: '^_',\n    }],\n  },\n}];\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 341.8359375,
          "content": "{\n  \"name\": \"emscripten\",\n  \"lockfileVersion\": 2,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"dependencies\": {\n        \"@babel/cli\": \"^7.26.4\",\n        \"@babel/core\": \"^7.26.0\",\n        \"@babel/preset-env\": \"^7.26.0\",\n        \"acorn\": \"^8.14.0\",\n        \"google-closure-compiler\": \"20240317.0.0\",\n        \"html-minifier-terser\": \"7.2.0\"\n      },\n      \"devDependencies\": {\n        \"@eslint/eslintrc\": \"^3.2.0\",\n        \"@eslint/js\": \"^9.17.0\",\n        \"es-check\": \"^7.2.1\",\n        \"eslint\": \"^9.17.0\",\n        \"eslint-config-prettier\": \"^9.1.0\",\n        \"globals\": \"^15.14.0\",\n        \"prettier\": \"^3.4.2\",\n        \"source-map\": \"0.7.4\",\n        \"typescript\": \"^5.7.2\",\n        \"webpack\": \"^5.97.1\",\n        \"webpack-cli\": \"^6.0.1\",\n        \"ws\": \"^8.18.0\"\n      }\n    },\n    \"node_modules/@aashutoshrathi/word-wrap\": {\n      \"version\": \"1.2.6\",\n      \"resolved\": \"https://registry.npmjs.org/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz\",\n      \"integrity\": \"sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/@ampproject/remapping\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz\",\n      \"integrity\": \"sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==\",\n      \"dependencies\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.0\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@babel/cli\": {\n      \"version\": \"7.26.4\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.26.4.tgz\",\n      \"integrity\": \"sha512-+mORf3ezU3p3qr+82WvJSnQNE1GAYeoCfEv4fik6B5/2cvKZ75AX8oawWQdXtM9MmndooQj15Jr9kelRFWsuRw==\",\n      \"dependencies\": {\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n        \"commander\": \"^6.2.0\",\n        \"convert-source-map\": \"^2.0.0\",\n        \"fs-readdir-recursive\": \"^1.1.0\",\n        \"glob\": \"^7.2.0\",\n        \"make-dir\": \"^2.1.0\",\n        \"slash\": \"^2.0.0\"\n      },\n      \"bin\": {\n        \"babel\": \"bin/babel.js\",\n        \"babel-external-helpers\": \"bin/babel-external-helpers.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"optionalDependencies\": {\n        \"@nicolo-ribaudo/chokidar-2\": \"2.1.8-no-fsevents.3\",\n        \"chokidar\": \"^3.6.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/code-frame\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz\",\n      \"integrity\": \"sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==\",\n      \"dependencies\": {\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"js-tokens\": \"^4.0.0\",\n        \"picocolors\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/compat-data\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.3.tgz\",\n      \"integrity\": \"sha512-nHIxvKPniQXpmQLb0vhY3VaFb3S0YrTAwpOWJZh1wn3oJPjJk9Asva204PsBdmAE8vpzfHudT8DB0scYvy9q0g==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/core\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/core/-/core-7.26.0.tgz\",\n      \"integrity\": \"sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==\",\n      \"dependencies\": {\n        \"@ampproject/remapping\": \"^2.2.0\",\n        \"@babel/code-frame\": \"^7.26.0\",\n        \"@babel/generator\": \"^7.26.0\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\n        \"@babel/helpers\": \"^7.26.0\",\n        \"@babel/parser\": \"^7.26.0\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\",\n        \"convert-source-map\": \"^2.0.0\",\n        \"debug\": \"^4.1.0\",\n        \"gensync\": \"^1.0.0-beta.2\",\n        \"json5\": \"^2.2.3\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/babel\"\n      }\n    },\n    \"node_modules/@babel/core/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/@babel/generator\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.26.3.tgz\",\n      \"integrity\": \"sha512-6FF/urZvD0sTeO7k6/B15pMLC4CHUv1426lzr3N01aHJTl046uCAh9LXW/fzeXXjPNCJ6iABW5XaWOsIZB93aQ==\",\n      \"dependencies\": {\n        \"@babel/parser\": \"^7.26.3\",\n        \"@babel/types\": \"^7.26.3\",\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n        \"jsesc\": \"^3.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-annotate-as-pure\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.25.9.tgz\",\n      \"integrity\": \"sha512-gv7320KBUFJz1RnylIg5WWYPRXKZ884AGkYpgpWW02TH66Dl+HaC1t1CKd0z3R4b6hdYEcmrNZHUmfCP+1u3/g==\",\n      \"dependencies\": {\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-compilation-targets\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.9.tgz\",\n      \"integrity\": \"sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==\",\n      \"dependencies\": {\n        \"@babel/compat-data\": \"^7.25.9\",\n        \"@babel/helper-validator-option\": \"^7.25.9\",\n        \"browserslist\": \"^4.24.0\",\n        \"lru-cache\": \"^5.1.1\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-compilation-targets/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/@babel/helper-create-class-features-plugin\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.25.9.tgz\",\n      \"integrity\": \"sha512-UTZQMvt0d/rSz6KI+qdu7GQze5TIajwTS++GUozlw8VBJDEOAqSXwm1WvmYEZwqdqSGQshRocPDqrt4HBZB3fQ==\",\n      \"dependencies\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-member-expression-to-functions\": \"^7.25.9\",\n        \"@babel/helper-optimise-call-expression\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-create-class-features-plugin/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/@babel/helper-create-regexp-features-plugin\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.26.3.tgz\",\n      \"integrity\": \"sha512-G7ZRb40uUgdKOQqPLjfD12ZmGA54PzqDFUv2BKImnC9QIfGhIHKvVML0oN8IUiDq4iRqpq74ABpvOaerfWdong==\",\n      \"dependencies\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"regexpu-core\": \"^6.2.0\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/@babel/helper-define-polyfill-provider\": {\n      \"version\": \"0.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.2.tgz\",\n      \"integrity\": \"sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==\",\n      \"dependencies\": {\n        \"@babel/helper-compilation-targets\": \"^7.22.6\",\n        \"@babel/helper-plugin-utils\": \"^7.22.5\",\n        \"debug\": \"^4.1.1\",\n        \"lodash.debounce\": \"^4.0.8\",\n        \"resolve\": \"^1.14.2\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.4.0 || ^8.0.0-0 <8.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-member-expression-to-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-wbfdZ9w5vk0C0oyHqAJbc62+vet5prjj01jjJ8sKn3j9h3MQQlflEdXYvuqRWjHnM12coDEqiC1IRCi0U/EKwQ==\",\n      \"dependencies\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-module-imports\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz\",\n      \"integrity\": \"sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==\",\n      \"dependencies\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-module-transforms\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz\",\n      \"integrity\": \"sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==\",\n      \"dependencies\": {\n        \"@babel/helper-module-imports\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-optimise-call-expression\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.25.9.tgz\",\n      \"integrity\": \"sha512-FIpuNaz5ow8VyrYcnXQTDRGvV6tTjkNtCK/RYNDXGSLlUD6cBuQTSw43CShGxjvfBTfcUA/r6UhUCbtYqkhcuQ==\",\n      \"dependencies\": {\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-plugin-utils\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.9.tgz\",\n      \"integrity\": \"sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-remap-async-to-generator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.25.9.tgz\",\n      \"integrity\": \"sha512-IZtukuUeBbhgOcaW2s06OXTzVNJR0ybm4W5xC1opWFFJMZbwRj5LCk+ByYH7WdZPZTt8KnFwA8pvjN2yqcPlgw==\",\n      \"dependencies\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-wrap-function\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-replace-supers\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.25.9.tgz\",\n      \"integrity\": \"sha512-IiDqTOTBQy0sWyeXyGSC5TBJpGFXBkRynjBeXsvbhQFKj2viwJC76Epz35YLU1fpe/Am6Vppb7W7zM4fPQzLsQ==\",\n      \"dependencies\": {\n        \"@babel/helper-member-expression-to-functions\": \"^7.25.9\",\n        \"@babel/helper-optimise-call-expression\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/helper-skip-transparent-expression-wrappers\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.25.9.tgz\",\n      \"integrity\": \"sha512-K4Du3BFa3gvyhzgPcntrkDgZzQaq6uozzcpGbOO1OEJaI+EJdqWIMTLgFgQf6lrfiDFo5FU+BxKepI9RmZqahA==\",\n      \"dependencies\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-string-parser\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz\",\n      \"integrity\": \"sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-validator-identifier\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz\",\n      \"integrity\": \"sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-validator-option\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz\",\n      \"integrity\": \"sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-wrap-function\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.25.9.tgz\",\n      \"integrity\": \"sha512-ETzz9UTjQSTmw39GboatdymDq4XIQbR8ySgVrylRhPOFpsd+JrKHIuF0de7GCWmem+T4uC5z7EZguod7Wj4A4g==\",\n      \"dependencies\": {\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helpers\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.0.tgz\",\n      \"integrity\": \"sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==\",\n      \"dependencies\": {\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/parser\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.26.3.tgz\",\n      \"integrity\": \"sha512-WJ/CvmY8Mea8iDXo6a7RK2wbmJITT5fN3BEkRuFlxVyNx8jOKIIhmC4fSkTcPcf8JyavbBwIe6OpiCOBXt/IcA==\",\n      \"dependencies\": {\n        \"@babel/types\": \"^7.26.3\"\n      },\n      \"bin\": {\n        \"parser\": \"bin/babel-parser.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.9.tgz\",\n      \"integrity\": \"sha512-ZkRyVkThtxQ/J6nv3JFYv1RYY+JT5BvU0y3k5bWrmuG4woXypRa4PXmm9RhOwodRkYFWqC0C0cqcJ4OqR7kW+g==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.25.9.tgz\",\n      \"integrity\": \"sha512-MrGRLZxLD/Zjj0gdU15dfs+HH/OXvnw/U4jJD8vpcP2CJQapPEv1IWwjc/qMg7ItBlPwSv1hRBbb7LeuANdcnw==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.25.9.tgz\",\n      \"integrity\": \"sha512-2qUwwfAFpJLZqxd02YW9btUCZHl+RFvdDkNfZwaIJrvB8Tesjsk8pEQkTvGwZXLqXUx/2oyY3ySRhm6HOXuCug==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.25.9.tgz\",\n      \"integrity\": \"sha512-6xWgLZTJXwilVjlnV7ospI3xi+sl8lN8rXXbBD6vYn3UYDlGsag8wrZkKcSI8G6KgqKP7vNFaDgeDnfAABq61g==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-chaining\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.13.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.25.9.tgz\",\n      \"integrity\": \"sha512-aLnMXYPnzwwqhYSCyXfKkIkYgJ8zv9RK+roo9DkTXz38ynIhd9XCbN08s3MGvqL2MYGVUGdRQLL/JqBIeJhJBg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-proposal-private-property-in-object\": {\n      \"version\": \"7.21.0-placeholder-for-preset-env.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz\",\n      \"integrity\": \"sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-syntax-import-assertions\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.26.0.tgz\",\n      \"integrity\": \"sha512-QCWT5Hh830hK5EQa7XzuqIkQU9tT/whqbDz7kuaZMHFl1inRRg7JnuAEOQ0Ur0QUl0NufCk1msK2BeY79Aj/eg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-syntax-import-attributes\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.26.0.tgz\",\n      \"integrity\": \"sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-syntax-unicode-sets-regex\": {\n      \"version\": \"7.18.6\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz\",\n      \"integrity\": \"sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.18.6\",\n        \"@babel/helper-plugin-utils\": \"^7.18.6\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-arrow-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-6jmooXYIwn9ca5/RylZADJ+EnSxVUS5sjeJ9UPk6RWRzXCmOJCy6dqItPJFpw2cuCangPK4OYr5uhGKcmrm5Qg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-async-generator-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-RXV6QAzTBbhDMO9fWwOmwwTuYaiPbggWQ9INdZqAYeSHyG7FzQ+nOZaUUjNwKv9pV3aE4WFqFm1Hnbci5tBCAw==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-remap-async-to-generator\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-async-to-generator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.25.9.tgz\",\n      \"integrity\": \"sha512-NT7Ejn7Z/LjUH0Gv5KsBCxh7BH3fbLTV0ptHvpeMvrt3cPThHfJfst9Wrb7S8EvJ7vRTFI7z+VAvFVEQn/m5zQ==\",\n      \"dependencies\": {\n        \"@babel/helper-module-imports\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-remap-async-to-generator\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-block-scoped-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-toHc9fzab0ZfenFpsyYinOX0J/5dgJVA2fm64xPewu7CoYHWEivIWKxkK2rMi4r3yQqLnVmheMXRdG+k239CgA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-block-scoping\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.25.9.tgz\",\n      \"integrity\": \"sha512-1F05O7AYjymAtqbsFETboN1NvBdcnzMerO+zlMyJBEz6WkMdejvGWw9p05iTSjC85RLlBseHHQpYaM4gzJkBGg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-class-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-bbMAII8GRSkcd0h0b4X+36GksxuheLFjP65ul9w6C3KgAamI3JqErNgSrosX6ZPj+Mpim5VvEbawXxJCyEUV3Q==\",\n      \"dependencies\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-class-static-block\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.26.0.tgz\",\n      \"integrity\": \"sha512-6J2APTs7BDDm+UMqP1useWqhcRAXo0WIoVj26N7kPFB6S73Lgvyka4KTZYIxtgYXiN5HTyRObA72N2iu628iTQ==\",\n      \"dependencies\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.12.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-classes\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.25.9.tgz\",\n      \"integrity\": \"sha512-mD8APIXmseE7oZvZgGABDyM34GUmK45Um2TXiBUt7PnuAxrgoSVf123qUzPxEr/+/BHrRn5NMZCdE2m/1F8DGg==\",\n      \"dependencies\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"globals\": \"^11.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-classes/node_modules/globals\": {\n      \"version\": \"11.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-11.12.0.tgz\",\n      \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-computed-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-HnBegGqXZR12xbcTHlJ9HGxw1OniltT26J5YpfruGqtUHlz/xKf/G2ak9e+t0rVqrjXa9WOhvYPz1ERfMj23AA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/template\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-destructuring\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.25.9.tgz\",\n      \"integrity\": \"sha512-WkCGb/3ZxXepmMiX101nnGiU+1CAdut8oHyEOHxkKuS1qKpU2SMXE2uSvfz8PBuLd49V6LEsbtyPhWC7fnkgvQ==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-dotall-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-t7ZQ7g5trIgSRYhI9pIJtRl64KHotutUJsh4Eze5l7olJv+mRSg4/MmbZ0tv1eeqRbdvo/+trvJD/Oc5DmW2cA==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-duplicate-keys\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.25.9.tgz\",\n      \"integrity\": \"sha512-LZxhJ6dvBb/f3x8xwWIuyiAHy56nrRG3PeYTpBkkzkYRRQ6tJLu68lEF5VIqMUZiAV7a8+Tb78nEoMCMcqjXBw==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-0UfuJS0EsXbRvKnwcLjFtJy/Sxc5J5jhLHnFhy7u4zih97Hz6tJkLU+O+FMMrNZrosUPxDi6sYxJ/EA8jDiAog==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-dynamic-import\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.25.9.tgz\",\n      \"integrity\": \"sha512-GCggjexbmSLaFhqsojeugBpeaRIgWNTcgKVq/0qIteFEqY2A+b9QidYadrWlnbWQUrW5fn+mCvf3tr7OeBFTyg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-exponentiation-operator\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.26.3.tgz\",\n      \"integrity\": \"sha512-7CAHcQ58z2chuXPWblnn1K6rLDnDWieghSOEmqQsrBenH0P9InCUtOJYD89pvngljmZlJcz3fcmgYsXFNGa1ZQ==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-export-namespace-from\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.25.9.tgz\",\n      \"integrity\": \"sha512-2NsEz+CxzJIVOPx2o9UsW1rXLqtChtLoVnwYHHiB04wS5sgn7mrV45fWMBX0Kk+ub9uXytVYfNP2HjbVbCB3Ww==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-for-of\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.25.9.tgz\",\n      \"integrity\": \"sha512-LqHxduHoaGELJl2uhImHwRQudhCM50pT46rIBNvtT/Oql3nqiS3wOwP+5ten7NpYSXrrVLgtZU3DZmPtWZo16A==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-function-name\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.25.9.tgz\",\n      \"integrity\": \"sha512-8lP+Yxjv14Vc5MuWBpJsoUCd3hD6V9DgBon2FVYL4jJgbnVQ9fTgYmonchzZJOVNgzEgbxp4OwAf6xz6M/14XA==\",\n      \"dependencies\": {\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-json-strings\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.25.9.tgz\",\n      \"integrity\": \"sha512-xoTMk0WXceiiIvsaquQQUaLLXSW1KJ159KP87VilruQm0LNNGxWzahxSS6T6i4Zg3ezp4vA4zuwiNUR53qmQAw==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-9N7+2lFziW8W9pBl2TzaNht3+pgMIRP74zizeCSrtnSKVdUl8mAjjOP2OOVQAfZ881P2cNjDj1uAMEdeD50nuQ==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-logical-assignment-operators\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.25.9.tgz\",\n      \"integrity\": \"sha512-wI4wRAzGko551Y8eVf6iOY9EouIDTtPb0ByZx+ktDGHwv6bHFimrgJM/2T021txPZ2s4c7bqvHbd+vXG6K948Q==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-member-expression-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-PYazBVfofCQkkMzh2P6IdIUaCEWni3iYEerAsRWuVd8+jlM1S9S9cz1dF9hIzyoZ8IA3+OwVYIp9v9e+GbgZhA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-modules-amd\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.25.9.tgz\",\n      \"integrity\": \"sha512-g5T11tnI36jVClQlMlt4qKDLlWnG5pP9CSM4GhdRciTNMRgkfpo5cR6b4rGIOYPgRRuFAvwjPQ/Yk+ql4dyhbw==\",\n      \"dependencies\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-modules-commonjs\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.26.3.tgz\",\n      \"integrity\": \"sha512-MgR55l4q9KddUDITEzEFYn5ZsGDXMSsU9E+kh7fjRXTIC3RHqfCo8RPRbyReYJh44HQ/yomFkqbOFohXvDCiIQ==\",\n      \"dependencies\": {\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-modules-systemjs\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.25.9.tgz\",\n      \"integrity\": \"sha512-hyss7iIlH/zLHaehT+xwiymtPOpsiwIIRlCAOwBB04ta5Tt+lNItADdlXw3jAWZ96VJ2jlhl/c+PNIQPKNfvcA==\",\n      \"dependencies\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-modules-umd\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.25.9.tgz\",\n      \"integrity\": \"sha512-bS9MVObUgE7ww36HEfwe6g9WakQ0KF07mQF74uuXdkoziUPfKyu/nIm663kz//e5O1nPInPFx36z7WJmJ4yNEw==\",\n      \"dependencies\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-named-capturing-groups-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-oqB6WHdKTGl3q/ItQhpLSnWWOpjUJLsOCLVyeFgeTktkBSCiurvPOsyt93gibI9CmuKvTUEtWmG5VhZD+5T/KA==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-new-target\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.25.9.tgz\",\n      \"integrity\": \"sha512-U/3p8X1yCSoKyUj2eOBIx3FOn6pElFOKvAAGf8HTtItuPyB+ZeOqfn+mvTtg9ZlOAjsPdK3ayQEjqHjU/yLeVQ==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-nullish-coalescing-operator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.25.9.tgz\",\n      \"integrity\": \"sha512-ENfftpLZw5EItALAD4WsY/KUWvhUlZndm5GC7G3evUsVeSJB6p0pBeLQUnRnBCBx7zV0RKQjR9kCuwrsIrjWog==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-numeric-separator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.25.9.tgz\",\n      \"integrity\": \"sha512-TlprrJ1GBZ3r6s96Yq8gEQv82s8/5HnCVHtEJScUj90thHQbwe+E5MLhi2bbNHBEJuzrvltXSru+BUxHDoog7Q==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-object-rest-spread\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.25.9.tgz\",\n      \"integrity\": \"sha512-fSaXafEE9CVHPweLYw4J0emp1t8zYTXyzN3UuG+lylqkvYd7RMrsOQ8TYx5RF231be0vqtFC6jnx3UmpJmKBYg==\",\n      \"dependencies\": {\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/plugin-transform-parameters\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-object-super\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.25.9.tgz\",\n      \"integrity\": \"sha512-Kj/Gh+Rw2RNLbCK1VAWj2U48yxxqL2x0k10nPtSdRa0O2xnHXalD0s+o1A6a0W43gJ00ANo38jxkQreckOzv5A==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-optional-catch-binding\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.25.9.tgz\",\n      \"integrity\": \"sha512-qM/6m6hQZzDcZF3onzIhZeDHDO43bkNNlOX0i8n3lR6zLbu0GN2d8qfM/IERJZYauhAHSLHy39NF0Ctdvcid7g==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-optional-chaining\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.25.9.tgz\",\n      \"integrity\": \"sha512-6AvV0FsLULbpnXeBjrY4dmWF8F7gf8QnvTEoO/wX/5xm/xE1Xo8oPuD3MPS+KS9f9XBEAWN7X1aWr4z9HdOr7A==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-parameters\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.25.9.tgz\",\n      \"integrity\": \"sha512-wzz6MKwpnshBAiRmn4jR8LYz/g8Ksg0o80XmwZDlordjwEk9SxBzTWC7F5ef1jhbrbOW2DJ5J6ayRukrJmnr0g==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-private-methods\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.25.9.tgz\",\n      \"integrity\": \"sha512-D/JUozNpQLAPUVusvqMxyvjzllRaF8/nSrP1s2YGQT/W4LHK4xxsMcHjhOGTS01mp9Hda8nswb+FblLdJornQw==\",\n      \"dependencies\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-private-property-in-object\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.25.9.tgz\",\n      \"integrity\": \"sha512-Evf3kcMqzXA3xfYJmZ9Pg1OvKdtqsDMSWBDzZOPLvHiTt36E75jLDQo5w1gtRU95Q4E5PDttrTf25Fw8d/uWLw==\",\n      \"dependencies\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-property-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-IvIUeV5KrS/VPavfSM/Iu+RE6llrHrYIKY1yfCzyO/lMXHQ+p7uGhonmGVisv6tSBSVgWzMBohTcvkC9vQcQFA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-regenerator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.25.9.tgz\",\n      \"integrity\": \"sha512-vwDcDNsgMPDGP0nMqzahDWE5/MLcX8sv96+wfX7as7LoF/kr97Bo/7fI00lXY4wUXYfVmwIIyG80fGZ1uvt2qg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"regenerator-transform\": \"^0.15.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-regexp-modifiers\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.26.0.tgz\",\n      \"integrity\": \"sha512-vN6saax7lrA2yA/Pak3sCxuD6F5InBjn9IcrIKQPjpsLvuHYLVroTxjdlVRHjjBWxKOqIwpTXDkOssYT4BFdRw==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-reserved-words\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.25.9.tgz\",\n      \"integrity\": \"sha512-7DL7DKYjn5Su++4RXu8puKZm2XBPHyjWLUidaPEkCUBbE7IPcsrkRHggAOOKydH1dASWdcUBxrkOGNxUv5P3Jg==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-shorthand-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-MUv6t0FhO5qHnS/W8XCbHmiRWOphNufpE1IVxhK5kuN3Td9FT1x4rx4K42s3RYdMXCXpfWkGSbCSd0Z64xA7Ng==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-spread\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.25.9.tgz\",\n      \"integrity\": \"sha512-oNknIB0TbURU5pqJFVbOOFspVlrpVwo2H1+HUIsVDvp5VauGGDP1ZEvO8Nn5xyMEs3dakajOxlmkNW7kNgSm6A==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-sticky-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-WqBUSgeVwucYDP9U/xNRQam7xV8W5Zf+6Eo7T2SRVUFlhRiMNFdFz58u0KZmCVVqs2i7SHgpRnAhzRNmKfi2uA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-template-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-o97AE4syN71M/lxrCtQByzphAdlYluKPDBzDVzMmfCobUjjhAryZV0AIpRPrxN0eAkxXO6ZLEScmt+PNhj2OTw==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-typeof-symbol\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.25.9.tgz\",\n      \"integrity\": \"sha512-v61XqUMiueJROUv66BVIOi0Fv/CUuZuZMl5NkRoCVxLAnMexZ0A3kMe7vvZ0nulxMuMp0Mk6S5hNh48yki08ZA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-unicode-escapes\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.25.9.tgz\",\n      \"integrity\": \"sha512-s5EDrE6bW97LtxOcGj1Khcx5AaXwiMmi4toFWRDP9/y0Woo6pXC+iyPu/KuhKtfSrNFd7jJB+/fkOtZy6aIC6Q==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-unicode-property-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-Jt2d8Ga+QwRluxRQ307Vlxa6dMrYEMZCgGxoPR8V52rxPyldHu3hdlHspxaqYmE7oID5+kB+UKUB/eWS+DkkWg==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-unicode-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-yoxstj7Rg9dlNn9UQxzk4fcNivwv4nUYz7fYXBaKxvw/lnmPuOm/ikoELygbYq68Bls3D/D+NBPHiLwZdZZ4HA==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/plugin-transform-unicode-sets-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-8BYqO3GeVNHtx69fdPshN3fnzUNLrWdHhk/icSwigksJGczKSizZ+Z6SBCxTs723Fr5VSNorTIK7a+R2tISvwQ==\",\n      \"dependencies\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0\"\n      }\n    },\n    \"node_modules/@babel/preset-env\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.26.0.tgz\",\n      \"integrity\": \"sha512-H84Fxq0CQJNdPFT2DrfnylZ3cf5K43rGfWK4LJGPpjKHiZlk0/RzwEus3PDDZZg+/Er7lCA03MVacueUuXdzfw==\",\n      \"dependencies\": {\n        \"@babel/compat-data\": \"^7.26.0\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-validator-option\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-firefox-class-in-computed-class-key\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-safari-class-field-initializer-scope\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly\": \"^7.25.9\",\n        \"@babel/plugin-proposal-private-property-in-object\": \"7.21.0-placeholder-for-preset-env.2\",\n        \"@babel/plugin-syntax-import-assertions\": \"^7.26.0\",\n        \"@babel/plugin-syntax-import-attributes\": \"^7.26.0\",\n        \"@babel/plugin-syntax-unicode-sets-regex\": \"^7.18.6\",\n        \"@babel/plugin-transform-arrow-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-async-generator-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-async-to-generator\": \"^7.25.9\",\n        \"@babel/plugin-transform-block-scoped-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-block-scoping\": \"^7.25.9\",\n        \"@babel/plugin-transform-class-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-class-static-block\": \"^7.26.0\",\n        \"@babel/plugin-transform-classes\": \"^7.25.9\",\n        \"@babel/plugin-transform-computed-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-destructuring\": \"^7.25.9\",\n        \"@babel/plugin-transform-dotall-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-duplicate-keys\": \"^7.25.9\",\n        \"@babel/plugin-transform-duplicate-named-capturing-groups-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-dynamic-import\": \"^7.25.9\",\n        \"@babel/plugin-transform-exponentiation-operator\": \"^7.25.9\",\n        \"@babel/plugin-transform-export-namespace-from\": \"^7.25.9\",\n        \"@babel/plugin-transform-for-of\": \"^7.25.9\",\n        \"@babel/plugin-transform-function-name\": \"^7.25.9\",\n        \"@babel/plugin-transform-json-strings\": \"^7.25.9\",\n        \"@babel/plugin-transform-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-logical-assignment-operators\": \"^7.25.9\",\n        \"@babel/plugin-transform-member-expression-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-amd\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-commonjs\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-systemjs\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-umd\": \"^7.25.9\",\n        \"@babel/plugin-transform-named-capturing-groups-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-new-target\": \"^7.25.9\",\n        \"@babel/plugin-transform-nullish-coalescing-operator\": \"^7.25.9\",\n        \"@babel/plugin-transform-numeric-separator\": \"^7.25.9\",\n        \"@babel/plugin-transform-object-rest-spread\": \"^7.25.9\",\n        \"@babel/plugin-transform-object-super\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-catch-binding\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-chaining\": \"^7.25.9\",\n        \"@babel/plugin-transform-parameters\": \"^7.25.9\",\n        \"@babel/plugin-transform-private-methods\": \"^7.25.9\",\n        \"@babel/plugin-transform-private-property-in-object\": \"^7.25.9\",\n        \"@babel/plugin-transform-property-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-regenerator\": \"^7.25.9\",\n        \"@babel/plugin-transform-regexp-modifiers\": \"^7.26.0\",\n        \"@babel/plugin-transform-reserved-words\": \"^7.25.9\",\n        \"@babel/plugin-transform-shorthand-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-spread\": \"^7.25.9\",\n        \"@babel/plugin-transform-sticky-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-template-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-typeof-symbol\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-escapes\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-property-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-sets-regex\": \"^7.25.9\",\n        \"@babel/preset-modules\": \"0.1.6-no-external-plugins\",\n        \"babel-plugin-polyfill-corejs2\": \"^0.4.10\",\n        \"babel-plugin-polyfill-corejs3\": \"^0.10.6\",\n        \"babel-plugin-polyfill-regenerator\": \"^0.6.1\",\n        \"core-js-compat\": \"^3.38.1\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0\"\n      }\n    },\n    \"node_modules/@babel/preset-env/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/@babel/preset-modules\": {\n      \"version\": \"0.1.6-no-external-plugins\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz\",\n      \"integrity\": \"sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==\",\n      \"dependencies\": {\n        \"@babel/helper-plugin-utils\": \"^7.0.0\",\n        \"@babel/types\": \"^7.4.4\",\n        \"esutils\": \"^2.0.2\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.0.0-0 || ^8.0.0-0 <8.0.0\"\n      }\n    },\n    \"node_modules/@babel/runtime\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/runtime/-/runtime-7.26.0.tgz\",\n      \"integrity\": \"sha512-FDSOghenHTiToteC/QRlv2q3DhPZ/oOXTBoirfWNx1Cx3TMVcGWQtMMmQcSvb/JjpNeGzx8Pq/b4fKEJuWm1sw==\",\n      \"dependencies\": {\n        \"regenerator-runtime\": \"^0.14.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/template\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.25.9.tgz\",\n      \"integrity\": \"sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==\",\n      \"dependencies\": {\n        \"@babel/code-frame\": \"^7.25.9\",\n        \"@babel/parser\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/traverse\": {\n      \"version\": \"7.26.4\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.4.tgz\",\n      \"integrity\": \"sha512-fH+b7Y4p3yqvApJALCPJcwb0/XaOSgtK4pzV6WVjPR5GLFQBRI7pfoX2V2iM48NXvX07NUxxm1Vw98YjqTcU5w==\",\n      \"dependencies\": {\n        \"@babel/code-frame\": \"^7.26.2\",\n        \"@babel/generator\": \"^7.26.3\",\n        \"@babel/parser\": \"^7.26.3\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.3\",\n        \"debug\": \"^4.3.1\",\n        \"globals\": \"^11.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/traverse/node_modules/globals\": {\n      \"version\": \"11.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-11.12.0.tgz\",\n      \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/types\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.26.3.tgz\",\n      \"integrity\": \"sha512-vN5p+1kl59GVKMvTHt55NzzmYVxprfJD+ql7U9NFIfKCBkYE55LYtS+WtPlaYOyzydrKI8Nezd+aZextrd+FMA==\",\n      \"dependencies\": {\n        \"@babel/helper-string-parser\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@colors/colors\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz\",\n      \"integrity\": \"sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.1.90\"\n      }\n    },\n    \"node_modules/@dabh/diagnostics\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz\",\n      \"integrity\": \"sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"colorspace\": \"1.1.x\",\n        \"enabled\": \"2.0.x\",\n        \"kuler\": \"^2.0.0\"\n      }\n    },\n    \"node_modules/@discoveryjs/json-ext\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.6.3.tgz\",\n      \"integrity\": \"sha512-4B4OijXeVNOPZlYA2oEwWOTkzyltLao+xbotHQeqN++Rv27Y6s818+n2Qkp8q+Fxhn0t/5lA5X1Mxktud8eayQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=14.17.0\"\n      }\n    },\n    \"node_modules/@eslint-community/eslint-utils\": {\n      \"version\": \"4.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz\",\n      \"integrity\": \"sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"eslint-visitor-keys\": \"^3.3.0\"\n      },\n      \"engines\": {\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \"^6.0.0 || ^7.0.0 || >=8.0.0\"\n      }\n    },\n    \"node_modules/@eslint-community/regexpp\": {\n      \"version\": \"4.12.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz\",\n      \"integrity\": \"sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^12.0.0 || ^14.0.0 || >=16.0.0\"\n      }\n    },\n    \"node_modules/@eslint/config-array\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz\",\n      \"integrity\": \"sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@eslint/object-schema\": \"^2.1.5\",\n        \"debug\": \"^4.3.1\",\n        \"minimatch\": \"^3.1.2\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/core\": {\n      \"version\": \"0.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/core/-/core-0.9.1.tgz\",\n      \"integrity\": \"sha512-GuUdqkyyzQI5RMIWkHhvTWLCyLo1jNK3vzkSyaExH5kHPDHcuL2VOpHjmMY+y3+NC69qAKToBqldTBgYeLSr9Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/json-schema\": \"^7.0.15\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz\",\n      \"integrity\": \"sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ajv\": \"^6.12.4\",\n        \"debug\": \"^4.3.2\",\n        \"espree\": \"^10.0.1\",\n        \"globals\": \"^14.0.0\",\n        \"ignore\": \"^5.2.0\",\n        \"import-fresh\": \"^3.2.1\",\n        \"js-yaml\": \"^4.1.0\",\n        \"minimatch\": \"^3.1.2\",\n        \"strip-json-comments\": \"^3.1.1\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc/node_modules/globals\": {\n      \"version\": \"14.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-14.0.0.tgz\",\n      \"integrity\": \"sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/@eslint/js\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/js/-/js-9.17.0.tgz\",\n      \"integrity\": \"sha512-Sxc4hqcs1kTu0iID3kcZDW3JHq2a77HO9P8CP6YEA/FpH3Ll8UXE2r/86Rz9YJLKme39S9vU5OWNjC6Xl0Cr3w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/object-schema\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz\",\n      \"integrity\": \"sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/plugin-kit\": {\n      \"version\": \"0.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.4.tgz\",\n      \"integrity\": \"sha512-zSkKow6H5Kdm0ZUQUB2kV5JIXqoG0+uH5YADhaEHswm664N9Db8dXSi0nMJpacpMf+MyyglF1vnZohpEg5yUtg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"levn\": \"^0.4.1\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@humanfs/core\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz\",\n      \"integrity\": \"sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.18.0\"\n      }\n    },\n    \"node_modules/@humanfs/node\": {\n      \"version\": \"0.16.6\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz\",\n      \"integrity\": \"sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@humanfs/core\": \"^0.19.1\",\n        \"@humanwhocodes/retry\": \"^0.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18.18.0\"\n      }\n    },\n    \"node_modules/@humanfs/node/node_modules/@humanwhocodes/retry\": {\n      \"version\": \"0.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz\",\n      \"integrity\": \"sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.18\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@humanwhocodes/module-importer\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz\",\n      \"integrity\": \"sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12.22\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@humanwhocodes/retry\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz\",\n      \"integrity\": \"sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.18\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@jridgewell/gen-mapping\": {\n      \"version\": \"0.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz\",\n      \"integrity\": \"sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==\",\n      \"dependencies\": {\n        \"@jridgewell/set-array\": \"^1.2.1\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\",\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz\",\n      \"integrity\": \"sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==\",\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@jridgewell/set-array\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz\",\n      \"integrity\": \"sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==\",\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@jridgewell/source-map\": {\n      \"version\": \"0.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.5.tgz\",\n      \"integrity\": \"sha512-UTYAUj/wviwdsMfzoSJspJxbkH5o1snzwX0//0ENX1u/55kkZZkcTZP6u9bwKGkv+dkk9at4m1Cpt0uY80kcpQ==\",\n      \"dependencies\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.0\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      }\n    },\n    \"node_modules/@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.15\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz\",\n      \"integrity\": \"sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==\"\n    },\n    \"node_modules/@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.25\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz\",\n      \"integrity\": \"sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==\",\n      \"dependencies\": {\n        \"@jridgewell/resolve-uri\": \"^3.1.0\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.14\"\n      }\n    },\n    \"node_modules/@nicolo-ribaudo/chokidar-2\": {\n      \"version\": \"2.1.8-no-fsevents.3\",\n      \"resolved\": \"https://registry.npmjs.org/@nicolo-ribaudo/chokidar-2/-/chokidar-2-2.1.8-no-fsevents.3.tgz\",\n      \"integrity\": \"sha512-s88O1aVtXftvp5bCPB7WnmXc5IwOZZ7YPuwNPt+GtOOXpPvad1LfbmjYv+qII7zP6RU2QGnqve27dnLycEnyEQ==\",\n      \"optional\": true\n    },\n    \"node_modules/@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@types/eslint\": {\n      \"version\": \"9.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz\",\n      \"integrity\": \"sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/estree\": \"*\",\n        \"@types/json-schema\": \"*\"\n      }\n    },\n    \"node_modules/@types/eslint-scope\": {\n      \"version\": \"3.7.7\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz\",\n      \"integrity\": \"sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/eslint\": \"*\",\n        \"@types/estree\": \"*\"\n      }\n    },\n    \"node_modules/@types/estree\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz\",\n      \"integrity\": \"sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==\",\n      \"dev\": true\n    },\n    \"node_modules/@types/json-schema\": {\n      \"version\": \"7.0.15\",\n      \"resolved\": \"https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz\",\n      \"integrity\": \"sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==\",\n      \"dev\": true\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"20.14.7\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-20.14.7.tgz\",\n      \"integrity\": \"sha512-uTr2m2IbJJucF3KUxgnGOZvYbN0QgkGyWxG6973HCpMYFy2KfcgYuIwkJQMQkt1VbBMlvWRbpshFTLxnxCZjKQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"undici-types\": \"~5.26.4\"\n      }\n    },\n    \"node_modules/@types/triple-beam\": {\n      \"version\": \"1.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz\",\n      \"integrity\": \"sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/ast\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz\",\n      \"integrity\": \"sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/helper-numbers\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\"\n      }\n    },\n    \"node_modules/@webassemblyjs/floating-point-hex-parser\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz\",\n      \"integrity\": \"sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/helper-api-error\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz\",\n      \"integrity\": \"sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/helper-buffer\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz\",\n      \"integrity\": \"sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/helper-numbers\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz\",\n      \"integrity\": \"sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/floating-point-hex-parser\": \"1.13.2\",\n        \"@webassemblyjs/helper-api-error\": \"1.13.2\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"node_modules/@webassemblyjs/helper-wasm-bytecode\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz\",\n      \"integrity\": \"sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/helper-wasm-section\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz\",\n      \"integrity\": \"sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\"\n      }\n    },\n    \"node_modules/@webassemblyjs/ieee754\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz\",\n      \"integrity\": \"sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@xtuc/ieee754\": \"^1.2.0\"\n      }\n    },\n    \"node_modules/@webassemblyjs/leb128\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz\",\n      \"integrity\": \"sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"node_modules/@webassemblyjs/utf8\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz\",\n      \"integrity\": \"sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==\",\n      \"dev\": true\n    },\n    \"node_modules/@webassemblyjs/wasm-edit\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz\",\n      \"integrity\": \"sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-section\": \"1.14.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\",\n        \"@webassemblyjs/wasm-opt\": \"1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.14.1\",\n        \"@webassemblyjs/wast-printer\": \"1.14.1\"\n      }\n    },\n    \"node_modules/@webassemblyjs/wasm-gen\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz\",\n      \"integrity\": \"sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/ieee754\": \"1.13.2\",\n        \"@webassemblyjs/leb128\": \"1.13.2\",\n        \"@webassemblyjs/utf8\": \"1.13.2\"\n      }\n    },\n    \"node_modules/@webassemblyjs/wasm-opt\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz\",\n      \"integrity\": \"sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.14.1\"\n      }\n    },\n    \"node_modules/@webassemblyjs/wasm-parser\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz\",\n      \"integrity\": \"sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-api-error\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/ieee754\": \"1.13.2\",\n        \"@webassemblyjs/leb128\": \"1.13.2\",\n        \"@webassemblyjs/utf8\": \"1.13.2\"\n      }\n    },\n    \"node_modules/@webassemblyjs/wast-printer\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz\",\n      \"integrity\": \"sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"node_modules/@webpack-cli/configtest\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/configtest/-/configtest-3.0.1.tgz\",\n      \"integrity\": \"sha512-u8d0pJ5YFgneF/GuvEiDA61Tf1VDomHHYMjv/wc9XzYj7nopltpG96nXN5dJRstxZhcNpV1g+nT6CydO7pHbjA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.12.0\"\n      },\n      \"peerDependencies\": {\n        \"webpack\": \"^5.82.0\",\n        \"webpack-cli\": \"6.x.x\"\n      }\n    },\n    \"node_modules/@webpack-cli/info\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/info/-/info-3.0.1.tgz\",\n      \"integrity\": \"sha512-coEmDzc2u/ffMvuW9aCjoRzNSPDl/XLuhPdlFRpT9tZHmJ/039az33CE7uH+8s0uL1j5ZNtfdv0HkfaKRBGJsQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.12.0\"\n      },\n      \"peerDependencies\": {\n        \"webpack\": \"^5.82.0\",\n        \"webpack-cli\": \"6.x.x\"\n      }\n    },\n    \"node_modules/@webpack-cli/serve\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/serve/-/serve-3.0.1.tgz\",\n      \"integrity\": \"sha512-sbgw03xQaCLiT6gcY/6u3qBDn01CWw/nbaXl3gTdTFuJJ75Gffv3E3DBpgvY2fkkrdS1fpjaXNOmJlnbtKauKg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18.12.0\"\n      },\n      \"peerDependencies\": {\n        \"webpack\": \"^5.82.0\",\n        \"webpack-cli\": \"6.x.x\"\n      },\n      \"peerDependenciesMeta\": {\n        \"webpack-dev-server\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@xtuc/ieee754\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz\",\n      \"integrity\": \"sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==\",\n      \"dev\": true\n    },\n    \"node_modules/@xtuc/long\": {\n      \"version\": \"4.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz\",\n      \"integrity\": \"sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\",\n      \"dev\": true\n    },\n    \"node_modules/acorn\": {\n      \"version\": \"8.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz\",\n      \"integrity\": \"sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==\",\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/acorn-jsx\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz\",\n      \"integrity\": \"sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==\",\n      \"dev\": true,\n      \"peerDependencies\": {\n        \"acorn\": \"^6.0.0 || ^7.0.0 || ^8.0.0\"\n      }\n    },\n    \"node_modules/ajv\": {\n      \"version\": \"6.12.6\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\n      }\n    },\n    \"node_modules/ajv-keywords\": {\n      \"version\": \"3.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz\",\n      \"integrity\": \"sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\",\n      \"dev\": true,\n      \"peerDependencies\": {\n        \"ajv\": \"^6.9.1\"\n      }\n    },\n    \"node_modules/anymatch\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\",\n      \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"normalize-path\": \"^3.0.0\",\n        \"picomatch\": \"^2.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/argparse\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz\",\n      \"integrity\": \"sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\",\n      \"dev\": true\n    },\n    \"node_modules/async\": {\n      \"version\": \"3.2.5\",\n      \"resolved\": \"https://registry.npmjs.org/async/-/async-3.2.5.tgz\",\n      \"integrity\": \"sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg==\",\n      \"dev\": true\n    },\n    \"node_modules/babel-plugin-polyfill-corejs2\": {\n      \"version\": \"0.4.11\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.11.tgz\",\n      \"integrity\": \"sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==\",\n      \"dependencies\": {\n        \"@babel/compat-data\": \"^7.22.6\",\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.4.0 || ^8.0.0-0 <8.0.0\"\n      }\n    },\n    \"node_modules/babel-plugin-polyfill-corejs2/node_modules/semver\": {\n      \"version\": \"6.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/babel-plugin-polyfill-corejs3\": {\n      \"version\": \"0.10.6\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.10.6.tgz\",\n      \"integrity\": \"sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==\",\n      \"dependencies\": {\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\",\n        \"core-js-compat\": \"^3.38.0\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.4.0 || ^8.0.0-0 <8.0.0\"\n      }\n    },\n    \"node_modules/babel-plugin-polyfill-regenerator\": {\n      \"version\": \"0.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.2.tgz\",\n      \"integrity\": \"sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==\",\n      \"dependencies\": {\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\"\n      },\n      \"peerDependencies\": {\n        \"@babel/core\": \"^7.4.0 || ^8.0.0-0 <8.0.0\"\n      }\n    },\n    \"node_modules/balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\n    },\n    \"node_modules/binary-extensions\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\",\n      \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\",\n      \"optional\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"node_modules/braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"devOptional\": true,\n      \"dependencies\": {\n        \"fill-range\": \"^7.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/browserslist\": {\n      \"version\": \"4.24.3\",\n      \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-4.24.3.tgz\",\n      \"integrity\": \"sha512-1CPmv8iobE2fyRMV97dAcMVegvvWKxmq94hkLiAkUGwKVTyDLw33K+ZxiFrREKmmps4rIw6grcCFCnTMSZ/YiA==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/browserslist\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/browserslist\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"dependencies\": {\n        \"caniuse-lite\": \"^1.0.30001688\",\n        \"electron-to-chromium\": \"^1.5.73\",\n        \"node-releases\": \"^2.0.19\",\n        \"update-browserslist-db\": \"^1.1.1\"\n      },\n      \"bin\": {\n        \"browserslist\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \"^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7\"\n      }\n    },\n    \"node_modules/buffer-from\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz\",\n      \"integrity\": \"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\"\n    },\n    \"node_modules/callsites\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz\",\n      \"integrity\": \"sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/camel-case\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz\",\n      \"integrity\": \"sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==\",\n      \"dependencies\": {\n        \"pascal-case\": \"^3.1.2\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/caniuse-lite\": {\n      \"version\": \"1.0.30001690\",\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001690.tgz\",\n      \"integrity\": \"sha512-5ExiE3qQN6oF8Clf8ifIDcMRCRE/dMGcETG/XGMD8/XiXm6HXQgQTh1yZYLXXpSOsEUlJm1Xr7kGULZTuGtP/w==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/browserslist\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/caniuse-lite\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ]\n    },\n    \"node_modules/chokidar\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\",\n      \"integrity\": \"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"anymatch\": \"~3.1.2\",\n        \"braces\": \"~3.0.2\",\n        \"glob-parent\": \"~5.1.2\",\n        \"is-binary-path\": \"~2.1.0\",\n        \"is-glob\": \"~4.0.1\",\n        \"normalize-path\": \"~3.0.0\",\n        \"readdirp\": \"~3.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8.10.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://paulmillr.com/funding/\"\n      },\n      \"optionalDependencies\": {\n        \"fsevents\": \"~2.3.2\"\n      }\n    },\n    \"node_modules/chrome-trace-event\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.3.tgz\",\n      \"integrity\": \"sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6.0\"\n      }\n    },\n    \"node_modules/clean-css\": {\n      \"version\": \"5.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz\",\n      \"integrity\": \"sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==\",\n      \"dependencies\": {\n        \"source-map\": \"~0.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.0\"\n      }\n    },\n    \"node_modules/clean-css/node_modules/source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/clone\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-2.1.2.tgz\",\n      \"integrity\": \"sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==\",\n      \"engines\": {\n        \"node\": \">=0.8\"\n      }\n    },\n    \"node_modules/clone-buffer\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/clone-buffer/-/clone-buffer-1.0.0.tgz\",\n      \"integrity\": \"sha512-KLLTJWrvwIP+OPfMn0x2PheDEP20RPUcGXj/ERegTgdmPEZylALQldygiqrPPu8P45uNuPs7ckmReLY6v/iA5g==\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/clone-deep\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz\",\n      \"integrity\": \"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-plain-object\": \"^2.0.4\",\n        \"kind-of\": \"^6.0.2\",\n        \"shallow-clone\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/clone-stats\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/clone-stats/-/clone-stats-1.0.0.tgz\",\n      \"integrity\": \"sha512-au6ydSpg6nsrigcZ4m8Bc9hxjeW+GJ8xh5G3BJCMt4WXe1H10UNaVOamqQTmrx1kjVuxAHIQSNU6hY4Nsn9/ag==\"\n    },\n    \"node_modules/cloneable-readable\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/cloneable-readable/-/cloneable-readable-1.1.3.tgz\",\n      \"integrity\": \"sha512-2EF8zTQOxYq70Y4XKtorQupqF0m49MBz2/yf5Bj+MHjvpG3Hy7sImifnqD6UA+TKYxeSV+u6qqQPawN5UvnpKQ==\",\n      \"dependencies\": {\n        \"inherits\": \"^2.0.1\",\n        \"process-nextick-args\": \"^2.0.0\",\n        \"readable-stream\": \"^2.3.5\"\n      }\n    },\n    \"node_modules/color\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/color/-/color-3.2.1.tgz\",\n      \"integrity\": \"sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-convert\": \"^1.9.3\",\n        \"color-string\": \"^1.6.0\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true\n    },\n    \"node_modules/color-string\": {\n      \"version\": \"1.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz\",\n      \"integrity\": \"sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-name\": \"^1.0.0\",\n        \"simple-swizzle\": \"^0.2.2\"\n      }\n    },\n    \"node_modules/colorette\": {\n      \"version\": \"2.0.20\",\n      \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz\",\n      \"integrity\": \"sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==\",\n      \"dev\": true\n    },\n    \"node_modules/colorspace\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz\",\n      \"integrity\": \"sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color\": \"^3.1.3\",\n        \"text-hex\": \"1.0.x\"\n      }\n    },\n    \"node_modules/commander\": {\n      \"version\": \"6.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-6.2.1.tgz\",\n      \"integrity\": \"sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==\",\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\"\n    },\n    \"node_modules/convert-source-map\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz\",\n      \"integrity\": \"sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==\"\n    },\n    \"node_modules/core-js-compat\": {\n      \"version\": \"3.38.1\",\n      \"resolved\": \"https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.38.1.tgz\",\n      \"integrity\": \"sha512-JRH6gfXxGmrzF3tZ57lFx97YARxCXPaMzPo6jELZhv88pBH5VXpQ+y0znKGlFnzuaihqhLbefxSJxWJMPtfDzw==\",\n      \"dependencies\": {\n        \"browserslist\": \"^4.23.3\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/core-js\"\n      }\n    },\n    \"node_modules/core-util-is\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\n    },\n    \"node_modules/cross-spawn\": {\n      \"version\": \"7.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz\",\n      \"integrity\": \"sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"path-key\": \"^3.1.0\",\n        \"shebang-command\": \"^2.0.0\",\n        \"which\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.4.tgz\",\n      \"integrity\": \"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/debug/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n      \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"\n    },\n    \"node_modules/deep-is\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz\",\n      \"integrity\": \"sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==\",\n      \"dev\": true\n    },\n    \"node_modules/dot-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==\",\n      \"dependencies\": {\n        \"no-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/electron-to-chromium\": {\n      \"version\": \"1.5.76\",\n      \"resolved\": \"https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.76.tgz\",\n      \"integrity\": \"sha512-CjVQyG7n7Sr+eBXE86HIulnL5N8xZY1sgmOPGuq/F0Rr0FJq63lg0kEtOIDfZBk44FnDLf6FUJ+dsJcuiUDdDQ==\"\n    },\n    \"node_modules/enabled\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz\",\n      \"integrity\": \"sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==\",\n      \"dev\": true\n    },\n    \"node_modules/enhanced-resolve\": {\n      \"version\": \"5.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.17.1.tgz\",\n      \"integrity\": \"sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"graceful-fs\": \"^4.2.4\",\n        \"tapable\": \"^2.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/entities\": {\n      \"version\": \"4.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/entities/-/entities-4.5.0.tgz\",\n      \"integrity\": \"sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==\",\n      \"engines\": {\n        \"node\": \">=0.12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/fb55/entities?sponsor=1\"\n      }\n    },\n    \"node_modules/envinfo\": {\n      \"version\": \"7.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/envinfo/-/envinfo-7.14.0.tgz\",\n      \"integrity\": \"sha512-CO40UI41xDQzhLB1hWyqUKgFhs250pNcGbyGKe1l/e4FSaI/+YE4IMG76GDt0In67WLPACIITC+sOi08x4wIvg==\",\n      \"dev\": true,\n      \"bin\": {\n        \"envinfo\": \"dist/cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/es-check\": {\n      \"version\": \"7.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-check/-/es-check-7.2.1.tgz\",\n      \"integrity\": \"sha512-4sxU2OZ1aYYRRX2ajL3hDDBaY96Yr/OcH6MTRerIuOSyil6SQYQQ0b48uqVfYGRCiI0NgJbtY6Sbmf75oPaTeQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"acorn\": \"8.11.3\",\n        \"commander\": \"12.0.0\",\n        \"fast-glob\": \"^3.3.2\",\n        \"supports-color\": \"^8.1.1\",\n        \"winston\": \"3.13.0\"\n      },\n      \"bin\": {\n        \"es-check\": \"index.js\"\n      },\n      \"engines\": {\n        \"node\": \">= 4\"\n      }\n    },\n    \"node_modules/es-check/node_modules/acorn\": {\n      \"version\": \"8.11.3\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.11.3.tgz\",\n      \"integrity\": \"sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==\",\n      \"dev\": true,\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/es-check/node_modules/commander\": {\n      \"version\": \"12.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.0.0.tgz\",\n      \"integrity\": \"sha512-MwVNWlYjDTtOjX5PiD7o5pK0UrFU/OYgcJfjjK4RaHZETNtjJqrZa9Y9ds88+A+f+d5lv+561eZ+yCKoS3gbAA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/es-check/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/es-check/node_modules/supports-color\": {\n      \"version\": \"8.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\n      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/supports-color?sponsor=1\"\n      }\n    },\n    \"node_modules/es-module-lexer\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.4.1.tgz\",\n      \"integrity\": \"sha512-cXLGjP0c4T3flZJKQSuziYoq7MlT+rnvfZjfp7h+I7K9BNX54kP9nyWvdbwjQ4u1iWbOL4u96fgeZLToQlZC7w==\",\n      \"dev\": true\n    },\n    \"node_modules/escalade\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz\",\n      \"integrity\": \"sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/eslint\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-9.17.0.tgz\",\n      \"integrity\": \"sha512-evtlNcpJg+cZLcnVKwsai8fExnqjGPicK7gnUtlNuzu+Fv9bI0aLpND5T44VLQtoMEnI57LoXO9XAkIXwohKrA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@eslint-community/eslint-utils\": \"^4.2.0\",\n        \"@eslint-community/regexpp\": \"^4.12.1\",\n        \"@eslint/config-array\": \"^0.19.0\",\n        \"@eslint/core\": \"^0.9.0\",\n        \"@eslint/eslintrc\": \"^3.2.0\",\n        \"@eslint/js\": \"9.17.0\",\n        \"@eslint/plugin-kit\": \"^0.2.3\",\n        \"@humanfs/node\": \"^0.16.6\",\n        \"@humanwhocodes/module-importer\": \"^1.0.1\",\n        \"@humanwhocodes/retry\": \"^0.4.1\",\n        \"@types/estree\": \"^1.0.6\",\n        \"@types/json-schema\": \"^7.0.15\",\n        \"ajv\": \"^6.12.4\",\n        \"chalk\": \"^4.0.0\",\n        \"cross-spawn\": \"^7.0.6\",\n        \"debug\": \"^4.3.2\",\n        \"escape-string-regexp\": \"^4.0.0\",\n        \"eslint-scope\": \"^8.2.0\",\n        \"eslint-visitor-keys\": \"^4.2.0\",\n        \"espree\": \"^10.3.0\",\n        \"esquery\": \"^1.5.0\",\n        \"esutils\": \"^2.0.2\",\n        \"fast-deep-equal\": \"^3.1.3\",\n        \"file-entry-cache\": \"^8.0.0\",\n        \"find-up\": \"^5.0.0\",\n        \"glob-parent\": \"^6.0.2\",\n        \"ignore\": \"^5.2.0\",\n        \"imurmurhash\": \"^0.1.4\",\n        \"is-glob\": \"^4.0.0\",\n        \"json-stable-stringify-without-jsonify\": \"^1.0.1\",\n        \"lodash.merge\": \"^4.6.2\",\n        \"minimatch\": \"^3.1.2\",\n        \"natural-compare\": \"^1.4.0\",\n        \"optionator\": \"^0.9.3\"\n      },\n      \"bin\": {\n        \"eslint\": \"bin/eslint.js\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://eslint.org/donate\"\n      },\n      \"peerDependencies\": {\n        \"jiti\": \"*\"\n      },\n      \"peerDependenciesMeta\": {\n        \"jiti\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/eslint-config-prettier\": {\n      \"version\": \"9.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz\",\n      \"integrity\": \"sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==\",\n      \"dev\": true,\n      \"bin\": {\n        \"eslint-config-prettier\": \"bin/cli.js\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/eslint-scope\": {\n      \"version\": \"8.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz\",\n      \"integrity\": \"sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"esrecurse\": \"^4.3.0\",\n        \"estraverse\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/eslint-visitor-keys\": {\n      \"version\": \"3.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz\",\n      \"integrity\": \"sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/eslint/node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/eslint/node_modules/chalk\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.1.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/eslint/node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/eslint/node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\n      \"dev\": true\n    },\n    \"node_modules/eslint/node_modules/escape-string-regexp\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz\",\n      \"integrity\": \"sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/eslint/node_modules/eslint-visitor-keys\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz\",\n      \"integrity\": \"sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/eslint/node_modules/glob-parent\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz\",\n      \"integrity\": \"sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.3\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/eslint/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/eslint/node_modules/supports-color\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/espree\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/espree/-/espree-10.3.0.tgz\",\n      \"integrity\": \"sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"acorn\": \"^8.14.0\",\n        \"acorn-jsx\": \"^5.3.2\",\n        \"eslint-visitor-keys\": \"^4.2.0\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/espree/node_modules/eslint-visitor-keys\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz\",\n      \"integrity\": \"sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/esquery\": {\n      \"version\": \"1.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/esquery/-/esquery-1.5.0.tgz\",\n      \"integrity\": \"sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"estraverse\": \"^5.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/esrecurse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz\",\n      \"integrity\": \"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"estraverse\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/estraverse\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/esutils\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\n      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/events\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-3.3.0.tgz\",\n      \"integrity\": \"sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.8.x\"\n      }\n    },\n    \"node_modules/fast-deep-equal\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\n      \"integrity\": \"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\",\n      \"dev\": true\n    },\n    \"node_modules/fast-glob\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\n      \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6.0\"\n      }\n    },\n    \"node_modules/fast-json-stable-stringify\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\n      \"integrity\": \"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\",\n      \"dev\": true\n    },\n    \"node_modules/fast-levenshtein\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz\",\n      \"integrity\": \"sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==\",\n      \"dev\": true\n    },\n    \"node_modules/fastest-levenshtein\": {\n      \"version\": \"1.0.16\",\n      \"resolved\": \"https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz\",\n      \"integrity\": \"sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 4.9.1\"\n      }\n    },\n    \"node_modules/fastq\": {\n      \"version\": \"1.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz\",\n      \"integrity\": \"sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"node_modules/fecha\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz\",\n      \"integrity\": \"sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==\",\n      \"dev\": true\n    },\n    \"node_modules/file-entry-cache\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz\",\n      \"integrity\": \"sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"flat-cache\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=16.0.0\"\n      }\n    },\n    \"node_modules/fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"devOptional\": true,\n      \"dependencies\": {\n        \"to-regex-range\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/find-up\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz\",\n      \"integrity\": \"sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"locate-path\": \"^6.0.0\",\n        \"path-exists\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/flat\": {\n      \"version\": \"5.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/flat/-/flat-5.0.2.tgz\",\n      \"integrity\": \"sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==\",\n      \"dev\": true,\n      \"bin\": {\n        \"flat\": \"cli.js\"\n      }\n    },\n    \"node_modules/flat-cache\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz\",\n      \"integrity\": \"sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"flatted\": \"^3.2.9\",\n        \"keyv\": \"^4.5.4\"\n      },\n      \"engines\": {\n        \"node\": \">=16\"\n      }\n    },\n    \"node_modules/flatted\": {\n      \"version\": \"3.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz\",\n      \"integrity\": \"sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==\",\n      \"dev\": true\n    },\n    \"node_modules/fn.name\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz\",\n      \"integrity\": \"sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==\",\n      \"dev\": true\n    },\n    \"node_modules/fs-readdir-recursive\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz\",\n      \"integrity\": \"sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==\"\n    },\n    \"node_modules/fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\"\n    },\n    \"node_modules/fsevents\": {\n      \"version\": \"2.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\",\n      \"integrity\": \"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\",\n      \"hasInstallScript\": true,\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \"^8.16.0 || ^10.6.0 || >=11.0.0\"\n      }\n    },\n    \"node_modules/function-bind\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\n      \"integrity\": \"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/gensync\": {\n      \"version\": \"1.0.0-beta.2\",\n      \"resolved\": \"https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz\",\n      \"integrity\": \"sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/glob\": {\n      \"version\": \"7.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n      \"dependencies\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.1.1\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"devOptional\": true,\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/glob-to-regexp\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz\",\n      \"integrity\": \"sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==\",\n      \"dev\": true\n    },\n    \"node_modules/globals\": {\n      \"version\": \"15.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-15.14.0.tgz\",\n      \"integrity\": \"sha512-OkToC372DtlQeje9/zHIo5CT8lRP/FUgEOKBEhU4e0abL7J7CD24fD9ohiLN5hagG/kWCYj4K5oaxxtj2Z0Dig==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/google-closure-compiler\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler/-/google-closure-compiler-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-PlC5aU2vwsypKbxyFNXOW4psDZfhDoOr2dCwuo8VcgQji+HVIgRi2lviO66x2SfTi0ilm3kI6rq/RSdOMFczcQ==\",\n      \"dependencies\": {\n        \"chalk\": \"4.x\",\n        \"google-closure-compiler-java\": \"^20240317.0.0\",\n        \"minimist\": \"1.x\",\n        \"vinyl\": \"2.x\",\n        \"vinyl-sourcemaps-apply\": \"^0.2.0\"\n      },\n      \"bin\": {\n        \"google-closure-compiler\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"optionalDependencies\": {\n        \"google-closure-compiler-linux\": \"^20240317.0.0\",\n        \"google-closure-compiler-osx\": \"^20240317.0.0\",\n        \"google-closure-compiler-windows\": \"^20240317.0.0\"\n      }\n    },\n    \"node_modules/google-closure-compiler-java\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-java/-/google-closure-compiler-java-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-oWURPChjcCrVfiQOuVtpSoUJVvtOYo41JGEQ2qtArsTGmk/DpWh40vS6hitwKRM/0YzJX/jYUuyt9ibuXXJKmg==\"\n    },\n    \"node_modules/google-closure-compiler-linux\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-linux/-/google-closure-compiler-linux-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-dYLtcbbJdbbBS0lTy9SzySdVv/aGkpyTekQiW4ADhT/i1p1b4r0wQTKj6kpVVmFvbZ6t9tW/jbXc9EXXNUahZw==\",\n      \"cpu\": [\n        \"x32\",\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ]\n    },\n    \"node_modules/google-closure-compiler-osx\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-osx/-/google-closure-compiler-osx-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-0mABwjD4HP11rikFd8JRIb9OgPqn9h3o3wS0otufMfmbwS7zRpnnoJkunifhORl3VoR1gFm6vcTC9YziTEFdOw==\",\n      \"cpu\": [\n        \"x32\",\n        \"x64\",\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ]\n    },\n    \"node_modules/google-closure-compiler-windows\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-windows/-/google-closure-compiler-windows-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-fTueVFzNOWURFlXZmrFkAB7yA+jzpA2TeDOYeBEFwVlVGHwi8PV3Q9vCIWlbkE8wLpukKEg5wfRHYrLwVPINCA==\",\n      \"cpu\": [\n        \"x32\",\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ]\n    },\n    \"node_modules/google-closure-compiler/node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/google-closure-compiler/node_modules/chalk\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.1.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/google-closure-compiler/node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/google-closure-compiler/node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\n    },\n    \"node_modules/google-closure-compiler/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/google-closure-compiler/node_modules/supports-color\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz\",\n      \"integrity\": \"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\n      \"dev\": true\n    },\n    \"node_modules/hasown\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz\",\n      \"integrity\": \"sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/html-minifier-terser\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-7.2.0.tgz\",\n      \"integrity\": \"sha512-tXgn3QfqPIpGl9o+K5tpcj3/MN4SfLtsx2GWwBC3SSd0tXQGyF3gsSqad8loJgKZGM3ZxbYDd5yhiBIdWpmvLA==\",\n      \"dependencies\": {\n        \"camel-case\": \"^4.1.2\",\n        \"clean-css\": \"~5.3.2\",\n        \"commander\": \"^10.0.0\",\n        \"entities\": \"^4.4.0\",\n        \"param-case\": \"^3.0.4\",\n        \"relateurl\": \"^0.2.7\",\n        \"terser\": \"^5.15.1\"\n      },\n      \"bin\": {\n        \"html-minifier-terser\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \"^14.13.1 || >=16.0.0\"\n      }\n    },\n    \"node_modules/html-minifier-terser/node_modules/commander\": {\n      \"version\": \"10.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-10.0.1.tgz\",\n      \"integrity\": \"sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==\",\n      \"engines\": {\n        \"node\": \">=14\"\n      }\n    },\n    \"node_modules/ignore\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz\",\n      \"integrity\": \"sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 4\"\n      }\n    },\n    \"node_modules/import-fresh\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\n      \"integrity\": \"sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"parent-module\": \"^1.0.0\",\n        \"resolve-from\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/import-local\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz\",\n      \"integrity\": \"sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"pkg-dir\": \"^4.2.0\",\n        \"resolve-cwd\": \"^3.0.0\"\n      },\n      \"bin\": {\n        \"import-local-fixture\": \"fixtures/cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/imurmurhash\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz\",\n      \"integrity\": \"sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.8.19\"\n      }\n    },\n    \"node_modules/inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n      \"dependencies\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n    },\n    \"node_modules/interpret\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-3.1.1.tgz\",\n      \"integrity\": \"sha512-6xwYfHbajpoF0xLW+iwLkhwgvLoZDfjYfoFNu8ftMoXINzwuymNLd9u/KmwtdT2GbR+/Cz66otEGEVVUHX9QLQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/is-arrayish\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz\",\n      \"integrity\": \"sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==\",\n      \"dev\": true\n    },\n    \"node_modules/is-binary-path\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\n      \"integrity\": \"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"binary-extensions\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/is-core-module\": {\n      \"version\": \"2.13.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.13.1.tgz\",\n      \"integrity\": \"sha512-hHrIjvZsftOsvKSn2TRYl63zvxsgE0K+0mYMoH6gD4omR5IWB2KynivBQczo3+wF1cCkjzvptnI9Q0sPU66ilw==\",\n      \"dependencies\": {\n        \"hasown\": \"^2.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"devOptional\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"devOptional\": true,\n      \"dependencies\": {\n        \"is-extglob\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"devOptional\": true,\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/is-plain-object\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz\",\n      \"integrity\": \"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"isobject\": \"^3.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-stream\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz\",\n      \"integrity\": \"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/isarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n      \"integrity\": \"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\"\n    },\n    \"node_modules/isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n      \"dev\": true\n    },\n    \"node_modules/isobject\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\n      \"integrity\": \"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/jest-worker\": {\n      \"version\": \"27.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz\",\n      \"integrity\": \"sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/node\": \"*\",\n        \"merge-stream\": \"^2.0.0\",\n        \"supports-color\": \"^8.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.13.0\"\n      }\n    },\n    \"node_modules/jest-worker/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/jest-worker/node_modules/supports-color\": {\n      \"version\": \"8.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\n      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/supports-color?sponsor=1\"\n      }\n    },\n    \"node_modules/js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\n      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\"\n    },\n    \"node_modules/js-yaml\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz\",\n      \"integrity\": \"sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"argparse\": \"^2.0.1\"\n      },\n      \"bin\": {\n        \"js-yaml\": \"bin/js-yaml.js\"\n      }\n    },\n    \"node_modules/jsesc\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz\",\n      \"integrity\": \"sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==\",\n      \"bin\": {\n        \"jsesc\": \"bin/jsesc\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/json-buffer\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz\",\n      \"integrity\": \"sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==\",\n      \"dev\": true\n    },\n    \"node_modules/json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\n      \"dev\": true\n    },\n    \"node_modules/json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\n      \"dev\": true\n    },\n    \"node_modules/json-stable-stringify-without-jsonify\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz\",\n      \"integrity\": \"sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/json5\": {\n      \"version\": \"2.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.3.tgz\",\n      \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\n      \"bin\": {\n        \"json5\": \"lib/cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/keyv\": {\n      \"version\": \"4.5.4\",\n      \"resolved\": \"https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz\",\n      \"integrity\": \"sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"json-buffer\": \"3.0.1\"\n      }\n    },\n    \"node_modules/kind-of\": {\n      \"version\": \"6.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\n      \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/kuler\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz\",\n      \"integrity\": \"sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==\",\n      \"dev\": true\n    },\n    \"node_modules/levn\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.4.1.tgz\",\n      \"integrity\": \"sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"~0.4.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/loader-runner\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz\",\n      \"integrity\": \"sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6.11.5\"\n      }\n    },\n    \"node_modules/locate-path\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz\",\n      \"integrity\": \"sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"p-locate\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/lodash.debounce\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz\",\n      \"integrity\": \"sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==\"\n    },\n    \"node_modules/lodash.merge\": {\n      \"version\": \"4.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz\",\n      \"integrity\": \"sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==\",\n      \"dev\": true\n    },\n    \"node_modules/logform\": {\n      \"version\": \"2.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/logform/-/logform-2.6.0.tgz\",\n      \"integrity\": \"sha512-1ulHeNPp6k/LD8H91o7VYFBng5i1BDE7HoKxVbZiGFidS1Rj65qcywLxX+pVfAPoQJEjRdvKcusKwOupHCVOVQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@colors/colors\": \"1.6.0\",\n        \"@types/triple-beam\": \"^1.3.2\",\n        \"fecha\": \"^4.2.0\",\n        \"ms\": \"^2.1.1\",\n        \"safe-stable-stringify\": \"^2.3.1\",\n        \"triple-beam\": \"^1.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 12.0.0\"\n      }\n    },\n    \"node_modules/lower-case\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz\",\n      \"integrity\": \"sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==\",\n      \"dependencies\": {\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/lru-cache\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz\",\n      \"integrity\": \"sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==\",\n      \"dependencies\": {\n        \"yallist\": \"^3.0.2\"\n      }\n    },\n    \"node_modules/make-dir\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/make-dir/-/make-dir-2.1.0.tgz\",\n      \"integrity\": \"sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==\",\n      \"dependencies\": {\n        \"pify\": \"^4.0.1\",\n        \"semver\": \"^5.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/merge-stream\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\n      \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\n      \"dev\": true\n    },\n    \"node_modules/merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/micromatch\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n      \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"braces\": \"^3.0.3\",\n        \"picomatch\": \"^2.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6\"\n      }\n    },\n    \"node_modules/mime-db\": {\n      \"version\": \"1.52.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime-types\": {\n      \"version\": \"2.1.35\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"mime-db\": \"1.52.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"dependencies\": {\n        \"brace-expansion\": \"^1.1.7\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/minimist\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz\",\n      \"integrity\": \"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true\n    },\n    \"node_modules/natural-compare\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz\",\n      \"integrity\": \"sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==\",\n      \"dev\": true\n    },\n    \"node_modules/neo-async\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\n      \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\",\n      \"dev\": true\n    },\n    \"node_modules/no-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==\",\n      \"dependencies\": {\n        \"lower-case\": \"^2.0.2\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/node-releases\": {\n      \"version\": \"2.0.19\",\n      \"resolved\": \"https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz\",\n      \"integrity\": \"sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==\"\n    },\n    \"node_modules/normalize-path\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\n      \"integrity\": \"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\n      \"optional\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n      \"dependencies\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/one-time\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz\",\n      \"integrity\": \"sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"fn.name\": \"1.x.x\"\n      }\n    },\n    \"node_modules/optionator\": {\n      \"version\": \"0.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/optionator/-/optionator-0.9.3.tgz\",\n      \"integrity\": \"sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@aashutoshrathi/word-wrap\": \"^1.2.3\",\n        \"deep-is\": \"^0.1.3\",\n        \"fast-levenshtein\": \"^2.0.6\",\n        \"levn\": \"^0.4.1\",\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"^0.4.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/p-limit\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz\",\n      \"integrity\": \"sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"yocto-queue\": \"^0.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/p-locate\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz\",\n      \"integrity\": \"sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"p-limit\": \"^3.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/p-try\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\",\n      \"integrity\": \"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/param-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==\",\n      \"dependencies\": {\n        \"dot-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/parent-module\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz\",\n      \"integrity\": \"sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"callsites\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/pascal-case\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz\",\n      \"integrity\": \"sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==\",\n      \"dependencies\": {\n        \"no-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node_modules/path-exists\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\n      \"integrity\": \"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/path-key\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\"\n    },\n    \"node_modules/picocolors\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\n      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\"\n    },\n    \"node_modules/picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"devOptional\": true,\n      \"engines\": {\n        \"node\": \">=8.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\n      }\n    },\n    \"node_modules/pify\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/pify/-/pify-4.0.1.tgz\",\n      \"integrity\": \"sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/pkg-dir\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz\",\n      \"integrity\": \"sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"find-up\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/pkg-dir/node_modules/find-up\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\n      \"integrity\": \"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"locate-path\": \"^5.0.0\",\n        \"path-exists\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/pkg-dir/node_modules/locate-path\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\n      \"integrity\": \"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"p-locate\": \"^4.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/pkg-dir/node_modules/p-limit\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\n      \"integrity\": \"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"p-try\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/pkg-dir/node_modules/p-locate\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\n      \"integrity\": \"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"p-limit\": \"^2.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/prelude-ls\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz\",\n      \"integrity\": \"sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/prettier\": {\n      \"version\": \"3.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz\",\n      \"integrity\": \"sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==\",\n      \"dev\": true,\n      \"bin\": {\n        \"prettier\": \"bin/prettier.cjs\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n      }\n    },\n    \"node_modules/process-nextick-args\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\n    },\n    \"node_modules/punycode\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz\",\n      \"integrity\": \"sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ]\n    },\n    \"node_modules/randombytes\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz\",\n      \"integrity\": \"sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"safe-buffer\": \"^5.1.0\"\n      }\n    },\n    \"node_modules/readable-stream\": {\n      \"version\": \"2.3.8\",\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz\",\n      \"integrity\": \"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\n      \"dependencies\": {\n        \"core-util-is\": \"~1.0.0\",\n        \"inherits\": \"~2.0.3\",\n        \"isarray\": \"~1.0.0\",\n        \"process-nextick-args\": \"~2.0.0\",\n        \"safe-buffer\": \"~5.1.1\",\n        \"string_decoder\": \"~1.1.1\",\n        \"util-deprecate\": \"~1.0.1\"\n      }\n    },\n    \"node_modules/readdirp\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\n      \"integrity\": \"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"picomatch\": \"^2.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.10.0\"\n      }\n    },\n    \"node_modules/rechoir\": {\n      \"version\": \"0.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.8.0.tgz\",\n      \"integrity\": \"sha512-/vxpCXddiX8NGfGO/mTafwjq4aFa/71pvamip0++IQk3zG8cbCj0fifNPrjjF1XMXUne91jL9OoxmdykoEtifQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"resolve\": \"^1.20.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.13.0\"\n      }\n    },\n    \"node_modules/regenerate\": {\n      \"version\": \"1.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz\",\n      \"integrity\": \"sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==\"\n    },\n    \"node_modules/regenerate-unicode-properties\": {\n      \"version\": \"10.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.0.tgz\",\n      \"integrity\": \"sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==\",\n      \"dependencies\": {\n        \"regenerate\": \"^1.4.2\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/regenerator-runtime\": {\n      \"version\": \"0.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz\",\n      \"integrity\": \"sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==\"\n    },\n    \"node_modules/regenerator-transform\": {\n      \"version\": \"0.15.2\",\n      \"resolved\": \"https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.15.2.tgz\",\n      \"integrity\": \"sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==\",\n      \"dependencies\": {\n        \"@babel/runtime\": \"^7.8.4\"\n      }\n    },\n    \"node_modules/regexpu-core\": {\n      \"version\": \"6.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.2.0.tgz\",\n      \"integrity\": \"sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==\",\n      \"dependencies\": {\n        \"regenerate\": \"^1.4.2\",\n        \"regenerate-unicode-properties\": \"^10.2.0\",\n        \"regjsgen\": \"^0.8.0\",\n        \"regjsparser\": \"^0.12.0\",\n        \"unicode-match-property-ecmascript\": \"^2.0.0\",\n        \"unicode-match-property-value-ecmascript\": \"^2.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/regjsgen\": {\n      \"version\": \"0.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz\",\n      \"integrity\": \"sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==\"\n    },\n    \"node_modules/regjsparser\": {\n      \"version\": \"0.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/regjsparser/-/regjsparser-0.12.0.tgz\",\n      \"integrity\": \"sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==\",\n      \"dependencies\": {\n        \"jsesc\": \"~3.0.2\"\n      },\n      \"bin\": {\n        \"regjsparser\": \"bin/parser\"\n      }\n    },\n    \"node_modules/regjsparser/node_modules/jsesc\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz\",\n      \"integrity\": \"sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==\",\n      \"bin\": {\n        \"jsesc\": \"bin/jsesc\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/relateurl\": {\n      \"version\": \"0.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz\",\n      \"integrity\": \"sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/remove-trailing-separator\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\n      \"integrity\": \"sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==\"\n    },\n    \"node_modules/replace-ext\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/replace-ext/-/replace-ext-1.0.1.tgz\",\n      \"integrity\": \"sha512-yD5BHCe7quCgBph4rMQ+0KkIRKwWCrHDOX1p1Gp6HwjPM5kVoCdKGNhN7ydqqsX6lJEnQDKZ/tFMiEdQ1dvPEw==\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/resolve\": {\n      \"version\": \"1.22.8\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz\",\n      \"integrity\": \"sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==\",\n      \"dependencies\": {\n        \"is-core-module\": \"^2.13.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      },\n      \"bin\": {\n        \"resolve\": \"bin/resolve\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/resolve-cwd\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz\",\n      \"integrity\": \"sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"resolve-from\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/resolve-cwd/node_modules/resolve-from\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz\",\n      \"integrity\": \"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/resolve-from\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz\",\n      \"integrity\": \"sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"iojs\": \">=1.0.0\",\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"dependencies\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"node_modules/safe-buffer\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\n    },\n    \"node_modules/safe-stable-stringify\": {\n      \"version\": \"2.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.4.3.tgz\",\n      \"integrity\": \"sha512-e2bDA2WJT0wxseVd4lsDP4+3ONX6HpMXQa1ZhFQ7SU+GjvORCmShbCMltrtIDfkYhVHrOcPtj+KhmDBdPdZD1g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/schema-utils\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz\",\n      \"integrity\": \"sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/json-schema\": \"^7.0.8\",\n        \"ajv\": \"^6.12.5\",\n        \"ajv-keywords\": \"^3.5.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.13.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/webpack\"\n      }\n    },\n    \"node_modules/semver\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.2.tgz\",\n      \"integrity\": \"sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==\",\n      \"bin\": {\n        \"semver\": \"bin/semver\"\n      }\n    },\n    \"node_modules/serialize-javascript\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz\",\n      \"integrity\": \"sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"randombytes\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/shallow-clone\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz\",\n      \"integrity\": \"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"kind-of\": \"^6.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/shebang-command\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"shebang-regex\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/shebang-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/simple-swizzle\": {\n      \"version\": \"0.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz\",\n      \"integrity\": \"sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-arrayish\": \"^0.3.1\"\n      }\n    },\n    \"node_modules/slash\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-2.0.0.tgz\",\n      \"integrity\": \"sha512-ZYKh3Wh2z1PpEXWr0MpSBZ0V6mZHAQfYevttO11c51CaWjGTaadiKZ+wVt1PbMlDV5qhMFslpZCemhwOK7C89A==\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/source-map\": {\n      \"version\": \"0.7.4\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz\",\n      \"integrity\": \"sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/source-map-support\": {\n      \"version\": \"0.5.21\",\n      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz\",\n      \"integrity\": \"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\n      \"dependencies\": {\n        \"buffer-from\": \"^1.0.0\",\n        \"source-map\": \"^0.6.0\"\n      }\n    },\n    \"node_modules/source-map-support/node_modules/source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/stack-trace\": {\n      \"version\": \"0.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz\",\n      \"integrity\": \"sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/string_decoder\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n      \"dependencies\": {\n        \"safe-buffer\": \"~5.1.0\"\n      }\n    },\n    \"node_modules/strip-json-comments\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz\",\n      \"integrity\": \"sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/tapable\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz\",\n      \"integrity\": \"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/terser\": {\n      \"version\": \"5.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n      \"dependencies\": {\n        \"@jridgewell/source-map\": \"^0.3.3\",\n        \"acorn\": \"^8.8.2\",\n        \"commander\": \"^2.20.0\",\n        \"source-map-support\": \"~0.5.20\"\n      },\n      \"bin\": {\n        \"terser\": \"bin/terser\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/terser-webpack-plugin\": {\n      \"version\": \"5.3.10\",\n      \"resolved\": \"https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.10.tgz\",\n      \"integrity\": \"sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@jridgewell/trace-mapping\": \"^0.3.20\",\n        \"jest-worker\": \"^27.4.5\",\n        \"schema-utils\": \"^3.1.1\",\n        \"serialize-javascript\": \"^6.0.1\",\n        \"terser\": \"^5.26.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.13.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/webpack\"\n      },\n      \"peerDependencies\": {\n        \"webpack\": \"^5.1.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@swc/core\": {\n          \"optional\": true\n        },\n        \"esbuild\": {\n          \"optional\": true\n        },\n        \"uglify-js\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/terser/node_modules/commander\": {\n      \"version\": \"2.20.3\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\n      \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\"\n    },\n    \"node_modules/text-hex\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz\",\n      \"integrity\": \"sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==\",\n      \"dev\": true\n    },\n    \"node_modules/to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"devOptional\": true,\n      \"dependencies\": {\n        \"is-number\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0\"\n      }\n    },\n    \"node_modules/triple-beam\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz\",\n      \"integrity\": \"sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 14.0.0\"\n      }\n    },\n    \"node_modules/tslib\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz\",\n      \"integrity\": \"sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==\"\n    },\n    \"node_modules/type-check\": {\n      \"version\": \"0.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz\",\n      \"integrity\": \"sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"prelude-ls\": \"^1.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/typescript\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-5.7.2.tgz\",\n      \"integrity\": \"sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==\",\n      \"dev\": true,\n      \"bin\": {\n        \"tsc\": \"bin/tsc\",\n        \"tsserver\": \"bin/tsserver\"\n      },\n      \"engines\": {\n        \"node\": \">=14.17\"\n      }\n    },\n    \"node_modules/undici-types\": {\n      \"version\": \"5.26.5\",\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz\",\n      \"integrity\": \"sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==\",\n      \"dev\": true\n    },\n    \"node_modules/unicode-canonical-property-names-ecmascript\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz\",\n      \"integrity\": \"sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/unicode-match-property-ecmascript\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz\",\n      \"integrity\": \"sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==\",\n      \"dependencies\": {\n        \"unicode-canonical-property-names-ecmascript\": \"^2.0.0\",\n        \"unicode-property-aliases-ecmascript\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/unicode-match-property-value-ecmascript\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.0.tgz\",\n      \"integrity\": \"sha512-4IehN3V/+kkr5YeSSDDQG8QLqO26XpL2XP3GQtqwlT/QYSECAwFztxVHjlbh0+gjJ3XmNLS0zDsbgs9jWKExLg==\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/unicode-property-aliases-ecmascript\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz\",\n      \"integrity\": \"sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/update-browserslist-db\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz\",\n      \"integrity\": \"sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/browserslist\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/browserslist\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"dependencies\": {\n        \"escalade\": \"^3.2.0\",\n        \"picocolors\": \"^1.1.0\"\n      },\n      \"bin\": {\n        \"update-browserslist-db\": \"cli.js\"\n      },\n      \"peerDependencies\": {\n        \"browserslist\": \">= 4.21.0\"\n      }\n    },\n    \"node_modules/uri-js\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz\",\n      \"integrity\": \"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/util-deprecate\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\n      \"integrity\": \"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\"\n    },\n    \"node_modules/vinyl\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/vinyl/-/vinyl-2.2.1.tgz\",\n      \"integrity\": \"sha512-LII3bXRFBZLlezoG5FfZVcXflZgWP/4dCwKtxd5ky9+LOtM4CS3bIRQsmR1KMnMW07jpE8fqR2lcxPZ+8sJIcw==\",\n      \"dependencies\": {\n        \"clone\": \"^2.1.1\",\n        \"clone-buffer\": \"^1.0.0\",\n        \"clone-stats\": \"^1.0.0\",\n        \"cloneable-readable\": \"^1.0.0\",\n        \"remove-trailing-separator\": \"^1.0.1\",\n        \"replace-ext\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/vinyl-sourcemaps-apply\": {\n      \"version\": \"0.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/vinyl-sourcemaps-apply/-/vinyl-sourcemaps-apply-0.2.1.tgz\",\n      \"integrity\": \"sha512-+oDh3KYZBoZC8hfocrbrxbLUeaYtQK7J5WU5Br9VqWqmCll3tFJqKp97GC9GmMsVIL0qnx2DgEDVxdo5EZ5sSw==\",\n      \"dependencies\": {\n        \"source-map\": \"^0.5.1\"\n      }\n    },\n    \"node_modules/vinyl-sourcemaps-apply/node_modules/source-map\": {\n      \"version\": \"0.5.7\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",\n      \"integrity\": \"sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/watchpack\": {\n      \"version\": \"2.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/watchpack/-/watchpack-2.4.1.tgz\",\n      \"integrity\": \"sha512-8wrBCMtVhqcXP2Sup1ctSkga6uc2Bx0IIvKyT7yTFier5AXHooSI+QyQQAtTb7+E0IUCCKyTFmXqdqgum2XWGg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/webpack\": {\n      \"version\": \"5.97.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-5.97.1.tgz\",\n      \"integrity\": \"sha512-EksG6gFY3L1eFMROS/7Wzgrii5mBAFe4rIr3r2BTfo7bcc+DWwFZ4OJ/miOuHJO/A85HwyI4eQ0F6IKXesO7Fg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/eslint-scope\": \"^3.7.7\",\n        \"@types/estree\": \"^1.0.6\",\n        \"@webassemblyjs/ast\": \"^1.14.1\",\n        \"@webassemblyjs/wasm-edit\": \"^1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"^1.14.1\",\n        \"acorn\": \"^8.14.0\",\n        \"browserslist\": \"^4.24.0\",\n        \"chrome-trace-event\": \"^1.0.2\",\n        \"enhanced-resolve\": \"^5.17.1\",\n        \"es-module-lexer\": \"^1.2.1\",\n        \"eslint-scope\": \"5.1.1\",\n        \"events\": \"^3.2.0\",\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.2.11\",\n        \"json-parse-even-better-errors\": \"^2.3.1\",\n        \"loader-runner\": \"^4.2.0\",\n        \"mime-types\": \"^2.1.27\",\n        \"neo-async\": \"^2.6.2\",\n        \"schema-utils\": \"^3.2.0\",\n        \"tapable\": \"^2.1.1\",\n        \"terser-webpack-plugin\": \"^5.3.10\",\n        \"watchpack\": \"^2.4.1\",\n        \"webpack-sources\": \"^3.2.3\"\n      },\n      \"bin\": {\n        \"webpack\": \"bin/webpack.js\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/webpack\"\n      },\n      \"peerDependenciesMeta\": {\n        \"webpack-cli\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/webpack-cli\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-cli/-/webpack-cli-6.0.1.tgz\",\n      \"integrity\": \"sha512-MfwFQ6SfwinsUVi0rNJm7rHZ31GyTcpVE5pgVA3hwFRb7COD4TzjUUwhGWKfO50+xdc2MQPuEBBJoqIMGt3JDw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@discoveryjs/json-ext\": \"^0.6.1\",\n        \"@webpack-cli/configtest\": \"^3.0.1\",\n        \"@webpack-cli/info\": \"^3.0.1\",\n        \"@webpack-cli/serve\": \"^3.0.1\",\n        \"colorette\": \"^2.0.14\",\n        \"commander\": \"^12.1.0\",\n        \"cross-spawn\": \"^7.0.3\",\n        \"envinfo\": \"^7.14.0\",\n        \"fastest-levenshtein\": \"^1.0.12\",\n        \"import-local\": \"^3.0.2\",\n        \"interpret\": \"^3.1.1\",\n        \"rechoir\": \"^0.8.0\",\n        \"webpack-merge\": \"^6.0.1\"\n      },\n      \"bin\": {\n        \"webpack-cli\": \"bin/cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=18.12.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/webpack\"\n      },\n      \"peerDependencies\": {\n        \"webpack\": \"^5.82.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"webpack-bundle-analyzer\": {\n          \"optional\": true\n        },\n        \"webpack-dev-server\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/webpack-cli/node_modules/commander\": {\n      \"version\": \"12.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.1.0.tgz\",\n      \"integrity\": \"sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/webpack-merge\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-merge/-/webpack-merge-6.0.1.tgz\",\n      \"integrity\": \"sha512-hXXvrjtx2PLYx4qruKl+kyRSLc52V+cCvMxRjmKwoA+CBbbF5GfIBtR6kCvl0fYGqTUPKB+1ktVmTHqMOzgCBg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"clone-deep\": \"^4.0.1\",\n        \"flat\": \"^5.0.2\",\n        \"wildcard\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=18.0.0\"\n      }\n    },\n    \"node_modules/webpack-sources\": {\n      \"version\": \"3.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz\",\n      \"integrity\": \"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/webpack/node_modules/eslint-scope\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz\",\n      \"integrity\": \"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"esrecurse\": \"^4.3.0\",\n        \"estraverse\": \"^4.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0.0\"\n      }\n    },\n    \"node_modules/webpack/node_modules/estraverse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\n      \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/which\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"isexe\": \"^2.0.0\"\n      },\n      \"bin\": {\n        \"node-which\": \"bin/node-which\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/wildcard\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/wildcard/-/wildcard-2.0.1.tgz\",\n      \"integrity\": \"sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==\",\n      \"dev\": true\n    },\n    \"node_modules/winston\": {\n      \"version\": \"3.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/winston/-/winston-3.13.0.tgz\",\n      \"integrity\": \"sha512-rwidmA1w3SE4j0E5MuIufFhyJPBDG7Nu71RkZor1p2+qHvJSZ9GYDA81AyleQcZbh/+V6HjeBdfnTZJm9rSeQQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@colors/colors\": \"^1.6.0\",\n        \"@dabh/diagnostics\": \"^2.0.2\",\n        \"async\": \"^3.2.3\",\n        \"is-stream\": \"^2.0.0\",\n        \"logform\": \"^2.4.0\",\n        \"one-time\": \"^1.0.0\",\n        \"readable-stream\": \"^3.4.0\",\n        \"safe-stable-stringify\": \"^2.3.1\",\n        \"stack-trace\": \"0.0.x\",\n        \"triple-beam\": \"^1.3.0\",\n        \"winston-transport\": \"^4.7.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 12.0.0\"\n      }\n    },\n    \"node_modules/winston-transport\": {\n      \"version\": \"4.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/winston-transport/-/winston-transport-4.7.0.tgz\",\n      \"integrity\": \"sha512-ajBj65K5I7denzer2IYW6+2bNIVqLGDHqDw3Ow8Ohh+vdW+rv4MZ6eiDvHoKhfJFZ2auyN8byXieDDJ96ViONg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"logform\": \"^2.3.2\",\n        \"readable-stream\": \"^3.6.0\",\n        \"triple-beam\": \"^1.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 12.0.0\"\n      }\n    },\n    \"node_modules/winston-transport/node_modules/readable-stream\": {\n      \"version\": \"3.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\n      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"inherits\": \"^2.0.3\",\n        \"string_decoder\": \"^1.1.1\",\n        \"util-deprecate\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/winston/node_modules/readable-stream\": {\n      \"version\": \"3.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\n      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"inherits\": \"^2.0.3\",\n        \"string_decoder\": \"^1.1.1\",\n        \"util-deprecate\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"\n    },\n    \"node_modules/ws\": {\n      \"version\": \"8.18.0\",\n      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.18.0.tgz\",\n      \"integrity\": \"sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      },\n      \"peerDependencies\": {\n        \"bufferutil\": \"^4.0.1\",\n        \"utf-8-validate\": \">=5.0.2\"\n      },\n      \"peerDependenciesMeta\": {\n        \"bufferutil\": {\n          \"optional\": true\n        },\n        \"utf-8-validate\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/yallist\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz\",\n      \"integrity\": \"sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\"\n    },\n    \"node_modules/yocto-queue\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz\",\n      \"integrity\": \"sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    }\n  },\n  \"dependencies\": {\n    \"@aashutoshrathi/word-wrap\": {\n      \"version\": \"1.2.6\",\n      \"resolved\": \"https://registry.npmjs.org/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz\",\n      \"integrity\": \"sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==\",\n      \"dev\": true\n    },\n    \"@ampproject/remapping\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz\",\n      \"integrity\": \"sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==\",\n      \"requires\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.0\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      }\n    },\n    \"@babel/cli\": {\n      \"version\": \"7.26.4\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.26.4.tgz\",\n      \"integrity\": \"sha512-+mORf3ezU3p3qr+82WvJSnQNE1GAYeoCfEv4fik6B5/2cvKZ75AX8oawWQdXtM9MmndooQj15Jr9kelRFWsuRw==\",\n      \"requires\": {\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n        \"@nicolo-ribaudo/chokidar-2\": \"2.1.8-no-fsevents.3\",\n        \"chokidar\": \"^3.6.0\",\n        \"commander\": \"^6.2.0\",\n        \"convert-source-map\": \"^2.0.0\",\n        \"fs-readdir-recursive\": \"^1.1.0\",\n        \"glob\": \"^7.2.0\",\n        \"make-dir\": \"^2.1.0\",\n        \"slash\": \"^2.0.0\"\n      }\n    },\n    \"@babel/code-frame\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz\",\n      \"integrity\": \"sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==\",\n      \"requires\": {\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"js-tokens\": \"^4.0.0\",\n        \"picocolors\": \"^1.0.0\"\n      }\n    },\n    \"@babel/compat-data\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.3.tgz\",\n      \"integrity\": \"sha512-nHIxvKPniQXpmQLb0vhY3VaFb3S0YrTAwpOWJZh1wn3oJPjJk9Asva204PsBdmAE8vpzfHudT8DB0scYvy9q0g==\"\n    },\n    \"@babel/core\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/core/-/core-7.26.0.tgz\",\n      \"integrity\": \"sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==\",\n      \"requires\": {\n        \"@ampproject/remapping\": \"^2.2.0\",\n        \"@babel/code-frame\": \"^7.26.0\",\n        \"@babel/generator\": \"^7.26.0\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\n        \"@babel/helpers\": \"^7.26.0\",\n        \"@babel/parser\": \"^7.26.0\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\",\n        \"convert-source-map\": \"^2.0.0\",\n        \"debug\": \"^4.1.0\",\n        \"gensync\": \"^1.0.0-beta.2\",\n        \"json5\": \"^2.2.3\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"@babel/generator\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.26.3.tgz\",\n      \"integrity\": \"sha512-6FF/urZvD0sTeO7k6/B15pMLC4CHUv1426lzr3N01aHJTl046uCAh9LXW/fzeXXjPNCJ6iABW5XaWOsIZB93aQ==\",\n      \"requires\": {\n        \"@babel/parser\": \"^7.26.3\",\n        \"@babel/types\": \"^7.26.3\",\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n        \"jsesc\": \"^3.0.2\"\n      }\n    },\n    \"@babel/helper-annotate-as-pure\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.25.9.tgz\",\n      \"integrity\": \"sha512-gv7320KBUFJz1RnylIg5WWYPRXKZ884AGkYpgpWW02TH66Dl+HaC1t1CKd0z3R4b6hdYEcmrNZHUmfCP+1u3/g==\",\n      \"requires\": {\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-compilation-targets\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.9.tgz\",\n      \"integrity\": \"sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==\",\n      \"requires\": {\n        \"@babel/compat-data\": \"^7.25.9\",\n        \"@babel/helper-validator-option\": \"^7.25.9\",\n        \"browserslist\": \"^4.24.0\",\n        \"lru-cache\": \"^5.1.1\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"@babel/helper-create-class-features-plugin\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.25.9.tgz\",\n      \"integrity\": \"sha512-UTZQMvt0d/rSz6KI+qdu7GQze5TIajwTS++GUozlw8VBJDEOAqSXwm1WvmYEZwqdqSGQshRocPDqrt4HBZB3fQ==\",\n      \"requires\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-member-expression-to-functions\": \"^7.25.9\",\n        \"@babel/helper-optimise-call-expression\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"@babel/helper-create-regexp-features-plugin\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.26.3.tgz\",\n      \"integrity\": \"sha512-G7ZRb40uUgdKOQqPLjfD12ZmGA54PzqDFUv2BKImnC9QIfGhIHKvVML0oN8IUiDq4iRqpq74ABpvOaerfWdong==\",\n      \"requires\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"regexpu-core\": \"^6.2.0\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"@babel/helper-define-polyfill-provider\": {\n      \"version\": \"0.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.2.tgz\",\n      \"integrity\": \"sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==\",\n      \"requires\": {\n        \"@babel/helper-compilation-targets\": \"^7.22.6\",\n        \"@babel/helper-plugin-utils\": \"^7.22.5\",\n        \"debug\": \"^4.1.1\",\n        \"lodash.debounce\": \"^4.0.8\",\n        \"resolve\": \"^1.14.2\"\n      }\n    },\n    \"@babel/helper-member-expression-to-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-wbfdZ9w5vk0C0oyHqAJbc62+vet5prjj01jjJ8sKn3j9h3MQQlflEdXYvuqRWjHnM12coDEqiC1IRCi0U/EKwQ==\",\n      \"requires\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-module-imports\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz\",\n      \"integrity\": \"sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==\",\n      \"requires\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-module-transforms\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz\",\n      \"integrity\": \"sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==\",\n      \"requires\": {\n        \"@babel/helper-module-imports\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-optimise-call-expression\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.25.9.tgz\",\n      \"integrity\": \"sha512-FIpuNaz5ow8VyrYcnXQTDRGvV6tTjkNtCK/RYNDXGSLlUD6cBuQTSw43CShGxjvfBTfcUA/r6UhUCbtYqkhcuQ==\",\n      \"requires\": {\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-plugin-utils\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.9.tgz\",\n      \"integrity\": \"sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==\"\n    },\n    \"@babel/helper-remap-async-to-generator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.25.9.tgz\",\n      \"integrity\": \"sha512-IZtukuUeBbhgOcaW2s06OXTzVNJR0ybm4W5xC1opWFFJMZbwRj5LCk+ByYH7WdZPZTt8KnFwA8pvjN2yqcPlgw==\",\n      \"requires\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-wrap-function\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-replace-supers\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.25.9.tgz\",\n      \"integrity\": \"sha512-IiDqTOTBQy0sWyeXyGSC5TBJpGFXBkRynjBeXsvbhQFKj2viwJC76Epz35YLU1fpe/Am6Vppb7W7zM4fPQzLsQ==\",\n      \"requires\": {\n        \"@babel/helper-member-expression-to-functions\": \"^7.25.9\",\n        \"@babel/helper-optimise-call-expression\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-skip-transparent-expression-wrappers\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.25.9.tgz\",\n      \"integrity\": \"sha512-K4Du3BFa3gvyhzgPcntrkDgZzQaq6uozzcpGbOO1OEJaI+EJdqWIMTLgFgQf6lrfiDFo5FU+BxKepI9RmZqahA==\",\n      \"requires\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-string-parser\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz\",\n      \"integrity\": \"sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==\"\n    },\n    \"@babel/helper-validator-identifier\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz\",\n      \"integrity\": \"sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==\"\n    },\n    \"@babel/helper-validator-option\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz\",\n      \"integrity\": \"sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==\"\n    },\n    \"@babel/helper-wrap-function\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.25.9.tgz\",\n      \"integrity\": \"sha512-ETzz9UTjQSTmw39GboatdymDq4XIQbR8ySgVrylRhPOFpsd+JrKHIuF0de7GCWmem+T4uC5z7EZguod7Wj4A4g==\",\n      \"requires\": {\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helpers\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.0.tgz\",\n      \"integrity\": \"sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==\",\n      \"requires\": {\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\"\n      }\n    },\n    \"@babel/parser\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.26.3.tgz\",\n      \"integrity\": \"sha512-WJ/CvmY8Mea8iDXo6a7RK2wbmJITT5fN3BEkRuFlxVyNx8jOKIIhmC4fSkTcPcf8JyavbBwIe6OpiCOBXt/IcA==\",\n      \"requires\": {\n        \"@babel/types\": \"^7.26.3\"\n      }\n    },\n    \"@babel/plugin-bugfix-firefox-class-in-computed-class-key\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.9.tgz\",\n      \"integrity\": \"sha512-ZkRyVkThtxQ/J6nv3JFYv1RYY+JT5BvU0y3k5bWrmuG4woXypRa4PXmm9RhOwodRkYFWqC0C0cqcJ4OqR7kW+g==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-bugfix-safari-class-field-initializer-scope\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.25.9.tgz\",\n      \"integrity\": \"sha512-MrGRLZxLD/Zjj0gdU15dfs+HH/OXvnw/U4jJD8vpcP2CJQapPEv1IWwjc/qMg7ItBlPwSv1hRBbb7LeuANdcnw==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.25.9.tgz\",\n      \"integrity\": \"sha512-2qUwwfAFpJLZqxd02YW9btUCZHl+RFvdDkNfZwaIJrvB8Tesjsk8pEQkTvGwZXLqXUx/2oyY3ySRhm6HOXuCug==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.25.9.tgz\",\n      \"integrity\": \"sha512-6xWgLZTJXwilVjlnV7ospI3xi+sl8lN8rXXbBD6vYn3UYDlGsag8wrZkKcSI8G6KgqKP7vNFaDgeDnfAABq61g==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-chaining\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.25.9.tgz\",\n      \"integrity\": \"sha512-aLnMXYPnzwwqhYSCyXfKkIkYgJ8zv9RK+roo9DkTXz38ynIhd9XCbN08s3MGvqL2MYGVUGdRQLL/JqBIeJhJBg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-proposal-private-property-in-object\": {\n      \"version\": \"7.21.0-placeholder-for-preset-env.2\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz\",\n      \"integrity\": \"sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==\",\n      \"requires\": {}\n    },\n    \"@babel/plugin-syntax-import-assertions\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.26.0.tgz\",\n      \"integrity\": \"sha512-QCWT5Hh830hK5EQa7XzuqIkQU9tT/whqbDz7kuaZMHFl1inRRg7JnuAEOQ0Ur0QUl0NufCk1msK2BeY79Aj/eg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-syntax-import-attributes\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.26.0.tgz\",\n      \"integrity\": \"sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-syntax-unicode-sets-regex\": {\n      \"version\": \"7.18.6\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz\",\n      \"integrity\": \"sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.18.6\",\n        \"@babel/helper-plugin-utils\": \"^7.18.6\"\n      }\n    },\n    \"@babel/plugin-transform-arrow-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-6jmooXYIwn9ca5/RylZADJ+EnSxVUS5sjeJ9UPk6RWRzXCmOJCy6dqItPJFpw2cuCangPK4OYr5uhGKcmrm5Qg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-async-generator-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-RXV6QAzTBbhDMO9fWwOmwwTuYaiPbggWQ9INdZqAYeSHyG7FzQ+nOZaUUjNwKv9pV3aE4WFqFm1Hnbci5tBCAw==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-remap-async-to-generator\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-async-to-generator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.25.9.tgz\",\n      \"integrity\": \"sha512-NT7Ejn7Z/LjUH0Gv5KsBCxh7BH3fbLTV0ptHvpeMvrt3cPThHfJfst9Wrb7S8EvJ7vRTFI7z+VAvFVEQn/m5zQ==\",\n      \"requires\": {\n        \"@babel/helper-module-imports\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-remap-async-to-generator\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-block-scoped-functions\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.25.9.tgz\",\n      \"integrity\": \"sha512-toHc9fzab0ZfenFpsyYinOX0J/5dgJVA2fm64xPewu7CoYHWEivIWKxkK2rMi4r3yQqLnVmheMXRdG+k239CgA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-block-scoping\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.25.9.tgz\",\n      \"integrity\": \"sha512-1F05O7AYjymAtqbsFETboN1NvBdcnzMerO+zlMyJBEz6WkMdejvGWw9p05iTSjC85RLlBseHHQpYaM4gzJkBGg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-class-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-bbMAII8GRSkcd0h0b4X+36GksxuheLFjP65ul9w6C3KgAamI3JqErNgSrosX6ZPj+Mpim5VvEbawXxJCyEUV3Q==\",\n      \"requires\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-class-static-block\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.26.0.tgz\",\n      \"integrity\": \"sha512-6J2APTs7BDDm+UMqP1useWqhcRAXo0WIoVj26N7kPFB6S73Lgvyka4KTZYIxtgYXiN5HTyRObA72N2iu628iTQ==\",\n      \"requires\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-classes\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.25.9.tgz\",\n      \"integrity\": \"sha512-mD8APIXmseE7oZvZgGABDyM34GUmK45Um2TXiBUt7PnuAxrgoSVf123qUzPxEr/+/BHrRn5NMZCdE2m/1F8DGg==\",\n      \"requires\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"globals\": \"^11.1.0\"\n      },\n      \"dependencies\": {\n        \"globals\": {\n          \"version\": \"11.12.0\",\n          \"resolved\": \"https://registry.npmjs.org/globals/-/globals-11.12.0.tgz\",\n          \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\"\n        }\n      }\n    },\n    \"@babel/plugin-transform-computed-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-HnBegGqXZR12xbcTHlJ9HGxw1OniltT26J5YpfruGqtUHlz/xKf/G2ak9e+t0rVqrjXa9WOhvYPz1ERfMj23AA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/template\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-destructuring\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.25.9.tgz\",\n      \"integrity\": \"sha512-WkCGb/3ZxXepmMiX101nnGiU+1CAdut8oHyEOHxkKuS1qKpU2SMXE2uSvfz8PBuLd49V6LEsbtyPhWC7fnkgvQ==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-dotall-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-t7ZQ7g5trIgSRYhI9pIJtRl64KHotutUJsh4Eze5l7olJv+mRSg4/MmbZ0tv1eeqRbdvo/+trvJD/Oc5DmW2cA==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-duplicate-keys\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.25.9.tgz\",\n      \"integrity\": \"sha512-LZxhJ6dvBb/f3x8xwWIuyiAHy56nrRG3PeYTpBkkzkYRRQ6tJLu68lEF5VIqMUZiAV7a8+Tb78nEoMCMcqjXBw==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-duplicate-named-capturing-groups-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-0UfuJS0EsXbRvKnwcLjFtJy/Sxc5J5jhLHnFhy7u4zih97Hz6tJkLU+O+FMMrNZrosUPxDi6sYxJ/EA8jDiAog==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-dynamic-import\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.25.9.tgz\",\n      \"integrity\": \"sha512-GCggjexbmSLaFhqsojeugBpeaRIgWNTcgKVq/0qIteFEqY2A+b9QidYadrWlnbWQUrW5fn+mCvf3tr7OeBFTyg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-exponentiation-operator\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.26.3.tgz\",\n      \"integrity\": \"sha512-7CAHcQ58z2chuXPWblnn1K6rLDnDWieghSOEmqQsrBenH0P9InCUtOJYD89pvngljmZlJcz3fcmgYsXFNGa1ZQ==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-export-namespace-from\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.25.9.tgz\",\n      \"integrity\": \"sha512-2NsEz+CxzJIVOPx2o9UsW1rXLqtChtLoVnwYHHiB04wS5sgn7mrV45fWMBX0Kk+ub9uXytVYfNP2HjbVbCB3Ww==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-for-of\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.25.9.tgz\",\n      \"integrity\": \"sha512-LqHxduHoaGELJl2uhImHwRQudhCM50pT46rIBNvtT/Oql3nqiS3wOwP+5ten7NpYSXrrVLgtZU3DZmPtWZo16A==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-function-name\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.25.9.tgz\",\n      \"integrity\": \"sha512-8lP+Yxjv14Vc5MuWBpJsoUCd3hD6V9DgBon2FVYL4jJgbnVQ9fTgYmonchzZJOVNgzEgbxp4OwAf6xz6M/14XA==\",\n      \"requires\": {\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-json-strings\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.25.9.tgz\",\n      \"integrity\": \"sha512-xoTMk0WXceiiIvsaquQQUaLLXSW1KJ159KP87VilruQm0LNNGxWzahxSS6T6i4Zg3ezp4vA4zuwiNUR53qmQAw==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-9N7+2lFziW8W9pBl2TzaNht3+pgMIRP74zizeCSrtnSKVdUl8mAjjOP2OOVQAfZ881P2cNjDj1uAMEdeD50nuQ==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-logical-assignment-operators\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.25.9.tgz\",\n      \"integrity\": \"sha512-wI4wRAzGko551Y8eVf6iOY9EouIDTtPb0ByZx+ktDGHwv6bHFimrgJM/2T021txPZ2s4c7bqvHbd+vXG6K948Q==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-member-expression-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-PYazBVfofCQkkMzh2P6IdIUaCEWni3iYEerAsRWuVd8+jlM1S9S9cz1dF9hIzyoZ8IA3+OwVYIp9v9e+GbgZhA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-modules-amd\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.25.9.tgz\",\n      \"integrity\": \"sha512-g5T11tnI36jVClQlMlt4qKDLlWnG5pP9CSM4GhdRciTNMRgkfpo5cR6b4rGIOYPgRRuFAvwjPQ/Yk+ql4dyhbw==\",\n      \"requires\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-modules-commonjs\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.26.3.tgz\",\n      \"integrity\": \"sha512-MgR55l4q9KddUDITEzEFYn5ZsGDXMSsU9E+kh7fjRXTIC3RHqfCo8RPRbyReYJh44HQ/yomFkqbOFohXvDCiIQ==\",\n      \"requires\": {\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-modules-systemjs\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.25.9.tgz\",\n      \"integrity\": \"sha512-hyss7iIlH/zLHaehT+xwiymtPOpsiwIIRlCAOwBB04ta5Tt+lNItADdlXw3jAWZ96VJ2jlhl/c+PNIQPKNfvcA==\",\n      \"requires\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-modules-umd\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.25.9.tgz\",\n      \"integrity\": \"sha512-bS9MVObUgE7ww36HEfwe6g9WakQ0KF07mQF74uuXdkoziUPfKyu/nIm663kz//e5O1nPInPFx36z7WJmJ4yNEw==\",\n      \"requires\": {\n        \"@babel/helper-module-transforms\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-named-capturing-groups-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-oqB6WHdKTGl3q/ItQhpLSnWWOpjUJLsOCLVyeFgeTktkBSCiurvPOsyt93gibI9CmuKvTUEtWmG5VhZD+5T/KA==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-new-target\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.25.9.tgz\",\n      \"integrity\": \"sha512-U/3p8X1yCSoKyUj2eOBIx3FOn6pElFOKvAAGf8HTtItuPyB+ZeOqfn+mvTtg9ZlOAjsPdK3ayQEjqHjU/yLeVQ==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-nullish-coalescing-operator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.25.9.tgz\",\n      \"integrity\": \"sha512-ENfftpLZw5EItALAD4WsY/KUWvhUlZndm5GC7G3evUsVeSJB6p0pBeLQUnRnBCBx7zV0RKQjR9kCuwrsIrjWog==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-numeric-separator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.25.9.tgz\",\n      \"integrity\": \"sha512-TlprrJ1GBZ3r6s96Yq8gEQv82s8/5HnCVHtEJScUj90thHQbwe+E5MLhi2bbNHBEJuzrvltXSru+BUxHDoog7Q==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-object-rest-spread\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.25.9.tgz\",\n      \"integrity\": \"sha512-fSaXafEE9CVHPweLYw4J0emp1t8zYTXyzN3UuG+lylqkvYd7RMrsOQ8TYx5RF231be0vqtFC6jnx3UmpJmKBYg==\",\n      \"requires\": {\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/plugin-transform-parameters\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-object-super\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.25.9.tgz\",\n      \"integrity\": \"sha512-Kj/Gh+Rw2RNLbCK1VAWj2U48yxxqL2x0k10nPtSdRa0O2xnHXalD0s+o1A6a0W43gJ00ANo38jxkQreckOzv5A==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-replace-supers\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-optional-catch-binding\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.25.9.tgz\",\n      \"integrity\": \"sha512-qM/6m6hQZzDcZF3onzIhZeDHDO43bkNNlOX0i8n3lR6zLbu0GN2d8qfM/IERJZYauhAHSLHy39NF0Ctdvcid7g==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-optional-chaining\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.25.9.tgz\",\n      \"integrity\": \"sha512-6AvV0FsLULbpnXeBjrY4dmWF8F7gf8QnvTEoO/wX/5xm/xE1Xo8oPuD3MPS+KS9f9XBEAWN7X1aWr4z9HdOr7A==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-parameters\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.25.9.tgz\",\n      \"integrity\": \"sha512-wzz6MKwpnshBAiRmn4jR8LYz/g8Ksg0o80XmwZDlordjwEk9SxBzTWC7F5ef1jhbrbOW2DJ5J6ayRukrJmnr0g==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-private-methods\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.25.9.tgz\",\n      \"integrity\": \"sha512-D/JUozNpQLAPUVusvqMxyvjzllRaF8/nSrP1s2YGQT/W4LHK4xxsMcHjhOGTS01mp9Hda8nswb+FblLdJornQw==\",\n      \"requires\": {\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-private-property-in-object\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.25.9.tgz\",\n      \"integrity\": \"sha512-Evf3kcMqzXA3xfYJmZ9Pg1OvKdtqsDMSWBDzZOPLvHiTt36E75jLDQo5w1gtRU95Q4E5PDttrTf25Fw8d/uWLw==\",\n      \"requires\": {\n        \"@babel/helper-annotate-as-pure\": \"^7.25.9\",\n        \"@babel/helper-create-class-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-property-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-IvIUeV5KrS/VPavfSM/Iu+RE6llrHrYIKY1yfCzyO/lMXHQ+p7uGhonmGVisv6tSBSVgWzMBohTcvkC9vQcQFA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-regenerator\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.25.9.tgz\",\n      \"integrity\": \"sha512-vwDcDNsgMPDGP0nMqzahDWE5/MLcX8sv96+wfX7as7LoF/kr97Bo/7fI00lXY4wUXYfVmwIIyG80fGZ1uvt2qg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"regenerator-transform\": \"^0.15.2\"\n      }\n    },\n    \"@babel/plugin-transform-regexp-modifiers\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.26.0.tgz\",\n      \"integrity\": \"sha512-vN6saax7lrA2yA/Pak3sCxuD6F5InBjn9IcrIKQPjpsLvuHYLVroTxjdlVRHjjBWxKOqIwpTXDkOssYT4BFdRw==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-reserved-words\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.25.9.tgz\",\n      \"integrity\": \"sha512-7DL7DKYjn5Su++4RXu8puKZm2XBPHyjWLUidaPEkCUBbE7IPcsrkRHggAOOKydH1dASWdcUBxrkOGNxUv5P3Jg==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-shorthand-properties\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.25.9.tgz\",\n      \"integrity\": \"sha512-MUv6t0FhO5qHnS/W8XCbHmiRWOphNufpE1IVxhK5kuN3Td9FT1x4rx4K42s3RYdMXCXpfWkGSbCSd0Z64xA7Ng==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-spread\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.25.9.tgz\",\n      \"integrity\": \"sha512-oNknIB0TbURU5pqJFVbOOFspVlrpVwo2H1+HUIsVDvp5VauGGDP1ZEvO8Nn5xyMEs3dakajOxlmkNW7kNgSm6A==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-skip-transparent-expression-wrappers\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-sticky-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-WqBUSgeVwucYDP9U/xNRQam7xV8W5Zf+6Eo7T2SRVUFlhRiMNFdFz58u0KZmCVVqs2i7SHgpRnAhzRNmKfi2uA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-template-literals\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.25.9.tgz\",\n      \"integrity\": \"sha512-o97AE4syN71M/lxrCtQByzphAdlYluKPDBzDVzMmfCobUjjhAryZV0AIpRPrxN0eAkxXO6ZLEScmt+PNhj2OTw==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-typeof-symbol\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.25.9.tgz\",\n      \"integrity\": \"sha512-v61XqUMiueJROUv66BVIOi0Fv/CUuZuZMl5NkRoCVxLAnMexZ0A3kMe7vvZ0nulxMuMp0Mk6S5hNh48yki08ZA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-unicode-escapes\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.25.9.tgz\",\n      \"integrity\": \"sha512-s5EDrE6bW97LtxOcGj1Khcx5AaXwiMmi4toFWRDP9/y0Woo6pXC+iyPu/KuhKtfSrNFd7jJB+/fkOtZy6aIC6Q==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-unicode-property-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-Jt2d8Ga+QwRluxRQ307Vlxa6dMrYEMZCgGxoPR8V52rxPyldHu3hdlHspxaqYmE7oID5+kB+UKUB/eWS+DkkWg==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-unicode-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-yoxstj7Rg9dlNn9UQxzk4fcNivwv4nUYz7fYXBaKxvw/lnmPuOm/ikoELygbYq68Bls3D/D+NBPHiLwZdZZ4HA==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/plugin-transform-unicode-sets-regex\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.25.9.tgz\",\n      \"integrity\": \"sha512-8BYqO3GeVNHtx69fdPshN3fnzUNLrWdHhk/icSwigksJGczKSizZ+Z6SBCxTs723Fr5VSNorTIK7a+R2tISvwQ==\",\n      \"requires\": {\n        \"@babel/helper-create-regexp-features-plugin\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\n      }\n    },\n    \"@babel/preset-env\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.26.0.tgz\",\n      \"integrity\": \"sha512-H84Fxq0CQJNdPFT2DrfnylZ3cf5K43rGfWK4LJGPpjKHiZlk0/RzwEus3PDDZZg+/Er7lCA03MVacueUuXdzfw==\",\n      \"requires\": {\n        \"@babel/compat-data\": \"^7.26.0\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-plugin-utils\": \"^7.25.9\",\n        \"@babel/helper-validator-option\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-firefox-class-in-computed-class-key\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-safari-class-field-initializer-scope\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\": \"^7.25.9\",\n        \"@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly\": \"^7.25.9\",\n        \"@babel/plugin-proposal-private-property-in-object\": \"7.21.0-placeholder-for-preset-env.2\",\n        \"@babel/plugin-syntax-import-assertions\": \"^7.26.0\",\n        \"@babel/plugin-syntax-import-attributes\": \"^7.26.0\",\n        \"@babel/plugin-syntax-unicode-sets-regex\": \"^7.18.6\",\n        \"@babel/plugin-transform-arrow-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-async-generator-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-async-to-generator\": \"^7.25.9\",\n        \"@babel/plugin-transform-block-scoped-functions\": \"^7.25.9\",\n        \"@babel/plugin-transform-block-scoping\": \"^7.25.9\",\n        \"@babel/plugin-transform-class-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-class-static-block\": \"^7.26.0\",\n        \"@babel/plugin-transform-classes\": \"^7.25.9\",\n        \"@babel/plugin-transform-computed-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-destructuring\": \"^7.25.9\",\n        \"@babel/plugin-transform-dotall-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-duplicate-keys\": \"^7.25.9\",\n        \"@babel/plugin-transform-duplicate-named-capturing-groups-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-dynamic-import\": \"^7.25.9\",\n        \"@babel/plugin-transform-exponentiation-operator\": \"^7.25.9\",\n        \"@babel/plugin-transform-export-namespace-from\": \"^7.25.9\",\n        \"@babel/plugin-transform-for-of\": \"^7.25.9\",\n        \"@babel/plugin-transform-function-name\": \"^7.25.9\",\n        \"@babel/plugin-transform-json-strings\": \"^7.25.9\",\n        \"@babel/plugin-transform-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-logical-assignment-operators\": \"^7.25.9\",\n        \"@babel/plugin-transform-member-expression-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-amd\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-commonjs\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-systemjs\": \"^7.25.9\",\n        \"@babel/plugin-transform-modules-umd\": \"^7.25.9\",\n        \"@babel/plugin-transform-named-capturing-groups-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-new-target\": \"^7.25.9\",\n        \"@babel/plugin-transform-nullish-coalescing-operator\": \"^7.25.9\",\n        \"@babel/plugin-transform-numeric-separator\": \"^7.25.9\",\n        \"@babel/plugin-transform-object-rest-spread\": \"^7.25.9\",\n        \"@babel/plugin-transform-object-super\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-catch-binding\": \"^7.25.9\",\n        \"@babel/plugin-transform-optional-chaining\": \"^7.25.9\",\n        \"@babel/plugin-transform-parameters\": \"^7.25.9\",\n        \"@babel/plugin-transform-private-methods\": \"^7.25.9\",\n        \"@babel/plugin-transform-private-property-in-object\": \"^7.25.9\",\n        \"@babel/plugin-transform-property-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-regenerator\": \"^7.25.9\",\n        \"@babel/plugin-transform-regexp-modifiers\": \"^7.26.0\",\n        \"@babel/plugin-transform-reserved-words\": \"^7.25.9\",\n        \"@babel/plugin-transform-shorthand-properties\": \"^7.25.9\",\n        \"@babel/plugin-transform-spread\": \"^7.25.9\",\n        \"@babel/plugin-transform-sticky-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-template-literals\": \"^7.25.9\",\n        \"@babel/plugin-transform-typeof-symbol\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-escapes\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-property-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-regex\": \"^7.25.9\",\n        \"@babel/plugin-transform-unicode-sets-regex\": \"^7.25.9\",\n        \"@babel/preset-modules\": \"0.1.6-no-external-plugins\",\n        \"babel-plugin-polyfill-corejs2\": \"^0.4.10\",\n        \"babel-plugin-polyfill-corejs3\": \"^0.10.6\",\n        \"babel-plugin-polyfill-regenerator\": \"^0.6.1\",\n        \"core-js-compat\": \"^3.38.1\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"@babel/preset-modules\": {\n      \"version\": \"0.1.6-no-external-plugins\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz\",\n      \"integrity\": \"sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==\",\n      \"requires\": {\n        \"@babel/helper-plugin-utils\": \"^7.0.0\",\n        \"@babel/types\": \"^7.4.4\",\n        \"esutils\": \"^2.0.2\"\n      }\n    },\n    \"@babel/runtime\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/runtime/-/runtime-7.26.0.tgz\",\n      \"integrity\": \"sha512-FDSOghenHTiToteC/QRlv2q3DhPZ/oOXTBoirfWNx1Cx3TMVcGWQtMMmQcSvb/JjpNeGzx8Pq/b4fKEJuWm1sw==\",\n      \"requires\": {\n        \"regenerator-runtime\": \"^0.14.0\"\n      }\n    },\n    \"@babel/template\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.25.9.tgz\",\n      \"integrity\": \"sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==\",\n      \"requires\": {\n        \"@babel/code-frame\": \"^7.25.9\",\n        \"@babel/parser\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/traverse\": {\n      \"version\": \"7.26.4\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.4.tgz\",\n      \"integrity\": \"sha512-fH+b7Y4p3yqvApJALCPJcwb0/XaOSgtK4pzV6WVjPR5GLFQBRI7pfoX2V2iM48NXvX07NUxxm1Vw98YjqTcU5w==\",\n      \"requires\": {\n        \"@babel/code-frame\": \"^7.26.2\",\n        \"@babel/generator\": \"^7.26.3\",\n        \"@babel/parser\": \"^7.26.3\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.3\",\n        \"debug\": \"^4.3.1\",\n        \"globals\": \"^11.1.0\"\n      },\n      \"dependencies\": {\n        \"globals\": {\n          \"version\": \"11.12.0\",\n          \"resolved\": \"https://registry.npmjs.org/globals/-/globals-11.12.0.tgz\",\n          \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\"\n        }\n      }\n    },\n    \"@babel/types\": {\n      \"version\": \"7.26.3\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.26.3.tgz\",\n      \"integrity\": \"sha512-vN5p+1kl59GVKMvTHt55NzzmYVxprfJD+ql7U9NFIfKCBkYE55LYtS+WtPlaYOyzydrKI8Nezd+aZextrd+FMA==\",\n      \"requires\": {\n        \"@babel/helper-string-parser\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\"\n      }\n    },\n    \"@colors/colors\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz\",\n      \"integrity\": \"sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==\",\n      \"dev\": true\n    },\n    \"@dabh/diagnostics\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz\",\n      \"integrity\": \"sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"colorspace\": \"1.1.x\",\n        \"enabled\": \"2.0.x\",\n        \"kuler\": \"^2.0.0\"\n      }\n    },\n    \"@discoveryjs/json-ext\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.6.3.tgz\",\n      \"integrity\": \"sha512-4B4OijXeVNOPZlYA2oEwWOTkzyltLao+xbotHQeqN++Rv27Y6s818+n2Qkp8q+Fxhn0t/5lA5X1Mxktud8eayQ==\",\n      \"dev\": true\n    },\n    \"@eslint-community/eslint-utils\": {\n      \"version\": \"4.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz\",\n      \"integrity\": \"sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"eslint-visitor-keys\": \"^3.3.0\"\n      }\n    },\n    \"@eslint-community/regexpp\": {\n      \"version\": \"4.12.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz\",\n      \"integrity\": \"sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==\",\n      \"dev\": true\n    },\n    \"@eslint/config-array\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz\",\n      \"integrity\": \"sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@eslint/object-schema\": \"^2.1.5\",\n        \"debug\": \"^4.3.1\",\n        \"minimatch\": \"^3.1.2\"\n      }\n    },\n    \"@eslint/core\": {\n      \"version\": \"0.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/core/-/core-0.9.1.tgz\",\n      \"integrity\": \"sha512-GuUdqkyyzQI5RMIWkHhvTWLCyLo1jNK3vzkSyaExH5kHPDHcuL2VOpHjmMY+y3+NC69qAKToBqldTBgYeLSr9Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/json-schema\": \"^7.0.15\"\n      }\n    },\n    \"@eslint/eslintrc\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz\",\n      \"integrity\": \"sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ajv\": \"^6.12.4\",\n        \"debug\": \"^4.3.2\",\n        \"espree\": \"^10.0.1\",\n        \"globals\": \"^14.0.0\",\n        \"ignore\": \"^5.2.0\",\n        \"import-fresh\": \"^3.2.1\",\n        \"js-yaml\": \"^4.1.0\",\n        \"minimatch\": \"^3.1.2\",\n        \"strip-json-comments\": \"^3.1.1\"\n      },\n      \"dependencies\": {\n        \"globals\": {\n          \"version\": \"14.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/globals/-/globals-14.0.0.tgz\",\n          \"integrity\": \"sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"@eslint/js\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/js/-/js-9.17.0.tgz\",\n      \"integrity\": \"sha512-Sxc4hqcs1kTu0iID3kcZDW3JHq2a77HO9P8CP6YEA/FpH3Ll8UXE2r/86Rz9YJLKme39S9vU5OWNjC6Xl0Cr3w==\",\n      \"dev\": true\n    },\n    \"@eslint/object-schema\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz\",\n      \"integrity\": \"sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==\",\n      \"dev\": true\n    },\n    \"@eslint/plugin-kit\": {\n      \"version\": \"0.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.4.tgz\",\n      \"integrity\": \"sha512-zSkKow6H5Kdm0ZUQUB2kV5JIXqoG0+uH5YADhaEHswm664N9Db8dXSi0nMJpacpMf+MyyglF1vnZohpEg5yUtg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"levn\": \"^0.4.1\"\n      }\n    },\n    \"@humanfs/core\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz\",\n      \"integrity\": \"sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==\",\n      \"dev\": true\n    },\n    \"@humanfs/node\": {\n      \"version\": \"0.16.6\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz\",\n      \"integrity\": \"sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@humanfs/core\": \"^0.19.1\",\n        \"@humanwhocodes/retry\": \"^0.3.0\"\n      },\n      \"dependencies\": {\n        \"@humanwhocodes/retry\": {\n          \"version\": \"0.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz\",\n          \"integrity\": \"sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"@humanwhocodes/module-importer\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz\",\n      \"integrity\": \"sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==\",\n      \"dev\": true\n    },\n    \"@humanwhocodes/retry\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz\",\n      \"integrity\": \"sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==\",\n      \"dev\": true\n    },\n    \"@jridgewell/gen-mapping\": {\n      \"version\": \"0.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz\",\n      \"integrity\": \"sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==\",\n      \"requires\": {\n        \"@jridgewell/set-array\": \"^1.2.1\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\",\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\n      }\n    },\n    \"@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz\",\n      \"integrity\": \"sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==\"\n    },\n    \"@jridgewell/set-array\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz\",\n      \"integrity\": \"sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==\"\n    },\n    \"@jridgewell/source-map\": {\n      \"version\": \"0.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.5.tgz\",\n      \"integrity\": \"sha512-UTYAUj/wviwdsMfzoSJspJxbkH5o1snzwX0//0ENX1u/55kkZZkcTZP6u9bwKGkv+dkk9at4m1Cpt0uY80kcpQ==\",\n      \"requires\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.0\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      }\n    },\n    \"@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.15\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz\",\n      \"integrity\": \"sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==\"\n    },\n    \"@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.25\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz\",\n      \"integrity\": \"sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==\",\n      \"requires\": {\n        \"@jridgewell/resolve-uri\": \"^3.1.0\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.14\"\n      }\n    },\n    \"@nicolo-ribaudo/chokidar-2\": {\n      \"version\": \"2.1.8-no-fsevents.3\",\n      \"resolved\": \"https://registry.npmjs.org/@nicolo-ribaudo/chokidar-2/-/chokidar-2-2.1.8-no-fsevents.3.tgz\",\n      \"integrity\": \"sha512-s88O1aVtXftvp5bCPB7WnmXc5IwOZZ7YPuwNPt+GtOOXpPvad1LfbmjYv+qII7zP6RU2QGnqve27dnLycEnyEQ==\",\n      \"optional\": true\n    },\n    \"@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      }\n    },\n    \"@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true\n    },\n    \"@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      }\n    },\n    \"@types/eslint\": {\n      \"version\": \"9.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz\",\n      \"integrity\": \"sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/estree\": \"*\",\n        \"@types/json-schema\": \"*\"\n      }\n    },\n    \"@types/eslint-scope\": {\n      \"version\": \"3.7.7\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz\",\n      \"integrity\": \"sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/eslint\": \"*\",\n        \"@types/estree\": \"*\"\n      }\n    },\n    \"@types/estree\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz\",\n      \"integrity\": \"sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==\",\n      \"dev\": true\n    },\n    \"@types/json-schema\": {\n      \"version\": \"7.0.15\",\n      \"resolved\": \"https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz\",\n      \"integrity\": \"sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==\",\n      \"dev\": true\n    },\n    \"@types/node\": {\n      \"version\": \"20.14.7\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-20.14.7.tgz\",\n      \"integrity\": \"sha512-uTr2m2IbJJucF3KUxgnGOZvYbN0QgkGyWxG6973HCpMYFy2KfcgYuIwkJQMQkt1VbBMlvWRbpshFTLxnxCZjKQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"undici-types\": \"~5.26.4\"\n      }\n    },\n    \"@types/triple-beam\": {\n      \"version\": \"1.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz\",\n      \"integrity\": \"sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/ast\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz\",\n      \"integrity\": \"sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/helper-numbers\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\"\n      }\n    },\n    \"@webassemblyjs/floating-point-hex-parser\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz\",\n      \"integrity\": \"sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/helper-api-error\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz\",\n      \"integrity\": \"sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/helper-buffer\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz\",\n      \"integrity\": \"sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/helper-numbers\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz\",\n      \"integrity\": \"sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/floating-point-hex-parser\": \"1.13.2\",\n        \"@webassemblyjs/helper-api-error\": \"1.13.2\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webassemblyjs/helper-wasm-bytecode\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz\",\n      \"integrity\": \"sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/helper-wasm-section\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz\",\n      \"integrity\": \"sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\"\n      }\n    },\n    \"@webassemblyjs/ieee754\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz\",\n      \"integrity\": \"sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@xtuc/ieee754\": \"^1.2.0\"\n      }\n    },\n    \"@webassemblyjs/leb128\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz\",\n      \"integrity\": \"sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webassemblyjs/utf8\": {\n      \"version\": \"1.13.2\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz\",\n      \"integrity\": \"sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==\",\n      \"dev\": true\n    },\n    \"@webassemblyjs/wasm-edit\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz\",\n      \"integrity\": \"sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-section\": \"1.14.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\",\n        \"@webassemblyjs/wasm-opt\": \"1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.14.1\",\n        \"@webassemblyjs/wast-printer\": \"1.14.1\"\n      }\n    },\n    \"@webassemblyjs/wasm-gen\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz\",\n      \"integrity\": \"sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/ieee754\": \"1.13.2\",\n        \"@webassemblyjs/leb128\": \"1.13.2\",\n        \"@webassemblyjs/utf8\": \"1.13.2\"\n      }\n    },\n    \"@webassemblyjs/wasm-opt\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz\",\n      \"integrity\": \"sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.14.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.14.1\"\n      }\n    },\n    \"@webassemblyjs/wasm-parser\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz\",\n      \"integrity\": \"sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@webassemblyjs/helper-api-error\": \"1.13.2\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.13.2\",\n        \"@webassemblyjs/ieee754\": \"1.13.2\",\n        \"@webassemblyjs/leb128\": \"1.13.2\",\n        \"@webassemblyjs/utf8\": \"1.13.2\"\n      }\n    },\n    \"@webassemblyjs/wast-printer\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz\",\n      \"integrity\": \"sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.14.1\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webpack-cli/configtest\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/configtest/-/configtest-3.0.1.tgz\",\n      \"integrity\": \"sha512-u8d0pJ5YFgneF/GuvEiDA61Tf1VDomHHYMjv/wc9XzYj7nopltpG96nXN5dJRstxZhcNpV1g+nT6CydO7pHbjA==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"@webpack-cli/info\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/info/-/info-3.0.1.tgz\",\n      \"integrity\": \"sha512-coEmDzc2u/ffMvuW9aCjoRzNSPDl/XLuhPdlFRpT9tZHmJ/039az33CE7uH+8s0uL1j5ZNtfdv0HkfaKRBGJsQ==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"@webpack-cli/serve\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/serve/-/serve-3.0.1.tgz\",\n      \"integrity\": \"sha512-sbgw03xQaCLiT6gcY/6u3qBDn01CWw/nbaXl3gTdTFuJJ75Gffv3E3DBpgvY2fkkrdS1fpjaXNOmJlnbtKauKg==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"@xtuc/ieee754\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz\",\n      \"integrity\": \"sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==\",\n      \"dev\": true\n    },\n    \"@xtuc/long\": {\n      \"version\": \"4.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz\",\n      \"integrity\": \"sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\",\n      \"dev\": true\n    },\n    \"acorn\": {\n      \"version\": \"8.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz\",\n      \"integrity\": \"sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==\"\n    },\n    \"acorn-jsx\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz\",\n      \"integrity\": \"sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"ajv\": {\n      \"version\": \"6.12.6\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      }\n    },\n    \"ajv-keywords\": {\n      \"version\": \"3.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz\",\n      \"integrity\": \"sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"anymatch\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\",\n      \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\n      \"optional\": true,\n      \"requires\": {\n        \"normalize-path\": \"^3.0.0\",\n        \"picomatch\": \"^2.0.4\"\n      }\n    },\n    \"argparse\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz\",\n      \"integrity\": \"sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\",\n      \"dev\": true\n    },\n    \"async\": {\n      \"version\": \"3.2.5\",\n      \"resolved\": \"https://registry.npmjs.org/async/-/async-3.2.5.tgz\",\n      \"integrity\": \"sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg==\",\n      \"dev\": true\n    },\n    \"babel-plugin-polyfill-corejs2\": {\n      \"version\": \"0.4.11\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.11.tgz\",\n      \"integrity\": \"sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==\",\n      \"requires\": {\n        \"@babel/compat-data\": \"^7.22.6\",\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\"\n        }\n      }\n    },\n    \"babel-plugin-polyfill-corejs3\": {\n      \"version\": \"0.10.6\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.10.6.tgz\",\n      \"integrity\": \"sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==\",\n      \"requires\": {\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\",\n        \"core-js-compat\": \"^3.38.0\"\n      }\n    },\n    \"babel-plugin-polyfill-regenerator\": {\n      \"version\": \"0.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.2.tgz\",\n      \"integrity\": \"sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==\",\n      \"requires\": {\n        \"@babel/helper-define-polyfill-provider\": \"^0.6.2\"\n      }\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\n    },\n    \"binary-extensions\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\",\n      \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\",\n      \"optional\": true\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"requires\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"devOptional\": true,\n      \"requires\": {\n        \"fill-range\": \"^7.1.1\"\n      }\n    },\n    \"browserslist\": {\n      \"version\": \"4.24.3\",\n      \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-4.24.3.tgz\",\n      \"integrity\": \"sha512-1CPmv8iobE2fyRMV97dAcMVegvvWKxmq94hkLiAkUGwKVTyDLw33K+ZxiFrREKmmps4rIw6grcCFCnTMSZ/YiA==\",\n      \"requires\": {\n        \"caniuse-lite\": \"^1.0.30001688\",\n        \"electron-to-chromium\": \"^1.5.73\",\n        \"node-releases\": \"^2.0.19\",\n        \"update-browserslist-db\": \"^1.1.1\"\n      }\n    },\n    \"buffer-from\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz\",\n      \"integrity\": \"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\"\n    },\n    \"callsites\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz\",\n      \"integrity\": \"sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\",\n      \"dev\": true\n    },\n    \"camel-case\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz\",\n      \"integrity\": \"sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==\",\n      \"requires\": {\n        \"pascal-case\": \"^3.1.2\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"caniuse-lite\": {\n      \"version\": \"1.0.30001690\",\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001690.tgz\",\n      \"integrity\": \"sha512-5ExiE3qQN6oF8Clf8ifIDcMRCRE/dMGcETG/XGMD8/XiXm6HXQgQTh1yZYLXXpSOsEUlJm1Xr7kGULZTuGtP/w==\"\n    },\n    \"chokidar\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\",\n      \"integrity\": \"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\",\n      \"optional\": true,\n      \"requires\": {\n        \"anymatch\": \"~3.1.2\",\n        \"braces\": \"~3.0.2\",\n        \"fsevents\": \"~2.3.2\",\n        \"glob-parent\": \"~5.1.2\",\n        \"is-binary-path\": \"~2.1.0\",\n        \"is-glob\": \"~4.0.1\",\n        \"normalize-path\": \"~3.0.0\",\n        \"readdirp\": \"~3.6.0\"\n      }\n    },\n    \"chrome-trace-event\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.3.tgz\",\n      \"integrity\": \"sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==\",\n      \"dev\": true\n    },\n    \"clean-css\": {\n      \"version\": \"5.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz\",\n      \"integrity\": \"sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==\",\n      \"requires\": {\n        \"source-map\": \"~0.6.0\"\n      },\n      \"dependencies\": {\n        \"source-map\": {\n          \"version\": \"0.6.1\",\n          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\"\n        }\n      }\n    },\n    \"clone\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-2.1.2.tgz\",\n      \"integrity\": \"sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==\"\n    },\n    \"clone-buffer\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/clone-buffer/-/clone-buffer-1.0.0.tgz\",\n      \"integrity\": \"sha512-KLLTJWrvwIP+OPfMn0x2PheDEP20RPUcGXj/ERegTgdmPEZylALQldygiqrPPu8P45uNuPs7ckmReLY6v/iA5g==\"\n    },\n    \"clone-deep\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz\",\n      \"integrity\": \"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-plain-object\": \"^2.0.4\",\n        \"kind-of\": \"^6.0.2\",\n        \"shallow-clone\": \"^3.0.0\"\n      }\n    },\n    \"clone-stats\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/clone-stats/-/clone-stats-1.0.0.tgz\",\n      \"integrity\": \"sha512-au6ydSpg6nsrigcZ4m8Bc9hxjeW+GJ8xh5G3BJCMt4WXe1H10UNaVOamqQTmrx1kjVuxAHIQSNU6hY4Nsn9/ag==\"\n    },\n    \"cloneable-readable\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/cloneable-readable/-/cloneable-readable-1.1.3.tgz\",\n      \"integrity\": \"sha512-2EF8zTQOxYq70Y4XKtorQupqF0m49MBz2/yf5Bj+MHjvpG3Hy7sImifnqD6UA+TKYxeSV+u6qqQPawN5UvnpKQ==\",\n      \"requires\": {\n        \"inherits\": \"^2.0.1\",\n        \"process-nextick-args\": \"^2.0.0\",\n        \"readable-stream\": \"^2.3.5\"\n      }\n    },\n    \"color\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/color/-/color-3.2.1.tgz\",\n      \"integrity\": \"sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-convert\": \"^1.9.3\",\n        \"color-string\": \"^1.6.0\"\n      }\n    },\n    \"color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true\n    },\n    \"color-string\": {\n      \"version\": \"1.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz\",\n      \"integrity\": \"sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-name\": \"^1.0.0\",\n        \"simple-swizzle\": \"^0.2.2\"\n      }\n    },\n    \"colorette\": {\n      \"version\": \"2.0.20\",\n      \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz\",\n      \"integrity\": \"sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==\",\n      \"dev\": true\n    },\n    \"colorspace\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz\",\n      \"integrity\": \"sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color\": \"^3.1.3\",\n        \"text-hex\": \"1.0.x\"\n      }\n    },\n    \"commander\": {\n      \"version\": \"6.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-6.2.1.tgz\",\n      \"integrity\": \"sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==\"\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\"\n    },\n    \"convert-source-map\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz\",\n      \"integrity\": \"sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==\"\n    },\n    \"core-js-compat\": {\n      \"version\": \"3.38.1\",\n      \"resolved\": \"https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.38.1.tgz\",\n      \"integrity\": \"sha512-JRH6gfXxGmrzF3tZ57lFx97YARxCXPaMzPo6jELZhv88pBH5VXpQ+y0znKGlFnzuaihqhLbefxSJxWJMPtfDzw==\",\n      \"requires\": {\n        \"browserslist\": \"^4.23.3\"\n      }\n    },\n    \"core-util-is\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\n    },\n    \"cross-spawn\": {\n      \"version\": \"7.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz\",\n      \"integrity\": \"sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"path-key\": \"^3.1.0\",\n        \"shebang-command\": \"^2.0.0\",\n        \"which\": \"^2.0.1\"\n      }\n    },\n    \"debug\": {\n      \"version\": \"4.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.4.tgz\",\n      \"integrity\": \"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\n      \"requires\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"dependencies\": {\n        \"ms\": {\n          \"version\": \"2.1.2\",\n          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n          \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"\n        }\n      }\n    },\n    \"deep-is\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz\",\n      \"integrity\": \"sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==\",\n      \"dev\": true\n    },\n    \"dot-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==\",\n      \"requires\": {\n        \"no-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"electron-to-chromium\": {\n      \"version\": \"1.5.76\",\n      \"resolved\": \"https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.76.tgz\",\n      \"integrity\": \"sha512-CjVQyG7n7Sr+eBXE86HIulnL5N8xZY1sgmOPGuq/F0Rr0FJq63lg0kEtOIDfZBk44FnDLf6FUJ+dsJcuiUDdDQ==\"\n    },\n    \"enabled\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz\",\n      \"integrity\": \"sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==\",\n      \"dev\": true\n    },\n    \"enhanced-resolve\": {\n      \"version\": \"5.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.17.1.tgz\",\n      \"integrity\": \"sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"graceful-fs\": \"^4.2.4\",\n        \"tapable\": \"^2.2.0\"\n      }\n    },\n    \"entities\": {\n      \"version\": \"4.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/entities/-/entities-4.5.0.tgz\",\n      \"integrity\": \"sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==\"\n    },\n    \"envinfo\": {\n      \"version\": \"7.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/envinfo/-/envinfo-7.14.0.tgz\",\n      \"integrity\": \"sha512-CO40UI41xDQzhLB1hWyqUKgFhs250pNcGbyGKe1l/e4FSaI/+YE4IMG76GDt0In67WLPACIITC+sOi08x4wIvg==\",\n      \"dev\": true\n    },\n    \"es-check\": {\n      \"version\": \"7.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-check/-/es-check-7.2.1.tgz\",\n      \"integrity\": \"sha512-4sxU2OZ1aYYRRX2ajL3hDDBaY96Yr/OcH6MTRerIuOSyil6SQYQQ0b48uqVfYGRCiI0NgJbtY6Sbmf75oPaTeQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"acorn\": \"8.11.3\",\n        \"commander\": \"12.0.0\",\n        \"fast-glob\": \"^3.3.2\",\n        \"supports-color\": \"^8.1.1\",\n        \"winston\": \"3.13.0\"\n      },\n      \"dependencies\": {\n        \"acorn\": {\n          \"version\": \"8.11.3\",\n          \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.11.3.tgz\",\n          \"integrity\": \"sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==\",\n          \"dev\": true\n        },\n        \"commander\": {\n          \"version\": \"12.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.0.0.tgz\",\n          \"integrity\": \"sha512-MwVNWlYjDTtOjX5PiD7o5pK0UrFU/OYgcJfjjK4RaHZETNtjJqrZa9Y9ds88+A+f+d5lv+561eZ+yCKoS3gbAA==\",\n          \"dev\": true\n        },\n        \"has-flag\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n          \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n          \"dev\": true\n        },\n        \"supports-color\": {\n          \"version\": \"8.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\n          \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\n          \"dev\": true,\n          \"requires\": {\n            \"has-flag\": \"^4.0.0\"\n          }\n        }\n      }\n    },\n    \"es-module-lexer\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.4.1.tgz\",\n      \"integrity\": \"sha512-cXLGjP0c4T3flZJKQSuziYoq7MlT+rnvfZjfp7h+I7K9BNX54kP9nyWvdbwjQ4u1iWbOL4u96fgeZLToQlZC7w==\",\n      \"dev\": true\n    },\n    \"escalade\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz\",\n      \"integrity\": \"sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==\"\n    },\n    \"eslint\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-9.17.0.tgz\",\n      \"integrity\": \"sha512-evtlNcpJg+cZLcnVKwsai8fExnqjGPicK7gnUtlNuzu+Fv9bI0aLpND5T44VLQtoMEnI57LoXO9XAkIXwohKrA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@eslint-community/eslint-utils\": \"^4.2.0\",\n        \"@eslint-community/regexpp\": \"^4.12.1\",\n        \"@eslint/config-array\": \"^0.19.0\",\n        \"@eslint/core\": \"^0.9.0\",\n        \"@eslint/eslintrc\": \"^3.2.0\",\n        \"@eslint/js\": \"9.17.0\",\n        \"@eslint/plugin-kit\": \"^0.2.3\",\n        \"@humanfs/node\": \"^0.16.6\",\n        \"@humanwhocodes/module-importer\": \"^1.0.1\",\n        \"@humanwhocodes/retry\": \"^0.4.1\",\n        \"@types/estree\": \"^1.0.6\",\n        \"@types/json-schema\": \"^7.0.15\",\n        \"ajv\": \"^6.12.4\",\n        \"chalk\": \"^4.0.0\",\n        \"cross-spawn\": \"^7.0.6\",\n        \"debug\": \"^4.3.2\",\n        \"escape-string-regexp\": \"^4.0.0\",\n        \"eslint-scope\": \"^8.2.0\",\n        \"eslint-visitor-keys\": \"^4.2.0\",\n        \"espree\": \"^10.3.0\",\n        \"esquery\": \"^1.5.0\",\n        \"esutils\": \"^2.0.2\",\n        \"fast-deep-equal\": \"^3.1.3\",\n        \"file-entry-cache\": \"^8.0.0\",\n        \"find-up\": \"^5.0.0\",\n        \"glob-parent\": \"^6.0.2\",\n        \"ignore\": \"^5.2.0\",\n        \"imurmurhash\": \"^0.1.4\",\n        \"is-glob\": \"^4.0.0\",\n        \"json-stable-stringify-without-jsonify\": \"^1.0.1\",\n        \"lodash.merge\": \"^4.6.2\",\n        \"minimatch\": \"^3.1.2\",\n        \"natural-compare\": \"^1.4.0\",\n        \"optionator\": \"^0.9.3\"\n      },\n      \"dependencies\": {\n        \"ansi-styles\": {\n          \"version\": \"4.3.0\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n          \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n          \"dev\": true,\n          \"requires\": {\n            \"color-convert\": \"^2.0.1\"\n          }\n        },\n        \"chalk\": {\n          \"version\": \"4.1.2\",\n          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n          \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-styles\": \"^4.1.0\",\n            \"supports-color\": \"^7.1.0\"\n          }\n        },\n        \"color-convert\": {\n          \"version\": \"2.0.1\",\n          \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n          \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n          \"dev\": true,\n          \"requires\": {\n            \"color-name\": \"~1.1.4\"\n          }\n        },\n        \"color-name\": {\n          \"version\": \"1.1.4\",\n          \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n          \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\n          \"dev\": true\n        },\n        \"escape-string-regexp\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz\",\n          \"integrity\": \"sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==\",\n          \"dev\": true\n        },\n        \"eslint-visitor-keys\": {\n          \"version\": \"4.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz\",\n          \"integrity\": \"sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==\",\n          \"dev\": true\n        },\n        \"glob-parent\": {\n          \"version\": \"6.0.2\",\n          \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz\",\n          \"integrity\": \"sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==\",\n          \"dev\": true,\n          \"requires\": {\n            \"is-glob\": \"^4.0.3\"\n          }\n        },\n        \"has-flag\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n          \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n          \"dev\": true\n        },\n        \"supports-color\": {\n          \"version\": \"7.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n          \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n          \"dev\": true,\n          \"requires\": {\n            \"has-flag\": \"^4.0.0\"\n          }\n        }\n      }\n    },\n    \"eslint-config-prettier\": {\n      \"version\": \"9.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz\",\n      \"integrity\": \"sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"eslint-scope\": {\n      \"version\": \"8.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz\",\n      \"integrity\": \"sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==\",\n      \"dev\": true,\n      \"requires\": {\n        \"esrecurse\": \"^4.3.0\",\n        \"estraverse\": \"^5.2.0\"\n      }\n    },\n    \"eslint-visitor-keys\": {\n      \"version\": \"3.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz\",\n      \"integrity\": \"sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==\",\n      \"dev\": true\n    },\n    \"espree\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/espree/-/espree-10.3.0.tgz\",\n      \"integrity\": \"sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"acorn\": \"^8.14.0\",\n        \"acorn-jsx\": \"^5.3.2\",\n        \"eslint-visitor-keys\": \"^4.2.0\"\n      },\n      \"dependencies\": {\n        \"eslint-visitor-keys\": {\n          \"version\": \"4.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz\",\n          \"integrity\": \"sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"esquery\": {\n      \"version\": \"1.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/esquery/-/esquery-1.5.0.tgz\",\n      \"integrity\": \"sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"estraverse\": \"^5.1.0\"\n      }\n    },\n    \"esrecurse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz\",\n      \"integrity\": \"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\n      \"dev\": true,\n      \"requires\": {\n        \"estraverse\": \"^5.2.0\"\n      }\n    },\n    \"estraverse\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\n      \"dev\": true\n    },\n    \"esutils\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\n      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\"\n    },\n    \"events\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-3.3.0.tgz\",\n      \"integrity\": \"sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==\",\n      \"dev\": true\n    },\n    \"fast-deep-equal\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\n      \"integrity\": \"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\",\n      \"dev\": true\n    },\n    \"fast-glob\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\n      \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      }\n    },\n    \"fast-json-stable-stringify\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\n      \"integrity\": \"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\",\n      \"dev\": true\n    },\n    \"fast-levenshtein\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz\",\n      \"integrity\": \"sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==\",\n      \"dev\": true\n    },\n    \"fastest-levenshtein\": {\n      \"version\": \"1.0.16\",\n      \"resolved\": \"https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz\",\n      \"integrity\": \"sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==\",\n      \"dev\": true\n    },\n    \"fastq\": {\n      \"version\": \"1.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz\",\n      \"integrity\": \"sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"fecha\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz\",\n      \"integrity\": \"sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==\",\n      \"dev\": true\n    },\n    \"file-entry-cache\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz\",\n      \"integrity\": \"sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"flat-cache\": \"^4.0.0\"\n      }\n    },\n    \"fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"devOptional\": true,\n      \"requires\": {\n        \"to-regex-range\": \"^5.0.1\"\n      }\n    },\n    \"find-up\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz\",\n      \"integrity\": \"sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==\",\n      \"dev\": true,\n      \"requires\": {\n        \"locate-path\": \"^6.0.0\",\n        \"path-exists\": \"^4.0.0\"\n      }\n    },\n    \"flat\": {\n      \"version\": \"5.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/flat/-/flat-5.0.2.tgz\",\n      \"integrity\": \"sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==\",\n      \"dev\": true\n    },\n    \"flat-cache\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz\",\n      \"integrity\": \"sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"flatted\": \"^3.2.9\",\n        \"keyv\": \"^4.5.4\"\n      }\n    },\n    \"flatted\": {\n      \"version\": \"3.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz\",\n      \"integrity\": \"sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==\",\n      \"dev\": true\n    },\n    \"fn.name\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz\",\n      \"integrity\": \"sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==\",\n      \"dev\": true\n    },\n    \"fs-readdir-recursive\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz\",\n      \"integrity\": \"sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==\"\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\"\n    },\n    \"fsevents\": {\n      \"version\": \"2.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\",\n      \"integrity\": \"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\",\n      \"optional\": true\n    },\n    \"function-bind\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\n      \"integrity\": \"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\"\n    },\n    \"gensync\": {\n      \"version\": \"1.0.0-beta.2\",\n      \"resolved\": \"https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz\",\n      \"integrity\": \"sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==\"\n    },\n    \"glob\": {\n      \"version\": \"7.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n      \"requires\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.1.1\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      }\n    },\n    \"glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"devOptional\": true,\n      \"requires\": {\n        \"is-glob\": \"^4.0.1\"\n      }\n    },\n    \"glob-to-regexp\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz\",\n      \"integrity\": \"sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==\",\n      \"dev\": true\n    },\n    \"globals\": {\n      \"version\": \"15.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-15.14.0.tgz\",\n      \"integrity\": \"sha512-OkToC372DtlQeje9/zHIo5CT8lRP/FUgEOKBEhU4e0abL7J7CD24fD9ohiLN5hagG/kWCYj4K5oaxxtj2Z0Dig==\",\n      \"dev\": true\n    },\n    \"google-closure-compiler\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler/-/google-closure-compiler-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-PlC5aU2vwsypKbxyFNXOW4psDZfhDoOr2dCwuo8VcgQji+HVIgRi2lviO66x2SfTi0ilm3kI6rq/RSdOMFczcQ==\",\n      \"requires\": {\n        \"chalk\": \"4.x\",\n        \"google-closure-compiler-java\": \"^20240317.0.0\",\n        \"google-closure-compiler-linux\": \"^20240317.0.0\",\n        \"google-closure-compiler-osx\": \"^20240317.0.0\",\n        \"google-closure-compiler-windows\": \"^20240317.0.0\",\n        \"minimist\": \"1.x\",\n        \"vinyl\": \"2.x\",\n        \"vinyl-sourcemaps-apply\": \"^0.2.0\"\n      },\n      \"dependencies\": {\n        \"ansi-styles\": {\n          \"version\": \"4.3.0\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n          \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n          \"requires\": {\n            \"color-convert\": \"^2.0.1\"\n          }\n        },\n        \"chalk\": {\n          \"version\": \"4.1.2\",\n          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n          \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n          \"requires\": {\n            \"ansi-styles\": \"^4.1.0\",\n            \"supports-color\": \"^7.1.0\"\n          }\n        },\n        \"color-convert\": {\n          \"version\": \"2.0.1\",\n          \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n          \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n          \"requires\": {\n            \"color-name\": \"~1.1.4\"\n          }\n        },\n        \"color-name\": {\n          \"version\": \"1.1.4\",\n          \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n          \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\n        },\n        \"has-flag\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n          \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\"\n        },\n        \"supports-color\": {\n          \"version\": \"7.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n          \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n          \"requires\": {\n            \"has-flag\": \"^4.0.0\"\n          }\n        }\n      }\n    },\n    \"google-closure-compiler-java\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-java/-/google-closure-compiler-java-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-oWURPChjcCrVfiQOuVtpSoUJVvtOYo41JGEQ2qtArsTGmk/DpWh40vS6hitwKRM/0YzJX/jYUuyt9ibuXXJKmg==\"\n    },\n    \"google-closure-compiler-linux\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-linux/-/google-closure-compiler-linux-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-dYLtcbbJdbbBS0lTy9SzySdVv/aGkpyTekQiW4ADhT/i1p1b4r0wQTKj6kpVVmFvbZ6t9tW/jbXc9EXXNUahZw==\",\n      \"optional\": true\n    },\n    \"google-closure-compiler-osx\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-osx/-/google-closure-compiler-osx-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-0mABwjD4HP11rikFd8JRIb9OgPqn9h3o3wS0otufMfmbwS7zRpnnoJkunifhORl3VoR1gFm6vcTC9YziTEFdOw==\",\n      \"optional\": true\n    },\n    \"google-closure-compiler-windows\": {\n      \"version\": \"20240317.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/google-closure-compiler-windows/-/google-closure-compiler-windows-20240317.0.0.tgz\",\n      \"integrity\": \"sha512-fTueVFzNOWURFlXZmrFkAB7yA+jzpA2TeDOYeBEFwVlVGHwi8PV3Q9vCIWlbkE8wLpukKEg5wfRHYrLwVPINCA==\",\n      \"optional\": true\n    },\n    \"graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz\",\n      \"integrity\": \"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\n      \"dev\": true\n    },\n    \"hasown\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz\",\n      \"integrity\": \"sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==\",\n      \"requires\": {\n        \"function-bind\": \"^1.1.2\"\n      }\n    },\n    \"html-minifier-terser\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-7.2.0.tgz\",\n      \"integrity\": \"sha512-tXgn3QfqPIpGl9o+K5tpcj3/MN4SfLtsx2GWwBC3SSd0tXQGyF3gsSqad8loJgKZGM3ZxbYDd5yhiBIdWpmvLA==\",\n      \"requires\": {\n        \"camel-case\": \"^4.1.2\",\n        \"clean-css\": \"~5.3.2\",\n        \"commander\": \"^10.0.0\",\n        \"entities\": \"^4.4.0\",\n        \"param-case\": \"^3.0.4\",\n        \"relateurl\": \"^0.2.7\",\n        \"terser\": \"^5.15.1\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"10.0.1\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-10.0.1.tgz\",\n          \"integrity\": \"sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==\"\n        }\n      }\n    },\n    \"ignore\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz\",\n      \"integrity\": \"sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==\",\n      \"dev\": true\n    },\n    \"import-fresh\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\n      \"integrity\": \"sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"parent-module\": \"^1.0.0\",\n        \"resolve-from\": \"^4.0.0\"\n      }\n    },\n    \"import-local\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz\",\n      \"integrity\": \"sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"pkg-dir\": \"^4.2.0\",\n        \"resolve-cwd\": \"^3.0.0\"\n      }\n    },\n    \"imurmurhash\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz\",\n      \"integrity\": \"sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==\",\n      \"dev\": true\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n      \"requires\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n    },\n    \"interpret\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-3.1.1.tgz\",\n      \"integrity\": \"sha512-6xwYfHbajpoF0xLW+iwLkhwgvLoZDfjYfoFNu8ftMoXINzwuymNLd9u/KmwtdT2GbR+/Cz66otEGEVVUHX9QLQ==\",\n      \"dev\": true\n    },\n    \"is-arrayish\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz\",\n      \"integrity\": \"sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==\",\n      \"dev\": true\n    },\n    \"is-binary-path\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\n      \"integrity\": \"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\n      \"optional\": true,\n      \"requires\": {\n        \"binary-extensions\": \"^2.0.0\"\n      }\n    },\n    \"is-core-module\": {\n      \"version\": \"2.13.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.13.1.tgz\",\n      \"integrity\": \"sha512-hHrIjvZsftOsvKSn2TRYl63zvxsgE0K+0mYMoH6gD4omR5IWB2KynivBQczo3+wF1cCkjzvptnI9Q0sPU66ilw==\",\n      \"requires\": {\n        \"hasown\": \"^2.0.0\"\n      }\n    },\n    \"is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"devOptional\": true\n    },\n    \"is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"devOptional\": true,\n      \"requires\": {\n        \"is-extglob\": \"^2.1.1\"\n      }\n    },\n    \"is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"devOptional\": true\n    },\n    \"is-plain-object\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz\",\n      \"integrity\": \"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\n      \"dev\": true,\n      \"requires\": {\n        \"isobject\": \"^3.0.1\"\n      }\n    },\n    \"is-stream\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz\",\n      \"integrity\": \"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==\",\n      \"dev\": true\n    },\n    \"isarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n      \"integrity\": \"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\"\n    },\n    \"isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n      \"dev\": true\n    },\n    \"isobject\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\n      \"integrity\": \"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\n      \"dev\": true\n    },\n    \"jest-worker\": {\n      \"version\": \"27.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz\",\n      \"integrity\": \"sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/node\": \"*\",\n        \"merge-stream\": \"^2.0.0\",\n        \"supports-color\": \"^8.0.0\"\n      },\n      \"dependencies\": {\n        \"has-flag\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n          \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n          \"dev\": true\n        },\n        \"supports-color\": {\n          \"version\": \"8.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\n          \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\n          \"dev\": true,\n          \"requires\": {\n            \"has-flag\": \"^4.0.0\"\n          }\n        }\n      }\n    },\n    \"js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\n      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\"\n    },\n    \"js-yaml\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz\",\n      \"integrity\": \"sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"argparse\": \"^2.0.1\"\n      }\n    },\n    \"jsesc\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz\",\n      \"integrity\": \"sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==\"\n    },\n    \"json-buffer\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz\",\n      \"integrity\": \"sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==\",\n      \"dev\": true\n    },\n    \"json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\n      \"dev\": true\n    },\n    \"json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\n      \"dev\": true\n    },\n    \"json-stable-stringify-without-jsonify\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz\",\n      \"integrity\": \"sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==\",\n      \"dev\": true\n    },\n    \"json5\": {\n      \"version\": \"2.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.3.tgz\",\n      \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\"\n    },\n    \"keyv\": {\n      \"version\": \"4.5.4\",\n      \"resolved\": \"https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz\",\n      \"integrity\": \"sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"json-buffer\": \"3.0.1\"\n      }\n    },\n    \"kind-of\": {\n      \"version\": \"6.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\n      \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\n      \"dev\": true\n    },\n    \"kuler\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz\",\n      \"integrity\": \"sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==\",\n      \"dev\": true\n    },\n    \"levn\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.4.1.tgz\",\n      \"integrity\": \"sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"~0.4.0\"\n      }\n    },\n    \"loader-runner\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz\",\n      \"integrity\": \"sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==\",\n      \"dev\": true\n    },\n    \"locate-path\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz\",\n      \"integrity\": \"sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"p-locate\": \"^5.0.0\"\n      }\n    },\n    \"lodash.debounce\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz\",\n      \"integrity\": \"sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==\"\n    },\n    \"lodash.merge\": {\n      \"version\": \"4.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz\",\n      \"integrity\": \"sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==\",\n      \"dev\": true\n    },\n    \"logform\": {\n      \"version\": \"2.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/logform/-/logform-2.6.0.tgz\",\n      \"integrity\": \"sha512-1ulHeNPp6k/LD8H91o7VYFBng5i1BDE7HoKxVbZiGFidS1Rj65qcywLxX+pVfAPoQJEjRdvKcusKwOupHCVOVQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@colors/colors\": \"1.6.0\",\n        \"@types/triple-beam\": \"^1.3.2\",\n        \"fecha\": \"^4.2.0\",\n        \"ms\": \"^2.1.1\",\n        \"safe-stable-stringify\": \"^2.3.1\",\n        \"triple-beam\": \"^1.3.0\"\n      }\n    },\n    \"lower-case\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz\",\n      \"integrity\": \"sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==\",\n      \"requires\": {\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"lru-cache\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz\",\n      \"integrity\": \"sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==\",\n      \"requires\": {\n        \"yallist\": \"^3.0.2\"\n      }\n    },\n    \"make-dir\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/make-dir/-/make-dir-2.1.0.tgz\",\n      \"integrity\": \"sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==\",\n      \"requires\": {\n        \"pify\": \"^4.0.1\",\n        \"semver\": \"^5.6.0\"\n      }\n    },\n    \"merge-stream\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\n      \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\n      \"dev\": true\n    },\n    \"merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true\n    },\n    \"micromatch\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n      \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"braces\": \"^3.0.3\",\n        \"picomatch\": \"^2.3.1\"\n      }\n    },\n    \"mime-db\": {\n      \"version\": \"1.52.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\n      \"dev\": true\n    },\n    \"mime-types\": {\n      \"version\": \"2.1.35\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"mime-db\": \"1.52.0\"\n      }\n    },\n    \"minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"requires\": {\n        \"brace-expansion\": \"^1.1.7\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz\",\n      \"integrity\": \"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\"\n    },\n    \"ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true\n    },\n    \"natural-compare\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz\",\n      \"integrity\": \"sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==\",\n      \"dev\": true\n    },\n    \"neo-async\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\n      \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\",\n      \"dev\": true\n    },\n    \"no-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==\",\n      \"requires\": {\n        \"lower-case\": \"^2.0.2\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"node-releases\": {\n      \"version\": \"2.0.19\",\n      \"resolved\": \"https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz\",\n      \"integrity\": \"sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==\"\n    },\n    \"normalize-path\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\n      \"integrity\": \"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\n      \"optional\": true\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"one-time\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz\",\n      \"integrity\": \"sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fn.name\": \"1.x.x\"\n      }\n    },\n    \"optionator\": {\n      \"version\": \"0.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/optionator/-/optionator-0.9.3.tgz\",\n      \"integrity\": \"sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@aashutoshrathi/word-wrap\": \"^1.2.3\",\n        \"deep-is\": \"^0.1.3\",\n        \"fast-levenshtein\": \"^2.0.6\",\n        \"levn\": \"^0.4.1\",\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"^0.4.0\"\n      }\n    },\n    \"p-limit\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz\",\n      \"integrity\": \"sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"yocto-queue\": \"^0.1.0\"\n      }\n    },\n    \"p-locate\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz\",\n      \"integrity\": \"sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"p-limit\": \"^3.0.2\"\n      }\n    },\n    \"p-try\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\",\n      \"integrity\": \"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\n      \"dev\": true\n    },\n    \"param-case\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz\",\n      \"integrity\": \"sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==\",\n      \"requires\": {\n        \"dot-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"parent-module\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz\",\n      \"integrity\": \"sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"callsites\": \"^3.0.0\"\n      }\n    },\n    \"pascal-case\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz\",\n      \"integrity\": \"sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==\",\n      \"requires\": {\n        \"no-case\": \"^3.0.4\",\n        \"tslib\": \"^2.0.3\"\n      }\n    },\n    \"path-exists\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\n      \"integrity\": \"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\n      \"dev\": true\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\"\n    },\n    \"path-key\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n      \"dev\": true\n    },\n    \"path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\"\n    },\n    \"picocolors\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\n      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\"\n    },\n    \"picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"devOptional\": true\n    },\n    \"pify\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/pify/-/pify-4.0.1.tgz\",\n      \"integrity\": \"sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==\"\n    },\n    \"pkg-dir\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz\",\n      \"integrity\": \"sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"find-up\": \"^4.0.0\"\n      },\n      \"dependencies\": {\n        \"find-up\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\n          \"integrity\": \"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\n          \"dev\": true,\n          \"requires\": {\n            \"locate-path\": \"^5.0.0\",\n            \"path-exists\": \"^4.0.0\"\n          }\n        },\n        \"locate-path\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\n          \"integrity\": \"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-locate\": \"^4.1.0\"\n          }\n        },\n        \"p-limit\": {\n          \"version\": \"2.3.0\",\n          \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\n          \"integrity\": \"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-try\": \"^2.0.0\"\n          }\n        },\n        \"p-locate\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\n          \"integrity\": \"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-limit\": \"^2.2.0\"\n          }\n        }\n      }\n    },\n    \"prelude-ls\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz\",\n      \"integrity\": \"sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==\",\n      \"dev\": true\n    },\n    \"prettier\": {\n      \"version\": \"3.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz\",\n      \"integrity\": \"sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==\",\n      \"dev\": true\n    },\n    \"process-nextick-args\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\n    },\n    \"punycode\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz\",\n      \"integrity\": \"sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==\",\n      \"dev\": true\n    },\n    \"queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true\n    },\n    \"randombytes\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz\",\n      \"integrity\": \"sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"safe-buffer\": \"^5.1.0\"\n      }\n    },\n    \"readable-stream\": {\n      \"version\": \"2.3.8\",\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz\",\n      \"integrity\": \"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\n      \"requires\": {\n        \"core-util-is\": \"~1.0.0\",\n        \"inherits\": \"~2.0.3\",\n        \"isarray\": \"~1.0.0\",\n        \"process-nextick-args\": \"~2.0.0\",\n        \"safe-buffer\": \"~5.1.1\",\n        \"string_decoder\": \"~1.1.1\",\n        \"util-deprecate\": \"~1.0.1\"\n      }\n    },\n    \"readdirp\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\n      \"integrity\": \"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\n      \"optional\": true,\n      \"requires\": {\n        \"picomatch\": \"^2.2.1\"\n      }\n    },\n    \"rechoir\": {\n      \"version\": \"0.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.8.0.tgz\",\n      \"integrity\": \"sha512-/vxpCXddiX8NGfGO/mTafwjq4aFa/71pvamip0++IQk3zG8cbCj0fifNPrjjF1XMXUne91jL9OoxmdykoEtifQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"resolve\": \"^1.20.0\"\n      }\n    },\n    \"regenerate\": {\n      \"version\": \"1.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz\",\n      \"integrity\": \"sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==\"\n    },\n    \"regenerate-unicode-properties\": {\n      \"version\": \"10.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.0.tgz\",\n      \"integrity\": \"sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==\",\n      \"requires\": {\n        \"regenerate\": \"^1.4.2\"\n      }\n    },\n    \"regenerator-runtime\": {\n      \"version\": \"0.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz\",\n      \"integrity\": \"sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==\"\n    },\n    \"regenerator-transform\": {\n      \"version\": \"0.15.2\",\n      \"resolved\": \"https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.15.2.tgz\",\n      \"integrity\": \"sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==\",\n      \"requires\": {\n        \"@babel/runtime\": \"^7.8.4\"\n      }\n    },\n    \"regexpu-core\": {\n      \"version\": \"6.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.2.0.tgz\",\n      \"integrity\": \"sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==\",\n      \"requires\": {\n        \"regenerate\": \"^1.4.2\",\n        \"regenerate-unicode-properties\": \"^10.2.0\",\n        \"regjsgen\": \"^0.8.0\",\n        \"regjsparser\": \"^0.12.0\",\n        \"unicode-match-property-ecmascript\": \"^2.0.0\",\n        \"unicode-match-property-value-ecmascript\": \"^2.1.0\"\n      }\n    },\n    \"regjsgen\": {\n      \"version\": \"0.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz\",\n      \"integrity\": \"sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==\"\n    },\n    \"regjsparser\": {\n      \"version\": \"0.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/regjsparser/-/regjsparser-0.12.0.tgz\",\n      \"integrity\": \"sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==\",\n      \"requires\": {\n        \"jsesc\": \"~3.0.2\"\n      },\n      \"dependencies\": {\n        \"jsesc\": {\n          \"version\": \"3.0.2\",\n          \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz\",\n          \"integrity\": \"sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==\"\n        }\n      }\n    },\n    \"relateurl\": {\n      \"version\": \"0.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz\",\n      \"integrity\": \"sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==\"\n    },\n    \"remove-trailing-separator\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\n      \"integrity\": \"sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==\"\n    },\n    \"replace-ext\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/replace-ext/-/replace-ext-1.0.1.tgz\",\n      \"integrity\": \"sha512-yD5BHCe7quCgBph4rMQ+0KkIRKwWCrHDOX1p1Gp6HwjPM5kVoCdKGNhN7ydqqsX6lJEnQDKZ/tFMiEdQ1dvPEw==\"\n    },\n    \"resolve\": {\n      \"version\": \"1.22.8\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz\",\n      \"integrity\": \"sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==\",\n      \"requires\": {\n        \"is-core-module\": \"^2.13.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      }\n    },\n    \"resolve-cwd\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz\",\n      \"integrity\": \"sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"resolve-from\": \"^5.0.0\"\n      },\n      \"dependencies\": {\n        \"resolve-from\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz\",\n          \"integrity\": \"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"resolve-from\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz\",\n      \"integrity\": \"sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\",\n      \"dev\": true\n    },\n    \"reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true\n    },\n    \"run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"safe-buffer\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\n    },\n    \"safe-stable-stringify\": {\n      \"version\": \"2.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.4.3.tgz\",\n      \"integrity\": \"sha512-e2bDA2WJT0wxseVd4lsDP4+3ONX6HpMXQa1ZhFQ7SU+GjvORCmShbCMltrtIDfkYhVHrOcPtj+KhmDBdPdZD1g==\",\n      \"dev\": true\n    },\n    \"schema-utils\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz\",\n      \"integrity\": \"sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/json-schema\": \"^7.0.8\",\n        \"ajv\": \"^6.12.5\",\n        \"ajv-keywords\": \"^3.5.2\"\n      }\n    },\n    \"semver\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.2.tgz\",\n      \"integrity\": \"sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==\"\n    },\n    \"serialize-javascript\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz\",\n      \"integrity\": \"sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"randombytes\": \"^2.1.0\"\n      }\n    },\n    \"shallow-clone\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz\",\n      \"integrity\": \"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"kind-of\": \"^6.0.2\"\n      }\n    },\n    \"shebang-command\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"shebang-regex\": \"^3.0.0\"\n      }\n    },\n    \"shebang-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n      \"dev\": true\n    },\n    \"simple-swizzle\": {\n      \"version\": \"0.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz\",\n      \"integrity\": \"sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-arrayish\": \"^0.3.1\"\n      }\n    },\n    \"slash\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-2.0.0.tgz\",\n      \"integrity\": \"sha512-ZYKh3Wh2z1PpEXWr0MpSBZ0V6mZHAQfYevttO11c51CaWjGTaadiKZ+wVt1PbMlDV5qhMFslpZCemhwOK7C89A==\"\n    },\n    \"source-map\": {\n      \"version\": \"0.7.4\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz\",\n      \"integrity\": \"sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==\",\n      \"dev\": true\n    },\n    \"source-map-support\": {\n      \"version\": \"0.5.21\",\n      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz\",\n      \"integrity\": \"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\n      \"requires\": {\n        \"buffer-from\": \"^1.0.0\",\n        \"source-map\": \"^0.6.0\"\n      },\n      \"dependencies\": {\n        \"source-map\": {\n          \"version\": \"0.6.1\",\n          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\"\n        }\n      }\n    },\n    \"stack-trace\": {\n      \"version\": \"0.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz\",\n      \"integrity\": \"sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==\",\n      \"dev\": true\n    },\n    \"string_decoder\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n      \"requires\": {\n        \"safe-buffer\": \"~5.1.0\"\n      }\n    },\n    \"strip-json-comments\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz\",\n      \"integrity\": \"sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==\",\n      \"dev\": true\n    },\n    \"supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\"\n    },\n    \"tapable\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz\",\n      \"integrity\": \"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\",\n      \"dev\": true\n    },\n    \"terser\": {\n      \"version\": \"5.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n      \"requires\": {\n        \"@jridgewell/source-map\": \"^0.3.3\",\n        \"acorn\": \"^8.8.2\",\n        \"commander\": \"^2.20.0\",\n        \"source-map-support\": \"~0.5.20\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"2.20.3\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\n          \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\"\n        }\n      }\n    },\n    \"terser-webpack-plugin\": {\n      \"version\": \"5.3.10\",\n      \"resolved\": \"https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.10.tgz\",\n      \"integrity\": \"sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@jridgewell/trace-mapping\": \"^0.3.20\",\n        \"jest-worker\": \"^27.4.5\",\n        \"schema-utils\": \"^3.1.1\",\n        \"serialize-javascript\": \"^6.0.1\",\n        \"terser\": \"^5.26.0\"\n      }\n    },\n    \"text-hex\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz\",\n      \"integrity\": \"sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==\",\n      \"dev\": true\n    },\n    \"to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"devOptional\": true,\n      \"requires\": {\n        \"is-number\": \"^7.0.0\"\n      }\n    },\n    \"triple-beam\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz\",\n      \"integrity\": \"sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==\",\n      \"dev\": true\n    },\n    \"tslib\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz\",\n      \"integrity\": \"sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==\"\n    },\n    \"type-check\": {\n      \"version\": \"0.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz\",\n      \"integrity\": \"sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==\",\n      \"dev\": true,\n      \"requires\": {\n        \"prelude-ls\": \"^1.2.1\"\n      }\n    },\n    \"typescript\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-5.7.2.tgz\",\n      \"integrity\": \"sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==\",\n      \"dev\": true\n    },\n    \"undici-types\": {\n      \"version\": \"5.26.5\",\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz\",\n      \"integrity\": \"sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==\",\n      \"dev\": true\n    },\n    \"unicode-canonical-property-names-ecmascript\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz\",\n      \"integrity\": \"sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==\"\n    },\n    \"unicode-match-property-ecmascript\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz\",\n      \"integrity\": \"sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==\",\n      \"requires\": {\n        \"unicode-canonical-property-names-ecmascript\": \"^2.0.0\",\n        \"unicode-property-aliases-ecmascript\": \"^2.0.0\"\n      }\n    },\n    \"unicode-match-property-value-ecmascript\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.0.tgz\",\n      \"integrity\": \"sha512-4IehN3V/+kkr5YeSSDDQG8QLqO26XpL2XP3GQtqwlT/QYSECAwFztxVHjlbh0+gjJ3XmNLS0zDsbgs9jWKExLg==\"\n    },\n    \"unicode-property-aliases-ecmascript\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz\",\n      \"integrity\": \"sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==\"\n    },\n    \"update-browserslist-db\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz\",\n      \"integrity\": \"sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==\",\n      \"requires\": {\n        \"escalade\": \"^3.2.0\",\n        \"picocolors\": \"^1.1.0\"\n      }\n    },\n    \"uri-js\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz\",\n      \"integrity\": \"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"util-deprecate\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\n      \"integrity\": \"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\"\n    },\n    \"vinyl\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/vinyl/-/vinyl-2.2.1.tgz\",\n      \"integrity\": \"sha512-LII3bXRFBZLlezoG5FfZVcXflZgWP/4dCwKtxd5ky9+LOtM4CS3bIRQsmR1KMnMW07jpE8fqR2lcxPZ+8sJIcw==\",\n      \"requires\": {\n        \"clone\": \"^2.1.1\",\n        \"clone-buffer\": \"^1.0.0\",\n        \"clone-stats\": \"^1.0.0\",\n        \"cloneable-readable\": \"^1.0.0\",\n        \"remove-trailing-separator\": \"^1.0.1\",\n        \"replace-ext\": \"^1.0.0\"\n      }\n    },\n    \"vinyl-sourcemaps-apply\": {\n      \"version\": \"0.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/vinyl-sourcemaps-apply/-/vinyl-sourcemaps-apply-0.2.1.tgz\",\n      \"integrity\": \"sha512-+oDh3KYZBoZC8hfocrbrxbLUeaYtQK7J5WU5Br9VqWqmCll3tFJqKp97GC9GmMsVIL0qnx2DgEDVxdo5EZ5sSw==\",\n      \"requires\": {\n        \"source-map\": \"^0.5.1\"\n      },\n      \"dependencies\": {\n        \"source-map\": {\n          \"version\": \"0.5.7\",\n          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",\n          \"integrity\": \"sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==\"\n        }\n      }\n    },\n    \"watchpack\": {\n      \"version\": \"2.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/watchpack/-/watchpack-2.4.1.tgz\",\n      \"integrity\": \"sha512-8wrBCMtVhqcXP2Sup1ctSkga6uc2Bx0IIvKyT7yTFier5AXHooSI+QyQQAtTb7+E0IUCCKyTFmXqdqgum2XWGg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.1.2\"\n      }\n    },\n    \"webpack\": {\n      \"version\": \"5.97.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-5.97.1.tgz\",\n      \"integrity\": \"sha512-EksG6gFY3L1eFMROS/7Wzgrii5mBAFe4rIr3r2BTfo7bcc+DWwFZ4OJ/miOuHJO/A85HwyI4eQ0F6IKXesO7Fg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/eslint-scope\": \"^3.7.7\",\n        \"@types/estree\": \"^1.0.6\",\n        \"@webassemblyjs/ast\": \"^1.14.1\",\n        \"@webassemblyjs/wasm-edit\": \"^1.14.1\",\n        \"@webassemblyjs/wasm-parser\": \"^1.14.1\",\n        \"acorn\": \"^8.14.0\",\n        \"browserslist\": \"^4.24.0\",\n        \"chrome-trace-event\": \"^1.0.2\",\n        \"enhanced-resolve\": \"^5.17.1\",\n        \"es-module-lexer\": \"^1.2.1\",\n        \"eslint-scope\": \"5.1.1\",\n        \"events\": \"^3.2.0\",\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.2.11\",\n        \"json-parse-even-better-errors\": \"^2.3.1\",\n        \"loader-runner\": \"^4.2.0\",\n        \"mime-types\": \"^2.1.27\",\n        \"neo-async\": \"^2.6.2\",\n        \"schema-utils\": \"^3.2.0\",\n        \"tapable\": \"^2.1.1\",\n        \"terser-webpack-plugin\": \"^5.3.10\",\n        \"watchpack\": \"^2.4.1\",\n        \"webpack-sources\": \"^3.2.3\"\n      },\n      \"dependencies\": {\n        \"eslint-scope\": {\n          \"version\": \"5.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz\",\n          \"integrity\": \"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\n          \"dev\": true,\n          \"requires\": {\n            \"esrecurse\": \"^4.3.0\",\n            \"estraverse\": \"^4.1.1\"\n          }\n        },\n        \"estraverse\": {\n          \"version\": \"4.3.0\",\n          \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\n          \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"webpack-cli\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-cli/-/webpack-cli-6.0.1.tgz\",\n      \"integrity\": \"sha512-MfwFQ6SfwinsUVi0rNJm7rHZ31GyTcpVE5pgVA3hwFRb7COD4TzjUUwhGWKfO50+xdc2MQPuEBBJoqIMGt3JDw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@discoveryjs/json-ext\": \"^0.6.1\",\n        \"@webpack-cli/configtest\": \"^3.0.1\",\n        \"@webpack-cli/info\": \"^3.0.1\",\n        \"@webpack-cli/serve\": \"^3.0.1\",\n        \"colorette\": \"^2.0.14\",\n        \"commander\": \"^12.1.0\",\n        \"cross-spawn\": \"^7.0.3\",\n        \"envinfo\": \"^7.14.0\",\n        \"fastest-levenshtein\": \"^1.0.12\",\n        \"import-local\": \"^3.0.2\",\n        \"interpret\": \"^3.1.1\",\n        \"rechoir\": \"^0.8.0\",\n        \"webpack-merge\": \"^6.0.1\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"12.1.0\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.1.0.tgz\",\n          \"integrity\": \"sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"webpack-merge\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-merge/-/webpack-merge-6.0.1.tgz\",\n      \"integrity\": \"sha512-hXXvrjtx2PLYx4qruKl+kyRSLc52V+cCvMxRjmKwoA+CBbbF5GfIBtR6kCvl0fYGqTUPKB+1ktVmTHqMOzgCBg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"clone-deep\": \"^4.0.1\",\n        \"flat\": \"^5.0.2\",\n        \"wildcard\": \"^2.0.1\"\n      }\n    },\n    \"webpack-sources\": {\n      \"version\": \"3.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz\",\n      \"integrity\": \"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\",\n      \"dev\": true\n    },\n    \"which\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"isexe\": \"^2.0.0\"\n      }\n    },\n    \"wildcard\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/wildcard/-/wildcard-2.0.1.tgz\",\n      \"integrity\": \"sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==\",\n      \"dev\": true\n    },\n    \"winston\": {\n      \"version\": \"3.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/winston/-/winston-3.13.0.tgz\",\n      \"integrity\": \"sha512-rwidmA1w3SE4j0E5MuIufFhyJPBDG7Nu71RkZor1p2+qHvJSZ9GYDA81AyleQcZbh/+V6HjeBdfnTZJm9rSeQQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@colors/colors\": \"^1.6.0\",\n        \"@dabh/diagnostics\": \"^2.0.2\",\n        \"async\": \"^3.2.3\",\n        \"is-stream\": \"^2.0.0\",\n        \"logform\": \"^2.4.0\",\n        \"one-time\": \"^1.0.0\",\n        \"readable-stream\": \"^3.4.0\",\n        \"safe-stable-stringify\": \"^2.3.1\",\n        \"stack-trace\": \"0.0.x\",\n        \"triple-beam\": \"^1.3.0\",\n        \"winston-transport\": \"^4.7.0\"\n      },\n      \"dependencies\": {\n        \"readable-stream\": {\n          \"version\": \"3.6.2\",\n          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\n          \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\n          \"dev\": true,\n          \"requires\": {\n            \"inherits\": \"^2.0.3\",\n            \"string_decoder\": \"^1.1.1\",\n            \"util-deprecate\": \"^1.0.1\"\n          }\n        }\n      }\n    },\n    \"winston-transport\": {\n      \"version\": \"4.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/winston-transport/-/winston-transport-4.7.0.tgz\",\n      \"integrity\": \"sha512-ajBj65K5I7denzer2IYW6+2bNIVqLGDHqDw3Ow8Ohh+vdW+rv4MZ6eiDvHoKhfJFZ2auyN8byXieDDJ96ViONg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"logform\": \"^2.3.2\",\n        \"readable-stream\": \"^3.6.0\",\n        \"triple-beam\": \"^1.3.0\"\n      },\n      \"dependencies\": {\n        \"readable-stream\": {\n          \"version\": \"3.6.2\",\n          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\n          \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\n          \"dev\": true,\n          \"requires\": {\n            \"inherits\": \"^2.0.3\",\n            \"string_decoder\": \"^1.1.1\",\n            \"util-deprecate\": \"^1.0.1\"\n          }\n        }\n      }\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"\n    },\n    \"ws\": {\n      \"version\": \"8.18.0\",\n      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.18.0.tgz\",\n      \"integrity\": \"sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==\",\n      \"dev\": true,\n      \"requires\": {}\n    },\n    \"yallist\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz\",\n      \"integrity\": \"sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\"\n    },\n    \"yocto-queue\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz\",\n      \"integrity\": \"sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==\",\n      \"dev\": true\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7470703125,
          "content": "{\n  \"private\": true,\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3.2.0\",\n    \"@eslint/js\": \"^9.17.0\",\n    \"es-check\": \"^7.2.1\",\n    \"eslint\": \"^9.17.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"globals\": \"^15.14.0\",\n    \"prettier\": \"^3.4.2\",\n    \"source-map\": \"0.7.4\",\n    \"typescript\": \"^5.7.2\",\n    \"webpack\": \"^5.97.1\",\n    \"webpack-cli\": \"^6.0.1\",\n    \"ws\": \"^8.18.0\"\n  },\n  \"dependencies\": {\n    \"@babel/cli\": \"^7.26.4\",\n    \"@babel/core\": \"^7.26.0\",\n    \"@babel/preset-env\": \"^7.26.0\",\n    \"acorn\": \"^8.14.0\",\n    \"google-closure-compiler\": \"20240317.0.0\",\n    \"html-minifier-terser\": \"7.2.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"fmt\": \"prettier --write src/*.mjs tools/*.mjs\",\n    \"check\": \"prettier --check src/*.mjs tools/*.mjs\"\n  }\n}\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.583984375,
          "content": "[tool.ruff]\nexclude = [\n  \"./cache/\",\n  \"./node_modules/\",\n  \"./site/source/_themes/\",\n  \"./site/source/conf.py\",\n  \"./system/lib/\",\n  \"./test/third_party/\",\n  \"./third_party/\",\n  \"./tools/filelock.py\",\n  \"./tools/scons/\",\n  \".git\",\n]\n\nlint.select = [\n  \"ARG\",\n  \"ASYNC\",\n  \"B\",\n  \"C90\",\n  \"E\",\n  \"F\",\n  \"PERF\",\n  \"PL\",\n  \"W\",\n  \"YTT\",\n]\n\nlint.ignore = [\n  \"ARG001\",\n  \"ARG002\",\n  \"ARG005\",\n  \"B006\",\n  \"B011\",\n  \"B018\",\n  \"B023\",\n  \"B026\",\n  \"B904\",\n  \"E402\",\n  \"E501\",\n  \"E721\",\n  \"E741\",\n  \"PERF203\",\n  \"PERF401\",\n  \"PLR1704\",\n  \"PLR1714\",\n  \"PLR5501\",\n  \"PLW0602\",\n  \"PLW0603\",\n  \"PLW1510\",\n  \"PLW2901\",\n]\nlint.per-file-ignores.\"emrun.py\" = [ \"PLE0704\" ]\nlint.mccabe.max-complexity = 49 # Recommended: 10\nlint.pylint.allow-magic-value-types = [\n  \"bytes\",\n  \"float\",\n  \"int\",\n  \"str\",\n]\nlint.pylint.max-args = 15 # Recommended: 5\nlint.pylint.max-branches = 50 # Recommended: 12\nlint.pylint.max-returns = 16 # Recommended: 6\nlint.pylint.max-statements = 142 # Recommended: 50\n\n[tool.coverage.run]\nsource = [ \".\" ]\nomit = [\n  \"./test/*\",\n  \"./third_party/*\",\n  \"./tools/emcoverage.py\",\n  \"test.py\",\n]\n\n[tool.mypy]\nmypy_path = \"third_party/,third_party/ply,third_party/websockify\"\nfiles = [ \".\" ]\nexclude = '''\n(?x)(\ncache |\nthird_party |\nconf\\.py |\nemrun\\.py |\nsite/source/_themes/ |\ntools/scons/site_scons/site_tools/emscripten/__init__\\.py |\nsite/source/get_wiki\\.py |\ntest/parse_benchmark_output\\.py\n)'''\n\n[[tool.mypy.overrides]]\nmodule = [\n  \"tools.create_dom_pk_codes\",\n  \"tools.webidl_binder\",\n  \"tools.toolchain_profiler\",\n  \"tools.filelock\",\n  \"tools.find_bigvars\",\n  \"leb128\",\n  \"ply.*\",\n]\nignore_errors = true\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.583984375,
          "content": "# TODO(sbc): switch to using Pipenv since it seems like that way to go\n# these day managing python deps.\n# These requirements are only needed for developers who want to run ruff on\n# the codebase and generate docs using Sphinx, not for users of emscripten.\n# Install with `pip3 install -r requirements-dev.txt`\n\ncoverage[toml]==5.5\nmypy==0.971\nruff==0.8.2\ntypes-requests==2.27.14\nunittest-xml-reporting==3.1.0\n\n# This version is mentioned in `site/source/docs/site/about.rst`.\n# Please keep them in sync.\nsphinx==7.1.2\nsphinxcontrib-jquery==4.0\n\n# Needed by test/test_sockets.py\nwebsockify==0.10.0\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}