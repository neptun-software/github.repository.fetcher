{
  "metadata": {
    "timestamp": 1736566443186,
    "page": 42,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQy",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gabime/spdlog",
      "stars": 25008,
      "defaultBranch": "v1.x",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.42578125,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\nAccessModifierOffset: -4\nStandard:        c++17\nIndentWidth:     4\nTabWidth:        4\nUseTab:          Never\nColumnLimit:     100\nAlignAfterOpenBracket: Align\nBinPackParameters: false\nAlignEscapedNewlines: Left\nAlwaysBreakTemplateDeclarations: Yes\nPackConstructorInitializers: Never\nBreakConstructorInitializersBeforeComma: false\nIndentPPDirectives: BeforeHash\nSortIncludes:    Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.6875,
          "content": "Checks: 'cppcoreguidelines-*,\nperformance-*,\nmodernize-*,\ngoogle-*,\nmisc-*\ncert-*,\nreadability-*,\nclang-analyzer-*,\n-performance-unnecessary-value-param,\n-modernize-use-trailing-return-type,\n-google-runtime-references,\n-misc-non-private-member-variables-in-classes,\n-readability-braces-around-statements,\n-google-readability-braces-around-statements,\n-cppcoreguidelines-avoid-magic-numbers,\n-readability-magic-numbers,\n-readability-magic-numbers,\n-cppcoreguidelines-pro-type-vararg,\n-cppcoreguidelines-pro-bounds-pointer-arithmetic,\n-cppcoreguidelines-avoid-c-arrays,\n-modernize-avoid-c-arrays,\n-cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n-readability-named-parameter,\n-cert-env33-c\n'\n\n\nWarningsAsErrors: ''\nHeaderFilterRegex: '*spdlog/[^f].*'\nFormatStyle:     none\n\nCheckOptions:    \n  - key:             google-readability-braces-around-statements.ShortStatementLines\n    value:           '1'\n  - key:             google-readability-function-size.StatementThreshold\n    value:           '800'\n  - key:             google-readability-namespace-comments.ShortNamespaceLines\n    value:           '10'\n  - key:             google-readability-namespace-comments.SpacesBeforeComments\n    value:           '2'\n  - key:             modernize-loop-convert.MaxCopySize\n    value:           '16'\n  - key:             modernize-loop-convert.MinConfidence\n    value:           reasonable\n  - key:             modernize-loop-convert.NamingStyle\n    value:           CamelCase\n  - key:             modernize-pass-by-value.IncludeStyle\n    value:           llvm\n  - key:             modernize-replace-auto-ptr.IncludeStyle\n    value:           llvm\n  - key:             modernize-use-nullptr.NullMacros\n    value:           'NULL'\n\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.21484375,
          "content": "# clang-format\n1a0bfc7a89f2d58e22605a4dc7e18a9a555b65aa\n95c226e9c92928e20ccdac0d060e7241859e282b\n9d52261185b5f2c454c381d626ec5c84d7b195f4\n4b2a8219d5d1b40062d030441adde7d1fb0d4f84\n0a53eafe18d983c7c8ba4cadd02d0cc7f7308f28\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0126953125,
          "content": "* text=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1103515625,
          "content": "# Auto generated files\r\n[Dd]ebug/\r\n[Rr]elease/\r\nbuild/*\r\n*.slo\r\n*.lo\r\n*.o\r\n*.obj\r\n*.suo\r\n*.tlog\r\n*.ilk\r\n*.log\r\n*.pdb\r\n*.idb\r\n*.iobj\r\n*.ipdb\r\n*.opensdf\r\n*.sdf\r\n\r\n# Compiled Dynamic libraries\r\n*.so\r\n*.dylib\r\n*.dll\r\n\r\n# Compiled Static libraries\r\n*.lai\r\n*.la\r\n*.a\r\n*.lib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n\r\n# Codelite\r\n.codelite\r\n\r\n# KDevelop\r\n*.kdev4\r\n\r\n# .orig files\r\n*.orig\r\n\r\n# example  files\r\nexample/*\r\n!example/example.cpp\r\n!example/bench.cpp\r\n!example/utils.h\r\n!example/Makefile*\r\n!example/example.sln\r\n!example/example.vcxproj\r\n!example/CMakeLists.txt\r\n!example/meson.build\r\n!example/multisink.cpp\r\n!example/jni\r\n\r\n# generated files\r\ngenerated\r\nversion.rc\r\n\r\n# Cmake\r\nCMakeCache.txt\r\nCMakeFiles\r\nCMakeScripts\r\nMakefile\r\ncmake_install.cmake\r\ninstall_manifest.txt\r\n/tests/tests.VC.VC.opendb\r\n/tests/tests.VC.db\r\n/tests/tests\r\n/tests/logs/*\r\nspdlogConfig.cmake\r\nspdlogConfigVersion.cmake\r\ncompile_commands.json\r\n\r\n# idea\r\n.idea/\r\n.cache/\r\n.vscode/\r\ncmake-build-*/\r\n*.db\r\n*.ipch\r\n*.filters\r\n*.db-wal\r\n*.opendb\r\n*.db-shm\r\n*.vcxproj\r\n*.tcl\r\n*.user\r\n*.sln\r\n\r\n# macos\r\n*.DS_store\r\n*.xcodeproj/\r\n/.vs\r\n/out/build\r\n/CMakeSettings.json\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.224609375,
          "content": "# Copyright(c) 2019 spdlog authors Distributed under the MIT License (http://opensource.org/licenses/MIT)\n\ncmake_minimum_required(VERSION 3.10...3.21)\n\n# ---------------------------------------------------------------------------------------\n# Start spdlog project\n# ---------------------------------------------------------------------------------------\ninclude(cmake/utils.cmake)\ninclude(cmake/ide.cmake)\n\nspdlog_extract_version()\n\nproject(spdlog VERSION ${SPDLOG_VERSION} LANGUAGES CXX)\nmessage(STATUS \"Build spdlog: ${SPDLOG_VERSION}\")\n\ninclude(GNUInstallDirs)\n\n# ---------------------------------------------------------------------------------------\n# Set default build to release\n# ---------------------------------------------------------------------------------------\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose Release or Debug\" FORCE)\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Compiler config\n# ---------------------------------------------------------------------------------------\nif(SPDLOG_USE_STD_FORMAT)\n    set(CMAKE_CXX_STANDARD 20)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nelseif(NOT CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 11)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nif(CMAKE_SYSTEM_NAME MATCHES \"CYGWIN\" OR CMAKE_SYSTEM_NAME MATCHES \"MSYS\" OR CMAKE_SYSTEM_NAME MATCHES \"MINGW\")\n    set(CMAKE_CXX_EXTENSIONS ON)\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Set SPDLOG_MASTER_PROJECT to ON if we are building spdlog\n# ---------------------------------------------------------------------------------------\n# Check if spdlog is being used directly or via add_subdirectory, but allow overriding\nif(NOT DEFINED SPDLOG_MASTER_PROJECT)\n    if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n        set(SPDLOG_MASTER_PROJECT ON)\n    else()\n        set(SPDLOG_MASTER_PROJECT OFF)\n    endif()\nendif()\n\noption(SPDLOG_BUILD_ALL \"Build all artifacts\" OFF)\n\n# build shared option\noption(SPDLOG_BUILD_SHARED \"Build shared library\" OFF)\n\n# precompiled headers option\noption(SPDLOG_ENABLE_PCH \"Build static or shared library using precompiled header to speed up compilation time\" OFF)\n\n# build position independent code\noption(SPDLOG_BUILD_PIC \"Build position independent code (-fPIC)\" OFF)\n\n# example options\noption(SPDLOG_BUILD_EXAMPLE \"Build example\" ${SPDLOG_MASTER_PROJECT})\noption(SPDLOG_BUILD_EXAMPLE_HO \"Build header only example\" OFF)\n\n# testing options\noption(SPDLOG_BUILD_TESTS \"Build tests\" OFF)\noption(SPDLOG_BUILD_TESTS_HO \"Build tests using the header only version\" OFF)\n\n# bench options\noption(SPDLOG_BUILD_BENCH \"Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)\" OFF)\n\n# sanitizer options\noption(SPDLOG_SANITIZE_ADDRESS \"Enable address sanitizer in tests\" OFF)\noption(SPDLOG_SANITIZE_THREAD \"Enable thread sanitizer in tests\" OFF)\nif(SPDLOG_SANITIZE_ADDRESS AND SPDLOG_SANITIZE_THREAD)\n    message(FATAL_ERROR \"SPDLOG_SANITIZE_ADDRESS and SPDLOG_SANITIZE_THREAD are mutually exclusive\")\nendif()\n\n# warning options\noption(SPDLOG_BUILD_WARNINGS \"Enable compiler warnings\" OFF)\n\n# install options\noption(SPDLOG_SYSTEM_INCLUDES \"Include as system headers (skip for clang-tidy).\" OFF)\noption(SPDLOG_INSTALL \"Generate the install target\" ${SPDLOG_MASTER_PROJECT})\noption(SPDLOG_USE_STD_FORMAT \"Use std::format instead of fmt library.\" OFF)\noption(SPDLOG_FMT_EXTERNAL \"Use external fmt library instead of bundled\" OFF)\noption(SPDLOG_FMT_EXTERNAL_HO \"Use external fmt header-only library instead of bundled\" OFF)\noption(SPDLOG_NO_EXCEPTIONS \"Compile with -fno-exceptions. Call abort() on any spdlog exceptions\" OFF)\n\nif(SPDLOG_FMT_EXTERNAL AND SPDLOG_FMT_EXTERNAL_HO)\n    message(FATAL_ERROR \"SPDLOG_FMT_EXTERNAL and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive\")\nendif()\n\nif(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL_HO)\n    message(FATAL_ERROR \"SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive\")\nendif()\n\nif(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL)\n    message(FATAL_ERROR \"SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL are mutually exclusive\")\nendif()\n\n# misc tweakme options\nif(WIN32)\n    option(SPDLOG_WCHAR_SUPPORT \"Support wchar api\" OFF)\n    option(SPDLOG_WCHAR_FILENAMES \"Support wchar filenames\" OFF)\n    option(SPDLOG_WCHAR_CONSOLE \"Support wchar output to console\" OFF)\nelse()\n    set(SPDLOG_WCHAR_SUPPORT OFF CACHE BOOL \"non supported option\" FORCE)\n    set(SPDLOG_WCHAR_FILENAMES OFF CACHE BOOL \"non supported option\" FORCE)\n    set(SPDLOG_WCHAR_CONSOLE OFF CACHE BOOL \"non supported option\" FORCE)\nendif()\n\nif(MSVC)\n    option(SPDLOG_MSVC_UTF8 \"Enable/disable msvc /utf-8 flag required by fmt lib\" ON)\nendif()\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n    option(SPDLOG_CLOCK_COARSE \"Use CLOCK_REALTIME_COARSE instead of the regular clock,\" OFF)\nelse()\n    set(SPDLOG_CLOCK_COARSE OFF CACHE BOOL \"non supported option\" FORCE)\nendif()\n\noption(SPDLOG_PREVENT_CHILD_FD \"Prevent from child processes to inherit log file descriptors\" OFF)\noption(SPDLOG_NO_THREAD_ID \"prevent spdlog from querying the thread id on each log call if thread id is not needed\" OFF)\noption(SPDLOG_NO_TLS \"prevent spdlog from using thread local storage\" OFF)\noption(\n    SPDLOG_NO_ATOMIC_LEVELS\n    \"prevent spdlog from using of std::atomic log levels (use only if your code never modifies log levels concurrently\"\n    OFF)\noption(SPDLOG_DISABLE_DEFAULT_LOGGER \"Disable default logger creation\" OFF)\n\n# clang-tidy\noption(SPDLOG_TIDY \"run clang-tidy\" OFF)\n\nif(SPDLOG_TIDY)\n    set(CMAKE_CXX_CLANG_TIDY \"clang-tidy\")\n    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n    message(STATUS \"Enabled clang-tidy\")\nendif()\n\nif(SPDLOG_BUILD_PIC)\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\nfind_package(Threads REQUIRED)\nmessage(STATUS \"Build type: \" ${CMAKE_BUILD_TYPE})\n# ---------------------------------------------------------------------------------------\n# Static/Shared library\n# ---------------------------------------------------------------------------------------\nset(SPDLOG_SRCS src/spdlog.cpp src/stdout_sinks.cpp src/color_sinks.cpp src/file_sinks.cpp src/async.cpp src/cfg.cpp)\n\nif(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)\n    list(APPEND SPDLOG_SRCS src/bundled_fmtlib_format.cpp)\nendif()\n\nif(SPDLOG_BUILD_SHARED OR BUILD_SHARED_LIBS)\n    if(WIN32)\n        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc @ONLY)\n        list(APPEND SPDLOG_SRCS ${CMAKE_CURRENT_BINARY_DIR}/version.rc)\n    endif()\n    add_library(spdlog SHARED ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})\n    target_compile_definitions(spdlog PUBLIC SPDLOG_SHARED_LIB)\n    if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n        target_compile_options(spdlog PUBLIC $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<NOT:$<COMPILE_LANGUAGE:CUDA>>>:/wd4251\n                                             /wd4275>)\n    endif()\n    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)\n        target_compile_definitions(spdlog PRIVATE FMT_LIB_EXPORT PUBLIC FMT_SHARED)\n    endif()\nelse()\n    add_library(spdlog STATIC ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})\nendif()\n\nadd_library(spdlog::spdlog ALIAS spdlog)\n\nset(SPDLOG_INCLUDES_LEVEL \"\")\nif(SPDLOG_SYSTEM_INCLUDES)\n    set(SPDLOG_INCLUDES_LEVEL \"SYSTEM\")\nendif()\n\ntarget_compile_definitions(spdlog PUBLIC SPDLOG_COMPILED_LIB)\ntarget_include_directories(spdlog ${SPDLOG_INCLUDES_LEVEL} PUBLIC \"$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>\"\n                                                                  \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\")\ntarget_link_libraries(spdlog PUBLIC Threads::Threads)\nspdlog_enable_warnings(spdlog)\n\nset_target_properties(spdlog PROPERTIES VERSION ${SPDLOG_VERSION} SOVERSION\n                                                                  ${SPDLOG_VERSION_MAJOR}.${SPDLOG_VERSION_MINOR})\nset_target_properties(spdlog PROPERTIES DEBUG_POSTFIX d)\n\nif(COMMAND target_precompile_headers AND SPDLOG_ENABLE_PCH)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/pch.h.in ${PROJECT_BINARY_DIR}/spdlog_pch.h @ONLY)\n    target_precompile_headers(spdlog PRIVATE ${PROJECT_BINARY_DIR}/spdlog_pch.h)\nendif()\n\n# sanitizer support\nif(SPDLOG_SANITIZE_ADDRESS)\n    spdlog_enable_addr_sanitizer(spdlog)\nelseif (SPDLOG_SANITIZE_THREAD)\n    spdlog_enable_thread_sanitizer(spdlog)\nendif ()\n\n# ---------------------------------------------------------------------------------------\n# Header only version\n# ---------------------------------------------------------------------------------------\nadd_library(spdlog_header_only INTERFACE)\nadd_library(spdlog::spdlog_header_only ALIAS spdlog_header_only)\n\ntarget_include_directories(\n    spdlog_header_only ${SPDLOG_INCLUDES_LEVEL} INTERFACE \"$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>\"\n                                                          \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\")\ntarget_link_libraries(spdlog_header_only INTERFACE Threads::Threads)\n\n# ---------------------------------------------------------------------------------------\n# Use fmt package if using external fmt\n# ---------------------------------------------------------------------------------------\nif(SPDLOG_FMT_EXTERNAL OR SPDLOG_FMT_EXTERNAL_HO)\n    if(NOT TARGET fmt::fmt)\n        find_package(fmt CONFIG REQUIRED)\n    endif()\n    target_compile_definitions(spdlog PUBLIC SPDLOG_FMT_EXTERNAL)\n    target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FMT_EXTERNAL)\n\n    # use external fmt-header-only\n    if(SPDLOG_FMT_EXTERNAL_HO)\n        target_link_libraries(spdlog PUBLIC fmt::fmt-header-only)\n        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt-header-only)\n    else() # use external compile fmt\n        target_link_libraries(spdlog PUBLIC fmt::fmt)\n        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt)\n    endif()\n\n    set(PKG_CONFIG_REQUIRES fmt) # add dependency to pkg-config\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Check if fwrite_unlocked/_fwrite_nolock is available\n# ---------------------------------------------------------------------------------------\ninclude(CheckSymbolExists)\nif(WIN32)\n    check_symbol_exists(_fwrite_nolock \"stdio.h\" HAVE_FWRITE_UNLOCKED)\nelse ()\n    check_symbol_exists(fwrite_unlocked \"stdio.h\" HAVE_FWRITE_UNLOCKED)\nendif()\nif(HAVE_FWRITE_UNLOCKED)\n    target_compile_definitions(spdlog PRIVATE SPDLOG_FWRITE_UNLOCKED)\n    target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FWRITE_UNLOCKED)\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Add required libraries for Android CMake build\n# ---------------------------------------------------------------------------------------\nif(ANDROID)\n    target_link_libraries(spdlog PUBLIC log)\n    target_link_libraries(spdlog_header_only INTERFACE log)\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Misc definitions according to tweak options\n# ---------------------------------------------------------------------------------------\nset(SPDLOG_WCHAR_TO_UTF8_SUPPORT ${SPDLOG_WCHAR_SUPPORT})\nset(SPDLOG_UTF8_TO_WCHAR_CONSOLE ${SPDLOG_WCHAR_CONSOLE})\nforeach(\n    SPDLOG_OPTION\n    SPDLOG_WCHAR_TO_UTF8_SUPPORT\n    SPDLOG_UTF8_TO_WCHAR_CONSOLE\n    SPDLOG_WCHAR_FILENAMES\n    SPDLOG_NO_EXCEPTIONS\n    SPDLOG_CLOCK_COARSE\n    SPDLOG_PREVENT_CHILD_FD\n    SPDLOG_NO_THREAD_ID\n    SPDLOG_NO_TLS\n    SPDLOG_NO_ATOMIC_LEVELS\n    SPDLOG_DISABLE_DEFAULT_LOGGER\n    SPDLOG_USE_STD_FORMAT)\n    if(${SPDLOG_OPTION})\n        target_compile_definitions(spdlog PUBLIC ${SPDLOG_OPTION})\n        target_compile_definitions(spdlog_header_only INTERFACE ${SPDLOG_OPTION})\n    endif()\nendforeach()\n\nif(MSVC)\n    target_compile_options(spdlog PRIVATE \"/Zc:__cplusplus\")\n    target_compile_options(spdlog_header_only INTERFACE \"/Zc:__cplusplus\")\n    if(SPDLOG_MSVC_UTF8)\n        # fmtlib requires the /utf-8 flag when building with msvc.\n\t    # see https://github.com/fmtlib/fmt/pull/4159 on the purpose of the additional\n        # \"$<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>\"\n\t    target_compile_options(spdlog PUBLIC $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)\n\t    target_compile_options(spdlog_header_only INTERFACE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)\n     endif()\nendif()\n\n# ---------------------------------------------------------------------------------------\n# If exceptions are disabled, disable them in the bundled fmt as well\n# ---------------------------------------------------------------------------------------\nif(SPDLOG_NO_EXCEPTIONS)\n    if(NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)\n        target_compile_definitions(spdlog PUBLIC FMT_EXCEPTIONS=0)\n    endif()\n    if(NOT MSVC)\n        target_compile_options(spdlog PRIVATE -fno-exceptions)\n    else()\n        target_compile_options(spdlog PRIVATE /EHs-c-)\n    endif()\nendif()\n# ---------------------------------------------------------------------------------------\n# Build binaries\n# ---------------------------------------------------------------------------------------\nif(SPDLOG_BUILD_EXAMPLE OR SPDLOG_BUILD_EXAMPLE_HO OR SPDLOG_BUILD_ALL)\n    message(STATUS \"Generating example(s)\")\n    add_subdirectory(example)\n    spdlog_enable_warnings(example)\n    if(SPDLOG_BUILD_EXAMPLE_HO)\n        spdlog_enable_warnings(example_header_only)\n    endif()\nendif()\n\nif(SPDLOG_BUILD_TESTS OR SPDLOG_BUILD_TESTS_HO OR SPDLOG_BUILD_ALL)\n    message(STATUS \"Generating tests\")\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\nif(SPDLOG_BUILD_BENCH OR SPDLOG_BUILD_ALL)\n    message(STATUS \"Generating benchmarks\")\n    add_subdirectory(bench)\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Install\n# ---------------------------------------------------------------------------------------\nif(SPDLOG_INSTALL)\n    message(STATUS \"Generating install\")\n    set(project_config_in \"${CMAKE_CURRENT_LIST_DIR}/cmake/spdlogConfig.cmake.in\")\n    set(project_config_out \"${CMAKE_CURRENT_BINARY_DIR}/spdlogConfig.cmake\")\n    set(config_targets_file \"spdlogConfigTargets.cmake\")\n    set(version_config_file \"${CMAKE_CURRENT_BINARY_DIR}/spdlogConfigVersion.cmake\")\n    set(export_dest_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/spdlog\")\n    set(pkgconfig_install_dir \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n    set(pkg_config \"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc\")\n\n    # ---------------------------------------------------------------------------------------\n    # Include files\n    # ---------------------------------------------------------------------------------------\n    install(DIRECTORY include/ DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\" PATTERN \"fmt/bundled\" EXCLUDE)\n    install(\n        TARGETS spdlog spdlog_header_only\n        EXPORT spdlog\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)\n        install(DIRECTORY include/${PROJECT_NAME}/fmt/bundled/\n                DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/fmt/bundled/\")\n    endif()\n\n    # ---------------------------------------------------------------------------------------\n    # Install pkg-config file\n    # ---------------------------------------------------------------------------------------\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n        set(PKG_CONFIG_INCLUDEDIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    else()\n        set(PKG_CONFIG_INCLUDEDIR \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\n    endif()\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n        set(PKG_CONFIG_LIBDIR \"${CMAKE_INSTALL_LIBDIR}\")\n    else()\n        set(PKG_CONFIG_LIBDIR \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n    get_target_property(PKG_CONFIG_DEFINES spdlog INTERFACE_COMPILE_DEFINITIONS)\n    string(REPLACE \";\" \" -D\" PKG_CONFIG_DEFINES \"${PKG_CONFIG_DEFINES}\")\n    string(CONCAT PKG_CONFIG_DEFINES \"-D\" \"${PKG_CONFIG_DEFINES}\")\n    configure_file(\"cmake/${PROJECT_NAME}.pc.in\" \"${pkg_config}\" @ONLY)\n    install(FILES \"${pkg_config}\" DESTINATION \"${pkgconfig_install_dir}\")\n\n    # ---------------------------------------------------------------------------------------\n    # Install CMake config files\n    # ---------------------------------------------------------------------------------------\n    export(TARGETS spdlog spdlog_header_only NAMESPACE spdlog::\n           FILE \"${CMAKE_CURRENT_BINARY_DIR}/${config_targets_file}\")\n    install(EXPORT spdlog DESTINATION ${export_dest_dir} NAMESPACE spdlog:: FILE ${config_targets_file})\n\n    include(CMakePackageConfigHelpers)\n    configure_package_config_file(\"${project_config_in}\" \"${project_config_out}\" INSTALL_DESTINATION ${export_dest_dir})\n\n    write_basic_package_version_file(\"${version_config_file}\" COMPATIBILITY SameMajorVersion)\n    install(FILES \"${project_config_out}\" \"${version_config_file}\" DESTINATION \"${export_dest_dir}\")\n\n    # ---------------------------------------------------------------------------------------\n    # Support creation of installable packages\n    # ---------------------------------------------------------------------------------------\n    include(cmake/spdlogCPack.cmake)\nendif()\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.986328125,
          "content": "Header Only Version\r\n==================================================================\r\nJust copy the files to your build tree and use a C++11 compiler.  \r\nOr use CMake:\r\n``` \r\n  add_executable(example_header_only example.cpp)\r\n  target_link_libraries(example_header_only spdlog::spdlog_header_only)\r\n```\r\n\r\nCompiled Library Version\r\n==================================================================\r\nCMake:\r\n```  \r\n  add_executable(example example.cpp)\r\n  target_link_libraries(example spdlog::spdlog)\r\n```\r\n\r\nOr copy files src/*.cpp to your build tree and pass the -DSPDLOG_COMPILED_LIB to the compiler.\r\n\r\nImportant Information for Compilation:\r\n==================================================================\r\n* If you encounter compilation errors with gcc 4.8.x, please note that gcc 4.8.x does not fully support C++11. In such cases, consider upgrading your compiler or using a different version that fully supports C++11 standards\r\n\r\nTested on:  \r\ngcc 4.8.1 and above\r\nclang 3.5\r\nVisual Studio 2013"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.322265625,
          "content": "The MIT License (MIT)\r\n\r\nCopyright (c) 2016 Gabi Melman.                                       \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n-- NOTE: Third party dependency used by this software --\r\nThis software depends on the fmt lib (MIT License),\r\nand users must comply to its license: https://raw.githubusercontent.com/fmtlib/fmt/master/LICENSE\r\n\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.064453125,
          "content": "# spdlog\r\n\r\n \r\n[![ci](https://github.com/gabime/spdlog/actions/workflows/linux.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/linux.yml)&nbsp;\r\n[![ci](https://github.com/gabime/spdlog/actions/workflows/windows.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/windows.yml)&nbsp;\r\n[![ci](https://github.com/gabime/spdlog/actions/workflows/macos.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/macos.yml)&nbsp;\r\n[![Build status](https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&branch=v1.x)](https://ci.appveyor.com/project/gabime/spdlog) [![Release](https://img.shields.io/github/release/gabime/spdlog.svg)](https://github.com/gabime/spdlog/releases/latest)\r\n\r\nFast C++ logging library\r\n\r\n\r\n## Install\r\n#### Header-only version\r\nCopy the include [folder](https://github.com/gabime/spdlog/tree/v1.x/include/spdlog) to your build tree and use a C++11 compiler.\r\n\r\n#### Compiled version (recommended - much faster compile times)\r\n```console\r\n$ git clone https://github.com/gabime/spdlog.git\r\n$ cd spdlog && mkdir build && cd build\r\n$ cmake .. && cmake --build .\r\n```\r\nsee example [CMakeLists.txt](https://github.com/gabime/spdlog/blob/v1.x/example/CMakeLists.txt) on how to use.\r\n\r\n## Platforms\r\n* Linux, FreeBSD, OpenBSD, Solaris, AIX\r\n* Windows (msvc 2013+, cygwin)\r\n* macOS (clang 3.5+)\r\n* Android\r\n\r\n## Package managers:\r\n* Debian: `sudo apt install libspdlog-dev`\r\n* Homebrew: `brew install spdlog`\r\n* MacPorts: `sudo port install spdlog`\r\n* FreeBSD:  `pkg install spdlog`\r\n* Fedora: `dnf install spdlog`\r\n* Gentoo: `emerge dev-libs/spdlog`\r\n* Arch Linux: `pacman -S spdlog`\r\n* openSUSE: `sudo zypper in spdlog-devel`\r\n* vcpkg: `vcpkg install spdlog`\r\n* conan: `conan install --requires=spdlog/[*]`\r\n* conda: `conda install -c conda-forge spdlog`\r\n* build2: ```depends: spdlog ^1.8.2```\r\n\r\n\r\n## Features\r\n* Very fast (see [benchmarks](#benchmarks) below).\r\n* Headers only or compiled\r\n* Feature-rich formatting, using the excellent [fmt](https://github.com/fmtlib/fmt) library.\r\n* Asynchronous mode (optional)\r\n* [Custom](https://github.com/gabime/spdlog/wiki/3.-Custom-formatting) formatting.\r\n* Multi/Single threaded loggers.\r\n* Various log targets:\r\n  * Rotating log files.\r\n  * Daily log files.\r\n  * Console logging (colors supported).\r\n  * syslog.\r\n  * Windows event log.\r\n  * Windows debugger (```OutputDebugString(..)```).\r\n  * Log to Qt widgets ([example](#log-to-qt-with-nice-colors)).\r\n  * Easily [extendable](https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink) with custom log targets.\r\n* Log filtering - log levels can be modified at runtime as well as compile time.\r\n* Support for loading log levels from argv or environment var.\r\n* [Backtrace](#backtrace-support) support - store debug messages in a ring buffer and display them later on demand.\r\n\r\n## Usage samples\r\n\r\n#### Basic usage\r\n```c++\r\n#include \"spdlog/spdlog.h\"\r\n\r\nint main() \r\n{\r\n    spdlog::info(\"Welcome to spdlog!\");\r\n    spdlog::error(\"Some error message with arg: {}\", 1);\r\n    \r\n    spdlog::warn(\"Easy padding in numbers like {:08d}\", 12);\r\n    spdlog::critical(\"Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}\", 42);\r\n    spdlog::info(\"Support for floats {:03.2f}\", 1.23456);\r\n    spdlog::info(\"Positional args are {1} {0}..\", \"too\", \"supported\");\r\n    spdlog::info(\"{:<30}\", \"left aligned\");\r\n    \r\n    spdlog::set_level(spdlog::level::debug); // Set global log level to debug\r\n    spdlog::debug(\"This message should be displayed..\");    \r\n    \r\n    // change log pattern\r\n    spdlog::set_pattern(\"[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v\");\r\n    \r\n    // Compile time log levels\r\n    // Note that this does not change the current log level, it will only\r\n    // remove (depending on SPDLOG_ACTIVE_LEVEL) the call on the release code.\r\n    SPDLOG_TRACE(\"Some trace message with param {}\", 42);\r\n    SPDLOG_DEBUG(\"Some debug message\");\r\n}\r\n\r\n```\r\n---\r\n#### Create stdout/stderr logger object\r\n```c++\r\n#include \"spdlog/spdlog.h\"\r\n#include \"spdlog/sinks/stdout_color_sinks.h\"\r\nvoid stdout_example()\r\n{\r\n    // create a color multi-threaded logger\r\n    auto console = spdlog::stdout_color_mt(\"console\");    \r\n    auto err_logger = spdlog::stderr_color_mt(\"stderr\");    \r\n    spdlog::get(\"console\")->info(\"loggers can be retrieved from a global registry using the spdlog::get(logger_name)\");\r\n}\r\n```\r\n\r\n---\r\n#### Basic file logger\r\n```c++\r\n#include \"spdlog/sinks/basic_file_sink.h\"\r\nvoid basic_logfile_example()\r\n{\r\n    try \r\n    {\r\n        auto logger = spdlog::basic_logger_mt(\"basic_logger\", \"logs/basic-log.txt\");\r\n    }\r\n    catch (const spdlog::spdlog_ex &ex)\r\n    {\r\n        std::cout << \"Log init failed: \" << ex.what() << std::endl;\r\n    }\r\n}\r\n```\r\n---\r\n#### Rotating files\r\n```c++\r\n#include \"spdlog/sinks/rotating_file_sink.h\"\r\nvoid rotating_example()\r\n{\r\n    // Create a file rotating logger with 5 MB size max and 3 rotated files\r\n    auto max_size = 1048576 * 5;\r\n    auto max_files = 3;\r\n    auto logger = spdlog::rotating_logger_mt(\"some_logger_name\", \"logs/rotating.txt\", max_size, max_files);\r\n}\r\n```\r\n\r\n---\r\n#### Daily files\r\n```c++\r\n\r\n#include \"spdlog/sinks/daily_file_sink.h\"\r\nvoid daily_example()\r\n{\r\n    // Create a daily logger - a new file is created every day at 2:30 am\r\n    auto logger = spdlog::daily_logger_mt(\"daily_logger\", \"logs/daily.txt\", 2, 30);\r\n}\r\n\r\n```\r\n\r\n---\r\n#### Backtrace support\r\n```c++\r\n// Debug messages can be stored in a ring buffer instead of being logged immediately.\r\n// This is useful to display debug logs only when needed (e.g. when an error happens).\r\n// When needed, call dump_backtrace() to dump them to your log.\r\n\r\nspdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. \r\n// or my_logger->enable_backtrace(32)..\r\nfor(int i = 0; i < 100; i++)\r\n{\r\n  spdlog::debug(\"Backtrace message {}\", i); // not logged yet..\r\n}\r\n// e.g. if some error happened:\r\nspdlog::dump_backtrace(); // log them now! show the last 32 messages\r\n// or my_logger->dump_backtrace(32)..\r\n```\r\n\r\n---\r\n#### Periodic flush\r\n```c++\r\n// periodically flush all *registered* loggers every 3 seconds:\r\n// warning: only use if all your loggers are thread-safe (\"_mt\" loggers)\r\nspdlog::flush_every(std::chrono::seconds(3));\r\n\r\n```\r\n\r\n---\r\n#### Stopwatch\r\n```c++\r\n// Stopwatch support for spdlog\r\n#include \"spdlog/stopwatch.h\"\r\nvoid stopwatch_example()\r\n{\r\n    spdlog::stopwatch sw;    \r\n    spdlog::debug(\"Elapsed {}\", sw);\r\n    spdlog::debug(\"Elapsed {:.3}\", sw);       \r\n}\r\n\r\n```\r\n\r\n---\r\n#### Log binary data in hex\r\n```c++\r\n// many types of std::container<char> types can be used.\r\n// ranges are supported too.\r\n// format flags:\r\n// {:X} - print in uppercase.\r\n// {:s} - don't separate each byte with space.\r\n// {:p} - don't print the position on each line start.\r\n// {:n} - don't split the output into lines.\r\n// {:a} - show ASCII if :n is not set.\r\n\r\n#include \"spdlog/fmt/bin_to_hex.h\"\r\n\r\nvoid binary_example()\r\n{\r\n    auto console = spdlog::get(\"console\");\r\n    std::array<char, 80> buf;\r\n    console->info(\"Binary example: {}\", spdlog::to_hex(buf));\r\n    console->info(\"Another binary example:{:n}\", spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));\r\n    // more examples:\r\n    // logger->info(\"uppercase: {:X}\", spdlog::to_hex(buf));\r\n    // logger->info(\"uppercase, no delimiters: {:Xs}\", spdlog::to_hex(buf));\r\n    // logger->info(\"uppercase, no delimiters, no position info: {:Xsp}\", spdlog::to_hex(buf));\r\n}\r\n\r\n```\r\n\r\n---\r\n#### Logger with multi sinks - each with a different format and log level\r\n```c++\r\n\r\n// create a logger with 2 targets, with different log levels and formats.\r\n// The console will show only warnings or errors, while the file will log all.\r\nvoid multi_sink_example()\r\n{\r\n    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();\r\n    console_sink->set_level(spdlog::level::warn);\r\n    console_sink->set_pattern(\"[multi_sink_example] [%^%l%$] %v\");\r\n\r\n    auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>(\"logs/multisink.txt\", true);\r\n    file_sink->set_level(spdlog::level::trace);\r\n\r\n    spdlog::logger logger(\"multi_sink\", {console_sink, file_sink});\r\n    logger.set_level(spdlog::level::debug);\r\n    logger.warn(\"this should appear in both console and file\");\r\n    logger.info(\"this message should not appear in the console, only in the file\");\r\n}\r\n```\r\n\r\n---\r\n#### User-defined callbacks about log events\r\n```c++\r\n\r\n// create a logger with a lambda function callback, the callback will be called\r\n// each time something is logged to the logger\r\nvoid callback_example()\r\n{\r\n    auto callback_sink = std::make_shared<spdlog::sinks::callback_sink_mt>([](const spdlog::details::log_msg &msg) {\r\n         // for example you can be notified by sending an email to yourself\r\n    });\r\n    callback_sink->set_level(spdlog::level::err);\r\n\r\n    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();\r\n    spdlog::logger logger(\"custom_callback_logger\", {console_sink, callback_sink});\r\n\r\n    logger.info(\"some info log\");\r\n    logger.error(\"critical issue\"); // will notify you\r\n}\r\n```\r\n\r\n---\r\n#### Asynchronous logging\r\n```c++\r\n#include \"spdlog/async.h\"\r\n#include \"spdlog/sinks/basic_file_sink.h\"\r\nvoid async_example()\r\n{\r\n    // default thread pool settings can be modified *before* creating the async logger:\r\n    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.\r\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\r\n    // alternatively:\r\n    // auto async_file = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>(\"async_file_logger\", \"logs/async_log.txt\");   \r\n}\r\n\r\n```\r\n\r\n---\r\n#### Asynchronous logger with multi sinks\r\n```c++\r\n#include \"spdlog/async.h\"\r\n#include \"spdlog/sinks/stdout_color_sinks.h\"\r\n#include \"spdlog/sinks/rotating_file_sink.h\"\r\n\r\nvoid multi_sink_example2()\r\n{\r\n    spdlog::init_thread_pool(8192, 1);\r\n    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();\r\n    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>(\"mylog.txt\", 1024*1024*10, 3);\r\n    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};\r\n    auto logger = std::make_shared<spdlog::async_logger>(\"loggername\", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);\r\n    spdlog::register_logger(logger);\r\n}\r\n```\r\n \r\n---\r\n#### User-defined types\r\n```c++\r\ntemplate<>\r\nstruct fmt::formatter<my_type> : fmt::formatter<std::string>\r\n{\r\n    auto format(my_type my, format_context &ctx) const -> decltype(ctx.out())\r\n    {\r\n        return fmt::format_to(ctx.out(), \"[my_type i={}]\", my.i);\r\n    }\r\n};\r\n\r\nvoid user_defined_example()\r\n{\r\n    spdlog::info(\"user defined type: {}\", my_type(14));\r\n}\r\n\r\n```\r\n\r\n---\r\n#### User-defined flags in the log pattern\r\n```c++ \r\n// Log patterns can contain custom flags.\r\n// the following example will add new flag '%*' - which will be bound to a <my_formatter_flag> instance.\r\n#include \"spdlog/pattern_formatter.h\"\r\nclass my_formatter_flag : public spdlog::custom_flag_formatter\r\n{\r\npublic:\r\n    void format(const spdlog::details::log_msg &, const std::tm &, spdlog::memory_buf_t &dest) override\r\n    {\r\n        std::string some_txt = \"custom-flag\";\r\n        dest.append(some_txt.data(), some_txt.data() + some_txt.size());\r\n    }\r\n\r\n    std::unique_ptr<custom_flag_formatter> clone() const override\r\n    {\r\n        return spdlog::details::make_unique<my_formatter_flag>();\r\n    }\r\n};\r\n\r\nvoid custom_flags_example()\r\n{    \r\n    auto formatter = std::make_unique<spdlog::pattern_formatter>();\r\n    formatter->add_flag<my_formatter_flag>('*').set_pattern(\"[%n] [%*] [%^%l%$] %v\");\r\n    spdlog::set_formatter(std::move(formatter));\r\n}\r\n\r\n```\r\n\r\n---\r\n#### Custom error handler\r\n```c++\r\nvoid err_handler_example()\r\n{\r\n    // can be set globally or per logger(logger->set_error_handler(..))\r\n    spdlog::set_error_handler([](const std::string &msg) { spdlog::get(\"console\")->error(\"*** LOGGER ERROR ***: {}\", msg); });\r\n    spdlog::get(\"console\")->info(\"some invalid message to trigger an error {}{}{}{}\", 3);\r\n}\r\n\r\n```\r\n\r\n---\r\n#### syslog\r\n```c++\r\n#include \"spdlog/sinks/syslog_sink.h\"\r\nvoid syslog_example()\r\n{\r\n    std::string ident = \"spdlog-example\";\r\n    auto syslog_logger = spdlog::syslog_logger_mt(\"syslog\", ident, LOG_PID);\r\n    syslog_logger->warn(\"This is warning that will end up in syslog.\");\r\n}\r\n```\r\n---\r\n#### Android example\r\n```c++\r\n#include \"spdlog/sinks/android_sink.h\"\r\nvoid android_example()\r\n{\r\n    std::string tag = \"spdlog-android\";\r\n    auto android_logger = spdlog::android_logger_mt(\"android\", tag);\r\n    android_logger->critical(\"Use \\\"adb shell logcat\\\" to view this message.\");\r\n}\r\n```\r\n\r\n---\r\n#### Load log levels from the env variable or argv\r\n\r\n```c++\r\n#include \"spdlog/cfg/env.h\"\r\nint main (int argc, char *argv[])\r\n{\r\n    spdlog::cfg::load_env_levels();\r\n    // or from the command line:\r\n    // ./example SPDLOG_LEVEL=info,mylogger=trace\r\n    // #include \"spdlog/cfg/argv.h\" // for loading levels from argv\r\n    // spdlog::cfg::load_argv_levels(argc, argv);\r\n}\r\n```\r\nSo then you can:\r\n\r\n```console\r\n$ export SPDLOG_LEVEL=info,mylogger=trace\r\n$ ./example\r\n```\r\n\r\n\r\n---\r\n#### Log file open/close event handlers\r\n```c++\r\n// You can get callbacks from spdlog before/after a log file has been opened or closed. \r\n// This is useful for cleanup procedures or for adding something to the start/end of the log file.\r\nvoid file_events_example()\r\n{\r\n    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications\r\n    spdlog::file_event_handlers handlers;\r\n    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info(\"Before opening {}\", filename); };\r\n    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(\"After opening\\n\", fstream); };\r\n    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(\"Before closing\\n\", fstream); };\r\n    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info(\"After closing {}\", filename); };\r\n    auto my_logger = spdlog::basic_logger_st(\"some_logger\", \"logs/events-sample.txt\", true, handlers);        \r\n}\r\n```\r\n\r\n---\r\n#### Replace the Default Logger\r\n```c++\r\nvoid replace_default_logger_example()\r\n{\r\n    auto new_logger = spdlog::basic_logger_mt(\"new_default_logger\", \"logs/new-default-log.txt\", true);\r\n    spdlog::set_default_logger(new_logger);\r\n    spdlog::info(\"new logger log message\");\r\n}\r\n```\r\n\r\n---\r\n#### Log to Qt with nice colors\r\n```c++\r\n#include \"spdlog/spdlog.h\"\r\n#include \"spdlog/sinks/qt_sinks.h\"\r\nMainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)\r\n{\r\n    setMinimumSize(640, 480);\r\n    auto log_widget = new QTextEdit(this);\r\n    setCentralWidget(log_widget);\r\n    int max_lines = 500; // keep the text widget to max 500 lines. remove old lines if needed.\r\n    auto logger = spdlog::qt_color_logger_mt(\"qt_logger\", log_widget, max_lines);\r\n    logger->info(\"Some info message\");\r\n}\r\n```\r\n---\r\n\r\n#### Mapped Diagnostic Context\r\n```c++\r\n// Mapped Diagnostic Context (MDC) is a map that stores key-value pairs (string values) in thread local storage.\r\n// Each thread maintains its own MDC, which loggers use to append diagnostic information to log outputs.\r\n// Note: it is not supported in asynchronous mode due to its reliance on thread-local storage.\r\n#include \"spdlog/mdc.h\"\r\nvoid mdc_example()\r\n{\r\n    spdlog::mdc::put(\"key1\", \"value1\");\r\n    spdlog::mdc::put(\"key2\", \"value2\");\r\n    // if not using the default format, use the %& formatter to print mdc data\r\n    // spdlog::set_pattern(\"[%H:%M:%S %z] [%^%L%$] [%&] %v\");\r\n}\r\n```\r\n---\r\n## Benchmarks\r\n\r\nBelow are some [benchmarks](https://github.com/gabime/spdlog/blob/v1.x/bench/bench.cpp) done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz\r\n\r\n#### Synchronous mode\r\n```\r\n[info] **************************************************************\r\n[info] Single thread, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec\r\n[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec\r\n[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec\r\n[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec\r\n[info] **************************************************************\r\n[info] C-string (400 bytes). Single thread, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec\r\n[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec\r\n[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec\r\n[info] null_st          Elapsed: 0.04 secs       27,446,957/sec\r\n[info] **************************************************************\r\n[info] 10 threads, competing over the same logger object, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec\r\n[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec\r\n[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec\r\n[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec\r\n```\r\n#### Asynchronous mode\r\n```\r\n[info] -------------------------------------------------\r\n[info] Messages     : 1,000,000\r\n[info] Threads      : 10\r\n[info] Queue        : 8,192 slots\r\n[info] Queue memory : 8,192 x 272 = 2,176 KB \r\n[info] -------------------------------------------------\r\n[info] \r\n[info] *********************************\r\n[info] Queue Overflow Policy: block\r\n[info] *********************************\r\n[info] Elapsed: 1.70784 secs     585,535/sec\r\n[info] Elapsed: 1.69805 secs     588,910/sec\r\n[info] Elapsed: 1.7026 secs      587,337/sec\r\n[info] \r\n[info] *********************************\r\n[info] Queue Overflow Policy: overrun\r\n[info] *********************************\r\n[info] Elapsed: 0.372816 secs    2,682,285/sec\r\n[info] Elapsed: 0.379758 secs    2,633,255/sec\r\n[info] Elapsed: 0.373532 secs    2,677,147/sec\r\n\r\n```\r\n\r\n## Documentation\r\nDocumentation can be found in the [wiki](https://github.com/gabime/spdlog/wiki/1.-QuickStart) pages.\r\n\r\n---\r\n\r\nThanks to [JetBrains](https://www.jetbrains.com/?from=spdlog) for donating product licenses to help develop **spdlog** <a href=\"https://www.jetbrains.com/?from=spdlog\"><img src=\"logos/jetbrains-variant-4.svg\" width=\"94\" align=\"center\" /></a>\r\n\r\n\r\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.7041015625,
          "content": "version: 1.0.{build}\nimage: Visual Studio 2017\nenvironment:\n  matrix:\n    - GENERATOR: '\"Visual Studio 15 2017 Win64\"'\n      BUILD_TYPE: Debug\n      BUILD_SHARED: 'OFF'\n      FATAL_ERRORS: 'OFF'\n      WCHAR: 'ON'\n      WCHAR_FILES: 'OFF'\n      BUILD_EXAMPLE: 'ON'\n      USE_STD_FORMAT: 'OFF'\n      CXX_STANDARD: 11\n    - GENERATOR: '\"Visual Studio 15 2017 Win64\"'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'OFF'\n      FATAL_ERRORS: 'OFF'\n      WCHAR: 'OFF'\n      WCHAR_FILES: 'OFF'\n      BUILD_EXAMPLE: 'ON'\n      USE_STD_FORMAT: 'OFF'\n      CXX_STANDARD: 11\n    - GENERATOR: '\"Visual Studio 15 2017 Win64\"'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'ON'\n      FATAL_ERRORS: 'OFF'\n      WCHAR: 'OFF'\n      WCHAR_FILES: 'OFF'\n      BUILD_EXAMPLE: 'ON'\n      USE_STD_FORMAT: 'OFF'\n      CXX_STANDARD: 11\n    - GENERATOR: '\"Visual Studio 15 2017 Win64\"'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'ON'\n      FATAL_ERRORS: 'OFF'\n      WCHAR: 'ON'\n      WCHAR_FILES: 'ON'\n      BUILD_EXAMPLE: 'OFF'\n      USE_STD_FORMAT: 'OFF'\n      CXX_STANDARD: 11\n    - GENERATOR: '\"Visual Studio 16 2019\" -A x64'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'ON'\n      FATAL_ERRORS: 'ON'\n      WCHAR: 'OFF'\n      WCHAR_FILES: 'OFF'\n      BUILD_EXAMPLE: 'OFF'\n      USE_STD_FORMAT: 'OFF'\n      CXX_STANDARD: 17\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n    - GENERATOR: '\"Visual Studio 17 2022\" -A x64'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'ON'\n      FATAL_ERRORS: 'ON'\n      WCHAR: 'OFF'\n      WCHAR_FILES: 'OFF'\n      BUILD_EXAMPLE: 'OFF'\n      USE_STD_FORMAT: 'ON'\n      CXX_STANDARD: 20\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    - GENERATOR: '\"Visual Studio 17 2022\" -A x64'\n      BUILD_TYPE: Release\n      BUILD_SHARED: 'ON'\n      FATAL_ERRORS: 'ON'\n      WCHAR: 'ON'\n      WCHAR_FILES: 'ON'\n      BUILD_EXAMPLE: 'OFF'\n      USE_STD_FORMAT: 'ON'\n      CXX_STANDARD: 20\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\nbuild_script:\n  - cmd: >-\n      set\n\n      mkdir build\n\n      cd build\n\n      set PATH=%PATH%;C:\\Program Files\\Git\\usr\\bin\n\n      cmake -G %GENERATOR% -D CMAKE_BUILD_TYPE=%BUILD_TYPE% -D BUILD_SHARED_LIBS=%BUILD_SHARED% -D SPDLOG_WCHAR_SUPPORT=%WCHAR% -D SPDLOG_WCHAR_FILENAMES=%WCHAR_FILES% -D SPDLOG_BUILD_EXAMPLE=%BUILD_EXAMPLE% -D SPDLOG_BUILD_EXAMPLE_HO=%BUILD_EXAMPLE% -D SPDLOG_BUILD_TESTS=ON -D SPDLOG_BUILD_TESTS_HO=OFF -D SPDLOG_BUILD_WARNINGS=%FATAL_ERRORS% -D SPDLOG_USE_STD_FORMAT=%USE_STD_FORMAT% -D CMAKE_CXX_STANDARD=%CXX_STANDARD% ..\n\n      cmake --build . --config %BUILD_TYPE%\n\nbefore_test:\n  - set PATH=%PATH%;C:\\projects\\spdlog\\build\\_deps\\catch2-build\\src\\%BUILD_TYPE%;C:\\projects\\spdlog\\build\\%BUILD_TYPE%\n  \ntest_script:\n  - C:\\projects\\spdlog\\build\\tests\\%BUILD_TYPE%\\spdlog-utests.exe\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}