{
  "metadata": {
    "timestamp": 1736566415420,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/googletest",
      "stars": 35226,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.11328125,
          "content": "# Run manually to reformat a file:\n# clang-format -i --style=file <file>\nLanguage:        Cpp\nBasedOnStyle:  Google\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5849609375,
          "content": "# Ignore CI build directory\nbuild/\nxcuserdata\ncmake-build-debug/\n.idea/\nbazel-bin\nbazel-genfiles\nbazel-googletest\nbazel-out\nbazel-testlogs\nMODULE.bazel.lock\n# python\n*.pyc\n\n# Visual Studio files\n.vs\n*.sdf\n*.opensdf\n*.VC.opendb\n*.suo\n*.user\n_ReSharper.Caches/\nWin32-Debug/\nWin32-Release/\nx64-Debug/\nx64-Release/\n\n# VSCode files\n.cache/\ncmake-variants.yaml\n\n# Ignore autoconf / automake files\nMakefile.in\naclocal.m4\nconfigure\nbuild-aux/\nautom4te.cache/\ngoogletest/m4/libtool.m4\ngoogletest/m4/ltoptions.m4\ngoogletest/m4/ltsugar.m4\ngoogletest/m4/ltversion.m4\ngoogletest/m4/lt~obsolete.m4\ngooglemock/m4\n\n# Ignore generated directories.\ngooglemock/fused-src/\ngoogletest/fused-src/\n\n# macOS files\n.DS_Store\ngoogletest/.DS_Store\ngoogletest/xcode/.DS_Store\n\n# Ignore cmake generated directories and files.\nCMakeFiles\nCTestTestfile.cmake\nMakefile\ncmake_install.cmake\ngooglemock/CMakeFiles\ngooglemock/CTestTestfile.cmake\ngooglemock/Makefile\ngooglemock/cmake_install.cmake\ngooglemock/gtest\n/bin\n/googlemock/gmock.dir\n/googlemock/gmock_main.dir\n/googlemock/RUN_TESTS.vcxproj.filters\n/googlemock/RUN_TESTS.vcxproj\n/googlemock/INSTALL.vcxproj.filters\n/googlemock/INSTALL.vcxproj\n/googlemock/gmock_main.vcxproj.filters\n/googlemock/gmock_main.vcxproj\n/googlemock/gmock.vcxproj.filters\n/googlemock/gmock.vcxproj\n/googlemock/gmock.sln\n/googlemock/ALL_BUILD.vcxproj.filters\n/googlemock/ALL_BUILD.vcxproj\n/lib\n/Win32\n/ZERO_CHECK.vcxproj.filters\n/ZERO_CHECK.vcxproj\n/RUN_TESTS.vcxproj.filters\n/RUN_TESTS.vcxproj\n/INSTALL.vcxproj.filters\n/INSTALL.vcxproj\n/googletest-distribution.sln\n/CMakeCache.txt\n/ALL_BUILD.vcxproj.filters\n/ALL_BUILD.vcxproj\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 6.86328125,
          "content": "# Copyright 2017 Google Inc.\n# All Rights Reserved.\n#\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#   Bazel Build for Google C++ Testing Framework(Google Test)\n\npackage(default_visibility = [\"//visibility:public\"])\n\nlicenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\nconfig_setting(\n    name = \"qnx\",\n    constraint_values = [\"@platforms//os:qnx\"],\n)\n\nconfig_setting(\n    name = \"windows\",\n    constraint_values = [\"@platforms//os:windows\"],\n)\n\nconfig_setting(\n    name = \"freebsd\",\n    constraint_values = [\"@platforms//os:freebsd\"],\n)\n\nconfig_setting(\n    name = \"openbsd\",\n    constraint_values = [\"@platforms//os:openbsd\"],\n)\n\n# NOTE: Fuchsia is not an officially supported platform.\nconfig_setting(\n    name = \"fuchsia\",\n    constraint_values = [\"@platforms//os:fuchsia\"],\n)\n\nconfig_setting(\n    name = \"msvc_compiler\",\n    flag_values = {\n        \"@bazel_tools//tools/cpp:compiler\": \"msvc-cl\",\n    },\n    visibility = [\":__subpackages__\"],\n)\n\nconfig_setting(\n    name = \"has_absl\",\n    values = {\"define\": \"absl=1\"},\n)\n\n# Library that defines the FRIEND_TEST macro.\ncc_library(\n    name = \"gtest_prod\",\n    hdrs = [\"googletest/include/gtest/gtest_prod.h\"],\n    includes = [\"googletest/include\"],\n)\n\n# Google Test including Google Mock\ncc_library(\n    name = \"gtest\",\n    srcs = glob(\n        include = [\n            \"googletest/src/*.cc\",\n            \"googletest/src/*.h\",\n            \"googletest/include/gtest/**/*.h\",\n            \"googlemock/src/*.cc\",\n            \"googlemock/include/gmock/**/*.h\",\n        ],\n        exclude = [\n            \"googletest/src/gtest-all.cc\",\n            \"googletest/src/gtest_main.cc\",\n            \"googlemock/src/gmock-all.cc\",\n            \"googlemock/src/gmock_main.cc\",\n        ],\n    ),\n    hdrs = glob([\n        \"googletest/include/gtest/*.h\",\n        \"googlemock/include/gmock/*.h\",\n    ]),\n    copts = select({\n        \":qnx\": [],\n        \":windows\": [],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    defines = select({\n        \":has_absl\": [\"GTEST_HAS_ABSL=1\"],\n        \"//conditions:default\": [],\n    }),\n    features = select({\n        \":windows\": [\"windows_export_all_symbols\"],\n        \"//conditions:default\": [],\n    }),\n    includes = [\n        \"googlemock\",\n        \"googlemock/include\",\n        \"googletest\",\n        \"googletest/include\",\n    ],\n    linkopts = select({\n        \":qnx\": [\"-lregex\"],\n        \":windows\": [],\n        \":freebsd\": [\n            \"-lm\",\n            \"-pthread\",\n        ],\n        \":openbsd\": [\n            \"-lm\",\n            \"-pthread\",\n        ],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    deps = select({\n        \":has_absl\": [\n            \"@abseil-cpp//absl/container:flat_hash_set\",\n            \"@abseil-cpp//absl/debugging:failure_signal_handler\",\n            \"@abseil-cpp//absl/debugging:stacktrace\",\n            \"@abseil-cpp//absl/debugging:symbolize\",\n            \"@abseil-cpp//absl/flags:flag\",\n            \"@abseil-cpp//absl/flags:parse\",\n            \"@abseil-cpp//absl/flags:reflection\",\n            \"@abseil-cpp//absl/flags:usage\",\n            \"@abseil-cpp//absl/strings\",\n            \"@abseil-cpp//absl/types:any\",\n            \"@abseil-cpp//absl/types:optional\",\n            \"@abseil-cpp//absl/types:variant\",\n            \"@re2//:re2\",\n        ],\n        \"//conditions:default\": [],\n    }) + select({\n        # `gtest-death-test.cc` has `EXPECT_DEATH` that spawns a process,\n        # expects it to crash and inspects its logs with the given matcher,\n        # so that's why these libraries are needed.\n        # Otherwise, builds targeting Fuchsia would fail to compile.\n        \":fuchsia\": [\n            \"@fuchsia_sdk//pkg/fdio\",\n            \"@fuchsia_sdk//pkg/syslog\",\n            \"@fuchsia_sdk//pkg/zx\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"gtest_main\",\n    srcs = [\"googlemock/src/gmock_main.cc\"],\n    features = select({\n        \":windows\": [\"windows_export_all_symbols\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\":gtest\"],\n)\n\n# The following rules build samples of how to use gTest.\ncc_library(\n    name = \"gtest_sample_lib\",\n    srcs = [\n        \"googletest/samples/sample1.cc\",\n        \"googletest/samples/sample2.cc\",\n        \"googletest/samples/sample4.cc\",\n    ],\n    hdrs = [\n        \"googletest/samples/prime_tables.h\",\n        \"googletest/samples/sample1.h\",\n        \"googletest/samples/sample2.h\",\n        \"googletest/samples/sample3-inl.h\",\n        \"googletest/samples/sample4.h\",\n    ],\n    features = select({\n        \":windows\": [\"windows_export_all_symbols\"],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_test(\n    name = \"gtest_samples\",\n    size = \"small\",\n    # All Samples except:\n    #   sample9 (main)\n    #   sample10 (main and takes a command line option and needs to be separate)\n    srcs = [\n        \"googletest/samples/sample1_unittest.cc\",\n        \"googletest/samples/sample2_unittest.cc\",\n        \"googletest/samples/sample3_unittest.cc\",\n        \"googletest/samples/sample4_unittest.cc\",\n        \"googletest/samples/sample5_unittest.cc\",\n        \"googletest/samples/sample6_unittest.cc\",\n        \"googletest/samples/sample7_unittest.cc\",\n        \"googletest/samples/sample8_unittest.cc\",\n    ],\n    linkstatic = 0,\n    deps = [\n        \"gtest_sample_lib\",\n        \":gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"sample9_unittest\",\n    size = \"small\",\n    srcs = [\"googletest/samples/sample9_unittest.cc\"],\n    deps = [\":gtest\"],\n)\n\ncc_test(\n    name = \"sample10_unittest\",\n    size = \"small\",\n    srcs = [\"googletest/samples/sample10_unittest.cc\"],\n    deps = [\":gtest\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.962890625,
          "content": "# Note: CMake support is community-based. The maintainers do not use CMake\n# internally.\n\ncmake_minimum_required(VERSION 3.13)\n\nproject(googletest-distribution)\nset(GOOGLETEST_VERSION 1.15.2)\n\nif(NOT CYGWIN AND NOT MSYS AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL QNX)\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nenable_testing()\n\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\n# Note that googlemock target already builds googletest.\noption(BUILD_GMOCK \"Builds the googlemock subproject\" ON)\noption(INSTALL_GTEST \"Enable installation of googletest. (Projects embedding googletest may want to turn this OFF.)\" ON)\noption(GTEST_HAS_ABSL \"Use Abseil and RE2. Requires Abseil and RE2 to be separately added to the build.\" OFF)\n\nif(GTEST_HAS_ABSL)\n  if(NOT TARGET absl::base)\n    find_package(absl REQUIRED)\n  endif()\n  if(NOT TARGET re2::re2)\n    find_package(re2 REQUIRED)\n  endif()\nendif()\n\nif(BUILD_GMOCK)\n  add_subdirectory( googlemock )\nelse()\n  add_subdirectory( googletest )\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.556640625,
          "content": "# How to become a contributor and submit your own code\n\n## Contributor License Agreements\n\nWe'd love to accept your patches! Before we can take them, we have to jump a\ncouple of legal hurdles.\n\nPlease fill out either the individual or corporate Contributor License Agreement\n(CLA).\n\n*   If you are an individual writing original source code and you're sure you\n    own the intellectual property, then you'll need to sign an\n    [individual CLA](https://developers.google.com/open-source/cla/individual).\n*   If you work for a company that wants to allow you to contribute your work,\n    then you'll need to sign a\n    [corporate CLA](https://developers.google.com/open-source/cla/corporate).\n\nFollow either of the two links above to access the appropriate CLA and\ninstructions for how to sign and return it. Once we receive it, we'll be able to\naccept your pull requests.\n\n## Are you a Googler?\n\nIf you are a Googler, please make an attempt to submit an internal contribution\nrather than a GitHub Pull Request. If you are not able to submit internally, a\nPR is acceptable as an alternative.\n\n## Contributing A Patch\n\n1.  Submit an issue describing your proposed change to the\n    [issue tracker](https://github.com/google/googletest/issues).\n2.  Please don't mix more than one logical change per submittal, because it\n    makes the history hard to follow. If you want to make a change that doesn't\n    have a corresponding issue in the issue tracker, please create one.\n3.  Also, coordinate with team members that are listed on the issue in question.\n    This ensures that work isn't being duplicated and communicating your plan\n    early also generally leads to better patches.\n4.  If your proposed change is accepted, and you haven't already done so, sign a\n    Contributor License Agreement\n    ([see details above](#contributor-license-agreements)).\n5.  Fork the desired repo, develop and test your code changes.\n6.  Ensure that your code adheres to the existing style in the sample to which\n    you are contributing.\n7.  Ensure that your code has an appropriate set of unit tests which all pass.\n8.  Submit a pull request.\n\n## The Google Test and Google Mock Communities\n\nThe Google Test community exists primarily through the\n[discussion group](https://groups.google.com/group/googletestframework) and the\nGitHub repository. Likewise, the Google Mock community exists primarily through\ntheir own [discussion group](https://groups.google.com/group/googlemock). You\nare definitely encouraged to contribute to the discussion and you can also help\nus to keep the effectiveness of the group high by following and promoting the\nguidelines listed here.\n\n### Please Be Friendly\n\nShowing courtesy and respect to others is a vital part of the Google culture,\nand we strongly encourage everyone participating in Google Test development to\njoin us in accepting nothing less. Of course, being courteous is not the same as\nfailing to constructively disagree with each other, but it does mean that we\nshould be respectful of each other when enumerating the 42 technical reasons\nthat a particular proposal may not be the best choice. There's never a reason to\nbe antagonistic or dismissive toward anyone who is sincerely trying to\ncontribute to a discussion.\n\nSure, C++ testing is serious business and all that, but it's also a lot of fun.\nLet's keep it that way. Let's strive to be one of the friendliest communities in\nall of open source.\n\nAs always, discuss Google Test in the official GoogleTest discussion group. You\ndon't have to actually submit code in order to sign up. Your participation\nitself is a valuable contribution.\n\n## Style\n\nTo keep the source consistent, readable, diffable and easy to merge, we use a\nfairly rigid coding style, as defined by the\n[google-styleguide](https://github.com/google/styleguide) project. All patches\nwill be expected to conform to the style outlined\n[here](https://google.github.io/styleguide/cppguide.html). Use\n[.clang-format](https://github.com/google/googletest/blob/main/.clang-format) to\ncheck your formatting.\n\n## Requirements for Contributors\n\nIf you plan to contribute a patch, you need to build Google Test, Google Mock,\nand their own tests from a git checkout, which has further requirements:\n\n*   [Python](https://www.python.org/) v3.6 or newer (for running some of the\n    tests and re-generating certain source files from templates)\n*   [CMake](https://cmake.org/) v2.8.12 or newer\n\n## Developing Google Test and Google Mock\n\nThis section discusses how to make your own changes to the Google Test project.\n\n### Testing Google Test and Google Mock Themselves\n\nTo make sure your changes work as intended and don't break existing\nfunctionality, you'll want to compile and run Google Test and GoogleMock's own\ntests. For that you can use CMake:\n\n```\nmkdir mybuild\ncd mybuild\ncmake -Dgtest_build_tests=ON -Dgmock_build_tests=ON ${GTEST_REPO_DIR}\n```\n\nTo choose between building only Google Test or Google Mock, you may modify your\ncmake command to be one of each\n\n```\ncmake -Dgtest_build_tests=ON ${GTEST_DIR} # sets up Google Test tests\ncmake -Dgmock_build_tests=ON ${GMOCK_DIR} # sets up Google Mock tests\n```\n\nMake sure you have Python installed, as some of Google Test's tests are written\nin Python. If the cmake command complains about not being able to find Python\n(`Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)`), try telling it\nexplicitly where your Python executable can be found:\n\n```\ncmake -DPYTHON_EXECUTABLE=path/to/python ...\n```\n\nNext, you can build Google Test and / or Google Mock and all desired tests. On\n\\*nix, this is usually done by\n\n```\nmake\n```\n\nTo run the tests, do\n\n```\nmake test\n```\n\nAll tests should pass.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 2.2392578125,
          "content": "# This file contains a list of people who've made non-trivial\n# contribution to the Google C++ Testing Framework project.  People\n# who commit code to the project are encouraged to add their names\n# here.  Please keep the list sorted by first names.\n\nAjay Joshi <jaj@google.com>\nBalázs Dán <balazs.dan@gmail.com>\nBenoit Sigoure <tsuna@google.com>\nBharat Mediratta <bharat@menalto.com>\nBogdan Piloca <boo@google.com>\nChandler Carruth <chandlerc@google.com>\nChris Prince <cprince@google.com>\nChris Taylor <taylorc@google.com>\nDan Egnor <egnor@google.com>\nDave MacLachlan <dmaclach@gmail.com>\nDavid Anderson <danderson@google.com>\nDean Sturtevant\nEric Roman <eroman@chromium.org>\nGene Volovich <gv@cite.com>\nHady Zalek <hady.zalek@gmail.com>\nHal Burch <gmock@hburch.com>\nJeffrey Yasskin <jyasskin@google.com>\nJim Keller <jimkeller@google.com>\nJoe Walnes <joe@truemesh.com>\nJon Wray <jwray@google.com>\nJói Sigurðsson <joi@google.com>\nKeir Mierle <mierle@gmail.com>\nKeith Ray <keith.ray@gmail.com>\nKenton Varda <kenton@google.com>\nKostya Serebryany <kcc@google.com>\nKrystian Kuzniarek <krystian.kuzniarek@gmail.com>\nLev Makhlis\nManuel Klimek <klimek@google.com>\nMario Tanev <radix@google.com>\nMark Paskin\nMarkus Heule <markus.heule@gmail.com>\nMartijn Vels <mvels@google.com>\nMatthew Simmons <simmonmt@acm.org>\nMika Raento <mikie@iki.fi>\nMike Bland <mbland@google.com>\nMiklós Fazekas <mfazekas@szemafor.com>\nNeal Norwitz <nnorwitz@gmail.com>\nNermin Ozkiranartli <nermin@google.com>\nOwen Carlsen <ocarlsen@google.com>\nPaneendra Ba <paneendra@google.com>\nPasi Valminen <pasi.valminen@gmail.com>\nPatrick Hanna <phanna@google.com>\nPatrick Riley <pfr@google.com>\nPaul Menage <menage@google.com>\nPeter Kaminski <piotrk@google.com>\nPiotr Kaminski <piotrk@google.com>\nPreston Jackson <preston.a.jackson@gmail.com>\nRainer Klaffenboeck <rainer.klaffenboeck@dynatrace.com>\nRuss Cox <rsc@google.com>\nRuss Rufer <russ@pentad.com>\nSean Mcafee <eefacm@gmail.com>\nSigurður Ásgeirsson <siggi@google.com>\nSoyeon Kim <sxshx818@naver.com>\nSverre Sundsdal <sundsdal@gmail.com>\nSzymon Sobik <sobik.szymon@gmail.com>\nTakeshi Yoshino <tyoshino@google.com>\nTracy Bialik <tracy@pentad.com>\nVadim Berman <vadimb@google.com>\nVlad Losev <vladl@google.com>\nWolfgang Klier <wklier@google.com>\nZhanyong Wan <wan@google.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4404296875,
          "content": "Copyright 2008, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 2.5732421875,
          "content": "# Copyright 2024 Google Inc.\n# All Rights Reserved.\n#\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# https://bazel.build/external/overview#bzlmod\n\nmodule(\n    name = \"googletest\",\n    version = \"head\",\n    compatibility_level = 1,\n)\n\n# Only direct dependencies need to be listed below.\n# Please keep the versions in sync with the versions in the WORKSPACE file.\n\nbazel_dep(\n    name = \"abseil-cpp\",\n    version = \"20240116.2\",\n)\nbazel_dep(\n    name = \"platforms\",\n    version = \"0.0.10\",\n)\nbazel_dep(\n    name = \"re2\",\n    version = \"2024-07-02\",\n)\n\nbazel_dep(\n    name = \"rules_python\",\n    version = \"0.34.0\",\n    dev_dependency = True,\n)\n\n# https://rules-python.readthedocs.io/en/stable/toolchains.html#library-modules-with-dev-only-python-usage\npython = use_extension(\n    \"@rules_python//python/extensions:python.bzl\",\n    \"python\",\n    dev_dependency = True,\n)\npython.toolchain(\n    ignore_root_user_error = True,\n    is_default = True,\n    python_version = \"3.12\",\n)\n\n# See fake_fuchsia_sdk.bzl for instructions on how to override this with a real SDK, if needed.\nfuchsia_sdk = use_extension(\"//:fake_fuchsia_sdk.bzl\", \"fuchsia_sdk\")\nfuchsia_sdk.create_fake()\nuse_repo(fuchsia_sdk, \"fuchsia_sdk\")\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4619140625,
          "content": "# GoogleTest\n\n### Announcements\n\n#### Live at Head\n\nGoogleTest now follows the\n[Abseil Live at Head philosophy](https://abseil.io/about/philosophy#upgrade-support).\nWe recommend\n[updating to the latest commit in the `main` branch as often as possible](https://github.com/abseil/abseil-cpp/blob/master/FAQ.md#what-is-live-at-head-and-how-do-i-do-it).\nWe do publish occasional semantic versions, tagged with\n`v${major}.${minor}.${patch}` (e.g. `v1.15.2`).\n\n#### Documentation Updates\n\nOur documentation is now live on GitHub Pages at\nhttps://google.github.io/googletest/. We recommend browsing the documentation on\nGitHub Pages rather than directly in the repository.\n\n#### Release 1.15.2\n\n[Release 1.15.2](https://github.com/google/googletest/releases/tag/v1.15.2) is\nnow available.\n\nThe 1.15.x branch requires at least C++14.\n\n#### Continuous Integration\n\nWe use Google's internal systems for continuous integration.\n\n#### Coming Soon\n\n*   We are planning to take a dependency on\n    [Abseil](https://github.com/abseil/abseil-cpp).\n\n## Welcome to **GoogleTest**, Google's C++ test framework!\n\nThis repository is a merger of the formerly separate GoogleTest and GoogleMock\nprojects. These were so closely related that it makes sense to maintain and\nrelease them together.\n\n### Getting Started\n\nSee the [GoogleTest User's Guide](https://google.github.io/googletest/) for\ndocumentation. We recommend starting with the\n[GoogleTest Primer](https://google.github.io/googletest/primer.html).\n\nMore information about building GoogleTest can be found at\n[googletest/README.md](googletest/README.md).\n\n## Features\n\n*   xUnit test framework: \\\n    Googletest is based on the [xUnit](https://en.wikipedia.org/wiki/XUnit)\n    testing framework, a popular architecture for unit testing\n*   Test discovery: \\\n    Googletest automatically discovers and runs your tests, eliminating the need\n    to manually register your tests\n*   Rich set of assertions: \\\n    Googletest provides a variety of assertions, such as equality, inequality,\n    exceptions, and more, making it easy to test your code\n*   User-defined assertions: \\\n    You can define your own assertions with Googletest, making it simple to\n    write tests that are specific to your code\n*   Death tests: \\\n    Googletest supports death tests, which verify that your code exits in a\n    certain way, making it useful for testing error-handling code\n*   Fatal and non-fatal failures: \\\n    You can specify whether a test failure should be treated as fatal or\n    non-fatal with Googletest, allowing tests to continue running even if a\n    failure occurs\n*   Value-parameterized tests: \\\n    Googletest supports value-parameterized tests, which run multiple times with\n    different input values, making it useful for testing functions that take\n    different inputs\n*   Type-parameterized tests: \\\n    Googletest also supports type-parameterized tests, which run with different\n    data types, making it useful for testing functions that work with different\n    data types\n*   Various options for running tests: \\\n    Googletest provides many options for running tests including running\n    individual tests, running tests in a specific order and running tests in\n    parallel\n\n## Supported Platforms\n\nGoogleTest follows Google's\n[Foundational C++ Support Policy](https://opensource.google/documentation/policies/cplusplus-support).\nSee\n[this table](https://github.com/google/oss-policies-info/blob/main/foundational-cxx-support-matrix.md)\nfor a list of currently supported versions of compilers, platforms, and build\ntools.\n\n## Who Is Using GoogleTest?\n\nIn addition to many internal projects at Google, GoogleTest is also used by the\nfollowing notable projects:\n\n*   The [Chromium projects](https://www.chromium.org/) (behind the Chrome\n    browser and Chrome OS).\n*   The [LLVM](https://llvm.org/) compiler.\n*   [Protocol Buffers](https://github.com/google/protobuf), Google's data\n    interchange format.\n*   The [OpenCV](https://opencv.org/) computer vision library.\n\n## Related Open Source Projects\n\n[GTest Runner](https://github.com/nholthaus/gtest-runner) is a Qt5 based\nautomated test-runner and Graphical User Interface with powerful features for\nWindows and Linux platforms.\n\n[GoogleTest UI](https://github.com/ospector/gtest-gbar) is a test runner that\nruns your test binary, allows you to track its progress via a progress bar, and\ndisplays a list of test failures. Clicking on one shows failure text. GoogleTest\nUI is written in C#.\n\n[GTest TAP Listener](https://github.com/kinow/gtest-tap-listener) is an event\nlistener for GoogleTest that implements the\n[TAP protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol) for test\nresult output. If your test runner understands TAP, you may find it useful.\n\n[gtest-parallel](https://github.com/google/gtest-parallel) is a test runner that\nruns tests from your binary in parallel to provide significant speed-up.\n\n[GoogleTest Adapter](https://marketplace.visualstudio.com/items?itemName=DavidSchuldenfrei.gtest-adapter)\nis a VS Code extension allowing to view GoogleTest in a tree view and run/debug\nyour tests.\n\n[C++ TestMate](https://github.com/matepek/vscode-catch2-test-adapter) is a VS\nCode extension allowing to view GoogleTest in a tree view and run/debug your\ntests.\n\n[Cornichon](https://pypi.org/project/cornichon/) is a small Gherkin DSL parser\nthat generates stub code for GoogleTest.\n\n## Contributing Changes\n\nPlease read\n[`CONTRIBUTING.md`](https://github.com/google/googletest/blob/main/CONTRIBUTING.md)\nfor details on how to contribute to this project.\n\nHappy testing!\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 2.6455078125,
          "content": "# Copyright 2024 Google Inc.\n# All Rights Reserved.\n#\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nworkspace(name = \"googletest\")\n\nload(\"//:googletest_deps.bzl\", \"googletest_deps\")\ngoogletest_deps()\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n  name = \"rules_python\",\n  sha256 = \"d71d2c67e0bce986e1c5a7731b4693226867c45bfe0b7c5e0067228a536fc580\",\n  strip_prefix = \"rules_python-0.29.0\",\n  urls = [\"https://github.com/bazelbuild/rules_python/releases/download/0.29.0/rules_python-0.29.0.tar.gz\"],\n)\n\n# https://github.com/bazelbuild/rules_python/releases/tag/0.29.0\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\npy_repositories()\n\nhttp_archive(\n  name = \"bazel_skylib\",\n  sha256 = \"cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94\",\n  urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz\"],\n)\n\nhttp_archive(\n    name = \"platforms\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n    ],\n    sha256 = \"218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee\",\n)\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 1.751953125,
          "content": "# Copyright 2024 Google Inc.\n# All Rights Reserved.\n#\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# https://bazel.build/external/migration#workspace.bzlmod\n#\n# This file is intentionally empty. When bzlmod is enabled and this\n# file exists, the content of WORKSPACE is ignored. This prevents\n# bzlmod builds from unintentionally depending on the WORKSPACE file.\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fake_fuchsia_sdk.bzl",
          "type": "blob",
          "size": 1.927734375,
          "content": "\"\"\"Provides a fake @fuchsia_sdk implementation that's used when the real one isn't available.\n\nGoogleTest can be used with the [Fuchsia](https://fuchsia.dev/) SDK. However,\nbecause the Fuchsia SDK does not yet support bzlmod, GoogleTest's `MODULE.bazel`\nfile by default provides a \"fake\" Fuchsia SDK.\n\nTo override this and use the real Fuchsia SDK, you can add the following to your\nproject's `MODULE.bazel` file:\n\n    fake_fuchsia_sdk_extension =\n    use_extension(\"@com_google_googletest//:fake_fuchsia_sdk.bzl\", \"fuchsia_sdk\")\n    override_repo(fake_fuchsia_sdk_extension, \"fuchsia_sdk\")\n\nNOTE: The `override_repo` built-in is only available in Bazel 8.0 and higher.\n\nSee https://github.com/google/googletest/issues/4472 for more details of why the\nfake Fuchsia SDK is needed.\n\"\"\"\n\ndef _fake_fuchsia_sdk_impl(repo_ctx):\n    for stub_target in repo_ctx.attr._stub_build_targets:\n        stub_package = stub_target\n        stub_target_name = stub_target.split(\"/\")[-1]\n        repo_ctx.file(\"%s/BUILD.bazel\" % stub_package, \"\"\"\nfilegroup(\n    name = \"%s\",\n)\n\"\"\" % stub_target_name)\n\nfake_fuchsia_sdk = repository_rule(\n    doc = \"Used to create a fake @fuchsia_sdk repository with stub build targets.\",\n    implementation = _fake_fuchsia_sdk_impl,\n    attrs = {\n        \"_stub_build_targets\": attr.string_list(\n            doc = \"The stub build targets to initialize.\",\n            default = [\n                \"pkg/fdio\",\n                \"pkg/syslog\",\n                \"pkg/zx\",\n            ],\n        ),\n    },\n)\n\n_create_fake = tag_class()\n\ndef _fuchsia_sdk_impl(module_ctx):\n    create_fake_sdk = False\n    for mod in module_ctx.modules:\n        for _ in mod.tags.create_fake:\n            create_fake_sdk = True\n\n    if create_fake_sdk:\n        fake_fuchsia_sdk(name = \"fuchsia_sdk\")\n\n    return module_ctx.extension_metadata(reproducible = True)\n\nfuchsia_sdk = module_extension(\n    implementation = _fuchsia_sdk_impl,\n    tag_classes = {\"create_fake\": _create_fake},\n)\n"
        },
        {
          "name": "googlemock",
          "type": "tree",
          "content": null
        },
        {
          "name": "googletest",
          "type": "tree",
          "content": null
        },
        {
          "name": "googletest_deps.bzl",
          "type": "blob",
          "size": 1.109375,
          "content": "\"\"\"Load dependencies needed to use the googletest library as a 3rd-party consumer.\"\"\"\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"//:fake_fuchsia_sdk.bzl\", \"fake_fuchsia_sdk\")\n\ndef googletest_deps():\n    \"\"\"Loads common dependencies needed to use the googletest library.\"\"\"\n\n    if not native.existing_rule(\"re2\"):\n        http_archive(\n            name = \"re2\",\n            sha256 = \"eb2df807c781601c14a260a507a5bb4509be1ee626024cb45acbd57cb9d4032b\",\n            strip_prefix = \"re2-2024-07-02\",\n            urls = [\"https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.tar.gz\"],\n        )\n\n    if not native.existing_rule(\"abseil-cpp\"):\n        http_archive(\n            name = \"abseil-cpp\",\n            sha256 = \"733726b8c3a6d39a4120d7e45ea8b41a434cdacde401cba500f14236c49b39dc\",\n            strip_prefix = \"abseil-cpp-20240116.2\",\n            urls = [\"https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz\"],\n        )\n\n    if not native.existing_rule(\"fuchsia_sdk\"):\n        fake_fuchsia_sdk(\n            name = \"fuchsia_sdk\",\n        )\n"
        }
      ]
    }
  ]
}