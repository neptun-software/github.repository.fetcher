{
  "metadata": {
    "timestamp": 1736708695899,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mapstruct/mapstruct",
      "stars": 7213,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.11328125,
          "content": "coverage:\n  status:\n    patch: off\n    project:\n      default:\n        # basic\n        threshold: 0.05\ncomment: off\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2978515625,
          "content": "# Repository specific GIT options\n\n# Set default handling of line endings\n* text=auto\n\n# Explicitly declare text files we want to always be normalized and converted\n# to native line endings on checkout.\n*.java text\n*.xml text\n*.txt text\n*.md text\n\n# Java-friendly readable chunk headers\n\n*.java\tdiff=java\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.26171875,
          "content": "# Eclipse\n.metadata\n.recommenders\n.classpath\n.project\n.settings\n.factorypath\n.checkstyle\n.externalToolBuilders\n\n# IntelliJ\n*.iml\n*.ipr\n*.iws\n.idea\n\n# Netbeans\nnb-configuration.xml\n\n# Build\n/**/target/\ntest-output\n\n# Misc.\n.DS_Store\ncheckstyle.cache\n.flattened-pom.xml\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9248046875,
          "content": "# Contributing to the development of MapStruct\n\nYou love MapStruct but miss a certain feature? You found a bug and want to report it, or even better, fix it yourself? That's great! MapStruct is all open source and your help is highly appreciated.\n\n* Source code: [http://github.com/mapstruct/mapstruct](http://github.com/mapstruct/mapstruct)\n* Issue tracker: [https://github.com/mapstruct/mapstruct/issues](https://github.com/mapstruct/mapstruct/issues)\n* Discussions: Join the [mapstruct-users](https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users) Google group\n* CI build: [https://github.com/mapstruct/mapstruct/actions/](https://github.com/mapstruct/mapstruct/actions)\n\nMapStruct follows the _Fork & Pull_ development approach. To get started just fork the [MapStruct repository](http://github.com/mapstruct/mapstruct) to your GitHub account and create a new topic branch for each change. Once you are done with your change, submit a [pull request](https://help.github.com/articles/using-pull-requests) against the MapStruct repo.\n\nWhen doing changes, keep the following best practices in mind:\n\n* Provide test cases\n* Use the code formatter for your IDE\n  * [IntelliJ Formatter](https://github.com/mapstruct/mapstruct/blob/master/etc/mapstruct.xml)\n* Update the [reference documentation](mapstruct.org/documentation) on [mapstruct.org](mapstruct.org) where required\n* Discuss new features you'd like to implement at the [Google group](https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users) before getting started\n* Create one pull request per feature\n* Provide a meaningful history, e.g. squash intermediary commits before submitting a pull request\n\n## License\n\nMapStruct is distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html). By submitting a pull request you agree to license your work under that license and you affirm that your contribution doesn't violate any rights of other parties.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.2666015625,
          "content": " Copyright MapStruct Authors.\n\n MapStruct is licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n\n------------------------------------------------------------------------\n\n MAPSTRUCT SUBCOMPONENTS WITH DIFFERENT COPYRIGHT OWNERS\n\n The MapStruct distribution (ZIP, TAR.GZ) as well as the MapStruct\n library (JAR) include FreeMarker, a software developed by Attila\n Szegedi, Daniel Dekany and Jonathan Revusky. FreeMarker is licensed\n under the same license as MapStruct itself - Apache License, Version\n 2.0 - but the copyright owners are the aforementioned individuals.\n\n The MapStruct distribution (ZIP, TAR.GZ) as well as the MapStruct\n library (JAR) include a number of files that are licensed by the\n Apache Software Foundation under the same license as MapStruct itself -\n Apache License, Version 2.0 - but the copyright owner is the Apache\n Software Foundation. These files are:\n\n     freemarker/ext/jsp/web-app_2_2.dtd\n     freemarker/ext/jsp/web-app_2_3.dtd\n     freemarker/ext/jsp/web-app_2_4.xsd\n     freemarker/ext/jsp/web-app_2_5.xsd\n     freemarker/ext/jsp/web-jsptaglibrary_1_1.dtd\n     freemarker/ext/jsp/web-jsptaglibrary_1_2.dtd\n     freemarker/ext/jsp/web-jsptaglibrary_2_0.xsd\n     freemarker/ext/jsp/web-jsptaglibrary_2_1.xsd\n"
        },
        {
          "name": "NEXT_RELEASE_CHANGELOG.md",
          "type": "blob",
          "size": 0.0703125,
          "content": "### Features\n\n### Enhancements\n\n### Bugs\n\n### Documentation\n\n### Build\n\n"
        },
        {
          "name": "build-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "copyright.txt",
          "type": "blob",
          "size": 3.2265625,
          "content": "﻿Contributors\n============\n\nAlexandr Shalugin - https://github.com/shalugin\nAmine Touzani - https://github.com/ttzn\nAndreas Gudian - https://github.com/agudian\nAndrei Arlou - https://github.com/Captain1653\nAndres Jose Sebastian Rincon Gonzalez - https://github.com/stianrincon\nArne Seime - https://github.com/seime\nChristian Bandowski - https://github.com/chris922\nChris DeLashmutt - https://github.com/cdelashmutt-pivotal\nChristian Kosmowski - https://github.com/ckosmowski\nChristian Schuster - https://github.com/chschu\nChristophe Labouisse - https://github.com/ggtools\nCiaran Liedeman - https://github.com/cliedeman\nCindy Wang - https://github.com/birdfriend\nCornelius Dirmeier - https://github.com/cornzy\nDavid Feinblum - https://github.com/dvfeinblum\nDarren Rambaud - https://github.com/xyzst\nDekel Pilli - https://github.com/dekelpilli\nDilip Krishnan - https://github.com/dilipkrish\nDmytro Polovinkin - https://github.com/navpil\nEwald Volkert - https://github.com/eforest\nEric Martineau - https://github.com/ericmartineau\nEwald Volkert - https://github.com/eforest\nFilip Hrisafov - https://github.com/filiphr\nFlorian Tavares - https://github.com/neoXfire\nGervais Blaise - https://github.com/gervaisb\nGibou Damien - https://github.com/dmngb\nGunnar Morling - https://github.com/gunnarmorling\nIvo Smid - https://github.com/bedla\nJason Bodnar - https://github.com/Blackbaud-JasonBodnar\nJeroen van Wilgenburg - https://github.com/jvwilge\nJeff Smyth - https://github.com/smythie86\nJoão Paulo Bassinello - https://github.com/jpbassinello\nJonathan Kraska - https://github.com/jakraska\nJoshua Spoerri - https://github.com/spoerri\nJude Niroshan - https://github.com/JudeNiroshan\nJustyna Kubica-Ledzion - https://github.com/JKLedzion\nKemal Özcan - https://github.com/yekeoe\nKevin Grüneberg - https://github.com/kevcodez\nLukas Lazar - https://github.com/LukeLaz\nNikolas Charalambidis - https://github.com/Nikolas-Charalambidis\nMichael Pardo - https://github.com/pardom\nMuhammad Usama - https://github.com/the-mgi\nMustafa Caylak - https://github.com/luxmeter\nOliver Ehrenmüller - https://github.com/greuelpirat\nOliver Erhart - https://github.com/thunderhook\nPaul Strugnell - https://github.com/ps-powa\nPascal Grün - https://github.com/pascalgn\nPavel Makhov - https://github.com/streetturtle\nPeter Larson - https://github.com/pjlarson\nRemko Plantenga - https://github.com/sonata82\nRemo Meier - https://github.com/remmeier\nRichard Lea - https://github.com/chigix\nSaheb Preet Singh - https://github.com/sahebpreet\nSamuel Wright - https://github.com/samwright\nSebastian Haberey - https://github.com/sebastianhaberey\nSebastian Hasait - https://github.com/shasait\nSean Huang - https://github.com/seanjob\nSjaak Derksen - https://github.com/sjaakd\nStefan May - https://github.com/osthus-sm\nTaras Mychaskiw - https://github.com/twentylemon\nThibault Duperron - https://github.com/Zomzog\nTomáš Poledný - https://github.com/Saljack\nTobias Meggendorfer - https://github.com/incaseoftrouble\nTillmann Gaida - https://github.com/Tillerino\nTimo Eckhardt - https://github.com/timoe\nTomek Gubala - https://github.com/vgtworld\nValentin Kulesh - https://github.com/unshare\nVincent Alexander Beelte - https://github.com/grandmasterpixel\nWinter Andreas - https://github.dev/wandi34\nXiu Hong Kooi - https://github.com/kooixh\n"
        },
        {
          "name": "core-jdk8",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "distribution",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrationtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 9.8330078125,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`which java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.4521484375,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Maven Start Up Batch script\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM M2_HOME - location of maven2's installed home dir\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM set title of command window\ntitle %0\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\nif exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n\nFOR /F \"tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\n)\n\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\nif exist %WRAPPER_JAR% (\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Found %WRAPPER_JAR%\n    )\n) else (\n    if not \"%MVNW_REPOURL%\" == \"\" (\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    )\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n        echo Downloading from: %DOWNLOAD_URL%\n    )\n\n    powershell -Command \"&{\"^\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n\t\t\"}\"^\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\n\t\t\"}\"\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Finished downloading %WRAPPER_JAR%\n    )\n)\n@REM End of extension\n\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\n@REM work with both Windows and non-Windows executions.\nset MAVEN_CMD_LINE_ARGS=%*\n\n%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n"
        },
        {
          "name": "parent",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.6708984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright MapStruct Authors.\n\n    Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct-parent</artifactId>\n        <version>1.7.0-SNAPSHOT</version>\n        <relativePath>parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>mapstruct-aggregator</artifactId>\n    <packaging>pom</packaging>\n    <name>MapStruct Aggregator</name>\n\n    <modules>\n        <module>parent</module>\n        <module>build-config</module>\n        <module>core</module>\n        <module>core-jdk8</module>\n        <module>processor</module>\n    </modules>\n    <properties>\n        <maven.deploy.skip>true</maven.deploy.skip>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.mycila.maven-license-plugin</groupId>\n                <artifactId>maven-license-plugin</artifactId>\n                <configuration>\n                    <header>etc/license.txt</header>\n                    <mapping>\n                        <xjb>XML_STYLE</xjb>\n                        <java>SLASHSTAR_STYLE</java>\n                    </mapping>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <!-- Required here as the maven-release-plugin will otherwise get the URL wrong -->\n    <scm>\n        <connection>scm:git:git://github.com/mapstruct/mapstruct.git</connection>\n        <developerConnection>scm:git:git@github.com:mapstruct/mapstruct.git</developerConnection>\n        <url>https://github.com/mapstruct/mapstruct/</url>\n        <tag>HEAD</tag>\n    </scm>\n\n    <profiles>\n        <profile>\n            <id>distribution</id>\n            <activation>\n                <property>\n                    <name>skipDistribution</name>\n                    <value>!true</value>\n                </property>\n            </activation>\n            <modules>\n                <module>documentation</module>\n                <module>distribution</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>test</id>\n            <activation>\n                <property>\n                    <name>release</name>\n                    <value>!true</value>\n                </property>\n            </activation>\n            <modules>\n                <module>integrationtest</module>\n            </modules>\n        </profile>\n    </profiles>\n</project>\n"
        },
        {
          "name": "processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.40234375,
          "content": "# MapStruct - Java bean mappings, the easy way!\n\n[![Latest Stable Version](https://img.shields.io/badge/Latest%20Stable%20Version-1.6.3-blue.svg)](https://central.sonatype.com/search?q=g:org.mapstruct%20v:1.6.3)\n[![Latest Version](https://img.shields.io/maven-central/v/org.mapstruct/mapstruct-processor.svg?maxAge=3600&label=Latest%20Release)](https://central.sonatype.com/search?q=g:org.mapstruct)\n[![License](https://img.shields.io/badge/License-Apache%202.0-yellowgreen.svg)](https://github.com/mapstruct/mapstruct/blob/main/LICENSE.txt)\n\n[![Build Status](https://github.com/mapstruct/mapstruct/workflows/CI/badge.svg?branch=main)](https://github.com/mapstruct/mapstruct/actions?query=branch%3Amain+workflow%3ACI)\n[![Coverage Status](https://img.shields.io/codecov/c/github/mapstruct/mapstruct.svg)](https://codecov.io/gh/mapstruct/mapstruct/tree/main)\n\n* [What is MapStruct?](#what-is-mapstruct)\n* [Requirements](#requirements)\n* [Using MapStruct](#using-mapstruct)\n * [Maven](#maven)\n * [Gradle](#gradle)\n* [Documentation and getting help](#documentation-and-getting-help)\n* [Building from Source](#building-from-source)\n* [Links](#links)\n* [Licensing](#licensing)\n\n## What is MapStruct?\n\nMapStruct is a Java [annotation processor](https://docs.oracle.com/en/java/javase/21/docs/specs/man/javac.html#annotation-processing) designed to generate type-safe and high-performance mappers for Java bean classes, including support for Java 16+ records.\nBy automating the creation of mappings, MapStruct eliminates the need for tedious and error-prone manual coding. \nThe generator provides sensible defaults and built-in type conversions, allowing it to handle standard mappings effortlessly, while also offering flexibility for custom configurations or specialized mapping behaviors.\nWith seamless integration into modern Java projects, MapStruct can map between conventional beans, records, and even complex hierarchies, making it an adaptable tool for diverse Java applications.\n\nCompared to mapping frameworks working at runtime, MapStruct offers the following advantages:\n\n* **Fast execution** by using plain method invocations instead of reflection\n* **Compile-time type safety**. Only objects and attributes mapping to each other can be mapped, so there's no accidental mapping of an order entity into a customer DTO, etc.\n* **Self-contained code**—no runtime dependencies\n* **Clear error reports** at build time if:\n  * mappings are incomplete (not all target properties are mapped)\n  * mappings are incorrect (cannot find a proper mapping method or type conversion)\n* **Easily debuggable mapping code** (or editable by hand—e.g. in case of a bug in the generator)\n\nTo create a mapping between two types, declare a mapper interface like this:\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );\n\n    @Mapping(target = \"seatCount\", source = \"numberOfSeats\")\n    CarDto carToCarDto(Car car);\n}\n```\n\nAt compile time MapStruct will generate an implementation of this interface. The generated implementation uses plain Java method invocations for mapping between source and target objects, i.e. no reflection is involved. By default, properties are mapped if they have the same name in source and target, but you can control this and many other aspects using `@Mapping` and a handful of other annotations.\n\n## Requirements\n\nMapStruct requires Java 1.8 or later.\n\n## Using MapStruct\n\nMapStruct works in command line builds (plain javac, via Maven, Gradle, Ant, etc.) and IDEs.\n\nFor Eclipse, a dedicated plug-in is in development (see https://github.com/mapstruct/mapstruct-eclipse). It goes beyond what's possible with an annotation processor, providing content assist for annotation attributes, quick fixes and more.\n\nFor IntelliJ the plug-in is available within the IntelliJ marketplace (see https://plugins.jetbrains.com/plugin/10036-mapstruct-support).\n\n### Maven\n\nFor Maven-based projects, add the following to your POM file in order to use MapStruct (the dependencies are available at Maven Central):\n\n```xml\n...\n<properties>\n    <org.mapstruct.version>1.6.3</org.mapstruct.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${org.mapstruct.version}</version>\n    </dependency>\n</dependencies>\n...\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.13.0</version>\n            <configuration>\n                <source>17</source>\n                <target>17</target>\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.mapstruct</groupId>\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${org.mapstruct.version}</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n...\n```\n\n### Gradle\n\nFor Gradle, you need something along the following lines:\n\n```groovy\nplugins {\n    ...\n    id \"com.diffplug.eclipse.apt\" version \"3.26.0\" // Only for Eclipse\n}\n\ndependencies {\n    ...\n    implementation 'org.mapstruct:mapstruct:1.6.3'\n\n    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'\n    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3' // if you are using mapstruct in test code\n}\n...\n```\n\nIf you don't work with a dependency management tool, you can obtain a distribution bundle from [Releases page](https://github.com/mapstruct/mapstruct/releases).\n\n## Documentation and getting help\n\nTo learn more about MapStruct, refer to the [project homepage](https://mapstruct.org). The [reference documentation](https://mapstruct.org/documentation/reference-guide/) covers all provided functionality in detail. If you need help please ask it in the [Discussions](https://github.com/mapstruct/mapstruct/discussions).\n\n## Building from Source\n\nMapStruct uses Maven for its build. Java 11 is required for building MapStruct from source. To build the complete project, run\n\n    ./mvnw clean install\n\nfrom the root of the project directory. To skip the distribution module, run \n\n    ./mvnw clean install -DskipDistribution=true\n    \n## Importing into IDE\n\nMapStruct uses the gem annotation processor to generate mapping gems for its own annotations.\nTherefore, for seamless integration within an IDE annotation processing needs to be enabled.\n\n### IntelliJ \n\nMake sure that you have at least IntelliJ 2018.2.x (needed since support for `annotationProcessors` from the `maven-compiler-plugin` is from that version).\nEnable annotation processing in IntelliJ (Build, Execution, Deployment -> Compiler -> Annotation Processors)\n\n### Eclipse\n\nMake sure that you have the [m2e_apt](https://marketplace.eclipse.org/content/m2e-apt) plugin installed.\n\n## Links\n\n* [Homepage](https://mapstruct.org)\n* [Source code](https://github.com/mapstruct/mapstruct/)\n* [Downloads](https://github.com/mapstruct/mapstruct/releases)\n* [Issue tracker](https://github.com/mapstruct/mapstruct/issues)\n* [User group](https://groups.google.com/forum/?hl=en#!forum/mapstruct-users)\n* [CI build](https://github.com/mapstruct/mapstruct/actions/)\n\n## Licensing\n\nMapStruct is licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this project except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n"
        }
      ]
    }
  ]
}