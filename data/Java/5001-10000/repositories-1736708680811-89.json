{
  "metadata": {
    "timestamp": 1736708680811,
    "page": 89,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trello-archive/RxLifecycle",
      "stars": 7710,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3173828125,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\nbuild/\n/*/build/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# IntelliJ\n.idea/\n*.iml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.27734375,
          "content": "language: android\n\nandroid:\n  components:\n    - tools\n    - platform-tools\n    - build-tools-28.0.3\n    - android-28\n    - extra-android-m2repository\n\njdk: oraclejdk8\n\nnotifications:\n  email: false\n\nsudo: false\n\ncache:\n  directories:\n    - $HOME/.gradle\n\nscript: ./gradlew build test\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.62109375,
          "content": "# Changelog\n\n## 4.0.2 (2020-11-05)\n\n- [#332](https://github.com/trello/RxLifecycle/pull/332): Namespace Kotlin module names\n\n## 4.0.1 (2020-10-29)\n\n- [#330](https://github.com/trello/RxLifecycle/pull/330): Corrected package name in rxlifecycle-android-lifecycle-kotlin\n\n## 4.0.0 (2020-05-23)\n\nThis major revision was made to support RxJava 3. RxLifecycle 4.0 lives in a new namespace and\npackage names so that it can work side-by-side with previous versions of RxLifecycle.\n\n- [#317](https://github.com/trello/RxLifecycle/pull/317): Upgrade to RxJava 3\n- [#319](https://github.com/trello/RxLifecycle/pull/319): Updated namespace to com.trello.rxlifecycle4\n\n## 3.1.0 (2019-09-21)\n\n- [#290](https://github.com/trello/RxLifecycle/pull/290): Fixed up some missing rxlifecycle3 conversions\n- [#308](https://github.com/trello/RxLifecycle/pull/308): Support LayoutId constructors for AppCompatActivity and (AndroidX)Fragment\n\n## 3.0.0 (2018-10-25)\n\n- [#285](https://github.com/trello/RxLifecycle/pull/285): Updated base package to com.trello.rxlifecycle3\n- [#284](https://github.com/trello/RxLifecycle/pull/284): Deprecate rxlifecycle-navi\n- [#283](https://github.com/trello/RxLifecycle/pull/283): Upgraded to AndroidX\n\n## 2.2.2 (2018-07-29)\n\n- [#275](https://github.com/trello/RxLifecycle/pull/275): Updated dependencies\n\nNormally simply updating dependencies wouldn't justify a new release, except that there are some R8 issues with\nRxLifecycle (due to it being compiled with Android lifecycle 1.0.0 instead of 1.1.0).\n\n## 2.2.1 (2017-11-15)\n\n- [#248](https://github.com/trello/RxLifecycle/pull/248): Remove generic type declaration for Completable bindings\n\n- [#249](https://github.com/trello/RxLifecycle/pull/249): Updated to release version of Android architecture components\n\n## 2.2.0 (2017-09-06)\n\n- [#239](https://github.com/trello/RxLifecycle/pull/239): Added support for support preference fragments\n\n  These can be found in the new rxlifecycle-components-preference artifact.\n\n## 2.1.0 (2017-05-27)\n\n- [#216](https://github.com/trello/RxLifecycle/pull/216): Added support for Android Architecture Components\n\n  These can be found in the new rxlifecycle-android-lifecycle and rxlifecycle-android-kotlin artifacts.\n\n- [#219](https://github.com/trello/RxLifecycle/pull/219): Fix potential build issues by making JSR305 compileOnly\n\n## 2.0.1 (2016-11-23)\n\n- [#183](https://github.com/trello/RxLifecycle/pull/183): Fix usage of null in navi module\n\n## 2.0 (2016-11-21)\n\nThis major revision was made to support RxJava 2. RxLifecycle 2.0 lives in a new namespace and package\nnames so that it can work side-by-side with RxLifecycle 1.0 (while transitioning).\n\nThe biggest change is that `LifecycleTransformer` now works for *all* RxJava types:\n`Observable`, `Flowable`, `Single`, `Maybe` and `Completable`. Unlike before, there's\nno extra steps you have to take to make it work with types other than `Observable`.\n\n- [#167](https://github.com/trello/RxLifecycle/pull/167): Upgrade to RxJava 2\n- [#169](https://github.com/trello/RxLifecycle/pull/169): Move to com.trello.rxlifecycle2\n- [#170](https://github.com/trello/RxLifecycle/pull/170): Added Maybe support\n- [#172](https://github.com/trello/RxLifecycle/pull/172): Added Flowable support\n\n## 1.0 (2016-11-03)\n\nFirst and (hopefully) final release of 1.x branch!\n\nThis release marks the start of maintenance mode for RxJava 1 support. Future work will be devoted to supporting\nRxJava 2. Important bugs may be squashed but new features will have to be extraordinarily compelling in order\nto be added.\n\n- [#162](https://github.com/trello/RxLifecycle/pull/162): Made all components abstract\n- [#157](https://github.com/trello/RxLifecycle/pull/157): Added RxPreferenceFragment\n\n## 0.8.0 (2016-09-19)\n\n- [#152](https://github.com/trello/RxLifecycle/pull/152): Support RxJava 1.2.0.\n\n  This change is not backwards compatible with RxJava 1.1.x, so if you want to continue\n  receiving updates for RxLifecycle you will eventually need to upgrade to RxJava 1.2.x.\n\n## 0.7.0 (2016-08-24)\n\nThere are a couple major breaking changes in this release, so read carefully.\n\n- [#143](https://github.com/trello/RxLifecycle/pull/143): Split Android parts of rxlifecycle into rxlifecycle-android\n\n  Now the `rxlifecycle` dependency is a pure Java core. To use RxLifecycle with Android, you should also include\n  `rxlifecycle-android` as well now.\n\n  `RxLifecycle` methods that are for Android (`bindActivity()`, `bindFragment()` and `bindView()`) are now in\n  `RxLifecycleAndroid` (found in the `rxlifecycle-android` artifact).\n\n   Deprecated methods in `RxLifecycle` were removed as well.\n\n- [#138](https://github.com/trello/RxLifecycle/pull/138) / [#139](https://github.com/trello/RxLifecycle/pull/139):\nReplace `ActivityLifecycleProvider` and `FragmentLifecycleProvider` with `LifecycleProvider<T>`.\n\n  This means that you need to replace `ActivityLifecycleProvider` with `LifecycleProvider<ActivityEvent>` and\n  `FragmentLifecycleProvider` with `LifecycleProvider<FragmentEvent>`.\n\nOther changes:\n\n- [#140](https://github.com/trello/RxLifecycle/pull/140): Fixed type inference for LifecycleTransformer.forSingle()\n- [#135](https://github.com/trello/RxLifecycle/pull/135): Add Kotlin extensions for Singles and Completables\n\n## 0.6.1 (2016-05-11)\n\n- [#118](https://github.com/trello/RxLifecycle/pull/118): Use `LifecycleTransformer` in the provider interfaces\n\n## 0.6.0 (2016-05-06)\n\n- Added `LifecycleTransformer`, which provides `Single` and `Completable` support.\n- [#111](https://github.com/trello/RxLifecycle/pull/111): Added component support for `AppCompatDialogFragment`\n- [#107](https://github.com/trello/RxLifecycle/pull/107): Fixed navi component package\n\n## 0.5.0 (2016-02-27)\n\nThere are a few methods which have been **deprecated** and will be removed in a future release. Each one has a drop-in\nreplacement (and currently calling the deprecated version just routes to the new one):\n\n* `bindUntilActivityEvent()` and `bindUntilFragmentEvent()` -> `bindUntilEvent()`\n* `bindView()` -> `bind()`\n\nThe other changes mostly involve opening up the API for more customization:\n\n* [#78](https://github.com/trello/RxLifecycle/pull/78): Added rxlifecycle-kotlin (adds some extensions)\n* [#79](https://github.com/trello/RxLifecycle/pull/79): Made bindUntilEvent() public, deprecated more specific calls\n* [#82](https://github.com/trello/RxLifecycle/pull/82): Opened up bind() methods for public consumption\n* [#83](https://github.com/trello/RxLifecycle/pull/83), [#85](https://github.com/trello/RxLifecycle/pull/85): Added\nannotations for better lint checking\n* [#88](https://github.com/trello/RxLifecycle/pull/88): Use `.equals()` instead of == for event comparison (for\ncustom event support with the newly opened-up `bind()`)\n* [#89](https://github.com/trello/RxLifecycle/pull/89): Make OutsideLifecycleException public (for anyone who wants\nto write their own `bind()` implementations)\n\n## 0.4.0 (2015-12-10)\n\n* [#62](https://github.com/trello/RxLifecycle/pull/62), [#67](https://github.com/trello/RxLifecycle/pull/67): Added\n[Navi](https://github.com/trello/navi/)-based implementation of providers.\n* [#61](https://github.com/trello/RxLifecycle/pull/61): Moved `ActivityLifecycleProvider` and\n`FragmentLifecycleProvider` into the core library so that multiple implementations can share them easily. The package\n name changed so you may need to re-import them in your code.\n* [#60](https://github.com/trello/RxLifecycle/pull/60): Reverted generic parameters back to `Transformer<T, T>`\n\n## 0.3.1 (2015-11-27)\n\n* [#46](https://github.com/trello/RxLifecycle/pull/46): Updated generic parameters of `Transformer<T, T>` to support Kotlin type inference.\n\n## 0.3.0\n\n* [#12](https://github.com/trello/RxLifecycle/pull/12): Added `RxLifecycle.bindView()`. This allows binding a\n`Subscription` until a `View` detaches itself from the window.\n* [#30](https://github.com/trello/RxLifecycle/pull/30): Calling `bindActivity()` or `bindFragment()` outside of the\nlifecycle causes the sequence to immediately complete (instead of throwing an error).\n* [#31](https://github.com/trello/RxLifecycle/pull/31): Passing nulls to RxLifecycle now always immediately throws an\nexception.\n\n## 0.2.0\n\n* [#14](https://github.com/trello/RxLifecycle/pull/14): Use takeUntil internally (instead of a faulty custom operator)\n\n    While this fixes some intractable problems that could occur with the old system, it also includes a major behavior\n    change: when the bind decides to stop subscribing, it calls `onCompleted` (whereas before it would just\n    unsubscribe).\n\n    When upgrading, you should check that your usages of `onCompleted` (either in `subscribe()`, `doOnCompleted()`,\n    or `doOnTerminate()`) can handle the sequence ending due to the lifecycle bind.\n\n    If you still need the old behavior in some spots, you should handle the `Subscription` yourself manually (and call\n    `unsubscribe()` when appropriate).\n\n* [#16](https://github.com/trello/RxLifecycle/pull/16): Lowered minSdkVersion to 14\n\n## 0.1.0\n\nInitial independent release (split from RxAndroid 0.25.0)\n\n* Added support for AppCompatActivity via `RxAppCompatActivity`\n* Components (e.g. `RxActivity`) now support `bindUntilEvent()` and `bindToLifecycle()`, which avoids having to deal with the lifecycle `Observable` directly.\n\n### Differences from RxAndroid 0.25\n\n* Renamed `LifecycleObservable` to `RxLifecycle`\n* Switched from wrapping `Observables` to using `Transformer` + `compose()` (which allows for chaining)\n* Split `LifecycleEvent` into two parts - `ActivityEvent` and `FragmentEvent`, in order to prevent easy mixups that could occur before\n* Split `bindUntilLifecycleEvent()` into `bindUntilFragmentEvent()` and `bindUntilActivityEvent()`\n* Renamed `bindFragmentLifecycle()` to `bindFragment()`\n* Renamed `bindActivityLifecycle()` to `bindActivity()`"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8115234375,
          "content": "# RxLifecycle\n\nThis library allows one to automatically complete sequences based on a second lifecycle stream.\n\nThis capability is useful in Android, where incomplete subscriptions can cause memory leaks.\n\n## Usage\n\nYou must start with an `Observable<T>` representing a lifecycle stream. Then you use `RxLifecycle` to bind\na sequence to that lifecycle.\n\nYou can bind when the lifecycle emits anything:\n\n```java\nmyObservable\n    .compose(RxLifecycle.bind(lifecycle))\n    .subscribe();\n```\n\nOr you can bind to when a specific lifecyle event occurs:\n\n```java\nmyObservable\n    .compose(RxLifecycle.bindUntilEvent(lifecycle, ActivityEvent.DESTROY))\n    .subscribe();\n```\n\nAlternatively, you can let RxLifecycle determine the appropriate time to end the sequence:\n\n```java\nmyObservable\n    .compose(RxLifecycleAndroid.bindActivity(lifecycle))\n    .subscribe();\n```\n\nIt assumes you want to end the sequence in the opposing lifecycle event - e.g., if subscribing during `START`, it will\nterminate on `STOP`. If you subscribe after `PAUSE`, it will terminate at the next destruction event (e.g.,\n`PAUSE` will terminate in `STOP`).\n\n## Providers\n\nWhere do lifecycles come from? Generally, they are provided by an appropriate `LifecycleProvider<T>`. But where are\nthose implemented?\n\nYou have a few options for that:\n\n1. Use rxlifecycle-components and subclass the provided `RxActivity`, `RxFragment`, etc. classes.\n1. Use [Android's lifecycle](https://developer.android.com/topic/libraries/architecture/lifecycle.html) + rxlifecycle-android-lifecycle to generate providers.\n1. Write the implementation yourself.\n\nIf you use rxlifecycle-components, just extend the appropriate class, then use the built-in `bindToLifecycle()` (or `bindUntilEvent()`) methods:\n\n```java\npublic class MyActivity extends RxActivity {\n    @Override\n    public void onResume() {\n        super.onResume();\n        myObservable\n            .compose(bindToLifecycle())\n            .subscribe();\n    }\n}\n```\n\nIf you use rxlifecycle-android-lifecycle, then you just pass your `LifecycleOwner` to `AndroidLifecycle` to generate a provider:\n\n```java\npublic class MyActivity extends LifecycleActivity {\n    private final LifecycleProvider<Lifecycle.Event> provider\n        = AndroidLifecycle.createLifecycleProvider(this);\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        myObservable\n            .compose(provider.bindToLifecycle())\n            .subscribe();\n    }\n}\n```\n\n## Unsubscription\n\nRxLifecycle does not actually unsubscribe the sequence. Instead it terminates the sequence. The way in which\nit does so varies based on the type:\n\n- `Observable`, `Flowable` and `Maybe` - emits `onCompleted()`\n- `Single` and `Completable` - emits `onError(CancellationException)`\n\nIf a sequence requires the `Subscription.unsubscribe()` behavior, then it is suggested that you manually handle\nthe `Subscription` yourself and call `unsubscribe()` when appropriate.\n\n## Kotlin\n\nThe rxlifecycle-kotlin module provides built-in extensions to the base RxJava types:\n\n```kotlin\nmyObservable\n    .bindToLifecycle(myView)\n    .subscribe { }\n\nmyObservable\n    .bindUntilEvent(myRxActivity, STOP)\n    .subscribe { }\n```\n\nThere is an additional rxlifecycle-android-lifecycle-kotlin module to provider extensions to work\nwith `LifecycleOwner`'s.\n\n```kotlin\n\nmyObservable\n    .bindUntilEvent(myLifecycleActivity, ON_STOP)\n    .subscribe { }\n```\n\n## Installation\n\n```gradle\nimplementation 'com.trello.rxlifecycle4:rxlifecycle:4.0.2'\n\n// If you want to bind to Android-specific lifecycles\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android:4.0.2'\n\n// If you want pre-written Activities and Fragments you can subclass as providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-components:4.0.2'\n\n// If you want pre-written support preference Fragments you can subclass as providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-components-preference:4.0.2'\n\n// If you want to use Android Lifecycle for providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle:4.0.2'\n\n// If you want to use Kotlin syntax\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-kotlin:4.0.2'\n\n// If you want to use Kotlin syntax with Android Lifecycle\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle-kotlin:4.0.2'\n```\n\n## License\n\n    Copyright (C) 2016 Trello\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.6787109375,
          "content": "buildscript {\n    ext {\n        //version here to share between build script and projects\n        verKotlin = '1.3.72'\n    }\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.6.3'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$verKotlin\"\n        classpath \"org.jetbrains.kotlin:kotlin-android-extensions:$verKotlin\"\n        classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n    }\n}\n\nsubprojects {\n    group = GROUP\n    version = VERSION_NAME\n}\n\napply plugin: 'com.github.ben-manes.versions'\n\next {\n    minSdkVersion = 14\n    compileSdkVersion = 28\n    targetSdkVersion = compileSdkVersion\n\n    sourceCompatibilityVersion = JavaVersion.VERSION_1_7\n    targetCompatibilityVersion = JavaVersion.VERSION_1_7\n\n    // Define all dependencies in the base project, to unify & make it easy to update\n    rxJava = 'io.reactivex.rxjava3:rxjava:3.0.4'\n    rxAndroid = 'io.reactivex.rxjava3:rxandroid:3.0.0'\n    navi = 'com.trello.navi2:navi:2.1.0'\n    lifecycle = 'androidx.lifecycle:lifecycle-runtime:2.2.0'\n    lifecycleProcessor = 'androidx.lifecycle:lifecycle-compiler:2.2.0'\n    lifecycleExtensions = 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n    kotlinStdlib = \"org.jetbrains.kotlin:kotlin-stdlib:$verKotlin\"\n    appCompat = 'androidx.appcompat:appcompat:1.1.0'\n    preferenceCompat = 'androidx.preference:preference:1.1.1'\n    supportAnnotations = 'androidx.annotation:annotation:1.1.0'\n    jsr305Annotations = 'com.google.code.findbugs:jsr305:3.0.2'\n    junit = 'junit:junit:4.13'\n    robolectric = 'org.robolectric:robolectric:3.8'\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.5,
          "content": "GROUP=com.trello.rxlifecycle4\nVERSION_NAME=4.0.2-SNAPSHOT\n\nPOM_URL=https://github.com/trello/RxLifecycle\nPOM_SCM_URL=https://github.com/trello/RxLifecycle\nPOM_SCM_CONNECTION=scm:git:https://github.com/trello/RxLifecycle.git\nPOM_SCM_DEV_CONNECTION=scm:git:git@github.com:trello/RxLifecycle.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=dlew\nPOM_DEVELOPER_NAME=Dan Lew\n\nandroid.useAndroidX=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.634765625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    \n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.986328125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "rxlifecycle-android-lifecycle-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-android-lifecycle",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-android",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-components-preference",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-components",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxlifecycle",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.2744140625,
          "content": "include ':rxlifecycle'\ninclude ':rxlifecycle-android'\ninclude ':rxlifecycle-android-lifecycle'\ninclude ':rxlifecycle-android-lifecycle-kotlin'\ninclude ':rxlifecycle-components'\ninclude ':rxlifecycle-components-preference'\ninclude ':rxlifecycle-kotlin'\ninclude ':rxlifecycle-sample'"
        }
      ]
    }
  ]
}