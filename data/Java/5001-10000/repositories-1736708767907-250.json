{
  "metadata": {
    "timestamp": 1736708767907,
    "page": 250,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WeiYe-Jing/datax-web",
      "stars": 5673,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3583984375,
          "content": "\n/datax-executor/target/\n/datax-executor/datax-executor.iml\n/datax-core/datax-core.iml\n/datax-core/target/\n/datax-admin/datax-admin.iml\n/datax-admin/target/\n/.idea/\n/datax-admin/.idea/\n/datax-registry/datax-registry.iml\n/datax-registry/target/\n/datax-rpc/datax-rpc.iml\n/datax-rpc/target/\n/datax-all.iml\n/logs/\n*-dev*\n/data/\n/build/\n/packages/\n/datax-assembly/target/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2020 WeiYe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.3984375,
          "content": "![GitHub contributors](https://img.shields.io/github/contributors/WeiYe-Jing/datax-web)\n![GitHub issues](https://img.shields.io/github/issues/WeiYe-Jing/datax-web)\n![GitHub](https://img.shields.io/github/license/WeiYe-Jing/datax-web)\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/WeiYe-Jing/datax-web)\n![](https://img.shields.io/badge/qq%E7%BE%A4-776939467-green.svg)\n\n# DataX-Web\n\n[![Stargazers over time](https://starchart.cc/WeiYe-Jing/datax-web.svg)](https://starchart.cc/WeiYe-Jing/datax-web)\n\nDataX Web是在DataX之上开发的分布式数据同步工具，提供简单易用的\n操作界面，降低用户使用DataX的学习成本，缩短任务配置时间，避免配置过程中出错。用户可通过页面选择数据源即可创建数据同步任务，支持RDBMS、Hive、HBase、ClickHouse、MongoDB等数据源，RDBMS数据源可批量创建数据同步任务，支持实时查看数据同步进度及日志并提供终止同步功能，集成并二次开发xxl-job可根据时间、自增主键增量同步数据。\n\n任务\"执行器\"支持集群部署，支持执行器多节点路由策略选择，支持超时控制、失败重试、失败告警、任务依赖，执行器CPU.内存.负载的监控等等。后续还将提供更多的数据源支持、数据转换UDF、表结构同步、数据同步血缘等更为复杂的业务场景。\n\n# Architecture diagram：\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/DataX-Web.png)\n\n# System Requirements\n\n- Language: Java 8（jdk版本建议1.8.201以上）<br>\n  Python2.7(支持Python3需要修改替换datax/bin下面的三个python文件，替换文件在doc/datax-web/datax-python3下)\n- Environment: MacOS, Windows,Linux\n- Database: Mysql5.7\n\n\n\n# Features\n\n- 1、通过Web构建DataX Json；\n- 2、DataX Json保存在数据库中，方便任务的迁移，管理；\n- 3、Web实时查看抽取日志，类似Jenkins的日志控制台输出功能；\n- 4、DataX运行记录展示，可页面操作停止DataX作业；\n- 5、支持DataX定时任务，支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；\n- 6、调度采用中心式设计，支持集群部署；\n- 7、任务分布式执行，任务\"执行器\"支持集群部署；\n- 8、执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行；\n- 9、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；\n- 10、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；\n- 11、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；\n- 12、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；\n- 13、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；\n- 14、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；\n- 15、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；\n- 16、运行报表：支持实时查看运行数据，以及调度报表，如调度日期分布图，调度成功分布图等；\n- 17、指定增量字段，配置定时任务自动获取每次的数据区间，任务失败重试，保证数据安全；\n- 18、页面可配置DataX启动JVM参数；\n- 19、数据源配置成功后添加手动测试功能；\n- 20、可以对常用任务进行配置模板，在构建完JSON之后可选择关联模板创建任务；\n- 21、jdbc添加hive数据源支持，可在构建JSON页面选择数据源生成column信息并简化配置；\n- 22、优先通过环境变量获取DataX文件目录，集群部署时不用指定JSON及日志目录；\n- 23、通过动态参数配置指定hive分区，也可以配合增量实现增量数据动态插入分区；\n- 24、任务类型由原来DataX任务扩展到Shell任务、Python任务、PowerShell任务；\n- 25、添加HBase数据源支持，JSON构建可通过HBase数据源获取hbaseConfig，column；\n- 26、添加MongoDB数据源支持，用户仅需要选择collectionName即可完成json构建；\n- 27、添加执行器CPU、内存、负载的监控页面；\n- 28、添加24类插件DataX JSON配置样例\n- 29、公共字段（创建时间，创建人，修改时间，修改者）插入或更新时自动填充\n- 30、对swagger接口进行token验证\n- 31、任务增加超时时间，对超时任务kill datax进程，可配合重试策略避免网络问题导致的datax卡死。\n- 32、添加项目管理模块，可对任务分类管理；\n- 33、对RDBMS数据源增加批量任务创建功能，选择数据源，表即可根据模板批量生成DataX同步任务；\n- 34、JSON构建增加ClickHouse数据源支持；\n- 35、执行器CPU.内存.负载的监控页面图形化；\n- 36、RDBMS数据源增量抽取增加主键自增方式并优化页面参数配置；\n- 37、更换MongoDB数据源连接方式,重构HBase数据源JSON构建模块；\n- 38、脚本类型任务增加停止功能；\n- 39、rdbms json构建增加postSql，并支持构建多个preSql，postSql；\n- 40、数据源信息加密算法修改及代码优化；\n- 41、日志页面增加DataX执行结果统计数据；\n\n# Quick Start：\n\n##### 请点击：[Quick Start](https://github.com/WeiYe-Jing/datax-web/blob/master/userGuid.md)\n##### Linux：[一键部署](https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/datax-web-deploy.md)\n\n\n# Introduction：\n\n### 1.执行器配置(使用开源项目xxl-job)\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/executor.png)\n\n- 1、\"调度中心OnLine:\"右侧显示在线的\"调度中心\"列表, 任务执行结束后, 将会以failover的模式进行回调调度中心通知执行结果, 避免回调的单点风险;\n- 2、\"执行器列表\" 中显示在线的执行器列表, 可通过\"OnLine 机器\"查看对应执行器的集群机器;\n\n#### 执行器属性说明\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/add_executor.png)\n\n```\n1、AppName: （与datax-executor中application.yml的datax.job.executor.appname保持一致）\n   每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;\n2、名称: 执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;\n3、排序: 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;\n4、注册方式：调度中心获取执行器地址的方式；\n    自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；\n    手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；\n5、机器地址：\"注册方式\"为\"手动录入\"时有效，支持人工维护执行器的地址信息；\n```\n\n### 2.创建数据源\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/add_datasource.png)\n\n第四步使用\n\n### 3.创建任务模版\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/template_list.png)\n\n第四步使用\n\n\n\n### 4. 构建JSON脚本\n\n- 1.步骤一，步骤二，选择第二步中创建的数据源，JSON构建目前支持的数据源有hive,mysql,oracle,postgresql,sqlserver,hbase,mongodb,clickhouse 其它数据源的JSON构建正在开发中,暂时需要手动编写。\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/build.png)\n\n- 2.字段映射\n\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/mapping.png)\n\n- 3.点击构建，生成json,此时可以选择复制json然后创建任务，选择datax任务，将json粘贴到文本框。也可以点击选择模版，直接生成任务。\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/select_template.png)\n\n### 5.批量创建任务\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_r.png)\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_w.png)\n\n### 6.任务创建介绍（关联模版创建任务不再介绍，具体参考4. 构建JSON脚本）\n\n#### 支持DataX任务,Shell任务，Python任务，PowerShell任务\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/datax.png)\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/shell.png)\n\n- 阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；\n    - 单机串行：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；\n    - 丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；\n    - 覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；\n- 增量增新建议将阻塞策略设置为丢弃后续调度或者单机串行\n    - 设置单机串行时应该注意合理设置重试次数(失败重试的次数*每次执行时间<任务的调度周期)，重试的次数如果设置的过多会导致数据重复，例如任务30秒执行一次，每次执行时间需要20秒，设置重试三次，如果任务失败了，第一个重试的时间段为1577755680-1577756680，重试任务没结束，新任务又开启，那新任务的时间段会是1577755680-1577758680\n\n- [增量参数设置](https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/increment-desc.md)\n- [分区参数设置](https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/partition-dynamic-param.md)\n\n### 7. 任务列表\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/job.png)\n\n### 8. 可以点击查看日志，实时获取日志信息,终止正在执行的datax进程\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/log_stat.png)\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/img/log_detail.png)\n\n### 9.任务资源监控\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/img/monitor.png)\n\n### 10. admin可以创建用户，编辑用户信息\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/user.png)\n\n\n# UI\n\n[前端github地址](https://github.com/WeiYe-Jing/datax-web-ui)\n\n# 项目成员\n\n- water\n\n```\n非常荣幸成为datax-web的Committer，从早期datax手工编写任务+配置，到datax-web界面化勾选创建任务+配置信息+调度管理，datax-web将数据同步工作的效率提升不少，相信后面后成为etl中不可或缺的生产力……\n```\n\n- Alecor\n\n```\n非常荣幸成为datax-web的Committer，datax-web旨在帮助用户从datax配置中解放出来，提供datax的Web化的管理能力。希望datax-web能为更多有需要的人服务，带来更好的简单、易用的体验！\n```\n\n- zhouhongfa\n\n- liukunyuan\n\n感谢贡献！\n\n# Contributing\n\nContributions are welcome! Open a pull request to fix a bug, or open an Issue to discuss a new feature or change.\n\n欢迎参与项目贡献！比如提交PR修复一个bug，或者新建 Issue 讨论新特性或者变更。\n\n# Copyright and License\n\nMIT License\n\nCopyright (c) 2020 WeiYe\n\n产品开源免费，并且将持续提供免费的社区技术支持。个人或企业内部可自由的接入和使用。\n\n> 欢迎在 [登记地址](https://github.com/WeiYe-Jing/datax-web/issues/93) 登记，登记仅仅为了产品推广和提升社区开发的动力。\n\n# v-2.1.2\n\n### 新增\n\n1. 添加项目管理模块，可对任务分类管理；\n2. 对RDBMS数据源增加批量任务创建功能，选择数据源，表即可根据模板批量生成DataX同步任务；\n3. JSON构建增加ClickHouse数据源支持；\n4. 执行器CPU.内存.负载的监控页面图形化；\n5. RDBMS数据源增量抽取增加主键自增方式并优化页面参数配置；\n6. 更换MongoDB数据源连接方式,重构HBase数据源JSON构建模块；\n7. 脚本类型任务增加停止功能；\n8. rdbms json构建增加postSql，并支持构建多个preSql，postSql；\n9. 合并datax-registry模块到datax-rpc中；\n10.数据源信息加密算法修改及代码优化；\n11.时间增量同步支持更多时间格式；\n12.日志页面增加DataX执行结果统计数据；\n\n### 升级：\n\n1. PostgreSql，SQLServer，Oracle 数据源JSON构建增加schema name选择；\n2. DataX JSON中的字段名称与数据源关键词一致问题优化；\n3. 任务管理页面按钮展示优化；\n4. 日志管理页面增加任务描述信息；\n5. JSON构建前端form表单不能缓存数据问题修复;\n6. HIVE JSON构建增加头尾选项参数;\n\n### 备注：\n2.1.1版本不建议升级，数据源信息加密方式变更会导致之前已加密的数据源解密失败，任务运行失败。\n如果需要升级请重建数据源，任务。\n\n# v-2.1.1\n\n### 新增\n\n1. 添加HBase数据源支持，JSON构建可通过HBase数据源获取hbaseConfig，column；\n2. 添加MongoDB数据源支持，用户仅需要选择collectionName即可完成json构建；\n3. 添加执行器CPU.内存.负载的监控页面；\n4. 添加24类插件DataX JSON配置样例\n5. 公共字段（创建时间，创建人，修改时间，修改者）插入或更新时自动填充\n6. 对swagger接口进行token验证\n7. 任务增加超时时间，对超时任务kill datax进程，可配合重试策略避免网络问题导致的datax卡死。\n\n### 升级：\n\n1. 数据源管理对用户名和密码进行加密，提高安全性；\n2. 对JSON文件中的用户名密码进行加密，执行DataX任务时解密\n3. 对页面菜单整理，图标升级，提示信息等交互优化；\n4. 日志输出取消项目类名等无关信息，减小文件大小，优化大文件输出，优化页面展示；\n5. logback为从yml中获取日志路径配置\n\n### 修复：\n\n1. 任务日志过大时，查看日志报错，请求超时；\n\n# 提交代码\n[参与贡献](https://github.com/WeiYe-Jing/datax-web/issues/190)\n\n\n# Contact us\n\n### 个人微信\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/WechatIMG2.jpeg?x-oss-process=image/resize,w_230,h_230)\n\n### QQ交流群\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/qrcode3.jpeg?x-oss-process=image/resize,w_250,h_300)\n\n\n\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "datax-admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "datax-assembly",
          "type": "tree",
          "content": null
        },
        {
          "name": "datax-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "datax-executor",
          "type": "tree",
          "content": null
        },
        {
          "name": "datax-rpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.5283203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wugui</groupId>\n    <artifactId>datax-web</artifactId>\n    <version>2.1.2</version>\n    <name>${project.artifactId}</name>\n    <packaging>pom</packaging>\n\n    <modules>\n        <module>datax-admin</module>\n        <module>datax-core</module>\n        <module>datax-executor</module>\n        <module>datax-rpc</module>\n        <module>datax-assembly</module>\n    </modules>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <maven.test.skip>true</maven.test.skip>\n\n        <commons-lang3.version>3.3.2</commons-lang3.version>\n        <fastjson.version>1.2.70</fastjson.version>\n        <slf4j-api.version>1.7.28</slf4j-api.version>\n        <logback-classic.version>1.2.2</logback-classic.version>\n        <commons-io.version>2.4</commons-io.version>\n        <junit.version>4.12</junit.version>\n        <hutool.version>4.5.1</hutool.version>\n        <postgresql.version>42.2.5</postgresql.version>\n        <mysql-connector.version>5.1.47</mysql-connector.version>\n        <jna.version>4.1.0</jna.version>\n        <groovy.version>2.5.8</groovy.version>\n        <mybatisplus.version>3.3.1</mybatisplus.version>\n        <swagger.version>2.9.2</swagger.version>\n        <swagger-models.version>1.5.21</swagger-models.version>\n        <spring.version>4.3.25.RELEASE</spring.version>\n        <junit.version>4.12</junit.version>\n        <spring-boot.version>2.1.4.RELEASE</spring-boot.version>\n        <swagger-bootstrap-ui.version>1.9.6</swagger-bootstrap-ui.version>\n        <jjwt.version>0.9.0</jjwt.version>\n        <netty.version>4.1.43.Final</netty.version>\n        <hessian.version>4.0.63</hessian.version>\n        <hadoop.version>2.7.3</hadoop.version>\n        <hive.jdbc.version>2.1.0</hive.jdbc.version>\n\n        <hbase.version>1.3.0</hbase.version>\n        <mongo-java-driver.version>3.4.2</mongo-java-driver.version>\n        <oshi.core.version>3.5.0</oshi.core.version>\n\n        <phoenix.version>5.0.0-HBase-2.0</phoenix.version>\n    </properties>\n\n</project>\n"
        },
        {
          "name": "userGuid.md",
          "type": "blob",
          "size": 9.12109375,
          "content": "\n# DataX Web用户手册\n\n# 一、github下载master分支或者release版本到本地\n\n[DataX Web下载地址](https://github.com/WeiYe-Jing/datax-web)\n![](http://q7vnain67.bkt.clouddn.com/github_datax_web.png)\n\n# 二、安装DataX\n\n* 方法一、直接下载DataX工具包：[DataX下载地址](http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz)\n    \n    下载后解压至本地某个目录，进入bin目录，即可运行同步作业：\n    \n    ``` shell\n    $ cd  {YOUR_DATAX_HOME}/bin\n    $ python datax.py {YOUR_JOB.json}\n    ```\n    自检脚本：\n    python {YOUR_DATAX_HOME}/bin/datax.py {YOUR_DATAX_HOME}/job/job.json\n\n* 方法二、下载DataX源码，自己编译：[DataX源码](https://github.com/alibaba/DataX)\n    \n    (1)、下载DataX源码：\n    \n    ``` shell\n    $ git clone git@github.com:alibaba/DataX.git\n    ```\n    \n    (2)、通过maven打包：\n    \n    ``` shell\n    $ cd  {DataX_source_code_home}\n    $ mvn -U clean package assembly:assembly -Dmaven.test.skip=true\n    ```\n    \n    打包成功，日志显示如下：\n    \n    ``` \n    [INFO] BUILD SUCCESS\n    [INFO] -----------------------------------------------------------------\n    [INFO] Total time: 08:12 min\n    [INFO] Finished at: 2015-12-13T16:26:48+08:00\n    [INFO] Final Memory: 133M/960M\n    [INFO] -----------------------------------------------------------------\n    ```\n    \n    打包成功后的DataX包位于 {DataX_source_code_home}/target/datax/datax/ ，结构如下：\n    \n    ``` shell\n    $ cd  {DataX_source_code_home}\n    $ ls ./target/datax/datax/\n    bin\t\tconf\t\tjob\t\tlib\t\tlog\t\tlog_perf\tplugin\t\tscript\t\ttmp\n    ```\n\n\n* 配置示例：从stream读取数据并打印到控制台\n  \n  * 第一步、创建创业的配置文件（json格式）\n    \n    可以通过命令查看配置模板： python datax.py -r {YOUR_READER} -w {YOUR_WRITER}\n    \n    ``` shell\n    $ cd  {YOUR_DATAX_HOME}/bin\n    $  python datax.py -r streamreader -w streamwriter\n    DataX (UNKNOWN_DATAX_VERSION), From Alibaba !\n    Copyright (C) 2010-2015, Alibaba Group. All Rights Reserved.\n    Please refer to the streamreader document:\n        https://github.com/alibaba/DataX/blob/master/streamreader/doc/streamreader.md \n    \n    Please refer to the streamwriter document:\n         https://github.com/alibaba/DataX/blob/master/streamwriter/doc/streamwriter.md \n     \n    Please save the following configuration as a json file and  use\n         python {DATAX_HOME}/bin/datax.py {JSON_FILE_NAME}.json \n    to run the job.\n    \n    {\n        \"job\": {\n            \"content\": [\n                {\n                    \"reader\": {\n                        \"name\": \"streamreader\", \n                        \"parameter\": {\n                            \"column\": [], \n                            \"sliceRecordCount\": \"\"\n                        }\n                    }, \n                    \"writer\": {\n                        \"name\": \"streamwriter\", \n                        \"parameter\": {\n                            \"encoding\": \"\", \n                            \"print\": true\n                        }\n                    }\n                }\n            ], \n            \"setting\": {\n                \"speed\": {\n                    \"channel\": \"\"\n                }\n            }\n        }\n    }\n    ```\n    \n    根据模板配置json如下：\n    \n    ``` json\n    #stream2stream.json\n    {\n      \"job\": {\n        \"content\": [\n          {\n            \"reader\": {\n              \"name\": \"streamreader\",\n              \"parameter\": {\n                \"sliceRecordCount\": 10,\n                \"column\": [\n                  {\n                    \"type\": \"long\",\n                    \"value\": \"10\"\n                  },\n                  {\n                    \"type\": \"string\",\n                    \"value\": \"hello，你好，世界-DataX\"\n                  }\n                ]\n              }\n            },\n            \"writer\": {\n              \"name\": \"streamwriter\",\n              \"parameter\": {\n                \"encoding\": \"UTF-8\",\n                \"print\": true\n              }\n            }\n          }\n        ],\n        \"setting\": {\n          \"speed\": {\n            \"channel\": 5\n           }\n        }\n      }\n    }\n    ```\n    \n  * 第二步：启动DataX\n    \n    ``` shell\n    $ cd {YOUR_DATAX_DIR_BIN}\n    $ python datax.py ./stream2stream.json \n    ```\n    \n    同步结束，显示日志如下：\n    \n    ``` shell\n    ...\n    2015-12-17 11:20:25.263 [job-0] INFO  JobContainer - \n    任务启动时刻                    : 2015-12-17 11:20:15\n    任务结束时刻                    : 2015-12-17 11:20:25\n    任务总计耗时                    :                 10s\n    任务平均流量                    :              205B/s\n    记录写入速度                    :              5rec/s\n    读出记录总数                    :                  50\n    读写失败总数                    :                   0\n    ```\n    \n# 三、Web部署\n\n## 1.linux环境部署\n\n[linux环境部署](https://github.com/WeiYe-Jing/datax-web/blob/master/doc/datax-web/datax-web-deploy.md)\n\n\n## 2.开发环境部署（或参考文档 [Debug](https://github.com/WeiYe-Jing/datax-web/files/5082018/datax-web.Debug.pdf)）\n\n### 2.1 创建数据库\n\n#### 执行bin/db下面的datax_web.sql文件(注意老版本更新语句有指定库名)\n\n### 2.2 修改项目配置\n\n### 1.修改datax_admin下resources/application.yml文件\n\n```\n#数据源\n  datasource:\n    username: root\n    password: root\n    url: jdbc:mysql://localhost:3306/datax_web?serverTimezone=Asia/Shanghai&useLegacyDatetimeCode=false&useSSL=false&nullNamePatternMatchesAll=true&useUnicode=true&characterEncoding=UTF-8\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n修改数据源配置，目前仅支持mysql\n\n```\n# 配置mybatis-plus打印sql日志\nlogging:\n  level:\n    com.wugui.datax.admin.mapper: error\n  path: ./data/applogs/admin\n```\n\n修改日志路径path\n\n```\n  # datax-web email\n  mail:\n    host: smtp.qq.com\n    port: 25\n    username: xxx@qq.com\n    password: xxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          starttls:\n            enable: true\n            required: true\n        socketFactory:\n          class: javax.net.ssl.SSLSocketFactory\n```\n\n修改邮件发送配置(不需要可以不修改)\n\n### 2.修改datax_executor下resources/application.yml文件\n\n```\n# log config\nlogging:\n  config: classpath:logback.xml\n  path: ./data/applogs/executor/jobhandler\n```\n\n修改日志路径path\n\n```\ndatax:\n  job:\n    admin:\n      ### datax-web admin address\n      addresses: http://127.0.0.1:8080\n    executor:\n      appname: datax-executor\n      ip:\n      port: 9999\n      ### job log path\n      logpath: ./data/applogs/executor/jobhandler\n      ### job log retention days\n      logretentiondays: 30\n  executor:\n    jsonpath: /Users/mac/data/applogs\n\n  pypath: /Users/mac/tools/datax/bin/datax.py\n```\n\n修改datax.job配置\n- admin.addresses datax_admin部署地址，如调度中心集群部署存在多个地址则用逗号分隔，执行器将会使用该地址进行\"执行器心跳注册\"和\"任务结果回调\"；\n- executor.appname 执行器AppName，每个执行器机器集群的唯一标示,执行器心跳注册分组依据；\n- executor.ip 默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"；\n- executor.port 执行器Server端口号，默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\n- executor.logpath 执行器运行日志文件存储磁盘路径,需要对该路径拥有读写权限;\n- executor.logretentiondays 执行器日志文件保存天数,过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；\n- executor.jsonpath datax json临时文件保存路径\n- pypath DataX启动脚本地址，例如：xxx/datax/bin/datax.py\n如果系统配置DataX环境变量（DATAX_HOME），logpath、jsonpath、pypath可不配，log文件和临时json存放在环境变量路径下。\n\n# 四、启动项目\n\n### 1.本地idea开发环境\n\n- 1.运行datax_admin下 DataXAdminApplication\n- 2.运行datax_executor下 DataXExecutorApplication\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/admin_start_log.png)\n\nadmin启动成功后日志会输出三个地址，两个接口文档地址，一个前端页面地址\n\n\n# 五、启动成功\n\n启动成功后打开页面（默认管理员用户名：admin 密码：123456）\nhttp://localhost:8080/index.html#/dashboard\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/dashboard.png)\n\n# 六、集群部署\n\n- 调度中心、执行器支持集群部署，提升调度系统容灾和可用性。\n\n* 1.调度中心集群：\n   \n    DB配置保持一致；<br>\n    集群机器时钟保持一致（单机集群忽视）；<br>\n    \n* 2.执行器集群:\n\n    执行器回调地址(admin.addresses）需要保持一致；执行器根据该配置进行执行器自动注册等操作。\n    \n    同一个执行器集群内AppName（executor.appname）需要保持一致；调度中心根据该配置动态发现不同集群的在线执行器列表。\n  \n# Contact us\n\n### QQ交流群\n\n![](https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/qrcode.png)\n\n"
        }
      ]
    }
  ]
}