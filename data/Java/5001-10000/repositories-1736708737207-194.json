{
  "metadata": {
    "timestamp": 1736708737207,
    "page": 194,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lightbend/config",
      "stars": 6179,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": ".classpath\n.project\n.cache\n.settings\n.idea\n.idea_modules\n/bin-test-lib\ntarget/\n/bin\n/node_modules\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.201171875,
          "content": "# Submitting pull requests\n\n**NOTE: Please read [Readme #Maintained-by](https://github.com/lightbend/config#Maintained-by) before spending time suggesting changes to this library.**\n\n\nPull requests should go via GitHub; there are some nice\n[general guidelines for contributing on GitHub](https://guides.github.com/activities/contributing-to-open-source/)\nif you haven't done it before.\n\nUnless your fix is trivial, it's a good idea to look for related\ndiscussions and maybe open an issue to discuss, before making a\npull request. Discussion in advance may keep you from wasting time\non an approach that won't work out. However, if you communicate\nbetter in code than in words, starting with a patch is\nfine... just be willing to revise it!\n\nBefore we can accept pull requests, you will need to agree to the\nTypesafe Contributor License Agreement online, using your GitHub\naccount - it takes 30 seconds.  You can do this at\nhttps://www.lightbend.com/contribute/cla\n\nExpect that most PRs will need revision before merge. If people\nsuggest revisions, you can make them yourself or wait for a\nmaintainer to do it on their own timeline. The larger the PR, the\nmore revision will likely be needed.\n\n# Making a release\n\nSee RELEASING.md\n"
        },
        {
          "name": "HOCON.md",
          "type": "blob",
          "size": 60.671875,
          "content": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [HOCON (Human-Optimized Config Object Notation)](#hocon-human-optimized-config-object-notation)\n  - [Goals / Background](#goals--background)\n  - [Definitions](#definitions)\n  - [Syntax](#syntax)\n    - [Unchanged from JSON](#unchanged-from-json)\n    - [Comments](#comments)\n    - [Omit root braces](#omit-root-braces)\n    - [Key-value separator](#key-value-separator)\n    - [Commas](#commas)\n    - [Whitespace](#whitespace)\n    - [Duplicate keys and object merging](#duplicate-keys-and-object-merging)\n    - [Unquoted strings](#unquoted-strings)\n    - [Multi-line strings](#multi-line-strings)\n    - [Value concatenation](#value-concatenation)\n      - [String value concatenation](#string-value-concatenation)\n      - [Array and object concatenation](#array-and-object-concatenation)\n      - [Note: Concatenation with whitespace and substitutions](#note-concatenation-with-whitespace-and-substitutions)\n      - [Note: Arrays without commas or newlines](#note-arrays-without-commas-or-newlines)\n    - [Path expressions](#path-expressions)\n    - [Paths as keys](#paths-as-keys)\n    - [Substitutions](#substitutions)\n      - [Self-Referential Substitutions](#self-referential-substitutions)\n      - [The `+=` field separator](#the--field-separator)\n      - [Examples of Self-Referential Substitutions](#examples-of-self-referential-substitutions)\n    - [Includes](#includes)\n      - [Include syntax](#include-syntax)\n      - [Include semantics: merging](#include-semantics-merging)\n      - [Include semantics: substitution](#include-semantics-substitution)\n      - [Include semantics: missing files and required files](#include-semantics-missing-files-and-required-files)\n      - [Include semantics: file formats and extensions](#include-semantics-file-formats-and-extensions)\n      - [Include semantics: locating resources](#include-semantics-locating-resources)\n    - [Conversion of numerically-indexed objects to arrays](#conversion-of-numerically-indexed-objects-to-arrays)\n  - [MIME Type](#mime-type)\n  - [API Recommendations](#api-recommendations)\n    - [Automatic type conversions](#automatic-type-conversions)\n    - [Units format](#units-format)\n    - [Duration format](#duration-format)\n    - [Size in bytes format](#size-in-bytes-format)\n    - [Config object merging and file merging](#config-object-merging-and-file-merging)\n    - [Java properties mapping](#java-properties-mapping)\n    - [Conventional configuration files for JVM apps](#conventional-configuration-files-for-jvm-apps)\n    - [Conventional override by system properties](#conventional-override-by-system-properties)\n    - [Substitution fallback to environment variables](#substitution-fallback-to-environment-variables)\n    - [hyphen-separated vs. camelCase](#hyphen-separated-vs-camelcase)\n  - [Note on Java properties similarity](#note-on-java-properties-similarity)\n  - [Note on Windows and case sensitivity of environment variables](#note-on-windows-and-case-sensitivity-of-environment-variables)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# HOCON (Human-Optimized Config Object Notation)\n\nThis is an informal spec, but hopefully it's clear.\n\n## Goals / Background\n\nThe primary goal is: keep the semantics (tree structure; set of\ntypes; encoding/escaping) from JSON, but make it more convenient\nas a human-editable config file format.\n\nThe following features are desirable, to support human usage:\n\n - less noisy / less pedantic syntax\n - ability to refer to another part of the configuration (set a value to\n   another value)\n - import/include another configuration file into the current file\n - a mapping to a flat properties list such as Java's system properties\n - ability to get values from environment variables\n - ability to write comments\n\nImplementation-wise, the format should have these properties:\n\n - a JSON superset, that is, all valid JSON should be valid and\n   should result in the same in-memory data that a JSON parser\n   would have produced.\n - be deterministic; the format is flexible, but it is not\n   heuristic. It should be clear what's invalid and invalid files\n   should generate errors.\n - require minimal look-ahead; should be able to tokenize the file\n   by looking at only the next three characters. (right now, the\n   only reason to look at three is to find \"//\" comments;\n   otherwise you can parse looking at two.)\n\nHOCON is significantly harder to specify and to parse than\nJSON. Think of it as moving the work from the person maintaining\nthe config file to the computer program.\n\n## Definitions\n\n - a _key_ is a string JSON would have to the left of `:` and a _value_ is\n   anything JSON would have to the right of `:`. i.e. the two\n   halves of an object _field_.\n\n - a _value_ is any \"value\" as defined in the JSON spec, plus\n   unquoted strings and substitutions as defined in this spec.\n\n - a _simple value_ is any value excluding an object or array\n   value.\n\n - a _field_ is a key, any separator such as ':', and a value.\n\n - references to a _file_ (\"the file being parsed\") can be\n   understood to mean any byte stream being parsed, not just\n   literal files in a filesystem.\n\n## Syntax\n\nMuch of this is defined with reference to JSON; you can find the\nJSON spec at https://json.org/ of course.\n\n### Unchanged from JSON\n\n - files must be valid UTF-8\n - quoted strings are in the same format as JSON strings\n - values have possible types: string, number, object, array, boolean, null\n - allowed number formats matches JSON; as in JSON, some possible\n   floating-point values are not represented, such as `NaN`\n\n### Comments\n\nAnything between `//` or `#` and the next newline is considered a comment\nand ignored, unless the `//` or `#` is inside a quoted string.\n\n### Omit root braces\n\nJSON documents must have an array or object at the root. Empty\nfiles are invalid documents, as are files containing only a\nnon-array non-object value such as a string.\n\nIn HOCON, if the file does not begin with a square bracket or\ncurly brace, it is parsed as if it were enclosed with `{}` curly\nbraces.\n\nA HOCON file is invalid if it omits the opening `{` but still has\na closing `}`; the curly braces must be balanced.\n\n### Key-value separator\n\nThe `=` character can be used anywhere JSON allows `:`, i.e. to\nseparate keys from values.\n\nIf a key is followed by `{`, the `:` or `=` may be omitted. So\n`\"foo\" {}` means `\"foo\" : {}`\n\n### Commas\n\nValues in arrays, and fields in objects, need not have a comma\nbetween them as long as they have at least one ASCII newline\n(`\\n`, decimal value 10) between them.\n\nThe last element in an array or last field in an object may be\nfollowed by a single comma. This extra comma is ignored.\n\n - `[1,2,3,]` and `[1,2,3]` are the same array.\n - `[1\\n2\\n3]` and `[1,2,3]` are the same array.\n - `[1,2,3,,]` is invalid because it has two trailing commas.\n - `[,1,2,3]` is invalid because it has an initial comma.\n - `[1,,2,3]` is invalid because it has two commas in a row.\n - these same comma rules apply to fields in objects.\n\n### Whitespace\n\nThe JSON spec simply says \"whitespace\"; in HOCON whitespace is\ndefined as follows:\n\n - any Unicode space separator (Zs category), line separator (Zl\n   category), or paragraph separator (Zp category), including\n   nonbreaking spaces (such as 0x00A0, 0x2007, and 0x202F).\n   The BOM (0xFEFF) must also be treated as whitespace.\n - tab (`\\t` 0x0009), newline ('\\n' 0x000A), vertical tab ('\\v'\n   0x000B)`, form feed (`\\f' 0x000C), carriage return ('\\r'\n   0x000D), file separator (0x001C), group separator (0x001D),\n   record separator (0x001E), unit separator (0x001F).\n\nIn Java, the `isWhitespace()` method covers these characters with\nthe exception of nonbreaking spaces and the BOM.\n\nWhile all Unicode separators should be treated as whitespace, in\nthis spec \"newline\" refers only and specifically to ASCII newline\n0x000A.\n\n### Duplicate keys and object merging\n\nThe JSON spec does not clarify how duplicate keys in the same\nobject should be handled. In HOCON, duplicate keys that appear\nlater override those that appear earlier, unless both values are\nobjects. If both values are objects, then the objects are merged.\n\nNote: this would make HOCON a non-superset of JSON if you assume\nthat JSON requires duplicate keys to have a behavior. The\nassumption here is that duplicate keys are invalid JSON.\n\nTo merge objects:\n\n - add fields present in only one of the two objects to the merged\n   object.\n - for non-object-valued fields present in both objects,\n   the field found in the second object must be used.\n - for object-valued fields present in both objects, the\n   object values should be recursively merged according to\n   these same rules.\n\nObject merge can be prevented by setting the key to another value\nfirst. This is because merging is always done two values at a\ntime; if you set a key to an object, a non-object, then an object,\nfirst the non-object falls back to the object (non-object always\nwins), and then the object falls back to the non-object (no\nmerging, object is the new value). So the two objects never see\neach other.\n\nThese two are equivalent:\n\n    {\n        \"foo\" : { \"a\" : 42 },\n        \"foo\" : { \"b\" : 43 }\n    }\n\n    {\n        \"foo\" : { \"a\" : 42, \"b\" : 43 }\n    }\n\nAnd these two are equivalent:\n\n    {\n        \"foo\" : { \"a\" : 42 },\n        \"foo\" : null,\n        \"foo\" : { \"b\" : 43 }\n    }\n\n    {\n        \"foo\" : { \"b\" : 43 }\n    }\n\nThe intermediate setting of `\"foo\"` to `null` prevents the object merge.\n\n### Unquoted strings\n\nA sequence of characters outside of a quoted string is a string\nvalue if:\n\n - it does not contain \"forbidden characters\": '$', '\"', '{', '}',\n   '[', ']', ':', '=', ',', '+', '#', '`', '^', '?', '!', '@',\n   '*', '&', '\\' (backslash), or whitespace.\n - it does not contain the two-character string \"//\" (which\n   starts a comment)\n - its initial characters do not parse as `true`, `false`, `null`,\n   or a number.\n\nUnquoted strings are used literally, they do not support any kind\nof escaping. Quoted strings may always be used as an alternative\nwhen you need to write a character that is not permitted in an\nunquoted string.\n\n`truefoo` parses as the boolean token `true` followed by the\nunquoted string `foo`. However, `footrue` parses as the unquoted\nstring `footrue`. Similarly, `10.0bar` is the number `10.0` then\nthe unquoted string `bar` but `bar10.0` is the unquoted string\n`bar10.0`. (In practice, this distinction doesn't matter much\nbecause of value concatenation; see later section.)\n\nIn general, once an unquoted string begins, it continues until a\nforbidden character or the two-character string \"//\" is\nencountered. Embedded (non-initial) booleans, nulls, and numbers\nare not recognized as such, they are part of the string.\n\nAn unquoted string may not _begin_ with the digits 0-9 or with a\nhyphen (`-`, 0x002D) because those are valid characters to begin a\nJSON number. The initial number character, plus any valid-in-JSON\nnumber characters that follow it, must be parsed as a number\nvalue. Again, these characters are not special _inside_ an\nunquoted string; they only trigger number parsing if they appear\ninitially.\n\nNote that quoted JSON strings may not contain control characters\n(control characters include some whitespace characters, such as\nnewline). This rule is from the JSON spec. However, unquoted\nstrings have no restriction on control characters, other than the\nones listed as \"forbidden characters\" above.\n\nSome of the \"forbidden characters\" are forbidden because they\nalready have meaning in JSON or HOCON, others are essentially\nreserved keywords to allow future extensions to this spec.\n\n### Multi-line strings\n\nMulti-line strings are similar to Python or Scala, using triple\nquotes. If the three-character sequence `\"\"\"` appears, then all\nUnicode characters until a closing `\"\"\"` sequence are used\nunmodified to create a string value. Newlines and whitespace\nreceive no special treatment. Unlike Scala, and unlike JSON quoted\nstrings, Unicode escapes are not interpreted in triple-quoted\nstrings.\n\nIn Python, `\"\"\"foo\"\"\"\"` is a syntax error (a triple-quoted string\nfollowed by a dangling unbalanced quote). In Scala, it is a\nfour-character string `foo\"`. HOCON works like Scala; any sequence\nof at least three quotes ends the multi-line string, and any\n\"extra\" quotes are part of the string.\n\n### Value concatenation\n\nThe value of an object field or array element may consist of\nmultiple values which are combined. There are three kinds of value\nconcatenation:\n\n - if all the values are simple values (neither objects nor\n   arrays), they are concatenated into a string.\n - if all the values are arrays, they are concatenated into\n   one array.\n - if all the values are objects, they are merged (as with\n   duplicate keys) into one object.\n\nString value concatenation is allowed in field keys, in addition\nto field values and array elements. Objects and arrays do not make\nsense as field keys.\n\n#### String value concatenation\n\nString value concatenation is the trick that makes unquoted\nstrings work; it also supports substitutions (`${foo}` syntax) in\nstrings.\n\nOnly simple values participate in string value\nconcatenation. Recall that a simple value is any value other than\narrays and objects.\n\nAs long as simple values are separated only by non-newline\nwhitespace, the _whitespace between them is preserved_ and the\nvalues, along with the whitespace, are concatenated into a string.\n\nString value concatenations never span a newline, or a character\nthat is not part of a simple value.\n\nA string value concatenation may appear in any place that a string\nmay appear, including object keys, object values, and array\nelements.\n\nWhenever a value would appear in JSON, a HOCON parser instead\ncollects multiple values (including the whitespace between them)\nand concatenates those values into a string.\n\nWhitespace before the first and after the last simple value must\nbe discarded. Only whitespace _between_ simple values must be\npreserved.\n\nSo for example ` foo bar baz ` parses as three unquoted strings,\nand the three are value-concatenated into one string. The inner\nwhitespace is kept and the leading and trailing whitespace is\ntrimmed. The equivalent string, written in quoted form, would be\n`\"foo bar baz\"`.\n\nValue concatenating `foo bar` (two unquoted strings with\nwhitespace) and quoted string `\"foo bar\"` would result in the same\nin-memory representation, seven characters.\n\nFor purposes of string value concatenation, non-string values are\nconverted to strings as follows (strings shown as quoted strings):\n\n - `true` and `false` become the strings `\"true\"` and `\"false\"`.\n - `null` becomes the string `\"null\"`.\n - quoted and unquoted strings are themselves.\n - numbers should be kept as they were originally written in the\n   file. For example, if you parse `1e5` then you might render\n   it alternatively as `1E5` with capital `E`, or just `100000`.\n   For purposes of value concatenation, it should be rendered\n   as it was written in the file.\n - a substitution is replaced with its value which is then\n   converted to a string as above.\n - it is invalid for arrays or objects to appear in a string value\n   concatenation.\n\nA single value is never converted to a string. That is, it would\nbe wrong to value concatenate `true` by itself; that should be\nparsed as a boolean-typed value. Only `true foo` (`true` with\nanother simple value on the same line) should be parsed as a value\nconcatenation and converted to a string.\n\n#### Array and object concatenation\n\nArrays can be concatenated with arrays, and objects with objects,\nbut it is an error if they are mixed.\n\nFor purposes of concatenation, \"array\" also means \"substitution\nthat resolves to an array\" and \"object\" also means \"substitution\nthat resolves to an object.\"\n\nWithin an field value or array element, if only non-newline\nwhitespace separates the end of a first array or object or\nsubstitution from the start of a second array or object or\nsubstitution, the two values are concatenated. Newlines may occur\n_within_ the array or object, but not _between_ them. Newlines\n_between_ prevent concatenation.\n\nFor objects, \"concatenation\" means \"merging\", so the second object\noverrides the first.\n\nArrays and objects cannot be field keys, whether concatenation is\ninvolved or not.\n\nHere are several ways to define `a` to the same object value:\n\n    // one object\n    a : { b : 1, c : 2 }\n    // two objects that are merged via concatenation rules\n    a : { b : 1 } { c : 2 }\n    // two fields that are merged\n    a : { b : 1 }\n    a : { c : 2 }\n\nHere are several ways to define `a` to the same array value:\n\n    // one array\n    a : [ 1, 2, 3, 4 ]\n    // two arrays that are concatenated\n    a : [ 1, 2 ] [ 3, 4 ]\n    // a later definition referring to an earlier\n    // (see \"self-referential substitutions\" below)\n    a : [ 1, 2 ]\n    a : ${a} [ 3, 4 ]\n\nA common use of object concatenation is \"inheritance\":\n\n    data-center-generic = { cluster-size = 6 }\n    data-center-east = ${data-center-generic} { name = \"east\" }\n\nA common use of array concatenation is to add to paths:\n\n    path = [ /bin ]\n    path = ${path} [ /usr/bin ]\n\n#### Note: Concatenation with whitespace and substitutions\n\nWhen concatenating substitutions such as `${foo} ${bar}`, the\nsubstitutions may turn out to be strings (which makes the\nwhitespace between them significant) or may turn out to be objects\nor lists (which makes it irrelevant). Unquoted whitespace must be\nignored in between substitutions which resolve to objects or\nlists. Quoted whitespace should be an error.\n\n#### Note: Arrays without commas or newlines\n\nArrays allow you to use newlines instead of commas, but not\nwhitespace instead of commas. Non-newline whitespace will produce\nconcatenation rather than separate elements.\n\n    // this is an array with one element, the string \"1 2 3 4\"\n    [ 1 2 3 4 ]\n    // this is an array of four integers\n    [ 1\n      2\n      3\n      4 ]\n\n    // an array of one element, the array [ 1, 2, 3, 4 ]\n    [ [ 1, 2 ] [ 3, 4 ] ]\n    // an array of two arrays\n    [ [ 1, 2 ]\n      [ 3, 4 ] ]\n\nIf this gets confusing, just use commas. The concatenation\nbehavior is useful rather than surprising in cases like:\n\n    [ This is an unquoted string my name is ${name}, Hello ${world} ]\n    [ ${a} ${b}, ${x} ${y} ]\n\nNon-newline whitespace is never an element or field separator.\n\n### Path expressions\n\nPath expressions are used to write out a path through the object\ngraph. They appear in two places; in substitutions, like\n`${foo.bar}`, and as the keys in objects like `{ foo.bar : 42 }`.\n\nPath expressions are syntactically identical to a value\nconcatenation, except that they may not contain\nsubstitutions. This means that you can't nest substitutions inside\nother substitutions, and you can't have substitutions in keys.\n\nWhen concatenating the path expression, any `.` characters outside\nquoted strings are understood as path separators, while inside\nquoted strings `.` has no special meaning. So\n`foo.bar.\"hello.world\"` would be a path with three elements,\nlooking up key `foo`, key `bar`, then key `hello.world`.\n\nThe main tricky point is that `.` characters in numbers do count\nas a path separator. When dealing with a number as part of a path\nexpression, it's essential to retain the _original_ string\nrepresentation of the number as it appeared in the file (rather\nthan converting it back to a string with a generic\nnumber-to-string library function).\n\n - `10.0foo` is a number then unquoted string `foo` and should\n   be the two-element path with `10` and `0foo` as the elements.\n - `foo10.0` is an unquoted string with a `.` in it, so this would\n   be a two-element path with `foo10` and `0` as the elements.\n - `foo\"10.0\"` is an unquoted then a quoted string which are\n   concatenated, so this is a single-element path.\n - `1.2.3` is the three-element path with `1`,`2`,`3`\n\nUnlike value concatenations, path expressions are _always_\nconverted to a string, even if they are just a single value.\n\nIf you have an array or element value consisting of the single\nvalue `true`, it's a value concatenation and retains its character\nas a boolean value.\n\nIf you have a path expression (in a key or substitution) then it\nmust always be converted to a string, so `true` becomes the string\nthat would be quoted as `\"true\"`.\n\nIf a path element is an empty string, it must always be quoted.\nThat is, `a.\"\".b` is a valid path with three elements, and the\nmiddle element is an empty string. But `a..b` is invalid and\nshould generate an error. Following the same rule, a path that\nstarts or ends with a `.` is invalid and should generate an error.\n\n### Paths as keys\n\nIf a key is a path expression with multiple elements, it is\nexpanded to create an object for each path element other than the\nlast. The last path element, combined with the value, becomes a\nfield in the most-nested object.\n\nIn other words:\n\n    foo.bar : 42\n\nis equivalent to:\n\n    foo { bar : 42 }\n\nand:\n\n    foo.bar.baz : 42\n\nis equivalent to:\n\n    foo { bar { baz : 42 } }\n\nand so on. These values are merged in the usual way; which implies\nthat:\n\n    a.x : 42, a.y : 43\n\nis equivalent to:\n\n    a { x : 42, y : 43 }\n\nBecause path expressions work like value concatenations, you can\nhave whitespace in keys:\n\n    a b c : 42\n\nis equivalent to:\n\n    \"a b c\" : 42\n\nBecause path expressions are always converted to strings, even\nsingle values that would normally have another type become\nstrings.\n\n   - `true : 42` is `\"true\" : 42`\n   - `3 : 42` is `\"3\" : 42`\n   - `3.14 : 42` is `\"3\" : { \"14\" : 42 }`\n\nAs a special rule, the unquoted string `include` may not begin a\npath expression in a key, because it has a special interpretation\n(see below).\n\n### Substitutions\n\nSubstitutions are a way of referring to other parts of the\nconfiguration tree.\n\nThe syntax is `${pathexpression}` or `${?pathexpression}` where\nthe `pathexpression` is a path expression as described above. This\npath expression has the same syntax that you could use for an\nobject key.\n\nThe `?` in `${?pathexpression}` must not have whitespace before\nit; the three characters `${?` must be exactly like that, grouped\ntogether.\n\nFor substitutions which are not found in the configuration tree,\nimplementations may try to resolve them by looking at system\nenvironment variables or other external sources of configuration.\n(More detail on environment variables in a later section.)\n\nSubstitutions are not parsed inside quoted strings. To get a\nstring containing a substitution, you must use value concatenation\nwith the substitution in the unquoted portion:\n\n    key : ${animal.favorite} is my favorite animal\n\nOr you could quote the non-substitution portion:\n\n    key : ${animal.favorite}\" is my favorite animal\"\n\nSubstitutions are resolved by looking up the path in the\nconfiguration. The path begins with the root configuration object,\ni.e. it is \"absolute\" rather than \"relative.\"\n\nSubstitution processing is performed as the last parsing step, so\na substitution can look forward in the configuration. If a\nconfiguration consists of multiple files, it may even end up\nretrieving a value from another file.\n\nIf a key has been specified more than once, the substitution will\nalways evaluate to its latest-assigned value (that is, it will\nevaluate to the merged object, or the last non-object value that\nwas set, in the entire document being parsed including all\nincluded files).\n\nIf a configuration sets a value to `null` then it should not be\nlooked up in the external source. Unfortunately there is no way to\n\"undo\" this in a later configuration file; if you have `{ \"HOME\" :\nnull }` in a root object, then `${HOME}` will never look at the\nenvironment variable. There is no equivalent to JavaScript's\n`delete` operation in other words.\n\nIf a substitution does not match any value present in the\nconfiguration and is not resolved by an external source, then it\nis undefined. An undefined substitution with the `${foo}` syntax\nis invalid and should generate an error.\n\nIf a substitution with the `${?foo}` syntax is undefined:\n\n - if it is the value of an object field then the field should not\n   be created. If the field would have overridden a previously-set\n   value for the same field, then the previous value remains.\n - if it is an array element then the element should not be added.\n - if it is part of a value concatenation with another string then\n   it should become an empty string; if part of a value\n   concatenation with an object or array it should become an empty\n   object or array.\n - `foo : ${?bar}` would avoid creating field `foo` if `bar` is\n   undefined. `foo : ${?bar}${?baz}` would also avoid creating the\n   field if _both_ `bar` and `baz` are undefined.\n\nSubstitutions are only allowed in field values and array\nelements (value concatenations), they are not allowed in keys or\nnested inside other substitutions (path expressions).\n\nA substitution is replaced with any value type (number, object,\nstring, array, true, false, null). If the substitution is the only\npart of a value, then the type is preserved. Otherwise, it is\nvalue-concatenated to form a string.\n\n#### Self-Referential Substitutions\n\nThe big picture:\n\n - substitutions normally \"look forward\" and use the final value\n   for their path expression\n - when this would create a cycle, when possible the cycle must be\n   broken by looking backward only (thus removing one of the\n   substitutions that's a link in the cycle)\n\nThe idea is to allow a new value for a field to be based on the\nolder value:\n\n    path : \"a:b:c\"\n    path : ${path}\":d\"\n\nA _self-referential field_ is one which:\n\n - has a substitution, or value concatenation containing a\n   substitution, as its value\n - where this field value refers to the field being defined,\n   either directly or by referring to one or more other\n   substitutions which eventually point back to the field being\n   defined\n\nExamples of self-referential fields:\n\n - `a : ${a}`\n - `a : ${a}bc`\n - `path : ${path} [ /usr/bin ]`\n\nNote that an object or array with a substitution inside it is\n_not_ considered self-referential for this purpose. The\nself-referential rules do _not_ apply to:\n\n - `a : { b : ${a} }`\n - `a : [${a}]`\n\nThese cases are unbreakable cycles that generate an error. (If\n\"looking backward\" were allowed for these, something like\n`a={ x : 42, y : ${a.x} }` would look backward for a\nnonexistent `a` while resolving `${a.x}`.)\n\nA possible implementation is:\n\n - substitutions are resolved by looking up paths in a document.\n   Cycles only arise when the lookup document is an ancestor\n   node of the substitution node.\n - while resolving a potentially self-referential field (any\n   substitution or value concatenation that contains a\n   substitution), remove that field and all fields which override\n   it from the lookup document.\n\nThe simplest form of this implementation will report a circular\nreference as missing; in `a : ${a}` you would remove `a : ${a}`\nwhile resolving `${a}`, leaving an empty document to look up\n`${a}` in. You can give a more helpful error message if, rather\nthan simply removing the field, you leave a marker value\ndescribing the cycle. Then generate an error if you return to that\nmarker value during resolution.\n\nCycles should be treated the same as a missing value when\nresolving an optional substitution (i.e. the `${?foo}` syntax).\nIf `${?foo}` refers to itself then it's as if it referred to a\nnonexistent value.\n\n#### The `+=` field separator\n\nFields may have `+=` as a separator rather than `:` or `=`. A\nfield with `+=` transforms into a self-referential array\nconcatenation, like this:\n\n    a += b\n\nbecomes:\n\n    a = ${?a} [b]\n\n`+=` appends an element to a previous array. If the previous value\nwas not an array, an error will result just as it would in the\nlong form `a = ${?a} [b]`. Note that the previous value is\noptional (`${?a}` not `${a}`), which allows `a += b` to be the\nfirst mention of `a` in the file (it is not necessary to have `a =\n[]` first).\n\n#### Examples of Self-Referential Substitutions\n\nIn isolation (with no merges involved), a self-referential field\nis an error because the substitution cannot be resolved:\n\n    foo : ${foo} // an error\n\nWhen `foo : ${foo}` is merged with an earlier value for `foo`,\nhowever, the substitution can be resolved to that earlier value.\nWhen merging two objects, the self-reference in the overriding\nfield refers to the overridden field. Say you have:\n\n    foo : { a : 1 }\n\nand then:\n\n    foo : ${foo}\n\nThen `${foo}` resolves to `{ a : 1 }`, the value of the overridden\nfield.\n\nIt would be an error if these two fields were reversed, so first:\n\n    foo : ${foo}\n\nand then second:\n\n    foo : { a : 1 }\n\nHere the `${foo}` self-reference comes before `foo` has a value,\nso it is undefined, exactly as if the substitution referenced a\npath not found in the document.\n\nBecause `foo : ${foo}` conceptually looks to previous definitions\nof `foo` for a value, the error should be treated as \"undefined\"\nrather than \"intractable cycle\"; as a result, the optional\nsubstitution syntax `${?foo}` does not create a cycle:\n\n    foo : ${?foo} // this field just disappears silently\n\nIf a substitution is hidden by a value that could not be merged\nwith it (by a non-object value) then it is never evaluated and no\nerror will be reported. So for example:\n\n    foo : ${does-not-exist}\n    foo : 42\n\nIn this case, no matter what `${does-not-exist}` resolves to, we\nknow `foo` is `42`, so `${does-not-exist}` is never evaluated and\nthere is no error. The same is true for cycles like `foo : ${foo},\nfoo : 42`, where the initial self-reference must simply be ignored.\n\nA self-reference resolves to the value \"below\" even if it's part\nof a path expression. So for example:\n\n    foo : { a : { c : 1 } }\n    foo : ${foo.a}\n    foo : { a : 2 }\n\nHere, `${foo.a}` would refer to `{ c : 1 }` rather than `2` and so\nthe final merge would be `{ a : 2, c : 1 }`.\n\nRecall that for a field to be self-referential, it must have a\nsubstitution or value concatenation as its value. If a field has\nan object or array value, for example, then it is not\nself-referential even if there is a reference to the field itself\ninside that object or array.\n\nImplementations must be careful to allow objects to refer to paths\nwithin themselves, for example:\n\n    bar : { foo : 42,\n            baz : ${bar.foo}\n          }\n\nHere, if an implementation resolved all substitutions in `bar` as\npart of resolving the substitution `${bar.foo}`, there would be a\ncycle. The implementation must only resolve the `foo` field in\n`bar`, rather than recursing the entire `bar` object.\n\nBecause there is no inherent cycle here, the substitution must\n\"look forward\" (including looking at the field currently being\ndefined). To make this clearer, `bar.baz` would be `43` in:\n\n    bar : { foo : 42,\n            baz : ${bar.foo}\n          }\n    bar : { foo : 43 }\n\nMutually-referring objects should also work, and are not\nself-referential (so they look forward):\n\n    // bar.a should end up as 4\n    bar : { a : ${foo.d}, b : 1 }\n    bar.b = 3\n    // foo.c should end up as 3\n    foo : { c : ${bar.b}, d : 2 }\n    foo.d = 4\n\nAnother tricky case is an optional self-reference in a value\nconcatenation, in this example `a` should be `foo` not `foofoo`\nbecause the self reference has to \"look back\" to an undefined `a`:\n\n    a = ${?a}foo\n\nIn general, in resolving a substitution the implementation must:\n\n - lazy-evaluate the substitution target so there's no\n   \"circularity by side effect\"\n - \"look forward\" and use the final value for the path\n   specified in the substitution\n - if a cycle results, the implementation must \"look back\"\n   in the merge stack to try to resolve the cycle\n - if neither lazy evaluation nor \"looking only backward\" resolves\n   a cycle, the substitution is missing which is an error unless\n   the `${?foo}` optional-substitution syntax was used.\n\nFor example, this is not possible to resolve:\n\n    bar : ${foo}\n    foo : ${bar}\n\nA multi-step loop like this should also be detected as invalid:\n\n    a : ${b}\n    b : ${c}\n    c : ${a}\n\nSome cases have undefined behavior because the behavior depends on\nthe order in which two fields are resolved, and that order is not\ndefined. For example:\n\n    a : 1\n    b : 2\n    a : ${b}\n    b : ${a}\n\nImplementations are allowed to handle this by setting both `a` and\n`b` to 1, setting both to `2`, or generating an error. Ideally\nthis situation would generate an error, but that may be difficult\nto implement. Making the behavior defined would require always\nworking with ordered maps rather than unordered maps, which is too\nconstraining. Implementations only have to track order for\nduplicate instances of the same field (i.e. merges).\n\nImplementations must set both `a` and `b` to the same value in\nthis case, however. In practice this means that all substitutions\nmust be memoized (resolved once, with the result\nretained). Memoization should be keyed by the substitution\n\"instance\" (the specific occurrence of the `${}` expression)\nrather than by the path inside the `${}` expression, because\nsubstitutions may be resolved differently depending on their\nposition in the file.\n\n### Includes\n\n#### Include syntax\n\nAn _include statement_ consists of the unquoted string `include`\nfollowed by whitespace and then either:\n - a single _quoted_ string which is interpreted heuristically as\n   URL, filename, or classpath resource.\n - `url()`, `file()`, or `classpath()` surrounding a quoted string\n   which is then interpreted as a URL, file, or classpath. The\n   string must be quoted, unlike in CSS.\n - `required()` surrounding one of the above\n\nAn include statement can appear in place of an object field.\n\nIf the unquoted string `include` appears at the start of a path\nexpression where an object key would be expected, then it is not\ninterpreted as a path expression or a key.\n\nInstead, the next value must be a _quoted_ string or a quoted\nstring surrounded by `url()`, `file()`, or `classpath()`.\nThis value is the _resource name_.\n\nTogether, the unquoted `include` and the resource name substitute\nfor an object field syntactically, and are separated from the\nfollowing object fields or includes by the usual comma (and as\nusual the comma may be omitted if there's a newline).\n\nIf an unquoted `include` at the start of a key is followed by\nanything other than a single quoted string or the\n`url(\"\")`/`file(\"\")`/`classpath(\"\")` syntax, it is invalid and an\nerror should be generated.\n\nThere can be any amount of whitespace, including newlines, between\nthe unquoted `include` and the resource name. For `url()` etc.,\nwhitespace is allowed inside the parentheses `()` (outside of the\nquotes).\n\nValue concatenation is NOT performed on the \"argument\" to\n`include` or `url()` etc. The argument must be a single quoted\nstring. No substitutions are allowed, and the argument may not be\nan unquoted string or any other kind of value.\n\nUnquoted `include` has no special meaning if it is not the start\nof a key's path expression.\n\nIt may appear later in the key:\n\n    # this is valid\n    { foo include : 42 }\n    # equivalent to\n    { \"foo include\" : 42 }\n\nIt may appear as an object or array value:\n\n    { foo : include } # value is the string \"include\"\n    [ include ]       # array of one string \"include\"\n\nYou can quote `\"include\"` if you want a key that starts with the\nword `\"include\"`, only unquoted `include` is special:\n\n    { \"include\" : 42 }\n\n#### Include semantics: merging\n\nAn _including file_ contains the include statement and an\n_included file_ is the one specified in the include statement.\n(They need not be regular files on a filesystem, but assume they\nare for the moment.)\n\nAn included file must contain an object, not an array. This is\nsignificant because both JSON and HOCON allow arrays as root\nvalues in a document.\n\nIf an included file contains an array as the root value, it is\ninvalid and an error should be generated.\n\nThe included file should be parsed, producing a root object. The\nkeys from the root object are conceptually substituted for the\ninclude statement in the including file.\n\n - If a key in the included object occurred prior to the include\n   statement in the including object, the included key's value\n   overrides or merges with the earlier value, exactly as with\n   duplicate keys found in a single file.\n - If the including file repeats a key from an earlier-included\n   object, the including file's value would override or merge\n   with the one from the included file.\n\n#### Include semantics: substitution\n\nSubstitutions in included files are looked up at two different\npaths; first, relative to the root of the included file; second,\nrelative to the root of the including configuration.\n\nRecall that substitution happens as a final step, _after_\nparsing. It should be done for the entire app's configuration, not\nfor single files in isolation.\n\nTherefore, if an included file contains substitutions, they must\nbe \"fixed up\" to be relative to the app's configuration root.\n\nSay for example that the root configuration is this:\n\n    { a : { include \"foo.conf\" } }\n\nAnd \"foo.conf\" might look like this:\n\n    { x : 10, y : ${x} }\n\nIf you parsed \"foo.conf\" in isolation, then `${x}` would evaluate\nto 10, the value at the path `x`. If you include \"foo.conf\" in an\nobject at key `a`, however, then it must be fixed up to be\n`${a.x}` rather than `${x}`.\n\nSay that the root configuration redefines `a.x`, like this:\n\n    {\n        a : { include \"foo.conf\" }\n        a : { x : 42 }\n    }\n\nThen the `${x}` in \"foo.conf\", which has been fixed up to\n`${a.x}`, would evaluate to `42` rather than to `10`.\nSubstitution happens _after_ parsing the whole configuration.\n\nHowever, there are plenty of cases where the included file might\nintend to refer to the application's root config. For example, to\nget a value from a system property or from the reference\nconfiguration. So it's not enough to only look up the \"fixed up\"\npath, it's necessary to look up the original path as well.\n\n#### Include semantics: missing files and required files\n\nBy default, if an included file does not exist then the include statement should\nbe silently ignored (as if the included file contained only an\nempty object).\n\nIf however an included resource is mandatory then the name of the\nincluded resource may be wrapped with `required()`, in which case\nfile parsing will fail with an error if the resource cannot be resolved.\n\nThe syntax for this is\n\n    include required(\"foo.conf\")\n    include required(file(\"foo.conf\"))\n    include required(classpath(\"foo.conf\"))\n    include required(url(\"http://localhost/foo.conf\"))\n\n\nOther IO errors probably should not be ignored but implementations\nwill have to make a judgment which IO errors reflect an ignorable\nmissing file, and which reflect a problem to bring to the user's\nattention.\n\n#### Include semantics: file formats and extensions\n\nImplementations may support including files in other formats.\nThose formats must be compatible with the JSON type system, or\nhave some documented mapping to JSON's type system.\n\nIf an implementation supports multiple formats, then the extension\nmay be omitted from the name of included files:\n\n    include \"foo\"\n\nIf a filename has no extension, the implementation should treat it\nas a basename and try loading the file with all known extensions.\n\nIf the file exists with multiple extensions, they should _all_ be\nloaded and merged together.\n\nFiles in HOCON format should be parsed last. Files in JSON format\nshould be parsed next-to-last.\n\nIn short, `include \"foo\"` might be equivalent to:\n\n    include \"foo.properties\"\n    include \"foo.json\"\n    include \"foo.conf\"\n\nThis same extension-based behavior is applied to classpath\nresources and files.\n\nFor URLs, a basename without extension is not allowed; only the\nexact URL specified is used. The format will be chosen based on\nthe Content-Type if available, or by the extension of the path\ncomponent of the URL if no Content-Type is set. This is true even\nfor file: URLs.\n\n#### Include semantics: locating resources\n\nA quoted string not surrounded by `url()`, `file()`, `classpath()`\nmust be interpreted heuristically. The heuristic is to treat the\nquoted string as:\n\n - a URL, if the quoted string is a valid URL with a known\n   protocol.\n - otherwise, a file or other resource \"adjacent to\" the one being\n   parsed and of the same type as the one being parsed. The meaning\n   of \"adjacent to\", and the string itself, has to be specified\n   separately for each kind of resource.\n - On the Java Virtual Machine, if an include statement does not\n   identify a valid URL or an existing resource \"adjacent to\" the\n   including resource, implementations may wish to fall back to a\n   classpath resource.  This allows configurations found in files\n   or URLs to access classpath resources in a natural way.\n\nImplementations may vary in the kinds of resources they can\ninclude.\n\nFor resources located on the Java classpath:\n\n - included resources are looked up by calling `getResource()` on\n   the same class loader used to look up the including resource.\n - if the included resource name is absolute (starts with '/')\n   then it should be passed to `getResource()` with the '/'\n   removed.\n - if the included resource name does not start with '/' then it\n   should have the \"directory\" of the including resource\n   prepended to it, before passing it to `getResource()`.  If the\n   including resource is not absolute (no '/') and has no \"parent\n   directory\" (is just a single path element), then the included\n   relative resource name should be left as-is.\n - it would be wrong to use `getResource()` to get a URL and then\n   locate the included name relative to that URL, because a class\n   loader is not required to have a one-to-one mapping between\n   paths in its URLs and the paths it handles in `getResource()`.\n   In other words, the \"adjacent to\" computation should be done\n   on the resource name not on the resource's URL.\n\nFor plain files on the filesystem:\n\n - if the included file is an absolute path then it should be kept\n   absolute and loaded as such.\n - if the included file is a relative path, then it should be\n   located relative to the directory containing the including\n   file.  The current working directory of the process parsing a\n   file must NOT be used when interpreting included paths.\n - if the file is not found, fall back to the classpath resource.\n   The classpath resource should not have any package name added\n   in front, it should be relative to the \"root\"; which means any\n   leading \"/\" should just be removed (absolute is the same as\n   relative since it's root-relative). The \"/\" is handled for\n   consistency with including resources from inside other\n   classpath resources, where the resource name may not be\n   root-relative and \"/\" allows specifying relative to root.\n\nURLs:\n\n - for files loaded from a URL, \"adjacent to\" should be based\n   on parsing the URL's path component, replacing the last\n   path element with the included name.\n - file: URLs should behave in exactly the same way as a plain\n   filename\n\nImplementations need not support files, Java resources, or URLs;\nand they need not support particular URL protocols. However, if\nthey do support them they should do so as described above.\n\nNote that at present, if `url()`/`file()`/`classpath()` are\nspecified, the included items are NOT interpreted relative to the\nincluding items. Relative-to-including-file paths only work with\nthe heuristic `include \"foo.conf\"`. This may change in the future.\n\n### Conversion of numerically-indexed objects to arrays\n\nIn some file formats and contexts, such as Java properties files,\nthere isn't a good way to define arrays. To provide some mechanism\nfor this, implementations should support converting objects with\nnumeric keys into arrays. For example, this object:\n\n    { \"0\" : \"a\", \"1\" : \"b\" }\n\ncould be treated as:\n\n    [ \"a\", \"b\" ]\n\nThis allows creating an array in a properties file like this:\n\n    foo.0 = \"a\"\n    foo.1 = \"b\"\n\nThe details:\n\n - the conversion should be done lazily when required to avoid\n   a type error, NOT eagerly anytime an object has numeric\n   keys.\n - the conversion should be done when you would do an automatic\n   type conversion (see the section \"Automatic type conversions\"\n   below).\n - the conversion should be done in a concatenation when a list\n   is expected and an object with numeric keys is found.\n - the conversion should not occur if the object is empty or\n   has no keys which parse as positive integers.\n - the conversion should ignore any keys which do not parse\n   as positive integers.\n - the conversion should sort by the integer value of each\n   key and then build the array; if the integer keys are \"0\" and\n   \"2\" then the resulting array would have indices \"0\" and \"1\",\n   i.e. missing indices in the object are eliminated.\n\n## MIME Type\n\nUse \"application/hocon\" for Content-Type.\n\n## API Recommendations\n\nImplementations of HOCON ideally follow certain conventions and\nwork in a predictable way.\n\n### Automatic type conversions\n\nIf an application asks for a value with a particular type, the\nimplementation should attempt to convert types as follows:\n\n - number to string: convert the number into a string\n   representation that would be a valid number in JSON.\n - boolean to string: should become the string \"true\" or \"false\"\n - string to number: parse the number with the JSON rules\n - string to boolean: the strings \"true\", \"yes\", \"on\", \"false\",\n   \"no\", \"off\" should be converted to boolean values. It's\n   tempting to support a long list of other ways to write a\n   boolean, but for interoperability and keeping it simple, it's\n   recommended to stick to these six.\n - string to null: the string `\"null\"` should be converted to a\n   null value if the application specifically asks for a null\n   value, though there's probably no reason an app would do this.\n - numerically-indexed object to array: see the section\n   \"Conversion of numerically-indexed objects to arrays\" above\n\nThe following type conversions should NOT be performed:\n\n - null to anything: If the application asks for a specific type\n   and finds null instead, that should usually result in an error.\n - object to anything\n - array to anything\n - anything to object\n - anything to array, with the exception of numerically-indexed\n   object to array\n\nConverting objects and arrays to and from strings is tempting, but\nin practical situations raises thorny issues of quoting and\ndouble-escaping.\n\n### Units format\n\nImplementations may wish to support interpreting a value with some\nfamily of units, such as time units or memory size units: `10ms`\nor `512K`. HOCON does not have an extensible type system and there\nis no way to add a \"duration\" type. However, for example, if an\napplication asks for milliseconds, the implementation can try to\ninterpret a value as a milliseconds value.\n\nIf an API supports this, for each family of units it should define\na default unit in the family. For example, the family of duration\nunits might default to milliseconds (see below for details on\ndurations). The implementation should then interpret values as\nfollows:\n\n - if the value is a number, it is taken to be a number in\n   the default unit.\n - if the value is a string, it is taken to be this sequence:\n\n     - optional whitespace\n     - a number\n     - optional whitespace\n     - an optional unit name consisting only of letters (letters\n       are the Unicode `L*` categories, Java `isLetter()`)\n     - optional whitespace\n\n   If a string value has no unit name, then it should be\n   interpreted with the default unit, as if it were a number. If a\n   string value has a unit name, that name of course specifies the\n   value's interpretation.\n\n### Duration format\n\nImplementations may wish to support a `getMilliseconds()` (and\nsimilar for other time units).\n\nThis can use the general \"units format\" described above; bare\nnumbers are taken to be in milliseconds already, while strings are\nparsed as a number plus an optional unit string.\n\nThe supported unit strings for duration are case sensitive and\nmust be lowercase. Exactly these strings are supported:\n\n - `ns`, `nano`, `nanos`, `nanosecond`, `nanoseconds`\n - `us`, `micro`, `micros`, `microsecond`, `microseconds`\n - `ms`, `milli`, `millis`, `millisecond`, `milliseconds`\n - `s`, `second`, `seconds`\n - `m`, `minute`, `minutes`\n - `h`, `hour`, `hours`\n - `d`, `day`, `days`\n \n### Period Format\n \nSimilar to the `getDuration()` method, there is a `getPeriod()` method \navailable for getting time units as a `java.time.Period`. \n\nThis can use the general \"units format\" described above; bare\nnumbers are taken to be in days, while strings are\nparsed as a number plus an optional unit string.\n\nThe supported unit strings for period are case sensitive and\nmust be lowercase. Exactly these strings are supported:\n\n - `d`, `day`, `days`\n - `w`, `week`, `weeks`\n - `m`, `mo`, `month`, `months` (note that if you are using `getTemporal()`\n which may return either a `java.time.Duration` or a `java.time.Period`\n you will want to use `mo` rather than `m` to prevent your unit being \n parsed as minutes)\n - `y`, `year`, `years`\n \n### Size in bytes format\n\nImplementations may wish to support a `getBytes()` returning a\nsize in bytes.\n\nThis can use the general \"units format\" described above; bare\nnumbers are taken to be in bytes already, while strings are\nparsed as a number plus an optional unit string.\n\nThe one-letter unit strings may be uppercase (note: duration units\nare always lowercase, so this convention is specific to size\nunits).\n\nThere is an unfortunate nightmare with size-in-bytes units, that\nthey may be in powers or two or powers of ten. The approach\ndefined by standards bodies appears to differ from common usage,\nsuch that following the standard leads to people being confused.\nWorse, common usage varies based on whether people are talking\nabout RAM or disk sizes, and various existing operating systems\nand apps do all kinds of different things.  See\nhttps://en.wikipedia.org/wiki/Binary_prefix#Deviation_between_powers_of_1024_and_powers_of_1000\nfor examples. It appears impossible to sort this out without\ncausing confusion for someone sometime.\n\nFor single bytes, exactly these strings are supported:\n\n - `B`, `b`, `byte`, `bytes`\n\nFor powers of ten, exactly these strings are supported:\n\n - `kB`, `kilobyte`, `kilobytes`\n - `MB`, `megabyte`, `megabytes`\n - `GB`, `gigabyte`, `gigabytes`\n - `TB`, `terabyte`, `terabytes`\n - `PB`, `petabyte`, `petabytes`\n - `EB`, `exabyte`, `exabytes`\n - `ZB`, `zettabyte`, `zettabytes`\n - `YB`, `yottabyte`, `yottabytes`\n\nFor powers of two, exactly these strings are supported:\n\n - `K`, `k`, `Ki`, `KiB`, `kibibyte`, `kibibytes`\n - `M`, `m`, `Mi`, `MiB`, `mebibyte`, `mebibytes`\n - `G`, `g`, `Gi`, `GiB`, `gibibyte`, `gibibytes`\n - `T`, `t`, `Ti`, `TiB`, `tebibyte`, `tebibytes`\n - `P`, `p`, `Pi`, `PiB`, `pebibyte`, `pebibytes`\n - `E`, `e`, `Ei`, `EiB`, `exbibyte`, `exbibytes`\n - `Z`, `z`, `Zi`, `ZiB`, `zebibyte`, `zebibytes`\n - `Y`, `y`, `Yi`, `YiB`, `yobibyte`, `yobibytes`\n\nIt's very unclear which units the single-character abbreviations\n(\"128K\") should go with; some precedents such as `java -Xmx 2G`\nand the GNU tools such as `ls` map these to powers of two, so this\nspec copies that. You can certainly find examples of mapping these\nto powers of ten, though. If you don't like ambiguity, don't use\nthe single-letter abbreviations.\n\nNote: any value in zetta/zebi or yotta/yobi will overflow a 64-bit\ninteger, and of course large-enough values in any of the units may\noverflow. Most real-world APIs and apps will not support byte\ncounts that overflow a 64-bit integer. The huge units are provided\njust to be complete but probably aren't useful in practice. At\nleast not in 2014.\n\n### Config object merging and file merging\n\nIt may be useful to offer a method to merge two objects. If such a\nmethod is provided, it should work as if the two objects were\nduplicate values for the same key in the same file. (See the\nsection earlier on duplicate key handling.)\n\nAs with duplicate keys, an intermediate non-object value \"hides\"\nearlier object values. So say you merge three objects in this\norder:\n\n - `{ a : { x : 1 } }`  (first priority)\n - `{ a : 42 }` (fallback)\n - `{ a : { y : 2 } }` (another fallback)\n\nThe result would be `{ a : { x : 1 } }`. The two objects are not\nmerged because they are not \"adjacent\"; the merging is done in\npairs, and when `42` is paired with `{ y : 2 }`, `42` simply wins\nand loses all information about what it overrode.\n\nBut if you re-ordered like this:\n\n - `{ a : { x : 1 } }`  (first priority)\n - `{ a : { y : 2 } }` (fallback)\n - `{ a : 42 }` (another fallback)\n\nNow the result would be `{ a : { x : 1, y : 2 } }` because the two\nobjects are adjacent.\n\nThis rule for merging objects loaded from different files is\n_exactly_ the same behavior as for merging duplicate fields in the\nsame file. All merging works the same way.\n\nNeedless to say, normally it's well-defined whether a config\nsetting is supposed to be a number or an object. This kind of\nweird pathology where the two are mixed should not be happening.\n\nThe one place where it matters, though, is that it allows you to\n\"clear\" an object and start over by setting it to null and then\nsetting it back to a new object. So this behavior gives people a\nway to get rid of default fallback values they don't want.\n\n### Java properties mapping\n\nIt may be useful to merge Java properties data with data loaded\nfrom JSON or HOCON. See the Java properties spec here:\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader-\n\nJava properties parse as a one-level map from string keys to\nstring values.\n\nTo convert to HOCON, first split each key on the `.` character,\nkeeping any empty strings (including leading and trailing empty\nstrings). Note that this is _very different_ from parsing a path\nexpression.\n\nThe key split on `.` is a series of path elements. So the\nproperties key with just `.` is a path with two elements, both of\nthem an empty string. `a.` is a path with two elements, `a` and\nempty string.  (Java's `String.split()` does NOT do what you want\nfor this.)\n\nIt is impossible to represent a key with a `.` in it in a\nproperties file.  If a JSON/HOCON key has a `.` in it, which is\npossible if the key is quoted, then there is no way to refer to it\nas a Java property. It is not recommended to name HOCON keys with\na `.` in them, since it would be confusing at best in any case.\n\nOnce you have a path for each value, construct a tree of\nJSON-style objects with the string value of each property located\nat that value's path.\n\nValues from properties files are _always_ strings, even if they\ncould be parsed as some other type. Implementations should do type\nconversion if an app asks for an integer, as described in an\nearlier section.\n\nWhen Java loads a properties file, unfortunately it does not\npreserve the order of the file. As a result, there is an\nintractable case where a single key needs to refer to both a\nparent object and a string value. For example, say the Java\nproperties file has:\n\n    a=hello\n    a.b=world\n\nIn this case, `a` needs to be both an object and a string value.\nThe _object_ must always win in this case... the \"object wins\"\nrule throws out at most one value (the string) while \"string wins\"\nwould throw out all values in the object. Unfortunately, when\nproperties files are mapped to the JSON structure, there is no way\nto access these strings that conflict with objects.\n\nThe usual rule in HOCON would be that the later assignment in the\nfile wins, rather than \"object wins\"; but implementing that for\nJava properties would require implementing a custom Java\nproperties parser, which is surely not worth it and wouldn't help\nwith system properties anyway.\n\n### Conventional configuration files for JVM apps\n\nBy convention, JVM apps have two parts to their configuration:\n\n - the _reference_ config is made up of all resources named\n   `reference.conf` on the classpath, merged in the order they\n   are returned by `ClassLoader.getResources()`; also, system\n   property overrides are applied.\n - the _application_ config can be loaded from anywhere an\n   application likes, but by default if the application doesn't\n   provide a config it would be loaded from files\n   `application.{conf,json,properties}` on the classpath and\n   then system property overrides are applied.\n - the reference config may be different for different class\n   loaders, since each jar may provide a `reference.conf`\n   to go with the code in that jar.\n - a single JVM may have multiple application configs if\n   it has multiple modules or contexts of some kind.\n\nThe reference config for a given class loader should be merged and\nresolved first, and may be shared among all application configs in\nthat class loader. Substitutions in the reference config are not\naffected by any application configs, because the reference config\nshould be resolved by itself.\n\nThe application config should then be loaded, have the reference\nconfig added as a fallback, and have substitutions resolved. This\nmeans the application config can refer to the reference config in\nits substitutions.\n\n### Conventional override by system properties\n\nFor an application's config, Java system properties _override_\nsettings found in the configuration file. This supports specifying\nconfig options on the command line.\n\n### Substitution fallback to environment variables\n\nRecall that if a substitution is not present (not even set to\n`null`) within a configuration tree, implementations may search\nfor it from external sources. One such source could be environment\nvariables.\n\nIt's recommended that HOCON keys always use lowercase, because\nenvironment variables generally are capitalized. This avoids\nnaming collisions between environment variables and configuration\nproperties. (While on Windows getenv() is generally not\ncase-sensitive, the lookup will be case sensitive all the way\nuntil the env variable fallback lookup is reached).\n\nSee also the notes below on Windows and case sensitivity.\n\nAn application can explicitly block looking up a substitution in\nthe environment by setting a value in the configuration, with the\nsame name as the environment variable. You could set `HOME : null`\nin your root object to avoid expanding `${HOME}` from the\nenvironment, for example.\n\nEnvironment variables are interpreted as follows:\n\n - env variables set to the empty string are kept as such (set to\n   empty string, rather than undefined)\n - System.getenv throws SecurityException: treated as not present\n - encoding is handled by Java (System.getenv already returns\n   a Unicode string)\n - environment variables always become a string value, though\n   if an app asks for another type automatic type conversion\n   would kick in\n\n### hyphen-separated vs. camelCase\n\nConfig keys are encouraged to be `hyphen-separated` rather than\n`camelCase`.\n\n## Note on Java properties similarity\n\nYou can write a HOCON file that looks much like a Java properties\nfile, and many valid Java properties files will also parse as\nHOCON.\n\nHowever, HOCON is not a Java properties superset and the corner\ncases work like JSON, not like properties.\n\nDifferences include but are probably not limited to:\n\n - certain characters that can be unquoted in properties files\n   have to be placed in JSON-style double-quoted strings in HOCON\n - unquoted strings in HOCON do not support escape sequences\n - unquoted strings in HOCON do not preserve trailing whitespace\n - multi-line unquoted strings using backslash to continue the\n   line are not allowed in HOCON\n - in properties files you can omit the value for a key and it's\n   interpreted as an empty string, in HOCON you cannot omit the\n   value\n - properties files support '!' as a comment character\n - HOCON allows comments on the same line as a key or value, while\n   properties files only recognize comment characters if they\n   occur as the first character on the line\n - HOCON interprets `${}` as a substitution\n\n## Note on Windows and case sensitivity of environment variables\n\nHOCON's lookup of environment variable values is always case sensitive, but\nLinux and Windows differ in their handling of case.\n\nLinux allows one to define multiple environment variables with the same\nname but with different case; so both \"PATH\" and \"Path\" may be defined\nsimultaneously. HOCON's access to these environment variables on Linux\nis straightforward; ie just make sure you define all your vars with the required case.\n\nWindows is more confusing. Windows environment variables names may contain a\nmix of upper and lowercase characters, eg \"Path\", however Windows does not\nallow one to define multiple instances of the same name but differing in case.\nWhilst accessing env vars in Windows is case insensitive, accessing env vars in\nHOCON is case sensitive.\nSo if you know that you HOCON needs \"PATH\" then you must ensure that\nthe variable is defined as \"PATH\" rather than some other name such as\n\"Path\" or \"path\".\nHowever, Windows does not allow us to change the case of an existing env var; we can't\nsimply redefine the var with an upper case name.\nThe only way to ensure that your environment variables have the desired case\nis to first undefine all the env vars that you will depend on then redefine\nthem with the required case.\n\nFor example, the the ambient environment might have this definition ...\n\n```\nset Path=A;B;C\n```\n.. we just don't know. But if the HOCON needs \"PATH\", then the start script must\ntake a precautionary approach and enforce the necessary case as follows ...\n\n```\nset OLDPATH=%PATH%\nset PATH=\nset PATH=%OLDPATH%\n\n%JAVA_HOME%/bin/java ....\n```\n\nYou cannot know what ambient environment variables might exist in the ambient environment\nwhen your program is invoked, nor what case those definitions might have.\nTherefore the only safe thing to do is redefine all the vars you rely on as shown above.\n"
        },
        {
          "name": "LICENSE-2.0.txt",
          "type": "blob",
          "size": 11.09375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 19.734375,
          "content": "# 1.4.3: October 17, 2023\n\n- Optionally hide rendered environment variables ([#798](/../../pull/798))\n\n# 1.4.2: February 2, 2022\n\n - Avoid instantiating arbitrary classes ([#758](/../../pull/758)) thanks to [@vlsi](https://github.com/vlsi) for the report and [@raboof](https://github.com/raboof) for the patch\n - Various project infrastructure improvements ([#755](/../../pull/755), [#757](/../../pull/757)) thanks to [@ennru](https://github.com/ennru)\n - Add hoplite to Kotlin wrappers ([#749](/../../pull/749)) thanks to [@sksamuel](https://github.com/sksamuel)\n - Remove unnecessary array ([#730](/../../issues/730)) thanks to [@hkupty](https://github.com/hkupty)\n - Add erlang port to README ([#722](/../../pull/722)) thanks to [@6293](https://github.com/6293)\n - Update repo path for Ficus ([#694](/../../pull/694)) thanks to [@joyfulvillage](https://github.com/joyfulvillage)\n - Fix wrong URL in NEWS.md ([#723](/../../pull/723)) thanks to [@lukaszlenart](https://github.com/lukaszlenart)\n\n# 1.4.1: October 22, 2020\n\n - introduce docs for arrays on env vars ([#706](/../../pull/706)), ([#710](/../../pull/710)) and ([#711](/../../pull/711)) thanks to [@ignasi35](https://github.com/ignasi35) and [@andreaTP](https://github.com/andreaTP)\n - add a helper method for parsing only application overrides ([#708](/../../pull/708)) and ([#709](/../../pull/709)) thanks to [@bbaldino](https://github.com/bbaldino)\n - remove unmodifiable collection wrappers in ResolveContext ([#701](/../../pull/701)) thanks to [@havocp](https://github.com/havocp)\n - added support for memory units which don't fit in a long when transformed to bytes ([#663](/../../pull/663)) thanks to [@mpryahin](https://github.com/mpryahin)\n - inherit optional and getter evaluation ([#660](/../../pull/660)) thanks to [@derKrischan](https://github.com/derKrischan)\n - a few other bug fixes\n\n# 1.4.0: October 11, 2019\n\n- `application.conf` variables can now override variables in `reference.conf` [#619](https://github.com/lightbend/config/issues/167)\n- performance improvement through capacity hint for `ArrayList` [#648](https://github.com/lightbend/config/pull/648)\n\n(This was previously published as 1.3.5-RC1 but deemed a large enough change to require a minor version rather than a patch)\n\n# 1.3.4: April 18, 2019\n\n- it is now possible to override any configuration setting from environment variables ([#620](/../../pull/620)) thanks to [@andreaTP](https://github.com/andreaTP)\n- added support for integer keys that are longer than `Int` ([#568](/../../pull/568)) thanks to [@michalmela](https://github.com/michalmela)\n- `Missing` exception now has a reference to the origin `Config` ([#585](/../../pull/585)) thanks to [@vagola](https://github.com/vagola)\n- performance improvements to `resolve()` ([#578](/../../pull/578)) thanks to [@sam-token](https://github.com/sam-token)\n- config file syntax is now resolved when parsing `InputStream` ([#573](/../../pull/573)) thanks to [@ntviet18](https://github.com/ntviet18)\n- it is now possible to use `@Optional` on keys that are reserved words ([#570](/../../pull/570)) thanks to [@radist-nt](https://github.com/radist-nt)\n- `ValidationProblem` is now serializable ([#437](/../../pull/437)) thanks to [@iantabolt](https://github.com/iantabolt)\n\nAll of the merged PRs can be found in the [release milestone](https://github.com/lightbend/config/milestone/4?closed=1).\n\n# 1.3.3: February 22, 2018\n\n- artifact now includes `Automatic-Module-Name` which makes it consumable as Java 9 module.\n- minor issue fix. All of the fixed issues can be found in the [milestone page](https://github.com/lightbend/config/milestone/3?closed=1).\n\n# 1.3.2: October 6, 2017\n\n- environment variables are now able to be resolved to lists in\n  the same fashion as system properties.\n- added `getPeriod()` which returns time units as\n  `java.time.Period`. Currently supported periods are days, weeks,\n  months and years. [More information here](HOCON.md#period-format).\n- `ConfigResolveOptions` now has `appendResolver(...)` which allows\n  having custom behavior when unresolved substitutions are encountered\n  during resolution.\n- Config Beans now support `Set` collection.\n- a few other small bugfixes. All of the fixed issues can be found\n  in the [milestone page](https://github.com/lightbend/config/milestone/1?closed=1).\n\n# 1.3.1: September 24, 2016\n\n- added `include required(\"foo\")` syntax to specify includes that\n  fail if not present\n- support for more kinds of property in ConfigBeanFactory:\n  * enumerations\n  * optional fields\n  * lists of beans\n- numbers can now start with a decimal (\".33\" vs. \"0.33\"), these\n  are still parsed as strings but Config.getDouble() etc.  will\n  convert them to numbers\n- a few other small bugfixes\n\n# 1.3.0: May 8, 2015\n\n- no changes from 1.3.0-M3\n- this is an ABI-guaranteed stable release.\n- 1.3.0 should be ABI-compatible with 1.2.x for most applications,\n  though there are enough changes to corner cases and\n  implementation that some obscure things could break. Please see\n  the notes for the 1.3.0 milestones below for details, especially\n  for 1.3.0-M1.\n\n# 1.3.0-M3: April 21, 2015\n\n- this is an ABI-not-guaranteed beta release in advance\n  of 1.3.0. Please see the notes for 1.3.0-M1 below for warnings,\n  caveats, and the bulk of what's changed since 1.2.1.\n\nAPI changes (since 1.3.0-M2):\n\n- renamed some methods in the new ConfigDocument for consistency\n  with Config (breaks ABI vs. 1.3.0-M2, but not vs. any stable\n  release)\n\nFixes:\n\n- couple of bugfixes in ConfigDocument\n\nThank you to contributors with commits since v1.3.0-M2 tag:\n\n- Preben Ingvaldsen\n\n# 1.3.0-M2: April 1, 2015\n\n- not in fact an April Fool's joke. Unless it's broken. Then it\n  was.\n- this is an ABI-not-guaranteed beta release in advance\n  of 1.3.0. Please see the notes for 1.3.0-M1 below for warnings,\n  caveats, and the bulk of what's changed since 1.2.1.\n- this release churns the internals a good bit since 1.3.0-M1,\n  so would benefit from your testing efforts.\n\nNew API (since 1.3.0-M1):\n\n- added Config.hasPathOrNull\n- added Config.getIsNull\n- added parser.ConfigDocument which supports simple load/edit/save\n  on a config file. For now, the only allowed edits are\n  removing/replacing values. This was a major effort (redoing the\n  whole parser), implemented by Preben Ingvaldsen.\n\nFixes:\n\n- added missing @since tags to javadoc\n- fixed obscure bug in converting to camel case when instantiating\n  beans\n\nThank you to contributors with commits since v1.3.0-M1 tag:\n\n- Glen Ford\n- Jay McCure\n- Preben Ingvaldsen\n\n# 1.3.0-M1: March 6, 2015\n\n- this is an ABI-not-guaranteed beta release in advance\n  of 1.3.0. The public, documented ABI should not be broken\n  vs. 1.2.0; however, there are enough changes that something\n  certainly could break, and some obscure corner cases have\n  changed semantics and that could bite some people.\n\nChanges that are most likely to break something:\n\n- now built with Java 8 and requires Java 8\n- if you were relying on the order of key iteration in a config,\n  note that Java 8 changed the iteration order for hashes\n  and that includes `Config` and `ConfigObject`\n- several correctness fixes to resolving substitutions (the\n  `${foo}` syntax). These should only matter in weird corner\n  cases, but some people did encounter the problems such as in\n  #177.\n- throw an exception if a size-in-bytes values are out of Long\n  range #170\n- two adjacent undefined concatenation elements (like\n  `${?foo}${?bar}`) now become undefined instead of throwing an\n  exception\n- when rendering a path that starts with a digit, don't put\n  quotes around it\n- set the Accept header on http requests when loading\n  config from a URL\n- when getting a 404 from a URL, treat it as a missing file\n  (silently ignore) instead of throwing exception.\n  Other error codes will still throw an exception.\n- ConfigParseOptions.prependIncluder/appendIncluder always\n  throw when given a null includer, formerly they only\n  threw sometimes\n\nNew API:\n\n- `ConfigBeanFactory` will auto-fill a JavaBean from\n  a `Config`\n- it is now possible to create a `ConfigOrigin` using\n  `ConfigOriginFactory` and to modify origins on values\n  using `ConfigValue.withOrigin`\n- `Config.getMemorySize` returns a `ConfigMemorySize`\n- `Config.getDuration` returns a `java.time.Duration`\n- the existing `ConfigValueFactory.fromAnyRef` and related\n  methods now pass through a `ConfigValue` instead of throwing\n  an exception\n- `ConfigFactory.defaultApplication()` returns the default\n  `Config` used by `ConfigFactory.load()` in between\n  `defaultReference()` and `defaultOverrides()`, leaving\n  `ConfigFactory.load()` as a trivial convenience API\n  that uses no internal magic.\n\nImprovements:\n\n- allow duration abbreviations \"nanos\", \"millis\", \"micros\"\n- Config.hasPath is now _much_ faster, so if you were caching to\n  avoid this you may be able to stop\n- new debug option -Dconfig.trace=substitutions explains\n  how `${foo}` references are being resolved\n- sort numeric keys in numeric order when rendering\n- allow whitespace in between two substitutions referring to\n  objects or lists when concatenating them, so `${foo} ${bar}`\n  and `${foo}${bar}` are now the same if foo and bar are objects\n  or lists.\n- better error messages for problems loading resources from\n  classpath, now we show the jar URL that failed\n- even more test coverage!\n- lots of minor javadoc fixes\n- method names in javadoc now link to github source\n\nBug fixes:\n\n- fix \"allow unresolved\" behavior for unresolved list elements\n- class loaders are cached with a WeakReference to avoid leaks\n  #171\n- create valid output for values with multiline descriptions\n  #239\n- `-Dsun.io.serialization.extendedDebugInfo=true` no longer\n  explodes due to calling toString on an internal object,\n  #176\n\nThank you to contributors with commits since v1.2.1 tag:\n\n- Alex Wei\n- Andrey Zaytsev\n- Ben Jackman\n- Ben McCann\n- Chris Martin\n- Dale Wijnand\n- Francois Dang Ngoc\n- ian\n- KAWACHI Takashi\n- Kornel Kielczewski\n- Lunfu Zhong\n- Michel Daviot\n- Paul Phillips\n- Pavel Yakunin\n- Preben Ingvaldsen\n- verbeto\n- Wu Zhenwei\n\n# 1.2.1: May 2, 2014\n\n- bugfix release, no API additions or changes\n- fix resolving substitutions in include statements nested inside\n  objects\n- when rendering an object to a string, sort the fields\n- handle unresolved substitutions in value concatenations\n- make ConfigOrigin.comments unmodifiable\n- when using '+=' or 'include' inside a list, throw an exception\n  instead of generating a wrong result\n- when context class loader is unset throw a more helpful\n  exception than NullPointerException\n- ignore non-string values in a Properties object\n\n# 1.2.0: January 15, 2014\n\n - new stable ABI release (binary compatible with 1.0.x; a few new APIs)\n - new API ConfigResolveOptions.setAllowUnresolved lets you\n   partially-resolve a Config\n - new API Config.isResolved lets you check on resolution status\n - new API Config.resolveWith lets you source substitutions from\n   somewhere other than the Config itself\n - new API Config.getDuration() replaces getMilliseconds and\n   getNanoseconds\n - if -Dconfig.file, -Dconfig.resource, -Dconfig.url refer to\n   a nonexistent file, resource, or url it is now an error rather\n   than silently loading an empty configuration.\n - quite a few bugfixes\n\n# 1.1.0-4dd6c85cab1ef1a4415abb74704d60e57497b7b8: January 8, 2014\n\n - remove junk in POM caused by broken local configuration\n - build jar using Java 1.6 (and enforce this in build)\n - change getDuration to return unboxed long instead of boxed\n - API documentation improvements\n   https://lightbend.github.io/config/latest/api/\n\n# 1.1.0-9f31d6308e7ebbc3d7904b64ebb9f61f7e22a968: January 6, 2014\n\n - this is a snapshot/preview with API/ABI additions. *New* API\n   since 1.0.x is NOT guaranteed to remain compatible for now\n   since the purpose of this release is to test it.\n   This release is supposed to be ABI-compatible with 1.0.x\n   however.\n - snapshots now use the git hash they are based on in the\n   version, instead of SNAPSHOT, so they are a stable reference\n   if you want to test them out.\n - if -Dconfig.file, -Dconfig.resource, -Dconfig.url refer to\n   a nonexistent file, resource, or url it is now an error rather\n   than silently loading an empty configuration.\n - new API Config.getDuration() replaces getMilliseconds and\n   getNanoseconds. (should it return `long` instead of `Long` even\n   though it's been in git for a while? weigh in at\n   https://github.com/lightbend/config/issues/119 )\n - new API ConfigResolveOptions.setAllowUnresolved lets you\n   partially-resolve a Config\n - new API Config.isResolved lets you check on resolution status\n - new API Config.resolveWith lets you source substitutions from\n   somewhere other than the Config itself\n - compiled with debug symbols\n - add -Dconfig.trace=loads feature to trace loaded files and\n   failures\n - improvements to ConfigObject render() formatting so you can\n   print out a config in a prettier way\n - attempt to honor Content-Type when loading from a URL\n - a fair list of corner case bugfixes\n\n# 1.0.2: July 3, 2013\n\n - ignore byte-order mark (BOM), treating it as whitespace\n - very minor docs/build improvements\n\n# 1.0.1: May 19, 2013\n\n - when an array is requested and an object found, try to convert\n   the object to an array if the object has numeric keys in it.\n   This is intended to support `-Dfoo.0=bar, -Dfoo.1=baz` which\n   would create `foo : { \"0\" : \"bar\", \"1\" : \"baz\" }`; which in\n   turn could now be treated as if it were `foo :\n   [\"bar\",\"baz\"]`. This is useful for creating array values on the\n   command line using Java system properties.\n - fix a ConcurrentModificationException if an app modified\n   system properties while we were trying to parse them.\n - fix line numbering in error messages for newlines within triple\n   quotes.\n\n# 1.0.0: October 15, 2012\n\n - no changes from 0.6.0. ABI now guaranteed for 1.0.x series.\n\n# 0.6.0: October 10, 2012\n\n - add ConfigRenderOptions.setJson which can be used to enable or\n   disable the use of HOCON extensions (other than comments, which\n   remain separately-controlled). Right now setJson(false) will\n   result in a somewhat prettier rendering using extensions.\n - add ConfigFactory.invalidateCaches() to support reloading\n   system properties (mostly this is intended for use in\n   unit tests).\n - make ConfigException serializable, in case you have some\n   logging system or similar that relies on that. Serialization\n   of ConfigException is not guaranteed to be compatible across\n   releases.\n\n# 0.5.2: September 6, 2012\n\n - add versions of ConfigFactory.load() which let you specify\n   ConfigParseOptions and ConfigResolveOptions.\n\n# 0.5.0: July 5, 2012\n\n - triple-quoted strings as in Python or Scala\n - obscure backward incompatibilities:\n    - `\"\"\"\"` previously parsed as two empty strings concatenated\n      into a single empty string, now it parses as an unterminated\n      triple-quoted string.\n    - a triple-quoted string like `\"\"\"\\n\"\"\"` previously parsed as\n      an empty string, a string with one newline character, and\n      another empty string, all concatenated into a single\n      string. Now it parses as a string with two characters\n      (backslash and lowercase \"n\").\n    - in short you could have two adjacent quoted strings before,\n      where one was an empty string, and now you can't.  As far as\n      I know, the empty string was always worthless in this case\n      and can just be removed.\n - added methods atPath() and atKey() to ConfigValue, to wrap\n   the value into a Config\n - added method withValue() to Config and ConfigObject,\n   to add a value at a given path or key\n\n# 0.4.1: May 22, 2012\n\n - publish as OSGi bundle\n\n# 0.4.0: April 12, 2012\n\n - this is **rolling toward 1.0** and should be pretty much\n   feature-complete.\n - this version is published on **Maven central** so you need\n   to update your dependency coordinates\n - the **serialization format has changed** to one that's\n   extensible and lets the library evolve without breaking\n   serialization all the time. The new format is also much more\n   compact. However, this change is incompatible with old\n   serializations, if you rely on that. The hope is to avoid\n   serialization breakage in the future now that the format is not\n   the default Java one (which was a direct dump of all the\n   implementation details).\n - **serializing an unresolved Config** (one that hasn't had\n   resolve() called on it) is no longer supported, you will get\n   NotSerializableException if you try.\n - ConfigValue.render() now supports ConfigRenderOptions which\n   means you can get a **no-whitespace no-comments plain JSON\n   rendering** of a ConfigValue\n - supports **self-referential substitutions**, such as\n   `path=${path}\":/bin\"`, by \"looking backward\" to the previous\n   value of `path`\n - supports **concatenating arrays and merging objects within a\n   single value**. So you can do `path=${path} [ \"/bin\" ]` for\n   example. See README and spec for more details.\n - supports **array append** `+=` where `path+=\"/bin\"` expands to\n   `path=${?path} [ \"/bin\" ]`\n - supports **specifying type of include** `include\n   url(\"http://example.com/\")`, `include file(\"/my/file.conf\")`,\n   and `include classpath(\"whatever\")`.  This syntax forces\n   treatment as URL, file, or classpath resource.\n - supports **including URLs** `include\n   \"http://example.com/whatever.conf\"` (if an include is a valid\n   URL, it's loaded as such). This is incompatible with prior\n   versions, if you have a filename that is also a valid URL, it\n   would have loaded previously but now it will not. Use the\n   `include file(\"\")` syntax to force treatment as a file.\n - **class loaders are now recursively inherited** through include\n   statements; previously, even if you set a custom class loader\n   when parsing a file, it would not be used for parsing a\n   classpath resource included from the file.\n - parseString() and parseReader() now support include statements\n   in the parsed string or reader\n - in -Dconfig.resource=name, name can start with a \"/\" or not,\n   doesn't matter\n - if you implement ConfigIncluder, you should most likely also\n   implement ConfigIncluderFile, ConfigIncluderURL, and\n   ConfigIncluderClasspath. You should also use\n   ConfigIncludeContext.parseOptions() if appropriate.\n - cycles in include statements (self-includes) are now detected\n   and result in a nicer error instead of stack overflow\n - since 0.3.0, there is an obscure incompatible semantic change\n   in that self-referential substitutions where the cycle could\n   be broken by partially resolving the object now \"look backward\"\n   and may fail to resolve. This is not incompatible with the\n   version included in Play/Akka 2.0 because in that version this\n   obscure case just threw an exception. But in 0.3.0 there\n   were cases that worked that now work differently. You are very\n   unlikely to be affected by this.\n - Play/Akka 2.0 do not and will not have the new stuff in this\n   version due to the serialization break, they will update\n   next time they bump their ABI.\n\n# 0.3.1: August 6, 2012\n\n - 0.3.1 is a backport of the \"-Dconfig.resource=name can start with a\n   /\" fix to 0.3.0\n - 0.3.1 was published on Maven Central while 0.3.0 and earlier\n   are only on Typesafe's repository\n - 0.3.1 is mostly intended for use by Akka 2.0.x (and therefore\n   Play 2.0.x), everyone else should use a higher version number\n\n# 0.3.0: March 1, 2012\n\n - ConfigFactory methods now use the thread's context class loader\n   by default, and have overloads so you can specify a class\n   loader. Because jars may come with \"reference.conf\" in the jar,\n   a config must always be loaded with the same class loader as\n   the jar using the config.\n - ConfigValue instances are now serializable\n - new methods ConfigObject.withoutKey, ConfigObject.withOnlyKey,\n   Config.withoutPath, Config.withOnlyPath allow subsetting\n   configs more easily.\n - better handle complex interdependent substitutions (the\n   `${foo}` syntax) without getting confused; just about anything\n   that makes conceptual sense should now work. Only inherently\n   circular config files should fail.\n - some minor documentation fixes.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.9140625,
          "content": "# Configuration library for JVM languages.\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.typesafe/config/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.typesafe/config)\n[![Build Status](https://github.com/lightbend/config/actions/workflows/ci.yml/badge.svg)](https://github.com/lightbend/config/actions/workflows/ci.yml)\n\n## Overview\n\n - implemented in plain Java with no dependencies\n - supports files in three formats: Java properties, JSON, and a\n   human-friendly JSON superset\n - merges multiple files across all formats\n - can load from files, URLs, or classpath\n - good support for \"nesting\" (treat any subtree of the config the\n   same as the whole config)\n - users can override the config with Java system properties,\n    `java -Dmyapp.foo.bar=10`\n - supports configuring an app, with its framework and libraries,\n   all from a single file such as `application.conf`\n - parses duration and size settings, \"512k\" or \"10 seconds\"\n - converts types, so if you ask for a boolean and the value\n   is the string \"yes\", or you ask for a float and the value is\n   an int, it will figure it out.\n - JSON superset features:\n    - comments\n    - includes\n    - substitutions (`\"foo\" : ${bar}`, `\"foo\" : Hello ${who}`)\n    - properties-like notation (`a.b=c`)\n    - less noisy, more lenient syntax\n    - substitute environment variables (`logdir=${HOME}/logs`)\n - API based on immutable `Config` instances, for thread safety\n   and easy reasoning about config transformations\n - extensive test coverage\n\nThis library limits itself to config files. If you want to load\nconfig from a database or something, you would need to write some\ncustom code. The library has nice support for merging\nconfigurations so if you build one from a custom source it's easy\nto merge it in.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Essential Information](#essential-information)\n  - [License](#license)\n  - [Binary Releases](#binary-releases)\n  - [Release Notes](#release-notes)\n  - [API docs](#api-docs)\n  - [Bugs and Patches](#bugs-and-patches)\n  - [Build](#build)\n- [Using the Library](#using-the-library)\n  - [API Example](#api-example)\n  - [Longer Examples](#longer-examples)\n  - [Immutability](#immutability)\n  - [Schemas and Validation](#schemas-and-validation)\n  - [Standard behavior](#standard-behavior)\n    - [Note about resolving substitutions in `reference.conf` and `application.conf`](#note-about-resolving-substitutions-in-referenceconf-and-applicationconf)\n  - [Merging config trees](#merging-config-trees)\n  - [How to handle defaults](#how-to-handle-defaults)\n  - [Understanding `Config` and `ConfigObject`](#understanding-config-and-configobject)\n  - [ConfigBeanFactory](#configbeanfactory)\n- [Using HOCON, the JSON Superset](#using-hocon-the-json-superset)\n  - [Features of HOCON](#features-of-hocon)\n  - [Examples of HOCON](#examples-of-hocon)\n  - [Uses of Substitutions](#uses-of-substitutions)\n    - [Factor out common values](#factor-out-common-values)\n    - [Inheritance](#inheritance)\n    - [Optional system or env variable overrides](#optional-system-or-env-variable-overrides)\n  - [Concatenation](#concatenation)\n- [Miscellaneous Notes](#miscellaneous-notes)\n  - [Debugging Your Configuration](#debugging-your-configuration)\n  - [Supports Java 8 and Later](#supports-java-8-and-later)\n  - [Rationale for Supported File Formats](#rationale-for-supported-file-formats)\n  - [Other APIs (Wrappers, Ports and Utilities)](#other-apis-wrappers-ports-and-utilities)\n    - [Guice integration](#guice-integration)\n    - [Java (yep!) wrappers for the Java library](#java-yep-wrappers-for-the-java-library)\n    - [Scala wrappers for the Java library](#scala-wrappers-for-the-java-library)\n    - [Clojure wrappers for the Java library](#clojure-wrappers-for-the-java-library)\n    - [Kotlin wrappers for the Java library](#kotlin-wrappers-for-the-java-library)\n    - [Scala port](#scala-port)\n    - [Ruby port](#ruby-port)\n    - [Puppet module](#puppet-module)\n    - [Python port](#python-port)\n    - [C++ port](#c-port)\n    - [JavaScript port](#javascript-port)\n    - [C# port](#c-port-1)\n    - [Go port](#go-port)\n    - [Linting tool](#linting-tool)\n    - [Online playground](#online-playground)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Essential Information\n\n### Binary Releases\n\nTypesafe Config is compatible with Java 8 and above.\n\nYou can find published releases on Maven Central.\n\n    <dependency>\n        <groupId>com.typesafe</groupId>\n        <artifactId>config</artifactId>\n        <version>1.4.3</version>\n    </dependency>\n\nsbt dependency:\n\n    libraryDependencies += \"com.typesafe\" % \"config\" % \"1.4.3\"\n\nLink for direct download if you don't use a dependency manager:\n\n - https://repo1.maven.org/maven2/com/typesafe/config/\n\n### Release Notes\n\nPlease see NEWS.md in this directory,\nhttps://github.com/lightbend/config/blob/main/NEWS.md\n\n### API docs\n\n - Online: https://lightbend.github.io/config/latest/api/\n - also published in jar form\n - consider reading this README first for an intro\n - for questions about the `.conf` file format, read\n   [HOCON.md](https://github.com/lightbend/config/blob/main/HOCON.md)\n   in this directory\n\n### Bugs and Patches\n\n**NOTE: Please read [Readme #Maintained-by](https://github.com/lightbend/config#Maintained-by) before spending time suggesting changes to this library.**\n\nReport bugs to the GitHub issue tracker. Send patches as pull\nrequests on GitHub.\n\nBefore we can accept pull requests, you will need to agree to the\nTypesafe Contributor License Agreement online, using your GitHub\naccount - it takes 30 seconds.  You can do this at\nhttps://www.lightbend.com/contribute/cla\n\nPlease see\n[CONTRIBUTING](https://github.com/lightbend/config/blob/main/CONTRIBUTING.md)\nfor more including how to make a release.\n\n### Build\n\nThe build uses sbt and the tests are written in Scala; however,\nthe library itself is plain Java and the published jar has no\nScala dependency.\n\n## Using the Library\n\n### API Example\n    import com.typesafe.config.ConfigFactory\n\n    Config conf = ConfigFactory.load();\n    int bar1 = conf.getInt(\"foo.bar\");\n    Config foo = conf.getConfig(\"foo\");\n    int bar2 = foo.getInt(\"bar\");\n\n### Longer Examples\n\nSee the examples in the `examples/` [directory](https://github.com/lightbend/config/tree/main/examples).\n\nYou can run these from the sbt console with the commands `project\nconfig-simple-app-java` and then `run`.\n\nIn brief, as shown in the examples:\n\n - libraries should use a `Config` instance provided by the app,\n   if any, and use `ConfigFactory.load()` if no special `Config`\n   is provided. Libraries should put their defaults in a\n   `reference.conf` on the classpath.\n - apps can create a `Config` however they want\n   (`ConfigFactory.load()` is easiest and least-surprising), then\n   provide it to their libraries. A `Config` can be created with\n   the parser methods in `ConfigFactory` or built up from any file\n   format or data source you like with the methods in\n   `ConfigValueFactory`.\n\n### Immutability\n\nObjects are immutable, so methods on `Config` which transform the\nconfiguration return a new `Config`. Other types such as\n`ConfigParseOptions`, `ConfigResolveOptions`, `ConfigObject`,\netc. are also immutable. See the\n[API docs](https://lightbend.github.io/config/latest/api/) for\ndetails of course.\n\n### Schemas and Validation\n\nThere isn't a schema language or anything like that. However, two\nsuggested tools are:\n\n - use the\n   [checkValid() method](https://lightbend.github.io/config/latest/api/com/typesafe/config/Config.html#checkValid-com.typesafe.config.Config-java.lang.String...-)\n - access your config through a Settings class with a field for\n   each setting, and instantiate it on startup (immediately\n   throwing an exception if any settings are missing)\n\nIn Scala, a Settings class might look like:\n\n    class Settings(config: Config) {\n\n        // validate vs. reference.conf\n        config.checkValid(ConfigFactory.defaultReference(), \"simple-lib\")\n\n        // non-lazy fields, we want all exceptions at construct time\n        val foo = config.getString(\"simple-lib.foo\")\n        val bar = config.getInt(\"simple-lib.bar\")\n    }\n\nSee the examples/ directory for a full compilable program using\nthis pattern.\n\n### Standard behavior\n\nThe convenience method `ConfigFactory.load()` loads the following\n(first-listed are higher priority):\n\n  - system properties\n  - `application.conf` (all resources on classpath with this name)\n  - `application.json` (all resources on classpath with this name)\n  - `application.properties` (all resources on classpath with this\n    name)\n  - `reference.conf` (all resources on classpath with this name)\n\nThe idea is that libraries and frameworks should ship with a\n`reference.conf` in their jar. Applications should provide an\n`application.conf`, or if they want to create multiple\nconfigurations in a single JVM, they could use\n`ConfigFactory.load(\"myapp\")` to load their own `myapp.conf`.\n\nLibraries and frameworks should default to `ConfigFactory.load()`\nif the application does not provide a custom `Config` object. This\nway, libraries will see configuration from `application.conf` and\nusers can configure the whole app, with its libraries, in a single\n`application.conf` file.\n\nLibraries and frameworks should also allow the application to\nprovide a custom `Config` object to be used instead of the\ndefault, in case the application needs multiple configurations in\none JVM or wants to load extra config files from somewhere.  The\nlibrary examples in `examples/` show how to accept a custom config\nwhile defaulting to `ConfigFactory.load()`.\n\nFor applications using `application.{conf,json,properties}`,\nsystem properties can be used to force a different config source\n(e.g. from command line `-Dconfig.file=path/to/config-file`):\n\n - `config.resource` specifies a resource name - not a\n   basename, i.e. `application.conf` not `application`\n - `config.file` specifies a filesystem path, again\n   it should include the extension, not be a basename\n - `config.url` specifies a URL\n\n **Note**: you need to pass `-Dconfig.file=path/to/config-file` before the jar itself, e.g. `java -Dconfig.file=path/to/config-file.conf -jar path/to/jar-file.jar`. Same applies for `-Dconfig.resource=config-file.conf`\n\nThese system properties specify a _replacement_ for\n`application.{conf,json,properties}`, not an addition. They only\naffect apps using the default `ConfigFactory.load()`\nconfiguration. In the replacement config file, you can use\n`include \"application\"` to include the original default config\nfile; after the include statement you could go on to override\ncertain settings.\n\nIf you set `config.resource`, `config.file`, or `config.url`\non-the-fly from inside your program (for example with\n`System.setProperty()`), be aware that `ConfigFactory` has some\ninternal caches and may not see new values for system\nproperties. Use `ConfigFactory.invalidateCaches()` to force-reload\nsystem properties.\n\n#### Note about resolving substitutions in `reference.conf` and `application.conf`\n\nThe substitution syntax `${foo.bar}` will be resolved\ntwice. First, all the `reference.conf` files are merged and then\nthe result gets resolved. Second, all the `application.conf` are\nlayered over the unresolved `reference.conf` and the result of that\ngets resolved again.\n\nThe implication of this is that the `reference.conf` stack has to\nbe self-contained; you can't leave an undefined value `${foo.bar}`\nto be provided by `application.conf`. It is however possible to\noverride a variable that `reference.conf` refers to, as long as\n`reference.conf` also defines that variable itself.\n\n### Merging config trees\n\nAny two Config objects can be merged with an associative operation\ncalled `withFallback`, like `merged = firstConfig.withFallback(secondConfig)`.\n\nThe `withFallback` operation is used inside the library to merge\nduplicate keys in the same file and to merge multiple files.\n`ConfigFactory.load()` uses it to stack system properties over\n`application.conf` over `reference.conf`.\n\nYou can also use `withFallback` to merge in some hardcoded values,\nor to \"lift\" a subtree up to the root of the configuration; say\nyou have something like:\n\n    foo=42\n    dev.foo=57\n    prod.foo=10\n\nThen you could code something like:\n\n    Config devConfig = originalConfig\n                         .getConfig(\"dev\")\n                         .withFallback(originalConfig)\n\nThere are lots of ways to use `withFallback`.\n\n### How to handle defaults\n\nMany other configuration APIs allow you to provide a default to\nthe getter methods, like this:\n\n    boolean getBoolean(String path, boolean fallback)\n\nHere, if the path has no setting, the fallback would be\nreturned. An API could also return `null` for unset values, so you\nwould check for `null`:\n\n    // returns null on unset, check for null and fall back\n    Boolean getBoolean(String path)\n\nThe methods on the `Config` interface do NOT do this, for two\nmajor reasons:\n\n 1. If you use a config setting in two places, the default\n fallback value gets cut-and-pasted and typically out of\n sync. This can result in Very Evil Bugs.\n 2. If the getter returns `null` (or `None`, in Scala) then every\n time you get a setting you have to write handling code for\n `null`/`None` and that code will almost always just throw an\n exception. Perhaps more commonly, people forget to check for\n `null` at all, so missing settings result in\n `NullPointerException`.\n\nFor most situations, failure to have a setting is simply a bug to fix\n(in either code or the deployment environment). Therefore, if a\nsetting is unset, by default the getters on the `Config` interface\nthrow an exception.\n\nIf you want to allow a setting to be missing from\n`application.conf` in a particular case, then here are some\noptions:\n\n 1. Set it in a `reference.conf` included in your library or\n application jar, so there's a default value.\n 2. Use the `Config.hasPath()` method to check in advance whether\n the path exists (rather than checking for `null`/`None` after as\n you might in other APIs).\n 3. Catch and handle `ConfigException.Missing`. NOTE: using an\n exception for control flow like this is much slower than using\n `Config.hasPath()`; the JVM has to do a lot of work to throw\n an exception.\n 4. In your initialization code, generate a `Config` with your\n defaults in it (using something like `ConfigFactory.parseMap()`)\n then fold that default config into your loaded config using\n `withFallback()`, and use the combined config in your\n program. \"Inlining\" your reference config in the code like this\n is probably less convenient than using a `reference.conf` file,\n but there may be reasons to do it.\n 5. Use `Config.root()` to get the `ConfigObject` for the\n `Config`; `ConfigObject` implements `java.util.Map<String,?>` and\n the `get()` method on `Map` returns null for missing keys. See\n the API docs for more detail on `Config` vs. `ConfigObject`.\n 6. Set the setting to `null` in `reference.conf`, then use\n `Config.getIsNull` and `Config.hasPathOrNull` to handle `null`\n in a special way while still throwing an exception if the setting\n is entirely absent.\n\nThe *recommended* path (for most cases, in most apps) is that you\nrequire all settings to be present in either `reference.conf` or\n`application.conf` and allow `ConfigException.Missing` to be\nthrown if they are not. That's the design intent of the `Config`\nAPI design.\n\nConsider the \"Settings class\" pattern with `checkValid()` to\nverify that you have all settings when you initialize the\napp. See the [Schemas and Validation](#schemas-and-validation)\nsection of this README for more details on this pattern.\n\n**If you do need a setting to be optional**: checking `hasPath()` in\nadvance should be the same amount of code (in Java) as checking\nfor `null` afterward, without the risk of `NullPointerException`\nwhen you forget. In Scala, you could write an enrichment class\nlike this to use the idiomatic `Option` syntax:\n\n```scala\nimplicit class RichConfig(val underlying: Config) extends AnyVal {\n  def getOptionalBoolean(path: String): Option[Boolean] = if (underlying.hasPath(path)) {\n     Some(underlying.getBoolean(path))\n  } else {\n     None\n  }\n}\n```\n\nSince this library is a Java library it doesn't come with that out\nof the box, of course.\n\nIt is understood that sometimes defaults in code make sense. For\nexample, if your configuration lets users invent new sections, you\nmay not have all paths up front and may be unable to set up\ndefaults in `reference.conf` for dynamic paths. The design intent\nof `Config` isn't to *prohibit* inline defaults, but simply to\nrecognize that it seems to be the 10% case (rather than the 90%\ncase). Even in cases where dynamic defaults are needed, you may\nfind that using `withFallback()` to build a complete\nnothing-missing `Config` in one central place in your code keeps\nthings tidy.\n\nWhatever you do, please remember not to cut-and-paste default\nvalues into multiple places in your code. You have been warned!\n:-)\n\n### Understanding `Config` and `ConfigObject`\n\nTo read and modify configuration, you'll use the\n[Config](https://lightbend.github.io/config/latest/api/com/typesafe/config/Config.html)\ninterface. A `Config` looks at a JSON-equivalent data structure as\na one-level map from paths to values. So if your JSON looks like\nthis:\n\n```\n  \"foo\" : {\n    \"bar\" : 42\n    \"baz\" : 43\n  }\n```\n\nUsing the `Config` interface, you could write\n`conf.getInt(\"foo.bar\")`. The `foo.bar` string is called a _path\nexpression_\n([HOCON.md](https://github.com/lightbend/config/blob/main/HOCON.md)\nhas the syntax details for these expressions). Iterating over this\n`Config`, you would get two entries; `\"foo.bar\" : 42` and\n`\"foo.baz\" : 43`. When iterating a `Config` you will not find\nnested `Config` (because everything gets flattened into one\nlevel).\n\nWhen looking at a JSON tree as a `Config`, `null` values are\ntreated as if they were missing. Iterating over a `Config` will\nskip `null` values.\n\nYou can also look at a `Config` in the way most JSON APIs would,\nthrough the\n[ConfigObject](https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigObject.html)\ninterface. This interface represents an object node in the JSON\ntree. `ConfigObject` instances come in multi-level trees, and the\nkeys do not have any syntax (they are just strings, not path\nexpressions). Iterating over the above example as a\n`ConfigObject`, you would get one entry `\"foo\" : { \"bar\" : 42,\n\"baz\" : 43 }`, where the value at `\"foo\"` is another nested\n`ConfigObject`.\n\nIn `ConfigObject`, `null` values are visible (distinct from\nmissing values), just as they are in JSON.\n\n`ConfigObject` is a subtype of [ConfigValue](https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigValue.html), where the other\nsubtypes are the other JSON types (list, string, number, boolean, null).\n\n`Config` and `ConfigObject` are two ways to look at the same\ninternal data structure, and you can convert between them for free\nusing\n[Config.root()](https://lightbend.github.io/config/latest/api/com/typesafe/config/Config.html#root--)\nand\n[ConfigObject.toConfig()](https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigObject.html#toConfig--).\n\n### ConfigBeanFactory\n\nAs of version 1.3.0, if you have a Java object that follows\nJavaBean conventions (zero-args constructor, getters and setters),\nyou can automatically initialize it from a `Config`.\n\nUse\n`ConfigBeanFactory.create(config.getConfig(\"subtree-that-matches-bean\"),\nMyBean.class)` to do this.\n\nCreating a bean from a `Config` automatically validates that the\nconfig matches the bean's implied schema. Bean fields can be\nprimitive types, typed lists such as `List<Integer>`,\n`java.time.Duration`, `ConfigMemorySize`, or even a raw `Config`,\n`ConfigObject`, or `ConfigValue` (if you'd like to deal with a\nparticular value manually).\n\n## Using HOCON, the JSON Superset\n\nThe JSON superset is called \"Human-Optimized Config Object\nNotation\" or HOCON, and files use the suffix `.conf`.  See\n[HOCON.md](https://github.com/lightbend/config/blob/main/HOCON.md)\nin this directory for more detail.\n\nAfter processing a `.conf` file, the result is always just a JSON\ntree that you could have written (less conveniently) in JSON.\n\n### Features of HOCON\n\n  - Comments, with `#` or `//`\n  - Allow omitting the `{}` around a root object\n  - Allow `=` as a synonym for `:`\n  - Allow omitting the `=` or `:` before a `{` so\n    `foo { a : 42 }`\n  - Allow omitting commas as long as there's a newline\n  - Allow trailing commas after last element in objects and arrays\n  - Allow unquoted strings for keys and values\n  - Unquoted keys can use dot-notation for nested objects,\n    `foo.bar=42` means `foo { bar : 42 }`\n  - Duplicate keys are allowed; later values override earlier,\n    except for object-valued keys where the two objects are merged\n    recursively\n  - `include` feature merges root object in another file into\n    current object, so `foo { include \"bar.json\" }` merges keys in\n    `bar.json` into the object `foo`\n  - include with no file extension includes any of `.conf`,\n    `.json`, `.properties`\n  - you can include files, URLs, or classpath resources; use\n    `include url(\"http://example.com\")` or `file()` or\n    `classpath()` syntax to force the type, or use just `include\n    \"whatever\"` to have the library do what you probably mean\n    (Note: `url()`/`file()`/`classpath()` syntax is not supported\n    in Play/Akka 2.0, only in later releases.)\n  - substitutions `foo : ${a.b}` sets key `foo` to the same value\n    as the `b` field in the `a` object\n  - substitutions concatenate into unquoted strings, `foo : the\n    quick ${colors.fox} jumped`\n  - substitutions fall back to environment variables if they don't\n    resolve in the config itself, so `${HOME}` would work as you\n    expect. Also, most configs have system properties merged in so\n    you could use `${user.home}`.\n  - substitutions normally cause an error if unresolved, but\n    there is a syntax `${?a.b}` to permit them to be missing.\n  - `+=` syntax to append elements to arrays, `path += \"/bin\"`\n  - multi-line strings with triple quotes as in Python or Scala\n\n### Examples of HOCON\n\nAll of these are valid HOCON.\n\nStart with valid JSON:\n\n    {\n        \"foo\" : {\n            \"bar\" : 10,\n            \"baz\" : 12\n        }\n    }\n\nDrop root braces:\n\n    \"foo\" : {\n        \"bar\" : 10,\n        \"baz\" : 12\n    }\n\nDrop quotes:\n\n    foo : {\n        bar : 10,\n        baz : 12\n    }\n\nUse `=` and omit it before `{`:\n\n    foo {\n        bar = 10,\n        baz = 12\n    }\n\nRemove commas:\n\n    foo {\n        bar = 10\n        baz = 12\n    }\n\nUse dotted notation for unquoted keys:\n\n    foo.bar=10\n    foo.baz=12\n\nPut the dotted-notation fields on a single line:\n\n    foo.bar=10, foo.baz=12\n\nThe syntax is well-defined (including handling of whitespace and\nescaping). But it handles many reasonable ways you might want to\nformat the file.\n\nNote that while you can write HOCON that looks a lot like a Java\nproperties file (and many properties files will parse as HOCON),\nthe details of escaping, whitespace handling, comments, and so\nforth are more like JSON. The spec (see HOCON.md in this\ndirectory) has some more detailed notes on this topic.\n\n### Uses of Substitutions\n\nThe `${foo.bar}` substitution feature lets you avoid cut-and-paste\nin some nice ways.\n\n#### Factor out common values\n\nThis is the obvious use,\n\n    standard-timeout = 10ms\n    foo.timeout = ${standard-timeout}\n    bar.timeout = ${standard-timeout}\n\n#### Inheritance\n\nIf you duplicate a field with an object value, then the objects\nare merged with last-one-wins. So:\n\n    foo = { a : 42, c : 5 }\n    foo = { b : 43, c : 6 }\n\nmeans the same as:\n\n    foo = { a : 42, b : 43, c : 6 }\n\nYou can take advantage of this for \"inheritance\":\n\n    data-center-generic = { cluster-size = 6 }\n    data-center-east = ${data-center-generic}\n    data-center-east = { name = \"east\" }\n    data-center-west = ${data-center-generic}\n    data-center-west = { name = \"west\", cluster-size = 8 }\n\nUsing `include` statements you could split this across multiple\nfiles, too.\n\nIf you put two objects next to each other (close brace of the first\non the same line with open brace of the second), they are merged, so\na shorter way to write the above \"inheritance\" example would be:\n\n    data-center-generic = { cluster-size = 6 }\n    data-center-east = ${data-center-generic} { name = \"east\" }\n    data-center-west = ${data-center-generic} { name = \"west\", cluster-size = 8 }\n\n#### Optional system or env variable overrides\n\nIn default uses of the library, exact-match system properties\nalready override the corresponding config properties.  However,\nyou can add your own overrides, or allow environment variables to\noverride, using the `${?foo}` substitution syntax.\n\n    basedir = \"/whatever/whatever\"\n    basedir = ${?FORCED_BASEDIR}\n\nHere, the override field `basedir = ${?FORCED_BASEDIR}` simply\nvanishes if there's no value for `FORCED_BASEDIR`, but if you set\nan environment variable `FORCED_BASEDIR` for example, it would be\nused.\n\nA natural extension of this idea is to support several different\nenvironment variable names or system property names, if you aren't\nsure which one will exist in the target environment.\n\nObject fields and array elements with a `${?foo}` substitution\nvalue just disappear if the substitution is not found:\n\n    // this array could have one or two elements\n    path = [ \"a\", ${?OPTIONAL_A} ]\n\nBy setting the JVM property `-Dconfig.override_with_env_vars=true`\nit is possible to override any configuration value using environment\nvariables even if an explicit substitution is not specified.\n\nThe environment variable value will override any pre-existing value\nand also any value provided as Java property.\n\nWith this option enabled only environment variables starting with\n`CONFIG_FORCE_` are considered, and the name is mangled as follows:\n\n  - the prefix `CONFIG_FORCE_` is stripped\n  - single underscore(`_`) is converted into a dot(`.`)\n  - double underscore(`__`) is converted into a dash(`-`)\n  - triple underscore(`___`) is converted into a single underscore(`_`)\n\ni.e. The environment variable `CONFIG_FORCE_a_b__c___d` set the\nconfiguration key `a.b-c_d`\n\n### Set array values outside configuration files\n\nSetting the value of array items from java properties or environment\nvariables require specifying the index in the array for the value.\nSo, while in HOCON you can set multiple values into an array or\nappend to an array:\n\n    ## HOCON\n    items = [\"a\", \"b\"]\n    items += \"c\"\n\nUsing java properties you specify the exact position:\n\n    -Ditems.0=\"a\" -Ditems.1=\"b\"\n\nas well as with environment variables:\n\n    export CONFIG_FORCE_items_0=a\n    export CONFIG_FORCE_items_1=b\n\n### Concatenation\n\nValues _on the same line_ are concatenated (for strings and\narrays) or merged (for objects).\n\nThis is why unquoted strings work, here the number `42` and the\nstring `foo` are concatenated into a string `42 foo`:\n\n    key : 42 foo\n\nWhen concatenating values into a string, leading and trailing\nwhitespace is stripped but whitespace between values is kept.\n\nQuoted or unquoted strings can also concatenate with substitutions of course:\n\n    tasks-url : ${base-url}/tasks\n    tasks-url : ${base-url}\"tasks:colon-must-be-quoted\"\n\nNote: the `${}` syntax must be outside the quotes!\n\nA concatenation can refer to earlier values of the same field:\n\n    path : \"/bin\"\n    path : ${path}\":/usr/bin\"\n\nArrays can be concatenated as well:\n\n    path : [ \"/bin\" ]\n    path : ${path} [ \"/usr/bin\" ]\n\nThere is a shorthand for appending to arrays:\n\n    // equivalent to: path = ${?path} [ \"/usr/bin\" ]\n    path += \"/usr/bin\"\n\nTo prepend or insert into an array, there is no shorthand.\n\nWhen objects are \"concatenated,\" they are merged, so object\nconcatenation is just a shorthand for defining the same object\ntwice. The long way (mentioned earlier) is:\n\n    data-center-generic = { cluster-size = 6 }\n    data-center-east = ${data-center-generic}\n    data-center-east = { name = \"east\" }\n\nThe concatenation-style shortcut is:\n\n    data-center-generic = { cluster-size = 6 }\n    data-center-east = ${data-center-generic} { name = \"east\" }\n\nWhen concatenating objects and arrays, newlines are allowed\n_inside_ each object or array, but not between them.\n\nNon-newline whitespace is never a field or element separator. So\n`[ 1 2 3 4 ]` is an array with one unquoted string element\n`\"1 2 3 4\"`. To get an array of four numbers you need either commas or\nnewlines separating the numbers.\n\nSee the spec for full details on concatenation.\n\nNote: Play/Akka 2.0 have an earlier version that supports string\nconcatenation, but not object/array concatenation. `+=` does not\nwork in Play/Akka 2.0 either. Post-2.0 versions support these\nfeatures.\n\n## Miscellaneous Notes\n\n### Debugging Your Configuration\n\nIf you have trouble with your configuration, some useful tips.\n\n - Set the Java system property `-Dconfig.trace=loads` to get\n   output on stderr describing each file that is loaded.\n   Note: this feature is not included in the older version in\n   Play/Akka 2.0.\n - Use `myConfig.root().render()` to get a `Config` as a\n   string with comments showing where each value came from.\n   This string can be printed out on console or logged to \n   a file etc.\n - If you see errors like\n   `com.typesafe.config.ConfigException$Missing: No configuration setting found for key foo`,\n   and you're sure that key is defined in your config file, they might appear e.g.\n   when you're loading configuration from a thread that's not the JVM's main thread.\n   Try passing the `ClassLoader` in manually - e.g. with `ConfigFactory.load(getClass().getClassLoader())`\n   or setting the context class loader.\n   If you don't pass one, Lightbend Config uses the calling thread's `contextClassLoader`, and in some cases,\n   it may not have your configuration files in its classpath,\n   so loading the config on that thread can yield unexpected, erroneous results.\n\n### Supports Java 8 and Later\n\nCurrently the library is maintained against Java 8, but\nversion 1.2.1 and earlier will work with Java 6.\n\nPlease use 1.2.1 if you need Java 6 support, though some people\nhave expressed interest in a branch off of 1.3.x supporting\nJava 7. If you want to work on that branch you might bring it up\non [chat](https://gitter.im/lightbend/config). We can release a\njar for Java 7 if someone(s) steps up to maintain the branch. The\nmain branch does not use Java 8 \"gratuitously\" but some APIs\nthat use Java 8 types will need to be removed.\n\n### Rationale for Supported File Formats\n\n(For the curious.)\n\nThe three file formats each have advantages.\n\n - Java `.properties`:\n   - Java standard, built in to JVM\n   - Supported by many tools such as IDEs\n - JSON:\n   - easy to generate programmatically\n   - well-defined and standard\n   - bad for human maintenance, with no way to write comments,\n     and no mechanisms to avoid duplication of similar config\n     sections\n - HOCON/`.conf`:\n   - nice for humans to read, type, and maintain, with more\n     lenient syntax\n   - built-in tools to avoid cut-and-paste\n   - ways to refer to the system environment, such as system\n     properties and environment variables\n\nThe idea would be to use JSON if you're writing a script to spit\nout config, and use HOCON if you're maintaining config by hand.\nIf you're doing both, then mix the two.\n\nTwo alternatives to HOCON syntax could be:\n\n  - YAML is also a JSON superset and has a mechanism for adding\n    custom types, so the include statements in HOCON could become\n    a custom type tag like `!include`, and substitutions in HOCON\n    could become a custom tag such as `!subst`, for example. The\n    result is somewhat clunky to write, but would have the same\n    in-memory representation as the HOCON approach.\n  - Put a syntax inside JSON strings, so you might write something\n    like `\"$include\" : \"filename\"` or allow `\"foo\" : \"${bar}\"`.\n    This is a way to tunnel new syntax through a JSON parser, but\n    other than the implementation benefit (using a standard JSON\n    parser), it doesn't really work. It's a bad syntax for human\n    maintenance, and it's not valid JSON anymore because properly\n    interpreting it requires treating some valid JSON strings as\n    something other than plain strings. A better approach is to\n    allow mixing true JSON files into the config but also support\n    a nicer format.\n\n### Other APIs (Wrappers, Ports and Utilities)\n\nThis may not be comprehensive - if you'd like to add mention of\nyour wrapper, just send a pull request for this README. We would\nlove to know what you're doing with this library or with the HOCON\nformat.\n\n#### Guice integration\n  * Typesafe Config Guice https://github.com/racc/typesafeconfig-guice\n\n#### Java (yep!) wrappers for the Java library\n\n  * tscfg https://github.com/carueda/tscfg\n\n#### Scala wrappers for the Java library\n\n  * Ficus https://github.com/iheartradio/ficus\n  * configz https://github.com/arosien/configz\n  * configs https://github.com/kxbmap/configs\n  * config-annotation https://github.com/zhongl/config-annotation\n  * PureConfig https://github.com/pureconfig/pureconfig\n  * Simple Scala Config https://github.com/ElderResearch/ssc\n  * konfig https://github.com/vpon/konfig\n  * ScalaConfig https://github.com/andr83/scalaconfig\n  * static-config https://github.com/Krever/static-config\n  * validated-config https://github.com/carlpulley/validated-config\n  * Cedi Config https://github.com/ccadllc/cedi-config\n  * Cfg https://github.com/carueda/cfg\n  * circe-config https://github.com/circe/circe-config\n  * args4c https://github.com/aaronp/args4c\n\n#### Clojure wrappers for the Java library\n\n  * beamly-core.config https://github.com/beamly/beamly-core.config\n\n#### Kotlin wrappers for the Java library\n\n  * config4k https://github.com/config4k/config4k\n  * hoplite https://github.com/sksamuel/hoplite\n\n#### Scala port\n\n  * SHocon https://github.com/akka-js/shocon (Supports Scala.js and Scala Native)\n  * sconfig https://github.com/ekrich/sconfig (Supports JVM, Scala Native, and Scala.js)\n\n#### Ruby port\n\n   * https://github.com/puppetlabs/ruby-hocon\n\n#### Puppet module\n\n   * Manage your HOCON configuration files with Puppet!: https://forge.puppetlabs.com/puppetlabs/hocon\n\n#### Python port\n\n   * pyhocon https://github.com/chimpler/pyhocon\n\n#### C++ port\n\n   * https://github.com/puppetlabs/cpp-hocon\n\n#### JavaScript port\n\n  * https://github.com/yellowblood/hocon-js (missing features, under development)\n\n#### C# port\n\n  * https://github.com/akkadotnet/HOCON\n\n#### Rust port\n\n  * https://github.com/mockersf/hocon.rs\n\n#### Go port\n\n  * https://github.com/gurkankaymak/hocon\n \n#### Erlang port\n  * https://github.com/emqx/hocon\n\n#### Linting tool\n\n   * A web based linting tool http://www.hoconlint.com/\n\n#### Online playground\n\n   * https://hocon-playground.avelier.dev/\n\n# Maintenance notes\n\n## License\n\nThe license is Apache 2.0, see LICENSE-2.0.txt.\n\n## Maintained by \n\nThe \"Typesafe Config\" library is an important foundation to how Akka and other JVM libraries manage configuration. We at [Lightbend](https://lightbend.com) consider the functionality of this library as feature complete. We will make sure \"Typesafe Config\" keeps up with future JVM versions, but will rarely make any other changes.\n\nWe are thankful for all the work [@havocp](https://github.com/havocp) has put into creating the library initially and supporting its users over many more years, even after leaving Lightbend.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.474609375,
          "content": "# Making a release\n\nTo make a release you'll need to be a maintainer with GitHub\npermissions to push to the main and gh-pages branches, and\nSonatype permissions to publish.\n\nHere are the steps, which should be automated but aren't (PR\nwelcome!):\n\n  1. write release notes in NEWS.md following the format\n     already in there. update README with the new version.\n     Commit.\n  2. create a signed git tag \"vX.Y.Z\"\n  3. start sbt; `show version` should confirm that the version was\n     taken from the tag\n  4. clean\n  5. test (double check that release works)\n  6. doc (double check that docs build, plus build docs\n     to be copied to gh-pages later)\n  7. if test or doc fails, delete the tag, fix it, start over.\n  8. publishSigned\n  9. make a separate clone of the repo in another directory and\n      check out the gh-pages branch\n  10. /bin/rm -rf latest/api on gh-pages checkout\n  11. copy config/target/api from main checkout to vX.Y.Z in\n      gh-pages so you have vX.Y.Z/index.html\n  12. copy config/target/api from main checkout into latest/\n      so you have latest/api/index.html\n  13. commit all that to gh-pages, check the diff for sanity\n      (latest/api should be mostly just changed timestamps)\n  14. push gh-pages\n  15. log into sonatype website and go through the usual hoops\n      (under Staging Repositories, search for com.typesafe, verify the\n      artifacts in it, close, release)\n  16. push the \"vX.Y.Z\" tag\n  17. announce release, possibly wait for maven central to sync\n      first\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3203125,
          "content": "version: '{build}'\nos: Windows Server 2012\ninstall:\n  - cmd: choco install sbt -ia \"INSTALLDIR=\"\"C:\\sbt\"\"\"\n  - cmd: SET PATH=C:\\sbt\\bin;%JAVA_HOME%\\bin;%PATH%\n  - cmd: SET SBT_OPTS=-XX:MaxPermSize=2g -Xmx4g\nbuild_script:\n  - sbt clean compile\ntest_script:\n  - sbt test\n  - sbt doc\ncache:\n  - C:\\sbt\\\n  - C:\\Users\\appveyor\\.ivy2\n"
        },
        {
          "name": "build.sbt",
          "type": "blob",
          "size": 8.54296875,
          "content": "// to release, bump major/minor/micro as appropriate,\n// update NEWS, update version in README.md, tag, then\n// publishSigned.\n// Release tags should follow: http://semver.org/\nimport scalariform.formatter.preferences._\n\nThisBuild / git.baseVersion         := \"1.4.0\"\nThisBuild / organization            := \"com.typesafe\"\nThisBuild / Compile / scalacOptions := List(\"-unchecked\", \"-deprecation\", \"-feature\")\nThisBuild / Test / scalacOptions    := List(\"-unchecked\", \"-deprecation\", \"-feature\")\nThisBuild / scalaVersion            := \"2.12.8\"\n\nThisBuild / scmInfo                 := Option(\n  ScmInfo(url(\"https://github.com/lightbend/config\"), \"scm:git@github.com:lightbend/config.git\")\n)\nThisBuild / developers              := List(\n  Developer(\n    id    = \"havocp\",\n    name  = \"Havoc Pennington\",\n    email = \"@havocp\",\n    url   = url(\"http://ometer.com/\")\n  )\n)\nThisBuild / description             := \"configuration library for JVM languages using HOCON files\"\nThisBuild / licenses                := List(\"Apache-2.0\" -> url(\"https://www.apache.org/licenses/LICENSE-2.0\"))\nThisBuild / homepage                := Option(url(\"https://github.com/lightbend/config\"))\nThisBuild / pomIncludeRepository    := { _ => false }\nThisBuild / publishTo               := {\n  val nexus = \"https://oss.sonatype.org/\"\n  if ((ThisBuild / isSnapshot).value) Option(\"Sonatype OSS Snapshots\" at nexus + \"content/repositories/snapshots\")\n  else Option(\"Sonatype OSS Staging\" at nexus + \"service/local/staging/deploy/maven2\")\n}\nThisBuild / publishMavenStyle       := true\n\nlazy val root = (project in file(\".\"))\n  .enablePlugins(GitVersioning)\n  .aggregate(\n    testLib, configLib,\n    simpleLibScala, simpleAppScala, complexAppScala,\n    simpleLibJava, simpleAppJava, complexAppJava\n  )\n  .settings(commonSettings)\n  .settings(nocomma {\n    name                                   := \"config-root\"\n    git.baseVersion                        := (ThisBuild / git.baseVersion).value\n    doc / aggregate                        := false\n    doc                                    := (configLib / Compile / doc).value\n    packageDoc / aggregate                 := false\n    packageDoc                             := (configLib / Compile / packageDoc).value\n    checkstyle / aggregate                 := false\n    checkstyle                             := (configLib / Compile / checkstyle).value\n    useGpg                                 := true\n    PgpKeys.publishSigned / aggregate      := false\n    PgpKeys.publishSigned                  := (PgpKeys.publishSigned in configLib).value\n    PgpKeys.publishLocalSigned / aggregate := false\n    PgpKeys.publishLocalSigned             := (PgpKeys.publishLocalSigned in configLib).value\n  })\n\nlazy val configLib =  Project(\"config\", file(\"config\"))\n  .enablePlugins(SbtOsgi)\n  .dependsOn(testLib % \"test->test\")\n  .settings(osgiSettings)\n  .settings(nocomma {\n    autoScalaLibrary                       := false\n    crossPaths                             := false\n    libraryDependencies                    += \"net.liftweb\" %% \"lift-json\" % \"3.3.0\" % Test\n    libraryDependencies                    += \"com.novocode\" % \"junit-interface\" % \"0.11\" % Test\n\n    Compile / compile / javacOptions       ++= Seq(\"-source\", \"1.8\", \"-target\", \"1.8\",\n                                                   \"-g\", \"-Xlint:unchecked\")\n\n    Compile / doc / javacOptions           ++= Seq(\"-group\", s\"Public API (version ${version.value})\", \"com.typesafe.config:com.typesafe.config.parser\",\n                                                   \"-group\", \"Internal Implementation - Not ABI Stable\", \"com.typesafe.config.impl\")\n    javadocSourceBaseUrl := {\n      for (gitHead <- com.typesafe.sbt.SbtGit.GitKeys.gitHeadCommit.value)\n        yield s\"https://github.com/lightbend/config/blob/$gitHead/config/src/main/java\"\n    }\n    // because we test some global state such as singleton caches,\n    // we have to run tests in serial.\n    Test / parallelExecution               := false\n\n    test / fork                            := true\n    Test / fork                            := true\n    run / fork                             := true\n    Test/ run / fork                       := true\n\n    //env vars for tests\n    Test / envVars                         ++= Map(\"testList.0\" -> \"0\",\n      \"testList.1\" -> \"1\",\n      \"CONFIG_FORCE_b\" -> \"5\",\n      \"CONFIG_FORCE_testList_0\" -> \"10\",\n      \"CONFIG_FORCE_testList_1\" -> \"11\",\n      \"CONFIG_FORCE_42___a\" -> \"1\",\n      \"CONFIG_FORCE_a_b_c\" -> \"2\",\n      \"CONFIG_FORCE_a__c\" -> \"3\",\n      \"CONFIG_FORCE_a___c\" -> \"4\",\n      \"CONFIG_FORCE_akka_version\" -> \"foo\",\n      \"CONFIG_FORCE_akka_event__handler__dispatcher_max__pool__size\" -> \"10\",\n      \"SECRET_A\" -> \"A\", // ConfigTest.renderShowEnvVariableValues\n      \"SECRET_B\" -> \"B\", // ConfigTest.renderShowEnvVariableValues\n      \"SECRET_C\" -> \"C\" // ConfigTest.renderShowEnvVariableValues\n    )\n\n    OsgiKeys.exportPackage                 := Seq(\"com.typesafe.config\", \"com.typesafe.config.impl\")\n    publish                                := sys.error(\"use publishSigned instead of plain publish\")\n    publishLocal                           := sys.error(\"use publishLocalSigned instead of plain publishLocal\")\n    Compile / packageBin / packageOptions  +=\n      Package.ManifestAttributes(\"Automatic-Module-Name\" -> \"typesafe.config\" )\n    scalariformPreferences                 := scalariformPreferences.value\n      .setPreference(IndentSpaces, 4)\n      .setPreference(FirstArgumentOnNewline, Preserve)\n\n    checkstyleConfigLocation               := CheckstyleConfigLocation.File((baseDirectory.value / \"checkstyle-config.xml\").toString)\n\n    Compile / checkstyle := {\n      val log = streams.value.log\n      (Compile / checkstyle).value\n      val resultFile = (Compile / checkstyleOutputFile).value\n      val results = scala.xml.XML.loadFile(resultFile)\n      val errorFiles = results \\\\ \"checkstyle\" \\\\ \"file\"\n\n      def errorFromXml(node: scala.xml.NodeSeq): (String, String, String) = {\n        val line: String = (node \\ \"@line\" text)\n        val msg: String = (node \\ \"@message\" text)\n        val source: String = (node \\ \"@source\" text)\n        (line, msg, source)\n      }\n      def errorsFromXml(fileNode: scala.xml.NodeSeq): Seq[(String, String, String, String)] = {\n        val name: String = (fileNode \\ \"@name\" text)\n        val errors = (fileNode \\\\ \"error\") map { e => errorFromXml(e) }\n        errors map { case (line, error, source) => (name, line, error, source) }\n      }\n\n      val errors = errorFiles flatMap { f => errorsFromXml(f) }\n\n      if (errors.nonEmpty) {\n        for (e <- errors) {\n          log.error(s\"${e._1}:${e._2}: ${e._3} (from ${e._4})\")\n        }\n        throw new RuntimeException(s\"Checkstyle failed with ${errors.size} errors\")\n      }\n      log.info(\"No errors from checkstyle\")\n    }\n\n    // add checkstyle as a dependency of doc\n    Compile / doc                          := ((Compile / doc).dependsOn(Compile / checkstyle)).value\n\n    findbugsReportType                     := Some(FindbugsReport.Html)\n    findbugsReportPath                     := Some(crossTarget.value / \"findbugs.html\")\n    findbugsEffort                         := FindbugsEffort.Maximum\n    findbugsMaxMemory                      := 2000\n  })\n\nlazy val commonSettings: Seq[Setting[_]] = Def.settings(\n  unpublished,\n  scalariformPreferences := scalariformPreferences.value\n    .setPreference(IndentSpaces, 4)\n    .setPreference(FirstArgumentOnNewline, Preserve),\n  Compile / compile / javacOptions ++= Seq(\"-source\", \"1.8\", \"-target\", \"1.8\"),\n)\n\ndef proj(id: String, base: File) = Project(id, base) settings commonSettings\n\nlazy val testLib = proj(\"config-test-lib\", file(\"test-lib\"))\n\nlazy val simpleLibScala  = proj(\"config-simple-lib-scala\",  file(\"examples/scala/simple-lib\"))  dependsOn configLib\nlazy val simpleAppScala  = proj(\"config-simple-app-scala\",  file(\"examples/scala/simple-app\"))  dependsOn simpleLibScala\nlazy val complexAppScala = proj(\"config-complex-app-scala\", file(\"examples/scala/complex-app\")) dependsOn simpleLibScala\n\nlazy val simpleLibJava  = proj(\"config-simple-lib-java\",  file(\"examples/java/simple-lib\"))  dependsOn configLib\nlazy val simpleAppJava  = proj(\"config-simple-app-java\",  file(\"examples/java/simple-app\"))  dependsOn simpleLibJava\nlazy val complexAppJava = proj(\"config-complex-app-java\", file(\"examples/java/complex-app\")) dependsOn simpleLibJava\n\nval unpublished = Seq(\n  // no artifacts in this project\n  publishArtifact               := false,\n  // make-pom has a more specific publishArtifact setting already\n  // so needs specific override\n  makePom / publishArtifact     := false,\n  // no docs to publish\n  packageDoc / publishArtifact  := false,\n  publish / skip := true\n)\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "project",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-lib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}