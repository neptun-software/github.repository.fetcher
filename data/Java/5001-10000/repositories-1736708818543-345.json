{
  "metadata": {
    "timestamp": 1736708818543,
    "page": 345,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjM0OA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactor/reactor-core",
      "stars": 5015,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.244140625,
          "content": "#jenv local configuration\n.java-version\n\n.gradletasknamecache\n.DS_Store\nbenchmarks.jar\nbin\nbuild\n.classpath\n.eclipse\n.gradle\n.project\n.settings\nout\n*.log\n*.iml\n*.iws\n*.ipr\n.idea/\n*.java.hsp\n*.index\n*.data\nclasses\nexportToHtml\n.pmd\n.ruleset\n.rulesets\n"
        },
        {
          "name": ".sdkmanrc",
          "type": "blob",
          "size": 0.11328125,
          "content": "# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=8.0.372-librca\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.408203125,
          "content": "# Reactor Core\n\n[![Join the chat at https://gitter.im/reactor/reactor](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/reactor/reactor?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Reactor Core](https://maven-badges.herokuapp.com/maven-central/io.projectreactor/reactor-core/badge.svg?style=plastic)](https://mvnrepository.com/artifact/io.projectreactor/reactor-core) [![Latest](https://img.shields.io/github/release/reactor/reactor-core/all.svg)]() \n\n[![CI on GHA](https://github.com/reactor/reactor-core/actions/workflows/publish.yml/badge.svg)](https://github.com/reactor/reactor-core/actions/workflows/publish.yml)\n[![Codecov](https://img.shields.io/codecov/c/github/reactor/reactor-core.svg)]()\n[![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/reactor/reactor-core.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/reactor/reactor-core/context:java)\n[![Total Alerts](https://img.shields.io/lgtm/alerts/g/reactor/reactor-core.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/reactor/reactor-core/alerts)\n\n\nNon-Blocking [Reactive Streams](https://www.reactive-streams.org/) Foundation for the JVM both implementing a [Reactive Extensions](https://reactivex.io) inspired API and efficient event streaming support.\n\nSince `3.3.x`, this repository also contains `reactor-tools`, a java agent aimed at helping with debugging of Reactor code.\n\n## Getting it\n   \n**Reactor 3 requires Java 8 or + to run**.\n\nWith Gradle from repo.spring.io or Maven Central repositories (stable releases only):\n\n```groovy\nrepositories {\n    mavenCentral()\n\n    // Uncomment to get access to Milestones\n    // maven { url \"https://repo.spring.io/milestone\" }\n\n    // Uncomment to get access to Snapshots\n    // maven { url \"https://repo.spring.io/snapshot\" }\n}\n\ndependencies {\n    compile \"io.projectreactor:reactor-core:3.7.1\"\n    testCompile \"io.projectreactor:reactor-test:3.7.1\"\n\n    // Alternatively, use the following for latest snapshot artifacts in this line\n    // compile \"io.projectreactor:reactor-core:3.7.2-SNAPSHOT\"\n    // testCompile \"io.projectreactor:reactor-test:3.7.2-SNAPSHOT\"\n\n    // Optionally, use `reactor-tools` to help debugging reactor code\n    // implementation \"io.projectreactor:reactor-tools:3.7.1\"\n}\n```\n\nSee the [reference documentation](https://projectreactor.io/docs/core/release/reference/docs/index.html#getting)\nfor more information on getting it (eg. using Maven, or on how to get milestones and snapshots).\n\n> **Note about Android support**: Reactor 3 doesn't officially support nor target Android.\nHowever it should work fine with Android SDK 21 (Android 5.0) and above. See the\n[complete note](https://projectreactor.io/docs/core/release/reference/docs/index.html#prerequisites)\nin the reference guide.\n\n## Trouble building the project?\nSince the introduction of [Java Multi-Release JAR File](https://openjdk.org/jeps/238) \nsupport one needs to have JDK 8, 9, and 21 available on the classpath. All the JDKs should \nbe automatically [detected](https://docs.gradle.org/current/userguide/toolchains.html#sec:auto_detection) \nor [provisioned](https://docs.gradle.org/current/userguide/toolchains.html#sec:provisioning) \nby Gradle Toolchain. \n\nHowever, if you see error message such as `No matching toolchains found for requested \nspecification: {languageVersion=X, vendor=any, implementation=vendor-specific}` (where \n`X` can be 8, 9 or 21), it means that you need to install the missing JDK:\n\n### Installing JDKs with [SDKMAN!](https://sdkman.io/)\n\nIn the project root folder run [SDKMAN env initialization](https://sdkman.io/usage#env): \n\n```shell\nsdk env install\n```\n\nthen (if needed) install JDK 9: \n\n```shell\nsdk install java $(sdk list java | grep -Eo -m1 '9\\b\\.[ea|0-9]{1,2}\\.[0-9]{1,2}-open')\n```\n\nthen (if needed) install JDK 21:\n\n```shell\nsdk install java $(sdk list java | grep -Eo -m1 '21\\b\\.[ea|0-9]{1,2}\\.[0-9]{1,2}-open')\n```\n\nWhen the installations succeed, try to refresh the project and see that it builds.\n\n### Installing JDKs manually\n\nThe manual Operation-system specific JDK installation\nis well explained in the [official docs](https://docs.oracle.com/en/java/javase/20/install/overview-jdk-installation.html)\n\n### Building the doc\n\nThe current active shell JDK version must be compatible with JDK17 or higher for Antora to build successfully.\nSo, just ensure that you have installed JDK 21, as described above and make it as the current one. \n\nThen you can build the antora documentation like this:\n```shell\n./gradlew docs\n```\n\nThe documentation is generated in `docs/build/site/index.html` and in `docs/build/distributions/reactor-core-<version>-docs.zip` \nIf a PDF file should also be included in the generated docs zip file, then you need to specify `-PforcePdf` option:\n\n```shell\n./gradlew docs -PforcePdf\n```\nNotice that PDF generation requires the `asciidoctor-pdf` command to be available in the PATH. \nFor example, on Mac OS, you can install such command like this:\n\n```shell\nbrew install asciidoctor\n```\n\n## Getting Started\n\nNew to Reactive Programming or bored of reading already ? Try the [Introduction to Reactor Core hands-on](https://github.com/reactor/lite-rx-api-hands-on) !\n\nIf you are familiar with RxJava or if you want to check more detailed introduction, be sure to check \nhttps://www.infoq.com/articles/reactor-by-example !\n\n## Flux\n\nA Reactive Streams Publisher with basic flow operators.\n- Static factories on Flux allow for source generation from arbitrary callbacks types.\n- Instance methods allows operational building, materialized on each subscription (_Flux#subscribe()_, ...) or multicasting operations (such as _Flux#publish_ and _Flux#publishNext_).\n\n[<img src=\"https://raw.githubusercontent.com/reactor/reactor-core/v3.1.3.RELEASE/src/docs/marble/flux.png\" width=\"500\" style=\"background-color: white\">](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html)\n\nFlux in action :\n```java\nFlux.fromIterable(getSomeLongList())\n    .mergeWith(Flux.interval(100))\n    .doOnNext(serviceA::someObserver)\n    .map(d -> d * 2)\n    .take(3)\n    .onErrorResume(errorHandler::fallback)\n    .doAfterTerminate(serviceM::incrementTerminate)\n    .subscribe(System.out::println);\n```\n\n## Mono\nA Reactive Streams Publisher constrained to *ZERO* or *ONE* element with appropriate operators. \n- Static factories on Mono allow for deterministic *zero or one* sequence generation from arbitrary callbacks types.\n- Instance methods allows operational building, materialized on each _Mono#subscribe()_ or _Mono#get()_ eventually called.\n\n[<img src=\"https://raw.githubusercontent.com/reactor/reactor-core/v3.4.1/reactor-core/src/main/java/reactor/core/publisher/doc-files/marbles/mono.svg\" width=\"500\" style=\"background-color: white\">](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html)\n\nMono in action :\n```java\nMono.fromCallable(System::currentTimeMillis)\n    .flatMap(time -> Mono.first(serviceA.findRecent(time), serviceB.findRecent(time)))\n    .timeout(Duration.ofSeconds(3), errorHandler::fallback)\n    .doOnSuccess(r -> serviceM.incrementSuccess())\n    .subscribe(System.out::println);\n```\n\nBlocking Mono result :\n```java\nTuple2<Instant, Instant> nowAndLater = Mono.zip(\n    Mono.just(Instant.now()),\n    Mono.delay(Duration.ofSeconds(1)).then(Mono.fromCallable(Instant::now)))\n  .block();\n```\n\n## Schedulers\n\nReactor uses a [Scheduler](https://projectreactor.io/docs/core/release/api/reactor/core/scheduler/Scheduler.html) as a\ncontract for arbitrary task execution. It provides some guarantees required by Reactive\nStreams flows like FIFO execution.\n\nYou can use or create efficient [schedulers](https://projectreactor.io/docs/core/release/api/reactor/core/scheduler/Schedulers.html)\nto jump thread on the producing flows (subscribeOn) or receiving flows (publishOn):\n\n```java\n\nMono.fromCallable( () -> System.currentTimeMillis() )\n\t.repeat()\n    .publishOn(Schedulers.single())\n    .log(\"foo.bar\")\n    .flatMap(time ->\n        Mono.fromCallable(() -> { Thread.sleep(1000); return time; })\n            .subscribeOn(Schedulers.parallel())\n    , 8) //maxConcurrency 8\n    .subscribe();\n```\n\n## ParallelFlux\n\n[ParallelFlux](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/ParallelFlux.html) can starve your CPU's from any sequence whose work can be subdivided in concurrent\n tasks. Turn back into a `Flux` with `ParallelFlux#sequential()`, an unordered join or\n use arbitrary merge strategies via 'groups()'.\n\n```java\nMono.fromCallable( () -> System.currentTimeMillis() )\n\t.repeat()\n    .parallel(8) //parallelism\n    .runOn(Schedulers.parallel())\n    .doOnNext( d -> System.out.println(\"I'm on thread \"+Thread.currentThread()) )\n    .subscribe()\n```\n\n\n## Custom sources : Flux.create and FluxSink, Mono.create and MonoSink\nTo bridge a Subscriber or Processor into an outside context that is taking care of\nproducing non concurrently, use `Flux#create`, `Mono#create`.\n\n```java\nFlux.create(sink -> {\n         ActionListener al = e -> {\n            sink.next(textField.getText());\n         };\n\n         // without cancellation support:\n         button.addActionListener(al);\n\n         // with cancellation support:\n         sink.onCancel(() -> {\n         \tbutton.removeListener(al);\n         });\n    },\n    // Overflow (backpressure) handling, default is BUFFER\n    FluxSink.OverflowStrategy.LATEST)\n    .timeout(Duration.ofSeconds(3))\n    .doOnComplete(() -> System.out.println(\"completed!\"))\n    .subscribe(System.out::println)\n```\n\n## The Backpressure Thing\n\nMost of this cool stuff uses bounded ring buffer implementation under the hood to mitigate signal processing difference between producers and consumers. Now, the operators and processors or any standard reactive stream component working on the sequence will be instructed to flow in when these buffers have free room AND only then. This means that we make sure we both have a deterministic capacity model (bounded buffer) and we never block (request more data on write capacity). Yup, it's not rocket science after all, the boring part is already being worked by us in collaboration with [Reactive Streams Commons](https://github.com/reactor/reactive-streams-commons) on going research effort.\n\n## What's more in it ?\n\n\"Operator Fusion\" (flow optimizers), health state observers, helpers to build custom reactive components, bounded queue generator, converters from/to Java 9 Flow, Publisher and Java 8 CompletableFuture. The repository contains a `reactor-test` project with test features like the [`StepVerifier`](https://projectreactor.io/docs/test/release/api/index.html?reactor/test/StepVerifier.html).\n\n-------------------------------------\n\n## Reference Guide\nhttps://projectreactor.io/docs/core/release/reference/docs/index.html\n\n## Javadoc\nhttps://projectreactor.io/docs/core/release/api/\n\n## Getting started with Flux and Mono\nhttps://github.com/reactor/lite-rx-api-hands-on\n\n## Reactor By Example\nhttps://www.infoq.com/articles/reactor-by-example\n\n## Head-First Spring & Reactor\nhttps://github.com/reactor/head-first-reactive-with-spring-and-reactor/\n\n## Beyond Reactor Core\n- Everything to jump outside the JVM with the non-blocking drivers from [Reactor Netty](https://github.com/reactor/reactor-netty).\n- [Reactor Addons](https://github.com/reactor/reactor-addons) provide for adapters and extra operators for Reactor 3.\n\n-------------------------------------\n_Powered by [Reactive Streams Commons](https://github.com/reactor/reactive-streams-commons)_\n\n_Licensed under [Apache Software License 2.0](https://www.apache.org/licenses/LICENSE-2.0)_\n\n_Sponsored by [VMware](https://tanzu.vmware.com/)_\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 7.0048828125,
          "content": "/*\n * Copyright (c) 2011-2024 VMware Inc. or its affiliates, All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport org.gradle.util.VersionNumber\nimport java.text.SimpleDateFormat\n\nbuildscript {\n\trepositories {\n\t\tmavenCentral()\n\t\tmaven { url \"https://repo.spring.io/plugins-release\" }\n\t}\n}\n\n\nplugins {\n\talias(libs.plugins.artifactory)\n\talias(libs.plugins.shadow)\n\talias(libs.plugins.japicmp)\n\talias(libs.plugins.download)\n\t// note: build scan plugin now must be applied in settings.gradle\n\t// plugin portal is now outdated due to bintray sunset, at least for artifactory gradle plugin\n\talias(libs.plugins.bnd) apply false\n\talias(libs.plugins.nohttp)\n\talias(libs.plugins.jcstress) apply false\n\talias(libs.plugins.spotless)\n\talias(libs.plugins.mrjar) apply false\n}\n\napply plugin: \"io.reactor.gradle.detect-ci\"\napply from: \"gradle/releaser.gradle\"\napply from: \"gradle/dependencies.gradle\"\napply from: \"gradle/toolchains.gradle\"\n\nrepositories { //needed at root for asciidoctor and nohttp-checkstyle\n\tmavenCentral()\n}\n\ndef osgiVersion(String v) {\n\tdef versionNumber = VersionNumber.parse(v)\n\tdef result\n\tif (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) {\n\t\tresult = \"${v}.RELEASE\"\n\t\tprintln \"$v is a release, will use $result for bnd\"\n\t}\n\telse if (versionNumber.qualifier.equalsIgnoreCase(\"SNAPSHOT\")) {\n\t\tdef sdf = new SimpleDateFormat(\"yyyyMMddHHmm\");\n\t\tsdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\t\tdef buildTimestamp = sdf.format(new Date())\n\t\tresult = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-$buildTimestamp\"\n\t\tprintln \"$v is a snapshot, will use $result for bnd\"\n\t}\n\telse {\n\t\tresult = \"${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.${versionNumber.qualifier}\"\n\t\tprintln \"$v is neither release nor snapshot, will use $result for bnd\"\n\t}\n\treturn result\n}\n\next {\n\tjdk = JavaVersion.current().majorVersion\n\tjdkJavadoc = \"https://docs.oracle.com/javase/$jdk/docs/api/\"\n\tif (JavaVersion.current().isJava11Compatible()) {\n\t\tjdkJavadoc = \"https://docs.oracle.com/en/java/javase/$jdk/docs/api/\"\n\t}\n\tprintln \"JDK Javadoc link for this build is ${rootProject.jdkJavadoc}\"\n\n\tosgiVersion = osgiVersion(version.toString())\n\n\t/*\n\t * Note that all dependencies and their versions are now defined in\n\t * ./gradle/libs.versions.toml\n\t */\n}\n\nnohttp {\n\tsource.exclude \"docs/modules/ROOT/assets/highlight/**\"\n\tsource.exclude \"**/build/**\"\n\tsource.exclude \"docs/.gradle/**\"\n\tsource.exclude \"docs/node_modules/**\"\n\tallowlistFile = project.file('codequality/nohttp/allowlist.lines')\n}\n\nspotless {\n\tif (project.hasProperty(\"spotlessFrom\")) {\n\t\tif (project.spotlessFrom == \"ALL\") {\n\t\t\tprintln \"[Spotless] Ratchet deactivated\"\n\t\t}\n\t\telse {\n\t\t\tprintln \"[Spotless] Ratchet from $project.spotlessFrom\"\n\t\t\tratchetFrom project.spotlessFrom\n\t\t}\n\t}\n\telse if (isCiServer) {\n\t\tprintln \"[Spotless] CI detected without explicit branch, not enforcing check\"\n\t\tenforceCheck false\n\t}\n\telse {\n\t\tString spotlessBranch = \"origin/main\"\n\t\tprintln \"[Spotless] Local run detected, ratchet from $spotlessBranch\"\n\t\tratchetFrom spotlessBranch\n\t}\n\tjava {\n\t\ttarget '**/*.java'\n\t\ttargetExclude '**/java8stubs/**/*', '**/java11stubs/**/*', '**/scrabble/**/*',\n\t\t\t'reactor-core/src/main/java/reactor/util/annotation/NonNull.java',\n\t\t\t'reactor-core/src/main/java/reactor/util/annotation/NonNullApi.java',\n\t\t\t'reactor-core/src/main/java/reactor/util/annotation/Nullable.java'\n\t\tlicenseHeaderFile('codequality/spotless/licenseSlashstarStyle.txt')\n\t}\n}\n\nconfigure(subprojects) { p ->\n\tapply plugin: 'java'\n\tapply plugin: 'jacoco'\n\tapply from: \"${rootDir}/gradle/setup.gradle\"\n    apply from: \"${rootDir}/gradle/toolchains.gradle\"\n\n\tdescription = 'Non-Blocking Reactive Foundation for the JVM'\n\tgroup = 'io.projectreactor'\n\n\trepositories {\n\t\tmavenCentral()\n\t\tmaven { url \"https://oss.sonatype.org/content/repositories/releases/\" }\n\n\t\tmavenLocal()\n\t\tif (version.endsWith('-SNAPSHOT') || version.contains('-SNAPSHOT-')) { //classic or customized snapshots\n\t\t\t//do not wait for Maven Central when going back to snapshots and comparing for baseline\n\t\t\tmaven { url 'https://repo.spring.io/release' }\n\t\t\tmaven { url 'https://repo.spring.io/snapshot' }\n\t\t}\n\t\tmaven { url 'https://repo.spring.io/milestone' }\n\t}\n\n\tjacocoTestReport {\n\t\treports {\n\t\t\txml.required = true\n\t\t\thtml.required = true\n\t\t}\n\t}\n\n\t// includes for base test task (see below for additional common configurations)\n\ttest {\n\t\tinclude '**/*Tests.*'\n\t\tinclude '**/*Test.*'\n\t}\n\n\t// all test tasks will show FAILED for each test method,\n\t// common exclusions, no scanning\n\tp.tasks.withType(Test).all {\n\t\ttestLogging {\n\t\t\tevents \"FAILED\"\n\t\t\tshowExceptions true\n\t\t\texceptionFormat \"FULL\"\n\t\t\tmaxGranularity -1\n\t\t}\n\n\t\t// show progress by displaying test classes, avoiding test suite timeouts\n\t\tTestDescriptor last\n\t\tbeforeTest { TestDescriptor td ->\n\t\t\tif (last != td.getParent() && td.getParent().toString().startsWith(\"Test class\")) {\n\t\t\t\tlast = td.getParent()\n\t\t\t\tprintln last\n\t\t\t}\n\t\t}\n\n\t\tif (JavaVersion.current().isJava9Compatible()) {\n\t\t\tprintln \"Java ${JavaVersion.current()}: lowering MaxGCPauseMillis to 20ms in ${project.name} ${name}\"\n\t\t\tjvmArgs = [\"-XX:MaxGCPauseMillis=20\"]\n\t\t}\n\n\t\tsystemProperty(\"java.awt.headless\", \"true\")\n\t\tsystemProperty(\"testGroups\", p.properties.get(\"testGroups\"))\n\t\tscanForTestClasses = false\n\t\texclude '**/*Abstract*.*'\n\t\texclude '**/*OperatorTest*.*'\n\n\t\t// allow re-run of failed tests only without special test tasks failing\n\t\t// because the filter is too restrictive\n\t\tfilter.setFailOnNoMatchingTests(false)\n\n\t\t// display intermediate results for special test tasks\n\t\tafterSuite { desc, result ->\n\t\t\tif (!desc.parent) { // will match the outermost suite\n\t\t\t\tprintln('\\n' + \"${desc} Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)\")\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {\n\t\t// If the JDK version is less than 17, the 'docs' subproject is not loaded, and therefore, the 'antora' or 'docs' tasks are unavailable.\n\t\t// Display a friendly error message indicating that JDK 17 or higher is required\n\n\t\ttask antora {\n\t\t\tdoLast {\n\t\t\t\tthrow new GradleException(\"antora task requires JDK 17 or higher.\")\n\t\t\t}\n\t\t}\n\n\t\ttask docs {\n\t\t\tdoLast {\n\t\t\t\tthrow new GradleException(\"docs task requires JDK 17 or higher\")\n\t\t\t}\n\t\t}\n\t}\n}\n\nconfigure(subprojects) { p ->\n\t// these apply once the above configure is done, but before project-specific build.gradle have applied\n\tapply plugin: \"io.reactor.gradle.java-conventions\"\n\tapply from: \"${rootDir}/gradle/javadoc.gradle\"\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "codequality",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1064453125,
          "content": "version=3.7.2-SNAPSHOT\nbomVersion=2024.0.1\nmetricsMicrometerVersion=1.2.2-SNAPSHOT\n\norg.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.80078125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "reactor-core-micrometer",
          "type": "tree",
          "content": null
        },
        {
          "name": "reactor-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "reactor-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "reactor-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.2509765625,
          "content": "/*\n * Copyright (c) 2011-2024 VMware Inc. or its affiliates, All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nplugins {\n\tid \"org.gradle.toolchains.foojay-resolver-convention\" version \"0.9.0\"\n}\n\nrootProject.name = 'reactor'\n\ninclude 'benchmarks', 'reactor-core', 'reactor-test', 'reactor-tools', 'reactor-core-micrometer'\n\nif (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {\n\tinclude 'docs'\n}\n\ndependencyResolutionManagement {\n  versionCatalogs {\n\tlibs {\n\t  if (System.getProperty(\"useSnapshotMicrometerVersion\")) {\n\t\tversion('micrometer', '1.14.3-SNAPSHOT')\n\t\tversion('micrometerDocsGenerator', \"1.0.5-SNAPSHOT\")\n\t\tversion('micrometerTracingTest', \"1.4.2-SNAPSHOT\")\n\t\tversion('contextPropagation', \"1.1.3-SNAPSHOT\")\n\t  }\n\t}\n  }\n}\n"
        }
      ]
    }
  ]
}