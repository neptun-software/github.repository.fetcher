{
  "metadata": {
    "timestamp": 1736708644366,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenFeign/feign",
      "stars": 9553,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.84765625,
          "content": "# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n\n# OS generated files #\n######################\n.DS_Store*\nehthumbs.db\nIcon?\nThumbs.db\n\n# Editor Files #\n################\n*~\n*.swp\n\n# Build output directies\n/target\n**/test-output\n**/target\n**/bin\nbuild\n*/build\n.m2\n\n# IntelliJ specific files/directories\nout\n.idea\n*.ipr\n*.iws\n*.iml\natlassian-ide-plugin.xml\n\n# Eclipse specific files/directories\n.classpath\n.project\n.settings\n.metadata\n.factorypath\n.generated\n\n# NetBeans specific files/directories\n.nbattrs\n\n# encrypted values\n*.asc\n\n# maven versions\n*.versionsBackup\n.mvn/.develocity/develocity-workspace-id\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.0791015625,
          "content": "### Version 11.9\n\n* `OkHttpClient` now implements `AsyncClient`\n\n### Version 10.9\n\n* Configurable to disable streaming mode for Default client by verils (#1182) \n* Overriding query parameter name by boggard (#1184)\n* Internal feign metrics by velo:\n* Dropwizard metrics 5 (#1181)\n* Micrometer (#1188)\n\n### Version 10.8\n\n* async feign variant supporting CompleteableFutures by motinis (#1174) \n* deterministic iterations for Feign mocks by contextshuffling (#1165)\n* Async client for apache http 5 by velo (#1179)\n\n### Version 10.7\n\n* Fix for vunerabilities reported by snky (#1121)\n* Makes iterator compatible with Java iterator expected behavior (#1117)\n* Bump reactive dependencies (#1105)\n* Deprecated `encoded` and add comment (#1108)\n\n### Version 10.6\n* Remove java8 module (#1086) \n* Add composed Spring annotations support (#1090) \n* Generate mocked clients for tests from feign interfaces (#1092)\n\n### Version 10.5\n* Add Apache Http 5 Client (#1065) \n* Updating Apache HttpClient to 4.5.10 (#1080) (#1081)\n* Spring4 contract (#1069) \n* Declarative contracts (#1060) \n\n### Version 10.4\n* Adding support for JDK Proxy (#1045)\n* Add Google HTTP Client support (#1057)\n\n### Version 10.3\n* Upgrade dependencies with security vunerabilities (#997 #1010 #1011 #1024 #1025 #1031 #1032)\n* Parse Retry-After header responses that include decimal points (#980)\n* Fine-grained HTTP error exceptions with client and server errors (#854)\n* Adds support for per request timeout options (#970)\n* Unwrap RetryableException and throw cause (#737)\n* JacksonEncoder avoids intermediate String request body (#989)\n* Respect decode404 flag and decode 404 response body (#1012)\n* Maintain user-given order for header values (#1009)\n\n### Version 10.1\n* Refactoring RequestTemplate to RFC6570 (#778)\n* Allow JAXB context caching in factory (#761)\n* Reactive Wrapper Support (#795)\n* Introduced native http2 client using Java 11 (#806)\n* Unwrap RetryableException and throw cause (#737)\n* Supports PATCH without a body paramter (#824)\n* Feign-Ribbon integration now depends on Ribbon 2.3.0, updated from Ribbon 2.1.1 (#826)\n\n### Version 10.0\n* Feign baseline is now JDK 8\n  - Feign is now being built and tested with OpenJDK 11 as well. Releases and code base will use JDK 8, we are just testing compatibility with JDK 11.\n* Removed @Deprecated methods marked for removal on feign 10.\n* `RetryException` includes the `Method` used for the offending `Request`.\n* `Response` objects now contain the `Request` used.\n\n### Version 9.6\n* Feign builder now supports flag `doNotCloseAfterDecode` to support lazy iteration of responses.\n* Adds `JacksonIteratorDecoder` and `StreamDecoder` to decode responses as `java.util.Iterator` or `java.util.stream.Stream`.\n\n### Version 9.5.1\n* When specified, Content-Type header is now included on OkHttp requests lacking a body.\n* Sets empty HttpEntity if apache request body is null.\n\n### Version 9.5\n* Introduces `feign-java8` with support for `java.util.Optional`\n* Adds `Feign.Builder.mapAndDecode()` to allow response preprocessing before decoding it.\n\n### Version 9.4.1\n* 404 responses are no longer swallowed for `void` return types.\n\n### Version 9.4\n* Adds Builder class to JAXBDecoder for disabling namespace-awareness (defaults to true).\n\n### Version 9.3\n* Adds `FallbackFactory`, allowing access to the cause of a Hystrix fallback\n* Adds support for encoded parameters via `@Param(encoded = true)`\n\n### Version 9.2\n* Adds Hystrix `SetterFactory` to customize group and command keys\n* Supports context path when using Ribbon `LoadBalancingTarget`\n* Adds builder methods for the Response object\n* Deprecates Response factory methods\n* Adds nullable Request field to the Response object\n\n### Version 9.1\n* Allows query parameters to match on a substring. Ex `q=body:{body}`\n\n### Version 9.0\n* Migrates to maven from gradle\n* Changes maven groupId to `io.github.openfeign`\n\n### Version 8.18\n* Adds support for expansion of @Param lists\n* Content-Length response bodies with lengths greater than Integer.MAX_VALUE report null length\n  * Previously the OkhttpClient would throw an exception, and ApacheHttpClient\n    would report a wrong, possibly negative value\n* Adds support for encoded query parameters in `@QueryMap` via `@QueryMap(encoded = true)`\n* Keys in `Response.headers` are now lower-cased. This map is now case-insensitive with regards to keys,\n  and iterates in lexicographic order.\n  * This is a step towards supporting http2, as header names in http1 are treated as case-insensitive\n    and http2 down-cases header names.\n\n### Version 8.17\n* Adds support to RxJava Completable via `HystrixFeign` builder with fallback support\n* Upgraded hystrix-core to 1.4.26\n* Upgrades dependency version for OkHttp/MockWebServer 3.2.0\n\n### Version 8.16\n* Adds `@HeaderMap` annotation to support dynamic header fields and values\n* Add support for default and static methods on interfaces\n\n### Version 8.15\n* Adds `@QueryMap` annotation to support dynamic query parameters\n* Supports runtime injection of `Param.Expander` via `MethodMetadata.indexToExpander`\n* Adds fallback support for HystrixCommand, Observable, and Single results\n* Supports PUT without a body parameter\n* Supports substitutions in `@Headers` like in `@Body`. (#326)\n  * **Note:** You might need to URL-encode literal values of `{` or `%` in your existing code.\n\n### Version 8.14\n* Add support for RxJava Observable and Single return types via the `HystrixFeign` builder.\n* Adds fallback implementation configuration to the `HystrixFeign` builder\n* Bumps dependency versions, most notably Gson 2.5 and OkHttp 2.7\n\n### Version 8.13\n* Never expands >8kb responses into memory\n\n### Version 8.12\n* Adds `Feign.Builder.decode404()` to reduce boilerplate for empty semantics.\n\n### Version 8.11\n* Adds support for Hystrix via a `HystrixFeign` builder.\n\n### Version 8.10\n* Adds HTTP status to FeignException for easier response handling\n* Reads class-level @Produces/@Consumes JAX-RS annotations\n* Supports POST without a body parameter\n\n### Version 8.9\n* Skips error handling when return type is `Response`\n\n### Version 8.8\n* Adds jackson-jaxb codec\n* Bumps dependency versions for integrations\n * OkHttp/MockWebServer 2.5.0\n * Jackson 2.6.1\n * Apache Http Client 4.5\n * JMH 1.10.5\n\n### Version 8.7\n* Bumps dependency versions for integrations\n * OkHttp/MockWebServer 2.4.0\n * Gson 2.3.1\n * Jackson 2.6.0\n * Ribbon 2.1.0\n * SLF4J 1.7.12\n\n### Version 8.6\n* Adds base api support via single-inheritance interfaces\n\n### Version 7.5/8.5\n* Added possibility to leave slash encoded in path parameters\n\n### Version 8.4\n* Correct Retryer bug that prevented it from retrying requests after the first 5 retry attempts.\n  * **Note:** If you have a custom `feign.Retryer` implementation you now must now implement `public Retryer clone()`.\n  It is suggested that you simply return a new instance of your Retryer class.\n\n### Version 8.3\n* Adds client implementation for Apache Http Client\n\n### Version 8.2\n* Allows customized request construction by exposing `Request.create()`\n* Adds JMH benchmark module\n* Enforces source compatibility with animal-sniffer\n\n### Version 8.1\n* Allows `@Headers` to be applied to a type\n\n### Version 8.0\n* Removes Dagger 1.x Dependency\n* Removes support for parameters annotated with `javax.inject.@Named`. Use `feign.@Param` instead.\n* Makes body parameter type explicit.\n\n### Version 7.4\n* Allows `@Headers` to be applied to a type\n\n### Version 7.3\n* Adds Request.Options support to RibbonClient\n* Adds LBClientFactory to enable caching of Ribbon LBClients\n* Updates to Ribbon 2.0-RC13\n* Updates to Jackson 2.5.1\n* Supports query parameters without values\n\n### Version 7.2\n* Adds `Feign.Builder.build()`\n* Opens constructor for Gson and Jackson codecs which accepts type adapters\n* Adds EmptyTarget for interfaces who exclusively declare URI methods\n* Reformats code according to [Google Java Style](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html)\n\n### Version 7.1\n* Introduces feign.@Param to annotate template parameters. Users must migrate from `javax.inject.@Named` to `feign.@Param` before updating to Feign 8.0.\n  * Supports custom expansion via `@Param(value = \"name\", expander = CustomExpander.class)`\n* Adds OkHttp integration\n* Allows multiple headers with the same name.\n* Ensures Accept headers default to `*/*`\n\n### Version 7.0\n* Expose reflective dispatch hook: InvocationHandlerFactory\n* Add JAXB integration\n* Add SLF4J integration\n* Upgrade to Dagger 1.2.2.\n  * **Note:** Dagger-generated code prior to version 1.2.0 is incompatible with Dagger 1.2.0 and beyond. Dagger users should upgrade Dagger to at least version 1.2.0, and recompile any dependency-injected classes.\n\n### Version 6.1.3\n* Updates to Ribbon 2.0-RC5\n\n### Version 6.1.1\n* Fix for #85\n\n### Version 6.1.0\n* Add [SLF4J](http://www.slf4j.org/) integration\n\n### Version 6.0.1\n* Fix for BasicAuthRequestInterceptor when username and/or password are long.\n\n### Version 6.0\n* Support binary request and response bodies.\n* Don't throw http status code exceptions when return type is `Response`.\n\n### Version 5.4.0\n* Add `BasicAuthRequestInterceptor`\n* Add Jackson integration\n\n### Version 5.3.0\n* Split `GsonCodec` into `GsonEncoder` and `GsonDecoder`, which are easy to use with `Feign.Builder`\n* Deprecate `GsonCodec`\n* Update to Ribbon 0.2.3\n\n### Version 5.2.0\n* Support usage of `GsonCodec` via `Feign.Builder`\n\n### Version 5.1.0\n* Correctly handle IOExceptions wrapped by Ribbon.\n* Miscellaneous findbugs fixes.\n\n### Version 5.0.1\n* `Decoder.decode()` is no longer called for `Response` or `void` types.\n\n### Version 5.0\n* Remove support for Observable methods.\n* Use single non-generic Decoder/Encoder instead of sets of type-specific Decoders/Encoders.\n* Decoders/Encoders are now more flexible, having access to the Response/RequestTemplate respectively.\n* Moved SaxDecoder into `feign-sax` dependency.\n  * SaxDecoder now decodes multiple types.\n  * Remove pattern decoders in favor of SaxDecoder.\n* Added Feign.Builder to simplify client customizations without using Dagger.\n* Gson type adapters can be registered as Dagger set bindings.\n* `Feign.create(...)` now requires specifying an encoder and decoder.\n\n### Version 4.4.1\n* Fix NullPointerException on calling equals and hashCode.\n\n### Version 4.4\n* Support overriding default HostnameVerifier.\n* Support GZIP content encoding for request bodies.\n* Support Iterable args for query parameters.\n* Support urls which have query parameters.\n\n### Version 4.3\n* Add ability to configure zero or more RequestInterceptors.\n* Remove `overrides = true` on codec modules.\n\n### Version 4.2/3.3\n* Document and enforce JAX-RS annotation processing from server POV\n* Skip query template parameters when corresponding java arg is null\n\n### Version 4.1/3.2\n* update to dagger 1.1\n* Add wikipedia search example\n* Allow `@Path` on types in feign-jaxrs\n\n### Version 4.0\n* Support RxJava-style Observers.\n  * Return type can be `Observable<T>` for an async equiv of `Iterable<T>`.\n  * `Observer<T>` replaces `IncrementalCallback<T>` and is passed to `Observable.subscribe()`.\n  * On `Subscription.unsubscribe()`, `Observer.onNext()` will stop being called.\n\n### Version 3.1\n* Log when an http request is retried or a response fails due to an IOException.\n\n### Version 3.0\n* Added support for asynchronous callbacks via `IncrementalCallback<T>` and `IncrementalDecoder.TextStream<T>`.\n* Wire is now Logger, with configurable Logger.Level.\n* Added `feign-gson` codec, used via `new GsonModule()`\n* changed codec to be similar to [WebSocket JSR 356](http://docs.oracle.com/javaee/7/api/javax/websocket/package-summary.html)\n  * Decoder is now `Decoder.TextStream<T>`\n  * BodyEncoder is now `Encoder.Text<T>`\n  * FormEncoder is now `Encoder.Text<Map<String, ?>>`\n* Encoder and Decoders are specified via `Provides.Type.SET` binding.\n* Default Encoder and Form Encoder is `Encoder.Text<Object>`\n* Default Decoder is `Decoder.TextStream<Object>`\n* ErrorDecoder now returns Exception, not fallback.\n* There can only be one `ErrorDecoder` and `Request.Options` binding now.\n\n### Version 2.0.0\n* removes guava and jax-rs dependencies\n* adds JAX-RS integration\n\n### Version 1.1.0\n* adds Ribbon integration\n* adds cli example\n* exponential backoff customizable via Retryer.Default ctor\n\n### Version 1.0.0\n\n* Initial open source release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5849609375,
          "content": "# Contributing to Feign\nPlease read [HACKING](./HACKING.md) prior to raising change.\n\nIf you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request (on a branch other than `master` or `gh-pages`).\n\n## Pull Requests\nPull requests eventually need to resolve to a single commit. The commit log should be easy to read as a change log. We use the following form to accomplish that.\n* First line is a <=72 character description in present tense, explaining what this does.\n  * Ex. \"Fixes regression on encoding vnd headers\" > \"Fixed encoding bug\", which forces the reader to look at code to understand impact.\n* Do not include issue links in the first line as that makes pull requests look weird.\n  * Ex. \"Addresses #345\" becomes a pull request title: \"Addresses #345 #346\"\n* After the first line, use markdown to concisely summarize the implementation.\n  * This isn't in leiu of comments, and it assumes the reader isn't intimately familar with code structure.\n* If the change closes an issue, note that at the end of the commit description ex. \"Fixes #345\"\n  * GitHub will automatically close change with this syntax.\n* If the change is notable, also update the [change log](./CHANGELOG.md) with your summary description.\n  * The unreleased minor version is often a good default.\n\n## Code Style\n\nWhen submitting code, please use the feign code format conventions. If you use Eclipse `m2eclipse` should take care of all settings automatically.\nYou can also import formatter settings using the [`eclipse-java-style.xml`](https://github.com/OpenFeign/feign/blob/master/src/config/eclipse-java-style.xml) file.\nIf using IntelliJ IDEA, you can use the [Eclipse Code Formatter Plugin](http://plugins.jetbrains.com/plugin/6546) to import the same file.\n\n## License\n\nBy contributing your code, you agree to license your contribution under the terms of the [APLv2](./LICENSE)\n\nAll files are released with the Apache 2.0 license.\n\nIf you are adding a new file it should have a header like this:\n\n```\n/**\n * Copyright 2012 The Feign Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n ```\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 3.16796875,
          "content": "# Hacking Feign\nFeign is optimized for maintenance vs flexibility. It prefers small\nfeatures that have been asked for repeated times, that are insured with\ntests, and have clear use cases. This limits the lines of code and count\nof modules in Feign's repo.\n\nCode design is opinionated including below:\n\n* Classes and methods default to package, not public visibility.\n* Changing certain implementation classes may be unsupported.\n* 3rd-party dependencies, and gnarly apis like java.beans are avoided.\n\n## How to request change\nThe best way to approach something not yet supported is to ask on\n[gitter](https://gitter.im/OpenFeign/feign) or [raise an issue](https://github.com/OpenFeign/feign/issues).\nAsking for the feature you need (like how to deal with command groups)\nvs a specific implementation (like making a private type public) will\ngive you more options to accomplish your goal.\n\nAdvice usually comes in two parts: advice and workaround. Advice may be \nto change Feign's code, or to fork until the feature is more widely\nrequested.\n\n## How change works\nHigh quality pull requests that have clear scope and tests that reflect\nthe intent of the feature are often merged and released in days. If a\nmerged change isn't immediately released and it is of priority to you,\nnag (make a comment) on your merged pull request until it is released.\n\n## How to experiment\nChanges to Feign's code are best addressed by the feature requestor in a\npull request *after* discussing in an issue or on gitter. By discussing\nfirst, there's less chance of a mutually disappointing experience where\na pull request is rejected. Moreover, the feature may be already present!\n\nAlbeit rare, some features will be deferred or rejected for inclusion in\nFeign's main repository. In these cases, the choices are typically to\neither fork the repository, or make your own repository containing the\nchange.\n\n### Forks are welcome!\nForking isn't bad. It is a natural place to experiment and vet a feature\nbefore it ends up in Feign's main repository. Large features or those\nwhich haven't satisfied diverse need are often deferred to forks or\nseparate repositories (see [Rule of Three](http://blog.codinghorror.com/rule-of-three/)).\n\n### Large integrations -> separate repositories\nIf you look carefully, you'll notice Feign integrations are often less\nthan 1000 lines of code including tests. Some features are rejected for\ninclusion solely due to the amount of maintenance. For example, adding\nsome features might imply tying up maintainers for several days or weeks\nand resulting in a large percentage increase in the size of feign.\n\nLarge integrations aren't bad, but to be sustainable, they need to be\nisolated where the maintenance of that feature doesn't endanger the\nmaintainability of Feign itself. Feign has been going since 2012, without\nthe need of full-time attention. This is largely because maintenance is\nlow and approachable.\n\nA good example of a large integration is [spring-cloud-netflix](https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/feign).\nSpring Cloud Netflix is sustainable as it has had several people\nmaintaining it, including Q&A support for years.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2012 The Feign Authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.10546875,
          "content": "Feign\nCopyright 2012 The Feign Authors.\n\nPortions of this software developed by Commerce Technologies, Inc.\n"
        },
        {
          "name": "OSSMETADATA",
          "type": "blob",
          "size": 0.021484375,
          "content": "osslifecycle=archived\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 53.814453125,
          "content": "# Feign simplifies the process of writing Java HTTP clients\n\n[![Join the chat at https://gitter.im/OpenFeign/feign](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/OpenFeign/feign?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CircleCI](https://circleci.com/gh/OpenFeign/feign/tree/master.svg?style=svg)](https://circleci.com/gh/OpenFeign/feign/tree/master)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.github.openfeign/feign-core/badge.png)](https://search.maven.org/artifact/io.github.openfeign/feign-core/)\n\nFeign is a Java to HTTP client binder inspired by [Retrofit](https://github.com/square/retrofit), [JAXRS-2.0](https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html), and [WebSocket](http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html).  Feign's first goal was reducing the complexity of binding [Denominator](https://github.com/Netflix/Denominator) uniformly to HTTP APIs regardless of [ReSTfulness](http://www.slideshare.net/adrianfcole/99problems).\n\n---\n### Why Feign and not X?\n\nFeign uses tools like Jersey and CXF to write Java clients for ReST or SOAP services. Furthermore, Feign allows you to write your own code on top of http libraries such as Apache HC. Feign connects your code to http APIs with minimal overhead and code via customizable decoders and error handling, which can be written to any text-based http API.\n\n### How does Feign work?\n\nFeign works by processing annotations into a templatized request. Arguments are applied to these templates in a straightforward fashion before output.  Although Feign is limited to supporting text-based APIs, it dramatically simplifies system aspects such as replaying requests. Furthermore, Feign makes it easy to unit test your conversions knowing this.\n\n### Java Version Compatibility\n\nFeign 10.x and above are built on Java 8 and should work on Java 9, 10, and 11.  For those that need JDK 6 compatibility, please use Feign 9.x\n\n## Feature overview\n\nThis is a map with current key features provided by feign:\n\n![MindMap overview](http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/OpenFeign/feign/master/src/docs/overview-mindmap.iuml)\n\n# Roadmap\n## Feign 11 and beyond\nMaking _API_ clients easier\n\nShort Term - What we're working on now. ⏰\n---\n* Response Caching\n  * Support caching of api responses.  Allow for users to define under what conditions a response is eligible for caching and what type of caching mechanism should be used.\n  * Support in-memory caching and external cache implementations (EhCache, Google, Spring, etc...)\n* Complete URI Template expression support\n  * Support [level 1 through level 4](https://tools.ietf.org/html/rfc6570#section-1.2) URI template expressions.\n  * Use [URI Templates TCK](https://github.com/uri-templates/uritemplate-test) to verify compliance.\n* `Logger` API refactor\n  * Refactor the `Logger` API to adhere closer to frameworks like SLF4J providing a common mental model for logging within Feign.  This model will be used by Feign itself throughout and provide clearer direction on how the `Logger` will be used.\n* `Retry` API refactor\n  * Refactor the `Retry` API to support user-supplied conditions and better control over back-off policies. **This may result in non-backward-compatible breaking changes**\n\nMedium Term - What's up next. ⏲\n---\n* Async execution support via `CompletableFuture`\n  * Allow for `Future` chaining and executor management for the request/response lifecycle.  **Implementation will require non-backward-compatible breaking changes**.  However this feature is required before Reactive execution can be considered.\n* Reactive execution support via [Reactive Streams](https://www.reactive-streams.org/)\n  * For JDK 9+, consider a native implementation that uses `java.util.concurrent.Flow`.\n  * Support for [Project Reactor](https://projectreactor.io/) and [RxJava 2+](https://github.com/ReactiveX/RxJava) implementations on JDK 8.\n\nLong Term - The future ☁️\n---\n* Additional Circuit Breaker Support.\n  * Support additional Circuit Breaker implementations like [Resilience4J](https://resilience4j.readme.io/) and Spring Circuit Breaker\n\n---\n\n# Usage\n\nThe feign library is available from [Maven Central](https://central.sonatype.com/artifact/io.github.openfeign/feign-core).\n\n```xml\n<dependency>\n    <groupId>io.github.openfeign</groupId>\n    <artifactId>feign-core</artifactId>\n    <version>??feign.version??</version>\n</dependency>\n```\n\n### Basics\n\nUsage typically looks like this, an adaptation of the [canonical Retrofit sample](https://github.com/square/retrofit/blob/master/samples/src/main/java/com/example/retrofit/SimpleService.java).\n\n```java\ninterface GitHub {\n  @RequestLine(\"GET /repos/{owner}/{repo}/contributors\")\n  List<Contributor> contributors(@Param(\"owner\") String owner, @Param(\"repo\") String repo);\n\n  @RequestLine(\"POST /repos/{owner}/{repo}/issues\")\n  void createIssue(Issue issue, @Param(\"owner\") String owner, @Param(\"repo\") String repo);\n\n}\n\npublic static class Contributor {\n  String login;\n  int contributions;\n}\n\npublic static class Issue {\n  String title;\n  String body;\n  List<String> assignees;\n  int milestone;\n  List<String> labels;\n}\n\npublic class MyApp {\n  public static void main(String... args) {\n    GitHub github = Feign.builder()\n                         .decoder(new GsonDecoder())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    // Fetch and print a list of the contributors to this library.\n    List<Contributor> contributors = github.contributors(\"OpenFeign\", \"feign\");\n    for (Contributor contributor : contributors) {\n      System.out.println(contributor.login + \" (\" + contributor.contributions + \")\");\n    }\n  }\n}\n```\n\n### Interface Annotations\n\nFeign annotations define the `Contract` between the interface and how the underlying client\nshould work.  Feign's default contract defines the following annotations:\n\n| Annotation     | Interface Target | Usage |\n|----------------|------------------|-------|\n| `@RequestLine` | Method           | Defines the `HttpMethod` and `UriTemplate` for request.  `Expressions`, values wrapped in curly-braces `{expression}` are resolved using their corresponding `@Param` annotated parameters. |\n| `@Param`       | Parameter        | Defines a template variable, whose value will be used to resolve the corresponding template `Expression`, by name provided as annotation value. If value is missing it will try to get the name from bytecode method parameter name (if the code was compiled with `-parameters` flag). |\n| `@Headers`     | Method, Type     | Defines a `HeaderTemplate`; a variation on a `UriTemplate`.  that uses `@Param` annotated values to resolve the corresponding `Expressions`.  When used on a `Type`, the template will be applied to every request.  When used on a `Method`, the template will apply only to the annotated method. |\n| `@QueryMap`    | Parameter        | Defines a `Map` of name-value pairs, or POJO, to expand into a query string. |\n| `@HeaderMap`   | Parameter        | Defines a `Map` of name-value pairs, to expand into `Http Headers` |\n| `@Body`        | Method           | Defines a `Template`, similar to a `UriTemplate` and `HeaderTemplate`, that uses `@Param` annotated values to resolve the corresponding `Expressions`.|\n\n\n> **Overriding the Request Line**\n>\n> If there is a need to target a request to a different host then the one supplied when the Feign client was created, or\n> you want to supply a target host for each request, include a `java.net.URI` parameter and Feign will use that value\n> as the request target.\n>\n> ```java\n> @RequestLine(\"POST /repos/{owner}/{repo}/issues\")\n> void createIssue(URI host, Issue issue, @Param(\"owner\") String owner, @Param(\"repo\") String repo);\n> ```\n>\n\n### Templates and Expressions\n\nFeign `Expressions` represent Simple String Expressions (Level 1) as defined by [URI Template - RFC 6570](https://tools.ietf.org/html/rfc6570).  `Expressions` are expanded using\ntheir corresponding `Param` annotated method parameters.\n\n*Example*\n\n```java\npublic interface GitHub {\n\n  @RequestLine(\"GET /repos/{owner}/{repo}/contributors\")\n  List<Contributor> contributors(@Param(\"owner\") String owner, @Param(\"repo\") String repository);\n\n  class Contributor {\n    String login;\n    int contributions;\n  }\n}\n\npublic class MyApp {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                         .decoder(new GsonDecoder())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    /* The owner and repository parameters will be used to expand the owner and repo expressions\n     * defined in the RequestLine.\n     *\n     * the resulting uri will be https://api.github.com/repos/OpenFeign/feign/contributors\n     */\n    github.contributors(\"OpenFeign\", \"feign\");\n  }\n}\n```\n\nExpressions must be enclosed in curly braces `{}` and may contain regular expression patterns, separated by a colon `:`  to restrict\nresolved values.  *Example* `owner` must be alphabetic. `{owner:[a-zA-Z]*}`\n\n#### Request Parameter Expansion\n\n`RequestLine` and `QueryMap` templates follow the [URI Template - RFC 6570](https://tools.ietf.org/html/rfc6570) specification for Level 1 templates, which specifies the following:\n\n* Unresolved expressions are omitted.\n* All literals and variable values are pct-encoded, if not already encoded or marked `encoded` via a `@Param` annotation.\n\nWe also have limited support for Level 3, Path Style Expressions, with the following restrictions:\n\n* Maps and Lists are expanded by default.\n* Only Single variable templates are supported.\n\n*Examples:*\n\n```\n{;who}             ;who=fred\n{;half}            ;half=50%25\n{;empty}           ;empty\n{;list}            ;list=red;list=green;list=blue\n{;map}             ;semi=%3B;dot=.;comma=%2C\n```\n\n```java\npublic interface MatrixService {\n\n  @RequestLine(\"GET /repos{;owners}\")\n  List<Contributor> contributors(@Param(\"owners\") List<String> owners);\n\n  class Contributor {\n    String login;\n    int contributions;\n  }\n}\n```\n\nIf `owners` in the above example is defined as `Matt, Jeff, Susan`, the uri will expand to `/repos;owners=Matt;owners=Jeff;owners=Susan` \n\nFor more information see [RFC 6570, Section 3.2.7](https://datatracker.ietf.org/doc/html/rfc6570#section-3.2.7)\n\n#### Undefined vs. Empty Values ####\n\nUndefined expressions are expressions where the value for the expression is an explicit `null` or no value is provided.\nPer [URI Template - RFC 6570](https://tools.ietf.org/html/rfc6570), it is possible to provide an empty value\nfor an expression.  When Feign resolves an expression, it first determines if the value is defined, if it is then\nthe query parameter will remain.  If the expression is undefined, the query parameter is removed.  See below\nfor a complete breakdown.\n\n*Empty String*\n```java\npublic void test() {\n   Map<String, Object> parameters = new LinkedHashMap<>();\n   parameters.put(\"param\", \"\");\n   this.demoClient.test(parameters);\n}\n```\nResult\n```\nhttp://localhost:8080/test?param=\n```\n\n*Missing*\n```java\npublic void test() {\n   Map<String, Object> parameters = new LinkedHashMap<>();\n   this.demoClient.test(parameters);\n}\n```\nResult\n```\nhttp://localhost:8080/test\n```\n\n*Undefined*\n```java\npublic void test() {\n   Map<String, Object> parameters = new LinkedHashMap<>();\n   parameters.put(\"param\", null);\n   this.demoClient.test(parameters);\n}\n```\nResult\n```\nhttp://localhost:8080/test\n```\n\nSee [Advanced Usage](#advanced-usage) for more examples.\n\n> **What about slashes? `/`**\n>\n> @RequestLine templates do not encode slash `/` characters by default.  To change this behavior, set the `decodeSlash` property on the `@RequestLine` to `false`.\n\n> **What about plus? `+`**\n>\n> Per the URI specification, a `+` sign is allowed in both the path and query segments of a URI, however, handling of\n> the symbol on the query can be inconsistent.  In some legacy systems, the `+` is equivalent to the a space.  Feign takes the approach of modern systems, where a\n> `+` symbol should not represent a space and is explicitly encoded as `%2B` when found on a query string.\n>\n> If you wish to use `+` as a space, then use the literal ` ` character or encode the value directly as `%20`\n\n##### Custom Expansion\n\nThe `@Param` annotation has an optional property `expander` allowing for complete control over the individual parameter's expansion.\nThe `expander` property must reference a class that implements the `Expander` interface:\n\n```java\npublic interface Expander {\n    String expand(Object value);\n}\n```\nThe result of this method adheres to the same rules stated above.  If the result is `null` or an empty string,\nthe value is omitted.  If the value is not pct-encoded, it will be.  See [Custom @Param Expansion](#custom-param-expansion) for more examples.\n\n#### Request Headers Expansion\n\n`Headers` and `HeaderMap` templates follow the same rules as [Request Parameter Expansion](#request-parameter-expansion)\nwith the following alterations:\n\n* Unresolved expressions are omitted.  If the result is an empty header value, the entire header is removed.\n* No pct-encoding is performed.\n\nSee [Headers](#headers) for examples.\n\n> **A Note on `@Param` parameters and their names**:\n>\n> All expressions with the same name, regardless of their position on the `@RequestLine`, `@QueryMap`, `@BodyTemplate`, or `@Headers` will resolve to the same value.\n> In the following example, the value of `contentType`, will be used to resolve both the header and path expression:\n>\n> ```java\n> public interface ContentService {\n>   @RequestLine(\"GET /api/documents/{contentType}\")\n>   @Headers(\"Accept: {contentType}\")\n>   String getDocumentByType(@Param(\"contentType\") String type);\n> }\n>```\n>\n> Keep this in mind when designing your interfaces.\n\n#### Request Body Expansion\n\n`Body` templates follow the same rules as [Request Parameter Expansion](#request-parameter-expansion)\nwith the following alterations:\n\n* Unresolved expressions are omitted.\n* Expanded value will **not** be passed through an `Encoder` before being placed on the request body.\n* A `Content-Type` header must be specified.  See [Body Templates](#body-templates) for examples.\n\n---\n### Customization\n\nFeign has several aspects that can be customized.  \nFor simple cases, you can use `Feign.builder()` to construct an API interface with your custom components.<br>\nFor request setting, you can use `options(Request.Options options)` on `target()` to set connectTimeout, connectTimeoutUnit, readTimeout, readTimeoutUnit, followRedirects.<br>\nFor example:\n\n```java\ninterface Bank {\n  @RequestLine(\"POST /account/{id}\")\n  Account getAccountInfo(@Param(\"id\") String id);\n}\n\npublic class BankService {\n  public static void main(String[] args) {\n    Bank bank = Feign.builder()\n        .decoder(new AccountDecoder())\n        .options(new Request.Options(10, TimeUnit.SECONDS, 60, TimeUnit.SECONDS, true))\n        .target(Bank.class, \"https://api.examplebank.com\");\n  }\n}\n```\n\n### Multiple Interfaces\nFeign can produce multiple api interfaces.  These are defined as `Target<T>` (default `HardCodedTarget<T>`), which allow for dynamic discovery and decoration of requests prior to execution.\n\nFor example, the following pattern might decorate each request with the current url and auth token from the identity service.\n\n```java\npublic class CloudService {\n  public static void main(String[] args) {\n    CloudDNS cloudDNS = Feign.builder()\n      .target(new CloudIdentityTarget<CloudDNS>(user, apiKey));\n  }\n\n  class CloudIdentityTarget extends Target<CloudDNS> {\n    /* implementation of a Target */\n  }\n}\n```\n\n### Examples\nFeign includes example [GitHub](./example-github) and [Wikipedia](./example-wikipedia) clients. The denominator project can also be scraped for Feign in practice. Particularly, look at its [example daemon](https://github.com/Netflix/denominator/tree/master/example-daemon).\n\n---\n### Integrations\nFeign intends to work well with other Open Source tools.  Modules are welcome to integrate with your favorite projects!\n\n### Encoder/Decoder\n\n#### Gson\n[Gson](./gson) includes an encoder and decoder you can use with a JSON API.\n\nAdd `GsonEncoder` and/or `GsonDecoder` to your `Feign.Builder` like so:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GsonCodec codec = new GsonCodec();\n    GitHub github = Feign.builder()\n                         .encoder(new GsonEncoder())\n                         .decoder(new GsonDecoder())\n                         .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n#### Jackson\n[Jackson](./jackson) includes an encoder and decoder you can use with a JSON API.\n\nAdd `JacksonEncoder` and/or `JacksonDecoder` to your `Feign.Builder` like so:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n      GitHub github = Feign.builder()\n                     .encoder(new JacksonEncoder())\n                     .decoder(new JacksonDecoder())\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\nFor the lighter weight Jackson Jr, use `JacksonJrEncoder` and `JacksonJrDecoder` from\nthe [Jackson Jr Module](./jackson-jr).\n\n#### Moshi\n[Moshi](./moshi) includes an encoder and decoder you can use with a JSON API.\nAdd `MoshiEncoder` and/or `MoshiDecoder` to your `Feign.Builder` like so:\n\n```java\nGitHub github = Feign.builder()\n                     .encoder(new MoshiEncoder())\n                     .decoder(new MoshiDecoder())\n                     .target(GitHub.class, \"https://api.github.com\");\n```\n\n#### Sax\n[SaxDecoder](./sax) allows you to decode XML in a way that is compatible with normal JVM and also Android environments.\n\nHere's an example of how to configure Sax response parsing:\n```java\npublic class Example {\n  public static void main(String[] args) {\n      Api api = Feign.builder()\n         .decoder(SAXDecoder.builder()\n                            .registerContentHandler(UserIdHandler.class)\n                            .build())\n         .target(Api.class, \"https://apihost\");\n    }\n}\n```\n\n#### JAXB\n[JAXB](./jaxb) includes an encoder and decoder you can use with an XML API.\n\nAdd `JAXBEncoder` and/or `JAXBDecoder` to your `Feign.Builder` like so:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    Api api = Feign.builder()\n             .encoder(new JAXBEncoder())\n             .decoder(new JAXBDecoder())\n             .target(Api.class, \"https://apihost\");\n  }\n}\n```\n\n#### SOAP\n[SOAP](./soap) includes an encoder and decoder you can use with an XML API.\n\n\nThis module adds support for encoding and decoding SOAP Body objects via JAXB and SOAPMessage. It also provides SOAPFault decoding capabilities by wrapping them into the original `javax.xml.ws.soap.SOAPFaultException`, so that you'll only need to catch `SOAPFaultException` in order to handle SOAPFault.\n\nAdd `SOAPEncoder` and/or `SOAPDecoder` to your `Feign.Builder` like so:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    Api api = Feign.builder()\n\t     .encoder(new SOAPEncoder(jaxbFactory))\n\t     .decoder(new SOAPDecoder(jaxbFactory))\n\t     .errorDecoder(new SOAPErrorDecoder())\n\t     .target(MyApi.class, \"http://api\");\n  }\n}\n```\n\nNB: you may also need to add `SOAPErrorDecoder` if SOAP Faults are returned in response with error http codes (4xx, 5xx, ...)\n\n#### Fastjson2 \n\n[fastjson2](./fastjson2) includes an encoder and decoder you can use with a JSON API.\n\nAdd `Fastjson2Encoder` and/or `Fastjson2Decoder` to your `Feign.Builder` like so:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n      GitHub github = Feign.builder()\n                     .encoder(new Fastjson2Encoder())\n                     .decoder(new Fastjson2Decoder())\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n### Contract\n\n#### JAX-RS\n[JAXRSContract](./jaxrs) overrides annotation processing to instead use standard ones supplied by the JAX-RS specification.  This is currently targeted at the 1.1 spec.\n\nHere's the example above re-written to use JAX-RS:\n```java\ninterface GitHub {\n  @GET @Path(\"/repos/{owner}/{repo}/contributors\")\n  List<Contributor> contributors(@PathParam(\"owner\") String owner, @PathParam(\"repo\") String repo);\n}\n\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                       .contract(new JAXRSContract())\n                       .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n### Client\n\n#### OkHttp\n[OkHttpClient](./okhttp) directs Feign's http requests to [OkHttp](http://square.github.io/okhttp/), which enables SPDY and better network control.\n\nTo use OkHttp with Feign, add the OkHttp module to your classpath. Then, configure Feign to use the OkHttpClient:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                     .client(new OkHttpClient())\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n#### Ribbon\n[RibbonClient](./ribbon) overrides URL resolution of Feign's client, adding smart routing and resiliency capabilities provided by [Ribbon](https://github.com/Netflix/ribbon).\n\nIntegration requires you to pass your ribbon client name as the host part of the url, for example `myAppProd`.\n```java\npublic class Example {\n  public static void main(String[] args) {\n    MyService api = Feign.builder()\n          .client(RibbonClient.create())\n          .target(MyService.class, \"https://myAppProd\");\n  }\n}\n```\n\n#### Java 11 Http2\n[Http2Client](./java11) directs Feign's http requests to Java11 [New HTTP/2 Client](https://openjdk.java.net/jeps/321) that implements HTTP/2.\n\nTo use New HTTP/2 Client with Feign, use Java SDK 11. Then, configure Feign to use the Http2Client:\n\n```java\nGitHub github = Feign.builder()\n                     .client(new Http2Client())\n                     .target(GitHub.class, \"https://api.github.com\");\n```\n\n### Breaker\n\n#### Hystrix\n[HystrixFeign](./hystrix) configures circuit breaker support provided by [Hystrix](https://github.com/Netflix/Hystrix).\n\nTo use Hystrix with Feign, add the Hystrix module to your classpath. Then use the `HystrixFeign` builder:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    MyService api = HystrixFeign.builder().target(MyService.class, \"https://myAppProd\");\n  }\n}\n```\n\n### Logger\n\n#### SLF4J\n[SLF4JModule](./slf4j) allows directing Feign's logging to [SLF4J](http://www.slf4j.org/), allowing you to easily use a logging backend of your choice (Logback, Log4J, etc.)\n\nTo use SLF4J with Feign, add both the SLF4J module and an SLF4J binding of your choice to your classpath.  Then, configure Feign to use the Slf4jLogger:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                     .logger(new Slf4jLogger())\n                     .logLevel(Level.FULL)\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n### Decoders\n`Feign.builder()` allows you to specify additional configuration such as how to decode a response.\n\nIf any methods in your interface return types besides `Response`, `String`, `byte[]` or `void`, you'll need to configure a non-default `Decoder`.\n\nHere's how to configure JSON decoding (using the `feign-gson` extension):\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                     .decoder(new GsonDecoder())\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\nIf you need to pre-process the response before give it to the Decoder, you can use the `mapAndDecode` builder method.\nAn example use case is dealing with an API that only serves jsonp, you will maybe need to unwrap the jsonp before\nsend it to the Json decoder of your choice:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    JsonpApi jsonpApi = Feign.builder()\n                         .mapAndDecode((response, type) -> jsopUnwrap(response, type), new GsonDecoder())\n                         .target(JsonpApi.class, \"https://some-jsonp-api.com\");\n  }\n}\n```\n\nIf any methods in your interface return type `Stream`, you'll need to configure a `StreamDecoder`.\n\nHere's how to configure Stream decoder without delegate decoder:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n            .decoder(StreamDecoder.create((r, t) -> {\n              BufferedReader bufferedReader = new BufferedReader(r.body().asReader(UTF_8));\n              return bufferedReader.lines().iterator();\n            }))\n            .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n``` \n\nHere's how to configure Stream decoder with delegate decoder:\n\n```java\n\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n            .decoder(StreamDecoder.create((r, t) -> {\n              BufferedReader bufferedReader = new BufferedReader(r.body().asReader(UTF_8));\n              return bufferedReader.lines().iterator();\n            }, (r, t) -> \"this is delegate decoder\"))\n            .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n### Encoders\nThe simplest way to send a request body to a server is to define a `POST` method that has a `String` or `byte[]` parameter without any annotations on it. You will likely need to add a `Content-Type` header.\n\n```java\ninterface LoginClient {\n  @RequestLine(\"POST /\")\n  @Headers(\"Content-Type: application/json\")\n  void login(String content);\n}\n\npublic class Example {\n  public static void main(String[] args) {\n    client.login(\"{\\\"user_name\\\": \\\"denominator\\\", \\\"password\\\": \\\"secret\\\"}\");\n  }\n}\n```\n\nBy configuring an `Encoder`, you can send a type-safe request body. Here's an example using the `feign-gson` extension:\n\n```java\nstatic class Credentials {\n  final String user_name;\n  final String password;\n\n  Credentials(String user_name, String password) {\n    this.user_name = user_name;\n    this.password = password;\n  }\n}\n\ninterface LoginClient {\n  @RequestLine(\"POST /\")\n  void login(Credentials creds);\n}\n\npublic class Example {\n  public static void main(String[] args) {\n    LoginClient client = Feign.builder()\n                              .encoder(new GsonEncoder())\n                              .target(LoginClient.class, \"https://foo.com\");\n\n    client.login(new Credentials(\"denominator\", \"secret\"));\n  }\n}\n```\n\n### @Body templates\nThe `@Body` annotation indicates a template to expand using parameters annotated with `@Param`. You will likely need to add a `Content-Type` header.\n\n```java\ninterface LoginClient {\n\n  @RequestLine(\"POST /\")\n  @Headers(\"Content-Type: application/xml\")\n  @Body(\"<login \\\"user_name\\\"=\\\"{user_name}\\\" \\\"password\\\"=\\\"{password}\\\"/>\")\n  void xml(@Param(\"user_name\") String user, @Param(\"password\") String password);\n\n  @RequestLine(\"POST /\")\n  @Headers(\"Content-Type: application/json\")\n  // json curly braces must be escaped!\n  @Body(\"%7B\\\"user_name\\\": \\\"{user_name}\\\", \\\"password\\\": \\\"{password}\\\"%7D\")\n  void json(@Param(\"user_name\") String user, @Param(\"password\") String password);\n}\n\npublic class Example {\n  public static void main(String[] args) {\n    client.xml(\"denominator\", \"secret\"); // <login \"user_name\"=\"denominator\" \"password\"=\"secret\"/>\n    client.json(\"denominator\", \"secret\"); // {\"user_name\": \"denominator\", \"password\": \"secret\"}\n  }\n}\n```\n\n### Headers\nFeign supports settings headers on requests either as part of the api or as part of the client\ndepending on the use case.\n\n#### Set headers using apis\nIn cases where specific interfaces or calls should always have certain header values set, it\nmakes sense to define headers as part of the api.\n\nStatic headers can be set on an api interface or method using the `@Headers` annotation.\n\n```java\n@Headers(\"Accept: application/json\")\ninterface BaseApi<V> {\n  @Headers(\"Content-Type: application/json\")\n  @RequestLine(\"PUT /api/{key}\")\n  void put(@Param(\"key\") String key, V value);\n}\n```\n\nMethods can specify dynamic content for static headers using variable expansion in `@Headers`.\n\n```java\npublic interface Api {\n   @RequestLine(\"POST /\")\n   @Headers(\"X-Ping: {token}\")\n   void post(@Param(\"token\") String token);\n}\n```\n\nIn cases where both the header field keys and values are dynamic and the range of possible keys cannot\nbe known ahead of time and may vary between different method calls in the same api/client (e.g. custom\nmetadata header fields such as \"x-amz-meta-\\*\" or \"x-goog-meta-\\*\"), a Map parameter can be annotated\nwith `HeaderMap` to construct a query that uses the contents of the map as its header parameters.\n\n```java\npublic interface Api {\n   @RequestLine(\"POST /\")\n   void post(@HeaderMap Map<String, Object> headerMap);\n}\n```\n\nThese approaches specify header entries as part of the api and do not require any customizations\nwhen building the Feign client.\n\n#### Setting headers per target\nTo customize headers for each request method on a Target, a RequestInterceptor can be used. RequestInterceptors can be\nshared across Target instances and are expected to be thread-safe. RequestInterceptors are applied to all request\nmethods on a Target.\n\nIf you need per method customization, a custom Target is required, as the a RequestInterceptor does not have access to\nthe current method metadata.\n\nFor an example of setting headers using a `RequestInterceptor`, see the `Request Interceptors` section.\n\nHeaders can be set as part of a custom `Target`.\n\n```java\n  static class DynamicAuthTokenTarget<T> implements Target<T> {\n    public DynamicAuthTokenTarget(Class<T> clazz,\n                                  UrlAndTokenProvider provider,\n                                  ThreadLocal<String> requestIdProvider);\n\n    @Override\n    public Request apply(RequestTemplate input) {\n      TokenIdAndPublicURL urlAndToken = provider.get();\n      if (input.url().indexOf(\"http\") != 0) {\n        input.insert(0, urlAndToken.publicURL);\n      }\n      input.header(\"X-Auth-Token\", urlAndToken.tokenId);\n      input.header(\"X-Request-ID\", requestIdProvider.get());\n\n      return input.request();\n    }\n  }\n\n  public class Example {\n    public static void main(String[] args) {\n      Bank bank = Feign.builder()\n              .target(new DynamicAuthTokenTarget(Bank.class, provider, requestIdProvider));\n    }\n  }\n```\n\nThese approaches depend on the custom `RequestInterceptor` or `Target` being set on the Feign\nclient when it is built and can be used as a way to set headers on all api calls on a per-client\nbasis. This can be useful for doing things such as setting an authentication token in the header\nof all api requests on a per-client basis. The methods are run when the api call is made on the\nthread that invokes the api call, which allows the headers to be set dynamically at call time and\nin a context-specific manner -- for example, thread-local storage can be used to set different\nheader values depending on the invoking thread, which can be useful for things such as setting\nthread-specific trace identifiers for requests.\n\n#### Set zero Content-Length Header\n\nTo specify `Content-Length: 0` header when making a request with empty body, system property `sun.net.http.allowRestrictedHeaders` should be set to `true`\n\nIf not, the `Content-Length` header will not be added.\n\n### Advanced usage\n\n#### Base Apis\nIn many cases, apis for a service follow the same conventions. Feign supports this pattern via single-inheritance interfaces.\n\nConsider the example:\n```java\ninterface BaseAPI {\n  @RequestLine(\"GET /health\")\n  String health();\n\n  @RequestLine(\"GET /all\")\n  List<Entity> all();\n}\n```\n\nYou can define and target a specific api, inheriting the base methods.\n```java\ninterface CustomAPI extends BaseAPI {\n  @RequestLine(\"GET /custom\")\n  String custom();\n}\n```\n\nIn many cases, resource representations are also consistent. For this reason, type parameters are supported on the base api interface.\n\n```java\n@Headers(\"Accept: application/json\")\ninterface BaseApi<V> {\n\n  @RequestLine(\"GET /api/{key}\")\n  V get(@Param(\"key\") String key);\n\n  @RequestLine(\"GET /api\")\n  List<V> list();\n\n  @Headers(\"Content-Type: application/json\")\n  @RequestLine(\"PUT /api/{key}\")\n  void put(@Param(\"key\") String key, V value);\n}\n\ninterface FooApi extends BaseApi<Foo> { }\n\ninterface BarApi extends BaseApi<Bar> { }\n```\n\n#### Logging\nYou can log the http messages going to and from the target by setting up a `Logger`.  Here's the easiest way to do that:\n```java\npublic class Example {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                     .decoder(new GsonDecoder())\n                     .logger(new Logger.JavaLogger(\"GitHub.Logger\").appendToFile(\"logs/http.log\"))\n                     .logLevel(Logger.Level.FULL)\n                     .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n> **A Note on JavaLogger**:\n> Avoid using of default ```JavaLogger()``` constructor - it was marked as deprecated and will be removed soon.\n\nThe SLF4JLogger (see above) may also be of interest.\n\nTo filter out sensitive information like authorization or tokens\noverride methods `shouldLogRequestHeader` or `shouldLogResponseHeader`.\n\n#### Request Interceptors\nWhen you need to change all requests, regardless of their target, you'll want to configure a `RequestInterceptor`.\nFor example, if you are acting as an intermediary, you might want to propagate the `X-Forwarded-For` header.\n\n```java\nstatic class ForwardedForInterceptor implements RequestInterceptor {\n  @Override public void apply(RequestTemplate template) {\n    template.header(\"X-Forwarded-For\", \"origin.host.com\");\n  }\n}\n\npublic class Example {\n  public static void main(String[] args) {\n    Bank bank = Feign.builder()\n                 .decoder(accountDecoder)\n                 .requestInterceptor(new ForwardedForInterceptor())\n                 .target(Bank.class, \"https://api.examplebank.com\");\n  }\n}\n```\n\nAnother common example of an interceptor would be authentication, such as using the built-in `BasicAuthRequestInterceptor`.\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    Bank bank = Feign.builder()\n                 .decoder(accountDecoder)\n                 .requestInterceptor(new BasicAuthRequestInterceptor(username, password))\n                 .target(Bank.class, \"https://api.examplebank.com\");\n  }\n}\n```\n\n#### Custom @Param Expansion\nParameters annotated with `Param` expand based on their `toString`. By\nspecifying a custom `Param.Expander`, users can control this behavior,\nfor example formatting dates.\n\n```java\npublic interface Api {\n  @RequestLine(\"GET /?since={date}\") Result list(@Param(value = \"date\", expander = DateToMillis.class) Date date);\n}\n```\n\n#### Dynamic Query Parameters\nA Map parameter can be annotated with `QueryMap` to construct a query that uses the contents of the map as its query parameters.\n\n```java\npublic interface Api {\n  @RequestLine(\"GET /find\")\n  V find(@QueryMap Map<String, Object> queryMap);\n}\n```\n\nThis may also be used to generate the query parameters from a POJO object using a `QueryMapEncoder`.\n\n```java\npublic interface Api {\n  @RequestLine(\"GET /find\")\n  V find(@QueryMap CustomPojo customPojo);\n}\n```\n\nWhen used in this manner, without specifying a custom `QueryMapEncoder`, the query map will be generated using member variable names as query parameter names. You can annotate a specific field of `CustomPojo` with the `@Param` annotation to specify a different name to the query parameter. The following POJO will generate query params of \"/find?name={name}&number={number}&region_id={regionId}\" (order of included query parameters not guaranteed, and as usual, if any value is null, it will be left out).\n\n```java\npublic class CustomPojo {\n  private final String name;\n  private final int number;\n  @Param(\"region_id\")\n  private final String regionId;\n\n  public CustomPojo (String name, int number, String regionId) {\n    this.name = name;\n    this.number = number;\n    this.regionId = regionId;\n  }\n}\n```\n\nTo setup a custom `QueryMapEncoder`:\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    MyApi myApi = Feign.builder()\n                 .queryMapEncoder(new MyCustomQueryMapEncoder())\n                 .target(MyApi.class, \"https://api.hostname.com\");\n  }\n}\n```\n\nWhen annotating objects with @QueryMap, the default encoder uses reflection to inspect provided objects Fields to expand the objects values into a query string. If you prefer that the query string be built using getter and setter methods, as defined in the Java Beans API, please use the BeanQueryMapEncoder\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    MyApi myApi = Feign.builder()\n                 .queryMapEncoder(new BeanQueryMapEncoder())\n                 .target(MyApi.class, \"https://api.hostname.com\");\n  }\n}\n```\n\n### Error Handling\nIf you need more control over handling unexpected responses, Feign instances can\nregister a custom `ErrorDecoder` via the builder.\n\n```java\npublic class Example {\n  public static void main(String[] args) {\n    MyApi myApi = Feign.builder()\n                 .errorDecoder(new MyErrorDecoder())\n                 .target(MyApi.class, \"https://api.hostname.com\");\n  }\n}\n```\n\nAll responses that result in an HTTP status not in the 2xx range will trigger the `ErrorDecoder`'s `decode` method, allowing\nyou to handle the response, wrap the failure into a custom exception or perform any additional processing.\nIf you want to retry the request again, throw a `RetryableException`.  This will invoke the registered\n`Retryer`.\n\n### Retry\nFeign, by default, will automatically retry `IOException`s, regardless of HTTP method, treating them as transient network\nrelated exceptions, and any `RetryableException` thrown from an `ErrorDecoder`.  To customize this\nbehavior, register a custom `Retryer` instance via the builder.\n\nThe following example shows how to refresh token and retry with `ErrorDecoder` and `Retryer` when received a 401 response.\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        var github = Feign.builder()\n                .decoder(new GsonDecoder())\n                .retryer(new MyRetryer(100, 3))\n                .errorDecoder(new MyErrorDecoder())\n                .target(Github.class, \"https://api.github.com\");\n\n        var contributors = github.contributors(\"foo\", \"bar\", \"invalid_token\");\n        for (var contributor : contributors) {\n            System.out.println(contributor.login + \" \" + contributor.contributions);\n        }\n    }\n\n    static class MyErrorDecoder implements ErrorDecoder {\n\n        private final ErrorDecoder defaultErrorDecoder = new Default();\n\n        @Override\n        public Exception decode(String methodKey, Response response) {\n            // wrapper 401 to RetryableException in order to retry\n            if (response.status() == 401) {\n                return new RetryableException(response.status(), response.reason(), response.request().httpMethod(), null, response.request());\n            }\n            return defaultErrorDecoder.decode(methodKey, response);\n        }\n    }\n\n    static class MyRetryer implements Retryer {\n\n        private final long period;\n        private final int maxAttempts;\n        private int attempt = 1;\n\n        public MyRetryer(long period, int maxAttempts) {\n            this.period = period;\n            this.maxAttempts = maxAttempts;\n        }\n\n        @Override\n        public void continueOrPropagate(RetryableException e) {\n            if (++attempt > maxAttempts) {\n                throw e;\n            }\n            if (e.status() == 401) {\n                // remove Authorization first, otherwise Feign will add a new Authorization header\n                // cause github responses a 400 bad request\n                e.request().requestTemplate().removeHeader(\"Authorization\");\n                e.request().requestTemplate().header(\"Authorization\", \"Bearer \" + getNewToken());\n                try {\n                    Thread.sleep(period);\n                } catch (InterruptedException ex) {\n                    throw e;\n                }\n            } else {\n                throw e;\n            }\n        }\n\n        // Access an external api to obtain new token\n        // In this example, we can simply return a fixed token to demonstrate how Retryer works\n        private String getNewToken() {\n            return \"newToken\";\n        }\n\n        @Override\n        public Retryer clone() {\n            return new MyRetryer(period, maxAttempts);\n        }\n}\n```\n\n`Retryer`s are responsible for determining if a retry should occur by returning either a `true` or\n`false` from the method `continueOrPropagate(RetryableException e);`  A `Retryer` instance will be\ncreated for each `Client` execution, allowing you to maintain state bewteen each request if desired.\n\nIf the retry is determined to be unsuccessful, the last `RetryException` will be thrown.  To throw the original\ncause that led to the unsuccessful retry, build your Feign client with the `exceptionPropagationPolicy()` option.\n\n#### Response Interceptor\nIf you need to treat what would otherwise be an error as a success and return a result rather than throw an exception then you may use a `ResponseInterceptor`.\n\nAs an example Feign includes a simple `RedirectionInterceptor` that can be used to extract the location header from redirection responses.\n```java\npublic interface Api {\n  // returns a 302 response\n  @RequestLine(\"GET /location\")\n  String location();\n}\n\npublic class MyApp {\n  public static void main(String[] args) {\n    // Configure the HTTP client to ignore redirection\n    Api api = Feign.builder()\n                   .options(new Options(10, TimeUnit.SECONDS, 60, TimeUnit.SECONDS, false))\n                   .responseInterceptor(new RedirectionInterceptor())\n                   .target(Api.class, \"https://redirect.example.com\");\n  }\n}\n```\n\n### Metrics\nBy default, feign won't collect any metrics.\n\nBut, it's possible to add metric collection capabilities to any feign client.\n\nMetric Capabilities provide a first-class Metrics API that users can tap into to gain insight into the request/response lifecycle.\n\n> **A Note on Metrics modules**:\n>\n> All the metric-integrations are built in separate modules and not available in the `feign-core` module. You will need to add them to your dependencies.\n\n#### Dropwizard Metrics 4\n\n```\npublic class MyApp {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                         .addCapability(new Metrics4Capability())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    github.contributors(\"OpenFeign\", \"feign\");\n    // metrics will be available from this point onwards\n  }\n}\n```\n\n#### Dropwizard Metrics 5\n\n```\npublic class MyApp {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                         .addCapability(new Metrics5Capability())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    github.contributors(\"OpenFeign\", \"feign\");\n    // metrics will be available from this point onwards\n  }\n}\n```\n\n#### Micrometer\n\n```\npublic class MyApp {\n  public static void main(String[] args) {\n    GitHub github = Feign.builder()\n                         .addCapability(new MicrometerCapability())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    github.contributors(\"OpenFeign\", \"feign\");\n    // metrics will be available from this point onwards\n  }\n}\n```\n\n#### Static and Default Methods\nInterfaces targeted by Feign may have static or default methods (if using Java 8+).\nThese allows Feign clients to contain logic that is not expressly defined by the underlying API.\nFor example, static methods make it easy to specify common client build configurations; default methods can be used to compose queries or define default parameters.\n\n```java\ninterface GitHub {\n  @RequestLine(\"GET /repos/{owner}/{repo}/contributors\")\n  List<Contributor> contributors(@Param(\"owner\") String owner, @Param(\"repo\") String repo);\n\n  @RequestLine(\"GET /users/{username}/repos?sort={sort}\")\n  List<Repo> repos(@Param(\"username\") String owner, @Param(\"sort\") String sort);\n\n  default List<Repo> repos(String owner) {\n    return repos(owner, \"full_name\");\n  }\n\n  /**\n   * Lists all contributors for all repos owned by a user.\n   */\n  default List<Contributor> contributors(String user) {\n    MergingContributorList contributors = new MergingContributorList();\n    for(Repo repo : this.repos(owner)) {\n      contributors.addAll(this.contributors(user, repo.getName()));\n    }\n    return contributors.mergeResult();\n  }\n\n  static GitHub connect() {\n    return Feign.builder()\n                .decoder(new GsonDecoder())\n                .target(GitHub.class, \"https://api.github.com\");\n  }\n}\n```\n\n\n### Async execution via `CompletableFuture`\n\nFeign 10.8 introduces a new builder `AsyncFeign` that allow methods to return `CompletableFuture` instances.\n\n```java\ninterface GitHub {\n  @RequestLine(\"GET /repos/{owner}/{repo}/contributors\")\n  CompletableFuture<List<Contributor>> contributors(@Param(\"owner\") String owner, @Param(\"repo\") String repo);\n}\n\npublic class MyApp {\n  public static void main(String... args) {\n    GitHub github = AsyncFeign.builder()\n                         .decoder(new GsonDecoder())\n                         .target(GitHub.class, \"https://api.github.com\");\n\n    // Fetch and print a list of the contributors to this library.\n    CompletableFuture<List<Contributor>> contributors = github.contributors(\"OpenFeign\", \"feign\");\n    for (Contributor contributor : contributors.get(1, TimeUnit.SECONDS)) {\n      System.out.println(contributor.login + \" (\" + contributor.contributions + \")\");\n    }\n  }\n}\n```\n\nInitial implementation include 2 async clients:\n- `AsyncClient.Default`\n- `AsyncApacheHttp5Client`\n\n## Maven’s Bill of Material (BOM)\n\nKeeping all feign libraries on the same version is essential to avoid incompatible binaries. When consuming external dependencies, can be tricky to make sure only one version is present.\n\nWith that in mind, feign build generates a module called `feign-bom` that locks the versions for all `feign-*` modules.\n\nThe Bill Of Material is a special POM file that groups dependency versions that are known to be valid and tested to work together. This will reduce the developers’ pain of having to test the compatibility of different versions and reduce the chances to have version mismatches.\n\n\n[Here](https://repo1.maven.org/maven2/io/github/openfeign/feign-bom/11.9/feign-bom-11.9.pom) is one example of what feign BOM file looks like.\n\n#### Usage\n\n```xml\n<project>\n\n...\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>io.github.openfeign</groupId>\n        <artifactId>feign-bom</artifactId>\n        <version>??feign.version??</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n</project>\n```\n# Form Encoder\n\n[![build_status](https://travis-ci.org/OpenFeign/feign-form.svg?branch=master)](https://travis-ci.org/OpenFeign/feign-form)\n[![maven_central](https://maven-badges.herokuapp.com/maven-central/io.github.openfeign.form/feign-form/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.github.openfeign.form/feign-form)\n[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n\nThis module adds support for encoding **application/x-www-form-urlencoded** and **multipart/form-data** forms.\n\n## Add dependency\n\nInclude the dependency to your app:\n\n**Maven**:\n\n```xml\n<dependencies>\n  ...\n  <dependency>\n    <groupId>io.github.openfeign.form</groupId>\n    <artifactId>feign-form</artifactId>\n    <version>4.0.0</version>\n  </dependency>\n  ...\n</dependencies>\n```\n\n**Gradle**:\n\n```groovy\ncompile 'io.github.openfeign.form:feign-form:4.0.0'\n```\n\n## Requirements\n\nThe `feign-form` extension depend on `OpenFeign` and its *concrete* versions:\n\n- all `feign-form` releases before **3.5.0** works with `OpenFeign` **9.\\*** versions;\n- starting from `feign-form`'s version **3.5.0**, the module works with `OpenFeign` **10.1.0** versions and greater.\n\n> **IMPORTANT:** there is no backward compatibility and no any gurantee that the `feign-form`'s versions after **3.5.0** work with `OpenFeign` before **10.\\***. `OpenFeign` was refactored in 10th release, so the best approach - use the freshest `OpenFeign` and `feign-form` versions.\n\nNotes:\n\n- [spring-cloud-openfeign](https://github.com/spring-cloud/spring-cloud-openfeign) uses `OpenFeign` **9.\\*** till **v2.0.3.RELEASE** and uses **10.\\*** after. Anyway, the dependency already has suitable `feign-form` version, see [dependency pom](https://github.com/spring-cloud/spring-cloud-openfeign/blob/master/spring-cloud-openfeign-dependencies/pom.xml#L19), so you don't need to specify it separately;\n\n- `spring-cloud-starter-feign` is a **deprecated** dependency and it always uses the `OpenFeign`'s **9.\\*** versions.\n\n## Usage\n\nAdd `FormEncoder` to your `Feign.Builder` like so:\n\n```java\nSomeApi github = Feign.builder()\n                      .encoder(new FormEncoder())\n                      .target(SomeApi.class, \"http://api.some.org\");\n```\n\nMoreover, you can decorate the existing encoder, for example JsonEncoder like this:\n\n```java\nSomeApi github = Feign.builder()\n                      .encoder(new FormEncoder(new JacksonEncoder()))\n                      .target(SomeApi.class, \"http://api.some.org\");\n```\n\nAnd use them together:\n\n```java\ninterface SomeApi {\n\n  @RequestLine(\"POST /json\")\n  @Headers(\"Content-Type: application/json\")\n  void json (Dto dto);\n\n  @RequestLine(\"POST /form\")\n  @Headers(\"Content-Type: application/x-www-form-urlencoded\")\n  void from (@Param(\"field1\") String field1, @Param(\"field2\") String[] values);\n}\n```\n\nYou can specify two types of encoding forms by `Content-Type` header.\n\n### application/x-www-form-urlencoded\n\n```java\ninterface SomeApi {\n\n  @RequestLine(\"POST /authorization\")\n  @Headers(\"Content-Type: application/x-www-form-urlencoded\")\n  void authorization (@Param(\"email\") String email, @Param(\"password\") String password);\n\n  // Group all parameters within a POJO\n  @RequestLine(\"POST /user\")\n  @Headers(\"Content-Type: application/x-www-form-urlencoded\")\n  void addUser (User user);\n\n  class User {\n\n    Integer id;\n\n    String name;\n  }\n}\n```\n\n### multipart/form-data\n\n```java\ninterface SomeApi {\n\n  // File parameter\n  @RequestLine(\"POST /send_photo\")\n  @Headers(\"Content-Type: multipart/form-data\")\n  void sendPhoto (@Param(\"is_public\") Boolean isPublic, @Param(\"photo\") File photo);\n\n  // byte[] parameter\n  @RequestLine(\"POST /send_photo\")\n  @Headers(\"Content-Type: multipart/form-data\")\n  void sendPhoto (@Param(\"is_public\") Boolean isPublic, @Param(\"photo\") byte[] photo);\n\n  // FormData parameter\n  @RequestLine(\"POST /send_photo\")\n  @Headers(\"Content-Type: multipart/form-data\")\n  void sendPhoto (@Param(\"is_public\") Boolean isPublic, @Param(\"photo\") FormData photo);\n\n  // Group all parameters within a POJO\n  @RequestLine(\"POST /send_photo\")\n  @Headers(\"Content-Type: multipart/form-data\")\n  void sendPhoto (MyPojo pojo);\n\n  class MyPojo {\n\n    @FormProperty(\"is_public\")\n    Boolean isPublic;\n\n    File photo;\n  }\n}\n```\n\nIn the example above, the `sendPhoto` method uses the `photo` parameter using three different supported types.\n\n* `File` will use the File's extension to detect the `Content-Type`;\n* `byte[]` will use `application/octet-stream` as `Content-Type`;\n* `FormData` will use the `FormData`'s `Content-Type` and `fileName`;\n* Client's custom POJO for grouping parameters (including types above).\n\n`FormData` is custom object that wraps a `byte[]` and defines a `Content-Type` and `fileName` like this:\n\n```java\n  FormData formData = new FormData(\"image/png\", \"filename.png\", myDataAsByteArray);\n  someApi.sendPhoto(true, formData);\n```\n\n### Spring MultipartFile and Spring Cloud Netflix @FeignClient support\n\nYou can also use Form Encoder with Spring `MultipartFile` and `@FeignClient`.\n\nInclude the dependencies to your project's pom.xml file:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.github.openfeign.form</groupId>\n    <artifactId>feign-form</artifactId>\n    <version>4.0.0</version>\n  </dependency>\n  <dependency>\n    <groupId>io.github.openfeign.form</groupId>\n    <artifactId>feign-form-spring</artifactId>\n    <version>4.0.0</version>\n  </dependency>\n</dependencies>\n```\n\n```java\n@FeignClient(\n    name = \"file-upload-service\",\n    configuration = FileUploadServiceClient.MultipartSupportConfig.class\n)\npublic interface FileUploadServiceClient extends IFileUploadServiceClient {\n\n  public class MultipartSupportConfig {\n\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    @Bean\n    public Encoder feignFormEncoder () {\n      return new SpringFormEncoder(new SpringEncoder(messageConverters));\n    }\n  }\n}\n```\n\nOr, if you don't need Spring's standard encoder:\n\n```java\n@FeignClient(\n    name = \"file-upload-service\",\n    configuration = FileUploadServiceClient.MultipartSupportConfig.class\n)\npublic interface FileUploadServiceClient extends IFileUploadServiceClient {\n\n  public class MultipartSupportConfig {\n\n    @Bean\n    public Encoder feignFormEncoder () {\n      return new SpringFormEncoder();\n    }\n  }\n}\n```\n\nThanks to [tf-haotri-pham](https://github.com/tf-haotri-pham) for his feature, which makes use of Apache commons-fileupload library, which handles the parsing of the multipart response. The body data parts are held as byte arrays in memory.\n\nTo use this feature, include SpringManyMultipartFilesReader in the list of message converters for the Decoder and have the Feign client return an array of MultipartFile:\n\n```java\n@FeignClient(\n    name = \"${feign.name}\",\n    url = \"${feign.url}\"\n    configuration = DownloadClient.ClientConfiguration.class\n)\npublic interface DownloadClient {\n\n  @RequestMapping(\"/multipart/download/{fileId}\")\n  MultipartFile[] download(@PathVariable(\"fileId\") String fileId);\n\n  class ClientConfiguration {\n\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    @Bean\n    public Decoder feignDecoder () {\n      List<HttpMessageConverter<?>> springConverters =\n            messageConverters.getObject().getConverters();\n\n      List<HttpMessageConverter<?>> decoderConverters =\n            new ArrayList<HttpMessageConverter<?>>(springConverters.size() + 1);\n\n      decoderConverters.addAll(springConverters);\n      decoderConverters.add(new SpringManyMultipartFilesReader(4096));\n\n      HttpMessageConverters httpMessageConverters = new HttpMessageConverters(decoderConverters);\n\n      return new SpringDecoder(new ObjectFactory<HttpMessageConverters>() {\n\n        @Override\n        public HttpMessageConverters getObject() {\n          return httpMessageConverters;\n        }\n      });\n    }\n  }\n}\n```\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 3.2177734375,
          "content": "# Feign Release Process\n\nThis repo uses [semantic versions](http://semver.org/). Please keep this in mind when choosing version numbers.\n\n1. **Alert others you are releasing**\n\n   There should be no commits made to master while the release is in progress (about 10 minutes). Before you start\n   a release, alert others on [gitter](https://gitter.im/OpenFeign/feign) so that they don't accidentally merge\n   anything. If they do, and the build fails because of that, you'll have to recreate the release tag described below.\n\n1. **Push a git tag**\n\n   Prepare the next release by running the [release script](scripts/release.sh) from a clean checkout of the master branch.\n   This script will:\n   * Update all versions to the next release.\n   * Tag the release.\n   * Update all versions to the next development version.\n\n1. **Wait for CI**\n\n   This part is controlled by the [CircleCI configuration](.circleci/config.yml), specifically the `deploy` job.  Which\n   creates the release artifacts and deploys them to maven central.\n\n## Credentials\n\nCredentials of various kind are needed for the release process to work. If you notice something\nfailing due to unauthorized, you will need to modify the stored values in `Sonatype` [CircleCI Context](https://circleci.com/docs/2.0/contexts/)\nfor the OpenFeign organization.\n\n`SONATYPE_USER` - the username of the Sonatype account used to upload artifacts.\n`SONATYPE_PASSWORD` - password for the Sonatype account.\n`GPG_KEY` - the gpg key used to sign the artifacts.\n`GPG_PASSPHRASE` - the passphrase for the gpg key\n\n### Troubleshooting invalid credentials\n\nIf the `deploy` job fails due to invalid credentials, double check the `SONATYPE_USER` and `SONATYPE_PASSWORD`\nvariables first and correct them.\n\n### Troubleshooting GPG issues\n\nIf the `deploy` job fails when signing artifacts, the GPG key may have expired or is incorrect.  To update the\n`GPG_KEY`, you must export a valid GPG key to ascii and replace all newline characters with `\\n`.  This will\nallow CircleCi to inject the key into the environment in a way where it can be imported again.  Use the following command\nto generate the key file.\n\n```shell\ngpg -a --export-secret-keys | cat -e | sed  | sed 's/\\$/\\\\n/g' > gpg_key.asc\n```\n\nPaste the contents of this file into the `GPG_KEY` variable in the context and try the job again.\n\n## First release of the year\n\nThe license plugin verifies license headers of files include a copyright notice indicating the years a file was affected.\nThis information is taken from git history. There's a once-a-year problem with files that include version numbers (pom.xml).\nWhen a release tag is made, it increments version numbers, then commits them to git. On the first release of the year,\nfurther commands will fail due to the version increments invalidating the copyright statement. The way to sort this out is\nthe following:\n\nBefore you do the first release of the year, move the SNAPSHOT version back and forth from whatever the current is.\nIn-between, re-apply the licenses.\n```bash\n$ ./mvnw versions:set -DnewVersion=1.3.3-SNAPSHOT -DgenerateBackupPoms=false\n$ ./mvnw com.mycila:license-maven-plugin:format\n$ ./mvnw versions:set -DnewVersion=1.3.2-SNAPSHOT -DgenerateBackupPoms=false\n$ git commit -am\"Adjusts copyright headers for this year\"\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5400390625,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 13.x    | :white_check_mark: |\n| < 13.x  | :x:                |\n\n## Reporting a Vulnerability\n\nUse this section to tell people how to report a vulnerability.\n\nTell them where to go, how often they can expect to get an update on a\nreported vulnerability, what to expect if the vulnerability is accepted or\ndeclined, etc.\n"
        },
        {
          "name": "annotation-error-decoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "apt-test-generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "codequality",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "dropwizard-metrics4",
          "type": "tree",
          "content": null
        },
        {
          "name": "dropwizard-metrics5",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-github-with-coroutine",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-github",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-wikipedia-with-springboot",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-wikipedia",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastjson2",
          "type": "tree",
          "content": null
        },
        {
          "name": "form-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "form",
          "type": "tree",
          "content": null
        },
        {
          "name": "googlehttpclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "gson",
          "type": "tree",
          "content": null
        },
        {
          "name": "hc5",
          "type": "tree",
          "content": null
        },
        {
          "name": "httpclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "hystrix",
          "type": "tree",
          "content": null
        },
        {
          "name": "jackson-jaxb",
          "type": "tree",
          "content": null
        },
        {
          "name": "jackson-jr",
          "type": "tree",
          "content": null
        },
        {
          "name": "jackson",
          "type": "tree",
          "content": null
        },
        {
          "name": "jakarta",
          "type": "tree",
          "content": null
        },
        {
          "name": "java11",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxb-jakarta",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxb",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxrs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxrs2",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxrs3",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaxrs4",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer",
          "type": "tree",
          "content": null
        },
        {
          "name": "mock",
          "type": "tree",
          "content": null
        },
        {
          "name": "moshi",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.052734375,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.3.1\n#\n# Optional ENV vars\n# -----------------\n#   JAVA_HOME - location of a JDK home dir, required when download maven via java source\n#   MVNW_REPOURL - repo url base for downloading maven distribution\n#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\n#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output\n# ----------------------------------------------------------------------------\n\nset -euf\n[ \"${MVNW_VERBOSE-}\" != debug ] || set -x\n\n# OS specific support.\nnative_path() { printf %s\\\\n \"$1\"; }\ncase \"$(uname)\" in\nCYGWIN* | MINGW*)\n  [ -z \"${JAVA_HOME-}\" ] || JAVA_HOME=\"$(cygpath --unix \"$JAVA_HOME\")\"\n  native_path() { cygpath --path --windows \"$1\"; }\n  ;;\nesac\n\n# set JAVACMD and JAVACCMD\nset_java_home() {\n  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched\n  if [ -n \"${JAVA_HOME-}\" ]; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n      JAVACCMD=\"$JAVA_HOME/jre/sh/javac\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n      JAVACCMD=\"$JAVA_HOME/bin/javac\"\n\n      if [ ! -x \"$JAVACMD\" ] || [ ! -x \"$JAVACCMD\" ]; then\n        echo \"The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run.\" >&2\n        echo \"JAVA_HOME is set to \\\"$JAVA_HOME\\\", but \\\"\\$JAVA_HOME/bin/java\\\" or \\\"\\$JAVA_HOME/bin/javac\\\" does not exist.\" >&2\n        return 1\n      fi\n    fi\n  else\n    JAVACMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v java\n    )\" || :\n    JAVACCMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v javac\n    )\" || :\n\n    if [ ! -x \"${JAVACMD-}\" ] || [ ! -x \"${JAVACCMD-}\" ]; then\n      echo \"The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run.\" >&2\n      return 1\n    fi\n  fi\n}\n\n# hash string like Java String::hashCode\nhash_string() {\n  str=\"${1:-}\" h=0\n  while [ -n \"$str\" ]; do\n    char=\"${str%\"${str#?}\"}\"\n    h=$(((h * 31 + $(LC_CTYPE=C printf %d \"'$char\")) % 4294967296))\n    str=\"${str#?}\"\n  done\n  printf %x\\\\n $h\n}\n\nverbose() { :; }\n[ \"${MVNW_VERBOSE-}\" != true ] || verbose() { printf %s\\\\n \"${1-}\"; }\n\ndie() {\n  printf %s\\\\n \"$1\" >&2\n  exit 1\n}\n\n# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties\nwhile IFS=\"=\" read -r key value; do\n  case \"${key-}\" in\n  distributionUrl) distributionUrl=\"${value-}\" ;;\n  distributionSha256Sum) distributionSha256Sum=\"${value-}\" ;;\n  esac\ndone <\"${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n[ -n \"${distributionUrl-}\" ] || die \"cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n\ncase \"${distributionUrl##*/}\" in\nmaven-mvnd-*bin.*)\n  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/\n  case \"${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)\" in\n  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;\n  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;\n  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;\n  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;\n  *)\n    echo \"Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version\" >&2\n    distributionPlatform=linux-amd64\n    ;;\n  esac\n  distributionUrl=\"${distributionUrl%-bin.*}-$distributionPlatform.zip\"\n  ;;\nmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;\n*) MVN_CMD=\"mvn${0##*/mvnw}\" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;\nesac\n\n# apply MVNW_REPOURL and calculate MAVEN_HOME\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\n[ -z \"${MVNW_REPOURL-}\" ] || distributionUrl=\"$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*\"$_MVNW_REPO_PATTERN\"}\"\ndistributionUrlName=\"${distributionUrl##*/}\"\ndistributionUrlNameMain=\"${distributionUrlName%.*}\"\ndistributionUrlNameMain=\"${distributionUrlNameMain%-bin}\"\nMAVEN_HOME=\"$HOME/.m2/wrapper/dists/${distributionUrlNameMain-}/$(hash_string \"$distributionUrl\")\"\n\nexec_maven() {\n  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :\n  exec \"$MAVEN_HOME/bin/$MVN_CMD\" \"$@\" || die \"cannot exec $MAVEN_HOME/bin/$MVN_CMD\"\n}\n\nif [ -d \"$MAVEN_HOME\" ]; then\n  verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\n  exec_maven \"$@\"\nfi\n\ncase \"${distributionUrl-}\" in\n*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;\n*) die \"distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'\" ;;\nesac\n\n# prepare tmp dir\nif TMP_DOWNLOAD_DIR=\"$(mktemp -d)\" && [ -d \"$TMP_DOWNLOAD_DIR\" ]; then\n  clean() { rm -rf -- \"$TMP_DOWNLOAD_DIR\"; }\n  trap clean HUP INT TERM EXIT\nelse\n  die \"cannot create temp dir\"\nfi\n\nmkdir -p -- \"${MAVEN_HOME%/*}\"\n\n# Download and Install Apache Maven\nverbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\nverbose \"Downloading from: $distributionUrl\"\nverbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\n\n# select .zip or .tar.gz\nif ! command -v unzip >/dev/null; then\n  distributionUrl=\"${distributionUrl%.zip}.tar.gz\"\n  distributionUrlName=\"${distributionUrl##*/}\"\nfi\n\n# verbose opt\n__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''\n[ \"${MVNW_VERBOSE-}\" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v\n\n# normalize http auth\ncase \"${MVNW_PASSWORD:+has-password}\" in\n'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nhas-password) [ -n \"${MVNW_USERNAME-}\" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nesac\n\nif [ -z \"${MVNW_USERNAME-}\" ] && command -v wget >/dev/null; then\n  verbose \"Found wget ... using wget\"\n  wget ${__MVNW_QUIET_WGET:+\"$__MVNW_QUIET_WGET\"} \"$distributionUrl\" -O \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" || die \"wget: Failed to fetch $distributionUrl\"\nelif [ -z \"${MVNW_USERNAME-}\" ] && command -v curl >/dev/null; then\n  verbose \"Found curl ... using curl\"\n  curl ${__MVNW_QUIET_CURL:+\"$__MVNW_QUIET_CURL\"} -f -L -o \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" \"$distributionUrl\" || die \"curl: Failed to fetch $distributionUrl\"\nelif set_java_home; then\n  verbose \"Falling back to use Java to download\"\n  javaSource=\"$TMP_DOWNLOAD_DIR/Downloader.java\"\n  targetZip=\"$TMP_DOWNLOAD_DIR/$distributionUrlName\"\n  cat >\"$javaSource\" <<-END\n\tpublic class Downloader extends java.net.Authenticator\n\t{\n\t  protected java.net.PasswordAuthentication getPasswordAuthentication()\n\t  {\n\t    return new java.net.PasswordAuthentication( System.getenv( \"MVNW_USERNAME\" ), System.getenv( \"MVNW_PASSWORD\" ).toCharArray() );\n\t  }\n\t  public static void main( String[] args ) throws Exception\n\t  {\n\t    setDefault( new Downloader() );\n\t    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );\n\t  }\n\t}\n\tEND\n  # For Cygwin/MinGW, switch paths to Windows format before running javac and java\n  verbose \" - Compiling Downloader.java ...\"\n  \"$(native_path \"$JAVACCMD\")\" \"$(native_path \"$javaSource\")\" || die \"Failed to compile Downloader.java\"\n  verbose \" - Running Downloader.java ...\"\n  \"$(native_path \"$JAVACMD\")\" -cp \"$(native_path \"$TMP_DOWNLOAD_DIR\")\" Downloader \"$distributionUrl\" \"$(native_path \"$targetZip\")\"\nfi\n\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\nif [ -n \"${distributionSha256Sum-}\" ]; then\n  distributionSha256Result=false\n  if [ \"$MVN_CMD\" = mvnd.sh ]; then\n    echo \"Checksum validation is not supported for maven-mvnd.\" >&2\n    echo \"Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  elif command -v sha256sum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | sha256sum -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  elif command -v shasum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | shasum -a 256 -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\" >&2\n    echo \"Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  fi\n  if [ $distributionSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified distributionSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\n# unzip and move\nif command -v unzip >/dev/null; then\n  unzip ${__MVNW_QUIET_UNZIP:+\"$__MVNW_QUIET_UNZIP\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -d \"$TMP_DOWNLOAD_DIR\" || die \"failed to unzip\"\nelse\n  tar xzf${__MVNW_QUIET_TAR:+\"$__MVNW_QUIET_TAR\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -C \"$TMP_DOWNLOAD_DIR\" || die \"failed to untar\"\nfi\nprintf %s\\\\n \"$distributionUrl\" >\"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url\"\nmv -- \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" \"$MAVEN_HOME\" || [ -d \"$MAVEN_HOME\" ] || die \"fail to move MAVEN_HOME\"\n\nclean || :\nexec_maven \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.7802734375,
          "content": "<# : batch portion\r\n@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.3.1\r\n@REM\r\n@REM Optional ENV vars\r\n@REM   MVNW_REPOURL - repo url base for downloading maven distribution\r\n@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\r\n@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@IF \"%__MVNW_ARG0_NAME__%\"==\"\" (SET __MVNW_ARG0_NAME__=%~nx0)\r\n@SET __MVNW_CMD__=\r\n@SET __MVNW_ERROR__=\r\n@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%\r\n@SET PSModulePath=\r\n@FOR /F \"usebackq tokens=1* delims==\" %%A IN (`powershell -noprofile \"& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}\"`) DO @(\r\n  IF \"%%A\"==\"MVN_CMD\" (set __MVNW_CMD__=%%B) ELSE IF \"%%B\"==\"\" (echo %%A) ELSE (echo %%A=%%B)\r\n)\r\n@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%\r\n@SET __MVNW_PSMODULEP_SAVE=\r\n@SET __MVNW_ARG0_NAME__=\r\n@SET MVNW_USERNAME=\r\n@SET MVNW_PASSWORD=\r\n@IF NOT \"%__MVNW_CMD__%\"==\"\" (%__MVNW_CMD__% %*)\r\n@echo Cannot start maven from wrapper >&2 && exit /b 1\r\n@GOTO :EOF\r\n: end batch / begin powershell #>\r\n\r\n$ErrorActionPreference = \"Stop\"\r\nif ($env:MVNW_VERBOSE -eq \"true\") {\r\n  $VerbosePreference = \"Continue\"\r\n}\r\n\r\n# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties\r\n$distributionUrl = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionUrl\r\nif (!$distributionUrl) {\r\n  Write-Error \"cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties\"\r\n}\r\n\r\nswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {\r\n  \"maven-mvnd-*\" {\r\n    $USE_MVND = $true\r\n    $distributionUrl = $distributionUrl -replace '-bin\\.[^.]*$',\"-windows-amd64.zip\"\r\n    $MVN_CMD = \"mvnd.cmd\"\r\n    break\r\n  }\r\n  default {\r\n    $USE_MVND = $false\r\n    $MVN_CMD = $script -replace '^mvnw','mvn'\r\n    break\r\n  }\r\n}\r\n\r\n# apply MVNW_REPOURL and calculate MAVEN_HOME\r\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\r\nif ($env:MVNW_REPOURL) {\r\n  $MVNW_REPO_PATTERN = if ($USE_MVND) { \"/org/apache/maven/\" } else { \"/maven/mvnd/\" }\r\n  $distributionUrl = \"$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')\"\r\n}\r\n$distributionUrlName = $distributionUrl -replace '^.*/',''\r\n$distributionUrlNameMain = $distributionUrlName -replace '\\.[^.]*$','' -replace '-bin$',''\r\n$MAVEN_HOME_PARENT = \"$HOME/.m2/wrapper/dists/$distributionUrlNameMain\"\r\n$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString(\"x2\")}) -join ''\r\n$MAVEN_HOME = \"$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME\"\r\n\r\nif (Test-Path -Path \"$MAVEN_HOME\" -PathType Container) {\r\n  Write-Verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\r\n  Write-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n  exit $?\r\n}\r\n\r\nif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {\r\n  Write-Error \"distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl\"\r\n}\r\n\r\n# prepare tmp dir\r\n$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile\r\n$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path \"$TMP_DOWNLOAD_DIR_HOLDER.dir\"\r\n$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null\r\ntrap {\r\n  if ($TMP_DOWNLOAD_DIR.Exists) {\r\n    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n    catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n  }\r\n}\r\n\r\nNew-Item -Itemtype Directory -Path \"$MAVEN_HOME_PARENT\" -Force | Out-Null\r\n\r\n# Download and Install Apache Maven\r\nWrite-Verbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\r\nWrite-Verbose \"Downloading from: $distributionUrl\"\r\nWrite-Verbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\r\n\r\n$webclient = New-Object System.Net.WebClient\r\nif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {\r\n  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)\r\n}\r\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n$webclient.DownloadFile($distributionUrl, \"$TMP_DOWNLOAD_DIR/$distributionUrlName\") | Out-Null\r\n\r\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\r\n$distributionSha256Sum = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionSha256Sum\r\nif ($distributionSha256Sum) {\r\n  if ($USE_MVND) {\r\n    Write-Error \"Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\"\r\n  }\r\n  Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash\r\n  if ((Get-FileHash \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {\r\n    Write-Error \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property.\"\r\n  }\r\n}\r\n\r\n# unzip and move\r\nExpand-Archive \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -DestinationPath \"$TMP_DOWNLOAD_DIR\" | Out-Null\r\nRename-Item -Path \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" -NewName $MAVEN_HOME_NAME | Out-Null\r\ntry {\r\n  Move-Item -Path \"$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME\" -Destination $MAVEN_HOME_PARENT | Out-Null\r\n} catch {\r\n  if (! (Test-Path -Path \"$MAVEN_HOME\" -PathType Container)) {\r\n    Write-Error \"fail to move MAVEN_HOME\"\r\n  }\r\n} finally {\r\n  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n  catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n}\r\n\r\nWrite-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n"
        },
        {
          "name": "okhttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 35.9306640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright © 2012 The Feign Authors (feign@commonhaus.dev)\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>io.github.openfeign</groupId>\n  <artifactId>parent</artifactId>\n  <version>13.6-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>Feign (Parent)</name>\n  <description>Feign makes writing java http clients easier</description>\n  <url>https://github.com/openfeign/feign</url>\n  <inceptionYear>2012</inceptionYear>\n\n  <organization>\n    <name>OpenFeign</name>\n    <url>https://github.com/openfeign</url>\n  </organization>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <developers>\n    <developer>\n      <id>velo</id>\n      <name>Marvin Herman Froeder</name>\n      <email>velo br at gmail dot com</email>\n      <url>about.me/velo</url>\n    </developer>\n    <developer>\n      <id>kdavisk6</id>\n      <name>Kevin Davis</name>\n      <email>kdavisk6@gmail.com</email>\n    </developer>\n  </developers>\n\n  <contributors>\n    <contributor>\n      <name>Adrian Cole</name>\n      <email>acole@pivotal.io</email>\n    </contributor>\n    <contributor>\n      <name>Spencer Gibb</name>\n      <email>spencer@gibb.us</email>\n    </contributor>\n    <contributor>\n      <name>Artem Labazin</name>\n      <email>xxlabaza@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Tomasz Juchniewicz</name>\n      <email>tjuchniewicz@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Guillaume Simard</name>\n    </contributor>\n    <contributor>\n      <name>Alexei KLENIN</name>\n      <email>alexei.klenin@gmail.com</email>\n    </contributor>\n  </contributors>\n\n  <modules>\n    <module>core</module>\n    <module>gson</module>\n    <module>httpclient</module>\n    <module>hc5</module>\n    <module>hystrix</module>\n    <module>jackson</module>\n    <module>jackson-jaxb</module>\n    <module>jackson-jr</module>\n    <module>jaxb</module>\n    <module>jaxb-jakarta</module>\n    <module>jaxrs</module>\n    <module>jaxrs2</module>\n    <module>jaxrs3</module>\n    <module>jaxrs4</module>\n    <module>java11</module>\n    <module>jakarta</module>\n    <module>json</module>\n    <module>okhttp</module>\n    <module>googlehttpclient</module>\n    <module>ribbon</module>\n    <module>sax</module>\n    <module>slf4j</module>\n    <module>spring</module>\n    <module>spring4</module>\n    <module>soap</module>\n    <module>soap-jakarta</module>\n    <module>reactive</module>\n    <module>dropwizard-metrics4</module>\n    <module>dropwizard-metrics5</module>\n    <module>kotlin</module>\n    <module>micrometer</module>\n    <module>mock</module>\n    <module>apt-test-generator</module>\n    <module>annotation-error-decoder</module>\n    <module>example-github</module>\n    <module>example-github-with-coroutine</module>\n    <module>example-wikipedia</module>\n    <module>example-wikipedia-with-springboot</module>\n    <module>benchmark</module>\n    <module>moshi</module>\n    <module>fastjson2</module>\n    <module>form</module>\n    <module>form-spring</module>\n    <module>vertx</module>\n  </modules>\n\n  <scm>\n    <connection>scm:git:git@github.com:OpenFeign/feign.git</connection>\n    <developerConnection>scm:git:git@github.com:OpenFeign/feign.git</developerConnection>\n    <tag>HEAD</tag>\n    <url>https://github.com/openfeign/feign</url>\n  </scm>\n\n  <issueManagement>\n    <system>Github</system>\n    <url>https://github.com/openfeign/feign/issues</url>\n  </issueManagement>\n\n  <distributionManagement>\n    <repository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n    <snapshotRepository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>\n\n    <moditect.skip>false</moditect.skip>\n    <!-- specifying jvm arguments -->\n    <jvm.options>-Duser.language=en</jvm.options>\n\n    <!-- default bytecode version for src/main -->\n    <main.java.version>1.8</main.java.version>\n    <latest.java.version>21</latest.java.version>\n\n    <!-- default bytecode version for src/test -->\n    <maven.compiler.source>${main.java.version}</maven.compiler.source>\n    <maven.compiler.target>${main.java.version}</maven.compiler.target>\n\n    <okhttp3.version>4.12.0</okhttp3.version>\n    <guava.version>33.4.0-jre</guava.version>\n    <googlehttpclient.version>1.45.3</googlehttpclient.version>\n    <gson.version>2.11.0</gson.version>\n    <moshi.version>1.15.2</moshi.version>\n    <slf4j.version>2.0.16</slf4j.version>\n    <json.version>20250107</json.version>\n    <springboot.version>3.3.5</springboot.version>\n\n    <junit5.version>5.11.4</junit5.version>\n    <jackson.version>2.18.2</jackson.version>\n    <assertj.version>3.27.2</assertj.version>\n    <mockito.version>5.15.2</mockito.version>\n    <fastjson2.version>2.0.53</fastjson2.version>\n\n    <git-code-format-maven-plugin.version>5.3</git-code-format-maven-plugin.version>\n    <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n    <maven-install-plugin.version>3.1.3</maven-install-plugin.version>\n    <maven-source-plugin.version>3.3.1</maven-source-plugin.version>\n    <maven-javadoc-plugin.version>3.11.2</maven-javadoc-plugin.version>\n    <license-maven-plugin.version>4.6</license-maven-plugin.version>\n    <maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>\n    <maven-release-plugin.version>3.1.1</maven-release-plugin.version>\n    <maven-bundle-plugin.version>6.0.0</maven-bundle-plugin.version>\n    <centralsync-maven-plugin.version>0.1.1</centralsync-maven-plugin.version>\n    <maven-surefire-plugin.version>3.5.2</maven-surefire-plugin.version>\n    <bom-generator.version>0.200.0</bom-generator.version>\n    <bom.template.file.path>file://${project.basedir}/src/config/bom.xml</bom.template.file.path>\n    <maven-scm-plugin.version>2.1.0</maven-scm-plugin.version>\n    <maven-versions-plugin.version>2.18.0</maven-versions-plugin.version>\n    <maven-gpg-plugin.version>3.2.7</maven-gpg-plugin.version>\n    <maven-deploy-plugin.version>3.1.3</maven-deploy-plugin.version>\n    <docker-maven-plugin.version>1.2.2</docker-maven-plugin.version>\n    <moditect-maven-plugin.version>1.2.2.Final</moditect-maven-plugin.version>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-core</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-core</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-gson</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-httpclient</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-hystrix</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jackson-jaxb</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jackson</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxb</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs</artifactId>\n        <version>${project.version}</version>\n        <classifier>jakarta</classifier>\n        <exclusions>\n          <exclusion>\n            <groupId>javax.ws.rs</groupId>\n            <artifactId>jsr311-api</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs2</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs2</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs2</artifactId>\n        <version>${project.version}</version>\n        <classifier>jakarta</classifier>\n        <exclusions>\n          <exclusion>\n            <groupId>javax.ws.rs</groupId>\n            <artifactId>javax.ws.rs-api</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>${project.groupId}</groupId>\n            <artifactId>feign-jaxrs</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-jaxrs3</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-mock</artifactId>\n        <version>${project.version}</version>\n        <scope>test</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-okhttp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-ribbon</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-sax</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-slf4j</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-kotlin</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-micrometer</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-form</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>feign-form-spring</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.junit</groupId>\n        <artifactId>junit-bom</artifactId>\n        <version>${junit5.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>${gson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.squareup.moshi</groupId>\n        <artifactId>moshi</artifactId>\n        <version>${moshi.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.assertj</groupId>\n        <artifactId>assertj-core</artifactId>\n        <version>${assertj.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.squareup.okhttp3</groupId>\n        <artifactId>okhttp-bom</artifactId>\n        <version>${okhttp3.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>com.google.http-client</groupId>\n        <artifactId>google-http-client</artifactId>\n        <version>${googlehttpclient.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.json</groupId>\n        <artifactId>json</artifactId>\n        <version>${json.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>${jackson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>${jackson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>${jackson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.jr</groupId>\n        <artifactId>jackson-jr-objects</artifactId>\n        <version>${jackson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.jr</groupId>\n        <artifactId>jackson-jr-annotation-support</artifactId>\n        <version>${jackson.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-simple</artifactId>\n        <version>${slf4j.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-nop</artifactId>\n        <version>${slf4j.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.alibaba.fastjson2</groupId>\n        <artifactId>fastjson2</artifactId>\n        <version>${fastjson2.version}</version>\n      </dependency>\n\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <defaultGoal>clean install</defaultGoal>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${maven-jar-plugin.version}</version>\n          <configuration>\n            <archive>\n              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n            </archive>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>${maven-surefire-plugin.version}</version>\n          <configuration>\n            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n            <trimStackTrace>false</trimStackTrace>\n            <argLine>${jvm.options}</argLine>\n            <excludes>\n              <exclude></exclude>\n            </excludes>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <version>${maven-surefire-plugin.version}</version>\n          <configuration>\n            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n            <trimStackTrace>false</trimStackTrace>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n        <version>${moditect-maven-plugin.version}</version>\n        <configuration>\n          <skip>${moditect.skip}</skip>\n          <overwriteExistingFiles>true</overwriteExistingFiles>\n          <module>\n            <moduleInfo>\n              <!-- module name will be derived from filename -->\n              <!-- export everything -->\n              <exports>*;</exports>\n              <!-- declare services consumed by the artifact -->\n              <addServiceUses>true</addServiceUses>\n            </moduleInfo>\n          </module>\n          <jdepsExtraArgs>\n            <arg>--multi-release=9</arg>\n          </jdepsExtraArgs>\n        </configuration>\n        <executions>\n          <execution>\n            <id>add-module-infos</id>\n            <goals>\n              <goal>add-module-info</goal>\n            </goals>\n            <phase>package</phase>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <inherited>true</inherited>\n        <configuration>\n          <source>${main.java.version}</source>\n          <target>${main.java.version}</target>\n        </configuration>\n        <executions>\n          <!-- Ensure main source tree compiles to Java ${main.java.version} bytecode. -->\n          <execution>\n            <id>default-compile</id>\n            <goals>\n              <goal>compile</goal>\n            </goals>\n            <phase>compile</phase>\n            <configuration>\n              <source>${main.java.version}</source>\n              <target>${main.java.version}</target>\n            </configuration>\n          </execution>\n          <execution>\n            <id>default-testCompile</id>\n            <goals>\n              <goal>testCompile</goal>\n            </goals>\n            <phase>test-compile</phase>\n            <configuration>\n              <fork>true</fork>\n              <compilerArgs>\n                <arg>-parameters</arg>\n              </compilerArgs>\n              <source>${latest.java.version}</source>\n              <target>${latest.java.version}</target>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-install-plugin</artifactId>\n        <version>${maven-install-plugin.version}</version>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>${maven-release-plugin.version}</version>\n        <configuration>\n          <useReleaseProfile>false</useReleaseProfile>\n          <releaseProfiles>release</releaseProfiles>\n          <autoVersionSubmodules>true</autoVersionSubmodules>\n          <tagNameFormat>@{project.version}</tagNameFormat>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>io.zipkin.centralsync-maven-plugin</groupId>\n        <artifactId>centralsync-maven-plugin</artifactId>\n        <version>${centralsync-maven-plugin.version}</version>\n        <configuration>\n          <subject>openfeign</subject>\n          <repo>maven</repo>\n          <packageName>feign</packageName>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <version>${maven-bundle-plugin.version}</version>\n        <executions>\n          <execution>\n            <id>bundle-manifest</id>\n            <goals>\n              <goal>manifest</goal>\n            </goals>\n            <phase>process-classes</phase>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>com.mycila</groupId>\n        <artifactId>license-maven-plugin</artifactId>\n        <version>${license-maven-plugin.version}</version>\n        <configuration>\n          <properties>\n            <owner>The Feign Authors</owner>\n            <email>feign@commonhaus.dev</email>\n          </properties>\n          <licenseSets>\n            <licenseSet>\n              <header>com/mycila/maven/plugin/license/templates/APACHE-2.txt</header>\n\n              <excludes>\n                <exclude>.travis.yml</exclude>\n                <exclude>.editorconfig</exclude>\n                <exclude>.gitattributes</exclude>\n                <exclude>.gitignore</exclude>\n                <exclude>.mvn/**</exclude>\n                <exclude>mvnw*</exclude>\n                <exclude>etc/header.txt</exclude>\n                <exclude>**/.idea/**</exclude>\n                <exclude>**/target/**</exclude>\n                <exclude>**/scripts/**</exclude>\n                <exclude>**/src/config/**</exclude>\n                <exclude>**/codequality/**</exclude>\n                <exclude>LICENSE</exclude>\n                <exclude>NOTICE</exclude>\n                <exclude>OSSMETADATA</exclude>\n                <exclude>**/*.md</exclude>\n                <exclude>**/*.asciidoc</exclude>\n                <exclude>**/*.iuml</exclude>\n                <exclude>bnd.bnd</exclude>\n                <exclude>travis/**</exclude>\n                <exclude>src/test/resources/**</exclude>\n                <exclude>src/main/resources/**</exclude>\n                <exclude>.circleci/**</exclude>\n              </excludes>\n            </licenseSet>\n          </licenseSets>\n          <strictCheck>true</strictCheck>\n          <mapping>\n            <java>SLASHSTAR_STYLE</java>\n          </mapping>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>com.mycila</groupId>\n            <artifactId>license-maven-plugin-git</artifactId>\n            <version>${license-maven-plugin.version}</version>\n          </dependency>\n        </dependencies>\n        <executions>\n          <execution>\n            <goals>\n              <goal>check</goal>\n            </goals>\n            <phase>validate</phase>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>com.cosium.code</groupId>\n        <artifactId>git-code-format-maven-plugin</artifactId>\n        <version>${git-code-format-maven-plugin.version}</version>\n        <dependencies>\n          <!-- Enable https://github.com/google/google-java-format -->\n          <dependency>\n            <groupId>com.cosium.code</groupId>\n            <artifactId>google-java-format</artifactId>\n            <version>${git-code-format-maven-plugin.version}</version>\n          </dependency>\n        </dependencies>\n        <executions>\n          <!-- On commit, format the modified files -->\n          <execution>\n            <id>install-formatter-hook</id>\n            <goals>\n              <goal>install-hooks</goal>\n            </goals>\n            <inherited>false</inherited>\n          </execution>\n          <!-- On Maven verify phase, fail if any file (including unmodified) is\n            badly formatted -->\n          <execution>\n            <id>validate-code-format</id>\n            <goals>\n              <goal>validate-code-format</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>de.qaware.maven</groupId>\n        <artifactId>go-offline-maven-plugin</artifactId>\n        <version>1.2.8</version>\n        <configuration>\n          <dynamicDependencies>\n            <DynamicDependency>\n              <groupId>org.apache.maven.surefire</groupId>\n              <artifactId>surefire-junit4</artifactId>\n              <version>${maven-surefire-plugin.version}</version>\n              <repositoryType>PLUGIN</repositoryType>\n            </DynamicDependency>\n            <DynamicDependency>\n              <groupId>org.codehaus.mojo.signature</groupId>\n              <artifactId>java18</artifactId>\n              <version>1.0</version>\n              <type>signature</type>\n              <repositoryType>MAIN</repositoryType>\n            </DynamicDependency>\n          </dynamicDependencies>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>com.github.ekryd.sortpom</groupId>\n        <artifactId>sortpom-maven-plugin</artifactId>\n        <version>4.0.0</version>\n        <configuration>\n          <keepBlankLines>true</keepBlankLines>\n          <lineSeparator>\\n</lineSeparator>\n          <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>\n          <createBackupFile>false</createBackupFile>\n        </configuration>\n        <executions>\n          <execution>\n            <id>format</id>\n            <goals>\n              <goal>sort</goal>\n            </goals>\n            <phase>verify</phase>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>io.sundr</groupId>\n        <artifactId>sundr-maven-plugin</artifactId>\n        <version>${bom-generator.version}</version>\n        <inherited>false</inherited>\n        <configuration>\n          <bomTemplateUrl>${bom.template.file.path}</bomTemplateUrl>\n          <boms>\n            <bom>\n              <artifactId>feign-bom</artifactId>\n              <name>Feign (Bill Of Materials)</name>\n\n              <properties>\n                <license.skip>true</license.skip>\n              </properties>\n\n              <modules>\n                <includes>\n                  <include>io.github.openfeign:*</include>\n                </includes>\n                <excludes>\n                  <exclude>*:feign-example-*</exclude>\n                  <exclude>*:feign-benchmark</exclude>\n                </excludes>\n              </modules>\n            </bom>\n          </boms>\n        </configuration>\n        <executions>\n          <execution>\n            <goals>\n              <goal>generate-bom</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>versions-maven-plugin</artifactId>\n        <version>${maven-versions-plugin.version}</version>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-deploy-plugin</artifactId>\n        <version>${maven-deploy-plugin.version}</version>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-scm-plugin</artifactId>\n        <version>${maven-scm-plugin.version}</version>\n        <configuration>\n          <tag>${project.version}</tag>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.sonatype.plugins</groupId>\n        <artifactId>nexus-staging-maven-plugin</artifactId>\n        <version>1.7.0</version>\n        <extensions>true</extensions>\n        <configuration>\n          <serverId>ossrh</serverId>\n          <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n          <autoReleaseAfterClose>true</autoReleaseAfterClose>\n          <stagingProgressTimeoutMinutes>15</stagingProgressTimeoutMinutes>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <version>3.5.0</version>\n        <executions>\n          <execution>\n            <id>enforce-no-repositories</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireNoRepositories>\n                  <message>Feign should only depend on artifacts readily available on maven central</message>\n                </requireNoRepositories>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>quickbuild</id>\n      <properties>\n        <skipTests>true</skipTests>\n        <enforcer.skip>true</enforcer.skip>\n        <animal.sniffer.skip>true</animal.sniffer.skip>\n        <japicmp.skip>true</japicmp.skip>\n        <maven.javadoc.skip>true</maven.javadoc.skip>\n        <maven.javadoc.skip>true</maven.javadoc.skip>\n        <formatter.skip>true</formatter.skip>\n        <license.skip>true</license.skip>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>windows</id>\n      <activation>\n        <os>\n          <family>Windows</family>\n        </os>\n      </activation>\n      <properties>\n        <bom.template.file.path>file:///${project.basedir}/src/config/bom.xml</bom.template.file.path>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <!-- Creates source jar -->\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>${maven-source-plugin.version}</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>${maven-javadoc-plugin.version}</version>\n            <configuration>\n              <failOnError>false</failOnError>\n            </configuration>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n                <phase>package</phase>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>${maven-gpg-plugin.version}</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n                <phase>verify</phase>\n                <configuration>\n                  <gpgArguments>\n                    <arg>--pinentry-mode</arg>\n                    <arg>loopback</arg>\n                  </gpgArguments>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>dev</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>com.cosium.code</groupId>\n            <artifactId>git-code-format-maven-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>format-code</id>\n                <goals>\n                  <goal>format-code</goal>\n                </goals>\n                <phase>initialize</phase>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>openrewrite</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.openrewrite.maven</groupId>\n            <artifactId>rewrite-maven-plugin</artifactId>\n            <version>5.47.3</version>\n\n            <dependencies>\n              <dependency>\n                <groupId>org.openrewrite.recipe</groupId>\n                <artifactId>rewrite-testing-frameworks</artifactId>\n                <version>2.24.1</version>\n              </dependency>\n              <dependency>\n                <groupId>org.openrewrite.recipe</groupId>\n                <artifactId>rewrite-migrate-java</artifactId>\n                <version>2.31.1</version>\n              </dependency>\n            </dependencies>\n\n            <executions>\n              <execution>\n                <id>tests</id>\n                <goals>\n                  <goal>runNoFork</goal>\n                </goals>\n                <phase>verify</phase>\n                <configuration>\n                  <exportDatatables>true</exportDatatables>\n                  <activeRecipes>\n                    <recipe>org.openrewrite.java.testing.hamcrest.MigrateHamcrestToAssertJ</recipe>\n                    <recipe>org.openrewrite.java.testing.junit5.AssertToAssertions</recipe>\n                    <recipe>org.openrewrite.java.testing.assertj.JUnitToAssertj</recipe>\n                    <recipe>org.openrewrite.java.testing.assertj.Assertj</recipe>\n                    <recipe>org.openrewrite.java.migrate.UpgradeToJava21</recipe>\n                  </activeRecipes>\n                  <exclusions>\n                    <exclusion>**/src/main/java/**</exclusion>\n                    <exclusion>pom.xml</exclusion>\n                  </exclusions>\n                </configuration>\n              </execution>\n              <execution>\n                <id>sources</id>\n                <goals>\n                  <goal>runNoFork</goal>\n                </goals>\n                <phase>verify</phase>\n                <configuration>\n                  <exportDatatables>true</exportDatatables>\n                  <activeRecipes>\n                    <recipe>org.openrewrite.java.migrate.UpgradeToJava8</recipe>\n                  </activeRecipes>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>toolchain</id>\n      <activation>\n        <property>\n          <name>!toolchain.skip</name>\n        </property>\n      </activation>\n\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-toolchains-plugin</artifactId>\n            <version>3.2.0</version>\n            <executions>\n              <execution>\n                <goals>\n                  <goal>toolchain</goal>\n                </goals>\n                <configuration>\n                  <toolchains>\n                    <jdk>\n                      <version>${main.java.version}</version>\n                    </jdk>\n                  </toolchains>\n                </configuration>\n              </execution>\n              <execution>\n                <id>test</id>\n                <goals>\n                  <goal>toolchain</goal>\n                </goals>\n                <phase>generate-test-sources</phase>\n                <configuration>\n                  <toolchains>\n                    <jdk>\n                      <version>${latest.java.version}</version>\n                    </jdk>\n                  </toolchains>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n              <jdkToolchain>\n                <version>${latest.java.version}</version>\n              </jdkToolchain>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-failsafe-plugin</artifactId>\n            <configuration>\n              <jdkToolchain>\n                <version>${latest.java.version}</version>\n              </jdkToolchain>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "reactive",
          "type": "tree",
          "content": null
        },
        {
          "name": "ribbon",
          "type": "tree",
          "content": null
        },
        {
          "name": "sax",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "slf4j",
          "type": "tree",
          "content": null
        },
        {
          "name": "soap-jakarta",
          "type": "tree",
          "content": null
        },
        {
          "name": "soap",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring4",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vertx",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}