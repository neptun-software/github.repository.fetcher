{
  "metadata": {
    "timestamp": 1736708640520,
    "page": 14,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "perwendel/spark",
      "stars": 9656,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1123046875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12109375,
          "content": "target\nbin\n.settings\n.externalToolBuilders\n.project\n.classpath\n.pdm\n.idea\n*.iml\n*.ipr\n*.iws\nreports\n.java-version\n.DS_Store\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0830078125,
          "content": "language: java\ndist: trusty\njdk:\n  - oraclejdk8\n\ncache:\n  directories:\n  - $HOME/.m2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 5.0302734375,
          "content": "====\n   Copyright 2011-2015 Per Wendel\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n====\n\nQuestions about licensing should be directed to per.i.wendel@gmail.com.\n\nThird Party Contributions:\n\nAPACHE SOFTWARE FOUNDATION\n\nThis product includes software developed by the Apache Software Foundation which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* IOUtils.java. Copyright 2001-2008 The Apache Software Foundation\n\nApache Commons IO\nCopyright 2001-2008 The Apache Software Foundation\n\nThis product includes software developed by\nThe Apache Software Foundation (http://www.apache.org/).\n\nCHRIS BEAMS\nThis product includes software developed by Chris Beams which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* ObjectUtils.java. Copyright 2002-2013 Chris Beams\n\nSAM BRANNEN\nThis product includes software developed by Sam Brannen which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* ClassPathResource.java. Copyright 2002-2012 Sam Brannen\n* ClassUtils.java. Copyright 2002-2014 Sam Brannen\n\nKEITH DONALD\nThis product includes the following software developed by Keith Donald which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* Assert.java. Copyright 2002-2013 Keith Donald\n* ClassUtils.java. Copyright 2002-2014 Keith Donald\n* ObjectUtils.java. Copyright 2002-2013 Keith Donald\n* StringUtils.java. Copyright 2002-2013 Keith Donald\n\nRICK EVANS\nThis product includes the following software developed by Rick Evans which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* StringUtils.java. Copyright 2002-2013 Rick Evans\n\nJUERGEN HOELLER\nThis product includes the following software developed by Juergen Hoeller which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* AbstractFileResolvingResource.java. Copyright 2002-2013 Juergen Hoeller\n* AbstractResource.java. Copyright 2002-2010 Juergen Hoeller\n* Assert.java. Copyright 2002-2013 Juergen Hoeller\n* ClassPathResource.java. Copyright 2002-2012 Juergen Hoeller\n* ClassUtils.java. Copyright 2002-2014 Juergen Hoeller\n* CollectionUtils.java. Copyright 2002-2013 Juergen Hoeller\n* ObjectUtils.java. Copyright 2002-2013 Juergen Hoeller\n* InputStreamResource.java. Copyright 2002-2012 Juergen Hoeller\n* Resource.java. Copyright 2002-2012 Juergen Hoeller\n* ResourceUtils.java. Copyright 2002-2013 Juergen Hoeller\n* StringUtils.java. Copyright 2002-2013 Juergen Hoeller\n\nROB HARROP\nThis product includes the following software developed by Rob Harrop which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* Assert.java. Copyright 2002-2013 Rob Harrop\n* ClassUtils.java. Copyright 2002-2014 Rob Harrop\n* CollectionUtils.java. Copyright 2002-2013 Rob Harrop\n* ObjectUtils.java. Copyright 2002-2013 Rob Harrop\n* StringUtils.java. Copyright 2002-2013 Rob Harrop\n\nROD JOHNSON\nThis product includes the following software developed by Rod Johnson which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* ObjectUtils.java. Copyright 2002-2013 Rod Johnson\n* StringUtils.java. Copyright 2002-2013 Rod Johnson\n\nMORT BAY CONSULTING PTY. LTD.\nThis product includes software developed by Mort Bay Consulting Pty. Ltd. which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0) and the Eclipse Public License, Version 1.0\n(http://www.eclipse.org/legal/epl-v10.html).\n\n* AbstractResourceHandler.java. Copyright 1995-2013 Mort Bay Consulting Pty. Ltd.\n* ClassPathResourceHandler.java. Copyright 1995-2013 Mort Bay Consulting Pty. Ltd.\n* ExternalResourceHandler.java. Copyright 1995-2013 Mort Bay Consulting Pty. Ltd.\n* UriPath.java. Copyright 1995-2013 Mort Bay Consulting Pty. Ltd.\n\nARJEN POUTSMA\nThis product includes the following software developed by Arjen Poutsma which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* CollectionUtils.java. Copyright 2002-2013 Arjen Poutsma\n* StringUtils.java. Copyright 2002-2013 Arjen Poutsma\n\nCOLIN SAMPALEANU\n\nThis product includes the following software developed by Colin Sampaleanu which is licensed under the terms of the\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).\n\n* Assert.java. Copyright 2002-2013 Colin Sampaleanu\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.4794921875,
          "content": "[![](https://img.shields.io/travis/perwendel/spark.svg)](https://travis-ci.org/perwendel/spark)\n[![](https://img.shields.io/github/license/perwendel/spark.svg)](./LICENSE)\n[![](https://img.shields.io/maven-central/v/com.sparkjava/spark-core.svg)](http://mvnrepository.com/artifact/com.sparkjava/spark-core)\n\nSpark - a tiny web framework for Java 8\n==============================================\n\n**Spark 2.9.4 is out!!**\n```xml\n<dependency>\n    <groupId>com.sparkjava</groupId>\n    <artifactId>spark-core</artifactId>\n    <version>2.9.4</version>\n</dependency>\n```\n\nSponsor the project here https://github.com/sponsors/perwendel\n\nFor documentation please go to: http://sparkjava.com/documentation\n\nFor usage questions, please use [stack overflow with the “spark-java” tag](http://stackoverflow.com/questions/tagged/spark-java) \n\nJavadoc: http://javadoc.io/doc/com.sparkjava/spark-core\n\nWhen committing to the project please use Spark format configured in https://github.com/perwendel/spark/blob/master/config/spark_formatter_intellij.xml\n\nGetting started\n---------------\n\n```xml\n<dependency>\n    <groupId>com.sparkjava</groupId>\n    <artifactId>spark-core</artifactId>\n    <version>2.9.4</version>\n</dependency>\n```\n\n```java\nimport static spark.Spark.*;\n\npublic class HelloWorld {\n    public static void main(String[] arg){\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n    }\n}\n```\n\nView at: http://localhost:4567/hello\n\n\nCheck out and try the examples in the source code.\nYou can also check out the javadoc. After getting the source from\n[github](https://github.com/perwendel/spark) run: \n\n    mvn javadoc:javadoc\n\nThe result is put in /target/site/apidocs\n\nExamples\n---------\n\nSimple example showing some basic functionality\n\n```java\nimport static spark.Spark.*;\n\n/**\n * A simple example just showing some basic functionality\n */\npublic class SimpleExample {\n\n    public static void main(String[] args) {\n\n        //  port(5678); <- Uncomment this if you want spark to listen to port 5678 instead of the default 4567\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n\n        post(\"/hello\", (request, response) ->\n            \"Hello World: \" + request.body()\n        );\n\n        get(\"/private\", (request, response) -> {\n            response.status(401);\n            return \"Go Away!!!\";\n        });\n\n        get(\"/users/:name\", (request, response) -> \"Selected user: \" + request.params(\":name\"));\n\n        get(\"/news/:section\", (request, response) -> {\n            response.type(\"text/xml\");\n            return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><news>\" + request.params(\"section\") + \"</news>\";\n        });\n\n        get(\"/protected\", (request, response) -> {\n            halt(403, \"I don't think so!!!\");\n            return null;\n        });\n\n        get(\"/redirect\", (request, response) -> {\n            response.redirect(\"/news/world\");\n            return null;\n        });\n\n        get(\"/\", (request, response) -> \"root\");\n    }\n}\n\n```\n\n-------------------------------\n\nA simple CRUD example showing how to create, get, update and delete book resources\n\n```java\nimport static spark.Spark.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\n/**\n * A simple CRUD example showing how to create, get, update and delete book resources.\n */\npublic class Books {\n\n    /**\n     * Map holding the books\n     */\n    private static Map<String, Book> books = new HashMap<String, Book>();\n\n    public static void main(String[] args) {\n        final Random random = new Random();\n\n        // Creates a new book resource, will return the ID to the created resource\n        // author and title are sent in the post body as x-www-urlencoded values e.g. author=Foo&title=Bar\n        // you get them by using request.queryParams(\"valuename\")\n        post(\"/books\", (request, response) -> {\n            String author = request.queryParams(\"author\");\n            String title = request.queryParams(\"title\");\n            Book book = new Book(author, title);\n\n            int id = random.nextInt(Integer.MAX_VALUE);\n            books.put(String.valueOf(id), book);\n\n            response.status(201); // 201 Created\n            return id;\n        });\n\n        // Gets the book resource for the provided id\n        get(\"/books/:id\", (request, response) -> {\n            Book book = books.get(request.params(\":id\"));\n            if (book != null) {\n                return \"Title: \" + book.getTitle() + \", Author: \" + book.getAuthor();\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Updates the book resource for the provided id with new information\n        // author and title are sent in the request body as x-www-urlencoded values e.g. author=Foo&title=Bar\n        // you get them by using request.queryParams(\"valuename\")\n        put(\"/books/:id\", (request, response) -> {\n            String id = request.params(\":id\");\n            Book book = books.get(id);\n            if (book != null) {\n                String newAuthor = request.queryParams(\"author\");\n                String newTitle = request.queryParams(\"title\");\n                if (newAuthor != null) {\n                    book.setAuthor(newAuthor);\n                }\n                if (newTitle != null) {\n                    book.setTitle(newTitle);\n                }\n                return \"Book with id '\" + id + \"' updated\";\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Deletes the book resource for the provided id\n        delete(\"/books/:id\", (request, response) -> {\n            String id = request.params(\":id\");\n            Book book = books.remove(id);\n            if (book != null) {\n                return \"Book with id '\" + id + \"' deleted\";\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Gets all available book resources (ids)\n        get(\"/books\", (request, response) -> {\n            String ids = \"\";\n            for (String id : books.keySet()) {\n                ids += id + \" \";\n            }\n            return ids;\n        });\n    }\n\n    public static class Book {\n\n        public String author, title;\n\n        public Book(String author, String title) {\n            this.author = author;\n            this.title = title;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n\n        public void setAuthor(String author) {\n            this.author = author;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public void setTitle(String title) {\n            this.title = title;\n        }\n    }\n}\n```\n\n---------------------------------\n\nExample showing a very simple (and stupid) authentication filter that is executed before all other resources\n\n```java\nimport static spark.Spark.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Example showing a very simple (and stupid) authentication filter that is\n * executed before all other resources.\n *\n * When requesting the resource with e.g.\n *     http://localhost:4567/hello?user=some&password=guy\n * the filter will stop the execution and the client will get a 401 UNAUTHORIZED with the content 'You are not welcome here'\n *\n * When requesting the resource with e.g.\n *     http://localhost:4567/hello?user=foo&password=bar\n * the filter will accept the request and the request will continue to the /hello route.\n *\n * Note: There is a second \"before filter\" that adds a header to the response\n * Note: There is also an \"after filter\" that adds a header to the response\n */\npublic class FilterExample {\n\n    private static Map<String, String> usernamePasswords = new HashMap<String, String>();\n\n    public static void main(String[] args) {\n\n        usernamePasswords.put(\"foo\", \"bar\");\n        usernamePasswords.put(\"admin\", \"admin\");\n\n        before((request, response) -> {\n            String user = request.queryParams(\"user\");\n            String password = request.queryParams(\"password\");\n\n            String dbPassword = usernamePasswords.get(user);\n            if (!(password != null && password.equals(dbPassword))) {\n                halt(401, \"You are not welcome here!!!\");\n            }\n        });\n\n        before(\"/hello\", (request, response) -> response.header(\"Foo\", \"Set by second before filter\"));\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n\n        after(\"/hello\", (request, response) -> response.header(\"spark\", \"added by after-filter\"));\n\n        afterAfter(\"/hello\", (request, response) -> response.header(\"finally\", \"executed even if exception is throw\"));\n\n        afterAfter((request, response) -> response.header(\"finally\", \"executed after any route even if exception is throw\"));\n    }\n}\n```\n\n---------------------------------\n\nExample showing how to use attributes\n\n```java\nimport static spark.Spark.after;\nimport static spark.Spark.get;\n\n/**\n * Example showing the use of attributes\n */\npublic class FilterExampleAttributes {\n\n    public static void main(String[] args) {\n        get(\"/hi\", (request, response) -> {\n            request.attribute(\"foo\", \"bar\");\n            return null;\n        });\n\n        after(\"/hi\", (request, response) -> {\n            for (String attr : request.attributes()) {\n                System.out.println(\"attr: \" + attr);\n            }\n        });\n\n        after(\"/hi\", (request, response) -> {\n            Object foo = request.attribute(\"foo\");\n            response.body(asXml(\"foo\", foo));\n        });\n    }\n\n    private static String asXml(String name, Object value) {\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><\" + name +\">\" + value + \"</\"+ name + \">\";\n    }\n}\n```\n\n\n---------------------------------\n\nExample showing how to serve static resources\n\n```java\nimport static spark.Spark.*;\n\npublic class StaticResources {\n\n    public static void main(String[] args) {\n\n        // Will serve all static file are under \"/public\" in classpath if the route isn't consumed by others routes.\n        // When using Maven, the \"/public\" folder is assumed to be in \"/main/resources\"\n        staticFileLocation(\"/public\");\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n    }\n}\n```\n---------------------------------\n\nExample showing how to define content depending on accept type\n\n```java\nimport static spark.Spark.*;\n\npublic class JsonAcceptTypeExample {\n\n    public static void main(String args[]) {\n\n        //Running curl -i -H \"Accept: application/json\" http://localhost:4567/hello json message is read.\n        //Running curl -i -H \"Accept: text/html\" http://localhost:4567/hello HTTP 404 error is thrown.\n        get(\"/hello\", \"application/json\", (request, response) -> \"{\\\"message\\\": \\\"Hello World\\\"}\");\n    }\n} \n```\n---------------------------------\n\nExample showing how to render a view from a template. Note that we are using `ModelAndView` class for setting the object and name/location of template. \n\nFirst of all we define a class which handles and renders output depending on template engine used. In this case [FreeMarker](http://freemarker.incubator.apache.org/).\n\n\n```java\npublic class FreeMarkerTemplateEngine extends TemplateEngine {\n\n    private Configuration configuration;\n\n    protected FreeMarkerTemplateEngine() {\n        this.configuration = createFreemarkerConfiguration();\n    }\n\n    @Override\n    public String render(ModelAndView modelAndView) {\n        try {\n            StringWriter stringWriter = new StringWriter();\n\n            Template template = configuration.getTemplate(modelAndView.getViewName());\n            template.process(modelAndView.getModel(), stringWriter);\n\n            return stringWriter.toString();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(e);\n        } catch (TemplateException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private Configuration createFreemarkerConfiguration() {\n        Configuration retVal = new Configuration();\n        retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, \"freemarker\");\n        return retVal;\n    }\n}\n```\n\nThen we can use it to generate our content. Note how we are setting model data and view name. Because we are using FreeMarker, in this case a `Map` and the name of the template is required:\n\n```java\npublic class FreeMarkerExample {\n\n    public static void main(String args[]) {\n\n        get(\"/hello\", (request, response) -> {\n            Map<String, Object> attributes = new HashMap<>();\n            attributes.put(\"message\", \"Hello FreeMarker World\");\n\n            // The hello.ftl file is located in directory:\n            // src/test/resources/spark/examples/templateview/freemarker\n            return modelAndView(attributes, \"hello.ftl\");\n        }, new FreeMarkerTemplateEngine());\n    }\n}\n```\n\n---------------------------------\n\nExample of using Transformer.\n\nFirst of all we define the transformer class, in this case a class which transforms an object to JSON format using gson API.\n\n```java\npublic class JsonTransformer implements ResponseTransformer {\n\n\tprivate Gson gson = new Gson();\n\n\t@Override\n\tpublic String render(Object model) {\n\t\treturn gson.toJson(model);\n\t}\n}\n```\n\nAnd then the code which return a simple POJO to be transformed to JSON:\n\n```java\npublic class TransformerExample {\n\n    public static void main(String args[]) {\n        get(\"/hello\", \"application/json\", (request, response) -> {\n            return new MyMessage(\"Hello World\");\n        }, new JsonTransformer());\n    }\n}\n```\n\nDebugging\n------------------\nSee [Spark-debug-tools](https://github.com/perwendel/spark-debug-tools) as a separate module.\n"
        },
        {
          "name": "changeset",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 8.8994140625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven2 Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n  # TODO classpath?\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`which java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\"\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        wget \"$jarUrl\" -O \"$wrapperJarPath\"\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        curl -o \"$wrapperJarPath\" \"$jarUrl\"\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 5.8310546875,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Maven2 Start Up Batch script\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM M2_HOME - location of maven2's installed home dir\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\r\nif exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho.\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho.\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\"\r\nFOR /F \"tokens=1,2 delims==\" %%A IN (%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties) DO (\r\n\tIF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B \r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    echo Found %WRAPPER_JAR%\r\n) else (\r\n    echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n\techo Downloading from: %DOWNLOAD_URL%\r\n    powershell -Command \"(New-Object Net.WebClient).DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"\r\n    echo Finished downloading %WRAPPER_JAR%\r\n)\r\n@REM End of extension\r\n\r\n%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\r\nif exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\r\n\r\nexit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 7.3056640625,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>7</version>\n    </parent>\n    <groupId>com.sparkjava</groupId>\n    <artifactId>spark-core</artifactId>\n    <packaging>bundle</packaging>\n    <version>2.9.4-SNAPSHOT</version>\n    <name>Spark</name>\n    <description>A micro framework for creating web applications in Kotlin and Java 8 with minimal effort</description>\n    <url>http://www.sparkjava.com</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <scm>\n        <connection>scm:git:git@github.com:perwendel/spark.git</connection>\n        <developerConnection>scm:git:git@github.com:perwendel/spark.git</developerConnection>\n        <url>scm:git:git@github.com:perwendel/spark.git</url>\n    </scm>\n    <developers>\n    </developers>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <jetty.version>9.4.48.v20220622</jetty.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <powermock.version>1.7.4</powermock.version>\n        <mockito.version>1.10.19</mockito.version>\n    </properties>\n\n    <dependencies>\n        <!-- LOGGING DEPENDENCIES -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.25</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- JETTY DEPENDENCIES -->\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-server</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-webapp</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.eclipse.jetty.websocket</groupId>\n            <artifactId>websocket-server</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty.websocket</groupId>\n            <artifactId>websocket-servlet</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n\n        <!-- JUNIT DEPENDENCY FOR TESTING -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.powermock</groupId>\n            <artifactId>powermock-module-junit4</artifactId>\n            <version>${powermock.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.powermock</groupId>\n            <artifactId>powermock-api-mockito</artifactId>\n            <version>${powermock.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.6</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.freemarker</groupId>\n            <artifactId>freemarker</artifactId>\n            <version>2.3.28</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.8.5</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty.websocket</groupId>\n            <artifactId>websocket-client</artifactId>\n            <version>${jetty.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n\n        <resources>\n            <resource>\n                <filtering>false</filtering>\n                <directory>src/main/resources</directory>\n            </resource>\n            <resource>\n                <filtering>false</filtering>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**</include>\n                </includes>\n                <excludes>\n                    <exclude>**/*.java</exclude>\n                </excludes>\n            </resource>\n        </resources>\n\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <optimize>true</optimize>\n                    <debug>true</debug>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-enforcer-plugin</artifactId>\n                <version>1.4.1</version>\n                <executions>\n                    <execution>\n                        <id>enforce-java</id>\n                        <goals>\n                            <goal>enforce</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <requireJavaVersion>\n                                    <version>[${java.version},)</version>\n                                </requireJavaVersion>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.0</version>\n                <configuration>\n                    <forkCount>1</forkCount>\n                    <reuseForks>false</reuseForks>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.0.1</version>\n                <configuration>\n                    <failOnError>false</failOnError>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <version>3.5.1</version>\n                <extensions>true</extensions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}