{
  "metadata": {
    "timestamp": 1736708692417,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leolin310148/ShortcutBadger",
      "stars": 7349,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".idea/*\n*.iml\nbuild\n.gradle\nlocal.properties\n**/gradle.properties\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.6123046875,
          "content": "        Copyright 2014 Leo Lin\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS,\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        See the License for the specific language governing permissions and\n        limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.74609375,
          "content": "ShortcutBadger: [![Maven Central](https://maven-badges.herokuapp.com/maven-central/me.leolin/ShortcutBadger/badge.svg)](https://maven-badges.herokuapp.com/maven-central/me.leolin/ShortcutBadger)\n===================================\n\nThe ShortcutBadger makes your Android App show the count of unread messages as a badge on your App shortcut!\n\n# Supported launchers:<br/>\n\n<table>\n    <tr>\n        <td width=\"130\">\n            <h3>Sony</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_sony.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>Samsung</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_samsung.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>LG</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_lg.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>HTC</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_htc.png\"/>\n        </td>\n    </tr>\n    <tr>\n        <td width=\"130\">\n            <h3>Xiaomi</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_xiaomi.png\"/>\n            <br>\n        </td>\n        <td width=\"130\">\n            <h3>ASUS</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_asus.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>ADW</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_adw.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>APEX</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_apex.png\"/>\n        </td>\n    <tr>\n        <td width=\"130\">\n            <h3>NOVA</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_nova.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>Huawei</h3>\n            <br>\n            (Not Fully Support)\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_huawei.png\"/>\n            <br>\n            (1.1.7+)\n        </td>\n        <td width=\"130\">\n            <h3>ZUK</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_zuk.png\"/>\n            <br>\n            (1.1.10+)\n        </td>\n        <td width=\"130\">\n            <h3>OPPO</h3>\n            <br>\n            (Not Fully Support)\n            <br>\n            <img src=\"screenshots/ss_oppo.png?raw=true\"/>\n            <br>\n            (1.1.10+)\n        </td>\n    </tr>\n    <tr>\n        <td width=\"130\">\n            <h3>EverythingMe</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_evme.png\"/>\n        </td>\n        <td width=\"130\">\n            <h3>ZTE</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_zte.png\"/>\n            <br>\n            (1.1.17+)\n        </td>\n        <td width=\"260\" colspan=\"2\">\n            <h3>KISS</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_kiss.png\"/>\n            <br>\n            (1.1.18+)\n        </td>\n    </tr>\n    <tr>\n        <td width=\"130\">\n            <h3>LaunchTime</h3>\n            <br>\n            <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_launchtime.png\"/>\n        </td>\n        <td width=\"260\" colspan=\"2\">\n                    <h3>Yandex Launcher</h3>\n                    <br>\n                    <img src=\"https://raw.github.com/leolin310148/ShortcutBadger/master/screenshots/ss_yandex.png\"/>\n                    <br>\n                    (1.1.23+)\n        </td>\n    </tr>\n</table>\n\n* Nova launcher with TeslaUnread, Apex launcher, ADW Launcher provided by [notz](https://github.com/notz)\n* Solid launcher provided by [MajeurAndroid](https://github.com/MajeurAndroid)\n* KISS Launcher provided by [alexander255](https://github.com/alexander255)\n\n## About Xiaomi devices\nXiaomi devices require extra setup with notifications, please read [wiki](https://github.com/leolin310148/ShortcutBadger/wiki/Xiaomi-Device-Support).\n\n## IsBadgeWorking? \n\nA tool for displaying your device, launcher & android version and testing whether ShortcutBadger\nworks or not may be downloaded from\n\n* Google Play [https://play.google.com/store/apps/details?id=me.leolin.isbadgeworking](https://play.google.com/store/apps/details?id=me.leolin.isbadgeworking)\n* The GitHub repository [https://github.com/leolin310148/IsBadgeWorking.Android/releases](https://github.com/leolin310148/IsBadgeWorking.Android/releases)\n\n\nUSAGE\n===================================\n<br/>1. Add mavenCentral to your build script.\n\n        repositories {\n            mavenCentral()\n        }\n    \n<br/>2. Add dependencies for ShortcutBadger, it's available from maven now.\n        \n        dependencies {\n            implementation \"me.leolin:ShortcutBadger:1.1.22@aar\"\n        }\n\n<br/>3. Add the codes below:\n\n        int badgeCount = 1;\n        ShortcutBadger.applyCount(context, badgeCount); //for 1.1.4+\n        ShortcutBadger.with(getApplicationContext()).count(badgeCount); //for 1.1.3\n        \n<br/>4. If you want to remove the badge\n        \n        ShortcutBadger.removeCount(context); //for 1.1.4+\n        ShortcutBadger.with(getApplicationContext()).remove();  //for 1.1.3\nor\n        \n        ShortcutBadger.applyCount(context, 0); //for 1.1.4+\n        ShortcutBadger.with(getApplicationContext()).count(0); //for 1.1.3\n<br/>\n<br/>\n<br/>\n<br/>\n\n\nDEVELOP BY\n===================================\n[Leo Lin](https://github.com/leolin310148) - leolin310148@gmail.com\n\n\nABOUT Google Play Developer Term Violations\n===================================\nIf you receive a message from Google containing something like this:<br/> \n\n        REASON FOR WARNING: Violation of section 4.4 of the Developer Distribution Agreement.\n        \nplease use version 1.1.0+!\n\n\n\nCHANGE LOG\n==========\n\n1.1.23:\n\n* Added Yandex Launcher support. Fixed issue with incorrect default launcher resolve\n\n1.1.22:\n\n* Improve Oreo support (Thanks to [AlexStarc](https://github.com/AlexStarc))\n\n1.1.20:\n\n* Renamed default broadcast action; added Android Oreo support.\n\n1.1.19:\n\n* Fix multiple home package resolve issue.\n\n1.1.18:\n\n* Add Kill Launcher Support\n\n1.1.17:\n\n* Add ZTE Support\n\n1.1.16:\n\n* Improve Sony Launcher support.\n\n1.1.15:\n\n* Add EverythingLauncher Support.\n\n1.1.14:\n\n* Fix for specific class of Samsung devices: with android 5, but without support of DefaultBadger\n* Remove Xiaomi from Badger and add Notification Support for Xiaomi devices.\n\n1.1.13:\n\n* Fix XiaomiBadger (tested with RedMi Note4)\n\n1.1.12:\n\n* Handling Samsung badger for old devices and new devices.\n* Try to support newer Xiaomi (Not tested.)\n* Try to support Vivo (Not tested.)\n\n1.1.11:\n\n* Add OPPO Launcher Support\n\n1.1.10:\n\n* Add ZUK Launcher Support\n\n1.1.9:\n\n* Add SamsungBadger back for more Samsung devices support.\n\n1.1.8:\n\n* Remove SolidBadger, now solid launcher will use default badger.\n\n1.1.7:\n\n* Add Huawei launcher support.\n\n1.1.6:\n\n* Add support for new Sony Launchers.\n\n1.1.5:\n\n* `applyCount` will return if the Broadcast has been sent successfully.\n\n1.1.4:\n\n* Changed `ShortcutBadger.setBadge(context, badgeCount)` to `ShortcutBadger.applyCount(context, badgeCount);`\n\n1.1.3:\n\n* Deprecate SamsungBadger and LGBadger, those devices can use DefaultBadger.\n\n1.1.2:\n\n* Add support for `com.miui.mihome2`\n\n1.1.1:\n\n* Add DefaultBadger because some launchers use android.intent.action.BADGE_COUNT_UPDATE to update count.\n* Since the ShortcutBadgerException is helpless. So change api to set badge and never have to handle the exception again.\n\n1.1.0:\n\n* Remove Android Launcher support due to Google Play Developer Term Violation since 4.4.\n\n1.0.10:\n\n* Add Asus launcher support.\n\n1.0.9:\n\n* Add Xiaomi launcher support.\n\n\nLICENSE\n===================================\n<br/>\n        \n        Copyright 2014 Leo Lin\n        \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        \n            http://www.apache.org/licenses/LICENSE-2.0\n        \n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS,\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        See the License for the specific language governing permissions and\n        limitations under the License.\n<br/>\n"
        },
        {
          "name": "SampleApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "ShortcutBadger",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.3779296875,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        mavenCentral()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.1.0'\n    }\n    ext {\n        POM_NAME = 'ShortcutBadger'\n        POM_DESCRIPTION = 'The ShortcutBadger makes your Android App show the count of unread messages as a badge on your App shortcut!'\n        POM_URL = 'https://github.com/leolin310148/ShortcutBadger'\n        POM_SCM_URL = 'https://github.com/leolin310148/ShortcutBadger'\n        POM_SCM_CONNECTION = 'https://github.com/leolin310148/ShortcutBadger.git'\n        POM_SCM_DEV_CONNECTION = 'https://github.com/leolin310148/ShortcutBadger.git'\n        POM_LICENCE_NAME = 'The Apache Software License, Version 2.0'\n        POM_LICENCE_URL = 'http://www.apache.org/licenses/LICENSE-2.0'\n        POM_LICENCE_DIST = 'repo'\n        POM_DEVELOPER_ID = 'leolin310148'\n        POM_DEVELOPER_NAME = 'Leo Lin'\n        POM_PACKAGING = 'aar'\n        POM_ARTIFACT_ID = 'ShortcutBadger'\n        VERSION_NAME = '1.1.8'\n        VERSION_CODE = 1\n        GROUP = 'me.leolin'\n    }\n}\n\n\nsubprojects {\n    buildscript {\n        repositories {\n            jcenter()\n            mavenCentral()\n            google()\n        }\n        dependencies {\n            classpath 'com.android.tools.build:gradle:3.1.3'\n        }\n    }\n    repositories {\n        jcenter()\n        mavenCentral()\n        google()\n    }\n\n}"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0458984375,
          "content": "include ':ShortcutBadger'\ninclude ':SampleApp'\n"
        }
      ]
    }
  ]
}