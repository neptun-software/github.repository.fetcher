{
  "metadata": {
    "timestamp": 1736708649787,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SonarSource/sonarqube",
      "stars": 9228,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.star",
          "type": "blob",
          "size": 0.83984375,
          "content": "load(\"github.com/SonarSource/cirrus-modules@v3\", \"load_features\")\nload(\"cirrus\", \"env\", \"fs\", \"yaml\")\n\n\ndef main(ctx):\n    if env.get(\"CIRRUS_REPO_FULL_NAME\") == 'SonarSource/sonar-enterprise' and fs.exists(\"private/.cirrus.yml\"):\n        features = yaml.dumps(load_features(ctx, only_if=dict()))\n        doc = fs.read(\"private/.cirrus.yml\")\n    else:\n        if env.get(\"CIRRUS_USER_PERMISSION\") in [\"write\", \"admin\"]:\n            features = yaml.dumps(load_features(ctx, features=[\"build_number\"]))\n        else:\n            # workaround for BUILD-4413 (build number on public CI)\n            features = yaml.dumps(\n                {\n                    'env': {\n                        'CI_BUILD_NUMBER': env.get(\"CIRRUS_PR\", \"1\")\n                    },\n                }\n            )\n        doc = fs.read(\".cirrus/.cirrus.yml\")\n    return features + doc\n"
        },
        {
          "name": ".cirrus",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "*\n!docker\n!private/docker\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0517578125,
          "content": "# ---- Gradle\nbuild/\n.gradle/\n.gradletasknamecache\nclasses/\nout/\n\n# ---- Maven (in integration tests)\ntarget/\n\n# ---- IntelliJ IDEA\n*.iws\n*.iml\n*.ipr\n.idea/\n.attach_pid*\nout/\nhttp-client.private.env.json\n\n# ---- VS Code\n*.code-workspace\n\n# Directories generated on build on Windows\nbin/\n!sonar-application/src/main/assembly/elasticsearch/**/bin/\n!sonar-application/src/main/assembly/elasticsearch-patch/**/bin/\n\n# npm logs\nnpm-debug.log*\nnpm.tar.gz\nyarn-debug.log*\nyarn-error.log*\n\n# ---- Eclipse\n.classpath\n.project\n.settings\n.externalToolBuilders\n\n# ---- Mac OS X\n.DS_Store\n# Thumbnails\n._*\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# ---- Windows\n# Windows image file caches\nThumbs.db \n# Folder config file\nDesktop.ini\n\n# ---- Linux\n.directory\n\n# ---- frontend\nnode/\nnode_modules/\ninstall-state.gz\n\n# ---- SonarQube\n.sonar/\n.scannerwork/\n\n# scripts patches, they are local to each developer\nscripts/patches/*.*\nscripts/patches/*license*.txt\n!scripts/patches/debug_ce.sh\n!scripts/patches/debug_web.sh\n!scripts/patches/postgres.sh\ngherkin-features/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "HEADER",
          "type": "blob",
          "size": 0.76953125,
          "content": "SonarQube\nCopyright (C) 2009-2025 SonarSource SA\nmailto:info AT sonarsource DOT com\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program; if not, write to the Free Software Foundation,\nInc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.1689453125,
          "content": "SonarQube\nCopyright (C) 2009-2025 SonarSource SA\nmailto:info AT sonarsource DOT com\n\nThis product includes software developed at\nSonarSource (https://www.sonarsource.com/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.611328125,
          "content": "# SonarQube [![Build Status](https://api.cirrus-ci.com/github/SonarSource/sonarqube.svg?branch=master)](https://cirrus-ci.com/github/SonarSource/sonarqube) [![Quality Gate Status](https://next.sonarqube.com/sonarqube/api/project_badges/measure?project=sonarqube&metric=alert_status&token=d95182127dd5583f57578d769b511660601a8547)](https://next.sonarqube.com/sonarqube/dashboard?id=sonarqube) [![AI Code Assurance](https://next.sonarqube.com/sonarqube/api/project_badges/ai_code_assurance?project=org.sonarsource.sonarqube%3Asonarqube-private&token=sqb_c0e2fa9ac4ef89f9a8403c6ba235e108ceb1dce1)](https://next.sonarqube.com/sonarqube/dashboard?id=sonarqube)\n\n## Continuous Inspection\n\nSonarQube provides the capability to not only show the health of an application but also to highlight issues newly introduced. With a Quality Gate in place, you can [achieve Clean Code](https://www.sonarsource.com/solutions/clean-code/) and therefore improve code quality systematically.\n\n## Links\n\n- [Website](https://www.sonarsource.com/products/sonarqube)\n- [Download](https://www.sonarsource.com/products/sonarqube/downloads)\n- [Documentation](https://docs.sonarsource.com/sonarqube)\n- [Webapp source code](https://github.com/SonarSource/sonarqube-webapp)\n- [X](https://twitter.com/SonarQube)\n- [SonarSource](https://www.sonarsource.com), author of SonarQube\n- [Issue tracking](https://jira.sonarsource.com/browse/SONAR/), read-only. Only SonarSourcers can create tickets.\n- [Responsible Disclosure](https://community.sonarsource.com/t/responsible-vulnerability-disclosure/9317)\n- [Next](https://next.sonarqube.com/sonarqube) instance of the next SonarQube version\n\n## Have Questions or Feedback?\n\nFor support questions (\"How do I?\", \"I got this error, why?\", ...), please first read the [documentation](https://docs.sonarsource.com/sonarqube) and then head to the [SonarSource Community](https://community.sonarsource.com/c/help/sq/10). The answer to your question has likely already been answered! 🤓\n\nBe aware that this forum is a community, so the standard pleasantries (\"Hi\", \"Thanks\", ...) are expected. And if you don't get an answer to your thread, you should sit on your hands for at least three days before bumping it. Operators are not standing by. 😄\n\n## Contributing\n\nIf you would like to see a new feature or report a bug, please create a new thread in our [forum](https://community.sonarsource.com/c/sq/10).\n\nPlease be aware that we are not actively looking for feature contributions. The truth is that it's extremely difficult for someone outside SonarSource to comply with our roadmap and expectations. Therefore, we typically only accept minor cosmetic changes and typo fixes.\n\nWith that in mind, if you would like to submit a code contribution, please create a pull request for this repository. Please explain your motives to contribute this change: what problem you are trying to fix, what improvement you are trying to make.\n\nMake sure that you follow our [code style](https://github.com/SonarSource/sonar-developer-toolset#code-style) and all tests are passing (Travis build is executed for each pull request).\n\nWilling to contribute to SonarSource products? We are looking for smart, passionate, and skilled people to help us build world-class code-quality solutions. Have a look at our current [job offers here](https://www.sonarsource.com/company/jobs/)!\n\n## Building\n\nTo build sources locally follow these instructions.\n\n### Build and Run Unit Tests\n\nExecute from the project base directory:\n\n    ./gradlew build\n\nThe zip distribution file is generated in `sonar-application/build/distributions/`. Unzip it and start the server by executing:\n\n    # on Linux\n    bin/linux-x86-64/sonar.sh start\n    # or on MacOS\n    bin/macosx-universal-64/sonar.sh start\n    # or on Windows\n    bin\\windows-x86-64\\StartSonar.bat\n\n### Open in IDE\n\nIf the project has never been built, then build it as usual (see previous section) or use the quicker command:\n\n    ./gradlew ide\n\nThen open the root file `build.gradle` as a project in IntelliJ or Eclipse.\n\n### Gradle Hints\n\n| ./gradlew command                | Description                               |\n| -------------------------------- | ----------------------------------------- |\n| `dependencies`                   | list dependencies                         |\n| `licenseFormat --rerun-tasks`    | fix source headers by applying HEADER.txt |\n| `wrapper --gradle-version 5.2.1` | upgrade wrapper                           |\n\n## Building with UI changes\n\nThe SonarQube UI (or webapp as we call it), is located in another repository: [sonarqube-webapp](https://github.com/SonarSource/sonarqube-webapp).\n\nWhen building the `sonarqube` repository, the webapp is automatically downloaded from Maven Central as a dependency, it makes it easy for you to contribute backend changes without having to care about the webapp.\n\nBut if your contribution also contains UI changes, you must clone the `sonarqube-webapp` repository, do your changes there, build it locally and then build the `sonarqube` repository using the `WEBAPP_BUILD_PATH` environment variable to target your custom build of the UI.\n\nHere is an example of how to do it:\n\n```bash\ncd /path/to/sonarqube-webapp/server/sonar-web\n# do your changes\n\n# install dependencies, only needed the first time\nyarn\n\n# build the webapp\nyarn build\n\n\ncd /path/to/sonarqube\n\n# build the sonarqube repository using the custom build of the webapp\nWEBAPP_BUILD_PATH=/path/to/sonarqube-webapp/server/sonar-web/build/webapp ./gradlew build\n```\n\nYou can also target a specific version of the webapp by updating the `webappVersion` property in the `./gradle.properties` file and then building the `sonarqube` repository normally.\n\n## Translations files\n\nHistorically our translations were stored in `sonar-core/src/main/resources/org/sonar/l10n/core.properties`, but this file is now deprecated and not updated anymore.\nDefault translations (in English) are now defined in the webapp repository, here:\nhttps://github.com/SonarSource/sonarqube-webapp/blob/master/server/sonar-web/src/main/js/l10n/default.ts\n\nThe format has changed but you can still have it as a `.properties` file format by running the following command:\n\n```bash\ncd /path/to/sonarqube-webapp/server/sonar-web\n\n# install dependencies, only needed the first time\nyarn\n\n# generate a backward compatible .properties file with all the translation keys\nyarn generate-translation-keys\n```\n\nNote that contributing extensions for translations into other languages still work the same way as before. It's just the source of truth for the default translations that changed.\n\n## License\n\nCopyright 2008-2025 SonarSource.\n\nLicensed under the [GNU Lesser General Public License, Version 3.0](https://www.gnu.org/licenses/lgpl.txt)\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 31.6298828125,
          "content": "import groovy.text.SimpleTemplateEngine\nimport org.sonar.build.BlackBoxTest\n\nimport static org.gradle.api.JavaVersion.VERSION_17\n\nplugins {\n  // Ordered alphabetically\n  id 'com.github.hierynomus.license' version '0.16.1'\n  id \"com.github.hierynomus.license-report\" version \"0.16.1\" apply false\n  id 'com.gradleup.shadow' version '8.3.5' apply false\n  id 'com.google.protobuf' version '0.8.19' apply false\n  // dont update com.jfrog.artifactory, new version contains a bug\n  id 'com.jfrog.artifactory' version '5.2.5'\n  id \"de.undercouch.download\" version \"5.6.0\" apply false\n  id 'io.spring.dependency-management' version '1.1.6'\n  id \"org.cyclonedx.bom\" version \"1.10.0\" apply false\n  id 'org.sonarqube' version '6.0.1.5171'\n}\n\nif (!JavaVersion.current().isCompatibleWith(VERSION_17)) {\n  throw new GradleException(\"JDK 17+ is required to perform this build. It's currently \" + System.getProperty(\"java.home\") + \".\")\n}\n\n/**\n * The BOM related tasks are disabled by default, activated by:\n * - running in the CI and being on a main branch or a nightly build,\n * - or using '-Dbom' project property\n * - or by explicit call to 'cyclonedxBom' Gradle task\n */\ndef bomTasks = \"cyclonedxBom\"\ndef ghBranch = System.getenv()[\"GITHUB_BRANCH\"]\ndef isMainBranch = ghBranch in ['master'] || ghBranch ==~ 'branch-[\\\\d.]+'\n\nboolean enableBom = System.getenv('CI') == \"true\" && (isMainBranch) ||\n  System.getProperty(\"bom\") != null ||\n  gradle.startParameter.taskNames.findAll({ it.matches(\".*:($bomTasks)\") })\n\nallprojects {\n  apply plugin: 'com.jfrog.artifactory'\n  apply plugin: 'maven-publish'\n\n  ext.versionInSources = version\n  ext.buildNumber = System.getProperty(\"buildNumber\")\n  // when no buildNumber is provided, then project version must end with '-SNAPSHOT'\n  if (ext.buildNumber == null) {\n    version = \"${version}-SNAPSHOT\".toString()\n    ext.versionWithoutBuildNumber = version\n  } else {\n    ext.versionWithoutBuildNumber = version\n    version = (version.toString().count('.') == 1 ? \"${version}.0.${ext.buildNumber}\" : \"${version}.${ext.buildNumber}\").toString()\n  }\n\n  task cacheDependencies {\n    doLast {\n      configurations.each { conf ->\n        if (conf.isCanBeResolved()) {\n          if (conf.getName() != 'appZip')\n            conf.resolve()\n        }\n      }\n    }\n  }\n\n  ext {\n    release = project.hasProperty('release') && project.getProperty('release')\n    deployCommunity = project.hasProperty('deployCommunity') && (project.getProperty('deployCommunity') == 'true')\n    official = project.hasProperty('official') && project.getProperty('official')\n  }\n\n  ext.enableBom = enableBom\n  if (!enableBom) {\n    tasks.matching { it.name.matches(bomTasks) }.all({\n      logger.info(\"{} disabled\", it.name);\n      it.enabled = false\n    })\n  }\n\n  repositories {\n    // The environment variables ARTIFACTORY_PRIVATE_USERNAME and ARTIFACTORY_PRIVATE_PASSWORD are used on QA env (Jenkins)\n    // On local box, please add artifactoryUsername and artifactoryPassword to ~/.gradle/gradle.properties\n    def artifactoryUsername = System.env.'ARTIFACTORY_PRIVATE_USERNAME' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')\n    def artifactoryPassword = System.env.'ARTIFACTORY_PRIVATE_PASSWORD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')\n    def artifactoryUrl = System.getenv('ARTIFACTORY_URL') ?: (project.hasProperty('artifactoryUrl') ? project.getProperty('artifactoryUrl') : '')\n\n    if (artifactoryPassword) {\n      if (artifactoryUrl == '') {\n        throw new GradleException('Invalid artifactoryUrl')\n      }\n      maven {\n        authentication {\n          header(HttpHeaderAuthentication)\n        }\n        credentials(HttpHeaderCredentials) {\n          name = \"Authorization\"\n          value = \"Bearer $artifactoryPassword\"\n        }\n        url \"${artifactoryUrl}/sonarsource\"\n      }\n      maven {\n        authentication {\n          header(HttpHeaderAuthentication)\n        }\n        credentials(HttpHeaderCredentials) {\n          name = \"Authorization\"\n          value = \"Bearer $artifactoryPassword\"\n        }\n        url \"${artifactoryUrl}/sonarsource-qa\"\n      }\n    } else {\n      mavenCentral()\n      maven {\n        url 'https://jitpack.io'\n      }\n      maven {\n        url 'https://maven.codelibs.org/'\n      }\n      maven {\n        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'\n      }\n    }\n    ivy {\n      if (artifactoryUsername && artifactoryPassword) {\n        url \"${artifactoryUrl}/sonarsource-bucket\"\n        authentication {\n          header(HttpHeaderAuthentication)\n        }\n        credentials(HttpHeaderCredentials) {\n          name = \"Authorization\"\n          value = \"Bearer $artifactoryPassword\"\n        }\n\n        patternLayout {\n          artifact '/[organisation]/[module]/[module]-[revision].[ext]'\n        }\n      } else {\n        // For public build\n        url \"https://artifacts.elastic.co/downloads/\"\n\n        patternLayout {\n          artifact '/[organisation]/[module]-[revision].[ext]'\n        }\n      }\n\n      metadataSources { artifact() }\n    }\n  }\n\n  task allDependencies {\n    dependsOn 'dependencies'\n  }\n\n  artifactory {\n    clientConfig.setIncludeEnvVars(true)\n    clientConfig.setEnvVarsExcludePatterns('*pass*,*psw*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*login*,*key*,*signing*,*auth*,*pwd*')\n    clientConfig.publisher.setFilterExcludedArtifactsFromBuild(true)\n    contextUrl = System.getenv('ARTIFACTORY_URL')\n\n    //if property deployCommunity is true set the value to sonar-enterprise-sqcb\n    //otherwise set it to sqs\n    if (deployCommunity) {\n      clientConfig.info.setBuildName('sonar-enterprise-sqcb')\n      clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH',\n        \"${project.group}:sonar-application:zip\")\n    } else {\n      clientConfig.info.setBuildName('sonar-enterprise-sqs')\n      clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH',\n        \"com.sonarsource.sonarqube:sonarqube-developer:zip,\" +\n          \"com.sonarsource.sonarqube:sonarqube-datacenter:zip,\" +\n          \"com.sonarsource.sonarqube:sonarqube-enterprise:zip\")\n    }\n\n    publish {\n      repository {\n        repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')\n        username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME') ?: project.properties.artifactoryUsername\n        password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD') ?: project.properties.artifactoryPaswword\n      }\n      defaults {\n        properties = [\n          'build.name'      : 'sonar-enterprise-sqcb',\n          'build.number'    : System.getenv('BUILD_NUMBER'),\n          'pr.branch.target': System.getenv('GITHUB_BASE_BRANCH'),\n          'pr.number'       : System.getenv('PULL_REQUEST'),\n          'vcs.branch'      : ghBranch,\n          'vcs.revision'    : System.getenv('GIT_SHA1'),\n          'version'         : version\n        ]\n        publications('mavenJava')\n        publishPom = true\n        publishIvy = false\n      }\n    }\n    clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))\n    // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.\n    clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', \"${version}\")\n  }\n}\n\napply plugin: 'org.sonarqube'\nsonar {\n  properties {\n    property 'sonar.projectName', projectTitle\n    property 'sonar.projectVersion', \"${versionInSources}-SNAPSHOT\"\n    property 'sonar.buildString', version\n  }\n}\n\ntasks.named('wrapper') {\n  distributionType = Wrapper.DistributionType.ALL\n}\n\nsubprojects {\n  apply plugin: 'com.github.hierynomus.license'\n  apply plugin: 'io.spring.dependency-management'\n  apply plugin: 'jacoco'\n  apply plugin: 'java-library'\n  apply plugin: 'idea'\n  apply plugin: 'signing'\n\n  // do not deploy to Artifactory by default\n  artifactoryPublish.skip = true\n\n  compileJava.options.encoding = \"UTF-8\"\n  compileTestJava.options.encoding = \"UTF-8\"\n\n  def testFixtureSrc = 'src/testFixtures'\n  if (file(testFixtureSrc).exists()) {\n    apply plugin: 'java-test-fixtures'\n  }\n\n  ext {\n    protobufVersion = '4.29.0'\n    springVersion = '6.2.1'\n    springSecurityVersion = '6.4.1'\n    elasticSearchClientVersion = '7.17.25'\n  }\n\n  sonar {\n    properties {\n      property 'sonar.moduleKey', project.group + ':' + project.name\n    }\n  }\n\n  sourceSets {\n    test {\n      resources {\n        srcDirs += ['src/it/resources']\n      }\n      java {\n        srcDirs += ['src/it/java']\n      }\n    }\n\n    bbt {\n      resources {\n        srcDirs = ['src/bbt/resources']\n      }\n      java {\n        srcDirs = ['src/bbt/java']\n      }\n    }\n  }\n\n  configurations {\n    bbtCompile.extendsFrom testCompile\n    bbtRuntime.extendsFrom testRuntime\n    bbtImplementation.extendsFrom testImplementation\n\n    webapp {\n      transitive = false\n    }\n\n    // global exclusions\n    all {\n      // do not conflict with com.sun.mail:javax.mail\n      exclude group: 'javax.mail', module: 'mail'\n    }\n  }\n\n  // Central place for definition dependency versions and exclusions.\n  dependencyManagement {\n    dependencies {\n      // bundled plugin list -- keep it alphabetically ordered\n      dependency 'com.sonarsource.abap:sonar-abap-plugin:3.15.1.6010'\n      dependency 'com.sonarsource.cobol:sonar-cobol-plugin:5.8.0.8309'\n      dependency 'com.sonarsource.cpp:sonar-cfamily-dependencies-plugin:6.62.0.78645'\n      dependency 'com.sonarsource.cpp:sonar-cfamily-plugin:6.62.0.78645'\n      dependency 'com.sonarsource.dart:sonar-dart-plugin:1.0.0.1952'\n      dependency 'com.sonarsource.dbd:sonar-dbd-plugin:1.36.1.13250'\n      dependency 'com.sonarsource.dbd:sonar-dbd-java-frontend-plugin:1.36.1.13250'\n      dependency 'com.sonarsource.dbd:sonar-dbd-python-frontend-plugin:1.36.1.13250'\n      dependency 'com.sonarsource.dotnet:sonar-csharp-enterprise-plugin:10.4.0.108396'\n      dependency 'com.sonarsource.dotnet:sonar-vbnet-enterprise-plugin:10.4.0.108396'\n      dependency 'com.sonarsource.pli:sonar-pli-plugin:1.16.0.5325'\n      dependency 'com.sonarsource.plsql:sonar-plsql-plugin:3.15.0.7123'\n      dependency 'com.sonarsource.plugins.vb:sonar-vb-plugin:2.14.0.5475'\n      dependency 'com.sonarsource.rpg:sonar-rpg-plugin:3.10.0.5337'\n      dependency 'com.sonarsource.security:sonar-security-csharp-frontend-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.security:sonar-security-java-frontend-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.security:sonar-security-php-frontend-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.security:sonar-security-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.security:sonar-security-python-frontend-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.security:sonar-security-js-frontend-plugin:10.11.0.34915'\n      dependency 'com.sonarsource.slang:sonar-apex-plugin:1.18.0.198'\n      dependency 'org.sonarsource.slang:sonar-go-plugin:1.18.0.240'\n      dependency 'org.sonarsource.slang:sonar-ruby-plugin:1.18.0.234'\n      dependency 'org.sonarsource.slang:sonar-scala-plugin:1.18.0.266'\n      dependency 'com.sonarsource.swift:sonar-swift-plugin:4.13.0.7903'\n      dependency 'com.sonarsource.tsql:sonar-tsql-plugin:1.14.0.7614'\n      dependency 'org.sonarsource.dotnet:sonar-csharp-plugin:10.4.0.108396'\n      dependency 'org.sonarsource.dotnet:sonar-vbnet-plugin:10.4.0.108396'\n      dependency 'org.sonarsource.flex:sonar-flex-plugin:2.14.0.5032'\n      dependency 'org.sonarsource.html:sonar-html-plugin:3.18.0.5605'\n      dependency 'org.sonarsource.jacoco:sonar-jacoco-plugin:1.3.0.1538'\n      dependency 'org.sonarsource.java:sonar-java-plugin:8.9.0.37768'\n      dependency 'org.sonarsource.java:sonar-java-symbolic-execution-plugin:8.9.0.37768'\n      dependency 'org.sonarsource.javascript:sonar-javascript-plugin:10.20.0.29356'\n      dependency 'org.sonarsource.php:sonar-php-plugin:3.42.0.12795'\n      dependency 'org.sonarsource.plugins.cayc:sonar-cayc-plugin:2.4.0.2018'\n      dependency 'org.sonarsource.python:sonar-python-plugin:4.26.0.19456'\n      dependency 'org.sonarsource.kotlin:sonar-kotlin-plugin:2.22.0.5972'\n      dependency \"org.sonarsource.api.plugin:sonar-plugin-api:$pluginApiVersion\"\n      dependency \"org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures:$pluginApiVersion\"\n      dependency 'org.sonarsource.xml:sonar-xml-plugin:2.12.0.5749'\n      dependency 'org.sonarsource.iac:sonar-iac-plugin:1.41.0.14206'\n      dependency 'com.sonarsource.iac:sonar-iac-enterprise-plugin:1.41.0.14206'\n      dependency 'org.sonarsource.text:sonar-text-plugin:2.20.0.5038'\n      dependency 'com.sonarsource.text:sonar-text-developer-plugin:2.20.0.5038'\n      dependency 'com.sonarsource.text:sonar-text-enterprise-plugin:2.20.0.5038'\n      dependency 'com.sonarsource.jcl:sonar-jcl-plugin:1.4.0.1375'\n      dependency 'com.sonarsource.architecture:sonar-architecture-plugin:1.6.0.2596'\n      dependency 'com.sonarsource.architecture:sonar-architecture-java-frontend-plugin:1.6.0.2596'\n\n      // Webapp\n      dependency \"org.sonarsource.sonarqube:webapp-assets:$webappVersion\"\n\n      // please keep this list alphabetically ordered\n      dependencySet(group: 'ch.qos.logback', version: '1.5.13') {\n        entry 'logback-classic'\n        entry 'logback-core'\n      }\n\n      // https://mvnrepository.com/artifact/ch.qos.logback.access/common\n      dependency('ch.qos.logback.access:common:2.0.3')\n      dependency('ch.qos.logback.access:logback-access-tomcat:2.0.5')\n      dependency('commons-beanutils:commons-beanutils:1.9.4') {\n        exclude 'commons-logging:commons-logging'\n      }\n      dependency 'commons-codec:commons-codec:1.17.1'\n      dependency 'commons-dbutils:commons-dbutils:1.8.1'\n      dependency 'commons-io:commons-io:2.18.0'\n      imports { mavenBom 'com.fasterxml.jackson:jackson-bom:2.18.2' }\n      dependency 'com.eclipsesource.minimal-json:minimal-json:0.9.5'\n      dependencySet(group: 'com.github.scribejava', version: '8.3.3') {\n        entry 'scribejava-apis'\n        entry 'scribejava-core'\n      }\n      dependency('com.github.erosb:json-sKema:0.19.0') {\n        // this version of json-sKema does not make use of commons-collections, so we can exclude it safely\n        exclude 'commons-collections:commons-collections'\n      }\n      // This project is no longer maintained and was forked\n      // by https://github.com/java-diff-utils/java-diff-utils\n      // (io.github.java-diff-utils:java-diff-utils).\n      dependency 'com.googlecode.java-diff-utils:diffutils:1.3.0'\n      dependency('com.googlecode.json-simple:json-simple:1.1.1') {\n        exclude 'junit:junit'\n      }\n      dependency 'io.github.hakky54:sslcontext-kickstart:8.3.7'\n      dependency 'io.prometheus:simpleclient:0.16.0'\n      dependency 'io.prometheus:simpleclient_common:0.16.0'\n      dependency 'io.prometheus:simpleclient_servlet:0.16.0'\n      dependency 'com.github.spotbugs:spotbugs-annotations:4.8.6'\n      dependency 'com.google.code.gson:gson:2.11.0'\n      dependency('com.google.guava:guava:33.3.1-jre') {\n        exclude 'com.google.errorprone:error_prone_annotations'\n        exclude 'com.google.guava:listenablefuture'\n        exclude 'com.google.j2objc:j2objc-annotations'\n        exclude 'org.checkerframework:checker-qual'\n        exclude 'org.codehaus.mojo:animal-sniffer-annotations'\n      }\n      dependency \"com.google.protobuf:protobuf-java:${protobufVersion}\"\n      dependency 'com.h2database:h2:2.3.232'\n      dependencySet(group: 'com.hazelcast', version: '5.4.0') {\n        entry 'hazelcast'\n      }\n      // Documentation must be updated if mssql-jdbc is updated: https://github.com/SonarSource/sonarqube/commit/03e4773ebf6cba854cdcf57a600095f65f4f53e7\n      dependency('com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11') {\n        exclude 'com.fasterxml.jackson.core:jackson-databind'\n      }\n      dependency 'com.microsoft.azure:msal4j:1.18.0'\n      dependency 'com.oracle.database.jdbc:ojdbc11:23.6.0.24.10'\n      dependency 'com.datadoghq:dd-java-agent:1.30.1'\n      dependency 'org.aspectj:aspectjtools:1.9.22.1'\n      dependencySet(group: 'com.squareup.okhttp3', version: '4.12.0') {\n        entry 'okhttp'\n        entry 'mockwebserver'\n        entry 'okhttp-tls'\n        entry 'logging-interceptor'\n      }\n      dependency 'commons-logging:commons-logging:1.3.4'\n      dependency 'org.json:json:20240303'\n      // To be removed after migration to JUnit5 is finished\n      dependency 'com.tngtech.java:junit-dataprovider:1.13.1'\n      dependency 'com.tngtech.junit.dataprovider:junit-jupiter-params-dataprovider:2.10'\n      dependencySet(group: 'io.jsonwebtoken', version: '0.12.6') {\n        entry 'jjwt-api'\n        entry 'jjwt-impl'\n        entry 'jjwt-jackson'\n      }\n      dependency 'com.auth0:java-jwt:4.4.0'\n      dependency 'io.netty:netty-all:4.1.115.Final'\n      dependency 'jakarta.mail:jakarta.mail-api:2.1.3'\n      dependency 'jakarta.annotation:jakarta.annotation-api:3.0.0'\n      dependency 'jakarta.inject:jakarta.inject-api:2.0.1'\n      dependency 'jakarta.servlet:jakarta.servlet-api:6.0.0'\n      dependency 'junit:junit:4.13.2'\n      dependency 'org.xmlunit:xmlunit-core:2.10.0'\n      dependency 'org.xmlunit:xmlunit-matchers:2.10.0'\n      dependency 'org.lz4:lz4-java:1.8.0'\n      dependency 'org.littleshoot:littleproxy:1.1.2'\n      dependency 'net.sf.trove4j:core:3.1.0'\n      dependency 'org.awaitility:awaitility:4.2.2'\n      dependency 'org.apache.commons:commons-collections4:4.4'\n      dependency 'org.apache.commons:commons-csv:1.12.0'\n      dependency 'org.apache.commons:commons-lang3:3.17.0'\n      dependency 'org.apache.commons:commons-email2-jakarta:2.0.0-M1'\n      dependency 'org.apache.commons:commons-text:1.12.0'\n      dependency 'org.apache.mina:mina-core:2.2.3'\n      dependency 'org.apache.kerby:kerb-simplekdc:2.1.0'\n      dependency 'org.apache.kerby:ldap-backend:2.1.0'\n      dependency 'com.zaxxer:HikariCP:6.2.1'\n      dependency('org.apache.directory.server:apacheds-server-integ:2.0.0.AM27') {\n        exclude 'log4j:log4j'\n      }\n      // Be aware that Log4j is used by Elasticsearch client\n      dependencySet(group: 'org.apache.logging.log4j', version: '2.24.2') {\n        entry 'log4j-core'\n        entry 'log4j-api'\n        entry 'log4j-to-slf4j'\n      }\n      dependencySet(group: 'org.apache.tomcat.embed', version: '10.1.34') {\n        entry 'tomcat-embed-core'\n        entry('tomcat-embed-jasper') {\n          exclude 'org.eclipse.jdt.core.compiler:ecj'\n        }\n      }\n      //transitive dependency of SVNKit, to be re-assessed when updating SVNKit\n      dependency 'org.apache.sshd:sshd-core:2.14.0'\n      dependency 'org.assertj:assertj-core:3.26.3'\n      dependency 'org.assertj:assertj-guava:3.26.3'\n      dependencySet(group: 'org.bouncycastle', version: '1.79') {\n        entry 'bcpkix-jdk18on'\n        entry 'bcprov-jdk18on'\n      }\n      dependency('org.codehaus.sonar:sonar-channel:4.2') {\n        exclude 'org.slf4j:slf4j-api'\n      }\n      dependency 'com.fasterxml.staxmate:staxmate:2.4.1'\n      dependencySet(group: 'org.eclipse.jetty', version: '11.0.24') {\n        entry 'jetty-proxy'\n        entry 'jetty-server'\n        entry 'jetty-servlet'\n      }\n      dependency(\"org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticSearchClientVersion}\") {\n        exclude 'org.apache.logging.log4j:log4j-core'\n      }\n      dependency \"org.elasticsearch.plugin:transport-netty4-client:${elasticSearchClientVersion}\"\n      dependency 'org.elasticsearch:mocksocket:1.2'\n      dependency 'org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r'\n      dependency \"org.codelibs.elasticsearch.module:analysis-common:7.17.22\"\n      dependency \"org.codelibs.elasticsearch.module:reindex:7.17.22\"\n      dependency 'org.tmatesoft.svnkit:svnkit:1.10.11'\n      dependency 'org.hamcrest:hamcrest:3.0'\n      dependency 'org.jsoup:jsoup:1.18.3'\n      // JUnit 5\n      dependency 'org.junit:junit-bom:5.11.3'\n      dependencySet(group: 'org.junit.jupiter', version: '5.11.3') {\n        entry 'junit-jupiter-api'\n        entry 'junit-jupiter-engine'\n        entry 'junit-jupiter-params'\n        entry 'junit-vintage-engine'\n      }\n      dependencySet(group: 'org.junit.platform', version: '1.11.3') {\n        entry 'junit-platform-suite-api'\n        entry 'junit-platform-suite-engine'\n      }\n      dependency 'org.junit-pioneer:junit-pioneer:2.3.0'\n      dependencySet(group: 'org.mockito', version: '5.14.2') {\n        entry 'mockito-core'\n        entry('mockito-junit-jupiter') {\n          exclude 'org.junit.jupiter:junit-jupiter-api'\n        }\n      }\n      dependency \"org.springframework:spring-test:${springVersion}\"\n      dependency \"org.springframework.security:spring-security-saml2-service-provider:${springSecurityVersion}\"\n      dependency 'org.mybatis:mybatis:3.5.17'\n      dependencySet(group: 'org.slf4j', version: '2.0.16') {\n        entry 'jcl-over-slf4j'\n        entry 'jul-to-slf4j'\n        entry 'log4j-over-slf4j'\n        entry 'slf4j-api'\n      }\n      dependency 'org.postgresql:postgresql:42.7.4'\n      dependency 'org.reflections:reflections:0.10.2'\n      dependency 'org.simpleframework:simple:5.1.6'\n      dependency 'org.sonarsource.git.blame:git-files-blame:1.1.0.1835'\n      dependency('org.sonarsource.orchestrator:sonar-orchestrator-junit4:5.1.0.2254') {\n        exclude 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'\n      }\n      dependency('org.sonarsource.orchestrator:sonar-orchestrator-junit5:5.1.0.2254') {\n        exclude 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'\n      }\n      dependency 'com.sonarsource.pdfreport:security-report-pdf-generation:2.0.0.184'\n      dependency 'org.sonarsource.update-center:sonar-update-center-common:1.34.0.2766'\n      dependency 'org.sonarsource.classloader:sonar-classloader:1.1.0.1059'\n      dependency(\"org.springframework:spring-context:${springVersion}\") {\n        exclude 'commons-logging:commons-logging'\n      }\n      dependency(\"org.springframework:spring-webmvc:${springVersion}\") {\n        exclude 'commons-logging:commons-logging'\n      }\n      dependency 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'\n      dependencySet(group: 'com.icegreen', version: '2.1.2') {\n        entry 'greenmail'\n        entry 'greenmail-junit4'\n        entry 'greenmail-junit5'\n      }\n      dependency 'org.yaml:snakeyaml:2.3'\n      dependency 'org.hibernate.validator:hibernate-validator:8.0.1.Final'\n      dependency 'org.kohsuke:github-api:1.326'\n      dependency 'org.wiremock:wiremock-standalone:3.10.0'\n      dependency 'org.skyscreamer:jsonassert:1.5.3'\n      // to be used only in sonar-ws-generator\n      dependency(\"org.apache.velocity:velocity:1.7\") {\n        dependency 'commons-collections:commons-collections:3.2.2'\n      }\n      dependency 'com.google.code.findbugs:jsr305:3.0.2'\n      // please keep this list alphabetically ordered\n    }\n  }\n\n  tasks.withType(Javadoc) {\n    options.addStringOption('Xdoclint:none', '-quiet')\n    options.encoding = 'UTF-8'\n    title = project.name + ' ' + versionWithoutBuildNumber\n  }\n\n  task sourcesJar(type: Jar, dependsOn: classes) {\n    archiveClassifier = 'sources'\n    from sourceSets.main.allSource\n  }\n\n  task javadocJar(type: Jar, dependsOn: javadoc) {\n    archiveClassifier = 'javadoc'\n    from javadoc.destinationDir\n  }\n\n  // generate code before opening project in IDE (Eclipse or Intellij)\n  task ide() {\n    // empty by default. Dependencies are added to the task\n    // when needed (see protobuf modules for example)\n  }\n\n  task generatePackageInfo {\n    doLast {\n      def allPathsContainingJavaFiles = [] as Set\n\n      fileTree('src/main/java/').matching() {\n        include \"*/**/*.java\"\n        exclude \"*/**/package-info.java\"\n      }.forEach {\n        allPathsContainingJavaFiles << it.toPath().toFile().getParent();\n      }\n\n      allPathsContainingJavaFiles.each {\n        String packageInfoPath = it + \"/package-info.java\"\n        File packageInfoFile = new File(packageInfoPath)\n        if (!packageInfoFile.exists()) {\n          logger.info(\"Creating file: \" + packageInfoPath)\n          def packageName = packageInfoFile.getParent().replaceAll(\"[\\\\\\\\ /]\", \".\").takeAfter(\"src.main.java.\");\n          String packageInfoContent = applyPackageInfoTemplate(packageName)\n          packageInfoFile << packageInfoContent\n        }\n      }\n\n      def allPackageInfoFiles = [] as Set\n\n      fileTree('src/main/java/').matching() {\n        include \"*/**/package-info.java\"\n      }.forEach {\n        allPackageInfoFiles << it.toPath().toFile();\n      }\n\n      allPackageInfoFiles.forEach {\n        File packageInfoFile = it;\n        if (!allPathsContainingJavaFiles.contains(packageInfoFile.getParent())) {\n          logger.warn(\"Deleting package info file: \" + packageInfoFile)\n          packageInfoFile.delete();\n        }\n      }\n\n    }\n  }\n  build.dependsOn(generatePackageInfo)\n  generatePackageInfo.finalizedBy(licenseFormat)\n\n  jacocoTestReport {\n    reports {\n      xml.required = true\n      csv.required = false\n      html.required = false\n    }\n  }\n\n  normalization {\n    runtimeClasspath {\n      // Following classpath resources contain volatile data that changes in each CI build (build number, commit id, time),\n      // so we exclude them from calculation of build cache key of test tasks:\n      ignore 'META-INF/MANIFEST.MF'\n      ignore 'sonar-api-version.txt'\n      ignore 'sq-version.txt'\n    }\n  }\n\n\n  ext.failedTests = []\n  test {\n    jvmArgs '-Dfile.encoding=UTF8'\n    maxHeapSize = '1500m'\n    systemProperty 'java.awt.headless', true\n    // Some tests are asserting on localized messages or dates\n    systemProperty 'user.language', 'en'\n    systemProperty 'user.country', 'US'\n    environment 'LANGUAGE', 'en_US'\n    testLogging {\n      events \"skipped\", \"failed\" // verbose log for failed and skipped tests (by default the name of the tests are not logged)\n      exceptionFormat 'full' // log the full stack trace (default is the 1st line of the stack trace)\n    }\n    jacoco {\n      enabled = true // do not disable recording of code coverage, so that remote Gradle cache entry can be used locally\n      includes = ['com.sonar.*', 'com.sonarsource.*', 'org.sonar.*', 'org.sonarqube.*', 'org.sonarsource.*']\n    }\n    if (project.hasProperty('maxParallelTests')) {\n      maxParallelForks = project.maxParallelTests as int\n    }\n    if (project.hasProperty('parallelTests')) {\n      // See https://guides.gradle.org/performance/#parallel_test_execution\n      maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1\n    }\n\n    afterTest { descriptor, result ->\n      if (result.resultType == TestResult.ResultType.FAILURE) {\n        String failedTest = \"  ${descriptor.className} > ${descriptor.name}\"\n        failedTests << failedTest\n      }\n    }\n  }\n\n\n  gradle.buildFinished {\n    if (!failedTests.empty) {\n      println \"\\nFailed tests:\"\n      failedTests.each { failedTest ->\n        println failedTest\n      }\n      println \"\"\n    }\n  }\n\n  def protoMainSrc = 'src/main/protobuf'\n  def protoTestSrc = 'src/test/protobuf'\n  if (file(protoMainSrc).exists() || file(protoTestSrc).exists()) {\n    // protobuf must be applied after java\n    apply plugin: 'com.google.protobuf'\n\n    sourceSets.main.proto.srcDir protoMainSrc  // in addition to the default 'src/main/proto'\n    sourceSets.test.proto.srcDir protoTestSrc  // in addition to the default 'src/test/proto'\n    protobuf {\n      protoc {\n        artifact = \"com.google.protobuf:protoc:${protobufVersion}\"\n      }\n    }\n    jar {\n      exclude('**/*.proto')\n    }\n    idea {\n      module {\n        sourceDirs += file(\"${protobuf.generatedFilesBaseDir}/main/java\")\n        testSourceDirs += file(\"${protobuf.generatedFilesBaseDir}/test/java\")\n        generatedSourceDirs += file(\"${protobuf.generatedFilesBaseDir}/main/java\")\n        generatedSourceDirs += file(\"${protobuf.generatedFilesBaseDir}/test/java\")\n      }\n    }\n    ide.dependsOn(['generateProto', 'generateTestProto'])\n  }\n\n  if (official) {\n    jar {\n      // do not break incremental build on non official versions\n      manifest {\n        attributes(\n          'Version': \"${version}\",\n          'Implementation-Build': System.getenv('GIT_SHA1'),\n          'Build-Time': new Date().format(\"yyyy-MM-dd'T'HH:mm:ssZ\")\n        )\n      }\n    }\n  }\n\n  license {\n    header = rootProject.file('HEADER')\n    ignoreFailures = project.hasProperty('ignoreLicenseFailures') ? project.getProperty('ignoreLicenseFailures').toBoolean() : true\n    strictCheck true\n    encoding = 'UTF-8'\n    mapping {\n      java = 'SLASHSTAR_STYLE'\n      js = 'SLASHSTAR_STYLE'\n      ts = 'SLASHSTAR_STYLE'\n      tsx = 'SLASHSTAR_STYLE'\n      css = 'SLASHSTAR_STYLE'\n    }\n    includes(['**/*.java', '**/*.js', '**/*.ts', '**/*.tsx', '**/*.css'])\n  }\n\n  tasks.withType(GenerateModuleMetadata) {\n    enabled = false\n  }\n\n  publishing {\n    publications {\n      mavenJava(MavenPublication) {\n        pom {\n          name = 'SonarQube'\n          description = project.description\n          url = 'https://www.sonarsource.com/products/sonarqube'\n          organization {\n            name = 'SonarSource'\n            url = 'https://www.sonarsource.com'\n          }\n          licenses {\n            license {\n              name = 'GNU LGPL 3'\n              url = 'http://www.gnu.org/licenses/lgpl.txt'\n              distribution = 'repo'\n            }\n          }\n          scm {\n            url = 'https://github.com/SonarSource/sonarqube'\n          }\n          developers {\n            developer {\n              id = 'sonarsource-team'\n              name = 'SonarSource Team'\n            }\n          }\n        }\n      }\n    }\n  }\n\n  tasks.withType(Test) {\n    configurations {\n      ddAgent\n    }\n\n    dependencies {\n      ddAgent 'com.datadoghq:dd-java-agent'\n    }\n\n    if (System.getenv('CI') == \"true\") {\n      doFirst {\n        ext {\n          ddJavaAgent = configurations.ddAgent.resolvedConfiguration.resolvedArtifacts.find { it.name == 'dd-java-agent' }\n        }\n        jvmArgs \"-javaagent:${ddJavaAgent.file}\"\n        jvmArgs \"-Ddatadog.slf4j.simpleLogger.logFile=${project.projectDir}/build/datadog.log\"\n      }\n    }\n  }\n\n  tasks.withType(BlackBoxTest) {\n    jacoco.enabled = false\n    testClassesDirs = sourceSets.bbt.output.classesDirs\n    classpath = sourceSets.bbt.runtimeClasspath\n\n    configurations {\n      includeInTestResources\n    }\n\n    dependencies {\n      bbtRuntimeOnly 'com.microsoft.sqlserver:mssql-jdbc'\n      bbtRuntimeOnly 'com.oracle.database.jdbc:ojdbc11'\n      bbtRuntimeOnly 'org.postgresql:postgresql'\n      bbtRuntimeOnly project(':plugins:sonar-xoo-plugin')\n\n      bbtImplementation 'org.sonarsource.orchestrator:sonar-orchestrator-junit4'\n      bbtImplementation project(\":sonar-testing-harness\")\n      bbtImplementation project(\":private:it-common\")\n      bbtImplementation testFixtures(project(\":sonar-ws\"))\n    }\n  }\n\n  signing {\n    def signingKeyId = findProperty(\"signingKeyId\")\n    def signingKey = findProperty(\"signingKey\")\n    def signingPassword = findProperty(\"signingPassword\")\n    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)\n    required {\n      return isMainBranch && gradle.taskGraph.hasTask(\":artifactoryPublish\")\n    }\n    sign publishing.publications\n  }\n\n  tasks.withType(Sign) {\n    onlyIf {\n      return !artifactoryPublish.skip && isMainBranch && gradle.taskGraph.hasTask(\":artifactoryPublish\")\n    }\n  }\n}\n\nstatic def applyPackageInfoTemplate(packageName) {\n  def engine = new SimpleTemplateEngine()\n  def templateText = \"@ParametersAreNonnullByDefault\\n\" +\n    \"package $packageName;\\n\" +\n    \"\\n\" +\n    \"import javax.annotation.ParametersAreNonnullByDefault;\\n\"\n  def templateParams = [\"packageName\": packageName]\n  engine.createTemplate(templateText).make(templateParams).toString()\n}\n\ngradle.projectsEvaluated { gradle ->\n  // yarn_run tasks can't all run in parallel without random issues\n  // this script ensure all yarn_run tasks run sequentially\n  def yarnRunTasks = allprojects.findResults { it -> it.tasks.findByName('yarn_run') }\n  yarnRunTasks.drop(1).eachWithIndex { it, i -> it.mustRunAfter(yarnRunTasks[0..i]) }\n}\n\next.osAdaptiveCommand = { commands ->\n  def newCommands = []\n\n  if (System.properties['os.name'].toLowerCase().contains('windows')) {\n    newCommands = ['cmd', '/c']\n  }\n\n  newCommands.addAll(commands)\n\n  return newCommands\n}\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.0419921875,
          "content": "#!/bin/sh\n\n./stop.sh\n\n./gradlew build \"$@\"\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug-server.sh",
          "type": "blob",
          "size": 0.2802734375,
          "content": "#!/bin/sh\n\n\ncd sonar-application/target/\nif ! ls sonarqube-*/bin/sonar-application*.jar &> /dev/null; then\n  unzip sonarqube-*.zip\nfi\n\ncd sonarqube-*\njava -jar ./lib/sonar-application*.jar -Dsonar.web.javaAdditionalOpts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.6328125,
          "content": "group=org.sonarsource.sonarqube\nversion=25.2\n# End Of Life date for the version. MMF-3763. format is yyyy-MM-dd\n# 6 months from the release date for non LTA versions\n# 30 months from the release date for LTA versions\n# No change required for patch versions\nversionEOL=2026-07-01\npluginApiVersion=11.1.0.2693\ndescription=Open source platform for continuous inspection of code quality\nprojectTitle=SonarQube\norg.gradle.jvmargs=-Xmx2048m\norg.gradle.caching=true\norg.gradle.vfs.watch=true\nelasticSearchServerVersion=8.16.1\nprojectType=application\nartifactoryUrl=https://repox.jfrog.io/repox\njre_release_name=jdk-17.0.13+11\nwebappVersion=2025.1.0.10869\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "logs.sh",
          "type": "blob",
          "size": 0.0146484375,
          "content": "scripts/logs.sh"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 2.490234375,
          "content": "pluginManagement {\n  repositories {\n    def artifactoryPassword = System.env.'ARTIFACTORY_PRIVATE_PASSWORD'\n\n    maven {\n      if (artifactoryPassword) {\n        url 'https://repox.jfrog.io/repox/plugins.gradle.org/'\n        authentication {\n          header(HttpHeaderAuthentication)\n        }\n        credentials(HttpHeaderCredentials) {\n          name = \"Authorization\"\n          value = \"Bearer $artifactoryPassword\"\n        }\n      } else {\n        url 'https://plugins.gradle.org/m2/'\n      }\n    }\n  }\n  plugins {\n    id 'com.bmuschko.docker-remote-api' version '9.4.0'\n    id 'org.ajoberstar.grgit' version '4.1.1'\n  }\n}\n\nrootProject.name = 'sonarqube'\n\ninclude 'plugins:sonar-xoo-plugin'\ninclude 'plugins:sonar-education-plugin'\n\ninclude 'server:sonar-auth-common'\ninclude 'server:sonar-auth-bitbucket'\ninclude 'server:sonar-auth-github'\ninclude 'server:sonar-auth-gitlab'\ninclude 'server:sonar-auth-ldap'\ninclude 'server:sonar-auth-saml'\ninclude 'server:sonar-ce'\ninclude 'server:sonar-ce-common'\ninclude 'server:sonar-ce-task'\ninclude 'server:sonar-ce-task-projectanalysis'\ninclude 'server:sonar-db-core'\ninclude 'server:sonar-db-dao'\ninclude 'server:sonar-db-migration'\ninclude 'server:sonar-main'\ninclude 'server:sonar-process'\ninclude 'server:sonar-server-common'\ninclude 'server:sonar-telemetry'\ninclude 'server:sonar-telemetry-core'\ninclude 'server:sonar-webserver'\ninclude 'server:sonar-webserver-api'\ninclude 'server:sonar-webserver-auth'\ninclude 'server:sonar-webserver-common'\ninclude 'server:sonar-webserver-core'\ninclude 'server:sonar-webserver-es'\ninclude 'server:sonar-webserver-webapi'\ninclude 'server:sonar-webserver-webapi-v2'\ninclude 'server:sonar-webserver-pushapi'\ninclude 'server:sonar-webserver-ws'\ninclude 'server:sonar-alm-client'\ninclude 'server:sonar-webserver-monitoring'\n\ninclude 'sonar-application'\ninclude 'sonar-core'\ninclude 'sonar-sarif'\ninclude 'sonar-duplications'\ninclude 'sonar-markdown'\ninclude 'sonar-plugin-api-impl'\ninclude 'sonar-scanner-engine'\ninclude 'sonar-scanner-engine-shaded'\ninclude 'sonar-scanner-protocol'\ninclude 'sonar-shutdowner'\ninclude 'sonar-testing-harness'\ninclude 'sonar-testing-ldap'\ninclude 'sonar-ws'\ninclude 'sonar-ws-generator'\n\next.isCiServer = System.getenv().containsKey(\"CIRRUS_CI\")\n\n// use Settings.getRootDir() so that it doesn't matter which directory you are executing from\nFile extraSettings = new File(rootDir, 'private/private-settings.gradle')\nif (extraSettings.exists()) {\n  apply from: extraSettings\n}\n\nbuildCache {\n  local {\n    enabled = !isCiServer\n  }\n}\n\n"
        },
        {
          "name": "sonar-application",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-duplications",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-markdown",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-plugin-api-impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-sarif",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-scanner-engine-shaded",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-scanner-engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-scanner-protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-shutdowner",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-testing-harness",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-testing-ldap",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-ws-generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-ws",
          "type": "tree",
          "content": null
        },
        {
          "name": "start.sh",
          "type": "blob",
          "size": 0.015625,
          "content": "scripts/start.sh"
        },
        {
          "name": "stop.sh",
          "type": "blob",
          "size": 0.0146484375,
          "content": "scripts/stop.sh"
        },
        {
          "name": "wss-unified-agent.config",
          "type": "blob",
          "size": 0.7294921875,
          "content": "# Mend documentation https://docs.mend.io/bundle/unified_agent/page/unified_agent_configuration_parameters.html\n\nexcludes=**/*it-* **/*test*\nincludes=**/*.java **/*.js **/*.ts\nfileSystemScan=False\n\ngradle.resolveDependencies=True\ngradle.aggregateModules=True\ngradle.preferredEnvironment=wrapper\ngradle.innerModulesAsDependencies=True\ngradle.ignoredConfigurations=.*test.* .*bbt.*\ngradle.excludeModules=.*it-.* .*sonar-ws-generator.* .*sonar-testing-ldap.* .*sonar-testing-harness.*\n\nnpm.includeDevDependencies=False\nnpm.resolveDependencies=True\nnpm.resolveLockFile=False\nnpm.runPreStep=False\nnpm.yarnProject=True\n\ncase.sensitive.glob=false\narchiveIncludes=**/*.jar\n\nforceUpdate=true\ncheckPolicies=true\nforceUpdate.failBuildOnPolicyViolation=false\n"
        }
      ]
    }
  ]
}