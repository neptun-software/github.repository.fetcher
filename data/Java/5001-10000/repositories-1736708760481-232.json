{
  "metadata": {
    "timestamp": 1736708760481,
    "page": 232,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vavr-io/vavr",
      "stars": 5803,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2451171875,
          "content": "# -- Maven\ntarget\n*.versionsBackup\n\n# -- Gradle\n.gradle\nbuild\n\n# -- Eclipse\n.classpath\n.project\n.settings\nbin\n\n# -- IntelliJ IDEA\n.idea\n*.iml\n\n# -- Visual Studio Code\n.vscode\n\n# -- Mac OS\n.DS_Store\n*.log\n\n# -- Java\nhs_err_pid*\n*.class\n\n# -- Emacs\n.#*\n"
        },
        {
          "name": ".ide",
          "type": "tree",
          "content": null
        },
        {
          "name": ".javadoc",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.03125,
          "content": "# How to Contribute\n\nVavr needs to be compiled with **jdk 1.8.0_40** at a minimum, which fixes many type inference bugs of the java compiler.\n\n[Fork](https://help.github.com/articles/fork-a-repo) the GitHub, send a [pull request](https://help.github.com/articles/using-pull-requests) and keep your fork in [sync](https://help.github.com/articles/syncing-a-fork/) with the upstream repository.\n\n## Building\n\nSome people have reported problems building Vavr on their platforms. You should be able to build Vavr with Java 8 or above, but on some platforms (operating systems or distributions), you might need to choose from a narrower range of versions of Java, Maven, and the Scala plugin for Maven. See [this issue](https://github.com/vavr-io/vavr/issues/2321) for details.\n\n## IDE\n\nWe use recent IDE version to develop Vavr. IntelliJ IDEA is preferred over Eclipse.\n\nUsing IntelliJ IDEA, the Community Edition works out-of-the-box. The idea-settings.jar can be found in the repo.\n\nThe IDEA settings include:\n\n* Code Style\n* File templates\n* Inspection profiles\n\n## Coding Conventions\n\nWe follow _Rob Pike's 5 Rules of Programming_:\n\n> * **Rule 1. You can't tell where a program is going to spend its time.** Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is.\n> * **Rule 2. Measure.** Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.\n> * **Rule 3. Fancy algorithms are slow when n is small, and n is usually small.** Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy. (Even if n does get big, use Rule 2 first.)\n> * **Rule 4. Fancy algorithms are buggier than simple ones, and they're much harder to implement.** Use simple algorithms as well as simple data structures.\n> * **Rule 5. Data dominates.** If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n>\n> Pike's rules 1 and 2 restate Tony Hoare's famous maxim \"Premature optimization is the root of all evil.\" Ken Thompson rephrased Pike's rules 3 and 4 as \"When in doubt, use brute force.\". Rules 3 and 4 are instances of the design philosophy KISS. Rule 5 was previously stated by Fred Brooks in The Mythical Man-Month. Rule 5 is often shortened to \"write stupid code that uses smart objects\".\n\n_Source: http://users.ece.utexas.edu/~adnan/pike.html_\n\n### Javadoc\n\n* Public API needs javadoc, e.g. public classes and public methods.\n* Non-trivial private methods need javadoc, too.\n* A package, which is part of the public API, contains a `package-info.java`.\n* Unit tests contain no javadoc at all (because they introduce no new API and contain no business logic).\n* Running `mvn javadoc:javadoc` results in no javadoc errors.\n* All classes start with the following copyright notice in order to apply the Apache-2.0 license:\n\n```java\n/* ____  ______________  ________________________  __________\n * \\   \\/   /      \\   \\/   /   __/   /      \\   \\/   /      \\\n *  \\______/___/\\___\\______/___/_____/___/\\___\\______/___/\\___\\\n *\n * Copyright 2014-2025 Vavr, https://vavr.io\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n### Packages\n\n* There is only one first-level package: io.vavr.\n* The maximum package depth is two.\n* Package names are denoted in the singular.\n* Packages are sliced by domain (no util or tool packages).\n* Package private classes are used in order to hide non-public API.\n* Inner classes are preferred over package private classes in case of one-to-one dependencies.\n\n### File structure\n\nWe organize our classes and interfaces in the following way:\n\n* The Javadoc of the type contains an overview of the new (i.e. not overridden) API declared in the actual type.\n* The type consists of three sections:\n   1. static API\n   2. non-static API\n   3. adjusted return types\n* The methods of each of these sections are alphabetically ordered. \n\n```java\n/**\n * Description of this class.\n * \n * <ul>\n * <li>{@link #containsKey(Object)}}</li>\n * <li>{@link ...}</li>\n * </ul>\n * \n * @author ...\n */\npublic interface Map<K, V> extends Traversable<Tuple2<K, V>> {\n    \n    // -- static API\n    \n    static <K, V> Tuple2<K, V> entry(K key, V value) { ... }\n    \n    ...\n    \n    // -- non-static API\n\n    @Override\n    default boolean contains(Tuple2<K, V> element) { ... }\n    \n    boolean containsKey(K key);\n    \n    ...\n    \n    // -- Adjusted return types\n\n    @Override\n    Map<K, V> distinct();\n    \n    ...\n    \n}\n```\n\n### Unit tests\n\n* Public API is tested.\n* High-level functionality is tested in first place.\n* Corner cases are tested.\n* Trivial methods are not _directly_ tested, e.g. getters, setters.\n* The test method name documents the test, i.e. 'shouldFooWhenBarGivenBaz'\n* In most cases it makes sense to run one assertion per @Test.\n\n### 3rd party libraries\n\n* Vavr has no dependencies other than Java.\n* Unit tests depend solely on junit and assertj.\n* Benchmarks are done with JMH\n\n## Build\n\n### Useful Maven Goals\n\n* Executing tests: `mvn clean test`\n* Executing doclint: `mvn javadoc:javadoc`\n* Executing code coverage report: `mvn -P ci clean test jacoco:report`\n* Create -javadoc.jar: `mvn javadoc:jar`\n* Create -source.jar: `mvn source:jar`\n* Update version properties: `mvn versions:update-properties`\n* Check for new plugin version: `mvn versions:display-plugin-updates`\n\n### Benchmarks\n\nIf you have dedicated hardware (i.e. no virtual machines) and are interested in how Vavr compares to other alternatives,\nyou can run all benchmarks from the `vavr-benchmark` module via `io.vavr.JmhRunner.main` or running the following Maven command:\n\n```bash\nmvn clean test -P benchmark -pl vavr-benchmark \n```\n\nNote: running all the tests will require several hours, during which there should be no other activity done on the given machine.\n\n### Releasing\n\nSee http://central.sonatype.org/pages/ossrh-guide.html\n\nSonatype-Nexus specific maven configuration: `~/.m2/settings.xml`\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>sonatype-nexus-snapshots</id>\n      <username>your-jira-id</username>\n      <password>your-jira-pwd</password>\n    </server>\n    <server>\n      <id>sonatype-nexus-staging</id>\n      <username>your-jira-id</username>\n      <password>your-jira-pwd</password>\n    </server>\n  </servers>\n</settings>\n```\n\nNote: Detailed information about performing a release can be found in the SCM section.\n\n## SCM\n\n* Commits are coarsely granular grouped by feature/change.\n* Commits do not mix change sets of different domains/purpose.\n* Commit messages provide enough detail to extract a changelog for a new release.\n\n\n### Branching Model\n\nWe following a simple git workflow/branching model:\n\n```\n                         master\n                           |\n                           |     v2.0.x\nrelease v2.0.0 - - - - - - + - - - + 2.0.1-SNAPSHOT\n                           |       |\n                  bugfix1  |       |\n                     |     |       |\n                  PR x---->|<------+ cherry-picking bugfix1\n                           |       |\n                  featureA |       |\n                     |     |       |\n                  PR x---->|       |\n                           |       |\nrelease v2.0.1 - - - - - - | - - - + 2.0.2-SNAPSHOT\n                           |       |\n                           |       |     v2.1.x\nrelease v2.1.0 - - - - - - + - - - X - - - + 2.1.1-SNAPSHOT\n                           |               |\n                           |               |\n                  featureB |               |\n                     |     |               |\n                  PR x---->|               |\n                          ...             ...\n```\n\n## Versioning\n\nWe follow the [Semantic Versioning](http://semver.org) scheme.\n\n### Backward compatibility\n\nWe distinguish between 3 kinds of (backward-)compatibilty:\n\n1. **Source** - Source compatibility concerns translating Java source code into class files.\n2. **Binary** - Binary compatibility is [defined](http://java.sun.com/docs/books/jls/third_edition/html/binaryComp.html#13.2) in The Java Language Specification as preserving the ability to link without error.\n3. **Behavioral** - Behavioral compatibility includes the semantics of the code that is executed at runtime.\n\n_Source: [OpenJDK Developers Guide v0.777, Kinds of Compatibility](http://cr.openjdk.java.net/~darcy/OpenJdkDevGuide/OpenJdkDevelopersGuide.v0.777.html#compatibility)_\n\nGiven a version number `<major>.<minor>.<path>` Vavr\n\n* may affect **behavioral** compatibility in **all kind of releases**, especially bug fix/patch releases. For example we might decide to release a more effective hashing algorithm in the next minor release that reduces the probability of collisions.\n* may affect **source** compatibility in **patch** releases. For example this may be the case when generic type bounds of method signatures need to be fixed.\n* retains **binary** backwards compatibility (drop in replacement jar) within the same **minor** version (this includes **patch** versions)\n* is not **binary** backward compatible when the **major** version changes\n\nSumming up, drop-in replacements of Vavr can be made for **minor** and **patch** releases.\n\n### Tool Support\n\nWe currently check for API changes (which may affect the binary compatibility) using the maven-bundle-plugin:\n\n```bash\nmvn package org.apache.felix:maven-bundle-plugin:baseline -DcomparisonVersion=2.0.1 -DskipTests\n```\n\nIn the example above we check API changes between the current branch and the _2.0.1_ tag. In most cases the tag should be the latest official release. \n\n### Major release\n\n#### Performing a release\n\nPerforming a release requires admin-rights.\n\n1. get a fresh copy of the repo `git clone https://github.com/vavr-io/vavr.git`\n2. run `mvn clean test` and(!) `mvn javadoc:javadoc` to ensure all is working fine\n3. perform the release\n\n    ```bash\n    mvn release:clean\n    mvn release:prepare\n    mvn release:perform\n    ```\n\n4. Go to `http://oss.sonatype.org` and stage the release.\n\n#### Post-Release steps (e.g. for release v2.1.0)\n\n1. [CAUTION] Delete the old maintenance branch (e.g. v2.0.x)\n\n    ```bash\n    git push origin :v2.0.x\n    ```\n\n2. Create the new _maintenance branch_ (e.g. v2.1.x) based on the new release tag (e.g. v2.1.0)\n\n    ```bash\n    git checkout origin/master\n    git fetch origin\n    git branch v2.1.x v2.1.0\n    git checkout v2.1.x\n    git push origin v2.1.x\n    ```\n\n3. Update the version of the _maintenance branch_\n\n    ```bash\n    mvn versions:set -DnewVersion=2.1.1-SNAPSHOT\n    ```\n\nWhen a maintenance release is performed, we increase the last digit of the new development version of the maintenance branch (e.g. 2.1.2-SNAPSHOT).\n\n#### Merging specific commits into the maintenance branch\n\nPull requests are merged into master. Only specific commits are merged from master into the maintenance branch.\n\n```bash\ngit checkout v2.1.x\ngit log --date-order --date=iso --graph --full-history --all --pretty=format:'%x08%x09%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold green)%aN%C(reset)%C(bold yellow)%d %C(reset)%s'\n# pick one or more commits from the log, e.g. a741cf1.\ngit cherry-pick a741cf1\n```\n\n### Bugfix release\n\n#### Steps to bugfix and perform a release\n\nGiven a release 1.2.2, we create a bugfix release as follows.\n\nFirst, we clone the repository. We work on origin instead of a fork (this requires admin rights).\n\n```bash\ngit clone https://github.com/vavr-io/vavr.git vavr-1.2.3\n```\n\nWe checkout the release tag and create a new (local) branch.\n\n```bash\ngit checkout v1.2.2\ngit checkout -b bugfix-release-1.2.3\n```\n\nThen we create the new snapshot version.\n\n```bash\nmvn versions:set -DnewVersion=1.2.3-SNAPSHOT\n```\n\nNow the changes can be performed to the repository. After that, we test the changes.\n\n```bash\nmvn clean test\nmvn javadoc:javadoc\n```\n\nThen the new files can be added and the changes can be committed.\n\n```bash\ngit add <files>\ngit commit -a -m \"fixes #<issue>\"\n```\n\nThen we perform the release as usual:\n\n```bash\nmvn release:clean\nmvn release:prepare\nmvn release:perform\n```\n\nGoto oss.sonatype.org and release to Maven Central.\n\n#### Housekeeping\n\nDelete the branch which was pushed by the maven release plugin to origin:\n\n```bash\ngit checkout master\ngit branch -D bugfix-release-1.2.3\ngit push origin :bugfix-release-1.2.3\n```\n\n### Release notes\n\nFor major, minor and bugfix releases we create release notes on Github.\n\n#### Useful commands\n\nThe number of lines changed by author since a specific date:\n\n```bash\ngit ls-files -z | xargs -0n1 git blame -w --since=\"3/18/2016\" --line-porcelain | grep -a \"^author \" | sort -f | uniq -c | sort -n -r\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.33203125,
          "content": "# Vavr\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n[![GitHub Release](https://img.shields.io/github/release/vavr-io/vavr.svg?style=flat-square)](https://github.com/vavr-io/vavr/releases)\n![Maven Central Version](https://img.shields.io/maven-central/v/io.vavr/vavr?versionPrefix=0)\n[![Build Status](https://github.com/vavr-io/vavr/actions/workflows/ci.yml/badge.svg)](https://github.com/vavr-io/vavr/actions/workflows/ci.yml)\n[![Code Coverage](https://codecov.io/gh/vavr-io/vavr/branch/master/graph/badge.svg)](https://codecov.io/gh/vavr-io/vavr)\n\n```text\n ____  ______________  ________________________  __________\n \\   \\/   /      \\   \\/   /   __/   /      \\   \\/   /      \\\n  \\______/___/\\___\\______/___/_____/___/\\___\\______/___/\\___\\\n```\n\nVavr is an object-functional language extension to Java 8 that aims to reduce the number of lines of code and increase code quality.\nIt provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nVavr fuses the power of object-oriented programming with the elegance and robustness of functional programming.\nThe most interesting part is a feature-rich, persistent collection library that smoothly integrates with Java's standard collections.\n\nBecause Vavr does not depend on any libraries (other than the JVM), you can easily add it as a standalone _.jar_ to your classpath.\n\n### Stargazers over time\n[![Stargazers over time](https://starchart.cc/vavr-io/vavr.svg?variant=adaptive)](https://starchart.cc/vavr-io/vavr)\n\n## Using Vavr\n\nSee [User Guide](http://docs.vavr.io) and/or [Javadoc](http://www.javadoc.io/doc/io.vavr/vavr).\n\n### Useful Maven Goals\n\n* Executing tests: `mvn clean test`\n* Executing doclint: `mvn javadoc:javadoc`\n* Executing code coverage report: `mvn -P ci clean test jacoco:report`\n* Create -javadoc.jar: `mvn javadoc:jar`\n* Create -source.jar: `mvn source:jar`\n\n### Contributing\n\nCurrently, there are two significant branches:\n- `main` (represents a stream of work leading to the release of a new ma version)\n- `version/1.x` (historical work that went into `1.0.0-alpha-3`, treat is as read-only - will be kept around for cherry-picking)\n\nA small number of users have reported problems building Vavr. Read our [contribution guide](./CONTRIBUTING.md) for details.\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 26.474609375,
          "content": "<!--\n\nBefore creating a pull request, the following goals should be executed locally:\n\n* Executing tests: `mvn clean test`\n* Executing doclint: `mvn javadoc:javadoc`\n\nTests & Code coverage:\n\n* Executing benchmark assertions: `mvn clean test -Pbenchmark`\n* Executing benchmarks (long running!): `mvn test -Pbenchmark -pl vavr-benchmark`\n* Executing code coverage report: `mvn -P ci clean test jacoco:report`\n\nWe use these goals frequently to keep the dependencies and plugins up-to-date:\n\n* Update version properties: `mvn versions:update-properties`\n* Check for new plugin version: `mvn versions:display-plugin-updates`\n\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>io.vavr</groupId>\n    <artifactId>vavr-parent</artifactId>\n    <version>0.10.6-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>Vavr Parent</name>\n    <description>Vavr (formerly called Javaslang) is an object-functional language extension to Java 8+.</description>\n    <modules>\n        <module>vavr</module>\n    </modules>\n    <url>https://vavr.io</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <scm>\n        <connection>scm:git:git@github.com:vavr-io/vavr.git</connection>\n        <developerConnection>scm:git:git@github.com:vavr-io/vavr.git</developerConnection>\n        <url>git@github.com:vavr-io/vavr.git</url>\n        <tag>HEAD</tag>\n    </scm>\n    <developers>\n        <developer>\n            <id>pivovarit</id>\n            <name>Grzegorz Piwowarek</name>\n            <email>gpiwowarek@gmail.com</email>\n        </developer>\n        <developer>\n            <id>danieldietrich</id>\n            <name>Daniel Dietrich</name>\n            <email>cafebab3@gmail.com</email>\n        </developer>\n    </developers>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <assertj.core.version>3.27.2</assertj.core.version>\n        <eclipse.lifecycle.mapping.version>1.0.0</eclipse.lifecycle.mapping.version>\n        <java.version>1.8</java.version>\n        <jmh.version>1.37</jmh.version>\n        <junit.version>5.11.4</junit.version>\n        <maven.enforcer.version>3.5.0</maven.enforcer.version>\n        <maven.build-helper.version>3.6.0</maven.build-helper.version>\n        <maven.bundle.version>5.1.9</maven.bundle.version>\n        <maven.clean.version>3.4.0</maven.clean.version>\n        <maven.install.version>3.1.3</maven.install.version>\n        <maven.compiler.version>3.13.0</maven.compiler.version>\n        <maven.deploy.version>3.0.0-M1</maven.deploy.version>\n        <maven.gpg.version>3.2.7</maven.gpg.version>\n        <maven.jacoco.version>0.8.12</maven.jacoco.version>\n        <maven.jar.version>3.4.2</maven.jar.version>\n        <maven.javadoc.version>3.11.2</maven.javadoc.version>\n        <maven.release.version>3.1.1</maven.release.version>\n        <maven.versions.version>2.18.0</maven.versions.version>\n        <maven.surefire.version>3.5.2</maven.surefire.version>\n        <maven.source.version>3.3.1</maven.source.version>\n        <maven.exec.version>3.5.0</maven.exec.version>\n        <moditect.version>1.2.2.Final</moditect.version>\n        <scala.maven.version>4.9.2</scala.maven.version>\n        <scala.version>3.5.1</scala.version>\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.junit.jupiter</groupId>\n                <artifactId>junit-jupiter</artifactId>\n                <version>${junit.version}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.assertj</groupId>\n                <artifactId>assertj-core</artifactId>\n                <version>${assertj.core.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.openjdk.jmh</groupId>\n                <artifactId>jmh-generator-annprocess</artifactId>\n                <version>${jmh.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-enforcer-plugin</artifactId>\n                <version>${maven.enforcer.version}</version>\n                <executions>\n                    <execution>\n                        <id>enforce-maven</id>\n                        <goals>\n                            <goal>enforce</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <requireMavenVersion>\n                                    <version>3.5.3</version>\n                                    <message>Minimum required Maven version to build vavr is 3.5.3</message>\n                                </requireMavenVersion>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>${maven.versions.version}</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-install-plugin</artifactId>\n                <version>${maven.install.version}</version>\n            </plugin>\n        </plugins>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.moditect</groupId>\n                    <artifactId>moditect-maven-plugin</artifactId>\n                    <version>${moditect.version}</version>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-clean-plugin</artifactId>\n                    <version>${maven.clean.version}</version>\n                    <executions>\n                        <execution>\n                            <id>clean-generated-sources</id>\n                            <phase>generate-sources</phase>\n                            <goals>\n                                <goal>clean</goal>\n                            </goals>\n                            <configuration>\n                                <filesets>\n                                    <fileset>\n                                        <directory>${project.basedir}/src-gen</directory>\n                                    </fileset>\n                                </filesets>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>net.alchim31.maven</groupId>\n                    <artifactId>scala-maven-plugin</artifactId>\n                    <version>${scala.maven.version}</version>\n                    <configuration>\n                        <scalaVersion>${scala.version}</scalaVersion>\n                        <failOnMultipleScalaVersions>true</failOnMultipleScalaVersions>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <phase>generate-sources</phase>\n                            <goals>\n                                <goal>script</goal>\n                            </goals>\n                            <configuration>\n                                <includeScopes>plugin</includeScopes>\n                                <scriptFile>${project.basedir}/generator/Generator.scala</scriptFile>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-release-plugin</artifactId>\n                    <version>${maven.release.version}</version>\n                    <configuration>\n                        <!-- Simple tag names -->\n                        <tagNameFormat>v@{project.version}</tagNameFormat>\n                        <!-- Circumvent maven-gpg-plugin bug -->\n                        <mavenExecutorId>forked-path</mavenExecutorId>\n                        <useReleaseProfile>false</useReleaseProfile>\n                        <!-- Honor arguments passed via command line -->\n                        <arguments>${arguments} -Psonatype-oss-release</arguments>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>build-helper-maven-plugin</artifactId>\n                    <version>${maven.build-helper.version}</version>\n                    <executions>\n                        <execution>\n                            <id>add-source</id>\n                            <phase>generate-sources</phase>\n                            <goals>\n                                <goal>add-source</goal>\n                            </goals>\n                            <configuration>\n                                <sources>\n                                    <source>${project.basedir}/src-gen/main/java</source>\n                                    <source>${project.build.directory}/generated-sources/annotations</source>\n                                </sources>\n                            </configuration>\n                        </execution>\n                        <execution>\n                            <id>add-test-source</id>\n                            <phase>generate-sources</phase>\n                            <goals>\n                                <goal>add-test-source</goal>\n                            </goals>\n                            <configuration>\n                                <sources>\n                                    <source>${project.basedir}/src-gen/test/java</source>\n                                    <source>${project.build.directory}/generated-test-sources/test-annotations</source>\n                                </sources>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>${maven.compiler.version}</version>\n                    <configuration>\n                        <source>${java.version}</source>\n                        <target>${java.version}</target>\n                        <showDeprecation>true</showDeprecation>\n                        <showWarnings>true</showWarnings>\n                        <compilerArgs>\n                            <arg>-Werror</arg>\n                            <arg>-Xlint:all</arg>\n                            <!-- Workaround for JDK bug https://bugs.openjdk.java.net/browse/JDK-6999068 -->\n                            <arg>-Xlint:-processing</arg>\n                            <!-- Enable Java 9 compilation with 1.8 compatibility -->\n                            <arg>-Xlint:-options</arg>\n                        </compilerArgs>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-deploy-plugin</artifactId>\n                    <version>${maven.deploy.version}</version>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-jar-plugin</artifactId>\n                    <version>${maven.jar.version}</version>\n                    <configuration>\n                        <skipIfEmpty>true</skipIfEmpty>\n                        <archive>\n                            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n                        </archive>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <version>${maven.javadoc.version}</version>\n                    <configuration>\n                        <links>\n                            <link>https://docs.oracle.com/javase/8/docs/api/</link>\n                        </links>\n                        <stylesheetfile>${basedir}/../.javadoc/stylesheet.css</stylesheetfile>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.felix</groupId>\n                    <artifactId>maven-bundle-plugin</artifactId>\n                    <version>${maven.bundle.version}</version>\n                    <executions>\n                        <execution>\n                            <id>bundle-manifest</id>\n                            <phase>process-classes</phase>\n                            <goals>\n                                <goal>manifest</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                    <version>${maven.surefire.version}</version>\n                    <configuration>\n                        <!-- ForkJoinPool parallelism for io.vavr.concurrent.Future.\n\t                             Typically this is the number of cores by default.\n\t                             In the travis-ci build env this is currently set to 1. -->\n                        <!--<argLine>-Djava.util.concurrent.ForkJoinPool.common.parallelism=1</argLine>-->\n                        <parallel>all</parallel>\n                        <threadCount>4</threadCount>\n                        <reuseForks>true</reuseForks>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n    <profiles>\n        <!-- A profile for code coverage analysis in ci environments -->\n        <profile>\n            <id>ci</id>\n            <activation>\n                <property>\n                    <name>env.CI</name>\n                </property>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.jacoco</groupId>\n                        <artifactId>jacoco-maven-plugin</artifactId>\n                        <version>${maven.jacoco.version}</version>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>prepare-agent</goal>\n                                </goals>\n                            </execution>\n                            <execution>\n                                <id>report</id>\n                                <phase>test</phase>\n                                <goals>\n                                    <goal>report</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>sonatype-oss-release</id>\n            <modules>\n                <module>vavr</module>\n            </modules>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>${maven.source.version}</version>\n                        <executions>\n                            <execution>\n                                <id>attach-sources</id>\n                                <phase>prepare-package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                    <goal>test-jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>3.11.2</version>\n                        <executions>\n                            <execution>\n                                <id>attach-javadocs</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <links>\n                                <link>https://docs.oracle.com/javase/8/docs/api/</link>\n                            </links>\n                            <stylesheetfile>${basedir}/../.javadoc/stylesheet.css</stylesheetfile>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>3.2.7</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                                <configuration>\n                                    <gpgArguments>\n                                        <arg>--pinentry-mode</arg>\n                                        <arg>loopback</arg>\n                                    </gpgArguments>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-deploy-plugin</artifactId>\n                        <configuration>\n                            <skip>true</skip>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.sonatype.plugins</groupId>\n                        <artifactId>nexus-staging-maven-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>deploy-to-sonatype</id>\n                                <phase>deploy</phase>\n                                <goals>\n                                    <goal>deploy</goal>\n                                    <goal>release</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <serverId>oss.sonatype.org</serverId>\n                            <nexusUrl>https://oss.sonatype.org</nexusUrl>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <!-- A profile for eliminating eclipse m2e warnings -->\n        <profile>\n            <id>eclipse-m2e</id>\n            <activation>\n                <property>\n                    <name>m2e.version</name>\n                </property>\n            </activation>\n            <build>\n                <pluginManagement>\n                    <plugins>\n                        <plugin>\n                            <groupId>org.eclipse.m2e</groupId>\n                            <artifactId>lifecycle-mapping</artifactId>\n                            <version>${eclipse.lifecycle.mapping.version}</version>\n                            <configuration>\n                                <lifecycleMappingMetadata>\n                                    <pluginExecutions>\n                                        <!-- Elimate the eclipse warning 'maven-enforcer-plugin (goal \"enforce\")\n                                            is ignored by m2e' -->\n                                        <pluginExecution>\n                                            <pluginExecutionFilter>\n                                                <groupId>org.apache.maven.plugins</groupId>\n                                                <artifactId>maven-enforcer-plugin</artifactId>\n                                                <versionRange>[0,)</versionRange>\n                                                <goals>\n                                                    <goal>enforce</goal>\n                                                </goals>\n                                            </pluginExecutionFilter>\n                                            <action>\n                                                <ignore />\n                                            </action>\n                                        </pluginExecution>\n                                        <pluginExecution>\n                                            <pluginExecutionFilter>\n                                                <groupId>org.apache.maven.plugins</groupId>\n                                                <artifactId>maven-clean-plugin</artifactId>\n                                                <versionRange>[0,)</versionRange>\n                                                <goals>\n                                                    <goal>clean</goal>\n                                                </goals>\n                                            </pluginExecutionFilter>\n                                            <action>\n                                                <ignore />\n                                            </action>\n                                        </pluginExecution>\n                                        <pluginExecution>\n                                            <pluginExecutionFilter>\n                                                <groupId>net.alchim31.maven</groupId>\n                                                <artifactId>scala-maven-plugin</artifactId>\n                                                <versionRange>[0,)</versionRange>\n                                                <goals>\n                                                    <goal>script</goal>\n                                                </goals>\n                                            </pluginExecutionFilter>\n                                            <action>\n                                                <ignore />\n                                            </action>\n                                        </pluginExecution>\n                                        <pluginExecution>\n                                            <pluginExecutionFilter>\n                                                <groupId>org.apache.felix</groupId>\n                                                <artifactId>maven-bundle-plugin</artifactId>\n                                                <versionRange>[0,)</versionRange>\n                                                <goals>\n                                                    <goal>manifest</goal>\n                                                </goals>\n                                            </pluginExecutionFilter>\n                                            <action>\n                                                <ignore />\n                                            </action>\n                                        </pluginExecution>\n                                    </pluginExecutions>\n                                </lifecycleMappingMetadata>\n                            </configuration>\n                        </plugin>\n                    </plugins>\n                </pluginManagement>\n            </build>\n        </profile>\n        <!-- A profile for running the benchmarks -->\n        <profile>\n            <id>benchmark</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>exec-maven-plugin</artifactId>\n                        <version>${maven.exec.version}</version>\n                        <executions>\n                            <execution>\n                                <phase>test</phase>\n                                <goals>\n                                    <goal>exec</goal>\n                                </goals>\n                                <configuration>\n                                    <classpathScope>test</classpathScope>\n                                    <executable>java</executable>\n                                    <arguments>\n                                        <argument>-classpath</argument>\n                                        <classpath />\n                                        <argument>io.vavr.JmhRunner</argument>\n                                    </arguments>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n                <pluginManagement>\n                    <plugins>\n                        <plugin>\n                            <groupId>org.apache.maven.plugins</groupId>\n                            <artifactId>maven-surefire-plugin</artifactId>\n                            <version>${maven.surefire.version}</version>\n                            <configuration>\n                                <!-- Fixes \"Unable to acquire the JMH lock\" error -->\n                                <parallel>none</parallel>\n                            </configuration>\n                        </plugin>\n                    </plugins>\n                </pluginManagement>\n            </build>\n        </profile>\n    </profiles>\n\n    <distributionManagement>\n        <repository>\n            <id>sonatype-nexus-staging</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n        <snapshotRepository>\n            <id>sonatype-nexus-snapshots</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n</project>\n"
        },
        {
          "name": "update_copyright.sh",
          "type": "blob",
          "size": 0.50390625,
          "content": "#!/bin/bash\n\n# ==\n# == New-year script, tested on a Mac\n# ==\n\n# Prevent sed error 'illegal byte sequence'\nexport LC_ALL=C LC_CTYPE=C LANG=C\n\nnewYear=$(date +'%Y')\necho \"Updating copyright notice to $newYear\"\n\n# Exclude specific directories: -type d \\( -path ./.git -o -path ./.ide \\) -prune -o\n# Make sed work on Mac: sed -e\n# Prevent making backups: -i ''\nfind . -type d \\( -path ./.git -o -path ./.ide \\) -prune -o -type f -print0 | xargs -0 sed -i '' -e \"s/Copyright 2014-2025 Vavr/Copyright 2014-$newYear Vavr/\"\n"
        },
        {
          "name": "vavr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}