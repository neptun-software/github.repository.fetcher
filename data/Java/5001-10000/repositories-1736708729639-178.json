{
  "metadata": {
    "timestamp": 1736708729639,
    "page": 178,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WuKongOpenSource/WukongCRM-11.0-JAVA",
      "stars": 6413,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": ".DS_Store\n.idea/\n*.iml\nlogs/**\ntest\ntarget\n*/target/**\nrebel.xml\nrebel-remote.xml\n\n"
        },
        {
          "name": "72crm.bat",
          "type": "blob",
          "size": 0.7646484375,
          "content": "@echo off\ntitle ${project.artifactId}\nrem -------------------------------------------------------------------------\nrem\nrem 使用说明：\nrem\nrem 1: 打包时默认使用application-test.yml配置文件，如需要更改，直接更改下面的命令即可，如 -Dspring.profiles.include=core,prod\nrem\nrem -------------------------------------------------------------------------\n\nsetlocal & pushd\n\nset JAVA_OPTS=-Dspring.profiles.include=core,test\nif \"${project.artifactId}\" == \"gateway\" (\n    set JAVA_OPTS =\n)\nrem -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\njava -Xms128m -Xmx512m -jar %JAVA_OPTS% ${project.artifactId}-${project.version}.jar\n\nendlocal & popd\npause\n\n\n\n"
        },
        {
          "name": "72crm.sh",
          "type": "blob",
          "size": 1.2001953125,
          "content": "#!/bin/bash\n\nCOMMAND=\"$1\"\n\nif [[ \"$COMMAND\" != \"start\" ]] && [[ \"$COMMAND\" != \"stop\" ]] && [[ \"$COMMAND\" != \"restart\" ]]; then\n\techo \"Usage: $0 start | stop | restart\"\n\texit 0\nfi\n\nAPP_BASE_PATH=$(cd `dirname $0`; pwd)\n\nfunction start()\n{\n    JAVA_OPTS=-Dspring.profiles.include=core,test\n    if [[ \"${project.artifactId}\" == \"gateway\" ]]; then\n    \tJAVA_OPTS=\n    fi\n    # -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\n    nohup java -Xms128m -Xmx512m -jar ${JAVA_OPTS} ${project.artifactId}-${project.version}.jar >> output.log 2>&1 &\n    echo \"--------项目启动成功--------\"\n    echo \"--------欢迎使用悟空CRM ^_^--------\"\n}\n\nfunction stop()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    kill $P_ID\n    echo \"项目已关闭\"\n}\n\nfunction restart()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    start\n    sleep 25s\n    kill $P_ID\n    echo \"项目重启成功\"\n}\n\nif [[ \"$COMMAND\" == \"start\" ]]; then\n\tstart\nelif [[ \"$COMMAND\" == \"stop\" ]]; then\n    stop\nelse\n    restart\nfi\n"
        },
        {
          "name": "DB",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.564453125,
          "content": "悟空CRM开源版使用协议\n\n悟空CRM（CustomerRelationshipManagement）即：悟空客户关系管理软件（以\n下简称悟空CRM）由郑州卡卡罗特软件科技有限公司（以下简称卡卡罗特）开发。卡卡罗特\n依法拥有悟空CRM的所有版权和所有权益。本着共享开放的角度，卡卡罗特以开放源代码的\n形式发布悟空CRM，您可以在遵守该协议的前提下使用悟空CRM。\n\n自您安装悟空CRM开始，您和卡卡罗特之间的合同关系自动成立，成为卡卡罗特用户\n（以下简称为用户）。除非您停止使用悟空CRM或与卡卡罗特有签署额外合同，您须认真遵\n循该用户协议约定的每一项条款。\n\n官方地址：www.5kcrm.com/www.72crm.com\n官方电话：400-0812-558\n官方邮箱：service@5kcrm.com\n官方社区：bbs.72crm.net\n官方社群：悟空CRM交流10群（486745026）\n\n一、协议中提到的名词约定\n\n1.1下述条款中所指悟空CRM的标志包括如下方面：\n悟空CRM源代码及文档中关于悟空CRM的版权提示、文字、图片和链接。\n悟空CRM运行时界面上呈现出来的有关悟空CRM的文字、图片和链接。\n\n1.2不包括如下方面：\n悟空CRM提供的演示数据中关于悟空CRM的文字、图片和链接。\n\n二、免责声明\n\n2.1用户出于自愿而使用本软件，必须了解使用本软件的风险，在尚未购买产品技术服务或\n商业授权之前，我们不承诺对免费用户提供任何形式的技术支持、使用担保，也不承担任何因\n使用本软件而产生问题的相关责任。\n\n2.2电子文本形式的使用协议如同双方书面签署的协议一样，具有完全的和等同的法律效力。\n您一旦开始确认本协议并安装悟空CRM，即被视为完全理解并接受本协议的各项条款，在享\n有以下条款授予的权力的同时，受到相关的约束和限制。\n\n2.3协议许可范围以外的行为，将直接违反本授权协议并构成侵权，我们有权随时终止授权，\n责令停止损害，并保留追究相关责任的权利。\n\n三、协议许可的权利\n\n3.1如果您以学习或研究为目的使用悟空CRM，卡卡罗特不对您做任何限制。\n\n3.2您可以在您个人任意数量的电脑上运行悟空CRM，卡卡罗特不对电脑的数量做任何限\n制。\n\n3.3您可以对悟空CRM源代码进行修改以适应您个人学习研究的要求，您做的改动无需对\n外发布。\n\n3.4卡卡罗特依法拥有悟空CRM的所有版权和软件权益，未经商业授权，您无任何版权及\n软件相关权益。\n\n四、协议规定的约束和限制\n\n4.1当您开始将悟空CRM用于企业内部管理使用，意味着已经商用，需购买相应的商业授\n权\n\n4.2未获得商业授权之前，不得将本软件用于商业用途（包括但不限于企业内部使用、二次\n开发后进行销售、以营利为目的或实现盈利等形式）。\n\n4.3未经官方许可，禁止在悟空CRM的整体或任何部分基础上发展任何派生版本、修改版\n本或第三方版本用于重新分发,包括但不限于基于悟空CRM开发SAAS平台等相关服务。\n\n4.4如果您未能遵守本协议的条款，您的授权将被终止，所被许可的权利将被收回，并承担\n相应法律责任。\n\n4.5您使用悟空CRM时，必须保留悟空CRM的所有标志，不得以任何方式隐藏或遮掩任\n一标志。\n\n五、未尽事项\n\n如果上述条款无法满足您使用悟空CRM的要求，可联系卡卡罗特签署额外的合同以获得\n更灵活的授权许可。\n\n六、合同约束\n\n如果您违反了该协议的任一条款，该用户协议将自动终止，您必须停止使用，卡卡罗特保\n留通过法律手段追究责任的权利。\n"
        },
        {
          "name": "README.en.md",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# 72CRM-PRO\n\n#### Description\n{**When you're done, you can delete the content in this README and update the file with details for others getting started with your repository**}\n\n#### Software Architecture\nSoftware architecture description\n\n#### Installation\n\n1.  xxxx\n2.  xxxx\n3.  xxxx\n\n#### Instructions\n\n1.  xxxx\n2.  xxxx\n3.  xxxx\n\n#### Contribution\n\n1.  Fork the repository\n2.  Create Feat_xxx branch\n3.  Commit your code\n4.  Create Pull Request\n\n\n#### Gitee Feature\n\n1.  You can use Readme\\_XXX.md to support different languages, such as Readme\\_en.md, Readme\\_zh.md\n2.  Gitee blog [blog.gitee.com](https://blog.gitee.com)\n3.  Explore open source project [https://gitee.com/explore](https://gitee.com/explore)\n4.  The most valuable open source project [GVP](https://gitee.com/gvp)\n5.  The manual of Gitee [https://gitee.com/help](https://gitee.com/help)\n6.  The most popular members  [https://gitee.com/gitee-stars/](https://gitee.com/gitee-stars/)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.40234375,
          "content": "# 悟空CRM-11.0\n\n\n## 悟空CRM介绍\n\n\n悟空CRM在中国的开源管理软件行业有较高的知名度。目前软件已达到千万级的用户量，开源系统下载量达到200多万次，已覆盖设计制造业、服务业、金融业、政府机构等多种行业。与阿里巴巴、腾讯、OPPO、航天信息、CCTV等多家知名企业达成战略合作。\n\n公司先后获得河南省高新技术企业、国家3A信用企业、IOS9001、IOS27001软件产品认证等20多项荣誉奖项。拥有50余项软件著作权。 获得20余家国内媒体报道。公司自成立以来，以高科技为起点，以技术为核心、 以完善的售后服务为后盾，秉承稳固与发展、求实与创新的精神，已为国内外上万家企业提供了服务。 在为实现企业价值最大化的过程中， 实现了自身的价值的提升，取得了最大程度的双赢合作，并获得了社会各界的广泛赞誉和认同。\n\n官网地址：[http://www.5kcrm.com](http://www.5kcrm.com/)\n\n演示地址：(https://demo10.72crm.com/#/crm)  \n帐号：18688888888   密码：123456a\n\n码云地址：[https://gitee.com/wukongcrm](https://gitee.com/wukongcrm)\n\nQQ群交流群群：[1026560336](http:////shang.qq.com/wpa/qunwpa?idkey=13d5e5809eb9feb350336e55c8b7a00b9cb472078b09b4441222a52dd76b278e)\n\n\n扫码添加小悟官方客服微信，邀您加入千人微信交流群：\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1231/115927_f9c580c8_345098.png\" width=\"200\">\n\n关注悟空CRM公众号，了解更多悟空资讯\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1202/135713_d3566c6a_345098.jpeg\" width=\"200\">\n\n\n\n\n\n :boom:  :boom:  :boom: 注：悟空CRM采用全新的前后端分离模式，本仓库代码中已集成前端vue打包后文件，  **可免去打包操作，无需运行前端** 。如需调整前端代码，请单独下载前端代码\n\n\n(<a href=\"https://github.com/72wukong/72crm-11.0-web-JAVA\" target=\"_blank\">点击下载前端代码</a>) \n\n\n## 悟空CRM目录结构\n\n``` lua\nwk_crm\n├── admin         -- 系统管理模块和用户管理模块\n├── authorization -- 鉴权模块，目前仅用于登录鉴权，后期可能有更改\n├── bi            -- 商业智能模块\n├── core          -- 通用的代码和工具类\n├── crm           -- 客户管理模块\n├── examine       -- 审批模块\n├── gateway       -- 网关模块\n├── job           -- 定时任务模块\n├── oa            -- OA模块\n└── work          -- 项目管理模块\n\n\n```\n\n\n## 悟空CRM使用的主要技术栈\n\n| 名称                  | 版本                        | 说明 |\n|---------------------|---------------------------|----|\n| spring-cloud-alibaba| 2.2.1.RELEASE(Hoxton.SR3) |  核心框架  |\n| swagger             | 2.9.2                     |  接口文档  |\n| mybatis-plus        | 3.3.0                     |  ORM框架  |\n| sentinel            | 2.2.1.RELEASE             |  断路器以及限流  |\n| nacos               | 1.2.1.RELEASE             |  注册中心以及分布式配置管理  |\n| seata               | 1.2.0                     |  分布式事务 |\n| elasticsearch       | 2.2.5.RELEASE(6.8.6)      |  搜索引擎中间件  |\n| jetcache            | 2.6.0                     |  分布式缓存框架  |\n| xxl-job             | 2.1.2                     |  分布式定时任务框架  |\n| gateway             | 2.2.2.RELEASE             |  微服务网关        |\n| feign               | 2.2.2.RELEASE             |  服务调用        |\n\n\n## 悟空CRM项目架构图\n\n\n<img src=\"https://images.gitee.com/uploads/images/2020/0910/094237_e7cb3bca_1096736.jpeg\" width=\"650\">\n\n## 使用说明\n\n### 一、前置环境\n- Jdk1.8\n- Maven3.5.0+   \n- Mysql5.7.20 （<a href=\"https://github.com/72wukong/72crm-11.0-Spring/wiki/mysql配置说明\" target=\"_blank\">数据库安装注意事项</a>）\n- Redis(版本不限)\n- Elasticsearch 6.8.6 （<a href=\"https://github.com/72wukong/72crm-11.0-Spring/wiki/elasticsearch配置说明\" target=\"_blank\">环境配置注意事项</a>）\n- Seata（1.2.0）（<a href=\"https://github.com/72wukong/72crm-11.0-Spring/wiki/seata\" target=\"_blank\">配置说明</a>）\n- Sentinel（1.7.2）（项目中sentinel使用8079端口）\n- Nacos（1.2.1)\n\n### 安装\n\n### 一键安装说明\n\n本项目支持Docker一键安装（建议配置 4核16G以以上），[查看具体安装方法](https://github.com/72wukong/72crm-11.0-Spring/wiki/Docker一键安装教程)\n\n### 常见问题\n\n<a href=\"https://github.com/72wukong/72crm-11.0-Spring/wiki/常见问题以及解决方案\" target=\"_blank\">常见问题以及解决方案</a>\n\n\n\n### 手动安装说明\n     \n#### 1. 导入初始化sql,目前项目下gateway模块使用的独立数据库，其他模块使用同一数据库\n      \n\n- 安装nacos，新建数据库 `nacos` 在`nacos`数据库中运行` DB/nacos.sql`<br/>\n  修改nacos安装目录/conf/application.properties文件，修改数据持久化类型为mysql，添加mysql数据源的url、用户名和密码,配置如下。<br/>\n   \n```\n   spring.datasource.platform=mysql\n   db.num=1\n   db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true\n   db.user=root\n   db.password=password\n```\n\n- 修改gateway模块数据库配置为`nacos`数据库\n- 初始化其余模块数据库：新建数据库 `wk_crm_single` 在`wk_crm_single`数据库中运行 `DB/wk_crm_single.sql`\n- 初始化定时任务模块数据库：新建数据库 `xxl_job` 在`xxl_job`数据库中运行 `DB/xxl_job.sql`\n- 初始化seata数据库：新建数据库 `seata` 在`seata`数据库中运行 `DB/seata.sql`\n\n\n#### 2.在项目根目录执行`mvn install`\n\n\n\n#### 3.在各个模块下resource目录配置数据库帐号信息以及redis帐号信息`（默认使用的是application-dev.yml配置文件,打包后启动脚本默认使用的application-test.yml配置文件）`\n\n\n\n#### 4.在`crm\\src\\main\\resources\\application-dev.yml`里面修改elasticsearch配置\n\n        \n```\nspring.elasticsearch.rest.uris = elasticsearch地址 例：127.0.0.1:9200\nspring.elasticsearch.rest.username = elasticsearch用户名 例：elastic 无密码可留空\nspring.elasticsearch.rest.password = elasticsearch密码 例: password 无密码可留空\n\n```\n\n注意：elasticsearch [配置注意点](https://gitee.com/wukongcrm/crm_pro/wikis/elasticsearch配置说明?sort_id=2927431)\n\n#### 5.（可选）修改系统中文件上传地址，默认为本地配置，本地上传还需配置公网地址，指向服务器网关\n\n```\ncrm.upload.config:1                文件上传配置 1:本地 2:阿里云OSS \ncrm.upload.oss                     oss上传文件所需配置内容 \ncrm.upload.oss.bucketName        需要配置两个bucket，0为登录才可访问文件上传地址，1为完全公开文件上传地址\ncrm.upload.local                   本地上传文件所需配置内容 \ncrm.upload.local.uploadPath      需要配置两个地址0为登录才可访问文件上传地址，1为完全公开文件上传地址\n```\n\n#### 6.（可选）修改jetcache缓存配置详见 <a href=\"https://github.com/alibaba/jetcache/wiki\" target=\"_blank\">官方文档</a> \n\n\n#### 7.（可选）项目日志文件在`core\\src\\main\\resources\\logback-spring.xml`修改\n            \n\n#### 8. 项目打包部署\n\n\n```\n·在项目根目录下执行 mvn clean -Dmaven.test.skip=true package\n·然后把对应模块下target文件夹下\n·${name}-${version}-SNAPSHOT.zip/tar.gz上传到服务器,例：admin-0.0.1-SNAPSHOT.zip 并将压缩文件解压，检查对应配置文件。\n\n```\n\n\n#### 9. 项目启动 <br/>\n\n\n```\n先启动nacos,seata,sentinel, elasticsearch,mysql,redis等基础服务\n在第八步解压的文件模块下通过执行`sh 72crm.sh start`（windows下直接运行72crm.bat）启动各个模块服务。\n其中项目基础模块：gateway，authorization，admin必须启动，其他模块可按需启动。\n启动完成后，在浏览器中访问：http://localhost:8443/即可登录系统\n\n```\n#### 10. 初始化用户信息<br/>\n\n\n```\n访问http://localhost:8443/  \n按照提示初始化超级管理员账号和密码信息，成功之后使用初始化后的管理员账户登录系统添加其他员工，分配权限等\n\n```\n\n#### 11. 升级说明以及注意事项<br/>\n\n```\n1、后端代码更新直接下载全量代码替换即可\n2、数据库更新请下载 DB/update/V11.x.x.sql，增量执行即可（比如当前版本为V11.0.1，升级为V11.1.0需执行 V11.0.2.sql,V11.1.0.sql）\n3、docker更新请使用在线更新或手动将数据库数据备份后执行增量升级SQL，再备份至本地，然后下载新版docker镜像，将增量升级后SQL恢复至新版数据库\n\n```\n\n\n### 三、其他说明\n\n#### 1.代码生成器及接口文档<br/>\n\n\n```\n代码生成器地址：core\\src\\test\\com\\kakarote\\generator\\Generator.java\n接口文档地址`http://localhost:8443/doc.html`\n```\n\n\n#### 2.模块依赖关系 <br/>\n\n```\n- 除网关外，其余项目均依赖于admin模块，用于获取当前登录人的信息\n- oa模块的任务依赖于work模块，其余一些关联业务功能依赖于crm模块，examine模块\n- 商业智能依赖crm,oa模块\n\n```\n#### 3.更新日志<br/>\n<a href=\"https://www.72crm.com/upgrade_log\" target=\"_blank\">点击查看更新日志</a> \n<br/>\n### 四、悟空CRM功能模块预览\n\n\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172541_efed65bd_345098.png \"01.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172557_c001d047_345098.png \"02.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172612_97363074_345098.png \"03.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172625_47a2798b_345098.png \"04.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172636_ae5cad59_345098.png \"05.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172648_c7928c60_345098.png \"06.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172704_ac4c3308_345098.png \"07.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172714_84b7ee29_345098.png \"08.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172726_4552bddb_345098.png \"10.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172736_da77deec_345098.png \"11.png\")\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0928/172745_e22b7a4a_345098.png \"12.png\")\n"
        },
        {
          "name": "admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "assembly.xml",
          "type": "blob",
          "size": 1.9345703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<assembly\n        xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\">\n    <id>make-assembly</id>\n    <formats>\n        <format>zip</format>\n        <format>tar.gz</format>\n    </formats>\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <fileSets>\n        <fileSet>\n            <directory>${project.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.sh</include>\n            </includes>\n            <fileMode>755</fileMode>\n            <lineEnding>unix</lineEnding>\n        </fileSet>\n        <fileSet>\n            <directory>${project.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.bat</include>\n            </includes>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/config/</directory>\n            <outputDirectory>config</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/public/</directory>\n            <outputDirectory>public</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/lib/</directory>\n            <outputDirectory>lib</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/</directory>\n            <includes>\n                <!--<include>${pom.artifactId}-${pom.version}.jar</include>-->\n                <include>*.jar</include>\n            </includes>\n            <outputDirectory>/</outputDirectory>\n        </fileSet>\n    </fileSets>\n</assembly>"
        },
        {
          "name": "authorization",
          "type": "tree",
          "content": null
        },
        {
          "name": "bi",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "crm",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "examine",
          "type": "tree",
          "content": null
        },
        {
          "name": "gateway",
          "type": "tree",
          "content": null
        },
        {
          "name": "hrm",
          "type": "tree",
          "content": null
        },
        {
          "name": "job",
          "type": "tree",
          "content": null
        },
        {
          "name": "oa",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 7.283203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.kakarote</groupId>\n    <artifactId>wkcrm</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <name>wkcrm</name>\n    <description>悟空软件</description>\n\n    <modules>\n        <module>core</module>\n        <module>gateway</module>\n\t\t<module>admin</module>\n        <module>oa</module>\n        <module>work</module>\n\t\t<module>crm</module>\n        <module>authorization</module>\n        <module>bi</module>\n        <module>job</module>\n        <module>examine</module>\n        <module>hrm</module>\n    </modules>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <springboot.version>2.2.5.RELEASE</springboot.version>\n        <spring.cloud.version>Hoxton.SR3</spring.cloud.version>\n        <spring.cloud.alibaba.version>2.2.1.RELEASE</spring.cloud.alibaba.version>\n        <knife4j.version>2.0.7</knife4j.version>\n        <hutool.version>5.3.1</hutool.version>\n        <lombok.version>1.18.10</lombok.version>\n        <core.version>1.1.3</core.version>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>central</id>\n            <name>阿里云公共仓库</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>72crm</id>\n            <name>72crm</name>\n            <url>http://nexus.72crm.com/repository/maven-public/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <pluginRepositories>\n        <pluginRepository>\n            <id>central</id>\n            <name>阿里云公共仓库</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n\n    <dependencyManagement>\n        <dependencies>\n            <!--支持Spring Boot 2.1.X-->\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${springboot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                    <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.seata</groupId>\n                <artifactId>seata-spring-boot-starter</artifactId>\n                <version>1.2.0</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <dependencies>\n        <!--自省和监控的集成功能-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <!--注册中心-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n        <!--配置中心-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n        </dependency>\n        <!--服务调用-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.github.openfeign</groupId>\n            <artifactId>feign-okhttp</artifactId>\n        </dependency>\n        <!--熔断降级-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n        </dependency>\n        <!--熔断降级持久化-->\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n        </dependency>\n        <!--使用 lombok 简化 Java 代码-->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>${lombok.version}</version>\n            <scope>compile</scope>\n        </dependency>\n        <!--测试框架-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!--工具包-->\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>${hutool.version}</version>\n        </dependency>\n        <!--Redis缓存-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n        <!--数据库-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!-- 资源文件拷贝插件 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <!-- java编译插件 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                    <compilerArgument>-parameters</compilerArgument>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
        },
        {
          "name": "work",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}