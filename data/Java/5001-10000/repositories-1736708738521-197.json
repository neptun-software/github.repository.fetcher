{
  "metadata": {
    "timestamp": 1736708738521,
    "page": 197,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "graphql-java/graphql-java",
      "stars": 6142,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": "*.iml\n*.ipr\n*.iws\n.idea\n.gradle\nbuild\nclasses\n_site\ngenerated-src/\nout\ndocs/_build/\n/bin/\n\\.classpath\n\\.project\n\\.settings/\n/.nb-gradle/\ngen\n.DS_Store"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.337890625,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of\nfostering an open and welcoming community, we pledge to respect all people who\ncontribute through reporting issues, posting feature requests, updating\ndocumentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic\n  addresses, without explicit permission\n* Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to\nfairly and consistently applying these principles to every aspect of managing\nthis project. Project maintainers who do not follow or enforce the Code of\nConduct may be permanently removed from the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting a project maintainer at andimarek@fastmail.fm. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. Maintainers are\nobligated to maintain confidentiality with regard to the reporter of an\nincident.\n\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 1.3.0, available at\n[https://contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/3/0/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2099609375,
          "content": "Thanks for contributing to graphql-java!\n\n\nPlease be sure that you read the [Code of Conduct](CODE_OF_CONDUCT.md) before contributing to this project and please\ncreate a new Issue and discuss first what you are planning to do for larger changes.\n\n\nThe overall goal of graphql-java is to have a correct implementation of the [GraphQL Spec](https://github.com/facebook/graphql/) in a production ready way.\n\nIn order to achieve that we have a strong focus on maintainability and high test coverage:\n\n- We expect new or modified unit test for every change (written in [Spock](https://spockframework.org/)).\n\n- Your code should be formatted with our IntelliJ [graphql-java-code-style](graphql-java-code-style.xml).\n\n- We don't add a new dependency to graphql-java: dependency conflicts will make adaption of graphql-java harder for users,\ntherefore we avoid adding any new dependency.\n\n- graphql-java has a strict focus on executing a GraphQL request, this means JSON parsing, http communication, databases\naccess etc is out of scope.\n\n\nIf you have any question please consider asking in our [Discussions](https://github.com/graphql-java/graphql-java/discussions). For bug reports or specific code related topics create a new issue.\n\nThanks!\n\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Andreas Marek and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files \n(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, \npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES \nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.30859375,
          "content": "# GraphQL Java\n\nDiscuss and ask questions in our Discussions: https://github.com/graphql-java/graphql-java/discussions\n\nThis is a [GraphQL](https://github.com/graphql/graphql-spec) Java implementation.\n\nLatest build in Maven central: https://repo1.maven.org/maven2/com/graphql-java/graphql-java/\n\n[![Build](https://github.com/graphql-java/graphql-java/actions/workflows/master.yml/badge.svg)](https://github.com/graphql-java/graphql-java/actions/workflows/master.yml)\n[![Latest Release](https://img.shields.io/maven-central/v/com.graphql-java/graphql-java?versionPrefix=22.)](https://maven-badges.herokuapp.com/maven-central/com.graphql-java/graphql-java/)\n[![Latest Snapshot](https://img.shields.io/maven-central/v/com.graphql-java/graphql-java?label=maven-central%20snapshot&versionPrefix=0)](https://maven-badges.herokuapp.com/maven-central/com.graphql-java/graphql-java/)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-green)](https://github.com/graphql-java/graphql-java/blob/master/LICENSE.md)\n\n### Documentation\n\nThe GraphQL Java book, from the maintainers: [GraphQL with Java and Spring](https://leanpub.com/graphql-java/)\n\nSee our tutorial for beginners: [Getting started with GraphQL Java and Spring Boot](https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/)\n\nFor further details, please see the documentation: https://www.graphql-java.com/documentation/getting-started\n\nIf you're looking to learn more, we (the maintainers) have written a book! [GraphQL with Java and Spring](https://leanpub.com/graphql-java) includes everything you need to know to build a production ready GraphQL service. The book is available on [Leanpub](https://leanpub.com/graphql-java) and [Amazon](https://www.amazon.com/GraphQL-Java-Spring-Andreas-Marek-ebook/dp/B0C96ZYWPF/).\n\nPlease take a look at our [list of releases](https://github.com/graphql-java/graphql-java/releases) if you want to learn more about new releases and the changelog.\n\n### Code of Conduct\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy contributing to this project (commenting or opening PR/Issues etc) you are agreeing to follow this conduct, so please\ntake the time to read it.\n\n### License\n\nCopyright (c) 2015, Andreas Marek and [Contributors](https://github.com/graphql-java/graphql-java/graphs/contributors)\n"
        },
        {
          "name": "README.zh_cn.md",
          "type": "blob",
          "size": 1.669921875,
          "content": "# GraphQL Java\n\n请在 Discussions 进行问题讨论和寻求帮助：https://github.com/graphql-java/graphql-java/discussions\n\n该组件是 [GraphQL 规范](https://github.com/graphql/graphql-spec) 的 Java 实现。\n\n[![Build](https://github.com/graphql-java/graphql-java/actions/workflows/master.yml/badge.svg)](https://github.com/graphql-java/graphql-java/actions/workflows/master.yml)\n[![Latest Release](https://img.shields.io/maven-central/v/com.graphql-java/graphql-java?versionPrefix=20.)](https://maven-badges.herokuapp.com/maven-central/com.graphql-java/graphql-java/)\n[![Latest Snapshot](https://img.shields.io/maven-central/v/com.graphql-java/graphql-java?label=maven-central%20snapshot&versionPrefix=0)](https://maven-badges.herokuapp.com/maven-central/com.graphql-java/graphql-java/)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-green)](https://github.com/graphql-java/graphql-java/blob/master/LICENSE.md)\n\n### 文档\n\n入门教程：[Getting started with GraphQL Java and Spring Boot](https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/)\n\n更多细节请参考`graphql-java`官方文档: https://www.graphql-java.com/documentation/getting-started\n\n如果您想了解新版本更多的信息和变更日志请参阅[ releases 列表](https://github.com/graphql-java/graphql-java/releases)。\n\n### 行为规范\n\n请您注意该项目是与 [Contributor Code of Conduct](CODE_OF_CONDUCT.md) 一起发布的，通过提交 PR 或 Issues 参与该项目表示您已经同意遵守该准则，所以请您花时间仔细阅读它。\n\n### License\n\nCopyright (c) 2015, Andreas Marek and [贡献者们](https://github.com/graphql-java/graphql-java/graphs/contributors)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.96484375,
          "content": "# Security Policy\n\n[GraphQL Java is the CVE Numbering Authority (CNA)](https://www.cve.org/PartnerInformation/ListofPartners/partner/graphql-java) for GraphQL Java, Java DataLoader, GraphQL Java Extended Scalars, and GraphQL Java Extended Validation.\n\n## Supported Versions\n\nAs stated in our [Release Policy](https://www.graphql-java.com/blog/release-policy/), we will backport critical bugfixes and security fixes for versions dating back 18 months. These fixes will be backported depending on severity and demand.\n\n## Reporting a Vulnerability\n\n:rotating_light: To report a vulnerability, **DO NOT open a pull request or issue or GitHub discussion. DO NOT post publicly.**\n\nInstead, **report the vulnerability privately** via the Security tab on [graphql-java GitHub repository](https://github.com/graphql-java/graphql-java). See instructions at https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability\n"
        },
        {
          "name": "additionallicenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 12.396484375,
          "content": "import java.text.SimpleDateFormat\n\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'maven-publish'\n    id 'antlr'\n    id 'signing'\n    id \"com.github.johnrengelman.shadow\" version \"8.1.1\"\n    id \"biz.aQute.bnd.builder\" version \"6.4.0\"\n    id \"io.github.gradle-nexus.publish-plugin\" version \"2.0.0\"\n    id \"groovy\"\n    id \"me.champeau.jmh\" version \"0.7.2\"\n}\n\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\ndef makeDevelopmentVersion(parts) {\n    def version = String.join(\"-\", parts)\n    println \"created development version: $version\"\n    return version\n}\n\ndef getDevelopmentVersion() {\n    def dateTime = new SimpleDateFormat('yyyy-MM-dd\\'T\\'HH-mm-ss').format(new Date())\n    def gitCheckOutput = new StringBuilder()\n    def gitCheckError = new StringBuilder()\n    def gitCheck = [\"git\", \"-C\", projectDir.toString(), \"rev-parse\", \"--is-inside-work-tree\"].execute()\n    gitCheck.waitForProcessOutput(gitCheckOutput, gitCheckError)\n    def isGit = gitCheckOutput.toString().trim()\n    if (isGit != \"true\") {\n        return makeDevelopmentVersion([\"0.0.0\", dateTime, \"no-git\"])\n    }\n\n    // a default Github Action env variable set to 'true'\n    def isCi = Boolean.parseBoolean(System.env.CI)\n    if (isCi) {\n        def gitHashOutput = new StringBuilder()\n        def gitHashError = new StringBuilder()\n        def gitShortHash = [\"git\", \"-C\", projectDir.toString(), \"rev-parse\", \"--short\", \"HEAD\"].execute()\n        gitShortHash.waitForProcessOutput(gitHashOutput, gitHashError)\n        def gitHash = gitHashOutput.toString().trim()\n        if (gitHash.isEmpty()) {\n            println \"git hash is empty: error: ${gitHashError.toString()}\"\n            throw new IllegalStateException(\"git hash could not be determined\")\n        }\n\n        return makeDevelopmentVersion([\"0.0.0\", dateTime, gitHash])\n    }\n\n    def gitRevParseOutput = new StringBuilder()\n    def gitRevParseError = new StringBuilder()\n    def gitRevParse = [\"git\", \"-C\", projectDir.toString(), \"rev-parse\", \"--abbrev-ref\", \"HEAD\"].execute()\n    gitRevParse.waitForProcessOutput(gitRevParseOutput, gitRevParseError)\n    def branchName = gitRevParseOutput.toString().trim()\n\n    return makeDevelopmentVersion([\"0.0.0\", branchName, \"SNAPSHOT\"])\n}\n\ndef reactiveStreamsVersion = '1.0.3'\ndef releaseVersion = System.env.RELEASE_VERSION\ndef antlrVersion = '4.11.1' // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime\ndef guavaVersion = '32.1.2-jre'\nversion = releaseVersion ? releaseVersion : getDevelopmentVersion()\ngroup = 'com.graphql-java'\n\ngradle.buildFinished { buildResult ->\n    println \"*******************************\"\n    println \"*\"\n    if (buildResult.failure != null) {\n        println \"* FAILURE - ${buildResult.failure}\"\n    } else {\n        println \"* SUCCESS\"\n    }\n    println \"* Version: $version\"\n    println \"*\"\n    println \"*******************************\"\n}\n\nrepositories {\n    mavenCentral()\n    mavenLocal()\n}\n\njar {\n    from \"LICENSE.md\"\n    from \"src/main/antlr/Graphql.g4\"\n    from \"src/main/antlr/GraphqlOperation.g4\"\n    from \"src/main/antlr/GraphqlSDL.g4\"\n    from \"src/main/antlr/GraphqlCommon.g4\"\n    manifest {\n        attributes('Automatic-Module-Name': 'com.graphqljava')\n    }\n}\n\ndependencies {\n    compileOnly 'org.jetbrains:annotations:26.0.1'\n    implementation 'org.antlr:antlr4-runtime:' + antlrVersion\n    api 'com.graphql-java:java-dataloader:3.3.0'\n    api 'org.reactivestreams:reactive-streams:' + reactiveStreamsVersion\n    antlr 'org.antlr:antlr4:' + antlrVersion\n    implementation 'com.google.guava:guava:' + guavaVersion\n    testImplementation group: 'junit', name: 'junit', version: '4.13.2'\n    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'\n    testImplementation 'org.codehaus.groovy:groovy:3.0.23'\n    testImplementation 'org.codehaus.groovy:groovy-json:3.0.23'\n    testImplementation 'com.google.code.gson:gson:2.11.0'\n    testImplementation 'org.eclipse.jetty:jetty-server:11.0.24'\n    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'\n    testImplementation 'org.awaitility:awaitility-groovy:4.2.0'\n    testImplementation 'com.github.javafaker:javafaker:1.0.2'\n\n    testImplementation 'org.reactivestreams:reactive-streams-tck:' + reactiveStreamsVersion\n    testImplementation \"io.reactivex.rxjava2:rxjava:2.2.21\"\n    testImplementation \"io.projectreactor:reactor-core:3.7.1\"\n\n    testImplementation 'org.testng:testng:7.10.2' // use for reactive streams test inheritance\n\n    testImplementation 'org.openjdk.jmh:jmh-core:1.37'\n    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'\n    jmh 'org.openjdk.jmh:jmh-core:1.37'\n    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'\n}\n\nshadowJar {\n    minimize()\n    archiveClassifier.set('')\n    configurations = [project.configurations.compileClasspath]\n    relocate('com.google.common', 'graphql.com.google.common') {\n        include 'com.google.common.collect.*'\n        include 'com.google.common.base.*'\n        include 'com.google.common.math.*'\n        include 'com.google.common.primitives.*'\n    }\n    relocate('org.antlr.v4.runtime', 'graphql.org.antlr.v4.runtime')\n    dependencies {\n        include(dependency('com.google.guava:guava:' + guavaVersion))\n        include(dependency('org.antlr:antlr4-runtime:' + antlrVersion))\n    }\n    from \"LICENSE.md\"\n    from \"src/main/antlr/Graphql.g4\"\n    from \"src/main/antlr/GraphqlOperation.g4\"\n    from \"src/main/antlr/GraphqlSDL.g4\"\n    from \"src/main/antlr/GraphqlCommon.g4\"\n    manifest {\n        attributes('Automatic-Module-Name': 'com.graphqljava')\n    }\n    //Apply biz.aQute.bnd.builder plugin logic to shadowJar as in BndBuilderPlugin \n    convention.plugins.bundle = new aQute.bnd.gradle.BundleTaskConvention(it)\n    doLast {\n        //Call bnd after the ShadowJar was built to update the MANIFEST.MF\n        buildBundle()\n    }\n\n    //Configure bnd for shadowJar\n    // -exportcontents: graphql.*  Adds all packages of graphql and below to the exported packages list\n    // -removeheaders:  Private-Package Removes the MANIFEST.MF header Private-Package, which contains all the internal packages and \n    //                                  also the repackaged packages like guava, which would be wrong after repackaging.\n    // Import-Package:  Changes the imported packages header, to exclude guava and dependencies from the import list (! excludes packages)\n    //                  Guava was repackaged and included inside the jar, so we need to remove it.\n    //                  ANTLR was shaded, so we need to remove it.\n    //                  sun.misc is a JRE internal-only class that is not directly used by graphql-java. It was causing problems in libraries using graphql-java.\n    //                  The last ,* copies all the existing imports from the other dependencies, which is required.\n    bnd('''\n-exportcontents: graphql.*\n-removeheaders: Private-Package\nImport-Package: !android.os.*,!com.google.*,!org.checkerframework.*,!javax.annotation.*,!graphql.com.google.*,!org.antlr.*,!graphql.org.antlr.*,!sun.misc.*,*\n''')\n}\n\n\ntask extractWithoutGuava(type: Copy) {\n    from({ zipTree({ \"build/libs/graphql-java-${project.version}.jar\" }) }) {\n        exclude('/com/**')\n    }\n    into layout.buildDirectory.dir(\"extract\")\n}\n\nextractWithoutGuava.dependsOn jar\n\ntask buildNewJar(type: Jar) {\n    from layout.buildDirectory.dir(\"extract\")\n    archiveFileName = \"graphql-java-tmp.jar\"\n    destinationDirectory = file(\"${project.buildDir}/libs\")\n    manifest {\n        from file(\"build/extract/META-INF/MANIFEST.MF\")\n    }\n    doLast {\n        delete(\"build/libs/graphql-java-${project.version}.jar\")\n        file(\"build/libs/graphql-java-tmp.jar\").renameTo(file(\"build/libs/graphql-java-${project.version}.jar\"))\n    }\n}\n\nbuildNewJar.dependsOn extractWithoutGuava\n\nshadowJar.finalizedBy extractWithoutGuava, buildNewJar\n\n\ntask testng(type: Test) {\n    useTestNG()\n}\ncheck.dependsOn testng\n\ncompileJava {\n    options.compilerArgs += [\"-parameters\"]\n    source file(\"build/generated-src\"), sourceSets.main.java\n}\n\ngenerateGrammarSource {\n    includes = ['Graphql.g4']\n    maxHeapSize = \"64m\"\n    arguments += [\"-visitor\"]\n    outputDirectory = file(\"${project.buildDir}/generated-src/antlr/main/graphql/parser/antlr\")\n}\ngenerateGrammarSource.inputs\n    .dir('src/main/antlr')\n    .withPropertyName('sourceDir')\n    .withPathSensitivity(PathSensitivity.RELATIVE)\n\n\ntask sourcesJar(type: Jar) {\n    dependsOn classes\n    archiveClassifier = 'sources'\n    from sourceSets.main.allSource\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    archiveClassifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\njavadoc {\n    options.encoding = 'UTF-8'\n}\n\nartifacts {\n    archives sourcesJar\n    archives javadocJar\n}\n\nList<TestDescriptor> failedTests = []\n\ntest {\n    testLogging {\n        events \"FAILED\", \"SKIPPED\"\n        exceptionFormat = \"FULL\"\n    }\n\n    afterTest { TestDescriptor descriptor, TestResult result ->\n        if (result.getFailedTestCount() > 0) {\n            failedTests.add(descriptor)\n        }\n    }\n}\n\n/*\n * The gradle.buildFinished callback is deprecated BUT there does not seem to be a decent alternative in gradle 7\n * So progress over perfection here\n *\n * See https://github.com/gradle/gradle/issues/20151\n */\ngradle.buildFinished {\n    if (!failedTests.isEmpty()) {\n        println \"\\n\\n\"\n        println \"============================\"\n        println \"These are the test failures\"\n        println \"============================\"\n        for (td in failedTests) {\n            println \"${td.getClassName()}.${td.getDisplayName()}\"\n        }\n        println \"============================\"\n    }\n}\n\n\nallprojects {\n    tasks.withType(Javadoc) {\n        exclude('**/antlr/**')\n    }\n}\n\npublishing {\n\n    publications {\n\n        graphqlJava(MavenPublication) {\n            version version\n            from components.java\n\n            artifact sourcesJar {\n                archiveClassifier = \"sources\"\n            }\n            artifact javadocJar {\n                archiveClassifier = \"javadoc\"\n            }\n            pom.withXml {\n                // Removing antlr4 below (introduced in `1ac98bf`) addresses an issue with\n                // the Gradle ANTLR plugin. `1ac98bf` can be reverted and this comment removed once\n                // that issue is fixed and Gradle upgraded. See https://goo.gl/L92KiF and https://goo.gl/FY0PVR.\n                //\n                // Removing antlr4-runtime and guava because the classes we want to use are \"shaded\" into the jar itself\n                // via the shadowJar task\n                def pomNode = asNode()\n                pomNode.dependencies.'*'.findAll() {\n                    it.artifactId.text() == 'antlr4' || it.artifactId.text() == 'antlr4-runtime' || it.artifactId.text() == 'guava'\n                }.each() {\n                    it.parent().remove(it)\n                }\n                pomNode.children().last() + {\n                    resolveStrategy = Closure.DELEGATE_FIRST\n                    name 'graphql-java'\n                    description 'GraphqL Java'\n                    url \"https://github.com/graphql-java/graphql-java\"\n                    scm {\n                        url \"https://github.com/graphql-java/graphql-java\"\n                        connection \"https://github.com/graphql-java/graphql-java\"\n                        developerConnection \"https://github.com/graphql-java/graphql-java\"\n                    }\n                    licenses {\n                        license {\n                            name 'MIT'\n                            url 'https://github.com/graphql-java/graphql-java/blob/master/LICENSE.md'\n                            distribution 'repo'\n                        }\n                    }\n                    developers {\n                        developer {\n                            id 'andimarek'\n                            name 'Andreas Marek'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nnexusPublishing {\n    repositories {\n        sonatype {\n            username = System.env.MAVEN_CENTRAL_USER\n            password = System.env.MAVEN_CENTRAL_PASSWORD\n        }\n    }\n}\n\nsigning {\n    required { !project.hasProperty('publishToMavenLocal') }\n    def signingKey = System.env.MAVEN_CENTRAL_PGP_KEY\n    useInMemoryPgpKeys(signingKey, \"\")\n    sign publishing.publications\n}\n\n\n// all publish tasks depend on the build task\ntasks.withType(PublishToMavenRepository) {\n    dependsOn build\n}\n\n// Only publish Maven POM, disable default Gradle modules file\ntasks.withType(GenerateModuleMetadata) {\n    enabled = false\n}\n\ntest {\n    useJUnitPlatform()\n}\n"
        },
        {
          "name": "coding-guidelines.md",
          "type": "blob",
          "size": 6.56640625,
          "content": "# GraphQL Java Coding guidelines used in GraphQL Java\n\n\n## General principles\n\n- We prefer closer to zero dependencies. Don't bring in guava, apache-commons, spring-xxx, y or z however much some StringUtils method might be useful. Fewer dependencies makes graphql-java more applicable to everyone\n\n- We prefer staying out of the HTTP stack. We are the low level engine of running graphql queries. Other concerns such as JSON and HTTP are handled better by other layers\n\n- We prefer simple code to clever code. It should be readable with well named methods. Clever nested streams and lambdas are not our thing.\n\n- We prefer general to specific. So the code should be generally applicable to use cases, not highly specific to just some use cases, even if it takes more setup.\n\n\n## more specific topics\n\n- Use `@Public` and `@Internal` to communicate what level of stability is supported. \n\n- Never make a class or method package private or protected: \nmake it public or private and use `@Internal` to communicate that the class can be changed without notice. \nThe user can decide itself about the risk when they use internal things.\n\n### Optional vs null\nWe have a mix of Optional and allowing null values because GraphQL Java was originally written in Java 6.\n\nWe are aiming to not use Optional moving forward in order to be consistent overall.\n\n### Unit testing and dependencies\nAll tests are written in [Spock](https://spockframework.org).\n\nAll new code has to have unit tests. \n\nThe general pattern is that every method of every class is by default non static and that every dependency is an instance field with package private visibility \nto allow for easy mocking in unit tests. The field should be annotated with `@VisibleForTesting`.\n\nExample:\n\n```java\npublic class Foo {\n\n  @VisibleForTesting\n  Bar bar = new Bar();\n\n\n  public void doSomething(){\n    ...\n  }\n\n} \n\n```\n\n### Static methods \nStatic methods are only allowed for methods which are very limited in functionality and don't have any dependencies. \nStatic methods imply that you never want to mock them.\n\nTypical examples are util methods like `GraphQLTypeUtil.isNonNull()` \n\n### \"Util\" class or not\nDon't mix static and non static methods (except factory methods): \nevery class is either a general \"Util\" class with only static methods or a class with no static methods.\n\n\n### Naming\nNaming is a key element of readable source code. \nEvery variable and method should have a clear name. Single char variable names are never ok, except for index iterations.\n\n### Comments\nPublic APIs should be documented via JavaDoc. The JavaDoc should describe how and why this class/method should be used. It should not specify the details of the implementation.\n\nInternal APIs don't have JavaDoc and in general we avoid any form of comments when possible.\n\n### Methods over comments\nMost comments inside a method can be refactored by creating a method and giving the method name the comment text.\n\n### Immutable and Builders\nEvery public data class should be:\n\n- Immutable \n- having a Builder class \n- having a `transform` method\n\n\nEvery data class should be immutable and contain a `public static class Builder {..}` with a static factory method `newFoo` (not `newBuilder`).\n\nThe Builder methods are just named like the property (`Builder.foo(Foo foo)` not `Builder.setFoo(Foo foo)`). \n\nThe class should also contain a `public Foo transform(Consumer<Builder> builderConsumer)` to allow for easy copies with minimal effort.\n\nPrivate classes should follow the same design, but they don't have to.\n\n### Default Collections idiom\n\nThe default pattern for using Set, Map and List is:\n- `List<Foo> fooList = new ArrayList<>()`\n- `Set<Foo> fooSet = new LinkedHashSet<>()`\n- `Map<Foo> fooMap = new LinkedHashMap<>()`\n\nBy using the generic interface instead of using an implementation we are making sure we \ndon't rely on anything impl specific.\nThe default implementations for `Set` and `Map` should be the `LinkedHashSet` and `LinkedHashMap` \nbecause it offers stable iteration order.\n\n### Stream API vs for, index loop etc\nUsing the Stream API is ok in general, but it must be kept simple. Stream maps inside \nmaps should be avoided and the inner logic should be refactored into a method.   \n\nIt is also ok to use the traditional for loop or other constructs: sometimes it is more readable than\nthe modern Stream API. The Stream API is not a replacement for all other loops/iterations.\n\n\n### Maximum Indentation is two\nOne of the most important rules is to keep the number of indentations as low as possible.\nIn general the max number should be two. This means a for loop inside a condition is ok.\nA condition inside a for loop inside a for loop is not.\n\nExtracting a method is the easy way out.\n\n### Early method exit\nExit the method early to avoid an indentation:\n\n```java\npublic void foo() {\n  if(cond) {\n    return;\n  }\n  ...do something\n}\n```\nis better than:\n\n```java\npublic void foo() {\n  if(!cond) {\n    ...do something\n  }\n}\n```\n\n### Maximum line length and multi line statements \n\nWe don't have a strict max line length.\nBut of course every statement should be limited. Not so much in terms of length but much more in terms\nof what the statement does.\n\nIf a statement is multiple lines long it should be broken down into the same indentation level. \n\nFor example this is ok:\n```java\n        return myMap\n                .entrySet()\n                .stream()\n                .map(entry -> mapEntry(entry))\n                .collect(Collectors.toList());\n```\nThis is not ok:\n```java\n        return fooListOfList.stream().map(\n                 fooList -> fooList.stream()\n                        .sorted((x,y) -> sort(x,y))\n                        .map(foo -> foo.getMyProp())\n                        .collect(toList())\n```\nIt has a lambda in streams in streams. The inside stream should be extracted to an extra method and each\nmethod call should be on a new line:\n```java\n        return fooListOfList\n                 .stream()\n                 .map(this::mapFooList)\n                 .collect(toList());\n```\n\n### Every class its own file: avoid inner classes and interfaces\nEvery class/interface should have its own file in general. \nInner classes are almost never ok (especially public ones). Every class should have its own file to make it easier to read and explore the code.\n\n### Use `graphql.Assert` instead of `Objects`\nWe maintain our own small set of Assert util methods. Don't use `Objects.requireNonNull` and others in order\nto be consistent.\n\n### `FooEnvironment` method arguments for public API\nDon't use specific arguments for interface methods but rather a `FooEnvironment` argument. This ensures future\nbackwards compatibility when new inputs are added.\n\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1103515625,
          "content": "org.gradle.caching=true\norg.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.jvmargs=-Dfile.encoding=UTF-8\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "graphql-java-code-style.xml",
          "type": "blob",
          "size": 0.86328125,
          "content": "<code_scheme name=\"graphql-java\" version=\"173\">\n  <GroovyCodeStyleSettings>\n    <option name=\"CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND\" value=\"999\"/>\n    <option name=\"NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND\" value=\"999\"/>\n  </GroovyCodeStyleSettings>\n  <JavaCodeStyleSettings>\n    <option name=\"CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND\" value=\"999\"/>\n    <option name=\"NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND\" value=\"999\"/>\n    <option name=\"JD_ADD_BLANK_AFTER_PARM_COMMENTS\" value=\"true\"/>\n    <option name=\"JD_ADD_BLANK_AFTER_RETURN\" value=\"true\"/>\n    <option name=\"JD_P_AT_EMPTY_LINES\" value=\"false\"/>\n  </JavaCodeStyleSettings>\n  <codeStyleSettings language=\"JAVA\">\n    <option name=\"IF_BRACE_FORCE\" value=\"3\"/>\n    <option name=\"DOWHILE_BRACE_FORCE\" value=\"3\"/>\n    <option name=\"WHILE_BRACE_FORCE\" value=\"3\"/>\n    <option name=\"FOR_BRACE_FORCE\" value=\"3\"/>\n  </codeStyleSettings>\n</code_scheme>"
        },
        {
          "name": "performance-results",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.4765625,
          "content": "pluginManagement {\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://plugins.gradle.org/m2'\n            metadataSources {\n                // Avoid redirection to defunct JCenter when Gradle module metadata is not published by a plugin (e.g. JMH plugin)\n                ignoreGradleMetadataRedirection()\n                mavenPom()\n                artifact()\n            }\n        }\n    }\n}\n\nrootProject.name = 'graphql-java'\ninclude(\"agent\", \"agent-test\")\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}