{
  "metadata": {
    "timestamp": 1736708735625,
    "page": 191,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amitshekhariitbhu/from-java-to-kotlin",
      "stars": 6242,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.1552734375,
          "content": "<p align=\"center\">\n<img alt=\"FromJavaToKotlin\" src=\"https://raw.githubusercontent.com/amitshekhariitbhu/from-java-to-kotlin/master/assets/from_java_to_kotlin.png\">\n</p>\n\n# From Java To Kotlin\n\n> From Java To Kotlin - Your Cheat Sheet For Java To Kotlin\n\n## About me\n\nHi, I am Amit Shekhar, Co-Founder @ [Outcome School](https://outcomeschool.com) • IIT 2010-14 • I have taught and mentored many developers, and their efforts landed them high-paying tech jobs, helped many tech companies in solving their unique problems, and created many open-source libraries being used by top companies. I am passionate about sharing knowledge through open-source, blogs, and videos.\n\nYou can connect with me on:\n\n- [Twitter](https://twitter.com/amitiitbhu)\n- [YouTube](https://www.youtube.com/@amitshekhar)\n- [LinkedIn](https://www.linkedin.com/in/amit-shekhar-iitbhu)\n- [GitHub](https://github.com/amitshekhariitbhu)\n\n## Join **Outcome School** and get high paying tech job: [Outcome School](https://outcomeschool.com)\n\n## Print to Console\n> Java\n\n```java\nSystem.out.print(\"Amit Shekhar\");\nSystem.out.println(\"Amit Shekhar\");\n```\n\n> Kotlin\n\n```kotlin\nprint(\"Amit Shekhar\")\nprintln(\"Amit Shekhar\")\n```\n\n---\n## Constants and Variables\n> Java\n\n```java\nString name = \"Amit Shekhar\";\nfinal String name = \"Amit Shekhar\";\n```\n\n> Kotlin\n\n```kotlin\nvar name = \"Amit Shekhar\"\nval name = \"Amit Shekhar\"\n```\n\n---\n## Assigning the null value\n> Java\n\n```java\nString otherName;\notherName = null;\n```\n\n> Kotlin\n\n```kotlin\nvar otherName : String?\notherName = null\n```\n\n---\n## Verify if value is null\n> Java\n\n```java\nif (text != null) {\n  int length = text.length();\n}\n```\n\n> Kotlin\n\n```kotlin\ntext?.let {\n    val length = text.length\n}\n// or simply\nval length = text?.length\n```\n\n---\n## Verify if value is NotNull  OR NotEmpty\n> Java\n```java\nString sampleString = \"Shekhar\";\nif (!sampleString.isEmpty()) {\n    myTextView.setText(sampleString);\n}\nif(sampleString!=null && !sampleString.isEmpty()){\n    myTextView.setText(sampleString); \n}\n```\n> Kotlin\n\n```kotlin\nvar sampleString =\"Shekhar\"\nif(sampleString.isNotEmpty()){  //the feature of kotlin extension function\n    myTextView.text=sampleString\n}\nif(!sampleString.isNullOrEmpty()){\n   myTextView.text=sampleString \n}\n```\n---\n## Concatenation of strings\n> Java\n\n```java\nString firstName = \"Amit\";\nString lastName = \"Shekhar\";\nString message = \"My name is: \" + firstName + \" \" + lastName;\n```\n\n> Kotlin\n\n```kotlin\nvar firstName = \"Amit\"\nvar lastName = \"Shekhar\"\nvar message = \"My name is: $firstName $lastName\"\n```\n\n---\n## New line in string\n> Java\n\n```java\nString text = \"First Line\\n\" +\n              \"Second Line\\n\" +\n              \"Third Line\";\n```\n\n> Kotlin\n\n```kotlin\nval text = \"\"\"\n        |First Line\n        |Second Line\n        |Third Line\n        \"\"\".trimMargin()\n```\n\n---\n\n## Substring\n> Java\n\n```java\nString str = \"Java to Kotlin Guide\";\nString substr = \"\";\n\n//print java\nsubstr = str.substring(0, 4);\nSystem.out.println(\"substring = \" + substr);\n\n//print kotlin\nsubstr = str.substring(8, 14);\nSystem.out.println(\"substring = \" + substr);\n```\n\n> Kotlin\n\n```kotlin\nvar str = \"Java to Kotlin Guide\"\nvar substr = \"\"\n\n//print java\nsubstr = str.substring(0..3) //\nprintln(\"substring $substr\")\n\n//print kotlin\nsubstr = str.substring(8..13)\nprintln(\"substring $substr\")\n```\n\n---\n\n## Ternary Operations\n> Java\n\n```java\nString text = x > 5 ? \"x > 5\" : \"x <= 5\";\n\nString message = null;\nlog(message != null ? message : \"\");\n```\n\n> Kotlin\n\n```kotlin\nval text = if (x > 5) \"x > 5\" else \"x <= 5\"\n\nval message: String? = null\nlog(message ?: \"\")\n```\n\n---\n## Bitwise Operators\n> Java\n\n```java\nfinal int andResult  = a & b;\nfinal int orResult   = a | b;\nfinal int xorResult  = a ^ b;\nfinal int rightShift = a >> 2;\nfinal int leftShift  = a << 2;\nfinal int unsignedRightShift = a >>> 2;\n```\n\n> Kotlin\n\n```kotlin\nval andResult  = a and b\nval orResult   = a or b\nval xorResult  = a xor b\nval rightShift = a shr 2\nval leftShift  = a shl 2\nval unsignedRightShift = a ushr 2\n```\n\n---\n## Check the type and casting\n> Java\n\n```java\nif (object instanceof Car) {\n  Car car = (Car) object;\n}\n```\n\n> Kotlin\n\n```kotlin\nif (object is Car) {\nvar car = object as Car\n}\n\n// if object is null\nvar car = object as? Car // var car = object as Car?\n```\n\n---\n## Check the type and casting (implicit)\n> Java\n\n```java\nif (object instanceof Car) {\n   Car car = (Car) object;\n}\n```\n\n> Kotlin\n\n```kotlin\nif (object is Car) {\n   var car = object // smart casting\n}\n\n// if object is null\nif (object is Car?) {\n   var car = object // smart casting, car will be null\n}\n```\n\n---\n## Multiple conditions\n> Java\n\n```java\nif (score >= 0 && score <= 300) { }\n```\n\n> Kotlin\n\n```kotlin\nif (score in 0..300) { }\n```\n\n---\n## Multiple Conditions (Switch case)\n> Java\n\n```java\nint score = // some score;\nString grade;\nswitch (score) {\n  case 10:\n  case 9:\n    grade = \"Excellent\";\n    break;\n  case 8:\n  case 7:\n  case 6:\n    grade = \"Good\";\n    break;\n  case 5:\n  case 4:\n    grade = \"OK\";\n    break;\n  case 3:\n  case 2:\n  case 1:\n    grade = \"Fail\";\n    break;\n  default:\n      grade = \"Fail\";       \n}\n```\n\n> Kotlin\n\n```kotlin\nvar score = // some score\nvar grade = when (score) {\n  9, 10 -> \"Excellent\"\n  in 6..8 -> \"Good\"\n  4, 5 -> \"OK\"\n  else -> \"Fail\"\n}\n```\n\n---\n## For-loops\n> Java\n\n```java\nfor (int i = 1; i <= 10 ; i++) { }\n\nfor (int i = 1; i < 10 ; i++) { }\n\nfor (int i = 10; i >= 0 ; i--) { }\n\nfor (int i = 1; i <= 10 ; i+=2) { }\n\nfor (int i = 10; i >= 0 ; i-=2) { }\n\nfor (String item : collection) { }\n\nfor (Map.Entry<String, String> entry: map.entrySet()) { }\n```\n\n> Kotlin\n\n```kotlin\nfor (i in 1..10) { }\n\nfor (i in 1 until 10) { }\n\nfor (i in 10 downTo 0) { }\n\nfor (i in 1..10 step 2) { }\n\nfor (i in 10 downTo 0 step 2) { }\n\nfor (item in collection) { }\n\nfor ((key, value) in map) { }\n```\n\n---\n## Collections\n> Java\n\n```java\nfinal List<Integer> listOfNumber = Arrays.asList(1, 2, 3, 4);\n\nfinal Map<Integer, String> keyValue = new HashMap<Integer, String>();\nmap.put(1, \"Amit\");\nmap.put(2, \"Anand\");\nmap.put(3, \"Messi\");\n\n// Java 9\nfinal List<Integer> listOfNumber = List.of(1, 2, 3, 4);\n\nfinal Map<Integer, String> keyValue = Map.of(1, \"Amit\",\n                                             2, \"Anand\",\n                                             3, \"Messi\");\n```\n\n> Kotlin\n\n```kotlin\nval listOfNumber = listOf(1, 2, 3, 4)\nval keyValue = mapOf(1 to \"Amit\",\n                     2 to \"Anand\",\n                     3 to \"Messi\")\n```\n\n---\n## for each\n> Java\n\n```java\n// Java 7 and below\nfor (Car car : cars) {\n  System.out.println(car.speed);\n}\n\n// Java 8+\ncars.forEach(car -> System.out.println(car.speed));\n\n// Java 7 and below\nfor (Car car : cars) {\n  if (car.speed > 100) {\n    System.out.println(car.speed);\n  }\n}\n\n// Java 8+\ncars.stream().filter(car -> car.speed > 100).forEach(car -> System.out.println(car.speed));\ncars.parallelStream().filter(car -> car.speed > 100).forEach(car -> System.out.println(car.speed));\n```\n\n> Kotlin\n\n```kotlin\ncars.forEach {\n    println(it.speed)\n}\n\ncars.filter { it.speed > 100 }\n      .forEach { println(it.speed)}\n\n// kotlin 1.1+\ncars.stream().filter { it.speed > 100 }.forEach { println(it.speed)}\ncars.parallelStream().filter { it.speed > 100 }.forEach { println(it.speed)}\n```\n\n---\n## Splitting arrays\n> java\n\n```java\nString[] splits = \"param=car\".split(\"=\");\nString param = splits[0];\nString value = splits[1];\n```\n\n\n> kotlin\n\n```kotlin\nval (param, value) = \"param=car\".split(\"=\")\n```\n\n---\n## Defining methods\n> Java\n\n```java\nvoid doSomething() {\n   // logic here\n}\n```\n\n> Kotlin\n\n```kotlin\nfun doSomething() {\n   // logic here\n}\n```\n\n### Default values for method parameters\n> Java\n\n```java\ndouble calculateCost(int quantity, double pricePerItem) {\n    return pricePerItem * quantity;\n}\n\ndouble calculateCost(int quantity) {\n    // default price is 20.5\n    return 20.5 * quantity;\n}\n```\n\n> Kotlin\n\n```kotlin\nfun calculateCost(quantity: Int, pricePerItem: Double = 20.5) = quantity * pricePerItem\n\ncalculateCost(10, 25.0) // 250\ncalculateCost(10) // 205\n\n```\n\n---\n## Variable number of arguments\n> Java\n\n```java\nvoid doSomething(int... numbers) {\n   // logic here\n}\n```\n\n> Kotlin\n\n```kotlin\nfun doSomething(vararg numbers: Int) {\n   // logic here\n}\n```\n\n---\n## Defining methods with return\n> Java\n\n```java\nint getScore() {\n   // logic here\n   return score;\n}\n```\n\n> Kotlin\n\n```kotlin\nfun getScore(): Int {\n   // logic here\n   return score\n}\n\n// as a single-expression function\n\nfun getScore(): Int = score\n\n// even simpler (type will be determined automatically)\n\nfun getScore() = score // return-type is Int\n```\n\n---\n## Returning result of an operation\n> Java\n\n```java\nint getScore(int value) {\n    // logic here\n    return 2 * value;\n}\n```\n\n> Kotlin\n\n```kotlin\nfun getScore(value: Int): Int {\n   // logic here\n   return 2 * value\n}\n\n// as a single-expression function\nfun getScore(value: Int): Int = 2 * value\n\n// even simpler (type will be determined automatically)\n\nfun getScore(value: Int) = 2 * value // return-type is int\n```\n\n---\n## Constructors\n> Java\n\n```java\npublic class Utils {\n\n    private Utils() {\n      // This utility class is not publicly instantiable\n    }\n\n    public static int getScore(int value) {\n        return 2 * value;\n    }\n\n}\n```\n\n> Kotlin\n\n```kotlin\nclass Utils private constructor() {\n\n    companion object {\n\n        fun getScore(value: Int): Int {\n            return 2 * value\n        }\n\n    }\n}\n\n// another way\n\nobject Utils {\n\n    fun getScore(value: Int): Int {\n        return 2 * value\n    }\n\n}\n```\n\n---\n## Getters and Setters\n> Java\n\n```java\npublic class Developer {\n\n    private String name;\n    private int age;\n\n    public Developer(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Developer developer = (Developer) o;\n\n        if (age != developer.age) return false;\n        return name != null ? name.equals(developer.name) : developer.name == null;\n\n    }\n\n    @Override\n    public int hashCode() {\n        int result = name != null ? name.hashCode() : 0;\n        result = 31 * result + age;\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Developer{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n> Kotlin\n\n```kotlin\ndata class Developer(var name: String, var age: Int)\n\n```\n\n---\n## Cloning or copying\n> Java\n\n```java\npublic class Developer implements Cloneable {\n\n    private String name;\n    private int age;\n\n    public Developer(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return (Developer)super.clone();\n    }\n}\n\n// cloning or copying\nDeveloper dev = new Developer(\"Messi\", 30);\ntry {\n    Developer dev2 = (Developer) dev.clone();\n} catch (CloneNotSupportedException e) {\n    // handle exception\n}\n\n```\n\n> Kotlin\n\n```kotlin\ndata class Developer(var name: String, var age: Int)\n\n// cloning or copying\nval dev = Developer(\"Messi\", 30)\nval dev2 = dev.copy()\n// in case you only want to copy selected properties\nval dev2 = dev.copy(age = 25)\n\n```\n\n---\n## Generics\n> Java\n\n```java\n\n// Example #1\ninterface SomeInterface<T> {\n    void doSomething(T data);\n}\n\nclass SomeClass implements SomeInterface<String> {\n    @Override\n    public void doSomething(String data) {\n        // some logic\n    }\n}\n\n// Example #2\ninterface SomeInterface<T extends Collection<?>> {\n    void doSomething(T data);\n}\n\nclass SomeClass implements SomeInterface<List<String>> {\n\n    @Override\n    public void doSomething(List<String> data) {\n        // some logic\n    }\n}\n\n```\n\n> Kotlin\n\n```kotlin\ninterface SomeInterface<T> {\n    fun doSomething(data: T)\n}\n\nclass SomeClass: SomeInterface<String> {\n    override fun doSomething(data: String) {\n        // some logic\n    }\n}\n\ninterface SomeInterface<T: Collection<*>> {\n    fun doSomething(data: T)\n}\n\nclass SomeClass: SomeInterface<List<String>> {\n    override fun doSomething(data: List<String>) {\n        // some logic\n    }\n}\n```\n\n---\n## Extension function\n> Java\n\n```java\npublic class Utils {\n\n    private Utils() {\n      // This utility class is not publicly instantiable\n    }\n\n    public static int triple(int value) {\n        return 3 * value;\n    }\n\n}\n\nint result = Utils.triple(3);\n\n```\n\n> Kotlin\n\n```kotlin\nfun Int.triple(): Int {\n  return this * 3\n}\n\nvar result = 3.triple()\n```\n\n---\n## Defining uninitialized objects\n> Java\n\n```java\nPerson person;\n```\n\n> Kotlin\n\n```kotlin\ninternal lateinit var person: Person\n```\n---\n## enum\n> Java\n\n```java\npublic enum Direction {\n        NORTH(1),\n        SOUTH(2),\n        WEST(3),\n        EAST(4);\n\n        int direction;\n\n        Direction(int direction) {\n            this.direction = direction;\n        }\n\n        public int getDirection() {\n            return direction;\n        }\n    }\n```\n> Kotlin\n\n```kotlin\nenum class Direction(val direction: Int) {\n    NORTH(1),\n    SOUTH(2),\n    WEST(3),\n    EAST(4);\n}\n```\n---\n\n\n## Sorting List\n> Java\n\n```java\nList<Profile> profiles = loadProfiles(context);\nCollections.sort(profiles, new Comparator<Profile>() {\n    @Override\n    public int compare(Profile profile1, Profile profile2) {\n        if (profile1.getAge() > profile2.getAge()) return 1;\n        if (profile1.getAge() < profile2.getAge()) return -1;\n        return 0;\n    }\n});\n\n```\n\n> Kotlin\n\n```kotlin\nval profile = loadProfiles(context)\nprofile.sortedWith(Comparator({ profile1, profile2 ->\n    if (profile1.age > profile2.age) return@Comparator 1\n    if (profile1.age < profile2.age) return@Comparator -1\n    return@Comparator 0\n}))\n```\n---\n\n## Anonymous Class\n> Java\n\n```java\n AsyncTask<Void, Void, Profile> task = new AsyncTask<Void, Void, Profile>() {\n    @Override\n    protected Profile doInBackground(Void... voids) {\n        // fetch profile from API or DB\n        return null;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        // do something\n    }\n};\n\n```\n\n> Kotlin\n\n```kotlin\nval task = object : AsyncTask<Void, Void, Profile>() {\n    override fun doInBackground(vararg voids: Void): Profile? {\n        // fetch profile from API or DB\n        return null\n    }\n\n    override fun onPreExecute() {\n        super.onPreExecute()\n        // do something\n    }\n}\n```\n---\n## Initialization block\n> Java\n\n```java\npublic class User {\n    {  //Initialization block\n        System.out.println(\"Init block\");\n    }\n}\n\n```\n\n> Kotlin\n\n```kotlin\n   class User {\n        init { // Initialization block\n            println(\"Init block\")\n        }\n    }\n```\n\n---\n\n### Important things to know in Kotlin\n\n- [Mastering Kotlin Coroutines](https://outcomeschool.com/blog/kotlin-coroutines) - Mastering Kotlin Coroutines\n- [Dispatchers in Kotlin Coroutines](https://outcomeschool.com/blog/dispatchers-in-kotlin-coroutines) - Dispatchers in Kotlin Coroutines\n- [coroutineScope vs supervisorScope](https://outcomeschool.com/blog/coroutinescope-vs-supervisorscope) - coroutineScope vs supervisorScope\n- [CoroutineContext in Kotlin](https://outcomeschool.com/blog/coroutinecontext-in-kotlin) - CoroutineContext in Kotlin\n- [What is Flow API in Kotlin?](https://outcomeschool.com/blog/flow-api-in-kotlin) - What is Flow API in Kotlin?\n- [Long-running tasks in parallel with Kotlin Flow](https://outcomeschool.com/blog/long-running-tasks-in-parallel-with-kotlin-flow) - Long-running tasks in parallel with Kotlin Flow\n- [Retry Operator in Kotlin Flow](https://outcomeschool.com/blog/retry-operator-in-kotlin-flow) - Retry Operator in Kotlin Flow\n- [Callback to Coroutines in Kotlin](https://outcomeschool.com/blog/callback-to-coroutines-in-kotlin) - Callback to Coroutines in Kotlin\n- [Retrofit with Kotlin Flow](https://outcomeschool.com/blog/retrofit-with-kotlin-flow) - Retrofit with Kotlin Flow\n- [Room Database with Kotlin Flow](https://outcomeschool.com/blog/room-database-with-kotlin-flow) - Room Database with Kotlin Flow\n- [Remove duplicates from an array](https://outcomeschool.com/blog/remove-duplicates-from-an-array-in-kotlin) - Remove duplicates from an array in Kotlin\n- [JvmStatic Annotation in Kotlin](https://outcomeschool.com/blog/jvmstatic-annotation-in-kotlin) - JvmStatic Annotation in Kotlin\n- [JvmOverloads Annotation in Kotlin](https://outcomeschool.com/blog/jvmoverloads-annotation-in-kotlin) - JvmOverloads Annotation in Kotlin\n- [JvmField Annotation in Kotlin](https://outcomeschool.com/blog/jvmfield-annotation-in-kotlin) - JvmField Annotation in Kotlin\n- [inline function in Kotlin](https://outcomeschool.com/blog/inline-function-in-kotlin) - inline function in Kotlin\n- [noinline in Kotlin](https://outcomeschool.com/blog/noinline-in-kotlin) - noinline in Kotlin\n- [crossinline in Kotlin](https://outcomeschool.com/blog/crossinline-in-kotlin) - crossinline in Kotlin\n- [lateinit vs lazy in Kotlin](https://outcomeschool.com/blog/lateinit-vs-lazy-in-kotlin) - lateinit vs lazy in Kotlin\n- [init block in Kotlin](https://outcomeschool.com/blog/init-block-in-kotlin) - init block in Kotlin\n- [Retrofit with Kotlin Coroutines](https://outcomeschool.com/blog/retrofit-with-kotlin-coroutines) - Retrofit with Kotlin Coroutines\n- [Advantage of using const in Kotlin](https://outcomeschool.com/blog/const-in-kotlin) - Advantage of using const in Kotlin\n- [AssociateBy - List to Map in Kotlin](https://outcomeschool.com/blog/associateby-list-to-map-in-kotlin) - Kotlin Collection Functions - associateBy that converts a list into a map\n- [partition - filtering function in Kotlin](https://outcomeschool.com/blog/partition-filtering-function-in-kotlin) - partition - filtering function in Kotlin\n- [Infix notation in Kotlin](https://outcomeschool.com/blog/infix-notation-in-kotlin) - Infix notation in Kotlin\n- [Open keyword in Kotlin](https://outcomeschool.com/blog/open-keyword-in-kotlin) - Open keyword in Kotlin\n- [Companion object in Kotlin](https://outcomeschool.com/blog/companion-object-in-kotlin) - Companion object in Kotlin\n- [Extension function in Kotlin](https://outcomeschool.com/blog/extension-function-in-kotlin) - Extension function in Kotlin\n- [data class in Kotlin](https://outcomeschool.com/blog/data-class-in-kotlin) - data class in Kotlin\n- [How does the Kotlin Multiplatform work?](https://outcomeschool.com/blog/how-does-the-kotlin-multiplatform-work) - How does the Kotlin Multiplatform work?\n\n## Join **Outcome School** and get high paying tech job: [Outcome School](https://outcomeschool.com)\n\n### Found this project useful :heart:\n* Support by clicking the :star: button on the upper right of this page. :v:\n\n### License\n```\n   Copyright (C) 2024 Amit Shekhar\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n### Contributing to From Java To Kotlin\nJust make a pull request. You are in!\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "others",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}