{
  "metadata": {
    "timestamp": 1736708652963,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "json-path/JsonPath",
      "stars": 8994,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.142578125,
          "content": ".idea/\ntarget\n*.iws\n*.ipr\n*.iml\n.classpath\n.project\n.settings\n.springBeans\n.DS_Store\n.gradle\n.java-version\nTODO\ngradle.properties\nbuild\nbin/\nout/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.11328125,
          "content": "language: java\n\nsudo: false\n\njdk:\n - openjdk8\n\ncache:\n  directories:\n  - $HOME/.gradle\n\narch:\n  - amd64\n  - ppc64le\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0712890625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Jayway\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.1689453125,
          "content": "web: java $JAVA_OPTS -Dserver.http.port=$PORT -DresourceBase=json-path-web-test/build/resources/main/webapp/  -jar json-path-web-test/build/libs/json-path-web-test-*-all.jar"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.3037109375,
          "content": "Jayway JsonPath\n=====================\n\n**A Java DSL for reading JSON documents.**\n\n[![Build Status](https://travis-ci.org/json-path/JsonPath.svg?branch=master)](https://travis-ci.org/json-path/JsonPath)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.jayway.jsonpath/json-path/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.jayway.jsonpath/json-path)\n[![Javadoc](https://www.javadoc.io/badge/com.jayway.jsonpath/json-path.svg)](http://www.javadoc.io/doc/com.jayway.jsonpath/json-path)\n\nJayway JsonPath is a Java port of [Stefan Goessner JsonPath implementation](http://goessner.net/articles/JsonPath/). \n\nGetting Started\n---------------\n\nJsonPath is available at the Central Maven Repository. Maven users add this to your POM.\n\n```xml\n<dependency>\n    <groupId>com.jayway.jsonpath</groupId>\n    <artifactId>json-path</artifactId>\n    <version>2.9.0</version>\n</dependency>\n```\n\nIf you need help ask questions at [Stack Overflow](http://stackoverflow.com/questions/tagged/jsonpath). Tag the question 'jsonpath' and 'java'.\n\nJsonPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination \nwith an XML document. The \"root member object\" in JsonPath is always referred to as `$` regardless if it is an \nobject or array.\n\nJsonPath expressions can use the dot–notation\n\n`$.store.book[0].title`\n\nor the bracket–notation\n\n`$['store']['book'][0]['title']`\n\nOperators\n---------\n\n| Operator                  | Description                                                        |\n| :------------------------ | :----------------------------------------------------------------- |\n| `$`                       | The root element to query. This starts all path expressions.       |\n| `@`                       | The current node being processed by a filter predicate.            |\n| `*`                       | Wildcard. Available anywhere a name or numeric are required.       |\n| `..`                      | Deep scan. Available anywhere a name is required.                  |\n| `.<name>`                 | Dot-notated child                                                  |\n| `['<name>' (, '<name>')]` | Bracket-notated child or children                                  |\n| `[<number> (, <number>)]` | Array index or indexes                                             |\n| `[start:end]`             | Array slice operator                                               |\n| `[?(<expression>)]`       | Filter expression. Expression must evaluate to a boolean value.    |\n\n\nFunctions\n---------\n\nFunctions can be invoked at the tail end of a path - the input to a function is the output of the path expression.\nThe function output is dictated by the function itself.\n\n| Function    | Description                                                                          | Output type          |\n|:------------|:-------------------------------------------------------------------------------------|:---------------------|\n| `min()`     | Provides the min value of an array of numbers                                        | Double               |\n| `max()`     | Provides the max value of an array of numbers                                        | Double               |\n| `avg()`     | Provides the average value of an array of numbers                                    | Double               | \n| `stddev()`  | Provides the standard deviation value of an array of numbers                         | Double               | \n| `length()`  | Provides the length of an array                                                      | Integer              |\n| `sum()`     | Provides the sum value of an array of numbers                                        | Double               |\n| `keys()`    | Provides the property keys (An alternative for terminal tilde `~`)                   | `Set<E>`             |\n| `concat(X)` | Provides a concatinated version of the path output with a new item                   | like input           |\n| `append(X)` | add an item to the json path output array                                            | like input           |\n| `first()`   | Provides the first item of an array                                                  | Depends on the array |\n| `last()`    | Provides the last item of an array                                                   | Depends on the array |\n| `index(X)`  | Provides the item of an array of index: X, if the X is negative, take from backwards | Depends on the array |\n\nFilter Operators\n-----------------\n\nFilters are logical expressions used to filter arrays. A typical filter would be `[?(@.age > 18)]` where `@` represents the current item being processed. More complex filters can be created with logical operators `&&` and `||`. String literals must be enclosed by single or double quotes (`[?(@.color == 'blue')]` or `[?(@.color == \"blue\")]`).   \n\n| Operator                 | Description                                                           |\n| :----------------------- | :-------------------------------------------------------------------- |\n| `==`                     | left is equal to right (note that 1 is not equal to '1')              |\n| `!=`                     | left is not equal to right                                            |\n| `<`                      | left is less than right                                               |\n| `<=`                     | left is less or equal to right                                        |\n| `>`                      | left is greater than right                                            |\n| `>=`                     | left is greater than or equal to right                                |\n| `=~`                     | left matches regular expression  [?(@.name =~ /foo.*?/i)]             |\n| `in`                     | left exists in right [?(@.size in ['S', 'M'])]                        |\n| `nin`                    | left does not exists in right                                         |\n| `subsetof`               | left is a subset of right [?(@.sizes subsetof ['S', 'M', 'L'])]       |\n| `anyof`                  | left has an intersection with right [?(@.sizes anyof ['M', 'L'])]     |\n| `noneof`                 | left has no intersection with right [?(@.sizes noneof ['M', 'L'])]    |\n| `size`                   | size of left (array or string) should match right                     |\n| `empty`                  | left (array or string) should be empty                                |\n\n\nPath Examples\n-------------\n\nGiven the json\n\n```javascript\n{\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Herman Melville\",\n                \"title\": \"Moby Dick\",\n                \"isbn\": \"0-553-21311-3\",\n                \"price\": 8.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"J. R. R. Tolkien\",\n                \"title\": \"The Lord of the Rings\",\n                \"isbn\": \"0-395-19395-8\",\n                \"price\": 22.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10\n}\n```\n\n| JsonPath                                       | Result |\n|:-------------------------------------------------------------------| :----- |\n| `$.store.book[*].author` | The authors of all books     |\n| `$..author`                           | All authors                         |\n| `$.store.*`                           | All things, both books and bicycles  |\n| `$.store..price`                 | The price of everything         |\n| `$..book[2]`                         | The third book                      |\n| `$..book[-2]`                       | The second to last book            |\n| `$..book[0,1]`                     | The first two books               |\n| `$..book[:2]`                       | All books from index 0 (inclusive) until index 2 (exclusive) |\n| `$..book[1:2]`                     | All books from index 1 (inclusive) until index 2 (exclusive) |\n| `$..book[-2:]`                     | Last two books                   |\n| `$..book[2:]`                     | All books from index 2 (inclusive) to last  |\n| `$..book[?(@.isbn)]`                                                 | All books with an ISBN number         |\n| `$.store.book[?(@.price < 10)]`                                      | All books in store cheaper than 10  |\n| `$..book[?(@.price <= $['expensive'])]`                              | All books in store that are not \"expensive\"  |\n| `$..book[?(@.author =~ /.*REES/i)]`                                  | All books matching regex (ignore case)  |\n| `$..*`                                                               | Give me every thing   \n| `$..book.length()`                                                   | The number of books                      |\n\nReading a Document\n------------------\nThe simplest most straight forward way to use JsonPath is via the static read API.\n\n```java\nString json = \"...\";\n\nList<String> authors = JsonPath.read(json, \"$.store.book[*].author\");\n```\n\nIf you only want to read once this is OK. In case you need to read an other path as well this is not the way \nto go since the document will be parsed every time you call JsonPath.read(...). To avoid the problem you can \nparse the json first.\n\n```java\nString json = \"...\";\nObject document = Configuration.defaultConfiguration().jsonProvider().parse(json);\n\nString author0 = JsonPath.read(document, \"$.store.book[0].author\");\nString author1 = JsonPath.read(document, \"$.store.book[1].author\");\n```\nJsonPath also provides a fluent API. This is also the most flexible one.\n\n```java\nString json = \"...\";\n\nReadContext ctx = JsonPath.parse(json);\n\nList<String> authorsOfBooksWithISBN = ctx.read(\"$.store.book[?(@.isbn)].author\");\n\n\nList<Map<String, Object>> expensiveBooks = JsonPath\n                            .using(configuration)\n                            .parse(json)\n                            .read(\"$.store.book[?(@.price > 10)]\", List.class);\n```\n\nWhat is Returned When?\n----------------------\nWhen using JsonPath in java its important to know what type you expect in your result. JsonPath will automatically \ntry to cast the result to the type expected by the invoker.\n\n```java\n//Will throw an java.lang.ClassCastException    \nList<String> list = JsonPath.parse(json).read(\"$.store.book[0].author\");\n\n//Works fine\nString author = JsonPath.parse(json).read(\"$.store.book[0].author\");\n```\n\nWhen evaluating a path you need to understand the concept of when a path is `definite`. A path is `indefinite` if it contains:\n\n* `..` - a deep scan operator\n* `?(<expression>)` - an expression\n* `[<number>, <number> (, <number>)]` - multiple array indexes\n\n`Indefinite` paths always returns a list (as represented by current JsonProvider). \n\nBy default a simple object mapper is provided by the MappingProvider SPI. This allows you to specify the return type you want and the MappingProvider will\ntry to perform the mapping. In the example below mapping between `Long` and `Date` is demonstrated. \n\n```java\nString json = \"{\\\"date_as_long\\\" : 1411455611975}\";\n\nDate date = JsonPath.parse(json).read(\"$['date_as_long']\", Date.class);\n```\n\nIf you configure JsonPath to use `JacksonMappingProvider`, `GsonMappingProvider`, or `JakartaJsonProvider` you can even map your JsonPath output directly into POJO's.\n\n```java\nBook book = JsonPath.parse(json).read(\"$.store.book[0]\", Book.class);\n```\n\nTo obtain full generics type information, use TypeRef.\n\n```java\nTypeRef<List<String>> typeRef = new TypeRef<List<String>>() {};\n\nList<String> titles = JsonPath.parse(JSON_DOCUMENT).read(\"$.store.book[*].title\", typeRef);\n```\n\nPredicates\n----------\nThere are three different ways to create filter predicates in JsonPath.\n\n### Inline Predicates\n\nInline predicates are the ones defined in the path.\n\n```java\nList<Map<String, Object>> books =  JsonPath.parse(json)\n                                     .read(\"$.store.book[?(@.price < 10)]\");\n```\n\nYou can use `&&` and `||` to combine multiple predicates `[?(@.price < 10 && @.category == 'fiction')]` , \n`[?(@.category == 'reference' || @.price > 10)]`.\n \nYou can use `!` to negate a predicate `[?(!(@.price < 10 && @.category == 'fiction'))]`.\n\n### Filter Predicates\n \nPredicates can be built using the Filter API as shown below:\n\n```java\nimport static com.jayway.jsonpath.JsonPath.parse;\nimport static com.jayway.jsonpath.Criteria.where;\nimport static com.jayway.jsonpath.Filter.filter;\n...\n...\n\nFilter cheapFictionFilter = filter(\n   where(\"category\").is(\"fiction\").and(\"price\").lte(10D)\n);\n\nList<Map<String, Object>> books =  \n   parse(json).read(\"$.store.book[?]\", cheapFictionFilter);\n\n```\nNotice the placeholder `?` for the filter in the path. When multiple filters are provided they are applied in order where the number of placeholders must match \nthe number of provided filters. You can specify multiple predicate placeholders in one filter operation `[?, ?]`, both predicates must match. \n\nFilters can also be combined with 'OR' and 'AND'\n```java\nFilter fooOrBar = filter(\n   where(\"foo\").exists(true)).or(where(\"bar\").exists(true)\n);\n   \nFilter fooAndBar = filter(\n   where(\"foo\").exists(true)).and(where(\"bar\").exists(true)\n);\n```\n\n### Roll Your Own\n \nThird option is to implement your own predicates\n \n```java \nPredicate booksWithISBN = new Predicate() {\n    @Override\n    public boolean apply(PredicateContext ctx) {\n        return ctx.item(Map.class).containsKey(\"isbn\");\n    }\n};\n\nList<Map<String, Object>> books = \n   reader.read(\"$.store.book[?].isbn\", List.class, booksWithISBN);\n```\n\nPath vs Value\n-------------\nIn the Goessner implementation a JsonPath can return either `Path` or `Value`. `Value` is the default and what all the examples above are returning. If you rather have the path of the elements our query is hitting this can be achieved with an option.\n\n```java\nConfiguration conf = Configuration.builder()\n   .options(Option.AS_PATH_LIST).build();\n\nList<String> pathList = using(conf).parse(json).read(\"$..author\");\n\nassertThat(pathList).containsExactly(\n    \"$['store']['book'][0]['author']\",\n    \"$['store']['book'][1]['author']\",\n    \"$['store']['book'][2]['author']\",\n    \"$['store']['book'][3]['author']\");\n```\n\nSet a value \n-----------\nThe library offers the possibility to set a value.\n\n```java\nString newJson = JsonPath.parse(json).set(\"$['store']['book'][0]['author']\", \"Paul\").jsonString();\n```\n\n\n\nTweaking Configuration\n----------------------\n\n### Options\nWhen creating your Configuration there are a few option flags that can alter the default behaviour.\n\n**DEFAULT_PATH_LEAF_TO_NULL**\n<br/>\nThis option makes JsonPath return null for missing leafs. Consider the following json\n\n```javascript\n[\n   {\n      \"name\" : \"john\",\n      \"gender\" : \"male\"\n   },\n   {\n      \"name\" : \"ben\"\n   }\n]\n```\n\n```java\nConfiguration conf = Configuration.defaultConfiguration();\n\n//Works fine\nString gender0 = JsonPath.using(conf).parse(json).read(\"$[0]['gender']\");\n//PathNotFoundException thrown\nString gender1 = JsonPath.using(conf).parse(json).read(\"$[1]['gender']\");\n\nConfiguration conf2 = conf.addOptions(Option.DEFAULT_PATH_LEAF_TO_NULL);\n\n//Works fine\nString gender0 = JsonPath.using(conf2).parse(json).read(\"$[0]['gender']\");\n//Works fine (null is returned)\nString gender1 = JsonPath.using(conf2).parse(json).read(\"$[1]['gender']\");\n```\n \n**ALWAYS_RETURN_LIST**\n<br/>\nThis option configures JsonPath to return a list even when the path is `definite`. \n \n```java\nConfiguration conf = Configuration.defaultConfiguration();\n\n//ClassCastException thrown\nList<String> genders0 = JsonPath.using(conf).parse(json).read(\"$[0]['gender']\");\n\nConfiguration conf2 = conf.addOptions(Option.ALWAYS_RETURN_LIST);\n\n//Works fine\nList<String> genders0 = JsonPath.using(conf2).parse(json).read(\"$[0]['gender']\");\n``` \n**SUPPRESS_EXCEPTIONS**\n<br/>\nThis option makes sure no exceptions are propagated from path evaluation. It follows these simple rules:\n\n* If option `ALWAYS_RETURN_LIST` is present an empty list will be returned\n* If option `ALWAYS_RETURN_LIST` is **NOT** present null returned \n\n**REQUIRE_PROPERTIES**\n</br>\nThis option configures JsonPath to require properties defined in path when an `indefinite` path is evaluated.\n\n```java\nConfiguration conf = Configuration.defaultConfiguration();\n\n//Works fine\nList<String> genders = JsonPath.using(conf).parse(json).read(\"$[*]['gender']\");\n\nConfiguration conf2 = conf.addOptions(Option.REQUIRE_PROPERTIES);\n\n//PathNotFoundException thrown\nList<String> genders = JsonPath.using(conf2).parse(json).read(\"$[*]['gender']\");\n```\n\n### JsonProvider SPI\n\nJsonPath is shipped with five different JsonProviders:\n\n* [JsonSmartJsonProvider](https://github.com/netplex/json-smart-v2) (default)\n* [JacksonJsonProvider](https://github.com/FasterXML/jackson)\n* [JacksonJsonNodeJsonProvider](https://github.com/FasterXML/jackson)\n* [GsonJsonProvider](https://code.google.com/p/google-gson/) \n* [JsonOrgJsonProvider](https://github.com/stleary/JSON-java)\n* [JakartaJsonProvider](https://javaee.github.io/jsonp/)\n\nChanging the configuration defaults as demonstrated should only be done when your application is being initialized. Changes during runtime is strongly discouraged, especially in multi threaded applications.\n  \n```java\nConfiguration.setDefaults(new Configuration.Defaults() {\n\n    private final JsonProvider jsonProvider = new JacksonJsonProvider();\n    private final MappingProvider mappingProvider = new JacksonMappingProvider();\n      \n    @Override\n    public JsonProvider jsonProvider() {\n        return jsonProvider;\n    }\n\n    @Override\n    public MappingProvider mappingProvider() {\n        return mappingProvider;\n    }\n    \n    @Override\n    public Set<Option> options() {\n        return EnumSet.noneOf(Option.class);\n    }\n});\n```\n\nNote that the JacksonJsonProvider requires `com.fasterxml.jackson.core:jackson-databind:2.4.5` and the GsonJsonProvider requires `com.google.code.gson:gson:2.3.1` on your classpath. \n\nBoth of Jakarta EE 9 [JSON-P (JSR-342)](https://javaee.github.io/jsonp/) and [JSON-B (JSR-367)](http://json-b.net/) providers expect at least Java 8 and require compatible JSON API implementations (such as [Eclipse Glassfish](https://projects.eclipse.org/projects/ee4j.jsonp) and [Eclipse Yasson](https://projects.eclipse.org/projects/ee4j.yasson)) on application runtime classpath; such implementations may also be provided by Java EE application container. Please also note that Apache Johnzon is not classpath-compatible with Jakarta EE 9 specification yet, and if JSON-B mapping provider is chosen then JSON-P provider must be configured and used, too.\n\nOne peculiarity of Jakarta EE 9 specifications for JSON processing and databinding (mapping) is immutability of Json arrays and objects as soon as they are fully parsed or written to. To respect the API specification, but allow JsonPath to modify Json documents through add, set/put, replace, and delete operations, `JakartaJsonProvider` has to be initiliazed with optional `true` argument:\n\n* `JsonProvider jsonProvider = new JakartaJsonProvider(true)` (enable mutable Json arrays and objects)\n* `JsonProvider jsonProvider = new JakartaJsonProvider()` (default, strict JSON-P API compliance)\n\nAll lookup and read operations with JsonPath are supported regardless of initilization mode. Default mode also needs less memory and is more performant.\n  \n\n### Cache SPI\n\nIn JsonPath 2.1.0 a new Cache SPI was introduced. This allows API consumers to configure path caching in a way that suits their needs. The cache must be configured before it is accesses for the first time or a JsonPathException is thrown. JsonPath ships with two cache implementations\n\n* `com.jayway.jsonpath.spi.cache.LRUCache` (default, thread safe)\n* `com.jayway.jsonpath.spi.cache.NOOPCache` (no cache)\n\nIf you want to implement your own cache the API is simple. \n\n```java\nCacheProvider.setCache(new Cache() {\n    //Not thread safe simple cache\n    private Map<String, JsonPath> map = new HashMap<String, JsonPath>();\n\n    @Override\n    public JsonPath get(String key) {\n        return map.get(key);\n    }\n\n    @Override\n    public void put(String key, JsonPath jsonPath) {\n        map.put(key, jsonPath);\n    }\n});\n```\n\n\n\n\n\n\n[![Analytics](https://ga-beacon.appspot.com/UA-54945131-1/jsonpath/index)](https://github.com/igrigorik/ga-beacon)\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 4.904296875,
          "content": "buildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:6.1.0'\n    }\n}\n\next {\n    libs = [\n            jsonSmart      : 'net.minidev:json-smart:2.5.1',\n            slf4jApi       : 'org.slf4j:slf4j-api:2.0.11',\n            gson           : 'com.google.code.gson:gson:2.10.1',\n            hamcrest       : 'org.hamcrest:hamcrest:2.2',\n            jacksonDatabind: 'com.fasterxml.jackson.core:jackson-databind:2.16.1',\n            jettison       : 'org.codehaus.jettison:jettison:1.5.4',\n            jsonOrg        : 'org.json:json:20231013',\n            tapestryJson   : 'org.apache.tapestry:tapestry-json:5.8.3',\n            jakartaJsonP   : 'jakarta.json:jakarta.json-api:2.0.2',\n            jakartaJsonB   : 'jakarta.json.bind:jakarta.json.bind-api:2.0.0',\n\n            test           : [\n                    'commons-io:commons-io:2.15.0',\n                    'org.junit.jupiter:junit-jupiter:5.10.1',\n                    'org.assertj:assertj-core:3.25.1',\n                    'org.hamcrest:hamcrest:2.2',\n                    'org.glassfish:jakarta.json:2.0.1',\n                    'org.eclipse:yasson:2.0.4',\n                    'org.slf4j:slf4j-simple:2.0.9',\n                    'com.google.code.gson:gson:2.10.1',\n                    'org.hamcrest:hamcrest:2.2',\n                    'com.fasterxml.jackson.core:jackson-databind:2.16.1',\n                    'org.codehaus.jettison:jettison:1.5.4',\n                    'org.json:json:20231013',\n                    'org.apache.tapestry:tapestry-json:5.8.3',\n                    'jakarta.json:jakarta.json-api:2.0.2',\n                    'jakarta.json.bind:jakarta.json.bind-api:2.0.0'\n\n            ]\n    ]\n    snapshotVersion = true\n}\n\nallprojects {\n    ext.displayName = null\n    ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')\n\n    group = 'com.jayway.jsonpath'\n    version = '2.10.0' + (snapshotVersion ? \"-SNAPSHOT\" : \"\")\n\n}\n\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: 'java-library'\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    java {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n\n    repositories {\n        mavenCentral()\n    }\n\n    java {\n        withJavadocJar()\n        withSourcesJar()\n    }\n\n    test {\n        useJUnitPlatform()\n        testLogging {\n            events \"passed\", \"skipped\", \"failed\"\n        }\n    }\n\n    signing {\n        sign publishing.publications\n        required { !snapshotVersion && gradle.taskGraph.hasTask(\"publish\") }\n    }\n\n    javadoc {\n        if (JavaVersion.current().isJava8Compatible()) {\n            options.addStringOption('Xdoclint:none', '-quiet')\n        }\n\n        if (JavaVersion.current().isJava9Compatible()) {\n            options.addBooleanOption('html5', true)\n        }\n    }\n\n    publishing {\n        repositories {\n            maven {\n                def releaseRepo = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n                def snapshotRepo = \"https://oss.sonatype.org/content/repositories/snapshots/\"\n                url = snapshotVersion ? snapshotRepo : releaseRepo\n                credentials {\n                    username = project.hasProperty('sonatypeOssUsername') ? sonatypeOssUsername : \"Unknown user\"\n                    password = project.hasProperty('sonatypeOssPassword') ? sonatypeOssPassword : \"Unknown password\"\n                }\n            }\n        }\n        publications {\n            mavenJava(MavenPublication) {\n                from components.java\n\n                artifactId = project.name\n                //artifactId = jar.archiveBaseName\n\n                pom {\n                    name = project.name\n                    description = 'A library to query and verify JSON'\n                    url = 'https://github.com/jayway/JsonPath'\n\n                    licenses {\n                        license {\n                            name = \"The Apache Software License, Version 2.0\"\n                            url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\"\n                            distribution = \"repo\"\n                        }\n                    }\n\n                    scm {\n                        url = 'scm:git:git://github.com/jayway/JsonPath.git'\n                        connection = 'scm:git:git://github.com/jayway/JsonPath.git'\n                        developerConnection = 'scm:git:git://github.com/jayway/JsonPath.git'\n                    }\n\n                    developers {\n                        developer {\n                            id = 'kalle.stenflo'\n                            name = 'Kalle Stenflo'\n                            email = 'kalle.stenflo (a) gmail.com'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nwrapper {\n    gradleVersion = '8.5'\n}\n\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 3.6064453125,
          "content": "2.2.0 (2016-02-29)\n===========\n* Upgraded dependency versions\n* Hamcrest-matcher support in json-path-assert\n* Bug fixes and improvements\n\n2.1.0 (2015-11-22)\n===========\n* Upgraded dependency versions\n* Introduced Cache SPI\n* Introduced path functions\n* Introduced JsonOrgJsonProvider\n* OSGI improvements\n* Inline filters supports same operators as Filter builders\n* Improved filter evaluation\n* Internal makeovers\n* New write operations : map(...) and renameKey(...)\n\n2.0.0 (2015-03-19)\n=================\n* Upgraded dependency versions\n* Moved JsonProvider and MappingProvider implementations out of the interal package **OSGi**\n* Removed HTTP provider and methods\n* Add an unwrap(Object) method to JsonProvider, use it when extracting values for Criteria evaluation **breaks JsonProvider SPI**\n* Fixed issue #71 - esacpe character in inline predicates \n  `JsonPath.read(json, \"$.logs[?(@.message == 'it\\\\'s here')].message\");`\n* New method `jsonString()` added to `ReadContext` and `WriteContext` to extract json model as a string  \n* Path does not have to be definite in filter API `filter(where(\"authors[*].lastName\").contains(\"Waugh\"))`\n\n1.2.0 (2014-11-11)\n==================\n* Added EvaluationListener interface that allows abortion of evaluation if criteria is fulfilled.\n  this makes it possible to limit the number of results to fetch when a document is scanned. Also \n  added utility method to limit results `JsonPath.parse(json).limit(1).read(\"$..title\", List.class);`\n* Added support for OR in inline filters `[?(@.foo == 'bar' || @.foo == 'baz')]` \n* Upgrade json-smart to 2.1.0\n* Support for Update and Delete by path. **breaks JsonProvider SPI**\n  `parse(JSON_DOCUMENT).set(\"$.store.book[*].display-price\", 1)`\n  `parse(JSON_DOCUMENT).put(\"$.store.book[1]\", \"new-key\", \"new-val\")`\n  `parse(JSON_DOCUMENT).add(\"$.store.book\", newBook)`\n  `parse(JSON_DOCUMENT).delete(\"$.store.book[1].display-price\")`\n* Support regex in inline filters (ruby syntax)\n  `parse(JSON_DOCUMENT).read(\"$.store.book[?(@.category =~ /reference/)].author\")`\n  `parse(JSON_DOCUMENT).read(\"$.store.book[?(@.category =~ /REFERENCE/i)].author\")`\n* Inline filter does not require path statement on left side of operator  \n  `parse(JSON_DOCUMENT).read(\"$.store.book[?(@.category == 'reference')].author\")`    \n  `parse(JSON_DOCUMENT).read(\"$.store.book[?('reference' == @.category)].author\")`    \n* Negate exist checks in inline filters (not defined or null) \n  `parse(JSON_DOCUMENT).read(\"$.store.book[?(!@.isbn)]\")`    \n* Improved object mapping with Jackson and Gson (now handles generic types)\n* JacksonJsonNodeJsonProvider supporting path operations on `com.fasterxml.jackson.databind.JsonNode`\n* Exceptions thrown by JsonPath.compile are now wrapped in an InvalidPathException\n* Fixed Deep scanning issue (#60) \n\n1.1.0 (2014-10-01)\n==================\n* Reintroduced method JsonProvider.createMap(). This should never have been removed. **NOTE: This is a breaking change if you implemented your own JsonProvider based on the 1.0.0 API**  \n* Filters threw exception if an item being filtered did not contain the path being filtered upon.\n* Multi-property selects works as it did in 0.9. e.g. `$[*]['category', 'price']` \n* Cache results when predicates refer to path in document e.g. `$[*][?(@.price <= $.max-price)]` will only evaluate `$.max-price` once.   \n\n1.0.0 (2014-09-26)\n==================\n* Complete rewrite of internals. Major API changes.\n* Better compliance with the Goessner implementation\n\nRelease history\n===============\n* 0.9.0 (2013-09-26)\n* 0.8.1 (2012-04-16)\n* 0.8.0 (2012-03-08)\n* 0.5.6 (2012-02-09)\n* 0.5.5 (2011-07-15)\n* 0.5.4 (2011-06-26)\n* 0.5.3 (2011-02-18)\n* 0.5.2 (2011-02-08)\n\n\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.6982421875,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "json-path-assert",
          "type": "tree",
          "content": null
        },
        {
          "name": "json-path",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsonpath.png",
          "type": "blob",
          "size": 4.0390625,
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0771484375,
          "content": "rootProject.name = 'json-path-parent'\ninclude ':json-path', ':json-path-assert'"
        },
        {
          "name": "system.properties",
          "type": "blob",
          "size": 0.0234375,
          "content": "java.runtime.version=1.8"
        }
      ]
    }
  ]
}