{
  "metadata": {
    "timestamp": 1736708727837,
    "page": 175,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ximsfei/Android-skin-support",
      "stars": 6433,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 pengfeng wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.4384765625,
          "content": "# Android-skin-support\n\n中文 | [In English](docs/README.md) \n\n[![skin-support](https://img.shields.io/badge/release-v4.0.5-green.svg)](http://jcenter.bintray.com/skin/support)\n![build](https://img.shields.io/badge/build-passing-green.svg)\n![license](https://img.shields.io/badge/license-mit-blue.svg)\n\n* [介绍](#介绍)\n  * [功能](#功能)\n  * [TODO](#todo)\n  * [目录结构](#目录结构)\n* [Demo](#demo)\n* [框架用法](#用法)\n  * [导入](#导入)\n  * [使用](#使用)\n    * [初始化](#在application的oncreate中初始化)\n    * [皮肤开关](#皮肤开关)\n    * [加载插件皮肤库](#加载插件皮肤库)\n    * [自定义view换肤](#自定义view换肤)\n  * [应用内换肤](#应用内换肤)\n  * [插件式换肤](#插件式换肤)\n    * [新建皮肤工程](#新建android-application工程)\n    * [添加皮肤资源](#将需要换肤的资源放到res目录下同名资源)\n    * [生成皮肤插件](#打包生成apk-即为皮肤包)\n    * [加载皮肤插件](#加载皮肤插件)\n  * [自定义加载策略](#自定义加载策略)\n    * [自定义sdcard路径](#自定义sdcard路径)\n    * [zip包中加载资源](#zip包中加载资源)\n  * [动态设置资源](#动态设置资源)\n    * [动态设置颜色](#动态设置颜色)\n    * [动态设置图片](#动态设置图片)\n  * [获取当前使用皮肤](#获取当前使用皮肤)\n* [AlertDialog换肤](docs/AlertDialog.md)\n* [更新日志](docs/ChangeLog.md)\n  * [skin-support 更新日志](docs/ChangeLog.md#skin-support-基础控件-支持)\n  * [skin-support-design 更新日志](docs/ChangeLog.md#skin-support-design-material-design-支持)\n  * [skin-support-cardview 更新日志](docs/ChangeLog.md#skin-support-cardview-cardview-支持)\n  * [skin-support-constraint-layout 更新日志](docs/ChangeLog.md#skin-support-constraint-layout-constraintlayout-支持)\n* [第三方控件适配库](docs/ThirdPartSupport.md)\n  * [hdodenhof/CircleImageView](docs/ThirdPartSupport.md#hdodenhofcircleimageview)\n  * [H07000223/FlycoTabLayout](docs/ThirdPartSupport.md#h07000223flycotablayout)\n* [缺点](#缺点)\n* [谁在使用](#谁在使用)\n* [FAQ](docs/FAQ.md)\n* [技术交流](#技术交流)\n* [LICENSE](#license-mit)\n\n## 介绍\n\nAndroid-skin-support: 一款 Android 换肤框架, 极低的学习成本, 极好的用户体验.\n\n只需要一行代码, 就可以实现换肤, 你值得拥有!!!\n\n```java\nSkinCompatManager.withoutActivity(this).loadSkin();\n```\n\n就这么简单, 你的APK已经拥有了强大的换肤功能, 当然现在是拥有了换肤功能, 别忘了[制作皮肤包](#应用内换肤).\n\n### 功能\n\n* [x] 支持布局中用到的资源换肤。\n* [x] 支持代码中设置的资源换肤。\n* [x] 默认支持大部分基础控件，Material Design换肤。\n* [x] 支持动态设置主题[颜色值](demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/picker/ColorPickerActivity.java)，支持选择sdcard上的图片作为[drawable](demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/picker/DrawablePickerActivity.java)换肤资源。\n* [x] 支持多种加载策略([应用内](#应用内换肤)/[插件式](#插件式换肤)/[自定义sdcard路径](#自定义加载策略)/[zip等资源](demo/skin-androidx-app/src/main/java/com/ximsfei/skindemo/loader/ZipSDCardLoader.java)等)。\n* [x] 资源加载优先级: 动态设置资源-加载策略中的资源-插件式换肤/应用内换肤-应用资源。\n* [x] 支持定制化，选择需要的模块加载。\n* [x] 支持矢量图(vector/svg)换肤。\n* [x] skin-support 4.0.0以上支持AndroidX，4.0.0以下支持support库\n\n*[详细内容, 请查看更新日志](docs/ChangeLog.md)，那里有所有功能提交记录*\n\n### TODO\n\n* [x] 解耦androidx\n* [ ] 支持原生组件换肤\n* [ ] 支持多语言。\n* [ ] 支持多字体。\n* [ ] 支持Preference。\n* [ ] skin-mobile 实现:\n  * [ ] 动态修改主题颜色值\n  * [ ] 控件使用案例\n  * [x] 关于页面\n* [ ] Wiki\n\n### 目录结构\n\n> [demo](demo)                                                        // 换肤demo 集合\n\n>> [skin-sample](demo/skin-sample)([skin-app](demo/skin-app))         // demo app\n\n>> [skin-night](demo/skin-night)                                      // 夜间模式皮肤工程\n\n> [androidx](androidx)                                  // Android 原生控件\n\n>> [skin-support](androidx／skin-support)                      // 换肤框架\n\n>> [skin-support-appcompat](androidx／skin-support-appcompat)  // 换肤框架, 基础控件支持\n\n>> [skin-support-cardview](androidx／skin-support-cardview)    // 换肤框架, CardView 支持\n\n>> [skin-support-design](androidx／skin-support-design)        // 换肤框架, Material Design 支持\n\n>> [skin-support-constraint-layout](androidx／skin-support-constraint-layout)  // 换肤框架, ConstraintLayout 支持\n\n> [third-part-support](third-part-support)           // 第三方控件换肤支持\n\n## Demo\n\n![default](https://github.com/ximsfei/Res/blob/master/skin/preview/default.png)\n![app-in](https://github.com/ximsfei/Res/blob/master/skin/preview/app-in.png)\n![plug-in](https://github.com/ximsfei/Res/blob/master/skin/preview/plug-in.png)\n\n## 用法\n\n[最新版本选择, 请查看更新日志](docs/ChangeLog.md)\n\n### 导入:\n\n#### support library\n\n如果项目中还在使用support库，添加以下依赖\n```xml\nimplementation 'skin.support:skin-support:3.1.4'                   // skin-support 基础控件支持\nimplementation 'skin.support:skin-support-design:3.1.4'            // skin-support-design material design 控件支持[可选]\nimplementation 'skin.support:skin-support-cardview:3.1.4'          // skin-support-cardview CardView 控件支持[可选]\nimplementation 'skin.support:skin-support-constraint-layout:3.1.4' // skin-support-constraint-layout ConstraintLayout 控件支持[可选]\n```\n\n在Application的onCreate中初始化\n    \n```java\n@Override\npublic void onCreate() {\n    super.onCreate();\n    SkinCompatManager.withoutActivity(this)                         // 基础控件换肤初始化\n            .addInflater(new SkinMaterialViewInflater())            // material design 控件换肤初始化[可选]\n            .addInflater(new SkinConstraintViewInflater())          // ConstraintLayout 控件换肤初始化[可选]\n            .addInflater(new SkinCardViewInflater())                // CardView v7 控件换肤初始化[可选]\n            .setSkinStatusBarColorEnable(false)                     // 关闭状态栏换肤，默认打开[可选]\n            .setSkinWindowBackgroundEnable(false)                   // 关闭windowBackground换肤，默认打开[可选]\n            .loadSkin();\n}\n```\n\n> 如果项目中使用的Activity继承自AppCompatActivity，需要重载getDelegate()方法\n\n```java\n@NonNull\n@Override\npublic AppCompatDelegate getDelegate() {\n    return SkinAppCompatDelegateImpl.get(this, this);\n}\n```\n\n#### AndroidX support:\n\n如果项目中使用了[AndroidX](https://developer.android.google.cn/topic/libraries/support-library/androidx-overview), 添加以下依赖\n```xml\nimplementation 'skin.support:skin-support:4.0.5'                   // skin-support\nimplementation 'skin.support:skin-support-appcompat:4.0.5'         // skin-support 基础控件支持\nimplementation 'skin.support:skin-support-design:4.0.5'            // skin-support-design material design 控件支持[可选]\nimplementation 'skin.support:skin-support-cardview:4.0.5'          // skin-support-cardview CardView 控件支持[可选]\nimplementation 'skin.support:skin-support-constraint-layout:4.0.5' // skin-support-constraint-layout ConstraintLayout 控件支持[可选]\n```\n\n*⚠️ 从3.x.x迁移至4.0.5+, 解耦了换肤库对appcompat包的依赖，需要新增以下代码*\n```gradle\nimplementation 'skin.support:skin-support-appcompat:4.0.5'         // skin-support 基础控件支持\n```\n\n在Application的onCreate中初始化\n    \n```java\n@Override\npublic void onCreate() {\n    super.onCreate();\n    SkinCompatManager.withoutActivity(this)\n            .addInflater(new SkinAppCompatViewInflater())           // 基础控件换肤初始化\n            .addInflater(new SkinMaterialViewInflater())            // material design 控件换肤初始化[可选]\n            .addInflater(new SkinConstraintViewInflater())          // ConstraintLayout 控件换肤初始化[可选]\n            .addInflater(new SkinCardViewInflater())                // CardView v7 控件换肤初始化[可选]\n            .setSkinStatusBarColorEnable(false)                     // 关闭状态栏换肤，默认打开[可选]\n            .setSkinWindowBackgroundEnable(false)                   // 关闭windowBackground换肤，默认打开[可选]\n            .loadSkin();\n}\n```\n\n> 如果项目中使用的Activity继承自AppCompatActivity，需要重载getDelegate()方法\n\n```java\n@NonNull\n@Override\npublic AppCompatDelegate getDelegate() {\n    return SkinAppCompatDelegateImpl.get(this, this);\n}\n```\n\n### 使用:\n\n#### 皮肤开关\n\n如果项目中有特殊需求。例如, 股票控件: 控件颜色始终为红色或绿色, 不需要随着模式切换而换肤\n\n那么可以使用类似的方法, 直接设置drawable\n```xml\nsetBackgroundDrawable(redDrawable) // 不支持换肤\nbackground=\"#ce3d3a\"\n```\n而不是使用R.drawable.red\n```xml\nsetBackgroundResource(R.drawable.red)\nbackground=\"@drawable/red\"\n```\n\n#### 加载插件皮肤库\n\n```java\n// 指定皮肤插件\nSkinCompatManager.getInstance().loadSkin(\"new.skin\"[, SkinLoaderListener], int strategy);\n\n// 恢复应用默认皮肤\nSkinCompatManager.getInstance().restoreDefaultTheme();\n```\n\n#### 自定义View换肤\n\n要点:\n\n1. 实现SkinCompatSupportable接口\n\n  1. applySkin方法中实现换肤操作\n\n2. 在构造方法中解析出需要换肤的resId\n\n* 自定义View可以直接继承自SkinCompatView, SkinCompatLinearLayout等已有控件\n\n  eg: [CustomTextView](demo/skin-app/src/main/java/com/ximsfei/skindemo/widget/CustomTextView.java)\n\n* 不想继承自已有控件\n\n  eg: [CustomTextView2](demo/skin-app/src/main/java/com/ximsfei/skindemo/widget/CustomTextView2.java)\n\n* 需要换肤自定义属性\n\n  // 需要换肤AutoCompleteTextView的R.attr.popupBackground属性\n\n  eg: [SkinCompatAutoCompleteTextView](androidx/skin-support-appcompat/src/main/java/skin/support/widget/SkinCompatAutoCompleteTextView.java)\n\n* 需要使用第三方库控件怎么办\n\n  // 需要使用https://github.com/hdodenhof/CircleImageView 控件, 并且要支持换肤\n\n  eg: [SkinCompatCircleImageView](third-part-support/circleimageview/src/main/java/skin/support/circleimageview/widget/SkinCompatCircleImageView.java)\n\n### 应用内换肤:\n\n应用内换肤，皮肤名为: night; 新增需要换肤的资源添加后缀或者前缀。\n\n需要换肤的资源为R.color.windowBackgroundColor, 添加对应资源R.color.windowBackgroundColor_night。\n\n加载应用内皮肤:\n```java\nSkinCompatManager.getInstance().loadSkin(\"night\", SkinCompatManager.SKIN_LOADER_STRATEGY_BUILD_IN); // 后缀加载\nSkinCompatManager.getInstance().loadSkin(\"night\", SkinCompatManager.SKIN_LOADER_STRATEGY_PREFIX_BUILD_IN); // 前缀加载\n```\n\n推荐将应用内换肤相关的皮肤资源放到单独的目录中\n\neg: [res-night](https://github.com/ximsfei/Android-skin-support/tree/master/demo/skin-app/src/main/res-night)\n\n*注: 如果使用这种方式来增加换肤资源，记得在build.gradle 中配置一下这个资源目录 sourceSets {main {res.srcDirs = ['src/main/res', 'src/main/res-night']}}*\n\n\n### 插件式换肤:\n\n#### 新建Android application工程\n\n皮肤工程包名不能和宿主应用包名相同.\n\n例如:\n```xml\n宿主包名: com.ximsfei.skindemo\n夜间模式: com.ximsfei.skindemo.night\n```\n\n#### 将需要换肤的资源放到res目录下(同名资源)\n\n例如 APK中窗口背景颜色为\n\ncolors.xml\n```xml\n<color name=\"background\">#ffffff</color>\n```\n那么夜间模式你可以在skin-night工程中设置\n\ncolors.xml\n```xml\n<color name=\"background\">#000000</color>\n```\n\n#### 打包生成apk, 即为皮肤包\n\n将打包生成的apk文件, 重命名为'xxx.skin', 防止apk结尾的文件造成混淆.\n\n#### 加载皮肤插件\n\n加载插件式皮肤, 将皮肤包放到assets/skins目录下\n```java\nSkinCompatManager.getInstance().loadSkin(\"night.skin\", SkinCompatManager.SKIN_LOADER_STRATEGY_ASSETS);\n```\n\n### 自定义加载策略:\n\n#### 自定义sdcard路径\n\n继承自`SkinSDCardLoader`，通过`getSkinPath`方法指定皮肤加载路径，通过`getType`方法指定加载器type。\n\n```java\npublic class CustomSDCardLoader extends SkinSDCardLoader {\n    public static final int SKIN_LOADER_STRATEGY_SDCARD = Integer.MAX_VALUE;\n\n    @Override\n    protected String getSkinPath(Context context, String skinName) {\n        return new File(SkinFileUtils.getSkinDir(context), skinName).getAbsolutePath();\n    }\n\n    @Override\n    public int getType() {\n        return SKIN_LOADER_STRATEGY_SDCARD;\n    }\n}\n```\n\n*注: 自定义加载器type 值最好从整数最大值开始递减，框架的type值从小数开始递增，以免将来框架升级造成type 值冲突*\n\n在Application中，添加自定义加载策略:\n\n```java\nSkinCompatManager.withoutActivity(this)\n        .addStrategy(new CustomSDCardLoader());          // 自定义加载策略，指定SDCard路径\n```\n\n*注: 自定义加载器必须在Application中注册，皮肤切换后，重启应用需要根据当前策略加载皮肤*\n\n使用自定义加载器加载皮肤:\n\n```java\nSkinCompatManager.getInstance().loadSkin(\"night.skin\", null, CustomSDCardLoader.SKIN_LOADER_STRATEGY_SDCARD);\n```\n\n#### zip包中加载资源\n\n继承自`SkinSDCardLoader`，在`loadSkinInBackground`方法中解压资源，在`getDrawable`等方法中返回加压后的资源。\n\n```java\npublic class ZipSDCardLoader extends SkinSDCardLoader {\n    public static final int SKIN_LOADER_STRATEGY_ZIP = Integer.MAX_VALUE - 1;\n\n    @Override\n    public String loadSkinInBackground(Context context, String skinName) {\n        // TODO 解压zip包中的资源，同时可以根据skinName安装皮肤包(.skin)。\n        return super.loadSkinInBackground(context, skinName);\n    }\n\n    @Override\n    protected String getSkinPath(Context context, String skinName) {\n        // TODO 返回皮肤包路径，如果自需要使用zip包，则返回\"\"\n        return new File(SkinFileUtils.getSkinDir(context), skinName).getAbsolutePath();\n    }\n\n    @Override\n    public Drawable getDrawable(Context context, String skinName, int resId) {\n        // TODO 根据resId来判断是否使用zip包中的资源。\n        return super.getDrawable(context, skinName, resId);\n    }\n\n    @Override\n    public int getType() {\n        return SKIN_LOADER_STRATEGY_ZIP;\n    }\n}\n```\n\n*资源加载策略更灵活，不仅仅只有皮肤包，开发者可配置任意资源获取方式(Zip/Apk/Json...)。*\n\n在Application中，添加自定义加载策略:\n\n```java\nSkinCompatManager.withoutActivity(this)\n        .addStrategy(new ZipSDCardLoader());          // 自定义加载策略，加载zip包中的资源\n```\n\n### 动态设置资源\n\n#### [动态设置颜色](demo/skin-app/src/main/java/com/ximsfei/skindemo/picker/ColorPickerActivity.java)\n\n```java\nSkinCompatUserThemeManager.get().addColorState(R.color.colorPrimary, #ffffffff);\n\nSkinCompatUserThemeManager.get().addColorState(R.color.colorPrimary, new ColorState.ColorBuilder().addXxx().build());\n\n// 清除所有已有颜色值。\nSkinCompatUserThemeManager.get().clearColors();\n```\n\n#### [动态设置图片](demo/skin-app/src/main/java/com/ximsfei/skindemo/picker/DrawablePickerActivity.java)\n\n```java\nSkinCompatUserThemeManager.get().addDrawablePath(R.drawable.windowBackground, \"／sdcard/DCIM/Camera/xxx.jpg\");\n\n// 要换肤的资源id，图片路径，图片旋转角度(默认为0)\nSkinCompatUserThemeManager.get().addDrawablePath(R.drawable.windowBackground, \"／sdcard/DCIM/Camera/xxx.jpg\", 90);\n\n// 清除所有已有图片路径。\nSkinCompatUserThemeManager.get().clearDrawables();\n```\n\n在设置完颜色及图片后，需要调用`apply()`方法来保存设置。\n\n```java\nSkinCompatUserThemeManager.get().apply();\n```\n\n*资源加载优先级: 用户自定义颜色值-加载策略中的资源-皮肤包资源-应用资源。*\n\n### 获取当前使用皮肤\n\n```\nhttps://github.com/ximsfei/Android-skin-support/blob/master/androidx/skin-support/src/main/java/skin/support/utils/SkinPreference.java\n```\n\n## 缺点\n\n* 同一个LayoutInflater只能设置一次Factory，容易和同类库产生冲突\n\n## 谁在使用\n\n如果你想提交作品，欢迎提出 [PR](https://github.com/ximsfei/Android-skin-support/tree/master/docs/who-use-it) 或联系[作者](#技术交流)。\n\n<table align=\"center\">\n    <tr align=\"center\">\n        <td><img width=\"96\" height=\"96\" src=\"https://github.com/ximsfei/Android-skin-support/blob/master/docs/who-use-it/sohunews_explore-icon.png\"/></td>\n        <td><img width=\"96\" height=\"96\" src=\"https://github.com/ximsfei/Android-skin-support/blob/master/docs/who-use-it/vflynote-icon.png\"/></td>\n        <td><img width=\"96\" height=\"96\" src=\"https://github.com/ximsfei/Android-skin-support/blob/master/docs/who-use-it/qoo-app.png\"/></td>\n        <td><img width=\"96\" height=\"96\" src=\"https://github.com/ximsfei/Android-skin-support/blob/master/docs/who-use-it/dwnews.png\"/></td>\n    </tr>\n    <tr align=\"center\">\n        <td><b><a href=\"https://k.sohu.com/\">搜狐新闻探索版</a></b></td>\n        <td><b><a href=\"http://www.iyuji.cn/iyuji/home\">讯飞语记</a></b></td>\n        <td><b><a href=\"https://news.qoo-app.com/\">qoo app</a></b></td>\n        <td><b><a href=\"http://www.dwnews.com/\">多维新闻</a></b></td>\n    </tr>\n</table>\n\n## 技术交流\n\n![](https://github.com/ximsfei/Res/blob/master/Android%26%2332%3B%E6%8D%A2%E8%82%A4.png)\n\n## [License MIT](LICENSE)\n"
        },
        {
          "name": "android-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "androidx",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.166015625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.0'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    compileSdkVersion = 28\n    minSdkVersion = 14\n    targetSdkVersion = 28\n\n    supportLibraryVersion = \"25.1.1\"\n    supportLibraryVersionInHost = \"28.0.0\"\n\n    glideVersion = \"4.7.1\"\n\n    skinAndroidSupportVersion = \"3.1.4\"\n    skinAndroidSupportSkinGroup = \"skin.support\"\n    skinAndroidXVersion = \"4.0.5\"\n    skinAndroidXSkinGroup = \"skin.support\"\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7646484375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\nandroid.enableJetifier=true\nandroid.useAndroidX=true\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "publishing_maven.gradle",
          "type": "blob",
          "size": 2.40234375,
          "content": "apply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\n\nversion = publishVersion\ngroup = publishGroup\n\ndef siteUrl = 'https://github.com/ximsfei/Android-skin-support'\ndef gitUrl = 'https://github.com/ximsfei/Android-skin-support.git'\n\nProperties properties = new Properties()\nproperties.load(project.rootProject.file('local.properties').newDataInputStream())\n\nbintray {\n    user = properties.getProperty(\"bintray.user\")\n    key = properties.getProperty(\"bintray.apikey\")\n\n    configurations = ['archives'] //When uploading configuration files\n    pkg {\n        repo = \"skin-support\"\n        name = moduleName\n        desc = descContent\n        websiteUrl = siteUrl\n        issueTrackerUrl = 'https://github.com/ximsfei/Android-skin-support/issues'\n        vcsUrl = gitUrl\n        licenses = ['MIT']\n        labels = ['skin', 'support', 'theme', 'android']\n        publicDownloadNumbers = true\n    }\n}\n\ninstall {\n    repositories.mavenInstaller {\n        pom {\n            project {\n                packaging 'aar'\n                name moduleName\n                url siteUrl\n                licenses {\n                    license {\n                        name 'MIT'\n                        url 'https://github.com/ximsfei/Android-skin-support/blob/master/LICENSE'\n                    }\n                }\n                developers {\n                    developer {\n                        id 'ximsfei'\n                        name 'Pengfeng Wang'\n                        email 'ximsfei@gmail.com'\n                    }\n                }\n                scm {\n                    connection 'https://github.com/ximsfei/Android-skin-support.git'\n                    developerConnection 'https://github.com/ximsfei/Android-skin-support.git'\n                    url siteUrl\n\n                }\n            }\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n}\n\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n\ntask javadoc(type: Javadoc) {\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\nartifacts {\n    archives javadocJar\n    archives sourcesJar\n}\n\ntask findConventions {\n    doLast {\n        println project.getConvention()\n    }\n}"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.693359375,
          "content": "include ':demo:skin-night'\n\n// DEMO for android support\n//include ':demo:skin-app'\n\n// DEMO for androidx\ninclude ':demo:skin-androidx-app'\n\n// for android support\n//include ':android-support:skin-support'\n//include ':android-support:skin-support-design'\n//include ':android-support:skin-support-cardview'\n//include ':android-support:skin-support-constraint-layout'\n\n// for androidx\ninclude ':androidx:skin-support'\ninclude ':androidx:skin-support-appcompat'\ninclude ':androidx:skin-support-design'\ninclude ':androidx:skin-support-cardview'\ninclude ':androidx:skin-support-constraint-layout'\ninclude ':third-part-support:circleimageview'\ninclude ':third-part-support:flycotablayout'\ninclude ':demo:skin-mobile'\n"
        },
        {
          "name": "third-part-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "uploadAndroidSupportSkinSupport.sh",
          "type": "blob",
          "size": 0.2890625,
          "content": "#!/usr/bin/env bash\n./gradlew \\\nandroid-support:skin-support:bintrayUpload --stacktrace \\\nandroid-support:skin-support-design:bintrayUpload --stacktrace \\\nandroid-support:skin-support-cardview:bintrayUpload --stacktrace \\\nandroid-support:skin-support-constraint-layout:bintrayUpload --stacktrace\n"
        },
        {
          "name": "uploadAndroidXSkinSupport.sh",
          "type": "blob",
          "size": 0.3212890625,
          "content": "#!/usr/bin/env bash\n./gradlew \\\nandroidx:skin-support:bintrayUpload --stacktrace \\\nandroidx:skin-support-appcompat:bintrayUpload --stacktrace \\\nandroidx:skin-support-design:bintrayUpload --stacktrace \\\nandroidx:skin-support-cardview:bintrayUpload --stacktrace \\\nandroidx:skin-support-constraint-layout:bintrayUpload --stacktrace\n"
        }
      ]
    }
  ]
}