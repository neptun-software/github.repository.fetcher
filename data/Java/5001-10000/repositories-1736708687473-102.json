{
  "metadata": {
    "timestamp": 1736708687473,
    "page": 102,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "real-logic/aeron",
      "stars": 7498,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0498046875,
          "content": "* text=auto\n*.bat text eol=crlf\n*.cmd text eol=crlf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0703125,
          "content": "target\nGTAGS\nGRTAGS\nGPATH\nprop\nout/\nclasses/\nbin/\n\n# OS X\n.DS_Store\n\n# eclipse\n.project\n.classpath\n.settings\n\n# intellij\n*.iml\n*.ipr\n*.iws\n.idea/\n.run/\n\n# editors\n*.sublime-project\n*.sublime-workspace\n*~\n\n# the build\nbuild-local.properties\n.gradle/\nbuild*\n!buildSrc/\ncmake-build-debug/\ncmake-build-release/\ncmake-build-debug-*/\ncmake-build-release-*/\n\n# cpp build linux\ncppbuild/CMakeCache.txt\ncppbuild/CMakeFiles/\ncppbuild/CTestTestfile.cmake\ncppbuild/Makefile\ncppbuild/Testing/\ncppbuild/aeron-common/\ncppbuild/aeron-samples/\ncppbuild/binaries/\ncppbuild/cmake_install.cmake\ncppbuild/cmake/\ncppbuild/cmake*/\n\n# cpp build windows\ncppbuild/*.opensdf\ncppbuild/*.sdf\ncppbuild/*.sln\ncppbuild/*.suo\ncppbuild/*.vcxproj\ncppbuild/*.filters\ncppbuild/*.lastbuildstate\ncppbuild/*.tlog\ncppbuild/*.log\ncppbuild/*.cache\ncppbuild/Debug\ncppbuild/Release\ncppbuild/RelWithDebInfo\ncppbuild/Win32\n\n# JVM crash reports\nhs_err_pid*\n*.hprof\n\n# Archive and Cluster data from system tests\n/aeron-cluster/aeron-archive/\n/aeron-cluster/aeron-cluster/\n\naeron-samples/scripts/cluster/logs/\naeron-samples/scripts/cluster/node*/"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.353515625,
          "content": "#\n# Copyright 2014-2025 Real Logic Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\ncmake_minimum_required(VERSION 3.26 FATAL_ERROR)\ncmake_policy(VERSION 3.26)\nif(COMMAND cmake_policy)\n    cmake_policy(SET CMP0003 NEW)\nendif(COMMAND cmake_policy)\nif(POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW)\nendif()\n\nif (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n    message(FATAL_ERROR \"In-source builds not allowed. Please make a new directory (called a build directory)\"\n        \"and run CMake from there. You may need to remove CMakeCache.txt.\")\nendif ()\n\nstring(TIMESTAMP DSTAMP \"%Y%m%d\")\n\ninclude(FetchContent)\n\nfile(STRINGS version.txt AERON_VERSION_TXT LIMIT_COUNT 1 REGEX \"^[0-9]+(\\\\.[0-9]+)+\")\nstring(REGEX REPLACE \"^([0-9]+(\\\\.[0-9]+)+).*$\" \"\\\\1\" AERON_VERSION_FROM_FILE \"${AERON_VERSION_TXT}\")\n\nif (${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})\n    message(FATAL_ERROR \"In-source builds not allowed. Please make a new directory (called a build directory)\"\n        \"and run CMake from there. You may need to remove CMakeCache.txt.\")\nendif ()\n\nif (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n    set(STANDALONE_BUILD TRUE)\nendif ()\n\noption(BUILD_AERON_DRIVER \"Build Aeron driver\" ON)\noption(BUILD_AERON_ARCHIVE_API \"Build Aeron Archive API\" ON)\n\noption(C_WARNINGS_AS_ERRORS \"Enable warnings as errors for C\" OFF)\noption(CXX_WARNINGS_AS_ERRORS \"Enable warnings as errors for C++\" OFF)\noption(SANITISE_BUILD \"Enable sanitise options\" OFF)\noption(COVERAGE_BUILD \"Enable code coverage\" OFF)\noption(AERON_HIDE_DEPRECATION_MESSAGE \"Hide C++ deprecation message\" OFF)\noption(AERON_TESTS \"Enable tests\" ${STANDALONE_BUILD})\noption(AERON_UNIT_TESTS \"Enable unit tests\" ${STANDALONE_BUILD})\noption(AERON_SYSTEM_TESTS \"Enable system tests\" ${STANDALONE_BUILD})\noption(AERON_SLOW_SYSTEM_TESTS \"Enable slow system tests\" OFF)\noption(AERON_BUILD_SAMPLES \"Enable building the sample projects\" ${STANDALONE_BUILD})\noption(LINK_SAMPLES_CLIENT_SHARED \"Enable shared linking for sample projects\" OFF)\noption(AERON_BUILD_DOCUMENTATION \"Build Aeron documentation\" ${STANDALONE_BUILD})\noption(AERON_INSTALL_TARGETS \"Enable installation step\" ${STANDALONE_BUILD})\n\nunset(STANDALONE_BUILD)\n\n# CMAKE_OSX_ARCHITECTURES can be set to arm64 or x86_64 (or both) to make a specific architecture version. Requires\n# CMake 3.21. Must be set before project(), etc.\n#set(CMAKE_OSX_ARCHITECTURES x86_64)\n\nproject(\"aeron\" VERSION \"${AERON_VERSION_FROM_FILE}\")\n\nif (AERON_TESTS)\n    enable_testing()\n    include(CTest)\nendif ()\n\n# default built type is Release\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nendif (NOT CMAKE_BUILD_TYPE)\n\n##########################################################\n# Platform flags, etc.\n\nfind_package(Threads)\n\n##########################################################\n# Doxygen for generating doc\n\nif (AERON_BUILD_DOCUMENTATION)\n    find_package(Doxygen)\nendif ()\n\nif (NOT DEFINED CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 11)\nendif ()\n\nif (NOT DEFINED CMAKE_CXX_EXTENSIONS)\n    set(CMAKE_CXX_EXTENSIONS OFF)\nendif ()\n\nif (NOT DEFINED CMAKE_C_STANDARD)\n    set(CMAKE_C_STANDARD 11)\nendif ()\n\nif (NOT DEFINED CMAKE_C_EXTENSIONS)\n    set(CMAKE_C_EXTENSIONS OFF)\nendif ()\n\nexecute_process(\n    COMMAND git log -1 --format=%h --abbrev=10\n    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}\n    OUTPUT_VARIABLE AERON_VERSION_GITSHA\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nexecute_process(\n    COMMAND git diff-index --quiet HEAD --\n    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}\n    RESULT_VARIABLE AERON_GIT_DIFF_INDEX_RESULT\n)\n\nif (NOT AERON_GIT_DIFF_INDEX_RESULT EQUAL 0)\n    set(AERON_VERSION_GITSHA \"${AERON_VERSION_GITSHA}+guilty\")\nendif ()\n\nadd_definitions(-DAERON_VERSION_TXT=\"${AERON_VERSION_TXT}\")\nadd_definitions(-DAERON_VERSION_MAJOR=${aeron_VERSION_MAJOR})\nadd_definitions(-DAERON_VERSION_MINOR=${aeron_VERSION_MINOR})\nadd_definitions(-DAERON_VERSION_PATCH=${aeron_VERSION_PATCH})\nadd_definitions(-DAERON_VERSION_GITSHA=\"${AERON_VERSION_GITSHA}\")\n\nif (AERON_HIDE_DEPRECATION_MESSAGE)\n    add_compile_definitions(\"AERON_HIDE_DEPRECATION_MESSAGE\")\nendif (AERON_HIDE_DEPRECATION_MESSAGE)\n\n# all UNIX-based platform compiler flags\nif (UNIX)\n    add_compile_options(-fstrict-aliasing -Wall -Wpedantic -Wextra -Wno-unused-parameter -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer)\n\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"11.0\")\n        add_compile_options(-Wno-error=maybe-uninitialized)\n    endif ()\n\n    if (C_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:C>:-Werror>)\n    endif (C_WARNINGS_AS_ERRORS)\n\n    if (CXX_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Werror>)\n    endif (CXX_WARNINGS_AS_ERRORS)\n\n    if (SANITISE_BUILD)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=leak -fsanitize=undefined -DAERON_SANITIZE_ENABLED\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=leak -fsanitize=undefined -DAERON_SANITIZE_ENABLED\")\n    endif (SANITISE_BUILD)\n\n    if (COVERAGE_BUILD)\n        add_compile_options(-fno-inline --coverage)\n        SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --coverage\")\n    endif (COVERAGE_BUILD)\nendif ()\n\n# platform specific flags\nif (APPLE)\n    add_compile_options(-Wsign-compare)\n    add_definitions(-DDarwin)\n    add_compile_options(-Wno-deprecated-register)\nelseif (CYGWIN)\n    add_definitions(-DWIN32)\n    if (AERON_TESTS)\n        add_definitions(-DGTEST_HAS_PTHREAD)\n    endif ()\n    set(CMAKE_CXX_EXTENSIONS ON)\nelseif (MSVC)\n    add_definitions(-DWIN32)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions(-DNOMINMAX)\n\n    if (${MSVC_VERSION} GREATER_EQUAL 1915)\n        # Acknowledge that we understand MSVC resolved a byte alignment issue in this compiler\n        add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)\n    endif ()\n\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd /Od /Zi /MP /wd4251 /Oy-\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /MP /wd4251 /Oy-\")\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd /Oy-\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT /Oy-\")\n\n    unset(CMAKE_C_STANDARD) # To avoid `/std:c11` in the compiler options\n\n    if (C_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:C>:/WX>)\n    endif (C_WARNINGS_AS_ERRORS)\n\n    if (CXX_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/WX>)\n    endif (CXX_WARNINGS_AS_ERRORS)\n\n    if (SANITISE_BUILD)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /fsanitize=address /Zi /D AERON_SANITIZE_ENABLED\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /fsanitize=address /Zi /D AERON_SANITIZE_ENABLED\")\n    endif (SANITISE_BUILD)\n\nendif ()\n\nif (DEFINED AERON_COMPILER_OPTIMIZATION_LEVEL)\n    if (MSVC)\n        add_compile_options(/O${AERON_COMPILER_OPTIMIZATION_LEVEL})\n    else ()\n        add_compile_options(-O${AERON_COMPILER_OPTIMIZATION_LEVEL})\n    endif ()\nendif()\n\n##########################################################\n# Project variables, etc.\n\nif (NOT DEFINED GRADLE_WRAPPER)\n    if (MSVC)\n        set(GRADLE_WRAPPER \"gradlew.bat\" CACHE INTERNAL \"Location of the Gradle wrapper script\")\n    else ()\n        set(GRADLE_WRAPPER \"./gradlew\" CACHE INTERNAL \"Location of the Gradle wrapper script\")\n    endif ()\nendif ()\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/binaries\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\n\nif (AERON_BUILD_SAMPLES)\n    set(AERON_SAMPLES_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-samples/src/main/cpp\")\n    set(AERON_C_SAMPLES_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-samples/src/main/c\")\nendif ()\n\n# client source\nset(AERON_CLIENT_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/main/cpp\")\nset(AERON_CLIENT_WRAPPER_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/main/cpp_wrapper\")\nset(AERON_C_CLIENT_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/main/c\")\n\n# driver source\nset(AERON_DRIVER_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-driver/src/main/c\")\n\n# archive source\nset(AERON_ARCHIVE_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/cpp\")\nset(AERON_ARCHIVE_WRAPPER_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/cpp_wrapper\")\nset(AERON_C_ARCHIVE_SOURCE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/c\")\n\nif (AERON_TESTS)\n    # client tests\n    set(AERON_CLIENT_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/test/cpp\")\n    set(AERON_CLIENT_WRAPPER_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/test/cpp_wrapper\")\n    set(AERON_C_CLIENT_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-client/src/test/c\")\n\n    # driver tests\n    set(AERON_DRIVER_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-driver/src/test/c\")\n\n    # archive tests\n    set(AERON_ARCHIVE_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/test/cpp\")\n    set(AERON_ARCHIVE_WRAPPER_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/test/cpp_wrapper\")\n    set(AERON_C_ARCHIVE_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/test/c\")\n\n    set(AERON_SYSTEM_TEST_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-system-tests\")\nendif ()\n\nif (AERON_BUILD_SAMPLES)\n    # hdr_histogram\n    include_directories(${HDRHISTOGRAM_SOURCE_DIR}/include)\nendif ()\n\n##########################################################\n\nadd_definitions(-D_FILE_OFFSET_BITS=64)\n\n##########################################################\n# gmock usage\n\nif (AERON_TESTS)\n    set(INSTALL_GMOCK OFF CACHE INTERNAL \"Install Googletest's GMock?\")\n    set(INSTALL_GTEST OFF CACHE INTERNAL \"Install Googletest's GTest?\" )\n\n    FetchContent_Declare(\n        gmock\n        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/googletest-1.14.0.zip\n        URL_MD5 b4911e882c51cba34bebfb5df500a650)\n\n    FetchContent_MakeAvailable(gmock)\nendif ()\n\n##########################################################\n# HdrHistogram usage - use MD5 as means to identify snapshot\n\nif (AERON_BUILD_SAMPLES)\n    set(HDR_LOG_REQUIRED \"OFF\" CACHE INTERNAL \"Set log required option\")\n    set(HDR_HISTOGRAM_BUILD_PROGRAMS \"OFF\" CACHE INTERNAL \"Set build programs option\")\n    FetchContent_Declare(\n        hdr_histogram\n        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/HdrHistogram_c-0.11.8.zip\n        URL_MD5 e993a4a08ad084ea0a895e7b2502de99)\n\n    FetchContent_GetProperties(hdr_histogram)\n    if(NOT hdr_histogram_POPULATED)\n        FetchContent_Populate(hdr_histogram)\n        add_subdirectory(${hdr_histogram_SOURCE_DIR} ${hdr_histogram_BINARY_DIR} EXCLUDE_FROM_ALL)\n    endif()\n#    FetchContent_MakeAvailable(hdr_histogram)\nendif ()\n\nadd_subdirectory(${AERON_CLIENT_SOURCE_PATH})\nadd_subdirectory(${AERON_CLIENT_WRAPPER_SOURCE_PATH})\nadd_subdirectory(${AERON_C_CLIENT_SOURCE_PATH})\n\nif (AERON_TESTS)\n    add_subdirectory(${AERON_CLIENT_TEST_PATH})\n    add_subdirectory(${AERON_CLIENT_WRAPPER_TEST_PATH})\n    add_subdirectory(${AERON_C_CLIENT_TEST_PATH})\nendif ()\nif (AERON_BUILD_SAMPLES)\n    add_subdirectory(${AERON_SAMPLES_PATH})\n    add_subdirectory(${AERON_C_SAMPLES_PATH})\nendif ()\n\nif (BUILD_AERON_DRIVER)\n    add_subdirectory(${AERON_DRIVER_SOURCE_PATH})\n    if (AERON_TESTS)\n        add_subdirectory(${AERON_DRIVER_TEST_PATH})\n        add_subdirectory(${AERON_SYSTEM_TEST_PATH})\n    endif ()\nendif (BUILD_AERON_DRIVER)\n\nif (BUILD_AERON_ARCHIVE_API)\n    set(ARCHIVE_CODEC_TARGET_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\n    set(ARCHIVE_C_CODEC_TARGET_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated/c\")\n    set(ARCHIVE_CODEC_SCHEMA_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-archive/src/main/resources/archive\")\n    set(ARCHIVE_CODEC_WORKING_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n    add_subdirectory(${AERON_ARCHIVE_SOURCE_PATH})\n    add_subdirectory(${AERON_ARCHIVE_WRAPPER_SOURCE_PATH})\n    add_subdirectory(${AERON_C_ARCHIVE_SOURCE_PATH})\n    set(AERON_ALL_JAR \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-all/build/libs/aeron-all-${AERON_VERSION_TXT}.jar\")\n    set(AERON_AGENT_JAR \"${CMAKE_CURRENT_SOURCE_DIR}/aeron-agent/build/libs/aeron-agent-${AERON_VERSION_TXT}.jar\")\n\n    file(GLOB_RECURSE AERON_ALL_SOURCES\n        \"${CMAKE_CURRENT_SOURCE_DIR}}/aeron-archive/src/main/java/*.java\")\n\n    add_custom_command(OUTPUT ${AERON_ALL_JAR}\n        COMMAND ${CMAKE_COMMAND} -E env JAVA_HOME=$ENV{JAVA_HOME} BUILD_JAVA_HOME=$ENV{BUILD_JAVA_HOME} BUILD_JAVA_VERSION=$ENV{BUILD_JAVA_VERSION} ${GRADLE_WRAPPER} :aeron-all:clean :aeron-all:assemble --no-daemon -x javadoc --console=plain -q\n        DEPENDS ${AERON_ALL_SOURCES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        COMMENT \"Generating aeron-all jar\")\n\n    add_custom_target(aeron-all-jar\n        DEPENDS ${AERON_ALL_JAR})\n\n    if (AERON_TESTS)\n        add_subdirectory(${AERON_ARCHIVE_TEST_PATH})\n        add_subdirectory(${AERON_ARCHIVE_WRAPPER_TEST_PATH})\n        add_subdirectory(${AERON_C_ARCHIVE_TEST_PATH})\n    endif ()\nendif (BUILD_AERON_ARCHIVE_API)\n##########################################################\n# doc target\n\nif (AERON_BUILD_DOCUMENTATION AND DOXYGEN_FOUND)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)\n\n    add_custom_target(\n        doc\n        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        COMMENT \"Generating API documentation with Doxygen\" VERBATIM)\n\n    if (AERON_INSTALL_TARGETS)\n        # install the doc if it has been built\n        install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc DESTINATION share OPTIONAL)\n    endif ()\nendif ()\n\n##########################################################\n# export targets\n\nif (AERON_INSTALL_TARGETS)\n    include(CMakePackageConfigHelpers)\n\n    install(\n        EXPORT aeron-targets\n        FILE aeron-targets.cmake\n        NAMESPACE aeron::\n        DESTINATION lib/cmake/aeron)\n\n    write_basic_package_version_file(\n        \"${CMAKE_CURRENT_BINARY_DIR}/aeron-config-version.cmake\"\n        VERSION \"${AERON_VERSION_FROM_FILE}\"\n        COMPATIBILITY AnyNewerVersion)\n\n    configure_package_config_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/aeron-config.cmake.in\n        \"${CMAKE_CURRENT_BINARY_DIR}/aeron-config.cmake\"\n        INSTALL_DESTINATION lib/cmake/aeron)\n\n    install(FILES\n        \"${CMAKE_CURRENT_BINARY_DIR}/aeron-config.cmake\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/aeron-config-version.cmake\"\n        DESTINATION lib/cmake/aeron)\n\n    export(EXPORT aeron-targets\n        FILE \"${CMAKE_CURRENT_BINARY_DIR}/aeron-targets.cmake\"\n        NAMESPACE aeron::)\nendif ()\n\n##########################################################\n# package target\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${aeron_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${aeron_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${aeron_VERSION_PATCH}\")\n\nset(CPACK_GENERATOR \"TGZ;STGZ\")\ninclude(CPack)\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3974609375,
          "content": "# Contributing to Aeron\n\nIf you would like to contribute code you can do so through GitHub by sending a pull request or raising an issue with an attached patch.\n\nWhen submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.\n\n[![Gitter](https://img.shields.io/gitter/room/gitterHQ/gitter.svg)](https://gitter.im/real-logic/Aeron?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) To chat with other Aeron contributors.\n\n## License\n\nBy contributing your code, you agree to license your contribution under the terms of the APLv2:\n \nhttps://github.com/real-logic/aeron/blob/master/LICENSE\n\nAll files are made available under the Apache 2.0 license.\n\nIf you are adding a new file it should have the following header:\n\n```\n/*\n * Copyright 2014-2025 Real Logic Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n ```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.033203125,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1181640625,
          "content": "Aeron\n=====\n\n[![GitHub](https://img.shields.io/github/license/real-logic/Aeron.svg)](https://github.com/real-logic/aeron/blob/master/LICENSE)\n[![Javadocs](https://www.javadoc.io/badge/io.aeron/aeron-all.svg)](https://www.javadoc.io/doc/io.aeron/aeron-all)\n\n[![Actions Status](https://github.com/real-logic/aeron/workflows/Continuous%20Integration/badge.svg)](https://github.com/real-logic/aeron/actions)\n[![CodeQL Status](https://github.com/real-logic/aeron/workflows/CodeQL/badge.svg)](https://github.com/real-logic/aeron/actions)\n\nEfficient reliable UDP unicast, UDP multicast, and IPC message transport. Java, C, and C++ clients are available in this\nrepository, and a [.NET client](https://github.com/AdaptiveConsulting/Aeron.NET) is available. All\nclients can exchange messages across machines, or on the same machine via IPC, very efficiently. Message streams can be\nrecorded by the [Archive](https://github.com/real-logic/aeron/tree/master/aeron-archive) module to persistent storage\nfor later, or real-time, replay. Aeron [Cluster](https://github.com/real-logic/aeron/tree/master/aeron-cluster)\nprovides support for fault-tolerant services as replicated state machines based on the\n[Raft](https://raft.github.io/) consensus algorithm.\n\nPerformance is the key focus. A design goal for Aeron is to be the highest throughput with the lowest and most\npredictable latency of any messaging system. Aeron integrates with\n[Simple Binary Encoding (SBE)](https://github.com/real-logic/simple-binary-encoding) for the best possible message\nencoding and decoding performance. Many of the data structures used in the creation of Aeron have been factored out to\nthe [Agrona](https://github.com/real-logic/agrona) project.\n\nFor details of usage, protocol specification, FAQ, etc. please check out the\n[Wiki](https://github.com/real-logic/aeron/wiki).\n\nFor the latest version information and changes see the [Change Log](https://github.com/real-logic/aeron/wiki/Change-Log)\nwith Java **downloads** at [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Caeron).\n\nAeron is owned and operated by Adaptive Financial Consulting. Originally created by Martin Thompson and Todd Montgomery, the Aeron team joined Adaptive in 2022.\n\nFor Business users, to get started with Aeron Premium, please visit [Aeron.io](https://aeron.io)\n\nWe provide a range of services including:\n* Training for development and operations with Aeron and Aeron Cluster.\n* Consulting, for example if you’re not sure how to design your system or need help tuning your system.\n* We also offer a number of proprietary enhancements on top of Aeron and Aeron Cluster such as kernel bypass (ef_vi, AWS DPDK, and VMA) for increased performance, and blazing fast encryption with ATS.\n* If you’re building a new trading system, we have experienced Aeron developers who can help.\n\nPlease get in touch at [sales@aeron.io](mailto:sales@aeron.io?subject=Aeron) if you would like to learn more about any of these.\n\n### How do I use Aeron?\n\n1. [Java Programming Guide](https://github.com/real-logic/aeron/wiki/Java-Programming-Guide)\n1. [C++11 Programming Guide](https://github.com/real-logic/aeron/wiki/Cpp-Programming-Guide)\n1. [Best Practices Guide](https://github.com/real-logic/aeron/wiki/Best-Practices-Guide)\n1. [Monitoring and Debugging](https://github.com/real-logic/aeron/wiki/Monitoring-and-Debugging)\n1. [Configuration Options](https://github.com/real-logic/aeron/wiki/Configuration-Options)\n1. [Channel Specific Configuration](https://github.com/real-logic/aeron/wiki/Channel-Configuration)\n1. [Aeron Archive (Durable/Persistent Stream Storage)](https://github.com/real-logic/aeron/wiki/Aeron-Archive)\n1. [Aeron Cluster (Fault Tolerant Services)](https://github.com/real-logic/aeron/tree/master/aeron-cluster)\n1. [Aeron Docs](https://aeron.io/docs/)\n\n### How does Aeron work?\n\n1. [Transport Protocol Specification](https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification)\n1. [Design Overview](https://github.com/real-logic/aeron/wiki/Design-Overview)\n1. [Design Principles](https://github.com/real-logic/aeron/wiki/Design-Principles)\n1. [Flow Control Semantics](https://github.com/real-logic/aeron/wiki/Flow-and-Congestion-Control)\n1. [Media Driver Operation](https://github.com/real-logic/aeron/wiki/Media-Driver-Operation)\n\n### How do I hack on Aeron?\n\n1. [Hacking on Aeron](https://github.com/real-logic/aeron/wiki/Hacking-on-Aeron)\n1. [Performance Testing](https://github.com/real-logic/aeron/wiki/Performance-Testing)\n1. [Building Aeron](https://github.com/real-logic/aeron/wiki/Building-Aeron)\n\nLicense (See LICENSE file for full license)\n-------------------------------------------\nCopyright 2014-2025 Real Logic Limited.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.  \n"
        },
        {
          "name": "aeron-agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-all",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-archive",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-config.cmake.in",
          "type": "blob",
          "size": 0.177734375,
          "content": "@PACKAGE_INIT@\n\ninclude(CMakeFindDependencyMacro)\nfind_package(Threads)\nfind_package(Java)\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/aeron-targets.cmake\")\n\ncheck_required_components(aeron)"
        },
        {
          "name": "aeron-driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-system-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "aeron-test-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 43.076171875,
          "content": "/*\n * Copyright 2014-2025 Real Logic Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nplugins {\n    id 'java-library'\n    alias(libs.plugins.bnd).apply(false)\n    alias(libs.plugins.shadow).apply(false)\n    alias(libs.plugins.versions)\n}\n\ndefaultTasks 'clean', 'build'\n\nstatic def getBuildJavaVersion() {\n    def buildJavaVersion = System.getenv('BUILD_JAVA_VERSION') ?: JavaVersion.current().getMajorVersion()\n\n    if (buildJavaVersion.indexOf('.') > 0) {\n        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('.'))\n    }\n\n    if (buildJavaVersion.indexOf('-') > 0) {\n        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('-'))\n    }\n\n    Integer.parseInt(buildJavaVersion)\n}\nint buildJavaVersion = getBuildJavaVersion()\n\ndef toolchainLauncher = javaToolchains.launcherFor {\n    languageVersion = JavaLanguageVersion.of(buildJavaVersion)\n}\n\ndef aeronGroup = 'io.aeron'\ndef aeronVersion = file('version.txt').text.trim()\ndef gitCommitHash = io.aeron.build.GithubUtil.currentGitHash(\"${projectDir}\")\n\next {\n    isReleaseVersion = !aeronVersion.endsWith('-SNAPSHOT')\n    releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'\n    snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'\n\n    if (!project.hasProperty('ossrhUsername')) {\n        ossrhUsername = ''\n    }\n\n    if (!project.hasProperty('ossrhPassword')) {\n        ossrhPassword = ''\n    }\n\n    if (!project.hasProperty('signingKey')) {\n        signingKey = null\n    }\n\n    if (!project.hasProperty('signingPassword')) {\n        signingPassword = null\n    }\n}\n\ndef projectPom = {\n    name = 'aeron'\n    // optionally artifactId can be defined here\n    description = 'Efficient reliable UDP unicast, UDP multicast, and IPC transport protocol.'\n    url = 'https://github.com/real-logic/aeron'\n\n    scm {\n        connection = 'scm:git:https://github.com/real-logic/aeron.git'\n        developerConnection = 'scm:git:https://github.com/real-logic/aeron.git'\n        url = 'https://github.com/real-logic/aeron.git'\n    }\n\n    licenses {\n        license {\n            name = 'The Apache License, Version 2.0'\n            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'\n        }\n    }\n\n    developers {\n        developer {\n            id = 'tmontgomery'\n            name = 'Todd L. Montgomery'\n            email = 'tmont@nard.net'\n            url = 'https://github.com/tmontgomery'\n        }\n        developer {\n            id = 'mjpt777'\n            name = 'Martin Thompson'\n            email = 'mjpt777@gmail.com'\n            url = 'https://github.com/mjpt777'\n        }\n        developer {\n            id = 'RichardWarburton'\n            name = 'Richard Warburton'\n            email = 'richard.warburton@gmail.com'\n            url = 'https://github.com/RichardWarburton'\n        }\n        developer {\n            id = 'nitsanw'\n            name = 'Nitsan Wakart'\n            email = 'nitsanw@yahoo.com'\n            url = 'https://github.com/nitsanw'\n        }\n        developer {\n            id = 'mikeb01'\n            name = 'Mike Barker'\n            email = 'mikeb01@gmail.com'\n            url = 'https://github.com/mikeb01'\n        }\n        developer {\n            id = 'vyazelenko'\n            name = 'Dmytro Vyazelenko'\n            email = 'vyazelenko@protonmail.com '\n            url = 'https://github.com/vyazelenko'\n        }\n    }\n}\n\njar.enabled = false\n\nallprojects {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n    }\n\n    configurations.configureEach {\n        resolutionStrategy {\n            failOnVersionConflict()\n\n            force libs.agrona,\n                  libs.byteBuddy,\n                  libs.byteBuddy.agent,\n                  // patching conflicting Checkstyle dependencies\n                  \"org.codehaus.plexus:plexus-utils:3.3.0\",\n                  \"org.apache.commons:commons-lang3:3.8.1\",\n                  \"org.apache.httpcomponents:httpcore:4.4.14\",\n                  \"commons-codec:commons-codec:1.15\"\n        }\n    }\n\n    tasks.withType(JavaExec).configureEach {\n        javaLauncher.set(toolchainLauncher)\n    }\n}\n\nsubprojects {\n    apply plugin: 'base'\n    apply plugin: 'java-library'\n    apply plugin: 'checkstyle'\n\n    dependencies {\n        testImplementation libs.hamcrest\n        testImplementation libs.mockito\n        testImplementation platform(\"org.junit:junit-bom:${libs.versions.junit.get()}\")\n        testImplementation \"org.junit.jupiter:junit-jupiter-params\"\n        testRuntimeOnly \"org.junit.jupiter:junit-jupiter-engine\"\n        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n    }\n\n    java {\n        toolchain {\n            languageVersion = JavaLanguageVersion.of(buildJavaVersion)\n        }\n        sourceCompatibility = JavaVersion.VERSION_17\n    }\n\n    group = aeronGroup\n    version = aeronVersion\n\n    checkstyle.toolVersion = libs.versions.checkstyle.get()\n\n    tasks.withType(Sign).configureEach {\n        onlyIf {\n            isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)\n        }\n    }\n\n    tasks.withType(Jar).configureEach {\n        enabled = true\n        includeEmptyDirs = false\n    }\n\n    tasks.withType(JavaCompile).configureEach {\n        options.encoding = 'UTF-8'\n        options.deprecation = true\n        options.compilerArgs.add('--release')\n        options.compilerArgs.add(java.sourceCompatibility.majorVersion)\n        options.compilerArgs.addAll(['-Xlint:all,-processing', '-Werror']) // Enable all warnings and treat them as errors\n        options.compilerArgs.add(\"-Aio.aeron.version=${aeronVersion}\")\n        options.compilerArgs.add(\"-Aio.aeron.gitsha=${gitCommitHash}\")\n    }\n\n    tasks.withType(Test).configureEach { test ->\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        jvmArgs('--add-opens', 'java.base/java.util.zip=ALL-UNNAMED')\n        if (buildJavaVersion >= 21) {\n            jvmArgs('-XX:+EnableDynamicAgentLoading')\n        }\n        testClassesDirs = testing.suites.test.sources.output.classesDirs\n        classpath = testing.suites.test.sources.runtimeClasspath\n        maxHeapSize(\"1g\")\n        jvmArgs(\"-XX:MaxDirectMemorySize=1g\",\n                \"-XX:+HeapDumpOnOutOfMemoryError\",\n                \"-XX:+CrashOnOutOfMemoryError\",\n                \"-XX:HeapDumpPath=\" + project.rootDir + \"/heap.hprof\")\n\n        useJUnitPlatform {\n            if (test.name != 'slowTest' && test.name != 'bindingsTest' && test.name != 'topologyTest')\n            {\n                excludeTags 'any()'\n            }\n        }\n\n        testLogging {\n            for (def level : LogLevel.values())\n            {\n                def testLogging = get(level)\n                testLogging.exceptionFormat = 'full'\n                testLogging.events = [\"FAILED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"]\n            }\n        }\n\n        systemProperties(\n            'java.util.logging.config.class': 'io.aeron.test.DisableJavaUtilLogging',\n            'aeron.shared.idle.strategy': 'yield',\n            'aeron.conductor.idle.strategy': 'yield',\n            'aeron.sender.idle.strategy': 'yield',\n            'aeron.receiver.idle.strategy': 'yield',\n            'aeron.use.windows.high.res.timer': 'true',\n            'aeron.timer.interval': '100ms',\n            'aeron.dir.delete.on.start': 'true',\n            'aeron.term.buffer.sparse.file': 'true',\n            'aeron.perform.storage.checks': 'false',\n            'agrona.strict.alignment.checks': 'true',\n            'net.bytebuddy.experimental': 'true',\n            'io.aeron.shadow.net.bytebuddy.experimental': 'true',\n            'java.net.preferIPv4Stack': 'true',\n            'aeron.test.system.aeronmd.path': System.getProperty('aeron.test.system.aeronmd.path'),\n            'aeron.test.system.binding.remote.host': System.getProperty('aeron.test.system.binding.remote.host'),\n            'aeron.test.system.binding.local.host': System.getProperty('aeron.test.system.binding.local.host'),\n            'aeron.test.system.aeron.dir': System.getProperty('aeron.test.system.aeron.dir'),\n            'aeron.test.system.ats.path': System.getProperty('aeron.test.system.ats.path'),\n            'aeron.test.system.ats.conf.dir': System.getProperty('aeron.test.system.ats.conf.dir'),\n            'aeron.test.system.ats.conf.file': System.getProperty('aeron.test.system.ats.conf.file'),\n            'aeron.test.system.driver.await.counters': System.getProperty('aeron.test.system.driver.await.counters'))\n\n        javaLauncher.set(toolchainLauncher)\n    }\n\n    tasks.register('slowTest', Test) {\n        group 'verification'\n        dependsOn ':aeron-agent:jar'\n\n        maxParallelForks = 1\n        useJUnitPlatform {\n            includeTags 'slow'\n        }\n\n        ext.agentFilename = {\n            project.file(\"../aeron-agent/build/libs/aeron-agent-${aeronVersion}.jar\").absolutePath\n        }\n\n        jvmArgs '-javaagent:' + agentFilename()\n        systemProperty 'aeron.event.cluster.log', 'all'\n        systemProperty 'aeron.event.cluster.log.disable', 'CANVASS_POSITION,APPEND_POSITION,COMMIT_POSITION'\n        systemProperty 'aeron.event.archive.log', 'all'\n        systemProperty 'aeron.event.log', 'admin'\n        systemProperty 'aeron.debug.timeout', '3600s'\n        systemProperty 'aeron.event.log.reader.classname', 'io.aeron.agent.CollectingEventLogReaderAgent'\n        systemProperty 'aeron.fallback.logger', 'no_op'\n    }\n\n    tasks.register('bindingsTest', Test) {\n        group 'verification'\n        dependsOn ':aeron-agent:jar'\n\n        maxParallelForks = 1\n        useJUnitPlatform {\n            includeTags 'bindings'\n        }\n\n        ext.agentFilename = {\n            project.file(\"../aeron-agent/build/libs/aeron-agent-${aeronVersion}.jar\").absolutePath\n        }\n\n        jvmArgs '-javaagent:' + agentFilename()\n        systemProperty 'aeron.event.cluster.log', 'all'\n        systemProperty 'aeron.event.cluster.log.disable', 'CANVASS_POSITION'\n        systemProperty 'aeron.debug.timeout', '3600s'\n        systemProperty 'aeron.event.log.reader.classname', 'io.aeron.agent.CollectingEventLogReaderAgent'\n    }\n\n    tasks.register('topologyTest', Test) {\n        group 'verification'\n        maxParallelForks = 1\n        useJUnitPlatform {\n            includeTags 'topology'\n        }\n    }\n\n    javadoc {\n        failOnError false\n        title = '<h1>Aeron Message Transport</h1>'\n        options.bottom = '<i>Copyright &#169; 2014-2025 Real Logic Limited. All Rights Reserved.</i>'\n        options.encoding = 'UTF-8'\n        options.docEncoding = 'UTF-8'\n        options.charSet = 'UTF-8'\n        options.links(\"https://www.javadoc.io/doc/org.agrona/agrona/${libs.versions.agrona.get()}/\")\n\n        if (buildJavaVersion >= 23) { // early access JavaDoc location is different\n            options.links(\"https://download.java.net/java/early_access/jdk${buildJavaVersion}/docs/api/\")\n        }\n        else {\n            options.links(\"https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/\")\n        }\n\n        exclude 'io/aeron/archive/codecs/**'\n        exclude 'io/aeron/cluster/codecs/**'\n        exclude 'io/aeron/samples/**'\n        exclude 'io/aeron/test/**'\n\n        options.addStringOption('-release', java.sourceCompatibility.majorVersion)\n        options.addBooleanOption('Werror', true)\n        options.addBooleanOption('Xdoclint:all', true)\n    }\n\n    tasks.register('testJar', Jar) {\n        dependsOn 'testClasses'\n        archiveClassifier.set(\"test-${base.archivesName}\")\n        from sourceSets.test.output\n    }\n\n    configurations {\n        tests\n    }\n\n    artifacts {\n        tests testJar\n    }\n}\n\nproject(':aeron-annotations') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    jar {\n        bundle {\n            bnd \"\"\"\n                Automatic-Module-Name:  io.aeron.annotations\n                Bundle-Name:            io.aeron.annotations\n                Bundle-SymbolicName:    io.aeron.annotations\n                Implementation-Title:   Aeron\n                Implementation-Vendor:  Real Logic Limited\n                Implementation-Version: ${aeronVersion}\n    \n                -exportcontents: io.aeron.version\n    \n                # Suppress headers that reduce reproducibility.\n                -reproducible: true\n                -noextraheaders: true\n            \"\"\"\n        }\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            aeronAnnotations(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronAnnotations\n    }\n}\n\nproject(':aeron-client') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    dependencies {\n        api libs.agrona\n        implementation project(':aeron-annotations')\n        annotationProcessor project(':aeron-annotations')\n        testImplementation project(':aeron-test-support')\n    }\n\n    jar {\n        bundle {\n            bnd \"\"\"\n                Automatic-Module-Name:  io.aeron.client\n                Bundle-Name:            io.aeron.client\n                Bundle-SymbolicName:    io.aeron.client\n                Implementation-Title:   Aeron\n                Implementation-Vendor:  Real Logic Limited\n                Implementation-Version: ${aeronVersion}\n    \n                -exportcontents: io.aeron, io.aeron.*\n    \n                # Suppress headers that reduce reproducibility.\n                -reproducible: true\n                -noextraheaders: true\n            \"\"\"\n        }\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    javadoc {\n        source += project(':aeron-annotations').sourceSets.main.allJava\n    }\n\n    publishing {\n        publications {\n            aeronClient(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronClient\n    }\n\n    def configInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/config-info.dat\"\n\n    tasks.register('validateConfigExpectations', JavaExec) {\n        def sourceDir = 'src/main/c'\n\n        inputs.files(configInfoFile)\n\n        mainClass.set('io.aeron.config.validation.ValidateConfigExpectationsTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, sourceDir]\n    }\n\n    tasks.register('generateConfigDoc', JavaExec) {\n        def generatedDocFile = \"${layout.buildDirectory.get()}/generated-doc/out.md\"\n\n        inputs.files(configInfoFile)\n        outputs.files(generatedDocFile)\n\n        mainClass.set('io.aeron.config.docgen.GenerateConfigDocTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, generatedDocFile]\n    }\n\n    tasks.register('validateCounterExpectations', JavaExec) {\n        def counterInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/counter-info.dat\"\n        def sourceDir = 'src/main/c'\n\n        inputs.files(counterInfoFile)\n\n        mainClass.set('io.aeron.counter.validation.ValidateCounterExpectationsTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [counterInfoFile, sourceDir]\n    }\n}\n\nproject(':aeron-driver') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'application'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    application {\n        mainClass.set('io.aeron.driver.MediaDriver')\n    }\n\n    dependencies {\n        api project(':aeron-client')\n        implementation project(':aeron-annotations')\n        annotationProcessor project(':aeron-annotations')\n        testImplementation project(':aeron-test-support')\n    }\n\n    jar {\n        bundle {\n            bnd \"\"\"\n                Automatic-Module-Name:  io.aeron.driver\n                Bundle-Name:            io.aeron.driver\n                Bundle-SymbolicName:    io.aeron.driver\n                Implementation-Title:   Aeron\n                Implementation-Vendor:  Real Logic Limited\n                Implementation-Version: ${aeronVersion}\n    \n                -exportcontents: io.aeron.driver, io.aeron.driver.*\n    \n                # Suppress headers that reduce reproducibility.\n                -reproducible: true\n                -noextraheaders: true\n            \"\"\"\n        }\n    }\n\n    jar.finalizedBy assembleDist\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    javadoc {\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += project(':aeron-client').sourceSets.main.allJava\n    }\n\n    publishing {\n        publications {\n            aeronDriver(MavenPublication) {\n                from components.java\n                artifact distZip\n                artifact distTar\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronDriver\n    }\n\n    tasks.register('validateConfigExpectations', JavaExec) {\n        def configInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/config-info.dat\"\n        def sourceDir = 'src/main/c'\n\n        inputs.files(configInfoFile)\n\n        mainClass.set('io.aeron.config.validation.ValidateConfigExpectationsTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, sourceDir]\n    }\n\n    tasks.register('generateConfigDoc', JavaExec) {\n        def configInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/config-info.dat\"\n        def generatedDocFile = \"${layout.buildDirectory.get()}/generated-doc/out.md\"\n\n        inputs.files(configInfoFile)\n        outputs.files(generatedDocFile)\n\n        mainClass.set('io.aeron.config.docgen.GenerateConfigDocTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, generatedDocFile]\n    }\n}\n\nproject(':aeron-archive') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    configurations{\n        codecGeneration\n    }\n\n    dependencies {\n        api project(':aeron-driver')\n        api files('build/classes/java/generated')\n        codecGeneration libs.sbe\n        implementation project(':aeron-annotations')\n        annotationProcessor project(':aeron-annotations')\n        testImplementation project(':aeron-test-support')\n        testImplementation files('build/classes/java/generatedTest')\n    }\n\n    def generatedSrcDir = file(\"${layout.buildDirectory.get()}/generated-src\")\n    def generatedTestDir = file(\"${layout.buildDirectory.get()}/generated-test\")\n\n    sourceSets {\n        generated {\n            java.srcDir generatedSrcDir\n            compileClasspath += configurations.codecGeneration\n        }\n        generatedTest {\n            java.srcDir generatedTestDir\n            compileClasspath += configurations.codecGeneration\n        }\n    }\n\n    tasks.register('generateCodecs', JavaExec) {\n        def codecsFile = 'src/main/resources/archive/aeron-archive-codecs.xml'\n        def markCodecsFile = 'src/main/resources/archive/aeron-archive-mark-codecs.xml'\n        def sbeFile = 'src/main/resources/archive/fpl/sbe.xsd'\n\n        inputs.files(codecsFile, markCodecsFile, sbeFile)\n        outputs.dir generatedSrcDir\n\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = configurations.codecGeneration\n        systemProperties(\n            'sbe.output.dir': generatedSrcDir,\n            'sbe.target.language': 'Java',\n            'sbe.validation.xsd': sbeFile,\n            'sbe.validation.stop.on.error': 'true')\n        args = [codecsFile, markCodecsFile]\n    }\n\n    tasks.register('generateV6Codecs', JavaExec) {\n        def codecsFile = 'src/main/resources/archive/aeron-archive-codecs.xml'\n        def sbeFile = 'src/main/resources/archive/fpl/sbe.xsd'\n\n        inputs.files(codecsFile, sbeFile)\n        outputs.dir generatedTestDir\n\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = configurations.codecGeneration\n        systemProperties(\n            'sbe.output.dir': generatedTestDir,\n            'sbe.target.language': 'Java',\n            'sbe.validation.xsd': sbeFile,\n            'sbe.validation.stop.on.error': 'true',\n            'sbe.target.namespace': 'io.aeron.archive.codecs.v6',\n            'sbe.schema.transform.version': '*:6')\n        args = [codecsFile]\n    }\n\n    def generatedCppDir = file(System.getProperty('codec.target.dir') ?: \"${rootDir}/cppbuild/Release/generated\")\n    tasks.register('generateCppCodecs', JavaExec) {\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        classpath = configurations.codecGeneration\n        systemProperties(\n            'sbe.output.dir': generatedCppDir,\n            'sbe.target.language': 'Cpp',\n            'sbe.target.namespace': 'aeron.archive.client',\n            'sbe.validation.xsd': 'src/main/resources/archive/fpl/sbe.xsd',\n            'sbe.validation.stop.on.error': 'true')\n        args = ['src/main/resources/archive/aeron-archive-codecs.xml']\n    }\n\n    def generatedCDir = file(System.getProperty('codec.target.dir') ?: \"${rootDir}/cppbuild/Release/generated/c\")\n    tasks.register('generateCCodecs', JavaExec) {\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        classpath = configurations.codecGeneration\n        systemProperties(\n            'sbe.output.dir': generatedCDir,\n            'sbe.target.language': 'C',\n            'sbe.target.namespace': 'aeron.archive.client',\n            'sbe.validation.xsd': 'src/main/resources/archive/fpl/sbe.xsd',\n            'sbe.validation.stop.on.error': 'true')\n        args = ['src/main/resources/archive/aeron-archive-codecs.xml']\n    }\n\n    compileJava.dependsOn 'compileGeneratedJava'\n    compileGeneratedJava.dependsOn 'generateCodecs'\n    compileTestJava.dependsOn 'compileGeneratedTestJava'\n    compileGeneratedTestJava.dependsOn 'generateV6Codecs'\n\n    jar {\n        from sourceSets.generated.output\n\n        bundle {\n            bnd \"\"\"\n                Automatic-Module-Name:  io.aeron.archive\n                Bundle-Name:            io.aeron.archive\n                Bundle-SymbolicName:    io.aeron.archive\n                Implementation-Title:   Aeron\n                Implementation-Vendor:  Real Logic Limited\n                Implementation-Version: ${aeronVersion}\n    \n                -exportcontents: io.aeron.archive, io.aeron.archive.*\n    \n                # Suppress headers that reduce reproducibility.\n                -reproducible: true\n                -noextraheaders: true\n            \"\"\"\n        }\n    }\n\n    tasks.register('sourcesJar', Jar) {\n        dependsOn 'generateCodecs'\n        archiveClassifier.set('sources')\n        from sourceSets.main.allSource\n        from sourceSets.generated.allSource\n    }\n\n    javadoc {\n        source += sourceSets.generated.allJava\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += project(':aeron-client').sourceSets.main.allJava\n        source += project(':aeron-driver').sourceSets.main.allJava\n    }\n\n    javadoc.dependsOn generateCodecs\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            aeronArchive(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronArchive\n    }\n\n    tasks.register('generateConfigDoc', JavaExec) {\n        def configInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/config-info.dat\"\n        def generatedDocFile = \"${layout.buildDirectory.get()}/generated-doc/out.md\"\n\n        inputs.files(configInfoFile)\n        outputs.files(generatedDocFile)\n\n        mainClass.set('io.aeron.config.docgen.GenerateConfigDocTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, generatedDocFile]\n    }\n}\n\nproject(':aeron-cluster') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'biz.aQute.bnd.builder'\n\n    configurations{\n        codecGeneration\n    }\n\n    dependencies {\n        api project(':aeron-archive')\n        api files('build/classes/java/generated')\n        codecGeneration libs.sbe\n        implementation project(':aeron-annotations')\n        annotationProcessor project(':aeron-annotations')\n        testImplementation project(':aeron-test-support')\n    }\n\n    def generatedDir = file(\"${layout.buildDirectory.get()}/generated-src\")\n    sourceSets {\n        generated {\n            java.srcDir generatedDir\n            compileClasspath += configurations.codecGeneration\n        }\n    }\n\n    tasks.register('generateCodecs', JavaExec) {\n        def codecsFile = 'src/main/resources/cluster/aeron-cluster-codecs.xml'\n        def markCodecsFile = 'src/main/resources/cluster/aeron-cluster-mark-codecs.xml'\n        def nodeStateCodecsFile = 'src/main/resources/cluster/aeron-cluster-node-state-codecs.xml'\n        def sbeFile = 'src/main/resources/cluster/fpl/sbe.xsd'\n\n        inputs.files(codecsFile, markCodecsFile, sbeFile)\n        outputs.dir generatedDir\n\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = configurations.codecGeneration\n        systemProperties(\n            'sbe.output.dir': generatedDir,\n            'sbe.target.language': 'Java',\n            'sbe.validation.xsd': sbeFile,\n            'sbe.validation.stop.on.error': 'true')\n        args = [codecsFile, markCodecsFile, nodeStateCodecsFile]\n    }\n\n    compileJava.dependsOn compileGeneratedJava\n    compileGeneratedJava.dependsOn generateCodecs\n\n    jar {\n        from sourceSets.generated.output\n\n        bundle {\n            bnd \"\"\"\n                Automatic-Module-Name:  io.aeron.cluster\n                Bundle-Name:            io.aeron.cluster\n                Bundle-SymbolicName:    io.aeron.cluster\n                Implementation-Title:   Aeron\n                Implementation-Vendor:  Real Logic Limited\n                Implementation-Version: ${aeronVersion}\n    \n                -exportcontents: io.aeron.cluster, io.aeron.cluster.*\n    \n                # Suppress headers that reduce reproducibility.\n                -reproducible: true\n                -noextraheaders: true\n            \"\"\"\n        }\n    }\n\n    tasks.register('sourcesJar', Jar) {\n        dependsOn 'generateCodecs'\n        archiveClassifier.set('sources')\n        from sourceSets.main.allSource\n        from sourceSets.generated.allSource\n    }\n\n    javadoc {\n        source += sourceSets.generated.allJava\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += project(':aeron-client').sourceSets.main.allJava\n        source += project(':aeron-driver').sourceSets.main.allJava\n        source += project(':aeron-archive').sourceSets.main.allJava\n        source += project(':aeron-archive').sourceSets.generated.allJava\n    }\n\n    javadoc.dependsOn generateCodecs\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            aeronCluster(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronCluster\n    }\n\n    tasks.register('generateConfigDoc', JavaExec) {\n        def configInfoFile = \"${layout.buildDirectory.get()}/generated/sources/headers/java/main/config-info.dat\"\n        def generatedDocFile = \"${layout.buildDirectory.get()}/generated-doc/out.md\"\n\n        inputs.files(configInfoFile)\n        outputs.files(generatedDocFile)\n\n        mainClass.set('io.aeron.config.docgen.GenerateConfigDocTask')\n        classpath project(':aeron-annotations').sourceSets.main.runtimeClasspath\n        args = [configInfoFile, generatedDocFile]\n    }\n}\n\nproject(':aeron-agent') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'com.gradleup.shadow'\n\n    def aeronClientProject = project(':aeron-client')\n    def aeronDriverProject = project(':aeron-driver')\n    def aeronArchiveProject = project(':aeron-archive')\n    def aeronClusterProject = project(':aeron-cluster')\n\n    dependencies {\n        implementation aeronClusterProject\n        implementation libs.byteBuddy\n        implementation libs.byteBuddy.agent\n        compileOnly libs.findbugs\n        testCompileOnly libs.findbugs\n        testImplementation project(':aeron-test-support')\n    }\n\n    shadowJar {\n        archiveClassifier.set('')\n\n        manifest.attributes(\n            'Implementation-Title': 'Aeron',\n            'Implementation-Version': aeronVersion,\n            'Implementation-Vendor': 'Real Logic Limited',\n            \"Premain-Class\": \"io.aeron.agent.EventLogAgent\",\n            \"Agent-Class\": \"io.aeron.agent.EventLogAgent\",\n            \"Can-Redefine-Classes\": \"true\",\n            \"Can-Retransform-Classes\": \"true\",\n            'Automatic-Module-Name': 'io.aeron.agent'\n        )\n\n        relocate 'net.bytebuddy', 'io.aeron.shadow.net.bytebuddy'\n    }\n\n    jar.finalizedBy shadowJar\n\n    tasks.register('dedupJar', io.aeron.build.DeduplicateTask) {\n        source shadowJar.outputs.files.singleFile\n    }\n\n    shadowJar.finalizedBy dedupJar\n\n    tasks.register('sourcesJar', Jar) {\n        dependsOn ':aeron-archive:generateCodecs', ':aeron-cluster:generateCodecs'\n        archiveClassifier.set('sources')\n        from files(\n            aeronClientProject.sourceSets.main.allSource,\n            aeronDriverProject.sourceSets.main.allSource,\n            aeronArchiveProject.sourceSets.main.allSource,\n            aeronArchiveProject.sourceSets.generated.allSource,\n            aeronClusterProject.sourceSets.main.allSource,\n            aeronClusterProject.sourceSets.generated.allSource)\n    }\n\n    javadoc {\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += aeronClientProject.sourceSets.main.allJava\n        source += aeronDriverProject.sourceSets.main.allJava\n        source += aeronArchiveProject.sourceSets.main.allJava\n        source += aeronArchiveProject.sourceSets.generated.allJava\n        source += aeronClusterProject.sourceSets.main.allJava\n        source += aeronClusterProject.sourceSets.generated.allJava\n    }\n\n    javadoc.dependsOn ':aeron-archive:generateCodecs', ':aeron-cluster:generateCodecs'\n\n    tasks.register('javadocJar', Jar) {\n        dependsOn 'javadoc'\n        archiveClassifier.set('javadoc')\n        from javadoc.destinationDir\n    }\n\n    publishing {\n        publications {\n            aeronAgent(MavenPublication) {\n                artifact shadowJar\n                artifact sourcesJar\n                artifact javadocJar\n                pom(projectPom)\n            }\n        }\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronAgent\n    }\n}\n\nproject(':aeron-samples') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n\n    dependencies {\n        api project(':aeron-cluster')\n        implementation libs.hdrHistogram\n        testImplementation project(':aeron-test-support')\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            aeronSamples(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    javadoc {\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += project(':aeron-client').sourceSets.main.allJava\n        source += project(':aeron-driver').sourceSets.main.allJava\n        source += project(':aeron-archive').sourceSets.main.allJava\n        source += project(':aeron-archive').sourceSets.generated.allJava\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronSamples\n    }\n\n    tasks.named('test').configure {\n        dependsOn ':aeron-agent:jar'\n\n        ext.agentFilename = {\n            project.file(\"../aeron-agent/build/libs/aeron-agent-${aeronVersion}.jar\").absolutePath\n        }\n\n        jvmArgs '-javaagent:' + agentFilename()\n        systemProperty 'aeron.event.cluster.log', 'all'\n        systemProperty 'aeron.event.cluster.log.disable', 'CANVASS_POSITION,APPEND_POSITION,COMMIT_POSITION'\n        systemProperty 'aeron.event.archive.log', 'all'\n        systemProperty 'aeron.event.log', 'admin'\n        systemProperty 'aeron.debug.timeout', '3600s'\n        systemProperty 'aeron.event.log.reader.classname', 'io.aeron.agent.CollectingEventLogReaderAgent'\n        systemProperty 'aeron.fallback.logger', 'no_op'\n    }\n\n    tasks.register('asciidoctorGithub', io.aeron.build.AsciidoctorPreprocessTask) {\n        versionText = aeronVersion\n    }\n\n    tasks.register('removeWikiDirectory', Delete) {\n        delete \"${layout.buildDirectory.get()}/tmp/tutorialPublish\"\n    }\n\n    tasks.register('tutorialPublish', io.aeron.build.TutorialPublishTask) {\n        dependsOn 'removeWikiDirectory', 'asciidoctorGithub'\n        apiKey = project.hasProperty('aeron.ci.apiKey') ? project.property('aeron.ci.apiKey') : ''\n        source = asciidoctorGithub.target\n        remoteName = project.hasProperty('aeron.ci.remoteName') ? project.property('aeron.ci.remoteName') : 'origin'\n    }\n}\n\nproject(':aeron-system-tests') {\n    apply plugin: 'com.gradleup.shadow'\n\n    dependencies {\n        testImplementation project(':aeron-archive')\n        testImplementation project(':aeron-test-support')\n        testImplementation project(':aeron-samples')\n        testImplementation project(path: ':aeron-client', configuration: 'tests')\n        testImplementation project(path: ':aeron-archive', configuration: 'tests')\n        testImplementation project(path: ':aeron-cluster')\n        testImplementation libs.byteBuddy\n        testImplementation libs.byteBuddy.agent\n        testCompileOnly libs.findbugs\n    }\n\n    tasks.named('test').configure {\n        dependsOn ':aeron-agent:jar'\n\n        ext.agentFilename = {\n            project.file(\"../aeron-agent/build/libs/aeron-agent-${aeronVersion}.jar\").absolutePath\n        }\n\n        jvmArgs '-javaagent:' + agentFilename()\n        systemProperty 'aeron.event.cluster.log', 'all'\n        systemProperty 'aeron.event.cluster.log.disable', 'CANVASS_POSITION,APPEND_POSITION,COMMIT_POSITION'\n        systemProperty 'aeron.event.archive.log', 'all'\n        systemProperty 'aeron.event.log', 'admin'\n        systemProperty 'aeron.debug.timeout', '3600s'\n        systemProperty 'aeron.event.log.reader.classname', 'io.aeron.agent.CollectingEventLogReaderAgent'\n        systemProperty 'aeron.fallback.logger', 'no_op'\n    }\n\n    shadowJar {\n        archiveClassifier.set('tests')\n        from sourceSets.test.output\n        configurations = [project.configurations.testRuntimeClasspath]\n    }\n\n    javadoc.enabled = false\n}\n\nproject(':aeron-test-support') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n\n    dependencies {\n        implementation project(':aeron-client')\n        implementation project(':aeron-cluster')\n        implementation project(':aeron-samples')\n        implementation platform(\"org.junit:junit-bom:${libs.versions.junit.get()}\")\n        implementation \"org.junit.jupiter:junit-jupiter-api\"\n        implementation \"org.junit.jupiter:junit-jupiter-params\"\n        implementation libs.mockito\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            aeronTestSupport(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronTestSupport\n    }\n}\n\nproject(':aeron-all') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'com.gradleup.shadow'\n\n    def aeronClientProject = project(':aeron-client')\n    def aeronDriverProject = project(':aeron-driver')\n    def aeronArchiveProject = project(':aeron-archive')\n    def aeronClusterProject = project(':aeron-cluster')\n    def aeronSamplesProject = project(':aeron-samples')\n\n    dependencies {\n        implementation aeronClusterProject\n        implementation aeronSamplesProject\n    }\n\n    shadowJar {\n        archiveClassifier.set('')\n        manifest.attributes(\n            'Implementation-Title': 'Aeron',\n            'Implementation-Version': aeronVersion,\n            'Implementation-Vendor': 'Real Logic Limited',\n            'Automatic-Module-Name': 'io.aeron.all')\n\n        relocate 'net.bytebuddy', 'io.aeron.shadow.net.bytebuddy'\n        relocate 'org.HdrHistogram', 'io.aeron.shadow.org.HdrHistogram'\n    }\n\n    jar.finalizedBy shadowJar\n\n    tasks.register('dedupJar', io.aeron.build.DeduplicateTask) {\n        source shadowJar.outputs.files.singleFile\n    }\n\n    shadowJar.finalizedBy dedupJar\n\n    tasks.register('sourcesJar', Jar) {\n        dependsOn ':aeron-archive:generateCodecs', ':aeron-cluster:generateCodecs'\n        archiveClassifier.set('sources')\n        from files(\n            aeronClientProject.sourceSets.main.allSource,\n            aeronDriverProject.sourceSets.main.allSource,\n            aeronArchiveProject.sourceSets.main.allSource,\n            aeronArchiveProject.sourceSets.generated.allSource,\n            aeronClusterProject.sourceSets.main.allSource,\n            aeronClusterProject.sourceSets.generated.allSource,\n            aeronSamplesProject.sourceSets.main.allSource)\n    }\n\n    javadoc {\n        source += project(':aeron-annotations').sourceSets.main.allJava\n        source += aeronClientProject.sourceSets.main.allJava\n        source += aeronDriverProject.sourceSets.main.allJava\n        source += aeronArchiveProject.sourceSets.main.allJava\n        source += aeronArchiveProject.sourceSets.generated.allJava\n        source += aeronClusterProject.sourceSets.main.allJava\n        source += aeronClusterProject.sourceSets.generated.allJava\n        source += aeronSamplesProject.sourceSets.main.allJava\n    }\n\n    javadoc.dependsOn ':aeron-archive:generateCodecs', ':aeron-cluster:generateCodecs'\n\n    tasks.register('javadocJar', Jar) {\n        dependsOn 'javadoc'\n        archiveClassifier.set('javadoc')\n        from javadoc.destinationDir\n    }\n\n    publishing {\n        publications {\n            aeronAll(MavenPublication) {\n                artifact shadowJar\n                artifact sourcesJar\n                artifact javadocJar\n                pom(projectPom)\n            }\n        }\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.aeronAll\n    }\n}\n\ntasks.register('testReport', TestReport) {\n    destinationDirectory = file(\"${layout.buildDirectory.get()}/reports/allTests\")\n    // Include the results from the `test` task in all sub-projects\n    testResults.setFrom(subprojects*.test)\n}\n\ntasks.register('copyTestLogs', Copy) {\n    from '.'\n    include '**/build/test-output/**'\n    include '**/*.hprof'\n    include '**/*.log'\n    include '**/*.tlog'\n    include '**/build/reports/tests/**'\n    include '**/build/test-results/**/*'\n    include 'LICENSE'\n    exclude 'build'\n    into 'build/test_logs'\n\n    includeEmptyDirs = false\n}\n\ntasks.register('tarTestLogs', Tar) {\n    dependsOn tasks.named('copyTestLogs')\n    archiveBaseName.set('test_logs')\n    from 'build/test_logs'\n    compression Compression.BZIP2\n}\n\ndef isNonStable = { String version ->\n    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }\n    def regex = /^[0-9,.v-]+(-r)?$/\n    return !stableKeyword && !(version ==~ regex)\n}\n\ntasks.named('dependencyUpdates').configure {\n    // Reject all non stable versions\n    rejectVersionIf {\n        isNonStable(it.candidate.version)\n    }\n}\n\nwrapper {\n    gradleVersion = libs.versions.gradle.get()\n    distributionType = 'ALL'\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cppbuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.46875,
          "content": "org.gradle.java.installations.auto-detect=false\norg.gradle.java.installations.auto-download=false\norg.gradle.java.installations.fromEnv=BUILD_JAVA_HOME\n\norg.gradle.logging.level=lifecycle\norg.gradle.warning.mode=all\n\n# HTTP timeouts for Gradle\nsystemProp.org.gradle.internal.http.connectionTimeout=300000\nsystemProp.org.gradle.internal.http.socketTimeout=300000\nsystemProp.org.gradle.internal.repository.max.retries=1\nsystemProp.org.gradle.internal.publish.checksums.insecure=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "run-ci-tests.sh",
          "type": "blob",
          "size": 0.767578125,
          "content": "#!/usr/bin/env bash\n\nif [ -z \"$AERON_GITHUB_PAT\" ]\nthen\n  echo \"Please set AERON_GITHUB_PAT environment variable to contain your token\"\n  exit 1\nfi\n\nevent_type=run-commit-tests\n\nfor option in \"$@\"\ndo\n  case ${option} in\n    -s|--slow)\n      event_type=run-slow-tests\n      shift\n      ;;\n    -c|--commit)\n      shift\n      ;;\n    *)\n      echo \"$0 [-s|--slow-tests] (run slow tests) [-c|--commit] (run commit tests) default: commit tests\"\n      exit\n      ;;\n  esac\ndone\n\necho \"Sending repository_dispatch, event_type: ${event_type}\"\n\ncurl -v -H \"Accept: application/vnd.github.everest-preview+json\" \\\n    -H \"Authorization: token ${AERON_GITHUB_PAT}\" \\\n    --request POST \\\n    --data \"{\\\"event_type\\\": \\\"${event_type}\\\"}\" \\\n    https://api.github.com/repos/real-logic/aeron/dispatches"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.22265625,
          "content": "include (\n    'aeron-annotations',\n    'aeron-client',\n    'aeron-driver',\n    'aeron-archive',\n    'aeron-cluster',\n    'aeron-agent',\n    'aeron-samples',\n    'aeron-system-tests',\n    'aeron-test-support',\n    'aeron-all')\n\n\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "1.47.0-SNAPSHOT"
        }
      ]
    }
  ]
}