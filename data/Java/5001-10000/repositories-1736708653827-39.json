{
  "metadata": {
    "timestamp": 1736708653827,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xuchengsheng/spring-reading",
      "stars": 8987,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3857421875,
          "content": "HELP.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### VS Code ###\n.vscode/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2024 xuchengsheng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 38.9375,
          "content": "<div align=\"center\">\n    <img alt=\"logo\" src=\"image/banner.png\" style=\"height: 80px\">\n</div>\n<div align=\"center\">\n    <h2>深入Spring，从源码开始！</h2>\n    <h4>探索Java最受欢迎的框架，理解它的内部机制，带大家从入门到精通。</h4>\n</div>\n<p align=\"center\">\n    <a href=\"https://github.com/xuchengsheng/spring-reading/stargazers\"><img src=\"https://img.shields.io/github/stars/xuchengsheng/spring-reading?logo=github&logoColor=%23EF2D5E&label=Stars&labelColor=%23000000&color=%23EF2D5E&cacheSeconds=3600\" alt=\"Stars Badge\"/></a>\n    <a href=\"https://github.com/xuchengsheng\"><img src=\"https://img.shields.io/github/followers/xuchengsheng?label=Followers&logo=github&logoColor=%23FC521F&labelColor=%231A2477&color=%23FC521F&cacheSeconds=3600\" alt=\"Follow Badge\"></a>\n    <a href=\"https://github.com/xuchengsheng/spring-reading/fork\"><img src=\"https://img.shields.io/github/forks/xuchengsheng/spring-reading?label=Forks&logo=github&logoColor=%23F2BB13&labelColor=%23BE2323&color=%23F2BB13\" alt=\"Fork Badge\"></a>\n    <a href=\"https://github.com/xuchengsheng/spring-reading/watchers\"><img src=\"https://img.shields.io/github/watchers/xuchengsheng/spring-reading?label=Watchers&logo=github&logoColor=%23FF4655&labelColor=%234169E1&color=%23FF4655&cacheSeconds=3600\" alt=\"Watchers Badge\"></a>\n</p>\n<p align=\"center\">\n    <img src=\"https://visitor-badge.lithub.cc/badge?page_id=github.com/xuchengsheng&left_text=Visitors\" alt=\"Visitor Badge\"/>\n    <img src=\"https://img.shields.io/badge/WeChat-spring_reading-%2307C160?logo=wechat\" alt=\"Wechat Badge\"/>\n    <a href=\"https://blog.csdn.net/duzhuang2399\"><img src=\"https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fblog.csdn.net%2Fduzhuang2399&query=%2F%2F*%5B%40id%3D%22userSkin%22%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%2Fdiv%5B2%5D%2Fdiv%5B1%5D%2Fdiv%5B1%5D%2Fdiv%5B2%5D%2Fspan&logo=C&logoColor=red&label=CSDN&color=red&cacheSeconds=3600\" alt=\"CSDN Badge\"></a>\n        <a href=\"https://hellogithub.com/repository/f43b683fa175499ca3af4e9b1684e88b\" target=\"_blank\"><img src=\"https://api.hellogithub.com/v1/widgets/recommend.svg?rid=f43b683fa175499ca3af4e9b1684e88b&claim_uid=AVv4KeNnZs2Ig3a&theme=small\" alt=\"Featured｜HelloGitHub\"/></a>\n</p>\n<p align=\"center\">\n    ⚡ <a href=\"#技术\">技术</a>\n    |\n    👋 <a href=\"#简介\">简介</a>\n    |\n    🍵 <a href=\"#为何做Spring源码分析\">Why</a>\n    |\n    🙏 <a href=\"#顺手点个星\">点个星</a>\n    |\n    🌱 <a href=\"#spring-源码阅读系列\">Spring源码</a>\n    |\n    💬 <a href=\"#与我联系\">联系我</a>\n    |\n    ⛵ <a href=\"#欢迎贡献\">贡献</a>\n    |\n    🔄 <a href=\"#持续更新中\">更新</a>\n    |\n    💻 <a href=\"#我的-github-统计\">统计</a>\n</p>\n\n\n---\n\n## ⚡技术\n\n<div align=\"left\">\n    <img src=\"https://img.shields.io/badge/Java-1.8%2B-%23437291?logo=openjdk&logoColor=%23437291\"/>\n    <img src=\"https://img.shields.io/badge/Spring-5.3.10-%23437291?logo=Spring&logoColor=%236DB33F&color=%236DB33F\"/>\n    <img src=\"https://img.shields.io/badge/SpringBoot-2.5.5-%23437291?logo=SpringBoot&logoColor=%236DB33F&color=%236DB33F\"/>\n    <img src=\"https://img.shields.io/badge/Maven-3.6.3-%23437291?logo=Apache%20Maven&logoColor=%23C71A36&color=%23C71A36\"/>\n    <img src=\"https://img.shields.io/badge/JSR-330-%2366CCFF?logo=OpenJDK&logoColor=%2366CCFF&color=%2366CCFF\"/>\n    <img src=\"https://img.shields.io/badge/JSR-250-%23FF9900?logo=OpenJDK&logoColor=%23FF9900&color=%23FF9900\"/>\n</div>\n\n## 👋简介\n大家好呀，我是Lex👨‍💻。我是一名拥有8年经验的Java 后端开发人员👨‍💼，也是一个对 Spring 框架充满热情❤️的程序员。为了帮助那些希望深入了解 Spring 框架的程序员们🧑‍💻，我创建了这个 “Spring 源码阅读系列”📖。通过这个系列，我希望能够与你们共同探索 Spring 的内部工作机制⚙️。如果您有同样的兴趣或问题🤔，请联系我📩！\n\n## 🍵**为何做Spring源码分析**\n在我作为框架研发的开发者👨‍🔬的工作中，我经常遇到需要深入理解和调整框架行为的情况🔧。这些工作不只是简单地使用框架的API，更多地是需要对框架的内部工作方式有详细的了解🔍。虽然Github上有关于Spring的简化版本📦，这些对于入门学习确实有很大的帮助✅，但当涉及到真实的项目应用时，与真正的Spring框架还是有很大的差异❌。因此，我开始深入研究Spring的源码，希望能够更透彻地理解其内部的工作机制，以便更好地应用到我的实际工作中🧰。分享我的源码分析📝，也是为了给那些希望真正理解Spring，而不仅仅是使用它的开发者提供一些参考和帮助🙌。\n\n## 🙏顺手点个星\n亲爱的朋友们👥，我真的花了很多心思💭去研究和整理这个“Spring 源码阅读系列”📘。如果你觉得这东西还不错👍，或者给你带来了一点点帮助🤗，麻烦点一下星星吧🌟。这真的对我意义重大🎖，每一颗星✨都能让我觉得所有的努力都是值得的💪。我知道这是小事一桩，但你的那一下点击🖱，对我来说就是最好的鼓励🎉。无论如何，都要感谢你抽时间🕰阅读我的内容，真的很感激🙏！\n\n## 🌱Spring 源码阅读系列\n\n+ Spring Core\n  + 资源加载与访问\n    - [Resource](spring-resources/spring-resource/README.md)：抽象接口，表示文件、类路径等，用于访问不同来源的资源。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ResourceLoader](spring-resources/spring-resource-resourceLoader/README.md)：资源获取核心接口，实现统一加载不同位置资源的策略。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ResourcePatternResolver](spring-resources/spring-resource-resourcePatternResolver/README.md)：资源模式解析接口，用于灵活加载应用中的多种资源。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [DocumentLoader](spring-resources/spring-resource-documentLoader/README.md)：XML文档加载解析核心接口，支持后台自动配置Spring应用。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + 元数据与过滤\n    - [MetadataReader](spring-metadata/spring-metadata-metadataReader/README.md)：类元数据获取核心，支持组件扫描、条件化注解、AOP等高级功能。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [AnnotationMetadata](spring-metadata/spring-metadata-annotationMetadata/README.md)：动态获取和操作运行时类注解信息。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [TypeFilter](spring-metadata/spring-metadata-typeFilter/README.md)：组件扫描时自定义类筛选，支持复杂条件和精确过滤。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Condition](spring-metadata/spring-metadata-condition/README.md)：条件判断，决定Bean创建和配置的灵活机制。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + 验证、数据绑定和类型转换\n    - [Validator](spring-dataops/spring-dataops-validator/README.md)：提供自定义数据验证逻辑，确保模型对象满足业务规则。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [PropertyEditor](spring-dataops/spring-dataops-propertyEditor/README.md)：自定义JavaBean属性的转换逻辑，处理属性类型转换。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Converter](spring-dataops/spring-dataops-converter/README.md)：用于不同类型间的转换，定义简单的源至目标类型转换规则。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConverterFactory](spring-dataops/spring-dataops-converterFactory/README.md)：创建针对特定源类型的转换器，用于类型转换。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [GenericConverter](spring-dataops/spring-dataops-genericConverter/README.md)：更复杂的转换器，支持多种源和目标类型转换。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConditionalConverter](spring-dataops/spring-dataops-conditionalConverter/README.md)：根据条件选择是否执行转换的转换器。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConversionService](spring-dataops/spring-dataops-conversionService/README.md)：提供统一的类型转换服务接口，管理转换器。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Printer](spring-dataops/spring-dataops-printer/README.md)：用于将对象格式化为文本，专注于格式化输出。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Parser](spring-dataops/spring-dataops-parser/README.md)：用于将文本解析为对象，专注于解析逻辑。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + Spring 表达式语言（SpEL）\n    - [ExpressionParser](spring-spel/spring-spel-expressionParser/README.md): 解析字符串形式的 SpEL 表达式，创建并返回 Expression 实例。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [Expression](spring-spel/spring-spel-expression/README.md): 对表达式字符串进行求值的功能，支持类型转换、获取原始字符串等操作。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [EvaluationContext](spring-spel/spring-spel-evaluationContext/README.md): 管理SpEL表达式的上下文信息。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [PropertyAccessor](spring-spel/spring-spel-propertyAccessor/README.md): 用于读取和写入对象的属性，可用于实现自定义的属性访问逻辑。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConstructorResolver](spring-spel/spring-spel-constructorResolver/README.md): 解析构造函数确定bean的实例化方式。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [MethodResolver](spring-spel/spring-spel-methodResolver/README.md): 解析类方法，确保正确调用，处理重载和参数匹配。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [BeanResolver](spring-spel/spring-spel-beanResolver/README.md): 解析bean定义，包括依赖、属性设置，实例化并返回。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [TypeLocator](spring-spel/spring-spel-typeLocator/README.md): 动态查找类，返回Class对象，在表达式解析、类型转换等。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [TypeConverter](spring-spel/spring-spel-typeLocator/README.md): 类型转换功能，将表达式中的数据从一种类型转换为另一种类型。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [TypeComparator](spring-spel/spring-spel-typeLocator/README.md): 类型比较功能，定义了比较两个对象是否相等的方法。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [OperatorOverloader](spring-spel/spring-spel-typeLocator/README.md): 运算符重载功能，对表达式中的运算符进行自定义操作的方法。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + Bean定义与注册\n    - [BeanDefinition](spring-beans/spring-bean-beanDefinition/README.md)：详细描述Bean，支持依赖注入、AOP、作用域控制等核心功能。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [BeanDefinitionHolder](spring-beans/spring-bean-beanDefinitionHolder/README.md)：管理和操作BeanDefinition的关键类。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [BeanDefinitionRegistry](spring-beans/spring-bean-beanDefinitionRegistry/README.md)：Bean定义注册管理关键接口，处理Bean元数据。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + Bean定义读取与扫描\n    - [XmlBeanDefinitionReader](spring-beans/spring-bean-xmlBeanDefinitionReader/README.md)：加载解析XML配置，构建IOC容器，注册Bean定义。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [PropertiesBeanDefinitionReader](spring-beans/spring-bean-propertiesBeanDefinitionReader/README.md)：属性文件加载，解析为Bean定义。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [GroovyBeanDefinitionReader](spring-beans/spring-bean-groovyBeanDefinitionReader/README.md)：Groovy脚本解析为Bean定义。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AnnotatedBeanDefinitionReader](spring-beans/spring-bean-annotatedBeanDefinitionReader/README.md)：注解配置，自动扫描注册Spring组件，简化Bean定义配置。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [ClassPathBeanDefinitionScanner](spring-beans/spring-bean-classPathBeanDefinitionScanner/README.md)：类路径扫描注册Spring Bean，支持自动装配。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n\n  + Bean工厂\n    - [BeanFactory](spring-factory/spring-factory-beanFactory/README.md)：Spring的核心接口，提供对Bean的配置、创建、管理的基本功能。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [ListableBeanFactory](spring-factory/spring-factory-listableBeanFactory/README.md)：支持按类型获取Bean的集合。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [HierarchicalBeanFactory](spring-factory/spring-factory-hierarchicalBeanFactory/README.md)：支持父子容器关系，实现Bean定义的层次结构。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [ConfigurableBeanFactory](spring-factory/spring-factory-configurableBeanFactory/README.md)：提供对BeanFactory配置的扩展，如属性编辑器、作用域等。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AutowireCapableBeanFactory](spring-factory/spring-factory-autowireCapableBeanFactory/README.md)：Bean创建、初始化、注入、销毁的核心功能接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [ConfigurableListableBeanFactory](spring-factory/spring-factory-configurableListableBeanFactory/README.md)：支持配置和列表操作的可配置Bean工厂接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n\n  + 容器上下文\n    - [ClassPathXmlApplicationContext](spring-context/spring-context-classPathXmlApplicationContext/README.md)：类路径（classpath）加载 XML 配置文件的上下文。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [AnnotationConfigApplicationContext](spring-context/spring-context-annotationConfigApplicationContext/README.md)：注解配置类中加载配置信息的上下文。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - GenericApplicationContext：支持多种配置方式，XML、注解、手动注册的上下文。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n\n  + Bean定义导入与组合\n    - ImportBeanDefinitionRegistrar：运行时动态注册 Bean，实现灵活配置，扩展配置类功能。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - ImportSelector：运行时动态导入配置类，实现条件选择和灵活配置。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - DeferredImportSelector：运行时动态导入配置，支持条件选择和按组别延迟加载。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n\n  + Bean生命周期\n    - [Bean的定义注册过程](spring-core/spring-core-registerBeanDefinition)：加载与解析配置文件，注册解析Bean定义，类名、作用域、属性等。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [Bean的初始化过程](spring-core/spring-core-getBean/README.md)：实例化、属性注入、Aware回调、后置处理器、初始化方法调用。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [Bean的依赖解析过程](spring-core/spring-core-resolveDependency/README.md)：声明依赖，查找依赖，注入依赖，处理循环依赖，延迟依赖解析。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [Bean的销毁过程](spring-core/spring-core-destroyBean/README.md)：销毁方法调用，接口回调，后处理清理，通知触发，GC回收资源。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n\n  + 属性解析和环境配置\n    - [PropertySource](spring-env/spring-env-propertySource/README.md)：管理各种配置源的抽象类，支持灵活地加载和访问应用配置。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [PropertySources](spring-env/spring-env-propertySources/README.md)：用于统一管理和访问多个 PropertySource 实例，简化配置数据的处理。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [PropertyResolver](spring-env/spring-env-propertyResolver/README.md)：通用属性解析，获取配置值，处理属性缺失，简便灵活。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConfigurablePropertyResolver](spring-env/spring-env-configurablePropertyResolver/README.md)：属性解析配置，占位符设置，适应不同配置需求。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Environment](spring-env/spring-env-environment/README.md)：应用环境表示，提供属性访问，支持配置文件，实现动态配置。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ConfigurableEnvironment](spring-env/spring-env-configurableEnvironment/README.md)：动态配置应用环境，激活、默认配置，提升应用灵活性。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n\n  + Bean初始化与扩展点\n    - [InitializingBean](spring-interface/spring-interface-initializingBean/README.md)：提供Bean初始化时执行自定义逻辑的接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [DisposableBean](spring-interface/spring-interface-disposableBean/README.md)：定义Bean销毁前执行清理操作的接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [BeanDefinitionRegistryPostProcessor](spring-interface/spring-interface-beanDefinitionRegistryPostProcessor/README.md)：在容器启动时，对BeanDefinition动态修改或添加。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [BeanFactoryPostProcessor](spring-interface/spring-interface-beanFactoryPostProcessor/README.md)：在Bean实例化前，对BeanFactory进行全局修改或配置。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [BeanPostProcessor](spring-interface/spring-interface-beanPostProcessor/README.md)：在Bean初始化前后，进行自定义处理，可影响所有Bean。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [InstantiationAwareBeanPostProcessor](spring-interface/spring-interface-instantiationAwareBeanPostProcessor/README.md)：提供更深层次的实例化和属性注入控制。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [DestructionAwareBeanPostProcessor](spring-interface/spring-interface-destructionAwareBeanPostProcessor/README.md)： 允许在Bean销毁前进行额外的清理操作。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [MergedBeanDefinitionPostProcessor](spring-interface/spring-interface-mergedBeanDefinitionPostProcessor/README.md)：在合并Bean定义时对BeanDefinition进行处理。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [SmartInstantiationAwareBeanPostProcessor](spring-interface/spring-interface-smartInstantiationAwareBeanPostProcessor/README.md)：提供更智能的实例化控制。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [SmartInitializingSingleton](spring-interface/spring-interface-smartInitializingSingleton/README.md)：在所有单例Bean初始化完成后，执行自定义逻辑。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n\n  + Aware接口系列\n    - [BeanNameAware](spring-aware/spring-aware-beanNameAware/README.md)：让Bean获取自身在容器中的名字。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [BeanClassLoaderAware](spring-aware/spring-aware-beanClassLoaderAware/README.md)：允许Bean获取其类加载器。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [BeanFactoryAware](spring-aware/spring-aware-beanFactoryAware/README.md)：提供Bean获取所属的BeanFactory。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [EnvironmentAware](spring-aware/spring-aware-environmentAware/README.md)：允许Bean获取应用程序环境配置。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [EmbeddedValueResolverAware](spring-aware/spring-aware-embeddedValueResolverAware/README.md)：允许Bean解析嵌入式值占位符。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [ResourceLoaderAware](spring-aware/spring-aware-beanClassLoaderAware/README.md)：允许Bean获取资源加载器。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [ApplicationEventPublisherAware](spring-aware/spring-aware-applicationEventPublisherAware/README.md)：允许Bean发布应用程序事件。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [MessageSourceAware](spring-aware/spring-aware-messageSourceAware/README.md)：允许Bean获取消息源。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [ApplicationContextAware](spring-aware/spring-aware-applicationContextAware/README.md)：允许Bean获取应用程序上下文。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [ImportAware](spring-aware/spring-aware-importAware/README.md)：允许被导入的配置类获取导入它的类的信息。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n\n  + 核心注解\n    - [@Configuration](spring-annotation/spring-annotation-configuration/README.md)：声明类为配置类，定义Bean和Bean之间的依赖关系。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@ComponentScan](spring-annotation/spring-annotation-componentScan/README.md)：启用组件扫描，自动发现并注册标记为组件的类。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Bean](spring-annotation/spring-annotation-bean/README.md)：在配置类中声明方法，返回Bean实例。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Import](spring-annotation/spring-annotation-import/README.md)：引入其他配置类，将其Bean定义合并到当前容器。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@PropertySource](spring-annotation/spring-annotation-propertySource/README.md)：指定属性文件，加载外部配置到环境中。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@DependsOn](spring-annotation/spring-annotation-dependsOn/README.md)：指定Bean的依赖顺序，确保特定Bean在其他Bean之前初始化。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Conditional](spring-annotation/spring-annotation-conditional/README.md)：根据条件决定是否创建Bean。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Lazy](spring-annotation/spring-annotation-lazy/README.md)：指定Bean的延迟初始化，只有在首次使用时才创建。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Value](spring-annotation/spring-annotation-value/README.md)：注入简单值或表达式到Bean的字段或方法参数。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [@Autowired](spring-annotation/spring-annotation-autowired/README.md)：自动装配Bean依赖。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - @Primary：指定在多个候选Bean中优先选择的首选Bean。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - @Description：为Bean提供描述性信息。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - @Role：为Bean提供角色提示，用于区分相似类型的Bean。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - @Indexed： 标记Bean用于索引。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n    - @Order：指定Bean的加载顺序。<img src=\"https://img.shields.io/badge/%E5%8D%B3%E5%B0%86%E6%9B%B4%E6%96%B0-339933\"></img>\n\n  + JSR规范\n    - [@Inject](spring-jsr/spring-jsr330-inject/README.md)：JSR-330标准的依赖注入注解。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@Named](spring-jsr/spring-jsr330-named/README.md)：JSR-330标准的命名注解。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@Resource](spring-jsr/spring-jsr250-resource/README.md)：Java EE标准的资源注入注解。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@Qualifier](spring-jsr/spring-jsr330-qualifier/README.md)：用于限定注入的Bean。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@Scope](spring-jsr/spring-jsr330-scope/README.md)：指定Bean的作用域。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@Singleton](spring-jsr/spring-jsr330-singleton/README.md)：指定Bean为单例。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@PostConstruct](spring-jsr/spring-jsr250-postConstruct/README.md)：指定初始化方法。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [@PreDestroy](spring-jsr/spring-jsr250-preDestroy/README.md)：指定销毁方法。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n    - [Provider](spring-jsr/spring-jsr330-provider/README.md)：Java标准库提供的通用Bean工厂接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF8C69\"></img>\n\n  + Spring AOP\n    - [JDK动态代理](spring-aop/spring-aop-jdkProxy/README.md)：接口实现，动态生成代理类，处理方法调用，统一横切关注点。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Cglib动态代理](spring-aop/spring-aop-cglibProxy/README.md)：基于字节码生成的库，无需接口，可拦截类方法并进行增强。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ClassFilter](spring-aop/spring-aop-classFilter/README.md)：确定类是否匹配拦截条件。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [MethodMatcher](spring-aop/spring-aop-methodMatcher/README.md)：确定方法是否匹配拦截条件。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Pointcut](spring-aop/spring-aop-pointcut/README.md)：定义切入点，匹配被拦截的方法。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Advice](spring-aop/spring-aop-advice/README.md)：AOP中定义各种通知类型行为的核心接口。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n      - [MethodInterceptor](spring-aop/spring-aop-advice-methodInterceptor/README.md)：拦截方法执行，允许在前后添加额外逻辑。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n      - [MethodBeforeAdvice](spring-aop/spring-aop-advice-methodBeforeAdvice/README.md)：允许在方法调用之前插入自定义逻辑。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n      - [AfterReturningAdvice](spring-aop/spring-aop-advice-afterReturningAdvice/README.md)：允许在方法调用之后插入自定义逻辑。<<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n      - [ThrowsAdvice](spring-aop/spring-aop-advice-throwsAdvice/README.md)：异常通知，捕获方法抛出的异常，执行额外逻辑。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n      - [IntroductionInterceptor](spring-aop/spring-aop-advice-introductionInterceptor/README.md)：动态地向目标对象引入新的功能或属性。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Advisor](spring-aop/spring-aop-advisor/README.md)：用于将通知和切点结合，实现切面编程的横切关注点。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [Advised](spring-aop/spring-aop-advised/README.md)：配置AOP代理的通知、通知器、目标等。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ProxyFactory](spring-aop/spring-aop-proxyFactory/README.md)：一种便捷的方式来创建代理对象。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [AopProxyFactory](spring-aop/spring-aop-aopProxyFactory/README.md)：创建AOP代理工厂，支持JDK和CGLIB。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AopProxy](spring-aop/spring-aop-aopProxy/README.md)：创建和管理AOP代理对象。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [AdvisorChainFactory](spring-aop/spring-aop-advisorChainFactory/README.md)：创建Advisor链的工厂接口。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AdvisorAdapterRegistry](spring-aop/spring-aop-advisorAdapterRegistry/README.md)：适配各种Advice到AOP拦截器，注册和管理Advisor适配器。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AdvisorAdapter](spring-aop/spring-aop-advisorAdapter/README.md)：适配不同类型通知到拦截器链。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [ProxyMethodInvocation](spring-aop/spring-aop-proxyMethodInvocation/README.md)：AOP方法调用代理，处理拦截器链和方法调用。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [@EnableAspectJAutoProxy](spring-aop/spring-aop-enableAspectJAutoProxy/README.md)：启用AspectJ切面自动代理。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AnnotationAwareAspectJAutoProxyCreator](spring-aop/spring-aop-annotationAwareAspectJAutoProxyCreator/README.md)：创建AOP代理以应用AspectJ风格的切面。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [BeanFactoryAdvisorRetrievalHelper](spring-aop/spring-aop-beanFactoryAdvisorRetrievalHelper/README.md)：帮助检索并管理Spring AOP 中的 Advisor Beans。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [BeanFactoryAspectJAdvisorsBuilder](spring-aop/spring-aop-beanFactoryAspectJAdvisorsBuilder/README.md)：构建@AspectJ注解切面，生成Spring AOP Advisors。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AspectInstanceFactory](spring-aop/spring-aop-aspectInstanceFactory/README.md)：创建切面实例，支持多种实现方式。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [MetadataAwareAspectInstanceFactory](spring-aop/spring-aop-metadataAwareAspectInstanceFactory/README.md)：管理切面实例和元数据，支持多种实例化策略。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AspectJAdvisorFactory](spring-aop/spring-aop-aspectJAdvisorFactory/README.md)：创建AspectJ通知器实例，管理切面通知的创建和配置。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n    - [TargetSource](spring-aop/spring-aop-targetSource/README.md)：管理AOP代理对象的获取与释放。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [TargetSourceCreator](spring-aop/spring-aop-targetSourceCreator/README.md)：创建特殊的目标源，定制代理对象的创建和管理。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n    - [AopContext](spring-aop/spring-aop-aopContext/README.md)：获取Spring AOP代理对象的工具。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [ExposeInvocationInterceptor](spring-aop/spring-aop-exposeInvocationInterceptor/README.md)：暴露Spring AOP方法调用上下文的拦截器。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n    - [@EnableLoadTimeWeaving](spring-aop/spring-aop-enableLoadTimeWeaving/README.md)：启用Spring加载时编织。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n+ Spring 事务\n  + [Connection](spring-transaction/spring-transaction-connection/README.md)：管理数据库连接，执行SQL，处理事务。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [DataSource](spring-transaction/spring-transaction-dataSource/README.md)：提供高效管理数据库连接的接口。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [DriverManager](spring-transaction/spring-transaction-driverManager/README.md)：管理和建立数据库连接的核心类。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [JdbcTemplate](spring-transaction/spring-transaction-jdbcTemplate/README.md)：简化了JDBC操作，提供了方便的数据库访问抽象。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [TransactionDefinition](spring-transaction/spring-transaction-transactionDefinition/README.md)：定义事务的传播行为和隔离级别。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [TransactionAttributeSource](spring-transaction/spring-transaction-transactionAttributeSource/README.md)：用于获取事务属性的策略接口。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [PlatformTransactionManager](spring-transaction/spring-transaction-platformTransactionManager/README.md)：用于管理和协调事务的生命周期和执行。<img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-%23FF3030\"></img>\n  + [TransactionTemplate](spring-transaction/spring-transaction-transactionTemplate/README.md)：简化事务管理，支持编程式事务控制与异常处理。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [SpringTransactionAnnotationParser](spring-transaction/spring-transaction-springTransactionAnnotationParser/README.md)：解析 `@Transactional`注解并转换为事务配置。<img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-0099ff\"></img>\n  + [TransactionInterceptor](spring-transaction/spring-transaction-transactionInterceptor/README.md)：事务拦截器，用于管理方法级别的事务处理。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n  + [EnableTransactionManagement](spring-transaction/spring-transaction-enableTransactionManagement/README.md)：启用Spring的注解驱动事务管理。<img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-%23FF6347\"></img>\n\n+ Spring MVC\n+ Spring OpenFeign\n\n## 💬与我联系\n\n✉️ [Email](xuchengshengsuper@163.com) | 💬 [Issue](https://github.com/xuchengsheng/spring-reading/issues) | 🌐 [CSDN](https://blog.csdn.net/duzhuang2399?type=blog)  Me about everything!\n\n## ⛵欢迎贡献！\n\n如果你发现任何错误🔍或者有改进建议🛠️，欢迎提交 issue 或者 pull request。你的反馈📢对于我非常宝贵💎！\n\n## 🔄持续更新中\n\n为了给大家提供最新🌱、最有价值的内容💼，我会坚持每天更新这个仓库⏳。每一天，你都可以期待看到一些新的内容或者对已有内容的改进✨。如果你有任何建议或反馈📣，欢迎随时联系我📞。我非常珍视每一个反馈💌，因为这是我持续改进的动力🚀。\n\n## ✨Star History\n\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=xuchengsheng/spring-reading&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=xuchengsheng/spring-reading&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=xuchengsheng/spring-reading&type=Date\" />\n </picture>\n\n## 🎉Stargazers\n\n[![Stargazers123 repo roster for @xuchengsheng/spring-reading](https://reporoster.com/stars/xuchengsheng/spring-reading)](https://github.com/xuchengsheng/spring-reading/stargazers)\n\n## 🎉Forkers\n\n[![Forkers repo roster for @xuchengsheng/spring-reading](https://reporoster.com/forks/xuchengsheng/spring-reading)](https://github.com/xuchengsheng/spring-reading/network/members)\n\n## 🍱请我吃盒饭？\n\n作者晚上还要写博客✍️,平时还需要工作💼,如果帮到了你可以请作者吃个盒饭🥡\n<div>\n<img alt=\"logo\" src=\"image/WeChatPay.png\" style=\"width: 260px;height: 280px\">\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n<img alt=\"logo\" src=\"image/Alipay.png\" style=\"width: 260px;height: 280px\">\n</div>\n\n## 👥**关注公众号**\n\n关注后，回复关键字 **“加群”**，即可加入我们的技术交流群，与更多开发者一起交流学习。\n\n<div>\n<img alt=\"logo\" src=\"image/wechat-mp.png\" style=\"height: 220px\">\n</div>\n"
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 19.0166015625,
          "content": "<table align=\"center\">\r\n    <tr align=\"center\">\r\n        <th>标题</th>\r\n        <th>地址</th>\r\n        <th>难度级别</th>\r\n        <th>视频讲解</th>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【资源加载与访问】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>资源加载</td>\r\n        <td><a href=\"spring-resources/spring-resource/README.md\">Resource</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>资源加载器</td>\r\n        <td><a href=\"spring-resources/spring-resource-resourceLoader/README.md\">ResourceLoader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>XML资源加载器</td>\r\n        <td><a href=\"spring-resources/spring-resource-documentLoader/README.md\">DocumentLoader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【元数据与过滤】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>类元数据读取</td>\r\n        <td><a href=\"spring-metadata/spring-metadata-metadataReader/README.md\">MetadataReader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>注解元数据</td>\r\n        <td><a href=\"spring-metadata/spring-metadata-annotationMetadata/README.md\">AnnotationMetadata</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>类过滤器</td>\r\n        <td><a href=\"spring-metadata/spring-metadata-typeFilter/README.md\">TypeFilter</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>条件过滤器</td>\r\n        <td><a href=\"spring-metadata/spring-metadata-condition/README.md\">Condition</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【Bean定义与注册】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean定义</td>\r\n        <td><a href=\"spring-beans/spring-bean-beanDefinition/README.md\">BeanDefinition</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean定义持有者</td>\r\n        <td><a href=\"spring-beans/spring-bean-beanDefinitionHolder/README.md\">BeanDefinitionHolder</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean定义注册器</td>\r\n        <td><a href=\"spring-beans/spring-bean-beanDefinitionRegistry/README.md\">BeanDefinitionRegistry</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【Bean定义读取与扫描】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>XML Bean定义读取器</td>\r\n        <td><a href=\"spring-beans/spring-bean-xmlBeanDefinitionReader/README.md\">XmlBeanDefinitionReader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>属性文件Bean定义读取器</td>\r\n        <td><a href=\"spring-beans/spring-bean-propertiesBeanDefinitionReader/README.md\">PropertiesBeanDefinitionReader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Groovy脚本Bean定义读取器</td>\r\n        <td><a href=\"spring-beans/spring-bean-groovyBeanDefinitionReader/README.md\">GroovyBeanDefinitionReader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E7%AE%80%E5%8D%95-Green\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>注解Bean定义读取器</td>\r\n        <td><a href=\"spring-beans/spring-bean-annotatedBeanDefinitionReader/README.md\">AnnotatedBeanDefinitionReader</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>类路径Bean定义扫描器</td>\r\n        <td><a href=\"spring-beans/spring-bean-classPathBeanDefinitionScanner/README.md\">ClassPathBeanDefinitionScanner</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【Bean生命周期过程】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean的定义解析</td>\r\n        <td><a href=\"#\">Bean的定义解析</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean的初始化过程</td>\r\n        <td><a href=\"spring-core/spring-core-getBean/README.md\">Bean的初始化过程</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean的依赖解析过程</td>\r\n        <td><a href=\"spring-core/spring-core-resolveDependency/README.md\">Bean的依赖解析过程</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean的销毁过程</td>\r\n        <td><a href=\"#\">Bean的销毁过程</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【后置处理器与初始化】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>属性设置后的初始化操作</td>\r\n        <td><a href=\"spring-interface/spring-interface-initializingBean/README.md\">InitializingBean</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>资源清理与销毁</td>\r\n        <td><a href=\"spring-interface/spring-interface-disposableBean/README.md\">DisposableBean</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>动态修改Bean定义</td>\r\n        <td><a href=\"spring-interface/spring-interface-beanDefinitionRegistryPostProcessor/README.md\">BeanDefinitionRegistryPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>动态调整Bean配置</td>\r\n        <td><a href=\"spring-interface/spring-interface-beanFactoryPostProcessor/README.md\">BeanFactoryPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>调整Bean属性</td>\r\n        <td><a href=\"spring-interface/spring-interface-beanPostProcessor/README.md\">BeanPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean实例拦截</td>\r\n        <td><a href=\"spring-interface/spring-interface-instantiationAwareBeanPostProcessor/README.md\">InstantiationAwareBeanPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean销毁生命周期</td>\r\n        <td><a href=\"spring-interface/spring-interface-destructionAwareBeanPostProcessor/README.md\">DestructionAwareBeanPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean定义的动态处理</td>\r\n        <td><a href=\"spring-interface/spring-interface-mergedBeanDefinitionPostProcessor/README.md\">MergedBeanDefinitionPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>调整Bean实例化策略</td>\r\n        <td><a href=\"spring-interface/spring-interface-smartInstantiationAwareBeanPostProcessor/README.md\">SmartInstantiationAwareBeanPostProcessor</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>All Beans完全初始化后</td>\r\n        <td><a href=\"spring-interface/spring-interface-smartInitializingSingleton/README.md\">SmartInitializingSingleton</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【Aware接口】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>获取Bean名称</td>\r\n        <td><a href=\"spring-aware/spring-aware-beanNameAware/README.md\">BeanNameAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>获取类加载器</td>\r\n        <td><a href=\"spring-aware/spring-aware-beanClassLoaderAware/README.md\">BeanClassLoaderAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>与Bean工厂互动</td>\r\n        <td><a href=\"spring-aware/spring-aware-beanFactoryAware/README.md\">BeanFactoryAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>感知运行环境</td>\r\n        <td><a href=\"spring-aware/spring-aware-environmentAware/README.md\">EnvironmentAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>嵌入值解析</td>\r\n        <td><a href=\"spring-aware/spring-aware-embeddedValueResolverAware/README.md\">EmbeddedValueResolverAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>资源加载策略</td>\r\n        <td><a href=\"spring-aware/spring-aware-resourceLoaderAware/README.md\">ResourceLoaderAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>发布应用事件</td>\r\n        <td><a href=\"spring-aware/spring-aware-applicationEventPublisherAware/README.md\">ApplicationEventPublisherAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>访问消息源</td>\r\n        <td><a href=\"spring-aware/spring-aware-messageSourceAware/README.md\">MessageSourceAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>感知应用启动过程</td>\r\n        <td><a href=\"spring-aware/spring-aware-applicationStartupAware/README.md\">ApplicationStartupAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>访问应用上下文</td>\r\n        <td><a href=\"spring-aware/spring-aware-applicationContextAware/README.md\">ApplicationContextAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>了解关联导入信息</td>\r\n        <td><a href=\"spring-aware/spring-aware-importAware/README.md\">ImportAware</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E4%B8%80%E8%88%AC-blue\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td><strong>【核心注解】</strong></td>\r\n        <td colspan=\"3\"></td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Java配置</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-configuration/README.md\">@Configuration</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>组件扫描</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-componentScan/README.md\">@ComponentScan</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>Bean定义</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-bean/README.md\">@Bean</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>导入配置</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-import/README.md\">@Import</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>属性绑定</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-propertySource/README.md\">@PropertySource</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>初始化顺序</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-dependsOn/README.md\">@DependsOn</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>条件注册</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-conditional/README.md\">@Conditional</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>延迟加载</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-lazy/README.md\">@Lazy</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>属性注入</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-value/README.md\">@Value</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>依赖注入</td>\r\n        <td><a href=\"spring-annotation/spring-annotation-autowired/README.md\">@Autowired</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>注入依赖</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-inject/README.md\">@Inject</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>具名组件</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-named/README.md\">@Named</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>初始化后操作</td>\r\n        <td><a href=\"spring-jsr/spring-jsr250-postConstruct/README.md\">@PostConstruct</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>销毁前操作</td>\r\n        <td><a href=\"spring-jsr/spring-jsr250-preDestroy/README.md\">@PreDestroy</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>资源绑定</td>\r\n        <td><a href=\"spring-jsr/spring-jsr250-resource/README.md\">@Resource</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>提供者机制</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-provider/README.md\">Provider</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>限定符</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-qualifier/README.md\">@Qualifier</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>作用域定义</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-scope/README.md\">@Scope</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>单例模式</td>\r\n        <td><a href=\"spring-jsr/spring-jsr330-singleton/README.md\">@Singleton</a></td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>定义主要候选项</td>\r\n        <td>@Primary</td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>添加描述信息</td>\r\n        <td>@Description</td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>指定注解角色</td>\r\n        <td>@Role</td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>标记为可索引</td>\r\n        <td>@Indexed</td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n    <tr align=\"center\">\r\n        <td>指定顺序</td>\r\n        <td>@Order</td>\r\n        <td><img src=\"https://img.shields.io/badge/Level-%E5%9B%B0%E9%9A%BE-orange\"/></td>\r\n        <td>❌</td>\r\n    </tr>\r\n</table>"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.181640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <groupId>com.xcs.spring</groupId>\n    <artifactId>spring-reading</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-reading</name>\n    <description>spring-reading</description>\n\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n        <spring.version>5.2.15.RELEASE</spring.version>\n        <mysql.version>8.0.30</mysql.version>\n        <spring.boot.version>2.3.12.RELEASE</spring.boot.version>\n    </properties>\n\n    <modules>\n        <module>spring-annotation</module>\n        <module>spring-aware</module>\n        <module>spring-interface</module>\n        <module>spring-jsr</module>\n        <module>spring-core</module>\n        <module>spring-aop</module>\n        <module>spring-mvc</module>\n        <module>spring-resources</module>\n        <module>spring-metadata</module>\n        <module>spring-beans</module>\n        <module>spring-context</module>\n        <module>spring-factory</module>\n        <module>spring-env</module>\n        <module>spring-dataops</module>\n        <module>spring-spel</module>\n        <module>spring-transaction</module>\n    </modules>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>${spring.boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n            <version>${spring.boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n            <version>${spring.boot.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>\n"
        },
        {
          "name": "spring-annotation",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-aop",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-aware",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-beans",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-context",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-dataops",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-env",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-interface",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-jsr",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-mvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-spel",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-transaction",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}