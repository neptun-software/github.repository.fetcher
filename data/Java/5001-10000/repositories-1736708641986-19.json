{
  "metadata": {
    "timestamp": 1736708641986,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koral--/android-gif-drawable",
      "stars": 9572,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2275390625,
          "content": "# Java class files\n*.class\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n#IntelliJ IDEA\n.idea\n*.iml\n\n#Gradle\n.gradle\nbuild\n\nsigning.properties\n\n.externalNativeBuild/\n# Project exclude paths\n/android-gif-drawable/.cxx/"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.98828125,
          "content": "#### 1.2.29\n- 2024-07-10 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.28...v1.2.29)\n- Update NDK to 26.3.11579264\n- Use Java 21 for building\n- Update Android Gradle plugin to 8.5.0\n- Minimum SDK version increased to 21\n- Add binary compatibility check\n- Add support 16 KB page sizes for Android 15, fixes [(#846)](https://github. com/koral--/android-gif-drawable/pull/846)\n\n#### 1.2.28\n- 2023-08-29 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.27...v1.2.28)\n- Remove check for > 1 frame when seeking, fixes [(#830)](https://github.com/koral--/android-gif-drawable/pull/830), thanks @hgourvest for reporting\n- Update dependency versions\n- Update Android Gradle plugin to 8.1.1\n\n#### 1.2.27\n- 2023-07-03 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.26...v1.2.27)\n- Revert java to 1.8, fixes [(#826)](https://github.com/koral--/android-gif-drawable/pull/826), thanks @droplet-js for reporting\n\n#### 1.2.26\n- 2023-06-30 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.25...v1.2.26)\n- Update dependency versions\n- Update NDK to 25.2.9519653\n- Update Android Gradle plugin to 8.0.2\n- Use Java 17 for building\n- Switch to upstream ReLinker and update to 1.4.5\n- Update compile and target SDK to 33\n\n#### 1.2.25\n- 2022-08-18 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.24...v1.2.25)\n- Fix sample size not taken into account [(#797)](https://github.com/koral--/android-gif-drawable/pull/797) [(#798)](https://github.com/koral--/android-gif-drawable/pull/798)\n- Stop further decoding on error [(#801)](https://github.com/koral--/android-gif-drawable/pull/801)\n- Clear GifTextureView when removing source [(#745)](https://github.com/koral--/android-gif-drawable/pull/745)\n- Fix negative current position [(#657)](https://github.com/koral--/android-gif-drawable/pull/657)\n\n#### 1.2.24\n- 2022-01-17 - [commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.23...v1.2.24)\n- Limit comment maximum length [(#766)](https://github.com/koral--/android-gif-drawable/pull/766)\n- Update dependency versions\n- Update compile and target SDK to 31\n\n<sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n\n#### 1.2.23\n - 2021-03-08 - [1 commit](https://github.com/koral--/android-gif-drawable/compare/v1.2.22...v1.2.23) by [Dwaipayan Munshi](https://github.com/dwaipayan05) - published to [![Bintray](https://img.shields.io/badge/Bintray-1.2.23-green.svg)](https://bintray.com/koral/maven/pl.droidsonroids.gif:android-gif-drawable/1.2.23)\n - Updated Latest Version of gif-drawable in Readme.md [(#765)](https://github.com/koral--/android-gif-drawable/pull/765)\n\n#### 1.2.22\n - 2021-02-03 - [2 commits](https://github.com/koral--/android-gif-drawable/compare/v1.2.21...v1.2.22) by [Karol Wrótniak](https://github.com/koral--) - published to [![Bintray](https://img.shields.io/badge/Bintray-1.2.22-green.svg)](https://bintray.com/koral/maven/pl.droidsonroids.gif:android-gif-drawable/1.2.22)\n - Maintenance [(#749)](https://github.com/koral--/android-gif-drawable/pull/749)\n - have you any plan about new version giflib? like usage of realloc() in case of failure [(#743)](https://github.com/koral--/android-gif-drawable/issues/743)\n\n#### 1.2.21\n - 2020-08-26 - [1 commit](https://github.com/koral--/android-gif-drawable/compare/v1.2.20...v1.2.21) by [默默](https://github.com/wangqiang1588) - published to [![Bintray](https://img.shields.io/badge/Bintray-1.2.21-green.svg)](https://bintray.com/koral/maven/pl.droidsonroids.gif:android-gif-drawable/1.2.21)\n - fix bug \"Abort message: 'attempted to close file descriptor 165, expe… [(#747)](https://github.com/koral--/android-gif-drawable/pull/747)\n\n#### 1.2.20\n - Update NDK version to 21 [(#734)](https://github.com/koral--/android-gif-drawable/pull/734)\n - Fix artifacts when disposal to previous frame method is used\n - Revert \"Let's clear rasterBits if failed to read frame's header.\" and… [(#714)](https://github.com/koral--/android-gif-drawable/pull/714)\n\n\n### 1.2.19\n- Fix out of bounds read/write in gif decoding - [#697](https://github.com/koral--/android-gif-drawable/issue/697)\n\n### 1.2.18\n- Add AndroidX annotations warnings supperssion - [#671](https://github.com/koral--/android-gif-drawable/issue/671)\n- Use relocated ReLinker - [#665](https://github.com/koral--/android-gif-drawable/issues/665)\n- Fix double free on 0-sized images - [#673](https://github.com/koral--/android-gif-drawable/pull/673)\n- Fix heap corruption caused by malformed images - [#678](https://github.com/koral--/android-gif-drawable/pull/678)\n- Do not give up when image contains unknown record type - [#667](https://github.com/koral--/android-gif-drawable/issues/667)\n- Gradle wrapper regenerated with 5.6.2\n- Android Gradle plugin updated to 3.5.0\n\n### 1.2.17\n- Built-in ReLinker part replaced with complete ReLinker 1.3.1 - [#636](https://github.com/koral--/android-gif-drawable/issue/636)\n- Android Gradle plugin updated to 3.4.1\n- Gradle wrapper regenerated with 5.4.1\n\n### 1.2.16\n- Fixed setting color drawable from Java code - [#606](https://github.com/koral--/android-gif-drawable/issue/606)\n- Fixed extraneous file descriptor closing - [#600](https://github.com/koral--/android-gif-drawable/issue/600)\n- Fixed missing null check for NewGlobalRef - [#594](https://github.com/koral--/android-gif-drawable/issue/594)\n- Fixed missing free of info buffer - [#595](https://github.com/koral--/android-gif-drawable/issue/595)\n- Android Gradle plugin updated to 3.2.1\n- Gradle wrapper regenerated with 4.10.2\n- NDK updated to r18, minimum API level increased to 17\n\n### 1.2.15\n- Fix VerifyError on API level older than Lollipop - [#570](https://github.com/koral--/android-gif-drawable/issue/570)\n- Gradle wrapper regenerated with 4.9\n\n### 1.2.14\n- Fix release packaging\n\n### 1.2.13\n- Kotlin updated to 1.2.51\n- Compile and target SDK version updated to 28\n- Android Support library updated to 27.1.1\n- Android Gradle plugin updated to 3.1.3\n- Gradle wrapper regenerated with 4.8.1\n- Removed private FileDescriptor field usage on Android P and above\n- Added explicit FileDescriptor closing\n- Removed unused code in LibraryLoader\n- Dropped MIPS and MIPS64 targets\n- Added support for NDK r17 and newer (with optional armeabi target built using NDK < r17)\n- Fixed possible race conditions in GifTexImage2D \n\n### 1.2.12\n- `GifDrawable` invalidation fixed - [#510](https://github.com/koral--/android-gif-drawable/issue/510)\n- SIGILL on arm CPUs without NEON fixed - [#522](https://github.com/koral--/android-gif-drawable/issue/522)\n- Gradle wrapper regenerated with 4.6\n- Kotlin updated to 1.2.30\n- Android Support library updated to 27.1.0\n\n### 1.2.11\n- Gradle wrapper regenerated with 4.5.1\n- Kotlin updated to 1.2.21\n- Added `GifTexImage2D#getCurrentFrameIndex()` - [#506](https://github.com/koral--/android-gif-drawable/pull/506)\n\n### 1.2.10\n- Gradle wrapper regenerated with 4.4.1\n- `armeabi` and `mips` family targets restored - [#494](https://github.com/koral--/android-gif-drawable/pull/494)\n\n### 1.2.9\n- Android Support library updated to 27.0.2\n- Android gradle plugin updated to 3.0.1\n- Kotlin updated to 1.2.10\n- Gradle wrapper regenerated with 4.4\n- Build tools updated to 27.0.2\n- Minimum SDK version increased to 14\n- Improved bound passing to transforms - [#450](https://github.com/koral--/android-gif-drawable/pull/450)\n- Add compound drawables animation start when `GifTextView` attached to window - [#474](https://github.com/koral--/android-gif-drawable/pull/474)\n\n### 1.2.8\n- `app:loopCount` XML attribute added to `GifImageView`, `GifImageButton`, `GifTextView` and `GifTextureView` - [#176](https://github.com/koral--/android-gif-drawable/issues/176)\n- Added `mipmap` resources support in XML attributes of `GifTextView`\n- Robolectric updated to 3.4\n- Fixed segmentation fault for GIFs with 0-sized block in application extension - [#433](https://github.com/koral--/android-gif-drawable/pull/433) \n- Fixed Loop count interpretation - [#430](https://github.com/koral--/android-gif-drawable/pull/430) \n- Fixed direct byte buffer input source handling - [#434](https://github.com/koral--/android-gif-drawable/issues/434) \n- Fixed changing input source in `GifTextureView` - [#429](https://github.com/koral--/android-gif-drawable/issues/429) \n- Fixed InputStream reading - [#442](https://github.com/koral--/android-gif-drawable/pull/442) \n- Android Support library updated to 26.0.1\n- Android gradle plugin updated to 2.3.3\n- Gradle wrapper regenerated with 4.1\n- NDK version updated to r15c\n- Mockito updated to 2.7.48\n- Build tools updated to 26.0.1\n\n### 1.2.7\n- `GifDrawable` subclassing simplified - [#399](https://github.com/koral--/android-gif-drawable/pull/399)\n- Malformed input support improved - [#394](https://github.com/koral--/android-gif-drawable/issues/394)\n- `GifTextureView` animation freezing fixed - [#392](https://github.com/koral--/android-gif-drawable/issues/392)\n- Android Support library updated to 25.3.1\n- Android gradle plugin updated to 2.3.1\n- Gradle wrapper regenerated with 3.5\n- Mockito updated to 2.7.22\n- Robolectric updated to 3.3.2\n\n### 1.2.6\n- Native build system changed to cmake, fixes unnecessary removed actions - [#389](https://github.com/koral--/android-gif-drawable/issues/389)\n- JNI method ids obtaining fixed - [#391](https://github.com/koral--/android-gif-drawable/issues/391)\n- Fixed source InputStream closing on recycle\n- Added `GifTexImage2D#getDuration()`   \n- Robolectric updated to 3.3.1\n- Assertj updated to 3.6.2\n- Mockito updated to 2.7.15\n- Gradle wrapper regenerated with 3.4.1\n- Support library dependency version updated to 25.2.0\n\n### 1.2.5\n- Unneeded debugging symbols removed, fixes - [#383](https://github.com/koral--/android-gif-drawable/issues/383)\n- Fixed loading native library for additional ABIs on API level < 21 - [#379](https://github.com/koral--/android-gif-drawable/issues/379)\n- Robolectric updated to 3.2.2\n- Mockito updated to 2.7.0\n- Gradle wrapper regenerated with 3.3\n- Support library dependency version updated to 25.1.1\n\n### 1.2.4\n- Added errno text to GifIOException messages, fixes - [#340](https://github.com/koral--/android-gif-drawable/issues/340)\n- Added missing file descriptor closing in case of open fail\n- Support library dependency version updated to 25.1.0\n- Gradle wrapper updated to 3.3\n- Mockito updated to 2.5.5\n- mockwebserver updated to 3.5.0\n- Build tools version updated to 25.0.2\n- fixed clearing canvas with background color\n\n### 1.2.3\n- Support library dependency version updated to 25.0.0\n- Android gradle plugin updated to 2.2.2\n- custom NDK buildscript replaced with `externalNativeBuild`\n- Gradle wrapper updated to 3.1\n- Build tools version updated to 25\n- compile and target SDK versions bumped to 25\n- NDK version updated to 13b\n- native code optimizations\n- fixed `GifDrawable#getAllocationByteCount()` to return value consistent with docs (taking optional dispose to previous into account)\n- added `GifDrawable#getMetadataByteCount()` - [#348](https://github.com/koral--/android-gif-drawable/issues/348)\n- added `GifAnimationMetadata#getMetadataByteCount()` - [#342](https://github.com/koral--/android-gif-drawable/issues/342#issuecomment-252519140)\n- added `GifAnimationMetadata#getDrawableAllocationByteCount()` - [#342](https://github.com/koral--/android-gif-drawable/issues/342#issuecomment-252519140)\n\n### 1.2.2\n- Fixed NPE in `GifTexImage2D` finalizer when constructor threw an exception\n- GifLib error code propagation fixed\n \n### 1.2.1\n- Build tools version updated to 24.0.2\n- Support library dependency version updated to 24.2.0\n- `GifTexImage2D` releasing race condition fixed\n\n### 1.2.0\n- Native libraries joined into one file - reduced complexity, minimum API level increased to 9\n- Disposal first frame to previous treated as disposal to background instead of ignoring - [#330](https://github.com/koral--/android-gif-drawable/issues/330)\n- Robolectric version updated to 3.1.2\n- Mutexes and conditional variables initialization and destroying error checking fixed \n- Gradle wrapper updated to 2.14.1\n- Build tools version updated to 24.0.1\n- Support library dependency version updated to 24.1.1\n- `LibraryLoader` visibility fixed - [#333](https://github.com/koral--/android-gif-drawable/issues/333)\n- Android gradle plugin updated to 2.1.3\n\n### 1.1.17\n- Mutex destroying in `GifTexImage2D` fixed \n- Erroneous `GifDrawableBuilder#options()` argument modification after calling `GifDrawableBuilder#sampleSize()` fixed\n- Javadoc improvements\n- Added passing opacity hint from `GifOptions` to `Bitmap` (framebuffer) in `GifDrawable`\n- Default GCB reworked - fixes possible artifacts - [#305](https://github.com/koral--/android-gif-drawable/issues/305)\n- Android gradle plugin updated to 2.1.2\n- Gradle wrapper updated to 2.14\n- Tearing in `GifTexImage2D` fixed\n- Compile SDK version updated to 24\n- Build tools version updated to 24\n\n### 1.1.16\n- Saved state which is not instance of `GifViewSavedState` allowed by all the Gif*Views - [#303](https://github.com/koral--/android-gif-drawable/issues/303)\n- `GifOptions` added introducing subsampling and opacity controlling in `GifDrawable`, `GifTexImage2D` and `GifDecoder`\n- Fixed segmentation fault when decoding oversized frames - [#290](https://github.com/koral--/android-gif-drawable/pull/290)\n- Native window redraw narrowed to dirty region only - [#287](https://github.com/koral--/android-gif-drawable/issues/287#issuecomment-215517405)  \n- `View#invalidate()` support added to `MultiCallback` - [#260](https://github.com/koral--/android-gif-drawable/issues/260#issuecomment-201949696)\n- `glTexSubImage2D()` support added to `GifTexImage2D` - [#288](https://github.com/koral--/android-gif-drawable/pull/288)\n- Support library dependency version updated to 23.4.0\n- Build tools version updated to 23.0.3\n- Android gradle plugin updated to 2.1.0\n- Gradle wrapper version updated to 2.13\n\n### 1.1.15\n- Fixed possible infinite surface binding\n- Added beta OpenGL support - `GifTexImage2D`\n- Added ability to specify a custom transformation to apply to the current Bitmap - [#259](https://github.com/koral--/android-gif-drawable/pull/259)\n- Gradle wrapper version updated to 2.12\n- Support library dependency version updated to 23.2.1\n- remainder accounting in `GifDrawable#getCurrentPosition()` fixed\n\n### 1.1.14\n- Gradle wrapper version updated to 2.11\n- Duplicated frame offset correction removed\n- Subsampling added - [#239](https://github.com/koral--/android-gif-drawable/issues/239)\n- Width, height and number of frames storage in recycled objects removed\n- Native code cleanup\n- Support library dependency version updated to 23.2.0\n\n### 1.1.13\n- Fixed regression (heap corruption if frame size is lower than canvas size) - [#250](https://github.com/koral--/android-gif-drawable/issues/250)\n\n### 1.1.12\n- Added `mipmap` resources support in XML attributes\n- ReLinker code cleanup\n- Gradle wrapper version updated to 2.10\n- Fixed ANR on disposing `GifTextureView` - [#240](https://github.com/koral--/android-gif-drawable/issues/240)\n- Added `GifDecoder` for access GIF frames without `Drawable` or `View` - [#206](https://github.com/koral--/android-gif-drawable/issues/206)\n- Upstream changes from GIFLib 5.1.2 integrated\n- Fixed `ZipFile` closing on API level < 19 - [#244](https://github.com/koral--/android-gif-drawable/issues/244)\n- Invalid offsets handling fixed to prevent OOMEs - [#243](https://github.com/koral--/android-gif-drawable/issues/243) \n\n### 1.1.11\n- `MultiCallback` now accepts `Drawable.Callback`s, not only `View`s\n- `UnsatisfiedLinkError` worked around - [#51](https://github.com/koral--/android-gif-drawable/issues/51)\n- Support library dependency version updated to 23.1.1\n- Build tools version updated to 23.0.2\n- Android gradle plugin updated to 1.5.0\n- Gradle wrapper version updated to 2.9\n\n### 1.1.10\n- Gradle wrapper version updated to 2.7\n- Build tools updated to 23.0.1\n- Android gradle plugin updated to 1.3.1\n- Support library dependency version updated to 23.0.1\n- compileSdkVersion updated to 23\n- density is now taken into consideration when constructing `GifDrawable` from Resources - [#181](https://github.com/koral--/android-gif-drawable/issues/181)\n- animation restarting fixed - [#208](https://github.com/koral--/android-gif-drawable/issues/208), [#209](https://github.com/koral--/android-gif-drawable/issues/209)\n- `GifTextureView` memory usage optimizations\n- native code cleaning\n- loopNumber parameter added to `AnimationListener#onAnimationCompleted()` - fixes [#204](https://github.com/koral--/android-gif-drawable/issues/204)\n- rounded corners support added - [#202](https://github.com/koral--/android-gif-drawable/issues/202)\n\n### 1.1.9\n- Proguard configuration is now bundled with the library - [#193](https://github.com/koral--/android-gif-drawable/pull/193)\n- Android gradle plugin updated to 1.3.0\n- fixed segfault when frame is not confined to canvas - [#196](https://github.com/koral--/android-gif-drawable/issues/196), [#194](https://github.com/koral--/android-gif-drawable/issues/194)\n- fixed relationship between drawable visibility and animation state - [#195](https://github.com/koral--/android-gif-drawable/issues/195)\n\n### 1.1.8\n- toolchain changed to clang\n- `InputStream` source reading optimization\n- fixed support for API level 8 - [#173](https://github.com/koral--/android-gif-drawable/issues/173)\n- fixed seeking in paused state - [#180](https://github.com/koral--/android-gif-drawable/issues/180)\n- added missing default frame duration - [#186](https://github.com/koral--/android-gif-drawable/issues/186)\n- Gradle wrapper version updated to 2.5\n- support annotations version updated to 22.2.1\n\n### 1.1.7\n- fixed warning about attaching nameless thread on ART\n- support annotations version updated to 22.1.1\n- Android gradle plugin updated to 1.2.3\n- fixed NPE when `GifTextureView` is constructed without attributes\n- fixed background artifacts - [#167](https://github.com/koral--/android-gif-drawable/issues/167)\n- single drawable assigned to multiple views support added (`MultiCallback`)\n- NDK version updated to r10e\n- `GifDrawable#setLoopCount()` added\n- fixed firing `AnimationListener#onAnimationCompleted()`\n- Gradle wrapper version updated to 2.4\n\nUpdates also contain documentation updates, typofixes, and trivial code clean-ups.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.8056640625,
          "content": "MIT License\nCopyright (c) 2013 - present Karol Wrótniak, Droids on Roids LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nSKIA:\n// Copyright (c) 2011 Google Inc. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nGIFLIB:\nThe GIFLIB distribution is Copyright (c) 1997  Eric S. Raymond\n\nReLinker:\nCopyright 2015 KeepSafe Software, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nmemset.arm.S:\nCopyright (C) 2010 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.1279296875,
          "content": "![horizontal.png](https://cdn.steemitimages.com/DQmacEdVnEf1f2GDZ4uga1evN3FzujdR4zbkqmiV7NscPBs/horizontal.png)\n====================\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gif/android-gif-drawable/badge.svg)](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gif/android-gif-drawable)\n[![Build Status](https://app.bitrise.io/app/78fd40a5596e97e7/status.svg?token=SMUtlPklcIRBODd513ZdiQ)](https://app.bitrise.io/app/78fd40a5596e97e7)\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-android--gif--drawable-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1147)\n[![Android-Libs](https://img.shields.io/badge/Android--Libs-android--gif--drawable-orange.svg?style=flat)](http://android-libs.com/lib/android-gif-drawable)\n[![Android Weekly](http://img.shields.io/badge/Android%20Weekly-%2393-2CB3E5.svg?style=flat)](http://androidweekly.net/issues/issue-93)\n[![API](https://img.shields.io/badge/API-17%2B-blue.svg?style=flat)](https://android-arsenal.com/api?level=17)\n[![Javadocs](http://www.javadoc.io/badge/pl.droidsonroids.gif/android-gif-drawable.svg)](http://www.javadoc.io/doc/pl.droidsonroids.gif/android-gif-drawable)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/koral--/android-gif-drawable/badge)](https://api.securityscorecards.dev/projects/github.com/koral--/android-gif-drawable)\n\n`View`s and `Drawable` for animated GIFs in Android.\n\n## Overview\nBundled GIFLib via JNI is used to render frames. This way should be more efficient than `WebView` or `Movie` classes.\n\n### [Javadoc](http://www.javadoc.io/doc/pl.droidsonroids.gif/android-gif-drawable)\n\n### Setup\n\n#### Gradle (Android Studio)\nInsert the following dependency to `build.gradle` file of your project.\n```groovy\ndependencies {\n    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.29'\n}\n```\nNote that Maven central repository should be defined eg. in top-level `build.gradle` like this:\n```groovy \nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n}\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n#### Gradle, snapshot repository\nCurrent development builds (build from `dev` branch) are published to OSS snapshot repository. To use them, specify repository URL in `repositories` block:\n```groovy\nrepositories {\n    mavenCentral()\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\n}\ndependencies {\n    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.+'\n}\n```\n#### Maven dependency\n\n```xml\n<dependency>\n    <groupId>pl.droidsonroids.gif</groupId>\n    <artifactId>android-gif-drawable</artifactId>\n    <version>insert latest version here</version>\n    <type>aar</type>\n</dependency>\n```\n#### Eclipse\nSee [Sample eclipse project](https://github.com/koral--/android-gif-drawable-eclipse-sample) with setup instructions.\n\n#### Download\n\n**[Latest release downloads](https://github.com/koral--/android-gif-drawable/releases/latest)**\n\n### Requirements\n+ Android 4.2+ (API level 17+)\n+ for `GifTextureView` hardware-accelerated rendering\n+ for `GifTexImage2D` OpenGL ES 2.0+\n\n#### Building from source\n+ [Android NDK](http://developer.android.com/tools/sdk/ndk/index.html) needed to compile native sources\n\n## Usage\n\n### Sample project\nSee `sample` directory. Sample project is under construction. Not all features are covered yet.\n\n### From XML\nThe simplest way is to use `GifImageView` (or `GifImageButton`) like a normal `ImageView`:\n```xml\n<pl.droidsonroids.gif.GifImageView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:src=\"@drawable/src_anim\"\n    android:background=\"@drawable/bg_anim\"\n    />\n```\n\nIf drawables declared by `android:src` and/or `android:background` are GIF files then they \nwill be automatically recognized as `GifDrawable`s and animated. If given drawable is not a GIF then\nmentioned Views work like plain `ImageView` and `ImageButton`.\n\n`GifTextView` allows you to use GIFs as compound drawables and background.\n```xml\n<pl.droidsonroids.gif.GifTextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:drawableTop=\"@drawable/left_anim\"\n    android:drawableStart=\"@drawable/left_anim\"\n    android:background=\"@drawable/bg_anim\"\n    />\n```\n\n### From Java code\n`GifImageView`, `GifImageButton` and `GifTextView` have also hooks for setters implemented. So animated GIFs can be set by calling `setImageResource(int resId)` and `setBackgroundResource(int resId)`\n\n`GifDrawable` can be constructed directly from various sources:\n\n```java\n//asset file\nGifDrawable gifFromAssets = new GifDrawable( getAssets(), \"anim.gif\" );\n\t\t\n//resource (drawable or raw)\nGifDrawable gifFromResource = new GifDrawable( getResources(), R.drawable.anim );\n\t\t\n//Uri\nContentResolver contentResolver = ... //can be null for file:// Uris\nGifDrawable gifFromUri = new GifDrawable( contentResolver, gifUri );\n\n//byte array\nbyte[] rawGifBytes = ...\nGifDrawable gifFromBytes = new GifDrawable( rawGifBytes );\n\t\t\n//FileDescriptor\nFileDescriptor fd = new RandomAccessFile( \"/path/anim.gif\", \"r\" ).getFD();\nGifDrawable gifFromFd = new GifDrawable( fd );\n\t\t\n//file path\nGifDrawable gifFromPath = new GifDrawable( \"/path/anim.gif\" );\n\t\t\n//file\nFile gifFile = new File(getFilesDir(),\"anim.gif\");\nGifDrawable gifFromFile = new GifDrawable(gifFile);\n\t\t\n//AssetFileDescriptor\nAssetFileDescriptor afd = getAssets().openFd( \"anim.gif\" );\nGifDrawable gifFromAfd = new GifDrawable( afd );\n\t\t\t\t\n//InputStream (it must support marking)\nInputStream sourceIs = ...\nBufferedInputStream bis = new BufferedInputStream( sourceIs, GIF_LENGTH );\nGifDrawable gifFromStream = new GifDrawable( bis );\n\t\t\n//direct ByteBuffer\nByteBuffer rawGifBytes = ...\nGifDrawable gifFromBytes = new GifDrawable( rawGifBytes );\t\n````\nInputStreams are closed automatically in finalizer if GifDrawable is no longer needed \nso you don't need to explicitly close them. Calling `recycle()` will also close \nunderlying input source. \n\nNote that all input sources need to have ability to rewind to the beginning. It is required to correctly play animated GIFs \n(where animation is repeatable) since subsequent frames are decoded on demand from source.\n\n#### Animation control\n`GifDrawable` implements an `Animatable` and `MediaPlayerControl` so you can use its methods and more:\n\n+ `stop()` - stops the animation, can be called from any thread\n+ `start()` - starts the animation, can be called from any thread\n+ `isRunning()` - returns whether animation is currently running or not\n+ `reset()` - rewinds the animation, does not restart stopped one\n+ `setSpeed(float factor)` - sets new animation speed factor, eg. passing 2.0f will double the animation speed\n+ `seekTo(int position)` - seeks animation (within current loop) to given `position` (in milliseconds)\n+ `getDuration()` - returns duration of one loop of the animation\n+ `getCurrentPosition()` - returns elapsed time from the beginning of a current loop of animation\n\n##### Using [MediaPlayerControl](http://developer.android.com/reference/android/widget/MediaController.MediaPlayerControl.html)\nStandard controls for a MediaPlayer (like in [VideoView](http://developer.android.com/reference/android/widget/VideoView.html)) can be used to control GIF animation and show its current progress.\n\nJust set `GifDrawable` as MediaPlayer on your [MediaController](http://developer.android.com/reference/android/widget/MediaController.html) like this:\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    GifImageButton gib = new GifImageButton(this);\n    setContentView(gib);\n    gib.setImageResource(R.drawable.sample);\n    final MediaController mc = new MediaController(this);\n    mc.setMediaPlayer((GifDrawable) gib.getDrawable());\n    mc.setAnchorView(gib);\n    gib.setOnClickListener(new OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            mc.show();\n        }\n   });\n}\n```\n\n#### Retrieving GIF metadata\n\n+ `getLoopCount()` - returns a loop count as defined in `NETSCAPE 2.0` extension\n+ `getNumberOfFrames()` - returns number of frames (at least 1)\n+ `getComment()` - returns comment text (`null` if GIF has no comment)\n+ `getFrameByteCount()` - returns minimum number of bytes that can be used to store pixels of the single frame\n+ `getAllocationByteCount()` - returns size (in bytes) of the allocated memory used to store pixels of given GifDrawable\n+ `getInputSourceByteCount()` - returns length (in bytes) of the backing input data\n+ `toString()` - returns human readable information about image size and number of frames (intended for debugging purpose)\n\n#### Associating single `GifDrawable` instance with multiple `View`s\n\nNormally single `GifDrawable` instance associated with multiple `View`s will animate only on the last one.\nTo solve that create `MultiCallback` instance, add `View`s to it and set callback for given drawable, e.g.:\n```java\nMultiCallback multiCallback = new MultiCallback();\n\nimageView.setImageDrawable(gifDrawable);\nmultiCallback.addView(imageView);\n\nanotherImageView.setImageDrawable(gifDrawable);\nmultiCallback.addView(anotherImageView);\n\ngifDrawable.setCallback(multiCallback);\n```\n\nNote that if you change a drawable of e.g. `ImageView`, the callback will be removed from the previous\ndrawable. Thereafter, you have to reassign callback or the same `GifDrawable` instance will stop animating. \nSee [#480](https://github.com/koral--/android-gif-drawable/issues/480) for more information.\n\n#### Advanced\n \n+ `recycle()` - provided to speed up freeing memory (like in `android.graphics.Bitmap`)\n+ `isRecycled()` - checks whether drawable is recycled\n+ `getError()` - returns last error details\n\n## Upgrading from 1.2.15\n#### Minimum SDK version changed\nMinimum API level is now 17 (Android 4.2).\n`armeabi` (arm v5 and v6) is no longer supported. \n\n## Upgrading from 1.2.8\n#### Minimum SDK version changed\nMinimum API level is now 14 (Android 4.0).\n\n## Upgrading from 1.2.3\nMeaningful only if consumer proguard rules (bundled with library) are **not** used (they are used by default by Gradle).\n+ Proguard rule has changed to `-keep public class pl.droidsonroids.gif.GifIOException{<init>(int, java.lang.String);}` \n\n## Upgrading from 1.1.17\n1.1.17 is the last version supporting API level 8 (Froyo). Starting from 1.2.0 minimum API level is 9 (Gingerbread).\n\n## Upgrading from 1.1.13\nHandling of several edge cases has been changed:\n+ `GifDrawable#getNumberOfFrames()` now returns 0 when `GifDrawable` is recycled\n+ Information included in result of `GifDrawable#toString()` when `GifDrawable` is recycled now contains zeroes only\n\n## Upgrading from 1.1.10\nIt is recommended (but not required) to call `LibraryLoader.initialize()` before using `GifDrawable`. `Context` is needed in some cases\nwhen native libraries cannot be extracted normally. See [ReLinker](https://medium.com/keepsafe-engineering/the-perils-of-loading-native-libraries-on-android-befa49dce2db)\nfor more details. \nIf `LibraryLoader.initialize()` was not called and normal library loading fails, `Context` will be tried to be retrieved in fall back way which may not always work.   \n\n## Upgrading from 1.1.9\n`int` parameter `loopNumber` has been added to `AnimationListener#onAnimationCompleted()`.\n\n## Upgrading from 1.1.8\n#### Proguard configuration not needed\nProguard configuration is now bundled with the library, you don't need to specify it yourself.\n\n## Upgrading from 1.1.3\n`src` XML attribute in `GifTextureView` has been renamed to `gifSource` to avoid possible conflicts with other libraries.\n\n## Upgrading from 1.0.x\n#### Proguard configuration update\nProguard configuration has changed to:\n```\n-keep public class pl.droidsonroids.gif.GifIOException{<init>(int);}\n-keep class pl.droidsonroids.gif.GifInfoHandle{<init>(long,int,int,int);}\n```\n\n#### Drawable recycling behavior change\n`GifDrawable` now uses `android.graphics.Bitmap` as frame buffer. Trying to access pixels (including drawing)\n of recycled `GifDrawable` will cause `IllegalStateException` like in `Bitmap`.\n\n#### Minimum SDK version changed\nMinimum API level is now 8 (Android 2.2).\n\n#### Rendering moved to background thread\nRendering is performed in background thread running independently from main thread so animation is running\neven if drawable is not drawn. However rendering is not running if drawable is not visible, see [#setVisible()](http://developer.android.com/reference/android/graphics/drawable/Drawable.html#setVisible(boolean, boolean)).\nThat method can be used to control drawable visibility in cases when it is not already handled by Android framework.\n\n## References\nThis library uses code from [GIFLib](http://giflib.sourceforge.net/) 5.1.3 and [SKIA](https://code.google.com/p/skia/).\n\n### Projects using android-gif-drawable\n[ImageFactory](https://github.com/Doctoror/ImageFactory)\n\n[NativeScript Plugin by Brad Martin](https://github.com/bradmartin/nativescript-gif) available on [NPM](https://www.npmjs.com/package/nativescript-gif)\n\n[Sketch](https://github.com/xiaopansky/Sketch) Powerful and comprehensive image loader on Android, with support for GIF, gesture zooming, block display super large image.\n\nWant to include your project here? [Fill an issue](https://github.com/koral--/android-gif-drawable/issues/new)\n\n## License\n\nMIT License<br>\nSee [LICENSE](LICENSE) file.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.306640625,
          "content": "# Security Policy\n\n## Supported Versions\n\nIf a security issue occurs, only the latest version is guaranteed to be patched.\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "android-gif-drawable",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.8662109375,
          "content": "buildscript {\n    ext {\n        versions = [\n                compileSdk         : 34,\n                targetSdk          : 34,\n                minSdk             : 21,\n                ndk                : '26.3.11579264',\n                androidxAppcompat  : '1.7.0',\n                lifecycle          : '2.8.3',\n                androidxAnnotations: '1.6.0',\n                androidxTest       : '1.6.1',\n                androidxTestRunner : '1.6.1',\n                coroutines         : '1.8.1',\n                leakCanary         : '2.14',\n                kotlin             : '2.0.0',\n                intellijAnnotations: '13.0',\n                material           : '1.12.0',\n                androidXextJunit   : '1.2.1',\n                androidGradlePlugin: '8.5.0',\n                junit              : '4.13.2',\n                mockito            : '5.12.0',\n                robolectric        : '4.10.3',\n                assertj3           : '3.24.2',\n                assertj1           : '1.7.1',\n                concurrentunit     : '0.4.6',\n                openglApi          : 'gl1.1-android-2.1_r1',\n                mockwebserver      : '4.9.2',\n                relinker           : '1.4.5',\n                mavenPublishPlugin : '0.29.0',\n        ]\n    }\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:$versions.androidGradlePlugin\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin\"\n        classpath \"com.vanniktech:gradle-maven-publish-plugin:$versions.mavenPublishPlugin\"\n    }\n}\n\nplugins {\n    id 'org.jetbrains.kotlinx.binary-compatibility-validator' version '0.15.1'\n}\n\nsubprojects {\n    tasks.withType(JavaCompile).configureEach {\n        options.compilerArgs << '-Xlint'\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8203125,
          "content": "org.gradle.jvmargs=-Xmx1536M\nandroid.useAndroidX=true\nandroid.nonFinalResIds=false\n\nSONATYPE_HOST=DEFAULT\nRELEASE_SIGNING_ENABLED=true\n\nGROUP=pl.droidsonroids.gif\nPOM_ARTIFACT_ID=android-gif-drawable\nVERSION_NAME=1.2.29\n\nPOM_NAME=android-gif-drawable\nPOM_DESCRIPTION=Views and Drawable for displaying animated GIFs for Android\nPOM_INCEPTION_YEAR=2013\nPOM_URL=https://github.com/koral--/android-gif-drawable\n\nPOM_LICENSE_NAME=The MIT License\nPOM_LICENSE_URL=https://spdx.org/licenses/MIT.html\nPOM_LICENSE_DIST=repo\n\nPOM_SCM_URL=https://github.com/koral--/android-gif-drawable\nPOM_SCM_CONNECTION=scm:git:git://github.com/koral--/android-gif-drawable.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/koral--/android-gif-drawable.git\n\nPOM_DEVELOPER_ID=koral\nPOM_DEVELOPER_NAME=Karol Wrótniak\nPOM_DEVELOPER_URL=https://github.com/koral--\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.501953125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.759765625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0419921875,
          "content": "include ':sample', ':android-gif-drawable'\n"
        }
      ]
    }
  ]
}