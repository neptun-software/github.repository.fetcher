{
  "metadata": {
    "timestamp": 1736708721724,
    "page": 166,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Genymobile/gnirehtet",
      "stars": 6525,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "build/\n.gradle/\n.idea/\n*.iml\n/local.properties\n"
        },
        {
          "name": "DEVELOP.md",
          "type": "blob",
          "size": 17.669921875,
          "content": "# Gnirehtet for developers\n\n\n## Getting started\n\n### Requirements\n\nYou need the [Android SDK] (_Android Studio_) and the JDK 8 (`openjdk-8-jdk`).\n\nYou also need the [Rust] environment to build the Rust version:\n\n```bash\nwget https://sh.rustup.rs -O rustup-init\nsh rustup-init\n```\n\n[Android SDK]: https://developer.android.com/studio/index.html\n[Rust]: https://www.rust-lang.org/\n\n\n### Build\n\n#### Everything\n\nIf `gradle` is installed on your computer:\n\n    gradle build\n\nOtherwise, you can call the [gradle wrapper]:\n\n    ./gradlew build\n\nThis will build the Android application, the Java and Rust relay servers, both\nin debug and release versions.\n\n[gradle wrapper]: https://docs.gradle.org/current/userguide/gradle_wrapper.html\n\n\n#### Specific parts\n\nSeveral _gradle_ tasks are exposed in the root project. For instance:\n\n - `debugJava` and `releaseJava` build the Android application and the Java\n   relay server;\n - `debugRust` and `releaseRust` build the Android application and the Rust\n   relay server.\n\nEven if the Rust build tasks are exposed through `gradle` (which wraps calls to\n`cargo`), it is often more convenient to use `cargo` directly.\n\nFor instance, to build a release version of the Rust relay server:\n\n    cd relay-rust\n    cargo build --release\n\nIt will generate the binary in `target/release/gnirehtet`.\n\n\n#### Cross-compile the Rust relay server from Linux to Windows\n\nTo build `gnirehtet.exe` from Linux, install the cross-compile toolchain (on\nDebian):\n\n    sudo apt install gcc-mingw-w64-x86-64\n    rustup target add x86_64-pc-windows-gnu\n\nAdd the following lines to `~/.cargo/config`:\n\n    [target.x86_64-pc-windows-gnu]\n    linker = \"x86_64-w64-mingw32-gcc\"\n    ar = \"x86_64-w64-mingw32-gcc-ar\"\n\nThen build:\n\n    cargo build --release --target=x86_64-pc-windows-gnu\n\nIt will generate `target/x86_64-pc-windows-gnu/release/gnirehtet.exe`.\n\n\n### Android Studio\n\nTo import the project in _Android Studio_: File → Import…\n\nFrom there, you can develop on the Android application and the Java relay\nserver. You can also execute any _gradle_ tasks, and run the tests with visual\nresults.\n\n\n## Overview\n\nThe client registers itself as a [VPN], in order to intercept the whole device\nnetwork traffic.\n\nIt exchanges raw [IPv4 packets] as `byte[]` with the device:\n - it receives packets from the Android applications or system;\n - it must forge response packets.\n\nThe client (executed on the Android device) just maintains a TCP connection to\nthe relay server, and sends the raw packets to it.\n\nThis TCP connection is established over _adb_, after we started a reverse\nport redirection:\n\n    adb reverse localabstract:gnirehtet tcp:31416\n\nThis means that every connection initiated to `localhost:31416` from the device\nwill be redirected to the port `31416` on the computer, on which the relay\nserver is listening.\n\nThe relay server does all the hard work. It receives the IP packets from every\nconnected client and opens [standard sockets][berkeley] (which, of course, don't\nrequire _root_) accordingly, then relays data in both directions. This requires\nto translate packets between level 3 (on the device side) and level 5 (on the\nnetwork side) in the [OSI model].\n\nIn a sense, the relay server behaves like a [NAT] (more precisely a\n[port-restricted cone NAT][portNAT]), in that it opens connections on behalf of\nprivate peers. However, it differs from a standard NAT in the way it\ncommunicates with the clients (the private peers), by using a very specific\n(though simple) protocol, over a TCP connection.\n\n[VPN]: https://developer.android.com/reference/android/net/VpnService.html\n[IPv4 packets]: https://en.wikipedia.org/wiki/IPv4#Packet_structure\n[OSI model]: https://en.wikipedia.org/wiki/OSI_model\n[berkeley]: https://en.wikipedia.org/wiki/Berkeley_sockets\n[NAT]: https://en.wikipedia.org/wiki/Network_address_translation\n[portNAT]: https://en.wikipedia.org/wiki/Network_address_translation#Methods_of_translation\n\n\n## Client\n\nThe client is an _Android_ project located in [`app/`](app/).\n\nThe [`VpnService`] is implemented by [`GnirehtetService`].\n\nWe control the application through intents to [`GnirehtetActivity`].\n\nSome configuration options may be passed as extra parameters, converted to a\n[`VpnConfiguration`] instance. Currently, the user can configure the DNS servers\nto use.\n\nThe very first time, Android requests to the user the permission to enable the\nVPN. In that case, the API requires to call\n[`startActivityForResult`], so we need an [`Activity`]: this is the purpose\nof [`AuthorizationActivity`].\n\n[`RelayTunnel`] manages one connection to the relay server.\n[`PersistentRelayTunnel`] manages [`RelayTunnel`] instances to handle\nreconnections, so that we can stop and start the relay while the client keeps\nrunning.\n\nTo send response packets to the system, we must write one packet at a time to\nthe VPN interface. Since we receive packets from the relay server over a TCP\nconnection, we have to split writes at packet boundaries: this is the purpose\nof [`IPPacketOutputStream`].\n\n[`VpnService`]: https://developer.android.com/reference/android/net/VpnService.html\n[`GnirehtetService`]: app/src/main/java/com/genymobile/gnirehtet/GnirehtetService.java\n[`GnirehtetActivity`]: app/src/main/java/com/genymobile/gnirehtet/GnirehtetActivity.java\n[`VpnConfiguration`]: app/src/main/java/com/genymobile/gnirehtet/VpnConfiguration.java\n[`startActivityForResult`]: https://developer.android.com/reference/android/app/Activity.html#startActivityForResult%28android.content.Intent,%20int%29\n[`Activity`]: https://developer.android.com/reference/android/app/Activity.html\n[`AuthorizationActivity`]: app/src/main/java/com/genymobile/gnirehtet/AuthorizationActivity.java\n[`RelayTunnel`]: app/src/main/java/com/genymobile/gnirehtet/RelayTunnel.java\n[`PersistentRelayTunnel`]: app/src/main/java/com/genymobile/gnirehtet/PersistentRelayTunnel.java\n[`IPPacketOutputStream`]: app/src/main/java/com/genymobile/gnirehtet/IPPacketOutputStream.java\n\n\n## Relay server\n\nThe relay server comes in two flavors:\n - the **Java** version is a _Java 8_ project located in\n   [`relay-java/`](relay-java/);\n - the **Rust** version is a _Rust_ project located in\n   [`relay-rust/`](relay-rust/).\n\nIt is implemented using [asynchronous I/O] (through [Java NIO] and [Rust mio]).\nAs a consequence, it is essentially monothreaded, so there is no need for\nsynchronization to handle packets.\n\n[asynchronous I/O]: https://en.wikipedia.org/wiki/Asynchronous_I/O\n[Java NIO]: https://en.wikipedia.org/wiki/New_I/O_%28Java%29\n[Rust mio]: https://docs.rs/mio/0.6.10/mio/\n\n\n### Selector\n\nThere are different _socket channels_ registered to a unique _selector_:\n - one for the server socket, listening on port 31416;\n - one for each _client_, accepted by the server socket;\n - one for each _TCP connection_ to the network;\n - one for each _UDP connection_ to the network.\n\nInitially, only the server socket _channel_ is registered.\n\nIn **Java**, the _channels_ ([`SelectableChannel`][nio/SelectableChannel]) are\nregistered to the _selector_ ([`Selector`][nio/Selector]) defined in\n[`Relay`][java/Relay], with their [`SelectionHandler`][java/SelectionHandler] as\n[attachment][nio/attachment] (for better decoupling). A [`Client`][java/Client]\nis created for every accepted _client_.\n\n[nio/Selector]: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/Selector.html\n[nio/SelectableChannel]: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/SelectableChannel.html\n[java/Relay]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/Relay.java\n[java/SelectionHandler]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/SelectionHandler.java\n[nio/attachment]: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/SelectionKey.html#attachment--\n[java/Client]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/Client.java\n\nIn **Rust**, our own [`Selector`][rust/selector] class wraps the\n[`Poll`][mio/Poll] from _mio_ to expose an API accepting event handlers instead\nof low-level [tokens][mio/Token]. The _selector_ instance is created in\n[`Relay`][rust/relay]. The _channels_ are called _\"handles\"_ in _mio_; they are\nsimply the socket instances themselves ([`TcpListener`][mio/TcpListener],\n[`TcpStream`][mio/TcpStream] and [`UdpSocket`][mio/UdpSocket]). A\n[`Client`][rust/client] is created for every accepted _client_.\n\n[mio/Poll]: https://docs.rs/mio/0.6.10/mio/struct.Poll.html\n[mio/Token]: https://docs.rs/mio/0.6.10/mio/struct.Token.html\n[mio/TcpListener]: https://docs.rs/mio/0.6.10/mio/net/struct.TcpListener.html\n[mio/TcpStream]: https://docs.rs/mio/0.6.10/mio/net/struct.TcpStream.html\n[mio/UdpSocket]: https://docs.rs/mio/0.6.10/mio/net/struct.UdpSocket.html\n[rust/selector]: relay-rust/src/relay/selector.rs\n[rust/relay]: relay-rust/src/relay/relay.rs\n[rust/client]: relay-rust/src/relay/client.rs\n\n![archi](assets/archi.png)\n\n### Client\n\nEach _client_ manages a TCP socket, used to transmit raw IP packets from and to\nthe _Gnirehtet_ Android client. Thus, these IP packets are encapsulated into TCP\n(they are transmitted as the TCP payload).\n\nWhen a client connects, the relay server assigns an integer id to it, which it\nwrites to the TCP socket. The client considers itself connected to the relay\nserver only once it has received this number. This allows to detect any\nend-to-end connection issue immediately. For instance, a TCP _connect_ initiated\nby a client succeeds whenever a port redirection is enabled (typically through\n`adb reverse`), even if the relay server is not listening. In that case, the\nfirst _read_ will fail.\n\n\n### Packets\n\nA class representing an _IPv4 packet_\n([`IPv4Packet`][java/IPv4Packet] | [`Ipv4Packet`][rust/ipv4-packet]) provides a\nstructured view to read and write packet data, which is physically stored in the\nbuffers (the little squares on the schema). Since we handle one packet at a time\nwith asynchronous I/O, there is no need to copy or synchronize access to the\npackets data: the packets just point to the buffer where they are stored.\n\n[java/IPv4Packet]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/IPv4Packet.java\n[rust/ipv4-packet]: relay-rust/src/relay/ipv4\\_packet.rs\n\nEach packet contains an instance of _IPv4 headers_ and _transport headers_\n(which might be _TCP_ or _UDP_ headers).\n\nIn **Java**, this is straightforward: [`IPv4Header`][java/IPv4Header],\n[`TCPHeader`][java/TCPHeader] and [`UDPHeader`][java/UDPHeader] just share a\nslice of the raw packet buffer.\n\n[java/IPv4Header]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/IPv4Header.java\n[java/TCPHeader]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/TCPHeader.java\n[java/UDPHeader]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/UDPHeader.java\n\nIn **Rust**, the borrowing rules prevent to share a mutable reference.\nTherefore, _header data_ classes (`*HeaderData`) are used to store the fields,\nand lifetime-bound views (`*Header<'a>` and `*HeaderMut<'a>`) reference both\nthe raw array and the _header data_:\n\n - [`ipv4_header`][rust/ipv4-header]:\n   - data: `Ipv4HeaderData`\n   - view: `Ipv4Header<'a>`\n   - mutable view: `Ipv4HeaderMut<'a>`\n - [`tcp_header`][rust/tcp-header]:\n   - data: `TcpHeaderData`\n   - view: `TcpHeader<'a>`\n   - mutable view: `TcpHeaderMut<'a>`\n - [`udp_header`][rust/udp-header]:\n   - data: `UdpHeaderData`\n   - view: `UdpHeader<'a>`\n   - mutable view: `UdpHeaderMut<'a>`\n\nIn addition, we use [enums][rust-enums] for _transport headers_ to statically\ndispatch calls to _UDP_ and _TCP_ header classes:\n\n - [`transport_header`][rust/transport-header]:\n   - data: `TransportHeaderData`\n   - view: `TransportHeader<'a>`\n   - mutable view: `TransportHeaderMut<'a>`\n\n[rust/ipv4-header]: relay-rust/src/relay/ipv4\\_header.rs\n[rust/tcp-header]: relay-rust/src/relay/tcp\\_header.rs\n[rust/udp-header]: relay-rust/src/relay/udp\\_header.rs\n[rust/transport-header]: relay-rust/src/relay/transport\\_header.rs\n[rust-enums]: https://doc.rust-lang.org/book/first-edition/enums.html\n\n\n### Router\n\nEach _client_ holds a _router_\n([`Router`][java/Router] | [`Router`][rust/router]), responsible for sending the\npackets to the right _connection_, identified by these 5 properties available in\nthe IP and transport headers:\n\n - protocol\n - source address\n - source port\n - destination address\n - destination port\n\nThese identifiers are stored in a _connection id_\n([`ConnectionId`][java/ConnectionId] | [`ConnectionId`][rust/connection]),\nused as a key to find or create the associated _connection_.\n\n[java/Router]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/Router.java\n[java/ConnectionId]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/ConnectionId.java\n[rust/Router]: relay-rust/src/relay/router.rs\n[rust/connection]: relay-rust/src/relay/connection.rs\n\n\n### Connections\n\nA _connection_ ([`Connection`][java/Connection] |\n[`Connection`][rust/connection]) is either a _TCP connection_\n([`TCPConnection`][java/TCPConnection] | [`TcpConnection`][rust/tcp-connection])\nor a _UDP connection_ ([`UDPConnection`][java/UDPConnection] |\n[`UdpConnection`][rust/udp-connection]) to the requested destination. It\nregisters its own _channel_ to the _selector_.\n\n[java/Connection]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/Connection.java\n[java/TCPConnection]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/TCPConnection.java\n[java/UDPConnection]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/UDPConnection.java\n[rust/connection]: relay-rust/src/relay/connection.rs\n[rust/tcp-connection]: relay-rust/src/relay/tcp\\_connection.rs\n[rust/udp-connection]: relay-rust/src/relay/udp\\_connection.rs\n\nThe connection is responsible for converting data from level 3 to level 5 for\ndevice-to-network packets, and from level 5 to level 3 for network-to-device\npackets. For _UDP connections_, it consists essentially in removing or\nadding IP and transport headers. For _TCP connections_, however, it\nrequires to respond to the client according to the TCP protocol ([RFC 793]),\nin such a way as to ensure a correct end-to-end communication.\n\n[RFC 793]: https://tools.ietf.org/html/rfc793\n\nA _packetizer_ ([`Packetizer`][java/Packetizer] |\n[`Packetizer`][rust/packetizer]) converts from level 5 to level 3 by appending\ncorrect IP and transport headers.\n\n[java/Packetizer]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/Packetizer.java\n[rust/packetizer]: relay-rust/src/relay/packetizer.rs\n\n\n#### UDP connection\n\nWhen the first packet for a specific UDP connection is received from the device,\na new `UdpConnection` is created. It keeps a copy of the IP and UDP headers\nof this first packet, swapping the source and the destination, in order to use\nthem as headers for all response packets.\n\nThe relaying is simple for UDP: each packet received from one side must be sent\nto the other side, without any splitting or merging (datagram boundaries must be\npreserved for UDP).\n\nSince UDP is not a connected protocol, a UDP connection is never \"closed\".\nTherefore, the _selector_ wakes up once per minute (using a timeout) to clean\nexpired (in practice, unused for more than 2 minutes) UDP connections.\n\n\n#### TCP connection\n\n`TcpConnection` also keeps, as a reference, a copy of the IP and TCP headers\nof the first packet received.\n\nHowever, contrary to UDP, TCP must provide reliable delivery. In particular,\nlost packets have to be retransmitted. Nonetheless, we can take advantage of the\ntwo TCP we are proxifying, so that we can provide reliability by delegating the\nretransmission mechanism to them. In fact, it is sufficient to guarantee that\n**we cannot lose packets from network to device**.\n\nIndeed, any packet written to a TCP channel is safe, since it will be managed by\nthe TCP implementation from the system. Losing a raw IP packet received from the\ndevice is also safe: the device TCP implementation will follow the TCP protocol\nto retransmit it. Therefore, **dropping packets from device to network does not\nbreak the connection**.\n\nOn the other hand, once we retrieved a packet from a TCP channel from the\nnetwork, we are responsible for it. Would it be dropped, there would be no way\nto recover the connection.\n\nAs far as I know, there are only two possible causes of packet loss for which we\nare responsible:\n\n 1. When **our buffers are full**, we won't resize them indefinitely, so we have to\ndrop packets. Typically, this may happen if the data from the network is\nreceived at a higher rate than that they can be sent to the device.\n\n 2. When **a raw packet is considered invalid** by the device, it is rejected.\nThis may happen for example if the checksum is invalid or if the TCP sequence\nnumber is [out-of-the-window][flow control].\n\n[flow control]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Flow_control\n\nTherefore, by [contraposition], if we guarantee that we never retrieve a packet\nthat we won't be able to store, and that we provide a valid checksum and respect\nthe client TCP window, then **we won't lose any packet without implementing any\nretransmission mechanism**.\n\n[contraposition]: https://en.wikipedia.org/wiki/Contraposition\n\nTo prevent retrieving a packet while our buffers are full, we indicate that we\nare not interested in reading ([`interestOps`][nio/interestOps] |\n[`interest`][mio/reregister]) the TCP channel when some pending data remain to\nbe written to the client buffer. Once some space becomes available, the client\nthen _pulls_ the available packets from the `TcpConnection`s, which are _packet\nsources_ ([`PacketSource`][java/PacketSource] |\n[`PacketSource`][rust/packet-source]).\n\n[nio/interestOps]: https://developer.android.com/reference/java/nio/channels/SelectionKey.html#interestOps%28int%29\n[mio/reregister]: https://docs.rs/mio/0.6.10/mio/struct.Poll.html#method.reregister\n[java/PacketSource]: relay-java/src/main/java/com/genymobile/gnirehtet/relay/PacketSource.java\n[rust/packet-source]: relay-rust/src/relay/packet\\_source.rs\n\n\n## Hack\n\nFor more details, go read the code!\n\nIf you find a bug, or have an awesome idea to implement, please discuss and\ncontribute ;-)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.080078125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (C) 2017 Genymobile\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8271484375,
          "content": "# Gnirehtet (v2.5.1)\n\nThis project provides **reverse tethering** over `adb` for Android: it\nallows devices to use the internet connection of the computer they are plugged\non. It does not require any _root_ access (neither on the device nor on the\ncomputer). It works on _GNU/Linux_, _Windows_ and _Mac OS_.\n\nCurrently, it relays [TCP] and [UDP] over [IPv4] traffic, but it does not\nsupport [IPv6] (yet?).\n\n[TCP]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol\n[UDP]: https://fr.wikipedia.org/wiki/User_Datagram_Protocol\n[IPv4]: https://en.wikipedia.org/wiki/IPv4\n[IPv6]: https://en.wikipedia.org/wiki/IPv6\n\n_**This project is not actively maintained anymore, only major blockers (like\nbuild issues) are fixed. It should still work, though.**_\n\n\n## Flavors\n\nTwo implementations of _Gnirehtet_ are available:\n - one in **Java**;\n - one in **Rust**.\n\n\n### Which one to choose?\n\nUse the **Rust** implementation. The native binary consumes less CPU and memory,\nand does not require a _Java_ runtime environment.\n\nThe relay server of _Gnirehtet_ was initially only implemented in Java. As a\nbenefit, the same \"binary\" runs on every platform having _Java 8_ runtime\ninstalled. It is still maintained to provide a working alternative in case of\nproblems with the Rust version.\n\n\n## Requirements\n\nThe Android application requires at least API 21 (Android 5.0).\n\nFor the _Java_ version only, _Java 8_ (JRE) is required on your computer. On\nDebian-based distros, install the package `openjdk-8-jre`.\n\n### adb\n\nYou need a recent version of [adb] (where `adb reverse` is implemented, it\nworks with 1.0.36).\n\nIt is available in the [Android SDK platform tools][platform-tools].\n\nOn Debian-based distros, you can alternatively install the package\n`android-tools-adb`.\n\nOn Windows, if you need `adb` only for this application, just download the\n[platform-tools][platform-tools-windows] and extract the following files to the\n_gnirehtet_ directory:\n - `adb.exe`\n - `AdbWinApi.dll`\n - `AdbWinUsbApi.dll`\n\nMake sure you [enabled adb debugging][enable-adb] on your device(s).\n\n[adb]: https://developer.android.com/studio/command-line/adb.html\n[enable-adb]: https://developer.android.com/studio/command-line/adb.html#Enabling\n[platform-tools]: https://developer.android.com/studio/releases/platform-tools.html\n[platform-tools-windows]: https://dl.google.com/android/repository/platform-tools-latest-windows.zip\n\n\n## Get the app\n\n### Homebrew\n\nIf you use [Homebrew](https://brew.sh/), getting up and running is very quick.\nTo install the Rust version:\n\n```\nbrew install gnirehtet\n```\n\n### Download\n\nDownload the [latest release][latest] in the flavor you want.\n\n[latest]: https://github.com/Genymobile/gnirehtet/releases/latest\n\n\n#### Rust\n\n - **Linux:** [`gnirehtet-rust-linux64-v2.5.1.zip`][direct-rust-linux64]  \n   (SHA-256: _dee55499ca4fef00ce2559c767d2d8130163736d43fdbce753e923e75309c275_)\n - **Windows:** [`gnirehtet-rust-win64-v2.5.1.zip`][direct-rust-win64]  \n   (SHA-256: _7f5b1063e7895182aa60def1437e50363c3758144088dcd079037bb7c3c46a1c_)\n - **MacOS:** [`gnirehtet-rust-macos64-v2.2.1.zip`][direct-rust-macos64]\n   _(old release)_  \n   (SHA-256: _902103e6497f995e1e9b92421be212559950cca4a8b557e1f0403769aee06fc8_)\n\n[direct-rust-linux64]: https://github.com/Genymobile/gnirehtet/releases/download/v2.5.1/gnirehtet-rust-linux64-v2.5.1.zip\n[direct-rust-win64]: https://github.com/Genymobile/gnirehtet/releases/download/v2.5.1/gnirehtet-rust-win64-v2.5.1.zip\n[direct-rust-macos64]: https://github.com/Genymobile/gnirehtet/releases/download/v2.2.1/gnirehtet-rust-macos64-v2.2.1.zip\n\nThen extract it.\n\nThe Linux and MacOS archives contain:\n - `gnirehtet.apk`\n - `gnirehtet`\n\nThe Windows archive contains:\n - `gnirehtet.apk`\n - `gnirehtet.exe`\n - `gnirehtet-run.cmd`\n\n\n#### Java\n\n - **All platforms:** [`gnirehtet-java-v2.5.1.zip`][direct-java]  \n   (SHA-256: _816748078fa6a304600a294a13338a06ac778bcc0e57b62d88328c7968ad2d3a_)\n\n[direct-java]: https://github.com/Genymobile/gnirehtet/releases/download/v2.5.1/gnirehtet-java-v2.5.1.zip\n\nThen extract it. The archive contains:\n - `gnirehtet.apk`\n - `gnirehtet.jar`\n - `gnirehtet`\n - `gnirehtet.cmd`\n - `gnirehtet-run.cmd`\n\n\n## Run (simple)\n\n_Note: On Windows, replace `./gnirehtet` by `gnirehtet` in the following\ncommands._\n\nThe application has no UI, and is intended to be controlled from the computer\nonly.\n\nIf you want to activate reverse tethering for exactly one device, just execute:\n\n    ./gnirehtet run\n\nReverse tethering remains active until you press _Ctrl+C_.\n\nOn Windows, for convenience, you can double-click on `gnirehtet-run.cmd`\ninstead (it just executes `gnirehtet run`, without requiring to open a\nterminal).\n\nThe very first start should open a popup to request permission:\n\n![request](assets/request.jpg)\n\nA \"key\" logo appears in the status bar whenever _Gnirehtet_ is active:\n\n![key](assets/key.png)\n\nAlternatively, you can enable reverse tethering for all connected devices\n(present and future) by calling:\n\n    ./gnirehtet autorun\n\n\n## Run\n\nYou can execute the actions separately (it may be useful if you want to reverse\ntether several devices simultaneously).\n\nStart the relay server and keep it open:\n\n    ./gnirehtet relay\n\nInstall the `apk` on your Android device:\n\n    ./gnirehtet install [serial]\n\nIn another terminal, for each client, execute:\n\n    ./gnirehtet start [serial]\n\nTo stop a client:\n\n    ./gnirehtet stop [serial]\n\nTo reset the tunnel (useful to get the connection back when a device is\nunplugged and plugged back while gnirehtet is active):\n\n    ./gnirehtet tunnel [serial]\n\nThe _serial_ parameter is required only if `adb devices` outputs more than one\ndevice.\n\nFor advanced options, call `./gnirehtet` without arguments to get more details.\n\n\n## Run manually\n\nThe `gnirehtet` program exposes a simple command-line interface that executes\nlower-level commands. You can call them manually instead.\n\nTo start the relay server:\n\n    ./gnirehtet relay\n\nTo install the apk:\n\n    adb install -r gnirehtet.apk\n\nTo start a client:\n\n    adb reverse localabstract:gnirehtet tcp:31416\n    adb shell am start -a com.genymobile.gnirehtet.START \\\n        -n com.genymobile.gnirehtet/.GnirehtetActivity\n\nTo stop a client:\n\n    adb shell am start -a com.genymobile.gnirehtet.STOP \\\n        -n com.genymobile.gnirehtet/.GnirehtetActivity\n\n\n## Environment variables\n\n`ADB` defines a custom path to the `adb` executable:\n\n```bash\nADB=/path/to/my/adb ./gnirehtet run\n```\n\n`GNIREHTET_APK` defines a custom path to `gnirehtet.apk`:\n\n```bash\nGNIREHTET_APK=/usr/share/gnirehtet/gnirehtet.apk ./gnirehtet run\n```\n\n\n## Why _gnirehtet_?\n\n    rev <<< tethering\n\n(in _Bash_)\n\n\n## Developers\n\nRead the [developers page].\n\n[developers page]: DEVELOP.md\n\n\n## Licence\n\n    Copyright (C) 2017 Genymobile\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n## Articles\n\n- [Introducing “gnirehtet”, a reverse tethering tool for Android][medium-1] ([French version][blog-1])\n- [Gnirehtet 2: our reverse tethering tool for Android now available in Rust][medium-2]\n- [Gnirehtet rewritten in Rust][blog-2-en] ([French version][blog-2-fr])\n\n[medium-1]: https://medium.com/@rom1v/gnirehtet-reverse-tethering-android-2afacdbdaec7\n[blog-1]: https://blog.rom1v.com/2017/03/gnirehtet/\n[medium-2]: https://medium.com/genymobile/gnirehtet-2-our-reverse-tethering-tool-for-android-now-available-in-rust-999960483d5a\n[blog-2-en]: https://blog.rom1v.com/2017/09/gnirehtet-rewritten-in-rust/\n[blog-2-fr]: https://blog.rom1v.com/2017/09/gnirehtet-reecrit-en-rust/\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.2744140625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\next {\n    compileSdkVersion = 28\n    buildToolsVersion = \"28.0.3\"\n}\n\nbuildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.5.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\ntask debugJava(dependsOn: [':app:assembleDebug', ':relay-java:assembleDebug'])\ntask releaseJava(dependsOn: [':app:assembleRelease', ':relay-java:assembleRelease'])\n\ntask debugRust(dependsOn: [':app:assembleDebug', ':relay-rust:debug'])\ntask releaseRust(dependsOn: [':app:assembleRelease', ':relay-rust:release'])\n\ntask releaseRustWindows(dependsOn: [':app:assembleRelease', 'relay-rust:releaseCrossToWindows'])\n\ntask debugAll(dependsOn: ['debugJava', 'debugRust'])\ntask releaseAll(dependsOn: ['releaseJava', 'releaseRust'])\n\ntask checkJava(dependsOn: [':app:check', ':relay-java:check'])\ntask checkRust(dependsOn: ['app:check', ':relay-rust:check'])\ntask checkAll(dependsOn: ['checkJava', 'checkRust'])\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "relay-java",
          "type": "tree",
          "content": null
        },
        {
          "name": "relay-rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "blob",
          "size": 1.4873046875,
          "content": "#!/bin/bash\n# Make a gnirehtet release.\n#\n# Put your keystore properties into ~/.gradle/gradle.properties\n# (check app/build.gradle)\n\nset -e # fail on error\n\nGRADLE=${GRADLE:-./gradlew} # set value ./gradlew if not set\nDIST=dist\nTARGET_DIR_JAVA=gnirehtet-java\nTARGET_DIR_RUST_LINUX=gnirehtet-rust-linux64\nTARGET_DIR_RUST_WIN=gnirehtet-rust-win64\n\nversion=$(git describe --tags --always)\nTARGET_JAVA=\"$TARGET_DIR_JAVA-$version\".zip\nTARGET_RUST_LINUX=\"$TARGET_DIR_RUST_LINUX-$version\".zip\nTARGET_RUST_WIN=\"$TARGET_DIR_RUST_WIN-$version\".zip\n\n\"$GRADLE\" checkAll releaseAll releaseRustWindows\n\nrm -rf \"$DIST\"\n\nfor dir in \"$TARGET_DIR_JAVA\" \"$TARGET_DIR_RUST_LINUX\" \"$TARGET_DIR_RUST_WIN\"\ndo\n    mkdir -p \"$DIST/$dir\"\n    cp app/build/outputs/apk/release/gnirehtet-release.apk \"$DIST/$dir\"/gnirehtet.apk\ndone\n\ncp relay-java/build/libs/gnirehtet.jar \\\n   relay-java/scripts/gnirehtet \\\n   relay-java/scripts/gnirehtet.cmd \\\n   relay-java/scripts/gnirehtet-run.cmd \\\n   \"$DIST/$TARGET_DIR_JAVA\"/\ncp relay-rust/target/release/gnirehtet \"$DIST/$TARGET_DIR_RUST_LINUX\"/\nstrip \"$DIST/$TARGET_DIR_RUST_LINUX\"/gnirehtet  # remove symbols for smaller binary\ncp relay-rust/target/x86_64-pc-windows-gnu/release/gnirehtet.exe \\\n   relay-rust/scripts/gnirehtet-run.cmd \\\n   \"$DIST/$TARGET_DIR_RUST_WIN\"/\n\ncd \"$DIST\"\nzip -r \"$TARGET_JAVA\" \"$TARGET_DIR_JAVA\"\nzip -r \"$TARGET_RUST_LINUX\" \"$TARGET_DIR_RUST_LINUX\"\nzip -r \"$TARGET_RUST_WIN\" \"$TARGET_DIR_RUST_WIN\"\nsha256sum \"$TARGET_JAVA\" \"$TARGET_RUST_LINUX\" \"$TARGET_RUST_WIN\" > SHA256SUMS.txt\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0439453125,
          "content": "include ':app', ':relay-java', ':relay-rust'\n"
        }
      ]
    }
  ]
}