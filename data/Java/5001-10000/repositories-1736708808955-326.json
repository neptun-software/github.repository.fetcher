{
  "metadata": {
    "timestamp": 1736708808955,
    "page": 326,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huangyanbin/smartTable",
      "stars": 5178,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.en.md",
          "type": "blob",
          "size": 8.7587890625,
          "content": "# SmartTable\n[![](https://jitpack.io/v/huangyanbin/smartTable.svg)](https://jitpack.io/#huangyanbin/smartTable)\n###### An Andr oid automatically generated table framework\n* [Chinese README](/README.md/)\n* [Apk download version1.7](/img/smartTable.apk)\n* [Version of history](/README_old_version_en.md/)\n> function introduction\n1. fast configuration automatic generation of tables;\n2. automatic calculation table width;\n3. table column header combination;\n4. the table holds the left sequence, the top sequence, the first row, the column heading, and the statistics row;\n5. automatic statistics, sort (also can customize the statistical rules);\n6. format graphic, serial number, column title formatting;\n7. configuration, background, text, grid, padding and so on;\n8. form notation;\n9. table content, column title click event;\n10. zoom mode and scroll mode;\n11. annotation mode;\n12. contents are displayed in many lines.\n13. pagination mode;\n14. dynamically added data at the end of the end.\n15. rich formatting;\n16. support two dimensional array display (for similar timetable, film ballot, etc.)\n17. import excel (support color, font, background, annotation, alignment, picture and other basic Excel attributes)\n18. form merge unit (supporting annotating merge, supporting auto merge)\n19. support the other refresh framework SmartRefreshLayout\n20. the minimum width of a configurable table (less than the width of this width)\n21. support direct List or array field columns\n22. JSON data direct conversion table\n> Basic function display\n\n![Basic](/img/table.gif)\n\n> Zoom function\n\n![Zoom](/img/zoom.gif)\n\n> refresh function(Use SmartRefreshLayout)\n\n![refresh](/img/refresh.gif)\n\n> Import Excel (using Jxl jar)\n\n![Excel](/img/old_excel.png)\n![Excel](/img/new_excel.png)\n\n> Importing a two-dimensional array\n\n![schedule](/img/progress.jpg)\n![Vote](/img/seat.jpg)\n\n> List or array column\n\n![课表表](/img/arrayColumn.gif)\n> How Use\n\n- Quote\n\n> *  Step 1. Add the JitPack repository to your build file\n\n```gradle\nallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://www.jitpack.io' }\n\t\t}\n\t}\n```\n\n> * 2. Add the dependency\n\n```gradle\ndependencies {\n\t        compile 'com.github.huangyanbin:SmartTable:1.8.3'\n\t}\n```\n\n> * Use SmartTable\n\n```\n <com.bin.david.form.core.SmartTable\n       android:id=\"@+id/table\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n      />\n ```\n\n**- Annotation mode**\n\n> *  Add annotations to the class that you need to generate\n\n```\n@SmartTable(name=\"table name\")\n```\n\n> *  Add notes to fields you need to display\n\n```\n// ID sorts the table for the table in which the field is located\n @SmartColumn(id =1,name = \"ColumnName\")\n```\n> * Setting table data\n\n```\n        table = findViewById(R.id.table);\n        table.setData(list);\n```\n\n> The annotation pattern is so simple that you can run directly to see the effect. Of course, this is just the basic configuration of annotations. There are also automatic statistics, column combinations, and so on. If you want to know more about the annotation, please check the demo.\n\nTable ```@SmartTable``` ###### notes, used to generate the table.\n\nHeader 1 header 2 |\n---|---\nName | table name\nCount is | statistics for\nPageSize | page number\nCurrentPage | the current page\n\n###### ```@SmartColumn``` column for comment column.\n\nNote | effect\n---|---\nName | column headings\nID | position (column sorting is smaller at the front)\nParent | parent column name (not set no parent column)\nAlign | column alignment\nType | query set whether the next level\nAutoMerge | is set to automatically merge\nWith the maximum number of maxMergeCount |\nAutoCount | is on statistics\nWhether the column fixed | fixed\n\n\n> explanation:\n\n- align\n\n> set the column alignment, default Center\n\n- type\n\n> ColumnType.Own, ColumnType.Child two, a value can be set, assuming that UserInfo has an attribute Family family object, you want to attribute monther parsing faily object, father two properties, you need to set the Child, and in monther, add the corresponding notes @ SmartColumn father, otherwise only resolved to Family, the default is Own.\n\n- autoMerge\n\nIf the data that you return is formatted, the same data near the column will be automatically merged into a cell that does not open the merge by default.\n\n- autoCount\n\n> table opens the display statistics line and sets the autoCount to true, then the column can be automatically counted, and the default is false.\n\n- Fixed\n\n> fixed is set to true, which can be automatically fixed when the column rolls to the left.\n**- Basic mode**\n```\n    //Common column\n   Column<String> column1 = new Column<>(\"name\", \"name\");\n   Column<Integer> column2 = new Column<>(\"age\", \"age\");\n   Column<Long> column3 = new Column<>(\"time\", \"time\");\n    Column<String> column4 = new Column<>(\"portrait\", \"portrait\");\n   //Combination column\n  Column totalColumn1 = new Column(\"Combination name\",column1,column2);\n\n  //tableData  Datas is the data that needs to be filled\n   final TableData<User> tableData = new TableData<>(\"表格名\",userList,totalColumn1,column3);\n   //set data\n    table = findViewById(R.id.table);\n    //table.setZoom(true,3);//boolean isZoom\n    table.setTableData(tableData);\n\n```\n**- Basic method introduction**\n\n There are two parameters in the > ```Column``` construction method, ```IFormat<T>```, ```IDrawFormat<T>```. ```IFormat<T>``` is used to format the display text, such as the update time field ```time``` timestamp in the ```User``` object. We can rewrite this method if we want to display different formats. ```IDrawFormat<T>``` is used to display the drawing format, such as ```User``` object avatars in the field ```portrait``` time stamp, you can use this method, provides a framework for including several ```IDrawFormat``` (text, Bitmap, Resoure pictures, with pictures).\n\n\n > ```Column``` provides\n\n 1. whether the automatic sorting ```setAutoCount (Boolean isAutoCount).\n 2. whether to arrange ```isReverseSort``` in reverse order\n 3. set sort compare ```setComparator```\n 4. statistical formatting ```setCountFormat```\n 5. click event ```OnColumnItemClickListener```\n\n\n The basic methods in > ```TableData```\n\n 1. set sequence ```setSortColumn```\n 2. set column headings to format ```settitleDrawFormat```\n 3. set the top serial number to format ```setXSequenceFormat```\n 4. set the left serial number to format ```setYSequenceFormat```\n 5. sets whether to display statistics ```setShowCount```\n\n\n\n The basic methods in > ```TableConfig```\n\n 1. set content text style ```setContentStyle```\n 2. set the left sequence text style ```setYSequenceStyle```\n 3. set top sequence text style ```setXSequenceStyle```\n 4. set column heading text style ```setColumnTitleStyle```\n 5. set table title text style ```setTableTitleStyle```\n 6. set statistics row style ```setCountStyle```\n 7. set column header grid style ```setColumnTitleGridStyle```\n 8. set table grid style ```setGridStyle```\n 9. set grid column padding ```setVerticalPadding```\n 10. set grid row padding ```setHorizontalPadding```\n 11. set left sequence background ```setYSequenceBackgroundColor```\n 12. set right sequence background ```setXSequenceBackgroundColor```\n 13. set column header background ```setColumnTitleBackgroundColor```\n 14. set content background ```setContentBackgroundColor```\n 15. setting statistics row background ```setCountBackgroundColor```\n 16. fixed left ```setFixedYSequence```\n 17. fixed top ```setFixedXSequence```\n 18. fixed column headings ```setFixedTitle.\n 19. fixing the first column ```setFixedFirstColumn```\n 20. fixed statistics row```setFixedCountRow```\n\n\n\n ### summary\n\n After writing SmartChart, you have a further understanding of Android drawing. To do SmartTable, just a small demo, after a week of work stealing a write, basically completed the main function table, there have been combined with other functions, because behind not using, then only the beginning design function, has to meet the daily needs.\n\n > the use of tables in Android is very few, and the main screen is out of one page, and the user experience is bad. In the implementation process, try to experience a better sense, I feel through fixed title and first line experience is best, so the default set fixed. Of course, you can set it yourself. There are a lot of pits in it. I hope friends in need can use it.\n## *License*\n\nSmartTable is released under the Apache 2.0 license.\n\n```\nCopyright 2017 Huangyanbin.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at following link.\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitat\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.07421875,
          "content": "# SmartTable\n```\n android自动生成表格框架\n```\n[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\n[![](https://jitpack.io/v/huangyanbin/smartTable.svg)](https://jitpack.io/#huangyanbin/smartTable)\n* [English README](/README.en.md/)\n* [历史版本介绍](/README_old_version.md/)\n* [更多功能详情介绍](https://juejin.im/post/5a55ae6c5188257350511a8c)\n* [apk version 2.0版本下载地址](/img/smartTable.apk)\n* [SmartTable2.0基本使用手册持续更新中](/use.md)\n\n> ![下载地址](/img/table.png)\n\n> ![QQ群](/img/SmartTableCode.png)\n\n\n#####  功能介绍\n\n1.  快速配置自动生成表格；\n2.  自动计算表格宽高；\n3.  表格列标题组合；\n4.  表格固定左序列、顶部序列、第一行、列标题、统计行；\n5.  自动统计，排序（自定义统计规则）；\n6.  表格图文、序列号、列标题格式化；\n7.  表格各组成背景、文字、网格、padding等配置；\n8.  表格批注；\n9.  表格内容、列标题点击事件；\n10. 缩放模式和滚动模式；\n11. 注解模式；\n12. 内容多行显示；\n13. 分页模式；\n14. 首尾动态添加数据;\n15. 丰富的格式化;\n16. 支持二维数组展示（用于类似日程表，电影选票等）；\n17. 导入excel(支持颜色，字体，背景，批注，对齐，图片等基本Excel属性)；\n18. 表格合并单元(支持注解合并，支持自动合并)；\n19. 支持其他刷新框架SmartRefreshLayout；\n20. 可配置表格最小宽度(小于该宽度自动适配)；\n21. 支持直接List或数组字段转列；\n22. 支持Json数据直接转换成表格；\n23. 支持表格网格指定行列显示；\n24. 支持自动生成表单。\n\n##### 功能展示\n\n![基本功能](/img/table.gif)\n\n> 缩放功能\n\n![缩放](/img/zoom.gif)\n\n> 刷新功能(使用SmartRefreshLayout)\n\n![刷新](/img/refresh.gif)\n\n> 导入Excel(使用Jxl)\n\n![Excel](/img/old_excel.png)\n![Excel](/img/new_excel.png)\n\n> 导入二维数组\n\n![日程](/img/progress.jpg)\n![头像](/img/avator.jpg)\n\n> List或数组转列\n\n![课表表](/img/arrayColumn.gif)\n\n> 表单功能\n\n![表单功能](/img/1.png)\n\n##### 如何使用\n\n- 引用\n\n>   添加 JitPack repository 到你的build文件\n\n```gradle\nallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://www.jitpack.io' }\n\t\t}\n\t}\n```\n\n> 增加依赖\n\n```gradle\ndependencies {\n\t        compile 'com.github.huangyanbin:SmartTable:2.2.0'\n\t}\n```\n     如果你不需要数组转列功能，你可以使用1.7.1版本，需要的话，请使用最新版本2.2.0\n     2.0格式化配置有所变化，文档还没写，如果要需求，可以在QQ群询问。\n\n>  使用表格View\n\n```\n <com.bin.david.form.core.SmartTable\n       android:id=\"@+id/table\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n      />\n ```\n\n##### 注解模式\n\n>  在您需要生成的表格的类增加注解\n\n```\n@SmartTable(name=\"表名\")\n```\n\n> 在你需要显示的字段增加注解\n\n```\n// id为该字段所在表格排序位置\n @SmartColumn(id =1,name = \"列名\")\n //如果需要查询到该成员变量里面去，通过设置type实现\n @SmartColumn(type = ColumnType.Child)\n```\n> 设置表格数据\n\n```\n  table = findViewById(R.id.table);\n  table.setData(list);\n```\n\n    注解模式就是这么简单，你可以直接运行查看效果了。当然这只是注解基本配置，注解里面还有自动统计，列组合等，如果你想要了解注解更多，请查看demo.\n\n\n#####  基本模式\n```\n    //普通列\n   Column<String> column1 = new Column<>(\"姓名\", \"name\");\n   Column<Integer> column2 = new Column<>(\"年龄\", \"age\");\n   Column<Long> column3 = new Column<>(\"更新时间\", \"time\");\n   Column<String> column4 = new Column<>(\"头像\", \"portrait\");\n    //如果是多层，可以通过.来实现多级查询\n   Column<String> column5 = new Column<>(\"班级\", \"class.className\");\n   //组合列\n   Column totalColumn1 = new Column(\"组合列名\",column1,column2);\n   //表格数据 datas是需要填充的数据\n   final TableData<User> tableData = new TableData<>(\"表格名\",userList,totalColumn1,column3);\n   //设置数据\n   table = findViewById(R.id.table);\n   //table.setZoom(true,3);是否缩放\n   table.setTableData(tableData);\n```\n\n##### 注解模式更多功能\n\n>  ```@SmartTable```表格注解，用于生成表格。\n\n注解 | 作用\n---|---\nname | 表格名\ncount | 是否显示统计行\npageSize | 页数量\ncurrentPage | 当前页\n\n> ```@SmartColumn```列，用于注解列。\n\n注解 | 作用\n---|---\nname | 列标题\nid |  列排序位置(越小越在前面)\nparent | 父列名称(不设置则没有父列)\nalign  | 列对齐方式\ntype   | 设置是否查询下一级\nautoMerge |设置是否自动合并\nmaxMergeCount |合并最大数量\nautoCount |是否开启统计\nfixed |是否固定该列\n\n\n> 解释：\n\n- align\n\n      设置该列对齐方式，默认居中\n\n- type\n\n      有ColumnType.Own,ColumnType.Child,两个值可以设置，假设UserInfo 有个属性是Family family对象，你想解析faily对象的属性monther,father两个属性，则需要设置Child，并在monther,father下添加相对应的注解@SmartColumn，否则只解析到Family，默认是Own。\n\n- autoMerge\n\n      假设你返回的数据格式化之后该列附近数据有相同，则会自动合并成一个单元格，默认不开启合并。\n\n- autoCount\n\n       table 开启显示统计行，设置autoCount为true，则该列可以自动统计，默认为false。\n\n- fixed\n\n       fixed设置为true，该列滚动到最左边时，可以自动固定住。\n\n#####  基本方法介绍\n\n\n  >  ```Column```类常用方法\n\n    1. 是否自动排序 setAutoCount(boolean isAutoCount)\n    2. 是否反序排列 isReverseSort\n    3. 设置排序比较 setComparator\n    4. 统计格式化 setCountFormat\n    5. 列内容点击事件 OnColumnItemClickListener\n    6. 滑动到表格左边时固定列 setFixed\n    7.  设置列对齐 setTextAlign\n    8. 设置开启自动合并 setAutoMerge\n    9. 设置开启最大数量 setMaxMergeCount\n    10. 设置绘制样式格式化 setDrawFormat\n    11. 设置文字格式化 setFormat\n\n\n\n >  ```TableData```类常用方法\n\n    1. 设置排序列 setSortColumn\n    2. 设置列标题格式化 settitleDrawFormat\n    3. 设置顶部序列号格式化 setXSequenceFormat\n    4. 设置左边序列号格式化 setYSequenceFormat\n    5. 设置是否显示统计 setShowCount\n    6. 设置列标题绘制格式化 setTitleDrawFormat\n    7. 设置X序号行文字格式化 setXSequenceFormat\n    8. 设置Y序号列文字格式化 setYSequenceFormat\n    9. 设置添加自定义合并规则setUserCellRange(List<CellRange> userCellRange)\n\n\n\n\n >  ```TableConfig```类常用方法\n\n     1.  设置内容文字样式  setContentStyle\n     2.  设置左边序列文字样式 setYSequenceStyle\n     3.  设置顶部序列文字样式 setXSequenceStyle\n     4.  设置列标题文字样式 setColumnTitleStyle\n     5.  设置表格标题文字样式 setTableTitleStyle\n     6.  设置统计行样式  setCountStyle\n     7.  设置列标题网格样式 setColumnTitleGridStyle\n     8.  设置内容网格样式 setGridStyle\n     9.  设置网格列padding setVerticalPadding\n     10. 设置网格行padding setHorizontalPadding\n     11. 设置左序列背景 setYSequenceBackgroundColor\n     12. 设置横序行背景 setXSequenceBackgroundColor\n     13. 设置列标题背景 setColumnTitleBackgroundColor\n     14. 设置内容背景 setContentBackgroundColor\n     15. 设置统计行背景 setCountBackgroundColor\n     16. 固定左侧 setFixedYSequence\n     17. 固定顶部  setFixedXSequence\n     18. 固定列标题  setFixedTitle\n     19. 固定第一列 setFixedFirstColumn//1.4版本取消了 可以使用Column.setFixed 固定任意列。\n     20. 固定统计行  setFixedCountRow\n     21. 列标题上下padding setColumnTitleVerticalPadding\n     22. 增加列标题左右padding setColumnTitleHorizontalPadding\n     22. 序列网格样式 setSequenceGridStyle\n     23. 列标题网格样式 columnTitleGridStyle\n     24. 设置是否显示顶部序号列 setShowXSequence\n     35. 设置是否显示左侧序号列 setShowYSequence\n     36. 设置是否显示表格标题 setShowTableTitle\n     37. 设置是否显示列标题 isShowColumnTitle\n     38. 设置表格最小宽度 setMinTableWidth\n\n> ```SmartTable```类常用方法\n\n    1.  设置列标题点击事件   setOnColumnClickListener\n    2.  设置排序列 setSortColumn\n    3.  设置是否开启缩放 setZoom(boolean zoom,float maxZoom,float minZoom)\n    4.  添加新数据 addData(List<T> t, boolean isFoot)\n    5.  设置选中Cell样式 setSelectFormat\n    6.  重新计算布局 notifyDataChanged\n\n  ```Column构造方法中还有两个参数 IFormat<T>, IDrawFormat<T>。其中IFormat<T>是用于格式化显示文字，比如User对象中有更新时间字段time时间戳。我们想要显示不同格式，就可以重写该方法。IDrawFormat<T>是用于显示绘制格式化，比如User对象中有头像字段portrait时间戳，就可以使用该方法，框架提供几种IDrawFormat包括（文字、Bitmap、Resoure图片、图文结合）。```\n\n#####   二维数组以及Excel\n> 你只需要用ArrayTableData 代替TableData就可以。设置想要展示的二维数组和列标题。\n\n```\n  String[] week = {\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"};\n        Integer[][] infos = {{0,1,2,1,1,0,1,1,0,1,1,2,3}, {4,2,1,1,0,1,1,0,1,1,2,2,3},\n                {2,2,0,1,2,4,1,0,1,3,0,1,1},{2,1,1,0,1,4,0,1,1,2,2,0,3},\n                {0,1,2,4,1,0,1,4,0,1,1,2,2}, {1,0,1,3,2,2,0,1,2,1,1,0,4},\n                {3,1,2,4,0,1,2,1,1,0,1,1,0}};\n  ArrayTableData<Integer> tableData = ArrayTableData.create(\"日程表\",week,infos,new IDrawFormat<Integer>(){...});\n\n```\n> 请参考demo和[好用漂亮的Android 表格框架2](https://juejin.im/post/5a5dce7651882573256bd043)\n\n#####  数组或者List转列以及Json表格\n\n> 请参考demo和[好用漂亮的Android 表格框架3](https://juejin.im/post/5a7a8eef5188257a84621eda)\n\n\n##### 关于混淆\n\n    keep解析数据的类以及SmartTable类。\n\n\n### 总结\n\n    这次写了SmartTable,本来没想写那么多，结果越写越多。功能也很完善了，好多新的想法由于之前没有考虑到，无法进一步实现。但对基础的Excel支持我觉得已经很完美了，甚至可以展示Excel中图表（使用SmartChart）。如果你在android端需要使用表格，这个肯定可以满足你的需求，希望有需要的同学可以使用它。\n\n### 打赏\n     如果你觉得对你有帮助，客官打个赏！\n\n![打赏](/img/dashang.jpg)\n\n\n## *License*\n\nSmartTable is released under the Apache 2.0 license.\n\n```\nCopyright 2017 Huangyanbin.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at following link.\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitat\n\n\n"
        },
        {
          "name": "README_old_version.md",
          "type": "blob",
          "size": 2.9521484375,
          "content": "# SmartTable历史版本\n\n###### 一款android自动生成表格框架\n**- 1.8版本**\n\n> 增加List Array Column\n\n**- 1.7版本**\n\n> 修复了缩放问题以及Excel导入显示\n> 增加自动合并单元格功能\n\n**- 1.6版本**\n\n> 修复缩放偏移问题和闪烁问题\n> 增加导出JXL Excel(导出文字样式，背景，图片，批注)\n> 增加单元格合并\n> 增加左上角空隙格式化\n> 支持二维数组转换\n> 增加导出POI Excel(导入图表示例)\n> 支持自动单元合并\n> 支持设置表格最小宽度\n\n\n\n**- 1.5版本**\n\n> 修复缩放问题\n> 增加ArrayTableData 支持二维数组\n\n**- 1.4版本**\n\n> 删除设置固定第一列setFixedFirstColumn方法，column的setFixed(boolean fixed)来固定任意列。\n>支持首尾动态添加数据SmartTable.addData(List<T> t,boolean isFoot)来实现添加数据.实现增量解析数据和计算表格大小，效率更高。\n> 修复缩放中心偏移问题；\n> 支持内容多行显示。\n![内容多行显示](/img/multline.jpg)\n\t\n\n**- 1.3版本**\n\n- 设置单个格子背景\n\n>  在网上参考了```html```的```table```,发现样式好看多了，按到这个思路，SmartTable增加了支持对单个格子的不同背景支持，在```TableConfig```里面有5个```IBackgroundFormat```样式，可以根据```boolean isDraw(T t)```返回数据做出判断是否绘制背景```drawBackground```，默认绘制整个背景，当然你可以自己定义```IBackgroundFormat```使用其他形状。\n\n- 设置单个格子字体\n\n> 由于支持到单个格子背景的支持，字体颜色也需要根据背景还进行调整，所以又支持单个格子的字体设置，```IBackgroundFormat```中有 ```int getTextColor(T t)```,你只需重写它，根据需求设置不同颜色。\n\n- 分页\n\n> 在客户端太多数据体验不好，所以开发分页模式，在未使用注解情况下，只需要使用```PageTableData```分页表格数据类 代替之前```TableData```表格数据类即可，使用```PageTableData```的```setPageSize```方法设置每页数量。分页就完成了。\n如果你使用注解，请在```@SmartTable```注解元素添加```pageSize```属性即可，setData会返回```PageTableData```对象，你可以使用它完成后面其他的设置。\n\n- 其他\n\n> SmartTable 增加notifyDataChanged方法用于重新解析计算布局；\n\n> 提供back方法fling到原点；\n\n> 增加网络请求图片显示例子。\n\n**- 1.2版本**\n\n> 自动统计，排序（也可自定义统计规则）；\n>  表格批注；\n> 缩放模式和滚动模式.\n\n**- 1.1版本**\n\n>  表格列标题组合；\n>  表格固定左序列、顶部序列、第一行、列标题、统计行；\n>  自动统计，排序（也可自定义统计规则）；\n\n>  表格内容、列标题点击事件；\n\n\n\n**- 1.0版本**\n\n>  快速配置自动生成表格；\n>  自动计算表格宽高；\n>  表格各组成背景、文字、网格、padding等配置；\n>  表格图文、序列号、列标题格式化；\n>  支持注解模式。\n"
        },
        {
          "name": "README_old_version_en.md",
          "type": "blob",
          "size": 2.9892578125,
          "content": "# SmartTable version of history\n\n###### An Android automatically generated table framework\n\n\n**- version 1.6**\n\n> repair the zoom offset problem\n> increase import Excel\nIncrease cell merge\n> increase the upper left corner voids formatting\n\n**- version 1.5**\n\n> fix the zoom problem\n> add ArrayTableData to support two dimensional arrays\n\n**- version 1.4**\n\n> delete set the fixed first column setFixedFirstColumn method, column's setFixed (Boolean fixed) to fix any column.\n> support SmartTable.addData List<T> t (Boolean isFoot) to add data. Incremental data analysis and computation form size are more efficient.\n> repair the zoom center offset problem;\n> support content multiline display.\n![content multiline display](/img/multline.jpg)\n\n\n**-  version 1.3**\n\n- setting a single lattice background\n\nIn the online reference ```html``` > ```table```, find the pattern pretty much, according to this idea, SmartTable added support for different backgrounds on single grid support, there are 5 ```IBackgroundFormat``` style in ```TableConfig```, according to ```boolean isDraw (T T) to determine whether ` ` ` return data to draw the background of ```drawBackground```, the default of drawing the whole background. Of course, you can define your own ```IBackgroundFormat``` using other shapes.\n\n- setting a single lattices font\n\nDue to a single grid support > background support, font color is also need to adjust according to the background, so it supports a single lattice font settings, ```int getTextColor ```IBackgroundFormat``` (T T) ', you only need to rewrite it, according to the needs of different color settings.\n\n- paging\n\n\"Too much data on the client experience is not good, so the development of paging mode, without using the annotation case, only need to use the ```PageTableData``` page table data instead of tabular data before the ```TableData``` class, the ```setPageSize``` method uses the ```PageTableData``` settings page number. The paging is finished.\nIf you use annotations, please annotate elements in ```@SmartTable```, add ```pageSize``` attribute, setData will return ```PageTableData``` object, you can use it to finish other settings.\n\n- other\n\n> SmartTable adds the notifyDataChanged method to re parse the calculation layout;\n\n> provides the back method fling to the origin;\n\n> increase the network request picture display example.\n\n**-version 1.2**\n\nAutomatic statistics, sorting (also customizable statistics rules);\n> form annotation;\n> zoom mode and scroll mode.\n\n**-  version 1.1**\n\nTable column header combinations;\nThe table is fixed to the left sequence, the top sequence, the first line, the column headline and the statistical line.\nAutomatic statistics, sorting (also customizable statistics rules);\n\n> table content, column headlines, click events;\n\n\n\n**-  version 1.0**\n\nFaster configuration automatically generates forms;\n> automatic calculation form is wide;\n> the configuration of the form, text, grid, padding and so on;\nTable schema, sequence number, column headline formatting;\n> support the annotation mode.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.6376953125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    \n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "form",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7373046875,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\nandroid.enableAapt2=false\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0234375,
          "content": "include ':app', ':form'\n"
        },
        {
          "name": "use.md",
          "type": "blob",
          "size": 4.083984375,
          "content": "## SmartTable 2.0\n\n##### 背景\n\n> 在SmartTable 背景分为两类，一种是修改组件整体背景和组件格子背景。举个栗子，你想要修改整个内容区域背景颜色，只需要\n\n```\n  table.getConfig().setContentBackground(new IBackgroundFormat() {\n            @Override\n            public void drawBackground(Canvas canvas, Rect rect, Paint paint) {\n                paint.setColor(设置你想要的颜色);\n                canvas.drawRect(rect,paint);\n            }\n        });\n\n```\n> 而如果你想要内容行间隔交替变色\n\n```\ntable.getConfig().setContentCellBackgroundFormat(new ICellBackgroundFormat<CellInfo>() {\n            @Override\n            public void drawBackground(Canvas canvas, Rect rect, CellInfo cellInfo, Paint paint) {\n                if(cellInfo.row%2==0){\n                    paint.setColor(设置你想要的颜色);\n                   canvas.drawRect(rect,paint);\n                }\n            }\n\n            @Override\n            public int getTextColor(CellInfo cellInfo) {\n                return 0;\n            }\n        });\n\n```\n\n> 下面是所有组件背景的配置：\n\n```\n        //设置内容背景\n        table.getConfig().setContentBackground(new IBackgroundFormat(){...});\n         //设置X序号行背景(顶部序号)\n        table.getConfig().setXSequenceBackground(new IBackgroundFormat(){...});\n          //设置Y序号行背景(左侧序号)\n        table.getConfig().setYSequenceBackground(new IBackgroundFormat(){...});\n          //设置统计行背景 (需要开启统计行)\n        table.getConfig().setCountBackground(new IBackgroundFormat(){...});\n           //设置列标题背景\n        table.getConfig().setColumnTitleBackground(new IBackgroundFormat(){...});\n```\n\n> 组件格子背景的配置：\n\n```\n        table.getConfig().setContentCellBackgroundFormat(new ICellBackgroundFormat<CellInfo>() {...});\n        table.getConfig().setColumnCellBackgroundFormat(new ICellBackgroundFormat<CellInfo>() {...});\n        table.getConfig().setCountBgCellFormat(new ICellBackgroundFormat<CellInfo>() {...});\n        table.getConfig().setXSequenceCellBgFormat(new ICellBackgroundFormat<CellInfo>() {...});\n        table.getConfig().setYSequenceCellBgFormat(new ICellBackgroundFormat<CellInfo>() {...}) ;\n```\n\n> 细心的同学肯定发现，组件背景实现是```IBackgroundFormat```，而组件格子背景是实现```ICellBackgroundFormat```。\n\n> ```IBackgroundFormat```中需要实现 ```public void drawBackground(Canvas canvas, Rect rect, Paint paint)```,有了画布，绘制范围，画笔三个参数就可以绘制背景了，你可以绘制背景是一个圆，五角星，或者一张图片。如果你只是想设置背景颜色，你可以使用基本实现类```new BaseBackgroundFormat(getResources().getColor(R.color.white))```。\n\n> ```ICellBackgroundFormat```中需要实现 ``` public void drawBackground(Canvas canvas, Rect rect, CellInfo cellInfo, Paint paint)， public int getTextColor(CellInfo cellInfo)```,有了画布，绘制范围，画笔三个参数就可以绘制背景了，在CellInfo 里面有一个格子的基本信息，比如数据data,行row 列 col ,你可以根据条件判断是否绘制，咋绘制。```getTextColor```方法，你可以根据格子信息来调整字体的颜色，这样可以保持格子的美观。如果你只是想改变格子的北京颜色，你可以使用实现类 ICellBackgroundFormat\n\n        下面是内容背景间隔颜色实例\n```\n ICellBackgroundFormat<Integer> backgroundFormat = new BaseCellBackgroundFormat<Integer>() {\n            @Override\n            public int getBackGroundColor(Integer position) {\n                if(position%2 == 0){\n                    return ContextCompat.getColor(MinModeActivity.this,R.color.arc1);\n                }\n                return TableConfig.INVALID_COLOR;\n\n            }\n\n\n            @Override\n            public int getTextColor(Integer position) {\n                if(position%2 == 0) {\n                    return ContextCompat.getColor(MinModeActivity.this, R.color.white);\n                }\n                return TableConfig.INVALID_COLOR;\n            }\n        };\n```\n"
        }
      ]
    }
  ]
}