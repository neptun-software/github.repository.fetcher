{
  "metadata": {
    "timestamp": 1736708816428,
    "page": 341,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjM0OA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitcoinj/bitcoinj",
      "stars": 5023,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.17578125,
          "content": "build.Containerfile\n**/.*\n\n# bitcoinj\n**/*.wallet\n**/*.spvchain\n\n# Gradle\n**/build/\ngradle/\ngradlew*\n\n# IntelliJ\n**/*.iml\n.idea/\n\n# Eclipse\n**/.project\n**/.classpath\n**/.settings/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.ai -crlf -diff -merge\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "target\nbuild\n.gradle\ngradlew\ngradlew.bat\ngradle/wrapper\n.project\n.classpath\n.settings\nbin/\n.idea\n*.iml\nout/\n*.chain\n*.spvchain\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 1.1865234375,
          "content": "reference:\n  image: debian:bookworm-slim\n  before_script:\n    - apt-get update\n    - apt-get -y install ca-certificates buildah\n    # switch to iptables legacy, as GitLab CI doesn't support nftables\n    - apt-get -y install --no-install-recommends iptables\n    - update-alternatives --set iptables /usr/sbin/iptables-legacy\n  script:\n    - buildah build --file build.Containerfile --output build .\n  after_script:\n    - sha256sum build/core/* build/wallettool/bin/*  build/wallettool/lib/*\n  artifacts:\n    name: bitcoinj-$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA\n    paths:\n      - build/**\n\nbookworm-jdk17:\n  image: debian:bookworm-slim\n  before_script:\n    - apt-get update\n    - apt-get -y install openjdk-17-jdk-headless gradle\n  script:\n    - gradle --settings-file settings-debian.gradle build :bitcoinj-base:publishToMavenLocal :bitcoinj-core:publishToMavenLocal :bitcoinj-wallettool:installDist --init-script build-scan-agree.gradle --scan --stacktrace\n  after_script:\n    - gradle --version\n    - sha256sum core/build/libs/*.jar wallettool/build/install/wallet-tool/bin/*  wallettool/build/install/wallet-tool/lib/*.jar\n\nsast:\n  stage: test\n\ninclude:\n  - template: Security/SAST.gitlab-ci.yml\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.720703125,
          "content": "$ git log --format='%aN' | sort -u\n\nAaron Voisine\nAdam Mackler\nAlexander Lolis\nAlex Taylor\nAlex Voloshko\nAlok Menghrajani\nAlon Muroch\nAmichai Rothman\nAndreas Schildbach\nandrewtoth\nAnton Kumaigorodski\nBartosz Milczarek\nBas van Schaik\nBennett Hoffman\nBigAdam2005\nBo-Ye\nCameron MacKeen\nCarlos Lopez-Camey\nCarsten Otto\nChang Ming\nChris\nCraig Raw\ncyberzac\nDaniel James\nDave Collins\nDavid Kingsbury\nDavid Wilson (dcw312)\nDenis O\ndexX7\nDiego Basch\nelbandi\neleetas\nEn-Ran Zhou\nEric Winer\nErik Tierney\nFireduck\nfreak\nGary Rowe\nGiannis Dzegoutanis\nGitju\nGiuseppe Raveduto\nGlenn Marien\nGreenAddress\nGreg Laun\ngubatron\nHarald Hoyer\nHaoyuan Ge (harryge00)\nHashEngineering\nJakob Janecek\nJakob Stuber\nJameson Lopp\nJan Vornberger\nJarl Fransson\nJean-Pierre Rupp\nJim Burton\nJiri Peinlich\nJohnathan\nJohn L. Jegutanis\nJohny George\nJonathan Cross\nJon Griffiths\nJonny Heggheim\nJustas Dobiliauskas\nKalpesh Parmar\nKen Sedgwick\nKevin Greene\nKirill Vlasov\nKosta Korenkov\nkushti\nlangerhans\nLoco\nManfred Karrer\nMarc-André Tremblay\nMartin Zachrison\nmatija.mazi@gmail.com\nMatt Bogosian\nMatt Corallo\nMatthew Leon\nMatthew Shaylor\nMichael Bell\nMichael Bumann\nMike Hearn\nMike Mancini\nMike Rosseel\nMiron Cuperman\nmonk\nMora Zyx\nmruddy\nNelson Melina\nNicola Atzei\nOğuzhan Çevik\nollekullberg\nOscar Guindzberg\nPavol Rusnak\npeacekeeper\nPeter Dettman\nPeter Stockli\nPeter Todd\nPhilip Whitehouse\nPiotr Włodarek\nRichard Green (ragmondo)\nPremek\nRobin Owens\nRonald Hoffman (ScripterRon)\nRoss Nicoll\nSaulius Beinorius\nSean Gilligan\nSebastian Ortega\nShafiullah Rahman\nSimon de la Rouviere\nSimon Vermeersch\nsqrrm\nStephan Oeste\nStephen Reed\ntau3\nThomas König\nTiberiu Nitan\nTim Strasser\nTomasz Ludek\ntroggy\nTyler Houlihan\nueno\nWillem Noort\nWill Shackleton\nWojciech Langiewicz\nXiaofeng Guo\nXimo Guanter\nzkejid\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 5.076171875,
          "content": "image:https://github.com/bitcoinj/bitcoinj/workflows/Java%20CI/badge.svg[GitHub Build Status,link=https://github.com/bitcoinj/bitcoinj/actions]\nimage:https://gitlab.com/bitcoinj/bitcoinj/badges/master/pipeline.svg[GitLab Build Status,link=https://gitlab.com/bitcoinj/bitcoinj/-/pipelines]\nimage:https://coveralls.io/repos/bitcoinj/bitcoinj/badge.png?branch=master[Coverage Status,link=https://coveralls.io/r/bitcoinj/bitcoinj?branch=master]\n\nimage::https://img.shields.io/badge/chat-Join%20bitcoinj--users%20on%20Matrix-blue[Join the bitcoinj-users Matrix room, link=https://matrix.to/#/#bitcoinj-users:matrix.org]\n\n### Welcome to bitcoinj\n\nThe bitcoinj library is a Java implementation of the Bitcoin protocol, which allows it to maintain a wallet and send/receive transactions without needing a local copy of Bitcoin Core. It comes with full documentation and some example apps showing how to use it.\n\n### Technologies\n\n* Java 8+ (needs Java 8 API or Android 8.0 API, compiles to Java 8 bytecode) for `base` and `core` module\n* Java 17+ for `tools`, `wallettool`, `examples` and the JavaFX-based `wallettemplate`\n* https://gradle.org/[Gradle]\n** Gradle 7.3+ for building the whole project or\n** Debian Gradle 4.4 for just the `base`, `core`, `tools`, `wallettool` and `examples` modules (see \"reference build\" below)\n* https://github.com/google/protobuf[Google Protocol Buffers] - for use with serialization and hardware communications\n\n### Getting started\n\nTo get started, it is best to have the latest JDK and Gradle installed. The HEAD of the `master` branch contains the latest development code and various production releases are provided on feature branches.\n\n#### Building from the command line\n\nOfficial builds are currently using JDK 17. Our GitHub Actions build and test with JDK 17 and 21.\n\n```\ngradle clean build\n```\nThe outputs are under the `build` directory.\n\nTo perform a full build _without_ unit/integration _tests_ use:\n```\ngradle clean assemble\n```\n\n#### Building from an IDE\n\nAlternatively, just import the project using your IDE. http://www.jetbrains.com/idea/download/[IntelliJ] has Gradle integration built-in and has a free Community Edition. Simply use `File | New | Project from Existing Sources` and locate the `build.gradle` in the root of the cloned project source tree.\n\n### Building and Using the Wallet Tool\n\nThe *bitcoinj* `wallettool` subproject includes a command-line Wallet Tool (`wallet-tool`) that can be used to create and manage *bitcoinj*-based wallets (both the HD keychain and SPV blockchain state.) Using `wallet-tool` on Bitcoin's test net is a great way to learn about Bitcoin and *bitcoinj*.\n\nTo build an executable shell script that runs the command-line Wallet Tool, use:\n```\ngradle bitcoinj-wallettool:installDist\n```\n\nYou can now run the `wallet-tool` without parameters to get help on its operation:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool\n```\n\nTo create a test net wallet file in `~/bitcoinj/bitcoinj-test.wallet`, you would use:\n```\nmkdir ~/bitcoinj\n```\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet create\n```\n\nTo sync the newly created wallet in `~/bitcoinj/bitcoinj-test.wallet` with the test net, you would use:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet sync\n```\n\nTo dump the state of the wallet in `~/bitcoinj/bitcoinj-test.wallet` with the test net, you would use:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet dump\n```\n\nNOTE: These instructions are for macOS/Linux, for Windows use the `wallettool/build/install/wallet-tool/bin/wallet-tool.bat` batch file with the equivalent Windows command-line commands and options.\n\n### Building the reference build\n\nOur reference build (which is also used for our releases) is running within a container to provide good reproducibility.\nBuildah 1.26+, Podman 4.1+ and Docker (with BuildKit) are supported. We tested various combinations of host OSes\n(Debian, Ubuntu, macOS, Windows+WSL) and architectures (amd64, arm64). For usage instructions see `build.Containerfile`.\n\nThis uses Debian Gradle with the `settings-debian.gradle` settings. If you happen to use Debian and have Gradle\ninstalled from the Debian repository, you can invoke these settings directly:\n\n```\ngradle --settings-file settings-debian.gradle clean build\n```\n\n### Example applications\n\nThese are found in the `examples` module.\n\n### Where next?\n\nNow you are ready to https://bitcoinj.github.io/getting-started[follow the tutorial].\n\n### Testing a SNAPSHOT build\n\nBuilding apps with official releases of *bitcoinj* is covered in the https://bitcoinj.github.io/getting-started[tutorial].\n\nIf you want to develop or test your app with a https://jitpack.io[Jitpack]-powered build of the latest `master` or `release-0.17` branch of *bitcoinj* follow the dynamically-generated instructions for that branch by following the correct link.\n\n* https://jitpack.io/#bitcoinj/bitcoinj/master-SNAPSHOT[master] branch\n* https://jitpack.io/#bitcoinj/bitcoinj/release-0.17-SNAPSHOT[release-0.17] branch\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-scan-agree.gradle",
          "type": "blob",
          "size": 1.373046875,
          "content": "/* Gradle Init Script to non-interactively agree to the Gradle Build Scan terms of service\n * Provided by Stefan Wolf via GitHub Issues\n * See: https://github.com/gradle/gradle/issues/26316#issuecomment-1739245349\n * To use add `--scan --init-script build-scan-agree.gradle` to your Gradle command-line\n * Works with Gradle 4.4 - Gradle 8.4 (at least)\n */\ndef isTopLevelBuild = gradle.getParent() == null\n\nif (isTopLevelBuild) {\n    def gradleVersion = GradleVersion.current().baseVersion\n    def atLeastGradle6 = gradleVersion >= GradleVersion.version(\"6.0\")\n    if (atLeastGradle6) {\n        settingsEvaluated { settings ->\n            settings.pluginManager.withPlugin(\"com.gradle.enterprise\") {\n                configureExtension(settings.extensions[\"gradleEnterprise\"].buildScan)\n            }\n        }\n    } else {\n        rootProject { root ->\n            root.pluginManager.withPlugin(\"com.gradle.build-scan\") {\n                configureExtension(root.extensions[\"buildScan\"])\n            }\n        }\n    }\n}\n\nvoid configureExtension(extension) {\n    extension.with {\n        if (delegate.metaClass.respondsTo(delegate, 'setTermsOfServiceUrl')) {\n            termsOfServiceUrl = \"https://gradle.com/terms-of-service\"\n            termsOfServiceAgree = \"yes\"\n        } else {\n            licenseAgreementUrl = \"https://gradle.com/terms-of-service\"\n            licenseAgree = \"yes\"\n        }\n    }\n}\n"
        },
        {
          "name": "build.Containerfile",
          "type": "blob",
          "size": 1.6328125,
          "content": "#\n# Reproducible reference build\n#\n# Usage:\n#\n# buildah build --file build.Containerfile --output <outputdir> .\n# or\n# podman build --file build.Containerfile --output <outputdir> .\n# or\n# docker build --file build.Containerfile --output <outputdir> .\n#\n# The build artifacts are written to the specified output directory.\n# To also run tests, add\n#\n# --build-arg ADDITIONAL_GRADLE_TASK=test\n#\n\n# stage: set up debian environment\nFROM debian:bookworm-slim AS setup-stage\n\nENV DEBIAN_FRONTEND noninteractive\nRUN /usr/bin/apt-get update && \\\n    /usr/bin/apt-get --yes install openjdk-17-jdk-headless gradle && \\\n    /usr/sbin/adduser --disabled-login --gecos \"\" builder\n\n# stage: build\nFROM setup-stage AS build-stage\n\nARG ADDITIONAL_GRADLE_TASK=\"\"\n\n# give up privileges\nUSER builder\nWORKDIR /home/builder\n\n# copy project source code\nCOPY --chown=builder / project/\n\n# build project\nRUN /usr/bin/gradle --project-dir project/ \\\n    --no-build-cache --no-daemon --no-parallel \\\n    --settings-file=settings-debian.gradle \\\n    -Dmaven.repo.local=repo \\\n    clean ${ADDITIONAL_GRADLE_TASK} :bitcoinj-base:publishToMavenLocal :bitcoinj-core:publishToMavenLocal :bitcoinj-wallettool:installDist\n\n# stage: export build output\nFROM scratch AS export-stage\nCOPY --from=build-stage \\\n    /home/builder/repo/org/bitcoinj/bitcoinj-base/*/*.jar \\\n    /home/builder/repo/org/bitcoinj/bitcoinj-base/*/*.pom \\\n    /base/\nCOPY --from=build-stage \\\n    /home/builder/repo/org/bitcoinj/bitcoinj-core/*/*.jar \\\n    /home/builder/repo/org/bitcoinj/bitcoinj-core/*/*.pom \\\n    /core/\nCOPY --from=build-stage \\\n    /home/builder/project/wallettool/build/install/wallet-tool/ \\\n    /wallettool/\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.068359375,
          "content": "import org.gradle.util.GradleVersion\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    // If using Gradle 7, use the compatible protobuf plugin, else use the one that works with oldest supported Gradle\n    boolean isGradle7 = GradleVersion.current() >= GradleVersion.version(\"7.0\")\n    def gradleProtobufVersion = isGradle7 ? \"0.9.4\" : \"0.8.10\"\n    if (isGradle7) {\n        System.err.println \"Warning: Using com.google.protobuf:protobuf-gradle-plugin:${gradleProtobufVersion} because ${GradleVersion.current()}\"\n    }\n    dependencies {\n        classpath \"com.google.protobuf:protobuf-gradle-plugin:${gradleProtobufVersion}\"\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n\n    group = 'org.bitcoinj'\n\n    // Ensure standard artifacts in all projects are built reproducibly\n\n    tasks.withType(AbstractArchiveTask) {\n        preserveFileTimestamps = false\n        reproducibleFileOrder = true\n    }\n\n    tasks.withType(Jar) {\n        dirMode = 0755\n        fileMode = 0644\n    }\n\n    tasks.withType(Javadoc) {\n        options.noTimestamp = true\n    }\n}\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "designdocs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings-debian.gradle",
          "type": "blob",
          "size": 1.0234375,
          "content": "/*\n * Setting file only for Debian Gradle 4.4.1.\n * Usage: gradle --settings-file=settings-debian.gradle build\n */\n\nimport org.gradle.util.GradleVersion\n\n// required Gradle version for build\ndef gradleVersion = GradleVersion.version(\"4.4.1\")\n\nif (GradleVersion.current() != gradleVersion) {\n    throw new GradleScriptException(\"bitcoinj build requires Debian Gradle ${gradleVersion.version}\", null)\n}\n\n// we can't test for Java 17 in Gradle 4.4, so at least we test for Java 11\nif (!JavaVersion.current().isJava11Compatible()) {\n    throw new GradleScriptException(\"bitcoinj build requires Java 17 or later\", null)\n}\n\nrootProject.name = 'bitcoinj-parent'\n\ninclude 'test-support'\nproject(':test-support').name = 'bitcoinj-test-support'\n\ninclude 'base'\nproject(':base').name = 'bitcoinj-base'\n\ninclude 'core'\nproject(':core').name = 'bitcoinj-core'\n\ninclude 'tools'\nproject(':tools').name = 'bitcoinj-tools'\n\ninclude 'wallettool'\nproject(':wallettool').name = 'bitcoinj-wallettool'\n\ninclude 'examples'\nproject(':examples').name = 'bitcoinj-examples'\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.25,
          "content": "/*\n * Settings file for Gradle 7.3 or later.\n * For building with Debian Gradle 4.4, use the settings-debian.gradle settings.\n */\n\nimport org.gradle.util.GradleVersion\n\n// Minimum Gradle version for build\ndef minGradleVersion = GradleVersion.version(\"7.3\")\n\nrootProject.name = 'bitcoinj-parent'\n\nif (GradleVersion.current() < minGradleVersion) {\n    throw new GradleScriptException(\"bitcoinj build requires Gradle ${minGradleVersion.version} or later\", null)\n}\nif (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {\n    throw new GradleScriptException(\"bitcoinj build requires Java 17 or later\", null)\n}\n\ninclude 'test-support'\nproject(':test-support').name = 'bitcoinj-test-support'\n\ninclude 'base'\nproject(':base').name = 'bitcoinj-base'\n\ninclude 'core'\nproject(':core').name = 'bitcoinj-core'\n\ninclude 'tools'\nproject(':tools').name = 'bitcoinj-tools'\n\ninclude 'wallettool'\nproject(':wallettool').name = 'bitcoinj-wallettool'\n\ninclude 'examples'\nproject(':examples').name = 'bitcoinj-examples'\n\ninclude 'wallettemplate'\nproject(':wallettemplate').name = 'bitcoinj-wallettemplate'\n\ninclude 'integration-test'\nproject(':integration-test').name = 'bitcoinj-integration-test'\n\ninclude 'examples-kotlin'\nproject(':examples-kotlin').name = 'bitcoinj-examples-kotlin'\n"
        },
        {
          "name": "test-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wallettemplate",
          "type": "tree",
          "content": null
        },
        {
          "name": "wallettool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}