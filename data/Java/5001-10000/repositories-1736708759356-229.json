{
  "metadata": {
    "timestamp": 1736708759356,
    "page": 229,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "btraceio/btrace",
      "stars": 5845,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7041015625,
          "content": "*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n\n# Un-ignore specific files\n!btrace-instr/src/test/resources/packed/test-pack.jar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\nbuild\ndist\ndocs\nmake/netbeans/nbproject/private\nTEST-*\nmake/junit*\nmake/private.properties\nbtrace-benchmark/target\nbtrace-benchmark/build\nbenchmark/*.iml\njunit*\n/btrace-statsd/target/\n*.iml\n.gradle\n.idea\n!/lib/btrace-asm-*.jar\n!/lib/btrace-jctools-core-*.jar\n!/lib/btrace-hppcrt-*.jar\n!/test-lib/*.jar\nCHANGELOG.md\ngradle.properties\n/.nb-gradle/\n/.nb-gradle-properties\n.github_changelog_generator\n**/out/*\ngradle-wrapper.properties\n\n/.java.versions\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1064453125,
          "content": "[![Dev build](https://github.com/btraceio/btrace/workflows/BTrace%20CI%2FCD/badge.svg?branch=develop)](https://github.com/btraceio/btrace/actions?query=workflow%3A%22BTrace+CI%2FCD%22+branch%3Adevelop) [![Download](https://img.shields.io/github/v/release/btraceio/btrace?sort=semver)](https://github.com/btraceio/btrace/releases/latest) [![codecov.io](https://codecov.io/github/btraceio/btrace/coverage.svg?branch=develop)](https://codecov.io/github/btraceio/btrace?branch=develop) [![huhu](https://img.shields.io/badge/Slack-join%20chat-brightgreen\")](http://btrace.slack.com/) [![Join the chat at https://gitter.im/jbachorik/btrace](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/btraceio/btrace?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Project Stats](https://www.openhub.net/p/btrace/widgets/project_thin_badge.gif)](https://www.openhub.net/p/btrace)\n\n# btrace\n\nA safe, dynamic tracing tool for the Java platform\n\n## Version\n2.2.6\n\n## Quick Summary\nBTrace is a safe, dynamic tracing tool for the Java platform.\n\nBTrace can be used to dynamically trace a running Java program (similar to DTrace for OpenSolaris applications and OS). BTrace dynamically instruments the classes of the target application to inject tracing code (\"bytecode tracing\").\n\n## Credits\n* Based on [ASM](http://asm.ow2.org/)\n* Powered by [JCTools](https://github.com/JCTools/JCTools)\n* Powered by [hppcrt](https://github.com/vsonnier/hppcrt)\n* Optimized with [JProfiler Java Profiler](http://www.ej-technologies.com/products/jprofiler/overview.html)\n* Build env helper using [SDKMAN!](https://sdkman.io/)\n\n## Building BTrace\n\n### Setup\nYou will need the following applications installed\n\n* [Git](http://git-scm.com/downloads)\n* (optionally, the default launcher is the bundled `gradlew` wrapper) [Gradle](http://gradle.org)\n\n\n### Build\n\n#### Gradle\n```sh\ncd <btrace>\n./gradlew :btrace-dist:build\n```\nThe binary dist packages can be found in `<btrace>/btrace-dist/build/distributions` as the *.tar.gz, *.zip, *.rpm and *.deb files.\nThe exploded binary folder which can be used right away is located at `<btrace>/btrace-dist/build/resources/main` which serves as the __BTRACE_HOME__ location.\n\n\n## Using BTrace\n### Installation\nDownload a distribution file from the [release page](https://github.com/btraceio/btrace/releases/latest). Explode the binary distribution file (either *.tar.gz or *.zip) to a directory of your choice.\n\nYou may set the system environment variable __BTRACE_HOME__ to point to the directory containing the exploded distribution.\n\nYou may enhance the system environment variable __PATH__ with __$BTRACE_HOME/bin__ for your convenience.\n\nOr, alternatively, you may install one of the *.rpm or *.deb packages\n\n### Running\n* `<btrace>/bin/btrace <PID> <trace_script>` will attach to the __java__ application with the given __PID__ and compile and submit the trace script\n* `<btrace>/bin/btracec <trace_script>` will compile the provided trace script\n* `<btrace>/bin/btracer <compiled_script> <args to launch a java app>` will start the specified java application with the btrace agent running and the script previously compiled by *btracec* loaded\n\nFor the detailed user guide, please, check the [Wiki](https://github.com/btraceio/btrace/wiki/Home).\n\n### Maven Integration\nThe [maven plugin](https://github.com/btraceio/btrace-maven) is providing easy compilation of __BTrace__ scripts as a part of the build process. As a bonus you can utilize the _BTrace Project Archetype_ to bootstrap developing __BTrace__ scripts.\n\n## Contributing - !!! Important !!!\n\nPull requests can be accepted only from the signers of [Oracle Contributor Agreement](https://oca.opensource.oracle.com/)\n\n### Deb Repository\n\nUsing the command line, add the following to your /etc/apt/sources.list system config file:\n\n```\necho \"deb http://dl.bintray.com/btraceio/deb xenial universe\" | sudo tee -a /etc/apt/sources.list\n```\n\nOr, add the repository URLs using the \"Software Sources\" admin UI:\n\n```\ndeb http://dl.bintray.com/btraceio/deb xenial universe\n```\n\n### RPM Repository\n\nGrab the _*.repo_ file `wget https://bintray.com/btraceio/rpm/rpm -O bintray-btraceio-rpm.repo` and use it.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-dtrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-instr",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-services-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-services",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-statsd",
          "type": "tree",
          "content": null
        },
        {
          "name": "btrace-ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "btraceio.png",
          "type": "blob",
          "size": 14.826171875,
          "content": null
        },
        {
          "name": "btraceio_small.png",
          "type": "blob",
          "size": 15.4619140625,
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.1142578125,
          "content": "plugins {\n    id \"jacoco\"\n    alias(libs.plugins.spotless)\n}\n\nrepositories {\n    mavenCentral()\n}\n\nsubprojects {\n    apply from: rootProject.file('common.gradle')\n}\n\ntask mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {\n    title = 'All modules'\n    destinationDir = new File(project.buildDir, 'merged-javadoc')\n\n    // Note: The closures below are executed lazily.\n    source {\n        subprojects*.sourceSets*.main*.allSource\n    }\n    classpath.from {\n        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency) })*.resolve()\n    }\n}\n\nspotless {\n    java {\n        target 'src/*/java/**/*.java'\n        // note: you can use an empty string for all the imports you didn't specify explicitly, and '\\\\#` prefix for static imports\n        importOrder('java', 'javax', 'org.openjdk.btrace', '', '\\\\#org.openjdk.btrace', '\\\\#')\n        removeUnusedImports()\n\n        googleJavaFormat()   // has its own section below\n\n        formatAnnotations()  // fixes formatting of type annotations, see below\n\n        licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile\n    }\n}"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "common.gradle",
          "type": "blob",
          "size": 2.419921875,
          "content": "//\n// This file is to be applied to every subproject.\n//\n\napply plugin: 'java'\napply plugin: 'idea'\n\nproject.group = 'org.openjdk.btrace'\nproject.version = '2.2.6'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\next.getToolsJar = {\n    return javaToolchains.compilerFor {\n        languageVersion.set(JavaLanguageVersion.of(11))\n    }.get().metadata.installationPath.file(\"lib/tools.jar\")\n}\n\next.getJavac = { int version = 11 ->\n    return javaToolchains.compilerFor {\n        languageVersion.set(JavaLanguageVersion.of(version))\n    }.get().metadata.installationPath.file(\"bin/javac\")\n}\n\next.getJavadoc = {\n    return javaToolchains.compilerFor {\n        languageVersion.set(JavaLanguageVersion.of(8))\n    }.get().metadata.installationPath.file(\"bin/javadoc\")\n}\n\n[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'\n\ncompileJava {\n    sourceCompatibility = 8\n    targetCompatibility = 8\n    javaCompiler = javaToolchains.compilerFor {\n        languageVersion.set(JavaLanguageVersion.of(11))\n    }\n}\n\nrepositories {\n    mavenCentral()\n    // You may define additional repositories, or even remove \"mavenCentral()\".\n    // Read more about repositories here:\n    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories\n}\n\ndependencies {\n    // Adding dependencies here will add the dependencies to each subproject.\n\ttestImplementation libs.junit.jupiter\n}\n\nString mavenArtifactId = name\n\njavadoc {\n    options.addStringOption('Xdoclint:all,-missing', '-quiet')\n    options.encoding(\"UTF-8\")\n    executable = \"${getJavadoc()}\"\n    failOnError true\n}\n\ntask sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {\n    archiveClassifier = 'sources'\n    from sourceSets.main.allSource\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    archiveClassifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\nartifacts {\n    archives jar\n    archives sourcesJar\n    archives javadocJar\n}\n\ntask createFolders(description: 'Creates the source folders if they do not exist.') doLast {\n    sourceSets*.allSource*.srcDirs*.each { File srcDir ->\n        if (!srcDir.isDirectory()) {\n            println \"Creating source folder: ${srcDir}\"\n            srcDir.mkdirs()\n        }\n    }\n}\n\ntest {\n    useJUnitPlatform()\n    // Always run tests, even when nothing changed.\n    dependsOn 'cleanTest'\n\n    // Show test results.\n    testLogging {\n        events \"passed\", \"skipped\", \"failed\"\n    }\n}"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.849609375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 0.525390625,
          "content": "#! /bin/bash\n\nset -e\n\nexport JAVA_HOME=$JAVA_8_HOME\necho \"Building BTrace binary artifacts\"\n./gradlew -x test :btrace-dist:build\n\nmkdir -p build/reports\nfor VERSION in 8 11 17 18 19 20; do\n  declare home_string=JAVA_${VERSION}_HOME\n  if [ -z \"${!home_string}\" ]; then\n    echo \"Skipping test for Java ${VERSINO}\"\n    continue\n  fi\n  echo \"Running tests with TEST_JAVA_HOME=${!home_string}\"\n  TEST_JAVA_HOME=${!home_string} BTRACE_TEST_DEBUG=\"false\" ./gradlew -Pintegration test | tee -a build/reports/test_java_$VERSION.out  || true\ndone\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 2.96484375,
          "content": "rootProject.name = 'btrace-ng'\n\n// Find the directories containing a \"build.gradle\" file in the root directory\n// of the project. That is, every directory containing a \"build.gradle\" will\n// be automatically the subproject of this project.\ndef subDirs = rootDir.listFiles(new FileFilter() {\n    boolean accept(File file) {\n        if (!file.isDirectory()) {\n            return false\n        }\n        if (file.name == 'buildSrc') {\n            return false\n        }\n        return new File(file, 'build.gradle').isFile()\n    }\n})\n\nsubDirs.each { File dir ->\n    if (dir.name.startsWith(\"btrace-\")) {\n        include dir.name\n    }\n    include \"integration-tests\"\n    include \"benchmarks:agent-benchmark\"\n    include \"benchmarks:runtime-benchmarks\"\n}\n\ndependencyResolutionManagement {\n    versionCatalogs {\n        libs {\n            // Families...\n            version('asm', '9.7.1')\n            version('jmh', '1.36')\n            version('jmhGradlePlugin', '0.7.2')\n            version('slf4j', '1.7.36')\n            version('junit', '5.11.3')\n\n            // *** Gradle plugins ***\n            plugin ('spotless', 'com.diffplug.spotless').version('6.11.0')\n            plugin ('versioning', 'net.nemerosa.versioning').version('2.15.1')\n            plugin ('ospackage', 'com.netflix.nebula.ospackage').version('11.10.0')\n            plugin ('shadow', 'com.github.johnrengelman.shadow').version('7.1.2')\n            plugin ('sdkman-vendors', 'io.sdkman.vendors').version('3.0.0')\n            plugin ('foojay-resolver', 'org.gradle.toolchains.foojay-resolver-convention').version('0.8.0')\n\n            plugin ('jmh', 'me.champeau.jmh').versionRef('jmhGradlePlugin')\n\n            // *** Libraries ***\n\n            // https://mvnrepository.com/artifact/com.google.auto.service\n            library ('autoService', 'com.google.auto.service', 'auto-service').version('1.1.1')\n            // https://mvnrepository.com/artifact/org.jctools\n            library ('jctools', 'org.jctools', 'jctools-core').version('4.0.5')\n\n\n            // https://mvnrepository.com/artifact/org.slf4j\n            library ('slf4j',  'org.slf4j', 'slf4j-api').versionRef('slf4j')\n            library ('slf4j-simple',  'org.slf4j', 'slf4j-simple').versionRef('slf4j')\n\n            // https://mvnrepository.com/artifact/org.ow2.asm\n            library ('asm',  'org.ow2.asm', 'asm').versionRef('asm')\n            library ('asm-tree',  'org.ow2.asm', 'asm-tree').versionRef('asm')\n            library ('asm-util',  'org.ow2.asm', 'asm-util').versionRef('asm')\n\n            // https://mvnrepository.com/artifact/org.openjdk.jmh\n            library ('jmh', 'org.openjdk.jmh', 'jmh-core').versionRef('jmh')\n            library ('jmh-annprocess', 'org.openjdk.jmh', 'jmh-generator-annprocess').versionRef('jmh')\n\n            // https://mvnrepository.com/artifact/org.junit.jupiter\n            library ('junit', 'org.junit', 'junit-bom').versionRef('junit')\n            library ('junit-jupiter', 'org.junit.jupiter', 'junit-jupiter').versionRef('junit')\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}