{
  "metadata": {
    "timestamp": 1736708777210,
    "page": 263,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amlcurran/ShowcaseView",
      "stars": 5596,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\nlib/\ntarget/\nout/\nsample/gen-external-apklibs\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Eclipse project files\n.classpath\n.project\n\n# Os specific files\n.DS_Store\n\n# IntelliJ project files\n*.iml\n*.ipr\n*.iws\n.idea/i\n.idea/\n\n# Maven Files\npom.xml.*\nsettings.xml\n\n# Gradle\n.gradle\nbuild\n\nlibrary/coverage-error.log\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.208984375,
          "content": "language: android\nandroid:\n  components:\n    - android-23\n    - build-tools-22.0.1\n    - extra-google-m2repository\n    - extra-android-support\n    - extra-android-m2repository\n\nscript: ./gradlew assemble test check"
        },
        {
          "name": "README-template.md",
          "type": "blob",
          "size": 3.931640625,
          "content": "ShowcaseView\n---\n\nThe ShowcaseView (SCV) library is designed to highlight and showcase specific parts of apps to the user with a distinctive and attractive overlay. This library is great for pointing out points of interest for users, gestures, or obscure but useful items.\n\n| Holo | \"New style\" | Material |\n| --- | --- | --- |\n| ![Holo style showcaseview](./example2@2x.png) | ![new style showcaseview](./example@2x.png) | ![Material style showcaseview](./material.png) |\n\nThe library is based on the \"Cling\" view found in the Launcher on Ice-Cream Sandwich and Jelly Bean.\n\nProject set-up\n====\n\n**ShowcaseView currently supports API LEVEL 11+**\n\nIf you're using a Gradle-based project, then you can add SCV as a dependency directly:\n\n~~~\ncompile 'com.github.amlcurran.showcaseview:library:@version@'\n~~~\n\nIf you're using Maven (but not Gradle), you can add the APKlib as a dependency:\n\n~~~\n<dependency>\n  <groupId>com.github.amlcurran.showcaseview</groupId>\n  <artifactId>library</artifactId>\n  <version>@version@</version>\n  <type>apklib</type>\n</dependency>\n~~~\n\nIf you're using a standard project without either Maven or Gradle, you'll have to download the project, and the add the library manually to your project.\n\n\nUsage\n====\n\nTo use ShowcaseView, use the Builder pattern.\n\nAs an example:\n\n~~~\nnew ShowcaseView.Builder(this)\n    .setTarget(new ActionViewTarget(this, ActionViewTarget.Type.HOME))\n    .setContentTitle(\"ShowcaseView\")\n    .setContentText(\"This is highlighting the Home button\")\n    .hideOnTouchOutside()\n    .build();\n~~~\n\nYou can use styles to customise how a ShowcaseView looks. I'll write more documentation soon, but for now, check out the sample project's [styles](https://github.com/amlcurran/ShowcaseView/blob/master/sample/src/main/res/values/styles.xml).\n\nSample Project\n----\nThere's a sample project available which you can find in the project, or as an app on the [Google Play Store](https://play.google.com/store/apps/details?id=com.espian.showcaseview.sample).\n\nWhat's the legacy branch?\n----\nThe [legacy branch](https://github.com/amlcurran/ShowcaseView/tree/legacy) is still available for people to use. This has more features than the master branch, but it more unwieldy to use and less stable. I don't support it at all - you'll have to build and compile it yourself. It isn't available on Maven Central either.\n\nIs it worth using?\n----\nPerhaps. Why not ask\n[Google](https://github.com/googlecast/CastVideos-android), [iPlayer Radio](https://play.google.com/store/apps/details?id=uk.co.bbc.android.iplayerradio),\nor [AllCast](https://play.google.com/store/apps/details?id=com.koushikdutta.cast), which each use the library?\n\nPrevious users include The Guardian and HaxSync\n\nWhat's missing in v5\n---\n\n- ShowcaseViews: the class which queues up ShowcaseViews in a tutorial-type method. I never\nreally liked this class (generally, you should use SCV sparingly); I'll add it back in based on\nthe Builder class when I can.\n- Ghostly hand: this has gone for now until I can test-drive it back in.\n- Scale multiplier: this has gone for simplicity - if people really loved it I'll add in back in\n\nFAQs\n---\n\n**Where has X feature gone?**\n\nLook one paragraph up!\n\n**Waaaah, but I really liked feature X!!!**\n\nSwitch to the legacy branch and use that one then! All legacy features are in there.\n\n**What happened to all the other constructors?**\n\nGone. You should be using the new Target API.\n\n**What if I want to add feature X?**\n\nAt the moment, I'm not taking any feature requests. It's unlikely I'll take many anyway,\nunless I feel they are both useful and well tested. If you have some cosmetic tweak then I don't\nwant that added into the library as *another* option. But, if you need to make a tweak to the\nlibrary to add such a tweak to your own, overridden ShowcaseView then that is totally great.\n\n\nCopyright and Licensing\n----\n\nCopyright Alex Curran ([@amlcurran](https://twitter.com/amlcurran)) © 2012-2014. All rights reserved.\n\nThis library is distributed under an Apache 2.0 License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9306640625,
          "content": "ShowcaseView\n---\n\nThe ShowcaseView (SCV) library is designed to highlight and showcase specific parts of apps to the user with a distinctive and attractive overlay. This library is great for pointing out points of interest for users, gestures, or obscure but useful items.\n\n| Holo | \"New style\" | Material |\n| --- | --- | --- |\n| ![Holo style showcaseview](./example2@2x.png) | ![new style showcaseview](./example@2x.png) | ![Material style showcaseview](./material.png) |\n\nThe library is based on the \"Cling\" view found in the Launcher on Ice-Cream Sandwich and Jelly Bean.\n\nProject set-up\n====\n\n**ShowcaseView currently supports API LEVEL 11+**\n\nIf you're using a Gradle-based project, then you can add SCV as a dependency directly:\n\n~~~\ncompile 'com.github.amlcurran.showcaseview:library:5.4.3'\n~~~\n\nIf you're using Maven (but not Gradle), you can add the APKlib as a dependency:\n\n```xml\n<dependency>\n  <groupId>com.github.amlcurran.showcaseview</groupId>\n  <artifactId>library</artifactId>\n  <version>5.4.3</version>\n  <type>apklib</type>\n</dependency>\n```\n\nIf you're using a standard project without either Maven or Gradle, you'll have to download the project, and the add the library manually to your project.\n\n\nUsage\n====\n\nTo use ShowcaseView, use the Builder pattern.\n\nAs an example:\n\n```java\nnew ShowcaseView.Builder(this)\n    .setTarget(new ActionViewTarget(this, ActionViewTarget.Type.HOME))\n    .setContentTitle(\"ShowcaseView\")\n    .setContentText(\"This is highlighting the Home button\")\n    .hideOnTouchOutside()\n    .build();\n```\n\nYou can use styles to customise how a ShowcaseView looks. I'll write more documentation soon, but for now, check out the sample project's [styles](https://github.com/amlcurran/ShowcaseView/blob/master/sample/src/main/res/values/styles.xml).\n\nSample Project\n----\nThere's a sample project available which you can find in the project, or as an app on the [Google Play Store](https://play.google.com/store/apps/details?id=com.espian.showcaseview.sample).\n\nWhat's the legacy branch?\n----\nThe [legacy branch](https://github.com/amlcurran/ShowcaseView/tree/legacy) is still available for people to use. This has more features than the master branch, but it more unwieldy to use and less stable. I don't support it at all - you'll have to build and compile it yourself. It isn't available on Maven Central either.\n\nIs it worth using?\n----\nPerhaps. Why not ask\n[Google](https://github.com/googlecast/CastVideos-android), [iPlayer Radio](https://play.google.com/store/apps/details?id=uk.co.bbc.android.iplayerradio),\nor [AllCast](https://play.google.com/store/apps/details?id=com.koushikdutta.cast), which each use the library?\n\nPrevious users include The Guardian and HaxSync\n\nWhat's missing in v5\n---\n\n- ShowcaseViews: the class which queues up ShowcaseViews in a tutorial-type method. I never\nreally liked this class (generally, you should use SCV sparingly); I'll add it back in based on\nthe Builder class when I can.\n- Ghostly hand: this has gone for now until I can test-drive it back in.\n- Scale multiplier: this has gone for simplicity - if people really loved it I'll add in back in\n\nFAQs\n---\n\n**Where has X feature gone?**\n\nLook one paragraph up!\n\n**Waaaah, but I really liked feature X!!!**\n\nSwitch to the legacy branch and use that one then! All legacy features are in there.\n\n**What happened to all the other constructors?**\n\nGone. You should be using the new Target API.\n\n**What if I want to add feature X?**\n\nAt the moment, I'm not taking any feature requests. It's unlikely I'll take many anyway,\nunless I feel they are both useful and well tested. If you have some cosmetic tweak then I don't\nwant that added into the library as *another* option. But, if you need to make a tweak to the\nlibrary to add such a tweak to your own, overridden ShowcaseView then that is totally great.\n\n\nCopyright and Licensing\n----\n\nCopyright Alex Curran ([@amlcurran](https://twitter.com/amlcurran)) © 2012-2014. All rights reserved.\n\nThis library is distributed under an Apache 2.0 License.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.845703125,
          "content": "def isReleaseBuild() {\n    return version.contains(\"SNAPSHOT\") == false\n}\n\n/*\n * Copyright 2014 Alex Curran\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nallprojects {\n  group = GROUP\n  version = VERSION_CODE\n\n  repositories {\n    mavenCentral()\n  }\n\n  tasks.withType(JavaCompile) {\n    options.encoding = \"UTF-8\"\n  }\n}\n\napply from:'release.gradle'\n"
        },
        {
          "name": "example.png",
          "type": "blob",
          "size": 47.5009765625,
          "content": null
        },
        {
          "name": "example2.png",
          "type": "blob",
          "size": 57.810546875,
          "content": null
        },
        {
          "name": "example2@2x.png",
          "type": "blob",
          "size": 160.7060546875,
          "content": null
        },
        {
          "name": "example@2x.png",
          "type": "blob",
          "size": 119.78125,
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.234375,
          "content": "#\n# Copyright 2014 Alex Curran\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nVERSION_CODE=50403\nGROUP=com.github.amlcurran.showcaseview\n\nPOM_DESCRIPTION=Highlight the best bits of your app to users quickly, simply, and cool...ly\nPOM_URL=https://github.com/amlcurran/ShowcaseView\nPOM_SCM_URL=https://github.com/amlcurran/ShowcaseView\nPOM_SCM_CONNECTION=scm:git@github.com:amlcurran/ShowcaseView.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:amlcurran/ShowcaseView.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=amlcurran\nPOM_DEVELOPER_NAME=Alex Curran\n\nBUILD_TOOLS_VERSION=22.0.1\nCOMPILE_SDK=23\nMIN_SDK_LIBRARY=9\nMIN_SDK_SAMPLE=11\nTARGET_SDK=23\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "material.png",
          "type": "blob",
          "size": 46.39453125,
          "content": null
        },
        {
          "name": "release.gradle",
          "type": "blob",
          "size": 1.3359375,
          "content": "task showcaseViewRelease << {\n    if (!project.hasProperty(\"versionName\")) {\n        throw new TaskExecutionException(tasks['commitRelease'], new NullPointerException(\"No version name supplied\"))\n    }\n}\n\nshowcaseViewRelease.dependsOn('editReadme')\nshowcaseViewRelease.dependsOn('library:uploadArchives')\nshowcaseViewRelease.finalizedBy('commitRelease')\n\ntask commitRelease(type: Exec) {\n    commandLine 'git', \"commit\", \"README.md\", \"-m\", \"Update to version \" + getVersionName()\n}\n\ntask createGithubRelease(type: Exec) {\n    def versionName = getVersionName()\n    def jsonData = JsonOutput.toJson([\n            tag_name: \"$versionName\",\n            name    : \"$versionName\",\n            draft   : true])\n    commandLine \"curl\", \"--data\", jsonData, \"-u\", \"amlcurran:\" + System.getenv('GITHUB_TOKEN'), \"https://api.github.com/repos/amlcurran/ShowcaseView/releases\"\n}\n\n\nimport groovy.json.JsonOutput\nimport org.apache.tools.ant.filters.ReplaceTokens\n\ntask editReadme(type: Copy) {\n    from('.') {\n        include 'README-template.md'\n        rename('README-template.md', 'README.md')\n        filter(ReplaceTokens, tokens: ['version': versionName])\n    }\n    into '.'\n}\n\ndef getVersionName() {\n    if (project.hasProperty(\"versionName\")) {\n        return project.property(\"versionName\")\n    } else {\n        println(\"using default version no.\")\n        return \"\"\n    }\n}\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.6103515625,
          "content": "/*\n * Copyright 2014 Alex Curran\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninclude ':library', ':sample'"
        },
        {
          "name": "showcaseview_playstore_promo.png",
          "type": "blob",
          "size": 331.9990234375,
          "content": null
        },
        {
          "name": "showcaseview_playstore_promo.xcf",
          "type": "blob",
          "size": 1431.8681640625,
          "content": null
        }
      ]
    }
  ]
}