{
  "metadata": {
    "timestamp": 1736708707050,
    "page": 147,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zo0r/react-native-push-notification",
      "stars": 6773,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5283203125,
          "content": "# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n\n# Android/IJ\n#\n.idea\n.gradle\nlocal.properties\n*.iml\n\n# node.js\n#\nnode_modules/*\nnpm-debug.log\n\nyarn.lock\npackage-lock.json\n\nandroid/android.iml\nandroid/gradle.properties\nandroid/gradle/\nandroid/gradlew\nandroid/gradlew.bat\nandroid/src/main/gen\n\n#Debug only\ngoogle-services.json\n\n.vscode/\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.9619140625,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git\nnode_modules\nnpm-debug.log\n\n# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n\n# Android/IJ\n#\nreact-native-notifications.iml\n.idea\n.gradle\nlocal.properties\n\n# Example app\nexample\n\n# Git\n.git \n\n# GitHub\n.github/*\n\n# Docs\nsubmitting-a-pull-request.md\n\n# Vscode\n.vscode/*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.7177734375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThis project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n### Breaking changes\n\n### Features\n\n### Fixed\n\n## [8.1.1] 2021-10-01\n\n### Fixed\n\n- (iOS): Raise @react-native-community/push-notification-ios version [#2151](https://github.com/zo0r/react-native-push-notification/pull/2151)\n- (iOS): Fix iOS repeated notification timing [#2150](https://github.com/zo0r/react-native-push-notification/pull/2150)\n\n## [8.1.0] 2021-09-03\n\n### Features\n\n- (iOS) Upgrade `@react-native-community/push-notification-ios` to version [1.10.0](https://github.com/react-native-push-notification/ios/releases/tag/v1.10.0)\n- (iOS) Allow `month`, `week`, `day`, `hour`, `minute` as `repeatType` for iOS.\n- (Android) Allow HTML tags to be used for styling in bigText field only [#2067](https://github.com/zo0r/react-native-push-notification/pull/2067).\n\n### Fixed\n\n- (Android): Fix Android 12 PendingIntent [#2130](https://github.com/zo0r/react-native-push-notification/pull/2130)\n\n## [8.0.1] 2021-08-24\n\n### Fixed\n\n- (Android): Fix bug cancelLocalNotification() does not work on Android [#2122](https://github.com/zo0r/react-native-push-notification/issues/2122)\n\n## [8.0.0] 2021-08-19\n\n### Breaking changes\n\n- `userInfo` is no more populated with the `id` of the notification, initialy included to cancel scheduled notifications. This change will probably not impact you.\n-  Rename `cancelLocalNotifications` to `cancelLocalNotification` (deprecation notice).\n\n### Features\n\n- (iOS) upgrade `@react-native-community/push-notification-ios` to version [1.9.0](https://github.com/react-native-push-notification/ios/releases/tag/v1.9.0)\n- `picture` is now support for both Android and iOS, (alias of `bigPictureUrl` for Android).\n\n### Fixed\n\n- (Android): Fix bug cancelLocalNotifications() does not work on Android [#2100](https://github.com/zo0r/react-native-push-notification/issues/2100)\n\n## [7.4.0] 2021-06-24\n\n### Features\n\n - (Android): Allow for repeat to specify amount of the given repeat type. [#2030](https://github.com/zo0r/react-native-push-notification/pull/2030)\n - (iOS): Add support for subtitle notification property. [#2063](https://github.com/zo0r/react-native-push-notification/pull/2063)\n\n## [7.3.2] 2021-06-19\n\n### Fixed\n\n- (Android) Fix: Foreground notifications missing small icon. [#1927](https://github.com/zo0r/react-native-push-notification/pull/1927)\n\n## [7.3.1] 2021-05-12\n\n### Fixed\n\n- (Android) Pin the firebase-messaging dependency to `21.1.0`.\n- (Android) Fix: android missing channelId warning should now show [#1995](https://github.com/zo0r/react-native-push-notification/pull/1995).\n\n## [7.3.0] 2021-05-12\n\n### Features\n- (Android) Add constants for notification importance [#1959](https://github.com/zo0r/react-native-push-notification/pull/1959)\n\n### Fixed\n\n- (Android) Fix: Task :react-native-push-notification:compileDebugJavaWithJavac FAILED [#1979](https://github.com/zo0r/react-native-push-notification/issues/1979)\n\n## [7.2.3] 2021-03-18\n\n### Fixed\n\n- (Android) Fix: Notification drawer doesn't close after click on action that navigates you to app [#1914](https://github.com/zo0r/react-native-push-notification/issues/1914)\n- (iOS) Fix: foreground notification property [#1916](https://github.com/zo0r/react-native-push-notification/pull/1916)\n\n## [7.2.2] 2021-03-04\n\n### Fixed\n\n- (Android) Fix: Could not invoke RNPushNotification.getDeliveredNotifications. [#1878](https://github.com/zo0r/react-native-push-notification/issues/1878)\n- (fix) deep clone details and notifications. [#1793](https://github.com/zo0r/react-native-push-notification/issues/1793)\n\n## [7.2.1] 2021-02-11\n\n### Fixed\n\n- (iOS) Fix `playSound` options on local notifications. [#1858](https://github.com/zo0r/react-native-push-notification/issues/1858#issuecomment-775714298)\n\n## [7.2.0] 2021-01-24\n\n### Features\n\n- (Android) Handle localization for notification title and body [#1837](https://github.com/zo0r/react-native-push-notification/pull/1837)\n\n## [7.1.1] 2021-01-20\n\n### Fixed\n\n- (Android) unsubscribeFromTopic function fix [#1831](https://github.com/zo0r/react-native-push-notification/pull/1831)\n\n## [7.1.0] 2021-01-16\n\n### Features\n\n- (Android) Add hooks to intent handling and bundle parsing [#1819](https://github.com/zo0r/react-native-push-notification/pull/1819)\n \n## [7.0.0] 2020-12-23\n\n### Breaking changes\n\n- (iOS) Replace deprecated local notification methods on iOS [#1751](https://github.com/zo0r/react-native-push-notification/pull/1751)\n- (Android) Rename the Android package from `RNPushNotification` to `ReactNativePushNotification` resolve [#893](https://github.com/zo0r/react-native-push-notification/issues/893)\n- (Android) Allow `userInfo` to be stored in scheduled notification as in iOS (mapped as `data` on press or list scheduled notifications).\n\n### Features\n\n- (Android) silent channel using playSound flag\n- (Android) implement 'bigLargeIcon' for Android notifications (must be combined with BigPicture) [#1730](https://github.com/zo0r/react-native-push-notification/pull/1730)\n- (Android) notification with inline reply [#612](https://github.com/zo0r/react-native-push-notification/pull/612)\n- (Android) Support using drawable as Android small icon [#1787](https://github.com/zo0r/react-native-push-notification/pull/1787)\n\n## [6.1.3] 2020-11-09\n\n### Fixed\n\n- (Android) Null pointer exception when trying to create channel [#1734](https://github.com/zo0r/react-native-push-notification/issues/1734)\n\n## [6.1.2] 2020-10-29\n\n### Fixed\n\n- (Android) Fix for vibration on notifs for Android API >= 26 [#1686](https://github.com/zo0r/react-native-push-notification/pull/1686)\n\n## [6.1.1] 2020-09-29\n\n### Fixed\n\n- (Android) Fix a crash when the application is in background [#1676](https://github.com/zo0r/react-native-push-notification/issues/1676)\n\n## [6.1.0] 2020-09-28\n\n### Features\n\n- (Android) Allow a default channel in the `AndroidManifest`:\n  ```xml\n        <meta-data android:name=\"com.dieam.reactnativepushnotification.default_notification_channel_id\" android:value=\"...\"/>\n  ```\n  If not defined, fallback to the Firebase value of:\n  ```xml\n        <meta-data android:name=\"com.google.firebase.messaging.default_notification_channel_id\" android:value=\"...\"/>\n  ```\n  If not defined, fallback to the default Firebase channel id `fcm_fallback_notification_channel`\n\n## [6.0.0] 2020-09-26\n\n### Breaking changes\n\n- (Android) Channel Management: In order to limit the scope of responsability of this library, developers are now responsible of the creation of the channels. You can find the documentation at https://github.com/zo0r/react-native-push-notification#channel-management-android. These changes are also made to allow improvements in the future of the library. Here the list of impacts:\n  - You must create your channels before triggering a notification.\n  - These entries in `AndroidManifest` are deprecated:\n  ```xml\n        <meta-data android:name=\"com.dieam.reactnativepushnotification.notification_channel_name\" android:value=\"...\"/>\n        <meta-data android:name=\"com.dieam.reactnativepushnotification.notification_channel_description\" android:value=\"...\"/>\n        <meta-data android:name=\"com.dieam.reactnativepushnotification.channel_create_default\" android:value=\"...\"/>\n  ```\n  -  Followings options changed on Android in `localNotification` and `localNotificationSchedule`:\n     - `channelId` becomes mandatory (warning if not provided)\n     - `channelName` is deprecated\n     - `channelDescription` is deprecated\n     - `importance` is deprecated\n  - These changes help to avoid an issue [#1649](https://github.com/zo0r/react-native-push-notification/issues/1649)\n- (Android) Remove check for the intent `BOOT_COMPLETED`, this should allow more intent action such as `QUICKBOOT_POWERON`. It's recommended to update `AndroidManifest`, the `RNPushNotificationBootEventReceiver` to:\n  ```xml\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationBootEventReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n                <action android:name=\"android.intent.action.QUICKBOOT_POWERON\" />\n                <action android:name=\"com.htc.intent.action.QUICKBOOT_POWERON\"/>\n            </intent-filter>\n        </receiver>\n  ```\n- `@react-native-community/push-notification-ios` is now a `peerDependency`, please make sure that you installed this library with NPM or YARN.\n- (Android) Fix a bug where notification data are not inside `data` property after been pressed by user. When sending notification + data and app in background.\n- (Android) Add more fields from the firebase notification part. (Thanks to @fattomhk with this PR [#1626](https://github.com/zo0r/react-native-push-notification/pull/1626))\n  - `notificationPriority`\n  - `image`\n  - `tag`\n  - `visibility`\n- (Android) `data.twi_body` is no more used to trigger a notification in notification-center. Revert of [#744](https://github.com/zo0r/react-native-push-notification/pull/744)\n\n### Fixed\n\n- (iOS) upgrade `@react-native-community/push-notification-ios`, fixe the value of `userInteraction` [@react-native-community/push-notification-ios#122](https://github.com/react-native-community/push-notification-ios/pull/122).\n\n## [5.1.1] 2020-09-15\n\n### Fixed\n\n- (Android) Fatal Exception: java.lang.NullPointerException [#1641](https://github.com/zo0r/react-native-push-notification/issues/1641)\n\n## [5.1.0] 2020-08-31\n\n### Features\n\n- (Android) Add support for specifying a delegate FirebaseMessagingService [#1589](https://github.com/zo0r/react-native-push-notification/pull/1589)\n- (Android) Add support of `when`, `usesChronometer` and `timeoutAfter`.\n\n### Fixed\n\n- (Android) Fix a bug where `userInteraction` is not set, notification when app in background pressed by user.\n\n\n## [5.0.1] 2020-08-04\n\n### Fixed\n\n- (Android) Fix change that make gradle build fail [#1578](https://github.com/zo0r/react-native-push-notification/pull/1578).\n\n## [5.0.0] 2020-08-03\n\n### Breaking changes\n\n- (Android/iOS) Unify returned values between iOS and Android [#1516](https://github.com/zo0r/react-native-push-notification/pull/1516).\n- (Android/iOS) `.popInitialNotification(callback)` now return the same format as `onNotification()`.\n- (Android) `popInitialNotification` in `configure()` now trigger only once on app startup, same as iOS.\n- (Android) `notification.foreground` now return the good value, before the value was `false` most of the time.\n\n### Features\n\n- (Android) Add function `createChannel` for custom Android channel support [#1509](https://github.com/zo0r/react-native-push-notification/pull/1509)\n- (Android) Add Android `messageId` to enable integration with `react-native-firebase/messaging` [#1510](https://github.com/zo0r/react-native-push-notification/pull/1510)\n- (Android) Add support for `onlyAlertOnce` property [#1519](https://github.com/zo0r/react-native-push-notification/pull/1519)\n- (Android) Allow to change default notification channel name after it's creation [#1549](https://github.com/zo0r/react-native-push-notification/pull/1549)\n\n### Fixed\n\n- (Android) `popInitialNotification` in `configure()` now trigger only once and do not trigger twice `onNotification()` when user press the notification, more details: [#1516](https://github.com/zo0r/react-native-push-notification/pull/1516).\n- (Android) `notification.foreground` now return the good value, before the value was `false` most of the time.\n\n## [4.0.0] 2020-07-06\n\n### Breaking changes\n\n- `RNPushNotificationRegistrationService` has been removed, old reference in AndroidManifest must be removed.\n- `Notifications.registerNotificationActions()` has been removed and is not required for `actions`.\n- `DeviceEventEmitter.addListener('notificationActionReceived', callback)` is replaced by `onAction`.\n- Extra receiver must be added to manage actions.\n  ```xml\n      <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationActions\" />\n  ```\n- (iOS) `userInfo` is now populated with id by default to allow operation based on `id`.\n\n### Features\n\n- (Android) `actions` accept an array of strings.\n- (Android) `invokeApp` allow you to handle actions in background without invoking the application.\n- (Android) `onAction` has been added to `.configure()` to handle action in background.\n- (Android) `PushNotification.invokeApp(notification)` allow you to invoke the application when in background (notification for initial notification).\n- (Android) `PushNotification.getChannels(callback)` allow you to get the list of channels.\n- (Android) `PushNotification.channelExists(channel_id, callback)` allow you to check of a channel exists.\n- (Android) `PushNotification.channelBlocked(channel_id, callback)` allow you to check of a channel is blocked. Based on [#1249](https://github.com/zo0r/react-native-push-notification/pull/1249)\n- (Android) `PushNotification.deleteChannel(channel_id)` allow you to delete a channel.\n- (Android) Add `largeIconUrl` to load a largeIcon based on Url. Based on [#1444](https://github.com/zo0r/react-native-push-notification/pull/1444)\n- (Android) Add `bigPictureUrl` to load a picture based on Url. Based on [#1444](https://github.com/zo0r/react-native-push-notification/pull/1444)\n- (Android) Add `shortcutId` for better badges management.\n- (Android) Add `showWhen` to display \"when\" it was published, default: true.\n- (Android) Add `groupSummary` to allow grouping notifications. Based on [#1253](https://github.com/zo0r/react-native-push-notification/pull/1253)\n- (Android) Add `channelId`, custom channel_id in android. Based on [#1159](https://github.com/zo0r/react-native-push-notification/pull/1159)\n- (Android) Add `channelName`, custom channel_name in android.\n- (Android) Add `channelDescription`, custom channel_description in android.\n- (iOS) Add fire date in notification response, NOTE: `push-notification-ios` in version `> 1.2.0` [#1345](https://github.com/zo0r/react-native-push-notification/pull/1345)\n- (iOS) `onRegistrationError` has been added to `.configure()` to handle `registrationError` events.\n- (Android/iOS) Add method getScheduledLocalNotifications()[#1466](https://github.com/zo0r/react-native-push-notification/pull/1466)\n\n### Fixed\n\n- (Android) Replace java.util.Random with java.security.SecureRandom [#1497](https://github.com/zo0r/react-native-push-notification/pull/1497)\n- (Android) WAKE_LOCK permission removed from documentation. [#1494](https://github.com/zo0r/react-native-push-notification/issues/1494)\n- (Android) Some options were ignored on scheduled/repeating notifications (allowWhileIdle, ignoreInForeground).\n- (Android/iOS) popInitialInotification might be ignored in `.configure()`\n\n## [3.5.2] - 2020-05-25\n\n### Fixed\n\n- (Android) Sounds are playing even in Do Not Disturb [#1432](https://github.com/zo0r/react-native-push-notification/issues/1432#issuecomment-633367111)\n- (Android) onNotification fires every time when the app goes from background to foreground [#1455](https://github.com/zo0r/react-native-push-notification/issues/1455)\n- (Android) java.lang.NullPointerException: Attempt to invoke virtual method 'void com.dieam.reactnativepushnotification.modules.d.c(android.os.Bundle)' on a null object reference [#1431](https://github.com/zo0r/react-native-push-notification/issues/1431#issuecomment-633315150)\n\n## [3.5.1] - 2020-05-20\n\n### Fixed\n\n- (Android) When updating 3.4 to 3.5, unable to compile Android [#1449](https://github.com/zo0r/react-native-push-notification/pull/1449)\n\n## [3.5.0] - 2020-05-20\n\n### Features\n\n- (Android) Enables the ability to support multiple push providers [#1445](https://github.com/zo0r/react-native-push-notification/pull/1445)\n\n### Fixed\n\n- (Android) No sound on notifications [#1432](https://github.com/zo0r/react-native-push-notification/issues/1432)\n- (Android) onNotification is not calling when app is in background [#1446](https://github.com/zo0r/react-native-push-notification/pull/1446)\n- (Android) `number` and `id` do not crash if NaN is passed in Android.\n\n## [3.4.0] - 2020-05-08\n\n### Features\n\n- (Android) Call `onRegister` when [Firebase renew token](<https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService#onNewToken(java.lang.String)>).\n- (Android) Added Abandon Permissions method to Android [#1425](https://github.com/zo0r/react-native-push-notification/pull/1425)\n- (Android) Add a new key in `AndroidManifest.xml` to allow/remove notification in foreground.\n\n```xml\n        <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_foreground\"\n                    android:value=\"false\"/>\n```\n\n### Fixed\n\n- (Android) `number` and `id` are now correctly handled as number in Android.\n- (iOS) Update push-notification-ios to 1.2.0 [#1410](https://github.com/zo0r/react-native-push-notification/pull/1410)\n- Make sure to import PushNotificationIOS from react-native first [#617](https://github.com/zo0r/react-native-push-notification/pull/617)\n\n## [3.3.1] - 2020-05-01\n\n### Fixed\n\n- (Android) Fix regression with the importance of the notification.\n\n## [3.3.0] - 2020-04-29\n\n### Features\n\n- (Android) Keep interface parity with PushNotificationIOS [#909](https://github.com/zo0r/react-native-push-notification/pull/909)\n- (Android) Unsubscribe from topic [#917](https://github.com/zo0r/react-native-push-notification/pull/917)\n- (Android) Add notification data in onNotification [#1212](https://github.com/zo0r/react-native-push-notification/pull/1212)\n\n### Fixed\n\n- (Android) Create default channel to receive notification when background / killed.\n- (Android) Fix vibrate: false is ignored [#878](https://github.com/zo0r/react-native-push-notification/issues/1140)\n- `package.json` fix suffic in main, `index` => `index.js` [#878](https://github.com/zo0r/react-native-push-notification/pull/878)\n\n### Breaking changes\n\n- (Android) Remove specific code for GCM [#1322](https://github.com/zo0r/react-native-push-notification/issues/1322)\n- `<service android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService\"/>` must be removed.\n\n## [3.2.1] - 2020-04-20\n\n### Fixed\n\n- Invalid type `Strint` wrong typo\n- Missing import\n\n## [3.2.0] - 2020-04-20\n\n### Features\n\n- (Android) Allow to silence Android foreground notifications [#1183](https://github.com/zo0r/react-native-push-notification/pull/1183)\n- (Android) Allow to set the notification to executes on idle [#959](https://github.com/zo0r/react-native-push-notification/pull/959)\n- (iOS) Add missing \"category\" parameter when scheduling local notifications. [#457](https://github.com/zo0r/react-native-push-notification/pull/457)\n\n### Fixed\n\n- Fix: Breaking android x compatibility regression\n- Fix: Use FirebaseInstanceId for deviceToken, not from Intent [#1355](https://github.com/zo0r/react-native-push-notification/pull/1355)\n- Fix: security issue `limit the components that Intent will resolve to` [#687](https://github.com/zo0r/react-native-push-notification/pull/687)\n- Fix: remove fishy reference from android project files [#1226](https://github.com/zo0r/react-native-push-notification/pull/1226)\n- Fix: `JSON value '<null>' of type NSNull cannot be converted to NSDictionary` [#1030](https://github.com/zo0r/react-native-push-notification/pull/1030)\n- Fix: Fixed foreground FCM banner notifications and notification sound [#1042](https://github.com/zo0r/react-native-push-notification/pull/1042)\n- Upgrade ShortCutBadger to 1.1.22 [#646](https://github.com/zo0r/react-native-push-notification/pull/646)\n- Upgrade exemple to React-Native 0.62.2\n- Remove Types from the code use [@types/react-native-push-notification](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react-native-push-notification) instead.\n- Remove GCM and C2DM references in README.md\n\n### Possible Breaking change\n\n- Rename firebaseVersion to firebaseMessagingVersion [#1191](https://github.com/zo0r/react-native-push-notification/pull/1191) in gradle.build\n\n### Documentation\n\n- Abandon permissions unregisters remote only [#1282](https://github.com/zo0r/react-native-push-notification/pull/1282)\n- Use full path for manifest [#567](https://github.com/zo0r/react-native-push-notification/pull/567)\n- Update broken link to docs [#995](https://github.com/zo0r/react-native-push-notification/pull/995)\n- Missing step for android manual installation [#1363](https://github.com/zo0r/react-native-push-notification/pull/1363)\n\n## [3.1.3] - 2019-05-25\n\n## Fixed\n\n- Fix Configuration 'compile' is obsolete and has been replaced with 'implementation' and Configuration 'testCompile' is obsolete and has been replaced with 'testImplementation'.\n  It will be removed at the end of 2018. [#1106](https://github.com/zo0r/react-native-push-notification/issues/1106)\n\n## [3.1.2] - 2018-10-16\n\n## Added\n\n- Allow to set notification's priority, visibility and importance options on Android, [@lorenc-tomasz](https://github.com/lorenc-tomasz) `aaf2d19` [#854](https://github.com/zo0r/react-native-push-notification/pull/854)\n- Added the \"old\" GCM listener to get compatibility with GCM back, [@zo0r](https://github.com/zo0r) `3bd0b6f` [#835](https://github.com/zo0r/react-native-push-notification/pull/835)\n- Allow configuring notification channel and color through manifest, [@Truebill](https://github.com/Truebill) `f7b4759` [#822](https://github.com/zo0r/react-native-push-notification/pull/822)\n\n## Fixed\n\n- Fix example app cancel notification, [@hshiraiwa](https://github.com/danibonilha) `1143632` [#869](https://github.com/zo0r/react-native-push-notification/pull/869)\n- Update documentation to avoid falling Androids' build, [@danibonilha](https://github.com/danibonilha) `fc5c722` [#879](https://github.com/zo0r/react-native-push-notification/pull/879)\n- Fix react-native link command, [@lfkwtz](https://github.com/lfkwtz) `9708445` [#839](https://github.com/zo0r/react-native-push-notification/pull/839)\n- Standardize Changelog, [@rodrigobdz](https://github.com/rodrigobdz) `a95af74` [#831](https://github.com/zo0r/react-native-push-notification/pull/831)\n- Updated sdk and build tool version on gradle file, [@receme](https://github.com/receme) `8718e61` [#826](https://github.com/zo0r/react-native-push-notification/pull/826)\n- Fix requestPermissions crash, [@zo0r](https://github.com/zo0r) `feada0c` [#809](https://github.com/zo0r/react-native-push-notification/pull/809)\n- Readme clarification on localNotificationSchedule(), [@brownmagik352](https://github.com/brownmagik352) `beedb16` [#816](https://github.com/zo0r/react-native-push-notification/pull/816)\n- Fix title and message for Firebase, [@Truebill](https://github.com/Truebill) `ccd9edc` [#806](https://github.com/zo0r/react-native-push-notification/pull/806)\n- Fix pop initial for firebase, [@Truebill](https://github.com/Truebill) `b61ce08` [#807](https://github.com/zo0r/react-native-push-notification/pull/807)\n- Various readme typos, [@elitree](https://github.com/elitree) `a071458` [#802](https://github.com/zo0r/react-native-push-notification/pull/802)\n\n## [3.1.1] - 2018-07-31\n\n## Added\n\n- Android Oreo support (SDK >= 26) (PR [#657](https://github.com/zo0r/react-native-push-notification/pull/657))\n- Firebase (FCM) Support (PR [#717](https://github.com/zo0r/react-native-push-notification/pull/717))\n- Twilio support (PR [#744](https://github.com/zo0r/react-native-push-notification/pull/744))\n- clearLocalNotification (PR [#711](https://github.com/zo0r/react-native-push-notification/pull/711))\n\n## Fixed\n\n- checkPermissions (PR [#721](https://github.com/zo0r/react-native-push-notification/pull/721))\n- Remove default alert for silent push (PR [#707](https://github.com/zo0r/react-native-push-notification/pull/707))\n\n[unreleased]: https://github.com/zo0r/react-native-push-notification/compare/v3.1.2...HEAD\n[3.1.2]: https://github.com/zo0r/react-native-push-notification/compare/v3.1.1...v3.1.2\n[3.1.1]: https://github.com/zo0r/react-native-push-notification/compare/...v3.1.1\n\n\n## Supported React Native Versions\n\n| Component Version | RN Versions          | README                                                                                                                 |\n| ----------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| **1.0.7**         | **<= 0.27**          | [Open](https://github.com/zo0r/react-native-push-notification/blob/f42723817f1687e0da23e6753eb8a9f0385b6ac5/README.md) |\n| **1.0.8**         | **0.28**             | [Open](https://github.com/zo0r/react-native-push-notification/blob/2eafd1961273ca6a82ad4dd6514fbf1d1a829089/README.md) |\n| **2.0.1**         | **0.29**             | [Open](https://github.com/zo0r/react-native-push-notification/blob/c7ab7cd84ea19e42047379aefaf568bb16a81936/README.md) |\n| **2.0.2**         | **0.30, 0.31, 0.32** | [Open](https://github.com/zo0r/react-native-push-notification/blob/a0f7d44e904ba0b92933518e5bf6b444f1c90abb/README.md) |\n| **>= 2.1.0**      | **>= 0.33**          | [Open](https://github.com/zo0r/react-native-push-notification/blob/a359e5c00954aa324136eaa9808333d6ca246171/README.md) |\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Dieam\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.2236328125,
          "content": "# React Native Push Notifications\n\n[![npm version](https://badge.fury.io/js/react-native-push-notification.svg?update=9)](http://badge.fury.io/js/react-native-push-notification)\n[![npm downloads](https://img.shields.io/npm/dm/react-native-push-notification.svg?update=9)](http://badge.fury.io/js/react-native-push-notification)\n\nReact Native Local and Remote Notifications for iOS and Android\n\n## State of the repository\n\nThis repository is not actively maintained. The main reason is time. The second one is probably the complexity of notifications on both iOS and Android.\nSince this project probably need a huge refactor to fix some issue or to implement new features. I think you should probably consider these alternatives: [Notifee](https://notifee.app) free since september or [react-native-notifications](https://github.com/wix/react-native-notifications).\n\nIf you are interested in being a maintainer of this project, feel free to ask in issues.\n\n## 🎉 Version 7.x is live ! 🎉\n\nCheck out for changes and migration in the CHANGELOG:\n\n[Changelog](https://github.com/zo0r/react-native-push-notification/blob/master/CHANGELOG.md)\n\n# Supporting the project\n\nMaintainers are welcome ! Feel free to contact me :wink:\n\n## Changelog\n\nChangelog is available from version 3.1.3 here: [Changelog](https://github.com/zo0r/react-native-push-notification/blob/master/CHANGELOG.md)\n\n## Installation\n\n### NPM\n\n```\nnpm install --save react-native-push-notification\n```\n\n### Yarn\n\n```\nyarn add react-native-push-notification\n```\n\n**NOTE: If you target iOS you also need to follow the [installation instructions for PushNotificationIOS](https://github.com/react-native-community/react-native-push-notification-ios) since this package depends on it.**\n\n**NOTE: For Android, you will still have to manually update the AndroidManifest.xml (as below) in order to use Scheduled Notifications.**\n\n## Issues\n\nHaving a problem? Read the [troubleshooting](./trouble-shooting.md) guide before raising an issue.\n\n## Pull Requests\n\n[Please read...](./submitting-a-pull-request.md)\n\n## iOS manual Installation\n\nThe component uses PushNotificationIOS for the iOS part. You should follow their [installation instructions](https://github.com/react-native-community/react-native-push-notification-ios).\n\n## Android manual Installation\n\n**NOTE: `firebase-messaging`, prior to version 15 requires to have the same version number in order to work correctly at build time and at run time. To use a specific version:**\n\nIn your `android/build.gradle`\n\n```gradle\next {\n    googlePlayServicesVersion = \"<Your play services version>\" // default: \"+\"\n    firebaseMessagingVersion = \"<Your Firebase version>\" // default: \"21.1.0\"\n\n    // Other settings\n    compileSdkVersion = <Your compile SDK version> // default: 23\n    buildToolsVersion = \"<Your build tools version>\" // default: \"23.0.1\"\n    targetSdkVersion = <Your target SDK version> // default: 23\n    supportLibVersion = \"<Your support lib version>\" // default: 23.1.1\n}\n```\n\n**NOTE: localNotification() works without changes in the application part, while localNotificationSchedule() only works with these changes:**\n\nIn your `android/app/src/main/AndroidManifest.xml`\n\n```xml\n    .....\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n\n    <application ....>\n        <!-- Change the value to true to enable pop-up for in foreground on receiving remote notifications (for prevent duplicating while showing local notifications set this to false) -->\n        <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_foreground\"\n                    android:value=\"false\"/>\n        <!-- Change the resource name to your App's accent color - or any other color you want -->\n        <meta-data  android:name=\"com.dieam.reactnativepushnotification.notification_color\"\n                    android:resource=\"@color/white\"/> <!-- or @android:color/{name} to use a standard color -->\n\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationActions\" />\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationPublisher\" />\n        <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationBootEventReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n                <action android:name=\"android.intent.action.QUICKBOOT_POWERON\" />\n                <action android:name=\"com.htc.intent.action.QUICKBOOT_POWERON\"/>\n            </intent-filter>\n        </receiver>\n\n        <service\n            android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService\"\n            android:exported=\"false\" >\n            <intent-filter>\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n            </intent-filter>\n        </service>\n     .....\n```\n\nIf not using a built in Android color (`@android:color/{name}`) for the `notification_color` `meta-data` item.\nIn `android/app/src/main/res/values/colors.xml` (Create the file if it doesn't exist).\n\n```xml\n<resources>\n    <color name=\"white\">#FFF</color>\n</resources>\n```\n\nIf your app has an @Override on onNewIntent in `MainActivity.java` ensure that function includes a super call on onNewIntent (if your `MainActivity.java` does not have an @Override for onNewIntent skip this):\n\n```java\n    @Override\n    public void onNewIntent(Intent intent) {\n        ...\n        super.onNewIntent(intent);\n        ...\n    }\n```\n\n### If you use remote notifications\n\nMake sure you have installed setup Firebase correctly.\n\nIn `android/build.gradle`\n\n```gradle\n\nbuildscript {\n    ...\n    dependencies {\n        ...\n        classpath('com.google.gms:google-services:4.3.3')\n        ...\n    }\n}\n```\n\nIn `android/app/build.gradle`\n\n```gradle\ndependencies {\n  ...\n  implementation 'com.google.firebase:firebase-analytics:17.3.0'\n  ...\n}\n\napply plugin: 'com.google.gms.google-services'\n\n```\n\nThen put your `google-services.json` in `android/app/`.\n\n**Note: [firebase/release-notes](https://firebase.google.com/support/release-notes/android)**\n\n> The Firebase Android library `firebase-core` is no longer needed. This SDK included the Firebase SDK for Google Analytics.\n>\n> Now, to use Analytics or any Firebase product that recommends the use of Analytics (see table below), you need to explicitly add the Analytics dependency: `com.google.firebase:firebase-analytics:17.3.0`.\n\n### If you don't use autolink\n\nIn `android/settings.gradle`\n\n```gradle\n...\ninclude ':react-native-push-notification'\nproject(':react-native-push-notification').projectDir = file('../node_modules/react-native-push-notification/android')\n```\n\nIn your `android/app/build.gradle`\n\n```gradle\n dependencies {\n    ...\n    implementation project(':react-native-push-notification')\n    ...\n }\n```\n\nManually register module in `MainApplication.java` (if you did not use `react-native link`):\n\n```java\nimport com.dieam.reactnativepushnotification.ReactNativePushNotificationPackage;  // <--- Import Package\n\npublic class MainApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n      @Override\n      protected boolean getUseDeveloperSupport() {\n        return BuildConfig.DEBUG;\n      }\n\n      @Override\n      protected List<ReactPackage> getPackages() {\n\n          return Arrays.<ReactPackage>asList(\n              new MainReactPackage(),\n              new ReactNativePushNotificationPackage() // <---- Add the Package\n          );\n    }\n  };\n\n  ....\n}\n```\n\n## Usage\n\n**DO NOT USE `.configure()` INSIDE A COMPONENT, EVEN `App`**\n> If you do, notification handlers will not fire, because they are not loaded. Instead, use `.configure()` in the app's first file, usually `index.js`.\n\n\n```javascript\nimport PushNotificationIOS from \"@react-native-community/push-notification-ios\";\nimport PushNotification from \"react-native-push-notification\";\n\n// Must be outside of any component LifeCycle (such as `componentDidMount`).\nPushNotification.configure({\n  // (optional) Called when Token is generated (iOS and Android)\n  onRegister: function (token) {\n    console.log(\"TOKEN:\", token);\n  },\n\n  // (required) Called when a remote is received or opened, or local notification is opened\n  onNotification: function (notification) {\n    console.log(\"NOTIFICATION:\", notification);\n\n    // process the notification\n\n    // (required) Called when a remote is received or opened, or local notification is opened\n    notification.finish(PushNotificationIOS.FetchResult.NoData);\n  },\n\n  // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)\n  onAction: function (notification) {\n    console.log(\"ACTION:\", notification.action);\n    console.log(\"NOTIFICATION:\", notification);\n\n    // process the action\n  },\n\n  // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)\n  onRegistrationError: function(err) {\n    console.error(err.message, err);\n  },\n\n  // IOS ONLY (optional): default: all - Permissions to register.\n  permissions: {\n    alert: true,\n    badge: true,\n    sound: true,\n  },\n\n  // Should the initial notification be popped automatically\n  // default: true\n  popInitialNotification: true,\n\n  /**\n   * (optional) default: true\n   * - Specified if permissions (ios) and token (android and ios) will requested or not,\n   * - if not, you must call PushNotificationsHandler.requestPermissions() later\n   * - if you are not using remote notification or do not have Firebase installed, use this:\n   *     requestPermissions: Platform.OS === 'ios'\n   */\n  requestPermissions: true,\n});\n```\n\n## Example app\n\nExample folder contains an example app to demonstrate how to use this package. The notification Handling is done in `NotifService.js`.\n\nPlease test your PRs with this example app before submitting them. It'll help maintaining this repo.\n\n## Handling Notifications\n\nWhen any notification is opened or received the callback `onNotification` is called passing an object with the notification data.\n\nNotification object example:\n\n```javascript\n{\n    foreground: false, // BOOLEAN: If the notification was received in foreground or not\n    userInteraction: false, // BOOLEAN: If the notification was opened by the user from the notification area or not\n    message: 'My Notification Message', // STRING: The notification message\n    data: {}, // OBJECT: The push data or the defined userInfo in local notifications\n}\n```\n\n## Local Notifications\n\n```js\nPushNotification.localNotification(details: Object)\n```\n\nEXAMPLE:\n\n```javascript\nPushNotification.localNotification({\n  /* Android Only Properties */\n  channelId: \"your-channel-id\", // (required) channelId, if the channel doesn't exist, notification will not trigger.\n  ticker: \"My Notification Ticker\", // (optional)\n  showWhen: true, // (optional) default: true\n  autoCancel: true, // (optional) default: true\n  largeIcon: \"ic_launcher\", // (optional) default: \"ic_launcher\". Use \"\" for no large icon.\n  largeIconUrl: \"https://www.example.tld/picture.jpg\", // (optional) default: undefined\n  smallIcon: \"ic_notification\", // (optional) default: \"ic_notification\" with fallback for \"ic_launcher\". Use \"\" for default small icon.\n  bigText: \"My big text that will be shown when notification is expanded. Styling can be done using HTML tags(see android docs for details)\", // (optional) default: \"message\" prop\n  subText: \"This is a subText\", // (optional) default: none\n  bigPictureUrl: \"https://www.example.tld/picture.jpg\", // (optional) default: undefined\n  bigLargeIcon: \"ic_launcher\", // (optional) default: undefined\n  bigLargeIconUrl: \"https://www.example.tld/bigicon.jpg\", // (optional) default: undefined\n  color: \"red\", // (optional) default: system default\n  vibrate: true, // (optional) default: true\n  vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000\n  tag: \"some_tag\", // (optional) add tag to message\n  group: \"group\", // (optional) add group to message\n  groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false\n  ongoing: false, // (optional) set whether this is an \"ongoing\" notification\n  priority: \"high\", // (optional) set notification priority, default: high\n  visibility: \"private\", // (optional) set notification visibility, default: private\n  ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting\n  shortcutId: \"shortcut-id\", // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined\n  onlyAlertOnce: false, // (optional) alert will open only once with sound and notify, default: false\n  \n  when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.\n  usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.\n  timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null\n\n  messageId: \"google:message_id\", // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module. \n\n  actions: [\"Yes\", \"No\"], // (Android only) See the doc for notification actions to know more\n  invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true\n\n  /* iOS only properties */\n  category: \"\", // (optional) default: empty string\n  subtitle: \"My Notification Subtitle\", // (optional) smaller title below notification title\n\n  /* iOS and Android properties */\n  id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID\n  title: \"My Notification Title\", // (optional)\n  message: \"My Notification Message\", // (required)\n  picture: \"https://www.example.tld/picture.jpg\", // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined\n  userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)\n  playSound: false, // (optional) default: true\n  soundName: \"default\", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)\n  number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)\n  repeatType: \"day\", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.\n});\n```\n\n## Scheduled Notifications\n\n```js\nPushNotification.localNotificationSchedule(details: Object)\n```\n\nEXAMPLE:\n\n```javascript\nPushNotification.localNotificationSchedule({\n  //... You can use all the options from localNotifications\n  message: \"My Notification Message\", // (required)\n  date: new Date(Date.now() + 60 * 1000), // in 60 secs\n  allowWhileIdle: false, // (optional) set notification to work while on doze, default: false\n\n  /* Android Only Properties */\n  repeatTime: 1, // (optional) Increment of configured repeatType. Check 'Repeating Notifications' section for more info.\n});\n```\n\n## Get the initial notification\n\n```js\nPushNotification.popInitialNotification(callback)\n```\n\nEXAMPLE:\n\n```javascript\nPushNotification.popInitialNotification((notification) => {\n  console.log('Initial Notification', notification);\n});\n```\n\n## Custom sounds\n\nIn android, add your custom sound file to `[project_root]/android/app/src/main/res/raw`\n\nIn iOS, add your custom sound file to the project `Resources` in xCode.\n\nIn the location notification json specify the full file name:\n\n    soundName: 'my_sound.mp3'\n\n## Channel Management (Android)\n\nTo use channels, create them at startup and pass the matching `channelId` through to `PushNotification.localNotification` or `PushNotification.localNotificationSchedule`.\n\n```javascript\nimport PushNotification, {Importance} from 'react-native-push-notification';\n...\n  PushNotification.createChannel(\n    {\n      channelId: \"channel-id\", // (required)\n      channelName: \"My channel\", // (required)\n      channelDescription: \"A channel to categorise your notifications\", // (optional) default: undefined.\n      playSound: false, // (optional) default: true\n      soundName: \"default\", // (optional) See `soundName` parameter of `localNotification` function\n      importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance\n      vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.\n    },\n    (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.\n  );\n```\n\n**NOTE: Without channel, notifications don't work**\n\nIn the notifications options, you must provide a channel id with `channelId: \"your-channel-id\"`, if the channel doesn't exist the notification might not be triggered. Once the channel is created, the channel cannot be updated. Make sure your `channelId` is different if you change these options. If you have created a channel in another way, it will apply options of the channel.\n\nIf you want to use a different default channel for remote notification, refer to the documentation of Firebase:\n\n[Set up a Firebase Cloud Messaging client app on Android](https://firebase.google.com/docs/cloud-messaging/android/client?hl=fr)\n\n```xml\n  <meta-data\n      android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\n      android:value=\"@string/default_notification_channel_id\" />\n```\n\nFor local notifications, the same kind of option is available:\n\n- you can use:\n  ```xml\n    <meta-data\n        android:name=\"com.dieam.reactnativepushnotification.default_notification_channel_id\"\n        android:value=\"@string/default_notification_channel_id\" />\n  ```\n- If not defined, fallback to the Firebase value defined in the `AndroidManifest`:\n  ```xml\n    <meta-data\n        android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\n        android:value=\"...\" />\n  ```\n- If not defined, fallback to the default Firebase channel id `fcm_fallback_notification_channel`\n\n### List channels\n\nYou can list available channels with:\n\n```js\nPushNotification.getChannels(function (channel_ids) {\n  console.log(channel_ids); // ['channel_id_1']\n});\n```\n\n### Channel exists\n\nYou can check if a channel exists with:\n\n```js\nPushNotification.channelExists(channel_id, function (exists) {\n  console.log(exists); // true/false\n});\n```\n\n### Channel blocked\n\nYou can check if a channel blocked with:\n\n```js\nPushNotification.channelBlocked(channel_id, function (blocked) {\n  console.log(blocked); // true/false\n});\n```\n\n### Delete channel\n\nYou can delete a channel with:\n\n```js\nPushNotification.deleteChannel(channel_id);\n```\n\n## Cancelling notifications\n\n### 1) cancelLocalNotification\n\nThe `id` parameter for `PushNotification.localNotification` is required for this operation. The id supplied will then be used for the cancel operation.\n\n```javascript\nPushNotification.localNotification({\n    ...\n    id: '123'\n    ...\n});\nPushNotification.cancelLocalNotification('123');\n```\n\n### 2) cancelAllLocalNotifications\n\n```javascript\nPushNotification.cancelAllLocalNotifications()\n```\n\nCancels all scheduled notifications AND clears the notifications alerts that are in the notification centre.\n\n### 3) removeAllDeliveredNotifications\n\n```javascript\nPushNotification.removeAllDeliveredNotifications();\n```\n\nRemove all delivered notifications from Notification Center\n\n### 4) getDeliveredNotifications\n\n```javascript\nPushNotification.getDeliveredNotifications(callback);\n```\n\nProvides you with a list of the app’s notifications that are still displayed in Notification Center\n\n**Parameters:**\n\n| Name     | Type     | Required | Description                                                 |\n| -------- | -------- | -------- | ----------------------------------------------------------- |\n| callback | function | Yes      | Function which receive an array of delivered notifications. |\n\nA delivered notification is an object containing:\n\n- `identifier` : The identifier of this notification.\n- `title` : The title of this notification.\n- `body` : The body of this notification.\n- `category` : The category of this notification (optional).\n- `userInfo` : An object containing additional notification data (optional).\n- `thread-id` : The thread identifier of this notification, if has one.\n\n### 5) removeDeliveredNotifications\n\n```javascript\nPushNotification.removeDeliveredNotifications(identifiers);\n```\n\nRemoves the specified notifications from Notification Center\n\n**Parameters:**\n\n| Name        | Type  | Required | Description                        |\n| ----------- | ----- | -------- | ---------------------------------- |\n| identifiers | array | Yes      | Array of notification identifiers. |\n\n### 6) getScheduledLocalNotifications\n\n```javascript\nPushNotification.getScheduledLocalNotifications(callback);\n```\n\nProvides you with a list of the app’s scheduled local notifications that are yet to be displayed\n\n**Parameters:**\n\n| Name     | Type     | Required | Description                                                 |\n| -------- | -------- | -------- | ----------------------------------------------------------- |\n| callback | function | Yes      | Function which receive an array of delivered notifications. |\n\nReturns an array of local scheduled notification objects containing:\n\n| Name           | Type   | Description                                              |\n| -------------- | ------ | -------------------------------------------------------- |\n| id             | number | The identifier of this notification.                     |\n| date           | Date   | The fire date of this notification.                      |\n| title          | string | The title of this notification.                          |\n| message        | string | The message body of this notification.                   |\n| soundName      | string | The sound name of this notification.                     |\n| repeatInterval | number | (Android only) The repeat interval of this notification. |\n| number         | number | App notification badge count number.                     |\n| data           | any    | The user info of this notification.                      |\n\n## Abandon Permissions\n\n```js\nPushNotification.abandonPermissions()\n```\nRevokes the current token and unregister for all remote notifications received via APNS or FCM.\n\n## Notification priority\n\n(optional) Specify `priority` to set priority of notification. Default value: \"high\"\n\nAvailable options:\n\n```\n\"max\" = NotficationCompat.PRIORITY_MAX\\\n\"high\" = NotficationCompat.PRIORITY_HIGH\\\n\"low\" = NotficationCompat.PRIORITY_LOW\\\n\"min\" = NotficationCompat.PRIORITY_MIN\\\n\"default\" = NotficationCompat.PRIORITY_DEFAULT\n```\n\nMore information: https://developer.android.com/reference/android/app/Notification.html#PRIORITY_DEFAULT\n\n## Notification visibility\n\n(optional) Specify `visibility` to set visibility of notification. Default value: \"private\"\n\nAvailable options:\n\n```\n\"private\" = NotficationCompat.VISIBILITY_PRIVATE\\\n\"public\" = NotficationCompat.VISIBILITY_PUBLIC\\\n\"secret\" = NotficationCompat.VISIBILITY_SECRET \n```\nMore information: https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PRIVATE\n\n## Notification importance\n\n(optional) Specify `importance` to set importance of notification. Default value: Importance.HIGH  \nConstants available on the `Importance` object. `import PushNotification, {Importance} from 'react-native-push-notification';`\n\nAvailable options:\n```\nImportance.DEFAULT = NotificationManager.IMPORTANCE_DEFAULT\\\nImportance.HIGH = NotificationManager.IMPORTANCE_HIGH\\\nImportance.LOW = NotificationManager.IMPORTANCE_LOW\\\nImportance.MIN = NotificationManager.IMPORTANCE_MIN\\\nImportance.NONE= NotificationManager.IMPORTANCE_NONE\\\nImportance.UNSPECIFIED = NotificationManager.IMPORTANCE_UNSPECIFIED\n```\n\nMore information: https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT\n\n## Show notifications while the app is in foreground\n\nIf you want a consistent results in Android & iOS with the most flexibility, it is best to handle it manually by prompting a local notification when `onNotification` is triggered by a remote push notification on foreground (check `notification.foreground` prop).\n\nWatch out for an infinite loop triggering `onNotification` - remote & local notification will trigger it. You can overcome this by marking local notifications' data.\n\n## Notification while idle\n\n(optional) Specify `allowWhileIdle` to set if the notification should be allowed to execute even when the system is on low-power idle modes.\n\nOn Android 6.0 (API level 23) and forward, the Doze was introduced to reduce battery consumption when the device is unused for long periods of time. But while on Doze the AlarmManager alarms (used to show scheduled notifications) are deferred to the next maintenance window. This may cause the notification to be delayed while on Doze.\n\nThis can significantly impact the power use of the device when idle. So it must only be used when the notification is required to go off on a exact time, for example on a calendar notification.\n\nMore information:\nhttps://developer.android.com/training/monitoring-device-state/doze-standby\n\n## Repeating Notifications\n\n(optional) Specify `repeatType` and optionally `repeatTime` (Android-only) while scheduling the local notification. Check the local notification example above.\n\n### iOS\nProperty `repeatType` can only be `month`, `week`, `day`, `hour`, `minute`.\n\nNOTE: `repeatTime` do not work with iOS.\n\n### Android\nProperty `repeatType` could be one of `month`, `week`, `day`, `hour`, `minute`, `time`. \n\nThe interval used can be configured to a different interval using `repeatTime`. If `repeatType` is `time`, `repeatTime` must be specified as the number of milliseconds between each interval.\nFor example, to configure a notification every other day\n\n```javascript\nPushNotification.localNotificationSchedule({\n    ...\n    repeatType: 'day',\n    repeatTime: 2,\n    ...\n});\n```\n\n## Notification Actions\n\n(Android Only)\n\nThis is done by specifying an `actions` parameters while configuring the local notification. This is an array of strings where each string is a notification action that will be presented with the notification.\n\nFor e.g. `actions: ['Accept', 'Reject']`\n\nWhen you handle actions in background (`invokeApp: false`), you can open the application and pass the initial notification by using use `PushNotification.invokeApp(notification)`.\n\nMake sure you have the receiver in `AndroidManifest.xml`:\n\n```xml\n  <receiver android:name=\"com.dieam.reactnativepushnotification.modules.RNPushNotificationActions\" />\n```\n\nNotifications with inline reply: \n\nYou must register an action as \"ReplyInput\", this will show in the notifications an input to write in. \n\nEXAMPLE:\n```javascript\nPushNotification.localNotificationSchedule({\n  message: \"My Notification Message\", // (required)\n  date: new Date(Date.now() + (60 * 1000)), // in 60 secs\n  actions: [\"ReplyInput\"],\n  reply_placeholder_text: \"Write your response...\", // (required)\n  reply_button_text: \"Reply\" // (required)\n});\n```\n\nTo get the text from the notification: \n\n```javascript\n...\nif(notification.action === \"ReplyInput\"){\n  console.log(\"texto\", notification.reply_text)// this will contain the inline reply text. \n}\n...\n```\n\nFor iOS, you can use:\n\n```javascript\nPushNotification.setNotificationCategories(categories);\n```\n\nAnd use the `category` field in the notification.\n\nDocumentation [here](https://github.com/react-native-push-notification-ios/push-notification-ios#how-to-perform-different-action-based-on-user-selected-action) to add notification actions.\n\n## Set application badge icon\n\n```js\nPushNotification.setApplicationIconBadgeNumber(number: number)\n```\n\nWorks natively in iOS.\n\nUses the [ShortcutBadger](https://github.com/leolin310148/ShortcutBadger) on Android, and as such will not work on all Android devices.\n\n## Android Only Methods\n\n```js\nPushNotification.subscribeToTopic(topic: string)\n```\nSubscribe to a topic (works only with Firebase)\n\n```js\nPushNotification.unsubscribeFromTopic(topic: string)\n```\nUnsubscribe from a topic (works only with Firebase)\n\n## Android Custom Notification Handling\n\nUnlike iOS, Android apps handle the creation of their own notifications. React Native Push Notifications does a \"best guess\" to create and handle incoming notifications. However, when using 3rd party notification platforms and tools, the initial notification creation process may need to be customized.\n\n### Customizing Notification Creation\n\nIf your notification service uses a custom data payload format, React Native Push Notifications will not be able to parse the data correctly to create an initial notification.\n\nFor these cases, you should:\n\n1. Remove the intent handler configuration for React Native Push Notifications from your `android/app/src/main/AndroidManifest.xml`.\n2. Implement initial notification creation as per the instructions from your Provider.\n\n### Handling Custom Payloads\n\nData payloads of notifications from 3rd party services may not match the format expected by React Native Push Notification. When tapped, these notifications will not pass the details and data to the `onNotification()` event handler. Custom `IntentHandlers` allow you to fix this so that correct `notification` objects are sent to your `onNotification()` method.\n\nCustom handlers are added in Application init or `MainActivity.onCreate()` methods:\n\n```java\nRNPushNotification.IntentHandlers.add(new RNPushNotification.RNIntentHandler() {\n  @Override\n  public void onNewIntent(Intent intent) {\n    // If your provider requires some parsing on the intent before the data can be\n    // used, add that code here. Otherwise leave empty.\n  }\n\n  @Nullable\n  @Override\n  public Bundle getBundleFromIntent(Intent intent) {\n    // This should return the bundle data that will be serialized to the `notification.data`\n    // property sent to the `onNotification()` handler. Return `null` if there is no data\n    // or this is not an intent from your provider.\n    \n    // Example:\n    if (intent.hasExtra(\"MY_NOTIFICATION_PROVIDER_DATA_KEY\")) {\n      return intent.getBundleExtra(\"MY_NOTIFICATION_PROVIDER_DATA_KEY\");\n    }\n    return null;\n  }\n});\n```\n\n## Checking Notification Permissions\n\n```js\nPushNotification.checkPermissions(callback: Function) //Check permissions\n```\n\n`callback` will be invoked with a `permissions` object:\n\n- `alert`: boolean\n- `badge`: boolean\n- `sound`: boolean\n\n## iOS Only Methods\n\n```js\nPushNotification.getApplicationIconBadgeNumber(callback: Function) //Get badge number\n```\n\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "component",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 18.8837890625,
          "content": "/**\n * @providesModule Notifications\n */\n\n'use strict';\n\nimport { AppState, Platform } from 'react-native';\nimport { component } from './component';\n\nconst Notifications = {\n  handler: component,\n  onRegister: false,\n  onRegistrationError: false,\n  onNotification: false,\n  onAction: false,\n  onRemoteFetch: false,\n  isLoaded: false,\n  isPopInitialNotification: false,\n\n  isPermissionsRequestPending: false,\n\n  permissions: {\n    alert: true,\n    badge: true,\n    sound: true\n  }\n};\n\nNotifications.callNative = function(name, params) {\n  if ( typeof this.handler[name] === 'function' ) {\n    if ( typeof params !== 'array' &&\n       typeof params !== 'object' ) {\n      params = [];\n    }\n\n    return this.handler[name](...params);\n  } else {\n    return null;\n  }\n};\n\n/**\n * Configure local and remote notifications\n * @param {Object}    options\n * @param {function}  options.onRegister - Fired when the user registers for remote notifications.\n * @param {function}  options.onNotification - Fired when a remote notification is received.\n * @param {function}  options.onAction - Fired when a remote notification is received.\n * @param {function}  options.onRegistrationError - Fired when the user fails to register for remote notifications.\n * @param {Object}    options.permissions - Permissions list\n * @param {Boolean}   options.requestPermissions - Check permissions when register\n */\nNotifications.configure = function(options) {\n  if ( typeof options.onRegister !== 'undefined' ) {\n    this.onRegister = options.onRegister;\n  }\n\n  if ( typeof options.onRegistrationError !== 'undefined' ) {\n    this.onRegistrationError = options.onRegistrationError;\n  }\n\n  if ( typeof options.onNotification !== 'undefined' ) {\n    this.onNotification = options.onNotification;\n  }\n\n  if ( typeof options.onAction !== 'undefined' ) {\n    this.onAction = options.onAction;\n  }\n\n  if ( typeof options.permissions !== 'undefined' ) {\n    this.permissions = options.permissions;\n  }\n\n  if ( typeof options.onRemoteFetch !== 'undefined' ) {\n    this.onRemoteFetch = options.onRemoteFetch;\n  }\n\n  if ( this.isLoaded === false ) {\n    this._onRegister = this._onRegister.bind(this);\n    this._onRegistrationError = this._onRegistrationError.bind(this);\n    this._onNotification = this._onNotification.bind(this);\n    this._onRemoteFetch = this._onRemoteFetch.bind(this);\n    this._onAction = this._onAction.bind(this);\n    this.callNative( 'addEventListener', [ 'register', this._onRegister ] );\n    this.callNative( 'addEventListener', [ 'registrationError', this._onRegistrationError ] );\n    this.callNative( 'addEventListener', [ 'notification', this._onNotification ] );\n    this.callNative( 'addEventListener', [ 'localNotification', this._onNotification ] );\n    Platform.OS === 'android' ? this.callNative( 'addEventListener', [ 'action', this._onAction ] ) : null\n    Platform.OS === 'android' ? this.callNative( 'addEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n\n    this.isLoaded = true;\n  }\n\n  const handlePopInitialNotification = (state) => {\n    if('active' !== state) {\n      return;\n    }\n\n    if (options.popInitialNotification === undefined || options.popInitialNotification === true) {\n      this.popInitialNotification(function(firstNotification) {\n        if(this.isPopInitialNotification) {\n          return;\n        }\n        \n        this.isPopInitialNotification = true;\n        \n        if (!firstNotification || false === firstNotification.userInteraction) {\n          return;\n        }\n        \n        this._onNotification(firstNotification, true);\n      }.bind(this));\n    }\n  }\n\n  AppState.addEventListener('change', handlePopInitialNotification.bind(this));\n\n  handlePopInitialNotification(AppState.currentState);\n\n  if ( options.requestPermissions !== false ) {\n    this._requestPermissions();\n  }\n};\n\n/* Unregister */\nNotifications.unregister = function() {\n  this.callNative( 'removeEventListener', [ 'register', this._onRegister ] )\n  this.callNative( 'removeEventListener', [ 'registrationError', this._onRegistrationError ] )\n  this.callNative( 'removeEventListener', [ 'notification', this._onNotification ] )\n  this.callNative( 'removeEventListener', [ 'localNotification', this._onNotification ] )\n  Platform.OS === 'android' ? this.callNative( 'removeEventListener', [ 'action', this._onAction ] ) : null\n  Platform.OS === 'android' ? this.callNative( 'removeEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n  this.isLoaded = false;\n};\n\n/**\n * Local Notifications\n * @param {Object}    details\n * @param {String}    details.title  -  The title displayed in the notification alert.\n * @param {String}    details.message - The message displayed in the notification alert.\n * @param {String}    details.ticker -  ANDROID ONLY: The ticker displayed in the status bar.\n * @param {Object}    details.userInfo -  iOS ONLY: The userInfo used in the notification alert.\n */\nNotifications.localNotification = function({...details}) {\n  if ('android' === Platform.OS && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n\n  if (details && typeof details.id === 'number') {\n    if (isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    }\n    else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    // https://developer.apple.com/reference/uikit/uilocalnotification\n\n    let soundName = details.soundName ? details.soundName : 'default'; // play sound (and vibrate) as default behaviour\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = ''; // empty string results in no sound (and no vibration)\n    }\n\n    if(details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n\n    // for valid fields see: https://github.com/react-native-push-notification-ios/push-notification-ios#addnotificationrequest\n\n    this.handler.addNotificationRequest({\n      id: (!details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id),\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      badge: details.number,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo\n    });\n  } else {\n    if (details && typeof details.number === 'number') {\n      if(isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      }\n      else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if(isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      }\n      else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n\n    if(details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if(details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n  \n    if(details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    this.handler.presentLocalNotification(details);\n  }\n};\n\n/**\n * Local Notifications Schedule\n * @param {Object}    details (same as localNotification)\n * @param {Date}    details.date - The date and time when the system should deliver the notification\n */\nNotifications.localNotificationSchedule = function({...details}) {\n  if ('android' === Platform.os && details && !details.channelId) {\n    console.warn('No channel id passed, notifications may not work.');\n  }\n  \n  if (details && typeof details.id === 'number') {\n    if(isNaN(details.id)) {\n      console.warn('NaN value has been passed as id');\n      delete details.id;\n    }\n    else {\n      details.id = '' + details.id;\n    }\n  }\n\n  if (Platform.OS === 'ios') {\n    let soundName = details.soundName ? details.soundName : 'default'; // play sound (and vibrate) as default behaviour\n\n    if (details.hasOwnProperty('playSound') && !details.playSound) {\n      soundName = ''; // empty string results in no sound (and no vibration)\n    }\n\n    if(details.picture) {\n      details.userInfo = details.userInfo || {};\n      details.userInfo.image = details.picture;\n    }\n    \n    const repeatsComponent = {\n      second: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      minute: ['hour', 'day', 'week', 'month'].includes(details.repeatType),\n      hour: ['day', 'week', 'month'].includes(details.repeatType),\n      day: details.repeatType == \"month\",\n      dayOfWeek: details.repeatType == \"week\",\n    };\n\n    const iosDetails = {\n      id: (!details.id ? Math.floor(Math.random() * Math.pow(2, 32)).toString() : details.id),\n      fireDate: details.date.toISOString(),\n      title: details.title,\n      subtitle: details.subtitle,\n      body: details.message,\n      sound: soundName,\n      isSilent: details.playSound === false,\n      category: details.category,\n      userInfo: details.userInfo,\n      repeats: ['minute', 'hour', 'day', 'week', 'month'].includes(details.repeatType),\n      repeatsComponent: repeatsComponent\n    };\n\n    if (details.number) {\n      iosDetails.badge = parseInt(details.number, 10);\n    }\n\n    this.handler.addNotificationRequest(iosDetails);\n  } else {\n    if (details && typeof details.number === 'number') {\n      if (isNaN(details.number)) {\n        console.warn('NaN value has been passed as number');\n        delete details.number;\n      }\n      else {\n        details.number = '' + details.number;\n      }\n    }\n\n    if (details && typeof details.shortcutId === 'number') {\n      if (isNaN(details.shortcutId)) {\n        console.warn('NaN value has been passed as shortcutId');\n        delete details.shortcutId;\n      }\n      else {\n        details.shortcutId = '' + details.shortcutId;\n      }\n    }\n  \n    if(details && Array.isArray(details.actions)) {\n      details.actions = JSON.stringify(details.actions);\n    }\n\n    if(details.userInfo) {\n      details.userInfo = JSON.stringify(details.userInfo);\n    }\n\n    if(details.picture && !details.bigPictureUrl) {\n      details.bigPictureUrl = details.picture;\n    }\n\n    details.fireDate = details.date.getTime();\n    delete details.date;\n\n    this.handler.scheduleLocalNotification(details);\n  }\n};\n\n/* Internal Functions */\nNotifications._onRegister = function(token) {\n  if ( this.onRegister !== false ) {\n    this.onRegister({\n      token: token,\n      os: Platform.OS\n    });\n  }\n};\n\nNotifications._onRegistrationError = function(err) {\n  if ( this.onRegistrationError !== false ) {\n    this.onRegistrationError(err);\n  }\n};\n\nNotifications._onRemoteFetch = function(notificationData) {\n  if ( this.onRemoteFetch !== false ) {\n    this.onRemoteFetch(notificationData)\n  }\n};\n\nNotifications._onAction = function({...notification}) {\n  if ( typeof notification.data === 'string' ) {\n    try {\n      notification.data = JSON.parse(notificationData.data);\n    } catch(e) {\n      /* void */\n    }\n  }\n\n  this.onAction(notification);\n}\n\nNotifications._transformNotificationObject = function(data, isFromBackground = null) {\n  if(!data) {\n    return;\n  }\n\n  if ( isFromBackground === null ) {\n    isFromBackground = (\n      data.foreground === false ||\n      AppState.currentState === 'background' ||\n      AppState.currentState === 'unknown'\n    );\n  }\n\n  let _notification;\n\n  if ( Platform.OS === 'ios' ) {\n    const notifData = data.getData();\n\n    _notification = {\n      id: notifData?.id,\n      foreground: !isFromBackground,\n      userInteraction: notifData?.userInteraction === 1 || false,\n      message: data.getMessage(),\n      data: notifData,\n      badge: data.getBadgeCount(),\n      title: data.getTitle(),\n      subtitle: data.getSubtitle(),\n      soundName: data.getSound(),\n      fireDate: Date.parse(data._fireDate),\n      action: data.getActionIdentifier(),\n      reply_text: data.getUserText(),\n      finish: (res) => data.finish(res)\n    };\n\n    if(isNaN(_notification.fireDate)) {\n      delete _notification.fireDate;\n    }\n\n  } else {\n    _notification = {\n      foreground: !isFromBackground,\n      finish: () => {},\n      ...data,\n    };\n\n    if ( typeof _notification.data === 'string' ) {\n      try {\n        _notification.data = JSON.parse(_notification.data);\n      } catch(e) {\n        /* void */\n      }\n    }\n    \n    if ( typeof _notification.userInfo === 'string' ) {\n      try {\n        _notification.userInfo = JSON.parse(_notification.userInfo);\n      } catch(e) {\n        /* void */\n      }\n    }\n\n\n    _notification.data = {\n      ...(typeof _notification.userInfo === 'object' ? _notification.userInfo : {}),\n      ...(typeof _notification.data === 'object' ? _notification.data : {}),\n    };\n\n    delete _notification.userInfo;\n    delete _notification.notificationId;\n  }\n\n  return _notification;\n}\n\nNotifications._onNotification = function(data, initialNotification = false) {\n  if ( this.onNotification !== false ) {\n    let notification = data;\n\n    if(!initialNotification) {\n      notification = this._transformNotificationObject(data);\n    }\n\n    this.onNotification(notification);\n  }\n};\n\n/* onResultPermissionResult */\nNotifications._onPermissionResult = function() {\n  this.isPermissionsRequestPending = false;\n};\n\n// Prevent requestPermissions called twice if ios result is pending\nNotifications._requestPermissions = function() {\n  if ( Platform.OS === 'ios' ) {\n    if ( this.isPermissionsRequestPending === false ) {\n      this.isPermissionsRequestPending = true;\n      return this.callNative( 'requestPermissions', [ this.permissions ])\n              .then(this._onPermissionResult.bind(this))\n              .catch(this._onPermissionResult.bind(this));\n    }\n  } else if (Platform.OS === 'android') {\n    return this.callNative( 'requestPermissions', []);\n  }\n};\n\n// Stock requestPermissions function\nNotifications.requestPermissions = function() {\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative( 'requestPermissions', [ this.permissions ]);\n  } else if (Platform.OS === 'android') {\n    return this.callNative( 'requestPermissions', []);\n  }\n};\n\n/* Fallback functions */\nNotifications.subscribeToTopic = function() {\n  return this.callNative('subscribeToTopic', arguments);\n};\n\nNotifications.unsubscribeFromTopic = function () {\n  return this.callNative('unsubscribeFromTopic', arguments);\n};\n\nNotifications.presentLocalNotification = function() {\n  return this.callNative('presentLocalNotification', arguments);\n};\n\nNotifications.scheduleLocalNotification = function() {\n  return this.callNative('scheduleLocalNotification', arguments);\n};\n\nNotifications.cancelLocalNotifications = function(userInfo) {\n  console.warn('This method is now deprecated, please use `cancelLocalNotification` (remove the ending `s`).');\n\n  return this.cancelLocalNotification(userInfo);\n};\n\nNotifications.cancelLocalNotification = function(notificationId) {\n  if(typeof notificationId === 'object') {\n    notificationId = notificationId?.id;\n  }\n\n  if(typeof notificationId === 'number') {\n    notificationId = '' + notificationId;\n  }\n\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative('removePendingNotificationRequests', [[notificationId]]);\n  } else {\n    return this.callNative('cancelLocalNotification', [notificationId]);\n  }\n};\n\nNotifications.clearLocalNotification = function() {\n    return this.callNative('clearLocalNotification', arguments);\n};\n\nNotifications.cancelAllLocalNotifications = function() {\n  if ( Platform.OS === 'ios' ) {\n    return this.callNative('removeAllPendingNotificationRequests', arguments);\n  } else if (Platform.OS === 'android') {\n    return this.callNative('cancelAllLocalNotifications', arguments);\n  }\n};\n\nNotifications.setApplicationIconBadgeNumber = function() {\n  return this.callNative('setApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.getApplicationIconBadgeNumber = function() {\n  return this.callNative('getApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.popInitialNotification = function(handler) {\n  this.callNative('getInitialNotification').then((result) => {\n    handler(\n      this._transformNotificationObject(result, true)\n    );\n  });\n};\n\nNotifications.checkPermissions = function() {\n  return this.callNative('checkPermissions', arguments);\n};\n\n/* Abandon Permissions */\nNotifications.abandonPermissions = function() {\n  return this.callNative('abandonPermissions', arguments);\n}\n\nNotifications.clearAllNotifications = function() {\n  // Only available for Android\n  return this.callNative('clearAllNotifications', arguments)\n}\n\nNotifications.removeAllDeliveredNotifications = function() {\n  return this.callNative('removeAllDeliveredNotifications', arguments);\n}\n\nNotifications.getDeliveredNotifications = function() {\n  return this.callNative('getDeliveredNotifications', arguments);\n}\n\nNotifications.getScheduledLocalNotifications = function(callback) {\n\tconst mapNotifications = (notifications) => {\n\t\tlet mappedNotifications = [];\n\t\tif(notifications?.length > 0) {\n\t\t\tif(Platform.OS === 'ios'){\n\t\t\t\tmappedNotifications = notifications.map(notif => {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tsoundName: notif?.sound,\n\t\t\t\t\t\tid: notif.id,\n                        date: (notif.date ? new Date(notif.date) : null),\n\t\t\t\t\t\tnumber: notif?.badge,\n\t\t\t\t\t\tmessage: notif?.body,\n            title: notif?.title,\n            data: notif?.userInfo\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else if(Platform.OS === 'android') {\n\t\t\t\tmappedNotifications = notifications.map(notif => {\n\n          try {\n            notif.data = JSON.parse(notif.data);\n          } catch(e) { }\n\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tsoundName: notif.soundName,\n\t\t\t\t\t\trepeatInterval: notif.repeatInterval,\n\t\t\t\t\t\tid: notif.id,\n\t\t\t\t\t\tdate: new Date(notif.date),\n\t\t\t\t\t\tnumber: notif.number,\n\t\t\t\t\t\tmessage: notif.message,\n\t\t\t\t\t\ttitle: notif.title,\n\t\t\t\t\t\tdata: notif.data,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tcallback(mappedNotifications);\n\t}\n\n  if(Platform.OS === 'ios'){\n    return this.callNative('getPendingNotificationRequests', [mapNotifications]);\n  } else {\n    return this.callNative('getScheduledLocalNotifications', [mapNotifications]);\n  }\n}\n\nNotifications.removeDeliveredNotifications = function() {\n  return this.callNative('removeDeliveredNotifications', arguments);\n}\n\nNotifications.invokeApp = function() {\n  return this.callNative('invokeApp', arguments);\n};\n\nNotifications.getChannels = function() {\n  return this.callNative('getChannels', arguments);\n};\n\nNotifications.channelExists = function() {\n  return this.callNative('channelExists', arguments);\n};\n\nNotifications.createChannel = function() {\n  return this.callNative('createChannel', arguments);\n};\n\nNotifications.channelBlocked = function() {\n  return this.callNative('channelBlocked', arguments);\n};\n\nNotifications.deleteChannel = function() {\n  return this.callNative('deleteChannel', arguments);\n};\n\nNotifications.setNotificationCategories = function() {\n  return this.callNative('setNotificationCategories', arguments);\n}\n\n// https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT\nNotifications.Importance = Object.freeze({\n  DEFAULT: 3,\n  HIGH: 4,\n  LOW: 2,\n  MIN: 1,\n  NONE: 0,\n  UNSPECIFIED: -1000,\n});\n\nmodule.exports = Notifications;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.755859375,
          "content": "{\n  \"name\": \"react-native-push-notification\",\n  \"version\": \"8.1.1\",\n  \"description\": \"React Native Local and Remote Notifications\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"react-component\",\n    \"react-native\",\n    \"ios\",\n    \"android\",\n    \"notifications\",\n    \"push\",\n    \"apns\",\n    \"firebase\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/zo0r/react-native-push-notification/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com:zo0r/react-native-push-notification.git\"\n  },\n  \"peerDependencies\": {\n    \"@react-native-community/push-notification-ios\": \"^1.10.1\",\n    \"react-native\": \">=0.33\"\n  },\n  \"author\": \"zo0r <http://zo0r.me>\",\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "react-native.config.js",
          "type": "blob",
          "size": 0.1884765625,
          "content": "module.exports = {\n    dependency: {\n        platforms: {\n            android: {\n                \"packageInstance\": \"new ReactNativePushNotificationPackage()\"\n            } \n        }\n    }\n};\n"
        },
        {
          "name": "submitting-a-pull-request.md",
          "type": "blob",
          "size": 1.58984375,
          "content": "## Pull Requests\n\nIf you are thinking of, or have prepared a pull request, **thank you!**  Your efforts are greatly appreciated by everyone associated with this project.\n\nIn order to get your PR accepted please ensure the following:\n\n * describe briefly the rational of the change, why did you do this (to create new feature, bug fix, add some missing docs etc...)?\n * detail the purpose of the change - **what is the expected change in behaviour**?\n * state which operating systems are affected\n * provide details on how to test the change\n \n### How do I get it accepted?\n\nAlthough there are lots of contributors you might not find one who has the time to test your change, and it needs to be tested before it gets merged.  \n\nA good (and helpful) approach is to find someone to test your change before a contributor takes a look at it.  Perhaps ask someone else who has an outstanding PR to test your PR, and in exchange you offer to test theirs.  For very small changes (just a few lines of code maybe) then just one reviewer is probably sufficient.  But for larger changes try and find more than one person to test it.\n\n### Testing a PR\n\nIf you are testing someones PR, please provide the following feedback:\n\n * are you happy that the purpose or intent of this PR is a suitable change for this project? (_is it a good idea?_)\n * are you happy that the change in behaviour works as described, and you have tested the change on all affected operating systems?\n * in your opinion, is the code written _sensibly_? \n   * is it clean and tidy? \n   * there are any unnecessary changes?\n   * is it documented appropriately?\n   \n   \n"
        },
        {
          "name": "trouble-shooting.md",
          "type": "blob",
          "size": 9.41015625,
          "content": "# Trouble shooting\n\nBefore submitting an issue please take a moment to read though the following. Most issues are common and some solutions are listed here.\n\nKnown bugs and issues:\n\n * (Android) Tapping an alert in the notification centre will sometimes not result in `onNotification` being called [issue 281](https://github.com/zo0r/react-native-push-notification/issues/281)\n * (Android) Not all local notification features are supported yet (PRs welcome)\n * (iOS) The OS can penalise your app for not calling the completion handler and will stop (or delay) sending notifications to your app. This will be supported from RN-0.38 [PR 227](https://github.com/zo0r/react-native-push-notification/pull/277)\n * (Android and iOS) Don't use a string to get the date for schedule a local notification, it only works with remote debugger enabled, [explanation](https://stackoverflow.com/a/41881765/8519917).\n  \n\n  ```javascript\n  // It doesn't work with the javascript engine used by React Native \n  const date = new Date(\"10-10-2020 12:30\");\n  ```\n  A good practice to get valid date could be:\n\n  ```javascript\n  // Get date to schedule a local notification today at 12:30:00\n  const hour = 12;\n  const minute = 30;\n  const second = 0;\n\n  const now = new Date();\n  const date = new Date(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    hour,\n    minute,\n    second\n  );\n  ```\n \n# Android tips\n\n * Use a physical device for remote push notifications. They will not work on an emulator.\n * Try _\"grepping\"_ logcat for `ReactNativeJS|RNPushNotification` at **debug** level - it will likely shed some light onto what's happening.\n * Your GCM `senderID` can be obtained by obtaining a file from your google console called `google-services.json`.  From this file use the `project_number` as your ID.\n * `Native module cannot be null` error happens when your project isn't _linked_ correctly.  Please re-read the installation instructions, specifically the bit about `react-native link` and `MainApplication.java`.\n * Take a look at the [google docs](https://developers.google.com/cloud-messaging/http-server-ref#notification-payload-support) for more about remote push notifications.\n * Badges do not work on all devices. You should see an error being logged once when the app starts if setting a badge isn't supported.\n\n# iOS tips\n\n * Use a physical device for remote push notifications. They will not work on a simulator.\n * Add a log statement (`NSLog(@\"push-notification received: %@\", notification);`) to your `didReceiveRemoteNotification` method in `AppDelegate.m`\n * Look out for `APNS` log messages in the device logs.\n  \n# About notifications...\n\nThere are a number of different types of notifications, and they have subtly different behaviours.  There are essentially 4 types, let's call them _local notifications_ (1), _noisy remote push notifications_ (2) and _silent remote push notifications_ (3).\n\n## 1. local notifications\n\nLocal notifications are sent from your JS/RN app and appear as alerts in the notification centre, where they sit until the user removes them.  They can contain text as well as sounds, vibrations, colour, images etc.  Different operating systems support different features.  You can send one by calling the `PushNotification.localNotification` method as described in the docs.  Local notifications can also be scheduled to run at a later date.\n\nIf a user taps an alert, your app will be started or brought to the foreground and `onNotification` will be called.\n\n#### Android local notifications\n\nThese are highly customisable (more so than _noisy_ remote push notifications) **but** this library doesn't yet support all features, for example you cannot stack notifications using the \"grouping\" feature.\n\n## 2. _noisy_ remote push notifications\n\n_Noisy_ remote push notifications are sent from a server, such as the Apple Push Notification Service (APNS), or the Google Cloud Messaging Service (GCM).  When the app is in the background, they appear only as alerts in the notification centre and may not interact with your application in any way when they are delivered.  Like local notifications they have a visual (or audible) element.\n\nWhen a user taps an alert in the notification centre that was created by a _noisy_ remote push notification, your app will be either started or brought to the foreground.  The `onNotification` method will fired.\n\n#### Android _noisy_ remote push notifications\n\nYour server will send something like this to GCM:\n\n```json\n{\n  \"to\": \"<token>\",\n  \"time_to_live\": 86400,\n  \"collapse_key\": \"new_message\",\n  \"delay_while_idle\": false,\n  \"notification\": {\n    \"title\": \"title\",\n    \"body\": \"this is a noisy test\",\n    \"tag\": \"new_message\",\n    \"icon\": \"new_message\",\n    \"color\": \"#18d821\",\n    \"sound\": \"default\"\n  }\n}\n```\n\nYour app will not be invoked when this is received.\n\n#### iOS _noisy_ remote push notifications\n\nYour server will send something like this to APNS:\n\n```json\n{\n  \"aps\": {\n    \"alert\": {\n      \"body\": \"the body text\",\n      \"title\": \"the title\"\n    },\n    \"badge\": 6,\n    \"sound\": \" default\"\n  }\n}\n```\n\nYour app will not be invoked if it is running in the background, and the notification will result in an alert in the notification centre.  If you app is running in the foreground, `onNotification` will be called with something like:\n\n```json\n{\n  \"foreground\": true,\n  \"userInteraction\": false,\n  \"message\": {\n    \"title\": \"the title\",\n    \"body\": \"the body text\"\n  },\n  \"data\": {\n    \"remote\": true,\n    \"notificationId\": \"A3DC5EEE-FF97-4695-B562-3A7E89E43199\"\n  },\n  \"badge\": 4,\n  \"alert\": {\n    \"title\": \"the title\",\n    \"body\": \"the body text\"\n  },\n  \"sound\": \" default\"\n}\n```\n\nTapping the alert in the notification centre will start or bring the app to the foreground and `onNotification` will be called.\n\n## 3. _silent_ remote push notifications\n\n_Silent_ remote push notifications are also sent from a server.  They are delivered to your app but **not** to the notification centre, and as such have no visual or audible content.  When receiving a notification the `onNotification` in your JS app will be called.  The app can be running in the foreground or background, the notification will always be delivered to the app.\n\nUsing a _silent_ remote push notifications which in turn creates a customised _local_ notification is a common pattern for providing a rich user experience.\n\n#### Android _silent_ remote push notifications\n\nYour server will send something like this to GCM:\n\n```json\n{\n  \"to\": \"<token>\",\n  \"time_to_live\": 86400,\n  \"collapse_key\": \"new_message\",\n  \"delay_while_idle\": false,\n  \"data\": {\n    \"your-key\": \"your-value\"\n  }\n}\n```\n\nThe crucial bit is presence of the `data` field.  Your RN/JS app will receive something like:\n\n```json\n{\n  \"foreground\": true,\n  \"your-key\": \"your-value\",\n  \"google.sent_time\": 1478872536263,\n  \"userInteraction\": false,\n  \"google.message_id\": \"0:999999999999\",\n  \"collapse_key\": \"new_message\"\n}\n```\n\nIf your Android app is not running when a _silent_ notification is received then this library will start it.  It will be started in the background however, and if the OS starts your app in this way it will not start the react-native lifecycle.  This means that if your notification delivery code relies on the react-native lifecycle then it will not get invoked in this situation.  You need to structure your app in such a way that `PushNotification.configure` gets called as a side effect of merely importing the root `index.android.js` file.\n\n#### iOS _silent_ remote push notifications\n\nSend something like this to the APNS (here are the [docs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW1)):\n\n```json\n{\n  \"aps\": {\n    \"content-available\": 1\n  },\n  \"payload\": \"{\\\"your-key\\\":\\\"your-value\\\"}\"\n}\n```\n\nThis is a _pure_ silent push notification.  It must not include a badge, sound or any alert text.  These types of silent notifications are of limited use.  They MUST be sent with a priority of 5 (10 is the default) and are subject to delays - basically, the OS may delay delivery if the battery is low and the phone isn't plugged in.\n\nYou can create an alternative _non-pure_ iOS silent push notification by adding an empty string as the alert body or sound name (see this [discussion](http://stackoverflow.com/questions/19239737/silent-push-notification-in-ios-7-does-not-work)).  This will be delivered as a high priority message and will not be subject to OS imposed delays.  Obviously this is a bit of a hack.  A better approach to silent push notifications is to use [react-native-voip-push-notification](https://github.com/ianlin/react-native-voip-push-notification).\n\nThe crucial bit of an iOS silent notification is presence of the `\"content-available\": 1` field.  Your RN/JS app will receive something like:\n\n```json\n{\n  \"foreground\": true,\n  \"userInteraction\": false,\n  \"data\": {\n    \"remote\": true,\n    \"payload\": \"{\\\"your-key\\\":\\\"your-value\\\"}\",\n    \"notificationId\": \"8D8C24FF-B4F0-4D13-BA0E-295D0E474279\"\n  }\n}\n```\n\nAfter you have processed the notification you must call isn't `finish` method (as of RN 0.38).\n\n#### Some useful links\n\n * https://devcenter.verivo.com/display/doc/Handling+Push+Notifications+on+iOS\n * https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1\n * http://stackoverflow.com/questions/12071726/how-to-use-beginbackgroundtaskwithexpirationhandler-for-already-running-task-in\n"
        }
      ]
    }
  ]
}